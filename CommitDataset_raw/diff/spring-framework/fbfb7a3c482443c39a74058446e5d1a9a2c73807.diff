[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistration.java, +	private VersionResourceResolver versionResolver;, +	private List<ResourceTransformer> customTransformers = new ArrayList<ResourceTransformer>();, +, +, +	public ResourceHandlerRegistration addFixedVersionStrategy(String fixedVersion, String... pathPatterns) {, +	public ResourceHandlerRegistration addContentVersionStrategy(String... pathPatterns) {, +, +	/**, +	 * Apply Resource Versioning on the matching resources; this will update resources' URLs to include, +	 * a version string calculated by a {@link VersionStrategy}. This is often used for cache busting., +	 * <p>Note that a {@link CssLinkResourceTransformer} will be automatically registered to, +	 * support versioned resources in CSS files.</p>, +	 * @param strategy the versioning strategy to use, +	 * @param pathPatterns one or more resource URL path patterns, +	 * @return the same {@link ResourceHandlerRegistration} instance for chained method invocation, +	 * @see VersionResourceResolver, +	 * @see VersionStrategy, +	 * @since 4.1, +	 */, +	public ResourceHandlerRegistration addVersionStrategy(VersionStrategy strategy, String... pathPatterns) {, +		if (this.versionResolver == null) {, +			this.versionResolver = new VersionResourceResolver();, +			this.customResolvers.add(this.versionResolver);, +			this.customTransformers.add(new CssLinkResourceTransformer());, +		}, +		for(String pattern : pathPatterns) {, +			this.versionResolver.getVersionStrategyMap().put(pattern, strategy);, +		}, +		return this;, +	}, +, +		if (this.customResolvers.isEmpty()) {, +			return null;, +		}, +		ResourceResolver first = this.customResolvers.get(0);, +		if (!ClassUtils.isAssignable(CachingResourceResolver.class, first.getClass()) && !this.isDevMode) {, +		ResourceResolver last = this.customResolvers.get(this.customResolvers.size() - 1);, +		if (!ClassUtils.isAssignable(PathResourceResolver.class, last.getClass())) {, +		}, +		if (this.customTransformers.isEmpty()) {, +			return null;, +		}, +		ResourceTransformer first = this.customTransformers.get(0);, +		if (!ClassUtils.isAssignable(CachingResourceTransformer.class, first.getClass()) && !this.isDevMode) {, +		if (!CollectionUtils.isEmpty(resourceResolvers)) {, +		if (!CollectionUtils.isEmpty(resourceTransformers)) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistration.java, +	private VersionResourceResolver versionResolver;, +	private List<ResourceTransformer> customTransformers = new ArrayList<ResourceTransformer>();, +, +, +	public ResourceHandlerRegistration addFixedVersionStrategy(String fixedVersion, String... pathPatterns) {, +	public ResourceHandlerRegistration addContentVersionStrategy(String... pathPatterns) {, +, +	/**, +	 * Apply Resource Versioning on the matching resources; this will update resources' URLs to include, +	 * a version string calculated by a {@link VersionStrategy}. This is often used for cache busting., +	 * <p>Note that a {@link CssLinkResourceTransformer} will be automatically registered to, +	 * support versioned resources in CSS files.</p>, +	 * @param strategy the versioning strategy to use, +	 * @param pathPatterns one or more resource URL path patterns, +	 * @return the same {@link ResourceHandlerRegistration} instance for chained method invocation, +	 * @see VersionResourceResolver, +	 * @see VersionStrategy, +	 * @since 4.1, +	 */, +	public ResourceHandlerRegistration addVersionStrategy(VersionStrategy strategy, String... pathPatterns) {, +		if (this.versionResolver == null) {, +			this.versionResolver = new VersionResourceResolver();, +			this.customResolvers.add(this.versionResolver);, +			this.customTransformers.add(new CssLinkResourceTransformer());, +		}, +		for(String pattern : pathPatterns) {, +			this.versionResolver.getVersionStrategyMap().put(pattern, strategy);, +		}, +		return this;, +	}, +, +		if (this.customResolvers.isEmpty()) {, +			return null;, +		}, +		ResourceResolver first = this.customResolvers.get(0);, +		if (!ClassUtils.isAssignable(CachingResourceResolver.class, first.getClass()) && !this.isDevMode) {, +		ResourceResolver last = this.customResolvers.get(this.customResolvers.size() - 1);, +		if (!ClassUtils.isAssignable(PathResourceResolver.class, last.getClass())) {, +		}, +		if (this.customTransformers.isEmpty()) {, +			return null;, +		}, +		ResourceTransformer first = this.customTransformers.get(0);, +		if (!ClassUtils.isAssignable(CachingResourceTransformer.class, first.getClass()) && !this.isDevMode) {, +		if (!CollectionUtils.isEmpty(resourceResolvers)) {, +		if (!CollectionUtils.isEmpty(resourceTransformers)) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/PathResourceResolver.java, +	protected String resolveUrlPathInternal(String resourcePath, List<? extends Resource> locations,, +		return (getResource(resourcePath, locations) != null ? resourcePath : null);, +	private Resource getResource(String resourcePath, List<? extends Resource> locations) {, +				Resource resource = getResource(resourcePath, location);, +				if (resource != null) {]