[+++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionFactory.java, +	S createSession(String sessionId, SockJsHandler sockJsHandler);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionFactory.java, +	S createSession(String sessionId, SockJsHandler sockJsHandler);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionSupport.java, +		Assert.notNull(sockJsHandler, "sockJsHandler is required");, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionFactory.java, +	S createSession(String sessionId, SockJsHandler sockJsHandler);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionSupport.java, +		Assert.notNull(sockJsHandler, "sockJsHandler is required");, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractServerSession.java, +	public AbstractServerSession(String sessionId, SockJsConfiguration sockJsConfig, SockJsHandler sockJsHandler) {, +		super(sessionId, sockJsHandler);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionFactory.java, +	S createSession(String sessionId, SockJsHandler sockJsHandler);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionSupport.java, +		Assert.notNull(sockJsHandler, "sockJsHandler is required");, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractServerSession.java, +	public AbstractServerSession(String sessionId, SockJsConfiguration sockJsConfig, SockJsHandler sockJsHandler) {, +		super(sessionId, sockJsHandler);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractSockJsService.java, +import org.springframework.sockjs.SockJsHandler;, +import org.springframework.web.util.UriUtils;, +public abstract class AbstractSockJsService implements SockJsService, SockJsConfiguration {, +	/**, +	 * The amount of time in milliseconds before a client is considered, +	 * disconnected after not having a receiving connection, i.e. an active, +	 * connection over which the server can send data to the client., +	 * <p>, +	 * The default value is 5000., +	 */, +	/**, +	 * Return the amount of time in milliseconds before a client is considered disconnected., +	 */, +	public boolean isWebSocketEnabled() {, +	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,, +			String sockJsPath, SockJsHandler sockJsHandler) throws Exception {, +		String path = UriUtils.decode(request.getURI().getPath(), "URF-8");, +		int index = path.indexOf(this.prefix);, +		sockJsPath = path.substring(index + this.prefix.length());, +, +				handleRawWebSocketRequest(request, response, sockJsHandler);, +			handleTransportRequest(request, response, sessionId, TransportType.fromValue(transport), sockJsHandler);, +	protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, ServerHttpResponse response,, +			SockJsHandler sockJsHandler) throws Exception;, +			String sessionId, TransportType transportType, SockJsHandler sockJsHandler) throws Exception;, +, +		if (!isWebSocketEnabled() && transport.equals(TransportType.WEBSOCKET.value())) {, +				String content = String.format(INFO_CONTENT, random.nextInt(), isJsessionIdCookieRequired(), isWebSocketEnabled());, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionFactory.java, +	S createSession(String sessionId, SockJsHandler sockJsHandler);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionSupport.java, +		Assert.notNull(sockJsHandler, "sockJsHandler is required");, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractServerSession.java, +	public AbstractServerSession(String sessionId, SockJsConfiguration sockJsConfig, SockJsHandler sockJsHandler) {, +		super(sessionId, sockJsHandler);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractSockJsService.java, +import org.springframework.sockjs.SockJsHandler;, +import org.springframework.web.util.UriUtils;, +public abstract class AbstractSockJsService implements SockJsService, SockJsConfiguration {, +	/**, +	 * The amount of time in milliseconds before a client is considered, +	 * disconnected after not having a receiving connection, i.e. an active, +	 * connection over which the server can send data to the client., +	 * <p>, +	 * The default value is 5000., +	 */, +	/**, +	 * Return the amount of time in milliseconds before a client is considered disconnected., +	 */, +	public boolean isWebSocketEnabled() {, +	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,, +			String sockJsPath, SockJsHandler sockJsHandler) throws Exception {, +		String path = UriUtils.decode(request.getURI().getPath(), "URF-8");, +		int index = path.indexOf(this.prefix);, +		sockJsPath = path.substring(index + this.prefix.length());, +, +				handleRawWebSocketRequest(request, response, sockJsHandler);, +			handleTransportRequest(request, response, sessionId, TransportType.fromValue(transport), sockJsHandler);, +	protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, ServerHttpResponse response,, +			SockJsHandler sockJsHandler) throws Exception;, +			String sessionId, TransportType transportType, SockJsHandler sockJsHandler) throws Exception;, +, +		if (!isWebSocketEnabled() && transport.equals(TransportType.WEBSOCKET.value())) {, +				String content = String.format(INFO_CONTENT, random.nextInt(), isJsessionIdCookieRequired(), isWebSocketEnabled());, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/ConfigurableTransportHandler.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License.]