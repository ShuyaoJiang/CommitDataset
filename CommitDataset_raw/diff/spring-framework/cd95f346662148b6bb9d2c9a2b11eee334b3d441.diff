[+++ b/build.gradle, +	ext.kotlinVersion = '1.1.2', +	ext.jackson2Version        = "2.9.0.pr3", +	ext.rxjava2Version         = '2.0.9', +	ext.undertowVersion        = "1.4.13.Final", +		optional("javax.json.bind:javax.json.bind-api:1.0.0-M2"), +		testCompile("com.fasterxml.jackson.datatype:jackson-datatype-joda:${jackson2Version}"), +++ b/build.gradle, +	ext.kotlinVersion = '1.1.2', +	ext.jackson2Version        = "2.9.0.pr3", +	ext.rxjava2Version         = '2.0.9', +	ext.undertowVersion        = "1.4.13.Final", +		optional("javax.json.bind:javax.json.bind-api:1.0.0-M2"), +		testCompile("com.fasterxml.jackson.datatype:jackson-datatype-joda:${jackson2Version}"), +++ b/spring-aop/src/main/java/org/springframework/aop/support/annotation/AnnotationClassFilter.java, + * Copyright 2002-2017 the original author or authors., +	 * @param checkInherited whether to also check the superclasses and, +	 * interfaces as well as meta-annotations for the annotation type, +	 * (i.e. whether to use {@link AnnotationUtils#findAnnotation(Class, Class)}, +	 * semantics instead of standard Java {@link Class#isAnnotationPresent}), +++ b/build.gradle, +	ext.kotlinVersion = '1.1.2', +	ext.jackson2Version        = "2.9.0.pr3", +	ext.rxjava2Version         = '2.0.9', +	ext.undertowVersion        = "1.4.13.Final", +		optional("javax.json.bind:javax.json.bind-api:1.0.0-M2"), +		testCompile("com.fasterxml.jackson.datatype:jackson-datatype-joda:${jackson2Version}"), +++ b/spring-aop/src/main/java/org/springframework/aop/support/annotation/AnnotationClassFilter.java, + * Copyright 2002-2017 the original author or authors., +	 * @param checkInherited whether to also check the superclasses and, +	 * interfaces as well as meta-annotations for the annotation type, +	 * (i.e. whether to use {@link AnnotationUtils#findAnnotation(Class, Class)}, +	 * semantics instead of standard Java {@link Class#isAnnotationPresent}), +++ b/spring-aop/src/main/java/org/springframework/aop/support/annotation/AnnotationMatchingPointcut.java, + * Copyright 2002-2017 the original author or authors., +		this(classAnnotationType, false);, +	 * @param checkInherited whether to also check the superclasses and interfaces, +	 * as well as meta-annotations for the annotation type, +	 * @see AnnotationClassFilter#AnnotationClassFilter(Class, boolean), +		this(classAnnotationType, methodAnnotationType, false);, +	}, +, +	/**, +	 * Create a new AnnotationMatchingPointcut for the given annotation type., +	 * @param classAnnotationType the annotation type to look for at the class level, +	 * (can be {@code null}), +	 * @param methodAnnotationType the annotation type to look for at the method level, +	 * (can be {@code null}), +	 * @param checkInherited whether to also check the superclasses and interfaces, +	 * as well as meta-annotations for the annotation type, +	 * @since 5.0, +	 * @see AnnotationClassFilter#AnnotationClassFilter(Class, boolean), +	 * @see AnnotationMethodMatcher#AnnotationMethodMatcher(Class, boolean), +	 */, +	public AnnotationMatchingPointcut(Class<? extends Annotation> classAnnotationType,, +			Class<? extends Annotation> methodAnnotationType, boolean checkInherited) {, +, +			this.classFilter = new AnnotationClassFilter(classAnnotationType, checkInherited);, +			this.methodMatcher = new AnnotationMethodMatcher(methodAnnotationType, checkInherited);, +++ b/build.gradle, +	ext.kotlinVersion = '1.1.2', +	ext.jackson2Version        = "2.9.0.pr3", +	ext.rxjava2Version         = '2.0.9', +	ext.undertowVersion        = "1.4.13.Final", +		optional("javax.json.bind:javax.json.bind-api:1.0.0-M2"), +		testCompile("com.fasterxml.jackson.datatype:jackson-datatype-joda:${jackson2Version}"), +++ b/spring-aop/src/main/java/org/springframework/aop/support/annotation/AnnotationClassFilter.java, + * Copyright 2002-2017 the original author or authors., +	 * @param checkInherited whether to also check the superclasses and, +	 * interfaces as well as meta-annotations for the annotation type, +	 * (i.e. whether to use {@link AnnotationUtils#findAnnotation(Class, Class)}, +	 * semantics instead of standard Java {@link Class#isAnnotationPresent}), +++ b/spring-aop/src/main/java/org/springframework/aop/support/annotation/AnnotationMatchingPointcut.java, + * Copyright 2002-2017 the original author or authors., +		this(classAnnotationType, false);, +	 * @param checkInherited whether to also check the superclasses and interfaces, +	 * as well as meta-annotations for the annotation type, +	 * @see AnnotationClassFilter#AnnotationClassFilter(Class, boolean), +		this(classAnnotationType, methodAnnotationType, false);, +	}, +, +	/**, +	 * Create a new AnnotationMatchingPointcut for the given annotation type., +	 * @param classAnnotationType the annotation type to look for at the class level, +	 * (can be {@code null}), +	 * @param methodAnnotationType the annotation type to look for at the method level, +	 * (can be {@code null}), +	 * @param checkInherited whether to also check the superclasses and interfaces, +	 * as well as meta-annotations for the annotation type, +	 * @since 5.0, +	 * @see AnnotationClassFilter#AnnotationClassFilter(Class, boolean), +	 * @see AnnotationMethodMatcher#AnnotationMethodMatcher(Class, boolean), +	 */, +	public AnnotationMatchingPointcut(Class<? extends Annotation> classAnnotationType,, +			Class<? extends Annotation> methodAnnotationType, boolean checkInherited) {, +, +			this.classFilter = new AnnotationClassFilter(classAnnotationType, checkInherited);, +			this.methodMatcher = new AnnotationMethodMatcher(methodAnnotationType, checkInherited);, +++ b/spring-aop/src/main/java/org/springframework/aop/support/annotation/AnnotationMethodMatcher.java, + * Copyright 2002-2017 the original author or authors.]