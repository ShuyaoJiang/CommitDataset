[+++ b/spring-framework-reference/src/beans.xml, +        <programlisting language="xml">&lt;bean id="myValueCalculator" class="x.y.z.MyValueCalculator"&gt;, +++ b/spring-framework-reference/src/beans.xml, +        <programlisting language="xml">&lt;bean id="myValueCalculator" class="x.y.z.MyValueCalculator"&gt;, +++ b/spring-framework-reference/src/classic-aop-spring.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<!DOCTYPE appendix PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN", +"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">, +<appendix id="classic-aop-spring">, +  <title>Classic Spring AOP Usage</title>, +  <section id="aop-classic-introduction">, +  <para>In this chapter we discuss , +	the lower-level Spring AOP APIs and the AOP support used in Spring 1.2 applications., +	For new applications, we recommend the use of the Spring 2.0 AOP support , +	described in the <link linkend="aop">AOP</link> chapter, but when working with existing applications,, +	or when reading books and articles, you may come across Spring 1.2 style examples., +	Spring 2.0 is fully backwards compatible with Spring 1.2 and everything described, +	in this chapter is fully supported in Spring 2.0., +	</para>, +, +  </section>, +, +  <section id="aop-api-pointcuts">, +    <title>Pointcut API in Spring</title>, +, +    <para>Let's look at how Spring handles the crucial pointcut concept.</para>, +, +    <section id="aop-api-concepts">, +      <title>Concepts</title>, +, +      <para>Spring's pointcut model enables pointcut reuse independent of, +      advice types. It's possible to target different advice using the same, +      pointcut.</para>, +, +      <para>The <literal>org.springframework.aop.Pointcut</literal> interface, +      is the central interface, used to target advices to particular classes, +      and methods. The complete interface is shown below:</para>, +, +      <programlisting language="java"><![CDATA[public interface Pointcut {, +, +    ClassFilter getClassFilter();, +, +    MethodMatcher getMethodMatcher();, +, +}]]></programlisting>, +, +      <para>Splitting the <interfacename>Pointcut</interfacename> interface into two parts, +      allows reuse of class and method matching parts, and fine-grained, +      composition operations (such as performing a "union" with another method, +      matcher).</para>, +, +      <para>The <interfacename>ClassFilter</interfacename> interface is used to restrict, +      the pointcut to a given set of target classes. If the, +      <literal>matches()</literal> method always returns true, all target, +      classes will be matched:</para>, +, +      <programlisting language="java"><![CDATA[public interface ClassFilter {, +, +    boolean matches(Class clazz);, +}]]></programlisting>, +, +      <para>The <interfacename>MethodMatcher</interfacename> interface is normally more, +      important. The complete interface is shown below:</para>, +, +      <programlisting language="java"><![CDATA[public interface MethodMatcher {, +, +    boolean matches(Method m, Class targetClass);, +, +    boolean isRuntime();, +, +    boolean matches(Method m, Class targetClass, Object[] args);, +}]]></programlisting>, +, +      <para>The <literal>matches(Method, Class) </literal>method is used to, +      test whether this pointcut will ever match a given method on a target, +      class. This evaluation can be performed when an AOP proxy is created, to, +      avoid the need for a test on every method invocation. If the 2-argument, +      matches method returns true for a given method, and the, +      <literal>isRuntime()</literal> method for the MethodMatcher returns, +      true, the 3-argument matches method will be invoked on every method, +      invocation. This enables a pointcut to look at the arguments passed to, +      the method invocation immediately before the target advice is to, +      execute.</para>, +, +      <para>Most MethodMatchers are static, meaning that their, +      <literal>isRuntime()</literal> method returns false. In this case, the, +      3-argument matches method will never be invoked.</para>, +, +			<tip>, +				<para>If possible, try to make pointcuts static, allowing the AOP, +				framework to cache the results of pointcut evaluation when an AOP proxy, +				is created.</para>, +			</tip>				, +    </section>, +, +    <section id="aop-api-pointcut-ops">, +      <title>Operations on pointcuts</title>, +, +      <para>Spring supports operations on pointcuts: notably,, +      <emphasis>union</emphasis> and <emphasis>intersection</emphasis>.</para>]