[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/PropertyOrFieldReference.java, +		TypedValue tv = getValueInternal(state.getActiveContextObject(), state.getEvaluationContext(),, +				state.getConfiguration().isAutoGrowNullReferences());, +	public void setValue(ExpressionState state, Object newValue) throws EvaluationException {, +	public boolean isWritable(ExpressionState state) throws EvaluationException {, +	 * @throws EvaluationException if any problem accessing the property or it cannot be found, +	private TypedValue readProperty(TypedValue contextObject, EvaluationContext eContext, String name), +			throws EvaluationException {, +, +		List<PropertyAccessor> accessorsToTry =, +				getPropertyAccessorsToTry(contextObject.getValue(), eContext.getPropertyAccessors());, +	private void writeProperty(TypedValue contextObject, EvaluationContext eContext, String name, Object newValue), +			throws EvaluationException {, +, +		List<PropertyAccessor> accessorsToTry =, +				getPropertyAccessorsToTry(contextObject.getValue(), eContext.getPropertyAccessors());, +	public boolean isWritableProperty(String name, TypedValue contextObject, EvaluationContext eContext), +			throws EvaluationException {, +, +		List<PropertyAccessor> accessorsToTry =, +				getPropertyAccessorsToTry(contextObject.getValue(), eContext.getPropertyAccessors());, +			if (this.ref.cachedReadAccessor instanceof CompilablePropertyAccessor) {]