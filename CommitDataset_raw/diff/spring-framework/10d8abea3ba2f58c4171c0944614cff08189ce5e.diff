[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/BeansDtdResolver.java, + * Copyright 2002-2009 the original author or authors., +import java.util.Arrays;, +			for (String DTD_NAME : DTD_NAMES) {, +				int dtdNameStart = systemId.indexOf(DTD_NAME);, +, +	@Override, +	public String toString() {, +		return "EntityResolver for DTDs " + Arrays.toString(DTD_NAMES);, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/BeansDtdResolver.java, + * Copyright 2002-2009 the original author or authors., +import java.util.Arrays;, +			for (String DTD_NAME : DTD_NAMES) {, +				int dtdNameStart = systemId.indexOf(DTD_NAME);, +, +	@Override, +	public String toString() {, +		return "EntityResolver for DTDs " + Arrays.toString(DTD_NAMES);, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/DefaultNamespaceHandlerResolver.java, + * Copyright 2002-2009 the original author or authors., +import java.util.concurrent.ConcurrentHashMap;, +	private volatile Map<String, Object> handlerMappings;, +		Map<String, Object> handlerMappings = getHandlerMappings();, +				Class<?> handlerClass = ClassUtils.forName(className, this.classLoader);, +	private Map<String, Object> getHandlerMappings() {, +		if (this.handlerMappings == null) {, +			synchronized (this) {, +							logger.debug("Loaded NamespaceHandler mappings: " + mappings);, +						Map<String, Object> handlerMappings = new ConcurrentHashMap<String, Object>();, +						CollectionUtils.mergePropertiesIntoMap(mappings, handlerMappings);, +						this.handlerMappings = handlerMappings;, +			}, +		}, +, +	@Override, +	public String toString() {, +		return "NamespaceHandlerResolver using mappings " + getHandlerMappings();, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/BeansDtdResolver.java, + * Copyright 2002-2009 the original author or authors., +import java.util.Arrays;, +			for (String DTD_NAME : DTD_NAMES) {, +				int dtdNameStart = systemId.indexOf(DTD_NAME);, +, +	@Override, +	public String toString() {, +		return "EntityResolver for DTDs " + Arrays.toString(DTD_NAMES);, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/DefaultNamespaceHandlerResolver.java, + * Copyright 2002-2009 the original author or authors., +import java.util.concurrent.ConcurrentHashMap;, +	private volatile Map<String, Object> handlerMappings;, +		Map<String, Object> handlerMappings = getHandlerMappings();, +				Class<?> handlerClass = ClassUtils.forName(className, this.classLoader);, +	private Map<String, Object> getHandlerMappings() {, +		if (this.handlerMappings == null) {, +			synchronized (this) {, +							logger.debug("Loaded NamespaceHandler mappings: " + mappings);, +						Map<String, Object> handlerMappings = new ConcurrentHashMap<String, Object>();, +						CollectionUtils.mergePropertiesIntoMap(mappings, handlerMappings);, +						this.handlerMappings = handlerMappings;, +			}, +		}, +, +	@Override, +	public String toString() {, +		return "NamespaceHandlerResolver using mappings " + getHandlerMappings();, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/DelegatingEntityResolver.java, + * Copyright 2002-2009 the original author or authors., +, +	@Override, +	public String toString() {, +		return "EntityResolver delegating " + XSD_SUFFIX + " to " + this.schemaResolver +, +				" and " + DTD_SUFFIX +  " to " + this.dtdResolver;, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/BeansDtdResolver.java, + * Copyright 2002-2009 the original author or authors., +import java.util.Arrays;, +			for (String DTD_NAME : DTD_NAMES) {, +				int dtdNameStart = systemId.indexOf(DTD_NAME);, +, +	@Override, +	public String toString() {, +		return "EntityResolver for DTDs " + Arrays.toString(DTD_NAMES);, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/DefaultNamespaceHandlerResolver.java, + * Copyright 2002-2009 the original author or authors., +import java.util.concurrent.ConcurrentHashMap;, +	private volatile Map<String, Object> handlerMappings;, +		Map<String, Object> handlerMappings = getHandlerMappings();]