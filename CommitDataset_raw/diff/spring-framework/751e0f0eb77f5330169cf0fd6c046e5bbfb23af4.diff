[+++ b/org.springframework.test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java, +import org.junit.Ignore;, +import org.junit.Test;, +import org.junit.internal.AssumptionViolatedException;, +import org.junit.internal.runners.model.EachTestNotifier;, +import org.junit.internal.runners.model.ReflectiveCallable;, +import org.junit.internal.runners.statements.ExpectException;, +import org.junit.internal.runners.statements.Fail;, +import org.junit.internal.runners.statements.FailOnTimeout;, +import org.junit.runners.BlockJUnit4ClassRunner;, +import org.junit.runners.model.FrameworkMethod;, +import org.junit.runners.model.InitializationError;, +import org.junit.runners.model.Statement;, +import org.springframework.test.annotation.ExpectedException;, +import org.springframework.test.annotation.Repeat;, +import org.springframework.test.annotation.Timed;, +import org.springframework.test.context.junit4.statements.RunSpringTestContextAfters;, +import org.springframework.test.context.junit4.statements.RunSpringTestContextBefores;, +import org.springframework.test.context.junit4.statements.SpringFailOnTimeout;, +import org.springframework.test.context.junit4.statements.SpringRepeat;, + * <code>SpringJUnit4ClassRunner</code> is a custom extension of, + * {@link BlockJUnit4ClassRunner} which provides functionality of the, + * <em>Spring TestContext Framework</em> to standard JUnit 4.5+ tests by means, + * of the {@link TestContextManager} and associated support classes and, + * annotations., + * by <code>SpringJUnit4ClassRunner</code>., + * <em>(Note that additional annotations may be supported by various, + * <li>{@link Test#expected() &#064;Test(expected=...)}</li>, + * <li>{@link ExpectedException &#064;ExpectedException}</li>, + * <li>{@link Test#timeout() &#064;Test(timeout=...)}</li>, + * <li>{@link Timed &#064;Timed}</li>, + * <li>{@link Repeat &#064;Repeat}</li>, + * <li>{@link Ignore &#064;Ignore}</li>, + * <b>NOTE:</b> As of Spring 3.0, <code>SpringJUnit4ClassRunner</code> requires, + * JUnit 4.5., +public class SpringJUnit4ClassRunner extends BlockJUnit4ClassRunner {, +	 * Delegates to the parent implementation for creating the test instance and, +	 * then allows the {@link #getTestContextManager() TestContextManager} to, +	 * prepare the test instance before returning it., +	 * @see TestContextManager#prepareTestInstance(Object), +	protected Object createTest() throws Exception {, +		Object testInstance = super.createTest();, +		getTestContextManager().prepareTestInstance(testInstance);, +		return testInstance;, +	/**, +	 * Returns a description suitable for an ignored test class if the test is, +	 * disabled via <code>&#064;IfProfileValue</code> at the class-level, and, +	 * otherwise delegates to the parent implementation., +	 * , +	 * @see ProfileValueUtils#isTestEnabledInThisEnvironment(Class), +	 */, +	@Override, +	public Description getDescription() {, +		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {, +			return Description.createSuiteDescription(getTestClass().getJavaClass());, +		}, +		return super.getDescription();, +	}, +	/**, +	 * Check whether the test is enabled in the first place. This prevents, +	 * classes with a non-matching <code>&#064;IfProfileValue</code> annotation, +	 * from running altogether, even skipping the execution of, +	 * <code>prepareTestInstance()</code> <code>TestExecutionListener</code>, +	 * methods., +	 * , +	 * @see ProfileValueUtils#isTestEnabledInThisEnvironment(Class), +	 * @see org.springframework.test.annotation.IfProfileValue, +	 * @see org.springframework.test.context.TestExecutionListener, +	 */, +	@Override, +	public void run(RunNotifier notifier) {, +		if (!ProfileValueUtils.isTestEnabledInThisEnvironment(getTestClass().getJavaClass())) {, +			notifier.fireTestIgnored(getDescription());, +			return;, +		}, +		super.run(notifier);, +	}, +, +	/**, +	 * Performs the same logic as, +	 * {@link BlockJUnit4ClassRunner#runChild(FrameworkMethod, RunNotifier)},, +	 * except that tests are determined to be <em>ignored</em> by, +	 * {@link #isTestMethodIgnored(FrameworkMethod)}., +	 */, +	@Override, +	protected void runChild(FrameworkMethod frameworkMethod, RunNotifier notifier) {, +		EachTestNotifier eachNotifier = makeNotifier(frameworkMethod, notifier);, +		if (isTestMethodIgnored(frameworkMethod)) {, +			eachNotifier.fireTestIgnored();, +			return;, +		}, +, +		eachNotifier.fireTestStarted();, +		try {, +			methodBlock(frameworkMethod).evaluate();, +		}, +		catch (AssumptionViolatedException e) {, +			eachNotifier.addFailedAssumption(e);, +		}, +		catch (Throwable e) {]