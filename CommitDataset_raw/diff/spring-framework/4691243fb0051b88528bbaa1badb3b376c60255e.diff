[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, + * Copyright 2002-2012 the original author or authors., +	UNEXPECTED_ESCAPE_CHAR(Kind.ERROR,1065,"unexpected escape character.");, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, + * Copyright 2002-2012 the original author or authors., +	UNEXPECTED_ESCAPE_CHAR(Kind.ERROR,1065,"unexpected escape character.");, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/StringLiteral.java, + * Copyright 2002-2012 the original author or authors., +		this.value = new TypedValue(value.replaceAll("''", "'").replaceAll("\"\"", "\""));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, + * Copyright 2002-2012 the original author or authors., +	UNEXPECTED_ESCAPE_CHAR(Kind.ERROR,1065,"unexpected escape character.");, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/StringLiteral.java, + * Copyright 2002-2012 the original author or authors., +		this.value = new TypedValue(value.replaceAll("''", "'").replaceAll("\"\"", "\""));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java, +		while (peekIdentifierToken("or") || peekToken(TokenKind.SYMBOLIC_OR)) {, +		while (peekIdentifierToken("and") || peekToken(TokenKind.SYMBOLIC_AND)) {, +			if (!nullToken.stringValue().equalsIgnoreCase("null")) {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, + * Copyright 2002-2012 the original author or authors., +	UNEXPECTED_ESCAPE_CHAR(Kind.ERROR,1065,"unexpected escape character.");, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/StringLiteral.java, + * Copyright 2002-2012 the original author or authors., +		this.value = new TypedValue(value.replaceAll("''", "'").replaceAll("\"\"", "\""));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java, +		while (peekIdentifierToken("or") || peekToken(TokenKind.SYMBOLIC_OR)) {, +		while (peekIdentifierToken("and") || peekToken(TokenKind.SYMBOLIC_AND)) {, +			if (!nullToken.stringValue().equalsIgnoreCase("null")) {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/TokenKind.java, + * Copyright 2002-2012 the original author or authors., +	ELVIS("?:"), SAFE_NAVI("?."), BEAN_REF("@"), SYMBOLIC_OR("||"), SYMBOLIC_AND("&&"), +++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, + * Copyright 2002-2012 the original author or authors., +	UNEXPECTED_ESCAPE_CHAR(Kind.ERROR,1065,"unexpected escape character.");, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/StringLiteral.java, + * Copyright 2002-2012 the original author or authors., +		this.value = new TypedValue(value.replaceAll("''", "'").replaceAll("\"\"", "\""));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java, +		while (peekIdentifierToken("or") || peekToken(TokenKind.SYMBOLIC_OR)) {, +		while (peekIdentifierToken("and") || peekToken(TokenKind.SYMBOLIC_AND)) {, +			if (!nullToken.stringValue().equalsIgnoreCase("null")) {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/TokenKind.java, + * Copyright 2002-2012 the original author or authors., +	ELVIS("?:"), SAFE_NAVI("?."), BEAN_REF("@"), SYMBOLIC_OR("||"), SYMBOLIC_AND("&&"), +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java, +				case '&':, +					if (isTwoCharToken(TokenKind.SYMBOLIC_AND)) {, +						pushPairToken(TokenKind.SYMBOLIC_AND);, +					}, +					break;, +				case '|':, +					if (isTwoCharToken(TokenKind.SYMBOLIC_OR)) {, +						pushPairToken(TokenKind.SYMBOLIC_OR);, +					}, +					break;					, +				case '\\':, +					throw new InternalParseException(new SpelParseException(expressionString,pos,SpelMessage.UNEXPECTED_ESCAPE_CHAR));, +				// may not be the end if the char after is also a ", +				if (toProcess[pos+1]=='"') {, +					pos++; // skip over that too, and continue, +				} else {, +			}, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, + * Copyright 2002-2012 the original author or authors., +	UNEXPECTED_ESCAPE_CHAR(Kind.ERROR,1065,"unexpected escape character.");, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/StringLiteral.java, + * Copyright 2002-2012 the original author or authors., +		this.value = new TypedValue(value.replaceAll("''", "'").replaceAll("\"\"", "\""));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java, +		while (peekIdentifierToken("or") || peekToken(TokenKind.SYMBOLIC_OR)) {, +		while (peekIdentifierToken("and") || peekToken(TokenKind.SYMBOLIC_AND)) {, +			if (!nullToken.stringValue().equalsIgnoreCase("null")) {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/TokenKind.java, + * Copyright 2002-2012 the original author or authors., +	ELVIS("?:"), SAFE_NAVI("?."), BEAN_REF("@"), SYMBOLIC_OR("||"), SYMBOLIC_AND("&&"), +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java, +				case '&':, +					if (isTwoCharToken(TokenKind.SYMBOLIC_AND)) {, +						pushPairToken(TokenKind.SYMBOLIC_AND);, +					}, +					break;, +				case '|':, +					if (isTwoCharToken(TokenKind.SYMBOLIC_OR)) {, +						pushPairToken(TokenKind.SYMBOLIC_OR);, +					}, +					break;					, +				case '\\':, +					throw new InternalParseException(new SpelParseException(expressionString,pos,SpelMessage.UNEXPECTED_ESCAPE_CHAR));, +				// may not be the end if the char after is also a ", +				if (toProcess[pos+1]=='"') {, +					pos++; // skip over that too, and continue, +				} else {, +			}, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/StandardEvaluationContext.java, + * Copyright 2002-2012 the original author or authors., + * @author Sam Brannen, +	 * Register a {@code MethodFilter} which will be called during method resolution, +	 * for the specified type., +	 *]