[+++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java, + * Utility methods for working with {@link ContextLoader ContextLoaders}, + * and resource locations., +	// TODO Consider refactoring ContextLoaderUtils into a stateful, +	// ContextLoaderResolver., +, +	private static final ClassNameLocationsResolver classNameLocationsResolver = new ClassNameLocationsResolver();, +	 * Resolves the {@link ContextLoader}, +	 * {@link Class} to use for the supplied {@link Class testClass} and, +	 * then instantiates and returns that <code>ContextLoader</code>., +	 * <p>If the supplied <code>defaultContextLoaderClassName</code> is, +	 * <code>null</code> or <em>empty</em>, the <em>standard</em>, +	 * default context loader class name ({@value #STANDARD_DEFAULT_CONTEXT_LOADER_CLASS_NAME}), +	 * will be used. For details on the class resolution process, see, +	 * {@link #resolveContextLoaderClass(Class, String)}., +	 * Resolve the {@link ContextLoader} {@link Class} to use for the supplied, +	/**, +	 * Strategy interface for resolving application context resource locations., +	 * <p>The semantics of the resolved locations are implementation-dependent., +	 */, +		/**, +		 * Resolves application context resource locations for the supplied, +		 * {@link ContextConfiguration} annotation and the class which declared it., +		 * @param contextConfiguration the <code>ContextConfiguration</code>, +		 * for which to resolve resource locations, +		 * @param declaringClass the class that declared <code>ContextConfiguration</code>, +		 * @return an array of application context resource locations, +		 * (can be <code>null</code> or empty), +		 */, +	/**, +	 * <code>LocationsResolver</code> that resolves locations as Strings,, +	 * which are assumed to be path-based resources., +	 */, +		/**, +		 * Resolves path-based resources from the {@link ContextConfiguration#locations() locations}, +		 * and {@link ContextConfiguration#value() value} attributes of the supplied, +		 * {@link ContextConfiguration} annotation., +		 * <p>Ignores the {@link ContextConfiguration#classes() classes} attribute. , +		 * @throws IllegalStateException if both the locations and value, +		 * attributes have been declared, +		 */, +	/**, +	 * <code>LocationsResolver</code> that converts classes to fully qualified class names., +	 */, +		/**, +		 * Resolves class names from the {@link ContextConfiguration#classes() classes}, +		 * attribute of the supplied {@link ContextConfiguration} annotation., +		 * <p>Ignores the {@link ContextConfiguration#locations() locations}, +		 * and {@link ContextConfiguration#value() value} attributes., +		 */, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java, + * Utility methods for working with {@link ContextLoader ContextLoaders}, + * and resource locations., +	// TODO Consider refactoring ContextLoaderUtils into a stateful, +	// ContextLoaderResolver., +, +	private static final ClassNameLocationsResolver classNameLocationsResolver = new ClassNameLocationsResolver();, +	 * Resolves the {@link ContextLoader}, +	 * {@link Class} to use for the supplied {@link Class testClass} and, +	 * then instantiates and returns that <code>ContextLoader</code>., +	 * <p>If the supplied <code>defaultContextLoaderClassName</code> is, +	 * <code>null</code> or <em>empty</em>, the <em>standard</em>, +	 * default context loader class name ({@value #STANDARD_DEFAULT_CONTEXT_LOADER_CLASS_NAME}), +	 * will be used. For details on the class resolution process, see, +	 * {@link #resolveContextLoaderClass(Class, String)}., +	 * Resolve the {@link ContextLoader} {@link Class} to use for the supplied, +	/**, +	 * Strategy interface for resolving application context resource locations., +	 * <p>The semantics of the resolved locations are implementation-dependent., +	 */, +		/**, +		 * Resolves application context resource locations for the supplied, +		 * {@link ContextConfiguration} annotation and the class which declared it., +		 * @param contextConfiguration the <code>ContextConfiguration</code>, +		 * for which to resolve resource locations, +		 * @param declaringClass the class that declared <code>ContextConfiguration</code>, +		 * @return an array of application context resource locations, +		 * (can be <code>null</code> or empty), +		 */, +	/**, +	 * <code>LocationsResolver</code> that resolves locations as Strings,, +	 * which are assumed to be path-based resources., +	 */, +		/**, +		 * Resolves path-based resources from the {@link ContextConfiguration#locations() locations}, +		 * and {@link ContextConfiguration#value() value} attributes of the supplied, +		 * {@link ContextConfiguration} annotation., +		 * <p>Ignores the {@link ContextConfiguration#classes() classes} attribute. , +		 * @throws IllegalStateException if both the locations and value, +		 * attributes have been declared, +		 */, +	/**, +	 * <code>LocationsResolver</code> that converts classes to fully qualified class names., +	 */, +		/**, +		 * Resolves class names from the {@link ContextConfiguration#classes() classes}, +		 * attribute of the supplied {@link ContextConfiguration} annotation., +		 * <p>Ignores the {@link ContextConfiguration#locations() locations}, +		 * and {@link ContextConfiguration#value() value} attributes., +		 */]