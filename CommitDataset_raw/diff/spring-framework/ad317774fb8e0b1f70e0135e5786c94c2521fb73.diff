[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +				List<String> argTypes = new ArrayList<String>(minNrOfArgs);, +				if (explicitArgs != null) {, +					for (Object arg : explicitArgs) {, +						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null");, +					}, +				}, +				else {, +					Set<ValueHolder> valueHolders = new LinkedHashSet<ValueHolder>(resolvedValues.getArgumentCount());, +					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values());, +					valueHolders.addAll(resolvedValues.getGenericArgumentValues());, +					for (ValueHolder value : valueHolders) {, +						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :, +								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"));, +				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes);, +						(minNrOfArgs > 0 ? "and arguments " : "") +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +				List<String> argTypes = new ArrayList<String>(minNrOfArgs);, +				if (explicitArgs != null) {, +					for (Object arg : explicitArgs) {, +						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null");, +					}, +				}, +				else {, +					Set<ValueHolder> valueHolders = new LinkedHashSet<ValueHolder>(resolvedValues.getArgumentCount());, +					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values());, +					valueHolders.addAll(resolvedValues.getGenericArgumentValues());, +					for (ValueHolder value : valueHolders) {, +						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :, +								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"));, +				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes);, +						(minNrOfArgs > 0 ? "and arguments " : "") +, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/xml/FactoryMethodTests.java, + * Copyright 2002-2014 the original author or authors., +import static org.junit.Assert.*;, +, +	public void testNonExistingFactoryMethod() {, +		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory();, +		XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(xbf);, +		reader.loadBeanDefinitions(new ClassPathResource("factory-methods.xml", getClass()));, +		try {, +			xbf.getBean("invalidPrototype");, +			fail("Should have thrown BeanCreationException");, +		}, +		catch (BeanCreationException ex) {, +			assertTrue(ex.getMessage().contains("nonExisting(TestBean)"));, +		}, +	}, +, +	@Test, +	public void testFactoryMethodArgumentsForNonExistingMethod() {, +		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory();, +		XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(xbf);, +		reader.loadBeanDefinitions(new ClassPathResource("factory-methods.xml", getClass()));, +		try {, +			xbf.getBean("invalidPrototype", new TestBean());, +			fail("Should have thrown BeanCreationException");, +		}, +		catch (BeanCreationException ex) {, +			assertTrue(ex.getMessage().contains("nonExisting(TestBean)"));, +		}, +	}, +, +	@Test, +, +, +		return this.props.get(key);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +				List<String> argTypes = new ArrayList<String>(minNrOfArgs);, +				if (explicitArgs != null) {, +					for (Object arg : explicitArgs) {, +						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null");, +					}, +				}, +				else {, +					Set<ValueHolder> valueHolders = new LinkedHashSet<ValueHolder>(resolvedValues.getArgumentCount());, +					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values());, +					valueHolders.addAll(resolvedValues.getGenericArgumentValues());, +					for (ValueHolder value : valueHolders) {, +						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :, +								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"));, +				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes);, +						(minNrOfArgs > 0 ? "and arguments " : "") +, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/xml/FactoryMethodTests.java, + * Copyright 2002-2014 the original author or authors., +import static org.junit.Assert.*;, +, +	public void testNonExistingFactoryMethod() {, +		DefaultListableBeanFactory xbf = new DefaultListableBeanFactory();, +		XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(xbf);, +		reader.loadBeanDefinitions(new ClassPathResource("factory-methods.xml", getClass()));, +		try {, +			xbf.getBean("invalidPrototype");, +			fail("Should have thrown BeanCreationException");, +		}, +		catch (BeanCreationException ex) {, +			assertTrue(ex.getMessage().contains("nonExisting(TestBean)"));, +		}, +	}, +]