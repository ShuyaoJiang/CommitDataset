[+++ b/spring-context/src/main/java/org/springframework/context/annotation/Profile.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.env.Profiles;, + * will be bypassed unless one or more of the specified profiles are active. A profile, + * string may contains a simple profile name (for example {@code "p1"}) or a profile, + * expression. A profile expression allows for more complicated profile logic to be, + * expressed, for example {@code "p1 & p2"}. See {@link Profiles#of(String...)} for more, + * details about supported formats., + *, + * <p>This is analogous to the behavior in Spring XML: if the {@code profile} attribute of, + * the {@code beans} element is supplied e.g., {@code <beans profile="p1,p2">}, the, +++ b/spring-context/src/main/java/org/springframework/context/annotation/Profile.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.env.Profiles;, + * will be bypassed unless one or more of the specified profiles are active. A profile, + * string may contains a simple profile name (for example {@code "p1"}) or a profile, + * expression. A profile expression allows for more complicated profile logic to be, + * expressed, for example {@code "p1 & p2"}. See {@link Profiles#of(String...)} for more, + * details about supported formats., + *, + * <p>This is analogous to the behavior in Spring XML: if the {@code profile} attribute of, + * the {@code beans} element is supplied e.g., {@code <beans profile="p1,p2">}, the, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ProfileCondition.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.env.Profiles;, +				if (context.getEnvironment().acceptsProfiles(Profiles.of((String[]) value))) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/Profile.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.env.Profiles;, + * will be bypassed unless one or more of the specified profiles are active. A profile, + * string may contains a simple profile name (for example {@code "p1"}) or a profile, + * expression. A profile expression allows for more complicated profile logic to be, + * expressed, for example {@code "p1 & p2"}. See {@link Profiles#of(String...)} for more, + * details about supported formats., + *, + * <p>This is analogous to the behavior in Spring XML: if the {@code profile} attribute of, + * the {@code beans} element is supplied e.g., {@code <beans profile="p1,p2">}, the, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ProfileCondition.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.env.Profiles;, +				if (context.getEnvironment().acceptsProfiles(Profiles.of((String[]) value))) {, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanAnnotationIntegrationTests.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.env.Profiles;, +		assertTrue(ctx.getEnvironment().acceptsProfiles(Profiles.of("the-filter-ran")));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/Profile.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.env.Profiles;, + * will be bypassed unless one or more of the specified profiles are active. A profile, + * string may contains a simple profile name (for example {@code "p1"}) or a profile, + * expression. A profile expression allows for more complicated profile logic to be, + * expressed, for example {@code "p1 & p2"}. See {@link Profiles#of(String...)} for more, + * details about supported formats., + *, + * <p>This is analogous to the behavior in Spring XML: if the {@code profile} attribute of, + * the {@code beans} element is supplied e.g., {@code <beans profile="p1,p2">}, the, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ProfileCondition.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.env.Profiles;, +				if (context.getEnvironment().acceptsProfiles(Profiles.of((String[]) value))) {, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanAnnotationIntegrationTests.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.env.Profiles;, +		assertTrue(ctx.getEnvironment().acceptsProfiles(Profiles.of("the-filter-ran")));, +++ b/spring-core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, +	@Deprecated, +	public boolean acceptsProfiles(String... profiles) {, +		Assert.notEmpty(profiles, "Must specify at least one profile");, +		for (String profile : profiles) {, +			if (StringUtils.hasLength(profile) && profile.charAt(0) == '!') {, +				if (!isProfileActive(profile.substring(1))) {, +					return true;, +				}, +			}, +			else if (isProfileActive(profile)) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +	@Override, +++ b/spring-context/src/main/java/org/springframework/context/annotation/Profile.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.env.Profiles;, + * will be bypassed unless one or more of the specified profiles are active. A profile, + * string may contains a simple profile name (for example {@code "p1"}) or a profile, + * expression. A profile expression allows for more complicated profile logic to be, + * expressed, for example {@code "p1 & p2"}. See {@link Profiles#of(String...)} for more, + * details about supported formats., + *, + * <p>This is analogous to the behavior in Spring XML: if the {@code profile} attribute of, + * the {@code beans} element is supplied e.g., {@code <beans profile="p1,p2">}, the, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ProfileCondition.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.env.Profiles;, +				if (context.getEnvironment().acceptsProfiles(Profiles.of((String[]) value))) {, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanAnnotationIntegrationTests.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.env.Profiles;]