[+++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/SpringExtensionTestCase.java, + * Copyright 2002-2018 the original author or authors., +		assertEquals(Integer.valueOf(42), this.enigma, "enigma");, +		assertEquals(Integer.valueOf(42), enigmaParam, "enigma");, +++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/SpringExtensionTestCase.java, + * Copyright 2002-2018 the original author or authors., +		assertEquals(Integer.valueOf(42), this.enigma, "enigma");, +		assertEquals(Integer.valueOf(42), enigmaParam, "enigma");, +++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/SpringJUnitJupiterAutowiredConstructorInjectionTestCase.java, + * Copyright 2002-2018 the original author or authors., +		assertEquals(Integer.valueOf(42), this.enigma, "enigma");, +++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/SpringExtensionTestCase.java, + * Copyright 2002-2018 the original author or authors., +		assertEquals(Integer.valueOf(42), this.enigma, "enigma");, +		assertEquals(Integer.valueOf(42), enigmaParam, "enigma");, +++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/SpringJUnitJupiterAutowiredConstructorInjectionTestCase.java, + * Copyright 2002-2018 the original author or authors., +		assertEquals(Integer.valueOf(42), this.enigma, "enigma");, +++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/SpringJUnitJupiterConstructorInjectionTestCase.java, + * Copyright 2002-2018 the original author or authors., +		assertEquals(Integer.valueOf(42), this.enigma, "enigma");, +++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/SpringExtensionTestCase.java, + * Copyright 2002-2018 the original author or authors., +		assertEquals(Integer.valueOf(42), this.enigma, "enigma");, +		assertEquals(Integer.valueOf(42), enigmaParam, "enigma");, +++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/SpringJUnitJupiterAutowiredConstructorInjectionTestCase.java, + * Copyright 2002-2018 the original author or authors., +		assertEquals(Integer.valueOf(42), this.enigma, "enigma");, +++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/SpringJUnitJupiterConstructorInjectionTestCase.java, + * Copyright 2002-2018 the original author or authors., +		assertEquals(Integer.valueOf(42), this.enigma, "enigma");, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/orm/HibernateSessionFlushingTests.java, + * Copyright 2002-2018 the original author or authors., +		assertEquals("Verifying Sam's driver's license number", Long.valueOf(1234), driversLicense.getNumber());, +++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/SpringExtensionTestCase.java, + * Copyright 2002-2018 the original author or authors., +		assertEquals(Integer.valueOf(42), this.enigma, "enigma");, +		assertEquals(Integer.valueOf(42), enigmaParam, "enigma");, +++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/SpringJUnitJupiterAutowiredConstructorInjectionTestCase.java, + * Copyright 2002-2018 the original author or authors., +		assertEquals(Integer.valueOf(42), this.enigma, "enigma");, +++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/SpringJUnitJupiterConstructorInjectionTestCase.java, + * Copyright 2002-2018 the original author or authors., +		assertEquals(Integer.valueOf(42), this.enigma, "enigma");, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/orm/HibernateSessionFlushingTests.java, + * Copyright 2002-2018 the original author or authors., +		assertEquals("Verifying Sam's driver's license number", Long.valueOf(1234), driversLicense.getNumber());, +++ b/spring-test/src/test/java/org/springframework/test/context/transaction/TransactionalTestExecutionListenerTests.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.beans.BeanUtils;, +		Invocable instance = BeanUtils.instantiateClass(clazz);, +		Invocable instance = BeanUtils.instantiateClass(clazz);, +		Invocable instance = BeanUtils.instantiateClass(clazz);, +		Invocable instance = BeanUtils.instantiateClass(clazz);, +		Invocable instance = BeanUtils.instantiateClass(clazz);, +++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/SpringExtensionTestCase.java, + * Copyright 2002-2018 the original author or authors., +		assertEquals(Integer.valueOf(42), this.enigma, "enigma");, +		assertEquals(Integer.valueOf(42), enigmaParam, "enigma");, +++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/SpringJUnitJupiterAutowiredConstructorInjectionTestCase.java, + * Copyright 2002-2018 the original author or authors., +		assertEquals(Integer.valueOf(42), this.enigma, "enigma");, +++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/SpringJUnitJupiterConstructorInjectionTestCase.java, + * Copyright 2002-2018 the original author or authors., +		assertEquals(Integer.valueOf(42), this.enigma, "enigma");, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/orm/HibernateSessionFlushingTests.java, + * Copyright 2002-2018 the original author or authors., +		assertEquals("Verifying Sam's driver's license number", Long.valueOf(1234), driversLicense.getNumber());, +++ b/spring-test/src/test/java/org/springframework/test/context/transaction/TransactionalTestExecutionListenerTests.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.beans.BeanUtils;, +		Invocable instance = BeanUtils.instantiateClass(clazz);, +		Invocable instance = BeanUtils.instantiateClass(clazz);, +		Invocable instance = BeanUtils.instantiateClass(clazz);, +		Invocable instance = BeanUtils.instantiateClass(clazz);, +		Invocable instance = BeanUtils.instantiateClass(clazz);, +++ b/spring-test/src/test/java/org/springframework/test/util/ReflectionTestUtilsTests.java, + * Copyright 2002-2018 the original author or authors., +	private static final Float PI = Float.valueOf((float) 22 / 7);, +		setField((Object) null, "id", Long.valueOf(99));, +		setField((Class<?>) null, "id", Long.valueOf(99));, +		setField(person, null, Long.valueOf(99), null);, +		setField(person, "bogus", Long.valueOf(99), long.class);, +		setField(person, "id", Long.valueOf(99), String.class);, +		setField(person, "id", Long.valueOf(99), long.class);, +		setField(person, "age", Integer.valueOf(42));, +		assertEquals(Long.valueOf(99), getField(person, "id"));, +		assertEquals(Integer.valueOf(42), getField(person, "age"));, +		invokeSetterMethod(person, "setId", Long.valueOf(1), long.class);, +		invokeSetterMethod(person, "setAge", Integer.valueOf(33), int.class);, +		invokeSetterMethod(person, "setFavoriteNumber", Integer.valueOf(42), Number.class);, +		assertEquals("'favorite number' (protected method for a Number)", Integer.valueOf(42), person.getFavoriteNumber());, +		assertEquals(Long.valueOf(1), invokeGetterMethod(person, "getId"));, +		assertEquals(Integer.valueOf(33), invokeGetterMethod(person, "getAge"));, +		assertEquals(Integer.valueOf(42), invokeGetterMethod(person, "getFavoriteNumber"));, +		invokeSetterMethod(person, "id", Long.valueOf(99), long.class);, +		invokeSetterMethod(person, "age", Integer.valueOf(42));, +		assertEquals(Long.valueOf(99), invokeGetterMethod(person, "id"));, +		assertEquals(Integer.valueOf(42), invokeGetterMethod(person, "age"));, +		invokeMethod(component, "configure", Integer.valueOf(42), "enigma");]