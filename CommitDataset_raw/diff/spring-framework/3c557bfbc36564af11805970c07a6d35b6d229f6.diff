[+++ b/spring-context/src/main/java/org/springframework/context/support/LiveBeansView.java, +import java.util.Iterator;, +	 * Actually generate a JSON snapshot of the beans in the given ApplicationContexts., +	 * <p>This implementation doesn't use any JSON parsing libraries in order to avoid, +	 * third-party library dependencies. It produces an array of context description, +	 * objects, each containing a context and parent attribute as well as a beans, +	 * attribute with nested bean description objects. Each bean object contains a, +	 * bean, scope, type and resource attribute, as well as a dependencies attribute, +	 * with a nested array of bean names that the present bean depends on., +		StringBuilder result = new StringBuilder("[\n");, +		for (Iterator<ConfigurableApplicationContext> it = contexts.iterator(); it.hasNext();) {, +			ConfigurableApplicationContext context = it.next();, +			result.append("{\n\"context\": \"").append(context.getId()).append("\",\n");, +				result.append("\"parent\": \"").append(context.getParent().getId()).append("\",\n");, +				result.append("\"parent\": null,\n");, +			result.append("\"beans\": [\n");, +			for (int i = 0; i < beanNames.length; i++) {, +				String beanName = beanNames[i];, +					result.append("{\n\"bean\": \"").append(beanName).append("\",\n");, +					result.append("\"scope\": \"").append(scope).append("\",\n");, +						result.append("\"type\": \"").append(beanType.getName()).append("\",\n");, +						result.append("\"type\": null,\n");, +					String resource = StringUtils.replace(bd.getResourceDescription(), "\\", "/");, +					result.append("\"resource\": \"").append(resource).append("\",\n");, +					result.append("]\n}");, +					if (i < beanNames.length - 1) {, +						result.append(",\n");, +			}, +			result.append("]\n");, +			if (it.hasNext()) {, +				result.append(",\n");, +		}, +		result.append("]");]