[+++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/AbstractMessageConverter.java, + * @author Juergen Hoeller, +		return fromMessage(message, targetClass, null);, +	}, +, +	/**, +	 * A variant of {@link #fromMessage(Message, Class)} which takes an extra, +	 * conversion context as an argument, allowing to take e.g. annotations, +	 * on a payload parameter into account., +	 * @param message the input message, +	 * @param targetClass the target class for the conversion, +	 * @param conversionHint an extra object passed to the {@link MessageConverter},, +	 * e.g. the associated {@code MethodParameter} (may be {@code null}}, +	 * @return the result of the conversion, or {@code null} if the converter cannot, +	 * perform the conversion, +	 * @since 4.2, +	 * @see #fromMessage(Message, Class), +	 */, +	public final Object fromMessage(Message<?> message, Class<?> targetClass, Object conversionHint) {, +		return convertFromInternal(message, targetClass, conversionHint);, +		return toMessage(payload, headers, null);, +	}, +, +	/**, +	 * A variant of {@link #toMessage(Object, MessageHeaders)} which takes an extra, +	 * conversion context as an argument, allowing to take e.g. annotations, +	 * on a return type into account., +	 * @param payload the Object to convert, +	 * @param headers optional headers for the message (may be {@code null}), +	 * @param conversionHint an extra object passed to the {@link MessageConverter},, +	 * e.g. the associated {@code MethodParameter} (may be {@code null}}, +	 * @return the new message, or {@code null} if the converter does not support the, +	 * Object type or the target media type, +	 * @since 4.2, +	 * @see #toMessage(Object, MessageHeaders), +	 */, +	public final Message<?> toMessage(Object payload, MessageHeaders headers, Object conversionHint) {, +		payload = convertToInternal(payload, headers, conversionHint);, +		if (payload == null) {, +			return null;, +		}, +		MimeType mimeType = getDefaultContentType(payload);, +	 * @param message the input message, +	 * @param targetClass the target class for the conversion, +	 * @param conversionHint an extra object passed to the {@link MessageConverter},, +	 * e.g. the associated {@code MethodParameter} (may be {@code null}}, +	 * @return the result of the conversion, or {@code null} if the converter cannot, +	 * perform the conversion, +	 * @since 4.2, +	@SuppressWarnings("deprecation"), +	protected Object convertFromInternal(Message<?> message, Class<?> targetClass, Object conversionHint) {, +		return convertFromInternal(message, targetClass);, +	}, +	 * @param payload the Object to convert, +	 * @param headers optional headers for the message (may be {@code null}), +	 * @param conversionHint an extra object passed to the {@link MessageConverter},, +	 * e.g. the associated {@code MethodParameter} (may be {@code null}}, +	 * @return the resulting payload for the message, or {@code null} if the converter, +	 * cannot perform the conversion, +	 * @since 4.2, +	@SuppressWarnings("deprecation"), +	protected Object convertToInternal(Object payload, MessageHeaders headers, Object conversionHint) {, +		return convertToInternal(payload, headers);, +	}, +, +	/**, +	 * Convert the message payload from serialized form to an Object., +	 * @deprecated as of Spring 4.2, in favor of {@link #convertFromInternal(Message, Class, Object)}, +	 * (which is also protected instead of public), +	 */, +	@Deprecated, +	public Object convertFromInternal(Message<?> message, Class<?> targetClass) {, +		return null;, +	}, +, +	/**, +	 * Convert the payload object to serialized form., +	 * @deprecated as of Spring 4.2, in favor of {@link #convertFromInternal(Message, Class, Object)}, +	 * (which is also protected instead of public), +	 */, +	@Deprecated, +	public Object convertToInternal(Object payload, MessageHeaders headers) {, +		return null;, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/AbstractMessageConverter.java, + * @author Juergen Hoeller, +		return fromMessage(message, targetClass, null);, +	}, +, +	/**, +	 * A variant of {@link #fromMessage(Message, Class)} which takes an extra, +	 * conversion context as an argument, allowing to take e.g. annotations, +	 * on a payload parameter into account., +	 * @param message the input message, +	 * @param targetClass the target class for the conversion, +	 * @param conversionHint an extra object passed to the {@link MessageConverter},, +	 * e.g. the associated {@code MethodParameter} (may be {@code null}}, +	 * @return the result of the conversion, or {@code null} if the converter cannot, +	 * perform the conversion, +	 * @since 4.2]