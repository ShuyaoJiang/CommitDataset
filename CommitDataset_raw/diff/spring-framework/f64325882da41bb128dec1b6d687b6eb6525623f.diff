[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.expression.TypeConverter;, +	public TypeConverter getTypeConverter() {, +		return this.relatedContext.getTypeConverter();, +	}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.expression.TypeConverter;, +	public TypeConverter getTypeConverter() {, +		return this.relatedContext.getTypeConverter();, +	}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, +	UNEXPECTED_ESCAPE_CHAR(Kind.ERROR,1065,"unexpected escape character."), //, +	OPERAND_NOT_INCREMENTABLE(Kind.ERROR,1066,"the expression component ''{0}'' does not support increment"), //, +	OPERAND_NOT_DECREMENTABLE(Kind.ERROR,1067,"the expression component ''{0}'' does not support decrement"), //, +	NOT_ASSIGNABLE(Kind.ERROR,1068,"the expression component ''{0}'' is not assignable"), //, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.expression.TypeConverter;, +	public TypeConverter getTypeConverter() {, +		return this.relatedContext.getTypeConverter();, +	}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, +	UNEXPECTED_ESCAPE_CHAR(Kind.ERROR,1065,"unexpected escape character."), //, +	OPERAND_NOT_INCREMENTABLE(Kind.ERROR,1066,"the expression component ''{0}'' does not support increment"), //, +	OPERAND_NOT_DECREMENTABLE(Kind.ERROR,1067,"the expression component ''{0}'' does not support decrement"), //, +	NOT_ASSIGNABLE(Kind.ERROR,1068,"the expression component ''{0}'' is not assignable"), //, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/AstUtils.java, + * Copyright 2010-2012 the original author or authors., +	public static List<PropertyAccessor> getPropertyAccessorsToTry(Class<?> targetType, List<PropertyAccessor> propertyAccessors) {, +		for (PropertyAccessor resolver : propertyAccessors) {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.expression.TypeConverter;, +	public TypeConverter getTypeConverter() {, +		return this.relatedContext.getTypeConverter();, +	}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, +	UNEXPECTED_ESCAPE_CHAR(Kind.ERROR,1065,"unexpected escape character."), //, +	OPERAND_NOT_INCREMENTABLE(Kind.ERROR,1066,"the expression component ''{0}'' does not support increment"), //, +	OPERAND_NOT_DECREMENTABLE(Kind.ERROR,1067,"the expression component ''{0}'' does not support decrement"), //, +	NOT_ASSIGNABLE(Kind.ERROR,1068,"the expression component ''{0}'' is not assignable"), //, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/AstUtils.java, + * Copyright 2010-2012 the original author or authors., +	public static List<PropertyAccessor> getPropertyAccessorsToTry(Class<?> targetType, List<PropertyAccessor> propertyAccessors) {, +		for (PropertyAccessor resolver : propertyAccessors) {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/CompoundExpression.java, + * Copyright 2002-2012 the original author or authors., +	protected ValueRef getValueRef(ExpressionState state) throws EvaluationException {, +		if (getChildCount()==1) {, +			return children[0].getValueRef(state);, +		}, +			int cc = getChildCount();, +			for (int i = 1; i < cc-1; i++) {, +			try {, +				state.pushActiveContextObject(result);, +				nextNode = children[cc-1];, +				return nextNode.getValueRef(state);, +			} finally {, +				state.popActiveContextObject();, +			}, +			// Correct the position for the error before re-throwing, +	}, +, +	/**, +	 * Evaluates a compound expression. This involves evaluating each piece in turn and the return value from each piece, +	 * is the active context object for the subsequent piece., +	 * @param state the state in which the expression is being evaluated, +	 * @return the final value from the last piece of the compound expression, +	 */, +	@Override, +	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {, +		return getValueRef(state).getValue();, +		getValueRef(state).setValue(value);, +		return getValueRef(state).isWritable();, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.expression.TypeConverter;, +	public TypeConverter getTypeConverter() {, +		return this.relatedContext.getTypeConverter();, +	}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, +	UNEXPECTED_ESCAPE_CHAR(Kind.ERROR,1065,"unexpected escape character."), //, +	OPERAND_NOT_INCREMENTABLE(Kind.ERROR,1066,"the expression component ''{0}'' does not support increment"), //, +	OPERAND_NOT_DECREMENTABLE(Kind.ERROR,1067,"the expression component ''{0}'' does not support decrement"), //, +	NOT_ASSIGNABLE(Kind.ERROR,1068,"the expression component ''{0}'' is not assignable"), //, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/AstUtils.java, + * Copyright 2010-2012 the original author or authors., +	public static List<PropertyAccessor> getPropertyAccessorsToTry(Class<?> targetType, List<PropertyAccessor> propertyAccessors) {, +		for (PropertyAccessor resolver : propertyAccessors) {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/CompoundExpression.java, + * Copyright 2002-2012 the original author or authors., +	protected ValueRef getValueRef(ExpressionState state) throws EvaluationException {, +		if (getChildCount()==1) {]