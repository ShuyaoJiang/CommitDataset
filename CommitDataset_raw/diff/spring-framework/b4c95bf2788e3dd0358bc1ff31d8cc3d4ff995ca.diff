[+++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +import java.lang.reflect.Method;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.ReflectionUtils;, +import static org.springframework.core.ReactiveTypeDescriptor.multiValue;, +import static org.springframework.core.ReactiveTypeDescriptor.noValue;, +import static org.springframework.core.ReactiveTypeDescriptor.singleOptionalValue;, +import static org.springframework.core.ReactiveTypeDescriptor.singleRequiredValue;, + * for Reactor, RxJava 1, RxJava 2 types, {@link CompletableFuture}, and Java 9+, + * Flow.Publisher., +, +		// Java 9+ Flow.Publisher, +		try {, +			new ReactorJdkFlowAdapterRegistrar().registerAdapter(this);, +		}, +		catch (NoSuchMethodException ex) {, +			throw new IllegalStateException("Failed to find JdkFlowAdapter methods", ex);, +		}, +		catch (Throwable ex) {, +			// Ignore, +			// We can fall back on "reactive-streams-flow-bridge" (once released), +		}, +	private static class ReactorJdkFlowAdapterRegistrar {, +, +		// TODO: remove reflection when build requires JDK 9+, +, +		void registerAdapter(ReactiveAdapterRegistry registry), +				throws NoSuchMethodException, ClassNotFoundException {, +, +			String name = "java.util.concurrent.Flow.Publisher";, +			Class<?> type = ClassUtils.forName(name, getClass().getClassLoader());, +, +			Method toFlowMethod = getMethod("publisherToFlowPublisher", Publisher.class);, +			Method toFluxMethod = getMethod("flowPublisherToFlux", type);, +, +			Object emptyFlow = ReflectionUtils.invokeMethod(toFlowMethod, null, Flux.empty());, +, +			registry.registerReactiveType(, +					multiValue(type, () -> emptyFlow),, +					source -> (Publisher<?>) ReflectionUtils.invokeMethod(toFluxMethod, null, source),, +					publisher -> ReflectionUtils.invokeMethod(toFlowMethod, null, publisher), +			);, +		}, +, +		private static Method getMethod(String name, Class<?> argumentType) throws NoSuchMethodException {, +			return reactor.adapter.JdkFlowAdapter.class.getMethod(name, argumentType);, +		}, +	}, +, +]