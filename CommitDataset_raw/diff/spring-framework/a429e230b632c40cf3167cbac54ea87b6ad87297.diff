[+++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/DispatcherPortlet.java, +	protected Object createDefaultStrategy(ApplicationContext context, Class<?> clazz) {, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/DispatcherPortlet.java, +	protected Object createDefaultStrategy(ApplicationContext context, Class<?> clazz) {, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/FrameworkPortlet.java, +	protected final void initPortletBean() throws PortletException {, +		catch (RuntimeException ex) {, +	protected ApplicationContext initPortletApplicationContext() {, +	protected ApplicationContext createPortletApplicationContext(ApplicationContext parent) {, +	protected void initFrameworkPortlet() throws PortletException {, +	public void refresh() {, +	protected void onRefresh(ApplicationContext context) {, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/DispatcherPortlet.java, +	protected Object createDefaultStrategy(ApplicationContext context, Class<?> clazz) {, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/FrameworkPortlet.java, +	protected final void initPortletBean() throws PortletException {, +		catch (RuntimeException ex) {, +	protected ApplicationContext initPortletApplicationContext() {, +	protected ApplicationContext createPortletApplicationContext(ApplicationContext parent) {, +	protected void initFrameworkPortlet() throws PortletException {, +	public void refresh() {, +	protected void onRefresh(ApplicationContext context) {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +	protected void onRefresh(ApplicationContext context) {, +	protected Object createDefaultStrategy(ApplicationContext context, Class<?> clazz) {, +			ModelAndView mv;, +		View view;, +	 * <p>The default implementations asks all ViewResolvers of this dispatcher., +	protected View resolveViewName(String viewName, Map<String, Object> model, Locale locale,, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/DispatcherPortlet.java, +	protected Object createDefaultStrategy(ApplicationContext context, Class<?> clazz) {, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/FrameworkPortlet.java, +	protected final void initPortletBean() throws PortletException {, +		catch (RuntimeException ex) {, +	protected ApplicationContext initPortletApplicationContext() {, +	protected ApplicationContext createPortletApplicationContext(ApplicationContext parent) {, +	protected void initFrameworkPortlet() throws PortletException {, +	public void refresh() {, +	protected void onRefresh(ApplicationContext context) {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +	protected void onRefresh(ApplicationContext context) {, +	protected Object createDefaultStrategy(ApplicationContext context, Class<?> clazz) {, +			ModelAndView mv;, +		View view;, +	 * <p>The default implementations asks all ViewResolvers of this dispatcher., +	protected View resolveViewName(String viewName, Map<String, Object> model, Locale locale,, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FrameworkServlet.java, +	protected final void initServletBean() throws ServletException {, +		catch (RuntimeException ex) {, +	protected WebApplicationContext initWebApplicationContext() {, +	protected WebApplicationContext createWebApplicationContext(WebApplicationContext parent) {, +		ServletContext sc = getServletContext();, +		if (sc.getMajorVersion() == 2 && sc.getMinorVersion() < 5) {, +			String servletContextName = sc.getServletContextName();, +				wac.setId(ConfigurableWebApplicationContext.APPLICATION_CONTEXT_ID_PREFIX + servletContextName +, +						"." + getServletName());, +		else {, +			// Servlet 2.5's getContextPath available!, +			wac.setId(ConfigurableWebApplicationContext.APPLICATION_CONTEXT_ID_PREFIX + sc.getContextPath() +, +					"/" + getServletName());, +		}, +	protected void initFrameworkServlet() throws ServletException {, +	public void refresh() {, +	protected void onRefresh(ApplicationContext context) {, +	protected void doOptions(HttpServletRequest request, HttpServletResponse response), +			throws ServletException, IOException {, +, +	protected void doTrace(HttpServletRequest request, HttpServletResponse response), +			throws ServletException, IOException {, +, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/DispatcherPortlet.java, +	protected Object createDefaultStrategy(ApplicationContext context, Class<?> clazz) {, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/FrameworkPortlet.java, +	protected final void initPortletBean() throws PortletException {, +		catch (RuntimeException ex) {, +	protected ApplicationContext initPortletApplicationContext() {, +	protected ApplicationContext createPortletApplicationContext(ApplicationContext parent) {, +	protected void initFrameworkPortlet() throws PortletException {, +	public void refresh() {, +	protected void onRefresh(ApplicationContext context) {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +	protected void onRefresh(ApplicationContext context) {, +	protected Object createDefaultStrategy(ApplicationContext context, Class<?> clazz) {, +			ModelAndView mv;, +		View view;, +	 * <p>The default implementations asks all ViewResolvers of this dispatcher., +	protected View resolveViewName(String viewName, Map<String, Object> model, Locale locale,, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FrameworkServlet.java, +	protected final void initServletBean() throws ServletException {, +		catch (RuntimeException ex) {, +	protected WebApplicationContext initWebApplicationContext() {, +	protected WebApplicationContext createWebApplicationContext(WebApplicationContext parent) {, +		ServletContext sc = getServletContext();, +		if (sc.getMajorVersion() == 2 && sc.getMinorVersion() < 5) {, +			String servletContextName = sc.getServletContextName();, +				wac.setId(ConfigurableWebApplicationContext.APPLICATION_CONTEXT_ID_PREFIX + servletContextName +, +						"." + getServletName());, +		else {, +			// Servlet 2.5's getContextPath available!, +			wac.setId(ConfigurableWebApplicationContext.APPLICATION_CONTEXT_ID_PREFIX + sc.getContextPath() +]