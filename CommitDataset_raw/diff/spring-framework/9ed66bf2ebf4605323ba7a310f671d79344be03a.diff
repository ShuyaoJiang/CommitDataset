[+++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/GenericInterfaceDrivenDependencyInjectionAspect.aj, + * Copyright 2002-2017 the original author or authors., +, + * <p>This aspect allows users to implement efficient, type-safe dependency injection, + * without the use of the {@code @Configurable} annotation., + *, + * <p>The subaspect of this aspect doesn't need to include any AOP constructs. For, + * example, here is a subaspect that configures the {@code PricingStrategyClient} objects., + *, + * }</pre>, + *, + * @since 3.0, +, +	@SuppressWarnings("unchecked"), +, +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/GenericInterfaceDrivenDependencyInjectionAspect.aj, + * Copyright 2002-2017 the original author or authors., +, + * <p>This aspect allows users to implement efficient, type-safe dependency injection, + * without the use of the {@code @Configurable} annotation., + *, + * <p>The subaspect of this aspect doesn't need to include any AOP constructs. For, + * example, here is a subaspect that configures the {@code PricingStrategyClient} objects., + *, + * }</pre>, + *, + * @since 3.0, +, +	@SuppressWarnings("unchecked"), +, +++ b/spring-aspects/src/test/java/org/springframework/aop/aspectj/autoproxy/CodeStyleAspect.aj, +	@SuppressWarnings("unused"), +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/GenericInterfaceDrivenDependencyInjectionAspect.aj, + * Copyright 2002-2017 the original author or authors., +, + * <p>This aspect allows users to implement efficient, type-safe dependency injection, + * without the use of the {@code @Configurable} annotation., + *, + * <p>The subaspect of this aspect doesn't need to include any AOP constructs. For, + * example, here is a subaspect that configures the {@code PricingStrategyClient} objects., + *, + * }</pre>, + *, + * @since 3.0, +, +	@SuppressWarnings("unchecked"), +, +++ b/spring-aspects/src/test/java/org/springframework/aop/aspectj/autoproxy/CodeStyleAspect.aj, +	@SuppressWarnings("unused"), +++ b/spring-aspects/src/test/java/org/springframework/beans/factory/aspectj/XmlBeanConfigurerTests.java, + * Copyright 2002-2017 the original author or authors., +import static org.junit.Assert.*;, +, +	public void injection() {, +		try (ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(, +				"org/springframework/beans/factory/aspectj/beanConfigurerTests.xml")) {, +, +			assertEquals("Rod", myObject.getName());, +		}, +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/GenericInterfaceDrivenDependencyInjectionAspect.aj, + * Copyright 2002-2017 the original author or authors., +, + * <p>This aspect allows users to implement efficient, type-safe dependency injection, + * without the use of the {@code @Configurable} annotation., + *, + * <p>The subaspect of this aspect doesn't need to include any AOP constructs. For, + * example, here is a subaspect that configures the {@code PricingStrategyClient} objects., + *, + * }</pre>, + *, + * @since 3.0, +, +	@SuppressWarnings("unchecked"), +, +++ b/spring-aspects/src/test/java/org/springframework/aop/aspectj/autoproxy/CodeStyleAspect.aj, +	@SuppressWarnings("unused"), +++ b/spring-aspects/src/test/java/org/springframework/beans/factory/aspectj/XmlBeanConfigurerTests.java, + * Copyright 2002-2017 the original author or authors., +import static org.junit.Assert.*;, +, +	public void injection() {, +		try (ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(, +				"org/springframework/beans/factory/aspectj/beanConfigurerTests.xml")) {, +, +			assertEquals("Rod", myObject.getName());, +		}, +++ b/spring-aspects/src/test/java/org/springframework/context/annotation/aspectj/AnnotationBeanConfigurerTests.java, + * Copyright 2002-2017 the original author or authors., +import static org.junit.Assert.*;, +, +	public void injection() {, +		try (AnnotationConfigApplicationContext context = new  AnnotationConfigApplicationContext(Config.class)) {, +			assertEquals("Rod", myObject.getName());, +		}, +++ b/spring-aspects/src/main/java/org/springframework/beans/factory/aspectj/GenericInterfaceDrivenDependencyInjectionAspect.aj, + * Copyright 2002-2017 the original author or authors., +, + * <p>This aspect allows users to implement efficient, type-safe dependency injection, + * without the use of the {@code @Configurable} annotation., + *]