[+++ b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java, +		given(r3.resolveStringValue(isNull())).willThrow(new IllegalArgumentException());, +		verify(r3, never()).resolveStringValue(isNull());, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java, +		given(r3.resolveStringValue(isNull())).willThrow(new IllegalArgumentException());, +		verify(r3, never()).resolveStringValue(isNull());, +++ b/spring-context/src/test/java/org/springframework/context/event/ApplicationListenerMethodAdapterTests.java, +, +		Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleRaw", ApplicationEvent.class);, +		Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleRaw", ApplicationEvent.class);, +		Method method = ReflectionUtils.findMethod(, +				SampleEvents.class, "handleGenericString", GenericTestEvent.class);, +		Method method = ReflectionUtils.findMethod(, +				SampleEvents.class, "handleGenericString", GenericTestEvent.class);, +		Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleString", String.class);, +		Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleString", String.class);, +		Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleString", String.class);, +		Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleString", String.class);, +		Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleStringAnnotationValue");, +		Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleStringAnnotationClasses");, +		Method method = ReflectionUtils.findMethod(, +				SampleEvents.class, "handleStringAnnotationValueAndParameter", String.class);, +		Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleStringOrInteger");, +		Method method = ReflectionUtils.findMethod(, +				SampleEvents.class, "tooManyParameters", String.class, String.class);, +		Method method = ReflectionUtils.findMethod(SampleEvents.class, "noParameter");, +		Method method = ReflectionUtils.findMethod(, +				SampleEvents.class, "moreThanOneParameter", String.class, Integer.class);, +		Method method = ReflectionUtils.findMethod(, +				SampleEvents.class, "handleGenericString", GenericTestEvent.class);, +		Method method = ReflectionUtils.findMethod(, +				SampleEvents.class, "handleRaw", ApplicationEvent.class);, +		Method method = ReflectionUtils.findMethod(, +				SampleEvents.class, "handleGenericString", GenericTestEvent.class);, +		Method method = ReflectionUtils.findMethod(, +				SampleEvents.class, "handleGenericString", GenericTestEvent.class);, +		Method method = ReflectionUtils.findMethod(, +				SampleEvents.class, "handleGenericStringPayload", EntityWrapper.class);, +		Method method = ReflectionUtils.findMethod, +				(SampleEvents.class, "handleGenericStringPayload", EntityWrapper.class);, +		Method method = ReflectionUtils.findMethod(, +				SampleEvents.class, "handleGenericAnyPayload", EntityWrapper.class);, +		Method method = ReflectionUtils.findMethod(, +				SampleEvents.class, "generateRuntimeException", GenericTestEvent.class);, +		this.thrown.expectCause(is((Throwable) isNull()));, +		Method method = ReflectionUtils.findMethod(, +				SampleEvents.class, "generateCheckedException", GenericTestEvent.class);, +		Method method = ReflectionUtils.findMethod(, +				InvalidProxyTestBean.class, "handleIt2", ApplicationEvent.class);, +		Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleString", String.class);, +		Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleString", String.class);, +		Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleStringAnnotationClasses");, +		Method method = ReflectionUtils.findMethod(, +				SampleEvents.class, "handleStringAnnotationValueAndParameter", String.class);, +		Method method = ReflectionUtils.findMethod(SampleEvents.class, "handleStringOrInteger");, +		Method method = ReflectionUtils.findMethod(, +				SampleEvents.class, "handleGenericString", GenericTestEvent.class);, +, +, +	private static class StaticApplicationListenerMethodAdapter extends ApplicationListenerMethodAdapter {, +, +, +, +, +, +, +]