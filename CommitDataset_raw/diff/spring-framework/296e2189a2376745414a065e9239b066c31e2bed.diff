[+++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsAsyncClientHttpRequest.java, +import org.apache.http.nio.entity.NByteArrayEntity;, +			HttpEntity requestEntity = new NByteArrayEntity(bufferedOutput);, +			return new HttpComponentsAsyncClientHttpResponse(response);, +			return new HttpComponentsAsyncClientHttpResponse(response);, +++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsAsyncClientHttpRequest.java, +import org.apache.http.nio.entity.NByteArrayEntity;, +			HttpEntity requestEntity = new NByteArrayEntity(bufferedOutput);, +			return new HttpComponentsAsyncClientHttpResponse(response);, +			return new HttpComponentsAsyncClientHttpResponse(response);, +++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsAsyncClientHttpRequestFactory.java, +import org.apache.http.client.config.RequestConfig;, +import org.apache.http.client.methods.Configurable;, +import org.apache.http.client.protocol.HttpClientContext;, +import org.apache.http.impl.client.CloseableHttpClient;, +import org.apache.http.impl.nio.client.CloseableHttpAsyncClient;, +import org.apache.http.protocol.HttpContext;, +	private CloseableHttpAsyncClient httpAsyncClient;, +		this(HttpAsyncClients.createSystem());, +	public HttpComponentsAsyncClientHttpRequestFactory(CloseableHttpAsyncClient httpAsyncClient) {, +	public HttpComponentsAsyncClientHttpRequestFactory(CloseableHttpClient httpClient,, +                                                       CloseableHttpAsyncClient httpAsyncClient) {, +	public void setHttpAsyncClient(CloseableHttpAsyncClient httpAsyncClient) {, +	public CloseableHttpAsyncClient getHttpAsyncClient() {, +        CloseableHttpAsyncClient asyncClient = getHttpAsyncClient();, +        HttpContext context = createHttpContext(httpMethod, uri);, +        if (context == null) {, +            context = HttpClientContext.create();, +        }, +        // Request configuration not set in the context, +        if (context.getAttribute(HttpClientContext.REQUEST_CONFIG) == null) {, +            // Use request configuration given by the user, when available, +            RequestConfig config = null;, +            if (httpRequest instanceof Configurable) {, +                config = ((Configurable) httpRequest).getConfig();, +            }, +            if (config == null) {, +                config = RequestConfig.DEFAULT;, +            }, +            context.setAttribute(HttpClientContext.REQUEST_CONFIG, config);, +        }, +		return new HttpComponentsAsyncClientHttpRequest(asyncClient, httpRequest, context);, +			getHttpAsyncClient().close();, +++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsAsyncClientHttpRequest.java, +import org.apache.http.nio.entity.NByteArrayEntity;, +			HttpEntity requestEntity = new NByteArrayEntity(bufferedOutput);, +			return new HttpComponentsAsyncClientHttpResponse(response);, +			return new HttpComponentsAsyncClientHttpResponse(response);, +++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsAsyncClientHttpRequestFactory.java, +import org.apache.http.client.config.RequestConfig;, +import org.apache.http.client.methods.Configurable;, +import org.apache.http.client.protocol.HttpClientContext;, +import org.apache.http.impl.client.CloseableHttpClient;, +import org.apache.http.impl.nio.client.CloseableHttpAsyncClient;, +import org.apache.http.protocol.HttpContext;, +	private CloseableHttpAsyncClient httpAsyncClient;, +		this(HttpAsyncClients.createSystem());, +	public HttpComponentsAsyncClientHttpRequestFactory(CloseableHttpAsyncClient httpAsyncClient) {, +	public HttpComponentsAsyncClientHttpRequestFactory(CloseableHttpClient httpClient,, +                                                       CloseableHttpAsyncClient httpAsyncClient) {, +	public void setHttpAsyncClient(CloseableHttpAsyncClient httpAsyncClient) {, +	public CloseableHttpAsyncClient getHttpAsyncClient() {, +        CloseableHttpAsyncClient asyncClient = getHttpAsyncClient();, +        HttpContext context = createHttpContext(httpMethod, uri);, +        if (context == null) {, +            context = HttpClientContext.create();, +        }, +        // Request configuration not set in the context, +        if (context.getAttribute(HttpClientContext.REQUEST_CONFIG) == null) {, +            // Use request configuration given by the user, when available, +            RequestConfig config = null;, +            if (httpRequest instanceof Configurable) {, +                config = ((Configurable) httpRequest).getConfig();, +            }, +            if (config == null) {, +                config = RequestConfig.DEFAULT;, +            }, +            context.setAttribute(HttpClientContext.REQUEST_CONFIG, config);, +        }, +		return new HttpComponentsAsyncClientHttpRequest(asyncClient, httpRequest, context);, +			getHttpAsyncClient().close();, +++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsAsyncClientHttpResponse.java, +/*, + * Copyright 2002-2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.http.client;, +]