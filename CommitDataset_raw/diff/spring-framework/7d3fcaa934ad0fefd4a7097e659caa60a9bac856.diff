[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.beans.factory.annotation.Lookup;, +import org.springframework.core.type.AnnotationMetadata;, +	/**, +	 * Determine if the index can be used by this instance., +	 * @return {@code true} if the index is available and the configuration of this, +	 * instance is supported by it, {@code false} otherwise, +	 * @since 5.0, +	 */, +	protected boolean isIndexSupported() {, +		if (this.componentsIndex == null) {, +			return false;, +		}, +		for (TypeFilter includeFilter : this.includeFilters) {, +			if (!isIndexSupportsIncludeFilter(includeFilter)) {, +				return false;, +			}, +		}, +		return true;, +	}, +, +	/**, +	 * Determine if the specified include {@link TypeFilter} is supported by the index., +	 * @param filter the filter to check, +	 * @return whether the index supports this include filter, +	 * @since 5.0, +	 * @see #extractStereotype(TypeFilter), +	 */, +	protected boolean isIndexSupportsIncludeFilter(TypeFilter filter) {, +		if (filter instanceof AnnotationTypeFilter) {, +			Class<? extends Annotation> annotation = ((AnnotationTypeFilter) filter).getAnnotationType();, +			return (AnnotationUtils.isAnnotationDeclaredLocally(Indexed.class, annotation) ||, +					annotation.getName().startsWith("javax."));, +		}, +		if (filter instanceof AssignableTypeFilter) {, +			Class<?> target = ((AssignableTypeFilter) filter).getTargetType();, +			return AnnotationUtils.isAnnotationDeclaredLocally(Indexed.class, target);, +		}, +		return false;, +	}, +, +	/**, +	 * Extract the stereotype to use for the specified compatible filter., +	 * @param filter the filter to handle, +	 * @return the stereotype in the index matching this filter, +	 * @since 5.0, +	 * @see #isIndexSupportsIncludeFilter(TypeFilter), +	 */, +	protected String extractStereotype(TypeFilter filter) {, +		if (filter instanceof AnnotationTypeFilter) {, +			return ((AnnotationTypeFilter) filter).getAnnotationType().getName();, +		}, +		if (filter instanceof AssignableTypeFilter) {, +			return ((AssignableTypeFilter) filter).getTargetType().getName();, +		}, +		return null;, +	}, +, +	private Set<BeanDefinition> addCandidateComponentsFromIndex(String basePackage) {, +	private Set<BeanDefinition> scanCandidateComponents(String basePackage) {, +	 * <p>The default implementation checks whether the class is not an interface, +	 * and not dependent on an enclosing class., +	 * <p>Can be overridden in subclasses., +		AnnotationMetadata metadata = beanDefinition.getMetadata();, +		return (metadata.isIndependent() && (metadata.isConcrete() ||, +				(metadata.isAbstract() && metadata.hasAnnotatedMethods(Lookup.class.getName()))));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.beans.factory.annotation.Lookup;, +import org.springframework.core.type.AnnotationMetadata;, +	/**, +	 * Determine if the index can be used by this instance., +	 * @return {@code true} if the index is available and the configuration of this, +	 * instance is supported by it, {@code false} otherwise, +	 * @since 5.0, +	 */, +	protected boolean isIndexSupported() {, +		if (this.componentsIndex == null) {, +			return false;, +		}, +		for (TypeFilter includeFilter : this.includeFilters) {, +			if (!isIndexSupportsIncludeFilter(includeFilter)) {, +				return false;, +			}, +		}, +		return true;, +	}, +, +	/**, +	 * Determine if the specified include {@link TypeFilter} is supported by the index., +	 * @param filter the filter to check, +	 * @return whether the index supports this include filter, +	 * @since 5.0, +	 * @see #extractStereotype(TypeFilter), +	 */, +	protected boolean isIndexSupportsIncludeFilter(TypeFilter filter) {, +		if (filter instanceof AnnotationTypeFilter) {, +			Class<? extends Annotation> annotation = ((AnnotationTypeFilter) filter).getAnnotationType();, +			return (AnnotationUtils.isAnnotationDeclaredLocally(Indexed.class, annotation) ||]