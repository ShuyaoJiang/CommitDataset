[+++ b/spring-web/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, + * <p>Typically implemented by an HTTP request on the client-side or an, + * HTTP response on the server-side., +	 * Return a {@link DataBufferFactory} that can be used to create the body., +	 * Register an action to apply just before the HttpOutputMessage is committed., +	 * @param action the action to apply, +	 * Whether the HttpOutputMessage is committed., +	 */, +	boolean isCommitted();, +, +	/**, +	 * Use the given {@link Publisher} to write the body of the message to the, +	 * underlying HTTP layer., +	 * Use the given {@link Publisher} of {@code Publishers} to write the body, +	 * of the HttpOutputMessage to the underlying HTTP layer, flushing after, +	 * each {@code Publisher<DataBuffer>}., +++ b/spring-web/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, + * <p>Typically implemented by an HTTP request on the client-side or an, + * HTTP response on the server-side., +	 * Return a {@link DataBufferFactory} that can be used to create the body., +	 * Register an action to apply just before the HttpOutputMessage is committed., +	 * @param action the action to apply, +	 * Whether the HttpOutputMessage is committed., +	 */, +	boolean isCommitted();, +, +	/**, +	 * Use the given {@link Publisher} to write the body of the message to the, +	 * underlying HTTP layer., +	 * Use the given {@link Publisher} of {@code Publishers} to write the body, +	 * of the HttpOutputMessage to the underlying HTTP layer, flushing after, +	 * each {@code Publisher<DataBuffer>}., +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/AbstractClientHttpRequest.java, +	@Override, +	public void beforeCommit(Supplier<? extends Mono<Void>> action) {, +		Assert.notNull(action, "Action must not be null");, +		this.commitActions.add(action);, +	}, +, +	@Override, +	public boolean isCommitted() {, +		return this.state.get() != State.NEW;, +	}, +, +		return doCommit(null);, +		if (!this.state.compareAndSet(State.NEW, State.COMMITTING)) {, +			this.state.set(State.COMMITTED);, +++ b/spring-web/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, + * <p>Typically implemented by an HTTP request on the client-side or an, + * HTTP response on the server-side., +	 * Return a {@link DataBufferFactory} that can be used to create the body., +	 * Register an action to apply just before the HttpOutputMessage is committed., +	 * @param action the action to apply, +	 * Whether the HttpOutputMessage is committed., +	 */, +	boolean isCommitted();, +, +	/**, +	 * Use the given {@link Publisher} to write the body of the message to the, +	 * underlying HTTP layer., +	 * Use the given {@link Publisher} of {@code Publishers} to write the body, +	 * of the HttpOutputMessage to the underlying HTTP layer, flushing after, +	 * each {@code Publisher<DataBuffer>}., +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/AbstractClientHttpRequest.java, +	@Override, +	public void beforeCommit(Supplier<? extends Mono<Void>> action) {, +		Assert.notNull(action, "Action must not be null");, +		this.commitActions.add(action);, +	}, +, +	@Override, +	public boolean isCommitted() {, +		return this.state.get() != State.NEW;, +	}, +, +		return doCommit(null);, +		if (!this.state.compareAndSet(State.NEW, State.COMMITTING)) {, +			this.state.set(State.COMMITTED);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +	private enum State {NEW, COMMITTING, COMMITTED}, +	public boolean isCommitted() {, +		return this.state.get() != State.NEW;, +	}, +, +	@Override, +		return doCommit(null);, +		return doCommit(null);, +++ b/spring-web/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, + * <p>Typically implemented by an HTTP request on the client-side or an, + * HTTP response on the server-side., +	 * Return a {@link DataBufferFactory} that can be used to create the body., +	 * Register an action to apply just before the HttpOutputMessage is committed., +	 * @param action the action to apply, +	 * Whether the HttpOutputMessage is committed., +	 */, +	boolean isCommitted();, +, +	/**, +	 * Use the given {@link Publisher} to write the body of the message to the, +	 * underlying HTTP layer.]