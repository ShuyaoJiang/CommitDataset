[+++ b/org.springframework.web/src/main/java/org/springframework/web/util/UrlPathHelper.java, +import java.util.Properties;, +	private static final Log logger = LogFactory.getLog(UrlPathHelper.class);, +	static volatile Boolean websphereComplianceFlag;, +, +				shouldRemoveTrailingServletPathSlash(request)) {, +			// On WebSphere, in non-compliant mode, for a "/foo/" case that would be "/foo", +			// on all other servlet containers: removing trailing slash, proceeding with, +			// that remaining slash as final lookup path..., +, +	private boolean shouldRemoveTrailingServletPathSlash(HttpServletRequest request) {, +		if (request.getAttribute(WEBSPHERE_URI_ATTRIBUTE) == null) {, +			// Regular servlet container: behaves as expected in any case,, +			// so the trailing slash is the result of a "/" url-pattern mapping., +			// Don't remove that slash., +			return false;, +		}, +		if (websphereComplianceFlag == null) {, +			ClassLoader classLoader = UrlPathHelper.class.getClassLoader();, +			String className = "com.ibm.ws.webcontainer.WebContainer";, +			String methodName = "getWebContainerProperties";, +			String propName = "com.ibm.ws.webcontainer.removetrailingservletpathslash";, +			boolean flag = false;, +			try {, +				Class<?> cl = classLoader.loadClass(className);, +				Properties prop = (Properties) cl.getMethod(methodName).invoke(null);, +				flag = Boolean.parseBoolean(prop.getProperty(propName));, +			}, +			catch (Throwable ex) {, +				if (logger.isDebugEnabled()) {, +					logger.debug("Could not introspect WebSphere web container properties: " + ex);, +				}, +			}, +			websphereComplianceFlag = flag;, +		}, +		// Don't bother if WebSphere is configured to be fully Servlet compliant., +		// However, if it is not compliant, do remove the improper trailing slash!, +		return !websphereComplianceFlag;, +	}, +, +++ b/org.springframework.web/src/main/java/org/springframework/web/util/UrlPathHelper.java, +import java.util.Properties;, +	private static final Log logger = LogFactory.getLog(UrlPathHelper.class);, +	static volatile Boolean websphereComplianceFlag;, +, +				shouldRemoveTrailingServletPathSlash(request)) {, +			// On WebSphere, in non-compliant mode, for a "/foo/" case that would be "/foo", +			// on all other servlet containers: removing trailing slash, proceeding with, +			// that remaining slash as final lookup path..., +, +	private boolean shouldRemoveTrailingServletPathSlash(HttpServletRequest request) {, +		if (request.getAttribute(WEBSPHERE_URI_ATTRIBUTE) == null) {, +			// Regular servlet container: behaves as expected in any case,, +			// so the trailing slash is the result of a "/" url-pattern mapping., +			// Don't remove that slash., +			return false;, +		}, +		if (websphereComplianceFlag == null) {, +			ClassLoader classLoader = UrlPathHelper.class.getClassLoader();, +			String className = "com.ibm.ws.webcontainer.WebContainer";, +			String methodName = "getWebContainerProperties";, +			String propName = "com.ibm.ws.webcontainer.removetrailingservletpathslash";, +			boolean flag = false;, +			try {, +				Class<?> cl = classLoader.loadClass(className);, +				Properties prop = (Properties) cl.getMethod(methodName).invoke(null);, +				flag = Boolean.parseBoolean(prop.getProperty(propName));, +			}, +			catch (Throwable ex) {, +				if (logger.isDebugEnabled()) {, +					logger.debug("Could not introspect WebSphere web container properties: " + ex);, +				}, +			}, +			websphereComplianceFlag = flag;, +		}, +		// Don't bother if WebSphere is configured to be fully Servlet compliant., +		// However, if it is not compliant, do remove the improper trailing slash!, +		return !websphereComplianceFlag;, +	}, +, +++ b/org.springframework.web/src/test/java/org/springframework/web/util/UrlPathHelperTests.java, +import static org.junit.Assert.*;, +import org.junit.Ignore;, +, +	public void wasDefaultServletFileWithCompliantSetting() throws Exception {, +	@Test, +		UrlPathHelper.websphereComplianceFlag = true;, +		try {, +		finally {, +			UrlPathHelper.websphereComplianceFlag = false;, +		}, +	}, +	@Test @Ignore, +	@Test, +	@Test @Ignore, +	@Test @Ignore]