[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ConversionServiceFactory.java, + * A factory for creating common ConversionService configurations., +	private static ConversionService DEFAULT_INSTANCE;, +	, +	 * Get the shared default ConversionService., +	 */, +	public static synchronized ConversionService getDefault() {, +		if (DEFAULT_INSTANCE == null) {, +			DEFAULT_INSTANCE = createDefault();, +		}, +		return DEFAULT_INSTANCE;, +	}, +	, +	/**, +	 * Create a new default ConversionService prototype that can be safely modified., +		conversionService.addGenericConverter(new EntityConverter(conversionService));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ConversionServiceFactory.java, + * A factory for creating common ConversionService configurations., +	private static ConversionService DEFAULT_INSTANCE;, +	, +	 * Get the shared default ConversionService., +	 */, +	public static synchronized ConversionService getDefault() {, +		if (DEFAULT_INSTANCE == null) {, +			DEFAULT_INSTANCE = createDefault();, +		}, +		return DEFAULT_INSTANCE;, +	}, +	, +	/**, +	 * Create a new default ConversionService prototype that can be safely modified., +		conversionService.addGenericConverter(new EntityConverter(conversionService));, +++ /dev/null, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ConversionServiceFactory.java, + * A factory for creating common ConversionService configurations., +	private static ConversionService DEFAULT_INSTANCE;, +	, +	 * Get the shared default ConversionService., +	 */, +	public static synchronized ConversionService getDefault() {, +		if (DEFAULT_INSTANCE == null) {, +			DEFAULT_INSTANCE = createDefault();, +		}, +		return DEFAULT_INSTANCE;, +	}, +	, +	/**, +	 * Create a new default ConversionService prototype that can be safely modified., +		conversionService.addGenericConverter(new EntityConverter(conversionService));, +++ /dev/null, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.core.convert.support;, +, +import static junit.framework.Assert.assertEquals;, +import static junit.framework.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +, +import java.math.BigDecimal;, +import java.math.BigInteger;, +import java.util.AbstractList;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.LinkedHashMap;, +import java.util.LinkedHashSet;, +import java.util.LinkedList;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +import java.util.Set;, +, +import org.junit.Test;, +import org.springframework.core.convert.ConversionFailedException;, +import org.springframework.core.convert.ConversionService;, +import org.springframework.core.convert.ConverterNotFoundException;, +import org.springframework.core.convert.TypeDescriptor;, +import org.springframework.core.convert.converter.Converter;, +, +public class DefaultConversionTests {, +, +	private ConversionService conversionService = ConversionServiceFactory.getDefault();, +	]