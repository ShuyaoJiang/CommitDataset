[+++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java, +	private final Map<Object, Class<?>> proxyTypes = new ConcurrentHashMap<Object, Class<?>>();, +    public Class<?> predictBeanType(Class<?> beanClass, String beanName) {, +	public Constructor<?>[] determineCandidateConstructors(Class<?> beanClass, String beanName) throws BeansException {, +	public Object postProcessBeforeInstantiation(Class<?> beanClass, String beanName) throws BeansException {, +	protected Object getCacheKey(Class<?> beanClass, String beanName) {, +	protected boolean isInfrastructureClass(Class<?> beanClass) {, +	protected boolean shouldSkip(Class<?> beanClass, String beanName) {, +	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {, +			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource) {, +			Class<?>[] targetInterfaces = ClassUtils.getAllInterfacesForClass(beanClass, this.proxyClassLoader);, +			for (Class<?> targetInterface : targetInterfaces) {, +	protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName) {, +			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException;, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java, +	private final Map<Object, Class<?>> proxyTypes = new ConcurrentHashMap<Object, Class<?>>();, +    public Class<?> predictBeanType(Class<?> beanClass, String beanName) {, +	public Constructor<?>[] determineCandidateConstructors(Class<?> beanClass, String beanName) throws BeansException {, +	public Object postProcessBeforeInstantiation(Class<?> beanClass, String beanName) throws BeansException {, +	protected Object getCacheKey(Class<?> beanClass, String beanName) {, +	protected boolean isInfrastructureClass(Class<?> beanClass) {, +	protected boolean shouldSkip(Class<?> beanClass, String beanName) {, +	protected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName) {, +			Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource) {, +			Class<?>[] targetInterfaces = ClassUtils.getAllInterfacesForClass(beanClass, this.proxyClassLoader);, +			for (Class<?> targetInterface : targetInterfaces) {, +	protected boolean shouldProxyTargetClass(Class<?> beanClass, String beanName) {, +			Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException;, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/framework/AopProxyUtilsTests.java, +/*, + * Copyright 2002-2006 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.aop.framework;, +, +import static org.junit.Assert.*;, +, +import java.lang.reflect.InvocationHandler;, +import java.lang.reflect.Method;, +import java.lang.reflect.Proxy;, +import java.util.Arrays;, +import java.util.List;, +, +import org.junit.Test;, +import org.springframework.aop.SpringProxy;, +import org.springframework.beans.ITestBean;, +import org.springframework.beans.TestBean;, +, +/**, + * @author Rod Johnson, + * @author Chris Beams, + */, +public class AopProxyUtilsTests {, +	, +	@Test, +	public void testCompleteProxiedInterfacesWorksWithNull() {, +		AdvisedSupport as = new AdvisedSupport();, +		Class<?>[] completedInterfaces = AopProxyUtils.completeProxiedInterfaces(as);, +		assertEquals(2, completedInterfaces.length);, +		List<?> ifaces = Arrays.asList(completedInterfaces);, +		assertTrue(ifaces.contains(Advised.class));, +		assertTrue(ifaces.contains(SpringProxy.class));, +	}, +	, +	@Test, +	public void testCompleteProxiedInterfacesWorksWithNullOpaque() {, +		AdvisedSupport as = new AdvisedSupport();, +		as.setOpaque(true);, +		Class<?>[] completedInterfaces = AopProxyUtils.completeProxiedInterfaces(as);, +		assertEquals(1, completedInterfaces.length);, +	}, +	, +	@Test, +	public void testCompleteProxiedInterfacesAdvisedNotIncluded() {, +		AdvisedSupport as = new AdvisedSupport();, +		as.addInterface(ITestBean.class);, +		as.addInterface(Comparable.class);, +		Class<?>[] completedInterfaces = AopProxyUtils.completeProxiedInterfaces(as);, +		assertEquals(4, completedInterfaces.length);, +		, +		// Can't assume ordering for others, so use a list, +		List<?> l = Arrays.asList(completedInterfaces);, +		assertTrue(l.contains(Advised.class));, +		assertTrue(l.contains(ITestBean.class));, +		assertTrue(l.contains(Comparable.class));, +	}, +	, +	@Test]