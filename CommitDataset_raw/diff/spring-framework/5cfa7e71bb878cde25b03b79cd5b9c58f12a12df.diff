[+++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, + * Copyright 2002-2017 the original author or authors., +		return clazz.getTypeName();, +			return clazz.getTypeName();, +				(typeName.equals(clazz.getTypeName()) || typeName.equals(clazz.getSimpleName())));, +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, + * Copyright 2002-2017 the original author or authors., +		return clazz.getTypeName();, +			return clazz.getTypeName();, +				(typeName.equals(clazz.getTypeName()) || typeName.equals(clazz.getSimpleName())));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/FormatHelper.java, + * Copyright 2002-2017 the original author or authors., +		return clazz.getTypeName();, +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, + * Copyright 2002-2017 the original author or authors., +		return clazz.getTypeName();, +			return clazz.getTypeName();, +				(typeName.equals(clazz.getTypeName()) || typeName.equals(clazz.getSimpleName())));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/FormatHelper.java, + * Copyright 2002-2017 the original author or authors., +		return clazz.getTypeName();, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/support/ReflectionHelperTests.java, + * Copyright 2002-2017 the original author or authors., +		assertEquals("java.lang.String[][]",FormatHelper.formatClassNameForMessage(new String[1][1].getClass()));, +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, + * Copyright 2002-2017 the original author or authors., +		return clazz.getTypeName();, +			return clazz.getTypeName();, +				(typeName.equals(clazz.getTypeName()) || typeName.equals(clazz.getSimpleName())));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/FormatHelper.java, + * Copyright 2002-2017 the original author or authors., +		return clazz.getTypeName();, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/support/ReflectionHelperTests.java, + * Copyright 2002-2017 the original author or authors., +		assertEquals("java.lang.String[][]",FormatHelper.formatClassNameForMessage(new String[1][1].getClass()));, +++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpRequest.java, +	private Flux<DataBuffer> body;, +	@Override, +	public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {, +		this.body = Flux.from(body);, +		return doCommit(() -> {, +			this.body = Flux.from(body);, +			return Mono.empty();, +		});, +	}, +, +	@Override, +	public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body) {, +		return writeWith(Flux.from(body).flatMap(p -> p));, +		return doCommit(Mono::empty);, +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, + * Copyright 2002-2017 the original author or authors., +		return clazz.getTypeName();, +			return clazz.getTypeName();, +				(typeName.equals(clazz.getTypeName()) || typeName.equals(clazz.getSimpleName())));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/FormatHelper.java, + * Copyright 2002-2017 the original author or authors., +		return clazz.getTypeName();, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/support/ReflectionHelperTests.java, + * Copyright 2002-2017 the original author or authors., +		assertEquals("java.lang.String[][]",FormatHelper.formatClassNameForMessage(new String[1][1].getClass()));, +++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpRequest.java, +	private Flux<DataBuffer> body;, +	@Override, +	public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {, +		this.body = Flux.from(body);, +		return doCommit(() -> {, +			this.body = Flux.from(body);, +			return Mono.empty();, +		});, +	}, +, +	@Override, +	public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body) {, +		return writeWith(Flux.from(body).flatMap(p -> p));, +		return doCommit(Mono::empty);, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpRequest.java, +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, + * Copyright 2002-2017 the original author or authors., +		return clazz.getTypeName();, +			return clazz.getTypeName();, +				(typeName.equals(clazz.getTypeName()) || typeName.equals(clazz.getSimpleName())));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/FormatHelper.java, + * Copyright 2002-2017 the original author or authors., +		return clazz.getTypeName();, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/support/ReflectionHelperTests.java, + * Copyright 2002-2017 the original author or authors., +		assertEquals("java.lang.String[][]",FormatHelper.formatClassNameForMessage(new String[1][1].getClass()));, +++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpRequest.java, +	private Flux<DataBuffer> body;, +	@Override, +	public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {, +		this.body = Flux.from(body);, +		return doCommit(() -> {, +			this.body = Flux.from(body);, +			return Mono.empty();, +		});, +	}, +, +	@Override]