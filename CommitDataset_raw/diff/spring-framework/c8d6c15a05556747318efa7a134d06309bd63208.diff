[+++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPoint.java, +import java.lang.reflect.Modifier;, + * @author Ramnivas Laddad, +		return "execution(" + getSignature().toShortString() + ")";, +		return "execution(" + getSignature().toLongString() + ")";, +		return "execution(" + getSignature().toString() + ")";, +, +		public String toShortString() {, +			return toString(false, false, false, false);, +		public String toLongString() {, +			return toString(true, true, true, true);, +		}, +, +		public String toString() {, +			return toString(false, true, false, true);, +		}, +, +		private String toString(boolean includeModifier,, +				boolean includeReturnTypeAndArgs,, +				boolean useLongReturnAndArgumentTypeName,, +				boolean useLongTypeName) {, +			StringBuilder sb = new StringBuilder();, +			if (includeModifier) {, +				sb.append(Modifier.toString(getModifiers()));, +				sb.append(" ");, +			}, +			if (includeReturnTypeAndArgs) {, +				appendType(sb, getReturnType(),, +						useLongReturnAndArgumentTypeName);, +				sb.append(" ");, +			}, +			appendType(sb, getDeclaringType(), useLongTypeName);, +			sb.append(".");, +			sb.append(getMethod().getName());, +			sb.append("(");, +, +			Class[] parametersTypes = getParameterTypes();, +			appendTypes(sb, parametersTypes, includeReturnTypeAndArgs,, +					useLongReturnAndArgumentTypeName);, +			sb.append(")");, +			return sb.toString();, +		}, +	}, +, +	private void appendTypes(StringBuilder sb, Class<?>[] types,, +			boolean includeArgs, boolean useLongReturnAndArgumentTypeName) {, +		if (includeArgs) {, +			for (int size = types.length, i = 0; i < size; i++) {, +				appendType(sb, types[i], useLongReturnAndArgumentTypeName);, +				if (i < size - 1) {, +					sb.append(",");, +				}, +			}, +		} else {, +			if (types.length != 0) {, +				sb.append("..");, +			}, +		}, +	}, +, +	private void appendType(StringBuilder sb, Class<?> type,, +			boolean useLongTypeName) {, +		if (type.isArray()) {, +			appendType(sb, type.getComponentType(), useLongTypeName);, +			sb.append("[]");, +		} else {, +			if (type.getPackage() != null, +					&& type.getPackage().equals("java.lang")) {, +				useLongTypeName = false;, +			}, +			sb.append(useLongTypeName ? type.getName() : type.getSimpleName());, +		}, +	}, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPoint.java, +import java.lang.reflect.Modifier;, + * @author Ramnivas Laddad, +		return "execution(" + getSignature().toShortString() + ")";, +		return "execution(" + getSignature().toLongString() + ")";, +		return "execution(" + getSignature().toString() + ")";, +, +		public String toShortString() {, +			return toString(false, false, false, false);, +		public String toLongString() {, +			return toString(true, true, true, true);, +		}, +, +		public String toString() {, +			return toString(false, true, false, true);, +		}, +, +		private String toString(boolean includeModifier,, +				boolean includeReturnTypeAndArgs,, +				boolean useLongReturnAndArgumentTypeName,, +				boolean useLongTypeName) {, +			StringBuilder sb = new StringBuilder();, +			if (includeModifier) {, +				sb.append(Modifier.toString(getModifiers()));, +				sb.append(" ");, +			}, +			if (includeReturnTypeAndArgs) {]