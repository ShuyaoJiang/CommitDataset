[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitter.java, +	private final DefaultCallback timeoutCallback = new DefaultCallback();, +	private final DefaultCallback completionCallback = new DefaultCallback();, +		else {, +					completeWithError(ex);, +					completeWithError(ex);, +		this.timeoutCallback.setDelegate(callback);, +		this.completionCallback.setDelegate(callback);, +	private class DefaultCallback implements Runnable {, +, +		private Runnable delegate;, +, +, +		public void setDelegate(Runnable delegate) {, +			this.delegate = delegate;, +		}, +, +		@Override, +		public void run() {, +			ResponseBodyEmitter.this.complete = true;, +			if (this.delegate != null) {, +				this.delegate.run();, +			}, +		}, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitter.java, +	private final DefaultCallback timeoutCallback = new DefaultCallback();, +	private final DefaultCallback completionCallback = new DefaultCallback();, +		else {, +					completeWithError(ex);, +					completeWithError(ex);, +		this.timeoutCallback.setDelegate(callback);, +		this.completionCallback.setDelegate(callback);, +	private class DefaultCallback implements Runnable {, +, +		private Runnable delegate;, +, +, +		public void setDelegate(Runnable delegate) {, +			this.delegate = delegate;, +		}, +, +		@Override, +		public void run() {, +			ResponseBodyEmitter.this.complete = true;, +			if (this.delegate != null) {, +				this.delegate.run();, +			}, +		}, +	}, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterTests.java, +import org.mockito.ArgumentCaptor;, +import org.springframework.util.Assert;, +		verify(this.handler).onTimeout(any());, +		verify(this.handler).onCompletion(any());, +		verify(this.handler).onTimeout(any());, +		verify(this.handler).onCompletion(any());, +		verify(this.handler).onTimeout(any());, +		verify(this.handler).onCompletion(any());, +, +		ArgumentCaptor<Runnable> captor = ArgumentCaptor.forClass(Runnable.class);, +		verify(this.handler).onTimeout(captor.capture());, +		verify(this.handler).onCompletion(any());, +, +		Assert.notNull(captor.getValue());, +		captor.getValue().run();, +		verify(runnable).run();, +, +		ArgumentCaptor<Runnable> captor = ArgumentCaptor.forClass(Runnable.class);, +		verify(this.handler).onTimeout(captor.capture());, +		verify(this.handler).onCompletion(any());, +, +		Runnable runnable = mock(Runnable.class);, +, +		Assert.notNull(captor.getValue());, +		captor.getValue().run();, +		verify(runnable).run();, +, +		ArgumentCaptor<Runnable> captor = ArgumentCaptor.forClass(Runnable.class);, +		verify(this.handler).onTimeout(any());, +		verify(this.handler).onCompletion(captor.capture());, +, +		Assert.notNull(captor.getValue());, +		captor.getValue().run();, +		verify(runnable).run();, +, +		ArgumentCaptor<Runnable> captor = ArgumentCaptor.forClass(Runnable.class);, +		verify(this.handler).onTimeout(any());, +		verify(this.handler).onCompletion(captor.capture());, +, +		Runnable runnable = mock(Runnable.class);, +, +		Assert.notNull(captor.getValue());, +		captor.getValue().run();, +		verify(runnable).run();]