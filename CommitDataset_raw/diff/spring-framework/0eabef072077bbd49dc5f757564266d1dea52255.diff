[+++ b/org.springframework.web/src/main/java/org/springframework/web/filter/HiddenHttpMethodFilter.java, + * <p><b>NOTE: This filter needs to run after multipart processing in case of a multipart, + * POST request, due to its inherent need for checking a POST body parameter.</b>, + * So typically, put a Spring {@link org.springframework.web.multipart.support.MultipartFilter}, + * <i>before</i> this HiddenHttpMethodFilter in your <code>web.xml</code> filter chain., + *, +++ b/org.springframework.web/src/main/java/org/springframework/web/filter/HiddenHttpMethodFilter.java, + * <p><b>NOTE: This filter needs to run after multipart processing in case of a multipart, + * POST request, due to its inherent need for checking a POST body parameter.</b>, + * So typically, put a Spring {@link org.springframework.web.multipart.support.MultipartFilter}, + * <i>before</i> this HiddenHttpMethodFilter in your <code>web.xml</code> filter chain., + *, +++ b/org.springframework.web/src/main/java/org/springframework/web/multipart/support/MultipartFilter.java, + * Copyright 2002-2010 the original author or authors., + * MultipartResolver support, for example for web applications with custom web views, + * which do not use Spring's web MVC, or for custom filters applied before a Spring MVC, + * DispatcherServlet (e.g. {@link org.springframework.web.filter.HiddenHttpMethodFilter})., + * In any case, this filter should not be combined with servlet-specific multipart resolution., +		return this.multipartResolverBeanName;, +		WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(getServletContext());, +		return wac.getBean(getMultipartResolverBeanName(), MultipartResolver.class);]