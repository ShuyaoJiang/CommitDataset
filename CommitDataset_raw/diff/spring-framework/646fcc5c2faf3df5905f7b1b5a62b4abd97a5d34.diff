[+++ b/spring-web/src/main/java/org/springframework/http/client/MultipartBodyBuilder.java, + * Copyright 2002-2018 the original author or authors., +import java.util.function.Consumer;, +, +		/**, +		 * Manipulate the part's headers with the given consumer., +		 * @param headersConsumer a function that consumes the {@code HttpHeaders}, +		 * @return this builder, +		 */, +		PartBuilder headers(Consumer<HttpHeaders> headersConsumer);, +		@Override, +		public PartBuilder headers(Consumer<HttpHeaders> headersConsumer) {, +			Assert.notNull(headersConsumer, "'headersConsumer' must not be null");, +			headersConsumer.accept(this.headers);, +			return this;, +		}, +, +++ b/spring-web/src/main/java/org/springframework/http/client/MultipartBodyBuilder.java, + * Copyright 2002-2018 the original author or authors., +import java.util.function.Consumer;, +, +		/**, +		 * Manipulate the part's headers with the given consumer., +		 * @param headersConsumer a function that consumes the {@code HttpHeaders}, +		 * @return this builder, +		 */, +		PartBuilder headers(Consumer<HttpHeaders> headersConsumer);, +		@Override, +		public PartBuilder headers(Consumer<HttpHeaders> headersConsumer) {, +			Assert.notNull(headersConsumer, "'headersConsumer' must not be null");, +			headersConsumer.accept(this.headers);, +			return this;, +		}, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartHttpMessageWriter.java, + * Copyright 2002-2018 the original author or authors., +		HttpHeaders outputHeaders = outputMessage.getHeaders();, +			outputHeaders.putAll(httpEntity.getHeaders());, +		if (!outputHeaders.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {, +				outputHeaders.setContentDispositionFormData(name, ((Resource) body).getFilename());, +				body = (T) Mono.from((Publisher<?>) body).doOnNext(o -> outputHeaders, +						.setContentDispositionFormData(name, ((Resource) o).getFilename()));, +				outputHeaders.setContentDispositionFormData(name, null);, +			}, +		MediaType contentType = outputHeaders.getContentType();, +++ b/spring-web/src/main/java/org/springframework/http/client/MultipartBodyBuilder.java, + * Copyright 2002-2018 the original author or authors., +import java.util.function.Consumer;, +, +		/**, +		 * Manipulate the part's headers with the given consumer., +		 * @param headersConsumer a function that consumes the {@code HttpHeaders}, +		 * @return this builder, +		 */, +		PartBuilder headers(Consumer<HttpHeaders> headersConsumer);, +		@Override, +		public PartBuilder headers(Consumer<HttpHeaders> headersConsumer) {, +			Assert.notNull(headersConsumer, "'headersConsumer' must not be null");, +			headersConsumer.accept(this.headers);, +			return this;, +		}, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartHttpMessageWriter.java, + * Copyright 2002-2018 the original author or authors., +		HttpHeaders outputHeaders = outputMessage.getHeaders();, +			outputHeaders.putAll(httpEntity.getHeaders());, +		if (!outputHeaders.containsKey(HttpHeaders.CONTENT_DISPOSITION)) {, +				outputHeaders.setContentDispositionFormData(name, ((Resource) body).getFilename());, +				body = (T) Mono.from((Publisher<?>) body).doOnNext(o -> outputHeaders, +						.setContentDispositionFormData(name, ((Resource) o).getFilename()));, +				outputHeaders.setContentDispositionFormData(name, null);, +			}, +		MediaType contentType = outputHeaders.getContentType();, +++ b/spring-web/src/test/java/org/springframework/http/codec/multipart/MultipartHttpMessageWriterTests.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.core.io.buffer.DataBufferUtils;, +import org.springframework.core.io.buffer.DefaultDataBufferFactory;, +	@Test // SPR-16376, +	public void customContentDisposition() throws IOException {, +		Resource logo = new ClassPathResource("/org/springframework/http/converter/logo.jpg");, +		Flux<DataBuffer> buffers = DataBufferUtils.read(logo, new DefaultDataBufferFactory(), 1024);, +		long contentLength = logo.contentLength();, +, +		MultipartBodyBuilder bodyBuilder = new MultipartBodyBuilder();, +		bodyBuilder.part("resource", logo), +				.headers(h -> h.setContentDispositionFormData("resource", "spring.jpg"));, +		bodyBuilder.asyncPart("buffers", buffers, DataBuffer.class), +				.headers(h -> {, +					h.setContentDispositionFormData("buffers", "buffers.jpg");, +					h.setContentType(MediaType.IMAGE_JPEG);, +					h.setContentLength(contentLength);, +				});, +, +		MultiValueMap<String, HttpEntity<?>> multipartData = bodyBuilder.build();, +, +		MockServerHttpResponse response = new MockServerHttpResponse();, +		Map<String, Object> hints = Collections.emptyMap();, +		this.writer.write(Mono.just(multipartData), null, MediaType.MULTIPART_FORM_DATA, response, hints).block();, +]