[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +		// Quick check on the concurrent map first, with minimal locking., +					try {, +					catch (NoClassDefFoundError err) {, +						throw new IllegalStateException("Failed to introspect bean class [" + clazz.getName() +, +								"] for autowiring metadata: could not find class that it depends on", err);, +					}, +				}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +		// Quick check on the concurrent map first, with minimal locking., +					try {, +					catch (NoClassDefFoundError err) {, +						throw new IllegalStateException("Failed to introspect bean class [" + clazz.getName() +, +								"] for autowiring metadata: could not find class that it depends on", err);, +					}, +				}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessor.java, +		// Quick check on the concurrent map first, with minimal locking., +					try {, +						metadata = buildResourceMetadata(clazz);, +						this.injectionMetadataCache.put(cacheKey, metadata);, +					}, +					catch (NoClassDefFoundError err) {, +						throw new IllegalStateException("Failed to introspect bean class [" + clazz.getName() +, +								"] for resource metadata: could not find class that it depends on", err);, +					}, +				}, +			}, +		}, +		return metadata;, +	}, +, +	private InjectionMetadata buildResourceMetadata(Class<?> clazz) {, +		return new InjectionMetadata(clazz, elements);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +		// Quick check on the concurrent map first, with minimal locking., +					try {, +					catch (NoClassDefFoundError err) {, +						throw new IllegalStateException("Failed to introspect bean class [" + clazz.getName() +, +								"] for autowiring metadata: could not find class that it depends on", err);, +					}, +				}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessor.java, +		// Quick check on the concurrent map first, with minimal locking., +					try {, +						metadata = buildResourceMetadata(clazz);, +						this.injectionMetadataCache.put(cacheKey, metadata);, +					}, +					catch (NoClassDefFoundError err) {, +						throw new IllegalStateException("Failed to introspect bean class [" + clazz.getName() +, +								"] for resource metadata: could not find class that it depends on", err);, +					}, +				}, +			}, +		}, +		return metadata;, +	}, +, +	private InjectionMetadata buildResourceMetadata(Class<?> clazz) {, +		return new InjectionMetadata(clazz, elements);, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/support/PersistenceAnnotationBeanPostProcessor.java, +		// Quick check on the concurrent map first, with minimal locking., +					try {, +						metadata = buildPersistenceMetadata(clazz);, +						this.injectionMetadataCache.put(cacheKey, metadata);, +					}, +					catch (NoClassDefFoundError err) {, +						throw new IllegalStateException("Failed to introspect bean class [" + clazz.getName() +, +								"] for persistence metadata: could not find class that it depends on", err);, +					}, +				}, +			}, +		}, +		return metadata;, +	}, +, +	private InjectionMetadata buildPersistenceMetadata(Class<?> clazz) {, +		return new InjectionMetadata(clazz, elements);]