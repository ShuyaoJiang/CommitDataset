[+++ b/src/docs/asciidoc/testing-webtestclient.adoc, +`WebTestClient` is a thin shell around <<web-reactive.adoc#webflux-webclient, WebClient>>,, +using it to perform requests and exposing a dedicated, fluent API for verifying responses., +`WebTestClient` bind to a WebFlux application using a, +<<testing.adoc#mock-objects-web-reactive,mock request and response>>, or it can test any, +web server over an HTTP connection., +, +Kotlin users, please see <<languages.adoc#kotlin-webtestclient-issue,this section>>, +related to use of the `WebTestClient`., +Effectively you're either configuring the WebFlux application to bind to, or using, +a URL to connect to a running server., +++ b/src/docs/asciidoc/testing-webtestclient.adoc, +`WebTestClient` is a thin shell around <<web-reactive.adoc#webflux-webclient, WebClient>>,, +using it to perform requests and exposing a dedicated, fluent API for verifying responses., +`WebTestClient` bind to a WebFlux application using a, +<<testing.adoc#mock-objects-web-reactive,mock request and response>>, or it can test any, +web server over an HTTP connection., +, +Kotlin users, please see <<languages.adoc#kotlin-webtestclient-issue,this section>>, +related to use of the `WebTestClient`., +Effectively you're either configuring the WebFlux application to bind to, or using, +a URL to connect to a running server., +++ b/src/docs/asciidoc/web/webflux-webclient.adoc, +The `spring-webflux` module includes a reactive, non-blocking client for HTTP requests, +with a functional-style API client and Reactive Streams support. `WebClient` depends on a, +lower level HTTP client library to execute requests and that support is pluggable., +, +`WebClient`, +uses the same <<web-reactive.adoc#webflux-codecs,codecs>> as WebFlux server applications do, and, +shares a common base package, some common APIs, and infrastructure with the, +The API exposes Reactor `Flux` and `Mono` types, also see, +<<web-reactive.adoc#webflux-reactive-libraries>>. By default it uses, +it uses https://github.com/reactor/reactor-netty[Reactor Netty] as the HTTP client, +library but others can be plugged in through a custom `ClientHttpConnector`., +By comparison to the <<integration.adoc#rest-resttemplate,RestTemplate>>, the, +`WebClient` is:, +* non-blocking, reactive, and supports higher concurrency with less hardware resources., +* provides a functional API that takes advantage of Java 8 lambdas., +* supports both synchronous and asynchronous scenarios., +* supports streaming up or down from a server., +, +For most concurrent scenarios, e.g. a sequence of possibly inter-dependent HTTP calls,, +or for making remote calls from the server-side, prefer using the `WebClient`., +, +, +, +, +[[webflux-client-testing]], +== Testing, +, +To test code that uses the `WebClient`, you can use a mock web server such as the, +https://github.com/square/okhttp#mockwebserver[OkHttp MockWebServer]. To see example, +use, check, +https://github.com/spring-projects/spring-framework/blob/master/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java[WebClientIntegrationTests], +in the Spring Framework tests, or the, +https://github.com/square/okhttp/tree/master/samples/static-server[static-server], +sample in the OkHttp repository.]