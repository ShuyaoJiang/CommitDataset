[+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.http.HttpHeaders;, +		this.pathBuilder = other.pathBuilder.cloneBuilder();, +	 * "Forwarded" (<a href="http://tools.ietf.org/html/rfc7239">RFC 7239</a>,, +	 * or "X-Forwarded-Host", "X-Forwarded-Port", and "X-Forwarded-Proto" if, +	 * "Forwarded" is not found., +		return fromUri(request.getURI()).adaptFromForwardedHeaders(request.getHeaders());, +	/**, +	 * Adapt this builder's scheme+host+port from the given headers, specifically, +	 * "Forwarded" (<a href="http://tools.ietf.org/html/rfc7239">RFC 7239</a>,, +	 * or "X-Forwarded-Host", "X-Forwarded-Port", and "X-Forwarded-Proto" if, +	 * "Forwarded" is not found., +	 * @param headers the HTTP headers to consider, +	 * @return this UriComponentsBuilder, +	 * @since 4.3, +	 */, +	UriComponentsBuilder adaptFromForwardedHeaders(HttpHeaders headers) {, +		String forwardedHeader = headers.getFirst("Forwarded");, +		if (StringUtils.hasText(forwardedHeader)) {, +			String forwardedToUse = StringUtils.commaDelimitedListToStringArray(forwardedHeader)[0];, +			Matcher matcher = FORWARDED_HOST_PATTERN.matcher(forwardedToUse);, +			if (matcher.find()) {, +				host(matcher.group(1).trim());, +			}, +			matcher = FORWARDED_PROTO_PATTERN.matcher(forwardedToUse);, +			if (matcher.find()) {, +				scheme(matcher.group(1).trim());, +			}, +		}, +		else {, +			String hostHeader = headers.getFirst("X-Forwarded-Host");, +			if (StringUtils.hasText(hostHeader)) {, +				String[] hosts = StringUtils.commaDelimitedListToStringArray(hostHeader);, +				String hostToUse = hosts[0];, +				if (hostToUse.contains(":")) {, +					String[] hostAndPort = StringUtils.split(hostToUse, ":");, +					host(hostAndPort[0]);, +					port(Integer.parseInt(hostAndPort[1]));, +				}, +				else {, +					host(hostToUse);, +					port(null);, +				}, +			}, +, +			String portHeader = headers.getFirst("X-Forwarded-Port");, +			if (StringUtils.hasText(portHeader)) {, +				String[] ports = StringUtils.commaDelimitedListToStringArray(portHeader);, +				port(Integer.parseInt(ports[0]));, +			}, +, +			String protocolHeader = headers.getFirst("X-Forwarded-Proto");, +			if (StringUtils.hasText(protocolHeader)) {, +				String[] protocols = StringUtils.commaDelimitedListToStringArray(protocolHeader);, +				scheme(protocols[0]);, +			}, +		}, +, +		if ((this.scheme.equals("http") && "80".equals(this.port)) ||, +				(this.scheme.equals("https") && "443".equals(this.port))) {, +			this.port = null;, +		}, +, +		return this;, +	}, +, +	private void resetHierarchicalComponents() {, +		this.userInfo = null;, +		this.host = null;, +		this.port = null;, +		this.pathBuilder = new CompositePathComponentBuilder();, +		this.queryParams.clear();, +	}, +, +	private void resetSchemeSpecificPart() {, +		this.ssp = null;, +	}, +, +, +	/**, +	 * Public declaration of Object's {@code clone()} method., +	 * Delegates to {@link #cloneBuilder()}., +	 * @see Object#clone(), +	 */, +		return cloneBuilder();, +	}, +, +	/**, +	 * Clone this {@code UriComponentsBuilder}., +	 * @return the cloned {@code UriComponentsBuilder} object, +	 * @since 4.3, +	 */, +	public UriComponentsBuilder cloneBuilder() {, +	private interface PathComponentBuilder {, +		PathComponentBuilder cloneBuilder();, +		public CompositePathComponentBuilder cloneBuilder() {, +				compositeBuilder.builders.add(builder.cloneBuilder());, +		public FullPathComponentBuilder cloneBuilder() {, +		public PathSegmentComponentBuilder cloneBuilder() {]