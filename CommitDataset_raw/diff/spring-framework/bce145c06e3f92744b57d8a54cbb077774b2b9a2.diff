[+++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java, +				config = createRequestConfig(client);, +	 * Create a default {@link RequestConfig} to use with the given client. Can, +	 * return {@code null} to indicate that no custom request config should be set, +	 * and the defaults of the {@link HttpClient} should be used., +	 * <p>The default implementation tries to merge the defaults of the client with the, +	 * local customizations of this instance, if any., +	 * @param client the client, +	 * @return the RequestConfig to use, +	 */, +	protected RequestConfig createRequestConfig(CloseableHttpClient client) {, +		if (client instanceof Configurable) {, +			RequestConfig clientRequestConfig = ((Configurable) client).getConfig();, +			return mergeRequestConfig(clientRequestConfig);, +		}, +		return this.requestConfig;, +	}, +, +	private RequestConfig mergeRequestConfig(RequestConfig defaultRequestConfig) {, +		if (this.requestConfig == null) { // nothing to merge, +			return defaultRequestConfig;, +		}, +		RequestConfig.Builder builder = RequestConfig.copy(defaultRequestConfig);, +		int connectTimeout = this.requestConfig.getConnectTimeout();, +		if (connectTimeout >= 0) {, +			builder.setConnectTimeout(connectTimeout);, +		}, +		int connectionRequestTimeout = this.requestConfig.getConnectionRequestTimeout();, +		if (connectionRequestTimeout >= 0) {, +			builder.setConnectionRequestTimeout(connectionRequestTimeout);, +		}, +		int socketTimeout = this.requestConfig.getSocketTimeout();, +		if (socketTimeout >= 0) {, +			builder.setSocketTimeout(socketTimeout);, +		}, +		return builder.build();, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java, +				config = createRequestConfig(client);, +	 * Create a default {@link RequestConfig} to use with the given client. Can, +	 * return {@code null} to indicate that no custom request config should be set, +	 * and the defaults of the {@link HttpClient} should be used., +	 * <p>The default implementation tries to merge the defaults of the client with the, +	 * local customizations of this instance, if any., +	 * @param client the client, +	 * @return the RequestConfig to use, +	 */, +	protected RequestConfig createRequestConfig(CloseableHttpClient client) {, +		if (client instanceof Configurable) {, +			RequestConfig clientRequestConfig = ((Configurable) client).getConfig();, +			return mergeRequestConfig(clientRequestConfig);, +		}, +		return this.requestConfig;, +	}, +, +	private RequestConfig mergeRequestConfig(RequestConfig defaultRequestConfig) {, +		if (this.requestConfig == null) { // nothing to merge, +			return defaultRequestConfig;, +		}, +		RequestConfig.Builder builder = RequestConfig.copy(defaultRequestConfig);, +		int connectTimeout = this.requestConfig.getConnectTimeout();, +		if (connectTimeout >= 0) {, +			builder.setConnectTimeout(connectTimeout);, +		}, +		int connectionRequestTimeout = this.requestConfig.getConnectionRequestTimeout();, +		if (connectionRequestTimeout >= 0) {, +			builder.setConnectionRequestTimeout(connectionRequestTimeout);, +		}, +		int socketTimeout = this.requestConfig.getSocketTimeout();, +		if (socketTimeout >= 0) {, +			builder.setSocketTimeout(socketTimeout);, +		}, +		return builder.build();, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpComponentsHttpInvokerRequestExecutor.java, +import org.apache.http.client.methods.Configurable;, +	 * <p>The default implementation tries to merge the defaults of the client with the, +	 * local customizations of the instance, if any., +		HttpClient client = getHttpClient();, +		if (client instanceof Configurable) {, +			RequestConfig clientRequestConfig = ((Configurable) client).getConfig();, +			return mergeRequestConfig(clientRequestConfig);, +		}, +		return this.requestConfig;, +	}, +, +	private RequestConfig mergeRequestConfig(RequestConfig defaultRequestConfig) {, +		if (this.requestConfig == null) { // nothing to merge, +			return defaultRequestConfig;, +		}, +		RequestConfig.Builder builder = RequestConfig.copy(defaultRequestConfig);, +		int connectTimeout = this.requestConfig.getConnectTimeout();, +		if (connectTimeout >= 0) {, +			builder.setConnectTimeout(connectTimeout);, +		}, +		int connectionRequestTimeout = this.requestConfig.getConnectionRequestTimeout();]