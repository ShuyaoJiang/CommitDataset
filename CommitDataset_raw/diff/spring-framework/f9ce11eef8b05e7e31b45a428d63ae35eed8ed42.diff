[+++ b/spring-web/src/main/java/org/springframework/http/ResponseEntity.java, + * Copyright 2002-2015 the original author or authors., + * @author Brian Clozel, +		 * Set the caching directives for the resource, as specified by the, +		 * {@code Cache-Control} header., +		 *, +		 * <p>A {@code CacheControl} instance can be built like, +		 * {@code CacheControl.maxAge(3600).cachePublic().noTransform()}., +		 *, +		 * @param cacheControl the instance that builds cache related HTTP response headers, +		 * @return this builder, +		 * @see <a href="https://tools.ietf.org/html/rfc7234#section-5.2">RFC-7234 Section 5.2</a>, +		 * @since 4.2, +		 */, +		B cacheControl(CacheControl cacheControl);, +, +		/**, +		public BodyBuilder cacheControl(CacheControl cacheControl) {, +			String ccValue = cacheControl.getHeaderValue();, +			if(ccValue != null) {, +				this.headers.setCacheControl(cacheControl.getHeaderValue());, +			}, +			return this;, +		}, +, +		@Override, +++ b/spring-web/src/main/java/org/springframework/http/ResponseEntity.java, + * Copyright 2002-2015 the original author or authors., + * @author Brian Clozel, +		 * Set the caching directives for the resource, as specified by the, +		 * {@code Cache-Control} header., +		 *, +		 * <p>A {@code CacheControl} instance can be built like, +		 * {@code CacheControl.maxAge(3600).cachePublic().noTransform()}., +		 *, +		 * @param cacheControl the instance that builds cache related HTTP response headers, +		 * @return this builder, +		 * @see <a href="https://tools.ietf.org/html/rfc7234#section-5.2">RFC-7234 Section 5.2</a>, +		 * @since 4.2, +		 */, +		B cacheControl(CacheControl cacheControl);, +, +		/**, +		public BodyBuilder cacheControl(CacheControl cacheControl) {, +			String ccValue = cacheControl.getHeaderValue();, +			if(ccValue != null) {, +				this.headers.setCacheControl(cacheControl.getHeaderValue());, +			}, +			return this;, +		}, +, +		@Override, +++ b/spring-web/src/test/java/org/springframework/http/ResponseEntityTests.java, +import java.util.concurrent.TimeUnit;, +import org.hamcrest.Matchers;, +, +	@Test, +	public void emptyCacheControl() {, +, +		Integer entity = new Integer(42);, +, +		ResponseEntity<Integer> responseEntity =, +				ResponseEntity.status(HttpStatus.OK), +						.cacheControl(CacheControl.empty()), +						.body(entity);, +, +		assertNotNull(responseEntity);, +		assertEquals(HttpStatus.OK, responseEntity.getStatusCode());, +		assertFalse(responseEntity.getHeaders().containsKey(HttpHeaders.CACHE_CONTROL));, +		assertEquals(entity, responseEntity.getBody());, +	}, +, +	@Test, +	public void cacheControl() {, +, +		Integer entity = new Integer(42);, +, +		ResponseEntity<Integer> responseEntity =, +				ResponseEntity.status(HttpStatus.OK), +						.cacheControl(CacheControl.maxAge(1, TimeUnit.HOURS).cachePrivate()., +								mustRevalidate().proxyRevalidate().sMaxAge(30, TimeUnit.MINUTES)), +						.body(entity);, +, +		assertNotNull(responseEntity);, +		assertEquals(HttpStatus.OK, responseEntity.getStatusCode());, +		assertTrue(responseEntity.getHeaders().containsKey(HttpHeaders.CACHE_CONTROL));, +		assertEquals(entity, responseEntity.getBody());, +		String cacheControlHeader = responseEntity.getHeaders().getCacheControl();, +		assertThat(cacheControlHeader, Matchers.equalTo("max-age=3600, must-revalidate, private, proxy-revalidate, s-maxage=1800"));, +	}, +, +	@Test, +	public void cacheControlNoCache() {, +, +		Integer entity = new Integer(42);, +, +		ResponseEntity<Integer> responseEntity =, +				ResponseEntity.status(HttpStatus.OK), +						.cacheControl(CacheControl.noStore()), +						.body(entity);]