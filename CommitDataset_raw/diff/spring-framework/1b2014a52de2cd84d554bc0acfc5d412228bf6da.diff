[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/AbstractAdvisingBeanPostProcessor.java, +public abstract class AbstractAdvisingBeanPostProcessor extends ProxyProcessorSupport implements BeanPostProcessor {, +			ProxyFactory proxyFactory = new ProxyFactory();, +			proxyFactory.setTarget(bean);, +			if (!proxyFactory.isProxyTargetClass()) {, +				evaluateProxyInterfaces(bean.getClass(), proxyFactory);, +			}, +			return proxyFactory.getProxy(getProxyClassLoader());, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/AbstractAdvisingBeanPostProcessor.java, +public abstract class AbstractAdvisingBeanPostProcessor extends ProxyProcessorSupport implements BeanPostProcessor {, +			ProxyFactory proxyFactory = new ProxyFactory();, +			proxyFactory.setTarget(bean);, +			if (!proxyFactory.isProxyTargetClass()) {, +				evaluateProxyInterfaces(bean.getClass(), proxyFactory);, +			}, +			return proxyFactory.getProxy(getProxyClassLoader());, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyProcessorSupport.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.aop.framework;, +, +import org.springframework.beans.factory.Aware;, +import org.springframework.beans.factory.BeanClassLoaderAware;, +import org.springframework.beans.factory.DisposableBean;, +import org.springframework.beans.factory.InitializingBean;, +import org.springframework.core.Ordered;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.ObjectUtils;, +, +/**, + * Base class with common functionality for proxy processors, in particular, + * ClassLoader management and the {@link #evaluateProxyInterfaces} algorithm., + *, + * @author Juergen Hoeller, + * @since 4.1, + * @see AbstractAdvisingBeanPostProcessor, + * @see org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator, + */, +@SuppressWarnings("serial"), +public class ProxyProcessorSupport extends ProxyConfig implements Ordered, BeanClassLoaderAware, AopInfrastructureBean {, +, +	/**, +	 * This should run after all other processors, so that it can just add, +	 * an advisor to existing proxies rather than double-proxy., +	 */, +	private int order = Ordered.LOWEST_PRECEDENCE;, +, +	private ClassLoader proxyClassLoader = ClassUtils.getDefaultClassLoader();, +, +	private boolean classLoaderConfigured = false;, +, +, +	/**, +	 * Set the ordering which will apply to this class's implementation, +	 * of Ordered, used when applying multiple processors., +	 * <p>Default value is {@code Integer.MAX_VALUE}, meaning that it's non-ordered., +	 * @param order ordering value, +	 */, +	public void setOrder(int order) {, +		this.order = order;, +	}, +, +	@Override, +	public int getOrder() {, +		return this.order;, +	}, +, +	/**, +	 * Set the ClassLoader to generate the proxy class in., +	 * <p>Default is the bean ClassLoader, i.e. the ClassLoader used by the, +	 * containing BeanFactory for loading all bean classes. This can be, +	 * overridden here for specific proxies., +	 */, +	public void setProxyClassLoader(ClassLoader classLoader) {, +		this.proxyClassLoader = classLoader;, +		this.classLoaderConfigured = (classLoader != null);, +	}, +, +	/**, +	 * Return the configured proxy ClassLoader for this processor., +	 */, +	protected ClassLoader getProxyClassLoader() {, +		return this.proxyClassLoader;, +	}, +, +	@Override]