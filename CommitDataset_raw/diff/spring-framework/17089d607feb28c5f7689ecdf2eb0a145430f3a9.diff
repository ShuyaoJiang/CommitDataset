[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java, +import org.springframework.web.servlet.mvc.support.RedirectAttributes;, +import org.springframework.web.servlet.support.RequestContextUtils;, +		resolvers.add(new RedirectAttributesMethodArgumentResolver());, +			if (model instanceof RedirectAttributes) {, +				Map<String, ?> flashAttributes = ((RedirectAttributes) model).getFlashAttributes();, +				request = webRequest.getNativeRequest(HttpServletRequest.class);, +				RequestContextUtils.getOutputFlashMap(request).putAll(flashAttributes);, +			}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java, +import org.springframework.web.servlet.mvc.support.RedirectAttributes;, +import org.springframework.web.servlet.support.RequestContextUtils;, +		resolvers.add(new RedirectAttributesMethodArgumentResolver());, +			if (model instanceof RedirectAttributes) {, +				Map<String, ?> flashAttributes = ((RedirectAttributes) model).getFlashAttributes();, +				request = webRequest.getNativeRequest(HttpServletRequest.class);, +				RequestContextUtils.getOutputFlashMap(request).putAll(flashAttributes);, +			}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RedirectAttributesMethodArgumentResolver.java, +		ModelMap redirectAttributes;, +		if(binderFactory != null) {, +			redirectAttributes  = new RedirectAttributesModelMap(dataBinder);, +		}, +		else {, +			redirectAttributes  = new RedirectAttributesModelMap();, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java, +import org.springframework.web.servlet.mvc.support.RedirectAttributes;, +import org.springframework.web.servlet.support.RequestContextUtils;, +		resolvers.add(new RedirectAttributesMethodArgumentResolver());, +			if (model instanceof RedirectAttributes) {, +				Map<String, ?> flashAttributes = ((RedirectAttributes) model).getFlashAttributes();, +				request = webRequest.getNativeRequest(HttpServletRequest.class);, +				RequestContextUtils.getOutputFlashMap(request).putAll(flashAttributes);, +			}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RedirectAttributesMethodArgumentResolver.java, +		ModelMap redirectAttributes;, +		if(binderFactory != null) {, +			redirectAttributes  = new RedirectAttributesModelMap(dataBinder);, +		}, +		else {, +			redirectAttributes  = new RedirectAttributesModelMap();, +		}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolverTests.java, +import org.springframework.web.servlet.DispatcherServlet;, +import org.springframework.web.servlet.FlashMap;, +import org.springframework.web.servlet.mvc.support.RedirectAttributes;, + * @author Brian Clozel, +		this.request.setAttribute(DispatcherServlet.OUTPUT_FLASH_MAP_ATTRIBUTE, new FlashMap());, +	@Test  // SPR-14651, +	public void resolveRedirectAttributesAtArgument() throws Exception {, +		IllegalArgumentException ex = new IllegalArgumentException();, +		HandlerMethod handlerMethod = new HandlerMethod(new RedirectAttributesController(), "handle");, +		this.resolver.afterPropertiesSet();, +		ModelAndView mav = this.resolver.resolveException(this.request, this.response, handlerMethod, ex);, +, +		assertNotNull(mav);, +		assertEquals("redirect:/", mav.getViewName());, +		FlashMap flashMap = (FlashMap) this.request.getAttribute(DispatcherServlet.OUTPUT_FLASH_MAP_ATTRIBUTE);, +		assertNotNull("output FlashMap should exist", flashMap);, +		assertEquals("IllegalArgumentException", flashMap.get("exceptionClassName"));, +	}, +, +	@Controller, +	static class RedirectAttributesController {, +, +		public void handle() {}, +, +		@ExceptionHandler, +		public String handleException(Exception ex, RedirectAttributes redirectAttributes) {, +			redirectAttributes.addFlashAttribute("exceptionClassName", ClassUtils.getShortName(ex.getClass()));, +			return "redirect:/";, +		}, +	}, +]