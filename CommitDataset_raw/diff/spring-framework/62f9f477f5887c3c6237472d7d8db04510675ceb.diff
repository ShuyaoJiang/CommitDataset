[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +			if (getMessageConverters() != null) {, +					for (HttpMessageConverter messageConverter : getMessageConverters()) {, +				for (HttpMessageConverter messageConverter : messageConverters) {, +					allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes());, +				}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +			if (getMessageConverters() != null) {, +					for (HttpMessageConverter messageConverter : getMessageConverters()) {, +				for (HttpMessageConverter messageConverter : messageConverters) {, +					allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes());, +				}, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +import java.util.ArrayList;, +		request.addHeader("Accept", "text/*, */*");, +				adapterDef.getPropertyValues().add("messageConverters", new NotReadableMessageConverter());, +	/*, +	 * See SPR-6877, +	 */, +	@Test, +	public void overlappingMesssageConvertersRequestBody() throws ServletException, IOException {, +		@SuppressWarnings("serial") DispatcherServlet servlet = new DispatcherServlet() {, +			@Override, +			protected WebApplicationContext createWebApplicationContext(WebApplicationContext parent) {, +				GenericWebApplicationContext wac = new GenericWebApplicationContext();, +				wac.registerBeanDefinition("controller", new RootBeanDefinition(RequestBodyController.class));, +				RootBeanDefinition adapterDef = new RootBeanDefinition(AnnotationMethodHandlerAdapter.class);, +				List<HttpMessageConverter> messageConverters = new ArrayList<HttpMessageConverter>();, +				messageConverters.add(new StringHttpMessageConverter());, +				messageConverters, +						.add(new SimpleMessageConverter(new MediaType("application","json"), MediaType.ALL));, +				adapterDef.getPropertyValues().add("messageConverters", messageConverters);, +				wac.registerBeanDefinition("handlerAdapter", adapterDef);, +				wac.refresh();, +				return wac;, +			}, +		};, +		servlet.init(new MockServletConfig());, +, +		MockHttpServletRequest request = new MockHttpServletRequest("PUT", "/something");, +		request.setContent("Hello World".getBytes("UTF-8"));, +		request.addHeader("Content-Type", "text/plain; charset=utf-8");, +		request.addHeader("Accept", "application/json, text/javascript, */*");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("Invalid response status code", "application/json", response.getHeader("Content-Type"));, +	}, +, +	public static class NotReadableMessageConverter implements HttpMessageConverter {, +	public static class SimpleMessageConverter implements HttpMessageConverter {, +, +		private final List<MediaType> supportedMediaTypes;, +, +		public SimpleMessageConverter(MediaType... supportedMediaTypes) {, +			this.supportedMediaTypes = Arrays.asList(supportedMediaTypes);, +		}, +, +		public boolean canRead(Class clazz, MediaType mediaType) {, +			return supportedMediaTypes.contains(mediaType);, +		}, +, +		public boolean canWrite(Class clazz, MediaType mediaType) {, +			return supportedMediaTypes.contains(mediaType);, +		}, +, +		public List getSupportedMediaTypes() {, +			return supportedMediaTypes;, +		}, +, +		public Object read(Class clazz, HttpInputMessage inputMessage), +				throws IOException, HttpMessageNotReadableException {, +			return null;, +		}, +, +		public void write(Object o, MediaType contentType, HttpOutputMessage outputMessage), +				throws IOException, HttpMessageNotWritableException {, +			outputMessage.getHeaders().setContentType(contentType);, +		}, +	}, +]