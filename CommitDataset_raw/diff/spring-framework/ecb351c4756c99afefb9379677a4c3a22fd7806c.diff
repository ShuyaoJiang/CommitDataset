[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java, +, +		// check whether a matching resource exists, +			logger.debug("No matching resource found - returning 404");, +, +		// check the resource's media type, +		MediaType mediaType = getMediaType(resource);, +		if (mediaType != null) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("Determined media type [" + mediaType + "] for " + resource);, +			}, +		}, +		else {, +			if (logger.isDebugEnabled()) {, +				logger.debug("No media type found for " + resource + " - returning 404");, +			}, +			response.sendError(HttpServletResponse.SC_NOT_FOUND);, +, +		// header phase, +		setHeaders(response, resource, mediaType);, +		if (new ServletWebRequest(request, response).checkNotModified(resource.lastModified())) {, +			logger.debug("Resource not modified - returning 304");, +			return;, +		}, +, +		// content phase, +		if (METHOD_HEAD.equals(request.getMethod())) {, +			logger.trace("HEAD request - skipping content");, +			return;, +		}, +		writeContent(response, resource);, +, +			if (logger.isDebugEnabled()) {, +				logger.debug("Ignoring invalid resource path [" + path + "]");, +			}, +, +		for (Resource location : this.locations) {, +				if (logger.isDebugEnabled()) {, +					logger.debug("Trying relative path [" + path + "] against base location: " + location);, +				}, +				Resource resource = location.createRelative(path);, +					if (logger.isDebugEnabled()) {, +						logger.debug("Found matching resource: " + resource);, +					}, +				else if (logger.isTraceEnabled()) {, +					logger.trace("Relative resource doesn't exist or isn't readable: " + resource);, +				}, +				logger.debug("Failed to create relative resource - trying next resource location", ex);, +	/**, +	 * Determine an appropriate media type for the given resource., +	 * @param resource the resource to check, +	 * @return the corresponding media type, or <code>null</code> if none found, +	 */, +	/**, +	 * Set headers on the given servlet response., +	 * Called for GET requests as well as HEAD requests., +	 * @param response current servlet response, +	 * @param resource the identified resource (never <code>null</code>), +	 * @param mediaType the resource's media type (never <code>null</code>), +	 * @throws IOException in case of errors while setting the headers, +	 */, +	protected void setHeaders(HttpServletResponse response, Resource resource, MediaType mediaType) throws IOException {, +		long length = resource.contentLength();, +		if (length > Integer.MAX_VALUE) {, +			throw new IOException("Resource content too long (beyond Integer.MAX_VALUE): " + resource);, +		}, +		response.setContentLength((int) length);, +		response.setContentType(mediaType.toString());, +	}, +, +	/**, +	 * Write the actual content out to the given servlet response,, +	 * streaming the resource's content., +	 * @param response current servlet response, +	 * @param resource the identified resource (never <code>null</code>), +	 * @throws IOException in case of errors while writing the content, +	 */, +	protected void writeContent(HttpServletResponse response, Resource resource) throws IOException {]