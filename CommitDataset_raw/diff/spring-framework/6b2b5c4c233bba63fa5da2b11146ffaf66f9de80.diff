[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +, +	private static final String CONFIGURATION_CLASS_FULL = "full";, +	private static final String CONFIGURATION_CLASS_LITE = "lite";, +	private static final String CONFIGURATION_CLASS_ATTRIBUTE =, +, +		}, +		else {, +			}, +			catch (IOException ex) {, +		// has this already been overridden (e.g. via XML)?, +, +	public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {, +	 * Determine whether the given bean definition indicates a full @Configuration class., +	 */, +	public static boolean isFullConfigurationClass(BeanDefinition beanDef) {, +		return CONFIGURATION_CLASS_FULL.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE));, +	}, +, +, +	/**, +	private static class ConfigurationClassBeanDefinition extends RootBeanDefinition implements AnnotatedBeanDefinition {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +, +	private static final String CONFIGURATION_CLASS_FULL = "full";, +	private static final String CONFIGURATION_CLASS_LITE = "lite";, +	private static final String CONFIGURATION_CLASS_ATTRIBUTE =, +, +		}, +		else {, +			}, +			catch (IOException ex) {, +		// has this already been overridden (e.g. via XML)?, +, +	public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {, +	 * Determine whether the given bean definition indicates a full @Configuration class., +	 */, +	public static boolean isFullConfigurationClass(BeanDefinition beanDef) {, +		return CONFIGURATION_CLASS_FULL.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE));, +	}, +, +, +	/**, +	private static class ConfigurationClassBeanDefinition extends RootBeanDefinition implements AnnotatedBeanDefinition {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;, +public class ConfigurationClassPostProcessor implements BeanDefinitionRegistryPostProcessor, BeanClassLoaderAware {, +	 * Derive further bean definitions from the configuration classes in the registry., +	 */, +	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {, +		processConfigBeanDefinitions(registry);, +	}, +, +	/**, +		ConfigurationClassBeanDefinitionReader reader = new ConfigurationClassBeanDefinitionReader(, +				registry, this.sourceExtractor, this.problemReporter, this.metadataReaderFactory);, +			if (ConfigurationClassBeanDefinitionReader.isFullConfigurationClass(beanDef)) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +, +	private static final String CONFIGURATION_CLASS_FULL = "full";, +	private static final String CONFIGURATION_CLASS_LITE = "lite";, +	private static final String CONFIGURATION_CLASS_ATTRIBUTE =, +, +		}, +		else {, +			}, +			catch (IOException ex) {, +		// has this already been overridden (e.g. via XML)?, +, +	public static boolean checkConfigurationClassCandidate(BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {, +	 * Determine whether the given bean definition indicates a full @Configuration class., +	 */, +	public static boolean isFullConfigurationClass(BeanDefinition beanDef) {, +		return CONFIGURATION_CLASS_FULL.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE));, +	}, +, +, +	/**, +	private static class ConfigurationClassBeanDefinition extends RootBeanDefinition implements AnnotatedBeanDefinition {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;, +public class ConfigurationClassPostProcessor implements BeanDefinitionRegistryPostProcessor, BeanClassLoaderAware {, +	 * Derive further bean definitions from the configuration classes in the registry., +	 */, +	public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {, +		processConfigBeanDefinitions(registry);, +	}, +, +	/**, +		ConfigurationClassBeanDefinitionReader reader = new ConfigurationClassBeanDefinitionReader(, +				registry, this.sourceExtractor, this.problemReporter, this.metadataReaderFactory);, +			if (ConfigurationClassBeanDefinitionReader.isFullConfigurationClass(beanDef)) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.beans.factory.support.BeanDefinitionRegistry;, +import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;, +		// Invoke BeanDefinitionRegistryPostProcessors first, if any., +		if (beanFactory instanceof BeanDefinitionRegistry) {, +			BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;, +			for (BeanFactoryPostProcessor postProcessor : getBeanFactoryPostProcessors()) {]