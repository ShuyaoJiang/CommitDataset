[+++ b/spring-framework-reference/src/mvc.xml, +    complete abstraction of the view technology. You can integrate directly with , +    template based rendering technologies such as JSP, Velocity and Freemarker, , +    or directly generate XML, JSON, Atom, and many other types of content. , +      <title>Mapping Requests With, +        <title>URI Template Patterns</title>, +        <title>Path Patterns</title>, +        <title>Consumable Media Types</title>, +        <title>Producible Media Types</title>, +        <title>Request Parameters and Header Values</title>, +    </section>, +    <section id="mvc-ann-methods">, +      <title>Defining <interface>@RequestMapping</interface> handler methods</title>, +      <para>An <classname>@RequestMapping</classname> handler method can have a very flexible, +        signatures. The supported method arguments and return values are described in the, +        following section. Most arguments can be used in arbitrary order with the only , +        exception of <classname>BindingResult</classname> arguments. This is described , +        in the next section., +      </para>, +      <section id="mvc-ann-arguments">, +        <title>Supported method argument types</title>, +        <para>The following are the supported method arguments:, +          <itemizedlist>, +      </section>, +      <section id="mvc-ann-return-types">, +        <title>Supported method return types</title>, +, +        <para>The following are the supported return types:, +          </itemizedlist>, +        </para>, +        The <classname>RequestMappingHandlerAdapter</classname> supports the , +        <classname>@RequestBody</classname> annotation with the following default , +        <interfacename>HttpMessageConverters</interfacename>:</para>, +        linkend="rest-message-conversion">Message Converters</link>. Also note, +        that if using the MVC namespace, a wider range of message converters , +        are registered by default. See <xref linkend="mvc-annotation-driven"/> , +        for more information.</para>, +        <para>If you intend to read and write XML, you will need to configure the , +        <classname>MarshallingHttpMessageConverter</classname> with a , +        specific <interfacename>Marshaller</interfacename> and , +        an <interfacename>Unmarshaller</interfacename> implementation from the, +        <classname>org.springframework.oxm</classname> package., +        For example:</para>, +        <programlisting language="xml">&lt;bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"&gt;, +, +        <note>, +          <para> Also see <xref linkend="mvc-annotation-driven"/> for information on , +          configuring message converters through the MVC namespace.</para>, +        </note>, +        <para>The above example gets the value of the <literal>MyRequestHeader</literal> request, +        header, and reads the body as a byte array. It adds the <literal>MyResponseHeader</literal>, +        <title>Command and Form Objects</title>, +        <para>The <classname>@ModelAttribute</classname> annotation is central to , +        working with command and form objects. It has a couple of usage scenarios, +        described in this section., +        </para>, +        <para>The main scenario is using <classname>@ModelAttribute</classname> on, +        a method parameter in order to get access to data received from a form submission, +        or from request parameters. For example an object of type , +        <classname>Person</classname> with fields <literal>firstName</literal>, +        and <literal>lastName</literal> will be populated accordingly assuming, +        the presence of either form or query string parameters with matching names:, +        e.g. <literal>firstName=Rod</literal> and <literal>lastName=Johnson</literal>., +        Below is an example of a <classname>@ModelAttribute</classname>-annotated , +        method parameter.</para>, +        <programlisting language="java">@Controller, +@RequestMapping("/owners/{ownerId}/pets/{petId}/edit"), +@SessionAttributes("pet"), +public class EditPetForm {, +    @RequestMapping(method = RequestMethod.POST), +    public String processSubmit(, +            <emphasis role="bold">@ModelAttribute("pet") Pet pet</emphasis>,, +            BindingResult result, SessionStatus status) {, +, +    }, +, +}</programlisting>, +, +        <para>Before invoking the method, Spring MVC will create a <classname>Pet</classname> , +        instance, populate it using request parameters, and also add it to the model , +        under the name <literal>pet</literal>., +        The <classname>Pet</classname> instance may have been created using the, +        default constructor (if available), it may have been obtained from the HTTP session in, +        conjunction with use of <classname>@SessionAttributes</classname> (see the next section), or, +        it may have been created by another <classname>@ModelAttribute</classname>-annotated method , +        in the same class. A <classname>@ModelAttribute</classname>-annotated method , +        is the second scenario for using the annotation.</para>, +        , +        <para>When used at the method level a <classname>@ModelAttribute</classname> , +        contributes one or more objects to the model. See the <literal>populatePetTypes()</literal> , +        method in the following example:</para>, +, +        <para><classname>@ModelAttribute</classname> methods are, +        executed <emphasis>before</emphasis> the chosen, +        <classname>@RequestMapping</classname> annotated handler method., +        They effectively pre-populate the model with specific, +        attributes, often loaded from a database. Such an attribute can then, +        be accessed through a <classname>@ModelAttribute</classname>-annotated, +        <classname>@RequestMapping</classname> parameter., +        An <classname>@ModelAttribute</classname> method can contain the same ]