[+++ b/spring-context/src/test/java/org/springframework/context/annotation/BeanMethodPolymorphismTests.java, +import org.springframework.beans.factory.support.RootBeanDefinition;, +	public void beanMethodOverridingOnASM() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.registerBeanDefinition("config", new RootBeanDefinition(OverridingConfig.class.getName()));, +		ctx.setAllowBeanDefinitionOverriding(false);, +		ctx.refresh();, +		assertFalse(ctx.getDefaultListableBeanFactory().containsSingleton("testBean"));, +		assertEquals("overridden", ctx.getBean("testBean", TestBean.class).toString());, +		assertTrue(ctx.getDefaultListableBeanFactory().containsSingleton("testBean"));, +	}, +, +	@Test, +	public void beanMethodOverridingWithNarrowedReturnType() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(NarrowedOverridingConfig.class);, +		ctx.setAllowBeanDefinitionOverriding(false);, +		ctx.refresh();, +		assertFalse(ctx.getDefaultListableBeanFactory().containsSingleton("testBean"));, +		assertEquals("overridden", ctx.getBean("testBean", TestBean.class).toString());, +		assertTrue(ctx.getDefaultListableBeanFactory().containsSingleton("testBean"));, +	}, +, +	@Test, +	public void beanMethodOverridingWithNarrowedReturnTypeOnASM() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.registerBeanDefinition("config", new RootBeanDefinition(NarrowedOverridingConfig.class.getName()));, +		ctx.setAllowBeanDefinitionOverriding(false);, +		ctx.refresh();, +		assertFalse(ctx.getDefaultListableBeanFactory().containsSingleton("testBean"));, +		assertEquals("overridden", ctx.getBean("testBean", TestBean.class).toString());, +		assertTrue(ctx.getDefaultListableBeanFactory().containsSingleton("testBean"));, +	}, +, +	@Test, +	static class ExtendedTestBean extends TestBean {, +	}, +, +, +	@Configuration, +	static class NarrowedOverridingConfig extends BaseConfig {, +, +		@Bean @Lazy, +		@Override, +		public ExtendedTestBean testBean() {, +			return new ExtendedTestBean() {, +				@Override, +				public String toString() {, +					return "overridden";, +				}, +			};, +		}, +	}, +, +, +++ b/spring-context/src/test/java/org/springframework/context/annotation/BeanMethodPolymorphismTests.java, +import org.springframework.beans.factory.support.RootBeanDefinition;, +	public void beanMethodOverridingOnASM() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.registerBeanDefinition("config", new RootBeanDefinition(OverridingConfig.class.getName()));, +		ctx.setAllowBeanDefinitionOverriding(false);, +		ctx.refresh();, +		assertFalse(ctx.getDefaultListableBeanFactory().containsSingleton("testBean"));, +		assertEquals("overridden", ctx.getBean("testBean", TestBean.class).toString());, +		assertTrue(ctx.getDefaultListableBeanFactory().containsSingleton("testBean"));, +	}, +, +	@Test, +	public void beanMethodOverridingWithNarrowedReturnType() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(NarrowedOverridingConfig.class);, +		ctx.setAllowBeanDefinitionOverriding(false);, +		ctx.refresh();, +		assertFalse(ctx.getDefaultListableBeanFactory().containsSingleton("testBean"));, +		assertEquals("overridden", ctx.getBean("testBean", TestBean.class).toString());, +		assertTrue(ctx.getDefaultListableBeanFactory().containsSingleton("testBean"));, +	}, +, +	@Test, +	public void beanMethodOverridingWithNarrowedReturnTypeOnASM() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.registerBeanDefinition("config", new RootBeanDefinition(NarrowedOverridingConfig.class.getName()));, +		ctx.setAllowBeanDefinitionOverriding(false);, +		ctx.refresh();, +		assertFalse(ctx.getDefaultListableBeanFactory().containsSingleton("testBean"));, +		assertEquals("overridden", ctx.getBean("testBean", TestBean.class).toString());, +		assertTrue(ctx.getDefaultListableBeanFactory().containsSingleton("testBean"));, +	}, +, +	@Test, +	static class ExtendedTestBean extends TestBean {, +	}, +, +, +	@Configuration, +	static class NarrowedOverridingConfig extends BaseConfig {, +, +		@Bean @Lazy, +		@Override, +		public ExtendedTestBean testBean() {]