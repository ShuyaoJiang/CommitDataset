[+++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBuilder.java, +import javax.persistence.AttributeConverter;, +	private static final TypeFilter[] DEFAULT_ENTITY_TYPE_FILTERS = new TypeFilter[] {, +			new AnnotationTypeFilter(Entity.class, false),, +			new AnnotationTypeFilter(Embeddable.class, false),, +			new AnnotationTypeFilter(MappedSuperclass.class, false)};, +, +	private static TypeFilter converterTypeFilter;, +			converterTypeFilter = new AnnotationTypeFilter(converterAnnotation, false);, +	private TypeFilter[] entityTypeFilters = DEFAULT_ENTITY_TYPE_FILTERS;, +, +		Set<String> entityClassNames = new TreeSet<String>();, +		Set<String> converterClassNames = new TreeSet<String>();, +							entityClassNames.add(className);, +						}, +						else if (converterTypeFilter != null && converterTypeFilter.match(reader, readerFactory)) {, +							converterClassNames.add(className);, +			ClassLoader cl = this.resourcePatternResolver.getClassLoader();, +			for (String className : entityClassNames) {, +				addAnnotatedClass(cl.loadClass(className));, +			}, +			for (String className : converterClassNames) {, +				ConverterRegistrationDelegate.registerConverter(this, cl.loadClass(className));, +, +	/**, +	 * Inner class to avoid hard dependency on JPA 2.1 / Hibernate 4.3., +	 */, +	private static class ConverterRegistrationDelegate {, +, +		@SuppressWarnings("unchecked"), +		public static void registerConverter(Configuration config, Class<?> converterClass) {, +			config.addAttributeConverter((Class<? extends AttributeConverter<?, ?>>) converterClass);, +		}, +	}, +]