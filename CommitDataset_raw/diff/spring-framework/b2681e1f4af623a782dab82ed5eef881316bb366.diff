[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/ViewResolverRegistry.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.web.reactive.result.view.script.ScriptTemplateConfigurer;, +import org.springframework.web.reactive.result.view.script.ScriptTemplateViewResolver;, + * @author Sebastien Deleuze, +	 * Register a script template view resolver with an empty default view name prefix and suffix., +	 * <p><strong>Note</strong> that you must also configure script templating by, +	 * adding a {@link ScriptTemplateConfigurer} bean., +	 * @since 5.0.4, +	 */, +	public UrlBasedViewResolverRegistration scriptTemplate() {, +		if (!checkBeanOfType(ScriptTemplateConfigurer.class)) {, +			throw new BeanInitializationException("In addition to a script template view resolver " +, +					"there must also be a single ScriptTemplateConfig bean in this web application context " +, +					"(or its parent): ScriptTemplateConfigurer is the usual implementation. " +, +					"This bean may be given any name.");, +		}, +		ScriptRegistration registration = new ScriptRegistration();, +		UrlBasedViewResolver resolver = registration.getViewResolver();, +		if (this.applicationContext != null) {, +			resolver.setApplicationContext(this.applicationContext);, +		}, +		this.viewResolvers.add(resolver);, +		return registration;, +	}, +, +	/**, +	private static class ScriptRegistration extends UrlBasedViewResolverRegistration {, +, +		public ScriptRegistration() {, +			super(new ScriptTemplateViewResolver());, +			getViewResolver();, +		}, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/ViewResolverRegistry.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.web.reactive.result.view.script.ScriptTemplateConfigurer;, +import org.springframework.web.reactive.result.view.script.ScriptTemplateViewResolver;, + * @author Sebastien Deleuze, +	 * Register a script template view resolver with an empty default view name prefix and suffix., +	 * <p><strong>Note</strong> that you must also configure script templating by, +	 * adding a {@link ScriptTemplateConfigurer} bean., +	 * @since 5.0.4, +	 */, +	public UrlBasedViewResolverRegistration scriptTemplate() {, +		if (!checkBeanOfType(ScriptTemplateConfigurer.class)) {, +			throw new BeanInitializationException("In addition to a script template view resolver " +, +					"there must also be a single ScriptTemplateConfig bean in this web application context " +, +					"(or its parent): ScriptTemplateConfigurer is the usual implementation. " +, +					"This bean may be given any name.");, +		}, +		ScriptRegistration registration = new ScriptRegistration();, +		UrlBasedViewResolver resolver = registration.getViewResolver();, +		if (this.applicationContext != null) {, +			resolver.setApplicationContext(this.applicationContext);, +		}, +		this.viewResolvers.add(resolver);, +		return registration;, +	}, +, +	/**, +	private static class ScriptRegistration extends UrlBasedViewResolverRegistration {, +, +		public ScriptRegistration() {, +			super(new ScriptTemplateViewResolver());, +			getViewResolver();, +		}, +	}, +, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/config/ViewResolverRegistryTests.java, + * Copyright 2002-2018 the original author or authors., +import java.util.List;, +, +import org.springframework.beans.DirectFieldAccessor;, +import org.springframework.web.reactive.result.view.ViewResolver;, +import org.springframework.web.reactive.result.view.script.ScriptTemplateConfigurer;, +import org.springframework.web.reactive.result.view.script.ScriptTemplateViewResolver;, + * @author Sebastien Deleuze, +		context.registerSingleton("scriptTemplateConfigurer", ScriptTemplateConfigurer.class);, +	@Test  // SPR-16431, +	public void scriptTemplate() {, +		this.registry.scriptTemplate().prefix("/").suffix(".html");, +, +		List<ViewResolver> viewResolvers = this.registry.getViewResolvers();, +		assertEquals(1, viewResolvers.size());, +		assertEquals(ScriptTemplateViewResolver.class, viewResolvers.get(0).getClass());, +		DirectFieldAccessor accessor =  new DirectFieldAccessor(viewResolvers.get(0));, +		assertEquals("/", accessor.getPropertyValue("prefix"));, +		assertEquals(".html", accessor.getPropertyValue("suffix"));, +	}, +]