[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/HandlerResultHandlerSupport.java, +		MediaType selected = null;, +				selected = mediaType;, +				break;, +				selected = MediaType.APPLICATION_OCTET_STREAM;, +				break;, +		if (selected != null) {, +				logger.debug("Using '" + selected + "' given " +, +						acceptableTypes + " and supported " + producibleTypes);, +			}, +		}, +		else if (logger.isDebugEnabled()) {, +		return selected;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/HandlerResultHandlerSupport.java, +		MediaType selected = null;, +				selected = mediaType;, +				break;, +				selected = MediaType.APPLICATION_OCTET_STREAM;, +				break;, +		if (selected != null) {, +				logger.debug("Using '" + selected + "' given " +, +						acceptableTypes + " and supported " + producibleTypes);, +			}, +		}, +		else if (logger.isDebugEnabled()) {, +		return selected;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +		MediaType selectedMediaType = null;, +			selectedMediaType = contentType;, +			List<MediaType> acceptableTypes = getAcceptableMediaTypes(request);, +			List<MediaType> producibleTypes = getProducibleMediaTypes(request, valueType, targetType);, +			if (body != null && producibleTypes.isEmpty()) {, +			List<MediaType> mediaTypesToUse = new ArrayList<>();, +			for (MediaType requestedType : acceptableTypes) {, +				for (MediaType producibleType : producibleTypes) {, +					throw new HttpMediaTypeNotAcceptableException(producibleTypes);, +				}, +				if (logger.isDebugEnabled()) {, +					logger.debug("No match for " + acceptableTypes + ", supported: " + producibleTypes);, +			MediaType.sortBySpecificityAndQuality(mediaTypesToUse);, +, +				logger.debug("Using '" + selectedMediaType + "', given " +, +						acceptableTypes + " and supported " + producibleTypes);, +			}]