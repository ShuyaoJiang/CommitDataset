[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/Autowire.java, + * Copyright 2002-2009 the original author or authors., +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/Autowire.java, + * Copyright 2002-2009 the original author or authors., +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +	private Class<? extends Annotation>[] autowiredAnnotationTypes = new Class[] {Autowired.class, Value.class};, +				Object value;, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/Autowire.java, + * Copyright 2002-2009 the original author or authors., +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +	private Class<? extends Annotation>[] autowiredAnnotationTypes = new Class[] {Autowired.class, Value.class};, +				Object value;, +++ /dev/null, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/Autowire.java, + * Copyright 2002-2009 the original author or authors., +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +	private Class<? extends Annotation>[] autowiredAnnotationTypes = new Class[] {Autowired.class, Value.class};, +				Object value;, +++ /dev/null, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, +import java.lang.reflect.Method;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +		if (match) {, +			MethodParameter methodParam = descriptor.getMethodParameter();, +			if (methodParam != null) {, +				Method method = methodParam.getMethod();, +				if (method == null || void.class.equals(method.getReturnType())) {, +					match = checkQualifiers(bdHolder, methodParam.getAnnotations());, +				}, +			}, +		RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition();, +		if (qualifier == null) {, +			Annotation targetAnnotation = null;, +			if (bd.getFactoryMethodForIntrospection() != null) {, +				targetAnnotation = bd.getFactoryMethodForIntrospection().getAnnotation(type);, +			}, +			if (targetAnnotation == null && bd.hasBeanClass()) {, +				targetAnnotation = beanClass.getAnnotation(type);, +			}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/Autowire.java, + * Copyright 2002-2009 the original author or authors., +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +	private Class<? extends Annotation>[] autowiredAnnotationTypes = new Class[] {Autowired.class, Value.class};, +				Object value;, +++ /dev/null, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, +import java.lang.reflect.Method;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +		if (match) {, +			MethodParameter methodParam = descriptor.getMethodParameter();, +			if (methodParam != null) {, +				Method method = methodParam.getMethod();, +				if (method == null || void.class.equals(method.getReturnType())) {, +					match = checkQualifiers(bdHolder, methodParam.getAnnotations());, +				}, +			}, +		RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition();, +		if (qualifier == null) {, +			Annotation targetAnnotation = null;, +			if (bd.getFactoryMethodForIntrospection() != null) {, +				targetAnnotation = bd.getFactoryMethodForIntrospection().getAnnotation(type);, +			}, +			if (targetAnnotation == null && bd.hasBeanClass()) {, +				targetAnnotation = beanClass.getAnnotation(type);, +			}, +++ /dev/null, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/Autowire.java, + * Copyright 2002-2009 the original author or authors., +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +	private Class<? extends Annotation>[] autowiredAnnotationTypes = new Class[] {Autowired.class, Value.class};, +				Object value;, +++ /dev/null, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, +import java.lang.reflect.Method;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +		if (match) {, +			MethodParameter methodParam = descriptor.getMethodParameter();, +			if (methodParam != null) {, +				Method method = methodParam.getMethod();, +				if (method == null || void.class.equals(method.getReturnType())) {, +					match = checkQualifiers(bdHolder, methodParam.getAnnotations());, +				}, +			}, +		RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition();, +		if (qualifier == null) {, +			Annotation targetAnnotation = null;, +			if (bd.getFactoryMethodForIntrospection() != null) {, +				targetAnnotation = bd.getFactoryMethodForIntrospection().getAnnotation(type);, +			}, +			if (targetAnnotation == null && bd.hasBeanClass()) {, +				targetAnnotation = beanClass.getAnnotation(type);, +			}, +++ /dev/null, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/AutowireCapableBeanFactory.java, + * Copyright 2002-2009 the original author or authors., +	 * @deprecated as of Spring 3.0: If you are using mixed autowiring strategies,, +	 * prefer annotation-based autowiring for clearer demarcation of autowiring needs., +	@Deprecated, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/Autowire.java, + * Copyright 2002-2009 the original author or authors.]