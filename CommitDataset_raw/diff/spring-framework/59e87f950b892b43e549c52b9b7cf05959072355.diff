[+++ b/src/docs/asciidoc/data-access-appendix.adoc, +TIP: We strongly encourage you to look at the `'spring-tx.xsd'` file that ships with the, +attribute defaults and similar information. This file is documented inline, and, thus,, +the information is not repeated here in the interests of adhering to the DRY (Don't, +Repeat Yourself) principle., +NOTE: Often, when you use the elements in the `tx` namespace, you are also using the, +elements from the `aop` namespace (since the declarative transaction support in Spring is, +implemented by using AOP). The preceding XML snippet contains the relevant lines needed, +to reference the `aop` schema so that the elements in the `aop` namespace are available, +to you., +<<data-access.adoc#jdbc-embedded-database-support,Embedded Database Support>> and, +<<data-access.adoc#jdbc-initializing-datasource,Initializing a DataSource>>, respectively., +To use the elements in the `jdbc` schema, you need to have the following preamble at the, +top of your Spring XML configuration file. The text in the following snippet references, +the correct schema so that the elements in the `jdbc` namespace are available to you:, +++ b/src/docs/asciidoc/data-access-appendix.adoc, +TIP: We strongly encourage you to look at the `'spring-tx.xsd'` file that ships with the, +attribute defaults and similar information. This file is documented inline, and, thus,, +the information is not repeated here in the interests of adhering to the DRY (Don't, +Repeat Yourself) principle., +NOTE: Often, when you use the elements in the `tx` namespace, you are also using the, +elements from the `aop` namespace (since the declarative transaction support in Spring is, +implemented by using AOP). The preceding XML snippet contains the relevant lines needed, +to reference the `aop` schema so that the elements in the `aop` namespace are available, +to you., +<<data-access.adoc#jdbc-embedded-database-support,Embedded Database Support>> and, +<<data-access.adoc#jdbc-initializing-datasource,Initializing a DataSource>>, respectively., +To use the elements in the `jdbc` schema, you need to have the following preamble at the, +top of your Spring XML configuration file. The text in the following snippet references, +the correct schema so that the elements in the `jdbc` namespace are available to you:, +++ b/src/docs/asciidoc/data-access.adoc, +=== Choosing an Approach for JDBC Database Access, +=== Package Hierarchy, +This section covers how to use the JDBC core classes to control basic JDBC processing,, +++ b/src/docs/asciidoc/data-access-appendix.adoc, +TIP: We strongly encourage you to look at the `'spring-tx.xsd'` file that ships with the, +attribute defaults and similar information. This file is documented inline, and, thus,, +the information is not repeated here in the interests of adhering to the DRY (Don't, +Repeat Yourself) principle., +NOTE: Often, when you use the elements in the `tx` namespace, you are also using the, +elements from the `aop` namespace (since the declarative transaction support in Spring is, +implemented by using AOP). The preceding XML snippet contains the relevant lines needed, +to reference the `aop` schema so that the elements in the `aop` namespace are available, +to you., +<<data-access.adoc#jdbc-embedded-database-support,Embedded Database Support>> and, +<<data-access.adoc#jdbc-initializing-datasource,Initializing a DataSource>>, respectively., +To use the elements in the `jdbc` schema, you need to have the following preamble at the, +top of your Spring XML configuration file. The text in the following snippet references, +the correct schema so that the elements in the `jdbc` namespace are available to you:, +++ b/src/docs/asciidoc/data-access.adoc, +=== Choosing an Approach for JDBC Database Access, +=== Package Hierarchy, +This section covers how to use the JDBC core classes to control basic JDBC processing,, +++ b/src/docs/asciidoc/web/webflux.adoc, +== Motivation, +== Define "`Reactive`"]