[+++ b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageReader.java, +import java.util.stream.Collectors;, +					String[] lines = rawLines.stream().collect(Collectors.joining()).split("\\r?\\n");, +					return buildEvent(lines, valueType, hints), +							.filter(event -> shouldWrap || event.data() != null), +							.map(event -> shouldWrap ? event : event.data());, +	private Mono<ServerSentEvent<Object>> buildEvent(String[] lines, ResolvableType valueType,, +		StringBuilder data = null;, +		StringBuilder comment = null;, +				data = (data != null ? data : new StringBuilder());, +				data.append(line.substring(5)).append("\n");, +				comment = (comment != null ? comment : new StringBuilder());, +				comment.append(line.substring(1)).append("\n");, +		if (comment != null) {, +			sseBuilder.comment(comment.toString().substring(0, comment.length() - 1));, +		if (data != null) {, +			return decodeData(data.toString(), valueType, hints).map(decodedData -> {, +				sseBuilder.data(decodedData);, +			});, +		}, +		else {, +			return Mono.just(sseBuilder.build());, +		}, +	private Mono<?> decodeData(String data, ResolvableType dataType, Map<String, Object> hints) {, +			return Mono.just(data.substring(0, data.length() - 1));, +			return Mono.error(new CodecException("No SSE decoder configured and the data is not String."));, +		return this.decoder.decodeToMono(input, dataType, MediaType.TEXT_EVENT_STREAM, hints);]