[+++ b/spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java, +import java.time.temporal.ChronoUnit;, +	private final ExpiredSessionChecker expiredSessionChecker = new ExpiredSessionChecker();, +		this.expiredSessionChecker.removeExpiredSessions(clock.instant());, +		Instant now = this.clock.instant();, +		this.expiredSessionChecker.checkIfNecessary(now);, +		return Mono.fromSupplier(() -> new InMemoryWebSession(now));, +		Instant now = this.clock.instant();, +		this.expiredSessionChecker.checkIfNecessary(now);, +		else if (session.isExpired(now)) {, +			session.updateLastAccessTime(now);, +			session.updateLastAccessTime(getClock().instant());, +, +		public InMemoryWebSession(Instant creationTime) {, +			this.creationTime = creationTime;, +	private class ExpiredSessionChecker {, +, +		/** Max time before next expiration checks. */, +		private static final int CHECK_PERIOD = 60;, +, +		/** Max sessions that can be created before next expiration checks. */, +		private static final int SESSION_COUNT_THRESHOLD = 500;, +, +, +		private final ReentrantLock lock = new ReentrantLock();, +, +		private Instant nextCheckTime = Instant.now(clock).plus(CHECK_PERIOD, ChronoUnit.SECONDS);, +, +		private long lastSessionCount;, +, +, +		public void checkIfNecessary(Instant now) {, +			if (howManyCreated() > SESSION_COUNT_THRESHOLD || this.nextCheckTime.isBefore(now)) {, +				removeExpiredSessions(Instant.now(clock));, +			}, +		}, +, +		private long howManyCreated() {, +			return sessions.size() - this.lastSessionCount;, +		}, +, +		public void removeExpiredSessions(Instant now) {, +			if (sessions.isEmpty()) {, +				return;, +			}, +			if (this.lock.tryLock()) {, +				try {, +					Iterator<InMemoryWebSession> iterator = sessions.values().iterator();, +					while (iterator.hasNext()) {, +						InMemoryWebSession session = iterator.next();, +						if (session.isExpired(now)) {, +							iterator.remove();, +							session.invalidate();, +						}, +					}, +				}, +				finally {, +					this.nextCheckTime = clock.instant().plus(CHECK_PERIOD, ChronoUnit.SECONDS);, +					this.lastSessionCount = sessions.size();, +					this.lock.unlock();, +				}, +			}, +		}, +	}, +, +, +++ b/spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java, +import java.time.temporal.ChronoUnit;, +	private final ExpiredSessionChecker expiredSessionChecker = new ExpiredSessionChecker();, +		this.expiredSessionChecker.removeExpiredSessions(clock.instant());, +		Instant now = this.clock.instant();, +		this.expiredSessionChecker.checkIfNecessary(now);, +		return Mono.fromSupplier(() -> new InMemoryWebSession(now));, +		Instant now = this.clock.instant();, +		this.expiredSessionChecker.checkIfNecessary(now);, +		else if (session.isExpired(now)) {, +			session.updateLastAccessTime(now);, +			session.updateLastAccessTime(getClock().instant());, +, +		public InMemoryWebSession(Instant creationTime) {, +			this.creationTime = creationTime;, +	private class ExpiredSessionChecker {, +, +		/** Max time before next expiration checks. */, +		private static final int CHECK_PERIOD = 60;, +, +		/** Max sessions that can be created before next expiration checks. */, +		private static final int SESSION_COUNT_THRESHOLD = 500;, +, +, +		private final ReentrantLock lock = new ReentrantLock();, +, +		private Instant nextCheckTime = Instant.now(clock).plus(CHECK_PERIOD, ChronoUnit.SECONDS);, +, +		private long lastSessionCount;, +, +, +		public void checkIfNecessary(Instant now) {, +			if (howManyCreated() > SESSION_COUNT_THRESHOLD || this.nextCheckTime.isBefore(now)) {, +				removeExpiredSessions(Instant.now(clock));]