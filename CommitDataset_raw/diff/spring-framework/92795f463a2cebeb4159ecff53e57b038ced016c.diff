[+++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +		String encodedHost = encodeUriComponent(this.host, encoding, getHostType());, +	private Type getHostType() {, +		return ((this.host != null) && this.host.startsWith("[")) ? Type.HOST_IPV6 : Type.HOST_IPV4;, +	}, +		verifyUriComponent(host, getHostType());, +		HOST_IPV4 {, +++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +		String encodedHost = encodeUriComponent(this.host, encoding, getHostType());, +	private Type getHostType() {, +		return ((this.host != null) && this.host.startsWith("[")) ? Type.HOST_IPV6 : Type.HOST_IPV4;, +	}, +		verifyUriComponent(host, getHostType());, +		HOST_IPV4 {, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +	private static final String HOST_IPV4_PATTERN = "[^\\[/?#:]*";, +	private static final String HOST_PATTERN = "(" + HOST_IPV6_PATTERN + "|" + HOST_IPV4_PATTERN + ")";, +++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +		String encodedHost = encodeUriComponent(this.host, encoding, getHostType());, +	private Type getHostType() {, +		return ((this.host != null) && this.host.startsWith("[")) ? Type.HOST_IPV6 : Type.HOST_IPV4;, +	}, +		verifyUriComponent(host, getHostType());, +		HOST_IPV4 {, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +	private static final String HOST_IPV4_PATTERN = "[^\\[/?#:]*";, +	private static final String HOST_PATTERN = "(" + HOST_IPV6_PATTERN + "|" + HOST_IPV4_PATTERN + ")";, +++ b/spring-web/src/main/java/org/springframework/web/util/UriUtils.java, +				.encodeUriComponent(host, encoding, HierarchicalUriComponents.Type.HOST_IPV4);, +++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +		String encodedHost = encodeUriComponent(this.host, encoding, getHostType());, +	private Type getHostType() {, +		return ((this.host != null) && this.host.startsWith("[")) ? Type.HOST_IPV6 : Type.HOST_IPV4;, +	}, +		verifyUriComponent(host, getHostType());, +		HOST_IPV4 {, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +	private static final String HOST_IPV4_PATTERN = "[^\\[/?#:]*";, +	private static final String HOST_PATTERN = "(" + HOST_IPV6_PATTERN + "|" + HOST_IPV4_PATTERN + ")";, +++ b/spring-web/src/main/java/org/springframework/web/util/UriUtils.java, +				.encodeUriComponent(host, encoding, HierarchicalUriComponents.Type.HOST_IPV4);, +++ b/spring-web/src/test/java/org/springframework/web/util/UriComponentsBuilderTests.java, +		UriComponentsBuilder.fromHttpUrl("http://[1abc:2abc:3abc::5ABC:6abc:8080/resource").build().encode();, +++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +		String encodedHost = encodeUriComponent(this.host, encoding, getHostType());, +	private Type getHostType() {, +		return ((this.host != null) && this.host.startsWith("[")) ? Type.HOST_IPV6 : Type.HOST_IPV4;, +	}, +		verifyUriComponent(host, getHostType());, +		HOST_IPV4 {, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +	private static final String HOST_IPV4_PATTERN = "[^\\[/?#:]*";, +	private static final String HOST_PATTERN = "(" + HOST_IPV6_PATTERN + "|" + HOST_IPV4_PATTERN + ")";, +++ b/spring-web/src/main/java/org/springframework/web/util/UriUtils.java, +				.encodeUriComponent(host, encoding, HierarchicalUriComponents.Type.HOST_IPV4);, +++ b/spring-web/src/test/java/org/springframework/web/util/UriComponentsBuilderTests.java, +		UriComponentsBuilder.fromHttpUrl("http://[1abc:2abc:3abc::5ABC:6abc:8080/resource").build().encode();, +++ b/spring-web/src/test/java/org/springframework/web/util/UriComponentsTests.java, +import static org.hamcrest.Matchers.*;, +		UriComponents uriComponents = UriComponentsBuilder.fromUriString(, +				"http://example.com/hotel list/Z\u00fcrich").build();, +		assertEquals(new URI("http://example.com/hotel%20list/Z%C3%BCrich"), uriComponents.encode().toUri());, +	}, +, +	@Test, +	public void toUriNotEncoded() throws URISyntaxException {, +		UriComponents uriComponents = UriComponentsBuilder.fromUriString(, +				"http://example.com/hotel list/Z\u00fcrich").build();, +		assertEquals(new URI("http://example.com/hotel%20list/Z\u00fcrich"), uriComponents.toUri());, +	}, +, +	@Test, +	public void toUriAlreadyEncoded() throws URISyntaxException {, +		UriComponents uriComponents = UriComponentsBuilder.fromUriString(, +				"http://example.com/hotel%20list/Z%C3%BCrich").build(true);, +	public void toUriWithIpv6HostAlreadyEncoded() throws URISyntaxException {, +		UriComponents uriComponents = UriComponentsBuilder.fromUriString(, +				"http://[1abc:2abc:3abc::5ABC:6abc]:8080/hotel%20list/Z%C3%BCrich").build(true);, +		UriComponents encoded = uriComponents.encode();, +		assertEquals(new URI("http://[1abc:2abc:3abc::5ABC:6abc]:8080/hotel%20list/Z%C3%BCrich"), encoded.toUri());, +		UriComponents uriComponents = UriComponentsBuilder.fromUriString(, +				"http://example.com").path("/{foo} {bar}").build();]