[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/StringToBooleanConverter.java, +import java.util.HashSet;, +import java.util.Set;, +, +import org.springframework.util.StringUtils;, + * @author Juergen Hoeller, +	private static final Set<String> trueValues = new HashSet<String>(4);, +, +	private static final Set<String> falseValues = new HashSet<String>(4);, +, +	static {, +		trueValues.add("true");, +		falseValues.add("false");, +, +		trueValues.add("on");, +		falseValues.add("off");, +, +		trueValues.add("yes");, +		falseValues.add("no");, +, +		trueValues.add("1");, +		falseValues.add("0");, +	}, +, +, +		String value = (source != null ? source.trim() : null);, +		if (!StringUtils.hasLength(value)) {, +		}, +		else if (trueValues.contains(value)) {, +		else if (falseValues.contains(value)) {, +			throw new IllegalArgumentException("Invalid boolean value '" + source + "'");, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/StringToBooleanConverter.java, +import java.util.HashSet;, +import java.util.Set;, +, +import org.springframework.util.StringUtils;, + * @author Juergen Hoeller, +	private static final Set<String> trueValues = new HashSet<String>(4);, +, +	private static final Set<String> falseValues = new HashSet<String>(4);, +, +	static {, +		trueValues.add("true");, +		falseValues.add("false");, +, +		trueValues.add("on");, +		falseValues.add("off");, +, +		trueValues.add("yes");, +		falseValues.add("no");, +, +		trueValues.add("1");, +		falseValues.add("0");, +	}, +, +, +		String value = (source != null ? source.trim() : null);, +		if (!StringUtils.hasLength(value)) {, +		}, +		else if (trueValues.contains(value)) {, +		else if (falseValues.contains(value)) {, +			throw new IllegalArgumentException("Invalid boolean value '" + source + "'");, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionServiceTests.java, +import static org.junit.Assert.*;, +, +		assertEquals(Boolean.valueOf(true), c.convert("on"));, +		assertEquals(Boolean.valueOf(true), c.convert("yes"));, +		assertEquals(Boolean.valueOf(true), c.convert("1"));, +		assertEquals(Boolean.valueOf(false), c.convert("off"));, +		assertEquals(Boolean.valueOf(false), c.convert("no"));, +		assertEquals(Boolean.valueOf(false), c.convert("0"));]