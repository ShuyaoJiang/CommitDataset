[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +	 * <p>The supplied map must contain a key-value pair for every attribute, +	 * defined in the supplied {@code annotationType} that is not aliased or, +	 * does not have a default value., +	 * @throws IllegalArgumentException if a required attribute is missing or if an, +	 * attribute is not of the correct type, +	 * @throws AnnotationConfigurationException if invalid configuration of, +	 * {@code @AliasFor} is detected, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +	 * <p>The supplied map must contain a key-value pair for every attribute, +	 * defined in the supplied {@code annotationType} that is not aliased or, +	 * does not have a default value., +	 * @throws IllegalArgumentException if a required attribute is missing or if an, +	 * attribute is not of the correct type, +	 * @throws AnnotationConfigurationException if invalid configuration of, +	 * {@code @AliasFor} is detected, +++ b/spring-core/src/main/java/org/springframework/core/annotation/MapAnnotationAttributeExtractor.java, +	 * <p>The supplied map must contain a key-value pair for every attribute, +	 * defined in the supplied {@code annotationType} that is not aliased or, +	 * does not have a default value., +		super(annotationType, annotatedElement, enrichAndValidateAttributes(new HashMap<String, Object>(attributes), annotationType));, +	 * Enrich and validate the supplied {@code attributes} map by ensuring, +	 * that it contains a non-null entry for each annotation attribute in, +	 * the specified {@code annotationType} and that the type of the entry, +	 * matches the return type for the corresponding annotation attribute., +	 * <p>If an attribute is missing in the supplied map, it will be set, +	 * either to value of its alias (if an alias value exists) or to the, +	 * value of the attribute's default value (if defined), and otherwise, +	 * an {@link IllegalArgumentException} will be thrown., +	 * @see AliasFor, +	private static Map<String, Object> enrichAndValidateAttributes(Map<String, Object> attributes,, +			Class<? extends Annotation> annotationType) {, +, +		Map<String, String> attributeAliasMap = getAttributeAliasMap(annotationType);, +, +, +, +			// if attribute not present, check alias, +			if (attributeValue == null) {, +				String aliasName = attributeAliasMap.get(attributeName);, +				if (aliasName != null) {, +					Object aliasValue = attributes.get(aliasName);, +					if (aliasValue != null) {, +						attributeValue = aliasValue;, +						attributes.put(attributeName, attributeValue);, +					}, +				}, +			}, +, +			// if alias not present, check default, +			if (attributeValue == null) {, +				Object defaultValue = getDefaultValue(annotationType, attributeName);, +				if (defaultValue != null) {, +					attributeValue = defaultValue;, +					attributes.put(attributeName, attributeValue);, +				}, +			}, +, +			// if still null, +			// else, ensure correct type, +, +		return attributes;, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +	 * <p>The supplied map must contain a key-value pair for every attribute, +	 * defined in the supplied {@code annotationType} that is not aliased or, +	 * does not have a default value., +	 * @throws IllegalArgumentException if a required attribute is missing or if an, +	 * attribute is not of the correct type, +	 * @throws AnnotationConfigurationException if invalid configuration of, +	 * {@code @AliasFor} is detected, +++ b/spring-core/src/main/java/org/springframework/core/annotation/MapAnnotationAttributeExtractor.java, +	 * <p>The supplied map must contain a key-value pair for every attribute, +	 * defined in the supplied {@code annotationType} that is not aliased or, +	 * does not have a default value., +		super(annotationType, annotatedElement, enrichAndValidateAttributes(new HashMap<String, Object>(attributes), annotationType));, +	 * Enrich and validate the supplied {@code attributes} map by ensuring, +	 * that it contains a non-null entry for each annotation attribute in, +	 * the specified {@code annotationType} and that the type of the entry, +	 * matches the return type for the corresponding annotation attribute., +	 * <p>If an attribute is missing in the supplied map, it will be set, +	 * either to value of its alias (if an alias value exists) or to the, +	 * value of the attribute's default value (if defined), and otherwise, +	 * an {@link IllegalArgumentException} will be thrown., +	 * @see AliasFor, +	private static Map<String, Object> enrichAndValidateAttributes(Map<String, Object> attributes,, +			Class<? extends Annotation> annotationType) {, +, +		Map<String, String> attributeAliasMap = getAttributeAliasMap(annotationType);, +, +, +, +			// if attribute not present, check alias, +			if (attributeValue == null) {, +				String aliasName = attributeAliasMap.get(attributeName);, +				if (aliasName != null) {, +					Object aliasValue = attributes.get(aliasName);, +					if (aliasValue != null) {, +						attributeValue = aliasValue;, +						attributes.put(attributeName, attributeValue);, +					}]