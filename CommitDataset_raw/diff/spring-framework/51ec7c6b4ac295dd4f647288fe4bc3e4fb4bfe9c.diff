[+++ b/spring-web/src/main/java/org/springframework/web/server/session/CookieWebSessionIdResolver.java, +import java.util.function.Consumer;, +	@Nullable, +	private Consumer<ResponseCookie.ResponseCookieBuilder> cookieInitializer = null;, +, +	/**, +	 * Add {@link Consumer} for a {@link ResponseCookie.ResponseCookieBuilder, +	 * ResponseCookieBuilder} that will be invoked for each cookie being built,, +	 * just before the call to, +	 * {@link ResponseCookie.ResponseCookieBuilder#build() build()}., +	 * @param initializer consumer for a cookie builder, +	 * @since 5.1, +	 */, +	public void addCookieInitializer(Consumer<ResponseCookie.ResponseCookieBuilder> initializer) {, +		this.cookieInitializer = this.cookieInitializer != null ?, +				this.cookieInitializer.andThen(initializer) : initializer;, +	}, +, +		ResponseCookie.ResponseCookieBuilder cookieBuilder = ResponseCookie.from(this.cookieName, id), +				.sameSite(sameSite);, +, +		if (this.cookieInitializer != null) {, +			this.cookieInitializer.accept(cookieBuilder);, +		}, +, +		return cookieBuilder.build();, +++ b/spring-web/src/main/java/org/springframework/web/server/session/CookieWebSessionIdResolver.java, +import java.util.function.Consumer;, +	@Nullable, +	private Consumer<ResponseCookie.ResponseCookieBuilder> cookieInitializer = null;, +, +	/**, +	 * Add {@link Consumer} for a {@link ResponseCookie.ResponseCookieBuilder, +	 * ResponseCookieBuilder} that will be invoked for each cookie being built,, +	 * just before the call to, +	 * {@link ResponseCookie.ResponseCookieBuilder#build() build()}., +	 * @param initializer consumer for a cookie builder, +	 * @since 5.1, +	 */, +	public void addCookieInitializer(Consumer<ResponseCookie.ResponseCookieBuilder> initializer) {, +		this.cookieInitializer = this.cookieInitializer != null ?, +				this.cookieInitializer.andThen(initializer) : initializer;, +	}, +, +		ResponseCookie.ResponseCookieBuilder cookieBuilder = ResponseCookie.from(this.cookieName, id), +				.sameSite(sameSite);, +, +		if (this.cookieInitializer != null) {, +			this.cookieInitializer.accept(cookieBuilder);, +		}, +, +		return cookieBuilder.build();, +++ b/spring-web/src/test/java/org/springframework/web/server/session/CookieWebSessionIdResolverTests.java, +, +	@Test, +	public void cookieInitializer() {, +		this.resolver.addCookieInitializer(builder -> builder.domain("example.org"));, +		this.resolver.addCookieInitializer(builder -> builder.sameSite("Lax"));, +		this.resolver.addCookieInitializer(builder -> builder.secure(false));, +, +		MockServerHttpRequest request = MockServerHttpRequest.get("https://example.org/path").build();, +		MockServerWebExchange exchange = MockServerWebExchange.from(request);, +		this.resolver.setSessionId(exchange, "123");, +, +		MultiValueMap<String, ResponseCookie> cookies = exchange.getResponse().getCookies();, +		assertEquals(1, cookies.size());, +		ResponseCookie cookie = cookies.getFirst(this.resolver.getCookieName());, +		assertNotNull(cookie);, +		assertEquals("SESSION=123; Path=/; Domain=example.org; HttpOnly; SameSite=Lax", cookie.toString());, +	}, +]