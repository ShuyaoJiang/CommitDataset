[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +			Field field = ReflectionUtils.findField(obj.getClass(), BEAN_FACTORY_FIELD);, +			// Does the actual (non-CGLIB) superclass implement BeanFactoryAware?, +			if (BeanFactoryAware.class.isAssignableFrom(ClassUtils.getUserClass(obj.getClass().getSuperclass()))) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +			Field field = ReflectionUtils.findField(obj.getClass(), BEAN_FACTORY_FIELD);, +			// Does the actual (non-CGLIB) superclass implement BeanFactoryAware?, +			if (BeanFactoryAware.class.isAssignableFrom(ClassUtils.getUserClass(obj.getClass().getSuperclass()))) {, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, +import org.springframework.beans.factory.annotation.Lookup;, +	@Test, +	public void testBeanLookupFromSameConfigurationClass() {, +		ApplicationContext ctx = new AnnotationConfigApplicationContext(BeanLookupConfiguration.class);, +		BeanLookupConfiguration bean = ctx.getBean(BeanLookupConfiguration.class);, +		assertNotNull(bean.getTestBean());, +		assertSame(ctx.getBean(TestBean.class), bean.getTestBean());, +	}, +, +	@Configuration, +	static abstract class BeanLookupConfiguration {, +, +		@Bean, +		public TestBean thing() {, +			return new TestBean();, +		}, +, +		@Lookup, +		public abstract TestBean getTestBean();, +	}, +]