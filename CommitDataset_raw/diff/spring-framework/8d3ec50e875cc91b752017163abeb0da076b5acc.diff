[+++ b/spring-test/src/main/java/org/springframework/test/util/ReflectionTestUtils.java, +		Object ultimateTargetObject = AopTestUtils.getUltimateTargetObject(targetObject);, +, +			targetClass = ultimateTargetObject.getClass();, +		ReflectionUtils.setField(field, ultimateTargetObject, value);, +		Object ultimateTargetObject = AopTestUtils.getUltimateTargetObject(targetObject);, +, +			targetClass = ultimateTargetObject.getClass();, +		return ReflectionUtils.getField(field, ultimateTargetObject);, +++ b/spring-test/src/main/java/org/springframework/test/util/ReflectionTestUtils.java, +		Object ultimateTargetObject = AopTestUtils.getUltimateTargetObject(targetObject);, +, +			targetClass = ultimateTargetObject.getClass();, +		ReflectionUtils.setField(field, ultimateTargetObject, value);, +		Object ultimateTargetObject = AopTestUtils.getUltimateTargetObject(targetObject);, +, +			targetClass = ultimateTargetObject.getClass();, +		return ReflectionUtils.getField(field, ultimateTargetObject);, +++ b/spring-test/src/test/java/org/springframework/test/util/ReflectionTestUtilsTests.java, +import org.springframework.aop.framework.ProxyCreatorSupport;, +import org.springframework.aop.framework.ProxyFactory;, +import org.springframework.aop.support.AopUtils;, +	@Test, +	public void setAndGetFieldOnProxiedInstance() throws Exception  {, +		ProxyFactory pf = new ProxyFactory(this.person);, +		pf.setProxyTargetClass(true);, +, +		Person proxyPerson = (Person) pf.getProxy();, +, +		setField(proxyPerson, "id", new Long(99), long.class);, +		setField(proxyPerson, "name", "Tom");, +		setField(proxyPerson, "age", new Integer(42));, +		setField(proxyPerson, "eyeColor", "blue", String.class);, +		setField(proxyPerson, "likesPets", Boolean.TRUE);, +		setField(proxyPerson, "favoriteNumber", PI, Number.class);, +, +		assertEquals("ID (private field in a superclass)", 99, person.getId());, +		assertEquals("name (protected field)", "Tom", person.getName());, +		assertEquals("age (private field)", 42, person.getAge());, +		assertEquals("eye color (package private field)", "blue", person.getEyeColor());, +		assertEquals("'likes pets' flag (package private boolean field)", true, person.likesPets());, +		assertEquals("'favorite number' (package field)", PI, person.getFavoriteNumber());, +, +		assertEquals(new Long(99), getField(proxyPerson, "id"));, +		assertEquals("Tom", getField(proxyPerson, "name"));, +		assertEquals(new Integer(42), getField(proxyPerson, "age"));, +		assertEquals("blue", getField(proxyPerson, "eyeColor"));, +		assertEquals(Boolean.TRUE, getField(proxyPerson, "likesPets"));, +		assertEquals(PI, getField(proxyPerson, "favoriteNumber"));, +, +, +	}, +]