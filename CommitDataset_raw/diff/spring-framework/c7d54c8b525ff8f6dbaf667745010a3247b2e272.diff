[+++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSession.java, +	 * Constructor for creating a new session instance., +	 * Copy constructor to re-create a session at the start of a new request, +	 * refreshing the last access time of the session., +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSession.java, +	 * Constructor for creating a new session instance., +	 * Copy constructor to re-create a session at the start of a new request, +	 * refreshing the last access time of the session., +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java, +, +, +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSession.java, +	 * Constructor for creating a new session instance., +	 * Copy constructor to re-create a session at the start of a new request, +	 * refreshing the last access time of the session., +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java, +, +, +++ b/spring-web/src/main/java/org/springframework/web/server/session/HeaderWebSessionIdResolver.java, +	/** Default value for {@link #setHeaderName(String)}. */, +, +, +	/**, +	 * Return the configured header name., +	 * @return the configured header name, +	 */, +	public String getHeaderName() {, +		return this.headerName;, +	}, +, +, +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSession.java, +	 * Constructor for creating a new session instance., +	 * Copy constructor to re-create a session at the start of a new request, +	 * refreshing the last access time of the session., +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java, +, +, +++ b/spring-web/src/main/java/org/springframework/web/server/session/HeaderWebSessionIdResolver.java, +	/** Default value for {@link #setHeaderName(String)}. */, +, +, +	/**, +	 * Return the configured header name., +	 * @return the configured header name, +	 */, +	public String getHeaderName() {, +		return this.headerName;, +	}, +, +, +++ b/spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java, +, +	/**, +	 * Configure the {@link Clock} to use to set lastAccessTime on every created, +	 * session and to calculate if it is expired., +	 * <p>This may be useful to align to different timezone or to set the clock, +	 * back in a test, e.g. {@code Clock.offset(clock, Duration.ofMinutes(-31))}, +	 * in order to simulate session expiration., +	 * <p>By default this is {@code Clock.system(ZoneId.of("GMT"))}., +	 * @param clock the clock to use, +	 */, +	public void setClock(Clock clock) {, +		Assert.notNull(clock, "'clock' is required.");, +		this.clock = clock;, +	}, +, +	/**, +	 * Return the configured clock for session lastAccessTime calculations., +	 */, +	public Clock getClock() {, +		return this.clock;, +	}, +, +, +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSession.java, +	 * Constructor for creating a new session instance., +	 * Copy constructor to re-create a session at the start of a new request, +	 * refreshing the last access time of the session., +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java, +, +, +++ b/spring-web/src/main/java/org/springframework/web/server/session/HeaderWebSessionIdResolver.java, +	/** Default value for {@link #setHeaderName(String)}. */, +, +, +	/**, +	 * Return the configured header name., +	 * @return the configured header name, +	 */, +	public String getHeaderName() {, +		return this.headerName;, +	}, +, +, +++ b/spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java, +, +	/**, +	 * Configure the {@link Clock} to use to set lastAccessTime on every created, +	 * session and to calculate if it is expired.]