[+++ b/spring-context/src/main/java/org/springframework/validation/MessageCodeFormatter.java, + * Copyright 2002-2018 the original author or authors., +	 * Build and return a message code consisting of the given fields,, +	 * usually delimited by {@link DefaultMessageCodesResolver#CODE_SEPARATOR}., +, +++ b/spring-context/src/main/java/org/springframework/validation/MessageCodeFormatter.java, + * Copyright 2002-2018 the original author or authors., +	 * Build and return a message code consisting of the given fields,, +	 * usually delimited by {@link DefaultMessageCodesResolver#CODE_SEPARATOR}., +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/BindStatus.java, + * Copyright 2002-2018 the original author or authors., + * @author Juergen Hoeller, +	private final String[] errorCodes;, +	private String[] errorMessages;, +, +	@Nullable, +	private List<? extends ObjectError> objectErrors;, +	private BindingResult bindingResult;, +	public BindStatus(RequestContext requestContext, String path, boolean htmlEscape) throws IllegalStateException {, +++ b/spring-context/src/main/java/org/springframework/validation/MessageCodeFormatter.java, + * Copyright 2002-2018 the original author or authors., +	 * Build and return a message code consisting of the given fields,, +	 * usually delimited by {@link DefaultMessageCodesResolver#CODE_SEPARATOR}., +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/BindStatus.java, + * Copyright 2002-2018 the original author or authors., + * @author Juergen Hoeller, +	private final String[] errorCodes;, +	private String[] errorMessages;, +, +	@Nullable, +	private List<? extends ObjectError> objectErrors;, +	private BindingResult bindingResult;, +	public BindStatus(RequestContext requestContext, String path, boolean htmlEscape) throws IllegalStateException {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/View.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +	default List<MediaType> getSupportedMediaTypes() {, +		return Collections.emptyList();, +	}, +++ b/spring-context/src/main/java/org/springframework/validation/MessageCodeFormatter.java, + * Copyright 2002-2018 the original author or authors., +	 * Build and return a message code consisting of the given fields,, +	 * usually delimited by {@link DefaultMessageCodesResolver#CODE_SEPARATOR}., +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/BindStatus.java, + * Copyright 2002-2018 the original author or authors., + * @author Juergen Hoeller, +	private final String[] errorCodes;, +	private String[] errorMessages;, +, +	@Nullable, +	private List<? extends ObjectError> objectErrors;, +	private BindingResult bindingResult;, +	public BindStatus(RequestContext requestContext, String path, boolean htmlEscape) throws IllegalStateException {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/View.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +	default List<MediaType> getSupportedMediaTypes() {, +		return Collections.emptyList();, +	}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/View.java, + * Copyright 2002-2018 the original author or authors., + * @author Rossen Stoyanchev, +	 * @since 3.0, +	 * @since 3.1, +	 * The {@link org.springframework.http.MediaType} selected during content negotiation,, +	 * which may be more specific than the one the View is configured with. For example:, +	 * @since 3.2, +, +	 * <p>Can be used to check the view's content type upfront,, +	 * i.e. before an actual rendering attempt., +	 * or {@code null} if not predetermined, +	default String getContentType() {, +		return null;, +	}, +	 * <p>The first step will be preparing the request: In the JSP case, this would mean, +	 * setting model objects as request attributes. The second step will be the actual, +	 * rendering of the view, for example including the JSP via a RequestDispatcher., +	void render(@Nullable Map<String, ?> model, HttpServletRequest request, HttpServletResponse response), +			throws Exception;, +++ b/spring-context/src/main/java/org/springframework/validation/MessageCodeFormatter.java, + * Copyright 2002-2018 the original author or authors., +	 * Build and return a message code consisting of the given fields,, +	 * usually delimited by {@link DefaultMessageCodesResolver#CODE_SEPARATOR}., +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/BindStatus.java, + * Copyright 2002-2018 the original author or authors., + * @author Juergen Hoeller, +	private final String[] errorCodes;, +	private String[] errorMessages;, +, +	@Nullable, +	private List<? extends ObjectError> objectErrors;, +	private BindingResult bindingResult;, +	public BindStatus(RequestContext requestContext, String path, boolean htmlEscape) throws IllegalStateException {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/View.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;]