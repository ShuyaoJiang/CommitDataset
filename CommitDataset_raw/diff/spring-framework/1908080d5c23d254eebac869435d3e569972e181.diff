[+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/SseIntegrationTests.java, +import org.junit.Ignore;, +import reactor.core.publisher.MonoProcessor;, +import org.springframework.http.server.reactive.bootstrap.ReactorHttpServer;, +import org.springframework.web.bind.annotation.GetMapping;, +import static org.junit.Assume.*;, +import static org.springframework.http.MediaType.*;, +import static org.springframework.web.reactive.function.BodyExtractors.*;, +	@Test // SPR-16494, +	@Ignore // https://github.com/reactor/reactor-netty/issues/283, +	public void serverDetectsClientDisconnect() {, +, +		assumeTrue(this.server instanceof ReactorHttpServer);, +, +		Flux<String> result = this.webClient.get(), +				.uri("/infinite"), +				.accept(TEXT_EVENT_STREAM), +				.exchange(), +				.flatMapMany(response -> response.bodyToFlux(String.class));, +, +		StepVerifier.create(result), +				.expectNext("foo 0"), +				.expectNext("foo 1"), +				.thenCancel(), +				.verify(Duration.ofSeconds(5L));, +, +		SseController controller = this.wac.getBean(SseController.class);, +		controller.cancellation.block(Duration.ofSeconds(5));, +	}, +, +		private MonoProcessor<Void> cancellation = MonoProcessor.create();, +, +		@GetMapping("/sse/string"), +		@GetMapping("/sse/person"), +		@GetMapping("/sse/event"), +		@GetMapping("/sse/infinite"), +		Flux<String> infinite() {, +			return Flux.just(0, 1).map(l -> "foo " + l), +					.mergeWith(Flux.never()), +					.doOnCancel(() -> cancellation.onComplete());, +		}]