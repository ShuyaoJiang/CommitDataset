[+++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +				.flatMap(dataBuffer -> {, +					if (dataBuffer.readableByteCount() == 0) {, +						return Mono.empty();, +					}, +						return Mono.just(value);, +						return Mono.error(new CodecException("Type definition error: " + ex.getType(), ex));, +						return Mono.error(new DecodingException("JSON decoding error: " + ex.getOriginalMessage(), ex));, +						return Mono.error(new DecodingException("I/O error while parsing input stream", ex));, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +				.flatMap(dataBuffer -> {, +					if (dataBuffer.readableByteCount() == 0) {, +						return Mono.empty();, +					}, +						return Mono.just(value);, +						return Mono.error(new CodecException("Type definition error: " + ex.getType(), ex));, +						return Mono.error(new DecodingException("JSON decoding error: " + ex.getOriginalMessage(), ex));, +						return Mono.error(new DecodingException("I/O error while parsing input stream", ex));, +++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonDecoderTests.java, + * Copyright 2002-2017 the original author or authors., +import static org.junit.Assert.*;, +	public void decodeEmptyArrayToFlux() throws Exception {, +		Flux<DataBuffer> source = Flux.just(stringBuffer("[]"));, +, +		ResolvableType elementType = forClass(Pojo.class);, +		Flux<Object> flux = new Jackson2JsonDecoder().decode(source, elementType, null,, +				emptyMap());, +, +		StepVerifier.create(flux), +				.expectNextCount(0), +				.verifyComplete();, +	}, +, +	@Test, +	public void decodeEmptyArrayToMono() throws Exception {, +		Flux<DataBuffer> source = Flux.just(stringBuffer("[]"));, +		ResolvableType elementType = forClass(Pojo.class);, +		Mono<Object> mono = new Jackson2JsonDecoder().decodeToMono(source, elementType,, +				null, emptyMap());, +, +		StepVerifier.create(mono), +				.expectNextCount(0), +				.verifyComplete();, +	}, +, +	@Test]