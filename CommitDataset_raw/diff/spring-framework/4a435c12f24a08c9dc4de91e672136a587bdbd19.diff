[+++ b/src/docs/asciidoc/web/webmvc.adoc, +The `ShallowEtagHeaderFilter` filter creates a "shallow" ETag by caching the content, +written to the response, and computing an MD5 hash from it. The next time a client sends,, +it does the same, but also compares the computed value against the `If-None-Match` request, +header and if the two are equal, it returns a 304 (NOT_MODIFIED)., +This strategy saves network bandwidth but not CPU, as the full response must be computed, +for each request. Other strategies at the controller level, described above, can avoid the, +computation. See <<mvc-caching>>., +, +This filter has a `writeWeakETag` parameter that configures the filter to write Weak ETags,, +like this: `W/"02a2d595e6ed9a0b24f027f2b63b134d6"`, as defined in, +https://tools.ietf.org/html/rfc7232#section-2.3[RFC 7232 Section 2.3]., +HTTP caching can significantly improve the performance of a web application. HTTP caching, +revolves around the "Cache-Control" response header and subsequently conditional request, +headers such as "Last-Modified" and "ETag". "Cache-Control" advises private (e.g. browser), +and public (e.g. proxy) caches how to cache and re-use responses. An "ETag" header is used, +to make a conditional request that may result in a 304 (NOT_MODIFIED) without a body,, +if the content has not changed. "ETag" can be seen as a more sophisticated successor to, +the `Last-Modified` header., +This section describes HTTP caching related options available in Spring Web MVC., +=== `CacheControl`, +{api-spring-framework}/http/CacheControl.html[`CacheControl`] provides support for, +configuring settings related to the "Cache-Control" header and is accepted as an argument, +in a number of places:, +* {api-spring-framework}/web/servlet/mvc/WebContentInterceptor.html[`WebContentInterceptor`], +* {api-spring-framework}/web/servlet/support/WebContentGenerator.html[`WebContentGenerator`], +* <<mvc-caching-etag-lastmodified>>, +* <<mvc-caching-static-resources>>, +While https://tools.ietf.org/html/rfc7234#section-5.2.2[RFC 7234] describes all possible, +directives for the "Cache-Control" response header, the `CacheControl` type takes a, +use case oriented approach focusing on the common scenarios:, +	CacheControl ccCustom = CacheControl.maxAge(10, TimeUnit.DAYS).noTransform().cachePublic();, +`WebContentGenerator` also accept a simpler `cachePeriod` property, in seconds, that, +works as follows:, +* A `-1` value won't generate a "Cache-Control" response header., +* A `0` value will prevent caching using the `'Cache-Control: no-store'` directive., +* An `n > 0` value will cache the given response for `n` seconds using the, +`'Cache-Control: max-age=n'` directive., +=== Controllers, +Controllers can add explicit support for HTTP caching. This is recommended since the, +lastModified or ETag value for a resource needs to be calculated before it can be compared, +against conditional request headers. A controller can add an ETag and "Cache-Control", +settings to a `ResponseEntity`:, +This will send an 304 (NOT_MODIFIED) response with an empty body, if the comparison, +to the conditional request headers indicates the content has not changed. Otherwise the, +"ETag" and "Cache-Control" headers will be added to the response., +The check against conditional request headers can also be made in the controller:, +		long eTag = ... <1>, +		if (request.checkNotModified(eTag)) {, +			return null; <2>, +		model.addAttribute(...); <3>, +<1> Application-specific calculation., +<2> Response has been set to 304 (NOT_MODIFIED), no further processing., +<3> Continue with request processing., +There are 3 variants for checking conditional requests against eTag values, lastModified, +values, or both. For conditional "GET" and "HEAD" requests, the response may be set to, +304 (NOT_MODIFIED). For conditional "POST", "PUT", and "DELETE", the response would be set, +to 409 (PRECONDITION_FAILED) instead to prevent concurrent modification., +, +[[mvc-caching-static-resources]], +=== Static resources, +, +Static resources should be served with a "Cache-Control" and conditional response headers, +for optimal performance. See section on configuring <<mvc-config-static-resources>>., +The `ShallowEtagHeaderFilter` can be used to add "shallow" eTag values, computed from the, +response content and thus saving bandwith but not CPU time. See <<filters-shallow-etag>>.]