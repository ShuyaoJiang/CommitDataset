[+++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriBuilder.java, + *, +			uriBuilder.append(scheme);, +			uriBuilder.append(':');, +			template = new UriTemplate(scheme, UriComponent.SCHEME);, +				template = new UriTemplate(userInfo, UriComponent.USER_INFO);, +				template = new UriTemplate(host, UriComponent.HOST);, +				template = new UriTemplate(pathSegment, UriComponent.PATH_SEGMENT);, +			template = new UriTemplate(queryBuilder.toString(), UriComponent.QUERY);, +			template = new UriTemplate(fragment, UriComponent.FRAGMENT);, +			template = new UriTemplate(scheme, UriComponent.SCHEME);, +				template = new UriTemplate(userInfo, UriComponent.USER_INFO);, +				template = new UriTemplate(host, UriComponent.HOST);, +				template = new UriTemplate(pathSegment, UriComponent.PATH_SEGMENT);, +			template = new UriTemplate(queryBuilder.toString(), UriComponent.QUERY);, +			template = new UriTemplate(fragment, UriComponent.FRAGMENT);, +			this.scheme = UriUtils.encode(scheme, UriComponent.SCHEME, true);, +			this.userInfo = UriUtils.encode(userInfo, UriComponent.USER_INFO, true);, +			this.host = UriUtils.encode(host, UriComponent.HOST, true);, +			this.pathSegments.add(UriUtils.encode(segment, UriComponent.PATH_SEGMENT, true));, +		String encodedName = UriUtils.encode(name, UriComponent.QUERY_PARAM, true);, +					queryBuilder.append(UriUtils.encode(valueAsString, UriComponent.QUERY_PARAM, true));, +			this.fragment = UriUtils.encode(fragment, UriComponent.FRAGMENT, true);, +++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriBuilder.java, + *, +			uriBuilder.append(scheme);, +			uriBuilder.append(':');, +			template = new UriTemplate(scheme, UriComponent.SCHEME);, +				template = new UriTemplate(userInfo, UriComponent.USER_INFO);, +				template = new UriTemplate(host, UriComponent.HOST);, +				template = new UriTemplate(pathSegment, UriComponent.PATH_SEGMENT);, +			template = new UriTemplate(queryBuilder.toString(), UriComponent.QUERY);, +			template = new UriTemplate(fragment, UriComponent.FRAGMENT);, +			template = new UriTemplate(scheme, UriComponent.SCHEME);, +				template = new UriTemplate(userInfo, UriComponent.USER_INFO);, +				template = new UriTemplate(host, UriComponent.HOST);, +				template = new UriTemplate(pathSegment, UriComponent.PATH_SEGMENT);, +			template = new UriTemplate(queryBuilder.toString(), UriComponent.QUERY);, +			template = new UriTemplate(fragment, UriComponent.FRAGMENT);, +			this.scheme = UriUtils.encode(scheme, UriComponent.SCHEME, true);, +			this.userInfo = UriUtils.encode(userInfo, UriComponent.USER_INFO, true);, +			this.host = UriUtils.encode(host, UriComponent.HOST, true);, +			this.pathSegments.add(UriUtils.encode(segment, UriComponent.PATH_SEGMENT, true));, +		String encodedName = UriUtils.encode(name, UriComponent.QUERY_PARAM, true);, +					queryBuilder.append(UriUtils.encode(valueAsString, UriComponent.QUERY_PARAM, true));, +			this.fragment = UriUtils.encode(fragment, UriComponent.FRAGMENT, true);, +++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriComponent.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.util;, +, +/**, + * Enumeration used to identify the parts of a URI., + *, + * <p>Contains methods to indicate whether a given character is valid in a specific URI component., + *, + * @author Arjen Poutsma, + * @see <a href="http://www.ietf.org/rfc/rfc3986.txt">RFC 3986</a>, + * @since 3.1, + */, +public enum UriComponent {, +, +	SCHEME {, +		@Override, +		public boolean isAllowed(int c) {, +			return isAlpha(c) || isDigit(c) || '+' == c || '-' == c || '.' == c;, +		}, +	},, +	AUTHORITY {, +		@Override, +		public boolean isAllowed(int c) {, +			return isUnreserved(c) || isSubDelimiter(c) || ':' == c || '@' == c;, +		}, +	},, +	USER_INFO {, +		@Override, +		public boolean isAllowed(int c) {, +			return isUnreserved(c) || isSubDelimiter(c) || ':' == c;, +		}, +	},, +	HOST {, +		@Override, +		public boolean isAllowed(int c) {, +			return isUnreserved(c) || isSubDelimiter(c);, +		}, +	},]