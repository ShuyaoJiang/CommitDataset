[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultHandlerStrategiesBuilder.java, +import java.util.Locale;, +import java.util.Optional;, +import java.util.function.Function;, +	static final Function<ServerRequest, Optional<Locale>> DEFAULT_LOCALE_RESOLVER =, +			request -> request.headers().acceptLanguage().stream(), +					.map(Locale.LanguageRange::getRange), +					.map(Locale::forLanguageTag).findFirst();, +, +	private Function<ServerRequest, Optional<Locale>> localeResolver;, +, +		localeResolver(DEFAULT_LOCALE_RESOLVER);, +	public HandlerStrategies.Builder localeResolver(Function<ServerRequest, Optional<Locale>> localeResolver) {, +		Assert.notNull(localeResolver, "'localeResolver' must not be null");, +		this.localeResolver = localeResolver;, +		return this;, +	}, +, +	@Override, +				this.viewResolvers, localeResolver);, +		private final Function<ServerRequest, Optional<Locale>> localeResolver;, +, +, +				List<ViewResolver> viewResolvers,, +				Function<ServerRequest, Optional<Locale>> localeResolver) {, +			this.localeResolver = localeResolver;, +, +		@Override, +		public Function<ServerRequest, Optional<Locale>> localeResolver() {, +			return this.localeResolver;, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultHandlerStrategiesBuilder.java, +import java.util.Locale;, +import java.util.Optional;, +import java.util.function.Function;, +	static final Function<ServerRequest, Optional<Locale>> DEFAULT_LOCALE_RESOLVER =, +			request -> request.headers().acceptLanguage().stream(), +					.map(Locale.LanguageRange::getRange), +					.map(Locale::forLanguageTag).findFirst();, +, +	private Function<ServerRequest, Optional<Locale>> localeResolver;, +, +		localeResolver(DEFAULT_LOCALE_RESOLVER);, +	public HandlerStrategies.Builder localeResolver(Function<ServerRequest, Optional<Locale>> localeResolver) {, +		Assert.notNull(localeResolver, "'localeResolver' must not be null");, +		this.localeResolver = localeResolver;, +		return this;, +	}, +, +	@Override, +				this.viewResolvers, localeResolver);, +		private final Function<ServerRequest, Optional<Locale>> localeResolver;, +, +, +				List<ViewResolver> viewResolvers,, +				Function<ServerRequest, Optional<Locale>> localeResolver) {, +			this.localeResolver = localeResolver;, +, +		@Override, +		public Function<ServerRequest, Optional<Locale>> localeResolver() {, +			return this.localeResolver;, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultRenderingResponseBuilder.java, +/*, + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.reactive.function.server;, +, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.LinkedHashMap;, +import java.util.Locale;, +import java.util.Map;, +import java.util.stream.Stream;, +, +import reactor.core.publisher.Flux;, +import reactor.core.publisher.Mono;, +, +import org.springframework.core.Conventions;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpStatus;, +import org.springframework.http.MediaType;, +import org.springframework.http.server.reactive.ServerHttpResponse;, +import org.springframework.util.Assert;, +import org.springframework.web.reactive.result.view.ViewResolver;, +import org.springframework.web.server.ServerWebExchange;]