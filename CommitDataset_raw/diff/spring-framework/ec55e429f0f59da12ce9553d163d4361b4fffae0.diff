[+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +				String hostToUse = matcher.group(1).trim();, +				int portSeparatorIdx = hostToUse.lastIndexOf(":");, +				if (portSeparatorIdx > hostToUse.lastIndexOf("]")) {, +					host(hostToUse.substring(0, portSeparatorIdx));, +					port(Integer.parseInt(hostToUse.substring(portSeparatorIdx + 1)));, +				}, +				else {, +					host(hostToUse);, +					port(null);, +				}, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +				String hostToUse = matcher.group(1).trim();, +				int portSeparatorIdx = hostToUse.lastIndexOf(":");, +				if (portSeparatorIdx > hostToUse.lastIndexOf("]")) {, +					host(hostToUse.substring(0, portSeparatorIdx));, +					port(Integer.parseInt(hostToUse.substring(portSeparatorIdx + 1)));, +				}, +				else {, +					host(hostToUse);, +					port(null);, +				}, +++ b/spring-web/src/test/java/org/springframework/web/util/UriComponentsBuilderTests.java, +	@Test, +	public void fromHttpRequestForwardedHeaderWithHostPortAndWithoutServerPort() throws Exception {, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		request.addHeader("Forwarded", "proto=https; host=84.198.58.199:9090");, +		request.setScheme("http");, +		request.setServerName("example.com");, +		request.setRequestURI("/rest/mobile/users/1");, +, +		HttpRequest httpRequest = new ServletServerHttpRequest(request);, +		UriComponents result = UriComponentsBuilder.fromHttpRequest(httpRequest).build();, +, +		assertEquals("https", result.getScheme());, +		assertEquals("84.198.58.199", result.getHost());, +		assertEquals("/rest/mobile/users/1", result.getPath());, +		assertEquals(9090, result.getPort());, +		assertEquals("https://84.198.58.199:9090/rest/mobile/users/1", result.toUriString());, +	}, +, +	@Test, +	public void fromHttpRequestForwardedHeaderWithHostPortAndServerPort() throws Exception {, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		request.addHeader("Forwarded", "proto=https; host=84.198.58.199:9090");, +		request.setScheme("http");, +		request.setServerPort(8080);, +		request.setServerName("example.com");, +		request.setRequestURI("/rest/mobile/users/1");, +, +		HttpRequest httpRequest = new ServletServerHttpRequest(request);, +		UriComponents result = UriComponentsBuilder.fromHttpRequest(httpRequest).build();, +, +		assertEquals("https", result.getScheme());, +		assertEquals("84.198.58.199", result.getHost());, +		assertEquals("/rest/mobile/users/1", result.getPath());, +		assertEquals(9090, result.getPort());, +		assertEquals("https://84.198.58.199:9090/rest/mobile/users/1", result.toUriString());, +	}, +, +	@Test, +	public void fromHttpRequestForwardedHeaderWithoutHostPortAndWithServerPort() throws Exception {, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		request.addHeader("Forwarded", "proto=https; host=84.198.58.199");, +		request.setScheme("http");, +		request.setServerPort(8080);, +		request.setServerName("example.com");, +		request.setRequestURI("/rest/mobile/users/1");, +, +		HttpRequest httpRequest = new ServletServerHttpRequest(request);, +		UriComponents result = UriComponentsBuilder.fromHttpRequest(httpRequest).build();, +, +		assertEquals("https", result.getScheme());, +		assertEquals("84.198.58.199", result.getHost());, +		assertEquals("/rest/mobile/users/1", result.getPath());, +		assertEquals(-1, result.getPort());, +		assertEquals("https://84.198.58.199/rest/mobile/users/1", result.toUriString());, +	}]