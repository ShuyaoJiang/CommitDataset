[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +			if (beanName.equals(beanMethod.getConfigurationClass().getBeanName())) {, +				throw new BeanDefinitionStoreException(beanMethod.getConfigurationClass().getResource().getDescription(),, +						beanName, "Bean name derived from @Bean method '" + beanMethod.getMetadata().getMethodName() +, +						"' clashes with bean name for containing configuration class; please make those names unique!");, +			}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +			if (beanName.equals(beanMethod.getConfigurationClass().getBeanName())) {, +				throw new BeanDefinitionStoreException(beanMethod.getConfigurationClass().getResource().getDescription(),, +						beanName, "Bean name derived from @Bean method '" + beanMethod.getMetadata().getMethodName() +, +						"' clashes with bean name for containing configuration class; please make those names unique!");, +			}, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, +	@Test(expected = BeanDefinitionStoreException.class), +	public void testNameClashBetweenConfigurationClassAndBean() {, +		ApplicationContext ctx = new AnnotationConfigApplicationContext(MyTestBean.class);, +		ctx.getBean("myTestBean", TestBean.class);, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +			if (beanName.equals(beanMethod.getConfigurationClass().getBeanName())) {, +				throw new BeanDefinitionStoreException(beanMethod.getConfigurationClass().getResource().getDescription(),, +						beanName, "Bean name derived from @Bean method '" + beanMethod.getMetadata().getMethodName() +, +						"' clashes with bean name for containing configuration class; please make those names unique!");, +			}, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, +	@Test(expected = BeanDefinitionStoreException.class), +	public void testNameClashBetweenConfigurationClassAndBean() {, +		ApplicationContext ctx = new AnnotationConfigApplicationContext(MyTestBean.class);, +		ctx.getBean("myTestBean", TestBean.class);, +	}, +, +++ b/spring-context/src/test/java/org/springframework/context/annotation/MyTestBean.java, +/*, + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.context.annotation;, +, +/**, + * @author Juergen Hoeller, + */, +@Configuration, +class MyTestBean {, +, +	@Bean, +	public org.springframework.tests.sample.beans.TestBean myTestBean() {, +		return new org.springframework.tests.sample.beans.TestBean();, +	}, +, +}]