[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/BatchUpdateUtils.java, + * Generic utility methods for working with JDBC batch statements., + * Mainly for internal use within the framework., +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/BatchUpdateUtils.java, + * Generic utility methods for working with JDBC batch statements., + * Mainly for internal use within the framework., +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.java, +		return batchUpdate(sql, SqlParameterSourceUtils.createBatch(batchValues));, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/BatchUpdateUtils.java, + * Generic utility methods for working with JDBC batch statements., + * Mainly for internal use within the framework., +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.java, +		return batchUpdate(sql, SqlParameterSourceUtils.createBatch(batchValues));, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/SqlParameterSourceUtils.java, +import java.util.Arrays;, +import java.util.Collection;, + * Class that provides helper methods for the use of {@link SqlParameterSource},, + * in particular with {@link NamedParameterJdbcTemplate}., + * @author Juergen Hoeller, +public abstract class SqlParameterSourceUtils {, +	 * Create an array of {@link SqlParameterSource} objects populated with data, +	 * from the values passed in (either a {@link Map} or a bean object)., +	 * This will define what is included in a batch operation., +	 * @param candidates object array of objects containing the values to be used, +	 * @return an array of {@link SqlParameterSource}, +	 * @see MapSqlParameterSource, +	 * @see BeanPropertySqlParameterSource, +	 * @see NamedParameterJdbcTemplate#batchUpdate(String, SqlParameterSource[])), +	@SuppressWarnings("unchecked"), +	public static SqlParameterSource[] createBatch(Object... candidates) {, +		return createBatch(Arrays.asList(candidates));, +	}, +, +	/**, +	 * Create an array of {@link SqlParameterSource} objects populated with data, +	 * from the values passed in (either a {@link Map} or a bean object)., +	 * This will define what is included in a batch operation., +	 * @param candidates collection of objects containing the values to be used, +	 * @return an array of {@link SqlParameterSource}, +	 * @since 5.0.2, +	 * @see MapSqlParameterSource, +	 * @see BeanPropertySqlParameterSource, +	 * @see NamedParameterJdbcTemplate#batchUpdate(String, SqlParameterSource[])), +	 */, +	@SuppressWarnings("unchecked"), +	public static SqlParameterSource[] createBatch(Collection<?> candidates) {, +		SqlParameterSource[] batch = new SqlParameterSource[candidates.size()];, +		int i = 0;, +		for (Object candidate : candidates) {, +			batch[i] = (candidate instanceof Map ? new MapSqlParameterSource((Map<String, ?>) candidate) :, +					new BeanPropertySqlParameterSource(candidate));, +			i++;, +	 * Create an array of {@link MapSqlParameterSource} objects populated with data from, +	 * the values passed in. This will define what is included in a batch operation., +	 * @param valueMaps array of {@link Map} instances containing the values to be used, +	 * @return an array of {@link SqlParameterSource}, +	 * @see MapSqlParameterSource, +	 * @see NamedParameterJdbcTemplate#batchUpdate(String, Map[]), +	public static SqlParameterSource[] createBatch(Map<String, ?>[] valueMaps) {, +		SqlParameterSource[] batch = new SqlParameterSource[valueMaps.length];, +		for (int i = 0; i < valueMaps.length; i++) {, +			batch[i] = new MapSqlParameterSource(valueMaps[i]);, +	 * @param source the source of parameter values and type information, +	 * @param parameterSource the source of parameter names]