[+++ b/org.springframework.core/src/main/java/org/springframework/util/MediaType.java, +		if (!CollectionUtils.isEmpty(parameters)) {, +		String[] parts = StringUtils.tokenizeToStringArray(mediaType, ";");, +, +		if (parts.length <= 1) {, +			parameters = new LinkedHashMap<String, String>(parts.length - 1);, +		}, +		for (int i = 1; i < parts.length; i++) {, +			String part = parts[i];, +			int idx = part.indexOf('=');, +			if (idx != -1) {, +				String name = part.substring(0, idx);, +				String value = part.substring(idx + 1, part.length());, +				parameters.put(name, value);, +		String fullType = parts[0].trim();, +, +		// java.net.HttpURLConnection returns a *; q=.2 Accept header, +		if (WILDCARD_TYPE.equals(fullType)) {, +			fullType = "*/*";, +		}, +		int idx = fullType.indexOf('/');, +		String type = fullType.substring(0, idx);, +		String subtype = fullType.substring(idx + 1, fullType.length());, +++ b/org.springframework.core/src/main/java/org/springframework/util/MediaType.java, +		if (!CollectionUtils.isEmpty(parameters)) {, +		String[] parts = StringUtils.tokenizeToStringArray(mediaType, ";");, +, +		if (parts.length <= 1) {, +			parameters = new LinkedHashMap<String, String>(parts.length - 1);, +		}, +		for (int i = 1; i < parts.length; i++) {, +			String part = parts[i];, +			int idx = part.indexOf('=');, +			if (idx != -1) {, +				String name = part.substring(0, idx);, +				String value = part.substring(idx + 1, part.length());, +				parameters.put(name, value);, +		String fullType = parts[0].trim();, +, +		// java.net.HttpURLConnection returns a *; q=.2 Accept header, +		if (WILDCARD_TYPE.equals(fullType)) {, +			fullType = "*/*";, +		}, +		int idx = fullType.indexOf('/');, +		String type = fullType.substring(0, idx);, +		String subtype = fullType.substring(idx + 1, fullType.length());, +++ b/org.springframework.core/src/test/java/org/springframework/util/MediaTypeTest.java, +	public void parseURLConnectionMediaType() throws Exception {, +		String s = "*; q=.2";, +		MediaType mediaType = MediaType.parseMediaType(s);, +		assertEquals("Invalid type", "*", mediaType.getType());, +		assertEquals("Invalid subtype", "*", mediaType.getSubtype());, +		assertEquals("Invalid quality factor", 0.2D, mediaType.getQualityValue(), 0D);, +	}, +, +	@Test]