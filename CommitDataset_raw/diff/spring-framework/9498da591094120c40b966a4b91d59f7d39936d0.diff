[+++ b/spring-web/src/main/java/org/springframework/web/server/WebSession.java, +	 * Save the session through the {@code WebSessionStore} as follows:, +	 * <ul>, +	 * <li>If the session is new (i.e. created but never persisted), it must have, +	 * been started explicitly via {@link #start()} or implicitly by adding, +	 * attributes, or otherwise this method should have no effect., +	 * <li>If the session was retrieved through the {@code WebSessionStore},, +	 * the implementation for this method must check whether the session was, +	 * {@link #invalidate() invalidated} and if so return an error., +	 * </ul>, +	 * <p>Note that this method is not intended for direct use by applications., +	 * Instead it is automatically invoked just before the response is, +	 * committed is committed., +++ b/spring-web/src/main/java/org/springframework/web/server/WebSession.java, +	 * Save the session through the {@code WebSessionStore} as follows:, +	 * <ul>, +	 * <li>If the session is new (i.e. created but never persisted), it must have, +	 * been started explicitly via {@link #start()} or implicitly by adding, +	 * attributes, or otherwise this method should have no effect., +	 * <li>If the session was retrieved through the {@code WebSessionStore},, +	 * the implementation for this method must check whether the session was, +	 * {@link #invalidate() invalidated} and if so return an error., +	 * </ul>, +	 * <p>Note that this method is not intended for direct use by applications., +	 * Instead it is automatically invoked just before the response is, +	 * committed is committed., +++ b/spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java, +, +			checkMaxSessionsLimit();, +, +			// Implicitly started session.., +, +			if (isStarted()) {, +				// Save, +, +				// Unless it was invalidated, +				if (this.state.get().equals(State.EXPIRED)) {, +					InMemoryWebSessionStore.this.sessions.remove(this.getId());, +					return Mono.error(new IllegalStateException("Session was invalidated"));, +				}, +			}, +, +		private void checkMaxSessionsLimit() {, +			if (sessions.size() >= maxSessions) {, +				expiredSessionChecker.removeExpiredSessions(clock.instant());, +				if (sessions.size() >= maxSessions) {, +					throw new IllegalStateException("Max sessions limit reached: " + sessions.size());, +				}, +			}, +		}, +, +++ b/spring-web/src/main/java/org/springframework/web/server/WebSession.java, +	 * Save the session through the {@code WebSessionStore} as follows:, +	 * <ul>, +	 * <li>If the session is new (i.e. created but never persisted), it must have, +	 * been started explicitly via {@link #start()} or implicitly by adding, +	 * attributes, or otherwise this method should have no effect., +	 * <li>If the session was retrieved through the {@code WebSessionStore},, +	 * the implementation for this method must check whether the session was, +	 * {@link #invalidate() invalidated} and if so return an error., +	 * </ul>, +	 * <p>Note that this method is not intended for direct use by applications., +	 * Instead it is automatically invoked just before the response is, +	 * committed is committed., +++ b/spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java, +, +			checkMaxSessionsLimit();, +, +			// Implicitly started session.., +, +			if (isStarted()) {, +				// Save, +, +				// Unless it was invalidated, +				if (this.state.get().equals(State.EXPIRED)) {, +					InMemoryWebSessionStore.this.sessions.remove(this.getId());, +					return Mono.error(new IllegalStateException("Session was invalidated"));, +				}, +			}, +, +		private void checkMaxSessionsLimit() {, +			if (sessions.size() >= maxSessions) {, +				expiredSessionChecker.removeExpiredSessions(clock.instant());, +				if (sessions.size() >= maxSessions) {, +					throw new IllegalStateException("Max sessions limit reached: " + sessions.size());, +				}, +			}, +		}, +, +++ b/spring-web/src/test/java/org/springframework/web/server/session/InMemoryWebSessionStoreTests.java, +		session1.start();, +	@Test // SPR-17051, +	public void sessionInvalidatedBeforeSave() {, +		// Request 1 creates session, +		WebSession session1 = this.store.createWebSession().block();, +		assertNotNull(session1);, +		String id = session1.getId();, +		session1.start();, +		session1.save().block();, +]