[+++ b/spring-core/src/main/java/org/springframework/core/OrderComparator.java, + * Copyright 2002-2016 the original author or authors., +	public interface OrderSourceProvider {, +++ b/spring-core/src/main/java/org/springframework/core/OrderComparator.java, + * Copyright 2002-2016 the original author or authors., +	public interface OrderSourceProvider {, +++ b/spring-test/src/main/java/org/springframework/test/context/jdbc/Sql.java, + * Copyright 2002-2016 the original author or authors., +, +	/**, +	 * Enumeration of <em>phases</em> that dictate when SQL scripts are executed., +	 */, +	enum ExecutionPhase {, +, +		/**, +		 * The configured SQL scripts and statements will be executed, +		 * <em>before</em> the corresponding test method., +		 */, +		BEFORE_TEST_METHOD,, +, +		/**, +		 * The configured SQL scripts and statements will be executed, +		 * <em>after</em> the corresponding test method., +		 */, +		AFTER_TEST_METHOD, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/OrderComparator.java, + * Copyright 2002-2016 the original author or authors., +	public interface OrderSourceProvider {, +++ b/spring-test/src/main/java/org/springframework/test/context/jdbc/Sql.java, + * Copyright 2002-2016 the original author or authors., +, +	/**, +	 * Enumeration of <em>phases</em> that dictate when SQL scripts are executed., +	 */, +	enum ExecutionPhase {, +, +		/**, +		 * The configured SQL scripts and statements will be executed, +		 * <em>before</em> the corresponding test method., +		 */, +		BEFORE_TEST_METHOD,, +, +		/**, +		 * The configured SQL scripts and statements will be executed, +		 * <em>after</em> the corresponding test method., +		 */, +		AFTER_TEST_METHOD, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/context/jdbc/SqlConfig.java, + * Copyright 2002-2016 the original author or authors., +, +	/**, +	 * Enumeration of <em>modes</em> that dictate whether SQL scripts should be, +	 * executed within a transaction and what the transaction propagation behavior, +	 * should be., +	 */, +	enum TransactionMode {, +, +		/**, +		 * Indicates that the <em>default</em> transaction mode should be used., +		 * <p>The meaning of <em>default</em> depends on the context in which, +		 * {@code @SqlConfig} is declared:, +		 * <ul>, +		 * <li>If {@code @SqlConfig} is declared <strong>only</strong> locally,, +		 * the default transaction mode is {@link #INFERRED}.</li>, +		 * <li>If {@code @SqlConfig} is declared globally, the default transaction, +		 * mode is {@link #INFERRED}.</li>, +		 * <li>If {@code @SqlConfig} is declared globally <strong>and</strong>, +		 * locally, the default transaction mode for the local declaration is, +		 * inherited from the global declaration.</li>, +		 * </ul>, +		 */, +		DEFAULT,, +, +		/**, +		 * Indicates that the transaction mode to use when executing SQL, +		 * scripts should be <em>inferred</em> using the rules listed below., +		 * In the context of these rules, the term "<em>available</em>", +		 * means that the bean for the data source or transaction manager, +		 * is either explicitly specified via a corresponding annotation, +		 * attribute in {@code @SqlConfig} or discoverable via conventions. See, +		 * {@link org.springframework.test.context.transaction.TestContextTransactionUtils TestContextTransactionUtils}, +		 * for details on the conventions used to discover such beans in, +		 * the {@code ApplicationContext}., +		 *, +		 * <h4>Inference Rules</h4>, +		 * <ol>, +		 * <li>If neither a transaction manager nor a data source is, +		 * available, an exception will be thrown., +		 * <li>If a transaction manager is not available but a data source, +		 * is available, SQL scripts will be executed directly against the, +		 * data source without a transaction., +		 * <li>If a transaction manager is available:, +		 * <ul>, +		 * <li>If a data source is not available, an attempt will be made, +		 * to retrieve it from the transaction manager by using reflection, +		 * to invoke a public method named {@code getDataSource()} on the]