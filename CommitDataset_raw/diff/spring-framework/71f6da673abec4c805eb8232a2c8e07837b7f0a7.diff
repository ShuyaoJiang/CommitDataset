[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassUtils.java, +		if(metadata.isInterface()) {, +			return false; // do not consider an interface or an annotation, +		}, +		return metadata.isAnnotated(Import.class.getName()) ||, +				metadata.isAnnotated(Component.class.getName()) ||, +				metadata.hasAnnotatedMethods(Bean.class.getName());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassUtils.java, +		if(metadata.isInterface()) {, +			return false; // do not consider an interface or an annotation, +		}, +		return metadata.isAnnotated(Import.class.getName()) ||, +				metadata.isAnnotated(Component.class.getName()) ||, +				metadata.hasAnnotatedMethods(Bean.class.getName());, +++ b/spring-context/src/test/java/org/springframework/context/annotation/configuration/ImportAnnotationDetectionTests.java, +import org.springframework.stereotype.Service;, +import static org.junit.Assert.*;, +, +	@Test, +	public void importFromBean() throws Exception {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(ImportFromBean.class);, +		ctx.refresh();, +		assertThat(ctx.containsBean("importAnnotationDetectionTests.ImportFromBean"), is(true));, +		assertThat(ctx.containsBean("testBean1"), is(true));, +		assertThat(ctx.getBean("testBean1", TestBean.class).getName(), is("1"));, +	}, +, +, +	@MetaImport1, +	static class ImportFromBean {, +, +	}]