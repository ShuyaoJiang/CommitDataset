[+++ b/spring-framework-reference/src/validation.xml, +				When an instance of this class is validated by a JSR-303 Validator, these constraints will be enforced., +				To learn how to setup a JSR-303 implementation as a Spring bean, keep reading., +				This allows a <code>javax.validation.Validator</code> to be injected wherever validation is needed in your application., +				A JSR-303 provider, such as Hibernate Validator, is expected to be present in the classpath and will be detected automatically., +					LocalValidatorFactoryBean implements both <code>javax.validation.Validator</code> and <code>org.springframework.validation.Validator</code>., +					Inject a reference to one of these two interfaces into beans that need to invoke validation logic., +					Inject a reference to <code>org.springframework.validation.Validator</code> if your bean depends on the existing Spring Validation API:, +    ..., +				<para>, +					As you can see, the ConstraintValidator implementation above can have its dependencies @Autowired by Spring like any other bean., +				</para>			, +					To configure such a Validator for use by Spring MVC, simply inject a <code>LocalValidatorFactoryBean</code> reference into the <code>WebBindingInitializer</code>., +					With this configuration, anytime a @Valid @Controller method argument is encountered, it will be validated using the JSR-303 provider.]