[+++ b/spring-test/src/test/java/org/springframework/test/context/ClassLevelDirtiesContextTestNGTests.java, +/*, + * Copyright 2002-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.test.context;, +, +import java.util.concurrent.atomic.AtomicInteger;, +, +import org.junit.AfterClass;, +import org.junit.BeforeClass;, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.junit.runners.JUnit4;, +, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.test.annotation.DirtiesContext;, +import org.springframework.test.annotation.DirtiesContext.ClassMode;, +import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;, +import org.springframework.test.context.support.DirtiesContextTestExecutionListener;, +import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;, +import org.springframework.test.context.testng.TrackingTestNGTestListener;, +, +import org.testng.TestNG;, +, +import static org.junit.Assert.*;, +import static org.springframework.test.context.ContextCacheTestUtils.*;, +, +/**, + * JUnit 4 based integration test which verifies correct {@linkplain ContextCache, + * application context caching} in conjunction with Spring's TestNG support, + * and {@link DirtiesContext @DirtiesContext} at the class level., + * , + * <p>This class is a direct copy of {@link ClassLevelDirtiesContextTests},, + * modified to verify behavior in conjunction with TestNG., + *, + * @author Sam Brannen, + * @since 4.2, + */, +@RunWith(JUnit4.class), +public class ClassLevelDirtiesContextTestNGTests {, +, +	private static final AtomicInteger cacheHits = new AtomicInteger(0);, +	private static final AtomicInteger cacheMisses = new AtomicInteger(0);, +, +, +	private static final void runTestClassAndAssertStats(Class<?> testClass, int expectedTestCount) {, +		final int expectedTestFailureCount = 0;, +		final int expectedTestStartedCount = expectedTestCount;, +		final int expectedTestFinishedCount = expectedTestCount;, +, +		final TrackingTestNGTestListener listener = new TrackingTestNGTestListener();, +		final TestNG testNG = new TestNG();, +		testNG.addListener(listener);, +		testNG.setTestClasses(new Class<?>[] { testClass });, +		testNG.setVerbose(0);, +		testNG.run();, +, +		assertEquals("Failures for test class [" + testClass + "].", expectedTestFailureCount,, +			listener.testFailureCount);, +		assertEquals("Tests started for test class [" + testClass + "].", expectedTestStartedCount,, +			listener.testStartCount);, +		assertEquals("Successful tests for test class [" + testClass + "].", expectedTestFinishedCount,, +			listener.testSuccessCount);, +	}, +, +	@BeforeClass, +	public static void verifyInitialCacheState() {, +		ContextCache contextCache = TestContextManager.contextCache;, +		contextCache.clear();, +		contextCache.clearStatistics();, +		cacheHits.set(0);, +		cacheMisses.set(0);, +		assertContextCacheStatistics("BeforeClass", 0, cacheHits.get(), cacheMisses.get());, +	}, +, +	@Test, +	public void verifyDirtiesContextBehavior() throws Exception {, +, +		assertBehaviorForCleanTestCase();, +, +		runTestClassAndAssertStats(ClassLevelDirtiesContextWithCleanMethodsAndDefaultModeTestCase.class, 1);, +		assertContextCacheStatistics("after class-level @DirtiesContext with clean test method and default class mode",, +			0, cacheHits.incrementAndGet(), cacheMisses.get());, +		assertBehaviorForCleanTestCase();, +]