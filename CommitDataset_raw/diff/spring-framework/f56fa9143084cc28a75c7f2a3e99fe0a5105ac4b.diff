[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.java, + * Copyright 2002-2019 the original author or authors., + * {@link PlaceholderConfigurerSupport} subclass that resolves ${...} placeholders against, + * {@link #setLocation local} {@link #setProperties properties} and/or system properties, + * <li>existing configuration makes use of the {@link #setSystemPropertiesMode(int) "systemPropertiesMode"}, + * and/or {@link #setSystemPropertiesModeName(String) "systemPropertiesModeName"} properties., + * Users are encouraged to move away from using these settings, and rather configure property, + * source search order through the container's {@code Environment}; however, exact preservation, + * of functionality may be maintained by continuing to use {@code PropertyPlaceholderConfigurer}., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.java, + * Copyright 2002-2019 the original author or authors., + * {@link PlaceholderConfigurerSupport} subclass that resolves ${...} placeholders against, + * {@link #setLocation local} {@link #setProperties properties} and/or system properties, + * <li>existing configuration makes use of the {@link #setSystemPropertiesMode(int) "systemPropertiesMode"}, + * and/or {@link #setSystemPropertiesModeName(String) "systemPropertiesModeName"} properties., + * Users are encouraged to move away from using these settings, and rather configure property, + * source search order through the container's {@code Environment}; however, exact preservation, + * of functionality may be maintained by continuing to use {@code PropertyPlaceholderConfigurer}., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, + * Copyright 2002-2019 the original author or authors., +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.java, + * Copyright 2002-2019 the original author or authors., + * {@link PlaceholderConfigurerSupport} subclass that resolves ${...} placeholders against, + * {@link #setLocation local} {@link #setProperties properties} and/or system properties, + * <li>existing configuration makes use of the {@link #setSystemPropertiesMode(int) "systemPropertiesMode"}, + * and/or {@link #setSystemPropertiesModeName(String) "systemPropertiesModeName"} properties., + * Users are encouraged to move away from using these settings, and rather configure property, + * source search order through the container's {@code Environment}; however, exact preservation, + * of functionality may be maintained by continuing to use {@code PropertyPlaceholderConfigurer}., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, + * Copyright 2002-2019 the original author or authors., +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ReplaceOverride.java, + * Copyright 2002-2019 the original author or authors., +		Class<?>[] parameterTypes = method.getParameterTypes();, +			if (!parameterTypes[i].getName().contains(identifier)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.java, + * Copyright 2002-2019 the original author or authors., + * {@link PlaceholderConfigurerSupport} subclass that resolves ${...} placeholders against, + * {@link #setLocation local} {@link #setProperties properties} and/or system properties, + * <li>existing configuration makes use of the {@link #setSystemPropertiesMode(int) "systemPropertiesMode"}, + * and/or {@link #setSystemPropertiesModeName(String) "systemPropertiesModeName"} properties., + * Users are encouraged to move away from using these settings, and rather configure property, + * source search order through the container's {@code Environment}; however, exact preservation, + * of functionality may be maintained by continuing to use {@code PropertyPlaceholderConfigurer}., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, + * Copyright 2002-2019 the original author or authors., +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ReplaceOverride.java, + * Copyright 2002-2019 the original author or authors., +		Class<?>[] parameterTypes = method.getParameterTypes();, +			if (!parameterTypes[i].getName().contains(identifier)) {, +++ b/spring-beans/src/test/java/org/springframework/beans/DirectFieldAccessorTests.java, + * Copyright 2002-2019 the original author or authors., +	public void withShadowedField() {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.java, + * Copyright 2002-2019 the original author or authors., + * {@link PlaceholderConfigurerSupport} subclass that resolves ${...} placeholders against, + * {@link #setLocation local} {@link #setProperties properties} and/or system properties, + * <li>existing configuration makes use of the {@link #setSystemPropertiesMode(int) "systemPropertiesMode"}, + * and/or {@link #setSystemPropertiesModeName(String) "systemPropertiesModeName"} properties., + * Users are encouraged to move away from using these settings, and rather configure property, + * source search order through the container's {@code Environment}; however, exact preservation, + * of functionality may be maintained by continuing to use {@code PropertyPlaceholderConfigurer}., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, + * Copyright 2002-2019 the original author or authors., +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ReplaceOverride.java, + * Copyright 2002-2019 the original author or authors., +		Class<?>[] parameterTypes = method.getParameterTypes();, +			if (!parameterTypes[i].getName().contains(identifier)) {, +++ b/spring-beans/src/test/java/org/springframework/beans/DirectFieldAccessorTests.java, + * Copyright 2002-2019 the original author or authors., +	public void withShadowedField() {, +++ b/spring-context/src/test/java/org/springframework/aop/framework/JdkDynamicProxyTests.java, + * Copyright 2002-2019 the original author or authors., +	public void testProxyIsJustInterface() {, +	public void testInterceptorIsInvokedWithNoTarget() {, +	public void testTargetCanGetInvocationWithPrivateClass() {, +	public void testEqualsAndHashCodeDefined() {, +	public void testVarargsWithEnumArray() {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.java, + * Copyright 2002-2019 the original author or authors., + * {@link PlaceholderConfigurerSupport} subclass that resolves ${...} placeholders against, + * {@link #setLocation local} {@link #setProperties properties} and/or system properties, + * <li>existing configuration makes use of the {@link #setSystemPropertiesMode(int) "systemPropertiesMode"}, + * and/or {@link #setSystemPropertiesModeName(String) "systemPropertiesModeName"} properties., + * Users are encouraged to move away from using these settings, and rather configure property, + * source search order through the container's {@code Environment}; however, exact preservation, + * of functionality may be maintained by continuing to use {@code PropertyPlaceholderConfigurer}., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, + * Copyright 2002-2019 the original author or authors., +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ReplaceOverride.java, + * Copyright 2002-2019 the original author or authors., +		Class<?>[] parameterTypes = method.getParameterTypes();, +			if (!parameterTypes[i].getName().contains(identifier)) {, +++ b/spring-beans/src/test/java/org/springframework/beans/DirectFieldAccessorTests.java, + * Copyright 2002-2019 the original author or authors.]