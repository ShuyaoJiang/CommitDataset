[+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +					long count = countDown.addAndGet(-buffer.readableByteCount());, +				}), +				.takeUntil(buffer -> countDown.get() <= 0);, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +					long count = countDown.addAndGet(-buffer.readableByteCount());, +				}), +				.takeUntil(buffer -> countDown.get() <= 0);, +++ b/spring-core/src/test/java/org/springframework/core/io/buffer/DataBufferUtilsTests.java, +, +		Flux<DataBuffer> result = DataBufferUtils.takeUntilByteCount(, +				Flux.just(stringBuffer("foo"), stringBuffer("bar")), 5L);, +	}, +	@Test, +	public void takeUntilByteCountExact() {, +, +		DataBuffer extraBuffer = stringBuffer("baz");, +, +		Flux<DataBuffer> result = DataBufferUtils.takeUntilByteCount(, +				Flux.just(stringBuffer("foo"), stringBuffer("bar"), extraBuffer), 6L);, +, +		StepVerifier.create(result), +				.consumeNextWith(stringConsumer("foo")), +				.consumeNextWith(stringConsumer("bar")), +				.expectComplete(), +				.verify(Duration.ofSeconds(5));, +, +		release(extraBuffer);]