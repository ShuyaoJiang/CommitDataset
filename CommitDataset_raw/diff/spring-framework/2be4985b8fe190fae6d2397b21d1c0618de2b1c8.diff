[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java, +			super(aif.getAspectMetadata().getPerClausePointcut(), (MethodBeforeAdvice), +					(method, args, target) -> aif.getAspectInstance());// Simply instantiate the aspect, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java, +			super(aif.getAspectMetadata().getPerClausePointcut(), (MethodBeforeAdvice), +					(method, args, target) -> aif.getAspectInstance());// Simply instantiate the aspect, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, +		Arrays.sort(constructors, (c1, c2) -> {, +		Arrays.sort(factoryMethods, (fm1, fm2) -> {, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java, +			super(aif.getAspectMetadata().getPerClausePointcut(), (MethodBeforeAdvice), +					(method, args, target) -> aif.getAspectInstance());// Simply instantiate the aspect, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, +		Arrays.sort(constructors, (c1, c2) -> {, +		Arrays.sort(factoryMethods, (fm1, fm2) -> {, +++ b/spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java, +	private static final EntityResolver NO_OP_ENTITY_RESOLVER =, +			(publicId, systemId) -> new InputSource(new StringReader(""));, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java, +			super(aif.getAspectMetadata().getPerClausePointcut(), (MethodBeforeAdvice), +					(method, args, target) -> aif.getAspectInstance());// Simply instantiate the aspect, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, +		Arrays.sort(constructors, (c1, c2) -> {, +		Arrays.sort(factoryMethods, (fm1, fm2) -> {, +++ b/spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java, +	private static final EntityResolver NO_OP_ENTITY_RESOLVER =, +			(publicId, systemId) -> new InputSource(new StringReader(""));, +++ b/spring-test/src/main/java/org/springframework/mock/jndi/SimpleNamingContextBuilder.java, +	@SuppressWarnings("unchecked"), +		return environment1 -> new SimpleNamingContext("", boundObjects, (Hashtable<String, Object>) environment1);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java, +			super(aif.getAspectMetadata().getPerClausePointcut(), (MethodBeforeAdvice), +					(method, args, target) -> aif.getAspectInstance());// Simply instantiate the aspect, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, +		Arrays.sort(constructors, (c1, c2) -> {, +		Arrays.sort(factoryMethods, (fm1, fm2) -> {, +++ b/spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java, +	private static final EntityResolver NO_OP_ENTITY_RESOLVER =, +			(publicId, systemId) -> new InputSource(new StringReader(""));, +++ b/spring-test/src/main/java/org/springframework/mock/jndi/SimpleNamingContextBuilder.java, +	@SuppressWarnings("unchecked"), +		return environment1 -> new SimpleNamingContext("", boundObjects, (Hashtable<String, Object>) environment1);, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.java, +		return servletContext -> {, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java, +			super(aif.getAspectMetadata().getPerClausePointcut(), (MethodBeforeAdvice), +					(method, args, target) -> aif.getAspectInstance());// Simply instantiate the aspect, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, +		Arrays.sort(constructors, (c1, c2) -> {, +		Arrays.sort(factoryMethods, (fm1, fm2) -> {, +++ b/spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java, +	private static final EntityResolver NO_OP_ENTITY_RESOLVER =, +			(publicId, systemId) -> new InputSource(new StringReader(""));, +++ b/spring-test/src/main/java/org/springframework/mock/jndi/SimpleNamingContextBuilder.java, +	@SuppressWarnings("unchecked"), +		return environment1 -> new SimpleNamingContext("", boundObjects, (Hashtable<String, Object>) environment1);, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.java, +		return servletContext -> {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMapping.java, +		return (info1, info2) -> info1.compareTo(info2, request);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java, +			super(aif.getAspectMetadata().getPerClausePointcut(), (MethodBeforeAdvice), +					(method, args, target) -> aif.getAspectInstance());// Simply instantiate the aspect, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, +		Arrays.sort(constructors, (c1, c2) -> {, +		Arrays.sort(factoryMethods, (fm1, fm2) -> {, +++ b/spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java, +	private static final EntityResolver NO_OP_ENTITY_RESOLVER =, +			(publicId, systemId) -> new InputSource(new StringReader(""));, +++ b/spring-test/src/main/java/org/springframework/mock/jndi/SimpleNamingContextBuilder.java, +	@SuppressWarnings("unchecked"), +		return environment1 -> new SimpleNamingContext("", boundObjects, (Hashtable<String, Object>) environment1);, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.java, +		return servletContext -> {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMapping.java, +		return (info1, info2) -> info1.compareTo(info2, request);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java, +		return builder.build().expand(name -> uriVars.getOrDefault(name, UriComponents.UriTemplateVariables.SKIP_VALUE));, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java, +			super(aif.getAspectMetadata().getPerClausePointcut(), (MethodBeforeAdvice), +					(method, args, target) -> aif.getAspectInstance());// Simply instantiate the aspect, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, +		Arrays.sort(constructors, (c1, c2) -> {, +		Arrays.sort(factoryMethods, (fm1, fm2) -> {, +++ b/spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java, +	private static final EntityResolver NO_OP_ENTITY_RESOLVER =, +			(publicId, systemId) -> new InputSource(new StringReader(""));, +++ b/spring-test/src/main/java/org/springframework/mock/jndi/SimpleNamingContextBuilder.java, +	@SuppressWarnings("unchecked"), +		return environment1 -> new SimpleNamingContext("", boundObjects, (Hashtable<String, Object>) environment1);, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.java, +		return servletContext -> {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMapping.java, +		return (info1, info2) -> info1.compareTo(info2, request);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java, +		return builder.build().expand(name -> uriVars.getOrDefault(name, UriComponents.UriTemplateVariables.SKIP_VALUE));, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/standard/StandardWebSocketHandlerAdapter.java, +			session.addMessageHandler((MessageHandler.Partial<String>), +					(message, isLast) -> handleTextMessage(session, message, isLast));, +			session.addMessageHandler((MessageHandler.Partial<ByteBuffer>)]