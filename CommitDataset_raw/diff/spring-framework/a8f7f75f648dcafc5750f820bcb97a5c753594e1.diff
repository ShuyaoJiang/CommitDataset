[+++ b/build.gradle, +		options.encoding = 'UTF-8', +		options.encoding = 'UTF-8', +++ b/build.gradle, +		options.encoding = 'UTF-8', +		options.encoding = 'UTF-8', +++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, +++ b/build.gradle, +		options.encoding = 'UTF-8', +		options.encoding = 'UTF-8', +++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, +++ b/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java, +	@Test  // SPR-3671, +	@Test  // SPR-3671, +	@Test  // SPR-3671, +	@Test  // SPR-3671, +	@Test  // SPR-3671, +	@Test  // SPR-7779, +	@Test  // SPR-9420, +	@Test  // SPR-11806, +++ b/build.gradle, +		options.encoding = 'UTF-8', +		options.encoding = 'UTF-8', +++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, +++ b/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java, +	@Test  // SPR-3671, +	@Test  // SPR-3671, +	@Test  // SPR-3671, +	@Test  // SPR-3671, +	@Test  // SPR-3671, +	@Test  // SPR-7779, +	@Test  // SPR-9420, +	@Test  // SPR-11806, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * for {@code form-data}, optionally encoding the filename using the RFC 5987., +	 * @since 4.3.3, +	 * @see #setContentDispositionFormData(String, String), +	 * @see <a href="https://tools.ietf.org/html/rfc7230#section-3.2.4">RFC 7230 Section 3.2.4</a>, +				builder.append(encodeHeaderFieldParam(filename, charset));, +	/**, +	 * Encode the given header field param as describe in RFC 5987., +	 * @param input the header field param, +	 * @param charset the charset of the header field param string, +	 * @return the encoded header field param, +	 * @see <a href="https://tools.ietf.org/html/rfc5987">RFC 5987</a>, +	 */, +	static String encodeHeaderFieldParam(String input, Charset charset) {, +		Assert.notNull(input, "Input String should not be null");, +		Assert.notNull(charset, "Charset should not be null");, +		if (StandardCharsets.US_ASCII.equals(charset)) {, +			return input;, +		}, +		Assert.isTrue(StandardCharsets.UTF_8.equals(charset) || StandardCharsets.ISO_8859_1.equals(charset),, +				"Charset should be UTF-8 or ISO-8859-1");, +		byte[] source = input.getBytes(charset);, +		int len = source.length;, +		StringBuilder sb = new StringBuilder(len << 1);, +		sb.append(charset.name());, +		sb.append("''");, +		for (byte b : source) {, +			if (isRFC5987AttrChar(b)) {, +				sb.append((char) b);, +			}, +			else {, +				sb.append('%');, +				char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16));, +				char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16));, +				sb.append(hex1);, +				sb.append(hex2);, +			}, +		}, +		return sb.toString();, +	}, +, +	private static boolean isRFC5987AttrChar(byte c) {, +		return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') ||, +				c == '!' || c == '#' || c == '$' || c == '&' || c == '+' || c == '-' ||, +				c == '.' || c == '^' || c == '_' || c == '`' || c == '|' || c == '~';, +	}, +, +++ b/build.gradle, +		options.encoding = 'UTF-8', +		options.encoding = 'UTF-8', +++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, +++ b/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java, +	@Test  // SPR-3671, +	@Test  // SPR-3671, +	@Test  // SPR-3671, +	@Test  // SPR-3671, +	@Test  // SPR-3671, +	@Test  // SPR-7779, +	@Test  // SPR-9420, +	@Test  // SPR-11806, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * for {@code form-data}, optionally encoding the filename using the RFC 5987., +	 * @since 4.3.3, +	 * @see #setContentDispositionFormData(String, String), +	 * @see <a href="https://tools.ietf.org/html/rfc7230#section-3.2.4">RFC 7230 Section 3.2.4</a>, +				builder.append(encodeHeaderFieldParam(filename, charset));, +	/**]