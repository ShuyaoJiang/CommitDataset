[+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java, + * Copyright 2002-2017 the original author or authors., +		this.httpRequest = httpRequest.failOnClientError(false).failOnServerError(false);, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java, + * Copyright 2002-2017 the original author or authors., +		this.httpRequest = httpRequest.failOnClientError(false).failOnServerError(false);, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java, +	public void retrieveBodyToMonoInternalServerError() throws Exception {, +		this.server.enqueue(new MockResponse().setResponseCode(500), +				.setHeader("Content-Type", "text/plain").setBody("Internal Server error"));, +, +		Mono<String> result = this.webClient.get(), +				.uri("/greeting?name=Spring"), +				.retrieve(), +				.bodyToMono(String.class);, +, +		StepVerifier.create(result), +				.expectError(WebClientException.class), +				.verify(Duration.ofSeconds(3));, +, +		RecordedRequest recordedRequest = server.takeRequest();, +		Assert.assertEquals(1, server.getRequestCount());, +		Assert.assertEquals("*/*", recordedRequest.getHeader(HttpHeaders.ACCEPT));, +		Assert.assertEquals("/greeting?name=Spring", recordedRequest.getPath());, +	}, +, +	@Test]