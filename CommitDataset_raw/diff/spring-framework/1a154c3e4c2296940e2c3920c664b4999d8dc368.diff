[+++ b/spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java, + * Copyright 2002-2018 the original author or authors., +import java.nio.file.NoSuchFileException;, +	public boolean exists() {, +		try {, +			URL url = getURL();, +			if (ResourceUtils.isFileURL(url)) {, +				// Proceed with file system resolution, +				return getFile().exists();, +			}, +			else {, +				// Try a URL connection content-length header, +				URLConnection con = url.openConnection();, +				customizeConnection(con);, +				HttpURLConnection httpCon =, +						(con instanceof HttpURLConnection ? (HttpURLConnection) con : null);, +				if (httpCon != null) {, +					int code = httpCon.getResponseCode();, +					if (code == HttpURLConnection.HTTP_OK) {, +						return true;, +					}, +					else if (code == HttpURLConnection.HTTP_NOT_FOUND) {, +						return false;, +					}, +				}, +				if (con.getContentLength() >= 0) {, +					return true;, +				}, +				if (httpCon != null) {, +					// no HTTP OK status, and no content-length header: give up, +					httpCon.disconnect();, +					return false;, +				}, +				else {, +					// Fall back to stream existence: can we open the stream?, +					InputStream is = getInputStream();, +					is.close();, +					return true;, +				}, +			}, +		}, +		catch (IOException ex) {, +			return false;, +		}, +	}, +, +	@Override, +	public boolean isReadable() {, +		try {, +			URL url = getURL();, +			if (ResourceUtils.isFileURL(url)) {, +				// Proceed with file system resolution, +				File file = getFile();, +				return (file.canRead() && !file.isDirectory());, +			}, +			else {, +				return true;, +			}, +		}, +		catch (IOException ex) {, +			return false;, +		}, +	}, +, +	@Override, +	 * @see #getFile(), +		try {, +			// Try file system channel, +		catch (FileNotFoundException | NoSuchFileException ex) {, +			// Fall back to InputStream adaptation in superclass, +++ b/spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java, + * Copyright 2002-2018 the original author or authors., +import java.nio.file.NoSuchFileException;, +	public boolean exists() {, +		try {, +			URL url = getURL();, +			if (ResourceUtils.isFileURL(url)) {, +				// Proceed with file system resolution, +				return getFile().exists();, +			}, +			else {, +				// Try a URL connection content-length header, +				URLConnection con = url.openConnection();, +				customizeConnection(con);, +				HttpURLConnection httpCon =, +						(con instanceof HttpURLConnection ? (HttpURLConnection) con : null);, +				if (httpCon != null) {, +					int code = httpCon.getResponseCode();, +					if (code == HttpURLConnection.HTTP_OK) {, +						return true;, +					}, +					else if (code == HttpURLConnection.HTTP_NOT_FOUND) {, +						return false;, +					}, +				}, +				if (con.getContentLength() >= 0) {, +					return true;, +				}, +				if (httpCon != null) {, +					// no HTTP OK status, and no content-length header: give up]