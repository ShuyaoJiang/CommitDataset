[+++ b/spring-aop/src/main/java/org/springframework/aop/support/annotation/AnnotationMatchingPointcut.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.core.annotation.AnnotationUtils;, +			this.classFilter = new AnnotationCandidateClassFilter(methodAnnotationType);, +, +	/**, +	 * {@link ClassFilter} that delegates to {@link AnnotationUtils#isCandidateClass}, +	 * for filtering classes whose methods are not worth searching to begin with., +	 */, +	private static class AnnotationCandidateClassFilter implements ClassFilter {, +, +		private final Class<? extends Annotation> annotationType;, +, +		public AnnotationCandidateClassFilter(Class<? extends Annotation> annotationType) {, +			this.annotationType = annotationType;, +		}, +, +		@Override, +		public boolean matches(Class<?> clazz) {, +			return AnnotationUtils.isCandidateClass(clazz, this.annotationType);, +		}, +	}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/support/annotation/AnnotationMatchingPointcut.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.core.annotation.AnnotationUtils;, +			this.classFilter = new AnnotationCandidateClassFilter(methodAnnotationType);, +, +	/**, +	 * {@link ClassFilter} that delegates to {@link AnnotationUtils#isCandidateClass}, +	 * for filtering classes whose methods are not worth searching to begin with., +	 */, +	private static class AnnotationCandidateClassFilter implements ClassFilter {, +, +		private final Class<? extends Annotation> annotationType;, +, +		public AnnotationCandidateClassFilter(Class<? extends Annotation> annotationType) {, +			this.annotationType = annotationType;, +		}, +, +		@Override, +		public boolean matches(Class<?> clazz) {, +			return AnnotationUtils.isCandidateClass(clazz, this.annotationType);, +		}, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.core.annotation.AnnotationUtils;, +			if (AnnotationUtils.isCandidateClass(beanClass, Lookup.class)) {, +					Class<?> targetClass = beanClass;, +					do {, +						ReflectionUtils.doWithLocalMethods(targetClass, method -> {, +						targetClass = targetClass.getSuperclass();, +					}, +					while (targetClass != null && targetClass != Object.class);, +, +			}, +		if (!AnnotationUtils.isCandidateClass(clazz, this.autowiredAnnotationTypes)) {, +			return new InjectionMetadata(clazz, Collections.emptyList());, +		}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/support/annotation/AnnotationMatchingPointcut.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.core.annotation.AnnotationUtils;, +			this.classFilter = new AnnotationCandidateClassFilter(methodAnnotationType);, +, +	/**, +	 * {@link ClassFilter} that delegates to {@link AnnotationUtils#isCandidateClass}, +	 * for filtering classes whose methods are not worth searching to begin with., +	 */, +	private static class AnnotationCandidateClassFilter implements ClassFilter {, +, +		private final Class<? extends Annotation> annotationType;, +, +		public AnnotationCandidateClassFilter(Class<? extends Annotation> annotationType) {, +			this.annotationType = annotationType;, +		}, +, +		@Override, +		public boolean matches(Class<?> clazz) {, +			return AnnotationUtils.isCandidateClass(clazz, this.annotationType);, +		}, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.core.annotation.AnnotationUtils;, +			if (AnnotationUtils.isCandidateClass(beanClass, Lookup.class)) {, +					Class<?> targetClass = beanClass;, +					do {, +						ReflectionUtils.doWithLocalMethods(targetClass, method -> {, +						targetClass = targetClass.getSuperclass();, +					}, +					while (targetClass != null && targetClass != Object.class);, +, +			}, +		if (!AnnotationUtils.isCandidateClass(clazz, this.autowiredAnnotationTypes)) {, +			return new InjectionMetadata(clazz, Collections.emptyList());, +		}]