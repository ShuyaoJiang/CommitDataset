[+++ b/spring-web/src/main/java/org/springframework/http/converter/json/MappingJackson2HttpMessageConverter.java, +			Class<?> serializationView = null;, +			String jsonpFunction = null;, +				MappingJacksonValue container = (MappingJacksonValue) object;, +				object = container.getValue();, +				serializationView = container.getSerializationView();, +				jsonpFunction = container.getJsonpFunction();, +			}, +			if (jsonpFunction != null) {, +				jsonGenerator.writeRaw(jsonpFunction + "(" );, +			}, +			if (serializationView != null) {, +			if (jsonpFunction != null) {, +				jsonGenerator.writeRaw(");");, +				jsonGenerator.flush();, +			}, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/MappingJackson2HttpMessageConverter.java, +			Class<?> serializationView = null;, +			String jsonpFunction = null;, +				MappingJacksonValue container = (MappingJacksonValue) object;, +				object = container.getValue();, +				serializationView = container.getSerializationView();, +				jsonpFunction = container.getJsonpFunction();, +			}, +			if (jsonpFunction != null) {, +				jsonGenerator.writeRaw(jsonpFunction + "(" );, +			}, +			if (serializationView != null) {, +			if (jsonpFunction != null) {, +				jsonGenerator.writeRaw(");");, +				jsonGenerator.flush();, +			}, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/MappingJacksonValue.java, + * A simple holder for the POJO to serialize via, + * {@link org.springframework.http.converter.json.MappingJackson2HttpMessageConverter, + * MappingJackson2HttpMessageConverter} along with further serialization, + * instructions to be passed in to the converter., + *, + * <p>On the server side this wrapper is added with a, + * {@code ResponseBodyInterceptor} after content negotiation selects the, + * converter to use but before the write., + *, + * <p>On the client side, simply wrap the POJO and pass it in to the, + * {@code RestTemplate}., +	private Object value;, +	private Class<?> serializationView;, +, +	private String jsonpFunction;, +	 * Create a new instance wrapping the given POJO to be serialized., +	public MappingJacksonValue(Object value) {, +	 * Modify the POJO to serialize., +	 */, +	public void setValue(Object value) {, +		this.value = value;, +	}, +, +	/**, +	 * Return the POJO that needs to be serialized., +	 * Set the serialization view to serialize the POJO with., +	 * @see com.fasterxml.jackson.databind.ObjectMapper#writerWithView(Class), +	 * @see com.fasterxml.jackson.annotation.JsonView, +	 */, +	public void setSerializationView(Class<?> serializationView) {, +		this.serializationView = serializationView;, +	}, +, +	/**, +	 * @see com.fasterxml.jackson.databind.ObjectMapper#writerWithView(Class), +	 * @see com.fasterxml.jackson.annotation.JsonView, +	/**, +	 * Set the name of the JSONP function name., +	 */, +	public void setJsonpFunction(String functionName) {, +		this.jsonpFunction = functionName;, +	}, +, +	/**, +	 * Return the configured JSONP function name., +	 */, +	public String getJsonpFunction() {, +		return this.jsonpFunction;, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/MappingJackson2HttpMessageConverter.java, +			Class<?> serializationView = null;, +			String jsonpFunction = null;, +				MappingJacksonValue container = (MappingJacksonValue) object;, +				object = container.getValue();, +				serializationView = container.getSerializationView();, +				jsonpFunction = container.getJsonpFunction();, +			}, +			if (jsonpFunction != null) {, +				jsonGenerator.writeRaw(jsonpFunction + "(" );, +			}, +			if (serializationView != null) {, +			if (jsonpFunction != null) {, +				jsonGenerator.writeRaw(");");, +				jsonGenerator.flush();, +			}, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/MappingJacksonValue.java]