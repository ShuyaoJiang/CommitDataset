[+++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java, + * Copyright 2002-2017 the original author or authors., +	private final boolean supportsReadStreaming;, +	/**, +	 * Create a new instance of the {@code ResourceHttpMessageConverter}, +	 * that supports read streaming, i.e. can convert an, +	 * {@code HttpInputMessage} to {@code InputStreamResource}., +	 */, +		this.supportsReadStreaming = true;, +	}, +, +	/**, +	 * Create a new instance of the {@code ResourceHttpMessageConverter}, +	 * @param supportsReadStreaming whether the converter should support, +	 * read streaming, i.e. convert to {@code InputStreamResource}., +	 * @since 5.0, +	 */, +	public ResourceHttpMessageConverter(boolean supportsReadStreaming) {, +		super(MediaType.ALL);, +		this.supportsReadStreaming = supportsReadStreaming;, +		if (supportsReadStreaming && InputStreamResource.class == clazz) {, +++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java, + * Copyright 2002-2017 the original author or authors., +	private final boolean supportsReadStreaming;, +	/**, +	 * Create a new instance of the {@code ResourceHttpMessageConverter}, +	 * that supports read streaming, i.e. can convert an, +	 * {@code HttpInputMessage} to {@code InputStreamResource}., +	 */, +		this.supportsReadStreaming = true;, +	}, +, +	/**, +	 * Create a new instance of the {@code ResourceHttpMessageConverter}, +	 * @param supportsReadStreaming whether the converter should support, +	 * read streaming, i.e. convert to {@code InputStreamResource}., +	 * @since 5.0, +	 */, +	public ResourceHttpMessageConverter(boolean supportsReadStreaming) {, +		super(MediaType.ALL);, +		this.supportsReadStreaming = supportsReadStreaming;, +		if (supportsReadStreaming && InputStreamResource.class == clazz) {, +++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, + * Copyright 2002-2017 the original author or authors., +		this.messageConverters.add(new ResourceHttpMessageConverter(false));, +++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java, + * Copyright 2002-2017 the original author or authors., +	private final boolean supportsReadStreaming;, +	/**, +	 * Create a new instance of the {@code ResourceHttpMessageConverter}, +	 * that supports read streaming, i.e. can convert an, +	 * {@code HttpInputMessage} to {@code InputStreamResource}., +	 */, +		this.supportsReadStreaming = true;, +	}, +, +	/**, +	 * Create a new instance of the {@code ResourceHttpMessageConverter}, +	 * @param supportsReadStreaming whether the converter should support, +	 * read streaming, i.e. convert to {@code InputStreamResource}., +	 * @since 5.0, +	 */, +	public ResourceHttpMessageConverter(boolean supportsReadStreaming) {, +		super(MediaType.ALL);, +		this.supportsReadStreaming = supportsReadStreaming;, +		if (supportsReadStreaming && InputStreamResource.class == clazz) {, +++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, + * Copyright 2002-2017 the original author or authors., +		this.messageConverters.add(new ResourceHttpMessageConverter(false));, +++ b/spring-web/src/test/java/org/springframework/http/converter/ResourceHttpMessageConverterTests.java, + * Copyright 2002-2017 the original author or authors., +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +	@Rule, +	public ExpectedException thrown = ExpectedException.none();, +, +	@Test  // SPR-14882, +	public void shouldNotReadInputStreamResource() throws IOException {, +		ResourceHttpMessageConverter noStreamConverter = new ResourceHttpMessageConverter(false);, +		try (InputStream body = getClass().getResourceAsStream("logo.jpg") ) {, +			this.thrown.expect(IllegalStateException.class);, +			MockHttpInputMessage inputMessage = new MockHttpInputMessage(body);, +			inputMessage.getHeaders().setContentType(MediaType.IMAGE_JPEG);, +			noStreamConverter.read(InputStreamResource.class, inputMessage);, +		}, +	}, +]