[+++ b/org.springframework.web/src/main/java/org/springframework/http/client/CommonsClientHttpRequest.java, +	CommonsClientHttpRequest(HttpClient httpClient, HttpMethodBase httpMethod) {, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/CommonsClientHttpRequest.java, +	CommonsClientHttpRequest(HttpClient httpClient, HttpMethodBase httpMethod) {, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/SimpleClientHttpRequest.java, +import org.springframework.util.FileCopyUtils;, +	SimpleClientHttpRequest(HttpURLConnection connection) {, +		if (bufferedOutput.length > 0) {, +		}, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/CommonsClientHttpRequest.java, +	CommonsClientHttpRequest(HttpClient httpClient, HttpMethodBase httpMethod) {, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/SimpleClientHttpRequest.java, +import org.springframework.util.FileCopyUtils;, +	SimpleClientHttpRequest(HttpURLConnection connection) {, +		if (bufferedOutput.length > 0) {, +		}, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/SimpleClientHttpRequestFactory.java, +import org.springframework.util.Assert;, +		if ("PUT".equals(httpMethod) || "POST".equals(httpMethod)) {, +		} else {, +			connection.setDoOutput(false);, +		}, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/CommonsClientHttpRequest.java, +	CommonsClientHttpRequest(HttpClient httpClient, HttpMethodBase httpMethod) {, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/SimpleClientHttpRequest.java, +import org.springframework.util.FileCopyUtils;, +	SimpleClientHttpRequest(HttpURLConnection connection) {, +		if (bufferedOutput.length > 0) {, +		}, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/SimpleClientHttpRequestFactory.java, +import org.springframework.util.Assert;, +		if ("PUT".equals(httpMethod) || "POST".equals(httpMethod)) {, +		} else {, +			connection.setDoOutput(false);, +		}, +++ b/org.springframework.web/src/test/java/org/springframework/http/client/AbstractHttpRequestFactoryTestCase.java, +import java.util.Locale;, +import org.springframework.util.FileCopyUtils;, +		jettyContext.addServlet(new ServletHolder(new MethodServlet("DELETE")), "/methods/delete");, +		jettyContext.addServlet(new ServletHolder(new MethodServlet("GET")), "/methods/get");, +		jettyContext.addServlet(new ServletHolder(new MethodServlet("HEAD")), "/methods/head");, +		jettyContext.addServlet(new ServletHolder(new MethodServlet("OPTIONS")), "/methods/options");, +		jettyContext.addServlet(new ServletHolder(new MethodServlet("POST")), "/methods/post");, +		jettyContext.addServlet(new ServletHolder(new MethodServlet("PUT")), "/methods/put");, +		ClientHttpResponse response = request.execute();, +		try {, +		finally {, +			response.close();, +		}, +	}, +		ClientHttpResponse response = request.execute();, +		try {, +		finally {, +			response.close();, +		}, +	}, +	@Test, +	public void httpMethods() throws Exception {, +		assertHttpMethod("get", HttpMethod.GET);, +		assertHttpMethod("head", HttpMethod.HEAD);, +		assertHttpMethod("post", HttpMethod.POST);, +		assertHttpMethod("put", HttpMethod.PUT);, +		assertHttpMethod("options", HttpMethod.OPTIONS);, +		assertHttpMethod("delete", HttpMethod.DELETE);, +	}, +, +	private void assertHttpMethod(String path, HttpMethod method) throws Exception {, +		ClientHttpResponse response = null;, +		try {, +			ClientHttpRequest request = factory.createRequest(new URI("http://localhost:8889/methods/" + path), method);, +			response = request.execute();, +			assertEquals("Invalid method", path.toUpperCase(Locale.ENGLISH), request.getMethod().name());, +		}, +		finally {, +			if (response != null) {, +				response.close();, +			}, +		}, +	}, +, +	/** Servlet that returns and error message for a given status code. */, +	private static class MethodServlet extends GenericServlet {, +, +		private final String method;, +, +		private MethodServlet(String method) {, +			this.method = method;, +		}, +, +		@Override, +		public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException {, +			HttpServletRequest httpReq = (HttpServletRequest) req;, +			assertEquals("Invalid HTTP method", method, httpReq.getMethod());, +		}, +	}, +]