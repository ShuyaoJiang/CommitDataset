[+++ b/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java, +	private Set<String> excludedBeans = new HashSet<String>();, +		this.excludedBeans.clear();, +		if (excludedBeans != null) {, +			this.excludedBeans.addAll(Arrays.asList(excludedBeans));, +		}, +	}, +, +	/**, +	 * Add the name of bean that should be excluded from autodetection., +	 */, +	public void addExcludedBean(String excludedBean) {, +		Assert.notNull(excludedBean, "ExcludedBean must not be null");, +		this.excludedBeans.add(excludedBean);, +		return (this.excludedBeans.contains(beanName) ||, +							this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length()))));, +++ b/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java, +	private Set<String> excludedBeans = new HashSet<String>();, +		this.excludedBeans.clear();, +		if (excludedBeans != null) {, +			this.excludedBeans.addAll(Arrays.asList(excludedBeans));, +		}, +	}, +, +	/**, +	 * Add the name of bean that should be excluded from autodetection., +	 */, +	public void addExcludedBean(String excludedBean) {, +		Assert.notNull(excludedBean, "ExcludedBean must not be null");, +		this.excludedBeans.add(excludedBean);, +		return (this.excludedBeans.contains(beanName) ||, +							this.excludedBeans.contains(beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length()))));, +++ b/spring-context/src/test/java/org/springframework/jmx/export/MBeanExporterTests.java, +import java.util.Arrays;, +import java.util.Collection;, +	@Test, +	public void testIgnoreBeanName() throws MalformedObjectNameException {, +		DefaultListableBeanFactory factory = new DefaultListableBeanFactory();, +		String firstBeanName = "spring:type=TestBean";, +		factory.registerSingleton(firstBeanName, new TestBean("test"));, +		String secondBeanName = "spring:type=TestBean2";, +		factory.registerSingleton(secondBeanName, new TestBean("test2"));, +, +		MBeanExporter exporter = new MBeanExporter();, +		exporter.setServer(getServer());, +		exporter.setAssembler(new NamedBeanAutodetectCapableMBeanInfoAssemblerStub(firstBeanName, secondBeanName));, +		exporter.setBeanFactory(factory);, +		exporter.setAutodetectMode(MBeanExporter.AUTODETECT_ALL);, +		exporter.addExcludedBean(secondBeanName);, +, +		start(exporter);, +		assertIsRegistered("Bean not autodetected in (AUTODETECT_ALL) mode",, +				ObjectNameManager.getInstance(firstBeanName));, +		assertIsNotRegistered("Bean should have been excluded",, +				ObjectNameManager.getInstance(secondBeanName));, +	}, +, +		private Collection<String> namedBeans;, +		public NamedBeanAutodetectCapableMBeanInfoAssemblerStub(String... namedBeans) {, +			this.namedBeans = Arrays.asList(namedBeans);, +			return this.namedBeans.contains(beanName);]