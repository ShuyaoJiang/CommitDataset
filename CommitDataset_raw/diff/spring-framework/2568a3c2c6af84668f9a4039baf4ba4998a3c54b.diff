[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/RequestPartMethodArgumentResolver.java, +		if (arg == null) {, +			handleMissingValue(partName, parameter);, +		}, +		, +	 * Invoked if the resolved argument value is {@code null}. The default implementation raises , +	 * a {@link ServletRequestBindingException} if the method parameter is required., +	 * @param partName the name used to look up the request part, +	 * @param param the method argument, +	protected void handleMissingValue(String partName, MethodParameter param) throws ServletRequestBindingException {, +		RequestPart annot = param.getParameterAnnotation(RequestPart.class);, +			String paramType = param.getParameterType().getName();, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/RequestPartMethodArgumentResolver.java, +		if (arg == null) {, +			handleMissingValue(partName, parameter);, +		}, +		, +	 * Invoked if the resolved argument value is {@code null}. The default implementation raises , +	 * a {@link ServletRequestBindingException} if the method parameter is required., +	 * @param partName the name used to look up the request part, +	 * @param param the method argument, +	protected void handleMissingValue(String partName, MethodParameter param) throws ServletRequestBindingException {, +		RequestPart annot = param.getParameterAnnotation(RequestPart.class);, +			String paramType = param.getParameterType().getName();, +++ b/org.springframework.web/src/main/java/org/springframework/web/method/annotation/support/RequestParamMethodArgumentResolver.java, +import java.util.Collection;, +import org.springframework.core.GenericCollectionTypeResolver;, +import org.springframework.web.multipart.MultipartRequest;, +		Object arg;, +		, +		if (MultipartFile.class.equals(parameter.getParameterType())) {, +			assertMultipartRequest(multipartRequest, webRequest);, +			arg = multipartRequest.getFile(name);, +		}, +		else if (isMultipartFileCollection(parameter)) {, +			assertMultipartRequest(multipartRequest, webRequest);, +			arg = multipartRequest.getFiles(name);, +		}, +		else if ("javax.servlet.http.Part".equals(parameter.getParameterType().getName())) {, +			arg = servletRequest.getPart(name);, +		}, +		else {, +			arg = null;, +					arg = (files.size() == 1 ? files.get(0) : files);, +			if (arg == null) {, +					arg = paramValues.length == 1 ? paramValues[0] : paramValues;, +		return arg;, +	}, +, +	private void assertMultipartRequest(MultipartHttpServletRequest multipartRequest, NativeWebRequest request) {, +		if (multipartRequest == null) {, +			throw new IllegalStateException("Current request is not of type [" + MultipartRequest.class.getName(), +					+ "]: " + request + ". Do you have a MultipartResolver configured?");, +		}, +	}, +	, +	private boolean isMultipartFileCollection(MethodParameter parameter) {, +		Class<?> paramType = parameter.getParameterType();, +		if (Collection.class.equals(paramType) || List.class.isAssignableFrom(paramType)){, +			Class<?> valueType = GenericCollectionTypeResolver.getCollectionParameterType(parameter);, +			if (valueType != null && valueType.equals(MultipartFile.class)) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/RequestPartMethodArgumentResolver.java, +		if (arg == null) {, +			handleMissingValue(partName, parameter);, +		}, +		, +	 * Invoked if the resolved argument value is {@code null}. The default implementation raises , +	 * a {@link ServletRequestBindingException} if the method parameter is required., +	 * @param partName the name used to look up the request part, +	 * @param param the method argument, +	protected void handleMissingValue(String partName, MethodParameter param) throws ServletRequestBindingException {, +		RequestPart annot = param.getParameterAnnotation(RequestPart.class);, +			String paramType = param.getParameterType().getName();, +++ b/org.springframework.web/src/main/java/org/springframework/web/method/annotation/support/RequestParamMethodArgumentResolver.java, +import java.util.Collection;, +import org.springframework.core.GenericCollectionTypeResolver;, +import org.springframework.web.multipart.MultipartRequest;, +		Object arg;, +		, +		if (MultipartFile.class.equals(parameter.getParameterType())) {, +			assertMultipartRequest(multipartRequest, webRequest);, +			arg = multipartRequest.getFile(name);, +		}, +		else if (isMultipartFileCollection(parameter)) {, +			assertMultipartRequest(multipartRequest, webRequest);, +			arg = multipartRequest.getFiles(name);, +		}, +		else if ("javax.servlet.http.Part".equals(parameter.getParameterType().getName())) {, +			arg = servletRequest.getPart(name);, +		}, +		else {, +			arg = null;, +					arg = (files.size() == 1 ? files.get(0) : files);, +			if (arg == null) {]