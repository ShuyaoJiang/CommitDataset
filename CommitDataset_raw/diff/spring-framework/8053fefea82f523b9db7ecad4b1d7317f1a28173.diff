[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/UtilNamespaceHandler.java, + * Copyright 2002-2016 the original author or authors., +				location = parserContext.getReaderContext().getEnvironment().resolvePlaceholders(location);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/UtilNamespaceHandler.java, + * Copyright 2002-2016 the original author or authors., +				location = parserContext.getReaderContext().getEnvironment().resolvePlaceholders(location);, +++ b/spring-context/src/main/java/org/springframework/context/config/AbstractPropertyLoadingBeanDefinitionParser.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.beans.factory.xml.ParserContext;, +	protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {, +			location = parserContext.getReaderContext().getEnvironment().resolvePlaceholders(location);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/UtilNamespaceHandler.java, + * Copyright 2002-2016 the original author or authors., +				location = parserContext.getReaderContext().getEnvironment().resolvePlaceholders(location);, +++ b/spring-context/src/main/java/org/springframework/context/config/AbstractPropertyLoadingBeanDefinitionParser.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.beans.factory.xml.ParserContext;, +	protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {, +			location = parserContext.getReaderContext().getEnvironment().resolvePlaceholders(location);, +++ b/spring-context/src/main/java/org/springframework/context/config/PropertyOverrideBeanDefinitionParser.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.beans.factory.xml.ParserContext;, +	protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {, +		super.doParse(element, parserContext, builder);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/UtilNamespaceHandler.java, + * Copyright 2002-2016 the original author or authors., +				location = parserContext.getReaderContext().getEnvironment().resolvePlaceholders(location);, +++ b/spring-context/src/main/java/org/springframework/context/config/AbstractPropertyLoadingBeanDefinitionParser.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.beans.factory.xml.ParserContext;, +	protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {, +			location = parserContext.getReaderContext().getEnvironment().resolvePlaceholders(location);, +++ b/spring-context/src/main/java/org/springframework/context/config/PropertyOverrideBeanDefinitionParser.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.beans.factory.xml.ParserContext;, +	protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {, +		super.doParse(element, parserContext, builder);, +++ b/spring-context/src/main/java/org/springframework/context/config/PropertyPlaceholderBeanDefinitionParser.java, +import org.springframework.beans.factory.xml.ParserContext;, +	protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {, +		super.doParse(element, parserContext, builder);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/xml/UtilNamespaceHandler.java, + * Copyright 2002-2016 the original author or authors., +				location = parserContext.getReaderContext().getEnvironment().resolvePlaceholders(location);, +++ b/spring-context/src/main/java/org/springframework/context/config/AbstractPropertyLoadingBeanDefinitionParser.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.beans.factory.xml.ParserContext;, +	protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {, +			location = parserContext.getReaderContext().getEnvironment().resolvePlaceholders(location);, +++ b/spring-context/src/main/java/org/springframework/context/config/PropertyOverrideBeanDefinitionParser.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.beans.factory.xml.ParserContext;, +	protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {, +		super.doParse(element, parserContext, builder);, +++ b/spring-context/src/main/java/org/springframework/context/config/PropertyPlaceholderBeanDefinitionParser.java, +import org.springframework.beans.factory.xml.ParserContext;, +	protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {, +		super.doParse(element, parserContext, builder);, +++ b/spring-context/src/test/java/org/springframework/context/config/ContextNamespaceHandlerTests.java, +import java.io.FileNotFoundException;, +import org.springframework.beans.FatalBeanException;, +	public void propertyPlaceholderLocationWithSystemPropertyForOneLocation() throws Exception {, +		System.setProperty("properties",, +				"classpath*:/org/springframework/context/config/test-*.properties");, +		try {, +			ApplicationContext applicationContext = new ClassPathXmlApplicationContext(, +					"contextNamespaceHandlerTests-location-placeholder.xml", getClass());, +			assertEquals("bar", applicationContext.getBean("foo"));, +			assertEquals("foo", applicationContext.getBean("bar"));, +			assertEquals("maps", applicationContext.getBean("spam"));, +		}, +		finally {, +			System.clearProperty("properties");, +		}, +	}, +, +	@Test, +	public void propertyPlaceholderLocationWithSystemPropertyForMultipleLocations() throws Exception {, +		System.setProperty("properties",, +				"classpath*:/org/springframework/context/config/test-*.properties," +, +				"classpath*:/org/springframework/context/config/empty-*.properties," +, +				"classpath*:/org/springframework/context/config/missing-*.properties");, +		try {, +			ApplicationContext applicationContext = new ClassPathXmlApplicationContext(, +					"contextNamespaceHandlerTests-location-placeholder.xml", getClass());, +			assertEquals("bar", applicationContext.getBean("foo"));, +			assertEquals("foo", applicationContext.getBean("bar"));, +			assertEquals("maps", applicationContext.getBean("spam"));, +		}, +		finally {, +			System.clearProperty("properties");, +		}, +	}, +, +	@Test, +	public void propertyPlaceholderLocationWithSystemPropertyMissing() throws Exception {, +		try {, +			ApplicationContext applicationContext = new ClassPathXmlApplicationContext(, +					"contextNamespaceHandlerTests-location-placeholder.xml", getClass());, +			assertEquals("bar", applicationContext.getBean("foo"));]