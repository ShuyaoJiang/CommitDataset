[+++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +		ResolvableType element = (elementTypeDescriptor == null ? null, +				: elementTypeDescriptor.resolvableType);, +				element), null, null);, +		ResolvableType key = (keyTypeDescriptor == null ? null : keyTypeDescriptor.resolvableType);, +		ResolvableType value = (valueTypeDescriptor == null ? null : valueTypeDescriptor.resolvableType);, +		return new TypeDescriptor(ResolvableType.forClassWithGenerics(mapType, key, value), null, null);, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +		ResolvableType element = (elementTypeDescriptor == null ? null, +				: elementTypeDescriptor.resolvableType);, +				element), null, null);, +		ResolvableType key = (keyTypeDescriptor == null ? null : keyTypeDescriptor.resolvableType);, +		ResolvableType value = (valueTypeDescriptor == null ? null : valueTypeDescriptor.resolvableType);, +		return new TypeDescriptor(ResolvableType.forClassWithGenerics(mapType, key, value), null, null);, +++ b/spring-core/src/test/java/org/springframework/core/convert/TypeDescriptorTests.java, +, +	@Test, +	public void createCollectionWithNullElement() throws Exception {, +		TypeDescriptor typeDescriptor = TypeDescriptor.collection(List.class, null);, +		assertThat(typeDescriptor.getElementTypeDescriptor(), nullValue());, +	}, +, +	@Test, +	public void createMapWithNullElements() throws Exception {, +		TypeDescriptor typeDescriptor = TypeDescriptor.map(LinkedHashMap.class, null, null);, +		assertThat(typeDescriptor.getMapKeyTypeDescriptor(), nullValue());, +		assertThat(typeDescriptor.getMapValueTypeDescriptor(), nullValue());, +	}, +]