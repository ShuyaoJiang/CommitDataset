[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +import java.util.concurrent.ConcurrentHashMap;, +, +import org.springframework.util.Assert;, +	private static final HandlerMethod PREFLIGHT_AMBIGUOUS_MATCH =, +	private static final CorsConfiguration ALLOW_CORS_CONFIG = new CorsConfiguration();, +, +	static {, +		ALLOW_CORS_CONFIG.addAllowedOrigin("*");, +		ALLOW_CORS_CONFIG.addAllowedMethod("*");, +		ALLOW_CORS_CONFIG.addAllowedHeader("*");, +		ALLOW_CORS_CONFIG.setAllowCredentials(true);, +	}, +, +	private final MappingDefinitionRegistry mappingRegistry = new MappingDefinitionRegistry();, +	 * <p>The default naming strategy is based on the capital letters of the, +	 * class name followed by "#" and then the method name, e.g. "TC#getFoo", +	 * for a class named TestController with method getFoo., +	 * Return the configured naming strategy or {@code null}., +	public HandlerMethodMappingNamingStrategy<T> getNamingStrategy() {, +		return this.namingStrategy;, +	 * Return a read-only map with all mapped HandlerMethod's., +	 */, +	public Map<T, HandlerMethod> getHandlerMethods() {, +		return this.mappingRegistry.getMappings();, +	}, +, +	/**, +	 * Return the handler methods for the given mapping name., +	 * @return a list of matching HandlerMethod's or {@code null}; the returned, +	 * list will never be modified and is safe to iterate., +	 * @see #setHandlerMethodMappingNamingStrategy, +		return this.mappingRegistry.getHandlerMethodsByMappingName(mappingName);, +		this.mappingRegistry.register(handler, method, mapping);, +	 * Extract and return the CORS configuration for the mapping., +	 */, +	protected CorsConfiguration initCorsConfiguration(Object handler, Method method, T mapping) {, +		return null;, +	}, +, +	/**, +		List<T> directPathMatches = this.mappingRegistry.getMappingKeysByUrl(lookupPath);, +			addMatchingMappings(this.mappingRegistry.getMappingKeys(), matches, request);, +				logger.trace("Found " + matches.size() + " matching mapping(s) for [" +, +						lookupPath + "] : " + matches);, +					return PREFLIGHT_AMBIGUOUS_MATCH;, +					throw new IllegalStateException("Ambiguous handler methods mapped for HTTP path '" +, +							request.getRequestURL() + "': {" + m1 + ", " + m2 + "}");, +			return handleNoMatch(this.mappingRegistry.getMappingKeys(), lookupPath, request);, +				matches.add(new Match(match, this.mappingRegistry.getHandlerMethod(mapping)));, +			HandlerMethod handlerMethod = (HandlerMethod) handler;, +			CorsConfiguration corsConfig = this.mappingRegistry.getCorsConfiguration(handlerMethod);, +			if (corsConfig != null) {, +				return corsConfig;, +			}, +			else if (handlerMethod.equals(PREFLIGHT_AMBIGUOUS_MATCH)) {, +				return AbstractHandlerMethodMapping.ALLOW_CORS_CONFIG;, +			}, +	private class MappingDefinitionRegistry {, +, +		private final Map<Method, MappingDefinition<T>> mappingDefinitions =, +				new ConcurrentHashMap<Method, MappingDefinition<T>>();, +, +		private final Map<T, HandlerMethod> mappingLookup = new LinkedHashMap<T, HandlerMethod>();, +, +		private final MultiValueMap<String, T> urlLookup = new LinkedMultiValueMap<String, T>();, +, +		private final Map<String, List<HandlerMethod>> nameLookup =, +				new ConcurrentHashMap<String, List<HandlerMethod>>();, +, +, +		/**, +		 * Return a read-only copy of all mappings., +		 * Safe for concurrent use., +		 */, +		public Map<T, HandlerMethod> getMappings() {, +			return Collections.unmodifiableMap(this.mappingLookup);, +		}, +, +		public List<T> getMappingKeysByUrl(String urlPath) {, +			return this.urlLookup.get(urlPath);, +		}, +, +		public Set<T> getMappingKeys() {, +			return this.mappingLookup.keySet();, +		}, +, +		public HandlerMethod getHandlerMethod(T mapping) {, +			return this.mappingLookup.get(mapping);, +		}, +, +		/**, +		 * Return HandlerMethod matches for the given mapping name., +		 * Safe for concurrent use., +		 */, +		public List<HandlerMethod> getHandlerMethodsByMappingName(String mappingName) {, +			return this.nameLookup.get(mappingName);, +		}, +, +		/**]