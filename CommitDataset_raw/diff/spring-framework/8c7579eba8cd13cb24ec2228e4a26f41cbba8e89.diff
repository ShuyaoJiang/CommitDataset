[+++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/EnableAsyncTests.java, +	public void customExecutorConfig() {, +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/EnableAsyncTests.java, +	public void customExecutorConfig() {, +++ b/spring-context/src/test/java/org/springframework/tests/mock/jndi/ExpectedLookupTemplate.java, + * Simple extension of the JndiTemplate class that always returns a given object., + *, + * <p>Very useful for testing. Effectively a mock object., +	private final Map<String, Object> jndiObjects = new ConcurrentHashMap<>(16);, +	 * Construct a new JndiTemplate that will always return given objects for, +	 * given names. To be populated through {@code addObject} calls., +	 * Construct a new JndiTemplate that will always return the given object,, +	 * but honour only requests for the given name., +	 * Add the given object to the list of JNDI objects that this template will expose., +	 * If the name is the expected name specified in the constructor, return the, +	 * object provided in the constructor. If the name is unexpected, a, +	 * respective NamingException gets thrown., +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/EnableAsyncTests.java, +	public void customExecutorConfig() {, +++ b/spring-context/src/test/java/org/springframework/tests/mock/jndi/ExpectedLookupTemplate.java, + * Simple extension of the JndiTemplate class that always returns a given object., + *, + * <p>Very useful for testing. Effectively a mock object., +	private final Map<String, Object> jndiObjects = new ConcurrentHashMap<>(16);, +	 * Construct a new JndiTemplate that will always return given objects for, +	 * given names. To be populated through {@code addObject} calls., +	 * Construct a new JndiTemplate that will always return the given object,, +	 * but honour only requests for the given name., +	 * Add the given object to the list of JNDI objects that this template will expose., +	 * If the name is the expected name specified in the constructor, return the, +	 * object provided in the constructor. If the name is unexpected, a, +	 * respective NamingException gets thrown., +++ b/spring-context/src/test/java/org/springframework/tests/mock/jndi/SimpleNamingContext.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.lang.Nullable;, +	public SimpleNamingContext(, +			String root, Hashtable<String, Object> boundObjects, @Nullable Hashtable<String, Object> env) {, +, +	@Nullable, +	private abstract static class AbstractNamingEnumeration<T> implements NamingEnumeration<T> {, +	private static final class NameClassPairEnumeration extends AbstractNamingEnumeration<NameClassPair> {, +	private static final class BindingEnumeration extends AbstractNamingEnumeration<Binding> {, +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/EnableAsyncTests.java, +	public void customExecutorConfig() {, +++ b/spring-context/src/test/java/org/springframework/tests/mock/jndi/ExpectedLookupTemplate.java, + * Simple extension of the JndiTemplate class that always returns a given object., + *, + * <p>Very useful for testing. Effectively a mock object., +	private final Map<String, Object> jndiObjects = new ConcurrentHashMap<>(16);, +	 * Construct a new JndiTemplate that will always return given objects for, +	 * given names. To be populated through {@code addObject} calls., +	 * Construct a new JndiTemplate that will always return the given object,, +	 * but honour only requests for the given name., +	 * Add the given object to the list of JNDI objects that this template will expose., +	 * If the name is the expected name specified in the constructor, return the, +	 * object provided in the constructor. If the name is unexpected, a, +	 * respective NamingException gets thrown., +++ b/spring-context/src/test/java/org/springframework/tests/mock/jndi/SimpleNamingContext.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.lang.Nullable;, +	public SimpleNamingContext(, +			String root, Hashtable<String, Object> boundObjects, @Nullable Hashtable<String, Object> env) {, +, +	@Nullable, +	private abstract static class AbstractNamingEnumeration<T> implements NamingEnumeration<T> {, +	private static final class NameClassPairEnumeration extends AbstractNamingEnumeration<NameClassPair> {, +	private static final class BindingEnumeration extends AbstractNamingEnumeration<Binding> {, +++ b/spring-context/src/test/java/org/springframework/tests/mock/jndi/SimpleNamingContextBuilder.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.lang.Nullable;, +import org.springframework.util.Assert;, +import org.springframework.util.ReflectionUtils;, + * <li>Apache's Commons DBCP offers {@code org.apache.commons.dbcp.BasicDataSource} (a real pool), +	/** An instance of this class bound to JNDI. */, +	@Nullable, +	@Nullable, +	 * create and activate one. Otherwise take the existing activated, +		SimpleNamingContextBuilder builder = activated;, +		if (builder != null) {, +			builder.clear();, +			builder = new SimpleNamingContextBuilder();, +		return builder;, +				Assert.state(!NamingManager.hasInitialContextFactoryBuilder(),, +	@SuppressWarnings("unchecked"), +	public InitialContextFactory createInitialContextFactory(@Nullable Hashtable<?,?> environment) {, +					return (InitialContextFactory) ReflectionUtils.accessibleConstructor(icfClass).newInstance();, +					throw new IllegalStateException("Unable to instantiate specified InitialContextFactory: " + icf, ex);, +		return env -> new SimpleNamingContext("", this.boundObjects, (Hashtable<String, Object>) env);, +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/EnableAsyncTests.java, +	public void customExecutorConfig() {, +++ b/spring-context/src/test/java/org/springframework/tests/mock/jndi/ExpectedLookupTemplate.java, + * Simple extension of the JndiTemplate class that always returns a given object., + *, + * <p>Very useful for testing. Effectively a mock object., +	private final Map<String, Object> jndiObjects = new ConcurrentHashMap<>(16);, +	 * Construct a new JndiTemplate that will always return given objects for, +	 * given names. To be populated through {@code addObject} calls., +	 * Construct a new JndiTemplate that will always return the given object,, +	 * but honour only requests for the given name., +	 * Add the given object to the list of JNDI objects that this template will expose.]