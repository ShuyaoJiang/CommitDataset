[+++ b/org.springframework.web/src/main/java/org/springframework/http/HttpHeaders.java, + * Copyright 2002-2010 the original author or authors., +import java.util.LinkedHashMap;, +	private final Map<String, List<String>> headers;, +	/**, +	 * Private constructor that can create read-only {@code HttpHeader} instances., +	 */, +	private HttpHeaders(Map<String, List<String>> headers, boolean readOnly) {, +		Assert.notNull(headers, "'headers' must not be null");, +		if (readOnly) {, +			Map<String, List<String>> map =, +					new LinkedCaseInsensitiveMap<List<String>>(headers.size(), Locale.ENGLISH);, +			for (Entry<String, List<String>> entry : headers.entrySet()) {, +				List<String> values = Collections.unmodifiableList(entry.getValue());, +				map.put(entry.getKey(), values);, +			}, +			this.headers = Collections.unmodifiableMap(map);, +		}, +		else {, +			this.headers = headers;, +		}, +	}, +	/**, +	 * Constructs a new instance of the {@code HttpHeaders} object., +	 */, +	public HttpHeaders() {, +		this(new LinkedCaseInsensitiveMap<List<String>>(8, Locale.ENGLISH), false);, +	}, +, +	/**, +	 * Returns {@code HttpHeaders} object that can only be read, not written to., +	 */, +	public static HttpHeaders readOnlyHttpHeaders(HttpHeaders headers) {, +		return new HttpHeaders(headers, true);, +	}, +++ b/org.springframework.web/src/main/java/org/springframework/http/HttpHeaders.java, + * Copyright 2002-2010 the original author or authors., +import java.util.LinkedHashMap;, +	private final Map<String, List<String>> headers;, +	/**, +	 * Private constructor that can create read-only {@code HttpHeader} instances., +	 */, +	private HttpHeaders(Map<String, List<String>> headers, boolean readOnly) {, +		Assert.notNull(headers, "'headers' must not be null");, +		if (readOnly) {, +			Map<String, List<String>> map =, +					new LinkedCaseInsensitiveMap<List<String>>(headers.size(), Locale.ENGLISH);, +			for (Entry<String, List<String>> entry : headers.entrySet()) {, +				List<String> values = Collections.unmodifiableList(entry.getValue());, +				map.put(entry.getKey(), values);, +			}, +			this.headers = Collections.unmodifiableMap(map);, +		}, +		else {, +			this.headers = headers;, +		}, +	}, +	/**, +	 * Constructs a new instance of the {@code HttpHeaders} object., +	 */, +	public HttpHeaders() {, +		this(new LinkedCaseInsensitiveMap<List<String>>(8, Locale.ENGLISH), false);, +	}, +, +	/**, +	 * Returns {@code HttpHeaders} object that can only be read, not written to., +	 */, +	public static HttpHeaders readOnlyHttpHeaders(HttpHeaders headers) {, +		return new HttpHeaders(headers, true);, +	}, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/AbstractClientHttpRequest.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.util.Assert;, +		return executed ? HttpHeaders.readOnlyHttpHeaders(headers) : this.headers;, +++ b/org.springframework.web/src/main/java/org/springframework/http/HttpHeaders.java, + * Copyright 2002-2010 the original author or authors., +import java.util.LinkedHashMap;, +	private final Map<String, List<String>> headers;, +	/**, +	 * Private constructor that can create read-only {@code HttpHeader} instances., +	 */, +	private HttpHeaders(Map<String, List<String>> headers, boolean readOnly) {, +		Assert.notNull(headers, "'headers' must not be null");, +		if (readOnly) {, +			Map<String, List<String>> map =, +					new LinkedCaseInsensitiveMap<List<String>>(headers.size(), Locale.ENGLISH);, +			for (Entry<String, List<String>> entry : headers.entrySet()) {, +				List<String> values = Collections.unmodifiableList(entry.getValue());, +				map.put(entry.getKey(), values);, +			}, +			this.headers = Collections.unmodifiableMap(map);, +		}, +		else {, +			this.headers = headers;, +		}, +	}, +	/**, +	 * Constructs a new instance of the {@code HttpHeaders} object., +	 */, +	public HttpHeaders() {]