[+++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriTemplate.java, +			throw new IllegalArgumentException("Could not create URI from [" + uri + "]: " + ex, ex);, +				this.patternBuilder.append(quote(uriTemplate, end, m.start()));, +			this.patternBuilder.append(quote(uriTemplate, end, uriTemplate.length()));, +		private String quote(String fullPath, int start, int end) {, +			return Pattern.quote(fullPath.substring(start, end));, +++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriTemplate.java, +			throw new IllegalArgumentException("Could not create URI from [" + uri + "]: " + ex, ex);, +				this.patternBuilder.append(quote(uriTemplate, end, m.start()));, +			this.patternBuilder.append(quote(uriTemplate, end, uriTemplate.length()));, +		private String quote(String fullPath, int start, int end) {, +			return Pattern.quote(fullPath.substring(start, end));, +++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriUtils.java, +	private static final String USERINFO_PATTERN = "([^@/]*)";, +++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriTemplate.java, +			throw new IllegalArgumentException("Could not create URI from [" + uri + "]: " + ex, ex);, +				this.patternBuilder.append(quote(uriTemplate, end, m.start()));, +			this.patternBuilder.append(quote(uriTemplate, end, uriTemplate.length()));, +		private String quote(String fullPath, int start, int end) {, +			return Pattern.quote(fullPath.substring(start, end));, +++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriUtils.java, +	private static final String USERINFO_PATTERN = "([^@/]*)";, +++ b/org.springframework.web/src/test/java/org/springframework/web/client/RestTemplateIntegrationTests.java, +, +		result = template.getForObject(URI + "/uri/query={query}", String.class, "foo@bar");, +		assertEquals("Invalid request URI", "/uri/query=foo@bar", result);, +++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriTemplate.java, +			throw new IllegalArgumentException("Could not create URI from [" + uri + "]: " + ex, ex);, +				this.patternBuilder.append(quote(uriTemplate, end, m.start()));, +			this.patternBuilder.append(quote(uriTemplate, end, uriTemplate.length()));, +		private String quote(String fullPath, int start, int end) {, +			return Pattern.quote(fullPath.substring(start, end));, +++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriUtils.java, +	private static final String USERINFO_PATTERN = "([^@/]*)";, +++ b/org.springframework.web/src/test/java/org/springframework/web/client/RestTemplateIntegrationTests.java, +, +		result = template.getForObject(URI + "/uri/query={query}", String.class, "foo@bar");, +		assertEquals("Invalid request URI", "/uri/query=foo@bar", result);, +++ b/org.springframework.web/src/test/java/org/springframework/web/util/UriTemplateTests.java, +	@Test, +	public void expandWithAtSign() {, +		UriTemplate template = new UriTemplate("http://localhost/query={query}");, +		URI uri = template.expand("foo@bar");, +		assertEquals("http://localhost/query=foo@bar", uri.toString());, +	}, +, +++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriTemplate.java, +			throw new IllegalArgumentException("Could not create URI from [" + uri + "]: " + ex, ex);, +				this.patternBuilder.append(quote(uriTemplate, end, m.start()));, +			this.patternBuilder.append(quote(uriTemplate, end, uriTemplate.length()));, +		private String quote(String fullPath, int start, int end) {, +			return Pattern.quote(fullPath.substring(start, end));, +++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriUtils.java, +	private static final String USERINFO_PATTERN = "([^@/]*)";, +++ b/org.springframework.web/src/test/java/org/springframework/web/client/RestTemplateIntegrationTests.java, +, +		result = template.getForObject(URI + "/uri/query={query}", String.class, "foo@bar");, +		assertEquals("Invalid request URI", "/uri/query=foo@bar", result);, +++ b/org.springframework.web/src/test/java/org/springframework/web/util/UriTemplateTests.java, +	@Test, +	public void expandWithAtSign() {, +		UriTemplate template = new UriTemplate("http://localhost/query={query}");, +		URI uri = template.expand("foo@bar");, +		assertEquals("http://localhost/query=foo@bar", uri.toString());, +	}, +, +++ b/org.springframework.web/src/test/java/org/springframework/web/util/UriUtilsTest.java, +		assertEquals("Invalid encoded URI", "http://example.com/query=foo@bar", UriUtils.encodeUri("http://example.com/query=foo@bar", ENC));]