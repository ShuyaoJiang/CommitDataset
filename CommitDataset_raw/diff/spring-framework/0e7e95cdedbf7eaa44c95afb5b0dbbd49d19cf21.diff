[+++ b/src/docs/asciidoc/web/webflux.adoc, +infrastructure with the server <<webflux-fn,functional web framework>>., +The `retrieve()` method is the easiest way to get a response body and decode it:, +You can also get a stream of objects decoded from the response:, +By default, responses with 4xx or 5xx status codes result in an error of type, +to `retrieve()` but also provides access to the `ClientResponse`:, +You can also have a stream of objects encoded:, +Or if you have the actual value, use the `syncBody` shortcut method:, +for access to more options., +To customize the underlying HTTP client:, +To customize the <<webflux-codecs,HTTP codecs>> used for encoding and decoding HTTP messages:, +Explore the `WebClient.Builder` in your IDE for other options related to URI building,, +default headers (and cookies), and more., +After the `WebClient` is built, you can always obtain a new builder from it, in order to, +build a new `WebClient`, based on, but without affecting the current instance:, +For functional endpoints, the `WebClient`, and other functional APIs, the general rule, +of thumb for WebFlux APIs applies:, +* `Flux` or `Mono` as return values -- use them to compose logic or pass to any Reactive, +* Reactive Streams `Publisher` for input -- if a `Publisher` from another reactive library, +is provided it can only be treated as a stream with unknown semantics (0..N). If the, +semantics are known -- e.g. `io.reactivex.Single`, you can use `Mono.from(Publisher)` and, +pass that in instead of the raw `Publisher`.]