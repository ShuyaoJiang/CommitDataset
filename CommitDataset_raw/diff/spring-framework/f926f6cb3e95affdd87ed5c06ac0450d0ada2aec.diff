[+++ b/build.gradle, +	ext.hibval5Version       = "5.2.0.Beta1"  // to be upgraded to 5.2 final in time for Spring Framework 4.2 GA, +		rt("org.aspectj:aspectjrt:${aspectjVersion}")  // regular AspectJ version here, to be exposed in the POMs, +++ b/build.gradle, +	ext.hibval5Version       = "5.2.0.Beta1"  // to be upgraded to 5.2 final in time for Spring Framework 4.2 GA, +		rt("org.aspectj:aspectjrt:${aspectjVersion}")  // regular AspectJ version here, to be exposed in the POMs, +++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, + * Copyright 2002-2015 the original author or authors., +	public void setCustomArgumentResolvers(WebArgumentResolver... argumentResolvers) {, +	public void setCustomModelAndViewResolvers(ModelAndViewResolver... customModelAndViewResolvers) {, +					Map<String, Object> existingModel = (Map<String, Object>), +							request.getPortletSession().getAttribute(IMPLICIT_MODEL_SESSION_ATTRIBUTE);, +			return (PortletAnnotationMappingUtils.checkRequestMethod(this.methods, request) &&, +					PortletAnnotationMappingUtils.checkHeaders(this.headers, request));, +++ b/build.gradle, +	ext.hibval5Version       = "5.2.0.Beta1"  // to be upgraded to 5.2 final in time for Spring Framework 4.2 GA, +		rt("org.aspectj:aspectjrt:${aspectjVersion}")  // regular AspectJ version here, to be exposed in the POMs, +++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, + * Copyright 2002-2015 the original author or authors., +	public void setCustomArgumentResolvers(WebArgumentResolver... argumentResolvers) {, +	public void setCustomModelAndViewResolvers(ModelAndViewResolver... customModelAndViewResolvers) {, +					Map<String, Object> existingModel = (Map<String, Object>), +							request.getPortletSession().getAttribute(IMPLICIT_MODEL_SESSION_ATTRIBUTE);, +			return (PortletAnnotationMappingUtils.checkRequestMethod(this.methods, request) &&, +					PortletAnnotationMappingUtils.checkHeaders(this.headers, request));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +	public void setCustomArgumentResolvers(WebArgumentResolver... argumentResolvers) {, +	public void setCustomModelAndViewResolvers(ModelAndViewResolver... customModelAndViewResolvers) {, +				this.responseArgumentUsed = true;, +		private void handleResponseBody(Object returnValue, ServletWebRequest webRequest) throws Exception {, +		private void handleHttpEntityResponse(HttpEntity<?> responseEntity, ServletWebRequest webRequest) throws Exception {, +, +			this.patterns = (patterns != null ? patterns : new String[0]);, +			this.methods = (methods != null ? methods : new RequestMethod[0]);, +			this.params = (params != null ? params : new String[0]);, +			this.headers = (headers != null ? headers : new String[0]);, +			return (this.patterns.length > 0);, +			return this.patterns;, +			return this.methods.length;, +			return this.params.length;, +			return this.headers.length;, +			Set<String> methodNames = new LinkedHashSet<String>(this.methods.length);, +			for (RequestMethod method : this.methods) {, +			builder.append(Arrays.asList(this.patterns));, +			if (this.methods.length > 0) {, +				builder.append(Arrays.asList(this.methods));, +			if (this.headers.length > 0) {, +				builder.append(Arrays.asList(this.headers));, +			if (this.params.length > 0) {, +				builder.append(Arrays.asList(this.params));]