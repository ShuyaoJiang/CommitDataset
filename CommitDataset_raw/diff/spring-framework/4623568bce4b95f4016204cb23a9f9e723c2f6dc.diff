[+++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java, +import org.apache.http.client.methods.HttpPatch;, +	private static final boolean HTTP_PATCH_AVAILABLE = ClassUtils.isPresent(, +			"org.apache.http.client.methods.HttpPatch", HttpComponentsClientHttpRequestFactory.class.getClassLoader());, +, +		if (!HTTP_PATCH_AVAILABLE) {, +		else {, +			return new HttpPatch(uri);, +++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java, +import org.apache.http.client.methods.HttpPatch;, +	private static final boolean HTTP_PATCH_AVAILABLE = ClassUtils.isPresent(, +			"org.apache.http.client.methods.HttpPatch", HttpComponentsClientHttpRequestFactory.class.getClassLoader());, +, +		if (!HTTP_PATCH_AVAILABLE) {, +		else {, +			return new HttpPatch(uri);, +++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, + * <p>The {@code exchange} and {@code execute} methods are generalized versions of the more specific methods listed, + * above them. They support additional, less frequently used combinations including support for requests using the, + * HTTP PATCH method. However, note that the underlying HTTP library must also support the desired combination.</p>, + *]