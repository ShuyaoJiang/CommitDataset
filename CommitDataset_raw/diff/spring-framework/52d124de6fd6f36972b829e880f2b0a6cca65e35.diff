[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		if (mbd.getInstanceSupplier() != null) {, +			ResolvableType targetType = mbd.targetType;, +			if (targetType != null) {, +				Class<?> result = targetType.as(FactoryBean.class).getGeneric().resolve();, +				if (result != null) {, +					return result;, +				}, +			}, +			if (mbd.hasBeanClass()) {, +				Class<?> result = GenericTypeResolver.resolveTypeArgument(mbd.getBeanClass(), FactoryBean.class);, +				if (result != null) {, +					return result;, +				}, +			}, +		}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		if (mbd.getInstanceSupplier() != null) {, +			ResolvableType targetType = mbd.targetType;, +			if (targetType != null) {, +				Class<?> result = targetType.as(FactoryBean.class).getGeneric().resolve();, +				if (result != null) {, +					return result;, +				}, +			}, +			if (mbd.hasBeanClass()) {, +				Class<?> result = GenericTypeResolver.resolveTypeArgument(mbd.getBeanClass(), FactoryBean.class);, +				if (result != null) {, +					return result;, +				}, +			}, +		}, +, +++ b/spring-context/src/test/java/org/springframework/context/annotation/AnnotationConfigApplicationContextTests.java, +import org.springframework.beans.factory.support.RootBeanDefinition;, +import org.springframework.core.ResolvableType;, +	public void individualBeanWithFactoryBeanSupplier() {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		context.registerBean("fb", TypedFactoryBean.class, TypedFactoryBean::new, bd -> bd.setLazyInit(true));, +		context.refresh();, +, +		assertEquals(String.class, context.getType("fb"));, +		assertEquals(TypedFactoryBean.class, context.getType("&fb"));, +	}, +, +	@Test, +	public void individualBeanWithFactoryBeanSupplierAndTargetType() {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		RootBeanDefinition bd = new RootBeanDefinition();, +		bd.setInstanceSupplier(TypedFactoryBean::new);, +		bd.setTargetType(ResolvableType.forClassWithGenerics(FactoryBean.class, String.class));, +		bd.setLazyInit(true);, +		context.registerBeanDefinition("fb", bd);, +		context.refresh();, +, +		assertEquals(String.class, context.getType("fb"));, +		assertEquals(FactoryBean.class, context.getType("&fb"));, +	}, +, +	@Test, +	static class TypedFactoryBean implements FactoryBean<String> {, +, +		public TypedFactoryBean() {, +			throw new IllegalStateException();, +		}, +, +		@Override, +		public String getObject() {, +			return "";, +		}, +, +		@Override, +		public Class<?> getObjectType() {, +			return String.class;, +		}, +, +		@Override, +		public boolean isSingleton() {, +			return true;, +		}, +	}, +]