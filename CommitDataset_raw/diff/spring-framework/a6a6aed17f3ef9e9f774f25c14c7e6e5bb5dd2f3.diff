[+++ b/spring-core/src/main/java/org/springframework/util/StopWatch.java, + * Copyright 2002-2015 the original author or authors., +	 * Return the id of this stop watch, as specified on construction., +	 * @return the id (empty String by default), +	 * @since 4.2.2, +	 * @see #StopWatch(String), +	 */, +	public String getId() {, +		return this.id;, +	}, +, +	/**, +		this.startTimeMillis = System.currentTimeMillis();, +	 * {@code #start()} / {@code #stop()} methods., +	 * @see #currentTaskName(), +	/**, +	 * Return the name of the currently running task, if any., +	 * @since 4.2.2, +	 * @see #isRunning(), +	 */, +	public String currentTaskName() {, +		return this.currentTaskName;, +	}, +, +		return "StopWatch '" + getId() + "': running time (millis) = " + getTotalTimeMillis();, +			return (this.timeMillis / 1000.0);, +++ b/spring-core/src/main/java/org/springframework/util/StopWatch.java, + * Copyright 2002-2015 the original author or authors., +	 * Return the id of this stop watch, as specified on construction., +	 * @return the id (empty String by default), +	 * @since 4.2.2, +	 * @see #StopWatch(String), +	 */, +	public String getId() {, +		return this.id;, +	}, +, +	/**, +		this.startTimeMillis = System.currentTimeMillis();, +	 * {@code #start()} / {@code #stop()} methods., +	 * @see #currentTaskName(), +	/**, +	 * Return the name of the currently running task, if any., +	 * @since 4.2.2, +	 * @see #isRunning(), +	 */, +	public String currentTaskName() {, +		return this.currentTaskName;, +	}, +, +		return "StopWatch '" + getId() + "': running time (millis) = " + getTotalTimeMillis();, +			return (this.timeMillis / 1000.0);, +++ b/spring-core/src/test/java/org/springframework/util/StopWatchTests.java, + * Copyright 2002-2015 the original author or authors., + * @author Juergen Hoeller, +		String id = "myId";, +		StopWatch sw = new StopWatch(id);, +		assertEquals(name1, sw.currentTaskName());, +		assertTrue(pp.contains(name1));, +		assertTrue(pp.contains(name2));, +, +		String toString = sw.toString();, +		assertTrue(toString.contains(id));, +		assertTrue(toString.contains(name1));, +		assertTrue(toString.contains(name2));, +, +		assertEquals(id, sw.getId());, +		assertTrue(pp.contains("kept"));, +, +		String toString = sw.toString();, +		assertFalse(toString.contains(name1));, +		assertFalse(toString.contains(name2));]