[+++ b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java, + * Copyright 2002-2013 the original author or authors., +	private boolean trimTokens = true;, +, +	/** Whether to trim tokenized paths and patterns. */, +	public void setTrimTokens(boolean trimTokens) {, +		this.trimTokens  = trimTokens;, +	}, +		String[] pattDirs = StringUtils.tokenizeToStringArray(pattern, this.pathSeparator, this.trimTokens, true);, +		String[] pathDirs = StringUtils.tokenizeToStringArray(path, this.pathSeparator, this.trimTokens, true);, +		String[] patternParts = StringUtils.tokenizeToStringArray(pattern, this.pathSeparator, this.trimTokens, true);, +		String[] pathParts = StringUtils.tokenizeToStringArray(path, this.pathSeparator, this.trimTokens, true);, +++ b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java, + * Copyright 2002-2013 the original author or authors., +	private boolean trimTokens = true;, +, +	/** Whether to trim tokenized paths and patterns. */, +	public void setTrimTokens(boolean trimTokens) {, +		this.trimTokens  = trimTokens;, +	}, +		String[] pattDirs = StringUtils.tokenizeToStringArray(pattern, this.pathSeparator, this.trimTokens, true);, +		String[] pathDirs = StringUtils.tokenizeToStringArray(path, this.pathSeparator, this.trimTokens, true);, +		String[] patternParts = StringUtils.tokenizeToStringArray(pattern, this.pathSeparator, this.trimTokens, true);, +		String[] pathParts = StringUtils.tokenizeToStringArray(path, this.pathSeparator, this.trimTokens, true);, +++ b/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java, + * Copyright 2002-2013 the original author or authors., +	// SPR-8687, +	@Test, +	public void trimTokensOff() {, +		pathMatcher.setTrimTokens(false);, +, +		assertTrue(pathMatcher.match("/group/{groupName}/members", "/group/sales/members"));, +		assertTrue(pathMatcher.match("/group/{groupName}/members", "/group/  sales/members"));, +	}, +++ b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java, + * Copyright 2002-2013 the original author or authors., +	private boolean trimTokens = true;, +, +	/** Whether to trim tokenized paths and patterns. */, +	public void setTrimTokens(boolean trimTokens) {, +		this.trimTokens  = trimTokens;, +	}, +		String[] pattDirs = StringUtils.tokenizeToStringArray(pattern, this.pathSeparator, this.trimTokens, true);, +		String[] pathDirs = StringUtils.tokenizeToStringArray(path, this.pathSeparator, this.trimTokens, true);, +		String[] patternParts = StringUtils.tokenizeToStringArray(pattern, this.pathSeparator, this.trimTokens, true);, +		String[] pathParts = StringUtils.tokenizeToStringArray(path, this.pathSeparator, this.trimTokens, true);, +++ b/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java, + * Copyright 2002-2013 the original author or authors., +	// SPR-8687, +	@Test, +	public void trimTokensOff() {, +		pathMatcher.setTrimTokens(false);, +, +		assertTrue(pathMatcher.match("/group/{groupName}/members", "/group/sales/members"));, +		assertTrue(pathMatcher.match("/group/{groupName}/members", "/group/  sales/members"));, +	}, +++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/MockMvcBuilderSupport.java, + * Copyright 2002-2013 the original author or authors., +			List<ResultMatcher> globalResultMatchers, List<ResultHandler> globalResultHandlers, Boolean dispatchOptions) {, +		dispatcherServlet.setDispatchOptionsRequest(dispatchOptions);, +++ b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java, + * Copyright 2002-2013 the original author or authors., +	private boolean trimTokens = true;, +, +	/** Whether to trim tokenized paths and patterns. */, +	public void setTrimTokens(boolean trimTokens) {, +		this.trimTokens  = trimTokens;, +	}, +		String[] pattDirs = StringUtils.tokenizeToStringArray(pattern, this.pathSeparator, this.trimTokens, true);, +		String[] pathDirs = StringUtils.tokenizeToStringArray(path, this.pathSeparator, this.trimTokens, true);, +		String[] patternParts = StringUtils.tokenizeToStringArray(pattern, this.pathSeparator, this.trimTokens, true);, +		String[] pathParts = StringUtils.tokenizeToStringArray(path, this.pathSeparator, this.trimTokens, true);, +++ b/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java, + * Copyright 2002-2013 the original author or authors., +	// SPR-8687, +	@Test, +	public void trimTokensOff() {, +		pathMatcher.setTrimTokens(false);, +, +		assertTrue(pathMatcher.match("/group/{groupName}/members", "/group/sales/members"));, +		assertTrue(pathMatcher.match("/group/{groupName}/members", "/group/  sales/members"));, +	}, +++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/MockMvcBuilderSupport.java, + * Copyright 2002-2013 the original author or authors., +			List<ResultMatcher> globalResultMatchers, List<ResultHandler> globalResultHandlers, Boolean dispatchOptions) {, +		dispatcherServlet.setDispatchOptionsRequest(dispatchOptions);, +++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.java, + * Copyright 2002-2013 the original author or authors., +     * Create a {@link MockHttpServletRequestBuilder} for an OPTIONS request., +     *, +     * @param urlTemplate a URL template; the resulting URL will be encoded, +     * @param urlVariables zero or more URL variables, +     */, +    public static MockHttpServletRequestBuilder options(String urlTemplate, Object... urlVariables) {, +        return new MockHttpServletRequestBuilder(HttpMethod.OPTIONS, urlTemplate, urlVariables);, +    }, +, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java]