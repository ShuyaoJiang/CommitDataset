[+++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ErrorHandlingHttpHandler.java, +		Mono<Void> mono;, +			mono = getDelegate().handle(request, response);, +			mono = Mono.error(ex);, +			mono = applyExceptionHandler(mono, handler, request, response);, +		return mono;, +	private static Mono<Void> applyExceptionHandler(Mono<Void> mono, HttpExceptionHandler handler,, +			ServerHttpRequest request, ServerHttpResponse response) {, +		return mono.otherwise(ex -> handler.handle(request, response, ex)).after();, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ErrorHandlingHttpHandler.java, +		Mono<Void> mono;, +			mono = getDelegate().handle(request, response);, +			mono = Mono.error(ex);, +			mono = applyExceptionHandler(mono, handler, request, response);, +		return mono;, +	private static Mono<Void> applyExceptionHandler(Mono<Void> mono, HttpExceptionHandler handler,, +			ServerHttpRequest request, ServerHttpResponse response) {, +		return mono.otherwise(ex -> handler.handle(request, response, ex)).after();, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/HttpExceptionHandler.java, +	 * @return {@code Mono<Void>} to indicate when exception handling is complete., +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ErrorHandlingHttpHandler.java, +		Mono<Void> mono;, +			mono = getDelegate().handle(request, response);, +			mono = Mono.error(ex);, +			mono = applyExceptionHandler(mono, handler, request, response);, +		return mono;, +	private static Mono<Void> applyExceptionHandler(Mono<Void> mono, HttpExceptionHandler handler,, +			ServerHttpRequest request, ServerHttpResponse response) {, +		return mono.otherwise(ex -> handler.handle(request, response, ex)).after();, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/HttpExceptionHandler.java, +	 * @return {@code Mono<Void>} to indicate when exception handling is complete., +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/HttpFilter.java, +	 * @return {@code Mono<Void>} to indicate when request processing is complete., +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ErrorHandlingHttpHandler.java, +		Mono<Void> mono;, +			mono = getDelegate().handle(request, response);, +			mono = Mono.error(ex);, +			mono = applyExceptionHandler(mono, handler, request, response);, +		return mono;, +	private static Mono<Void> applyExceptionHandler(Mono<Void> mono, HttpExceptionHandler handler,, +			ServerHttpRequest request, ServerHttpResponse response) {, +		return mono.otherwise(ex -> handler.handle(request, response, ex)).after();, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/HttpExceptionHandler.java, +	 * @return {@code Mono<Void>} to indicate when exception handling is complete., +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/HttpFilter.java, +	 * @return {@code Mono<Void>} to indicate when request processing is complete., +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/HttpFilterChain.java, +	 * @return {@code Mono<Void>} to indicate when request handling is complete., +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ErrorHandlingHttpHandler.java, +		Mono<Void> mono;, +			mono = getDelegate().handle(request, response);, +			mono = Mono.error(ex);, +			mono = applyExceptionHandler(mono, handler, request, response);, +		return mono;, +	private static Mono<Void> applyExceptionHandler(Mono<Void> mono, HttpExceptionHandler handler,, +			ServerHttpRequest request, ServerHttpResponse response) {, +		return mono.otherwise(ex -> handler.handle(request, response, ex)).after();, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/HttpExceptionHandler.java, +	 * @return {@code Mono<Void>} to indicate when exception handling is complete., +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/HttpFilter.java, +	 * @return {@code Mono<Void>} to indicate when request processing is complete., +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/HttpFilterChain.java, +	 * @return {@code Mono<Void>} to indicate when request handling is complete., +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/HttpHandler.java, +	 * @return {@code Mono<Void>} to indicate when request handling is complete., +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ErrorHandlingHttpHandler.java, +		Mono<Void> mono;, +			mono = getDelegate().handle(request, response);, +			mono = Mono.error(ex);, +			mono = applyExceptionHandler(mono, handler, request, response);, +		return mono;, +	private static Mono<Void> applyExceptionHandler(Mono<Void> mono, HttpExceptionHandler handler,, +			ServerHttpRequest request, ServerHttpResponse response) {, +		return mono.otherwise(ex -> handler.handle(request, response, ex)).after();, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/HttpExceptionHandler.java, +	 * @return {@code Mono<Void>} to indicate when exception handling is complete., +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/HttpFilter.java, +	 * @return {@code Mono<Void>} to indicate when request processing is complete., +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/HttpFilterChain.java, +	 * @return {@code Mono<Void>} to indicate when request handling is complete., +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/HttpHandler.java, +	 * @return {@code Mono<Void>} to indicate when request handling is complete., +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, +					Mono<Void> mono = (result.hasError() ? Mono.error(result.getError()) :, +							handleResult(request, response, result));, +						return mono.otherwise(ex -> result.getExceptionMapper().apply(ex), +								.then(exResult -> handleResult(request, response, exResult)));, +					return mono;, +	protected Mono<Void> handleResult(ServerHttpRequest request, ServerHttpResponse response, HandlerResult result) {, +		return getResultHandler(result).handleResult(request, response, result);, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ErrorHandlingHttpHandler.java, +		Mono<Void> mono;, +			mono = getDelegate().handle(request, response);, +			mono = Mono.error(ex);, +			mono = applyExceptionHandler(mono, handler, request, response);, +		return mono;, +	private static Mono<Void> applyExceptionHandler(Mono<Void> mono, HttpExceptionHandler handler,, +			ServerHttpRequest request, ServerHttpResponse response) {]