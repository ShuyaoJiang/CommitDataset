[+++ b/spring-aspects/src/test/java/org/springframework/transaction/aspectj/JtaTransactionAspectsTests.java, +, +, +, +++ b/spring-aspects/src/test/java/org/springframework/transaction/aspectj/JtaTransactionAspectsTests.java, +, +, +, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import java.lang.reflect.UndeclaredThrowableException;, +					Throwable cause = ex.getTargetException();, +					if (cause instanceof UndeclaredThrowableException) {, +						// May happen e.g. with Groovy-generated methods, +						cause = cause.getCause();, +					}, +					throw new MethodInvocationException(propertyChangeEvent, cause);, +++ b/spring-aspects/src/test/java/org/springframework/transaction/aspectj/JtaTransactionAspectsTests.java, +, +, +, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import java.lang.reflect.UndeclaredThrowableException;, +					Throwable cause = ex.getTargetException();, +					if (cause instanceof UndeclaredThrowableException) {, +						// May happen e.g. with Groovy-generated methods, +						cause = cause.getCause();, +					}, +					throw new MethodInvocationException(propertyChangeEvent, cause);, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/EnableCaching.java, + * Copyright 2002-2015 the original author or authors., +	 * Spring-managed beans requiring proxying, not just those marked with {@code @Cacheable}., +	 * For example, other beans marked with Spring's {@code @Transactional} annotation will, +	 * be upgraded to subclass proxying at the same time. This approach has no negative, +	 * impact in practice unless one is explicitly expecting one type of proxy vs another,, +	 * e.g. in tests., +, +++ b/spring-aspects/src/test/java/org/springframework/transaction/aspectj/JtaTransactionAspectsTests.java, +, +, +, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import java.lang.reflect.UndeclaredThrowableException;, +					Throwable cause = ex.getTargetException();, +					if (cause instanceof UndeclaredThrowableException) {, +						// May happen e.g. with Groovy-generated methods, +						cause = cause.getCause();, +					}, +					throw new MethodInvocationException(propertyChangeEvent, cause);, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/EnableCaching.java, + * Copyright 2002-2015 the original author or authors., +	 * Spring-managed beans requiring proxying, not just those marked with {@code @Cacheable}., +	 * For example, other beans marked with Spring's {@code @Transactional} annotation will, +	 * be upgraded to subclass proxying at the same time. This approach has no negative, +	 * impact in practice unless one is explicitly expecting one type of proxy vs another,, +	 * e.g. in tests., +, +++ b/spring-context/src/main/java/org/springframework/scripting/groovy/GroovyScriptFactory.java, + * Copyright 2002-2015 the original author or authors., +	public void setBeanFactory(BeanFactory beanFactory) {, +++ b/spring-aspects/src/test/java/org/springframework/transaction/aspectj/JtaTransactionAspectsTests.java, +, +, +, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import java.lang.reflect.UndeclaredThrowableException;, +					Throwable cause = ex.getTargetException();, +					if (cause instanceof UndeclaredThrowableException) {, +						// May happen e.g. with Groovy-generated methods, +						cause = cause.getCause();, +					}, +					throw new MethodInvocationException(propertyChangeEvent, cause);, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/EnableCaching.java, + * Copyright 2002-2015 the original author or authors., +	 * Spring-managed beans requiring proxying, not just those marked with {@code @Cacheable}., +	 * For example, other beans marked with Spring's {@code @Transactional} annotation will, +	 * be upgraded to subclass proxying at the same time. This approach has no negative, +	 * impact in practice unless one is explicitly expecting one type of proxy vs another,, +	 * e.g. in tests., +, +++ b/spring-context/src/main/java/org/springframework/scripting/groovy/GroovyScriptFactory.java, + * Copyright 2002-2015 the original author or authors., +	public void setBeanFactory(BeanFactory beanFactory) {, +++ b/spring-context/src/main/java/org/springframework/scripting/support/ScriptFactoryPostProcessor.java, + * Copyright 2002-2015 the original author or authors., + * &lt;bean id="groovyMessenger" class="org.springframework.scripting.groovy.GroovyScriptFactory"&gt;, +				this.scriptBeanFactory.registerBeanDefinition(, +						scriptFactoryBeanName, createScriptFactoryBeanDefinition(bd));, +				ScriptFactory scriptFactory =, +						this.scriptBeanFactory.getBean(scriptFactoryBeanName, ScriptFactory.class);, +				ScriptSource scriptSource =, +						getScriptSource(scriptFactoryBeanName, scriptFactory.getScriptSourceLocator());, +				BeanDefinition objectBd = createScriptedObjectBeanDefinition(, +						bd, scriptFactoryBeanName, scriptSource, scriptedInterfaces);, +			proxyFactory.setProxyTargetClass(true);]