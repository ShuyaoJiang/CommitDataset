[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java, +	 * Find a getter method for the specified property., +		String propertyWriteMethodSuffix;, +		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {, +			propertyWriteMethodSuffix = propertyName;, +		}, +		else {, +			propertyWriteMethodSuffix = StringUtils.capitalize(propertyName);, +		}, +		String getterName = "get" + propertyWriteMethodSuffix;, +		getterName = "is" + propertyWriteMethodSuffix;, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java, +	 * Find a getter method for the specified property., +		String propertyWriteMethodSuffix;, +		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {, +			propertyWriteMethodSuffix = propertyName;, +		}, +		else {, +			propertyWriteMethodSuffix = StringUtils.capitalize(propertyName);, +		}, +		String getterName = "get" + propertyWriteMethodSuffix;, +		getterName = "is" + propertyWriteMethodSuffix;, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/support/ReflectionHelperTests.java, +		// repro SPR-9123, ReflectivePropertyAccessor JavaBean property names compliance tests, +		Assert.assertEquals("iD",rpr.read(ctx,t,"iD").getValue());, +		Assert.assertTrue(rpr.canRead(ctx,t,"iD"));, +		Assert.assertEquals("id",rpr.read(ctx,t,"id").getValue());, +		Assert.assertTrue(rpr.canRead(ctx,t,"id"));, +		Assert.assertEquals("ID",rpr.read(ctx,t,"ID").getValue());, +		Assert.assertTrue(rpr.canRead(ctx,t,"ID"));, +		// note: "Id" is not a valid JavaBean name, nevertheless it is treated as "id", +		Assert.assertEquals("id",rpr.read(ctx,t,"Id").getValue());, +		Assert.assertTrue(rpr.canRead(ctx,t,"Id"));, +		String iD = "iD";, +		String id = "id";, +		String ID = "ID";, +, +		public String getiD() { return iD; }, +, +		public String getId() { return id; }, +, +		public String getID() { return ID; }]