[+++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ExceptionHandlerMethodResolver.java, + * Copyright 2002-2016 the original author or authors., + * @author Juergen Hoeller, +		if (method == null) {, +			Throwable cause = exception.getCause();, +			if (cause != null) {, +				method = resolveMethodByExceptionType(cause.getClass());, +			}, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ExceptionHandlerMethodResolver.java, + * Copyright 2002-2016 the original author or authors., + * @author Juergen Hoeller, +		if (method == null) {, +			Throwable cause = exception.getCause();, +			if (cause != null) {, +				method = resolveMethodByExceptionType(cause.getClass());, +			}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodExceptionResolver.java, + * Copyright 2002-2016 the original author or authors., +	 * base class implementation of {@code #shouldApplyTo(HttpServletRequest, Object)}, +			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {, +			HttpServletRequest request, HttpServletResponse response, HandlerMethod handlerMethod, Exception ex);, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ExceptionHandlerMethodResolver.java, + * Copyright 2002-2016 the original author or authors., + * @author Juergen Hoeller, +		if (method == null) {, +			Throwable cause = exception.getCause();, +			if (cause != null) {, +				method = resolveMethodByExceptionType(cause.getClass());, +			}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodExceptionResolver.java, + * Copyright 2002-2016 the original author or authors., +	 * base class implementation of {@code #shouldApplyTo(HttpServletRequest, Object)}, +			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {, +			HttpServletRequest request, HttpServletResponse response, HandlerMethod handlerMethod, Exception ex);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java, + * @author Juergen Hoeller, +			Throwable cause = exception.getCause();, +			if (cause != null) {, +				// Expose cause as provided argument as well, +				exceptionHandlerMethod.invokeAndHandle(webRequest, mavContainer, exception, cause, handlerMethod);, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ExceptionHandlerMethodResolver.java, + * Copyright 2002-2016 the original author or authors., + * @author Juergen Hoeller, +		if (method == null) {, +			Throwable cause = exception.getCause();, +			if (cause != null) {, +				method = resolveMethodByExceptionType(cause.getClass());, +			}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodExceptionResolver.java, + * Copyright 2002-2016 the original author or authors., +	 * base class implementation of {@code #shouldApplyTo(HttpServletRequest, Object)}, +			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {, +			HttpServletRequest request, HttpServletResponse response, HandlerMethod handlerMethod, Exception ex);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java, + * @author Juergen Hoeller, +			Throwable cause = exception.getCause();, +			if (cause != null) {, +				// Expose cause as provided argument as well, +				exceptionHandlerMethod.invokeAndHandle(webRequest, mavContainer, exception, cause, handlerMethod);, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolverTests.java, +import org.springframework.beans.FatalBeanException;, +		ExceptionHandlerExceptionResolver resolver = new ExceptionHandlerExceptionResolver();, +		resolver.afterPropertiesSet();, +		RESOLVER_COUNT = resolver.getArgumentResolvers().getResolvers().size();, +		HANDLER_COUNT = resolver.getReturnValueHandlers().getHandlers().size();, +	@Test  // SPR-12605, +	public void resolveExceptionWithAssertionErrorAsRootCause() throws Exception {, +		AnnotationConfigApplicationContext cxt = new AnnotationConfigApplicationContext(MyConfig.class);, +		this.resolver.setApplicationContext(cxt);, +		this.resolver.afterPropertiesSet();, +, +		AssertionError err = new AssertionError("argh");, +		FatalBeanException ex = new FatalBeanException("wrapped", err);, +		HandlerMethod handlerMethod = new HandlerMethod(new ResponseBodyController(), "handle");, +		ModelAndView mav = this.resolver.resolveException(this.request, this.response, handlerMethod, ex);, +, +		assertNotNull("Exception was not handled", mav);, +		assertTrue(mav.isEmpty());, +		assertEquals(err.toString(), this.response.getContentAsString());, +	}, +, +	@Test]