[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java, + * support and Servlet 3.1 non-blocking I/O., +public class ServletHttpHandlerAdapter extends HttpHandlerAdapterSupport implements Servlet {, +	/**, +	 * Set the size of the input buffer used for reading in bytes., +	 * <p>By default this is set to 8192., +	 */, +	/**, +	 * Return the configured input buffer size., +	 */, +, +	public void service(ServletRequest request, ServletResponse response) throws IOException {, +		AsyncContext asyncContext = request.startAsync();, +		ServerHttpRequest httpRequest = new ServletServerHttpRequest(, +				((HttpServletRequest) request), asyncContext, getDataBufferFactory(), getBufferSize());, +		ServerHttpResponse httpResponse = new ServletServerHttpResponse(, +				((HttpServletResponse) response), asyncContext, getDataBufferFactory(), getBufferSize());, +		HandlerResultSubscriber subscriber = new HandlerResultSubscriber(asyncContext);, +		getHttpHandler().handle(httpRequest, httpResponse).subscribe(subscriber);, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java, + * support and Servlet 3.1 non-blocking I/O., +public class ServletHttpHandlerAdapter extends HttpHandlerAdapterSupport implements Servlet {, +	/**, +	 * Set the size of the input buffer used for reading in bytes., +	 * <p>By default this is set to 8192., +	 */, +	/**, +	 * Return the configured input buffer size., +	 */, +, +	public void service(ServletRequest request, ServletResponse response) throws IOException {, +		AsyncContext asyncContext = request.startAsync();, +		ServerHttpRequest httpRequest = new ServletServerHttpRequest(, +				((HttpServletRequest) request), asyncContext, getDataBufferFactory(), getBufferSize());, +		ServerHttpResponse httpResponse = new ServletServerHttpResponse(, +				((HttpServletResponse) response), asyncContext, getDataBufferFactory(), getBufferSize());, +		HandlerResultSubscriber subscriber = new HandlerResultSubscriber(asyncContext);, +		getHttpHandler().handle(httpRequest, httpResponse).subscribe(subscriber);, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java, +import javax.servlet.AsyncContext;, +import javax.servlet.AsyncEvent;, +import javax.servlet.AsyncListener;, +	private final DataBufferFactory bufferFactory;, +	private final Object bodyPublisherLock = new Object();, +	public ServletServerHttpRequest(HttpServletRequest request, AsyncContext asyncContext,, +		this.bufferFactory = bufferFactory;, +, +		asyncContext.addListener(new RequestAsyncListener());, +			RequestBodyPublisher publisher = this.bodyPublisher;, +			if (publisher == null) {, +				synchronized (this.bodyPublisherLock) {, +					publisher = this.bodyPublisher;, +					if (publisher == null) {, +						ServletInputStream inputStream = this.request.getInputStream();, +						publisher = new RequestBodyPublisher(inputStream, this.bufferFactory, this.bufferSize);, +						publisher.registerReadListener();, +						this.bodyPublisher = publisher;, +			return Flux.from(publisher);, +, +	private final class RequestAsyncListener implements AsyncListener {, +, +		@Override, +		public void onStartAsync(AsyncEvent event) {}, +, +		@Override, +		public void onTimeout(AsyncEvent event) {, +			Throwable ex = event.getThrowable();, +			ex = ex != null ? ex : new IllegalStateException("Async operation timeout.");, +			handleError(ex);, +		}, +, +		@Override, +		public void onError(AsyncEvent event) {, +			handleError(event.getThrowable());, +		}, +, +		private void handleError(Throwable ex) {, +			if (bodyPublisher != null) {, +				bodyPublisher.onError(ex);, +		@Override, +		public void onComplete(AsyncEvent event) {, +			if (bodyPublisher != null) {, +				bodyPublisher.onAllDataRead();, +		private final RequestBodyPublisherReadListener readListener =, +				new RequestBodyPublisherReadListener();, +		private final DataBufferFactory bufferFactory;, +, +				DataBufferFactory bufferFactory, int bufferSize) {, +			this.bufferFactory = bufferFactory;, +		public void registerReadListener() throws IOException {, +					DataBuffer dataBuffer = this.bufferFactory.allocateBuffer(read);, +		private class RequestBodyPublisherReadListener implements ReadListener {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java, + * support and Servlet 3.1 non-blocking I/O., +public class ServletHttpHandlerAdapter extends HttpHandlerAdapterSupport implements Servlet {, +	/**, +	 * Set the size of the input buffer used for reading in bytes., +	 * <p>By default this is set to 8192.]