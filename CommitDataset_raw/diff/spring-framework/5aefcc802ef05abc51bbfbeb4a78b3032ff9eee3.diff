[+++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/DefaultJCacheOperationSource.java, +import org.springframework.beans.factory.SmartInitializingSingleton;, +		implements InitializingBean, SmartInitializingSingleton, ApplicationContextAware {, +		return getDefaultCacheResolver();, +		return getDefaultExceptionCacheResolver();, +, +	@Override, +	public void afterSingletonsInstantiated() { // Make sure those are initialized on startup, +		Assert.notNull(getDefaultCacheResolver(), "Cache resolver should have been initialized.");, +		Assert.notNull(getDefaultExceptionCacheResolver(), "Exception cache resolver should have been initialized.");, +		if (this.cacheResolver == null) {, +			this.cacheResolver = new SimpleCacheResolver(getCacheManager());, +		}, +		if (this.exceptionCacheResolver == null) {, +			this.exceptionCacheResolver = new SimpleExceptionCacheResolver(getCacheManager());, +		}, +	private CacheManager getCacheManager() {, +		if (this.cacheManager == null) {, +			this.cacheManager = this.applicationContext.getBean(CacheManager.class);, +			if (this.cacheManager == null) {, +				throw new IllegalStateException("No bean of type CacheManager could be found. " +, +						"Register a CacheManager bean or remove the @EnableCaching annotation " +, +						"from your configuration.");, +			}, +		}, +		return this.cacheManager;, +	}, +, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/DefaultJCacheOperationSource.java, +import org.springframework.beans.factory.SmartInitializingSingleton;, +		implements InitializingBean, SmartInitializingSingleton, ApplicationContextAware {, +		return getDefaultCacheResolver();, +		return getDefaultExceptionCacheResolver();, +, +	@Override, +	public void afterSingletonsInstantiated() { // Make sure those are initialized on startup, +		Assert.notNull(getDefaultCacheResolver(), "Cache resolver should have been initialized.");, +		Assert.notNull(getDefaultExceptionCacheResolver(), "Exception cache resolver should have been initialized.");, +		if (this.cacheResolver == null) {, +			this.cacheResolver = new SimpleCacheResolver(getCacheManager());, +		}, +		if (this.exceptionCacheResolver == null) {, +			this.exceptionCacheResolver = new SimpleExceptionCacheResolver(getCacheManager());, +		}, +	private CacheManager getCacheManager() {, +		if (this.cacheManager == null) {, +			this.cacheManager = this.applicationContext.getBean(CacheManager.class);, +			if (this.cacheManager == null) {, +				throw new IllegalStateException("No bean of type CacheManager could be found. " +, +						"Register a CacheManager bean or remove the @EnableCaching annotation " +, +						"from your configuration.");, +			}, +		}, +		return this.cacheManager;, +	}, +, +++ b/spring-context-support/src/test/java/org/springframework/cache/jcache/interceptor/JCacheInterceptorTests.java, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +		thrown.expect(NoSuchBeanDefinitionException.class);, +		source.afterSingletonsInstantiated();, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/DefaultJCacheOperationSource.java, +import org.springframework.beans.factory.SmartInitializingSingleton;, +		implements InitializingBean, SmartInitializingSingleton, ApplicationContextAware {, +		return getDefaultCacheResolver();, +		return getDefaultExceptionCacheResolver();, +, +	@Override, +	public void afterSingletonsInstantiated() { // Make sure those are initialized on startup, +		Assert.notNull(getDefaultCacheResolver(), "Cache resolver should have been initialized.");, +		Assert.notNull(getDefaultExceptionCacheResolver(), "Exception cache resolver should have been initialized.");, +		if (this.cacheResolver == null) {, +			this.cacheResolver = new SimpleCacheResolver(getCacheManager());, +		}, +		if (this.exceptionCacheResolver == null) {, +			this.exceptionCacheResolver = new SimpleExceptionCacheResolver(getCacheManager());, +		}, +	private CacheManager getCacheManager() {, +		if (this.cacheManager == null) {, +			this.cacheManager = this.applicationContext.getBean(CacheManager.class);, +			if (this.cacheManager == null) {, +				throw new IllegalStateException("No bean of type CacheManager could be found. " +, +						"Register a CacheManager bean or remove the @EnableCaching annotation " +, +						"from your configuration.");, +			}, +		}, +		return this.cacheManager;, +	}, +, +++ b/spring-context-support/src/test/java/org/springframework/cache/jcache/interceptor/JCacheInterceptorTests.java, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +		thrown.expect(NoSuchBeanDefinitionException.class);, +		source.afterSingletonsInstantiated();, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/AbstractCachingConfiguration.java, +	@Autowired(required = false), +	void setConfigurers(Collection<C> configurers) {, +		if (CollectionUtils.isEmpty(configurers)) {, +			return;, +		}, +		if (configurers.size() > 1) {, +			throw new IllegalStateException(configurers.size() + " implementations of " +]