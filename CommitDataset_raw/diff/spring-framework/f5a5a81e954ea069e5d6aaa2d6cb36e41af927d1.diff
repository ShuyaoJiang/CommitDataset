[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/MockWebResponseBuilder.java, + * Copyright 2002-2016 the original author or authors., +import java.util.Date;, +import javax.servlet.http.Cookie;, +, + * @author Rossen Stoyanchev, +		for (Cookie cookie : this.response.getCookies()) {, +			responseHeaders.add(new NameValuePair("Set-Cookie", valueOfCookie(cookie)));, +		}, +	private String valueOfCookie(Cookie cookie) {, +		Date expires = null;, +		if (cookie.getMaxAge() > -1) {, +			expires = new Date(System.currentTimeMillis() + cookie.getMaxAge() * 1000);, +		}, +		return new com.gargoylesoftware.htmlunit.util.Cookie(, +				cookie.getDomain(), cookie.getName(), cookie.getValue(),, +				cookie.getPath(), expires, cookie.getSecure(), cookie.isHttpOnly()).toString();, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/MockWebResponseBuilder.java, + * Copyright 2002-2016 the original author or authors., +import java.util.Date;, +import javax.servlet.http.Cookie;, +, + * @author Rossen Stoyanchev, +		for (Cookie cookie : this.response.getCookies()) {, +			responseHeaders.add(new NameValuePair("Set-Cookie", valueOfCookie(cookie)));, +		}, +	private String valueOfCookie(Cookie cookie) {, +		Date expires = null;, +		if (cookie.getMaxAge() > -1) {, +			expires = new Date(System.currentTimeMillis() + cookie.getMaxAge() * 1000);, +		}, +		return new com.gargoylesoftware.htmlunit.util.Cookie(, +				cookie.getDomain(), cookie.getName(), cookie.getValue(),, +				cookie.getPath(), expires, cookie.getSecure(), cookie.isHttpOnly()).toString();, +	}, +, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/MockWebResponseBuilderTests.java, + * Copyright 2002-2016 the original author or authors., +import javax.servlet.http.Cookie;, +, +import static org.hamcrest.CoreMatchers.endsWith;, +import static org.hamcrest.CoreMatchers.startsWith;, +		Cookie cookie = new Cookie("cookieA", "valueA");, +		cookie.setDomain("domain");, +		cookie.setPath("/path");, +		cookie.setMaxAge(1800);, +		cookie.setSecure(true);, +		cookie.setHttpOnly(true);, +		this.response.addCookie(cookie);, +		assertThat(responseHeaders.size(), equalTo(3));, +		header = responseHeaders.get(2);, +		assertThat(header.getName(), equalTo("Set-Cookie"));, +		assertThat(header.getValue(), startsWith("cookieA=valueA;domain=domain;path=/path;expires="));, +		assertThat(header.getValue(), endsWith(";secure;httpOnly"));]