[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +			if (source == null || targetType.getType().isInstance(source)) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +			if (source == null || targetType.getType().isInstance(source)) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/PropertyTypeDescriptor.java, +	public TypeDescriptor forElementType(Class<?> elementType) {, +		if (elementType == null) {, +			return TypeDescriptor.UNKNOWN;, +		}, +		else {, +			return new PropertyTypeDescriptor(this.propertyDescriptor, getMethodParameter(), elementType);, +		}, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +			if (source == null || targetType.getType().isInstance(source)) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/PropertyTypeDescriptor.java, +	public TypeDescriptor forElementType(Class<?> elementType) {, +		if (elementType == null) {, +			return TypeDescriptor.UNKNOWN;, +		}, +		else {, +			return new PropertyTypeDescriptor(this.propertyDescriptor, getMethodParameter(), elementType);, +		}, +	}, +, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java, + * Copyright 2002-2010 the original author or authors., +import static org.junit.Assert.*;, +, +		List<Integer> bar = (List<Integer>) conversionService.convert(foo, TypeDescriptor.forObject(foo),, +				TypeDescriptor.forObject(values), new TypeDescriptor(getClass().getField("genericList")));, +		Map<String, FooEnum> map = (Map<String, FooEnum>) conversionService.convert(foo,, +				TypeDescriptor.forObject(foo), new TypeDescriptor(getClass().getField("genericMap")));]