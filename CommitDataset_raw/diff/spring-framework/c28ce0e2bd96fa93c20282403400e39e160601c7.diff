[+++ b/spring-websocket/src/main/java/org/springframework/sockjs/AbstractSockJsSession.java, +	private TextMessageHandler handler;, +		initHandler();, +	private void initHandler() {, +		WebSocketHandler webSocketHandler = handlerProvider.getHandler();, +		Assert.isInstanceOf(TextMessageHandler.class, webSocketHandler, "Expected a TextMessageHandler");, +		this.handler = (TextMessageHandler) webSocketHandler;, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/AbstractSockJsSession.java, +	private TextMessageHandler handler;, +		initHandler();, +	private void initHandler() {, +		WebSocketHandler webSocketHandler = handlerProvider.getHandler();, +		Assert.isInstanceOf(TextMessageHandler.class, webSocketHandler, "Expected a TextMessageHandler");, +		this.handler = (TextMessageHandler) webSocketHandler;, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/transport/SockJsWebSocketHandler.java, +import java.util.concurrent.atomic.AtomicInteger;, +	private final AtomicInteger sessionCount = new AtomicInteger(0);, +, +		Assert.isTrue(this.sessionCount.compareAndSet(0, 1), "Unexpected connection");, +		String[] messages;, +			messages = this.objectMapper.readValue(payload, String[].class);, +			return;, +		this.session.delegateMessages(messages);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/AbstractSockJsSession.java, +	private TextMessageHandler handler;, +		initHandler();, +	private void initHandler() {, +		WebSocketHandler webSocketHandler = handlerProvider.getHandler();, +		Assert.isInstanceOf(TextMessageHandler.class, webSocketHandler, "Expected a TextMessageHandler");, +		this.handler = (TextMessageHandler) webSocketHandler;, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/transport/SockJsWebSocketHandler.java, +import java.util.concurrent.atomic.AtomicInteger;, +	private final AtomicInteger sessionCount = new AtomicInteger(0);, +, +		Assert.isTrue(this.sessionCount.compareAndSet(0, 1), "Unexpected connection");, +		String[] messages;, +			messages = this.objectMapper.readValue(payload, String[].class);, +			return;, +		this.session.delegateMessages(messages);, +++ b/spring-websocket/src/main/java/org/springframework/websocket/endpoint/WebSocketHandlerEndpoint.java, +import java.util.concurrent.atomic.AtomicInteger;, +, +	private final AtomicInteger sessionCount = new AtomicInteger(0);, +, +, +		Assert.isTrue(this.sessionCount.compareAndSet(0, 1), "Unexpected connection");, +, +			logger.debug("Client connected, javax.websocket.Session id=", +					+ session.getId() + ", uri=" + session.getRequestURI());, +, +		this.handler = handlerProvider.getHandler();, +			if (logger.isWarnEnabled()) {, +		}, +		try {, +			this.handler.handleError(ex, this.webSocketSession);, +			this.handler.handleError(ex, this.webSocketSession);, +			this.handler.handleError(ex, this.webSocketSession);, +			// TODO: close the session?]