[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +		public Mono<Object> getHandlerInternal(ServerWebExchange exchange) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +		public Mono<Object> getHandlerInternal(ServerWebExchange exchange) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/handler/AbstractHandlerMapping.java, +	@Override, +	public Mono<Object> getHandler(ServerWebExchange exchange) {, +		return getHandlerInternal(exchange).map(handler -> {, +		});, +	 * Look up a handler for the given request, returning an empty {@code Mono}, +	 * if no specific one is found. This method is called by {@link #getHandler}., +	 *, +	 * <p>On CORS pre-flight requests this method should return a match not for, +	 * the pre-flight request but for the expected actual request based on the URL, +	 * path, the HTTP methods from the "Access-Control-Request-Method" header, and, +	 * the headers from the "Access-Control-Request-Headers" header thus allowing, +	 * the CORS configuration to be obtained via {@link #getCorsConfigurations},, +	 *, +	 * @param exchange current exchange, +	 * @return {@code Mono} for the matching handler, if any, +	 */, +	protected abstract Mono<?> getHandlerInternal(ServerWebExchange exchange);, +, +	/**, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +		public Mono<Object> getHandlerInternal(ServerWebExchange exchange) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/handler/AbstractHandlerMapping.java, +	@Override, +	public Mono<Object> getHandler(ServerWebExchange exchange) {, +		return getHandlerInternal(exchange).map(handler -> {, +		});, +	 * Look up a handler for the given request, returning an empty {@code Mono}, +	 * if no specific one is found. This method is called by {@link #getHandler}., +	 *, +	 * <p>On CORS pre-flight requests this method should return a match not for, +	 * the pre-flight request but for the expected actual request based on the URL, +	 * path, the HTTP methods from the "Access-Control-Request-Method" header, and, +	 * the headers from the "Access-Control-Request-Headers" header thus allowing, +	 * the CORS configuration to be obtained via {@link #getCorsConfigurations},, +	 *, +	 * @param exchange current exchange, +	 * @return {@code Mono} for the matching handler, if any, +	 */, +	protected abstract Mono<?> getHandlerInternal(ServerWebExchange exchange);, +, +	/**, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/handler/AbstractUrlHandlerMapping.java, +	public Mono<Object> getHandlerInternal(ServerWebExchange exchange) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +		public Mono<Object> getHandlerInternal(ServerWebExchange exchange) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/handler/AbstractHandlerMapping.java, +	@Override, +	public Mono<Object> getHandler(ServerWebExchange exchange) {, +		return getHandlerInternal(exchange).map(handler -> {, +		});, +	 * Look up a handler for the given request, returning an empty {@code Mono}, +	 * if no specific one is found. This method is called by {@link #getHandler}., +	 *, +	 * <p>On CORS pre-flight requests this method should return a match not for, +	 * the pre-flight request but for the expected actual request based on the URL, +	 * path, the HTTP methods from the "Access-Control-Request-Method" header, and, +	 * the headers from the "Access-Control-Request-Headers" header thus allowing, +	 * the CORS configuration to be obtained via {@link #getCorsConfigurations},, +	 *, +	 * @param exchange current exchange, +	 * @return {@code Mono} for the matching handler, if any, +	 */, +	protected abstract Mono<?> getHandlerInternal(ServerWebExchange exchange);, +, +	/**, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/handler/AbstractUrlHandlerMapping.java, +	public Mono<Object> getHandlerInternal(ServerWebExchange exchange) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java, +	public Mono<HandlerMethod> getHandlerInternal(ServerWebExchange exchange) {, +			return Mono.justOrEmpty(handlerMethod);]