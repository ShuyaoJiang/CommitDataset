[+++ b/spring-websocket/src/main/java/org/springframework/websocket/CloseStatus.java, +	public boolean equalsCode(CloseStatus other) {, +		return this.code == other.code;, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/websocket/CloseStatus.java, +	public boolean equalsCode(CloseStatus other) {, +		return this.code == other.code;, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/websocket/client/endpoint/StandardWebSocketClient.java, +import javax.websocket.HandshakeResponse;, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private static final Log logger = LogFactory.getLog(StandardWebSocketClient.class);, +, +							List<String> value = httpHeaders.get(headerName);, +							if (logger.isTraceEnabled()) {, +								logger.trace("Adding header [" + headerName + "=" + value + "]");, +							headers.put(headerName, value);, +						}, +					}, +					if (logger.isTraceEnabled()) {, +						logger.trace("Handshake request headers: " + headers);, +					}, +				}, +				@Override, +				public void afterResponse(HandshakeResponse handshakeResponse) {, +					if (logger.isTraceEnabled()) {, +						logger.trace("Handshake response headers: " + handshakeResponse.getHeaders());, +++ b/spring-websocket/src/main/java/org/springframework/websocket/CloseStatus.java, +	public boolean equalsCode(CloseStatus other) {, +		return this.code == other.code;, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/websocket/client/endpoint/StandardWebSocketClient.java, +import javax.websocket.HandshakeResponse;, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private static final Log logger = LogFactory.getLog(StandardWebSocketClient.class);, +, +							List<String> value = httpHeaders.get(headerName);, +							if (logger.isTraceEnabled()) {, +								logger.trace("Adding header [" + headerName + "=" + value + "]");, +							headers.put(headerName, value);, +						}, +					}, +					if (logger.isTraceEnabled()) {, +						logger.trace("Handshake request headers: " + headers);, +					}, +				}, +				@Override, +				public void afterResponse(HandshakeResponse handshakeResponse) {, +					if (logger.isTraceEnabled()) {, +						logger.trace("Handshake response headers: " + handshakeResponse.getHeaders());, +++ b/spring-websocket/src/main/java/org/springframework/websocket/client/jetty/JettyWebSocketClient.java, +		// TODO: populate headers, +, +++ b/spring-websocket/src/main/java/org/springframework/websocket/CloseStatus.java, +	public boolean equalsCode(CloseStatus other) {, +		return this.code == other.code;, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/websocket/client/endpoint/StandardWebSocketClient.java, +import javax.websocket.HandshakeResponse;, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private static final Log logger = LogFactory.getLog(StandardWebSocketClient.class);, +, +							List<String> value = httpHeaders.get(headerName);, +							if (logger.isTraceEnabled()) {, +								logger.trace("Adding header [" + headerName + "=" + value + "]");, +							headers.put(headerName, value);, +						}, +					}, +					if (logger.isTraceEnabled()) {, +						logger.trace("Handshake request headers: " + headers);, +					}, +				}, +				@Override, +				public void afterResponse(HandshakeResponse handshakeResponse) {, +					if (logger.isTraceEnabled()) {, +						logger.trace("Handshake response headers: " + handshakeResponse.getHeaders());, +++ b/spring-websocket/src/main/java/org/springframework/websocket/client/jetty/JettyWebSocketClient.java, +		// TODO: populate headers, +, +++ b/spring-websocket/src/main/java/org/springframework/websocket/server/DefaultHandshakeHandler.java, +import java.util.ArrayList;, +import org.springframework.util.CollectionUtils;, +	private List<String> supportedProtocols = new ArrayList<String>();, +		if (!request.getHeaders().getConnection().contains("Upgrade") &&, +				!request.getHeaders().getConnection().contains("upgrade")) {, +		if (CollectionUtils.isEmpty(requestedProtocols)) {]