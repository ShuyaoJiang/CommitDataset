[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/SimpleBrokerMessageHandler.java, +		}, +		else if (SimpMessageType.CONNECT.equals(messageType)) {, +			SimpMessageHeaderAccessor replyHeaders = SimpMessageHeaderAccessor.create(SimpMessageType.CONNECT_ACK);, +			replyHeaders.setSessionId(headers.getSessionId());, +			replyHeaders.setHeader(SimpMessageHeaderAccessor.CONNECT_MESSAGE_HEADER, message);, +, +			Message<byte[]> connectAck = MessageBuilder.withPayloadAndHeaders(EMPTY_PAYLOAD, replyHeaders).build();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/SimpleBrokerMessageHandler.java, +		}, +		else if (SimpMessageType.CONNECT.equals(messageType)) {, +			SimpMessageHeaderAccessor replyHeaders = SimpMessageHeaderAccessor.create(SimpMessageType.CONNECT_ACK);, +			replyHeaders.setSessionId(headers.getSessionId());, +			replyHeaders.setHeader(SimpMessageHeaderAccessor.CONNECT_MESSAGE_HEADER, message);, +, +			Message<byte[]> connectAck = MessageBuilder.withPayloadAndHeaders(EMPTY_PAYLOAD, replyHeaders).build();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +				else {, +					if (command == StompCommand.DISCONNECT) {, +						this.stompConnection.setDisconnected();, +					}, +									public void accept(Boolean result) {, +										if (!result) {, +									}, +					logger.error("STOMP ERROR frame on system session: " + message);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/SimpleBrokerMessageHandler.java, +		}, +		else if (SimpMessageType.CONNECT.equals(messageType)) {, +			SimpMessageHeaderAccessor replyHeaders = SimpMessageHeaderAccessor.create(SimpMessageType.CONNECT_ACK);, +			replyHeaders.setSessionId(headers.getSessionId());, +			replyHeaders.setHeader(SimpMessageHeaderAccessor.CONNECT_MESSAGE_HEADER, message);, +, +			Message<byte[]> connectAck = MessageBuilder.withPayloadAndHeaders(EMPTY_PAYLOAD, replyHeaders).build();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +				else {, +					if (command == StompCommand.DISCONNECT) {, +						this.stompConnection.setDisconnected();, +					}, +									public void accept(Boolean result) {, +										if (!result) {, +									}, +					logger.error("STOMP ERROR frame on system session: " + message);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompProtocolHandler.java, +	protected void sendErrorMessage(WebSocketSession session, Throwable error) {, +, +		StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.ERROR);, +		headers.setMessage(error.getMessage());, +		Message<byte[]> message = MessageBuilder.withPayloadAndHeaders(new byte[0], headers).build();, +		String payload = new String(this.stompEncoder.encode(message), Charset.forName("UTF-8"));, +		try {, +			session.sendMessage(new TextMessage(payload));, +		}, +		catch (Throwable t) {, +			// ignore, +		}, +	}, +, +			connectedHeaders.setHeartbeat(0, 0); // no heart-beat support with simple broker, +	private String getVersion(StompHeaderAccessor connectAckHeaders) {, +, +		String name = StompHeaderAccessor.CONNECT_MESSAGE_HEADER;, +		Message<?> connectMessage = (Message<?>) connectAckHeaders.getHeader(name);, +		StompHeaderAccessor connectHeaders = StompHeaderAccessor.wrap(connectMessage);, +		Assert.notNull(connectMessage, "CONNECT_ACK does not contain original CONNECT " + connectAckHeaders);, +, +		Set<String> acceptVersions = connectHeaders.getAcceptVersion();, +		if (acceptVersions.contains("1.2")) {, +			return "1.2";, +		}, +		else if (acceptVersions.contains("1.1")) {, +			return "1.1";, +		}, +		else if (acceptVersions.isEmpty()) {, +			return null;, +		}, +		else {, +			throw new StompConversionException("Unsupported version '" + acceptVersions + "'");, +		}, +	}, +, +	private void augmentConnectedHeaders(StompHeaderAccessor headers, WebSocketSession session) {, +		Principal principal = session.getPrincipal();, +		if (principal != null) {, +			headers.setNativeHeader(CONNECTED_USER_HEADER, principal.getName());, +			headers.setNativeHeader(QUEUE_SUFFIX_HEADER, session.getId());, +, +			if (this.queueSuffixResolver != null) {, +				String suffix = session.getId();, +				this.queueSuffixResolver.addQueueSuffix(principal.getName(), session.getId(), suffix);, +			}, +		}, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/SimpleBrokerMessageHandler.java, +		}, +		else if (SimpMessageType.CONNECT.equals(messageType)) {, +			SimpMessageHeaderAccessor replyHeaders = SimpMessageHeaderAccessor.create(SimpMessageType.CONNECT_ACK);, +			replyHeaders.setSessionId(headers.getSessionId());, +			replyHeaders.setHeader(SimpMessageHeaderAccessor.CONNECT_MESSAGE_HEADER, message);, +]