[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +import org.springframework.beans.factory.config.ConstructorArgumentValues.ValueHolder;, +		ArgumentsHolder argsHolderToUse = null;, +				ArgumentsHolder argsHolder;, +						argsHolder = createArgumentArray(, +					argsHolder = new ArgumentsHolder(explicitArgs);, +						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes));, +					argsHolderToUse = argsHolder;, +					argsToUse = argsHolder.arguments;, +				argsHolderToUse.storeCache(mbd);, +				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(, +						mbd, beanName, this.beanFactory, constructorToUse, argsToUse);, +		ArgumentsHolder argsHolderToUse = null;, +					ArgumentsHolder argsHolder;, +							argsHolder = createArgumentArray(, +						argsHolder = new ArgumentsHolder(explicitArgs);, +							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes));, +						argsHolderToUse = argsHolder;, +						argsToUse = argsHolder.arguments;, +				argsHolderToUse.storeCache(mbd);, +							args.resolveNecessary = true;, +					args.resolveNecessary = true;, +		public boolean resolveNecessary = false;, +, +, +		public void storeCache(RootBeanDefinition mbd) {, +			if (this.resolveNecessary) {, +				mbd.preparedConstructorArguments = this.preparedArguments;, +			}, +			else {, +				mbd.resolvedConstructorArguments = this.arguments;, +			}, +			mbd.constructorArgumentsResolved = true;, +		}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +import org.springframework.beans.factory.config.ConstructorArgumentValues.ValueHolder;, +		ArgumentsHolder argsHolderToUse = null;, +				ArgumentsHolder argsHolder;, +						argsHolder = createArgumentArray(, +					argsHolder = new ArgumentsHolder(explicitArgs);, +						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes));, +					argsHolderToUse = argsHolder;, +					argsToUse = argsHolder.arguments;, +				argsHolderToUse.storeCache(mbd);, +				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(, +						mbd, beanName, this.beanFactory, constructorToUse, argsToUse);, +		ArgumentsHolder argsHolderToUse = null;, +					ArgumentsHolder argsHolder;, +							argsHolder = createArgumentArray(, +						argsHolder = new ArgumentsHolder(explicitArgs);, +							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes));, +						argsHolderToUse = argsHolder;, +						argsToUse = argsHolder.arguments;, +				argsHolderToUse.storeCache(mbd);, +							args.resolveNecessary = true;, +					args.resolveNecessary = true;, +		public boolean resolveNecessary = false;, +, +, +		public void storeCache(RootBeanDefinition mbd) {, +			if (this.resolveNecessary) {, +				mbd.preparedConstructorArguments = this.preparedArguments;, +			}, +			else {, +				mbd.resolvedConstructorArguments = this.arguments;, +			}, +			mbd.constructorArgumentsResolved = true;, +		}, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.beans.factory.config.TypedStringValue;, +	public void testPrototypeStringCreatedRepeatedly() {, +		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory();, +		RootBeanDefinition stringDef = new RootBeanDefinition(String.class);, +		stringDef.setScope(RootBeanDefinition.SCOPE_PROTOTYPE);, +		stringDef.getConstructorArgumentValues().addGenericArgumentValue(new TypedStringValue("value"));, +		lbf.registerBeanDefinition("string", stringDef);, +		String val1 = lbf.getBean("string", String.class);, +		String val2 = lbf.getBean("string", String.class);, +		assertEquals("value", val1);, +		assertEquals("value", val2);, +		assertNotSame(val1, val2);, +	}, +, +	@Test]