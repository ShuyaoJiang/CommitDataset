[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +import javax.xml.xpath.XPathExpressionException;, +import org.springframework.test.util.XmlExpectationsHelper;, +		public BodyContentSpec xml(String expectedXml) {, +			this.result.assertWithDiagnostics(() -> {, +				try {, +					new XmlExpectationsHelper().assertXmlEqual(expectedXml, getBodyAsString());, +				}, +				catch (Exception ex) {, +					throw new AssertionError("XML parsing error", ex);, +				}, +			});, +			return this;, +		}, +, +		@Override, +		@Override, +		public XpathAssertions xpath(String expression, Map<String, String> namespaces, Object... args) {, +			try {, +				return new XpathAssertions(this, expression, namespaces, args);, +			}, +			catch (XPathExpressionException ex) {, +				throw new AssertionError("XML parsing error", ex);, +			}, +		}, +, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +import javax.xml.xpath.XPathExpressionException;, +import org.springframework.test.util.XmlExpectationsHelper;, +		public BodyContentSpec xml(String expectedXml) {, +			this.result.assertWithDiagnostics(() -> {, +				try {, +					new XmlExpectationsHelper().assertXmlEqual(expectedXml, getBodyAsString());, +				}, +				catch (Exception ex) {, +					throw new AssertionError("XML parsing error", ex);, +				}, +			});, +			return this;, +		}, +, +		@Override, +		@Override, +		public XpathAssertions xpath(String expression, Map<String, String> namespaces, Object... args) {, +			try {, +				return new XpathAssertions(this, expression, namespaces, args);, +			}, +			catch (XPathExpressionException ex) {, +				throw new AssertionError("XML parsing error", ex);, +			}, +		}, +, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/WebTestClient.java, +		 * Parse the expected and actual response content as XML and perform a, +		 * comparison verifying the same structure., +		 * @param expectedXml the expected JSON content., +		 * @since 5.1, +		 */, +		BodyContentSpec xml(String expectedXml);, +, +		/**, +		 * Access to response body assertions using an XPath expression to inspect a specific, +		 * subset of the body., +		 * <p>The XPath expression can be a parameterized string using, +		 * formatting specifiers as defined in {@link String#format}., +		 * @param expression The XPath expression, +		 * @param args arguments to parameterize the expression, +		 * @see #xpath(String, Map, Object...), +		 * @since 5.1, +		 */, +		default XpathAssertions xpath(String expression, Object... args){, +			return xpath(expression, null, args);, +		}, +, +		/**, +		 * Access to response body assertions with specific namespaces using an XPath, +		 * expression to inspect a specific subset of the body., +		 * <p>The XPath expression can be a parameterized string using, +		 * formatting specifiers as defined in {@link String#format}., +		 * @param expression The XPath expression, +		 * @param namespaces The namespaces, +		 * @param args arguments to parameterize the expression, +		 * @since 5.1, +		 */, +		XpathAssertions xpath(String expression, Map<String, String> namespaces, Object... args);, +, +		/**, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +import javax.xml.xpath.XPathExpressionException;, +import org.springframework.test.util.XmlExpectationsHelper;, +		public BodyContentSpec xml(String expectedXml) {, +			this.result.assertWithDiagnostics(() -> {, +				try {, +					new XmlExpectationsHelper().assertXmlEqual(expectedXml, getBodyAsString());, +				}, +				catch (Exception ex) {, +					throw new AssertionError("XML parsing error", ex);, +				}, +			});, +			return this;]