[+++ b/spring-framework-reference/src/validation.xml, +			<link linkend="core.convert"><filename>core.convert</filename></link> is a general-purpose type conversion system., +			It provides a strongly-typed Converter SPI for implementing conversion logic from one type to another and is not limited to just converting Strings., +			In addition, both the Spring Expression Language (SpEL) and DataBinder can use this system to bind values., +			In such environments, you typically convert <emphasis>from String</emphasis> to support the client postback process, as well as back <emphasis>to String</emphasis> to support the view rendering process., +			The more general <emphasis>core.convert</emphasis> Converter SPI does not address this scenario directly., +			To directly address this, Spring 3 introduces a conveient <emphasis>format</emphasis> SPI that provides a simple and robust alternative to PropertyEditors for client environments., +			Use Formatters when you're working in a client environment, such as a web application, and need to apply String parsing, printing, and localization logic to form field values., +		<section id="format-Formatter-SPI">, +				Parameterize T to be the type of object you are formatting, for example, <classname>java.util.Date</classname>., +				The <filename>number</filename> package provides a NumberFormatter, CurrencyFormatter, and PercentFormatter to format java.lang.Number objects using a java.text.NumberFormat., +		<section id="format-CustomFormatAnnotations">, +}]]>, +			</programlisting>, +				The example implementation below binds a @NumberFormat instance to a Formatter instance., +				This particular annotation allows the NumberFormat style or pattern to be specified:, +public final class NumberFormatAnnotationFormatterFactory implements AnnotationFormatterFactory<NumberFormat> {, +	public Set<Class<?>> getFieldTypes() {, +		Set<Class<?>> fieldTypes = new HashSet<Class<?>>(7);, +		fieldTypes.add(Short.class);, +		fieldTypes.add(Integer.class);, +		fieldTypes.add(Long.class);, +		fieldTypes.add(Float.class);, +		fieldTypes.add(Double.class);, +		fieldTypes.add(BigDecimal.class);, +		fieldTypes.add(BigInteger.class);, +		return fieldTypes;, +, +	public Printer<Number> getPrinter(NumberFormat annotation, Class<?> fieldType) {, +		return configureFormatterFrom(annotation, fieldType);, +	}, +	, +	public Parser<Number> getParser(NumberFormat annotation, Class<?> fieldType) {, +		return configureFormatterFrom(annotation, fieldType);, +	}, +, +	private Formatter<Number> configureFormatterFrom(NumberFormat annotation, Class<?> fieldType) {, +		if (!annotation.pattern().isEmpty()) {, +			return new NumberFormatter(annotation.pattern());, +		} else {, +			Style style = annotation.style();, +			if (style == Style.PERCENT) {, +				return new PercentFormatter();, +			} else if (style == Style.CURRENCY) {, +				return new CurrencyFormatter();, +			} else {, +				return new NumberFormatter();, +			}, +		}, +	}, +}]]>, +			</programlisting>, +				Then, to trigger formatting, simply annotate a property with @NumberFormat in your model:, +    @NumberFormat(style=Style.CURRENCY), +}]]>, +			</programlisting>, +			<para>, +				A format annotation API exists in the <filename>org.springframework.format.annotation</filename> package., +				Use the NumberFormat annotation to apply formatting to java.lang.Number fields., +				Use the DateTimeFormat annotation to apply formatting to java.util.Date, java.util.Calendar, java.util.Long, or Joda Time fields. , +			</para>, +			<para>, +				The example below shows use of the DateTimeFormat annotation to format a java.util.Date as a ISO Date (yyyy-MM-dd):, +			</para>, +			<programlisting language="java"><![CDATA[, +public class MyModel {, +, +    @DateTimeFormat(iso=ISO.DATE), +    private Date date;, +	, +}]]>, +			</programlisting>, +		<section id="format-FormatterRegistry-SPI">, +				When installed, Formatters are registered in a FormatterRegistry., +				A FormatterRegistry allows you to configure Formatting rules centrally, instead of duplicating such configuration across your Controllers., +    void addFormatterForFieldType(Class<?> fieldType, Printer<?> printer, Parser<?> parser);, +    void addFormatterForFieldType(Class<?> fieldType, Formatter<?> formatter);, +, +    void addFormatterForAnnotation(AnnotationFormatterFactory<?, ?> factory);, +				As shown above, Formatters can be registered by fieldType or annotation., +				<classname>FormattingConversionService</classname> is the implementation of <classname>FormatterRegistry</classname> suitable for most environments., +				This implementation may be configured programatically or declaratively as a Spring bean with <classname>FormattingConversionServiceFactoryBean</classname>., +				Because it also implements <classname>ConversionService</classname>, it can be configured for use with Spring's DataBinder as well as SpEL., +		<section id="format-configuring-FormatterRegistry">, +			<title>Configuring Formatting in Spring MVC</title>, +				In a Spring MVC application, you can configure a ConversionService instance explicity as an attribute of the <literal>annotation-driven</literal> element of the MVC namespace., +				This ConversionService will then be used any time type conversion is needed during Controller model binding., +				If not configured explicitly, Spring MVC will configure a FormattingConversionService instance that registers default formatters for number and date types., +				To rely on default formatting rules, no explicit configuration is required in your Spring MVC config XML:, +<?xml version="1.0" encoding="UTF-8"?>, +<beans xmlns="http://www.springframework.org/schema/beans", +    xmlns:mvc="http://www.springframework.org/schema/mvc", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd, +        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">, +, +    <mvc:annotation-driven/>, +	, +</beans>, +]]>]