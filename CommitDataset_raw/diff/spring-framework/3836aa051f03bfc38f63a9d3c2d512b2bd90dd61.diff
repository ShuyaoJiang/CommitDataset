[+++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.java, + * Copyright 2002-2014 the original author or authors., +	private boolean allowCoreThreadTimeOut = false;, +, +	/**, +	 * Specify whether to allow core threads to time out. This enables dynamic, +	 * growing and shrinking even in combination with a non-zero queue (since, +	 * the max pool size will only grow once the queue is full)., +	 * <p>Default is "false"., +	 * @see java.util.concurrent.ThreadPoolExecutor#allowCoreThreadTimeOut(boolean), +	 */, +	public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut) {, +		this.allowCoreThreadTimeOut = allowCoreThreadTimeOut;, +	}, +, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.java, + * Copyright 2002-2014 the original author or authors., +	private boolean allowCoreThreadTimeOut = false;, +, +	/**, +	 * Specify whether to allow core threads to time out. This enables dynamic, +	 * growing and shrinking even in combination with a non-zero queue (since, +	 * the max pool size will only grow once the queue is full)., +	 * <p>Default is "false"., +	 * @see java.util.concurrent.ThreadPoolExecutor#allowCoreThreadTimeOut(boolean), +	 */, +	public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut) {, +		this.allowCoreThreadTimeOut = allowCoreThreadTimeOut;, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/TaskExecutorRegistration.java, +	 * <p><strong>NOTE:</strong> The core pool size is effectively the max pool size, +	 * <p><strong>NOTE:</strong> When an unbounded, +	 * <p><strong>NOTE:</strong> when an unbounded {@code queueCapacity} is configured, +	 * (the default), the core pool size is effectively the max pool size. This is, +	 * essentially the "Unbounded queues" strategy as explained in, +		executor.setAllowCoreThreadTimeOut(true);, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.java, + * Copyright 2002-2014 the original author or authors., +	private boolean allowCoreThreadTimeOut = false;, +, +	/**, +	 * Specify whether to allow core threads to time out. This enables dynamic, +	 * growing and shrinking even in combination with a non-zero queue (since, +	 * the max pool size will only grow once the queue is full)., +	 * <p>Default is "false"., +	 * @see java.util.concurrent.ThreadPoolExecutor#allowCoreThreadTimeOut(boolean), +	 */, +	public void setAllowCoreThreadTimeOut(boolean allowCoreThreadTimeOut) {, +		this.allowCoreThreadTimeOut = allowCoreThreadTimeOut;, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/TaskExecutorRegistration.java, +	 * <p><strong>NOTE:</strong> The core pool size is effectively the max pool size, +	 * <p><strong>NOTE:</strong> When an unbounded, +	 * <p><strong>NOTE:</strong> when an unbounded {@code queueCapacity} is configured, +	 * (the default), the core pool size is effectively the max pool size. This is, +	 * essentially the "Unbounded queues" strategy as explained in, +		executor.setAllowCoreThreadTimeOut(true);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +import org.springframework.beans.factory.config.CustomScopeConfigurer;, +import org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler;, +import org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler;, + * A {@link org.springframework.beans.factory.xml.BeanDefinitionParser} that provides, + * the configuration for the {@code <websocket:message-broker/>} XML namespace element., + *, + * <p>Registers a Spring MVC {@link org.springframework.web.servlet.handler.SimpleUrlHandlerMapping}, + * with order 1 to map HTTP WebSocket handshake requests from STOMP/WebSocket clients., + *, + * <p>Registers the following {@link org.springframework.messaging.MessageChannel}s:, + *, + * <p>Registers one of the following based on the selected message broker options:, + *, + * <p>Registers a {@link UserDestinationMessageHandler} for handling user destinations., +		executorDef.getPropertyValues().add("allowCoreThreadTimeOut", true);]