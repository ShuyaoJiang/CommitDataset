[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, + * <p>This class registers an {@link org.springframework.util.AntPathMatcher}, + * and a {@link org.springframework.web.util.UrlPathHelper} to be used by:, + * <ul>, + *  <li>the {@link RequestMappingHandlerMapping},, + *  <li>the {@link HandlerMapping} for ViewControllers, + *  <li>and the {@link HandlerMapping} for serving resources, + * </ul>, + * Note that those beans can be configured by using the {@code path-matching} MVC namespace element., +, + *, +		configurePathMatchingProperties(handlerMappingDef, element, parserContext);, +	private void configurePathMatchingProperties(RootBeanDefinition handlerMappingDef,, +	                                             Element element, ParserContext parserContext) {, +			Object source = parserContext.extractSource(element);, +			RuntimeBeanReference pathHelperRef = null;, +				pathHelperRef = new RuntimeBeanReference(pathMatchingElement.getAttribute("path-helper"));, +			}, +			pathHelperRef = MvcNamespaceUtils.registerUrlPathHelper(pathHelperRef, parserContext, source);, +, +			RuntimeBeanReference pathMatcherRef = null;, +				pathMatcherRef = new RuntimeBeanReference(pathMatchingElement.getAttribute("path-matcher"));, +			pathMatcherRef = MvcNamespaceUtils.registerPathMatcher(pathMatcherRef, parserContext, source);, +			handlerMappingDef.getPropertyValues().add("pathMatcher", pathMatcherRef);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, + * <p>This class registers an {@link org.springframework.util.AntPathMatcher}, + * and a {@link org.springframework.web.util.UrlPathHelper} to be used by:, + * <ul>, + *  <li>the {@link RequestMappingHandlerMapping},, + *  <li>the {@link HandlerMapping} for ViewControllers, + *  <li>and the {@link HandlerMapping} for serving resources, + * </ul>, + * Note that those beans can be configured by using the {@code path-matching} MVC namespace element., +, + *, +		configurePathMatchingProperties(handlerMappingDef, element, parserContext);, +	private void configurePathMatchingProperties(RootBeanDefinition handlerMappingDef,, +	                                             Element element, ParserContext parserContext) {, +			Object source = parserContext.extractSource(element);, +			RuntimeBeanReference pathHelperRef = null;, +				pathHelperRef = new RuntimeBeanReference(pathMatchingElement.getAttribute("path-helper"));, +			}, +			pathHelperRef = MvcNamespaceUtils.registerUrlPathHelper(pathHelperRef, parserContext, source);, +, +			RuntimeBeanReference pathMatcherRef = null;, +				pathMatcherRef = new RuntimeBeanReference(pathMatchingElement.getAttribute("path-matcher"));, +			pathMatcherRef = MvcNamespaceUtils.registerPathMatcher(pathMatcherRef, parserContext, source);, +			handlerMappingDef.getPropertyValues().add("pathMatcher", pathMatcherRef);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceUtils.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.beans.factory.config.RuntimeBeanReference;, +import org.springframework.util.AntPathMatcher;, +import org.springframework.util.PathMatcher;, +import org.springframework.web.util.UrlPathHelper;, + * @author Brian Clozel, +	private static final String URL_PATH_HELPER_BEAN_NAME = "mvcUrlPathHelper";, +, +	private static final String PATH_MATCHER_BEAN_NAME = "mvcPathMatcher";, +, +	 * Adds an alias to an existing well-known name or registers a new instance of a {@link UrlPathHelper}, +	 * under that well-known name, unless already registered., +	 * @return a RuntimeBeanReference to this {@link UrlPathHelper} instance, +	 */, +	public static RuntimeBeanReference registerUrlPathHelper(RuntimeBeanReference urlPathHelperRef, ParserContext parserContext, Object source) {, +		if(urlPathHelperRef != null) {, +			if(parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME)) {, +				parserContext.getRegistry().removeAlias(URL_PATH_HELPER_BEAN_NAME);, +			}, +			parserContext.getRegistry().registerAlias(urlPathHelperRef.getBeanName(), URL_PATH_HELPER_BEAN_NAME);, +		}, +		else if (!parserContext.getRegistry().isAlias(URL_PATH_HELPER_BEAN_NAME), +				&& !parserContext.getRegistry().containsBeanDefinition(URL_PATH_HELPER_BEAN_NAME)) {, +			RootBeanDefinition urlPathHelperDef = new RootBeanDefinition(UrlPathHelper.class);, +			urlPathHelperDef.setSource(source);, +			urlPathHelperDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +			parserContext.getRegistry().registerBeanDefinition(URL_PATH_HELPER_BEAN_NAME, urlPathHelperDef);, +			parserContext.registerComponent(new BeanComponentDefinition(urlPathHelperDef, URL_PATH_HELPER_BEAN_NAME));, +		}, +		return new RuntimeBeanReference(URL_PATH_HELPER_BEAN_NAME);, +	}, +, +	/**, +	 * Adds an alias to an existing well-known name or registers a new instance of a {@link PathMatcher}, +	 * under that well-known name, unless already registered., +	 * @return a RuntimeBeanReference to this {@link PathMatcher} instance, +	 */, +	public static RuntimeBeanReference registerPathMatcher(RuntimeBeanReference pathMatcherRef, ParserContext parserContext, Object source) {, +		if(pathMatcherRef != null) {, +			if(parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME)) {, +				parserContext.getRegistry().removeAlias(PATH_MATCHER_BEAN_NAME);, +			}, +			parserContext.getRegistry().registerAlias(pathMatcherRef.getBeanName(), PATH_MATCHER_BEAN_NAME);, +		}, +		else if (!parserContext.getRegistry().isAlias(PATH_MATCHER_BEAN_NAME), +				&& !parserContext.getRegistry().containsBeanDefinition(PATH_MATCHER_BEAN_NAME)) {, +			RootBeanDefinition pathMatcherDef = new RootBeanDefinition(AntPathMatcher.class);, +			pathMatcherDef.setSource(source);, +			pathMatcherDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +			parserContext.getRegistry().registerBeanDefinition(PATH_MATCHER_BEAN_NAME, pathMatcherDef);, +			parserContext.registerComponent(new BeanComponentDefinition(pathMatcherDef, PATH_MATCHER_BEAN_NAME));]