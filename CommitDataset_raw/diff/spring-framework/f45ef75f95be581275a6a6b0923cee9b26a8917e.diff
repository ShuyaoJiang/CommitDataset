[+++ b/spring-websocket/src/main/java/org/springframework/sockjs/AbstractSockJsSession.java, +	private WebSocketHandler handler;, +		this.handler = webSocketHandler;, +		try {, +			logger.error("Closing due to transport error for " + this, ex);, +			close(closeStatus);, +		}, +		catch (Throwable t) {, +			// ignore, +		}, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/AbstractSockJsSession.java, +	private WebSocketHandler handler;, +		this.handler = webSocketHandler;, +		try {, +			logger.error("Closing due to transport error for " + this, ex);, +			close(closeStatus);, +		}, +		catch (Throwable t) {, +			// ignore, +		}, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/support/SockJsHttpRequestHandler.java, +import org.springframework.websocket.support.ExceptionWebSocketHandlerDecorator;, +import org.springframework.websocket.support.LoggingWebSocketHandlerDecorator;, +		this.webSocketHandler = decorateWebSocketHandler(webSocketHandler);, +	}, +, +	/**, +	 * Decorate the WebSocketHandler provided to the class constructor., +	 * <p>, +	 * By default {@link ExceptionWebSocketHandlerDecorator} and, +	 * {@link LoggingWebSocketHandlerDecorator} are applied are added., +	 */, +	protected WebSocketHandler decorateWebSocketHandler(WebSocketHandler handler) {, +		handler = new ExceptionWebSocketHandlerDecorator(handler);, +		return new LoggingWebSocketHandlerDecorator(handler);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/AbstractSockJsSession.java, +	private WebSocketHandler handler;, +		this.handler = webSocketHandler;, +		try {, +			logger.error("Closing due to transport error for " + this, ex);, +			close(closeStatus);, +		}, +		catch (Throwable t) {, +			// ignore, +		}, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/support/SockJsHttpRequestHandler.java, +import org.springframework.websocket.support.ExceptionWebSocketHandlerDecorator;, +import org.springframework.websocket.support.LoggingWebSocketHandlerDecorator;, +		this.webSocketHandler = decorateWebSocketHandler(webSocketHandler);, +	}, +, +	/**, +	 * Decorate the WebSocketHandler provided to the class constructor., +	 * <p>, +	 * By default {@link ExceptionWebSocketHandlerDecorator} and, +	 * {@link LoggingWebSocketHandlerDecorator} are applied are added., +	 */, +	protected WebSocketHandler decorateWebSocketHandler(WebSocketHandler handler) {, +		handler = new ExceptionWebSocketHandlerDecorator(handler);, +		return new LoggingWebSocketHandlerDecorator(handler);, +++ b/spring-websocket/src/main/java/org/springframework/websocket/WebSocketHandler.java, +	/**, +	 * Whether this WebSocketHandler wishes to receive messages broken up in parts., +	 */, +	boolean isStreaming();, +, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/AbstractSockJsSession.java, +	private WebSocketHandler handler;, +		this.handler = webSocketHandler;, +		try {, +			logger.error("Closing due to transport error for " + this, ex);, +			close(closeStatus);, +		}, +		catch (Throwable t) {, +			// ignore, +		}, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/support/SockJsHttpRequestHandler.java, +import org.springframework.websocket.support.ExceptionWebSocketHandlerDecorator;, +import org.springframework.websocket.support.LoggingWebSocketHandlerDecorator;, +		this.webSocketHandler = decorateWebSocketHandler(webSocketHandler);, +	}, +, +	/**, +	 * Decorate the WebSocketHandler provided to the class constructor., +	 * <p>, +	 * By default {@link ExceptionWebSocketHandlerDecorator} and, +	 * {@link LoggingWebSocketHandlerDecorator} are applied are added., +	 */, +	protected WebSocketHandler decorateWebSocketHandler(WebSocketHandler handler) {, +		handler = new ExceptionWebSocketHandlerDecorator(handler);, +		return new LoggingWebSocketHandlerDecorator(handler);, +++ b/spring-websocket/src/main/java/org/springframework/websocket/WebSocketHandler.java, +	/**, +	 * Whether this WebSocketHandler wishes to receive messages broken up in parts., +	 */, +	boolean isStreaming();, +, +++ b/spring-websocket/src/main/java/org/springframework/websocket/adapter/JettyWebSocketListenerAdapter.java, +		this.webSocketHandler = webSocketHandler;, +]