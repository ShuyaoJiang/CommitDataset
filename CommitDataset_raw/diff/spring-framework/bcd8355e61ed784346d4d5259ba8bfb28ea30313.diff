[+++ b/build-spring-framework/resources/changelog.txt, +* fix regresion in UriUtils, +* allow adding flash attributes in methods with a ModelAndView return value, +* preserve quotes in MediaType parameters, +* make flash attributes available in the model of ParameterizableViewController and UrlFilenameViewController, +++ b/build-spring-framework/resources/changelog.txt, +* fix regresion in UriUtils, +* allow adding flash attributes in methods with a ModelAndView return value, +* preserve quotes in MediaType parameters, +* make flash attributes available in the model of ParameterizableViewController and UrlFilenameViewController, +++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriUtils.java, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +	private static final String SCHEME_PATTERN = "([^:/?#]+):";, +, +	private static final String HTTP_PATTERN = "(http|https):";, +, +	private static final String USERINFO_PATTERN = "([^@/]*)";, +, +	private static final String HOST_PATTERN = "([^/?#:]*)";, +, +	private static final String PORT_PATTERN = "(\\d*)";, +, +	private static final String PATH_PATTERN = "([^?#]*)";, +, +	private static final String QUERY_PATTERN = "([^#]*)";, +, +	private static final String LAST_PATTERN = "(.*)";, +, +	// Regex patterns that matches URIs. See RFC 3986, appendix B, +	private static final Pattern URI_PATTERN = Pattern.compile(, +			"^(" + SCHEME_PATTERN + ")?" + "(//(" + USERINFO_PATTERN + "@)?" + HOST_PATTERN + "(:" + PORT_PATTERN +, +					")?" + ")?" + PATH_PATTERN + "(\\?" + QUERY_PATTERN + ")?" + "(#" + LAST_PATTERN + ")?");, +, +	private static final Pattern HTTP_URL_PATTERN = Pattern.compile(, +			"^" + HTTP_PATTERN + "(//(" + USERINFO_PATTERN + "@)?" + HOST_PATTERN + "(:" + PORT_PATTERN + ")?" + ")?" +, +					PATH_PATTERN + "(\\?" + LAST_PATTERN + ")?");, +	 * <p><strong>Note</strong> that this method does not attempt to encode "=" and "&" , +	 * characters in query parameter names and query parameter values because they cannot , +	 * be parsed in a reliable way. Instead use:, +	 * <pre>, +	 *  UriComponents uriComponents = UriComponentsBuilder.fromUri("/path?name={value}").buildAndExpand("a=b");, +	 *  String encodedUri = uriComponents.encode().toUriString();, +	 * </pre>, +	 * @deprecated in favor of {@link UriComponentsBuilder}; see note about query param encoding, +		Assert.notNull(uri, "'uri' must not be null");, +		Assert.hasLength(encoding, "'encoding' must not be empty");, +		Matcher m = URI_PATTERN.matcher(uri);, +		if (m.matches()) {, +			String scheme = m.group(2);, +			String authority = m.group(3);, +			String userinfo = m.group(5);, +			String host = m.group(6);, +			String port = m.group(8);, +			String path = m.group(9);, +			String query = m.group(11);, +			String fragment = m.group(13);, +, +			return encodeUriComponents(scheme, authority, userinfo, host, port, path, query, fragment, encoding);, +		}, +		else {, +			throw new IllegalArgumentException("[" + uri + "] is not a valid URI");, +		}, +	 * <p><strong>Note</strong> that this method does not attempt to encode "=" and "&" , +	 * characters in query parameter names and query parameter values because they cannot , +	 * be parsed in a reliable way. Instead use:, +	 * <pre>, +	 *  UriComponents uriComponents = UriComponentsBuilder.fromHttpUrl("/path?name={value}").buildAndExpand("a=b");, +	 *  String encodedUri = uriComponents.encode().toUriString();, +	 * </pre>, +	 * @deprecated in favor of {@link UriComponentsBuilder}; see note about query param encoding, +		Assert.notNull(httpUrl, "'httpUrl' must not be null");, +		Assert.hasLength(encoding, "'encoding' must not be empty");, +		Matcher m = HTTP_URL_PATTERN.matcher(httpUrl);, +		if (m.matches()) {, +			String scheme = m.group(1);, +			String authority = m.group(2);, +			String userinfo = m.group(4);, +			String host = m.group(5);, +			String portString = m.group(7);, +			String path = m.group(8);, +			String query = m.group(10);, +, +			return encodeUriComponents(scheme, authority, userinfo, host, portString, path, query, null, encoding);, +		}, +		else {, +			throw new IllegalArgumentException("[" + httpUrl + "] is not a valid HTTP URL");, +		}, +	 * @deprecated in favor of {@link UriComponentsBuilder}, +        Assert.hasLength(encoding, "'encoding' must not be empty");, +        StringBuilder sb = new StringBuilder();, +        if (scheme != null) {, +                sb.append(encodeScheme(scheme, encoding));, +                sb.append(':');, +        }, +        if (authority != null) {, +                sb.append("//");, +                if (userInfo != null) {, +                        sb.append(encodeUserInfo(userInfo, encoding));, +                        sb.append('@');]