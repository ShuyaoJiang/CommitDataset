[+++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/config/JCacheConfigurer.java, + * {@link org.springframework.cache.annotation.EnableCaching} that wish, + * or need to specify explicitly how exception caches are resolved for, + * <p>See {@link org.springframework.cache.annotation.EnableCaching} for, + * general examples and context; see {@link #exceptionCacheResolver()} for, + * detailed instructions., +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/config/JCacheConfigurer.java, + * {@link org.springframework.cache.annotation.EnableCaching} that wish, + * or need to specify explicitly how exception caches are resolved for, + * <p>See {@link org.springframework.cache.annotation.EnableCaching} for, + * general examples and context; see {@link #exceptionCacheResolver()} for, + * detailed instructions., +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/JCacheAspectSupport.java, +, +	 * a {@code ThrowableWrapper}: the exception can be handled or modified but it, +	 * <em>must</em> be wrapped in a {@code ThrowableWrapper} as well., +, +		public CacheOperationInvokerAdapter(CacheOperationInvoker delegate) {, +			this.delegate = delegate;, +		}, +			return invokeOperation(this.delegate);, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/config/JCacheConfigurer.java, + * {@link org.springframework.cache.annotation.EnableCaching} that wish, + * or need to specify explicitly how exception caches are resolved for, + * <p>See {@link org.springframework.cache.annotation.EnableCaching} for, + * general examples and context; see {@link #exceptionCacheResolver()} for, + * detailed instructions., +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/JCacheAspectSupport.java, +, +	 * a {@code ThrowableWrapper}: the exception can be handled or modified but it, +	 * <em>must</em> be wrapped in a {@code ThrowableWrapper} as well., +, +		public CacheOperationInvokerAdapter(CacheOperationInvoker delegate) {, +			this.delegate = delegate;, +		}, +			return invokeOperation(this.delegate);, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/SimpleCacheKeyGenerator.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, + * @since 4.1, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/config/JCacheConfigurer.java, + * {@link org.springframework.cache.annotation.EnableCaching} that wish, + * or need to specify explicitly how exception caches are resolved for, + * <p>See {@link org.springframework.cache.annotation.EnableCaching} for, + * general examples and context; see {@link #exceptionCacheResolver()} for, + * detailed instructions., +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/JCacheAspectSupport.java, +, +	 * a {@code ThrowableWrapper}: the exception can be handled or modified but it, +	 * <em>must</em> be wrapped in a {@code ThrowableWrapper} as well., +, +		public CacheOperationInvokerAdapter(CacheOperationInvoker delegate) {, +			this.delegate = delegate;, +		}, +			return invokeOperation(this.delegate);, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/SimpleCacheKeyGenerator.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, + * @since 4.1, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/model/CacheResultOperation.java, +import org.springframework.util.StringUtils;, +		this.exceptionCacheName = (StringUtils.hasText(ann.exceptionCacheName()) ? ann.exceptionCacheName() : null);, +	 * Specify if the method should always be invoked regardless of a cache hit., +	 * By default, the method is only invoked in case of a cache miss., +	 * Return the name of the cache to cache exceptions, or {@code null} if, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/config/JCacheConfigurer.java, + * {@link org.springframework.cache.annotation.EnableCaching} that wish, + * or need to specify explicitly how exception caches are resolved for, + * <p>See {@link org.springframework.cache.annotation.EnableCaching} for, + * general examples and context; see {@link #exceptionCacheResolver()} for, + * detailed instructions., +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/JCacheAspectSupport.java]