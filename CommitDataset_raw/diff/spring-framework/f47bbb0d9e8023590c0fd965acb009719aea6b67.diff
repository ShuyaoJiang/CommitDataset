[+++ b/spring-beans/src/test/java/org/springframework/beans/factory/serviceloader/ServiceLoaderTests.java, +import static org.junit.Assume.*;, +		assumeTrue(ServiceLoader.load(DocumentBuilderFactory.class).iterator().hasNext());, +		assumeTrue(ServiceLoader.load(DocumentBuilderFactory.class).iterator().hasNext());, +		assumeTrue(ServiceLoader.load(DocumentBuilderFactory.class).iterator().hasNext());, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/serviceloader/ServiceLoaderTests.java, +import static org.junit.Assume.*;, +		assumeTrue(ServiceLoader.load(DocumentBuilderFactory.class).iterator().hasNext());, +		assumeTrue(ServiceLoader.load(DocumentBuilderFactory.class).iterator().hasNext());, +		assumeTrue(ServiceLoader.load(DocumentBuilderFactory.class).iterator().hasNext());, +++ b/spring-context/src/test/java/org/springframework/jmx/export/annotation/JmxUtilsAnnotationTests.java, +	public void notMXBean() throws Exception {, +		assertFalse("MXBean annotation not detected correctly", JmxUtils.isMBean(FooNotX.class));, +	public void annotatedMXBean() throws Exception {, +		assertTrue("MXBean annotation not detected correctly", JmxUtils.isMBean(FooX.class));, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/serviceloader/ServiceLoaderTests.java, +import static org.junit.Assume.*;, +		assumeTrue(ServiceLoader.load(DocumentBuilderFactory.class).iterator().hasNext());, +		assumeTrue(ServiceLoader.load(DocumentBuilderFactory.class).iterator().hasNext());, +		assumeTrue(ServiceLoader.load(DocumentBuilderFactory.class).iterator().hasNext());, +++ b/spring-context/src/test/java/org/springframework/jmx/export/annotation/JmxUtilsAnnotationTests.java, +	public void notMXBean() throws Exception {, +		assertFalse("MXBean annotation not detected correctly", JmxUtils.isMBean(FooNotX.class));, +	public void annotatedMXBean() throws Exception {, +		assertTrue("MXBean annotation not detected correctly", JmxUtils.isMBean(FooX.class));, +++ b/spring-core/src/test/java/org/springframework/core/io/support/PathMatchingResourcePatternResolverTests.java, +import java.util.Arrays;, + * If this test case fails, uncomment diagnostics in the, + * {@link #assertProtocolAndFilenames} method., + * @author Sam Brannen, +	@Test(expected = FileNotFoundException.class), +	public void invalidPrefixWithPatternElementInIt() throws IOException {, +	public void singleResourceOnFileSystem() throws IOException {, +	public void singleResourceInJar() throws IOException {, +	public void classpathStarWithPatternOnFileSystem() throws IOException {, +	public void classpathWithPatternInJar() throws IOException {, +	public void classpathStartWithPatternInJar() throws IOException {, +	public void rootPatternRetrievalInJarFiles() throws IOException {, +		String filename = resource.getFilename();, +		assertTrue(resource + " does not have a filename that matches any of the specified names",, +			Arrays.stream(filenames).anyMatch(filename::endsWith));]