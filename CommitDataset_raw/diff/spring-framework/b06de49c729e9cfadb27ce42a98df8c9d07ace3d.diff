[+++ b/org.springframework.web/src/main/java/org/springframework/http/client/InterceptingClientHttpRequest.java, +import java.util.List;, +	private final List<ClientHttpRequestInterceptor> interceptors;, +			List<ClientHttpRequestInterceptor> interceptors,, +			this.iterator = interceptors.iterator();, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/InterceptingClientHttpRequest.java, +import java.util.List;, +	private final List<ClientHttpRequestInterceptor> interceptors;, +			List<ClientHttpRequestInterceptor> interceptors,, +			this.iterator = interceptors.iterator();, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/InterceptingClientHttpRequestFactory.java, +import java.util.Collections;, +import java.util.List;, +	private final List<ClientHttpRequestInterceptor> interceptors;, +			List<ClientHttpRequestInterceptor> interceptors) {, +		this.interceptors = interceptors != null ? interceptors : Collections.<ClientHttpRequestInterceptor>emptyList();, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/InterceptingClientHttpRequest.java, +import java.util.List;, +	private final List<ClientHttpRequestInterceptor> interceptors;, +			List<ClientHttpRequestInterceptor> interceptors,, +			this.iterator = interceptors.iterator();, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/InterceptingClientHttpRequestFactory.java, +import java.util.Collections;, +import java.util.List;, +	private final List<ClientHttpRequestInterceptor> interceptors;, +			List<ClientHttpRequestInterceptor> interceptors) {, +		this.interceptors = interceptors != null ? interceptors : Collections.<ClientHttpRequestInterceptor>emptyList();, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/support/InterceptingHttpAccessor.java, +import java.util.List;, +, +import org.springframework.util.CollectionUtils;, +	private List<ClientHttpRequestInterceptor> interceptors;, +	public void setInterceptors(List<ClientHttpRequestInterceptor> interceptors) {, +	public List<ClientHttpRequestInterceptor> getInterceptors() {, +		if (!CollectionUtils.isEmpty(getInterceptors())) {, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/InterceptingClientHttpRequest.java, +import java.util.List;, +	private final List<ClientHttpRequestInterceptor> interceptors;, +			List<ClientHttpRequestInterceptor> interceptors,, +			this.iterator = interceptors.iterator();, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/InterceptingClientHttpRequestFactory.java, +import java.util.Collections;, +import java.util.List;, +	private final List<ClientHttpRequestInterceptor> interceptors;, +			List<ClientHttpRequestInterceptor> interceptors) {, +		this.interceptors = interceptors != null ? interceptors : Collections.<ClientHttpRequestInterceptor>emptyList();, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/support/InterceptingHttpAccessor.java, +import java.util.List;, +, +import org.springframework.util.CollectionUtils;, +	private List<ClientHttpRequestInterceptor> interceptors;, +	public void setInterceptors(List<ClientHttpRequestInterceptor> interceptors) {, +	public List<ClientHttpRequestInterceptor> getInterceptors() {, +		if (!CollectionUtils.isEmpty(getInterceptors())) {, +++ /dev/null, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/InterceptingClientHttpRequest.java, +import java.util.List;, +	private final List<ClientHttpRequestInterceptor> interceptors;, +			List<ClientHttpRequestInterceptor> interceptors,, +			this.iterator = interceptors.iterator();, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/InterceptingClientHttpRequestFactory.java, +import java.util.Collections;, +import java.util.List;, +	private final List<ClientHttpRequestInterceptor> interceptors;, +			List<ClientHttpRequestInterceptor> interceptors) {, +		this.interceptors = interceptors != null ? interceptors : Collections.<ClientHttpRequestInterceptor>emptyList();, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/support/InterceptingHttpAccessor.java, +import java.util.List;, +, +import org.springframework.util.CollectionUtils;, +	private List<ClientHttpRequestInterceptor> interceptors;, +	public void setInterceptors(List<ClientHttpRequestInterceptor> interceptors) {, +	public List<ClientHttpRequestInterceptor> getInterceptors() {, +		if (!CollectionUtils.isEmpty(getInterceptors())) {, +++ /dev/null, +++ b/org.springframework.web/src/test/java/org/springframework/http/client/InterceptingClientHttpRequestFactoryTests.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.http.client;, +, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.net.URI;, +import java.util.ArrayList;]