[+++ b/org.springframework.test/src/main/java/org/springframework/test/context/TestContext.java, +import org.springframework.util.StringUtils;, + * TestContext encapsulates the context in which a test is executed, agnostic of, + * the actual testing framework in use., +	private static final String STANDARD_DEFAULT_CONTEXT_LOADER_CLASS_NAME = "org.springframework.test.context.support.GenericXmlContextLoader";, +	 * Delegates to {@link #TestContext(Class, ContextCache, String)} with a, +	 * value of <code>null</code> for the default <code>ContextLoader</code>, +	 * class name., +	 */, +	TestContext(Class<?> testClass, ContextCache contextCache) {, +		this(testClass, contextCache, null);, +	}, +, +	/**, +	 * and {@link ContextCache context cache} and parse the corresponding, +	 * {@link ContextConfiguration &#064;ContextConfiguration} annotation, if, +	 * present., +	 * <p>, +	 * If the supplied class name for the default ContextLoader is, +	 * <code>null</code> or <em>empty</em> and no <code>ContextLoader</code>, +	 * class is explicitly supplied via the, +	 * <code>&#064;ContextConfiguration</code> annotation, a, +	 * {@link org.springframework.test.context.support.GenericXmlContextLoader, +	 * GenericXmlContextLoader} will be used instead., +	 * </p>, +	 * , +	 * @param testClass the test class for which the test context should be, +	 * constructed (must not be <code>null</code>), +	 * @param contextCache the context cache from which the constructed test, +	 * context should retrieve application contexts (must not be, +	 * <code>null</code>), +	 * @param defaultContextLoaderClassName the name of the default, +	 * <code>ContextLoader</code> class to use (may be <code>null</code>), +	TestContext(Class<?> testClass, ContextCache contextCache, String defaultContextLoaderClassName) {, +		if (!StringUtils.hasText(defaultContextLoaderClassName)) {, +			defaultContextLoaderClassName = STANDARD_DEFAULT_CONTEXT_LOADER_CLASS_NAME;, +		}, +, +				logger.trace("Retrieved @ContextConfiguration [" + contextConfiguration + "] for class [" + testClass, +						+ "]");, +					if (logger.isTraceEnabled()) {, +						logger.trace("Using default ContextLoader class [" + defaultContextLoaderClassName, +								+ "] for @ContextConfiguration [" + contextConfiguration + "] and class [" + testClass, +								+ "]");, +					}, +						defaultContextLoaderClassName);, +							+ defaultContextLoaderClassName + "]. Specify @ContextConfiguration's 'loader' ", +	 * {@link ContextLoader#processLocations(Class, String...) process} the, +	 * locations., +	 * <p>, +	 * Note that the {@link ContextConfiguration#inheritLocations(), +	 * inheritLocations} flag of {@link ContextConfiguration, +	 * &#064;ContextConfiguration} will be taken into consideration., +	 * Specifically, if the <code>inheritLocations</code> flag is set to, +	 * <code>true</code>, locations defined in the annotated class will be, +	 * appended to the locations defined in superclasses. &#064;param, +	 * contextLoader the ContextLoader to use for processing the locations (must, +	 * not be <code>null</code>), +	 * , +	 * @param clazz the class for which to retrieve the resource locations (must, +	 * not be <code>null</code>), +	 * @return the list of ApplicationContext resource locations for the, +	 * specified class, including locations from superclasses if appropriate, +	 * @throws IllegalArgumentException if {@link ContextConfiguration, +	 * &#064;ContextConfiguration} is not <em>present</em> on the supplied class, +		Assert.notNull(declaringClass, "Could not find an 'annotation declaring class' for annotation type [", +				+ annotationType + "] and class [" + clazz + "]");, +	 * Build an ApplicationContext for this test context using the configured, +	 * ContextLoader and resource locations., +	 * , +	 * @throws Exception if an error occurs while building the application, +	 * context, +		Assert.notNull(this.contextLoader, "Can not build an ApplicationContext with a NULL 'contextLoader'. ", +				+ "Consider annotating your test class with @ContextConfiguration.");, +		Assert.notNull(this.locations, "Can not build an ApplicationContext with a NULL 'locations' array. ", +				+ "Consider annotating your test class with @ContextConfiguration.");, +	 * Convert the supplied context <code>key</code> to a String representation, +	 * for use in caching, logging, etc., +	 * , +	 * @return the application context; may be <code>null</code> if the current, +	 * test context is not configured to use an application context, +	 * @throws IllegalStateException if an error occurs while retrieving the, +	 * application context, +	 * , +	 * <p>, +	 * Note: this is a mutable property., +	 * , +	 * <p>, +	 * Note: this is a mutable property., +	 * , +	 * <p>, +	 * Note: this is a mutable property., +	 * , +	 * Call this method to signal that the {@link ApplicationContext application, +	 * context} associated with this test context is <em>dirty</em> and should, +	 * be reloaded. Do this if a test has modified the context (for example, by, +	 * replacing a bean definition)., +	 * Update this test context to reflect the state of the currently executing, +	 * test., +	 * ]