[+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java, +		calendar.setTimeZone(this.timeZone);, +		}, +		else {, +		}, +		else {, +		}, +		else {, +			}, +			else {, +		}, +		else {, +		return cron.months.equals(this.months) && cron.daysOfMonth.equals(this.daysOfMonth) &&, +				cron.daysOfWeek.equals(this.daysOfWeek) && cron.hours.equals(this.hours) &&, +				cron.minutes.equals(this.minutes) && cron.seconds.equals(this.seconds);, +		return 37 + 17 * this.months.hashCode() + 29 * this.daysOfMonth.hashCode() +, +				37 * this.daysOfWeek.hashCode() + 41 * this.hours.hashCode() +, +				53 * this.minutes.hashCode() + 61 * this.seconds.hashCode();, +		return getClass().getSimpleName() + ": " + this.expression;, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java, +		calendar.setTimeZone(this.timeZone);, +		}, +		else {, +		}, +		else {, +		}, +		else {, +			}, +			else {, +		}, +		else {, +		return cron.months.equals(this.months) && cron.daysOfMonth.equals(this.daysOfMonth) &&, +				cron.daysOfWeek.equals(this.daysOfWeek) && cron.hours.equals(this.hours) &&, +				cron.minutes.equals(this.minutes) && cron.seconds.equals(this.seconds);, +		return 37 + 17 * this.months.hashCode() + 29 * this.daysOfMonth.hashCode() +, +				37 * this.daysOfWeek.hashCode() + 41 * this.hours.hashCode() +, +				53 * this.minutes.hashCode() + 61 * this.seconds.hashCode();, +		return getClass().getSimpleName() + ": " + this.expression;, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronTrigger.java, +		if (date != null) {, +			Date scheduled = triggerContext.lastScheduledExecutionTime();, +			if (scheduled != null && date.before(scheduled)) {, +				// Previous task apparently executed too early..., +				// Let's simply use the last calculated execution time then,, +				// in order to prevent accidental re-fires in the same second., +				date = scheduled;, +			}, +		}, +		else {, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java, +		calendar.setTimeZone(this.timeZone);, +		}, +		else {, +		}, +		else {, +		}, +		else {, +			}, +			else {, +		}, +		else {, +		return cron.months.equals(this.months) && cron.daysOfMonth.equals(this.daysOfMonth) &&, +				cron.daysOfWeek.equals(this.daysOfWeek) && cron.hours.equals(this.hours) &&, +				cron.minutes.equals(this.minutes) && cron.seconds.equals(this.seconds);, +		return 37 + 17 * this.months.hashCode() + 29 * this.daysOfMonth.hashCode() +, +				37 * this.daysOfWeek.hashCode() + 41 * this.hours.hashCode() +, +				53 * this.minutes.hashCode() + 61 * this.seconds.hashCode();, +		return getClass().getSimpleName() + ": " + this.expression;, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronTrigger.java, +		if (date != null) {, +			Date scheduled = triggerContext.lastScheduledExecutionTime();, +			if (scheduled != null && date.before(scheduled)) {, +				// Previous task apparently executed too early..., +				// Let's simply use the last calculated execution time then,, +				// in order to prevent accidental re-fires in the same second., +				date = scheduled;, +			}, +		}, +		else {, +++ b/org.springframework.context/src/test/java/org/springframework/scheduling/support/CronTriggerTests.java, + * Copyright 2002-2010 the original author or authors., +import static org.junit.Assert.*;, +, + * @author Juergen Hoeller, +, +	public void testIncrementSecondWithPreviousExecutionTooEarly() throws Exception {, +		CronTrigger trigger = new CronTrigger("11 * * * * *", timeZone);, +		calendar.set(Calendar.SECOND, 11);, +		SimpleTriggerContext context = new SimpleTriggerContext();, +		context.update(calendar.getTime(), new Date(calendar.getTimeInMillis() - 100),, +				new Date(calendar.getTimeInMillis() - 90));, +		calendar.add(Calendar.MINUTE, 1);, +		assertEquals(calendar.getTime(), trigger.nextExecutionTime(context));, +	}, +, +	@Test, +		date = trigger.nextExecutionTime(context1);, +		assertEquals(calendar.getTime(), date);, +		date = trigger.nextExecutionTime(context2);, +		assertEquals(calendar.getTime(), date);]