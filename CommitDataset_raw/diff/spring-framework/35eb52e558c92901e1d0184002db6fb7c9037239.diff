[+++ b/spring-core/src/main/java/org/springframework/util/xml/AbstractStaxXMLReader.java, + * Copyright 2002-2016 the original author or authors., + * @author Juergen Hoeller, +, +	 * Template method that parses the StAX reader passed at construction-time., +, +	 * Start the prefix mapping for the given prefix., +			if (!namespace.equals(this.namespaces.get(prefix))) {, +				this.namespaces.put(prefix, namespace);, +	 * End the prefix mapping for the given prefix., +			if (this.namespaces.containsKey(prefix)) {, +				this.namespaces.remove(prefix);, +, +	 * Implementation of the {@code Locator} interface based on a given StAX {@code Location}., +		private final Location location;, +		public StaxLocator(Location location) {, +			return this.location.getPublicId();, +			return this.location.getSystemId();, +			return this.location.getLineNumber();, +			return this.location.getColumnNumber();, +++ b/spring-core/src/main/java/org/springframework/util/xml/AbstractStaxXMLReader.java, + * Copyright 2002-2016 the original author or authors., + * @author Juergen Hoeller, +, +	 * Template method that parses the StAX reader passed at construction-time., +, +	 * Start the prefix mapping for the given prefix., +			if (!namespace.equals(this.namespaces.get(prefix))) {, +				this.namespaces.put(prefix, namespace);, +	 * End the prefix mapping for the given prefix., +			if (this.namespaces.containsKey(prefix)) {, +				this.namespaces.remove(prefix);, +, +	 * Implementation of the {@code Locator} interface based on a given StAX {@code Location}., +		private final Location location;, +		public StaxLocator(Location location) {, +			return this.location.getPublicId();, +			return this.location.getSystemId();, +			return this.location.getLineNumber();, +			return this.location.getColumnNumber();, +++ b/spring-core/src/main/java/org/springframework/util/xml/AbstractXMLReader.java, + * Copyright 2002-2016 the original author or authors., + * Abstract base class for SAX {@code XMLReader} implementations., + * Contains properties as defined in {@link XMLReader}, and does not recognize any features., + * @author Juergen Hoeller, + * @since 3.0, +	public ContentHandler getContentHandler() {, +		return this.contentHandler;, +	}, +, +	@Override, +		return this.dtdHandler;, +	public EntityResolver getEntityResolver() {, +		return this.entityResolver;, +	@Override, +	public ErrorHandler getErrorHandler() {, +		return this.errorHandler;, +	protected LexicalHandler getLexicalHandler() {, +		return this.lexicalHandler;, +	}, +, +, +	 * This implementation throws a {@code SAXNotRecognizedException} exception, +	 * for any feature outside of the "http://xml.org/sax/features/" namespace, +	 * and returns {@code false} for any feature within., +		if (name.startsWith("http://xml.org/sax/features/")) {, +			return false;, +		}, +		else {, +	}, +	 * This implementation throws a {@code SAXNotRecognizedException} exception, +	 * for any feature outside of the "http://xml.org/sax/features/" namespace, +	 * and accepts a {@code false} value for any feature within., +		if (name.startsWith("http://xml.org/sax/features/")) {, +			if (value) {, +				throw new SAXNotSupportedException(name);, +			}, +		}, +		else {, +	}, +			return this.lexicalHandler;, +			this.lexicalHandler = (LexicalHandler) value;, +]