[+++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AbstractInterceptorDrivenBeanDefinitionDecorator.java, +			mpvs.add("target", existingDefinition);, +			mpvs.add("interceptorNames", interceptorList);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AbstractInterceptorDrivenBeanDefinitionDecorator.java, +			mpvs.add("target", existingDefinition);, +			mpvs.add("interceptorNames", interceptorList);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AopConfigUtils.java, +			definition.getPropertyValues().add("proxyTargetClass", Boolean.TRUE);, +		beanDefinition.getPropertyValues().add("order", Ordered.HIGHEST_PRECEDENCE);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AbstractInterceptorDrivenBeanDefinitionDecorator.java, +			mpvs.add("target", existingDefinition);, +			mpvs.add("interceptorNames", interceptorList);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AopConfigUtils.java, +			definition.getPropertyValues().add("proxyTargetClass", Boolean.TRUE);, +		beanDefinition.getPropertyValues().add("order", Ordered.HIGHEST_PRECEDENCE);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AspectJAutoProxyBeanDefinitionParser.java, +			beanDef.getPropertyValues().add("includePatterns", includePatterns);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AbstractInterceptorDrivenBeanDefinitionDecorator.java, +			mpvs.add("target", existingDefinition);, +			mpvs.add("interceptorNames", interceptorList);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AopConfigUtils.java, +			definition.getPropertyValues().add("proxyTargetClass", Boolean.TRUE);, +		beanDefinition.getPropertyValues().add("order", Ordered.HIGHEST_PRECEDENCE);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AspectJAutoProxyBeanDefinitionParser.java, +			beanDef.getPropertyValues().add("includePatterns", includePatterns);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/ConfigBeanDefinitionParser.java, +				advisorDef.getPropertyValues().add(POINTCUT, pointcut);, +				advisorDef.getPropertyValues().add(POINTCUT, new RuntimeBeanReference((String) pointcut));, +			advisorDefinition.getPropertyValues().add(, +			advisorDefinition.getPropertyValues().add(, +			methodDefinition.getPropertyValues().add("targetBeanName", aspectName);, +			methodDefinition.getPropertyValues().add("methodName", adviceElement.getAttribute("method"));, +			aspectFactoryDef.getPropertyValues().add("aspectBeanName", aspectName);, +				advisorDefinition.getPropertyValues().add(, +		adviceDefinition.getPropertyValues().add(ASPECT_NAME_PROPERTY, aspectName);, +		adviceDefinition.getPropertyValues().add(DECLARATION_ORDER_PROPERTY, order);, +			adviceDefinition.getPropertyValues().add(, +			adviceDefinition.getPropertyValues().add(, +			adviceDefinition.getPropertyValues().add(, +		beanDefinition.getPropertyValues().add(EXPRESSION, expression);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AbstractInterceptorDrivenBeanDefinitionDecorator.java, +			mpvs.add("target", existingDefinition);, +			mpvs.add("interceptorNames", interceptorList);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AopConfigUtils.java, +			definition.getPropertyValues().add("proxyTargetClass", Boolean.TRUE);, +		beanDefinition.getPropertyValues().add("order", Ordered.HIGHEST_PRECEDENCE);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AspectJAutoProxyBeanDefinitionParser.java, +			beanDef.getPropertyValues().add("includePatterns", includePatterns);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/ConfigBeanDefinitionParser.java, +				advisorDef.getPropertyValues().add(POINTCUT, pointcut);, +				advisorDef.getPropertyValues().add(POINTCUT, new RuntimeBeanReference((String) pointcut));, +			advisorDefinition.getPropertyValues().add(, +			advisorDefinition.getPropertyValues().add(, +			methodDefinition.getPropertyValues().add("targetBeanName", aspectName);, +			methodDefinition.getPropertyValues().add("methodName", adviceElement.getAttribute("method"));, +			aspectFactoryDef.getPropertyValues().add("aspectBeanName", aspectName);, +				advisorDefinition.getPropertyValues().add(, +		adviceDefinition.getPropertyValues().add(ASPECT_NAME_PROPERTY, aspectName);, +		adviceDefinition.getPropertyValues().add(DECLARATION_ORDER_PROPERTY, order);, +			adviceDefinition.getPropertyValues().add(, +			adviceDefinition.getPropertyValues().add(, +			adviceDefinition.getPropertyValues().add(, +		beanDefinition.getPropertyValues().add(EXPRESSION, expression);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java, +		scopedProxyDefinition.getPropertyValues().add("targetBeanName", targetBeanName);, +			scopedProxyDefinition.getPropertyValues().add("proxyTargetClass", Boolean.FALSE);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AbstractInterceptorDrivenBeanDefinitionDecorator.java, +			mpvs.add("target", existingDefinition);, +			mpvs.add("interceptorNames", interceptorList);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AopConfigUtils.java, +			definition.getPropertyValues().add("proxyTargetClass", Boolean.TRUE);, +		beanDefinition.getPropertyValues().add("order", Ordered.HIGHEST_PRECEDENCE);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AspectJAutoProxyBeanDefinitionParser.java, +			beanDef.getPropertyValues().add("includePatterns", includePatterns);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/ConfigBeanDefinitionParser.java, +				advisorDef.getPropertyValues().add(POINTCUT, pointcut);, +				advisorDef.getPropertyValues().add(POINTCUT, new RuntimeBeanReference((String) pointcut));, +			advisorDefinition.getPropertyValues().add(, +			advisorDefinition.getPropertyValues().add(, +			methodDefinition.getPropertyValues().add("targetBeanName", aspectName);, +			methodDefinition.getPropertyValues().add("methodName", adviceElement.getAttribute("method"));, +			aspectFactoryDef.getPropertyValues().add("aspectBeanName", aspectName);, +				advisorDefinition.getPropertyValues().add(, +		adviceDefinition.getPropertyValues().add(ASPECT_NAME_PROPERTY, aspectName);, +		adviceDefinition.getPropertyValues().add(DECLARATION_ORDER_PROPERTY, order);, +			adviceDefinition.getPropertyValues().add(, +			adviceDefinition.getPropertyValues().add(, +			adviceDefinition.getPropertyValues().add(, +		beanDefinition.getPropertyValues().add(EXPRESSION, expression);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java, +		scopedProxyDefinition.getPropertyValues().add("targetBeanName", targetBeanName);, +			scopedProxyDefinition.getPropertyValues().add("proxyTargetClass", Boolean.FALSE);, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/target/PrototypeBasedTargetSourceTests.java, +		tsPvs.add("targetBeanName", "person");, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AbstractInterceptorDrivenBeanDefinitionDecorator.java, +			mpvs.add("target", existingDefinition);, +			mpvs.add("interceptorNames", interceptorList);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AopConfigUtils.java, +			definition.getPropertyValues().add("proxyTargetClass", Boolean.TRUE);, +		beanDefinition.getPropertyValues().add("order", Ordered.HIGHEST_PRECEDENCE);]