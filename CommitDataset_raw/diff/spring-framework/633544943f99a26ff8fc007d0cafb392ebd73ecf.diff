[+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterReturnValueHandlerTests.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +import static org.mockito.Mockito.any;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import static org.springframework.core.ResolvableType.forClassWithGenerics;, +import static org.springframework.web.method.ResolvableMethod.on;, +	private final ModelAndViewContainer mavContainer = new ModelAndViewContainer();, +, +, +	public void supportsReturnTypes() throws Exception {, +, +		assertTrue(this.handler.supportsReturnType(, +				on(TestController.class).resolveReturnType(ResponseBodyEmitter.class)));, +, +		assertTrue(this.handler.supportsReturnType(, +				on(TestController.class).resolveReturnType(SseEmitter.class)));, +, +		assertTrue(this.handler.supportsReturnType(, +				on(TestController.class).resolveReturnType(ResponseEntity.class, ResponseBodyEmitter.class)));, +	}, +, +	@Test, +	public void doesNotSupportReturnTypes() throws Exception {, +, +		assertFalse(this.handler.supportsReturnType(, +				on(TestController.class).resolveReturnType(ResponseEntity.class, String.class)));, +, +		assertFalse(this.handler.supportsReturnType(on(TestController.class), +				.resolveReturnType(forClassWithGenerics(ResponseEntity.class,, +						forClassWithGenerics(AtomicReference.class, String.class)))));, +, +		assertFalse(this.handler.supportsReturnType(, +				on(TestController.class).resolveReturnType(ResponseEntity.class)));, +		MethodParameter type = on(TestController.class).resolveReturnType(ResponseBodyEmitter.class);, +		this.handler.handleReturnValue(emitter, type, this.mavContainer, this.webRequest);, +						"{\"id\":3,\"name\":\"Jason\"}", this.response.getContentAsString());, +	public void responseBodyEmitterWithTimeoutValue() throws Exception {, +		MethodParameter type = on(TestController.class).resolveReturnType(ResponseBodyEmitter.class);, +		this.handler.handleReturnValue(emitter, type, this.mavContainer, this.webRequest);, +		MethodParameter type = on(TestController.class).resolveReturnType(SseEmitter.class);, +		this.handler.handleReturnValue(emitter, type, this.mavContainer, this.webRequest);, +						"\n", this.response.getContentAsString());, +		MethodParameter type = on(TestController.class).resolveReturnType(ResponseEntity.class, SseEmitter.class);, +		this.handler.handleReturnValue(entity, type, this.mavContainer, this.webRequest);, +		MethodParameter type = on(TestController.class).resolveReturnType(ResponseEntity.class, SseEmitter.class);, +		this.handler.handleReturnValue(entity, type, this.mavContainer, this.webRequest);, +		private ResponseBodyEmitter h1() { return null; }, +		private ResponseEntity<ResponseBodyEmitter> h2() { return null; }, +		private SseEmitter h3() { return null; }, +		private ResponseEntity<SseEmitter> h4() { return null; }, +		private ResponseEntity<String> h5() { return null; }, +		private ResponseEntity<AtomicReference<String>> h6() { return null; }, +		private ResponseEntity h7() { return null; }, +]