[+++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionInterceptor.java, + * Copyright 2002-2015 the original author or authors., +import java.util.concurrent.ExecutionException;, +				catch (ExecutionException ex) {, +					handleError(ex.getCause(), userDeclaredMethod, invocation.getArguments());, +				}, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionInterceptor.java, + * Copyright 2002-2015 the original author or authors., +import java.util.concurrent.ExecutionException;, +				catch (ExecutionException ex) {, +					handleError(ex.getCause(), userDeclaredMethod, invocation.getArguments());, +				}, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/AsyncResult.java, + * Copyright 2002-2015 the original author or authors., +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.Future;, + * <p>As of Spring 4.2, this class also supports passing execution exceptions back, + * to the caller., + *, + * @see #forValue(Object), + * @see #forExecutionException(Throwable), +	private final ExecutionException executionException;, +, +		this(value, null);, +	}, +, +	/**, +	 * Create a new AsyncResult holder., +	 * @param value the value to pass through, +	 */, +	private AsyncResult(V value, ExecutionException ex) {, +		this.executionException = ex;, +	public V get() throws ExecutionException {, +		if (this.executionException != null) {, +			throw this.executionException;, +		}, +	public V get(long timeout, TimeUnit unit) throws ExecutionException {, +		return get();, +, +	/**, +	 * Create a new async result which exposes the given value from {@link Future#get()}., +	 * @param value the value to expose, +	 * @since 4.2, +	 * @see Future#get(), +	 */, +	public static <V> ListenableFuture<V> forValue(V value) {, +		return new AsyncResult<V>(value, null);, +	}, +, +	/**, +	 * Create a new async result which exposes the given exception as an, +	 * {@link ExecutionException} from {@link Future#get()}., +	 * @param ex the exception to expose (either an pre-built {@link ExecutionException}, +	 * or a cause to be wrapped in an {@link ExecutionException}), +	 * @since 4.2, +	 * @see ExecutionException, +	 */, +	public static <V> ListenableFuture<V> forExecutionException(Throwable ex) {, +		return new AsyncResult<V>(null,, +				(ex instanceof ExecutionException ? (ExecutionException) ex : new ExecutionException(ex)));, +	}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionInterceptor.java, + * Copyright 2002-2015 the original author or authors., +import java.util.concurrent.ExecutionException;, +				catch (ExecutionException ex) {, +					handleError(ex.getCause(), userDeclaredMethod, invocation.getArguments());, +				}, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/AsyncResult.java, + * Copyright 2002-2015 the original author or authors., +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.Future;, + * <p>As of Spring 4.2, this class also supports passing execution exceptions back, + * to the caller., + *, + * @see #forValue(Object), + * @see #forExecutionException(Throwable), +	private final ExecutionException executionException;, +, +		this(value, null);, +	}, +, +	/**, +	 * Create a new AsyncResult holder., +	 * @param value the value to pass through, +	 */, +	private AsyncResult(V value, ExecutionException ex) {, +		this.executionException = ex;, +	public V get() throws ExecutionException {, +		if (this.executionException != null) {, +			throw this.executionException;, +		}, +	public V get(long timeout, TimeUnit unit) throws ExecutionException {, +		return get();, +, +	/**, +	 * Create a new async result which exposes the given value from {@link Future#get()}., +	 * @param value the value to expose, +	 * @since 4.2, +	 * @see Future#get()]