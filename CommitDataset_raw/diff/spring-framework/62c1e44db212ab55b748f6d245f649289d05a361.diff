[+++ b/build.gradle, +		optional("org.reactivestreams:reactive-streams"), +		testCompile("io.projectreactor:reactor-core"), +		testCompile("io.reactivex:rxjava:${rxjavaVersion}"), +		testCompile("io.reactivex.rxjava2:rxjava:${rxjava2Version}"), +		testCompile("io.reactivex:rxjava-reactive-streams:${rxjavaAdapterVersion}"), +++ b/build.gradle, +		optional("org.reactivestreams:reactive-streams"), +		testCompile("io.projectreactor:reactor-core"), +		testCompile("io.reactivex:rxjava:${rxjavaVersion}"), +		testCompile("io.reactivex.rxjava2:rxjava:${rxjava2Version}"), +		testCompile("io.reactivex:rxjava-reactive-streams:${rxjavaAdapterVersion}"), +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +	 * Whether the registry has any adapters which would be the case if any of, +	 * Reactor, RxJava 2, or RxJava 1 (+ RxJava Reactive Streams bridge) are, +	 * present on the classpath., +	 */, +	public boolean hasAdapters() {, +		return !this.adapters.isEmpty();, +	}, +, +, +	/**, +		if (reactiveType == null) {, +			return null;, +		}, +, +++ b/build.gradle, +		optional("org.reactivestreams:reactive-streams"), +		testCompile("io.projectreactor:reactor-core"), +		testCompile("io.reactivex:rxjava:${rxjavaVersion}"), +		testCompile("io.reactivex.rxjava2:rxjava:${rxjava2Version}"), +		testCompile("io.reactivex:rxjava-reactive-streams:${rxjavaAdapterVersion}"), +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +	 * Whether the registry has any adapters which would be the case if any of, +	 * Reactor, RxJava 2, or RxJava 1 (+ RxJava Reactive Streams bridge) are, +	 * present on the classpath., +	 */, +	public boolean hasAdapters() {, +		return !this.adapters.isEmpty();, +	}, +, +, +	/**, +		if (reactiveType == null) {, +			return null;, +		}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java, +/*, + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.web.servlet.mvc.method.annotation;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.Optional;, +, +import org.reactivestreams.Publisher;, +import org.reactivestreams.Subscriber;, +import org.reactivestreams.Subscription;, +, +import org.springframework.core.MethodParameter;, +import org.springframework.core.ReactiveAdapter;, +import org.springframework.core.ReactiveAdapterRegistry;, +import org.springframework.http.MediaType;, +import org.springframework.http.codec.ServerSentEvent;, +import org.springframework.http.server.ServerHttpResponse;, +import org.springframework.util.Assert;, +import org.springframework.util.CollectionUtils;, +import org.springframework.util.MimeType;, +import org.springframework.web.HttpMediaTypeNotAcceptableException;, +import org.springframework.web.accept.ContentNegotiationManager;, +import org.springframework.web.context.request.NativeWebRequest;, +import org.springframework.web.context.request.RequestAttributes;, +import org.springframework.web.context.request.async.DeferredResult;, +import org.springframework.web.context.request.async.WebAsyncUtils;, +import org.springframework.web.method.support.ModelAndViewContainer;, +import org.springframework.web.servlet.HandlerMapping;, +, +, +/**, + * Private helper class to assist with handling "reactive" return values types, + * that can be adapted to a Reactive Streams {@link Publisher} through the, + * {@link ReactiveAdapterRegistry}., + *, + * <p>Such return values may be bridged to a {@link ResponseBodyEmitter} for]