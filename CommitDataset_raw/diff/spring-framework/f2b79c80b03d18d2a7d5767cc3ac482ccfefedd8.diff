[+++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java, +import net.sf.ehcache.config.CacheConfiguration;, + * <p>Note: As of Spring 4.0, Spring's EhCache support requires EhCache 2.1 or higher., +public class EhCacheFactoryBean extends CacheConfiguration implements FactoryBean<Ehcache>, BeanNameAware, InitializingBean {, +	public EhCacheFactoryBean() {, +		setMaxElementsInMemory(10000);, +		setMaxElementsOnDisk(10000000);, +		setTimeToLiveSeconds(120);, +		setTimeToIdleSeconds(120);, +	}, +, +		setName(cacheName);, +	 * @see #setTimeToLiveSeconds(long), +		setTimeToLiveSeconds(timeToLive);, +	 * @see #setTimeToIdleSeconds(long), +		setTimeToIdleSeconds(timeToIdle);, +	 * @see #setDiskSpoolBufferSizeMB(int), +		setDiskSpoolBufferSizeMB(diskSpoolBufferSize);, +		// If no cache name given, use bean name as cache name., +		String cacheName = getName();, +		if (cacheName == null) {, +			cacheName = this.beanName;, +			setName(cacheName);, +		}, +, +				logger.debug("Using default EhCache CacheManager for cache region '" + cacheName + "'");, +		// Fetch cache region: If none with the given name exists, create one on the fly., +		if (this.cacheManager.cacheExists(cacheName)) {, +				logger.debug("Using existing EhCache cache region '" + cacheName + "'");, +			rawCache = this.cacheManager.getEhcache(cacheName);, +				logger.debug("Creating new EhCache cache region '" + cacheName + "'");, +			rawCache.setBootstrapCacheLoader(this.bootstrapCacheLoader);, +		return new Cache(this);, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java, +import net.sf.ehcache.config.CacheConfiguration;, + * <p>Note: As of Spring 4.0, Spring's EhCache support requires EhCache 2.1 or higher., +public class EhCacheFactoryBean extends CacheConfiguration implements FactoryBean<Ehcache>, BeanNameAware, InitializingBean {, +	public EhCacheFactoryBean() {, +		setMaxElementsInMemory(10000);, +		setMaxElementsOnDisk(10000000);, +		setTimeToLiveSeconds(120);, +		setTimeToIdleSeconds(120);, +	}, +, +		setName(cacheName);, +	 * @see #setTimeToLiveSeconds(long), +		setTimeToLiveSeconds(timeToLive);, +	 * @see #setTimeToIdleSeconds(long), +		setTimeToIdleSeconds(timeToIdle);, +	 * @see #setDiskSpoolBufferSizeMB(int), +		setDiskSpoolBufferSizeMB(diskSpoolBufferSize);, +		// If no cache name given, use bean name as cache name., +		String cacheName = getName();, +		if (cacheName == null) {, +			cacheName = this.beanName;, +			setName(cacheName);, +		}, +, +				logger.debug("Using default EhCache CacheManager for cache region '" + cacheName + "'");, +		// Fetch cache region: If none with the given name exists, create one on the fly., +		if (this.cacheManager.cacheExists(cacheName)) {, +				logger.debug("Using existing EhCache cache region '" + cacheName + "'");, +			rawCache = this.cacheManager.getEhcache(cacheName);, +				logger.debug("Creating new EhCache cache region '" + cacheName + "'");, +			rawCache.setBootstrapCacheLoader(this.bootstrapCacheLoader);, +		return new Cache(this);, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheManagerFactoryBean.java, + * <p>Note: As of Spring 4.0, Spring's EhCache support requires EhCache 2.1 or higher., +			Configuration configuration = (is != null ?, +					ConfigurationFactory.parseConfiguration(is) : ConfigurationFactory.parseConfiguration());, +			this.cacheManager = (this.shared ? CacheManager.create(configuration) : new CacheManager(configuration));, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java, +import net.sf.ehcache.config.CacheConfiguration;, + * <p>Note: As of Spring 4.0, Spring's EhCache support requires EhCache 2.1 or higher., +public class EhCacheFactoryBean extends CacheConfiguration implements FactoryBean<Ehcache>, BeanNameAware, InitializingBean {, +	public EhCacheFactoryBean() {, +		setMaxElementsInMemory(10000);, +		setMaxElementsOnDisk(10000000);, +		setTimeToLiveSeconds(120);, +		setTimeToIdleSeconds(120);, +	}, +, +		setName(cacheName);, +	 * @see #setTimeToLiveSeconds(long), +		setTimeToLiveSeconds(timeToLive);, +	 * @see #setTimeToIdleSeconds(long), +		setTimeToIdleSeconds(timeToIdle);, +	 * @see #setDiskSpoolBufferSizeMB(int), +		setDiskSpoolBufferSizeMB(diskSpoolBufferSize);, +		// If no cache name given, use bean name as cache name., +		String cacheName = getName();, +		if (cacheName == null) {, +			cacheName = this.beanName;, +			setName(cacheName);, +		}, +, +				logger.debug("Using default EhCache CacheManager for cache region '" + cacheName + "'");, +		// Fetch cache region: If none with the given name exists, create one on the fly., +		if (this.cacheManager.cacheExists(cacheName)) {, +				logger.debug("Using existing EhCache cache region '" + cacheName + "'");]