[+++ b/README.md, +See [downloading Spring artifacts](https://github.com/SpringSource/spring-framework/wiki/Downloading-Spring-artifacts), +for Maven repository information. Unable to use Maven or other transitive dependency management tools?, +See [building a distribution with dependencies](https://github.com/SpringSource/spring-framework/wiki/Building-a-distribution-with-dependencies)., +++ b/README.md, +See [downloading Spring artifacts](https://github.com/SpringSource/spring-framework/wiki/Downloading-Spring-artifacts), +for Maven repository information. Unable to use Maven or other transitive dependency management tools?, +See [building a distribution with dependencies](https://github.com/SpringSource/spring-framework/wiki/Building-a-distribution-with-dependencies)., +++ b/build.gradle, +        ext.baseDir = "${project.name}-${project.version}";, +    // Create an distribution that contains all dependencies (required and optional)., +    // Not published by default; only for use when building from source., +    task depsZip(type: Zip, dependsOn: distZip) { zipTask ->, +        group = 'Distribution', +        classifier = 'dist-with-deps', +        description = "Builds -${classifier} archive, containing everything " +, +            "in the -${distZip.classifier} archive plus all runtime dependencies.", +, +        from zipTree(distZip.archivePath), +, +        gradle.taskGraph.whenReady { taskGraph ->, +            if (taskGraph.hasTask(":${zipTask.name}")) {, +                def projectNames = rootProject.subprojects*.name, +                def artifacts = new HashSet(), +                subprojects.each { subproject ->, +                    subproject.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->, +                        def dependency = artifact.moduleVersion.id, +                        if (!projectNames.contains(dependency.name)) {, +                            artifacts << artifact.file, +                        }, +                    }, +                }, +, +                zipTask.from(artifacts) {, +                    into "${distZip.baseDir}/deps", +                }, +            }, +        }, +    }, +]