[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java, +			if (!method.isBridge() && method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&, +			if (!method.isBridge() && method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&, +			if (!method.isBridge() && method.getName().equals(setterName) && method.getParameterTypes().length == 1 &&, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java, +			if (!method.isBridge() && method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&, +			if (!method.isBridge() && method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&, +			if (!method.isBridge() && method.getName().equals(setterName) && method.getParameterTypes().length == 1 &&, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.hamcrest.Matchers.is;, +import static org.hamcrest.Matchers.isA;, +	@Test, +	public void testBridgeMethods_SPR_9994() throws Exception {, +		ReflectivePropertyAccessor accessor = new ReflectivePropertyAccessor();, +		StandardEvaluationContext context = new StandardEvaluationContext();, +		Object target = new GenericImplementation();, +		TypedValue value = accessor.read(context, target , "property");, +		assertEquals(Integer.class, value.getTypeDescriptor().getType());, +	}, +, +	private static interface GenericInterface<T extends Number> {, +		public T getProperty();, +	}, +, +	private static class GenericImplementation implements GenericInterface<Integer> {, +		public Integer getProperty() {, +			return null;, +		}, +	}, +]