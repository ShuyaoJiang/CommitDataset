[+++ b/spring-core/src/main/java/org/springframework/core/codec/StringDecoder.java, +	private StringDecoder(boolean splitOnNewline, MimeType... mimeTypes) {, +		super(mimeTypes);, +, +	/**, +	 * Create a {@code StringDecoder} for {@code "text/plain"}., +	 * @param splitOnNewline whether to split the byte stream into lines, +	 */, +	public static StringDecoder textPlainOnly(boolean splitOnNewline) {, +		return new StringDecoder(splitOnNewline, new MimeType("text", "plain", DEFAULT_CHARSET));, +	}, +, +	/**, +	 * Create a {@code StringDecoder} that supports all MIME types., +	 * @param splitOnNewline whether to split the byte stream into lines, +	 */, +	public static StringDecoder allMimeTypes(boolean splitOnNewline) {, +		return new StringDecoder(splitOnNewline,, +				new MimeType("text", "plain", DEFAULT_CHARSET), MimeTypeUtils.ALL);, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/codec/StringDecoder.java, +	private StringDecoder(boolean splitOnNewline, MimeType... mimeTypes) {, +		super(mimeTypes);, +, +	/**, +	 * Create a {@code StringDecoder} for {@code "text/plain"}., +	 * @param splitOnNewline whether to split the byte stream into lines, +	 */, +	public static StringDecoder textPlainOnly(boolean splitOnNewline) {, +		return new StringDecoder(splitOnNewline, new MimeType("text", "plain", DEFAULT_CHARSET));, +	}, +, +	/**, +	 * Create a {@code StringDecoder} that supports all MIME types., +	 * @param splitOnNewline whether to split the byte stream into lines, +	 */, +	public static StringDecoder allMimeTypes(boolean splitOnNewline) {, +		return new StringDecoder(splitOnNewline,, +				new MimeType("text", "plain", DEFAULT_CHARSET), MimeTypeUtils.ALL);, +	}, +, +++ b/spring-core/src/test/java/org/springframework/core/codec/StringDecoderTests.java, +	private StringDecoder decoder = StringDecoder.allMimeTypes(true);, +		this.decoder = StringDecoder.allMimeTypes(false);, +		this.decoder = StringDecoder.allMimeTypes(false);, +++ b/spring-core/src/main/java/org/springframework/core/codec/StringDecoder.java, +	private StringDecoder(boolean splitOnNewline, MimeType... mimeTypes) {, +		super(mimeTypes);, +, +	/**, +	 * Create a {@code StringDecoder} for {@code "text/plain"}., +	 * @param splitOnNewline whether to split the byte stream into lines, +	 */, +	public static StringDecoder textPlainOnly(boolean splitOnNewline) {, +		return new StringDecoder(splitOnNewline, new MimeType("text", "plain", DEFAULT_CHARSET));, +	}, +, +	/**, +	 * Create a {@code StringDecoder} that supports all MIME types., +	 * @param splitOnNewline whether to split the byte stream into lines, +	 */, +	public static StringDecoder allMimeTypes(boolean splitOnNewline) {, +		return new StringDecoder(splitOnNewline,, +				new MimeType("text", "plain", DEFAULT_CHARSET), MimeTypeUtils.ALL);, +	}, +, +++ b/spring-core/src/test/java/org/springframework/core/codec/StringDecoderTests.java, +	private StringDecoder decoder = StringDecoder.allMimeTypes(true);, +		this.decoder = StringDecoder.allMimeTypes(false);, +		this.decoder = StringDecoder.allMimeTypes(false);, +++ b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageReader.java, +	private static final StringDecoder stringDecoder = StringDecoder.textPlainOnly(false);, +		// We're ahead of String + "*/*", +		// Let's see if we can aggregate the output (lest we time out)..., +, +++ b/spring-core/src/main/java/org/springframework/core/codec/StringDecoder.java, +	private StringDecoder(boolean splitOnNewline, MimeType... mimeTypes) {, +		super(mimeTypes);, +, +	/**, +	 * Create a {@code StringDecoder} for {@code "text/plain"}., +	 * @param splitOnNewline whether to split the byte stream into lines, +	 */, +	public static StringDecoder textPlainOnly(boolean splitOnNewline) {, +		return new StringDecoder(splitOnNewline, new MimeType("text", "plain", DEFAULT_CHARSET));, +	}, +, +	/**, +	 * Create a {@code StringDecoder} that supports all MIME types., +	 * @param splitOnNewline whether to split the byte stream into lines, +	 */, +	public static StringDecoder allMimeTypes(boolean splitOnNewline) {, +		return new StringDecoder(splitOnNewline,, +				new MimeType("text", "plain", DEFAULT_CHARSET), MimeTypeUtils.ALL);, +	}, +, +++ b/spring-core/src/test/java/org/springframework/core/codec/StringDecoderTests.java, +	private StringDecoder decoder = StringDecoder.allMimeTypes(true);, +		this.decoder = StringDecoder.allMimeTypes(false);]