[+++ /dev/null, +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +import org.springframework.core.codec.Decoder;, +import org.springframework.core.codec.Encoder;, +import org.springframework.core.codec.StringDecoder;, +import org.springframework.core.codec.StringEncoder;, +import org.springframework.core.convert.converter.Converter;, +import org.springframework.core.convert.support.MonoToCompletableFutureConverter;, +import org.springframework.core.convert.support.ReactorToRxJava1Converter;, +import org.springframework.format.Formatter;, +import org.springframework.format.FormatterRegistry;, +import org.springframework.format.support.DefaultFormattingConversionService;, +import org.springframework.format.support.FormattingConversionService;, +import org.springframework.http.MediaType;, +import org.springframework.http.codec.SseEventEncoder;, +	public FormattingConversionService mvcConversionService() {, +		FormattingConversionService service = new DefaultFormattingConversionService();, +	protected void addFormatters(FormatterRegistry registry) {, +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +import org.springframework.core.codec.Decoder;, +import org.springframework.core.codec.Encoder;, +import org.springframework.core.codec.StringDecoder;, +import org.springframework.core.codec.StringEncoder;, +import org.springframework.core.convert.converter.Converter;, +import org.springframework.core.convert.support.MonoToCompletableFutureConverter;, +import org.springframework.core.convert.support.ReactorToRxJava1Converter;, +import org.springframework.format.Formatter;, +import org.springframework.format.FormatterRegistry;, +import org.springframework.format.support.DefaultFormattingConversionService;, +import org.springframework.format.support.FormattingConversionService;, +import org.springframework.http.MediaType;, +import org.springframework.http.codec.SseEventEncoder;, +	public FormattingConversionService mvcConversionService() {, +		FormattingConversionService service = new DefaultFormattingConversionService();, +	protected void addFormatters(FormatterRegistry registry) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/SimpleResultHandler.java, +import org.reactivestreams.Publisher;, +import org.springframework.core.convert.TypeDescriptor;, +	protected static final TypeDescriptor MONO_TYPE = TypeDescriptor.valueOf(Mono.class);, +, +	protected static final TypeDescriptor FLUX_TYPE = TypeDescriptor.valueOf(Flux.class);, +, +, +		TypeDescriptor source = new TypeDescriptor(result.getReturnTypeSource());, +		if (Publisher.class.isAssignableFrom(type.getRawClass()) ||, +				canConvert(source, MONO_TYPE) || canConvert(source, FLUX_TYPE)) {, +	private boolean canConvert(TypeDescriptor source, TypeDescriptor target) {, +		return getConversionService().canConvert(source, target);, +	}, +, +		Object value = optional.get();, +		if (Publisher.class.isAssignableFrom(result.getReturnType().getRawClass())) {, +			return Mono.from((Publisher<?>) value).then();, +		TypeDescriptor source = new TypeDescriptor(result.getReturnTypeSource());, +		return canConvert(source, MONO_TYPE) ?, +				((Mono<Void>) getConversionService().convert(value, source, MONO_TYPE)) :, +				((Flux<Void>) getConversionService().convert(value, source, FLUX_TYPE)).single();, +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +import org.springframework.core.codec.Decoder;, +import org.springframework.core.codec.Encoder;, +import org.springframework.core.codec.StringDecoder;, +import org.springframework.core.codec.StringEncoder;, +import org.springframework.core.convert.converter.Converter;, +import org.springframework.core.convert.support.MonoToCompletableFutureConverter;, +import org.springframework.core.convert.support.ReactorToRxJava1Converter;, +import org.springframework.format.Formatter;, +import org.springframework.format.FormatterRegistry;, +import org.springframework.format.support.DefaultFormattingConversionService;, +import org.springframework.format.support.FormattingConversionService;, +import org.springframework.http.MediaType;, +import org.springframework.http.codec.SseEventEncoder;, +	public FormattingConversionService mvcConversionService() {, +		FormattingConversionService service = new DefaultFormattingConversionService();, +	protected void addFormatters(FormatterRegistry registry) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/SimpleResultHandler.java, +import org.reactivestreams.Publisher;, +import org.springframework.core.convert.TypeDescriptor;, +	protected static final TypeDescriptor MONO_TYPE = TypeDescriptor.valueOf(Mono.class);, +, +	protected static final TypeDescriptor FLUX_TYPE = TypeDescriptor.valueOf(Flux.class);, +, +, +		TypeDescriptor source = new TypeDescriptor(result.getReturnTypeSource());, +		if (Publisher.class.isAssignableFrom(type.getRawClass()) ||, +				canConvert(source, MONO_TYPE) || canConvert(source, FLUX_TYPE)) {, +	private boolean canConvert(TypeDescriptor source, TypeDescriptor target) {, +		return getConversionService().canConvert(source, target);, +	}, +, +		Object value = optional.get();, +		if (Publisher.class.isAssignableFrom(result.getReturnType().getRawClass())) {, +			return Mono.from((Publisher<?>) value).then();, +		TypeDescriptor source = new TypeDescriptor(result.getReturnTypeSource());, +		return canConvert(source, MONO_TYPE) ?, +				((Mono<Void>) getConversionService().convert(value, source, MONO_TYPE)) :, +				((Flux<Void>) getConversionService().convert(value, source, FLUX_TYPE)).single();, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageConverterResultHandler.java]