[+++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/annotation/AspectProxyFactoryTests.java, +import static org.junit.Assert.*;, +import test.util.SerializationTestUtils;, +, +		ITestBean serializedProxy = (ITestBean) SerializationTestUtils.serializeAndDeserialize(proxy);, +		assertEquals(target.getAge() * multiple, serializedProxy.getAge());, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/annotation/AspectProxyFactoryTests.java, +import static org.junit.Assert.*;, +import test.util.SerializationTestUtils;, +, +		ITestBean serializedProxy = (ITestBean) SerializationTestUtils.serializeAndDeserialize(proxy);, +		assertEquals(target.getAge() * multiple, serializedProxy.getAge());, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +	 * The security context used for invoking the property methods, +	 */, +	private AccessControlContext acc;, +, +	/**, +	 * Set the security context used during the invocation of the wrapped instance methods., +	 * Can be null., +	 */, +	public void setSecurityContext(AccessControlContext acc) {, +		this.acc = acc;, +	}, +, +	/**, +	 * Return the security context used during the invocation of the wrapped instance methods., +	 * Can be null., +	 */, +	public AccessControlContext getSecurityContext() {, +		return this.acc;, +	}, +, +	/**, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/annotation/AspectProxyFactoryTests.java, +import static org.junit.Assert.*;, +import test.util.SerializationTestUtils;, +, +		ITestBean serializedProxy = (ITestBean) SerializationTestUtils.serializeAndDeserialize(proxy);, +		assertEquals(target.getAge() * multiple, serializedProxy.getAge());, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +	 * The security context used for invoking the property methods, +	 */, +	private AccessControlContext acc;, +, +	/**, +	 * Set the security context used during the invocation of the wrapped instance methods., +	 * Can be null., +	 */, +	public void setSecurityContext(AccessControlContext acc) {, +		this.acc = acc;, +	}, +, +	/**, +	 * Return the security context used during the invocation of the wrapped instance methods., +	 * Can be null., +	 */, +	public AccessControlContext getSecurityContext() {, +		return this.acc;, +	}, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/ObjectFactoryCreatingFactoryBean.java, + * Copyright 2002-2010 the original author or authors., +public class ObjectFactoryCreatingFactoryBean extends AbstractFactoryBean<ObjectFactory> {, +	protected ObjectFactory createInstance() {, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/annotation/AspectProxyFactoryTests.java, +import static org.junit.Assert.*;, +import test.util.SerializationTestUtils;, +, +		ITestBean serializedProxy = (ITestBean) SerializationTestUtils.serializeAndDeserialize(proxy);, +		assertEquals(target.getAge() * multiple, serializedProxy.getAge());, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +	 * The security context used for invoking the property methods, +	 */, +	private AccessControlContext acc;, +, +	/**, +	 * Set the security context used during the invocation of the wrapped instance methods., +	 * Can be null., +	 */, +	public void setSecurityContext(AccessControlContext acc) {, +		this.acc = acc;, +	}, +, +	/**, +	 * Return the security context used during the invocation of the wrapped instance methods., +	 * Can be null., +	 */, +	public AccessControlContext getSecurityContext() {, +		return this.acc;, +	}, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/ObjectFactoryCreatingFactoryBean.java, + * Copyright 2002-2010 the original author or authors., +public class ObjectFactoryCreatingFactoryBean extends AbstractFactoryBean<ObjectFactory> {, +	protected ObjectFactory createInstance() {, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/Scheduled.java]