[+++ b/build.gradle, +		"http://quartz-scheduler.org/api/2.1.7/",, +		testCompile(project(":spring-context")), +++ b/build.gradle, +		"http://quartz-scheduler.org/api/2.1.7/",, +		testCompile(project(":spring-context")), +++ b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/ClassPathJaxb2TypeScanner.java, + * Copyright 2002-2013 the original author or authors., + * @author Juergen Hoeller, + * @since 3.1.1, +	private static final TypeFilter[] JAXB2_TYPE_FILTERS = new TypeFilter[] {, +			new AnnotationTypeFilter(XmlRootElement.class, false), new AnnotationTypeFilter(XmlType.class, false),, +			new AnnotationTypeFilter(XmlSeeAlso.class, false), new AnnotationTypeFilter(XmlEnum.class, false)};, +, +, +	private final ResourcePatternResolver resourcePatternResolver;, +	public ClassPathJaxb2TypeScanner(ClassLoader classLoader, String... packagesToScan) {, +		this.resourcePatternResolver = new PathMatchingResourcePatternResolver(classLoader);, +	 * Scan the packages for classes marked with JAXB2 annotations., +	public Class<?>[] scanPackages() throws UncategorizedMappingException {, +			List<Class<?>> jaxb2Classes = new ArrayList<Class<?>>();, +			for (String packageToScan : this.packagesToScan) {, +				Resource[] resources = this.resourcePatternResolver.getResources(pattern);, +				MetadataReaderFactory metadataReaderFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver);, +						Class<?> jaxb2AnnotatedClass = this.resourcePatternResolver.getClassLoader().loadClass(className);, +			return jaxb2Classes.toArray(new Class<?>[jaxb2Classes.size()]);, +	protected boolean isJaxb2Class(MetadataReader reader, MetadataReaderFactory factory) throws IOException {, +		for (TypeFilter filter : JAXB2_TYPE_FILTERS) {, +++ b/build.gradle, +		"http://quartz-scheduler.org/api/2.1.7/",, +		testCompile(project(":spring-context")), +++ b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/ClassPathJaxb2TypeScanner.java, + * Copyright 2002-2013 the original author or authors., + * @author Juergen Hoeller, + * @since 3.1.1, +	private static final TypeFilter[] JAXB2_TYPE_FILTERS = new TypeFilter[] {, +			new AnnotationTypeFilter(XmlRootElement.class, false), new AnnotationTypeFilter(XmlType.class, false),, +			new AnnotationTypeFilter(XmlSeeAlso.class, false), new AnnotationTypeFilter(XmlEnum.class, false)};, +, +, +	private final ResourcePatternResolver resourcePatternResolver;, +	public ClassPathJaxb2TypeScanner(ClassLoader classLoader, String... packagesToScan) {, +		this.resourcePatternResolver = new PathMatchingResourcePatternResolver(classLoader);, +	 * Scan the packages for classes marked with JAXB2 annotations., +	public Class<?>[] scanPackages() throws UncategorizedMappingException {, +			List<Class<?>> jaxb2Classes = new ArrayList<Class<?>>();, +			for (String packageToScan : this.packagesToScan) {, +				Resource[] resources = this.resourcePatternResolver.getResources(pattern);, +				MetadataReaderFactory metadataReaderFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver);, +						Class<?> jaxb2AnnotatedClass = this.resourcePatternResolver.getClassLoader().loadClass(className);, +			return jaxb2Classes.toArray(new Class<?>[jaxb2Classes.size()]);, +	protected boolean isJaxb2Class(MetadataReader reader, MetadataReaderFactory factory) throws IOException {, +		for (TypeFilter filter : JAXB2_TYPE_FILTERS) {, +++ b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java, +public class Jaxb2Marshaller implements MimeMarshaller, MimeUnmarshaller, GenericMarshaller, GenericUnmarshaller,, +		BeanClassLoaderAware, InitializingBean {, +	 * Set multiple JAXB context paths. The given array of context paths gets, +	 * converted to a colon-delimited string, as supported by JAXB., +	 * <p>Setting either this property, {@link #setClassesToBeBound "classesToBeBound"}, +	 * or {@link #setPackagesToScan "packagesToScan"} is required., +	 * <p>Setting either this property, {@link #setContextPath "contextPath"}, +	 * or {@link #setPackagesToScan "packagesToScan"} is required., +	 * Set the packages to search for classes with JAXB2 annotations in the classpath., +	 * This is using a Spring-bases search and therefore analogous to Spring's component-scan, +	 * feature ({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})., +	 * <p>Setting either this property, {@link #setContextPath "contextPath"}, +	 * or {@link #setClassesToBeBound "classesToBeBound"} is required., +	public void afterPropertiesSet() throws Exception {, +		ClassPathJaxb2TypeScanner scanner = new ClassPathJaxb2TypeScanner(this.beanClassLoader, this.packagesToScan);, +		Class<?>[] jaxb2Classes = scanner.scanPackages();]