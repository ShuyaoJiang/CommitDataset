[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/WebSocketHttpRequestHandler.java, +	private final WebSocketHandler wsHandler;, +		this.wsHandler = decorateWebSocketHandler(webSocketHandler);, +	protected WebSocketHandler decorateWebSocketHandler(WebSocketHandler wsHandler) {, +		wsHandler = new ExceptionWebSocketHandlerDecorator(wsHandler);, +		return new LoggingWebSocketHandlerDecorator(wsHandler);, +		HandshakeInterceptorChain chain = new HandshakeInterceptorChain(this.interceptors, this.wsHandler);, +			this.handshakeHandler.doHandshake(request, response, this.wsHandler, attributes);, +			response.close();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/WebSocketHttpRequestHandler.java, +	private final WebSocketHandler wsHandler;, +		this.wsHandler = decorateWebSocketHandler(webSocketHandler);, +	protected WebSocketHandler decorateWebSocketHandler(WebSocketHandler wsHandler) {, +		wsHandler = new ExceptionWebSocketHandlerDecorator(wsHandler);, +		return new LoggingWebSocketHandlerDecorator(wsHandler);, +		HandshakeInterceptorChain chain = new HandshakeInterceptorChain(this.interceptors, this.wsHandler);, +			this.handshakeHandler.doHandshake(request, response, this.wsHandler, attributes);, +			response.close();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/SockJsHttpRequestHandler.java, +	private final WebSocketHandler wsHandler;, +	 * @param wsHandler the websocket handler, +	public SockJsHttpRequestHandler(SockJsService sockJsService, WebSocketHandler wsHandler) {, +		Assert.notNull(wsHandler, "webSocketHandler must not be null");, +		this.wsHandler = decorateWebSocketHandler(wsHandler);, +	protected WebSocketHandler decorateWebSocketHandler(WebSocketHandler wsHandler) {, +		wsHandler = new ExceptionWebSocketHandlerDecorator(wsHandler);, +		return new LoggingWebSocketHandlerDecorator(wsHandler);, +			this.sockJsService.handleRequest(request, response, this.wsHandler);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/WebSocketHttpRequestHandler.java, +	private final WebSocketHandler wsHandler;, +		this.wsHandler = decorateWebSocketHandler(webSocketHandler);, +	protected WebSocketHandler decorateWebSocketHandler(WebSocketHandler wsHandler) {, +		wsHandler = new ExceptionWebSocketHandlerDecorator(wsHandler);, +		return new LoggingWebSocketHandlerDecorator(wsHandler);, +		HandshakeInterceptorChain chain = new HandshakeInterceptorChain(this.interceptors, this.wsHandler);, +			this.handshakeHandler.doHandshake(request, response, this.wsHandler, attributes);, +			response.close();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/SockJsHttpRequestHandler.java, +	private final WebSocketHandler wsHandler;, +	 * @param wsHandler the websocket handler, +	public SockJsHttpRequestHandler(SockJsService sockJsService, WebSocketHandler wsHandler) {, +		Assert.notNull(wsHandler, "webSocketHandler must not be null");, +		this.wsHandler = decorateWebSocketHandler(wsHandler);, +	protected WebSocketHandler decorateWebSocketHandler(WebSocketHandler wsHandler) {, +		wsHandler = new ExceptionWebSocketHandlerDecorator(wsHandler);, +		return new LoggingWebSocketHandlerDecorator(wsHandler);, +			this.sockJsService.handleRequest(request, response, this.wsHandler);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java, +			response.close();]