[+++ b/spring-context-support/src/test/java/org/springframework/scheduling/quartz/QuartzSupportTests.java, +, +, +	public void schedulerFactoryBeanWithApplicationContext() throws Exception {, +	public void schedulerWithTaskExecutor() throws Exception {, +		jobDetail.setDurability(true);, +	@Test(expected = IllegalArgumentException.class), +	@SuppressWarnings({ "unchecked", "rawtypes" }), +	public void jobDetailWithRunnableInsteadOfJob() {, +	public void schedulerWithQuartzJobBean() throws Exception {, +		jobDetail.setDurability(true);, +	public void schedulerWithSpringBeanJobFactory() throws Exception {, +		jobDetail.setDurability(true);, +	public void schedulerWithSpringBeanJobFactoryAndParamMismatchNotIgnored() throws Exception {, +		jobDetail.setDurability(true);, +	public void schedulerWithSpringBeanJobFactoryAndQuartzJobBean() throws Exception {, +		jobDetail.setDurability(true);, +	public void schedulerWithSpringBeanJobFactoryAndJobSchedulingData() throws Exception {, +	public void multipleSchedulers() throws Exception {, +		ClassPathXmlApplicationContext ctx = context("multipleSchedulers.xml");, +	public void twoAnonymousMethodInvokingJobDetailFactoryBeans() throws Exception {, +		ClassPathXmlApplicationContext ctx = context("multipleAnonymousMethodInvokingJobDetailFB.xml");, +	public void schedulerAccessorBean() throws Exception {, +		ClassPathXmlApplicationContext ctx = context("schedulerAccessorBean.xml");, +	public void schedulerAutoStartsOnContextRefreshedEventByDefault() throws Exception {, +	public void schedulerAutoStartupFalse() throws Exception {, +	public void schedulerRepositoryExposure() throws Exception {, +		ClassPathXmlApplicationContext ctx = context("schedulerRepositoryExposure.xml");, +	/**, +	 * SPR-6038: detect HSQL and stop illegal locks being taken., +	 */, +	public void schedulerWithHsqlDataSource() throws Exception {, +		ClassPathXmlApplicationContext ctx = context("databasePersistence.xml");, +	private ClassPathXmlApplicationContext context(String path) {, +		return new ClassPathXmlApplicationContext(path, getClass());, +	}, +, +			/* no-op */, +++ b/spring-context-support/src/test/java/org/springframework/scheduling/quartz/QuartzSupportTests.java, +, +, +	public void schedulerFactoryBeanWithApplicationContext() throws Exception {, +	public void schedulerWithTaskExecutor() throws Exception {, +		jobDetail.setDurability(true);, +	@Test(expected = IllegalArgumentException.class), +	@SuppressWarnings({ "unchecked", "rawtypes" }), +	public void jobDetailWithRunnableInsteadOfJob() {, +	public void schedulerWithQuartzJobBean() throws Exception {, +		jobDetail.setDurability(true);, +	public void schedulerWithSpringBeanJobFactory() throws Exception {, +		jobDetail.setDurability(true);, +	public void schedulerWithSpringBeanJobFactoryAndParamMismatchNotIgnored() throws Exception {, +		jobDetail.setDurability(true);, +	public void schedulerWithSpringBeanJobFactoryAndQuartzJobBean() throws Exception {, +		jobDetail.setDurability(true);, +	public void schedulerWithSpringBeanJobFactoryAndJobSchedulingData() throws Exception {, +	public void multipleSchedulers() throws Exception {, +		ClassPathXmlApplicationContext ctx = context("multipleSchedulers.xml");, +	public void twoAnonymousMethodInvokingJobDetailFactoryBeans() throws Exception {, +		ClassPathXmlApplicationContext ctx = context("multipleAnonymousMethodInvokingJobDetailFB.xml");, +	public void schedulerAccessorBean() throws Exception {, +		ClassPathXmlApplicationContext ctx = context("schedulerAccessorBean.xml");, +	public void schedulerAutoStartsOnContextRefreshedEventByDefault() throws Exception {, +	public void schedulerAutoStartupFalse() throws Exception {, +	public void schedulerRepositoryExposure() throws Exception {, +		ClassPathXmlApplicationContext ctx = context("schedulerRepositoryExposure.xml");, +	/**, +	 * SPR-6038: detect HSQL and stop illegal locks being taken., +	 */, +	public void schedulerWithHsqlDataSource() throws Exception {, +		ClassPathXmlApplicationContext ctx = context("databasePersistence.xml");, +	private ClassPathXmlApplicationContext context(String path) {, +		return new ClassPathXmlApplicationContext(path, getClass());, +	}, +, +			/* no-op */, +++ b/spring-context-support/src/test/resources/org/springframework/scheduling/quartz/databasePersistence.xml, +<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +	xmlns:jdbc="http://www.springframework.org/schema/jdbc", +	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd, +	<bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">, +				<property name="jobClass" value="org.springframework.scheduling.quartz.QuartzSupportTests$DummyJob" />, +				<property name="durability" value="true" />, +++ b/spring-context-support/src/test/java/org/springframework/scheduling/quartz/QuartzSupportTests.java, +, +, +	public void schedulerFactoryBeanWithApplicationContext() throws Exception {, +	public void schedulerWithTaskExecutor() throws Exception {, +		jobDetail.setDurability(true);, +	@Test(expected = IllegalArgumentException.class), +	@SuppressWarnings({ "unchecked", "rawtypes" }), +	public void jobDetailWithRunnableInsteadOfJob() {, +	public void schedulerWithQuartzJobBean() throws Exception {, +		jobDetail.setDurability(true);, +	public void schedulerWithSpringBeanJobFactory() throws Exception {, +		jobDetail.setDurability(true);, +	public void schedulerWithSpringBeanJobFactoryAndParamMismatchNotIgnored() throws Exception {, +		jobDetail.setDurability(true);, +	public void schedulerWithSpringBeanJobFactoryAndQuartzJobBean() throws Exception {, +		jobDetail.setDurability(true);]