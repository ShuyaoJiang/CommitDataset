[+++ b/src/docs/asciidoc/data-access.adoc, +examples. In this case, you need to define a Hibernate `LocalSessionFactoryBean`,, +which your application code will use to obtain Hibernate `Session` instances., +Note that the Hibernate team does not maintain any versions prior to 5.1 anymore and, +is likely to focus on 5.3+ exclusively soon., +`JndiObjectFactoryBean` / `<jee:jndi-lookup>` to retrieve and expose it., +However, that is typically not common outside of an EJB context., +, +[NOTE], +====, +Spring also provides a `LocalSessionFactoryBuilder` variant, seamlessly integrating, +with `@Bean` style configuration and programmatic setup (no `FactoryBean` involved)., +, +Both `LocalSessionFactoryBean` and `LocalSessionFactoryBuilder` support background, +bootstrapping, with Hibernate initialization running in parallel to the application, +bootstrap thread on a given bootstrap executor (e.g. a `SimpleAsyncTaskExecutor`)., +On `LocalSessionFactoryBean`, this is available through the "bootstrapExecutor", +property; on the programmatic `LocalSessionFactoryBuilder`, there is an overloaded, +`buildSessionFactory` method which takes a bootstrap executor argument., +, +As of Spring Framework 5.1, such a native Hibernate setup can also expose a JPA, +`EntityManagerFactory` for standard JPA interaction next to native Hibernate access., +See <<orm-jpa-hibernate,Native Hibernate setup for JPA>> for details., +====, +[[orm-jpa-setup-multiple]], +[[orm-jpa-setup-background]], +===== Background bootstrapping, +, +`LocalContainerEntityManagerFactoryBean` supports background bootstrapping through, +the `bootstrapExecutor` property:, +, +[source,xml,indent=0], +[subs="verbatim,quotes"], +----, +	<bean id="emf" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">, +		<property name="bootstrapExecutor">, +			<bean class="org.springframework.core.task.SimpleAsyncTaskExecutor"/>, +		</property>, +	</bean>, +----, +, +The actual JPA provider bootstrapping will be handed off to the specified executor then,, +running in parallel to the application bootstrap thread. The exposed `EntityManagerFactory`, +proxy can be injected into other application components and is even able to respond, +`EntityManagerFactoryInfo` configuration inspection. However, once the actual JPA provider, +is being accessed by other components, e.g. calling `createEntityManager`, those calls, +will block until the background bootstrapping has completed. In particular, when using, +Spring Data JPA, make sure to set up deferred bootstrapping for its repositories as well., +, +[NOTE], +====, +`LocalSessionFactoryBean` and `LocalSessionFactoryBuilder` support background, +bootstrapping, just like the JPA `LocalContainerEntityManagerFactoryBean`., +See <<orm-jpa-setup-background,Background bootstrapping>> for an introduction., +, +On `LocalSessionFactoryBean`, this is available through the "bootstrapExecutor", +property; on the programmatic `LocalSessionFactoryBuilder`, there is an overloaded, +`buildSessionFactory` method which takes a bootstrap executor argument., +====, +]