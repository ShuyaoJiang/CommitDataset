[+++ b/spring-framework-reference/src/aop.xml, +      section) <literal>-javaagent:path/to/spring-instrument.jar</literal> (previously named, +        <programlisting>java -javaagent:C:/projects/foo/lib/global/spring-instrument.jar foo.Main</programlisting>, +        in the <filename class="libraryfile">spring-instrument.jar</filename>, +		that, +            <para><filename class="libraryfile">spring-aop.jar</filename> (version, +            2.5 or later, plus all mandatory dependencies)</para>, +            class="libraryfile">spring-instrument.jar</filename></para>, +                -javaagent:path/to/spring-instrument.jar)</literal></emphasis></para></entry>, +          <literal>-javaagent:path/to/spring-instrument.jar</literal> option., +          Spring's <literal>spring-instrument-tomcat.jar</literal> needs to be, +          <literal>-javaagent:path/to/spring-instrument.jar</literal>.</para>, +++ b/spring-framework-reference/src/aop.xml, +      section) <literal>-javaagent:path/to/spring-instrument.jar</literal> (previously named, +        <programlisting>java -javaagent:C:/projects/foo/lib/global/spring-instrument.jar foo.Main</programlisting>, +        in the <filename class="libraryfile">spring-instrument.jar</filename>, +		that, +            <para><filename class="libraryfile">spring-aop.jar</filename> (version, +            2.5 or later, plus all mandatory dependencies)</para>, +            class="libraryfile">spring-instrument.jar</filename></para>, +                -javaagent:path/to/spring-instrument.jar)</literal></emphasis></para></entry>, +          <literal>-javaagent:path/to/spring-instrument.jar</literal> option., +          Spring's <literal>spring-instrument-tomcat.jar</literal> needs to be, +          <literal>-javaagent:path/to/spring-instrument.jar</literal>.</para>, +++ b/spring-framework-reference/src/overview.xml, +    component addresses this concern by providing a formalized means of, +    composing disparate components into a fully working application ready for, +    use. <!--Preceding sentence sounds like a description of what patterns do (and Spring uses patterns). Distinguish from patterns.-->The, +      clean separation between domain model code and web forms, and integrates, +      with all the other features of the Spring Framework.<!--MVC allows you to use *all other features*? (Or just all other features in Web layer?) How do you mean? Does this need elaboration? , +      classes for integrating a classic Struts web tier within a Spring, +      application. Note that this support is now deprecated as of Spring 3.0., +      Consider migrating your application to Struts 2.0 and its Spring, +      integration or to a Spring MVC solution.</para>, +    <para>The Spring Framework also provides an <link linkend="ejb">access and, +    abstraction layer</link> for Enterprise JavaBeans, enabling you to reuse, +    your existing POJOs and wrap them in stateless session beans for use in, +    scalable, fail-safe web applications that might need declarative, +, +    <section>, +      <title>Dependency Management and Naming Conventions</title>, +, +      <para>Dependency management and dependency injection are different, +      things. To get those nice features of Spring into your application (like, +      dependency injection) you need to assemble all the libraries needed (jar, +      files) and get them onto your classpath at runtime, and possibly at, +      compile time. These dependencies are not virtual components that are, +      injected, but physical resources in a file system (typically). The, +      process of dependency management involves locating those resources,, +      storing them and adding them to classpaths. Dependencies can be direct, +      (e.g. my application depends on Spring at runtime), or indirect (e.g. my, +      application depends on <code>commons-dbcp</code> which depends on, +      <code>commons-pool</code>). The indirect dependencies are also known as, +      "transitive" and it is those dependencies that are hardest to identify, +      and manage.</para>, +, +      <para>If you are going to use Spring you need to get a copy of the jar, +      libraries that comprise the pieces of Spring that you need. To make this, +      easier Spring is packaged as a set of modules that separate the, +      dependencies as much as possible, so for example if you don't want to, +      write a web application you don't need the spring-web modules. To refer, +      to Spring library modules in this guide we use a shorthand naming, +      convention <code>spring-*</code> or <code>spring-*.jar,</code> where "*", +      represents shot name for the module (e.g. <code>spring-core</code>,, +      <code>spring-webmvc</code>, <code>spring-jms</code>, etc.). The actual, +      jar file name that you use may be in this form (see below) or it may, +      not, and normally it also has a version number in the file name (e.g., +      <code>spring-core-3.0.0.RELEASE.jar</code>).</para>, +, +      <para>In general, Spring publishes its artifacts to four different, +      places:<itemizedlist>, +          <listitem>, +            <para>On the community download site <ulink, +            url="http://www.springsource.org/downloads/community">http://www.springsource.org/downloads/community</ulink>., +            Here you find all the Spring jars bundled together into a zip file, +            for easy download. The names of the jars here since version 3.0, +            are in the form, +            <code>org.springframework.*-&lt;version&gt;.jar</code>.</para>, +          </listitem>, +, +          <listitem>, +            <para>Maven Central, which is the default repository that Maven, +            queries, and does not require any special configuration to use., +            Many of the common libraries that Spring depends on also are, +            available from Maven Central and a large section of the Spring, +            community uses Maven for dependency management, so this is, +            convenient for them. The names of the jars here are in the form, +            <code>spring-*-&lt;version&gt;.jar</code> and the Maven groupId is, +            <code>org.springframework</code>.</para>, +          </listitem>, +, +          <listitem>, +            <para>The Enterprise Bundle Repository (EBR), which is run by, +            SpringSource and also hosts all the libraries that integrate with, +            Spring. Both Maven and Ivy repositories are available here for all, +            Spring jars and their dependencies, plus a large number of other, +            common libraries that people use in applications with Spring. Both, +            full releases and also milestones and development snapshots are, +            deployed here. The names of the jar files are in the same form as, +            the community download]