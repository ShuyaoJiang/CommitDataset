[+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableInterceptorChain.java, +import java.util.concurrent.Future;, +	private volatile Future<?> taskFuture;, +, +, +	public void setTaskFuture(Future<?> taskFuture) {, +		this.taskFuture = taskFuture;, +	}, +, +, +		cancelTask();, +	private void cancelTask() {, +		Future<?> future = this.taskFuture;, +		if (future != null) {, +			try {, +				future.cancel(true);, +			}, +			catch (Throwable ex) {, +				// Ignore, +			}, +		}, +	}, +, +		cancelTask();, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableInterceptorChain.java, +import java.util.concurrent.Future;, +	private volatile Future<?> taskFuture;, +, +, +	public void setTaskFuture(Future<?> taskFuture) {, +		this.taskFuture = taskFuture;, +	}, +, +, +		cancelTask();, +	private void cancelTask() {, +		Future<?> future = this.taskFuture;, +		if (future != null) {, +			try {, +				future.cancel(true);, +			}, +			catch (Throwable ex) {, +				// Ignore, +			}, +		}, +	}, +, +		cancelTask();, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java, +import java.util.concurrent.Future;, +			Future<?> future = this.taskExecutor.submit(() -> {, +			interceptorChain.setTaskFuture(future);, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableInterceptorChain.java, +import java.util.concurrent.Future;, +	private volatile Future<?> taskFuture;, +, +, +	public void setTaskFuture(Future<?> taskFuture) {, +		this.taskFuture = taskFuture;, +	}, +, +, +		cancelTask();, +	private void cancelTask() {, +		Future<?> future = this.taskFuture;, +		if (future != null) {, +			try {, +				future.cancel(true);, +			}, +			catch (Throwable ex) {, +				// Ignore, +			}, +		}, +	}, +, +		cancelTask();, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java, +import java.util.concurrent.Future;, +			Future<?> future = this.taskExecutor.submit(() -> {, +			interceptorChain.setTaskFuture(future);, +++ b/spring-web/src/test/java/org/springframework/web/context/request/async/WebAsyncManagerTimeoutTests.java, +import java.util.concurrent.Future;, +import static org.mockito.ArgumentMatchers.any;, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +import static org.mockito.Mockito.when;, +	@SuppressWarnings("unchecked"), +	@Test, +	public void startCallableProcessingTimeoutAndCheckThreadInterrupted() throws Exception {, +, +		StubCallable callable = new StubCallable();, +		Future future = mock(Future.class);, +, +		AsyncTaskExecutor executor = mock(AsyncTaskExecutor.class);, +		when(executor.submit(any(Runnable.class))).thenReturn(future);, +, +		this.asyncManager.setTaskExecutor(executor);, +		this.asyncManager.startCallableProcessing(callable);, +, +		this.asyncWebRequest.onTimeout(ASYNC_EVENT);, +]