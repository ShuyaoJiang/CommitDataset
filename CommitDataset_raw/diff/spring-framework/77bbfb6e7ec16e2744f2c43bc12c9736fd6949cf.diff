[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ViewResolversBeanDefinitionParser.java, +		if (element.hasAttribute("order")) {, +			compositeResolverBeanDef.getPropertyValues().add("order", element.getAttribute("order"));, +		}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ViewResolversBeanDefinitionParser.java, +		if (element.hasAttribute("order")) {, +			compositeResolverBeanDef.getPropertyValues().add("order", element.getAttribute("order"));, +		}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ViewResolverRegistry.java, +	private Integer order;, +		this.order = (this.order == null ? Ordered.HIGHEST_PRECEDENCE : this.order);, +	/**, +	 * ViewResolver's registered through this registry are encapsulated in an, +	 * instance of {@link org.springframework.web.servlet.view.ViewResolverComposite, +	 * ViewResolverComposite} and follow the order of registration., +	 * This property determines the order of the ViewResolverComposite itself, +	 * relative to any additional ViewResolver's (not registered here) present in, +	 * the Spring configuration, +	 * <p>By default this property is not set, which means the resolver is ordered, +	 * at {@link Ordered#LOWEST_PRECEDENCE} unless content negotiation is enabled, +	 * in which case the order (if not set explicitly) is changed to, +	 * {@link Ordered#HIGHEST_PRECEDENCE}., +	 */, +	public void order(int order) {, +		this.order = order;, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ViewResolversBeanDefinitionParser.java, +		if (element.hasAttribute("order")) {, +			compositeResolverBeanDef.getPropertyValues().add("order", element.getAttribute("order"));, +		}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ViewResolverRegistry.java, +	private Integer order;, +		this.order = (this.order == null ? Ordered.HIGHEST_PRECEDENCE : this.order);, +	/**, +	 * ViewResolver's registered through this registry are encapsulated in an, +	 * instance of {@link org.springframework.web.servlet.view.ViewResolverComposite, +	 * ViewResolverComposite} and follow the order of registration., +	 * This property determines the order of the ViewResolverComposite itself, +	 * relative to any additional ViewResolver's (not registered here) present in, +	 * the Spring configuration, +	 * <p>By default this property is not set, which means the resolver is ordered, +	 * at {@link Ordered#LOWEST_PRECEDENCE} unless content negotiation is enabled, +	 * in which case the order (if not set explicitly) is changed to, +	 * {@link Ordered#HIGHEST_PRECEDENCE}., +	 */, +	public void order(int order) {, +		this.order = order;, +	}, +, +++ b/spring-webmvc/src/main/resources/org/springframework/web/servlet/config/spring-mvc-4.1.xsd, +			<xsd:attribute name="order" type="xsd:int">, +				<xsd:annotation>, +					<xsd:documentation><![CDATA[, +	ViewResolver's registered through this element are encapsulated in an, +	instance of org.springframework.web.servlet.view.ViewResolverComposite and, +	follow the order of registration. This attribute determines the order of the, +	ViewResolverComposite itself relative to any additional ViewResolver's, +	(not registered through this element) present in the Spring configuration, +	By default this property is not set, which means the resolver is ordered at, +	Ordered.LOWEST_PRECEDENCE unless content negotiation is enabled in which case, +	the order (if not set explicitly) is changed to Ordered.HIGHEST_PRECEDENCE., +					]]></xsd:documentation>, +				</xsd:annotation>, +			</xsd:attribute>, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ViewResolversBeanDefinitionParser.java, +		if (element.hasAttribute("order")) {, +			compositeResolverBeanDef.getPropertyValues().add("order", element.getAttribute("order"));, +		}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ViewResolverRegistry.java, +	private Integer order;, +		this.order = (this.order == null ? Ordered.HIGHEST_PRECEDENCE : this.order);, +	/**, +	 * ViewResolver's registered through this registry are encapsulated in an, +	 * instance of {@link org.springframework.web.servlet.view.ViewResolverComposite, +	 * ViewResolverComposite} and follow the order of registration., +	 * This property determines the order of the ViewResolverComposite itself, +	 * relative to any additional ViewResolver's (not registered here) present in, +	 * the Spring configuration, +	 * <p>By default this property is not set, which means the resolver is ordered, +	 * at {@link Ordered#LOWEST_PRECEDENCE} unless content negotiation is enabled, +	 * in which case the order (if not set explicitly) is changed to, +	 * {@link Ordered#HIGHEST_PRECEDENCE}., +	 */, +	public void order(int order) {, +		this.order = order;, +	}, +, +++ b/spring-webmvc/src/main/resources/org/springframework/web/servlet/config/spring-mvc-4.1.xsd, +			<xsd:attribute name="order" type="xsd:int">, +				<xsd:annotation>, +					<xsd:documentation><![CDATA[, +	ViewResolver's registered through this element are encapsulated in an, +	instance of org.springframework.web.servlet.view.ViewResolverComposite and, +	follow the order of registration. This attribute determines the order of the, +	ViewResolverComposite itself relative to any additional ViewResolver's]