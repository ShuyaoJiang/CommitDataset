[+++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java, + * @author Kazuki Shimizu, +	 * @see #initBeanPropertyAccess(), +	 * @see org.springframework.beans.BeanWrapper#setAutoGrowCollectionLimit, +		Assert.state(this.bindingResult == null,, +				"DataBinder is already initialized - call setAutoGrowCollectionLimit before other configuration methods");, +++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java, + * @author Kazuki Shimizu, +	 * @see #initBeanPropertyAccess(), +	 * @see org.springframework.beans.BeanWrapper#setAutoGrowCollectionLimit, +		Assert.state(this.bindingResult == null,, +				"DataBinder is already initialized - call setAutoGrowCollectionLimit before other configuration methods");, +++ b/spring-context/src/test/java/org/springframework/validation/DataBinderTests.java, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, + * @author Kazuki Shimizu, +	@Rule, +	public ExpectedException expectedException = ExpectedException.none();, +, +	@Test // SPR-14888, +	public void testSetAutoGrowCollectionLimit() {, +		BeanWithIntegerList tb = new BeanWithIntegerList();, +		DataBinder binder = new DataBinder(tb);, +		binder.setAutoGrowCollectionLimit(257);, +		MutablePropertyValues pvs = new MutablePropertyValues();, +		pvs.add("integerList[256]", "1");, +, +		binder.bind(pvs);, +		assertEquals(257, tb.getIntegerList().size());, +		assertEquals(Integer.valueOf(1), tb.getIntegerList().get(256));, +		assertEquals(Integer.valueOf(1), binder.getBindingResult().getFieldValue("integerList[256]"));, +	}, +, +	@Test // SPR-14888, +	public void testSetAutoGrowCollectionLimitAfterInitialization() {, +, +		expectedException.expect(IllegalStateException.class);, +		expectedException.expectMessage("DataBinder is already initialized - call setAutoGrowCollectionLimit before other configuration methods");, +, +		DataBinder binder = new DataBinder(new BeanWithIntegerList());, +		binder.registerCustomEditor(String.class, new StringTrimmerEditor(true));, +		binder.setAutoGrowCollectionLimit(257);, +	}]