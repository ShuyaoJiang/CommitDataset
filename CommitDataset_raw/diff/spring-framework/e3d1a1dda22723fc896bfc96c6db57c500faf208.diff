[+++ b/spring-context/src/main/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessor.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.aop.TargetSource;, +import org.springframework.aop.framework.ProxyFactory;, +	 * Obtain a lazily resolving resource proxy for the given name and type,, +	 * delegating to {@link #getResource} on demand once a method call comes in., +	 * @param element the descriptor for the annotated field/method, +	 * @param requestingBeanName the name of the requesting bean, +	 * @return the resource object (never {@code null}), +	 * @since 4.2, +	 * @see #getResource, +	 * @see Lazy, +	 */, +	protected Object buildLazyResourceProxy(final LookupElement element, final String requestingBeanName) {, +		TargetSource ts = new TargetSource() {, +			@Override, +			public Class<?> getTargetClass() {, +				return element.lookupType;, +			}, +			@Override, +			public boolean isStatic() {, +				return false;, +			}, +			@Override, +			public Object getTarget() {, +				return getResource(element, requestingBeanName);, +			}, +			@Override, +			public void releaseTarget(Object target) {, +			}, +		};, +		ProxyFactory pf = new ProxyFactory();, +		pf.setTargetSource(ts);, +		if (element.lookupType.isInterface()) {, +			pf.addInterface(element.lookupType);, +		}, +		ClassLoader classLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?, +				((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() : null);, +		return pf.getProxy(classLoader);, +	}, +, +	/**, +		private final boolean lazyLookup;, +, +			Lazy lazy = ae.getAnnotation(Lazy.class);, +			this.lazyLookup = (lazy != null && lazy.value());, +			return (this.lazyLookup ? buildLazyResourceProxy(this, requestingBeanName) :, +					getResource(this, requestingBeanName));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessor.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.aop.TargetSource;, +import org.springframework.aop.framework.ProxyFactory;, +	 * Obtain a lazily resolving resource proxy for the given name and type,, +	 * delegating to {@link #getResource} on demand once a method call comes in., +	 * @param element the descriptor for the annotated field/method, +	 * @param requestingBeanName the name of the requesting bean, +	 * @return the resource object (never {@code null}), +	 * @since 4.2, +	 * @see #getResource, +	 * @see Lazy, +	 */, +	protected Object buildLazyResourceProxy(final LookupElement element, final String requestingBeanName) {, +		TargetSource ts = new TargetSource() {, +			@Override, +			public Class<?> getTargetClass() {, +				return element.lookupType;, +			}, +			@Override, +			public boolean isStatic() {, +				return false;, +			}, +			@Override, +			public Object getTarget() {, +				return getResource(element, requestingBeanName);, +			}, +			@Override, +			public void releaseTarget(Object target) {, +			}, +		};, +		ProxyFactory pf = new ProxyFactory();, +		pf.setTargetSource(ts);, +		if (element.lookupType.isInterface()) {, +			pf.addInterface(element.lookupType);, +		}, +		ClassLoader classLoader = (this.beanFactory instanceof ConfigurableBeanFactory ?, +				((ConfigurableBeanFactory) this.beanFactory).getBeanClassLoader() : null);, +		return pf.getProxy(classLoader);, +	}, +, +	/**, +		private final boolean lazyLookup;, +, +			Lazy lazy = ae.getAnnotation(Lazy.class);, +			this.lazyLookup = (lazy != null && lazy.value());, +			return (this.lazyLookup ? buildLazyResourceProxy(this, requestingBeanName) :, +					getResource(this, requestingBeanName));, +++ b/spring-context/src/test/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2015 the original author or authors., +	@Test, +	public void testLazyResolutionWithResourceField() {]