[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/MessageMapping.java, + * </ul>, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/MessageMapping.java, + * </ul>, +++ b/src/asciidoc/index.adoc, +==== Overview of STOMP, +channel named `"brokerChannel"` used for sending messages to the broker, +from within the application. The new message is sent to the same destination, +as that of the client message but with the default prefix "/topic", +(`@SendTo` can be used for any other target destination):, +[[websocket-stomp-handle-annotations]], +===== Annotation-based Message Handling, +The `@MessageMapping` annotation is supported on methods of `@Controller`-annotated classes., +It can be used for mapping methods to path-like message destinations. It is also, +possible to combine with a type-level `@MessageMapping` for expressing shared, +mappings across all annotated methods within a controller., +, +Destination mappings can contain Ant-style patterns (e.g. "/foo*", "/foo/**"), +and template variables (e.g. "/foo/{id}"), which can then be accessed via, +`@DestinationVariable` method arguments. This should be familiar to Spring MVC, +users, in fact the same `AntPathMatcher` is used for matching destinations based, +on patterns and for extracting template variables., +, +The following method arguments are supported for `@MessageMapping` methods:, +, +* `Message` method argument to get access to the complete message being processed., +* `@Payload`-annotated argument for access to the payload of a message, converted with, +a `org.springframework.messaging.converter.MessageConverter`., +The presence of the annotation is not required since it is assumed by default., +* `@Header`-annotated arguments for access to a specific header value along with, +type conversion using an `org.springframework.core.convert.converter.Converter`, +if necessary., +* `@Headers`-annotated method argument that must also be assignable to `java.util.Map`, +for access to all headers in the message, +* `MessageHeaders` method argument for getting access to a map of all headers, +* `MessageHeaderAccessor`, `SimpMessageHeaderAccessor`, or `StompHeaderAccessor`, +for access to headers via typed accessor methods., +* `@DestinationVariable`-annotated arguments for access to template, +variables extracted from the message destination. Values will be converted to, +the declared method argument type as necessary., +* `java.security.Principal` method arguments reflecting the user logged in at, +the time of the WebSocket HTTP handshake., +, +The return value from an `@MessageMapping` method is converted with a, +`org.springframework.messaging.converter.MessageConverter` and used as the body, +of a new message that is then sent, by default, to the `"brokerChannel"` with, +the same destination as the client message but using the prefix "/topic" by, +default. An `@SendTo` message level annotation can be used to specify any, +other destination instead., +, +An `@SubscribeMapping` annotation can also be used to map subscription requests, +to `@Controller` methods. It is supported on the method level but can also be, +combined with a type level `@MessageMapping` annotation that expresses shared, +mappings across all message handling methods within the same controller., +, +By default the return value from an `@SubscribeMapping` method is sent as a, +message directly back to the connected client and does not pass through the, +broker. This useful for implementing request-reply message interactions for, +example to fetch application data when the application UI is being initialized., +Or alternatively an `@SubscribeMapping` method can be annotated with `@SendTo`, +in which case the resulting message is sent to the `"brokerChannel"` using, +the specified target destination., +, +[[websocket-stomp-handle-send]], +===== Sending Messages From Anywhere, +, +What if you wanted to send messages to connected clients from any part of the, +application? Any application component can send messages to the `"brokerChannel"`., +The easist way to do that is to have a `SimpMessagingTemplate` injected and, +use it to send messages. Typically it should be easy to have it injected by, +type, for example:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Controller, +	public class GreetingController {, +, +		private SimpMessagingTemplate template;, +, +		@Autowired, +		public GreetingController(SimpMessagingTemplate template) {, +			this.template = template;, +		}, +, +		@RequestMapping(value="/greetings", method=POST), +		public void greet(String greeting) {, +			String text = "[" + getTimestamp() + "]:" + greeting;, +			this.template.convertAndSend("/topic/greetings", text);, +		}, +, +	}, +----, +, +But it can also be qualified by its name "brokerMessagingTemplate" if another, +bean of the same type exists., +, +[[websocket-stomp-handle-simple-broker]], +===== Simple Message Broker, +]