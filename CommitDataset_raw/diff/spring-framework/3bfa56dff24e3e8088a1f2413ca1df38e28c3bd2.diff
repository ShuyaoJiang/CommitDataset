[+++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2Tokenizer.java, +	 * Tokenize the given {@code Flux<DataBuffer>} into {@code Flux<TokenBuffer>}., +, +			JsonParser parser = jsonFactory.createNonBlockingByteArrayParser();, +			Jackson2Tokenizer tokenizer = new Jackson2Tokenizer(parser, tokenizeArrayElements);, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2Tokenizer.java, +	 * Tokenize the given {@code Flux<DataBuffer>} into {@code Flux<TokenBuffer>}., +, +			JsonParser parser = jsonFactory.createNonBlockingByteArrayParser();, +			Jackson2Tokenizer tokenizer = new Jackson2Tokenizer(parser, tokenizeArrayElements);, +++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2TokenizerTests.java, + * @author Rossen Stoyanchev, +, +	public void createParser() {, +		this.jsonFactory = new JsonFactory();, +		this.objectMapper = new ObjectMapper(this.jsonFactory);, +				singletonList("[" +, +						"{\"foo\": \"foofoo\", \"bar\": \"barbar\"}," +, +						"{\"foo\": \"foofoofoo\", \"bar\": \"barbarbar\"}]"),, +				singletonList("[" +, +						"{\"foo\": \"foofoo\", \"bar\": \"barbar\"}," +, +						"{\"foo\": \"foofoofoo\", \"bar\": \"barbarbar\"}]"), false);, +				asList("[" +, +						"{\"foo\": \"foofoo\", \"bar\"", ": \"barbar\"}," +, +						"{\"foo\": \"foofoofoo\", \"bar\": \"barbarbar\"}]"),, +				singletonList("[" +, +						"{\"foo\": \"foofoo\", \"bar\": \"barbar\"}," +, +						"{\"foo\": \"foofoofoo\", \"bar\": \"barbarbar\"}]"), false);, +						"{\"id\":1,\"name\":\"Robert\"}", ",",, +						"{\"id\":2,\"name\":\"Raide\"}", ",",, +						"{\"id\":3,\"name\":\"Ford\"}", "]"),, +				singletonList("[" +, +						"{\"id\":1,\"name\":\"Robert\"}," +, +						"{\"id\":2,\"name\":\"Raide\"}," +, +						"{\"id\":3,\"name\":\"Ford\"}]"), false);, +		testTokenize(asList("\"foo", "bar\""),singletonList("\"foobar\""), false);, +		testTokenize(asList("12", "34"),singletonList("1234"), false);, +		testTokenize(asList("12.", "34"),singletonList("12.34"), false);, +				asList("{\"foo\": \"foofoo\"", ", \"bar\": \"barbar\"}"),, +				singletonList("[" +, +						"{\"foo\": \"foofoo\", \"bar\": \"barbar\"}," +, +						"{\"foo\": \"foofoofoo\", \"bar\": \"barbarbar\"}]"),, +				asList(, +						"{\"foo\": \"foofoo\", \"bar\": \"barbar\"}",, +				asList("{\"foo\": \"bar\"}", "{\"foo\": \"baz\"}"), true);, +						"{\"id\":\"2\",\"start\":[-999999999,1,1],\"end\":[999999999,12,31]}"), true);, +				asList("[" +, +						"{\"foo\": \"foofoo\", \"bar\"", ": \"barbar\"}," +, +						"{\"foo\": \"foofoofoo\", \"bar\": \"barbarbar\"}]"),, +				asList(, +						"{\"foo\": \"foofoo\", \"bar\": \"barbar\"}",, +		testTokenize(asList("\"foo", "bar\""),singletonList("\"foobar\""), true);, +		testTokenize(asList("12", "34"),singletonList("1234"), true);, +		testTokenize(asList("12.", "34"),singletonList("12.34"), true);, +		testTokenize(asList("[1", ",2,", "3]"), asList("1", "2", "3"), true);, +		Flux<TokenBuffer> tokenBufferFlux = Jackson2Tokenizer.tokenize(, +				Flux.fromIterable(source).map(this::stringBuffer),, +				this.jsonFactory,, +				tokenizeArrayElements);, +		expected.forEach(s -> builder.assertNext(new JSONAssertConsumer(s)));, +, +		JSONAssertConsumer(String expected) {]