[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +import org.w3c.dom.Element;, +, +import org.springframework.beans.factory.support.ManagedList;, +import org.springframework.http.converter.ByteArrayHttpMessageConverter;, +import org.springframework.http.converter.FormHttpMessageConverter;, +import org.springframework.http.converter.StringHttpMessageConverter;, +import org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;, +import org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter;, +import org.springframework.http.converter.xml.SourceHttpMessageConverter;, + * {@link BeanDefinitionParser} that parses the {@code annotation-driven} element to configure a Spring MVC web, + * application., + *, + * <p>Responsible for:, + * <li>Registering a DefaultAnnotationHandlerMapping bean for mapping HTTP Servlet Requests to @Controller methods, + * using @RequestMapping annotations., + * Will configure the HandlerAdapter's <code>webBindingInitializer</code> property for centrally configuring, + * {@code @Controller} {@code DataBinder} instances:, + * <li>Configures the conversionService if specified, otherwise defaults to a fresh {@link ConversionService} instance, + * created by the default {@link FormattingConversionServiceFactoryBean}., + * <li>Configures the validator if specified, otherwise defaults to a fresh {@link Validator} instance created by the, + * default {@link LocalValidatorFactoryBean} <em>if the JSR-303 API is present on the classpath</em>., + * <li>Configures standard {@link org.springframework.http.converter.HttpMessageConverter HttpMessageConverters},, + * including the {@link Jaxb2RootElementHttpMessageConverter} <em>if JAXB2 is present on the classpath</em>, and, + * the {@link MappingJacksonHttpMessageConverter} <em>if Jackson is present on the classpath</em>., + * @author Arjen Poutsma, +	private static final boolean jaxb2Present =, +			ClassUtils.isPresent("javax.xml.bind.Binder", AnnotationDrivenBeanDefinitionParser.class.getClassLoader());, +, +	private static final boolean jacksonPresent =, +			ClassUtils.isPresent("org.codehaus.jackson.map.ObjectMapper", AnnotationDrivenBeanDefinitionParser.class.getClassLoader()) &&, +					ClassUtils.isPresent("org.codehaus.jackson.JsonGenerator", AnnotationDrivenBeanDefinitionParser.class.getClassLoader());, +, +, +		annAdapterDef.getPropertyValues().add("messageConverters", getMessageConverters(source));, +	private ManagedList<RootBeanDefinition> getMessageConverters(Object source) {, +		ManagedList<RootBeanDefinition> messageConverters = new ManagedList<RootBeanDefinition>();, +		messageConverters.setSource(source);, +		messageConverters.add(new RootBeanDefinition(ByteArrayHttpMessageConverter.class));, +		messageConverters.add(new RootBeanDefinition(StringHttpMessageConverter.class));, +		messageConverters.add(new RootBeanDefinition(FormHttpMessageConverter.class));, +		messageConverters.add(new RootBeanDefinition(SourceHttpMessageConverter.class));, +		if (jaxb2Present) {, +			messageConverters.add(new RootBeanDefinition(Jaxb2RootElementHttpMessageConverter.class));, +		}, +		if (jacksonPresent) {, +			messageConverters.add(new RootBeanDefinition(MappingJacksonHttpMessageConverter.class));, +		}, +		return messageConverters;, +	}, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +import org.w3c.dom.Element;, +, +import org.springframework.beans.factory.support.ManagedList;, +import org.springframework.http.converter.ByteArrayHttpMessageConverter;, +import org.springframework.http.converter.FormHttpMessageConverter;, +import org.springframework.http.converter.StringHttpMessageConverter;, +import org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;, +import org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter;, +import org.springframework.http.converter.xml.SourceHttpMessageConverter;, + * {@link BeanDefinitionParser} that parses the {@code annotation-driven} element to configure a Spring MVC web, + * application., + *, + * <p>Responsible for:, + * <li>Registering a DefaultAnnotationHandlerMapping bean for mapping HTTP Servlet Requests to @Controller methods, + * using @RequestMapping annotations., + * Will configure the HandlerAdapter's <code>webBindingInitializer</code> property for centrally configuring, + * {@code @Controller} {@code DataBinder} instances:, + * <li>Configures the conversionService if specified, otherwise defaults to a fresh {@link ConversionService} instance, + * created by the default {@link FormattingConversionServiceFactoryBean}., + * <li>Configures the validator if specified, otherwise defaults to a fresh {@link Validator} instance created by the, + * default {@link LocalValidatorFactoryBean} <em>if the JSR-303 API is present on the classpath</em>., + * <li>Configures standard {@link org.springframework.http.converter.HttpMessageConverter HttpMessageConverters},, + * including the {@link Jaxb2RootElementHttpMessageConverter} <em>if JAXB2 is present on the classpath</em>, and, + * the {@link MappingJacksonHttpMessageConverter} <em>if Jackson is present on the classpath</em>., + * @author Arjen Poutsma, +	private static final boolean jaxb2Present =, +			ClassUtils.isPresent("javax.xml.bind.Binder", AnnotationDrivenBeanDefinitionParser.class.getClassLoader());, +, +	private static final boolean jacksonPresent =, +			ClassUtils.isPresent("org.codehaus.jackson.map.ObjectMapper", AnnotationDrivenBeanDefinitionParser.class.getClassLoader()) &&, +					ClassUtils.isPresent("org.codehaus.jackson.JsonGenerator", AnnotationDrivenBeanDefinitionParser.class.getClassLoader());, +, +, +		annAdapterDef.getPropertyValues().add("messageConverters", getMessageConverters(source));, +	private ManagedList<RootBeanDefinition> getMessageConverters(Object source) {, +		ManagedList<RootBeanDefinition> messageConverters = new ManagedList<RootBeanDefinition>();, +		messageConverters.setSource(source);, +		messageConverters.add(new RootBeanDefinition(ByteArrayHttpMessageConverter.class));, +		messageConverters.add(new RootBeanDefinition(StringHttpMessageConverter.class));, +		messageConverters.add(new RootBeanDefinition(FormHttpMessageConverter.class));, +		messageConverters.add(new RootBeanDefinition(SourceHttpMessageConverter.class));, +		if (jaxb2Present) {, +			messageConverters.add(new RootBeanDefinition(Jaxb2RootElementHttpMessageConverter.class));, +		}, +		if (jacksonPresent) {, +			messageConverters.add(new RootBeanDefinition(MappingJacksonHttpMessageConverter.class));, +		}, +		return messageConverters;]