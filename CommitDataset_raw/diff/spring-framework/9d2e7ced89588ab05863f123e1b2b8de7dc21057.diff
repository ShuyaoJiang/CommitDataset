[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +			String beanName, RootBeanDefinition mbd, Constructor<?> constructorToUse, Object[] argsToUse) {, +			return Math.min(rawTypeDiffWeight, typeDiffWeight);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +			String beanName, RootBeanDefinition mbd, Constructor<?> constructorToUse, Object[] argsToUse) {, +			return Math.min(rawTypeDiffWeight, typeDiffWeight);, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java, + * Copyright 2002-2019 the original author or authors., +			this.maxConcurrentConsumers = Math.max(maxConcurrentConsumers, this.concurrentConsumers);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +			String beanName, RootBeanDefinition mbd, Constructor<?> constructorToUse, Object[] argsToUse) {, +			return Math.min(rawTypeDiffWeight, typeDiffWeight);, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java, + * Copyright 2002-2019 the original author or authors., +			this.maxConcurrentConsumers = Math.max(maxConcurrentConsumers, this.concurrentConsumers);, +++ b/spring-test/src/main/java/org/springframework/test/annotation/TestAnnotationUtils.java, + * Copyright 2002-2019 the original author or authors., +		return (timed == null ? 0 : Math.max(0, timed.millis()));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +			String beanName, RootBeanDefinition mbd, Constructor<?> constructorToUse, Object[] argsToUse) {, +			return Math.min(rawTypeDiffWeight, typeDiffWeight);, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java, + * Copyright 2002-2019 the original author or authors., +			this.maxConcurrentConsumers = Math.max(maxConcurrentConsumers, this.concurrentConsumers);, +++ b/spring-test/src/main/java/org/springframework/test/annotation/TestAnnotationUtils.java, + * Copyright 2002-2019 the original author or authors., +		return (timed == null ? 0 : Math.max(0, timed.millis()));, +++ b/spring-test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java, + * Copyright 2002-2019 the original author or authors., +		return (test == null ? 0 : Math.max(0, test.timeout()));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +			String beanName, RootBeanDefinition mbd, Constructor<?> constructorToUse, Object[] argsToUse) {, +			return Math.min(rawTypeDiffWeight, typeDiffWeight);, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java, + * Copyright 2002-2019 the original author or authors., +			this.maxConcurrentConsumers = Math.max(maxConcurrentConsumers, this.concurrentConsumers);, +++ b/spring-test/src/main/java/org/springframework/test/annotation/TestAnnotationUtils.java, + * Copyright 2002-2019 the original author or authors., +		return (timed == null ? 0 : Math.max(0, timed.millis()));, +++ b/spring-test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java, + * Copyright 2002-2019 the original author or authors., +		return (test == null ? 0 : Math.max(0, test.timeout()));, +++ b/spring-web/src/main/java/org/springframework/web/multipart/commons/CommonsMultipartFile.java, + * Copyright 2002-2019 the original author or authors., +		int pos = Math.max(winSep, unixSep);]