[+++ b/org.springframework.testsuite/src/test/java/org/springframework/context/event/ApplicationContextEventTests.java, +import org.easymock.EasyMock;, +import static org.easymock.EasyMock.*;, +import static org.junit.Assert.*;, +import org.junit.Test;, +public class ApplicationContextEventTests {, +	@Test, +	public void multicasterNewCollectionClass() {, +	@Test(expected = IllegalArgumentException.class), +	public void multicasterInvalidCollectionClass_NotEvenACollectionType() {, +	@Test(expected = FatalBeanException.class), +	public void multicasterInvalidCollectionClass_PassingAnInterfaceNotAConcreteClass() {, +	@Test(expected = IllegalArgumentException.class), +	public void multicasterNullCollectionClass() {, +	@Test, +	public void multicasterRemoveAll() {, +	@Test, +	public void multicasterRemoveOne() {, +	@Test, +	public void simpleApplicationEventMulticaster() {, +		ApplicationListener listener = EasyMock.createMock(ApplicationListener.class);, +		replay(listener);, +		verify(listener);, +	@Test, +		MethodInvocation invocation = EasyMock.createMock(MethodInvocation.class);, +		ApplicationContext ctx = EasyMock.createMock(ApplicationContext.class);, +		EventPublicationInterceptor interceptor = new EventPublicationInterceptor();, +		expect(invocation.proceed()).andReturn(new Object());, +		expect(invocation.getThis()).andReturn(new Object());, +		ctx.publishEvent(isA(MyEvent.class));, +, +		replay(invocation, ctx);, +		verify(invocation, ctx);, +	@Test, +	public void listenerAndBroadcasterWithUnresolvableCircularReference() {, +	@Test, +	public void listenerAndBroadcasterWithResolvableCircularReference() {]