[+++ b/spring-web-reactive/src/main/java/org/springframework/http/HttpCookie.java, + * Represents an HTTP Cookie with a name and value., + * <p>The {@link ServerHttpCookie} sub-class exposes the extra attributes that, + * a server can include in a Set-Cookie response header., +public class HttpCookie {, +	public HttpCookie(String name, String value) {, +	 * Return the cookie value or an empty string, never {@code null}., +		return this.name.hashCode();, +		return (this.name.equalsIgnoreCase(otherCookie.getName()));, +++ b/spring-web-reactive/src/main/java/org/springframework/http/HttpCookie.java, + * Represents an HTTP Cookie with a name and value., + * <p>The {@link ServerHttpCookie} sub-class exposes the extra attributes that, + * a server can include in a Set-Cookie response header., +public class HttpCookie {, +	public HttpCookie(String name, String value) {, +	 * Return the cookie value or an empty string, never {@code null}., +		return this.name.hashCode();, +		return (this.name.equalsIgnoreCase(otherCookie.getName()));, +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/http/HttpCookie.java, + * Represents an HTTP Cookie with a name and value., + * <p>The {@link ServerHttpCookie} sub-class exposes the extra attributes that, + * a server can include in a Set-Cookie response header., +public class HttpCookie {, +	public HttpCookie(String name, String value) {, +	 * Return the cookie value or an empty string, never {@code null}., +		return this.name.hashCode();, +		return (this.name.equalsIgnoreCase(otherCookie.getName()));, +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/http/ServerHttpCookie.java, +/*, + * Copyright 2002-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.http;, +, +import java.time.Duration;, +import java.util.Optional;, +, +import org.springframework.util.Assert;, +import org.springframework.util.ObjectUtils;, +, +/**, + * Represents a server-side cookie with extra attributes that a server can, + * include in a Set-Cookie response header., + *, + * <p>Use {@link #with} to create a {@code ServerHttpCookie}., + *, + * @author Rossen Stoyanchev, + * @see <a href="https://tools.ietf.org/html/rfc6265">RFC 6265</a>, + */, +public final class ServerHttpCookie extends HttpCookie {, +, +	private final Duration maxAge;, +, +	private final Optional<String> domain;, +, +	private final Optional<String> path;, +, +	private final boolean secure;, +, +	private final boolean httpOnly;, +, +, +	/**, +	 * Private constructor. See {@link #with(String, String)}., +	 */, +	private ServerHttpCookie(String name, String value, Duration maxAge, String domain,, +			String path, boolean secure, boolean httpOnly) {, +, +		super(name, value);, +		Assert.notNull(maxAge);, +		this.maxAge = maxAge;, +		this.domain = Optional.ofNullable(domain);, +		this.path = Optional.ofNullable(path);, +		this.secure = secure;, +		this.httpOnly = httpOnly;, +	}, +, +, +	/**, +	 * Return the cookie "Max-Age" attribute in seconds., +	 *, +	 * <p>A positive value indicates when the cookie expires relative to the, +	 * current time. A value of 0 means the cookie should expire immediately., +	 * A negative value means no "Max-Age" attribute in which case the cookie, +	 * is removed when the browser is closed., +	 */, +	public Duration getMaxAge() {]