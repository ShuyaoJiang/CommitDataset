[+++ b/spring-web/src/main/kotlin/org/springframework/web/client/RestOperationsExtensions.kt, +import org.springframework.core.ParameterizedTypeReference, +		exchange(url, method, requestEntity, object : ParameterizedTypeReference<T>() {}, *uriVariables), +		exchange(url, method, requestEntity, object : ParameterizedTypeReference<T>() {}, uriVariables), +		exchange(url, method, requestEntity, object : ParameterizedTypeReference<T>() {}), +		exchange(requestEntity, object : ParameterizedTypeReference<T>() {}), +++ b/spring-web/src/main/kotlin/org/springframework/web/client/RestOperationsExtensions.kt, +import org.springframework.core.ParameterizedTypeReference, +		exchange(url, method, requestEntity, object : ParameterizedTypeReference<T>() {}, *uriVariables), +		exchange(url, method, requestEntity, object : ParameterizedTypeReference<T>() {}, uriVariables), +		exchange(url, method, requestEntity, object : ParameterizedTypeReference<T>() {}), +		exchange(requestEntity, object : ParameterizedTypeReference<T>() {}), +++ b/spring-web/src/test/kotlin/org/springframework/web/client/RestOperationsExtensionsTests.kt, +import org.springframework.core.ParameterizedTypeReference, +		template.exchange<List<Foo>>(url, method, entity, var1, var2), +		verify(template, times(1)).exchange(url, method, entity, object : ParameterizedTypeReference<List<Foo>>() {}, var1, var2), +		template.exchange<List<Foo>>(url, method, entity, vars), +		verify(template, times(1)).exchange(url, method, entity, object : ParameterizedTypeReference<List<Foo>>() {}, vars), +		template.exchange<List<Foo>>(url, method, entity), +		verify(template, times(1)).exchange(url, method, entity, object : ParameterizedTypeReference<List<Foo>>() {}), +		template.exchange<List<Foo>>(entity), +		verify(template, times(1)).exchange(entity, object : ParameterizedTypeReference<List<Foo>>() {}), +++ b/spring-web/src/main/kotlin/org/springframework/web/client/RestOperationsExtensions.kt, +import org.springframework.core.ParameterizedTypeReference, +		exchange(url, method, requestEntity, object : ParameterizedTypeReference<T>() {}, *uriVariables), +		exchange(url, method, requestEntity, object : ParameterizedTypeReference<T>() {}, uriVariables), +		exchange(url, method, requestEntity, object : ParameterizedTypeReference<T>() {}), +		exchange(requestEntity, object : ParameterizedTypeReference<T>() {}), +++ b/spring-web/src/test/kotlin/org/springframework/web/client/RestOperationsExtensionsTests.kt, +import org.springframework.core.ParameterizedTypeReference, +		template.exchange<List<Foo>>(url, method, entity, var1, var2), +		verify(template, times(1)).exchange(url, method, entity, object : ParameterizedTypeReference<List<Foo>>() {}, var1, var2), +		template.exchange<List<Foo>>(url, method, entity, vars), +		verify(template, times(1)).exchange(url, method, entity, object : ParameterizedTypeReference<List<Foo>>() {}, vars), +		template.exchange<List<Foo>>(url, method, entity), +		verify(template, times(1)).exchange(url, method, entity, object : ParameterizedTypeReference<List<Foo>>() {}), +		template.exchange<List<Foo>>(entity), +		verify(template, times(1)).exchange(entity, object : ParameterizedTypeReference<List<Foo>>() {}), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +		public <T, P extends Publisher<T>> RequestHeadersSpec<?> body(P publisher, ParameterizedTypeReference<T> typeReference) {, +			this.inserter = BodyInserters.fromPublisher(publisher, typeReference);, +			return this;, +		}, +, +		@Override, +++ b/spring-web/src/main/kotlin/org/springframework/web/client/RestOperationsExtensions.kt, +import org.springframework.core.ParameterizedTypeReference, +		exchange(url, method, requestEntity, object : ParameterizedTypeReference<T>() {}, *uriVariables), +		exchange(url, method, requestEntity, object : ParameterizedTypeReference<T>() {}, uriVariables), +		exchange(url, method, requestEntity, object : ParameterizedTypeReference<T>() {}), +		exchange(requestEntity, object : ParameterizedTypeReference<T>() {}), +++ b/spring-web/src/test/kotlin/org/springframework/web/client/RestOperationsExtensionsTests.kt, +import org.springframework.core.ParameterizedTypeReference, +		template.exchange<List<Foo>>(url, method, entity, var1, var2), +		verify(template, times(1)).exchange(url, method, entity, object : ParameterizedTypeReference<List<Foo>>() {}, var1, var2), +		template.exchange<List<Foo>>(url, method, entity, vars), +		verify(template, times(1)).exchange(url, method, entity, object : ParameterizedTypeReference<List<Foo>>() {}, vars), +		template.exchange<List<Foo>>(url, method, entity), +		verify(template, times(1)).exchange(url, method, entity, object : ParameterizedTypeReference<List<Foo>>() {}), +		template.exchange<List<Foo>>(entity), +		verify(template, times(1)).exchange(entity, object : ParameterizedTypeReference<List<Foo>>() {}), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +		public <T, P extends Publisher<T>> RequestHeadersSpec<?> body(P publisher, ParameterizedTypeReference<T> typeReference) {, +			this.inserter = BodyInserters.fromPublisher(publisher, typeReference);, +			return this;, +		}, +, +		@Override, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java, +		 * @param typeReference the type reference of elements contained in the publisher, +		 * @param <T> the type of the elements contained in the publisher, +		 * @param <P> the type of the {@code Publisher}, +		 * @return this builder, +		 */, +		<T, P extends Publisher<T>> RequestHeadersSpec<?> body(P publisher, ParameterizedTypeReference<T> typeReference);, +, +		/**, +		 * Set the body of the request to the given asynchronous {@code Publisher}., +		 * <p>This method is a convenient shortcut for {@link #body(BodyInserter)} with a, +		 * {@linkplain org.springframework.web.reactive.function.BodyInserters#fromPublisher}, +		 * Publisher body inserter}., +		 * @param publisher the {@code Publisher} to write to the request, +++ b/spring-web/src/main/kotlin/org/springframework/web/client/RestOperationsExtensions.kt, +import org.springframework.core.ParameterizedTypeReference, +		exchange(url, method, requestEntity, object : ParameterizedTypeReference<T>() {}, *uriVariables), +		exchange(url, method, requestEntity, object : ParameterizedTypeReference<T>() {}, uriVariables), +		exchange(url, method, requestEntity, object : ParameterizedTypeReference<T>() {}), +		exchange(requestEntity, object : ParameterizedTypeReference<T>() {}), +++ b/spring-web/src/test/kotlin/org/springframework/web/client/RestOperationsExtensionsTests.kt, +import org.springframework.core.ParameterizedTypeReference, +		template.exchange<List<Foo>>(url, method, entity, var1, var2), +		verify(template, times(1)).exchange(url, method, entity, object : ParameterizedTypeReference<List<Foo>>() {}, var1, var2), +		template.exchange<List<Foo>>(url, method, entity, vars), +		verify(template, times(1)).exchange(url, method, entity, object : ParameterizedTypeReference<List<Foo>>() {}, vars), +		template.exchange<List<Foo>>(url, method, entity), +		verify(template, times(1)).exchange(url, method, entity, object : ParameterizedTypeReference<List<Foo>>() {}), +		template.exchange<List<Foo>>(entity), +		verify(template, times(1)).exchange(entity, object : ParameterizedTypeReference<List<Foo>>() {}), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +		public <T, P extends Publisher<T>> RequestHeadersSpec<?> body(P publisher, ParameterizedTypeReference<T> typeReference) {]