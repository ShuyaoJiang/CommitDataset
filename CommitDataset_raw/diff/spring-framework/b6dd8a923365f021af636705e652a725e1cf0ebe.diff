[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanCreationException.java, + * Copyright 2002-2016 the original author or authors., +		super("Error creating bean" + (beanName != null ? " with name '" + beanName + "'" : "") + ": " + msg);, +		super("Error creating bean" + (beanName != null ? " with name '" + beanName + "'" : "") +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanCreationException.java, + * Copyright 2002-2016 the original author or authors., +		super("Error creating bean" + (beanName != null ? " with name '" + beanName + "'" : "") + ": " + msg);, +		super("Error creating bean" + (beanName != null ? " with name '" + beanName + "'" : "") +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanInitializationException.java, + * Copyright 2002-2016 the original author or authors., + * <p>Note that {@code afterPropertiesSet()} or a custom "init-method", + * can throw any exception., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanCreationException.java, + * Copyright 2002-2016 the original author or authors., +		super("Error creating bean" + (beanName != null ? " with name '" + beanName + "'" : "") + ": " + msg);, +		super("Error creating bean" + (beanName != null ? " with name '" + beanName + "'" : "") +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanInitializationException.java, + * Copyright 2002-2016 the original author or authors., + * <p>Note that {@code afterPropertiesSet()} or a custom "init-method", + * can throw any exception., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/InjectionPoint.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.beans.factory;, +, +import java.lang.annotation.Annotation;, +import java.lang.reflect.AnnotatedElement;, +import java.lang.reflect.Field;, +import java.lang.reflect.Member;, +, +import org.springframework.core.MethodParameter;, +import org.springframework.util.Assert;, +, +/**, + * A simple descriptor for an injection point, pointing to a method/constructor, + * parameter or a field. Exposed by {@link UnsatisfiedDependencyException}., + *, + * @author Juergen Hoeller, + * @since 4.3, + * @see UnsatisfiedDependencyException#getInjectionPoint(), + * @see org.springframework.beans.factory.config.DependencyDescriptor, + */, +public class InjectionPoint {, +, +	protected MethodParameter methodParameter;, +, +	protected Field field;, +, +	private volatile Annotation[] fieldAnnotations;, +, +, +	/**, +	 * Create an injection point descriptor for a method or constructor parameter., +	 * @param methodParameter the MethodParameter to wrap, +	 */, +	public InjectionPoint(MethodParameter methodParameter) {, +		Assert.notNull(methodParameter, "MethodParameter must not be null");, +		this.methodParameter = methodParameter;, +	}, +, +	/**, +	 * Create an injection point descriptor for a field., +	 * @param field the field to wrap, +	 */, +	public InjectionPoint(Field field) {, +		Assert.notNull(field, "Field must not be null");, +		this.field = field;, +	}, +, +	/**, +	 * Copy constructor., +	 * @param original the original descriptor to create a copy from, +	 */, +	protected InjectionPoint(InjectionPoint original) {, +		this.methodParameter = (original.methodParameter != null ?, +				new MethodParameter(original.methodParameter) : null);, +		this.field = original.field;, +		this.fieldAnnotations = original.fieldAnnotations;, +	}, +, +	/**, +	 * Just available for serialization purposes in subclasses., +	 */, +	protected InjectionPoint() {, +	}, +]