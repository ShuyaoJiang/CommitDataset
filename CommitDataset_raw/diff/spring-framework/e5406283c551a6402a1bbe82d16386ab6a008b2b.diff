[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/DefaultHandshakeHandler.java, +import java.util.Arrays;, + * A default {@link HandshakeHandler} implementation. Performs initial validation of the, + * WebSocket handshake request -- possibly rejecting it through the appropriate HTTP, + * status code -- while also allowing sub-classes to override various parts of the, + * negotiation process (e.g. origin validation, sub-protocol negotiation, etc)., + * <p>, + * If the negotiation succeeds, the actual upgrade is delegated to a server-specific, + * {@link RequestUpgradeStrategy}, which will update the response as necessary and, + * initialize the WebSocket. Currently supported servers are Tomcat 7 and 8, Jetty 9, and, + * Glassfish 4., +	private static final boolean tomcatWsPresent = ClassUtils.isPresent(, +			"org.apache.tomcat.websocket.server.WsHttpUpgradeHandler", HandshakeHandler.class.getClassLoader());, +, +	private static final boolean jettyWsPresent = ClassUtils.isPresent(, +			"org.eclipse.jetty.websocket.server.WebSocketServerFactory", HandshakeHandler.class.getClassLoader());, +, +	private static final boolean glassFishWsPresent = ClassUtils.isPresent(, +			"org.glassfish.tyrus.servlet.TyrusHttpUpgradeHandler", HandshakeHandler.class.getClassLoader());, +, +, +	private final RequestUpgradeStrategy requestUpgradeStrategy;, +, +		this(initRequestUpgradeStrategy());, +	}, +, +	private static RequestUpgradeStrategy initRequestUpgradeStrategy() {, +		String className;, +		if (tomcatWsPresent) {, +			className = "org.springframework.web.socket.server.support.TomcatRequestUpgradeStrategy";, +		}, +		else if (jettyWsPresent) {, +			className = "org.springframework.web.socket.server.support.JettyRequestUpgradeStrategy";, +		}, +		else if (glassFishWsPresent) {, +			className = "org.springframework.web.socket.server.support.GlassFishRequestUpgradeStrategy";, +		}, +		else {, +			throw new IllegalStateException("No suitable " + RequestUpgradeStrategy.class.getSimpleName());, +		}, +		try {, +			Class<?> clazz = ClassUtils.forName(className, DefaultHandshakeHandler.class.getClassLoader());, +			return (RequestUpgradeStrategy) BeanUtils.instantiateClass(clazz.getConstructor());, +		}, +		catch (Throwable t) {, +			throw new IllegalStateException("Failed to instantiate " + className, t);, +		}, +		if (logger.isDebugEnabled()) {, +			logger.debug("Initiating handshake for " + request.getURI() + ", headers=" + request.getHeaders());, +		}, +		if (logger.isDebugEnabled()) {, +			logger.debug("Upgrading request");, +		String version = request.getHeaders().getSecWebSocketVersion();, +		String[] supportedVersions = getSupportedVerions();, +		if (logger.isDebugEnabled()) {, +			logger.debug("Requested version=" + version + ", supported=" + Arrays.toString(supportedVersions));, +		}, +		for (String supportedVersion : supportedVersions) {, +			if (supportedVersion.trim().equals(version)) {, +		if (logger.isDebugEnabled()) {, +			logger.debug("Version=" + version + " is not a supported version");, +		}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/DefaultHandshakeHandler.java, +import java.util.Arrays;, + * A default {@link HandshakeHandler} implementation. Performs initial validation of the, + * WebSocket handshake request -- possibly rejecting it through the appropriate HTTP, + * status code -- while also allowing sub-classes to override various parts of the, + * negotiation process (e.g. origin validation, sub-protocol negotiation, etc)., + * <p>, + * If the negotiation succeeds, the actual upgrade is delegated to a server-specific, + * {@link RequestUpgradeStrategy}, which will update the response as necessary and, + * initialize the WebSocket. Currently supported servers are Tomcat 7 and 8, Jetty 9, and, + * Glassfish 4., +	private static final boolean tomcatWsPresent = ClassUtils.isPresent(, +			"org.apache.tomcat.websocket.server.WsHttpUpgradeHandler", HandshakeHandler.class.getClassLoader());, +, +	private static final boolean jettyWsPresent = ClassUtils.isPresent(, +			"org.eclipse.jetty.websocket.server.WebSocketServerFactory", HandshakeHandler.class.getClassLoader());, +, +	private static final boolean glassFishWsPresent = ClassUtils.isPresent(, +			"org.glassfish.tyrus.servlet.TyrusHttpUpgradeHandler", HandshakeHandler.class.getClassLoader());, +, +, +	private final RequestUpgradeStrategy requestUpgradeStrategy;, +, +		this(initRequestUpgradeStrategy());, +	}, +, +	private static RequestUpgradeStrategy initRequestUpgradeStrategy() {, +		String className;, +		if (tomcatWsPresent) {, +			className = "org.springframework.web.socket.server.support.TomcatRequestUpgradeStrategy";, +		}, +		else if (jettyWsPresent) {, +			className = "org.springframework.web.socket.server.support.JettyRequestUpgradeStrategy";, +		}, +		else if (glassFishWsPresent) {, +			className = "org.springframework.web.socket.server.support.GlassFishRequestUpgradeStrategy";, +		}, +		else {]