[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractRequestBodyPublisher.java, +public abstract class AbstractRequestBodyPublisher<T> implements Publisher<T> {, +	private Subscriber<? super T> subscriber;, +	public void subscribe(Subscriber<? super T> subscriber) {, +	public final void onDataAvailable() {, +	public final void onAllDataRead() {, +	 * Called by a listener interface to indicate that as error has occurred., +	public final void onError(Throwable t) {, +	 * Reads and publishes data from the input. Continues till either there is no, +			T data = read();, +			if (data != null) {, +				this.subscriber.onNext(data);, +	 * Reads a data from the input, if possible. Returns {@code null} if a data, +	 * @return the data that was read; or {@code null}, +	protected abstract T read() throws IOException;, +		private final AbstractRequestBodyPublisher<?> publisher;, +		public RequestBodySubscription(AbstractRequestBodyPublisher<?> publisher) {, +			<T> void subscribe(AbstractRequestBodyPublisher<T> publisher, Subscriber<? super T> subscriber) {, +			<T> void request(AbstractRequestBodyPublisher<T> publisher, long n) {, +			<T> void request(AbstractRequestBodyPublisher<T> publisher, long n) {, +			<T> void onDataAvailable(AbstractRequestBodyPublisher<T> publisher) {, +			<T> void request(AbstractRequestBodyPublisher<T> publisher, long n) {, +			<T> void request(AbstractRequestBodyPublisher<T> publisher, long n) {, +			<T> void cancel(AbstractRequestBodyPublisher<T> publisher) {, +			<T> void onAllDataRead(AbstractRequestBodyPublisher<T> publisher) {, +			<T> void onError(AbstractRequestBodyPublisher<T> publisher, Throwable t) {, +		<T> void subscribe(AbstractRequestBodyPublisher<T> publisher, Subscriber<? super T> subscriber) {, +		<T> void request(AbstractRequestBodyPublisher<T> publisher, long n) {, +		<T> void cancel(AbstractRequestBodyPublisher<T> publisher) {, +		<T> void onDataAvailable(AbstractRequestBodyPublisher<T> publisher) {, +		<T> void onAllDataRead(AbstractRequestBodyPublisher<T> publisher) {, +		<T> void onError(AbstractRequestBodyPublisher<T> publisher, Throwable t) {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractRequestBodyPublisher.java, +public abstract class AbstractRequestBodyPublisher<T> implements Publisher<T> {, +	private Subscriber<? super T> subscriber;, +	public void subscribe(Subscriber<? super T> subscriber) {, +	public final void onDataAvailable() {, +	public final void onAllDataRead() {, +	 * Called by a listener interface to indicate that as error has occurred., +	public final void onError(Throwable t) {, +	 * Reads and publishes data from the input. Continues till either there is no, +			T data = read();, +			if (data != null) {, +				this.subscriber.onNext(data);, +	 * Reads a data from the input, if possible. Returns {@code null} if a data, +	 * @return the data that was read; or {@code null}, +	protected abstract T read() throws IOException;, +		private final AbstractRequestBodyPublisher<?> publisher;, +		public RequestBodySubscription(AbstractRequestBodyPublisher<?> publisher) {, +			<T> void subscribe(AbstractRequestBodyPublisher<T> publisher, Subscriber<? super T> subscriber) {, +			<T> void request(AbstractRequestBodyPublisher<T> publisher, long n) {, +			<T> void request(AbstractRequestBodyPublisher<T> publisher, long n) {, +			<T> void onDataAvailable(AbstractRequestBodyPublisher<T> publisher) {, +			<T> void request(AbstractRequestBodyPublisher<T> publisher, long n) {, +			<T> void request(AbstractRequestBodyPublisher<T> publisher, long n) {, +			<T> void cancel(AbstractRequestBodyPublisher<T> publisher) {, +			<T> void onAllDataRead(AbstractRequestBodyPublisher<T> publisher) {, +			<T> void onError(AbstractRequestBodyPublisher<T> publisher, Throwable t) {, +		<T> void subscribe(AbstractRequestBodyPublisher<T> publisher, Subscriber<? super T> subscriber) {, +		<T> void request(AbstractRequestBodyPublisher<T> publisher, long n) {, +		<T> void cancel(AbstractRequestBodyPublisher<T> publisher) {, +		<T> void onDataAvailable(AbstractRequestBodyPublisher<T> publisher) {, +		<T> void onAllDataRead(AbstractRequestBodyPublisher<T> publisher) {, +		<T> void onError(AbstractRequestBodyPublisher<T> publisher, Throwable t) {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractResponseBodyProcessor.java, +public abstract class AbstractResponseBodyProcessor<T> implements Processor<T, Void> {, +	protected volatile T currentData;, +	public final void onNext(T data) {, +			logger.trace(this.state + " onNext: " + data);, +		this.state.get().onNext(this, data);, +	public final void onWritePossible() {, +	 * Called when a data is received via {@link Subscriber#onNext(Object)}, +	 * @param data the data that was received., +	protected void receiveData(T data) {, +		Assert.state(this.currentData == null);, +		this.currentData = data;, +	 * Called when the current data should be released., +	protected abstract void releaseData();, +, +	protected abstract boolean isDataEmpty(T data);, +	 * Called when a data is received via {@link Subscriber#onNext(Object)}, +	 * or when only partial data was written., +	 * Writes the given data to the output, indicating if the entire data was, +	 * @param data the data to write, +	 * @return {@code true} if the data was fully written and a new data, +	protected abstract boolean write(T data) throws IOException;, +	public void cancel() {, +		 * requesting 1 data from the subscription, and change state to {@link, +			public <T> void onSubscribe(AbstractResponseBodyProcessor<T> processor, Subscription subscription) {, +		 * State that gets entered after a data has been, +			public <T> void onNext(AbstractResponseBodyProcessor<T> processor, T data) {, +				if (processor.isDataEmpty(data)) {, +					processor.receiveData(data);, +			public <T> void onComplete(AbstractResponseBodyProcessor<T> processor) {, +		 * State that gets entered after a data has been, +		 * {@code onWritePossible} by writing the current data and changes, +			public <T> void onWritePossible(AbstractResponseBodyProcessor<T> processor) {, +					T data = processor.currentData;, +						boolean writeCompleted = processor.write(data);, +							processor.releaseData();]