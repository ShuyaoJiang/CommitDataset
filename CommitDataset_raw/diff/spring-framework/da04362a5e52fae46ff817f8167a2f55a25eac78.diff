[+++ b/spring-test/src/main/java/org/springframework/test/context/ContextCache.java, + * Copyright 2002-2014 the original author or authors., +import java.util.concurrent.atomic.AtomicInteger;, +	private final AtomicInteger hitCount = new AtomicInteger();, +	private final AtomicInteger missCount = new AtomicInteger();, +		this.hitCount.set(0);, +		this.missCount.set(0);, +				this.missCount.incrementAndGet();, +				this.hitCount.incrementAndGet();, +	 * Get the overall hit count for this cache., +	 * <p>A <em>hit</em> is an access to the cache, which returned a non-null context for, +	 * a queried key., +		return this.hitCount.get();, +	 * Get the overall miss count for this cache., +	 * <p>A <em>miss</em> is an access to the cache, which returned a {@code null} context, +	 * for a queried key., +		return this.missCount.get();, +++ b/spring-test/src/main/java/org/springframework/test/context/ContextCache.java, + * Copyright 2002-2014 the original author or authors., +import java.util.concurrent.atomic.AtomicInteger;, +	private final AtomicInteger hitCount = new AtomicInteger();, +	private final AtomicInteger missCount = new AtomicInteger();, +		this.hitCount.set(0);, +		this.missCount.set(0);, +				this.missCount.incrementAndGet();, +				this.hitCount.incrementAndGet();, +	 * Get the overall hit count for this cache., +	 * <p>A <em>hit</em> is an access to the cache, which returned a non-null context for, +	 * a queried key., +		return this.hitCount.get();, +	 * Get the overall miss count for this cache., +	 * <p>A <em>miss</em> is an access to the cache, which returned a {@code null} context, +	 * for a queried key., +		return this.missCount.get();, +++ b/spring-test/src/main/java/org/springframework/test/context/DefaultCacheAwareContextLoaderDelegate.java, +	private static final Log statsLogger = LogFactory.getLog("org.springframework.test.context.cache");, +, +, +			if (statsLogger.isDebugEnabled()) {, +				statsLogger.debug(String.format("Spring test ApplicationContext cache statistics: %s", contextCache));, +			}, +, +++ b/spring-test/src/main/java/org/springframework/test/context/ContextCache.java, + * Copyright 2002-2014 the original author or authors., +import java.util.concurrent.atomic.AtomicInteger;, +	private final AtomicInteger hitCount = new AtomicInteger();, +	private final AtomicInteger missCount = new AtomicInteger();, +		this.hitCount.set(0);, +		this.missCount.set(0);, +				this.missCount.incrementAndGet();, +				this.hitCount.incrementAndGet();, +	 * Get the overall hit count for this cache., +	 * <p>A <em>hit</em> is an access to the cache, which returned a non-null context for, +	 * a queried key., +		return this.hitCount.get();, +	 * Get the overall miss count for this cache., +	 * <p>A <em>miss</em> is an access to the cache, which returned a {@code null} context, +	 * for a queried key., +		return this.missCount.get();, +++ b/spring-test/src/main/java/org/springframework/test/context/DefaultCacheAwareContextLoaderDelegate.java, +	private static final Log statsLogger = LogFactory.getLog("org.springframework.test.context.cache");, +, +, +			if (statsLogger.isDebugEnabled()) {, +				statsLogger.debug(String.format("Spring test ApplicationContext cache statistics: %s", contextCache));, +			}, +, +++ b/spring-test/src/test/resources/log4j.properties, +log4j.logger.org.springframework.test.context.cache=WARN, +++ b/spring-test/src/main/java/org/springframework/test/context/ContextCache.java, + * Copyright 2002-2014 the original author or authors., +import java.util.concurrent.atomic.AtomicInteger;, +	private final AtomicInteger hitCount = new AtomicInteger();, +	private final AtomicInteger missCount = new AtomicInteger();, +		this.hitCount.set(0);, +		this.missCount.set(0);, +				this.missCount.incrementAndGet();, +				this.hitCount.incrementAndGet();, +	 * Get the overall hit count for this cache., +	 * <p>A <em>hit</em> is an access to the cache, which returned a non-null context for, +	 * a queried key., +		return this.hitCount.get();, +	 * Get the overall miss count for this cache., +	 * <p>A <em>miss</em> is an access to the cache, which returned a {@code null} context, +	 * for a queried key., +		return this.missCount.get();, +++ b/spring-test/src/main/java/org/springframework/test/context/DefaultCacheAwareContextLoaderDelegate.java, +	private static final Log statsLogger = LogFactory.getLog("org.springframework.test.context.cache");, +, +, +			if (statsLogger.isDebugEnabled()) {, +				statsLogger.debug(String.format("Spring test ApplicationContext cache statistics: %s", contextCache));, +			}, +, +++ b/spring-test/src/test/resources/log4j.properties, +log4j.logger.org.springframework.test.context.cache=WARN, +++ b/src/asciidoc/index.adoc, +Since having a large number of application contexts loaded within a given test suite can, +cause the suite to take an unnecessarily long time to execute, it is often beneficial to, +know exactly how many contexts have been loaded and cached. To view the statistics for]