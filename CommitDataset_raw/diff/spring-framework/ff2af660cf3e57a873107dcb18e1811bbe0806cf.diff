[+++ b/spring-web/src/main/java/org/springframework/web/util/pattern/CaptureTheRestPathElement.java, +			matchingContext.set(variableName, decode(new String(matchingContext.candidate, candidateIndex,, +					matchingContext.candidateLength - candidateIndex)));, +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/CaptureTheRestPathElement.java, +			matchingContext.set(variableName, decode(new String(matchingContext.candidate, candidateIndex,, +					matchingContext.candidateLength - candidateIndex)));, +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/CaptureVariablePathElement.java, +import java.io.UnsupportedEncodingException;, +import java.nio.charset.StandardCharsets;, +import org.springframework.web.util.UriUtils;, +, +		String substringForDecoding = null;, +			if (includesPercent(matchingContext.candidate, candidateIndex, nextPos)) {, +				substringForDecoding = new String(matchingContext.candidate, candidateIndex, nextPos);, +				try {, +					candidateCapture = UriUtils.decode(substringForDecoding,StandardCharsets.UTF_8.name());, +				}, +				catch (UnsupportedEncodingException e) {, +					throw new IllegalStateException(e);, +				}, +			}, +			else {, +			}, +					candidateCapture != null ? candidateCapture.toString():, +					decode(new String(matchingContext.candidate, candidateIndex, nextPos - candidateIndex)));, +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/CaptureTheRestPathElement.java, +			matchingContext.set(variableName, decode(new String(matchingContext.candidate, candidateIndex,, +					matchingContext.candidateLength - candidateIndex)));, +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/CaptureVariablePathElement.java, +import java.io.UnsupportedEncodingException;, +import java.nio.charset.StandardCharsets;, +import org.springframework.web.util.UriUtils;, +, +		String substringForDecoding = null;, +			if (includesPercent(matchingContext.candidate, candidateIndex, nextPos)) {, +				substringForDecoding = new String(matchingContext.candidate, candidateIndex, nextPos);, +				try {, +					candidateCapture = UriUtils.decode(substringForDecoding,StandardCharsets.UTF_8.name());, +				}, +				catch (UnsupportedEncodingException e) {, +					throw new IllegalStateException(e);, +				}, +			}, +			else {, +			}, +					candidateCapture != null ? candidateCapture.toString():, +					decode(new String(matchingContext.candidate, candidateIndex, nextPos - candidateIndex)));, +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/InternalPathPatternParser.java, +import java.io.UnsupportedEncodingException;, +import java.nio.charset.StandardCharsets;, +import org.springframework.web.util.UriUtils;, +					if (this.insideVariableCapture && !this.isCaptureTheRestVariable) {, +	private char[] getPathElementText(boolean encodeElement) {, +		char[] pathElementText = new char[this.pos - this.pathElementStart];, +		if (encodeElement) {, +			try {, +				String unencoded = new String(this.pathPatternData, this.pathElementStart, this.pos - this.pathElementStart);, +				String encoded = UriUtils.encodeFragment(unencoded, StandardCharsets.UTF_8.name());, +				pathElementText = encoded.toCharArray();, +			}, +			catch (UnsupportedEncodingException ex) {, +				// Should never happen..., +				throw new IllegalStateException(ex);, +			}, +		}, +		else {, +			System.arraycopy(this.pathPatternData, this.pathElementStart, pathElementText, 0,, +					this.pos - this.pathElementStart);, +		}, +		return pathElementText;, +	}, +, +					newPE = new CaptureTheRestPathElement(pathElementStart, getPathElementText(false), separator);, +						newPE = new CaptureVariablePathElement(this.pathElementStart, getPathElementText(false),, +				RegexPathElement newRegexSection = new RegexPathElement(this.pathElementStart, , +						getPathElementText(false), this.caseSensitive,, +						this.pathPatternData, this.separator);, +					newPE = new RegexPathElement(this.pathElementStart, getPathElementText(false),, +				newPE = new SingleCharWildcardedPathElement(this.pathElementStart, getPathElementText(true),, +				newPE = new LiteralPathElement(this.pathElementStart, getPathElementText(true),, +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/CaptureTheRestPathElement.java, +			matchingContext.set(variableName, decode(new String(matchingContext.candidate, candidateIndex,, +					matchingContext.candidateLength - candidateIndex)));, +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/CaptureVariablePathElement.java, +import java.io.UnsupportedEncodingException;, +import java.nio.charset.StandardCharsets;, +import org.springframework.web.util.UriUtils;, +, +		String substringForDecoding = null;, +			if (includesPercent(matchingContext.candidate, candidateIndex, nextPos)) {, +				substringForDecoding = new String(matchingContext.candidate, candidateIndex, nextPos);, +				try {, +					candidateCapture = UriUtils.decode(substringForDecoding,StandardCharsets.UTF_8.name());, +				}, +				catch (UnsupportedEncodingException e) {, +					throw new IllegalStateException(e);, +				}, +			}, +			else {, +			}]