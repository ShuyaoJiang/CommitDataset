[+++ b/org.springframework.core/src/main/java/org/springframework/core/type/classreading/AnnotationMetadataReadingVisitor.java, +import java.util.List;, +import org.springframework.util.CollectionUtils;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, + * @author Costin Leau, +	private final Map<String, Set<String>> metaAnnotationMap = new LinkedHashMap<String, Set<String>>(4);, +	private final Map<String, Map<String, Object>> attributeMap = new LinkedHashMap<String, Map<String, Object>>(4);, +	private final MultiValueMap<String, MethodMetadata> methodMetadataMap = new LinkedMultiValueMap<String, MethodMetadata>();, +		return new MethodMetadataReadingVisitor(name, access, this.getClassName(), this.classLoader, methodMetadataMap);, +		return methodMetadataMap.containsKey(annotationType);, +		List<MethodMetadata> list = methodMetadataMap.get(annotationType);, +		if (CollectionUtils.isEmpty(list)) {, +			return new LinkedHashSet<MethodMetadata>(0);, +		Set<MethodMetadata> annotatedMethods = new LinkedHashSet<MethodMetadata>(list.size());, +		annotatedMethods.addAll(list);, +++ b/org.springframework.core/src/main/java/org/springframework/core/type/classreading/AnnotationMetadataReadingVisitor.java, +import java.util.List;, +import org.springframework.util.CollectionUtils;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, + * @author Costin Leau, +	private final Map<String, Set<String>> metaAnnotationMap = new LinkedHashMap<String, Set<String>>(4);, +	private final Map<String, Map<String, Object>> attributeMap = new LinkedHashMap<String, Map<String, Object>>(4);, +	private final MultiValueMap<String, MethodMetadata> methodMetadataMap = new LinkedMultiValueMap<String, MethodMetadata>();, +		return new MethodMetadataReadingVisitor(name, access, this.getClassName(), this.classLoader, methodMetadataMap);, +		return methodMetadataMap.containsKey(annotationType);, +		List<MethodMetadata> list = methodMetadataMap.get(annotationType);, +		if (CollectionUtils.isEmpty(list)) {, +			return new LinkedHashSet<MethodMetadata>(0);, +		Set<MethodMetadata> annotatedMethods = new LinkedHashSet<MethodMetadata>(list.size());, +		annotatedMethods.addAll(list);, +++ b/org.springframework.core/src/main/java/org/springframework/core/type/classreading/MethodMetadataReadingVisitor.java, +import org.springframework.util.MultiValueMap;, + * @author Costin Leau, +	private final MultiValueMap<String, MethodMetadata> methodMetadataMap;, +	private final Map<String, Map<String, Object>> attributeMap = new LinkedHashMap<String, Map<String, Object>>(2);, +	public MethodMetadataReadingVisitor(String name, int access, String declaringClassName, ClassLoader classLoader,, +			MultiValueMap<String, MethodMetadata> methodMetadataMap) {, +		this.methodMetadataMap = methodMetadataMap;, +		methodMetadataMap.add(className, this);, +++ b/org.springframework.core/src/main/java/org/springframework/core/type/classreading/AnnotationMetadataReadingVisitor.java, +import java.util.List;, +import org.springframework.util.CollectionUtils;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, + * @author Costin Leau, +	private final Map<String, Set<String>> metaAnnotationMap = new LinkedHashMap<String, Set<String>>(4);, +	private final Map<String, Map<String, Object>> attributeMap = new LinkedHashMap<String, Map<String, Object>>(4);, +	private final MultiValueMap<String, MethodMetadata> methodMetadataMap = new LinkedMultiValueMap<String, MethodMetadata>();, +		return new MethodMetadataReadingVisitor(name, access, this.getClassName(), this.classLoader, methodMetadataMap);, +		return methodMetadataMap.containsKey(annotationType);, +		List<MethodMetadata> list = methodMetadataMap.get(annotationType);, +		if (CollectionUtils.isEmpty(list)) {, +			return new LinkedHashSet<MethodMetadata>(0);, +		Set<MethodMetadata> annotatedMethods = new LinkedHashSet<MethodMetadata>(list.size());, +		annotatedMethods.addAll(list);, +++ b/org.springframework.core/src/main/java/org/springframework/core/type/classreading/MethodMetadataReadingVisitor.java, +import org.springframework.util.MultiValueMap;, + * @author Costin Leau, +	private final MultiValueMap<String, MethodMetadata> methodMetadataMap;, +	private final Map<String, Map<String, Object>> attributeMap = new LinkedHashMap<String, Map<String, Object>>(2);, +	public MethodMetadataReadingVisitor(String name, int access, String declaringClassName, ClassLoader classLoader,, +			MultiValueMap<String, MethodMetadata> methodMetadataMap) {, +		this.methodMetadataMap = methodMetadataMap;, +		methodMetadataMap.add(className, this);, +++ b/org.springframework.core/src/main/java/org/springframework/core/type/classreading/SimpleMetadataReader.java, + * @author Costin Leau, +	private final ClassMetadata classMetadata;, +	private final AnnotationMetadata annotationMetadata;, +		InputStream is = resource.getInputStream();, +		ClassReader classReader = null;, +			classReader = new ClassReader(is);, +		} finally {, +		AnnotationMetadataReadingVisitor visitor = new AnnotationMetadataReadingVisitor(classLoader);, +		classReader.accept(visitor, true);, +		, +		this.annotationMetadata = visitor;, +		// (since AnnotationMetadataReader extends ClassMetadataReadingVisitor), +		this.classMetadata = visitor;, +		this.resource = resource;, +	}, +++ b/org.springframework.core/src/main/java/org/springframework/core/type/classreading/AnnotationMetadataReadingVisitor.java, +import java.util.List;, +import org.springframework.util.CollectionUtils;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, + * @author Costin Leau, +	private final Map<String, Set<String>> metaAnnotationMap = new LinkedHashMap<String, Set<String>>(4);, +	private final Map<String, Map<String, Object>> attributeMap = new LinkedHashMap<String, Map<String, Object>>(4);, +	private final MultiValueMap<String, MethodMetadata> methodMetadataMap = new LinkedMultiValueMap<String, MethodMetadata>();, +		return new MethodMetadataReadingVisitor(name, access, this.getClassName(), this.classLoader, methodMetadataMap);, +		return methodMetadataMap.containsKey(annotationType);, +		List<MethodMetadata> list = methodMetadataMap.get(annotationType);, +		if (CollectionUtils.isEmpty(list)) {, +			return new LinkedHashSet<MethodMetadata>(0);, +		Set<MethodMetadata> annotatedMethods = new LinkedHashSet<MethodMetadata>(list.size());, +		annotatedMethods.addAll(list);, +++ b/org.springframework.core/src/main/java/org/springframework/core/type/classreading/MethodMetadataReadingVisitor.java, +import org.springframework.util.MultiValueMap;]