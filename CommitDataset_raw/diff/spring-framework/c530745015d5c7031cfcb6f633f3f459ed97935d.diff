[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java, + * @author Sebastien Deleuze, +	/**, +	 * Read the body from a method argument with {@link HttpMessageReader}., +	 * @param bodyParameter the {@link MethodParameter} to read, +	 * @param isBodyRequired true if the body is required, +	 * @param bindingContext the binding context to use, +	 * @param exchange the current exchange, +	 * @return the body, +	 * @see #readBody(MethodParameter, MethodParameter, boolean, BindingContext, ServerWebExchange), +	 */, +		return this.readBody(bodyParameter, null, isBodyRequired, bindingContext, exchange);, +	}, +, +	/**, +	 * Read the body from a method argument with {@link HttpMessageReader}., +	 * @param bodyParameter the {@link MethodParameter} to read, +	 * @param actualParameter the actual {@link MethodParameter} to read; could be different, +	 * from {@code bodyParameter} when processing {@code HttpEntity} for example, +	 * @param isBodyRequired true if the body is required, +	 * @param bindingContext the binding context to use, +	 * @param exchange the current exchange, +	 * @return the body, +	 * @since 5.0.2, +	 */, +	protected Mono<Object> readBody(MethodParameter bodyParameter, @Nullable MethodParameter actualParameter,, +			boolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange) {, +		ResolvableType actualType = (actualParameter == null ?, +				bodyType : ResolvableType.forMethodParameter(actualParameter));, +					Flux<?> flux = reader.read(actualType, elementType, request, response, readHints);, +					Mono<?> mono = reader.readMono(actualType, elementType, request, response, readHints);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java, + * @author Sebastien Deleuze, +	/**, +	 * Read the body from a method argument with {@link HttpMessageReader}., +	 * @param bodyParameter the {@link MethodParameter} to read, +	 * @param isBodyRequired true if the body is required, +	 * @param bindingContext the binding context to use, +	 * @param exchange the current exchange, +	 * @return the body, +	 * @see #readBody(MethodParameter, MethodParameter, boolean, BindingContext, ServerWebExchange), +	 */, +		return this.readBody(bodyParameter, null, isBodyRequired, bindingContext, exchange);, +	}, +, +	/**, +	 * Read the body from a method argument with {@link HttpMessageReader}., +	 * @param bodyParameter the {@link MethodParameter} to read, +	 * @param actualParameter the actual {@link MethodParameter} to read; could be different, +	 * from {@code bodyParameter} when processing {@code HttpEntity} for example, +	 * @param isBodyRequired true if the body is required, +	 * @param bindingContext the binding context to use, +	 * @param exchange the current exchange, +	 * @return the body, +	 * @since 5.0.2, +	 */, +	protected Mono<Object> readBody(MethodParameter bodyParameter, @Nullable MethodParameter actualParameter,, +			boolean isBodyRequired, BindingContext bindingContext, ServerWebExchange exchange) {, +		ResolvableType actualType = (actualParameter == null ?, +				bodyType : ResolvableType.forMethodParameter(actualParameter));, +					Flux<?> flux = reader.read(actualType, elementType, request, response, readHints);, +					Mono<?> mono = reader.readMono(actualType, elementType, request, response, readHints);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, + * @author Sebastien Deleuze, +	/**, +	 * Write a given body to the response with {@link HttpMessageWriter}., +	 * @param body the object to write, +	 * @param bodyParameter the {@link MethodParameter} of the body to write, +	 * @param exchange the current exchange, +	 * @return indicates completion or error, +	 * @see #writeBody(Object, MethodParameter, MethodParameter, ServerWebExchange), +	 */, +		return this.writeBody(body, bodyParameter, null, exchange);, +	}, +, +	/**, +	 * Write a given body to the response with {@link HttpMessageWriter}., +	 * @param body the object to write, +	 * @param bodyParameter the {@link MethodParameter} of the body to write, +	 * @param actualParameter the actual return type of the method that returned the, +	 * value; could be different from {@code bodyParameter} when processing {@code HttpEntity}, +	 * for example, +	 * @param exchange the current exchange, +	 * @return indicates completion or error, +	 * @since 5.0.2, +	 */, +	@SuppressWarnings("unchecked"), +	protected Mono<Void> writeBody(@Nullable Object body, MethodParameter bodyParameter,, +			@Nullable MethodParameter actualParameter, ServerWebExchange exchange) {, +, +		ResolvableType actualType = (actualParameter == null ?, +				bodyType : ResolvableType.forMethodParameter(actualParameter));, +					return writer.write((Publisher) publisher, actualType, elementType,, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java, + * @author Sebastien Deleuze, +	/**, +	 * Read the body from a method argument with {@link HttpMessageReader}., +	 * @param bodyParameter the {@link MethodParameter} to read, +	 * @param isBodyRequired true if the body is required, +	 * @param bindingContext the binding context to use]