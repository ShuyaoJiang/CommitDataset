[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +import org.springframework.core.annotation.MergedAnnotation;, +import org.springframework.core.annotation.MergedAnnotations;, +import org.springframework.core.annotation.MergedAnnotations.SearchStrategy;, +						MergedAnnotation<?> ann = findAutowiredAnnotation(candidate);, +				MergedAnnotation<?> ann = findAutowiredAnnotation(field);, +				MergedAnnotation<?> ann = findAutowiredAnnotation(bridgedMethod);, +	private MergedAnnotation<?> findAutowiredAnnotation(AccessibleObject ao) {, +		MergedAnnotations annotations = MergedAnnotations.from(ao, SearchStrategy.INHERITED_ANNOTATIONS);, +			MergedAnnotation<?> annotation = annotations.get(type);, +			if (annotation.isPresent()) {, +				return annotation;, +	protected boolean determineRequiredStatus(MergedAnnotation<?> ann) {, +		return determineRequiredStatus(, +				ann.asMap(mergedAnnotation -> new AnnotationAttributes()));, +	}, +, +	/**, +	 * Determine if the annotated field or method requires its dependency., +	 * <p>A 'required' dependency means that autowiring should fail when no beans, +	 * are found. Otherwise, the autowiring process will simply bypass the field, +	 * or method when no beans are found., +	 * @param ann the Autowired annotation, +	 * @return whether the annotation indicates that a dependency is required, +	 * @deprecated since 5.2 in favor of {@link #determineRequiredStatus(MergedAnnotation)}, +	 */, +	@Deprecated]