[+++ b/spring-context/src/main/java/org/springframework/context/annotation/Bean.java, +import org.springframework.core.annotation.AliasFor;, + * <p>While a {@link #name} attribute is available, the default strategy for, + * determining the name of a bean is to use the name of the {@code @Bean} method. This, + * is convenient and intuitive, but if explicit naming is desired, the {@code name}, + * attribute (or its alias {@code value}) may be used. Also note that {@code name}, + * accepts an array of Strings. This is in order to allow for specifying multiple names, + * (i.e., aliases) for a single bean., + *     &#064;Bean({"b1","b2"}) // bean available as 'b1' and 'b2', but not 'myBean', +	 * Alias for {@link #name}., +	 * <p>Intended to be used when no other attributes are needed, for example:, +	 * {@code @Bean("customBeanName")}., +	 * @since 5.0, +	 * @see #name, +	@AliasFor("name"), +	String[] value() default {};, +, +	/**, +	 * The name of this bean, or if plural, aliases for this bean., +	 * <p>If left unspecified the name of the bean is the name of the annotated method., +	 * If specified, the method name is ignored., +	 * <p>The bean name and aliases may also be configured via the {@link #value}, +	 * attribute if no other attributes are declared., +	 * @see #value, +	 */, +	@AliasFor("value"), +++ b/spring-context/src/main/java/org/springframework/context/annotation/Bean.java, +import org.springframework.core.annotation.AliasFor;, + * <p>While a {@link #name} attribute is available, the default strategy for, + * determining the name of a bean is to use the name of the {@code @Bean} method. This, + * is convenient and intuitive, but if explicit naming is desired, the {@code name}, + * attribute (or its alias {@code value}) may be used. Also note that {@code name}, + * accepts an array of Strings. This is in order to allow for specifying multiple names, + * (i.e., aliases) for a single bean., + *     &#064;Bean({"b1","b2"}) // bean available as 'b1' and 'b2', but not 'myBean', +	 * Alias for {@link #name}., +	 * <p>Intended to be used when no other attributes are needed, for example:, +	 * {@code @Bean("customBeanName")}., +	 * @since 5.0, +	 * @see #name, +	@AliasFor("name"), +	String[] value() default {};, +, +	/**, +	 * The name of this bean, or if plural, aliases for this bean., +	 * <p>If left unspecified the name of the bean is the name of the annotated method., +	 * If specified, the method name is ignored., +	 * <p>The bean name and aliases may also be configured via the {@link #value}, +	 * attribute if no other attributes are declared., +	 * @see #value, +	 */, +	@AliasFor("value"), +++ b/spring-context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassProcessingTests.java, +import java.util.function.Supplier;, +, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, + * @author Sam Brannen, +	@Rule, +	public final ExpectedException exception = ExpectedException.none();, +, +, +	public void customBeanNameIsRespectedWhenConfiguredViaNameAttribute() {, +		customBeanNameIsRespected(ConfigWithBeanWithCustomName.class,, +				() -> ConfigWithBeanWithCustomName.testBean, "customName");, +	}, +, +	@Test, +	public void customBeanNameIsRespectedWhenConfiguredViaValueAttribute() {, +		customBeanNameIsRespected(ConfigWithBeanWithCustomNameConfiguredViaValueAttribute.class,, +				() -> ConfigWithBeanWithCustomNameConfiguredViaValueAttribute.testBean, "enigma");, +	}, +, +	private void customBeanNameIsRespected(Class<?> testClass, Supplier<TestBean> testBeanSupplier, String beanName) {, +		ac.registerBeanDefinition("config", new RootBeanDefinition(testClass));, +, +		assertSame(testBeanSupplier.get(), ac.getBean(beanName));, +		exception.expect(NoSuchBeanDefinitionException.class);, +	public void aliasesAreRespectedWhenConfiguredViaNameAttribute() {, +		aliasesAreRespected(ConfigWithBeanWithAliases.class,, +				() -> ConfigWithBeanWithAliases.testBean, "name1");, +	}, +, +	@Test, +	public void aliasesAreRespectedWhenConfiguredViaValueAttribute() {, +		aliasesAreRespected(ConfigWithBeanWithAliasesConfiguredViaValueAttribute.class,, +				() -> ConfigWithBeanWithAliasesConfiguredViaValueAttribute.testBean, "enigma");, +	}, +, +	private void aliasesAreRespected(Class<?> testClass, Supplier<TestBean> testBeanSupplier, String beanName) {, +		TestBean testBean = testBeanSupplier.get();, +		BeanFactory factory = initBeanFactory(testClass);, +, +		assertSame(testBean, factory.getBean(beanName));, +		Arrays.stream(factory.getAliases(beanName)).map(factory::getBean).forEach(alias -> assertSame(testBean, alias));, +		exception.expect(NoSuchBeanDefinitionException.class);, +	@Test, +		exception.expect(BeanDefinitionParsingException.class);, +		factory.close();, +		factory.close();]