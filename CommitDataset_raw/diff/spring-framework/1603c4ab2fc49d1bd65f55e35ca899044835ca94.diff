[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, + * Copyright 2002-2018 the original author or authors., +	 * @param requiredType type the bean must match; can be an interface or superclass, +	<T> T getBean(String name, Class<T> requiredType) throws BeansException;, +	 * @param requiredType type the bean must match; can be an interface or superclass, +	 * @param requiredType type the bean must match; can be an interface or superclass, +	/**, +	 * Return an provider for the specified bean, allowing for lazy on-demand retrieval, +	 * of instances, including availability and uniqueness options., +	 * @param requiredType type the bean must match; can be an interface or superclass, +	 * @return a corresponding provider handle, +	 * @since 5.1, +	 */, +	<T> ObjectProvider<T> getBeanProvider(Class<T> requiredType);, +, +	/**, +	 * Return an provider for the specified bean, allowing for lazy on-demand retrieval, +	 * of instances, including availability and uniqueness options., +	 * @param requiredType type the bean must match; can be a generic type declaration, +	 * @return a corresponding provider handle, +	 * @since 5.1, +	 */, +	<T> ObjectProvider<T> getBeanProvider(ResolvableType requiredType);, +	boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, + * Copyright 2002-2018 the original author or authors., +	 * @param requiredType type the bean must match; can be an interface or superclass, +	<T> T getBean(String name, Class<T> requiredType) throws BeansException;, +	 * @param requiredType type the bean must match; can be an interface or superclass, +	 * @param requiredType type the bean must match; can be an interface or superclass, +	/**, +	 * Return an provider for the specified bean, allowing for lazy on-demand retrieval, +	 * of instances, including availability and uniqueness options., +	 * @param requiredType type the bean must match; can be an interface or superclass, +	 * @return a corresponding provider handle, +	 * @since 5.1, +	 */, +	<T> ObjectProvider<T> getBeanProvider(Class<T> requiredType);, +, +	/**, +	 * Return an provider for the specified bean, allowing for lazy on-demand retrieval, +	 * of instances, including availability and uniqueness options., +	 * @param requiredType type the bean must match; can be a generic type declaration, +	 * @return a corresponding provider handle, +	 * @since 5.1, +	 */, +	<T> ObjectProvider<T> getBeanProvider(ResolvableType requiredType);, +	boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/NoUniqueBeanDefinitionException.java, +import org.springframework.core.ResolvableType;, +	/**, +	 * Create a new {@code NoUniqueBeanDefinitionException}., +	 * @param type required type of the non-unique bean, +	 * @param beanNamesFound the names of all matching beans (as a Collection), +	 * @since 5.1, +	 */, +	public NoUniqueBeanDefinitionException(ResolvableType type, Collection<String> beanNamesFound) {, +		super(type, "expected single matching bean but found " + beanNamesFound.size() + ": " +, +				StringUtils.collectionToCommaDelimitedString(beanNamesFound));, +		this.numberOfBeansFound =  beanNamesFound.size();, +		this.beanNamesFound = beanNamesFound;, +	}, +, +	/**, +	 * Create a new {@code NoUniqueBeanDefinitionException}., +	 * @param type required type of the non-unique bean, +	 * @param beanNamesFound the names of all matching beans (as an array), +	 * @since 5.1, +	 */, +	public NoUniqueBeanDefinitionException(ResolvableType type, String... beanNamesFound) {, +		this(type, Arrays.asList(beanNamesFound));, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, + * Copyright 2002-2018 the original author or authors., +	 * @param requiredType type the bean must match; can be an interface or superclass, +	<T> T getBean(String name, Class<T> requiredType) throws BeansException;, +	 * @param requiredType type the bean must match; can be an interface or superclass, +	 * @param requiredType type the bean must match; can be an interface or superclass, +	/**, +	 * Return an provider for the specified bean, allowing for lazy on-demand retrieval, +	 * of instances, including availability and uniqueness options., +	 * @param requiredType type the bean must match; can be an interface or superclass, +	 * @return a corresponding provider handle, +	 * @since 5.1, +	 */, +	<T> ObjectProvider<T> getBeanProvider(Class<T> requiredType);, +, +	/**, +	 * Return an provider for the specified bean, allowing for lazy on-demand retrieval, +	 * of instances, including availability and uniqueness options., +	 * @param requiredType type the bean must match; can be a generic type declaration, +	 * @return a corresponding provider handle, +	 * @since 5.1, +	 */, +	<T> ObjectProvider<T> getBeanProvider(ResolvableType requiredType);, +	boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/NoUniqueBeanDefinitionException.java, +import org.springframework.core.ResolvableType;, +	/**]