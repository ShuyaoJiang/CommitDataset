[+++ b/spring-test/src/test/java/org/springframework/test/context/jdbc/MultipleDataSourcesAndTransactionManagersSqlScriptsTests.java, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +, +		assertUsers(new JdbcTemplate(dataSource1), "Dilbert", "Dogbert");, +		assertUsers(new JdbcTemplate(dataSource2), "Dilbert", "Catbert");, +	private void assertUsers(JdbcTemplate jdbcTemplate, String... users) {, +		List<String> expected = Arrays.asList(users);, +		Collections.sort(expected);, +		List<String> actual = jdbcTemplate.queryForList("select name from user", String.class);, +		Collections.sort(actual);, +		assertEquals("Users in database;", expected, actual);, +++ b/spring-test/src/test/java/org/springframework/test/context/jdbc/MultipleDataSourcesAndTransactionManagersSqlScriptsTests.java, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +, +		assertUsers(new JdbcTemplate(dataSource1), "Dilbert", "Dogbert");, +		assertUsers(new JdbcTemplate(dataSource2), "Dilbert", "Catbert");, +	private void assertUsers(JdbcTemplate jdbcTemplate, String... users) {, +		List<String> expected = Arrays.asList(users);, +		Collections.sort(expected);, +		List<String> actual = jdbcTemplate.queryForList("select name from user", String.class);, +		Collections.sort(actual);, +		assertEquals("Users in database;", expected, actual);, +++ b/spring-test/src/test/java/org/springframework/test/context/jdbc/MultipleDataSourcesAndTransactionManagersTransactionalSqlScriptsTests.java, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +, +		assertUsers(new JdbcTemplate(dataSource1), "Dilbert", "Dogbert");, +		assertUsers(new JdbcTemplate(dataSource2), "Dilbert", "Catbert");, +	private void assertUsers(JdbcTemplate jdbcTemplate, String... users) {, +		List<String> expected = Arrays.asList(users);, +		Collections.sort(expected);, +		List<String> actual = jdbcTemplate.queryForList("select name from user", String.class);, +		Collections.sort(actual);, +		assertEquals("Users in database;", expected, actual);, +++ b/spring-test/src/test/java/org/springframework/test/context/jdbc/MultipleDataSourcesAndTransactionManagersSqlScriptsTests.java, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +, +		assertUsers(new JdbcTemplate(dataSource1), "Dilbert", "Dogbert");, +		assertUsers(new JdbcTemplate(dataSource2), "Dilbert", "Catbert");, +	private void assertUsers(JdbcTemplate jdbcTemplate, String... users) {, +		List<String> expected = Arrays.asList(users);, +		Collections.sort(expected);, +		List<String> actual = jdbcTemplate.queryForList("select name from user", String.class);, +		Collections.sort(actual);, +		assertEquals("Users in database;", expected, actual);, +++ b/spring-test/src/test/java/org/springframework/test/context/jdbc/MultipleDataSourcesAndTransactionManagersTransactionalSqlScriptsTests.java, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +, +		assertUsers(new JdbcTemplate(dataSource1), "Dilbert", "Dogbert");, +		assertUsers(new JdbcTemplate(dataSource2), "Dilbert", "Catbert");, +	private void assertUsers(JdbcTemplate jdbcTemplate, String... users) {, +		List<String> expected = Arrays.asList(users);, +		Collections.sort(expected);, +		List<String> actual = jdbcTemplate.queryForList("select name from user", String.class);, +		Collections.sort(actual);, +		assertEquals("Users in database;", expected, actual);, +++ b/spring-test/src/test/java/org/springframework/test/context/testng/transaction/programmatic/ProgrammaticTxMgmtTestNGTests.java, +import java.util.Collections;, + * This class is a copy of the JUnit-based {@link ProgrammaticTxMgmtTests} class, + * that has been modified to run with TestNG., +	private String method;, +		this.method = testResult.getMethod().getMethodName();, +		switch (method) {, +			case "commitTxAndStartNewTx":, +			case "rollbackTxAndStartNewTx":, +			case "rollbackTxButDoNotStartNewTx":, +			case "startTxWithExistingTransaction": {, +				fail("missing 'after transaction' assertion for test method: " + method);, +		List<String> expected = Arrays.asList(users);, +		Collections.sort(expected);, +		List<String> actual = jdbcTemplate.queryForList("select name from user", String.class);, +		Collections.sort(actual);, +		assertEquals("Users in database;", expected, actual);, +++ b/spring-test/src/test/java/org/springframework/test/context/jdbc/MultipleDataSourcesAndTransactionManagersSqlScriptsTests.java, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +, +		assertUsers(new JdbcTemplate(dataSource1), "Dilbert", "Dogbert");, +		assertUsers(new JdbcTemplate(dataSource2), "Dilbert", "Catbert");, +	private void assertUsers(JdbcTemplate jdbcTemplate, String... users) {, +		List<String> expected = Arrays.asList(users);, +		Collections.sort(expected);, +		List<String> actual = jdbcTemplate.queryForList("select name from user", String.class);, +		Collections.sort(actual);, +		assertEquals("Users in database;", expected, actual);, +++ b/spring-test/src/test/java/org/springframework/test/context/jdbc/MultipleDataSourcesAndTransactionManagersTransactionalSqlScriptsTests.java, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +]