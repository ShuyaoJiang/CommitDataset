[+++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +	private static final Class<?> javaUtilOptionalClass;, +		Class<?> clazz;, +			clazz = ClassUtils.forName("java.util.Optional", MethodParameter.class.getClassLoader());, +			clazz = null;, +		javaUtilOptionalClass = clazz;, +	 * Return whether this method parameter is declared as optional, +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +	private static final Class<?> javaUtilOptionalClass;, +		Class<?> clazz;, +			clazz = ClassUtils.forName("java.util.Optional", MethodParameter.class.getClassLoader());, +			clazz = null;, +		javaUtilOptionalClass = clazz;, +	 * Return whether this method parameter is declared as optional, +++ b/spring-core/src/main/java/org/springframework/core/annotation/SynthesizingMethodParameter.java, +import java.lang.reflect.Constructor;, +	 * Create a new {@code SynthesizingMethodParameter} for the given method,, +	 * with nesting level 1., +	/**, +	 * Create a new {@code SynthesizingMethodParameter} for the given method., +	 * @param method the Method to specify a parameter for, +	 * @param parameterIndex the index of the parameter: -1 for the method, +	 * return type; 0 for the first method parameter; 1 for the second method, +	 * parameter, etc., +	 * @param nestingLevel the nesting level of the target type, +	 * (typically 1; e.g. in case of a List of Lists, 1 would indicate the, +	 * nested List, whereas 2 would indicate the element of the nested List), +	 */, +	public SynthesizingMethodParameter(Method method, int parameterIndex, int nestingLevel) {, +		super(method, parameterIndex, nestingLevel);, +	}, +, +	/**, +	 * Create a new {@code SynthesizingMethodParameter} for the given constructor,, +	 * with nesting level 1., +	 * @param constructor the Constructor to specify a parameter for, +	 * @param parameterIndex the index of the parameter, +	 */, +	public SynthesizingMethodParameter(Constructor<?> constructor, int parameterIndex) {, +		super(constructor, parameterIndex);, +	}, +, +	/**, +	 * Create a new {@code SynthesizingMethodParameter} for the given constructor., +	 * @param constructor the Constructor to specify a parameter for, +	 * @param parameterIndex the index of the parameter, +	 * @param nestingLevel the nesting level of the target type, +	 * (typically 1; e.g. in case of a List of Lists, 1 would indicate the, +	 * nested List, whereas 2 would indicate the element of the nested List), +	 */, +	public SynthesizingMethodParameter(Constructor<?> constructor, int parameterIndex, int nestingLevel) {, +		super(constructor, parameterIndex, nestingLevel);, +	}, +, +	/**, +	 * Copy constructor, resulting in an independent {@code SynthesizingMethodParameter}, +	 * based on the same metadata and cache state that the original object was in., +	 * @param original the original SynthesizingMethodParameter object to copy from, +	 */]