[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolver.java, + * A default implementation of {@link UserDestinationResolver} that relies, + * on the {@link org.springframework.messaging.simp.user.UserSessionRegistry}, + * provided to the constructor to find the sessionIds associated with a user, + * and then uses the sessionId to make the target destination unique., + * When a user attempts to subscribe to "/user/queue/position-updates", the, + * "/user" prefix is removed and a unique suffix added, resulting in something, + * like "/queue/position-updates-useri9oqdfzo" where the suffix is based on the, + * user's session and ensures it does not collide with any other users attempting, + * to subscribe to "/user/queue/position-updates"., + * <p>, + * When a message is sent to a user with a destination such as, + * "/user/{username}/queue/position-updates", the "/user/{username}" prefix is, + * removed and the suffix added, resulting in something like, + * "/queue/position-updates-useri9oqdfzo"., +	public UserDestinationResult resolveDestination(Message<?> message) {, +		DestinationInfo info = parseUserDestination(headers);, +			return null;, +		Set<String> targetDestinations = new HashSet<String>();, +			targetDestinations.add(getTargetDestination(, +					headers.getDestination(), info.getDestinationWithoutPrefix(), sessionId, info.getUser()));, +		return new UserDestinationResult(headers.getDestination(),, +				targetDestinations, info.getSubscribeDestination(), info.getUser());, +	private DestinationInfo parseUserDestination(SimpMessageHeaderAccessor headers) {, +		String destinationWithoutPrefix;, +		String subscribeDestination;, +		String user;, +		Set<String> sessionIds;, +			destinationWithoutPrefix = destination.substring(this.destinationPrefix.length()-1);, +			subscribeDestination = destination;, +			user = principal.getName();, +			sessionIds = Collections.singleton(headers.getSessionId());, +			destinationWithoutPrefix = destination.substring(endIndex);, +			subscribeDestination = this.destinationPrefix.substring(0, startIndex-1) + destinationWithoutPrefix;, +			user = destination.substring(startIndex, endIndex);, +			user = StringUtils.replace(user, "%2F", "/");, +			sessionIds = this.userSessionRegistry.getSessionIds(user);, +		return new DestinationInfo(destinationWithoutPrefix, subscribeDestination, user, sessionIds);, +	/**, +	 * Return the target destination to use. Provided as input are the original source, +	 * destination, as well as the same destination with the target prefix removed., +	 *, +	 * @param sourceDestination the source destination from the input message, +	 * @param sourceDestinationWithoutPrefix the source destination with the target prefix removed, +	 * @param sessionId an active user session id, +	 * @param user the user, +	 * @return the target destination, +	 */, +	protected String getTargetDestination(String sourceDestination,, +			String sourceDestinationWithoutPrefix, String sessionId, String user) {, +		return sourceDestinationWithoutPrefix + "-user" + sessionId;, +	private static class DestinationInfo {, +, +		private final String destinationWithoutPrefix;, +, +		private final String subscribeDestination;, +, +		private DestinationInfo(String destinationWithoutPrefix, String subscribeDestination, String user,, +				Set<String> sessionIds) {, +, +			this.destinationWithoutPrefix = destinationWithoutPrefix;, +			this.subscribeDestination = subscribeDestination;, +		public String getDestinationWithoutPrefix() {, +			return this.destinationWithoutPrefix;, +		}, +, +		public String getSubscribeDestination() {, +			return this.subscribeDestination;, +		}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolver.java, + * A default implementation of {@link UserDestinationResolver} that relies, + * on the {@link org.springframework.messaging.simp.user.UserSessionRegistry}, + * provided to the constructor to find the sessionIds associated with a user, + * and then uses the sessionId to make the target destination unique., + * When a user attempts to subscribe to "/user/queue/position-updates", the, + * "/user" prefix is removed and a unique suffix added, resulting in something, + * like "/queue/position-updates-useri9oqdfzo" where the suffix is based on the, + * user's session and ensures it does not collide with any other users attempting, + * to subscribe to "/user/queue/position-updates"., + * <p>, + * When a message is sent to a user with a destination such as, + * "/user/{username}/queue/position-updates", the "/user/{username}" prefix is, + * removed and the suffix added, resulting in something like, + * "/queue/position-updates-useri9oqdfzo"., +	public UserDestinationResult resolveDestination(Message<?> message) {, +		DestinationInfo info = parseUserDestination(headers);, +			return null;, +		Set<String> targetDestinations = new HashSet<String>();, +			targetDestinations.add(getTargetDestination(, +					headers.getDestination(), info.getDestinationWithoutPrefix(), sessionId, info.getUser()));, +		return new UserDestinationResult(headers.getDestination(),, +				targetDestinations, info.getSubscribeDestination(), info.getUser());, +	private DestinationInfo parseUserDestination(SimpMessageHeaderAccessor headers) {, +		String destinationWithoutPrefix;, +		String subscribeDestination;, +		String user;, +		Set<String> sessionIds;, +			destinationWithoutPrefix = destination.substring(this.destinationPrefix.length()-1);, +			subscribeDestination = destination;]