[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +			return convertNull(sourceType, targetType);, +	protected Object convertNull(TypeDescriptor sourceType, TypeDescriptor targetType) {, +		return null;, +	}, +	, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +			return convertNull(sourceType, targetType);, +	protected Object convertNull(TypeDescriptor sourceType, TypeDescriptor targetType) {, +		return null;, +	}, +	, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ObjectToArrayGenericConverter.java, +		Object target = Array.newInstance(targetElementType.getType(), 1);, +			Array.set(target, 0, source);			, +			Array.set(target, 0, converter.convert(source, sourceType, targetElementType));, +		return target;, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +			return convertNull(sourceType, targetType);, +	protected Object convertNull(TypeDescriptor sourceType, TypeDescriptor targetType) {, +		return null;, +	}, +	, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ObjectToArrayGenericConverter.java, +		Object target = Array.newInstance(targetElementType.getType(), 1);, +			Array.set(target, 0, source);			, +			Array.set(target, 0, converter.convert(source, sourceType, targetElementType));, +		return target;, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ObjectToCollectionGenericConverter.java, +import java.util.Collection;, +, +import org.springframework.core.CollectionFactory;, +		Collection target = CollectionFactory.createCollection(targetType.getType(), 1);, +		TypeDescriptor targetElementType = targetType.getElementTypeDescriptor();, +		if (targetElementType == TypeDescriptor.NULL || sourceType.isAssignableTo(targetElementType)) {, +			target.add(source);, +		} else {, +			GenericConverter converter = conversionService.getConverter(sourceType, targetElementType);, +			target.add(converter.convert(source, sourceType, targetElementType));, +		}, +		return target;]