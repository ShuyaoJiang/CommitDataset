[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/WebContentInterceptor.java, +	private Map<String, Integer> cacheMappings = new HashMap<String, Integer>();, +, +	private Map<String, CacheControl> cacheControlMappings = new HashMap<String, CacheControl>();, +			this.cacheMappings.put(path, cacheSeconds);, +			this.cacheControlMappings.put(path, cacheControl);, +		CacheControl cacheControl = lookupCacheControl(lookupPath);, +		Integer cacheSeconds = lookupCacheSeconds(lookupPath);, +		else if (cacheSeconds != null) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("Applying CacheControl to [" + lookupPath + "]");, +			}, +			checkAndPrepare(request, response, cacheSeconds);, +		}, +	protected CacheControl lookupCacheControl(String urlPath) {, +		CacheControl cacheControl = this.cacheControlMappings.get(urlPath);, +			for (String registeredPath : this.cacheControlMappings.keySet()) {, +					cacheControl = this.cacheControlMappings.get(registeredPath);, +	/**, +	 * Look up a cacheSeconds integer value for the given URL path., +	 * <p>Supports direct matches, e.g. a registered "/test" matches "/test",, +	 * and various Ant-style pattern matches, e.g. a registered "/t*" matches, +	 * both "/test" and "/team". For details, see the AntPathMatcher class., +	 * @param urlPath URL the bean is mapped to, +	 * @return the cacheSeconds integer value, or {@code null} if not found, +	 * @see org.springframework.util.AntPathMatcher, +	 */, +	protected Integer lookupCacheSeconds(String urlPath) {, +		// direct match?, +		Integer cacheSeconds = this.cacheMappings.get(urlPath);, +		if (cacheSeconds == null) {, +			// pattern match?, +			for (String registeredPath : this.cacheMappings.keySet()) {, +				if (this.pathMatcher.match(registeredPath, urlPath)) {, +					cacheSeconds = this.cacheMappings.get(registeredPath);, +				}, +			}, +		}, +		return cacheSeconds;, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/WebContentInterceptor.java, +	private Map<String, Integer> cacheMappings = new HashMap<String, Integer>();, +, +	private Map<String, CacheControl> cacheControlMappings = new HashMap<String, CacheControl>();, +			this.cacheMappings.put(path, cacheSeconds);, +			this.cacheControlMappings.put(path, cacheControl);, +		CacheControl cacheControl = lookupCacheControl(lookupPath);, +		Integer cacheSeconds = lookupCacheSeconds(lookupPath);, +		else if (cacheSeconds != null) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("Applying CacheControl to [" + lookupPath + "]");, +			}, +			checkAndPrepare(request, response, cacheSeconds);, +		}, +	protected CacheControl lookupCacheControl(String urlPath) {, +		CacheControl cacheControl = this.cacheControlMappings.get(urlPath);, +			for (String registeredPath : this.cacheControlMappings.keySet()) {, +					cacheControl = this.cacheControlMappings.get(registeredPath);, +	/**, +	 * Look up a cacheSeconds integer value for the given URL path., +	 * <p>Supports direct matches, e.g. a registered "/test" matches "/test",, +	 * and various Ant-style pattern matches, e.g. a registered "/t*" matches, +	 * both "/test" and "/team". For details, see the AntPathMatcher class., +	 * @param urlPath URL the bean is mapped to, +	 * @return the cacheSeconds integer value, or {@code null} if not found, +	 * @see org.springframework.util.AntPathMatcher, +	 */, +	protected Integer lookupCacheSeconds(String urlPath) {, +		// direct match?, +		Integer cacheSeconds = this.cacheMappings.get(urlPath);, +		if (cacheSeconds == null) {, +			// pattern match?, +			for (String registeredPath : this.cacheMappings.keySet()) {, +				if (this.pathMatcher.match(registeredPath, urlPath)) {, +					cacheSeconds = this.cacheMappings.get(registeredPath);, +				}, +			}, +		}, +		return cacheSeconds;, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/WebContentGenerator.java, +		checkRequest(request);, +		if (this.usePreviousHttpCachingBehavior) {, +			addHttp10CacheHeaders(cacheSeconds, response);, +		}, +		else {, +			String ccValue = cControl.getHeaderValue();, +			if (ccValue != null) {, +				response.setHeader(HEADER_CACHE_CONTROL, ccValue);, +			}, +		}, +	}, +, +	protected final void checkRequest(HttpServletRequest request) throws ServletException {, +		// Check whether we should support the request method., +		String method = request.getMethod();, +		if (this.supportedMethods != null && !this.supportedMethods.contains(method)) {, +			throw new HttpRequestMethodNotSupportedException(]