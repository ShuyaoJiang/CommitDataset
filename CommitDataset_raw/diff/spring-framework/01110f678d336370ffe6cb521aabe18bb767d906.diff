[+++ b/build.gradle, +++ b/build.gradle, +++ /dev/null, +++ b/build.gradle, +++ /dev/null, +++ b/spring-core/src/test/java/org/springframework/tests/TestGroup.java, +	CI;, +++ b/build.gradle, +++ /dev/null, +++ b/spring-core/src/test/java/org/springframework/tests/TestGroup.java, +	CI;, +++ b/spring-core/src/test/java/org/springframework/tests/TestGroupTests.java, +, +				"[LONG_RUNNING,PERFORMANCE,JMXMP,CI]");, +		assertThat(TestGroup.parse("all-performance"), equalTo(expected));, +++ b/build.gradle, +++ /dev/null, +++ b/spring-core/src/test/java/org/springframework/tests/TestGroup.java, +	CI;, +++ b/spring-core/src/test/java/org/springframework/tests/TestGroupTests.java, +, +				"[LONG_RUNNING,PERFORMANCE,JMXMP,CI]");, +		assertThat(TestGroup.parse("all-performance"), equalTo(expected));, +++ b/spring-oxm/oxm.gradle, +	jibx "org.apache.bcel:bcel:6.0", +// JiBX compiler is currently not compatible with JDK 9, +if (JavaVersion.current() == JavaVersion.VERSION_1_8) {, +++ b/build.gradle, +++ /dev/null, +++ b/spring-core/src/test/java/org/springframework/tests/TestGroup.java, +	CI;, +++ b/spring-core/src/test/java/org/springframework/tests/TestGroupTests.java, +, +				"[LONG_RUNNING,PERFORMANCE,JMXMP,CI]");, +		assertThat(TestGroup.parse("all-performance"), equalTo(expected));, +++ b/spring-oxm/oxm.gradle, +	jibx "org.apache.bcel:bcel:6.0", +// JiBX compiler is currently not compatible with JDK 9, +if (JavaVersion.current() == JavaVersion.VERSION_1_8) {, +++ b/spring-oxm/src/test/java/org/springframework/oxm/jibx/Flights.java, +	protected ArrayList<FlightType> flightList = new ArrayList<>();, +++ b/build.gradle, +++ /dev/null, +++ b/spring-core/src/test/java/org/springframework/tests/TestGroup.java, +	CI;, +++ b/spring-core/src/test/java/org/springframework/tests/TestGroupTests.java, +, +				"[LONG_RUNNING,PERFORMANCE,JMXMP,CI]");, +		assertThat(TestGroup.parse("all-performance"), equalTo(expected));, +++ b/spring-oxm/oxm.gradle, +	jibx "org.apache.bcel:bcel:6.0", +// JiBX compiler is currently not compatible with JDK 9, +if (JavaVersion.current() == JavaVersion.VERSION_1_8) {, +++ b/spring-oxm/src/test/java/org/springframework/oxm/jibx/Flights.java, +	protected ArrayList<FlightType> flightList = new ArrayList<>();, +++ b/spring-oxm/src/test/java/org/springframework/oxm/jibx/JibxMarshallerTests.java, + * Copyright 2002-2016 the original author or authors., +import java.io.StringWriter;, +import javax.xml.transform.stream.StreamResult;, +, +import org.junit.Assume;, +, +import static org.junit.Assert.*;, +import static org.xmlunit.matchers.CompareMatcher.*;, +		// JiBX compiler is currently not compatible with JDK 9, +		Assume.assumeTrue(System.getProperty("java.version").startsWith("1.8."));, +++ b/build.gradle, +++ /dev/null, +++ b/spring-core/src/test/java/org/springframework/tests/TestGroup.java, +	CI;, +++ b/spring-core/src/test/java/org/springframework/tests/TestGroupTests.java, +, +				"[LONG_RUNNING,PERFORMANCE,JMXMP,CI]");, +		assertThat(TestGroup.parse("all-performance"), equalTo(expected));, +++ b/spring-oxm/oxm.gradle, +	jibx "org.apache.bcel:bcel:6.0", +// JiBX compiler is currently not compatible with JDK 9, +if (JavaVersion.current() == JavaVersion.VERSION_1_8) {, +++ b/spring-oxm/src/test/java/org/springframework/oxm/jibx/Flights.java, +	protected ArrayList<FlightType> flightList = new ArrayList<>();, +++ b/spring-oxm/src/test/java/org/springframework/oxm/jibx/JibxMarshallerTests.java, + * Copyright 2002-2016 the original author or authors., +import java.io.StringWriter;, +import javax.xml.transform.stream.StreamResult;, +, +import org.junit.Assume;, +, +import static org.junit.Assert.*;, +import static org.xmlunit.matchers.CompareMatcher.*;, +		// JiBX compiler is currently not compatible with JDK 9, +		Assume.assumeTrue(System.getProperty("java.version").startsWith("1.8."));, +++ b/spring-oxm/src/test/java/org/springframework/oxm/jibx/JibxUnmarshallerTests.java, + * Copyright 2002-2016 the original author or authors., +import org.junit.Assume;, +, +		// JiBX compiler is currently not compatible with JDK 9, +		Assume.assumeTrue(System.getProperty("java.version").startsWith("1.8."));]