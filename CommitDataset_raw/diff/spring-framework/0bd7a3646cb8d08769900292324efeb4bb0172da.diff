[+++ b/src/docs/asciidoc/web/web-uris.adoc, +`UriComponentsBuilder` exposes encoding options at 2 levels:, +, +. {api-spring-framework}/web/util/UriComponentsBuilder.html#encode--[UriComponentsBuilder#encode()] -, +pre-encodes the URI template first, then strictly encodes URI variables when expanded., +. {api-spring-framework}/web/util/UriComponents.html#encode--[UriComponents#encode()] -, +encodes URI components _after_ URI variables are expanded., +, +Both options replace non-ASCII and illegal characters with escaped octets, however option, +1 also replaces characters with reserved meaning that appear in URI variables., +, +[TIP], +====, +Consider ";" which is legal in a path but has reserved meaning. Option 1 replaces, +";" with "%3B" in URI variables but not in the URI template. By contrast, option 2 never, +replaces ";" since it is a legal character in a path., +====, +, +For most cases option 1 is likely to give the expected result because in treats URI, +variables as opaque data to be fully encoded, while option 2 is useful only if, +intentionally expanding URI variables that contain reserved characters., +, +Example usage using option 1:, +	UriComponentsBuilder.fromPath("/hotel list/{city}"), +			.buildAndexpand("New York", "foo+bar"), +			.toUriString();, +, +	// Result is "/hotel%20list/New%20York?foo%2Bbar", +The `WebClient` and the `RestTemplate` expand and encode URI templates internally through, +the `UriBuilderFactory` strategy. Both can be configured wiht a custom instance:, +The `DefaultUriBuilderFactory` implementation shown above uses `UriComponentsBuilder`, +internally. The approach to encoding is controlled through one of the encoding modes, +listed below:, +* `TEMPLATE_AND_VALUES` -- uses `UriComponentsBuilder#encode()`, corresponding to option, +1 above, to pre-encode the URI template and strictly encode URI variables when expanded., +* `VALUES_ONLY` -- variant of `TEMPLATE_AND_VALUES` that does not encode the URI template., +* `URI_COMPONENTS` -- uses `UriComponents#encode()`, corresponding to option 2 above, to, +encode URI component value _after_ URI variables are expanded., +* `NONE` -- no encoding is applied., +Out of the box the `RestTemplate` uses `EncodingMode.URI_COMPONENTS` for historic reasons, +and for backwards compatibility. The `WebClient` uses `EncodingMode.TEMPLATE_AND_VALUES`, +starting in 5.1, and `EncodingMode.URI_COMPONENTS` in 5.0.x.]