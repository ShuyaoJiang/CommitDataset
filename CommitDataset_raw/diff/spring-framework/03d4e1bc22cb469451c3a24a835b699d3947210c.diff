[+++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +	 * @param method the method to find a corresponding PropertyDescriptor for,, +	 * introspecting its declaring class, +		return findPropertyForMethod(method, method.getDeclaringClass());, +	}, +, +	/**, +	 * Find a JavaBeans {@code PropertyDescriptor} for the given method,, +	 * with the method either being the read method or the write method for, +	 * that bean property., +	 * @param method the method to find a corresponding PropertyDescriptor for, +	 * @param clazz the (most specific) class to introspect for descriptors, +	 * @return the corresponding PropertyDescriptor, or {@code null} if none, +	 * @throws BeansException if PropertyDescriptor lookup fails, +	 * @since 4.0.9, +	 */, +	public static PropertyDescriptor findPropertyForMethod(Method method, Class<?> clazz) throws BeansException {, +		PropertyDescriptor[] pds = getPropertyDescriptors(clazz);, +		List<String> ignoreList = (ignoreProperties != null ? Arrays.asList(ignoreProperties) : null);, +			if (writeMethod != null && (ignoreList == null || (!ignoreList.contains(targetPd.getName())))) {, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +	 * @param method the method to find a corresponding PropertyDescriptor for,, +	 * introspecting its declaring class, +		return findPropertyForMethod(method, method.getDeclaringClass());, +	}, +, +	/**, +	 * Find a JavaBeans {@code PropertyDescriptor} for the given method,, +	 * with the method either being the read method or the write method for, +	 * that bean property., +	 * @param method the method to find a corresponding PropertyDescriptor for, +	 * @param clazz the (most specific) class to introspect for descriptors, +	 * @return the corresponding PropertyDescriptor, or {@code null} if none, +	 * @throws BeansException if PropertyDescriptor lookup fails, +	 * @since 4.0.9, +	 */, +	public static PropertyDescriptor findPropertyForMethod(Method method, Class<?> clazz) throws BeansException {, +		PropertyDescriptor[] pds = getPropertyDescriptors(clazz);, +		List<String> ignoreList = (ignoreProperties != null ? Arrays.asList(ignoreProperties) : null);, +			if (writeMethod != null && (ignoreList == null || (!ignoreList.contains(targetPd.getName())))) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +				if (!BridgeMethodResolver.isVisibilityBridgeMethodPair(method, bridgedMethod)) {, +					continue;, +				AnnotationAttributes ann = findAutowiredAnnotation(bridgedMethod);, +					PropertyDescriptor pd = BeanUtils.findPropertyForMethod(bridgedMethod, clazz);, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +	 * @param method the method to find a corresponding PropertyDescriptor for,, +	 * introspecting its declaring class, +		return findPropertyForMethod(method, method.getDeclaringClass());, +	}, +, +	/**, +	 * Find a JavaBeans {@code PropertyDescriptor} for the given method,, +	 * with the method either being the read method or the write method for, +	 * that bean property., +	 * @param method the method to find a corresponding PropertyDescriptor for, +	 * @param clazz the (most specific) class to introspect for descriptors, +	 * @return the corresponding PropertyDescriptor, or {@code null} if none, +	 * @throws BeansException if PropertyDescriptor lookup fails, +	 * @since 4.0.9, +	 */, +	public static PropertyDescriptor findPropertyForMethod(Method method, Class<?> clazz) throws BeansException {, +		PropertyDescriptor[] pds = getPropertyDescriptors(clazz);, +		List<String> ignoreList = (ignoreProperties != null ? Arrays.asList(ignoreProperties) : null);, +			if (writeMethod != null && (ignoreList == null || (!ignoreList.contains(targetPd.getName())))) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +				if (!BridgeMethodResolver.isVisibilityBridgeMethodPair(method, bridgedMethod)) {, +					continue;, +				AnnotationAttributes ann = findAutowiredAnnotation(bridgedMethod);, +					PropertyDescriptor pd = BeanUtils.findPropertyForMethod(bridgedMethod, clazz);, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java, +	static class NonPublicResourceInjectionBean<T> extends ResourceInjectionBean {, +		public NonPublicResourceInjectionBean() {, +	public static class TypedExtendedResourceInjectionBean extends NonPublicResourceInjectionBean<NestedTestBean> {, +	public static class OverriddenExtendedResourceInjectionBean extends NonPublicResourceInjectionBean<NestedTestBean> {, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +	 * @param method the method to find a corresponding PropertyDescriptor for,, +	 * introspecting its declaring class, +		return findPropertyForMethod(method, method.getDeclaringClass());, +	}, +, +	/**, +	 * Find a JavaBeans {@code PropertyDescriptor} for the given method,, +	 * with the method either being the read method or the write method for, +	 * that bean property., +	 * @param method the method to find a corresponding PropertyDescriptor for, +	 * @param clazz the (most specific) class to introspect for descriptors, +	 * @return the corresponding PropertyDescriptor, or {@code null} if none, +	 * @throws BeansException if PropertyDescriptor lookup fails, +	 * @since 4.0.9, +	 */, +	public static PropertyDescriptor findPropertyForMethod(Method method, Class<?> clazz) throws BeansException {, +		PropertyDescriptor[] pds = getPropertyDescriptors(clazz);, +		List<String> ignoreList = (ignoreProperties != null ? Arrays.asList(ignoreProperties) : null);, +			if (writeMethod != null && (ignoreList == null || (!ignoreList.contains(targetPd.getName())))) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +				if (!BridgeMethodResolver.isVisibilityBridgeMethodPair(method, bridgedMethod)) {, +					continue;, +				AnnotationAttributes ann = findAutowiredAnnotation(bridgedMethod);, +					PropertyDescriptor pd = BeanUtils.findPropertyForMethod(bridgedMethod, clazz);]