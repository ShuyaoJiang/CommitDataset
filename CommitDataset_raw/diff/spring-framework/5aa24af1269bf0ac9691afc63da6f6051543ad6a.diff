[+++ b/org.springframework.integration-tests/src/test/java/org/springframework/orm/hibernate3/HibernateSessionFactoryConfigurationTests.java, +import org.hibernate.engine.SessionFactoryImplementor;, +	public void builtSessionFactoryIsProxyImplementingDisposableBeanAndSessionFactoryImplementor() {, +		assertThat(sessionFactory, instanceOf(SessionFactoryImplementor.class));, +++ b/org.springframework.integration-tests/src/test/java/org/springframework/orm/hibernate3/HibernateSessionFactoryConfigurationTests.java, +import org.hibernate.engine.SessionFactoryImplementor;, +	public void builtSessionFactoryIsProxyImplementingDisposableBeanAndSessionFactoryImplementor() {, +		assertThat(sessionFactory, instanceOf(SessionFactoryImplementor.class));, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate3/SessionFactoryBuilderSupport.java, +	 * @return the {@code SessionFactory}, potentially wrapped as a, +	 * {@code DisposableBean} and/or transaction-aware proxy before it is exposed to the, +	 * application., +	 * properties of this builder, then return the raw session factory resulting from, +	 * calling {@link Configuration#buildSessionFactory()}. Customization may be performed, +	 * through {@code pre*} and {@code post*} methods., +	 * @param rawSf the raw {@code SessionFactory} as built by {@link #doBuildSessionFactory()}, +	 * @return a proxied {@code SessionFactory} if wrapping was necessary, otherwise the, +	 * original given 'raw' {@code SessionFactory} object., +				SessionFactoryImplementor.class,]