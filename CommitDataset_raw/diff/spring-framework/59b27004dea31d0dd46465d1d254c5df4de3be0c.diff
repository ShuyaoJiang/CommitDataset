[+++ b/src/reference/docbook/aop.xml, +      <para>The @AspectJ support can be enabled with XML or Java style, +      configuration.  In either case you will also need to ensure that, +      AspectJ's <filename class="libraryfile">aspectjrt.jar</filename>, +      library is on the classpath of your application (version 1.6.8 or later)., +      This library is available in the <filename class="directory">'lib'</filename>, +      directory of an AspectJ distribution or via the Maven Central repository.</para>, +, +      <section id="aop-enable-aspectj-java">, +        <title>Enabling @AspectJ Support with Java configuration</title>, +, +        <para>To enable @AspectJ support with Java, +        <interfacename>@Configuration</interfacename> add the, +        <interfacename>@EnableAspectJAutoProxy</interfacename> annotation:</para>, +, +        <programlisting language="java">@Configuration, +@EnableAspectJAutoProxy, +public class AppConfig {, +, +}</programlisting>, +      </section>, +, +      <section id="aop-enable-aspectj-xml">, +        <title>Enabling @AspectJ Support with XML configuration</title>, +, +        <para>To enable @AspectJ support with XML based configuration use the, +        <literal>aop:aspectj-autoproxy</literal> element:</para>, +      </section>, +      factory that is to be used to configure new objects). If you are, +      using Java based configuration simply add, +      <interfacename>@EnableSpringConfigured</interfacename> to any, +      <interfacename>@Configuration</interfacename> class.</para>, +, +      <programlisting language="java">@Configuration, +@EnableSpringConfigured, +public class AppConfig {, +, +}</programlisting>, +, +      <para>If you prefer XML based configuration, the Spring <link, +      namespace</link> defines a convenient, +      <literal>context:spring-configured</literal> element:</para>, +        <interfacename>@EnableSpringConfigured</interfacename> bean and where to, +        the <interfacename>@EnableSpringConfigured</interfacename> bean in the, +        <note>, +          <para>The example presented here uses XML style configuration, it is, +          also possible to configure and use @AspectJ with, +          <link linkend="beans-java">Java Configuration</link>., +          Specifically the <interfacename>@EnableLoadTimeWeaving</interfacename>, +          annotation can be used as an alternative to, +          <literal>&lt;context:load-time-weaver/&gt;</literal>, +          (see <link linkend="aop-aj-ltw-spring">below</link> for details).</para>, +        </note>, +, +        for a particular, +        <interfacename>@EnableLoadTimeWeaving</interfacename> annotation.</para>, +, +        <programlisting language="java">@Configuration, +@EnableLoadTimeWeaving, +public class AppConfig {, +, +}</programlisting>, +, +        <para>Alternatively, if you prefer XML based configuration, use the, +        <literal>&lt;context:load-time-weaver/&gt;</literal> element. Note, +        that the element is defined in the '<literal>context</literal>' namespace.</para>, +        <para>The above configuration will define and register a number of, +        LTW-specific infrastructure beans for you automatically, such, +        as a <interfacename>LoadTimeWeaver</interfacename> and an, +        <classname>AspectJWeavingEnabler</classname>.  The default, +        <interfacename>LoadTimeWeaver</interfacename> is the, +        wish to use.</para>, +        <para>To specify a specific <interfacename>LoadTimeWeaver</interfacename>, +        with Java configuration implement the, +        <interfacename>LoadTimeWeavingConfigurer</interfacename> interface and override, +        the <literal>getLoadTimeWeaver()</literal> method:</para>, +, +        <programlisting language="java">@Configuration, +@EnableLoadTimeWeaving, +public class AppConfig implements LoadTimeWeavingConfigurer {, +    @Override, +    public LoadTimeWeaver getLoadTimeWeaver() {, +        return new ReflectiveLoadTimeWeaver();, +    }, +}</programlisting>, +, +        <para>If you are using XML based configuration you can specify the fully-qualified, +        classname as the value of the '<literal>weaver-class</literal>' attribute on the, +        <literal>&lt;context:load-time-weaver/&gt;</literal> element:</para>, +, +        defined and registered by the configuration can be, +        <para>There is one final attribute of the configuration left to discuss:, +        the '<literal>aspectjWeaving</literal>' attribute, +        (or '<literal>aspectj-weaving</literal>' if you are using XML). This is a simple, +        with the default value if the attribute is not present being, +        '<literal>autodetect</literal>'</para>, +          <title>AspectJ weaving attribute values</title>, +          <tgroup cols="3">, +                <entry>Annotation Value</entry>, +                <entry>XML Value</entry>]