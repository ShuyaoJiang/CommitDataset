[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java, +import org.springframework.core.task.SyncTaskExecutor;, +	public ReactiveTypeHandler() {, +		this(new ReactiveAdapterRegistry(), new SyncTaskExecutor(), new ContentNegotiationManager());, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java, +import org.springframework.core.task.SyncTaskExecutor;, +	public ReactiveTypeHandler() {, +		this(new ReactiveAdapterRegistry(), new SyncTaskExecutor(), new ContentNegotiationManager());, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterReturnValueHandler.java, + * <p>As of 5.0 also supports reactive return value types for any reactive, + * library with registered adapters in {@link ReactiveAdapterRegistry}., + *, +	/**, +	 * Simple constructor with reactive type support based on a default instance of, +	 * {@link ReactiveAdapterRegistry},, +	 * {@link org.springframework.core.task.SyncTaskExecutor}, and, +	 * {@link ContentNegotiationManager} with an Accept header strategy., +	 */, +	public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters) {, +		Assert.notEmpty(messageConverters, "HttpMessageConverter List must not be empty");, +		this.messageConverters = messageConverters;, +		this.reactiveHandler = new ReactiveTypeHandler();, +	}, +, +	/**, +	 * Complete constructor with pluggable "reactive" type support., +	 *, +	 * @param messageConverters converters to write emitted objects with, +	 * @param reactiveRegistry for reactive return value type support, +	 * @param executor for blocking I/O writes of items emitted from reactive types, +	 * @param manager for detecting streaming media types, +	 *, +	 * @since 5.0, +	 */, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java, +import org.springframework.core.task.SyncTaskExecutor;, +	public ReactiveTypeHandler() {, +		this(new ReactiveAdapterRegistry(), new SyncTaskExecutor(), new ContentNegotiationManager());, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterReturnValueHandler.java, + * <p>As of 5.0 also supports reactive return value types for any reactive, + * library with registered adapters in {@link ReactiveAdapterRegistry}., + *, +	/**, +	 * Simple constructor with reactive type support based on a default instance of, +	 * {@link ReactiveAdapterRegistry},, +	 * {@link org.springframework.core.task.SyncTaskExecutor}, and, +	 * {@link ContentNegotiationManager} with an Accept header strategy., +	 */, +	public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters) {, +		Assert.notEmpty(messageConverters, "HttpMessageConverter List must not be empty");, +		this.messageConverters = messageConverters;, +		this.reactiveHandler = new ReactiveTypeHandler();, +	}, +, +	/**, +	 * Complete constructor with pluggable "reactive" type support., +	 *, +	 * @param messageConverters converters to write emitted objects with, +	 * @param reactiveRegistry for reactive return value type support, +	 * @param executor for blocking I/O writes of items emitted from reactive types, +	 * @param manager for detecting streaming media types, +	 *, +	 * @since 5.0, +	 */, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterReturnValueHandlerTests.java, +		this.handler = new ResponseBodyEmitterReturnValueHandler(converters);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java, +import org.springframework.core.task.SyncTaskExecutor;, +	public ReactiveTypeHandler() {, +		this(new ReactiveAdapterRegistry(), new SyncTaskExecutor(), new ContentNegotiationManager());, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterReturnValueHandler.java, + * <p>As of 5.0 also supports reactive return value types for any reactive, + * library with registered adapters in {@link ReactiveAdapterRegistry}., + *, +	/**, +	 * Simple constructor with reactive type support based on a default instance of, +	 * {@link ReactiveAdapterRegistry},, +	 * {@link org.springframework.core.task.SyncTaskExecutor}, and, +	 * {@link ContentNegotiationManager} with an Accept header strategy., +	 */, +	public ResponseBodyEmitterReturnValueHandler(List<HttpMessageConverter<?>> messageConverters) {, +		Assert.notEmpty(messageConverters, "HttpMessageConverter List must not be empty");, +		this.messageConverters = messageConverters;, +		this.reactiveHandler = new ReactiveTypeHandler();, +	}, +, +	/**, +	 * Complete constructor with pluggable "reactive" type support., +	 *, +	 * @param messageConverters converters to write emitted objects with, +	 * @param reactiveRegistry for reactive return value type support, +	 * @param executor for blocking I/O writes of items emitted from reactive types]