[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import org.springframework.http.HttpEntity;, +import org.springframework.http.HttpHeaders;, +			if (returnValue instanceof HttpEntity) {, +				handleHttpEntityResponse((HttpEntity<?>) returnValue, webRequest);, +				return null;, +			}, +			HttpOutputMessage outputMessage = new ServletServerHttpResponse(webRequest.getResponse());, +, +			writeWithMessageConverters(returnValue, inputMessage, outputMessage);, +		}, +, +		private void handleHttpEntityResponse(HttpEntity<?> responseEntity, ServletWebRequest webRequest), +				throws ServletException, IOException {, +			if (responseEntity == null) {, +				return;, +			}, +			HttpInputMessage inputMessage = new ServletServerHttpRequest(webRequest.getRequest());, +			HttpOutputMessage outputMessage = new ServletServerHttpResponse(webRequest.getResponse());, +, +			HttpHeaders entityHeaders = responseEntity.getHeaders();, +			if (!entityHeaders.isEmpty()) {, +				outputMessage.getHeaders().putAll(entityHeaders);, +			}, +			writeWithMessageConverters(responseEntity.getBody(), inputMessage, outputMessage);, +		}, +, +		@SuppressWarnings("unchecked"), +		private void writeWithMessageConverters(Object returnValue,, +				HttpInputMessage inputMessage, HttpOutputMessage outputMessage), +				throws IOException, HttpMediaTypeNotAcceptableException {, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import org.springframework.http.HttpEntity;, +import org.springframework.http.HttpHeaders;, +			if (returnValue instanceof HttpEntity) {, +				handleHttpEntityResponse((HttpEntity<?>) returnValue, webRequest);, +				return null;, +			}, +			HttpOutputMessage outputMessage = new ServletServerHttpResponse(webRequest.getResponse());, +, +			writeWithMessageConverters(returnValue, inputMessage, outputMessage);, +		}, +, +		private void handleHttpEntityResponse(HttpEntity<?> responseEntity, ServletWebRequest webRequest), +				throws ServletException, IOException {, +			if (responseEntity == null) {, +				return;, +			}, +			HttpInputMessage inputMessage = new ServletServerHttpRequest(webRequest.getRequest());, +			HttpOutputMessage outputMessage = new ServletServerHttpResponse(webRequest.getResponse());, +, +			HttpHeaders entityHeaders = responseEntity.getHeaders();, +			if (!entityHeaders.isEmpty()) {, +				outputMessage.getHeaders().putAll(entityHeaders);, +			}, +			writeWithMessageConverters(responseEntity.getBody(), inputMessage, outputMessage);, +		}, +, +		@SuppressWarnings("unchecked"), +		private void writeWithMessageConverters(Object returnValue,, +				HttpInputMessage inputMessage, HttpOutputMessage outputMessage), +				throws IOException, HttpMediaTypeNotAcceptableException {, +, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +import java.io.UnsupportedEncodingException;, +import org.springframework.http.HttpEntity;, +	@Test, +	public void httpEntity() throws ServletException, IOException {, +		initServlet(HttpEntityController.class);, +, +		MockHttpServletRequest request = new MockHttpServletRequest("PUT", "/handle");, +		String requestBody = "Hello World";, +		request.setContent(requestBody.getBytes("UTF-8"));, +		request.addHeader("Content-Type", "text/plain; charset=utf-8");, +		request.addHeader("Accept", "text/*, */*");, +		request.addHeader("MyRequestHeader", "MyValue");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals(200, response.getStatus());, +		assertEquals(requestBody, response.getContentAsString());, +		assertEquals("MyValue", response.getHeader("MyResponseHeader"));, +	}, +, +, +	@Controller, +	public static class HttpEntityController {, +, +		@RequestMapping("/handle"), +		public HttpEntity<String> handle(HttpEntity<byte[]> requestEntity) throws UnsupportedEncodingException {, +			assertNotNull(requestEntity);, +			assertEquals("MyValue", requestEntity.getHeaders().getFirst("MyRequestHeader"));, +			String requestBody = new String(requestEntity.getBody(), "UTF-8");, +			assertEquals("Hello World", requestBody);, +, +			HttpHeaders responseHeaders = new HttpHeaders();, +			responseHeaders.set("MyResponseHeader", "MyValue");, +			return new HttpEntity<String>(requestBody, responseHeaders);, +		}, +	}]