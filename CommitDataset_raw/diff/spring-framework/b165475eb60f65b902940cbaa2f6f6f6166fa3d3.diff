[+++ b/spring-core/src/main/java/org/springframework/core/convert/Property.java, + * <p>Used to build a {@link TypeDescriptor} from a property location. The built, + * {@code TypeDescriptor} can then be used to convert from/to the property type., +++ b/spring-core/src/main/java/org/springframework/core/convert/Property.java, + * <p>Used to build a {@link TypeDescriptor} from a property location. The built, + * {@code TypeDescriptor} can then be used to convert from/to the property type., +++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, +	 * Parse the given {@code String} value into a {@link Locale}, accepting, +	 * the {@link Locale#toString} format as well as BCP 47 language tags., +	 * Parse the given {@code String} representation into a {@link Locale}., +++ b/spring-core/src/main/java/org/springframework/core/convert/Property.java, + * <p>Used to build a {@link TypeDescriptor} from a property location. The built, + * {@code TypeDescriptor} can then be used to convert from/to the property type., +++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, +	 * Parse the given {@code String} value into a {@link Locale}, accepting, +	 * the {@link Locale#toString} format as well as BCP 47 language tags., +	 * Parse the given {@code String} representation into a {@link Locale}., +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/CorsUtils.java, +, +		UriComponents actualUrl = UriComponentsBuilder.fromHttpRequest(request).build();, +, +++ b/spring-core/src/main/java/org/springframework/core/convert/Property.java, + * <p>Used to build a {@link TypeDescriptor} from a property location. The built, + * {@code TypeDescriptor} can then be used to convert from/to the property type., +++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, +	 * Parse the given {@code String} value into a {@link Locale}, accepting, +	 * the {@link Locale#toString} format as well as BCP 47 language tags., +	 * Parse the given {@code String} representation into a {@link Locale}., +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/CorsUtils.java, +, +		UriComponents actualUrl = UriComponentsBuilder.fromHttpRequest(request).build();, +, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, + * Copyright 2002-2018 the original author or authors., +		if (this.scheme != null && ((this.scheme.equals("http") && "80".equals(this.port)) ||, +++ b/spring-core/src/main/java/org/springframework/core/convert/Property.java, + * <p>Used to build a {@link TypeDescriptor} from a property location. The built, + * {@code TypeDescriptor} can then be used to convert from/to the property type., +++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, +	 * Parse the given {@code String} value into a {@link Locale}, accepting, +	 * the {@link Locale#toString} format as well as BCP 47 language tags., +	 * Parse the given {@code String} representation into a {@link Locale}., +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/CorsUtils.java, +, +		UriComponents actualUrl = UriComponentsBuilder.fromHttpRequest(request).build();, +, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, + * Copyright 2002-2018 the original author or authors., +		if (this.scheme != null && ((this.scheme.equals("http") && "80".equals(this.port)) ||, +++ b/spring-web/src/main/java/org/springframework/web/util/WebUtils.java, +, +						.scheme(scheme).host(host).port(port), +++ b/spring-core/src/main/java/org/springframework/core/convert/Property.java, + * <p>Used to build a {@link TypeDescriptor} from a property location. The built, + * {@code TypeDescriptor} can then be used to convert from/to the property type., +++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, +	 * Parse the given {@code String} value into a {@link Locale}, accepting, +	 * the {@link Locale#toString} format as well as BCP 47 language tags., +	 * Parse the given {@code String} representation into a {@link Locale}., +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/CorsUtils.java, +, +		UriComponents actualUrl = UriComponentsBuilder.fromHttpRequest(request).build();, +, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, + * Copyright 2002-2018 the original author or authors., +		if (this.scheme != null && ((this.scheme.equals("http") && "80".equals(this.port)) ||, +++ b/spring-web/src/main/java/org/springframework/web/util/WebUtils.java, +, +						.scheme(scheme).host(host).port(port), +++ b/spring-web/src/test/java/org/springframework/web/util/UriComponentsBuilderTests.java, +	public void path() {, +	public void pathSegments() {, +	public void pathWithDuplicateSlashes() {, +	public void queryParams() {, +	public void emptyQueryParam() {, +	public void testClone() {, +++ b/spring-core/src/main/java/org/springframework/core/convert/Property.java, + * <p>Used to build a {@link TypeDescriptor} from a property location. The built, + * {@code TypeDescriptor} can then be used to convert from/to the property type., +++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, +	 * Parse the given {@code String} value into a {@link Locale}, accepting, +	 * the {@link Locale#toString} format as well as BCP 47 language tags., +	 * Parse the given {@code String} representation into a {@link Locale}., +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/CorsUtils.java, +, +		UriComponents actualUrl = UriComponentsBuilder.fromHttpRequest(request).build();, +, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, + * Copyright 2002-2018 the original author or authors., +		if (this.scheme != null && ((this.scheme.equals("http") && "80".equals(this.port)) ||, +++ b/spring-web/src/main/java/org/springframework/web/util/WebUtils.java, +, +						.scheme(scheme).host(host).port(port), +++ b/spring-web/src/test/java/org/springframework/web/util/UriComponentsBuilderTests.java, +	public void path() {, +	public void pathSegments() {, +	public void pathWithDuplicateSlashes() {, +	public void queryParams() {, +	public void emptyQueryParam() {, +	public void testClone() {]