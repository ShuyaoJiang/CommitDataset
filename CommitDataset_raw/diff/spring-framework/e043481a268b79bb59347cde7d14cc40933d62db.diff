[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/DefaultStompSession.java, +		if (this.connectHeaders.getAcceptVersion() == null) {, +		}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/DefaultStompSession.java, +		if (this.connectHeaders.getAcceptVersion() == null) {, +		}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaders.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Arrays;, +import org.springframework.util.ObjectUtils;, +	public static final String ACCEPT_VERSION = "accept-version";, +, +	 * Set the accept-version header. Must be one of "1.1", "1.2", or both., +	 * Applies to the CONNECT frame., +	 * @since 5.0.7, +	 */, +	public void setAcceptVersion(@Nullable String[] acceptVersions) {, +		if (ObjectUtils.isEmpty(acceptVersions)) {, +			set(ACCEPT_VERSION, null);, +			return;, +		}, +		Arrays.stream(acceptVersions).forEach(version ->, +				Assert.isTrue(version != null && (version.equals("1.1") || version.equals("1.2")),, +						"Invalid version: " + version));, +		set(ACCEPT_VERSION, StringUtils.arrayToCommaDelimitedString(acceptVersions));, +	}, +, +	/**, +	 * Get the accept-version header., +	 * @since 5.0.7, +	 */, +	@Nullable, +	public String[] getAcceptVersion() {, +		String value = getFirst(ACCEPT_VERSION);, +		return value != null ? StringUtils.commaDelimitedListToStringArray(value) : null;, +	}, +, +	/**, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/DefaultStompSession.java, +		if (this.connectHeaders.getAcceptVersion() == null) {, +		}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaders.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Arrays;, +import org.springframework.util.ObjectUtils;, +	public static final String ACCEPT_VERSION = "accept-version";, +, +	 * Set the accept-version header. Must be one of "1.1", "1.2", or both., +	 * Applies to the CONNECT frame., +	 * @since 5.0.7, +	 */, +	public void setAcceptVersion(@Nullable String[] acceptVersions) {, +		if (ObjectUtils.isEmpty(acceptVersions)) {, +			set(ACCEPT_VERSION, null);, +			return;, +		}, +		Arrays.stream(acceptVersions).forEach(version ->, +				Assert.isTrue(version != null && (version.equals("1.1") || version.equals("1.2")),, +						"Invalid version: " + version));, +		set(ACCEPT_VERSION, StringUtils.arrayToCommaDelimitedString(acceptVersions));, +	}, +, +	/**, +	 * Get the accept-version header., +	 * @since 5.0.7, +	 */, +	@Nullable, +	public String[] getAcceptVersion() {, +		String value = getFirst(ACCEPT_VERSION);, +		return value != null ? StringUtils.commaDelimitedListToStringArray(value) : null;, +	}, +, +	/**, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/DefaultStompSessionTests.java, + * Copyright 2002-2018 the original author or authors., +	public void setUp() {, +	public void afterConnected() {, +		assertTrue(this.session.isConnected());, +	@Test // SPR-16844, +	public void afterConnectedWithSpecificVersion() {, +		assertFalse(this.session.isConnected());, +		this.connectHeaders.setAcceptVersion(new String[] {"1.1"});, +, +		this.session.afterConnected(this.connection);, +, +		Message<byte[]> message = this.messageCaptor.getValue();, +		StompHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(message, StompHeaderAccessor.class);, +		assertEquals(StompCommand.CONNECT, accessor.getCommand());, +		assertThat(accessor.getAcceptVersion(), containsInAnyOrder("1.1"));, +	}, +, +	public void afterConnectFailure() {, +	public void handleConnectedFrame() {, +	public void heartbeatValues() {, +	public void heartbeatNotSupportedByServer() {, +	public void heartbeatTasks() {, +	public void handleErrorFrame() {, +	public void handleErrorFrameWithEmptyPayload() {, +	public void handleErrorFrameWithConversionException() {, +	public void handleMessageFrame() {]