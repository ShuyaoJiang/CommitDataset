[+++ b/spring-test/src/main/java/org/springframework/mock/web/MockAsyncContext.java, + * Copyright 2002-2015 the original author or authors., +, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockAsyncContext.java, + * Copyright 2002-2015 the original author or authors., +, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, + * @author Brian Clozel, +	private final MultiValueMap<String, Part> parts = new LinkedMultiValueMap<String, Part>();, +		if (this.serverPort > 0, +				&& ((HTTP.equalsIgnoreCase(this.scheme) && this.serverPort != 80) || (HTTPS.equalsIgnoreCase(this.scheme) && this.serverPort != 443))) {, +		this.parts.add(part.getName(), part);, +		return this.parts.getFirst(name);, +		List<Part> result = new LinkedList<Part>();, +		for(List<Part> list : this.parts.values()) {, +			result.addAll(list);, +		}, +		return result;, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockAsyncContext.java, + * Copyright 2002-2015 the original author or authors., +, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, + * @author Brian Clozel, +	private final MultiValueMap<String, Part> parts = new LinkedMultiValueMap<String, Part>();, +		if (this.serverPort > 0, +				&& ((HTTP.equalsIgnoreCase(this.scheme) && this.serverPort != 80) || (HTTPS.equalsIgnoreCase(this.scheme) && this.serverPort != 443))) {, +		this.parts.add(part.getName(), part);, +		return this.parts.getFirst(name);, +		List<Part> result = new LinkedList<Part>();, +		for(List<Part> list : this.parts.values()) {, +			result.addAll(list);, +		}, +		return result;, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockPageContext.java, + * Copyright 2002-2015 the original author or authors., + * {@code PageContext.initialize} method. Does not support writing to a, + * JspWriter, request dispatching, or {@code handlePageException} calls., +	@Deprecated, +	@Deprecated, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockAsyncContext.java, + * Copyright 2002-2015 the original author or authors., +, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, + * @author Brian Clozel, +	private final MultiValueMap<String, Part> parts = new LinkedMultiValueMap<String, Part>();, +		if (this.serverPort > 0, +				&& ((HTTP.equalsIgnoreCase(this.scheme) && this.serverPort != 80) || (HTTPS.equalsIgnoreCase(this.scheme) && this.serverPort != 443))) {, +		this.parts.add(part.getName(), part);, +		return this.parts.getFirst(name);, +		List<Part> result = new LinkedList<Part>();, +		for(List<Part> list : this.parts.values()) {, +			result.addAll(list);, +		}, +		return result;, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockPageContext.java, + * Copyright 2002-2015 the original author or authors., + * {@code PageContext.initialize} method. Does not support writing to a, + * JspWriter, request dispatching, or {@code handlePageException} calls., +	@Deprecated, +	@Deprecated, +++ b/spring-web/src/test/java/org/springframework/mock/web/test/MockAsyncContext.java, + * Copyright 2002-2015 the original author or authors., +, +import org.springframework.util.Assert;, +	private final List<Runnable> dispatchHandlers = new ArrayList<Runnable>();, +, +	public void addDispatchHandler(Runnable handler) {, +		Assert.notNull(handler);, +		this.dispatchHandlers.add(handler);, +	}, +, +		for (Runnable r : this.dispatchHandlers) {, +			r.run();, +		}, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockAsyncContext.java, + * Copyright 2002-2015 the original author or authors., +, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, + * @author Brian Clozel, +	private final MultiValueMap<String, Part> parts = new LinkedMultiValueMap<String, Part>();, +		if (this.serverPort > 0, +				&& ((HTTP.equalsIgnoreCase(this.scheme) && this.serverPort != 80) || (HTTPS.equalsIgnoreCase(this.scheme) && this.serverPort != 443))) {, +		this.parts.add(part.getName(), part);, +		return this.parts.getFirst(name);, +		List<Part> result = new LinkedList<Part>();, +		for(List<Part> list : this.parts.values()) {, +			result.addAll(list);, +		}, +		return result;, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockPageContext.java, + * Copyright 2002-2015 the original author or authors., + * {@code PageContext.initialize} method. Does not support writing to a]