[+++ b/spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java, +			List<BeanDefinitionRegistryPostProcessor> registryProcessors = new LinkedList<>();, +					BeanDefinitionRegistryPostProcessor registryProcessor =, +					registryProcessor.postProcessBeanDefinitionRegistry(registry);, +					registryProcessors.add(registryProcessor);, +			List<BeanDefinitionRegistryPostProcessor> currentRegistryProcessors = new ArrayList<>();, +			String[] postProcessorNames =, +					beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);, +					currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));, +			sortPostProcessors(currentRegistryProcessors, beanFactory);, +			registryProcessors.addAll(currentRegistryProcessors);, +			invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);, +			currentRegistryProcessors.clear();, +					currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));, +			sortPostProcessors(currentRegistryProcessors, beanFactory);, +			registryProcessors.addAll(currentRegistryProcessors);, +			invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);, +			currentRegistryProcessors.clear();, +						currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));, +				sortPostProcessors(currentRegistryProcessors, beanFactory);, +				registryProcessors.addAll(currentRegistryProcessors);, +				invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);, +				currentRegistryProcessors.clear();, +			invokeBeanFactoryPostProcessors(registryProcessors, beanFactory);, +		sortPostProcessors(priorityOrderedPostProcessors, beanFactory);, +		sortPostProcessors(orderedPostProcessors, beanFactory);, +		sortPostProcessors(priorityOrderedPostProcessors, beanFactory);, +		sortPostProcessors(orderedPostProcessors, beanFactory);, +		sortPostProcessors(internalPostProcessors, beanFactory);, +	private static void sortPostProcessors(List<?> postProcessors, ConfigurableListableBeanFactory beanFactory) {, +++ b/spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java, +			List<BeanDefinitionRegistryPostProcessor> registryProcessors = new LinkedList<>();, +					BeanDefinitionRegistryPostProcessor registryProcessor =, +					registryProcessor.postProcessBeanDefinitionRegistry(registry);, +					registryProcessors.add(registryProcessor);, +			List<BeanDefinitionRegistryPostProcessor> currentRegistryProcessors = new ArrayList<>();, +			String[] postProcessorNames =, +					beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);, +					currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));, +			sortPostProcessors(currentRegistryProcessors, beanFactory);, +			registryProcessors.addAll(currentRegistryProcessors);, +			invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);, +			currentRegistryProcessors.clear();, +					currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));, +			sortPostProcessors(currentRegistryProcessors, beanFactory);, +			registryProcessors.addAll(currentRegistryProcessors);, +			invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);, +			currentRegistryProcessors.clear();, +						currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));, +				sortPostProcessors(currentRegistryProcessors, beanFactory);, +				registryProcessors.addAll(currentRegistryProcessors);, +				invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);, +				currentRegistryProcessors.clear();, +			invokeBeanFactoryPostProcessors(registryProcessors, beanFactory);, +		sortPostProcessors(priorityOrderedPostProcessors, beanFactory);, +		sortPostProcessors(orderedPostProcessors, beanFactory);, +		sortPostProcessors(priorityOrderedPostProcessors, beanFactory);, +		sortPostProcessors(orderedPostProcessors, beanFactory);, +		sortPostProcessors(internalPostProcessors, beanFactory);, +	private static void sortPostProcessors(List<?> postProcessors, ConfigurableListableBeanFactory beanFactory) {, +++ b/spring-context/src/test/java/org/springframework/context/support/BeanFactoryPostProcessorTests.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.core.Ordered;, +	public void testBeanDefinitionRegistryPostProcessor() {, +		ac.addBeanFactoryPostProcessor(new PrioritizedBeanDefinitionRegistryPostProcessor());, +		assertTrue(ac.getBean("bfpp1", TestBeanFactoryPostProcessor.class).wasCalled);, +		assertTrue(ac.getBean("bfpp2", TestBeanFactoryPostProcessor.class).wasCalled);, +	public void testBeanDefinitionRegistryPostProcessorRegisteringAnother() {, +		ac.registerBeanDefinition("bdrpp2", new RootBeanDefinition(OuterBeanDefinitionRegistryPostProcessor.class));, +		assertTrue(ac.getBean("bfpp1", TestBeanFactoryPostProcessor.class).wasCalled);, +		assertTrue(ac.getBean("bfpp2", TestBeanFactoryPostProcessor.class).wasCalled);, +	}, +, +	@Test, +	public void testPrioritizedBeanDefinitionRegistryPostProcessorRegisteringAnother() {, +		StaticApplicationContext ac = new StaticApplicationContext();, +		ac.registerSingleton("tb1", TestBean.class);, +		ac.registerSingleton("tb2", TestBean.class);, +		ac.registerBeanDefinition("bdrpp2", new RootBeanDefinition(PrioritizedOuterBeanDefinitionRegistryPostProcessor.class));, +		ac.refresh();, +		assertTrue(ac.getBean("bfpp1", TestBeanFactoryPostProcessor.class).wasCalled);, +		assertTrue(ac.getBean("bfpp2", TestBeanFactoryPostProcessor.class).wasCalled);, +	public static class PrioritizedBeanDefinitionRegistryPostProcessor implements BeanDefinitionRegistryPostProcessor, Ordered {, +, +		@Override, +		public int getOrder() {, +			return Ordered.HIGHEST_PRECEDENCE;, +		}, +, +		@Override, +		public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException {, +			registry.registerBeanDefinition("bfpp1", new RootBeanDefinition(TestBeanFactoryPostProcessor.class));, +		}, +, +		@Override, +		public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {, +		}, +	}, +, +]