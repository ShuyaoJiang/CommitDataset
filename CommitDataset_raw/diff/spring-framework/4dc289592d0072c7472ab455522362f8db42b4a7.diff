[+++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +import org.springframework.util.Assert;, +	 * Cast this {@link TypeDescriptor} to a superclass or implemented interface, +	 * preserving annotations and nested type context., +	 *, +	 * @param superType the super type to cast to (can be {@code null}, +	 * @return a new TypeDescriptor for the up-cast type, +	 * @throws IllegalArgumentException if this type is not assignable to the super-type, +	 */, +	public TypeDescriptor upcast(Class<?> superType) {, +		if (superType == null) {, +			return null;, +		}, +		Assert.isAssignable(superType, getType());, +		return new TypeDescriptor(superType, this.elementTypeDescriptor,, +				this.mapKeyTypeDescriptor, this.mapValueTypeDescriptor, this.annotations);, +	}, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +import org.springframework.util.Assert;, +	 * Cast this {@link TypeDescriptor} to a superclass or implemented interface, +	 * preserving annotations and nested type context., +	 *, +	 * @param superType the super type to cast to (can be {@code null}, +	 * @return a new TypeDescriptor for the up-cast type, +	 * @throws IllegalArgumentException if this type is not assignable to the super-type, +	 */, +	public TypeDescriptor upcast(Class<?> superType) {, +		if (superType == null) {, +			return null;, +		}, +		Assert.isAssignable(superType, getType());, +		return new TypeDescriptor(superType, this.elementTypeDescriptor,, +				this.mapKeyTypeDescriptor, this.mapValueTypeDescriptor, this.annotations);, +	}, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, + * Copyright 2002-2012 the original author or authors., +import java.util.LinkedHashMap;, +import org.springframework.core.convert.converter.GenericConverter.ConvertiblePair;, +import org.springframework.util.ObjectUtils;, +import org.springframework.util.StringUtils;, + * @author Phillip Webb, +	/**, +	 * General NO-OP converter used when conversion is not required., +	 */, +	private static final GenericConverter NO_OP_CONVERTER = new NoOpConverter("NO_OP");, +	/**, +	 * Used as a cache entry when no converter is available.  This converter is never, +	 * returned., +	 */, +	private static final GenericConverter NO_MATCH = new NoOpConverter("NO_MATCH");, +	private final Converters converters = new Converters();, +		Assert.notNull(typeInfo, "Unable to the determine sourceType <S> and targetType <T> which " +, +		this.converters.add(converter);, +		this.converters.remove(sourceType, targetType);, +		Assert.notNull(targetType, "The targetType to convert to cannot be null");, +		Assert.notNull(targetType,"The targetType to convert to cannot be null");, +		Assert.notNull(targetType,"The targetType to convert to cannot be null");, +		Assert.notNull(targetType,"The targetType to convert to cannot be null");, +		return this.converters.toString();, +	 * @return the generic converter that will perform the conversion, or {@code null} if no suitable converter was found, +, +		converter = this.converters.find(sourceType, targetType);, +, +, +		if (sourceType.isAssignableTo(targetType) && targetType.getObjectType().isInstance(source)) {, +, +	/**, +	 * Adapts a {@link Converter} to a {@link GenericConverter}., +	 */, +	private final class ConverterAdapter implements ConditionalGenericConverter {, +, +, +		public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {, +			if(!this.typeInfo.getTargetType().equals(targetType.getObjectType())) {, +				return false;, +			}, +			return true;, +	/**, +	 * Adapts a {@link ConverterFactory} to a {@link GenericConverter}., +	 */, +, +, +	/**, +	 * Key for use with the converter cache., +	 */, +, +, +			return ObjectUtils.nullSafeEquals(this.sourceType, otherKey.sourceType), +				&& ObjectUtils.nullSafeEquals(this.targetType, otherKey.targetType);, +			return ObjectUtils.nullSafeHashCode(this.sourceType) * 29, +				+ ObjectUtils.nullSafeHashCode(this.targetType);, +			return "ConverterCacheKey [sourceType = " + this.sourceType, +				+ ", targetType = " + this.targetType + "]";, +	/**, +	 * Manages all converters registered with the service., +	 */]