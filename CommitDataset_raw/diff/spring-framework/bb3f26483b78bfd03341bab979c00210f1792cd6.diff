[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/CachingResourceResolver.java, + * Copyright 2002-2015 the original author or authors., + * @author Brian Clozel, +		String key = computeKey(request, requestPath);, +	protected String computeKey(HttpServletRequest request, String requestPath) {, +		StringBuilder key = new StringBuilder(RESOLVED_RESOURCE_CACHE_KEY_PREFIX);, +		key.append(requestPath);, +		if(request != null) {, +			String encoding = request.getHeader("Accept-Encoding");, +			if(encoding != null && encoding.contains("gzip")) {, +				key.append("+encoding=gzip");, +			}, +		}, +		return key.toString();, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/CachingResourceResolver.java, + * Copyright 2002-2015 the original author or authors., + * @author Brian Clozel, +		String key = computeKey(request, requestPath);, +	protected String computeKey(HttpServletRequest request, String requestPath) {, +		StringBuilder key = new StringBuilder(RESOLVED_RESOURCE_CACHE_KEY_PREFIX);, +		key.append(requestPath);, +		if(request != null) {, +			String encoding = request.getHeader("Accept-Encoding");, +			if(encoding != null && encoding.contains("gzip")) {, +				key.append("+encoding=gzip");, +			}, +		}, +		return key.toString();, +	}, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/CachingResourceResolverTests.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.mock.web.test.MockHttpServletRequest;, +	@Test, +	public void resolveResourceAcceptEncodingInCacheKey() {, +		String file = "bar.css";, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", file);, +		request.addHeader("Accept-Encoding", "gzip");, +		Resource expected = this.chain.resolveResource(request, file, this.locations);, +		String cacheKey = CachingResourceResolver.RESOLVED_RESOURCE_CACHE_KEY_PREFIX + file + "+encoding=gzip";, +, +		assertEquals(expected, this.cache.get(cacheKey).get());, +	}, +, +	@Test, +	public void resolveResourceNoAcceptEncodingInCacheKey() {, +		String file = "bar.css";, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", file);, +		Resource expected = this.chain.resolveResource(request, file, this.locations);, +		String cacheKey = CachingResourceResolver.RESOLVED_RESOURCE_CACHE_KEY_PREFIX + file;, +, +		assertEquals(expected, this.cache.get(cacheKey).get());, +	}, +, +	@Test, +	public void resolveResourceMatchingEncoding() {, +		Resource resource = Mockito.mock(Resource.class);, +		Resource gzResource = Mockito.mock(Resource.class);, +		this.cache.put(CachingResourceResolver.RESOLVED_RESOURCE_CACHE_KEY_PREFIX + "bar.css", resource);, +		this.cache.put(CachingResourceResolver.RESOLVED_RESOURCE_CACHE_KEY_PREFIX + "bar.css+encoding=gzip", gzResource);, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "bar.css");, +		assertSame(resource, this.chain.resolveResource(request,"bar.css", this.locations));, +, +		request = new MockHttpServletRequest("GET", "bar.css");, +		request.addHeader("Accept-Encoding", "gzip");, +		assertSame(gzResource, this.chain.resolveResource(request, "bar.css", this.locations));, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/CachingResourceResolver.java, + * Copyright 2002-2015 the original author or authors., + * @author Brian Clozel, +		String key = computeKey(request, requestPath);, +	protected String computeKey(HttpServletRequest request, String requestPath) {, +		StringBuilder key = new StringBuilder(RESOLVED_RESOURCE_CACHE_KEY_PREFIX);, +		key.append(requestPath);, +		if(request != null) {, +			String encoding = request.getHeader("Accept-Encoding");, +			if(encoding != null && encoding.contains("gzip")) {, +				key.append("+encoding=gzip");, +			}, +		}, +		return key.toString();, +	}, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/CachingResourceResolverTests.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.mock.web.test.MockHttpServletRequest;, +	@Test, +	public void resolveResourceAcceptEncodingInCacheKey() {, +		String file = "bar.css";, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", file);, +		request.addHeader("Accept-Encoding", "gzip");, +		Resource expected = this.chain.resolveResource(request, file, this.locations);, +		String cacheKey = CachingResourceResolver.RESOLVED_RESOURCE_CACHE_KEY_PREFIX + file + "+encoding=gzip";]