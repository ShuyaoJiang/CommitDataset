[+++ b/build.gradle, +	ext.tomcatVersion        = "8.0.18", +	ext.undertowVersion      = "1.1.2.Final", +++ b/build.gradle, +	ext.tomcatVersion        = "8.0.18", +	ext.undertowVersion      = "1.1.2.Final", +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, + * Copyright 2002-2015 the original author or authors., + * @author Stephane Nicoll, +					int length = Array.getLength(propValue);, +					if (arrayIndex >= length && arrayIndex < this.autoGrowCollectionLimit) {, +						Class<?> componentType = propValue.getClass().getComponentType();, +						Object newArray = Array.newInstance(componentType, arrayIndex + 1);, +						System.arraycopy(propValue, 0, newArray, 0, length);, +						setPropertyValue(actualName, newArray);, +						propValue = getPropertyValue(actualName);, +					}, +++ b/build.gradle, +	ext.tomcatVersion        = "8.0.18", +	ext.undertowVersion      = "1.1.2.Final", +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, + * Copyright 2002-2015 the original author or authors., + * @author Stephane Nicoll, +					int length = Array.getLength(propValue);, +					if (arrayIndex >= length && arrayIndex < this.autoGrowCollectionLimit) {, +						Class<?> componentType = propValue.getClass().getComponentType();, +						Object newArray = Array.newInstance(componentType, arrayIndex + 1);, +						System.arraycopy(propValue, 0, newArray, 0, length);, +						setPropertyValue(actualName, newArray);, +						propValue = getPropertyValue(actualName);, +					}, +++ b/spring-beans/src/test/java/org/springframework/beans/BeanWrapperTests.java, + * Copyright 2002-2015 the original author or authors., +	public void testStringArrayAutoGrow() throws Exception {, +		StringArrayBean target = new StringArrayBean();, +		BeanWrapper bw = new BeanWrapperImpl(target);, +		bw.setAutoGrowNestedPaths(true);, +, +		bw.setPropertyValue("array[0]", "Test0");, +		assertEquals(1, target.getArray().length);, +, +		bw.setPropertyValue("array[2]", "Test2");, +		assertEquals(3, target.getArray().length);, +		assertTrue("correct values", target.getArray()[0].equals("Test0") && target.getArray()[1] == null &&, +				target.getArray()[2].equals("Test2"));, +	}, +, +	@Test, +	public void testPrimitiveArrayAutoGrow() throws Exception {, +		PrimitiveArrayBean target = new PrimitiveArrayBean();, +		BeanWrapper bw = new BeanWrapperImpl(target);, +		bw.setAutoGrowNestedPaths(true);, +, +		bw.setPropertyValue("array[0]", 1);, +		assertEquals(1, target.getArray().length);, +, +		bw.setPropertyValue("array[2]", 3);, +		assertEquals(3, target.getArray().length);, +		assertTrue("correct values", target.getArray()[0] == 1 && target.getArray()[1] == 0 &&, +				target.getArray()[2] == 3);, +	}, +, +	@Test, +	@SuppressWarnings("unused"), +	private static class StringArrayBean {, +, +		private String[] array;, +, +		public String[] getArray() {, +			return array;, +		}, +, +		public void setArray(String[] array) {, +			this.array = array;, +		}, +	}, +, +++ b/build.gradle, +	ext.tomcatVersion        = "8.0.18", +	ext.undertowVersion      = "1.1.2.Final", +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, + * Copyright 2002-2015 the original author or authors., + * @author Stephane Nicoll, +					int length = Array.getLength(propValue);, +					if (arrayIndex >= length && arrayIndex < this.autoGrowCollectionLimit) {, +						Class<?> componentType = propValue.getClass().getComponentType();, +						Object newArray = Array.newInstance(componentType, arrayIndex + 1);, +						System.arraycopy(propValue, 0, newArray, 0, length);, +						setPropertyValue(actualName, newArray);, +						propValue = getPropertyValue(actualName);, +					}, +++ b/spring-beans/src/test/java/org/springframework/beans/BeanWrapperTests.java, + * Copyright 2002-2015 the original author or authors., +	public void testStringArrayAutoGrow() throws Exception {, +		StringArrayBean target = new StringArrayBean();, +		BeanWrapper bw = new BeanWrapperImpl(target);, +		bw.setAutoGrowNestedPaths(true);, +, +		bw.setPropertyValue("array[0]", "Test0");, +		assertEquals(1, target.getArray().length);]