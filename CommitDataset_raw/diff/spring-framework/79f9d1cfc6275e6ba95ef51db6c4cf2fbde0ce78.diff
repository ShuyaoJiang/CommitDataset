[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionException.java, +@SuppressWarnings("serial"), +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionException.java, +@SuppressWarnings("serial"), +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionFailedException.java, +@SuppressWarnings("serial"), +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionException.java, +@SuppressWarnings("serial"), +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionFailedException.java, +@SuppressWarnings("serial"), +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +			return new TypeDescriptor(object.getClass(), findCommonElement((Collection<?>) object));, +			Map<?, ?> map = (Map<?, ?>) object;, +			return new TypeDescriptor(map.getClass(), findCommonElement(map.keySet()), findCommonElement(map.values()));, +	private static Object findCommonElement(Collection<?> values) {, +		Object candidate = null;, +		for (Object value : values) {, +			if (value != null) {, +				if (candidate == null) {, +					candidate = value;, +				} else if (candidate.getClass() != value.getClass()) {, +					return null;, +				}, +			}, +		}, +		return candidate;, +	}, +	, +	public TypeDescriptor(Class<?> mapType, Object commonKey, Object commonValue) {, +		this.type = mapType;, +		this.mapKeyType = applyIndexedObject(commonKey);, +		this.mapValueType = applyIndexedObject(commonValue);, +	}, +	, +	public TypeDescriptor(Class<?> collectionType, Object commonElement) {, +		this.type = collectionType;, +		this.elementType = applyIndexedObject(commonElement);, +	}, +, +	private TypeDescriptor applyIndexedObject(Object object) {, +		if (object == null) {, +			return TypeDescriptor.valueOf(Object.class);, +		}, +		if (object instanceof Collection<?>) {, +			Collection<?> collection = (Collection<?>) object;, +			if (collection.size() == 0) {, +				return TypeDescriptor.valueOf(Object.class);, +			}, +			return new TypeDescriptor(object.getClass(), findCommonElement((Collection<?>) object));			, +		}, +		else if (object instanceof Map<?, ?>) {, +			Map<?, ?> map = (Map<?, ?>) object;, +			if (map.size() == 0) {, +				return TypeDescriptor.valueOf(Object.class);				, +			}, +			return new TypeDescriptor(object.getClass(), findCommonElement(map.keySet()), findCommonElement(map.values()));, +		}, +		else {, +			return TypeDescriptor.valueOf(object.getClass());, +		}, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionException.java, +@SuppressWarnings("serial"), +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionFailedException.java, +@SuppressWarnings("serial"), +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +			return new TypeDescriptor(object.getClass(), findCommonElement((Collection<?>) object));, +			Map<?, ?> map = (Map<?, ?>) object;, +			return new TypeDescriptor(map.getClass(), findCommonElement(map.keySet()), findCommonElement(map.values()));, +	private static Object findCommonElement(Collection<?> values) {, +		Object candidate = null;, +		for (Object value : values) {, +			if (value != null) {, +				if (candidate == null) {, +					candidate = value;, +				} else if (candidate.getClass() != value.getClass()) {, +					return null;, +				}, +			}, +		}, +		return candidate;, +	}, +	, +	public TypeDescriptor(Class<?> mapType, Object commonKey, Object commonValue) {, +		this.type = mapType;, +		this.mapKeyType = applyIndexedObject(commonKey);, +		this.mapValueType = applyIndexedObject(commonValue);, +	}, +	, +	public TypeDescriptor(Class<?> collectionType, Object commonElement) {, +		this.type = collectionType;, +		this.elementType = applyIndexedObject(commonElement);, +	}, +, +	private TypeDescriptor applyIndexedObject(Object object) {, +		if (object == null) {, +			return TypeDescriptor.valueOf(Object.class);, +		}, +		if (object instanceof Collection<?>) {]