[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, + * Copyright 2002-2018 the original author or authors., + * @author Juergen Hoeller, +	public void setStatusCodeValue(@Nullable Integer statusCode) {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, + * Copyright 2002-2018 the original author or authors., + * @author Juergen Hoeller, +	public void setStatusCodeValue(@Nullable Integer statusCode) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultEntityResponseBuilder.java, + * Copyright 2002-2018 the original author or authors., + * @author Juergen Hoeller, +	private int status = HttpStatus.OK.value();, +		Assert.notNull(status, "HttpStatus must not be null");, +		this.status = status.value();, +		return this;, +	}, +, +	@Override, +	public EntityResponse.Builder<T> status(int status) {, +		Assert.notNull(cookie, "ResponseCookie must not be null");, +	public EntityResponse.Builder<T> cookies(Consumer<MultiValueMap<String, ResponseCookie>> cookiesConsumer) {, +		Assert.notNull(cookiesConsumer, "Consumer must not be null");, +		return Mono.just(new DefaultEntityResponse<T>(, +				this.status, this.headers, this.cookies, this.entity, this.inserter, this.hints));, +		public DefaultEntityResponse(int statusCode, HttpHeaders headers,, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, + * Copyright 2002-2018 the original author or authors., + * @author Juergen Hoeller, +	public void setStatusCodeValue(@Nullable Integer statusCode) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultEntityResponseBuilder.java, + * Copyright 2002-2018 the original author or authors., + * @author Juergen Hoeller, +	private int status = HttpStatus.OK.value();, +		Assert.notNull(status, "HttpStatus must not be null");, +		this.status = status.value();, +		return this;, +	}, +, +	@Override, +	public EntityResponse.Builder<T> status(int status) {, +		Assert.notNull(cookie, "ResponseCookie must not be null");, +	public EntityResponse.Builder<T> cookies(Consumer<MultiValueMap<String, ResponseCookie>> cookiesConsumer) {, +		Assert.notNull(cookiesConsumer, "Consumer must not be null");, +		return Mono.just(new DefaultEntityResponse<T>(, +				this.status, this.headers, this.cookies, this.entity, this.inserter, this.hints));, +		public DefaultEntityResponse(int statusCode, HttpHeaders headers,, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultRenderingResponseBuilder.java, + * Copyright 2002-2018 the original author or authors., + * @author Juergen Hoeller, +	private int status = HttpStatus.OK.value();, +	public DefaultRenderingResponseBuilder(RenderingResponse other) {, +		this.name = other.name();, +		this.status = (other instanceof DefaultRenderingResponse ?, +				((DefaultRenderingResponse) other).statusCode : other.statusCode().value());, +		this.headers.putAll(other.headers());, +		this.model.putAll(other.model());, +	}, +, +		Assert.notNull(status, "HttpStatus must not be null");, +		this.status = status.value();, +		return this;, +	}, +, +	@Override, +	public RenderingResponse.Builder status(int status) {, +		Assert.notNull(cookie, "ResponseCookie must not be null");, +		Assert.notNull(cookiesConsumer, "Consumer must not be null");, +		Assert.notNull(attribute, "Attribute must not be null");, +		Assert.notNull(name, "Name must not be null");, +		return Mono.just(, +				new DefaultRenderingResponse(this.status, this.headers, this.cookies, this.name, this.model));, +	private static final class DefaultRenderingResponse extends DefaultServerResponseBuilder.AbstractServerResponse, +		public DefaultRenderingResponse(int statusCode, HttpHeaders headers,, +				MultiValueMap<String, ResponseCookie> cookies, String name, Map<String, Object> model) {, +, +			this.model = Collections.unmodifiableMap(new LinkedHashMap<>(model));, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, + * Copyright 2002-2018 the original author or authors., + * @author Juergen Hoeller, +	public void setStatusCodeValue(@Nullable Integer statusCode) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultEntityResponseBuilder.java, + * Copyright 2002-2018 the original author or authors., + * @author Juergen Hoeller, +	private int status = HttpStatus.OK.value();, +		Assert.notNull(status, "HttpStatus must not be null");, +		this.status = status.value();, +		return this;, +	}, +, +	@Override, +	public EntityResponse.Builder<T> status(int status) {, +		Assert.notNull(cookie, "ResponseCookie must not be null");, +	public EntityResponse.Builder<T> cookies(Consumer<MultiValueMap<String, ResponseCookie>> cookiesConsumer) {, +		Assert.notNull(cookiesConsumer, "Consumer must not be null");, +		return Mono.just(new DefaultEntityResponse<T>(, +				this.status, this.headers, this.cookies, this.entity, this.inserter, this.hints));, +		public DefaultEntityResponse(int statusCode, HttpHeaders headers,, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultRenderingResponseBuilder.java, + * Copyright 2002-2018 the original author or authors., + * @author Juergen Hoeller]