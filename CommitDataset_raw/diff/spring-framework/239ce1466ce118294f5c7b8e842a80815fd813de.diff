[+++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +	 * {@link Conditional @Conditional}-annotated component classes should be registered., +		if (ConditionEvaluator.get(abd.getMetadata(), true).shouldSkip(this.registry, this.environment)) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +	 * {@link Conditional @Conditional}-annotated component classes should be registered., +		if (ConditionEvaluator.get(abd.getMetadata(), true).shouldSkip(this.registry, this.environment)) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, +import org.springframework.core.type.classreading.MetadataReader;, +	@Override, +	protected boolean isConditionMatch(MetadataReader metadataReader) {, +		return !ConditionEvaluator.get(metadataReader.getAnnotationMetadata(), true).shouldSkip(, +				getRegistry(), getEnvironment());, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +	 * {@link Conditional @Conditional}-annotated component classes should be registered., +		if (ConditionEvaluator.get(abd.getMetadata(), true).shouldSkip(this.registry, this.environment)) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, +import org.springframework.core.type.classreading.MetadataReader;, +	@Override, +	protected boolean isConditionMatch(MetadataReader metadataReader) {, +		return !ConditionEvaluator.get(metadataReader.getAnnotationMetadata(), true).shouldSkip(, +				getRegistry(), getEnvironment());, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, +	 * {@link Conditional @Conditional}-annotated component classes., +				return isConditionMatch(metadataReader);, +	 * Determine whether the given class is a candidate component based on any, +	 * {@code @Conditional} annotations., +	 * @param metadataReader the ASM ClassReader for the class, +	 * @return whether the class qualifies as a candidate component, +	 */, +	protected boolean isConditionMatch(MetadataReader metadataReader) {, +		return !ConditionEvaluator.get(metadataReader.getAnnotationMetadata(), true).shouldSkip(, +				null, getEnvironment());, +	}, +, +	/**, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +	 * {@link Conditional @Conditional}-annotated component classes should be registered., +		if (ConditionEvaluator.get(abd.getMetadata(), true).shouldSkip(this.registry, this.environment)) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, +import org.springframework.core.type.classreading.MetadataReader;, +	@Override, +	protected boolean isConditionMatch(MetadataReader metadataReader) {, +		return !ConditionEvaluator.get(metadataReader.getAnnotationMetadata(), true).shouldSkip(, +				getRegistry(), getEnvironment());, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, +	 * {@link Conditional @Conditional}-annotated component classes., +				return isConditionMatch(metadataReader);, +	 * Determine whether the given class is a candidate component based on any, +	 * {@code @Conditional} annotations., +	 * @param metadataReader the ASM ClassReader for the class, +	 * @return whether the class qualifies as a candidate component, +	 */, +	protected boolean isConditionMatch(MetadataReader metadataReader) {, +		return !ConditionEvaluator.get(metadataReader.getAnnotationMetadata(), true).shouldSkip(, +				null, getEnvironment());, +	}, +, +	/**, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConditionContext.java, +	 * should the condition match or {@code null} if the registry is not available., +	 * @return the registry or {@code null}, +	 * definition should the condition match or {@code null} if the bean factory is, +	 * not available., +	 * @return the bean factory or {@code null}, +	ConfigurableListableBeanFactory getBeanFactory();, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +	 * {@link Conditional @Conditional}-annotated component classes should be registered., +		if (ConditionEvaluator.get(abd.getMetadata(), true).shouldSkip(this.registry, this.environment)) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, +import org.springframework.core.type.classreading.MetadataReader;, +	@Override, +	protected boolean isConditionMatch(MetadataReader metadataReader) {, +		return !ConditionEvaluator.get(metadataReader.getAnnotationMetadata(), true).shouldSkip(, +				getRegistry(), getEnvironment());, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, +	 * {@link Conditional @Conditional}-annotated component classes., +				return isConditionMatch(metadataReader);, +	 * Determine whether the given class is a candidate component based on any, +	 * {@code @Conditional} annotations., +	 * @param metadataReader the ASM ClassReader for the class, +	 * @return whether the class qualifies as a candidate component, +	 */, +	protected boolean isConditionMatch(MetadataReader metadataReader) {, +		return !ConditionEvaluator.get(metadataReader.getAnnotationMetadata(), true).shouldSkip(, +				null, getEnvironment());, +	}, +, +	/**, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConditionContext.java, +	 * should the condition match or {@code null} if the registry is not available., +	 * @return the registry or {@code null}, +	 * definition should the condition match or {@code null} if the bean factory is]