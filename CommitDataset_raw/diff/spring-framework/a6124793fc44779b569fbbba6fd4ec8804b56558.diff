[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +	public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {, +	public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +	public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {, +	public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/support/ContextTypeMatchClassLoader.java, + * Copyright 2002-2009 the original author or authors., +				if (ReflectionUtils.invokeMethod(findLoadedClassMethod, parent, className) != null) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +	public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {, +	public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/support/ContextTypeMatchClassLoader.java, + * Copyright 2002-2009 the original author or authors., +				if (ReflectionUtils.invokeMethod(findLoadedClassMethod, parent, className) != null) {, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/MBeanExporter.java, +	@SuppressWarnings("unchecked"), +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +	public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {, +	public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/support/ContextTypeMatchClassLoader.java, + * Copyright 2002-2009 the original author or authors., +				if (ReflectionUtils.invokeMethod(findLoadedClassMethod, parent, className) != null) {, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/MBeanExporter.java, +	@SuppressWarnings("unchecked"), +++ b/org.springframework.context/src/main/java/org/springframework/validation/Validator.java, + * Copyright 2002-2009 the original author or authors., +	boolean supports(Class<?> clazz);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +	public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {, +	public void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/support/ContextTypeMatchClassLoader.java, + * Copyright 2002-2009 the original author or authors., +				if (ReflectionUtils.invokeMethod(findLoadedClassMethod, parent, className) != null) {, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/MBeanExporter.java, +	@SuppressWarnings("unchecked"), +++ b/org.springframework.context/src/main/java/org/springframework/validation/Validator.java, + * Copyright 2002-2009 the original author or authors., +	boolean supports(Class<?> clazz);, +++ b/org.springframework.context/src/main/resources/org/springframework/context/config/spring-context-2.5.xsd, +	Activates replacement of ${...} placeholders, resolved against the specified properties file or, +	Properties object (if any). Falls back to resolving placeholders against JVM system properties., +	Indicates whether automatic detection of classes annotated with @Component, @Repository, @Service,, +	or @Controller should be enabled. Default is "true"., +	Indicates whether the implicit annotation post-processors should be enabled. Default is "true"., +	The fully-qualified class name of the ScopeMetadataResolver to be used for resolving the scope of, +	detected components., +	Indicates whether proxies should be generated for detected components, which may be necessary, +	when using scopes in a proxy-style fashion. Default is to generate no such proxies.]