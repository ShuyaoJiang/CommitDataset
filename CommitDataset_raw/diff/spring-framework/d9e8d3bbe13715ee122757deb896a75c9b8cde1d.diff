[+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateExceptionTranslator.java, +import org.hibernate.JDBCException;, +import org.springframework.jdbc.support.SQLExceptionTranslator;, +	@Nullable, +	private SQLExceptionTranslator jdbcExceptionTranslator;, +, +, +	/**, +	 * Set the JDBC exception translator for Hibernate exception translation purposes., +	 * <p>Applied to any detected {@link java.sql.SQLException} root cause of a Hibernate, +	 * {@link JDBCException}, overriding Hibernate's own {@code SQLException} translation, +	 * (which is based on a Hibernate Dialect for a specific target database)., +	 * @since 5.1, +	 * @see java.sql.SQLException, +	 * @see org.hibernate.JDBCException, +	 * @see org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator, +	 * @see org.springframework.jdbc.support.SQLStateSQLExceptionTranslator, +	 */, +	public void setJdbcExceptionTranslator(SQLExceptionTranslator jdbcExceptionTranslator) {, +		this.jdbcExceptionTranslator = jdbcExceptionTranslator;, +	}, +, +, +	 * <p>Will automatically apply a specified SQLExceptionTranslator to a, +	 * Hibernate JDBCException, otherwise rely on Hibernate's default translation., +		if (this.jdbcExceptionTranslator != null && ex instanceof JDBCException) {, +			JDBCException jdbcEx = (JDBCException) ex;, +			DataAccessException dae = this.jdbcExceptionTranslator.translate(, +					"Hibernate operation: " + jdbcEx.getMessage(), jdbcEx.getSQL(), jdbcEx.getSQLException());, +			if (dae != null) {, +				throw dae;, +			}, +		}, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateExceptionTranslator.java, +import org.hibernate.JDBCException;, +import org.springframework.jdbc.support.SQLExceptionTranslator;, +	@Nullable, +	private SQLExceptionTranslator jdbcExceptionTranslator;, +, +, +	/**, +	 * Set the JDBC exception translator for Hibernate exception translation purposes., +	 * <p>Applied to any detected {@link java.sql.SQLException} root cause of a Hibernate, +	 * {@link JDBCException}, overriding Hibernate's own {@code SQLException} translation, +	 * (which is based on a Hibernate Dialect for a specific target database)., +	 * @since 5.1, +	 * @see java.sql.SQLException, +	 * @see org.hibernate.JDBCException, +	 * @see org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator, +	 * @see org.springframework.jdbc.support.SQLStateSQLExceptionTranslator, +	 */, +	public void setJdbcExceptionTranslator(SQLExceptionTranslator jdbcExceptionTranslator) {, +		this.jdbcExceptionTranslator = jdbcExceptionTranslator;, +	}, +, +, +	 * <p>Will automatically apply a specified SQLExceptionTranslator to a, +	 * Hibernate JDBCException, otherwise rely on Hibernate's default translation., +		if (this.jdbcExceptionTranslator != null && ex instanceof JDBCException) {, +			JDBCException jdbcEx = (JDBCException) ex;, +			DataAccessException dae = this.jdbcExceptionTranslator.translate(, +					"Hibernate operation: " + jdbcEx.getMessage(), jdbcEx.getSQL(), jdbcEx.getSQLException());, +			if (dae != null) {, +				throw dae;, +			}, +		}, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaDialect.java, +import org.hibernate.JDBCException;, +import org.springframework.jdbc.support.SQLExceptionTranslator;, +	@Nullable, +	private SQLExceptionTranslator jdbcExceptionTranslator;, +, +	/**, +	 * Set the JDBC exception translator for Hibernate exception translation purposes., +	 * <p>Applied to any detected {@link java.sql.SQLException} root cause of a Hibernate, +	 * {@link JDBCException}, overriding Hibernate's own {@code SQLException} translation, +	 * (which is based on a Hibernate Dialect for a specific target database)., +	 * @since 5.1, +	 * @see java.sql.SQLException, +	 * @see org.hibernate.JDBCException, +	 * @see org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator, +	 * @see org.springframework.jdbc.support.SQLStateSQLExceptionTranslator, +	 */, +	public void setJdbcExceptionTranslator(SQLExceptionTranslator jdbcExceptionTranslator) {, +		this.jdbcExceptionTranslator = jdbcExceptionTranslator;, +	}, +, +		if (this.jdbcExceptionTranslator != null && ex instanceof JDBCException) {, +			JDBCException jdbcEx = (JDBCException) ex;, +			DataAccessException dae = this.jdbcExceptionTranslator.translate(, +					"Hibernate operation: " + jdbcEx.getMessage(), jdbcEx.getSQL(), jdbcEx.getSQLException());, +			if (dae != null) {, +				throw dae;, +			}, +		}, +]