[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +	private void detectHandlerMethods(final String beanName) {, +		Class<?> handlerType = getApplicationContext().getType(beanName);, +				return getKeyForMethod(beanName, method) != null;, +			T key = getKeyForMethod(beanName, method);, +			HandlerMethod handlerMethod = new HandlerMethod(beanName, getApplicationContext(), method);, +	 * Provides a lookup key for the given bean method. A method for which no key can be determined is, +	 * @param beanName the name of the bean the method belongs to, +	protected abstract T getKeyForMethod(String beanName, Method method);, +			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + handlerMethod.getBean(), +					+ "' bean method \n" + handlerMethod + "\nto " + key + ": There is already '", +					+ mappedHandlerMethod.getBean() + "' bean method\n" + mappedHandlerMethod + " mapped.");, +		if (logger.isInfoEnabled()) {, +			logger.info("Mapped \"" + key + "\" onto " + handlerMethod);, +			logger.debug("Looking up handler method with key [" + key + "]");, +				logger.debug("Returning handler method [" + handlerMethod + "]");, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +	private void detectHandlerMethods(final String beanName) {, +		Class<?> handlerType = getApplicationContext().getType(beanName);, +				return getKeyForMethod(beanName, method) != null;, +			T key = getKeyForMethod(beanName, method);, +			HandlerMethod handlerMethod = new HandlerMethod(beanName, getApplicationContext(), method);, +	 * Provides a lookup key for the given bean method. A method for which no key can be determined is, +	 * @param beanName the name of the bean the method belongs to, +	protected abstract T getKeyForMethod(String beanName, Method method);, +			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + handlerMethod.getBean(), +					+ "' bean method \n" + handlerMethod + "\nto " + key + ": There is already '", +					+ mappedHandlerMethod.getBean() + "' bean method\n" + mappedHandlerMethod + " mapped.");, +		if (logger.isInfoEnabled()) {, +			logger.info("Mapped \"" + key + "\" onto " + handlerMethod);, +			logger.debug("Looking up handler method with key [" + key + "]");, +				logger.debug("Returning handler method [" + handlerMethod + "]");, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMethodMapping.java, +	 * @param beanName the name of the bean the method belongs to, +	protected RequestKey getKeyForMethod(String beanName, Method method) {, +			RequestMapping typeAnnot = getApplicationContext().findAnnotationOnBean(beanName, RequestMapping.class);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +	private void detectHandlerMethods(final String beanName) {, +		Class<?> handlerType = getApplicationContext().getType(beanName);, +				return getKeyForMethod(beanName, method) != null;, +			T key = getKeyForMethod(beanName, method);, +			HandlerMethod handlerMethod = new HandlerMethod(beanName, getApplicationContext(), method);, +	 * Provides a lookup key for the given bean method. A method for which no key can be determined is, +	 * @param beanName the name of the bean the method belongs to, +	protected abstract T getKeyForMethod(String beanName, Method method);, +			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + handlerMethod.getBean(), +					+ "' bean method \n" + handlerMethod + "\nto " + key + ": There is already '", +					+ mappedHandlerMethod.getBean() + "' bean method\n" + mappedHandlerMethod + " mapped.");, +		if (logger.isInfoEnabled()) {, +			logger.info("Mapped \"" + key + "\" onto " + handlerMethod);, +			logger.debug("Looking up handler method with key [" + key + "]");, +				logger.debug("Returning handler method [" + handlerMethod + "]");, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMethodMapping.java, +	 * @param beanName the name of the bean the method belongs to, +	protected RequestKey getKeyForMethod(String beanName, Method method) {, +			RequestMapping typeAnnot = getApplicationContext().findAnnotationOnBean(beanName, RequestMapping.class);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/ViewMethodReturnValueHandler.java, + * <p>Since a {@link String} return value may handled in different ways, especially in combination with method , + * annotations, this handler should be registered after return value handlers that look for method annotations, + * such as the {@link ModelAttributeMethodProcessor} and the {@link RequestResponseBodyMethodProcessor}., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +	private void detectHandlerMethods(final String beanName) {, +		Class<?> handlerType = getApplicationContext().getType(beanName);, +				return getKeyForMethod(beanName, method) != null;, +			T key = getKeyForMethod(beanName, method);, +			HandlerMethod handlerMethod = new HandlerMethod(beanName, getApplicationContext(), method);, +	 * Provides a lookup key for the given bean method. A method for which no key can be determined is, +	 * @param beanName the name of the bean the method belongs to, +	protected abstract T getKeyForMethod(String beanName, Method method);, +			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + handlerMethod.getBean(), +					+ "' bean method \n" + handlerMethod + "\nto " + key + ": There is already '", +					+ mappedHandlerMethod.getBean() + "' bean method\n" + mappedHandlerMethod + " mapped.");, +		if (logger.isInfoEnabled()) {, +			logger.info("Mapped \"" + key + "\" onto " + handlerMethod);, +			logger.debug("Looking up handler method with key [" + key + "]");, +				logger.debug("Returning handler method [" + handlerMethod + "]");, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMethodMapping.java, +	 * @param beanName the name of the bean the method belongs to, +	protected RequestKey getKeyForMethod(String beanName, Method method) {, +			RequestMapping typeAnnot = getApplicationContext().findAnnotationOnBean(beanName, RequestMapping.class);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/ViewMethodReturnValueHandler.java, + * <p>Since a {@link String} return value may handled in different ways, especially in combination with method , + * annotations, this handler should be registered after return value handlers that look for method annotations, + * such as the {@link ModelAttributeMethodProcessor} and the {@link RequestResponseBodyMethodProcessor}., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/condition/ConsumesRequestCondition.java, +	@Override, +	public String toString() {, +		StringBuilder builder = new StringBuilder();, +		if (mediaType != null) {, +			builder.append(mediaType.toString());, +		}, +		return builder.toString();, +	}, +	, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +	private void detectHandlerMethods(final String beanName) {, +		Class<?> handlerType = getApplicationContext().getType(beanName);, +				return getKeyForMethod(beanName, method) != null;, +			T key = getKeyForMethod(beanName, method);, +			HandlerMethod handlerMethod = new HandlerMethod(beanName, getApplicationContext(), method);]