[+++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/AspectJExpressionPointcutTests.java, +/*, + * Copyright 2002-2005 the original author or authors., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + *      http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.aop.aspectj;, +, +import java.lang.reflect.Method;, +, +import junit.framework.TestCase;, +, +import org.aspectj.weaver.tools.PointcutExpression;, +import org.aspectj.weaver.tools.PointcutPrimitive;, +import org.aspectj.weaver.tools.UnsupportedPointcutPrimitiveException;, +import org.springframework.aop.ClassFilter;, +import org.springframework.aop.MethodMatcher;, +import org.springframework.aop.Pointcut;, +import org.springframework.aop.aspectj.AspectJExpressionPointcut;, +import org.springframework.aop.framework.ProxyFactory;, +import org.springframework.aop.support.DefaultPointcutAdvisor;, +import org.springframework.beans.IOther;, +import org.springframework.beans.ITestBean;, +import org.springframework.beans.TestBean;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +, +/**, + * @author Rob Harrop, + * @author Rod Johnson, + */, +public class AspectJExpressionPointcutTests extends TestCase {, +	, +	public static final String MATCH_ALL_METHODS = "execution(* *(..))";, +, +	private Method getAge;, +, +	private Method setAge;, +, +	private Method setSomeNumber;, +, +	private Method isPostProcessed;, +	, +	public void testMatchExplicit() {, +		String expression = "execution(int org.springframework.beans.TestBean.getAge())";, +, +		Pointcut pointcut = getPointcut(expression);, +		ClassFilter classFilter = pointcut.getClassFilter();, +		MethodMatcher methodMatcher = pointcut.getMethodMatcher();, +, +		assertMatchesTestBeanClass(classFilter);, +, +		// not currently testable in a reliable fashion, +		//assertDoesNotMatchStringClass(classFilter);, +, +		assertFalse("Should not be a runtime match", methodMatcher.isRuntime());, +		assertMatchesGetAge(methodMatcher);, +		assertFalse("Expression should match setAge() method", methodMatcher.matches(setAge, TestBean.class));, +	}, +, +, +	public void setUp() throws NoSuchMethodException {, +		getAge = TestBean.class.getMethod("getAge", null);, +		setAge = TestBean.class.getMethod("setAge", new Class[]{int.class});, +		setSomeNumber = TestBean.class.getMethod("setSomeNumber", new Class[]{Number.class});, +		isPostProcessed = TestBean.class.getMethod("isPostProcessed", (Class[]) null);, +	}, +	, +	, +, +	public void testMatchWithTypePattern() throws Exception {, +		String expression = "execution(* *..TestBean.*Age(..))";, +, +		Pointcut pointcut = getPointcut(expression);, +		ClassFilter classFilter = pointcut.getClassFilter();, +		MethodMatcher methodMatcher = pointcut.getMethodMatcher();, +, +		assertMatchesTestBeanClass(classFilter);, +, +		// not currently testable in a reliable fashion, +		//assertDoesNotMatchStringClass(classFilter);, +, +		assertFalse("Should not be a runtime match", methodMatcher.isRuntime());, +		assertMatchesGetAge(methodMatcher);, +		assertTrue("Expression should match setAge(int) method", methodMatcher.matches(setAge, TestBean.class));, +	}, +, +	, +	public void testThis() throws SecurityException, NoSuchMethodException{]