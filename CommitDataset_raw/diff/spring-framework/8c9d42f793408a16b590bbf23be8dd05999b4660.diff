[+++ b/src/docs/asciidoc/testing.adoc, +<<testcontext-junit-jupiter-extension,`SpringExtension`>> and JUnit Jupiter (i.e., the, +programming model in JUnit 5)., +[[testcontext-junit-jupiter-extension]], +===== SpringExtension for JUnit Jupiter, +, +The __Spring TestContext Framework__ offers full integration with the _JUnit Jupiter_, +testing framework introduced in JUnit 5. By annotating test classes with, +`@ExtendWith(SpringExtension.class)`, developers can implement standard JUnit Jupiter, +based unit and integration tests and simultaneously reap the benefits of the TestContext, +framework such as support for loading application contexts, dependency injection of test, +instances, transactional test method execution, and so on., +, +Furthermore, thanks to the rich extension API in JUnit Jupiter, Spring is able to provide, +the following features above and beyond the feature set that Spring supports for JUnit 4, +and TestNG., +, +* Dependency injection for test constructors, test methods, and test lifecycle callback, +  methods, +  - See <<testcontext-junit-jupiter-di>> for further details., +* Powerful support for link:http://junit.org/junit5/docs/current/user-guide/#extensions-conditions[_conditional test execution_], +  based on SpEL expressions, environment variables, system properties, etc., +  - See the documentation for `@EnabledIf` and `@DisabledIf` in, +    <<integration-testing-annotations-junit-jupiter>> for further details and examples., +* Custom _composed annotations_ that combine annotations from Spring **and** JUnit, +  Jupiter., +  - See the `@TransactionalDevTestConfig` and `@TransactionalIntegrationTest` examples in, +    <<integration-testing-annotations-meta>> for further details., +, +The following code listing demonstrates how to configure a test class to use the, +`SpringExtension` in conjunction with `@ContextConfiguration`., +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +// Instructs JUnit Jupiter to extend the test with Spring support., +@ExtendWith(SpringExtension.class), +// Instructs Spring to load an ApplicationContext from TestConfig.class, +@ContextConfiguration(classes = TestConfig.class), +class SimpleTests {, +, +   @Test, +   void testMethod() {, +      // execute test logic..., +   }, +}, +----, +, +Since annotations in JUnit 5 can also be used as meta-annotations, Spring is able to, +provide `@SpringJUnitConfig` and `@SpringJUnitWebConfig` __composed annotations__ to, +simplify the configuration of the test `ApplicationContext` and JUnit Jupiter., +, +For example, the following example uses `@SpringJUnitConfig` to reduce the amount of, +configuration used in the previous example., +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +// Instructs Spring to register the SpringExtension with JUnit, +// Jupiter and load an ApplicationContext from TestConfig.class, +@SpringJUnitConfig(TestConfig.class), +class SimpleTests {, +, +   @Test, +   void testMethod() {, +      // execute test logic..., +   }, +}, +----, +, +Similarly, the following example uses `@SpringJUnitWebConfig` to create a, +`WebApplicationContext` for use with JUnit Jupiter., +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +// Instructs Spring to register the SpringExtension with JUnit, +// Jupiter and load a WebApplicationContext from TestWebConfig.class, +@SpringJUnitWebConfig(TestWebConfig.class), +class SimpleWebTests {, +, +   @Test, +   void testMethod() {, +      // execute test logic..., +   }, +}, +----, +, +See the documentation for `@SpringJUnitConfig` and `@SpringJUnitWebConfig` in, +<<integration-testing-annotations-junit-jupiter>> for further details., +, +, +[[testcontext-junit-jupiter-di]], +===== Dependency Injection with the SpringExtension, +, +The `SpringExtension` implements the, +link:http://junit.org/junit5/docs/current/user-guide/#extensions-parameter-resolution[`ParameterResolver`], +extension API from JUnit Jupiter which allows Spring to provide dependency injection for, +test constructors, test methods, and test lifecycle callback methods., +]