[+++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/jta/JtaTransactionManager.java, + * JtaTransactionManager definition is all you need, portable across all J2EE servers.</b>, + * This corresponds to the functionality of the JTA UserTransaction, for which J2EE, + * specifies a standard JNDI name ("java:comp/UserTransaction"). There is no need to, + * configure a server-specific TransactionManager lookup for this kind of JTA usage., + * <p><b>Transaction suspension (REQUIRES_NEW, NOT_SUPPORTED) is just available with a, + * JTA TransactionManager being registered.</b> Common TransactionManager locations are, + * autodetected by JtaTransactionManager, provided that the "autodetectTransactionManager", + * flag is set to "true" (which it is by default)., + * <p>Note: Support for the JTA TransactionManager interface is not required by J2EE., + * issues with compatibility, despite the TransactionManager interface being part of JTA., + * <p>This pure JtaTransactionManager class supports timeouts but not per-transaction, + * isolation levels. Custom subclasses may override the {@link #doJtaBegin} method for, + * <p><b>Consider using Spring's <code>tx:jta-transaction-manager</code> configuration, + * element for automatically picking the appropriate JTA platform transaction manager, + * (automatically detecting WebLogic, WebSphere and OC4J).</b>, + *, + * <p>This class is serializable. However, active synchronizations do not survive serialization., +	private static Class<?> transactionSynchronizationRegistryClass;, +, +	static {, +		ClassLoader cl = JtaTransactionManager.class.getClassLoader();, +		try {, +			transactionSynchronizationRegistryClass = cl.loadClass(TRANSACTION_SYNCHRONIZATION_REGISTRY_CLASS_NAME);, +		}, +		catch (ClassNotFoundException ex) {, +			// JTA 1.1 API not available... simply proceed the JTA 1.0 way., +		}, +	}, +, +			logger.warn("No JTA TransactionManager found: transaction suspension not available");, +	protected Object lookupTransactionSynchronizationRegistry(String registryName) throws TransactionSystemException {, +		if (transactionSynchronizationRegistryClass == null) {, +			throw new TransactionSystemException(, +					"JTA 1.1 [" + TRANSACTION_SYNCHRONIZATION_REGISTRY_CLASS_NAME + "] API not available");, +		}, +			return getJndiTemplate().lookup(registryName, transactionSynchronizationRegistryClass);, +		if (transactionSynchronizationRegistryClass == null) {, +			// JTA 1.1 API not present - skip., +			if (logger.isDebugEnabled()) {, +			    logger.debug("JTA 1.1 [" + TRANSACTION_SYNCHRONIZATION_REGISTRY_CLASS_NAME + "] API not available");, +			}, +			return null;, +		}, +				Object tsr = getJndiTemplate().lookup(jndiName, transactionSynchronizationRegistryClass);, +		if (transactionSynchronizationRegistryClass.isInstance(ut)) {, +		if (transactionSynchronizationRegistryClass.isInstance(tm)) {]