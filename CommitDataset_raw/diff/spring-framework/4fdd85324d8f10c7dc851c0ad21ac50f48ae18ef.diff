[+++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +						throw new CodecException("Type definition error: " + ex.getType(), ex);, +						throw new DecodingException("JSON decoding error: " + ex.getOriginalMessage(), ex);, +						throw new DecodingException("I/O error while parsing input stream", ex);, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +						throw new CodecException("Type definition error: " + ex.getType(), ex);, +						throw new DecodingException("JSON decoding error: " + ex.getOriginalMessage(), ex);, +						throw new DecodingException("I/O error while parsing input stream", ex);, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonEncoder.java, +import com.fasterxml.jackson.databind.exc.InvalidDefinitionException;, +		return (Object.class == clazz) ||, +		catch (InvalidDefinitionException ex) {, +			throw new CodecException("Type definition error: " + ex.getType(), ex);, +		}, +			throw new EncodingException("JSON encoding error: " + ex.getOriginalMessage(), ex);, +			throw new IllegalStateException("Unexpected I/O error while writing to data buffer", ex);, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +						throw new CodecException("Type definition error: " + ex.getType(), ex);, +						throw new DecodingException("JSON decoding error: " + ex.getOriginalMessage(), ex);, +						throw new DecodingException("I/O error while parsing input stream", ex);, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonEncoder.java, +import com.fasterxml.jackson.databind.exc.InvalidDefinitionException;, +		return (Object.class == clazz) ||, +		catch (InvalidDefinitionException ex) {, +			throw new CodecException("Type definition error: " + ex.getType(), ex);, +		}, +			throw new EncodingException("JSON encoding error: " + ex.getOriginalMessage(), ex);, +			throw new IllegalStateException("Unexpected I/O error while writing to data buffer", ex);, +++ b/spring-web/src/main/java/org/springframework/http/codec/xml/Jaxb2XmlDecoder.java, + * Copyright 2002-2017 the original author or authors., +import javax.xml.bind.UnmarshalException;, +import org.springframework.core.codec.CodecException;, +		Flux<XMLEvent> xmlEventFlux = this.xmlEventDecoder.decode(inputStream, null, mimeType, hints);, +	private Object unmarshal(List<XMLEvent> events, Class<?> outputClass) {, +		try {, +			Unmarshaller unmarshaller = this.jaxbContexts.createUnmarshaller(outputClass);, +			XMLEventReader eventReader = StaxUtils.createXMLEventReader(events);, +			if (outputClass.isAnnotationPresent(XmlRootElement.class)) {, +				return unmarshaller.unmarshal(eventReader);, +			}, +			else {, +				JAXBElement<?> jaxbElement = unmarshaller.unmarshal(eventReader, outputClass);, +				return jaxbElement.getValue();, +			}, +		}, +		catch (UnmarshalException ex) {, +			throw new DecodingException("Could not unmarshal XML to " + outputClass, ex);, +		}, +		catch (JAXBException ex) {, +			throw new CodecException("Invalid JAXB configuration", ex);, +		}, +	}, +, +			throw new IllegalArgumentException("Output class [" + outputClass.getName() +, +					"] is neither annotated with @XmlRootElement nor @XmlType");, +			if (outputClassPackage != null && outputClassPackage.isAnnotationPresent(XmlSchema.class)) {, +	 * Split a flux of {@link XMLEvent}s into a flux of XMLEvent lists, one list, +	 * for each branch of the tree that starts with the given qualified name., +	 * That is, given the XMLEvents shown {@linkplain XmlEventDecoder here},, +	 * and the {@code desiredName} "{@code child}", this method returns a flux, +	 * of two lists, each of which containing the events of a particular branch, +	 * of the tree that starts with "{@code child}"., +	 * <li>The first list, dealing with the first branch of the tree:, +	 * <li>The second list, dealing with the second branch of the tree:, +		return xmlEventFlux.flatMap(new SplitFunction(desiredName));, +	}, +, +	private static class SplitFunction implements Function<XMLEvent, Publisher<? extends List<XMLEvent>>> {, +, +		private final QName desiredName;, +, +		private List<XMLEvent> events;, +		public SplitFunction(QName desiredName) {, +			this.desiredName = desiredName;, +		}, +, +					if (this.desiredName.equals(startElementName)) {, +						this.events = new ArrayList<>();, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +						throw new CodecException("Type definition error: " + ex.getType(), ex);, +						throw new DecodingException("JSON decoding error: " + ex.getOriginalMessage(), ex);, +						throw new DecodingException("I/O error while parsing input stream", ex);, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonEncoder.java, +import com.fasterxml.jackson.databind.exc.InvalidDefinitionException;, +		return (Object.class == clazz) ||, +		catch (InvalidDefinitionException ex) {, +			throw new CodecException("Type definition error: " + ex.getType(), ex);, +		}, +			throw new EncodingException("JSON encoding error: " + ex.getOriginalMessage(), ex);, +			throw new IllegalStateException("Unexpected I/O error while writing to data buffer", ex);, +++ b/spring-web/src/main/java/org/springframework/http/codec/xml/Jaxb2XmlDecoder.java, + * Copyright 2002-2017 the original author or authors., +import javax.xml.bind.UnmarshalException;, +import org.springframework.core.codec.CodecException;, +		Flux<XMLEvent> xmlEventFlux = this.xmlEventDecoder.decode(inputStream, null, mimeType, hints);, +	private Object unmarshal(List<XMLEvent> events, Class<?> outputClass) {, +		try {, +			Unmarshaller unmarshaller = this.jaxbContexts.createUnmarshaller(outputClass);, +			XMLEventReader eventReader = StaxUtils.createXMLEventReader(events);, +			if (outputClass.isAnnotationPresent(XmlRootElement.class)) {]