[+++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, +import org.springframework.util.CollectionUtils;, +		public static final Enumeration<String> EMPTY_HEADER_VALUES =, +				Collections.enumeration(Collections.<String>emptyList());, +, +, +		private final StringBuffer requestUrl;, +		private final Map<String, List<String>> headers;, +			this.requestUrl = initRequestUrl(this.scheme, this.host, port, request.getRequestURI());, +			this.headers = initHeaders(request);, +		}, +		private static StringBuffer initRequestUrl(String scheme, String host, int port, String path) {, +			StringBuffer sb = new StringBuffer();, +			sb.append(scheme).append("://").append(host);, +			sb.append(port == -1 ? "" : ":" + port);, +			sb.append(path);, +			return sb;, +		}, +, +		/**, +		 * Copy the headers excluding any {@link #FORWARDED_HEADER_NAMES}., +		 */, +		private static Map<String, List<String>> initHeaders(HttpServletRequest request) {, +			Map<String, List<String>> headers = new LinkedHashMap<String, List<String>>();, +				headers.put(name, Collections.list(request.getHeaders(name)));, +				headers.remove(name);, +			return headers;, +			return this.requestUrl;, +		}, +, +		// Override header accessors in order to not expose forwarded headers, +, +		@Override, +		public String getHeader(String name) {, +			List<String> value = this.headers.get(name);, +			return (CollectionUtils.isEmpty(value) ? null : value.get(0));, +		}, +, +		@Override, +		public Enumeration<String> getHeaders(String name) {, +			List<String> value = this.headers.get(name);, +			return (CollectionUtils.isEmpty(value) ? EMPTY_HEADER_VALUES : Collections.enumeration(value));, +		}, +, +		@Override, +		public Enumeration<String> getHeaderNames() {, +			return Collections.enumeration(this.headers.keySet());, +++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, +import org.springframework.util.CollectionUtils;, +		public static final Enumeration<String> EMPTY_HEADER_VALUES =, +				Collections.enumeration(Collections.<String>emptyList());, +, +, +		private final StringBuffer requestUrl;, +		private final Map<String, List<String>> headers;, +			this.requestUrl = initRequestUrl(this.scheme, this.host, port, request.getRequestURI());, +			this.headers = initHeaders(request);, +		}, +		private static StringBuffer initRequestUrl(String scheme, String host, int port, String path) {, +			StringBuffer sb = new StringBuffer();, +			sb.append(scheme).append("://").append(host);, +			sb.append(port == -1 ? "" : ":" + port);, +			sb.append(path);, +			return sb;, +		}, +, +		/**, +		 * Copy the headers excluding any {@link #FORWARDED_HEADER_NAMES}., +		 */, +		private static Map<String, List<String>> initHeaders(HttpServletRequest request) {, +			Map<String, List<String>> headers = new LinkedHashMap<String, List<String>>();, +				headers.put(name, Collections.list(request.getHeaders(name)));, +				headers.remove(name);, +			return headers;, +			return this.requestUrl;, +		}, +, +		// Override header accessors in order to not expose forwarded headers, +, +		@Override, +		public String getHeader(String name) {, +			List<String> value = this.headers.get(name);, +			return (CollectionUtils.isEmpty(value) ? null : value.get(0));, +		}, +, +		@Override, +		public Enumeration<String> getHeaders(String name) {, +			List<String> value = this.headers.get(name);, +			return (CollectionUtils.isEmpty(value) ? EMPTY_HEADER_VALUES : Collections.enumeration(value));, +		}, +, +		@Override, +		public Enumeration<String> getHeaderNames() {, +			return Collections.enumeration(this.headers.keySet());, +++ b/spring-web/src/test/java/org/springframework/web/filter/ForwardedHeaderFilterTests.java, +	public void forwardedRequest() throws Exception {, +]