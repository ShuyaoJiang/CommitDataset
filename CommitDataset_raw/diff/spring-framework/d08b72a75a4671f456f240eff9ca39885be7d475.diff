[+++ b/spring-web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java, +	public final T read(Class<? extends T> clazz, HttpInputMessage inputMessage), +			throws IOException, HttpMessageNotReadableException {, +, +++ b/spring-web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java, +	public final T read(Class<? extends T> clazz, HttpInputMessage inputMessage), +			throws IOException, HttpMessageNotReadableException {, +, +++ b/spring-web/src/main/java/org/springframework/http/converter/ObjectToStringHttpMessageConverter.java, + * Copyright 2002-2018 the original author or authors., +	protected Object readInternal(Class<?> clazz, HttpInputMessage inputMessage), +			throws IOException, HttpMessageNotReadableException {, +, +			throw new HttpMessageNotReadableException(, +++ b/spring-web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java, +	public final T read(Class<? extends T> clazz, HttpInputMessage inputMessage), +			throws IOException, HttpMessageNotReadableException {, +, +++ b/spring-web/src/main/java/org/springframework/http/converter/ObjectToStringHttpMessageConverter.java, + * Copyright 2002-2018 the original author or authors., +	protected Object readInternal(Class<?> clazz, HttpInputMessage inputMessage), +			throws IOException, HttpMessageNotReadableException {, +, +			throw new HttpMessageNotReadableException(, +++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java, +			throw new HttpMessageNotReadableException("Unsupported resource class: " + clazz);, +++ b/spring-web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java, +	public final T read(Class<? extends T> clazz, HttpInputMessage inputMessage), +			throws IOException, HttpMessageNotReadableException {, +, +++ b/spring-web/src/main/java/org/springframework/http/converter/ObjectToStringHttpMessageConverter.java, + * Copyright 2002-2018 the original author or authors., +	protected Object readInternal(Class<?> clazz, HttpInputMessage inputMessage), +			throws IOException, HttpMessageNotReadableException {, +, +			throw new HttpMessageNotReadableException(, +++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java, +			throw new HttpMessageNotReadableException("Unsupported resource class: " + clazz);, +++ b/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverter.java, +import java.util.Map;, +import org.springframework.http.converter.HttpMessageConversionException;, +import org.springframework.util.ConcurrentReferenceHashMap;, + * An {@code HttpMessageConverter} that reads and writes, + * {@link com.google.protobuf.Message com.google.protobuf.Messages} using, + * <a href="https://developers.google.com/protocol-buffers/">Google Protocol Buffers</a>., +	private static final Map<Class<?>, Method> methodCache = new ConcurrentReferenceHashMap<>();, +		setSupportedMediaTypes(Arrays.asList(this.protobufFormatSupport != null ?, +				this.protobufFormatSupport.supportedMediaTypes() : new MediaType[] {PROTOBUF, TEXT_PLAIN}));, +			this.protobufFormatSupport.merge(, +					inputMessage.getBody(), charset, contentType, this.extensionRegistry, builder);, +, +	/**, +	 * Create a new {@code Message.Builder} instance for the given class., +	 * <p>This method uses a ConcurrentReferenceHashMap for caching method lookups., +	 */, +	private Message.Builder getMessageBuilder(Class<? extends Message> clazz) {, +		try {, +			Method method = methodCache.get(clazz);, +			if (method == null) {, +				method = clazz.getMethod("newBuilder");, +				methodCache.put(clazz, method);, +			}, +			return (Message.Builder) method.invoke(clazz);, +		}, +			throw new HttpMessageConversionException(, +					"Invalid Protobuf Message type: no invocable newBuilder() method on " + clazz, ex);, +, +				ExtensionRegistry extensionRegistry, Message.Builder builder), +				throws IOException, HttpMessageNotReadableException;, +				throws IOException, HttpMessageNotWritableException;, +				ExtensionRegistry extensionRegistry, Message.Builder builder), +				throws IOException, HttpMessageNotReadableException {, +				throw new HttpMessageNotReadableException(, +						"protobuf-java-format does not support parsing " + contentType);, +				throws IOException, HttpMessageNotWritableException {, +				throw new HttpMessageNotWritableException(, +						"protobuf-java-format does not support printing " + contentType);, +				ExtensionRegistry extensionRegistry, Message.Builder builder), +				throws IOException, HttpMessageNotReadableException {, +				throw new HttpMessageNotReadableException(, +						"protobuf-java-util does not support parsing " + contentType);, +				throws IOException, HttpMessageNotWritableException {, +				throw new HttpMessageNotWritableException(, +						"protobuf-java-util does not support printing " + contentType);, +++ b/spring-web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java, +	public final T read(Class<? extends T> clazz, HttpInputMessage inputMessage), +			throws IOException, HttpMessageNotReadableException {, +, +++ b/spring-web/src/main/java/org/springframework/http/converter/ObjectToStringHttpMessageConverter.java, + * Copyright 2002-2018 the original author or authors., +	protected Object readInternal(Class<?> clazz, HttpInputMessage inputMessage), +			throws IOException, HttpMessageNotReadableException {, +, +			throw new HttpMessageNotReadableException(, +++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java, +			throw new HttpMessageNotReadableException("Unsupported resource class: " + clazz);, +++ b/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverter.java, +import java.util.Map;, +import org.springframework.http.converter.HttpMessageConversionException;, +import org.springframework.util.ConcurrentReferenceHashMap;]