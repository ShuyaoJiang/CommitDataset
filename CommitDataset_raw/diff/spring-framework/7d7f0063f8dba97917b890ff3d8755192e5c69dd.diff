[+++ b/src/asciidoc/index.adoc, +Core support for dependency injection, transaction management, web applications, data, +access, messaging, testing and more., +__Copies of this document may be made for your own use and for distribution to others,, +provided that you do not charge any fee for such copies and further provided that each, +copy contains this Copyright Notice, whether distributed in print or electronically.__, +The Spring Framework is a lightweight solution and a potential one-stop-shop for, +building your enterprise-ready applications. However, Spring is modular, allowing you to, +use only those parts that you need, without having to bring in the rest. You can use the, +IoC container, with Struts on top, but you can also use only the, +<<orm-hibernate,Hibernate integration code>> or the <<jdbc-introduction,JDBC abstraction, +layer>>. The Spring Framework supports declarative transaction management, remote access, +to your logic through RMI or web services, and various options for persisting your data., +It offers a full-featured <<mvc-introduction,MVC framework>>, and enables you to, +integrate <<aop-introduction,AOP>> transparently into your software., +Spring is designed to be non-intrusive, meaning that your domain logic code generally, +has no dependencies on the framework itself. In your integration layer (such as the data, +access layer), some dependencies on the data access technology and the Spring libraries, +will exist. However, it should be easy to isolate these dependencies from the rest of, +your code base., +This document is a reference guide to Spring Framework features. If you have any, +requests, comments, or questions on this document, please post them on the user mailing, +list or on the support forums at  http://forum.spring.io/[]., +Spring Framework is a Java platform that provides comprehensive infrastructure support, +for developing Java applications. Spring handles the infrastructure so you can focus on, +your application., +Spring enables you to build applications from "plain old Java objects" (POJOs) and to, +apply enterprise services non-invasively to POJOs. This capability applies to the Java, +SE programming model and to full and partial Java EE., +* Make a Java method execute in a database transaction without having to deal with, +  transaction APIs., +"__The question is, what aspect of control are [they] inverting?__" Martin Fowler posed, +this question about Inversion of Control (IoC) on his site in 2004. Fowler suggested, +renaming the principle to make it more self-explanatory and came up with __Dependency, +Injection__., +For insight into IoC and DI, refer to Fowler's article at, +http://martinfowler.com/articles/injection.html[http://martinfowler.com/articles/injection.html]., +Java applications -- a loose term that runs the gamut from constrained applets to n-tier, +server-side enterprise applications -- typically consist of objects that collaborate to, +form the application proper. Thus the objects in an application have__dependencies__ on, +each other., +Although the Java platform provides a wealth of application development functionality,, +it lacks the means to organize the basic building blocks into a coherent whole, leaving, +that task to architects and developers. True, you can use design patterns such, +as__Factory__, __Abstract Factory__, __Builder__, __Decorator__, and __Service Locator__, +to compose the various classes and object instances that make up an application., +However, these patterns are simply that: best practices given a name, with a description, +of what the pattern does, where to apply it, the problems it addresses, and so forth., +Patterns are formalized best practices that __you must implement yourself__ in your, +application., +The Spring Framework __Inversion of Control__ (IoC) component addresses this concern by, +providing a formalized means of composing disparate components into a fully working, +application ready for use. The Spring Framework codifies formalized design patterns as, +first-class objects that you can integrate into your own application(s). Numerous, +organizations and institutions use the Spring Framework in this manner to engineer, +robust, __maintainable__ applications., +The Spring Framework consists of features organized into about 20 modules. These modules, +are grouped into Core Container, Data Access/Integration, Web, AOP (Aspect Oriented, +Programming), Instrumentation, and Test, as shown in the following diagram., +The <<beans-introduction,__Core Container__>> consists of the Core, Beans, Context, and, +Expression Language modules., +The <<beans-introduction,__Core and Beans__>> modules provide the fundamental parts of, +the framework, including the IoC and Dependency Injection features. The `BeanFactory` is, +a sophisticated implementation of the factory pattern. It removes the need for, +programmatic singletons and allows you to decouple the configuration and specification, +of dependencies from your actual program logic., +The <<context-introduction,__Context__>> module builds on the solid base provided by the, +<<beans-introduction,__Core and Beans__>> modules: it is a means to access objects in a, +framework-style manner that is similar to a JNDI registry. The Context module inherits, +its features from the Beans module and adds support for internationalization (using, for, +example, resource bundles), event-propagation, resource-loading, and the transparent, +creation of contexts by, for example, a servlet container. The Context module also, +supports Java EE features such as EJB, JMX ,and basic remoting. The `ApplicationContext`, +interface is the focal point of the Context module., +The <<expressions,__Expression Language__>> module provides a powerful expression, +language for querying and manipulating an object graph at runtime. It is an extension of, +the unified expression language (unified EL) as specified in the JSP 2.1 specification., +The language supports setting and getting property values, property assignment, method, +invocation, accessing the context of arrays, collections and indexers, logical and, +arithmetic operators, named variables, and retrieval of objects by name from Spring's, +IoC container. It also supports list projection and selection as well as common list, +aggregations., +The __Data Access/Integration__ layer consists of the JDBC, ORM, OXM, JMS and, +Transaction modules., +The <<jdbc-introduction,JDBC>> module provides a JDBC-abstraction layer that removes the, +need to do tedious JDBC coding and parsing of database-vendor specific error codes., +The <<orm-introduction,__ORM__>> module provides integration layers for popular, +object-relational mapping APIs, including <<orm-jpa,JPA>>, <<orm-jdo,JDO>>,, +<<orm-hibernate,Hibernate>>, and <<orm-ibatis,iBatis>>. Using the ORM package you can, +use all of these O/R-mapping frameworks in combination with all of the other features, +Spring offers, such as the simple declarative transaction management feature mentioned, +previously., +The <<oxm,OXM>> module provides an abstraction layer that supports Object/XML mapping, +implementations for JAXB, Castor, XMLBeans, JiBX and XStream., +The Java Messaging Service (<<jms,JMS>>) module contains features for producing and, +consuming messages., +The <<transaction,Transaction>> module supports programmatic and declarative transaction, +management for classes that implement special interfaces and for __all your POJOs (plain, +old Java objects)__., +Spring's __Web__ module provides basic web-oriented integration features such as]