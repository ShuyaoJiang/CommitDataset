[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/HandlerMethodArgumentResolverComposite.java, +			Collections.addAll(this.argumentResolvers, resolvers);, +	 * Whether the given {@linkplain MethodParameter method parameter} is, +	 * supported by any registered {@link HandlerMethodArgumentResolver}., +	 * Iterate over registered, +	 * {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}, +	 * and invoke the one that supports it., +	 * @throws IllegalStateException if no suitable, +	 * {@link HandlerMethodArgumentResolver} is found., +			throw new IllegalStateException(, +					"Unsupported parameter type [" + parameter.getParameterType().getName() + "]." +, +							" supportsParameter should be called first.");, +	 * Find a registered {@link HandlerMethodArgumentResolver} that supports, +	 * the given method parameter., +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/HandlerMethodArgumentResolverComposite.java, +			Collections.addAll(this.argumentResolvers, resolvers);, +	 * Whether the given {@linkplain MethodParameter method parameter} is, +	 * supported by any registered {@link HandlerMethodArgumentResolver}., +	 * Iterate over registered, +	 * {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}, +	 * and invoke the one that supports it., +	 * @throws IllegalStateException if no suitable, +	 * {@link HandlerMethodArgumentResolver} is found., +			throw new IllegalStateException(, +					"Unsupported parameter type [" + parameter.getParameterType().getName() + "]." +, +							" supportsParameter should be called first.");, +	 * Find a registered {@link HandlerMethodArgumentResolver} that supports, +	 * the given method parameter., +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/InvocableHandlerMethod.java, +import java.util.stream.Collectors;, +import java.util.stream.IntStream;, +import org.springframework.util.ObjectUtils;, +import org.springframework.util.StringUtils;, + * Extension of {@link HandlerMethod} that invokes the underlying method with, + * argument values resolved from the current HTTP request through a list of, + * {@link HandlerMethodArgumentResolver}., +	private static final Object[] EMPTY_ARGS = new Object[0];, +, +, +	private HandlerMethodArgumentResolverComposite resolvers = new HandlerMethodArgumentResolverComposite();, +		this.resolvers = argumentResolvers;, +			logger.trace("Arguments: " + Arrays.toString(args));, +		return doInvoke(args);, +		if (ObjectUtils.isEmpty(getMethodParameters())) {, +			return EMPTY_ARGS;, +		}, +			args[i] = findProvidedArgument(parameter, providedArgs);, +			if (!this.resolvers.supportsParameter(parameter)) {, +				throw new MethodArgumentResolutionException(, +						message, parameter, formatArgumentError(parameter, "No suitable resolver"));, +			}, +				args[i] = this.resolvers.resolveArgument(parameter, message);, +				// Leave stack trace for later, exception may actually be resolved and handled.., +					String error = ex.getMessage();, +					if (error != null && !error.contains(parameter.getExecutable().toGenericString())) {, +						logger.debug(formatArgumentError(parameter, error));, +					}, +	private Object findProvidedArgument(MethodParameter parameter, @Nullable Object... providedArgs) {, +		if (!ObjectUtils.isEmpty(providedArgs)) {, +		}, +	private static String formatArgumentError(MethodParameter param, String message) {, +		return "Could not resolve parameter [" + param.getParameterIndex() + "] in " +, +				param.getExecutable().toGenericString() + (StringUtils.hasText(message) ? ": " + message : "");, +	}, +			throw new IllegalStateException(formatInvokeError(text, args), ex);, +				throw new IllegalStateException(formatInvokeError("Invocation failure", args), targetException);, +			throw new IllegalStateException(formatInvokeError(text, args));, +	private String formatInvokeError(String text, Object[] args) {, +		String formattedArgs = IntStream.range(0, args.length), +				.mapToObj(i -> (args[i] != null ?, +						"[" + i + "] [type=" + args[i].getClass().getName() + "] [value=" + args[i] + "]" :, +						"[" + i + "] [null]")), +				.collect(Collectors.joining(",\n", " ", " "));, +		return text + "\n" +, +				"Endpoint [" + getBeanType().getName() + "]\n" +, +				"Method [" + getBridgedMethod().toGenericString() + "] " +, +				"with argument values:\n" + formattedArgs;, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/HandlerMethodArgumentResolverComposite.java, +			Collections.addAll(this.argumentResolvers, resolvers);, +	 * Whether the given {@linkplain MethodParameter method parameter} is, +	 * supported by any registered {@link HandlerMethodArgumentResolver}., +	 * Iterate over registered, +	 * {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}, +	 * and invoke the one that supports it., +	 * @throws IllegalStateException if no suitable, +	 * {@link HandlerMethodArgumentResolver} is found., +			throw new IllegalStateException(, +					"Unsupported parameter type [" + parameter.getParameterType().getName() + "]." +, +							" supportsParameter should be called first.");, +	 * Find a registered {@link HandlerMethodArgumentResolver} that supports, +	 * the given method parameter., +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/InvocableHandlerMethod.java, +import java.util.stream.Collectors;, +import java.util.stream.IntStream;, +import org.springframework.util.ObjectUtils;, +import org.springframework.util.StringUtils;, + * Extension of {@link HandlerMethod} that invokes the underlying method with, + * argument values resolved from the current HTTP request through a list of, + * {@link HandlerMethodArgumentResolver}.]