[+++ b/spring-test/src/main/java/org/springframework/test/context/transaction/AfterTransaction.java, + * Copyright 2002-2018 the original author or authors., + * <p>As of Spring Framework 4.3, {@code @AfterTransaction} may also be, + * declared on Java 8 based interface default methods., + *, +++ b/spring-test/src/main/java/org/springframework/test/context/transaction/AfterTransaction.java, + * Copyright 2002-2018 the original author or authors., + * <p>As of Spring Framework 4.3, {@code @AfterTransaction} may also be, + * declared on Java 8 based interface default methods., + *, +++ b/spring-test/src/main/java/org/springframework/test/context/transaction/BeforeTransaction.java, + * Copyright 2002-2018 the original author or authors., + * <p>As of Spring Framework 4.3, {@code @BeforeTransaction} may also be, + * declared on Java 8 based interface default methods., + *, +++ b/spring-test/src/main/java/org/springframework/test/context/transaction/AfterTransaction.java, + * Copyright 2002-2018 the original author or authors., + * <p>As of Spring Framework 4.3, {@code @AfterTransaction} may also be, + * declared on Java 8 based interface default methods., + *, +++ b/spring-test/src/main/java/org/springframework/test/context/transaction/BeforeTransaction.java, + * Copyright 2002-2018 the original author or authors., + * <p>As of Spring Framework 4.3, {@code @BeforeTransaction} may also be, + * declared on Java 8 based interface default methods., + *, +++ b/spring-test/src/main/java/org/springframework/test/context/transaction/TestContextTransactionUtils.java, + * Copyright 2002-2018 the original author or authors., + *, +	private static final Log logger = LogFactory.getLog(TestContextTransactionUtils.class);, +, +	 * @param name the name of the {@code DataSource} to retrieve, +	 * (may be {@code null} or <em>empty</em>), +			// Look up by type and explicit name, +			logger.error(String.format("Failed to retrieve DataSource named '%s' for test context %s",, +					name, testContext), ex);, +				// Look up single bean by type, +				Map<String, DataSource> dataSources =, +						BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf, DataSource.class);, +	 * @param name the name of the transaction manager to retrieve, +	 * (may be {@code null} or <em>empty</em>), +			// Look up by type and explicit name, +			logger.error(String.format("Failed to retrieve transaction manager named '%s' for test context %s",, +					name, testContext), ex);, +				// Look up single bean by type, +				Map<String, PlatformTransactionManager> txMgrs =, +						BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf, PlatformTransactionManager.class);, +					// Look up single bean by type, with support for 'primary' beans, +				// Look up single TransactionManagementConfigurer, +				Map<String, TransactionManagementConfigurer> configurers =, +						BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf, TransactionManagementConfigurer.class);, +	 * @param testContext the {@code TestContext} upon which to base the name, +	 * @param targetAttribute the {@code TransactionAttribute} to delegate to, +	public static TransactionAttribute createDelegatingTransactionAttribute(, +			TestContext testContext, TransactionAttribute targetAttribute) {, +, +++ b/spring-test/src/main/java/org/springframework/test/context/transaction/AfterTransaction.java, + * Copyright 2002-2018 the original author or authors., + * <p>As of Spring Framework 4.3, {@code @AfterTransaction} may also be, + * declared on Java 8 based interface default methods., + *, +++ b/spring-test/src/main/java/org/springframework/test/context/transaction/BeforeTransaction.java, + * Copyright 2002-2018 the original author or authors., + * <p>As of Spring Framework 4.3, {@code @BeforeTransaction} may also be, + * declared on Java 8 based interface default methods., + *, +++ b/spring-test/src/main/java/org/springframework/test/context/transaction/TestContextTransactionUtils.java, + * Copyright 2002-2018 the original author or authors., + *, +	private static final Log logger = LogFactory.getLog(TestContextTransactionUtils.class);, +, +	 * @param name the name of the {@code DataSource} to retrieve, +	 * (may be {@code null} or <em>empty</em>), +			// Look up by type and explicit name, +			logger.error(String.format("Failed to retrieve DataSource named '%s' for test context %s",, +					name, testContext), ex);, +				// Look up single bean by type, +				Map<String, DataSource> dataSources =, +						BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf, DataSource.class);, +	 * @param name the name of the transaction manager to retrieve, +	 * (may be {@code null} or <em>empty</em>), +			// Look up by type and explicit name, +			logger.error(String.format("Failed to retrieve transaction manager named '%s' for test context %s",, +					name, testContext), ex);, +				// Look up single bean by type, +				Map<String, PlatformTransactionManager> txMgrs =, +						BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf, PlatformTransactionManager.class);, +					// Look up single bean by type, with support for 'primary' beans, +				// Look up single TransactionManagementConfigurer, +				Map<String, TransactionManagementConfigurer> configurers =, +						BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf, TransactionManagementConfigurer.class);, +	 * @param testContext the {@code TestContext} upon which to base the name, +	 * @param targetAttribute the {@code TransactionAttribute} to delegate to, +	public static TransactionAttribute createDelegatingTransactionAttribute(, +			TestContext testContext, TransactionAttribute targetAttribute) {, +, +++ b/spring-test/src/main/java/org/springframework/test/context/transaction/TestTransaction.java, + * Copyright 2002-2018 the original author or authors., +			return (transactionStatus != null && !transactionStatus.isCompleted());, +	 * @throws IllegalStateException if no transaction is active for the current test, +	 * @throws IllegalStateException if no transaction is active for the current test]