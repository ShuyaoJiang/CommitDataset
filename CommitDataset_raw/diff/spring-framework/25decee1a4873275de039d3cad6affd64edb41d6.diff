[+++ b/src/asciidoc/index.adoc, +==== Listening To ApplicationContext Events and Intercepting Messages, +Several `ApplicationContext` events (listed below) are published and can be, +received by implementing Spring's `ApplicationListener` interface., +Furthermore, an application can directly intercept every incoming and outgoing message by, +registering a `ChannelInterceptor` on the respective message channel. For example, +to intercept inbound messages:, +      registration.setInterceptors(new MyChannelInterceptor());, +A custom `ChannelInterceptor` can extend the empty method base class, +`ChannelInterceptorAdapter` and use `StompHeaderAccessor` or `SimpMessageHeaderAccessor`, +to access information about the message., +[source,java,indent=0], +[subs="verbatim,quotes"], +  public class MyChannelInterceptor extends ChannelInterceptorAdapter {, +    @Override, +    public Message<?> preSend(Message<?> message, MessageChannel channel) {, +      StompHeaderAccessor accessor = StompHeaderAccessor.wrap(message);, +      StompCommand command = accessor.getStompCommand();, +      // ..., +      return message;, +    }, +  }, +]