[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +			catch (BeanDefinitionStoreException ex) {, +				throw ex;, +			}, +			catch (Exception ex) {, +				throw new BeanDefinitionStoreException("Failed to parse configuration class [" + bd.getBeanClassName() + "]", ex);, +	 * @return the superclass, or {@code null} if none found or previously processed, +		processImports(configClass, sourceClass, getImports(sourceClass), true, false);, +			try {, +				processImports(configClass, asSourceClass(configClass), asSourceClasses(imports), false, true);, +			}, +			catch (BeanDefinitionStoreException ex) {, +				throw ex;, +				throw new BeanDefinitionStoreException("Failed to process import candidates for configuration class [" +, +						configClass.getMetadata().getClassName() + "]", ex);, +			Collection<SourceClass> importCandidates, boolean checkForCircularImports, boolean deferred) throws IOException {, +						if (!deferred && selector instanceof DeferredImportSelector) {, +							processImports(configClass, currentSourceClass, importSourceClasses, false, false);, +			catch (BeanDefinitionStoreException ex) {, +				throw ex;, +			}, +			catch (Exception ex) {, +				throw new BeanDefinitionStoreException("Failed to process import candidates for configuration class [" +, +						configClass.getMetadata().getClassName() + "]", ex);, +	public SourceClass asSourceClass(Class<?> classType) throws IOException {, +	public Collection<SourceClass> asSourceClasses(String[] classNames) throws IOException {, +	public SourceClass asSourceClass(String className) throws IOException {, +			try {, +			catch (ClassNotFoundException ex) {, +				throw new NestedIOException("Failed to load class [" + className + "]", ex);, +			}, +		}, +			String className = ((MetadataReader) this.source).getClassMetadata().getClassName();, +		public SourceClass getSuperClass() throws IOException {, +		public Collection<SourceClass> getAnnotationAttributes(String annotationType, String attribute) throws IOException {, +		private SourceClass getRelated(String className) throws IOException {, +						throw new NestedIOException("Failed to load class [" + className + "]", ex);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +			catch (BeanDefinitionStoreException ex) {, +				throw ex;, +			}, +			catch (Exception ex) {, +				throw new BeanDefinitionStoreException("Failed to parse configuration class [" + bd.getBeanClassName() + "]", ex);, +	 * @return the superclass, or {@code null} if none found or previously processed, +		processImports(configClass, sourceClass, getImports(sourceClass), true, false);, +			try {, +				processImports(configClass, asSourceClass(configClass), asSourceClasses(imports), false, true);, +			}, +			catch (BeanDefinitionStoreException ex) {, +				throw ex;, +				throw new BeanDefinitionStoreException("Failed to process import candidates for configuration class [" +, +						configClass.getMetadata().getClassName() + "]", ex);, +			Collection<SourceClass> importCandidates, boolean checkForCircularImports, boolean deferred) throws IOException {, +						if (!deferred && selector instanceof DeferredImportSelector) {, +							processImports(configClass, currentSourceClass, importSourceClasses, false, false);, +			catch (BeanDefinitionStoreException ex) {, +				throw ex;, +			}, +			catch (Exception ex) {, +				throw new BeanDefinitionStoreException("Failed to process import candidates for configuration class [" +, +						configClass.getMetadata().getClassName() + "]", ex);, +	public SourceClass asSourceClass(Class<?> classType) throws IOException {, +	public Collection<SourceClass> asSourceClasses(String[] classNames) throws IOException {, +	public SourceClass asSourceClass(String className) throws IOException {, +			try {, +			catch (ClassNotFoundException ex) {, +				throw new NestedIOException("Failed to load class [" + className + "]", ex);, +			}, +		}, +			String className = ((MetadataReader) this.source).getClassMetadata().getClassName();, +		public SourceClass getSuperClass() throws IOException {, +		public Collection<SourceClass> getAnnotationAttributes(String annotationType, String attribute) throws IOException {, +		private SourceClass getRelated(String className) throws IOException {, +						throw new NestedIOException("Failed to load class [" + className + "]", ex);, +++ b/spring-context/src/test/java/org/springframework/context/annotation/PropertySourceAnnotationTests.java, +	@Test, +		try {, +		catch (BeanDefinitionStoreException ex) {, +			assertTrue(ex.getCause() instanceof IllegalArgumentException);, +		}, +	}, +	@Test, +		try {, +		catch (BeanDefinitionStoreException ex) {, +			assertTrue(ex.getCause() instanceof IllegalArgumentException);, +		}, +	}]