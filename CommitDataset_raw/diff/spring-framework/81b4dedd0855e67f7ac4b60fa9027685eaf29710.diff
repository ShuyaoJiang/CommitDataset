[+++ b/spring-web/src/main/java/org/springframework/http/codec/FormHttpMessageReader.java, + * Implementation of an {@link HttpMessageReader} to read HTML form data, i.e., + * request body with media type {@code "application/x-www-form-urlencoded"}., + * @author Rossen Stoyanchev, + * @since 5.0, +	private static final ResolvableType MULTIVALUE_TYPE =, +			ResolvableType.forClassWithGenerics(MultiValueMap.class, String.class, String.class);, +, +	private Charset defaultCharset = DEFAULT_CHARSET;, +, +, +	/**, +	 * Set the default character set to use for reading form data when the, +	 * request Content-Type header does not explicitly specify it., +	 * <p>By default this is set to "UTF-8"., +	 */, +	public void setDefaultCharset(Charset charset) {, +		Assert.notNull(charset, "'charset' must not be null");, +		this.defaultCharset = charset;, +	}, +, +	/**, +	 * Return the configured default charset., +	 */, +	public Charset getDefaultCharset() {, +		return this.defaultCharset;, +	}, +		return MULTIVALUE_TYPE.isAssignableFrom(elementType) &&, +				(mediaType == null || MediaType.APPLICATION_FORM_URLENCODED.isCompatibleWith(mediaType));, +, +		Charset charset = getMediaTypeCharset(contentType);, +					DataBufferUtils.release(buffer);, +					return parseFormData(charset, body);, +				});, +	}, +, +	private Charset getMediaTypeCharset(MediaType mediaType) {, +		if (mediaType != null && mediaType.getCharset() != null) {, +			return mediaType.getCharset();, +		}, +		else {, +			return getDefaultCharset();, +		}, +	}, +, +	private MultiValueMap<String, String> parseFormData(Charset charset, String body) {, +++ b/spring-web/src/main/java/org/springframework/http/codec/FormHttpMessageReader.java, + * Implementation of an {@link HttpMessageReader} to read HTML form data, i.e., + * request body with media type {@code "application/x-www-form-urlencoded"}., + * @author Rossen Stoyanchev, + * @since 5.0, +	private static final ResolvableType MULTIVALUE_TYPE =, +			ResolvableType.forClassWithGenerics(MultiValueMap.class, String.class, String.class);, +, +	private Charset defaultCharset = DEFAULT_CHARSET;, +, +, +	/**, +	 * Set the default character set to use for reading form data when the, +	 * request Content-Type header does not explicitly specify it., +	 * <p>By default this is set to "UTF-8"., +	 */, +	public void setDefaultCharset(Charset charset) {, +		Assert.notNull(charset, "'charset' must not be null");, +		this.defaultCharset = charset;, +	}, +, +	/**, +	 * Return the configured default charset., +	 */, +	public Charset getDefaultCharset() {, +		return this.defaultCharset;, +	}, +		return MULTIVALUE_TYPE.isAssignableFrom(elementType) &&, +				(mediaType == null || MediaType.APPLICATION_FORM_URLENCODED.isCompatibleWith(mediaType));, +, +		Charset charset = getMediaTypeCharset(contentType);, +					DataBufferUtils.release(buffer);, +					return parseFormData(charset, body);, +				});, +	}, +, +	private Charset getMediaTypeCharset(MediaType mediaType) {, +		if (mediaType != null && mediaType.getCharset() != null) {, +			return mediaType.getCharset();, +		}, +		else {, +			return getDefaultCharset();, +		}, +	}, +, +	private MultiValueMap<String, String> parseFormData(Charset charset, String body) {, +++ b/spring-web/src/main/java/org/springframework/http/codec/FormHttpMessageWriter.java, + * Implementation of an {@link HttpMessageWriter} to write HTML form data, i.e., + * response body with media type {@code "application/x-www-form-urlencoded"}., + * @author Rossen Stoyanchev, +	private static final ResolvableType MULTIVALUE_TYPE =, +			ResolvableType.forClassWithGenerics(MultiValueMap.class, String.class, String.class);, +, +	private Charset defaultCharset = DEFAULT_CHARSET;]