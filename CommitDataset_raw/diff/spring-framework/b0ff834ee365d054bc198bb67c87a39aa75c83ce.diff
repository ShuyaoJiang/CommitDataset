[+++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.util.ObjectUtils;, +		Object source = event.getSource();, +		Class sourceType = (source == null ? null : source.getClass());, +			return ObjectUtils.nullSafeEquals(this.eventType, otherKey.eventType), +					&& ObjectUtils.nullSafeEquals(this.sourceType, otherKey.sourceType);, +			return ObjectUtils.nullSafeHashCode(this.eventType) * 29, +					+ ObjectUtils.nullSafeHashCode(this.sourceType);, +++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.util.ObjectUtils;, +		Object source = event.getSource();, +		Class sourceType = (source == null ? null : source.getClass());, +			return ObjectUtils.nullSafeEquals(this.eventType, otherKey.eventType), +					&& ObjectUtils.nullSafeEquals(this.sourceType, otherKey.sourceType);, +			return ObjectUtils.nullSafeHashCode(this.eventType) * 29, +					+ ObjectUtils.nullSafeHashCode(this.sourceType);, +++ b/spring-context/src/main/java/org/springframework/context/event/SourceFilteringListener.java, + * Copyright 2002-2013 the original author or authors., +		return (sourceType != null && sourceType.isInstance(this.source));, +++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.util.ObjectUtils;, +		Object source = event.getSource();, +		Class sourceType = (source == null ? null : source.getClass());, +			return ObjectUtils.nullSafeEquals(this.eventType, otherKey.eventType), +					&& ObjectUtils.nullSafeEquals(this.sourceType, otherKey.sourceType);, +			return ObjectUtils.nullSafeHashCode(this.eventType) * 29, +					+ ObjectUtils.nullSafeHashCode(this.sourceType);, +++ b/spring-context/src/main/java/org/springframework/context/event/SourceFilteringListener.java, + * Copyright 2002-2013 the original author or authors., +		return (sourceType != null && sourceType.isInstance(this.source));, +++ b/spring-context/src/test/java/org/springframework/context/AbstractApplicationContextTests.java, +import java.io.ByteArrayInputStream;, +import java.io.ByteArrayOutputStream;, +import java.io.ObjectInputStream;, +import java.io.ObjectOutputStream;, +import org.junit.Test;, +		doTestEvents(this.listener, this.parentListener, new MyEvent(this));, +	}, +, +	@Test, +	public void testEventsWithNoSource() throws Exception {, +		// See SPR-10945 Serialized events result in a null source, +		MyEvent event = new MyEvent(this);, +		ByteArrayOutputStream bos = new ByteArrayOutputStream();, +		ObjectOutputStream oos = new ObjectOutputStream(bos);, +		oos.writeObject(event);, +		oos.close();, +		event = (MyEvent) new ObjectInputStream(new ByteArrayInputStream(, +				bos.toByteArray())).readObject();, +		doTestEvents(this.listener, this.parentListener, event);, +	}, +, +	protected void doTestEvents(TestListener listener, TestListener parentListener,, +			MyEvent event) {, +		this.applicationContext.publishEvent(event);, +++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.util.ObjectUtils;, +		Object source = event.getSource();, +		Class sourceType = (source == null ? null : source.getClass());, +			return ObjectUtils.nullSafeEquals(this.eventType, otherKey.eventType), +					&& ObjectUtils.nullSafeEquals(this.sourceType, otherKey.sourceType);, +			return ObjectUtils.nullSafeHashCode(this.eventType) * 29, +					+ ObjectUtils.nullSafeHashCode(this.sourceType);, +++ b/spring-context/src/main/java/org/springframework/context/event/SourceFilteringListener.java, + * Copyright 2002-2013 the original author or authors., +		return (sourceType != null && sourceType.isInstance(this.source));, +++ b/spring-context/src/test/java/org/springframework/context/AbstractApplicationContextTests.java, +import java.io.ByteArrayInputStream;, +import java.io.ByteArrayOutputStream;, +import java.io.ObjectInputStream;, +import java.io.ObjectOutputStream;, +import org.junit.Test;, +		doTestEvents(this.listener, this.parentListener, new MyEvent(this));, +	}, +, +	@Test, +	public void testEventsWithNoSource() throws Exception {, +		// See SPR-10945 Serialized events result in a null source, +		MyEvent event = new MyEvent(this);, +		ByteArrayOutputStream bos = new ByteArrayOutputStream();, +		ObjectOutputStream oos = new ObjectOutputStream(bos);, +		oos.writeObject(event);, +		oos.close();, +		event = (MyEvent) new ObjectInputStream(new ByteArrayInputStream(, +				bos.toByteArray())).readObject();, +		doTestEvents(this.listener, this.parentListener, event);, +	}, +, +	protected void doTestEvents(TestListener listener, TestListener parentListener,, +			MyEvent event) {, +		this.applicationContext.publishEvent(event);, +++ b/spring-webmvc-portlet/src/test/java/org/springframework/web/portlet/context/AbstractXmlWebApplicationContextTests.java, +	protected void doTestEvents(TestListener listener, TestListener parentListener,, +			MyEvent event) {, +		TestListener listenerBean = (TestListener) this.applicationContext.getBean("testListener");, +		TestListener parentListenerBean = (TestListener) this.applicationContext.getParent().getBean("parentListener");]