[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java, +	private Principal user;, +, +	private String acceptedProtocol;, +		return (isOpen() ? getNativeSession().getUpgradeRequest().getUserPrincipal() : null);, +		return this.acceptedProtocol;, +	public void initializeNativeSession(Session session) {, +		super.initializeNativeSession(session);, +		if (this.user == null) {, +			this.user = session.getUpgradeRequest().getUserPrincipal();, +		}, +		this.acceptedProtocol = session.getUpgradeResponse().getAcceptedSubProtocol();, +	}, +, +	@Override, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java, +	private Principal user;, +, +	private String acceptedProtocol;, +		return (isOpen() ? getNativeSession().getUpgradeRequest().getUserPrincipal() : null);, +		return this.acceptedProtocol;, +	public void initializeNativeSession(Session session) {, +		super.initializeNativeSession(session);, +		if (this.user == null) {, +			this.user = session.getUpgradeRequest().getUserPrincipal();, +		}, +		this.acceptedProtocol = session.getUpgradeResponse().getAcceptedSubProtocol();, +	}, +, +	@Override, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/standard/StandardWebSocketSession.java, +		return (isOpen() ? getNativeSession().getUserPrincipal() : null);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java, +	private Principal user;, +, +	private String acceptedProtocol;, +		return (isOpen() ? getNativeSession().getUpgradeRequest().getUserPrincipal() : null);, +		return this.acceptedProtocol;, +	public void initializeNativeSession(Session session) {, +		super.initializeNativeSession(session);, +		if (this.user == null) {, +			this.user = session.getUpgradeRequest().getUserPrincipal();, +		}, +		this.acceptedProtocol = session.getUpgradeResponse().getAcceptedSubProtocol();, +	}, +, +	@Override, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/standard/StandardWebSocketSession.java, +		return (isOpen() ? getNativeSession().getUserPrincipal() : null);, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSessionTests.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.socket.adapter.jetty;, +, +import org.eclipse.jetty.websocket.api.Session;, +import org.eclipse.jetty.websocket.api.UpgradeRequest;, +import org.eclipse.jetty.websocket.api.UpgradeResponse;, +import org.junit.Before;, +import org.junit.Test;, +import org.mockito.Mockito;, +import org.springframework.web.socket.handler.TestPrincipal;, +, +import java.util.HashMap;, +import java.util.Map;, +, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertSame;, +import static org.mockito.Mockito.reset;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +import static org.mockito.Mockito.when;, +, +/**, + * Unit tests for {@link org.springframework.web.socket.adapter.jetty.JettyWebSocketSession}., + *, + * @author Rossen Stoyanchev, + */, +public class JettyWebSocketSessionTests {, +, +	private Map<String,Object> attributes;, +, +, +	@Before, +	public void setup() {, +		this.attributes = new HashMap<>();, +	}]