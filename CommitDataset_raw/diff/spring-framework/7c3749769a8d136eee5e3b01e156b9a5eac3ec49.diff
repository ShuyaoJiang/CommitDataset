[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, + * A {@link MessageHandler} that handles messages by forwarding them to a STOMP broker., + * For each new {@link SimpMessageType#CONNECT CONNECT} message, an independent TCP, + * connection to the broker is opened and used exclusively for all messages from the, + * client that originated the CONNECT message. Messages from the same client are, + * identified through the session id message header. Reversely, when the STOMP broker, + * sends messages back on the TCP connection, those messages are enriched with the session, + * id of the client and sent back downstream through the {@link MessageChannel} provided, + * to the constructor., + * <p>, + * This class also automatically opens a default "system" TCP connection to the message, + * broker that is used for sending messages that originate from the server application (as, + * opposed to from a client). Such messages are recognized because they are not associated, + * with any client and therefore do not have a session id header. The "system" connection, + * is effectively shared and cannot be used to receive messages. Several properties are, + * provided to configure the "system" session including the the, + * {@link #setSystemLogin(String) login} {@link #setSystemPasscode(String) passcode},, + * heartbeat {@link #setSystemHeartbeatSendInterval(long) send} and, + * {@link #setSystemHeartbeatReceiveInterval(long) receive} intervals., +	private String virtualHost;, +, +	 * Set the interval, in milliseconds, at which the "system" relay session will, in the, +	 * absence of any other data being sent, send a heartbeat to the STOMP broker. A value, +	 * of zero will prevent heartbeats from being sent to the broker., +	 * <p>, +	 * See class-level documentation for more information on the "system" session., +	 * <p>, +	 * See class-level documentation for more information on the "system" session., +	 * <p>, +	 * See class-level documentation for more information on the "system" session., +	 * <p>, +	 * See class-level documentation for more information on the "system" session., +	/**, +	 * Set the value of the "host" header to use in STOMP CONNECT frames. When this, +	 * property is configured, a "host" header will be added to every STOMP frame sent to, +	 * the STOMP broker. This may be useful for example in a cloud environment where the, +	 * actual host to which the TCP connection is established is different from the host, +	 * providing the cloud-based STOMP service., +	 * <p>, +	 * By default this property is not set., +	 */, +	public void setVirtualHost(String virtualHost) {, +		this.virtualHost = virtualHost;, +	}, +, +	/**, +	 * @return the configured virtual host value., +	 */, +	public String getVirtualHost() {, +		return this.virtualHost;, +	}, +, +			if (getVirtualHost() != null) {, +				headers.setHost(getVirtualHost());, +			}, +			if (getVirtualHost() != null) {, +				headers.setHost(getVirtualHost());, +			}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, + * A {@link MessageHandler} that handles messages by forwarding them to a STOMP broker., + * For each new {@link SimpMessageType#CONNECT CONNECT} message, an independent TCP, + * connection to the broker is opened and used exclusively for all messages from the, + * client that originated the CONNECT message. Messages from the same client are, + * identified through the session id message header. Reversely, when the STOMP broker, + * sends messages back on the TCP connection, those messages are enriched with the session, + * id of the client and sent back downstream through the {@link MessageChannel} provided, + * to the constructor., + * <p>, + * This class also automatically opens a default "system" TCP connection to the message, + * broker that is used for sending messages that originate from the server application (as, + * opposed to from a client). Such messages are recognized because they are not associated, + * with any client and therefore do not have a session id header. The "system" connection, + * is effectively shared and cannot be used to receive messages. Several properties are, + * provided to configure the "system" session including the the, + * {@link #setSystemLogin(String) login} {@link #setSystemPasscode(String) passcode},, + * heartbeat {@link #setSystemHeartbeatSendInterval(long) send} and, + * {@link #setSystemHeartbeatReceiveInterval(long) receive} intervals., +	private String virtualHost;, +, +	 * Set the interval, in milliseconds, at which the "system" relay session will, in the, +	 * absence of any other data being sent, send a heartbeat to the STOMP broker. A value, +	 * of zero will prevent heartbeats from being sent to the broker., +	 * <p>, +	 * See class-level documentation for more information on the "system" session., +	 * <p>, +	 * See class-level documentation for more information on the "system" session., +	 * <p>, +	 * See class-level documentation for more information on the "system" session., +	 * <p>, +	 * See class-level documentation for more information on the "system" session., +	/**, +	 * Set the value of the "host" header to use in STOMP CONNECT frames. When this, +	 * property is configured, a "host" header will be added to every STOMP frame sent to, +	 * the STOMP broker. This may be useful for example in a cloud environment where the, +	 * actual host to which the TCP connection is established is different from the host, +	 * providing the cloud-based STOMP service., +	 * <p>, +	 * By default this property is not set., +	 */, +	public void setVirtualHost(String virtualHost) {]