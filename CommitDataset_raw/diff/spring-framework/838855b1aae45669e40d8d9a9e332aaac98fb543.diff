[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/StandardTypeComparator.java, + * A simple basic {@link TypeComparator} implementation., + * It supports comparison of Numbers and types implementing Comparable., +	public boolean canCompare(Object left, Object right) {, +		if (left == null || right == null) {, +			return true;, +		}, +		if (left instanceof Number && right instanceof Number) {, +			return true;, +		}, +		if (left instanceof Comparable) {, +			return true;, +		}, +		return false;, +	}, +, +	@Override, +			return (right == null ? 0 : -1);, +			return 1;  // left cannot be null at this point, +			else if (leftNumber instanceof Double || rightNumber instanceof Double) {, +			else if (leftNumber instanceof Float || rightNumber instanceof Float) {, +			else if (leftNumber instanceof Long || rightNumber instanceof Long) {, +				// Don't call Long.compare here - only available on JDK 1.7+, +				return compare(leftNumber.longValue(), rightNumber.longValue());, +			else {, +				// Don't call Integer.compare here - only available on JDK 1.7+, +				return compare(leftNumber.intValue(), rightNumber.intValue());, +			}, +				return ((Comparable) left).compareTo(right);, +		}, +		catch (ClassCastException ex) {, +			throw new SpelEvaluationException(ex, SpelMessage.NOT_COMPARABLE, left.getClass(), right.getClass());, +, +	private static int compare(int x, int y) {, +		return (x < y ? -1 : (x > y ? 1 : 0));, +	private static int compare(long x, long y) {, +		return (x < y ? -1 : (x > y ? 1 : 0));]