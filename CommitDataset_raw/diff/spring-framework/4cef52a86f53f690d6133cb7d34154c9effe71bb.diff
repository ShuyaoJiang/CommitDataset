[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +, +, +	 * Internal constructor for a NULL descriptor., +	private TypeDescriptor() {, +	 * Create a new descriptor for the type of the given value., +	 * <p>Use this constructor when a conversion point comes from a source such as a Map or, +	 * Collection, where no additional context is available but elements can be introspected., +	 * @param type the actual type to wrap, +	private TypeDescriptor(Object value) {, +		Assert.notNull(value, "Value must not be null");, +		this.value = value;, +		this.type = value.getClass();, +, +	/**, +	 * Create a new descriptor for the given type., +	 * <p>Use this constructor when a conversion point comes from a plain source type,, +	 * where no additional context is available., +	 * @param type the actual type to wrap, +	 */, +	private TypeDescriptor(Class<?> type) {, +		Assert.notNull(type, "Type must not be null");, +		this.type = type;, +, +	 * Return the element type as a type descriptor; if the element type is null (cannot be determined),, +	 * the type descriptor is derived from the element argument., +		return (elementType != TypeDescriptor.NULL ? elementType : forObject(element));, +		if (this.mapValueType == null) {, +		return this.mapValueType;, +	 * Return the map value type as a type descriptor; if the value type is null, +	 * (cannot be determined), the type descriptor is derived from the value argument., +		return (valueType != TypeDescriptor.NULL ? valueType : TypeDescriptor.forObject(value));, +			return targetType.getType().isAssignableFrom(getType()) &&, +					getElementTypeDescriptor().isAssignableTo(targetType.getElementTypeDescriptor());, +		}, +		else if (isMap() && targetType.isMap()) {, +			return targetType.getType().isAssignableFrom(getType()) &&, +					getMapKeyTypeDescriptor().isAssignableTo(targetType.getMapKeyTypeDescriptor()) &&, +					getMapValueTypeDescriptor().isAssignableTo(targetType.getMapValueTypeDescriptor());, +		}, +		else {, +		}, +		else if (elementType == null) {, +		}, +		else if (this.methodParameter != null) {, +		}, +		else {, +		boolean annotatedTypeEquals =, +				getType().equals(td.getType()) && ObjectUtils.nullSafeEquals(getAnnotations(), td.getAnnotations());, +		}, +		else if (isMap()) {, +			return annotatedTypeEquals && ObjectUtils.nullSafeEquals(getMapKeyType(), td.getMapKeyType()) &&, +					ObjectUtils.nullSafeEquals(getMapValueType(), td.getMapValueType());, +		}, +		else {, +				builder.append("<").append(mapKeyType != null ? ClassUtils.getQualifiedName(mapKeyType) : "?");, +				builder.append(", ").append(valueKeyType != null ? ClassUtils.getQualifiedName(valueKeyType) : "?");, +				builder.append(">");, +			}, +			else if (isCollection()) {, +		return (this.type != null ? GenericCollectionTypeResolver.getCollectionType((Class<? extends Collection>) this.type) : null);, +		return (this.type != null && isMap() ? GenericCollectionTypeResolver.getMapKeyType((Class<? extends Map>) this.type) : null);, +		return (isMap() && this.type != null ? GenericCollectionTypeResolver.getMapValueType((Class<? extends Map>) this.type) : null);, +, +	// static factory methods, +, +	 * Create a new type descriptor for the class of the given object., +	 * @param object the object, +	 * @return the type descriptor, +	public static TypeDescriptor forObject(Object object) {, +		if (object == null) {, +			return NULL;, +		}, +		else if (object instanceof Collection<?> || object instanceof Map<?, ?>) {, +			return new TypeDescriptor(object);, +		}, +		else {, +			return valueOf(object.getClass());, +		}, +	 * Create a new type descriptor for the given class., +	 * @param type the class, +	 * @return the type descriptor, +	public static TypeDescriptor valueOf(Class<?> type) {, +		if (type == null) {, +			return TypeDescriptor.NULL;, +		TypeDescriptor desc = typeDescriptorCache.get(type);, +		return (desc != null ? desc : new TypeDescriptor(type));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +, +, +	 * Internal constructor for a NULL descriptor., +	private TypeDescriptor() {, +	 * Create a new descriptor for the type of the given value., +	 * <p>Use this constructor when a conversion point comes from a source such as a Map or, +	 * Collection, where no additional context is available but elements can be introspected., +	 * @param type the actual type to wrap, +	private TypeDescriptor(Object value) {, +		Assert.notNull(value, "Value must not be null");, +		this.value = value;, +		this.type = value.getClass();]