[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +import org.springframework.util.CollectionUtils;, +		if (this.elementType == null) {, +			this.elementType = forElementType(resolveElementType());, +		return this.elementType;, +	 * Return the element type as a type descriptor. If the element type is null, +	 * (cannot be determined), the type descriptor is derived from the element argument., +		if (this.mapKeyType == null) {, +			this.mapKeyType = forElementType(resolveMapKeyType());, +		return this.mapKeyType;, +	 * Return the map key type as a type descriptor. If the key type is null, +	 * (cannot be determined), the type descriptor is derived from the key argument., +			this.mapValueType = forElementType(resolveMapValueType());, +	 * Return the map value type as a type descriptor. If the value type is null, +			Class<?> elementType = CollectionUtils.findCommonElementType((Collection) this.value);, +			if (elementType != null) {, +				return elementType;, +			Class<?> keyType = CollectionUtils.findCommonElementType(((Map<?, ?>) this.value).keySet());, +			if (keyType != null) {, +				return keyType;, +			Class<?> valueType = CollectionUtils.findCommonElementType(((Map<?, ?>) this.value).values());, +			if (valueType != null) {, +				return valueType;, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +import org.springframework.util.CollectionUtils;, +		if (this.elementType == null) {, +			this.elementType = forElementType(resolveElementType());, +		return this.elementType;, +	 * Return the element type as a type descriptor. If the element type is null, +	 * (cannot be determined), the type descriptor is derived from the element argument., +		if (this.mapKeyType == null) {, +			this.mapKeyType = forElementType(resolveMapKeyType());, +		return this.mapKeyType;, +	 * Return the map key type as a type descriptor. If the key type is null, +	 * (cannot be determined), the type descriptor is derived from the key argument., +			this.mapValueType = forElementType(resolveMapValueType());, +	 * Return the map value type as a type descriptor. If the value type is null, +			Class<?> elementType = CollectionUtils.findCommonElementType((Collection) this.value);, +			if (elementType != null) {, +				return elementType;, +			Class<?> keyType = CollectionUtils.findCommonElementType(((Map<?, ?>) this.value).keySet());, +			if (keyType != null) {, +				return keyType;, +			Class<?> valueType = CollectionUtils.findCommonElementType(((Map<?, ?>) this.value).values());, +			if (valueType != null) {, +				return valueType;, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +, +	private static final Log logger = LogFactory.getLog(GenericConversionService.class);, +, +	private final Map<ConverterCacheKey, GenericConverter> converterCache =, +			new ConcurrentHashMap<ConverterCacheKey, GenericConverter>();, +, +, +		if (logger.isTraceEnabled()) {, +			logger.trace("Checking if I can convert " + sourceType + " to " + targetType);, +			logger.trace("Yes, I can convert");, +			logger.trace("Yes, I can convert");, +			logger.trace("No, I cannot convert");, +			throw new ConverterNotFoundException(sourceType, targetType);, +, +	 * Template method to convert a null source., +	 * <p>Default implementation returns <code>null</code>., +	 * Throws a {@link ConversionFailedException} if the targetType is a primitive type,, +	 * as <code>null</code> cannot be assigned to a primitive type., +		GenericConverter converter = this.converterCache.get(key);, +			if (logger.isTraceEnabled()) {, +				logger.trace("Matched cached converter " + converter);, +				this.converterCache.put(key, converter);, +				this.converterCache.put(key, converter);, +			this.converterCache.put(key, NO_MATCH);, +			logger.trace("Matched default NO_OP_CONVERTER");, +	private GenericConverter matchConverter(, +			MatchableConverters matchable, TypeDescriptor sourceFieldType, TypeDescriptor targetFieldType) {, +, +						if (logger.isTraceEnabled()) {, +							logger.trace("Matched converter " + conditional);, +						if (logger.isTraceEnabled()) {, +							logger.trace("Did not match converter " + conditional);, +			if (this.defaultConverter != null && logger.isTraceEnabled()) {, +				logger.trace("Matched converter " + this.defaultConverter);, +, +		public boolean equals(Object other) {, +			if (this == other) {, +				return true;, +			}, +			if (!(other instanceof ConverterCacheKey)) {, +			ConverterCacheKey otherKey = (ConverterCacheKey) other;, +			return this.sourceType.equals(otherKey.sourceType) && this.targetType.equals(otherKey.targetType);, +			return this.sourceType.hashCode() * 29 + this.targetType.hashCode();, +			return "ConverterCacheKey [sourceType = " + this.sourceType + ", targetType = " + this.targetType + "]";, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +import org.springframework.util.CollectionUtils;, +		if (this.elementType == null) {, +			this.elementType = forElementType(resolveElementType());, +		return this.elementType;, +	 * Return the element type as a type descriptor. If the element type is null, +	 * (cannot be determined), the type descriptor is derived from the element argument., +		if (this.mapKeyType == null) {, +			this.mapKeyType = forElementType(resolveMapKeyType());]