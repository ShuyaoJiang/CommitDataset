[+++ b/spring-jms/src/main/java/org/springframework/jms/config/AbstractJmsListenerContainerFactory.java, +	private Boolean replyPubSubDomain;, +, +	 * @see AbstractMessageListenerContainer#setReplyPubSubDomain(boolean), +	 */, +	public void setReplyPubSubDomain(Boolean replyPubSubDomain) {, +		this.replyPubSubDomain = replyPubSubDomain;, +	}, +, +	/**, +		if (this.replyPubSubDomain != null) {, +			instance.setReplyPubSubDomain(this.replyPubSubDomain);, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/config/AbstractJmsListenerContainerFactory.java, +	private Boolean replyPubSubDomain;, +, +	 * @see AbstractMessageListenerContainer#setReplyPubSubDomain(boolean), +	 */, +	public void setReplyPubSubDomain(Boolean replyPubSubDomain) {, +		this.replyPubSubDomain = replyPubSubDomain;, +	}, +, +	/**, +		if (this.replyPubSubDomain != null) {, +			instance.setReplyPubSubDomain(this.replyPubSubDomain);, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/config/AbstractListenerContainerParser.java, + * Copyright 2002-2015 the original author or authors., +	protected static final String RESPONSE_DESTINATION_TYPE_ATTRIBUTE = "response-destination-type";, +, +			Boolean pubSubDomain = (Boolean) commonContainerProperties.getPropertyValue("replyPubSubDomain").getValue();, +		boolean replyPubSubDomain = false;, +		String replyDestinationType = containerEle.getAttribute(RESPONSE_DESTINATION_TYPE_ATTRIBUTE);, +		if (DESTINATION_TYPE_TOPIC.equals(replyDestinationType)) {, +			replyPubSubDomain = true;, +		}, +		else if (DESTINATION_TYPE_QUEUE.equals(replyDestinationType)) {, +			replyPubSubDomain = false;, +		}, +		else if (!StringUtils.hasText(replyDestinationType)) {, +			replyPubSubDomain = pubSubDomain; // the default: same value as pubSubDomain, +		}, +		else if (StringUtils.hasText(replyDestinationType)) {, +			parserContext.getReaderContext().error("Invalid listener container 'response-destination-type': only " +, +					"\"queue\", \"topic\" supported.", containerEle);, +		}, +		properties.add("replyPubSubDomain", replyPubSubDomain);, +, +++ b/spring-jms/src/main/java/org/springframework/jms/config/AbstractJmsListenerContainerFactory.java, +	private Boolean replyPubSubDomain;, +, +	 * @see AbstractMessageListenerContainer#setReplyPubSubDomain(boolean), +	 */, +	public void setReplyPubSubDomain(Boolean replyPubSubDomain) {, +		this.replyPubSubDomain = replyPubSubDomain;, +	}, +, +	/**, +		if (this.replyPubSubDomain != null) {, +			instance.setReplyPubSubDomain(this.replyPubSubDomain);, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/config/AbstractListenerContainerParser.java, + * Copyright 2002-2015 the original author or authors., +	protected static final String RESPONSE_DESTINATION_TYPE_ATTRIBUTE = "response-destination-type";, +, +			Boolean pubSubDomain = (Boolean) commonContainerProperties.getPropertyValue("replyPubSubDomain").getValue();, +		boolean replyPubSubDomain = false;, +		String replyDestinationType = containerEle.getAttribute(RESPONSE_DESTINATION_TYPE_ATTRIBUTE);, +		if (DESTINATION_TYPE_TOPIC.equals(replyDestinationType)) {, +			replyPubSubDomain = true;, +		}, +		else if (DESTINATION_TYPE_QUEUE.equals(replyDestinationType)) {, +			replyPubSubDomain = false;, +		}, +		else if (!StringUtils.hasText(replyDestinationType)) {, +			replyPubSubDomain = pubSubDomain; // the default: same value as pubSubDomain, +		}, +		else if (StringUtils.hasText(replyDestinationType)) {, +			parserContext.getReaderContext().error("Invalid listener container 'response-destination-type': only " +, +					"\"queue\", \"topic\" supported.", containerEle);, +		}, +		properties.add("replyPubSubDomain", replyPubSubDomain);, +, +++ b/spring-jms/src/main/java/org/springframework/jms/config/MethodJmsListenerEndpoint.java, + * Copyright 2002-2015 the original author or authors., +			if (container.isReplyPubSubDomain()) {, +++ b/spring-jms/src/main/java/org/springframework/jms/config/AbstractJmsListenerContainerFactory.java, +	private Boolean replyPubSubDomain;, +, +	 * @see AbstractMessageListenerContainer#setReplyPubSubDomain(boolean), +	 */, +	public void setReplyPubSubDomain(Boolean replyPubSubDomain) {, +		this.replyPubSubDomain = replyPubSubDomain;, +	}, +, +	/**, +		if (this.replyPubSubDomain != null) {, +			instance.setReplyPubSubDomain(this.replyPubSubDomain);, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/config/AbstractListenerContainerParser.java]