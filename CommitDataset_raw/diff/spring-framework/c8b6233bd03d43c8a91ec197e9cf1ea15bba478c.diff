[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, + * Copyright 2002-2018 the original author or authors., +	private void loadBeanDefinitionsForConfigurationClass(, +			ConfigurationClass configClass, TrackedConditionEvaluator trackedConditionEvaluator) {, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, + * Copyright 2002-2018 the original author or authors., +	private void loadBeanDefinitionsForConfigurationClass(, +			ConfigurationClass configClass, TrackedConditionEvaluator trackedConditionEvaluator) {, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +					BeanDefinition bdCand = holder.getBeanDefinition().getOriginatingBeanDefinition();, +					if (bdCand == null) {, +						bdCand = holder.getBeanDefinition();, +					}, +					if (ConfigurationClassUtils.checkConfigurationClassCandidate(bdCand, this.metadataReaderFactory)) {, +						parse(bdCand.getBeanClassName(), holder.getBeanName());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, + * Copyright 2002-2018 the original author or authors., +	private void loadBeanDefinitionsForConfigurationClass(, +			ConfigurationClass configClass, TrackedConditionEvaluator trackedConditionEvaluator) {, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +					BeanDefinition bdCand = holder.getBeanDefinition().getOriginatingBeanDefinition();, +					if (bdCand == null) {, +						bdCand = holder.getBeanDefinition();, +					}, +					if (ConfigurationClassUtils.checkConfigurationClassCandidate(bdCand, this.metadataReaderFactory)) {, +						parse(bdCand.getBeanClassName(), holder.getBeanName());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassUtils.java, + * Copyright 2002-2018 the original author or authors., + * Utilities for identifying @{@link Configuration} classes., +	private static final Set<String> candidateIndicators = new HashSet<>(8);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, + * Copyright 2002-2018 the original author or authors., +	private void loadBeanDefinitionsForConfigurationClass(, +			ConfigurationClass configClass, TrackedConditionEvaluator trackedConditionEvaluator) {, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +					BeanDefinition bdCand = holder.getBeanDefinition().getOriginatingBeanDefinition();, +					if (bdCand == null) {, +						bdCand = holder.getBeanDefinition();, +					}, +					if (ConfigurationClassUtils.checkConfigurationClassCandidate(bdCand, this.metadataReaderFactory)) {, +						parse(bdCand.getBeanClassName(), holder.getBeanName());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassUtils.java, + * Copyright 2002-2018 the original author or authors., + * Utilities for identifying @{@link Configuration} classes., +	private static final Set<String> candidateIndicators = new HashSet<>(8);, +++ b/spring-context/src/test/java/org/springframework/context/annotation/spr16756/ScannedComponent.java, +/*, + * Copyright 2002-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.context.annotation.spr16756;, +, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.context.annotation.Scope;, +import org.springframework.context.annotation.ScopedProxyMode;, +import org.springframework.stereotype.Component;, +, +@Component, +public class ScannedComponent {, +, +	@Autowired, +	private State state;, +, +	public String iDoAnything() {, +		return state.anyMethod();, +	}, +, +, +	public interface State {, +, +		String anyMethod();, +	}, +, +, +	@Component, +	@Scope(proxyMode = ScopedProxyMode.INTERFACES, value = "prototype"), +	public static class StateImpl implements State {, +, +		public String anyMethod() {, +			return "anyMethod called";, +		}, +	}, +, +}]