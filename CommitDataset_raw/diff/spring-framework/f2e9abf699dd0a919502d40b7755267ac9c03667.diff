[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/org.springframework.transaction/.classpath, +	<classpathentry kind="var" path="IVY_CACHE/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-2.3.0.jar" sourcepath="/IVY_CACHE/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-sources-2.3.0.jar"/>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/org.springframework.transaction/.classpath, +	<classpathentry kind="var" path="IVY_CACHE/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-2.3.0.jar" sourcepath="/IVY_CACHE/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-sources-2.3.0.jar"/>, +++ b/org.springframework.transaction/ivy.xml, +		<dependency org="org.easymock" name="com.springsource.org.easymock" rev="2.3.0" conf="test->compile"/>, +		<dependency org="org.easymock" name="com.springsource.org.easymock.classextension" rev="2.3.0" conf="test->compile"/>, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/org.springframework.transaction/.classpath, +	<classpathentry kind="var" path="IVY_CACHE/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-2.3.0.jar" sourcepath="/IVY_CACHE/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-sources-2.3.0.jar"/>, +++ b/org.springframework.transaction/ivy.xml, +		<dependency org="org.easymock" name="com.springsource.org.easymock" rev="2.3.0" conf="test->compile"/>, +		<dependency org="org.easymock" name="com.springsource.org.easymock.classextension" rev="2.3.0" conf="test->compile"/>, +++ b/org.springframework.transaction/src/test/java/org/springframework/jca/cci/CciLocalTransactionTests.java, +/*, + * Copyright 2002-2005 the original author or authors., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + *      http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.jca.cci;, +, +import static org.easymock.EasyMock.*;, +import static org.junit.Assert.assertTrue;, +, +import javax.resource.ResourceException;, +import javax.resource.cci.Connection;, +import javax.resource.cci.ConnectionFactory;, +import javax.resource.cci.Interaction;, +import javax.resource.cci.InteractionSpec;, +import javax.resource.cci.LocalTransaction;, +import javax.resource.cci.Record;, +, +import org.junit.Test;, +import org.springframework.dao.DataRetrievalFailureException;, +import org.springframework.jca.cci.core.CciTemplate;, +import org.springframework.transaction.TransactionStatus;, +import org.springframework.transaction.support.TransactionCallback;, +import org.springframework.transaction.support.TransactionCallbackWithoutResult;, +import org.springframework.transaction.support.TransactionSynchronizationManager;, +import org.springframework.transaction.support.TransactionTemplate;, +, +/**, + * @author Thierry Templier, + * @author Chris Beams, + */, +public class CciLocalTransactionTests {, +, +	/**, +	 * Test if a transaction ( begin / commit ) is executed on the, +	 * LocalTransaction when CciLocalTransactionManager is specified as, +	 * transaction manager., +	 */, +	@Test, +	public void testLocalTransactionCommit() throws ResourceException {, +		final ConnectionFactory connectionFactory = createMock(ConnectionFactory.class);, +		Connection connection = createMock(Connection.class);, +		Interaction interaction = createMock(Interaction.class);, +		LocalTransaction localTransaction = createMock(LocalTransaction.class);, +		final Record record = createMock(Record.class);, +		final InteractionSpec interactionSpec = createMock(InteractionSpec.class);, +, +		expect(connectionFactory.getConnection()).andReturn(connection);, +, +		expect(connection.getLocalTransaction()).andReturn(localTransaction);, +, +		localTransaction.begin();, +, +		expect(connection.createInteraction()).andReturn(interaction);]