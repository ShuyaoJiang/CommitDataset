[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/PathVariableMethodArgumentResolver.java, +import org.springframework.web.method.support.ModelAndViewContainer;, +	@Override, +	protected void handleResolvedValue(Object arg, , +									   String name, , +									   MethodParameter parameter,, +									   ModelAndViewContainer mavContainer, , +									   NativeWebRequest webRequest) {, +		if (mavContainer != null) {, +			mavContainer.addAttribute(name, arg);, +		}, +	}, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/PathVariableMethodArgumentResolver.java, +import org.springframework.web.method.support.ModelAndViewContainer;, +	@Override, +	protected void handleResolvedValue(Object arg, , +									   String name, , +									   MethodParameter parameter,, +									   ModelAndViewContainer mavContainer, , +									   NativeWebRequest webRequest) {, +		if (mavContainer != null) {, +			mavContainer.addAttribute(name, arg);, +		}, +	}, +, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMethodAdapterIntegrationTests.java, +			model.addAttribute("cookie", cookie).addAttribute("header", header), +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/PathVariableMethodArgumentResolver.java, +import org.springframework.web.method.support.ModelAndViewContainer;, +	@Override, +	protected void handleResolvedValue(Object arg, , +									   String name, , +									   MethodParameter parameter,, +									   ModelAndViewContainer mavContainer, , +									   NativeWebRequest webRequest) {, +		if (mavContainer != null) {, +			mavContainer.addAttribute(name, arg);, +		}, +	}, +, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMethodAdapterIntegrationTests.java, +			model.addAttribute("cookie", cookie).addAttribute("header", header), +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/support/PathVariableMethodArgumentResolverTests.java, +import org.springframework.web.method.support.ModelAndViewContainer;, +	private ModelAndViewContainer mavContainer;, +	, +		mavContainer = new ModelAndViewContainer();, +		String result = (String) resolver.resolveArgument(paramNamedString, mavContainer, webRequest, null);, +		assertEquals("PathVariable not resolved correctly", "value", result);, +		assertEquals("PathVariable not added to the model", "value", mavContainer.getAttribute("name"));, +		resolver.resolveArgument(paramNamedString, mavContainer, webRequest, null);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/PathVariableMethodArgumentResolver.java, +import org.springframework.web.method.support.ModelAndViewContainer;, +	@Override, +	protected void handleResolvedValue(Object arg, , +									   String name, , +									   MethodParameter parameter,, +									   ModelAndViewContainer mavContainer, , +									   NativeWebRequest webRequest) {, +		if (mavContainer != null) {, +			mavContainer.addAttribute(name, arg);, +		}, +	}, +, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMethodAdapterIntegrationTests.java, +			model.addAttribute("cookie", cookie).addAttribute("header", header), +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/support/PathVariableMethodArgumentResolverTests.java, +import org.springframework.web.method.support.ModelAndViewContainer;, +	private ModelAndViewContainer mavContainer;, +	, +		mavContainer = new ModelAndViewContainer();, +		String result = (String) resolver.resolveArgument(paramNamedString, mavContainer, webRequest, null);, +		assertEquals("PathVariable not resolved correctly", "value", result);, +		assertEquals("PathVariable not added to the model", "value", mavContainer.getAttribute("name"));, +		resolver.resolveArgument(paramNamedString, mavContainer, webRequest, null);, +++ b/org.springframework.web/src/main/java/org/springframework/web/method/annotation/support/AbstractNamedValueMethodArgumentResolver.java, + * <li>Optionally handle a resolved value, +			arg = handleNullValue(namedValueInfo.name, arg, paramType);, +			arg = binder.convertIfNecessary(arg, paramType, parameter);, +		, +		handleResolvedValue(arg, namedValueInfo.name, parameter, mavContainer, webRequest);, +, +	/**, +	 * A {@code null} results in a {@code false} value for {@code boolean}s or an exception for other primitives., +	 */, +	private Object handleNullValue(String name, Object value, Class<?> paramType) {, +	 * Invoked after a value is resolved., +	 * @param arg the resolved argument value, +	 * @param name the argument name, +	 * @param parameter the argument parameter type, +	 * @param mavContainer the {@link ModelAndViewContainer}, which may be {@code null}, +	 * @param webRequest the current request, +	 */, +	protected void handleResolvedValue(Object arg, String name, MethodParameter parameter,, +			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) {, +, +	}, +, +	/**]