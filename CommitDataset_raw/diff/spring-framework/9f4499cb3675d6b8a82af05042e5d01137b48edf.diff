[+++ b/org.springframework.web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java, + * Implementation of {@link HttpMessageConverter} that can handle form data, including multipart form data (i.e. file, + * uploads)., + * <p>In other words, this converter can read and write 'normal' HTML forms (as {@link MultiValueMap, + * MultiValueMap&lt;String, String&gt;}), and it can write multipart form (as {@link MultiValueMap, + * MultiValueMap&lt;String, Object&gt;}. When writing multipart, this converter uses other {@link HttpMessageConverter, + * HttpMessageConverters} to write the respective MIME parts. By default, basic converters are registered (supporting, + * {@code Strings} and {@code Resources}, for instance); these can be overridden by setting the {@link, + * #setPartConverters(java.util.List) partConverters} property., + * <p>For example, the following snippet shows how to submit an HTML form: <pre class="code"> RestTemplate template =, + * new RestTemplate(); // FormHttpMessageConverter is configured by default MultiValueMap&lt;String, String&gt; form =, + * new LinkedMultiValueMap&lt;String, String&gt;(); form.add("field 1", "value 1"); form.add("field 2", "value 2");, + * form.add("field 2", "value 3"); template.postForLocation("http://example.com/myForm", form); </pre> <p>The following, + * snippet shows how to do a file upload: <pre class="code"> MultiValueMap&lt;String, Object&gt; parts = new, + * LinkedMultiValueMap&lt;String, Object&gt;(); parts.add("field 1", "value 1"); parts.add("file", new, + * ClassPathResource("myFile.jpg")); template.postForLocation("http://example.com/myFileUpload", parts); </pre>, +	/** Add a message body converter. Such a converters is used to convert objects to MIME parts. */, +	/** Set the message body converters to use. These converters are used to convert objects to MIME parts. */, +	/** Sets the character set used for writing form data. */, +			writeForm((MultiValueMap<String, String>) map, contentType, outputMessage);, +	private void writeForm(MultiValueMap<String, String> form, MediaType contentType, HttpOutputMessage outputMessage), +			throws IOException {, +		Charset charset;, +		if (contentType != null) {, +			outputMessage.getHeaders().setContentType(contentType);, +			charset = contentType.getCharSet() != null ? contentType.getCharSet() : this.charset;, +		} else {, +			charset = this.charset;, +		}, +	private void writeMultipart(MultiValueMap<String, Object> parts, HttpOutputMessage outputMessage), +			throws IOException {, +	 * Generate a multipart boundary. <p>Default implementation returns a random boundary. Can be overridden in, +	 * subclasses., +	 * <p>Default implementation returns {@link Resource#getFilename()} if the part is a {@code Resource}, and {@code null}, +	 * in other cases. Can be overridden in subclasses., +	 *, +	/** Implementation of {@link org.springframework.http.HttpOutputMessage} used for writing multipart data. */]