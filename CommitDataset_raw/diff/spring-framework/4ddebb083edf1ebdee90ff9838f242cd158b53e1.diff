[+++ /dev/null, +++ /dev/null, +++ b/org.springframework.testsuite/src/test/java/org/springframework/util/MethodInvokerTests.java, +/*, + * Copyright 2002-2008 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.util;, +, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.List;, +, +import junit.framework.TestCase;, +, +/**, + * @author Colin Sampaleanu, + * @author Juergen Hoeller, + * @since 21.11.2003, + */, +public class MethodInvokerTests extends TestCase {, +, +	public void testPlainMethodInvoker() throws Exception {, +		// sanity check: singleton, non-static should work, +		TestClass1 tc1 = new TestClass1();, +		MethodInvoker mi = new MethodInvoker();, +		mi.setTargetObject(tc1);, +		mi.setTargetMethod("method1");, +		mi.prepare();, +		Integer i = (Integer) mi.invoke();, +		assertEquals(1, i.intValue());, +, +		// sanity check: check that argument count matching works, +		mi = new MethodInvoker();, +		mi.setTargetClass(TestClass1.class);, +		mi.setTargetMethod("supertypes");, +		mi.setArguments(new Object[] {new ArrayList(), new ArrayList(), "hello"});, +		mi.prepare();, +		assertEquals("hello", mi.invoke());, +, +		mi = new MethodInvoker();, +		mi.setTargetClass(TestClass1.class);, +		mi.setTargetMethod("supertypes2");, +		mi.setArguments(new Object[] {new ArrayList(), new ArrayList(), "hello", "bogus"});, +		mi.prepare();, +		assertEquals("hello", mi.invoke());, +, +		// Sanity check: check that argument conversion doesn't work with plain MethodInvoker, +		mi = new MethodInvoker();, +		mi.setTargetClass(TestClass1.class);, +		mi.setTargetMethod("supertypes2");, +		mi.setArguments(new Object[] {new ArrayList(), new ArrayList(), "hello", Boolean.TRUE});, +		try {, +			mi.prepare();, +			fail("Shouldn't have matched without argument conversion");, +		}, +		catch (NoSuchMethodException ex) {, +			// expected, +		}, +	}, +, +	public void testStringWithMethodInvoker() throws Exception {, +		try {, +			MethodInvoker methodInvoker = new MethodInvoker();, +			methodInvoker.setTargetObject(new Greeter());, +			methodInvoker.setTargetMethod("greet");, +			methodInvoker.setArguments(new Object[] {new String("no match")});, +			methodInvoker.prepare();, +			fail("Should have thrown a NoSuchMethodException");, +		}, +		catch (NoSuchMethodException e) {, +			// expected, +		}, +	}, +, +	public void testPurchaserWithMethodInvoker() throws Exception {, +		MethodInvoker methodInvoker = new MethodInvoker();, +		methodInvoker.setTargetObject(new Greeter());, +		methodInvoker.setTargetMethod("greet");, +		methodInvoker.setArguments(new Object[] {new Purchaser()});, +		methodInvoker.prepare();, +		String greeting = (String) methodInvoker.invoke();, +		assertEquals("purchaser: hello", greeting);, +	}, +, +	public void testShopperWithMethodInvoker() throws Exception {, +		MethodInvoker methodInvoker = new MethodInvoker();, +		methodInvoker.setTargetObject(new Greeter());]