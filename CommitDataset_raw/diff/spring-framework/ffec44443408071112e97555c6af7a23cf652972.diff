[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMethodAdapter.java, +import org.springframework.web.method.support.HandlerMethodArgumentResolver;, +import org.springframework.web.method.support.HandlerMethodArgumentResolverComposite;, +import org.springframework.web.method.support.HandlerMethodReturnValueHandler;, +import org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite;, +	private HandlerMethodReturnValueHandlerComposite returnValueHandlers;, +	private HandlerMethodArgumentResolverComposite argumentResolvers;, +	private HandlerMethodArgumentResolverComposite initBinderArgumentResolvers;, +	/**, +	 * Set the {@link HandlerMethodArgumentResolver}s to use to resolve argument values for {@link RequestMapping} , +	 * and {@link ModelAttribute} methods. This is an optional property., +	 * @param argumentResolvers the argument resolvers to use, +	 */, +	public void setHandlerMethodArgumentResolvers(HandlerMethodArgumentResolver[] argumentResolvers) {, +		this.argumentResolvers = new HandlerMethodArgumentResolverComposite();, +		for (HandlerMethodArgumentResolver resolver : argumentResolvers) {, +			this.argumentResolvers.registerArgumentResolver(resolver);, +		}, +	}, +, +	/**, +	 * Set the {@link HandlerMethodReturnValueHandler}s to use to handle the return values of , +	 * {@link RequestMapping} methods. This is an optional property., +	 * @param returnValueHandlers the return value handlers to use, +	 */, +	public void setHandlerMethodReturnValueHandlers(HandlerMethodReturnValueHandler[] returnValueHandlers) {, +		this.returnValueHandlers = new HandlerMethodReturnValueHandlerComposite();, +		for (HandlerMethodReturnValueHandler handler : returnValueHandlers) {, +			this.returnValueHandlers.registerReturnValueHandler(handler);, +		}, +	}, +, +	/**, +	 * Set the {@link HandlerMethodArgumentResolver}s to use to resolve argument values for {@link InitBinder} , +	 * methods. This is an optional property., +	 * @param argumentResolvers the argument resolvers to use, +	 */, +	public void setInitBinderMethodArgumentResolvers(HandlerMethodArgumentResolver[] argumentResolvers) {, +		this.initBinderArgumentResolvers = new HandlerMethodArgumentResolverComposite();, +		for (HandlerMethodArgumentResolver resolver : argumentResolvers) {, +			this.initBinderArgumentResolvers.registerArgumentResolver(resolver);, +		}, +	}, +	, +		initHandlerMethodArgumentResolvers();, +		initHandlerMethodReturnValueHandlers();, +		initBinderMethodArgumentResolvers();, +	private void initHandlerMethodArgumentResolvers() {, +		if (argumentResolvers != null) {, +			return;, +		}, +		argumentResolvers = new HandlerMethodArgumentResolverComposite();, +		, +		// Annotation-based resolvers, +		argumentResolvers.registerArgumentResolver(new RequestParamMethodArgumentResolver(beanFactory, false));, +		argumentResolvers.registerArgumentResolver(new RequestParamMapMethodArgumentResolver());, +		argumentResolvers.registerArgumentResolver(new PathVariableMethodArgumentResolver(beanFactory));, +		argumentResolvers.registerArgumentResolver(new ServletModelAttributeMethodProcessor(false));, +		argumentResolvers.registerArgumentResolver(new RequestResponseBodyMethodProcessor(messageConverters));, +		argumentResolvers.registerArgumentResolver(new RequestHeaderMethodArgumentResolver(beanFactory));, +		argumentResolvers.registerArgumentResolver(new RequestHeaderMapMethodArgumentResolver());, +		argumentResolvers.registerArgumentResolver(new ServletCookieValueMethodArgumentResolver(beanFactory));, +		argumentResolvers.registerArgumentResolver(new ExpressionValueMethodArgumentResolver(beanFactory));, +				argumentResolvers.registerArgumentResolver(new WebArgumentResolverAdapter(customResolver));, +		// Type-based resolvers, +		argumentResolvers.registerArgumentResolver(new ServletRequestMethodArgumentResolver());, +		argumentResolvers.registerArgumentResolver(new ServletResponseMethodArgumentResolver());, +		argumentResolvers.registerArgumentResolver(new HttpEntityMethodProcessor(messageConverters));, +		argumentResolvers.registerArgumentResolver(new ModelMethodProcessor());, +		argumentResolvers.registerArgumentResolver(new ErrorsMethodArgumentResolver());, +		, +		// Default-mode resolution, +		argumentResolvers.registerArgumentResolver(new RequestParamMethodArgumentResolver(beanFactory, true));, +		argumentResolvers.registerArgumentResolver(new ServletModelAttributeMethodProcessor(true));, +	private void initBinderMethodArgumentResolvers() {, +		if (initBinderArgumentResolvers != null) {, +			return;, +		}, +		initBinderArgumentResolvers = new HandlerMethodArgumentResolverComposite();, +		, +		// Annotation-based resolvers, +		initBinderArgumentResolvers.registerArgumentResolver(new RequestParamMethodArgumentResolver(beanFactory, false));, +		initBinderArgumentResolvers.registerArgumentResolver(new RequestParamMapMethodArgumentResolver());, +		initBinderArgumentResolvers.registerArgumentResolver(new PathVariableMethodArgumentResolver(beanFactory));, +		initBinderArgumentResolvers.registerArgumentResolver(new ExpressionValueMethodArgumentResolver(beanFactory));, +				initBinderArgumentResolvers.registerArgumentResolver(new WebArgumentResolverAdapter(customResolver));, +		// Type-based resolvers, +		initBinderArgumentResolvers.registerArgumentResolver(new ServletRequestMethodArgumentResolver());, +		initBinderArgumentResolvers.registerArgumentResolver(new ServletResponseMethodArgumentResolver());, +		, +		// Default-mode resolution, +		initBinderArgumentResolvers.registerArgumentResolver(new RequestParamMethodArgumentResolver(beanFactory, true));, +	private void initHandlerMethodReturnValueHandlers() {, +		if (returnValueHandlers != null) {, +			return;, +		}, +		returnValueHandlers = new HandlerMethodReturnValueHandlerComposite();, +		, +		// Annotation-based handlers, +		]