[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +	/**, +	 * Register the given mapping., +	 * <p>This method may be invoked at runtime after initialization has completed., +	 * @param mapping the mapping for the handler method, +	 * @param handler the handler, +	 * @param method the method, +	 */, +	public void registerMapping(T mapping, Object handler, Method method) {, +		this.mappingRegistry.register(mapping, handler, method);, +	}, +, +	/**, +	 * Un-register the given mapping., +	 * <p>This method may be invoked at runtime after initialization has completed., +	 * @param mapping the mapping to unregister, +	 */, +	public void unregisterMapping(T mapping) {, +		this.mappingRegistry.unregister(mapping);, +	}, +, +, +	// Handler method detection, +	// Handler method lookup, +	// Abstract template methods, +, +	/**, +	 * Whether the given type is a handler with handler methods., +	 * @param beanType the type of the bean being checked, +	 * @return "true" if this a handler type, "false" otherwise., +	 */, +	protected abstract boolean isHandler(Class<?> beanType);, +, +	/**, +	 * Provide the mapping for a handler method. A method for which no, +	 * mapping can be provided is not a handler method., +	 * @param method the method to provide a mapping for, +	 * @param handlerType the handler type, possibly a sub-type of the method's, +	 * declaring class, +	 * @return the mapping, or {@code null} if the method is not mapped, +	 */, +	protected abstract T getMappingForMethod(Method method, Class<?> handlerType);, +, +	/**, +	 * Extract and return the URL paths contained in a mapping., +	 */, +	protected abstract Set<String> getMappingPathPatterns(T mapping);, +, +	/**, +	 * Check if a mapping matches the current request and return a (potentially, +	 * new) mapping with conditions relevant to the current request., +	 * @param mapping the mapping to get a match for, +	 * @param request the current HTTP servlet request, +	 * @return the match, or {@code null} if the mapping doesn't match, +	 */, +	protected abstract T getMatchingMapping(T mapping, HttpServletRequest request);, +, +	/**, +	 * Return a comparator for sorting matching mappings., +	 * The returned comparator should sort 'better' matches higher., +	 * @param request the current request, +	 * @return the comparator (never {@code null}), +	 */, +	protected abstract Comparator<T> getMappingComparator(HttpServletRequest request);, +, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +	/**, +	 * Register the given mapping., +	 * <p>This method may be invoked at runtime after initialization has completed., +	 * @param mapping the mapping for the handler method, +	 * @param handler the handler, +	 * @param method the method, +	 */, +	public void registerMapping(T mapping, Object handler, Method method) {, +		this.mappingRegistry.register(mapping, handler, method);, +	}, +, +	/**, +	 * Un-register the given mapping., +	 * <p>This method may be invoked at runtime after initialization has completed., +	 * @param mapping the mapping to unregister, +	 */, +	public void unregisterMapping(T mapping) {, +		this.mappingRegistry.unregister(mapping);, +	}, +, +, +	// Handler method detection, +	// Handler method lookup, +	// Abstract template methods, +, +	/**, +	 * Whether the given type is a handler with handler methods., +	 * @param beanType the type of the bean being checked, +	 * @return "true" if this a handler type, "false" otherwise., +	 */, +	protected abstract boolean isHandler(Class<?> beanType);, +, +	/**]