[+++ b/spring-core/src/main/java/org/springframework/util/ObjectUtils.java, + * Copyright 2002-2015 the original author or authors., +import java.util.Collection;, +import java.util.Map;, + *, + * <p>Mainly for internal use within the framework., + * @author Sam Brannen, + * @see ClassUtils, + * @see CollectionUtils, + * @see StringUtils, +	 * @see #isEmpty(Object), +	 * Determine whether the given object is empty., +	 * <p>This method supports the following object types., +	 * <ul>, +	 * <li>{@code Array}: considered empty if its length is zero</li>, +	 * <li>{@link CharSequence}: considered empty if its length is zero</li>, +	 * <li>{@link Collection}: delegates to {@link Collection#isEmpty()}</li>, +	 * <li>{@link Map}: delegates to {@link Map#isEmpty()}</li>, +	 * </ul>, +	 * <p>If the given object is non-null and not one of the aforementioned, +	 * supported types, this method returns {@code false}., +	 * @param obj the object to check, +	 * @return {@code true} if the object is {@code null} or <em>empty</em>, +	 * @since 4.2, +	 * @see ObjectUtils#isEmpty(Object[]), +	 * @see StringUtils#hasLength(CharSequence), +	 * @see StringUtils#isEmpty(Object), +	 * @see CollectionUtils#isEmpty(java.util.Collection), +	 * @see CollectionUtils#isEmpty(java.util.Map), +	 */, +	@SuppressWarnings("rawtypes"), +	public static boolean isEmpty(Object obj) {, +		if (obj == null) {, +			return true;, +		}, +, +		if (obj.getClass().isArray()) {, +			return Array.getLength(obj) == 0;, +		}, +		if (obj instanceof CharSequence) {, +			return ((CharSequence) obj).length() == 0;, +		}, +		if (obj instanceof Collection) {, +			return ((Collection) obj).isEmpty();, +		}, +		if (obj instanceof Map) {, +			return ((Map) obj).isEmpty();, +		}, +, +		// else, +		return false;, +	}, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/util/ObjectUtils.java, + * Copyright 2002-2015 the original author or authors., +import java.util.Collection;, +import java.util.Map;, + *, + * <p>Mainly for internal use within the framework., + * @author Sam Brannen, + * @see ClassUtils, + * @see CollectionUtils, + * @see StringUtils, +	 * @see #isEmpty(Object), +	 * Determine whether the given object is empty., +	 * <p>This method supports the following object types., +	 * <ul>, +	 * <li>{@code Array}: considered empty if its length is zero</li>, +	 * <li>{@link CharSequence}: considered empty if its length is zero</li>, +	 * <li>{@link Collection}: delegates to {@link Collection#isEmpty()}</li>, +	 * <li>{@link Map}: delegates to {@link Map#isEmpty()}</li>, +	 * </ul>, +	 * <p>If the given object is non-null and not one of the aforementioned, +	 * supported types, this method returns {@code false}., +	 * @param obj the object to check, +	 * @return {@code true} if the object is {@code null} or <em>empty</em>, +	 * @since 4.2, +	 * @see ObjectUtils#isEmpty(Object[]), +	 * @see StringUtils#hasLength(CharSequence), +	 * @see StringUtils#isEmpty(Object), +	 * @see CollectionUtils#isEmpty(java.util.Collection), +	 * @see CollectionUtils#isEmpty(java.util.Map), +	 */, +	@SuppressWarnings("rawtypes"), +	public static boolean isEmpty(Object obj) {, +		if (obj == null) {, +			return true;, +		}, +, +		if (obj.getClass().isArray()) {, +			return Array.getLength(obj) == 0;, +		}, +		if (obj instanceof CharSequence) {, +			return ((CharSequence) obj).length() == 0;, +		}, +		if (obj instanceof Collection) {, +			return ((Collection) obj).isEmpty();, +		}, +		if (obj instanceof Map) {]