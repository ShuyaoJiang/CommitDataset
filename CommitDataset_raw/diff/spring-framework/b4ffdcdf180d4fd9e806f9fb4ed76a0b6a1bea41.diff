[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/PropertyBatchUpdateException.java, +		for (PropertyAccessException pae : this.propertyAccessExceptions) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/PropertyBatchUpdateException.java, +		for (PropertyAccessException pae : this.propertyAccessExceptions) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/CustomScopeConfigurer.java, + * Copyright 2002-2009 the original author or authors., +	@SuppressWarnings("unchecked"), +++ b/org.springframework.beans/src/main/java/org/springframework/beans/PropertyBatchUpdateException.java, +		for (PropertyAccessException pae : this.propertyAccessExceptions) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/CustomScopeConfigurer.java, + * Copyright 2002-2009 the original author or authors., +	@SuppressWarnings("unchecked"), +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +							return ((factoryBean instanceof SmartFactoryBean && ((SmartFactoryBean) factoryBean).isPrototype()) ||, +									!factoryBean.isSingleton());, +					}, getAccessControlContext());, +				Class<? extends PropertyEditor> editorClass = entry.getValue();, +				registry.registerCustomEditor(requiredType, BeanUtils.instantiateClass(editorClass));, +			throw new CannotLoadBeanClassException(mbd.getResourceDescription(), beanName, mbd.getBeanClassName(), ex);, +			throw new CannotLoadBeanClassException(mbd.getResourceDescription(), beanName, mbd.getBeanClassName(), ex);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/PropertyBatchUpdateException.java, +		for (PropertyAccessException pae : this.propertyAccessExceptions) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/CustomScopeConfigurer.java, + * Copyright 2002-2009 the original author or authors., +	@SuppressWarnings("unchecked"), +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +							return ((factoryBean instanceof SmartFactoryBean && ((SmartFactoryBean) factoryBean).isPrototype()) ||, +									!factoryBean.isSingleton());, +					}, getAccessControlContext());, +				Class<? extends PropertyEditor> editorClass = entry.getValue();, +				registry.registerCustomEditor(requiredType, BeanUtils.instantiateClass(editorClass));, +			throw new CannotLoadBeanClassException(mbd.getResourceDescription(), beanName, mbd.getBeanClassName(), ex);, +			throw new CannotLoadBeanClassException(mbd.getResourceDescription(), beanName, mbd.getBeanClassName(), ex);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java, +			bd.setScope(TRUE_VALUE.equals(ele.getAttribute(SINGLETON_ATTRIBUTE)) ?, +					BeanDefinition.SCOPE_SINGLETON : BeanDefinition.SCOPE_PROTOTYPE);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/PropertyBatchUpdateException.java, +		for (PropertyAccessException pae : this.propertyAccessExceptions) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/CustomScopeConfigurer.java, + * Copyright 2002-2009 the original author or authors., +	@SuppressWarnings("unchecked"), +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +							return ((factoryBean instanceof SmartFactoryBean && ((SmartFactoryBean) factoryBean).isPrototype()) ||, +									!factoryBean.isSingleton());, +					}, getAccessControlContext());, +				Class<? extends PropertyEditor> editorClass = entry.getValue();, +				registry.registerCustomEditor(requiredType, BeanUtils.instantiateClass(editorClass));, +			throw new CannotLoadBeanClassException(mbd.getResourceDescription(), beanName, mbd.getBeanClassName(), ex);, +			throw new CannotLoadBeanClassException(mbd.getResourceDescription(), beanName, mbd.getBeanClassName(), ex);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java, +			bd.setScope(TRUE_VALUE.equals(ele.getAttribute(SINGLETON_ATTRIBUTE)) ?, +					BeanDefinition.SCOPE_SINGLETON : BeanDefinition.SCOPE_PROTOTYPE);, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/annotation/ManagedMetric.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/PropertyBatchUpdateException.java, +		for (PropertyAccessException pae : this.propertyAccessExceptions) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/CustomScopeConfigurer.java, + * Copyright 2002-2009 the original author or authors., +	@SuppressWarnings("unchecked"), +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +							return ((factoryBean instanceof SmartFactoryBean && ((SmartFactoryBean) factoryBean).isPrototype()) ||, +									!factoryBean.isSingleton());, +					}, getAccessControlContext());, +				Class<? extends PropertyEditor> editorClass = entry.getValue();, +				registry.registerCustomEditor(requiredType, BeanUtils.instantiateClass(editorClass));, +			throw new CannotLoadBeanClassException(mbd.getResourceDescription(), beanName, mbd.getBeanClassName(), ex);, +			throw new CannotLoadBeanClassException(mbd.getResourceDescription(), beanName, mbd.getBeanClassName(), ex);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java, +			bd.setScope(TRUE_VALUE.equals(ele.getAttribute(SINGLETON_ATTRIBUTE)) ?, +					BeanDefinition.SCOPE_SINGLETON : BeanDefinition.SCOPE_PROTOTYPE);, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/annotation/ManagedMetric.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License.]