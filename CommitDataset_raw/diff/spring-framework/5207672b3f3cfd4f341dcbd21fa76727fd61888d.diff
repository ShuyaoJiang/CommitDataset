[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/CssLinkResourceTransformer.java, +	@SuppressWarnings("deprecation"), +							inputResource instanceof EncodedResourceResolver.EncodedResource ||, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/CssLinkResourceTransformer.java, +	@SuppressWarnings("deprecation"), +							inputResource instanceof EncodedResourceResolver.EncodedResource ||, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/EncodedResourceResolver.java, +/*, + * Copyright 2002-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.reactive.resource;, +, +import java.io.File;, +import java.io.IOException;, +import java.io.InputStream;, +import java.net.URI;, +import java.net.URL;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.LinkedHashMap;, +import java.util.List;, +import java.util.Map;, +, +import reactor.core.publisher.Mono;, +, +import org.springframework.core.io.AbstractResource;, +import org.springframework.core.io.Resource;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.server.reactive.ServerHttpRequest;, +import org.springframework.lang.Nullable;, +import org.springframework.util.Assert;, +import org.springframework.web.server.ServerWebExchange;, +, +/**, + * Resolver that delegates to the chain, and if a resource is found, it then, + * attempts to find an encoded (e.g. gzip, brotli) variant that is acceptable, + * based on the "Accept-Encoding" request header., + *, + * <p>The list of supported {@link #setContentCodings(List) contentCodings} can, + * be configured, in order of preference, and each coding must be associated, + * with {@link #setExtensions(Map) extensions}., + *, + * <p>Note that this resolver must be ordered ahead of a, + * {@link VersionResourceResolver} with a content-based, version strategy to, + * ensure the version calculation is not impacted by the encoding., + *, + * @author Rossen Stoyanchev, + * @since 5.1, + */, +public class EncodedResourceResolver extends AbstractResourceResolver {, +, +	private final List<String> contentCodings = new ArrayList<>(Arrays.asList("br", "gzip"));, +, +	private final Map<String, String> extensions = new LinkedHashMap<>();, +, +, +	public EncodedResourceResolver() {, +		this.extensions.put("gzip", ".gz");, +		this.extensions.put("br", ".br");, +	}, +, +, +	/**, +	 * Configure the supported content codings in order of preference. The first, +	 * coding that is present in the {@literal "Accept-Encoding"} header for a, +	 * given request, and that has a file present with the associated extension,, +	 * is used., +	 *, +	 * <p><strong>Note:</strong> Each coding must be associated with a file, +	 * extension via {@link #registerExtension} or {@link #setExtensions}., +	 *, +	 * <p>By default this property is set to {@literal ["br", "gzip"]}., +	 *, +	 * @param codings one or more supported content codings, +	 */, +	public void setContentCodings(List<String> codings) {, +		Assert.notEmpty(codings, "At least one content coding expected.");, +		this.contentCodings.clear();, +		this.contentCodings.addAll(codings);, +	}, +, +	/**, +	 * Return a read-only list with the supported content codings., +	 */, +	public List<String> getContentCodings() {, +		return Collections.unmodifiableList(this.contentCodings);]