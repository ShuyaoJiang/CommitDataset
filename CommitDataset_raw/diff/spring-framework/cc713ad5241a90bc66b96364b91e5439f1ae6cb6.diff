[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AbstractConfigurationClassProcessor.java, + * customizing the creation of a {@link ConfigurationClassParser} ({@link #createConfigurationParser}),, +	 * Create and return a new {@link ConfigurationClassParser}, allowing for customization of, +	protected abstract ConfigurationClassParser createConfigurationParser();, +		ConfigurationClassParser parser = createConfigurationParser();, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AbstractConfigurationClassProcessor.java, + * customizing the creation of a {@link ConfigurationClassParser} ({@link #createConfigurationParser}),, +	 * Create and return a new {@link ConfigurationClassParser}, allowing for customization of, +	protected abstract ConfigurationClassParser createConfigurationParser();, +		ConfigurationClassParser parser = createConfigurationParser();, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AddAnnotationAdapter.java, + * {@link ConfigurationClassEnhancer} to dynamically add an {@link org.aspectj.lang.Aspect}, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AbstractConfigurationClassProcessor.java, + * customizing the creation of a {@link ConfigurationClassParser} ({@link #createConfigurationParser}),, +	 * Create and return a new {@link ConfigurationClassParser}, allowing for customization of, +	protected abstract ConfigurationClassParser createConfigurationParser();, +		ConfigurationClassParser parser = createConfigurationParser();, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AddAnnotationAdapter.java, + * {@link ConfigurationClassEnhancer} to dynamically add an {@link org.aspectj.lang.Aspect}, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/BeanMethod.java, + * @see ConfigurationClassParser, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AbstractConfigurationClassProcessor.java, + * customizing the creation of a {@link ConfigurationClassParser} ({@link #createConfigurationParser}),, +	 * Create and return a new {@link ConfigurationClassParser}, allowing for customization of, +	protected abstract ConfigurationClassParser createConfigurationParser();, +		ConfigurationClassParser parser = createConfigurationParser();, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AddAnnotationAdapter.java, + * {@link ConfigurationClassEnhancer} to dynamically add an {@link org.aspectj.lang.Aspect}, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/BeanMethod.java, + * @see ConfigurationClassParser, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/BeanMethodInterceptor.java, + * @see ConfigurationClassEnhancer, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AbstractConfigurationClassProcessor.java, + * customizing the creation of a {@link ConfigurationClassParser} ({@link #createConfigurationParser}),, +	 * Create and return a new {@link ConfigurationClassParser}, allowing for customization of, +	protected abstract ConfigurationClassParser createConfigurationParser();, +		ConfigurationClassParser parser = createConfigurationParser();, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AddAnnotationAdapter.java, + * {@link ConfigurationClassEnhancer} to dynamically add an {@link org.aspectj.lang.Aspect}, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/BeanMethod.java, + * @see ConfigurationClassParser, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/BeanMethodInterceptor.java, + * @see ConfigurationClassEnhancer, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, + * @see ConfigurationClassParser, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AbstractConfigurationClassProcessor.java, + * customizing the creation of a {@link ConfigurationClassParser} ({@link #createConfigurationParser}),, +	 * Create and return a new {@link ConfigurationClassParser}, allowing for customization of, +	protected abstract ConfigurationClassParser createConfigurationParser();, +		ConfigurationClassParser parser = createConfigurationParser();, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AddAnnotationAdapter.java, + * {@link ConfigurationClassEnhancer} to dynamically add an {@link org.aspectj.lang.Aspect}, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/BeanMethod.java, + * @see ConfigurationClassParser, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/BeanMethodInterceptor.java, + * @see ConfigurationClassEnhancer, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, + * @see ConfigurationClassParser, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.context.annotation;, +, +import static java.lang.String.*;, +import static org.springframework.context.annotation.AsmUtils.*;, +, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Method;, +import java.util.ArrayList;, +, +import net.sf.cglib.core.DefaultGeneratorStrategy;, +import net.sf.cglib.proxy.Callback;, +import net.sf.cglib.proxy.CallbackFilter;, +import net.sf.cglib.proxy.Enhancer;, +import net.sf.cglib.proxy.NoOp;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.asm.ClassAdapter;, +import org.springframework.asm.ClassReader;, +import org.springframework.asm.ClassWriter;, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.util.Assert;, +, +]