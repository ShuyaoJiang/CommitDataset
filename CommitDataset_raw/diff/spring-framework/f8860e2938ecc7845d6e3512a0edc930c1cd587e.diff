[+++ b/spring-core/src/main/java/org/springframework/util/xml/SimpleNamespaceContext.java, + * Copyright 2002-2015 the original author or authors., +import java.util.LinkedHashSet;, +import java.util.Set;, + * Simple {@code javax.xml.namespace.NamespaceContext} implementation., + * Follows the standard {@code NamespaceContext} contract, and is loadable, + * via a {@code java.util.Map} or {@code java.util.Properties} object, + * @author Juergen Hoeller, +	private final Map<String, String> prefixToNamespaceUri = new HashMap<String, String>();, +	private final Map<String, Set<String>> namespaceUriToPrefixes = new HashMap<String, Set<String>>();, +, +		Assert.notNull(prefix, "No prefix given");, +			return this.defaultNamespaceUri;, +		else if (this.prefixToNamespaceUri.containsKey(prefix)) {, +			return this.prefixToNamespaceUri.get(prefix);, +		Set<String> prefixes = getPrefixesSet(namespaceUri);, +		return (!prefixes.isEmpty() ? prefixes.iterator().next() : null);, +		return getPrefixesSet(namespaceUri).iterator();, +	private Set<String> getPrefixesSet(String namespaceUri) {, +		Assert.notNull(namespaceUri, "No namespaceUri given");, +		if (this.defaultNamespaceUri.equals(namespaceUri)) {, +			return Collections.singleton(XMLConstants.DEFAULT_NS_PREFIX);, +		}, +		else if (XMLConstants.XML_NS_URI.equals(namespaceUri)) {, +			return Collections.singleton(XMLConstants.XML_NS_PREFIX);, +		}, +		else if (XMLConstants.XMLNS_ATTRIBUTE_NS_URI.equals(namespaceUri)) {, +			return Collections.singleton(XMLConstants.XMLNS_ATTRIBUTE);, +		}, +		else {, +			Set<String> prefixes = this.namespaceUriToPrefixes.get(namespaceUri);, +			return (prefixes != null ?  Collections.unmodifiableSet(prefixes) : Collections.<String>emptySet());, +		}, +	}, +, +, +	 * Set the bindings for this namespace context., +	 * The supplied map must consist of string key value pairs., +	 * Bind the given namespace as default namespace., +	 * Bind the given prefix to the given namespace., +			this.defaultNamespaceUri = namespaceUri;, +			this.prefixToNamespaceUri.put(prefix, namespaceUri);, +			Set<String> prefixes = this.namespaceUriToPrefixes.get(namespaceUri);, +			if (prefixes == null) {, +				prefixes = new LinkedHashSet<String>();, +				this.namespaceUriToPrefixes.put(namespaceUri, prefixes);, +			prefixes.add(prefix);, +	 * Remove the given prefix from this context., +			this.defaultNamespaceUri = "";, +		else if (prefix != null) {, +			String namespaceUri = this.prefixToNamespaceUri.remove(prefix);, +			if (namespaceUri != null) {, +				Set<String> prefixes = this.namespaceUriToPrefixes.get(namespaceUri);, +				if (prefixes != null) {, +					if (prefixes.isEmpty()) {, +						this.namespaceUriToPrefixes.remove(namespaceUri);, +		}, +	}, +, +	/**, +	 * Remove all declared prefixes., +	 */, +	public void clear() {, +		this.prefixToNamespaceUri.clear();, +		this.namespaceUriToPrefixes.clear();, +	}, +, +	/**, +	 * Return all declared prefixes., +	 */, +	public Iterator<String> getBoundPrefixes() {, +		return this.prefixToNamespaceUri.keySet().iterator();, +	}, +, +}, +++ b/spring-core/src/main/java/org/springframework/util/xml/SimpleNamespaceContext.java, + * Copyright 2002-2015 the original author or authors., +import java.util.LinkedHashSet;, +import java.util.Set;, + * Simple {@code javax.xml.namespace.NamespaceContext} implementation., + * Follows the standard {@code NamespaceContext} contract, and is loadable, + * via a {@code java.util.Map} or {@code java.util.Properties} object, + * @author Juergen Hoeller, +	private final Map<String, String> prefixToNamespaceUri = new HashMap<String, String>();, +	private final Map<String, Set<String>> namespaceUriToPrefixes = new HashMap<String, Set<String>>();, +, +		Assert.notNull(prefix, "No prefix given");, +			return this.defaultNamespaceUri;, +		else if (this.prefixToNamespaceUri.containsKey(prefix)) {, +			return this.prefixToNamespaceUri.get(prefix);, +		Set<String> prefixes = getPrefixesSet(namespaceUri);, +		return (!prefixes.isEmpty() ? prefixes.iterator().next() : null);, +		return getPrefixesSet(namespaceUri).iterator();, +	private Set<String> getPrefixesSet(String namespaceUri) {, +		Assert.notNull(namespaceUri, "No namespaceUri given");, +		if (this.defaultNamespaceUri.equals(namespaceUri)) {, +			return Collections.singleton(XMLConstants.DEFAULT_NS_PREFIX);, +		}, +		else if (XMLConstants.XML_NS_URI.equals(namespaceUri)) {, +			return Collections.singleton(XMLConstants.XML_NS_PREFIX);]