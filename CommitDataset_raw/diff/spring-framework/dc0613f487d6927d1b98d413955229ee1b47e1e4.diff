[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, + * @since 2.5, +	 *, +	 *, +	 *, +	 *, +	 *, +	 * <code>@RequestMapping</code> annotation). <p>Will only kick in when the handler method cannot be resolved uniquely, +	 * Specify a WebBindingInitializer which will apply pre-configured configuration to every DataBinder that this, +	 * controller uses., +	 * Specify the strategy to store session attributes with. <p>Default is {@link org.springframework.web.bind.support.DefaultSessionAttributeStore},, +	 * Default is 0, preventing caching completely. <p>In contrast to the "cacheSeconds" property which will apply to all, +	 *, +	 * Set if controller execution should be synchronized on the session, to serialize parallel invocations from the same, +	 * client. <p>More specifically, the execution of each handler method will get synchronized if this flag is "true". The, +	 * best available session mutex will be used for the synchronization; ideally, this will be a mutex exposed by, +	 * HttpSessionMutexListener. <p>The session mutex is guaranteed to be the same object during the entire lifetime of the, +	 * session, available under the key defined by the <code>SESSION_MUTEX_ATTRIBUTE</code> constant. It serves as a safe, +	 * reference to synchronize on for locking on the current session. <p>In many cases, the HttpSession reference itself a, +	 * safe mutex as well, since it will always be the same object reference for the same active logical session. However,, +	 * this is not guaranteed across different servlet containers; the only 100% safe way is a session mutex., +	 *, +	 * names). <p>Default is a {@link org.springframework.core.LocalVariableTableParameterNameDiscoverer}., +	 * Set a custom WebArgumentResolvers to use for special method parameter types. Such a custom WebArgumentResolver will, +	 * kick in first, having a chance to resolve an argument value before the standard argument handling kicks in., +	 * Set one or more custom WebArgumentResolvers to use for special method parameter types. Any such custom, +	 * WebArgumentResolver will kick in first, having a chance to resolve an argument value before the standard argument, +	 * handling kicks in., +	 * Set a custom ModelAndViewResolvers to use for special method return types. Such a custom ModelAndViewResolver will, +	 * kick in first, having a chance to resolve an return value before the standard ModelAndView handling kicks in., +	 * Set one or more custom ModelAndViewResolvers to use for special method return types. Any such custom, +	 * ModelAndViewResolver will kick in first, having a chance to resolve an return value before the standard ModelAndView, +	 * handling kicks in., +	/** Build a HandlerMethodResolver for the given handler type. */, +	/** Servlet-specific subclass of {@link HandlerMethodResolver}. */, +		 * <p>Uses the following algorithm: <ol> <li>If there is a type-level mapping with path information, it is {@linkplain, +		 * PathMatcher#combine(String, String) combined} with the method-level pattern. <li>If there is a {@linkplain, +		 * HandlerMapping#BEST_MATCHING_PATTERN_ATTRIBUTE best matching pattern} in the request, it is combined with the, +		 * method-level pattern. <li>Otherwise,, +				if (!combinedPattern.equals(bestMatchingPattern) &&, +						(isPathMatchInternal(combinedPattern, lookupPath))) {, +	/** Servlet-specific subclass of {@link HandlerMethodInvoker}. */, +		private void handleResponseBody(Object returnValue, ServletWebRequest webRequest), +				throws ServletException, IOException {, +						if (messageConverter.canWrite(returnValueType, acceptedMediaType)) {, +							messageConverter.write(returnValue, null, outputMessage);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, + * @since 2.5, +	 *, +	 *, +	 *, +	 *, +	 *, +	 * <code>@RequestMapping</code> annotation). <p>Will only kick in when the handler method cannot be resolved uniquely, +	 * Specify a WebBindingInitializer which will apply pre-configured configuration to every DataBinder that this, +	 * controller uses., +	 * Specify the strategy to store session attributes with. <p>Default is {@link org.springframework.web.bind.support.DefaultSessionAttributeStore},, +	 * Default is 0, preventing caching completely. <p>In contrast to the "cacheSeconds" property which will apply to all, +	 *, +	 * Set if controller execution should be synchronized on the session, to serialize parallel invocations from the same, +	 * client. <p>More specifically, the execution of each handler method will get synchronized if this flag is "true". The, +	 * best available session mutex will be used for the synchronization; ideally, this will be a mutex exposed by, +	 * HttpSessionMutexListener. <p>The session mutex is guaranteed to be the same object during the entire lifetime of the, +	 * session, available under the key defined by the <code>SESSION_MUTEX_ATTRIBUTE</code> constant. It serves as a safe, +	 * reference to synchronize on for locking on the current session. <p>In many cases, the HttpSession reference itself a, +	 * safe mutex as well, since it will always be the same object reference for the same active logical session. However,, +	 * this is not guaranteed across different servlet containers; the only 100% safe way is a session mutex., +	 *, +	 * names). <p>Default is a {@link org.springframework.core.LocalVariableTableParameterNameDiscoverer}., +	 * Set a custom WebArgumentResolvers to use for special method parameter types. Such a custom WebArgumentResolver will, +	 * kick in first, having a chance to resolve an argument value before the standard argument handling kicks in., +	 * Set one or more custom WebArgumentResolvers to use for special method parameter types. Any such custom, +	 * WebArgumentResolver will kick in first, having a chance to resolve an argument value before the standard argument, +	 * handling kicks in., +	 * Set a custom ModelAndViewResolvers to use for special method return types. Such a custom ModelAndViewResolver will, +	 * kick in first, having a chance to resolve an return value before the standard ModelAndView handling kicks in., +	 * Set one or more custom ModelAndViewResolvers to use for special method return types. Any such custom, +	 * ModelAndViewResolver will kick in first, having a chance to resolve an return value before the standard ModelAndView, +	 * handling kicks in., +	/** Build a HandlerMethodResolver for the given handler type. */, +	/** Servlet-specific subclass of {@link HandlerMethodResolver}. */, +		 * <p>Uses the following algorithm: <ol> <li>If there is a type-level mapping with path information, it is {@linkplain, +		 * PathMatcher#combine(String, String) combined} with the method-level pattern. <li>If there is a {@linkplain, +		 * HandlerMapping#BEST_MATCHING_PATTERN_ATTRIBUTE best matching pattern} in the request, it is combined with the, +		 * method-level pattern. <li>Otherwise,, +				if (!combinedPattern.equals(bestMatchingPattern) &&, +						(isPathMatchInternal(combinedPattern, lookupPath))) {, +	/** Servlet-specific subclass of {@link HandlerMethodInvoker}. */, +		private void handleResponseBody(Object returnValue, ServletWebRequest webRequest), +				throws ServletException, IOException {, +						if (messageConverter.canWrite(returnValueType, acceptedMediaType)) {, +							messageConverter.write(returnValue, null, outputMessage);, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +import java.util.Iterator;, +import org.springframework.beans.BeansException;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.converter.ByteArrayHttpMessageConverter;, +import org.springframework.http.converter.StringHttpMessageConverter;, +import org.springframework.util.MultiValueMap;, +				wac.getBeanFactory()]