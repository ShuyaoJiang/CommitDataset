[+++ b/org.springframework.web/src/main/java/org/springframework/http/client/CommonsClientHttpRequestFactory.java, +	 * Set the connection timeout for the underlying HttpClient., +	 * A timeout value of 0 specifies an infinite timeout., +	 * @param timeout the timeout value in milliseconds, +	 * @see org.apache.commons.httpclient.params.HttpConnectionManagerParams#setConnectionTimeout(int), +	 */, +	public void setConnectTimeout(int timeout) {, +		Assert.isTrue(timeout < 0, "Timeout must be a non-negative value");, +		this.httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(timeout);, +	}, +, +	/**, +	 * Set the socket read timeout for the underlying HttpClient., +	 * A timeout value of 0 specifies an infinite timeout., +		Assert.isTrue(timeout < 0, "Timeout must be a non-negative value");, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/CommonsClientHttpRequestFactory.java, +	 * Set the connection timeout for the underlying HttpClient., +	 * A timeout value of 0 specifies an infinite timeout., +	 * @param timeout the timeout value in milliseconds, +	 * @see org.apache.commons.httpclient.params.HttpConnectionManagerParams#setConnectionTimeout(int), +	 */, +	public void setConnectTimeout(int timeout) {, +		Assert.isTrue(timeout < 0, "Timeout must be a non-negative value");, +		this.httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(timeout);, +	}, +, +	/**, +	 * Set the socket read timeout for the underlying HttpClient., +	 * A timeout value of 0 specifies an infinite timeout., +		Assert.isTrue(timeout < 0, "Timeout must be a non-negative value");, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java, + * <a href="http://hc.apache.org/httpcomponents-client-ga/httpclient/">Apache HttpComponents HttpClient</a>, + * to create requests., +, +	 * Create a new instance of the {@code HttpComponentsClientHttpRequestFactory} with a default, +	 * {@link HttpClient} that uses a default {@link org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager}., +		this.httpClient = new DefaultHttpClient(connectionManager);, +		setReadTimeout(DEFAULT_READ_TIMEOUT_MILLISECONDS);, +, +	 * Create a new instance of the {@code HttpComponentsClientHttpRequestFactory}, +	 * with the given {@link HttpClient} instance., +		Assert.notNull(httpClient, "HttpClient must not be null");, +, +	/**, +	 * Set the connection timeout for the underlying HttpClient., +	 * A timeout value of 0 specifies an infinite timeout., +	 * @param timeout the timeout value in milliseconds, +	 * @see org.apache.commons.httpclient.params.HttpConnectionManagerParams#setConnectionTimeout(int), +	 */, +	public void setConnectTimeout(int timeout) {, +		Assert.isTrue(timeout < 0, "Timeout must be a non-negative value");, +		getHttpClient().getParams().setIntParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, timeout);, +	}, +, +	/**, +	 * Set the socket read timeout for the underlying HttpClient., +	 * A timeout value of 0 specifies an infinite timeout., +	 * @param timeout the timeout value in milliseconds, +	 * @see org.apache.commons.httpclient.params.HttpConnectionManagerParams#setSoTimeout(int), +	 */, +	public void setReadTimeout(int timeout) {, +		Assert.isTrue(timeout < 0, "Timeout must be a non-negative value");, +		getHttpClient().getParams().setIntParameter(CoreConnectionPNames.SO_TIMEOUT, timeout);, +	}, +, +, +	 * Template method that allows for manipulating the {@link HttpUriRequest} before it is, +	 * returned as part of a {@link HttpComponentsClientHttpRequest}., +	 * Shutdown hook that closes the underlying, +	 * {@link org.apache.http.conn.ClientConnectionManager ClientConnectionManager}'s, +	 * connection pool, if any., +, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/CommonsClientHttpRequestFactory.java, +	 * Set the connection timeout for the underlying HttpClient., +	 * A timeout value of 0 specifies an infinite timeout., +	 * @param timeout the timeout value in milliseconds, +	 * @see org.apache.commons.httpclient.params.HttpConnectionManagerParams#setConnectionTimeout(int), +	 */, +	public void setConnectTimeout(int timeout) {, +		Assert.isTrue(timeout < 0, "Timeout must be a non-negative value");, +		this.httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(timeout);, +	}, +, +	/**, +	 * Set the socket read timeout for the underlying HttpClient., +	 * A timeout value of 0 specifies an infinite timeout., +		Assert.isTrue(timeout < 0, "Timeout must be a non-negative value");, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java, + * <a href="http://hc.apache.org/httpcomponents-client-ga/httpclient/">Apache HttpComponents HttpClient</a>, + * to create requests., +, +	 * Create a new instance of the {@code HttpComponentsClientHttpRequestFactory} with a default, +	 * {@link HttpClient} that uses a default {@link org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager}., +		this.httpClient = new DefaultHttpClient(connectionManager);, +		setReadTimeout(DEFAULT_READ_TIMEOUT_MILLISECONDS);, +, +	 * Create a new instance of the {@code HttpComponentsClientHttpRequestFactory}, +	 * with the given {@link HttpClient} instance., +		Assert.notNull(httpClient, "HttpClient must not be null");, +]