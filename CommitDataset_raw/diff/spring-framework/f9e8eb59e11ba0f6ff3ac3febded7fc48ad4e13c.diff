[+++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/BeanFactoryGenericsTests.java, +	@Test, +	public void testSpr11250() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.setAutowireCandidateResolver(new GenericTypeAwareAutowireCandidateResolver());, +, +		bf.registerBeanDefinition("doubleStore", new RootBeanDefinition(NumberStore.class));, +		bf.registerBeanDefinition("floatStore", new RootBeanDefinition(NumberStore.class));, +		bf.registerBeanDefinition("numberBean",, +				new RootBeanDefinition(NumberBean.class, RootBeanDefinition.AUTOWIRE_CONSTRUCTOR, false));, +, +		NumberBean nb = bf.getBean(NumberBean.class);, +		assertNotNull(nb.getDoubleStore());, +		assertNotNull(nb.getFloatStore());, +	}, +, +, +	public static class NumberStore<T extends Number> {, +	}, +, +, +	public static class NumberBean {, +, +		private final NumberStore<Double> doubleStore;, +, +		private final NumberStore<Float> floatStore;, +, +		public NumberBean(NumberStore<Double> doubleStore, NumberStore<Float> floatStore) {, +			this.doubleStore = doubleStore;, +			this.floatStore = floatStore;, +		}, +, +		public NumberStore<Double> getDoubleStore() {, +			return this.doubleStore;, +		}, +, +		public NumberStore<Float> getFloatStore() {, +			return this.floatStore;, +		}, +	}, +, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/BeanFactoryGenericsTests.java, +	@Test, +	public void testSpr11250() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.setAutowireCandidateResolver(new GenericTypeAwareAutowireCandidateResolver());, +, +		bf.registerBeanDefinition("doubleStore", new RootBeanDefinition(NumberStore.class));, +		bf.registerBeanDefinition("floatStore", new RootBeanDefinition(NumberStore.class));, +		bf.registerBeanDefinition("numberBean",, +				new RootBeanDefinition(NumberBean.class, RootBeanDefinition.AUTOWIRE_CONSTRUCTOR, false));, +, +		NumberBean nb = bf.getBean(NumberBean.class);, +		assertNotNull(nb.getDoubleStore());, +		assertNotNull(nb.getFloatStore());, +	}, +, +, +	public static class NumberStore<T extends Number> {, +	}, +, +, +	public static class NumberBean {, +, +		private final NumberStore<Double> doubleStore;, +, +		private final NumberStore<Float> floatStore;, +, +		public NumberBean(NumberStore<Double> doubleStore, NumberStore<Float> floatStore) {, +			this.doubleStore = doubleStore;, +			this.floatStore = floatStore;, +		}, +, +		public NumberStore<Double> getDoubleStore() {, +			return this.doubleStore;, +		}, +, +		public NumberStore<Float> getFloatStore() {, +			return this.floatStore;, +		}, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +		if (this == NONE) {, +			return false;, +		}, +		ResolvableType[] generics = getGenerics();, +		for (ResolvableType generic : generics) {, +			if (generic.isUnresolvableTypeVariable()) {, +		return false;, +	}, +, +	/**, +	 * Determine whether the underlying type is a type variable that, +	 * cannot be resolved through the associated variable resolver., +	 */, +	private boolean isUnresolvableTypeVariable() {, +		if (this.type instanceof TypeVariable) {, +			if (this.variableResolver == null) {, +				return true;]