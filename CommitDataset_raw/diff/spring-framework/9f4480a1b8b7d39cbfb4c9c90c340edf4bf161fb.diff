[+++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriTemplate.java, + * Represents a URI template. An URI template is a URI-like String that contained variables marked of in braces, + * (<code>{</code>, <code>}</code>), which can be expanded to produce a URI. <p>See {@link #expand(Map)}, {@link, + * #expand(String[])}, and {@link #match(String)} for example usages., +	/** Captures URI template variable names. */, +	/** Replaces template variables in the URI template. */, +	 *, +	 *, +	 * Given the Map of variables, expands this template into a URI. The Map keys represent variable names, the Map values, +	 * variable values. The order of variables is not significant. <p>Example:, +	 *, +	 * @throws IllegalArgumentException if <code>uriVariables</code> is <code>null</code>; or if it does not contain values, +	 * for all the variable names, +	 * Given an array of variables, expand this template into a full URI. The array represent variable values. The order of, +	 * variables is significant. <p>Example: <pre class="code> UriTemplate template = new, +	 * UriTemplate("http://example.com/hotels/{hotel}/bookings/{booking}"); System.out.println(template.expand("1", "42));, +	 * </pre> will print: <blockquote><code>http://example.com/hotels/1/bookings/42</code></blockquote>, +	 *, +	 * @throws IllegalArgumentException if <code>uriVariables</code> is <code>null</code>; or if it does not contain, +	 * sufficient variables, +			throw new IllegalArgumentException(, +					"Invalid amount of variables values in [" + this.uriTemplate + "]: expected " +, +							this.variableNames.size() + "; got " + uriVariableValues.length);, +	 *, +	 * Match the given URI to a map of variable values. Keys in the returned map are variable names, values are variable, +	 * values, as occurred in the given URI. <p>Example: <pre class="code"> UriTemplate template = new, +	 * UriTemplate("http://example.com/hotels/{hotel}/bookings/{booking}"); System.out.println(template.match("http://example.com/hotels/1/bookings/42"));, +	 * </pre> will print: <blockquote><code>{hotel=1, booking=42}</code></blockquote>, +	 *, +			int schemeIdx = uri.indexOf(':');, +			if (schemeIdx == -1) {, +				int queryIdx = uri.indexOf('?');, +				if (queryIdx == -1) {, +					int fragmentIdx = uri.indexOf('#');, +					if (fragmentIdx == -1) {, +						return new URI(null, null, uri, null);, +						String path = uri.substring(0, fragmentIdx);, +						String fragment = uri.substring(fragmentIdx + 1);, +						return new URI(null, null, path, fragment);, +				}, +				else {, +					int fragmentIdx = uri.indexOf('#', queryIdx + 1);, +					if (fragmentIdx == -1) {, +						String path = uri.substring(0, queryIdx);, +						String query = uri.substring(queryIdx + 1);, +						return new URI(null, null, path, query, null);, +					}, +					else {, +						String path = uri.substring(0, queryIdx);, +						String query = uri.substring(queryIdx + 1, fragmentIdx);, +						String fragment = uri.substring(fragmentIdx + 1);, +						return new URI(null, null, path, query, fragment);, +					}, +				}, +			}, +			else {, +				int fragmentIdx = uri.indexOf('#', schemeIdx + 1);, +				String scheme = uri.substring(0, schemeIdx);, +				if (fragmentIdx == -1) {, +					String ssp = uri.substring(schemeIdx + 1);, +					return new URI(scheme, ssp, null);, +				}, +				else {, +					String ssp = uri.substring(schemeIdx + 1, fragmentIdx);, +					String fragment = uri.substring(fragmentIdx + 1);, +					return new URI(scheme, ssp, fragment);, +				}, +			}, +	/** Static inner class to parse uri template strings into a matching regular expression. */, +++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriTemplate.java, + * Represents a URI template. An URI template is a URI-like String that contained variables marked of in braces, + * (<code>{</code>, <code>}</code>), which can be expanded to produce a URI. <p>See {@link #expand(Map)}, {@link, + * #expand(String[])}, and {@link #match(String)} for example usages., +	/** Captures URI template variable names. */, +	/** Replaces template variables in the URI template. */, +	 *, +	 *, +	 * Given the Map of variables, expands this template into a URI. The Map keys represent variable names, the Map values, +	 * variable values. The order of variables is not significant. <p>Example:, +	 *, +	 * @throws IllegalArgumentException if <code>uriVariables</code> is <code>null</code>; or if it does not contain values, +	 * for all the variable names, +	 * Given an array of variables, expand this template into a full URI. The array represent variable values. The order of, +	 * variables is significant. <p>Example: <pre class="code> UriTemplate template = new, +	 * UriTemplate("http://example.com/hotels/{hotel}/bookings/{booking}"); System.out.println(template.expand("1", "42));, +	 * </pre> will print: <blockquote><code>http://example.com/hotels/1/bookings/42</code></blockquote>, +	 *, +	 * @throws IllegalArgumentException if <code>uriVariables</code> is <code>null</code>; or if it does not contain, +	 * sufficient variables, +			throw new IllegalArgumentException(, +					"Invalid amount of variables values in [" + this.uriTemplate + "]: expected " +, +							this.variableNames.size() + "; got " + uriVariableValues.length);, +	 *, +	 * Match the given URI to a map of variable values. Keys in the returned map are variable names, values are variable, +	 * values, as occurred in the given URI. <p>Example: <pre class="code"> UriTemplate template = new, +	 * UriTemplate("http://example.com/hotels/{hotel}/bookings/{booking}"); System.out.println(template.match("http://example.com/hotels/1/bookings/42"));, +	 * </pre> will print: <blockquote><code>{hotel=1, booking=42}</code></blockquote>, +	 *, +			int schemeIdx = uri.indexOf(':');, +			if (schemeIdx == -1) {]