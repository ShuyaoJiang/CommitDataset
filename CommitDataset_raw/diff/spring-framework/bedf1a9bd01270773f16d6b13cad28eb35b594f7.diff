[+++ b/spring-web/src/main/java/org/springframework/web/util/DefaultUriTemplateHandler.java, + * Copyright 2002-2016 the original author or authors., +		UriComponentsBuilder builder = initUriComponentsBuilder(uriTemplate);, +		UriComponents url = builder.build().expand(uriVariables).encode();, +		return insertBaseUrl(url);, +	public URI expand(String uriTemplate, Object... uriVariables) {, +		UriComponentsBuilder builder = initUriComponentsBuilder(uriTemplate);, +		UriComponents url = builder.build().expand(uriVariables).encode();, +		return insertBaseUrl(url);, +++ b/spring-web/src/main/java/org/springframework/web/util/DefaultUriTemplateHandler.java, + * Copyright 2002-2016 the original author or authors., +		UriComponentsBuilder builder = initUriComponentsBuilder(uriTemplate);, +		UriComponents url = builder.build().expand(uriVariables).encode();, +		return insertBaseUrl(url);, +	public URI expand(String uriTemplate, Object... uriVariables) {, +		UriComponentsBuilder builder = initUriComponentsBuilder(uriTemplate);, +		UriComponents url = builder.build().expand(uriVariables).encode();, +		return insertBaseUrl(url);, +++ b/spring-web/src/test/java/org/springframework/web/util/UriTemplateTests.java, +		UriTemplate template = new UriTemplate("/hotels/{hotel}/bookings/{booking}");, +		UriTemplate template = new UriTemplate("/hotels/{hotel}/bookings/{booking}");, +		assertEquals("Invalid expanded template", new URI("/hotels/1/bookings/42"), result);, +		UriTemplate template = new UriTemplate("/hotels/{hotel}/bookings/{booking}");, +		Map<String, String> uriVariables = new HashMap<>(2);, +		UriTemplate template = new UriTemplate("/hotels/{hotel}/bookings/{booking}");, +		assertEquals("Invalid expanded template", new URI("/hotels/1/bookings/42"), result);, +		assertEquals(Arrays.asList("c", "c", "c"), template.getVariableNames());, +		assertEquals(new URI("/order/cheeseburger/cheeseburger/cheeseburger"), result);, +		Map<String, Integer> uriVariables = new HashMap<>(2);, +		UriTemplate template = new UriTemplate("/hotels/{hotel}/bookings/{booking}");, +		assertEquals("Invalid expanded template", new URI("/hotels/1/bookings/42"), result);, +		UriTemplate template = new UriTemplate("/hotel list/{hotel}");, +		assertEquals("Invalid expanded template", new URI("/hotel%20list/Z%C3%BCrich"), result);, +		Map<String, String> uriVariables = new HashMap<>(2);, +		UriTemplate template = new UriTemplate("/hotels/{hotel}/bookings/{booking}");, +		UriTemplate template = new UriTemplate("/hotel list/{hotel}");, +		assertEquals("Invalid expanded template", new URI("/hotel%20list/Z%C3%BCrich"), result);, +		UriTemplate template = new UriTemplate("/hotels/{hotel}/bookings/{booking}");, +		assertTrue("UriTemplate does not match", template.matches("/hotels/1/bookings/42"));, +		assertFalse("UriTemplate matches", template.matches("/hotels/bookings"));, +		UriTemplate template = new UriTemplate("/hotels/{hotel:\\d+}");, +		assertTrue("UriTemplate does not match", template.matches("/hotels/42"));, +		assertFalse("UriTemplate matches", template.matches("/hotels/foo"));, +		Map<String, String> expected = new HashMap<>(2);, +		UriTemplate template = new UriTemplate("/hotels/{hotel}/bookings/{booking}");, +		Map<String, String> result = template.match("/hotels/1/bookings/42");, +		Map<String, String> expected = new HashMap<>(2);, +		UriTemplate template = new UriTemplate("/hotels/{hotel:\\d}/bookings/{booking:\\d+}");, +		Map<String, String> result = template.match("/hotels/1/bookings/42");, +		Map<String, String> expected = new HashMap<>(2);]