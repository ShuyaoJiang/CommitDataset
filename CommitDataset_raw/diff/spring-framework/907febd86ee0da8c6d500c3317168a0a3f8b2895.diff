[+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +import org.springframework.web.bind.annotation.ExceptionHandler;, +	public void regularParameterAsSingleString() throws Exception {, +		initServlet(MultipartController.class);, +, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		request.setRequestURI("/singleString");, +		request.setMethod("POST");, +		request.addParameter("content", "Juergen");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("Juergen", response.getContentAsString());, +	}, +, +	@Test, +	public void regularParameterAsStringArray() throws Exception {, +		initServlet(MultipartController.class);, +, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		request.setRequestURI("/stringArray");, +		request.setMethod("POST");, +		request.addParameter("content", "Juergen");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("Juergen", response.getContentAsString());, +	}, +, +	@Test, +		assertEquals("Juergen-Eva", response.getContentAsString());, +	}, +, +	@Test, +	public void regularParametersAsStringArray() throws Exception {, +		initServlet(MultipartController.class);, +, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		request.setRequestURI("/stringArray");, +		request.setMethod("POST");, +		request.addParameter("content", "Juergen");, +		request.addParameter("content", "Eva");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("Juergen-Eva", response.getContentAsString());, +	}, +, +	@Test, +	public void parameterCsvAsStringArray() throws Exception {, +		servlet = new DispatcherServlet() {, +			@Override, +			protected WebApplicationContext createWebApplicationContext(WebApplicationContext parent) {, +				GenericWebApplicationContext wac = new GenericWebApplicationContext();, +				wac.registerBeanDefinition("controller", new RootBeanDefinition(CsvController.class));, +				RootBeanDefinition csDef = new RootBeanDefinition(FormattingConversionServiceFactoryBean.class);, +				RootBeanDefinition wbiDef = new RootBeanDefinition(ConfigurableWebBindingInitializer.class);, +				wbiDef.getPropertyValues().add("conversionService", csDef);, +				RootBeanDefinition adapterDef = new RootBeanDefinition(AnnotationMethodHandlerAdapter.class);, +				adapterDef.getPropertyValues().add("webBindingInitializer", wbiDef);, +				wac.registerBeanDefinition("handlerAdapter", adapterDef);, +				wac.refresh();, +				return wac;, +			}, +		};, +		servlet.init(new MockServletConfig());, +, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		request.setRequestURI("/integerArray");, +		request.setMethod("POST");, +		request.addParameter("content", "1,2");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("1-2", response.getContentAsString());, +			response.getWriter().write(StringUtils.arrayToDelimitedString(content, "-"));, +		}, +	}, +, +	@Controller, +	public static class CsvController {, +, +		@RequestMapping("/singleInteger"), +		public void processCsv(@RequestParam("content") Integer content, HttpServletResponse response) throws IOException {, +			response.getWriter().write(content.toString());, +		}, +, +		@RequestMapping("/integerArray"), +		public void processCsv(@RequestParam("content") Integer[] content, HttpServletResponse response) throws IOException {, +			response.getWriter().write(StringUtils.arrayToDelimitedString(content, "-"));]