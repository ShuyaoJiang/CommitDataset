[+++ b/spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java, +		Collection<CacheOperation> ops = parseCacheAnnotations(cachingConfig, ae, false);, +		if (ops != null && ops.size() > 1 && ae.getAnnotations().length > 0) {, +			// More than one operation found -> local declarations override interface-declared ones..., +			Collection<CacheOperation> localOps = parseCacheAnnotations(cachingConfig, ae, true);, +			if (localOps != null) {, +				return localOps;, +			}, +		}, +		return ops;, +	}, +, +	private Collection<CacheOperation> parseCacheAnnotations(, +			DefaultCacheConfig cachingConfig, AnnotatedElement ae, boolean localOnly) {, +, +		Collection<Cacheable> cacheables = (localOnly ? AnnotatedElementUtils.getAllMergedAnnotations(ae, Cacheable.class) :, +				AnnotatedElementUtils.findAllMergedAnnotations(ae, Cacheable.class));, +		Collection<CacheEvict> evicts = (localOnly ? AnnotatedElementUtils.getAllMergedAnnotations(ae, CacheEvict.class) :, +				AnnotatedElementUtils.findAllMergedAnnotations(ae, CacheEvict.class));, +		Collection<CachePut> puts = (localOnly ? AnnotatedElementUtils.getAllMergedAnnotations(ae, CachePut.class) :, +				AnnotatedElementUtils.findAllMergedAnnotations(ae, CachePut.class));, +		Collection<Caching> cachings = (localOnly ? AnnotatedElementUtils.getAllMergedAnnotations(ae, Caching.class) :, +				AnnotatedElementUtils.findAllMergedAnnotations(ae, Caching.class));, +		CacheConfig annotation = AnnotatedElementUtils.findMergedAnnotation(target, CacheConfig.class);, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java, +		Collection<CacheOperation> ops = parseCacheAnnotations(cachingConfig, ae, false);, +		if (ops != null && ops.size() > 1 && ae.getAnnotations().length > 0) {, +			// More than one operation found -> local declarations override interface-declared ones..., +			Collection<CacheOperation> localOps = parseCacheAnnotations(cachingConfig, ae, true);, +			if (localOps != null) {, +				return localOps;, +			}, +		}, +		return ops;, +	}, +, +	private Collection<CacheOperation> parseCacheAnnotations(, +			DefaultCacheConfig cachingConfig, AnnotatedElement ae, boolean localOnly) {, +, +		Collection<Cacheable> cacheables = (localOnly ? AnnotatedElementUtils.getAllMergedAnnotations(ae, Cacheable.class) :, +				AnnotatedElementUtils.findAllMergedAnnotations(ae, Cacheable.class));, +		Collection<CacheEvict> evicts = (localOnly ? AnnotatedElementUtils.getAllMergedAnnotations(ae, CacheEvict.class) :, +				AnnotatedElementUtils.findAllMergedAnnotations(ae, CacheEvict.class));, +		Collection<CachePut> puts = (localOnly ? AnnotatedElementUtils.getAllMergedAnnotations(ae, CachePut.class) :, +				AnnotatedElementUtils.findAllMergedAnnotations(ae, CachePut.class));, +		Collection<Caching> cachings = (localOnly ? AnnotatedElementUtils.getAllMergedAnnotations(ae, Caching.class) :, +				AnnotatedElementUtils.findAllMergedAnnotations(ae, Caching.class));, +		CacheConfig annotation = AnnotatedElementUtils.findMergedAnnotation(target, CacheConfig.class);, +++ b/spring-context/src/test/java/org/springframework/cache/CacheReproTests.java, +	@Test, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java, +		Collection<CacheOperation> ops = parseCacheAnnotations(cachingConfig, ae, false);, +		if (ops != null && ops.size() > 1 && ae.getAnnotations().length > 0) {, +			// More than one operation found -> local declarations override interface-declared ones..., +			Collection<CacheOperation> localOps = parseCacheAnnotations(cachingConfig, ae, true);, +			if (localOps != null) {, +				return localOps;, +			}, +		}, +		return ops;, +	}, +, +	private Collection<CacheOperation> parseCacheAnnotations(, +			DefaultCacheConfig cachingConfig, AnnotatedElement ae, boolean localOnly) {, +, +		Collection<Cacheable> cacheables = (localOnly ? AnnotatedElementUtils.getAllMergedAnnotations(ae, Cacheable.class) :, +				AnnotatedElementUtils.findAllMergedAnnotations(ae, Cacheable.class));, +		Collection<CacheEvict> evicts = (localOnly ? AnnotatedElementUtils.getAllMergedAnnotations(ae, CacheEvict.class) :, +				AnnotatedElementUtils.findAllMergedAnnotations(ae, CacheEvict.class));, +		Collection<CachePut> puts = (localOnly ? AnnotatedElementUtils.getAllMergedAnnotations(ae, CachePut.class) :, +				AnnotatedElementUtils.findAllMergedAnnotations(ae, CachePut.class));, +		Collection<Caching> cachings = (localOnly ? AnnotatedElementUtils.getAllMergedAnnotations(ae, Caching.class) :, +				AnnotatedElementUtils.findAllMergedAnnotations(ae, Caching.class));, +		CacheConfig annotation = AnnotatedElementUtils.findMergedAnnotation(target, CacheConfig.class);, +++ b/spring-context/src/test/java/org/springframework/cache/CacheReproTests.java, +	@Test, +++ b/spring-context/src/test/java/org/springframework/cache/annotation/AnnotationCacheOperationSourceTests.java, +		Collection<CacheOperation> ops = getOps(InterfaceCacheConfig.class, "interfaceCacheConfig");]