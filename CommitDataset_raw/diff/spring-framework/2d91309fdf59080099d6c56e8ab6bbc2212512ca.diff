[+++ b/spring-beans/src/main/java/org/springframework/beans/GenericTypeAwarePropertyDescriptor.java, +			Method candidate = ClassUtils.getMethodIfAvailable(, +					this.beanClass, "set" + StringUtils.capitalize(getName()), (Class<?>[]) null);, +			if (candidate != null && candidate.getParameterTypes().length == 1) {, +				writeMethodToUse = candidate;, +			}, +++ b/spring-beans/src/main/java/org/springframework/beans/GenericTypeAwarePropertyDescriptor.java, +			Method candidate = ClassUtils.getMethodIfAvailable(, +					this.beanClass, "set" + StringUtils.capitalize(getName()), (Class<?>[]) null);, +			if (candidate != null && candidate.getParameterTypes().length == 1) {, +				writeMethodToUse = candidate;, +			}, +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, +	 * Determine whether the given class has a public method with the given signature., +	 * Determine whether the given class has a public method with the given signature,, +	 * <p>In case of any signature specified, only returns the method if there is a, +	 * unique candidate, i.e. a single public method with the specified name., +	 * (may be {@code null} to indicate any signature), +		if (paramTypes != null) {, +		else {, +			Set<Method> candidates = new HashSet<Method>(1);, +			Method[] methods = clazz.getMethods();, +			for (Method method : methods) {, +				if (methodName.equals(method.getName())) {, +					candidates.add(method);, +				}, +			}, +			if (candidates.size() == 1) {, +				return candidates.iterator().next();, +			}, +			else if (candidates.isEmpty()) {, +				throw new IllegalStateException("Expected method not found: " + clazz + "." + methodName);, +			}, +			else {, +				throw new IllegalStateException("No unique method found: " + clazz + "." + methodName);, +			}, +		}, +	}, +	 * Determine whether the given class has a public method with the given signature,, +	 * <p>In case of any signature specified, only returns the method if there is a, +	 * unique candidate, i.e. a single public method with the specified name., +	 * (may be {@code null} to indicate any signature), +		if (paramTypes != null) {, +		else {, +			Set<Method> candidates = new HashSet<Method>(1);, +			Method[] methods = clazz.getMethods();, +			for (Method method : methods) {, +				if (methodName.equals(method.getName())) {, +					candidates.add(method);, +				}, +			}, +			if (candidates.size() == 1) {, +				return candidates.iterator().next();, +			}, +			return null;, +		}, +	}, +	public static Class<?>[] getAllInterfaces(Object instance) {]