[+++ b/spring-web/src/main/java/org/springframework/http/client/SimpleClientHttpResponse.java, +			if (this.responseStream == null) {, +				getBody();, +			}, +++ b/spring-web/src/main/java/org/springframework/http/client/SimpleClientHttpResponse.java, +			if (this.responseStream == null) {, +				getBody();, +			}, +++ b/spring-web/src/test/java/org/springframework/http/client/AbstractHttpRequestFactoryTestCase.java, +		ClientHttpRequest request = factory.createRequest(new URI(baseUrl + "/status/ok"), HttpMethod.POST);, +++ b/spring-web/src/main/java/org/springframework/http/client/SimpleClientHttpResponse.java, +			if (this.responseStream == null) {, +				getBody();, +			}, +++ b/spring-web/src/test/java/org/springframework/http/client/AbstractHttpRequestFactoryTestCase.java, +		ClientHttpRequest request = factory.createRequest(new URI(baseUrl + "/status/ok"), HttpMethod.POST);, +++ b/spring-web/src/test/java/org/springframework/http/client/SimpleClientHttpResponseTests.java, +	@Test // SPR-17181, +	public void shouldDrainResponseEvenIfResponseNotRead() throws Exception {, +		TestByteArrayInputStream is = new TestByteArrayInputStream("SpringSpring".getBytes(StandardCharsets.UTF_8));, +		given(this.connection.getErrorStream()).willReturn(null);, +		given(this.connection.getInputStream()).willReturn(is);, +, +		this.response.close();, +		assertThat(is.available(), is(0));, +		assertTrue(is.isClosed());, +		verify(this.connection, never()).disconnect();, +	}, +]