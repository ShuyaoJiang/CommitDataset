[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +, +		FlashMap inputFlashMap = this.flashMapManager.retrieveAndUpdate(request, response);, +		if (inputFlashMap != null) {, +			request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));, +		}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +, +		FlashMap inputFlashMap = this.flashMapManager.retrieveAndUpdate(request, response);, +		if (inputFlashMap != null) {, +			request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));, +		}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FlashMap.java, + * Copyright 2002-2012 the original author or authors., + * recipient. On a redirect, the target URL is known and a FlashMap can be, + * updated with that information. This is done automatically when the, + * {@code org.springframework.web.servlet.view.RedirectView} is used., + * <p>Note: annotated controllers will usually not use FlashMap directly., +	 * @param name the expected parameter name, skipped if empty or {@code null}, +	 * @param value the expected value, skipped if empty or {@code null}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +, +		FlashMap inputFlashMap = this.flashMapManager.retrieveAndUpdate(request, response);, +		if (inputFlashMap != null) {, +			request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));, +		}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FlashMap.java, + * Copyright 2002-2012 the original author or authors., + * recipient. On a redirect, the target URL is known and a FlashMap can be, + * updated with that information. This is done automatically when the, + * {@code org.springframework.web.servlet.view.RedirectView} is used., + * <p>Note: annotated controllers will usually not use FlashMap directly., +	 * @param name the expected parameter name, skipped if empty or {@code null}, +	 * @param value the expected value, skipped if empty or {@code null}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FlashMapManager.java, +	 * Find a FlashMap saved by a previous request that matches to the current, +	 * request, remove it from underlying storage, and also remove other, +	 * expired FlashMap instances., +	 * <p>This method is invoked in the beginning of every request in contrast, +	 * to {@link #saveOutputFlashMap}, which is invoked only when there are, +	 * flash attributes to be saved - i.e. before a redirect., +	 * @param response the current response, +	 * @return a FlashMap matching the current request or {@code null}, +	FlashMap retrieveAndUpdate(HttpServletRequest request, HttpServletResponse response);, +	 * Save the given FlashMap, in some underlying storage and set the start, +	 * of its expiration period., +	 * to allow saving the FlashMap in the HTTP session or in a response, +	void saveOutputFlashMap(FlashMap flashMap, HttpServletRequest request, HttpServletResponse response);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +, +		FlashMap inputFlashMap = this.flashMapManager.retrieveAndUpdate(request, response);, +		if (inputFlashMap != null) {, +			request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));, +		}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FlashMap.java, + * Copyright 2002-2012 the original author or authors., + * recipient. On a redirect, the target URL is known and a FlashMap can be, + * updated with that information. This is done automatically when the, + * {@code org.springframework.web.servlet.view.RedirectView} is used., + * <p>Note: annotated controllers will usually not use FlashMap directly., +	 * @param name the expected parameter name, skipped if empty or {@code null}, +	 * @param value the expected value, skipped if empty or {@code null}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FlashMapManager.java, +	 * Find a FlashMap saved by a previous request that matches to the current, +	 * request, remove it from underlying storage, and also remove other, +	 * expired FlashMap instances., +	 * <p>This method is invoked in the beginning of every request in contrast, +	 * to {@link #saveOutputFlashMap}, which is invoked only when there are, +	 * flash attributes to be saved - i.e. before a redirect., +	 * @param response the current response, +	 * @return a FlashMap matching the current request or {@code null}, +	FlashMap retrieveAndUpdate(HttpServletRequest request, HttpServletResponse response);, +	 * Save the given FlashMap, in some underlying storage and set the start, +	 * of its expiration period., +	 * to allow saving the FlashMap in the HTTP session or in a response, +	void saveOutputFlashMap(FlashMap flashMap, HttpServletRequest request, HttpServletResponse response);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/support/AbstractFlashMapManager.java, +	private static final Object writeLock = new Object();, +, +	public final FlashMap retrieveAndUpdate(HttpServletRequest request, HttpServletResponse response) {, +		List<FlashMap> allMaps = retrieveFlashMaps(request);, +		if (CollectionUtils.isEmpty(allMaps)) {, +			logger.debug("Retrieved FlashMap(s): " + allMaps);, +		List<FlashMap> mapsToRemove = getExpiredFlashMaps(allMaps);, +		FlashMap match = getMatchingFlashMap(allMaps, request);, +		if (match != null) {, +			mapsToRemove.add(match);, +		if (!mapsToRemove.isEmpty()) {, +				logger.debug("Removing FlashMap(s): " + allMaps);, +			synchronized (writeLock) {, +				allMaps = retrieveFlashMaps(request);, +				allMaps.removeAll(mapsToRemove);, +				updateFlashMaps(allMaps, request, response);, +		}, +		return match;, +	 * Return a list of expired FlashMap instances contained in the given list., +	 */, +	private List<FlashMap> getExpiredFlashMaps(List<FlashMap> allMaps) {, +		List<FlashMap> result = new ArrayList<FlashMap>();, +		for (FlashMap map : allMaps) {]