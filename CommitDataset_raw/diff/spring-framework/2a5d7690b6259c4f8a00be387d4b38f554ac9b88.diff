[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +		@Nullable, +, +			// Only use method proxy for public methods not derived from java.lang.Object, +			this.methodProxy = (Modifier.isPublic(method.getModifiers()) &&, +					method.getDeclaringClass() != Object.class && !AopUtils.isEqualsMethod(method) &&, +					!AopUtils.isHashCodeMethod(method) && !AopUtils.isToStringMethod(method) ?, +					methodProxy : null);, +			if (this.methodProxy != null) {, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +		@Nullable, +, +			// Only use method proxy for public methods not derived from java.lang.Object, +			this.methodProxy = (Modifier.isPublic(method.getModifiers()) &&, +					method.getDeclaringClass() != Object.class && !AopUtils.isEqualsMethod(method) &&, +					!AopUtils.isHashCodeMethod(method) && !AopUtils.isToStringMethod(method) ?, +					methodProxy : null);, +			if (this.methodProxy != null) {, +++ b/spring-context/src/test/java/org/springframework/aop/framework/CglibProxyTests.java, +, +	public void testToStringInvocation() {, +		PrivateCglibTestBean bean = new PrivateCglibTestBean();, +		bean.setName("Rob Harrop");, +, +		AdvisedSupport as = new AdvisedSupport();, +		as.setTarget(bean);, +		as.addAdvice(new NopInterceptor());, +		AopProxy aop = new CglibAopProxy(as);, +, +		PrivateCglibTestBean proxy = (PrivateCglibTestBean) aop.getProxy();, +		assertEquals("The name property has been overwritten by the constructor", "Rob Harrop", proxy.toString());, +	}, +, +	@Test, +, +, +	private static class PrivateCglibTestBean {, +, +		private String name;, +, +		public PrivateCglibTestBean() {, +			setName("Some Default");, +		}, +, +		public void setName(String name) {, +			this.name = name;, +		}, +, +		public String getName() {, +			return this.name;, +		}, +, +		@Override, +		public String toString() {, +			return this.name;, +		}, +	}, +, +	@Override, +	public String toString() {, +		return this.name;, +	}]