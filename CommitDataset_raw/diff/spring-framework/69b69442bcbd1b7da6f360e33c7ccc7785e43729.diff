[+++ b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageReader.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.http.codec;, +, +import java.nio.CharBuffer;, +import java.nio.charset.StandardCharsets;, +import java.time.Duration;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +import java.util.Map;, +import java.util.Optional;, +import java.util.function.IntPredicate;, +import java.util.stream.Collectors;, +, +import reactor.core.publisher.Flux;, +import reactor.core.publisher.Mono;, +import reactor.util.function.Tuples;, +, +import org.springframework.core.ResolvableType;, +import org.springframework.core.codec.CodecException;, +import org.springframework.core.codec.Decoder;, +, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.core.io.buffer.DataBufferFactory;, +import org.springframework.core.io.buffer.DataBufferUtils;, +import org.springframework.http.MediaType;, +import org.springframework.http.ReactiveHttpInputMessage;, +import org.springframework.util.Assert;, +import org.springframework.util.MimeTypeUtils;, +, +/**, + * Reader that supports a stream of {@link ServerSentEvent}s and also plain, + * {@link Object}s which is the same as an {@link ServerSentEvent} with data, + * only., + *, + * @author Sebastien Deleuze, + * @since 5.0, + */, +public class ServerSentEventHttpMessageReader implements HttpMessageReader<Object> {, +, +	private static final IntPredicate NEWLINE_DELIMITER = b -> b == '\n' || b == '\r';, +, +	private final List<Decoder<?>> dataDecoders;, +, +, +	public ServerSentEventHttpMessageReader() {, +		this.dataDecoders = Collections.emptyList();, +	}, +, +	public ServerSentEventHttpMessageReader(List<Decoder<?>> dataDecoders) {, +		Assert.notNull(dataDecoders, "'dataDecoders' must not be null");, +		this.dataDecoders = new ArrayList<>(dataDecoders);, +	}, +, +, +	@Override, +	public boolean canRead(ResolvableType elementType, MediaType mediaType) {, +		return MediaType.TEXT_EVENT_STREAM.isCompatibleWith(mediaType) ||, +				ServerSentEvent.class.isAssignableFrom(elementType.getRawClass());, +	}, +, +	@Override, +	public Flux<Object> read(ResolvableType elementType, ReactiveHttpInputMessage inputMessage, Map<String, Object> hints) {, +		boolean isSseElementType = ServerSentEvent.class.isAssignableFrom(elementType.getRawClass());, +		ResolvableType dataType = (isSseElementType ? elementType.getGeneric(0) : elementType);, +		return Flux.from(inputMessage.getBody()), +				.concatMap(ServerSentEventHttpMessageReader::splitOnNewline), +				.map(buffer -> Tuples.of(decodeDataBuffer(buffer), buffer.factory())), +				.bufferUntil(data -> data.getT1().equals("\n")), +				.concatMap(list -> {, +					ServerSentEvent.Builder<Object> sseBuilder = ServerSentEvent.builder();, +					StringBuilder dataBuilder = new StringBuilder();, +					StringBuilder commentBuilder = new StringBuilder();, +					DataBufferFactory bufferFactory = list.stream().findFirst().get().getT2();, +					String[] lines = list.stream().map(t -> t.getT1()).collect(Collectors.joining()).split("\\r?\\n");, +					for (String line : lines) {, +						if (line.startsWith("id:")) {, +							sseBuilder.id(line.substring(3));, +						}, +						else if (line.startsWith("event:")) {, +							sseBuilder.event(line.substring(6));, +						}, +						else if (line.startsWith("data:")) {, +							dataBuilder.append(line.substring(5)).append("\n");]