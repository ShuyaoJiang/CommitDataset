[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +import org.springframework.core.io.InputStreamResource;, +		Class<?> clazz = getReturnValueType(value, returnType);, +		return clazz != InputStreamResource.class && Resource.class.isAssignableFrom(clazz);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +import org.springframework.core.io.InputStreamResource;, +		Class<?> clazz = getReturnValueType(value, returnType);, +		return clazz != InputStreamResource.class && Resource.class.isAssignableFrom(clazz);, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessorMockTests.java, +import java.io.ByteArrayInputStream;, +import java.io.InputStream;, +import org.hamcrest.Matchers;, +import org.springframework.core.io.InputStreamResource;, +	@Test //SPR-16754, +	public void disableRangeSupportForStreamingResponses() throws Exception {, +		InputStream is = new ByteArrayInputStream("Content".getBytes(StandardCharsets.UTF_8));, +		InputStreamResource resource = new InputStreamResource(is, "test");, +		ResponseEntity<Resource> returnValue = ResponseEntity.ok(resource);, +		servletRequest.addHeader("Range", "bytes=0-5");, +, +		given(resourceMessageConverter.canWrite(any(), eq(null))).willReturn(true);, +		given(resourceMessageConverter.canWrite(any(), eq(APPLICATION_OCTET_STREAM))).willReturn(true);, +, +		processor.handleReturnValue(returnValue, returnTypeResponseEntityResource, mavContainer, webRequest);, +		then(resourceMessageConverter).should(times(1)).write(, +				any(InputStreamResource.class), eq(APPLICATION_OCTET_STREAM), any(HttpOutputMessage.class));, +		assertEquals(200, servletResponse.getStatus());, +		assertThat(servletResponse.getHeader(HttpHeaders.ACCEPT_RANGES), Matchers.isEmptyOrNullString());, +	}, +]