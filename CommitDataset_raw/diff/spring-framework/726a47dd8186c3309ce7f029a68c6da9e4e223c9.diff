[+++ b/src/asciidoc/core-validation.adoc, +<<mvc-config-conversion>> in the Spring MVC chapter., +See <<mvc-config-conversion>> in the Spring MVC chapter., +`mvc:annotation-driven` element. See <<mvc-config-conversion>> for details., +See <<mvc-config-validation>> in the Spring MVC chapter., +++ b/src/asciidoc/core-validation.adoc, +<<mvc-config-conversion>> in the Spring MVC chapter., +See <<mvc-config-conversion>> in the Spring MVC chapter., +`mvc:annotation-driven` element. See <<mvc-config-conversion>> for details., +See <<mvc-config-validation>> in the Spring MVC chapter., +++ b/src/asciidoc/web-mvc.adoc, +and override the methods you need:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Configuration, +	@EnableWebMvc, +	public class WebConfig extends WebMvcConfigurerAdapter {, +, +		// Override configuration methods..., +, +	}, +----, +, +To customize the default configuration of `<mvc:annotation-driven />` check what, +attributes and sub-elements it supports. You can view the, +http://schema.spring.io/mvc/spring-mvc.xsd[Spring MVC XML schema] or use the code, +completion feature of your IDE to discover what attributes and sub-elements are, +available., +, +, +[[mvc-config-conversion]], +=== Conversion and Formatting, +, +By default formatters for Numbers and Date types are installed, including support for the @NumberFormat, +and @DateTimeFormat annotations. Full support for the Joda Time formatting library is also installed, +if Joda Time is present on the classpath. To register custom formatters and converters override, +the `addFormatters` method:, +		public void addFormatters(FormatterRegistry registry) {, +In the MVC namespace the same defaults apply when `<mvc:annotation-driven>` is added., +To register custom formatters and converters simply supply a `ConversionService`:, +	<?xml version="1.0" encoding="UTF-8"?>, +	<beans xmlns="http://www.springframework.org/schema/beans", +		xmlns:mvc="http://www.springframework.org/schema/mvc", +		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +		xsi:schemaLocation=", +			http://www.springframework.org/schema/beans, +			http://www.springframework.org/schema/beans/spring-beans.xsd, +			http://www.springframework.org/schema/mvc, +			http://www.springframework.org/schema/mvc/spring-mvc.xsd">, +		<mvc:annotation-driven conversion-service="conversionService"/>, +, +		<bean id="conversionService", +				class="org.springframework.format.support.FormattingConversionServiceFactoryBean">, +			<property name="converters">, +				<set>, +					<bean class="org.example.MyConverter"/>, +				</set>, +			</property>, +				<set>, +					<bean class="org.example.MyAnnotationFormatterFactory"/>, +				</set>, +			</property>, +			<property name="formatterRegistrars">, +				<set>, +					<bean class="org.example.MyFormatterRegistrar"/>, +				</set>, +, +	</beans>, +[NOTE], +====, +See <<format-FormatterRegistrar-SPI>> and the `FormattingConversionServiceFactoryBean`, +for more information on when to use FormatterRegistrars., +====, +, +[[mvc-config-validation]], +=== Validation, +, +Spring provides a <<validator,Validator interface>> that can be used for validation in all layers, +of an application. In Spring MVC you can configure it for use as a global `Validator` instance, to be used, +whenever an `@Valid` or `@Validated` controller method argument is encountered, and/or as a local, +`Validator` within a controller through an `@InitBinder` method. Global and local validator, +instances can be combined to provide composite validation., +, +Spring also <<validation-beanvalidation-overview,supports JSR-303/JSR-349>> Bean Validation, +via `LocalValidatorFactoryBean` which adapts the Spring `org.springframework.validation.Validator`, +interface to the Bean Validation `javax.validation.Validator` contract. This class can be, +plugged into Spring MVC as a global validator as described next., +, +By default use of `@EnableWebMvc` or `<mvc:annotation-driven>` automatically registers Bean, +Validation support in Spring MVC through the `LocalValidatorFactoryBean` when a Bean Validation, +provider is such as Hibernate Validator is detected on the classpath., +, +Alternatively you can configure your own global `Validator` instance:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Configuration]