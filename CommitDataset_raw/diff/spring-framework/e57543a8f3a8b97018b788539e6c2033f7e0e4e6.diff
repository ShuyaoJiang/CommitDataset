[+++ b/org.springframework.aop/src/test/java/org/springframework/aop/framework/ProxyFactoryTests.java, +import javax.swing.*;, +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +import org.junit.Ignore;, +import test.aop.CountingBeforeAdvice;, +import org.springframework.aop.Advisor;, +import org.springframework.aop.interceptor.DebugInterceptor;, +import org.springframework.aop.support.AopUtils;, +import org.springframework.aop.support.DefaultIntroductionAdvisor;, +import org.springframework.aop.support.DefaultPointcutAdvisor;, +import org.springframework.aop.support.DelegatingIntroductionInterceptor;, +, +	@Ignore, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/framework/ProxyFactoryTests.java, +import javax.swing.*;, +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +import org.junit.Ignore;, +import test.aop.CountingBeforeAdvice;, +import org.springframework.aop.Advisor;, +import org.springframework.aop.interceptor.DebugInterceptor;, +import org.springframework.aop.support.AopUtils;, +import org.springframework.aop.support.DefaultIntroductionAdvisor;, +import org.springframework.aop.support.DefaultPointcutAdvisor;, +import org.springframework.aop.support.DelegatingIntroductionInterceptor;, +, +	@Ignore, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/interceptor/ExposeInvocationInterceptorTests-context.xml, +	<bean id="countingBeforeAdvice" class="test.aop.CountingBeforeAdvice"/>, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/framework/ProxyFactoryTests.java, +import javax.swing.*;, +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +import org.junit.Ignore;, +import test.aop.CountingBeforeAdvice;, +import org.springframework.aop.Advisor;, +import org.springframework.aop.interceptor.DebugInterceptor;, +import org.springframework.aop.support.AopUtils;, +import org.springframework.aop.support.DefaultIntroductionAdvisor;, +import org.springframework.aop.support.DefaultPointcutAdvisor;, +import org.springframework.aop.support.DelegatingIntroductionInterceptor;, +, +	@Ignore, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/interceptor/ExposeInvocationInterceptorTests-context.xml, +	<bean id="countingBeforeAdvice" class="test.aop.CountingBeforeAdvice"/>, +++ b/org.springframework.aop/src/test/java/test/aop/CountingBeforeAdvice.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package test.aop;, +, +import java.lang.reflect.Method;, +, +import org.springframework.aop.MethodBeforeAdvice;, +, +/**, + * Simple before advice example that we can use for counting checks., + *, + * @author Rod Johnson, + */, +@SuppressWarnings("serial"), +public class CountingBeforeAdvice extends MethodCounter implements MethodBeforeAdvice {, +, +	public void before(Method m, Object[] args, Object target) throws Throwable {, +		count(m);, +	}, +, +}]