[+++ b/src/asciidoc/index.adoc, +, +`TransactionalTestExecutionListener` which is configured by default, even if you do not, +explicitly declare `@TestExecutionListeners` on your test class. To enable support for, +transactions, however, you must configure a `PlatformTransactionManager` bean in the, +`ApplicationContext` that is loaded via `@ContextConfiguration` semantics (further, +details are provided below). In addition, you must declare Spring's `@Transactional`, +annotation either at the class or method level for your tests., +[[testcontext-tx-test-managed-transactions]], +====== Test-managed transactions, +_Test-managed transactions_ are transactions that are managed _declaratively_ via the, +`TransactionalTestExecutionListener` or _programmatically_ via `TestTransaction` (see, +below). Such transactions should not be confused with _Spring-managed transactions_, +(i.e., those managed directly by Spring within the `ApplicationContext` loaded for tests), +or _application-managed transactions_ (i.e., those managed programmatically within, +application code that is invoked via tests). Spring-managed and application-managed, +transactions will typically participate in test-managed transactions; however, caution, +should be taken if Spring-managed or application-managed transactions are configured with, +any _propagation_ type other than `REQUIRED` or `SUPPORTS` (see <<tx-propagation>> for, +details)., +[[testcontext-tx-enabling-transactions]], +====== Enabling and disabling transactions, +, +Annotating a test method with `@Transactional` causes the test to be run within a, +transaction that will, by default, be automatically rolled back after completion of the, +test. If a test class is annotated with `@Transactional`, each test method within that, +class hierarchy will be run within a transaction. Test methods that are not annotated, +with `@Transactional` (at the class or method level) will not be run within a, +transaction. Furthermore, tests that are annotated with `@Transactional` but have the, +`propagation` type set to `NOT_SUPPORTED` will not be run within a transaction., +, +__Note that <<testcontext-support-classes-junit4,, +The following example demonstrates a common scenario for writing an integration test for, +a Hibernate-based `UserRepository`. As explained in, +<<testcontext-tx-rollback-and-commit-behavior>>, there is no need to clean up the, +database after the `createUser()` method is executed since any changes made to the, +database will be automatically rolled back by the `TransactionalTestExecutionListener`., +See the <<testing-examples-petclinic>> section for an additional example., +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@RunWith(SpringJUnit4ClassRunner.class), +	@ContextConfiguration(classes = TestConfig.class), +	@Transactional, +	public class HibernateUserRepositoryTests {, +, +		@Autowired, +		HibernateUserRepository repository;, +, +		@Autowired, +		SessionFactory sessionFactory;, +, +		JdbcTemplate jdbcTemplate;, +, +		@Autowired, +		public void setDataSource(DataSource dataSource) {, +			this.jdbcTemplate = new JdbcTemplate(dataSource);, +		}, +, +		@Test, +		public void createUser() {, +			// track initial state in test database:, +			final int count = countRowsInTable("user");, +, +			User user = new User(...);, +			repository.save(user);, +, +			// Manual flush is required to avoid false positive in test, +			sessionFactory.getCurrentSession().flush();, +			assertNumUsers(count + 1);, +		}, +, +		protected int countRowsInTable(String tableName) {, +			return JdbcTestUtils.countRowsInTable(this.jdbcTemplate, tableName);, +		}, +, +		protected void assertNumUsers(int expected) {, +			assertEquals("Number of rows in the 'user' table.", expected, countRowsInTable("user"));, +		}, +	}, +----, +, +[[testcontext-tx-rollback-and-commit-behavior]], +====== Transaction rollback and commit behavior, +, +By default, test transactions will be automatically rolled back after completion of the, +test; however, transactional commit and rollback behavior can be configured declaratively, +via the class-level `@TransactionConfiguration` and method-level `@Rollback` annotations., +See the corresponding entries in the <<integration-testing-annotations,annotation, +support>> section for further details., +, +[[testcontext-tx-programmatic-tx-mgt]], +====== Programmatic transaction management, +As of Spring Framework 4.1, it is possible to interact with test-managed transactions, +_programmatically_ via the static methods in `TestTransaction`. For example,, +`TestTransaction` may be used within _test_ methods, _before_ methods, and _after_, +methods to start or end the current test-managed transaction or to configure the current, +test-managed transaction for rollback or commit. Support for `TestTransaction` is, +automatically available whenever the `TransactionalTestExecutionListener` is enabled.]