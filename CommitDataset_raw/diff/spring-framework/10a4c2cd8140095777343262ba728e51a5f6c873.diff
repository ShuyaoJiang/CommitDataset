[+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/context/JavaConfigTests.java, +@WebAppConfiguration("classpath:META-INF/web-resources"), +	static class WebConfig extends WebMvcConfigurerAdapter {, +		@Bean, +		public TilesConfigurer tilesConfigurer() {, +			TilesConfigurer configurer = new TilesConfigurer();, +			return configurer;, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/context/JavaConfigTests.java, +@WebAppConfiguration("classpath:META-INF/web-resources"), +	static class WebConfig extends WebMvcConfigurerAdapter {, +		@Bean, +		public TilesConfigurer tilesConfigurer() {, +			TilesConfigurer configurer = new TilesConfigurer();, +			return configurer;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/EnableWebMvc.java, +@Import({DelegatingWebMvcConfiguration.class}), +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/context/JavaConfigTests.java, +@WebAppConfiguration("classpath:META-INF/web-resources"), +	static class WebConfig extends WebMvcConfigurerAdapter {, +		@Bean, +		public TilesConfigurer tilesConfigurer() {, +			TilesConfigurer configurer = new TilesConfigurer();, +			return configurer;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/EnableWebMvc.java, +@Import({DelegatingWebMvcConfiguration.class}), +++ /dev/null, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/context/JavaConfigTests.java, +@WebAppConfiguration("classpath:META-INF/web-resources"), +	static class WebConfig extends WebMvcConfigurerAdapter {, +		@Bean, +		public TilesConfigurer tilesConfigurer() {, +			TilesConfigurer configurer = new TilesConfigurer();, +			return configurer;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/EnableWebMvc.java, +@Import({DelegatingWebMvcConfiguration.class}), +++ /dev/null, +++ /dev/null, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/context/JavaConfigTests.java, +@WebAppConfiguration("classpath:META-INF/web-resources"), +	static class WebConfig extends WebMvcConfigurerAdapter {, +		@Bean, +		public TilesConfigurer tilesConfigurer() {, +			TilesConfigurer configurer = new TilesConfigurer();, +			return configurer;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/EnableWebMvc.java, +@Import({DelegatingWebMvcConfiguration.class}), +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/context/JavaConfigTests.java, +@WebAppConfiguration("classpath:META-INF/web-resources"), +	static class WebConfig extends WebMvcConfigurerAdapter {, +		@Bean, +		public TilesConfigurer tilesConfigurer() {, +			TilesConfigurer configurer = new TilesConfigurer();, +			return configurer;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/EnableWebMvc.java, +@Import({DelegatingWebMvcConfiguration.class}), +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/context/JavaConfigTests.java, +@WebAppConfiguration("classpath:META-INF/web-resources"), +	static class WebConfig extends WebMvcConfigurerAdapter {, +		@Bean, +		public TilesConfigurer tilesConfigurer() {, +			TilesConfigurer configurer = new TilesConfigurer();, +			return configurer;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/EnableWebMvc.java, +@Import({DelegatingWebMvcConfiguration.class}), +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ViewResolverRegistry.java, +	 * Register JSP view resolver using a default view name prefix of "/WEB-INF/", +	 * and a default suffix of ".jsp"., +	 * <p>When this method is invoked more than once, each call will register a, +	 * new ViewResolver instance. Note that since it's not easy to determine, +	 * on the resolver indicating which view names are handled by which resolver., +	 * Register JSP view resolver with the specified prefix and suffix., +	 * <p>When this method is invoked more than once, each call will register a, +	 * new ViewResolver instance. Note that since it's not easy to determine, +	 * on the resolver indicating which view names are handled by which resolver., +	 * Register Tiles 3.x view resolver., +	 * <p><strong>Note</strong> that you must also configure Tiles by adding a, +	 * {@link org.springframework.web.servlet.view.tiles3.TilesConfigurer} bean., +			throw new BeanInitializationException("In addition to a Tiles view resolver " +, +					"there must also be a single TilesConfigurer bean in this web application context " +, +					"(or its parent).");, +	 * Register a FreeMarker view resolver with an empty default view name, +	 * <p><strong>Note</strong> that you must also configure FreeMarker by adding a, +	 * {@link org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer} bean., +			throw new BeanInitializationException("In addition to a FreeMarker view resolver " +, +					"there must also be a single FreeMarkerConfig bean in this web application context " +, +					"(or its parent): FreeMarkerConfigurer is the usual implementation. " +, +					"This bean may be given any name.");, +	 * Register Velocity view resolver with an empty default view name, +	 * <p><strong>Note</strong> that you must also configure Velocity by adding a]