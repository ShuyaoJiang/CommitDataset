[+++ b/build.gradle, +++ b/build.gradle, +++ b/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverter.java, + * An {@code HttpMessageConverter} that can read and write Protobuf, + * {@link com.google.protobuf.Message} using, + * <a href="https://developers.google.com/protocol-buffers/">Google Protocol buffers</a>., + * <p>By default it supports {@code "application/json"}, {@code "application/xml"},, + * {@code "text/plain"} and {@code "application/x-protobuf"} while writing also, + * supports {@code "text/html"}, + * <p>To generate Message Java classes you need to install the protoc binary., + *, +, +	private static final ConcurrentHashMap<Class<?>, Method> methodCache = new ConcurrentHashMap<Class<?>, Method>();, +, +, +	 * Construct a new instance., +	 * Construct a new instance with an {@link ExtensionRegistryInitializer}, +	 * that allows the registration of message extensions., +		super(PROTOBUF, MediaType.TEXT_PLAIN, MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON);, +		if (this.extensionRegistry != null) {, +			registryInitializer.initializeExtensionRegistry(this.extensionRegistry);, +	}, +, +	protected Message readInternal(Class<? extends Message> clazz, HttpInputMessage inputMessage), +			throws IOException, HttpMessageNotReadableException {, +		MediaType contentType = inputMessage.getHeaders().getContentType();, +		contentType = (contentType != null ? contentType : PROTOBUF);, +, +		Charset charset = getCharset(inputMessage.getHeaders());, +		InputStreamReader reader = new InputStreamReader(inputMessage.getBody(), charset);, +			Message.Builder builder = getMessageBuilder(clazz);, +				JsonFormat.merge(reader, this.extensionRegistry, builder);, +				TextFormat.merge(reader, this.extensionRegistry, builder);, +				XmlFormat.merge(reader, this.extensionRegistry, builder);, +			else {, +				builder.mergeFrom(inputMessage.getBody(), this.extensionRegistry);, +	private Message.Builder getMessageBuilder(Class<? extends Message> clazz) throws Exception {, +		Method method = methodCache.get(clazz);, +		if (method == null) {, +			method = clazz.getMethod("newBuilder");, +			methodCache.put(clazz, method);, +		return (Message.Builder) method.invoke(clazz);, +	protected void writeInternal(Message message, HttpOutputMessage outputMessage), +			throws IOException, HttpMessageNotWritableException {, +, +	 * Set the "X-Protobuf-*" HTTP headers when responding with a message of, +	 * content type "application/x-protobuf", +	private void setProtoHeader(HttpOutputMessage response, Message message) {, +		response.getHeaders().set(X_PROTOBUF_SCHEMA_HEADER, message.getDescriptorForType().getFile().getName());, +		response.getHeaders().set(X_PROTOBUF_MESSAGE_HEADER, message.getDescriptorForType().getFullName());, +++ b/build.gradle, +++ b/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverter.java, + * An {@code HttpMessageConverter} that can read and write Protobuf, + * {@link com.google.protobuf.Message} using, + * <a href="https://developers.google.com/protocol-buffers/">Google Protocol buffers</a>., + * <p>By default it supports {@code "application/json"}, {@code "application/xml"},, + * {@code "text/plain"} and {@code "application/x-protobuf"} while writing also, + * supports {@code "text/html"}, + * <p>To generate Message Java classes you need to install the protoc binary., + *, +, +	private static final ConcurrentHashMap<Class<?>, Method> methodCache = new ConcurrentHashMap<Class<?>, Method>();, +, +, +	 * Construct a new instance., +	 * Construct a new instance with an {@link ExtensionRegistryInitializer}, +	 * that allows the registration of message extensions., +		super(PROTOBUF, MediaType.TEXT_PLAIN, MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON);, +		if (this.extensionRegistry != null) {, +			registryInitializer.initializeExtensionRegistry(this.extensionRegistry);, +	}, +, +	protected Message readInternal(Class<? extends Message> clazz, HttpInputMessage inputMessage), +			throws IOException, HttpMessageNotReadableException {, +		MediaType contentType = inputMessage.getHeaders().getContentType();, +		contentType = (contentType != null ? contentType : PROTOBUF);, +, +		Charset charset = getCharset(inputMessage.getHeaders());, +		InputStreamReader reader = new InputStreamReader(inputMessage.getBody(), charset);, +			Message.Builder builder = getMessageBuilder(clazz);, +				JsonFormat.merge(reader, this.extensionRegistry, builder);, +				TextFormat.merge(reader, this.extensionRegistry, builder);, +				XmlFormat.merge(reader, this.extensionRegistry, builder);, +			else {, +				builder.mergeFrom(inputMessage.getBody(), this.extensionRegistry);, +	private Message.Builder getMessageBuilder(Class<? extends Message> clazz) throws Exception {, +		Method method = methodCache.get(clazz);, +		if (method == null) {, +			method = clazz.getMethod("newBuilder");, +			methodCache.put(clazz, method);, +		return (Message.Builder) method.invoke(clazz);, +	protected void writeInternal(Message message, HttpOutputMessage outputMessage), +			throws IOException, HttpMessageNotWritableException {, +, +	 * Set the "X-Protobuf-*" HTTP headers when responding with a message of, +	 * content type "application/x-protobuf", +	private void setProtoHeader(HttpOutputMessage response, Message message) {, +		response.getHeaders().set(X_PROTOBUF_SCHEMA_HEADER, message.getDescriptorForType().getFile().getName());, +		response.getHeaders().set(X_PROTOBUF_MESSAGE_HEADER, message.getDescriptorForType().getFullName());, +++ b/spring-web/src/test/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverterTests.java]