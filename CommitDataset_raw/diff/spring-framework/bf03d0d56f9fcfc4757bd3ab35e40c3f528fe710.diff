[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +import org.springframework.util.ObjectUtils;, +	/** Constant defining an 'unknown type' TypeDescriptor */, +			return this.field.getAnnotations();, +	public boolean equals(Object obj) {, +		if (!(obj instanceof TypeDescriptor)) {, +			return false;, +		}, +		TypeDescriptor td = (TypeDescriptor) obj;, +		boolean annotatedTypeEquals = getType().equals(td.getType()) && ObjectUtils.nullSafeEquals(getAnnotations(), td.getAnnotations());, +		if (isCollection()) {, +			return annotatedTypeEquals && ObjectUtils.nullSafeEquals(getElementType(), td.getElementType());, +		} else if (isMap()) { , +			return annotatedTypeEquals && ObjectUtils.nullSafeEquals(getMapKeyType(), td.getMapKeyType()) && ObjectUtils.nullSafeEquals(getMapValueType(), td.getMapValueType());, +		} else {, +			return annotatedTypeEquals; , +		}, +	}, +	, +	public int hashCode() {, +		int annotatedTypeHash = getType().hashCode() + ObjectUtils.nullSafeHashCode(getAnnotations());, +		if (isCollection()) {, +			return annotatedTypeHash + ObjectUtils.nullSafeHashCode(getElementType()); , +		} else if (isMap()) {, +			return annotatedTypeHash + ObjectUtils.nullSafeHashCode(getMapKeyType()) + ObjectUtils.nullSafeHashCode(getMapValueType());, +		} else {, +			return annotatedTypeHash;, +		}, +	}, +	, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +import org.springframework.util.ObjectUtils;, +	/** Constant defining an 'unknown type' TypeDescriptor */, +			return this.field.getAnnotations();, +	public boolean equals(Object obj) {, +		if (!(obj instanceof TypeDescriptor)) {, +			return false;, +		}, +		TypeDescriptor td = (TypeDescriptor) obj;, +		boolean annotatedTypeEquals = getType().equals(td.getType()) && ObjectUtils.nullSafeEquals(getAnnotations(), td.getAnnotations());, +		if (isCollection()) {, +			return annotatedTypeEquals && ObjectUtils.nullSafeEquals(getElementType(), td.getElementType());, +		} else if (isMap()) { , +			return annotatedTypeEquals && ObjectUtils.nullSafeEquals(getMapKeyType(), td.getMapKeyType()) && ObjectUtils.nullSafeEquals(getMapValueType(), td.getMapValueType());, +		} else {, +			return annotatedTypeEquals; , +		}, +	}, +	, +	public int hashCode() {, +		int annotatedTypeHash = getType().hashCode() + ObjectUtils.nullSafeHashCode(getAnnotations());, +		if (isCollection()) {, +			return annotatedTypeHash + ObjectUtils.nullSafeHashCode(getElementType()); , +		} else if (isMap()) {, +			return annotatedTypeHash + ObjectUtils.nullSafeHashCode(getMapKeyType()) + ObjectUtils.nullSafeHashCode(getMapValueType());, +		} else {, +			return annotatedTypeHash;, +		}, +	}, +	, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +import java.util.concurrent.ConcurrentHashMap;, +	private static final GenericConverter NO_MATCH = new GenericConverter() {, +		public Set<ConvertiblePair> getConvertibleTypes() {, +			throw new UnsupportedOperationException();, +		}, +		public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +			throw new UnsupportedOperationException();, +		}, +		public String toString() {, +			return "null";, +		}, +	};, +	private final Map<ConverterCacheKey, GenericConverter> converterCache = new ConcurrentHashMap<ConverterCacheKey, GenericConverter>();, +	 * First queries this ConversionService's converter cache., +	 * On a cache miss, then performs an exhaustive search for a matching converter., +	 * If no converter matches, returns the default converter., +	 * Subclasses may override., +	 * @see #getDefaultConverter(TypeDescriptor, TypeDescriptor), +		ConverterCacheKey key = new ConverterCacheKey(sourceType, targetType);, +		GenericConverter converter = converterCache.get(key);, +			if (logger.isDebugEnabled()) {, +				logger.debug("Matched cached converter " + converter);, +			}, +			return converter != NO_MATCH ? converter : null; , +		} else {			, +			converter = findConverterForClassPair(sourceType, targetType);, +			if (converter != null) {, +				if (logger.isTraceEnabled()) {, +					logger.trace("Caching under " + key);, +				}, +				converterCache.put(key, converter);, +			converter = getDefaultConverter(sourceType, targetType);, +			if (converter != null) {, +				if (logger.isTraceEnabled()) {, +					logger.trace("Caching under " + key);, +				}, +				converterCache.put(key, converter);, +				return converter;				, +			}]