[+++ b/spring-context/src/test/java/org/springframework/cache/CacheReproTests.java, +		this.thrown.expect(IllegalStateException.class);, +		this.thrown.expectMessage(MyCacheResolver.class.getName());, +			cacheManager.setCaches(Collections.singletonList(cache()));, +++ b/spring-context/src/test/java/org/springframework/cache/CacheReproTests.java, +		this.thrown.expect(IllegalStateException.class);, +		this.thrown.expectMessage(MyCacheResolver.class.getName());, +			cacheManager.setCaches(Collections.singletonList(cache()));, +++ b/spring-context/src/test/java/org/springframework/cache/annotation/AnnotationCacheOperationSourceTests.java, +		getOps(AnnotatedClass.class, "emptyCaching", 0);, +		this.exception.expect(IllegalStateException.class);, +		this.exception.expect(IllegalStateException.class);, +			return this.source.getCacheOperations(method, target);, +++ b/spring-context/src/test/java/org/springframework/cache/CacheReproTests.java, +		this.thrown.expect(IllegalStateException.class);, +		this.thrown.expectMessage(MyCacheResolver.class.getName());, +			cacheManager.setCaches(Collections.singletonList(cache()));, +++ b/spring-context/src/test/java/org/springframework/cache/annotation/AnnotationCacheOperationSourceTests.java, +		getOps(AnnotatedClass.class, "emptyCaching", 0);, +		this.exception.expect(IllegalStateException.class);, +		this.exception.expect(IllegalStateException.class);, +			return this.source.getCacheOperations(method, target);, +++ b/spring-context/src/test/java/org/springframework/cache/config/AbstractCacheAnnotationTests.java, + * Copyright 2002-2016 the original author or authors., +		this.ctx = getApplicationContext();, +		this.cs = ctx.getBean("service", CacheableService.class);, +		this.ccs = ctx.getBean("classService", CacheableService.class);, +		this.cm = ctx.getBean("cacheManager", CacheManager.class);, +		Collection<String> cn = this.cm.getCacheNames();, +		if (this.ctx != null) {, +			this.ctx.close();, +		assertNull(this.cm.getCache("testCache").get(o1));, +		assertEquals(r3, this.cm.getCache("testCache").get(o1).get());, +		assertNull(this.cm.getCache("testCache").get(o1));, +		assertEquals(r3, this.cm.getCache("testCache").get(o1).get());, +		Cache cache = this.cm.getCache("testCache");, +		Cache cache = this.cm.getCache("testCache");, +		assertThat(cache.get(10).get(), equalTo(10L));, +		Cache cache = this.cm.getCache("testCache");, +		Cache cache = this.cm.getCache("testCache");, +			service.throwUnchecked(1L);, +			service.throwUncheckedSync(1L);, +		Cache cache = this.cm.getCache("testCache");, +		Integer one = 1;, +		Integer three = 3;, +		Cache cache = this.cm.getCache("testCache");, +		Cache primary = this.cm.getCache("primary");, +		Cache secondary = this.cm.getCache("secondary");, +		Cache primary = this.cm.getCache("primary");, +		Cache secondary = this.cm.getCache("secondary");, +		Object o = 1;, +		Cache primary = this.cm.getCache("primary");, +		Cache secondary = this.cm.getCache("secondary");, +		o = 2;, +		Cache primary = this.cm.getCache("primary");, +		Cache primary = this.cm.getCache("primary");, +		Cache secondary = this.cm.getCache("secondary");, +		Object key = 1;, +		Cache primary = this.cm.getCache("primary");, +		Cache secondary = this.cm.getCache("secondary");, +		Object key = 1;, +		Object key2 = 3;, +		testCacheable(this.cs);, +		testCacheableNull(this.cs);, +		testCacheableSync(this.cs);, +		testCacheableSyncNull(this.cs);, +		testEvict(this.cs);, +		testEvictEarly(this.cs);, +		testEvictException(this.cs);, +		testEvictAll(this.cs);, +		testEvictWKey(this.cs);, +		testEvictWKeyEarly(this.cs);, +		testConditionalExpression(this.cs);, +		testConditionalExpressionSync(this.cs);, +		testUnlessExpression(this.cs);, +		testUnlessExpression(this.cs);, +		testKeyExpression(this.cs);, +		testVarArgsKey(this.cs);, +		testCacheable(this.ccs);, +		testEvict(this.ccs);, +		testEvictEarly(this.ccs);, +		testEvictAll(this.ccs);, +		testEvictException(this.ccs);, +		testEvictWKey(this.ccs);, +		testEvictWKeyEarly(this.ccs);, +		testNullValue(this.cs);, +		assertNull(this.ccs.nullValue(key));, +		int nr = this.ccs.nullInvocations().intValue();, +		assertNull(this.ccs.nullValue(key));, +		assertEquals(nr, this.ccs.nullInvocations().intValue());, +		assertNull(this.ccs.nullValue(new Object()));, +		assertEquals(nr, this.ccs.nullInvocations().intValue());, +		testMethodName(this.cs, "name");, +		testMethodName(this.ccs, "nametestCache");, +		testRootVars(this.cs);, +		testRootVars(this.ccs);, +		Object r1 = this.cs.customKeyGenerator(param);, +		assertSame(r1, this.cs.customKeyGenerator(param));, +		Cache cache = this.cm.getCache("testCache");, +			this.cs.unknownCustomKeyGenerator(param);]