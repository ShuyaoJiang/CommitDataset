[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/BinaryMessage.java, +		this(payload, true);, +	public BinaryMessage(ByteBuffer payload, boolean isLast) {, +		super(payload, isLast);, +		this.bytes = null;, +	}, +, +	/**, +	 * Create a new {@link BinaryMessage} instance., +	 * @param payload a non-null payload, +	 */, +		this(payload, 0, (payload == null ? 0 : payload.length), true);, +	}, +, +	/**, +	 * Create a new {@link BinaryMessage} instance., +	 * @param payload a non-null payload, +	 * @param isLast if the message is the last of a series of partial messages, +	 */, +	public BinaryMessage(byte[] payload, boolean isLast) {, +		this(payload, 0, (payload == null ? 0 : payload.length), isLast);, +	public BinaryMessage(byte[] payload, int offset, int len, boolean isLast) {, +		super(payload != null ? ByteBuffer.wrap(payload, offset, len) : null, isLast);, +	protected int getPayloadSize() {, +		return (getPayload() != null) ? getPayload().remaining() : 0;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/BinaryMessage.java, +		this(payload, true);, +	public BinaryMessage(ByteBuffer payload, boolean isLast) {, +		super(payload, isLast);, +		this.bytes = null;, +	}, +, +	/**, +	 * Create a new {@link BinaryMessage} instance., +	 * @param payload a non-null payload, +	 */, +		this(payload, 0, (payload == null ? 0 : payload.length), true);, +	}, +, +	/**, +	 * Create a new {@link BinaryMessage} instance., +	 * @param payload a non-null payload, +	 * @param isLast if the message is the last of a series of partial messages, +	 */, +	public BinaryMessage(byte[] payload, boolean isLast) {, +		this(payload, 0, (payload == null ? 0 : payload.length), isLast);, +	public BinaryMessage(byte[] payload, int offset, int len, boolean isLast) {, +		super(payload != null ? ByteBuffer.wrap(payload, offset, len) : null, isLast);, +	protected int getPayloadSize() {, +		return (getPayload() != null) ? getPayload().remaining() : 0;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/TextMessage.java, +, +	 * @param isLast whether this the last part of a message received or transmitted in parts, +		super(payload.toString(), true);, +	}, +, +	/**, +	 * Create a new {@link TextMessage} instance., +	 * @param payload the payload, +	 * @param isLast whether this the last part of a message received or transmitted in parts, +	 */, +	public TextMessage(CharSequence payload, boolean isLast) {, +		super(payload.toString(), isLast);, +	@Override, +	protected int getPayloadSize() {, +		return getPayload().length();, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/BinaryMessage.java, +		this(payload, true);, +	public BinaryMessage(ByteBuffer payload, boolean isLast) {, +		super(payload, isLast);, +		this.bytes = null;, +	}, +, +	/**, +	 * Create a new {@link BinaryMessage} instance., +	 * @param payload a non-null payload, +	 */, +		this(payload, 0, (payload == null ? 0 : payload.length), true);, +	}, +, +	/**, +	 * Create a new {@link BinaryMessage} instance., +	 * @param payload a non-null payload, +	 * @param isLast if the message is the last of a series of partial messages, +	 */, +	public BinaryMessage(byte[] payload, boolean isLast) {, +		this(payload, 0, (payload == null ? 0 : payload.length), isLast);, +	public BinaryMessage(byte[] payload, int offset, int len, boolean isLast) {, +		super(payload != null ? ByteBuffer.wrap(payload, offset, len) : null, isLast);, +	protected int getPayloadSize() {, +		return (getPayload() != null) ? getPayload().remaining() : 0;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/TextMessage.java, +, +	 * @param isLast whether this the last part of a message received or transmitted in parts, +		super(payload.toString(), true);, +	}, +, +	/**]