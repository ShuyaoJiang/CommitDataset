[+++ b/spring-core/src/test/java/org/springframework/core/codec/AbstractDecoderTestCase.java, +/*, + * Copyright 2002-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.core.codec;, +, +import java.util.Map;, +import java.util.function.Consumer;, +, +import org.junit.Test;, +import org.reactivestreams.Publisher;, +import reactor.core.publisher.Flux;, +import reactor.core.publisher.Mono;, +import reactor.test.StepVerifier;, +, +import org.springframework.core.ResolvableType;, +import org.springframework.core.io.buffer.AbstractLeakCheckingTestCase;, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.lang.Nullable;, +import org.springframework.util.Assert;, +import org.springframework.util.MimeType;, +, +/**, + * Abstract base class for {@link Decoder} unit tests. Subclasses need to implement, + * {@link #canDecode()}, {@link #decode()} and {@link #decodeToMono()}, possibly using the wide, + * variety of helper methods like {@link #testDecodeAll} or {@link #testDecodeToMonoAll}., + *, + * @author Arjen Poutsma, + * @since 5.1.3, + */, +@SuppressWarnings("ProtectedField"), +public abstract class AbstractDecoderTestCase<D extends Decoder<?>>, +		extends AbstractLeakCheckingTestCase {, +, +	/**, +	 * The decoder to test., +	 */, +	protected D decoder;, +, +	/**, +	 * Construct a new {@code AbstractDecoderTestCase} for the given decoder., +	 * @param decoder the decoder, +	 */, +	protected AbstractDecoderTestCase(D decoder) {, +		Assert.notNull(decoder, "Encoder must not be null");, +, +		this.decoder = decoder;, +	}, +, +, +	/**, +	 * Subclasses should implement this method to test {@link Decoder#canDecode}., +	 */, +	@Test, +	public abstract void canDecode() throws Exception;, +, +	/**, +	 * Subclasses should implement this method to test {@link Decoder#decode}, possibly using, +	 * {@link #testDecodeAll} or other helper methods., +	 */, +	@Test, +	public abstract void decode() throws Exception;, +, +	/**, +	 * Subclasses should implement this method to test {@link Decoder#decodeToMono}, possibly using, +	 * {@link #testDecodeToMonoAll}., +	 */, +	@Test, +	public abstract void decodeToMono() throws Exception;, +, +	// Flux, +, +	/**, +	 * Helper methods that tests for a variety of {@link Flux} decoding scenarios. This methods, +	 * invokes:, +	 * <ul>, +	 *     <li>{@link #testDecode(Publisher, ResolvableType, Consumer, MimeType, Map)}</li>, +	 *     <li>{@link #testDecodeError(Publisher, ResolvableType, MimeType, Map)}</li>, +	 *     <li>{@link #testDecodeCancel(Publisher, ResolvableType, MimeType, Map)}</li>, +	 *     <li>{@link #testDecodeEmpty(ResolvableType, MimeType, Map)}</li>, +	 * </ul>, +	 *, +	 * @param input the input to be provided to the decoder, +	 * @param outputClass the desired output class, +	 * @param stepConsumer a consumer to {@linkplain StepVerifier verify} the output, +	 * @param <T> the output type, +	 */]