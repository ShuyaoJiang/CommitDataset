[+++ b/src/docs/asciidoc/integration.adoc, +For each of the main HTTP methods, the `RestTemplate` provides two variants that take, +either a String URI template, or `java.net.URI` as the first argument. When using a, +String URI template, encoding is automatically applied:, +The resulting target URI is "http://example.com/hotel%20list". Alternatively you can, +provide an already prepared `java.net.URI` and that will be used as is., +For more information on preparing URIs, or customizing how the `RestTemplate` expands, +URI templates, see <<web.adoc#mvc-uri-building,URI Links>> in the "Web Servlet" section., +++ b/src/docs/asciidoc/integration.adoc, +For each of the main HTTP methods, the `RestTemplate` provides two variants that take, +either a String URI template, or `java.net.URI` as the first argument. When using a, +String URI template, encoding is automatically applied:, +The resulting target URI is "http://example.com/hotel%20list". Alternatively you can, +provide an already prepared `java.net.URI` and that will be used as is., +For more information on preparing URIs, or customizing how the `RestTemplate` expands, +URI templates, see <<web.adoc#mvc-uri-building,URI Links>> in the "Web Servlet" section., +++ b/src/docs/asciidoc/web/web-uris.adoc, +, +[[web-uricomponents]], += UriComponents, +, +`UriComponents` is comparable to `java.net.URI`. However it comes with a dedicated, +`UriComponentsBuilder` and support URI template variables:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	String uriTemplate = "http://example.com/hotels/{hotel}";, +, +	UriComponents uriComponents = UriComponentsBuilder.fromUriString(uriTemplate)  // <1>, +			.queryParam("q", "{q}")  // <2>, +			.build(); // <3>, +, +	URI uri = uriComponents.expand("Westin", "123").encode().toUri();  // <4>, +----, +<1> Static factory method with a URI template., +<2> Add or replace URI components., +<3> Build `UriComponents`., +<4> Expand URI variables, encode, and obtain the `URI`., +, +The above can be done as a single chain, and with a shortcut:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	String uriTemplate = "http://example.com/hotels/{hotel}";, +, +	URI uri = UriComponentsBuilder.fromUriString(uriTemplate), +			.queryParam("q", "{q}"), +			.buildAndExpand("Westin", "123"), +			.encode(), +			.toUri();, +----, +, +, +, +, +[[web-uribuilder]], += UriBuilder, +, +<<web-uricomponents,UriComponentsBuilder>> is an implementation of `UriBuilder`. Together, +`UriBuilderFactory` and `UriBuilder` provide a pluggable mechanism for building a URI, +from a URI template, as well as a way to share common properties such as a base URI,, +encoding strategy, and others., +, +Both the `RestTemplate` and the `WebClient` can be configured with a `UriBuilderFactory`,, +in order to customize how URIs are created from URI templates. The default implementation, +relies on `UriComponentsBuilder` internally and provides options to a common base URI,, +an alternative encoding mode strategy, and more., +, +An example of configuring the `RestTemplate`:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	String baseUrl = "http://example.com";, +	DefaultUriBuilderFactory factory = new DefaultUriBuilderFactory(baseUrl);, +, +	RestTemplate restTemplate = new RestTemplate();, +	restTemplate.setUriTemplateHandler(factory);, +----, +, +Examples of configuring the `WebClient`:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	String baseUrl = "http://example.com";, +	DefaultUriBuilderFactory factory = new DefaultUriBuilderFactory(baseUrl);, +, +	// Configure the UriBuilderFactory.., +	WebClient client = WebClient.builder().uriBuilderFactory(factory).build();, +, +	// Or use shortcut on builder.., +	WebClient client = WebClient.builder().baseUrl(baseUrl).build();, +, +	// Or use create shortcut..., +	WebClient client = WebClient.create(baseUrl);, +----, +]