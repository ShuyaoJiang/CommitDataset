[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/server/upgrade/JettyRequestUpgradeStrategy.java, +import org.eclipse.jetty.websocket.api.WebSocketPolicy;, +, +	private WebSocketPolicy webSocketPolicy;, +, +	@Nullable, +	/**, +	 * Configure a {@link WebSocketPolicy} to use to initialize, +	 * {@link WebSocketServerFactory}., +	 * @param webSocketPolicy the WebSocket settings, +	 */, +	public void setWebSocketPolicy(WebSocketPolicy webSocketPolicy) {, +		this.webSocketPolicy = webSocketPolicy;, +	}, +, +	/**, +	 * Return the configured {@link WebSocketPolicy}, if any., +	 */, +	@Nullable, +	public WebSocketPolicy getWebSocketPolicy() {, +		return webSocketPolicy;, +	}, +, +, +					this.factory = this.webSocketPolicy != null ?, +							new WebSocketServerFactory(servletContext, this.webSocketPolicy) :, +							new WebSocketServerFactory(servletContext);, +	public Mono<Void> upgrade(ServerWebExchange exchange, WebSocketHandler handler,, +			@Nullable String subProtocol) {, +, +		Assert.isInstanceOf(AbstractServerHttpRequest.class, request);, +		Assert.isInstanceOf(AbstractServerHttpResponse.class, response);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/server/upgrade/JettyRequestUpgradeStrategy.java, +import org.eclipse.jetty.websocket.api.WebSocketPolicy;, +, +	private WebSocketPolicy webSocketPolicy;, +, +	@Nullable, +	/**, +	 * Configure a {@link WebSocketPolicy} to use to initialize, +	 * {@link WebSocketServerFactory}., +	 * @param webSocketPolicy the WebSocket settings, +	 */, +	public void setWebSocketPolicy(WebSocketPolicy webSocketPolicy) {, +		this.webSocketPolicy = webSocketPolicy;, +	}, +, +	/**, +	 * Return the configured {@link WebSocketPolicy}, if any., +	 */, +	@Nullable, +	public WebSocketPolicy getWebSocketPolicy() {, +		return webSocketPolicy;, +	}, +, +, +					this.factory = this.webSocketPolicy != null ?, +							new WebSocketServerFactory(servletContext, this.webSocketPolicy) :, +							new WebSocketServerFactory(servletContext);, +	public Mono<Void> upgrade(ServerWebExchange exchange, WebSocketHandler handler,, +			@Nullable String subProtocol) {, +, +		Assert.isInstanceOf(AbstractServerHttpRequest.class, request);, +		Assert.isInstanceOf(AbstractServerHttpResponse.class, response);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/server/upgrade/TomcatRequestUpgradeStrategy.java, +import javax.websocket.server.ServerContainer;, +	@Nullable, +	private Long asyncSendTimeout;, +, +	@Nullable, +	private Long maxSessionIdleTimeout;, +, +	@Nullable, +	private Integer maxTextMessageBufferSize;, +, +	@Nullable, +	private Integer maxBinaryMessageBufferSize;, +, +	@Nullable, +	private WsServerContainer serverContainer;, +, +, +	/**, +	 * Exposes the underlying config option on, +	 * {@link javax.websocket.server.ServerContainer#setAsyncSendTimeout(long)}., +	 */, +	public void setAsyncSendTimeout(Long timeoutInMillis) {, +		this.asyncSendTimeout = timeoutInMillis;, +	}, +, +	@Nullable, +	public Long getAsyncSendTimeout() {, +		return this.asyncSendTimeout;, +	}, +, +	/**, +	 * Exposes the underlying config option on, +	 * {@link javax.websocket.server.ServerContainer#setDefaultMaxSessionIdleTimeout(long)}., +	 */, +	public void setMaxSessionIdleTimeout(Long timeoutInMillis) {]