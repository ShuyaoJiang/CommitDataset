[+++ b/spring-web/src/main/java/org/springframework/web/bind/support/WebRequestDataBinder.java, + * Copyright 2002-2013 the original author or authors., +import java.io.IOException;, +, +import javax.servlet.ServletException;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.Part;, +, +import org.springframework.util.ClassUtils;, +import org.springframework.util.StringUtils;, +import org.springframework.web.multipart.MultipartException;, + * @author Brian Clozel, +, +	 * <p>The type of the target property for a multipart file can be Part, MultipartFile,, +	 * @see javax.servlet.http.Part, +, +		if(isMultipartRequest(request) && (request instanceof NativeWebRequest)) {, +			else if (ClassUtils.hasMethod(HttpServletRequest.class, "getParts")) {, +				HttpServletRequest serlvetRequest = ((NativeWebRequest) request).getNativeRequest(HttpServletRequest.class);, +				new Servlet3MultipartHelper().bindParts(serlvetRequest, mpvs);, +			}, +	/**, +	 * Check if the request is a multipart request (by checking its Content-Type header)., +	 *, +	 * @param request request with parameters to bind, +	 */, +	private boolean isMultipartRequest(WebRequest request) {, +		String contentType = request.getHeader("Content-Type");, +		return ((contentType != null) && StringUtils.startsWithIgnoreCase(contentType, "multipart"));, +	}, +, +, +	/**, +	 * Encapsulate Part binding code for Servlet 3.0+ only containers., +	 * @see javax.servlet.http.Part, +	 */, +	private static class Servlet3MultipartHelper {, +, +		public void bindParts(HttpServletRequest request, MutablePropertyValues mpvs) {, +			try {, +				for(Part part : request.getParts()) {, +					mpvs.add(part.getName(), part);, +				}, +			}, +			catch (IOException ex) {, +				throw new MultipartException("Failed to get request parts", ex);, +			}, +			catch(ServletException ex) {, +				throw new MultipartException("Failed to get request parts", ex);, +			}, +		}, +, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/bind/support/WebRequestDataBinder.java, + * Copyright 2002-2013 the original author or authors., +import java.io.IOException;, +, +import javax.servlet.ServletException;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.Part;, +, +import org.springframework.util.ClassUtils;, +import org.springframework.util.StringUtils;, +import org.springframework.web.multipart.MultipartException;, + * @author Brian Clozel, +, +	 * <p>The type of the target property for a multipart file can be Part, MultipartFile,, +	 * @see javax.servlet.http.Part, +, +		if(isMultipartRequest(request) && (request instanceof NativeWebRequest)) {, +			else if (ClassUtils.hasMethod(HttpServletRequest.class, "getParts")) {, +				HttpServletRequest serlvetRequest = ((NativeWebRequest) request).getNativeRequest(HttpServletRequest.class);, +				new Servlet3MultipartHelper().bindParts(serlvetRequest, mpvs);, +			}, +	/**, +	 * Check if the request is a multipart request (by checking its Content-Type header)., +	 *, +	 * @param request request with parameters to bind, +	 */, +	private boolean isMultipartRequest(WebRequest request) {, +		String contentType = request.getHeader("Content-Type");, +		return ((contentType != null) && StringUtils.startsWithIgnoreCase(contentType, "multipart"));, +	}, +, +, +	/**, +	 * Encapsulate Part binding code for Servlet 3.0+ only containers., +	 * @see javax.servlet.http.Part, +	 */, +	private static class Servlet3MultipartHelper {, +, +		public void bindParts(HttpServletRequest request, MutablePropertyValues mpvs) {, +			try {, +				for(Part part : request.getParts()) {, +					mpvs.add(part.getName(), part);, +				}, +			}, +			catch (IOException ex) {, +				throw new MultipartException("Failed to get request parts", ex);]