[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java, +import org.springframework.format.support.DefaultFormattingConversionService;, +	private final List<HttpMessageConverter<?>> messageConverters = new ArrayList<>();, +	private ConversionService conversionService = new DefaultFormattingConversionService();, +	private final Map<Class<?>, ExceptionHandlerMethodResolver> exceptionHandlerCache = new ConcurrentHashMap<>(64);, +, +, +, +	public RequestMappingHandlerAdapter() {, +		this.messageConverters.add(new CodecHttpMessageConverter<>(new ByteBufferDecoder()));, +		this.messageConverters.add(new CodecHttpMessageConverter<>(new StringDecoder()));, +	}, +	public void setMessageConverters(List<HttpMessageConverter<?>> messageConverters) {, +		this.messageConverters.clear();, +		this.messageConverters.addAll(messageConverters);, +	}, +, +	/**, +	 * Provide the message converters to use for argument resolution., +	 */, +	public List<HttpMessageConverter<?>> getMessageConverters() {, +		return this.messageConverters;, +	}, +, +//			List<HttpMessageConverter<?>> converters = Arrays.asList(, +//					new CodecHttpMessageConverter<ByteBuffer>(new ByteBufferEncoder(), new ByteBufferDecoder()),, +//					new CodecHttpMessageConverter<String>(new StringEncoder(), new StringDecoder()),, +//					new CodecHttpMessageConverter<Object>(new Jaxb2Encoder(), new Jaxb2Decoder()),, +//					new CodecHttpMessageConverter<Object>(new JacksonJsonEncoder(),, +//							new JacksonJsonDecoder(new JsonObjectDecoder())));, +			this.argumentResolvers.add(new RequestBodyArgumentResolver(getMessageConverters(), cs));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java, +import org.springframework.format.support.DefaultFormattingConversionService;, +	private final List<HttpMessageConverter<?>> messageConverters = new ArrayList<>();, +	private ConversionService conversionService = new DefaultFormattingConversionService();, +	private final Map<Class<?>, ExceptionHandlerMethodResolver> exceptionHandlerCache = new ConcurrentHashMap<>(64);, +, +, +, +	public RequestMappingHandlerAdapter() {, +		this.messageConverters.add(new CodecHttpMessageConverter<>(new ByteBufferDecoder()));, +		this.messageConverters.add(new CodecHttpMessageConverter<>(new StringDecoder()));, +	}, +	public void setMessageConverters(List<HttpMessageConverter<?>> messageConverters) {, +		this.messageConverters.clear();, +		this.messageConverters.addAll(messageConverters);, +	}, +, +	/**, +	 * Provide the message converters to use for argument resolution., +	 */, +	public List<HttpMessageConverter<?>> getMessageConverters() {, +		return this.messageConverters;, +	}, +, +//			List<HttpMessageConverter<?>> converters = Arrays.asList(, +//					new CodecHttpMessageConverter<ByteBuffer>(new ByteBufferEncoder(), new ByteBufferDecoder()),, +//					new CodecHttpMessageConverter<String>(new StringEncoder(), new StringDecoder()),, +//					new CodecHttpMessageConverter<Object>(new Jaxb2Encoder(), new Jaxb2Decoder()),, +//					new CodecHttpMessageConverter<Object>(new JacksonJsonEncoder(),, +//							new JacksonJsonDecoder(new JsonObjectDecoder())));, +			this.argumentResolvers.add(new RequestBodyArgumentResolver(getMessageConverters(), cs));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/SessionAttributeMethodArgumentResolver.java, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java, +import org.springframework.format.support.DefaultFormattingConversionService;, +	private final List<HttpMessageConverter<?>> messageConverters = new ArrayList<>();, +	private ConversionService conversionService = new DefaultFormattingConversionService();, +	private final Map<Class<?>, ExceptionHandlerMethodResolver> exceptionHandlerCache = new ConcurrentHashMap<>(64);, +, +, +, +	public RequestMappingHandlerAdapter() {, +		this.messageConverters.add(new CodecHttpMessageConverter<>(new ByteBufferDecoder()));, +		this.messageConverters.add(new CodecHttpMessageConverter<>(new StringDecoder()));, +	}, +	public void setMessageConverters(List<HttpMessageConverter<?>> messageConverters) {, +		this.messageConverters.clear();, +		this.messageConverters.addAll(messageConverters);, +	}, +, +	/**, +	 * Provide the message converters to use for argument resolution., +	 */, +	public List<HttpMessageConverter<?>> getMessageConverters() {, +		return this.messageConverters;, +	}, +, +//			List<HttpMessageConverter<?>> converters = Arrays.asList(, +//					new CodecHttpMessageConverter<ByteBuffer>(new ByteBufferEncoder(), new ByteBufferDecoder()),, +//					new CodecHttpMessageConverter<String>(new StringEncoder(), new StringDecoder()),, +//					new CodecHttpMessageConverter<Object>(new Jaxb2Encoder(), new Jaxb2Decoder()),, +//					new CodecHttpMessageConverter<Object>(new JacksonJsonEncoder(),, +//							new JacksonJsonDecoder(new JsonObjectDecoder())));, +			this.argumentResolvers.add(new RequestBodyArgumentResolver(getMessageConverters(), cs));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/SessionAttributeMethodArgumentResolver.java, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/freemarker/FreeMarkerView.java, +			// TODO: pass charset, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java, +import org.springframework.format.support.DefaultFormattingConversionService;, +	private final List<HttpMessageConverter<?>> messageConverters = new ArrayList<>();]