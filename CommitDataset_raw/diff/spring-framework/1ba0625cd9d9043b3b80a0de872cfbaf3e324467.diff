[+++ b/spring-web/src/main/java/org/springframework/web/util/DefaultUriTemplateHandler.java, +import java.net.URISyntaxException;, +import org.springframework.util.Assert;, +, +	private String baseUrl;, +, +	 * Configure a base URL to prepend URI templates with. The base URL should, +	 * have a scheme and host but may also contain a port and a partial path., +	 * Individual URI templates then may provide the remaining part of the URL, +	 * including additional path, query and fragment., +	 *, +	 * <p><strong>Note: </strong>Individual URI templates are expanded and, +	 * encoded before being appended to the base URL. Therefore the base URL is, +	 * expected to be fully expanded and encoded, which can be done with the help, +	 * of {@link UriComponentsBuilder}., +	 *, +	 * @param baseUrl the base URL., +	 */, +	public void setBaseUrl(String baseUrl) {, +		if (baseUrl != null) {, +			UriComponents uriComponents = UriComponentsBuilder.fromUriString(baseUrl).build();, +			Assert.hasText(uriComponents.getScheme(), "'baseUrl' must have a scheme");, +			Assert.hasText(uriComponents.getHost(), "'baseUrl' must have a host");, +			Assert.isNull(uriComponents.getQuery(), "'baseUrl' cannot have a query");, +			Assert.isNull(uriComponents.getFragment(), "'baseUrl' cannot have a fragment");, +		}, +		this.baseUrl = baseUrl;, +	}, +, +	/**, +	 * Return the configured base URL., +	 */, +	public String getBaseUrl() {, +		return this.baseUrl;, +	}, +, +	/**, +		UriComponentsBuilder uriComponentsBuilder = initUriComponentsBuilder(uriTemplate);, +		UriComponents uriComponents = uriComponentsBuilder.build().expand(uriVariables).encode();, +		return insertBaseUrl(uriComponents);, +		UriComponentsBuilder uriComponentsBuilder = initUriComponentsBuilder(uriTemplate);, +		UriComponents uriComponents = uriComponentsBuilder.build().expand(uriVariableValues).encode();, +		return insertBaseUrl(uriComponents);, +	protected UriComponentsBuilder initUriComponentsBuilder(String uriTemplate) {, +	protected URI insertBaseUrl(UriComponents uriComponents) {, +		if (getBaseUrl() == null || uriComponents.getHost() != null) {, +			return uriComponents.toUri();, +		}, +		String url = getBaseUrl() + uriComponents.toUriString();, +		try {, +			return new URI(url);, +		}, +		catch (URISyntaxException ex) {, +			throw new IllegalArgumentException("Invalid URL after inserting base URL: " + url, ex);, +		}, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/util/DefaultUriTemplateHandler.java, +import java.net.URISyntaxException;, +import org.springframework.util.Assert;, +, +	private String baseUrl;, +, +	 * Configure a base URL to prepend URI templates with. The base URL should, +	 * have a scheme and host but may also contain a port and a partial path., +	 * Individual URI templates then may provide the remaining part of the URL, +	 * including additional path, query and fragment., +	 *, +	 * <p><strong>Note: </strong>Individual URI templates are expanded and, +	 * encoded before being appended to the base URL. Therefore the base URL is, +	 * expected to be fully expanded and encoded, which can be done with the help, +	 * of {@link UriComponentsBuilder}., +	 *, +	 * @param baseUrl the base URL., +	 */, +	public void setBaseUrl(String baseUrl) {, +		if (baseUrl != null) {, +			UriComponents uriComponents = UriComponentsBuilder.fromUriString(baseUrl).build();, +			Assert.hasText(uriComponents.getScheme(), "'baseUrl' must have a scheme");, +			Assert.hasText(uriComponents.getHost(), "'baseUrl' must have a host");, +			Assert.isNull(uriComponents.getQuery(), "'baseUrl' cannot have a query");, +			Assert.isNull(uriComponents.getFragment(), "'baseUrl' cannot have a fragment");, +		}, +		this.baseUrl = baseUrl;, +	}, +, +	/**, +	 * Return the configured base URL., +	 */, +	public String getBaseUrl() {, +		return this.baseUrl;, +	}, +, +	/**, +		UriComponentsBuilder uriComponentsBuilder = initUriComponentsBuilder(uriTemplate);, +		UriComponents uriComponents = uriComponentsBuilder.build().expand(uriVariables).encode();, +		return insertBaseUrl(uriComponents);, +		UriComponentsBuilder uriComponentsBuilder = initUriComponentsBuilder(uriTemplate);, +		UriComponents uriComponents = uriComponentsBuilder.build().expand(uriVariableValues).encode();, +		return insertBaseUrl(uriComponents);]