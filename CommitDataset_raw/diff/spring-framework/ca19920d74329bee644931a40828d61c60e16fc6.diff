[+++ b/spring-core/src/main/java/org/springframework/util/Assert.java, + * Copyright 2002-2016 the original author or authors., +			throw new IllegalArgumentException((StringUtils.hasLength(message) ? message + " " : "") +, +					subType + " is not assignable to " + superType);, +++ b/spring-core/src/main/java/org/springframework/util/Assert.java, + * Copyright 2002-2016 the original author or authors., +			throw new IllegalArgumentException((StringUtils.hasLength(message) ? message + " " : "") +, +					subType + " is not assignable to " + superType);, +++ b/spring-test/src/main/java/org/springframework/test/context/support/AbstractContextLoader.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.context.ApplicationContextException;, +		String[] processedLocations =, +				processLocations(configAttributes.getDeclaringClass(), configAttributes.getLocations());, +, +		Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses =, +				mergedConfig.getContextInitializerClasses();, +			Class<?> initializerContextClass =, +					GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class);, +			if (initializerContextClass != null && !initializerContextClass.isInstance(context)) {, +				throw new ApplicationContextException(String.format(, +						"Could not apply context initializer [%s] since its generic parameter [%s] " +, +						"is not assignable from the type of application context used by this " +, +						"context loader: [%s]", initializerClass.getName(), initializerContextClass.getName(),, +			}, +, +		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ?, +				generateDefaultLocations(clazz) : modifyLocations(clazz, locations);, +				logger.debug(String.format("Did not detect default resource location for test class [%s]: " +, +						"%s does not exist", clazz.getName(), classPathResource));, +			logger.info(String.format("Could not detect default resource locations for test class [%s]: " +, +					"no resource found for suffixes %s.", clazz.getName(), ObjectUtils.nullSafeToString(suffixes)));, +	 * Get the suffixes to append to {@link ApplicationContext} resource locations, +	 * when detecting default locations., +	/**, +	 * Get the suffix to append to {@link ApplicationContext} resource locations, +	 * when detecting default locations., +	 * <p>Subclasses must provide an implementation of this method that returns, +	 * a single suffix. Alternatively subclasses may provide a  <em>no-op</em>, +	 * implementation of this method and override {@link #getResourceSuffixes()}, +	 * in order to provide multiple custom suffixes., +	 * @return the resource suffix; never {@code null} or empty, +	 * @since 2.5, +	 * @see #generateDefaultLocations(Class), +	 * @see #getResourceSuffixes(), +	 */, +	protected abstract String getResourceSuffix();, +, +++ b/spring-core/src/main/java/org/springframework/util/Assert.java, + * Copyright 2002-2016 the original author or authors., +			throw new IllegalArgumentException((StringUtils.hasLength(message) ? message + " " : "") +, +					subType + " is not assignable to " + superType);, +++ b/spring-test/src/main/java/org/springframework/test/context/support/AbstractContextLoader.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.context.ApplicationContextException;, +		String[] processedLocations =, +				processLocations(configAttributes.getDeclaringClass(), configAttributes.getLocations());, +, +		Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses =, +				mergedConfig.getContextInitializerClasses();, +			Class<?> initializerContextClass =, +					GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class);, +			if (initializerContextClass != null && !initializerContextClass.isInstance(context)) {, +				throw new ApplicationContextException(String.format(, +						"Could not apply context initializer [%s] since its generic parameter [%s] " +, +						"is not assignable from the type of application context used by this " +, +						"context loader: [%s]", initializerClass.getName(), initializerContextClass.getName(),, +			}, +, +		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ?, +				generateDefaultLocations(clazz) : modifyLocations(clazz, locations);, +				logger.debug(String.format("Did not detect default resource location for test class [%s]: " +, +						"%s does not exist", clazz.getName(), classPathResource));, +			logger.info(String.format("Could not detect default resource locations for test class [%s]: " +, +					"no resource found for suffixes %s.", clazz.getName(), ObjectUtils.nullSafeToString(suffixes)));, +	 * Get the suffixes to append to {@link ApplicationContext} resource locations, +	 * when detecting default locations., +	/**, +	 * Get the suffix to append to {@link ApplicationContext} resource locations, +	 * when detecting default locations., +	 * <p>Subclasses must provide an implementation of this method that returns, +	 * a single suffix. Alternatively subclasses may provide a  <em>no-op</em>, +	 * implementation of this method and override {@link #getResourceSuffixes()}, +	 * in order to provide multiple custom suffixes., +	 * @return the resource suffix; never {@code null} or empty, +	 * @since 2.5, +	 * @see #generateDefaultLocations(Class), +	 * @see #getResourceSuffixes(), +	 */, +	protected abstract String getResourceSuffix();, +, +++ b/spring-web/src/main/java/org/springframework/web/context/ContextLoader.java, + * Copyright 2002-2016 the original author or authors., + * <p>Looks for a {@link #CONTEXT_CLASS_PARAM "contextClass"} parameter at the, + * {@code web.xml} context-param level to specify the context class type, falling, + * back to {@link org.springframework.web.context.support.XmlWebApplicationContext}, + * specified needs to implement the {@link ConfigurableWebApplicationContext} interface., + * <p>Processes a {@link #CONFIG_LOCATION_PARAM "contextConfigLocation"} context-param, + * and passes its value to the context instance, parsing it into potentially multiple, + * file paths which can be separated by any number of commas and spaces, e.g., + * "WEB-INF/applicationContext1.xml, WEB-INF/applicationContext2.xml".]