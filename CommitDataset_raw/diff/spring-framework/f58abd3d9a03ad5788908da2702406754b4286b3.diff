[+++ b/spring-core/src/main/java/org/springframework/util/AlternativeJdkIdGenerator.java, + * An {@link IdGenerator} that uses {@link SecureRandom} for the initial seed and, + * {@link Random} thereafter, instead of calling {@link UUID#randomUUID()} every, + * time as {@link org.springframework.util.JdkIdGenerator JdkIdGenerator} does., + * This provides a better balance between securely random ids and performance., +++ b/spring-core/src/main/java/org/springframework/util/AlternativeJdkIdGenerator.java, + * An {@link IdGenerator} that uses {@link SecureRandom} for the initial seed and, + * {@link Random} thereafter, instead of calling {@link UUID#randomUUID()} every, + * time as {@link org.springframework.util.JdkIdGenerator JdkIdGenerator} does., + * This provides a better balance between securely random ids and performance., +++ b/spring-core/src/main/java/org/springframework/util/JdkIdGenerator.java, + * An {@link IdGenerator} that calls {@link java.util.UUID#randomUUID()}., + * @since 4.1.5, +++ b/spring-core/src/main/java/org/springframework/util/AlternativeJdkIdGenerator.java, + * An {@link IdGenerator} that uses {@link SecureRandom} for the initial seed and, + * {@link Random} thereafter, instead of calling {@link UUID#randomUUID()} every, + * time as {@link org.springframework.util.JdkIdGenerator JdkIdGenerator} does., + * This provides a better balance between securely random ids and performance., +++ b/spring-core/src/main/java/org/springframework/util/JdkIdGenerator.java, + * An {@link IdGenerator} that calls {@link java.util.UUID#randomUUID()}., + * @since 4.1.5, +++ b/spring-core/src/main/java/org/springframework/util/SimpleIdGenerator.java, + * A simple {@link IdGenerator} that starts at 1 and increments by 1 with each call., + * @since 4.1.5, +++ b/spring-core/src/main/java/org/springframework/util/AlternativeJdkIdGenerator.java, + * An {@link IdGenerator} that uses {@link SecureRandom} for the initial seed and, + * {@link Random} thereafter, instead of calling {@link UUID#randomUUID()} every, + * time as {@link org.springframework.util.JdkIdGenerator JdkIdGenerator} does., + * This provides a better balance between securely random ids and performance., +++ b/spring-core/src/main/java/org/springframework/util/JdkIdGenerator.java, + * An {@link IdGenerator} that calls {@link java.util.UUID#randomUUID()}., + * @since 4.1.5, +++ b/spring-core/src/main/java/org/springframework/util/SimpleIdGenerator.java, + * A simple {@link IdGenerator} that starts at 1 and increments by 1 with each call., + * @since 4.1.5, +++ b/spring-web/src/main/java/org/springframework/web/client/MessageBodyClientHttpResponseWrapper.java, + * Implementation of {@link ClientHttpResponse} that can not only check if, + * the response has a message body, but also if its length is 0 (i.e. empty), + * by actually reading the input stream., +	private final ClientHttpResponse response;, +, +, +			int b = this.pushbackInputStream.read();, +				this.pushbackInputStream.unread(b);, +	public HttpHeaders getHeaders() {, +		return this.response.getHeaders();, +		return (this.pushbackInputStream != null ? this.pushbackInputStream : this.response.getBody());, +	public HttpStatus getStatusCode() throws IOException {, +		return this.response.getStatusCode();, +, +	@Override, +	public int getRawStatusCode() throws IOException {, +		return this.response.getRawStatusCode();, +	}, +, +	@Override, +	public String getStatusText() throws IOException {, +		return this.response.getStatusText();, +	}, +, +	@Override, +	public void close() {, +		this.response.close();, +	}, +]