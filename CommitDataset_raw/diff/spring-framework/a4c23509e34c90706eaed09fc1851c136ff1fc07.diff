[+++ /dev/null, +++ /dev/null, +++ b/org.springframework.testsuite/src/test/java/org/springframework/beans/factory/access/SingletonBeanFactoryLocatorTests.java, +import static org.junit.Assert.assertTrue;, +import org.junit.Test;, + * @author Chris Beams, +public class SingletonBeanFactoryLocatorTests {, +	@Test, +	@Test, +++ /dev/null, +++ b/org.springframework.testsuite/src/test/java/org/springframework/beans/factory/access/SingletonBeanFactoryLocatorTests.java, +import static org.junit.Assert.assertTrue;, +import org.junit.Test;, + * @author Chris Beams, +public class SingletonBeanFactoryLocatorTests {, +	@Test, +	@Test, +++ b/org.springframework.testsuite/src/test/java/org/springframework/context/access/ContextSingletonBeanFactoryLocatorTests.java, +import static org.junit.Assert.*;, +, +import org.junit.Test;, + * @author Chris Beams, +	@Test, +	@Test, +	@Test, +++ /dev/null, +++ b/org.springframework.testsuite/src/test/java/org/springframework/beans/factory/access/SingletonBeanFactoryLocatorTests.java, +import static org.junit.Assert.assertTrue;, +import org.junit.Test;, + * @author Chris Beams, +public class SingletonBeanFactoryLocatorTests {, +	@Test, +	@Test, +++ b/org.springframework.testsuite/src/test/java/org/springframework/context/access/ContextSingletonBeanFactoryLocatorTests.java, +import static org.junit.Assert.*;, +, +import org.junit.Test;, + * @author Chris Beams, +	@Test, +	@Test, +	@Test, +++ b/org.springframework.testsuite/src/test/java/org/springframework/web/bind/ServletRequestDataBinderTests.java, +import static org.junit.Assert.*;, +, +import java.util.HashMap;, +import java.util.Map;, +import org.junit.Test;, +import org.springframework.beans.PropertyValue;, +import org.springframework.beans.PropertyValues;, + * @author Chris Beams, +public class ServletRequestDataBinderTests {, +	@Test, +	@Test, +	@Test, +	@Test, +	@Test, +	@Test, +	@Test, +	@Test, +	@Test, +	/**, +	 * Must contain: forname=Tony surname=Blair age=50, +	 */, +	protected void doTestTony(PropertyValues pvs) throws Exception {, +		assertTrue("Contains 3", pvs.getPropertyValues().length == 3);, +		assertTrue("Contains forname", pvs.contains("forname"));, +		assertTrue("Contains surname", pvs.contains("surname"));, +		assertTrue("Contains age", pvs.contains("age"));, +		assertTrue("Doesn't contain tory", !pvs.contains("tory"));, +, +		PropertyValue[] ps = pvs.getPropertyValues();, +		Map<String, String> m = new HashMap<String, String>();, +		m.put("forname", "Tony");, +		m.put("surname", "Blair");, +		m.put("age", "50");, +		for (int i = 0; i < ps.length; i++) {, +			Object val = m.get(ps[i].getName());, +			assertTrue("Can't have unexpected value", val != null);, +			assertTrue("Val i string", val instanceof String);, +			assertTrue("val matches expected", val.equals(ps[i].getValue()));, +			m.remove(ps[i].getName());, +		}, +		assertTrue("Map size is 0", m.size() == 0);, +	}, +]