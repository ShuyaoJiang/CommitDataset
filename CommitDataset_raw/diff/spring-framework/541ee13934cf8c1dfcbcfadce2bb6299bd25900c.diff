[+++ b/spring-test/src/main/java/org/springframework/test/web/client/MockRestServiceServer.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.http.client.BufferingClientHttpRequestFactory;, +		 * Use the {@link BufferingClientHttpRequestFactory} wrapper to buffer, +		 * the input and output streams, and for example, allow multiple reads, +		 * of the response body., +		 * @since 5.0.5, +		 */, +		MockRestServiceServerBuilder bufferContent();, +, +		/**, +		private boolean bufferContent;, +, +, +		public MockRestServiceServerBuilder bufferContent() {, +			this.bufferContent = true;, +			return this;, +		}, +, +		@Override, +				if (this.bufferContent) {, +					this.restTemplate.setRequestFactory(new BufferingClientHttpRequestFactory(factory));, +				}, +				else {, +			}, +++ b/spring-test/src/main/java/org/springframework/test/web/client/MockRestServiceServer.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.http.client.BufferingClientHttpRequestFactory;, +		 * Use the {@link BufferingClientHttpRequestFactory} wrapper to buffer, +		 * the input and output streams, and for example, allow multiple reads, +		 * of the response body., +		 * @since 5.0.5, +		 */, +		MockRestServiceServerBuilder bufferContent();, +, +		/**, +		private boolean bufferContent;, +, +, +		public MockRestServiceServerBuilder bufferContent() {, +			this.bufferContent = true;, +			return this;, +		}, +, +		@Override, +				if (this.bufferContent) {, +					this.restTemplate.setRequestFactory(new BufferingClientHttpRequestFactory(factory));, +				}, +				else {, +			}, +++ b/spring-test/src/test/java/org/springframework/test/web/client/samples/SampleTests.java, +import java.io.IOException;, +import java.util.Collections;, +, +import org.springframework.http.HttpRequest;, +import org.springframework.http.client.ClientHttpRequestExecution;, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +import org.springframework.http.client.ClientHttpResponse;, +import org.springframework.util.FileCopyUtils;, +import static org.junit.Assert.*;, +	public void performGet() {, +	public void performGetManyTimes() {, +	public void expectNever() {, +	public void expectNeverViolated() {, +	public void performGetWithResponseBodyFromFile() {, +, +	@Test // SPR-14694, +	public void repeatedAccessToResponseViaResource() {, +, +		Resource resource = new ClassPathResource("ludwig.json", this.getClass());, +, +		RestTemplate restTemplate = new RestTemplate();, +		restTemplate.setInterceptors(Collections.singletonList(new ContentInterceptor(resource)));, +, +		MockRestServiceServer mockServer = MockRestServiceServer.bindTo(restTemplate), +				.ignoreExpectOrder(true), +				.bufferContent()  // enable repeated reads of response body, +				.build();, +, +		mockServer.expect(requestTo("/composers/42")).andExpect(method(HttpMethod.GET)), +				.andRespond(withSuccess(resource, MediaType.APPLICATION_JSON));, +, +		restTemplate.getForObject("/composers/{id}", Person.class, 42);, +, +		mockServer.verify();, +	}, +, +, +	private static class ContentInterceptor implements ClientHttpRequestInterceptor {, +, +		private final Resource resource;, +, +, +		private ContentInterceptor(Resource resource) {, +			this.resource = resource;, +		}, +, +		@Override, +		public ClientHttpResponse intercept(HttpRequest request, byte[] body,, +				ClientHttpRequestExecution execution) throws IOException {]