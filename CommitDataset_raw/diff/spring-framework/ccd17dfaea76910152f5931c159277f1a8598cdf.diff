[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +		this.setDispatchOptionsRequest(true);, +		this.setDispatchOptionsRequest(true);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +		this.setDispatchOptionsRequest(true);, +		this.setDispatchOptionsRequest(true);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java, + * Copyright 2002-2016 the original author or authors., +	 * <p>Default in the {@code FrameworkServlet} is "false", applying, +	 * {@link javax.servlet.http.HttpServlet}'s default behavior (i.e.enumerating, +	 * all standard HTTP request methods as a response to the OPTIONS request)., +	 * Note however that as of 4.3 the {@code DispatcherServlet} sets this, +	 * property to "true" by default due to its built-in support for OPTIONS., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +		this.setDispatchOptionsRequest(true);, +		this.setDispatchOptionsRequest(true);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java, + * Copyright 2002-2016 the original author or authors., +	 * <p>Default in the {@code FrameworkServlet} is "false", applying, +	 * {@link javax.servlet.http.HttpServlet}'s default behavior (i.e.enumerating, +	 * all standard HTTP request methods as a response to the OPTIONS request)., +	 * Note however that as of 4.3 the {@code DispatcherServlet} sets this, +	 * property to "true" by default due to its built-in support for OPTIONS., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationMappingUtils.java, + * Copyright 2002-2016 the original author or authors., + * @author Rossen Stoyanchev, +		String inputMethod = request.getMethod();, +		if (ObjectUtils.isEmpty(methods) && !RequestMethod.OPTIONS.name().equals(inputMethod)) {, +			if (method.name().equals(inputMethod)) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +		this.setDispatchOptionsRequest(true);, +		this.setDispatchOptionsRequest(true);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java, + * Copyright 2002-2016 the original author or authors., +	 * <p>Default in the {@code FrameworkServlet} is "false", applying, +	 * {@link javax.servlet.http.HttpServlet}'s default behavior (i.e.enumerating, +	 * all standard HTTP request methods as a response to the OPTIONS request)., +	 * Note however that as of 4.3 the {@code DispatcherServlet} sets this, +	 * property to "true" by default due to its built-in support for OPTIONS., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationMappingUtils.java, + * Copyright 2002-2016 the original author or authors., + * @author Rossen Stoyanchev, +		String inputMethod = request.getMethod();, +		if (ObjectUtils.isEmpty(methods) && !RequestMethod.OPTIONS.name().equals(inputMethod)) {, +			if (method.name().equals(inputMethod)) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/RequestMethodsRequestCondition.java, +		if (requestMethod == null) {, +			return null;, +		}, +		if (this.methods.isEmpty()) {, +			return (RequestMethod.OPTIONS.equals(requestMethod) ? null : this);, +		}, +		if (RequestMethod.HEAD.equals(requestMethod) && getMethods().contains(RequestMethod.GET)) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +		this.setDispatchOptionsRequest(true);, +		this.setDispatchOptionsRequest(true);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java, + * Copyright 2002-2016 the original author or authors., +	 * <p>Default in the {@code FrameworkServlet} is "false", applying, +	 * {@link javax.servlet.http.HttpServlet}'s default behavior (i.e.enumerating, +	 * all standard HTTP request methods as a response to the OPTIONS request)., +	 * Note however that as of 4.3 the {@code DispatcherServlet} sets this, +	 * property to "true" by default due to its built-in support for OPTIONS., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationMappingUtils.java, + * Copyright 2002-2016 the original author or authors., + * @author Rossen Stoyanchev, +		String inputMethod = request.getMethod();, +		if (ObjectUtils.isEmpty(methods) && !RequestMethod.OPTIONS.name().equals(inputMethod)) {, +			if (method.name().equals(inputMethod)) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/RequestMethodsRequestCondition.java, +		if (requestMethod == null) {, +			return null;, +		}, +		if (this.methods.isEmpty()) {, +			return (RequestMethod.OPTIONS.equals(requestMethod) ? null : this);, +		}, +		if (RequestMethod.HEAD.equals(requestMethod) && getMethods().contains(RequestMethod.GET)) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMapping.java, + * Copyright 2002-2016 the original author or authors., +import java.lang.reflect.Method;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpMethod;, +	private static final Method HTTP_OPTIONS_HANDLE_METHOD;, +, +	static {, +		try {, +			HTTP_OPTIONS_HANDLE_METHOD = HttpOptionsHandler.class.getMethod("handle");, +		}, +		catch (NoSuchMethodException ex) {, +			// Should never happen, +			throw new IllegalStateException("No handler for HTTP OPTIONS", ex);, +		}, +	}, +, +, +		else if (patternAndMethodMatches.isEmpty()) {, +			if (HttpMethod.OPTIONS.matches(request.getMethod())) {, +				HttpOptionsHandler handler = new HttpOptionsHandler(allowedMethods);, +				return new HandlerMethod(handler, HTTP_OPTIONS_HANDLE_METHOD);, +			}]