[+++ b/build.gradle, +		maven { url "http://repo.spring.io/snapshot" }  // temporarily until Reactor 1.1.0.M4, +		optional("org.projectreactor:reactor-core:1.1.0.BUILD-SNAPSHOT"), +		optional("org.projectreactor:reactor-net:1.1.0.BUILD-SNAPSHOT"), +		testCompile("org.projectreactor:reactor-core:1.1.0.BUILD-SNAPSHOT"), +		testCompile("org.projectreactor:reactor-net:1.1.0.BUILD-SNAPSHOT"), +++ b/build.gradle, +		maven { url "http://repo.spring.io/snapshot" }  // temporarily until Reactor 1.1.0.M4, +		optional("org.projectreactor:reactor-core:1.1.0.BUILD-SNAPSHOT"), +		optional("org.projectreactor:reactor-net:1.1.0.BUILD-SNAPSHOT"), +		testCompile("org.projectreactor:reactor-core:1.1.0.BUILD-SNAPSHOT"), +		testCompile("org.projectreactor:reactor-net:1.1.0.BUILD-SNAPSHOT"), +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompCodec.java, +import reactor.io.encoding.Codec;, +++ b/build.gradle, +		maven { url "http://repo.spring.io/snapshot" }  // temporarily until Reactor 1.1.0.M4, +		optional("org.projectreactor:reactor-core:1.1.0.BUILD-SNAPSHOT"), +		optional("org.projectreactor:reactor-net:1.1.0.BUILD-SNAPSHOT"), +		testCompile("org.projectreactor:reactor-core:1.1.0.BUILD-SNAPSHOT"), +		testCompile("org.projectreactor:reactor-net:1.1.0.BUILD-SNAPSHOT"), +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompCodec.java, +import reactor.io.encoding.Codec;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/TcpOperations.java, +	ListenableFuture<Boolean> shutdown();, +++ b/build.gradle, +		maven { url "http://repo.spring.io/snapshot" }  // temporarily until Reactor 1.1.0.M4, +		optional("org.projectreactor:reactor-core:1.1.0.BUILD-SNAPSHOT"), +		optional("org.projectreactor:reactor-net:1.1.0.BUILD-SNAPSHOT"), +		testCompile("org.projectreactor:reactor-core:1.1.0.BUILD-SNAPSHOT"), +		testCompile("org.projectreactor:reactor-net:1.1.0.BUILD-SNAPSHOT"), +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompCodec.java, +import reactor.io.encoding.Codec;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/TcpOperations.java, +	ListenableFuture<Boolean> shutdown();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorTcpClient.java, +import reactor.function.Function;, +import reactor.io.encoding.Codec;, +import reactor.net.NetChannel;, +import reactor.net.Reconnect;, +import reactor.net.netty.tcp.NettyTcpClient;, +import reactor.net.tcp.TcpClient;, +import reactor.net.tcp.spec.TcpClientSpec;, +	 * A constructor that creates a {@link reactor.net.netty.tcp.NettyTcpClient} with, +	 * {@link reactor.net.tcp.TcpClient}., +	 * A constructor with a pre-configured {@link reactor.net.tcp.TcpClient}., +		Promise<NetChannel<Message<P>, Message<P>>> promise = this.tcpClient.open();, +		return new AbstractPromiseToListenableFutureAdapter<NetChannel<Message<P>, Message<P>>, Void>(promise) {, +			protected Void adapt(NetChannel<Message<P>, Message<P>> result) {, +		Reconnect reconnect = new Reconnect() {, +		};, +, +		Stream<NetChannel<Message<P>, Message<P>>> stream = this.tcpClient.open(reconnect);, +		Promise<Void> promise = Promises.next(stream).map(, +				new Function<NetChannel<Message<P>, Message<P>>, Void>() {, +					@Override, +					public Void apply(NetChannel<Message<P>, Message<P>> ch) {, +						return null;, +					}, +				});, +		return new PassThroughPromiseToListenableFutureAdapter<Void>(promise);, +	private void composeConnectionHandling(Composable<NetChannel<Message<P>, Message<P>>> composable,, +		composable, +				.when(Throwable.class, new Consumer<Throwable>() {, +				}), +				.consume(new Consumer<NetChannel<Message<P>, Message<P>>>() {, +					public void accept(NetChannel<Message<P>, Message<P>> connection) {, +						connection, +								.when(Throwable.class, new Consumer<Throwable>() {, +									public void accept(Throwable t) {, +										logger.error("Exception on connection " + connectionHandler, t);, +								}), +								.consume(new Consumer<Message<P>>() {, +								}), +								.on(), +								.close(new Runnable() {, +									public void run() {, +										connectionHandler.afterConnectionClosed();, +	public ListenableFuture<Boolean> shutdown() {, +			Promise<Boolean> promise = this.tcpClient.close();, +			return new AbstractPromiseToListenableFutureAdapter<Boolean, Boolean>(promise) {, +				protected Boolean adapt(Boolean result) {, +++ b/build.gradle, +		maven { url "http://repo.spring.io/snapshot" }  // temporarily until Reactor 1.1.0.M4, +		optional("org.projectreactor:reactor-core:1.1.0.BUILD-SNAPSHOT"), +		optional("org.projectreactor:reactor-net:1.1.0.BUILD-SNAPSHOT"), +		testCompile("org.projectreactor:reactor-core:1.1.0.BUILD-SNAPSHOT"), +		testCompile("org.projectreactor:reactor-net:1.1.0.BUILD-SNAPSHOT"), +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompCodec.java, +import reactor.io.encoding.Codec;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/TcpOperations.java, +	ListenableFuture<Boolean> shutdown();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorTcpClient.java, +import reactor.function.Function;, +import reactor.io.encoding.Codec;, +import reactor.net.NetChannel;, +import reactor.net.Reconnect;, +import reactor.net.netty.tcp.NettyTcpClient;, +import reactor.net.tcp.TcpClient;, +import reactor.net.tcp.spec.TcpClientSpec;, +	 * A constructor that creates a {@link reactor.net.netty.tcp.NettyTcpClient} with]