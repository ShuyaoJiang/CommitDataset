[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java, +				for (Map.Entry<String, MultiValueMap<String, String>> entry : this.updateCache.entrySet()) {, +					String cachedDestination = entry.getKey();, +						MultiValueMap<String, String> subs = entry.getValue();, +				Set<String> destinationsToRemove = new HashSet<String>();, +				for (Map.Entry<String, MultiValueMap<String, String>> entry : this.updateCache.entrySet()) {, +					String cachedDestination = entry.getKey();, +						MultiValueMap<String, String> subs = entry.getValue();, +							destinationsToRemove.add(cachedDestination);, +				for (String d : destinationsToRemove) {, +					this.updateCache.remove(d);, +					this.accessCache.remove(d);, +				}, +					Set<String> destinationsToRemove = new HashSet<String>();, +					for (Map.Entry<String, MultiValueMap<String, String>> entry : this.updateCache.entrySet()) {, +						String cachedDestination = entry.getKey();, +							MultiValueMap<String, String> subs = entry.getValue();, +								destinationsToRemove.add(cachedDestination);, +					for (String d : destinationsToRemove) {, +						this.updateCache.remove(d);, +						this.accessCache.remove(d);, +					}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java, +				for (Map.Entry<String, MultiValueMap<String, String>> entry : this.updateCache.entrySet()) {, +					String cachedDestination = entry.getKey();, +						MultiValueMap<String, String> subs = entry.getValue();, +				Set<String> destinationsToRemove = new HashSet<String>();, +				for (Map.Entry<String, MultiValueMap<String, String>> entry : this.updateCache.entrySet()) {, +					String cachedDestination = entry.getKey();, +						MultiValueMap<String, String> subs = entry.getValue();, +							destinationsToRemove.add(cachedDestination);, +				for (String d : destinationsToRemove) {, +					this.updateCache.remove(d);, +					this.accessCache.remove(d);, +				}, +					Set<String> destinationsToRemove = new HashSet<String>();, +					for (Map.Entry<String, MultiValueMap<String, String>> entry : this.updateCache.entrySet()) {, +						String cachedDestination = entry.getKey();, +							MultiValueMap<String, String> subs = entry.getValue();, +								destinationsToRemove.add(cachedDestination);, +					for (String d : destinationsToRemove) {, +						this.updateCache.remove(d);, +						this.accessCache.remove(d);, +					}, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistryTests.java, +	// SPR-11755, +, +	@Test, +	public void registerAndUnregisterMultipleDestinations() {, +, +		String sess1 = "sess01";, +		String sess2 = "sess02";, +, +		String subs1 = "subs01";, +		String subs2 = "subs02";, +		String subs3 = "subs03";, +		String subs4 = "subs04";, +		String subs5 = "subs05";, +, +		this.registry.registerSubscription(subscribeMessage(sess1, subs1, "/topic/PRICE.STOCK.NASDAQ.IBM"));, +		this.registry.registerSubscription(subscribeMessage(sess1, subs2, "/topic/PRICE.STOCK.NYSE.IBM"));, +		this.registry.registerSubscription(subscribeMessage(sess1, subs3, "/topic/PRICE.STOCK.NASDAQ.GOOG"));, +, +		this.registry.findSubscriptions(message("/topic/PRICE.STOCK.NYSE.IBM"));, +		this.registry.findSubscriptions(message("/topic/PRICE.STOCK.NASDAQ.GOOG"));, +		this.registry.findSubscriptions(message("/topic/PRICE.STOCK.NASDAQ.IBM"));, +, +		this.registry.unregisterSubscription(unsubscribeMessage(sess1, subs1));, +		this.registry.unregisterSubscription(unsubscribeMessage(sess1, subs2));, +		this.registry.unregisterSubscription(unsubscribeMessage(sess1, subs3));, +, +		this.registry.registerSubscription(subscribeMessage(sess1, subs1, "/topic/PRICE.STOCK.NASDAQ.IBM"));, +		this.registry.registerSubscription(subscribeMessage(sess1, subs2, "/topic/PRICE.STOCK.NYSE.IBM"));, +		this.registry.registerSubscription(subscribeMessage(sess1, subs3, "/topic/PRICE.STOCK.NASDAQ.GOOG"));, +		this.registry.registerSubscription(subscribeMessage(sess1, subs4, "/topic/PRICE.STOCK.NYSE.IBM"));, +		this.registry.registerSubscription(subscribeMessage(sess2, subs5, "/topic/PRICE.STOCK.NASDAQ.GOOG"));, +		this.registry.unregisterAllSubscriptions(sess1);, +		this.registry.unregisterAllSubscriptions(sess2);, +	}, +]