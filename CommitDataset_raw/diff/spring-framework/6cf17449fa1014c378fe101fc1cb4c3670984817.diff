[+++ b/spring-websocket/src/main/java/org/springframework/websocket/client/AbstractEndpointConnectionManager.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.websocket.client;, +, +import java.io.IOException;, +import java.net.URI;, +, +import javax.websocket.ContainerProvider;, +import javax.websocket.DeploymentException;, +import javax.websocket.Session;, +import javax.websocket.WebSocketContainer;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.beans.BeansException;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.ApplicationContextAware;, +import org.springframework.context.SmartLifecycle;, +import org.springframework.core.task.SimpleAsyncTaskExecutor;, +import org.springframework.core.task.TaskExecutor;, +import org.springframework.util.Assert;, +import org.springframework.web.util.UriComponentsBuilder;, +, +, +/**, + *, + * @author Rossen Stoyanchev, + * @since 4.0, + */, +public abstract class AbstractEndpointConnectionManager implements ApplicationContextAware, SmartLifecycle {, +, +	protected final Log logger = LogFactory.getLog(getClass());, +, +	private final Class<?> endpointClass;, +, +	private final Object endpointBean;, +, +	private final URI uri;, +, +	private boolean autoStartup = false;, +, +	private int phase = Integer.MAX_VALUE;, +, +	private final WebSocketContainer webSocketContainer = ContainerProvider.getWebSocketContainer();, +, +	private Session session;, +, +	private ApplicationContext applicationContext;, +, +	private TaskExecutor taskExecutor = new SimpleAsyncTaskExecutor("EndpointConnectionManager-");, +, +	private final Object lifecycleMonitor = new Object();, +, +, +	public AbstractEndpointConnectionManager(Class<?> endpointClass, String uriTemplate, Object... uriVariables) {, +		Assert.notNull(endpointClass, "endpointClass is required");, +		this.endpointClass = endpointClass;, +		this.endpointBean = null;, +		this.uri = initUri(uriTemplate, uriVariables);, +	}, +, +	public AbstractEndpointConnectionManager(Object endpointBean, String uriTemplate, Object... uriVariables) {, +		Assert.notNull(endpointBean, "endpointBean is required");, +		this.endpointClass = null;, +		this.endpointBean = endpointBean;, +		this.uri = initUri(uriTemplate, uriVariables);, +	}, +, +	private static URI initUri(String uri, Object... uriVariables) {, +		return UriComponentsBuilder.fromUriString(uri).buildAndExpand(uriVariables).encode().toUri();, +	}, +, +	public void setAsyncSendTimeout(long timeoutInMillis) {, +		this.webSocketContainer.setAsyncSendTimeout(timeoutInMillis);, +	}, +, +	public void setMaxSessionIdleTimeout(long timeoutInMillis) {, +		this.webSocketContainer.setDefaultMaxSessionIdleTimeout(timeoutInMillis);, +	}, +, +	public void setMaxTextMessageBufferSize(int bufferSize) {, +		this.webSocketContainer.setDefaultMaxTextMessageBufferSize(bufferSize);, +	}, +, +	public void setMaxBinaryMessageBufferSize(Integer bufferSize) {]