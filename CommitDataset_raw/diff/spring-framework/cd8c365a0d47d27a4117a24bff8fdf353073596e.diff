[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java, +		adapter.setMessageCodecConfigurer(getMessageCodecsConfigurer());, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java, +		adapter.setMessageCodecConfigurer(getMessageCodecsConfigurer());, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolver.java, +import org.springframework.http.codec.ServerCodecConfigurer;, +	ControllerMethodResolver(ArgumentResolverConfigurer argumentResolvers,, +			ServerCodecConfigurer messageCodecs, ReactiveAdapterRegistry reactiveRegistry,, +			ConfigurableApplicationContext context) {, +		Assert.notNull(argumentResolvers, "ArgumentResolverConfigurer is required");, +		Assert.notNull(messageCodecs, "ServerCodecConfigurer is required");, +		Assert.notNull(context, "ApplicationContext is required");, +		registrar= ArgumentResolverRegistrar.configurer(argumentResolvers).basic();, +		addResolversTo(registrar, reactiveRegistry, context);, +		registrar = ArgumentResolverRegistrar.configurer(argumentResolvers).modelAttributeSupport();, +		addResolversTo(registrar, reactiveRegistry, context);, +		registrar = ArgumentResolverRegistrar.configurer(argumentResolvers).fullSupport(messageCodecs);, +		addResolversTo(registrar, reactiveRegistry, context);, +		registrar = ArgumentResolverRegistrar.configurer(argumentResolvers).basic();, +		addResolversTo(registrar, reactiveRegistry, context);, +		initControllerAdviceCaches(context);, +		private ArgumentResolverRegistrar(ArgumentResolverConfigurer resolvers,, +				ServerCodecConfigurer codecs, boolean modelAttribute) {, +			this.customResolvers = resolvers.getCustomResolvers();, +			this.messageReaders = codecs != null ? codecs.getReaders() : null;, +			private final ArgumentResolverConfigurer resolvers;, +				this.resolvers = configurer;, +			public ArgumentResolverRegistrar fullSupport(ServerCodecConfigurer codecs) {, +				return new ArgumentResolverRegistrar(this.resolvers, codecs, true);, +				return new ArgumentResolverRegistrar(this.resolvers, null, true);, +				return new ArgumentResolverRegistrar(this.resolvers, null, false);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java, +		adapter.setMessageCodecConfigurer(getMessageCodecsConfigurer());, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolver.java, +import org.springframework.http.codec.ServerCodecConfigurer;, +	ControllerMethodResolver(ArgumentResolverConfigurer argumentResolvers,, +			ServerCodecConfigurer messageCodecs, ReactiveAdapterRegistry reactiveRegistry,, +			ConfigurableApplicationContext context) {, +		Assert.notNull(argumentResolvers, "ArgumentResolverConfigurer is required");, +		Assert.notNull(messageCodecs, "ServerCodecConfigurer is required");, +		Assert.notNull(context, "ApplicationContext is required");, +		registrar= ArgumentResolverRegistrar.configurer(argumentResolvers).basic();, +		addResolversTo(registrar, reactiveRegistry, context);, +		registrar = ArgumentResolverRegistrar.configurer(argumentResolvers).modelAttributeSupport();, +		addResolversTo(registrar, reactiveRegistry, context);, +		registrar = ArgumentResolverRegistrar.configurer(argumentResolvers).fullSupport(messageCodecs);, +		addResolversTo(registrar, reactiveRegistry, context);, +		registrar = ArgumentResolverRegistrar.configurer(argumentResolvers).basic();, +		addResolversTo(registrar, reactiveRegistry, context);, +		initControllerAdviceCaches(context);, +		private ArgumentResolverRegistrar(ArgumentResolverConfigurer resolvers,, +				ServerCodecConfigurer codecs, boolean modelAttribute) {, +			this.customResolvers = resolvers.getCustomResolvers();, +			this.messageReaders = codecs != null ? codecs.getReaders() : null;, +			private final ArgumentResolverConfigurer resolvers;, +				this.resolvers = configurer;, +			public ArgumentResolverRegistrar fullSupport(ServerCodecConfigurer codecs) {, +				return new ArgumentResolverRegistrar(this.resolvers, codecs, true);, +				return new ArgumentResolverRegistrar(this.resolvers, null, true);, +				return new ArgumentResolverRegistrar(this.resolvers, null, false);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java, +	private ServerCodecConfigurer messageCodecConfigurer;, +	 * <p>By default this is set to {@link ServerCodecConfigurer} with defaults., +	public void setMessageCodecConfigurer(ServerCodecConfigurer configurer) {, +		this.messageCodecConfigurer = configurer;, +	 * Return the configurer for HTTP message readers., +	public ServerCodecConfigurer getMessageCodecConfigurer() {, +		return this.messageCodecConfigurer;, +		if (this.messageCodecConfigurer == null) {, +			this.messageCodecConfigurer = new ServerCodecConfigurer();, +		}, +, +				this.messageCodecConfigurer, this.reactiveAdapterRegistry, this.applicationContext);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java, +		adapter.setMessageCodecConfigurer(getMessageCodecsConfigurer());, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolver.java, +import org.springframework.http.codec.ServerCodecConfigurer;, +	ControllerMethodResolver(ArgumentResolverConfigurer argumentResolvers,, +			ServerCodecConfigurer messageCodecs, ReactiveAdapterRegistry reactiveRegistry,, +			ConfigurableApplicationContext context) {, +		Assert.notNull(argumentResolvers, "ArgumentResolverConfigurer is required");, +		Assert.notNull(messageCodecs, "ServerCodecConfigurer is required");, +		Assert.notNull(context, "ApplicationContext is required");, +		registrar= ArgumentResolverRegistrar.configurer(argumentResolvers).basic();, +		addResolversTo(registrar, reactiveRegistry, context);, +		registrar = ArgumentResolverRegistrar.configurer(argumentResolvers).modelAttributeSupport();, +		addResolversTo(registrar, reactiveRegistry, context);, +		registrar = ArgumentResolverRegistrar.configurer(argumentResolvers).fullSupport(messageCodecs);, +		addResolversTo(registrar, reactiveRegistry, context);, +		registrar = ArgumentResolverRegistrar.configurer(argumentResolvers).basic();, +		addResolversTo(registrar, reactiveRegistry, context);, +		initControllerAdviceCaches(context);, +		private ArgumentResolverRegistrar(ArgumentResolverConfigurer resolvers,, +				ServerCodecConfigurer codecs, boolean modelAttribute) {, +			this.customResolvers = resolvers.getCustomResolvers();, +			this.messageReaders = codecs != null ? codecs.getReaders() : null;, +			private final ArgumentResolverConfigurer resolvers;, +				this.resolvers = configurer;, +			public ArgumentResolverRegistrar fullSupport(ServerCodecConfigurer codecs) {, +				return new ArgumentResolverRegistrar(this.resolvers, codecs, true);]