[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +import org.springframework.aop.AopInvocationException;, + * @author Dave Syer, +	 * Process a return value. Wraps a return of {@code this} if necessary to be the, +	 * {@code proxy} and also verifies that {@code null} is not returned as a primitive., +	private static Object processReturnType(Object proxy, Object target, Method method, Object retVal) {, +		Class<?> returnType = method.getReturnType();, +		if (retVal == null && returnType != Void.TYPE && returnType.isPrimitive()) {, +				throw new AopInvocationException("Null return value from advice does not match primitive return type for: " + method);, +		}, +			return processReturnType(proxy, this.target, method, retVal);, +				return processReturnType(proxy, this.target, method, retVal);, +				return processReturnType(proxy, target, method, retVal);, +				return processReturnType(proxy, target, method, retVal);, +			retVal = processReturnType(proxy, this.target, method, retVal);, +				retVal = processReturnType(proxy, target, method, retVal);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +import org.springframework.aop.AopInvocationException;, + * @author Dave Syer, +	 * Process a return value. Wraps a return of {@code this} if necessary to be the, +	 * {@code proxy} and also verifies that {@code null} is not returned as a primitive., +	private static Object processReturnType(Object proxy, Object target, Method method, Object retVal) {, +		Class<?> returnType = method.getReturnType();, +		if (retVal == null && returnType != Void.TYPE && returnType.isPrimitive()) {, +				throw new AopInvocationException("Null return value from advice does not match primitive return type for: " + method);, +		}, +			return processReturnType(proxy, this.target, method, retVal);, +				return processReturnType(proxy, this.target, method, retVal);, +				return processReturnType(proxy, target, method, retVal);, +				return processReturnType(proxy, target, method, retVal);, +			retVal = processReturnType(proxy, this.target, method, retVal);, +				retVal = processReturnType(proxy, target, method, retVal);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/JdkDynamicAopProxy.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.aop.AopInvocationException;, + * @author Dave Syer, +			Class<?> returnType = method.getReturnType();, +			if (retVal != null && retVal == target && returnType.isInstance(proxy) &&, +			} else if (retVal == null && returnType != Void.TYPE && returnType.isPrimitive()) {, +				throw new AopInvocationException("Null return value from advice does not match primitive return type for: " + method);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +import org.springframework.aop.AopInvocationException;, + * @author Dave Syer, +	 * Process a return value. Wraps a return of {@code this} if necessary to be the, +	 * {@code proxy} and also verifies that {@code null} is not returned as a primitive., +	private static Object processReturnType(Object proxy, Object target, Method method, Object retVal) {, +		Class<?> returnType = method.getReturnType();, +		if (retVal == null && returnType != Void.TYPE && returnType.isPrimitive()) {, +				throw new AopInvocationException("Null return value from advice does not match primitive return type for: " + method);, +		}, +			return processReturnType(proxy, this.target, method, retVal);, +				return processReturnType(proxy, this.target, method, retVal);, +				return processReturnType(proxy, target, method, retVal);, +				return processReturnType(proxy, target, method, retVal);, +			retVal = processReturnType(proxy, this.target, method, retVal);, +				retVal = processReturnType(proxy, target, method, retVal);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/JdkDynamicAopProxy.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.aop.AopInvocationException;, + * @author Dave Syer, +			Class<?> returnType = method.getReturnType();, +			if (retVal != null && retVal == target && returnType.isInstance(proxy) &&, +			} else if (retVal == null && returnType != Void.TYPE && returnType.isPrimitive()) {, +				throw new AopInvocationException("Null return value from advice does not match primitive return type for: " + method);, +++ b/spring-aop/src/test/java/org/springframework/aop/framework/NullPrimitiveTests.java, +/*, + * Copyright 2002-2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.aop.framework;, +, +import static org.junit.Assert.assertEquals;, +, +import org.aopalliance.intercept.MethodInterceptor;, +import org.aopalliance.intercept.MethodInvocation;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.rules.ExpectedException;, +import org.springframework.aop.AopInvocationException;, +, +/**, + * Test for SPR-4675. A null value returned from around advice is very hard to debug if, + * the caller expects a primitive., + *, + * @author Dave Syer, + */, +public class NullPrimitiveTests {, +]