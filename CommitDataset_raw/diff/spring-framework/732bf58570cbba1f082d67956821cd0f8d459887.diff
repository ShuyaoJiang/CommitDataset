[+++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/AnnotationCacheOperationSource.java, + * Implementation of the {@link org.springframework.cache.interceptor.CacheOperationSource, + * CacheOperationSource} interface for working with caching metadata in annotation format., + * <p>This class reads Spring's {@link Cacheable}, {@link CachePut} and {@link CacheEvict}, + * annotations and exposes corresponding caching operation definition to Spring's cache, + * infrastructure. This class may also serve as base class for a custom, + * {@code CacheOperationSource}., +	 * that carry the {@code Cacheable} and {@code CacheEvict} annotations., +	 * Create a default {@code AnnotationCacheOperationSource}, supporting public methods, +	 * that carry the {@code Cacheable} and {@code CacheEvict} annotations., +	 * Determine the cache operation(s) for the given method or class., +	 * {@link CacheAnnotationParser}s for parsing known annotations into, +	 * Spring's metadata attribute class., +	 * <p>Can be overridden to support custom annotations that carry, +	 * caching metadata., +	 * @return the configured caching operations, or {@code null} if none found, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/AnnotationCacheOperationSource.java, + * Implementation of the {@link org.springframework.cache.interceptor.CacheOperationSource, + * CacheOperationSource} interface for working with caching metadata in annotation format., + * <p>This class reads Spring's {@link Cacheable}, {@link CachePut} and {@link CacheEvict}, + * annotations and exposes corresponding caching operation definition to Spring's cache, + * infrastructure. This class may also serve as base class for a custom, + * {@code CacheOperationSource}., +	 * that carry the {@code Cacheable} and {@code CacheEvict} annotations., +	 * Create a default {@code AnnotationCacheOperationSource}, supporting public methods, +	 * that carry the {@code Cacheable} and {@code CacheEvict} annotations., +	 * Determine the cache operation(s) for the given method or class., +	 * {@link CacheAnnotationParser}s for parsing known annotations into, +	 * Spring's metadata attribute class., +	 * <p>Can be overridden to support custom annotations that carry, +	 * caching metadata., +	 * @return the configured caching operations, or {@code null} if none found, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/CacheAnnotationParser.java, + * {@link AnnotationCacheOperationSource} delegates to such, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/AnnotationCacheOperationSource.java, + * Implementation of the {@link org.springframework.cache.interceptor.CacheOperationSource, + * CacheOperationSource} interface for working with caching metadata in annotation format., + * <p>This class reads Spring's {@link Cacheable}, {@link CachePut} and {@link CacheEvict}, + * annotations and exposes corresponding caching operation definition to Spring's cache, + * infrastructure. This class may also serve as base class for a custom, + * {@code CacheOperationSource}., +	 * that carry the {@code Cacheable} and {@code CacheEvict} annotations., +	 * Create a default {@code AnnotationCacheOperationSource}, supporting public methods, +	 * that carry the {@code Cacheable} and {@code CacheEvict} annotations., +	 * Determine the cache operation(s) for the given method or class., +	 * {@link CacheAnnotationParser}s for parsing known annotations into, +	 * Spring's metadata attribute class., +	 * <p>Can be overridden to support custom annotations that carry, +	 * caching metadata., +	 * @return the configured caching operations, or {@code null} if none found, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/CacheAnnotationParser.java, + * {@link AnnotationCacheOperationSource} delegates to such, +++ /dev/null, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/AnnotationCacheOperationSource.java, + * Implementation of the {@link org.springframework.cache.interceptor.CacheOperationSource, + * CacheOperationSource} interface for working with caching metadata in annotation format., + * <p>This class reads Spring's {@link Cacheable}, {@link CachePut} and {@link CacheEvict}, + * annotations and exposes corresponding caching operation definition to Spring's cache, + * infrastructure. This class may also serve as base class for a custom, + * {@code CacheOperationSource}., +	 * that carry the {@code Cacheable} and {@code CacheEvict} annotations., +	 * Create a default {@code AnnotationCacheOperationSource}, supporting public methods, +	 * that carry the {@code Cacheable} and {@code CacheEvict} annotations., +	 * Determine the cache operation(s) for the given method or class., +	 * {@link CacheAnnotationParser}s for parsing known annotations into, +	 * Spring's metadata attribute class., +	 * <p>Can be overridden to support custom annotations that carry, +	 * caching metadata., +	 * @return the configured caching operations, or {@code null} if none found, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/CacheAnnotationParser.java, + * {@link AnnotationCacheOperationSource} delegates to such, +++ /dev/null, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/Caching.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.cache.annotation;, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Inherited;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +/**, + * Group annotation for multiple cache annotations (of different or the same type).]