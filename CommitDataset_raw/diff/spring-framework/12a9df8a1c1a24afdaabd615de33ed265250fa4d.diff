[+++ b/spring-jms/src/main/java/org/springframework/jms/messaging/JmsMessagingTemplate.java, +			return doConvert(message, targetClass);, +++ b/spring-jms/src/main/java/org/springframework/jms/messaging/JmsMessagingTemplate.java, +			return doConvert(message, targetClass);, +++ b/spring-jms/src/test/java/org/springframework/jms/messaging/JmsMessagingTemplateTests.java, +		thrown.expect(org.springframework.messaging.converter.MessageConversionException.class);, +++ b/spring-jms/src/main/java/org/springframework/jms/messaging/JmsMessagingTemplate.java, +			return doConvert(message, targetClass);, +++ b/spring-jms/src/test/java/org/springframework/jms/messaging/JmsMessagingTemplateTests.java, +		thrown.expect(org.springframework.messaging.converter.MessageConversionException.class);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/AbstractMessageReceivingTemplate.java, +import org.springframework.messaging.converter.MessageConversionException;, +import org.springframework.messaging.converter.MessageConverter;, +			return doConvert(message, targetClass);, +	@SuppressWarnings("unchecked"), +	protected <T> T doConvert(Message<?> message, Class<T> targetClass) {, +		MessageConverter messageConverter = getMessageConverter();, +		T value = (T) messageConverter.fromMessage(message, targetClass);, +		if (value == null) {, +			throw new MessageConversionException("Unable to convert payload='", +					+ message.getPayload() + "' to type='" + targetClass, +					+ "', converter=[" + messageConverter + "]");, +		}, +		return value;, +	}, +, +++ b/spring-jms/src/main/java/org/springframework/jms/messaging/JmsMessagingTemplate.java, +			return doConvert(message, targetClass);, +++ b/spring-jms/src/test/java/org/springframework/jms/messaging/JmsMessagingTemplateTests.java, +		thrown.expect(org.springframework.messaging.converter.MessageConversionException.class);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/AbstractMessageReceivingTemplate.java, +import org.springframework.messaging.converter.MessageConversionException;, +import org.springframework.messaging.converter.MessageConverter;, +			return doConvert(message, targetClass);, +	@SuppressWarnings("unchecked"), +	protected <T> T doConvert(Message<?> message, Class<T> targetClass) {, +		MessageConverter messageConverter = getMessageConverter();, +		T value = (T) messageConverter.fromMessage(message, targetClass);, +		if (value == null) {, +			throw new MessageConversionException("Unable to convert payload='", +					+ message.getPayload() + "' to type='" + targetClass, +					+ "', converter=[" + messageConverter + "]");, +		}, +		return value;, +	}, +, +++ b/spring-messaging/src/test/java/org/springframework/messaging/core/MessageReceivingTemplateTests.java, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +, +import org.springframework.core.convert.ConversionFailedException;, +import org.springframework.core.convert.support.DefaultConversionService;, +import org.springframework.messaging.converter.GenericMessageConverter;, +import org.springframework.messaging.converter.MessageConversionException;, +import static org.hamcrest.CoreMatchers.isA;, +import java.io.Writer;, +, +	@Rule, +	public final ExpectedException thrown = ExpectedException.none();, +, +	@Test, +	public void receiveAndConvertFailed() {, +		Message<?> expected = new GenericMessage<Object>("not a number test");, +		this.template.setReceiveMessage(expected);, +		this.template.setMessageConverter(new GenericMessageConverter(new DefaultConversionService()));, +, +		thrown.expect(MessageConversionException.class);, +		thrown.expectCause(isA(ConversionFailedException.class));, +		this.template.receiveAndConvert("somewhere", Integer.class);, +	}, +, +	@Test, +	public void receiveAndConvertNoConverter() {, +		Message<?> expected = new GenericMessage<Object>("payload");, +		this.template.setDefaultDestination("home");, +		this.template.setReceiveMessage(expected);, +		this.template.setMessageConverter(new GenericMessageConverter(new DefaultConversionService()));, +, +		thrown.expect(MessageConversionException.class);, +		thrown.expectMessage("payload");, +		this.template.receiveAndConvert(Writer.class);, +	}, +]