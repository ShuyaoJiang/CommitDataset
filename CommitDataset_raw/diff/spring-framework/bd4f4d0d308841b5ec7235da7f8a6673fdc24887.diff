[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/resources/ResourceHttpRequestHandler.java, +import java.util.ArrayList;, +import javax.servlet.ServletContext;, +import org.springframework.web.context.ServletContextAware;, +public class ResourceHttpRequestHandler implements HttpRequestHandler, ServletContextAware {, +	private static final String defaultMediaTypes = "image/*,text/css,text/javascript,text/html";, +	, +	private List<MediaType> allowedMediaTypes = new ArrayList<MediaType>();, +	, +	private FileMediaTypeMap fileMediaTypeMap;, +		this(resourcePaths, defaultMediaTypes);, +	}, +	, +	public ResourceHttpRequestHandler(List<Resource> resourcePaths, String allowedMediaTypes) {, +		this(resourcePaths, allowedMediaTypes, false);, +	}, +	, +	public ResourceHttpRequestHandler(List<Resource> resourcePaths, String allowedMediaTypes, boolean overrideDefaultMediaTypes) {, +		validateResourcePaths(resourcePaths);, +		if (StringUtils.hasText(allowedMediaTypes)) {, +			this.allowedMediaTypes.addAll(MediaType.parseMediaTypes(allowedMediaTypes));, +		}, +		if (!overrideDefaultMediaTypes) {, +			this.allowedMediaTypes.addAll(MediaType.parseMediaTypes(defaultMediaTypes));, +		}, +		MediaType.sortBySpecificity(this.allowedMediaTypes);, +		if (resource == null || !isResourceAllowed(resource)) {, +		if (checkNotModified(resource, request, response)) {, +			return;, +		}, +	public void setServletContext(ServletContext servletContext) {, +		this.fileMediaTypeMap = new DefaultFileMediaTypeMap(servletContext);, +	}, +	, +	private boolean checkNotModified(Resource resource,HttpServletRequest request, HttpServletResponse response) throws IOException {, +		long ifModifiedSince = request.getDateHeader("If-Modified-Since");					, +		boolean notModified = ifModifiedSince >= (resource.lastModified() / 1000 * 1000);, +		if (notModified) {, +			response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);, +		} else {, +			response.setDateHeader("Last-Modified", resource.lastModified());, +		}, +		return notModified;, +	}, +, +					return new URLResource(resource, fileMediaTypeMap.getMediaType(resource.getFilename()));, +		response.setContentType(resource.getMediaType().toString());, +	private boolean isResourceAllowed(URLResource resource) {, +		for(MediaType allowedType : allowedMediaTypes) {, +			if (allowedType.includes(resource.getMediaType())) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +	private void validateResourcePaths(List<Resource> resourcePaths) {, +		for (Resource path : resourcePaths) {, +			Assert.isTrue(path.exists(), path.getDescription() + " is not a valid resource location as it does not exist.");, +			Assert.isTrue(!StringUtils.hasText(path.getFilename()), path.getDescription()+" is not a valid resource location.  Resource paths must end with a '/'.");, +		}		, +	}, +		, +		private final ServletContext servletContext;, +		, +		public DefaultFileMediaTypeMap(ServletContext servletContext) {, +			this.servletContext = servletContext;, +		}, +, +			if (mediaType == null) {, +				String mimeType = servletContext.getMimeType(filename);, +				if (StringUtils.hasText(mimeType)) {, +					mediaType = MediaType.parseMediaType(mimeType);, +				}, +			}, +			if (mediaType == null && jafPresent) {, +		private final MediaType mediaType;, +		, +		public URLResource(Resource wrapped, MediaType mediaType) throws IOException {, +				this.mediaType = mediaType;, +		public MediaType getMediaType() {, +			return mediaType;, +		}, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/resources/ResourceHttpRequestHandler.java, +import java.util.ArrayList;, +import javax.servlet.ServletContext;, +import org.springframework.web.context.ServletContextAware;, +public class ResourceHttpRequestHandler implements HttpRequestHandler, ServletContextAware {, +	private static final String defaultMediaTypes = "image/*,text/css,text/javascript,text/html";, +	, +	private List<MediaType> allowedMediaTypes = new ArrayList<MediaType>();, +	, +	private FileMediaTypeMap fileMediaTypeMap;, +		this(resourcePaths, defaultMediaTypes);, +	}, +	, +	public ResourceHttpRequestHandler(List<Resource> resourcePaths, String allowedMediaTypes) {, +		this(resourcePaths, allowedMediaTypes, false);, +	}]