[+++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +	private static final Class<?> kotlinMetadata;, +		Class<?> metadata;, +			metadata = ClassUtils.forName("kotlin.Metadata", BeanUtils.class.getClassLoader());, +			metadata = null;, +		kotlinMetadata = metadata;, +			Constructor<T> ctor = (useKotlinSupport(clazz) ?, +			return (useKotlinSupport(ctor.getDeclaringClass()) ?, +		if (useKotlinSupport(clazz)) {, +	 * Return true if Kotlin is present and if the specified class is a Kotlin one., +	private static boolean useKotlinSupport(Class<?> clazz) {, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +	private static final Class<?> kotlinMetadata;, +		Class<?> metadata;, +			metadata = ClassUtils.forName("kotlin.Metadata", BeanUtils.class.getClassLoader());, +			metadata = null;, +		kotlinMetadata = metadata;, +			Constructor<T> ctor = (useKotlinSupport(clazz) ?, +			return (useKotlinSupport(ctor.getDeclaringClass()) ?, +		if (useKotlinSupport(clazz)) {, +	 * Return true if Kotlin is present and if the specified class is a Kotlin one., +	private static boolean useKotlinSupport(Class<?> clazz) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, +	@Nullable, +	private static final Class<?> kotlinMetadata;, +, +	static {, +		Class<?> metadata;, +		try {, +			metadata = ClassUtils.forName("kotlin.Metadata", DependencyDescriptor.class.getClassLoader());, +		}, +		catch (ClassNotFoundException ex) {, +			// Kotlin API not available - no Kotlin support, +			metadata = null;, +		}, +		kotlinMetadata = metadata;, +	}, +					(useKotlinSupport(this.field.getDeclaringClass()) && KotlinDelegate.isNullable(this.field)));, +	 * Return true if Kotlin is present and if the specified class is a Kotlin one., +	 */, +	@SuppressWarnings("unchecked"), +	private static boolean useKotlinSupport(Class<?> clazz) {, +		return (kotlinMetadata != null &&, +				clazz.getDeclaredAnnotation((Class<? extends Annotation>) kotlinMetadata) != null);, +	}, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +	private static final Class<?> kotlinMetadata;, +		Class<?> metadata;, +			metadata = ClassUtils.forName("kotlin.Metadata", BeanUtils.class.getClassLoader());, +			metadata = null;, +		kotlinMetadata = metadata;, +			Constructor<T> ctor = (useKotlinSupport(clazz) ?, +			return (useKotlinSupport(ctor.getDeclaringClass()) ?, +		if (useKotlinSupport(clazz)) {, +	 * Return true if Kotlin is present and if the specified class is a Kotlin one., +	private static boolean useKotlinSupport(Class<?> clazz) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, +	@Nullable, +	private static final Class<?> kotlinMetadata;, +, +	static {, +		Class<?> metadata;, +		try {, +			metadata = ClassUtils.forName("kotlin.Metadata", DependencyDescriptor.class.getClassLoader());, +		}, +		catch (ClassNotFoundException ex) {, +			// Kotlin API not available - no Kotlin support, +			metadata = null;, +		}, +		kotlinMetadata = metadata;, +	}, +					(useKotlinSupport(this.field.getDeclaringClass()) && KotlinDelegate.isNullable(this.field)));, +	 * Return true if Kotlin is present and if the specified class is a Kotlin one., +	 */, +	@SuppressWarnings("unchecked"), +	private static boolean useKotlinSupport(Class<?> clazz) {, +		return (kotlinMetadata != null &&, +				clazz.getDeclaredAnnotation((Class<? extends Annotation>) kotlinMetadata) != null);, +	}, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +	@Nullable, +	private static final Class<?> kotlinMetadata;, +, +	static {, +		Class<?> metadata;, +		try {, +			metadata = ClassUtils.forName("kotlin.Metadata", MethodParameter.class.getClassLoader());, +		}, +		catch (ClassNotFoundException ex) {, +			// Kotlin API not available - no Kotlin support, +			metadata = null;, +		}, +		kotlinMetadata = metadata;, +	}, +				(useKotlinSupport(this.getContainingClass()) && KotlinDelegate.isNullable(this)));, +	}]