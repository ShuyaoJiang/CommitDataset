[+++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/DefaultMappingTargetFactory.java, +	private static final DefaultMappingTargetFactory INSTANCE = new DefaultMappingTargetFactory();, +, +	private DefaultMappingTargetFactory() {, +, +	}, +, +	public static MappingTargetFactory getInstance() {, +		return INSTANCE;, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/DefaultMappingTargetFactory.java, +	private static final DefaultMappingTargetFactory INSTANCE = new DefaultMappingTargetFactory();, +, +	private DefaultMappingTargetFactory() {, +, +	}, +, +	public static MappingTargetFactory getInstance() {, +		return INSTANCE;, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/FieldToFieldMapping.java, +	private final Expression condition;, +	, +	public FieldToFieldMapping(Expression sourceField, Expression targetField, Converter<?, ?> converter, Expression condition) {, +		this.condition = condition;, +		if (!context.conditionHolds(this.condition)) {, +			return;, +		}, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/DefaultMappingTargetFactory.java, +	private static final DefaultMappingTargetFactory INSTANCE = new DefaultMappingTargetFactory();, +, +	private DefaultMappingTargetFactory() {, +, +	}, +, +	public static MappingTargetFactory getInstance() {, +		return INSTANCE;, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/FieldToFieldMapping.java, +	private final Expression condition;, +	, +	public FieldToFieldMapping(Expression sourceField, Expression targetField, Converter<?, ?> converter, Expression condition) {, +		this.condition = condition;, +		if (!context.conditionHolds(this.condition)) {, +			return;, +		}, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/FieldToMultiFieldMapping.java, +	private final Expression condition;, +, +	public FieldToMultiFieldMapping(Expression sourceField, Mapper<?, ?> targetFieldMapper, Expression condition) {, +		this.condition = condition;, +		if (!context.conditionHolds(this.condition)) {, +			return;, +		}		, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/DefaultMappingTargetFactory.java, +	private static final DefaultMappingTargetFactory INSTANCE = new DefaultMappingTargetFactory();, +, +	private DefaultMappingTargetFactory() {, +, +	}, +, +	public static MappingTargetFactory getInstance() {, +		return INSTANCE;, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/FieldToFieldMapping.java, +	private final Expression condition;, +	, +	public FieldToFieldMapping(Expression sourceField, Expression targetField, Converter<?, ?> converter, Expression condition) {, +		this.condition = condition;, +		if (!context.conditionHolds(this.condition)) {, +			return;, +		}, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/FieldToMultiFieldMapping.java, +	private final Expression condition;, +, +	public FieldToMultiFieldMapping(Expression sourceField, Mapper<?, ?> targetFieldMapper, Expression condition) {, +		this.condition = condition;, +		if (!context.conditionHolds(this.condition)) {, +			return;, +		}		, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/MapperBuilder.java, +	 * @param field the field mapping expression, +	 * @param field the field mapping expression, +	 * @param sourceField the source field mapping expression, +	 * @param targetField the target field mapping expression , +	 * @param sourceField the source field mapping expression, +	 * @param targetField the target field mapping expression , +	 * Register a conditional mapping between a source field and a target field., +	 * The source and target field names will be the same value., +	 * @param field the field mapping expression, +	 * @param condition the boolean expression that determines if this mapping executes, +	 * @return this, for configuring additional field mapping options fluently, +	 */, +	MapperBuilder<S, T> addConditionalMapping(String field, String condition);, +, +	/**]