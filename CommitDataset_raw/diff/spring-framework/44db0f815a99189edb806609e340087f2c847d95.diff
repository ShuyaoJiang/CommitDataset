[+++ b/spring-websocket/src/main/java/org/springframework/web/messaging/PubSubChannelRegistry.java, +, +	/**, +	 * A channel for messaging arriving from clients., +	 */, +	/**, +	 * A channel for sending direct messages to a client. The client must be have, +	 * previously subscribed to the destination of the message., +	 */, +	/**, +	 * A channel for broadcasting messages through a message broker., +	 */, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/PubSubChannelRegistry.java, +, +	/**, +	 * A channel for messaging arriving from clients., +	 */, +	/**, +	 * A channel for sending direct messages to a client. The client must be have, +	 * previously subscribed to the destination of the message., +	 */, +	/**, +	 * A channel for broadcasting messages through a message broker., +	 */, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/service/method/AnnotationPubSubMessageHandler.java, +import org.springframework.web.messaging.support.MessageHolder;, +			MessageHolder.setMessage(message);, +, +		finally {, +			MessageHolder.reset();, +		}, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/PubSubChannelRegistry.java, +, +	/**, +	 * A channel for messaging arriving from clients., +	 */, +	/**, +	 * A channel for sending direct messages to a client. The client must be have, +	 * previously subscribed to the destination of the message., +	 */, +	/**, +	 * A channel for broadcasting messages through a message broker., +	 */, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/service/method/AnnotationPubSubMessageHandler.java, +import org.springframework.web.messaging.support.MessageHolder;, +			MessageHolder.setMessage(message);, +, +		finally {, +			MessageHolder.reset();, +		}, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/service/method/MessageChannelArgumentResolver.java, +		return this.messageBrokerChannel;, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/PubSubChannelRegistry.java, +, +	/**, +	 * A channel for messaging arriving from clients., +	 */, +	/**, +	 * A channel for sending direct messages to a client. The client must be have, +	 * previously subscribed to the destination of the message., +	 */, +	/**, +	 * A channel for broadcasting messages through a message broker., +	 */, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/service/method/AnnotationPubSubMessageHandler.java, +import org.springframework.web.messaging.support.MessageHolder;, +			MessageHolder.setMessage(message);, +, +		finally {, +			MessageHolder.reset();, +		}, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/service/method/MessageChannelArgumentResolver.java, +		return this.messageBrokerChannel;, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/service/method/MessageReturnValueHandler.java, +import java.util.Map;, +, +		returnMessage = processReturnMessage(returnMessage, message);, +	protected M processReturnMessage(M returnMessage, M message) {, +		Assert.notNull(headers.getSubscriptionId(), "No subscription id: " + message);, +		returnHeaders.setSessionId(headers.getSessionId());, +		returnHeaders.setSubscriptionId(headers.getSubscriptionId());, +		return createMessage(returnMessage.getPayload(), returnHeaders.toHeaders());, +	private M createMessage(Object payload, Map<String, Object> headers) {, +		return (M) MessageBuilder.withPayload(payload).copyHeaders(headers).build();, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/PubSubChannelRegistry.java, +, +	/**, +	 * A channel for messaging arriving from clients., +	 */, +	/**, +	 * A channel for sending direct messages to a client. The client must be have, +	 * previously subscribed to the destination of the message., +	 */, +	/**, +	 * A channel for broadcasting messages through a message broker., +	 */, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/service/method/AnnotationPubSubMessageHandler.java, +import org.springframework.web.messaging.support.MessageHolder;, +			MessageHolder.setMessage(message);, +]