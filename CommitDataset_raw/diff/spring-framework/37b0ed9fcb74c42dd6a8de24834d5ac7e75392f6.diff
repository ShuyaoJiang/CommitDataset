[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/ReactorNettyTcpStompClient.java, +	@Override, +	public String toString() {, +		return "ReactorNettyTcpStompClient[" + this.tcpClient + "]";, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/ReactorNettyTcpStompClient.java, +	@Override, +	public String toString() {, +		return "ReactorNettyTcpStompClient[" + this.tcpClient + "]";, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +	/** STOMP recommended error of margin for receiving heartbeats */, +	 * Heartbeat starts once CONNECTED frame with heartbeat settings is received., +	 * If CONNECTED doesn't arrive within a minute, we'll close the connection., +			logger.info("Starting \"system\" session, " + toString());, +		return "StompBrokerRelay[" + getTcpClientInfo() + "]";, +	}, +, +	private String getTcpClientInfo() {, +		return this.tcpClient != null ? this.tcpClient.toString() : this.relayHost + ":" + this.relayPort;, +		public Void call() {, +			return (connectionHandlers.size() + " sessions, " + getTcpClientInfo() +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/ReactorNettyTcpStompClient.java, +	@Override, +	public String toString() {, +		return "ReactorNettyTcpStompClient[" + this.tcpClient + "]";, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +	/** STOMP recommended error of margin for receiving heartbeats */, +	 * Heartbeat starts once CONNECTED frame with heartbeat settings is received., +	 * If CONNECTED doesn't arrive within a minute, we'll close the connection., +			logger.info("Starting \"system\" session, " + toString());, +		return "StompBrokerRelay[" + getTcpClientInfo() + "]";, +	}, +, +	private String getTcpClientInfo() {, +		return this.tcpClient != null ? this.tcpClient.toString() : this.relayHost + ":" + this.relayPort;, +		public Void call() {, +			return (connectionHandlers.size() + " sessions, " + getTcpClientInfo() +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java, + * Copyright 2002-2018 the original author or authors., +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private static Log logger = LogFactory.getLog(ReactorNettyTcpClient.class);, +, +	@Override, +	public String toString() {, +		return "ReactorNettyTcpClient[" + this.tcpClient + "]";, +	}, +, +			if (logger.isDebugEnabled()) {, +				logger.debug("Connected to " + inbound.remoteAddress());, +			}, +		protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/ReactorNettyTcpStompClient.java, +	@Override, +	public String toString() {, +		return "ReactorNettyTcpStompClient[" + this.tcpClient + "]";, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +	/** STOMP recommended error of margin for receiving heartbeats */, +	 * Heartbeat starts once CONNECTED frame with heartbeat settings is received., +	 * If CONNECTED doesn't arrive within a minute, we'll close the connection., +			logger.info("Starting \"system\" session, " + toString());, +		return "StompBrokerRelay[" + getTcpClientInfo() + "]";, +	}, +, +	private String getTcpClientInfo() {, +		return this.tcpClient != null ? this.tcpClient.toString() : this.relayHost + ":" + this.relayPort;, +		public Void call() {, +			return (connectionHandlers.size() + " sessions, " + getTcpClientInfo() +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java, + * Copyright 2002-2018 the original author or authors., +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private static Log logger = LogFactory.getLog(ReactorNettyTcpClient.class);, +, +	@Override, +	public String toString() {, +		return "ReactorNettyTcpClient[" + this.tcpClient + "]";, +	}, +, +			if (logger.isDebugEnabled()) {, +				logger.debug("Connected to " + inbound.remoteAddress());, +			}, +		protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) {, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParserTests.java, +		List<Class<? extends MessageHandler>> subscriberTypes = Arrays.asList(, +				SimpAnnotationMethodMessageHandler.class, UserDestinationMessageHandler.class,, +				StompBrokerRelayMessageHandler.class);, +		subscriberTypes = Arrays.asList(StompBrokerRelayMessageHandler.class, UserDestinationMessageHandler.class);]