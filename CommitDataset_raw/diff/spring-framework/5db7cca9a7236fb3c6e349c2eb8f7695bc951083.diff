[+++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextConfiguration.java, +	 * <p>The default value is <code>true</code>. This means that an annotated, +	 * classes defined by annotated superclasses. Specifically, the resource, +	 * defined by annotated superclasses. Thus, subclasses have the option of, +	 * or configuration classes defined by superclasses., +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextConfiguration.java, +	 * <p>The default value is <code>true</code>. This means that an annotated, +	 * classes defined by annotated superclasses. Specifically, the resource, +	 * defined by annotated superclasses. Thus, subclasses have the option of, +	 * or configuration classes defined by superclasses., +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/AbstractContextLoader.java, +	 * <p>A plain path &mdash; for example, &quot;context.xml&quot; &mdash; will, +	 * be treated as a classpath resource that is relative to the package in which, +	 * as an absolute classpath location, for example:, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextConfiguration.java, +	 * <p>The default value is <code>true</code>. This means that an annotated, +	 * classes defined by annotated superclasses. Specifically, the resource, +	 * defined by annotated superclasses. Thus, subclasses have the option of, +	 * or configuration classes defined by superclasses., +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/AbstractContextLoader.java, +	 * <p>A plain path &mdash; for example, &quot;context.xml&quot; &mdash; will, +	 * be treated as a classpath resource that is relative to the package in which, +	 * as an absolute classpath location, for example:, +++ b/spring-framework-reference/src/testing.xml, +        configure their application context. Instead, configuration is, +        achieved merely by declaring the, +        <para>The following sections explain how to configure and manage an, +        <interfacename>ApplicationContext</interfacename> via XML, +        configuration files or <interfacename>@Configuration</interfacename>, +          <para>To load an <interfacename>ApplicationContext</interfacename>, +          for your tests from XML configuration files, annotate your test, +          class with <interfacename>@ContextConfiguration</interfacename> and, +          configure the <literal>locations</literal> attribute with an array, +          that contains the resource locations of XML configuration metadata., +          A plain path — for example <literal>"context.xml"</literal> — will, +          be treated as a classpath resource that is relative to the package, +          in which the test class is defined. A path starting with a slash is, +          treated as an absolute classpath location, for example, +          represents a resource URL (i.e., a path prefixed with, +          own custom <interfacename>ContextLoader</interfacename> or, +          <interfacename>SmartContextLoader</interfacename> for advanced use, +          cases.</para>, +<lineannotation>// ApplicationContext will be loaded from "/app-config.xml" and, +// "/test-config.xml" in the root of the classpath</lineannotation>, +<emphasis role="bold">@ContextConfiguration(locations={"/app-config.xml", "/test-config.xml"})</emphasis>, +<emphasis role="bold">@ContextConfiguration({"/app-config.xml", "/test-config.xml"})</emphasis>, +          <para>To load an <interfacename>ApplicationContext</interfacename>, +          for your tests from <interfacename>@Configuration</interfacename>, +          classes, annotate your test class with, +          <interfacename>ContextLoader</interfacename> or, +          <interfacename>SmartContextLoader</interfacename> for advanced use, +<lineannotation>// ApplicationContext will be loaded from AppConfig and TestConfig</lineannotation>, +<emphasis role="bold">@ContextConfiguration(classes={AppConfig.class, TestConfig.class})</emphasis>, +          value is <literal>true</literal>. This means that an annotated class, +          inherits the resource locations or configuration classes declared by, +          any annotated superclasses. Specifically, the resource locations or, +          configuration classes for an annotated test class are appended to, +          the list of resource locations or configuration classes declared by, +          annotated superclasses. Thus, subclasses have the option of, +          <emphasis>extending</emphasis> the list of resource locations or, +          configuration classes.</para>, +, +          <para>If <interfacename>@ContextConfiguration</interfacename>'s, +          <literal>inheritLocations</literal> attribute is set to, +          <literal>false</literal>, the resource locations or configuration, +          classes for the annotated class <emphasis>shadow</emphasis> and, +          effectively replace any resource locations or configuration classes, +          defined by superclasses.</para>, +, +          <para>In the following example that uses XML resource locations, the, +          <emphasis>"base-config.xml"</emphasis> <emphasis, +          role="bold">and</emphasis>, +          <emphasis>"extended-config.xml"</emphasis>, in that order. Beans, +          defined in <emphasis>"extended-config.xml"</emphasis> may therefore, +          <emphasis>override</emphasis> (i.e., replace) those defined in, +          <emphasis>"base-config.xml"</emphasis>.</para>, +<lineannotation>// ApplicationContext will be loaded from <literal>"/base-config.xml"</literal> in the root of the classpath</lineannotation>, +<emphasis role="bold">@ContextConfiguration("/base-config.xml")</emphasis>, +<lineannotation>// ApplicationContext will be loaded from <literal>"/base-config.xml"</literal> and <literal>"/extended-config.xml"</literal></lineannotation>, +<emphasis role="bold">@ContextConfiguration("/extended-config.xml")</emphasis>, +<lineannotation>// ApplicationContext will be loaded from BaseConfig</lineannotation>, +<lineannotation>// ApplicationContext will be loaded from BaseConfig and ExtendedConfig</lineannotation>, +          all tests run in a suite within an IDE or all tests run for the same, +          project with a build framework like Ant or Maven. Thus the setup, +          cost for loading an application context is incurred only once (per, +          <interfacename>@DirtiesContext</interfacename> (see the discussion, +          of <interfacename>@DirtiesContext</interfacename> in <xref, +          linkend="integration-testing-annotations-spring" />). This instructs, +          Spring to reload the configuration and rebuild the application, +          context before executing the next test. Note that support for the, +          <interfacename>@DirtiesContext</interfacename> annotation is enabled, +          via the <classname>DirtiesContextTestExecutionListener</classname>, +          which is enabled by default.</para>]