[+++ b/spring-test/src/main/java/org/springframework/test/context/support/AbstractContextLoader.java, +	 * @see TestPropertySourceUtils#addPropertiesFilesToEnvironment, +	 * @see TestPropertySourceUtils#addInlinedPropertiesToEnvironment, +		TestPropertySourceUtils.addPropertiesFilesToEnvironment(context, mergedConfig.getPropertySourceLocations());, +++ b/spring-test/src/main/java/org/springframework/test/context/support/AbstractContextLoader.java, +	 * @see TestPropertySourceUtils#addPropertiesFilesToEnvironment, +	 * @see TestPropertySourceUtils#addInlinedPropertiesToEnvironment, +		TestPropertySourceUtils.addPropertiesFilesToEnvironment(context, mergedConfig.getPropertySourceLocations());, +++ b/spring-test/src/main/java/org/springframework/test/context/support/TestPropertySourceUtils.java, +import org.springframework.core.env.Environment;, +import org.springframework.core.env.PropertySources;, +public abstract class TestPropertySourceUtils {, +	 * Add the {@link Properties} files from the given resource {@code locations}, +	 * to the {@link Environment} of the supplied {@code context}., +	 * <p>Each properties file will be converted to a {@code ResourcePropertySource}, +	 * that will be added to the {@link PropertySources} of the environment with, +	 * highest precedence., +	 * @param context the application context whose environment should be updated, +	 * @param locations the resource locations of {@link Properties} files to add, +	 * to the environment, +	 * @see ResourcePropertySource, +	 * @see TestPropertySource#locations, +	 * @throws IllegalStateException if an error occurs while processing a properties file, +	public static void addPropertiesFilesToEnvironment(ConfigurableApplicationContext context,, +			String[] locations) {, +				environment.getPropertySources().addFirst(new ResourcePropertySource(resource));, +	 * Add the given <em>inlined properties</em> (in the form of <em>key-value</em>, +	 * pairs) to the {@link Environment} of the supplied {@code context}., +	 * <p>This method simply delegates to, +	 * {@link #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[])}., +	 * @param context the application context whose environment should be updated, +	 * @param inlinedProperties the inlined properties to add to the environment, +	 * @see TestPropertySource#properties, +	 * @see #addInlinedPropertiesToEnvironment(ConfigurableEnvironment, String[]), +	public static void addInlinedPropertiesToEnvironment(ConfigurableApplicationContext context,, +			String[] inlinedProperties) {, +		addInlinedPropertiesToEnvironment(context.getEnvironment(), inlinedProperties);, +	 * Add the given <em>inlined properties</em> (in the form of <em>key-value</em>, +	 * pairs) to the supplied {@link ConfigurableEnvironment environment}., +	 * <p>All key-value pairs will be added to the {@code Environment} as a, +	 * single {@link MapPropertySource} with the highest precedence., +	 * <p>For details on the parsing of <em>inlined properties</em>, consult the, +	 * Javadoc for {@link #convertInlinedPropertiesToMap}., +	 * @param environment the environment to update, +	 * @param inlinedProperties the inlined properties to add to the environment, +	 * @see MapPropertySource, +	 * @see TestPropertySource#properties, +	 * @see #convertInlinedPropertiesToMap, +	public static void addInlinedPropertiesToEnvironment(ConfigurableEnvironment environment, String[] inlinedProperties) {, +		if (!ObjectUtils.isEmpty(inlinedProperties)) {, +			String name = "test properties " + ObjectUtils.nullSafeToString(inlinedProperties);, +			MapPropertySource ps = new MapPropertySource(name, convertInlinedPropertiesToMap(inlinedProperties));, +	 * Convert the supplied <em>inlined properties</em> (in the form of <em>key-value</em>, +	 * pairs) into a map keyed by property name, preserving the ordering of property names, +	 * in the returned map., +	 * <p>Parsing of the key-value pairs is achieved by converting all pairs, +	 * <p>For a full discussion of <em>inlined properties</em>, consult the Javadoc, +	 * for {@link TestPropertySource#properties}., +	 * @since 4.1.5, +	 * @throws IllegalStateException if a given key-value pair cannot be parsed, or if, +	 * a given inlined property contains multiple key-value pairs, +	public static Map<String, Object> convertInlinedPropertiesToMap(String[] inlinedProperties) {, +		for (String pair : inlinedProperties) {]