[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import org.springframework.core.convert.ConverterNotFoundException;, +		catch (ConverterNotFoundException ex) {, +			throw new ConversionNotSupportedException(value, requiredType, ex);, +		}, +		catch (ConversionException ex) {, +		catch (IllegalArgumentException ex) {, +			throw new TypeMismatchException(value, requiredType, ex);, +		}, +			catch (ConverterNotFoundException ex) {, +				throw new ConversionNotSupportedException(pce, pd.getPropertyType(), ex);, +			catch (ConversionException ex) {, +			catch (IllegalArgumentException ex) {, +				PropertyChangeEvent pce =, +						new PropertyChangeEvent(this.rootObject, this.nestedPath + propertyName, oldValue, pv.getValue());, +				throw new TypeMismatchException(pce, pd.getPropertyType(), ex);, +			}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import org.springframework.core.convert.ConverterNotFoundException;, +		catch (ConverterNotFoundException ex) {, +			throw new ConversionNotSupportedException(value, requiredType, ex);, +		}, +		catch (ConversionException ex) {, +		catch (IllegalArgumentException ex) {, +			throw new TypeMismatchException(value, requiredType, ex);, +		}, +			catch (ConverterNotFoundException ex) {, +				throw new ConversionNotSupportedException(pce, pd.getPropertyType(), ex);, +			catch (ConversionException ex) {, +			catch (IllegalArgumentException ex) {, +				PropertyChangeEvent pce =, +						new PropertyChangeEvent(this.rootObject, this.nestedPath + propertyName, oldValue, pv.getValue());, +				throw new TypeMismatchException(pce, pd.getPropertyType(), ex);, +			}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/ConversionNotSupportedException.java, + * Exception thrown when no suitable editor or converter can be found for a bean property., + * @author Juergen Hoeller, +	/**, +	 * Create a new ConversionNotSupportedException., +	 * @param propertyChangeEvent the PropertyChangeEvent that resulted in the problem, +	 * @param requiredType the required target type (or <code>null</code> if not known), +	 * @param cause the root cause (may be <code>null</code>), +	 */, +	/**, +	 * Create a new ConversionNotSupportedException., +	 * @param value the offending value that couldn't be converted (may be <code>null</code>), +	 * @param requiredType the required target type (or <code>null</code> if not known), +	 * @param cause the root cause (may be <code>null</code>), +	 */, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import org.springframework.core.convert.ConverterNotFoundException;, +		catch (ConverterNotFoundException ex) {, +			throw new ConversionNotSupportedException(value, requiredType, ex);, +		}, +		catch (ConversionException ex) {, +		catch (IllegalArgumentException ex) {, +			throw new TypeMismatchException(value, requiredType, ex);, +		}, +			catch (ConverterNotFoundException ex) {, +				throw new ConversionNotSupportedException(pce, pd.getPropertyType(), ex);, +			catch (ConversionException ex) {, +			catch (IllegalArgumentException ex) {, +				PropertyChangeEvent pce =, +						new PropertyChangeEvent(this.rootObject, this.nestedPath + propertyName, oldValue, pv.getValue());, +				throw new TypeMismatchException(pce, pd.getPropertyType(), ex);, +			}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/ConversionNotSupportedException.java, + * Exception thrown when no suitable editor or converter can be found for a bean property., + * @author Juergen Hoeller, +	/**, +	 * Create a new ConversionNotSupportedException., +	 * @param propertyChangeEvent the PropertyChangeEvent that resulted in the problem, +	 * @param requiredType the required target type (or <code>null</code> if not known), +	 * @param cause the root cause (may be <code>null</code>), +	 */, +	/**, +	 * Create a new ConversionNotSupportedException., +	 * @param value the offending value that couldn't be converted (may be <code>null</code>), +	 * @param requiredType the required target type (or <code>null</code> if not known), +	 * @param cause the root cause (may be <code>null</code>), +	 */, +, +++ b/org.springframework.context/src/test/java/org/springframework/context/conversionservice/TestClient.java, +	private List<String> stringList;, +, +	public List<String> getStringList() {, +		return stringList;, +	}, +, +	public void setStringList(List<String> stringList) {, +		this.stringList = stringList;, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import org.springframework.core.convert.ConverterNotFoundException;, +		catch (ConverterNotFoundException ex) {, +			throw new ConversionNotSupportedException(value, requiredType, ex);, +		}, +		catch (ConversionException ex) {]