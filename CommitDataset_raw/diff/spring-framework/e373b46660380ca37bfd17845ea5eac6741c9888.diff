[+++ b/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Decoder.java, + * Copyright 2002-2019 the original author or authors., +		return tokens.flatMap(tokenBuffer -> {, +				return Mono.justOrEmpty(value);, +				return Mono.error(new CodecException("Type definition error: " + ex.getType(), ex));, +				return Mono.error(new DecodingException("JSON decoding error: " + ex.getOriginalMessage(), ex));, +				return Mono.error(new DecodingException("I/O error while parsing input stream", ex));, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Decoder.java, + * Copyright 2002-2019 the original author or authors., +		return tokens.flatMap(tokenBuffer -> {, +				return Mono.justOrEmpty(value);, +				return Mono.error(new CodecException("Type definition error: " + ex.getType(), ex));, +				return Mono.error(new DecodingException("JSON decoding error: " + ex.getOriginalMessage(), ex));, +				return Mono.error(new DecodingException("I/O error while parsing input stream", ex));, +++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonDecoderTests.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.http.MediaType;, +	@Test // #22042, +	public void decodeWithNullLiteral() {, +		Flux<Object> result = this.decoder.decode(Flux.concat(stringBuffer("null")),, +				ResolvableType.forType(Pojo.class), MediaType.APPLICATION_JSON, Collections.emptyMap());, +, +		StepVerifier.create(result).expectComplete().verify();, +	}, +]