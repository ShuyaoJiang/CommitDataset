[+++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/LocalTaskExecutorThreadPool.java, + * Copyright 2002-2009 the original author or authors., +import java.util.concurrent.Executor;, +import java.util.concurrent.RejectedExecutionException;, +, +	private Executor taskExecutor;, +		catch (RejectedExecutionException ex) {, +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/LocalTaskExecutorThreadPool.java, + * Copyright 2002-2009 the original author or authors., +import java.util.concurrent.Executor;, +import java.util.concurrent.RejectedExecutionException;, +, +	private Executor taskExecutor;, +		catch (RejectedExecutionException ex) {, +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java, + * Copyright 2002-2009 the original author or authors., +import java.util.concurrent.Executor;, +	private static final ThreadLocal<Executor> configTimeTaskExecutorHolder =, +			new ThreadLocal<Executor>();, +	public static Executor getConfigTimeTaskExecutor() {, +	private Executor taskExecutor;, +	public void setTaskExecutor(Executor taskExecutor) {, +		if (this.applicationContext != null && this.resourceLoader == null) {, +			this.resourceLoader = this.applicationContext;, +		}, +, +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/LocalTaskExecutorThreadPool.java, + * Copyright 2002-2009 the original author or authors., +import java.util.concurrent.Executor;, +import java.util.concurrent.RejectedExecutionException;, +, +	private Executor taskExecutor;, +		catch (RejectedExecutionException ex) {, +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java, + * Copyright 2002-2009 the original author or authors., +import java.util.concurrent.Executor;, +	private static final ThreadLocal<Executor> configTimeTaskExecutorHolder =, +			new ThreadLocal<Executor>();, +	public static Executor getConfigTimeTaskExecutor() {, +	private Executor taskExecutor;, +	public void setTaskExecutor(Executor taskExecutor) {, +		if (this.applicationContext != null && this.resourceLoader == null) {, +			this.resourceLoader = this.applicationContext;, +		}, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java, + * Copyright 2002-2009 the original author or authors., +import java.util.concurrent.Executor;, +, +	private Executor taskExecutor = new SyncTaskExecutor();, +	public void setTaskExecutor(Executor taskExecutor) {, +	protected Executor getTaskExecutor() {, +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/LocalTaskExecutorThreadPool.java, + * Copyright 2002-2009 the original author or authors., +import java.util.concurrent.Executor;, +import java.util.concurrent.RejectedExecutionException;, +, +	private Executor taskExecutor;, +		catch (RejectedExecutionException ex) {, +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java, + * Copyright 2002-2009 the original author or authors., +import java.util.concurrent.Executor;, +	private static final ThreadLocal<Executor> configTimeTaskExecutorHolder =, +			new ThreadLocal<Executor>();, +	public static Executor getConfigTimeTaskExecutor() {, +	private Executor taskExecutor;, +	public void setTaskExecutor(Executor taskExecutor) {, +		if (this.applicationContext != null && this.resourceLoader == null) {, +			this.resourceLoader = this.applicationContext;, +		}, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java, + * Copyright 2002-2009 the original author or authors., +import java.util.concurrent.Executor;, +, +	private Executor taskExecutor = new SyncTaskExecutor();, +	public void setTaskExecutor(Executor taskExecutor) {, +	protected Executor getTaskExecutor() {, +++ b/org.springframework.context/src/main/java/org/springframework/remoting/support/SimpleHttpServerFactoryBean.java, + * Copyright 2002-2009 the original author or authors., +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/LocalTaskExecutorThreadPool.java, + * Copyright 2002-2009 the original author or authors., +import java.util.concurrent.Executor;, +import java.util.concurrent.RejectedExecutionException;, +, +	private Executor taskExecutor;, +		catch (RejectedExecutionException ex) {, +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java, + * Copyright 2002-2009 the original author or authors., +import java.util.concurrent.Executor;, +	private static final ThreadLocal<Executor> configTimeTaskExecutorHolder =, +			new ThreadLocal<Executor>();, +	public static Executor getConfigTimeTaskExecutor() {, +	private Executor taskExecutor;, +	public void setTaskExecutor(Executor taskExecutor) {, +		if (this.applicationContext != null && this.resourceLoader == null) {, +			this.resourceLoader = this.applicationContext;, +		}, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java]