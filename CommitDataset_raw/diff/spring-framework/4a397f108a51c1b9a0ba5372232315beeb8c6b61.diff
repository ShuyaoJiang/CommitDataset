[+++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceDecoder.java, + * Copyright 2002-2019 the original author or authors., +	/** Name of hint with a filename for the resource(e.g. from "Content-Disposition" HTTP header). */, +	public static String FILENAME_HINT = ResourceDecoder.class.getName() + ".filename";, +, +, +		String filename = hints != null ? (String) hints.get(FILENAME_HINT) : null;, +			return new InputStreamResource(new ByteArrayInputStream(bytes)) {, +				@Override, +				public String getFilename() {, +					return filename;, +				}, +			};, +			return new ByteArrayResource(bytes) {, +				@Override, +				public String getFilename() {, +					return filename;, +				}, +			};, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceDecoder.java, + * Copyright 2002-2019 the original author or authors., +	/** Name of hint with a filename for the resource(e.g. from "Content-Disposition" HTTP header). */, +	public static String FILENAME_HINT = ResourceDecoder.class.getName() + ".filename";, +, +, +		String filename = hints != null ? (String) hints.get(FILENAME_HINT) : null;, +			return new InputStreamResource(new ByteArrayInputStream(bytes)) {, +				@Override, +				public String getFilename() {, +					return filename;, +				}, +			};, +			return new ByteArrayResource(bytes) {, +				@Override, +				public String getFilename() {, +					return filename;, +				}, +			};, +++ b/spring-core/src/test/java/org/springframework/core/codec/ResourceDecoderTests.java, + * Copyright 2002-2019 the original author or authors., +import java.util.Collections;, +	public void decodeToMono() {, +		testDecodeToMonoAll(input, ResolvableType.forClass(Resource.class),, +				step -> step, +						.consumeNextWith(value -> {, +							Resource resource = (Resource) value;, +								assertEquals("testFile", resource.getFilename());, +						.verify(),, +				null,, +				Collections.singletonMap(ResourceDecoder.FILENAME_HINT, "testFile"));, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceDecoder.java, + * Copyright 2002-2019 the original author or authors., +	/** Name of hint with a filename for the resource(e.g. from "Content-Disposition" HTTP header). */, +	public static String FILENAME_HINT = ResourceDecoder.class.getName() + ".filename";, +, +, +		String filename = hints != null ? (String) hints.get(FILENAME_HINT) : null;, +			return new InputStreamResource(new ByteArrayInputStream(bytes)) {, +				@Override, +				public String getFilename() {, +					return filename;, +				}, +			};, +			return new ByteArrayResource(bytes) {, +				@Override, +				public String getFilename() {, +					return filename;, +				}, +			};, +++ b/spring-core/src/test/java/org/springframework/core/codec/ResourceDecoderTests.java, + * Copyright 2002-2019 the original author or authors., +import java.util.Collections;, +	public void decodeToMono() {, +		testDecodeToMonoAll(input, ResolvableType.forClass(Resource.class),, +				step -> step, +						.consumeNextWith(value -> {, +							Resource resource = (Resource) value;, +								assertEquals("testFile", resource.getFilename());, +						.verify(),, +				null,, +				Collections.singletonMap(ResourceDecoder.FILENAME_HINT, "testFile"));, +++ b/spring-web/src/main/java/org/springframework/http/codec/ResourceHttpMessageReader.java, +/*, + * Copyright 2002-2019 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      https://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.http.codec;, +, +import java.util.Map;]