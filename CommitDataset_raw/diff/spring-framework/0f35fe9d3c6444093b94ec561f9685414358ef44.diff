[+++ b/build-spring-framework/resources/changelog.txt, +Changes in version 3.0.0.M3 (2009-04-06), +----------------------------------------, +, +* Spring 3.0 is shipping with proper Maven POMs now, +* updated to JRuby 1.2 (remaining compatible with JRuby 1.1 and above), +* updated to Hessian 3.2.1 (remaining compatible with Hessian 3.1.3 and above), +* removed Axis 1.x support package, keeping basic JAX-RPC support only (next to JAX-WS), +* introduced new converter subsystem in "core.convert", +* introduced support for annotated factory methods, +* introduced support for JavaConfig-style @Configuration classes, +* @Autowired uses field/parameter name as fallback qualifier value, +* qualifier annotations can be used at method level as well (applying to all parameters), +* @Value annotation can be used at method level as well (e.g. on bean property setters), +* @Value values may use ${...} placeholders (driven by PropertyPlaceholderConfigurer), +* fixed EL evaluation of prepared constructor arguments for repeated prototype creation, +* ConstructorArgumentValues exposed indexed arguments in the order of definition, +* declarative destroy-method="..." specifications get validated at bean creation time, +* CachedIntrospectionResults always caches bean classes except in case of custom BeanInfo, +* GenericTypeResolver's type variable cache uses weak values (for OSGi compatibility), +* fixed CachingMapDecorator to support garbage-collected weak references (again), +* SessionAwareMessageListener supports generic declaration of concrete JMS Message type, +* RmiServiceExporter and RmiRegistryFactoryBean synchronize registry lookup/creation, +* added "unregisterManagedResource" method to MBeanExporter/MBeanExportOperations, +* TimerTaskExecutor creates non-daemon Timer and uses bean name as default Timer name, +* added TaskScheduler interface and Trigger abstraction, +* added ConcurrentTaskScheduler and ThreadPoolTaskScheduler, +* added CommonJ TimerManagerTaskScheduler, +* added CronTrigger implementation for cron expression support, +* JSF FacesContext and ExternalContext are resolvable dependencies by default, if available, +* FacesRequestAttributes (as used by RequestContextHolder) can access global Portlet session, +* request handler methods with @ModelAttribute annotation always return a model attribute, +* FreeMarkerView can be initialized with ServletContext only (e.g. for testing), +, +]