[+++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHeaders.java, +import java.math.BigInteger;, +import java.security.SecureRandom;, +import java.util.Random;, + * @author Rossen Stoyanchev, +	private static volatile IdGenerator defaultIdGenerator = new AlternativeJdkIdGenerator();, +, +		IdGenerator generatorToUse = (idGenerator != null) ? idGenerator : defaultIdGenerator;, +		this.headers.put(ID, generatorToUse.generateId());, +, +	/**, +	 * A variation of {@link UUID#randomUUID()} that uses {@link SecureRandom} only for, +	 * the initial seed and {@link Random} thereafter, which provides better performance, +	 * in exchange for less securely random id's., +	 */, +	public static class AlternativeJdkIdGenerator implements IdGenerator {, +, +		private final Random random;, +, +		public AlternativeJdkIdGenerator() {, +			byte[] seed = new SecureRandom().generateSeed(8);, +			this.random = new Random(new BigInteger(seed).longValue());, +		}, +, +		public UUID generateId() {, +, +			byte[] randomBytes = new byte[16];, +			this.random.nextBytes(randomBytes);, +, +			long mostSigBits = 0;, +			for (int i = 0; i < 8; i++) {, +				mostSigBits = (mostSigBits << 8) | (randomBytes[i] & 0xff);, +			}, +			long leastSigBits = 0;, +			for (int i = 8; i < 16; i++) {, +				leastSigBits = (leastSigBits << 8) | (randomBytes[i] & 0xff);, +			}, +, +			return new UUID(mostSigBits, leastSigBits);, +		}, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHeaders.java, +import java.math.BigInteger;, +import java.security.SecureRandom;, +import java.util.Random;, + * @author Rossen Stoyanchev, +	private static volatile IdGenerator defaultIdGenerator = new AlternativeJdkIdGenerator();, +, +		IdGenerator generatorToUse = (idGenerator != null) ? idGenerator : defaultIdGenerator;, +		this.headers.put(ID, generatorToUse.generateId());, +, +	/**, +	 * A variation of {@link UUID#randomUUID()} that uses {@link SecureRandom} only for, +	 * the initial seed and {@link Random} thereafter, which provides better performance, +	 * in exchange for less securely random id's., +	 */, +	public static class AlternativeJdkIdGenerator implements IdGenerator {, +, +		private final Random random;, +, +		public AlternativeJdkIdGenerator() {, +			byte[] seed = new SecureRandom().generateSeed(8);, +			this.random = new Random(new BigInteger(seed).longValue());, +		}, +, +		public UUID generateId() {, +, +			byte[] randomBytes = new byte[16];, +			this.random.nextBytes(randomBytes);, +, +			long mostSigBits = 0;, +			for (int i = 0; i < 8; i++) {, +				mostSigBits = (mostSigBits << 8) | (randomBytes[i] & 0xff);, +			}, +			long leastSigBits = 0;, +			for (int i = 8; i < 16; i++) {, +				leastSigBits = (leastSigBits << 8) | (randomBytes[i] & 0xff);, +			}, +, +			return new UUID(mostSigBits, leastSigBits);, +		}, +	}, +, +++ b/spring-messaging/src/test/java/org/springframework/messaging/MessageHeadersTests.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */]