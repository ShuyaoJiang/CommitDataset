[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/StandardTypeComparator.java, + * Copyright 2002-2014 the original author or authors., +import java.math.BigInteger;, +			else if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) {, +				BigInteger leftBigInteger = NumberUtils.convertNumberToTargetClass(leftNumber, BigInteger.class);, +				BigInteger rightBigInteger = NumberUtils.convertNumberToTargetClass(rightNumber, BigInteger.class);, +				return leftBigInteger.compareTo(rightBigInteger);, +			}, +			else if (leftNumber instanceof Integer || rightNumber instanceof Integer) {, +			else if (leftNumber instanceof Short || rightNumber instanceof Short) {, +				// Don't call Short.compare here - only available on JDK 1.7+, +				return compare(leftNumber.shortValue(), rightNumber.shortValue());, +			}, +			else if (leftNumber instanceof Byte || rightNumber instanceof Byte) {, +				// Don't call Short.compare here - only available on JDK 1.7+, +				return compare(leftNumber.byteValue(), rightNumber.byteValue());, +			}, +			else {, +				// Unknown Number subtypes -> best guess is double multiplication, +				return Double.compare(leftNumber.doubleValue(), rightNumber.doubleValue());, +			}, +				return ((Comparable<Object>) left).compareTo(right);, +	private static int compare(long x, long y) {, +		return (x < y ? -1 : (x > y ? 1 : 0));, +	}, +, +	private static int compare(short x, short y) {, +		return x - y;, +	}, +, +	private static int compare(byte x, byte y) {, +		return x - y;]