[+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/tags/HtmlEscapeTagTests.java, + * Copyright 2002-2011 the original author or authors., +import javax.servlet.jsp.tagext.Tag;, +		assertEquals("Correct content", "&#39; test &amp; text \\\\", result.toString());, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/tags/HtmlEscapeTagTests.java, + * Copyright 2002-2011 the original author or authors., +import javax.servlet.jsp.tagext.Tag;, +		assertEquals("Correct content", "&#39; test &amp; text \\\\", result.toString());, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/tags/MessageTagTests.java, + * Copyright 2002-2011 the original author or authors., +		assertEquals("Correct message", "&#39; test &amp; text \\\\", message.toString());, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/tags/HtmlEscapeTagTests.java, + * Copyright 2002-2011 the original author or authors., +import javax.servlet.jsp.tagext.Tag;, +		assertEquals("Correct content", "&#39; test &amp; text \\\\", result.toString());, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/tags/MessageTagTests.java, + * Copyright 2002-2011 the original author or authors., +		assertEquals("Correct message", "&#39; test &amp; text \\\\", message.toString());, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/tags/form/FormTagTests.java, + * Copyright 2002-2011 the original author or authors., +		assertEquals("<form id=\"command\" action=\"/my/form?foo=bar&amp;stuff=&quot;&gt;&lt;script&gt;alert(&#39;XSS!&#39;)&lt;/script&gt;\" method=\"post\">",, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/tags/HtmlEscapeTagTests.java, + * Copyright 2002-2011 the original author or authors., +import javax.servlet.jsp.tagext.Tag;, +		assertEquals("Correct content", "&#39; test &amp; text \\\\", result.toString());, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/tags/MessageTagTests.java, + * Copyright 2002-2011 the original author or authors., +		assertEquals("Correct message", "&#39; test &amp; text \\\\", message.toString());, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/tags/form/FormTagTests.java, + * Copyright 2002-2011 the original author or authors., +		assertEquals("<form id=\"command\" action=\"/my/form?foo=bar&amp;stuff=&quot;&gt;&lt;script&gt;alert(&#39;XSS!&#39;)&lt;/script&gt;\" method=\"post\">",, +++ b/org.springframework.web/src/test/java/org/springframework/web/bind/EscapedErrorsTests.java, + * Copyright 2002-2011 the original author or authors., +import org.junit.Test;, +import static org.junit.Assert.*;, +, +public class EscapedErrorsTests {, +	@Test, +		assertTrue("Global error message escaped", "message: &quot; &#39;".equals(globalError.getDefaultMessage()));, +		ObjectError globalErrorInList = errors.getGlobalErrors().get(0);, +		ObjectError globalErrorInAllList = errors.getAllErrors().get(3);, +		FieldError fieldErrorInList = errors.getFieldErrors().get(0);, +		FieldError nameErrorInList = errors.getFieldErrors("name").get(0);, +		FieldError ageErrorInList = errors.getFieldErrors("age").get(0);, +		FieldError ageError2 = errors.getFieldErrors("age").get(1);, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/tags/HtmlEscapeTagTests.java, + * Copyright 2002-2011 the original author or authors., +import javax.servlet.jsp.tagext.Tag;, +		assertEquals("Correct content", "&#39; test &amp; text \\\\", result.toString());, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/tags/MessageTagTests.java, + * Copyright 2002-2011 the original author or authors., +		assertEquals("Correct message", "&#39; test &amp; text \\\\", message.toString());, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/tags/form/FormTagTests.java, + * Copyright 2002-2011 the original author or authors., +		assertEquals("<form id=\"command\" action=\"/my/form?foo=bar&amp;stuff=&quot;&gt;&lt;script&gt;alert(&#39;XSS!&#39;)&lt;/script&gt;\" method=\"post\">",, +++ b/org.springframework.web/src/test/java/org/springframework/web/bind/EscapedErrorsTests.java, + * Copyright 2002-2011 the original author or authors., +import org.junit.Test;, +import static org.junit.Assert.*;, +, +public class EscapedErrorsTests {, +	@Test, +		assertTrue("Global error message escaped", "message: &quot; &#39;".equals(globalError.getDefaultMessage()));, +		ObjectError globalErrorInList = errors.getGlobalErrors().get(0);, +		ObjectError globalErrorInAllList = errors.getAllErrors().get(3);, +		FieldError fieldErrorInList = errors.getFieldErrors().get(0);, +		FieldError nameErrorInList = errors.getFieldErrors("name").get(0);, +		FieldError ageErrorInList = errors.getFieldErrors("age").get(0);, +		FieldError ageError2 = errors.getFieldErrors("age").get(1);, +++ b/org.springframework.web/src/test/java/org/springframework/web/util/HtmlCharacterEntityReferencesTests.java, + * Copyright 2002-2011 the original author or authors., +import org.junit.Test;, +, +import static org.junit.Assert.*;, +public class HtmlCharacterEntityReferencesTests {, +	@Test, +				assertEquals("The entity reference [" + referenceName + "] should be mapped to unicode character " +, +						character, (char) character, entityReferences.convertToCharacter(referenceName));, +			}, +			else if (character == 39) {, +				assertTrue(entityReferences.isMappedToReference((char) character));, +				assertEquals("&#39;", entityReferences.convertToReference((char) character));, +				referenceCharactersMap.size() + 1, entityReferences.getSupportedReferenceCount());, +		assertEquals("The HTML 4.0 Standard defines 252+1 entity references so do entityReferences",, +				252 + 1, entityReferences.getSupportedReferenceCount());, +		assertEquals("Invalid entity reference names should not be convertible",, +		Map<Integer, String> referencedCharactersMap = new HashMap<Integer, String>();, +			return (currentEntityName != null || readNextEntity());]