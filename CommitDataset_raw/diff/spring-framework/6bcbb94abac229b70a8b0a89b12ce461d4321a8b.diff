[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/AbstractBrokerMessageHandler.java, + * Copyright 2002-2014 the original author or authors., +, + * Abstract base class for a {@link MessageHandler} that broker messages to, + * registered subscribers., +	private final Collection<String> destinationPrefixes;, +	public AbstractBrokerMessageHandler() {, +		this(Collections.<String>emptyList());, +	}, +, +		destinationPrefixes = (destinationPrefixes != null) ? destinationPrefixes : Collections.<String>emptyList();, +		this.destinationPrefixes = Collections.unmodifiableCollection(destinationPrefixes);, +	/**, +	 * Check whether this message handler is currently running., +	 *, +	 * <p>Note that even when this message handler is running the, +	 * {@link #isBrokerAvailable()} flag may still independently alternate between, +	 * being on and off depending on the concrete sub-class implementation., +	 */, +	/**, +	 * Whether the message broker is currently available and able to process messages., +	 *, +	 * <p>Note that this is in addition to the {@link #isRunning()} flag, which, +	 * indicates whether this message handler is running. In other words the message, +	 * handler must first be running and then the {@link #isBrokerAvailable()} flag, +	 * may still independently alternate between being on and off depending on the, +	 * concrete sub-class implementation., +	 *, +	 * <p>Application components may implement, +	 * {@link org.springframework.context.ApplicationListener<BrokerAvailabilityEvent>>}, +	 * to receive notifications when broker becomes available and unavailable., +	 */, +	public boolean isBrokerAvailable() {, +		return this.brokerAvailable.get();, +	}, +, +		boolean shouldPublish = this.brokerAvailable.compareAndSet(false, true);, +		if (this.eventPublisher != null && shouldPublish) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("Publishing BrokerAvailabilityEvent (available)");, +		boolean shouldPublish = this.brokerAvailable.compareAndSet(true, false);, +		if (this.eventPublisher != null && shouldPublish) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("Publishing BrokerAvailabilityEvent (unavailable)");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/AbstractBrokerMessageHandler.java, + * Copyright 2002-2014 the original author or authors., +, + * Abstract base class for a {@link MessageHandler} that broker messages to, + * registered subscribers., +	private final Collection<String> destinationPrefixes;, +	public AbstractBrokerMessageHandler() {, +		this(Collections.<String>emptyList());, +	}, +, +		destinationPrefixes = (destinationPrefixes != null) ? destinationPrefixes : Collections.<String>emptyList();, +		this.destinationPrefixes = Collections.unmodifiableCollection(destinationPrefixes);, +	/**, +	 * Check whether this message handler is currently running., +	 *, +	 * <p>Note that even when this message handler is running the, +	 * {@link #isBrokerAvailable()} flag may still independently alternate between, +	 * being on and off depending on the concrete sub-class implementation., +	 */, +	/**, +	 * Whether the message broker is currently available and able to process messages., +	 *, +	 * <p>Note that this is in addition to the {@link #isRunning()} flag, which, +	 * indicates whether this message handler is running. In other words the message, +	 * handler must first be running and then the {@link #isBrokerAvailable()} flag, +	 * may still independently alternate between being on and off depending on the, +	 * concrete sub-class implementation., +	 *, +	 * <p>Application components may implement, +	 * {@link org.springframework.context.ApplicationListener<BrokerAvailabilityEvent>>}, +	 * to receive notifications when broker becomes available and unavailable., +	 */, +	public boolean isBrokerAvailable() {, +		return this.brokerAvailable.get();, +	}, +, +		boolean shouldPublish = this.brokerAvailable.compareAndSet(false, true);, +		if (this.eventPublisher != null && shouldPublish) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("Publishing BrokerAvailabilityEvent (available)");, +		boolean shouldPublish = this.brokerAvailable.compareAndSet(true, false);, +		if (this.eventPublisher != null && shouldPublish) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("Publishing BrokerAvailabilityEvent (unavailable)");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java, + * Copyright 2002-2014 the original author or authors., +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/AbstractBrokerMessageHandler.java, + * Copyright 2002-2014 the original author or authors., +, + * Abstract base class for a {@link MessageHandler} that broker messages to, + * registered subscribers., +	private final Collection<String> destinationPrefixes;, +	public AbstractBrokerMessageHandler() {, +		this(Collections.<String>emptyList());, +	}, +]