[+++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java, +		if (ann != null) {, +			mavContainer.setBinding(name, ann.binding());, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java, +		if (ann != null) {, +			mavContainer.setBinding(name, ann.binding());, +++ b/spring-web/src/main/java/org/springframework/web/method/support/ModelAndViewContainer.java, + * @author Juergen Hoeller, +	private final Set<String> noBinding = new HashSet<>(4);, +, +	private final Set<String> bindingDisabled = new HashSet<>(4);, +, +	 * Provide an HTTP status that will be passed on to with the, +	 * Programmatically register an attribute for which data binding should not occur,, +	 * not even for a subsequent {@code @ModelAttribute} declaration., +	 * @param attributeName the name of the attribute, +	 * @since 4.3, +	 */, +	public void setBindingDisabled(String attributeName) {, +		this.bindingDisabled.add(attributeName);, +	}, +, +	/**, +	 * Whether binding is disabled for the given model attribute., +	 * @since 4.3, +	 */, +	public boolean isBindingDisabled(String name) {, +		return (this.bindingDisabled.contains(name) || this.noBinding.contains(name));, +	}, +, +	/**, +	 * Register whether data binding should occur for a corresponding model attribute,, +	 * corresponding to an {@code @ModelAttribute(binding=true/false)} declaration., +	 * <p>Note: While this flag will be taken into account by {@link #isBindingDisabled},, +	 * a hard {@link #setBindingDisabled} declaration will always override it., +	 * @param attributeName the name of the attribute, +	 * @since 4.3.13, +	 */, +	public void setBinding(String attributeName, boolean enabled) {, +		if (!enabled) {, +			this.noBinding.add(attributeName);, +		}, +		else {, +			this.noBinding.remove(attributeName);, +		}, +	}, +, +	/**, +	 * Return the {@link SessionStatus} instance to use that can be used to, +	 * signal that session processing is complete., +	 */, +	public SessionStatus getSessionStatus() {, +		return this.sessionStatus;, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java, +		if (ann != null) {, +			mavContainer.setBinding(name, ann.binding());, +++ b/spring-web/src/main/java/org/springframework/web/method/support/ModelAndViewContainer.java, + * @author Juergen Hoeller, +	private final Set<String> noBinding = new HashSet<>(4);, +, +	private final Set<String> bindingDisabled = new HashSet<>(4);, +, +	 * Provide an HTTP status that will be passed on to with the, +	 * Programmatically register an attribute for which data binding should not occur,, +	 * not even for a subsequent {@code @ModelAttribute} declaration., +	 * @param attributeName the name of the attribute, +	 * @since 4.3, +	 */, +	public void setBindingDisabled(String attributeName) {, +		this.bindingDisabled.add(attributeName);, +	}, +, +	/**, +	 * Whether binding is disabled for the given model attribute., +	 * @since 4.3, +	 */, +	public boolean isBindingDisabled(String name) {, +		return (this.bindingDisabled.contains(name) || this.noBinding.contains(name));, +	}, +, +	/**, +	 * Register whether data binding should occur for a corresponding model attribute,, +	 * corresponding to an {@code @ModelAttribute(binding=true/false)} declaration., +	 * <p>Note: While this flag will be taken into account by {@link #isBindingDisabled},, +	 * a hard {@link #setBindingDisabled} declaration will always override it., +	 * @param attributeName the name of the attribute, +	 * @since 4.3.13, +	 */, +	public void setBinding(String attributeName, boolean enabled) {, +		if (!enabled) {, +			this.noBinding.add(attributeName);, +		}, +		else {, +			this.noBinding.remove(attributeName);, +		}, +	}, +]