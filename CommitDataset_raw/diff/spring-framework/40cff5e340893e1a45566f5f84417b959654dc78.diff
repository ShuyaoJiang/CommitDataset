[+++ b/spring-test/src/main/java/org/springframework/test/context/ContextConfiguration.java, +	 * <p>Check out the javadoc for, +++ b/spring-test/src/main/java/org/springframework/test/context/ContextConfiguration.java, +	 * <p>Check out the javadoc for, +++ b/spring-test/src/main/java/org/springframework/test/context/ContextHierarchy.java, + * Copyright 2002-2015 the original author or authors., +++ b/spring-test/src/main/java/org/springframework/test/context/ContextConfiguration.java, +	 * <p>Check out the javadoc for, +++ b/spring-test/src/main/java/org/springframework/test/context/ContextHierarchy.java, + * Copyright 2002-2015 the original author or authors., +++ b/spring-test/src/main/java/org/springframework/test/context/ContextLoader.java, + * Copyright 2002-2015 the original author or authors., + * <p>Concrete implementations must provide a {@code public} no-args constructor., +++ b/spring-test/src/main/java/org/springframework/test/context/ContextConfiguration.java, +	 * <p>Check out the javadoc for, +++ b/spring-test/src/main/java/org/springframework/test/context/ContextHierarchy.java, + * Copyright 2002-2015 the original author or authors., +++ b/spring-test/src/main/java/org/springframework/test/context/ContextLoader.java, + * Copyright 2002-2015 the original author or authors., + * <p>Concrete implementations must provide a {@code public} no-args constructor., +++ b/spring-test/src/main/java/org/springframework/test/context/support/ContextLoaderUtils.java, +		UntypedAnnotationDescriptor desc =, +				findAnnotationDescriptorForTypes(testClass, contextConfigType, contextHierarchyType);, +		if (desc == null) {, +			throw new IllegalArgumentException(String.format(, +		}, +		while (desc != null) {, +			Class<?> rootDeclaringClass = desc.getRootDeclaringClass();, +			Class<?> declaringClass = desc.getDeclaringClass();, +				String msg = String.format("Class [%s] has been configured with both @ContextConfiguration " +, +						"and @ContextHierarchy. Only one of these annotations may be declared on a test class " +, +						"or composed annotation.", declaringClass.getName());, +						desc.getAnnotationAttributes(), ContextConfiguration.class, desc.getRootDeclaringClass());, +				convertContextConfigToConfigAttributesAndAddToList(, +						contextConfiguration, rootDeclaringClass, configAttributesList);, +					convertContextConfigToConfigAttributesAndAddToList(, +							contextConfiguration, rootDeclaringClass, configAttributesList);, +				String msg = String.format("Test class [%s] has been configured with neither @ContextConfiguration " +, +						"nor @ContextHierarchy as a class-level annotation.", rootDeclaringClass.getName());, +			desc = findAnnotationDescriptorForTypes(, +					rootDeclaringClass.getSuperclass(), contextConfigType, contextHierarchyType);, +			String msg = String.format("The @ContextConfiguration elements configured via @ContextHierarchy in " +, +					"test class [%s] and its superclasses must define unique contexts per hierarchy level.",, +					testClass.getName());, +	 * @param testClass the class for which to resolve the configuration attributes, +	 * (must not be {@code null}), +		List<ContextConfigurationAttributes> attributesList = new ArrayList<ContextConfigurationAttributes>();, +		if (descriptor == null) {, +			throw new IllegalArgumentException(String.format(, +		}, +, +		ContextConfigurationAttributes attributes =, +				new ContextConfigurationAttributes(declaringClass, contextConfiguration);]