[+++ b/spring-context-support/src/test/java/org/springframework/cache/jcache/interceptor/JCacheErrorHandlerTests.java, +import static org.junit.Assert.*;, +	private Cache errorCache;, +, +		this.errorCache = context.getBean("mockErrorCache", Cache.class);, +	public void getPutNewElementFail() {, +		UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on put");, +		Object key = SimpleKeyGenerator.generateKey(0L);, +		given(this.cache.get(key)).willReturn(null);, +		willThrow(exception).given(this.cache).put(key, 0L);, +, +		this.simpleService.get(0L);, +		verify(this.errorHandler).handleCachePutError(exception, this.cache, key, 0L);, +	}, +, +	@Test, +	public void getFailPutExceptionFail() {, +		UnsupportedOperationException exceptionOnPut = new UnsupportedOperationException("Test exception on put");, +		Object key = SimpleKeyGenerator.generateKey(0L);, +		given(this.cache.get(key)).willReturn(null);, +		willThrow(exceptionOnPut).given(this.errorCache).put(key,, +				SimpleService.TEST_EXCEPTION);, +, +		try {, +			this.simpleService.getFail(0L);, +		}, +		catch (IllegalStateException ex) {, +			assertEquals("Test exception", ex.getMessage());, +		}, +		verify(this.errorHandler).handleCachePutError(exceptionOnPut,, +				this.errorCache, key, SimpleService.TEST_EXCEPTION);, +	}, +, +	@Test, +			cacheManager.setCaches(Arrays.asList(mockCache(), mockErrorCache()));, +		@Bean, +		public Cache mockErrorCache() {, +			Cache cache = mock(Cache.class);, +			given(cache.getName()).willReturn("error");, +			return cache;, +		}, +, +, +		private static final IllegalStateException TEST_EXCEPTION =, +				new IllegalStateException("Test exception");, +, +		@CacheResult(exceptionCacheName = "error"), +		public Object getFail(long id) {, +			throw TEST_EXCEPTION;, +		}, +]