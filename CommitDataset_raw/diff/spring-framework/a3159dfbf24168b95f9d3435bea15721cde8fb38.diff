[+++ b/build.gradle, +	ext.jrubyVersion         = "1.7.19", +		optional("org.jruby:jruby:${jrubyVersion}"), +		testCompile("org.webjars:mustachejs:0.8.2"), +		testCompile("org.webjars:handlebars:3.0.0-1"), +		testCompile("org.webjars:react:0.12.2"), +		testCompile("org.webjars:underscorejs:1.8.2"), +		testCompile("org.jruby:jruby:${jrubyVersion}"), +		testCompile("org.python:jython-standalone:2.5.3"), +++ b/build.gradle, +	ext.jrubyVersion         = "1.7.19", +		optional("org.jruby:jruby:${jrubyVersion}"), +		testCompile("org.webjars:mustachejs:0.8.2"), +		testCompile("org.webjars:handlebars:3.0.0-1"), +		testCompile("org.webjars:react:0.12.2"), +		testCompile("org.webjars:underscorejs:1.8.2"), +		testCompile("org.jruby:jruby:${jrubyVersion}"), +		testCompile("org.python:jython-standalone:2.5.3"), +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceHandler.java, + * Copyright 2002-2015 the original author or authors., + * @author Sebastien Deleuze, +		registerBeanDefinitionParser("script-template-configurer", new ScriptTemplateConfigurerBeanDefinitionParser());, +++ b/build.gradle, +	ext.jrubyVersion         = "1.7.19", +		optional("org.jruby:jruby:${jrubyVersion}"), +		testCompile("org.webjars:mustachejs:0.8.2"), +		testCompile("org.webjars:handlebars:3.0.0-1"), +		testCompile("org.webjars:react:0.12.2"), +		testCompile("org.webjars:underscorejs:1.8.2"), +		testCompile("org.jruby:jruby:${jrubyVersion}"), +		testCompile("org.python:jython-standalone:2.5.3"), +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceHandler.java, + * Copyright 2002-2015 the original author or authors., + * @author Sebastien Deleuze, +		registerBeanDefinitionParser("script-template-configurer", new ScriptTemplateConfigurerBeanDefinitionParser());, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ScriptTemplateConfigurerBeanDefinitionParser.java, +/*, + * Copyright 2002-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.servlet.config;, +, +import java.nio.charset.Charset;, +import java.util.ArrayList;, +import java.util.List;, +, +import org.w3c.dom.Element;, +, +import org.springframework.beans.factory.support.AbstractBeanDefinition;, +import org.springframework.beans.factory.support.BeanDefinitionBuilder;, +import org.springframework.beans.factory.xml.AbstractSimpleBeanDefinitionParser;, +import org.springframework.beans.factory.xml.ParserContext;, +import org.springframework.util.xml.DomUtils;, +, +/**, + * Parse the <mvc:script-template-configurer> MVC namespace element and register a, + * {@code ScriptTemplateConfigurer} bean., + *, + * @author Sebastien Deleuze, + * @since 4.2, + */, +public class ScriptTemplateConfigurerBeanDefinitionParser extends AbstractSimpleBeanDefinitionParser {, +, +	public static final String BEAN_NAME = "mvcScriptTemplateConfigurer";, +, +, +	@Override, +	protected String resolveId(Element element, AbstractBeanDefinition definition, ParserContext parserContext) {, +		return BEAN_NAME;, +	}, +, +	@Override, +	protected String getBeanClassName(Element element) {, +		return "org.springframework.web.servlet.view.script.ScriptTemplateConfigurer";, +	}, +, +	@Override, +	protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {, +		List<Element> childElements = DomUtils.getChildElementsByTagName(element, "script");, +		if (!childElements.isEmpty()) {, +			List<String> locations = new ArrayList<String>(childElements.size());, +			for (Element childElement : childElements) {, +				locations.add(childElement.getAttribute("location"));, +			}, +			builder.addPropertyValue("scripts", locations.toArray(new String[locations.size()]));, +		}, +		builder.addPropertyValue("engineName", element.getAttribute("engine-name"));, +		if (element.hasAttribute("render-object")) {]