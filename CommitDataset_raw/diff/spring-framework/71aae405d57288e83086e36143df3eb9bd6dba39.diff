[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +						RequestConditionFactory.parseConsumes(annotation.consumes(), annotation.headers()));, +			result = mapping.getConsumes().compareTo(otherMapping.getConsumes());, +			if (result != 0) {, +				return result;, +			}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +						RequestConditionFactory.parseConsumes(annotation.consumes(), annotation.headers()));, +			result = mapping.getConsumes().compareTo(otherMapping.getConsumes());, +			if (result != 0) {, +				return result;, +			}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingInfo.java, +import org.springframework.web.servlet.mvc.method.condition.ConsumesRequestCondition;, +import org.springframework.web.servlet.mvc.method.condition.HeadersRequestCondition;, +import org.springframework.web.servlet.mvc.method.condition.ParamsRequestCondition;, +	private final ParamsRequestCondition paramsCondition;, +	private final HeadersRequestCondition headersCondition;, +	private final ConsumesRequestCondition consumesCondition;, +	 * Creates a new {@code RequestMappingInfo} instance with the given URL patterns and HTTP methods., +	 * Creates a new {@code RequestMappingInfo} instance with a full set of conditions., +							 ParamsRequestCondition paramsCondition,, +							 HeadersRequestCondition headersCondition,, +							 ConsumesRequestCondition consumesCondition) {, +		this.paramsCondition = paramsCondition != null ? paramsCondition : new ParamsRequestCondition();, +		this.headersCondition = headersCondition != null ? headersCondition : new HeadersRequestCondition();, +		this.consumesCondition = consumesCondition != null ? consumesCondition : new ConsumesRequestCondition();, +	 * Returns the request parameters conditions of this request key., +	public ParamsRequestCondition getParams() {, +	 * Returns the request headers conditions of this request key., +	public HeadersRequestCondition getHeaders() {, +	 * Returns the request consumes conditions of this request key., +	 */, +	public ConsumesRequestCondition getConsumes() {, +		return consumesCondition;, +	}, +, +	/**, +	 * Combines this {@code RequestMappingInfo} with another as follows:, +	 * <li>Request parameters are combined as per {@link ParamsRequestCondition#combine(ParamsRequestCondition)}., +	 * <li>Request headers are combined as per {@link HeadersRequestCondition#combine(HeadersRequestCondition)}., +	 * <li>Consumes are combined as per {@link ConsumesRequestCondition#combine(ConsumesRequestCondition)}., +		ParamsRequestCondition params = this.paramsCondition.combine(methodKey.paramsCondition);, +		HeadersRequestCondition headers = this.headersCondition.combine(methodKey.headersCondition);, +		ConsumesRequestCondition consumes = this.consumesCondition.combine(methodKey.consumesCondition);, +	 * Returns a new {@code RequestMappingInfo} that contains all conditions of this key that are relevant to the request., +		ParamsRequestCondition matchingParamsCondition = paramsCondition.getMatchingCondition(request);, +		HeadersRequestCondition matchingHeadersCondition = headersCondition.getMatchingCondition(request);, +		ConsumesRequestCondition matchingConsumesCondition = consumesCondition.getMatchingCondition(request);, +, +		if (!checkMethod(request) || matchingParamsCondition == null || matchingHeadersCondition == null ||, +				matchingConsumesCondition == null) {, +				return new RequestMappingInfo(matchingPatterns, matchingMethods, matchingParamsCondition,, +						matchingHeadersCondition, matchingConsumesCondition);, +					this.headersCondition.equals(other.headersCondition) &&, +					this.consumesCondition.equals(other.consumesCondition));, +			result = 31 * result + consumesCondition.hashCode();, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +						RequestConditionFactory.parseConsumes(annotation.consumes(), annotation.headers()));, +			result = mapping.getConsumes().compareTo(otherMapping.getConsumes());, +			if (result != 0) {, +				return result;, +			}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingInfo.java, +import org.springframework.web.servlet.mvc.method.condition.ConsumesRequestCondition;, +import org.springframework.web.servlet.mvc.method.condition.HeadersRequestCondition;, +import org.springframework.web.servlet.mvc.method.condition.ParamsRequestCondition;, +	private final ParamsRequestCondition paramsCondition;, +	private final HeadersRequestCondition headersCondition;, +	private final ConsumesRequestCondition consumesCondition;, +	 * Creates a new {@code RequestMappingInfo} instance with the given URL patterns and HTTP methods., +	 * Creates a new {@code RequestMappingInfo} instance with a full set of conditions., +							 ParamsRequestCondition paramsCondition,, +							 HeadersRequestCondition headersCondition,, +							 ConsumesRequestCondition consumesCondition) {, +		this.paramsCondition = paramsCondition != null ? paramsCondition : new ParamsRequestCondition();, +		this.headersCondition = headersCondition != null ? headersCondition : new HeadersRequestCondition();, +		this.consumesCondition = consumesCondition != null ? consumesCondition : new ConsumesRequestCondition();, +	 * Returns the request parameters conditions of this request key., +	public ParamsRequestCondition getParams() {, +	 * Returns the request headers conditions of this request key., +	public HeadersRequestCondition getHeaders() {, +	 * Returns the request consumes conditions of this request key., +	 */, +	public ConsumesRequestCondition getConsumes() {, +		return consumesCondition;, +	}, +, +	/**, +	 * Combines this {@code RequestMappingInfo} with another as follows:, +	 * <li>Request parameters are combined as per {@link ParamsRequestCondition#combine(ParamsRequestCondition)}., +	 * <li>Request headers are combined as per {@link HeadersRequestCondition#combine(HeadersRequestCondition)}., +	 * <li>Consumes are combined as per {@link ConsumesRequestCondition#combine(ConsumesRequestCondition)}., +		ParamsRequestCondition params = this.paramsCondition.combine(methodKey.paramsCondition);, +		HeadersRequestCondition headers = this.headersCondition.combine(methodKey.headersCondition);, +		ConsumesRequestCondition consumes = this.consumesCondition.combine(methodKey.consumesCondition);, +	 * Returns a new {@code RequestMappingInfo} that contains all conditions of this key that are relevant to the request., +		ParamsRequestCondition matchingParamsCondition = paramsCondition.getMatchingCondition(request);, +		HeadersRequestCondition matchingHeadersCondition = headersCondition.getMatchingCondition(request);, +		ConsumesRequestCondition matchingConsumesCondition = consumesCondition.getMatchingCondition(request);]