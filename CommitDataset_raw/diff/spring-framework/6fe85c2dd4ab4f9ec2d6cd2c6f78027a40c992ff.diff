[+++ b/spring-beans/src/test/java/org/springframework/beans/factory/config/PropertyResourceConfigurerTests.java, + * Copyright 2002-2015 the original author or authors., + * @since 02.10.2003, + * @see PropertyPlaceholderConfigurerTests, +public class PropertyResourceConfigurerTests {, +	private final DefaultListableBeanFactory factory = new DefaultListableBeanFactory();, +		BeanDefinition def1 = BeanDefinitionBuilder.genericBeanDefinition(TestBean.class).getBeanDefinition();, +		BeanDefinition def2 = BeanDefinitionBuilder.genericBeanDefinition(TestBean.class).getBeanDefinition();, +		BeanDefinition def = BeanDefinitionBuilder.genericBeanDefinition(IndexedTestBean.class).getBeanDefinition();, +		BeanDefinition def = BeanDefinitionBuilder.genericBeanDefinition(IndexedTestBean.class).getBeanDefinition();, +		BeanDefinition def = BeanDefinitionBuilder.genericBeanDefinition(IndexedTestBean.class).getBeanDefinition();, +		BeanDefinition def = BeanDefinitionBuilder.genericBeanDefinition(PropertiesHolder.class).getBeanDefinition();, +		BeanDefinition def = BeanDefinitionBuilder.genericBeanDefinition(IndexedTestBean.class).getBeanDefinition();, +		BeanDefinition def = BeanDefinitionBuilder.genericBeanDefinition(IndexedTestBean.class).getBeanDefinition();, +		poc.setLocations(TEST_PROPS, XTEST_PROPS);, +		BeanDefinition def = BeanDefinitionBuilder.genericBeanDefinition(IndexedTestBean.class).getBeanDefinition();, +		BeanDefinition def = BeanDefinitionBuilder.genericBeanDefinition(IndexedTestBean.class).getBeanDefinition();, +		innerPvs.add("country", "${os.name}");, +		assertEquals(System.getProperty("os.name"), inner1.getCountry());, +		assertEquals(System.getProperty("os.name"), inner2.getCountry());, +		factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class), +				.addPropertyValue("country", "${os.name}").getBeanDefinition());, +		assertEquals(System.getProperty("os.name"), tb.getCountry());, +		factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class), +				.addPropertyValue("country", "${os.name}").getBeanDefinition());, +		assertEquals("myos", tb.getCountry());, +		factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class), +				.addPropertyValue("country", "${os.name}").getBeanDefinition());, +		assertEquals(System.getProperty("os.name"), tb.getCountry());, +		factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class), +		factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class), +		factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class), +		factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class), +		factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class), +		factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class), +		factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class).getBeanDefinition());, +		factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class).getBeanDefinition());, +		factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class), +		factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class), +		factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class), +		factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class), +		factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class), +		factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class), +		factory.registerBeanDefinition("tb", genericBeanDefinition(TestBean.class), +	static class PropertiesHolder {, +, +		private Properties props = new Properties();, +, +		public Properties getHeldProperties() {, +			return props;, +		}, +, +		public void setHeldProperties(Properties props) {, +			this.props = props;, +		}, +	}, +, +, +, +		private final Preferences userRoot = new MockPreferences();, +		private final Preferences systemRoot = new MockPreferences();, +			return this.systemRoot;, +			return this.userRoot;, +, +]