[+++ b/spring-core/src/main/java/org/springframework/util/xml/SimpleNamespaceContext.java, + * Copyright 2002-2018 the original author or authors., +			Set<String> prefixes =, +					this.namespaceUriToPrefixes.computeIfAbsent(namespaceUri, k -> new LinkedHashSet<>());, +++ b/spring-core/src/main/java/org/springframework/util/xml/SimpleNamespaceContext.java, + * Copyright 2002-2018 the original author or authors., +			Set<String> prefixes =, +					this.namespaceUriToPrefixes.computeIfAbsent(namespaceUri, k -> new LinkedHashSet<>());, +++ b/spring-jms/src/main/java/org/springframework/jms/connection/CachingConnectionFactory.java, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.concurrent.ConcurrentMap;, +	private final ConcurrentMap<Integer, LinkedList<Session>> cachedSessions = new ConcurrentHashMap<>();, +		LinkedList<Session> sessionList = this.cachedSessions.computeIfAbsent(mode, k -> new LinkedList<>());, +++ b/spring-core/src/main/java/org/springframework/util/xml/SimpleNamespaceContext.java, + * Copyright 2002-2018 the original author or authors., +			Set<String> prefixes =, +					this.namespaceUriToPrefixes.computeIfAbsent(namespaceUri, k -> new LinkedHashSet<>());, +++ b/spring-jms/src/main/java/org/springframework/jms/connection/CachingConnectionFactory.java, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.concurrent.ConcurrentMap;, +	private final ConcurrentMap<Integer, LinkedList<Session>> cachedSessions = new ConcurrentHashMap<>();, +		LinkedList<Session> sessionList = this.cachedSessions.computeIfAbsent(mode, k -> new LinkedList<>());, +++ b/spring-jms/src/main/java/org/springframework/jms/connection/JmsResourceHolder.java, + * Copyright 2002-2018 the original author or authors., +				List<Session> sessions = this.sessionsPerConnection.computeIfAbsent(connection, k -> new LinkedList<>());, +++ b/spring-core/src/main/java/org/springframework/util/xml/SimpleNamespaceContext.java, + * Copyright 2002-2018 the original author or authors., +			Set<String> prefixes =, +					this.namespaceUriToPrefixes.computeIfAbsent(namespaceUri, k -> new LinkedHashSet<>());, +++ b/spring-jms/src/main/java/org/springframework/jms/connection/CachingConnectionFactory.java, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.concurrent.ConcurrentMap;, +	private final ConcurrentMap<Integer, LinkedList<Session>> cachedSessions = new ConcurrentHashMap<>();, +		LinkedList<Session> sessionList = this.cachedSessions.computeIfAbsent(mode, k -> new LinkedList<>());, +++ b/spring-jms/src/main/java/org/springframework/jms/connection/JmsResourceHolder.java, + * Copyright 2002-2018 the original author or authors., +				List<Session> sessions = this.sessionsPerConnection.computeIfAbsent(connection, k -> new LinkedList<>());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/NativeMessageHeaderAccessor.java, + * Copyright 2002-2018 the original author or authors., +		List<String> values = nativeHeaders.computeIfAbsent(name, k -> new LinkedList<>());, +		headers.forEach((key, values) -> values.forEach(value -> addNativeHeader(key, value)));, +++ b/spring-core/src/main/java/org/springframework/util/xml/SimpleNamespaceContext.java, + * Copyright 2002-2018 the original author or authors., +			Set<String> prefixes =, +					this.namespaceUriToPrefixes.computeIfAbsent(namespaceUri, k -> new LinkedHashSet<>());, +++ b/spring-jms/src/main/java/org/springframework/jms/connection/CachingConnectionFactory.java, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.concurrent.ConcurrentMap;, +	private final ConcurrentMap<Integer, LinkedList<Session>> cachedSessions = new ConcurrentHashMap<>();, +		LinkedList<Session> sessionList = this.cachedSessions.computeIfAbsent(mode, k -> new LinkedList<>());, +++ b/spring-jms/src/main/java/org/springframework/jms/connection/JmsResourceHolder.java, + * Copyright 2002-2018 the original author or authors., +				List<Session> sessions = this.sessionsPerConnection.computeIfAbsent(connection, k -> new LinkedList<>());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/NativeMessageHeaderAccessor.java, + * Copyright 2002-2018 the original author or authors., +		List<String> values = nativeHeaders.computeIfAbsent(name, k -> new LinkedList<>());, +		headers.forEach((key, values) -> values.forEach(value -> addNativeHeader(key, value)));, +++ b/spring-test/src/main/java/org/springframework/test/context/cache/DefaultContextCache.java, + * Copyright 2002-2018 the original author or authors., +			Set<MergedContextConfiguration> list = this.hierarchyMap.computeIfAbsent(parent, k -> new HashSet<>());]