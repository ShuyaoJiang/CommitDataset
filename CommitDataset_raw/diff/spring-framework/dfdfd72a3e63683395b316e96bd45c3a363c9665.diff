[+++ b/spring-messaging/src/test/java/org/springframework/messaging/core/GenericMessagingTemplateTests.java, +		final AtomicReference<Throwable> failure = new AtomicReference<Throwable>();, +		Throwable ex = failure.get();, +		if (ex != null) {, +			throw new AssertionError(ex);, +, +, +++ b/spring-messaging/src/test/java/org/springframework/messaging/core/GenericMessagingTemplateTests.java, +		final AtomicReference<Throwable> failure = new AtomicReference<Throwable>();, +		Throwable ex = failure.get();, +		if (ex != null) {, +			throw new AssertionError(ex);, +, +, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandlerTests.java, +import org.springframework.messaging.handler.DestinationPatternsMessageCondition;, +import org.springframework.messaging.handler.annotation.support.DestinationVariableMethodArgumentResolver;, +		SimpMessageHeaderAccessor accessor =, +				MessageHeaderAccessor.getAccessor(headers, SimpMessageHeaderAccessor.class);, +		accessor.setHeader(DestinationVariableMethodArgumentResolver.DESTINATION_TEMPLATE_VARIABLES_HEADER, vars);, +			headerAccessor.setHeader(DestinationPatternsMessageCondition.LOOKUP_DESTINATION_HEADER, dest);, +	@SuppressWarnings("unused"), +	String handleNoAnnotations() {, +		return PAYLOAD;, +	}, +, +	@SendTo, +	@SuppressWarnings("unused"), +	String handleAndSendToDefaultDestination() {, +		return PAYLOAD;, +	}, +, +	@SendTo({"/dest1", "/dest2"}), +	@SuppressWarnings("unused"), +	String handleAndSendTo() {, +		return PAYLOAD;, +	}, +, +	@SendTo("/topic/chat.message.filtered.{roomName}"), +	@SuppressWarnings("unused"), +	String handleAndSendToWithPlaceholders() {, +		return PAYLOAD;, +	}, +, +	@SendToUser, +	@SuppressWarnings("unused"), +	String handleAndSendToUserDefaultDestination() {, +		return PAYLOAD;, +	}, +, +	@SendToUser(broadcast = false), +	@SuppressWarnings("unused"), +	String handleAndSendToUserDefaultDestinationSingleSession() {, +		return PAYLOAD;, +	}, +, +	@SendToUser({"/dest1", "/dest2"}), +	@SuppressWarnings("unused"), +	String handleAndSendToUser() {, +		return PAYLOAD;, +	}, +, +	@SendToUser(destinations = { "/dest1", "/dest2" }, broadcast = false), +	@SuppressWarnings("unused"), +	String handleAndSendToUserSingleSession() {, +		return PAYLOAD;, +	}, +, +	@JsonView(MyJacksonView1.class), +	@SuppressWarnings("unused"), +	JacksonViewBean handleAndSendToJsonView() {, +		JacksonViewBean payload = new JacksonViewBean();, +		payload.setWithView1("with");, +		payload.setWithView2("with");, +		payload.setWithoutView("without");, +		return payload;, +	}, +, +, +, +, +, +, +, +, +, +++ b/spring-messaging/src/test/java/org/springframework/messaging/core/GenericMessagingTemplateTests.java, +		final AtomicReference<Throwable> failure = new AtomicReference<Throwable>();, +		Throwable ex = failure.get();, +		if (ex != null) {, +			throw new AssertionError(ex);, +, +, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandlerTests.java, +import org.springframework.messaging.handler.DestinationPatternsMessageCondition;, +import org.springframework.messaging.handler.annotation.support.DestinationVariableMethodArgumentResolver;, +		SimpMessageHeaderAccessor accessor =, +				MessageHeaderAccessor.getAccessor(headers, SimpMessageHeaderAccessor.class);, +		accessor.setHeader(DestinationVariableMethodArgumentResolver.DESTINATION_TEMPLATE_VARIABLES_HEADER, vars);, +			headerAccessor.setHeader(DestinationPatternsMessageCondition.LOOKUP_DESTINATION_HEADER, dest);]