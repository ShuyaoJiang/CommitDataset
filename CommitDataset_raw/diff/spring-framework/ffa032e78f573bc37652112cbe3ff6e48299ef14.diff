[+++ b/spring-core/src/main/java/org/springframework/util/MultiValueMap.java, +	 * Return a {@code Map} with the first values contained in this {@code MultiValueMap}., +++ b/spring-core/src/main/java/org/springframework/util/MultiValueMap.java, +	 * Return a {@code Map} with the first values contained in this {@code MultiValueMap}., +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestPart.java, + * <p>Supported method argument types include {@link MultipartFile} in conjunction with, + * Spring's {@link MultipartResolver} abstraction, {@code javax.servlet.http.Part} in, + * conjunction with Servlet 3.0 multipart requests, or otherwise for any other method, + * argument, the content of the part is passed through an {@link HttpMessageConverter}, + * taking into consideration the 'Content-Type' header of the request part. This is, + * analogous to what @{@link RequestBody} does to resolve an argument based on the, + * content of a non-multipart regular request., + * <p>Note that @{@link RequestParam} annotation can also be used to associate the part, + * of a "multipart/form-data" request with a method argument supporting the same method, + * argument types. The main difference is that when the method argument is not a String, + * or raw {@code MultipartFile} / {@code Part}, {@code @RequestParam} relies on type, + * conversion via a registered {@link Converter} or {@link PropertyEditor} while, + * {@link RequestPart} relies on {@link HttpMessageConverter HttpMessageConverters}, + * taking into consideration the 'Content-Type' header of the request part., + * {@link RequestParam} is likely to be used with name-value form fields while, + * {@link RequestPart} is likely to be used with parts containing more complex content, + * e.g. JSON, XML)., +++ b/spring-core/src/main/java/org/springframework/util/MultiValueMap.java, +	 * Return a {@code Map} with the first values contained in this {@code MultiValueMap}., +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestPart.java, + * <p>Supported method argument types include {@link MultipartFile} in conjunction with, + * Spring's {@link MultipartResolver} abstraction, {@code javax.servlet.http.Part} in, + * conjunction with Servlet 3.0 multipart requests, or otherwise for any other method, + * argument, the content of the part is passed through an {@link HttpMessageConverter}, + * taking into consideration the 'Content-Type' header of the request part. This is, + * analogous to what @{@link RequestBody} does to resolve an argument based on the, + * content of a non-multipart regular request., + * <p>Note that @{@link RequestParam} annotation can also be used to associate the part, + * of a "multipart/form-data" request with a method argument supporting the same method, + * argument types. The main difference is that when the method argument is not a String, + * or raw {@code MultipartFile} / {@code Part}, {@code @RequestParam} relies on type, + * conversion via a registered {@link Converter} or {@link PropertyEditor} while, + * {@link RequestPart} relies on {@link HttpMessageConverter HttpMessageConverters}, + * taking into consideration the 'Content-Type' header of the request part., + * {@link RequestParam} is likely to be used with name-value form fields while, + * {@link RequestPart} is likely to be used with parts containing more complex content, + * e.g. JSON, XML)., +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/MapMethodProcessor.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-core/src/main/java/org/springframework/util/MultiValueMap.java, +	 * Return a {@code Map} with the first values contained in this {@code MultiValueMap}., +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestPart.java, + * <p>Supported method argument types include {@link MultipartFile} in conjunction with, + * Spring's {@link MultipartResolver} abstraction, {@code javax.servlet.http.Part} in, + * conjunction with Servlet 3.0 multipart requests, or otherwise for any other method, + * argument, the content of the part is passed through an {@link HttpMessageConverter}, + * taking into consideration the 'Content-Type' header of the request part. This is, + * analogous to what @{@link RequestBody} does to resolve an argument based on the, + * content of a non-multipart regular request., + * <p>Note that @{@link RequestParam} annotation can also be used to associate the part, + * of a "multipart/form-data" request with a method argument supporting the same method, + * argument types. The main difference is that when the method argument is not a String, + * or raw {@code MultipartFile} / {@code Part}, {@code @RequestParam} relies on type, + * conversion via a registered {@link Converter} or {@link PropertyEditor} while, + * {@link RequestPart} relies on {@link HttpMessageConverter HttpMessageConverters}, + * taking into consideration the 'Content-Type' header of the request part., + * {@link RequestParam} is likely to be used with name-value form fields while, + * {@link RequestPart} is likely to be used with parts containing more complex content, + * e.g. JSON, XML)., +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/MapMethodProcessor.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolver.java, +import org.springframework.web.multipart.MultipartRequest;, +	 * This excludes {@link Map} params where the annotation does not specify a name., +	 * See {@link RequestParamMapMethodArgumentResolver} instead for such params., +	 * <li>Arguments of type {@link MultipartFile} unless annotated with @{@link RequestPart}., +	 * <li>Arguments of type {@code Part} unless annotated with @{@link RequestPart}., +	 * <li>In default resolution mode, simple type arguments even if not with @{@link RequestParam}., +		MultipartRequest multipartRequest = request.getNativeRequest(MultipartRequest.class);, +++ b/spring-core/src/main/java/org/springframework/util/MultiValueMap.java, +	 * Return a {@code Map} with the first values contained in this {@code MultiValueMap}., +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestPart.java, + * <p>Supported method argument types include {@link MultipartFile} in conjunction with, + * Spring's {@link MultipartResolver} abstraction, {@code javax.servlet.http.Part} in, + * conjunction with Servlet 3.0 multipart requests, or otherwise for any other method, + * argument, the content of the part is passed through an {@link HttpMessageConverter}, + * taking into consideration the 'Content-Type' header of the request part. This is, + * analogous to what @{@link RequestBody} does to resolve an argument based on the, + * content of a non-multipart regular request., + * <p>Note that @{@link RequestParam} annotation can also be used to associate the part, + * of a "multipart/form-data" request with a method argument supporting the same method, + * argument types. The main difference is that when the method argument is not a String, + * or raw {@code MultipartFile} / {@code Part}, {@code @RequestParam} relies on type, + * conversion via a registered {@link Converter} or {@link PropertyEditor} while, + * {@link RequestPart} relies on {@link HttpMessageConverter HttpMessageConverters}, + * taking into consideration the 'Content-Type' header of the request part., + * {@link RequestParam} is likely to be used with name-value form fields while, + * {@link RequestPart} is likely to be used with parts containing more complex content, + * e.g. JSON, XML)., +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/MapMethodProcessor.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolver.java, +import org.springframework.web.multipart.MultipartRequest;, +	 * This excludes {@link Map} params where the annotation does not specify a name., +	 * See {@link RequestParamMapMethodArgumentResolver} instead for such params.]