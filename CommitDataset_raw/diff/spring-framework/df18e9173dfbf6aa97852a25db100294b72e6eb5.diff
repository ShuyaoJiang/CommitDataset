[+++ b/spring-tx/src/main/java/org/springframework/dao/support/PersistenceExceptionTranslationInterceptor.java, + * Copyright 2002-2013 the original author or authors., +	private volatile PersistenceExceptionTranslator persistenceExceptionTranslator;, +	private ListableBeanFactory beanFactory;, +, +	 * @param pet the PersistenceExceptionTranslator to use, +	public PersistenceExceptionTranslationInterceptor(PersistenceExceptionTranslator pet) {, +		Assert.notNull(pet, "PersistenceExceptionTranslator must not be null");, +		this.persistenceExceptionTranslator = pet;, +		Assert.notNull(beanFactory, "ListableBeanFactory must not be null");, +		this.beanFactory = beanFactory;, +			this.beanFactory = (ListableBeanFactory) beanFactory;, +		if (this.persistenceExceptionTranslator == null && this.beanFactory == null) {, +				if (this.persistenceExceptionTranslator == null) {, +					this.persistenceExceptionTranslator = detectPersistenceExceptionTranslators(this.beanFactory);, +				}, +	/**, +	 * Detect all PersistenceExceptionTranslators in the given BeanFactory., +	 * @param beanFactory the ListableBeanFactory to obtaining all, +	 * PersistenceExceptionTranslators from, +	 * @return a chained PersistenceExceptionTranslator, combining all, +	 * PersistenceExceptionTranslators found in the factory, +	 * @see ChainedPersistenceExceptionTranslator, +	 */, +	protected PersistenceExceptionTranslator detectPersistenceExceptionTranslators(ListableBeanFactory beanFactory) {, +		// Find all translators, being careful not to activate FactoryBeans., +		Map<String, PersistenceExceptionTranslator> pets = BeanFactoryUtils.beansOfTypeIncludingAncestors(, +				beanFactory, PersistenceExceptionTranslator.class, false, false);, +		ChainedPersistenceExceptionTranslator cpet = new ChainedPersistenceExceptionTranslator();, +		for (PersistenceExceptionTranslator pet : pets.values()) {, +			cpet.addDelegate(pet);, +		}, +		return cpet;, +	}, +, +++ b/spring-tx/src/main/java/org/springframework/dao/support/PersistenceExceptionTranslationInterceptor.java, + * Copyright 2002-2013 the original author or authors., +	private volatile PersistenceExceptionTranslator persistenceExceptionTranslator;, +	private ListableBeanFactory beanFactory;, +, +	 * @param pet the PersistenceExceptionTranslator to use, +	public PersistenceExceptionTranslationInterceptor(PersistenceExceptionTranslator pet) {, +		Assert.notNull(pet, "PersistenceExceptionTranslator must not be null");, +		this.persistenceExceptionTranslator = pet;, +		Assert.notNull(beanFactory, "ListableBeanFactory must not be null");, +		this.beanFactory = beanFactory;, +			this.beanFactory = (ListableBeanFactory) beanFactory;, +		if (this.persistenceExceptionTranslator == null && this.beanFactory == null) {, +				if (this.persistenceExceptionTranslator == null) {, +					this.persistenceExceptionTranslator = detectPersistenceExceptionTranslators(this.beanFactory);, +				}, +	/**, +	 * Detect all PersistenceExceptionTranslators in the given BeanFactory., +	 * @param beanFactory the ListableBeanFactory to obtaining all, +	 * PersistenceExceptionTranslators from, +	 * @return a chained PersistenceExceptionTranslator, combining all, +	 * PersistenceExceptionTranslators found in the factory, +	 * @see ChainedPersistenceExceptionTranslator, +	 */, +	protected PersistenceExceptionTranslator detectPersistenceExceptionTranslators(ListableBeanFactory beanFactory) {, +		// Find all translators, being careful not to activate FactoryBeans., +		Map<String, PersistenceExceptionTranslator> pets = BeanFactoryUtils.beansOfTypeIncludingAncestors(, +				beanFactory, PersistenceExceptionTranslator.class, false, false);, +		ChainedPersistenceExceptionTranslator cpet = new ChainedPersistenceExceptionTranslator();, +		for (PersistenceExceptionTranslator pet : pets.values()) {, +			cpet.addDelegate(pet);, +		}, +		return cpet;, +	}, +, +++ b/spring-tx/src/test/java/org/springframework/dao/annotation/PersistenceExceptionTranslationPostProcessorTests.java, + * Copyright 2002-2013 the original author or authors., +import javax.persistence.PersistenceException;, +, +import org.springframework.dao.DataAccessException;, +import org.springframework.dao.DataAccessResourceFailureException;, +import org.springframework.dao.support.PersistenceExceptionTranslator;, + * @author Juergen Hoeller, +		gac.registerBeanDefinition("myTranslator",, +				new RootBeanDefinition(MyPersistenceExceptionTranslator.class));, +		rwi2.additionalMethod(false);, +		try {, +			rwi2.additionalMethod(true);, +			fail("Should have thrown DataAccessResourceFailureException");, +		}, +		catch (DataAccessResourceFailureException ex) {, +			assertEquals("my failure", ex.getMessage());, +		}, +, +, +		void additionalMethod(boolean fail);, +, +		public void additionalMethod(boolean fail) {, +			if (fail) {, +				throw new PersistenceException("my failure");, +	}, +, +, +	public static class MyPersistenceExceptionTranslator implements PersistenceExceptionTranslator {, +]