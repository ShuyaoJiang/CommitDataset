[+++ b/spring-web/src/main/java/org/springframework/web/client/HttpMessageConverterExtractor.java, +	private final Class<T> responseClass;, +, +	@SuppressWarnings("unchecked"), +		this.responseClass = (responseType instanceof Class) ? (Class<T>) responseType : null;, +			if (messageConverter instanceof GenericHttpMessageConverter) {, +			if (this.responseClass != null) {, +				if (messageConverter.canRead(this.responseClass, contentType)) {, +					if (logger.isDebugEnabled()) {, +						logger.debug("Reading [" + this.responseClass.getName() + "] as \"" +, +								contentType + "\" using [" + messageConverter + "]");, +					}, +					return (T) messageConverter.read(this.responseClass, response);, +				}, +			}, +++ b/spring-web/src/main/java/org/springframework/web/client/HttpMessageConverterExtractor.java, +	private final Class<T> responseClass;, +, +	@SuppressWarnings("unchecked"), +		this.responseClass = (responseType instanceof Class) ? (Class<T>) responseType : null;, +			if (messageConverter instanceof GenericHttpMessageConverter) {, +			if (this.responseClass != null) {, +				if (messageConverter.canRead(this.responseClass, contentType)) {, +					if (logger.isDebugEnabled()) {, +						logger.debug("Reading [" + this.responseClass.getName() + "] as \"" +, +								contentType + "\" using [" + messageConverter + "]");, +					}, +					return (T) messageConverter.read(this.responseClass, response);, +				}, +			}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.java, +import java.lang.reflect.Type;, +import org.springframework.http.converter.GenericHttpMessageConverter;, +	protected <T> Object readWithMessageConverters(NativeWebRequest webRequest,, +			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException {, +			Type paramType) throws IOException, HttpMediaTypeNotSupportedException {, +				Class<T> paramClass = (paramType instanceof Class) ? (Class) paramType : null;, +, +					if (messageConverter instanceof GenericHttpMessageConverter) {, +						GenericHttpMessageConverter genericMessageConverter = (GenericHttpMessageConverter) messageConverter;, +						if (genericMessageConverter.canRead(paramType, contentType)) {, +								logger.debug("Reading [" + paramType + "] as \"" +, +										contentType + "\" using [" + messageConverter + "]");, +							}, +							return (T) genericMessageConverter.read(paramType, inputMessage);, +						}, +					}, +					if (paramClass != null) {, +						if (messageConverter.canRead(paramClass, contentType)) {, +							if (logger.isDebugEnabled()) {, +								logger.debug("Reading [" + paramClass.getName() + "] as \"" + contentType + "\" using [" +, +							return ((HttpMessageConverter<T>) messageConverter).read(paramClass, inputMessage);, +						}, +++ b/spring-web/src/main/java/org/springframework/web/client/HttpMessageConverterExtractor.java, +	private final Class<T> responseClass;, +, +	@SuppressWarnings("unchecked"), +		this.responseClass = (responseType instanceof Class) ? (Class<T>) responseType : null;, +			if (messageConverter instanceof GenericHttpMessageConverter) {, +			if (this.responseClass != null) {, +				if (messageConverter.canRead(this.responseClass, contentType)) {, +					if (logger.isDebugEnabled()) {, +						logger.debug("Reading [" + this.responseClass.getName() + "] as \"" +, +								contentType + "\" using [" + messageConverter + "]");, +					}, +					return (T) messageConverter.read(this.responseClass, response);, +				}, +			}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.java, +import java.lang.reflect.Type;, +import org.springframework.http.converter.GenericHttpMessageConverter;, +	protected <T> Object readWithMessageConverters(NativeWebRequest webRequest,, +			MethodParameter methodParam, Type paramType) throws IOException, HttpMediaTypeNotSupportedException {, +			Type paramType) throws IOException, HttpMediaTypeNotSupportedException {, +				Class<T> paramClass = (paramType instanceof Class) ? (Class) paramType : null;, +, +					if (messageConverter instanceof GenericHttpMessageConverter) {, +						GenericHttpMessageConverter genericMessageConverter = (GenericHttpMessageConverter) messageConverter;, +						if (genericMessageConverter.canRead(paramType, contentType)) {, +								logger.debug("Reading [" + paramType + "] as \"" +, +										contentType + "\" using [" + messageConverter + "]");, +							}, +							return (T) genericMessageConverter.read(paramType, inputMessage);, +						}, +					}, +					if (paramClass != null) {, +						if (messageConverter.canRead(paramClass, contentType)) {, +							if (logger.isDebugEnabled()) {, +								logger.debug("Reading [" + paramClass.getName() + "] as \"" + contentType + "\" using [" +, +							return ((HttpMessageConverter<T>) messageConverter).read(paramClass, inputMessage);, +						}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java, +		Type paramType = getHttpEntityType(parameter);, +	private Type getHttpEntityType(MethodParameter parameter) {, +					return Array.newInstance((Class<?>) componentType, 0).getClass();, +			else if (typeArgument instanceof ParameterizedType) {, +				return typeArgument;, +			}, +++ b/spring-web/src/main/java/org/springframework/web/client/HttpMessageConverterExtractor.java, +	private final Class<T> responseClass;]