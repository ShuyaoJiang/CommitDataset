[+++ b/org.springframework.web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java, + * Copyright 2002-2011 the original author or authors., +public class ResourceHttpMessageConverter extends AbstractHttpMessageConverter<Resource> {, +	public ResourceHttpMessageConverter() {, +		super(MediaType.ALL);, +	}, +	@Override, +	protected boolean supports(Class<?> clazz) {, +	@Override, +	protected Resource readInternal(Class<? extends Resource> clazz, HttpInputMessage inputMessage), +	@Override, +	protected MediaType getDefaultContentType(Resource resource) {, +	@Override, +	protected Long getContentLength(Resource resource, MediaType contentType) {, +		try {, +		catch (IOException e) {, +			return null;, +		}, +	}, +	@Override, +	protected void writeInternal(Resource resource, HttpOutputMessage outputMessage), +			throws IOException, HttpMessageNotWritableException {, +		FileCopyUtils.copy(resource.getInputStream(), outputMessage.getBody());, +		outputMessage.getBody().flush();, +	}, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java, + * Copyright 2002-2011 the original author or authors., +public class ResourceHttpMessageConverter extends AbstractHttpMessageConverter<Resource> {, +	public ResourceHttpMessageConverter() {, +		super(MediaType.ALL);, +	}, +	@Override, +	protected boolean supports(Class<?> clazz) {, +	@Override, +	protected Resource readInternal(Class<? extends Resource> clazz, HttpInputMessage inputMessage), +	@Override, +	protected MediaType getDefaultContentType(Resource resource) {, +	@Override, +	protected Long getContentLength(Resource resource, MediaType contentType) {, +		try {, +		catch (IOException e) {, +			return null;, +		}, +	}, +	@Override, +	protected void writeInternal(Resource resource, HttpOutputMessage outputMessage), +			throws IOException, HttpMessageNotWritableException {, +		FileCopyUtils.copy(resource.getInputStream(), outputMessage.getBody());, +		outputMessage.getBody().flush();, +	}, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/StringHttpMessageConverter.java, + * Copyright 2002-2011 the original author or authors., +		Charset charset = getContentTypeCharset(inputMessage.getHeaders().getContentType());, +		Charset charset = getContentTypeCharset(contentType);, +		Charset charset = getContentTypeCharset(outputMessage.getHeaders().getContentType());, +	private Charset getContentTypeCharset(MediaType contentType) {, +		if (contentType != null && contentType.getCharSet() != null) {, +			return contentType.getCharSet();, +		}, +		else {, +			return DEFAULT_CHARSET;, +		}, +	}, +, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java, + * Copyright 2002-2011 the original author or authors., +public class ResourceHttpMessageConverter extends AbstractHttpMessageConverter<Resource> {, +	public ResourceHttpMessageConverter() {, +		super(MediaType.ALL);, +	}, +	@Override, +	protected boolean supports(Class<?> clazz) {, +	@Override, +	protected Resource readInternal(Class<? extends Resource> clazz, HttpInputMessage inputMessage), +	@Override, +	protected MediaType getDefaultContentType(Resource resource) {, +	@Override, +	protected Long getContentLength(Resource resource, MediaType contentType) {, +		try {, +		catch (IOException e) {, +			return null;, +		}, +	}, +	@Override, +	protected void writeInternal(Resource resource, HttpOutputMessage outputMessage), +			throws IOException, HttpMessageNotWritableException {, +		FileCopyUtils.copy(resource.getInputStream(), outputMessage.getBody());, +		outputMessage.getBody().flush();, +	}, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/StringHttpMessageConverter.java, + * Copyright 2002-2011 the original author or authors., +		Charset charset = getContentTypeCharset(inputMessage.getHeaders().getContentType());, +		Charset charset = getContentTypeCharset(contentType);, +		Charset charset = getContentTypeCharset(outputMessage.getHeaders().getContentType());, +	private Charset getContentTypeCharset(MediaType contentType) {, +		if (contentType != null && contentType.getCharSet() != null) {, +			return contentType.getCharSet();, +		}, +		else {, +			return DEFAULT_CHARSET;]