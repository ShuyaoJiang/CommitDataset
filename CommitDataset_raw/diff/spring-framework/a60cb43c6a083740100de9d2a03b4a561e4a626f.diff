[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * Returns true if an object of this type descriptor can be assigned to the location described by the given type descriptor., +	 * For example, valueOf(String.class).isAssignableTo(valueOf(CharSequence.class)) returns true because a String value can be assigned to a CharSequence variable. , +	 * On the other hand, valueOf(Number.class).isAssignableTo(valueOf(Integer.class)) returns false because, while all Integers are Numbers, not all Numbers are Integers., +	 * <p>, +	 * For arrays, collections, and maps, element and key/value types are checked if declared., +	 * For example, a List&lt;String&gt; field value is assignable to a Collection&lt;CharSequence&gt; field, but List&lt;Number&gt; is not assignable to List&lt;Integer&gt;., +		boolean typesAssignable = typeDescriptor.getObjectType().isAssignableFrom(getObjectType());, +		if (!typesAssignable) {, +			return false;, +		}, +		if (isArray()) {, +			return getElementTypeDescriptor().isAssignableTo(typeDescriptor.getElementTypeDescriptor());, +		} else if (isCollection()) {, +			return isNestedAssignable(getElementTypeDescriptor(), typeDescriptor.getElementTypeDescriptor());, +		} else if (isMap()) {, +			return isNestedAssignable(getMapKeyTypeDescriptor(), typeDescriptor.getMapKeyTypeDescriptor()) &&, +				isNestedAssignable(getMapValueTypeDescriptor(), typeDescriptor.getMapValueTypeDescriptor());, +		} else {	, +			return true;, +		}, +	private boolean isNestedAssignable(TypeDescriptor nestedTypeDescriptor, TypeDescriptor otherNestedTypeDescriptor) {, +		if (nestedTypeDescriptor == null || otherNestedTypeDescriptor == null) {, +			return true;, +		}, +		return nestedTypeDescriptor.isAssignableTo(otherNestedTypeDescriptor);, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * Returns true if an object of this type descriptor can be assigned to the location described by the given type descriptor., +	 * For example, valueOf(String.class).isAssignableTo(valueOf(CharSequence.class)) returns true because a String value can be assigned to a CharSequence variable. , +	 * On the other hand, valueOf(Number.class).isAssignableTo(valueOf(Integer.class)) returns false because, while all Integers are Numbers, not all Numbers are Integers., +	 * <p>, +	 * For arrays, collections, and maps, element and key/value types are checked if declared., +	 * For example, a List&lt;String&gt; field value is assignable to a Collection&lt;CharSequence&gt; field, but List&lt;Number&gt; is not assignable to List&lt;Integer&gt;., +		boolean typesAssignable = typeDescriptor.getObjectType().isAssignableFrom(getObjectType());, +		if (!typesAssignable) {, +			return false;, +		}, +		if (isArray()) {, +			return getElementTypeDescriptor().isAssignableTo(typeDescriptor.getElementTypeDescriptor());, +		} else if (isCollection()) {, +			return isNestedAssignable(getElementTypeDescriptor(), typeDescriptor.getElementTypeDescriptor());, +		} else if (isMap()) {, +			return isNestedAssignable(getMapKeyTypeDescriptor(), typeDescriptor.getMapKeyTypeDescriptor()) &&, +				isNestedAssignable(getMapValueTypeDescriptor(), typeDescriptor.getMapValueTypeDescriptor());, +		} else {	, +			return true;, +		}, +	private boolean isNestedAssignable(TypeDescriptor nestedTypeDescriptor, TypeDescriptor otherNestedTypeDescriptor) {, +		if (nestedTypeDescriptor == null || otherNestedTypeDescriptor == null) {, +			return true;, +		}, +		return nestedTypeDescriptor.isAssignableTo(otherNestedTypeDescriptor);, +	}, +, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/TypeDescriptorTests.java, +		assertFalse(new TypeDescriptor(getClass().getField("isAssignableElementTypes")).isAssignableTo(new TypeDescriptor(getClass().getField("listField"))));, +		assertFalse(new TypeDescriptor(getClass().getField("isAssignableMapKeyValueTypes")).isAssignableTo(new TypeDescriptor(getClass().getField("mapField"))));		]