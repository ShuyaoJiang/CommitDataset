[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AbstractAliasAwareAnnotationAttributeExtractor.java, +, +, +		if (aliasName != null) {, +			if (!ObjectUtils.nullSafeEquals(attributeValue, aliasValue) &&, +					!ObjectUtils.nullSafeEquals(attributeValue, defaultValue) &&, +					!ObjectUtils.nullSafeEquals(aliasValue, defaultValue)) {, +				String elementName = (getAnnotatedElement() != null ? getAnnotatedElement().toString() : "unknown element");, +				throw new AnnotationConfigurationException(String.format(, +						"In annotation [%s] declared on %s and synthesized from [%s], attribute '%s' and its " +, +						"alias '%s' are present with values of [%s] and [%s], but only one is permitted.",, +						getAnnotationType().getName(), elementName, getSource(), attributeName, aliasName,, +						ObjectUtils.nullSafeToString(attributeValue), ObjectUtils.nullSafeToString(aliasValue)));, +			if (ObjectUtils.nullSafeEquals(attributeValue, defaultValue)) {, +, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AbstractAliasAwareAnnotationAttributeExtractor.java, +, +, +		if (aliasName != null) {, +			if (!ObjectUtils.nullSafeEquals(attributeValue, aliasValue) &&, +					!ObjectUtils.nullSafeEquals(attributeValue, defaultValue) &&, +					!ObjectUtils.nullSafeEquals(aliasValue, defaultValue)) {, +				String elementName = (getAnnotatedElement() != null ? getAnnotatedElement().toString() : "unknown element");, +				throw new AnnotationConfigurationException(String.format(, +						"In annotation [%s] declared on %s and synthesized from [%s], attribute '%s' and its " +, +						"alias '%s' are present with values of [%s] and [%s], but only one is permitted.",, +						getAnnotationType().getName(), elementName, getSource(), attributeName, aliasName,, +						ObjectUtils.nullSafeToString(attributeValue), ObjectUtils.nullSafeToString(aliasValue)));, +			if (ObjectUtils.nullSafeEquals(attributeValue, defaultValue)) {, +, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationConfigurationException.java, +import org.springframework.core.NestedRuntimeException;, +, +public class AnnotationConfigurationException extends NestedRuntimeException {, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AbstractAliasAwareAnnotationAttributeExtractor.java, +, +, +		if (aliasName != null) {, +			if (!ObjectUtils.nullSafeEquals(attributeValue, aliasValue) &&, +					!ObjectUtils.nullSafeEquals(attributeValue, defaultValue) &&, +					!ObjectUtils.nullSafeEquals(aliasValue, defaultValue)) {, +				String elementName = (getAnnotatedElement() != null ? getAnnotatedElement().toString() : "unknown element");, +				throw new AnnotationConfigurationException(String.format(, +						"In annotation [%s] declared on %s and synthesized from [%s], attribute '%s' and its " +, +						"alias '%s' are present with values of [%s] and [%s], but only one is permitted.",, +						getAnnotationType().getName(), elementName, getSource(), attributeName, aliasName,, +						ObjectUtils.nullSafeToString(attributeValue), ObjectUtils.nullSafeToString(aliasValue)));, +			if (ObjectUtils.nullSafeEquals(attributeValue, defaultValue)) {, +, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationConfigurationException.java, +import org.springframework.core.NestedRuntimeException;, +, +public class AnnotationConfigurationException extends NestedRuntimeException {, +++ b/spring-core/src/main/java/org/springframework/core/annotation/DefaultAnnotationAttributeExtractor.java, +, +	@Override, +	public Annotation getSource() {, +		return (Annotation) super.getSource();, +	}, +, +		return ReflectionUtils.invokeMethod(attributeMethod, getSource());, +		Method attributeMethod = ReflectionUtils.findMethod(getSource().annotationType(), attributeName);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AbstractAliasAwareAnnotationAttributeExtractor.java, +, +, +		if (aliasName != null) {, +			if (!ObjectUtils.nullSafeEquals(attributeValue, aliasValue) &&, +					!ObjectUtils.nullSafeEquals(attributeValue, defaultValue) &&, +					!ObjectUtils.nullSafeEquals(aliasValue, defaultValue)) {, +				String elementName = (getAnnotatedElement() != null ? getAnnotatedElement().toString() : "unknown element");, +				throw new AnnotationConfigurationException(String.format(, +						"In annotation [%s] declared on %s and synthesized from [%s], attribute '%s' and its " +, +						"alias '%s' are present with values of [%s] and [%s], but only one is permitted.",, +						getAnnotationType().getName(), elementName, getSource(), attributeName, aliasName,, +						ObjectUtils.nullSafeToString(attributeValue), ObjectUtils.nullSafeToString(aliasValue)));, +			if (ObjectUtils.nullSafeEquals(attributeValue, defaultValue)) {, +, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationConfigurationException.java, +import org.springframework.core.NestedRuntimeException;, +, +public class AnnotationConfigurationException extends NestedRuntimeException {, +++ b/spring-core/src/main/java/org/springframework/core/annotation/DefaultAnnotationAttributeExtractor.java, +, +	@Override, +	public Annotation getSource() {, +		return (Annotation) super.getSource();, +	}, +, +		return ReflectionUtils.invokeMethod(attributeMethod, getSource());, +		Method attributeMethod = ReflectionUtils.findMethod(getSource().annotationType(), attributeName);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/MapAnnotationAttributeExtractor.java, +, +		super(annotationType, annotatedElement, enrichAndValidateAttributes(attributes, annotationType));, +	}, +, +, +	@SuppressWarnings("unchecked"), +	public Map<String, Object> getSource() {, +		return (Map<String, Object>) super.getSource();, +		return getSource().get(attributeMethod.getName());]