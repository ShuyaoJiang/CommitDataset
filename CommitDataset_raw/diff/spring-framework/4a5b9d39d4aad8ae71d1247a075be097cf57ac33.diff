[+++ b/spring-web/src/main/java/org/springframework/http/CacheControl.java, +, +++ b/spring-web/src/main/java/org/springframework/http/CacheControl.java, +, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +import java.time.Duration;, +	 * @since 5.2, +	 */, +	public void setAccessControlMaxAge(Duration maxAge) {, +		set(ACCESS_CONTROL_MAX_AGE, Long.toString(maxAge.getSeconds()));, +	}, +, +	/**, +	 * Set the (new) value of the {@code Access-Control-Max-Age} response header., +	 * @since 5.2, +	 */, +	public void setDate(ZonedDateTime date) {, +		setZonedDateTime(DATE, date);, +	}, +, +	/**, +	 * Set the date and time at which the message was created, as specified, +	 * by the {@code Date} header., +	 * @since 5.2, +	 */, +	public void setDate(Instant date) {, +		setInstant(DATE, date);, +	}, +, +	/**, +	 * Set the date and time at which the message was created, as specified, +	 * by the {@code Date} header., +	 * @since 5.2, +	 */, +	public void setExpires(Instant expires) {, +		setInstant(EXPIRES, expires);, +	}, +, +	/**, +	 * Set the date and time at which the message is no longer valid,, +	 * as specified by the {@code Expires} header., +++ b/spring-web/src/main/java/org/springframework/http/CacheControl.java, +, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +import java.time.Duration;, +	 * @since 5.2, +	 */, +	public void setAccessControlMaxAge(Duration maxAge) {, +		set(ACCESS_CONTROL_MAX_AGE, Long.toString(maxAge.getSeconds()));, +	}, +, +	/**, +	 * Set the (new) value of the {@code Access-Control-Max-Age} response header., +	 * @since 5.2, +	 */, +	public void setDate(ZonedDateTime date) {, +		setZonedDateTime(DATE, date);, +	}, +, +	/**, +	 * Set the date and time at which the message was created, as specified, +	 * by the {@code Date} header., +	 * @since 5.2, +	 */, +	public void setDate(Instant date) {, +		setInstant(DATE, date);, +	}, +, +	/**, +	 * Set the date and time at which the message was created, as specified, +	 * by the {@code Date} header., +	 * @since 5.2, +	 */, +	public void setExpires(Instant expires) {, +		setInstant(EXPIRES, expires);, +	}, +, +	/**, +	 * Set the date and time at which the message is no longer valid,, +	 * as specified by the {@code Expires} header., +++ b/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java, + * Copyright 2002-2019 the original author or authors., +import java.time.Duration;, +	private static final List<HttpMethod> DEFAULT_METHODS = Collections.unmodifiableList(, +			Arrays.asList(HttpMethod.GET, HttpMethod.HEAD));, +	private static final List<String> DEFAULT_PERMIT_METHODS = Collections.unmodifiableList(, +			Arrays.asList(HttpMethod.GET.name(), HttpMethod.HEAD.name(), HttpMethod.POST.name()));, +	private static final List<String> DEFAULT_PERMIT_ALL = Collections.unmodifiableList(, +			Collections.singletonList(ALL));, +	 * Configure how long, as a duration, the response from a pre-flight request, +	 * can be cached by clients., +	 * @since 5.2, +	 * @see #setMaxAge(Long), +	 */, +	public void setMaxAge(Duration maxAge) {, +		this.maxAge = maxAge.getSeconds();, +	}, +, +	/**, +]