[+++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java, +	public String methodName() {, +		return this.method.name();, +	}, +, +	@Override, +++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java, +	public String methodName() {, +		return this.method.name();, +	}, +, +	@Override, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerRequest.java, +	public String methodName() {, +		return request().getMethodValue();, +++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java, +	public String methodName() {, +		return this.method.name();, +	}, +, +	@Override, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerRequest.java, +	public String methodName() {, +		return request().getMethodValue();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, +		public String methodName() {, +			return this.request.methodName();, +		}, +, +		@Override, +++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java, +	public String methodName() {, +		return this.method.name();, +	}, +, +	@Override, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerRequest.java, +	public String methodName() {, +		return request().getMethodValue();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, +		public String methodName() {, +			return this.request.methodName();, +		}, +, +		@Override, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerRequest.java, +	 * @return the HTTP method as an HttpMethod enum value, or {@code null}, +	 * if not resolvable (e.g. in case of a non-standard HTTP method), +	default HttpMethod method() {, +		return HttpMethod.resolve(methodName());, +	}, +, +	/**, +	 * Return the name of the HTTP method., +	 * @return the HTTP method as a String, +	 */, +	String methodName();, +++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java, +	public String methodName() {, +		return this.method.name();, +	}, +, +	@Override, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerRequest.java, +	public String methodName() {, +		return request().getMethodValue();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, +		public String methodName() {, +			return this.request.methodName();, +		}, +, +		@Override, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerRequest.java, +	 * @return the HTTP method as an HttpMethod enum value, or {@code null}, +	 * if not resolvable (e.g. in case of a non-standard HTTP method), +	default HttpMethod method() {, +		return HttpMethod.resolve(methodName());, +	}, +, +	/**, +	 * Return the name of the HTTP method., +	 * @return the HTTP method as a String, +	 */, +	String methodName();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/support/ServerRequestWrapper.java, +	public String methodName() {, +		return this.delegate.methodName();, +	}, +, +	@Override, +++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java, +	public String methodName() {, +		return this.method.name();, +	}, +, +	@Override, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerRequest.java, +	public String methodName() {, +		return request().getMethodValue();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java]