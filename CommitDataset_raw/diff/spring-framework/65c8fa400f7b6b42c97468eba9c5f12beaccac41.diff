[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, +	 * @see #getBeanProvider(ResolvableType), +	 * @param requiredType type the bean must match; can be a generic type declaration., +	 * Note that collection types are not supported here, in contrast to reflective, +	 * injection points. For programmatically retrieving a list of beans matching a, +	 * specific type, specify the actual bean type as an argument here and subsequently, +	 * use {@link ObjectProvider#toList()} or its lazy streaming/iteration options., +	 * @see ObjectProvider#stream(), +	 * @see ObjectProvider#iterator(), +	 * @see ObjectProvider#toList(), +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, +	 * @see #getBeanProvider(ResolvableType), +	 * @param requiredType type the bean must match; can be a generic type declaration., +	 * Note that collection types are not supported here, in contrast to reflective, +	 * injection points. For programmatically retrieving a list of beans matching a, +	 * specific type, specify the actual bean type as an argument here and subsequently, +	 * use {@link ObjectProvider#toList()} or its lazy streaming/iteration options., +	 * @see ObjectProvider#stream(), +	 * @see ObjectProvider#iterator(), +	 * @see ObjectProvider#toList(), +++ b/spring-beans/src/main/java/org/springframework/beans/factory/ObjectProvider.java, +import java.util.List;, +import java.util.stream.Collectors;, + * @see BeanFactory#getBeanProvider, + * @see org.springframework.beans.factory.annotation.Autowired, +	 * Return a sequential {@link Stream} over lazily resolved object instances,, +	 * without specific ordering guarantees (but typically in registration order)., +	 * @since 5.1, +	 * @see #iterator(), +	 */, +	default Stream<T> stream() {, +		throw new UnsupportedOperationException("Multi-element access not supported");, +	}, +, +	/**, +	 * Return an {@link Iterator} over lazily resolved object instances,, +	 * without specific ordering guarantees (but typically in registration order)., +	 * Return a {@link List} with fully resolved object instances,, +	 * potentially pre-ordered according to a common comparator., +	 * <p>In a common Spring application context, this will be ordered, +	 * according to {@link org.springframework.core.Ordered} /, +	 * {@link org.springframework.core.annotation.Order} conventions,, +	 * analogous to multi-element injection points of list/array type., +	 * @see #stream(), +	default List<T> toList() {, +		return stream().collect(Collectors.toList());, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, +	 * @see #getBeanProvider(ResolvableType), +	 * @param requiredType type the bean must match; can be a generic type declaration., +	 * Note that collection types are not supported here, in contrast to reflective, +	 * injection points. For programmatically retrieving a list of beans matching a, +	 * specific type, specify the actual bean type as an argument here and subsequently, +	 * use {@link ObjectProvider#toList()} or its lazy streaming/iteration options., +	 * @see ObjectProvider#stream(), +	 * @see ObjectProvider#iterator(), +	 * @see ObjectProvider#toList(), +++ b/spring-beans/src/main/java/org/springframework/beans/factory/ObjectProvider.java, +import java.util.List;, +import java.util.stream.Collectors;, + * @see BeanFactory#getBeanProvider, + * @see org.springframework.beans.factory.annotation.Autowired, +	 * Return a sequential {@link Stream} over lazily resolved object instances,, +	 * without specific ordering guarantees (but typically in registration order)., +	 * @since 5.1, +	 * @see #iterator(), +	 */, +	default Stream<T> stream() {, +		throw new UnsupportedOperationException("Multi-element access not supported");, +	}, +, +	/**, +	 * Return an {@link Iterator} over lazily resolved object instances,, +	 * without specific ordering guarantees (but typically in registration order)., +	 * Return a {@link List} with fully resolved object instances,, +	 * potentially pre-ordered according to a common comparator., +	 * <p>In a common Spring application context, this will be ordered, +	 * according to {@link org.springframework.core.Ordered} /, +	 * {@link org.springframework.core.annotation.Order} conventions,, +	 * analogous to multi-element injection points of list/array type., +	 * @see #stream(), +	default List<T> toList() {, +		return stream().collect(Collectors.toList());, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, +	 * Determine whether the given dependency declares a qualifier annotation., +	 * @see #isQualifier(Class), +	 * @see Qualifier, +	 */, +	@Override, +	public boolean hasQualifier(DependencyDescriptor descriptor) {, +		for (Annotation ann : descriptor.getAnnotations()) {, +			if (isQualifier(ann.annotationType())) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, +	 * @see #getBeanProvider(ResolvableType)]