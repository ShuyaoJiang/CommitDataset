[+++ b/spring-web-reactive/src/main/java/org/springframework/http/codec/json/JacksonJsonEncoder.java, +, +	private final ObjectMapper mapper;, +, +, +, +	public Flux<DataBuffer> encode(Publisher<?> inputStream, DataBufferFactory bufferFactory,, +			ResolvableType elementType, MimeType mimeType, Object... hints) {, +, +, +			return Flux.from(inputStream).map(value -> encodeValue(value, bufferFactory, elementType));, +		Flux<DataBuffer> array = Flux.from(inputStream), +				.flatMap(value ->, +						Flux.just(encodeValue(value, bufferFactory, elementType),, +								bufferFactory.wrap(SEPARATOR_BUFFER)));, +, +		return Flux.concat(Mono.just(bufferFactory.wrap(START_ARRAY_BUFFER)), array.skipLast(1),, +				Mono.just(bufferFactory.wrap(END_ARRAY_BUFFER)));, +	}, +, +	private DataBuffer encodeValue(Object value, DataBufferFactory bufferFactory, ResolvableType type) {, +, +		DataBuffer buffer = bufferFactory.allocateBuffer();, +, +, +++ b/spring-web-reactive/src/main/java/org/springframework/http/codec/json/JacksonJsonEncoder.java, +, +	private final ObjectMapper mapper;, +, +, +, +	public Flux<DataBuffer> encode(Publisher<?> inputStream, DataBufferFactory bufferFactory,, +			ResolvableType elementType, MimeType mimeType, Object... hints) {, +, +, +			return Flux.from(inputStream).map(value -> encodeValue(value, bufferFactory, elementType));, +		Flux<DataBuffer> array = Flux.from(inputStream), +				.flatMap(value ->, +						Flux.just(encodeValue(value, bufferFactory, elementType),, +								bufferFactory.wrap(SEPARATOR_BUFFER)));, +, +		return Flux.concat(Mono.just(bufferFactory.wrap(START_ARRAY_BUFFER)), array.skipLast(1),, +				Mono.just(bufferFactory.wrap(END_ARRAY_BUFFER)));, +	}, +, +	private DataBuffer encodeValue(Object value, DataBufferFactory bufferFactory, ResolvableType type) {, +, +		DataBuffer buffer = bufferFactory.allocateBuffer();, +, +, +++ b/spring-web-reactive/src/test/java/org/springframework/core/codec/ByteBufferEncoderTests.java, +		Flux<DataBuffer> output = this.encoder.encode(source, this.bufferFactory,, +++ b/spring-web-reactive/src/main/java/org/springframework/http/codec/json/JacksonJsonEncoder.java, +, +	private final ObjectMapper mapper;, +, +, +, +	public Flux<DataBuffer> encode(Publisher<?> inputStream, DataBufferFactory bufferFactory,, +			ResolvableType elementType, MimeType mimeType, Object... hints) {, +, +, +			return Flux.from(inputStream).map(value -> encodeValue(value, bufferFactory, elementType));, +		Flux<DataBuffer> array = Flux.from(inputStream), +				.flatMap(value ->, +						Flux.just(encodeValue(value, bufferFactory, elementType),, +								bufferFactory.wrap(SEPARATOR_BUFFER)));, +, +		return Flux.concat(Mono.just(bufferFactory.wrap(START_ARRAY_BUFFER)), array.skipLast(1),, +				Mono.just(bufferFactory.wrap(END_ARRAY_BUFFER)));, +	}, +, +	private DataBuffer encodeValue(Object value, DataBufferFactory bufferFactory, ResolvableType type) {, +, +		DataBuffer buffer = bufferFactory.allocateBuffer();, +, +, +++ b/spring-web-reactive/src/test/java/org/springframework/core/codec/ByteBufferEncoderTests.java, +		Flux<DataBuffer> output = this.encoder.encode(source, this.bufferFactory,, +++ b/spring-web-reactive/src/test/java/org/springframework/core/codec/ResourceEncoderTests.java, +		Flux<DataBuffer> output = this.encoder.encode(source, this.bufferFactory,, +++ b/spring-web-reactive/src/main/java/org/springframework/http/codec/json/JacksonJsonEncoder.java, +, +	private final ObjectMapper mapper;, +, +, +, +	public Flux<DataBuffer> encode(Publisher<?> inputStream, DataBufferFactory bufferFactory,, +			ResolvableType elementType, MimeType mimeType, Object... hints) {, +, +, +			return Flux.from(inputStream).map(value -> encodeValue(value, bufferFactory, elementType));, +		Flux<DataBuffer> array = Flux.from(inputStream), +				.flatMap(value ->, +						Flux.just(encodeValue(value, bufferFactory, elementType),, +								bufferFactory.wrap(SEPARATOR_BUFFER)));, +, +		return Flux.concat(Mono.just(bufferFactory.wrap(START_ARRAY_BUFFER)), array.skipLast(1),, +				Mono.just(bufferFactory.wrap(END_ARRAY_BUFFER)));, +	}]