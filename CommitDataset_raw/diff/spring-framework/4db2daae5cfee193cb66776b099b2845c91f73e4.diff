[+++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonDecoderTests.java, +import static java.util.Arrays.asList;, +import static java.util.Collections.*;, +import static org.springframework.http.MediaType.*;, +import static org.springframework.http.codec.json.Jackson2JsonDecoder.*;, +import static org.springframework.http.codec.json.JacksonViewBean.*;, +		assertTrue(decoder.canDecode(type, APPLICATION_JSON));, +		assertFalse(decoder.canDecode(type, APPLICATION_XML));, +				emptyMap());, +				.verifyComplete();, +				emptyMap());, +				null, emptyMap());, +				.expectNext(asList(new Pojo("f1", "b1"), new Pojo("f2", "b2"))), +				emptyMap());, +				.verifyComplete();, +	public void fieldLevelJsonView() throws Exception {, +		Map<String, Object> hints = singletonMap(JSON_VIEW_HINT, MyJacksonView1.class);, +				.verifyComplete();, +	}, +, +	@Test, +	public void classLevelJsonView() throws Exception {, +		Flux<DataBuffer> source = Flux.just(stringBuffer(, +				"{\"withView1\" : \"with\", \"withView2\" : \"with\", \"withoutView\" : \"without\"}"));, +		ResolvableType elementType = ResolvableType.forClass(JacksonViewBean.class);, +		Map<String, Object> hints = singletonMap(JSON_VIEW_HINT, MyJacksonView3.class);, +		Flux<JacksonViewBean> flux = new Jackson2JsonDecoder(), +				.decode(source, elementType, null, hints).cast(JacksonViewBean.class);, +, +		StepVerifier.create(flux), +				.consumeNextWith(b -> {, +					assertNull(b.getWithView1());, +					assertNull(b.getWithView2());, +					assertTrue(b.getWithoutView().equals("without"));, +				}), +				.verifyComplete();, +				null, emptyMap());, +				.verifyComplete();, +++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonDecoderTests.java, +import static java.util.Arrays.asList;, +import static java.util.Collections.*;, +import static org.springframework.http.MediaType.*;, +import static org.springframework.http.codec.json.Jackson2JsonDecoder.*;, +import static org.springframework.http.codec.json.JacksonViewBean.*;, +		assertTrue(decoder.canDecode(type, APPLICATION_JSON));, +		assertFalse(decoder.canDecode(type, APPLICATION_XML));, +				emptyMap());, +				.verifyComplete();, +				emptyMap());, +				null, emptyMap());, +				.expectNext(asList(new Pojo("f1", "b1"), new Pojo("f2", "b2"))), +				emptyMap());, +				.verifyComplete();, +	public void fieldLevelJsonView() throws Exception {, +		Map<String, Object> hints = singletonMap(JSON_VIEW_HINT, MyJacksonView1.class);, +				.verifyComplete();, +	}, +, +	@Test, +	public void classLevelJsonView() throws Exception {, +		Flux<DataBuffer> source = Flux.just(stringBuffer(, +				"{\"withView1\" : \"with\", \"withView2\" : \"with\", \"withoutView\" : \"without\"}"));, +		ResolvableType elementType = ResolvableType.forClass(JacksonViewBean.class);, +		Map<String, Object> hints = singletonMap(JSON_VIEW_HINT, MyJacksonView3.class);, +		Flux<JacksonViewBean> flux = new Jackson2JsonDecoder(), +				.decode(source, elementType, null, hints).cast(JacksonViewBean.class);, +, +		StepVerifier.create(flux), +				.consumeNextWith(b -> {, +					assertNull(b.getWithView1());, +					assertNull(b.getWithView2());, +					assertTrue(b.getWithoutView().equals("without"));, +				}), +				.verifyComplete();, +				null, emptyMap());, +				.verifyComplete();, +++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonEncoderTests.java, +import static java.util.Collections.*;, +import static org.springframework.http.MediaType.*;, +import static org.springframework.http.codec.json.Jackson2JsonEncoder.*;, +import static org.springframework.http.codec.json.JacksonViewBean.*;, +		assertTrue(this.encoder.canEncode(pojoType, APPLICATION_JSON));, +		assertFalse(this.encoder.canEncode(pojoType, APPLICATION_XML));, +		assertFalse(this.encoder.canEncode(sseType, APPLICATION_JSON));, +		Flux<DataBuffer> output = this.encoder.encode(source, this.bufferFactory, type, null, emptyMap());, +				.verifyComplete();, +		Flux<DataBuffer> output = this.encoder.encode(source, this.bufferFactory, type, null, emptyMap());, +				.verifyComplete();, +		Flux<DataBuffer> output = this.encoder.encode(source, this.bufferFactory, type, APPLICATION_STREAM_JSON, emptyMap());, +				.verifyComplete();, +	public void fieldLevelJsonView() throws Exception {, +		Map<String, Object> hints = singletonMap(JSON_VIEW_HINT, MyJacksonView1.class);, +				.verifyComplete();, +	}, +, +	@Test, +	public void classLevelJsonView() throws Exception {, +		JacksonViewBean bean = new JacksonViewBean();, +		bean.setWithView1("with");, +		bean.setWithView2("with");]