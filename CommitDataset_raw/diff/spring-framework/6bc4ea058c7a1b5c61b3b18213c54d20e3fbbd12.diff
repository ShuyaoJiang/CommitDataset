[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java, +import org.springframework.web.method.annotation.support.MapMethodProcessor;, +import org.springframework.web.servlet.mvc.method.annotation.support.ViewNameMethodReturnValueHandler;, + * An {@link AbstractHandlerMethodExceptionResolver} that resolves exceptions, + * through {@code @ExceptionHandler} methods., + * <p>Support for custom argument and return value types can be added via, + * {@link #setCustomArgumentResolvers} and {@link #setCustomReturnValueHandlers}., + * Or alternatively to re-configure all argument and return value types use, + * {@link #setArgumentResolvers} and {@link #setReturnValueHandlers(List)}., +	 * Default constructor., +		this.messageConverters = new ArrayList<HttpMessageConverter<?>>();, +		this.messageConverters.add(new ByteArrayHttpMessageConverter());, +		this.messageConverters.add(stringHttpMessageConverter);, +		this.messageConverters.add(new SourceHttpMessageConverter<Source>());, +		this.messageConverters.add(new XmlAwareFormHttpMessageConverter());, +	 * Provide resolvers for custom argument types. Custom resolvers are ordered, +	 * after built-in ones. To override the built-in support for argument , +	 * resolution use {@link #setArgumentResolvers} instead., +	 * Return the custom argument resolvers, or {@code null}., +	 */, +	public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {, +		return this.customArgumentResolvers;, +	}, +, +	/**, +	 * Configure the complete list of supported argument types thus overriding, +	 * the resolvers that would otherwise be configured by default., +		if (argumentResolvers == null) {, +			this.argumentResolvers = null;, +		}, +		else {, +	 * Return the configured argument resolvers, or possibly {@code null} if , +	 * not initialized yet via {@link #afterPropertiesSet()}., +	 */, +	public HandlerMethodArgumentResolverComposite getArgumentResolvers() {, +		return this.argumentResolvers;, +	}, +, +	/**, +	 * Provide handlers for custom return value types. Custom handlers are, +	 * ordered after built-in ones. To override the built-in support for, +	 * return value handling use {@link #setReturnValueHandlers}., +	 * Return the custom return value handlers, or {@code null}., +	 */, +	public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {, +		return this.customReturnValueHandlers;, +	}, +, +	/**, +	 * Configure the complete list of supported return value types thus , +	 * overriding handlers that would otherwise be configured by default., +		if (returnValueHandlers == null) {, +			this.returnValueHandlers = null;, +		}, +		else {, +	 * Return the configured handlers, or possibly {@code null} if not , +	 * initialized yet via {@link #afterPropertiesSet()}., +	 */, +	public HandlerMethodReturnValueHandlerComposite getReturnValueHandlers() {, +		return this.returnValueHandlers;, +	}, +	, +	/**, +	/**, +	 * Return the configured message body converters., +	 */, +	public List<HttpMessageConverter<?>> getMessageConverters() {, +		return messageConverters;, +, +	public void afterPropertiesSet() {, +		if (this.argumentResolvers == null) {, +			List<HandlerMethodArgumentResolver> resolvers = getDefaultArgumentResolvers();, +			this.argumentResolvers = new HandlerMethodArgumentResolverComposite().addResolvers(resolvers);, +		}, +		if (this.returnValueHandlers == null) {, +			List<HandlerMethodReturnValueHandler> handlers = getDefaultReturnValueHandlers();, +			this.returnValueHandlers = new HandlerMethodReturnValueHandlerComposite().addHandlers(handlers);, +	/**, +	 * Return the list of argument resolvers to use including built-in resolvers, +	 * and custom resolvers provided via {@link #setCustomArgumentResolvers}., +	 */, +	protected List<HandlerMethodArgumentResolver> getDefaultArgumentResolvers() {, +		, +		// Type-based argument resolution, +		, +		// Custom arguments, +		if (getCustomArgumentResolvers() != null) {, +			resolvers.addAll(getCustomArgumentResolvers());, +		}, +, +	/**, +	 * Return the list of return value handlers to use including built-in and , +	 * custom handlers provided via {@link #setReturnValueHandlers}., +	 */, +	protected List<HandlerMethodReturnValueHandler> getDefaultReturnValueHandlers() {, +		// Single-purpose return value types, +		handlers.add(new HttpEntityMethodProcessor(getMessageConverters()));, +		// Annotation-based return value types, +		handlers.add(new ModelAttributeMethodProcessor(false));, +		handlers.add(new RequestResponseBodyMethodProcessor(getMessageConverters()));]