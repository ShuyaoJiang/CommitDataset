[+++ b/build-spring-framework/resources/changelog.txt, +* ServletServerHttpRequest/Response fall back on the Content-Type and encoding of the request, +++ b/build-spring-framework/resources/changelog.txt, +* ServletServerHttpRequest/Response fall back on the Content-Type and encoding of the request, +++ b/org.springframework.web/src/main/java/org/springframework/http/MediaType.java, + * Copyright 2002-2012 the original author or authors., +	 * Return all generic parameter values., +	 * @return a read-only map, possibly empty, never <code>null</code>, +	 */, +	public Map<String, String> getParameters() {, +	        return parameters;, +	}, +, +	/**, +++ b/build-spring-framework/resources/changelog.txt, +* ServletServerHttpRequest/Response fall back on the Content-Type and encoding of the request, +++ b/org.springframework.web/src/main/java/org/springframework/http/MediaType.java, + * Copyright 2002-2012 the original author or authors., +	 * Return all generic parameter values., +	 * @return a read-only map, possibly empty, never <code>null</code>, +	 */, +	public Map<String, String> getParameters() {, +	        return parameters;, +	}, +, +	/**, +++ b/org.springframework.web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java, + * Copyright 2002-2012 the original author or authors., +import java.nio.charset.Charset;, +import java.util.HashMap;, +, +import org.springframework.http.MediaType;, +			for (Enumeration<?> headerNames = this.servletRequest.getHeaderNames(); headerNames.hasMoreElements();) {, +				for (Enumeration<?> headerValues = this.servletRequest.getHeaders(headerName);, +			// HttpServletRequest exposes some headers as properties: we should include those if not already present, +			if (this.headers.getContentType() == null && this.servletRequest.getContentType() != null) {, +				MediaType contentType = MediaType.parseMediaType(this.servletRequest.getContentType());, +				this.headers.setContentType(contentType);, +			}, +			if (this.headers.getContentType() != null && this.headers.getContentType().getCharSet() == null &&, +					this.servletRequest.getCharacterEncoding() != null) {, +				MediaType oldContentType = this.headers.getContentType();, +				Charset charSet = Charset.forName(this.servletRequest.getCharacterEncoding());, +                Map<String, String> params = new HashMap<String, String>(oldContentType.getParameters());, +                params.put("charset", charSet.toString());, +                MediaType newContentType = new MediaType(oldContentType.getType(), oldContentType.getSubtype(), params);, +				this.headers.setContentType(newContentType);, +			}, +			if (this.headers.getContentLength() == -1 && this.servletRequest.getContentLength() != -1) {, +				this.headers.setContentLength(this.servletRequest.getContentLength());, +			}, +++ b/build-spring-framework/resources/changelog.txt, +* ServletServerHttpRequest/Response fall back on the Content-Type and encoding of the request, +++ b/org.springframework.web/src/main/java/org/springframework/http/MediaType.java, + * Copyright 2002-2012 the original author or authors., +	 * Return all generic parameter values., +	 * @return a read-only map, possibly empty, never <code>null</code>, +	 */, +	public Map<String, String> getParameters() {, +	        return parameters;, +	}, +, +	/**, +++ b/org.springframework.web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java, + * Copyright 2002-2012 the original author or authors., +import java.nio.charset.Charset;, +import java.util.HashMap;, +, +import org.springframework.http.MediaType;, +			for (Enumeration<?> headerNames = this.servletRequest.getHeaderNames(); headerNames.hasMoreElements();) {, +				for (Enumeration<?> headerValues = this.servletRequest.getHeaders(headerName);, +			// HttpServletRequest exposes some headers as properties: we should include those if not already present, +			if (this.headers.getContentType() == null && this.servletRequest.getContentType() != null) {, +				MediaType contentType = MediaType.parseMediaType(this.servletRequest.getContentType());, +				this.headers.setContentType(contentType);, +			}, +			if (this.headers.getContentType() != null && this.headers.getContentType().getCharSet() == null &&, +					this.servletRequest.getCharacterEncoding() != null) {, +				MediaType oldContentType = this.headers.getContentType();, +				Charset charSet = Charset.forName(this.servletRequest.getCharacterEncoding());, +                Map<String, String> params = new HashMap<String, String>(oldContentType.getParameters());, +                params.put("charset", charSet.toString());, +                MediaType newContentType = new MediaType(oldContentType.getType(), oldContentType.getSubtype(), params);, +				this.headers.setContentType(newContentType);, +			}, +			if (this.headers.getContentLength() == -1 && this.servletRequest.getContentLength() != -1) {, +				this.headers.setContentLength(this.servletRequest.getContentLength());, +			}, +++ b/org.springframework.web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java, + * Copyright 2002-2012 the original author or authors., +			// HttpServletResponse exposes some headers as properties: we should include those if not already present, +			if (this.servletResponse.getContentType() == null && this.headers.getContentType() != null) {, +				this.servletResponse.setContentType(this.headers.getContentType().toString());, +			}, +			if (this.servletResponse.getCharacterEncoding() == null && this.headers.getContentType() != null &&, +					this.headers.getContentType().getCharSet() != null) {, +				this.servletResponse.setCharacterEncoding(this.headers.getContentType().getCharSet().name());, +			}, +++ b/build-spring-framework/resources/changelog.txt, +* ServletServerHttpRequest/Response fall back on the Content-Type and encoding of the request]