[+++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +		if (shouldSkip(annotatedClass)) {, +		AnnotatedGenericBeanDefinition abd = new AnnotatedGenericBeanDefinition(annotatedClass);, +	private boolean shouldSkip(Class<?> annotatedClass) {, +		while(annotatedClass != null) {, +			AnnotatedGenericBeanDefinition abd = new AnnotatedGenericBeanDefinition(annotatedClass);, +			if(conditionEvaluator.shouldSkip(abd.getMetadata())) {, +				return true;, +			}, +			annotatedClass = annotatedClass.getSuperclass();, +		}, +		return false;, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +		if (shouldSkip(annotatedClass)) {, +		AnnotatedGenericBeanDefinition abd = new AnnotatedGenericBeanDefinition(annotatedClass);, +	private boolean shouldSkip(Class<?> annotatedClass) {, +		while(annotatedClass != null) {, +			AnnotatedGenericBeanDefinition abd = new AnnotatedGenericBeanDefinition(annotatedClass);, +			if(conditionEvaluator.shouldSkip(abd.getMetadata())) {, +				return true;, +			}, +			annotatedClass = annotatedClass.getSuperclass();, +		}, +		return false;, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, +import org.springframework.core.type.AnnotationMetadata;, +				return !shouldSkip(metadataReader);, +	private boolean shouldSkip(MetadataReader metadataReader) throws IOException {, +, +		while(metadataReader != null) {, +			AnnotationMetadata metadata = metadataReader.getAnnotationMetadata();, +			if(this.conditionEvaluator.shouldSkip(metadata)) {, +				return true;, +			}, +			metadataReader = (metadata.hasSuperClass() ?, +					this.metadataReaderFactory.getMetadataReader(metadata.getSuperClassName()), +					: null);, +		}, +, +		return false;, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +		if (shouldSkip(annotatedClass)) {, +		AnnotatedGenericBeanDefinition abd = new AnnotatedGenericBeanDefinition(annotatedClass);, +	private boolean shouldSkip(Class<?> annotatedClass) {, +		while(annotatedClass != null) {, +			AnnotatedGenericBeanDefinition abd = new AnnotatedGenericBeanDefinition(annotatedClass);, +			if(conditionEvaluator.shouldSkip(abd.getMetadata())) {, +				return true;, +			}, +			annotatedClass = annotatedClass.getSuperclass();, +		}, +		return false;, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, +import org.springframework.core.type.AnnotationMetadata;, +				return !shouldSkip(metadataReader);, +	private boolean shouldSkip(MetadataReader metadataReader) throws IOException {, +, +		while(metadataReader != null) {, +			AnnotationMetadata metadata = metadataReader.getAnnotationMetadata();, +			if(this.conditionEvaluator.shouldSkip(metadata)) {, +				return true;, +			}, +			metadataReader = (metadata.hasSuperClass() ?, +					this.metadataReaderFactory.getMetadataReader(metadata.getSuperClassName()), +					: null);, +		}, +, +		return false;, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConditionEvaluator.java, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +		if (shouldSkip(annotatedClass)) {, +		AnnotatedGenericBeanDefinition abd = new AnnotatedGenericBeanDefinition(annotatedClass);, +	private boolean shouldSkip(Class<?> annotatedClass) {, +		while(annotatedClass != null) {, +			AnnotatedGenericBeanDefinition abd = new AnnotatedGenericBeanDefinition(annotatedClass);, +			if(conditionEvaluator.shouldSkip(abd.getMetadata())) {, +				return true;, +			}, +			annotatedClass = annotatedClass.getSuperclass();, +		}, +		return false;, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, +import org.springframework.core.type.AnnotationMetadata;, +				return !shouldSkip(metadataReader);, +	private boolean shouldSkip(MetadataReader metadataReader) throws IOException {, +, +		while(metadataReader != null) {, +			AnnotationMetadata metadata = metadataReader.getAnnotationMetadata();, +			if(this.conditionEvaluator.shouldSkip(metadata)) {, +				return true;, +			}]