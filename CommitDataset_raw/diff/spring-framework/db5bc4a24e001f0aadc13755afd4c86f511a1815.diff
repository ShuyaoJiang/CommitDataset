[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java, + * @author Rossen Stoyanchev, +	/**, +	 * The "back-pressure" buffer size to use if the underlying WebSocket API, +	 * does not have flow control for receiving messages., +	 */, +	private static final int RECEIVE_BUFFER_SIZE = 8192;, +, +		return canSuspendReceiving() ?, +				Flux.from(this.receivePublisher) :, +				Flux.from(this.receivePublisher).onBackpressureBuffer(RECEIVE_BUFFER_SIZE);, +	/**, +	 * Resume receiving new message(s) after demand is generated by the, +	 * downstream Subscriber., +	 * <p><strong>Note:</strong> if the underlying WebSocket API does not provide, +	 * flow control for receiving messages, and this method should be a no-op, +	 * and {@link #canSuspendReceiving()} should return {@code false}., +	 */, +	protected abstract void resumeReceiving();, +	/**, +	 * Suspend receiving until received message(s) are processed and more demand, +	 * is generated by the downstream Subscriber., +	 * <p><strong>Note:</strong> if the underlying WebSocket API does not provide, +	 * flow control for receiving messages, and this method should be a no-op, +	 * and {@link #canSuspendReceiving()} should return {@code false}., +	 */, +	protected abstract void suspendReceiving();, +	/**, +	 * Whether the underlying WebSocket API has flow control and can suspend and, +	 * resume the receiving of messages., +	 */, +	protected abstract boolean canSuspendReceiving();, +	/**, +	 * Send the given WebSocket message., +	 */, +				resumeReceiving();, +			suspendReceiving();, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java, + * @author Rossen Stoyanchev, +	/**, +	 * The "back-pressure" buffer size to use if the underlying WebSocket API, +	 * does not have flow control for receiving messages., +	 */, +	private static final int RECEIVE_BUFFER_SIZE = 8192;, +, +		return canSuspendReceiving() ?, +				Flux.from(this.receivePublisher) :, +				Flux.from(this.receivePublisher).onBackpressureBuffer(RECEIVE_BUFFER_SIZE);, +	/**, +	 * Resume receiving new message(s) after demand is generated by the, +	 * downstream Subscriber., +	 * <p><strong>Note:</strong> if the underlying WebSocket API does not provide, +	 * flow control for receiving messages, and this method should be a no-op, +	 * and {@link #canSuspendReceiving()} should return {@code false}., +	 */, +	protected abstract void resumeReceiving();, +	/**, +	 * Suspend receiving until received message(s) are processed and more demand, +	 * is generated by the downstream Subscriber., +	 * <p><strong>Note:</strong> if the underlying WebSocket API does not provide, +	 * flow control for receiving messages, and this method should be a no-op, +	 * and {@link #canSuspendReceiving()} should return {@code false}., +	 */, +	protected abstract void suspendReceiving();, +	/**, +	 * Whether the underlying WebSocket API has flow control and can suspend and, +	 * resume the receiving of messages., +	 */, +	protected abstract boolean canSuspendReceiving();, +	/**, +	 * Send the given WebSocket message., +	 */, +				resumeReceiving();, +			suspendReceiving();, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/JettyWebSocketHandlerAdapter.java, +		if (this.wsSession != null) {, +		if (this.wsSession != null) {, +		if (this.wsSession != null) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java, + * @author Rossen Stoyanchev, +	/**, +	 * The "back-pressure" buffer size to use if the underlying WebSocket API, +	 * does not have flow control for receiving messages., +	 */, +	private static final int RECEIVE_BUFFER_SIZE = 8192;, +, +		return canSuspendReceiving() ?, +				Flux.from(this.receivePublisher) :, +				Flux.from(this.receivePublisher).onBackpressureBuffer(RECEIVE_BUFFER_SIZE);, +	/**, +	 * Resume receiving new message(s) after demand is generated by the, +	 * downstream Subscriber., +	 * <p><strong>Note:</strong> if the underlying WebSocket API does not provide, +	 * flow control for receiving messages, and this method should be a no-op, +	 * and {@link #canSuspendReceiving()} should return {@code false}., +	 */, +	protected abstract void resumeReceiving();, +	/**, +	 * Suspend receiving until received message(s) are processed and more demand, +	 * is generated by the downstream Subscriber.]