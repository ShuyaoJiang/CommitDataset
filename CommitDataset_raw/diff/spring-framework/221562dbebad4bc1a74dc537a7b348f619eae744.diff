[+++ b/spring-web/src/main/java/org/springframework/web/method/annotation/AbstractNamedValueMethodArgumentResolver.java, +		else if ("".equals(arg) && (namedValueInfo.defaultValue != null)) {, +			arg = resolveDefaultValue(namedValueInfo.defaultValue);, +		}, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/AbstractNamedValueMethodArgumentResolver.java, +		else if ("".equals(arg) && (namedValueInfo.defaultValue != null)) {, +			arg = resolveDefaultValue(namedValueInfo.defaultValue);, +		}, +++ b/spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java, +	private MethodParameter paramRequired;, +				Map.class, String.class, MultipartFile.class, List.class, Part.class, MultipartFile.class, String.class);, +		paramRequired = new MethodParameter(method, 10);, +	// SPR-10180, +, +	@Test, +	public void resolveEmptyValueToDefault() throws Exception {, +		this.request.addParameter("name", "");, +		Object result = resolver.resolveArgument(paramNamedDefaultValueString, null, webRequest, null);, +		assertEquals("bar", result);, +	}, +, +	@Test, +	public void resolveEmptyValueWithoutDefault() throws Exception {, +		this.request.addParameter("stringNotAnnot", "");, +		Object result = resolver.resolveArgument(paramStringNotAnnot, null, webRequest, null);, +		assertEquals("", result);, +	}, +, +	@Test, +	public void resolveEmptyValueRequiredWithoutDefault() throws Exception {, +		this.request.addParameter("name", "");, +		Object result = resolver.resolveArgument(paramRequired, null, webRequest, null);, +		assertEquals("", result);, +	}, +, +, +			@RequestPart MultipartFile requestPartAnnot,, +			@RequestParam(value = "name") String paramRequired) {]