[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java, + * {@link LinkedHashMap} subclass representing annotation attribute, + * <em>key-value</em> pairs as read by Spring's reflection- or ASM-based, +	 * {@code AnnotationAttributes} instance; never {@code null}, +		Assert.notNull(annotationType, "annotationType must not be null");, +		this.displayName = annotationType.getName();, +	 * Create a new, empty {@link AnnotationAttributes} instance with the, +	 * given initial capacity to optimize performance., +	 * Create a new {@link AnnotationAttributes} instance, wrapping the, +	 * provided map and all its <em>key-value</em> pairs., +	 * @param map original source of annotation attribute <em>key-value</em>, +	 * pairs, +	 * Get the type of annotation represented by this, +	 * {@code AnnotationAttributes} instance., +	/**, +	 * Get the value stored under the specified {@code attributeName} as a, +	 * string., +	 * @param attributeName the name of the attribute to get; never, +	 * {@code null} or empty, +	 * @return the value, +	 * @throws IllegalArgumentException if the attribute does not exist or, +	 * if it is not of the expected type, +	 */, +	/**, +	 * Get the value stored under the specified {@code attributeName} as an, +	 * array of strings., +	 * <p>If the value stored under the specified {@code attributeName} is, +	 * a string, it will be wrapped in a single-element array before, +	 * returning it., +	 * @param attributeName the name of the attribute to get; never, +	 * {@code null} or empty, +	 * @return the value, +	 * @throws IllegalArgumentException if the attribute does not exist or, +	 * if it is not of the expected type, +	 */, +	/**, +	 * Get the value stored under the specified {@code attributeName} as a, +	 * boolean., +	 * @param attributeName the name of the attribute to get; never, +	 * {@code null} or empty, +	 * @return the value, +	 * @throws IllegalArgumentException if the attribute does not exist or, +	 * if it is not of the expected type, +	 */, +	/**, +	 * Get the value stored under the specified {@code attributeName} as a, +	 * number., +	 * @param attributeName the name of the attribute to get; never, +	 * {@code null} or empty, +	 * @return the value, +	 * @throws IllegalArgumentException if the attribute does not exist or, +	 * if it is not of the expected type, +	 */, +	/**, +	 * Get the value stored under the specified {@code attributeName} as an, +	 * enum., +	 * @param attributeName the name of the attribute to get; never, +	 * {@code null} or empty, +	 * @return the value, +	 * @throws IllegalArgumentException if the attribute does not exist or, +	 * if it is not of the expected type, +	 */, +	/**, +	 * Get the value stored under the specified {@code attributeName} as a, +	 * class., +	 * @param attributeName the name of the attribute to get; never, +	 * {@code null} or empty, +	 * @return the value, +	 * @throws IllegalArgumentException if the attribute does not exist or, +	 * if it is not of the expected type, +	 */, +	/**, +	 * Get the value stored under the specified {@code attributeName} as an, +	 * array of classes., +	 * <p>If the value stored under the specified {@code attributeName} is, +	 * a class, it will be wrapped in a single-element array before, +	 * returning it., +	 * @param attributeName the name of the attribute to get; never, +	 * {@code null} or empty, +	 * @return the value, +	 * @throws IllegalArgumentException if the attribute does not exist or, +	 * if it is not of the expected type, +	 */, +	/**, +	 * Get the {@link AnnotationAttributes} stored under the specified, +	 * {@code attributeName}., +	 * @param attributeName the name of the attribute to get; never, +	 * {@code null} or empty, +	 * @return the {@code AnnotationAttributes}, +	 * @throws IllegalArgumentException if the attribute does not exist or, +	 * if it is not of the expected type, +	 */, +	/**, +	 * Get the array of {@link AnnotationAttributes} stored under the specified, +	 * {@code attributeName}., +	 * <p>If the value stored under the specified {@code attributeName} is, +	 * an instance of {@code AnnotationAttributes}, it will be wrapped in, +	 * a single-element array before returning it., +	 * @param attributeName the name of the attribute to get; never, +	 * {@code null} or empty]