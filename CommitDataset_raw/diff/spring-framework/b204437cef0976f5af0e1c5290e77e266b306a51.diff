[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java, +	private final List<HandlerMethodArgumentResolver> customArgumentResolvers =, +			new ArrayList<HandlerMethodArgumentResolver>(4);, +	private final List<HandlerMethodReturnValueHandler> customReturnValueHandlers =, +			new ArrayList<HandlerMethodReturnValueHandler>(4);, +, +	private final HandlerMethodArgumentResolverComposite argumentResolvers =, +			new HandlerMethodArgumentResolverComposite();, +, +	private final HandlerMethodReturnValueHandlerComposite returnValueHandlers =, +			new HandlerMethodReturnValueHandlerComposite();, +	/**, +	 * Return the complete list of argument resolvers., +	 */, +	 * Configure the complete list of supported argument types, effectively overriding, +	 * the ones configured by default. This is an advanced option; for most use cases, +	/**, +	 * Return the complete list of return value handlers., +	 */, +	 * Configure the complete list of supported return value types, effectively overriding, +	 * the ones configured by default. This is an advanced option; for most use cases, +	protected void registerExceptionHandlerAdvice(, +			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {, +, +	/**, +	 * Return a map with all handler methods and their mappings., +	 */, +	public Map<T, HandlerMethod> getHandlerMethods() {, +		return Collections.unmodifiableMap(this.handlerMethods);, +	}, +, +			handleNoMatch(this.handlerMethods.keySet(), lookupDestination, message);, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java, +	private final List<HandlerMethodArgumentResolver> customArgumentResolvers =, +			new ArrayList<HandlerMethodArgumentResolver>(4);, +	private final List<HandlerMethodReturnValueHandler> customReturnValueHandlers =, +			new ArrayList<HandlerMethodReturnValueHandler>(4);, +, +	private final HandlerMethodArgumentResolverComposite argumentResolvers =, +			new HandlerMethodArgumentResolverComposite();, +, +	private final HandlerMethodReturnValueHandlerComposite returnValueHandlers =, +			new HandlerMethodReturnValueHandlerComposite();, +	/**, +	 * Return the complete list of argument resolvers., +	 */, +	 * Configure the complete list of supported argument types, effectively overriding, +	 * the ones configured by default. This is an advanced option; for most use cases, +	/**, +	 * Return the complete list of return value handlers., +	 */, +	 * Configure the complete list of supported return value types, effectively overriding, +	 * the ones configured by default. This is an advanced option; for most use cases, +	protected void registerExceptionHandlerAdvice(, +			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {, +, +	/**, +	 * Return a map with all handler methods and their mappings., +	 */, +	public Map<T, HandlerMethod> getHandlerMethods() {, +		return Collections.unmodifiableMap(this.handlerMethods);, +	}, +, +			handleNoMatch(this.handlerMethods.keySet(), lookupDestination, message);, +, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/HtmlUnitRequestBuilder.java, +		return UriComponentsBuilder.fromUriString(url.toExternalForm()).build();, +, +	 * An extension to {@link MockHttpServletRequest} that ensures that when a, +	 * new {@link HttpSession} is created, it is added to the managed sessions., +		public HtmlUnitMockHttpServletRequest(ServletContext servletContext, String method, String requestURI) {, +, +	 * {@link #invalidate()} is called that the {@link HttpSession}, +	 * is removed from the managed sessions., +		public HtmlUnitMockHttpSession(MockHttpServletRequest request) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java, +	private final List<HandlerMethodArgumentResolver> customArgumentResolvers =, +			new ArrayList<HandlerMethodArgumentResolver>(4);, +	private final List<HandlerMethodReturnValueHandler> customReturnValueHandlers =, +			new ArrayList<HandlerMethodReturnValueHandler>(4);, +, +	private final HandlerMethodArgumentResolverComposite argumentResolvers =, +			new HandlerMethodArgumentResolverComposite();, +, +	private final HandlerMethodReturnValueHandlerComposite returnValueHandlers =, +			new HandlerMethodReturnValueHandlerComposite();, +	/**, +	 * Return the complete list of argument resolvers., +	 */, +	 * Configure the complete list of supported argument types, effectively overriding, +	 * the ones configured by default. This is an advanced option; for most use cases, +	/**, +	 * Return the complete list of return value handlers., +	 */, +	 * Configure the complete list of supported return value types, effectively overriding, +	 * the ones configured by default. This is an advanced option; for most use cases, +	protected void registerExceptionHandlerAdvice(, +			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {, +]