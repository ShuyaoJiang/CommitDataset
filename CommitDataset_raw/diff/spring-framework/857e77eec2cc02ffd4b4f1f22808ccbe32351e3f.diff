[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java, +import org.springframework.http.server.reactive.ServerHttpResponse;, +		ServerHttpResponse response = exchange.getResponse();, +			if (reader.canRead(elementType, mediaType)) {, +					Flux<?> flux = (reader instanceof ServerHttpMessageReader ?, +							((ServerHttpMessageReader<?>)reader).read(bodyType, elementType,, +									request, response, Collections.emptyMap()) :, +							reader.read(elementType, request, Collections.emptyMap()), +							.onErrorResumeWith(ex -> Flux.error(getReadError(ex, bodyParameter))));, +					Mono<?> mono = (reader instanceof ServerHttpMessageReader ?, +							((ServerHttpMessageReader<?>)reader).readMono(bodyType, elementType,, +									request, response, Collections.emptyMap()) :, +							reader.readMono(elementType, request, Collections.emptyMap()), +							.otherwise(ex -> Mono.error(getReadError(ex, bodyParameter))));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java, +import org.springframework.http.server.reactive.ServerHttpResponse;, +		ServerHttpResponse response = exchange.getResponse();, +			if (reader.canRead(elementType, mediaType)) {, +					Flux<?> flux = (reader instanceof ServerHttpMessageReader ?, +							((ServerHttpMessageReader<?>)reader).read(bodyType, elementType,, +									request, response, Collections.emptyMap()) :, +							reader.read(elementType, request, Collections.emptyMap()), +							.onErrorResumeWith(ex -> Flux.error(getReadError(ex, bodyParameter))));, +					Mono<?> mono = (reader instanceof ServerHttpMessageReader ?, +							((ServerHttpMessageReader<?>)reader).readMono(bodyType, elementType,, +									request, response, Collections.emptyMap()) :, +							reader.readMono(elementType, request, Collections.emptyMap()), +							.otherwise(ex -> Mono.error(getReadError(ex, bodyParameter))));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +import org.springframework.http.server.reactive.ServerHttpRequest;, +		ServerHttpRequest request = exchange.getRequest();, +		ServerHttpResponse response = exchange.getResponse();, +				if (messageWriter.canWrite(elementType, bestMediaType)) {, +					return (messageWriter instanceof ServerHttpMessageWriter ?, +							((ServerHttpMessageWriter<?>)messageWriter).write((Publisher) publisher,, +									bodyType, elementType, bestMediaType, request, response, Collections.emptyMap()) :, +							messageWriter.write((Publisher) publisher, elementType,, +									bestMediaType, response, Collections.emptyMap()));, +				.filter(converter -> converter.canWrite(elementType, null)), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java, +import org.springframework.http.server.reactive.ServerHttpResponse;, +		ServerHttpResponse response = exchange.getResponse();, +			if (reader.canRead(elementType, mediaType)) {, +					Flux<?> flux = (reader instanceof ServerHttpMessageReader ?, +							((ServerHttpMessageReader<?>)reader).read(bodyType, elementType,, +									request, response, Collections.emptyMap()) :, +							reader.read(elementType, request, Collections.emptyMap()), +							.onErrorResumeWith(ex -> Flux.error(getReadError(ex, bodyParameter))));, +					Mono<?> mono = (reader instanceof ServerHttpMessageReader ?, +							((ServerHttpMessageReader<?>)reader).readMono(bodyType, elementType,, +									request, response, Collections.emptyMap()) :, +							reader.readMono(elementType, request, Collections.emptyMap()), +							.otherwise(ex -> Mono.error(getReadError(ex, bodyParameter))));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +import org.springframework.http.server.reactive.ServerHttpRequest;, +		ServerHttpRequest request = exchange.getRequest();, +		ServerHttpResponse response = exchange.getResponse();, +				if (messageWriter.canWrite(elementType, bestMediaType)) {, +					return (messageWriter instanceof ServerHttpMessageWriter ?, +							((ServerHttpMessageWriter<?>)messageWriter).write((Publisher) publisher,, +									bodyType, elementType, bestMediaType, request, response, Collections.emptyMap()) :, +							messageWriter.write((Publisher) publisher, elementType,, +									bestMediaType, response, Collections.emptyMap()));, +				.filter(converter -> converter.canWrite(elementType, null)), +++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractServerHttpMessageReader.java, +import org.springframework.http.server.reactive.ServerHttpResponse;, +	public boolean canRead(ResolvableType elementType, MediaType mediaType) {, +		return this.reader.canRead(elementType, mediaType);, +	public Flux<T> read(ResolvableType streamType, ResolvableType elementType,, +			ServerHttpRequest request, ServerHttpResponse response, Map<String, Object> hints) {, +		Map<String, Object> mergedHints = new HashMap<>(hints);, +		mergedHints.putAll(beforeRead(streamType, elementType, request, response));, +, +		return (this.reader instanceof ServerHttpMessageReader ?, +				((ServerHttpMessageReader<T>)this.reader).read(streamType, elementType, request, response, mergedHints) :, +				this.read(elementType, request, mergedHints));, +, +	@Override, +	public Mono<T> readMono(ResolvableType streamType, ResolvableType elementType,, +			ServerHttpRequest request, ServerHttpResponse response, Map<String, Object> hints) {, +, +		Map<String, Object> mergedHints = new HashMap<>(hints);, +		mergedHints.putAll(beforeRead(streamType, elementType, request, response));, +, +		return (this.reader instanceof ServerHttpMessageReader ?, +				((ServerHttpMessageReader<T>)this.reader).readMono(streamType, elementType, request, response, mergedHints) :, +				this.readMono(elementType, request, mergedHints));, +	 * Invoked before reading the request by, +	 * {@link #read(ResolvableType, ResolvableType, ServerHttpRequest, ServerHttpResponse, Map)}, +	 *, +	 * @param streamType the original type used for the method return value. For annotation, +	 * Can be {@code null}., +	 * @param elementType the stream element type to process, +	 * @param request the current HTTP request, can be {@code null}, +	 * @param response the current HTTP response, can be {@code null}, +	 * @return Additional information about how to write the body, +	protected abstract Map<String, Object> beforeRead(ResolvableType streamType,, +			ResolvableType elementType, ServerHttpRequest request, ServerHttpResponse response);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java, +import org.springframework.http.server.reactive.ServerHttpResponse;]