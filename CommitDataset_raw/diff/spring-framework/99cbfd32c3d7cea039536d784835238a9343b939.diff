[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultRenderingResponseBuilder.java, +import java.util.List;, +			MediaType responseContentType = exchange.getResponse().getHeaders().getContentType();, +					.flatMap(view -> {, +						List<MediaType> mediaTypes = view.getSupportedMediaTypes();, +						MediaType contentType = (responseContentType == null && !mediaTypes.isEmpty() ? mediaTypes.get(0) : responseContentType);, +						return view.render(model(), contentType, exchange);, +					});, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultRenderingResponseBuilder.java, +import java.util.List;, +			MediaType responseContentType = exchange.getResponse().getHeaders().getContentType();, +					.flatMap(view -> {, +						List<MediaType> mediaTypes = view.getSupportedMediaTypes();, +						MediaType contentType = (responseContentType == null && !mediaTypes.isEmpty() ? mediaTypes.get(0) : responseContentType);, +						return view.render(model(), contentType, exchange);, +					});, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/server/DefaultRenderingResponseTests.java, +import org.springframework.http.MediaType;, +import org.springframework.web.reactive.result.view.AbstractView;, +import org.springframework.web.reactive.result.view.ViewResolverSupport;, +import org.springframework.web.server.ServerWebExchange;, +import static org.junit.Assert.assertEquals;, +	@Test, +	public void defaultContentType() throws Exception {, +		Mono<RenderingResponse> result = RenderingResponse.create("view").build();, +, +		MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("http://localhost"));, +		TestView view = new TestView();, +		ViewResolver viewResolver = mock(ViewResolver.class);, +		when(viewResolver.resolveViewName(any(), any())).thenReturn(Mono.just(view));, +, +		List<ViewResolver> viewResolvers = new ArrayList<>();, +		viewResolvers.add(viewResolver);, +, +		ServerResponse.Context context = mock(ServerResponse.Context.class);, +		when(context.viewResolvers()).thenReturn(viewResolvers);, +, +		StepVerifier.create(result.flatMap(response -> response.writeTo(exchange, context))), +				.verifyComplete();, +, +		assertEquals(ViewResolverSupport.DEFAULT_CONTENT_TYPE, exchange.getResponse().getHeaders().getContentType());, +	}, +, +, +	private static class TestView extends AbstractView {, +, +		@Override, +		protected Mono<Void> renderInternal(Map<String, Object> renderAttributes,, +				MediaType contentType, ServerWebExchange exchange) {, +, +			return Mono.empty();, +		}, +, +	}, +]