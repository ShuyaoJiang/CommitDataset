[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/ServletModelAttributeMethodProcessor.java, +	 * @param annotationNotRequired if "true", non-simple method arguments and, +	 * return values are considered model attributes with or without a , +	 * {@code @ModelAttribute} annotation., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/ServletModelAttributeMethodProcessor.java, +	 * @param annotationNotRequired if "true", non-simple method arguments and, +	 * return values are considered model attributes with or without a , +	 * {@code @ModelAttribute} annotation., +++ b/org.springframework.web/src/main/java/org/springframework/web/method/annotation/ModelFactory.java, + * Provides methods to initialize the {@link Model} before controller method , + * invocation and to update it afterwards. On initialization, the model is , + * populated with attributes from the session or by invoking , + * {@code @ModelAttribute} methods. On update, model attributes are , + * synchronized with the session -- either adding or removing them. , + * Also {@link BindingResult} attributes where missing., +	 * Create a new instance with the given {@code @ModelAttribute} methods., +	 * @param attributeMethods for model initialization, +	 * @param binderFactory for adding {@link BindingResult} attributes, +	 * @param sessionAttributesHandler for access to session attributes, +	 * 	<li>Retrieve "known" session attributes -- i.e. attributes listed via , +	 * 	{@link SessionAttributes @SessionAttributes} and previously stored in , +	 * 	the in the model at least once, +	 * 	<li>Invoke {@link ModelAttribute @ModelAttribute} methods, +	 * 	<li>Find method arguments eligible as session attributes and retrieve, +	 * 	them if they're not	already	present in the model , +	 * @param mavContainer contains the model to be initialized , +	 * @param handlerMethod the method for which the model is initialized, +	 * @throws Exception may arise from {@code @ModelAttribute} methods, +		Map<String, ?> attributesInSession = this.sessionAttributesHandler.retrieveAttributes(request);, +		mavContainer.mergeAttributes(attributesInSession);, +		for (String name : findSessionAttributeArguments(handlerMethod)) {, +			if (!mavContainer.containsAttribute(name)) {, +				Object value = this.sessionAttributesHandler.retrieveAttribute(request, name);, +				if (value == null) {, +					throw new HttpSessionRequiredException("Expected session attribute '" + name + "'");, +				}, +				mavContainer.addAttribute(name, value);, +			}, +		}, +	 * Invoke model attribute methods to populate the model. Attributes are , +	 * added only if not already present in the model., +	 * Return all {@code @ModelAttribute} arguments declared as session , +	 * attributes via {@code @SessionAttributes}., +	private List<String> findSessionAttributeArguments(HandlerMethod handlerMethod) {, +		List<String> result = new ArrayList<String>();, +		for (MethodParameter param : handlerMethod.getMethodParameters()) {, +			if (param.hasParameterAnnotation(ModelAttribute.class)) {, +				String name = getNameForParameter(param);, +				if (this.sessionAttributesHandler.isHandlerSessionAttribute(name, param.getParameterType())) {, +					result.add(name);, +		return result;, +	 * Derive the model attribute name for the given return value using , +	 * one of the following:, +	 * 	<li>The method {@code ModelAttribute} annotation value , +	 * 	<li>The declared return type if it is other than {@code Object}, +	 * 	<li>The actual return value type, +	 * Derives the model attribute name for a method parameter based on:, +	 * 	<li>The parameter {@code @ModelAttribute} annotation value, +	 * 	<li>The parameter type , +	 * @return the derived name; never {@code null} or an empty string, +	 * Synchronize model attributes with the session. Add {@link BindingResult}, +	 * attributes where necessary., +	 * @param mavContainer contains the model to update, +	 * @throws Exception if creating BindingResult attributes fails, +	 * Whether the given attribute requires a {@link BindingResult} in the model., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/ServletModelAttributeMethodProcessor.java, +	 * @param annotationNotRequired if "true", non-simple method arguments and, +	 * return values are considered model attributes with or without a , +	 * {@code @ModelAttribute} annotation., +++ b/org.springframework.web/src/main/java/org/springframework/web/method/annotation/ModelFactory.java, + * Provides methods to initialize the {@link Model} before controller method , + * invocation and to update it afterwards. On initialization, the model is , + * populated with attributes from the session or by invoking , + * {@code @ModelAttribute} methods. On update, model attributes are , + * synchronized with the session -- either adding or removing them. , + * Also {@link BindingResult} attributes where missing., +	 * Create a new instance with the given {@code @ModelAttribute} methods., +	 * @param attributeMethods for model initialization, +	 * @param binderFactory for adding {@link BindingResult} attributes, +	 * @param sessionAttributesHandler for access to session attributes, +	 * 	<li>Retrieve "known" session attributes -- i.e. attributes listed via , +	 * 	{@link SessionAttributes @SessionAttributes} and previously stored in , +	 * 	the in the model at least once, +	 * 	<li>Invoke {@link ModelAttribute @ModelAttribute} methods, +	 * 	<li>Find method arguments eligible as session attributes and retrieve, +	 * 	them if they're not	already	present in the model , +	 * @param mavContainer contains the model to be initialized , +	 * @param handlerMethod the method for which the model is initialized, +	 * @throws Exception may arise from {@code @ModelAttribute} methods, +		Map<String, ?> attributesInSession = this.sessionAttributesHandler.retrieveAttributes(request);, +		mavContainer.mergeAttributes(attributesInSession);, +		for (String name : findSessionAttributeArguments(handlerMethod)) {, +			if (!mavContainer.containsAttribute(name)) {, +				Object value = this.sessionAttributesHandler.retrieveAttribute(request, name);, +				if (value == null) {, +					throw new HttpSessionRequiredException("Expected session attribute '" + name + "'");, +				}, +				mavContainer.addAttribute(name, value);, +			}, +		}]