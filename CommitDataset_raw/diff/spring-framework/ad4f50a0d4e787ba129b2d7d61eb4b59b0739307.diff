[+++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/config/AnnotationDrivenBeanDefinitionParser.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;, +		def.getPropertyValues().addPropertyValue("transactionManagerBeanName",, +				TxNamespaceHandler.getTransactionManagerName(element));, +				RootBeanDefinition sourceDef = new RootBeanDefinition(AnnotationTransactionAttributeSource.class);, +				interceptorDef.getPropertyValues().addPropertyValue("transactionAttributeSource", new RuntimeBeanReference(sourceName));, +				advisorDef.getPropertyValues().addPropertyValue("transactionAttributeSource", new RuntimeBeanReference(sourceName));, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/config/AnnotationDrivenBeanDefinitionParser.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;, +		def.getPropertyValues().addPropertyValue("transactionManagerBeanName",, +				TxNamespaceHandler.getTransactionManagerName(element));, +				RootBeanDefinition sourceDef = new RootBeanDefinition(AnnotationTransactionAttributeSource.class);, +				interceptorDef.getPropertyValues().addPropertyValue("transactionAttributeSource", new RuntimeBeanReference(sourceName));, +				advisorDef.getPropertyValues().addPropertyValue("transactionAttributeSource", new RuntimeBeanReference(sourceName));, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/config/JtaTransactionManagerBeanDefinitionParser.java, + * Copyright 2002-2009 the original author or authors., +		return TxNamespaceHandler.DEFAULT_TRANSACTION_MANAGER_BEAN_NAME;, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/config/AnnotationDrivenBeanDefinitionParser.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;, +		def.getPropertyValues().addPropertyValue("transactionManagerBeanName",, +				TxNamespaceHandler.getTransactionManagerName(element));, +				RootBeanDefinition sourceDef = new RootBeanDefinition(AnnotationTransactionAttributeSource.class);, +				interceptorDef.getPropertyValues().addPropertyValue("transactionAttributeSource", new RuntimeBeanReference(sourceName));, +				advisorDef.getPropertyValues().addPropertyValue("transactionAttributeSource", new RuntimeBeanReference(sourceName));, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/config/JtaTransactionManagerBeanDefinitionParser.java, + * Copyright 2002-2009 the original author or authors., +		return TxNamespaceHandler.DEFAULT_TRANSACTION_MANAGER_BEAN_NAME;, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/config/TxAdviceBeanDefinitionParser.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;, +		builder.addPropertyReference("transactionManager", TxNamespaceHandler.getTransactionManagerName(element));, +			builder.addPropertyValue("transactionAttributeSource", attributeSourceDefinition);, +			builder.addPropertyValue("transactionAttributeSource",, +					new RootBeanDefinition(AnnotationTransactionAttributeSource.class));, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/config/AnnotationDrivenBeanDefinitionParser.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;, +		def.getPropertyValues().addPropertyValue("transactionManagerBeanName",, +				TxNamespaceHandler.getTransactionManagerName(element));, +				RootBeanDefinition sourceDef = new RootBeanDefinition(AnnotationTransactionAttributeSource.class);, +				interceptorDef.getPropertyValues().addPropertyValue("transactionAttributeSource", new RuntimeBeanReference(sourceName));, +				advisorDef.getPropertyValues().addPropertyValue("transactionAttributeSource", new RuntimeBeanReference(sourceName));, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/config/JtaTransactionManagerBeanDefinitionParser.java, + * Copyright 2002-2009 the original author or authors., +		return TxNamespaceHandler.DEFAULT_TRANSACTION_MANAGER_BEAN_NAME;, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/config/TxAdviceBeanDefinitionParser.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;, +		builder.addPropertyReference("transactionManager", TxNamespaceHandler.getTransactionManagerName(element));, +			builder.addPropertyValue("transactionAttributeSource", attributeSourceDefinition);, +			builder.addPropertyValue("transactionAttributeSource",, +					new RootBeanDefinition(AnnotationTransactionAttributeSource.class));, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/config/TxNamespaceHandler.java, + * Copyright 2002-2009 the original author or authors., +import org.w3c.dom.Element;, +, + * Spring transaction management facilities and offers two approaches, +	static final String TRANSACTION_MANAGER_ATTRIBUTE = "transaction-manager";, +, +	static final String DEFAULT_TRANSACTION_MANAGER_BEAN_NAME = "transactionManager";, +, +, +	static String getTransactionManagerName(Element element) {, +		return (element.hasAttribute(TRANSACTION_MANAGER_ATTRIBUTE) ?, +				element.getAttribute(TRANSACTION_MANAGER_ATTRIBUTE) : DEFAULT_TRANSACTION_MANAGER_BEAN_NAME);, +	}, +, +, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/config/AnnotationDrivenBeanDefinitionParser.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;, +		def.getPropertyValues().addPropertyValue("transactionManagerBeanName",, +				TxNamespaceHandler.getTransactionManagerName(element));, +				RootBeanDefinition sourceDef = new RootBeanDefinition(AnnotationTransactionAttributeSource.class);, +				interceptorDef.getPropertyValues().addPropertyValue("transactionAttributeSource", new RuntimeBeanReference(sourceName));, +				advisorDef.getPropertyValues().addPropertyValue("transactionAttributeSource", new RuntimeBeanReference(sourceName));, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/config/JtaTransactionManagerBeanDefinitionParser.java, + * Copyright 2002-2009 the original author or authors., +		return TxNamespaceHandler.DEFAULT_TRANSACTION_MANAGER_BEAN_NAME;, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/config/TxAdviceBeanDefinitionParser.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;, +		builder.addPropertyReference("transactionManager", TxNamespaceHandler.getTransactionManagerName(element));, +			builder.addPropertyValue("transactionAttributeSource", attributeSourceDefinition);, +			builder.addPropertyValue("transactionAttributeSource",, +					new RootBeanDefinition(AnnotationTransactionAttributeSource.class));, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/config/TxNamespaceHandler.java, + * Copyright 2002-2009 the original author or authors., +import org.w3c.dom.Element;, +, + * Spring transaction management facilities and offers two approaches, +	static final String TRANSACTION_MANAGER_ATTRIBUTE = "transaction-manager";, +, +	static final String DEFAULT_TRANSACTION_MANAGER_BEAN_NAME = "transactionManager";, +, +, +	static String getTransactionManagerName(Element element) {]