[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerResponse.java, +	 * Create a builder with the status set to {@linkplain HttpStatus#OK 200 OK}., +	 * Create a new builder with a {@linkplain HttpStatus#CREATED 201 Created} status, +	 * Create a builder with an {@linkplain HttpStatus#ACCEPTED 202 Accepted} status., +	 * Create a builder with a {@linkplain HttpStatus#NO_CONTENT 204 No Content} status., +	 * Create a builder with a {@linkplain HttpStatus#TEMPORARY_REDIRECT 307 Temporary Redirect}, +	 * status and a location header set to the given URI., +	 * @param location the location URI, +	 * @return the created builder, +	 */, +	static BodyBuilder temporaryRedirect(URI location) {, +		BodyBuilder builder = status(HttpStatus.TEMPORARY_REDIRECT);, +		return builder.location(location);, +	}, +, +	/**, +	 * Create a builder with a {@linkplain HttpStatus#PERMANENT_REDIRECT 308 Permanent Redirect}, +	 * status and a location header set to the given URI., +	 * @param location the location URI, +	 * @return the created builder, +	 */, +	static BodyBuilder permanentRedirect(URI location) {, +		BodyBuilder builder = status(HttpStatus.PERMANENT_REDIRECT);, +		return builder.location(location);, +	}, +, +	/**, +	 * Create a builder with a {@linkplain HttpStatus#BAD_REQUEST 400 Bad Request} status., +	 * Create a builder with a {@linkplain HttpStatus#NOT_FOUND 404 Not Found} status., +	 * {@linkplain HttpStatus#UNPROCESSABLE_ENTITY 422 Unprocessable Entity} status., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerResponse.java, +	 * Create a builder with the status set to {@linkplain HttpStatus#OK 200 OK}., +	 * Create a new builder with a {@linkplain HttpStatus#CREATED 201 Created} status, +	 * Create a builder with an {@linkplain HttpStatus#ACCEPTED 202 Accepted} status., +	 * Create a builder with a {@linkplain HttpStatus#NO_CONTENT 204 No Content} status., +	 * Create a builder with a {@linkplain HttpStatus#TEMPORARY_REDIRECT 307 Temporary Redirect}, +	 * status and a location header set to the given URI., +	 * @param location the location URI, +	 * @return the created builder, +	 */, +	static BodyBuilder temporaryRedirect(URI location) {, +		BodyBuilder builder = status(HttpStatus.TEMPORARY_REDIRECT);, +		return builder.location(location);, +	}, +, +	/**, +	 * Create a builder with a {@linkplain HttpStatus#PERMANENT_REDIRECT 308 Permanent Redirect}, +	 * status and a location header set to the given URI., +	 * @param location the location URI, +	 * @return the created builder, +	 */, +	static BodyBuilder permanentRedirect(URI location) {, +		BodyBuilder builder = status(HttpStatus.PERMANENT_REDIRECT);, +		return builder.location(location);, +	}, +, +	/**, +	 * Create a builder with a {@linkplain HttpStatus#BAD_REQUEST 400 Bad Request} status., +	 * Create a builder with a {@linkplain HttpStatus#NOT_FOUND 404 Not Found} status., +	 * {@linkplain HttpStatus#UNPROCESSABLE_ENTITY 422 Unprocessable Entity} status., +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/server/DefaultServerResponseBuilderTests.java, +import static org.junit.Assert.assertEquals;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +	public void temporaryRedirect() throws Exception {, +		URI location = URI.create("http://example.com");, +		Mono<ServerResponse> result = ServerResponse.temporaryRedirect(location).build();, +		StepVerifier.create(result), +				.expectNextMatches(response -> HttpStatus.TEMPORARY_REDIRECT.equals(response.statusCode()) &&, +						location.equals(response.headers().getLocation())), +				.expectComplete(), +				.verify();, +	}, +, +	@Test, +	public void permanentRedirect() throws Exception {, +		URI location = URI.create("http://example.com");, +		Mono<ServerResponse> result = ServerResponse.permanentRedirect(location).build();, +		StepVerifier.create(result), +				.expectNextMatches(response -> HttpStatus.PERMANENT_REDIRECT.equals(response.statusCode()) &&, +						location.equals(response.headers().getLocation())), +				.expectComplete(), +				.verify();, +	}, +, +	@Test]