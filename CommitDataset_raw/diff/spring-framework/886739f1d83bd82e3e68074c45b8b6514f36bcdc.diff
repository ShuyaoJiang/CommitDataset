[+++ b/org.springframework.expression/.classpath, +++ b/org.springframework.expression/.classpath, +++ b/org.springframework.expression/ivy.xml, +++ b/org.springframework.expression/.classpath, +++ b/org.springframework.expression/ivy.xml, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/EvaluationException.java, + * Represent an exception that occurs during expression evaluation., +public class EvaluationException extends ExpressionException {, +	 * Creates a new expression evaluation exception., +	 * @param position the position in the expression where the problem occurred, +	 * @param message description of the problem that occurred, +	public EvaluationException(int position, String message) {, +		super(position, message);, +	 * Creates a new expression evaluation exception., +	 * @param expressionString the expression that could not be evaluated, +	 * @param message description of the problem that occurred, +		super(expressionString, message);, +	 * Creates a new expression evaluation exception., +	 * @param position the position in the expression where the problem occurred, +	 * @param message description of the problem that occurred, +	 * @param cause the underlying cause of this exception, +	 */ , +	public EvaluationException(int position, String message, Throwable cause) {, +		super(position, message, cause);, +	}, +, +	/**, +	 * Creates a new expression evaluation exception., +	 * @param message description of the problem that occurred, +	public EvaluationException(String message, Throwable cause) {, +		super(message,cause);, +++ b/org.springframework.expression/.classpath, +++ b/org.springframework.expression/ivy.xml, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/EvaluationException.java, + * Represent an exception that occurs during expression evaluation., +public class EvaluationException extends ExpressionException {, +	 * Creates a new expression evaluation exception., +	 * @param position the position in the expression where the problem occurred, +	 * @param message description of the problem that occurred, +	public EvaluationException(int position, String message) {, +		super(position, message);, +	 * Creates a new expression evaluation exception., +	 * @param expressionString the expression that could not be evaluated, +	 * @param message description of the problem that occurred, +		super(expressionString, message);, +	 * Creates a new expression evaluation exception., +	 * @param position the position in the expression where the problem occurred, +	 * @param message description of the problem that occurred, +	 * @param cause the underlying cause of this exception, +	 */ , +	public EvaluationException(int position, String message, Throwable cause) {, +		super(position, message, cause);, +	}, +, +	/**, +	 * Creates a new expression evaluation exception., +	 * @param message description of the problem that occurred, +	public EvaluationException(String message, Throwable cause) {, +		super(message,cause);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/ExpressionException.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.expression;, +, +, +/**, + * Super class for exceptions that can occur whilst processing expressions, + *, + * @author Andy Clement, + * @since 3.0, + */, +public class ExpressionException extends Exception {, +, +	protected String expressionString;, +	protected int position; // -1 if not known - but should be known in all reasonable cases, +, +	/**, +	 * Creates a new expression exception., +	 * @param expressionString the expression string, +	 * @param message a descriptive message, +	 */, +	public ExpressionException(String expressionString, String message) {, +		super(message);, +		this.position = -1;, +		this.expressionString = expressionString;, +	}]