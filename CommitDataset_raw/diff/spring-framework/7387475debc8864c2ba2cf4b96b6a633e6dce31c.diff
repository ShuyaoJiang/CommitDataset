[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +										". Found constructor with 'required' Autowired annotation already: " +, +											". Found constructor with 'required' Autowired annotation: " +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +										". Found constructor with 'required' Autowired annotation already: " +, +											". Found constructor with 'required' Autowired annotation: " +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/SpelCompiler.java, +, +	// Counter suffix for generated classes within this SpelCompiler instance, +		cw.visit(V1_5, ACC_PUBLIC, clazzName, null, "org/springframework/expression/spel/CompiledExpression", null);, +	 * Request to revert to the interpreter for expression evaluation., +	 * Any compiled form is discarded but can be recreated by later recompiling again., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +										". Found constructor with 'required' Autowired annotation already: " +, +											". Found constructor with 'required' Autowired annotation: " +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/SpelCompiler.java, +, +	// Counter suffix for generated classes within this SpelCompiler instance, +		cw.visit(V1_5, ACC_PUBLIC, clazzName, null, "org/springframework/expression/spel/CompiledExpression", null);, +	 * Request to revert to the interpreter for expression evaluation., +	 * Any compiled form is discarded but can be recreated by later recompiling again., +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java, +, +			if (!Modifier.isPublic(this.member.getModifiers()) ||, +					!Modifier.isPublic(this.member.getDeclaringClass().getModifiers())) {, +			if (this.member instanceof Field) {, +				return ((Field) this.member).getType();, +				return ((Method) this.member).getReturnType();, +			boolean isStatic = Modifier.isStatic(this.member.getModifiers());, +			String memberDeclaringClassSlashedDescriptor = this.member.getDeclaringClass().getName().replace('.', '/');, +			if (this.member instanceof Field) {, +						this.member.getName(), CodeFlow.toJVMDescriptor(((Field) this.member).getType()));, +						this.member.getName(), CodeFlow.createSignatureDescriptor((Method) this.member),false);]