[+++ b/spring-context/src/main/java/org/springframework/context/ApplicationEventPublisher.java, + * Copyright 2002-2015 the original author or authors., +	 * Notify all <strong>matching</strong> listeners registered with this, +	 * application of an application event. Events may be framework events, +	 * (such as RequestHandledEvent) or application-specific events., +++ b/spring-context/src/main/java/org/springframework/context/ApplicationEventPublisher.java, + * Copyright 2002-2015 the original author or authors., +	 * Notify all <strong>matching</strong> listeners registered with this, +	 * application of an application event. Events may be framework events, +	 * (such as RequestHandledEvent) or application-specific events., +++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.core.ResolvableType;, + * @author Stephane Nicoll, + * @see #getApplicationListeners(ApplicationEvent, ResolvableType), +	 * @param eventType the event type, +	protected Collection<ApplicationListener<?>> getApplicationListeners(, +			ApplicationEvent event, ResolvableType eventType) {, +, +		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType);, +				Collection<ApplicationListener<?>> listeners =, +						retrieveApplicationListeners(event, eventType, sourceType, retriever);, +			return retrieveApplicationListeners(event, eventType, sourceType, null);, +	 * @param eventType the event type, +			ApplicationEvent event, ResolvableType eventType, Class<?> sourceType, ListenerRetriever retriever) {, +			if (supportsEvent(listener, eventType, sourceType)) {, +					if (listenerType == null || supportsEvent(listenerType, eventType)) {, +						if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {, +	 * {@link #supportsEvent(ApplicationListener,ResolvableType, Class)}  call afterwards., +	 * @param eventType the event type to check, +	protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType) {, +		if (GenericApplicationListener.class.isAssignableFrom(listenerType), +				|| SmartApplicationListener.class.isAssignableFrom(listenerType)) {, +		ResolvableType declaredEventType = GenericApplicationListenerAdapter.resolveDeclaredEventType(listenerType);, +		return (declaredEventType == null || declaredEventType.isAssignableFrom(eventType));, +	 * and {@link GenericApplicationListener} interfaces. In case of a standard, +	 * {@link ApplicationListener}, a {@link GenericApplicationListenerAdapter}, +	 * will be used to introspect the generically declared type of the target listener., +			ResolvableType eventType, Class<?> sourceType) {, +		GenericApplicationListener smartListener = (listener instanceof GenericApplicationListener ?, +				(GenericApplicationListener) listener : new GenericApplicationListenerAdapter(listener));, +		private final ResolvableType eventType;, +		public ListenerCacheKey(ResolvableType eventType, Class<?> sourceType) {, +++ b/spring-context/src/main/java/org/springframework/context/ApplicationEventPublisher.java, + * Copyright 2002-2015 the original author or authors., +	 * Notify all <strong>matching</strong> listeners registered with this, +	 * application of an application event. Events may be framework events, +	 * (such as RequestHandledEvent) or application-specific events., +++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.core.ResolvableType;, + * @author Stephane Nicoll, + * @see #getApplicationListeners(ApplicationEvent, ResolvableType), +	 * @param eventType the event type, +	protected Collection<ApplicationListener<?>> getApplicationListeners(, +			ApplicationEvent event, ResolvableType eventType) {, +, +		ListenerCacheKey cacheKey = new ListenerCacheKey(eventType, sourceType);, +				Collection<ApplicationListener<?>> listeners =, +						retrieveApplicationListeners(event, eventType, sourceType, retriever);, +			return retrieveApplicationListeners(event, eventType, sourceType, null);, +	 * @param eventType the event type, +			ApplicationEvent event, ResolvableType eventType, Class<?> sourceType, ListenerRetriever retriever) {, +			if (supportsEvent(listener, eventType, sourceType)) {, +					if (listenerType == null || supportsEvent(listenerType, eventType)) {, +						if (!allListeners.contains(listener) && supportsEvent(listener, eventType, sourceType)) {, +	 * {@link #supportsEvent(ApplicationListener,ResolvableType, Class)}  call afterwards., +	 * @param eventType the event type to check, +	protected boolean supportsEvent(Class<?> listenerType, ResolvableType eventType) {, +		if (GenericApplicationListener.class.isAssignableFrom(listenerType), +				|| SmartApplicationListener.class.isAssignableFrom(listenerType)) {, +		ResolvableType declaredEventType = GenericApplicationListenerAdapter.resolveDeclaredEventType(listenerType);, +		return (declaredEventType == null || declaredEventType.isAssignableFrom(eventType));, +	 * and {@link GenericApplicationListener} interfaces. In case of a standard, +	 * {@link ApplicationListener}, a {@link GenericApplicationListenerAdapter}, +	 * will be used to introspect the generically declared type of the target listener., +			ResolvableType eventType, Class<?> sourceType) {, +		GenericApplicationListener smartListener = (listener instanceof GenericApplicationListener ?, +				(GenericApplicationListener) listener : new GenericApplicationListenerAdapter(listener));, +		private final ResolvableType eventType;, +		public ListenerCacheKey(ResolvableType eventType, Class<?> sourceType) {, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationEventMulticaster.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.core.ResolvableType;, + * @author Stephane Nicoll, +	 * <p>Consider using {@link #multicastEvent(ApplicationEvent, ResolvableType)}, +	 * if possible as it provides a better support for generics-based events., +	/**, +	 * Multicast the given application event to appropriate listeners., +	 * <p>If the {@code eventType} is {@code null}, a default type is built, +	 * based on the {@code event} instance., +	 * @param event the event to multicast, +	 * @param eventType the type of event (can be null), +	 */, +	void multicastEvent(ApplicationEvent event, ResolvableType eventType);, +, +++ b/spring-context/src/main/java/org/springframework/context/ApplicationEventPublisher.java, + * Copyright 2002-2015 the original author or authors., +	 * Notify all <strong>matching</strong> listeners registered with this, +	 * application of an application event. Events may be framework events]