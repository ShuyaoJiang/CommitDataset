[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +	 * @param value the value to write to the output message, +	protected <T> void writeWithMessageConverters(T value, MethodParameter returnType,, +		Class<?> clazz = getReturnValueType(value, returnType);, +		Type type = getGenericType(returnType);, +		if (value != null && value instanceof CharSequence) {, +			clazz = String.class;, +			type = String.class;, +			value = (T) value.toString();, +		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, clazz, type);, +		if (value != null && producibleMediaTypes.isEmpty()) {, +			throw new IllegalArgumentException("No converter found for return value of type: " + clazz);, +			if (value != null) {, +					if (((GenericHttpMessageConverter<T>) messageConverter).canWrite(type,, +							clazz, selectedMediaType)) {, +						value = (T) getAdvice().beforeBodyWrite(value, returnType, selectedMediaType,, +						if (value != null) {, +							((GenericHttpMessageConverter<T>) messageConverter).write(value,, +									type, selectedMediaType, outputMessage);, +								logger.debug("Written [" + value + "] as \"" +, +				else if (messageConverter.canWrite(clazz, selectedMediaType)) {, +					value = (T) getAdvice().beforeBodyWrite(value, returnType, selectedMediaType,, +					if (value != null) {, +						((HttpMessageConverter<T>) messageConverter).write(value,, +							logger.debug("Written [" + value + "] as \"" +, +		if (value != null) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +	 * @param value the value to write to the output message, +	protected <T> void writeWithMessageConverters(T value, MethodParameter returnType,, +		Class<?> clazz = getReturnValueType(value, returnType);, +		Type type = getGenericType(returnType);, +		if (value != null && value instanceof CharSequence) {, +			clazz = String.class;, +			type = String.class;, +			value = (T) value.toString();, +		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, clazz, type);, +		if (value != null && producibleMediaTypes.isEmpty()) {, +			throw new IllegalArgumentException("No converter found for return value of type: " + clazz);, +			if (value != null) {, +					if (((GenericHttpMessageConverter<T>) messageConverter).canWrite(type,, +							clazz, selectedMediaType)) {, +						value = (T) getAdvice().beforeBodyWrite(value, returnType, selectedMediaType,, +						if (value != null) {, +							((GenericHttpMessageConverter<T>) messageConverter).write(value,, +									type, selectedMediaType, outputMessage);, +								logger.debug("Written [" + value + "] as \"" +, +				else if (messageConverter.canWrite(clazz, selectedMediaType)) {, +					value = (T) getAdvice().beforeBodyWrite(value, returnType, selectedMediaType,, +					if (value != null) {, +						((HttpMessageConverter<T>) messageConverter).write(value,, +							logger.debug("Written [" + value + "] as \"" +, +		if (value != null) {, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessorTests.java, +		Method method = getClass().getDeclaredMethod("handle", HttpEntity.class, HttpEntity.class);, +, +		List<HttpMessageConverter<?>> converters = new ArrayList<>();, +		List<HttpMessageConverter<?>> converters = new ArrayList<>();, +		converters.add(new MappingJackson2HttpMessageConverter());, +		List<HttpMessageConverter<?>> converters = new ArrayList<>();, +		List<HttpMessageConverter<?>> converters = new ArrayList<>();, +		List<HttpMessageConverter<?>> converters = new ArrayList<>();, +	private void handle(HttpEntity<List<SimpleBean>> arg1, HttpEntity<SimpleBean> arg2) {, +	private ResponseEntity<CharSequence> handle() {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +	 * @param value the value to write to the output message, +	protected <T> void writeWithMessageConverters(T value, MethodParameter returnType,, +		Class<?> clazz = getReturnValueType(value, returnType);, +		Type type = getGenericType(returnType);, +		if (value != null && value instanceof CharSequence) {, +			clazz = String.class;, +			type = String.class;, +			value = (T) value.toString();, +		List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, clazz, type);, +		if (value != null && producibleMediaTypes.isEmpty()) {, +			throw new IllegalArgumentException("No converter found for return value of type: " + clazz);, +			if (value != null) {, +					if (((GenericHttpMessageConverter<T>) messageConverter).canWrite(type,, +							clazz, selectedMediaType)) {, +						value = (T) getAdvice().beforeBodyWrite(value, returnType, selectedMediaType,, +						if (value != null) {, +							((GenericHttpMessageConverter<T>) messageConverter).write(value,, +									type, selectedMediaType, outputMessage);, +								logger.debug("Written [" + value + "] as \"" +, +				else if (messageConverter.canWrite(clazz, selectedMediaType)) {, +					value = (T) getAdvice().beforeBodyWrite(value, returnType, selectedMediaType,, +					if (value != null) {, +						((HttpMessageConverter<T>) messageConverter).write(value,, +							logger.debug("Written [" + value + "] as \"" +, +		if (value != null) {, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessorTests.java, +		Method method = getClass().getDeclaredMethod("handle", HttpEntity.class, HttpEntity.class);, +, +		List<HttpMessageConverter<?>> converters = new ArrayList<>();, +		List<HttpMessageConverter<?>> converters = new ArrayList<>();, +		converters.add(new MappingJackson2HttpMessageConverter());, +		List<HttpMessageConverter<?>> converters = new ArrayList<>();, +		List<HttpMessageConverter<?>> converters = new ArrayList<>();, +		List<HttpMessageConverter<?>> converters = new ArrayList<>();, +	private void handle(HttpEntity<List<SimpleBean>> arg1, HttpEntity<SimpleBean> arg2) {, +	private ResponseEntity<CharSequence> handle() {]