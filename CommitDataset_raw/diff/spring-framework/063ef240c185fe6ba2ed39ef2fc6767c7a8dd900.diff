[+++ b/spring-test/src/main/java/org/springframework/test/util/ReflectionTestUtils.java, + * Copyright 2002-2015 the original author or authors., + * <p>In addition, several methods in this class provide support for {@code static}, + * fields &mdash; for example, {@link #setField(Class, String, Object)},, + * {@link #getField(Class, String)}, etc., + *, +	 * Set the {@linkplain Field field} with the given {@code name} on the, +	 * provided {@code targetObject} to the supplied {@code value}., +	 * <p>This method delegates to {@link #setField(Object, String, Object, Class)},, +	 * supplying {@code null} for the {@code type} argument., +	 * @param targetObject the target object on which to set the field; never {@code null}, +	 * @param name the name of the field to set; never {@code null}, +	public static void setField(Object targetObject, String name, Object value) {, +		setField(targetObject, name, value, null);, +	 * Set the {@linkplain Field field} with the given {@code name}/{@code type}, +	 * on the provided {@code targetObject} to the supplied {@code value}., +	 *, +	 * <p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},, +	 * supplying {@code null} for the {@code targetClass} argument., +	 *, +	 * @param targetObject the target object on which to set the field; never {@code null}, +	 * @param name the name of the field to set; may be {@code null} if, +	 * {@code type} is specified, +	 * @param value the value to set, +	 * @param type the type of the field to set; may be {@code null} if, +	 * {@code name} is specified, +	 */, +	public static void setField(Object targetObject, String name, Object value, Class<?> type) {, +		setField(targetObject, null, name, value, type);, +	}, +, +	/**, +	 * Set the static {@linkplain Field field} with the given {@code name} on, +	 * the provided {@code targetClass} to the supplied {@code value}., +	 *, +	 * <p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},, +	 * supplying {@code null} for the {@code targetObject} and {@code type} arguments., +	 *, +	 * @param targetClass the target class on which to set the static field;, +	 * never {@code null}, +	 * @param name the name of the field to set; never {@code null}, +	 * @param value the value to set, +	 * @since 4.2, +	 */, +	public static void setField(Class<?> targetClass, String name, Object value) {, +		setField(null, targetClass, name, value, null);, +	}, +, +	/**, +	 * Set the static {@linkplain Field field} with the given, +	 * {@code name}/{@code type} on the provided {@code targetClass} to, +	 * the supplied {@code value}., +	 *, +	 * <p>This method delegates to {@link #setField(Object, Class, String, Object, Class)},, +	 * supplying {@code null} for the {@code targetObject} argument., +	 *, +	 * @param targetClass the target class on which to set the static field;, +	 * never {@code null}, +	 * @param name the name of the field to set; may be {@code null} if, +	 * {@code type} is specified, +	 * @param value the value to set, +	 * @param type the type of the field to set; may be {@code null} if, +	 * {@code name} is specified, +	 * @since 4.2, +	 */, +	public static void setField(Class<?> targetClass, String name, Object value, Class<?> type) {, +		setField(null, targetClass, name, value, type);, +	}, +, +	/**, +	 * Set the {@linkplain Field field} with the given {@code name}/{@code type}, +	 * on the provided {@code targetObject}/{@code targetClass} to the supplied, +	 * {@code value}., +	 * @param targetObject the target object on which to set the field; may be, +	 * {@code null} if the field is static, +	 * @param targetClass the target class on which to set the field; may, +	 * be {@code null} if the field is an instance field, +	 * @param name the name of the field to set; may be {@code null} if, +	 * {@code type} is specified, +	 * @param type the type of the field to set; may be {@code null} if, +	 * {@code name} is specified, +	 * @since 4.2, +	public static void setField(Object targetObject, Class<?> targetClass, String name, Object value, Class<?> type) {, +		Assert.isTrue(targetObject != null || targetClass != null,, +			"Either targetObject or targetClass for the field must be specified");, +		if (targetClass == null) {, +			targetClass = targetObject.getClass();, +		}, +		Field field = ReflectionUtils.findField(targetClass, name, type);, +, +		// Inline Assert.notNull() to avoid invoking toString() on a non-null target., +			throw new IllegalArgumentException(String.format(, +				"Could not find field [%s] of type [%s] on target object [%s] or target class [%s]", name, type,, +				targetObject, targetClass));, +			logger.debug(String.format(, +				"Setting field [%s] of type [%s] on target object [%s] or target class [%s] to value [%s]", name, type,, +				targetObject, targetClass, value));, +		ReflectionUtils.setField(field, targetObject, value);, +	 * Get the value of the {@linkplain Field field} with the given {@code name}, +	 * from the provided {@code targetObject}.]