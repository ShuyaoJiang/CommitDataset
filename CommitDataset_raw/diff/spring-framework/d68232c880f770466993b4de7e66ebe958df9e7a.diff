[+++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/AbstractRequestBodyPublisher.java, +	 * @return {@code true} if there is more demand; {@code false} otherwise, +	private boolean readAndPublish() throws IOException {, +		}, +, +	protected abstract void checkOnDataAvailable();, +	 * NO_DEMAND -------------------> DEMAND, +	 *    |    ^                      ^    |, +	 *    |    |                      |    |, +	 *    |    --------- READING <-----    |, +	 *    |                 |              |, +	 *    |                 v              |, +	 *    ------------> COMPLETED <---------, +		 * changing state to {@link #NO_DEMAND}., +				if (publisher.changeState(this, NO_DEMAND)) {, +		},, +		/**, +		 * State that gets entered when there is no demand. Responds to {@link, +		 * #request(AbstractRequestBodyPublisher, long)} by increasing the demand,, +		 * changing state to {@link #DEMAND} and will check whether there, +		 * is data available for reading., +		 */, +		NO_DEMAND {, +			void request(AbstractRequestBodyPublisher publisher, long n) {, +				if (BackpressureUtils.checkRequest(n, publisher.subscriber)) {, +					BackpressureUtils.addAndGet(publisher.demand, n);, +					if (publisher.changeState(this, DEMAND)) {, +						publisher.checkOnDataAvailable();, +					}, +				}, +		 * State that gets entered when there is demand. Responds to, +		 * {@link #onDataAvailable(AbstractRequestBodyPublisher)} by, +		 * reading the available data. The state will be changed to, +		 * {@link #NO_DEMAND} if there is no demand., +		DEMAND {, +			@Override, +			void onDataAvailable(AbstractRequestBodyPublisher publisher) {, +				if (publisher.changeState(this, READING)) {, +					try {, +						boolean demandAvailable = publisher.readAndPublish();, +						if (demandAvailable) {, +							publisher.changeState(READING, DEMAND);, +							publisher.checkOnDataAvailable();, +						} else {, +							publisher.changeState(READING, NO_DEMAND);, +						}, +					} catch (IOException ex) {, +						publisher.onError(ex);, +					}, +				}, +			}, +		},, +		READING {, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/AbstractRequestBodyPublisher.java, +	 * @return {@code true} if there is more demand; {@code false} otherwise, +	private boolean readAndPublish() throws IOException {, +		}, +, +	protected abstract void checkOnDataAvailable();, +	 * NO_DEMAND -------------------> DEMAND, +	 *    |    ^                      ^    |, +	 *    |    |                      |    |, +	 *    |    --------- READING <-----    |, +	 *    |                 |              |, +	 *    |                 v              |, +	 *    ------------> COMPLETED <---------, +		 * changing state to {@link #NO_DEMAND}., +				if (publisher.changeState(this, NO_DEMAND)) {, +		},, +		/**, +		 * State that gets entered when there is no demand. Responds to {@link, +		 * #request(AbstractRequestBodyPublisher, long)} by increasing the demand,, +		 * changing state to {@link #DEMAND} and will check whether there, +		 * is data available for reading., +		 */, +		NO_DEMAND {, +			void request(AbstractRequestBodyPublisher publisher, long n) {, +				if (BackpressureUtils.checkRequest(n, publisher.subscriber)) {, +					BackpressureUtils.addAndGet(publisher.demand, n);, +					if (publisher.changeState(this, DEMAND)) {, +						publisher.checkOnDataAvailable();, +					}, +				}, +		 * State that gets entered when there is demand. Responds to, +		 * {@link #onDataAvailable(AbstractRequestBodyPublisher)} by, +		 * reading the available data. The state will be changed to, +		 * {@link #NO_DEMAND} if there is no demand., +		DEMAND {, +			@Override, +			void onDataAvailable(AbstractRequestBodyPublisher publisher) {, +				if (publisher.changeState(this, READING)) {, +					try {, +						boolean demandAvailable = publisher.readAndPublish();, +						if (demandAvailable) {, +							publisher.changeState(READING, DEMAND);, +							publisher.checkOnDataAvailable();, +						} else {, +							publisher.changeState(READING, NO_DEMAND);, +						}, +					} catch (IOException ex) {]