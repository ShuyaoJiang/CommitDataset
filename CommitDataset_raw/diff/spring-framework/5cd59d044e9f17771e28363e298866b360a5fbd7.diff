[+++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, +	static class SimplePropertyDescriptor extends PropertyDescriptor {, +			PropertyDescriptorUtils.copyNonMethodProperties(original, this);, +			this.propertyType = PropertyDescriptorUtils.findPropertyType(readMethod, writeMethod);, +					this.propertyType = PropertyDescriptorUtils.findPropertyType(this.readMethod, this.writeMethod);, +	static class SimpleIndexedPropertyDescriptor extends IndexedPropertyDescriptor {, +			PropertyDescriptorUtils.copyNonMethodProperties(original, this);, +			this.propertyType = PropertyDescriptorUtils.findPropertyType(readMethod, writeMethod);, +			this.indexedPropertyType = PropertyDescriptorUtils.findIndexedPropertyType(, +					propertyName, this.propertyType, indexedReadMethod, indexedWriteMethod);, +					this.propertyType = PropertyDescriptorUtils.findPropertyType(this.readMethod, this.writeMethod);, +					this.indexedPropertyType = PropertyDescriptorUtils.findIndexedPropertyType(, +	static class PropertyDescriptorComparator implements Comparator<PropertyDescriptor> {, +, +}, +++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, +	static class SimplePropertyDescriptor extends PropertyDescriptor {, +			PropertyDescriptorUtils.copyNonMethodProperties(original, this);, +			this.propertyType = PropertyDescriptorUtils.findPropertyType(readMethod, writeMethod);, +					this.propertyType = PropertyDescriptorUtils.findPropertyType(this.readMethod, this.writeMethod);, +	static class SimpleIndexedPropertyDescriptor extends IndexedPropertyDescriptor {, +			PropertyDescriptorUtils.copyNonMethodProperties(original, this);, +			this.propertyType = PropertyDescriptorUtils.findPropertyType(readMethod, writeMethod);, +			this.indexedPropertyType = PropertyDescriptorUtils.findIndexedPropertyType(, +					propertyName, this.propertyType, indexedReadMethod, indexedWriteMethod);, +					this.propertyType = PropertyDescriptorUtils.findPropertyType(this.readMethod, this.writeMethod);, +					this.indexedPropertyType = PropertyDescriptorUtils.findIndexedPropertyType(, +	static class PropertyDescriptorComparator implements Comparator<PropertyDescriptor> {, +, +}, +++ b/spring-beans/src/main/java/org/springframework/beans/GenericTypeAwarePropertyDescriptor.java, +import org.springframework.util.ObjectUtils;, +final class GenericTypeAwarePropertyDescriptor extends PropertyDescriptor {, +	private final Class<?> propertyEditorClass;, +, +, +		if (beanClass == null)  {, +			throw new IntrospectionException("Bean class must not be null");, +		}, +, +		this.propertyEditorClass = propertyEditorClass;, +	@Override, +	public Class<?> getPropertyEditorClass() {, +		return this.propertyEditorClass;, +	}, +, +, +	@Override, +	public boolean equals(Object other) {, +		if (this == other) {, +			return true;, +		}, +		if (!(other instanceof GenericTypeAwarePropertyDescriptor)) {, +			return false;, +		}, +		GenericTypeAwarePropertyDescriptor otherPd = (GenericTypeAwarePropertyDescriptor) other;, +		return (getBeanClass().equals(otherPd.getBeanClass()) && PropertyDescriptorUtils.equals(this, otherPd));, +	}, +, +	@Override, +	public int hashCode() {, +		int hashCode = getBeanClass().hashCode();, +		hashCode = 29 * hashCode + ObjectUtils.nullSafeHashCode(getReadMethod());, +		hashCode = 29 * hashCode + ObjectUtils.nullSafeHashCode(getWriteMethod());, +		return hashCode;, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, +	static class SimplePropertyDescriptor extends PropertyDescriptor {, +			PropertyDescriptorUtils.copyNonMethodProperties(original, this);, +			this.propertyType = PropertyDescriptorUtils.findPropertyType(readMethod, writeMethod);, +					this.propertyType = PropertyDescriptorUtils.findPropertyType(this.readMethod, this.writeMethod);, +	static class SimpleIndexedPropertyDescriptor extends IndexedPropertyDescriptor {, +			PropertyDescriptorUtils.copyNonMethodProperties(original, this);, +			this.propertyType = PropertyDescriptorUtils.findPropertyType(readMethod, writeMethod);, +			this.indexedPropertyType = PropertyDescriptorUtils.findIndexedPropertyType(, +					propertyName, this.propertyType, indexedReadMethod, indexedWriteMethod);, +					this.propertyType = PropertyDescriptorUtils.findPropertyType(this.readMethod, this.writeMethod);, +					this.indexedPropertyType = PropertyDescriptorUtils.findIndexedPropertyType(, +	static class PropertyDescriptorComparator implements Comparator<PropertyDescriptor> {, +, +}, +++ b/spring-beans/src/main/java/org/springframework/beans/GenericTypeAwarePropertyDescriptor.java, +import org.springframework.util.ObjectUtils;, +final class GenericTypeAwarePropertyDescriptor extends PropertyDescriptor {, +	private final Class<?> propertyEditorClass;, +, +, +		if (beanClass == null)  {, +			throw new IntrospectionException("Bean class must not be null");, +		}, +, +		this.propertyEditorClass = propertyEditorClass;, +	@Override, +	public Class<?> getPropertyEditorClass() {, +		return this.propertyEditorClass;, +	}, +, +, +	@Override]