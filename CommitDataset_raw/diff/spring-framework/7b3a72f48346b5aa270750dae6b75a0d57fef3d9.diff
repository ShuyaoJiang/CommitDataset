[+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java, +import org.springframework.core.task.SyncTaskExecutor;, +import org.springframework.web.server.adapter.WebHttpHandlerBuilder;, +	private static final AsyncTaskExecutor DEFAULT_TASK_EXECUTOR =, +			new SimpleAsyncTaskExecutor(WebHttpHandlerBuilder.class.getSimpleName());, +, +	private static Boolean taskExecutorWarning = true;, +, +	private AsyncTaskExecutor taskExecutor = DEFAULT_TASK_EXECUTOR;, +		else {, +			logExecutorWarning();, +		}, +	@SuppressWarnings("ConstantConditions"), +	private void logExecutorWarning() {, +		if (taskExecutorWarning && logger.isWarnEnabled()) {, +			synchronized (DEFAULT_TASK_EXECUTOR) {, +				AsyncTaskExecutor executor = this.taskExecutor;, +				if (taskExecutorWarning &&, +						(executor instanceof SimpleAsyncTaskExecutor || executor instanceof SyncTaskExecutor)) {, +					String executorTypeName = executor.getClass().getSimpleName();, +					logger.warn("\n!!!\n" +, +							"An Executor is required to handle java.util.concurrent.Callable return values.\n" +, +							"Please, configure a TaskExecutor in the MVC config under \"async support\".\n" +, +							"The " + executorTypeName + " currently in use is not suitable under load.\n" +, +							"-------------------------------\n" +, +							"Request URI: '" + formatRequestUri() + "'\n" +, +							"!!!");, +					taskExecutorWarning = false;, +				}, +			}, +		}, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java, +import org.springframework.core.task.SyncTaskExecutor;, +import org.springframework.web.server.adapter.WebHttpHandlerBuilder;, +	private static final AsyncTaskExecutor DEFAULT_TASK_EXECUTOR =, +			new SimpleAsyncTaskExecutor(WebHttpHandlerBuilder.class.getSimpleName());, +, +	private static Boolean taskExecutorWarning = true;, +, +	private AsyncTaskExecutor taskExecutor = DEFAULT_TASK_EXECUTOR;, +		else {, +			logExecutorWarning();, +		}, +	@SuppressWarnings("ConstantConditions"), +	private void logExecutorWarning() {, +		if (taskExecutorWarning && logger.isWarnEnabled()) {, +			synchronized (DEFAULT_TASK_EXECUTOR) {, +				AsyncTaskExecutor executor = this.taskExecutor;, +				if (taskExecutorWarning &&, +						(executor instanceof SimpleAsyncTaskExecutor || executor instanceof SyncTaskExecutor)) {, +					String executorTypeName = executor.getClass().getSimpleName();, +					logger.warn("\n!!!\n" +, +							"An Executor is required to handle java.util.concurrent.Callable return values.\n" +, +							"Please, configure a TaskExecutor in the MVC config under \"async support\".\n" +, +							"The " + executorTypeName + " currently in use is not suitable under load.\n" +, +							"-------------------------------\n" +, +							"Request URI: '" + formatRequestUri() + "'\n" +, +							"!!!");, +					taskExecutorWarning = false;, +				}, +			}, +		}, +	}, +, +++ b/spring-web/src/test/java/org/springframework/web/context/request/async/WebAsyncManagerTests.java, + * Copyright 2002-2018 the original author or authors., +		verify(interceptor).postProcess(this.asyncWebRequest, task, concurrentResult);, +		verify(this.asyncWebRequest).addTimeoutHandler(notNull());, +		verify(this.asyncWebRequest).addErrorHandler(notNull());, +		verify(this.asyncWebRequest).addCompletionHandler(notNull());, +		verify(this.asyncWebRequest).addTimeoutHandler(notNull());, +		verify(this.asyncWebRequest).addErrorHandler(notNull());, +		verify(this.asyncWebRequest).addCompletionHandler(notNull());, +			this.asyncManager.startDeferredResultProcessing(null);, +		verify(this.asyncWebRequest).addTimeoutHandler(notNull());, +		verify(this.asyncWebRequest).addErrorHandler(notNull());, +		verify(this.asyncWebRequest).addCompletionHandler(notNull());, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java, +import org.springframework.core.task.SyncTaskExecutor;, +import org.springframework.web.server.adapter.WebHttpHandlerBuilder;, +	private static final AsyncTaskExecutor DEFAULT_TASK_EXECUTOR =, +			new SimpleAsyncTaskExecutor(WebHttpHandlerBuilder.class.getSimpleName());, +, +	private static Boolean taskExecutorWarning = true;, +, +	private AsyncTaskExecutor taskExecutor = DEFAULT_TASK_EXECUTOR;, +		else {, +			logExecutorWarning();, +		}, +	@SuppressWarnings("ConstantConditions"), +	private void logExecutorWarning() {, +		if (taskExecutorWarning && logger.isWarnEnabled()) {, +			synchronized (DEFAULT_TASK_EXECUTOR) {, +				AsyncTaskExecutor executor = this.taskExecutor;, +				if (taskExecutorWarning &&, +						(executor instanceof SimpleAsyncTaskExecutor || executor instanceof SyncTaskExecutor)) {, +					String executorTypeName = executor.getClass().getSimpleName();, +					logger.warn("\n!!!\n" +]