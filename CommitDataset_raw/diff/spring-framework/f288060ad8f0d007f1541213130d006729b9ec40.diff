[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, + * Copyright 2002-2011 the original author or authors., +, +							"] returned inappropriate value of type [").append(, +							ClassUtils.getDescriptiveType(convertedValue)).append("]");, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, + * Copyright 2002-2011 the original author or authors., +, +							"] returned inappropriate value of type [").append(, +							ClassUtils.getDescriptiveType(convertedValue)).append("]");, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/support/ResourceEditorRegistrar.java, +import org.springframework.core.env.StandardEnvironment;, +import org.springframework.core.io.ContextResource;, +		doRegisterEditor(registry, ContextResource.class, baseEditor);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, + * Copyright 2002-2011 the original author or authors., +, +							"] returned inappropriate value of type [").append(, +							ClassUtils.getDescriptiveType(convertedValue)).append("]");, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/support/ResourceEditorRegistrar.java, +import org.springframework.core.env.StandardEnvironment;, +import org.springframework.core.io.ContextResource;, +		doRegisterEditor(registry, ContextResource.class, baseEditor);, +++ b/org.springframework.context/src/test/java/org/springframework/beans/ResourceTestBean.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.core.io.ContextResource;, +	private ContextResource contextResource;, +, +	public void setResource(Resource resource) {, +		this.resource = resource;, +	}, +, +	public ContextResource getContextResource() {, +		return contextResource;, +	}, +, +	public void setContextResource(ContextResource contextResource) {, +		this.contextResource = contextResource;, +	}, +, +	public void setInputStream(InputStream inputStream) {, +		this.inputStream = inputStream;, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, + * Copyright 2002-2011 the original author or authors., +, +							"] returned inappropriate value of type [").append(, +							ClassUtils.getDescriptiveType(convertedValue)).append("]");, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/support/ResourceEditorRegistrar.java, +import org.springframework.core.env.StandardEnvironment;, +import org.springframework.core.io.ContextResource;, +		doRegisterEditor(registry, ContextResource.class, baseEditor);, +++ b/org.springframework.context/src/test/java/org/springframework/beans/ResourceTestBean.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.core.io.ContextResource;, +	private ContextResource contextResource;, +, +	public void setResource(Resource resource) {, +		this.resource = resource;, +	}, +, +	public ContextResource getContextResource() {, +		return contextResource;, +	}, +, +	public void setContextResource(ContextResource contextResource) {, +		this.contextResource = contextResource;, +	}, +, +	public void setInputStream(InputStream inputStream) {, +		this.inputStream = inputStream;, +	}, +, +++ b/org.springframework.context/src/test/java/org/springframework/context/support/ClassPathXmlApplicationContextTests-resourceImport.xml, +		<property name="contextResource">, +			<value>testBeans.properties</value>, +		</property>]