[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java, +, +, +, +, +		assertNotException(attributeName, value);, +		if (!expectedType.isInstance(value) && expectedType.isArray() &&, +				expectedType.getComponentType().isInstance(value)) {, +			String msg = String.format("In annotation [%s] declared on [%s], attribute [%s] and its alias [%s] " +, +					"are present with values of [%s] and [%s], but only one is permitted.",, +					annotationType.getName(), elementName, attributeName, aliasName,, +			assertNotException(attributeName, value);, +					"Neither attribute '%s' nor its alias '%s' was found in attributes for annotation [%s]",, +					attributeName, aliasName, this.displayName));, +		}, +	}, +, +	private void assertNotException(String attributeName, Object attributeValue) {, +		if (attributeValue instanceof Exception) {, +			throw new IllegalArgumentException(String.format(, +					"Attribute '%s' for annotation [%s] was not resolvable due to exception [%s]",, +					attributeName, this.displayName, attributeValue), (Exception) attributeValue);, +, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java, +, +, +, +, +		assertNotException(attributeName, value);, +		if (!expectedType.isInstance(value) && expectedType.isArray() &&, +				expectedType.getComponentType().isInstance(value)) {, +			String msg = String.format("In annotation [%s] declared on [%s], attribute [%s] and its alias [%s] " +, +					"are present with values of [%s] and [%s], but only one is permitted.",, +					annotationType.getName(), elementName, attributeName, aliasName,, +			assertNotException(attributeName, value);, +					"Neither attribute '%s' nor its alias '%s' was found in attributes for annotation [%s]",, +					attributeName, aliasName, this.displayName));, +		}, +	}, +, +	private void assertNotException(String attributeName, Object attributeValue) {, +		if (attributeValue instanceof Exception) {, +			throw new IllegalArgumentException(String.format(, +					"Attribute '%s' for annotation [%s] was not resolvable due to exception [%s]",, +					attributeName, this.displayName, attributeValue), (Exception) attributeValue);, +, +++ b/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationReadingVisitorUtils.java, +					value = (classValuesAsString ? ((Type) value).getClassName() :, +							classLoader.loadClass(((Type) value).getClassName()));, +						convArray[i] = (classValuesAsString ? array[i].getClassName() :, +								classLoader.loadClass(array[i].getClassName()));, +				// Class not found - can't resolve class reference in annotation attribute., +				result.put(entry.getKey(), ex);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java, +, +, +, +, +		assertNotException(attributeName, value);, +		if (!expectedType.isInstance(value) && expectedType.isArray() &&, +				expectedType.getComponentType().isInstance(value)) {, +			String msg = String.format("In annotation [%s] declared on [%s], attribute [%s] and its alias [%s] " +, +					"are present with values of [%s] and [%s], but only one is permitted.",, +					annotationType.getName(), elementName, attributeName, aliasName,, +			assertNotException(attributeName, value);, +					"Neither attribute '%s' nor its alias '%s' was found in attributes for annotation [%s]",, +					attributeName, aliasName, this.displayName));, +		}, +	}, +, +	private void assertNotException(String attributeName, Object attributeValue) {, +		if (attributeValue instanceof Exception) {, +			throw new IllegalArgumentException(String.format(, +					"Attribute '%s' for annotation [%s] was not resolvable due to exception [%s]",, +					attributeName, this.displayName, attributeValue), (Exception) attributeValue);, +, +++ b/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationReadingVisitorUtils.java, +					value = (classValuesAsString ? ((Type) value).getClassName() :, +							classLoader.loadClass(((Type) value).getClassName()));, +						convArray[i] = (classValuesAsString ? array[i].getClassName() :, +								classLoader.loadClass(array[i].getClassName()));, +				// Class not found - can't resolve class reference in annotation attribute., +				result.put(entry.getKey(), ex);, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationAttributesTests.java, +		attributes.put("unresolvableClass", new ClassNotFoundException("myclass"));, +, +		try {, +			attributes.getClass("unresolvableClass");, +			fail("Should have thrown IllegalArgumentException");, +		}, +		catch (IllegalArgumentException ex) {, +			assertTrue(ex.getCause() instanceof ClassNotFoundException);, +			assertTrue(ex.getMessage().contains("myclass"));, +		}]