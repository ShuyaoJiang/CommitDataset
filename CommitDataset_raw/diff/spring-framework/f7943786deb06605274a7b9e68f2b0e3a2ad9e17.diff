[+++ b/spring-test-mvc/src/main/java/org/springframework/test/web/mock/servlet/request/MockHttpServletRequestBuilder.java, +import java.io.UnsupportedEncodingException;, +import org.springframework.beans.BeanUtils;, +import org.springframework.web.util.UriUtils;, +	private final UriComponents uriComponents;, +	 * @param urlTemplate a URL template; the resulting URL will be encoded, +	 * @param urlVariables zero or more URL variables, +	MockHttpServletRequestBuilder(HttpMethod httpMethod, String urlTemplate, Object... urlVariables) {, +		Assert.notNull(urlTemplate, "uriTemplate is required");, +		this.uriComponents = UriComponentsBuilder.fromUriString(urlTemplate).buildAndExpand(urlVariables).encode();, +	public MockHttpServletRequestBuilder content(byte[] content) {, +		String requestUri = this.uriComponents.getPath();, +		if (this.uriComponents.getScheme() != null) {, +			request.setScheme(this.uriComponents.getScheme());, +		if (this.uriComponents.getHost() != null) {, +		if (this.uriComponents.getPort() != -1) {, +			request.setServerPort(this.uriComponents.getPort());, +		try {, +			if (this.uriComponents.getQuery() != null) {, +				String query = UriUtils.decode(this.uriComponents.getQuery(), "UTF-8");, +				request.setQueryString(query);, +, +			for (Entry<String, List<String>> entry : this.uriComponents.getQueryParams().entrySet()) {, +				for (String value : entry.getValue()) {, +					request.addParameter(, +							UriUtils.decode(entry.getKey(), "UTF-8"),, +							UriUtils.decode(value, "UTF-8"));, +				}, +			}, +		}, +		catch (UnsupportedEncodingException ex) {, +			// shouldn't happen, +++ b/spring-test-mvc/src/main/java/org/springframework/test/web/mock/servlet/request/MockHttpServletRequestBuilder.java, +import java.io.UnsupportedEncodingException;, +import org.springframework.beans.BeanUtils;, +import org.springframework.web.util.UriUtils;, +	private final UriComponents uriComponents;, +	 * @param urlTemplate a URL template; the resulting URL will be encoded, +	 * @param urlVariables zero or more URL variables, +	MockHttpServletRequestBuilder(HttpMethod httpMethod, String urlTemplate, Object... urlVariables) {, +		Assert.notNull(urlTemplate, "uriTemplate is required");, +		this.uriComponents = UriComponentsBuilder.fromUriString(urlTemplate).buildAndExpand(urlVariables).encode();, +	public MockHttpServletRequestBuilder content(byte[] content) {, +		String requestUri = this.uriComponents.getPath();, +		if (this.uriComponents.getScheme() != null) {, +			request.setScheme(this.uriComponents.getScheme());, +		if (this.uriComponents.getHost() != null) {, +		if (this.uriComponents.getPort() != -1) {, +			request.setServerPort(this.uriComponents.getPort());, +		try {, +			if (this.uriComponents.getQuery() != null) {, +				String query = UriUtils.decode(this.uriComponents.getQuery(), "UTF-8");, +				request.setQueryString(query);, +, +			for (Entry<String, List<String>> entry : this.uriComponents.getQueryParams().entrySet()) {, +				for (String value : entry.getValue()) {, +					request.addParameter(, +							UriUtils.decode(entry.getKey(), "UTF-8"),, +							UriUtils.decode(value, "UTF-8"));, +				}, +			}, +		}, +		catch (UnsupportedEncodingException ex) {, +			// shouldn't happen, +++ b/spring-test-mvc/src/main/java/org/springframework/test/web/mock/servlet/request/MockMultipartHttpServletRequestBuilder.java, +	 *, +	 * @param urlTemplate a URL template; the resulting URL will be encoded, +	 * @param urlVariables zero or more URL variables, +	MockMultipartHttpServletRequestBuilder(String urlTemplate, Object... urlVariables) {, +		super(HttpMethod.POST, urlTemplate, urlVariables);, +++ b/spring-test-mvc/src/main/java/org/springframework/test/web/mock/servlet/request/MockHttpServletRequestBuilder.java, +import java.io.UnsupportedEncodingException;, +import org.springframework.beans.BeanUtils;, +import org.springframework.web.util.UriUtils;, +	private final UriComponents uriComponents;, +	 * @param urlTemplate a URL template; the resulting URL will be encoded, +	 * @param urlVariables zero or more URL variables, +	MockHttpServletRequestBuilder(HttpMethod httpMethod, String urlTemplate, Object... urlVariables) {, +		Assert.notNull(urlTemplate, "uriTemplate is required");, +		this.uriComponents = UriComponentsBuilder.fromUriString(urlTemplate).buildAndExpand(urlVariables).encode();, +	public MockHttpServletRequestBuilder content(byte[] content) {, +		String requestUri = this.uriComponents.getPath();, +		if (this.uriComponents.getScheme() != null) {, +			request.setScheme(this.uriComponents.getScheme());, +		if (this.uriComponents.getHost() != null) {, +		if (this.uriComponents.getPort() != -1) {, +			request.setServerPort(this.uriComponents.getPort());, +		try {, +			if (this.uriComponents.getQuery() != null) {, +				String query = UriUtils.decode(this.uriComponents.getQuery(), "UTF-8");, +				request.setQueryString(query);, +, +			for (Entry<String, List<String>> entry : this.uriComponents.getQueryParams().entrySet()) {, +				for (String value : entry.getValue()) {, +					request.addParameter(, +							UriUtils.decode(entry.getKey(), "UTF-8"),, +							UriUtils.decode(value, "UTF-8"));, +				}, +			}, +		}]