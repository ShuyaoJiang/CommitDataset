[+++ b/spring-websocket/src/main/java/org/springframework/websocket/BinaryMessage.java, +import org.springframework.util.Assert;, +, +	private byte[] bytes;, +		this(payload, 0, (payload == null ? 0 : payload.length), isLast);, +	}, +, +	public BinaryMessage(byte[] payload, int offset, int len) {, +		this(payload, offset, len, true);, +	}, +, +	public BinaryMessage(byte[] payload, int offset, int len, boolean isLast) {, +		super(payload != null ? ByteBuffer.wrap(payload, offset, len) : null);, +		if(payload != null && offset == 0 && len == payload.length) {, +			// FIXME better if a message always needs a payload?, +		}, +		if(this.bytes == null && getPayload() != null) {, +			this.bytes = getRemainingBytes(getPayload());, +		}, +, +	private byte[] getRemainingBytes(ByteBuffer payload) {, +++ b/spring-websocket/src/main/java/org/springframework/websocket/BinaryMessage.java, +import org.springframework.util.Assert;, +, +	private byte[] bytes;, +		this(payload, 0, (payload == null ? 0 : payload.length), isLast);, +	}, +, +	public BinaryMessage(byte[] payload, int offset, int len) {, +		this(payload, offset, len, true);, +	}, +, +	public BinaryMessage(byte[] payload, int offset, int len, boolean isLast) {, +		super(payload != null ? ByteBuffer.wrap(payload, offset, len) : null);, +		if(payload != null && offset == 0 && len == payload.length) {, +			// FIXME better if a message always needs a payload?, +		}, +		if(this.bytes == null && getPayload() != null) {, +			this.bytes = getRemainingBytes(getPayload());, +		}, +, +	private byte[] getRemainingBytes(ByteBuffer payload) {, +++ b/spring-websocket/src/main/java/org/springframework/websocket/TextMessage.java, +++ b/spring-websocket/src/main/java/org/springframework/websocket/BinaryMessage.java, +import org.springframework.util.Assert;, +, +	private byte[] bytes;, +		this(payload, 0, (payload == null ? 0 : payload.length), isLast);, +	}, +, +	public BinaryMessage(byte[] payload, int offset, int len) {, +		this(payload, offset, len, true);, +	}, +, +	public BinaryMessage(byte[] payload, int offset, int len, boolean isLast) {, +		super(payload != null ? ByteBuffer.wrap(payload, offset, len) : null);, +		if(payload != null && offset == 0 && len == payload.length) {, +			// FIXME better if a message always needs a payload?, +		}, +		if(this.bytes == null && getPayload() != null) {, +			this.bytes = getRemainingBytes(getPayload());, +		}, +, +	private byte[] getRemainingBytes(ByteBuffer payload) {, +++ b/spring-websocket/src/main/java/org/springframework/websocket/TextMessage.java, +++ b/spring-websocket/src/main/java/org/springframework/websocket/WebSocketMessage.java, +import org.springframework.util.Assert;, +		Assert.notNull(payload, "Payload must not be null");]