[+++ b/org.springframework.context/src/main/java/org/springframework/ui/message/DefaultMessageResolver.java, +import java.util.Map;, +import org.springframework.context.expression.MapAccessor;, +import org.springframework.expression.AccessException;, +import org.springframework.expression.EvaluationContext;, +import org.springframework.expression.EvaluationException;, +import org.springframework.expression.Expression;, +import org.springframework.expression.ExpressionParser;, +import org.springframework.expression.ParseException;, +import org.springframework.expression.ParserContext;, +import org.springframework.expression.PropertyAccessor;, +import org.springframework.expression.TypedValue;, +import org.springframework.expression.spel.support.StandardEvaluationContext;, +	private Map<String, Object> args;, +	private ExpressionParser expressionParser;, +, +	public DefaultMessageResolver(Severity severity, String[] codes, Map<String, Object> args,, +			String defaultText, ExpressionParser expressionParser) {, +		this.expressionParser = expressionParser;, +		String messageString = messageSource.getMessage(this, locale);, +		Expression message;, +		try {, +			message = expressionParser.parseExpression(messageString, ParserContext.TEMPLATE_EXPRESSION);, +		} catch (ParseException e) {, +			throw new MessageResolutionException("Failed to parse message expression", e);, +		}, +		try {, +			StandardEvaluationContext context = new StandardEvaluationContext();, +			context.setRootObject(args);, +			context.addPropertyAccessor(new MapAccessor());, +			context.addPropertyAccessor(new MessageSourceResolvableAccessor(messageSource, locale));, +			String text = (String) message.getValue(context);, +		} catch (EvaluationException e) {, +			throw new MessageResolutionException("Failed to evaluate expression to generate message text", e);, +		}, +		return null;, +		return new ToStringCreator(this).append("severity", severity).append("codes", codes).append("defaultText",, +				defaultText).toString();, +	static class MessageSourceResolvableAccessor implements PropertyAccessor {, +, +		private MessageSource messageSource;, +		, +		private Locale locale;, +		, +		public MessageSourceResolvableAccessor(MessageSource messageSource, Locale locale) {, +			this.messageSource = messageSource;, +			this.locale = locale;, +		}, +, +		public boolean canRead(EvaluationContext context, Object target, String name) throws AccessException {, +			return true;, +		}, +, +		public TypedValue read(EvaluationContext context, Object target, String name) throws AccessException {, +			// TODO this does not get called when resolving MessageSourceResolvable variables; only when accessing properties on MessageSourceResolvable targets., +			return new TypedValue(messageSource.getMessage((MessageSourceResolvable)target, locale));, +		}, +, +		public boolean canWrite(EvaluationContext context, Object target, String name) throws AccessException {, +			return false;, +		}, +, +		@SuppressWarnings("unchecked"), +		public void write(EvaluationContext context, Object target, String name, Object newValue) throws AccessException {, +			throw new UnsupportedOperationException("Should not be called");, +		}, +, +		public Class[] getSpecificTargetClasses() {, +			return new Class[] { MessageSourceResolvable.class };, +		}, +		, +	}, +++ b/org.springframework.context/src/main/java/org/springframework/ui/message/DefaultMessageResolver.java, +import java.util.Map;, +import org.springframework.context.expression.MapAccessor;, +import org.springframework.expression.AccessException;, +import org.springframework.expression.EvaluationContext;, +import org.springframework.expression.EvaluationException;, +import org.springframework.expression.Expression;, +import org.springframework.expression.ExpressionParser;, +import org.springframework.expression.ParseException;, +import org.springframework.expression.ParserContext;, +import org.springframework.expression.PropertyAccessor;, +import org.springframework.expression.TypedValue;, +import org.springframework.expression.spel.support.StandardEvaluationContext;, +	private Map<String, Object> args;, +	private ExpressionParser expressionParser;, +, +	public DefaultMessageResolver(Severity severity, String[] codes, Map<String, Object> args,, +			String defaultText, ExpressionParser expressionParser) {, +		this.expressionParser = expressionParser;, +		String messageString = messageSource.getMessage(this, locale);, +		Expression message;, +		try {, +			message = expressionParser.parseExpression(messageString, ParserContext.TEMPLATE_EXPRESSION);, +		} catch (ParseException e) {, +			throw new MessageResolutionException("Failed to parse message expression", e);, +		}, +		try {, +			StandardEvaluationContext context = new StandardEvaluationContext();]