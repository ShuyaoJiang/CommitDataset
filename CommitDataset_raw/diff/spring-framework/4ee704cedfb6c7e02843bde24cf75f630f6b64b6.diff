[+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java, +import java.util.function.Supplier;, +, +	private final Supplier<?> timeoutResult;, +		this(null, () -> RESULT_NONE);, +	 * Create a DeferredResult with a custom timeout value., +		this(timeout, () -> RESULT_NONE);, +	public DeferredResult(@Nullable Long timeout, final Object timeoutResult) {, +		this.timeoutResult = () -> timeoutResult;, +	/**, +	 * Variant of {@link #DeferredResult(Long, Object)} that accepts a dynamic, +	 * fallback value based on a {@link Supplier}., +	 * @param timeout timeout value in milliseconds (ignored if {@code null}), +	 * @param timeoutResult the result supplier to use, +	 * @since 5.1.1, +	 */, +	public DeferredResult(@Nullable Long timeout, Supplier<?> timeoutResult) {, +		this.timeoutResult = timeoutResult;, +		this.timeout = timeout;, +	}, +					Object value = timeoutResult.get();, +					if (value != RESULT_NONE) {, +							setResultInternal(value);]