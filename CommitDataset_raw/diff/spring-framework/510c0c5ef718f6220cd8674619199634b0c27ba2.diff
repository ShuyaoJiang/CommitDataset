[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java, +import org.springframework.web.util.pattern.PathPattern;, +	protected abstract Set<PathPattern> getMappingPathPatterns(T mapping);, +			if (logger.isWarnEnabled() && getMappingPathPatterns(mapping).stream(), +					.map(PathPattern::getPatternString).noneMatch(StringUtils::hasText)) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java, +import org.springframework.web.util.pattern.PathPattern;, +	protected abstract Set<PathPattern> getMappingPathPatterns(T mapping);, +			if (logger.isWarnEnabled() && getMappingPathPatterns(mapping).stream(), +					.map(PathPattern::getPatternString).noneMatch(StringUtils::hasText)) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerMapping.java, +	protected Set<PathPattern> getMappingPathPatterns(RequestMappingInfo info) {, +		return info.getPatternsCondition().getPatterns();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java, +import org.springframework.web.util.pattern.PathPattern;, +	protected abstract Set<PathPattern> getMappingPathPatterns(T mapping);, +			if (logger.isWarnEnabled() && getMappingPathPatterns(mapping).stream(), +					.map(PathPattern::getPatternString).noneMatch(StringUtils::hasText)) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerMapping.java, +	protected Set<PathPattern> getMappingPathPatterns(RequestMappingInfo info) {, +		return info.getPatternsCondition().getPatterns();, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/HandlerMethodMappingTests.java, +		protected Set<PathPattern> getMappingPathPatterns(String mapping) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java, +import org.springframework.web.util.pattern.PathPattern;, +	protected abstract Set<PathPattern> getMappingPathPatterns(T mapping);, +			if (logger.isWarnEnabled() && getMappingPathPatterns(mapping).stream(), +					.map(PathPattern::getPatternString).noneMatch(StringUtils::hasText)) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerMapping.java, +	protected Set<PathPattern> getMappingPathPatterns(RequestMappingInfo info) {, +		return info.getPatternsCondition().getPatterns();, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/HandlerMethodMappingTests.java, +		protected Set<PathPattern> getMappingPathPatterns(String mapping) {, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/RequestMappingInfoHandlerMappingTests.java, +		protected Set<PathPattern> getMappingPathPatterns(RequestMappingInfo info) {, +			return info.getPatternsCondition().getPatterns();]