[+++ b/spring-websocket/src/main/java/org/springframework/web/messaging/PubSubHeaders.java, +import java.util.Collections;, +				(Map<String, String>) messageHeaders.get(RAW_HEADERS) : Collections.<String, String>emptyMap();, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/PubSubHeaders.java, +import java.util.Collections;, +				(Map<String, String>) messageHeaders.get(RAW_HEADERS) : Collections.<String, String>emptyMap();, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/service/AbstractMessageService.java, +				PubSubHeaders headers = new PubSubHeaders(message.getHeaders(), true);, +				MessageType messageType = headers.getMessageType();, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/PubSubHeaders.java, +import java.util.Collections;, +				(Map<String, String>) messageHeaders.get(RAW_HEADERS) : Collections.<String, String>emptyMap();, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/service/AbstractMessageService.java, +				PubSubHeaders headers = new PubSubHeaders(message.getHeaders(), true);, +				MessageType messageType = headers.getMessageType();, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/stomp/StompHeaders.java, +		if (StompCommand.MESSAGE.equals(getStompCommand()) && (getMessageId() == null)) {, +			getRawHeaders().put(MESSAGE_ID, getMessageHeaders().get(ID).toString());, +		}]