[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorGreaterThanOrEqual.java, +			Number leftNumber = (Number) left;, +			Number rightNumber = (Number) right;, +			if (leftNumber instanceof Double || rightNumber instanceof Double) {, +				return BooleanTypedValue.forValue(leftNumber.doubleValue() >= rightNumber.doubleValue());, +			} else if (leftNumber instanceof Long || rightNumber instanceof Long) {, +				return BooleanTypedValue.forValue( leftNumber.longValue() >= rightNumber.longValue());, +			} else {, +				return BooleanTypedValue.forValue(leftNumber.intValue() >= rightNumber.intValue());, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorGreaterThanOrEqual.java, +			Number leftNumber = (Number) left;, +			Number rightNumber = (Number) right;, +			if (leftNumber instanceof Double || rightNumber instanceof Double) {, +				return BooleanTypedValue.forValue(leftNumber.doubleValue() >= rightNumber.doubleValue());, +			} else if (leftNumber instanceof Long || rightNumber instanceof Long) {, +				return BooleanTypedValue.forValue( leftNumber.longValue() >= rightNumber.longValue());, +			} else {, +				return BooleanTypedValue.forValue(leftNumber.intValue() >= rightNumber.intValue());, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorMinus.java, + * The minus operator supports:, + * <ul>, + * <li>subtraction of doubles (floats are represented as doubles), + * <li>subtraction of longs, + * <li>subtraction of integers, + * <li>subtraction of an int from a string of one character (effectively decreasing that character), so 'd'-3='a', + * </ul>, + * It can be used as a unary operator for numbers (double/long/int).  The standard promotions are performed, + * when the operand types vary (double-int=double)., + * For other options it defers to the registered overloader., +			Object operand = leftOp.getValueInternal(state).getValue();, +			if (operand instanceof Number) {, +				Number n = (Number) operand;, +				if (operand instanceof Double) {, +				} else if (operand instanceof Long) {, +				} else {, +			return state.operate(Operation.SUBTRACT, operand, null);, +		} else {, +				} else if (op1 instanceof Long || op2 instanceof Long) {, +				} else {, +			} else if (left instanceof String && right instanceof Integer && ((String)left).length()==1) {, +				String theString = (String) left;, +				Integer theInteger = (Integer) right;, +				// implements character - int (ie. b - 1 = a), +				return new TypedValue(Character.toString((char) (theString.charAt(0) - theInteger)),STRING_TYPE_DESCRIPTOR);, +	@Override, +	public String getOperatorName() {, +		return "-";, +	}, +, +	@Override, +	public String toStringAST() {, +		if (getRightOperand() == null) { // unary minus, +			return new StringBuilder().append("-").append(getLeftOperand().toStringAST()).toString();, +		}, +		return super.toStringAST();, +	}, +, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorGreaterThanOrEqual.java, +			Number leftNumber = (Number) left;, +			Number rightNumber = (Number) right;, +			if (leftNumber instanceof Double || rightNumber instanceof Double) {, +				return BooleanTypedValue.forValue(leftNumber.doubleValue() >= rightNumber.doubleValue());, +			} else if (leftNumber instanceof Long || rightNumber instanceof Long) {, +				return BooleanTypedValue.forValue( leftNumber.longValue() >= rightNumber.longValue());, +			} else {, +				return BooleanTypedValue.forValue(leftNumber.intValue() >= rightNumber.intValue());, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorMinus.java, + * The minus operator supports:, + * <ul>, + * <li>subtraction of doubles (floats are represented as doubles), + * <li>subtraction of longs, + * <li>subtraction of integers, + * <li>subtraction of an int from a string of one character (effectively decreasing that character), so 'd'-3='a', + * </ul>, + * It can be used as a unary operator for numbers (double/long/int).  The standard promotions are performed, + * when the operand types vary (double-int=double)., + * For other options it defers to the registered overloader., +			Object operand = leftOp.getValueInternal(state).getValue();, +			if (operand instanceof Number) {, +				Number n = (Number) operand;, +				if (operand instanceof Double) {, +				} else if (operand instanceof Long) {, +				} else {, +			return state.operate(Operation.SUBTRACT, operand, null);, +		} else {, +				} else if (op1 instanceof Long || op2 instanceof Long) {, +				} else {, +			} else if (left instanceof String && right instanceof Integer && ((String)left).length()==1) {, +				String theString = (String) left;, +				Integer theInteger = (Integer) right;, +				// implements character - int (ie. b - 1 = a), +				return new TypedValue(Character.toString((char) (theString.charAt(0) - theInteger)),STRING_TYPE_DESCRIPTOR);, +	@Override, +	public String getOperatorName() {, +		return "-";, +	}, +, +	@Override, +	public String toStringAST() {, +		if (getRightOperand() == null) { // unary minus]