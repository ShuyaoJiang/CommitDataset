[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, + * during expression evaluation. This is an SPI for the expression parser;, + * see {@link org.springframework.core.convert.ConversionService} for the, + * primary user API to Spring's conversion facilities., + * @author Juergen Hoeller, +	 * Return true if the type converter can convert the specified type to the desired target type., +	 * @param sourceType the type to be converted from, +	 * @param targetType the type to be converted to, +	 * @return true if that conversion can be performed, +	boolean canConvert(Class<?> sourceType, Class<?> targetType);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, + * during expression evaluation. This is an SPI for the expression parser;, + * see {@link org.springframework.core.convert.ConversionService} for the, + * primary user API to Spring's conversion facilities., + * @author Juergen Hoeller, +	 * Return true if the type converter can convert the specified type to the desired target type., +	 * @param sourceType the type to be converted from, +	 * @param targetType the type to be converted to, +	 * @return true if that conversion can be performed, +	boolean canConvert(Class<?> sourceType, Class<?> targetType);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/common/ExpressionUtils.java, +import org.springframework.core.convert.TypeDescriptor;, +			return (T) context.getTypeConverter().convertValue(value, TypeDescriptor.valueOf(targetType));, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, + * during expression evaluation. This is an SPI for the expression parser;, + * see {@link org.springframework.core.convert.ConversionService} for the, + * primary user API to Spring's conversion facilities., + * @author Juergen Hoeller, +	 * Return true if the type converter can convert the specified type to the desired target type., +	 * @param sourceType the type to be converted from, +	 * @param targetType the type to be converted to, +	 * @return true if that conversion can be performed, +	boolean canConvert(Class<?> sourceType, Class<?> targetType);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/common/ExpressionUtils.java, +import org.springframework.core.convert.TypeDescriptor;, +			return (T) context.getTypeConverter().convertValue(value, TypeDescriptor.valueOf(targetType));, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/SpelExpression.java, + * Copyright 2002-2009 the original author or authors., +, +				result = context.getTypeConverter().convertValue(result, TypeDescriptor.valueOf(expectedResultType));, +		return ast.getValueInternal(eState).getTypeDescriptor();, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, + * during expression evaluation. This is an SPI for the expression parser;, + * see {@link org.springframework.core.convert.ConversionService} for the, + * primary user API to Spring's conversion facilities., + * @author Juergen Hoeller, +	 * Return true if the type converter can convert the specified type to the desired target type., +	 * @param sourceType the type to be converted from, +	 * @param targetType the type to be converted to, +	 * @return true if that conversion can be performed, +	boolean canConvert(Class<?> sourceType, Class<?> targetType);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/common/ExpressionUtils.java, +import org.springframework.core.convert.TypeDescriptor;, +			return (T) context.getTypeConverter().convertValue(value, TypeDescriptor.valueOf(targetType));, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/SpelExpression.java, + * Copyright 2002-2009 the original author or authors., +, +				result = context.getTypeConverter().convertValue(result, TypeDescriptor.valueOf(expectedResultType));, +		return ast.getValueInternal(eState).getTypeDescriptor();, +++ /dev/null, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, + * during expression evaluation. This is an SPI for the expression parser;, + * see {@link org.springframework.core.convert.ConversionService} for the, + * primary user API to Spring's conversion facilities., + * @author Juergen Hoeller, +	 * Return true if the type converter can convert the specified type to the desired target type., +	 * @param sourceType the type to be converted from, +	 * @param targetType the type to be converted to, +	 * @return true if that conversion can be performed, +	boolean canConvert(Class<?> sourceType, Class<?> targetType);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/common/ExpressionUtils.java, +import org.springframework.core.convert.TypeDescriptor;, +			return (T) context.getTypeConverter().convertValue(value, TypeDescriptor.valueOf(targetType));, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/SpelExpression.java, + * Copyright 2002-2009 the original author or authors., +, +				result = context.getTypeConverter().convertValue(result, TypeDescriptor.valueOf(expectedResultType));, +		return ast.getValueInternal(eState).getTypeDescriptor();, +++ /dev/null, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java, +			indexValue = new TypedValue(index, TypeDescriptor.valueOf(String.class));, +					TypeDescriptor.valueOf(targetObjectTypeDescriptor.getMapValueType()): TypeDescriptor.valueOf(Object.class);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, + * during expression evaluation. This is an SPI for the expression parser;, + * see {@link org.springframework.core.convert.ConversionService} for the, + * primary user API to Spring's conversion facilities., + * @author Juergen Hoeller, +	 * Return true if the type converter can convert the specified type to the desired target type., +	 * @param sourceType the type to be converted from, +	 * @param targetType the type to be converted to, +	 * @return true if that conversion can be performed, +	boolean canConvert(Class<?> sourceType, Class<?> targetType);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/common/ExpressionUtils.java, +import org.springframework.core.convert.TypeDescriptor;, +			return (T) context.getTypeConverter().convertValue(value, TypeDescriptor.valueOf(targetType));, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/SpelExpression.java, + * Copyright 2002-2009 the original author or authors., +, +				result = context.getTypeConverter().convertValue(result, TypeDescriptor.valueOf(expectedResultType));, +		return ast.getValueInternal(eState).getTypeDescriptor();]