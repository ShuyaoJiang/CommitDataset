[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, + * Copyright 2002-2012 the original author or authors., +, +		@Override, +		public boolean equals(Object other) {, +			if (this == other) {, +				return true;, +			}, +			if (!(other instanceof AdviceExcludingMethodMatcher)) {, +				return false;, +			}, +			AdviceExcludingMethodMatcher otherMm = (AdviceExcludingMethodMatcher) other;, +			return this.adviceMethod.equals(otherMm.adviceMethod);, +		}, +, +		@Override, +		public int hashCode() {, +			return this.adviceMethod.hashCode();, +		}, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, + * Copyright 2002-2012 the original author or authors., +, +		@Override, +		public boolean equals(Object other) {, +			if (this == other) {, +				return true;, +			}, +			if (!(other instanceof AdviceExcludingMethodMatcher)) {, +				return false;, +			}, +			AdviceExcludingMethodMatcher otherMm = (AdviceExcludingMethodMatcher) other;, +			return this.adviceMethod.equals(otherMm.adviceMethod);, +		}, +, +		@Override, +		public int hashCode() {, +			return this.adviceMethod.hashCode();, +		}, +++ b/spring-aop/src/main/java/org/springframework/aop/support/annotation/AnnotationMethodMatcher.java, + * Copyright 2002-2012 the original author or authors., +	@Override, +	public boolean equals(Object other) {, +		if (this == other) {, +			return true;, +		}, +		if (!(other instanceof AnnotationMethodMatcher)) {, +			return false;, +		}, +		AnnotationMethodMatcher otherMm = (AnnotationMethodMatcher) other;, +		return this.annotationType.equals(otherMm.annotationType);, +	}, +, +	@Override, +	public int hashCode() {, +		return this.annotationType.hashCode();, +	}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, + * Copyright 2002-2012 the original author or authors., +, +		@Override, +		public boolean equals(Object other) {, +			if (this == other) {, +				return true;, +			}, +			if (!(other instanceof AdviceExcludingMethodMatcher)) {, +				return false;, +			}, +			AdviceExcludingMethodMatcher otherMm = (AdviceExcludingMethodMatcher) other;, +			return this.adviceMethod.equals(otherMm.adviceMethod);, +		}, +, +		@Override, +		public int hashCode() {, +			return this.adviceMethod.hashCode();, +		}, +++ b/spring-aop/src/main/java/org/springframework/aop/support/annotation/AnnotationMethodMatcher.java, + * Copyright 2002-2012 the original author or authors., +	@Override, +	public boolean equals(Object other) {, +		if (this == other) {, +			return true;, +		}, +		if (!(other instanceof AnnotationMethodMatcher)) {, +			return false;, +		}, +		AnnotationMethodMatcher otherMm = (AnnotationMethodMatcher) other;, +		return this.annotationType.equals(otherMm.annotationType);, +	}, +, +	@Override, +	public int hashCode() {, +		return this.annotationType.hashCode();, +	}, +, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/AnnotationCacheOperationSource.java, + * Copyright 2002-2012 the original author or authors., + * @author Juergen Hoeller, +	 * @param annotationParser the CacheAnnotationParser to use, +	 */]