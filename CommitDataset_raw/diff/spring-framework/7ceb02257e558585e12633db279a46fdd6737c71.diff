[+++ b/spring-orm/src/main/java/org/springframework/orm/jdo/DefaultJdoDialect.java, + * As of Spring 4.0, designed for JDO 3.0 (or rather, semantics beyond JDO 3.0)., + * Used as default dialect by {@link JdoTransactionManager}., + * Returns a handle for a JDO DataStoreConnection on {@code getJdbcConnection}., + * Calls the corresponding JDO PersistenceManager operation on {@code flush}, + * <p>Note that, even with JDO 3.0, vendor-specific subclasses are still necessary, + * Connection on {@code getJdbcConnection}, rather than JDO 3.0's wrapper handle., +	 * This implementation returns a DataStoreConnectionHandle for JDO., +	 * <p><b>NOTE:</b> A JDO DataStoreConnection is always a wrapper,, +	 * <p>A JDO DataStoreConnection is only "borrowed" from the PersistenceManager:, +	 * it needs to be returned as early as possible. Effectively, JDO requires the, +	// Hook for exception translation (used by JdoTransactionManager), +	 * ConnectionHandle implementation that fetches a new JDO DataStoreConnection, +	 * {@code releaseConnection}. This is necessary because JDO requires the, +++ b/spring-orm/src/main/java/org/springframework/orm/jdo/DefaultJdoDialect.java, + * As of Spring 4.0, designed for JDO 3.0 (or rather, semantics beyond JDO 3.0)., + * Used as default dialect by {@link JdoTransactionManager}., + * Returns a handle for a JDO DataStoreConnection on {@code getJdbcConnection}., + * Calls the corresponding JDO PersistenceManager operation on {@code flush}, + * <p>Note that, even with JDO 3.0, vendor-specific subclasses are still necessary, + * Connection on {@code getJdbcConnection}, rather than JDO 3.0's wrapper handle., +	 * This implementation returns a DataStoreConnectionHandle for JDO., +	 * <p><b>NOTE:</b> A JDO DataStoreConnection is always a wrapper,, +	 * <p>A JDO DataStoreConnection is only "borrowed" from the PersistenceManager:, +	 * it needs to be returned as early as possible. Effectively, JDO requires the, +	// Hook for exception translation (used by JdoTransactionManager), +	 * ConnectionHandle implementation that fetches a new JDO DataStoreConnection, +	 * {@code releaseConnection}. This is necessary because JDO requires the, +++ /dev/null, +++ b/spring-orm/src/main/java/org/springframework/orm/jdo/DefaultJdoDialect.java, + * As of Spring 4.0, designed for JDO 3.0 (or rather, semantics beyond JDO 3.0)., + * Used as default dialect by {@link JdoTransactionManager}., + * Returns a handle for a JDO DataStoreConnection on {@code getJdbcConnection}., + * Calls the corresponding JDO PersistenceManager operation on {@code flush}, + * <p>Note that, even with JDO 3.0, vendor-specific subclasses are still necessary, + * Connection on {@code getJdbcConnection}, rather than JDO 3.0's wrapper handle., +	 * This implementation returns a DataStoreConnectionHandle for JDO., +	 * <p><b>NOTE:</b> A JDO DataStoreConnection is always a wrapper,, +	 * <p>A JDO DataStoreConnection is only "borrowed" from the PersistenceManager:, +	 * it needs to be returned as early as possible. Effectively, JDO requires the, +	// Hook for exception translation (used by JdoTransactionManager), +	 * ConnectionHandle implementation that fetches a new JDO DataStoreConnection, +	 * {@code releaseConnection}. This is necessary because JDO requires the, +++ /dev/null, +++ /dev/null, +++ b/spring-orm/src/main/java/org/springframework/orm/jdo/DefaultJdoDialect.java, + * As of Spring 4.0, designed for JDO 3.0 (or rather, semantics beyond JDO 3.0)., + * Used as default dialect by {@link JdoTransactionManager}., + * Returns a handle for a JDO DataStoreConnection on {@code getJdbcConnection}., + * Calls the corresponding JDO PersistenceManager operation on {@code flush}, + * <p>Note that, even with JDO 3.0, vendor-specific subclasses are still necessary, + * Connection on {@code getJdbcConnection}, rather than JDO 3.0's wrapper handle., +	 * This implementation returns a DataStoreConnectionHandle for JDO., +	 * <p><b>NOTE:</b> A JDO DataStoreConnection is always a wrapper,, +	 * <p>A JDO DataStoreConnection is only "borrowed" from the PersistenceManager:, +	 * it needs to be returned as early as possible. Effectively, JDO requires the, +	// Hook for exception translation (used by JdoTransactionManager), +	 * ConnectionHandle implementation that fetches a new JDO DataStoreConnection, +	 * {@code releaseConnection}. This is necessary because JDO requires the, +++ /dev/null, +++ /dev/null, +++ b/spring-orm/src/main/java/org/springframework/orm/jdo/JdoDialect.java, + * Copyright 2002-2013 the original author or authors., + * <p>JDO 3.0 defines standard ways for most of the functionality covered here., + * Hence, Spring's {@link DefaultJdoDialect} uses the corresponding JDO 3.0 methods, +	// Hook for exception translation (used by JdoTransactionManager), +++ b/spring-orm/src/main/java/org/springframework/orm/jdo/DefaultJdoDialect.java, + * As of Spring 4.0, designed for JDO 3.0 (or rather, semantics beyond JDO 3.0)., + * Used as default dialect by {@link JdoTransactionManager}., + * Returns a handle for a JDO DataStoreConnection on {@code getJdbcConnection}., + * Calls the corresponding JDO PersistenceManager operation on {@code flush}, + * <p>Note that, even with JDO 3.0, vendor-specific subclasses are still necessary, + * Connection on {@code getJdbcConnection}, rather than JDO 3.0's wrapper handle., +	 * This implementation returns a DataStoreConnectionHandle for JDO., +	 * <p><b>NOTE:</b> A JDO DataStoreConnection is always a wrapper,, +	 * <p>A JDO DataStoreConnection is only "borrowed" from the PersistenceManager:, +	 * it needs to be returned as early as possible. Effectively, JDO requires the, +	// Hook for exception translation (used by JdoTransactionManager), +	 * ConnectionHandle implementation that fetches a new JDO DataStoreConnection, +	 * {@code releaseConnection}. This is necessary because JDO requires the, +++ /dev/null, +++ /dev/null, +++ b/spring-orm/src/main/java/org/springframework/orm/jdo/JdoDialect.java, + * Copyright 2002-2013 the original author or authors., + * <p>JDO 3.0 defines standard ways for most of the functionality covered here., + * Hence, Spring's {@link DefaultJdoDialect} uses the corresponding JDO 3.0 methods, +	// Hook for exception translation (used by JdoTransactionManager), +++ /dev/null, +++ b/spring-orm/src/main/java/org/springframework/orm/jdo/DefaultJdoDialect.java, + * As of Spring 4.0, designed for JDO 3.0 (or rather, semantics beyond JDO 3.0)., + * Used as default dialect by {@link JdoTransactionManager}., + * Returns a handle for a JDO DataStoreConnection on {@code getJdbcConnection}., + * Calls the corresponding JDO PersistenceManager operation on {@code flush}, + * <p>Note that, even with JDO 3.0, vendor-specific subclasses are still necessary, + * Connection on {@code getJdbcConnection}, rather than JDO 3.0's wrapper handle., +	 * This implementation returns a DataStoreConnectionHandle for JDO., +	 * <p><b>NOTE:</b> A JDO DataStoreConnection is always a wrapper,, +	 * <p>A JDO DataStoreConnection is only "borrowed" from the PersistenceManager:, +	 * it needs to be returned as early as possible. Effectively, JDO requires the, +	// Hook for exception translation (used by JdoTransactionManager)]