[+++ b/org.springframework.aop/.classpath, +	<classpathentry kind="var" path="IVY_CACHE/org.objectweb.asm/com.springsource.org.objectweb.asm/2.2.3/com.springsource.org.objectweb.asm-2.2.3.jar" sourcepath="/IVY_CACHE/org.objectweb.asm/com.springsource.org.objectweb.asm/2.2.3/com.springsource.org.objectweb.asm-sources-2.2.3.jar"/>, +	<classpathentry kind="var" path="IVY_CACHE/org.objectweb.asm/com.springsource.org.objectweb.asm.commons/2.2.3/com.springsource.org.objectweb.asm.commons-2.2.3.jar" sourcepath="/IVY_CACHE/org.objectweb.asm/com.springsource.org.objectweb.asm.commons/2.2.3/com.springsource.org.objectweb.asm.commons-sources-2.2.3.jar"/>, +++ b/org.springframework.aop/.classpath, +	<classpathentry kind="var" path="IVY_CACHE/org.objectweb.asm/com.springsource.org.objectweb.asm/2.2.3/com.springsource.org.objectweb.asm-2.2.3.jar" sourcepath="/IVY_CACHE/org.objectweb.asm/com.springsource.org.objectweb.asm/2.2.3/com.springsource.org.objectweb.asm-sources-2.2.3.jar"/>, +	<classpathentry kind="var" path="IVY_CACHE/org.objectweb.asm/com.springsource.org.objectweb.asm.commons/2.2.3/com.springsource.org.objectweb.asm.commons-2.2.3.jar" sourcepath="/IVY_CACHE/org.objectweb.asm/com.springsource.org.objectweb.asm.commons/2.2.3/com.springsource.org.objectweb.asm.commons-sources-2.2.3.jar"/>, +++ b/org.springframework.aop/ivy.xml, +		<dependency org="org.objectweb.asm" name="com.springsource.org.objectweb.asm" rev="2.2.3" conf="test->runtime"/>, +		<dependency org="org.objectweb.asm" name="com.springsource.org.objectweb.asm.commons" rev="2.2.3" conf="test->runtime"/>, +++ b/org.springframework.aop/.classpath, +	<classpathentry kind="var" path="IVY_CACHE/org.objectweb.asm/com.springsource.org.objectweb.asm/2.2.3/com.springsource.org.objectweb.asm-2.2.3.jar" sourcepath="/IVY_CACHE/org.objectweb.asm/com.springsource.org.objectweb.asm/2.2.3/com.springsource.org.objectweb.asm-sources-2.2.3.jar"/>, +	<classpathentry kind="var" path="IVY_CACHE/org.objectweb.asm/com.springsource.org.objectweb.asm.commons/2.2.3/com.springsource.org.objectweb.asm.commons-2.2.3.jar" sourcepath="/IVY_CACHE/org.objectweb.asm/com.springsource.org.objectweb.asm.commons/2.2.3/com.springsource.org.objectweb.asm.commons-sources-2.2.3.jar"/>, +++ b/org.springframework.aop/ivy.xml, +		<dependency org="org.objectweb.asm" name="com.springsource.org.objectweb.asm" rev="2.2.3" conf="test->runtime"/>, +		<dependency org="org.objectweb.asm" name="com.springsource.org.objectweb.asm.commons" rev="2.2.3" conf="test->runtime"/>, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java, +/*, + * Copyright 2002-2007 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.aop.aspectj.annotation;, +, +import static org.junit.Assert.*;, +, +import java.io.FileNotFoundException;, +import java.lang.reflect.UndeclaredThrowableException;, +import java.rmi.RemoteException;, +import java.util.Collections;, +import java.util.LinkedList;, +import java.util.List;, +, +import org.aspectj.lang.ProceedingJoinPoint;, +import org.aspectj.lang.annotation.After;, +import org.aspectj.lang.annotation.AfterReturning;, +import org.aspectj.lang.annotation.AfterThrowing;, +import org.aspectj.lang.annotation.Around;, +import org.aspectj.lang.annotation.Aspect;, +import org.aspectj.lang.annotation.Before;, +import org.aspectj.lang.annotation.DeclarePrecedence;, +import org.aspectj.lang.annotation.Pointcut;, +import org.junit.Test;, +, +import org.springframework.aop.Advisor;, +import org.springframework.aop.aspectj.annotation.ReflectiveAspectJAdvisorFactory.SyntheticInstantiationAdvisor;, +import org.springframework.aop.framework.Advised;, +import org.springframework.aop.framework.AopConfigException;, +import org.springframework.aop.framework.Lockable;, +import org.springframework.aop.framework.ProxyFactory;, +import org.springframework.aop.interceptor.ExposeInvocationInterceptor;, +import org.springframework.aop.support.AopUtils;, +import org.springframework.beans.ITestBean;, +import org.springframework.beans.TestBean;, +import org.springframework.core.OrderComparator;, +import org.springframework.core.Ordered;, +import org.springframework.core.annotation.Order;, +, +/**, + * Abstract tests for AspectJAdvisorFactory., + * See subclasses for tests of concrete factories., + *, + * @author Rod Johnson, + */, +public abstract class AbstractAspectJAdvisorFactoryTests {, +	, +	/**, +	 * To be overridden by concrete test subclasses., +	 * @return the fixture, +	 */, +	protected abstract AspectJAdvisorFactory getFixture();, +	, +, +	@Test, +	public void testRejectsPerCflowAspect() {, +		try {, +			getFixture().getAdvisors(new SingletonMetadataAwareAspectInstanceFactory(new PerCflowAspect(),"someBean"));, +			fail("Cannot accept cflow");, +		}, +		catch (AopConfigException ex) {, +			assertTrue(ex.getMessage().indexOf("PERCFLOW") != -1);, +		}, +	}, +	, +	@Test, +	public void testRejectsPerCflowBelowAspect() {, +		try {, +			getFixture().getAdvisors(new SingletonMetadataAwareAspectInstanceFactory(new PerCflowBelowAspect(),"someBean"));, +			fail("Cannot accept cflowbelow");, +		}, +		catch (AopConfigException ex) {]