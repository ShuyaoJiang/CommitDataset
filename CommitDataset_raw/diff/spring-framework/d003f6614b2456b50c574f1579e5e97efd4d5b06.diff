[+++ b/spring-aspects/src/test/java/org/springframework/transaction/aspectj/TransactionAspectTests.java, + * Copyright 2002-2017 the original author or authors., +	 * it implements a transactionally annotated interface. This behavior could only, +	 * See SPR-14322., +		Method method = ImplementsAnnotatedInterface.class.getMethod("echo", Throwable.class);, +		TransactionAttribute ta = atas.getTransactionAttribute(method, ImplementsAnnotatedInterface.class);, +++ b/spring-aspects/src/test/java/org/springframework/transaction/aspectj/TransactionAspectTests.java, + * Copyright 2002-2017 the original author or authors., +	 * it implements a transactionally annotated interface. This behavior could only, +	 * See SPR-14322., +		Method method = ImplementsAnnotatedInterface.class.getMethod("echo", Throwable.class);, +		TransactionAttribute ta = atas.getTransactionAttribute(method, ImplementsAnnotatedInterface.class);, +++ b/spring-context/src/test/java/org/springframework/cache/CacheReproTests.java, + * Copyright 2002-2017 the original author or authors., +import org.junit.Ignore;, +, +	public void spr11124MultipleAnnotations() throws Exception {, +	public void spr11249PrimitiveVarargs() throws Exception {, +	@Test, +	public void spr15271FindsOnInterfaceWithInterfaceProxy() {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Spr15271ConfigA.class);, +		Spr15271Interface bean = context.getBean(Spr15271Interface.class);, +		Cache cache = context.getBean(CacheManager.class).getCache("itemCache");, +, +		TestBean tb = new TestBean("tb1");, +		bean.insertItem(tb);, +		assertSame(tb, bean.findById("tb1").get());, +		assertSame(tb, cache.get("tb1").get());, +	}, +, +	@Test @Ignore  // TODO, +	public void spr15271FindsOnInterfaceWithCglibProxy() {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Spr15271ConfigB.class);, +		Spr15271Interface bean = context.getBean(Spr15271Interface.class);, +		Cache cache = context.getBean(CacheManager.class).getCache("itemCache");, +, +		TestBean tb = new TestBean("tb1");, +		bean.insertItem(tb);, +		assertSame(tb, bean.findById("tb1").get());, +		assertSame(tb, cache.get("tb1").get());, +	}, +, +, +, +, +, +	public interface Spr15271Interface {, +, +		@Cacheable(value = "itemCache", sync = true), +		Optional<TestBean> findById(String id);, +, +		@CachePut(cacheNames = "itemCache", key = "#item.name"), +		TestBean insertItem(TestBean item);, +	}, +, +, +	public static class Spr15271Service implements Spr15271Interface {, +, +		@Override, +		public Optional<TestBean> findById(String id) {, +			return Optional.of(new TestBean(id));, +		}, +, +		@Override, +		public TestBean insertItem(TestBean item) {, +			return item;, +		}, +	}, +, +, +	@Configuration, +	@EnableCaching, +	public static class Spr15271ConfigA {, +, +		@Bean, +		public CacheManager cacheManager() {, +			return new ConcurrentMapCacheManager();, +		}, +, +		@Bean, +		public Spr15271Interface service() {, +			return new Spr15271Service();, +		}, +	}, +, +, +	@Configuration, +	@EnableCaching(proxyTargetClass = true), +	public static class Spr15271ConfigB {, +, +		@Bean, +		public CacheManager cacheManager() {, +			return new ConcurrentMapCacheManager();, +		}, +, +		@Bean, +		public Spr15271Interface service() {, +			return new Spr15271Service();, +		}, +	}]