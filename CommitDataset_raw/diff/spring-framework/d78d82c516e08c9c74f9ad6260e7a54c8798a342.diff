[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ErrorsMethodArgumentResolver.java, +import org.springframework.core.Conventions;, +		return Conventions.getVariableNameForParameter(attributeParam);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ErrorsMethodArgumentResolver.java, +import org.springframework.core.Conventions;, +		return Conventions.getVariableNameForParameter(attributeParam);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ModelAttributeMethodArgumentResolver.java, +import org.springframework.core.Conventions;, +import org.springframework.ui.Model;, +		String name = getAttributeName(parameter);, +		Mono<?> valueMono = prepareAttributeMono(name, valueType, context, exchange);, +	private String getAttributeName(MethodParameter parameter) {, +		return Conventions.getVariableNameForParameter(parameter);, +	private Mono<?> prepareAttributeMono(String attributeName, ResolvableType attributeType,, +			BindingContext context, ServerWebExchange exchange) {, +, +		if (attribute == null) {, +			attribute = findAndRemoveReactiveAttribute(context.getModel(), attributeName);, +		}, +, +	private Object findAndRemoveReactiveAttribute(Model model, String attributeName) {, +		return model.asMap().entrySet().stream(), +				.filter(entry -> {, +					if (!entry.getKey().startsWith(attributeName)) {, +						return false;, +					}, +					ReactiveAdapter adapter = getAdapterRegistry().getAdapter(null, entry.getValue());, +					if (adapter == null) {, +						return false;, +					}, +					String name = attributeName + ClassUtils.getShortName(adapter.getReactiveType());, +					return entry.getKey().equals(name);, +				}), +				.findFirst(), +				.map(entry -> {, +					// Remove since we will be re-inserting the resolved attribute value, +					model.asMap().remove(entry.getKey());, +					return entry.getValue();, +				}), +				.orElse(null);, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ErrorsMethodArgumentResolver.java, +import org.springframework.core.Conventions;, +		return Conventions.getVariableNameForParameter(attributeParam);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ModelAttributeMethodArgumentResolver.java, +import org.springframework.core.Conventions;, +import org.springframework.ui.Model;, +		String name = getAttributeName(parameter);, +		Mono<?> valueMono = prepareAttributeMono(name, valueType, context, exchange);, +	private String getAttributeName(MethodParameter parameter) {, +		return Conventions.getVariableNameForParameter(parameter);, +	private Mono<?> prepareAttributeMono(String attributeName, ResolvableType attributeType,, +			BindingContext context, ServerWebExchange exchange) {, +, +		if (attribute == null) {, +			attribute = findAndRemoveReactiveAttribute(context.getModel(), attributeName);, +		}, +, +	private Object findAndRemoveReactiveAttribute(Model model, String attributeName) {, +		return model.asMap().entrySet().stream(), +				.filter(entry -> {, +					if (!entry.getKey().startsWith(attributeName)) {, +						return false;, +					}, +					ReactiveAdapter adapter = getAdapterRegistry().getAdapter(null, entry.getValue());, +					if (adapter == null) {, +						return false;, +					}, +					String name = attributeName + ClassUtils.getShortName(adapter.getReactiveType());, +					return entry.getKey().equals(name);, +				}), +				.findFirst(), +				.map(entry -> {, +					// Remove since we will be re-inserting the resolved attribute value, +					model.asMap().remove(entry.getKey());, +					return entry.getValue();, +				}), +				.orElse(null);, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ModelInitializer.java, +import org.springframework.core.Conventions;, +					String name = getAttributeName(handlerResult.getReturnTypeSource());, +	private String getAttributeName(MethodParameter parameter) {, +		return Conventions.getVariableNameForParameter(parameter);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ErrorsMethodArgumentResolver.java, +import org.springframework.core.Conventions;, +		return Conventions.getVariableNameForParameter(attributeParam);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ModelAttributeMethodArgumentResolver.java, +import org.springframework.core.Conventions;, +import org.springframework.ui.Model;, +		String name = getAttributeName(parameter);, +		Mono<?> valueMono = prepareAttributeMono(name, valueType, context, exchange);, +	private String getAttributeName(MethodParameter parameter) {, +		return Conventions.getVariableNameForParameter(parameter);, +	private Mono<?> prepareAttributeMono(String attributeName, ResolvableType attributeType,, +			BindingContext context, ServerWebExchange exchange) {, +, +		if (attribute == null) {]