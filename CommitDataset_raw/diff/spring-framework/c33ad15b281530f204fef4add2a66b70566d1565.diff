[+++ b/build.gradle, +		optional("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"), +		optional("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"), +++ b/build.gradle, +		optional("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"), +		optional("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"), +++ b/spring-jdbc/src/main/kotlin/org/springframework/jdbc/core/JdbcOperationsExtensions.kt, +/*, + * Copyright 2002-2017 the original author or authors, + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * 	http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.jdbc.core, +, +import java.sql.ResultSet, +import kotlin.reflect.KClass, +, +, +/**, + * Extension for [JdbcOperations.queryForObject] providing a [KClass] based variant, + *, + * @author Mario Arias, + * @since 5.0, + */, +fun <T : Any> JdbcOperations.queryForObject(sql: String, elementType: KClass<T>): T = queryForObject(sql, elementType.java), +, +/**, + * Extension for [JdbcOperations.queryForObject] providing a `queryForObject<Foo>("...")` variant, + *, + * @author Mario Arias, + * @since 5.0, + */, +inline fun <reified T : Any> JdbcOperations.queryForObject(sql: String): T = queryForObject(sql, T::class.java), +, +/**, + * Extensions for [JdbcOperations.queryForObject] providing a RowMapper-like function variant: `queryForObject("...", arg1, argN){ rs, i -> }`., + *, + * @author Mario Arias, + * @since 5.0, + */, +fun <T : Any> JdbcOperations.queryForObject(sql: String, vararg args: Any, function: (ResultSet, Int) -> T): T =, +		queryForObject(sql, RowMapper { resultSet, i -> function(resultSet, i) }, *args), +, +/**, + * Extension for [JdbcOperations.queryForObject] providing a [KClass] based variant, + *, + * @author Mario Arias, + * @since 5.0, + */, +fun <T : Any> JdbcOperations.queryForObject(sql: String, args: Array<out Any>, argTypes: IntArray, requiredType: KClass<T>): T =, +		queryForObject(sql, args, argTypes, requiredType.java), +, +/**, + * Extension for [JdbcOperations.queryForObject] providing a `queryForObject<Foo>("...", arrayOf(arg1, argN), intArray(type1, typeN))` variant, + *, + * @author Mario Arias, + * @since 5.0, + */, +inline fun <reified T : Any> JdbcOperations.queryForObject(sql: String, args: Array<out Any>, argTypes: IntArray): T =, +		queryForObject(sql, args, argTypes, T::class.java), +, +/**, + * Extension for [JdbcOperations.queryForObject] providing a [KClass] based variant, + *, + * @author Mario Arias, + * @since 5.0, + */, +fun <T : Any> JdbcOperations.queryForObject(sql: String, args: Array<out Any>, requiredType: KClass<T>): T =, +		queryForObject(sql, args, requiredType.java), +, +/**, + * Extension for [JdbcOperations.queryForObject] providing a `queryForObject<Foo>("...", arrayOf(arg1, argN))` variant, + *, + * @author Mario Arias, + * @since 5.0, + */, +inline fun <reified T : Any> JdbcOperations.queryForObject(sql: String, args: Array<out Any>): T =, +		queryForObject(sql, args, T::class.java), +, +/**, + * Extension for [JdbcOperations.queryForObject] providing a [KClass] based variant, + *, + * @author Mario Arias, + * @since 5.0, + */, +fun <T : Any> JdbcOperations.queryForObject(sql: String, requiredType: KClass<T>, vararg args: Any): T =, +		queryForObject(sql, requiredType.java, *args), +, +]