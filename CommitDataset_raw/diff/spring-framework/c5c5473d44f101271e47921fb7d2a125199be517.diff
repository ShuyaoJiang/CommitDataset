[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +	private static final ScopeMetadataResolver scopeMetadataResolver = new AnnotationScopeMetadataResolver();, +, +		AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata);, +, +			ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef);, +			configBeanDef.setScope(scopeMetadata.getScopeName());, +			AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata);, +			BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName);, +			definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry);, +			this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +	private static final ScopeMetadataResolver scopeMetadataResolver = new AnnotationScopeMetadataResolver();, +, +		AnnotatedGenericBeanDefinition configBeanDef = new AnnotatedGenericBeanDefinition(metadata);, +, +			ScopeMetadata scopeMetadata = scopeMetadataResolver.resolveScopeMetadata(configBeanDef);, +			configBeanDef.setScope(scopeMetadata.getScopeName());, +			AnnotationConfigUtils.processCommonDefinitionAnnotations(configBeanDef, metadata);, +			BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(configBeanDef, configBeanName);, +			definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry);, +			this.registry.registerBeanDefinition(definitionHolder.getBeanName(), definitionHolder.getBeanDefinition());, +++ b/spring-context/src/test/java/org/springframework/context/annotation/NestedConfigurationClassTests.java, +		assertFalse(ctx.getBeanFactory().containsSingleton("nestedConfigurationClassTests.L0Config"));, +		assertTrue(ctx.getBeanFactory().containsSingleton(L0Config.L1Config.class.getName()));, +		assertFalse(ctx.getBeanFactory().containsSingleton(L0Config.L1Config.L2Config.class.getName()));, +	public void twoLevelsInLiteMode() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(L0ConfigLight.class);, +		ctx.refresh();, +, +		assertFalse(ctx.getBeanFactory().containsSingleton("nestedConfigurationClassTests.L0ConfigLight"));, +		ctx.getBean(L0ConfigLight.class);, +		ctx.getBean("l0Bean");, +, +		assertTrue(ctx.getBeanFactory().containsSingleton(L0ConfigLight.L1ConfigLight.class.getName()));, +		ctx.getBean(L0ConfigLight.L1ConfigLight.class);, +		ctx.getBean("l1Bean");, +, +		assertFalse(ctx.getBeanFactory().containsSingleton(L0ConfigLight.L1ConfigLight.L2ConfigLight.class.getName()));, +		ctx.getBean(L0ConfigLight.L1ConfigLight.L2ConfigLight.class);, +		ctx.getBean("l2Bean");, +, +		// ensure that override order is correct, +		assertThat(ctx.getBean("overrideBean", TestBean.class).getName(), is("override-l0"));, +	}, +, +	@Test, +		S1Config config = ctx.getBean(S1Config.class);, +		assertTrue(config != ctx.getBean(S1Config.class));, +		TestBean tb = ctx.getBean("l0Bean", TestBean.class);, +		assertTrue(tb == ctx.getBean("l0Bean", TestBean.class));, +		// ensure that override order is correct and that it is a singleton, +		TestBean ob = ctx.getBean("overrideBean", TestBean.class);, +		assertThat(ob.getName(), is("override-s1"));, +		assertTrue(ob == ctx.getBean("overrideBean", TestBean.class));, +, +		TestBean pb1 = ctx.getBean("prototypeBean", TestBean.class);, +		TestBean pb2 = ctx.getBean("prototypeBean", TestBean.class);, +		assertTrue(pb1 != pb2);, +		assertTrue(pb1.getFriends().iterator().next() != pb2.getFriends().iterator().next());, +	public void twoLevelsDeepWithInheritanceThroughImport() {, +		ctx.register(S1Importer.class);, +		S1Config config = ctx.getBean(S1Config.class);, +		assertTrue(config != ctx.getBean(S1Config.class));, +		TestBean tb = ctx.getBean("l0Bean", TestBean.class);, +		assertTrue(tb == ctx.getBean("l0Bean", TestBean.class));, +		ctx.getBean(L0Config.L1Config.class);, +		ctx.getBean(L0Config.L1Config.L2Config.class);, +		// ensure that override order is correct and that it is a singleton, +		TestBean ob = ctx.getBean("overrideBean", TestBean.class);, +		assertThat(ob.getName(), is("override-s1"));, +		assertTrue(ob == ctx.getBean("overrideBean", TestBean.class));, +, +		TestBean pb1 = ctx.getBean("prototypeBean", TestBean.class);, +		TestBean pb2 = ctx.getBean("prototypeBean", TestBean.class);, +		assertTrue(pb1 != pb2);, +		assertTrue(pb1.getFriends().iterator().next() != pb2.getFriends().iterator().next());, +	}, +, +	@Test, +	public void twoLevelsDeepWithInheritanceAndScopedProxy() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(S1ImporterWithProxy.class);, +		ctx.refresh();, +, +		S1ConfigWithProxy config = ctx.getBean(S1ConfigWithProxy.class);, +		assertTrue(config == ctx.getBean(S1ConfigWithProxy.class));, +		TestBean tb = ctx.getBean("l0Bean", TestBean.class);, +		assertTrue(tb == ctx.getBean("l0Bean", TestBean.class));, +, +		ctx.getBean(L0Config.L1Config.class);, +		ctx.getBean("l1Bean");, +, +		ctx.getBean(L0Config.L1Config.L2Config.class);, +		ctx.getBean("l2Bean");, +, +		// ensure that override order is correct and that it is a singleton, +		TestBean ob = ctx.getBean("overrideBean", TestBean.class);, +		assertThat(ob.getName(), is("override-s1"));]