[+++ b/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java, +	private final HandlerMethod resolvedFromHandlerMethod;, +, +		this.resolvedFromHandlerMethod = null;, +		this.resolvedFromHandlerMethod = null;, +		this.resolvedFromHandlerMethod = null;, +		this.resolvedFromHandlerMethod = handlerMethod.resolvedFromHandlerMethod;, +		this.resolvedFromHandlerMethod = handlerMethod;, +	 * Return the HandlerMethod from which this HandlerMethod instance was, +	 * resolved via {@link #createWithResolvedBean()}., +	 */, +	public HandlerMethod getResolvedFromHandlerMethod() {, +		return this.resolvedFromHandlerMethod;, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java, +	private final HandlerMethod resolvedFromHandlerMethod;, +, +		this.resolvedFromHandlerMethod = null;, +		this.resolvedFromHandlerMethod = null;, +		this.resolvedFromHandlerMethod = null;, +		this.resolvedFromHandlerMethod = handlerMethod.resolvedFromHandlerMethod;, +		this.resolvedFromHandlerMethod = handlerMethod;, +	 * Return the HandlerMethod from which this HandlerMethod instance was, +	 * resolved via {@link #createWithResolvedBean()}., +	 */, +	public HandlerMethod getResolvedFromHandlerMethod() {, +		return this.resolvedFromHandlerMethod;, +	}, +, +	/**, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +		private final Map<HandlerMethod, CorsConfiguration> corsLookup =, +				new ConcurrentHashMap<HandlerMethod, CorsConfiguration>();, +			HandlerMethod original = handlerMethod.getResolvedFromHandlerMethod();, +			return this.corsLookup.get(original != null ? original : handlerMethod);, +					this.corsLookup.put(handlerMethod, corsConfig);, +				this.registry.put(mapping, new MappingRegistration<T>(mapping, handlerMethod, directUrls, name));, +				if (handlerMethod.equals(current)) {, +				if (logger.isTraceEnabled()) {, +					logger.trace("Mapping name clash for handlerMethods=" + newList +, +				this.corsLookup.remove(definition.getHandlerMethod());, +		public MappingRegistration(T mapping, HandlerMethod handlerMethod,, +				List<String> directUrls, String mappingName) {, +++ b/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java, +	private final HandlerMethod resolvedFromHandlerMethod;, +, +		this.resolvedFromHandlerMethod = null;, +		this.resolvedFromHandlerMethod = null;, +		this.resolvedFromHandlerMethod = null;, +		this.resolvedFromHandlerMethod = handlerMethod.resolvedFromHandlerMethod;, +		this.resolvedFromHandlerMethod = handlerMethod;, +	 * Return the HandlerMethod from which this HandlerMethod instance was, +	 * resolved via {@link #createWithResolvedBean()}., +	 */, +	public HandlerMethod getResolvedFromHandlerMethod() {, +		return this.resolvedFromHandlerMethod;, +	}, +, +	/**, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +		private final Map<HandlerMethod, CorsConfiguration> corsLookup =, +				new ConcurrentHashMap<HandlerMethod, CorsConfiguration>();, +			HandlerMethod original = handlerMethod.getResolvedFromHandlerMethod();, +			return this.corsLookup.get(original != null ? original : handlerMethod);, +					this.corsLookup.put(handlerMethod, corsConfig);, +				this.registry.put(mapping, new MappingRegistration<T>(mapping, handlerMethod, directUrls, name));, +				if (handlerMethod.equals(current)) {, +				if (logger.isTraceEnabled()) {, +					logger.trace("Mapping name clash for handlerMethods=" + newList +, +				this.corsLookup.remove(definition.getHandlerMethod());, +		public MappingRegistration(T mapping, HandlerMethod handlerMethod,, +				List<String> directUrls, String mappingName) {, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/handler/HandlerMethodMappingTests.java, +import org.springframework.beans.factory.support.StaticListableBeanFactory;, +import org.springframework.context.support.GenericApplicationContext;, +import org.springframework.web.context.support.StaticWebApplicationContext;, + * @author Rossen Stoyanchev, +		assertEquals("http://" + handler.hashCode() + name1, config.getAllowedOrigins().get(0));, +		assertEquals("http://" + handler.hashCode() + name2, config.getAllowedOrigins().get(0));, +	}, +, +	@Test, +	public void registerMappingWithSameMethodAndTwoHandlerInstances() throws Exception {, +, +		String key1 = "foo";, +		String key2 = "bar";, +, +		MyHandler handler1 = new MyHandler();, +		MyHandler handler2 = new MyHandler();, +, +		HandlerMethod handlerMethod1 = new HandlerMethod(handler1, this.method1);, +		HandlerMethod handlerMethod2 = new HandlerMethod(handler2, this.method1);, +, +		this.mapping.registerMapping(key1, handler1, this.method1);, +		this.mapping.registerMapping(key2, handler2, this.method1);, +, +		// Direct URL lookup, +]