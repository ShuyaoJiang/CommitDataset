[+++ b/build.gradle, +	ext.jettyVersion           = "9.4.0.RC3", +++ b/build.gradle, +	ext.jettyVersion           = "9.4.0.RC3", +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java, +import java.lang.reflect.Method;, +import org.eclipse.jetty.websocket.api.UpgradeRequest;, +import org.eclipse.jetty.websocket.api.UpgradeResponse;, +import org.springframework.util.ReflectionUtils;, + * @author Brian Clozel, +	// As of Jetty 9.4, UpgradeRequest and UpgradeResponse are interfaces instead of classes, +	private static final boolean isJetty94;, +, +	private static Method getUpgradeRequest;, +	private static Method getUpgradeResponse;, +	private static Method getRequestURI;, +	private static Method getHeaders;, +	private static Method getAcceptedSubProtocol;, +	private static Method getExtensions;, +	private static Method getUserPrincipal;, +, +	static {, +		isJetty94 = UpgradeRequest.class.isInterface();, +		if (!isJetty94) {, +			try {, +				getUpgradeRequest = Session.class.getMethod("getUpgradeRequest");, +				getUpgradeResponse = Session.class.getMethod("getUpgradeResponse");, +				getRequestURI = UpgradeRequest.class.getMethod("getRequestURI");, +				getHeaders = UpgradeRequest.class.getMethod("getHeaders");, +				getAcceptedSubProtocol = UpgradeResponse.class.getMethod("getAcceptedSubProtocol");, +				getExtensions = UpgradeResponse.class.getMethod("getExtensions");, +				getUserPrincipal = UpgradeRequest.class.getMethod("getUserPrincipal");, +			}, +			catch (NoSuchMethodException ex) {, +				throw new IllegalStateException("Incompatible Jetty API", ex);, +			}, +		}, +	}, +		if (isJetty94) {, +			initializeJetty94Session(session);, +		}, +		else {, +			initializeJettySession(session);, +		}, +	}, +	@SuppressWarnings("unchecked"), +	private void initializeJettySession(Session session) {, +, +		Object request = ReflectionUtils.invokeMethod(getUpgradeRequest, session);, +		Object response = ReflectionUtils.invokeMethod(getUpgradeResponse, session);, +, +		this.id = ObjectUtils.getIdentityHexString(getNativeSession());, +		this.uri = (URI) ReflectionUtils.invokeMethod(getRequestURI, request);, +, +		this.headers = new HttpHeaders();, +		this.headers.putAll((Map<String, List<String>>) ReflectionUtils.invokeMethod(getHeaders, request));, +		this.headers = HttpHeaders.readOnlyHttpHeaders(headers);, +, +		this.acceptedProtocol = (String) ReflectionUtils.invokeMethod(getAcceptedSubProtocol, response);, +, +		List<ExtensionConfig> source = (List<ExtensionConfig>) ReflectionUtils.invokeMethod(getExtensions, response);, +		if (source != null) {, +			this.extensions = new ArrayList<>(source.size());, +			for (ExtensionConfig ec : source) {, +				this.extensions.add(new WebSocketExtension(ec.getName(), ec.getParameters()));, +			}, +		}, +		else {, +			this.extensions = new ArrayList<>(0);, +		}, +, +		if (this.user == null) {, +			this.user = (Principal) ReflectionUtils.invokeMethod(getUserPrincipal, request);, +		}, +	}, +, +	private void initializeJetty94Session(Session session) {, +		this.headers.putAll(session.getUpgradeRequest().getHeaders());, +		List<ExtensionConfig> source = session.getUpgradeResponse().getExtensions();, +		if (source != null) {, +		}, +		else {, +			this.extensions = new ArrayList<>(0);, +		}, +++ b/build.gradle, +	ext.jettyVersion           = "9.4.0.RC3", +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java, +import java.lang.reflect.Method;, +import org.eclipse.jetty.websocket.api.UpgradeRequest;, +import org.eclipse.jetty.websocket.api.UpgradeResponse;, +import org.springframework.util.ReflectionUtils;, + * @author Brian Clozel, +	// As of Jetty 9.4, UpgradeRequest and UpgradeResponse are interfaces instead of classes, +	private static final boolean isJetty94;, +, +	private static Method getUpgradeRequest;, +	private static Method getUpgradeResponse;, +	private static Method getRequestURI;, +	private static Method getHeaders;, +	private static Method getAcceptedSubProtocol;]