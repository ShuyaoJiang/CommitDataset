[+++ b/build.gradle, +        jarjar 'com.googlecode.jarjar:jarjar:1.3', +++ b/build.gradle, +        jarjar 'com.googlecode.jarjar:jarjar:1.3', +++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, + * Copyright 2002-2009 the original author or authors., +++ b/build.gradle, +        jarjar 'com.googlecode.jarjar:jarjar:1.3', +++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, + * Copyright 2002-2009 the original author or authors., +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/StringLiteral.java, + * Copyright 2002-2009 the original author or authors., +		this.value = new TypedValue(value.replaceAll("''", "'"));, +++ b/build.gradle, +        jarjar 'com.googlecode.jarjar:jarjar:1.3', +++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, + * Copyright 2002-2009 the original author or authors., +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/StringLiteral.java, + * Copyright 2002-2009 the original author or authors., +		this.value = new TypedValue(value.replaceAll("''", "'"));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java, +		while (peekIdentifierToken("or")) {, +		while (peekIdentifierToken("and")) {, +, +			if (!nullToken.stringValue().toLowerCase().equals("null")) {, +, +++ b/build.gradle, +        jarjar 'com.googlecode.jarjar:jarjar:1.3', +++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, + * Copyright 2002-2009 the original author or authors., +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/StringLiteral.java, + * Copyright 2002-2009 the original author or authors., +		this.value = new TypedValue(value.replaceAll("''", "'"));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java, +		while (peekIdentifierToken("or")) {, +		while (peekIdentifierToken("and")) {, +, +			if (!nullToken.stringValue().toLowerCase().equals("null")) {, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/TokenKind.java, + * Copyright 2002-2009 the original author or authors., +	ELVIS("?:"), SAFE_NAVI("?."), BEAN_REF("@"), +++ b/build.gradle, +        jarjar 'com.googlecode.jarjar:jarjar:1.3', +++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, + * Copyright 2002-2009 the original author or authors., +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/StringLiteral.java, + * Copyright 2002-2009 the original author or authors., +		this.value = new TypedValue(value.replaceAll("''", "'"));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java, +		while (peekIdentifierToken("or")) {, +		while (peekIdentifierToken("and")) {, +, +			if (!nullToken.stringValue().toLowerCase().equals("null")) {, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/TokenKind.java, + * Copyright 2002-2009 the original author or authors., +	ELVIS("?:"), SAFE_NAVI("?."), BEAN_REF("@"), +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java, +	, +	, +++ b/build.gradle, +        jarjar 'com.googlecode.jarjar:jarjar:1.3', +++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, + * Copyright 2002-2009 the original author or authors., +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/StringLiteral.java, + * Copyright 2002-2009 the original author or authors., +		this.value = new TypedValue(value.replaceAll("''", "'"));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java, +		while (peekIdentifierToken("or")) {, +		while (peekIdentifierToken("and")) {, +, +			if (!nullToken.stringValue().toLowerCase().equals("null")) {, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/TokenKind.java, + * Copyright 2002-2009 the original author or authors., +	ELVIS("?:"), SAFE_NAVI("?."), BEAN_REF("@"), +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java, +	, +	, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/StandardEvaluationContext.java, + * Copyright 2002-2011 the original author or authors., +	 * Register a MethodFilter which will be called during method resolution for the, +	 * specified type.  The MethodFilter may remove methods and/or sort the methods, +	 * which will then be used by SpEL as the candidates to look through for a match., +	 * @param filter a MethodFilter, or NULL to deregister a filter for the type, +	public void registerMethodFilter(Class<?> type, MethodFilter filter) {, +++ b/build.gradle, +        jarjar 'com.googlecode.jarjar:jarjar:1.3', +++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, + * Copyright 2002-2009 the original author or authors., +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/StringLiteral.java, + * Copyright 2002-2009 the original author or authors., +		this.value = new TypedValue(value.replaceAll("''", "'"));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java, +		while (peekIdentifierToken("or")) {, +		while (peekIdentifierToken("and")) {, +, +			if (!nullToken.stringValue().toLowerCase().equals("null")) {, +]