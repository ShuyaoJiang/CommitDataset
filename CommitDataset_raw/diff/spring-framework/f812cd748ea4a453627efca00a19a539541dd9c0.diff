[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/DestructionAwareAttributeHolder.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.beans.factory.config;, +, +import java.io.Serializable;, +import java.util.Map;, +import java.util.concurrent.ConcurrentHashMap;, +, +/**, + * A container object holding a map of attributes and optionally destruction callbacks. The callbacks will be invoked,, + * if an attribute is being removed or if the holder is cleaned out., + * , + * @author Micha Kiener, + * @since 3.1, + */, +public class DestructionAwareAttributeHolder implements Serializable {, +, +	/** The map containing the registered attributes. */, +	private final Map<String, Object> attributes = new ConcurrentHashMap<String, Object>();, +, +	/**, +	 * The optional map having any destruction callbacks registered using the, +	 * name of the bean as the key., +	 */, +	private Map<String, Runnable> registeredDestructionCallbacks;, +, +, +, +	/**, +	 * Returns the map representation of the registered attributes directly. Be, +	 * aware to synchronize any invocations to it on the map object itself to, +	 * avoid concurrent modification exceptions., +	 *, +	 * @return the attributes as a map representation, +	 */, +	public Map<String, Object> getAttributeMap() {, +		return attributes;, +	}, +, +	/**, +	 * Returns the attribute having the specified name, if available,, +	 * <code>null</code> otherwise., +	 * , +	 * @param name, +	 *            the name of the attribute to be returned, +	 * @return the attribute value or <code>null</code> if not available, +	 */, +	@SuppressWarnings("unchecked"), +	public Object getAttribute(String name) {, +		return attributes.get(name);, +	}, +, +	/**, +	 * Puts the given object with the specified name as an attribute to the, +	 * underlying map., +	 * , +	 * @param name, +	 *            the name of the attribute, +	 * @param value, +	 *            the value to be stored, +	 * @return any previously object stored under the same name, if any,, +	 *         <code>null</code> otherwise, +	 */, +	@SuppressWarnings("unchecked"), +	public Object setAttribute(String name, Object value) {, +		return attributes.put(name, value);, +	}, +, +	/**, +	 * Remove the object with the given <code>name</code> from the underlying, +	 * scope., +	 * <p>, +	 * Returns <code>null</code> if no object was found; otherwise returns the, +	 * removed <code>Object</code>., +	 * <p>, +	 * Note that an implementation should also remove a registered destruction, +	 * callback for the specified object, if any. It does, however, <i>not</i>, +	 * need to <i>execute</i> a registered destruction callback in this case,, +	 * since the object will be destroyed by the caller (if appropriate)., +	 * <p>, +	 * <b>Note: This is an optional operation.</b> Implementations may throw, +	 * {@link UnsupportedOperationException} if they do not support explicitly, +	 * removing an object., +	 * , +	 * @param name]