[+++ b/spring-context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java, + * Copyright 2002-2016 the original author or authors., +		if (!areValidCronFields(fields)) {, +	/**, +	 * Determine whether the specified expression represents a valid cron pattern., +	 * <p>Specifically, this method verifies that the expression contains six, +	 * fields separated by single spaces., +	 * @param expression the expression to evaluate, +	 * @return {@code true} if the given expression is a valid cron expression, +	 */, +	public static boolean isValidExpression(String expression) {, +		String[] fields = StringUtils.tokenizeToStringArray(expression, " ");, +		return areValidCronFields(fields);, +	}, +, +	private static boolean areValidCronFields(String[] fields) {, +		return (fields != null && fields.length == 6);, +	}, +, +, +++ b/spring-context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java, + * Copyright 2002-2016 the original author or authors., +		if (!areValidCronFields(fields)) {, +	/**, +	 * Determine whether the specified expression represents a valid cron pattern., +	 * <p>Specifically, this method verifies that the expression contains six, +	 * fields separated by single spaces., +	 * @param expression the expression to evaluate, +	 * @return {@code true} if the given expression is a valid cron expression, +	 */, +	public static boolean isValidExpression(String expression) {, +		String[] fields = StringUtils.tokenizeToStringArray(expression, " ");, +		return areValidCronFields(fields);, +	}, +, +	private static boolean areValidCronFields(String[] fields) {, +		return (fields != null && fields.length == 6);, +	}, +, +, +++ b/spring-context/src/test/java/org/springframework/scheduling/support/CronSequenceGeneratorTests.java, + * Copyright 2002-2016 the original author or authors., +	public void at50Seconds() {, +	public void at0Seconds() {, +	public void at0Minutes() {, +	public void with0Increment() {, +	public void withNegativeIncrement() {, +	public void validExpression() {, +	public void invalidExpression() {, +	public void nullExpression() {, +]