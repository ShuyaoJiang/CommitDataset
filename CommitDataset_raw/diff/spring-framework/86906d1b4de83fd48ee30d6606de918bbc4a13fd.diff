[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +		if (this == td) {, +			return true;, +		}, +		return getType().hashCode();, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +		if (this == td) {, +			return true;, +		}, +		return getType().hashCode();, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +		public String toString() {, +			return "NO_OP";, +		}, +	private static final class ConverterCacheKey {, +		private final TypeDescriptor sourceType;, +		private final TypeDescriptor targetType;, +			return sourceType.hashCode() * 29 + targetType.hashCode();, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +		if (this == td) {, +			return true;, +		}, +		return getType().hashCode();, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +		public String toString() {, +			return "NO_OP";, +		}, +	private static final class ConverterCacheKey {, +		private final TypeDescriptor sourceType;, +		private final TypeDescriptor targetType;, +			return sourceType.hashCode() * 29 + targetType.hashCode();, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/GenericConversionServiceTests.java, +		watch.start("convert 4,000,000 with conversion service");, +		watch.start("convert 4,000,000 with converter directly");, +		ObjectToStringConverter converter = new ObjectToStringConverter();, +		for (int i = 0; i < 4000000; i++) {, +			converter.convert(3, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.valueOf(String.class));, +		}, +		watch.stop();, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +		if (this == td) {, +			return true;, +		}, +		return getType().hashCode();, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +		public String toString() {, +			return "NO_OP";, +		}, +	private static final class ConverterCacheKey {, +		private final TypeDescriptor sourceType;, +		private final TypeDescriptor targetType;, +			return sourceType.hashCode() * 29 + targetType.hashCode();, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/GenericConversionServiceTests.java, +		watch.start("convert 4,000,000 with conversion service");, +		watch.start("convert 4,000,000 with converter directly");, +		ObjectToStringConverter converter = new ObjectToStringConverter();, +		for (int i = 0; i < 4000000; i++) {, +			converter.convert(3, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.valueOf(String.class));, +		}, +		watch.stop();, +++ b/org.springframework.core/src/test/resources/log4j.xml, +		<level value="warn" />]