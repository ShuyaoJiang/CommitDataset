[+++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/FilePart.java, +	 * Return the original filename in the client's filesystem., +	String filename();, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/FilePart.java, +	 * Return the original filename in the client's filesystem., +	String filename();, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/FormFieldPart.java, +	String value();, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/FilePart.java, +	 * Return the original filename in the client's filesystem., +	String filename();, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/FormFieldPart.java, +	String value();, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartHttpMessageReader.java, +				.collectMultimap(Part::name).map(this::toMultiValueMap);, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/FilePart.java, +	 * Return the original filename in the client's filesystem., +	String filename();, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/FormFieldPart.java, +	String value();, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartHttpMessageReader.java, +				.collectMultimap(Part::name).map(this::toMultiValueMap);, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/Part.java, +	String name();, +	HttpHeaders headers();, +	 * Return the content for this part., +	 * <p>Note that for a {@link FormFieldPart} the content may be accessed, +	 * more easily via {@link FormFieldPart#value()}., +	Flux<DataBuffer> content();, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/FilePart.java, +	 * Return the original filename in the client's filesystem., +	String filename();, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/FormFieldPart.java, +	String value();, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartHttpMessageReader.java, +				.collectMultimap(Part::name).map(this::toMultiValueMap);, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/Part.java, +	String name();, +	HttpHeaders headers();, +	 * Return the content for this part., +	 * <p>Note that for a {@link FormFieldPart} the content may be accessed, +	 * more easily via {@link FormFieldPart#value()}., +	Flux<DataBuffer> content();, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java, +			this.sink.next(createPart(httpHeaders, storage));, +		}, +, +		private Part createPart(HttpHeaders httpHeaders, StreamStorage storage) {, +			String fileName = MultipartUtils.getFileName(httpHeaders);, +			return fileName != null ?, +					new SynchronossFilePart(httpHeaders, storage, fileName, this.bufferFactory) :, +		public String name() {, +		public HttpHeaders headers() {, +		public Flux<DataBuffer> content() {, +		public SynchronossFilePart(HttpHeaders headers, StreamStorage storage, String fileName, DataBufferFactory factory) {, +		public String filename() {, +			return MultipartUtils.getFileName(headers());, +		public String value() {, +		public Flux<DataBuffer> content() {, +			return Optional.ofNullable(MultipartUtils.getCharEncoding(headers())), +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/FilePart.java, +	 * Return the original filename in the client's filesystem., +	String filename();, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/FormFieldPart.java, +	String value();, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartHttpMessageReader.java, +				.collectMultimap(Part::name).map(this::toMultiValueMap);, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/Part.java, +	String name();, +	HttpHeaders headers();, +	 * Return the content for this part., +	 * <p>Note that for a {@link FormFieldPart} the content may be accessed, +	 * more easily via {@link FormFieldPart#value()}., +	Flux<DataBuffer> content();, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/SynchronossPartHttpMessageReader.java, +			this.sink.next(createPart(httpHeaders, storage));, +		}, +, +		private Part createPart(HttpHeaders httpHeaders, StreamStorage storage) {, +			String fileName = MultipartUtils.getFileName(httpHeaders);, +			return fileName != null ?, +					new SynchronossFilePart(httpHeaders, storage, fileName, this.bufferFactory) :, +		public String name() {, +		public HttpHeaders headers() {, +		public Flux<DataBuffer> content() {, +		public SynchronossFilePart(HttpHeaders headers, StreamStorage storage, String fileName, DataBufferFactory factory) {, +		public String filename() {, +			return MultipartUtils.getFileName(headers());, +		public String value() {, +		public Flux<DataBuffer> content() {, +			return Optional.ofNullable(MultipartUtils.getCharEncoding(headers())), +++ b/spring-web/src/main/java/org/springframework/web/bind/support/WebExchangeDataBinder.java, +					.map(value -> value instanceof FormFieldPart ? ((FormFieldPart) value).value() : value), +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/FilePart.java, +	 * Return the original filename in the client's filesystem., +	String filename();, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/FormFieldPart.java, +	String value();, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartHttpMessageReader.java, +				.collectMultimap(Part::name).map(this::toMultiValueMap);]