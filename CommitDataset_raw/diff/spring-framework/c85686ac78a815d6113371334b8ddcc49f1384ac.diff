[+++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java, + * Copyright 2002-2014 the original author or authors., +	 * "outerClassName.InnerClassName", which because of the period in the, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java, + * Copyright 2002-2014 the original author or authors., +	 * "outerClassName.InnerClassName", which because of the period in the, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, +		else if (abd.getMetadata() != metadata && abd.getMetadata().isAnnotated(Lazy.class.getName())) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java, + * Copyright 2002-2014 the original author or authors., +	 * "outerClassName.InnerClassName", which because of the period in the, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, +		else if (abd.getMetadata() != metadata && abd.getMetadata().isAnnotated(Lazy.class.getName())) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +		 * @throws Throwable as a catch-all for any exception that may be thrown when invoking the, +		 * super implementation of the proxied method i.e., the actual {@code @Bean} method, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java, + * Copyright 2002-2014 the original author or authors., +	 * "outerClassName.InnerClassName", which because of the period in the, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, +		else if (abd.getMetadata() != metadata && abd.getMetadata().isAnnotated(Lazy.class.getName())) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +		 * @throws Throwable as a catch-all for any exception that may be thrown when invoking the, +		 * super implementation of the proxied method i.e., the actual {@code @Bean} method, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +					"postProcessBeanDefinitionRegistry already called on this post-processor against " + registry);, +					"postProcessBeanFactory already called on this post-processor against " + registry);, +					"postProcessBeanFactory already called on this post-processor against " + beanFactory);, +						if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory) &&, +								!alreadyParsedClasses.contains(beanDef.getBeanClassName())) {]