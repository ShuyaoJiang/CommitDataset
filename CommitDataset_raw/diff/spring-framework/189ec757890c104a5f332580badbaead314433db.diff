[+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +public class UriComponentsBuilder implements Cloneable {, +	private CompositePathComponentBuilder pathBuilder;, +		this.pathBuilder = new CompositePathComponentBuilder();, +	}, +, +	/**, +	 * Create a deep copy of the given UriComponentsBuilder., +	 * @param other the other builder to copy from, +	 */, +	protected UriComponentsBuilder(UriComponentsBuilder other) {, +		this.scheme = other.scheme;, +		this.ssp = other.ssp;, +		this.userInfo = other.userInfo;, +		this.host = other.host;, +		this.port = other.port;, +		this.pathBuilder = (CompositePathComponentBuilder) other.pathBuilder.clone();, +		this.queryParams.putAll(other.queryParams);, +		this.fragment = other.fragment;, +	@Override, +	protected Object clone() {, +		return new UriComponentsBuilder(this);, +	}, +, +	private interface PathComponentBuilder extends Cloneable {, +, +		Object clone();, +		private final LinkedList<PathComponentBuilder> builders = new LinkedList<PathComponentBuilder>();, +					this.builders.add(psBuilder);, +					this.builders.add(fpBuilder);, +			if (!this.builders.isEmpty()) {, +				PathComponentBuilder last = this.builders.getLast();, +			int size = this.builders.size();, +			for (PathComponentBuilder componentBuilder : this.builders) {, +, +		@Override, +		public Object clone() {, +			CompositePathComponentBuilder compositeBuilder = new CompositePathComponentBuilder();, +			for (PathComponentBuilder builder : this.builders) {, +				compositeBuilder.builders.add((PathComponentBuilder) builder.clone());, +			}, +			return compositeBuilder;, +		}, +, +		@Override, +		public Object clone() {, +			FullPathComponentBuilder builder = new FullPathComponentBuilder();, +			builder.append(this.path.toString());, +			return builder;, +		}, +, +		@Override, +		public Object clone() {, +			PathSegmentComponentBuilder builder = new PathSegmentComponentBuilder();, +			builder.pathSegments.addAll(this.pathSegments);, +			return builder;, +		}, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +public class UriComponentsBuilder implements Cloneable {, +	private CompositePathComponentBuilder pathBuilder;, +		this.pathBuilder = new CompositePathComponentBuilder();, +	}, +, +	/**, +	 * Create a deep copy of the given UriComponentsBuilder., +	 * @param other the other builder to copy from, +	 */, +	protected UriComponentsBuilder(UriComponentsBuilder other) {, +		this.scheme = other.scheme;, +		this.ssp = other.ssp;, +		this.userInfo = other.userInfo;, +		this.host = other.host;, +		this.port = other.port;, +		this.pathBuilder = (CompositePathComponentBuilder) other.pathBuilder.clone();, +		this.queryParams.putAll(other.queryParams);, +		this.fragment = other.fragment;, +	@Override, +	protected Object clone() {, +		return new UriComponentsBuilder(this);, +	}, +, +	private interface PathComponentBuilder extends Cloneable {, +, +		Object clone();, +		private final LinkedList<PathComponentBuilder> builders = new LinkedList<PathComponentBuilder>();, +					this.builders.add(psBuilder);, +					this.builders.add(fpBuilder);, +			if (!this.builders.isEmpty()) {, +				PathComponentBuilder last = this.builders.getLast();, +			int size = this.builders.size();, +			for (PathComponentBuilder componentBuilder : this.builders) {, +, +		@Override, +		public Object clone() {, +			CompositePathComponentBuilder compositeBuilder = new CompositePathComponentBuilder();, +			for (PathComponentBuilder builder : this.builders) {, +				compositeBuilder.builders.add((PathComponentBuilder) builder.clone());, +			}, +			return compositeBuilder;, +		}]