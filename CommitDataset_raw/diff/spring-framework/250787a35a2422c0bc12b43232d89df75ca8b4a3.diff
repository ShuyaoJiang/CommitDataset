[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/Payload.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.core.annotation.AliasFor;, + * @author Sam Brannen, +	 * Alias for {@link #expression}., +	@AliasFor(attribute="expression"), +	 * A SpEL expression to be evaluated against the payload object as the root context., +	 * <p>, +	 * This attribute may or may not be supported depending on whether the message being, +	 * handled contains a non-primitive Object as its payload or is in serialized form and, +	 * requires message conversion., +	 * <p>, +	 * When processing STOMP over WebSocket messages this attribute is not supported., +	 */, +	@AliasFor(attribute="value"), +	String expression() default "";, +, +	/**, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/Payload.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.core.annotation.AliasFor;, + * @author Sam Brannen, +	 * Alias for {@link #expression}., +	@AliasFor(attribute="expression"), +	 * A SpEL expression to be evaluated against the payload object as the root context., +	 * <p>, +	 * This attribute may or may not be supported depending on whether the message being, +	 * handled contains a non-primitive Object as its payload or is in serialized form and, +	 * requires message conversion., +	 * <p>, +	 * When processing STOMP over WebSocket messages this attribute is not supported., +	 */, +	@AliasFor(attribute="value"), +	String expression() default "";, +, +	/**, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolver.java, +		if (ann != null && StringUtils.hasText(ann.expression())) {]