[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/support/AbstractServletHttpHandlerAdapterInitializer.java, +public abstract class AbstractServletHttpHandlerAdapterInitializer implements WebApplicationInitializer {, +				"createHttpHandler() did not return a HttpHandler for servlet [" + servletName + "]");, +				"createHttpHandler() did not return a ServletHttpHandlerAdapter for servlet [" + servletName + "]");, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/support/AbstractServletHttpHandlerAdapterInitializer.java, +public abstract class AbstractServletHttpHandlerAdapterInitializer implements WebApplicationInitializer {, +				"createHttpHandler() did not return a HttpHandler for servlet [" + servletName + "]");, +				"createHttpHandler() did not return a ServletHttpHandlerAdapter for servlet [" + servletName + "]");, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java, +import org.springframework.http.HttpMethod;, +, + * @see reactor.ipc.netty.http.HttpClient, +, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/support/AbstractServletHttpHandlerAdapterInitializer.java, +public abstract class AbstractServletHttpHandlerAdapterInitializer implements WebApplicationInitializer {, +				"createHttpHandler() did not return a HttpHandler for servlet [" + servletName + "]");, +				"createHttpHandler() did not return a ServletHttpHandlerAdapter for servlet [" + servletName + "]");, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java, +import org.springframework.http.HttpMethod;, +, + * @see reactor.ipc.netty.http.HttpClient, +, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractServerHttpMessageWriter.java, +, +	 * @return additional information about how to write the body, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/support/AbstractServletHttpHandlerAdapterInitializer.java, +public abstract class AbstractServletHttpHandlerAdapterInitializer implements WebApplicationInitializer {, +				"createHttpHandler() did not return a HttpHandler for servlet [" + servletName + "]");, +				"createHttpHandler() did not return a ServletHttpHandlerAdapter for servlet [" + servletName + "]");, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java, +import org.springframework.http.HttpMethod;, +, + * @see reactor.ipc.netty.http.HttpClient, +, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractServerHttpMessageWriter.java, +, +	 * @return additional information about how to write the body, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java, +import io.netty.handler.codec.http.HttpResponseStatus;, +import org.apache.commons.logging.LogFactory;, +		Assert.notNull(httpHandler, "HttpHandler is required");, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/support/AbstractServletHttpHandlerAdapterInitializer.java, +public abstract class AbstractServletHttpHandlerAdapterInitializer implements WebApplicationInitializer {, +				"createHttpHandler() did not return a HttpHandler for servlet [" + servletName + "]");, +				"createHttpHandler() did not return a ServletHttpHandlerAdapter for servlet [" + servletName + "]");, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java, +import org.springframework.http.HttpMethod;, +, + * @see reactor.ipc.netty.http.HttpClient, +, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractServerHttpMessageWriter.java, +, +	 * @return additional information about how to write the body, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java, +import io.netty.handler.codec.http.HttpResponseStatus;, +import org.apache.commons.logging.LogFactory;, +		Assert.notNull(httpHandler, "HttpHandler is required");, +++ b/spring-web/src/main/java/org/springframework/web/client/reactive/WebClient.java, +	private static final boolean jackson2Present =, +			ClassUtils.isPresent("com.fasterxml.jackson.databind.ObjectMapper", WebClient.class.getClassLoader()) &&, +			ClassUtils.isPresent("com.fasterxml.jackson.core.JsonGenerator", WebClient.class.getClassLoader());, +	private static final boolean jaxb2Present =, +			ClassUtils.isPresent("javax.xml.bind.Binder", WebClient.class.getClassLoader());, +, +	 * Add default HTTP message readers., +	 * Add default HTTP message writers., +, +	 * <p>Requesting from the exposed {@code Flux} will result in:, +, +, +		protected Mono<Void> writeRequestBody(Publisher<?> content, ResolvableType requestType,, +				ClientHttpRequest request, List<HttpMessageWriter<?>> messageWriters) {, +, +				List<ClientHttpRequestInterceptor> interceptors, ClientWebRequest clientWebRequest) {, +			Assert.notNull(connector, "ClientHttpConnector should not be null");]