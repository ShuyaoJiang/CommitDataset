[+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +				!ObjectUtils.nullSafeEquals(this.typeProvider.getType(), otherType.typeProvider.getType()))) {, +			hashCode = 31 * hashCode + ObjectUtils.nullSafeHashCode(this.typeProvider.getType());, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +				!ObjectUtils.nullSafeEquals(this.typeProvider.getType(), otherType.typeProvider.getType()))) {, +			hashCode = 31 * hashCode + ObjectUtils.nullSafeHashCode(this.typeProvider.getType());, +++ b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java, +, +		Field field2 = Fields.class.getDeclaredField("otherPrivateField");, +		ResolvableType type2 = ResolvableType.forField(field2);, +		assertThat(type2.getType(), equalTo(field2.getGenericType()));, +		assertThat(type2.resolve(), equalTo((Class) List.class));, +, +		assertEquals(type, type2);, +		assertEquals(type.hashCode(), type2.hashCode());, +		@SuppressWarnings("unused"), +		private List<String> otherPrivateField;, +]