[+++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequest.java, +import org.springframework.util.StringUtils;, + * @author Juergen Hoeller, +			if (HttpHeaders.COOKIE.equalsIgnoreCase(headerName)) {  // RFC 6265, +				String headerValue = StringUtils.collectionToDelimitedString(entry.getValue(), "; ");, +				httpRequest.addHeader(headerName, headerValue);, +			}, +			else if (!HTTP.CONTENT_LEN.equalsIgnoreCase(headerName) &&, +					!HTTP.TRANSFER_ENCODING.equalsIgnoreCase(headerName)) {, +++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequest.java, +import org.springframework.util.StringUtils;, + * @author Juergen Hoeller, +			if (HttpHeaders.COOKIE.equalsIgnoreCase(headerName)) {  // RFC 6265, +				String headerValue = StringUtils.collectionToDelimitedString(entry.getValue(), "; ");, +				httpRequest.addHeader(headerName, headerValue);, +			}, +			else if (!HTTP.CONTENT_LEN.equalsIgnoreCase(headerName) &&, +					!HTTP.TRANSFER_ENCODING.equalsIgnoreCase(headerName)) {, +++ b/spring-web/src/main/java/org/springframework/http/client/SimpleBufferingAsyncClientHttpRequest.java, + * standard JDK facilities to execute buffered requests. Created via the, +				SimpleBufferingClientHttpRequest.addHeaders(connection, headers);, +++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequest.java, +import org.springframework.util.StringUtils;, + * @author Juergen Hoeller, +			if (HttpHeaders.COOKIE.equalsIgnoreCase(headerName)) {  // RFC 6265, +				String headerValue = StringUtils.collectionToDelimitedString(entry.getValue(), "; ");, +				httpRequest.addHeader(headerName, headerValue);, +			}, +			else if (!HTTP.CONTENT_LEN.equalsIgnoreCase(headerName) &&, +					!HTTP.TRANSFER_ENCODING.equalsIgnoreCase(headerName)) {, +++ b/spring-web/src/main/java/org/springframework/http/client/SimpleBufferingAsyncClientHttpRequest.java, + * standard JDK facilities to execute buffered requests. Created via the, +				SimpleBufferingClientHttpRequest.addHeaders(connection, headers);, +++ b/spring-web/src/main/java/org/springframework/http/client/SimpleBufferingClientHttpRequest.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.util.StringUtils;, + * {@link ClientHttpRequest} implementation that uses standard JDK facilities to, + * execute buffered requests. Created via the {@link SimpleClientHttpRequestFactory}., + * @author Juergen Hoeller, +		addHeaders(this.connection, headers);, +, +	/**, +	 * Add the given headers to the given HTTP connection., +	 * @param connection the connection to add the headers to, +	 * @param headers the headers to add, +	 */, +	static void addHeaders(HttpURLConnection connection, HttpHeaders headers) {, +		for (Map.Entry<String, List<String>> entry : headers.entrySet()) {, +			String headerName = entry.getKey();, +			if (HttpHeaders.COOKIE.equalsIgnoreCase(headerName)) {  // RFC 6265, +				String headerValue = StringUtils.collectionToDelimitedString(entry.getValue(), "; ");, +				connection.setRequestProperty(headerName, headerValue);, +			}, +			else {, +				for (String headerValue : entry.getValue()) {, +					connection.addRequestProperty(headerName, headerValue);, +				}, +			}, +		}, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequest.java, +import org.springframework.util.StringUtils;, + * @author Juergen Hoeller, +			if (HttpHeaders.COOKIE.equalsIgnoreCase(headerName)) {  // RFC 6265, +				String headerValue = StringUtils.collectionToDelimitedString(entry.getValue(), "; ");, +				httpRequest.addHeader(headerName, headerValue);, +			}, +			else if (!HTTP.CONTENT_LEN.equalsIgnoreCase(headerName) &&, +					!HTTP.TRANSFER_ENCODING.equalsIgnoreCase(headerName)) {, +++ b/spring-web/src/main/java/org/springframework/http/client/SimpleBufferingAsyncClientHttpRequest.java, + * standard JDK facilities to execute buffered requests. Created via the, +				SimpleBufferingClientHttpRequest.addHeaders(connection, headers);, +++ b/spring-web/src/main/java/org/springframework/http/client/SimpleBufferingClientHttpRequest.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.util.StringUtils;, + * {@link ClientHttpRequest} implementation that uses standard JDK facilities to, + * execute buffered requests. Created via the {@link SimpleClientHttpRequestFactory}., + * @author Juergen Hoeller, +		addHeaders(this.connection, headers);, +, +	/**, +	 * Add the given headers to the given HTTP connection., +	 * @param connection the connection to add the headers to, +	 * @param headers the headers to add, +	 */, +	static void addHeaders(HttpURLConnection connection, HttpHeaders headers) {, +		for (Map.Entry<String, List<String>> entry : headers.entrySet()) {, +			String headerName = entry.getKey();, +			if (HttpHeaders.COOKIE.equalsIgnoreCase(headerName)) {  // RFC 6265, +				String headerValue = StringUtils.collectionToDelimitedString(entry.getValue(), "; ");, +				connection.setRequestProperty(headerName, headerValue);, +			}, +			else {, +				for (String headerValue : entry.getValue()) {, +					connection.addRequestProperty(headerName, headerValue);, +				}, +			}, +		}, +	}]