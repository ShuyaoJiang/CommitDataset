[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import org.springframework.http.ResponseEntity;, +import org.springframework.http.server.ServerHttpResponse;, +			if (responseEntity instanceof ResponseEntity && outputMessage instanceof ServerHttpResponse) {, +				((ServerHttpResponse)outputMessage).setStatusCode(((ResponseEntity) responseEntity).getStatusCode());, +			}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import org.springframework.http.ResponseEntity;, +import org.springframework.http.server.ServerHttpResponse;, +			if (responseEntity instanceof ResponseEntity && outputMessage instanceof ServerHttpResponse) {, +				((ServerHttpResponse)outputMessage).setStatusCode(((ResponseEntity) responseEntity).getStatusCode());, +			}, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +import org.springframework.http.ResponseEntity;, +		assertEquals(201, response.getStatus());, +		public ResponseEntity<String> handle(HttpEntity<byte[]> requestEntity) throws UnsupportedEncodingException {, +			return new ResponseEntity<String>(requestBody, responseHeaders, HttpStatus.CREATED);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import org.springframework.http.ResponseEntity;, +import org.springframework.http.server.ServerHttpResponse;, +			if (responseEntity instanceof ResponseEntity && outputMessage instanceof ServerHttpResponse) {, +				((ServerHttpResponse)outputMessage).setStatusCode(((ResponseEntity) responseEntity).getStatusCode());, +			}, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +import org.springframework.http.ResponseEntity;, +		assertEquals(201, response.getStatus());, +		public ResponseEntity<String> handle(HttpEntity<byte[]> requestEntity) throws UnsupportedEncodingException {, +			return new ResponseEntity<String>(requestBody, responseHeaders, HttpStatus.CREATED);, +++ b/org.springframework.web/src/main/java/org/springframework/http/HttpEntity.java, + * Can also be used in Spring MVC, as a return value from a @Controller method:, + * <pre>, + * &#64;RequestMapping("/handle"), + * public HttpEntity&ltString&gt handle() {, + *   HttpHeaders responseHeaders = new HttpHeaders();, + *   responseHeaders.set("MyResponseHeader", "MyValue");, + *   return new HttpEntity<String>("Hello World", responseHeaders);, + * }, + * </pre>, +		this(null, null);, +		this(body, null);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import org.springframework.http.ResponseEntity;, +import org.springframework.http.server.ServerHttpResponse;, +			if (responseEntity instanceof ResponseEntity && outputMessage instanceof ServerHttpResponse) {, +				((ServerHttpResponse)outputMessage).setStatusCode(((ResponseEntity) responseEntity).getStatusCode());, +			}, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +import org.springframework.http.ResponseEntity;, +		assertEquals(201, response.getStatus());, +		public ResponseEntity<String> handle(HttpEntity<byte[]> requestEntity) throws UnsupportedEncodingException {, +			return new ResponseEntity<String>(requestBody, responseHeaders, HttpStatus.CREATED);, +++ b/org.springframework.web/src/main/java/org/springframework/http/HttpEntity.java, + * Can also be used in Spring MVC, as a return value from a @Controller method:, + * <pre>, + * &#64;RequestMapping("/handle"), + * public HttpEntity&ltString&gt handle() {, + *   HttpHeaders responseHeaders = new HttpHeaders();, + *   responseHeaders.set("MyResponseHeader", "MyValue");, + *   return new HttpEntity<String>("Hello World", responseHeaders);, + * }, + * </pre>, +		this(null, null);, +		this(body, null);, +++ b/org.springframework.web/src/main/java/org/springframework/http/ResponseEntity.java, +/*, + * Copyright 2002-2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.http;, +, +import org.springframework.util.MultiValueMap;, +, +/**, + * Extension of {@link HttpEntity} that adds a {@link HttpStatus} status code., + *, + * @author Arjen Poutsma, + * @since 3.0.2, + * @see #getStatusCode(), + */, +public class ResponseEntity<T> extends HttpEntity<T> {, +, +	private final HttpStatus statusCode;, +, +	/**, +	 * Create a new {@code ResponseEntity} with the given body and status code, and no headers., +	 * @param body the entity body, +	 * @param statusCode the status code, +	 */]