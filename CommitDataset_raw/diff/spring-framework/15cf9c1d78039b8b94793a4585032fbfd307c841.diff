[+++ b/spring-web/src/main/java/org/springframework/web/util/pattern/PathPattern.java, +	// TODO: implement extractPathWithinPattern natively for PathContainer, +, +	public PathContainer extractPathWithinPattern(PathContainer path) {, +		String result = extractPathWithinPattern(path.value());, +		return PathContainer.parse(result, StandardCharsets.UTF_8);, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/PathPattern.java, +	// TODO: implement extractPathWithinPattern natively for PathContainer, +, +	public PathContainer extractPathWithinPattern(PathContainer path) {, +		String result = extractPathWithinPattern(path.value());, +		return PathContainer.parse(result, StandardCharsets.UTF_8);, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/handler/AbstractUrlHandlerMapping.java, +import org.springframework.http.server.reactive.PathContainer;, +		PathContainer lookupPath = exchange.getRequest().getPath().pathWithinApplication();, +	protected Object lookupHandler(PathContainer lookupPath, ServerWebExchange exchange) throws Exception {, +				PathContainer pathWithinMapping = bestMatch.getPattern().extractPathWithinPattern(lookupPath);, +	private Object handleMatch(Object handler, PathPattern bestMatch, PathContainer pathWithinMapping,, +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/PathPattern.java, +	// TODO: implement extractPathWithinPattern natively for PathContainer, +, +	public PathContainer extractPathWithinPattern(PathContainer path) {, +		String result = extractPathWithinPattern(path.value());, +		return PathContainer.parse(result, StandardCharsets.UTF_8);, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/handler/AbstractUrlHandlerMapping.java, +import org.springframework.http.server.reactive.PathContainer;, +		PathContainer lookupPath = exchange.getRequest().getPath().pathWithinApplication();, +	protected Object lookupHandler(PathContainer lookupPath, ServerWebExchange exchange) throws Exception {, +				PathContainer pathWithinMapping = bestMatch.getPattern().extractPathWithinPattern(lookupPath);, +	private Object handleMatch(Object handler, PathPattern bestMatch, PathContainer pathWithinMapping,, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/handler/PathPatternRegistry.java, +import org.springframework.http.server.reactive.PathContainer;, +	public PathMatchResult<T> findFirstMatch(PathContainer lookupPath) {, +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/PathPattern.java, +	// TODO: implement extractPathWithinPattern natively for PathContainer, +, +	public PathContainer extractPathWithinPattern(PathContainer path) {, +		String result = extractPathWithinPattern(path.value());, +		return PathContainer.parse(result, StandardCharsets.UTF_8);, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/handler/AbstractUrlHandlerMapping.java, +import org.springframework.http.server.reactive.PathContainer;, +		PathContainer lookupPath = exchange.getRequest().getPath().pathWithinApplication();, +	protected Object lookupHandler(PathContainer lookupPath, ServerWebExchange exchange) throws Exception {, +				PathContainer pathWithinMapping = bestMatch.getPattern().extractPathWithinPattern(lookupPath);, +	private Object handleMatch(Object handler, PathPattern bestMatch, PathContainer pathWithinMapping,, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/handler/PathPatternRegistry.java, +import org.springframework.http.server.reactive.PathContainer;, +	public PathMatchResult<T> findFirstMatch(PathContainer lookupPath) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/ResourceWebHandler.java, +import org.springframework.http.server.reactive.PathContainer;, +		PathContainer pathWithinHandler = exchange.getRequiredAttribute(name);, +		String path = processPath(pathWithinHandler.value());, +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/PathPattern.java, +	// TODO: implement extractPathWithinPattern natively for PathContainer, +, +	public PathContainer extractPathWithinPattern(PathContainer path) {, +		String result = extractPathWithinPattern(path.value());, +		return PathContainer.parse(result, StandardCharsets.UTF_8);, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/handler/AbstractUrlHandlerMapping.java, +import org.springframework.http.server.reactive.PathContainer;, +		PathContainer lookupPath = exchange.getRequest().getPath().pathWithinApplication();, +	protected Object lookupHandler(PathContainer lookupPath, ServerWebExchange exchange) throws Exception {, +				PathContainer pathWithinMapping = bestMatch.getPattern().extractPathWithinPattern(lookupPath);, +	private Object handleMatch(Object handler, PathPattern bestMatch, PathContainer pathWithinMapping,, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/handler/PathPatternRegistry.java, +import org.springframework.http.server.reactive.PathContainer;, +	public PathMatchResult<T> findFirstMatch(PathContainer lookupPath) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/ResourceWebHandler.java, +import org.springframework.http.server.reactive.PathContainer;, +		PathContainer pathWithinHandler = exchange.getRequiredAttribute(name);, +		String path = processPath(pathWithinHandler.value());, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java, +			logger.debug("Looking up handler method for path " +, +					exchange.getRequest().getPath().value());, +				handlerMethod = lookupHandlerMethod(exchange);, +					logger.debug("Did not find handler method for " +, +							"[" + exchange.getRequest().getPath().value() + "]");, +	 * @see #handleMatch(T, HandlerMethod, ServerWebExchange), +	 * @see #handleNoMatch(Set, ServerWebExchange), +	protected HandlerMethod lookupHandlerMethod(ServerWebExchange exchange), +						exchange.getRequest().getPath() + "] : " + matches);, +							exchange.getRequest().getPath() + "': {" + m1 + ", " + m2 + "}");, +			handleMatch(bestMatch.mapping, bestMatch.handlerMethod, exchange);, +			return handleNoMatch(this.mappingRegistry.getMappings().keySet(), exchange);, +	protected void handleMatch(T mapping, HandlerMethod handlerMethod, ServerWebExchange exchange) {, +	protected HandlerMethod handleNoMatch(Set<T> mappings, ServerWebExchange exchange) throws Exception {, +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/PathPattern.java, +	// TODO: implement extractPathWithinPattern natively for PathContainer, +, +	public PathContainer extractPathWithinPattern(PathContainer path) {]