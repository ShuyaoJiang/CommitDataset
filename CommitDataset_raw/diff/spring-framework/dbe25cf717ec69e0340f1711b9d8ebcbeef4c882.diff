[+++ b/spring-web/src/main/java/org/springframework/http/server/DefaultRequestPath.java, +		validateContextPath(path.value(), contextPath);, +		throw new IllegalStateException("Failed to initialize contextPath '" + contextPath + "'" +, +				" for requestPath '" + path.value() + "'");, +	}, +, +	private static void validateContextPath(String fullPath, String contextPath) {, +		int length = contextPath.length();, +		if (contextPath.charAt(0) != '/' || contextPath.charAt(length - 1) == '/') {, +			throw new IllegalArgumentException("Invalid contextPath: '" + contextPath + "': " +, +					"must start with '/' and not end with '/'");, +		}, +		if (!fullPath.startsWith(contextPath)) {, +			throw new IllegalArgumentException("Invalid contextPath '" + contextPath + "': " +, +					"must match the start of requestPath: '" + fullPath + "'");, +		}, +		if (fullPath.length() > length && fullPath.charAt(length) != '/') {, +			throw new IllegalArgumentException("Invalid contextPath '" + contextPath + "': " +, +					"must match to full path segments for requestPath: '" + fullPath + "'");, +		}, +++ b/spring-web/src/main/java/org/springframework/http/server/DefaultRequestPath.java, +		validateContextPath(path.value(), contextPath);, +		throw new IllegalStateException("Failed to initialize contextPath '" + contextPath + "'" +, +				" for requestPath '" + path.value() + "'");, +	}, +, +	private static void validateContextPath(String fullPath, String contextPath) {, +		int length = contextPath.length();, +		if (contextPath.charAt(0) != '/' || contextPath.charAt(length - 1) == '/') {, +			throw new IllegalArgumentException("Invalid contextPath: '" + contextPath + "': " +, +					"must start with '/' and not end with '/'");, +		}, +		if (!fullPath.startsWith(contextPath)) {, +			throw new IllegalArgumentException("Invalid contextPath '" + contextPath + "': " +, +					"must match the start of requestPath: '" + fullPath + "'");, +		}, +		if (fullPath.length() > length && fullPath.charAt(length) != '/') {, +			throw new IllegalArgumentException("Invalid contextPath '" + contextPath + "': " +, +					"must match to full path segments for requestPath: '" + fullPath + "'");, +		}, +++ b/spring-web/src/main/java/org/springframework/http/server/RequestPath.java, +	 * The new context path must match 0 or more path segments at the start., +++ b/spring-web/src/main/java/org/springframework/http/server/DefaultRequestPath.java, +		validateContextPath(path.value(), contextPath);, +		throw new IllegalStateException("Failed to initialize contextPath '" + contextPath + "'" +, +				" for requestPath '" + path.value() + "'");, +	}, +, +	private static void validateContextPath(String fullPath, String contextPath) {, +		int length = contextPath.length();, +		if (contextPath.charAt(0) != '/' || contextPath.charAt(length - 1) == '/') {, +			throw new IllegalArgumentException("Invalid contextPath: '" + contextPath + "': " +, +					"must start with '/' and not end with '/'");, +		}, +		if (!fullPath.startsWith(contextPath)) {, +			throw new IllegalArgumentException("Invalid contextPath '" + contextPath + "': " +, +					"must match the start of requestPath: '" + fullPath + "'");, +		}, +		if (fullPath.length() > length && fullPath.charAt(length) != '/') {, +			throw new IllegalArgumentException("Invalid contextPath '" + contextPath + "': " +, +					"must match to full path segments for requestPath: '" + fullPath + "'");, +		}, +++ b/spring-web/src/main/java/org/springframework/http/server/RequestPath.java, +	 * The new context path must match 0 or more path segments at the start., +++ b/spring-web/src/test/java/org/springframework/http/server/DefaultRequestPathTests.java, +	@Test, +	public void updateRequestPath() throws Exception {, +, +		URI uri = URI.create("http://localhost:8080/aA/bB/cC");, +		RequestPath requestPath = RequestPath.parse(uri, null);, +, +		assertEquals("", requestPath.contextPath().value());, +		assertEquals("/aA/bB/cC", requestPath.pathWithinApplication().value());, +, +		requestPath = requestPath.modifyContextPath("/aA");, +, +		assertEquals("/aA", requestPath.contextPath().value());, +		assertEquals("/bB/cC", requestPath.pathWithinApplication().value());, +	}, +]