[+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaSessionFactoryBean.java, + * Copyright 2002-2017 the original author or authors., + * <p>Note that, for straightforward cases, you could also simply declare a factory method:, + *, + * <pre class="code">, + * &lt;bean id="sessionFactory" factory-bean="entityManagerFactory" factory-method="getSessionFactory"/&gt;, + * </pre>, + *, + * <p>And as of JPA 2.1, {@link EntityManagerFactory#unwrap} provides a nice approach as well,, + * in particular within configuration class arrangements:, + *, + * <pre class="code">, + * &#064;Bean, + * public SessionFactory sessionFactory(@Qualifier("entityManagerFactory") EntityManagerFactory emf) {, + *     return emf.unwrap(SessionFactory.class);, + * }, + * </pre>, + *, + * Please note: Since Hibernate 5.2 changed its {@code SessionFactory} interface to extend JPA's, + * {@code EntityManagerFactory}, you may get conflicts when injecting by type, with both the, + * original factory and your custom {@code SessionFactory} matching {@code EntityManagerFactory}., + * An explicit qualifier for the original factory (as indicated above) is recommended here., + *, + * @deprecated as of Spring Framework 4.3.12 against Hibernate 5.2, in favor of a custom solution, + * based on {@link EntityManagerFactory#unwrap} with explicit qualifiers and/or primary markers, +@Deprecated]