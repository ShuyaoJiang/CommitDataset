[+++ b/spring-web/src/main/java/org/springframework/http/RequestEntity.java, +import org.springframework.util.Assert;, + * Used in {@code RestTemplate} and {@code @Controller} methods., +, +	 * Constructor with method and URL but without body nor headers., +		this(null, null, method, url);, +	 * Constructor with method, URL and body but without headers., +		this(body, null, method, url);, +	 * Constructor with method, URL and headers but without body., +		this(null, headers, method, url);, +	 * Constructor with method, URL, headers and body., +	public RequestEntity(T body, MultiValueMap<String, String> headers, HttpMethod method, URI url) {, +		Assert.notNull(method, "'method' is required");, +		Assert.notNull(url, "'url' is required");, +, +		return this.method;, +		return this.url;, +, +		builder.append(this.method);, +	 * Create a builder with the given method, url, and uri variables., +	public static BodyBuilder method(HttpMethod method, String url, Object... uriVariables) {, +	 * Create a builder with the given method, url, and uri variables., +	public static BodyBuilder method(HttpMethod method, String url, Map<String, ?> uriVariables) {, +	 * Create a builder with the given method and url., +	 * Create a GET builder with the given url and uri variables., +	 * Create an HTTP GET builder with the given url and uri variables., +	 * Create an HTTP GET builder with the given url., +	 * Create an HTTP HEAD builder with the given url and uri variables., +	 * Create an HTTP HEAD builder with the given url and uri variables., +	 * Create an HTTP HEAD builder with the given url., +	 * Create an HTTP POST builder with the given url and uri variables., +	 * Create an HTTP POST builder with the given url and uri variables., +	 * Create an HTTP POST builder with the given url., +	 * Create an HTTP PUT builder with the given url and uri variables., +	public static BodyBuilder put(String url, Object... uriVariables) {, +	 * Create an HTTP PUT builder with the given url and uri variables., +	public static BodyBuilder put(String url, Map<String, ?> uriVariables) {, +	 * Create an HTTP PUT builder with the given url., +	 * Create an HTTP PATCH builder with the given url and uri variables., +	public static BodyBuilder patch(String url, Object... uriVariables) {, +	 * Create an HTTP PATCH builder with the given url and uri variables., +	public static BodyBuilder patch(String url, Map<String, ?> uriVariables) {, +	 * Create an HTTP PATCH builder with the given url., +	 * Create an HTTP DELETE builder with the given url and uri variables., +	public static HeadersBuilder<?> delete(String url, Object... uriVariables) {, +	 * Create an HTTP DELETE builder with the given url and uri variables., +	public static HeadersBuilder<?> delete(String url, Map<String, ?> uriVariables) {, +	 * Create an HTTP DELETE builder with the given url., +	 * Create an HTTP OPTIONS builder with the given url and uri variables., +	public static HeadersBuilder<?> options(String url, Object... uriVariables) {, +	 * Creates an HTTP OPTIONS builder with the given url and uri variables., +	public static HeadersBuilder<?> options(String url, Map<String, ?> uriVariables) {, +	 * Creates an HTTP OPTIONS builder with the given url., +		 * Set the list of acceptable {@linkplain MediaType media types}, as, +		 * specified by the {@code Accept} header., +		 * Set the list of acceptable {@linkplain Charset charsets}, as specified, +		 * by the {@code Accept-Charset} header., +		 * Set the value of the {@code If-Modified-Since} header., +		 * <p>The date should be specified as the number of milliseconds since, +		 * January 1, 1970 GMT., +		 * Set the values of the {@code If-None-Match} header., +		 * Set the length of the body in bytes, as specified by the, +		 * {@code Content-Length} header., +		 * Set the {@linkplain MediaType media type} of the body, as specified, +		 * by the {@code Content-Type} header., +		 * Set the body of the request entity and build the RequestEntity., +			return new RequestEntity<Void>(this.headers, this.method, this.url);, +++ b/spring-web/src/main/java/org/springframework/http/RequestEntity.java, +import org.springframework.util.Assert;, + * Used in {@code RestTemplate} and {@code @Controller} methods., +, +	 * Constructor with method and URL but without body nor headers., +		this(null, null, method, url);, +	 * Constructor with method, URL and body but without headers., +		this(body, null, method, url);, +	 * Constructor with method, URL and headers but without body., +		this(null, headers, method, url);, +	 * Constructor with method, URL, headers and body., +	public RequestEntity(T body, MultiValueMap<String, String> headers, HttpMethod method, URI url) {, +		Assert.notNull(method, "'method' is required");, +		Assert.notNull(url, "'url' is required");, +, +		return this.method;, +		return this.url;, +, +		builder.append(this.method);, +	 * Create a builder with the given method, url, and uri variables., +	public static BodyBuilder method(HttpMethod method, String url, Object... uriVariables) {, +	 * Create a builder with the given method, url, and uri variables., +	public static BodyBuilder method(HttpMethod method, String url, Map<String, ?> uriVariables) {, +	 * Create a builder with the given method and url., +	 * Create a GET builder with the given url and uri variables., +	 * Create an HTTP GET builder with the given url and uri variables., +	 * Create an HTTP GET builder with the given url., +	 * Create an HTTP HEAD builder with the given url and uri variables., +	 * Create an HTTP HEAD builder with the given url and uri variables., +	 * Create an HTTP HEAD builder with the given url., +	 * Create an HTTP POST builder with the given url and uri variables., +	 * Create an HTTP POST builder with the given url and uri variables., +	 * Create an HTTP POST builder with the given url.]