[+++ b/spring-core/src/main/java/org/springframework/core/io/UrlResource.java, + * Copyright 2002-2013 the original author or authors., +import java.net.URISyntaxException;, +	 * Original URI, if available; used for URI and File access., +	 */, +	private final URI uri;, +, +	/**, +, +	 * Create a new UrlResource based on the given URI object., +	 * @param uri a URI, +	 * @throws MalformedURLException if the given URL path is not valid, +	public UrlResource(URI uri) throws MalformedURLException {, +		Assert.notNull(uri, "URI must not be null");, +		this.uri = uri;, +		this.url = uri.toURL();, +		this.cleanedUrl = getCleanedUrl(this.url, uri.toString());, +	}, +	 * Create a new UrlResource based on the given URL object., +	 * Create a new UrlResource based on a URL path., +	 * <p>Note: The given path needs to be pre-encoded if necessary., +	 * @see java.net.URL#URL(String), +		this.uri = null;, +	}, +, +	/**, +	 * Create a new UrlResource based on a URI specification., +	 * <p>The given parts will automatically get encoded if necessary., +	 * @param protocol the URL protocol to use (e.g. "jar" or "file" - without colon);, +	 * also known as "scheme", +	 * @param location the location (e.g. the file path within that protocol);, +	 * also known as "scheme-specific part", +	 * @throws MalformedURLException if the given URL specification is not valid, +	 * @see java.net.URI#URI(String, String, String), +	 */, +	public UrlResource(String protocol, String location) throws MalformedURLException  {, +		this(protocol, location, null);, +	}, +, +	/**, +	 * Create a new UrlResource based on a URI specification., +	 * <p>The given parts will automatically get encoded if necessary., +	 * @param protocol the URL protocol to use (e.g. "jar" or "file" - without colon);, +	 * also known as "scheme", +	 * @param location the location (e.g. the file path within that protocol);, +	 * also known as "scheme-specific part", +	 * @param fragment the fragment within that location (e.g. anchor on an HTML page,, +	 * as following after a "#" separator), +	 * @throws MalformedURLException if the given URL specification is not valid, +	 * @see java.net.URI#URI(String, String, String), +	 */, +	public UrlResource(String protocol, String location, String fragment) throws MalformedURLException  {, +		try {, +			this.uri = new URI(protocol, location, fragment);, +			this.url = this.uri.toURL();, +			this.cleanedUrl = getCleanedUrl(this.url, this.uri.toString());, +		}, +		catch (URISyntaxException ex) {, +			MalformedURLException exToThrow = new MalformedURLException(ex.getMessage());, +			exToThrow.initCause(ex);, +			throw exToThrow;, +		}, +++ b/spring-core/src/main/java/org/springframework/core/io/UrlResource.java, + * Copyright 2002-2013 the original author or authors., +import java.net.URISyntaxException;, +	 * Original URI, if available; used for URI and File access., +	 */, +	private final URI uri;, +, +	/**, +, +	 * Create a new UrlResource based on the given URI object., +	 * @param uri a URI, +	 * @throws MalformedURLException if the given URL path is not valid, +	public UrlResource(URI uri) throws MalformedURLException {, +		Assert.notNull(uri, "URI must not be null");, +		this.uri = uri;, +		this.url = uri.toURL();, +		this.cleanedUrl = getCleanedUrl(this.url, uri.toString());, +	}, +	 * Create a new UrlResource based on the given URL object., +	 * Create a new UrlResource based on a URL path., +	 * <p>Note: The given path needs to be pre-encoded if necessary., +	 * @see java.net.URL#URL(String), +		this.uri = null;, +	}, +, +	/**, +	 * Create a new UrlResource based on a URI specification., +	 * <p>The given parts will automatically get encoded if necessary., +	 * @param protocol the URL protocol to use (e.g. "jar" or "file" - without colon);, +	 * also known as "scheme", +	 * @param location the location (e.g. the file path within that protocol);, +	 * also known as "scheme-specific part", +	 * @throws MalformedURLException if the given URL specification is not valid, +	 * @see java.net.URI#URI(String, String, String), +	 */, +	public UrlResource(String protocol, String location) throws MalformedURLException  {, +		this(protocol, location, null);, +	}]