[+++ b/src/docs/asciidoc/web/webflux.adoc, +<<webflux-ann-requestbody>>., +Supports reactive types. See <<webflux-ann-httpentity>>., +|For access to errors from validation and data binding for a command object, +(i.e. `@ModelAttribute` argument), or errors from the validation of an `@RequestBody` or, +`@RequestPart` arguments; an `Errors`, or `BindingResult` argument must be declared, +immediately after the validated method argument., +See <<webflux-ann-responsebody>>., +See <<webflux-ann-responseentity>>., +`@RequestPart` can be used in combination with `javax.validation.Valid`, or Spring's, +`@Validated` annotation, which causes Standard Bean Validation to be applied., +By default validation errors cause a `WebExchangeBindException` which is turned, +into a 400 (BAD_REQUEST) response. Alternatively validation errors can be handled locally, +within the controller through an `Errors` or `BindingResult` argument:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +@PostMapping("/"), +public String handle(**@Valid** @RequestPart("meta-data") MetaData metadata,, +		**BindingResult result**) {, +	// ..., +}, +----, +, +, +[[webflux-ann-requestbody]], +==== @RequestBody, +[.small]#<<web.adoc#mvc-ann-requestbody,Same in Spring MVC>>#, +, +Use the `@RequestBody` annotation to have the request body read and deserialized into an, +Object through an <<webflux-codecs,HttpMessageReader>>., +Below is an example with an `@RequestBody` argument:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@PostMapping("/accounts"), +	public void handle(@RequestBody Account account) {, +		// ..., +	}, +----, +, +Unlike Spring MVC, in WebFlux the `@RequestBody` method argument supports reactive types, +and fully non-blocking reading and (client-to-server) streaming:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@PostMapping("/accounts"), +	public void handle(@RequestBody Mono<Account> account) {, +		// ..., +	}, +----, +, +You can use the <<webflux-config-message-codecs>> option of the <<webflux-config>> to, +configure or customize message readers., +, +`@RequestBody` can be used in combination with `javax.validation.Valid`, or Spring's, +`@Validated` annotation, which causes Standard Bean Validation to be applied., +By default validation errors cause a `WebExchangeBindException` which is turned, +into a 400 (BAD_REQUEST) response. Alternatively validation errors can be handled locally, +within the controller through an `Errors` or `BindingResult` argument:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@PostMapping("/accounts"), +	public void handle(@Valid @RequestBody Account account, BindingResult result) {, +		// ..., +	}, +----, +, +, +[[webflux-ann-httpentity]], +==== HttpEntity, +[.small]#<<web.adoc#mvc-ann-httpentity,Same in Spring MVC>>#, +, +`HttpEntity` is more or less identical to using <<webflux-ann-requestbody>> but based on a, +container object that exposes request headers and body. Below is an example:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@PostMapping("/accounts"), +	public void handle(HttpEntity<Account> entity) {, +		// ..., +	}, +----, +, +, +[[webflux-ann-responsebody]], +==== @ResponseBody, +[.small]#<<web.adoc#mvc-ann-responsebody,Same in Spring MVC>>#, +, +Use the `@ResponseBody` annotation on a method to have the return serialized to the, +response body through an <<webflux-codecs,HttpMessageWriter>>. For example:, +, +[source,java,indent=0], +[subs="verbatim,quotes"]]