[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +			Object beanInstance = getSingleton(beanName, false);, +			if (beanInstance instanceof FactoryBean) {, +				return (FactoryBean<?>) beanInstance;, +			}, +			Object instance;, +		synchronized (getSingletonMutex()) {, +	}, +, +	/**, +	 * Overridden to clear FactoryBean instance cache as well., +	 */, +	@Override, +	protected void clearSingletonCache() {, +		synchronized (getSingletonMutex()) {, +			super.clearSingletonCache();, +			this.factoryBeanInstanceCache.clear();, +		}, +	}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +			Object beanInstance = getSingleton(beanName, false);, +			if (beanInstance instanceof FactoryBean) {, +				return (FactoryBean<?>) beanInstance;, +			}, +			Object instance;, +		synchronized (getSingletonMutex()) {, +	}, +, +	/**, +	 * Overridden to clear FactoryBean instance cache as well., +	 */, +	@Override, +	protected void clearSingletonCache() {, +		synchronized (getSingletonMutex()) {, +			super.clearSingletonCache();, +			this.factoryBeanInstanceCache.clear();, +		}, +	}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java, +			containedBeans = this.containedBeanMap.computeIfAbsent(containingBeanName, k -> new LinkedHashSet<>(8));, +			dependentBeans = this.dependentBeanMap.computeIfAbsent(canonicalName, k -> new LinkedHashSet<>(8));, +			Set<String> dependenciesForBean =, +					this.dependenciesForBeanMap.computeIfAbsent(dependentBeanName, k -> new LinkedHashSet<>(8));, +		clearSingletonCache();, +	}, +, +	/**, +	 * Clear all cached singleton instances in this registry., +	 * @since 4.3.15, +	 */, +	protected void clearSingletonCache() {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +			Object beanInstance = getSingleton(beanName, false);, +			if (beanInstance instanceof FactoryBean) {, +				return (FactoryBean<?>) beanInstance;, +			}, +			Object instance;, +		synchronized (getSingletonMutex()) {, +	}, +, +	/**, +	 * Overridden to clear FactoryBean instance cache as well., +	 */, +	@Override, +	protected void clearSingletonCache() {, +		synchronized (getSingletonMutex()) {, +			super.clearSingletonCache();, +			this.factoryBeanInstanceCache.clear();, +		}, +	}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java, +			containedBeans = this.containedBeanMap.computeIfAbsent(containingBeanName, k -> new LinkedHashSet<>(8));, +			dependentBeans = this.dependentBeanMap.computeIfAbsent(canonicalName, k -> new LinkedHashSet<>(8));, +			Set<String> dependenciesForBean =, +					this.dependenciesForBeanMap.computeIfAbsent(dependentBeanName, k -> new LinkedHashSet<>(8));, +		clearSingletonCache();, +	}, +, +	/**, +	 * Clear all cached singleton instances in this registry., +	 * @since 4.3.15, +	 */, +	protected void clearSingletonCache() {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/FactoryBeanRegistrySupport.java, + * Copyright 2002-2018 the original author or authors., +		synchronized (getSingletonMutex()) {, +	}, +	protected void clearSingletonCache() {, +		synchronized (getSingletonMutex()) {, +			super.clearSingletonCache();, +	}]