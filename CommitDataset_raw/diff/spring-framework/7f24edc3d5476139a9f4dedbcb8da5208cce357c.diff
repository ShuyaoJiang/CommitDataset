[+++ b/spring-framework-reference/src/jms.xml, +      <para>There are two standard JMS message listener containers packaged, +        <para>This message listener container is the simpler of the two, +        standard flavors. It creates a fixed number of JMS sessions and, +        consumers at startup, registers the listener using the standard JMS, +        <methodname>MessageConsumer.setMessageListener</methodname> method,, +        and leaves it up the JMS provider to perform listener callbacks., +        This variant does not allow for dynamic adaption to runtime demands or, +        for participation in externally managed transactions. Compatibility-wise,, +        it stays very close to the spirit of the standalone JMS specification, +        - but is generally not compatible with Java EE's JMS restrictions.</para>, +        Each received message is registered with an XA transaction when, +        configured with a <classname>JtaTransactionManager</classname>;, +        so processing may take advantage of XA transation semantics. This, +        listener container strikes a good balance between low requirements, +        on the JMS provider, advanced functionality such as transaction, +        participation, and compatibility with Java EE environments.</para>]