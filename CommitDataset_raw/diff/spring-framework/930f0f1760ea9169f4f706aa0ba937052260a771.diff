[+++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java, +import java.util.Arrays;, +import org.springframework.http.HttpCookie;, +	private final MultiValueMap<String, HttpCookie> cookies;, +, +	private MockServerRequest(HttpMethod method, URI uri, MockHeaders headers,, +			MultiValueMap<String, HttpCookie> cookies, @Nullable Object body,, +		this.cookies = cookies;, +	public MultiValueMap<String, HttpCookie> cookies() {, +		return this.cookies;, +	}, +, +	@Override, +		Builder cookie(HttpCookie... cookies);, +, +		Builder cookies(MultiValueMap<String, HttpCookie> cookies);, +, +		private MultiValueMap<String, HttpCookie> cookies = new LinkedMultiValueMap<>();, +, +		public Builder cookie(HttpCookie... cookies) {, +			Arrays.stream(cookies).forEach(cookie -> this.cookies.add(cookie.getName(), cookie));, +			return this;, +		}, +, +		@Override, +		public Builder cookies(MultiValueMap<String, HttpCookie> cookies) {, +			Assert.notNull(cookies, "'cookies' must not be null");, +			this.cookies = cookies;, +			return this;, +		}, +, +		@Override, +			return new MockServerRequest(this.method, this.uri, this.headers, this.cookies,, +					this.body, this.attributes, this.queryParams, this.pathVariables, this.session,, +			return new MockServerRequest(this.method, this.uri, this.headers, this.cookies, null,, +++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java, +import java.util.Arrays;, +import org.springframework.http.HttpCookie;, +	private final MultiValueMap<String, HttpCookie> cookies;, +, +	private MockServerRequest(HttpMethod method, URI uri, MockHeaders headers,, +			MultiValueMap<String, HttpCookie> cookies, @Nullable Object body,, +		this.cookies = cookies;, +	public MultiValueMap<String, HttpCookie> cookies() {, +		return this.cookies;, +	}, +, +	@Override, +		Builder cookie(HttpCookie... cookies);, +, +		Builder cookies(MultiValueMap<String, HttpCookie> cookies);, +, +		private MultiValueMap<String, HttpCookie> cookies = new LinkedMultiValueMap<>();, +, +		public Builder cookie(HttpCookie... cookies) {, +			Arrays.stream(cookies).forEach(cookie -> this.cookies.add(cookie.getName(), cookie));, +			return this;, +		}, +, +		@Override, +		public Builder cookies(MultiValueMap<String, HttpCookie> cookies) {, +			Assert.notNull(cookies, "'cookies' must not be null");, +			this.cookies = cookies;, +			return this;, +		}, +, +		@Override, +			return new MockServerRequest(this.method, this.uri, this.headers, this.cookies,, +					this.body, this.attributes, this.queryParams, this.pathVariables, this.session,, +			return new MockServerRequest(this.method, this.uri, this.headers, this.cookies, null,, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerRequest.java, +import org.springframework.http.HttpCookie;, +import org.springframework.util.MultiValueMap;, +	public MultiValueMap<String, HttpCookie> cookies() {, +		return request().getCookies();, +	}, +, +	@Override, +++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java, +import java.util.Arrays;, +import org.springframework.http.HttpCookie;, +	private final MultiValueMap<String, HttpCookie> cookies;, +, +	private MockServerRequest(HttpMethod method, URI uri, MockHeaders headers,, +			MultiValueMap<String, HttpCookie> cookies, @Nullable Object body,, +		this.cookies = cookies;, +	public MultiValueMap<String, HttpCookie> cookies() {, +		return this.cookies;, +	}, +, +	@Override, +		Builder cookie(HttpCookie... cookies);, +, +		Builder cookies(MultiValueMap<String, HttpCookie> cookies);, +, +		private MultiValueMap<String, HttpCookie> cookies = new LinkedMultiValueMap<>();, +, +		public Builder cookie(HttpCookie... cookies) {, +			Arrays.stream(cookies).forEach(cookie -> this.cookies.add(cookie.getName(), cookie));, +			return this;]