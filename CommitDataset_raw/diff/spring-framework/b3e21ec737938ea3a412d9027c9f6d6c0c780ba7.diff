[+++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, + * Copyright 2002-2018 the original author or authors., +			catch (IllegalArgumentException ex) {, +			try {, +			catch (IllegalArgumentException ex) {, +				// Invalid Accept-Language format -> store plain header instead, +				doAddHeaderValue(name, value, true);, +			}, +		}, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, + * Copyright 2002-2018 the original author or authors., +			catch (IllegalArgumentException ex) {, +			try {, +			catch (IllegalArgumentException ex) {, +				// Invalid Accept-Language format -> store plain header instead, +				doAddHeaderValue(name, value, true);, +			}, +		}, +++ b/spring-test/src/test/java/org/springframework/mock/web/MockHttpServletRequestTests.java, + * Copyright 2002-2018 the original author or authors., +		assertEquals(contentType, request.getHeader(HttpHeaders.CONTENT_TYPE));, +		assertEquals(contentType, request.getHeader(HttpHeaders.CONTENT_TYPE));, +		request.addHeader(HttpHeaders.CONTENT_TYPE, contentType);, +		assertEquals(contentType, request.getHeader(HttpHeaders.CONTENT_TYPE));, +		request.addHeader(HttpHeaders.CONTENT_TYPE, contentType);, +		assertEquals(contentType, request.getHeader(HttpHeaders.CONTENT_TYPE));, +		request.addHeader(HttpHeaders.CONTENT_TYPE, contentType);, +		assertEquals(contentType, request.getHeader(HttpHeaders.CONTENT_TYPE));, +		assertEquals("test/plain;charset=UTF-8", request.getHeader(HttpHeaders.CONTENT_TYPE));, +		assertEquals("test/plain;charset=UTF-8", request.getHeader(HttpHeaders.CONTENT_TYPE));, +	public void invalidAcceptLanguageHeader() {, +		request.addHeader("Accept-Language", "en_US");, +		assertEquals(Locale.ENGLISH, request.getLocale());, +		assertEquals("en_US", request.getHeader("Accept-Language"));, +	}, +, +	@Test, +		request.addHeader(HttpHeaders.IF_MODIFIED_SINCE, date);, +		assertEquals(date.getTime(), request.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE));, +		request.addHeader(HttpHeaders.IF_MODIFIED_SINCE, timestamp);, +		assertEquals(timestamp, request.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE));, +		request.addHeader(HttpHeaders.IF_MODIFIED_SINCE, "Tue, 21 Jul 2015 10:00:00 GMT");, +		assertEquals(1437472800000L, request.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE));, +		request.addHeader(HttpHeaders.IF_MODIFIED_SINCE, "Tue, 21-Jul-15 10:00:00 GMT");, +		assertEquals(1437472800000L, request.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE));, +		request.addHeader(HttpHeaders.IF_MODIFIED_SINCE, "Tue Jul 21 10:00:00 2015");, +		assertEquals(1437472800000L, request.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE));, +		request.addHeader(HttpHeaders.IF_MODIFIED_SINCE, "This is not a date");, +		request.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE);, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, + * Copyright 2002-2018 the original author or authors., +			catch (IllegalArgumentException ex) {, +			try {, +			catch (IllegalArgumentException ex) {, +				// Invalid Accept-Language format -> store plain header instead, +				doAddHeaderValue(name, value, true);, +			}, +		}, +++ b/spring-test/src/test/java/org/springframework/mock/web/MockHttpServletRequestTests.java, + * Copyright 2002-2018 the original author or authors., +		assertEquals(contentType, request.getHeader(HttpHeaders.CONTENT_TYPE));, +		assertEquals(contentType, request.getHeader(HttpHeaders.CONTENT_TYPE));, +		request.addHeader(HttpHeaders.CONTENT_TYPE, contentType);, +		assertEquals(contentType, request.getHeader(HttpHeaders.CONTENT_TYPE));, +		request.addHeader(HttpHeaders.CONTENT_TYPE, contentType);, +		assertEquals(contentType, request.getHeader(HttpHeaders.CONTENT_TYPE));, +		request.addHeader(HttpHeaders.CONTENT_TYPE, contentType);, +		assertEquals(contentType, request.getHeader(HttpHeaders.CONTENT_TYPE));, +		assertEquals("test/plain;charset=UTF-8", request.getHeader(HttpHeaders.CONTENT_TYPE));, +		assertEquals("test/plain;charset=UTF-8", request.getHeader(HttpHeaders.CONTENT_TYPE));, +	public void invalidAcceptLanguageHeader() {, +		request.addHeader("Accept-Language", "en_US");, +		assertEquals(Locale.ENGLISH, request.getLocale());, +		assertEquals("en_US", request.getHeader("Accept-Language"));, +	}, +, +	@Test, +		request.addHeader(HttpHeaders.IF_MODIFIED_SINCE, date);, +		assertEquals(date.getTime(), request.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE));, +		request.addHeader(HttpHeaders.IF_MODIFIED_SINCE, timestamp);, +		assertEquals(timestamp, request.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE));, +		request.addHeader(HttpHeaders.IF_MODIFIED_SINCE, "Tue, 21 Jul 2015 10:00:00 GMT");, +		assertEquals(1437472800000L, request.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE));, +		request.addHeader(HttpHeaders.IF_MODIFIED_SINCE, "Tue, 21-Jul-15 10:00:00 GMT");, +		assertEquals(1437472800000L, request.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE));, +		request.addHeader(HttpHeaders.IF_MODIFIED_SINCE, "Tue Jul 21 10:00:00 2015");, +		assertEquals(1437472800000L, request.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE));, +		request.addHeader(HttpHeaders.IF_MODIFIED_SINCE, "This is not a date");, +		request.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE);, +++ b/spring-web/src/test/java/org/springframework/mock/web/test/MockHttpServletRequest.java, + * Copyright 2002-2018 the original author or authors., +			catch (IllegalArgumentException ex) {, +			try {, +			catch (IllegalArgumentException ex) {, +				// Invalid Accept-Language format -> store plain header instead, +				doAddHeaderValue(name, value, true);, +			}, +		}]