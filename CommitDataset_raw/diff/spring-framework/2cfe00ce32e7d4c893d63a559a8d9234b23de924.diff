[+++ b/src/asciidoc/data-access.adoc, +	<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">, +	<bean id="txManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">, +converting them to a set of focused runtime exceptions (the same is true for JDO and, +JPA exceptions). This allows one to handle most persistence exceptions, which are, +non-recoverable, only in the appropriate layers, without having annoying boilerplate, +catch-and-throw blocks and exception declarations in one's DAOs. (One can still trap, +and handle exceptions anywhere one needs to though.) As mentioned above, JDBC, +We will start with a coverage of http://www.hibernate.org/[Hibernate 5] in a Spring, +As of Spring 4.0, Spring requires Hibernate 3.6 or later. We recommend Hibernate 5.0+., +		<bean id="mySessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">, +==== Implementing DAOs based on plain Hibernate API, +Hibernate has a feature called contextual sessions, wherein Hibernate itself manages, +In summary: you can implement DAOs based on the plain Hibernate API, while still being, +				class="org.springframework.orm.hibernate5.HibernateTransactionManager">, +				class="org.springframework.orm.hibernate5.HibernateTransactionManager">, +		<bean id="myTxManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">, +				class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">, +				class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">, +++ b/src/asciidoc/data-access.adoc, +	<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">, +	<bean id="txManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">, +converting them to a set of focused runtime exceptions (the same is true for JDO and, +JPA exceptions). This allows one to handle most persistence exceptions, which are, +non-recoverable, only in the appropriate layers, without having annoying boilerplate, +catch-and-throw blocks and exception declarations in one's DAOs. (One can still trap, +and handle exceptions anywhere one needs to though.) As mentioned above, JDBC, +We will start with a coverage of http://www.hibernate.org/[Hibernate 5] in a Spring, +As of Spring 4.0, Spring requires Hibernate 3.6 or later. We recommend Hibernate 5.0+., +		<bean id="mySessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">, +==== Implementing DAOs based on plain Hibernate API, +Hibernate has a feature called contextual sessions, wherein Hibernate itself manages, +In summary: you can implement DAOs based on the plain Hibernate API, while still being, +				class="org.springframework.orm.hibernate5.HibernateTransactionManager">, +				class="org.springframework.orm.hibernate5.HibernateTransactionManager">, +		<bean id="myTxManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">, +				class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">, +				class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">, +++ b/src/asciidoc/testing.adoc, +		<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">]