[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, + * Copyright 2002-2017 the original author or authors., +	private volatile ResolvableType resolvableType;, +, +		if (this.resolvableType == null) {, +			this.resolvableType = (this.field != null ?, +					ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :, +		return this.resolvableType;, +	}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, + * Copyright 2002-2017 the original author or authors., +	private volatile ResolvableType resolvableType;, +, +		if (this.resolvableType == null) {, +			this.resolvableType = (this.field != null ?, +					ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :, +		return this.resolvableType;, +	}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/ListFactoryBean.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.core.ResolvableType;, +			valueType = ResolvableType.forClass(this.targetListClass).asCollection().resolveGeneric();, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, + * Copyright 2002-2017 the original author or authors., +	private volatile ResolvableType resolvableType;, +, +		if (this.resolvableType == null) {, +			this.resolvableType = (this.field != null ?, +					ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :, +		return this.resolvableType;, +	}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/ListFactoryBean.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.core.ResolvableType;, +			valueType = ResolvableType.forClass(this.targetListClass).asCollection().resolveGeneric();, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/MapFactoryBean.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.core.ResolvableType;, +			ResolvableType mapType = ResolvableType.forClass(this.targetMapClass).asMap();, +			keyType = mapType.resolveGeneric(0);, +			valueType = mapType.resolveGeneric(1);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, + * Copyright 2002-2017 the original author or authors., +	private volatile ResolvableType resolvableType;, +, +		if (this.resolvableType == null) {, +			this.resolvableType = (this.field != null ?, +					ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :, +		return this.resolvableType;, +	}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/ListFactoryBean.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.core.ResolvableType;, +			valueType = ResolvableType.forClass(this.targetListClass).asCollection().resolveGeneric();, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/MapFactoryBean.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.core.ResolvableType;, +			ResolvableType mapType = ResolvableType.forClass(this.targetMapClass).asMap();, +			keyType = mapType.resolveGeneric(0);, +			valueType = mapType.resolveGeneric(1);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/SetFactoryBean.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.core.ResolvableType;, +			valueType = ResolvableType.forClass(this.targetSetClass).asCollection().resolveGeneric();, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, + * Copyright 2002-2017 the original author or authors., +	private volatile ResolvableType resolvableType;, +, +		if (this.resolvableType == null) {, +			this.resolvableType = (this.field != null ?, +					ResolvableType.forField(this.field, this.nestingLevel, this.containingClass) :, +		return this.resolvableType;, +	}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/ListFactoryBean.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.core.ResolvableType;, +			valueType = ResolvableType.forClass(this.targetListClass).asCollection().resolveGeneric();, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/MapFactoryBean.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.core.ResolvableType;, +			ResolvableType mapType = ResolvableType.forClass(this.targetMapClass).asMap();, +			keyType = mapType.resolveGeneric(0);, +			valueType = mapType.resolveGeneric(1);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/SetFactoryBean.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.core.ResolvableType;, +			valueType = ResolvableType.forClass(this.targetSetClass).asCollection().resolveGeneric();, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +			ResolvableType resolvableType = descriptor.getResolvableType();, +			Class<?> resolvedArrayType = resolvableType.resolve();, +			if (resolvedArrayType != null && resolvedArrayType != type) {, +				type = resolvedArrayType;, +				componentType = resolvableType.getComponentType().resolve();, +			}, +			if (componentType == null) {, +				return null;, +			}, +			Class<?> elementType = descriptor.getResolvableType().asCollection().resolveGeneric();, +			ResolvableType mapType = descriptor.getResolvableType().asMap();, +			Class<?> keyType = mapType.resolveGeneric(0);]