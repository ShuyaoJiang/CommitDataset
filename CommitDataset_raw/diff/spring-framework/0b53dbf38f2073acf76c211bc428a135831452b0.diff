[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +				registrar.registerBeanDefinitions(metadata, this.registry, this.importBeanNameGenerator));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +				registrar.registerBeanDefinitions(metadata, this.registry, this.importBeanNameGenerator));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ImportBeanDefinitionRegistrar.java, +import org.springframework.beans.factory.support.BeanNameGenerator;, + * @author Juergen Hoeller, +	 * <p>The default implementation delegates to, +	 * {@link #registerBeanDefinitions(AnnotationMetadata, BeanDefinitionRegistry)}., +	 * @param importingClassMetadata annotation metadata of the importing class, +	 * @param registry current bean definition registry, +	 * @param importBeanNameGenerator the configuration-level bean name generator, +	 * strategy for imported beans, +	 * @since 5.2, +	 */, +	default void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry,, +			BeanNameGenerator importBeanNameGenerator) {, +, +		registerBeanDefinitions(importingClassMetadata, registry);, +	}, +, +	/**, +	 * Register bean definitions as necessary based on the given annotation metadata of, +	 * the importing {@code @Configuration} class., +	 * <p>Note that {@link BeanDefinitionRegistryPostProcessor} types may <em>not</em> be, +	 * registered here, due to lifecycle constraints related to {@code @Configuration}, +	 * class processing., +	 * <p>The default implementation is empty., +	default void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {, +	}]