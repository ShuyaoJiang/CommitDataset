[+++ b/build.gradle, +	ext.tomcatVersion        = "8.0.15", +	ext.undertowVersion      = "1.1.1.Final", +++ b/build.gradle, +	ext.tomcatVersion        = "8.0.15", +	ext.undertowVersion      = "1.1.1.Final", +++ b/spring-core/src/main/java/org/springframework/util/AlternativeJdkIdGenerator.java, + * An {@link org.springframework.util.IdGenerator IdGenerator} that uses, + * {@link SecureRandom} for the initial seed and {@link Random} thereafter, + * instead of calling {@link UUID#randomUUID()} every time as, + * {@link org.springframework.util.JdkIdGenerator JdkIdGenerator} does., + * This provides a better balance between securely random id's and performance., +++ b/build.gradle, +	ext.tomcatVersion        = "8.0.15", +	ext.undertowVersion      = "1.1.1.Final", +++ b/spring-core/src/main/java/org/springframework/util/AlternativeJdkIdGenerator.java, + * An {@link org.springframework.util.IdGenerator IdGenerator} that uses, + * {@link SecureRandom} for the initial seed and {@link Random} thereafter, + * instead of calling {@link UUID#randomUUID()} every time as, + * {@link org.springframework.util.JdkIdGenerator JdkIdGenerator} does., + * This provides a better balance between securely random id's and performance., +++ b/spring-core/src/main/java/org/springframework/util/JdkIdGenerator.java, + * An {@link org.springframework.util.IdGenerator IdGenerator} that calls, + * {@link java.util.UUID#randomUUID()}., + * @since 4.2, +++ b/build.gradle, +	ext.tomcatVersion        = "8.0.15", +	ext.undertowVersion      = "1.1.1.Final", +++ b/spring-core/src/main/java/org/springframework/util/AlternativeJdkIdGenerator.java, + * An {@link org.springframework.util.IdGenerator IdGenerator} that uses, + * {@link SecureRandom} for the initial seed and {@link Random} thereafter, + * instead of calling {@link UUID#randomUUID()} every time as, + * {@link org.springframework.util.JdkIdGenerator JdkIdGenerator} does., + * This provides a better balance between securely random id's and performance., +++ b/spring-core/src/main/java/org/springframework/util/JdkIdGenerator.java, + * An {@link org.springframework.util.IdGenerator IdGenerator} that calls, + * {@link java.util.UUID#randomUUID()}., + * @since 4.2, +++ b/spring-core/src/main/java/org/springframework/util/SimpleIdGenerator.java, + * A simple {@link org.springframework.util.IdGenerator IdGenerator} that, + * starts at 1 and increments by 1 with each call., + * @since 4.2, +++ b/build.gradle, +	ext.tomcatVersion        = "8.0.15", +	ext.undertowVersion      = "1.1.1.Final", +++ b/spring-core/src/main/java/org/springframework/util/AlternativeJdkIdGenerator.java, + * An {@link org.springframework.util.IdGenerator IdGenerator} that uses, + * {@link SecureRandom} for the initial seed and {@link Random} thereafter, + * instead of calling {@link UUID#randomUUID()} every time as, + * {@link org.springframework.util.JdkIdGenerator JdkIdGenerator} does., + * This provides a better balance between securely random id's and performance., +++ b/spring-core/src/main/java/org/springframework/util/JdkIdGenerator.java, + * An {@link org.springframework.util.IdGenerator IdGenerator} that calls, + * {@link java.util.UUID#randomUUID()}., + * @since 4.2, +++ b/spring-core/src/main/java/org/springframework/util/SimpleIdGenerator.java, + * A simple {@link org.springframework.util.IdGenerator IdGenerator} that, + * starts at 1 and increments by 1 with each call., + * @since 4.2, +++ b/spring-web/src/main/java/org/springframework/web/client/MessageBodyClientHttpResponseWrapper.java, + * Implementation of {@link ClientHttpResponse} that can not only check if the response, + * has a message body, but also if its length is 0 (i.e. empty) by actually reading the input stream., +	private final ClientHttpResponse response;, +	 *, +	 *, +	 *, +	 *, +			int b = pushbackInputStream.read();, +				pushbackInputStream.unread(b);, +		return response.getStatusCode();, +		return response.getRawStatusCode();, +		return response.getStatusText();, +		response.close();, +	@Override, +	public InputStream getBody() throws IOException {, +		return this.pushbackInputStream != null ? this.pushbackInputStream : response.getBody();, +	}, +, +	@Override, +	public HttpHeaders getHeaders() {, +		return response.getHeaders();, +	}, +++ b/build.gradle, +	ext.tomcatVersion        = "8.0.15", +	ext.undertowVersion      = "1.1.1.Final", +++ b/spring-core/src/main/java/org/springframework/util/AlternativeJdkIdGenerator.java, + * An {@link org.springframework.util.IdGenerator IdGenerator} that uses, + * {@link SecureRandom} for the initial seed and {@link Random} thereafter, + * instead of calling {@link UUID#randomUUID()} every time as, + * {@link org.springframework.util.JdkIdGenerator JdkIdGenerator} does., + * This provides a better balance between securely random id's and performance., +++ b/spring-core/src/main/java/org/springframework/util/JdkIdGenerator.java, + * An {@link org.springframework.util.IdGenerator IdGenerator} that calls, + * {@link java.util.UUID#randomUUID()}., + * @since 4.2, +++ b/spring-core/src/main/java/org/springframework/util/SimpleIdGenerator.java, + * A simple {@link org.springframework.util.IdGenerator IdGenerator} that, + * starts at 1 and increments by 1 with each call., + * @since 4.2, +++ b/spring-web/src/main/java/org/springframework/web/client/MessageBodyClientHttpResponseWrapper.java]