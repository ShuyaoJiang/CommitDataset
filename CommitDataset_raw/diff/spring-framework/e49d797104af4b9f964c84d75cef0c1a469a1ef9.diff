[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/HttpMessageWriterView.java, + * Copyright 2002-2017 the original author or authors., +import java.util.Optional;, +import java.util.stream.Collectors;, + * {@code View} that writes model attribute(s) with an {@link HttpMessageWriter}., +	private final HttpMessageWriter<?> writer;, +	private final boolean canWriteMap;, +	 * Constructor with an {@code Encoder}., +	 * Constructor with a fully initialized {@link HttpMessageWriter}., +	public HttpMessageWriterView(HttpMessageWriter<?> writer) {, +		Assert.notNull(writer, "'writer' is required.");, +		this.writer = writer;, +		this.canWriteMap = writer.canWrite(ResolvableType.forClass(Map.class), null);, +	 * Return the configured message writer., +		return this.writer;, +	 * {@inheritDoc}, +	 * <p>The implementation of this method for {@link HttpMessageWriterView}, +	 * delegates to {@link HttpMessageWriter#getWritableMediaTypes()}., +	 */, +	@Override, +	public List<MediaType> getSupportedMediaTypes() {, +		return this.writer.getWritableMediaTypes();, +	}, +, +	/**, +	 * Set the attributes in the model that should be rendered by this view., +	 * When set, all other model attributes will be ignored. The matching, +	 * attributes are further narrowed with {@link HttpMessageWriter#canWrite}., +	 * The matching attributes are processed as follows:, +	 * <ul>, +	 * <li>0: nothing is written to the response body., +	 * <li>1: the matching attribute is passed to the writer., +	 * <li>2..N: if the writer supports {@link Map}, write all matches;, +	 * otherwise raise an {@link IllegalStateException}., +	 * </ul>, +	public Mono<Void> render(Map<String, ?> model, MediaType contentType, ServerWebExchange exchange) {, +		return getObjectToRender(model), +				.map(value -> {, +					Publisher stream = Mono.justOrEmpty(value);, +					return this.writer.write(stream, type, contentType, response, Collections.emptyMap());, +				}), +				.orElseGet(() -> exchange.getResponse().setComplete());, +	}, +, +	private Optional<Object> getObjectToRender(Map<String, ?> model) {, +, +		Map<String, ?> result = model.entrySet().stream(), +				.filter(this::isMatch), +				.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));, +, +		if (result.isEmpty()) {, +			return Optional.empty();, +		}, +		else if (result.size() == 1) {, +			return Optional.of(result.values().iterator().next());, +		}, +		else if (this.canWriteMap) {, +			return Optional.of(result);, +		}, +		else {, +			throw new IllegalStateException("Multiple matches found: " + result + " but " +, +					"Map rendering is not supported by " + getMessageWriter().getClass().getName());, +		}, +	}, +, +	private boolean isMatch(Map.Entry<String, ?> entry) {, +		if (entry.getValue() == null) {, +			return false;, +		}, +		if (!getModelKeys().isEmpty() && !getModelKeys().contains(entry.getKey())) {, +			return false;, +		}, +		ResolvableType type = ResolvableType.forInstance(entry.getValue());, +		return getMessageWriter().canWrite(type, null);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/HttpMessageWriterView.java, + * Copyright 2002-2017 the original author or authors., +import java.util.Optional;, +import java.util.stream.Collectors;, + * {@code View} that writes model attribute(s) with an {@link HttpMessageWriter}., +	private final HttpMessageWriter<?> writer;, +	private final boolean canWriteMap;, +	 * Constructor with an {@code Encoder}., +	 * Constructor with a fully initialized {@link HttpMessageWriter}., +	public HttpMessageWriterView(HttpMessageWriter<?> writer) {, +		Assert.notNull(writer, "'writer' is required.");, +		this.writer = writer;, +		this.canWriteMap = writer.canWrite(ResolvableType.forClass(Map.class), null);, +	 * Return the configured message writer., +		return this.writer;, +	 * {@inheritDoc}, +	 * <p>The implementation of this method for {@link HttpMessageWriterView}, +	 * delegates to {@link HttpMessageWriter#getWritableMediaTypes()}., +	 */, +	@Override, +	public List<MediaType> getSupportedMediaTypes() {, +		return this.writer.getWritableMediaTypes();, +	}, +, +	/**, +	 * Set the attributes in the model that should be rendered by this view.]