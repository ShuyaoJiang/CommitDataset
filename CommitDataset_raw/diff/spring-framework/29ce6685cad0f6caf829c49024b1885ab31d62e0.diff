[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java, +	/** Should we set the status to 500 for unhandled failures? */, +	private boolean shouldHandleFailure = false;, +, +	 * Whether to handle failures wth {@code response.sendError(500)} as opposed, +	 * to letting them propagate to the container which may log a stacktrace, +	 * even if an error dispatch (e.g. Spring Boot app) handles the exception., +	 * @param shouldHandleFailure whether to handle failures or propagate, +	 * @since 5.1, +	 */, +	public void setShouldHandleFailure(boolean shouldHandleFailure) {, +		this.shouldHandleFailure = shouldHandleFailure;, +	}, +, +	/**, +			if (!handleFailure(request, response, ex)) {, +		}, +			if (!handleFailure(request, response, ex)) {, +		}, +	private boolean handleFailure(HttpServletRequest request, HttpServletResponse response, Throwable ex) {, +		if (this.shouldHandleFailure) {, +			try {, +				response.sendError(500);, +			}, +			catch (IOException ex2) {, +				if (logger.isDebugEnabled()) {, +					logger.debug("Handling of failure failed: " + ex2);, +				}, +				return false;, +			}, +			request.setAttribute(WebUtils.ERROR_STATUS_CODE_ATTRIBUTE, 500);, +			WebUtils.exposeErrorRequestAttributes(request, ex, getServletName());, +			return true;, +		}, +		return false;, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java, +	/** Should we set the status to 500 for unhandled failures? */, +	private boolean shouldHandleFailure = false;, +, +	 * Whether to handle failures wth {@code response.sendError(500)} as opposed, +	 * to letting them propagate to the container which may log a stacktrace, +	 * even if an error dispatch (e.g. Spring Boot app) handles the exception., +	 * @param shouldHandleFailure whether to handle failures or propagate, +	 * @since 5.1, +	 */, +	public void setShouldHandleFailure(boolean shouldHandleFailure) {, +		this.shouldHandleFailure = shouldHandleFailure;, +	}, +, +	/**, +			if (!handleFailure(request, response, ex)) {, +		}, +			if (!handleFailure(request, response, ex)) {, +		}, +	private boolean handleFailure(HttpServletRequest request, HttpServletResponse response, Throwable ex) {, +		if (this.shouldHandleFailure) {, +			try {, +				response.sendError(500);, +			}, +			catch (IOException ex2) {, +				if (logger.isDebugEnabled()) {, +					logger.debug("Handling of failure failed: " + ex2);, +				}, +				return false;, +			}, +			request.setAttribute(WebUtils.ERROR_STATUS_CODE_ATTRIBUTE, 500);, +			WebUtils.exposeErrorRequestAttributes(request, ex, getServletName());, +			return true;, +		}, +		return false;, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +							logger.debug("Writing [" + formatValue(body) + "]");, +	static String formatValue(Object body) {, +		return (body instanceof CharSequence ? "\"" + body + "\"" : body.toString());, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java, +	/** Should we set the status to 500 for unhandled failures? */, +	private boolean shouldHandleFailure = false;, +, +	 * Whether to handle failures wth {@code response.sendError(500)} as opposed, +	 * to letting them propagate to the container which may log a stacktrace, +	 * even if an error dispatch (e.g. Spring Boot app) handles the exception., +	 * @param shouldHandleFailure whether to handle failures or propagate, +	 * @since 5.1, +	 */, +	public void setShouldHandleFailure(boolean shouldHandleFailure) {, +		this.shouldHandleFailure = shouldHandleFailure;, +	}, +, +	/**, +			if (!handleFailure(request, response, ex)) {, +		}, +			if (!handleFailure(request, response, ex)) {, +		}, +	private boolean handleFailure(HttpServletRequest request, HttpServletResponse response, Throwable ex) {]