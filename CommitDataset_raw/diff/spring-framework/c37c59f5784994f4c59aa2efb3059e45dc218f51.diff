[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/AbstractMockServerSpec.java, +		builder.filters(currentFilters -> {, +			List<WebFilter> toPrepend = new ArrayList<>(this.filters);, +			Collections.reverse(toPrepend);, +			toPrepend.forEach(filter -> currentFilters.add(0, filter));, +		});, +	 * Sub-classes must create an {@code WebHttpHandlerBuilder} that will then, +	 * be used to create the HttpHandler for the mock server., +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/AbstractMockServerSpec.java, +		builder.filters(currentFilters -> {, +			List<WebFilter> toPrepend = new ArrayList<>(this.filters);, +			Collections.reverse(toPrepend);, +			toPrepend.forEach(filter -> currentFilters.add(0, filter));, +		});, +	 * Sub-classes must create an {@code WebHttpHandlerBuilder} that will then, +	 * be used to create the HttpHandler for the mock server., +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultMockServerSpec.java, + * Simple extension of {@link AbstractMockServerSpec} that is given a target, + * {@link WebHandler}., +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/AbstractMockServerSpec.java, +		builder.filters(currentFilters -> {, +			List<WebFilter> toPrepend = new ArrayList<>(this.filters);, +			Collections.reverse(toPrepend);, +			toPrepend.forEach(filter -> currentFilters.add(0, filter));, +		});, +	 * Sub-classes must create an {@code WebHttpHandlerBuilder} that will then, +	 * be used to create the HttpHandler for the mock server., +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultMockServerSpec.java, + * Simple extension of {@link AbstractMockServerSpec} that is given a target, + * {@link WebHandler}., +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/WebHttpHandlerBuilder.java, +import java.util.Collections;, +import java.util.function.Consumer;, +		builder.filters(filters -> filters.addAll(container.getFilters()));, +		builder.exceptionHandlers(handlers -> handlers.addAll(container.getExceptionHandlers()));, +	 * @param filters the filter(s) to add that's, +	 */, +	 * Manipulate the "live" list of currently configured filters., +	 * @param consumer the consumer to use, +	public WebHttpHandlerBuilder filters(Consumer<List<WebFilter>> consumer) {, +		consumer.accept(this.filters);, +	 * Manipulate the "live" list of currently configured exception handlers., +	 * @param consumer the consumer to use, +	public WebHttpHandlerBuilder exceptionHandlers(Consumer<List<WebExceptionHandler>> consumer) {, +		consumer.accept(this.exceptionHandlers);, +		private List<WebFilter> filters = Collections.emptyList();, +		private List<WebExceptionHandler> exceptionHandlers = Collections.emptyList();, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/AbstractMockServerSpec.java, +		builder.filters(currentFilters -> {, +			List<WebFilter> toPrepend = new ArrayList<>(this.filters);, +			Collections.reverse(toPrepend);, +			toPrepend.forEach(filter -> currentFilters.add(0, filter));, +		});, +	 * Sub-classes must create an {@code WebHttpHandlerBuilder} that will then, +	 * be used to create the HttpHandler for the mock server., +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultMockServerSpec.java, + * Simple extension of {@link AbstractMockServerSpec} that is given a target, + * {@link WebHandler}., +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/WebHttpHandlerBuilder.java, +import java.util.Collections;, +import java.util.function.Consumer;, +		builder.filters(filters -> filters.addAll(container.getFilters()));, +		builder.exceptionHandlers(handlers -> handlers.addAll(container.getExceptionHandlers()));, +	 * @param filters the filter(s) to add that's, +	 */, +	 * Manipulate the "live" list of currently configured filters., +	 * @param consumer the consumer to use, +	public WebHttpHandlerBuilder filters(Consumer<List<WebFilter>> consumer) {, +		consumer.accept(this.filters);, +	 * Manipulate the "live" list of currently configured exception handlers., +	 * @param consumer the consumer to use, +	public WebHttpHandlerBuilder exceptionHandlers(Consumer<List<WebExceptionHandler>> consumer) {, +		consumer.accept(this.exceptionHandlers);, +		private List<WebFilter> filters = Collections.emptyList();, +		private List<WebExceptionHandler> exceptionHandlers = Collections.emptyList();, +++ b/spring-web/src/test/java/org/springframework/web/server/adapter/WebHttpHandlerBuilderTests.java, +import static java.time.Duration.ofMillis;, +import static org.junit.Assert.assertEquals;, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/AbstractMockServerSpec.java, +		builder.filters(currentFilters -> {, +			List<WebFilter> toPrepend = new ArrayList<>(this.filters);, +			Collections.reverse(toPrepend);, +			toPrepend.forEach(filter -> currentFilters.add(0, filter));, +		});, +	 * Sub-classes must create an {@code WebHttpHandlerBuilder} that will then, +	 * be used to create the HttpHandler for the mock server., +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultMockServerSpec.java, + * Simple extension of {@link AbstractMockServerSpec} that is given a target, + * {@link WebHandler}., +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/WebHttpHandlerBuilder.java, +import java.util.Collections;, +import java.util.function.Consumer;, +		builder.filters(filters -> filters.addAll(container.getFilters()));, +		builder.exceptionHandlers(handlers -> handlers.addAll(container.getExceptionHandlers()));, +	 * @param filters the filter(s) to add that's, +	 */, +	 * Manipulate the "live" list of currently configured filters., +	 * @param consumer the consumer to use, +	public WebHttpHandlerBuilder filters(Consumer<List<WebFilter>> consumer) {, +		consumer.accept(this.filters);]