[+++ b/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequest.java, + * @author Brian Clozel, +		String authority = this.uri.getRawAuthority();, +		String path = this.uri.toString().substring(this.uri.toString().indexOf(authority) + authority.length());, +				HttpVersion.HTTP_1_1, nettyMethod, path, this.body.buffer());, +		if (this.body.buffer().readableBytes() > 0) {, +			nettyRequest.headers().set(HttpHeaders.CONTENT_LENGTH, this.body.buffer().readableBytes());, +		}, +++ b/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequest.java, + * @author Brian Clozel, +		String authority = this.uri.getRawAuthority();, +		String path = this.uri.toString().substring(this.uri.toString().indexOf(authority) + authority.length());, +				HttpVersion.HTTP_1_1, nettyMethod, path, this.body.buffer());, +		if (this.body.buffer().readableBytes() > 0) {, +			nettyRequest.headers().set(HttpHeaders.CONTENT_LENGTH, this.body.buffer().readableBytes());, +		}, +++ b/spring-web/src/test/java/org/springframework/http/client/AbstractAsyncHttpRequestFactoryTestCase.java, +public abstract class AbstractAsyncHttpRequestFactoryTestCase extends AbstractMockWebServerTestCase {, +++ b/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequest.java, + * @author Brian Clozel, +		String authority = this.uri.getRawAuthority();, +		String path = this.uri.toString().substring(this.uri.toString().indexOf(authority) + authority.length());, +				HttpVersion.HTTP_1_1, nettyMethod, path, this.body.buffer());, +		if (this.body.buffer().readableBytes() > 0) {, +			nettyRequest.headers().set(HttpHeaders.CONTENT_LENGTH, this.body.buffer().readableBytes());, +		}, +++ b/spring-web/src/test/java/org/springframework/http/client/AbstractAsyncHttpRequestFactoryTestCase.java, +public abstract class AbstractAsyncHttpRequestFactoryTestCase extends AbstractMockWebServerTestCase {, +++ b/spring-web/src/test/java/org/springframework/http/client/AbstractHttpRequestFactoryTestCase.java, +public abstract class AbstractHttpRequestFactoryTestCase extends AbstractMockWebServerTestCase {, +					outputStream.flush();, +					outputStream.close();, +++ b/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequest.java, + * @author Brian Clozel, +		String authority = this.uri.getRawAuthority();, +		String path = this.uri.toString().substring(this.uri.toString().indexOf(authority) + authority.length());, +				HttpVersion.HTTP_1_1, nettyMethod, path, this.body.buffer());, +		if (this.body.buffer().readableBytes() > 0) {, +			nettyRequest.headers().set(HttpHeaders.CONTENT_LENGTH, this.body.buffer().readableBytes());, +		}, +++ b/spring-web/src/test/java/org/springframework/http/client/AbstractAsyncHttpRequestFactoryTestCase.java, +public abstract class AbstractAsyncHttpRequestFactoryTestCase extends AbstractMockWebServerTestCase {, +++ b/spring-web/src/test/java/org/springframework/http/client/AbstractHttpRequestFactoryTestCase.java, +public abstract class AbstractHttpRequestFactoryTestCase extends AbstractMockWebServerTestCase {, +					outputStream.flush();, +					outputStream.close();, +++ /dev/null, +++ b/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequest.java, + * @author Brian Clozel, +		String authority = this.uri.getRawAuthority();, +		String path = this.uri.toString().substring(this.uri.toString().indexOf(authority) + authority.length());, +				HttpVersion.HTTP_1_1, nettyMethod, path, this.body.buffer());, +		if (this.body.buffer().readableBytes() > 0) {, +			nettyRequest.headers().set(HttpHeaders.CONTENT_LENGTH, this.body.buffer().readableBytes());, +		}, +++ b/spring-web/src/test/java/org/springframework/http/client/AbstractAsyncHttpRequestFactoryTestCase.java, +public abstract class AbstractAsyncHttpRequestFactoryTestCase extends AbstractMockWebServerTestCase {, +++ b/spring-web/src/test/java/org/springframework/http/client/AbstractHttpRequestFactoryTestCase.java, +public abstract class AbstractHttpRequestFactoryTestCase extends AbstractMockWebServerTestCase {, +					outputStream.flush();, +					outputStream.close();, +++ /dev/null, +++ b/spring-web/src/test/java/org/springframework/http/client/AbstractMockWebServerTestCase.java, +package org.springframework.http.client;, +, +import java.util.Collections;, +, +import okhttp3.mockwebserver.Dispatcher;, +import okhttp3.mockwebserver.MockResponse;, +import okhttp3.mockwebserver.MockWebServer;, +import okhttp3.mockwebserver.RecordedRequest;, +import org.hamcrest.Matchers;, +import org.junit.After;, +import org.junit.Before;, +, +import org.springframework.http.MediaType;, +import org.springframework.util.StringUtils;, +, +import static org.hamcrest.MatcherAssert.assertThat;, +, +/**, + * @author Brian Clozel, + */, +public class AbstractMockWebServerTestCase {, +, +	private MockWebServer server;, +, +	protected int port;, +, +	protected String baseUrl;, +, +	protected static final MediaType textContentType =, +			new MediaType("text", "plain", Collections.singletonMap("charset", "UTF-8"));, +, +	@Before, +	public void setUp() throws Exception {, +		this.server = new MockWebServer();, +		this.server.setDispatcher(new TestDispatcher());, +		this.server.start();, +		this.port = this.server.getPort();]