[+++ b/spring-context/src/main/java/org/springframework/context/event/EventListener.java, + * If an annotated method supports multiple event types, this annotation, + * may refer to one or more supported event types using the {@code classes}, + * attribute. See the {@link #classes} javadoc for further details., + * <p>Processing of {@code @EventListener} annotations is performed via, + * the internal {@link EventListenerMethodProcessor} bean which gets, + * registered automatically when using Java config or manually via the, + * {@code <context:annotation-config/>} or {@code <context:component-scan/>}, + * <p>Annotated methods may have a non-{@code void} return type. When they, + * do, the result of the method invocation is sent as a new event. If the, + * return type is either an array or a collection, each element is sent, + * as a new individual event., + * <p>It is also possible to define the order in which listeners for a, + * certain event are to be invoked. To do so, add Spring's common, + * alongside this event listener annotation., + * <p>While it is possible for an event listener to declare that it, + * throws arbitrary exception types, any checked exceptions thrown, + * from an event listener will be wrapped in an, + * {@link java.lang.reflect.UndeclaredThrowableException}, + * since the event publisher can only handle runtime exceptions., +	 * <p>If this attribute is specified with a single value, the, +	 * annotated method may optionally accept a single parameter., +	 * However, if this attribute is specified with multiple values,, +	 * the annotated method must <em>not</em> declare any parameters., +	 * Spring Expression Language (SpEL) attribute used for making the, +	 * event handling conditional.]