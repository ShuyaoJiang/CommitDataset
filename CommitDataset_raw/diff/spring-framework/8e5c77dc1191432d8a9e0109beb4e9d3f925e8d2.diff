[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionValueResolver.java, +		else if (value instanceof String[]) {, +			String[] values = (String[]) value;, +			Object[] resolvedValues = new Object[values.length];, +			for (int i = 0; i < values.length; i++) {, +				resolvedValues[i] = evaluate(values[i]);, +			}, +			return resolvedValues;, +		}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionValueResolver.java, +		else if (value instanceof String[]) {, +			String[] values = (String[]) value;, +			Object[] resolvedValues = new Object[values.length];, +			for (int i = 0; i < values.length; i++) {, +				resolvedValues[i] = evaluate(values[i]);, +			}, +			return resolvedValues;, +		}, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java, +import org.mockito.Matchers;, +import org.springframework.beans.factory.config.BeanExpressionContext;, +import org.springframework.beans.factory.config.BeanExpressionResolver;, +import org.springframework.beans.factory.config.PropertiesFactoryBean;, +	public void testExpressionInStringArray() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		BeanExpressionResolver beanExpressionResolver = mock(BeanExpressionResolver.class);, +		when(beanExpressionResolver.evaluate(eq("#{foo}"), Matchers.any(BeanExpressionContext.class))), +				.thenReturn("classpath:/org/springframework/beans/factory/xml/util.properties");, +		bf.setBeanExpressionResolver(beanExpressionResolver);, +, +		RootBeanDefinition rbd = new RootBeanDefinition(PropertiesFactoryBean.class);, +		MutablePropertyValues pvs = new MutablePropertyValues();, +		pvs.add("locations", new String[]{"#{foo}"});, +		rbd.setPropertyValues(pvs);, +		bf.registerBeanDefinition("myProperties", rbd);, +		Properties properties = (Properties) bf.getBean("myProperties");, +		assertEquals("bar", properties.getProperty("foo"));, +	}, +, +	@Test]