[+++ b/spring-context/src/main/resources/org/springframework/context/config/spring-context.xsd, +    "annotation" indicates an annotation to be present or meta-present at the type level in target components;, +++ b/spring-context/src/main/resources/org/springframework/context/config/spring-context.xsd, +    "annotation" indicates an annotation to be present or meta-present at the type level in target components;, +++ b/spring-core/src/main/java/org/springframework/core/type/filter/AnnotationTypeFilter.java, + * Copyright 2002-2019 the original author or authors., + * A simple {@link TypeFilter} which matches classes with a given annotation,, + * <p>By default, the matching logic mirrors that of, + * {@link AnnotationUtils#getAnnotation(java.lang.reflect.AnnotatedElement, Class)},, + * supporting annotations that are <em>present</em> or <em>meta-present</em> for a, + * single level of meta-annotations. The search for meta-annotations my be disabled., + * Similarly, the search for annotations on interfaces may optionally be enabled., + * Consult the various constructors in this class for details., + * @author Sam Brannen, +	 * Create a new {@code AnnotationTypeFilter} for the given annotation type., +	 * <p>The filter will also match meta-annotations. To disable the, +	 * '{@code considerMetaAnnotations}' argument., +	 * <p>The filter will not match interfaces., +	 * Create a new {@code AnnotationTypeFilter} for the given annotation type., +	 * <p>The filter will not match interfaces., +	 * Create a new {@code AnnotationTypeFilter} for the given annotation type., +++ b/spring-context/src/main/resources/org/springframework/context/config/spring-context.xsd, +    "annotation" indicates an annotation to be present or meta-present at the type level in target components;, +++ b/spring-core/src/main/java/org/springframework/core/type/filter/AnnotationTypeFilter.java, + * Copyright 2002-2019 the original author or authors., + * A simple {@link TypeFilter} which matches classes with a given annotation,, + * <p>By default, the matching logic mirrors that of, + * {@link AnnotationUtils#getAnnotation(java.lang.reflect.AnnotatedElement, Class)},, + * supporting annotations that are <em>present</em> or <em>meta-present</em> for a, + * single level of meta-annotations. The search for meta-annotations my be disabled., + * Similarly, the search for annotations on interfaces may optionally be enabled., + * Consult the various constructors in this class for details., + * @author Sam Brannen, +	 * Create a new {@code AnnotationTypeFilter} for the given annotation type., +	 * <p>The filter will also match meta-annotations. To disable the, +	 * '{@code considerMetaAnnotations}' argument., +	 * <p>The filter will not match interfaces., +	 * Create a new {@code AnnotationTypeFilter} for the given annotation type., +	 * <p>The filter will not match interfaces., +	 * Create a new {@code AnnotationTypeFilter} for the given annotation type., +++ b/src/docs/asciidoc/core/core-beans.adoc, +`CommonAnnotationBeanPostProcessor` by including the `annotation-config` attribute, +By default, classes annotated with `@Component`, `@Repository`, `@Service`, `@Controller`,, +`@Configuration`, or a custom annotation that itself is annotated with `@Component` are, +the only detected candidate components. However, you can modify and extend this behavior, +by applying custom filters. Add them as `includeFilters` or `excludeFilters` attributes of, +the `@ComponentScan` annotation (or as `<context:include-filter />` or, +`<context:exclude-filter />` child elements of the `<context:component-scan>` element in, +XML configuration). Each filter element requires the `type` and `expression` attributes., +The following table describes the filtering options:, +| An annotation to be _present_ or _meta-present_ at the type level in target components., +| A regex expression to be matched by the target components' class names., +NOTE: You can also disable the default filters by setting `useDefaultFilters=false` on the, +annotation or by providing `use-default-filters="false"` as an attribute of the, +`<component-scan/>` element. This effectively disables automatic detection of classes, +annotated or meta-annotated with `@Component`, `@Repository`, `@Service`, `@Controller`,, +`@RestController`, or `@Configuration`.]