[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +	private final BeanDefinitionRegistry registry;, +, +		this.registry = registry;, +		this.componentScanParser =, +			new ComponentScanAnnotationParser(this.resourceLoader, this.environment, this.registry);, +						ImportSelector.Context context = new ImportSelector.Context(importingClassMetadata, this.registry);, +						processImport(configClass, selector.selectImports(context), false);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +	private final BeanDefinitionRegistry registry;, +, +		this.registry = registry;, +		this.componentScanParser =, +			new ComponentScanAnnotationParser(this.resourceLoader, this.environment, this.registry);, +						ImportSelector.Context context = new ImportSelector.Context(importingClassMetadata, this.registry);, +						processImport(configClass, selector.selectImports(context), false);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ImportSelector.java, +import org.springframework.beans.factory.support.BeanDefinitionRegistry;, + * <p>In certain cases, an {@code ImportSelector} may register additional bean definitions, + * through the {@link BeanDefinitionRegistry} available in the, + * {@code Context} provided to the {@link #selectImports} method., + *, +	 * Select and return the names of which class(es) should be imported based on, +	 * the {@code AnnotationMetadata} of the importing {@code @Configuration} class and, +	 * optionally register any {@code BeanDefinition}s necessary to support the selected, +	 * classes., +	 * @param context containing the AnnotationMetadata of the importing @{@link, +	 * Configuration} class and the enclosing {@link BeanDefinitionRegistry}., +	String[] selectImports(Context context);, +, +, +	/**, +	 * Context object holding the {@link AnnotationMetadata} of the {@code @Configuration}, +	 * class that imported this {@link ImportSelector} as well as the enclosing, +	 * {@link BeanDefinitionRegistry} to allow for conditional bean definition, +	 * registration when necessary., +	 *, +	 * @author Chris Beams, +	 * @since 3.1, +	 */, +	static class Context {, +		private final AnnotationMetadata importingClassMetadata;, +		private final BeanDefinitionRegistry registry;, +, +		public Context(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {, +			this.importingClassMetadata = importingClassMetadata;, +			this.registry = registry;, +		}, +, +		public AnnotationMetadata getImportingClassMetadata() {, +			return this.importingClassMetadata;, +		}, +, +		public BeanDefinitionRegistry getBeanDefinitionRegistry() {, +			return registry;, +		}, +	}, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +	private final BeanDefinitionRegistry registry;, +, +		this.registry = registry;, +		this.componentScanParser =, +			new ComponentScanAnnotationParser(this.resourceLoader, this.environment, this.registry);, +						ImportSelector.Context context = new ImportSelector.Context(importingClassMetadata, this.registry);, +						processImport(configClass, selector.selectImports(context), false);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ImportSelector.java, +import org.springframework.beans.factory.support.BeanDefinitionRegistry;, + * <p>In certain cases, an {@code ImportSelector} may register additional bean definitions, + * through the {@link BeanDefinitionRegistry} available in the, + * {@code Context} provided to the {@link #selectImports} method., + *, +	 * Select and return the names of which class(es) should be imported based on, +	 * the {@code AnnotationMetadata} of the importing {@code @Configuration} class and, +	 * optionally register any {@code BeanDefinition}s necessary to support the selected, +	 * classes., +	 * @param context containing the AnnotationMetadata of the importing @{@link, +	 * Configuration} class and the enclosing {@link BeanDefinitionRegistry}., +	String[] selectImports(Context context);, +, +, +	/**, +	 * Context object holding the {@link AnnotationMetadata} of the {@code @Configuration}, +	 * class that imported this {@link ImportSelector} as well as the enclosing, +	 * {@link BeanDefinitionRegistry} to allow for conditional bean definition, +	 * registration when necessary., +	 *, +	 * @author Chris Beams, +	 * @since 3.1, +	 */, +	static class Context {, +		private final AnnotationMetadata importingClassMetadata;, +		private final BeanDefinitionRegistry registry;, +, +		public Context(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {, +			this.importingClassMetadata = importingClassMetadata;, +			this.registry = registry;, +		}, +, +		public AnnotationMetadata getImportingClassMetadata() {, +			return this.importingClassMetadata;]