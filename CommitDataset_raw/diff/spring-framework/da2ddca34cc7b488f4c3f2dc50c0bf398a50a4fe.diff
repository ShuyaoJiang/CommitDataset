[+++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +	 * Return the internal LifecycleProcessor used by the context., +	 * @return the internal LifecycleProcessor (never <code>null</code>), +	 * @throws IllegalStateException if the context has not been initialized yet, +	 */, +	private LifecycleProcessor getLifecycleProcessor() {, +		if (this.lifecycleProcessor == null) {, +			throw new IllegalStateException("LifecycleProcessor not initialized - " +, +					"call 'refresh' before invoking lifecycle methods via the context: " + this);, +		}, +		return this.lifecycleProcessor;, +	}, +, +	/**, +		// Initialize conversion service for this context., +		if (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME)) {, +			beanFactory.setConversionService(, +					beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));, +		}, +, +	 * Initialize the ApplicationEventMulticaster., +	 * Uses SimpleApplicationEventMulticaster if none defined in the context., +	 * @see org.springframework.context.event.SimpleApplicationEventMulticaster, +	 */, +	protected void initApplicationEventMulticaster() {, +		ConfigurableListableBeanFactory beanFactory = getBeanFactory();, +		if (beanFactory.containsLocalBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME)) {, +			this.applicationEventMulticaster =, +					beanFactory.getBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, ApplicationEventMulticaster.class);, +			if (logger.isDebugEnabled()) {, +				logger.debug("Using ApplicationEventMulticaster [" + this.applicationEventMulticaster + "]");, +			}, +		}, +		else {, +			this.applicationEventMulticaster = new SimpleApplicationEventMulticaster(beanFactory);, +			beanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, this.applicationEventMulticaster);, +			if (logger.isDebugEnabled()) {, +				logger.debug("Unable to locate ApplicationEventMulticaster with name '" +, +						APPLICATION_EVENT_MULTICASTER_BEAN_NAME +, +						"': using default [" + this.applicationEventMulticaster + "]");, +			}, +		}, +	}, +, +	/**, +		// Initialize lifecycle processor for this context., +		initLifecycleProcessor();, +, +		// Propagate refresh to lifecycle processor first., +		getLifecycleProcessor().onRefresh();]