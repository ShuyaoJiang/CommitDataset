[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +import java.nio.charset.StandardCharsets;, +import org.hamcrest.Matcher;, +import org.hamcrest.MatcherAssert;, +import org.springframework.test.util.AssertionErrors;, +					AssertionErrors.assertEquals("Response body", expected, this.result.getResponseBody()));, +			return self();, +		}, +, +		@Override, +		public <T extends S> T value(Matcher<B> matcher) {, +			this.result.assertWithDiagnostics(() -> MatcherAssert.assertThat(this.result.getResponseBody(), matcher));, +			return self();, +		}, +, +		@Override, +		public <T extends S, R> T value(Function<B, R> bodyMapper, Matcher<R> matcher) {, +			this.result.assertWithDiagnostics(() -> {, +				B body = this.result.getResponseBody();, +				MatcherAssert.assertThat(bodyMapper.apply(body), matcher);, +			});, +			getResult().assertWithDiagnostics(() ->, +					AssertionErrors.assertEquals(message, size, (actual != null ? actual.size() : 0)));, +			getResult().assertWithDiagnostics(() ->, +					AssertionErrors.assertTrue(message, (actual != null && actual.containsAll(expected))));, +			getResult().assertWithDiagnostics(() ->, +					AssertionErrors.assertTrue(message, (actual == null || !actual.containsAll(expected))));, +			this.result.assertWithDiagnostics(() ->, +					AssertionErrors.assertTrue("Expected empty body", this.isEmpty));, +			Charset charset = Optional.ofNullable(this.result.getResponseHeaders().getContentType()), +					.map(MimeType::getCharset).orElse(StandardCharsets.UTF_8);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +import java.nio.charset.StandardCharsets;, +import org.hamcrest.Matcher;, +import org.hamcrest.MatcherAssert;, +import org.springframework.test.util.AssertionErrors;, +					AssertionErrors.assertEquals("Response body", expected, this.result.getResponseBody()));, +			return self();, +		}, +, +		@Override, +		public <T extends S> T value(Matcher<B> matcher) {, +			this.result.assertWithDiagnostics(() -> MatcherAssert.assertThat(this.result.getResponseBody(), matcher));, +			return self();, +		}, +, +		@Override, +		public <T extends S, R> T value(Function<B, R> bodyMapper, Matcher<R> matcher) {, +			this.result.assertWithDiagnostics(() -> {, +				B body = this.result.getResponseBody();, +				MatcherAssert.assertThat(bodyMapper.apply(body), matcher);, +			});, +			getResult().assertWithDiagnostics(() ->, +					AssertionErrors.assertEquals(message, size, (actual != null ? actual.size() : 0)));, +			getResult().assertWithDiagnostics(() ->, +					AssertionErrors.assertTrue(message, (actual != null && actual.containsAll(expected))));, +			getResult().assertWithDiagnostics(() ->, +					AssertionErrors.assertTrue(message, (actual == null || !actual.containsAll(expected))));, +			this.result.assertWithDiagnostics(() ->, +					AssertionErrors.assertTrue("Expected empty body", this.isEmpty));, +			Charset charset = Optional.ofNullable(this.result.getResponseHeaders().getContentType()), +					.map(MimeType::getCharset).orElse(StandardCharsets.UTF_8);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/HeaderAssertions.java, +, +import org.hamcrest.Matcher;, +import org.hamcrest.MatcherAssert;, +import org.springframework.test.util.AssertionErrors;, +	 * Match the primary value of the response header with a regex., +	 * @param pattern the regex pattern, +		String value = getRequiredValue(name);, +		String message = getMessage(name) + "=[" + value + "] does not match [" + pattern + "]";, +		this.exchangeResult.assertWithDiagnostics(() -> AssertionErrors.assertTrue(message, value.matches(pattern)));, +		return this.responseSpec;, +	}, +, +	/**, +	 * Assert the primary value of the response header with a {@link Matcher}., +	 * @param name the header name, +	 * @param matcher the matcher to sue, +	 * @since 5.1, +	 */, +	public WebTestClient.ResponseSpec value(String name, Matcher<? super String> matcher) {, +		String value = getRequiredValue(name);, +		this.exchangeResult.assertWithDiagnostics(() -> MatcherAssert.assertThat(value, matcher));, +		return this.responseSpec;, +	}, +, +	private String getRequiredValue(String name) {, +			AssertionErrors.fail(getMessage(name) + " not found");, +		return value;, +			this.exchangeResult.assertWithDiagnostics(() -> AssertionErrors.fail(message));, +			this.exchangeResult.assertWithDiagnostics(() -> AssertionErrors.fail(message));, +				AssertionErrors.assertTrue(message, (actual != null && actual.isCompatibleWith(mediaType))));, +		this.exchangeResult.assertWithDiagnostics(() -> {, +			String message = getMessage(name);, +			AssertionErrors.assertEquals(message, expected, actual);, +		});, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +import java.nio.charset.StandardCharsets;, +import org.hamcrest.Matcher;]