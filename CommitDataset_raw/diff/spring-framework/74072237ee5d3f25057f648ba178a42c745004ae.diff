[+++ b/build.gradle, +		backends = ['docbook'], +++ b/build.gradle, +		backends = ['docbook'], +++ b/src/asciidoc/core-aop-api.adoc, +[[aop-api]], += Spring AOP APIs, +, +, +[[aop-api-introduction]], +== Introduction, +The previous chapter described the Spring's support for AOP using, +@AspectJ and schema-based aspect definitions. In this chapter we discuss the lower-level, +Spring AOP APIs and the AOP support used in Spring 1.2 applications. For new, +applications, we recommend the use of the Spring 2.0 and later AOP support described in, +the previous chapter, but when working with existing applications, or when reading books, +and articles, you may come across Spring 1.2 style examples. Spring 4.0 is backwards, +compatible with Spring 1.2 and everything described in this chapter is fully supported, +in Spring 4.0., +, +, +, +, +[[aop-api-pointcuts]], +== Pointcut API in Spring, +Let's look at how Spring handles the crucial pointcut concept., +, +, +, +[[aop-api-concepts]], +=== Concepts, +Spring's pointcut model enables pointcut reuse independent of advice types. It's, +possible to target different advice using the same pointcut., +, +The `org.springframework.aop.Pointcut` interface is the central interface, used to, +target advices to particular classes and methods. The complete interface is shown below:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	public interface Pointcut {, +, +		ClassFilter getClassFilter();, +, +		MethodMatcher getMethodMatcher();, +, +	}, +----, +, +Splitting the `Pointcut` interface into two parts allows reuse of class and method, +matching parts, and fine-grained composition operations (such as performing a "union", +with another method matcher)., +, +The `ClassFilter` interface is used to restrict the pointcut to a given set of target, +classes. If the `matches()` method always returns true, all target classes will be, +matched:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	public interface ClassFilter {, +, +		boolean matches(Class clazz);, +	}, +----, +, +The `MethodMatcher` interface is normally more important. The complete interface is, +shown below:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	public interface MethodMatcher {, +, +		boolean matches(Method m, Class targetClass);, +, +		boolean isRuntime();, +, +		boolean matches(Method m, Class targetClass, Object[] args);, +	}, +----, +, +The `matches(Method, Class)` method is used to test whether this pointcut will ever, +match a given method on a target class. This evaluation can be performed when an AOP, +proxy is created, to avoid the need for a test on every method invocation. If the, +2-argument matches method returns true for a given method, and the `isRuntime()` method, +for the MethodMatcher returns true, the 3-argument matches method will be invoked on, +every method invocation. This enables a pointcut to look at the arguments passed to the, +method invocation immediately before the target advice is to execute., +, +Most MethodMatchers are static, meaning that their `isRuntime()` method returns false., +In this case, the 3-argument matches method will never be invoked., +, +[TIP], +===, +, +If possible, try to make pointcuts static, allowing the AOP framework to cache the, +results of pointcut evaluation when an AOP proxy is created., +===, +]