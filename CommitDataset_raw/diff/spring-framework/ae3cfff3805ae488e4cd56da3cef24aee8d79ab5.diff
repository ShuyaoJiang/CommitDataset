[+++ b/org.springframework.context/src/main/java/org/springframework/context/i18n/LocaleContextHolder.java, + * by any child threads spawned by the current thread if the, + * <code>inheritable<code> flag is set to <code>true</code>., +	 * @param localeContext the current LocaleContext, +	 * @param localeContext the current LocaleContext,, +	 * or <code>null</code> to reset the thread-bound context, +		if (localeContext == null) {, +			resetLocaleContext();, +		}, +		else {, +	}, +++ b/org.springframework.context/src/main/java/org/springframework/context/i18n/LocaleContextHolder.java, + * by any child threads spawned by the current thread if the, + * <code>inheritable<code> flag is set to <code>true</code>., +	 * @param localeContext the current LocaleContext, +	 * @param localeContext the current LocaleContext,, +	 * or <code>null</code> to reset the thread-bound context, +		if (localeContext == null) {, +			resetLocaleContext();, +		}, +		else {, +	}, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/JodaTimeContextHolder.java, +import org.springframework.core.NamedThreadLocal;, + * @author Juergen Hoeller, +			new NamedThreadLocal<JodaTimeContext>("JodaTime Context");, +	 * Reset the JodaTimeContext for the current thread., +	public static void resetJodaTimeContext() {, +		jodaTimeContextHolder.remove();, +	}, +, +	/**, +	 * Associate the given JodaTimeContext with the current thread., +	 * @param jodaTimeContext the current JodaTimeContext,, +	 * or <code>null</code> to reset the thread-bound context, +	 */, +	public static void setJodaTimeContext(JodaTimeContext jodaTimeContext) {, +		if (jodaTimeContext == null) {, +			resetJodaTimeContext();, +		}, +		else {, +			jodaTimeContextHolder.set(jodaTimeContext);, +		}, +++ b/org.springframework.context/src/main/java/org/springframework/context/i18n/LocaleContextHolder.java, + * by any child threads spawned by the current thread if the, + * <code>inheritable<code> flag is set to <code>true</code>., +	 * @param localeContext the current LocaleContext, +	 * @param localeContext the current LocaleContext,, +	 * or <code>null</code> to reset the thread-bound context, +		if (localeContext == null) {, +			resetLocaleContext();, +		}, +		else {, +	}, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/JodaTimeContextHolder.java, +import org.springframework.core.NamedThreadLocal;, + * @author Juergen Hoeller, +			new NamedThreadLocal<JodaTimeContext>("JodaTime Context");, +	 * Reset the JodaTimeContext for the current thread., +	public static void resetJodaTimeContext() {, +		jodaTimeContextHolder.remove();, +	}, +, +	/**, +	 * Associate the given JodaTimeContext with the current thread., +	 * @param jodaTimeContext the current JodaTimeContext,, +	 * or <code>null</code> to reset the thread-bound context, +	 */, +	public static void setJodaTimeContext(JodaTimeContext jodaTimeContext) {, +		if (jodaTimeContext == null) {, +			resetJodaTimeContext();, +		}, +		else {, +			jodaTimeContextHolder.set(jodaTimeContext);, +		}, +++ b/org.springframework.web/src/main/java/org/springframework/web/context/request/RequestContextHolder.java, + * {@link RequestAttributes} object. The request will be inherited, + * by any child threads spawned by the current thread if the, + * <code>inheritable<code> flag is set to <code>true</code>., +	 * @param attributes the RequestAttributes to expose,, +	 * or <code>null</code> to reset the thread-bound context, +		if (attributes == null) {, +			resetRequestAttributes();, +		}, +		else {, +	}]