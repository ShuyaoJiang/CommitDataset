[+++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MappingJackson2MessageConverter.java, +import org.springframework.core.GenericTypeResolver;, +import org.springframework.core.ResolvableType;, +		JavaType javaType = getJavaType(targetClass, conversionHint);, +	private JavaType getJavaType(Class<?> targetClass, @Nullable Object conversionHint) {, +		if (conversionHint instanceof MethodParameter) {, +			MethodParameter param = (MethodParameter) conversionHint;, +			param = param.nestedIfOptional();, +			Type genericParameterType = param.getNestedGenericParameterType();, +			Class<?> contextClass = param.getContainingClass();, +			Type type = GenericTypeResolver.resolveType(genericParameterType, contextClass);, +			return this.objectMapper.getTypeFactory().constructType(type);, +		}, +		return this.objectMapper.constructType(targetClass);, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MappingJackson2MessageConverter.java, +import org.springframework.core.GenericTypeResolver;, +import org.springframework.core.ResolvableType;, +		JavaType javaType = getJavaType(targetClass, conversionHint);, +	private JavaType getJavaType(Class<?> targetClass, @Nullable Object conversionHint) {, +		if (conversionHint instanceof MethodParameter) {, +			MethodParameter param = (MethodParameter) conversionHint;, +			param = param.nestedIfOptional();, +			Type genericParameterType = param.getNestedGenericParameterType();, +			Class<?> contextClass = param.getContainingClass();, +			Type type = GenericTypeResolver.resolveType(genericParameterType, contextClass);, +			return this.objectMapper.getTypeFactory().constructType(type);, +		}, +		return this.objectMapper.constructType(targetClass);, +	}, +, +++ b/spring-messaging/src/test/java/org/springframework/messaging/converter/MappingJackson2MessageConverterTests.java, +import java.util.List;, +import static org.hamcrest.Matchers.contains;, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.not;, +import static org.junit.Assert.assertArrayEquals;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.assertTrue;, +	@Test // SPR-16252, +	public void fromMessageToList() throws Exception {, +		MappingJackson2MessageConverter converter = new MappingJackson2MessageConverter();, +		String payload = "[1, 2, 3, 4, 5, 6, 7, 8, 9]";, +		Message<?> message = MessageBuilder.withPayload(payload.getBytes(StandardCharsets.UTF_8)).build();, +, +		Method method = getClass().getDeclaredMethod("handleList", List.class);, +		MethodParameter param = new MethodParameter(method, 0);, +		Object actual = converter.fromMessage(message, List.class, param);, +, +		assertNotNull(actual);, +		assertEquals(Arrays.asList(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L), actual);, +	}, +, +	void handleList(List<Long> payload) {}, +]