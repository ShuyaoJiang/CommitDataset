[+++ b/org.springframework.core/src/main/java/org/springframework/util/ReflectionUtils.java, +	public interface MethodCallback {, +	public interface MethodFilter {, +	public interface FieldCallback {, +	public interface FieldFilter {, +	/**, +	 * Pre-built MethodFilter that matches all non-bridge methods., +	 */, +	public static MethodFilter NON_BRIDGED_METHODS = new MethodFilter() {, +, +		public boolean matches(Method method) {, +			return !method.isBridge();, +		}, +	};, +, +++ b/org.springframework.core/src/main/java/org/springframework/util/ReflectionUtils.java, +	public interface MethodCallback {, +	public interface MethodFilter {, +	public interface FieldCallback {, +	public interface FieldFilter {, +	/**, +	 * Pre-built MethodFilter that matches all non-bridge methods., +	 */, +	public static MethodFilter NON_BRIDGED_METHODS = new MethodFilter() {, +, +		public boolean matches(Method method) {, +			return !method.isBridge();, +		}, +	};, +, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +	@Test, +	public void requestMappingInterface() throws Exception {, +		initServlet(IMyControllerImpl.class);, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/handle");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("handle", response.getContentAsString());, +, +	}, +	, +	@Test, +	public void requestMappingBaseClass() throws Exception {, +		initServlet(MyAbstractControllerImpl.class);, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/handle");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("handle", response.getContentAsString());, +, +	}, +, +	public interface IMyController {, +, +		@RequestMapping("/handle"), +		void handle(Writer writer) throws IOException;, +	}, +, +	@Controller, +	public static class IMyControllerImpl implements IMyController {, +, +		public void handle(Writer writer) throws IOException {, +			writer.write("handle");, +		}, +	}, +, +	public static abstract class MyAbstractController {, +, +		@RequestMapping("/handle"), +		public abstract void handle(Writer writer) throws IOException;, +	}, +, +	@Controller, +	public static class MyAbstractControllerImpl extends MyAbstractController {, +, +		@Override, +		public void handle(Writer writer) throws IOException {, +			writer.write("handle");, +		}, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/util/ReflectionUtils.java, +	public interface MethodCallback {, +	public interface MethodFilter {, +	public interface FieldCallback {, +	public interface FieldFilter {, +	/**, +	 * Pre-built MethodFilter that matches all non-bridge methods., +	 */, +	public static MethodFilter NON_BRIDGED_METHODS = new MethodFilter() {, +, +		public boolean matches(Method method) {, +			return !method.isBridge();, +		}, +	};, +, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +	@Test, +	public void requestMappingInterface() throws Exception {]