[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethod.java, +		ResponseStatus annotation = getMethodAnnotation(ResponseStatus.class);, +		if (annotation != null) {, +			this.responseStatus = annotation.value();, +			this.responseReason = annotation.reason();, +	 * Invokes the method and handles the return value through one of the, +	 * configured {@link HandlerMethodReturnValueHandler}s., +		return this.responseStatus != null;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethod.java, +		ResponseStatus annotation = getMethodAnnotation(ResponseStatus.class);, +		if (annotation != null) {, +			this.responseStatus = annotation.value();, +			this.responseReason = annotation.reason();, +	 * Invokes the method and handles the return value through one of the, +	 * configured {@link HandlerMethodReturnValueHandler}s., +		return this.responseStatus != null;, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethodTests.java, + * Copyright 2002-2014 the original author or authors., +, +		this.returnValueHandlers = new HandlerMethodReturnValueHandlerComposite();, +		this.argumentResolvers = new HandlerMethodArgumentResolverComposite();, +		this.mavContainer = new ModelAndViewContainer();, +		this.request = new MockHttpServletRequest();, +		this.response = new MockHttpServletResponse();, +		this.webRequest = new ServletWebRequest(this.request, this.response);, +		handlerMethod.invokeAndHandle(this.webRequest, this.mavContainer);, +				this.mavContainer.isRequestHandled());, +		assertEquals(HttpStatus.BAD_REQUEST.value(), this.response.getStatus());, +		this.argumentResolvers.addResolver(new ServletResponseMethodArgumentResolver());, +		ServletInvocableHandlerMethod handlerMethod =, +				getHandlerMethod(new Handler(), "httpServletResponse", HttpServletResponse.class);, +		handlerMethod.invokeAndHandle(this.webRequest, this.mavContainer);, +				this.mavContainer.isRequestHandled());, +		this.request.addHeader("If-Modified-Since", 10 * 1000 * 1000);, +		this.webRequest.checkNotModified(lastModifiedTimestamp);, +		handlerMethod.invokeAndHandle(this.webRequest, this.mavContainer);, +				this.mavContainer.isRequestHandled());, +		handlerMethod.invokeAndHandle(this.webRequest, this.mavContainer);, +		assertTrue("When a status reason w/ used, the the request is handled", this.mavContainer.isRequestHandled());, +		assertEquals(HttpStatus.BAD_REQUEST.value(), this.response.getStatus());, +		assertEquals("400 Bad Request", this.response.getErrorMessage());, +		this.returnValueHandlers.addHandler(new ExceptionRaisingReturnValueHandler());, +		handlerMethod.invokeAndHandle(this.webRequest, this.mavContainer);, +		this.argumentResolvers.addResolver(new RequestParamMethodArgumentResolver(null, false));, +		this.returnValueHandlers.addHandler(new ViewMethodReturnValueHandler());, +		this.returnValueHandlers.addHandler(new ViewNameMethodReturnValueHandler());, +		handlerMethod.invokeAndHandle(this.webRequest, this.mavContainer);, +		assertNotNull(this.mavContainer.getView());, +		assertEquals(RedirectView.class, this.mavContainer.getView().getClass());, +		this.request.setParameter("param", "value");, +		handlerMethod.invokeAndHandle(this.webRequest, this.mavContainer);, +		assertEquals("view", this.mavContainer.getViewName());, +		this.returnValueHandlers.addHandler(new RequestResponseBodyMethodProcessor(converters));, +		handlerMethod.invokeAndHandle(this.webRequest, this.mavContainer);, +		assertEquals("bar", this.response.getContentAsString());, +		this.returnValueHandlers.addHandler(new HttpEntityMethodProcessor(converters));, +		handlerMethod.invokeAndHandle(this.webRequest, this.mavContainer);, +		assertEquals("bar", this.response.getContentAsString());, +		this.returnValueHandlers.addHandler(processor);, +		handlerMethod.invokeAndHandle(this.webRequest, this.mavContainer);, +		assertEquals(200, this.response.getStatus());, +		assertEquals("", this.response.getContentAsString());, +		this.returnValueHandlers.addHandler(processor);, +		handlerMethod.invokeAndHandle(this.webRequest, this.mavContainer);, +		assertEquals(200, this.response.getStatus());, +		assertEquals("", this.response.getContentAsString());, +]