[+++ b/src/docs/asciidoc/web/webflux-view.adoc, +[[webflux-view]], += View Technologies, +[.small]#<<web.adoc#mvc-view,Same in Spring MVC>>#, +, +The use of view technologies in Spring WebFlux is pluggable, whether you decide to, +use Thymeleaf, FreeMarker, or other, is primarily a matter of a configuration change., +This chapter covers view technologies integrated with Spring WebFlux. We assume you are, +already familiar with <<webflux-viewresolution>>., +, +, +, +, +[[webflux-view-thymeleaf]], +== Thymeleaf, +[.small]#<<web.adoc#mvc-view-thymeleaf,Same in Spring MVC>>#, +, +Thymeleaf is modern server-side Java template engine that emphasizes natural HTML, +templates that can be previewed in a browser by double-clicking, which is very, +helpful for independent work on UI templates, e.g. by designer, without the need for a, +running server. Thymeleaf offers an extensive set of features and it is actively developed, +and maintained. For a more complete introduction see the, +http://www.thymeleaf.org/[Thymeleaf] project home page., +, +The Thymeleaf integration with Spring WebFlux is managed by the Thymeleaf project. The, +configuration involves a few bean declarations such as, +`SpringResourceTemplateResolver`, `SpringWebFluxTemplateEngine`, and, +`ThymeleafReactiveViewResolver`. For more details see, +http://www.thymeleaf.org/documentation.html[Thymeleaf+Spring] and the WebFlux integration, +http://forum.thymeleaf.org/Thymeleaf-3-0-8-JUST-PUBLISHED-td4030687.html[announcement]., +, +, +, +, +[[webflux-view-freemarker]], +== FreeMarker, +[.small]#<<web.adoc#mvc-view-freemarker,Same in Spring MVC>>#, +, +http://www.freemarker.org[Apache FreeMarker] is a template engine for generating any, +kind of text output from HTML to email, and others. The Spring Framework has a built-in, +integration for using Spring WebFlux with FreeMarker templates., +, +, +, +[[webflux-view-freemarker-contextconfig]], +=== View config, +[.small]#<<web.adoc#mvc-view-freemarker-contextconfig,Same in Spring MVC>>#, +, +To configure FreeMarker as a view technology:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Configuration, +	@EnableWebFlux, +	public class WebConfig implements WebFluxConfigurer {, +, +		@Override, +		public void configureViewResolvers(ViewResolverRegistry registry) {, +			registry.freemarker();, +		}, +, +		// Configure FreeMarker..., +, +		@Bean, +		public FreeMarkerConfigurer freeMarkerConfigurer() {, +			FreeMarkerConfigurer configurer = new FreeMarkerConfigurer();, +			configurer.setTemplateLoaderPath("classpath:/templates");, +			return configurer;, +		}, +	}, +----, +, +Your templates need to be stored in the directory specified by the `FreeMarkerConfigurer`, +shown above. Given the above configuration if your controller returns the view name, +"welcome" then the resolver will look for the, +`classpath:/templates/freemarker/welcome.ftl` template., +, +, +, +[[webflux-views-freemarker]], +=== FreeMarker config, +[.small]#<<web.adoc#mvc-views-freemarker,Same in Spring MVC>>#, +, +FreeMarker 'Settings' and 'SharedVariables' can be passed directly to the FreeMarker, +`Configuration` object managed by Spring by setting the appropriate bean properties on, +the `FreeMarkerConfigurer` bean. The `freemarkerSettings` property requires a, +`java.util.Properties` object and the `freemarkerVariables` property requires a, +`java.util.Map`., +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Configuration, +	@EnableWebFlux, +	public class WebConfig implements WebFluxConfigurer {, +, +		// ..., +, +		@Bean]