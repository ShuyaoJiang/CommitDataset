[+++ b/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionService.java, +	private final Map<AnnotationConverterKey, GenericConverter> cachedPrinters =, +			new ConcurrentHashMap<AnnotationConverterKey, GenericConverter>();, +	private final Map<AnnotationConverterKey, GenericConverter> cachedParsers =, +			new ConcurrentHashMap<AnnotationConverterKey, GenericConverter>();, +			addConverter(new AnnotationPrinterConverter(annotationType, annotationFormatterFactory, fieldType));, +			addConverter(new AnnotationParserConverter(annotationType, annotationFormatterFactory, fieldType));, +	private final class AnnotationPrinterConverter implements ConditionalGenericConverter {, +		, +		private Class<? extends Annotation> annotationType;, +		, +		private AnnotationFormatterFactory annotationFormatterFactory;, +		, +		private Class<?> fieldType;, +, +		public AnnotationPrinterConverter(Class<? extends Annotation> annotationType,, +				AnnotationFormatterFactory annotationFormatterFactory, Class<?> fieldType) {, +			this.annotationType = annotationType;, +			this.annotationFormatterFactory = annotationFormatterFactory;, +			this.fieldType = fieldType;, +		}, +, +		public Set<ConvertiblePair> getConvertibleTypes() {, +			return Collections.singleton(new ConvertiblePair(fieldType, String.class));, +		}, +		, +		public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {, +			return sourceType.getAnnotation(annotationType) != null;, +		}, +		, +		public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +			AnnotationConverterKey converterKey = new AnnotationConverterKey(sourceType.getAnnotation(annotationType), sourceType.getObjectType());, +			GenericConverter converter = cachedPrinters.get(converterKey);, +			if (converter == null) {, +				Printer<?> printer = annotationFormatterFactory.getPrinter(converterKey.getAnnotation(), converterKey.getFieldType());, +				converter = new PrinterConverter(fieldType, printer, FormattingConversionService.this);, +				cachedPrinters.put(converterKey, converter);, +			}, +			return converter.convert(source, sourceType, targetType);, +		}, +		, +		public String toString() {, +			return "@" + annotationType.getName() + " " + fieldType.getName() + " -> " + String.class.getName() + ": " + annotationFormatterFactory;, +		}, +	}, +	, +	private final class AnnotationParserConverter implements ConditionalGenericConverter {, +		, +		private Class<? extends Annotation> annotationType;, +		, +		private AnnotationFormatterFactory annotationFormatterFactory;, +		, +		private Class<?> fieldType;, +, +		public AnnotationParserConverter(Class<? extends Annotation> annotationType,, +				AnnotationFormatterFactory<?> annotationFormatterFactory, Class<?> fieldType) {, +			this.annotationType = annotationType;, +			this.annotationFormatterFactory = annotationFormatterFactory;, +			this.fieldType = fieldType;, +		}, +, +		public Set<ConvertiblePair> getConvertibleTypes() {, +			return Collections.singleton(new ConvertiblePair(String.class, fieldType));, +		}, +		, +		public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {, +			return targetType.getAnnotation(annotationType) != null;, +		}, +		, +		public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +			AnnotationConverterKey converterKey = new AnnotationConverterKey(targetType.getAnnotation(annotationType), targetType.getObjectType());, +			GenericConverter converter = cachedParsers.get(converterKey);, +			if (converter == null) {, +				Parser<?> parser = annotationFormatterFactory.getParser(converterKey.getAnnotation(), converterKey.getFieldType());, +				converter = new ParserConverter(fieldType, parser, FormattingConversionService.this);, +				cachedParsers.put(converterKey, converter);, +			}, +			return converter.convert(source, sourceType, targetType);, +		}, +		, +		public String toString() {, +			return String.class.getName() + " -> @" + annotationType.getName() + " " + fieldType.getName() + ": " + annotationFormatterFactory;, +		}	, +	}, +	, +	private static final class AnnotationConverterKey {, +		, +		private final Annotation annotation;, +		, +		private final Class<?> fieldType;, +		, +		public AnnotationConverterKey(Annotation annotation, Class<?> fieldType) {, +			this.annotation = annotation;, +			this.fieldType = fieldType;, +		}, +		, +		public Annotation getAnnotation() {, +			return annotation;, +		}, +		]