[+++ b/spring-aspects/src/main/java/org/springframework/scheduling/aspectj/AspectJAsyncConfiguration.java, + * Copyright 2002-2013 the original author or authors., + * @see org.springframework.scheduling.annotation.ProxyAsyncConfiguration, +++ b/spring-aspects/src/main/java/org/springframework/scheduling/aspectj/AspectJAsyncConfiguration.java, + * Copyright 2002-2013 the original author or authors., + * @see org.springframework.scheduling.annotation.ProxyAsyncConfiguration, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/AbstractAsyncConfiguration.java, +, +++ b/spring-aspects/src/main/java/org/springframework/scheduling/aspectj/AspectJAsyncConfiguration.java, + * Copyright 2002-2013 the original author or authors., + * @see org.springframework.scheduling.annotation.ProxyAsyncConfiguration, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/AbstractAsyncConfiguration.java, +, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ProxyAsyncConfiguration.java, + * Copyright 2002-2013 the original author or authors., +++ b/spring-aspects/src/main/java/org/springframework/scheduling/aspectj/AspectJAsyncConfiguration.java, + * Copyright 2002-2013 the original author or authors., + * @see org.springframework.scheduling.annotation.ProxyAsyncConfiguration, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/AbstractAsyncConfiguration.java, +, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ProxyAsyncConfiguration.java, + * Copyright 2002-2013 the original author or authors., +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java, +, + * Unit tests for {@link AnnotationUtils}., + *, +	public void findAnnotationPrefersInterfacesOverLocalMetaAnnotations() {, +		assertNull(findAnnotationDeclaringClassForTypes(transactionalCandidateList, SubInheritedAnnotationInterface.class));, +	public void findAnnotationFromInterfaceWhenSuperDoesNotImplementMethod() throws Exception {, +	@Retention(RetentionPolicy.RUNTIME), +	@Inherited, +	@interface Transactional {, +	}, +, +	public abstract static class AbstractDoesNotImplementInterfaceWithAnnotatedMethod, +			implements InterfaceWithAnnotatedMethod {, +	public static class SubOfAbstractImplementsInterfaceWithAnnotatedMethod, +			extends AbstractDoesNotImplementInterfaceWithAnnotatedMethod {, +	@Retention(RetentionPolicy.RUNTIME), +	@Inherited, +	@interface MyRepeatableContainer {, +, +		MyRepeatable[] value();, +	}, +, +	@Retention(RetentionPolicy.RUNTIME), +	@Inherited, +	@Repeatable(MyRepeatableContainer.class), +	@interface MyRepeatable {, +, +		String value();, +	}, +, +	@Retention(RetentionPolicy.RUNTIME), +	@Inherited, +	@MyRepeatable("meta"), +	@interface MyRepeatableMeta {, +	}, +]