[+++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapper.java, + * Copyright 2002-2014 the original author or authors., +	 * Set whether this BeanWrapper should attempt to "auto-grow" a, +	 * nested path that contains a {@code null} value., +	 * <p>If {@code true}, a {@code null} path location will be populated, +	 * with a default object value and traversed instead of resulting in a, +	 * {@link NullValueInNestedPathException}. Turning this flag on also enables, +	 * auto-growth of collection elements when accessing an out-of-bounds index., +	 * <p>Default is {@code false} on a plain BeanWrapper., +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapper.java, + * Copyright 2002-2014 the original author or authors., +	 * Set whether this BeanWrapper should attempt to "auto-grow" a, +	 * nested path that contains a {@code null} value., +	 * <p>If {@code true}, a {@code null} path location will be populated, +	 * with a default object value and traversed instead of resulting in a, +	 * {@link NullValueInNestedPathException}. Turning this flag on also enables, +	 * auto-growth of collection elements when accessing an out-of-bounds index., +	 * <p>Default is {@code false} on a plain BeanWrapper., +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +	private void growCollectionIfNecessary(Collection<Object> collection, int index, String name,, +			PropertyDescriptor pd, int nestingLevel) {, +, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapper.java, + * Copyright 2002-2014 the original author or authors., +	 * Set whether this BeanWrapper should attempt to "auto-grow" a, +	 * nested path that contains a {@code null} value., +	 * <p>If {@code true}, a {@code null} path location will be populated, +	 * with a default object value and traversed instead of resulting in a, +	 * {@link NullValueInNestedPathException}. Turning this flag on also enables, +	 * auto-growth of collection elements when accessing an out-of-bounds index., +	 * <p>Default is {@code false} on a plain BeanWrapper., +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +	private void growCollectionIfNecessary(Collection<Object> collection, int index, String name,, +			PropertyDescriptor pd, int nestingLevel) {, +, +++ b/spring-beans/src/test/java/org/springframework/beans/BeanWrapperTests.java, + * Copyright 2002-2014 the original author or authors., +, +import org.springframework.core.convert.ConversionFailedException;, +import org.springframework.core.convert.TypeDescriptor;, +import org.springframework.core.convert.support.DefaultConversionService;, +import org.springframework.core.convert.support.GenericConversionService;, +		BeanWrapperImpl bwi = new BeanWrapperImpl(foo);, +	public void testArrayToObject() {, +		BeanWrapperImpl bwi = new BeanWrapperImpl(foo);, +	@Test, +	public void testPropertyTypeMismatch() {, +		PropertyTypeMismatch foo = new PropertyTypeMismatch();, +		BeanWrapperImpl bwi = new BeanWrapperImpl(foo);, +		bwi.setPropertyValue("object", "a String");, +		assertEquals("a String", foo.value);, +		assertEquals(8, bwi.getPropertyValue("object"));, +	}, +, +, +, +	public static class ArrayToObject {, +, +, +	public static class PropertyTypeMismatch {, +, +		public String value;, +, +		public void setObject(String object) {, +			this.value = object;, +		}, +, +		public Integer getObject() {, +			return (this.value != null ? this.value.length() : null);, +		}, +	}, +]