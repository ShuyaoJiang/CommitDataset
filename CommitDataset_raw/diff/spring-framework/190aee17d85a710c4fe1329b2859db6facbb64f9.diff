[+++ b/org.springframework.context/src/main/java/org/springframework/context/weaving/DefaultContextLoadTimeWeaver.java, +import org.springframework.instrument.classloading.jboss.JBossLoadTimeWeaver;, +		String name = classLoader.getClass().getName();, +			if (name.startsWith("weblogic")) {, +			else if (name.startsWith("oracle")) {, +			else if (name.startsWith("com.sun.enterprise")) {, +			else if (name.startsWith("org.jboss")) {, +				return new JBossLoadTimeWeaver(classLoader);, +++ b/org.springframework.context/src/main/java/org/springframework/context/weaving/DefaultContextLoadTimeWeaver.java, +import org.springframework.instrument.classloading.jboss.JBossLoadTimeWeaver;, +		String name = classLoader.getClass().getName();, +			if (name.startsWith("weblogic")) {, +			else if (name.startsWith("oracle")) {, +			else if (name.startsWith("com.sun.enterprise")) {, +			else if (name.startsWith("org.jboss")) {, +				return new JBossLoadTimeWeaver(classLoader);, +++ b/org.springframework.context/src/main/java/org/springframework/instrument/classloading/ReflectiveLoadTimeWeaver.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/weaving/DefaultContextLoadTimeWeaver.java, +import org.springframework.instrument.classloading.jboss.JBossLoadTimeWeaver;, +		String name = classLoader.getClass().getName();, +			if (name.startsWith("weblogic")) {, +			else if (name.startsWith("oracle")) {, +			else if (name.startsWith("com.sun.enterprise")) {, +			else if (name.startsWith("org.jboss")) {, +				return new JBossLoadTimeWeaver(classLoader);, +++ b/org.springframework.context/src/main/java/org/springframework/instrument/classloading/ReflectiveLoadTimeWeaver.java, +++ b/org.springframework.context/src/main/java/org/springframework/instrument/classloading/oc4j/OC4JLoadTimeWeaver.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/weaving/DefaultContextLoadTimeWeaver.java, +import org.springframework.instrument.classloading.jboss.JBossLoadTimeWeaver;, +		String name = classLoader.getClass().getName();, +			if (name.startsWith("weblogic")) {, +			else if (name.startsWith("oracle")) {, +			else if (name.startsWith("com.sun.enterprise")) {, +			else if (name.startsWith("org.jboss")) {, +				return new JBossLoadTimeWeaver(classLoader);, +++ b/org.springframework.context/src/main/java/org/springframework/instrument/classloading/ReflectiveLoadTimeWeaver.java, +++ b/org.springframework.context/src/main/java/org/springframework/instrument/classloading/oc4j/OC4JLoadTimeWeaver.java, +++ /dev/null, +++ b/org.springframework.context/src/main/java/org/springframework/context/weaving/DefaultContextLoadTimeWeaver.java, +import org.springframework.instrument.classloading.jboss.JBossLoadTimeWeaver;, +		String name = classLoader.getClass().getName();, +			if (name.startsWith("weblogic")) {, +			else if (name.startsWith("oracle")) {, +			else if (name.startsWith("com.sun.enterprise")) {, +			else if (name.startsWith("org.jboss")) {, +				return new JBossLoadTimeWeaver(classLoader);, +++ b/org.springframework.context/src/main/java/org/springframework/instrument/classloading/ReflectiveLoadTimeWeaver.java, +++ b/org.springframework.context/src/main/java/org/springframework/instrument/classloading/oc4j/OC4JLoadTimeWeaver.java, +++ /dev/null, +++ b/org.springframework.context/src/main/java/org/springframework/instrument/classloading/weblogic/WebLogicClassLoaderAdapter.java, +/*, + * Copyright 2002-2007 the original author or authors., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + *      http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.instrument.classloading.weblogic;, +, +import java.lang.instrument.ClassFileTransformer;, +import java.lang.reflect.Constructor;, +import java.lang.reflect.InvocationHandler;, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.Method;, +import java.lang.reflect.Proxy;, +, +import org.springframework.util.Assert;, +, +/**, + * Reflective wrapper around a WebLogic 10 class loader. Used to, + * encapsulate the classloader-specific methods (discovered and, + * called through reflection) from the load-time weaver., + * , + * @author Costin Leau, + * @author Juergen Hoeller, + * @since 2.5, + */, +class WebLogicClassLoaderAdapter {, +, +	private static final String GENERIC_CLASS_LOADER_NAME = "weblogic.utils.classloaders.GenericClassLoader";, +, +	private static final String CLASS_PRE_PROCESSOR_NAME = "weblogic.utils.classloaders.ClassPreProcessor";, +, +, +	private final ClassLoader classLoader;, +, +	private final Class wlPreProcessorClass;, +, +	private final Method addPreProcessorMethod;, +, +	private final Method getClassFinderMethod;]