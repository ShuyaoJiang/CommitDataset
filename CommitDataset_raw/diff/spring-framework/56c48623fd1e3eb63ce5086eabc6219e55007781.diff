[+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +					return wrapCacheValue(method, cache.get(key, new Callable<Object>() {, +							return unwrapReturnValue(invokeOperation(invoker));, +					}));, +			returnValue = wrapCacheValue(method, cacheValue);, +			cacheValue = unwrapReturnValue(returnValue);, +	private Object wrapCacheValue(Method method, Object cacheValue) {, +		if (method.getReturnType() == Optional.class &&, +				(cacheValue == null || cacheValue.getClass() != Optional.class)) {, +			return Optional.ofNullable(cacheValue);, +		}, +		return cacheValue;, +	}, +, +	private Object unwrapReturnValue(Object returnValue) {, +		return ObjectUtils.unwrapOptional(returnValue);, +	}, +, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +					return wrapCacheValue(method, cache.get(key, new Callable<Object>() {, +							return unwrapReturnValue(invokeOperation(invoker));, +					}));, +			returnValue = wrapCacheValue(method, cacheValue);, +			cacheValue = unwrapReturnValue(returnValue);, +	private Object wrapCacheValue(Method method, Object cacheValue) {, +		if (method.getReturnType() == Optional.class &&, +				(cacheValue == null || cacheValue.getClass() != Optional.class)) {, +			return Optional.ofNullable(cacheValue);, +		}, +		return cacheValue;, +	}, +, +	private Object unwrapReturnValue(Object returnValue) {, +		return ObjectUtils.unwrapOptional(returnValue);, +	}, +, +++ b/spring-context/src/test/java/org/springframework/cache/CacheReproTests.java, +	@Test, +	public void spr14853AdaptsToOptionalWithSync() {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Spr14853Config.class);, +		Spr14853Service bean = context.getBean(Spr14853Service.class);, +		Cache cache = context.getBean(CacheManager.class).getCache("itemCache");, +, +		TestBean tb = new TestBean("tb1");, +		bean.insertItem(tb);, +		assertSame(tb, bean.findById("tb1").get());, +		assertSame(tb, cache.get("tb1").get());, +, +		cache.clear();, +		TestBean tb2 = bean.findById("tb1").get();, +		assertNotSame(tb, tb2);, +		assertSame(tb2, cache.get("tb1").get());, +	}, +	public static class Spr14853Service {, +, +		@Cacheable(value = "itemCache", sync = true), +		public Optional<TestBean> findById(String id) {, +			return Optional.of(new TestBean(id));, +		}, +, +		@CachePut(cacheNames = "itemCache", key = "#item.name"), +		public TestBean insertItem(TestBean item) {, +			return item;, +		}, +, +	}, +, +	@Configuration, +	@EnableCaching, +	public static class Spr14853Config {, +, +		@Bean, +		public CacheManager cacheManager() {, +			return new ConcurrentMapCacheManager();, +		}, +, +		@Bean, +		public Spr14853Service service() {, +			return new Spr14853Service();, +		}, +	}, +]