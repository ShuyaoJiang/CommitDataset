[+++ b/spring-aspects/src/main/java/org/springframework/cache/aspectj/AbstractCacheAspect.aj, +import org.springframework.beans.factory.DisposableBean;, + * @author Stephane Nicoll, +public abstract aspect AbstractCacheAspect extends CacheAspectSupport implements DisposableBean {, +	@Override, +	public void destroy() {, +		clearMetadataCache(); // An aspect is basically a singleton, +	}, +, +++ b/spring-aspects/src/main/java/org/springframework/cache/aspectj/AbstractCacheAspect.aj, +import org.springframework.beans.factory.DisposableBean;, + * @author Stephane Nicoll, +public abstract aspect AbstractCacheAspect extends CacheAspectSupport implements DisposableBean {, +	@Override, +	public void destroy() {, +		clearMetadataCache(); // An aspect is basically a singleton, +	}, +, +++ b/spring-aspects/src/test/java/org/springframework/cache/aspectj/AspectJAnnotationTests.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.context.ConfigurableApplicationContext;, +	protected ConfigurableApplicationContext getApplicationContext() {, +++ b/spring-aspects/src/main/java/org/springframework/cache/aspectj/AbstractCacheAspect.aj, +import org.springframework.beans.factory.DisposableBean;, + * @author Stephane Nicoll, +public abstract aspect AbstractCacheAspect extends CacheAspectSupport implements DisposableBean {, +	@Override, +	public void destroy() {, +		clearMetadataCache(); // An aspect is basically a singleton, +	}, +, +++ b/spring-aspects/src/test/java/org/springframework/cache/aspectj/AspectJAnnotationTests.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.context.ConfigurableApplicationContext;, +	protected ConfigurableApplicationContext getApplicationContext() {, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/config/AbstractJCacheConfiguration.java, +++ b/spring-aspects/src/main/java/org/springframework/cache/aspectj/AbstractCacheAspect.aj, +import org.springframework.beans.factory.DisposableBean;, + * @author Stephane Nicoll, +public abstract aspect AbstractCacheAspect extends CacheAspectSupport implements DisposableBean {, +	@Override, +	public void destroy() {, +		clearMetadataCache(); // An aspect is basically a singleton, +	}, +, +++ b/spring-aspects/src/test/java/org/springframework/cache/aspectj/AspectJAnnotationTests.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.context.ConfigurableApplicationContext;, +	protected ConfigurableApplicationContext getApplicationContext() {, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/config/AbstractJCacheConfiguration.java, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/config/JCacheConfigurer.java, + * <p>To be implemented by classes annotated with, + * @{@link org.springframework.cache.annotation.EnableCaching} that wish or, + * need to specify explicitly how exception caches are resolved for, + * annotation-driven cache management. Consider extending {@link JCacheConfigurerSupport},, + * which provides a stub implementation of all interface methods., + *, + * <p>See @{@link org.springframework.cache.annotation.EnableCaching} for, + * general examples and context; see {@link #exceptionCacheResolver()} for detailed, + * @see JCacheConfigurerSupport, +	 * public class AppConfig extends JCacheConfigurerSupport {, +++ b/spring-aspects/src/main/java/org/springframework/cache/aspectj/AbstractCacheAspect.aj, +import org.springframework.beans.factory.DisposableBean;, + * @author Stephane Nicoll, +public abstract aspect AbstractCacheAspect extends CacheAspectSupport implements DisposableBean {, +	@Override, +	public void destroy() {, +		clearMetadataCache(); // An aspect is basically a singleton, +	}, +, +++ b/spring-aspects/src/test/java/org/springframework/cache/aspectj/AspectJAnnotationTests.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.context.ConfigurableApplicationContext;, +	protected ConfigurableApplicationContext getApplicationContext() {, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/config/AbstractJCacheConfiguration.java, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/config/JCacheConfigurer.java, + * <p>To be implemented by classes annotated with, + * @{@link org.springframework.cache.annotation.EnableCaching} that wish or, + * need to specify explicitly how exception caches are resolved for, + * annotation-driven cache management. Consider extending {@link JCacheConfigurerSupport},, + * which provides a stub implementation of all interface methods., + *, + * <p>See @{@link org.springframework.cache.annotation.EnableCaching} for, + * general examples and context; see {@link #exceptionCacheResolver()} for detailed, + * @see JCacheConfigurerSupport, +	 * public class AppConfig extends JCacheConfigurerSupport {, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/config/JCacheConfigurerSupport.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and]