[+++ b/spring-framework-reference/src/mvc.xml, +      <section id="mvc-ann-modelattrib-methods">, +        <title>Using <interfacename>@ModelAttribute</interfacename> on a controller method</title>, +        <para>The <interfacename>@ModelAttribute</interfacename> annotation can be used on a , +        method or on a method argument. This section explains its usage on a method while the , +        next section explains its usage on a method argument.</para>, +        , +        <para>An <interfacename>@ModelAttribute</interfacename> on a method indicates a method , +        for adding model attributes. A few examples:</para>, +        , +        <programlisting language="java">@ModelAttribute, +public void populateModel(Model model) {, +    model.addAttribute("types", this.clinic.getPetTypes();, +    // add more attributes ..., +}, +, +@ModelAttribute, +public void addAccount(@RequestParam String number, Model model) {, +    Account account = accountManager.findAccount(number);, +    model.addAttribute(account);, +}, +, +@ModelAttribute, +public Account addAccount(@RequestParam String number) {, +    return accountManager.findAccount(number);, +}, +</programlisting>        , +, +        <para><interfacename>@ModelAttribute</interfacename> methods are not associated, +        with any request mappings. Simply they are invoked prior , +        to the invocation of every , +        <interfacename>@RequestMapping</interfacename> method in the same controller., +        In terms of method arguments they support the same argument types as , +        <interfacename>@RequestMapping</interfacename> methods, hence allowing access to request , +        parameters, path variables, and so on -- see <xref linkend="mvc-ann-arguments"/>, +        for a complete listing.</para>, +, +        <para>There are two common use cases for <interfacename>@ModelAttribute</interfacename>, +        methods. One, is to add commonly needed model attributes - see the first example , +        above where the model is populated with pet types to be shown in a drop-down. , +        The second use case is to pre-load a command object - see the second and third , +        examples above with the Account object (more on command objects in the next section).</para>, +, +		<para>Note the two styles of <interfacename>@ModelAttribute</interfacename> methods., +		In one style, the method accepts a <classname>Model</classname> and adds any number , +		of model attributes to it. In the second style, the method adds an attribute implicitly , +		by having it as its return value. That results in the object being added as an, +		attribute to the model. You can choose between the two styles depending on , +		whether you need to add one model attribute or multiple.</para>, +, +        <para>A controller can have any number of <interfacename>@ModelAttribute</interfacename> , +        methods. All such methods are invoked before <interfacename>@RequestMapping</interfacename> , +        methods within the same controller each contributing model attributes.</para>, +		, +		<para>What happens when a model attribute name is not explicitly provided? In such cases, +		a default name is assigned to the model attribute., +		For example if the method returns an object of type <classname>Account</classname>,, +		the default name used is "account". However, you can also change it to something else, +		through the value of the <interfacename>@ModelAttribute</interfacename> annotation. , +		Or if adding attributes directly to the <classname>Model</classname>, use the , +		appropriate overloaded <literal>addAttribute(..)</literal> method providing, +		both the attribute name and the attribute value.</para>, +, +		<para>Lastly the <interfacename>@ModelAttribute</interfacename> annotation can also , +		be used directly on an <interfacename>@RequestMapping</interfacename> method. In this , +		cause, the return value of the <interfacename>@RequestMapping</interfacename> method , +		will be added as a model attribute and the view name will be derived using , +		a convention -- see <xref linkend="mvc-coc-r2vnt"/>.</para>, +		, +      </section>, +, +      <section id="mvc-ann-modelattrib-method-args">, +        <title>Using <interfacename>@ModelAttribute</interfacename> on a controller method argument</title>, +        , +        <para>As explained in the previous section an <interfacename>@ModelAttribute</interfacename>, +        annotation can be used on a method or on a method argument. When used on a method argument,, +        the <interfacename>@ModelAttribute</interfacename> annotation indicates a command object. A command, +        object is an object with properties (e.g. <classname>Account</classname> rather than , +        a simple type like <literal>int</literal> or <literal>String</literal>) that is used to , +        populate a form or reversely to be populated with the data from an HTML form. , +        As you will see command objects can significantly automate the process of, +        working with forms -- rather than dealing with individual form, +        parameters one at a time you'll be have them in a one command object.</para>, +        , +        <para>To be more precise annotating a method argument with , +        <interfacename>@ModelAttribute</interfacename> means 3 things:, +        <orderedlist>, +        	<listitem>The command object should be located and/or instantiated.</listitem>, +        	<listitem>It should be populated with request parameters from the current request.</listitem>, +        	<listitem>The object should be added to the model.</listitem>, +        </orderedlist>, +        See the following example:, +        <programlisting language="java">, +@RequestMapping(value="/owners/{ownerId}/pets/{petId}/edit", method = RequestMethod.POST), +public String processSubmit(<emphasis role="bold">@ModelAttribute("pet") Pet pet</emphasis>) {, +        <para>The <interfacename>@ModelAttribute</interfacename> annotation, +        designates "pet" as a command object. But where does the object come from? There are two options., +        It may have been added to the model by an <interfacename>@ModelAttribute</interfacename> , +        method as explained in the previous section. Or otherwise if it's not already in the model, it, +        is instantiated through the default constructor. Typically if the object needs to be retrieved]