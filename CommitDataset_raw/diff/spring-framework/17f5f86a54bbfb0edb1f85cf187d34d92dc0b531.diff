[+++ b/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequestFactory.java, + * Copyright 2002-2016 the original author or authors., + * {@link org.springframework.http.client.ClientHttpRequestFactory} implementation, + * that uses <a href="http://netty.io/">Netty 4</a> to create requests., + * <p>Allows to use a pre-configured {@link EventLoopGroup} instance: useful for, + * sharing across multiple clients., +, +	@Override, +	public void afterPropertiesSet() {, +		if (this.sslContext == null) {, +			this.sslContext = getDefaultClientSslContext();, +		}, +	}, +, +	private SslContext getDefaultClientSslContext() {, +		try {, +			return SslContextBuilder.forClient().build();, +		}, +		catch (SSLException ex) {, +			throw new IllegalStateException("Could not create default client SslContext", ex);, +		}, +	}, +, +, +	@Override, +	public ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IOException {, +		return createRequestInternal(uri, httpMethod);, +	}, +, +	@Override, +	public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) throws IOException {, +		return createRequestInternal(uri, httpMethod);, +	}, +, +	private Netty4ClientHttpRequest createRequestInternal(URI uri, HttpMethod httpMethod) {, +		return new Netty4ClientHttpRequest(getBootstrap(uri), uri, httpMethod);, +	}, +, +		boolean isSecure = (uri.getPort() == 443 ||, +				(uri.getPort() == -1 && "https".equalsIgnoreCase(uri.getScheme())));, +++ b/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequestFactory.java, + * Copyright 2002-2016 the original author or authors., + * {@link org.springframework.http.client.ClientHttpRequestFactory} implementation, + * that uses <a href="http://netty.io/">Netty 4</a> to create requests., + * <p>Allows to use a pre-configured {@link EventLoopGroup} instance: useful for, + * sharing across multiple clients., +, +	@Override, +	public void afterPropertiesSet() {, +		if (this.sslContext == null) {, +			this.sslContext = getDefaultClientSslContext();, +		}, +	}, +, +	private SslContext getDefaultClientSslContext() {, +		try {, +			return SslContextBuilder.forClient().build();, +		}, +		catch (SSLException ex) {, +			throw new IllegalStateException("Could not create default client SslContext", ex);, +		}, +	}, +, +, +	@Override, +	public ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IOException {, +		return createRequestInternal(uri, httpMethod);, +	}, +, +	@Override, +	public AsyncClientHttpRequest createAsyncRequest(URI uri, HttpMethod httpMethod) throws IOException {, +		return createRequestInternal(uri, httpMethod);, +	}, +, +	private Netty4ClientHttpRequest createRequestInternal(URI uri, HttpMethod httpMethod) {, +		return new Netty4ClientHttpRequest(getBootstrap(uri), uri, httpMethod);, +	}, +, +		boolean isSecure = (uri.getPort() == 443 ||, +				(uri.getPort() == -1 && "https".equalsIgnoreCase(uri.getScheme())));, +++ b/spring-web/src/test/java/org/springframework/web/client/AbstractJettyServerTestCase.java, + * Copyright 2002-2016 the original author or authors., +, +, +, +, +, +, +, +, +, +, +		protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {]