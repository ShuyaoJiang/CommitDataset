[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/ResponseStatusExceptionResolver.java, + * Copyright 2002-2015 the original author or authors., +		else if (ex.getCause() != null && ex.getCause() instanceof Exception) {, +			ex = (Exception) ex.getCause();, +			return doResolveException(request, response, handler, ex);, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/ResponseStatusExceptionResolver.java, + * Copyright 2002-2015 the original author or authors., +		else if (ex.getCause() != null && ex.getCause() instanceof Exception) {, +			ex = (Exception) ex.getCause();, +			return doResolveException(request, response, handler, ex);, +		}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/annotation/ResponseStatusExceptionResolverTests.java, + * Copyright 2002-2015 the original author or authors., +import static org.junit.Assert.*;, +, +import org.springframework.beans.TypeMismatchException;, +import org.springframework.tests.sample.beans.ITestBean;, +	// SPR-12903, +, +	@Test, +	public void nestedException() throws Exception {, +		Exception cause = new StatusCodeAndReasonMessageException();, +		TypeMismatchException ex = new TypeMismatchException("value", ITestBean.class, cause);, +		ModelAndView mav = exceptionResolver.resolveException(request, response, null, ex);, +		assertNotNull("No ModelAndView returned", mav);, +		assertTrue("No Empty ModelAndView returned", mav.isEmpty());, +		assertEquals("Invalid status code", 410, response.getStatus());, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/ResponseStatusExceptionResolver.java, + * Copyright 2002-2015 the original author or authors., +		else if (ex.getCause() != null && ex.getCause() instanceof Exception) {, +			ex = (Exception) ex.getCause();, +			return doResolveException(request, response, handler, ex);, +		}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/annotation/ResponseStatusExceptionResolverTests.java, + * Copyright 2002-2015 the original author or authors., +import static org.junit.Assert.*;, +, +import org.springframework.beans.TypeMismatchException;, +import org.springframework.tests.sample.beans.ITestBean;, +	// SPR-12903, +, +	@Test, +	public void nestedException() throws Exception {, +		Exception cause = new StatusCodeAndReasonMessageException();, +		TypeMismatchException ex = new TypeMismatchException("value", ITestBean.class, cause);, +		ModelAndView mav = exceptionResolver.resolveException(request, response, null, ex);, +		assertNotNull("No ModelAndView returned", mav);, +		assertTrue("No Empty ModelAndView returned", mav.isEmpty());, +		assertEquals("Invalid status code", 410, response.getStatus());, +	}, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletAnnotationControllerHandlerMethodTests.java, +import org.springframework.web.bind.annotation.PathVariable;, +	// SPR-12903, +, +	@Test, +	public void pathVariableWithCustomConverter() throws Exception {, +		initServlet(new ApplicationContextInitializer<GenericWebApplicationContext>() {, +			@Override, +			public void initialize(GenericWebApplicationContext context) {, +				RootBeanDefinition csDef = new RootBeanDefinition(FormattingConversionServiceFactoryBean.class);, +				csDef.getPropertyValues().add("converters", new AnnotatedExceptionRaisingConverter());, +				RootBeanDefinition wbiDef = new RootBeanDefinition(ConfigurableWebBindingInitializer.class);, +				wbiDef.getPropertyValues().add("conversionService", csDef);, +				RootBeanDefinition adapterDef = new RootBeanDefinition(RequestMappingHandlerAdapter.class);, +				adapterDef.getPropertyValues().add("webBindingInitializer", wbiDef);, +				context.registerBeanDefinition("handlerAdapter", adapterDef);, +			}, +		}, PathVariableWithCustomConverterController.class);, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myPath/1");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		getServlet().service(request, response);, +		assertEquals(404, response.getStatus());, +	}, +, +	public static class PathVariableWithCustomConverterController {, +, +		@RequestMapping("/myPath/{id}"), +		public void myHandle(@PathVariable("id") ITestBean bean) throws Exception {, +		}, +	}, +, +	public static class AnnotatedExceptionRaisingConverter implements Converter<String, ITestBean> {, +, +		@Override, +		public ITestBean convert(String source) {, +			throw new NotFoundException();, +		}, +, +		@ResponseStatus(HttpStatus.NOT_FOUND), +		private static class NotFoundException extends RuntimeException {, +		}, +	}, +, +	@Controller]