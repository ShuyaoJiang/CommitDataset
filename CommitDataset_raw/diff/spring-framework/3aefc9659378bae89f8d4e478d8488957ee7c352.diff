[+++ b/spring-context/src/main/java/org/springframework/jmx/export/annotation/AnnotationJmxAttributeSource.java, +import java.lang.reflect.Array;, +import java.util.Collection;, +import java.util.Set;, +import org.springframework.beans.BeanUtils;, + * reads annotations and exposes the corresponding attributes., + * @see ManagedResource, + * @see ManagedAttribute, + * @see ManagedOperation, +	public org.springframework.jmx.export.metadata.ManagedResource getManagedResource(Class<?> beanClass) throws InvalidMetadataException {, +		ManagedResource ann = AnnotationUtils.findAnnotation(beanClass, ManagedResource.class);, +		org.springframework.jmx.export.metadata.ManagedResource managedResource = new org.springframework.jmx.export.metadata.ManagedResource();, +	public org.springframework.jmx.export.metadata.ManagedAttribute getManagedAttribute(Method method) throws InvalidMetadataException {, +		ManagedAttribute ann = AnnotationUtils.findAnnotation(method, ManagedAttribute.class);, +		org.springframework.jmx.export.metadata.ManagedAttribute managedAttribute = new org.springframework.jmx.export.metadata.ManagedAttribute();, +	public org.springframework.jmx.export.metadata.ManagedMetric getManagedMetric(Method method) throws InvalidMetadataException {, +		ManagedMetric ann = AnnotationUtils.findAnnotation(method, ManagedMetric.class);, +		return copyPropertiesToBean(ann, org.springframework.jmx.export.metadata.ManagedMetric.class);, +	public org.springframework.jmx.export.metadata.ManagedOperation getManagedOperation(Method method) throws InvalidMetadataException {, +		ManagedOperation ann = AnnotationUtils.findAnnotation(method, ManagedOperation.class);, +		return copyPropertiesToBean(ann, org.springframework.jmx.export.metadata.ManagedOperation.class);, +	public org.springframework.jmx.export.metadata.ManagedOperationParameter[] getManagedOperationParameters(Method method), +		Set<ManagedOperationParameter> anns = AnnotationUtils.getRepeatableAnnotations(, +				method, ManagedOperationParameter.class, ManagedOperationParameters.class);, +		return copyPropertiesToBeanArray(anns, org.springframework.jmx.export.metadata.ManagedOperationParameter.class);, +	public org.springframework.jmx.export.metadata.ManagedNotification[] getManagedNotifications(Class<?> clazz), +			throws InvalidMetadataException {, +, +		Set<ManagedNotification> anns = AnnotationUtils.getRepeatableAnnotations(, +				clazz, ManagedNotification.class, ManagedNotifications.class);, +		return copyPropertiesToBeanArray(anns, org.springframework.jmx.export.metadata.ManagedNotification.class);, +, +, +	@SuppressWarnings("unchecked"), +	private static <T> T[] copyPropertiesToBeanArray(Collection<? extends Annotation> anns, Class<T> beanClass) {, +		T[] beans = (T[]) Array.newInstance(beanClass, anns.size());, +		int i = 0;, +		for (Annotation ann : anns) {, +			beans[i++] = copyPropertiesToBean(ann, beanClass);, +		return beans;, +	}, +, +	private static <T> T copyPropertiesToBean(Annotation ann, Class<T> beanClass) {, +		if (ann == null) {, +			return null;, +		}, +		T bean = BeanUtils.instantiate(beanClass);, +		AnnotationBeanUtils.copyPropertiesToBean(ann, bean);, +		return bean;, +++ b/spring-context/src/main/java/org/springframework/jmx/export/annotation/AnnotationJmxAttributeSource.java, +import java.lang.reflect.Array;, +import java.util.Collection;, +import java.util.Set;, +import org.springframework.beans.BeanUtils;, + * reads annotations and exposes the corresponding attributes., + * @see ManagedResource, + * @see ManagedAttribute, + * @see ManagedOperation, +	public org.springframework.jmx.export.metadata.ManagedResource getManagedResource(Class<?> beanClass) throws InvalidMetadataException {, +		ManagedResource ann = AnnotationUtils.findAnnotation(beanClass, ManagedResource.class);, +		org.springframework.jmx.export.metadata.ManagedResource managedResource = new org.springframework.jmx.export.metadata.ManagedResource();, +	public org.springframework.jmx.export.metadata.ManagedAttribute getManagedAttribute(Method method) throws InvalidMetadataException {, +		ManagedAttribute ann = AnnotationUtils.findAnnotation(method, ManagedAttribute.class);, +		org.springframework.jmx.export.metadata.ManagedAttribute managedAttribute = new org.springframework.jmx.export.metadata.ManagedAttribute();, +	public org.springframework.jmx.export.metadata.ManagedMetric getManagedMetric(Method method) throws InvalidMetadataException {, +		ManagedMetric ann = AnnotationUtils.findAnnotation(method, ManagedMetric.class);, +		return copyPropertiesToBean(ann, org.springframework.jmx.export.metadata.ManagedMetric.class);, +	public org.springframework.jmx.export.metadata.ManagedOperation getManagedOperation(Method method) throws InvalidMetadataException {, +		ManagedOperation ann = AnnotationUtils.findAnnotation(method, ManagedOperation.class);, +		return copyPropertiesToBean(ann, org.springframework.jmx.export.metadata.ManagedOperation.class);, +	public org.springframework.jmx.export.metadata.ManagedOperationParameter[] getManagedOperationParameters(Method method), +		Set<ManagedOperationParameter> anns = AnnotationUtils.getRepeatableAnnotations(, +				method, ManagedOperationParameter.class, ManagedOperationParameters.class);, +		return copyPropertiesToBeanArray(anns, org.springframework.jmx.export.metadata.ManagedOperationParameter.class);, +	public org.springframework.jmx.export.metadata.ManagedNotification[] getManagedNotifications(Class<?> clazz), +			throws InvalidMetadataException {, +, +		Set<ManagedNotification> anns = AnnotationUtils.getRepeatableAnnotations(, +				clazz, ManagedNotification.class, ManagedNotifications.class);, +		return copyPropertiesToBeanArray(anns, org.springframework.jmx.export.metadata.ManagedNotification.class);, +, +, +	@SuppressWarnings("unchecked"), +	private static <T> T[] copyPropertiesToBeanArray(Collection<? extends Annotation> anns, Class<T> beanClass) {, +		T[] beans = (T[]) Array.newInstance(beanClass, anns.size());, +		int i = 0;, +		for (Annotation ann : anns) {, +			beans[i++] = copyPropertiesToBean(ann, beanClass);, +		return beans;, +	}, +, +	private static <T> T copyPropertiesToBean(Annotation ann, Class<T> beanClass) {, +		if (ann == null) {, +			return null;, +		}, +		T bean = BeanUtils.instantiate(beanClass);, +		AnnotationBeanUtils.copyPropertiesToBean(ann, bean);, +		return bean;, +++ b/spring-context/src/main/java/org/springframework/jmx/export/annotation/ManagedAttribute.java, + * Copyright 2002-2015 the original author or authors.]