[+++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/ConfigurableJtaPlatform.java, + * Copyright 2002-2013 the original author or authors., +import java.lang.reflect.InvocationHandler;, +import java.lang.reflect.Method;, +import java.lang.reflect.Proxy;, +import javax.transaction.Status;, +import javax.transaction.Synchronization;, +import javax.transaction.SystemException;, +import javax.transaction.Transaction;, +import javax.transaction.TransactionSynchronizationRegistry;, +import org.hibernate.TransactionException;, +import org.hibernate.service.Service;, + * Implementation of Hibernate 4's JtaPlatform SPI (which has a different package, + * location in Hibernate 4.0-4.2 vs 4.3), exposing passed-in {@link TransactionManager},, + * {@link UserTransaction} and {@link TransactionSynchronizationRegistry} references., +@SuppressWarnings({"serial", "unchecked"}), +class ConfigurableJtaPlatform implements InvocationHandler {, +, +	static final Class<? extends Service> jtaPlatformClass;, +, +	static {, +		Class<?> jpClass;, +		try {, +			// Try Hibernate 4.0-4.2 JtaPlatform variant, +			jpClass = SpringSessionContext.class.getClassLoader().loadClass(, +					"org.hibernate.service.jta.platform.spi.JtaPlatform");, +		}, +		catch (ClassNotFoundException ex) {, +			try {, +				// Try Hibernate 4.3 JtaPlatform variant, +				jpClass = SpringSessionContext.class.getClassLoader().loadClass(, +						"org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform");, +			}, +			catch (ClassNotFoundException ex2) {, +				throw new IllegalStateException("Neither Hibernate 4.0-4.2 nor 4.3 variant of JtaPlatform found");, +			}, +		}, +		jtaPlatformClass = (Class<? extends Service>) jpClass;, +	}, +, +	static String getJtaPlatformBasePackage() {, +		String className = jtaPlatformClass.getName();, +		return className.substring(0, className.length() - "spi.JtaPlatform".length());, +	}, +, +	private final TransactionSynchronizationRegistry transactionSynchronizationRegistry;, +, +	 * @param tsr the JTA 1.1 TransactionSynchronizationRegistry (optional), +	public ConfigurableJtaPlatform(TransactionManager tm, UserTransaction ut, TransactionSynchronizationRegistry tsr) {, +		this.transactionSynchronizationRegistry = tsr;, +	public TransactionManager retrieveTransactionManager() {, +	public UserTransaction retrieveUserTransaction() {, +	public Object getTransactionIdentifier(Transaction transaction) {, +		return transaction;, +	public boolean canRegisterSynchronization() {, +		try {, +			return (this.transactionManager.getStatus() == Status.STATUS_ACTIVE);, +		}, +		catch (SystemException ex) {, +			throw new TransactionException("Could not determine JTA transaction status", ex);, +		}, +	}, +, +	public void registerSynchronization(Synchronization synchronization) {, +		if (this.transactionSynchronizationRegistry != null) {, +			this.transactionSynchronizationRegistry.registerInterposedSynchronization(synchronization);, +		}, +		else {, +			try {, +				this.transactionManager.getTransaction().registerSynchronization(synchronization);, +			}, +			catch (Exception ex) {, +				throw new TransactionException("Could not access JTA Transaction to register synchronization", ex);, +			}, +		}, +	}, +, +	public int getCurrentStatus() throws SystemException {, +		return this.transactionManager.getStatus();, +	}, +, +, +	public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {, +		Method targetMethod = getClass().getMethod(method.getName(), method.getParameterTypes());, +		return targetMethod.invoke(this, args);, +	}, +, +	/**, +	 * Obtain a proxy that implements the current Hibernate version's JtaPlatform interface, +	 * in the right package location, delegating all invocations to the same-named methods, +	 * on this ConfigurableJtaPlatform class itself., +	 */, +	public Object getJtaPlatformProxy() {, +		return Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] {jtaPlatformClass}, this);, +++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/ConfigurableJtaPlatform.java, + * Copyright 2002-2013 the original author or authors., +import java.lang.reflect.InvocationHandler;, +import java.lang.reflect.Method;, +import java.lang.reflect.Proxy;, +import javax.transaction.Status;]