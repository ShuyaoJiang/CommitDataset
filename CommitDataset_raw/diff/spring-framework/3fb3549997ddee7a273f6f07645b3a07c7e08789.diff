[+++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/DefaultMappingTargetFactory.java, +	public Object createTarget(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/DefaultMappingTargetFactory.java, +	public Object createTarget(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/MappingContextHolder.java, +public abstract class MappingContextHolder {, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/DefaultMappingTargetFactory.java, +	public Object createTarget(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/MappingContextHolder.java, +public abstract class MappingContextHolder {, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/MappingConverter.java, +	/**, +	 * Creates a new Converter that delegates to the mapper to complete the type conversion process., +	 * Uses a {@link DefaultMappingTargetFactory} to create the target object to map and return., +	 * @param mapper the mapper, +	 */, +	/**, +	 * Creates a new Converter that delegates to the mapper to complete the type conversion process., +	 * Uses the specified MappingTargetFactory to create the target object to map and return., +	 * @param mapper the mapper, +	 */, +		return createTargetAndMap(source, sourceType, targetType);, +	private Object createTargetAndMap(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +			Object target = this.mappingTargetFactory.createTarget(source, sourceType, targetType);, +					+ this.mappingTargetFactory.getClass().getName() + "] does not support targetType [", +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/DefaultMappingTargetFactory.java, +	public Object createTarget(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/MappingContextHolder.java, +public abstract class MappingContextHolder {, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/MappingConverter.java, +	/**, +	 * Creates a new Converter that delegates to the mapper to complete the type conversion process., +	 * Uses a {@link DefaultMappingTargetFactory} to create the target object to map and return., +	 * @param mapper the mapper, +	 */, +	/**, +	 * Creates a new Converter that delegates to the mapper to complete the type conversion process., +	 * Uses the specified MappingTargetFactory to create the target object to map and return., +	 * @param mapper the mapper, +	 */, +		return createTargetAndMap(source, sourceType, targetType);, +	private Object createTargetAndMap(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +			Object target = this.mappingTargetFactory.createTarget(source, sourceType, targetType);, +					+ this.mappingTargetFactory.getClass().getName() + "] does not support targetType [", +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/MappingTargetFactory.java, +	public Object createTarget(Object source, TypeDescriptor sourceType, TypeDescriptor targetType);, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/DefaultMappingTargetFactory.java, +	public Object createTarget(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/MappingContextHolder.java, +public abstract class MappingContextHolder {, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/MappingConverter.java, +	/**, +	 * Creates a new Converter that delegates to the mapper to complete the type conversion process., +	 * Uses a {@link DefaultMappingTargetFactory} to create the target object to map and return., +	 * @param mapper the mapper, +	 */, +	/**, +	 * Creates a new Converter that delegates to the mapper to complete the type conversion process., +	 * Uses the specified MappingTargetFactory to create the target object to map and return., +	 * @param mapper the mapper, +	 */, +		return createTargetAndMap(source, sourceType, targetType);, +	private Object createTargetAndMap(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +			Object target = this.mappingTargetFactory.createTarget(source, sourceType, targetType);, +					+ this.mappingTargetFactory.getClass().getName() + "] does not support targetType [", +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/MappingTargetFactory.java, +	public Object createTarget(Object source, TypeDescriptor sourceType, TypeDescriptor targetType);, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/SpelMapper.java, +		this.conversionService.addGenericConverter(sourceType, targetType, new MappingConverter(nestedMapper,, +				targetFactory));, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/DefaultMappingTargetFactory.java, +	public Object createTarget(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/MappingContextHolder.java, +public abstract class MappingContextHolder {, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/MappingConverter.java, +	/**, +	 * Creates a new Converter that delegates to the mapper to complete the type conversion process., +	 * Uses a {@link DefaultMappingTargetFactory} to create the target object to map and return., +	 * @param mapper the mapper, +	 */, +	/**, +	 * Creates a new Converter that delegates to the mapper to complete the type conversion process., +	 * Uses the specified MappingTargetFactory to create the target object to map and return., +	 * @param mapper the mapper, +	 */, +		return createTargetAndMap(source, sourceType, targetType);, +	private Object createTargetAndMap(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +			Object target = this.mappingTargetFactory.createTarget(source, sourceType, targetType);, +					+ this.mappingTargetFactory.getClass().getName() + "] does not support targetType [", +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/MappingTargetFactory.java, +	public Object createTarget(Object source, TypeDescriptor sourceType, TypeDescriptor targetType);, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/SpelMapper.java, +		this.conversionService.addGenericConverter(sourceType, targetType, new MappingConverter(nestedMapper,, +				targetFactory));, +++ b/org.springframework.context/src/test/java/org/springframework/mapping/support/SpelMapperTests.java, +import org.springframework.core.convert.TypeDescriptor;, +	public void mapBeanNestedCustomNestedMapperCustomMappingTargetFactory() {, +		PersonDto source = new PersonDto();, +		final NestedDto nested = new NestedDto();, +		nested.foo = "bar";]