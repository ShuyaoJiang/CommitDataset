[+++ b/org.springframework.web/src/main/java/org/springframework/http/converter/HttpMessageConverter.java, +	 * @param mediaType the media type to read, can be {@code null} if not specified., +	 * Typically the value of a {@code Content-Type} header., +	 * @param mediaType the media type to write, can be {@code null} if not specified., +	 * Typically the value of an {@code Accept} header., +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/HttpMessageConverter.java, +	 * @param mediaType the media type to read, can be {@code null} if not specified., +	 * Typically the value of a {@code Content-Type} header., +	 * @param mediaType the media type to write, can be {@code null} if not specified., +	 * Typically the value of an {@code Accept} header., +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java, +, +, +		}, +		else {, +	protected Long getContentLength(Resource resource, MediaType contentType) throws IOException {, +		return resource.contentLength();, +, +			return (StringUtils.hasText(mediaType) ? MediaType.parseMediaType(mediaType) : null);, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/HttpMessageConverter.java, +	 * @param mediaType the media type to read, can be {@code null} if not specified., +	 * Typically the value of a {@code Content-Type} header., +	 * @param mediaType the media type to write, can be {@code null} if not specified., +	 * Typically the value of an {@code Accept} header., +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java, +, +, +		}, +		else {, +	protected Long getContentLength(Resource resource, MediaType contentType) throws IOException {, +		return resource.contentLength();, +, +			return (StringUtils.hasText(mediaType) ? MediaType.parseMediaType(mediaType) : null);, +++ b/org.springframework.web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java, + * Copyright 2002-2010 the original author or authors., + * {@link javax.servlet.Filter} that generates an <code>ETag</code> value based on the content on the response., + * This ETag is compared to the <code>If-None-Match</code> header of the request. If these headers are equal,, + * the response content is not sent, but rather a <code>304 "Not Modified"</code> status instead., + * <p>Since the ETag is based on the response content, the response (or {@link org.springframework.web.servlet.View}), + * is still rendered. As such, this filter only saves bandwidth, not server performance., +, +	 * <p>The default implementation returns {@code true} for response status codes in the {@code 2xx} series., +	protected boolean isEligibleForEtag(HttpServletRequest request, HttpServletResponse response,, +			int responseStatusCode, byte[] responseBody) {, +, +, +	 * {@link HttpServletRequest} wrapper that buffers all content written to the, +	 * {@linkplain #getOutputStream() output stream} and {@linkplain #getWriter() writer},, +	 * and allows this content to be retrieved via a {@link #toByteArray() byte array}., +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/HttpMessageConverter.java, +	 * @param mediaType the media type to read, can be {@code null} if not specified., +	 * Typically the value of a {@code Content-Type} header., +	 * @param mediaType the media type to write, can be {@code null} if not specified., +	 * Typically the value of an {@code Accept} header., +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java, +, +, +		}, +		else {, +	protected Long getContentLength(Resource resource, MediaType contentType) throws IOException {, +		return resource.contentLength();, +, +			return (StringUtils.hasText(mediaType) ? MediaType.parseMediaType(mediaType) : null);, +++ b/org.springframework.web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java, + * Copyright 2002-2010 the original author or authors., + * {@link javax.servlet.Filter} that generates an <code>ETag</code> value based on the content on the response., + * This ETag is compared to the <code>If-None-Match</code> header of the request. If these headers are equal,, + * the response content is not sent, but rather a <code>304 "Not Modified"</code> status instead., + * <p>Since the ETag is based on the response content, the response (or {@link org.springframework.web.servlet.View}), + * is still rendered. As such, this filter only saves bandwidth, not server performance., +, +	 * <p>The default implementation returns {@code true} for response status codes in the {@code 2xx} series., +	protected boolean isEligibleForEtag(HttpServletRequest request, HttpServletResponse response,, +			int responseStatusCode, byte[] responseBody) {, +, +, +	 * {@link HttpServletRequest} wrapper that buffers all content written to the, +	 * {@linkplain #getOutputStream() output stream} and {@linkplain #getWriter() writer},, +	 * and allows this content to be retrieved via a {@link #toByteArray() byte array}., +++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriUtils.java, + * @see <a href="http://www.ietf.org/rfc/rfc3986.txt">RFC 3986</a>, +, +, +	 * Encodes the given source URI into an encoded String. All various URI components, +	 * are encoded according to their respective valid character sets., +	 * Encodes the given HTTP URI into an encoded String. All various URI components, +	 * are encoded according to their respective valid character sets., +	 * <p><strong>Note</strong> that this method does not support fragments ({@code #}),, +	 * as these are not supposed to be sent to the server, but retained by the client., +	 * Encodes the given source URI components into an encoded String., +	 * All various URI components are optional, but encoded according, +	public static String encodeUriComponents(String scheme, String authority, String userinfo,, +			String host, String port, String path, String query, String fragment, String encoding), +			throws UnsupportedEncodingException {, +, +		for (byte b : source) {]