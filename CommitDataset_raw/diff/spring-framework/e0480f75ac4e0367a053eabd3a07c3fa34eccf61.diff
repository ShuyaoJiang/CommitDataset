[+++ b/spring-aop/src/main/java/org/springframework/aop/MethodBeforeAdvice.java, + * Copyright 2002-2018 the original author or authors., + * @author Rod Johnson, +++ b/spring-aop/src/main/java/org/springframework/aop/MethodBeforeAdvice.java, + * Copyright 2002-2018 the original author or authors., + * @author Rod Johnson, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, +	 * and sets them explicitly., +	/** Non-null if after throwing advice binds the thrown value. */, +	/** Non-null if after returning advice binds the return value. */, +	 * supported at index 0 if present at all)., +	 * supported at index 0 if present at all)., +	 * to the advice method., +++ b/spring-aop/src/main/java/org/springframework/aop/MethodBeforeAdvice.java, + * Copyright 2002-2018 the original author or authors., + * @author Rod Johnson, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, +	 * and sets them explicitly., +	/** Non-null if after throwing advice binds the thrown value. */, +	/** Non-null if after returning advice binds the return value. */, +	 * supported at index 0 if present at all)., +	 * supported at index 0 if present at all)., +	 * to the advice method., +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscoverer.java, + * Copyright 2002-2018 the original author or authors., +	/** The pointcut expression associated with the advice, as a simple String. */, +	/** If the advice is afterReturning, and binds the return value, this is the parameter name used. */, +	/** If the advice is afterThrowing, and binds the thrown value, this is the parameter name used. */, +	 * Create a new discoverer that attempts to discover parameter names., +	 * Match up args against unbound arguments of primitive types., +++ b/spring-aop/src/main/java/org/springframework/aop/MethodBeforeAdvice.java, + * Copyright 2002-2018 the original author or authors., + * @author Rod Johnson, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, +	 * and sets them explicitly., +	/** Non-null if after throwing advice binds the thrown value. */, +	/** Non-null if after returning advice binds the return value. */, +	 * supported at index 0 if present at all)., +	 * supported at index 0 if present at all)., +	 * to the advice method., +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscoverer.java, + * Copyright 2002-2018 the original author or authors., +	/** The pointcut expression associated with the advice, as a simple String. */, +	/** If the advice is afterReturning, and binds the return value, this is the parameter name used. */, +	/** If the advice is afterThrowing, and binds the thrown value, this is the parameter name used. */, +	 * Create a new discoverer that attempts to discover parameter names., +	 * Match up args against unbound arguments of primitive types., +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJPointcutAdvisor.java, + * Copyright 2002-2018 the original author or authors., +	 * Create a new AspectJPointcutAdvisor for the given advice., +++ b/spring-aop/src/main/java/org/springframework/aop/MethodBeforeAdvice.java, + * Copyright 2002-2018 the original author or authors., + * @author Rod Johnson, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, +	 * and sets them explicitly., +	/** Non-null if after throwing advice binds the thrown value. */, +	/** Non-null if after returning advice binds the return value. */, +	 * supported at index 0 if present at all)., +	 * supported at index 0 if present at all)., +	 * to the advice method., +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscoverer.java, + * Copyright 2002-2018 the original author or authors., +	/** The pointcut expression associated with the advice, as a simple String. */, +	/** If the advice is afterReturning, and binds the return value, this is the parameter name used. */, +	/** If the advice is afterThrowing, and binds the thrown value, this is the parameter name used. */, +	 * Create a new discoverer that attempts to discover parameter names., +	 * Match up args against unbound arguments of primitive types., +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJPointcutAdvisor.java, + * Copyright 2002-2018 the original author or authors., +	 * Create a new AspectJPointcutAdvisor for the given advice., +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJProxyUtils.java, + * Copyright 2002-2018 the original author or authors., +	 * @param advisors the advisors available, +	 * @return {@code true} if any special {@link Advisor Advisors} were added, otherwise {@code false}, +++ b/spring-aop/src/main/java/org/springframework/aop/MethodBeforeAdvice.java, + * Copyright 2002-2018 the original author or authors., + * @author Rod Johnson, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, +	 * and sets them explicitly., +	/** Non-null if after throwing advice binds the thrown value. */, +	/** Non-null if after returning advice binds the return value. */, +	 * supported at index 0 if present at all)., +	 * supported at index 0 if present at all)., +	 * to the advice method., +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscoverer.java, + * Copyright 2002-2018 the original author or authors., +	/** The pointcut expression associated with the advice, as a simple String. */, +	/** If the advice is afterReturning, and binds the return value, this is the parameter name used. */, +	/** If the advice is afterThrowing, and binds the thrown value, this is the parameter name used. */, +	 * Create a new discoverer that attempts to discover parameter names., +	 * Match up args against unbound arguments of primitive types., +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJPointcutAdvisor.java, + * Copyright 2002-2018 the original author or authors., +	 * Create a new AspectJPointcutAdvisor for the given advice., +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJProxyUtils.java, + * Copyright 2002-2018 the original author or authors., +	 * @param advisors the advisors available, +	 * @return {@code true} if any special {@link Advisor Advisors} were added, otherwise {@code false}, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/DeclareParentsAdvisor.java, +	 * (cannot use method such as init() to share common code, due the use of final fields).]