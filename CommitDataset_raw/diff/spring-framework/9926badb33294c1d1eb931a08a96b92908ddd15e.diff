[+++ b/src/asciidoc/index.adoc, +* `@TestPropertySource`, +, ++, +, +A class-level annotation that is used to configure the locations of properties files and, +inlined properties to be added to the `Environment`'s set of `PropertySources` for an, +`ApplicationContext` loaded for an integration test., +, ++ , +, +Test property sources have higher precedence than those loaded from the operating, +system's environment or Java system properties as well as property sources added by the, +application declaratively via `@PropertySource` or programmatically. Thus, test property, +sources can be used to selectively override properties defined in system and application, +property sources. Furthermore, inlined properties have higher precedence than properties, +loaded from resource locations., +, ++, +, +The following example demonstrates how to declare a properties file from the classpath., +, ++, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@ContextConfiguration, +	**@TestPropertySource**("/test.properties"), +	public class MyIntegrationTests {, +		// class body..., +	}, +----, +, ++, +, +The following example demonstrates how to declare _inlined_ properties., +, ++, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@ContextConfiguration, +	**@TestPropertySource**(properties = { "timezone = GMT", "port: 4242" }), +	public class MyIntegrationTests {, +		// class body..., +	}, +----, +, +* `@TestPropertySource`, +[[testcontext-ctx-management-property-sources]], +====== Context configuration with test property sources, +, +Spring 3.1 introduced first-class support in the framework for the notion of an, +environment with a hierarchy of _property sources_, and since Spring 4.1 integration, +tests can be configured with test-specific property sources. In contrast to the, +`@PropertySource` annotation used on `@Configuration` classes, the `@TestPropertySource`, +annotation can be declared on a test class to declare resource locations for test, +properties files or _inlined_ properties. These test property sources will be added to, +the `Environment`'s set of `PropertySources` for the `ApplicationContext` loaded for the, +annotated integration test., +, +[NOTE], +====, +`@TestPropertySource` may be used with any implementation of the `SmartContextLoader`, +SPI, but `@TestPropertySource` is not supported with implementations of the older, +`ContextLoader` SPI., +, +Implementations of `SmartContextLoader` gain access to merged test property source values, +via the `getPropertySourceLocations()` and `getPropertySourceProperties()` methods in, +`MergedContextConfiguration`., +====, +, +*Declaring test property sources*, +, +Test properties files can be configured via the `locations` or `value` attribute of, +`@TestPropertySource` as shown in the following example., +, +Both traditional and XML-based properties file formats are supported -- for example,, +`"classpath:/com/example/test.properties"` or `"file:/path/to/file.xml"`., +, +Each path will be interpreted as a Spring `Resource`. A plain path -- for example,, +`"test.properties"` -- will be treated as a classpath resource that is _relative_ to the, +package in which the test class is defined. A path starting with a slash will be treated, +as an _absolute_ classpath resource, for example: `"/org/example/test.xml"`. A path which, +references a URL (e.g., a path prefixed with `classpath:`, `file:`, `http:`, etc.) will, +be loaded using the specified resource protocol. Resource location wildcards (e.g., +`**/*.properties`) are not permitted: each location must evaluate to exactly one, +`.properties` or `.xml` resource., +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@ContextConfiguration, +	@TestPropertySource("/test.properties"), +	public class MyIntegrationTests {, +		// class body..., +	}, +----]