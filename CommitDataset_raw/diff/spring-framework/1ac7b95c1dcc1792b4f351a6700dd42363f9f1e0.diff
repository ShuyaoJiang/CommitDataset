[+++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/AbstractListenerContainerParser.java, + * Copyright 2002-2009 the original author or authors., +	protected static final String PHASE_ATTRIBUTE = "phase";, +, +++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/AbstractListenerContainerParser.java, + * Copyright 2002-2009 the original author or authors., +	protected static final String PHASE_ATTRIBUTE = "phase";, +, +++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/JcaListenerContainerParser.java, + * Copyright 2002-2009 the original author or authors., +		String phase = containerEle.getAttribute(PHASE_ATTRIBUTE);, +		if (StringUtils.hasText(phase)) {, +			containerDef.getPropertyValues().add("phase", phase);, +		}, +, +++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/AbstractListenerContainerParser.java, + * Copyright 2002-2009 the original author or authors., +	protected static final String PHASE_ATTRIBUTE = "phase";, +, +++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/JcaListenerContainerParser.java, + * Copyright 2002-2009 the original author or authors., +		String phase = containerEle.getAttribute(PHASE_ATTRIBUTE);, +		if (StringUtils.hasText(phase)) {, +			containerDef.getPropertyValues().add("phase", phase);, +		}, +, +++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/JmsListenerContainerParser.java, +++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/AbstractListenerContainerParser.java, + * Copyright 2002-2009 the original author or authors., +	protected static final String PHASE_ATTRIBUTE = "phase";, +, +++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/JcaListenerContainerParser.java, + * Copyright 2002-2009 the original author or authors., +		String phase = containerEle.getAttribute(PHASE_ATTRIBUTE);, +		if (StringUtils.hasText(phase)) {, +			containerDef.getPropertyValues().add("phase", phase);, +		}, +, +++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/JmsListenerContainerParser.java, +++ b/org.springframework.jms/src/main/resources/org/springframework/jms/config/spring-jms-3.0.xsd, +			<xsd:attribute name="phase" type="xsd:string">, +				<xsd:annotation>, +					<xsd:documentation><![CDATA[, +	The lifecycle phase within which this container should start and stop. The lower, +	the value the earlier this container will start and the later it will stop. The, +	default is Integer.MAX_VALUE meaning the container will start as late as possible, +	and stop as soon as possible., +					]]></xsd:documentation>, +				</xsd:annotation>, +			</xsd:attribute>, +++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/AbstractListenerContainerParser.java, + * Copyright 2002-2009 the original author or authors., +	protected static final String PHASE_ATTRIBUTE = "phase";, +, +++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/JcaListenerContainerParser.java, + * Copyright 2002-2009 the original author or authors., +		String phase = containerEle.getAttribute(PHASE_ATTRIBUTE);, +		if (StringUtils.hasText(phase)) {, +			containerDef.getPropertyValues().add("phase", phase);, +		}, +, +++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/JmsListenerContainerParser.java, +++ b/org.springframework.jms/src/main/resources/org/springframework/jms/config/spring-jms-3.0.xsd, +			<xsd:attribute name="phase" type="xsd:string">, +				<xsd:annotation>, +					<xsd:documentation><![CDATA[, +	The lifecycle phase within which this container should start and stop. The lower, +	the value the earlier this container will start and the later it will stop. The, +	default is Integer.MAX_VALUE meaning the container will start as late as possible, +	and stop as soon as possible., +					]]></xsd:documentation>, +				</xsd:annotation>, +			</xsd:attribute>, +++ b/org.springframework.jms/src/test/java/org/springframework/jms/config/JmsNamespaceHandlerTests.java, +		assertEquals(77, phase3);, +		assertEquals(77, phase4);, +++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/AbstractListenerContainerParser.java, + * Copyright 2002-2009 the original author or authors., +	protected static final String PHASE_ATTRIBUTE = "phase";, +, +++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/JcaListenerContainerParser.java, + * Copyright 2002-2009 the original author or authors., +		String phase = containerEle.getAttribute(PHASE_ATTRIBUTE);, +		if (StringUtils.hasText(phase)) {, +			containerDef.getPropertyValues().add("phase", phase);, +		}, +, +++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/JmsListenerContainerParser.java, +++ b/org.springframework.jms/src/main/resources/org/springframework/jms/config/spring-jms-3.0.xsd, +			<xsd:attribute name="phase" type="xsd:string">, +				<xsd:annotation>, +					<xsd:documentation><![CDATA[, +	The lifecycle phase within which this container should start and stop. The lower, +	the value the earlier this container will start and the later it will stop. The, +	default is Integer.MAX_VALUE meaning the container will start as late as possible, +	and stop as soon as possible., +					]]></xsd:documentation>, +				</xsd:annotation>, +			</xsd:attribute>, +++ b/org.springframework.jms/src/test/java/org/springframework/jms/config/JmsNamespaceHandlerTests.java]