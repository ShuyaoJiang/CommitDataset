[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +import java.util.concurrent.atomic.AtomicReference;, +	/**, +	 * COMMITTING -> COMMITTED is the period after doCommit is called but before, +	 * the response status and headers have been applied to the underlying, +	 * response during which time pre-commit actions can still make changes to, +	 * the response status and headers., +	 */, +	private enum State {NEW, COMMITTING, COMMITTED};, +, +, +	private final AtomicReference<State> state = new AtomicReference<>(State.NEW);, +		if (this.state.get() == State.COMMITTED) {, +		return (this.state.get() == State.COMMITTED ?, +				HttpHeaders.readOnlyHttpHeaders(this.headers) : this.headers);, +		return (this.state.get() == State.COMMITTED ?, +				CollectionUtils.unmodifiableMultiValueMap(this.cookies) : this.cookies);, +		if (!this.state.compareAndSet(State.NEW, State.COMMITTING)) {, +			this.state.set(State.COMMITTED);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +import java.util.concurrent.atomic.AtomicReference;, +	/**, +	 * COMMITTING -> COMMITTED is the period after doCommit is called but before, +	 * the response status and headers have been applied to the underlying, +	 * response during which time pre-commit actions can still make changes to, +	 * the response status and headers., +	 */, +	private enum State {NEW, COMMITTING, COMMITTED};, +, +, +	private final AtomicReference<State> state = new AtomicReference<>(State.NEW);, +		if (this.state.get() == State.COMMITTED) {, +		return (this.state.get() == State.COMMITTED ?, +				HttpHeaders.readOnlyHttpHeaders(this.headers) : this.headers);, +		return (this.state.get() == State.COMMITTED ?, +				CollectionUtils.unmodifiableMultiValueMap(this.cookies) : this.cookies);, +		if (!this.state.compareAndSet(State.NEW, State.COMMITTING)) {, +			this.state.set(State.COMMITTED);, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/ServerHttpResponseTests.java]