[+++ b/org.springframework.aop/.classpath, +	<classpathentry kind="var" path="IVY_CACHE/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-2.3.0.jar" sourcepath="/IVY_CACHE/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-sources-2.3.0.jar"/>, +++ b/org.springframework.aop/.classpath, +	<classpathentry kind="var" path="IVY_CACHE/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-2.3.0.jar" sourcepath="/IVY_CACHE/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-sources-2.3.0.jar"/>, +++ b/org.springframework.aop/aop.iml, +    <orderEntry type="module-library">, +      <library>, +        <CLASSES>, +          <root url="jar://$IVY_CACHE$/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-2.3.0.jar!/" />, +        </CLASSES>, +        <JAVADOC />, +        <SOURCES>, +          <root url="jar://$IVY_CACHE$/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-sources-2.3.0.jar!/" />, +        </SOURCES>, +      </library>, +    </orderEntry>, +++ b/org.springframework.aop/.classpath, +	<classpathentry kind="var" path="IVY_CACHE/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-2.3.0.jar" sourcepath="/IVY_CACHE/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-sources-2.3.0.jar"/>, +++ b/org.springframework.aop/aop.iml, +    <orderEntry type="module-library">, +      <library>, +        <CLASSES>, +          <root url="jar://$IVY_CACHE$/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-2.3.0.jar!/" />, +        </CLASSES>, +        <JAVADOC />, +        <SOURCES>, +          <root url="jar://$IVY_CACHE$/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-sources-2.3.0.jar!/" />, +        </SOURCES>, +      </library>, +    </orderEntry>, +++ b/org.springframework.aop/ivy.xml, +		<dependency org="org.easymock" name="com.springsource.org.easymock" rev="2.3.0" conf="test->compile"/>, +++ b/org.springframework.aop/.classpath, +	<classpathentry kind="var" path="IVY_CACHE/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-2.3.0.jar" sourcepath="/IVY_CACHE/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-sources-2.3.0.jar"/>, +++ b/org.springframework.aop/aop.iml, +    <orderEntry type="module-library">, +      <library>, +        <CLASSES>, +          <root url="jar://$IVY_CACHE$/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-2.3.0.jar!/" />, +        </CLASSES>, +        <JAVADOC />, +        <SOURCES>, +          <root url="jar://$IVY_CACHE$/org.easymock/com.springsource.org.easymock/2.3.0/com.springsource.org.easymock-sources-2.3.0.jar!/" />, +        </SOURCES>, +      </library>, +    </orderEntry>, +++ b/org.springframework.aop/ivy.xml, +		<dependency org="org.easymock" name="com.springsource.org.easymock" rev="2.3.0" conf="test->compile"/>, +++ b/org.springframework.aop/src/test/java/org/springframework/aop/framework/MethodCounter.java, +/*, + * Copyright 2002-2007 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.aop.framework;, +, +import java.io.Serializable;, +import java.lang.reflect.Method;, +import java.util.HashMap;, +, +/**, + * Useful abstract superclass for counting advices etc., + * , + * @author Rod Johnson, + */, +public class MethodCounter implements Serializable {, +, +	/** Method name --> count, does not understand overloading */, +	private HashMap map = new HashMap();, +, +	private int allCount;, +, +	protected void count(Method m) {, +		count(m.getName());, +	}, +, +	protected void count(String methodName) {, +		Integer i = (Integer) map.get(methodName);, +		i = (i != null) ? new Integer(i.intValue() + 1) : new Integer(1);, +		map.put(methodName, i);, +		++allCount;, +	}, +, +	public int getCalls(String methodName) {, +		Integer i = (Integer) map.get(methodName);, +		return (i != null ? i.intValue() : 0);, +	}, +, +	public int getCalls() {]