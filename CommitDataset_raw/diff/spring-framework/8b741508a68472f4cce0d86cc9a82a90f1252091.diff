[+++ b/spring-tx/src/main/java/org/springframework/transaction/event/ApplicationListenerMethodTransactionalAdapter.java, + * Copyright 2002-2017 the original author or authors., +		public int getOrder() {, +			return this.listener.getOrder();, +		}, +, +		@Override, +			if (this.phase == TransactionPhase.AFTER_COMMIT && status == STATUS_COMMITTED) {, +			else if (this.phase == TransactionPhase.AFTER_COMPLETION) {, +				processEvent();, +++ b/spring-tx/src/main/java/org/springframework/transaction/event/ApplicationListenerMethodTransactionalAdapter.java, + * Copyright 2002-2017 the original author or authors., +		public int getOrder() {, +			return this.listener.getOrder();, +		}, +, +		@Override, +			if (this.phase == TransactionPhase.AFTER_COMMIT && status == STATUS_COMMITTED) {, +			else if (this.phase == TransactionPhase.AFTER_COMPLETION) {, +				processEvent();, +++ b/spring-tx/src/main/java/org/springframework/transaction/event/TransactionPhase.java, + * Copyright 2002-2017 the original author or authors., + * @author Juergen Hoeller, +	 * <p>Note: This is a specialization of {@link #AFTER_COMPLETION} and, +	 * therefore executes in the same after-completion sequence of events,, +	 * (and not in {@link TransactionSynchronization#afterCommit()})., +	 * <p>Note: This is a specialization of {@link #AFTER_COMPLETION} and, +	 * therefore executes in the same after-completion sequence of events., +	AFTER_ROLLBACK,, +, +	/**, +	 * Fire the event after the transaction has completed., +	 * <p>For more fine-grained events, use {@link #AFTER_COMMIT} or, +	 * {@link #AFTER_ROLLBACK} to intercept transaction commit, +	 * or rollback, respectively., +	 * @see TransactionSynchronization#afterCompletion(int), +	 */, +	AFTER_COMPLETION, +++ b/spring-tx/src/main/java/org/springframework/transaction/event/ApplicationListenerMethodTransactionalAdapter.java, + * Copyright 2002-2017 the original author or authors., +		public int getOrder() {, +			return this.listener.getOrder();, +		}, +, +		@Override, +			if (this.phase == TransactionPhase.AFTER_COMMIT && status == STATUS_COMMITTED) {, +			else if (this.phase == TransactionPhase.AFTER_COMPLETION) {, +				processEvent();, +++ b/spring-tx/src/main/java/org/springframework/transaction/event/TransactionPhase.java, + * Copyright 2002-2017 the original author or authors., + * @author Juergen Hoeller, +	 * <p>Note: This is a specialization of {@link #AFTER_COMPLETION} and, +	 * therefore executes in the same after-completion sequence of events,, +	 * (and not in {@link TransactionSynchronization#afterCommit()})., +	 * <p>Note: This is a specialization of {@link #AFTER_COMPLETION} and, +	 * therefore executes in the same after-completion sequence of events., +	AFTER_ROLLBACK,, +, +	/**, +	 * Fire the event after the transaction has completed., +	 * <p>For more fine-grained events, use {@link #AFTER_COMMIT} or, +	 * {@link #AFTER_ROLLBACK} to intercept transaction commit, +	 * or rollback, respectively., +	 * @see TransactionSynchronization#afterCompletion(int), +	 */, +	AFTER_COMPLETION, +++ b/spring-tx/src/main/java/org/springframework/transaction/event/TransactionalEventListener.java, + * Copyright 2002-2017 the original author or authors., + * <p>If the event is not published within the boundaries of a managed transaction, the, + * event is discarded unless the {@link #fallbackExecution} flag is explicitly set. If a, + * <p>Adding {@link org.springframework.core.annotation.Order @Order} to your annotated, + * method allows you to prioritize that listener amongst other listeners running before, + * or after transaction completion., +@EventListener, +	 * <p>The default phase is {@link TransactionPhase#AFTER_COMMIT}., +	 * <p>The default is {@code ""}, meaning the event is always handled.]