[+++ b/spring-test/src/test/java/org/springframework/test/context/junit4/spr9051/AbstractTransactionalAnnotatedConfigClassTests.java, +import org.springframework.test.annotation.DirtiesContext;, +import org.springframework.test.annotation.DirtiesContext.ClassMode;, + * This set of tests (i.e., all concrete subclasses) investigates the claims made in, +@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD), +	private int countRowsInTable(String tableName) {, +	private int createPerson(String name) {, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/spr9051/AbstractTransactionalAnnotatedConfigClassTests.java, +import org.springframework.test.annotation.DirtiesContext;, +import org.springframework.test.annotation.DirtiesContext.ClassMode;, + * This set of tests (i.e., all concrete subclasses) investigates the claims made in, +@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD), +	private int countRowsInTable(String tableName) {, +	private int createPerson(String name) {, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/spr9051/TransactionalAnnotatedConfigClassWithAtConfigurationTests.java, +			// Ensure that this in-memory database is only used by this class:, +			.setName(getClass().getName())//, +		// NOTE: the two DataSource instances ARE the same!, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/spr9051/AbstractTransactionalAnnotatedConfigClassTests.java, +import org.springframework.test.annotation.DirtiesContext;, +import org.springframework.test.annotation.DirtiesContext.ClassMode;, + * This set of tests (i.e., all concrete subclasses) investigates the claims made in, +@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD), +	private int countRowsInTable(String tableName) {, +	private int createPerson(String name) {, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/spr9051/TransactionalAnnotatedConfigClassWithAtConfigurationTests.java, +			// Ensure that this in-memory database is only used by this class:, +			.setName(getClass().getName())//, +		// NOTE: the two DataSource instances ARE the same!, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/spr9051/TransactionalAnnotatedConfigClassesWithoutAtConfigurationTests.java, +			// Ensure that this in-memory database is only used by this class:, +			.setName(getClass().getName())//, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/spr9051/AbstractTransactionalAnnotatedConfigClassTests.java, +import org.springframework.test.annotation.DirtiesContext;, +import org.springframework.test.annotation.DirtiesContext.ClassMode;, + * This set of tests (i.e., all concrete subclasses) investigates the claims made in, +@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD), +	private int countRowsInTable(String tableName) {, +	private int createPerson(String name) {, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/spr9051/TransactionalAnnotatedConfigClassWithAtConfigurationTests.java, +			// Ensure that this in-memory database is only used by this class:, +			.setName(getClass().getName())//, +		// NOTE: the two DataSource instances ARE the same!, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/spr9051/TransactionalAnnotatedConfigClassesWithoutAtConfigurationTests.java, +			// Ensure that this in-memory database is only used by this class:, +			.setName(getClass().getName())//, +++ b/spring-test/src/test/resources/log4j.xml, +	<appender name="file" class="org.apache.log4j.FileAppender">, +		<param name="File" value="build/spring-test.log" />, +		<layout class="org.apache.log4j.PatternLayout">, +			<param name="ConversionPattern" value="%-5p: %c - %m%n" />, +		</layout>, +	</appender>, +, +, +	<logger name="org.springframework.test.context.support.DelegatingSmartContextLoader">, +		<level value="info" />, +	</logger>, +, +	<logger name="org.springframework.test.context">, +		<level value="warn" />, +		<appender-ref ref="file" />]