[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +		adapter.setMessageReaders(getMessageReaders());, +		adapter.setWebBindingInitializer(getConfigurableWebBindingInitializer());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +		adapter.setMessageReaders(getMessageReaders());, +		adapter.setWebBindingInitializer(getConfigurableWebBindingInitializer());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/BindingContext.java, +import org.springframework.beans.SimpleTypeConverter;, +import org.springframework.beans.TypeConverter;, +import org.springframework.web.bind.support.ConfigurableWebBindingInitializer;, +	private final TypeConverter typeConverter;, +, +		this.typeConverter = initSimpleTypeConverter(initializer);, +	}, +, +	private static SimpleTypeConverter initSimpleTypeConverter(WebBindingInitializer initializer) {, +		SimpleTypeConverter converter = new SimpleTypeConverter();, +		if (initializer instanceof ConfigurableWebBindingInitializer) {, +			converter.setConversionService(, +					((ConfigurableWebBindingInitializer) initializer).getConversionService());, +		}, +		else if (initializer != null) {, +			WebDataBinder dataBinder = new WebDataBinder(null);, +			initializer.initBinder(dataBinder);, +			converter.setConversionService(dataBinder.getConversionService());, +		}, +		return converter;, +	/**, +	 * Return a {@link TypeConverter} for converting plain parameter values., +	 * This is a shortcut for:, +	 * <pre>, +	 * new WebDataBinder(null).getTypeConverter();, +	 * </pre>, +	 */, +	public TypeConverter getTypeConverter() {, +		return this.typeConverter;, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +		adapter.setMessageReaders(getMessageReaders());, +		adapter.setWebBindingInitializer(getConfigurableWebBindingInitializer());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/BindingContext.java, +import org.springframework.beans.SimpleTypeConverter;, +import org.springframework.beans.TypeConverter;, +import org.springframework.web.bind.support.ConfigurableWebBindingInitializer;, +	private final TypeConverter typeConverter;, +, +		this.typeConverter = initSimpleTypeConverter(initializer);, +	}, +, +	private static SimpleTypeConverter initSimpleTypeConverter(WebBindingInitializer initializer) {, +		SimpleTypeConverter converter = new SimpleTypeConverter();, +		if (initializer instanceof ConfigurableWebBindingInitializer) {, +			converter.setConversionService(, +					((ConfigurableWebBindingInitializer) initializer).getConversionService());, +		}, +		else if (initializer != null) {, +			WebDataBinder dataBinder = new WebDataBinder(null);, +			initializer.initBinder(dataBinder);, +			converter.setConversionService(dataBinder.getConversionService());, +		}, +		return converter;, +	/**, +	 * Return a {@link TypeConverter} for converting plain parameter values., +	 * This is a shortcut for:, +	 * <pre>, +	 * new WebDataBinder(null).getTypeConverter();, +	 * </pre>, +	 */, +	public TypeConverter getTypeConverter() {, +		return this.typeConverter;, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java, +import java.util.Map;, +import org.springframework.web.reactive.result.method.BindingContext;, +	protected AbstractMessageReaderArgumentResolver(List<HttpMessageReader<?>> readers) {, +		this(readers, new ReactiveAdapterRegistry());, +			ReactiveAdapterRegistry adapterRegistry) {, +			BindingContext bindingContext, ServerWebExchange exchange) {, +				Map<String, Object> readHints = Collections.emptyMap();, +					Flux<?> flux;, +					if (reader instanceof ServerHttpMessageReader) {, +						ServerHttpMessageReader<?> serverReader = ((ServerHttpMessageReader<?>) reader);, +						flux = serverReader.read(bodyType, elementType, request, response, readHints);, +					}, +					else {, +						flux = reader.read(elementType, request, readHints);, +					}, +					flux = flux.onErrorResumeWith(ex -> Flux.error(wrapReadError(ex, bodyParameter)));, +					Object[] hints = extractValidationHints(bodyParameter);, +					if (hints != null) {, +						flux = flux.concatMap(getValidator(hints, bodyParameter, bindingContext, exchange));, +					Mono<?> mono;, +					if (reader instanceof ServerHttpMessageReader) {, +						ServerHttpMessageReader<?> serverReader = (ServerHttpMessageReader<?>) reader;, +						mono = serverReader.readMono(bodyType, elementType, request, response, readHints);, +					}, +					else {, +						mono = reader.readMono(elementType, request, readHints);]