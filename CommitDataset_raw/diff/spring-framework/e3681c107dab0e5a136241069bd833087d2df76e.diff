[+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableInterceptorChain.java, +		for (CallableProcessingInterceptor interceptor : this.interceptors) {, +				Object result = interceptor.handleTimeout(request, task);, +				if (result == CallableProcessingInterceptor.RESPONSE_HANDLED) {, +					break;, +				}, +				else if (result != CallableProcessingInterceptor.RESULT_NONE) {, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableInterceptorChain.java, +		for (CallableProcessingInterceptor interceptor : this.interceptors) {, +				Object result = interceptor.handleTimeout(request, task);, +				if (result == CallableProcessingInterceptor.RESPONSE_HANDLED) {, +					break;, +				}, +				else if (result != CallableProcessingInterceptor.RESULT_NONE) {, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableProcessingInterceptor.java, + * <p>The {@link #handleTimeout(NativeWebRequest, Callable) afterTimeout} method, +	static final Object RESULT_NONE = new Object();, +, +	static final Object RESPONSE_HANDLED = new Object();, +, +	 * {@link #RESULT_NONE} or {@link #RESPONSE_HANDLED}, concurrent processing, +	 * is resumed and subsequent interceptors are not invoked, +	<T> Object handleTimeout(NativeWebRequest request, Callable<T> task) throws Exception;, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableInterceptorChain.java, +		for (CallableProcessingInterceptor interceptor : this.interceptors) {, +				Object result = interceptor.handleTimeout(request, task);, +				if (result == CallableProcessingInterceptor.RESPONSE_HANDLED) {, +					break;, +				}, +				else if (result != CallableProcessingInterceptor.RESULT_NONE) {, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableProcessingInterceptor.java, + * <p>The {@link #handleTimeout(NativeWebRequest, Callable) afterTimeout} method, +	static final Object RESULT_NONE = new Object();, +, +	static final Object RESPONSE_HANDLED = new Object();, +, +	 * {@link #RESULT_NONE} or {@link #RESPONSE_HANDLED}, concurrent processing, +	 * is resumed and subsequent interceptors are not invoked, +	<T> Object handleTimeout(NativeWebRequest request, Callable<T> task) throws Exception;, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableProcessingInterceptorAdapter.java, +	public <T> Object handleTimeout(NativeWebRequest request, Callable<T> task) throws Exception {, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableInterceptorChain.java, +		for (CallableProcessingInterceptor interceptor : this.interceptors) {, +				Object result = interceptor.handleTimeout(request, task);, +				if (result == CallableProcessingInterceptor.RESPONSE_HANDLED) {, +					break;, +				}, +				else if (result != CallableProcessingInterceptor.RESULT_NONE) {, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableProcessingInterceptor.java, + * <p>The {@link #handleTimeout(NativeWebRequest, Callable) afterTimeout} method, +	static final Object RESULT_NONE = new Object();, +, +	static final Object RESPONSE_HANDLED = new Object();, +, +	 * {@link #RESULT_NONE} or {@link #RESPONSE_HANDLED}, concurrent processing, +	 * is resumed and subsequent interceptors are not invoked, +	<T> Object handleTimeout(NativeWebRequest request, Callable<T> task) throws Exception;, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableProcessingInterceptorAdapter.java, +	public <T> Object handleTimeout(NativeWebRequest request, Callable<T> task) throws Exception {, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java, +			public <S> boolean handleTimeout(NativeWebRequest request, DeferredResult<S> deferredResult) {, +				return true;, +				synchronized (DeferredResult.this) {, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableInterceptorChain.java, +		for (CallableProcessingInterceptor interceptor : this.interceptors) {, +				Object result = interceptor.handleTimeout(request, task);, +				if (result == CallableProcessingInterceptor.RESPONSE_HANDLED) {, +					break;, +				}, +				else if (result != CallableProcessingInterceptor.RESULT_NONE) {, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableProcessingInterceptor.java, + * <p>The {@link #handleTimeout(NativeWebRequest, Callable) afterTimeout} method, +	static final Object RESULT_NONE = new Object();, +, +	static final Object RESPONSE_HANDLED = new Object();, +, +	 * {@link #RESULT_NONE} or {@link #RESPONSE_HANDLED}, concurrent processing, +	 * is resumed and subsequent interceptors are not invoked, +	<T> Object handleTimeout(NativeWebRequest request, Callable<T> task) throws Exception;, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableProcessingInterceptorAdapter.java, +	public <T> Object handleTimeout(NativeWebRequest request, Callable<T> task) throws Exception {, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java, +			public <S> boolean handleTimeout(NativeWebRequest request, DeferredResult<S> deferredResult) {, +				return true;, +				synchronized (DeferredResult.this) {, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResultInterceptorChain.java, +		for (DeferredResultProcessingInterceptor interceptor : this.interceptors) {, +			if (!interceptor.handleTimeout(request, deferredResult)){, +				break;, +			}, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableInterceptorChain.java, +		for (CallableProcessingInterceptor interceptor : this.interceptors) {, +				Object result = interceptor.handleTimeout(request, task);, +				if (result == CallableProcessingInterceptor.RESPONSE_HANDLED) {, +					break;, +				}, +				else if (result != CallableProcessingInterceptor.RESULT_NONE) {, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableProcessingInterceptor.java, + * <p>The {@link #handleTimeout(NativeWebRequest, Callable) afterTimeout} method, +	static final Object RESULT_NONE = new Object();]