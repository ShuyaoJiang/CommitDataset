[+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/JdbcOperations.java, +	/**, +	 * Execute a batch using the supplied SQL statement with the batch of supplied arguments., +	 * @param sql the SQL statement to execute, +	 * @param batchArgs the List of Object arrays containing the batch of arguments for the query, +	 * @return an array containing the numbers of rows affected by each update in the batch, +	 */, +	public int[] batchUpdate(String sql, List<Object[]> batchArgs);, +, +	/**, +	 * Execute a batch using the supplied SQL statement with the batch of supplied arguments., +	 * @param sql the SQL statement to execute., +	 * @param batchArgs the List of Object arrays containing the batch of arguments for the query, +	 * @param argTypes SQL types of the arguments, +	 * (constants from <code>java.sql.Types</code>), +	 * @return an array containing the numbers of rows affected by each update in the batch, +	 */, +	public int[] batchUpdate(String sql, List<Object[]> batchArgs, int[] argTypes);, +	, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/JdbcOperations.java, +	/**, +	 * Execute a batch using the supplied SQL statement with the batch of supplied arguments., +	 * @param sql the SQL statement to execute, +	 * @param batchArgs the List of Object arrays containing the batch of arguments for the query, +	 * @return an array containing the numbers of rows affected by each update in the batch, +	 */, +	public int[] batchUpdate(String sql, List<Object[]> batchArgs);, +, +	/**, +	 * Execute a batch using the supplied SQL statement with the batch of supplied arguments., +	 * @param sql the SQL statement to execute., +	 * @param batchArgs the List of Object arrays containing the batch of arguments for the query, +	 * @param argTypes SQL types of the arguments, +	 * (constants from <code>java.sql.Types</code>), +	 * @return an array containing the numbers of rows affected by each update in the batch, +	 */, +	public int[] batchUpdate(String sql, List<Object[]> batchArgs, int[] argTypes);, +	, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java, +	public int[] batchUpdate(String sql, List<Object[]> batchArgs) {, +		return batchUpdate(sql, batchArgs, new int[0]);, +	}, +, +	public int[] batchUpdate(String sql, List<Object[]> batchArgs, int[] argTypes) {, +		return BatchUpdateUtils.executeBatchUpdate(sql, batchArgs, argTypes, this);, +	}, +	, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/JdbcOperations.java, +	/**, +	 * Execute a batch using the supplied SQL statement with the batch of supplied arguments., +	 * @param sql the SQL statement to execute, +	 * @param batchArgs the List of Object arrays containing the batch of arguments for the query, +	 * @return an array containing the numbers of rows affected by each update in the batch, +	 */, +	public int[] batchUpdate(String sql, List<Object[]> batchArgs);, +, +	/**, +	 * Execute a batch using the supplied SQL statement with the batch of supplied arguments., +	 * @param sql the SQL statement to execute., +	 * @param batchArgs the List of Object arrays containing the batch of arguments for the query, +	 * @param argTypes SQL types of the arguments, +	 * (constants from <code>java.sql.Types</code>), +	 * @return an array containing the numbers of rows affected by each update in the batch, +	 */, +	public int[] batchUpdate(String sql, List<Object[]> batchArgs, int[] argTypes);, +	, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java, +	public int[] batchUpdate(String sql, List<Object[]> batchArgs) {, +		return batchUpdate(sql, batchArgs, new int[0]);, +	}, +, +	public int[] batchUpdate(String sql, List<Object[]> batchArgs, int[] argTypes) {, +		return BatchUpdateUtils.executeBatchUpdate(sql, batchArgs, argTypes, this);, +	}, +	, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProvider.java, + * {@link org.springframework.jdbc.core.simple.SimpleJdbcCall}., +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/JdbcOperations.java, +	/**, +	 * Execute a batch using the supplied SQL statement with the batch of supplied arguments., +	 * @param sql the SQL statement to execute, +	 * @param batchArgs the List of Object arrays containing the batch of arguments for the query, +	 * @return an array containing the numbers of rows affected by each update in the batch, +	 */, +	public int[] batchUpdate(String sql, List<Object[]> batchArgs);, +, +	/**, +	 * Execute a batch using the supplied SQL statement with the batch of supplied arguments., +	 * @param sql the SQL statement to execute., +	 * @param batchArgs the List of Object arrays containing the batch of arguments for the query, +	 * @param argTypes SQL types of the arguments, +	 * (constants from <code>java.sql.Types</code>), +	 * @return an array containing the numbers of rows affected by each update in the batch, +	 */, +	public int[] batchUpdate(String sql, List<Object[]> batchArgs, int[] argTypes);, +	, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java, +	public int[] batchUpdate(String sql, List<Object[]> batchArgs) {, +		return batchUpdate(sql, batchArgs, new int[0]);, +	}]