[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/HandlerResultMatchers.java, +import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;, +	 * Assert the controller method used to process the request. The expected, +	 * method is specified through a "mock" controller method invocation, +	 * similar to {@link MvcUriComponentsBuilder#fromMethodCall(Object)}., +	 * <p>For example given this controller:, +	 * <pre class="code">, +	 * &#064;RestController, +	 * static class SimpleController {, +	 *, +	 *     &#064;RequestMapping("/"), +	 *     public ResponseEntity<Void> handle() {, +	 *         return ResponseEntity.ok().build();, +	 *     }, +	 * }, +	 * </pre>, +	 * <p>A test can be performed:, +	 * <pre class="code">, +	 * mockMvc.perform(get("/")), +	 *     .andExpect(handler().methodCall(on(SimpleController.class).handle()));, +	 * </pre>, +	 */, +	public ResultMatcher methodCall(final Object info) {, +		return new ResultMatcher() {, +			@Override, +			public void match(MvcResult result) throws Exception {, +				HandlerMethod handlerMethod = getHandlerMethod(result);, +				Method method = ((MvcUriComponentsBuilder.MethodInvocationInfo) info).getControllerMethod();, +				assertEquals("HandlerMethod", method, handlerMethod.getMethod());, +			}, +		};, +	}, +, +	/**, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/HandlerResultMatchers.java, +import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;, +	 * Assert the controller method used to process the request. The expected, +	 * method is specified through a "mock" controller method invocation, +	 * similar to {@link MvcUriComponentsBuilder#fromMethodCall(Object)}., +	 * <p>For example given this controller:, +	 * <pre class="code">, +	 * &#064;RestController, +	 * static class SimpleController {, +	 *, +	 *     &#064;RequestMapping("/"), +	 *     public ResponseEntity<Void> handle() {, +	 *         return ResponseEntity.ok().build();, +	 *     }, +	 * }, +	 * </pre>, +	 * <p>A test can be performed:, +	 * <pre class="code">, +	 * mockMvc.perform(get("/")), +	 *     .andExpect(handler().methodCall(on(SimpleController.class).handle()));, +	 * </pre>, +	 */, +	public ResultMatcher methodCall(final Object info) {, +		return new ResultMatcher() {, +			@Override, +			public void match(MvcResult result) throws Exception {, +				HandlerMethod handlerMethod = getHandlerMethod(result);, +				Method method = ((MvcUriComponentsBuilder.MethodInvocationInfo) info).getControllerMethod();, +				assertEquals("HandlerMethod", method, handlerMethod.getMethod());, +			}, +		};, +	}, +, +	/**, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/HandlerAssertionTests.java, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.is;, +import static org.hamcrest.Matchers.not;, +import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.handler;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;, +import static org.springframework.test.web.servlet.setup.MockMvcBuilders.standaloneSetup;, +	public void testMethodCall() throws Exception {, +		this.mockMvc.perform(get("/")).andExpect(handler().methodCall(on(SimpleController.class).handle()));, +	}, +, +	@Test]