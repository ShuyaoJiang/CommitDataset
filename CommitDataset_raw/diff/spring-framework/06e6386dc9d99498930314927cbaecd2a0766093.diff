[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, + * Copyright 2002-2018 the original author or authors., +			return CollectionUtils.lastElement(this.imports.get(importedClass));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, + * Copyright 2002-2018 the original author or authors., +			return CollectionUtils.lastElement(this.imports.get(importedClass));, +++ b/spring-core/src/main/java/org/springframework/core/env/JOptCommandLinePropertySource.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.util.CollectionUtils;, +import org.springframework.util.StringUtils;, +			String lastOption = CollectionUtils.lastElement(spec.options());, +			if (lastOption != null) {, +				names.add(lastOption);, +		return StringUtils.toStringArray(names);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, + * Copyright 2002-2018 the original author or authors., +			return CollectionUtils.lastElement(this.imports.get(importedClass));, +++ b/spring-core/src/main/java/org/springframework/core/env/JOptCommandLinePropertySource.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.util.CollectionUtils;, +import org.springframework.util.StringUtils;, +			String lastOption = CollectionUtils.lastElement(spec.options());, +			if (lastOption != null) {, +				names.add(lastOption);, +		return StringUtils.toStringArray(names);, +++ b/spring-core/src/main/java/org/springframework/util/CollectionUtils.java, + * Copyright 2002-2018 the original author or authors., +import java.util.SortedSet;, +	 * Retrieve the last element of the given Set, using {@link SortedSet#last()}, +	 * or otherwise iterating over all elements (assuming a linked set)., +	 * @param set the Set to check (may be {@code null} or empty), +	 * @return the last element, or {@code null} if none, +	 * @since 5.0.3, +	 * @see SortedSet, +	 * @see LinkedHashMap#keySet(), +	 * @see java.util.LinkedHashSet, +	 */, +	@Nullable, +	public static <T> T lastElement(@Nullable Set<T> set) {, +		if (isEmpty(set)) {, +			return null;, +		}, +		if (set instanceof SortedSet) {, +			return ((SortedSet<T>) set).last();, +		}, +, +		// Full iteration necessary..., +		Iterator<T> it = set.iterator();, +		T last = null;, +		while (it.hasNext()) {, +			last = it.next();, +		}, +		return last;, +	}, +, +	/**, +	 * Retrieve the last element of the given List, accessing the highest index., +	 * @param list the List to check (may be {@code null} or empty), +	 * @return the last element, or {@code null} if none, +	 * @since 5.0.3, +	 */, +	@Nullable, +	public static <T> T lastElement(@Nullable List<T> list) {, +		if (isEmpty(list)) {, +			return null;, +		}, +		return list.get(list.size() - 1);, +	}, +, +	/**, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, + * Copyright 2002-2018 the original author or authors., +			return CollectionUtils.lastElement(this.imports.get(importedClass));, +++ b/spring-core/src/main/java/org/springframework/core/env/JOptCommandLinePropertySource.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.util.CollectionUtils;, +import org.springframework.util.StringUtils;, +			String lastOption = CollectionUtils.lastElement(spec.options());, +			if (lastOption != null) {, +				names.add(lastOption);, +		return StringUtils.toStringArray(names);, +++ b/spring-core/src/main/java/org/springframework/util/CollectionUtils.java, + * Copyright 2002-2018 the original author or authors., +import java.util.SortedSet;, +	 * Retrieve the last element of the given Set, using {@link SortedSet#last()}, +	 * or otherwise iterating over all elements (assuming a linked set)., +	 * @param set the Set to check (may be {@code null} or empty), +	 * @return the last element, or {@code null} if none, +	 * @since 5.0.3, +	 * @see SortedSet, +	 * @see LinkedHashMap#keySet(), +	 * @see java.util.LinkedHashSet, +	 */, +	@Nullable, +	public static <T> T lastElement(@Nullable Set<T> set) {, +		if (isEmpty(set)) {, +			return null;, +		}, +		if (set instanceof SortedSet) {, +			return ((SortedSet<T>) set).last();]