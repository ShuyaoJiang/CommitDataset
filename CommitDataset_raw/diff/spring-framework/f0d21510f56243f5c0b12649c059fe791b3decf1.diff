[+++ b/spring-context/src/main/java/org/springframework/format/datetime/DateFormatterRegistrar.java, +			return source.getTimeInMillis();, +			Calendar calendar = Calendar.getInstance();, +			calendar.setTimeInMillis(source);, +			return calendar;, +++ b/spring-context/src/main/java/org/springframework/format/datetime/DateFormatterRegistrar.java, +			return source.getTimeInMillis();, +			Calendar calendar = Calendar.getInstance();, +			calendar.setTimeInMillis(source);, +			return calendar;, +++ b/spring-context/src/main/java/org/springframework/format/datetime/joda/JodaTimeFormatterRegistrar.java, +++ b/spring-context/src/main/java/org/springframework/format/datetime/DateFormatterRegistrar.java, +			return source.getTimeInMillis();, +			Calendar calendar = Calendar.getInstance();, +			calendar.setTimeInMillis(source);, +			return calendar;, +++ b/spring-context/src/main/java/org/springframework/format/datetime/joda/JodaTimeFormatterRegistrar.java, +++ b/spring-context/src/main/java/org/springframework/format/datetime/standard/Jsr310DateTimeFormatAnnotationFormatterFactory.java, + * Copyright 2002-2013 the original author or authors., +	 * Factory method used to create a {@link DateTimeFormatter}., +	 * @return a {@link DateTimeFormatter} instance, +++ b/spring-context/src/main/java/org/springframework/format/datetime/DateFormatterRegistrar.java, +			return source.getTimeInMillis();, +			Calendar calendar = Calendar.getInstance();, +			calendar.setTimeInMillis(source);, +			return calendar;, +++ b/spring-context/src/main/java/org/springframework/format/datetime/joda/JodaTimeFormatterRegistrar.java, +++ b/spring-context/src/main/java/org/springframework/format/datetime/standard/Jsr310DateTimeFormatAnnotationFormatterFactory.java, + * Copyright 2002-2013 the original author or authors., +	 * Factory method used to create a {@link DateTimeFormatter}., +	 * @return a {@link DateTimeFormatter} instance, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +, +		public GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {, +				if (!(converter instanceof ConditionalGenericConverter) ||, +						((ConditionalGenericConverter) converter).matches(sourceType, targetType)) {, +++ b/spring-context/src/main/java/org/springframework/format/datetime/DateFormatterRegistrar.java, +			return source.getTimeInMillis();, +			Calendar calendar = Calendar.getInstance();, +			calendar.setTimeInMillis(source);, +			return calendar;, +++ b/spring-context/src/main/java/org/springframework/format/datetime/joda/JodaTimeFormatterRegistrar.java, +++ b/spring-context/src/main/java/org/springframework/format/datetime/standard/Jsr310DateTimeFormatAnnotationFormatterFactory.java, + * Copyright 2002-2013 the original author or authors., +	 * Factory method used to create a {@link DateTimeFormatter}., +	 * @return a {@link DateTimeFormatter} instance, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +, +		public GenericConverter getConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {, +				if (!(converter instanceof ConditionalGenericConverter) ||, +						((ConditionalGenericConverter) converter).matches(sourceType, targetType)) {, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java, +	public void testStringToEnumWithSubclass() throws Exception {, +		BAR, BAZ]