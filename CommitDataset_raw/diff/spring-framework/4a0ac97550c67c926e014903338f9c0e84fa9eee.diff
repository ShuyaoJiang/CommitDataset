[+++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java, +				return determineQualifiedTransactionManager(qualifier);, +				return determineQualifiedTransactionManager(this.transactionManagerBeanName);, +			else if (txAttr != null) { // Do not lookup default bean name if no tx attributes are set, +	private PlatformTransactionManager determineQualifiedTransactionManager(String qualifier) {, +		PlatformTransactionManager txManager = this.transactionManagerCache.get(qualifier);, +		if (txManager == null) {, +			txManager = BeanFactoryAnnotationUtils.qualifiedBeanOfType(, +					this.beanFactory, PlatformTransactionManager.class, qualifier);, +			this.transactionManagerCache.putIfAbsent(qualifier, txManager);, +		}, +		return txManager;, +	}, +, +++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java, +				return determineQualifiedTransactionManager(qualifier);, +				return determineQualifiedTransactionManager(this.transactionManagerBeanName);, +			else if (txAttr != null) { // Do not lookup default bean name if no tx attributes are set, +	private PlatformTransactionManager determineQualifiedTransactionManager(String qualifier) {, +		PlatformTransactionManager txManager = this.transactionManagerCache.get(qualifier);, +		if (txManager == null) {, +			txManager = BeanFactoryAnnotationUtils.qualifiedBeanOfType(, +					this.beanFactory, PlatformTransactionManager.class, qualifier);, +			this.transactionManagerCache.putIfAbsent(qualifier, txManager);, +		}, +		return txManager;, +	}, +, +++ b/spring-tx/src/test/java/org/springframework/transaction/interceptor/TransactionInterceptorTests.java, +	public void determineTransactionManagerWithNoTransactionAttribute() {, +		BeanFactory beanFactory = mock(BeanFactory.class);, +		TransactionInterceptor ti = createTestTransactionInterceptor(beanFactory, null);, +, +		assertNull(ti.determineTransactionManager(null));, +	}, +, +	@Test]