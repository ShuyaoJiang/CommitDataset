[+++ b/org.springframework.web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java, +import java.io.UnsupportedEncodingException;, + * {@link javax.servlet.Filter} that generates an <code>ETag</code> value based on the content on the response. This, + * ETag is compared to the <code>If-None-Match</code> header of the request. If these headers are equal, the resonse, + * content is not sent, but rather a 304 "Not Modified" status., + * <p>Since the ETag is based on the response content, the response (or {@link org.springframework.web.servlet.View}) is, + * still rendered. As such, this filter only saves bandwidth, not server performance., +	 * Generate the ETag header value from the given response body byte array. <p>The default implementation generates an, +	 * MD5 hash., +	 *, +	 * {@link HttpServletRequest} wrapper that buffers all content written to the {@linkplain #getOutputStream() output, +	 * stream} and {@linkplain #getWriter() writer}, and allows this content to be retrieved via a {@link #toByteArray(), +	 * byte array}., +				this.writer = (characterEncoding != null ? new ResponsePrintWriter(characterEncoding) :, +						new ResponsePrintWriter());, +, +			@Override, +			public void write(byte[] b, int off, int len) throws IOException {, +				content.write(b, off, len);, +, +		}, +, +		private class ResponsePrintWriter extends PrintWriter {, +, +			private ResponsePrintWriter() {, +				super(new OutputStreamWriter(content));, +			}, +, +			private ResponsePrintWriter(String characterEncoding) throws UnsupportedEncodingException {, +				super(new OutputStreamWriter(content, characterEncoding));, +			}, +, +			@Override, +			public void write(char buf[], int off, int len) {, +				super.write(buf, off, len);, +				super.flush();, +			}, +, +			@Override, +			public void write(String s, int off, int len) {, +				super.write(s, off, len);, +				super.flush();, +			}, +, +			@Override, +			public void write(int c) {, +				super.write(c);, +				super.flush();, +			}, +, +		}, +, +++ b/org.springframework.web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java, +import java.io.UnsupportedEncodingException;, + * {@link javax.servlet.Filter} that generates an <code>ETag</code> value based on the content on the response. This, + * ETag is compared to the <code>If-None-Match</code> header of the request. If these headers are equal, the resonse, + * content is not sent, but rather a 304 "Not Modified" status., + * <p>Since the ETag is based on the response content, the response (or {@link org.springframework.web.servlet.View}) is, + * still rendered. As such, this filter only saves bandwidth, not server performance., +	 * Generate the ETag header value from the given response body byte array. <p>The default implementation generates an, +	 * MD5 hash., +	 *, +	 * {@link HttpServletRequest} wrapper that buffers all content written to the {@linkplain #getOutputStream() output, +	 * stream} and {@linkplain #getWriter() writer}, and allows this content to be retrieved via a {@link #toByteArray(), +	 * byte array}., +				this.writer = (characterEncoding != null ? new ResponsePrintWriter(characterEncoding) :, +						new ResponsePrintWriter());, +, +			@Override, +			public void write(byte[] b, int off, int len) throws IOException {, +				content.write(b, off, len);, +, +		}, +, +		private class ResponsePrintWriter extends PrintWriter {, +, +			private ResponsePrintWriter() {, +				super(new OutputStreamWriter(content));, +			}, +, +			private ResponsePrintWriter(String characterEncoding) throws UnsupportedEncodingException {, +				super(new OutputStreamWriter(content, characterEncoding));, +			}, +, +			@Override, +			public void write(char buf[], int off, int len) {, +				super.write(buf, off, len);, +				super.flush();, +			}, +, +			@Override, +			public void write(String s, int off, int len) {, +				super.write(s, off, len);, +				super.flush();, +			}, +, +			@Override, +			public void write(int c) {, +				super.write(c);, +				super.flush();]