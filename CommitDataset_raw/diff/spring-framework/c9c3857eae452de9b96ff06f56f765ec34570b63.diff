[+++ b/src/asciidoc/index.adoc, +  generating an HTML 5 AppCache manifests, and more. See <<mvc-config-static-resources>>., +deployed it is recommended that you incorporate a version string into the mapping, +pattern used to request the resources so that you may force clients to request the, +newly deployed version of your application's resources. Support for versioned URLs is, +built into the framework and can be enabled by configuring a resource chain, +on the resource handler. The chain consists of one more `ResourceResolver`, +instances followed by one or more `ResourceTransformer` instances. Together they, +can provide arbitrary resolution and transformation of resources., +The built-in `VersionResourceResolver` can be configured with different strategies., +For example a `FixedVersionStrategy` can use a property, a date, or other as the version., +A `ContentVersionStrategy` uses an MD5 hash computed from the content of the resource, +(known as "fingerprinting" URLs)., +`ContentVersionStrategy` is a good default choice to use except in cases where, +it cannot be used (e.g. with JavaScript module loaders). You can configure, +different version strategies against different patterns as shown below. Keep in mind, +also that computing content-based versions is expensive and therefore resource chain, +caching should be enabled in production., +Java config example;, +			registry.addResourceHandler("/resources/**"), +					.addResourceLocations("/public-resources/"), +					.resourceChain(true).addResolver(, +						new VersionResourceResolver().addContentVersionStrategy("/**"));, +XML example:, +<mvc:resources mapping="/resources/**" location="/public-resources/">, +	<mvc:resource-chain>, +		<mvc:resource-cache />, +		<mvc:resolvers>, +			<mvc:version-resolver>, +				<mvc:content-version-strategy patterns="/**"/>, +			</mvc:version-resolver>, +		</mvc:resolvers>, +	</mvc:resource-chain>, +</mvc:resources>, +In order for the above to work the application must also, +render URLs with versions. The easiest way to do that is to configure the, +`ResourceUrlEncodingFilter` which wraps the response and overrides its `encodeURL` method., +This will work in JSPs, FreeMarker, Velocity, and any other view technology that calls, +the response `encodeURL` method. Alternatively, an application can also inject and, +use directly the `ResourceUrlProvider` bean, which is automatically declared with the MVC, +Java config and the MVC namespace., +, +, +]