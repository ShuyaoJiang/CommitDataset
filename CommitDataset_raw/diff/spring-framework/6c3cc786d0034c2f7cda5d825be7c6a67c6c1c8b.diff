[+++ b/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +, +import org.springframework.format.Printer;, +import static org.junit.Assert.*;, +, +		assertNull(formattingService, +				.convert(null, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +		assertEquals(null, formattingService, +				.convert(null, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.valueOf(String.class)));, +		assertNull(formattingService, +				.convert(null, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +	@Test, +	public void testFormatFieldForAnnotationWithSubclassAsFieldType() throws Exception {, +		formattingService.addFormatterForFieldAnnotation(new JodaDateTimeFormatAnnotationFormatterFactory() {, +			public Printer<?> getPrinter(org.springframework.format.annotation.DateTimeFormat annotation, Class<?> fieldType) {, +				assertEquals(MyDate.class, fieldType);, +				return super.getPrinter(annotation, fieldType);, +			}, +		});, +		formattingService.addConverter(new Converter<MyDate, Long>() {, +			public Long convert(MyDate source) {, +				return  source.getTime();, +			}, +		});, +		formattingService.addConverter(new Converter<MyDate, Date>() {, +			public Date convert(MyDate source) {, +				return source;, +			}, +		});, +, +		formattingService.convert(new MyDate(), new TypeDescriptor(ModelWithSubclassField.class.getField("date")),, +				TypeDescriptor.valueOf(String.class));, +	}, +, +, +	public static class MyDate extends Date {, +	}, +, +, +	private static class ModelWithSubclassField {, +, +		@org.springframework.format.annotation.DateTimeFormat(style = "S-"), +		public MyDate date;, +	}, +, +++ b/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +, +import org.springframework.format.Printer;, +import static org.junit.Assert.*;, +, +		assertNull(formattingService, +				.convert(null, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +		assertEquals(null, formattingService, +				.convert(null, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.valueOf(String.class)));, +		assertNull(formattingService, +				.convert(null, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +	@Test, +	public void testFormatFieldForAnnotationWithSubclassAsFieldType() throws Exception {, +		formattingService.addFormatterForFieldAnnotation(new JodaDateTimeFormatAnnotationFormatterFactory() {, +			public Printer<?> getPrinter(org.springframework.format.annotation.DateTimeFormat annotation, Class<?> fieldType) {, +				assertEquals(MyDate.class, fieldType);, +				return super.getPrinter(annotation, fieldType);, +			}, +		});, +		formattingService.addConverter(new Converter<MyDate, Long>() {, +			public Long convert(MyDate source) {, +				return  source.getTime();, +			}, +		});, +		formattingService.addConverter(new Converter<MyDate, Date>() {, +			public Date convert(MyDate source) {, +				return source;, +			}, +		});, +, +		formattingService.convert(new MyDate(), new TypeDescriptor(ModelWithSubclassField.class.getField("date")),, +				TypeDescriptor.valueOf(String.class));, +	}, +, +, +	public static class MyDate extends Date {, +	}, +, +, +	private static class ModelWithSubclassField {, +, +		@org.springframework.format.annotation.DateTimeFormat(style = "S-"), +		public MyDate date;, +	}, +, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, + * Copyright 2002-2011 the original author or authors., +	public void parameterCsvAsIntegerArray() throws Exception {, +	public void parameterCsvAsIntegerSet() throws Exception {, +		servlet = new DispatcherServlet() {, +			@Override, +			protected WebApplicationContext createWebApplicationContext(WebApplicationContext parent) {, +				GenericWebApplicationContext wac = new GenericWebApplicationContext();, +				wac.registerBeanDefinition("controller", new RootBeanDefinition(CsvController.class));, +				RootBeanDefinition csDef = new RootBeanDefinition(FormattingConversionServiceFactoryBean.class);]