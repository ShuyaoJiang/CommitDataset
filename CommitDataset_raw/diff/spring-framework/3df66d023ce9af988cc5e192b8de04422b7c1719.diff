[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/AbstractAnnotationConfigDispatcherServletInitializer.java, + * Copyright 2002-2016 the original author or authors., + * <p>This is the preferred approach for applications that use Java-based, + * Spring configuration., + *, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/AbstractAnnotationConfigDispatcherServletInitializer.java, + * Copyright 2002-2016 the original author or authors., + * <p>This is the preferred approach for applications that use Java-based, + * Spring configuration., + *, +++ b/src/asciidoc/web-mvc.adoc, +class), and as such is declared in your web application. You need to map requests that, +you want the `DispatcherServlet` to handle, by using a URL mapping. Here is a standard, +Java EE Servlet configuration in a Servlet 3.0+ environment:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	public class MyWebApplicationInitializer implements WebApplicationInitializer {, +, +		@Override, +		public void onStartup(ServletContext container) {, +			ServletRegistration.Dynamic registration = container.addServlet("dispatcher", new DispatcherServlet());, +			registration.setLoadOnStartup(1);, +			registration.addMapping("/example/*");, +		}, +, +	}, +----, +, +In the preceding example, all requests starting with `/example` will be handled by the, +`DispatcherServlet` instance named `example`., +, +`WebApplicationInitializer` is an interface provided by Spring MVC that ensures your, +code-based configuration is detected and automatically used to initialize any Servlet 3, +container. An abstract base class implementation of this interface named, +`AbstractAnnotationConfigDispatcherServletInitializer` makes it even easier to register the, +`DispatcherServlet` by simply specifying its servlet mapping and listing configuration, +classes - it's even the recommended way to set up your Spring MVC application., +See <<mvc-container-config,Code-based Servlet container initialization>> for more details., +, +The `DispatcherServlet` is an actual `Servlet` (it inherits from the `HttpServlet` base, +Below is the `web.xml` equivalent of the above code based example:, +, +`WebApplicationContext`. The root `WebApplicationContext` should contain all the, +infrastructure beans that should be shared between your other contexts and Servlet, +instances. These inherited beans can be overridden in the servlet-specific, +Note that we can achieve the same with java-based configurations:, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	public class GolfingWebAppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {, +, +		@Override, +		protected Class<?>[] getRootConfigClasses() {, +			// GolfingAppConfig defines beans that would be in root-context.xml, +			return new Class[] { GolfingAppConfig.class };, +		}, +, +		@Override, +		protected Class<?>[] getServletConfigClasses() {, +			// GolfingWebConfig defines beans that would be in golfing-servlet.xml, +			return new Class[] { GolfingWebConfig.class };, +		}, +, +		@Override, +		protected String[] getServletMappings() {, +			return new String[] { "/golfing/*" };, +		}, +, +	}, +----, +`AbstractDispatcherServletInitializer`, or better, +location of the `DispatcherServlet` configuration., +, +This is recommended for applications that use Java-based Spring configuration:, +If using XML-based Spring configuration, you should extend directly from]