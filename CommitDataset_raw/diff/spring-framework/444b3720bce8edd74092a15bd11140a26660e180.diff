[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java, +	@SuppressWarnings("unchecked"), +	public void setContextInitializers(ApplicationContextInitializer<? extends ConfigurableApplicationContext>... contextInitializers) {, +		for (ApplicationContextInitializer<? extends ConfigurableApplicationContext> initializer : contextInitializers) {, +			this.contextInitializers.add((ApplicationContextInitializer<ConfigurableApplicationContext>) initializer);, +	/**, +	 * Called by Spring via {@link ApplicationContextAware} to inject the current, +	 * application context. This method allows FrameworkServlets to be registered as, +	 * Spring beans inside an existing {@link WebApplicationContext} rather than, +	 * {@link #findWebApplicationContext() finding} a, +	 * {@link org.springframework.web.context.ContextLoaderListener bootstrapped} context., +	 * <p>Primarily added to support use in embedded servlet containers., +	 * @since 4.0, +	 */, +	@Override, +	public void setApplicationContext(ApplicationContext applicationContext) {, +		if (this.webApplicationContext == null && applicationContext instanceof WebApplicationContext) {, +			this.webApplicationContext = (WebApplicationContext) applicationContext;, +			this.webApplicationContextInjected = true;, +		}, +	}, +, +		// Only call close() on WebApplicationContext if locally managed..., +		if (this.webApplicationContext instanceof ConfigurableApplicationContext && !this.webApplicationContextInjected) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java, +	@SuppressWarnings("unchecked"), +	public void setContextInitializers(ApplicationContextInitializer<? extends ConfigurableApplicationContext>... contextInitializers) {, +		for (ApplicationContextInitializer<? extends ConfigurableApplicationContext> initializer : contextInitializers) {, +			this.contextInitializers.add((ApplicationContextInitializer<ConfigurableApplicationContext>) initializer);, +	/**, +	 * Called by Spring via {@link ApplicationContextAware} to inject the current, +	 * application context. This method allows FrameworkServlets to be registered as, +	 * Spring beans inside an existing {@link WebApplicationContext} rather than, +	 * {@link #findWebApplicationContext() finding} a, +	 * {@link org.springframework.web.context.ContextLoaderListener bootstrapped} context., +	 * <p>Primarily added to support use in embedded servlet containers., +	 * @since 4.0, +	 */, +	@Override, +	public void setApplicationContext(ApplicationContext applicationContext) {, +		if (this.webApplicationContext == null && applicationContext instanceof WebApplicationContext) {, +			this.webApplicationContext = (WebApplicationContext) applicationContext;, +			this.webApplicationContextInjected = true;, +		}, +	}, +, +		// Only call close() on WebApplicationContext if locally managed..., +		if (this.webApplicationContext instanceof ConfigurableApplicationContext && !this.webApplicationContextInjected) {, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/DispatcherServletTests.java, +import org.springframework.context.ApplicationContextInitializer;, +import org.springframework.web.context.ConfigurableWebApplicationContext;, +import org.springframework.web.context.ContextLoader;, +	public void testContextInitializers() throws Exception {, +		DispatcherServlet servlet = new DispatcherServlet();, +		servlet.setContextClass(SimpleWebApplicationContext.class);, +		servlet.setContextInitializers(new TestWebContextInitializer(), new OtherWebContextInitializer());, +		servlet.init(servletConfig);, +		assertEquals("true", servletConfig.getServletContext().getAttribute("initialized"));, +		assertEquals("true", servletConfig.getServletContext().getAttribute("otherInitialized"));, +	}, +, +	public void testContextInitializerClasses() throws Exception {, +		DispatcherServlet servlet = new DispatcherServlet();, +		servlet.setContextClass(SimpleWebApplicationContext.class);, +		servlet.setContextInitializerClasses(, +				TestWebContextInitializer.class.getName() + "," + OtherWebContextInitializer.class.getName());, +		servlet.init(servletConfig);, +		assertEquals("true", servletConfig.getServletContext().getAttribute("initialized"));, +		assertEquals("true", servletConfig.getServletContext().getAttribute("otherInitialized"));, +	}, +, +	public void testGlobalInitializerClasses() throws Exception {, +		DispatcherServlet servlet = new DispatcherServlet();, +		servlet.setContextClass(SimpleWebApplicationContext.class);, +		servletConfig.getServletContext().setInitParameter(ContextLoader.GLOBAL_INITIALIZER_CLASSES_PARAM,, +				TestWebContextInitializer.class.getName() + "," + OtherWebContextInitializer.class.getName());, +		servlet.init(servletConfig);, +		assertEquals("true", servletConfig.getServletContext().getAttribute("initialized"));, +		assertEquals("true", servletConfig.getServletContext().getAttribute("otherInitialized"));, +	}, +, +	public void testMixedInitializerClasses() throws Exception {, +		DispatcherServlet servlet = new DispatcherServlet();, +		servlet.setContextClass(SimpleWebApplicationContext.class);, +		servletConfig.getServletContext().setInitParameter(ContextLoader.GLOBAL_INITIALIZER_CLASSES_PARAM,, +				TestWebContextInitializer.class.getName());, +		servlet.setContextInitializerClasses(OtherWebContextInitializer.class.getName());, +		servlet.init(servletConfig);, +		assertEquals("true", servletConfig.getServletContext().getAttribute("initialized"));, +		assertEquals("true", servletConfig.getServletContext().getAttribute("otherInitialized"));, +	}, +, +, +	private static class TestWebContextInitializer implements ApplicationContextInitializer<ConfigurableWebApplicationContext> {, +, +		@Override, +		public void initialize(ConfigurableWebApplicationContext applicationContext) {, +			applicationContext.getServletContext().setAttribute("initialized", "true");, +		}, +	}]