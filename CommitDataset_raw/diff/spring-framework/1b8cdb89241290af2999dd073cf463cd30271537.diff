[+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/socket/server/AbstractWebSocketIntegrationTests.java, +import reactor.core.publisher.Flux;, +import reactor.util.function.Tuple3;, +import org.springframework.context.Lifecycle;, +import org.springframework.web.reactive.socket.client.JettyWebSocketClient;, +import org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient;, +import org.springframework.web.reactive.socket.client.RxNettyWebSocketClient;, +import org.springframework.web.reactive.socket.client.StandardWebSocketClient;, +import org.springframework.web.reactive.socket.client.UndertowWebSocketClient;, +import org.springframework.web.reactive.socket.client.WebSocketClient;, +import static org.junit.Assume.assumeFalse;, +, +	public WebSocketClient client;, +	public HttpServer server;, +, +	@Parameter(2), +	public Class<?> serverConfigClass;, +	@Parameters(name = "client[{0}] - server [{1}]"), +, +, +		Flux<? extends WebSocketClient> clients = Flux.concat(, +				Flux.just(new StandardWebSocketClient()).repeat(5),, +				Flux.just(new JettyWebSocketClient()).repeat(5),, +				Flux.just(new ReactorNettyWebSocketClient()).repeat(5),, +				Flux.just(new RxNettyWebSocketClient()).repeat(5),, +				Flux.just(new UndertowWebSocketClient()).repeat(5));, +, +		Flux<? extends HttpServer> servers = Flux.just(, +				new TomcatHttpServer(base.getAbsolutePath(), WsContextListener.class),, +				new JettyHttpServer(),, +				new ReactorHttpServer(),, +				new RxNettyHttpServer(),, +				new UndertowHttpServer()).repeat(5);, +, +		Flux<? extends Class<?>> configs = Flux.just(, +				TomcatConfig.class,, +				JettyConfig.class,, +				ReactorNettyConfig.class,, +				RxNettyConfig.class,, +				UndertowConfig.class).repeat(5);, +, +		return Flux.zip(clients, servers, configs), +				.map(Tuple3::toArray), +				.collectList(), +				.block(), +				.toArray(new Object[25][2]);, +, +		// TODO, +		// Caused by: java.io.IOException: Upgrade responses cannot have a transfer coding, +		// at org.xnio.http.HttpUpgrade$HttpUpgradeState.handleUpgrade(HttpUpgrade.java:490), +		// at org.xnio.http.HttpUpgrade$HttpUpgradeState.access$1200(HttpUpgrade.java:165), +		// at org.xnio.http.HttpUpgrade$HttpUpgradeState$UpgradeResultListener.handleEvent(HttpUpgrade.java:461), +		// at org.xnio.http.HttpUpgrade$HttpUpgradeState$UpgradeResultListener.handleEvent(HttpUpgrade.java:400), +		// at org.xnio.ChannelListeners.invokeChannelListener(ChannelListeners.java:92), +, +		assumeFalse(this.client instanceof UndertowWebSocketClient && this.server instanceof RxNettyHttpServer);, +, +, +		if (this.client instanceof Lifecycle) {, +			((Lifecycle) this.client).start();, +		}, +		context.register(DispatcherConfig.class, this.serverConfigClass);, +		if (this.client instanceof Lifecycle) {, +			((Lifecycle) this.client).stop();, +		}, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/socket/server/AbstractWebSocketIntegrationTests.java, +import reactor.core.publisher.Flux;, +import reactor.util.function.Tuple3;, +import org.springframework.context.Lifecycle;, +import org.springframework.web.reactive.socket.client.JettyWebSocketClient;, +import org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient;, +import org.springframework.web.reactive.socket.client.RxNettyWebSocketClient;, +import org.springframework.web.reactive.socket.client.StandardWebSocketClient;, +import org.springframework.web.reactive.socket.client.UndertowWebSocketClient;, +import org.springframework.web.reactive.socket.client.WebSocketClient;, +import static org.junit.Assume.assumeFalse;, +, +	public WebSocketClient client;, +	public HttpServer server;, +, +	@Parameter(2), +	public Class<?> serverConfigClass;, +	@Parameters(name = "client[{0}] - server [{1}]"), +, +, +		Flux<? extends WebSocketClient> clients = Flux.concat(, +				Flux.just(new StandardWebSocketClient()).repeat(5),, +				Flux.just(new JettyWebSocketClient()).repeat(5),, +				Flux.just(new ReactorNettyWebSocketClient()).repeat(5),, +				Flux.just(new RxNettyWebSocketClient()).repeat(5),, +				Flux.just(new UndertowWebSocketClient()).repeat(5));, +, +		Flux<? extends HttpServer> servers = Flux.just(, +				new TomcatHttpServer(base.getAbsolutePath(), WsContextListener.class),, +				new JettyHttpServer(),, +				new ReactorHttpServer(),, +				new RxNettyHttpServer(),, +				new UndertowHttpServer()).repeat(5);, +, +		Flux<? extends Class<?>> configs = Flux.just(]