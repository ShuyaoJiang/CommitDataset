[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		bd.allowCaching = false;, +		bd.allowCaching = false;, +			bd.allowCaching = false;, +	protected void populateBean(String beanName, RootBeanDefinition mbd, BeanWrapper bw) {, +			PropertyDescriptor[] filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);, +	 * excluding ignored dependency types or properties defined on ignored dependency interfaces., +	 * @param bw the BeanWrapper the bean was created with, +	 * @param cache whether to cache filtered PropertyDescriptors for the given bean Class, +	 * @return the filtered PropertyDescriptors, +	 * @see #isExcludedFromDependencyCheck, +	 * @see #filterPropertyDescriptorsForDependencyCheck(org.springframework.beans.BeanWrapper), +	 */, +	protected PropertyDescriptor[] filterPropertyDescriptorsForDependencyCheck(BeanWrapper bw, boolean cache) {, +		PropertyDescriptor[] filtered = this.filteredPropertyDescriptorsCache.get(bw.getWrappedClass());, +		if (filtered == null) {, +			if (cache) {, +				synchronized (this.filteredPropertyDescriptorsCache) {, +					filtered = this.filteredPropertyDescriptorsCache.get(bw.getWrappedClass());, +					if (filtered == null) {, +						filtered = filterPropertyDescriptorsForDependencyCheck(bw);, +						this.filteredPropertyDescriptorsCache.put(bw.getWrappedClass(), filtered);, +					}, +				}, +			}, +			else {, +				filtered = filterPropertyDescriptorsForDependencyCheck(bw);, +			}, +		}, +		return filtered;, +	}, +, +	/**, +	 * Extract a filtered set of PropertyDescriptors from the given BeanWrapper,, +	 * excluding ignored dependency types or properties defined on ignored dependency interfaces., +		return pds.toArray(new PropertyDescriptor[pds.size()]);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		bd.allowCaching = false;, +		bd.allowCaching = false;, +			bd.allowCaching = false;, +	protected void populateBean(String beanName, RootBeanDefinition mbd, BeanWrapper bw) {, +			PropertyDescriptor[] filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);, +	 * excluding ignored dependency types or properties defined on ignored dependency interfaces., +	 * @param bw the BeanWrapper the bean was created with, +	 * @param cache whether to cache filtered PropertyDescriptors for the given bean Class, +	 * @return the filtered PropertyDescriptors, +	 * @see #isExcludedFromDependencyCheck, +	 * @see #filterPropertyDescriptorsForDependencyCheck(org.springframework.beans.BeanWrapper), +	 */, +	protected PropertyDescriptor[] filterPropertyDescriptorsForDependencyCheck(BeanWrapper bw, boolean cache) {, +		PropertyDescriptor[] filtered = this.filteredPropertyDescriptorsCache.get(bw.getWrappedClass());, +		if (filtered == null) {, +			if (cache) {, +				synchronized (this.filteredPropertyDescriptorsCache) {, +					filtered = this.filteredPropertyDescriptorsCache.get(bw.getWrappedClass());, +					if (filtered == null) {, +						filtered = filterPropertyDescriptorsForDependencyCheck(bw);, +						this.filteredPropertyDescriptorsCache.put(bw.getWrappedClass(), filtered);, +					}, +				}, +			}, +			else {, +				filtered = filterPropertyDescriptorsForDependencyCheck(bw);, +			}, +		}, +		return filtered;, +	}, +, +	/**, +	 * Extract a filtered set of PropertyDescriptors from the given BeanWrapper,, +	 * excluding ignored dependency types or properties defined on ignored dependency interfaces., +		return pds.toArray(new PropertyDescriptor[pds.size()]);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/RootBeanDefinition.java, + * Copyright 2002-2012 the original author or authors., +	boolean allowCaching = true;, +, +	boolean isFactoryMethodUnique = false;]