[+++ b/org.springframework.core/src/main/java/org/springframework/util/ReflectionUtils.java, + * Copyright 2002-2009 the original author or authors., +	public static Method findMethod(Class clazz, String name, Class... paramTypes) {, +		while (searchType != null) {, +		return invokeMethod(method, target, new Object[0]);, +	public static Object invokeMethod(Method method, Object target, Object... args) {, +		return invokeJdbcMethod(method, target, new Object[0]);, +	public static Object invokeJdbcMethod(Method method, Object target, Object... args) throws SQLException {, +++ b/org.springframework.core/src/main/java/org/springframework/util/ReflectionUtils.java, + * Copyright 2002-2009 the original author or authors., +	public static Method findMethod(Class clazz, String name, Class... paramTypes) {, +		while (searchType != null) {, +		return invokeMethod(method, target, new Object[0]);, +	public static Object invokeMethod(Method method, Object target, Object... args) {, +		return invokeJdbcMethod(method, target, new Object[0]);, +	public static Object invokeJdbcMethod(Method method, Object target, Object... args) throws SQLException {, +++ b/org.springframework.core/src/test/java/org/springframework/util/ReflectionUtilsTests.java, + * Copyright 2002-2009 the original author or authors., +	@Test, +	public void doWithProtectedMethods() {, +	@Test, +	public void duplicatesFound() {, +		for (String name : mc.getMethodNames()) {, +	@Test, +	public void findMethod() throws Exception {, +		assertNotNull(ReflectionUtils.findMethod(B.class, "bar", String.class));, +		assertNotNull(ReflectionUtils.findMethod(B.class, "foo", Integer.class));, +		assertNotNull(ReflectionUtils.findMethod(B.class, "getClass"));, +, +	private static class ListSavingMethodCallback implements ReflectionUtils.MethodCallback {, +, +		private List<String> methodNames = new LinkedList<String>();, +, +		private List<Method> methods = new LinkedList<Method>();, +, +		public void doWith(Method m) throws IllegalArgumentException, IllegalAccessException {, +			this.methodNames.add(m.getName());, +			this.methods.add(m);, +		}, +, +		public List<String> getMethodNames() {, +			return this.methodNames;, +		}, +, +		public List<Method> getMethods() {, +			return this.methods;, +		}, +	}, +, +, +	private static class TestBeanSubclass extends TestBean {, +, +		@Override, +		public void absquatulate() {, +			throw new UnsupportedOperationException();, +		}, +	}, +, +, +	private static class TestBeanSubclassWithPublicField extends TestBean {, +, +	private static class TestBeanSubclassWithNewField extends TestBean {, +, +	private static class TestBeanSubclassWithFinalField extends TestBean {, +, +]