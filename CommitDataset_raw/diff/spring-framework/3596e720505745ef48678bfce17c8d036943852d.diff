[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/resource/ResourceWebHandler.java, +import org.springframework.web.server.ResponseStatusException;, + * @author Brian Clozel, +	 * Return the configured resource message writer., +						return this.resourceHttpMessageWriter.write(Mono.just(resource),, +								null, ResolvableType.forClass(Resource.class), mediaType,, +								exchange.getRequest(), exchange.getResponse(), Collections.emptyMap());, +					catch (IOException|ResponseStatusException ex) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/resource/ResourceWebHandler.java, +import org.springframework.web.server.ResponseStatusException;, + * @author Brian Clozel, +	 * Return the configured resource message writer., +						return this.resourceHttpMessageWriter.write(Mono.just(resource),, +								null, ResolvableType.forClass(Resource.class), mediaType,, +								exchange.getRequest(), exchange.getResponse(), Collections.emptyMap());, +					catch (IOException|ResponseStatusException ex) {, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/resource/ResourceWebHandlerTests.java, +import static org.hamcrest.Matchers.*;, +import static org.junit.Assert.*;, +import static org.springframework.web.reactive.HandlerMapping.*;, +, +import reactor.core.publisher.Flux;, +import reactor.core.publisher.Mono;, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.core.io.buffer.DataBufferFactory;, +import org.springframework.core.io.buffer.DataBufferUtils;, +import org.springframework.core.io.buffer.DefaultDataBufferFactory;, +import org.springframework.web.server.ResponseStatusException;, +	private DataBufferFactory bufferFactory = new DefaultDataBufferFactory();, +, +		TestSubscriber.subscribe(this.handler.handle(this.exchange)), +				.assertErrorWith(throwable -> {, +					assertThat(throwable, instanceOf(ResponseStatusException.class));, +					ResponseStatusException exc = (ResponseStatusException) throwable;, +					assertThat(exc.getStatus(), is(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE));, +				});, +		String boundary = "--" + this.response.getHeaders().getContentType().toString().substring(30);, +		Mono<DataBuffer> reduced = Flux.from(this.response.getBody()), +				.reduce(this.bufferFactory.allocateBuffer(), (previous, current) -> {, +					previous.write(current);, +					DataBufferUtils.release(current);, +					return previous;, +				});, +, +		TestSubscriber.subscribe(reduced), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/resource/ResourceWebHandler.java, +import org.springframework.web.server.ResponseStatusException;, + * @author Brian Clozel, +	 * Return the configured resource message writer., +						return this.resourceHttpMessageWriter.write(Mono.just(resource),, +								null, ResolvableType.forClass(Resource.class), mediaType,, +								exchange.getRequest(), exchange.getResponse(), Collections.emptyMap());, +					catch (IOException|ResponseStatusException ex) {, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/resource/ResourceWebHandlerTests.java, +import static org.hamcrest.Matchers.*;, +import static org.junit.Assert.*;, +import static org.springframework.web.reactive.HandlerMapping.*;, +, +import reactor.core.publisher.Flux;, +import reactor.core.publisher.Mono;, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.core.io.buffer.DataBufferFactory;, +import org.springframework.core.io.buffer.DataBufferUtils;, +import org.springframework.core.io.buffer.DefaultDataBufferFactory;, +import org.springframework.web.server.ResponseStatusException;, +	private DataBufferFactory bufferFactory = new DefaultDataBufferFactory();, +, +		TestSubscriber.subscribe(this.handler.handle(this.exchange)), +				.assertErrorWith(throwable -> {, +					assertThat(throwable, instanceOf(ResponseStatusException.class));, +					ResponseStatusException exc = (ResponseStatusException) throwable;, +					assertThat(exc.getStatus(), is(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE));, +				});, +		String boundary = "--" + this.response.getHeaders().getContentType().toString().substring(30);, +		Mono<DataBuffer> reduced = Flux.from(this.response.getBody()), +				.reduce(this.bufferFactory.allocateBuffer(), (previous, current) -> {, +					previous.write(current);, +					DataBufferUtils.release(current);, +					return previous;, +				});, +, +		TestSubscriber.subscribe(reduced), +++ b/spring-web-reactive/src/test/resources/org/springframework/web/reactive/resource/test/foo.txt, +Some text.]