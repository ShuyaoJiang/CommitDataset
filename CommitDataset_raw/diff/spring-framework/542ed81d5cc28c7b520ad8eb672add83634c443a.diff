[+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +		AtomicLong countDown = new AtomicLong(maxByteCount);, +		return Flux.from(publisher), +				.takeWhile(buffer -> {, +					int delta = -buffer.readableByteCount();, +					return countDown.getAndAdd(delta) >= 0;, +				}), +				.map(buffer -> {, +					long count = countDown.get();, +					return count >= 0 ? buffer : buffer.slice(0, buffer.readableByteCount() + (int) count);, +		return Flux.from(publisher), +				.skipUntil(buffer -> {, +					int delta = -buffer.readableByteCount();, +					if (byteCountDown.addAndGet(delta) >= 0) {, +						DataBufferUtils.release(buffer);, +					return true;, +				}), +				.map(buffer -> {, +					long count = byteCountDown.get();, +					if (count < 0) {, +						int skipCount = buffer.readableByteCount() + (int) count;, +						return buffer.slice(skipCount, buffer.readableByteCount() - skipCount);, +					return buffer;, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +		AtomicLong countDown = new AtomicLong(maxByteCount);, +		return Flux.from(publisher), +				.takeWhile(buffer -> {, +					int delta = -buffer.readableByteCount();, +					return countDown.getAndAdd(delta) >= 0;, +				}), +				.map(buffer -> {, +					long count = countDown.get();, +					return count >= 0 ? buffer : buffer.slice(0, buffer.readableByteCount() + (int) count);, +		return Flux.from(publisher), +				.skipUntil(buffer -> {, +					int delta = -buffer.readableByteCount();, +					if (byteCountDown.addAndGet(delta) >= 0) {, +						DataBufferUtils.release(buffer);, +					return true;, +				}), +				.map(buffer -> {, +					long count = byteCountDown.get();, +					if (count < 0) {, +						int skipCount = buffer.readableByteCount() + (int) count;, +						return buffer.slice(skipCount, buffer.readableByteCount() - skipCount);, +					return buffer;, +++ b/spring-core/src/test/java/org/springframework/core/io/buffer/DataBufferUtilsTests.java, +	public void takeUntilByteCount() {, +	public void skipUntilByteCount() {, +	public void skipUntilByteCountShouldSkipAll() {]