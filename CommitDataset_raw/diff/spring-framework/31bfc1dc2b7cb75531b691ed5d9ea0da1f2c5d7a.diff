[+++ b/spring-jcl/src/main/java/org/apache/commons/logging/LogAdapter.java, +/*, + * Copyright 2002-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.apache.commons.logging;, +, +import java.io.Serializable;, +import java.util.logging.LogRecord;, +, +import org.apache.logging.log4j.Level;, +import org.apache.logging.log4j.LogManager;, +import org.apache.logging.log4j.spi.ExtendedLogger;, +import org.apache.logging.log4j.spi.LoggerContext;, +import org.slf4j.Logger;, +import org.slf4j.LoggerFactory;, +import org.slf4j.spi.LocationAwareLogger;, +, +/**, + * Spring's common JCL adapter behind {@link LogFactory} and {@link LogFactoryService}., + * Detects the presence of Log4j 2.x / SLF4J, falling back to {@code java.util.logging}., + *, + * @author Juergen Hoeller, + * @since 5.1, + */, +final class LogAdapter {, +, +	private static LogApi logApi = LogApi.JUL;, +, +	static {, +		ClassLoader cl = LogAdapter.class.getClassLoader();, +		try {, +			// Try Log4j 2.x API, +			cl.loadClass("org.apache.logging.log4j.spi.ExtendedLogger");, +			logApi = LogApi.LOG4J;, +		}, +		catch (ClassNotFoundException ex1) {, +			try {, +				// Try SLF4J 1.7 SPI, +				cl.loadClass("org.slf4j.spi.LocationAwareLogger");, +				logApi = LogApi.SLF4J_LAL;, +			}, +			catch (ClassNotFoundException ex2) {, +				try {, +					// Try SLF4J 1.7 API, +					cl.loadClass("org.slf4j.Logger");, +					logApi = LogApi.SLF4J;, +				}, +				catch (ClassNotFoundException ex3) {, +					// Keep java.util.logging as default, +				}, +			}, +		}, +	}, +, +, +	private LogAdapter() {, +	}, +, +, +	/**, +	 * Create an actual {@link Log} instance for the selected API., +	 * @param name the logger name, +	 */, +	public static Log createLog(String name) {, +		switch (logApi) {, +			case LOG4J:, +				return Log4jAdapter.createLog(name);, +			case SLF4J_LAL:, +				return Slf4jAdapter.createLocationAwareLog(name);, +			case SLF4J:, +				return Slf4jAdapter.createLog(name);, +			default:, +				// Defensively use lazy-initializing adapter class here as well since the, +				// java.logging module is not present by default on JDK 9. We are requiring, +				// its presence if neither Log4j nor SLF4J is available; however, in the, +				// case of Log4j or SLF4J, we are trying to prevent early initialization, +				// of the JavaUtilLog adapter - e.g. by a JVM in debug mode - when eagerly, +				// trying to parse the bytecode for all the cases of this switch clause., +				return JavaUtilAdapter.createLog(name);, +		}, +	}, +, +, +	private enum LogApi {LOG4J, SLF4J_LAL, SLF4J, JUL}, +, +, +	private static class Log4jAdapter {]