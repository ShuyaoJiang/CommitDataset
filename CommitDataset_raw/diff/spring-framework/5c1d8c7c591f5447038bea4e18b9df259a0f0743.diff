[+++ b/spring-test/src/test/java/org/springframework/mock/web/MockHttpServletResponseTests.java, +				"Max-Age=0; Expires=Thu, 1 Jan 1970 00:00:00 GMT; " +, +++ b/spring-test/src/test/java/org/springframework/mock/web/MockHttpServletResponseTests.java, +				"Max-Age=0; Expires=Thu, 1 Jan 1970 00:00:00 GMT; " +, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +import java.time.Instant;, +import java.time.ZoneId;, +import java.time.ZonedDateTime;, +import java.time.format.DateTimeFormatter;, +import java.time.format.DateTimeParseException;, +, +	private static final ZoneId GMT = ZoneId.of("GMT");, +, +	/**, +	 * Date formats with time zone as specified in the HTTP RFC, +	 * @see <a href="https://tools.ietf.org/html/rfc7231#section-7.1.1.1">Section 7.1.1.1 of RFC 7231</a>, +	 */, +	private static final DateTimeFormatter[] DATE_FORMATTERS = new DateTimeFormatter[] {, +			DateTimeFormatter.RFC_1123_DATE_TIME,, +			DateTimeFormatter.ofPattern("EEEE, dd-MMM-yy HH:mm:ss zz", Locale.US),, +			DateTimeFormatter.ofPattern("EEE MMM dd HH:mm:ss yyyy",Locale.US).withZone(GMT), +	};, +	 * @see #getFirstZonedDateTime(String), +	 * @see #getFirstZonedDateTime(String), +	 * @see #getFirstZonedDateTime(String), +	 * @see #getFirstZonedDateTime(String), +	 * using the RFC-1123 date-time formatter. The equivalent of, +	 * @see #setZonedDateTime(String, ZonedDateTime), +		Instant instant = Instant.ofEpochMilli(date);, +		ZonedDateTime zonedDateTime = ZonedDateTime.ofInstant(instant, GMT);, +		set(headerName, DATE_FORMATTERS[0].format(zonedDateTime));, +	}, +, +	/**, +	 * Set the given date under the given header name after formatting it as a string, +	 * using the RFC-1123 date-time formatter. The equivalent of, +	 * {@link #set(String, String)} but for date headers., +	 * @since 5.0, +	 */, +	public void setZonedDateTime(String headerName, ZonedDateTime date) {, +		set(headerName, DATE_FORMATTERS[0].format(date));, +	 * @see #getFirstZonedDateTime(String), +	 * @see #getFirstZonedDateTime(String, boolean), +		ZonedDateTime zonedDateTime = getFirstZonedDateTime(headerName, rejectInvalid);, +		return (zonedDateTime != null ? zonedDateTime.toInstant().toEpochMilli() : -1);, +	}, +, +	/**, +	 * Parse the first header value for the given header name as a date,, +	 * return {@code null} if there is no value, or raise {@link IllegalArgumentException}, +	 * if the value cannot be parsed as a date., +	 * @param headerName the header name, +	 * @return the parsed date header, or {@code null} if none, +	 * @since 5.0, +	 */, +	@Nullable, +	public ZonedDateTime getFirstZonedDateTime(String headerName) {, +		return getFirstZonedDateTime(headerName, true);, +	}, +, +	/**, +	 * Parse the first header value for the given header name as a date,, +	 * return {@code null} if there is no value or also in case of an invalid value, +	 * (if {@code rejectInvalid=false}), or raise {@link IllegalArgumentException}, +	 * if the value cannot be parsed as a date., +	 * @param headerName the header name, +	 * @param rejectInvalid whether to reject invalid values with an, +	 * {@link IllegalArgumentException} ({@code true}) or rather return {@code null}, +	 * in that case ({@code false}), +	 * @return the parsed date header, or {@code null} if none (or invalid), + 	 */, +	@Nullable, +	private ZonedDateTime getFirstZonedDateTime(String headerName, boolean rejectInvalid) {, +			return null;, +			// Let's only bother with DateTimeFormatter parsing for long enough values., +, +			// See https://stackoverflow.com/questions/12626699/if-modified-since-http-header-passed-by-ie9-includes-length, +			int parametersIndex = headerValue.indexOf(";");, +			if (parametersIndex != -1) {, +				headerValue = headerValue.substring(0, parametersIndex);, +, +			for (DateTimeFormatter dateFormatter : DATE_FORMATTERS) {, +				try {, +					return ZonedDateTime.parse(headerValue, dateFormatter);, +				}, +				catch (DateTimeParseException ex) {, +, +		return null;, +++ b/spring-test/src/test/java/org/springframework/mock/web/MockHttpServletResponseTests.java, +				"Max-Age=0; Expires=Thu, 1 Jan 1970 00:00:00 GMT; " +, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +import java.time.Instant;, +import java.time.ZoneId;, +import java.time.ZonedDateTime;, +import java.time.format.DateTimeFormatter;, +import java.time.format.DateTimeParseException;, +, +	private static final ZoneId GMT = ZoneId.of("GMT");, +, +	/**]