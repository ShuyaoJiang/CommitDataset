[+++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java, + * @see #addBinding(String), +	 * Add a binding to a model property., +	 * The property may be a path to a member property like "name", or a nested property like "address.city" or "addresses.city"., +	 * If the property path is nested and traverses a collection or Map, do not use indexes., +	 * The property path should express the model-class property structure like addresses.city, not an object structure like addresses[0].city., +	 * Examples:, +	 * <pre>, +	 * name - bind to property 'name', +	 * addresses - bind to property 'addresses', presumably a List&lt;Address&gt; e.g. allowing property expressions like addresses={ 12345 Macy Lane, 1977 Bel Aire Estates } and addresses[0]=12345 Macy Lane, +	 * addresses.city - bind to property 'addresses.city', for all indexed addresses in the collection e.g. allowing property expressions like addresses[0].city=Melbourne, +	 * address.city - bind to property 'address.city', +	 * favoriteFoodByFoodGroup - bind to property 'favoriteFoodByFoodGroup', presumably a Map<FoodGroup, Food>; e.g. allowing favoriteFoodByFoodGroup={ DAIRY=Milk, MEAT=Steak } and favoriteFoodByFoodGroup['DAIRY']=Milk, +	 * favoriteFoodByFoodGroup.name - bind to property 'favoriteFoodByFoodGroup.name', for all keyed Foods in the map; e.g. allowing favoriteFoodByFoodGroup['DAIRY'].name=Milk, +	 * </pre>, +	 * @param propertyPath the model property path, +	 * @return a BindingConfiguration object, allowing additional configuration of the newly added binding, +	 * @throws IllegalArgumentException if no such property path exists on the model, +	 */, +	public BindingConfiguration addBinding(String propertyPath);, +	, +	/**, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java, + * @see #addBinding(String), +	 * Add a binding to a model property., +	 * The property may be a path to a member property like "name", or a nested property like "address.city" or "addresses.city"., +	 * If the property path is nested and traverses a collection or Map, do not use indexes., +	 * The property path should express the model-class property structure like addresses.city, not an object structure like addresses[0].city., +	 * Examples:, +	 * <pre>, +	 * name - bind to property 'name', +	 * addresses - bind to property 'addresses', presumably a List&lt;Address&gt; e.g. allowing property expressions like addresses={ 12345 Macy Lane, 1977 Bel Aire Estates } and addresses[0]=12345 Macy Lane, +	 * addresses.city - bind to property 'addresses.city', for all indexed addresses in the collection e.g. allowing property expressions like addresses[0].city=Melbourne, +	 * address.city - bind to property 'address.city', +	 * favoriteFoodByFoodGroup - bind to property 'favoriteFoodByFoodGroup', presumably a Map<FoodGroup, Food>; e.g. allowing favoriteFoodByFoodGroup={ DAIRY=Milk, MEAT=Steak } and favoriteFoodByFoodGroup['DAIRY']=Milk, +	 * favoriteFoodByFoodGroup.name - bind to property 'favoriteFoodByFoodGroup.name', for all keyed Foods in the map; e.g. allowing favoriteFoodByFoodGroup['DAIRY'].name=Milk, +	 * </pre>, +	 * @param propertyPath the model property path, +	 * @return a BindingConfiguration object, allowing additional configuration of the newly added binding, +	 * @throws IllegalArgumentException if no such property path exists on the model, +	 */, +	public BindingConfiguration addBinding(String propertyPath);, +	, +	/**, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/BindingConfiguration.java, +/*, + * Copyright 2004-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.ui.binding;, +, +import org.springframework.ui.binding.support.GenericBinder;, +import org.springframework.ui.format.Formatter;, +, +/**, + * A fluent interface for configuring a newly added binding., + * @author Keith Donald, + * @see GenericBinder#addBinding(String), + */, +public interface BindingConfiguration {, +	, +	/**, +	 * Set the Formatter to use to format bound property values., +	 * If a collection property, the formatter is used to format collection element values., +	 * Default is null., +	 */, +	BindingConfiguration formatWith(Formatter<?> formatter);, +, +	/**, +	 * Mark the binding as required., +	 * A required binding will generate an exception if no sourceValue is provided to a bind invocation., +	 * This attribute is used to detect client configuration errors., +	 * It is not intended to be used as a user data validation constraint., +	 * Examples:, +	 * <pre>, +	 * name=required - will generate an exception if 'name' is not contained in the source values map., +	 * addresses=required - will generate an exception if 'addresses[n]' is not contained in the source value map for at least one n., +	 * addresses.city=required - will generate an exception if 'addresses[n].city' is not present in the source values map, for every address[n]., +	 * </pre>, +	 */, +	BindingConfiguration required();, +}, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java, + * @see #addBinding(String), +	 * Add a binding to a model property., +	 * The property may be a path to a member property like "name", or a nested property like "address.city" or "addresses.city"., +	 * If the property path is nested and traverses a collection or Map, do not use indexes., +	 * The property path should express the model-class property structure like addresses.city, not an object structure like addresses[0].city., +	 * Examples:]