[+++ b/org.springframework.jms/src/main/java/org/springframework/jms/remoting/JmsInvokerClientInterceptor.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.util.ClassUtils;, +	private static final boolean jms11Available = ClassUtils.hasMethod(ConnectionFactory.class, "createConnection");, +, +		RemoteInvocationResult result;, +	 * Create a new JMS Connection for this JMS invoker., +		if (jms11Available) {, +			return cf.createConnection();, +			return ((QueueConnectionFactory) cf).createQueueConnection();, +	 * Create a new JMS Session for this JMS invoker., +		if (jms11Available) {, +			return con.createSession(false, Session.AUTO_ACKNOWLEDGE);, +			return ((QueueConnection) con).createQueueSession(false, Session.AUTO_ACKNOWLEDGE);, +			if (jms11Available) {, +				// Standard JMS 1.1 API usage..., +				responseQueue = session.createTemporaryQueue();, +				producer = session.createProducer(queue);, +				consumer = session.createConsumer(responseQueue);, +				requestMessage.setJMSReplyTo(responseQueue);, +				producer.send(requestMessage);, +			}, +			else {, +				// DEPRECATED but kept around with the deprecated JmsTemplate102 etc classes for the time being., +++ b/org.springframework.jms/src/main/java/org/springframework/jms/remoting/JmsInvokerClientInterceptor.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.util.ClassUtils;, +	private static final boolean jms11Available = ClassUtils.hasMethod(ConnectionFactory.class, "createConnection");, +, +		RemoteInvocationResult result;, +	 * Create a new JMS Connection for this JMS invoker., +		if (jms11Available) {, +			return cf.createConnection();, +			return ((QueueConnectionFactory) cf).createQueueConnection();, +	 * Create a new JMS Session for this JMS invoker., +		if (jms11Available) {, +			return con.createSession(false, Session.AUTO_ACKNOWLEDGE);, +			return ((QueueConnection) con).createQueueSession(false, Session.AUTO_ACKNOWLEDGE);, +			if (jms11Available) {, +				// Standard JMS 1.1 API usage..., +				responseQueue = session.createTemporaryQueue();, +				producer = session.createProducer(queue);, +				consumer = session.createConsumer(responseQueue);, +				requestMessage.setJMSReplyTo(responseQueue);, +				producer.send(requestMessage);, +			}, +			else {, +				// DEPRECATED but kept around with the deprecated JmsTemplate102 etc classes for the time being., +++ b/org.springframework.jms/src/test/java/org/springframework/jms/remoting/JmsInvokerTests.java, + * Copyright 2002-2011 the original author or authors., +		mockConnectionFactory.createConnection();, +		mockConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);, +	}]