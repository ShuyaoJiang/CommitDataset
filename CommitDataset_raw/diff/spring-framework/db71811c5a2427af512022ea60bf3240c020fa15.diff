[+++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/AbstractEntityManagerFactoryBean.java, + * Copyright 2002-2010 the original author or authors., +import java.io.NotSerializableException;, +import java.io.ObjectStreamException;, +import java.io.Serializable;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.BeanNameAware;, +		FactoryBean<EntityManagerFactory>, BeanClassLoaderAware, BeanFactoryAware, BeanNameAware,, +		InitializingBean, DisposableBean, EntityManagerFactoryInfo, PersistenceExceptionTranslator, Serializable {, +	private BeanFactory beanFactory;, +, +	private String beanName;, +, +	private EntityManagerFactoryPlusOperations plusOperations;, +, +	public void setBeanFactory(BeanFactory beanFactory) {, +		this.beanFactory = beanFactory;, +	}, +, +	public void setBeanName(String name) {, +		this.beanName = name;, +	}, +, +			this.plusOperations = getJpaDialect().getEntityManagerFactoryPlusOperations(emf);, +				new ManagedEntityManagerFactoryInvocationHandler(this));, +	//---------------------------------------------------------------------, +	// Serialization support, +	//---------------------------------------------------------------------, +, +	Object invokeProxyMethod(Method method, Object[] args) throws Throwable {, +		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {, +			return method.invoke(this, args);, +		}, +		else if (method.getDeclaringClass().equals(EntityManagerFactoryPlusOperations.class)) {, +			return method.invoke(this.plusOperations, args);, +		}, +		Object retVal = method.invoke(this.nativeEntityManagerFactory, args);, +		if (retVal instanceof EntityManager) {, +			EntityManager rawEntityManager = (EntityManager) retVal;, +			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this);, +		}, +		return retVal;, +	}, +, +	protected Object writeReplace() throws ObjectStreamException {, +		if (this.beanFactory != null && this.beanName != null) {, +			return new SerializedEntityManagerFactoryBeanReference(this.beanFactory, this.beanName);, +		}, +		else {, +			throw new NotSerializableException("EntityManagerFactoryBean does not run within a BeanFactory");, +		}, +	}, +, +, +	/**, +	 * Minimal bean reference to the surrounding AbstractEntityManagerFactoryBean., +	 * Resolved to the actual AbstractEntityManagerFactoryBean instance on deserialization., +	 */, +	private static class SerializedEntityManagerFactoryBeanReference implements Serializable {, +, +		private final BeanFactory beanFactory;, +, +		private final String lookupName;, +, +		public SerializedEntityManagerFactoryBeanReference(BeanFactory beanFactory, String beanName) {, +			this.beanFactory = beanFactory;, +			this.lookupName = BeanFactory.FACTORY_BEAN_PREFIX + beanName;, +		}, +, +		private Object readResolve() {, +			return this.beanFactory.getBean(this.lookupName, AbstractEntityManagerFactoryBean.class);, +		}, +	}, +, +, +	private static class ManagedEntityManagerFactoryInvocationHandler implements InvocationHandler, Serializable {, +		private final AbstractEntityManagerFactoryBean entityManagerFactoryBean;, +		public ManagedEntityManagerFactoryInvocationHandler(AbstractEntityManagerFactoryBean emfb) {, +			this.entityManagerFactoryBean = emfb;, +				return this.entityManagerFactoryBean.invokeProxyMethod(method, args);, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/AbstractEntityManagerFactoryBean.java, + * Copyright 2002-2010 the original author or authors., +import java.io.NotSerializableException;, +import java.io.ObjectStreamException;, +import java.io.Serializable;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.BeanNameAware;, +		FactoryBean<EntityManagerFactory>, BeanClassLoaderAware, BeanFactoryAware, BeanNameAware,, +		InitializingBean, DisposableBean, EntityManagerFactoryInfo, PersistenceExceptionTranslator, Serializable {, +	private BeanFactory beanFactory;, +, +	private String beanName;, +, +	private EntityManagerFactoryPlusOperations plusOperations;, +, +	public void setBeanFactory(BeanFactory beanFactory) {, +		this.beanFactory = beanFactory;, +	}]