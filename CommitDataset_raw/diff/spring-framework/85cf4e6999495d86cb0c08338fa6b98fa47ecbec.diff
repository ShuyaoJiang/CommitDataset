[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java, +	public static UriComponentsBuilder fromController(UriComponentsBuilder builder,, +			Class<?> controllerType) {, +, +	public static UriComponentsBuilder fromMethodName(Class<?> controllerType,, +			String methodName, Object... args) {, +, +		Method method = getMethod(controllerType, methodName, args);, +		return fromMethodInternal(null, controllerType, method, args);, +		return fromMethodInternal(builder, controllerType, method, args);, +	 * @param info either the value returned from a "mock" controller, +	public static UriComponentsBuilder fromMethodCall(Object info) {, +		Assert.isInstanceOf(MethodInvocationInfo.class, info);, +		MethodInvocationInfo invocationInfo = (MethodInvocationInfo) info;, +		Class<?> controllerType = invocationInfo.getControllerType();, +		Method method = invocationInfo.getControllerMethod();, +		Object[] arguments = invocationInfo.getArgumentValues();, +		return fromMethodInternal(null, controllerType, method, arguments);, +	 * @param info either the value returned from a "mock" controller, +	public static UriComponentsBuilder fromMethodCall(UriComponentsBuilder builder, Object info) {, +		Assert.isInstanceOf(MethodInvocationInfo.class, info);, +		MethodInvocationInfo invocationInfo = (MethodInvocationInfo) info;, +		Class<?> controllerType = invocationInfo.getControllerType();, +		Method method = invocationInfo.getControllerMethod();, +		Object[] arguments = invocationInfo.getArgumentValues();, +		return fromMethodInternal(builder, controllerType, method, arguments);, +		HandlerMethod handlerMethod = handlerMethods.get(0);, +		Class<?> controllerType = handlerMethod.getBeanType();, +		Method method = handlerMethod.getMethod();, +		return new MethodArgumentBuilder(builder, controllerType, method);, +	 * @param controllerType the controller type, +	public static UriComponentsBuilder fromMethod(Class<?> controllerType, Method method, Object... args) {, +		return fromMethodInternal(null, controllerType, method, args);, +	 * @param controllerType the controller type, +	public static UriComponentsBuilder fromMethod(UriComponentsBuilder baseUrl,, +			Class<?> controllerType, Method method, Object... args) {, +, +		return fromMethodInternal(baseUrl, method.getDeclaringClass(), method, args);, +	/**, +	 * See {@link #fromMethod(Class, Method, Object...)}., +	 * @deprecated as of 4.2 this is deprecated in favor of the overloaded, +	 * method that also accepts a controllerType., +	 */, +	@Deprecated, +	public static UriComponentsBuilder fromMethod(Method method, Object... args) {, +		return fromMethodInternal(null, method.getDeclaringClass(), method, args);, +	}, +, +	private static UriComponentsBuilder fromMethodInternal(UriComponentsBuilder baseUrl,, +			Class<?> controllerType, Method method, Object... args) {, +, +	 * An alternative to {@link #fromMethod(Class, Method, Object...)}, +	public UriComponentsBuilder withMethod(Class<?> controllerType, Method method, Object... args) {, +		return fromMethod(this.baseUrl, controllerType, method, args);, +		private final Class<?> controllerType;, +, +		public MethodArgumentBuilder(Class<?> controllerType, Method method) {, +			this(null, controllerType, method);, +		public MethodArgumentBuilder(UriComponentsBuilder baseUrl, Class<?> controllerType, Method method) {, +			Assert.notNull(controllerType, "'controllerType' is required");, +			this.controllerType = controllerType;, +		/**, +		 * @deprecated as of 4.2 deprecated in favor of alternative constructors, +		 * that accept the controllerType., +		 */, +		@Deprecated, +		public MethodArgumentBuilder(Method method) {, +			this(method.getDeclaringClass(), method);, +		}, +			return fromMethodInternal(this.baseUrl, this.controllerType, this.method,, +					this.argumentValues).build(false).encode().toUriString();, +		public String buildAndExpand(Object... uriVars) {, +			return fromMethodInternal(this.baseUrl, this.controllerType, this.method,, +					this.argumentValues).build(false).expand(uriVars).encode().toString();]