[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/condition/AbstractNameValueCondition.java, +	public int getSpecificity() {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/condition/AbstractNameValueCondition.java, +	public int getSpecificity() {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/condition/AbstractRequestCondition.java, + * Abstract base class for {@link RequestCondition} that provides a standard {@link Comparable} implementation based on, + * the conditions {@linkplain #getSpecificity() specificity}., +	/**, +	 * Returns the conditions specificity. More specific conditions should return a higher value than ones which are less, +	 * so., +	 *, +	 * @return the conditions specificity, +	 */, +	protected abstract int getSpecificity();, +		return other.getSpecificity() - this.getSpecificity();, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/condition/AbstractNameValueCondition.java, +	public int getSpecificity() {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/condition/AbstractRequestCondition.java, + * Abstract base class for {@link RequestCondition} that provides a standard {@link Comparable} implementation based on, + * the conditions {@linkplain #getSpecificity() specificity}., +	/**, +	 * Returns the conditions specificity. More specific conditions should return a higher value than ones which are less, +	 * so., +	 *, +	 * @return the conditions specificity, +	 */, +	protected abstract int getSpecificity();, +		return other.getSpecificity() - this.getSpecificity();, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/condition/ConsumesRequestCondition.java, +	public int getSpecificity() {, +, +	@Override, +	public boolean equals(Object obj) {, +		if (this == obj) {, +			return true;, +		}, +		if (obj != null && obj instanceof ConsumesRequestCondition) {, +			ConsumesRequestCondition other = (ConsumesRequestCondition) obj;, +			return this.mediaType.equals(other.mediaType);, +		}, +		return false;, +	}, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/condition/AbstractNameValueCondition.java, +	public int getSpecificity() {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/condition/AbstractRequestCondition.java, + * Abstract base class for {@link RequestCondition} that provides a standard {@link Comparable} implementation based on, + * the conditions {@linkplain #getSpecificity() specificity}., +	/**, +	 * Returns the conditions specificity. More specific conditions should return a higher value than ones which are less, +	 * so., +	 *, +	 * @return the conditions specificity, +	 */, +	protected abstract int getSpecificity();, +		return other.getSpecificity() - this.getSpecificity();, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/condition/ConsumesRequestCondition.java, +	public int getSpecificity() {, +, +	@Override, +	public boolean equals(Object obj) {, +		if (this == obj) {, +			return true;, +		}, +		if (obj != null && obj instanceof ConsumesRequestCondition) {, +			ConsumesRequestCondition other = (ConsumesRequestCondition) obj;, +			return this.mediaType.equals(other.mediaType);, +		}, +		return false;, +	}, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/condition/LogicalNegationRequestCondition.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.servlet.mvc.method.condition;, +, +import javax.servlet.http.HttpServletRequest;, +, +import org.springframework.util.Assert;, +, +/**, + * {@link RequestCondition} implementation that represents a logical NOT (i.e. !)., + *, + * @author Arjen Poutsma, + * @since 3.1, + */]