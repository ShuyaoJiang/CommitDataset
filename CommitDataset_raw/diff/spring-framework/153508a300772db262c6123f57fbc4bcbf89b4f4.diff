[+++ b/build.gradle, +++ b/build.gradle, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, +import java.util.Map.Entry;, +import org.springframework.util.Assert;, +	private Map<String, MediaType> mediaTypes = new HashMap<String, MediaType>();, +	private String parameterName = "format";, +	 * Add mappings from file extensions to media types represented as strings., +	 * <p>When this mapping is not set or when an extension is not found, the Java, +	 * Action Framework, if available, may be used if enabled via, +	 * {@link #setFavorPathExtension(boolean)}., +	 *, +	 * @see #addMediaType(String, MediaType), +	 * @see #addMediaTypes(Map), +			for (Entry<Object, Object> entry : mediaTypes.entrySet()) {, +	/**, +	 * Add a mapping from a file extension to a media type., +	 * <p>If no mapping is added or when an extension is not found, the Java, +	 * Action Framework, if available, may be used if enabled via, +	 * {@link #setFavorPathExtension(boolean)}., +	 */, +	public void addMediaType(String fileExtension, MediaType mediaType) {, +		this.mediaTypes.put(fileExtension, mediaType);, +	}, +, +	/**, +	 * Add mappings from file extensions to media types., +	 * <p>If no mappings are added or when an extension is not found, the Java, +	 * Action Framework, if available, may be used if enabled via, +	 * {@link #setFavorPathExtension(boolean)}., +	 */, +	public void addMediaTypes(Map<String, MediaType> mediaTypes) {, +		if (mediaTypes != null) {, +			this.mediaTypes.putAll(mediaTypes);, +		}, +	 *, +	 *, +		Assert.notNull(parameterName, "parameterName is required");, +	 * nor a request parameter, nor the {@code Accept} header could help, +	 * determine the requested content type., +				strategy = new ServletPathExtensionContentNegotiationStrategy(this.servletContext, this.mediaTypes);, +			} else {, +				strategy = new PathExtensionContentNegotiationStrategy(this.mediaTypes);, +			ParameterContentNegotiationStrategy strategy = new ParameterContentNegotiationStrategy(this.mediaTypes);, +++ b/build.gradle, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, +import java.util.Map.Entry;, +import org.springframework.util.Assert;, +	private Map<String, MediaType> mediaTypes = new HashMap<String, MediaType>();, +	private String parameterName = "format";, +	 * Add mappings from file extensions to media types represented as strings., +	 * <p>When this mapping is not set or when an extension is not found, the Java, +	 * Action Framework, if available, may be used if enabled via, +	 * {@link #setFavorPathExtension(boolean)}., +	 *, +	 * @see #addMediaType(String, MediaType), +	 * @see #addMediaTypes(Map), +			for (Entry<Object, Object> entry : mediaTypes.entrySet()) {, +	/**, +	 * Add a mapping from a file extension to a media type., +	 * <p>If no mapping is added or when an extension is not found, the Java, +	 * Action Framework, if available, may be used if enabled via, +	 * {@link #setFavorPathExtension(boolean)}., +	 */, +	public void addMediaType(String fileExtension, MediaType mediaType) {, +		this.mediaTypes.put(fileExtension, mediaType);, +	}, +, +	/**, +	 * Add mappings from file extensions to media types., +	 * <p>If no mappings are added or when an extension is not found, the Java, +	 * Action Framework, if available, may be used if enabled via, +	 * {@link #setFavorPathExtension(boolean)}., +	 */, +	public void addMediaTypes(Map<String, MediaType> mediaTypes) {, +		if (mediaTypes != null) {, +			this.mediaTypes.putAll(mediaTypes);, +		}, +	 *, +	 *, +		Assert.notNull(parameterName, "parameterName is required");, +	 * nor a request parameter, nor the {@code Accept} header could help, +	 * determine the requested content type., +				strategy = new ServletPathExtensionContentNegotiationStrategy(this.servletContext, this.mediaTypes);, +			} else {, +				strategy = new PathExtensionContentNegotiationStrategy(this.mediaTypes);, +			ParameterContentNegotiationStrategy strategy = new ParameterContentNegotiationStrategy(this.mediaTypes);, +++ b/spring-web/src/main/java/org/springframework/web/accept/ParameterContentNegotiationStrategy.java, +		Assert.notNull(parameterName, "parameterName is required");, +++ b/build.gradle, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, +import java.util.Map.Entry;, +import org.springframework.util.Assert;, +	private Map<String, MediaType> mediaTypes = new HashMap<String, MediaType>();, +	private String parameterName = "format";, +	 * Add mappings from file extensions to media types represented as strings., +	 * <p>When this mapping is not set or when an extension is not found, the Java, +	 * Action Framework, if available, may be used if enabled via, +	 * {@link #setFavorPathExtension(boolean)}., +	 *]