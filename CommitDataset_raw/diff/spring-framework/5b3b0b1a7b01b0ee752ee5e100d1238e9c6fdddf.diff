[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AbstractNamedValueMethodArgumentResolver.java, + * Copyright 2002-2019 the original author or authors., +	@Nullable, +	@Nullable, +	 * @param conversionService conversion service for converting values to match the, +	protected AbstractNamedValueMethodArgumentResolver(ConversionService conversionService,, +		this.conversionService = conversionService;, +	@Nullable, +		if (this.configurableBeanFactory == null || this.expressionContext == null) {, +	@Nullable, +	protected void handleResolvedValue(, +			@Nullable Object arg, String name, MethodParameter parameter, Message<?> message) {, +		@Nullable, +		protected NamedValueInfo(String name, boolean required, @Nullable String defaultValue) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AbstractNamedValueMethodArgumentResolver.java, + * Copyright 2002-2019 the original author or authors., +	@Nullable, +	@Nullable, +	 * @param conversionService conversion service for converting values to match the, +	protected AbstractNamedValueMethodArgumentResolver(ConversionService conversionService,, +		this.conversionService = conversionService;, +	@Nullable, +		if (this.configurableBeanFactory == null || this.expressionContext == null) {, +	@Nullable, +	protected void handleResolvedValue(, +			@Nullable Object arg, String name, MethodParameter parameter, Message<?> message) {, +		@Nullable, +		protected NamedValueInfo(String name, boolean required, @Nullable String defaultValue) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/DefaultMessageHandlerMethodFactory.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.lang.Nullable;, +import org.springframework.util.Assert;, +	@Nullable, +	@Nullable, +	@Nullable, +	@Nullable, +	@SuppressWarnings("ConstantConditions"), +		ConfigurableBeanFactory beanFactory = (this.beanFactory instanceof ConfigurableBeanFactory ?, +		resolvers.add(new HeaderMethodArgumentResolver(this.conversionService, beanFactory));, +, +		Assert.notNull(this.messageConverter, "MessageConverter not configured");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AbstractNamedValueMethodArgumentResolver.java, + * Copyright 2002-2019 the original author or authors., +	@Nullable, +	@Nullable, +	 * @param conversionService conversion service for converting values to match the, +	protected AbstractNamedValueMethodArgumentResolver(ConversionService conversionService,, +		this.conversionService = conversionService;, +	@Nullable, +		if (this.configurableBeanFactory == null || this.expressionContext == null) {, +	@Nullable, +	protected void handleResolvedValue(, +			@Nullable Object arg, String name, MethodParameter parameter, Message<?> message) {, +		@Nullable, +		protected NamedValueInfo(String name, boolean required, @Nullable String defaultValue) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/DefaultMessageHandlerMethodFactory.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.lang.Nullable;, +import org.springframework.util.Assert;, +	@Nullable, +	@Nullable, +	@Nullable, +	@Nullable, +	@SuppressWarnings("ConstantConditions"), +		ConfigurableBeanFactory beanFactory = (this.beanFactory instanceof ConfigurableBeanFactory ?, +		resolvers.add(new HeaderMethodArgumentResolver(this.conversionService, beanFactory));, +, +		Assert.notNull(this.messageConverter, "MessageConverter not configured");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/DestinationVariableMethodArgumentResolver.java, + * Copyright 2002-2019 the original author or authors., +	public DestinationVariableMethodArgumentResolver(ConversionService conversionService) {, +		super(conversionService, null);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AbstractNamedValueMethodArgumentResolver.java, + * Copyright 2002-2019 the original author or authors., +	@Nullable, +	@Nullable, +	 * @param conversionService conversion service for converting values to match the, +	protected AbstractNamedValueMethodArgumentResolver(ConversionService conversionService,, +		this.conversionService = conversionService;, +	@Nullable, +		if (this.configurableBeanFactory == null || this.expressionContext == null) {, +	@Nullable, +	protected void handleResolvedValue(, +			@Nullable Object arg, String name, MethodParameter parameter, Message<?> message) {, +		@Nullable, +		protected NamedValueInfo(String name, boolean required, @Nullable String defaultValue) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/DefaultMessageHandlerMethodFactory.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.lang.Nullable;, +import org.springframework.util.Assert;, +	@Nullable, +	@Nullable, +	@Nullable, +	@Nullable, +	@SuppressWarnings("ConstantConditions"), +		ConfigurableBeanFactory beanFactory = (this.beanFactory instanceof ConfigurableBeanFactory ?, +		resolvers.add(new HeaderMethodArgumentResolver(this.conversionService, beanFactory));, +, +		Assert.notNull(this.messageConverter, "MessageConverter not configured");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/DestinationVariableMethodArgumentResolver.java]