[+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewInterceptor.java, +import org.springframework.web.context.request.AsyncWebRequestInterceptor;, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewInterceptor.java, +import org.springframework.web.context.request.AsyncWebRequestInterceptor;, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewInterceptor.java, +import org.springframework.web.context.request.AsyncWebRequestInterceptor;, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewInterceptor.java, +import org.springframework.web.context.request.AsyncWebRequestInterceptor;, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewInterceptor.java, +import org.springframework.web.context.request.AsyncWebRequestInterceptor;, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/support/OpenEntityManagerInViewInterceptor.java, +import org.springframework.web.context.request.AsyncWebRequestInterceptor;, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewInterceptor.java, +import org.springframework.web.context.request.AsyncWebRequestInterceptor;, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewInterceptor.java, +import org.springframework.web.context.request.AsyncWebRequestInterceptor;, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/support/OpenEntityManagerInViewInterceptor.java, +import org.springframework.web.context.request.AsyncWebRequestInterceptor;, +++ b/spring-orm/src/test/java/org/springframework/orm/hibernate3/support/OpenSessionInViewTests.java, +import static org.easymock.EasyMock.createMock;, +		reset(asyncWebRequest);, +		expect(asyncWebRequest.isDispatched()).andReturn(true);, +		replay(asyncWebRequest);, +, +		AsyncWebRequest asyncWebRequest = createMock(AsyncWebRequest.class);, +		expect(asyncWebRequest.isAsyncStarted()).andReturn(true).anyTimes();, +		expect(asyncWebRequest.isDispatched()).andReturn(false).anyTimes();, +		expect(asyncWebRequest.isDispatched()).andReturn(true).anyTimes();, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewInterceptor.java, +import org.springframework.web.context.request.AsyncWebRequestInterceptor;, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewInterceptor.java, +import org.springframework.web.context.request.AsyncWebRequestInterceptor;, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/support/OpenEntityManagerInViewInterceptor.java, +import org.springframework.web.context.request.AsyncWebRequestInterceptor;, +++ b/spring-orm/src/test/java/org/springframework/orm/hibernate3/support/OpenSessionInViewTests.java, +import static org.easymock.EasyMock.createMock;, +		reset(asyncWebRequest);, +		expect(asyncWebRequest.isDispatched()).andReturn(true);, +		replay(asyncWebRequest);, +, +		AsyncWebRequest asyncWebRequest = createMock(AsyncWebRequest.class);, +		expect(asyncWebRequest.isAsyncStarted()).andReturn(true).anyTimes();, +		expect(asyncWebRequest.isDispatched()).andReturn(false).anyTimes();, +		expect(asyncWebRequest.isDispatched()).andReturn(true).anyTimes();, +++ b/spring-orm/src/test/java/org/springframework/orm/jpa/support/OpenEntityManagerInViewTests.java, +		reset(asyncWebRequest);, +		expect(asyncWebRequest.isDispatched()).andReturn(true);, +		replay(asyncWebRequest);, +, +		AsyncWebRequest asyncWebRequest = createMock(AsyncWebRequest.class);, +		expect(asyncWebRequest.isAsyncStarted()).andReturn(true).anyTimes();, +		expect(asyncWebRequest.isDispatched()).andReturn(false).anyTimes();, +		expect(asyncWebRequest.isDispatched()).andReturn(true).anyTimes();, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewInterceptor.java, +import org.springframework.web.context.request.AsyncWebRequestInterceptor;, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewInterceptor.java, +import org.springframework.web.context.request.AsyncWebRequestInterceptor;, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/support/OpenEntityManagerInViewInterceptor.java, +import org.springframework.web.context.request.AsyncWebRequestInterceptor;, +++ b/spring-orm/src/test/java/org/springframework/orm/hibernate3/support/OpenSessionInViewTests.java, +import static org.easymock.EasyMock.createMock;, +		reset(asyncWebRequest);, +		expect(asyncWebRequest.isDispatched()).andReturn(true);, +		replay(asyncWebRequest);, +, +		AsyncWebRequest asyncWebRequest = createMock(AsyncWebRequest.class);, +		expect(asyncWebRequest.isAsyncStarted()).andReturn(true).anyTimes();, +		expect(asyncWebRequest.isDispatched()).andReturn(false).anyTimes();, +		expect(asyncWebRequest.isDispatched()).andReturn(true).anyTimes();, +++ b/spring-orm/src/test/java/org/springframework/orm/jpa/support/OpenEntityManagerInViewTests.java, +		reset(asyncWebRequest);, +		expect(asyncWebRequest.isDispatched()).andReturn(true);, +		replay(asyncWebRequest);, +, +		AsyncWebRequest asyncWebRequest = createMock(AsyncWebRequest.class);, +		expect(asyncWebRequest.isAsyncStarted()).andReturn(true).anyTimes();, +		expect(asyncWebRequest.isDispatched()).andReturn(false).anyTimes();, +		expect(asyncWebRequest.isDispatched()).andReturn(true).anyTimes();, +++ b/spring-web/src/main/java/org/springframework/web/context/request/AsyncWebRequestInterceptor.java, +/*, + * Copyright 2002-2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.web.context.request;, +, +/**, + * Extends {@code WebRequestInterceptor} with a callback method invoked during, + * asynchronous request handling., + *]