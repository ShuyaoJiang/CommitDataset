[+++ b/build.gradle, +	ext.eclipselinkVersion   = "2.4.2", +	ext.ehcachejcacheVersion = "1.0.1", +	ext.fileuploadVersion    = "1.3.1", +	ext.freemarkerVersion    = "2.3.22", +	ext.hibval4Version       = "4.3.2.Final", +	ext.hibval5Version       = "5.1.3.Final", +	ext.httpclientVersion    = "4.4", +	ext.httpasyncVersion     = "4.0.2", +	ext.jasperreportsVersion = "6.0.3", +	ext.openjpaVersion       = "2.2.2"  // 2.3.0 not Java 8 compatible (based on ASM 4), +	ext.snakeyamlVersion     = "1.15", +	ext.testngVersion        = "6.8.21", +	ext.xmlunitVersion       = "1.6", +		testCompile("xmlunit:xmlunit:${xmlunitVersion}"), +		optional("org.yaml:snakeyaml:${snakeyamlVersion}"), +		optional("com.jamonapi:jamon:2.81"), +		optional("org.hibernate:hibernate-validator:${hibval4Version}"), +		optional("org.jruby:jruby:1.7.19"), +		optional("org.jibx:jibx-run:1.2.6"), +		testCompile("xmlunit:xmlunit:${xmlunitVersion}"), +		optional("org.freemarker:freemarker:${freemarkerVersion}"), +		optional("net.sf.jasperreports:jasperreports:$jasperreportsVersion") {, +		testCompile("org.ehcache:jcache:${ehcachejcacheVersion}"), +		optional("commons-fileupload:commons-fileupload:${fileuploadVersion}"), +		optional("org.apache.httpcomponents:httpclient:${httpclientVersion}"), +		optional("org.apache.httpcomponents:httpasyncclient:${httpasyncVersion}"), +		testCompile("xmlunit:xmlunit:${xmlunitVersion}"), +		optional("org.eclipse.persistence:org.eclipse.persistence.core:${eclipselinkVersion}"), +		optional("org.eclipse.persistence:org.eclipse.persistence.jpa:${eclipselinkVersion}") {, +		optional("org.apache.openjpa:openjpa:${openjpaVersion}") {, +		testCompile("org.hibernate:hibernate-validator:${hibval5Version}"), +		optional("org.freemarker:freemarker:${freemarkerVersion}"), +		optional("net.sf.jasperreports:jasperreports:$jasperreportsVersion") {, +		testCompile("xmlunit:xmlunit:${xmlunitVersion}"), +		testCompile("org.hibernate:hibernate-validator:${hibval4Version}"), +		testCompile("org.apache.httpcomponents:httpclient:${httpclientVersion}"), +		testCompile("commons-fileupload:commons-fileupload:${fileuploadVersion}"), +		optional("commons-fileupload:commons-fileupload:${fileuploadVersion}"), +		optional("org.testng:testng:${testngVersion}"), +		optional("com.jayway.jsonpath:json-path:1.2.0"), +		optional("xmlunit:xmlunit:${xmlunitVersion}"), +		testCompile("org.hibernate:hibernate-validator:${hibval5Version}"), +++ b/build.gradle, +	ext.eclipselinkVersion   = "2.4.2", +	ext.ehcachejcacheVersion = "1.0.1", +	ext.fileuploadVersion    = "1.3.1", +	ext.freemarkerVersion    = "2.3.22", +	ext.hibval4Version       = "4.3.2.Final", +	ext.hibval5Version       = "5.1.3.Final", +	ext.httpclientVersion    = "4.4", +	ext.httpasyncVersion     = "4.0.2", +	ext.jasperreportsVersion = "6.0.3", +	ext.openjpaVersion       = "2.2.2"  // 2.3.0 not Java 8 compatible (based on ASM 4), +	ext.snakeyamlVersion     = "1.15", +	ext.testngVersion        = "6.8.21", +	ext.xmlunitVersion       = "1.6", +		testCompile("xmlunit:xmlunit:${xmlunitVersion}"), +		optional("org.yaml:snakeyaml:${snakeyamlVersion}"), +		optional("com.jamonapi:jamon:2.81"), +		optional("org.hibernate:hibernate-validator:${hibval4Version}"), +		optional("org.jruby:jruby:1.7.19"), +		optional("org.jibx:jibx-run:1.2.6"), +		testCompile("xmlunit:xmlunit:${xmlunitVersion}"), +		optional("org.freemarker:freemarker:${freemarkerVersion}"), +		optional("net.sf.jasperreports:jasperreports:$jasperreportsVersion") {, +		testCompile("org.ehcache:jcache:${ehcachejcacheVersion}"), +		optional("commons-fileupload:commons-fileupload:${fileuploadVersion}"), +		optional("org.apache.httpcomponents:httpclient:${httpclientVersion}"), +		optional("org.apache.httpcomponents:httpasyncclient:${httpasyncVersion}"), +		testCompile("xmlunit:xmlunit:${xmlunitVersion}"), +		optional("org.eclipse.persistence:org.eclipse.persistence.core:${eclipselinkVersion}"), +		optional("org.eclipse.persistence:org.eclipse.persistence.jpa:${eclipselinkVersion}") {, +		optional("org.apache.openjpa:openjpa:${openjpaVersion}") {, +		testCompile("org.hibernate:hibernate-validator:${hibval5Version}"), +		optional("org.freemarker:freemarker:${freemarkerVersion}"), +		optional("net.sf.jasperreports:jasperreports:$jasperreportsVersion") {, +		testCompile("xmlunit:xmlunit:${xmlunitVersion}"), +		testCompile("org.hibernate:hibernate-validator:${hibval4Version}"), +		testCompile("org.apache.httpcomponents:httpclient:${httpclientVersion}"), +		testCompile("commons-fileupload:commons-fileupload:${fileuploadVersion}"), +		optional("commons-fileupload:commons-fileupload:${fileuploadVersion}"), +		optional("org.testng:testng:${testngVersion}"), +		optional("com.jayway.jsonpath:json-path:1.2.0"), +		optional("xmlunit:xmlunit:${xmlunitVersion}"), +		testCompile("org.hibernate:hibernate-validator:${hibval5Version}"), +++ b/spring-aop/src/test/java/org/springframework/aop/interceptor/JamonPerformanceMonitorInterceptorTests.java, + * Copyright 2002-2015 the original author or authors., +	private final JamonPerformanceMonitorInterceptor interceptor = new JamonPerformanceMonitorInterceptor();, +	private final MethodInvocation mi = mock(MethodInvocation.class);, +	private final Log log = mock(Log.class);, +		assertTrue("jamon must track the method being invoked", MonitorFactory.getNumRows() > 0);, +		assertTrue("The jamon report must contain the toString method that was invoked",, +				MonitorFactory.getReport().contains("toString"));, +		assertEquals("Monitors must exist for the method invocation and 2 exceptions",, +				3, MonitorFactory.getNumRows());, +		assertTrue("The jamon report must contain the toString method that was invoked",, +				MonitorFactory.getReport().contains("toString"));, +		assertTrue("The jamon report must contain the generic exception: " + MonitorFactory.EXCEPTIONS_LABEL,, +				MonitorFactory.getReport().contains(MonitorFactory.EXCEPTIONS_LABEL));]