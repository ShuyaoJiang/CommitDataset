[+++ b/spring-orm/src/test/java/org/springframework/mock/web/MockFilterChain.java, +import java.util.Collections;, +import java.util.List;, + * <p>Mock implementation of the {@link javax.servlet.FilterChain} interface. Used, + * for testing the web framework; also useful for testing custom, + * {@link javax.servlet.Filter} implementations., + * <p>A {@link MockFilterChain} can be configured with one or more filters and a, + * Servlet to invoke. The first time the chain is called, it invokes all filters, + * and the Servlet, and saves the request and response. Subsequent invocations, + * raise an {@link IllegalStateException} unless {@link #reset()} is called., + * @author Rossen Stoyanchev, +	private final List<Filter> filters;, +, +	private Iterator<Filter> iterator;, +	 * an {@link IllegalStateException} unless {@link #reset()} is called., +		this.filters = Collections.emptyList();, +	 * Create a FilterChain with a Servlet., +	 * @param servlet the Servlet to invoke, +		this.filters = initFilterList(servlet);, +	 * Create a {@code FilterChain} with Filter's and a Servlet., +	 * @param servlet the {@link Servlet} to invoke in this {@link FilterChain}, +	 * @param filters the {@link Filter}'s to invoke in this {@link FilterChain}, +		this.filters = initFilterList(servlet, filters);, +	private static List<Filter> initFilterList(Servlet servlet, Filter... filters) {, +		Filter[] allFilters = ObjectUtils.addObjectToArray(filters, new ServletFilterProxy(servlet));, +		return Arrays.asList(allFilters);, +	/**, +	 * Invoke registered {@link Filter}s and/or {@link Servlet} also saving the, +	 * request and response., +	 */, +	public void doFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException {, +		Assert.notNull(request, "Request must not be null");, +		Assert.notNull(response, "Response must not be null");, +, +		if (this.request != null) {, +			 throw new IllegalStateException("This FilterChain has already been called!");, +		}, +, +		if (this.iterator == null) {, +			this.iterator = this.filters.iterator();, +		}, +, +		if (this.iterator.hasNext()) {, +			Filter nextFilter = this.iterator.next();, +			nextFilter.doFilter(request, response, this);, +		}, +, +		this.request = request;, +		this.response = response;, +	}, +, +	/**, +	 * Reset the {@link MockFilterChain} allowing it to be invoked again., +	 */, +	public void reset() {, +		this.request = null;, +		this.response = null;, +		this.iterator = null;, +	}, +, +++ b/spring-orm/src/test/java/org/springframework/mock/web/MockFilterChain.java, +import java.util.Collections;, +import java.util.List;, + * <p>Mock implementation of the {@link javax.servlet.FilterChain} interface. Used, + * for testing the web framework; also useful for testing custom, + * {@link javax.servlet.Filter} implementations., + * <p>A {@link MockFilterChain} can be configured with one or more filters and a, + * Servlet to invoke. The first time the chain is called, it invokes all filters, + * and the Servlet, and saves the request and response. Subsequent invocations, + * raise an {@link IllegalStateException} unless {@link #reset()} is called., + * @author Rossen Stoyanchev, +	private final List<Filter> filters;, +, +	private Iterator<Filter> iterator;, +	 * an {@link IllegalStateException} unless {@link #reset()} is called., +		this.filters = Collections.emptyList();, +	 * Create a FilterChain with a Servlet., +	 * @param servlet the Servlet to invoke, +		this.filters = initFilterList(servlet);, +	 * Create a {@code FilterChain} with Filter's and a Servlet., +	 * @param servlet the {@link Servlet} to invoke in this {@link FilterChain}, +	 * @param filters the {@link Filter}'s to invoke in this {@link FilterChain}, +		this.filters = initFilterList(servlet, filters);, +	private static List<Filter> initFilterList(Servlet servlet, Filter... filters) {, +		Filter[] allFilters = ObjectUtils.addObjectToArray(filters, new ServletFilterProxy(servlet));, +		return Arrays.asList(allFilters);, +	/**, +	 * Invoke registered {@link Filter}s and/or {@link Servlet} also saving the, +	 * request and response., +	 */, +	public void doFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException {, +		Assert.notNull(request, "Request must not be null");, +		Assert.notNull(response, "Response must not be null");, +, +		if (this.request != null) {, +			 throw new IllegalStateException("This FilterChain has already been called!");, +		}, +, +		if (this.iterator == null) {, +			this.iterator = this.filters.iterator();]