[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, + * Copyright 2002-2017 the original author or authors., +		String beanName = (!names.isEmpty() ? names.remove(0) : methodName);, +				catch (Throwable ex) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, + * Copyright 2002-2017 the original author or authors., +		String beanName = (!names.isEmpty() ? names.remove(0) : methodName);, +				catch (Throwable ex) {, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapter.java, + * Copyright 2002-2017 the original author or authors., +	 * @return the Publisher representing the adaptation, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, + * Copyright 2002-2017 the original author or authors., +		String beanName = (!names.isEmpty() ? names.remove(0) : methodName);, +				catch (Throwable ex) {, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapter.java, + * Copyright 2002-2017 the original author or authors., +	 * @return the Publisher representing the adaptation, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, + * Copyright 2002-2017 the original author or authors., +import static org.springframework.core.ReactiveTypeDescriptor.*;, +	 * (may be {@code null} if a concrete source object is given), +	 * @param source an instance of the reactive type, +	 * (i.e. to adapt from; may be {@code null} if the reactive type is specified), +		Object sourceToUse = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source);, +		Class<?> clazz = (sourceToUse != null ? sourceToUse.getClass() : reactiveType);, +				.filter(adapter -> adapter.getReactiveType() == clazz), +, +, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, + * Copyright 2002-2017 the original author or authors., +		String beanName = (!names.isEmpty() ? names.remove(0) : methodName);, +				catch (Throwable ex) {, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapter.java, + * Copyright 2002-2017 the original author or authors., +	 * @return the Publisher representing the adaptation, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, + * Copyright 2002-2017 the original author or authors., +import static org.springframework.core.ReactiveTypeDescriptor.*;, +	 * (may be {@code null} if a concrete source object is given), +	 * @param source an instance of the reactive type, +	 * (i.e. to adapt from; may be {@code null} if the reactive type is specified), +		Object sourceToUse = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source);, +		Class<?> clazz = (sourceToUse != null ? sourceToUse.getClass() : reactiveType);, +				.filter(adapter -> adapter.getReactiveType() == clazz), +, +, +, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallParameterMetaData.java, + * Copyright 2002-2017 the original author or authors., + * @see GenericCallMetaDataProvider, +, +, +, +, +, +, +	 * Constructor taking all the properties., +		return this.parameterName;, +		return this.parameterType;, +		return this.sqlType;, +		return this.typeName;, +		return this.nullable;, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, + * Copyright 2002-2017 the original author or authors., +		String beanName = (!names.isEmpty() ? names.remove(0) : methodName);, +				catch (Throwable ex) {, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapter.java, + * Copyright 2002-2017 the original author or authors., +	 * @return the Publisher representing the adaptation, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, + * Copyright 2002-2017 the original author or authors., +import static org.springframework.core.ReactiveTypeDescriptor.*;, +	 * (may be {@code null} if a concrete source object is given), +	 * @param source an instance of the reactive type, +	 * (i.e. to adapt from; may be {@code null} if the reactive type is specified), +		Object sourceToUse = (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source);, +		Class<?> clazz = (sourceToUse != null ? sourceToUse.getClass() : reactiveType);, +				.filter(adapter -> adapter.getReactiveType() == clazz), +, +, +, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallParameterMetaData.java, + * Copyright 2002-2017 the original author or authors., + * @see GenericCallMetaDataProvider, +, +, +, +, +, +, +	 * Constructor taking all the properties., +		return this.parameterName;, +		return this.parameterType;, +		return this.sqlType;, +		return this.typeName;, +		return this.nullable;, +]