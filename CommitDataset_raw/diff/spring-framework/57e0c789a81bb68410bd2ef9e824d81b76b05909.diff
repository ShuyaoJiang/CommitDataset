[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/WebJarsResourceResolver.java, + * <p>This allows WebJars.org users to write version agnostic paths in their templates,, + * like {@code <script src="/jquery/jquery.min.js"/>}., + * This path will be resolved to the unique version {@code <script src="/jquery/1.2.0/jquery.min.js"/>},, + * which is a better fit for HTTP caching and version management in applications., + *, + * <p>This also resolves Resources for version agnostic HTTP requests {@code "GET /jquery/jquery.min.js"}., + * @see org.springframework.web.servlet.config.annotation.ResourceChainRegistration, +		Resource resolved = chain.resolveResource(request, requestPath, locations);, +		if (resolved == null) {, +			String webJarResourcePath = findWebJarResourcePath(requestPath);, +			return chain.resolveResource(request, webJarResourcePath, locations);, +		}, +		return resolved;, +			String webJarResourcePath = findWebJarResourcePath(resourceUrlPath);, +			return chain.resolveUrlPath(webJarResourcePath, locations);, +		}, +		return path;, +	}, +, +	protected String findWebJarResourcePath(String path) {, +			int startOffset = path.startsWith("/") ? 1 : 0;, +			int endOffset = path.indexOf("/", 1);, +				String webjar = path.substring(startOffset, endOffset);, +				String partialPath = path.substring(endOffset);, +				return webJarPath.substring(WEBJARS_LOCATION_LENGTH);, +		} catch (MultipleMatchesException ex) {, +			logger.warn("WebJar version conflict for \"" + path + "\"", ex);, +				logger.trace("No WebJar resource found for \"" + path + "\"");, +		return null;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/WebJarsResourceResolver.java, + * <p>This allows WebJars.org users to write version agnostic paths in their templates,, + * like {@code <script src="/jquery/jquery.min.js"/>}., + * This path will be resolved to the unique version {@code <script src="/jquery/1.2.0/jquery.min.js"/>},, + * which is a better fit for HTTP caching and version management in applications., + *, + * <p>This also resolves Resources for version agnostic HTTP requests {@code "GET /jquery/jquery.min.js"}., + * @see org.springframework.web.servlet.config.annotation.ResourceChainRegistration, +		Resource resolved = chain.resolveResource(request, requestPath, locations);, +		if (resolved == null) {, +			String webJarResourcePath = findWebJarResourcePath(requestPath);, +			return chain.resolveResource(request, webJarResourcePath, locations);, +		}, +		return resolved;, +			String webJarResourcePath = findWebJarResourcePath(resourceUrlPath);, +			return chain.resolveUrlPath(webJarResourcePath, locations);, +		}, +		return path;, +	}, +, +	protected String findWebJarResourcePath(String path) {, +			int startOffset = path.startsWith("/") ? 1 : 0;, +			int endOffset = path.indexOf("/", 1);, +				String webjar = path.substring(startOffset, endOffset);, +				String partialPath = path.substring(endOffset);, +				return webJarPath.substring(WEBJARS_LOCATION_LENGTH);, +		} catch (MultipleMatchesException ex) {, +			logger.warn("WebJar version conflict for \"" + path + "\"", ex);, +				logger.trace("No WebJar resource found for \"" + path + "\"");, +		return null;, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/WebJarsResourceResolverTests.java, +import javax.servlet.http.HttpServletRequest;, +, +import org.springframework.mock.web.test.MockHttpServletRequest;, +	private HttpServletRequest request = new MockHttpServletRequest();, +, +	@Test, +	public void resolveResourceExisting() {, +		Resource expected = mock(Resource.class);, +		this.locations = Collections.singletonList(new ClassPathResource("/META-INF/resources/webjars/", getClass()));, +		String file = "/foo/2.3/foo.txt";, +		given(this.chain.resolveResource(this.request, file, this.locations)).willReturn(expected);, +, +		Resource actual = this.resolver.resolveResource(this.request, file, this.locations, this.chain);, +, +		assertEquals(expected, actual);, +		verify(this.chain, times(1)).resolveResource(this.request, file, this.locations);, +	}, +, +	@Test, +	public void resolveResourceWebJar() {, +		Resource expected = mock(Resource.class);, +		String file = "/underscorejs/underscore.js";, +		String expectedPath = "/underscorejs/1.8.2/underscore.js";, +		this.locations = Collections.singletonList(new ClassPathResource("/META-INF/resources/webjars/", getClass()));, +		given(this.chain.resolveResource(this.request, expectedPath, this.locations)).willReturn(expected);, +, +		Resource actual = this.resolver.resolveResource(this.request, file, this.locations, this.chain);, +, +		assertEquals(expected, actual);, +		verify(this.chain, times(1)).resolveResource(this.request, file, this.locations);, +	}, +]