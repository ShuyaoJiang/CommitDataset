[+++ b/spring-aop/src/main/java/org/springframework/aop/target/AbstractBeanFactoryBasedTargetSource.java, + * Copyright 2002-2018 the original author or authors., +	private volatile Class<?> targetClass;, +	public Class<?> getTargetClass() {, +		Class<?> targetClass = this.targetClass;, +		if (targetClass != null) {, +			return targetClass;, +		}, +		synchronized (this) {, +			// Full check within synchronization, entering the BeanFactory interaction algorithm only once..., +			targetClass = this.targetClass;, +			if (targetClass == null && this.beanFactory != null) {, +				targetClass = this.beanFactory.getType(this.targetBeanName);, +				if (targetClass == null) {, +						logger.trace("Getting bean with name '" + this.targetBeanName + "' for type determination");, +					targetClass = beanInstance.getClass();, +				this.targetClass = targetClass;, +			return targetClass;, +		}, +++ b/spring-aop/src/main/java/org/springframework/aop/target/AbstractBeanFactoryBasedTargetSource.java, + * Copyright 2002-2018 the original author or authors., +	private volatile Class<?> targetClass;, +	public Class<?> getTargetClass() {, +		Class<?> targetClass = this.targetClass;, +		if (targetClass != null) {, +			return targetClass;, +		}, +		synchronized (this) {, +			// Full check within synchronization, entering the BeanFactory interaction algorithm only once..., +			targetClass = this.targetClass;, +			if (targetClass == null && this.beanFactory != null) {, +				targetClass = this.beanFactory.getType(this.targetBeanName);, +				if (targetClass == null) {, +						logger.trace("Getting bean with name '" + this.targetBeanName + "' for type determination");, +					targetClass = beanInstance.getClass();, +				this.targetClass = targetClass;, +			return targetClass;, +		}, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcAccessor.java, + * Copyright 2002-2018 the original author or authors., +	private volatile SQLExceptionTranslator exceptionTranslator;, +	public SQLExceptionTranslator getExceptionTranslator() {, +		SQLExceptionTranslator exceptionTranslator = this.exceptionTranslator;, +		if (exceptionTranslator != null) {, +			return exceptionTranslator;, +		}, +		synchronized (this) {, +			exceptionTranslator = this.exceptionTranslator;, +			if (exceptionTranslator == null) {, +					exceptionTranslator = new SQLErrorCodeSQLExceptionTranslator(dataSource);, +					exceptionTranslator = new SQLStateSQLExceptionTranslator();, +				this.exceptionTranslator = exceptionTranslator;, +			return exceptionTranslator;, +		}]