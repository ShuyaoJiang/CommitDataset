[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/parsing/Problem.java, + * Copyright 2002-2017 the original author or authors., +	 * @param rootCause the underlying exception that caused the error (may be {@code null}), +	 * Get the underlying exception that caused the error (may be {@code null})., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/parsing/Problem.java, + * Copyright 2002-2017 the original author or authors., +	 * @param rootCause the underlying exception that caused the error (may be {@code null}), +	 * Get the underlying exception that caused the error (may be {@code null})., +++ b/spring-core/src/main/java/org/springframework/core/io/AbstractResource.java, +	 * This implementation returns {@link Channels#newChannel(InputStream)}, +	 * with the result of {@link #getInputStream()}., +	 * <p>This is the same as in {@link Resource}'s corresponding default method, +	 * but mirrored here for efficient JVM-level dispatching in a class hierarchy., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/parsing/Problem.java, + * Copyright 2002-2017 the original author or authors., +	 * @param rootCause the underlying exception that caused the error (may be {@code null}), +	 * Get the underlying exception that caused the error (may be {@code null})., +++ b/spring-core/src/main/java/org/springframework/core/io/AbstractResource.java, +	 * This implementation returns {@link Channels#newChannel(InputStream)}, +	 * with the result of {@link #getInputStream()}., +	 * <p>This is the same as in {@link Resource}'s corresponding default method, +	 * but mirrored here for efficient JVM-level dispatching in a class hierarchy., +++ b/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoader.java, +, +	private static final Log logger = LogFactory.getLog(SpringFactoriesLoader.class);, +, +	private static final Map<ClassLoader, MultiValueMap<String, String>> cache = new ConcurrentReferenceHashMap<>();, +, +, +	 * <p>The returned factories are sorted through {@link AnnotationAwareOrderComparator}., +		return loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());, +	private static Map<String, List<String>> loadSpringFactories(ClassLoader classLoader) {, +			Enumeration<URL> urls = (classLoader != null ?, +					classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :, +					ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));, +			throw new IllegalArgumentException("Unable to load factories from location [" +, +					FACTORIES_RESOURCE_LOCATION + "]", ex);]