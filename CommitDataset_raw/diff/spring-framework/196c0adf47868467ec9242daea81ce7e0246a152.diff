[+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +import java.util.function.IntPredicate;, +	 * <p>If {@code dataBuffers} contains an error signal, then all buffers that preceded the error, +	 * will be {@linkplain #release(DataBuffer) released}, and the error is stored in the, +	 * returned {@code Mono}., +				.onErrorResume(DataBufferUtils::exceptionDataBuffer), +				.flatMap(list -> {, +					for (int i = 0; i < list.size(); i++) {, +						DataBuffer dataBuffer = list.get(i);, +						if (dataBuffer instanceof ExceptionDataBuffer) {, +							list.subList(0, i).forEach(DataBufferUtils::release);, +							return Mono.error(((ExceptionDataBuffer) dataBuffer).throwable());, +						}, +					}, +					return Mono.just(bufferFactory.join(list));, +	private static Mono<DataBuffer> exceptionDataBuffer(Throwable throwable) {, +		return Mono.just(new ExceptionDataBuffer(throwable));, +	}, +, +	/**, +	 * DataBuffer implementation that holds a {@link Throwable}, used in {@link #join(Publisher)}., +	 */, +	private static final class ExceptionDataBuffer implements DataBuffer {, +, +		private final Throwable throwable;, +, +, +		public ExceptionDataBuffer(Throwable throwable) {, +			this.throwable = throwable;, +		}, +, +		public Throwable throwable() {, +			return this.throwable;, +		}, +, +		// Unsupported, +, +		@Override, +		public DataBufferFactory factory() {, +			throw new UnsupportedOperationException();, +		}, +, +		@Override, +		public int indexOf(IntPredicate predicate, int fromIndex) {, +			throw new UnsupportedOperationException();, +		}, +, +		@Override, +		public int lastIndexOf(IntPredicate predicate, int fromIndex) {, +			throw new UnsupportedOperationException();, +		}, +, +		@Override, +		public int readableByteCount() {, +			throw new UnsupportedOperationException();, +		}, +, +		@Override, +		public int writableByteCount() {, +			throw new UnsupportedOperationException();, +		}, +, +		@Override, +		public int capacity() {, +			throw new UnsupportedOperationException();, +		}, +, +		@Override, +		public DataBuffer capacity(int capacity) {, +			throw new UnsupportedOperationException();, +		}, +, +		@Override, +		public int readPosition() {, +			throw new UnsupportedOperationException();, +		}, +, +		@Override, +		public DataBuffer readPosition(int readPosition) {, +			throw new UnsupportedOperationException();, +		}, +, +		@Override, +		public int writePosition() {, +			throw new UnsupportedOperationException();, +		}, +, +		@Override, +		public DataBuffer writePosition(int writePosition) {, +			throw new UnsupportedOperationException();, +		}, +, +		@Override, +		public byte getByte(int index) {, +			throw new UnsupportedOperationException();, +		}, +, +		@Override, +		public byte read() {, +			throw new UnsupportedOperationException();]