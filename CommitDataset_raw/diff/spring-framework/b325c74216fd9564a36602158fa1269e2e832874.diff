[+++ b/spring-aop/src/main/java/org/springframework/aop/config/AopConfigUtils.java, + * Copyright 2002-2018 the original author or authors., + * <p>Only a single auto-proxy creator should be registered yet multiple concrete, + * implementations are available. This class provides a simple escalation protocol,, + * allowing a caller to request a particular auto-proxy creator and know that creator,, + * <i>or a more capable variant thereof</i>, will be registered as a post-processor., +	private static final List<Class<?>> APC_PRIORITY_LIST = new ArrayList<>(3);, +		// Set up the escalation list..., +	public static BeanDefinition registerAutoProxyCreatorIfNecessary(, +			BeanDefinitionRegistry registry, @Nullable Object source) {, +	public static BeanDefinition registerAspectJAutoProxyCreatorIfNecessary(, +			BeanDefinitionRegistry registry, @Nullable Object source) {, +	public static BeanDefinition registerAspectJAnnotationAutoProxyCreatorIfNecessary(, +			BeanDefinitionRegistry registry, @Nullable Object source) {, +	private static BeanDefinition registerOrEscalateApcAsRequired(, +			Class<?> cls, BeanDefinitionRegistry registry, @Nullable Object source) {, +++ b/spring-aop/src/main/java/org/springframework/aop/config/AopConfigUtils.java, + * Copyright 2002-2018 the original author or authors., + * <p>Only a single auto-proxy creator should be registered yet multiple concrete, + * implementations are available. This class provides a simple escalation protocol,, + * allowing a caller to request a particular auto-proxy creator and know that creator,, + * <i>or a more capable variant thereof</i>, will be registered as a post-processor., +	private static final List<Class<?>> APC_PRIORITY_LIST = new ArrayList<>(3);, +		// Set up the escalation list..., +	public static BeanDefinition registerAutoProxyCreatorIfNecessary(, +			BeanDefinitionRegistry registry, @Nullable Object source) {, +	public static BeanDefinition registerAspectJAutoProxyCreatorIfNecessary(, +			BeanDefinitionRegistry registry, @Nullable Object source) {, +	public static BeanDefinition registerAspectJAnnotationAutoProxyCreatorIfNecessary(, +			BeanDefinitionRegistry registry, @Nullable Object source) {, +	private static BeanDefinition registerOrEscalateApcAsRequired(, +			Class<?> cls, BeanDefinitionRegistry registry, @Nullable Object source) {, +++ b/spring-aop/src/main/java/org/springframework/aop/config/AopNamespaceUtils.java, + * Copyright 2002-2018 the original author or authors., + * <p>Only a single auto-proxy creator should be registered and multiple configuration, + * elements may wish to register different concrete implementations. As such this class, + * delegates to {@link AopConfigUtils} which provides a simple escalation protocol., + * Callers may request a particular auto-proxy creator and know that creator,, + * <i>or a more capable variant thereof</i>, will be registered as a post-processor., +			parserContext.registerComponent(, +					new BeanComponentDefinition(beanDefinition, AopConfigUtils.AUTO_PROXY_CREATOR_BEAN_NAME));, +++ b/spring-aop/src/main/java/org/springframework/aop/config/AopConfigUtils.java, + * Copyright 2002-2018 the original author or authors., + * <p>Only a single auto-proxy creator should be registered yet multiple concrete, + * implementations are available. This class provides a simple escalation protocol,, + * allowing a caller to request a particular auto-proxy creator and know that creator,, + * <i>or a more capable variant thereof</i>, will be registered as a post-processor., +	private static final List<Class<?>> APC_PRIORITY_LIST = new ArrayList<>(3);, +		// Set up the escalation list..., +	public static BeanDefinition registerAutoProxyCreatorIfNecessary(, +			BeanDefinitionRegistry registry, @Nullable Object source) {, +	public static BeanDefinition registerAspectJAutoProxyCreatorIfNecessary(, +			BeanDefinitionRegistry registry, @Nullable Object source) {, +	public static BeanDefinition registerAspectJAnnotationAutoProxyCreatorIfNecessary(, +			BeanDefinitionRegistry registry, @Nullable Object source) {, +	private static BeanDefinition registerOrEscalateApcAsRequired(, +			Class<?> cls, BeanDefinitionRegistry registry, @Nullable Object source) {, +++ b/spring-aop/src/main/java/org/springframework/aop/config/AopNamespaceUtils.java, + * Copyright 2002-2018 the original author or authors., + * <p>Only a single auto-proxy creator should be registered and multiple configuration, + * elements may wish to register different concrete implementations. As such this class, + * delegates to {@link AopConfigUtils} which provides a simple escalation protocol., + * Callers may request a particular auto-proxy creator and know that creator,, + * <i>or a more capable variant thereof</i>, will be registered as a post-processor., +			parserContext.registerComponent(, +					new BeanComponentDefinition(beanDefinition, AopConfigUtils.AUTO_PROXY_CREATOR_BEAN_NAME));, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ForkJoinPoolFactoryBean.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-aop/src/main/java/org/springframework/aop/config/AopConfigUtils.java, + * Copyright 2002-2018 the original author or authors., + * <p>Only a single auto-proxy creator should be registered yet multiple concrete, + * implementations are available. This class provides a simple escalation protocol,, + * allowing a caller to request a particular auto-proxy creator and know that creator,, + * <i>or a more capable variant thereof</i>, will be registered as a post-processor., +	private static final List<Class<?>> APC_PRIORITY_LIST = new ArrayList<>(3);, +		// Set up the escalation list..., +	public static BeanDefinition registerAutoProxyCreatorIfNecessary(, +			BeanDefinitionRegistry registry, @Nullable Object source) {, +	public static BeanDefinition registerAspectJAutoProxyCreatorIfNecessary(, +			BeanDefinitionRegistry registry, @Nullable Object source) {, +	public static BeanDefinition registerAspectJAnnotationAutoProxyCreatorIfNecessary(, +			BeanDefinitionRegistry registry, @Nullable Object source) {, +	private static BeanDefinition registerOrEscalateApcAsRequired(, +			Class<?> cls, BeanDefinitionRegistry registry, @Nullable Object source) {, +++ b/spring-aop/src/main/java/org/springframework/aop/config/AopNamespaceUtils.java, + * Copyright 2002-2018 the original author or authors., + * <p>Only a single auto-proxy creator should be registered and multiple configuration, + * elements may wish to register different concrete implementations. As such this class, + * delegates to {@link AopConfigUtils} which provides a simple escalation protocol., + * Callers may request a particular auto-proxy creator and know that creator,, + * <i>or a more capable variant thereof</i>, will be registered as a post-processor., +			parserContext.registerComponent(, +					new BeanComponentDefinition(beanDefinition, AopConfigUtils.AUTO_PROXY_CREATOR_BEAN_NAME));, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ForkJoinPoolFactoryBean.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ScheduledExecutorFactoryBean.java, +	 * Set the remove-on-cancel mode on {@link ScheduledThreadPoolExecutor}., +++ b/spring-aop/src/main/java/org/springframework/aop/config/AopConfigUtils.java, + * Copyright 2002-2018 the original author or authors., + * <p>Only a single auto-proxy creator should be registered yet multiple concrete]