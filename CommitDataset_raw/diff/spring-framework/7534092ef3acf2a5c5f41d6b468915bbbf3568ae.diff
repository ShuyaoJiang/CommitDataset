[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageConverterArgumentResolver.java, +	protected Mono<Object> readBody(MethodParameter bodyParameter, boolean isBodyRequired,, +			ServerWebExchange exchange) {, +					Flux<?> flux = converter.read(elementType, request), +							.onErrorResumeWith(ex -> Flux.error(getReadError(ex, bodyParameter)));, +					if (checkRequired(bodyParameter, isBodyRequired)) {, +						flux = flux.switchIfEmpty(Flux.error(getRequiredBodyError(bodyParameter)));, +					}, +					Mono<?> mono = converter.readMono(elementType, request), +							.otherwise(ex -> Mono.error(getReadError(ex, bodyParameter)));, +					if (checkRequired(bodyParameter, isBodyRequired)) {, +						mono = mono.otherwiseIfEmpty(Mono.error(getRequiredBodyError(bodyParameter)));, +					}, +	protected boolean checkRequired(MethodParameter bodyParameter, boolean isBodyRequired) {, +		if ("rx.Single".equals(bodyParameter.getNestedParameterType().getName())) {, +			return true;, +		}, +		return isBodyRequired;, +	}, +, +	protected ServerWebInputException getReadError(Throwable ex, MethodParameter parameter) {, +		return new ServerWebInputException("Failed to read HTTP message", parameter, ex);, +	}, +, +	protected ServerWebInputException getRequiredBodyError(MethodParameter parameter) {, +		return new ServerWebInputException("Required request body is missing: " +, +				parameter.getMethod().toGenericString());, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageConverterArgumentResolver.java, +	protected Mono<Object> readBody(MethodParameter bodyParameter, boolean isBodyRequired,, +			ServerWebExchange exchange) {, +					Flux<?> flux = converter.read(elementType, request), +							.onErrorResumeWith(ex -> Flux.error(getReadError(ex, bodyParameter)));, +					if (checkRequired(bodyParameter, isBodyRequired)) {, +						flux = flux.switchIfEmpty(Flux.error(getRequiredBodyError(bodyParameter)));, +					}, +					Mono<?> mono = converter.readMono(elementType, request), +							.otherwise(ex -> Mono.error(getReadError(ex, bodyParameter)));, +					if (checkRequired(bodyParameter, isBodyRequired)) {, +						mono = mono.otherwiseIfEmpty(Mono.error(getRequiredBodyError(bodyParameter)));, +					}, +	protected boolean checkRequired(MethodParameter bodyParameter, boolean isBodyRequired) {, +		if ("rx.Single".equals(bodyParameter.getNestedParameterType().getName())) {, +			return true;, +		}, +		return isBodyRequired;, +	}, +, +	protected ServerWebInputException getReadError(Throwable ex, MethodParameter parameter) {, +		return new ServerWebInputException("Failed to read HTTP message", parameter, ex);, +	}, +, +	protected ServerWebInputException getRequiredBodyError(MethodParameter parameter) {, +		return new ServerWebInputException("Required request body is missing: " +, +				parameter.getMethod().toGenericString());, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/HttpEntityArgumentResolver.java, +		return readBody(bodyParameter, false, exchange), +				.map(body -> createHttpEntity(body, entityType, exchange)), +				.defaultIfEmpty(createHttpEntity(null, entityType, exchange));, +	}, +, +	private Object createHttpEntity(Object body, ResolvableType entityType,, +			ServerWebExchange exchange) {, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageConverterArgumentResolver.java, +	protected Mono<Object> readBody(MethodParameter bodyParameter, boolean isBodyRequired,, +			ServerWebExchange exchange) {, +					Flux<?> flux = converter.read(elementType, request), +							.onErrorResumeWith(ex -> Flux.error(getReadError(ex, bodyParameter)));, +					if (checkRequired(bodyParameter, isBodyRequired)) {, +						flux = flux.switchIfEmpty(Flux.error(getRequiredBodyError(bodyParameter)));, +					}, +					Mono<?> mono = converter.readMono(elementType, request), +							.otherwise(ex -> Mono.error(getReadError(ex, bodyParameter)));, +					if (checkRequired(bodyParameter, isBodyRequired)) {, +						mono = mono.otherwiseIfEmpty(Mono.error(getRequiredBodyError(bodyParameter)));, +					}, +	protected boolean checkRequired(MethodParameter bodyParameter, boolean isBodyRequired) {, +		if ("rx.Single".equals(bodyParameter.getNestedParameterType().getName())) {, +			return true;, +		}, +		return isBodyRequired;, +	}, +, +	protected ServerWebInputException getReadError(Throwable ex, MethodParameter parameter) {, +		return new ServerWebInputException("Failed to read HTTP message", parameter, ex);, +	}, +, +	protected ServerWebInputException getRequiredBodyError(MethodParameter parameter) {, +		return new ServerWebInputException("Required request body is missing: " +, +				parameter.getMethod().toGenericString());, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/HttpEntityArgumentResolver.java, +		return readBody(bodyParameter, false, exchange), +				.map(body -> createHttpEntity(body, entityType, exchange)), +				.defaultIfEmpty(createHttpEntity(null, entityType, exchange));]