[+++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, + * Copyright 2002-2013 the original author or authors., +import java.lang.reflect.Array;, + * @author Phillip Webb, +	 * Create a new type descriptor as an array of the specified type. For example to, +	 * create a {@code Map<String,String>[]} use, +	 * {@code TypeDescriptor.array(TypeDescriptor.map(Map.class, TypeDescriptor.value(String.class), TypeDescriptor.value(String.class)))}., +	 * @param elementTypeDescriptor the {@link TypeDescriptor} of the array element or {@code null}, +	 * @return an array {@link TypeDescriptor} or {@code null} if {@code elementTypeDescriptor} is {@code null}, +	 * @since 3.2, +	 */, +	public static TypeDescriptor array(TypeDescriptor elementTypeDescriptor) {, +		if(elementTypeDescriptor == null) {, +			return null;, +		}, +		Class<?> type = Array.newInstance(elementTypeDescriptor.getType(), 0).getClass();, +		return new TypeDescriptor(type, elementTypeDescriptor, null, null, elementTypeDescriptor.getAnnotations());, +	}, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, + * Copyright 2002-2013 the original author or authors., +import java.lang.reflect.Array;, + * @author Phillip Webb, +	 * Create a new type descriptor as an array of the specified type. For example to, +	 * create a {@code Map<String,String>[]} use, +	 * {@code TypeDescriptor.array(TypeDescriptor.map(Map.class, TypeDescriptor.value(String.class), TypeDescriptor.value(String.class)))}., +	 * @param elementTypeDescriptor the {@link TypeDescriptor} of the array element or {@code null}, +	 * @return an array {@link TypeDescriptor} or {@code null} if {@code elementTypeDescriptor} is {@code null}, +	 * @since 3.2, +	 */, +	public static TypeDescriptor array(TypeDescriptor elementTypeDescriptor) {, +		if(elementTypeDescriptor == null) {, +			return null;, +		}, +		Class<?> type = Array.newInstance(elementTypeDescriptor.getType(), 0).getClass();, +		return new TypeDescriptor(type, elementTypeDescriptor, null, null, elementTypeDescriptor.getAnnotations());, +	}, +, +	/**, +++ b/spring-core/src/test/java/org/springframework/core/convert/TypeDescriptorTests.java, + * Copyright 2002-2013 the original author or authors., +import java.util.LinkedHashMap;, + * @author Phillip Webb, +	@Test, +	public void createMapArray() throws Exception {, +		TypeDescriptor mapType = TypeDescriptor.map(LinkedHashMap.class, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class));, +		TypeDescriptor arrayType = TypeDescriptor.array(mapType);, +		assertEquals(arrayType.getType(), LinkedHashMap[].class);, +		assertEquals(arrayType.getElementTypeDescriptor(), mapType);, +	}, +, +, +	@Test, +	public void createStringArray() throws Exception {, +		TypeDescriptor arrayType = TypeDescriptor.array(TypeDescriptor.valueOf(String.class));, +		assertEquals(arrayType, TypeDescriptor.valueOf(String[].class));, +	}, +, +	@Test, +	public void createNullArray() throws Exception {, +		assertNull(TypeDescriptor.array(null));, +	}]