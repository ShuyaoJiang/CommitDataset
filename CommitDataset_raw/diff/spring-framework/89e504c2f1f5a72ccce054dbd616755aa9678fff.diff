[+++ b/spring-core/src/main/java/org/springframework/util/MimeType.java, +import java.util.Map.Entry;, +				parametersAreEqual(otherType));, +	}, +, +	/**, +	 * Determine if the parameters in this {@code MimeType} and the supplied, +	 * {@code MimeType} are equal, performing case-insensitive comparisons, +	 * for {@link Charset}s., +	 * @since 4.2, +	 */, +	private boolean parametersAreEqual(MimeType that) {, +		if (this.parameters.size() != that.parameters.size()) {, +			return false;, +		}, +, +		for (Entry<String, String> entry : this.parameters.entrySet()) {, +			String key = entry.getKey();, +			if (!that.parameters.containsKey(key)) {, +				return false;, +			}, +, +			if (PARAM_CHARSET.equals(key)) {, +				if (!ObjectUtils.nullSafeEquals(this.getCharSet(), that.getCharSet())) {, +					return false;, +				}, +			}, +			else if (!ObjectUtils.nullSafeEquals(this.parameters.get(key), that.parameters.get(key))) {, +				return false;, +			}, +		}, +, +		return true;, +++ b/spring-core/src/main/java/org/springframework/util/MimeType.java, +import java.util.Map.Entry;, +				parametersAreEqual(otherType));, +	}, +, +	/**, +	 * Determine if the parameters in this {@code MimeType} and the supplied, +	 * {@code MimeType} are equal, performing case-insensitive comparisons, +	 * for {@link Charset}s., +	 * @since 4.2, +	 */, +	private boolean parametersAreEqual(MimeType that) {, +		if (this.parameters.size() != that.parameters.size()) {, +			return false;, +		}, +, +		for (Entry<String, String> entry : this.parameters.entrySet()) {, +			String key = entry.getKey();, +			if (!that.parameters.containsKey(key)) {, +				return false;, +			}, +, +			if (PARAM_CHARSET.equals(key)) {, +				if (!ObjectUtils.nullSafeEquals(this.getCharSet(), that.getCharSet())) {, +					return false;, +				}, +			}, +			else if (!ObjectUtils.nullSafeEquals(this.parameters.get(key), that.parameters.get(key))) {, +				return false;, +			}, +		}, +, +		return true;, +++ b/spring-core/src/test/java/org/springframework/util/MimeTypeTests.java, + * Copyright 2002-2015 the original author or authors., +import static java.util.Collections.singletonMap;, + * Unit tests for {@link MimeType}., + *, + * @author Sam Brannen, +	public void withConversionService() {, +	/**, +	 * SPR-8917, +	 */, +	/**, +	 * SPR-8917, +	 */, +		MimeType audioBasicLevel = new MimeType("audio", "basic", singletonMap("level", "1"));, +		m1 = new MimeType("audio", "basic", singletonMap("foo", "bar"));, +		m2 = new MimeType("audio", "basic", singletonMap("Foo", "bar"));, +		m1 = new MimeType("audio", "basic", singletonMap("foo", "bar"));, +		m2 = new MimeType("audio", "basic", singletonMap("foo", "Bar"));, +	/**, +	 * SPR-13157, +	 * @since 4.2, +	 */, +	@Test, +	public void equalsIsCaseInsensitiveForCharsets() {, +		MimeType m1 = new MimeType("text", "plain", singletonMap("charset", "UTF-8"));, +		MimeType m2 = new MimeType("text", "plain", singletonMap("charset", "utf-8"));, +		assertEquals(m1, m2);, +		assertEquals(m2, m1);, +	}, +++ b/spring-core/src/main/java/org/springframework/util/MimeType.java, +import java.util.Map.Entry;, +				parametersAreEqual(otherType));, +	}, +]