[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +, +, +, +		callbackFilter = new CallbackFilter() {, +		if (logger.isInfoEnabled()) {, +			logger.info(String.format("Successfully enhanced %s; enhanced class name is: %s",, +			// TODO: remove hard ScopedProxyUtils dependency, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +, +, +, +		callbackFilter = new CallbackFilter() {, +		if (logger.isInfoEnabled()) {, +			logger.info(String.format("Successfully enhanced %s; enhanced class name is: %s",, +			// TODO: remove hard ScopedProxyUtils dependency, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +import java.util.LinkedHashMap;, +import java.util.Map;, +	protected void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {, +	/**, +	 * Check whether the given bean definition is a candidate for a configuration class,, +	 * and mark it accordingly., +	 * @param beanDef the bean definition to check, +	 * @return whether the candidate qualifies as (any kind of) configuration class, +	 */, +	protected boolean checkConfigurationClassCandidate(BeanDefinition beanDef) {, +			metadata = new StandardAnnotationMetadata(((AbstractBeanDefinition) beanDef).getBeanClass());, +	protected void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {, +		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>();, +				if (!(beanDef instanceof AbstractBeanDefinition)) {, +					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +, +							beanName + "' since it is not stored in an AbstractBeanDefinition subclass");, +				}, +				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef);, +					configBeanDefs.keySet());, +		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {, +			AbstractBeanDefinition beanDef = entry.getValue();, +							"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()));, +			catch (Throwable ex) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +			BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +, +, +, +		callbackFilter = new CallbackFilter() {, +		if (logger.isInfoEnabled()) {, +			logger.info(String.format("Successfully enhanced %s; enhanced class name is: %s",, +			// TODO: remove hard ScopedProxyUtils dependency, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +import java.util.LinkedHashMap;, +import java.util.Map;, +	protected void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {, +	/**, +	 * Check whether the given bean definition is a candidate for a configuration class,, +	 * and mark it accordingly., +	 * @param beanDef the bean definition to check, +	 * @return whether the candidate qualifies as (any kind of) configuration class, +	 */, +	protected boolean checkConfigurationClassCandidate(BeanDefinition beanDef) {, +			metadata = new StandardAnnotationMetadata(((AbstractBeanDefinition) beanDef).getBeanClass());, +	protected void enhanceConfigurationClasses(ConfigurableListableBeanFactory beanFactory) {, +		Map<String, AbstractBeanDefinition> configBeanDefs = new LinkedHashMap<String, AbstractBeanDefinition>();, +				if (!(beanDef instanceof AbstractBeanDefinition)) {, +					throw new BeanDefinitionStoreException("Cannot enhance @Configuration bean definition '" +, +							beanName + "' since it is not stored in an AbstractBeanDefinition subclass");, +				}, +				configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef);, +					configBeanDefs.keySet());, +		for (Map.Entry<String, AbstractBeanDefinition> entry : configBeanDefs.entrySet()) {, +			AbstractBeanDefinition beanDef = entry.getValue();, +							"with enhanced class name '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()));, +			catch (Throwable ex) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ScopedProxyCreator.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License.]