[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +	private static transient Log logger;, +, +			logIntrospectionFailure(ann.annotationType(), ex);, +			logIntrospectionFailure(annotatedElement, ex);, +			logIntrospectionFailure(method, ex);, +			logIntrospectionFailure(annotatedElement, ex);, +				logIntrospectionFailure(ifcMethod, ex);, +	@SuppressWarnings("unchecked"), +, +			Annotation[] anns = clazz.getDeclaredAnnotations();, +			for (Annotation ann : anns) {, +				if (ann.annotationType().equals(annotationType)) {, +					return (A) ann;, +			for (Annotation ann : anns) {, +		}, +		catch (Exception ex) {, +			// Assuming nested Class values not resolvable within annotation attributes..., +			// We're probably hitting a non-present optional arrangement - let's back out., +			return null;, +		}, +, +		for (Class<?> ifc : clazz.getInterfaces()) {, +			A annotation = findAnnotation(ifc, annotationType, visited);, +			if (annotation != null) {, +				return annotation;, +			}, +		}, +, +			for (Annotation ann : clazz.getDeclaredAnnotations()) {, +				if (ann.annotationType().equals(annotationType)) {, +			logIntrospectionFailure(clazz, ex);, +	private static void logIntrospectionFailure(AnnotatedElement annotatedElement, Exception ex) {, +		Log loggerToUse = logger;, +		if (loggerToUse == null) {, +			loggerToUse = LogFactory.getLog(AnnotationUtils.class);, +			logger = loggerToUse;, +		}, +		if (loggerToUse.isInfoEnabled()) {, +			loggerToUse.info("Failed to introspect annotations on [" + annotatedElement + "]: " + ex);, +		}, +	}, +, +, +				for (Annotation ann : annotatedElement.getAnnotations()) {, +					if (ObjectUtils.nullSafeEquals(this.annotationType, ann.annotationType())) {, +						this.result.add((A) ann);, +					else if (ObjectUtils.nullSafeEquals(this.containerAnnotationType, ann.annotationType())) {, +						this.result.addAll(getValue(ann));, +					else if (!isInJavaLangAnnotationPackage(ann)) {, +						process(ann.annotationType());, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +	private static transient Log logger;, +, +			logIntrospectionFailure(ann.annotationType(), ex);, +			logIntrospectionFailure(annotatedElement, ex);, +			logIntrospectionFailure(method, ex);, +			logIntrospectionFailure(annotatedElement, ex);, +				logIntrospectionFailure(ifcMethod, ex);, +	@SuppressWarnings("unchecked"), +, +			Annotation[] anns = clazz.getDeclaredAnnotations();, +			for (Annotation ann : anns) {, +				if (ann.annotationType().equals(annotationType)) {, +					return (A) ann;, +			for (Annotation ann : anns) {, +		}, +		catch (Exception ex) {, +			// Assuming nested Class values not resolvable within annotation attributes..., +			// We're probably hitting a non-present optional arrangement - let's back out., +			return null;, +		}, +, +		for (Class<?> ifc : clazz.getInterfaces()) {, +			A annotation = findAnnotation(ifc, annotationType, visited);, +			if (annotation != null) {, +				return annotation;, +			}, +		}, +, +			for (Annotation ann : clazz.getDeclaredAnnotations()) {, +				if (ann.annotationType().equals(annotationType)) {, +			logIntrospectionFailure(clazz, ex);, +	private static void logIntrospectionFailure(AnnotatedElement annotatedElement, Exception ex) {, +		Log loggerToUse = logger;, +		if (loggerToUse == null) {, +			loggerToUse = LogFactory.getLog(AnnotationUtils.class);, +			logger = loggerToUse;, +		}, +		if (loggerToUse.isInfoEnabled()) {, +			loggerToUse.info("Failed to introspect annotations on [" + annotatedElement + "]: " + ex);, +		}, +	}, +, +, +				for (Annotation ann : annotatedElement.getAnnotations()) {, +					if (ObjectUtils.nullSafeEquals(this.annotationType, ann.annotationType())) {, +						this.result.add((A) ann);, +					else if (ObjectUtils.nullSafeEquals(this.containerAnnotationType, ann.annotationType())) {, +						this.result.addAll(getValue(ann));]