[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java, +import java.util.Arrays;, +import java.util.function.Function;, +import java.util.stream.Collectors;, +				logger.trace(formatMappings(userType, methods));, +	private String formatMappings(Class<?> userType, Map<Method, T> methods) {, +, +		String formattedType = Arrays.stream(userType.getPackage().getName().split("\\.")), +				.map(p -> p.substring(0, 1)), +				.collect(Collectors.joining(".", "", ".")) + userType.getSimpleName();, +, +		Function<Method, String> methodFormatter = method -> Arrays.stream(method.getParameterTypes()), +				.map(Class::getSimpleName), +				.collect(Collectors.joining(",", "(", ")"));, +, +		return methods.entrySet().stream(), +				.map(e -> {, +					Method method = e.getKey();, +					return e.getValue() + ": " + method.getName() + methodFormatter.apply(method);, +				}), +				.collect(Collectors.joining("\n\t", "\n\t" + formattedType + ":" + "\n\t", ""));, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java, +import java.util.Arrays;, +import java.util.function.Function;, +import java.util.stream.Collectors;, +				logger.trace(formatMappings(userType, methods));, +	private String formatMappings(Class<?> userType, Map<Method, T> methods) {, +, +		String formattedType = Arrays.stream(userType.getPackage().getName().split("\\.")), +				.map(p -> p.substring(0, 1)), +				.collect(Collectors.joining(".", "", ".")) + userType.getSimpleName();, +, +		Function<Method, String> methodFormatter = method -> Arrays.stream(method.getParameterTypes()), +				.map(Class::getSimpleName), +				.collect(Collectors.joining(",", "(", ")"));, +, +		return methods.entrySet().stream(), +				.map(e -> {, +					Method method = e.getKey();, +					return e.getValue() + ": " + method.getName() + methodFormatter.apply(method);, +				}), +				.collect(Collectors.joining("\n\t", "\n\t" + formattedType + ":" + "\n\t", ""));, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/RequestMappingInfo.java, +import java.util.Set;, +			Set<RequestMethod> httpMethods = this.methodsCondition.getMethods();, +			builder.append(httpMethods.size() == 1 ? httpMethods.iterator().next() : httpMethods);, +		}, +		if (!this.patternsCondition.isEmpty()) {, +			Set<PathPattern> patterns = this.patternsCondition.getPatterns();, +			builder.append(" ").append(patterns.size() == 1 ? patterns.iterator().next() : patterns);, +			builder.append(", params ").append(this.paramsCondition);, +			builder.append(", headers ").append(this.headersCondition);, +			builder.append(", consumes ").append(this.consumesCondition);, +			builder.append(", produces ").append(this.producesCondition);, +			builder.append(", and ").append(this.customConditionHolder);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java, +import java.util.Arrays;, +import java.util.function.Function;, +import java.util.stream.Collectors;, +				logger.trace(formatMappings(userType, methods));, +	private String formatMappings(Class<?> userType, Map<Method, T> methods) {, +, +		String formattedType = Arrays.stream(userType.getPackage().getName().split("\\.")), +				.map(p -> p.substring(0, 1)), +				.collect(Collectors.joining(".", "", ".")) + userType.getSimpleName();, +, +		Function<Method, String> methodFormatter = method -> Arrays.stream(method.getParameterTypes()), +				.map(Class::getSimpleName), +				.collect(Collectors.joining(",", "(", ")"));, +, +		return methods.entrySet().stream(), +				.map(e -> {, +					Method method = e.getKey();, +					return e.getValue() + ": " + method.getName() + methodFormatter.apply(method);, +				}), +				.collect(Collectors.joining("\n\t", "\n\t" + formattedType + ":" + "\n\t", ""));, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/RequestMappingInfo.java, +import java.util.Set;, +			Set<RequestMethod> httpMethods = this.methodsCondition.getMethods();, +			builder.append(httpMethods.size() == 1 ? httpMethods.iterator().next() : httpMethods);, +		}, +		if (!this.patternsCondition.isEmpty()) {, +			Set<PathPattern> patterns = this.patternsCondition.getPatterns();, +			builder.append(" ").append(patterns.size() == 1 ? patterns.iterator().next() : patterns);, +			builder.append(", params ").append(this.paramsCondition);, +			builder.append(", headers ").append(this.headersCondition);, +			builder.append(", consumes ").append(this.consumesCondition);, +			builder.append(", produces ").append(this.producesCondition);, +			builder.append(", and ").append(this.customConditionHolder);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +import java.util.Arrays;, +import java.util.function.Function;, +import java.util.stream.Collectors;, +				logger.trace(formatMappings(userType, methods));]