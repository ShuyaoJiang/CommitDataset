[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +			Assert.state(beanFactory != null, "The BeanFactory has not been injected into the @Configuration class");, +			Assert.state(beanFactory instanceof ConfigurableBeanFactory, "The injected BeanFactory is not a ConfigurableBeanFactory");, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +			Assert.state(beanFactory != null, "The BeanFactory has not been injected into the @Configuration class");, +			Assert.state(beanFactory instanceof ConfigurableBeanFactory, "The injected BeanFactory is not a ConfigurableBeanFactory");, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +import java.beans.PropertyDescriptor;, +import org.springframework.beans.PropertyValues;, +import org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor;, +import org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessorAdapter;, +import org.springframework.context.annotation.ConfigurationClassEnhancer.EnhancedConfiguration;, +	private static final String ENHANCED_CONFIGURATION_PROCESSOR_BEAN_NAME =, +			ConfigurationClassPostProcessor.class.getName() + ".enhancedConfigurationProcessor";, +, +		RootBeanDefinition ecbpp = new RootBeanDefinition(EnhancedConfigurationBeanPostProcessor.class);, +		ecbpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +		registry.registerBeanDefinition(ENHANCED_CONFIGURATION_PROCESSOR_BEAN_NAME, ecbpp);, +, +, +	/**, +	 * {@link InstantiationAwareBeanPostProcessorAdapter} that ensures, +	 * {@link EnhancedConfiguration} beans are injected with the {@link BeanFactory}, +	 * before the {@link AutowiredAnnotationBeanPostProcessor} runs (SPR-10668)., +	 */, +	private static class EnhancedConfigurationBeanPostProcessor extends, +			InstantiationAwareBeanPostProcessorAdapter implements PriorityOrdered,, +			BeanFactoryAware {, +, +		private BeanFactory beanFactory;, +, +		@Override, +		public int getOrder() {, +			return Ordered.HIGHEST_PRECEDENCE;, +		}, +, +		@Override, +		public PropertyValues postProcessPropertyValues(PropertyValues pvs,, +				PropertyDescriptor[] pds, Object bean, String beanName), +				throws BeansException {, +			// Inject the BeanFactory before AutowiredAnnotationBeanPostProcessor's, +			// postProcessPropertyValues method attempts to auto-wire other configuration, +			// beans., +			if (bean instanceof EnhancedConfiguration) {, +				((EnhancedConfiguration) bean).setBeanFactory(this.beanFactory);, +			}, +			return pvs;, +		}, +, +		@Override, +		public void setBeanFactory(BeanFactory beanFactory) throws BeansException {, +			this.beanFactory = beanFactory;, +		}, +, +	}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +			Assert.state(beanFactory != null, "The BeanFactory has not been injected into the @Configuration class");, +			Assert.state(beanFactory instanceof ConfigurableBeanFactory, "The injected BeanFactory is not a ConfigurableBeanFactory");, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +import java.beans.PropertyDescriptor;, +import org.springframework.beans.PropertyValues;, +import org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor;, +import org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessorAdapter;, +import org.springframework.context.annotation.ConfigurationClassEnhancer.EnhancedConfiguration;, +	private static final String ENHANCED_CONFIGURATION_PROCESSOR_BEAN_NAME =, +			ConfigurationClassPostProcessor.class.getName() + ".enhancedConfigurationProcessor";, +, +		RootBeanDefinition ecbpp = new RootBeanDefinition(EnhancedConfigurationBeanPostProcessor.class);, +		ecbpp.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +		registry.registerBeanDefinition(ENHANCED_CONFIGURATION_PROCESSOR_BEAN_NAME, ecbpp);, +, +, +	/**, +	 * {@link InstantiationAwareBeanPostProcessorAdapter} that ensures, +	 * {@link EnhancedConfiguration} beans are injected with the {@link BeanFactory}, +	 * before the {@link AutowiredAnnotationBeanPostProcessor} runs (SPR-10668)., +	 */, +	private static class EnhancedConfigurationBeanPostProcessor extends, +			InstantiationAwareBeanPostProcessorAdapter implements PriorityOrdered,, +			BeanFactoryAware {, +, +		private BeanFactory beanFactory;, +, +		@Override, +		public int getOrder() {, +			return Ordered.HIGHEST_PRECEDENCE;, +		}, +, +		@Override, +		public PropertyValues postProcessPropertyValues(PropertyValues pvs,, +				PropertyDescriptor[] pds, Object bean, String beanName), +				throws BeansException {, +			// Inject the BeanFactory before AutowiredAnnotationBeanPostProcessor's, +			// postProcessPropertyValues method attempts to auto-wire other configuration, +			// beans., +			if (bean instanceof EnhancedConfiguration) {, +				((EnhancedConfiguration) bean).setBeanFactory(this.beanFactory);, +			}, +			return pvs;, +		}]