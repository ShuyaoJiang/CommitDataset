[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java, + * Copyright 2002-2017 the original author or authors., +		Comparator<Method> adviceKindComparator = new ConvertingComparator<>(, +				});, +		Comparator<Method> methodNameComparator = new ConvertingComparator<>(, +				});, +		METHOD_COMPARATOR = adviceKindComparator.thenComparing(methodNameComparator);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java, + * Copyright 2002-2017 the original author or authors., +		Comparator<Method> adviceKindComparator = new ConvertingComparator<>(, +				});, +		Comparator<Method> methodNameComparator = new ConvertingComparator<>(, +				});, +		METHOD_COMPARATOR = adviceKindComparator.thenComparing(methodNameComparator);, +++ b/spring-core/src/main/java/org/springframework/core/convert/converter/ConvertingComparator.java, +import org.springframework.util.comparator.Comparators;, + * A {@link Comparator} that converts values before they are compared., + * The specified {@link Converter} will be used to convert each value, + * before it passed to the underlying {@code Comparator}., +		this(Comparators.comparable(), converter);, +	 * Create a new {@code ConvertingComparator} instance., +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java, + * Copyright 2002-2017 the original author or authors., +		Comparator<Method> adviceKindComparator = new ConvertingComparator<>(, +				});, +		Comparator<Method> methodNameComparator = new ConvertingComparator<>(, +				});, +		METHOD_COMPARATOR = adviceKindComparator.thenComparing(methodNameComparator);, +++ b/spring-core/src/main/java/org/springframework/core/convert/converter/ConvertingComparator.java, +import org.springframework.util.comparator.Comparators;, + * A {@link Comparator} that converts values before they are compared., + * The specified {@link Converter} will be used to convert each value, + * before it passed to the underlying {@code Comparator}., +		this(Comparators.comparable(), converter);, +	 * Create a new {@code ConvertingComparator} instance., +++ b/spring-core/src/main/java/org/springframework/util/comparator/BooleanComparator.java, + * Copyright 2002-2017 the original author or authors., + * A {@link Comparator} for {@link Boolean} objects that can sort either, + * {@code true} or {@code false} first., +public class BooleanComparator implements Comparator<Boolean>, Serializable {, +	 * A shared default instance of this comparator,, +	 * treating {@code true} lower than {@code false}., +	 * A shared default instance of this comparator,, +	 * treating {@code true} higher than {@code false}., +, +		return (this == obj ||, +				(obj instanceof BooleanComparator && (this.trueLow == ((BooleanComparator) obj).trueLow)));, +		return getClass().hashCode() * (this.trueLow ? -1 : 1);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java, + * Copyright 2002-2017 the original author or authors., +		Comparator<Method> adviceKindComparator = new ConvertingComparator<>(, +				});, +		Comparator<Method> methodNameComparator = new ConvertingComparator<>(, +				});, +		METHOD_COMPARATOR = adviceKindComparator.thenComparing(methodNameComparator);, +++ b/spring-core/src/main/java/org/springframework/core/convert/converter/ConvertingComparator.java, +import org.springframework.util.comparator.Comparators;, + * A {@link Comparator} that converts values before they are compared., + * The specified {@link Converter} will be used to convert each value, + * before it passed to the underlying {@code Comparator}., +		this(Comparators.comparable(), converter);, +	 * Create a new {@code ConvertingComparator} instance., +++ b/spring-core/src/main/java/org/springframework/util/comparator/BooleanComparator.java, + * Copyright 2002-2017 the original author or authors., + * A {@link Comparator} for {@link Boolean} objects that can sort either, + * {@code true} or {@code false} first., +public class BooleanComparator implements Comparator<Boolean>, Serializable {, +	 * A shared default instance of this comparator,, +	 * treating {@code true} lower than {@code false}., +	 * A shared default instance of this comparator,, +	 * treating {@code true} higher than {@code false}., +, +		return (this == obj ||, +				(obj instanceof BooleanComparator && (this.trueLow == ((BooleanComparator) obj).trueLow)));, +		return getClass().hashCode() * (this.trueLow ? -1 : 1);, +++ b/spring-core/src/main/java/org/springframework/util/comparator/ComparableComparator.java, + * Copyright 2002-2017 the original author or authors., +	/**, +	 * A shared instance of this default comparator, +	 * @see Comparators#comparable(), +	 */, +, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java, + * Copyright 2002-2017 the original author or authors., +		Comparator<Method> adviceKindComparator = new ConvertingComparator<>(, +				});, +		Comparator<Method> methodNameComparator = new ConvertingComparator<>(, +				});, +		METHOD_COMPARATOR = adviceKindComparator.thenComparing(methodNameComparator);, +++ b/spring-core/src/main/java/org/springframework/core/convert/converter/ConvertingComparator.java, +import org.springframework.util.comparator.Comparators;, + * A {@link Comparator} that converts values before they are compared., + * The specified {@link Converter} will be used to convert each value, + * before it passed to the underlying {@code Comparator}., +		this(Comparators.comparable(), converter);, +	 * Create a new {@code ConvertingComparator} instance., +++ b/spring-core/src/main/java/org/springframework/util/comparator/BooleanComparator.java, + * Copyright 2002-2017 the original author or authors., + * A {@link Comparator} for {@link Boolean} objects that can sort either, + * {@code true} or {@code false} first.]