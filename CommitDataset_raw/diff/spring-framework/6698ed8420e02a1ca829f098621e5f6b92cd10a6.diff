[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, +import org.springframework.context.annotation.support.ConfigurationClassPostProcessor;, + * {@link org.springframework.beans.factory.config.BeanPostProcessor} and, + * {@link org.springframework.beans.factory.config.BeanFactoryPostProcessor}, + * @author Chris Beams, + * @see org.springframework.context.annotation.support.ConfigurationClassPostProcessor;, + * @see org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor, +	 * The bean name of the internally managed Configuration annotation processor., +	 */, +	public static final String CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME =, +			"org.springframework.context.annotation.configurationAnnotationProcessor";, +, +	/**, +			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME));, +		}, +, +		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {, +			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class);, +			def.setSource(source);, +			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME));, +			beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME));, +			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME));, +			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME));, +	private static BeanDefinitionHolder registerPostProcessor(, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, +import org.springframework.context.annotation.support.ConfigurationClassPostProcessor;, + * {@link org.springframework.beans.factory.config.BeanPostProcessor} and, + * {@link org.springframework.beans.factory.config.BeanFactoryPostProcessor}, + * @author Chris Beams, + * @see org.springframework.context.annotation.support.ConfigurationClassPostProcessor;, + * @see org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor, +	 * The bean name of the internally managed Configuration annotation processor., +	 */, +	public static final String CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME =, +			"org.springframework.context.annotation.configurationAnnotationProcessor";, +, +	/**, +			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME));, +		}, +, +		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {, +			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class);, +			def.setSource(source);, +			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME));, +			beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME));, +			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME));, +			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME));, +	private static BeanDefinitionHolder registerPostProcessor(, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/ClassPathBeanDefinitionScannerTests.java, +import org.aspectj.lang.annotation.Aspect;, +import org.junit.Test;, +import example.scannable.CustomComponent;, +import example.scannable.FooService;, +import example.scannable.FooServiceImpl;, +import example.scannable.NamedStubDao;, +import example.scannable.StubFooDao;, +, +		assertEquals(10, beanCount);, +		assertEquals(10, beanCount);, +		assertEquals(5, beanCount);, +		assertEquals(5, beanCount);, +		assertEquals(11, beanCount);, +		assertEquals(9, beanCount);, +		assertEquals(9, beanCount);, +		assertEquals(8, beanCount);, +		assertEquals(10, beanCount);, +		assertEquals(10, singlePackageBeanCount);, +		assertEquals(10, beanCount);, +		assertEquals(10, beanCount);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, +import org.springframework.context.annotation.support.ConfigurationClassPostProcessor;, + * {@link org.springframework.beans.factory.config.BeanPostProcessor} and, + * {@link org.springframework.beans.factory.config.BeanFactoryPostProcessor}, + * @author Chris Beams, + * @see org.springframework.context.annotation.support.ConfigurationClassPostProcessor;, + * @see org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor, +	 * The bean name of the internally managed Configuration annotation processor., +	 */, +	public static final String CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME =, +			"org.springframework.context.annotation.configurationAnnotationProcessor";, +, +	/**, +			beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME));, +		}, +, +		if (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) {, +			RootBeanDefinition def = new RootBeanDefinition(ConfigurationClassPostProcessor.class);, +			def.setSource(source);, +			beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME));, +			beanDefs.add(registerPostProcessor(registry, def, REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME));, +			beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME));, +			beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME));, +	private static BeanDefinitionHolder registerPostProcessor(, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/ClassPathBeanDefinitionScannerTests.java, +import org.aspectj.lang.annotation.Aspect;, +import org.junit.Test;, +import example.scannable.CustomComponent;, +import example.scannable.FooService;, +import example.scannable.FooServiceImpl;, +import example.scannable.NamedStubDao;]