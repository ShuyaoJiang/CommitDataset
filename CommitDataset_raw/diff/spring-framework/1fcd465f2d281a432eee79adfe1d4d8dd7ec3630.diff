[+++ b/spring-web/src/main/java/org/springframework/web/context/support/WebApplicationContextUtils.java, +	 * Find the root {@code WebApplicationContext} for this web app, typically, +	 * Find the root {@code WebApplicationContext} for this web app, typically, +	 * Find a custom {@code WebApplicationContext} for this web app., +	/**, +	 * Find a unique {@code WebApplicationContext} for this web app: either the, +	 * root web app context (preferred) or a unique {@code WebApplicationContext}, +	 * among the registered {@code ServletContext} attributes (typically coming, +	 * from a single {@code DispatcherServlet} in the current web application)., +	 * <p>Note that {@code DispatcherServlet}'s exposure of its context can be, +	 * controlled through its {@code publishContext} property, which is {@code true}, +	 * by default but can be selectively switched to only publish a single context, +	 * despite multiple {@code DispatcherServlet} registrations in the web app., +	 * @param sc ServletContext to find the web application context for, +	 * @return the desired WebApplicationContext for this web app, or {@code null} if none, +	 * @since 4.2, +	 * @see #getWebApplicationContext(ServletContext), +	 * @see ServletContext#getAttributeNames(), +	 */, +	public static WebApplicationContext findWebApplicationContext(ServletContext sc) {, +		WebApplicationContext wac = getWebApplicationContext(sc);, +		if (wac == null) {, +			Enumeration<String> attrNames = sc.getAttributeNames();, +			while (attrNames.hasMoreElements()) {, +				String attrName = attrNames.nextElement();, +				Object attrValue = sc.getAttribute(attrName);, +				if (attrValue instanceof WebApplicationContext) {, +					if (wac != null) {, +						throw new IllegalStateException("No unique WebApplicationContext found: more than one " +, +								"DispatcherServlet registered with publishContext=true?");, +					}, +					wac = (WebApplicationContext) attrValue;, +				}, +			}, +		}, +		return wac;, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/context/support/WebApplicationContextUtils.java, +	 * Find the root {@code WebApplicationContext} for this web app, typically, +	 * Find the root {@code WebApplicationContext} for this web app, typically, +	 * Find a custom {@code WebApplicationContext} for this web app., +	/**, +	 * Find a unique {@code WebApplicationContext} for this web app: either the, +	 * root web app context (preferred) or a unique {@code WebApplicationContext}, +	 * among the registered {@code ServletContext} attributes (typically coming, +	 * from a single {@code DispatcherServlet} in the current web application)., +	 * <p>Note that {@code DispatcherServlet}'s exposure of its context can be, +	 * controlled through its {@code publishContext} property, which is {@code true}, +	 * by default but can be selectively switched to only publish a single context, +	 * despite multiple {@code DispatcherServlet} registrations in the web app., +	 * @param sc ServletContext to find the web application context for, +	 * @return the desired WebApplicationContext for this web app, or {@code null} if none, +	 * @since 4.2, +	 * @see #getWebApplicationContext(ServletContext), +	 * @see ServletContext#getAttributeNames(), +	 */, +	public static WebApplicationContext findWebApplicationContext(ServletContext sc) {, +		WebApplicationContext wac = getWebApplicationContext(sc);, +		if (wac == null) {, +			Enumeration<String> attrNames = sc.getAttributeNames();, +			while (attrNames.hasMoreElements()) {, +				String attrName = attrNames.nextElement();, +				Object attrValue = sc.getAttribute(attrName);, +				if (attrValue instanceof WebApplicationContext) {, +					if (wac != null) {, +						throw new IllegalStateException("No unique WebApplicationContext found: more than one " +, +								"DispatcherServlet registered with publishContext=true?");, +					}, +					wac = (WebApplicationContext) attrValue;, +				}, +			}, +		}, +		return wac;, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/filter/DelegatingFilterProxy.java, +						throw new IllegalStateException("No WebApplicationContext found: " +, +								"no ContextLoaderListener or DispatcherServlet registered?");, +			// The user has injected a context at construction time -> use it..., +				ConfigurableApplicationContext cac = (ConfigurableApplicationContext) this.webApplicationContext;, +				if (!cac.isActive()) {, +					// The context has not yet been refreshed -> do so before returning it..., +					cac.refresh();, +			return WebApplicationContextUtils.findWebApplicationContext(getServletContext());, +++ b/spring-web/src/main/java/org/springframework/web/context/support/WebApplicationContextUtils.java, +	 * Find the root {@code WebApplicationContext} for this web app, typically, +	 * Find the root {@code WebApplicationContext} for this web app, typically, +	 * Find a custom {@code WebApplicationContext} for this web app., +	/**, +	 * Find a unique {@code WebApplicationContext} for this web app: either the, +	 * root web app context (preferred) or a unique {@code WebApplicationContext}, +	 * among the registered {@code ServletContext} attributes (typically coming, +	 * from a single {@code DispatcherServlet} in the current web application)., +	 * <p>Note that {@code DispatcherServlet}'s exposure of its context can be, +	 * controlled through its {@code publishContext} property, which is {@code true}, +	 * by default but can be selectively switched to only publish a single context, +	 * despite multiple {@code DispatcherServlet} registrations in the web app., +	 * @param sc ServletContext to find the web application context for, +	 * @return the desired WebApplicationContext for this web app, or {@code null} if none]