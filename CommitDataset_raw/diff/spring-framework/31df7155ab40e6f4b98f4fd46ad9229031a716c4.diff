[+++ b/spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.beans.factory.config.BeanDefinition;, +			if (bean != null && !(bean instanceof BeanPostProcessor) && !isInfrastructureBean(beanName) &&, +, +		private boolean isInfrastructureBean(String beanName) {, +			if (beanName != null && this.beanFactory.containsBean(beanName)) {, +				BeanDefinition bd = this.beanFactory.getBeanDefinition(beanName);, +				return RootBeanDefinition.ROLE_INFRASTRUCTURE == bd.getRole();, +			}, +			return false;, +		}, +++ b/spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.beans.factory.config.BeanDefinition;, +			if (bean != null && !(bean instanceof BeanPostProcessor) && !isInfrastructureBean(beanName) &&, +, +		private boolean isInfrastructureBean(String beanName) {, +			if (beanName != null && this.beanFactory.containsBean(beanName)) {, +				BeanDefinition bd = this.beanFactory.getBeanDefinition(beanName);, +				return RootBeanDefinition.ROLE_INFRASTRUCTURE == bd.getRole();, +			}, +			return false;, +		}, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ProxyAsyncConfiguration.java, + * Copyright 2002-2015 the original author or authors., +@Role(BeanDefinition.ROLE_INFRASTRUCTURE), +++ b/spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.beans.factory.config.BeanDefinition;, +			if (bean != null && !(bean instanceof BeanPostProcessor) && !isInfrastructureBean(beanName) &&, +, +		private boolean isInfrastructureBean(String beanName) {, +			if (beanName != null && this.beanFactory.containsBean(beanName)) {, +				BeanDefinition bd = this.beanFactory.getBeanDefinition(beanName);, +				return RootBeanDefinition.ROLE_INFRASTRUCTURE == bd.getRole();, +			}, +			return false;, +		}, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ProxyAsyncConfiguration.java, + * Copyright 2002-2015 the original author or authors., +@Role(BeanDefinition.ROLE_INFRASTRUCTURE), +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/SchedulingConfiguration.java, + * Copyright 2002-2015 the original author or authors., +@Role(BeanDefinition.ROLE_INFRASTRUCTURE), +++ b/spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.beans.factory.config.BeanDefinition;, +			if (bean != null && !(bean instanceof BeanPostProcessor) && !isInfrastructureBean(beanName) &&, +, +		private boolean isInfrastructureBean(String beanName) {, +			if (beanName != null && this.beanFactory.containsBean(beanName)) {, +				BeanDefinition bd = this.beanFactory.getBeanDefinition(beanName);, +				return RootBeanDefinition.ROLE_INFRASTRUCTURE == bd.getRole();, +			}, +			return false;, +		}, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ProxyAsyncConfiguration.java, + * Copyright 2002-2015 the original author or authors., +@Role(BeanDefinition.ROLE_INFRASTRUCTURE), +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/SchedulingConfiguration.java, + * Copyright 2002-2015 the original author or authors., +@Role(BeanDefinition.ROLE_INFRASTRUCTURE), +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsBootstrapConfiguration.java, + * Copyright 2002-2015 the original author or authors., +@Role(BeanDefinition.ROLE_INFRASTRUCTURE)]