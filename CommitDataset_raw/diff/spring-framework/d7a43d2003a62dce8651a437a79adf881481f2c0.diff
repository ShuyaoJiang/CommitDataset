[+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/ResolvableMethod.java, +import org.springframework.web.reactive.result.method.InvocableHandlerMethod;, + * ResolvableMethod resolvableMethod = ResolvableMethod.onClass(TestController.class);, +	private final Class<?> objectClass;, +, +	private final Object object;, +, +	private final List<Predicate<Method>> predicates = new ArrayList<>(4);, +, +, +	private ResolvableMethod(Class<?> objectClass) {, +		Assert.notNull(objectClass);, +		this.objectClass = objectClass;, +		this.object = null;, +	}, +, +	private ResolvableMethod(Object object) {, +		Assert.notNull(object);, +		this.object = object;, +		this.objectClass = object.getClass();, +	/**, +	 * Methods that match the given name (regardless of arguments)., +	 */, +	/**, +	 * Methods that match the given argument types., +	 */, +	/**, +	 * Methods declared to return the given type., +	 */, +	/**, +	 * Methods with the given annotation., +	 */, +	/**, +	 * Methods matching the given predicate., +	 */, +	public final ResolvableMethod matching(Predicate<Method> methodPredicate) {, +		this.predicates.add(methodPredicate);, +		return this;, +	}, +, +		Set<Method> methods = MethodIntrospector.selectMethods(this.objectClass,, +					else if (!ObjectUtils.isEmpty(this.argumentTypes)) {, +					else if (this.annotationTypes.stream(), +							.filter(annotType -> AnnotationUtils.findAnnotation(method, annotType) == null), +							.findFirst(), +							.isPresent()) {, +					else if (this.predicates.stream().filter(p -> !p.test(method)).findFirst().isPresent()) {, +						return false;, +	public InvocableHandlerMethod resolveHandlerMethod() {, +		Assert.notNull(this.object);, +		return new InvocableHandlerMethod(this.object, resolve());, +	}, +, +		return "Class=" + this.objectClass +, +				", name=" + (this.methodName != null ? this.methodName : "<not specified>") +, +				", returnType=" + (this.returnType != null ? this.returnType : "<not specified>") +, +				", annotations=" + this.annotationTypes;, +	public static ResolvableMethod onClass(Class<?> clazz) {, +	public static ResolvableMethod on(Object object) {, +		return new ResolvableMethod(object);, +	}, +, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/ResolvableMethod.java, +import org.springframework.web.reactive.result.method.InvocableHandlerMethod;, + * ResolvableMethod resolvableMethod = ResolvableMethod.onClass(TestController.class);, +	private final Class<?> objectClass;, +, +	private final Object object;, +, +	private final List<Predicate<Method>> predicates = new ArrayList<>(4);, +, +, +	private ResolvableMethod(Class<?> objectClass) {, +		Assert.notNull(objectClass);, +		this.objectClass = objectClass;, +		this.object = null;, +	}, +, +	private ResolvableMethod(Object object) {, +		Assert.notNull(object);, +		this.object = object;, +		this.objectClass = object.getClass();, +	/**, +	 * Methods that match the given name (regardless of arguments)., +	 */, +	/**, +	 * Methods that match the given argument types., +	 */, +	/**, +	 * Methods declared to return the given type., +	 */, +	/**, +	 * Methods with the given annotation., +	 */, +	/**, +	 * Methods matching the given predicate., +	 */, +	public final ResolvableMethod matching(Predicate<Method> methodPredicate) {, +		this.predicates.add(methodPredicate);, +		return this;]