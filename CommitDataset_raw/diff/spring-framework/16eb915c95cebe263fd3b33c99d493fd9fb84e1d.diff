[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/ObjectFactoryCreatingFactoryBean.java, +import java.io.Serializable;, +, +import org.springframework.beans.factory.BeanFactory;, + *   &lt;bean id="myService" class="a.b.c.MyService" scope="prototype"/&gt;, + *   private ObjectFactory&lt;MyService&gt; myServiceFactory;, + *   public void setMyServiceFactory(ObjectFactory&lt;MyService&gt; myServiceFactory) {, +	 * <p>The target does not <i>have</> to be a non-singleton bean, but realisticially, +	 * always will be (because if the target bean were a singleton, then said singleton, +	 * bean could simply be injected straight into the dependent object, thus obviating, +	 * the need for the extra level of indirection afforded by this factory approach)., +		return new TargetBeanObjectFactory(getBeanFactory(), this.targetBeanName);, +, +	 * Independent inner class - for serialization purposes., +	private static class TargetBeanObjectFactory implements ObjectFactory, Serializable {, +, +		private final BeanFactory beanFactory;, +, +		private final String targetBeanName;, +, +		public TargetBeanObjectFactory(BeanFactory beanFactory, String targetBeanName) {, +			this.beanFactory = beanFactory;, +			this.targetBeanName = targetBeanName;, +		}, +, +		public Object getObject() throws BeansException {, +			return this.beanFactory.getBean(this.targetBeanName);, +		}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/ObjectFactoryCreatingFactoryBean.java, +import java.io.Serializable;, +, +import org.springframework.beans.factory.BeanFactory;, + *   &lt;bean id="myService" class="a.b.c.MyService" scope="prototype"/&gt;, + *   private ObjectFactory&lt;MyService&gt; myServiceFactory;, + *   public void setMyServiceFactory(ObjectFactory&lt;MyService&gt; myServiceFactory) {, +	 * <p>The target does not <i>have</> to be a non-singleton bean, but realisticially, +	 * always will be (because if the target bean were a singleton, then said singleton, +	 * bean could simply be injected straight into the dependent object, thus obviating, +	 * the need for the extra level of indirection afforded by this factory approach)., +		return new TargetBeanObjectFactory(getBeanFactory(), this.targetBeanName);, +, +	 * Independent inner class - for serialization purposes., +	private static class TargetBeanObjectFactory implements ObjectFactory, Serializable {, +, +		private final BeanFactory beanFactory;, +, +		private final String targetBeanName;, +, +		public TargetBeanObjectFactory(BeanFactory beanFactory, String targetBeanName) {, +			this.beanFactory = beanFactory;, +			this.targetBeanName = targetBeanName;, +		}, +, +		public Object getObject() throws BeansException {, +			return this.beanFactory.getBean(this.targetBeanName);, +		}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/ProviderCreatingFactoryBean.java, +/*, + * Copyright 2002-2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.beans.factory.config;, +, +import java.io.Serializable;, +import javax.inject.Provider;, +, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.util.Assert;, +, +/**, + * A {@link org.springframework.beans.factory.FactoryBean} implementation that, + * returns a value which is a JSR-330 {@link javax.inject.Provider} that in turn, + * returns a bean sourced from a {@link org.springframework.beans.factory.BeanFactory}., + *, + * <p>This is basically a JSR-330 compliant variant of Spring's good old, + * {@link ObjectFactoryCreatingFactoryBean}. It can be used for traditional, + * external dependency injection configuration that targets a property or, + * constructor argument of type <code>javax.inject.Provider</code>, as an, + * alternative to JSR-330's <code>@Inject</code> annotation-driven approach., + *, + * @author Juergen Hoeller, + * @since 3.0.2, + * @see javax.inject.Provider, + * @see ObjectFactoryCreatingFactoryBean, + */, +public class ProviderCreatingFactoryBean extends AbstractFactoryBean<Provider> {, +]