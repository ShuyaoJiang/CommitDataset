[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestKey.java, +import org.springframework.util.StringUtils;, +			if (StringUtils.hasLength(pattern) && !pattern.startsWith("/")) {, +	 * 	  <li>If both have patterns combine them according to the rules of the given {@link PathMatcher}, +	 * 	  <li>If either contains patterns, but not both, use the available pattern, +	 * 	  <li>If neither contains patterns use "", +				for (String pattern2 : methodPatterns) {, +					result.add(pathMatcher.combine(pattern1, pattern2));, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestKey.java, +import org.springframework.util.StringUtils;, +			if (StringUtils.hasLength(pattern) && !pattern.startsWith("/")) {, +	 * 	  <li>If both have patterns combine them according to the rules of the given {@link PathMatcher}, +	 * 	  <li>If either contains patterns, but not both, use the available pattern, +	 * 	  <li>If neither contains patterns use "", +				for (String pattern2 : methodPatterns) {, +					result.add(pathMatcher.combine(pattern1, pattern2));, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethod.java, +				webRequest.getResponse().setStatus(this.responseStatus.value());, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestKey.java, +import org.springframework.util.StringUtils;, +			if (StringUtils.hasLength(pattern) && !pattern.startsWith("/")) {, +	 * 	  <li>If both have patterns combine them according to the rules of the given {@link PathMatcher}, +	 * 	  <li>If either contains patterns, but not both, use the available pattern, +	 * 	  <li>If neither contains patterns use "", +				for (String pattern2 : methodPatterns) {, +					result.add(pathMatcher.combine(pattern1, pattern2));, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethod.java, +				webRequest.getResponse().setStatus(this.responseStatus.value());, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestKeyTests.java, +		key3 = createKeyFromPatterns("");, +		key1 = createKeyFromPatterns("/t1");, +		key2 = createKeyFromPatterns("");, +		key3 = createKeyFromPatterns("/t1");, +		assertEquals(key3.getPatterns(), key1.combine(key2, pathMatcher).getPatterns());, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestKey.java, +import org.springframework.util.StringUtils;, +			if (StringUtils.hasLength(pattern) && !pattern.startsWith("/")) {, +	 * 	  <li>If both have patterns combine them according to the rules of the given {@link PathMatcher}, +	 * 	  <li>If either contains patterns, but not both, use the available pattern, +	 * 	  <li>If neither contains patterns use "", +				for (String pattern2 : methodPatterns) {, +					result.add(pathMatcher.combine(pattern1, pattern2));, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethod.java, +				webRequest.getResponse().setStatus(this.responseStatus.value());, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestKeyTests.java, +		key3 = createKeyFromPatterns("");, +		key1 = createKeyFromPatterns("/t1");, +		key2 = createKeyFromPatterns("");, +		key3 = createKeyFromPatterns("/t1");, +		assertEquals(key3.getPatterns(), key1.combine(key2, pathMatcher).getPatterns());, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMethodMappingTests.java, +	private HandlerMethod emptyMethod;, +, +		emptyMethod = new HandlerMethod(handler, "empty");, +	@Test, +	public void emptyPathMatch() throws Exception {, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "");, +		HandlerMethod hm = (HandlerMethod) mapping.getHandler(request).getHandler();, +		assertEquals(emptyMethod.getMethod(), hm.getMethod());, +, +		request = new MockHttpServletRequest("GET", "/");, +		hm = (HandlerMethod) mapping.getHandler(request).getHandler();, +		assertEquals(emptyMethod.getMethod(), hm.getMethod());, +	}, +, +	@RequestMapping, +, +		@RequestMapping(value = ""), +		public void empty() {, +		}]