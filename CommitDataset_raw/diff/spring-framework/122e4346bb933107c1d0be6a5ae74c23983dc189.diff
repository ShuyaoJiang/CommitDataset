[+++ b/org.springframework.web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java, + * the Servlet request HTTP contents. The request stream will be, + * <li>{@link org.springframework.http.HttpEntity HttpEntity&lt;?&gt;} parameters, + * for access to the Servlet request HTTP headers and contents. The request stream will be, + * converted to the entity body using, + * {@linkplain org.springframework.http.converter.HttpMessageConverter message, + * converters}., + * <li>{@link ResponseBody @ResponseBody} annotated methods for access to, + * the Servlet response HTTP contents. The return value will be converted, + * to the response stream using, + * {@linkplain org.springframework.http.converter.HttpMessageConverter message, + * converters}., + * <li>A {@link org.springframework.http.HttpEntity HttpEntity&lt;?&gt;} object, + * to access to the Servlet reponse HTTP headers and contents. The entity body will, + * be converted to the response stream using, + * {@linkplain org.springframework.http.converter.HttpMessageConverter message, + * converters}., +++ b/org.springframework.web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java, + * the Servlet request HTTP contents. The request stream will be, + * <li>{@link org.springframework.http.HttpEntity HttpEntity&lt;?&gt;} parameters, + * for access to the Servlet request HTTP headers and contents. The request stream will be, + * converted to the entity body using, + * {@linkplain org.springframework.http.converter.HttpMessageConverter message, + * converters}., + * <li>{@link ResponseBody @ResponseBody} annotated methods for access to, + * the Servlet response HTTP contents. The return value will be converted, + * to the response stream using, + * {@linkplain org.springframework.http.converter.HttpMessageConverter message, + * converters}., + * <li>A {@link org.springframework.http.HttpEntity HttpEntity&lt;?&gt;} object, + * to access to the Servlet reponse HTTP headers and contents. The entity body will, + * be converted to the response stream using, + * {@linkplain org.springframework.http.converter.HttpMessageConverter message, + * converters}., +++ b/spring-framework-reference/src/mvc.xml, +              <para><interfacename>@RequestHeader</interfacename> annotated parameters, +              <para><interfacename>@RequestBody</interfacename> annotated parameters, +              <para><classname>HttpEntity&lt;?&gt;</classname> parameters, +              for access to the Servlet request HTTP headers and contents. The request stream will be, +              converted to the entity body using, +              <interfacename>HttpMessageConverter</interfacename>s. See <xref, +              linkend="mvc-ann-httpentity" />.</para>, +            </listitem>, +, +            <listitem>, +              <para>A <classname>HttpEntity&lt;?&gt;</classname>} object, +              to access to the Servlet reponse HTTP headers and contents. The entity body will, +              be converted to the response stream using, +              <interfacename>HttpMessageConverter</interfacename>s. See <xref, +              linkend="mvc-ann-httpentity" />.</para>, +            </listitem>, +, +            <listitem>, +        <interfacename>@RequestParam</interfacename></title>, +        <title>Mapping the response body with the <interfacename>@ResponseBody</interfacename>, +        annotation can be put on a method and, +      <section id="mvc-ann-httpentity">, +        <title>Using <classname>HttpEntity&lt;?&gt;</classname></title>, +, +        <para>The <classname>HttpEntity</classname> is similar to, +        <interfacename>@RequestBody</interfacename> and, +        <interfacename>@ResponseBody</interfacename>. Besides getting, +        access to the request and response body, the <classname>HttpEntity</classname>, +        also allows access to the request and response headers, like so:</para>, +, +        <programlisting language="java">@RequestMapping("/something"), +public HttpEntity&lt;String&gt; handle(HttpEntity&lt;byte[]&gt; requestEntity) throws UnsupportedEncodingException {, +  String requestHeader = requestEntity.getHeaders().getFirst("MyRequestHeader"));, +  byte[] requestBody = requestEntity.getBody();, +  // do something with request header and body, +, +  HttpHeaders responseHeaders = new HttpHeaders();, +  responseHeaders.set("MyResponseHeader", "MyValue");, +  return new HttpEntity&lt;String&gt;("Hello World", responseHeaders);, +}</programlisting>, +, +        <para>The above example gets the value of the "MyRequestHeader" request, +        header, and reads the body as a byte array. It adds the "MyResponseHeader", +        to the response, and writes <literal>Hello World</literal> to the response, +        stream.</para>, +, +        <para>As with <interfacename>@RequestBody</interfacename> and, +        <interfacename>@ResponseBody</interfacename>, Spring, +        uses <interfacename>HttpMessageConverter</interfacename> to convert, +        from and to the request and response streams. For more, +        information on these converters, see the previous section and <link, +        linkend="rest-message-conversion">Message Converters</link>.</para>, +      </section>, +, +        in controllers. When you place it on a]