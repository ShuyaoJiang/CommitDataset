[+++ b/spring-web/src/main/java/org/springframework/web/context/AbstractContextLoaderInitializer.java, + * Copyright 2002-2014 the original author or authors., + * Convenient base class for {@link WebApplicationInitializer} implementations, + * that register a {@link ContextLoaderListener} in the servlet context., + * <p>The only method required to be implemented by subclasses is, + * {@link #createRootApplicationContext()}, which gets invoked from, + * {@link #registerContextLoaderListener(ServletContext)}., +	/** Logger available to subclasses */, +, +		registerContextLoaderListener(servletContext);, +		WebApplicationContext rootAppContext = createRootApplicationContext();, +++ b/spring-web/src/main/java/org/springframework/web/context/AbstractContextLoaderInitializer.java, + * Copyright 2002-2014 the original author or authors., + * Convenient base class for {@link WebApplicationInitializer} implementations, + * that register a {@link ContextLoaderListener} in the servlet context., + * <p>The only method required to be implemented by subclasses is, + * {@link #createRootApplicationContext()}, which gets invoked from, + * {@link #registerContextLoaderListener(ServletContext)}., +	/** Logger available to subclasses */, +, +		registerContextLoaderListener(servletContext);, +		WebApplicationContext rootAppContext = createRootApplicationContext();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/AbstractAnnotationConfigDispatcherServletInitializer.java, + * Base class for {@link org.springframework.web.WebApplicationInitializer}, + * implementations that register a, + * {@link org.springframework.web.servlet.DispatcherServlet DispatcherServlet}, + * configured with annotated classes, e.g. Spring's, + * {@link org.springframework.context.annotation.Configuration @Configuration} classes., + * and {@link #getServletConfigClasses()} as well as {@link #getServletMappings()}., + * Further template and customization methods are provided by, + * {@link AbstractDispatcherServletInitializer}., +		Class<?>[] configClasses = getRootConfigClasses();, +		if (!ObjectUtils.isEmpty(configClasses)) {, +			rootAppContext.register(configClasses);, +		Class<?>[] configClasses = getServletConfigClasses();, +	 * (may not be empty or {@code null}), +++ b/spring-web/src/main/java/org/springframework/web/context/AbstractContextLoaderInitializer.java, + * Copyright 2002-2014 the original author or authors., + * Convenient base class for {@link WebApplicationInitializer} implementations, + * that register a {@link ContextLoaderListener} in the servlet context., + * <p>The only method required to be implemented by subclasses is, + * {@link #createRootApplicationContext()}, which gets invoked from, + * {@link #registerContextLoaderListener(ServletContext)}., +	/** Logger available to subclasses */, +, +		registerContextLoaderListener(servletContext);, +		WebApplicationContext rootAppContext = createRootApplicationContext();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/AbstractAnnotationConfigDispatcherServletInitializer.java, + * Base class for {@link org.springframework.web.WebApplicationInitializer}, + * implementations that register a, + * {@link org.springframework.web.servlet.DispatcherServlet DispatcherServlet}, + * configured with annotated classes, e.g. Spring's, + * {@link org.springframework.context.annotation.Configuration @Configuration} classes., + * and {@link #getServletConfigClasses()} as well as {@link #getServletMappings()}., + * Further template and customization methods are provided by, + * {@link AbstractDispatcherServletInitializer}., +		Class<?>[] configClasses = getRootConfigClasses();, +		if (!ObjectUtils.isEmpty(configClasses)) {, +			rootAppContext.register(configClasses);, +		Class<?>[] configClasses = getServletConfigClasses();, +	 * (may not be empty or {@code null}), +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/AbstractDispatcherServletInitializer.java, + * Copyright 2002-2014 the original author or authors., + * Base class for {@link org.springframework.web.WebApplicationInitializer}, + * implementations that register a {@link DispatcherServlet} in the servlet context., + * <p>Concrete implementations are required to implement, + * {@link #createServletApplicationContext()}, as well as {@link #getServletMappings()},, + * both of which get invoked from {@link #registerDispatcherServlet(ServletContext)}., + * Further customization can be achieved by overriding, +public abstract class AbstractDispatcherServletInitializer extends AbstractContextLoaderInitializer {, +, +		registerDispatcherServlet(servletContext);, +	 * <p>This method will create a {@code DispatcherServlet} with the name returned by, +		String servletName = getServletName();, +		WebApplicationContext servletAppContext = createServletApplicationContext();, +		ServletRegistration.Dynamic registration = servletContext.addServlet(servletName, dispatcherServlet);, +		customizeRegistration(registration);, +	 * {@link DispatcherServlet#DispatcherServlet(WebApplicationContext)}. As such,, +	 * it typically contains controllers, view resolvers, locale resolvers, and other, +++ b/spring-web/src/main/java/org/springframework/web/context/AbstractContextLoaderInitializer.java, + * Copyright 2002-2014 the original author or authors., + * Convenient base class for {@link WebApplicationInitializer} implementations, + * that register a {@link ContextLoaderListener} in the servlet context., + * <p>The only method required to be implemented by subclasses is, + * {@link #createRootApplicationContext()}, which gets invoked from, + * {@link #registerContextLoaderListener(ServletContext)}., +	/** Logger available to subclasses */, +, +		registerContextLoaderListener(servletContext);, +		WebApplicationContext rootAppContext = createRootApplicationContext();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/AbstractAnnotationConfigDispatcherServletInitializer.java, + * Base class for {@link org.springframework.web.WebApplicationInitializer}, + * implementations that register a, + * {@link org.springframework.web.servlet.DispatcherServlet DispatcherServlet}, + * configured with annotated classes, e.g. Spring's, + * {@link org.springframework.context.annotation.Configuration @Configuration} classes., + * and {@link #getServletConfigClasses()} as well as {@link #getServletMappings()}., + * Further template and customization methods are provided by, + * {@link AbstractDispatcherServletInitializer}., +		Class<?>[] configClasses = getRootConfigClasses();]