[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, +	private static PathPattern mergePatterns(@Nullable PathPattern oldPattern, PathPattern newPattern) {, +			return oldPattern.combine(newPattern);, +			traceMatch("Pattern", this.pattern.getPatternString(), request.path(), info != null);, +				mergeAttributes(request, info.getUriVariables(), this.pattern);, +				PathPattern pattern) {, +					(PathPattern) request.attributes().get(RouterFunctions.MATCHING_PATTERN_ATTRIBUTE),, +					.map(info -> new SubPathServerRequestWrapper(request, info, this.pattern));, +				PathPattern.PathRemainingMatchInfo info, PathPattern pattern) {, +		Map<String, String> pathVariables, PathPattern pattern) {, +					(PathPattern) request.attributes().get(RouterFunctions.MATCHING_PATTERN_ATTRIBUTE),, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, +	private static PathPattern mergePatterns(@Nullable PathPattern oldPattern, PathPattern newPattern) {, +			return oldPattern.combine(newPattern);, +			traceMatch("Pattern", this.pattern.getPatternString(), request.path(), info != null);, +				mergeAttributes(request, info.getUriVariables(), this.pattern);, +				PathPattern pattern) {, +					(PathPattern) request.attributes().get(RouterFunctions.MATCHING_PATTERN_ATTRIBUTE),, +					.map(info -> new SubPathServerRequestWrapper(request, info, this.pattern));, +				PathPattern.PathRemainingMatchInfo info, PathPattern pattern) {, +		Map<String, String> pathVariables, PathPattern pattern) {, +					(PathPattern) request.attributes().get(RouterFunctions.MATCHING_PATTERN_ATTRIBUTE),, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunctions.java, +	 * contains the matching pattern, as a {@link org.springframework.web.util.pattern.PathPattern}., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, +	private static PathPattern mergePatterns(@Nullable PathPattern oldPattern, PathPattern newPattern) {, +			return oldPattern.combine(newPattern);, +			traceMatch("Pattern", this.pattern.getPatternString(), request.path(), info != null);, +				mergeAttributes(request, info.getUriVariables(), this.pattern);, +				PathPattern pattern) {, +					(PathPattern) request.attributes().get(RouterFunctions.MATCHING_PATTERN_ATTRIBUTE),, +					.map(info -> new SubPathServerRequestWrapper(request, info, this.pattern));, +				PathPattern.PathRemainingMatchInfo info, PathPattern pattern) {, +		Map<String, String> pathVariables, PathPattern pattern) {, +					(PathPattern) request.attributes().get(RouterFunctions.MATCHING_PATTERN_ATTRIBUTE),, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunctions.java, +	 * contains the matching pattern, as a {@link org.springframework.web.util.pattern.PathPattern}., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/support/RouterFunctionMapping.java, +import org.springframework.web.util.pattern.PathPattern;, +		PathPattern matchingPattern =, +				(PathPattern) attributes.get(RouterFunctions.MATCHING_PATTERN_ATTRIBUTE);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, +	private static PathPattern mergePatterns(@Nullable PathPattern oldPattern, PathPattern newPattern) {, +			return oldPattern.combine(newPattern);, +			traceMatch("Pattern", this.pattern.getPatternString(), request.path(), info != null);, +				mergeAttributes(request, info.getUriVariables(), this.pattern);, +				PathPattern pattern) {, +					(PathPattern) request.attributes().get(RouterFunctions.MATCHING_PATTERN_ATTRIBUTE),, +					.map(info -> new SubPathServerRequestWrapper(request, info, this.pattern));, +				PathPattern.PathRemainingMatchInfo info, PathPattern pattern) {, +		Map<String, String> pathVariables, PathPattern pattern) {, +					(PathPattern) request.attributes().get(RouterFunctions.MATCHING_PATTERN_ATTRIBUTE),, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunctions.java, +	 * contains the matching pattern, as a {@link org.springframework.web.util.pattern.PathPattern}., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/support/RouterFunctionMapping.java, +import org.springframework.web.util.pattern.PathPattern;, +		PathPattern matchingPattern =, +				(PathPattern) attributes.get(RouterFunctions.MATCHING_PATTERN_ATTRIBUTE);, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/server/DispatcherHandlerIntegrationTests.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Map;, +import org.springframework.web.reactive.HandlerMapping;, +import org.springframework.web.util.pattern.PathPattern;, +import static org.springframework.web.reactive.function.BodyInserters.fromPublisher;, +import static org.springframework.web.reactive.function.server.RouterFunctions.nest;, +import static org.springframework.web.reactive.function.server.RouterFunctions.route;, +	@Test, +	public void attributes() {, +		ResponseEntity<String> result =, +				this.restTemplate, +						.getForEntity("http://localhost:" + this.port + "/attributes/bar", String.class);, +, +		assertEquals(HttpStatus.OK, result.getStatusCode());, +	}, +, +		public AttributesHandler attributesHandler() {, +			return new AttributesHandler();, +		}, +, +, +		@Bean, +		@Bean, +		public RouterFunction<ServerResponse> attributesRouterFunction(AttributesHandler attributesHandler) {, +			return nest(RequestPredicates.GET("/attributes"),, +					route(RequestPredicates.GET("/{foo}"), attributesHandler::attributes));, +		}, +, +	private static class AttributesHandler {, +, +		@SuppressWarnings("unchecked"), +		public Mono<ServerResponse> attributes(ServerRequest request) {, +			assertTrue(request.attributes().containsKey(RouterFunctions.REQUEST_ATTRIBUTE));, +			assertTrue(request.attributes(), +					.containsKey(HandlerMapping.BEST_MATCHING_HANDLER_ATTRIBUTE));, +, +			Map<String, String> pathVariables =, +					(Map<String, String>) request.attributes().get(RouterFunctions.URI_TEMPLATE_VARIABLES_ATTRIBUTE);, +			assertNotNull(pathVariables);, +			assertEquals(1, pathVariables.size());, +			assertEquals("bar", pathVariables.get("foo"));]