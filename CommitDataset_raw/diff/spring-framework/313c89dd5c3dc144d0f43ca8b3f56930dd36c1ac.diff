[+++ b/spring-context/src/main/java/org/springframework/scheduling/TaskScheduler.java, + * Copyright 2002-2016 the original author or authors., +import java.time.Duration;, +import java.time.Instant;, + * {@code ManagedScheduledExecutorService} as supported in Java EE 7, + * environments but aligned with Spring's {@code TaskExecutor} model., +	 * @since 5.0, +	 * @see #schedule(Runnable, Date), +	 */, +	default ScheduledFuture<?> schedule(Runnable task, Instant startTime) {, +		return schedule(task, Date.from(startTime));, +	}, +, +	/**, +	 * Schedule the given {@link Runnable}, invoking it at the specified execution time., +	 * <p>Execution will end once the scheduler shuts down or the returned, +	 * {@link ScheduledFuture} gets cancelled., +	 * @param task the Runnable to execute whenever the trigger fires, +	 * @param startTime the desired execution time for the task, +	 * (if this is in the past, the task will be executed immediately, i.e. as soon as possible), +	 * @return a {@link ScheduledFuture} representing pending completion of the task, +	 * @throws org.springframework.core.task.TaskRejectedException if the given task was not accepted, +	 * for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress), +	 * @param period the interval between successive executions of the task, +	 * @return a {@link ScheduledFuture} representing pending completion of the task, +	 * @throws org.springframework.core.task.TaskRejectedException if  the given task was not accepted, +	 * for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress), +	 * @since 5.0, +	 * @see #scheduleAtFixedRate(Runnable, Date, long), +	 */, +	default ScheduledFuture<?> scheduleAtFixedRate(Runnable task, Instant startTime, Duration period) {, +		return scheduleAtFixedRate(task, Date.from(startTime), period.toMillis());, +	}, +, +	/**, +	 * Schedule the given {@link Runnable}, invoking it at the specified execution time, +	 * and subsequently with the given period., +	 * <p>Execution will end once the scheduler shuts down or the returned, +	 * {@link ScheduledFuture} gets cancelled., +	 * @param task the Runnable to execute whenever the trigger fires, +	 * @param startTime the desired first execution time for the task, +	 * (if this is in the past, the task will be executed immediately, i.e. as soon as possible), +	 * @param period the interval between successive executions of the task, +	 * @return a {@link ScheduledFuture} representing pending completion of the task, +	 * @throws org.springframework.core.task.TaskRejectedException if the given task was not accepted, +	 * for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress), +	 * @since 5.0, +	 * @see #scheduleAtFixedRate(Runnable, long), +	 */, +	default ScheduledFuture<?> scheduleAtFixedRate(Runnable task, Duration period) {, +		return scheduleAtFixedRate(task, period.toMillis());, +	}, +, +	/**, +	 * Schedule the given {@link Runnable}, starting as soon as possible and, +	 * invoking it with the given period., +	 * <p>Execution will end once the scheduler shuts down or the returned, +	 * {@link ScheduledFuture} gets cancelled., +	 * @param task the Runnable to execute whenever the trigger fires, +	 * @param delay the delay between the completion of one execution and the start of the next, +	 * @return a {@link ScheduledFuture} representing pending completion of the task, +	 * @throws org.springframework.core.task.TaskRejectedException if the given task was not accepted, +	 * for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress), +	 * @since 5.0, +	 * @see #scheduleWithFixedDelay(Runnable, Date, long), +	 */, +	default ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, Instant startTime, Duration delay) {, +		return scheduleWithFixedDelay(task, Date.from(startTime), delay.toMillis());, +	}, +, +	/**, +	 * Schedule the given {@link Runnable}, invoking it at the specified execution time, +	 * and subsequently with the given delay between the completion of one execution, +	 * and the start of the next., +	 * <p>Execution will end once the scheduler shuts down or the returned, +	 * {@link ScheduledFuture} gets cancelled., +	 * @param task the Runnable to execute whenever the trigger fires, +	 * @param startTime the desired first execution time for the task, +	 * (if this is in the past, the task will be executed immediately, i.e. as soon as possible), +	 * @param delay the delay between the completion of one execution and the start of the next, +	 * (in milliseconds), +	 * Schedule the given {@link Runnable}, starting as soon as possible and invoking it with, +	 * the given delay between the completion of one execution and the start of the next., +	 * @param delay the delay between the completion of one execution and the start of the next, +	 * @return a {@link ScheduledFuture} representing pending completion of the task, +	 * @throws org.springframework.core.task.TaskRejectedException if the given task was not accepted, +	 * for internal reasons (e.g. a pool overload handling policy or a pool shutdown in progress), +	 * @since 5.0, +	 * @see #scheduleWithFixedDelay(Runnable, long), +	 */, +	default ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, Duration delay) {, +		return scheduleWithFixedDelay(task, delay.toMillis());, +	}, +, +	/**, +	 * Schedule the given {@link Runnable}, starting as soon as possible and invoking it with, +	 * the given delay between the completion of one execution and the start of the next., +	 * <p>Execution will end once the scheduler shuts down or the returned, +	 * {@link ScheduledFuture} gets cancelled., +	 * @param task the Runnable to execute whenever the trigger fires]