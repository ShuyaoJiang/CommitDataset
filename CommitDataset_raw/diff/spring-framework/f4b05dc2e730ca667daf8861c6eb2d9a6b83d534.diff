[+++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, + * @author Dimitrios Liapis, +		boolean isQuoted = false;, +		int nextBeginIndex = 0;, +		List<MimeType> tokens = new ArrayList<>();, +		for(int i = 0; i < mimeTypes.length() - 1; i++) {, +			//tokenizing on commas that are not within double quotes, +			if(mimeTypes.charAt(i) == ',' && !isQuoted) {, +				tokens.add(parseMimeType(mimeTypes.substring(nextBeginIndex,i)));, +				nextBeginIndex = i + 1;, +			//ignoring escaped double quote within double quotes, +			} else if(isQuoted && mimeTypes.charAt(i) == '"' && mimeTypes.charAt(i-1) == '\\') {, +				continue;, +			} else if(mimeTypes.charAt(i) == '"') {, +				isQuoted = !isQuoted;, +		}, +		//either the last part of the tokenization or the original string, +		tokens.add(parseMimeType(mimeTypes.substring(nextBeginIndex)));, +		return tokens;, +++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, + * @author Dimitrios Liapis, +		boolean isQuoted = false;, +		int nextBeginIndex = 0;, +		List<MimeType> tokens = new ArrayList<>();, +		for(int i = 0; i < mimeTypes.length() - 1; i++) {, +			//tokenizing on commas that are not within double quotes, +			if(mimeTypes.charAt(i) == ',' && !isQuoted) {, +				tokens.add(parseMimeType(mimeTypes.substring(nextBeginIndex,i)));, +				nextBeginIndex = i + 1;, +			//ignoring escaped double quote within double quotes, +			} else if(isQuoted && mimeTypes.charAt(i) == '"' && mimeTypes.charAt(i-1) == '\\') {, +				continue;, +			} else if(mimeTypes.charAt(i) == '"') {, +				isQuoted = !isQuoted;, +		}, +		//either the last part of the tokenization or the original string, +		tokens.add(parseMimeType(mimeTypes.substring(nextBeginIndex)));, +		return tokens;, +++ b/spring-core/src/test/java/org/springframework/util/MimeTypeTests.java, + * @author Dimitrios Liapis, +	// SPR-17459, +	@Test, +	public void parseMimeTypesWithOddNumberOfDoubleQuotedCommas() {, +		String s = "foo/bar;param=\",\"";, +		List<MimeType> mimeTypes = MimeTypeUtils.parseMimeTypes(s);, +		assertEquals("Invalid amount of mime types", 1, mimeTypes.size());, +		assertEquals("Comma should be part of the mime type", s, mimeTypes.get(0).toString());, +	}, +, +	// SPR-17459, +	@Test, +	public void parseMimeTypesWithEvenNumberOfDoubleQuotedCommas() {, +		String s = "foo/bar;param=\"s,a,\"";, +		List<MimeType> mimeTypes = MimeTypeUtils.parseMimeTypes(s);, +		assertEquals("Invalid amount of mime types", 1, mimeTypes.size());, +		assertEquals("Comma should be part of the mime type", s, mimeTypes.get(0).toString());, +	}, +, +	// SPR-17459, +	@Test, +	public void parseMimeTypesWithAndWithoutDoubleQuotedCommas() {, +		String s = "foo/bar;param=\"s,\", text/x-c";, +		List<MimeType> mimeTypes = MimeTypeUtils.parseMimeTypes(s);, +		assertEquals("Invalid amount of mime types", 2, mimeTypes.size());, +		assertEquals("Comma should be part of the mime type", "foo/bar;param=\"s,\"", mimeTypes.get(0).toString());, +	}, +, +	// SPR-17459, +	@Test, +	public void parseMimeTypesIgnoreEscapedDoubleQuoteWithinDoubleQuotes() {, +		String s = "foo/bar;param=\"a\\\"b,c\"";, +		List<MimeType> mimeTypes = MimeTypeUtils.parseMimeTypes(s);, +		assertEquals("Invalid amount of mime types", 1, mimeTypes.size());, +		assertEquals("Escaped quote within quotes should be ignored when considering comma tokenization", s, mimeTypes.get(0).toString());, +	}, +, +	// SPR-17459, +	@Test, +	public void parseMimeTypesIgnoreEscapedBackslash() {, +		String s = "foo/bar;param=\"\\\\\"";, +		List<MimeType> mimeTypes = MimeTypeUtils.parseMimeTypes(s);, +		assertEquals("Invalid amount of mime types", 1, mimeTypes.size());, +		assertEquals("Escaped backslash should be ignored when considering comma tokenization", s, mimeTypes.get(0).toString());, +, +		s = "foo/bar;param=\"\\,\\\"";, +		mimeTypes = MimeTypeUtils.parseMimeTypes(s);, +		assertEquals("Invalid amount of mime types", 1, mimeTypes.size());, +		assertEquals("Escaped backslash should be ignored when considering comma tokenization", s, mimeTypes.get(0).toString());, +	}, +, +++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, + * @author Dimitrios Liapis, +		boolean isQuoted = false;, +		int nextBeginIndex = 0;, +		List<MimeType> tokens = new ArrayList<>();, +		for(int i = 0; i < mimeTypes.length() - 1; i++) {, +			//tokenizing on commas that are not within double quotes, +			if(mimeTypes.charAt(i) == ',' && !isQuoted) {, +				tokens.add(parseMimeType(mimeTypes.substring(nextBeginIndex,i)));, +				nextBeginIndex = i + 1;]