[+++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +	ApplicationEventMulticaster getApplicationEventMulticaster() throws IllegalStateException {, +	LifecycleProcessor getLifecycleProcessor() {, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +	ApplicationEventMulticaster getApplicationEventMulticaster() throws IllegalStateException {, +	LifecycleProcessor getLifecycleProcessor() {, +++ b/spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java, +import org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor;, +			ConfigurableListableBeanFactory beanFactory, AbstractApplicationContext applicationContext) {, +	private static class ApplicationListenerDetector implements MergedBeanDefinitionPostProcessor, DestructionAwareBeanPostProcessor {, +		private final AbstractApplicationContext applicationContext;, +		public ApplicationListenerDetector(AbstractApplicationContext applicationContext) {, +, +		@Override, +		public void postProcessBeforeDestruction(Object bean, String beanName) {, +			if (bean instanceof ApplicationListener) {, +				this.applicationContext.getApplicationEventMulticaster().removeApplicationListener((ApplicationListener) bean);, +				this.applicationContext.getApplicationEventMulticaster().removeApplicationListenerBean(beanName);, +			}, +		}, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +	ApplicationEventMulticaster getApplicationEventMulticaster() throws IllegalStateException {, +	LifecycleProcessor getLifecycleProcessor() {, +++ b/spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java, +import org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor;, +			ConfigurableListableBeanFactory beanFactory, AbstractApplicationContext applicationContext) {, +	private static class ApplicationListenerDetector implements MergedBeanDefinitionPostProcessor, DestructionAwareBeanPostProcessor {, +		private final AbstractApplicationContext applicationContext;, +		public ApplicationListenerDetector(AbstractApplicationContext applicationContext) {, +, +		@Override, +		public void postProcessBeforeDestruction(Object bean, String beanName) {, +			if (bean instanceof ApplicationListener) {, +				this.applicationContext.getApplicationEventMulticaster().removeApplicationListener((ApplicationListener) bean);, +				this.applicationContext.getApplicationEventMulticaster().removeApplicationListenerBean(beanName);, +			}, +		}, +++ b/spring-context/src/test/java/org/springframework/context/event/ApplicationContextEventTests.java, +, +import org.springframework.context.support.AbstractApplicationContext;, +, +		context.close();, +	}, +, +	@Test, +	public void listenersInApplicationContextWithNestedChild() {, +		StaticApplicationContext context = new StaticApplicationContext();, +		RootBeanDefinition nestedChild = new RootBeanDefinition(StaticApplicationContext.class);, +		nestedChild.getPropertyValues().add("parent", context);, +		nestedChild.setInitMethodName("refresh");, +		context.registerBeanDefinition("nestedChild", nestedChild);, +		RootBeanDefinition listener1Def = new RootBeanDefinition(MyOrderedListener1.class);, +		listener1Def.setDependsOn(new String[] {"nestedChild"});, +		context.registerBeanDefinition("listener1", listener1Def);, +		context.refresh();, +, +		MyOrderedListener1 listener1 = context.getBean("listener1", MyOrderedListener1.class);, +		MyEvent event1 = new MyEvent(context);, +		context.publishEvent(event1);, +		assertTrue(listener1.seenEvents.contains(event1));, +, +		SimpleApplicationEventMulticaster multicaster = context.getBean(, +				AbstractApplicationContext.APPLICATION_EVENT_MULTICASTER_BEAN_NAME,, +				SimpleApplicationEventMulticaster.class);, +		assertFalse(multicaster.getApplicationListeners().isEmpty());, +, +		context.close();, +		assertTrue(multicaster.getApplicationListeners().isEmpty());, +, +		context.close();, +, +		context.close();, +, +, +		context.close();]