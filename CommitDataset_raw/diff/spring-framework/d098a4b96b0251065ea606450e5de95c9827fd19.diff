[+++ b/spring-web/src/main/java/org/springframework/http/codec/DecoderHttpMessageReader.java, +import org.springframework.core.codec.CodecException;, +import org.springframework.http.HttpStatus;, +import org.springframework.web.server.ResponseStatusException;, +		return this.decoder, +				.decode(message.getBody(), elementType, contentType, hints), +				.mapError(this::mapError);, +		return this.decoder, +				.decodeToMono(message.getBody(), elementType, contentType, hints), +				.mapError(this::mapError);, +	private Throwable mapError(Throwable ex) {, +		if (ex instanceof ResponseStatusException) {, +			return ex;, +		}, +		else if (ex instanceof CodecException) {, +			return new ResponseStatusException(HttpStatus.BAD_REQUEST, "Failed to decode HTTP message", ex);, +		}, +		return new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Failed to decode HTTP message", ex);, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/DecoderHttpMessageReader.java, +import org.springframework.core.codec.CodecException;, +import org.springframework.http.HttpStatus;, +import org.springframework.web.server.ResponseStatusException;, +		return this.decoder, +				.decode(message.getBody(), elementType, contentType, hints), +				.mapError(this::mapError);, +		return this.decoder, +				.decodeToMono(message.getBody(), elementType, contentType, hints), +				.mapError(this::mapError);, +	private Throwable mapError(Throwable ex) {, +		if (ex instanceof ResponseStatusException) {, +			return ex;, +		}, +		else if (ex instanceof CodecException) {, +			return new ResponseStatusException(HttpStatus.BAD_REQUEST, "Failed to decode HTTP message", ex);, +		}, +		return new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Failed to decode HTTP message", ex);, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, +import org.springframework.http.HttpStatus;, +import org.springframework.web.server.ResponseStatusException;, +		Flux<DataBuffer> body = this.encoder, +				.encode(inputStream, message.bufferFactory(), elementType, contentType, hints), +				.mapError(this::mapError);, +	private Throwable mapError(Throwable ex) {, +		if (ex instanceof ResponseStatusException) {, +			return ex;, +		}, +		return new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Failed to encode HTTP message", ex);, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/DecoderHttpMessageReader.java, +import org.springframework.core.codec.CodecException;, +import org.springframework.http.HttpStatus;, +import org.springframework.web.server.ResponseStatusException;, +		return this.decoder, +				.decode(message.getBody(), elementType, contentType, hints), +				.mapError(this::mapError);, +		return this.decoder, +				.decodeToMono(message.getBody(), elementType, contentType, hints), +				.mapError(this::mapError);, +	private Throwable mapError(Throwable ex) {, +		if (ex instanceof ResponseStatusException) {, +			return ex;, +		}, +		else if (ex instanceof CodecException) {, +			return new ResponseStatusException(HttpStatus.BAD_REQUEST, "Failed to decode HTTP message", ex);, +		}, +		return new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Failed to decode HTTP message", ex);, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, +import org.springframework.http.HttpStatus;, +import org.springframework.web.server.ResponseStatusException;, +		Flux<DataBuffer> body = this.encoder, +				.encode(inputStream, message.bufferFactory(), elementType, contentType, hints), +				.mapError(this::mapError);, +	private Throwable mapError(Throwable ex) {, +		if (ex instanceof ResponseStatusException) {, +			return ex;, +		}, +		return new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Failed to encode HTTP message", ex);, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/server/handler/ResponseStatusExceptionHandler.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, + * @author Sebastien Deleuze, +	private static final Log logger = LogFactory.getLog(ResponseStatusExceptionHandler.class);, +, +			if (ex.getMessage() != null) {, +				logger.error(ex.getMessage());, +			}, +++ b/spring-web/src/main/java/org/springframework/http/codec/DecoderHttpMessageReader.java, +import org.springframework.core.codec.CodecException;, +import org.springframework.http.HttpStatus;, +import org.springframework.web.server.ResponseStatusException;, +		return this.decoder]