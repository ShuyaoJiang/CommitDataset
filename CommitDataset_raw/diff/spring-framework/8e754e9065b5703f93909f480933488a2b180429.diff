[+++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, + * @author Dave Syer, +			if (editor == null && convertedValue == newValue && requiredType!=null && !ClassUtils.isAssignableValue(requiredType, convertedValue)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, + * @author Dave Syer, +			if (editor == null && convertedValue == newValue && requiredType!=null && !ClassUtils.isAssignableValue(requiredType, convertedValue)) {, +++ b/spring-beans/src/test/java/org/springframework/beans/BeanWrapperTests.java, +import org.springframework.core.convert.ConversionFailedException;, +import org.springframework.core.convert.TypeDescriptor;, +import org.springframework.core.convert.support.GenericConversionService;, + * @author Dave Syer, +	public void testNullNestedTypeDescriptorWithNoConversionService() {, +		Foo foo = new Foo();, +		BeanWrapperImpl wrapper = new BeanWrapperImpl(foo);, +		wrapper.setAutoGrowNestedPaths(true);, +		wrapper.setPropertyValue("listOfMaps[0]['luckyNumber']", "9");, +		assertEquals("9", foo.listOfMaps.get(0).get("luckyNumber"));, +	}, +	, +	@Test, +	public void testNullNestedTypeDescriptorWithBadConversionService() {, +		Foo foo = new Foo();, +		BeanWrapperImpl wrapper = new BeanWrapperImpl(foo);, +		wrapper.setConversionService(new GenericConversionService() {, +			@Override, +			public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +				throw new ConversionFailedException(sourceType, targetType, source, null);, +			}, +		});, +		wrapper.setAutoGrowNestedPaths(true);, +		wrapper.setPropertyValue("listOfMaps[0]['luckyNumber']", "9");, +		assertEquals("9", foo.listOfMaps.get(0).get("luckyNumber"));, +	}, +	, +	@Test]