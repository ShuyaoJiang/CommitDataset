[+++ b/spring-web/src/main/java/org/springframework/web/server/ServerWebExchange.java, +	 * prepended with no further formatting no separators required., +++ b/spring-web/src/main/java/org/springframework/web/server/ServerWebExchange.java, +	 * prepended with no further formatting no separators required., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, +	 * Name of {@link #attributes() attribute} whose value can be used to, +	 * correlate log messages for this request. Use {@link #logPrefix()} to, +	 * obtain a consistently formatted prefix based on this attribute., +	 * @since 5.1, +	 * @see #logPrefix(), +	 */, +	String LOG_ID_ATTRIBUTE = ClientRequest.class.getName() + ".LOG_ID";, +, +, +	/**, +	 * Return a log message prefix to use to correlate messages for this request., +	 * The prefix is based on the value of the attribute {@link #LOG_ID_ATTRIBUTE}, +	 * along with some extra formatting so that the prefix can be conveniently, +	 * prepended with no further formatting no separators required., +	 * @return the log message prefix or an empty String if the, +	 * {@link #LOG_ID_ATTRIBUTE} is not set., +	 * @since 5.1, +	 */, +	String logPrefix();, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/web/server/ServerWebExchange.java, +	 * prepended with no further formatting no separators required., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, +	 * Name of {@link #attributes() attribute} whose value can be used to, +	 * correlate log messages for this request. Use {@link #logPrefix()} to, +	 * obtain a consistently formatted prefix based on this attribute., +	 * @since 5.1, +	 * @see #logPrefix(), +	 */, +	String LOG_ID_ATTRIBUTE = ClientRequest.class.getName() + ".LOG_ID";, +, +, +	/**, +	 * Return a log message prefix to use to correlate messages for this request., +	 * The prefix is based on the value of the attribute {@link #LOG_ID_ATTRIBUTE}, +	 * along with some extra formatting so that the prefix can be conveniently, +	 * prepended with no further formatting no separators required., +	 * @return the log message prefix or an empty String if the, +	 * {@link #LOG_ID_ATTRIBUTE} is not set., +	 * @since 5.1, +	 */, +	String logPrefix();, +, +	/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientRequestBuilder.java, +import org.springframework.util.ObjectUtils;, +		private final String logPrefix;, +, +, +, +			Object id = attributes.computeIfAbsent(LOG_ID_ATTRIBUTE, name -> ObjectUtils.getIdentityHexString(this));, +			this.logPrefix = "[" + id + "] ";, +, +		public String logPrefix() {, +			return this.logPrefix;, +		}, +, +		@Override, +					return Hints.from(Hints.LOG_PREFIX_HINT, logPrefix());, +++ b/spring-web/src/main/java/org/springframework/web/server/ServerWebExchange.java, +	 * prepended with no further formatting no separators required., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, +	 * Name of {@link #attributes() attribute} whose value can be used to, +	 * correlate log messages for this request. Use {@link #logPrefix()} to, +	 * obtain a consistently formatted prefix based on this attribute., +	 * @since 5.1, +	 * @see #logPrefix(), +	 */, +	String LOG_ID_ATTRIBUTE = ClientRequest.class.getName() + ".LOG_ID";, +, +, +	/**, +	 * Return a log message prefix to use to correlate messages for this request., +	 * The prefix is based on the value of the attribute {@link #LOG_ID_ATTRIBUTE}, +	 * along with some extra formatting so that the prefix can be conveniently, +	 * prepended with no further formatting no separators required., +	 * @return the log message prefix or an empty String if the, +	 * {@link #LOG_ID_ATTRIBUTE} is not set., +	 * @since 5.1, +	 */, +	String logPrefix();, +, +	/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientRequestBuilder.java, +import org.springframework.util.ObjectUtils;, +		private final String logPrefix;, +, +, +, +			Object id = attributes.computeIfAbsent(LOG_ID_ATTRIBUTE, name -> ObjectUtils.getIdentityHexString(this));, +			this.logPrefix = "[" + id + "] ";, +, +		public String logPrefix() {, +			return this.logPrefix;]