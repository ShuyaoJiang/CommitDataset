[+++ b/org.springframework.core/src/main/java/org/springframework/util/AntPathMatcher.java, +import java.util.regex.Pattern;, +import java.util.regex.Matcher;, +	private static final Pattern VARIABLE_PATTERN = Pattern.compile("\\{[^/]+?\\}");, +, +			int wildCardCount1 = getWildCardCount(pattern1);, +			int wildCardCount2 = getWildCardCount(pattern2);, +, +			int bracketCount1 = StringUtils.countOccurrencesOf(pattern1, "{");, +			int bracketCount2 = StringUtils.countOccurrencesOf(pattern2, "{");, +, +			int totalCount1 = wildCardCount1 + bracketCount1;, +			int totalCount2 = wildCardCount2 + bracketCount2;, +, +			if (totalCount1 != totalCount2) {, +				return totalCount1 - totalCount2;, +			}, +, +			int pattern1Length = getPatternLength(pattern1);, +			int pattern2Length = getPatternLength(pattern2);, +, +			if (pattern1Length != pattern2Length) {, +				return pattern2Length - pattern1Length;, +			}, +, +, +, +			return 0;, +		}, +, +		private int getWildCardCount(String pattern) {, +			if (pattern.endsWith(".*")) {, +				pattern = pattern.substring(0, pattern.length() - 2);, +			}, +			return StringUtils.countOccurrencesOf(pattern, "*");, +		}, +, +		/**, +		 * Returns the length of the given pattern, where template variables are considered to be 1 long., +		 */, +		private int getPatternLength(String pattern) {, +			Matcher m = VARIABLE_PATTERN.matcher(pattern);, +			return m.replaceAll("#").length();, +++ b/org.springframework.core/src/main/java/org/springframework/util/AntPathMatcher.java, +import java.util.regex.Pattern;, +import java.util.regex.Matcher;, +	private static final Pattern VARIABLE_PATTERN = Pattern.compile("\\{[^/]+?\\}");, +, +			int wildCardCount1 = getWildCardCount(pattern1);, +			int wildCardCount2 = getWildCardCount(pattern2);, +, +			int bracketCount1 = StringUtils.countOccurrencesOf(pattern1, "{");, +			int bracketCount2 = StringUtils.countOccurrencesOf(pattern2, "{");, +, +			int totalCount1 = wildCardCount1 + bracketCount1;, +			int totalCount2 = wildCardCount2 + bracketCount2;, +, +			if (totalCount1 != totalCount2) {, +				return totalCount1 - totalCount2;, +			}, +, +			int pattern1Length = getPatternLength(pattern1);, +			int pattern2Length = getPatternLength(pattern2);, +, +			if (pattern1Length != pattern2Length) {, +				return pattern2Length - pattern1Length;, +			}, +, +, +, +			return 0;, +		}, +, +		private int getWildCardCount(String pattern) {, +			if (pattern.endsWith(".*")) {, +				pattern = pattern.substring(0, pattern.length() - 2);, +			}, +			return StringUtils.countOccurrencesOf(pattern, "*");, +		}, +, +		/**, +		 * Returns the length of the given pattern, where template variables are considered to be 1 long., +		 */, +		private int getPatternLength(String pattern) {, +			Matcher m = VARIABLE_PATTERN.matcher(pattern);, +			return m.replaceAll("#").length();, +++ b/org.springframework.core/src/main/java/org/springframework/util/AntPathStringMatcher.java, +	private static final String DEFAULT_VARIABLE_PATTERN = "(.*)";, +++ b/org.springframework.core/src/main/java/org/springframework/util/AntPathMatcher.java, +import java.util.regex.Pattern;, +import java.util.regex.Matcher;, +	private static final Pattern VARIABLE_PATTERN = Pattern.compile("\\{[^/]+?\\}");, +, +			int wildCardCount1 = getWildCardCount(pattern1);, +			int wildCardCount2 = getWildCardCount(pattern2);, +, +			int bracketCount1 = StringUtils.countOccurrencesOf(pattern1, "{");, +			int bracketCount2 = StringUtils.countOccurrencesOf(pattern2, "{");, +, +			int totalCount1 = wildCardCount1 + bracketCount1;]