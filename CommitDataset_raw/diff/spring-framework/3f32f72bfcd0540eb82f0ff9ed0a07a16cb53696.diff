[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/HandlerResultHandlerSupport.java, +		return exchange.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE), +				.map(attribute -> (List<MediaType>) new ArrayList<>((Set<MediaType>) attribute)), +				.orElseGet(producibleTypesSupplier);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/HandlerResultHandlerSupport.java, +		return exchange.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE), +				.map(attribute -> (List<MediaType>) new ArrayList<>((Set<MediaType>) attribute)), +				.orElseGet(producibleTypesSupplier);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/HttpMessageWriterView.java, +		Object value = getObjectToRender(model);, +		return (value != null) ?, +				write(value, contentType, exchange) :, +				exchange.getResponse().setComplete();, +	private Object getObjectToRender(Map<String, ?> model) {, +			return null;, +			return result.values().iterator().next();, +			return result;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/HandlerResultHandlerSupport.java, +		return exchange.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE), +				.map(attribute -> (List<MediaType>) new ArrayList<>((Set<MediaType>) attribute)), +				.orElseGet(producibleTypesSupplier);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/HttpMessageWriterView.java, +		Object value = getObjectToRender(model);, +		return (value != null) ?, +				write(value, contentType, exchange) :, +				exchange.getResponse().setComplete();, +	private Object getObjectToRender(Map<String, ?> model) {, +			return null;, +			return result.values().iterator().next();, +			return result;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/RequestContext.java, +			modelObject = (T) this.exchange.getAttribute(modelName).orElse(null);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/HandlerResultHandlerSupport.java, +		return exchange.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE), +				.map(attribute -> (List<MediaType>) new ArrayList<>((Set<MediaType>) attribute)), +				.orElseGet(producibleTypesSupplier);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/HttpMessageWriterView.java, +		Object value = getObjectToRender(model);, +		return (value != null) ?, +				write(value, contentType, exchange) :, +				exchange.getResponse().setComplete();, +	private Object getObjectToRender(Map<String, ?> model) {, +			return null;, +			return result.values().iterator().next();, +			return result;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/RequestContext.java, +			modelObject = (T) this.exchange.getAttribute(modelName).orElse(null);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/freemarker/FreeMarkerView.java, +import org.springframework.util.MimeType;, +			Charset charset = getCharset(contentType);, +	private Charset getCharset(MediaType mediaType) {, +		return Optional.ofNullable(mediaType).map(MimeType::getCharset).orElse(getDefaultCharset());]