[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +			Annotation annotation = AnnotationUtils.getAnnotation(element, annotationName);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +			Annotation annotation = AnnotationUtils.getAnnotation(element, annotationName);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +	 * Delegates to {@link #getRepeatableAnnotations(AnnotatedElement, Class, Class)}., +	 * @see #getRepeatableAnnotations(AnnotatedElement, Class, Class), +	 * @see #getDeclaredRepeatableAnnotations(AnnotatedElement, Class, Class), +	 * @deprecated As of Spring Framework 4.2, use {@code getRepeatableAnnotations()}, +	 * or {@code getDeclaredRepeatableAnnotations()} instead., +	 * Delegates to {@link #getRepeatableAnnotations(AnnotatedElement, Class, Class)}., +	 * @see #getRepeatableAnnotations(AnnotatedElement, Class, Class), +	 * @see #getDeclaredRepeatableAnnotations(AnnotatedElement, Class, Class), +	 * @deprecated As of Spring Framework 4.2, use {@code getRepeatableAnnotations()}, +	 * or {@code getDeclaredRepeatableAnnotations()} instead., +	 * such annotations are either <em>present</em>, <em>indirectly present</em>,, +	 * or <em>meta-present</em> on the element., +	 * <p>This method mimics the functionality of Java 8's, +	 * {@link java.lang.reflect.AnnotatedElement#getAnnotationsByType(Class)}, +	 * with support for automatic detection of a <em>container annotation</em>, +	 * declared via @{@link java.lang.annotation.Repeatable} (when running on, +	 * Java 8 or higher) and with additional support for meta-annotations., +	 * <p>Handles both single annotations and annotations nested within a, +	 * <em>container annotation</em>., +	 * <p>Correctly handles <em>bridge methods</em> generated by the, +	 * compiler if the supplied element is a {@link Method}., +	 * <p>Meta-annotations will be searched if the annotation is not, +	 * <em>present</em> on the supplied element., +	 * @param annotatedElement the element to look for annotations on; never {@code null}, +	 * @param annotationType the annotation type to look for; never {@code null}, +	 * @return the annotations found or an empty set; never {@code null}, +	 * @since 4.2, +	 * @see #getRepeatableAnnotations(AnnotatedElement, Class, Class), +	 * @see #getDeclaredRepeatableAnnotations(AnnotatedElement, Class, Class), +	 * @see org.springframework.core.BridgeMethodResolver#findBridgedMethod, +	 * @see java.lang.annotation.Repeatable, +	 * @see java.lang.reflect.AnnotatedElement#getAnnotationsByType, +	 */, +	public static <A extends Annotation> Set<A> getRepeatableAnnotations(AnnotatedElement annotatedElement,, +			Class<A> annotationType) {, +		return getRepeatableAnnotations(annotatedElement, annotationType, null);, +	}, +, +	/**, +	 * Get the <em>repeatable</em> {@linkplain Annotation annotations} of, +	 * {@code annotationType} from the supplied {@link AnnotatedElement}, where, +	 * such annotations are either <em>present</em>, <em>indirectly present</em>,, +	 * or <em>meta-present</em> on the element., +	 * or if it should be looked up via @{@link java.lang.annotation.Repeatable}, +	 * when running on Java 8 or higher, +	 * @see #getRepeatableAnnotations(AnnotatedElement, Class), +	 * @see #getDeclaredRepeatableAnnotations(AnnotatedElement, Class), +	 * with support for automatic detection of a <em>container annotation</em>, +	 * declared via @{@link java.lang.annotation.Repeatable} (when running on, +	 * Java 8 or higher) and with additional support for meta-annotations., +	 * <p>Handles both single annotations and annotations nested within a, +	 * <em>container annotation</em>., +	 * <p>Correctly handles <em>bridge methods</em> generated by the, +	 * compiler if the supplied element is a {@link Method}., +	 * <p>Meta-annotations will be searched if the annotation is not, +	 * <em>present</em> on the supplied element., +	 * @param annotatedElement the element to look for annotations on; never {@code null}, +	 * @param annotationType the annotation type to look for; never {@code null}, +	 * @return the annotations found or an empty set; never {@code null}, +	 * @since 4.2, +	 * @see #getRepeatableAnnotations(AnnotatedElement, Class), +	 * @see #getRepeatableAnnotations(AnnotatedElement, Class, Class), +	 * @see #getDeclaredRepeatableAnnotations(AnnotatedElement, Class, Class), +	 * @see org.springframework.core.BridgeMethodResolver#findBridgedMethod, +	 * @see java.lang.annotation.Repeatable, +	 * @see java.lang.reflect.AnnotatedElement#getDeclaredAnnotationsByType, +	 */, +	public static <A extends Annotation> Set<A> getDeclaredRepeatableAnnotations(AnnotatedElement annotatedElement,, +			Class<A> annotationType) {, +		return getDeclaredRepeatableAnnotations(annotatedElement, annotationType, null);, +	}, +, +	/**, +	 * Get the declared <em>repeatable</em> {@linkplain Annotation annotations}, +	 * of {@code annotationType} from the supplied {@link AnnotatedElement},, +	 * where such annotations are either <em>directly present</em>,, +	 * <em>indirectly present</em>, or <em>meta-present</em> on the element., +	 * <p>This method mimics the functionality of Java 8's, +	 * {@link java.lang.reflect.AnnotatedElement#getDeclaredAnnotationsByType(Class)}, +	 * or if it should be looked up via @{@link java.lang.annotation.Repeatable}, +	 * when running on Java 8 or higher, +	 * @see #getRepeatableAnnotations(AnnotatedElement, Class), +	 * @see #getDeclaredRepeatableAnnotations(AnnotatedElement, Class), +	 * or if it should be looked up via @{@link java.lang.annotation.Repeatable}, +	 * when running on Java 8 or higher, +	 * Get the annotation with the supplied {@code annotationName} on the, +	 * supplied {@code element}., +	 * @param element the element to search on, +	 * @param annotationName the fully qualified class name of the annotation, +	 * type to find; never {@code null} or empty, +	 * @return the annotation if found; {@code null} otherwise, +	 * @since 4.2, +	 */, +	static Annotation getAnnotation(AnnotatedElement element, String annotationName) {, +		for (Annotation annotation : element.getAnnotations()) {]