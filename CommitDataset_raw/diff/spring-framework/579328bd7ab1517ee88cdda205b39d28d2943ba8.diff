[+++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpRequest.java, +import java.util.Collection;, +import org.springframework.http.HttpHeaders;, +		getCookies().values().stream().flatMap(Collection::stream), +				.forEach(cookie -> getHeaders().add(HttpHeaders.COOKIE, cookie.toString()));, +++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpRequest.java, +import java.util.Collection;, +import org.springframework.http.HttpHeaders;, +		getCookies().values().stream().flatMap(Collection::stream), +				.forEach(cookie -> getHeaders().add(HttpHeaders.COOKIE, cookie.toString()));, +++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpResponse.java, +import java.util.Collection;, +	@Override, +		String headerName = HttpHeaders.SET_COOKIE;, +		if (!getCookies().isEmpty() && this.headers.get(headerName) == null) {, +			getCookies().values().stream().flatMap(Collection::stream), +					.forEach(cookie -> getHeaders().add(headerName, cookie.toString()));, +		}, +	@Override, +++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpRequest.java, +import java.util.Collection;, +import org.springframework.http.HttpHeaders;, +		getCookies().values().stream().flatMap(Collection::stream), +				.forEach(cookie -> getHeaders().add(HttpHeaders.COOKIE, cookie.toString()));, +++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpResponse.java, +import java.util.Collection;, +	@Override, +		String headerName = HttpHeaders.SET_COOKIE;, +		if (!getCookies().isEmpty() && this.headers.get(headerName) == null) {, +			getCookies().values().stream().flatMap(Collection::stream), +					.forEach(cookie -> getHeaders().add(headerName, cookie.toString()));, +		}, +	@Override, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpRequest.java, +			applyCookiesIfNecessary();, +		private void applyCookiesIfNecessary() {, +			if (this.headers.get(HttpHeaders.COOKIE) == null) {, +	}, +++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpRequest.java, +import java.util.Collection;, +import org.springframework.http.HttpHeaders;, +		getCookies().values().stream().flatMap(Collection::stream), +				.forEach(cookie -> getHeaders().add(HttpHeaders.COOKIE, cookie.toString()));, +++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpResponse.java, +import java.util.Collection;, +	@Override, +		String headerName = HttpHeaders.SET_COOKIE;, +		if (!getCookies().isEmpty() && this.headers.get(headerName) == null) {, +			getCookies().values().stream().flatMap(Collection::stream), +					.forEach(cookie -> getHeaders().add(headerName, cookie.toString()));, +		}, +	@Override, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpRequest.java, +			applyCookiesIfNecessary();, +		private void applyCookiesIfNecessary() {, +			if (this.headers.get(HttpHeaders.COOKIE) == null) {, +	}, +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/HttpHandlerConnectorTests.java, +import java.util.Collections;, +import org.springframework.http.HttpHeaders;, +		HttpHeaders headers = request.getHeaders();, +		assertEquals(Arrays.asList("h0", "h1"), headers.get("custom-header"));, +		assertEquals(Collections.singletonList("custom-cookie=c0"), headers.get(HttpHeaders.COOKIE));, +		HttpHeaders headers = response.getHeaders();, +		assertEquals(Arrays.asList("h0", "h1"), headers.get("custom-header"));, +		assertEquals(Collections.singletonList("custom-cookie=c0"), headers.get(HttpHeaders.SET_COOKIE));, +++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpRequest.java, +import java.util.Collection;, +import org.springframework.http.HttpHeaders;, +		getCookies().values().stream().flatMap(Collection::stream), +				.forEach(cookie -> getHeaders().add(HttpHeaders.COOKIE, cookie.toString()));, +++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpResponse.java, +import java.util.Collection;, +	@Override, +		String headerName = HttpHeaders.SET_COOKIE;, +		if (!getCookies().isEmpty() && this.headers.get(headerName) == null) {, +			getCookies().values().stream().flatMap(Collection::stream), +					.forEach(cookie -> getHeaders().add(headerName, cookie.toString()));, +		}, +	@Override, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpRequest.java, +			applyCookiesIfNecessary();, +		private void applyCookiesIfNecessary() {, +			if (this.headers.get(HttpHeaders.COOKIE) == null) {, +	}, +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/HttpHandlerConnectorTests.java, +import java.util.Collections;, +import org.springframework.http.HttpHeaders;, +		HttpHeaders headers = request.getHeaders();, +		assertEquals(Arrays.asList("h0", "h1"), headers.get("custom-header"));, +		assertEquals(Collections.singletonList("custom-cookie=c0"), headers.get(HttpHeaders.COOKIE));, +		HttpHeaders headers = response.getHeaders();, +		assertEquals(Arrays.asList("h0", "h1"), headers.get("custom-header"));, +		assertEquals(Collections.singletonList("custom-cookie=c0"), headers.get(HttpHeaders.SET_COOKIE));, +++ /dev/null, +++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpRequest.java, +import java.util.Collection;, +import org.springframework.http.HttpHeaders;, +		getCookies().values().stream().flatMap(Collection::stream), +				.forEach(cookie -> getHeaders().add(HttpHeaders.COOKIE, cookie.toString()));]