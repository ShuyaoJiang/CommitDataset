[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java, + * Copyright 2002-2010 the original author or authors., + * An Indexer can index into some proceeding structure to access a particular piece of it., + * Supported structures are: strings/collections (lists/sets)/arrays, +				return new TypedValue(accessArrayElement(targetObject, idx), targetObjectTypeDescriptor.getElementTypeDescriptor());, +						return new TypedValue(o, targetObjectTypeDescriptor.getElementTypeDescriptor());, +				Object possiblyConvertedValue = state.convertValue(newValue, targetObjectTypeDescriptor.getElementTypeDescriptor());, +				if (elementType == null || elementType == Object.class) {, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java, + * Copyright 2002-2010 the original author or authors., + * An Indexer can index into some proceeding structure to access a particular piece of it., + * Supported structures are: strings/collections (lists/sets)/arrays, +				return new TypedValue(accessArrayElement(targetObject, idx), targetObjectTypeDescriptor.getElementTypeDescriptor());, +						return new TypedValue(o, targetObjectTypeDescriptor.getElementTypeDescriptor());, +				Object possiblyConvertedValue = state.convertValue(newValue, targetObjectTypeDescriptor.getElementTypeDescriptor());, +				if (elementType == null || elementType == Object.class) {, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Selection.java, + * Copyright 2002-2010 the original author or authors., + * Represents selection over a map or collection., + * For example: {1,2,3,4,5,6,7,8,9,10}.?{#isEven(#this) == 'y'} returns [2, 4, 6, 8, 10], + * <p>Basically a subset of the input data is returned based on the, + * evaluation of the expression supplied as selection criteria., +					state.pushActiveContextObject(new TypedValue(element, op.getTypeDescriptor().getElementTypeDescriptor()));, +								return new TypedValue(element, op.getTypeDescriptor().getElementTypeDescriptor());, +				return new TypedValue(result.get(result.size() - 1), op.getTypeDescriptor().getElementTypeDescriptor());]