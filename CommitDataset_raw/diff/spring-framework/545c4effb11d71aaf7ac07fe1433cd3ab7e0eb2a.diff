[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/BufferingStompDecoder.java, + * that buffers content remaining in the input ByteBuffer after the parent, + * class has read all (complete) STOMP frames from it. The remaining content, + * represents an incomplete STOMP frame. When called repeatedly with additional, + * data, the decode method returns one or more messages or, if there is not, + * enough data still, continues to buffer., + * <p>A single instance of this decoder can be invoked repeatedly to read all, + * messages from a single stream (e.g. WebSocket session) as long as decoding, + * does not fail. If there is an exception, StompDecoder instance should not, + * be used any more as its internal state is not guaranteed to be consistent., + * It is expected that the underlying session is closed at that point., +	/**, +	 * Return the configured buffer size limit., +	 */, +	/**, +	 * Calculate the current buffer size., +	 */, +	/**, +	 * Get the expected content length of the currently buffered, incomplete STOMP frame., +	 */, +	/**, +	 * Decodes one or more STOMP frames from the given {@code ByteBuffer} into a, +	 * list of {@link Message}s., +	 *, +	 * <p>If there was enough data to parse a "content-length" header, then the, +	 * value is used to determine how much more data is needed before a new, +	 * attempt to decode is made., +	 *, +	 * <p>If there was not enough data to parse the "content-length", or if there, +	 * is "content-length" header, every subsequent call to decode attempts to, +	 * parse again with all available data. Therefore the presence of a "content-length", +	 * header helps to optimize the decoding of large messages., +	 *, +	 * @param newBuffer a buffer containing new data to decode, +	 *, +	 * @return decoded messages or an empty list, +	 * @throws StompConversionException raised in case of decoding issues, +	 */, +	public List<Message<byte[]>> decode(ByteBuffer newBuffer) {, +		this.chunks.add(newBuffer);, +		ByteBuffer bufferToDecode = assembleChunksAndReset();, +		List<Message<byte[]>> messages = decode(bufferToDecode, headers);, +		if (bufferToDecode.hasRemaining()) {, +			this.chunks.add(bufferToDecode);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/BufferingStompDecoder.java, + * that buffers content remaining in the input ByteBuffer after the parent, + * class has read all (complete) STOMP frames from it. The remaining content, + * represents an incomplete STOMP frame. When called repeatedly with additional, + * data, the decode method returns one or more messages or, if there is not, + * enough data still, continues to buffer., + * <p>A single instance of this decoder can be invoked repeatedly to read all, + * messages from a single stream (e.g. WebSocket session) as long as decoding, + * does not fail. If there is an exception, StompDecoder instance should not, + * be used any more as its internal state is not guaranteed to be consistent., + * It is expected that the underlying session is closed at that point., +	/**, +	 * Return the configured buffer size limit., +	 */, +	/**, +	 * Calculate the current buffer size., +	 */, +	/**, +	 * Get the expected content length of the currently buffered, incomplete STOMP frame., +	 */, +	/**, +	 * Decodes one or more STOMP frames from the given {@code ByteBuffer} into a, +	 * list of {@link Message}s., +	 *, +	 * <p>If there was enough data to parse a "content-length" header, then the, +	 * value is used to determine how much more data is needed before a new, +	 * attempt to decode is made., +	 *, +	 * <p>If there was not enough data to parse the "content-length", or if there, +	 * is "content-length" header, every subsequent call to decode attempts to, +	 * parse again with all available data. Therefore the presence of a "content-length", +	 * header helps to optimize the decoding of large messages., +	 *, +	 * @param newBuffer a buffer containing new data to decode, +	 *, +	 * @return decoded messages or an empty list, +	 * @throws StompConversionException raised in case of decoding issues, +	 */, +	public List<Message<byte[]>> decode(ByteBuffer newBuffer) {, +		this.chunks.add(newBuffer);, +		ByteBuffer bufferToDecode = assembleChunksAndReset();, +		List<Message<byte[]>> messages = decode(bufferToDecode, headers);, +		if (bufferToDecode.hasRemaining()) {, +			this.chunks.add(bufferToDecode);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompDecoder.java, +import org.springframework.util.Assert;, + * Decodes one or more STOMP frames contained in a {@link ByteBuffer}., + *, + * <p>An attempt is made to read all complete STOMP frames from the buffer, which, + * could be zero, one, or more. If there is any left-over content, i.e. an incomplete, + * STOMP frame, at the end the buffer is reset to point to the beginning of the, + * partial content. The caller is then responsible for dealing with that, + * incomplete content by buffering until there is more input available., +	 * Decodes one or more STOMP frames from the given {@code ByteBuffer} into a, +	 * list of {@link Message}s. If the input buffer contains any incplcontains partial STOMP frame content, or additional, +	 * Decodes one or more STOMP frames from the given {@code buffer} and returns]