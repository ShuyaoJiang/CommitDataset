[+++ b/spring-core/src/main/java/org/springframework/util/SocketUtils.java, +				if (searchCounter > portRange) {, +				searchCounter++;, +++ b/spring-core/src/main/java/org/springframework/util/SocketUtils.java, +				if (searchCounter > portRange) {, +				searchCounter++;, +++ b/spring-core/src/test/java/org/springframework/util/SocketUtilsTests.java, + * Copyright 2002-2017 the original author or authors., +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +import static org.hamcrest.CoreMatchers.*;, +import static org.springframework.util.SocketUtils.PORT_RANGE_MIN;, +import static org.springframework.util.SocketUtils.PORT_RANGE_MAX;, +	@Rule, +	public final ExpectedException exception = ExpectedException.none();, +, +	@Test, +		exception.expect(IllegalArgumentException.class);, +	@Test, +		exception.expect(IllegalArgumentException.class);, +	@Test, +			exception.expect(IllegalStateException.class);, +			exception.expectMessage(startsWith("Could not find an available TCP port"));, +			exception.expectMessage(endsWith("after 1 attempts"));, +			// will only look for the exact port, +	@Test, +		exception.expect(IllegalArgumentException.class);, +	@Test, +		exception.expect(IllegalArgumentException.class);, +	@Test, +		exception.expect(IllegalArgumentException.class);, +	@Test, +			exception.expect(IllegalStateException.class);, +			exception.expectMessage(startsWith("Could not find an available UDP port"));, +			exception.expectMessage(endsWith("after 1 attempts"));, +	@Test, +		exception.expect(IllegalArgumentException.class);]