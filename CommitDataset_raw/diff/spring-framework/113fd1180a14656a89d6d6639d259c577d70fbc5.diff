[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java, +			logger.debug("Handling message to " + destination);, +			logger.trace("Found " + matches.size() + " matching mapping(s) for [" +, +					lookupDestination + "] : " + matches);, +			logger.debug("No matching method found.");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java, +			logger.debug("Handling message to " + destination);, +			logger.trace("Found " + matches.size() + " matching mapping(s) for [" +, +					lookupDestination + "] : " + matches);, +			logger.debug("No matching method found.");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpAttributes.java, +	/**, +	 * Extract the SiMP session attributes from the given message, wrap them in, +	 * a {@link SimpAttributes} instance., +	 * @param message the message to extract session attributes from, +	 */, +	public static SimpAttributes fromMessage(Message<?> message) {, +		Assert.notNull(message);, +		MessageHeaders headers = message.getHeaders();, +		String sessionId = SimpMessageHeaderAccessor.getSessionId(headers);, +		Map<String, Object> sessionAttributes = SimpMessageHeaderAccessor.getSessionAttributes(headers);, +		if (sessionId == null || sessionAttributes == null) {, +			throw new IllegalStateException(, +					"Message does not contain SiMP session id or attributes: " + message);, +		}, +		return new SimpAttributes(sessionId, sessionAttributes);, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java, +			logger.debug("Handling message to " + destination);, +			logger.trace("Found " + matches.size() + " matching mapping(s) for [" +, +					lookupDestination + "] : " + matches);, +			logger.debug("No matching method found.");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpAttributes.java, +	/**, +	 * Extract the SiMP session attributes from the given message, wrap them in, +	 * a {@link SimpAttributes} instance., +	 * @param message the message to extract session attributes from, +	 */, +	public static SimpAttributes fromMessage(Message<?> message) {, +		Assert.notNull(message);, +		MessageHeaders headers = message.getHeaders();, +		String sessionId = SimpMessageHeaderAccessor.getSessionId(headers);, +		Map<String, Object> sessionAttributes = SimpMessageHeaderAccessor.getSessionAttributes(headers);, +		if (sessionId == null || sessionAttributes == null) {, +			throw new IllegalStateException(, +					"Message does not contain SiMP session id or attributes: " + message);, +		}, +		return new SimpAttributes(sessionId, sessionAttributes);, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +	public void handleReturnValue(Object returnValue, MethodParameter returnType, Message<?> message) throws Exception {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java, +			logger.debug("Handling message to " + destination);, +			logger.trace("Found " + matches.size() + " matching mapping(s) for [" +, +					lookupDestination + "] : " + matches);, +			logger.debug("No matching method found.");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpAttributes.java, +	/**, +	 * Extract the SiMP session attributes from the given message, wrap them in, +	 * a {@link SimpAttributes} instance., +	 * @param message the message to extract session attributes from, +	 */, +	public static SimpAttributes fromMessage(Message<?> message) {, +		Assert.notNull(message);, +		MessageHeaders headers = message.getHeaders();, +		String sessionId = SimpMessageHeaderAccessor.getSessionId(headers);, +		Map<String, Object> sessionAttributes = SimpMessageHeaderAccessor.getSessionAttributes(headers);, +		if (sessionId == null || sessionAttributes == null) {, +			throw new IllegalStateException(, +					"Message does not contain SiMP session id or attributes: " + message);, +		}, +		return new SimpAttributes(sessionId, sessionAttributes);, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +	public void handleReturnValue(Object returnValue, MethodParameter returnType, Message<?> message) throws Exception {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.java, +		return this.validator;, +		MessageMapping typeAnnotation = AnnotationUtils.findAnnotation(handlerType, MessageMapping.class);, +			if (typeAnnotation != null) {, +				result = createMessageMappingCondition(typeAnnotation).combine(result);, +		SubscribeMapping subsribeAnnotation = AnnotationUtils.findAnnotation(method, SubscribeMapping.class);, +		if (subsribeAnnotation != null) {, +			SimpMessageMappingInfo result = createSubscribeCondition(subsribeAnnotation);, +			if (typeAnnotation != null) {, +				result = createMessageMappingCondition(typeAnnotation).combine(result);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java, +			logger.debug("Handling message to " + destination);, +			logger.trace("Found " + matches.size() + " matching mapping(s) for [" +, +					lookupDestination + "] : " + matches);, +			logger.debug("No matching method found.");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpAttributes.java, +	/**, +	 * Extract the SiMP session attributes from the given message, wrap them in, +	 * a {@link SimpAttributes} instance., +	 * @param message the message to extract session attributes from, +	 */, +	public static SimpAttributes fromMessage(Message<?> message) {, +		Assert.notNull(message);, +		MessageHeaders headers = message.getHeaders();, +		String sessionId = SimpMessageHeaderAccessor.getSessionId(headers);]