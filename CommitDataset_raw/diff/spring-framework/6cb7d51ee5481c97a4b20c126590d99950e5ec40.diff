[+++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpResponse.java, +import java.nio.charset.Charset;, +import java.nio.charset.StandardCharsets;, +import org.springframework.core.io.buffer.DataBufferUtils;, +import org.springframework.http.MediaType;, +import org.springframework.util.Assert;, +	/**, +	 * Return the body of the response aggregated and converted to a String, +	 * using the charset of the Content-Type response or otherwise defaulting, +	 * to "UTF-8"., +	 */, +	public Mono<String> getBodyAsString() {, +		Charset charset = getCharset();, +		Charset charsetToUse = (charset != null ? charset : StandardCharsets.UTF_8);, +		return Flux.from(this.body), +				.reduce(this.bufferFactory.allocateBuffer(), (previous, current) -> {, +					previous.write(current);, +					DataBufferUtils.release(current);, +					return previous;, +				}), +				.map(buffer -> dumpString(buffer, charsetToUse));, +	}, +, +	private static String dumpString(DataBuffer buffer, Charset charset) {, +		Assert.notNull(charset, "'charset' must not be null");, +		byte[] bytes = dumpBytes(buffer);, +		return new String(bytes, charset);, +	}, +, +	private static byte[] dumpBytes(DataBuffer buffer) {, +		Assert.notNull(buffer, "'buffer' must not be null");, +		byte[] bytes = new byte[buffer.readableByteCount()];, +		buffer.read(bytes);, +		return bytes;, +	}, +, +	private Charset getCharset() {, +		MediaType contentType = getHeaders().getContentType();, +		if (contentType != null) {, +			return contentType.getCharset();, +		}, +		return null;, +	}, +, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpResponse.java, +import java.nio.charset.Charset;, +import java.nio.charset.StandardCharsets;, +import org.springframework.core.io.buffer.DataBufferUtils;, +import org.springframework.http.MediaType;, +import org.springframework.util.Assert;, +	/**, +	 * Return the body of the response aggregated and converted to a String, +	 * using the charset of the Content-Type response or otherwise defaulting, +	 * to "UTF-8"., +	 */, +	public Mono<String> getBodyAsString() {, +		Charset charset = getCharset();, +		Charset charsetToUse = (charset != null ? charset : StandardCharsets.UTF_8);, +		return Flux.from(this.body), +				.reduce(this.bufferFactory.allocateBuffer(), (previous, current) -> {, +					previous.write(current);, +					DataBufferUtils.release(current);, +					return previous;, +				}), +				.map(buffer -> dumpString(buffer, charsetToUse));, +	}, +, +	private static String dumpString(DataBuffer buffer, Charset charset) {, +		Assert.notNull(charset, "'charset' must not be null");, +		byte[] bytes = dumpBytes(buffer);, +		return new String(bytes, charset);, +	}, +, +	private static byte[] dumpBytes(DataBuffer buffer) {, +		Assert.notNull(buffer, "'buffer' must not be null");, +		byte[] bytes = new byte[buffer.readableByteCount()];, +		buffer.read(bytes);, +		return bytes;, +	}, +, +	private Charset getCharset() {, +		MediaType contentType = getHeaders().getContentType();, +		if (contentType != null) {, +			return contentType.getCharset();, +		}, +		return null;, +	}, +, +++ b/spring-web/src/test/java/org/springframework/http/codec/EncoderHttpMessageWriterTest.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,]