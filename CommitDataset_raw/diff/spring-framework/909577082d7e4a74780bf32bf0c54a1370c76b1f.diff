[+++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/result/ModelResultMatchers.java, + * Copyright 2002-2013 the original author or authors., +     * Assert the given model attributes do not exist, +     */, +    public ResultMatcher attributeDoesNotExist(final String... names) {, +        return new ResultMatcher() {, +            @Override, +            public void match(MvcResult result) throws Exception {, +                ModelAndView mav = getModelAndView(result);, +                for (String name : names) {, +                    assertTrue("Model attribute '" + name + "' exists", mav.getModel().get(name) == null);, +                }, +            }, +        };, +    }, +, +	/**, +++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/result/ModelResultMatchers.java, + * Copyright 2002-2013 the original author or authors., +     * Assert the given model attributes do not exist, +     */, +    public ResultMatcher attributeDoesNotExist(final String... names) {, +        return new ResultMatcher() {, +            @Override, +            public void match(MvcResult result) throws Exception {, +                ModelAndView mav = getModelAndView(result);, +                for (String name : names) {, +                    assertTrue("Model attribute '" + name + "' exists", mav.getModel().get(name) == null);, +                }, +            }, +        };, +    }, +, +	/**, +++ b/spring-test-mvc/src/test/java/org/springframework/test/web/servlet/result/ModelResultMatchersTests.java, + * Copyright 2002-2013 the original author or authors., +    public void  attributeDoesNotExist() throws Exception {, +        this.matchers.attributeDoesNotExist("bad").match(this.mvcResult);, +    }, +, +    @Test(expected=AssertionError.class), +    public void attributeDoesNotExist_doesExist() throws Exception {, +        this.matchers.attributeDoesNotExist("good").match(this.mvcResultWithError);, +    }, +, +    @Test]