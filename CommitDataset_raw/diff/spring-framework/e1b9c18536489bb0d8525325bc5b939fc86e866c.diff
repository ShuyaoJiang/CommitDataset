[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, +import org.springframework.http.MediaType;, +import org.springframework.util.CollectionUtils;, + * <p>Additionally, this view resolver exposes the {@link #setDefaultViews(List) defaultViews} property, allowing you to, + * override the views provided by the view resolvers., + *, + * @author Jeremy Grelle, +	private List<View> defaultViews;, +, +	 * Sets the default views to use when a more specific view can not be obtained from the {@link ViewResolver} chain., +	 */, +	public void setDefaultViews(List<View> defaultViews) {, +		this.defaultViews = defaultViews;, +	}, +, +	/**, +		List<View> candidateViews = new ArrayList<View>();, +				candidateViews.add(view);, +			}, +		}, +		if (!CollectionUtils.isEmpty(defaultViews)) {, +			candidateViews.addAll(defaultViews);, +		}, +		for (View candidateView : candidateViews) {, +			MediaType viewMediaType = MediaType.parseMediaType(candidateView.getContentType());, +						views.put(requestedMediaType, candidateView);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, +import org.springframework.http.MediaType;, +import org.springframework.util.CollectionUtils;, + * <p>Additionally, this view resolver exposes the {@link #setDefaultViews(List) defaultViews} property, allowing you to, + * override the views provided by the view resolvers., + *, + * @author Jeremy Grelle, +	private List<View> defaultViews;, +, +	 * Sets the default views to use when a more specific view can not be obtained from the {@link ViewResolver} chain., +	 */, +	public void setDefaultViews(List<View> defaultViews) {, +		this.defaultViews = defaultViews;, +	}, +, +	/**, +		List<View> candidateViews = new ArrayList<View>();, +				candidateViews.add(view);, +			}, +		}, +		if (!CollectionUtils.isEmpty(defaultViews)) {, +			candidateViews.addAll(defaultViews);, +		}, +		for (View candidateView : candidateViews) {, +			MediaType viewMediaType = MediaType.parseMediaType(candidateView.getContentType());, +						views.put(requestedMediaType, candidateView);, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolverTests.java, +import java.util.HashMap;, +import java.util.Map;, +import static org.junit.Assert.*;, +import org.springframework.mock.web.MockHttpServletRequest;, +/**, + * @author Arjen Poutsma, + */, +	public void resolveViewNameAcceptHeaderDefaultView() throws Exception {, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/test");, +		request.addHeader("Accept", "application/json");, +		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request));, +, +		ViewResolver viewResolverMock1 = createMock(ViewResolver.class);, +		ViewResolver viewResolverMock2 = createMock(ViewResolver.class);, +		List<ViewResolver> viewResolverMocks = new ArrayList<ViewResolver>();, +		viewResolverMocks.add(viewResolverMock1);, +		viewResolverMocks.add(viewResolverMock2);, +		viewResolver.setViewResolvers(viewResolverMocks);, +, +		View viewMock1 = createMock("application_xml", View.class);, +		View viewMock2 = createMock("text_html", View.class);, +		View viewMock3 = createMock("application_json", View.class);, +, +		List<View> defaultViews = new ArrayList<View>();, +		defaultViews.add(viewMock3);, +		viewResolver.setDefaultViews(defaultViews);, +, +		String viewName = "view";, +		Locale locale = Locale.ENGLISH;, +, +		expect(viewResolverMock1.resolveViewName(viewName, locale)).andReturn(viewMock1);, +		expect(viewResolverMock2.resolveViewName(viewName, locale)).andReturn(viewMock2);, +		expect(viewMock1.getContentType()).andReturn("application/xml");, +		expect(viewMock2.getContentType()).andReturn("text/html;charset=ISO-8859-1");, +		expect(viewMock3.getContentType()).andReturn("application/json");, +, +		replay(viewResolverMock1, viewResolverMock2, viewMock1, viewMock2, viewMock3);, +, +		View result = viewResolver.resolveViewName(viewName, locale);, +		assertSame("Invalid view", viewMock3, result);, +, +		verify(viewResolverMock1, viewResolverMock2, viewMock1, viewMock2, viewMock3);, +	}, +, +	@Test, +	@Test, +	public void resolveViewNameFilenameDefaultView() throws Exception {]