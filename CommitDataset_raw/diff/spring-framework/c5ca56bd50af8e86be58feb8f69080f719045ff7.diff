[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java, +						return bytes.length + " bytes of content (unknown content-type).";, +					return bytes.length + " bytes of content.";, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java, +						return bytes.length + " bytes of content (unknown content-type).";, +					return bytes.length + " bytes of content.";, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/WiretapConnector.java, +			return new ExchangeResult(this.request, this.response, this.request.getRecorder().getContent(),, +					this.response.getRecorder().getContent(), timeout, uriTemplate);, +		private final DataBuffer buffer = bufferFactory.allocateBuffer();, +		private final MonoProcessor<byte[]> content = MonoProcessor.create();, +		private boolean hasContentConsumer;, +							.doOnSubscribe(s -> this.hasContentConsumer = true), +							.doOnNext(this.buffer::write), +							.doOnSubscribe(s -> this.hasContentConsumer = true), +							.map(p -> Flux.from(p).doOnNext(this.buffer::write).doOnError(this::handleOnError)), +			if (publisher == null && publisherNested == null) {, +				this.content.onComplete();, +			}, +			return Mono.defer(() -> {, +				if (!this.hasContentConsumer) {, +					// Couple of possible cases:, +					//  1. Mock server never consumed request body (e.g. error before read), +					//  2. FluxExchangeResult: getResponseBodyContent called before getResponseBody, +					//noinspection ConstantConditions, +				}, +			});]