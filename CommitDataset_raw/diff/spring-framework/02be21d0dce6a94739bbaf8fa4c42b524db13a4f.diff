[+++ b/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java, + * Copyright 2002-2019 the original author or authors., +		for (ApplicationListener<?> listener : getApplicationListeners(event, type)) {, +++ b/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java, + * Copyright 2002-2019 the original author or authors., +		for (ApplicationListener<?> listener : getApplicationListeners(event, type)) {, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, + * {@link org.springframework.beans.factory.config.BeanPostProcessor BeanPostProcessors},, + * for application events can be supplied as an "applicationEventMulticaster" bean, + * <p>Implements resource loading by extending, + * method is overridden in a subclass., +				eventType = ((PayloadApplicationEvent<?>) applicationEvent).getResolvableType();, +++ b/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java, + * Copyright 2002-2019 the original author or authors., +		for (ApplicationListener<?> listener : getApplicationListeners(event, type)) {, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, + * {@link org.springframework.beans.factory.config.BeanPostProcessor BeanPostProcessors},, + * for application events can be supplied as an "applicationEventMulticaster" bean, + * <p>Implements resource loading by extending, + * method is overridden in a subclass., +				eventType = ((PayloadApplicationEvent<?>) applicationEvent).getResolvableType();, +++ b/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java, + * Copyright 2002-2019 the original author or authors., +		@SuppressWarnings("resource"), +			assertNotEquals(event.content, Thread.currentThread().getName());, +			assertNotEquals(event.content, Thread.currentThread().getName());, +			assertNotEquals(event.content, Thread.currentThread().getName());, +++ b/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java, + * Copyright 2002-2019 the original author or authors., +		for (ApplicationListener<?> listener : getApplicationListeners(event, type)) {, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, + * {@link org.springframework.beans.factory.config.BeanPostProcessor BeanPostProcessors},, + * for application events can be supplied as an "applicationEventMulticaster" bean, + * <p>Implements resource loading by extending, + * method is overridden in a subclass., +				eventType = ((PayloadApplicationEvent<?>) applicationEvent).getResolvableType();, +++ b/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java, + * Copyright 2002-2019 the original author or authors., +		@SuppressWarnings("resource"), +			assertNotEquals(event.content, Thread.currentThread().getName());, +			assertNotEquals(event.content, Thread.currentThread().getName());, +			assertNotEquals(event.content, Thread.currentThread().getName());, +++ b/spring-web/src/main/java/org/springframework/web/filter/reactive/ForwardedHeaderFilter.java, + * Copyright 2002-2019 the original author or authors., + * "Forwarded" and "X-Forwarded-*" headers are only removed and not used., +++ b/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java, + * Copyright 2002-2019 the original author or authors., +		for (ApplicationListener<?> listener : getApplicationListeners(event, type)) {, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, + * {@link org.springframework.beans.factory.config.BeanPostProcessor BeanPostProcessors},, + * for application events can be supplied as an "applicationEventMulticaster" bean, + * <p>Implements resource loading by extending, + * method is overridden in a subclass., +				eventType = ((PayloadApplicationEvent<?>) applicationEvent).getResolvableType();, +++ b/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java, + * Copyright 2002-2019 the original author or authors., +		@SuppressWarnings("resource"), +			assertNotEquals(event.content, Thread.currentThread().getName());, +			assertNotEquals(event.content, Thread.currentThread().getName());, +			assertNotEquals(event.content, Thread.currentThread().getName());, +++ b/spring-web/src/main/java/org/springframework/web/filter/reactive/ForwardedHeaderFilter.java, + * Copyright 2002-2019 the original author or authors., + * "Forwarded" and "X-Forwarded-*" headers are only removed and not used., +++ b/spring-web/src/test/java/org/springframework/web/server/adapter/WebHttpHandlerBuilderTests.java, + * Copyright 2002-2019 the original author or authors., +	@SuppressWarnings("unused"), +		@SuppressWarnings("deprecation"), +		public WebFilter forwardedHeaderFilter() {, +			return new org.springframework.web.filter.reactive.ForwardedHeaderFilter();]