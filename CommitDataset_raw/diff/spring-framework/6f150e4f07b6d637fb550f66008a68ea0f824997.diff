[+++ b/build-spring-framework/resources/changelog.txt, +* add useTrailingSlashMatch property to RequestMappingHandlerMapping, +++ b/build-spring-framework/resources/changelog.txt, +* add useTrailingSlashMatch property to RequestMappingHandlerMapping, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/PatternsRequestCondition.java, +	private final boolean useTrailingSlashMatch;, +	, +		this(asList(patterns), null, null, true, true);, +	 * @param useTrailingSlashMatch whether to match irrespective of a trailing slash, +									boolean useSuffixPatternMatch,, +									boolean useTrailingSlashMatch) {, +		this(asList(patterns), urlPathHelper, pathMatcher, useSuffixPatternMatch, useTrailingSlashMatch);, +									 boolean useSuffixPatternMatch,, +									 boolean useTrailingSlashMatch) {, +		this.useTrailingSlashMatch = useTrailingSlashMatch;, +		return this.patterns;, +		return this.patterns;, +					result.add(this.pathMatcher.combine(pattern1, pattern2));, +		return new PatternsRequestCondition(result, this.urlPathHelper, this.pathMatcher, this.useSuffixPatternMatch,, +				this.useTrailingSlashMatch);, +		if (this.patterns.isEmpty()) {, +		String lookupPath = this.urlPathHelper.getLookupPathForRequest(request);, +		Collections.sort(matches, this.pathMatcher.getPatternComparator(lookupPath));, +			new PatternsRequestCondition(matches, this.urlPathHelper, this.pathMatcher, this.useSuffixPatternMatch,, +					this.useTrailingSlashMatch);, +		if (this.useSuffixPatternMatch) {, +			if (!hasSuffix && this.pathMatcher.match(pattern + ".*", lookupPath)) {, +		if (this.pathMatcher.match(pattern, lookupPath)) {, +		if (this.useTrailingSlashMatch) {, +			if (!endsWithSlash && this.pathMatcher.match(pattern + "/", lookupPath)) {, +		}, +		String lookupPath = this.urlPathHelper.getLookupPathForRequest(request);, +		Comparator<String> patternComparator = this.pathMatcher.getPatternComparator(lookupPath);, +++ b/build-spring-framework/resources/changelog.txt, +* add useTrailingSlashMatch property to RequestMappingHandlerMapping, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/PatternsRequestCondition.java, +	private final boolean useTrailingSlashMatch;, +	, +		this(asList(patterns), null, null, true, true);, +	 * @param useTrailingSlashMatch whether to match irrespective of a trailing slash, +									boolean useSuffixPatternMatch,, +									boolean useTrailingSlashMatch) {, +		this(asList(patterns), urlPathHelper, pathMatcher, useSuffixPatternMatch, useTrailingSlashMatch);, +									 boolean useSuffixPatternMatch,, +									 boolean useTrailingSlashMatch) {, +		this.useTrailingSlashMatch = useTrailingSlashMatch;, +		return this.patterns;, +		return this.patterns;, +					result.add(this.pathMatcher.combine(pattern1, pattern2));, +		return new PatternsRequestCondition(result, this.urlPathHelper, this.pathMatcher, this.useSuffixPatternMatch,, +				this.useTrailingSlashMatch);, +		if (this.patterns.isEmpty()) {, +		String lookupPath = this.urlPathHelper.getLookupPathForRequest(request);, +		Collections.sort(matches, this.pathMatcher.getPatternComparator(lookupPath));, +			new PatternsRequestCondition(matches, this.urlPathHelper, this.pathMatcher, this.useSuffixPatternMatch,, +					this.useTrailingSlashMatch);, +		if (this.useSuffixPatternMatch) {, +			if (!hasSuffix && this.pathMatcher.match(pattern + ".*", lookupPath)) {, +		if (this.pathMatcher.match(pattern, lookupPath)) {, +		if (this.useTrailingSlashMatch) {, +			if (!endsWithSlash && this.pathMatcher.match(pattern + "/", lookupPath)) {, +		}, +		String lookupPath = this.urlPathHelper.getLookupPathForRequest(request);, +		Comparator<String> patternComparator = this.pathMatcher.getPatternComparator(lookupPath);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +	private boolean useTrailingSlashMatch = true;, +	, +	 * requests. If enabled a method mapped to "/users" also matches to "/users.*"., +	 * <p>The default value is {@code true}. , +	 * Whether to match to URLs irrespective of the presence of a trailing slash., +	 * If enabled a method mapped to "/users" also matches to "/users/"., +	 * <p>The default value is {@code true}., +	 */, +	public void setUseTrailingSlashMatch(boolean useTrailingSlashMatch) {, +		this.useTrailingSlashMatch = useTrailingSlashMatch;, +	}, +, +	/**, +	/**, +	 * Whether to match to URLs irrespective of the presence of a trailing  slash., +	 */, +	public boolean useTrailingSlashMatch() {, +		return this.useTrailingSlashMatch;, +	}, +						getUrlPathHelper(), getPathMatcher(), this.useSuffixPatternMatch, this.useTrailingSlashMatch),, +++ b/build-spring-framework/resources/changelog.txt, +* add useTrailingSlashMatch property to RequestMappingHandlerMapping, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/condition/PatternsRequestCondition.java, +	private final boolean useTrailingSlashMatch;, +	, +		this(asList(patterns), null, null, true, true);, +	 * @param useTrailingSlashMatch whether to match irrespective of a trailing slash, +									boolean useSuffixPatternMatch,, +									boolean useTrailingSlashMatch) {, +		this(asList(patterns), urlPathHelper, pathMatcher, useSuffixPatternMatch, useTrailingSlashMatch);, +									 boolean useSuffixPatternMatch,, +									 boolean useTrailingSlashMatch) {, +		this.useTrailingSlashMatch = useTrailingSlashMatch;, +		return this.patterns;, +		return this.patterns;]