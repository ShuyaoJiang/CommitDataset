[+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +	public static final ResolvableType NONE = new ResolvableType(null, null, null, 0);, +	private final Integer hash;, +, +	 * Private constructor used to create a new {@link ResolvableType} for cache key purposes,, +	 * with no upfront resolution., +		this.hash = calculateHashCode();, +	 * Private constructor used to create a new {@link ResolvableType} for cache value purposes,, +	 * with upfront resolution and a pre-calculated hash., +	 * @since 4.2, +	 */, +	private ResolvableType(Type type, TypeProvider typeProvider, VariableResolver variableResolver, Integer hash) {, +		this.type = type;, +		this.typeProvider = typeProvider;, +		this.variableResolver = variableResolver;, +		this.componentType = null;, +		this.resolved = resolveClass();, +		this.hash = hash;, +	}, +, +	/**, +	 * Private constructor used to create a new {@link ResolvableType} for uncached purposes,, +	 * with upfront resolution but lazily calculated hash., +		this.hash = null;, +		this.hash = null;, +			this.superType = forType(SerializableTypeWrapper.forGenericSuperclass(resolved), asVariableResolver());, +			this.interfaces = forTypes(SerializableTypeWrapper.forGenericInterfaces(resolved), asVariableResolver());, +, +		if (!ObjectUtils.nullSafeEquals(this.type, otherType.type)) {, +			return false;, +		}, +		if (this.typeProvider != otherType.typeProvider &&, +				(this.typeProvider == null || otherType.typeProvider == null ||, +				!ObjectUtils.nullSafeEquals(this.typeProvider.getSource(), otherType.typeProvider.getSource()))) {, +			return false;, +		}, +		if (this.variableResolver != otherType.variableResolver &&, +				(this.variableResolver == null || otherType.variableResolver == null ||, +				!ObjectUtils.nullSafeEquals(this.variableResolver.getSource(), otherType.variableResolver.getSource()))) {, +			return false;, +		}, +		if (!ObjectUtils.nullSafeEquals(this.componentType, otherType.componentType)) {, +			return false;, +		}, +		return true;, +		return (this.hash != null ? this.hash : calculateHashCode());, +	}, +, +	private int calculateHashCode() {, +		if (this.typeProvider != null) {, +			hashCode = 31 * hashCode + ObjectUtils.nullSafeHashCode(this.typeProvider.getSource());, +			hashCode = 31 * hashCode + ObjectUtils.nullSafeHashCode(this.variableResolver.getSource());, +		}, +		if (this.componentType != null) {, +			hashCode = 31 * hashCode + ObjectUtils.nullSafeHashCode(this.componentType);, +			return new ResolvableType(type, typeProvider, variableResolver, (ResolvableType) null);, +			resolvableType = new ResolvableType(type, typeProvider, variableResolver, key.hash);, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +	public static final ResolvableType NONE = new ResolvableType(null, null, null, 0);, +	private final Integer hash;, +, +	 * Private constructor used to create a new {@link ResolvableType} for cache key purposes,, +	 * with no upfront resolution., +		this.hash = calculateHashCode();, +	 * Private constructor used to create a new {@link ResolvableType} for cache value purposes,, +	 * with upfront resolution and a pre-calculated hash., +	 * @since 4.2, +	 */, +	private ResolvableType(Type type, TypeProvider typeProvider, VariableResolver variableResolver, Integer hash) {, +		this.type = type;, +		this.typeProvider = typeProvider;, +		this.variableResolver = variableResolver;, +		this.componentType = null;, +		this.resolved = resolveClass();, +		this.hash = hash;, +	}, +, +	/**, +	 * Private constructor used to create a new {@link ResolvableType} for uncached purposes,, +	 * with upfront resolution but lazily calculated hash., +		this.hash = null;, +		this.hash = null;, +			this.superType = forType(SerializableTypeWrapper.forGenericSuperclass(resolved), asVariableResolver());, +			this.interfaces = forTypes(SerializableTypeWrapper.forGenericInterfaces(resolved), asVariableResolver());, +, +		if (!ObjectUtils.nullSafeEquals(this.type, otherType.type)) {, +			return false;, +		}, +		if (this.typeProvider != otherType.typeProvider &&, +				(this.typeProvider == null || otherType.typeProvider == null ||, +				!ObjectUtils.nullSafeEquals(this.typeProvider.getSource(), otherType.typeProvider.getSource()))) {, +			return false;, +		}, +		if (this.variableResolver != otherType.variableResolver &&, +				(this.variableResolver == null || otherType.variableResolver == null ||, +				!ObjectUtils.nullSafeEquals(this.variableResolver.getSource(), otherType.variableResolver.getSource()))) {, +			return false;, +		}, +		if (!ObjectUtils.nullSafeEquals(this.componentType, otherType.componentType)) {, +			return false;]