[+++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java, +	private Map<Class<?>, Formatter<?>> annotationFormatters = new HashMap<Class<?>, Formatter<?>>();, +	public void addAnnotationBasedFormatter(Formatter<?> formatter,, +			Class<?> propertyAnnotationClass) {, +		annotationFormatters.put(propertyAnnotationClass, formatter);, +						formatter = annotationFormatters.get(a.annotationType());, +			try {, +				return property.getValueTypeDescriptor(, +						createEvaluationContext()).getAnnotations();, +			} catch (EvaluationException e) {, +				throw new IllegalStateException(e);, +			}, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java, +	private Map<Class<?>, Formatter<?>> annotationFormatters = new HashMap<Class<?>, Formatter<?>>();, +	public void addAnnotationBasedFormatter(Formatter<?> formatter,, +			Class<?> propertyAnnotationClass) {, +		annotationFormatters.put(propertyAnnotationClass, formatter);, +						formatter = annotationFormatters.get(a.annotationType());, +			try {, +				return property.getValueTypeDescriptor(, +						createEvaluationContext()).getAnnotations();, +			} catch (EvaluationException e) {, +				throw new IllegalStateException(e);, +			}, +++ b/org.springframework.context/src/test/java/org/springframework/ui/binding/BinderTests.java, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +		binder.addAnnotationBasedFormatter(new CurrencyFormatter(), Currency.class);, +	@Retention(RetentionPolicy.RUNTIME)]