[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/AbstractAdvisingBeanPostProcessor.java, +	protected boolean beforeExistingAdvisors = false;, +, +	/**, +	 * Set whether this post-processor's advisor is supposed to apply before, +	 * existing advisors when encountering a pre-advised object., +	 * <p>Default is "false", applying the advisor after existing advisors, i.e., +	 * as close as possible to the target method. Switch this to "true" in order, +	 * for this post-processor's advisor to wrap existing advisors as well., +	 * <p>Note: Check the concrete post-processor's javadoc whether it possibly, +	 * changes this flag by default, depending on the nature of its advisor., +	 */, +	public void setBeforeExistingAdvisors(boolean beforeExistingAdvisors) {, +		this.beforeExistingAdvisors = beforeExistingAdvisors;, +	}, +, +				Advised advised = (Advised) bean;, +				if (this.beforeExistingAdvisors) {, +					advised.addAdvisor(0, this.advisor);, +				}, +				else {, +					advised.addAdvisor(this.advisor);, +				}, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/AbstractAdvisingBeanPostProcessor.java, +	protected boolean beforeExistingAdvisors = false;, +, +	/**, +	 * Set whether this post-processor's advisor is supposed to apply before, +	 * existing advisors when encountering a pre-advised object., +	 * <p>Default is "false", applying the advisor after existing advisors, i.e., +	 * as close as possible to the target method. Switch this to "true" in order, +	 * for this post-processor's advisor to wrap existing advisors as well., +	 * <p>Note: Check the concrete post-processor's javadoc whether it possibly, +	 * changes this flag by default, depending on the nature of its advisor., +	 */, +	public void setBeforeExistingAdvisors(boolean beforeExistingAdvisors) {, +		this.beforeExistingAdvisors = beforeExistingAdvisors;, +	}, +, +				Advised advised = (Advised) bean;, +				if (this.beforeExistingAdvisors) {, +					advised.addAdvisor(0, this.advisor);, +				}, +				else {, +					advised.addAdvisor(this.advisor);, +				}, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/AsyncAnnotationBeanPostProcessor.java, + * Copyright 2002-2013 the original author or authors., + * <p>Note: The underlying async advisor applies before existing advisors by default,, + * in order to switch to async execution as early as possible in the invocation chain., + *, + * @see #setBeforeExistingAdvisors, +	public AsyncAnnotationBeanPostProcessor() {, +		setBeforeExistingAdvisors(true);, +	}, +]