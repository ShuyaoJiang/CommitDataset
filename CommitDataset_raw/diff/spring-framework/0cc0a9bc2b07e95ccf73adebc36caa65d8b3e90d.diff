[+++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/AbstractListenerContainerParser.java, + * Copyright 2002-2010 the original author or authors., +++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/AbstractListenerContainerParser.java, + * Copyright 2002-2010 the original author or authors., +++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/JcaListenerContainerParser.java, + * Copyright 2002-2010 the original author or authors., +import org.w3c.dom.Element;, +, +			String resourceAdapterBeanName = containerEle.getAttribute(RESOURCE_ADAPTER_ATTRIBUTE);, +		String concurrency = containerEle.getAttribute(CONCURRENCY_ATTRIBUTE);, +		if (StringUtils.hasText(concurrency)) {, +			configDef.getPropertyValues().add("concurrency", concurrency);, +		String phase = containerEle.getAttribute(PHASE_ATTRIBUTE);, +		if (StringUtils.hasText(phase)) {, +			containerDef.getPropertyValues().add("phase", phase);, +		}, +, +++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/AbstractListenerContainerParser.java, + * Copyright 2002-2010 the original author or authors., +++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/JcaListenerContainerParser.java, + * Copyright 2002-2010 the original author or authors., +import org.w3c.dom.Element;, +, +			String resourceAdapterBeanName = containerEle.getAttribute(RESOURCE_ADAPTER_ATTRIBUTE);, +		String concurrency = containerEle.getAttribute(CONCURRENCY_ATTRIBUTE);, +		if (StringUtils.hasText(concurrency)) {, +			configDef.getPropertyValues().add("concurrency", concurrency);, +		String phase = containerEle.getAttribute(PHASE_ATTRIBUTE);, +		if (StringUtils.hasText(phase)) {, +			containerDef.getPropertyValues().add("phase", phase);, +		}, +, +++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/JmsListenerContainerParser.java, + * Copyright 2002-2010 the original author or authors., +import org.w3c.dom.Element;, +, +		String concurrency = containerEle.getAttribute(CONCURRENCY_ATTRIBUTE);, +		if (StringUtils.hasText(concurrency)) {, +			containerDef.getPropertyValues().add("concurrency", concurrency);, +		String phase = containerEle.getAttribute(PHASE_ATTRIBUTE);, +		if (StringUtils.hasText(phase)) {, +			containerDef.getPropertyValues().add("phase", phase);, +		}, +, +++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/AbstractListenerContainerParser.java, + * Copyright 2002-2010 the original author or authors., +++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/JcaListenerContainerParser.java, + * Copyright 2002-2010 the original author or authors., +import org.w3c.dom.Element;, +, +			String resourceAdapterBeanName = containerEle.getAttribute(RESOURCE_ADAPTER_ATTRIBUTE);, +		String concurrency = containerEle.getAttribute(CONCURRENCY_ATTRIBUTE);, +		if (StringUtils.hasText(concurrency)) {, +			configDef.getPropertyValues().add("concurrency", concurrency);, +		String phase = containerEle.getAttribute(PHASE_ATTRIBUTE);, +		if (StringUtils.hasText(phase)) {, +			containerDef.getPropertyValues().add("phase", phase);, +		}, +, +++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/JmsListenerContainerParser.java, + * Copyright 2002-2010 the original author or authors., +import org.w3c.dom.Element;, +, +		String concurrency = containerEle.getAttribute(CONCURRENCY_ATTRIBUTE);, +		if (StringUtils.hasText(concurrency)) {, +			containerDef.getPropertyValues().add("concurrency", concurrency);, +		String phase = containerEle.getAttribute(PHASE_ATTRIBUTE);, +		if (StringUtils.hasText(phase)) {, +			containerDef.getPropertyValues().add("phase", phase);, +		}, +, +++ b/org.springframework.jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java, + * Copyright 2002-2010 the original author or authors., +	 * Specify concurrency limits via a "lower-upper" String, e.g. "5-10", or a simple, +	 * upper limit String, e.g. "10" (the lower limit will be 1 in this case)., +	 * <p>This listener container will always hold on to the minimum number of consumers, +	 * ({@link #setConcurrentConsumers}) and will slowly scale up to the maximum number, +	 * of consumers {@link #setMaxConcurrentConsumers} in case of increasing load., +	 */, +	public void setConcurrency(String concurrency) {, +		try {, +			int separatorIndex = concurrency.indexOf('-');, +			if (separatorIndex != -1) {, +				setConcurrentConsumers(Integer.parseInt(concurrency.substring(0, separatorIndex)));, +				setMaxConcurrentConsumers(Integer.parseInt(concurrency.substring(separatorIndex + 1, concurrency.length())));, +			}, +			else {, +				setConcurrentConsumers(1);, +				setMaxConcurrentConsumers(Integer.parseInt(concurrency));, +			}, +		}, +		catch (NumberFormatException ex) {, +			throw new IllegalArgumentException("Invalid concurrency value [" + concurrency + "]: only " +, +					"single maximum integer (e.g. \"5\") and minimum-maximum combo (e.g. \"3-5\") supported.");, +		}, +	}, +, +	/**, +++ b/org.springframework.jms/src/main/java/org/springframework/jms/config/AbstractListenerContainerParser.java, + * Copyright 2002-2010 the original author or authors.]