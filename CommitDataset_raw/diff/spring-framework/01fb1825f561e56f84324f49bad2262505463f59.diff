[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanUtils.java, +		return cr.getPropertyDescriptors();, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanUtils.java, +		return cr.getPropertyDescriptors();, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +		return getCachedIntrospectionResults().getPropertyDescriptors();, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanUtils.java, +		return cr.getPropertyDescriptors();, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +		return getCachedIntrospectionResults().getPropertyDescriptors();, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +import java.util.Collection;, +	PropertyDescriptor[] getPropertyDescriptors() {, +		Collection<PropertyDescriptor> descriptorCollection = this.propertyDescriptorCache.values();, +		return descriptorCollection.toArray(new PropertyDescriptor[descriptorCollection.size()]);, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanUtils.java, +		return cr.getPropertyDescriptors();, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +		return getCachedIntrospectionResults().getPropertyDescriptors();, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +import java.util.Collection;, +	PropertyDescriptor[] getPropertyDescriptors() {, +		Collection<PropertyDescriptor> descriptorCollection = this.propertyDescriptorCache.values();, +		return descriptorCollection.toArray(new PropertyDescriptor[descriptorCollection.size()]);, +	}, +, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/BeanUtilsTests.java, +	@Test, +    public void testSPR6063() {, +        PropertyDescriptor[] descrs = BeanUtils.getPropertyDescriptors(Bean.class);, +, +        PropertyDescriptor keyDescr = BeanUtils.getPropertyDescriptor(Bean.class, "value");, +        assertEquals(String.class, keyDescr.getPropertyType());, +        for (PropertyDescriptor propertyDescriptor : descrs) {, +            if (propertyDescriptor.getName().equals(keyDescr.getName())) {, +                assertEquals(propertyDescriptor.getName() + " has unexpected type", keyDescr.getPropertyType(), propertyDescriptor.getPropertyType());, +            }, +        }, +    }, +, +	private interface MapEntry<K, V> {, +, +		K getKey();, +, +		void setKey(V value);, +, +		V getValue();, +, +		void setValue(V value);, +	}, +, +	private static class Bean implements MapEntry<String, String> {, +, +		private String key;, +, +		private String value;, +, +		public String getKey() {, +			return key;, +		}, +, +		public void setKey(String aKey) {, +			key = aKey;, +		}, +, +		public String getValue() {, +			return value;, +		}, +, +		public void setValue(String aValue) {, +			value = aValue;, +		}, +	}, +]