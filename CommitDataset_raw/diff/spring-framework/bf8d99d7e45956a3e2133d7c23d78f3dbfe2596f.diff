[+++ b/build.gradle, +	ext.undertowVersion      = "1.1.0.Final", +			exclude group: "org.jboss.spec.javax.websocket", module: "jboss-websocket-api_1.0_spec", +++ b/build.gradle, +	ext.undertowVersion      = "1.1.0.Final", +			exclude group: "org.jboss.spec.javax.websocket", module: "jboss-websocket-api_1.0_spec", +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java, +import java.util.HashSet;, +			List<Method> methods = new ArrayList<Method>(Arrays.asList(getMethods(type, targetObject)));, +	private Method[] getMethods(Class<?> type, Object targetObject) {, +			Set<Method> methods = new HashSet<Method>();, +			methods.addAll(Arrays.asList(getMethods(type)));, +			methods.addAll(Arrays.asList(getMethods(targetObject.getClass())));, +			return methods.toArray(new Method[methods.size()]);, +		return getMethods(type);, +++ b/build.gradle, +	ext.undertowVersion      = "1.1.0.Final", +			exclude group: "org.jboss.spec.javax.websocket", module: "jboss-websocket-api_1.0_spec", +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java, +import java.util.HashSet;, +			List<Method> methods = new ArrayList<Method>(Arrays.asList(getMethods(type, targetObject)));, +	private Method[] getMethods(Class<?> type, Object targetObject) {, +			Set<Method> methods = new HashSet<Method>();, +			methods.addAll(Arrays.asList(getMethods(type)));, +			methods.addAll(Arrays.asList(getMethods(targetObject.getClass())));, +			return methods.toArray(new Method[methods.size()]);, +		return getMethods(type);, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java, +			return new Class[] { ContextObject.class };, +							Integer.class.getDeclaredMethod("parseInt", new Class[] { String.class, Integer.TYPE }) };, +++ b/build.gradle, +	ext.undertowVersion      = "1.1.0.Final", +			exclude group: "org.jboss.spec.javax.websocket", module: "jboss-websocket-api_1.0_spec", +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java, +import java.util.HashSet;, +			List<Method> methods = new ArrayList<Method>(Arrays.asList(getMethods(type, targetObject)));, +	private Method[] getMethods(Class<?> type, Object targetObject) {, +			Set<Method> methods = new HashSet<Method>();, +			methods.addAll(Arrays.asList(getMethods(type)));, +			methods.addAll(Arrays.asList(getMethods(targetObject.getClass())));, +			return methods.toArray(new Method[methods.size()]);, +		return getMethods(type);, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java, +			return new Class[] { ContextObject.class };, +							Integer.class.getDeclaredMethod("parseInt", new Class[] { String.class, Integer.TYPE }) };, +++ b/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverter.java, +			final OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputMessage.getBody(), charset);, +			HtmlFormat.print(message, outputStreamWriter);, +			outputStreamWriter.flush();, +			final OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputMessage.getBody(), charset);, +			JsonFormat.print(message, outputStreamWriter);, +			outputStreamWriter.flush();, +			final OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputMessage.getBody(), charset);, +			TextFormat.print(message, outputStreamWriter);, +			outputStreamWriter.flush();, +			final OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputMessage.getBody(), charset);, +			XmlFormat.print(message, outputStreamWriter);, +			outputStreamWriter.flush();, +++ b/build.gradle, +	ext.undertowVersion      = "1.1.0.Final", +			exclude group: "org.jboss.spec.javax.websocket", module: "jboss-websocket-api_1.0_spec", +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java, +import java.util.HashSet;, +			List<Method> methods = new ArrayList<Method>(Arrays.asList(getMethods(type, targetObject)));, +	private Method[] getMethods(Class<?> type, Object targetObject) {, +			Set<Method> methods = new HashSet<Method>();, +			methods.addAll(Arrays.asList(getMethods(type)));, +			methods.addAll(Arrays.asList(getMethods(targetObject.getClass())));, +			return methods.toArray(new Method[methods.size()]);, +		return getMethods(type);, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java, +			return new Class[] { ContextObject.class };, +							Integer.class.getDeclaredMethod("parseInt", new Class[] { String.class, Integer.TYPE }) };, +++ b/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverter.java, +			final OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputMessage.getBody(), charset);, +			HtmlFormat.print(message, outputStreamWriter);, +			outputStreamWriter.flush();, +			final OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputMessage.getBody(), charset);, +			JsonFormat.print(message, outputStreamWriter);, +			outputStreamWriter.flush();, +			final OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputMessage.getBody(), charset);, +			TextFormat.print(message, outputStreamWriter);, +			outputStreamWriter.flush();, +			final OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputMessage.getBody(), charset);, +			XmlFormat.print(message, outputStreamWriter);, +			outputStreamWriter.flush();, +++ b/spring-web/src/main/java/org/springframework/web/method/ControllerAdviceBean.java, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, + * <p>The {@link #findAnnotatedBeans(ApplicationContext)} method can be used to discover, + * such beans. However, an {@code ControllerAdviceBean} may be created from, + * any object, including ones without an {@code @ControllerAdvice}., +	private static final Log logger = LogFactory.getLog(ControllerAdviceBean.class);, +	private final Object bean;, +	private final BeanFactory beanFactory;, +	private final List<Package> basePackages = new ArrayList<Package>();, +	private final List<Class<? extends Annotation>> annotations = new ArrayList<Class<? extends Annotation>>();, +, +	private final List<Class<?>> assignableTypes = new ArrayList<Class<?>>();]