[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java, +import java.io.FileNotFoundException;, +		try {, +				catch (Throwable ex) {, +					// ignore, see SPR-12999, +		catch (FileNotFoundException ex) {, +			// ignore, see SPR-12999, +		}, +	}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java, +import java.io.FileNotFoundException;, +		try {, +				catch (Throwable ex) {, +					// ignore, see SPR-12999, +		catch (FileNotFoundException ex) {, +			// ignore, see SPR-12999, +		}, +	}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.java, +import static org.mockito.BDDMockito.given;, +import static org.mockito.Mockito.*;, +import java.io.FileNotFoundException;, +import java.io.InputStream;, +		paths.add(new ClassPathResource("META-INF/resources/webjars/"));, +		assertEquals(3, locations.length);, +		assertEquals("META-INF/resources/webjars/", ((ClassPathResource) locations[2]).getPath());, +	public void directoryInJarFile() throws Exception {, +		this.request.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, "underscorejs/");, +		this.handler.handleRequest(this.request, this.response);, +		assertEquals(200, this.response.getStatus());, +		assertEquals(0, this.response.getContentLength());, +	}, +, +	@Test, +	// SPR-12999, +	@Test, +	public void writeContentNotGettingInputStream() throws Exception {, +		Resource resource = mock(Resource.class);, +		given(resource.getInputStream()).willThrow(FileNotFoundException.class);, +, +		this.handler.writeContent(this.response, resource);, +, +		assertEquals(200, this.response.getStatus());, +		assertEquals(0, this.response.getContentLength());, +	}, +, +	// SPR-12999, +	@Test, +	public void writeContentNotClosingInputStream() throws Exception {, +		Resource resource = mock(Resource.class);, +		InputStream inputStream = mock(InputStream.class);, +		given(resource.getInputStream()).willReturn(inputStream);, +		given(inputStream.read(any())).willReturn(-1);, +		doThrow(new NullPointerException()).when(inputStream).close();, +, +		this.handler.writeContent(this.response, resource);, +, +		assertEquals(200, this.response.getStatus());, +		assertEquals(0, this.response.getContentLength());, +	}, +]