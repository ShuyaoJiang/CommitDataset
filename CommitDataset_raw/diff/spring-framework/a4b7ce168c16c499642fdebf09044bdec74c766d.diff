[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java, +		TypedValue indexValue =  null;, +		Object index = null;, +		, +		// This first part of the if clause prevents a 'double dereference' of the property (SPR-5847), +		if (targetObject instanceof Map && (children[0] instanceof PropertyOrFieldReference)) {, +			PropertyOrFieldReference reference = (PropertyOrFieldReference)children[0];, +			index = reference.getName();, +			indexValue = new TypedValue(index,CommonTypeDescriptors.STRING_TYPE_DESCRIPTOR);, +		} else {, +			indexValue = children[0].getValueInternal(state);, +			index = indexValue.getValue();, +		}, +			Object possiblyConvertedKey = index;, +			if (targetObjectTypeDescriptor.isMapEntryTypeKnown()) {, +				possiblyConvertedKey = state.convertValue(index,TypeDescriptor.valueOf(targetObjectTypeDescriptor.getMapKeyType()));, +			}, +			TypeDescriptor resultDescriptor = targetObjectTypeDescriptor.isMapEntryTypeKnown()?, +					TypeDescriptor.valueOf(targetObjectTypeDescriptor.getMapValueType()):CommonTypeDescriptors.OBJECT_TYPE_DESCRIPTOR;, +			return new TypedValue(o,resultDescriptor);, +			Object possiblyConvertedKey = index;, +			Object possiblyConvertedValue = newValue;, +			if (targetObjectTypeDescriptor.isMapEntryTypeKnown()) {, +			  possiblyConvertedKey = state.convertValue(index.getValue(),TypeDescriptor.valueOf(targetObjectTypeDescriptor.getMapKeyType()));, +			  possiblyConvertedValue = state.convertValue(newValue,TypeDescriptor.valueOf(targetObjectTypeDescriptor.getMapValueType()));, +			}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java, +		TypedValue indexValue =  null;, +		Object index = null;, +		, +		// This first part of the if clause prevents a 'double dereference' of the property (SPR-5847), +		if (targetObject instanceof Map && (children[0] instanceof PropertyOrFieldReference)) {, +			PropertyOrFieldReference reference = (PropertyOrFieldReference)children[0];, +			index = reference.getName();, +			indexValue = new TypedValue(index,CommonTypeDescriptors.STRING_TYPE_DESCRIPTOR);, +		} else {, +			indexValue = children[0].getValueInternal(state);, +			index = indexValue.getValue();, +		}, +			Object possiblyConvertedKey = index;, +			if (targetObjectTypeDescriptor.isMapEntryTypeKnown()) {, +				possiblyConvertedKey = state.convertValue(index,TypeDescriptor.valueOf(targetObjectTypeDescriptor.getMapKeyType()));, +			}, +			TypeDescriptor resultDescriptor = targetObjectTypeDescriptor.isMapEntryTypeKnown()?, +					TypeDescriptor.valueOf(targetObjectTypeDescriptor.getMapValueType()):CommonTypeDescriptors.OBJECT_TYPE_DESCRIPTOR;, +			return new TypedValue(o,resultDescriptor);, +			Object possiblyConvertedKey = index;, +			Object possiblyConvertedValue = newValue;, +			if (targetObjectTypeDescriptor.isMapEntryTypeKnown()) {, +			  possiblyConvertedKey = state.convertValue(index.getValue(),TypeDescriptor.valueOf(targetObjectTypeDescriptor.getMapKeyType()));, +			  possiblyConvertedValue = state.convertValue(newValue,TypeDescriptor.valueOf(targetObjectTypeDescriptor.getMapValueType()));, +			}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/PropertyOrFieldReference.java, +import java.util.Map;, +import org.springframework.expression.EvaluationException;, +	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {, +	private TypedValue readProperty(ExpressionState state, String name) throws EvaluationException {, +		Object targetObject = contextObject.getValue();, +		if (targetObject == null && nullSafe) {, +	String getName() {, +		return name;, +	}, +, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java, +		TypedValue indexValue =  null;, +		Object index = null;, +		, +		// This first part of the if clause prevents a 'double dereference' of the property (SPR-5847), +		if (targetObject instanceof Map && (children[0] instanceof PropertyOrFieldReference)) {, +			PropertyOrFieldReference reference = (PropertyOrFieldReference)children[0];, +			index = reference.getName();, +			indexValue = new TypedValue(index,CommonTypeDescriptors.STRING_TYPE_DESCRIPTOR);, +		} else {, +			indexValue = children[0].getValueInternal(state);, +			index = indexValue.getValue();, +		}, +			Object possiblyConvertedKey = index;, +			if (targetObjectTypeDescriptor.isMapEntryTypeKnown()) {, +				possiblyConvertedKey = state.convertValue(index,TypeDescriptor.valueOf(targetObjectTypeDescriptor.getMapKeyType()));, +			}, +			TypeDescriptor resultDescriptor = targetObjectTypeDescriptor.isMapEntryTypeKnown()?, +					TypeDescriptor.valueOf(targetObjectTypeDescriptor.getMapValueType()):CommonTypeDescriptors.OBJECT_TYPE_DESCRIPTOR;, +			return new TypedValue(o,resultDescriptor);, +			Object possiblyConvertedKey = index;, +			Object possiblyConvertedValue = newValue;, +			if (targetObjectTypeDescriptor.isMapEntryTypeKnown()) {, +			  possiblyConvertedKey = state.convertValue(index.getValue(),TypeDescriptor.valueOf(targetObjectTypeDescriptor.getMapKeyType()));, +			  possiblyConvertedValue = state.convertValue(newValue,TypeDescriptor.valueOf(targetObjectTypeDescriptor.getMapValueType()));, +			}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/PropertyOrFieldReference.java, +import java.util.Map;, +import org.springframework.expression.EvaluationException;, +	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {, +	private TypedValue readProperty(ExpressionState state, String name) throws EvaluationException {, +		Object targetObject = contextObject.getValue();, +		if (targetObject == null && nullSafe) {, +	String getName() {, +		return name;, +	}, +]