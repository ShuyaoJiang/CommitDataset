[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/PropertyAccessException.java, + * Copyright 2002-2009 the original author or authors., +	 * <p>May be <code>null</code>; only available if an actual bean property, +	/**, +	 * Return the name of the affected property, if available., +	 */, +	public String getPropertyName() {, +		return (this.propertyChangeEvent != null ? this.propertyChangeEvent.getPropertyName() : null);, +	}, +, +	/**, +	 * Return the affected value that was about to be set, if any., +	 */, +	public Object getValue() {, +		return (this.propertyChangeEvent != null ? this.propertyChangeEvent.getNewValue() : null);, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/PropertyAccessException.java, + * Copyright 2002-2009 the original author or authors., +	 * <p>May be <code>null</code>; only available if an actual bean property, +	/**, +	 * Return the name of the affected property, if available., +	 */, +	public String getPropertyName() {, +		return (this.propertyChangeEvent != null ? this.propertyChangeEvent.getPropertyName() : null);, +	}, +, +	/**, +	 * Return the affected value that was about to be set, if any., +	 */, +	public Object getValue() {, +		return (this.propertyChangeEvent != null ? this.propertyChangeEvent.getNewValue() : null);, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/PropertyBatchUpdateException.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.util.ObjectUtils;, +	 * <p>Will return the empty array (not <code>null</code>) if there were no errors., +	 * Return the exception for this field, or <code>null</code> if there isn't any., +		for (PropertyAccessException pae : this.propertyAccessExceptions) {, +			if (ObjectUtils.nullSafeEquals(propertyName, pae.getPropertyName())) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/PropertyAccessException.java, + * Copyright 2002-2009 the original author or authors., +	 * <p>May be <code>null</code>; only available if an actual bean property, +	/**, +	 * Return the name of the affected property, if available., +	 */, +	public String getPropertyName() {, +		return (this.propertyChangeEvent != null ? this.propertyChangeEvent.getPropertyName() : null);, +	}, +, +	/**, +	 * Return the affected value that was about to be set, if any., +	 */, +	public Object getValue() {, +		return (this.propertyChangeEvent != null ? this.propertyChangeEvent.getNewValue() : null);, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/PropertyBatchUpdateException.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.util.ObjectUtils;, +	 * <p>Will return the empty array (not <code>null</code>) if there were no errors., +	 * Return the exception for this field, or <code>null</code> if there isn't any., +		for (PropertyAccessException pae : this.propertyAccessExceptions) {, +			if (ObjectUtils.nullSafeEquals(propertyName, pae.getPropertyName())) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeMismatchException.java, + * Copyright 2002-2009 the original author or authors., +	@Override, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/PropertyAccessException.java, + * Copyright 2002-2009 the original author or authors., +	 * <p>May be <code>null</code>; only available if an actual bean property, +	/**, +	 * Return the name of the affected property, if available., +	 */, +	public String getPropertyName() {, +		return (this.propertyChangeEvent != null ? this.propertyChangeEvent.getPropertyName() : null);, +	}, +, +	/**, +	 * Return the affected value that was about to be set, if any., +	 */, +	public Object getValue() {, +		return (this.propertyChangeEvent != null ? this.propertyChangeEvent.getNewValue() : null);, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/PropertyBatchUpdateException.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.util.ObjectUtils;, +	 * <p>Will return the empty array (not <code>null</code>) if there were no errors., +	 * Return the exception for this field, or <code>null</code> if there isn't any., +		for (PropertyAccessException pae : this.propertyAccessExceptions) {, +			if (ObjectUtils.nullSafeEquals(propertyName, pae.getPropertyName())) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeMismatchException.java, + * Copyright 2002-2009 the original author or authors., +	@Override, +++ b/org.springframework.context/src/main/java/org/springframework/validation/DefaultBindingErrorProcessor.java, + * Copyright 2002-2009 the original author or authors., +		String field = ex.getPropertyName();, +				bindingResult.getObjectName(), field, ex.getValue(), true,, +		return new Object[] {new DefaultMessageSourceResolvable(codes, field)};]