[+++ b/spring-core/src/main/java/org/springframework/util/concurrent/FutureAdapter.java, +					catch (RuntimeException ex) {, +						ExecutionException execEx = new ExecutionException(ex);, +						this.result = execEx;, +						this.state = State.FAILURE;, +						throw execEx;, +					}, +++ b/spring-core/src/main/java/org/springframework/util/concurrent/FutureAdapter.java, +					catch (RuntimeException ex) {, +						ExecutionException execEx = new ExecutionException(ex);, +						this.result = execEx;, +						this.state = State.FAILURE;, +						throw execEx;, +					}, +++ b/spring-web/src/test/java/org/springframework/web/client/AsyncRestTemplateIntegrationTests.java, +import java.util.concurrent.ExecutionException;, +	public void identicalExceptionThroughGetAndCallback() throws Exception {, +		final HttpClientErrorException[] callbackException = new HttpClientErrorException[1];, +, +		ListenableFuture<?> future = template.execute(baseUrl + "/status/notfound", HttpMethod.GET, null, null);, +		future.addCallback(new ListenableFutureCallback<Object>() {, +			@Override, +			public void onSuccess(Object result) {, +				fail("onSuccess not expected");, +			}, +			@Override, +			public void onFailure(Throwable t) {, +				assertTrue(t instanceof HttpClientErrorException);, +				callbackException[0] = (HttpClientErrorException) t;, +			}, +		});, +, +		try {, +			future.get();, +			fail("Exception expected");, +		}, +		catch (ExecutionException ex) {, +			Throwable cause = ex.getCause();, +			assertTrue(cause instanceof HttpClientErrorException);, +			assertSame(callbackException[0], cause);, +		}, +	}, +, +	@Test, +	public void notFoundGet() throws Exception {, +		catch (ExecutionException ex) {, +			assertTrue(ex.getCause() instanceof HttpClientErrorException);, +			HttpClientErrorException cause = (HttpClientErrorException)ex.getCause();, +, +			assertEquals(HttpStatus.NOT_FOUND, cause.getStatusCode());, +			assertNotNull(cause.getStatusText());, +			assertNotNull(cause.getResponseBodyAsString());, +		catch (ExecutionException ex) {, +			assertTrue(ex.getCause() instanceof HttpServerErrorException);, +			HttpServerErrorException cause = (HttpServerErrorException)ex.getCause();, +, +			assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, cause.getStatusCode());, +			assertNotNull(cause.getStatusText());, +			assertNotNull(cause.getResponseBodyAsString());]