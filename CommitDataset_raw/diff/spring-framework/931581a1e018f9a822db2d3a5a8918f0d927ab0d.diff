[+++ b/src/docs/asciidoc/web/webflux.adoc, +== Reactive Core, +The `spring-web` module contains abstractions and infrastructure to build reactive web, +applications. For server side processing this is organized in two distinct levels:, +* <<webflux-httphandler,HttpHandler>> -- basic, common API for HTTP request handling with, +non-blocking I/O and (Reactive Streams) back pressure, along with adapters for each, +supported server., +* <<webflux-web-handler-api>> -- slightly higher level, but still general purpose API for, +server request handling, which underlies higher level programming models such as annotated, +controllers and functional endpoints., +The reactive core also includes <<webflux-codecs>> for client and server side use., +is a simple contract with a single method to handle a request and response. It is, +intentionally minimal as its main purpose is to provide an abstraction over different, +server APIs for HTTP request handling., +Supported server APIs:, +Server dependencies (and, +https://github.com/spring-projects/spring-framework/wiki/What%27s-New-in-the-Spring-Framework[supported versions]):, +Code snippets to adapt `HttpHandler` to each server API:, +, +*Reactor Netty*, +*Undertow*, +*Tomcat*, +*Jetty*, +*Servlet 3.1+ Container*, +, +To deploy as a WAR to any Servlet 3.1+ container, simply extend and include, +{api-spring-framework}/web/server/adapter/AbstractReactiveWebInitializer.html[AbstractReactiveWebInitializer], +in the WAR, which wraps an `HttpHandler` with `ServletHttpHandlerAdapter` and registers, +that as a `Servlet`., +chain of {api-spring-framework}/web/server/WebExceptionHandler.html[WebExceptionHandler],, +{api-spring-framework}/web/server/WebFilter.html[WebFilter], and a target, +{api-spring-framework}/web/server/WebHandler.html[WebHandler] components. The chain can be assembled, +[[webflux-codecs]], +=== Codecs, +[.small]#<<integration.adoc#rest-message-conversion,Same in Spring MVC>>#, +, +{api-spring-framework}/http/codec/HttpMessageReader.html[HttpMessageReader] and, +{api-spring-framework}/http/codec/HttpMessageWriter.html[HttpMessageWriter] are contracts, +for encoding and decoding HTTP request and response content via non-blocking I/O with, +(Rective Streams) back pressure., +, +{api-spring-framework}/core/codec/Encoder.html[Encoder] and, +{api-spring-framework}/core/codec/Decoder.html[Decoder] are contracts for encoding and, +decoding content, independent of HTTP. They can be wrapped with `EncoderHttpMessageWriter`, +or `DecoderHttpMessageReader` and used for web processing., +, +All codecs are for client or server side use. All build on, +{api-spring-framework}/core/io/buffer/DataBuffer.html[DataBuffer] which abstracts byte, +buffer representations such as the Netty `ByteBuf` or `java.nio.ByteBuffer` (see, +<<core#databuffers, Data Buffers and Codecs>> for more details). `ClientCodecConfigurer`, +and `ServerCodecConfigurer` are typically used to configure and customize the codecs to, +use in an application., +, +The `spring-core` module has encoders and decoders for `byte[]`, `ByteBuffer`, `DataBuffer`,, +`Resource`, and `String`. The `spring-web` module adds encoders and decoders for Jackson, +JSON, Jackson Smile, JAXB2, along with other web-specific HTTP message readers and writers, +for form data, multipart requests, and server-sent events., +, +, +[[webflux-codecs-jackson]], +==== Jackson, +, +The decoder relies on Jackson's non-blocking, byte array parser to parse a stream of byte, +chunks into a `TokenBuffer` stream, which can then be turned into Objects with Jackson's, +`ObjectMapper`. JSON and https://github.com/FasterXML/smile-format-specification[Smile], +(binary JSON) data formats are currently supported., +, +The encoder processes a `Publisher<?>` as follows:, +, +* if the `Publisher` is a `Mono` (i.e. single value), the value is encoded when available., +* if media type is `application/stream+json` for JSON or `application/stream+x-jackson-smile`, +  for Smile, each value produced by the `Publisher` is encoded individually (and followed, +  by a new line in JSON)., +* otherwise all items from the `Publisher` are gathered in with `Flux#collectToList()`, +and the resulting collection is encoded as an array., +, +As a special case to the above rules the `ServerSentEventHttpMessageWriter` feeds items, +emitted from its input `Publisher` individually into the `Jackson2JsonEncoder` as a, +`Mono<?>`., +, +Note that both the Jackson JSON encoder and decoder explicitly back out of rendering, +elements of type `String`. Instead ``String``'s are treated as low level content, (i.e., +serialized JSON) and are rendered as-is by the `CharSequenceEncoder`. If you want a, +`Flux<String>` rendered as a JSON array, you'll have to use `Flux#collectToList()` and, +provide a `Mono<List<String>>` instead., +, +, +[[webflux-codecs-streaming]], +==== HTTP Streaming, +[.small]#<<web.adoc#mvc-ann-async-http-streaming,Same in Spring MVC>>#, +, +When a multi-value, reactive type such as `Flux` is used for response rendering, it may, +be collected to a `List` and rendered as a whole (e.g. JSON array), or it may be treated, +as an infinite stream with each item flushed immediately. The determination for which is, +which is made based on content negotiation and the selected media type which may imply a, +streaming format (e.g. "text/event-stream", "application/stream+json"), or not, +(e.g. "application/json")., +, +When streaming to the HTTP response, regardless of the media type (e.g. text/event-stream,, +application/stream+json), it is important to send data periodically, since the write would]