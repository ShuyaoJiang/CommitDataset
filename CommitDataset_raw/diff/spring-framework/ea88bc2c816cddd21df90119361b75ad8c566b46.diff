[+++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletRequestAttributes.java, + * Copyright 2002-2014 the original author or authors., +import javax.servlet.http.HttpServletResponse;, +	private HttpServletResponse response;, +, +	/**, +	 * Create a new ServletRequestAttributes instance for the given request., +	 * @param request current HTTP request, +	 * @param response current HTTP response (for optional exposure), +	 */, +	public ServletRequestAttributes(HttpServletRequest request, HttpServletResponse response) {, +		this(request);, +		this.response = response;, +	}, +, +	 * Exposes the native {@link HttpServletResponse} that we're wrapping (if any)., +	 */, +	public final HttpServletResponse getResponse() {, +		return this.response;, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletRequestAttributes.java, + * Copyright 2002-2014 the original author or authors., +import javax.servlet.http.HttpServletResponse;, +	private HttpServletResponse response;, +, +	/**, +	 * Create a new ServletRequestAttributes instance for the given request., +	 * @param request current HTTP request, +	 * @param response current HTTP response (for optional exposure), +	 */, +	public ServletRequestAttributes(HttpServletRequest request, HttpServletResponse response) {, +		this(request);, +		this.response = response;, +	}, +, +	 * Exposes the native {@link HttpServletResponse} that we're wrapping (if any)., +	 */, +	public final HttpServletResponse getResponse() {, +		return this.response;, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java, +		super(request, response);, +		HttpServletResponse response = getResponse();, +				(response == null || !response.containsHeader(HEADER_LAST_MODIFIED))) {, +			if (response != null) {, +					response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);, +					response.setDateHeader(HEADER_LAST_MODIFIED, lastModifiedTimestamp);, +		HttpServletResponse response = getResponse();, +				(response == null || !response.containsHeader(HEADER_ETAG))) {, +			if (response != null) {, +					response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);, +					response.setHeader(HEADER_ETAG, etag);, +++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletRequestAttributes.java, + * Copyright 2002-2014 the original author or authors., +import javax.servlet.http.HttpServletResponse;, +	private HttpServletResponse response;, +, +	/**, +	 * Create a new ServletRequestAttributes instance for the given request., +	 * @param request current HTTP request, +	 * @param response current HTTP response (for optional exposure), +	 */, +	public ServletRequestAttributes(HttpServletRequest request, HttpServletResponse response) {, +		this(request);, +		this.response = response;, +	}, +, +	 * Exposes the native {@link HttpServletResponse} that we're wrapping (if any)., +	 */, +	public final HttpServletResponse getResponse() {, +		return this.response;, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java, +		super(request, response);, +		HttpServletResponse response = getResponse();, +				(response == null || !response.containsHeader(HEADER_LAST_MODIFIED))) {, +			if (response != null) {, +					response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);, +					response.setDateHeader(HEADER_LAST_MODIFIED, lastModifiedTimestamp);, +		HttpServletResponse response = getResponse();, +				(response == null || !response.containsHeader(HEADER_ETAG))) {, +			if (response != null) {, +					response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);, +					response.setHeader(HEADER_ETAG, etag);, +++ b/spring-web/src/main/java/org/springframework/web/context/support/WebApplicationContextUtils.java, + * Copyright 2002-2014 the original author or authors., +import javax.servlet.ServletResponse;, +		beanFactory.registerResolvableDependency(ServletResponse.class, new ResponseObjectFactory());, +	 * Factory that exposes the current response object on demand., +	 */, +	@SuppressWarnings("serial"), +	private static class ResponseObjectFactory implements ObjectFactory<ServletResponse>, Serializable {, +, +		@Override]