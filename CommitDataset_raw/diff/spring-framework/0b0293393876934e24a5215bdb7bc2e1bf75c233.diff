[+++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerExceptionResolver.java, +	private static final Method NO_METHOD_FOUND = ClassUtils.getMethodIfAvailable(System.class, "currentTimeMillis", (Class<?>[]) null);, +, +		Map<Class<? extends Throwable>, Method> handlers = exceptionHandlerCache.get(handlerType);, +		handlerMethod = getBestMatchingMethod(resolverMethods, thrownException);, +		handlers.put(thrownExceptionType, (handlerMethod == null ? NO_METHOD_FOUND : handlerMethod));, +		return handlerMethod;, +	 * Uses the {@link DepthComparator} to find the best matching method, +	 * @return the best matching method or {@code null}., +		if (resolverMethods.isEmpty()) {, +		Class<? extends Throwable> closestMatch =, +				ExceptionDepthComparator.findClosestMatch(resolverMethods.keySet(), thrownException);, +		Method method = resolverMethods.get(closestMatch);, +		return ((method == null) || (NO_METHOD_FOUND == method)) ? null : method;, +		Class<?>[] paramTypes = handlerMethod.getParameterTypes();, +			Class<?> paramType = methodParam.getParameterType();, +		Class<?> paramType = methodParameter.getParameterType();, +	protected Object resolveStandardArgument(Class<?> parameterType, NativeWebRequest webRequest,, +++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerExceptionResolver.java, +	private static final Method NO_METHOD_FOUND = ClassUtils.getMethodIfAvailable(System.class, "currentTimeMillis", (Class<?>[]) null);, +, +		Map<Class<? extends Throwable>, Method> handlers = exceptionHandlerCache.get(handlerType);, +		handlerMethod = getBestMatchingMethod(resolverMethods, thrownException);, +		handlers.put(thrownExceptionType, (handlerMethod == null ? NO_METHOD_FOUND : handlerMethod));, +		return handlerMethod;, +	 * Uses the {@link DepthComparator} to find the best matching method, +	 * @return the best matching method or {@code null}., +		if (resolverMethods.isEmpty()) {, +		Class<? extends Throwable> closestMatch =, +				ExceptionDepthComparator.findClosestMatch(resolverMethods.keySet(), thrownException);, +		Method method = resolverMethods.get(closestMatch);, +		return ((method == null) || (NO_METHOD_FOUND == method)) ? null : method;, +		Class<?>[] paramTypes = handlerMethod.getParameterTypes();, +			Class<?> paramType = methodParam.getParameterType();, +		Class<?> paramType = methodParameter.getParameterType();, +	protected Object resolveStandardArgument(Class<?> parameterType, NativeWebRequest webRequest,, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerExceptionResolver.java, +	private static final Method NO_METHOD_FOUND = ClassUtils.getMethodIfAvailable(System.class, "currentTimeMillis", (Class<?>[]) null);, +	 * Uses the {@link DepthComparator} to find the best matching method, +	 * @return the best matching method or {@code null}., +		if (resolverMethods.isEmpty()) {, +		Class<? extends Throwable> closestMatch =, +				ExceptionDepthComparator.findClosestMatch(resolverMethods.keySet(), thrownException);, +		Method method = resolverMethods.get(closestMatch);, +		return ((method == null) || (NO_METHOD_FOUND == method)) ? null : method;, +		Class<?>[] paramTypes = handlerMethod.getParameterTypes();, +			Class<?> paramType = methodParam.getParameterType();, +		Class<?> paramType = methodParameter.getParameterType();, +	protected Object resolveStandardArgument(Class<?> parameterType, NativeWebRequest webRequest,, +			return new ModelAndView().addAllObjects((Map<String, Object>) returnValue);]