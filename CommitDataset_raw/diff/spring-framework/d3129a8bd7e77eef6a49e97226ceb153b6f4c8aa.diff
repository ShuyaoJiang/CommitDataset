[+++ b/src/docs/asciidoc/testing.adoc, +level within a JUnit Jupiter based integration test class., +	@SpringJUnitConfig, +	class DatabaseTests {, +		void emptySchemaTest {, +		void userTest {, +using JUnit Jupiter and transactional tests with `@Sql`. Note that there is no need to, +clean up the database after the `usersTest()` method is executed since any changes made, +to the database (either within the test method or within the `/test-data.sql` script), +will be automatically rolled back by the `TransactionalTestExecutionListener` (see, +	@SpringJUnitConfig(TestDatabaseConfig.class), +	class TransactionalSqlScriptsTests {, +		final JdbcTemplate jdbcTemplate;, +		TransactionalSqlScriptsTests(DataSource dataSource) {, +		void usersTest() {, +		int countRowsInTable(String tableName) {, +		void assertNumUsers(int expected) {, +			assertEquals(expected, countRowsInTable("user"),, +				"Number of rows in the [user] table.");, +   void placeOrderRepeatedly(RepetitionInfo repetitionInfo,, +         @Autowired OrderService orderService) {, +JUnit Jupiter based example of using Spring MVC Test:, +@SpringJUnitWebConfig(locations = "test-servlet-context.xml"), +class ExampleTests {, +   @BeforeEach, +   void setup(WebApplicationContext wac) {, +      this.mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();, +   void getAccount() throws Exception {, +      this.mockMvc.perform(get("/accounts/1"), +            .accept(MediaType.parseMediaType("application/json;charset=UTF-8")))]