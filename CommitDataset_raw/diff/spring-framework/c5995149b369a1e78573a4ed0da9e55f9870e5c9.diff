[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +import org.springframework.beans.factory.xml.XmlReaderContext;, +	public static final String HANDLER_MAPPING_BEAN_NAME = RequestMappingHandlerMapping.class.getName();, +, +	public static final String HANDLER_ADAPTER_BEAN_NAME = RequestMappingHandlerAdapter.class.getName();, +, +		XmlReaderContext readerContext = parserContext.getReaderContext();, +		readerContext.getRegistry().registerBeanDefinition(HANDLER_MAPPING_BEAN_NAME , handlerMappingDef);, +		readerContext.getRegistry().registerBeanDefinition(HANDLER_ADAPTER_BEAN_NAME , handlerAdapterDef);, +		readerContext.getRegistry().registerBeanDefinition(uriCompContribName, uriCompContribDef);, +		String mappedInterceptorName = readerContext.registerWithGeneratedName(mappedCsInterceptorDef);, +		String methodExceptionResolverName = readerContext.registerWithGeneratedName(exceptionHandlerExceptionResolver);, +				readerContext.registerWithGeneratedName(responseStatusExceptionResolver);, +				readerContext.registerWithGeneratedName(defaultExceptionResolver);, +		parserContext.registerComponent(new BeanComponentDefinition(handlerMappingDef, HANDLER_MAPPING_BEAN_NAME));, +		parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, HANDLER_ADAPTER_BEAN_NAME));, +	private RuntimeBeanReference getContentNegotiationManager(Element element, Object source,, +			ParserContext parserContext) {, +, +		RuntimeBeanReference beanRef;, +			beanRef = new RuntimeBeanReference(name);, +			beanRef = new RuntimeBeanReference(name);, +		return beanRef;, +	private void configurePathMatchingProperties(RootBeanDefinition handlerMappingDef, Element element,, +			ParserContext parserContext) {, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +import org.springframework.beans.factory.xml.XmlReaderContext;, +	public static final String HANDLER_MAPPING_BEAN_NAME = RequestMappingHandlerMapping.class.getName();, +, +	public static final String HANDLER_ADAPTER_BEAN_NAME = RequestMappingHandlerAdapter.class.getName();, +, +		XmlReaderContext readerContext = parserContext.getReaderContext();, +		readerContext.getRegistry().registerBeanDefinition(HANDLER_MAPPING_BEAN_NAME , handlerMappingDef);, +		readerContext.getRegistry().registerBeanDefinition(HANDLER_ADAPTER_BEAN_NAME , handlerAdapterDef);, +		readerContext.getRegistry().registerBeanDefinition(uriCompContribName, uriCompContribDef);, +		String mappedInterceptorName = readerContext.registerWithGeneratedName(mappedCsInterceptorDef);, +		String methodExceptionResolverName = readerContext.registerWithGeneratedName(exceptionHandlerExceptionResolver);, +				readerContext.registerWithGeneratedName(responseStatusExceptionResolver);, +				readerContext.registerWithGeneratedName(defaultExceptionResolver);, +		parserContext.registerComponent(new BeanComponentDefinition(handlerMappingDef, HANDLER_MAPPING_BEAN_NAME));, +		parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, HANDLER_ADAPTER_BEAN_NAME));, +	private RuntimeBeanReference getContentNegotiationManager(Element element, Object source,, +			ParserContext parserContext) {, +, +		RuntimeBeanReference beanRef;, +			beanRef = new RuntimeBeanReference(name);, +			beanRef = new RuntimeBeanReference(name);, +		return beanRef;, +	private void configurePathMatchingProperties(RootBeanDefinition handlerMappingDef, Element element,, +			ParserContext parserContext) {, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ViewResolversBeanDefinitionParser.java, +		Object manager = getContentNegotiationManager(context);, +		if (manager != null) {, +			values.add("contentNegotiationManager", manager);, +	private Object getContentNegotiationManager(ParserContext context) {, +		String name = AnnotationDrivenBeanDefinitionParser.HANDLER_MAPPING_BEAN_NAME;, +		if (context.getRegistry().containsBeanDefinition(name)) {, +			BeanDefinition handlerMappingBeanDef = context.getRegistry().getBeanDefinition(name);, +			return handlerMappingBeanDef.getPropertyValues().get("contentNegotiationManager");, +		}, +		name = AnnotationDrivenBeanDefinitionParser.CONTENT_NEGOTIATION_MANAGER_BEAN_NAME;, +		if (context.getRegistry().containsBeanDefinition(name)) {, +			return new RuntimeBeanReference(name);, +		}, +		return null;, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +import org.springframework.beans.factory.xml.XmlReaderContext;, +	public static final String HANDLER_MAPPING_BEAN_NAME = RequestMappingHandlerMapping.class.getName();, +, +	public static final String HANDLER_ADAPTER_BEAN_NAME = RequestMappingHandlerAdapter.class.getName();, +, +		XmlReaderContext readerContext = parserContext.getReaderContext();, +		readerContext.getRegistry().registerBeanDefinition(HANDLER_MAPPING_BEAN_NAME , handlerMappingDef);, +		readerContext.getRegistry().registerBeanDefinition(HANDLER_ADAPTER_BEAN_NAME , handlerAdapterDef);, +		readerContext.getRegistry().registerBeanDefinition(uriCompContribName, uriCompContribDef);, +		String mappedInterceptorName = readerContext.registerWithGeneratedName(mappedCsInterceptorDef);, +		String methodExceptionResolverName = readerContext.registerWithGeneratedName(exceptionHandlerExceptionResolver);, +				readerContext.registerWithGeneratedName(responseStatusExceptionResolver);, +				readerContext.registerWithGeneratedName(defaultExceptionResolver);, +		parserContext.registerComponent(new BeanComponentDefinition(handlerMappingDef, HANDLER_MAPPING_BEAN_NAME));, +		parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, HANDLER_ADAPTER_BEAN_NAME));, +	private RuntimeBeanReference getContentNegotiationManager(Element element, Object source,, +			ParserContext parserContext) {, +, +		RuntimeBeanReference beanRef;, +			beanRef = new RuntimeBeanReference(name);, +			beanRef = new RuntimeBeanReference(name);, +		return beanRef;, +	private void configurePathMatchingProperties(RootBeanDefinition handlerMappingDef, Element element,, +			ParserContext parserContext) {, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ViewResolversBeanDefinitionParser.java, +		Object manager = getContentNegotiationManager(context);, +		if (manager != null) {, +			values.add("contentNegotiationManager", manager);, +	private Object getContentNegotiationManager(ParserContext context) {]