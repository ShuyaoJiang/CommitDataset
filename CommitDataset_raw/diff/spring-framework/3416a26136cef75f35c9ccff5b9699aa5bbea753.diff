[+++ b/org.springframework.context/src/main/java/org/springframework/cache/config/CacheAdviceParser.java, +	private static final String DEFS_ELEMENT = "caching";, +++ b/org.springframework.context/src/main/java/org/springframework/cache/config/CacheAdviceParser.java, +	private static final String DEFS_ELEMENT = "caching";, +++ b/org.springframework.context/src/main/resources/org/springframework/cache/config/spring-cache-3.1.xsd, +						<xsd:element name="caching" type="definitionsType" minOccurs="0" maxOccurs="unbounded"/>, +++ b/org.springframework.context/src/main/java/org/springframework/cache/config/CacheAdviceParser.java, +	private static final String DEFS_ELEMENT = "caching";, +++ b/org.springframework.context/src/main/resources/org/springframework/cache/config/spring-cache-3.1.xsd, +						<xsd:element name="caching" type="definitionsType" minOccurs="0" maxOccurs="unbounded"/>, +++ b/org.springframework.context/src/test/resources/org/springframework/cache/config/cache-advice.xml, +		<cache:caching cache="default">, +		</cache:caching>, +		<cache:caching>, +		</cache:caching>, +		<cache:caching cache="default">, +		</cache:caching>, +		<cache:caching method="mult*Cache">, +		</cache:caching>, +		<cache:caching method="multiEvict">, +		</cache:caching>, +		<cache:caching>, +		</cache:caching>, +		<cache:caching cache="default">, +		</cache:caching>, +		<cache:caching>, +		</cache:caching>, +		<cache:caching cache="default">, +		</cache:caching>, +		<cache:caching>, +		</cache:caching>		, +++ b/org.springframework.context/src/main/java/org/springframework/cache/config/CacheAdviceParser.java, +	private static final String DEFS_ELEMENT = "caching";, +++ b/org.springframework.context/src/main/resources/org/springframework/cache/config/spring-cache-3.1.xsd, +						<xsd:element name="caching" type="definitionsType" minOccurs="0" maxOccurs="unbounded"/>, +++ b/org.springframework.context/src/test/resources/org/springframework/cache/config/cache-advice.xml, +		<cache:caching cache="default">, +		</cache:caching>, +		<cache:caching>, +		</cache:caching>, +		<cache:caching cache="default">, +		</cache:caching>, +		<cache:caching method="mult*Cache">, +		</cache:caching>, +		<cache:caching method="multiEvict">, +		</cache:caching>, +		<cache:caching>, +		</cache:caching>, +		<cache:caching cache="default">, +		</cache:caching>, +		<cache:caching>, +		</cache:caching>, +		<cache:caching cache="default">, +		</cache:caching>, +		<cache:caching>, +		</cache:caching>		, +++ b/spring-framework-reference/src/cache.xml, +	<section id="cache-annotations-put">, +		<title><literal>@CachePut</literal> annotation</title>, +		, +		<para>For cases where the cache needs to be updated without interferring with the method execution, one can use the <literal>@CachePut</literal> annotation. That is, the method will always, +		be executed and its result placed into the cache (according to the <literal>@CachePut</literal> options). It supports the same options as <literal>@Cacheable</literal> and should be used, +		for cache population rather then method flow optimization.</para>, +		, +		<para>Note that using <literal>@CachePut</literal> and <literal>@Cacheable</literal> annotations on the same method is generaly discouraged because they have different behaviours. While the latter, +		causes the method execution to be skipped by using the cache, the former forces the execution in order to execute a cache update. This leads to unexpected behaviour and with the exception of specific, +		corner-cases (such as annotations having conditions that exclude them from each other), such declarations should be avoided.</para>, +	</section>	, +	, +	<section id="cache-annotations-caching">, +		<title><literal>@Caching</literal> annotation</title>, +		, +		<para>There are cases when multiple annotations of the same type, such as <literal>@CacheEvict</literal> or <literal>@CachePut</literal> need to be specified, for example because the condition or the key, +		expression is different between different caches. Unfortunately Java does not support such declarations however there is a workaround - using a <emphasis>enclosing</emphasis> annotation, in this case,, +		<literal>@Caching</literal>. <literal>@Caching</literal> allows multiple nested <literal>@Cacheable</literal>, <literal>@CachePut</literal> and <literal>@CacheEvict</literal> to be used on the same method:</para>, +		, +		<programlisting language="java"><![CDATA[@Caching(evict = { @CacheEvict("primary"), @CacheEvict(value = "secondary", key = "#p0") }), +public Book importBooks(String deposit, Date date)]]></programlisting>, +				, +	</section>, +, +        <interfacename>@Cacheable/@CachePut/@CacheEvict</interfacename></title>, +        <interfacename>@Cache*</interfacename> annotations only to, +          <interfacename>@Cache*</interfacename> annotation, as opposed, +          <interfacename>@Cache*</interfacename> annotation on an, +   <cache:caching cache="books">, +   </cache:caching>]