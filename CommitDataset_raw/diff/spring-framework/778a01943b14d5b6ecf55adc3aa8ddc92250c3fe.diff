[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.core.ResolvableType;, +, +, +	 * @param targetType the type to match against (as a {@code ResolvableType}), +	 * @return {@code true} if the bean type matches,, +	 * {@code false} if it doesn't match or cannot be determined yet, +	 * @throws NoSuchBeanDefinitionException if there is no bean with the given name, +	 * @since 4.2, +	 * @see #getBean, +	 * @see #getType, +	 */, +	boolean isTypeMatch(String name, ResolvableType targetType) throws NoSuchBeanDefinitionException;, +, +	/**, +	 * Check whether the bean with the given name matches the specified type., +	 * More specifically, check whether a {@link #getBean} call for the given name, +	 * would return an object that is assignable to the specified target type., +	 * <p>Translates aliases back to the corresponding canonical bean name., +	 * Will ask the parent factory if the bean cannot be found in this factory instance., +	 * @param name the name of the bean to query, +	 * @param targetType the type to match against (as a {@code Class}), +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.core.ResolvableType;, +, +, +	 * @param targetType the type to match against (as a {@code ResolvableType}), +	 * @return {@code true} if the bean type matches,, +	 * {@code false} if it doesn't match or cannot be determined yet, +	 * @throws NoSuchBeanDefinitionException if there is no bean with the given name, +	 * @since 4.2, +	 * @see #getBean, +	 * @see #getType, +	 */, +	boolean isTypeMatch(String name, ResolvableType targetType) throws NoSuchBeanDefinitionException;, +, +	/**, +	 * Check whether the bean with the given name matches the specified type., +	 * More specifically, check whether a {@link #getBean} call for the given name, +	 * would return an object that is assignable to the specified target type., +	 * <p>Translates aliases back to the corresponding canonical bean name., +	 * Will ask the parent factory if the bean cannot be found in this factory instance., +	 * @param name the name of the bean to query, +	 * @param targetType the type to match against (as a {@code Class}), +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactoryUtils.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.core.ResolvableType;, +	/**, +	 * Get all bean names for the given type, including those defined in ancestor, +	 * factories. Will return unique names in case of overridden bean definitions., +	 * <p>Does consider objects created by FactoryBeans, which means that FactoryBeans, +	 * will get initialized. If the object created by the FactoryBean doesn't match,, +	 * the raw FactoryBean itself will be matched against the type., +	 * <p>This version of {@code beanNamesForTypeIncludingAncestors} automatically, +	 * includes prototypes and FactoryBeans., +	 * @param lbf the bean factory, +	 * @param type the type that beans must match (as a {@code ResolvableType}), +	 * @return the array of matching bean names, or an empty array if none, +	 * @since 4.2, +	 */, +	public static String[] beanNamesForTypeIncludingAncestors(ListableBeanFactory lbf, ResolvableType type) {, +		Assert.notNull(lbf, "ListableBeanFactory must not be null");, +		String[] result = lbf.getBeanNamesForType(type);, +		if (lbf instanceof HierarchicalBeanFactory) {, +			HierarchicalBeanFactory hbf = (HierarchicalBeanFactory) lbf;, +			if (hbf.getParentBeanFactory() instanceof ListableBeanFactory) {, +				String[] parentResult = beanNamesForTypeIncludingAncestors(, +						(ListableBeanFactory) hbf.getParentBeanFactory(), type);, +				List<String> resultList = new ArrayList<String>();, +				resultList.addAll(Arrays.asList(result));, +				for (String beanName : parentResult) {, +					if (!resultList.contains(beanName) && !hbf.containsLocalBean(beanName)) {, +						resultList.add(beanName);, +					}, +				}, +				result = StringUtils.toStringArray(resultList);, +			}, +		}, +		return result;, +	}, +	 * @param type the type that beans must match (as a {@code Class}), +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.core.ResolvableType;, +, +, +	 * @param targetType the type to match against (as a {@code ResolvableType}), +	 * @return {@code true} if the bean type matches,, +	 * {@code false} if it doesn't match or cannot be determined yet, +	 * @throws NoSuchBeanDefinitionException if there is no bean with the given name, +	 * @since 4.2, +	 * @see #getBean, +	 * @see #getType, +	 */, +	boolean isTypeMatch(String name, ResolvableType targetType) throws NoSuchBeanDefinitionException;, +, +	/**, +	 * Check whether the bean with the given name matches the specified type.]