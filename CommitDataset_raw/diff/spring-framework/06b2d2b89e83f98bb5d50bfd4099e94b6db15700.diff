[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/DefaultStompSession.java, + * Copyright 2002-2016 the original author or authors., +	@Override, +	public Receiptable acknowledge(String messageId, boolean consumed) {, +		StompHeaders stompHeaders = new StompHeaders();, +		stompHeaders.setId(messageId);, +, +		String receiptId = checkOrAddReceipt(stompHeaders);, +		Receiptable receiptable = new ReceiptHandler(receiptId);, +, +		StompCommand command = (consumed ? StompCommand.ACK : StompCommand.NACK);, +		StompHeaderAccessor accessor = createHeaderAccessor(command);, +		accessor.addNativeHeaders(stompHeaders);, +		Message<byte[]> message = createMessage(accessor, null);, +		execute(message);, +, +		return receiptable;, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/DefaultStompSession.java, + * Copyright 2002-2016 the original author or authors., +	@Override, +	public Receiptable acknowledge(String messageId, boolean consumed) {, +		StompHeaders stompHeaders = new StompHeaders();, +		stompHeaders.setId(messageId);, +, +		String receiptId = checkOrAddReceipt(stompHeaders);, +		Receiptable receiptable = new ReceiptHandler(receiptId);, +, +		StompCommand command = (consumed ? StompCommand.ACK : StompCommand.NACK);, +		StompHeaderAccessor accessor = createHeaderAccessor(command);, +		accessor.addNativeHeaders(stompHeaders);, +		Message<byte[]> message = createMessage(accessor, null);, +		execute(message);, +, +		return receiptable;, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompSession.java, + * Copyright 2002-2016 the original author or authors., +	 * Send an acknowledgement whether a message was consumed or not resulting, +	 * in an ACK or NACK frame respectively., +	 * <p><strong>Note:</strong> to use this when subscribing you must set the, +	 * {@link StompHeaders#setAck(String) ack} header to "client" or, +	 * "client-individual" in order ot use this., +	 * @param messageId the id of the message, +	 * @param consumed whether the message was consumed or not, +	 * @return a Receiptable for tracking events, +	 */, +	Receiptable acknowledge(String messageId, boolean consumed);, +, +	/**, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/DefaultStompSession.java, + * Copyright 2002-2016 the original author or authors., +	@Override, +	public Receiptable acknowledge(String messageId, boolean consumed) {, +		StompHeaders stompHeaders = new StompHeaders();, +		stompHeaders.setId(messageId);, +, +		String receiptId = checkOrAddReceipt(stompHeaders);, +		Receiptable receiptable = new ReceiptHandler(receiptId);, +, +		StompCommand command = (consumed ? StompCommand.ACK : StompCommand.NACK);, +		StompHeaderAccessor accessor = createHeaderAccessor(command);, +		accessor.addNativeHeaders(stompHeaders);, +		Message<byte[]> message = createMessage(accessor, null);, +		execute(message);, +, +		return receiptable;, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompSession.java, + * Copyright 2002-2016 the original author or authors., +	 * Send an acknowledgement whether a message was consumed or not resulting, +	 * in an ACK or NACK frame respectively., +	 * <p><strong>Note:</strong> to use this when subscribing you must set the, +	 * {@link StompHeaders#setAck(String) ack} header to "client" or, +	 * "client-individual" in order ot use this., +	 * @param messageId the id of the message, +	 * @param consumed whether the message was consumed or not, +	 * @return a Receiptable for tracking events, +	 */, +	Receiptable acknowledge(String messageId, boolean consumed);, +, +	/**, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/DefaultStompSessionTests.java, + * Copyright 2002-2016 the original author or authors., +	public void ack() throws Exception {, +, +		this.session.afterConnected(this.connection);, +		assertTrue(this.session.isConnected());, +, +		String messageId = "123";, +		this.session.acknowledge(messageId, true);, +, +		Message<byte[]> message = this.messageCaptor.getValue();, +		StompHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(message, StompHeaderAccessor.class);, +		assertEquals(StompCommand.ACK, accessor.getCommand());, +, +		StompHeaders stompHeaders = StompHeaders.readOnlyStompHeaders(accessor.getNativeHeaders());]