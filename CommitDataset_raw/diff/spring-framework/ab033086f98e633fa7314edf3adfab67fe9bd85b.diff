[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/annotation/DefaultServletHandlerConfigurer.java, +import org.springframework.util.Assert;, +import org.springframework.web.servlet.handler.AbstractHandlerMapping;, + * Configures a request handler for serving static resources by forwarding the request to the Servlet container's , + * "default" Servlet. This is indended to be used when the Spring MVC {@link DispatcherServlet} is mapped to "/", + * thus overriding the Servlet container's default handling of static resources. Since this handler is configured , + * at the lowest precedence, effectively it allows all other handler mappings to handle the request, and if none, + * of them do, this handler can forward it to the "default" Servlet., + * @see DefaultServletHttpRequestHandler, +	private DefaultServletHttpRequestHandler handler;, +, +	/**, +	 * Create a {@link DefaultServletHandlerConfigurer} instance., +	 * @param servletContext the ServletContext to use to configure the underlying DefaultServletHttpRequestHandler., +	 */, +		Assert.notNull(servletContext, "A ServletContext is required to configure default servlet handling");, +	 * Enable forwarding to the "default" Servlet. When this method is used the {@link DefaultServletHttpRequestHandler}, +	 * will try to auto-detect the "default" Servlet name. Alternatively, you can specify the name of the default , +	 * Servlet via {@link #enable(String)}., +	 * @see DefaultServletHttpRequestHandler, +	 * Enable forwarding to the "default" Servlet identified by the given name., +	 * This is useful when the default Servlet cannot be auto-detected, for example when it has been manually configured., +	 * @see DefaultServletHttpRequestHandler, +		handler = new DefaultServletHttpRequestHandler();, +		handler.setDefaultServletName(defaultServletName);, +		handler.setServletContext(servletContext);, +	 * Return a handler mapping instance ordered at {@link Integer#MAX_VALUE} containing the, +	 * {@link DefaultServletHttpRequestHandler} instance mapped to {@code "/**"}; or {@code null} if , +	 * default servlet handling was not been enabled., +	protected AbstractHandlerMapping getHandlerMapping() {, +		if (handler == null) {, +			return null;, +		urlMap.put("/**", handler);, +, +		SimpleUrlHandlerMapping handlerMapping = new SimpleUrlHandlerMapping();, +		handlerMapping.setOrder(Integer.MAX_VALUE);, +		handlerMapping.setUrlMap(urlMap);, +		return handlerMapping;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/annotation/DefaultServletHandlerConfigurer.java, +import org.springframework.util.Assert;, +import org.springframework.web.servlet.handler.AbstractHandlerMapping;, + * Configures a request handler for serving static resources by forwarding the request to the Servlet container's , + * "default" Servlet. This is indended to be used when the Spring MVC {@link DispatcherServlet} is mapped to "/", + * thus overriding the Servlet container's default handling of static resources. Since this handler is configured , + * at the lowest precedence, effectively it allows all other handler mappings to handle the request, and if none, + * of them do, this handler can forward it to the "default" Servlet., + * @see DefaultServletHttpRequestHandler, +	private DefaultServletHttpRequestHandler handler;, +, +	/**, +	 * Create a {@link DefaultServletHandlerConfigurer} instance., +	 * @param servletContext the ServletContext to use to configure the underlying DefaultServletHttpRequestHandler., +	 */, +		Assert.notNull(servletContext, "A ServletContext is required to configure default servlet handling");, +	 * Enable forwarding to the "default" Servlet. When this method is used the {@link DefaultServletHttpRequestHandler}, +	 * will try to auto-detect the "default" Servlet name. Alternatively, you can specify the name of the default , +	 * Servlet via {@link #enable(String)}., +	 * @see DefaultServletHttpRequestHandler, +	 * Enable forwarding to the "default" Servlet identified by the given name., +	 * This is useful when the default Servlet cannot be auto-detected, for example when it has been manually configured., +	 * @see DefaultServletHttpRequestHandler, +		handler = new DefaultServletHttpRequestHandler();, +		handler.setDefaultServletName(defaultServletName);, +		handler.setServletContext(servletContext);, +	 * Return a handler mapping instance ordered at {@link Integer#MAX_VALUE} containing the, +	 * {@link DefaultServletHttpRequestHandler} instance mapped to {@code "/**"}; or {@code null} if , +	 * default servlet handling was not been enabled., +	protected AbstractHandlerMapping getHandlerMapping() {, +		if (handler == null) {, +			return null;, +		urlMap.put("/**", handler);, +, +		SimpleUrlHandlerMapping handlerMapping = new SimpleUrlHandlerMapping();, +		handlerMapping.setOrder(Integer.MAX_VALUE);, +		handlerMapping.setUrlMap(urlMap);, +		return handlerMapping;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.java, + * A variant of {@link WebMvcConfigurationSupport} that delegates to one or more registered , + * {@link WebMvcConfigurer}s allowing each of them to customize the default Spring MVC , + * code-based configuration., + * <p>This class is automatically imported when @{@link EnableWebMvc} is used to annotate, + * an @{@link Configuration} class. In turn it detects implementations of {@link WebMvcConfigurer}, + * via autowiring and delegates to them.  , +	protected final void addInterceptors(InterceptorRegistry registry) {, +		configurers.addInterceptors(registry);, +	protected final void addViewControllers(ViewControllerRegistry registry) {, +		configurers.addViewControllers(registry);, +	protected final void addResourceHandlers(ResourceHandlerRegistry registry) {, +		configurers.addResourceHandlers(registry);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/annotation/DefaultServletHandlerConfigurer.java, +import org.springframework.util.Assert;, +import org.springframework.web.servlet.handler.AbstractHandlerMapping;, + * Configures a request handler for serving static resources by forwarding the request to the Servlet container's , + * "default" Servlet. This is indended to be used when the Spring MVC {@link DispatcherServlet} is mapped to "/", + * thus overriding the Servlet container's default handling of static resources. Since this handler is configured , + * at the lowest precedence, effectively it allows all other handler mappings to handle the request, and if none, + * of them do, this handler can forward it to the "default" Servlet., + * @see DefaultServletHttpRequestHandler, +	private DefaultServletHttpRequestHandler handler;, +]