[+++ b/src/asciidoc/core-aop.adoc, +Spring AOP can also use CGLIB proxies. This is necessary to proxy classes rather than, +interface. As it is good practice to program to interfaces rather than classes; business, +<<aop-proxying,force the use of CGLIB>>, in those (hopefully rare) cases where you, +need to advise a method that is not declared on an interface, or where you need to, +pass a proxied object to a method as a concrete type., +This assumes that you are using schema support as described in <<xsd-configuration>>. See, +<<xsd-config-body-schemas-aop>> for how to import the tags in the `aop` namespace., +`spring-aop` schema as described in <<xsd-configuration>>. See <<xsd-config-body-schemas-aop>>, +for how to import the tags in the `aop` namespace., +++ b/src/asciidoc/core-aop.adoc, +Spring AOP can also use CGLIB proxies. This is necessary to proxy classes rather than, +interface. As it is good practice to program to interfaces rather than classes; business, +<<aop-proxying,force the use of CGLIB>>, in those (hopefully rare) cases where you, +need to advise a method that is not declared on an interface, or where you need to, +pass a proxied object to a method as a concrete type., +This assumes that you are using schema support as described in <<xsd-configuration>>. See, +<<xsd-config-body-schemas-aop>> for how to import the tags in the `aop` namespace., +`spring-aop` schema as described in <<xsd-configuration>>. See <<xsd-config-body-schemas-aop>>, +for how to import the tags in the `aop` namespace., +++ b/src/asciidoc/core-beans.adoc, +Spring supports extensible configuration formats <<xsd-configuration,with namespaces>>, which are, +<<xsd-configuration>>.) Why do definitions of beans scoped at the `request`, `session`,, +registration of `BeanPostProcessors`>>., +, +[[beans-factory-programmatically-registering-beanpostprocessors]], +.Programmatically registering BeanPostProcessors, +.BeanPostProcessors and AOP auto-proxying, +++ b/src/asciidoc/core-aop.adoc, +Spring AOP can also use CGLIB proxies. This is necessary to proxy classes rather than, +interface. As it is good practice to program to interfaces rather than classes; business, +<<aop-proxying,force the use of CGLIB>>, in those (hopefully rare) cases where you, +need to advise a method that is not declared on an interface, or where you need to, +pass a proxied object to a method as a concrete type., +This assumes that you are using schema support as described in <<xsd-configuration>>. See, +<<xsd-config-body-schemas-aop>> for how to import the tags in the `aop` namespace., +`spring-aop` schema as described in <<xsd-configuration>>. See <<xsd-config-body-schemas-aop>>, +for how to import the tags in the `aop` namespace., +++ b/src/asciidoc/core-beans.adoc, +Spring supports extensible configuration formats <<xsd-configuration,with namespaces>>, which are, +<<xsd-configuration>>.) Why do definitions of beans scoped at the `request`, `session`,, +registration of `BeanPostProcessors`>>., +, +[[beans-factory-programmatically-registering-beanpostprocessors]], +.Programmatically registering BeanPostProcessors, +.BeanPostProcessors and AOP auto-proxying, +++ b/src/asciidoc/data-access.adoc, +`jee` namespace. For more information on schema-based configuration, see <<xsd-configuration>>,, +++ b/src/asciidoc/core-aop.adoc, +Spring AOP can also use CGLIB proxies. This is necessary to proxy classes rather than, +interface. As it is good practice to program to interfaces rather than classes; business, +<<aop-proxying,force the use of CGLIB>>, in those (hopefully rare) cases where you, +need to advise a method that is not declared on an interface, or where you need to, +pass a proxied object to a method as a concrete type., +This assumes that you are using schema support as described in <<xsd-configuration>>. See, +<<xsd-config-body-schemas-aop>> for how to import the tags in the `aop` namespace., +`spring-aop` schema as described in <<xsd-configuration>>. See <<xsd-config-body-schemas-aop>>, +for how to import the tags in the `aop` namespace., +++ b/src/asciidoc/core-beans.adoc, +Spring supports extensible configuration formats <<xsd-configuration,with namespaces>>, which are, +<<xsd-configuration>>.) Why do definitions of beans scoped at the `request`, `session`,, +registration of `BeanPostProcessors`>>., +, +[[beans-factory-programmatically-registering-beanpostprocessors]], +.Programmatically registering BeanPostProcessors, +.BeanPostProcessors and AOP auto-proxying, +++ b/src/asciidoc/data-access.adoc, +`jee` namespace. For more information on schema-based configuration, see <<xsd-configuration>>,, +++ b/src/asciidoc/integration.adoc, +  are looking for true pooling, see the discussions of `SimpleThreadPoolTaskExecutor`, +  and `ThreadPoolTaskExecutor` below., +  There is an alternative, `ThreadPoolTaskExecutor`, that exposes the `Executor`, +  `ConcurrentTaskExecutor`, but if the `ThreadPoolTaskExecutor` isn't flexible, +  enough for your needs, the `ConcurrentTaskExecutor` is an alternative., +  configuring a `java.util.concurrent.ThreadPoolExecutor` and wraps it in a `TaskExecutor`., +  recommended that you use a `ConcurrentTaskExecutor` instead., +This implementation uses the CommonJ `WorkManager` as its backing implementation and is, +the central convenience class for setting up a CommonJ `WorkManager` reference in a Spring, +context. Similar to the `SimpleThreadPoolTaskExecutor`, this class implements the, +`WorkManager` interface and therefore can be used directly as a `WorkManager` as well., +For more information on schema-based configuration, see <<xsd-configuration>>., +++ b/src/asciidoc/core-aop.adoc, +Spring AOP can also use CGLIB proxies. This is necessary to proxy classes rather than, +interface. As it is good practice to program to interfaces rather than classes; business, +<<aop-proxying,force the use of CGLIB>>, in those (hopefully rare) cases where you, +need to advise a method that is not declared on an interface, or where you need to, +pass a proxied object to a method as a concrete type., +This assumes that you are using schema support as described in <<xsd-configuration>>. See, +<<xsd-config-body-schemas-aop>> for how to import the tags in the `aop` namespace., +`spring-aop` schema as described in <<xsd-configuration>>. See <<xsd-config-body-schemas-aop>>, +for how to import the tags in the `aop` namespace., +++ b/src/asciidoc/core-beans.adoc, +Spring supports extensible configuration formats <<xsd-configuration,with namespaces>>, which are, +<<xsd-configuration>>.) Why do definitions of beans scoped at the `request`, `session`,, +registration of `BeanPostProcessors`>>., +, +[[beans-factory-programmatically-registering-beanpostprocessors]], +.Programmatically registering BeanPostProcessors, +.BeanPostProcessors and AOP auto-proxying, +++ b/src/asciidoc/data-access.adoc]