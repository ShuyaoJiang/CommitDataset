[+++ b/src/asciidoc/testing.adoc, +==== General testing utilities, +The `org.springframework.test.util` package contains several general purpose utilities, +for use in unit and integration testing., +, +`ReflectionTestUtils` is a collection of reflection-based utility methods. Developers use, +these methods in testing scenarios where they need to change the value of a constant, set, +`AopTestUtils` is a collection of AOP-related utility methods. These methods can be used, +to obtain a reference to the underlying target object hidden behind one or more Spring, +proxies. For example, if you have configured a bean as a dynamic mock using a library, +like EasyMock or Mockito and the mock is wrapped in a Spring proxy, you may need direct, +access to the underlying mock in order to configure expectations on it and perform, +verifications. For Spring's core AOP utilities, see `AopUtils` and `AopProxyUtils`., +, +++ b/src/asciidoc/testing.adoc, +==== General testing utilities, +The `org.springframework.test.util` package contains several general purpose utilities, +for use in unit and integration testing., +, +`ReflectionTestUtils` is a collection of reflection-based utility methods. Developers use, +these methods in testing scenarios where they need to change the value of a constant, set, +`AopTestUtils` is a collection of AOP-related utility methods. These methods can be used, +to obtain a reference to the underlying target object hidden behind one or more Spring, +proxies. For example, if you have configured a bean as a dynamic mock using a library, +like EasyMock or Mockito and the mock is wrapped in a Spring proxy, you may need direct, +access to the underlying mock in order to configure expectations on it and perform, +verifications. For Spring's core AOP utilities, see `AopUtils` and `AopProxyUtils`., +, +++ b/src/asciidoc/whats-new.adoc, +** See <<unit-testing-utilities>> for details.]