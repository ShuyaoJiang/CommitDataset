[+++ b/spring-context/src/main/java/org/springframework/cache/concurrent/ConcurrentMapCacheManager.java, + * Copyright 2002-2014 the original author or authors., +import java.util.Map;, +	 * <p>Calling this with a {@code null} collection argument resets the, +	 * mode to 'dynamic', allowing for further creation of caches again., +		else {, +			this.dynamic = true;, +		}, +	 * <p>Note: A change of the null-value setting will reset all existing caches,, +	 * if any, to reconfigure them with the new null-value requirement., +		if (allowNullValues != this.allowNullValues) {, +			// Need to recreate all Cache instances with the new null-value configuration..., +			for (Map.Entry<String, Cache> entry : this.cacheMap.entrySet()) {, +				entry.setValue(createConcurrentMapCache(entry.getKey()));, +			}, +		}, +++ b/spring-context/src/main/java/org/springframework/cache/concurrent/ConcurrentMapCacheManager.java, + * Copyright 2002-2014 the original author or authors., +import java.util.Map;, +	 * <p>Calling this with a {@code null} collection argument resets the, +	 * mode to 'dynamic', allowing for further creation of caches again., +		else {, +			this.dynamic = true;, +		}, +	 * <p>Note: A change of the null-value setting will reset all existing caches,, +	 * if any, to reconfigure them with the new null-value requirement., +		if (allowNullValues != this.allowNullValues) {, +			// Need to recreate all Cache instances with the new null-value configuration..., +			for (Map.Entry<String, Cache> entry : this.cacheMap.entrySet()) {, +				entry.setValue(createConcurrentMapCache(entry.getKey()));, +			}, +		}, +++ b/spring-context/src/test/java/org/springframework/cache/concurrent/ConcurrentMapCacheManagerTests.java, + * Copyright 2002-2014 the original author or authors., +		ConcurrentMapCacheManager cm = new ConcurrentMapCacheManager("c1", "c2");, +, +		cm.setAllowNullValues(false);, +		Cache cache1x = cm.getCache("c1");, +		assertTrue(cache1x instanceof ConcurrentMapCache);, +		assertTrue(cache1x != cache1);, +		Cache cache2x = cm.getCache("c2");, +		assertTrue(cache2x instanceof ConcurrentMapCache);, +		assertTrue(cache2x != cache2);, +		Cache cache3x = cm.getCache("c3");, +		assertNull(cache3x);, +, +		cache1x.put("key1", "value1");, +		assertEquals("value1", cache1x.get("key1").get());, +		cache1x.put("key2", 2);, +		assertEquals(2, cache1x.get("key2").get());, +		try {, +			cache1x.put("key3", null);, +			fail("Should have thrown NullPointerException");, +		}, +		catch (NullPointerException ex) {, +			// expected, +		}, +, +		cm.setAllowNullValues(true);, +		Cache cache1y = cm.getCache("c1");, +, +		cache1y.put("key3", null);, +		assertNull(cache1y.get("key3").get());, +		cache1y.evict("key3");, +		assertNull(cache1y.get("key3"));]