[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/jetty/JettyRequestUpgradeStrategy.java, + * Copyright 2002-2016 the original author or authors., + * A {@link RequestUpgradeStrategy} for use with Jetty 9.3 and higher. Based on, + * Jetty's internal {@code org.eclipse.jetty.websocket.server.WebSocketHandler} class., +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/jetty/JettyRequestUpgradeStrategy.java, + * Copyright 2002-2016 the original author or authors., + * A {@link RequestUpgradeStrategy} for use with Jetty 9.3 and higher. Based on, + * Jetty's internal {@code org.eclipse.jetty.websocket.server.WebSocketHandler} class., +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy.java, + * Copyright 2002-2016 the original author or authors., + * <p>Works with Tyrus 1.11 (WebLogic 12.2.1) and Tyrus 1.12 (GlassFish 4.1.1)., + * @author Juergen Hoeller, +	private final ComponentProviderService componentProvider = ComponentProviderService.create();, +, +, +	public String[] getSupportedVersions() {, +		return StringUtils.commaDelimitedListToStringArray(Version.getSupportedWireProtocolVersions());, +	}, +, +	protected List<WebSocketExtension> getInstalledExtensions(WebSocketContainer container) {, +		try {, +			return super.getInstalledExtensions(container);, +		}, +		catch (UnsupportedOperationException ex) {, +			return new ArrayList<WebSocketExtension>(0);, +		}, +	}, +, +	@Override, +	public void upgradeInternal(ServerHttpRequest request, ServerHttpResponse response,, +			String selectedProtocol, List<Extension> extensions, Endpoint endpoint), +			throws HandshakeFailureException {, +, +		HttpServletRequest servletRequest = getHttpServletRequest(request);, +		HttpServletResponse servletResponse = getHttpServletResponse(response);, +, +		TyrusServerContainer serverContainer = (TyrusServerContainer) getContainer(servletRequest);, +		TyrusWebSocketEngine engine = (TyrusWebSocketEngine) serverContainer.getWebSocketEngine();, +		Object tyrusEndpoint = null;, +		boolean success;, +, +		try {, +			// Shouldn't matter for processing but must be unique, +			String path = "/" + random.nextLong();, +			tyrusEndpoint = createTyrusEndpoint(endpoint, path, selectedProtocol, extensions, serverContainer, engine);, +			register(engine, tyrusEndpoint);, +, +			HttpHeaders headers = request.getHeaders();, +			RequestContext requestContext = createRequestContext(servletRequest, path, headers);, +			TyrusUpgradeResponse upgradeResponse = new TyrusUpgradeResponse();, +			UpgradeInfo upgradeInfo = engine.upgrade(requestContext, upgradeResponse);, +			success = SUCCESS.equals(upgradeInfo.getStatus());, +			if (success) {, +				if (logger.isTraceEnabled()) {, +					logger.trace("Successful request upgrade: " + upgradeResponse.getHeaders());, +				}, +				handleSuccess(servletRequest, servletResponse, upgradeInfo, upgradeResponse);, +			}, +		}, +		catch (Exception ex) {, +			unregisterTyrusEndpoint(engine, tyrusEndpoint);, +			throw new HandshakeFailureException("Error during handshake: " + request.getURI(), ex);, +		}, +, +		unregisterTyrusEndpoint(engine, tyrusEndpoint);, +		if (!success) {, +			throw new HandshakeFailureException("Unexpected handshake failure: " + request.getURI());]