[+++ b/spring-test/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java, + * @author Sam Brannen, +				assertEquals("Query param [" + name + "]", expectedValues[i], params.get(name).get(i));, +++ b/spring-test/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java, + * @author Sam Brannen, +				assertEquals("Query param [" + name + "]", expectedValues[i], params.get(name).get(i));, +++ b/spring-test/src/test/java/org/springframework/test/web/client/match/MockRestRequestMatchersTests.java, + * Copyright 2002-2018 the original author or authors., +import static org.hamcrest.MatcherAssert.assertThat;, +import static org.junit.jupiter.api.Assertions.assertThrows;, + * @author Sam Brannen, +	@Test, +		assertThrows(AssertionError.class,, +				() -> MockRestRequestMatchers.requestTo("http://foo.com/wrong").match(this.request));, +	@Test, +		AssertionError error = assertThrows(AssertionError.class,, +				() -> MockRestRequestMatchers.method(HttpMethod.GET).match(this.request));, +		assertThat(error.getMessage(), containsString("expected:<GET> but was:<POST>"));, +	@Test, +		AssertionError error = assertThrows(AssertionError.class,, +				() -> MockRestRequestMatchers.header("foo", "bar").match(this.request));, +		assertThat(error.getMessage(), containsString("was null"));, +	@Test, +		AssertionError error = assertThrows(AssertionError.class,, +				() -> MockRestRequestMatchers.header("foo", "bad").match(this.request));, +		assertThat(error.getMessage(), containsString("expected:<bad> but was:<bar>"));, +	@Test, +		AssertionError error = assertThrows(AssertionError.class,, +				() -> MockRestRequestMatchers.header("foo", containsString("baz")).match(this.request));, +		assertThat(error.getMessage(), containsString("but was null"));, +	@Test, +		AssertionError error = assertThrows(AssertionError.class,, +				() -> MockRestRequestMatchers.header("foo", containsString("bx")).match(this.request));, +		assertThat(error.getMessage(), containsString("was \"bar\""));, +	@Test, +		AssertionError error = assertThrows(AssertionError.class,, +				() -> MockRestRequestMatchers.header("foo", "bar").match(this.request));, +		assertThat(error.getMessage(), containsString("but was null"));, +	@Test, +		AssertionError error = assertThrows(AssertionError.class,, +				() -> MockRestRequestMatchers.header("foo", "bar", "baz").match(this.request));, +		assertThat(error.getMessage(), containsString("to have at least <2> values"));, +, +	@Test, +, +		AssertionError error = assertThrows(AssertionError.class,, +				() -> MockRestRequestMatchers.queryParam("foo", "bar").match(this.request));, +		assertThat(error.getMessage(), containsString("but was null"));, +	@Test, +, +		AssertionError error = assertThrows(AssertionError.class,, +				() -> MockRestRequestMatchers.queryParam("foo", "bad").match(this.request));, +		assertThat(error.getMessage(), containsString("expected:<bad> but was:<bar>"));, +, +	@Test, +, +		AssertionError error = assertThrows(AssertionError.class,, +				() -> MockRestRequestMatchers.queryParam("foo", containsString("bx")).match(this.request));, +		assertThat(error.getMessage(), containsString("was \"bar\""));]