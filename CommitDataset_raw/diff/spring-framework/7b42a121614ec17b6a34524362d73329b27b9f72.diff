[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +			logger.info("JSR-330 'javax.inject.Inject' annotation found and supported for autowiring");, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +			logger.info("JSR-330 'javax.inject.Inject' annotation found and supported for autowiring");, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +	private static Class javaxInjectProviderClass = null;, +, +	static {, +		ClassLoader cl = DefaultListableBeanFactory.class.getClassLoader();, +		try {, +			javaxInjectProviderClass = cl.loadClass("javax.inject.Provider");, +		}, +		catch (ClassNotFoundException ex) {, +			// JSR-330 API not available - Provider interface simply not supported then., +		}, +	}, +, +, +		else if (descriptor.getDependencyType().equals(javaxInjectProviderClass)) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +			logger.info("JSR-330 'javax.inject.Inject' annotation found and supported for autowiring");, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +	private static Class javaxInjectProviderClass = null;, +, +	static {, +		ClassLoader cl = DefaultListableBeanFactory.class.getClassLoader();, +		try {, +			javaxInjectProviderClass = cl.loadClass("javax.inject.Provider");, +		}, +		catch (ClassNotFoundException ex) {, +			// JSR-330 API not available - Provider interface simply not supported then., +		}, +	}, +, +, +		else if (descriptor.getDependencyType().equals(javaxInjectProviderClass)) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessor.java, +		ClassLoader cl = CommonAnnotationBeanPostProcessor.class.getClassLoader();, +			webServiceRefClass = (Class) cl.loadClass("javax.xml.ws.WebServiceRef");, +			ejbRefClass = (Class) cl.loadClass("javax.ejb.EJB");, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +			logger.info("JSR-330 'javax.inject.Inject' annotation found and supported for autowiring");, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +	private static Class javaxInjectProviderClass = null;, +, +	static {, +		ClassLoader cl = DefaultListableBeanFactory.class.getClassLoader();, +		try {, +			javaxInjectProviderClass = cl.loadClass("javax.inject.Provider");, +		}, +		catch (ClassNotFoundException ex) {, +			// JSR-330 API not available - Provider interface simply not supported then., +		}, +	}, +, +, +		else if (descriptor.getDependencyType().equals(javaxInjectProviderClass)) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessor.java, +		ClassLoader cl = CommonAnnotationBeanPostProcessor.class.getClassLoader();, +			webServiceRefClass = (Class) cl.loadClass("javax.xml.ws.WebServiceRef");, +			ejbRefClass = (Class) cl.loadClass("javax.ejb.EJB");, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/AsyncAnnotationAdvisor.java, +		ClassLoader cl = AsyncAnnotationAdvisor.class.getClassLoader();, +			asyncAnnotationTypes.add((Class) cl.loadClass("javax.ejb.Asynchronous"));, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +			logger.info("JSR-330 'javax.inject.Inject' annotation found and supported for autowiring");, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +	private static Class javaxInjectProviderClass = null;, +, +	static {, +		ClassLoader cl = DefaultListableBeanFactory.class.getClassLoader();, +		try {, +			javaxInjectProviderClass = cl.loadClass("javax.inject.Provider");, +		}, +		catch (ClassNotFoundException ex) {, +			// JSR-330 API not available - Provider interface simply not supported then., +		}, +	}, +, +, +		else if (descriptor.getDependencyType().equals(javaxInjectProviderClass)) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessor.java, +		ClassLoader cl = CommonAnnotationBeanPostProcessor.class.getClassLoader();, +			webServiceRefClass = (Class) cl.loadClass("javax.xml.ws.WebServiceRef");, +			ejbRefClass = (Class) cl.loadClass("javax.ejb.EJB");, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/AsyncAnnotationAdvisor.java, +		ClassLoader cl = AsyncAnnotationAdvisor.class.getClassLoader();, +			asyncAnnotationTypes.add((Class) cl.loadClass("javax.ejb.Asynchronous"));, +++ b/org.springframework.core/src/main/java/org/springframework/core/CollectionFactory.java, +	private static Class navigableSetClass = null;, +	private static Class navigableMapClass = null;, +		ClassLoader cl = CollectionFactory.class.getClassLoader();, +			navigableSetClass = cl.loadClass("java.util.NavigableSet");, +			navigableMapClass = cl.loadClass("java.util.NavigableMap");, +			approximableCollectionTypes.add(navigableSetClass);, +			approximableMapTypes.add(navigableMapClass);, +			else if (SortedSet.class.equals(collectionType) || collectionType.equals(navigableSetClass)) {, +			else if (SortedMap.class.equals(mapType) || mapType.equals(navigableMapClass)) {]