[+++ b/spring-core/src/main/java/org/springframework/core/GenericCollectionTypeResolver.java, + * @author Phillip Webb, + * @see ResolvableType, +		return ResolvableType.forClass(collectionClass).asCollection().resolveGeneric();, +		return ResolvableType.forClass(mapClass).asMap().resolveGeneric(0);, +		return ResolvableType.forClass(mapClass).asMap().resolveGeneric(1);, +		return ResolvableType.forField(collectionField).asCollection().resolveGeneric();, +		return ResolvableType.forField(collectionField).getNested(nestingLevel).asCollection().resolveGeneric();, +	 * @deprecated as of 4.0 in favor of using {@link ResolvableType} for arbitrary nesting levels, +	@Deprecated, +		return ResolvableType.forField(collectionField).getNested(nestingLevel, typeIndexesPerLevel).asCollection().resolveGeneric();, +		return ResolvableType.forField(mapField).asMap().resolveGeneric(0);, +		return ResolvableType.forField(mapField).getNested(nestingLevel).asMap().resolveGeneric(0);, +	 * @deprecated as of 4.0 in favor of using {@link ResolvableType} for arbitrary nesting levels, +	@Deprecated, +		return ResolvableType.forField(mapField).getNested(nestingLevel, typeIndexesPerLevel).asMap().resolveGeneric(0);, +		return ResolvableType.forField(mapField).asMap().resolveGeneric(1);, +		return ResolvableType.forField(mapField).getNested(nestingLevel).asMap().resolveGeneric(1);, +	 * @deprecated as of 4.0 in favor of using {@link ResolvableType} for arbitrary nesting levels, +	@Deprecated, +		return ResolvableType.forField(mapField).getNested(nestingLevel, typeIndexesPerLevel).asMap().resolveGeneric(1);, +		return forMethodParameter(methodParam).asCollection().resolveGeneric();, +		return forMethodParameter(methodParam).asMap().resolveGeneric(0);, +		return forMethodParameter(methodParam).asMap().resolveGeneric(1);, +		return ResolvableType.forMethodReturn(method).asCollection().resolveGeneric();, +		return ResolvableType.forMethodReturn(method).getNested(nestingLevel).asCollection().resolveGeneric();, +		return ResolvableType.forMethodReturn(method).asMap().resolveGeneric(0);, +		return ResolvableType.forMethodReturn(method).getNested(nestingLevel).asMap().resolveGeneric(0);, +		return ResolvableType.forMethodReturn(method).asMap().resolveGeneric(1);, +		return ResolvableType.forMethodReturn(method).getNested(nestingLevel).asMap().resolveGeneric(1);, +	private static ResolvableType forMethodParameter(MethodParameter methodParam) {, +		if (methodParam.resolveClass != null) {, +			return ResolvableType.forMethodParameter(methodParam, methodParam.resolveClass);, +		return ResolvableType.forMethodParameter(methodParam);]