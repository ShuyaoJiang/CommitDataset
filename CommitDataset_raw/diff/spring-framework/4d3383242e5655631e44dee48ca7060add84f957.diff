[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import org.springframework.context.EnvironmentAware;, +			if (importStrategyBean instanceof EnvironmentAware) {, +				((EnvironmentAware) importStrategyBean).setEnvironment(this.environment);, +			}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import org.springframework.context.EnvironmentAware;, +			if (importStrategyBean instanceof EnvironmentAware) {, +				((EnvironmentAware) importStrategyBean).setEnvironment(this.environment);, +			}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ImportBeanDefinitionRegistrar.java, + * Copyright 2002-2013 the original author or authors., + * <li>{@link org.springframework.context.EnvironmentAware}</li>, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import org.springframework.context.EnvironmentAware;, +			if (importStrategyBean instanceof EnvironmentAware) {, +				((EnvironmentAware) importStrategyBean).setEnvironment(this.environment);, +			}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ImportBeanDefinitionRegistrar.java, + * Copyright 2002-2013 the original author or authors., + * <li>{@link org.springframework.context.EnvironmentAware}</li>, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ImportSelector.java, + * <li>{@link org.springframework.context.EnvironmentAware}</li>, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import org.springframework.context.EnvironmentAware;, +			if (importStrategyBean instanceof EnvironmentAware) {, +				((EnvironmentAware) importStrategyBean).setEnvironment(this.environment);, +			}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ImportBeanDefinitionRegistrar.java, + * Copyright 2002-2013 the original author or authors., + * <li>{@link org.springframework.context.EnvironmentAware}</li>, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ImportSelector.java, + * <li>{@link org.springframework.context.EnvironmentAware}</li>, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ImportBeanDefinitionRegistrarTests.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.context.EnvironmentAware;, +import org.springframework.core.env.Environment;, +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +, +		assertThat(SampleRegistrar.environment, is((Environment) context.getEnvironment()));, +			BeanFactoryAware, EnvironmentAware {, +		static Environment environment;, +		public void setEnvironment(Environment environment) {, +			SampleRegistrar.environment = environment;, +		}, +, +		@Override, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import org.springframework.context.EnvironmentAware;, +			if (importStrategyBean instanceof EnvironmentAware) {, +				((EnvironmentAware) importStrategyBean).setEnvironment(this.environment);, +			}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ImportBeanDefinitionRegistrar.java, + * Copyright 2002-2013 the original author or authors., + * <li>{@link org.springframework.context.EnvironmentAware}</li>, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ImportSelector.java, + * <li>{@link org.springframework.context.EnvironmentAware}</li>, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ImportBeanDefinitionRegistrarTests.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.context.EnvironmentAware;, +import org.springframework.core.env.Environment;, +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +, +		assertThat(SampleRegistrar.environment, is((Environment) context.getEnvironment()));, +			BeanFactoryAware, EnvironmentAware {, +		static Environment environment;, +		public void setEnvironment(Environment environment) {, +			SampleRegistrar.environment = environment;, +		}, +, +		@Override, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ImportSelectorTests.java, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.BeanClassLoaderAware;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.context.EnvironmentAware;, +import org.springframework.context.MessageSource;, +import org.springframework.context.ResourceLoaderAware;, +import org.springframework.context.annotation.ImportBeanDefinitionRegistrarTests.SampleRegistrar;, +import org.springframework.core.env.Environment;, +import org.springframework.core.io.ResourceLoader;, +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +import static org.mockito.Matchers.*;, +import static org.mockito.Mockito.*;, +, +		ordered.verify(beanFactory).registerBeanDefinition(eq("a"), (BeanDefinition) anyObject());, +		ordered.verify(beanFactory).registerBeanDefinition(eq("b"), (BeanDefinition) anyObject());, +		ordered.verify(beanFactory).registerBeanDefinition(eq("d"), (BeanDefinition) anyObject());, +		ordered.verify(beanFactory).registerBeanDefinition(eq("c"), (BeanDefinition) anyObject());, +	}, +, +	@Test, +	public void invokeAwareMethodsInImportSelector() {, +, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AwareConfig.class);, +		context.getBean(MessageSource.class);]