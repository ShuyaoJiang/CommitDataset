[+++ b/org.springframework.web/src/main/java/org/springframework/http/HttpHeaders.java, + * Copyright 2002-2011 the original author or authors., +		if (eTag != null) {, +			Assert.isTrue(eTag.startsWith("\"") || eTag.startsWith("W/"), "Invalid eTag, does not start with W/ or \"");, +			Assert.isTrue(eTag.endsWith("\""), "Invalid eTag, does not end with \"");, +		}, +			set(ETAG, eTag);, +		return getFirst(ETAG);, +		set(IF_NONE_MATCH, ifNoneMatch);, +			builder.append(ifNoneMatch);, +				result.add(token);, +++ b/org.springframework.web/src/main/java/org/springframework/http/HttpHeaders.java, + * Copyright 2002-2011 the original author or authors., +		if (eTag != null) {, +			Assert.isTrue(eTag.startsWith("\"") || eTag.startsWith("W/"), "Invalid eTag, does not start with W/ or \"");, +			Assert.isTrue(eTag.endsWith("\""), "Invalid eTag, does not end with \"");, +		}, +			set(ETAG, eTag);, +		return getFirst(ETAG);, +		set(IF_NONE_MATCH, ifNoneMatch);, +			builder.append(ifNoneMatch);, +				result.add(token);, +++ b/org.springframework.web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java, + * Copyright 2002-2011 the original author or authors., +++ b/org.springframework.web/src/main/java/org/springframework/http/HttpHeaders.java, + * Copyright 2002-2011 the original author or authors., +		if (eTag != null) {, +			Assert.isTrue(eTag.startsWith("\"") || eTag.startsWith("W/"), "Invalid eTag, does not start with W/ or \"");, +			Assert.isTrue(eTag.endsWith("\""), "Invalid eTag, does not end with \"");, +		}, +			set(ETAG, eTag);, +		return getFirst(ETAG);, +		set(IF_NONE_MATCH, ifNoneMatch);, +			builder.append(ifNoneMatch);, +				result.add(token);, +++ b/org.springframework.web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java, + * Copyright 2002-2011 the original author or authors., +++ b/org.springframework.web/src/test/java/org/springframework/http/HttpHeadersTests.java, + * Copyright 2002-2011 the original author or authors., +import static org.junit.Assert.*;, +, +		String eTag = "\"v2.6\"";, +		headers.setETag(eTag);, +		assertEquals("Invalid ETag header", eTag, headers.getETag());, +		assertEquals("Invalid ETag header", "\"v2.6\"", headers.getFirst("ETag"));, +	}, +, +	@Test(expected = IllegalArgumentException.class), +	public void illegalETag() {, +		String ifNoneMatch = "\"v2.6\"";, +		String ifNoneMatch1 = "\"v2.6\"";, +		String ifNoneMatch2 = "\"v2.7\"";, +++ b/org.springframework.web/src/main/java/org/springframework/http/HttpHeaders.java, + * Copyright 2002-2011 the original author or authors., +		if (eTag != null) {, +			Assert.isTrue(eTag.startsWith("\"") || eTag.startsWith("W/"), "Invalid eTag, does not start with W/ or \"");, +			Assert.isTrue(eTag.endsWith("\""), "Invalid eTag, does not end with \"");, +		}, +			set(ETAG, eTag);, +		return getFirst(ETAG);, +		set(IF_NONE_MATCH, ifNoneMatch);, +			builder.append(ifNoneMatch);, +				result.add(token);, +++ b/org.springframework.web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java, + * Copyright 2002-2011 the original author or authors., +++ b/org.springframework.web/src/test/java/org/springframework/http/HttpHeadersTests.java, + * Copyright 2002-2011 the original author or authors., +import static org.junit.Assert.*;, +, +		String eTag = "\"v2.6\"";, +		headers.setETag(eTag);, +		assertEquals("Invalid ETag header", eTag, headers.getETag());, +		assertEquals("Invalid ETag header", "\"v2.6\"", headers.getFirst("ETag"));, +	}, +, +	@Test(expected = IllegalArgumentException.class), +	public void illegalETag() {, +		String ifNoneMatch = "\"v2.6\"";, +		String ifNoneMatch1 = "\"v2.6\"";, +		String ifNoneMatch2 = "\"v2.7\"";, +++ b/org.springframework.web/src/test/java/org/springframework/web/context/request/ServletWebRequestTests.java, + * Copyright 2002-2011 the original author or authors., +		String eTag = "\"Foo\"";, +		servletRequest.addHeader("If-None-Match", eTag );, +	public void checkModifiedETag() {]