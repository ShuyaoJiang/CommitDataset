[+++ b/spring-web/src/main/java/org/springframework/web/util/patterns/CaptureTheRestPathElement.java, +	 * @param pos position of the path element within the path pattern text, +	 * @param separator the separator used in the path pattern, +		super(pos, separator);, +		if (matchingContext.determineRemaining) {, +			matchingContext.remainingPathIndex = matchingContext.candidateLength;, +			return true;, +		}, +++ b/spring-web/src/main/java/org/springframework/web/util/patterns/CaptureTheRestPathElement.java, +	 * @param pos position of the path element within the path pattern text, +	 * @param separator the separator used in the path pattern, +		super(pos, separator);, +		if (matchingContext.determineRemaining) {, +			matchingContext.remainingPathIndex = matchingContext.candidateLength;, +			return true;, +		}, +++ b/spring-web/src/main/java/org/springframework/web/util/patterns/CaptureVariablePathElement.java, +	CaptureVariablePathElement(int pos, char[] captureDescriptor, boolean caseSensitive, char separator) {, +		super(pos, separator);, +			if (matchingContext.determineRemaining && nextPos > candidateIndex) {, +				matchingContext.remainingPathIndex = nextPos;, +				match = true;, +			}, +			else {, +		}, +++ b/spring-web/src/main/java/org/springframework/web/util/patterns/CaptureTheRestPathElement.java, +	 * @param pos position of the path element within the path pattern text, +	 * @param separator the separator used in the path pattern, +		super(pos, separator);, +		if (matchingContext.determineRemaining) {, +			matchingContext.remainingPathIndex = matchingContext.candidateLength;, +			return true;, +		}, +++ b/spring-web/src/main/java/org/springframework/web/util/patterns/CaptureVariablePathElement.java, +	CaptureVariablePathElement(int pos, char[] captureDescriptor, boolean caseSensitive, char separator) {, +		super(pos, separator);, +			if (matchingContext.determineRemaining && nextPos > candidateIndex) {, +				matchingContext.remainingPathIndex = nextPos;, +				match = true;, +			}, +			else {, +		}, +++ b/spring-web/src/main/java/org/springframework/web/util/patterns/InternalPathPatternParser.java, +						newPE = new CaptureVariablePathElement(pathElementStart, pathElementText, caseSensitive, separator);, +						caseSensitive, pathPatternData, separator);, +					newPE = new WildcardPathElement(pathElementStart, separator);, +					newPE = new RegexPathElement(pathElementStart, pathElementText, caseSensitive, pathPatternData, separator);, +						singleCharWildcardCount, caseSensitive, separator);, +				newPE = new LiteralPathElement(pathElementStart, pathElementText, caseSensitive, separator);, +++ b/spring-web/src/main/java/org/springframework/web/util/patterns/CaptureTheRestPathElement.java, +	 * @param pos position of the path element within the path pattern text, +	 * @param separator the separator used in the path pattern, +		super(pos, separator);, +		if (matchingContext.determineRemaining) {, +			matchingContext.remainingPathIndex = matchingContext.candidateLength;, +			return true;, +		}, +++ b/spring-web/src/main/java/org/springframework/web/util/patterns/CaptureVariablePathElement.java, +	CaptureVariablePathElement(int pos, char[] captureDescriptor, boolean caseSensitive, char separator) {, +		super(pos, separator);, +			if (matchingContext.determineRemaining && nextPos > candidateIndex) {, +				matchingContext.remainingPathIndex = nextPos;, +				match = true;, +			}, +			else {, +		}, +++ b/spring-web/src/main/java/org/springframework/web/util/patterns/InternalPathPatternParser.java, +						newPE = new CaptureVariablePathElement(pathElementStart, pathElementText, caseSensitive, separator);, +						caseSensitive, pathPatternData, separator);, +					newPE = new WildcardPathElement(pathElementStart, separator);, +					newPE = new RegexPathElement(pathElementStart, pathElementText, caseSensitive, pathPatternData, separator);, +						singleCharWildcardCount, caseSensitive, separator);, +				newPE = new LiteralPathElement(pathElementStart, pathElementText, caseSensitive, separator);, +++ b/spring-web/src/main/java/org/springframework/web/util/patterns/LiteralPathElement.java, +	public LiteralPathElement(int pos, char[] literalText, boolean caseSensitive, char separator) {, +		super(pos, separator);, +			if (matchingContext.determineRemaining && nextIfExistsIsSeparator(candidateIndex, matchingContext)) {, +				matchingContext.remainingPathIndex = candidateIndex;, +				return true;, +			}, +			else {, +		}, +++ b/spring-web/src/main/java/org/springframework/web/util/patterns/CaptureTheRestPathElement.java, +	 * @param pos position of the path element within the path pattern text, +	 * @param separator the separator used in the path pattern, +		super(pos, separator);, +		if (matchingContext.determineRemaining) {, +			matchingContext.remainingPathIndex = matchingContext.candidateLength;, +			return true;, +		}, +++ b/spring-web/src/main/java/org/springframework/web/util/patterns/CaptureVariablePathElement.java, +	CaptureVariablePathElement(int pos, char[] captureDescriptor, boolean caseSensitive, char separator) {, +		super(pos, separator);, +			if (matchingContext.determineRemaining && nextPos > candidateIndex) {, +				matchingContext.remainingPathIndex = nextPos;, +				match = true;, +			}, +			else {, +		}, +++ b/spring-web/src/main/java/org/springframework/web/util/patterns/InternalPathPatternParser.java]