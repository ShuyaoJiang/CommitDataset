[+++ b/spring-context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java, + * Copyright 2002-2017 the original author or authors., +	 * Return the {@code Environment} for this application context in configurable, +	 * form, allowing for further customization., +	 * @since 3.1, +	 */, +	@Override, +	ConfigurableEnvironment getEnvironment();, +, +	/**, +++ b/spring-context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java, + * Copyright 2002-2017 the original author or authors., +	 * Return the {@code Environment} for this application context in configurable, +	 * form, allowing for further customization., +	 * @since 3.1, +	 */, +	@Override, +	ConfigurableEnvironment getEnvironment();, +, +	/**, +++ b/spring-context/src/main/java/org/springframework/context/EnvironmentAware.java, + * Copyright 2002-2017 the original author or authors., + * @see org.springframework.core.env.EnvironmentCapable, +	 * Set the {@code Environment} that this component runs in., +++ b/spring-context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java, + * Copyright 2002-2017 the original author or authors., +	 * Return the {@code Environment} for this application context in configurable, +	 * form, allowing for further customization., +	 * @since 3.1, +	 */, +	@Override, +	ConfigurableEnvironment getEnvironment();, +, +	/**, +++ b/spring-context/src/main/java/org/springframework/context/EnvironmentAware.java, + * Copyright 2002-2017 the original author or authors., + * @see org.springframework.core.env.EnvironmentCapable, +	 * Set the {@code Environment} that this component runs in., +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +	 * Set the {@code Environment} for this application context., +	 * <p>Default value is determined by {@link #createEnvironment()}. Replacing the, +	 * default with this method is one option but configuration through {@link, +	 * #getEnvironment()} should also be considered. In either case, such modifications, +	 * should be performed <em>before</em> {@link #refresh()}., +	 * @see org.springframework.context.support.AbstractApplicationContext#createEnvironment, +	 */, +	@Override, +	public void setEnvironment(ConfigurableEnvironment environment) {, +		this.environment = environment;, +	}, +, +	/**, +	 * Return the {@code Environment} for this application context in configurable, +	 * form, allowing for further customization., +	 * <p>If none specified, a default environment will be initialized via, +	 * Create and return a new {@link StandardEnvironment}., +	 * <p>Subclasses may override this method in order to supply, +	 * a custom {@link ConfigurableEnvironment} implementation., +	protected ConfigurableEnvironment createEnvironment() {, +		return new StandardEnvironment();, +	 * Set the parent of this application context., +++ b/spring-context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java, + * Copyright 2002-2017 the original author or authors., +	 * Return the {@code Environment} for this application context in configurable, +	 * form, allowing for further customization., +	 * @since 3.1, +	 */, +	@Override, +	ConfigurableEnvironment getEnvironment();, +, +	/**, +++ b/spring-context/src/main/java/org/springframework/context/EnvironmentAware.java, + * Copyright 2002-2017 the original author or authors., + * @see org.springframework.core.env.EnvironmentCapable, +	 * Set the {@code Environment} that this component runs in., +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +	 * Set the {@code Environment} for this application context., +	 * <p>Default value is determined by {@link #createEnvironment()}. Replacing the, +	 * default with this method is one option but configuration through {@link, +	 * #getEnvironment()} should also be considered. In either case, such modifications, +	 * should be performed <em>before</em> {@link #refresh()}., +	 * @see org.springframework.context.support.AbstractApplicationContext#createEnvironment, +	 */, +	@Override, +	public void setEnvironment(ConfigurableEnvironment environment) {, +		this.environment = environment;, +	}, +, +	/**, +	 * Return the {@code Environment} for this application context in configurable, +	 * form, allowing for further customization., +	 * <p>If none specified, a default environment will be initialized via, +	 * Create and return a new {@link StandardEnvironment}., +	 * <p>Subclasses may override this method in order to supply, +	 * a custom {@link ConfigurableEnvironment} implementation., +	protected ConfigurableEnvironment createEnvironment() {, +		return new StandardEnvironment();, +	 * Set the parent of this application context., +++ b/spring-core/src/main/java/org/springframework/core/env/EnvironmentCapable.java, + * Copyright 2002-2017 the original author or authors.]