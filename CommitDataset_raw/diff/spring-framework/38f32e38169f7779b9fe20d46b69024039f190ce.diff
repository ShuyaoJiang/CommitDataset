[+++ b/spring-web/src/main/java/org/springframework/http/CacheControl.java, +/*, + * Copyright 2002-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.http;, +, +import java.util.concurrent.TimeUnit;, +, +import org.springframework.util.StringUtils;, +, +/**, + * A builder for creating "Cache-Control" HTTP response headers., + *, + * <p>Adding Cache-Control directives to HTTP responses can significantly improve the client experience when interacting, + * with a web application. This builder creates opinionated "Cache-Control" headers with response directives only, with, + * several use cases in mind., + *, + * <ul>, + *     <li>Caching HTTP responses with {@code CacheControl cc = CacheControl.maxAge(1, TimeUnit.HOURS)}, + *     will result in {@code Cache-Control: "max-age=3600"}</li>, + *     <li>Preventing cache with {@code CacheControl cc = CacheControl.noStore()}, + *     will result in {@code Cache-Control: "no-store"}</li>, + *     <li>Advanced cases like {@code CacheControl cc = CacheControl.maxAge(1, TimeUnit.HOURS).noTransform().cachePublic()}, + *     will result in {@code Cache-Control: "max-age=3600, no-transform, public"}</li>, + * </ul>, + *, + * <p>Note that to be efficient, Cache-Control headers should be written along HTTP validators such as, + * "Last-Modifed" or "ETag" headers., + *, + * @author Brian Clozel, + * @see <a href="https://tools.ietf.org/html/rfc7234#section-5.2.2">rfc7234 section 5.2.2</a>, + * @see <a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching">, + *     HTTP caching - Google developers reference</a>, + * @see <a href="https://www.mnot.net/cache_docs/">Mark Nottingham's cache documentation</a>, + * @since 4.2, + */, +public class CacheControl {, +, +	private boolean mustRevalidate;, +, +	private boolean noCache;, +, +	private boolean noStore;, +, +	private boolean noTransform;, +, +	private boolean cachePublic;, +, +	private boolean cachePrivate;, +, +	private boolean proxyRevalidate;, +, +	private long maxAge;, +, +	private long sMaxAge;, +, +	/**, +	 * Create a CacheControl instance with default values,, +	 * i.e. that will produce an empty "Cache-Control" header value., +	 */, +	protected CacheControl() {, +		this.mustRevalidate = false;, +		this.noCache = false;, +		this.noStore = false;, +		this.noTransform = false;, +		this.cachePublic = false;, +		this.cachePrivate = false;, +		this.proxyRevalidate = false;, +		this.maxAge = -1;, +		this.sMaxAge = -1;, +	}, +, +	/**, +	 * Add a "max-age=" directive., +	 *, +	 * <p>This directive is well suited for publicly caching resources, knowing that they won't change within, +	 * the configured amount of time. Additional directives can be also used, in case resources shouldn't be, +	 * cached ({@link #cachePrivate()}) or transformed ({@link #noTransform()}) by shared caches., +	 *, +	 * <p>In order to prevent caches to reuse the cached response even when it has become stale, +	 * (i.e. the "max-age" delay is passed), the "must-revalidate" directive should be set ({@link #mustRevalidate()}, +	 *, +	 * @param maxAge the maximum time the response should be cached, +	 * @param unit the time unit of the {@code maxAge} argument, +	 * @return {@code this}, to facilitate method chaining, +	 *, +	 * @see <a href="https://tools.ietf.org/html/rfc7234#section-5.2.2.8">rfc7234 section 5.2.2.8</a>, +	 */]