[+++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, +	 * Create a new empty accessor. Wrapped instance needs to be set afterwards., +	 * Create a new empty accessor. Wrapped instance needs to be set afterwards., +	 * Create a new accessor for the given object., +	 * Create a new accessor, wrapping a new instance of the specified class., +	 * Create a new accessor for the given object,, +	 * Create a new accessor for the given object,, +		Assert.notNull(object, "Target object must not be null");, +	protected String getFinalPath(AbstractNestablePropertyAccessor pa, String nestedPath) {, +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, +	 * Create a new empty accessor. Wrapped instance needs to be set afterwards., +	 * Create a new empty accessor. Wrapped instance needs to be set afterwards., +	 * Create a new accessor for the given object., +	 * Create a new accessor, wrapping a new instance of the specified class., +	 * Create a new accessor for the given object,, +	 * Create a new accessor for the given object,, +		Assert.notNull(object, "Target object must not be null");, +	protected String getFinalPath(AbstractNestablePropertyAccessor pa, String nestedPath) {, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +, +	 * Create a new empty BeanWrapperImpl. Wrapped instance needs to be set afterwards., +	 * Create a new empty BeanWrapperImpl. Wrapped instance needs to be set afterwards., +	 * Create a new BeanWrapperImpl for the given object., +	 * Create a new BeanWrapperImpl, wrapping a new instance of the specified class., +	 * Create a new BeanWrapperImpl for the given object,, +	 * Create a new BeanWrapperImpl for the given object,, +	 * @param parent the containing BeanWrapper (must not be {@code null}), +	private BeanWrapperImpl(Object object, String nestedPath, BeanWrapperImpl parent) {, +		super(object, nestedPath, parent);, +		setSecurityContext(parent.acc);, +, +, +		GenericTypeAwarePropertyDescriptor gpd = (GenericTypeAwarePropertyDescriptor) pd;, +		return new Property(gpd.getBeanClass(), gpd.getReadMethod(), gpd.getWriteMethod(), gpd.getName());, +		BeanWrapperImpl nestedBw = (BeanWrapperImpl) getPropertyAccessorForPropertyPath(propertyName);, +		String finalPath = getFinalPath(nestedBw, propertyName);, +		PropertyDescriptor pd = nestedBw.getCachedIntrospectionResults().getPropertyDescriptor(finalPath);, +		if (pd == null) {, +		return pd;, +			super(pd.getPropertyType(), pd.getReadMethod() != null, pd.getWriteMethod() != null);, +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, +	 * Create a new empty accessor. Wrapped instance needs to be set afterwards., +	 * Create a new empty accessor. Wrapped instance needs to be set afterwards., +	 * Create a new accessor for the given object., +	 * Create a new accessor, wrapping a new instance of the specified class., +	 * Create a new accessor for the given object,, +	 * Create a new accessor for the given object,, +		Assert.notNull(object, "Target object must not be null");, +	protected String getFinalPath(AbstractNestablePropertyAccessor pa, String nestedPath) {, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +, +	 * Create a new empty BeanWrapperImpl. Wrapped instance needs to be set afterwards., +	 * Create a new empty BeanWrapperImpl. Wrapped instance needs to be set afterwards., +	 * Create a new BeanWrapperImpl for the given object., +	 * Create a new BeanWrapperImpl, wrapping a new instance of the specified class., +	 * Create a new BeanWrapperImpl for the given object,, +	 * Create a new BeanWrapperImpl for the given object,, +	 * @param parent the containing BeanWrapper (must not be {@code null}), +	private BeanWrapperImpl(Object object, String nestedPath, BeanWrapperImpl parent) {, +		super(object, nestedPath, parent);, +		setSecurityContext(parent.acc);, +, +, +		GenericTypeAwarePropertyDescriptor gpd = (GenericTypeAwarePropertyDescriptor) pd;, +		return new Property(gpd.getBeanClass(), gpd.getReadMethod(), gpd.getWriteMethod(), gpd.getName());, +		BeanWrapperImpl nestedBw = (BeanWrapperImpl) getPropertyAccessorForPropertyPath(propertyName);, +		String finalPath = getFinalPath(nestedBw, propertyName);, +		PropertyDescriptor pd = nestedBw.getCachedIntrospectionResults().getPropertyDescriptor(finalPath);, +		if (pd == null) {, +		return pd;, +			super(pd.getPropertyType(), pd.getReadMethod() != null, pd.getWriteMethod() != null);, +++ b/spring-beans/src/main/java/org/springframework/beans/DirectFieldAccessor.java, +, +	/**, +	 * Create a new DirectFieldAccessor for the given object., +	 * @param object object wrapped by this DirectFieldAccessor, +	 */, +	/**, +	 * Create a new DirectFieldAccessor for the given object,, +	 * registering a nested path that the object is in., +	 * @param object object wrapped by this DirectFieldAccessor, +	 * @param nestedPath the nested path of the object, +	 * @param parent the containing DirectFieldAccessor (must not be {@code null}), +	 */, +	protected DirectFieldAccessor(Object object, String nestedPath, DirectFieldAccessor parent) {, +		super(object, nestedPath, parent);, +, +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, +	 * Create a new empty accessor. Wrapped instance needs to be set afterwards., +	 * Create a new empty accessor. Wrapped instance needs to be set afterwards., +	 * Create a new accessor for the given object., +	 * Create a new accessor, wrapping a new instance of the specified class., +	 * Create a new accessor for the given object,, +	 * Create a new accessor for the given object,, +		Assert.notNull(object, "Target object must not be null");, +	protected String getFinalPath(AbstractNestablePropertyAccessor pa, String nestedPath) {, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +, +	 * Create a new empty BeanWrapperImpl. Wrapped instance needs to be set afterwards., +	 * Create a new empty BeanWrapperImpl. Wrapped instance needs to be set afterwards.]