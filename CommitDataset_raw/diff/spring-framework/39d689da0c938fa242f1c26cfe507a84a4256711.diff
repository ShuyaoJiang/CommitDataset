[+++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java, +			if (response == null || HttpStatus.valueOf(response.getStatus()).is2xxSuccessful()) {, +					if(response.getHeader(HEADER_LAST_MODIFIED) == null) {, +		}, +			if (response == null || HttpStatus.valueOf(response.getStatus()).is2xxSuccessful()) {, +					if(response.getHeader(HEADER_ETAG) == null) {, +		}, +			if (response == null || HttpStatus.valueOf(response.getStatus()).is2xxSuccessful()) {, +					if(response.getHeader(HEADER_ETAG) == null) {, +					}, +					if(response.getHeader(HEADER_LAST_MODIFIED) == null) {, +		}, +++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java, +			if (response == null || HttpStatus.valueOf(response.getStatus()).is2xxSuccessful()) {, +					if(response.getHeader(HEADER_LAST_MODIFIED) == null) {, +		}, +			if (response == null || HttpStatus.valueOf(response.getStatus()).is2xxSuccessful()) {, +					if(response.getHeader(HEADER_ETAG) == null) {, +		}, +			if (response == null || HttpStatus.valueOf(response.getStatus()).is2xxSuccessful()) {, +					if(response.getHeader(HEADER_ETAG) == null) {, +					}, +					if(response.getHeader(HEADER_LAST_MODIFIED) == null) {, +		}, +++ b/spring-web/src/test/java/org/springframework/web/context/request/ServletWebRequestHttpMethodsTests.java, +		assertTrue(request.checkNotModified(epochTime));, +		assertEquals(304, servletResponse.getStatus());, +++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java, +			if (response == null || HttpStatus.valueOf(response.getStatus()).is2xxSuccessful()) {, +					if(response.getHeader(HEADER_LAST_MODIFIED) == null) {, +		}, +			if (response == null || HttpStatus.valueOf(response.getStatus()).is2xxSuccessful()) {, +					if(response.getHeader(HEADER_ETAG) == null) {, +		}, +			if (response == null || HttpStatus.valueOf(response.getStatus()).is2xxSuccessful()) {, +					if(response.getHeader(HEADER_ETAG) == null) {, +					}, +					if(response.getHeader(HEADER_LAST_MODIFIED) == null) {, +		}, +++ b/spring-web/src/test/java/org/springframework/web/context/request/ServletWebRequestHttpMethodsTests.java, +		assertTrue(request.checkNotModified(epochTime));, +		assertEquals(304, servletResponse.getStatus());, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java, +import org.springframework.http.HttpStatus;, +		if (!entityHeaders.isEmpty()) {, +			outputMessage.getHeaders().putAll(entityHeaders);, +		}, +			outputMessage.setStatusCode(((ResponseEntity<?>) responseEntity).getStatusCode());, +			if (isResourceNotModified(inputMessage, outputMessage)) {, +				outputMessage.setStatusCode(HttpStatus.NOT_MODIFIED);, +	private boolean isResourceNotModified(ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage) {, +, +		List<String> ifNoneMatch = inputMessage.getHeaders().getIfNoneMatch();, +		long ifModifiedSince = inputMessage.getHeaders().getIfModifiedSince();, +		String eTag = addEtagPadding(outputMessage.getHeaders().getETag());, +		long lastModified = outputMessage.getHeaders().getLastModified();, +, +			notModified = isETagNotModified(ifNoneMatch, eTag) && isTimeStampNotModified(ifModifiedSince, lastModified);, +			notModified = isTimeStampNotModified(ifModifiedSince, lastModified);, +			notModified = isETagNotModified(ifNoneMatch, eTag);, +	private boolean isETagNotModified(List<String> ifNoneMatch, String etag) {, +		if (StringUtils.hasLength(etag)) {, +			for (String clientETag : ifNoneMatch) {, +				// compare weak/strong ETags as per https://tools.ietf.org/html/rfc7232#section-2.3, +				if (StringUtils.hasLength(clientETag) &&, +						(clientETag.replaceFirst("^W/", "").equals(etag.replaceFirst("^W/", "")), +								|| clientETag.equals("*"))) {, +					return true;, +				}, +			}, +		}, +		return false;, +	}, +, +	private boolean isTimeStampNotModified(long ifModifiedSince, long lastModifiedTimestamp) {, +		return (ifModifiedSince >= (lastModifiedTimestamp / 1000 * 1000));, +	}, +, +	private String addEtagPadding(String etag) {, +		if (StringUtils.hasLength(etag) &&, +				(!(etag.startsWith("\"") || etag.startsWith("W/\"")) || !etag.endsWith("\"")) ) {, +			etag = "\"" + etag + "\"";, +		}, +		return etag;, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java, +			if (response == null || HttpStatus.valueOf(response.getStatus()).is2xxSuccessful()) {, +					if(response.getHeader(HEADER_LAST_MODIFIED) == null) {, +		}, +			if (response == null || HttpStatus.valueOf(response.getStatus()).is2xxSuccessful()) {, +					if(response.getHeader(HEADER_ETAG) == null) {, +		}, +			if (response == null || HttpStatus.valueOf(response.getStatus()).is2xxSuccessful()) {, +					if(response.getHeader(HEADER_ETAG) == null) {, +					}, +					if(response.getHeader(HEADER_LAST_MODIFIED) == null) {, +		}, +++ b/spring-web/src/test/java/org/springframework/web/context/request/ServletWebRequestHttpMethodsTests.java, +		assertTrue(request.checkNotModified(epochTime));]