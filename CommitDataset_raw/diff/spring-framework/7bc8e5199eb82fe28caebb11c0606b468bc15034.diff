[+++ b/spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java, + * Designed to work in a native JMS environment as well as in a Java EE environment,, + * thread pool facility (such as a Java EE server's), for example using a, + * Java EE environment, in combination with a JTA-aware JMS {@code ConnectionFactory}, + * obtained from JNDI (check your Java EE server's documentation). Note that this, + * all Java EE servers (in particular JBoss). This non-caching behavior can be, +	 * managed in a specific fashion, for example within a Java EE environment., +	 * However, depending on the rules of your server with respect to the caching, +	 * of transactional resources, consider switching this setting to at least, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java, + * Designed to work in a native JMS environment as well as in a Java EE environment,, + * thread pool facility (such as a Java EE server's), for example using a, + * Java EE environment, in combination with a JTA-aware JMS {@code ConnectionFactory}, + * obtained from JNDI (check your Java EE server's documentation). Note that this, + * all Java EE servers (in particular JBoss). This non-caching behavior can be, +	 * managed in a specific fashion, for example within a Java EE environment., +	 * However, depending on the rules of your server with respect to the caching, +	 * of transactional resources, consider switching this setting to at least, +++ b/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java, + * <p>In other words, this converter can read and write the, + * <p>When writing multipart data, this converter uses other, + * MIME parts. By default, basic converters are registered (for {@code Strings}, + * {@link #setPartConverters partConverters} property., + * <p>For example, the following snippet shows how to submit an HTML form:, + * form.add("field 1", "value 1");, + * form.add("field 2", "value 2");, + * <p>Some methods in this class were inspired by, + * {@code org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity}., +	private final Random random = new Random();, +, +	 * Add a message body converter. Such a converter is used to convert objects, +, +	private void writeMultipart(MultiValueMap<String, Object> parts, HttpOutputMessage outputMessage) throws IOException {, +, +		writeEnd(outputMessage.getBody(), boundary);, +					writeBoundary(os, boundary);, +					writePart(name, getHttpEntity(part), os);, +		for (HttpMessageConverter<?> messageConverter : this.partConverters) {, +		throw new HttpMessageNotWritableException("Could not write request: no suitable HttpMessageConverter " +, +				"found for request type [" + partType.getName() + "]");, +		byte[] boundary = new byte[this.random.nextInt(11) + 30];, +			boundary[i] = BOUNDARY_CHARS[this.random.nextInt(BOUNDARY_CHARS.length)];, +	 * Return an {@link HttpEntity} for the given part Object., +	 * @param part the part to return an {@link HttpEntity} for, +	 * @return the part Object itself it is an {@link HttpEntity},, +	 * or a newly built {@link HttpEntity} wrapper for that part, +	 */, +	protected HttpEntity<?> getHttpEntity(Object part) {, +		if (part instanceof HttpEntity) {, +			return (HttpEntity<?>) part;, +		}, +		else {, +			return new HttpEntity<Object>(part);, +		}, +	}, +, +	/**, +	private void writeBoundary(OutputStream os, byte[] boundary) throws IOException {, +		os.write('-');, +		os.write('-');, +		os.write(boundary);, +		writeNewLine(os);, +	}, +, +	private static void writeEnd(OutputStream os, byte[] boundary) throws IOException {, +		os.write('-');, +		os.write('-');, +		os.write(boundary);, +		os.write('-');, +		os.write('-');, +		writeNewLine(os);, +	}, +, +	private static void writeNewLine(OutputStream os) throws IOException {, +		os.write('\r');, +		os.write('\n');, +	}, +, +, +	private static class MultipartHttpOutputMessage implements HttpOutputMessage {]