[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import org.springframework.core.env.CompositePropertySource;, +			int nLocations = locations.length;, +			for (int i = 0; i < nLocations; i++) {, +				locations[0] = this.environment.resolveRequiredPlaceholders(locations[0]);, +			}, +			if (!StringUtils.hasText(name)) {, +					this.propertySources.push(new ResourcePropertySource(location, classLoader));, +				}, +			}, +			else {, +				if (nLocations == 1) {, +					this.propertySources.push(new ResourcePropertySource(name, locations[0], classLoader));, +				}, +				else {, +					CompositePropertySource ps = new CompositePropertySource(name);, +					for (String location : locations) {, +						ps.addPropertySource(new ResourcePropertySource(location, classLoader));, +					}, +		}, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import org.springframework.core.env.CompositePropertySource;, +			int nLocations = locations.length;, +			for (int i = 0; i < nLocations; i++) {, +				locations[0] = this.environment.resolveRequiredPlaceholders(locations[0]);, +			}, +			if (!StringUtils.hasText(name)) {, +					this.propertySources.push(new ResourcePropertySource(location, classLoader));, +				}, +			}, +			else {, +				if (nLocations == 1) {, +					this.propertySources.push(new ResourcePropertySource(name, locations[0], classLoader));, +				}, +				else {, +					CompositePropertySource ps = new CompositePropertySource(name);, +					for (String location : locations) {, +						ps.addPropertySource(new ResourcePropertySource(location, classLoader));, +					}, +		}, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/PropertySourceAnnotationTests.java, +	/**, +	 * Corner bug reported in SPR-9127., +	 */, +	@Test, +	public void withNameAndMultipleResourceLocations() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(ConfigWithNameAndMultipleResourceLocations.class);, +		ctx.refresh();, +		assertThat(ctx.getEnvironment().containsProperty("from.p1"), is(true));, +		assertThat(ctx.getEnvironment().containsProperty("from.p2"), is(true));, +	}, +, +, +	@Configuration, +	@PropertySource(, +			name = "psName",, +			value = {, +					"classpath:org/springframework/context/annotation/p1.properties",, +					"classpath:org/springframework/context/annotation/p2.properties", +			}), +	static class ConfigWithNameAndMultipleResourceValues {, +	}, +, +, +, +	@Configuration, +	@PropertySource(, +			name = "psName",, +			value = {, +					"classpath:org/springframework/context/annotation/p1.properties",, +					"classpath:org/springframework/context/annotation/p2.properties", +			}), +	static class ConfigWithNameAndMultipleResourceLocations {, +	}, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import org.springframework.core.env.CompositePropertySource;, +			int nLocations = locations.length;, +			for (int i = 0; i < nLocations; i++) {, +				locations[0] = this.environment.resolveRequiredPlaceholders(locations[0]);, +			}, +			if (!StringUtils.hasText(name)) {, +					this.propertySources.push(new ResourcePropertySource(location, classLoader));, +				}, +			}, +			else {, +				if (nLocations == 1) {, +					this.propertySources.push(new ResourcePropertySource(name, locations[0], classLoader));, +				}, +				else {, +					CompositePropertySource ps = new CompositePropertySource(name);, +					for (String location : locations) {, +						ps.addPropertySource(new ResourcePropertySource(location, classLoader));, +					}, +		}, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/PropertySourceAnnotationTests.java, +	/**, +	 * Corner bug reported in SPR-9127., +	 */, +	@Test]