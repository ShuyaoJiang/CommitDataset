[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java, + * Copyright 2002-2018 the original author or authors., +			return (CallMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, databaseMetaData -> {, +, +				else if ("PostgreSQL".equals(databaseProductName)) {, +					provider = new PostgresCallMetaDataProvider((databaseMetaData));, +				else if ("DB2".equals(databaseProductName)) {, +					provider = new Db2CallMetaDataProvider((databaseMetaData));, +				else if ("Microsoft SQL Server".equals(databaseProductName)) {, +					provider = new SqlServerCallMetaDataProvider((databaseMetaData));, +				}, +				else if ("Sybase".equals(databaseProductName)) {, +					provider = new SybaseCallMetaDataProvider((databaseMetaData));, +				}, +, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java, + * Copyright 2002-2018 the original author or authors., +			return (CallMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, databaseMetaData -> {, +, +				else if ("PostgreSQL".equals(databaseProductName)) {, +					provider = new PostgresCallMetaDataProvider((databaseMetaData));, +				else if ("DB2".equals(databaseProductName)) {, +					provider = new Db2CallMetaDataProvider((databaseMetaData));, +				else if ("Microsoft SQL Server".equals(databaseProductName)) {, +					provider = new SqlServerCallMetaDataProvider((databaseMetaData));, +				}, +				else if ("Sybase".equals(databaseProductName)) {, +					provider = new SybaseCallMetaDataProvider((databaseMetaData));, +				}, +, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/Db2CallMetaDataProvider.java, + * Copyright 2002-2018 the original author or authors., +, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java, + * Copyright 2002-2018 the original author or authors., +			return (CallMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, databaseMetaData -> {, +, +				else if ("PostgreSQL".equals(databaseProductName)) {, +					provider = new PostgresCallMetaDataProvider((databaseMetaData));, +				else if ("DB2".equals(databaseProductName)) {, +					provider = new Db2CallMetaDataProvider((databaseMetaData));, +				else if ("Microsoft SQL Server".equals(databaseProductName)) {, +					provider = new SqlServerCallMetaDataProvider((databaseMetaData));, +				}, +				else if ("Sybase".equals(databaseProductName)) {, +					provider = new SybaseCallMetaDataProvider((databaseMetaData));, +				}, +, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/Db2CallMetaDataProvider.java, + * Copyright 2002-2018 the original author or authors., +, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/DerbyCallMetaDataProvider.java, + * Copyright 2002-2018 the original author or authors., +, +, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java, + * Copyright 2002-2018 the original author or authors., +			return (CallMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, databaseMetaData -> {, +, +				else if ("PostgreSQL".equals(databaseProductName)) {, +					provider = new PostgresCallMetaDataProvider((databaseMetaData));, +				else if ("DB2".equals(databaseProductName)) {, +					provider = new Db2CallMetaDataProvider((databaseMetaData));, +				else if ("Microsoft SQL Server".equals(databaseProductName)) {, +					provider = new SqlServerCallMetaDataProvider((databaseMetaData));, +				}, +				else if ("Sybase".equals(databaseProductName)) {, +					provider = new SybaseCallMetaDataProvider((databaseMetaData));, +				}, +, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/Db2CallMetaDataProvider.java, + * Copyright 2002-2018 the original author or authors., +, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/DerbyCallMetaDataProvider.java, + * Copyright 2002-2018 the original author or authors., +, +, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/DerbyTableMetaDataProvider.java, + * Copyright 2002-2018 the original author or authors., + * The Derby specific implementation of {@link TableMetaDataProvider}., + * Overrides the Derby metadata info regarding retrieving generated keys., +, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java, + * Copyright 2002-2018 the original author or authors., +			return (CallMetaDataProvider) JdbcUtils.extractDatabaseMetaData(dataSource, databaseMetaData -> {, +, +				else if ("PostgreSQL".equals(databaseProductName)) {, +					provider = new PostgresCallMetaDataProvider((databaseMetaData));, +				else if ("DB2".equals(databaseProductName)) {, +					provider = new Db2CallMetaDataProvider((databaseMetaData));, +				else if ("Microsoft SQL Server".equals(databaseProductName)) {, +					provider = new SqlServerCallMetaDataProvider((databaseMetaData));, +				}, +				else if ("Sybase".equals(databaseProductName)) {, +					provider = new SybaseCallMetaDataProvider((databaseMetaData));, +				}, +, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/Db2CallMetaDataProvider.java, + * Copyright 2002-2018 the original author or authors., +]