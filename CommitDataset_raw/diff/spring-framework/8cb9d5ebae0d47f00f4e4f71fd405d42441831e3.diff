[+++ b/spring-aop/src/main/java/org/springframework/aop/config/AopConfigUtils.java, + * Copyright 2002-2016 the original author or authors., +	public static void forceAutoProxyCreatorToExposeProxy(BeanDefinitionRegistry registry) {, +++ b/spring-aop/src/main/java/org/springframework/aop/config/AopConfigUtils.java, + * Copyright 2002-2016 the original author or authors., +	public static void forceAutoProxyCreatorToExposeProxy(BeanDefinitionRegistry registry) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AspectJAutoProxyRegistrar.java, + * Copyright 2002-2016 the original author or authors., + * @author Juergen Hoeller, +		AnnotationAttributes enableAspectJAutoProxy =, +		if (enableAspectJAutoProxy.getBoolean("proxyTargetClass")) {, +		if (enableAspectJAutoProxy.getBoolean("exposeProxy")) {, +			AopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry);, +		}, +++ b/spring-aop/src/main/java/org/springframework/aop/config/AopConfigUtils.java, + * Copyright 2002-2016 the original author or authors., +	public static void forceAutoProxyCreatorToExposeProxy(BeanDefinitionRegistry registry) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AspectJAutoProxyRegistrar.java, + * Copyright 2002-2016 the original author or authors., + * @author Juergen Hoeller, +		AnnotationAttributes enableAspectJAutoProxy =, +		if (enableAspectJAutoProxy.getBoolean("proxyTargetClass")) {, +		if (enableAspectJAutoProxy.getBoolean("exposeProxy")) {, +			AopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry);, +		}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/EnableAspectJAutoProxy.java, + * @author Juergen Hoeller, +	/**, +	 * Indicate that the proxy should be exposed by the AOP framework as a {@code ThreadLocal}, +	 * for retrieval via the {@link org.springframework.aop.framework.AopContext} class., +	 * Off by default, i.e. no guarantees that {@code AopContext} access will work., +	 * @since 4.3.1, +	 */, +	boolean exposeProxy() default false;, +, +++ b/spring-aop/src/main/java/org/springframework/aop/config/AopConfigUtils.java, + * Copyright 2002-2016 the original author or authors., +	public static void forceAutoProxyCreatorToExposeProxy(BeanDefinitionRegistry registry) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AspectJAutoProxyRegistrar.java, + * Copyright 2002-2016 the original author or authors., + * @author Juergen Hoeller, +		AnnotationAttributes enableAspectJAutoProxy =, +		if (enableAspectJAutoProxy.getBoolean("proxyTargetClass")) {, +		if (enableAspectJAutoProxy.getBoolean("exposeProxy")) {, +			AopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry);, +		}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/EnableAspectJAutoProxy.java, + * @author Juergen Hoeller, +	/**, +	 * Indicate that the proxy should be exposed by the AOP framework as a {@code ThreadLocal}, +	 * for retrieval via the {@link org.springframework.aop.framework.AopContext} class., +	 * Off by default, i.e. no guarantees that {@code AopContext} access will work., +	 * @since 4.3.1, +	 */, +	boolean exposeProxy() default false;, +, +++ b/spring-context/src/test/java/org/springframework/context/annotation/EnableAspectJAutoProxyTests.java, +import example.scannable.FooServiceImpl;, +import org.springframework.aop.framework.AopContext;, +	@Test, +	public void withExposedProxy() {, +		ApplicationContext ctx = new AnnotationConfigApplicationContext(ConfigWithExposedProxy.class);, +, +		aspectIsApplied(ctx);, +		assertThat(AopUtils.isJdkDynamicProxy(ctx.getBean(FooService.class)), is(true));, +	}, +, +, +	@ComponentScan("example.scannable"), +	@EnableAspectJAutoProxy(exposeProxy = true), +	static class ConfigWithExposedProxy {, +, +		@Bean, +		public FooService fooServiceImpl() {, +			return new FooServiceImpl() {, +				@Override, +				public String foo(int id) {, +					assertNotNull(AopContext.currentProxy());, +					return super.foo(id);, +				}, +			};, +		}, +	}, +, +, +, +, +, +]