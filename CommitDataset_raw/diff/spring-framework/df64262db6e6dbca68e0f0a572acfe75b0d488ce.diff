[+++ b/spring-web-reactive/src/main/java/org/springframework/core/convert/support/MonoToCompletableFutureConverter.java, +		pairs.add(new GenericConverter.ConvertiblePair(CompletableFuture.class, Mono.class));, +++ b/spring-web-reactive/src/main/java/org/springframework/core/convert/support/MonoToCompletableFutureConverter.java, +		pairs.add(new GenericConverter.ConvertiblePair(CompletableFuture.class, Mono.class));, +++ b/spring-web-reactive/src/main/java/org/springframework/core/convert/support/ReactorToRxJava1Converter.java, +		pairs.add(new GenericConverter.ConvertiblePair(Observable.class, Flux.class));, +		pairs.add(new GenericConverter.ConvertiblePair(Single.class, Mono.class));, +++ b/spring-web-reactive/src/main/java/org/springframework/core/convert/support/MonoToCompletableFutureConverter.java, +		pairs.add(new GenericConverter.ConvertiblePair(CompletableFuture.class, Mono.class));, +++ b/spring-web-reactive/src/main/java/org/springframework/core/convert/support/ReactorToRxJava1Converter.java, +		pairs.add(new GenericConverter.ConvertiblePair(Observable.class, Flux.class));, +		pairs.add(new GenericConverter.ConvertiblePair(Single.class, Mono.class));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/SimpleResultHandler.java, +import reactor.core.publisher.Flux;, +	 * Return the configured {@link ConversionService}., +	 */, +	public ConversionService getConversionService() {, +		return this.conversionService;, +	}, +, +	/**, +		if (getConversionService().canConvert(type.getRawClass(), Mono.class) ||, +				getConversionService().canConvert(type.getRawClass(), Flux.class)) {, +, +, +		ResolvableType returnType = result.getReturnValueType();, +		if (getConversionService().canConvert(returnType.getRawClass(), Mono.class)) {, +			return this.conversionService.convert(returnValue, Mono.class);, +		}, +		else {, +			return this.conversionService.convert(returnValue, Flux.class).single();, +		}, +++ b/spring-web-reactive/src/main/java/org/springframework/core/convert/support/MonoToCompletableFutureConverter.java, +		pairs.add(new GenericConverter.ConvertiblePair(CompletableFuture.class, Mono.class));, +++ b/spring-web-reactive/src/main/java/org/springframework/core/convert/support/ReactorToRxJava1Converter.java, +		pairs.add(new GenericConverter.ConvertiblePair(Observable.class, Flux.class));, +		pairs.add(new GenericConverter.ConvertiblePair(Single.class, Mono.class));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/SimpleResultHandler.java, +import reactor.core.publisher.Flux;, +	 * Return the configured {@link ConversionService}., +	 */, +	public ConversionService getConversionService() {, +		return this.conversionService;, +	}, +, +	/**, +		if (getConversionService().canConvert(type.getRawClass(), Mono.class) ||, +				getConversionService().canConvert(type.getRawClass(), Flux.class)) {, +, +, +		ResolvableType returnType = result.getReturnValueType();, +		if (getConversionService().canConvert(returnType.getRawClass(), Mono.class)) {, +			return this.conversionService.convert(returnValue, Mono.class);, +		}, +		else {, +			return this.conversionService.convert(returnValue, Flux.class).single();, +		}, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageConverterResultHandler.java, +		boolean convertToFlux = getConversionService().canConvert(bodyType.getRawClass(), Flux.class);, +		boolean convertToMono = getConversionService().canConvert(bodyType.getRawClass(), Mono.class);, +		ResolvableType elementType = convertToFlux || convertToMono ? bodyType.getGeneric(0) : bodyType;, +, +		Publisher<?> publisher;, +		if (body == null) {, +		else if (convertToMono) {, +			publisher = getConversionService().convert(body, Mono.class);, +		}, +		else if (convertToFlux) {, +			publisher = getConversionService().convert(body, Flux.class);, +			publisher = Mono.just(body);, +++ b/spring-web-reactive/src/main/java/org/springframework/core/convert/support/MonoToCompletableFutureConverter.java, +		pairs.add(new GenericConverter.ConvertiblePair(CompletableFuture.class, Mono.class));, +++ b/spring-web-reactive/src/main/java/org/springframework/core/convert/support/ReactorToRxJava1Converter.java, +		pairs.add(new GenericConverter.ConvertiblePair(Observable.class, Flux.class));, +		pairs.add(new GenericConverter.ConvertiblePair(Single.class, Mono.class));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/SimpleResultHandler.java, +import reactor.core.publisher.Flux;, +	 * Return the configured {@link ConversionService}., +	 */, +	public ConversionService getConversionService() {, +		return this.conversionService;, +	}, +, +	/**, +		if (getConversionService().canConvert(type.getRawClass(), Mono.class) ||, +				getConversionService().canConvert(type.getRawClass(), Flux.class)) {, +, +, +		ResolvableType returnType = result.getReturnValueType();, +		if (getConversionService().canConvert(returnType.getRawClass(), Mono.class)) {, +			return this.conversionService.convert(returnValue, Mono.class);, +		}, +		else {, +			return this.conversionService.convert(returnValue, Flux.class).single();, +		}, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageConverterResultHandler.java, +		boolean convertToFlux = getConversionService().canConvert(bodyType.getRawClass(), Flux.class);, +		boolean convertToMono = getConversionService().canConvert(bodyType.getRawClass(), Mono.class);, +		ResolvableType elementType = convertToFlux || convertToMono ? bodyType.getGeneric(0) : bodyType;, +]