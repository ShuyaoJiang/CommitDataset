[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import org.springframework.beans.factory.Aware;, +import org.springframework.beans.factory.BeanClassLoaderAware;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +import org.springframework.context.ResourceLoaderAware;, +import static org.springframework.context.annotation.MetadataUtils.*;, +, +						invokeAwareMethods(registrar);, +	 * Invoke {@link ResourceLoaderAware}, {@link BeanClassLoaderAware} and, +	 * {@link BeanFactoryAware} contracts if implemented by the given {@code registrar}., +	 */, +	private void invokeAwareMethods(ImportBeanDefinitionRegistrar registrar) {, +		if (registrar instanceof Aware) {, +			if (registrar instanceof ResourceLoaderAware) {, +				((ResourceLoaderAware) registrar).setResourceLoader(resourceLoader);, +			}, +			if (registrar instanceof BeanClassLoaderAware) {, +				ClassLoader classLoader =, +						registry instanceof ConfigurableBeanFactory ?, +						((ConfigurableBeanFactory) registry).getBeanClassLoader() :, +						resourceLoader.getClassLoader();, +				((BeanClassLoaderAware) registrar).setBeanClassLoader(classLoader);, +			}, +			if (registrar instanceof BeanFactoryAware && registry instanceof BeanFactory) {, +				((BeanFactoryAware) registrar).setBeanFactory((BeanFactory) registry);, +			}, +		}, +	}, +, +, +	/**, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import org.springframework.beans.factory.Aware;, +import org.springframework.beans.factory.BeanClassLoaderAware;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +import org.springframework.context.ResourceLoaderAware;, +import static org.springframework.context.annotation.MetadataUtils.*;, +, +						invokeAwareMethods(registrar);, +	 * Invoke {@link ResourceLoaderAware}, {@link BeanClassLoaderAware} and, +	 * {@link BeanFactoryAware} contracts if implemented by the given {@code registrar}., +	 */, +	private void invokeAwareMethods(ImportBeanDefinitionRegistrar registrar) {, +		if (registrar instanceof Aware) {, +			if (registrar instanceof ResourceLoaderAware) {, +				((ResourceLoaderAware) registrar).setResourceLoader(resourceLoader);, +			}, +			if (registrar instanceof BeanClassLoaderAware) {, +				ClassLoader classLoader =, +						registry instanceof ConfigurableBeanFactory ?, +						((ConfigurableBeanFactory) registry).getBeanClassLoader() :, +						resourceLoader.getClassLoader();, +				((BeanClassLoaderAware) registrar).setBeanClassLoader(classLoader);, +			}, +			if (registrar instanceof BeanFactoryAware && registry instanceof BeanFactory) {, +				((BeanFactoryAware) registrar).setBeanFactory((BeanFactory) registry);, +			}, +		}, +	}, +, +, +	/**, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ImportBeanDefinitionRegistrar.java, + * Copyright 2002-2012 the original author or authors., + * <p>An {@link ImportBeanDefinitionRegistrar} may implement any of the following, + * {@link org.springframework.beans.factory.Aware Aware} interfaces, and their respective, + * methods will be called prior to {@link #registerBeanDefinitions}:, + * <ul>, + * <li>{@link org.springframework.beans.factory.BeanFactoryAware BeanFactoryAware}, + * <li>{@link org.springframework.beans.factory.BeanClassLoaderAware BeanClassLoaderAware}, + * <li>{@link org.springframework.context.ResourceLoaderAware ResourceLoaderAware}, + * </ul>, + *, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import org.springframework.beans.factory.Aware;, +import org.springframework.beans.factory.BeanClassLoaderAware;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +import org.springframework.context.ResourceLoaderAware;, +import static org.springframework.context.annotation.MetadataUtils.*;, +, +						invokeAwareMethods(registrar);, +	 * Invoke {@link ResourceLoaderAware}, {@link BeanClassLoaderAware} and, +	 * {@link BeanFactoryAware} contracts if implemented by the given {@code registrar}., +	 */, +	private void invokeAwareMethods(ImportBeanDefinitionRegistrar registrar) {, +		if (registrar instanceof Aware) {, +			if (registrar instanceof ResourceLoaderAware) {, +				((ResourceLoaderAware) registrar).setResourceLoader(resourceLoader);, +			}, +			if (registrar instanceof BeanClassLoaderAware) {, +				ClassLoader classLoader =, +						registry instanceof ConfigurableBeanFactory ?, +						((ConfigurableBeanFactory) registry).getBeanClassLoader() :, +						resourceLoader.getClassLoader();]