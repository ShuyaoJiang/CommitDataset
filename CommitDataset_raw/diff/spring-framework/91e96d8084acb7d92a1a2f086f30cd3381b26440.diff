[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunctionBuilder.java, +import org.springframework.core.io.Resource;, +	public RouterFunctions.Builder add(RouterFunction<ServerResponse> routerFunction) {, +		Assert.notNull(routerFunction, "RouterFunction must not be null");, +		this.routerFunctions.add(routerFunction);, +		return this;, +	}, +, +	private RouterFunctions.Builder add(RequestPredicate predicate,, +	public RouterFunctions.Builder GET(String pattern, HandlerFunction<ServerResponse> handlerFunction) {, +		return add(RequestPredicates.GET(pattern), handlerFunction);, +	public RouterFunctions.Builder GET(String pattern, RequestPredicate predicate,, +			HandlerFunction<ServerResponse> handlerFunction) {, +		return add(RequestPredicates.GET(pattern).and(predicate), handlerFunction);, +	public RouterFunctions.Builder HEAD(String pattern, HandlerFunction<ServerResponse> handlerFunction) {, +		return add(RequestPredicates.HEAD(pattern), handlerFunction);, +	public RouterFunctions.Builder HEAD(String pattern, RequestPredicate predicate,, +			HandlerFunction<ServerResponse> handlerFunction) {, +		return add(RequestPredicates.HEAD(pattern).and(predicate), handlerFunction);, +	public RouterFunctions.Builder POST(String pattern, HandlerFunction<ServerResponse> handlerFunction) {, +		return add(RequestPredicates.POST(pattern), handlerFunction);, +	public RouterFunctions.Builder POST(String pattern, RequestPredicate predicate,, +			HandlerFunction<ServerResponse> handlerFunction) {, +		return add(RequestPredicates.POST(pattern).and(predicate), handlerFunction);, +	public RouterFunctions.Builder PUT(String pattern, HandlerFunction<ServerResponse> handlerFunction) {, +		return add(RequestPredicates.PUT(pattern), handlerFunction);, +	public RouterFunctions.Builder PUT(String pattern, RequestPredicate predicate,, +			HandlerFunction<ServerResponse> handlerFunction) {, +		return add(RequestPredicates.PUT(pattern).and(predicate), handlerFunction);, +	public RouterFunctions.Builder PATCH(String pattern, HandlerFunction<ServerResponse> handlerFunction) {, +		return add(RequestPredicates.PATCH(pattern), handlerFunction);, +	public RouterFunctions.Builder PATCH(String pattern, RequestPredicate predicate,, +			HandlerFunction<ServerResponse> handlerFunction) {, +		return add(RequestPredicates.PATCH(pattern).and(predicate), handlerFunction);, +	public RouterFunctions.Builder DELETE(String pattern, HandlerFunction<ServerResponse> handlerFunction) {, +		return add(RequestPredicates.DELETE(pattern), handlerFunction);, +	public RouterFunctions.Builder DELETE(String pattern, RequestPredicate predicate,, +			HandlerFunction<ServerResponse> handlerFunction) {, +		return add(RequestPredicates.DELETE(pattern).and(predicate), handlerFunction);, +	public RouterFunctions.Builder OPTIONS(String pattern, HandlerFunction<ServerResponse> handlerFunction) {, +		return add(RequestPredicates.OPTIONS(pattern), handlerFunction);, +	public RouterFunctions.Builder OPTIONS(String pattern, RequestPredicate predicate,, +			HandlerFunction<ServerResponse> handlerFunction) {, +		return add(RequestPredicates.OPTIONS(pattern).and(predicate), handlerFunction);, +	}, +, +	@Override, +	public RouterFunctions.Builder resources(String pattern, Resource location) {, +		return add(RouterFunctions.resources(pattern, location));, +	}, +, +	@Override, +	public RouterFunctions.Builder resources(Function<ServerRequest, Mono<Resource>> lookupFunction) {, +		return add(RouterFunctions.resources(lookupFunction));, +		Assert.notNull(builderConsumer, "Consumer must not be null");, +		Assert.notNull(routerFunctionSupplier, "RouterFunction Supplier must not be null");, +	public RouterFunctions.Builder path(String pattern,, +	public RouterFunctions.Builder path(String pattern,, +		Assert.notNull(filterFunction, "HandlerFilterFunction must not be null");, +	public RouterFunctions.Builder before(Function<ServerRequest, ServerRequest> requestProcessor) {, +		Assert.notNull(requestProcessor, "RequestProcessor must not be null");, +		return filter((request, next) -> next.handle(requestProcessor.apply(request)));, +	public RouterFunctions.Builder after(, +			BiFunction<ServerRequest, ServerResponse, ServerResponse> responseProcessor) {, +		Assert.notNull(responseProcessor, "ResponseProcessor must not be null");, +				.map(serverResponse -> responseProcessor.apply(request, serverResponse)));, +	public RouterFunctions.Builder onError(Predicate<? super Throwable> predicate,, +		Assert.notNull(predicate, "Predicate must not be null");, +		Assert.notNull(responseProvider, "ResponseProvider must not be null");, +	public <T extends Throwable> RouterFunctions.Builder onError(, +		Assert.notNull(exceptionType, "ExceptionType must not be null");, +		Assert.notNull(responseProvider, "ResponseProvider must not be null");, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunctionBuilder.java, +import org.springframework.core.io.Resource;, +	public RouterFunctions.Builder add(RouterFunction<ServerResponse> routerFunction) {, +		Assert.notNull(routerFunction, "RouterFunction must not be null");, +		this.routerFunctions.add(routerFunction);, +		return this;, +	}, +, +	private RouterFunctions.Builder add(RequestPredicate predicate,, +	public RouterFunctions.Builder GET(String pattern, HandlerFunction<ServerResponse> handlerFunction) {, +		return add(RequestPredicates.GET(pattern), handlerFunction);, +	public RouterFunctions.Builder GET(String pattern, RequestPredicate predicate,, +			HandlerFunction<ServerResponse> handlerFunction) {, +		return add(RequestPredicates.GET(pattern).and(predicate), handlerFunction);, +	public RouterFunctions.Builder HEAD(String pattern, HandlerFunction<ServerResponse> handlerFunction) {, +		return add(RequestPredicates.HEAD(pattern), handlerFunction);, +	public RouterFunctions.Builder HEAD(String pattern, RequestPredicate predicate,, +			HandlerFunction<ServerResponse> handlerFunction) {, +		return add(RequestPredicates.HEAD(pattern).and(predicate), handlerFunction);, +	public RouterFunctions.Builder POST(String pattern, HandlerFunction<ServerResponse> handlerFunction) {, +		return add(RequestPredicates.POST(pattern), handlerFunction);, +	public RouterFunctions.Builder POST(String pattern, RequestPredicate predicate,, +			HandlerFunction<ServerResponse> handlerFunction) {, +		return add(RequestPredicates.POST(pattern).and(predicate), handlerFunction);, +	public RouterFunctions.Builder PUT(String pattern, HandlerFunction<ServerResponse> handlerFunction) {, +		return add(RequestPredicates.PUT(pattern), handlerFunction);, +	public RouterFunctions.Builder PUT(String pattern, RequestPredicate predicate,, +			HandlerFunction<ServerResponse> handlerFunction) {]