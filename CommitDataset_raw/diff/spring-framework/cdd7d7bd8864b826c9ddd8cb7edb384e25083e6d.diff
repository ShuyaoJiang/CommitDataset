[+++ b/build.gradle, +, +		optional("org.apache.tomcat:tomcat-servlet-api:8.0-SNAPSHOT") // TODO: replace with "javax.servlet:javax.servlet-api", +		optional("org.apache.tomcat:tomcat-websocket-api:8.0-SNAPSHOT") // TODO: replace with "javax.websocket:javax.websocket-api", +, +		optional("org.apache.tomcat:tomcat-websocket:8.0-SNAPSHOT") {, +			exclude group: "org.apache.tomcat", module: "tomcat-websocket-api", +			exclude group: "org.apache.tomcat", module: "tomcat-servlet-api", +		}, +, +		optional("org.eclipse.jetty:jetty-websocket:8.1.10.v20130312"), +		optional("org.glassfish.tyrus:tyrus-websocket-core:1.0-SNAPSHOT"), +		maven { url "https://repository.apache.org/content/repositories/snapshots" } // tomcat-websocket snapshots, +		maven { url "https://maven.java.net/content/repositories/snapshots" } // tyrus/glassfish snapshots, +++ b/build.gradle, +, +		optional("org.apache.tomcat:tomcat-servlet-api:8.0-SNAPSHOT") // TODO: replace with "javax.servlet:javax.servlet-api", +		optional("org.apache.tomcat:tomcat-websocket-api:8.0-SNAPSHOT") // TODO: replace with "javax.websocket:javax.websocket-api", +, +		optional("org.apache.tomcat:tomcat-websocket:8.0-SNAPSHOT") {, +			exclude group: "org.apache.tomcat", module: "tomcat-websocket-api", +			exclude group: "org.apache.tomcat", module: "tomcat-servlet-api", +		}, +, +		optional("org.eclipse.jetty:jetty-websocket:8.1.10.v20130312"), +		optional("org.glassfish.tyrus:tyrus-websocket-core:1.0-SNAPSHOT"), +		maven { url "https://repository.apache.org/content/repositories/snapshots" } // tomcat-websocket snapshots, +		maven { url "https://maven.java.net/content/repositories/snapshots" } // tyrus/glassfish snapshots, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +import org.springframework.util.CollectionUtils;, +	private static final String CONNECTION = "Connection";, +, +	private static final String ORIGIN = "Origin";, +, +	private static final String SEC_WEBSOCKET_ACCEPT = "Sec-WebSocket-Accept";, +, +	private static final String SEC_WEBSOCKET_EXTENSIONS = "Sec-WebSocket-Extensions";, +, +	private static final String SEC_WEBSOCKET_KEY = "Sec-WebSocket-Key";, +, +	private static final String SEC_WEBSOCKET_PROTOCOL = "Sec-WebSocket-Protocol";, +, +	private static final String SEC_WEBSOCKET_VERSION = "Sec-WebSocket-Version";, +, +	private static final String UPGARDE = "Upgrade";, +, +	 * Sets the (new) value of the {@code Connection} header., +	 * @param connection the value of the header, +	 */, +	public void setConnection(String connection) {, +		set(CONNECTION, connection);, +	}, +, +	/**, +	 * Sets the (new) value of the {@code Connection} header., +	 * @param connection the value of the header, +	 */, +	public void setConnection(List<String> connection) {, +		set(CONNECTION, toCommaDelimitedString(connection));, +	}, +, +	/**, +	 * Returns the value of the {@code Connection} header., +	 * @return the value of the header, +	 */, +	public List<String> getConnection() {, +		return getFirstValueAsList(CONNECTION);, +	}, +, +	/**, +		set(IF_NONE_MATCH, toCommaDelimitedString(ifNoneMatchList));, +	}, +, +	private String toCommaDelimitedString(List<String> list) {, +		for (Iterator<String> iterator = list.iterator(); iterator.hasNext();) {, +		return builder.toString();, +		return getFirstValueAsList(IF_NONE_MATCH);, +	}, +, +	private List<String> getFirstValueAsList(String header) {, +		String value = getFirst(header);, +	 * Sets the (new) value of the {@code Origin} header., +	 * @param origin the value of the header, +	 */, +	public void setOrigin(String origin) {, +		set(ORIGIN, origin);, +	}, +, +	/**, +	 * Returns the value of the {@code Origin} header., +	 * @return the value of the header, +	 */, +	public String getOrigin() {, +		return getFirst(ORIGIN);, +	}, +, +	/**, +	 * Sets the (new) value of the {@code Sec-WebSocket-Accept} header., +	 * @param secWebSocketAccept the value of the header, +	 */]