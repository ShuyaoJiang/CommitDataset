[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/DefaultUserDestinationResolver.java, +	/**, +	 * Return the configured {@link UserSessionRegistry}., +	 */, +	public UserSessionRegistry getUserSessionRegistry() {, +		return this.userSessionRegistry;, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/DefaultUserDestinationResolver.java, +	/**, +	 * Return the configured {@link UserSessionRegistry}., +	 */, +	public UserSessionRegistry getUserSessionRegistry() {, +		return this.userSessionRegistry;, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/config/xml/MessageBrokerBeanDefinitionParser.java, +import org.springframework.util.Assert;, +		String beanName = "clientInboundChannel";, +		RuntimeBeanReference clientInChannel = getMessageChannel(beanName, channelElem, parserCxt, source);, +		beanName = "clientOutboundChannel";, +		RuntimeBeanReference clientOutChannel = getMessageChannel(beanName, channelElem, parserCxt, source);, +		RootBeanDefinition beanDef = new RootBeanDefinition(DefaultUserSessionRegistry.class);, +		beanName = registerBeanDef(beanDef, parserCxt, source);, +		RuntimeBeanReference userSessionRegistry = new RuntimeBeanReference(beanName);, +		RuntimeBeanReference subProtocolWsHandler = registerSubProtocolWebSocketHandler(, +		for(Element stompEndpointElem : DomUtils.getChildElementsByTagName(element, "stomp-endpoint")) {, +			RuntimeBeanReference httpRequestHandler = registerHttpRequestHandler(, +					stompEndpointElem, subProtocolWsHandler, parserCxt, source);, +			String pathAttribute = stompEndpointElem.getAttribute("path");, +			Assert.state(StringUtils.hasText(pathAttribute), "Invalid <stomp-endpoint> (no path mapping)");, +, +			List<String> paths = Arrays.asList(pathAttribute.split(","));, +				path = path.trim();, +				Assert.state(StringUtils.hasText(path), "Invalid <stomp-endpoint> path attribute: " + pathAttribute);, +				if (DomUtils.getChildElementByTagName(stompEndpointElem, "sockjs") != null) {, +				urlMap.put(path, httpRequestHandler);, +		beanName = "brokerChannel";, +		RuntimeBeanReference brokerChannel = getMessageChannel(beanName, channelElem, parserCxt, source);, +				userSessionRegistry, parserCxt, source);, +			Class<?> handlerType = StompBrokerRelayMessageHandler.class;, +			RootBeanDefinition messageBrokerDef = new RootBeanDefinition(handlerType, cavs, mpvs);, +			RuntimeBeanReference userSessionRegistry, ParserContext parserCxt, Object source) {, +		cavs.addIndexedArgumentValue(0, userSessionRegistry);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/DefaultUserDestinationResolver.java, +	/**, +	 * Return the configured {@link UserSessionRegistry}., +	 */, +	public UserSessionRegistry getUserSessionRegistry() {, +		return this.userSessionRegistry;, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/config/xml/MessageBrokerBeanDefinitionParser.java, +import org.springframework.util.Assert;, +		String beanName = "clientInboundChannel";, +		RuntimeBeanReference clientInChannel = getMessageChannel(beanName, channelElem, parserCxt, source);, +		beanName = "clientOutboundChannel";, +		RuntimeBeanReference clientOutChannel = getMessageChannel(beanName, channelElem, parserCxt, source);, +		RootBeanDefinition beanDef = new RootBeanDefinition(DefaultUserSessionRegistry.class);, +		beanName = registerBeanDef(beanDef, parserCxt, source);, +		RuntimeBeanReference userSessionRegistry = new RuntimeBeanReference(beanName);, +		RuntimeBeanReference subProtocolWsHandler = registerSubProtocolWebSocketHandler(, +		for(Element stompEndpointElem : DomUtils.getChildElementsByTagName(element, "stomp-endpoint")) {, +			RuntimeBeanReference httpRequestHandler = registerHttpRequestHandler(, +					stompEndpointElem, subProtocolWsHandler, parserCxt, source);, +			String pathAttribute = stompEndpointElem.getAttribute("path");, +			Assert.state(StringUtils.hasText(pathAttribute), "Invalid <stomp-endpoint> (no path mapping)");, +, +			List<String> paths = Arrays.asList(pathAttribute.split(","));, +				path = path.trim();, +				Assert.state(StringUtils.hasText(path), "Invalid <stomp-endpoint> path attribute: " + pathAttribute);, +				if (DomUtils.getChildElementByTagName(stompEndpointElem, "sockjs") != null) {, +				urlMap.put(path, httpRequestHandler);, +		beanName = "brokerChannel";, +		RuntimeBeanReference brokerChannel = getMessageChannel(beanName, channelElem, parserCxt, source);, +				userSessionRegistry, parserCxt, source);, +			Class<?> handlerType = StompBrokerRelayMessageHandler.class;, +			RootBeanDefinition messageBrokerDef = new RootBeanDefinition(handlerType, cavs, mpvs);, +			RuntimeBeanReference userSessionRegistry, ParserContext parserCxt, Object source) {, +		cavs.addIndexedArgumentValue(0, userSessionRegistry);, +++ b/spring-websocket/src/main/resources/org/springframework/web/socket/server/config/xml/spring-websocket-4.0.xsd, +                <xsd:element name="stomp-endpoint" minOccurs="1" maxOccurs="unbounded">, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/DefaultUserDestinationResolver.java, +	/**, +	 * Return the configured {@link UserSessionRegistry}., +	 */, +	public UserSessionRegistry getUserSessionRegistry() {, +		return this.userSessionRegistry;, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/config/xml/MessageBrokerBeanDefinitionParser.java, +import org.springframework.util.Assert;, +		String beanName = "clientInboundChannel";, +		RuntimeBeanReference clientInChannel = getMessageChannel(beanName, channelElem, parserCxt, source);, +		beanName = "clientOutboundChannel";, +		RuntimeBeanReference clientOutChannel = getMessageChannel(beanName, channelElem, parserCxt, source);, +		RootBeanDefinition beanDef = new RootBeanDefinition(DefaultUserSessionRegistry.class);, +		beanName = registerBeanDef(beanDef, parserCxt, source);, +		RuntimeBeanReference userSessionRegistry = new RuntimeBeanReference(beanName);, +		RuntimeBeanReference subProtocolWsHandler = registerSubProtocolWebSocketHandler(]