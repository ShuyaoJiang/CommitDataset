[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, + * @author Juergen Hoeller, +	 * @see org.springframework.web.server.adapter.WebHttpHandlerBuilder#webHandler, +	 * {@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter}., +	 * @see org.springframework.http.server.reactive.ServletHttpHandlerAdapter, +	 * @see org.springframework.http.server.reactive.ReactorHttpHandlerAdapter, +	 * @see org.springframework.http.server.reactive.RxNettyHttpHandlerAdapter, +	 * @see org.springframework.http.server.reactive.UndertowHttpHandlerAdapter, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, + * @author Juergen Hoeller, +	 * @see org.springframework.web.server.adapter.WebHttpHandlerBuilder#webHandler, +	 * {@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter}., +	 * @see org.springframework.http.server.reactive.ServletHttpHandlerAdapter, +	 * @see org.springframework.http.server.reactive.ReactorHttpHandlerAdapter, +	 * @see org.springframework.http.server.reactive.RxNettyHttpHandlerAdapter, +	 * @see org.springframework.http.server.reactive.UndertowHttpHandlerAdapter, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultRequest.java, +, +, +			long value = delegate().getContentLength();, +			return (value != -1 ? OptionalLong.of(value) : OptionalLong.empty());, +			return (headerValues != null ? headerValues : Collections.emptyList());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, + * @author Juergen Hoeller, +	 * @see org.springframework.web.server.adapter.WebHttpHandlerBuilder#webHandler, +	 * {@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter}., +	 * @see org.springframework.http.server.reactive.ServletHttpHandlerAdapter, +	 * @see org.springframework.http.server.reactive.ReactorHttpHandlerAdapter, +	 * @see org.springframework.http.server.reactive.RxNettyHttpHandlerAdapter, +	 * @see org.springframework.http.server.reactive.UndertowHttpHandlerAdapter, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultRequest.java, +, +, +			long value = delegate().getContentLength();, +			return (value != -1 ? OptionalLong.of(value) : OptionalLong.empty());, +			return (headerValues != null ? headerValues : Collections.emptyList());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/RouterFunctions.java, +	public static final String URI_TEMPLATE_VARIABLES_ATTRIBUTE =, +			RouterFunctions.class.getName() + ".uriTemplateVariables";, +, +	private static final HandlerFunction<Void> NOT_FOUND_HANDLER = request -> Response.notFound().build();, +, +	 * @return a routing function that routes to {@code handlerFunction} if, +	 * {@code predicate} evaluates to {@code true}, +	 * @return a routing function that routes to {@code routerFunction} if, +	 * {@code predicate} evaluates to {@code true}, +	 * Convert the given {@linkplain RouterFunction routing function} into a {@link HttpHandler}., +		return toHttpHandler(routerFunction, StrategiesSupplier.withDefaults());, +	 * Convert the given {@linkplain RouterFunction routing function} into a {@link HttpHandler},, +		Assert.notNull(routerFunction, "RouterFunction must not be null");, +		Assert.notNull(strategies, "StrategiesSupplier must not be null");, +	 * Convert the given {@code RouterFunction} into a {@code HandlerMapping}., +		return toHandlerMapping(routerFunction, StrategiesSupplier.withDefaults());, +	 * Convert the given {@linkplain RouterFunction routing function} into a {@link HandlerMapping},, +		Assert.notNull(routerFunction, "RouterFunction must not be null");, +		Assert.notNull(strategies, "StrategiesSupplier must not be null");, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, + * @author Juergen Hoeller, +	 * @see org.springframework.web.server.adapter.WebHttpHandlerBuilder#webHandler, +	 * {@link org.springframework.http.server.reactive.ServletHttpHandlerAdapter}., +	 * @see org.springframework.http.server.reactive.ServletHttpHandlerAdapter, +	 * @see org.springframework.http.server.reactive.ReactorHttpHandlerAdapter, +	 * @see org.springframework.http.server.reactive.RxNettyHttpHandlerAdapter, +	 * @see org.springframework.http.server.reactive.UndertowHttpHandlerAdapter, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultRequest.java, +, +, +			long value = delegate().getContentLength();, +			return (value != -1 ? OptionalLong.of(value) : OptionalLong.empty());, +			return (headerValues != null ? headerValues : Collections.emptyList());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/RouterFunctions.java, +	public static final String URI_TEMPLATE_VARIABLES_ATTRIBUTE =, +			RouterFunctions.class.getName() + ".uriTemplateVariables";, +, +	private static final HandlerFunction<Void> NOT_FOUND_HANDLER = request -> Response.notFound().build();, +, +	 * @return a routing function that routes to {@code handlerFunction} if, +	 * {@code predicate} evaluates to {@code true}, +	 * @return a routing function that routes to {@code routerFunction} if, +	 * {@code predicate} evaluates to {@code true}, +	 * Convert the given {@linkplain RouterFunction routing function} into a {@link HttpHandler}., +		return toHttpHandler(routerFunction, StrategiesSupplier.withDefaults());, +	 * Convert the given {@linkplain RouterFunction routing function} into a {@link HttpHandler},, +		Assert.notNull(routerFunction, "RouterFunction must not be null");, +		Assert.notNull(strategies, "StrategiesSupplier must not be null");, +	 * Convert the given {@code RouterFunction} into a {@code HandlerMapping}., +		return toHandlerMapping(routerFunction, StrategiesSupplier.withDefaults());, +	 * Convert the given {@linkplain RouterFunction routing function} into a {@link HandlerMapping},, +		Assert.notNull(routerFunction, "RouterFunction must not be null");, +		Assert.notNull(strategies, "StrategiesSupplier must not be null");, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/StrategiesSupplier.java, + * @author Juergen Hoeller, +, +	 * Return a new {@code StrategiesSupplier} with default initialization., +	 * @return the new {@code StrategiesSupplier}, +	 */, +	static StrategiesSupplier withDefaults() {, +		return builder().build();]