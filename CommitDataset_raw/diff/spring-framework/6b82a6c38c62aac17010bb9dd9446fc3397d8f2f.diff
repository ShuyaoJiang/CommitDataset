[+++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, +	 * @param array the original {@code String} array (potentially empty), +++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, +	 * @param array the original {@code String} array (potentially empty), +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/AnnotationTransactionAttributeSource.java, +	 * @param element the annotated method or class, +	 * @return the configured transaction attribute, or {@code null} if none was found, +	protected TransactionAttribute determineTransactionAttribute(AnnotatedElement element) {, +			TransactionAttribute attr = annotationParser.parseTransactionAnnotation(element);, +++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, +	 * @param array the original {@code String} array (potentially empty), +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/AnnotationTransactionAttributeSource.java, +	 * @param element the annotated method or class, +	 * @return the configured transaction attribute, or {@code null} if none was found, +	protected TransactionAttribute determineTransactionAttribute(AnnotatedElement element) {, +			TransactionAttribute attr = annotationParser.parseTransactionAnnotation(element);, +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/Ejb3TransactionAnnotationParser.java, + * Copyright 2002-2018 the original author or authors., +	public TransactionAttribute parseTransactionAnnotation(AnnotatedElement element) {, +		javax.ejb.TransactionAttribute ann = element.getAnnotation(javax.ejb.TransactionAttribute.class);, +, +++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, +	 * @param array the original {@code String} array (potentially empty), +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/AnnotationTransactionAttributeSource.java, +	 * @param element the annotated method or class, +	 * @return the configured transaction attribute, or {@code null} if none was found, +	protected TransactionAttribute determineTransactionAttribute(AnnotatedElement element) {, +			TransactionAttribute attr = annotationParser.parseTransactionAnnotation(element);, +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/Ejb3TransactionAnnotationParser.java, + * Copyright 2002-2018 the original author or authors., +	public TransactionAttribute parseTransactionAnnotation(AnnotatedElement element) {, +		javax.ejb.TransactionAttribute ann = element.getAnnotation(javax.ejb.TransactionAttribute.class);, +, +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/JtaTransactionAnnotationParser.java, + * Copyright 2002-2018 the original author or authors., +import java.util.List;, +	public TransactionAttribute parseTransactionAnnotation(AnnotatedElement element) {, +		AnnotationAttributes attributes = AnnotatedElementUtils.getMergedAnnotationAttributes(, +				element, javax.transaction.Transactional.class);, +, +, +		List<RollbackRuleAttribute> rollbackRules = new ArrayList<>();, +		for (Class<?> rbRule : attributes.getClassArray("rollbackOn")) {, +			rollbackRules.add(new RollbackRuleAttribute(rbRule));, +		for (Class<?> rbRule : attributes.getClassArray("dontRollbackOn")) {, +			rollbackRules.add(new NoRollbackRuleAttribute(rbRule));, +		rbta.setRollbackRules(rollbackRules);, +, +, +++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, +	 * @param array the original {@code String} array (potentially empty), +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/AnnotationTransactionAttributeSource.java, +	 * @param element the annotated method or class, +	 * @return the configured transaction attribute, or {@code null} if none was found, +	protected TransactionAttribute determineTransactionAttribute(AnnotatedElement element) {, +			TransactionAttribute attr = annotationParser.parseTransactionAnnotation(element);, +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/Ejb3TransactionAnnotationParser.java, + * Copyright 2002-2018 the original author or authors., +	public TransactionAttribute parseTransactionAnnotation(AnnotatedElement element) {, +		javax.ejb.TransactionAttribute ann = element.getAnnotation(javax.ejb.TransactionAttribute.class);, +, +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/JtaTransactionAnnotationParser.java, + * Copyright 2002-2018 the original author or authors., +import java.util.List;, +	public TransactionAttribute parseTransactionAnnotation(AnnotatedElement element) {, +		AnnotationAttributes attributes = AnnotatedElementUtils.getMergedAnnotationAttributes(, +				element, javax.transaction.Transactional.class);, +, +, +		List<RollbackRuleAttribute> rollbackRules = new ArrayList<>();, +		for (Class<?> rbRule : attributes.getClassArray("rollbackOn")) {, +			rollbackRules.add(new RollbackRuleAttribute(rbRule));, +		for (Class<?> rbRule : attributes.getClassArray("dontRollbackOn")) {, +			rollbackRules.add(new NoRollbackRuleAttribute(rbRule));, +		rbta.setRollbackRules(rollbackRules);, +, +, +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/SpringTransactionAnnotationParser.java, + * Copyright 2002-2018 the original author or authors., +import java.util.List;, +	public TransactionAttribute parseTransactionAnnotation(AnnotatedElement element) {, +				element, Transactional.class, false, false);, +, +, +		List<RollbackRuleAttribute> rollbackRules = new ArrayList<>();, +		for (Class<?> rbRule : attributes.getClassArray("rollbackFor")) {, +			rollbackRules.add(new RollbackRuleAttribute(rbRule));, +		for (String rbRule : attributes.getStringArray("rollbackForClassName")) {, +			rollbackRules.add(new RollbackRuleAttribute(rbRule));, +		for (Class<?> rbRule : attributes.getClassArray("noRollbackFor")) {, +			rollbackRules.add(new NoRollbackRuleAttribute(rbRule));, +		for (String rbRule : attributes.getStringArray("noRollbackForClassName")) {, +			rollbackRules.add(new NoRollbackRuleAttribute(rbRule));, +		rbta.setRollbackRules(rollbackRules);, +, +, +++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, +	 * @param array the original {@code String} array (potentially empty), +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/AnnotationTransactionAttributeSource.java, +	 * @param element the annotated method or class]