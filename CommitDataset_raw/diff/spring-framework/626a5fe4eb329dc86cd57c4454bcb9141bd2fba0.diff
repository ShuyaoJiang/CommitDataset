[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/BeanNameViewResolver.java, + * Copyright 2002-2014 the original author or authors., + * A simple implementation of {@link org.springframework.web.servlet.ViewResolver}, + * that interprets a view name as a bean name in the current application context,, + * i.e. typically in the XML file of the executing {@code DispatcherServlet}., + * <p>This resolver can be handy for small applications, keeping all definitions, + * ranging from controllers to views in the same place. For larger applications,, + * {@link XmlViewResolver} will be the better choice, as it separates the XML, + * view bean definitions into a dedicated views file., + * <p>Note: Neither this {@code ViewResolver} nor {@link XmlViewResolver} supports, + * internationalization. Consider {@link ResourceBundleViewResolver} if you need, + * to apply different view resources per locale., + * <p>Note: This {@code ViewResolver} implements the {@link Ordered} interface, + * in order to allow for flexible participation in {@code ViewResolver} chaining., + * For example, some special views could be defined via this {@code ViewResolver}, + * (giving it 0 as "order" value), while all remaining views could be resolved by, + * a {@link UrlBasedViewResolver}., +		return this.order;, +			if (logger.isDebugEnabled()) {, +				logger.debug("No matching bean found for view name '" + viewName + "'");, +			}, +			// Allow for ViewResolver chaining..., +			return null;, +		}, +		if (!context.isTypeMatch(viewName, View.class)) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("Found matching bean for view name '" + viewName +, +						"' - to be ignored since it does not implement View");, +			}, +			// Since we're looking into the general ApplicationContext here,, +			// let's accept this as a non-match and allow for chaining as well...]