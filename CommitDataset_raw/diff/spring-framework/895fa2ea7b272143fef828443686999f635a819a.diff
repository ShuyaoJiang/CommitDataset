[+++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, + * Extract values from "Forwarded" and "X-Forwarded-*" headers in order to wrap, + * and override the following from the request and response:, + * {@link HttpServletRequest#isSecure() isSecure()}, and, + * {@link HttpServletResponse#sendRedirect(String) sendRedirect(String)}., + * In effect the wrapped request and response reflect the client-originated, + * protocol and address., + *, + * <p><strong>Note:</strong> This filter can also be used in a, + * {@link #setRemoveOnly removeOnly} mode where "Forwarded" and "X-Forwarded-*", + * headers are only eliminated without being used., + * @see <a href="https://tools.ietf.org/html/rfc7239">https://tools.ietf.org/html/rfc7239</a>, +	private boolean removeOnly;, +, +	/**, +	 * Enables mode in which any "Forwarded" or "X-Forwarded-*" headers are, +	 * removed only and the information in them ignored., +	 * @param removeOnly whether to discard and ingore forwarded headers, +	 * @since 4.3.9, +	 */, +	public void setRemoveOnly(boolean removeOnly) {, +		this.removeOnly = removeOnly;, +	}, +, +, +		if (this.removeOnly) {, +			ForwardedHeaderRemovingRequest theRequest = new ForwardedHeaderRemovingRequest(request);, +			filterChain.doFilter(theRequest, response);, +		}, +		else {, +			HttpServletRequest theRequest = new ForwardedHeaderExtractingRequest(request, this.pathHelper);, +			HttpServletResponse theResponse = new ForwardedHeaderExtractingResponse(response, theRequest);, +			filterChain.doFilter(theRequest, theResponse);, +		}, +	/**, +	 * Hide "Forwarded" or "X-Forwarded-*" headers., +	 */, +	private static class ForwardedHeaderRemovingRequest extends HttpServletRequestWrapper {, +, +		private final Map<String, List<String>> headers;, +, +, +		public ForwardedHeaderRemovingRequest(HttpServletRequest request) {, +			super(request);, +			this.headers = initHeaders(request);, +		}, +, +		private static Map<String, List<String>> initHeaders(HttpServletRequest request) {, +			Map<String, List<String>> headers = new LinkedCaseInsensitiveMap<>(Locale.ENGLISH);, +			Enumeration<String> names = request.getHeaderNames();, +			while (names.hasMoreElements()) {, +				String name = names.nextElement();, +				if (!FORWARDED_HEADER_NAMES.contains(name)) {, +					headers.put(name, Collections.list(request.getHeaders(name)));, +				}, +			}, +			return headers;, +		}, +, +		// Override header accessors to not expose forwarded headers, +, +		@Override, +		public String getHeader(String name) {, +			List<String> value = this.headers.get(name);, +			return (CollectionUtils.isEmpty(value) ? null : value.get(0));, +		}, +, +		@Override, +		public Enumeration<String> getHeaders(String name) {, +			List<String> value = this.headers.get(name);, +			return (Collections.enumeration(value != null ? value : Collections.emptySet()));, +		}, +, +		@Override, +		public Enumeration<String> getHeaderNames() {, +			return Collections.enumeration(this.headers.keySet());, +		}, +	}, +, +	/**, +	 * Extract and use "Forwarded" or "X-Forwarded-*" headers., +	 */, +	private static class ForwardedHeaderExtractingRequest extends ForwardedHeaderRemovingRequest {, +		public ForwardedHeaderExtractingRequest(HttpServletRequest request, UrlPathHelper pathHelper) {, +	private static class ForwardedHeaderExtractingResponse extends HttpServletResponseWrapper {, +, +, +		public ForwardedHeaderExtractingResponse(HttpServletResponse response, HttpServletRequest request) {, +++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, + * Extract values from "Forwarded" and "X-Forwarded-*" headers in order to wrap, + * and override the following from the request and response:, + * {@link HttpServletRequest#isSecure() isSecure()}, and, + * {@link HttpServletResponse#sendRedirect(String) sendRedirect(String)}., + * In effect the wrapped request and response reflect the client-originated, + * protocol and address., + *, + * <p><strong>Note:</strong> This filter can also be used in a, + * {@link #setRemoveOnly removeOnly} mode where "Forwarded" and "X-Forwarded-*", + * headers are only eliminated without being used., + * @see <a href="https://tools.ietf.org/html/rfc7239">https://tools.ietf.org/html/rfc7239</a>]