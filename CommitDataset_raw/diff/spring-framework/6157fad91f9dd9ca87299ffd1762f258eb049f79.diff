[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, + * Copyright 2002-2016 the original author or authors., +	 * @param requiredType type the bean must match; can be an interface or superclass., +	 * {@code null} is disallowed., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, + * Copyright 2002-2016 the original author or authors., +	 * @param requiredType type the bean must match; can be an interface or superclass., +	 * {@code null} is disallowed., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/NamedBean.java, + * Copyright 2002-2016 the original author or authors., + * Counterpart of {@link BeanNameAware}. Returns the bean name of an object., + * <p>This interface can be introduced to avoid a brittle dependence on, + * bean name in objects used with Spring IoC and Spring AOP., +	 * Return the name of this bean in a Spring bean factory, if known., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, + * Copyright 2002-2016 the original author or authors., +	 * @param requiredType type the bean must match; can be an interface or superclass., +	 * {@code null} is disallowed., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/NamedBean.java, + * Copyright 2002-2016 the original author or authors., + * Counterpart of {@link BeanNameAware}. Returns the bean name of an object., + * <p>This interface can be introduced to avoid a brittle dependence on, + * bean name in objects used with Spring IoC and Spring AOP., +	 * Return the name of this bean in a Spring bean factory, if known., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/AutowireCapableBeanFactory.java, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.beans.factory.NoUniqueBeanDefinitionException;, +, +	//-------------------------------------------------------------------------, +	// Delegate methods for resolving injection points, +	//-------------------------------------------------------------------------, +, +	/**, +	 * Resolve the bean instance that uniquely matches the given object type, if any,, +	 * including its bean name., +	 * <p>This is effectively a variant of {@link #getBean(Class)} which preserves the, +	 * bean name of the matching instance., +	 * @param requiredType type the bean must match; can be an interface or superclass., +	 * {@code null} is disallowed., +	 * @return the bean name plus bean instance, +	 * @throws NoSuchBeanDefinitionException if no bean of the given type was found, +	 * @throws NoUniqueBeanDefinitionException if more than one bean of the given type was found, +	 * @throws BeansException if the bean could not be created, +	 * @since 4.3.3, +	 * @see #getBean(Class), +	 */, +	<T> NamedBeanHolder<T> resolveNamedBean(Class<T> requiredType) throws BeansException;, +, +	 * @param requestingBeanName the name of the bean which declares the present dependency, +	 * @throws NoSuchBeanDefinitionException if no matching bean was found, +	 * @throws NoUniqueBeanDefinitionException if more than one matching bean was found, +	 * @throws BeansException if dependency resolution failed for any other reason, +	 * @see #resolveDependency(DependencyDescriptor, String, Set, TypeConverter), +	 * @since 2.5, +	Object resolveDependency(DependencyDescriptor descriptor, String requestingBeanName) throws BeansException;, +, +	/**, +	 * Resolve the specified dependency against the beans defined in this factory., +	 * @param descriptor the descriptor for the dependency, +	 * @param requestingBeanName the name of the bean which declares the present dependency, +	 * @param autowiredBeanNames a Set that all names of autowired beans (used for resolving, +	 * the present dependency) are supposed to be added to, +	 * @param typeConverter the TypeConverter to use for populating arrays and collections, +	 * @return the resolved object, or {@code null} if none found, +	 * @throws NoSuchBeanDefinitionException if no matching bean was found, +	 * @throws NoUniqueBeanDefinitionException if more than one matching bean was found, +	 * @throws BeansException if dependency resolution failed for any other reason, +	 * @see DependencyDescriptor, +	 * @since 2.5, +	 */, +	Object resolveDependency(DependencyDescriptor descriptor, String requestingBeanName,, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, + * Copyright 2002-2016 the original author or authors., +	 * @param requiredType type the bean must match; can be an interface or superclass., +	 * {@code null} is disallowed., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/NamedBean.java, + * Copyright 2002-2016 the original author or authors., + * Counterpart of {@link BeanNameAware}. Returns the bean name of an object., + * <p>This interface can be introduced to avoid a brittle dependence on, + * bean name in objects used with Spring IoC and Spring AOP., +	 * Return the name of this bean in a Spring bean factory, if known., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/AutowireCapableBeanFactory.java, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.beans.factory.NoUniqueBeanDefinitionException;, +, +	//-------------------------------------------------------------------------, +	// Delegate methods for resolving injection points, +	//-------------------------------------------------------------------------, +, +	/**, +	 * Resolve the bean instance that uniquely matches the given object type, if any,, +	 * including its bean name., +	 * <p>This is effectively a variant of {@link #getBean(Class)} which preserves the, +	 * bean name of the matching instance., +	 * @param requiredType type the bean must match; can be an interface or superclass., +	 * {@code null} is disallowed., +	 * @return the bean name plus bean instance, +	 * @throws NoSuchBeanDefinitionException if no bean of the given type was found, +	 * @throws NoUniqueBeanDefinitionException if more than one bean of the given type was found, +	 * @throws BeansException if the bean could not be created]