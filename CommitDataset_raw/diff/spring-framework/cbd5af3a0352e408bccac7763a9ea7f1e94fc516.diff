[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/CloseStatus.java, +	/**, +	 * Indicates that a session has become unreliable (e.g. timed out while sending, +	 * a message) and extra care should be exercised while closing the session in, +	 * order to avoid locking additional threads., +	 *, +	 * <p><strong>NOTE:</strong> Spring Framework specific status code., +	 */, +	public static final CloseStatus SESSION_NOT_RELIABLE = new CloseStatus(4500);, +, +, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/CloseStatus.java, +	/**, +	 * Indicates that a session has become unreliable (e.g. timed out while sending, +	 * a message) and extra care should be exercised while closing the session in, +	 * order to avoid locking additional threads., +	 *, +	 * <p><strong>NOTE:</strong> Spring Framework specific status code., +	 */, +	public static final CloseStatus SESSION_NOT_RELIABLE = new CloseStatus(4500);, +, +, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/handler/ConcurrentWebSocketSessionDecorator.java, +import org.springframework.web.socket.CloseStatus;, +	private volatile boolean limitExceeded;, +		if (this.limitExceeded) {, +				if (logger.isTraceEnabled()) {, +					logger.trace("Another send already in progress, session id '" +, +		if (this.flushLock.tryLock() && !this.limitExceeded) {, +		if (this.closeLock.tryLock() && !this.limitExceeded) {, +, +					String errorMessage = "Message send time " + getTimeSinceSendStarted() +, +							" (ms) exceeded the allowed limit " + this.sendTimeLimit;, +, +					sessionLimitReached(errorMessage, CloseStatus.SESSION_NOT_RELIABLE);, +, +					String errorMessage = "The send buffer size " + this.bufferSize.get() + " bytes for " +, +							"session '" + getId() + " exceeded the allowed limit " + this.bufferSizeLimit;, +, +					sessionLimitReached(errorMessage,, +							(getTimeSinceSendStarted() >= 10000 ? CloseStatus.SESSION_NOT_RELIABLE : null));, +	private void sessionLimitReached(String reason, CloseStatus status) {, +		this.limitExceeded = true;, +		throw new SessionLimitExceededException(reason, status);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/CloseStatus.java, +	/**, +	 * Indicates that a session has become unreliable (e.g. timed out while sending, +	 * a message) and extra care should be exercised while closing the session in, +	 * order to avoid locking additional threads., +	 *, +	 * <p><strong>NOTE:</strong> Spring Framework specific status code., +	 */, +	public static final CloseStatus SESSION_NOT_RELIABLE = new CloseStatus(4500);, +, +, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/handler/ConcurrentWebSocketSessionDecorator.java, +import org.springframework.web.socket.CloseStatus;, +	private volatile boolean limitExceeded;, +		if (this.limitExceeded) {, +				if (logger.isTraceEnabled()) {, +					logger.trace("Another send already in progress, session id '" +, +		if (this.flushLock.tryLock() && !this.limitExceeded) {, +		if (this.closeLock.tryLock() && !this.limitExceeded) {, +, +					String errorMessage = "Message send time " + getTimeSinceSendStarted() +, +							" (ms) exceeded the allowed limit " + this.sendTimeLimit;, +, +					sessionLimitReached(errorMessage, CloseStatus.SESSION_NOT_RELIABLE);, +, +					String errorMessage = "The send buffer size " + this.bufferSize.get() + " bytes for " +, +							"session '" + getId() + " exceeded the allowed limit " + this.bufferSizeLimit;, +, +					sessionLimitReached(errorMessage,, +							(getTimeSinceSendStarted() >= 10000 ? CloseStatus.SESSION_NOT_RELIABLE : null));, +	private void sessionLimitReached(String reason, CloseStatus status) {, +		this.limitExceeded = true;, +		throw new SessionLimitExceededException(reason, status);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/handler/SessionLimitExceededException.java, +import org.springframework.web.socket.CloseStatus;, +, +	private final CloseStatus status;, +, +	public SessionLimitExceededException(String message, CloseStatus status) {, +		this.status = (status != null) ? status : CloseStatus.NO_STATUS_CODE;, +	}, +, +, +	public CloseStatus getStatus() {, +		return this.status;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/CloseStatus.java, +	/**, +	 * Indicates that a session has become unreliable (e.g. timed out while sending, +	 * a message) and extra care should be exercised while closing the session in, +	 * order to avoid locking additional threads., +	 *, +	 * <p><strong>NOTE:</strong> Spring Framework specific status code., +	 */]