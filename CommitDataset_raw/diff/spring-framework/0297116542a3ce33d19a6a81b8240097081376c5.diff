[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/AbstractPropertyAccessor.java, + * Copyright 2002-2009 the original author or authors., +	public <T> T convertIfNecessary(Object value, Class<T> requiredType) throws TypeMismatchException {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/AbstractPropertyAccessor.java, + * Copyright 2002-2009 the original author or authors., +	public <T> T convertIfNecessary(Object value, Class<T> requiredType) throws TypeMismatchException {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/SimpleTypeConverter.java, +	public <T> T convertIfNecessary(Object value, Class<T> requiredType) throws TypeMismatchException {, +	public <T> T convertIfNecessary(, +			Object value, Class<T> requiredType, MethodParameter methodParam) throws TypeMismatchException {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/AbstractPropertyAccessor.java, + * Copyright 2002-2009 the original author or authors., +	public <T> T convertIfNecessary(Object value, Class<T> requiredType) throws TypeMismatchException {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/SimpleTypeConverter.java, +	public <T> T convertIfNecessary(Object value, Class<T> requiredType) throws TypeMismatchException {, +	public <T> T convertIfNecessary(, +			Object value, Class<T> requiredType, MethodParameter methodParam) throws TypeMismatchException {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverter.java, + * Copyright 2002-2009 the original author or authors., +	<T> T convertIfNecessary(Object value, Class<T> requiredType) throws TypeMismatchException;, +	<T> T convertIfNecessary(Object value, Class<T> requiredType, MethodParameter methodParam), +++ b/org.springframework.beans/src/main/java/org/springframework/beans/AbstractPropertyAccessor.java, + * Copyright 2002-2009 the original author or authors., +	public <T> T convertIfNecessary(Object value, Class<T> requiredType) throws TypeMismatchException {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/SimpleTypeConverter.java, +	public <T> T convertIfNecessary(Object value, Class<T> requiredType) throws TypeMismatchException {, +	public <T> T convertIfNecessary(, +			Object value, Class<T> requiredType, MethodParameter methodParam) throws TypeMismatchException {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverter.java, + * Copyright 2002-2009 the original author or authors., +	<T> T convertIfNecessary(Object value, Class<T> requiredType) throws TypeMismatchException;, +	<T> T convertIfNecessary(Object value, Class<T> requiredType, MethodParameter methodParam), +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +	public <T> T convertIfNecessary(Object newValue, Class<T> requiredType) throws IllegalArgumentException {, +	public <T> T convertIfNecessary(Object newValue, Class<T> requiredType, MethodParameter methodParam), +	public <T> T convertIfNecessary(, +			String propertyName, Object oldValue, Object newValue, Class<T> requiredType), +	@SuppressWarnings("unchecked"), +	protected <T> T convertIfNecessary(, +			String propertyName, Object oldValue, Object newValue, Class<T> requiredType,, +					return (T) convertedValue.toString();, +					return (T) convertToTypedArray(convertedValue, propertyName, requiredType.getComponentType());, +		return (T) convertedValue;, +				Object newConvertedValue;, +	protected Object convertToTypedArray(Object input, String propertyName, Class<?> componentType) {, +		Collection convertedCopy;, +		Iterator it;, +		Map convertedCopy;, +		Iterator it;, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/AbstractPropertyAccessor.java, + * Copyright 2002-2009 the original author or authors., +	public <T> T convertIfNecessary(Object value, Class<T> requiredType) throws TypeMismatchException {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/SimpleTypeConverter.java, +	public <T> T convertIfNecessary(Object value, Class<T> requiredType) throws TypeMismatchException {, +	public <T> T convertIfNecessary(, +			Object value, Class<T> requiredType, MethodParameter methodParam) throws TypeMismatchException {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverter.java, + * Copyright 2002-2009 the original author or authors., +	<T> T convertIfNecessary(Object value, Class<T> requiredType) throws TypeMismatchException;, +	<T> T convertIfNecessary(Object value, Class<T> requiredType, MethodParameter methodParam), +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +	public <T> T convertIfNecessary(Object newValue, Class<T> requiredType) throws IllegalArgumentException {, +	public <T> T convertIfNecessary(Object newValue, Class<T> requiredType, MethodParameter methodParam), +	public <T> T convertIfNecessary(, +			String propertyName, Object oldValue, Object newValue, Class<T> requiredType), +	@SuppressWarnings("unchecked"), +	protected <T> T convertIfNecessary(, +			String propertyName, Object oldValue, Object newValue, Class<T> requiredType,, +					return (T) convertedValue.toString();, +					return (T) convertToTypedArray(convertedValue, propertyName, requiredType.getComponentType());, +		return (T) convertedValue;, +				Object newConvertedValue;, +	protected Object convertToTypedArray(Object input, String propertyName, Class<?> componentType) {, +		Collection convertedCopy;, +		Iterator it;, +		Map convertedCopy;, +		Iterator it;, +++ b/org.springframework.context/src/main/java/org/springframework/validation/DataBinder.java, + * Copyright 2002-2009 the original author or authors., +	public <T> T convertIfNecessary(Object value, Class<T> requiredType) throws TypeMismatchException {, +	public <T> T convertIfNecessary(, +			Object value, Class<T> requiredType, MethodParameter methodParam) throws TypeMismatchException {]