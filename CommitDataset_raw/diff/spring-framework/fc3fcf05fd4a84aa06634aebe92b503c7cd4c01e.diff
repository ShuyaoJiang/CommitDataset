[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultPathContainer.java, +/*, + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.http.server.reactive;, +, +import java.nio.charset.Charset;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +import java.util.stream.Collectors;, +, +import org.springframework.lang.Nullable;, +import org.springframework.util.Assert;, +import org.springframework.util.CollectionUtils;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import org.springframework.util.StringUtils;, +, +/**, + * Default implementation of {@link PathContainer}., + *, + * @author Rossen Stoyanchev, + * @since 5.0, + */, +class DefaultPathContainer implements PathContainer {, +, +	private static final MultiValueMap<String, String> EMPTY_MAP = new LinkedMultiValueMap<>(0);, +, +	private static final PathContainer EMPTY_PATH = new DefaultPathContainer("", Collections.emptyList());, +, +	private static final PathContainer.Separator SEPARATOR = () -> "/";, +, +, +	private final String path;, +, +	private final List<Element> elements;, +, +, +	private DefaultPathContainer(String path, List<Element> elements) {, +		this.path = path;, +		this.elements = Collections.unmodifiableList(elements);, +	}, +, +, +	@Override, +	public String value() {, +		return this.path;, +	}, +, +	@Override, +	public List<Element> elements() {, +		return this.elements;, +	}, +, +, +	@Override, +	public boolean equals(@Nullable Object other) {, +		if (this == other) {, +			return true;, +		}, +		if (other == null || getClass() != other.getClass()) {, +			return false;, +		}, +		return this.path.equals(((DefaultPathContainer) other).path);, +	}, +, +	@Override, +	public int hashCode() {, +		return this.path.hashCode();, +	}, +, +	@Override, +	public String toString() {, +		return "[path='" + this.path + "\']";, +	}, +, +, +	static PathContainer parsePath(String path, Charset charset) {, +		if (path.equals("")) {, +			return EMPTY_PATH;, +		}, +		List<Element> elements = new ArrayList<>();, +		int begin;, +		if (path.length() > 0 && path.charAt(0) == '/') {, +			begin = 1;, +			elements.add(SEPARATOR);]