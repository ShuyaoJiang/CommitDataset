[+++ b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java, +	private boolean caseSensitive = true;, +, +	 * Specify whether to perform pattern matching in a case-sensitive fashion., +	 * <p>Default is {@code true}. Switch this to {@code false} for case-insensitive matching., +	 * @since 4.2, +	 */, +	public void setCaseSensitive(boolean caseSensitive) {, +		this.caseSensitive = caseSensitive;, +	}, +, +	/**, +	 * @since 4.0.1, +			matcher = new AntPathStringMatcher(pattern, this.caseSensitive);, +		if (!result) {, +			throw new IllegalStateException("Pattern \"" + pattern + "\" is not a match for \"" + path + "\"");, +		}, +			this(pattern, true);, +		}, +, +		public AntPathStringMatcher(String pattern, boolean caseSensitive) {, +			Matcher matcher = GLOB_PATTERN.matcher(pattern);, +			while (matcher.find()) {, +				patternBuilder.append(quote(pattern, end, matcher.start()));, +				String match = matcher.group();, +						this.variableNames.add(matcher.group(1));, +				end = matcher.end();, +			this.pattern = (caseSensitive ? Pattern.compile(patternBuilder.toString()) :, +					Pattern.compile(patternBuilder.toString(), Pattern.CASE_INSENSITIVE));, +					if (this.variableNames.size() != matcher.groupCount()) {, +						throw new IllegalArgumentException("The number of capturing groups in the pattern segment " +, +								this.pattern + " does not match the number of URI template variables it defines, " +, +								"which can occur if capturing groups are used in a URI template regex. " +, +								"Use non-capturing groups instead.");, +					}, +++ b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java, +	private boolean caseSensitive = true;, +, +	 * Specify whether to perform pattern matching in a case-sensitive fashion., +	 * <p>Default is {@code true}. Switch this to {@code false} for case-insensitive matching., +	 * @since 4.2, +	 */, +	public void setCaseSensitive(boolean caseSensitive) {, +		this.caseSensitive = caseSensitive;, +	}, +, +	/**, +	 * @since 4.0.1, +			matcher = new AntPathStringMatcher(pattern, this.caseSensitive);, +		if (!result) {, +			throw new IllegalStateException("Pattern \"" + pattern + "\" is not a match for \"" + path + "\"");, +		}, +			this(pattern, true);, +		}, +, +		public AntPathStringMatcher(String pattern, boolean caseSensitive) {, +			Matcher matcher = GLOB_PATTERN.matcher(pattern);, +			while (matcher.find()) {, +				patternBuilder.append(quote(pattern, end, matcher.start()));, +				String match = matcher.group();, +						this.variableNames.add(matcher.group(1));, +				end = matcher.end();, +			this.pattern = (caseSensitive ? Pattern.compile(patternBuilder.toString()) :, +					Pattern.compile(patternBuilder.toString(), Pattern.CASE_INSENSITIVE));, +					if (this.variableNames.size() != matcher.groupCount()) {, +						throw new IllegalArgumentException("The number of capturing groups in the pattern segment " +, +								this.pattern + " does not match the number of URI template variables it defines, " +, +								"which can occur if capturing groups are used in a URI template regex. " +, +								"Use non-capturing groups instead.");, +					}, +++ b/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java, +	@Test  // SPR-8687, +		assertFalse(pathMatcher.match("/group/{groupName}/members", "/Group/  Sales/Members"));, +	}, +, +	@Test  // SPR-13286, +	public void caseInsensitive() {, +		pathMatcher.setCaseSensitive(false);, +, +		assertTrue(pathMatcher.match("/group/{groupName}/members", "/group/sales/members"));, +		assertTrue(pathMatcher.match("/group/{groupName}/members", "/Group/Sales/Members"));, +		assertTrue(pathMatcher.match("/Group/{groupName}/Members", "/group/Sales/members"));]