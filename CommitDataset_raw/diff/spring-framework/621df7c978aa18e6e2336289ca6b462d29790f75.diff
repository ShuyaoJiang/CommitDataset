[+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/NettyDataBufferFactory.java, + * Copyright 2002-2017 the original author or authors., +	/**, +	 * Return the {@code ByteBufAllocator} used by this factory., +	 */, +	public ByteBufAllocator getByteBufAllocator() {, +		return this.byteBufAllocator;, +	}, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/NettyDataBufferFactory.java, + * Copyright 2002-2017 the original author or authors., +	/**, +	 * Return the {@code ByteBufAllocator} used by this factory., +	 */, +	public ByteBufAllocator getByteBufAllocator() {, +		return this.byteBufAllocator;, +	}, +++ b/spring-core/src/test/java/org/springframework/core/codec/DataBufferDecoderTests.java, +import static org.junit.Assert.*;, +, +		release(fooBuffer, barBuffer);, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/NettyDataBufferFactory.java, + * Copyright 2002-2017 the original author or authors., +	/**, +	 * Return the {@code ByteBufAllocator} used by this factory., +	 */, +	public ByteBufAllocator getByteBufAllocator() {, +		return this.byteBufAllocator;, +	}, +++ b/spring-core/src/test/java/org/springframework/core/codec/DataBufferDecoderTests.java, +import static org.junit.Assert.*;, +, +		release(fooBuffer, barBuffer);, +++ b/spring-core/src/test/java/org/springframework/core/codec/DataBufferEncoderTests.java, +import static org.junit.Assert.*;, +, +		release(fooBuffer, barBuffer);, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/NettyDataBufferFactory.java, + * Copyright 2002-2017 the original author or authors., +	/**, +	 * Return the {@code ByteBufAllocator} used by this factory., +	 */, +	public ByteBufAllocator getByteBufAllocator() {, +		return this.byteBufAllocator;, +	}, +++ b/spring-core/src/test/java/org/springframework/core/codec/DataBufferDecoderTests.java, +import static org.junit.Assert.*;, +, +		release(fooBuffer, barBuffer);, +++ b/spring-core/src/test/java/org/springframework/core/codec/DataBufferEncoderTests.java, +import static org.junit.Assert.*;, +, +		release(fooBuffer, barBuffer);, +++ b/spring-core/src/test/java/org/springframework/core/io/buffer/AbstractDataBufferAllocatingTestCase.java, + * Copyright 2002-2017 the original author or authors., +import java.util.List;, +import io.netty.buffer.ByteBufAllocator;, +import io.netty.buffer.PoolArenaMetric;, +import io.netty.buffer.PooledByteBufAllocatorMetric;, +import org.junit.Rule;, +import org.junit.rules.Verifier;, +import static org.junit.Assert.*;, +				// disable caching for reliable leak detection, see https://github.com/netty/netty/issues/5275, +				{new NettyDataBufferFactory(new PooledByteBufAllocator(true, 1, 1, 8192, 11, 0, 0, 0, true))},, +				{new NettyDataBufferFactory(new PooledByteBufAllocator(false, 1, 1, 8192, 11, 0, 0, 0, true))},, +	@Rule, +	public final Verifier leakDetector = new LeakDetector();, +, +, +	private class LeakDetector extends Verifier {, +, +		@Override, +		protected void verify() throws Throwable {, +			if (bufferFactory instanceof NettyDataBufferFactory) {, +				ByteBufAllocator byteBufAllocator =, +						((NettyDataBufferFactory) bufferFactory).getByteBufAllocator();, +				if (byteBufAllocator instanceof PooledByteBufAllocator) {, +					PooledByteBufAllocator pooledByteBufAllocator =, +							(PooledByteBufAllocator) byteBufAllocator;, +					PooledByteBufAllocatorMetric metric = pooledByteBufAllocator.metric();, +					long allocations = calculateAllocations(metric.directArenas()) +, +							calculateAllocations(metric.heapArenas());, +					assertTrue("ByteBuf leak detected: " + allocations +, +							" allocations were not released", allocations == 0);, +				}, +			}, +		}, +, +		private long calculateAllocations(List<PoolArenaMetric> metrics) {, +			return metrics.stream().mapToLong(PoolArenaMetric::numActiveAllocations).sum();, +		}, +, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/NettyDataBufferFactory.java, + * Copyright 2002-2017 the original author or authors., +	/**, +	 * Return the {@code ByteBufAllocator} used by this factory., +	 */, +	public ByteBufAllocator getByteBufAllocator() {, +		return this.byteBufAllocator;]