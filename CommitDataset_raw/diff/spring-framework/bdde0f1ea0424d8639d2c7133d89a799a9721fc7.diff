[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ServerWebExchangeArgumentResolver.java, +import org.springframework.http.HttpRequest;, +import org.springframework.web.util.UriBuilder;, +import org.springframework.web.util.UriComponentsBuilder;, + * <li>{@link UriBuilder} or {@link UriComponentsBuilder} -- for building URL's, + * relative to the current request, +						HttpMethod.class == type ||, +						UriBuilder.class == type || UriComponentsBuilder.class == type);, +		else if (UriBuilder.class == paramType || UriComponentsBuilder.class == paramType) {, +			return UriComponentsBuilder.fromHttpRequest(exchange.getRequest());, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ServerWebExchangeArgumentResolver.java, +import org.springframework.http.HttpRequest;, +import org.springframework.web.util.UriBuilder;, +import org.springframework.web.util.UriComponentsBuilder;, + * <li>{@link UriBuilder} or {@link UriComponentsBuilder} -- for building URL's, + * relative to the current request, +						HttpMethod.class == type ||, +						UriBuilder.class == type || UriComponentsBuilder.class == type);, +		else if (UriBuilder.class == paramType || UriComponentsBuilder.class == paramType) {, +			return UriComponentsBuilder.fromHttpRequest(exchange.getRequest());, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/WebSessionArgumentResolver.java, +	// We need this resolver separate from ServerWebExchangeArgumentResolver which, +	// implements SyncHandlerMethodArgumentResolver., +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ServerWebExchangeArgumentResolver.java, +import org.springframework.http.HttpRequest;, +import org.springframework.web.util.UriBuilder;, +import org.springframework.web.util.UriComponentsBuilder;, + * <li>{@link UriBuilder} or {@link UriComponentsBuilder} -- for building URL's, + * relative to the current request, +						HttpMethod.class == type ||, +						UriBuilder.class == type || UriComponentsBuilder.class == type);, +		else if (UriBuilder.class == paramType || UriComponentsBuilder.class == paramType) {, +			return UriComponentsBuilder.fromHttpRequest(exchange.getRequest());, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/WebSessionArgumentResolver.java, +	// We need this resolver separate from ServerWebExchangeArgumentResolver which, +	// implements SyncHandlerMethodArgumentResolver., +, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/ServerWebExchangeArgumentResolverTests.java, +import com.sun.jndi.toolkit.url.Uri;, +import org.springframework.web.util.UriBuilder;, +import org.springframework.web.util.UriComponentsBuilder;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +		assertTrue(this.resolver.supportsParameter(this.testMethod.arg(UriComponentsBuilder.class)));, +		assertTrue(this.resolver.supportsParameter(this.testMethod.arg(UriBuilder.class)));, +, +	@Test, +	public void resolveUriComponentsBuilder() throws Exception {, +		MethodParameter param = this.testMethod.arg(UriComponentsBuilder.class);, +		Object value = this.resolver.resolveArgument(param, new BindingContext(), this.exchange).block();, +, +		assertNotNull(value);, +		assertEquals(UriComponentsBuilder.class, value.getClass());, +		assertEquals("/path/next", ((UriComponentsBuilder) value).path("/next").build().toUriString());, +	}, +			UriComponentsBuilder uriComponentsBuilder,, +			UriBuilder uriBuilder,]