[+++ b/spring-core/src/main/java/org/springframework/core/env/AbstractPropertyResolver.java, +		ConversionService conversionServiceToUse = this.conversionService;, +		if (conversionServiceToUse == null) {, +			conversionServiceToUse = DefaultConversionService.getSharedInstance();, +		return conversionServiceToUse.convert(value, targetType);, +++ b/spring-core/src/main/java/org/springframework/core/env/AbstractPropertyResolver.java, +		ConversionService conversionServiceToUse = this.conversionService;, +		if (conversionServiceToUse == null) {, +			conversionServiceToUse = DefaultConversionService.getSharedInstance();, +		return conversionServiceToUse.convert(value, targetType);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/SQLErrorCodesFactory.java, +	 * @return the corresponding {@code SQLErrorCodes} object that got removed,, +++ b/spring-core/src/main/java/org/springframework/core/env/AbstractPropertyResolver.java, +		ConversionService conversionServiceToUse = this.conversionService;, +		if (conversionServiceToUse == null) {, +			conversionServiceToUse = DefaultConversionService.getSharedInstance();, +		return conversionServiceToUse.convert(value, targetType);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/SQLErrorCodesFactory.java, +	 * @return the corresponding {@code SQLErrorCodes} object that got removed,, +++ b/spring-oxm/src/main/java/org/springframework/oxm/xstream/CatchAllConverter.java, + * Copyright 2002-2016 the original author or authors., + * XStream {@link Converter} that supports all classes, but throws exceptions for, + * (un)marshalling., + * <p>The main purpose of this class is to, + * {@linkplain com.thoughtworks.xstream.XStream#registerConverter(com.thoughtworks.xstream.converters.Converter, int) register}, + * this converter as a catch-all last converter with a, + * or higher priority, in addition to converters that explicitly handle the domain, + * classes that should be supported. As a result, default XStream converters with, + * lower priorities and possible security vulnerabilities do not get invoked., + * <p>For instance:, + * MyDomainClass myObject = unmarshaller.unmarshal(source);, + * @since 3.2.5, +++ b/spring-core/src/main/java/org/springframework/core/env/AbstractPropertyResolver.java, +		ConversionService conversionServiceToUse = this.conversionService;, +		if (conversionServiceToUse == null) {, +			conversionServiceToUse = DefaultConversionService.getSharedInstance();, +		return conversionServiceToUse.convert(value, targetType);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/SQLErrorCodesFactory.java, +	 * @return the corresponding {@code SQLErrorCodes} object that got removed,, +++ b/spring-oxm/src/main/java/org/springframework/oxm/xstream/CatchAllConverter.java, + * Copyright 2002-2016 the original author or authors., + * XStream {@link Converter} that supports all classes, but throws exceptions for, + * (un)marshalling., + * <p>The main purpose of this class is to, + * {@linkplain com.thoughtworks.xstream.XStream#registerConverter(com.thoughtworks.xstream.converters.Converter, int) register}, + * this converter as a catch-all last converter with a, + * or higher priority, in addition to converters that explicitly handle the domain, + * classes that should be supported. As a result, default XStream converters with, + * lower priorities and possible security vulnerabilities do not get invoked., + * <p>For instance:, + * MyDomainClass myObject = unmarshaller.unmarshal(source);, + * @since 3.2.5, +++ b/spring-web/src/main/java/org/springframework/web/client/RestOperations.java, +	 * and return the representation found in the response., +	 * @param request the object to be PATCHed (may be {@code null}), +	 * and return the representation found in the response., +	 * @param request the object to be PATCHed (may be {@code null}), +	 * and return the representation found in the response., +	 * @param request the object to be PATCHed (may be {@code null}), +++ b/spring-core/src/main/java/org/springframework/core/env/AbstractPropertyResolver.java, +		ConversionService conversionServiceToUse = this.conversionService;, +		if (conversionServiceToUse == null) {, +			conversionServiceToUse = DefaultConversionService.getSharedInstance();, +		return conversionServiceToUse.convert(value, targetType);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/SQLErrorCodesFactory.java, +	 * @return the corresponding {@code SQLErrorCodes} object that got removed,, +++ b/spring-oxm/src/main/java/org/springframework/oxm/xstream/CatchAllConverter.java, + * Copyright 2002-2016 the original author or authors., + * XStream {@link Converter} that supports all classes, but throws exceptions for, + * (un)marshalling., + * <p>The main purpose of this class is to, + * {@linkplain com.thoughtworks.xstream.XStream#registerConverter(com.thoughtworks.xstream.converters.Converter, int) register}, + * this converter as a catch-all last converter with a, + * or higher priority, in addition to converters that explicitly handle the domain, + * classes that should be supported. As a result, default XStream converters with, + * lower priorities and possible security vulnerabilities do not get invoked., + * <p>For instance:, + * MyDomainClass myObject = unmarshaller.unmarshal(source);, + * @since 3.2.5, +++ b/spring-web/src/main/java/org/springframework/web/client/RestOperations.java, +	 * and return the representation found in the response., +	 * @param request the object to be PATCHed (may be {@code null}), +	 * and return the representation found in the response., +	 * @param request the object to be PATCHed (may be {@code null}), +	 * and return the representation found in the response., +	 * @param request the object to be PATCHed (may be {@code null}), +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java]