[+++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java, +import java.util.SortedSet;, +import org.springframework.web.util.patterns.PathPattern;, +import org.springframework.web.util.patterns.PathPatternRegistry;, + * @author Brian Clozel, +	private final PathPatternRegistry patternRegistry = new PathPatternRegistry();, +	private final Map<PathPattern, CorsConfiguration> corsConfigurations = new LinkedHashMap<>();, +	public void setCorsConfigurations(Map<PathPattern, CorsConfiguration> corsConfigurations) {, +		this.patternRegistry.clear();, +			this.patternRegistry.addAll(corsConfigurations.keySet());, +	public Map<PathPattern, CorsConfiguration> getCorsConfigurations() {, +		this.patternRegistry, +				.register(path), +				.forEach(pattern -> this.corsConfigurations.put(pattern, config));, +		SortedSet<PathPattern> matches = this.patternRegistry.findMatches(lookupPath);, +		if(!matches.isEmpty()) {, +			return this.corsConfigurations.get(matches.first());, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java, +import java.util.SortedSet;, +import org.springframework.web.util.patterns.PathPattern;, +import org.springframework.web.util.patterns.PathPatternRegistry;, + * @author Brian Clozel, +	private final PathPatternRegistry patternRegistry = new PathPatternRegistry();, +	private final Map<PathPattern, CorsConfiguration> corsConfigurations = new LinkedHashMap<>();, +	public void setCorsConfigurations(Map<PathPattern, CorsConfiguration> corsConfigurations) {, +		this.patternRegistry.clear();, +			this.patternRegistry.addAll(corsConfigurations.keySet());, +	public Map<PathPattern, CorsConfiguration> getCorsConfigurations() {, +		this.patternRegistry, +				.register(path), +				.forEach(pattern -> this.corsConfigurations.put(pattern, config));, +		SortedSet<PathPattern> matches = this.patternRegistry.findMatches(lookupPath);, +		if(!matches.isEmpty()) {, +			return this.corsConfigurations.get(matches.first());, +++ b/spring-web/src/main/java/org/springframework/web/util/patterns/PathPatternRegistry.java, +/*, + * Copyright 2002-2017 the original author or authors., + *, + *  Licensed under the Apache License, Version 2.0 (the "License");, + *  you may not use this file except in compliance with the License., + *  You may obtain a copy of the License at, + *, + *       http://www.apache.org/licenses/LICENSE-2.0, + *, + *  Unless required by applicable law or agreed to in writing, software, + *  distributed under the License is distributed on an "AS IS" BASIS,, + *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + *  See the License for the specific language governing permissions and, + *  limitations under the License., + */, +, +package org.springframework.web.util.patterns;, +, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.Comparator;, +import java.util.HashSet;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Set;, +import java.util.SortedSet;, +import java.util.TreeSet;, +import java.util.stream.Collectors;, +, +import org.springframework.util.StringUtils;, +, +/**, + * Registry that holds {@code PathPattern}s instances, + * sorted according to their specificity (most specific patterns first)., + * <p>For a given path pattern string, {@code PathPattern} variants, + * can be generated and registered automatically, depending, + * on the {@code useTrailingSlashMatch}, {@code useSuffixPatternMatch}, + * and {@code fileExtensions} properties., + *, + * @author Brian Clozel, + * @since 5.0, + */, +public class PathPatternRegistry {, +, +	private final PathPatternParser pathPatternParser;, +, +	private final HashSet<PathPattern> patterns;, +, +	private boolean useSuffixPatternMatch = false;, +, +	private boolean useTrailingSlashMatch = false;, +, +	private Set<String> fileExtensions = Collections.emptySet();, +, +	/**, +	 * Create a new {@code PathPatternRegistry} with defaults options for, +	 * pattern variants generation., +	 * <p>By default, no pattern variant will be generated., +	 */, +	public PathPatternRegistry() {, +		this.pathPatternParser = new PathPatternParser();, +		this.patterns = new HashSet<>();, +	}, +]