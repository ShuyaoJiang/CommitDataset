[+++ b/spring-web/src/main/java/org/springframework/web/accept/ServletPathExtensionContentNegotiationStrategy.java, +		MediaType mediaType = null;, +		if (this.servletContext != null) {, +		if (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType)) {, +			MediaType superMediaType = super.getMediaTypeForResource(resource);, +			if (superMediaType != null) {, +				mediaType = superMediaType;, +			}, +++ b/spring-web/src/main/java/org/springframework/web/accept/ServletPathExtensionContentNegotiationStrategy.java, +		MediaType mediaType = null;, +		if (this.servletContext != null) {, +		if (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType)) {, +			MediaType superMediaType = super.getMediaTypeForResource(resource);, +			if (superMediaType != null) {, +				mediaType = superMediaType;, +			}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java, +import javax.servlet.ServletContext;, +	private final ContentNegotiationManagerFactoryBean cnmFactoryBean = new ContentNegotiationManagerFactoryBean();, +, +	@Override, +	protected void initServletContext(ServletContext servletContext) {, +		this.cnmFactoryBean.setServletContext(servletContext);, +	}, +, +			this.cnmFactoryBean.afterPropertiesSet();, +			this.contentNegotiationManager = this.cnmFactoryBean.getObject();, +++ b/spring-web/src/main/java/org/springframework/web/accept/ServletPathExtensionContentNegotiationStrategy.java, +		MediaType mediaType = null;, +		if (this.servletContext != null) {, +		if (mediaType == null || MediaType.APPLICATION_OCTET_STREAM.equals(mediaType)) {, +			MediaType superMediaType = super.getMediaTypeForResource(resource);, +			if (superMediaType != null) {, +				mediaType = superMediaType;, +			}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java, +import javax.servlet.ServletContext;, +	private final ContentNegotiationManagerFactoryBean cnmFactoryBean = new ContentNegotiationManagerFactoryBean();, +, +	@Override, +	protected void initServletContext(ServletContext servletContext) {, +		this.cnmFactoryBean.setServletContext(servletContext);, +	}, +, +			this.cnmFactoryBean.afterPropertiesSet();, +			this.contentNegotiationManager = this.cnmFactoryBean.getObject();, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.java, +	@Test // SPR-14368, +	public void getResourceWithMediaTypeResolvedThroughServletContext() throws Exception {, +		MockServletContext servletContext = new MockServletContext() {, +, +			@Override, +			public String getMimeType(String filePath) {, +				return "foo/bar";, +			}, +, +			@Override, +			public String getVirtualServerName() {, +				return null;, +			}, +		};, +, +		List<Resource> paths = Collections.singletonList(new ClassPathResource("test/", getClass()));, +		this.handler = new ResourceHttpRequestHandler();, +		this.handler.setServletContext(servletContext);, +		this.handler.setLocations(paths);, +		this.handler.afterPropertiesSet();, +, +		this.request.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, "foo.css");, +		this.handler.handleRequest(this.request, this.response);, +, +		assertEquals("foo/bar", this.response.getContentType());, +		assertEquals("h1 { color:red; }", this.response.getContentAsString());, +	}, +]