[+++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/HandlerExecutionChain.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.util.ObjectUtils;, +		this(handler, (HandlerInterceptor[]) null);, +	public HandlerExecutionChain(Object handler, HandlerInterceptor... interceptors) {, +		initInterceptorList().add(interceptor);, +	public void addInterceptors(HandlerInterceptor... interceptors) {, +		if (!ObjectUtils.isEmpty(interceptors)) {, +			initInterceptorList().addAll(Arrays.asList(interceptors));, +	private List<HandlerInterceptor> initInterceptorList() {, +				// An interceptor array specified through the constructor, +		this.interceptors = null;, +		return this.interceptorList;, +	}, +++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/HandlerExecutionChain.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.util.ObjectUtils;, +		this(handler, (HandlerInterceptor[]) null);, +	public HandlerExecutionChain(Object handler, HandlerInterceptor... interceptors) {, +		initInterceptorList().add(interceptor);, +	public void addInterceptors(HandlerInterceptor... interceptors) {, +		if (!ObjectUtils.isEmpty(interceptors)) {, +			initInterceptorList().addAll(Arrays.asList(interceptors));, +	private List<HandlerInterceptor> initInterceptorList() {, +				// An interceptor array specified through the constructor, +		this.interceptors = null;, +		return this.interceptorList;, +	}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/HandlerExecutionChain.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.util.ObjectUtils;, +		this(handler, (HandlerInterceptor[]) null);, +	public HandlerExecutionChain(Object handler, HandlerInterceptor... interceptors) {, +, +		initInterceptorList().add(interceptor);, +	public void addInterceptors(HandlerInterceptor... interceptors) {, +		if (!ObjectUtils.isEmpty(interceptors)) {, +			initInterceptorList().addAll(Arrays.asList(interceptors));, +	private List<HandlerInterceptor> initInterceptorList() {, +				// An interceptor array specified through the constructor, +		this.interceptors = null;, +		return this.interceptorList;, +	}, +, +		HandlerInterceptor[] interceptors = getInterceptors();, +		if (!ObjectUtils.isEmpty(interceptors)) {, +			for (int i = 0; i < interceptors.length; i++) {, +				HandlerInterceptor interceptor = interceptors[i];, +		HandlerInterceptor[] interceptors = getInterceptors();, +		if (!ObjectUtils.isEmpty(interceptors)) {, +			for (int i = interceptors.length - 1; i >= 0; i--) {, +				HandlerInterceptor interceptor = interceptors[i];, +	}, +		HandlerInterceptor[] interceptors = getInterceptors();, +		if (!ObjectUtils.isEmpty(interceptors)) {, +				HandlerInterceptor interceptor = interceptors[i];, +	}, +		HandlerInterceptor[] interceptors = getInterceptors();, +		if (!ObjectUtils.isEmpty(interceptors)) {, +			for (int i = interceptors.length - 1; i >= 0; i--) {, +						AsyncHandlerInterceptor asyncInterceptor = (AsyncHandlerInterceptor) interceptors[i];, +	}, +, +++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/HandlerExecutionChain.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.util.ObjectUtils;, +		this(handler, (HandlerInterceptor[]) null);, +	public HandlerExecutionChain(Object handler, HandlerInterceptor... interceptors) {, +		initInterceptorList().add(interceptor);, +	public void addInterceptors(HandlerInterceptor... interceptors) {, +		if (!ObjectUtils.isEmpty(interceptors)) {, +			initInterceptorList().addAll(Arrays.asList(interceptors));, +	private List<HandlerInterceptor> initInterceptorList() {, +				// An interceptor array specified through the constructor, +		this.interceptors = null;, +		return this.interceptorList;, +	}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/HandlerExecutionChain.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.util.ObjectUtils;, +		this(handler, (HandlerInterceptor[]) null);, +	public HandlerExecutionChain(Object handler, HandlerInterceptor... interceptors) {, +, +		initInterceptorList().add(interceptor);, +	public void addInterceptors(HandlerInterceptor... interceptors) {, +		if (!ObjectUtils.isEmpty(interceptors)) {, +			initInterceptorList().addAll(Arrays.asList(interceptors));, +	private List<HandlerInterceptor> initInterceptorList() {, +				// An interceptor array specified through the constructor, +		this.interceptors = null;, +		return this.interceptorList;, +	}, +, +		HandlerInterceptor[] interceptors = getInterceptors();, +		if (!ObjectUtils.isEmpty(interceptors)) {, +			for (int i = 0; i < interceptors.length; i++) {, +				HandlerInterceptor interceptor = interceptors[i];, +		HandlerInterceptor[] interceptors = getInterceptors();, +		if (!ObjectUtils.isEmpty(interceptors)) {, +			for (int i = interceptors.length - 1; i >= 0; i--) {]