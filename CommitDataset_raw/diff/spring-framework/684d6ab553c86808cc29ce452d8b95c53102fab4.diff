[+++ b/src/asciidoc/core-beans.adoc, +	<bean id="myCommand" class="fiona.apple.AsyncCommand" scope="prototype">, +		<lookup-method name="createCommand" bean="myCommand"/>, +whenever it needs a new instance of the __myCommand__ bean. You must be careful to deploy, +the `myCommand` bean as a prototype, if that is actually what is needed. If it is, + as a <<beans-factory-scopes-singleton,singleton>>, the same instance of the `myCommand`, +Alternatively, within the annotation-based component model, you may declare a lookup, +method through the `@Lookup` annotation:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	public abstract class CommandManager {, +, +		public Object process(Object commandState) {, +			Command command = createCommand();, +			command.setState(commandState);, +			return command.execute();, +		}, +, +		@Lookup("myCommand"), +		protected abstract Command createCommand();, +	}, +----, +, +Or, more idiomatically, you may rely on the target bean getting resolved against the, +declared return type of the lookup method:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	public abstract class CommandManager {, +, +		public Object process(Object commandState) {, +			MyCommand command = createCommand();, +			command.setState(commandState);, +			return command.execute();, +		}, +, +		@Lookup, +		protected abstract MyCommand createCommand();, +	}, +----, +, +Note that you will typically declare such annotated lookup methods with a concrete, +stub implementation, in order for them to be compatible with Spring's component, +scanning rules where abstract classes get ignored by default. This limitation does not, +apply in case of explicitly registered or explicitly imported bean classes., +, +Another way of accessing differently scoped target beans is an `ObjectFactory`/, +`Provider` injection point. Check out <<beans-factory-scopes-other-injection>>., +, +`org.springframework.beans.factory.config` package) to be of use., +As an extended variant, you may declare `ObjectProvider<MyTargetBean>` which delivers, +several additional access variants, including `getIfAvailable` and `getIfUnique`., +]