[+++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/MapperConverter.java, +		// TODO - could detect cyclical reference here if had a mapping context? (source should not equal currently mapped object) , +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/MapperConverter.java, +		// TODO - could detect cyclical reference here if had a mapping context? (source should not equal currently mapped object) , +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/SpelMapper.java, +	private final Set<SpelMapping> mappings = new LinkedHashSet<SpelMapping>();, +		SpelMapping mapping = new SpelMapping(sourceExp, targetExp);, +		for (SpelMapping mapping : this.mappings) {, +		Set<SpelMapping> autoMappings = getAutoMappings(sourceContext, targetContext);, +		for (SpelMapping mapping : autoMappings) {, +	private Set<SpelMapping> getAutoMappings(EvaluationContext sourceContext, EvaluationContext targetContext) {, +			Set<SpelMapping> autoMappings = new LinkedHashSet<SpelMapping>();, +							autoMappings.add(new SpelMapping(sourceExpression, targetExpression));, +		for (SpelMapping mapping : this.mappings) {, +	private static class MappingConversionService extends DefaultConversionService {, +		protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {, +			return new MapperConverter(new SpelMapper());, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/MapperConverter.java, +		// TODO - could detect cyclical reference here if had a mapping context? (source should not equal currently mapped object) , +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/SpelMapper.java, +	private final Set<SpelMapping> mappings = new LinkedHashSet<SpelMapping>();, +		SpelMapping mapping = new SpelMapping(sourceExp, targetExp);, +		for (SpelMapping mapping : this.mappings) {, +		Set<SpelMapping> autoMappings = getAutoMappings(sourceContext, targetContext);, +		for (SpelMapping mapping : autoMappings) {, +	private Set<SpelMapping> getAutoMappings(EvaluationContext sourceContext, EvaluationContext targetContext) {, +			Set<SpelMapping> autoMappings = new LinkedHashSet<SpelMapping>();, +							autoMappings.add(new SpelMapping(sourceExpression, targetExpression));, +		for (SpelMapping mapping : this.mappings) {, +	private static class MappingConversionService extends DefaultConversionService {, +		protected GenericConverter getDefaultConverter(TypeDescriptor sourceType, TypeDescriptor targetType) {, +			return new MapperConverter(new SpelMapper());, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/SpelMapping.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.mapping.support;, +, +import java.util.Collection;, +, +import org.springframework.core.convert.converter.Converter;, +import org.springframework.core.convert.converter.ConverterFactory;, +import org.springframework.core.convert.support.ConverterFactoryGenericConverter;, +import org.springframework.core.convert.support.ConverterGenericConverter;, +import org.springframework.core.convert.support.GenericConverter;, +import org.springframework.expression.EvaluationContext;, +import org.springframework.expression.Expression;, +import org.springframework.mapping.MappingFailure;, +, +/**, + * An individual mapping definition between two fields., + * @author Keith Donald, + */, +class SpelMapping implements MappingConfiguration {, +, +	private Expression source;, +, +	private Expression target;, +, +	private GenericConverter converter;, +, +	public SpelMapping(Expression source, Expression target) {, +		this.source = source;, +		this.target = target;, +	}, +, +	public String getSourceExpressionString() {, +		return this.source.getExpressionString();, +	}, +, +	public String getTargetExpressionString() {, +		return this.target.getExpressionString();, +	}, +, +	public MappingConfiguration setConverter(Converter<?, ?> converter) {, +		return setGenericConverter(new ConverterGenericConverter(converter));, +	}, +, +	public MappingConfiguration setConverterFactory(ConverterFactory<?, ?> converter) {, +		return setGenericConverter(new ConverterFactoryGenericConverter(converter));, +	}, +, +	public MappingConfiguration setGenericConverter(GenericConverter converter) {, +		this.converter = converter;, +		return this;, +	}, +, +	public void map(EvaluationContext sourceContext, EvaluationContext targetContext,]