[+++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java, +++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerRequest.java, +++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerRequest.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, +		public Optional<Object> attribute(String name) {, +++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerRequest.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, +		public Optional<Object> attribute(String name) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerRequest.java, +	default Optional<Object> attribute(String name) {, +		Map<String, Object> attributes = attributes();, +		if (attributes.containsKey(name)) {, +			return Optional.of(attributes.get(name));, +		}, +		else {, +			return Optional.empty();, +		}, +	}, +++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerRequest.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, +		public Optional<Object> attribute(String name) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerRequest.java, +	default Optional<Object> attribute(String name) {, +		Map<String, Object> attributes = attributes();, +		if (attributes.containsKey(name)) {, +			return Optional.of(attributes.get(name));, +		}, +		else {, +			return Optional.empty();, +		}, +	}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/support/ServerRequestWrapper.java, +	public Optional<Object> attribute(String name) {, +++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerRequest.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, +		public Optional<Object> attribute(String name) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerRequest.java, +	default Optional<Object> attribute(String name) {, +		Map<String, Object> attributes = attributes();, +		if (attributes.containsKey(name)) {, +			return Optional.of(attributes.get(name));, +		}, +		else {, +			return Optional.empty();, +		}, +	}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/support/ServerRequestWrapper.java, +	public Optional<Object> attribute(String name) {, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/server/MockServerRequest.java]