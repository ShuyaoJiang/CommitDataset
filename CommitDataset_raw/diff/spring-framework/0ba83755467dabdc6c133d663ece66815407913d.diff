[+++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean.java, +import org.springframework.orm.jpa.persistenceunit.SmartPersistenceUnitInfo;, +		if (jpaVendorAdapter != null && this.persistenceUnitInfo instanceof SmartPersistenceUnitInfo) {, +			((SmartPersistenceUnitInfo) this.persistenceUnitInfo).setPersistenceProviderPackageName(, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean.java, +import org.springframework.orm.jpa.persistenceunit.SmartPersistenceUnitInfo;, +		if (jpaVendorAdapter != null && this.persistenceUnitInfo instanceof SmartPersistenceUnitInfo) {, +			((SmartPersistenceUnitInfo) this.persistenceUnitInfo).setPersistenceProviderPackageName(, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java, + * Copyright 2002-2010 the original author or authors., +import java.lang.reflect.InvocationHandler;, +import java.lang.reflect.Method;, +import java.lang.reflect.Proxy;, +import org.springframework.util.ClassUtils;, +	private static final boolean jpa2ApiPresent = ClassUtils.hasMethod(PersistenceUnitInfo.class, "getSharedCacheMode");, +, +	private final Map<String, PersistenceUnitInfo> persistenceUnitInfos = new HashMap<String, PersistenceUnitInfo>();, +		for (SpringPersistenceUnitInfo pui : puis) {, +			PersistenceUnitInfo puiToStore = pui;, +			if (jpa2ApiPresent) {, +				puiToStore = (PersistenceUnitInfo) Proxy.newProxyInstance(SmartPersistenceUnitInfo.class.getClassLoader(),, +						new Class[] {SmartPersistenceUnitInfo.class}, new Jpa2PersistenceUnitInfoDecorator(pui));, +			}, +			this.persistenceUnitInfos.put(name, puiToStore);, +	protected final PersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {, +, +	/**, +	 * Decorator that exposes a JPA 2.0 compliant PersistenceUnitInfo interface for a, +	 * JPA 1.0 based SpringPersistenceUnitInfo object, adapting the <code>getSharedCacheMode</code>, +	 * and <code>getValidationMode</code> methods from String names to enum return values., +	 */, +	private static class Jpa2PersistenceUnitInfoDecorator implements InvocationHandler {, +, +		private final SpringPersistenceUnitInfo target;, +, +		private final Class<? extends Enum> sharedCacheModeEnum;, +, +		private final Class<? extends Enum> validationModeEnum;, +, +		@SuppressWarnings("unchecked"), +		public Jpa2PersistenceUnitInfoDecorator(SpringPersistenceUnitInfo target) {, +			this.target = target;, +			try {, +				this.sharedCacheModeEnum = (Class<? extends Enum>), +						ClassUtils.forName("javax.persistence.SharedCacheMode", PersistenceUnitInfo.class.getClassLoader());, +				this.validationModeEnum = (Class<? extends Enum>), +						ClassUtils.forName("javax.persistence.ValidationMode", PersistenceUnitInfo.class.getClassLoader());, +			}, +			catch (Exception ex) {, +				throw new IllegalStateException("JPA 2.0 API enum types not present", ex);, +			}, +		}, +, +		public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {, +			if (method.getName().equals("getSharedCacheMode")) {, +				return Enum.valueOf(this.sharedCacheModeEnum, this.target.getSharedCacheModeName());, +			}, +			else if (method.getName().equals("getValidationMode")) {, +				return Enum.valueOf(this.validationModeEnum, this.target.getValidationModeName());, +			}, +			else {, +				return method.invoke(this.target, args);, +			}, +		}, +	}, +, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean.java, +import org.springframework.orm.jpa.persistenceunit.SmartPersistenceUnitInfo;, +		if (jpaVendorAdapter != null && this.persistenceUnitInfo instanceof SmartPersistenceUnitInfo) {, +			((SmartPersistenceUnitInfo) this.persistenceUnitInfo).setPersistenceProviderPackageName(, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java, + * Copyright 2002-2010 the original author or authors., +import java.lang.reflect.InvocationHandler;, +import java.lang.reflect.Method;, +import java.lang.reflect.Proxy;, +import org.springframework.util.ClassUtils;, +	private static final boolean jpa2ApiPresent = ClassUtils.hasMethod(PersistenceUnitInfo.class, "getSharedCacheMode");, +, +	private final Map<String, PersistenceUnitInfo> persistenceUnitInfos = new HashMap<String, PersistenceUnitInfo>();, +		for (SpringPersistenceUnitInfo pui : puis) {, +			PersistenceUnitInfo puiToStore = pui;, +			if (jpa2ApiPresent) {, +				puiToStore = (PersistenceUnitInfo) Proxy.newProxyInstance(SmartPersistenceUnitInfo.class.getClassLoader(),, +						new Class[] {SmartPersistenceUnitInfo.class}, new Jpa2PersistenceUnitInfoDecorator(pui));, +			}, +			this.persistenceUnitInfos.put(name, puiToStore);, +	protected final PersistenceUnitInfo getPersistenceUnitInfo(String persistenceUnitName) {, +, +	/**, +	 * Decorator that exposes a JPA 2.0 compliant PersistenceUnitInfo interface for a, +	 * JPA 1.0 based SpringPersistenceUnitInfo object, adapting the <code>getSharedCacheMode</code>, +	 * and <code>getValidationMode</code> methods from String names to enum return values., +	 */, +	private static class Jpa2PersistenceUnitInfoDecorator implements InvocationHandler {, +, +		private final SpringPersistenceUnitInfo target;, +, +		private final Class<? extends Enum> sharedCacheModeEnum;, +, +		private final Class<? extends Enum> validationModeEnum;]