[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessagingTemplate.java, +		destination = destination.startsWith("/") ? destination : "/" + destination;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessagingTemplate.java, +		destination = destination.startsWith("/") ? destination : "/" + destination;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, +import java.util.Collection;, +		if (handler == null) {, +			return new NoOpBrokerMessageHandler();, +		}, +		updateUserDestinationResolver(handler);, +		return handler;, +	}, +, +	private void updateUserDestinationResolver(AbstractBrokerMessageHandler handler) {, +		Collection<String> prefixes = handler.getDestinationPrefixes();, +		if (!prefixes.isEmpty() && !prefixes.iterator().next().startsWith("/")) {, +			((DefaultUserDestinationResolver) userDestinationResolver()).setRemoveLeadingSlash(true);, +		}, +		updateUserDestinationResolver(handler);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessagingTemplate.java, +		destination = destination.startsWith("/") ? destination : "/" + destination;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, +import java.util.Collection;, +		if (handler == null) {, +			return new NoOpBrokerMessageHandler();, +		}, +		updateUserDestinationResolver(handler);, +		return handler;, +	}, +, +	private void updateUserDestinationResolver(AbstractBrokerMessageHandler handler) {, +		Collection<String> prefixes = handler.getDestinationPrefixes();, +		if (!prefixes.isEmpty() && !prefixes.iterator().next().startsWith("/")) {, +			((DefaultUserDestinationResolver) userDestinationResolver()).setRemoveLeadingSlash(true);, +		}, +		updateUserDestinationResolver(handler);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolver.java, +	private boolean removeLeadingSlash = false;, +	 * Use this property to indicate whether the leading slash from translated, +	 * user destinations should be removed or not. This depends on the, +	 * destination prefixes the message broker is configured with., +	 * <p>By default this is set to {@code false}, i.e. "do not change the, +	 * target destination", although, +	 * {@link org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration, +	 * AbstractMessageBrokerConfiguration} may change that to {@code true} if, +	 * the configured destinations do not have a leading slash., +	 * @param remove whether to remove the leading slash, +	 * @since 4.3.14, +	 */, +	public void setRemoveLeadingSlash(boolean remove) {, +		this.removeLeadingSlash = remove;, +	}, +, +	/**, +	 * Whether to remove the leading slash from target destinations., +	 */, +	public boolean isRemoveLeadingSlash() {, +		return this.removeLeadingSlash;, +	}, +, +	/**, +	 * @deprecated as of 4.3.14 this property is no longer used and is replaced, +	 * by {@link #setRemoveLeadingSlash(boolean)} that indicates more explicitly, +	 * whether to keep the leading slash which may or may not be the case, +	 * regardless of how the {@code PathMatcher} is configured., +	@Deprecated, +		// Do nothing, +		if (isRemoveLeadingSlash()) {, +		if (isRemoveLeadingSlash()) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessagingTemplate.java, +		destination = destination.startsWith("/") ? destination : "/" + destination;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, +import java.util.Collection;, +		if (handler == null) {, +			return new NoOpBrokerMessageHandler();, +		}, +		updateUserDestinationResolver(handler);, +		return handler;, +	}, +, +	private void updateUserDestinationResolver(AbstractBrokerMessageHandler handler) {, +		Collection<String> prefixes = handler.getDestinationPrefixes();, +		if (!prefixes.isEmpty() && !prefixes.iterator().next().startsWith("/")) {, +			((DefaultUserDestinationResolver) userDestinationResolver()).setRemoveLeadingSlash(true);, +		}, +		updateUserDestinationResolver(handler);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolver.java, +	private boolean removeLeadingSlash = false;, +	 * Use this property to indicate whether the leading slash from translated, +	 * user destinations should be removed or not. This depends on the, +	 * destination prefixes the message broker is configured with., +	 * <p>By default this is set to {@code false}, i.e. "do not change the, +	 * target destination", although, +	 * {@link org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration, +	 * AbstractMessageBrokerConfiguration} may change that to {@code true} if, +	 * the configured destinations do not have a leading slash., +	 * @param remove whether to remove the leading slash, +	 * @since 4.3.14, +	 */, +	public void setRemoveLeadingSlash(boolean remove) {]