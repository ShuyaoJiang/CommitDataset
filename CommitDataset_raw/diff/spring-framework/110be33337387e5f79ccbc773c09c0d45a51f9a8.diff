[+++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +	private static final String HOST_HEADER = "Host";, +, +		String host = getHeader(HOST_HEADER);, +		if (host != null) {, +			host = host.trim();, +			if (host.startsWith("[")) {, +				host = host.substring(1, host.indexOf(']'));, +			}, +			else if (host.contains(":")) {, +				host = host.substring(0, host.indexOf(':'));, +			}, +			return host;, +		}, +, +		// else, +		String host = getHeader(HOST_HEADER);, +		if (host != null) {, +			host = host.trim();, +			int idx;, +			if (host.startsWith("[")) {, +				idx = host.indexOf(':', host.indexOf(']'));, +			}, +			else {, +				idx = host.indexOf(':');, +			}, +			if (idx != -1) {, +				return Integer.parseInt(host.substring(idx + 1));, +			}, +		}, +, +		// else, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +	private static final String HOST_HEADER = "Host";, +, +		String host = getHeader(HOST_HEADER);, +		if (host != null) {, +			host = host.trim();, +			if (host.startsWith("[")) {, +				host = host.substring(1, host.indexOf(']'));, +			}, +			else if (host.contains(":")) {, +				host = host.substring(0, host.indexOf(':'));, +			}, +			return host;, +		}, +, +		// else, +		String host = getHeader(HOST_HEADER);, +		if (host != null) {, +			host = host.trim();, +			int idx;, +			if (host.startsWith("[")) {, +				idx = host.indexOf(':', host.indexOf(']'));, +			}, +			else {, +				idx = host.indexOf(':');, +			}, +			if (idx != -1) {, +				return Integer.parseInt(host.substring(idx + 1));, +			}, +		}, +, +		// else, +++ b/spring-test/src/test/java/org/springframework/mock/web/MockHttpServletRequestTests.java, +	private static final String HOST = "Host";, +, +	public void getServerNameWithDefaultName() {, +		assertEquals("localhost", request.getServerName());, +	}, +, +	@Test, +	public void getServerNameWithCustomName() {, +		request.setServerName("example.com");, +		assertEquals("example.com", request.getServerName());, +	}, +, +	@Test, +	public void getServerNameViaHostHeaderWithoutPort() {, +		String testServer = "test.server";, +		request.addHeader(HOST, testServer);, +		assertEquals(testServer, request.getServerName());, +	}, +, +	@Test, +	public void getServerNameViaHostHeaderWithPort() {, +		String testServer = "test.server";, +		request.addHeader(HOST, testServer + ":8080");, +		assertEquals(testServer, request.getServerName());, +	}, +, +	@Test, +	public void getServerNameViaHostHeaderAsIpv6AddressWithoutPort() {, +		String ipv6Address = "[2001:db8:0:1]";, +		request.addHeader(HOST, ipv6Address);, +		assertEquals("2001:db8:0:1", request.getServerName());, +	}, +, +	@Test, +	public void getServerNameViaHostHeaderAsIpv6AddressWithPort() {]