[+++ b/spring-core/src/main/java/org/springframework/util/SocketUtils.java, + * Copyright 2002-2015 the original author or authors., +import java.net.InetAddress;, + * @author Gary Russell, +					ServerSocket serverSocket = ServerSocketFactory.getDefault().createServerSocket(port, 1,, +						InetAddress.getByName("localhost"));, +					DatagramSocket socket = new DatagramSocket(port, InetAddress.getByName("localhost"));, +++ b/spring-core/src/main/java/org/springframework/util/SocketUtils.java, + * Copyright 2002-2015 the original author or authors., +import java.net.InetAddress;, + * @author Gary Russell, +					ServerSocket serverSocket = ServerSocketFactory.getDefault().createServerSocket(port, 1,, +						InetAddress.getByName("localhost"));, +					DatagramSocket socket = new DatagramSocket(port, InetAddress.getByName("localhost"));, +++ b/spring-core/src/test/java/org/springframework/util/SocketUtilsTests.java, + * Copyright 2002-2015 the original author or authors., +import java.net.DatagramSocket;, +import java.net.InetAddress;, +import java.net.ServerSocket;, +import javax.net.ServerSocketFactory;, + * @author Gary Russell, +	@Test(expected = IllegalStateException.class), +	public void findAvailableTcpPortWhenPortOnLoopbackInterfaceIsNotAvailable() throws Exception {, +		int port = SocketUtils.findAvailableTcpPort();, +		ServerSocket socket = ServerSocketFactory.getDefault().createServerSocket(port, 1, InetAddress.getByName("localhost"));, +		try {, +			// will only look for the exact port, since random.nextInt(1) always returns 0, +			SocketUtils.findAvailableTcpPort(port, port + 1);, +		}, +		finally {, +			socket.close();, +		}, +	}, +, +	@Test(expected = IllegalStateException.class), +	public void findAvailableUdpPortWhenPortOnLoopbackInterfaceIsNotAvailable() throws Exception {, +		int port = SocketUtils.findAvailableUdpPort();, +		DatagramSocket socket = new DatagramSocket(port, InetAddress.getByName("localhost"));, +		try {, +			// will only look for the exact port, since random.nextInt(1) always returns 0, +			SocketUtils.findAvailableUdpPort(port, port + 1);, +		}, +		finally {, +			socket.close();, +		}, +	}, +]