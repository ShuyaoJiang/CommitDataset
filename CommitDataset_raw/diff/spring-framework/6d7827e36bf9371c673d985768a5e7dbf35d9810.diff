[+++ b/spring-core/src/main/java/org/springframework/core/codec/StringDecoder.java, +	 * Split the given data buffer on delimiter boundaries., +	 * The returned Flux contains an {@link #END_FRAME} buffer after each delimiter., +	 * Check whether the given buffer is {@link #END_FRAME}., +	 * Join the given list of buffers into a single buffer., +	 * {@link #textPlainOnly(List, boolean)}, +	 * input strings, +	 * {@link #allMimeTypes(List, boolean)}, +	 * input strings, +++ b/spring-core/src/main/java/org/springframework/core/codec/StringDecoder.java, +	 * Split the given data buffer on delimiter boundaries., +	 * The returned Flux contains an {@link #END_FRAME} buffer after each delimiter., +	 * Check whether the given buffer is {@link #END_FRAME}., +	 * Join the given list of buffers into a single buffer., +	 * {@link #textPlainOnly(List, boolean)}, +	 * input strings, +	 * {@link #allMimeTypes(List, boolean)}, +	 * input strings, +++ b/spring-core/src/test/java/org/springframework/core/codec/StringDecoderTests.java, +import static java.nio.charset.StandardCharsets.*;, + *, +, +, +		assertTrue(this.decoder.canDecode(TYPE, MimeTypeUtils.TEXT_PLAIN));, +		assertTrue(this.decoder.canDecode(TYPE, MimeTypeUtils.TEXT_HTML));, +		assertTrue(this.decoder.canDecode(TYPE, MimeTypeUtils.APPLICATION_JSON));, +		assertTrue(this.decoder.canDecode(TYPE, MimeTypeUtils.parseMimeType("text/plain;charset=utf-8")));, +	public void decodeToMonoWithEmptyFlux() {, +++ b/spring-core/src/main/java/org/springframework/core/codec/StringDecoder.java, +	 * Split the given data buffer on delimiter boundaries., +	 * The returned Flux contains an {@link #END_FRAME} buffer after each delimiter., +	 * Check whether the given buffer is {@link #END_FRAME}., +	 * Join the given list of buffers into a single buffer., +	 * {@link #textPlainOnly(List, boolean)}, +	 * input strings, +	 * {@link #allMimeTypes(List, boolean)}, +	 * input strings, +++ b/spring-core/src/test/java/org/springframework/core/codec/StringDecoderTests.java, +import static java.nio.charset.StandardCharsets.*;, + *, +, +, +		assertTrue(this.decoder.canDecode(TYPE, MimeTypeUtils.TEXT_PLAIN));, +		assertTrue(this.decoder.canDecode(TYPE, MimeTypeUtils.TEXT_HTML));, +		assertTrue(this.decoder.canDecode(TYPE, MimeTypeUtils.APPLICATION_JSON));, +		assertTrue(this.decoder.canDecode(TYPE, MimeTypeUtils.parseMimeType("text/plain;charset=utf-8")));, +	public void decodeToMonoWithEmptyFlux() {, +++ b/spring-web/src/main/java/org/springframework/http/codec/xml/Jaxb2XmlDecoder.java, +				outputClass.isAnnotationPresent(XmlType.class)) && super.canDecode(elementType, mimeType);]