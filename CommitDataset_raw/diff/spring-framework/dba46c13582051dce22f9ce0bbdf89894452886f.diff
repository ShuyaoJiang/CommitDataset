[+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/HeaderAssertionTests.java, +		.andExpect(header().string(LAST_MODIFIED, String.valueOf(currentTime)));, +		.andExpect(header().string(LAST_MODIFIED, equalTo(String.valueOf(currentTime))));, +		.andExpect(header().longValue(LAST_MODIFIED, currentTime));, +		assertIncorrectResponseHeaderValue(header().string(LAST_MODIFIED, String.valueOf(unexpected)), unexpected);, +		assertIncorrectResponseHeaderValue(header().string(LAST_MODIFIED, equalTo(String.valueOf(unexpected))),, +		assertIncorrectResponseHeaderValue(header().longValue(LAST_MODIFIED, unexpected), unexpected);, +			assertMessageContains(e, String.valueOf(unexpected));, +			assertMessageContains(e, String.valueOf(currentTime));, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/HeaderAssertionTests.java, +		.andExpect(header().string(LAST_MODIFIED, String.valueOf(currentTime)));, +		.andExpect(header().string(LAST_MODIFIED, equalTo(String.valueOf(currentTime))));, +		.andExpect(header().longValue(LAST_MODIFIED, currentTime));, +		assertIncorrectResponseHeaderValue(header().string(LAST_MODIFIED, String.valueOf(unexpected)), unexpected);, +		assertIncorrectResponseHeaderValue(header().string(LAST_MODIFIED, equalTo(String.valueOf(unexpected))),, +		assertIncorrectResponseHeaderValue(header().longValue(LAST_MODIFIED, unexpected), unexpected);, +			assertMessageContains(e, String.valueOf(unexpected));, +			assertMessageContains(e, String.valueOf(currentTime));, +++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java, +						response.setDateHeader(HEADER_LAST_MODIFIED, lastModifiedTimestamp);, +						response.setDateHeader(HEADER_LAST_MODIFIED, lastModifiedTimestamp);, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/HeaderAssertionTests.java, +		.andExpect(header().string(LAST_MODIFIED, String.valueOf(currentTime)));, +		.andExpect(header().string(LAST_MODIFIED, equalTo(String.valueOf(currentTime))));, +		.andExpect(header().longValue(LAST_MODIFIED, currentTime));, +		assertIncorrectResponseHeaderValue(header().string(LAST_MODIFIED, String.valueOf(unexpected)), unexpected);, +		assertIncorrectResponseHeaderValue(header().string(LAST_MODIFIED, equalTo(String.valueOf(unexpected))),, +		assertIncorrectResponseHeaderValue(header().longValue(LAST_MODIFIED, unexpected), unexpected);, +			assertMessageContains(e, String.valueOf(unexpected));, +			assertMessageContains(e, String.valueOf(currentTime));, +++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java, +						response.setDateHeader(HEADER_LAST_MODIFIED, lastModifiedTimestamp);, +						response.setDateHeader(HEADER_LAST_MODIFIED, lastModifiedTimestamp);, +++ b/spring-web/src/test/java/org/springframework/web/context/request/ServletWebRequestHttpMethodsTests.java, +		assertEquals("" + epochTime, servletResponse.getHeader("Last-Modified"));, +		assertEquals("" + currentDate.getTime(), servletResponse.getHeader("Last-Modified"));, +		assertEquals("" + currentDate.getTime(), servletResponse.getHeader("Last-Modified"));, +		assertEquals("" + currentEpoch, servletResponse.getHeader("Last-Modified"));, +		assertEquals("" + epochTime, servletResponse.getHeader("Last-Modified"));, +		assertEquals("" + epochTime, servletResponse.getHeader("Last-Modified"));, +		assertEquals("" + epochTime, servletResponse.getHeader("Last-Modified"));, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/HeaderAssertionTests.java, +		.andExpect(header().string(LAST_MODIFIED, String.valueOf(currentTime)));, +		.andExpect(header().string(LAST_MODIFIED, equalTo(String.valueOf(currentTime))));, +		.andExpect(header().longValue(LAST_MODIFIED, currentTime));, +		assertIncorrectResponseHeaderValue(header().string(LAST_MODIFIED, String.valueOf(unexpected)), unexpected);, +		assertIncorrectResponseHeaderValue(header().string(LAST_MODIFIED, equalTo(String.valueOf(unexpected))),, +		assertIncorrectResponseHeaderValue(header().longValue(LAST_MODIFIED, unexpected), unexpected);, +			assertMessageContains(e, String.valueOf(unexpected));, +			assertMessageContains(e, String.valueOf(currentTime));, +++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java, +						response.setDateHeader(HEADER_LAST_MODIFIED, lastModifiedTimestamp);, +						response.setDateHeader(HEADER_LAST_MODIFIED, lastModifiedTimestamp);, +++ b/spring-web/src/test/java/org/springframework/web/context/request/ServletWebRequestHttpMethodsTests.java, +		assertEquals("" + epochTime, servletResponse.getHeader("Last-Modified"));, +		assertEquals("" + currentDate.getTime(), servletResponse.getHeader("Last-Modified"));, +		assertEquals("" + currentDate.getTime(), servletResponse.getHeader("Last-Modified"));, +		assertEquals("" + currentEpoch, servletResponse.getHeader("Last-Modified"));, +		assertEquals("" + epochTime, servletResponse.getHeader("Last-Modified"));, +		assertEquals("" + epochTime, servletResponse.getHeader("Last-Modified"));, +		assertEquals("" + epochTime, servletResponse.getHeader("Last-Modified"));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/WebContentGenerator.java, +			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L);, +			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis());, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/HeaderAssertionTests.java, +		.andExpect(header().string(LAST_MODIFIED, String.valueOf(currentTime)));, +		.andExpect(header().string(LAST_MODIFIED, equalTo(String.valueOf(currentTime))));, +		.andExpect(header().longValue(LAST_MODIFIED, currentTime));, +		assertIncorrectResponseHeaderValue(header().string(LAST_MODIFIED, String.valueOf(unexpected)), unexpected);, +		assertIncorrectResponseHeaderValue(header().string(LAST_MODIFIED, equalTo(String.valueOf(unexpected))),, +		assertIncorrectResponseHeaderValue(header().longValue(LAST_MODIFIED, unexpected), unexpected);, +			assertMessageContains(e, String.valueOf(unexpected));, +			assertMessageContains(e, String.valueOf(currentTime));, +++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java, +						response.setDateHeader(HEADER_LAST_MODIFIED, lastModifiedTimestamp);, +						response.setDateHeader(HEADER_LAST_MODIFIED, lastModifiedTimestamp);, +++ b/spring-web/src/test/java/org/springframework/web/context/request/ServletWebRequestHttpMethodsTests.java, +		assertEquals("" + epochTime, servletResponse.getHeader("Last-Modified"));, +		assertEquals("" + currentDate.getTime(), servletResponse.getHeader("Last-Modified"));, +		assertEquals("" + currentDate.getTime(), servletResponse.getHeader("Last-Modified"));, +		assertEquals("" + currentEpoch, servletResponse.getHeader("Last-Modified"));, +		assertEquals("" + epochTime, servletResponse.getHeader("Last-Modified"));, +		assertEquals("" + epochTime, servletResponse.getHeader("Last-Modified"));, +		assertEquals("" + epochTime, servletResponse.getHeader("Last-Modified"));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/WebContentGenerator.java, +			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis() + seconds * 1000L);, +			response.setDateHeader(HEADER_EXPIRES, System.currentTimeMillis());, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/DispatcherServletTests.java, +		assertEquals("1427846400000", response.getHeader("Last-Modified"));, +		assertEquals("1427846401000", response.getHeader("Last-Modified"));, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/HeaderAssertionTests.java, +		.andExpect(header().string(LAST_MODIFIED, String.valueOf(currentTime)));, +		.andExpect(header().string(LAST_MODIFIED, equalTo(String.valueOf(currentTime))));, +		.andExpect(header().longValue(LAST_MODIFIED, currentTime));, +		assertIncorrectResponseHeaderValue(header().string(LAST_MODIFIED, String.valueOf(unexpected)), unexpected);, +		assertIncorrectResponseHeaderValue(header().string(LAST_MODIFIED, equalTo(String.valueOf(unexpected))),, +		assertIncorrectResponseHeaderValue(header().longValue(LAST_MODIFIED, unexpected), unexpected);, +			assertMessageContains(e, String.valueOf(unexpected));, +			assertMessageContains(e, String.valueOf(currentTime));, +++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java]