[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolver.java, +	protected String getTargetDestination(String origDestination, String targetDestination,, +			String sessionId, String user) {, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolver.java, +	protected String getTargetDestination(String origDestination, String targetDestination,, +			String sessionId, String user) {, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DestinationUserNameProvider.java, +package org.springframework.messaging.simp.user;, +, +/**, + * An interface to be implemented in addition to {@link java.security.Principal}, + * when {@link java.security.Principal#getName()} is not globally unique enough, + * for use in user destinations. For more on user destination see, + * {@link org.springframework.messaging.simp.user.UserDestinationResolver}., + *, + * @author Rossen Stoyanchev, + * @since 4.0.1, + */, +public interface DestinationUserNameProvider {, +, +, +	/**, +	 * Return the (globally unique) user name to use with user destinations., +	 */, +	String getDestinationUserName();, +, +}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolver.java, +	protected String getTargetDestination(String origDestination, String targetDestination,, +			String sessionId, String user) {, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DestinationUserNameProvider.java, +package org.springframework.messaging.simp.user;, +, +/**, + * An interface to be implemented in addition to {@link java.security.Principal}, + * when {@link java.security.Principal#getName()} is not globally unique enough, + * for use in user destinations. For more on user destination see, + * {@link org.springframework.messaging.simp.user.UserDestinationResolver}., + *, + * @author Rossen Stoyanchev, + * @since 4.0.1, + */, +public interface DestinationUserNameProvider {, +, +, +	/**, +	 * Return the (globally unique) user name to use with user destinations., +	 */, +	String getDestinationUserName();, +, +}, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolverTests.java, +	private TestPrincipal user;, +, +		this.user = new TestPrincipal("joe");, +		this.registry.registerSessionId(this.user.getName(), SESSION_ID);, +		Message<?> message = createMessage(SimpMessageType.SUBSCRIBE, this.user, SESSION_ID, "/user/queue/foo");, +		Message<?> message = createMessage(SimpMessageType.SUBSCRIBE, this.user, SESSION_ID, "/user/queue/foo");, +		Message<?> message = createMessage(SimpMessageType.UNSUBSCRIBE, this.user, SESSION_ID, "/user/queue/foo");, +		Message<?> message = createMessage(SimpMessageType.MESSAGE, this.user, SESSION_ID, "/user/joe/queue/foo");, +		Message<?> message = createMessage(SimpMessageType.MESSAGE, this.user, SESSION_ID, null);, +		message = createMessage(SimpMessageType.MESSAGE, this.user, SESSION_ID, "/queue/foo");, +		message = createMessage(SimpMessageType.SUBSCRIBE, this.user, SESSION_ID, "/queue/foo");, +		message = createMessage(SimpMessageType.CONNECT, this.user, SESSION_ID, "user/joe/queue/foo");, +	private Message<?> createMessage(SimpMessageType messageType, TestPrincipal user, String sessionId, String destination) {, +			headers.setUser(user);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolver.java, +	protected String getTargetDestination(String origDestination, String targetDestination,, +			String sessionId, String user) {, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DestinationUserNameProvider.java, +package org.springframework.messaging.simp.user;, +, +/**, + * An interface to be implemented in addition to {@link java.security.Principal}, + * when {@link java.security.Principal#getName()} is not globally unique enough, + * for use in user destinations. For more on user destination see, + * {@link org.springframework.messaging.simp.user.UserDestinationResolver}., + *, + * @author Rossen Stoyanchev, + * @since 4.0.1, + */, +public interface DestinationUserNameProvider {, +, +, +	/**, +	 * Return the (globally unique) user name to use with user destinations., +	 */, +	String getDestinationUserName();, +, +}, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolverTests.java, +	private TestPrincipal user;, +, +		this.user = new TestPrincipal("joe");, +		this.registry.registerSessionId(this.user.getName(), SESSION_ID);, +		Message<?> message = createMessage(SimpMessageType.SUBSCRIBE, this.user, SESSION_ID, "/user/queue/foo");]