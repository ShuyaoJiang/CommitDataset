[+++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MessageConverter.java, + * Copyright 2002-2015 the original author or authors., +	 * Convert the payload of a {@link Message} from a serialized form to a typed Object, +	 * of the specified target class. The {@link MessageHeaders#CONTENT_TYPE} header, +	 * should indicate the MIME type to convert from., +	 * <p>If the converter does not support the specified media type or cannot perform, +	 * the conversion, it should return {@code null}., +	 * media type for the conversion and it may contain additional headers to be added, +	 * to the message., +	 * <p>If the converter does not support the specified media type or cannot perform, +	 * the conversion, it should return {@code null}., +	 * @param headers optional headers for the message (may be {@code null}), +	 * @return the new message, or {@code null} if the converter does not support the, +	Message<?> toMessage(Object payload, MessageHeaders headers);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MessageConverter.java, + * Copyright 2002-2015 the original author or authors., +	 * Convert the payload of a {@link Message} from a serialized form to a typed Object, +	 * of the specified target class. The {@link MessageHeaders#CONTENT_TYPE} header, +	 * should indicate the MIME type to convert from., +	 * <p>If the converter does not support the specified media type or cannot perform, +	 * the conversion, it should return {@code null}., +	 * media type for the conversion and it may contain additional headers to be added, +	 * to the message., +	 * <p>If the converter does not support the specified media type or cannot perform, +	 * the conversion, it should return {@code null}., +	 * @param headers optional headers for the message (may be {@code null}), +	 * @return the new message, or {@code null} if the converter does not support the, +	Message<?> toMessage(Object payload, MessageHeaders headers);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageSendingOperations.java, + * Copyright 2002-2015 the original author or authors., +	 * @param user the user that should receive the message (must not be {@code null}), +	 * @param destination the destination to send the message to (must not be {@code null}), +	 * @param payload the payload to send (may be {@code null}), +	 * @param headers the message headers (may be {@code null}), +	 * @param user the user that should receive the message (must not be {@code null}), +	 * @param destination the destination to send the message to (must not be {@code null}), +	 * @param payload the payload to send (may be {@code null}), +	 * @param user the user that should receive the message, +	 * @param destination the destination to send the message to, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MessageConverter.java, + * Copyright 2002-2015 the original author or authors., +	 * Convert the payload of a {@link Message} from a serialized form to a typed Object, +	 * of the specified target class. The {@link MessageHeaders#CONTENT_TYPE} header, +	 * should indicate the MIME type to convert from., +	 * <p>If the converter does not support the specified media type or cannot perform, +	 * the conversion, it should return {@code null}., +	 * media type for the conversion and it may contain additional headers to be added, +	 * to the message., +	 * <p>If the converter does not support the specified media type or cannot perform, +	 * the conversion, it should return {@code null}., +	 * @param headers optional headers for the message (may be {@code null}), +	 * @return the new message, or {@code null} if the converter does not support the, +	Message<?> toMessage(Object payload, MessageHeaders headers);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageSendingOperations.java, + * Copyright 2002-2015 the original author or authors., +	 * @param user the user that should receive the message (must not be {@code null}), +	 * @param destination the destination to send the message to (must not be {@code null}), +	 * @param payload the payload to send (may be {@code null}), +	 * @param headers the message headers (may be {@code null}), +	 * @param user the user that should receive the message (must not be {@code null}), +	 * @param destination the destination to send the message to (must not be {@code null}), +	 * @param payload the payload to send (may be {@code null}), +	 * @param user the user that should receive the message, +	 * @param destination the destination to send the message to, +++ b/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java, +	 * Create a TransactionStatus instance for the given arguments., +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MessageConverter.java, + * Copyright 2002-2015 the original author or authors., +	 * Convert the payload of a {@link Message} from a serialized form to a typed Object, +	 * of the specified target class. The {@link MessageHeaders#CONTENT_TYPE} header, +	 * should indicate the MIME type to convert from., +	 * <p>If the converter does not support the specified media type or cannot perform, +	 * the conversion, it should return {@code null}., +	 * media type for the conversion and it may contain additional headers to be added, +	 * to the message., +	 * <p>If the converter does not support the specified media type or cannot perform, +	 * the conversion, it should return {@code null}., +	 * @param headers optional headers for the message (may be {@code null}), +	 * @return the new message, or {@code null} if the converter does not support the, +	Message<?> toMessage(Object payload, MessageHeaders headers);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageSendingOperations.java, + * Copyright 2002-2015 the original author or authors., +	 * @param user the user that should receive the message (must not be {@code null}), +	 * @param destination the destination to send the message to (must not be {@code null}), +	 * @param payload the payload to send (may be {@code null}), +	 * @param headers the message headers (may be {@code null}), +	 * @param user the user that should receive the message (must not be {@code null}), +	 * @param destination the destination to send the message to (must not be {@code null}), +	 * @param payload the payload to send (may be {@code null}), +	 * @param user the user that should receive the message, +	 * @param destination the destination to send the message to, +++ b/spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java, +	 * Create a TransactionStatus instance for the given arguments., +++ b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MessageConverter.java, + * Copyright 2002-2015 the original author or authors., +	 * Convert the payload of a {@link Message} from a serialized form to a typed Object, +	 * of the specified target class. The {@link MessageHeaders#CONTENT_TYPE} header, +	 * should indicate the MIME type to convert from., +	 * <p>If the converter does not support the specified media type or cannot perform]