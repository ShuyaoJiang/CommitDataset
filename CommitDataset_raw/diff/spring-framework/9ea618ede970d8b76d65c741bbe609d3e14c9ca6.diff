[+++ b/src/docs/asciidoc/testing.adoc, +application context that you configured with `@ContextConfiguration` or related, +annotations. You may use setter injection, field injection, or both, depending on which, +annotations you choose and whether you place them on setter methods or fields. If you are, +using JUnit Jupiter you may also optionally use constructor injection (see, +<<testcontext-junit-jupiter-di>>). For consistency with the annotation support introduced, +in Spring 2.5 and 3.0, you can use Spring's `@Autowired` annotation or the `@Inject`, +annotation from JSR 330 for field and setter injection., +TIP: For testing frameworks other than JUnit Jupiter, the TestContext framework does not, +participate in instantiation of the test class. Thus, the use of `@Autowired` or, +`@Inject` for constructors has no effect for test classes., +, +NOTE: Although field injection is discouraged in production code, field injection is, +actually quite natural in test code. The rationale for the difference is that you will, +never instantiate your test class directly. Consequently, there is no need to be able to, +invoke a `public` constructor or setter method on your test class., +`applicationContext.getBean("titleRepository", TitleRepository.class)`., +4. The same DI techniques can be used in conjunction with any supported testing framework.]