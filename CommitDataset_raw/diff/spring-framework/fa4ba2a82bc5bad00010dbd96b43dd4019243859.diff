[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceTransformerSupport.java, +		if (resourcePath.startsWith("/")) {, +		else {, +			// try resolving as relative path, +			return transformerChain.getResolverChain().resolveUrlPath(resourcePath, Arrays.asList(resource));, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceTransformerSupport.java, +		if (resourcePath.startsWith("/")) {, +		else {, +			// try resolving as relative path, +			return transformerChain.getResolverChain().resolveUrlPath(resourcePath, Arrays.asList(resource));, +		}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/CssLinkResourceTransformerTests.java, +import java.util.Collections;, +		VersionResourceResolver resolver = new VersionResourceResolver();, +		resolver.setStrategyMap(Collections.singletonMap("/**", new ContentVersionStrategy()));, +		List<ResourceResolver> resolvers = Arrays.asList(resolver, new PathResourceResolver());, +		List<ResourceTransformer> transformers = Arrays.asList(new CssLinkResourceTransformer());, +, +		Resource css = new ClassPathResource("test/main.css", getClass());, +		TransformedResource actual = (TransformedResource) this.transformerChain.transform(this.request, css);, +		String result = new String(actual.getByteArray(), "UTF-8");, +	@Test, +	public void transformWithNonCssResource() throws Exception {, +		Resource expected = new ClassPathResource("test/images/image.png", getClass());, +		Resource actual = this.transformerChain.transform(this.request, expected);, +		assertSame(expected, actual);, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceTransformerSupport.java, +		if (resourcePath.startsWith("/")) {, +		else {, +			// try resolving as relative path, +			return transformerChain.getResolverChain().resolveUrlPath(resourcePath, Arrays.asList(resource));, +		}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/CssLinkResourceTransformerTests.java, +import java.util.Collections;, +		VersionResourceResolver resolver = new VersionResourceResolver();, +		resolver.setStrategyMap(Collections.singletonMap("/**", new ContentVersionStrategy()));, +		List<ResourceResolver> resolvers = Arrays.asList(resolver, new PathResourceResolver());, +		List<ResourceTransformer> transformers = Arrays.asList(new CssLinkResourceTransformer());, +, +		Resource css = new ClassPathResource("test/main.css", getClass());, +		TransformedResource actual = (TransformedResource) this.transformerChain.transform(this.request, css);, +		String result = new String(actual.getByteArray(), "UTF-8");, +	@Test, +	public void transformWithNonCssResource() throws Exception {, +		Resource expected = new ClassPathResource("test/images/image.png", getClass());, +		Resource actual = this.transformerChain.transform(this.request, expected);, +		assertSame(expected, actual);, +	}, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.java, + * Copyright 2002-2014 the original author or authors., +import java.io.IOException;, + * Unit tests for ResourceHttpRequestHandler., + *, + * @author Rossen Stoyanchev, +	private MockHttpServletRequest request;, +, +	private MockHttpServletResponse response;, +, +, +		List<Resource> paths = new ArrayList<>(2);, +		paths.add(new ClassPathResource("test/", getClass()));, +		paths.add(new ClassPathResource("testalternatepath/", getClass()));, +, +		this.handler = new ResourceHttpRequestHandler();, +		this.handler.setLocations(paths);, +		this.handler.setCacheSeconds(3600);, +		this.handler.setServletContext(new TestServletContext());, +		this.handler.afterPropertiesSet();, +, +		this.request = new MockHttpServletRequest("GET", "");, +		this.response = new MockHttpServletResponse();, +		this.request.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, "/foo.css");, +		this.handler.handleRequest(this.request, this.response);, +, +		assertEquals("text/css", this.response.getContentType());, +		assertEquals(17, this.response.getContentLength());, +		assertTrue(headerAsLong("Expires") >= System.currentTimeMillis() - 1000 + (3600 * 1000));, +		assertEquals("max-age=3600, must-revalidate", this.response.getHeader("Cache-Control"));, +		assertTrue(this.response.containsHeader("Last-Modified"));, +		assertEquals(headerAsLong("Last-Modified"), resourceLastModified("test/foo.css"));, +		assertEquals("h1 { color:red; }", this.response.getContentAsString());, +		this.request.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, "/foo.html");, +		this.handler.handleRequest(this.request, this.response);, +, +		assertEquals("text/html", this.response.getContentType());, +		assertTrue(headerAsLong("Expires") >= System.currentTimeMillis() - 1000 + (3600 * 1000));, +		assertEquals("max-age=3600, must-revalidate", this.response.getHeader("Cache-Control"));, +		assertTrue(this.response.containsHeader("Last-Modified"));, +		assertEquals(headerAsLong("Last-Modified"), resourceLastModified("test/foo.html"));, +		this.request.setAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, "/baz.css");, +		this.handler.handleRequest(this.request, this.response);, +, +		assertEquals("text/css", this.response.getContentType());, +		assertEquals(17, this.response.getContentLength());, +		assertTrue(headerAsLong("Expires") >= System.currentTimeMillis() - 1000 + (3600 * 1000));, +		assertEquals("max-age=3600, must-revalidate", this.response.getHeader("Cache-Control"));]