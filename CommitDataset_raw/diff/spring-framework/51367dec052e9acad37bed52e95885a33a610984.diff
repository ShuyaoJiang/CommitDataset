[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java, +			byte[] payload = (byte[]) message.getPayload();, +			byte[] bytes = this.stompEncoder.encode(stompAccessor.getMessageHeaders(), payload);, +, +			boolean useBinary = (payload.length > 0 && !(session instanceof SockJsSession) &&, +					MimeTypeUtils.APPLICATION_OCTET_STREAM.isCompatibleWith(stompAccessor.getContentType()));, +, +			if (useBinary) {, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java, +			byte[] payload = (byte[]) message.getPayload();, +			byte[] bytes = this.stompEncoder.encode(stompAccessor.getMessageHeaders(), payload);, +, +			boolean useBinary = (payload.length > 0 && !(session instanceof SockJsSession) &&, +					MimeTypeUtils.APPLICATION_OCTET_STREAM.isCompatibleWith(stompAccessor.getContentType()));, +, +			if (useBinary) {, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/messaging/StompSubProtocolHandlerTests.java, +import static org.hamcrest.Matchers.is;, +import static org.junit.Assert.assertArrayEquals;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.assertTrue;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.reset;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +import static org.mockito.Mockito.verifyNoMoreInteractions;, +import static org.mockito.Mockito.verifyZeroInteractions;, +, +import org.springframework.util.MimeTypeUtils;, +import org.springframework.web.socket.BinaryMessage;, +	// SPR-12475, +, +	@Test, +	public void handleMessageToClientBinaryWebSocketMessage() {, +, +		StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.MESSAGE);, +		headers.setMessageId("mess0");, +		headers.setSubscriptionId("sub0");, +		headers.setContentType(MimeTypeUtils.APPLICATION_OCTET_STREAM);, +		headers.setDestination("/queue/foo");, +, +		// Non-empty payload, +, +		byte[] payload = new byte[1];, +		Message<byte[]> message = MessageBuilder.createMessage(payload, headers.getMessageHeaders());, +		this.protocolHandler.handleMessageToClient(this.session, message);, +, +		assertEquals(1, this.session.getSentMessages().size());, +		WebSocketMessage<?> webSocketMessage = this.session.getSentMessages().get(0);, +		assertTrue(webSocketMessage instanceof BinaryMessage);, +, +		// Empty payload, +, +		payload = EMPTY_PAYLOAD;, +		message = MessageBuilder.createMessage(payload, headers.getMessageHeaders());, +		this.protocolHandler.handleMessageToClient(this.session, message);, +, +		assertEquals(2, this.session.getSentMessages().size());, +		webSocketMessage = this.session.getSentMessages().get(1);, +		assertTrue(webSocketMessage instanceof TextMessage);, +	}, +]