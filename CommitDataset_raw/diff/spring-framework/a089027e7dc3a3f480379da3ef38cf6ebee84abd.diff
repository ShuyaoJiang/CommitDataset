[+++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, +import java.util.ArrayList;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +		MultiValueMap<Object, Module> modulesToRegister = new LinkedMultiValueMap<>();, +			ObjectMapper.findModules(this.moduleClassLoader).forEach(module -> registerModule(module, modulesToRegister));, +			this.modules.forEach(module -> registerModule(module, modulesToRegister));, +				registerModule(BeanUtils.instantiateClass(moduleClass), modulesToRegister);, +		List<Module> modules = new ArrayList<>();, +		for (List<Module> nestedModules : modulesToRegister.values()) {, +			modules.addAll(nestedModules);, +		}, +		objectMapper.registerModules(modules);, +	private void registerModule(Module module, MultiValueMap<Object, Module> modulesToRegister) {, +		if (module.getTypeId() == null) {, +			modulesToRegister.add(SimpleModule.class.getName(), module);, +		}, +		else {, +			modulesToRegister.set(module.getTypeId(), module);, +		}, +	}, +, +	private void registerWellKnownModulesIfAvailable(MultiValueMap<Object, Module> modulesToRegister) {, +			modulesToRegister.set(jdk8Module.getTypeId(), jdk8Module);, +			modulesToRegister.set(javaTimeModule.getTypeId(), javaTimeModule);, +				modulesToRegister.set(jodaModule.getTypeId(), jodaModule);, +				modulesToRegister.set(kotlinModule.getTypeId(), kotlinModule);, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, +import java.util.ArrayList;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +		MultiValueMap<Object, Module> modulesToRegister = new LinkedMultiValueMap<>();, +			ObjectMapper.findModules(this.moduleClassLoader).forEach(module -> registerModule(module, modulesToRegister));, +			this.modules.forEach(module -> registerModule(module, modulesToRegister));, +				registerModule(BeanUtils.instantiateClass(moduleClass), modulesToRegister);, +		List<Module> modules = new ArrayList<>();, +		for (List<Module> nestedModules : modulesToRegister.values()) {, +			modules.addAll(nestedModules);, +		}, +		objectMapper.registerModules(modules);, +	private void registerModule(Module module, MultiValueMap<Object, Module> modulesToRegister) {, +		if (module.getTypeId() == null) {, +			modulesToRegister.add(SimpleModule.class.getName(), module);, +		}, +		else {, +			modulesToRegister.set(module.getTypeId(), module);, +		}, +	}, +, +	private void registerWellKnownModulesIfAvailable(MultiValueMap<Object, Module> modulesToRegister) {, +			modulesToRegister.set(jdk8Module.getTypeId(), jdk8Module);, +			modulesToRegister.set(javaTimeModule.getTypeId(), javaTimeModule);, +				modulesToRegister.set(jodaModule.getTypeId(), jodaModule);, +				modulesToRegister.set(kotlinModule.getTypeId(), kotlinModule);, +++ b/spring-web/src/test/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilderTests.java, +import java.util.stream.StreamSupport;, +	@Test  // gh-22740, +	public void registerMultipleModulesWithNullTypeId() {, +		Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder();, +		SimpleModule fooModule = new SimpleModule();, +		fooModule.addSerializer(new FooSerializer());, +		SimpleModule barModule = new SimpleModule();, +		barModule.addSerializer(new BarSerializer());, +		builder.modulesToInstall(fooModule, barModule);, +		ObjectMapper objectMapper = builder.build();, +		assertEquals(1, StreamSupport, +				.stream(getSerializerFactoryConfig(objectMapper).serializers().spliterator(), false), +				.filter(s -> s.findSerializer(null, SimpleType.construct(Foo.class), null) != null), +				.count());, +		assertEquals(1, StreamSupport, +				.stream(getSerializerFactoryConfig(objectMapper).serializers().spliterator(), false), +				.filter(s -> s.findSerializer(null, SimpleType.construct(Bar.class), null) != null), +				.count());, +	}, +	static class Foo {}, +, +	static class Bar {}, +, +	static class FooSerializer extends JsonSerializer<Foo> {, +		@Override, +		public void serialize(Foo value, JsonGenerator gen, SerializerProvider serializers) throws IOException {, +		}, +, +		@Override, +		public Class<Foo> handledType() {, +			return Foo.class;, +		}, +	}, +, +	static class BarSerializer extends JsonSerializer<Bar> {, +		@Override, +		public void serialize(Bar value, JsonGenerator gen, SerializerProvider serializers) throws IOException {, +		}, +		@Override, +		public Class<Bar> handledType() {, +			return Bar.class;, +		}, +	}, +]