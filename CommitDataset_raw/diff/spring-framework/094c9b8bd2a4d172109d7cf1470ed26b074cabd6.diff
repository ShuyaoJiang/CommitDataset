[+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateTemplate.java, +import org.springframework.transaction.support.ResourceHolderSupport;, +		ResourceHolderSupport sessionHolder =, +				(ResourceHolderSupport) TransactionSynchronizationManager.getResource(obtainSessionFactory());, +		ResourceHolderSupport sessionHolder =, +				(ResourceHolderSupport) TransactionSynchronizationManager.getResource(obtainSessionFactory());, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateTemplate.java, +import org.springframework.transaction.support.ResourceHolderSupport;, +		ResourceHolderSupport sessionHolder =, +				(ResourceHolderSupport) TransactionSynchronizationManager.getResource(obtainSessionFactory());, +		ResourceHolderSupport sessionHolder =, +				(ResourceHolderSupport) TransactionSynchronizationManager.getResource(obtainSessionFactory());, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/SessionHolder.java, + * Copyright 2002-2018 the original author or authors., +import javax.persistence.EntityManager;, +, +import org.springframework.orm.jpa.EntityManagerHolder;, + * Resource holder wrapping a Hibernate {@link Session} (plus an optional {@link Transaction})., + * {@link HibernateTransactionManager} binds instances of this class to the thread,, + * for a given {@link org.hibernate.SessionFactory}. Extends {@link EntityManagerHolder}, + * as of 5.1, automatically exposing an {@code EntityManager} handle on Hibernate 5.2+., +public class SessionHolder extends EntityManagerHolder {, +		super(EntityManager.class.isInstance(session) ? session : null);, +		setTransactionActive(transaction != null);, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateTemplate.java, +import org.springframework.transaction.support.ResourceHolderSupport;, +		ResourceHolderSupport sessionHolder =, +				(ResourceHolderSupport) TransactionSynchronizationManager.getResource(obtainSessionFactory());, +		ResourceHolderSupport sessionHolder =, +				(ResourceHolderSupport) TransactionSynchronizationManager.getResource(obtainSessionFactory());, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/SessionHolder.java, + * Copyright 2002-2018 the original author or authors., +import javax.persistence.EntityManager;, +, +import org.springframework.orm.jpa.EntityManagerHolder;, + * Resource holder wrapping a Hibernate {@link Session} (plus an optional {@link Transaction})., + * {@link HibernateTransactionManager} binds instances of this class to the thread,, + * for a given {@link org.hibernate.SessionFactory}. Extends {@link EntityManagerHolder}, + * as of 5.1, automatically exposing an {@code EntityManager} handle on Hibernate 5.2+., +public class SessionHolder extends EntityManagerHolder {, +		super(EntityManager.class.isInstance(session) ? session : null);, +		setTransactionActive(transaction != null);, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/SpringSessionContext.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.orm.jpa.EntityManagerHolder;, + * Implementation of Hibernate 3.1's {@link CurrentSessionContext} interface, + * that delegates to Spring's {@link SessionFactoryUtils} for providing a, + * Spring-managed current {@link Session}., +			// HibernateTransactionManager, +		else if (value instanceof EntityManagerHolder) {, +			// JpaTransactionManager, +			return ((EntityManagerHolder) value).getEntityManager().unwrap(Session.class);, +		}, +						TransactionSynchronizationManager.registerSynchronization(, +								new SpringFlushSynchronization(session));, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateTemplate.java, +import org.springframework.transaction.support.ResourceHolderSupport;, +		ResourceHolderSupport sessionHolder =, +				(ResourceHolderSupport) TransactionSynchronizationManager.getResource(obtainSessionFactory());, +		ResourceHolderSupport sessionHolder =, +				(ResourceHolderSupport) TransactionSynchronizationManager.getResource(obtainSessionFactory());, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/SessionHolder.java, + * Copyright 2002-2018 the original author or authors., +import javax.persistence.EntityManager;, +, +import org.springframework.orm.jpa.EntityManagerHolder;, + * Resource holder wrapping a Hibernate {@link Session} (plus an optional {@link Transaction})., + * {@link HibernateTransactionManager} binds instances of this class to the thread,, + * for a given {@link org.hibernate.SessionFactory}. Extends {@link EntityManagerHolder}, + * as of 5.1, automatically exposing an {@code EntityManager} handle on Hibernate 5.2+., +public class SessionHolder extends EntityManagerHolder {, +		super(EntityManager.class.isInstance(session) ? session : null);, +		setTransactionActive(transaction != null);, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/SpringSessionContext.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.orm.jpa.EntityManagerHolder;, + * Implementation of Hibernate 3.1's {@link CurrentSessionContext} interface, + * that delegates to Spring's {@link SessionFactoryUtils} for providing a, + * Spring-managed current {@link Session}., +			// HibernateTransactionManager, +		else if (value instanceof EntityManagerHolder) {, +			// JpaTransactionManager, +			return ((EntityManagerHolder) value).getEntityManager().unwrap(Session.class);, +		}, +						TransactionSynchronizationManager.registerSynchronization(, +								new SpringFlushSynchronization(session));, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/EntityManagerHolder.java, + * Copyright 2002-2018 the original author or authors., + * Resource holder wrapping a JPA {@link EntityManager}., + * {@link JpaTransactionManager} binds instances of this class to the thread,, + * for a given {@link javax.persistence.EntityManagerFactory}., + *, + * <p>Also serves as a base class for {@link org.springframework.orm.hibernate5.SessionHolder},, + * as of 5.1., +	@Nullable, +	public EntityManagerHolder(@Nullable EntityManager entityManager) {, +		Assert.state(this.entityManager != null, "No EntityManager available");, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateTemplate.java, +import org.springframework.transaction.support.ResourceHolderSupport;, +		ResourceHolderSupport sessionHolder =]