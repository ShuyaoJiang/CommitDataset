[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/WebSocketSession.java, +	 *, +	 * <p><strong>Note:</strong> The underlying standard WebSocket session (JSR-356) does, +	 * not allow concurrent sending. Therefore sending must be synchronized. To ensure, +	 * that, one option is to wrap the {@code WebSocketSession} with the, +	 * {@link org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator, +	 * ConcurrentWebSocketSessionDecorator}., +	 * @see org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/WebSocketSession.java, +	 *, +	 * <p><strong>Note:</strong> The underlying standard WebSocket session (JSR-356) does, +	 * not allow concurrent sending. Therefore sending must be synchronized. To ensure, +	 * that, one option is to wrap the {@code WebSocketSession} with the, +	 * {@link org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator, +	 * ConcurrentWebSocketSessionDecorator}., +	 * @see org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator, +++ b/src/docs/asciidoc/web/websocket.adoc, +The preceding example is for use in Spring MVC applications and should be included in the, +When using the `WebSocketHandler` API directly vs indirectly, e.g. through the, +<<websocket-stomp>> messaging, the application must synchronize the sending of messages, +since the underlying standard WebSocket session (JSR-356) does not allow concurrent, +sending. One option is to wrap the `WebSocketSession` with, +{api-spring-framework}/web/socket/handler/ConcurrentWebSocketSessionDecorator.html[`ConcurrentWebSocketSessionDecorator`]., +]