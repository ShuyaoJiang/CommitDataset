[+++ b/spring-web/src/main/java/org/springframework/web/multipart/support/RequestPartServletServerHttpRequest.java, + * Copyright 2002-2015 the original author or authors., +import java.nio.charset.Charset;, +import org.springframework.http.MediaType;, +				return new ByteArrayInputStream(paramValue.getBytes(determineEncoding()));, +	private String determineEncoding() {, +		MediaType contentType = getHeaders().getContentType();, +		if (contentType != null) {, +			Charset charset = contentType.getCharSet();, +			if (charset != null) {, +				return charset.name();, +			}, +		}, +		String encoding = this.multipartRequest.getCharacterEncoding();, +		return (encoding != null ? encoding : FORM_CHARSET);, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/multipart/support/RequestPartServletServerHttpRequest.java, + * Copyright 2002-2015 the original author or authors., +import java.nio.charset.Charset;, +import org.springframework.http.MediaType;, +				return new ByteArrayInputStream(paramValue.getBytes(determineEncoding()));, +	private String determineEncoding() {, +		MediaType contentType = getHeaders().getContentType();, +		if (contentType != null) {, +			Charset charset = contentType.getCharSet();, +			if (charset != null) {, +				return charset.name();, +			}, +		}, +		String encoding = this.multipartRequest.getCharacterEncoding();, +		return (encoding != null ? encoding : FORM_CHARSET);, +	}, +, +++ b/spring-web/src/test/java/org/springframework/web/multipart/support/RequestPartServletServerHttpRequestTests.java, + * Copyright 2002-2015 the original author or authors., +import java.nio.charset.Charset;, +import org.springframework.http.server.ServerHttpRequest;, +import org.springframework.web.multipart.MultipartFile;, +import static org.junit.Assert.assertArrayEquals;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +	private final MockMultipartHttpServletRequest mockRequest = new MockMultipartHttpServletRequest();, +		this.mockRequest.addFile(new MockMultipartFile("part", "", "", "content".getBytes("UTF-8")));, +		ServerHttpRequest request = new RequestPartServletServerHttpRequest(this.mockRequest, "part");, +		this.mockRequest.setMethod("POST");, +, +		assertEquals(HttpMethod.POST, request.getMethod());, +		this.mockRequest.addFile(new MockMultipartFile("part", "", "application/json", "content".getBytes("UTF-8")));, +		ServerHttpRequest request = new RequestPartServletServerHttpRequest(this.mockRequest, "part");, +, +		this.mockRequest.setServerName(uri.getHost());, +		this.mockRequest.setServerPort(uri.getPort());, +		this.mockRequest.setRequestURI(uri.getPath());, +		this.mockRequest.setQueryString(uri.getQuery());, +		assertEquals(uri, request.getURI());, +		MultipartFile part = new MockMultipartFile("part", "", "application/json", "content".getBytes("UTF-8"));, +		this.mockRequest.addFile(part);, +		ServerHttpRequest request = new RequestPartServletServerHttpRequest(this.mockRequest, "part");, +		HttpHeaders headers = request.getHeaders();, +		assertNotNull(headers);, +		assertEquals(MediaType.APPLICATION_JSON, headers.getContentType());, +		byte[] bytes = "content".getBytes("UTF-8");, +		MultipartFile part = new MockMultipartFile("part", "", "application/json", bytes);, +		this.mockRequest.addFile(part);, +		ServerHttpRequest request = new RequestPartServletServerHttpRequest(this.mockRequest, "part");, +, +		assertArrayEquals(bytes, result);, +	}, +, +	// SPR-13096, +, +	@Test, +	public void getBodyViaRequestParameter() throws Exception {, +		MockMultipartHttpServletRequest mockRequest = new MockMultipartHttpServletRequest() {, +, +			@Override, +			public HttpHeaders getMultipartHeaders(String paramOrFileName) {, +				HttpHeaders headers = new HttpHeaders();, +				headers.setContentType(new MediaType("application", "octet-stream", Charset.forName("iso-8859-1")));, +				return headers;, +			}, +		};, +		byte[] bytes = {(byte) 0xC4};, +		mockRequest.setParameter("part", new String(bytes, Charset.forName("iso-8859-1")));, +		ServerHttpRequest request = new RequestPartServletServerHttpRequest(mockRequest, "part");, +, +		byte[] result = FileCopyUtils.copyToByteArray(request.getBody());, +		assertArrayEquals(bytes, result);, +	}, +, +	@Test, +	public void getBodyViaRequestParameterWithRequestEncoding() throws Exception {, +		MockMultipartHttpServletRequest mockRequest = new MockMultipartHttpServletRequest() {, +, +			@Override, +			public HttpHeaders getMultipartHeaders(String paramOrFileName) {, +				HttpHeaders headers = new HttpHeaders();, +				headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);, +				return headers;]