[+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java, +import java.util.TimeZone;, +	private final TimeZone timeZone;, +, +	 * @param timeZone the TimeZone to use for generated trigger times, +	public CronSequenceGenerator(String expression, TimeZone timeZone) {, +		this.timeZone = timeZone;, +		calendar.setTimeZone(timeZone);, +		int updateSecond = findNext(this.seconds, second, calendar, Calendar.SECOND, Calendar.MINUTE, emptyList);, +		int updateMinute = findNext(this.minutes, minute, calendar, Calendar.MINUTE, Calendar.HOUR_OF_DAY, resets);, +		int updateHour = findNext(this.hours, hour, calendar, Calendar.HOUR_OF_DAY, Calendar.DAY_OF_WEEK, resets);, +		int updateMonth = findNext(this.months, month, calendar, Calendar.MONTH, Calendar.YEAR, resets);, +	private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders) {, +			calendar.add(nextField, 1);, +			calendar.set(field, 0);, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java, +import java.util.TimeZone;, +	private final TimeZone timeZone;, +, +	 * @param timeZone the TimeZone to use for generated trigger times, +	public CronSequenceGenerator(String expression, TimeZone timeZone) {, +		this.timeZone = timeZone;, +		calendar.setTimeZone(timeZone);, +		int updateSecond = findNext(this.seconds, second, calendar, Calendar.SECOND, Calendar.MINUTE, emptyList);, +		int updateMinute = findNext(this.minutes, minute, calendar, Calendar.MINUTE, Calendar.HOUR_OF_DAY, resets);, +		int updateHour = findNext(this.hours, hour, calendar, Calendar.HOUR_OF_DAY, Calendar.DAY_OF_WEEK, resets);, +		int updateMonth = findNext(this.months, month, calendar, Calendar.MONTH, Calendar.YEAR, resets);, +	private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders) {, +			calendar.add(nextField, 1);, +			calendar.set(field, 0);, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronTrigger.java, +import java.util.TimeZone;, +	 * @param timeZone a time zone in which the trigger times will be generated, +	public CronTrigger(String cronExpression, TimeZone timeZone) {, +		this.sequenceGenerator = new CronSequenceGenerator(cronExpression, timeZone);, +	/**, +	 * Build a {@link CronTrigger} from the pattern provided in the default time zone. , +	 * @param cronExpression a space-separated list of time fields,, +	 * following cron expression conventions, +	 */, +	public CronTrigger(String cronExpression) {, +		this(cronExpression, TimeZone.getDefault());, +	}, +		return (this == obj || (obj instanceof CronTrigger && this.sequenceGenerator, +				.equals(((CronTrigger) obj).sequenceGenerator)));, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java, +import java.util.TimeZone;, +	private final TimeZone timeZone;, +, +	 * @param timeZone the TimeZone to use for generated trigger times, +	public CronSequenceGenerator(String expression, TimeZone timeZone) {, +		this.timeZone = timeZone;, +		calendar.setTimeZone(timeZone);, +		int updateSecond = findNext(this.seconds, second, calendar, Calendar.SECOND, Calendar.MINUTE, emptyList);, +		int updateMinute = findNext(this.minutes, minute, calendar, Calendar.MINUTE, Calendar.HOUR_OF_DAY, resets);, +		int updateHour = findNext(this.hours, hour, calendar, Calendar.HOUR_OF_DAY, Calendar.DAY_OF_WEEK, resets);, +		int updateMonth = findNext(this.months, month, calendar, Calendar.MONTH, Calendar.YEAR, resets);, +	private int findNext(BitSet bits, int value, Calendar calendar, int field, int nextField, List<Integer> lowerOrders) {, +			calendar.add(nextField, 1);, +			calendar.set(field, 0);, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronTrigger.java, +import java.util.TimeZone;, +	 * @param timeZone a time zone in which the trigger times will be generated, +	public CronTrigger(String cronExpression, TimeZone timeZone) {, +		this.sequenceGenerator = new CronSequenceGenerator(cronExpression, timeZone);, +	/**, +	 * Build a {@link CronTrigger} from the pattern provided in the default time zone. , +	 * @param cronExpression a space-separated list of time fields,, +	 * following cron expression conventions, +	 */, +	public CronTrigger(String cronExpression) {, +		this(cronExpression, TimeZone.getDefault());, +	}, +		return (this == obj || (obj instanceof CronTrigger && this.sequenceGenerator, +				.equals(((CronTrigger) obj).sequenceGenerator)));, +++ b/org.springframework.context/src/test/java/org/springframework/scheduling/support/CronTriggerTests.java, +import java.util.ArrayList;, +import java.util.List;, +import java.util.TimeZone;, +import org.junit.runner.RunWith;, +import org.junit.runners.Parameterized;, +import org.junit.runners.Parameterized.Parameters;, +@RunWith(Parameterized.class), +	private final Date date;, +	private final TimeZone timeZone;, +, +	public CronTriggerTests(Date date, TimeZone timeZone) {, +		this.timeZone = timeZone;, +		this.date = date;, +	}, +	, +	@Parameters, +	public static List<Object[]> getParameters() {, +		List<Object[]> list = new ArrayList<Object[]>();, +		list.add(new Object[] {new Date(), TimeZone.getDefault()});, +		list.add(new Object[] {new Date(), TimeZone.getTimeZone("CET")});, +		return list;, +	}, +		calendar.setTimeZone(timeZone);, +		CronTrigger trigger = new CronTrigger("* * * * * *", timeZone);]