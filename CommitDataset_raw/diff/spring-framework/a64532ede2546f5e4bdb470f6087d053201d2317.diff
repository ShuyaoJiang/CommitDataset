[+++ b/spring-context-support/src/main/java/org/springframework/mail/javamail/JavaMailSenderImpl.java, + * Copyright 2002-2015 the original author or authors., +	/**, +	 * Validate that this instance can connect to the server that it is configured, +	 * for. Throws a {@link MessagingException} if the connection attempt failed., +	 */, +	public void testConnection() throws MessagingException {, +		Transport transport = null;, +		try {, +			transport = connectTransport();, +		}, +		finally {, +			if (transport != null) {, +				transport.close();, +			}, +		}, +	}, +++ b/spring-context-support/src/main/java/org/springframework/mail/javamail/JavaMailSenderImpl.java, + * Copyright 2002-2015 the original author or authors., +	/**, +	 * Validate that this instance can connect to the server that it is configured, +	 * for. Throws a {@link MessagingException} if the connection attempt failed., +	 */, +	public void testConnection() throws MessagingException {, +		Transport transport = null;, +		try {, +			transport = connectTransport();, +		}, +		finally {, +			if (transport != null) {, +				transport.close();, +			}, +		}, +	}, +++ b/spring-context-support/src/test/java/org/springframework/mail/javamail/JavaMailSenderTests.java, + * Copyright 2002-2015 the original author or authors., +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.rules.ExpectedException;, +import static org.junit.Assert.*;, +, + * @author Stephane Nicoll, +public class JavaMailSenderTests {, +	@Rule, +	public final ExpectedException thrown = ExpectedException.none();, +, +	@Test, +	public void javaMailSenderWithSimpleMessage() throws MessagingException, IOException {, +	@Test, +	public void javaMailSenderWithMimeMessages() throws MessagingException {, +	@Test, +	public void javaMailSenderWithMimeMessagePreparator() {, +	@Test, +	public void javaMailSenderWithMimeMessagePreparators() {, +	@Test, +	public void javaMailSenderWithMimeMessageHelper() throws MessagingException {, +	@Test, +	public void javaMailSenderWithMimeMessageHelperAndSpecificEncoding() throws MessagingException {, +	@Test, +	public void javaMailSenderWithMimeMessageHelperAndDefaultEncoding() throws MessagingException {, +	@Test, +	public void javaMailSenderWithParseExceptionOnSimpleMessage() {, +	@Test, +	public void javaMailSenderWithParseExceptionOnMimeMessagePreparator() {, +	@Test, +	public void javaMailSenderWithCustomSession() throws MessagingException {, +	@Test, +	public void javaMailProperties() throws MessagingException {, +	@Test, +	public void failedMailServerConnect() throws Exception {, +	@Test, +	public void failedMailServerClose() throws Exception {, +	@Test, +	public void failedSimpleMessage() throws Exception {, +	@Test, +	public void fFailedMimeMessage() throws Exception {, +	@Test, +	public void testConnection() throws Exception {, +		MockJavaMailSender sender = new MockJavaMailSender();, +		sender.setHost("host");, +		sender.testConnection();, +	}, +, +	@Test, +	public void testConnectionWithFailure() throws Exception {, +		MockJavaMailSender sender = new MockJavaMailSender();, +		sender.setHost(null);, +, +		thrown.expect(MessagingException.class);, +		sender.testConnection();, +	}, +]