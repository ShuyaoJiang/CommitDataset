[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +				ReflectionUtils.makeAccessible(method);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +				ReflectionUtils.makeAccessible(method);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedAnnotationInvocationHandler.java, +import java.util.Iterator;, +import java.util.List;, +import org.springframework.util.StringUtils;, + * @see Annotation, +		String methodName = method.getName();, +		int parameterCount = method.getParameterCount();, +, +		if ("toString".equals(methodName) && (parameterCount == 0)) {, +			return toString(proxy);, +		}, +, +		String aliasedAttributeName = aliasMap.get(methodName);, +						+ "but attribute [%s] does not exist.", this.annotationType.getName(), methodName,, +			Object defaultValue = AnnotationUtils.getDefaultValue(this.annotation, methodName);, +					this.annotationType.getName(), elementName, methodName, aliasedAttributeName,, +	private String toString(Object proxy) {, +		StringBuilder sb = new StringBuilder("@").append(annotationType.getName()).append("(");, +, +		List<Method> attributeMethods = AnnotationUtils.getAttributeMethods(this.annotationType);, +		Iterator<Method> iterator = attributeMethods.iterator();, +		while (iterator.hasNext()) {, +			Method attributeMethod = iterator.next();, +			sb.append(attributeMethod.getName());, +			sb.append('=');, +			sb.append(valueToString(ReflectionUtils.invokeMethod(attributeMethod, proxy)));, +			sb.append(iterator.hasNext() ? ", " : "");, +		}, +, +		return sb.append(")").toString();, +	}, +, +	private String valueToString(Object value) {, +		if (value instanceof Object[]) {, +			return "[" + StringUtils.arrayToDelimitedString((Object[]) value, ", ") + "]";, +		}, +, +		// else, +		return String.valueOf(value);, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +				ReflectionUtils.makeAccessible(method);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedAnnotationInvocationHandler.java, +import java.util.Iterator;, +import java.util.List;, +import org.springframework.util.StringUtils;, + * @see Annotation, +		String methodName = method.getName();, +		int parameterCount = method.getParameterCount();, +, +		if ("toString".equals(methodName) && (parameterCount == 0)) {, +			return toString(proxy);, +		}, +, +		String aliasedAttributeName = aliasMap.get(methodName);, +						+ "but attribute [%s] does not exist.", this.annotationType.getName(), methodName,, +			Object defaultValue = AnnotationUtils.getDefaultValue(this.annotation, methodName);, +					this.annotationType.getName(), elementName, methodName, aliasedAttributeName,, +	private String toString(Object proxy) {, +		StringBuilder sb = new StringBuilder("@").append(annotationType.getName()).append("(");, +, +		List<Method> attributeMethods = AnnotationUtils.getAttributeMethods(this.annotationType);, +		Iterator<Method> iterator = attributeMethods.iterator();, +		while (iterator.hasNext()) {, +			Method attributeMethod = iterator.next();, +			sb.append(attributeMethod.getName());, +			sb.append('=');, +			sb.append(valueToString(ReflectionUtils.invokeMethod(attributeMethod, proxy)));, +			sb.append(iterator.hasNext() ? ", " : "");, +		}, +, +		return sb.append(")").toString();, +	}, +, +	private String valueToString(Object value) {, +		if (value instanceof Object[]) {, +			return "[" + StringUtils.arrayToDelimitedString((Object[]) value, ", ") + "]";, +		}, +, +		// else, +		return String.valueOf(value);, +	}, +, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java, +		method = WebController.class.getMethod("handleMappedWithDifferentPathAndValueAttributes");, +		WebMapping synthesizedWebMapping1 = synthesizeAnnotation(webMapping);, +		assertNotNull(synthesizedWebMapping1);, +		assertNotSame(webMapping, synthesizedWebMapping1);, +		assertThat(synthesizedWebMapping1, instanceOf(SynthesizedAnnotation.class));, +, +		assertEquals("name attribute: ", "foo", synthesizedWebMapping1.name());, +		assertEquals("aliased path attribute: ", "/test", synthesizedWebMapping1.path());, +		assertEquals("actual value attribute: ", "/test", synthesizedWebMapping1.value());, +, +		WebMapping synthesizedWebMapping2 = synthesizeAnnotation(webMapping);]