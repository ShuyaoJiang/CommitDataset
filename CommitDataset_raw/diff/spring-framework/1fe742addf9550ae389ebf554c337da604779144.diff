[+++ /dev/null, +++ /dev/null, +++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsMessagingTemplate.java, +import org.springframework.jms.support.JmsMessagingExceptionTranslator;, +import org.springframework.messaging.support.MessagingExceptionTranslator;, +	public Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException {, +, +			javax.jms.Message jmsMessage = this.jmsTemplate.sendAndReceive(, +					destination, createMessageCreator(requestMessage));, +			javax.jms.Message jmsMessage = this.jmsTemplate.sendAndReceive(, +					destinationName, createMessageCreator(requestMessage));, +				throw new MessageConversionException("Could not convert '" + this.message + "'", ex);, +				throw new MessageConversionException("Could not convert '" + this.message + "'", ex);, +++ /dev/null, +++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsMessagingTemplate.java, +import org.springframework.jms.support.JmsMessagingExceptionTranslator;, +import org.springframework.messaging.support.MessagingExceptionTranslator;, +	public Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException {, +, +			javax.jms.Message jmsMessage = this.jmsTemplate.sendAndReceive(, +					destination, createMessageCreator(requestMessage));, +			javax.jms.Message jmsMessage = this.jmsTemplate.sendAndReceive(, +					destinationName, createMessageCreator(requestMessage));, +				throw new MessageConversionException("Could not convert '" + this.message + "'", ex);, +				throw new MessageConversionException("Could not convert '" + this.message + "'", ex);, +++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsOperations.java, +	 * @since 4.1, +	 * @since 4.1, +	 * @since 4.1, +++ /dev/null, +++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsMessagingTemplate.java, +import org.springframework.jms.support.JmsMessagingExceptionTranslator;, +import org.springframework.messaging.support.MessagingExceptionTranslator;, +	public Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException {, +, +			javax.jms.Message jmsMessage = this.jmsTemplate.sendAndReceive(, +					destination, createMessageCreator(requestMessage));, +			javax.jms.Message jmsMessage = this.jmsTemplate.sendAndReceive(, +					destinationName, createMessageCreator(requestMessage));, +				throw new MessageConversionException("Could not convert '" + this.message + "'", ex);, +				throw new MessageConversionException("Could not convert '" + this.message + "'", ex);, +++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsOperations.java, +	 * @since 4.1, +	 * @since 4.1, +	 * @since 4.1, +++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsTemplate.java, +, +	 * creates a non-transactional {@link Session}. The given {@link SessionCallback}, +++ /dev/null, +++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsMessagingTemplate.java, +import org.springframework.jms.support.JmsMessagingExceptionTranslator;, +import org.springframework.messaging.support.MessagingExceptionTranslator;, +	public Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException {, +, +			javax.jms.Message jmsMessage = this.jmsTemplate.sendAndReceive(, +					destination, createMessageCreator(requestMessage));, +			javax.jms.Message jmsMessage = this.jmsTemplate.sendAndReceive(, +					destinationName, createMessageCreator(requestMessage));, +				throw new MessageConversionException("Could not convert '" + this.message + "'", ex);, +				throw new MessageConversionException("Could not convert '" + this.message + "'", ex);, +++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsOperations.java, +	 * @since 4.1, +	 * @since 4.1, +	 * @since 4.1, +++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsTemplate.java, +, +	 * creates a non-transactional {@link Session}. The given {@link SessionCallback}, +++ b/spring-jms/src/main/java/org/springframework/jms/support/JmsMessagingExceptionTranslator.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.jms.support;, +, +import org.springframework.jms.InvalidDestinationException;, +import org.springframework.jms.JmsException;, +import org.springframework.jms.support.converter.MessageConversionException;, +import org.springframework.jms.support.destination.DestinationResolutionException;, +import org.springframework.messaging.MessagingException;, +import org.springframework.messaging.support.MessagingExceptionTranslator;, +, +/**, + * {@link MessagingExceptionTranslator} capable of translating {@link JmsException}, + * instances to Spring's {@link MessagingException} hierarchy., + *, + * @author Stephane Nicoll, + * @since 4.1, + */]