[+++ b/spring-core/src/test/java/org/springframework/core/codec/ByteArrayDecoderTests.java, +import static org.junit.Assert.*;, +	public void decodeError() {, +		DataBuffer fooBuffer = stringBuffer("foo");, +		Flux<DataBuffer> source =, +				Flux.just(fooBuffer).mergeWith(Flux.error(new RuntimeException()));, +		Flux<byte[]> output = this.decoder.decode(source,, +				ResolvableType.forClassWithGenerics(Publisher.class, byte[].class),, +				null, Collections.emptyMap());, +, +		StepVerifier.create(output), +				.consumeNextWith(bytes -> assertArrayEquals("foo".getBytes(), bytes)), +				.expectError(), +				.verify();, +	}, +, +	@Test, +++ b/spring-core/src/test/java/org/springframework/core/codec/ByteArrayDecoderTests.java, +import static org.junit.Assert.*;, +	public void decodeError() {, +		DataBuffer fooBuffer = stringBuffer("foo");, +		Flux<DataBuffer> source =, +				Flux.just(fooBuffer).mergeWith(Flux.error(new RuntimeException()));, +		Flux<byte[]> output = this.decoder.decode(source,, +				ResolvableType.forClassWithGenerics(Publisher.class, byte[].class),, +				null, Collections.emptyMap());, +, +		StepVerifier.create(output), +				.consumeNextWith(bytes -> assertArrayEquals("foo".getBytes(), bytes)), +				.expectError(), +				.verify();, +	}, +, +	@Test, +++ b/spring-core/src/test/java/org/springframework/core/codec/ByteBufferDecoderTests.java, + * Copyright 2002-2018 the original author or authors., +import static org.junit.Assert.*;, +	public void decodeError() {, +		DataBuffer fooBuffer = stringBuffer("foo");, +		Flux<DataBuffer> source =, +				Flux.just(fooBuffer).mergeWith(Flux.error(new RuntimeException()));, +		Flux<ByteBuffer> output = this.decoder.decode(source,, +				ResolvableType.forClassWithGenerics(Publisher.class, ByteBuffer.class),, +				null, Collections.emptyMap());, +, +		StepVerifier.create(output), +				.expectNext(ByteBuffer.wrap("foo".getBytes())), +				.expectError(), +				.verify();, +	}, +, +	@Test, +++ b/spring-core/src/test/java/org/springframework/core/codec/ByteArrayDecoderTests.java, +import static org.junit.Assert.*;, +	public void decodeError() {, +		DataBuffer fooBuffer = stringBuffer("foo");, +		Flux<DataBuffer> source =, +				Flux.just(fooBuffer).mergeWith(Flux.error(new RuntimeException()));, +		Flux<byte[]> output = this.decoder.decode(source,, +				ResolvableType.forClassWithGenerics(Publisher.class, byte[].class),, +				null, Collections.emptyMap());, +, +		StepVerifier.create(output), +				.consumeNextWith(bytes -> assertArrayEquals("foo".getBytes(), bytes)), +				.expectError(), +				.verify();, +	}, +, +	@Test, +++ b/spring-core/src/test/java/org/springframework/core/codec/ByteBufferDecoderTests.java, + * Copyright 2002-2018 the original author or authors., +import static org.junit.Assert.*;, +	public void decodeError() {, +		DataBuffer fooBuffer = stringBuffer("foo");, +		Flux<DataBuffer> source =, +				Flux.just(fooBuffer).mergeWith(Flux.error(new RuntimeException()));, +		Flux<ByteBuffer> output = this.decoder.decode(source,, +				ResolvableType.forClassWithGenerics(Publisher.class, ByteBuffer.class),, +				null, Collections.emptyMap());, +, +		StepVerifier.create(output), +				.expectNext(ByteBuffer.wrap("foo".getBytes())), +				.expectError(), +				.verify();, +	}, +, +	@Test, +++ b/spring-core/src/test/java/org/springframework/core/codec/ResourceDecoderTests.java, +import static org.springframework.core.ResolvableType.forClass;, +	@Test, +	public void decodeError() {, +		DataBuffer fooBuffer = stringBuffer("foo");, +		Flux<DataBuffer> source =, +				Flux.just(fooBuffer).mergeWith(Flux.error(new RuntimeException()));, +, +, +		Flux<Resource> result = this.decoder, +				.decode(source, forClass(Resource.class), null, Collections.emptyMap());, +, +		StepVerifier.create(result)]