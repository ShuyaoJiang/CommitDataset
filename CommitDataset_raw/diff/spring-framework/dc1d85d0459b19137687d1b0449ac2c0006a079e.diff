[+++ b/spring-websocket/src/test/java/org/springframework/web/socket/JettyWebSocketTestServer.java, +import org.eclipse.jetty.servlet.FilterHolder;, +import javax.servlet.DispatcherType;, +import javax.servlet.Filter;, +import java.util.EnumSet;, +, +	public void deployConfig(WebApplicationContext cxt, Filter... filters) {, +		for (Filter filter : filters) {, +			contextHandler.addFilter(new FilterHolder(filter), "/*", getDispatcherTypes());, +		}, +	private EnumSet<DispatcherType> getDispatcherTypes() {, +		return EnumSet.of(DispatcherType.REQUEST, DispatcherType.FORWARD, DispatcherType.INCLUDE, DispatcherType.ASYNC);, +	}, +, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/JettyWebSocketTestServer.java, +import org.eclipse.jetty.servlet.FilterHolder;, +import javax.servlet.DispatcherType;, +import javax.servlet.Filter;, +import java.util.EnumSet;, +, +	public void deployConfig(WebApplicationContext cxt, Filter... filters) {, +		for (Filter filter : filters) {, +			contextHandler.addFilter(new FilterHolder(filter), "/*", getDispatcherTypes());, +		}, +	private EnumSet<DispatcherType> getDispatcherTypes() {, +		return EnumSet.of(DispatcherType.REQUEST, DispatcherType.FORWARD, DispatcherType.INCLUDE, DispatcherType.ASYNC);, +	}, +, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/TomcatWebSocketTestServer.java, +import java.util.EnumSet;, +import org.apache.tomcat.util.descriptor.web.FilterDef;, +import org.apache.tomcat.util.descriptor.web.FilterMap;, +import javax.servlet.DispatcherType;, +import javax.servlet.Filter;, +, +	public void deployConfig(WebApplicationContext wac, Filter... filters) {, +		Tomcat.addServlet(this.context, "dispatcherServlet", new DispatcherServlet(wac)).setAsyncSupported(true);, +		for (Filter filter : filters) {, +			FilterDef filterDef = new FilterDef();, +			filterDef.setFilterName(filter.getClass().getName());, +			filterDef.setFilter(filter);, +			filterDef.setAsyncSupported("true");, +			this.context.addFilterDef(filterDef);, +			FilterMap filterMap = new FilterMap();, +			filterMap.setFilterName(filter.getClass().getName());, +			filterMap.addURLPattern("/*");, +			filterMap.setDispatcher("REQUEST,FORWARD,INCLUDE,ASYNC");, +			this.context.addFilterMap(filterMap);, +		}, +	}, +, +	private EnumSet<DispatcherType> getDispatcherTypes() {, +		return EnumSet.of(DispatcherType.REQUEST, DispatcherType.FORWARD, DispatcherType.INCLUDE, DispatcherType.ASYNC);, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/JettyWebSocketTestServer.java, +import org.eclipse.jetty.servlet.FilterHolder;, +import javax.servlet.DispatcherType;, +import javax.servlet.Filter;, +import java.util.EnumSet;, +, +	public void deployConfig(WebApplicationContext cxt, Filter... filters) {, +		for (Filter filter : filters) {, +			contextHandler.addFilter(new FilterHolder(filter), "/*", getDispatcherTypes());, +		}, +	private EnumSet<DispatcherType> getDispatcherTypes() {, +		return EnumSet.of(DispatcherType.REQUEST, DispatcherType.FORWARD, DispatcherType.INCLUDE, DispatcherType.ASYNC);, +	}, +, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/TomcatWebSocketTestServer.java, +import java.util.EnumSet;, +import org.apache.tomcat.util.descriptor.web.FilterDef;, +import org.apache.tomcat.util.descriptor.web.FilterMap;, +import javax.servlet.DispatcherType;, +import javax.servlet.Filter;, +, +	public void deployConfig(WebApplicationContext wac, Filter... filters) {, +		Tomcat.addServlet(this.context, "dispatcherServlet", new DispatcherServlet(wac)).setAsyncSupported(true);, +		for (Filter filter : filters) {, +			FilterDef filterDef = new FilterDef();, +			filterDef.setFilterName(filter.getClass().getName());, +			filterDef.setFilter(filter);, +			filterDef.setAsyncSupported("true");, +			this.context.addFilterDef(filterDef);, +			FilterMap filterMap = new FilterMap();, +			filterMap.setFilterName(filter.getClass().getName());, +			filterMap.addURLPattern("/*");, +			filterMap.setDispatcher("REQUEST,FORWARD,INCLUDE,ASYNC");, +			this.context.addFilterMap(filterMap);, +		}, +	}, +, +	private EnumSet<DispatcherType> getDispatcherTypes() {, +		return EnumSet.of(DispatcherType.REQUEST, DispatcherType.FORWARD, DispatcherType.INCLUDE, DispatcherType.ASYNC);, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/UndertowTestServer.java, +import javax.servlet.DispatcherType;, +import javax.servlet.Filter;, +import io.undertow.servlet.api.FilterInfo;, +	public void deployConfig(WebApplicationContext cxt, Filter... filters) {, +		for (final Filter filter : filters) {, +			String filterName = filter.getClass().getName();, +			servletBuilder.addFilter(new FilterInfo(filterName, filter.getClass(), new FilterInstanceFactory(filter)));]