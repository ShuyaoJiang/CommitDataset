[+++ b/build.gradle, +	ext.woodstoxVersion      = "4.1.6", +		testCompile("org.codehaus.woodstox:woodstox-core-asl:${woodstoxVersion}") {, +		optional("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jackson2Version}"), +		optional("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jackson2Version}"), +++ b/build.gradle, +	ext.woodstoxVersion      = "4.1.6", +		testCompile("org.codehaus.woodstox:woodstox-core-asl:${woodstoxVersion}") {, +		optional("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jackson2Version}"), +		optional("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jackson2Version}"), +++ b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.http.converter.json;, +, +import java.io.IOException;, +import java.lang.reflect.Type;, +import java.nio.charset.Charset;, +import java.util.concurrent.atomic.AtomicReference;, +, +import com.fasterxml.jackson.core.JsonEncoding;, +import com.fasterxml.jackson.core.JsonGenerator;, +import com.fasterxml.jackson.core.JsonProcessingException;, +import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;, +import com.fasterxml.jackson.databind.JavaType;, +import com.fasterxml.jackson.databind.ObjectMapper;, +import com.fasterxml.jackson.databind.SerializationFeature;, +, +import org.springframework.http.HttpInputMessage;, +import org.springframework.http.HttpOutputMessage;, +import org.springframework.http.MediaType;, +import org.springframework.http.converter.AbstractHttpMessageConverter;, +import org.springframework.http.converter.GenericHttpMessageConverter;, +import org.springframework.http.converter.HttpMessageConverter;, +import org.springframework.http.converter.HttpMessageNotReadableException;, +import org.springframework.http.converter.HttpMessageNotWritableException;, +import org.springframework.util.Assert;, +import org.springframework.util.ClassUtils;, +, +/**, + * Abstract base class for Jackson based and content type independent, + * {@link HttpMessageConverter} implementations., + *, + * <p>Compatible with Jackson 2.1 and higher., + *, + * @author Arjen Poutsma, + * @author Keith Donald, + * @author Rossen Stoyanchev, + * @author Juergen Hoeller, + * @author Sebastien Deleuze, + * @since 4.1, + */, +public abstract class AbstractJackson2HttpMessageConverter extends, +		AbstractHttpMessageConverter<Object> implements GenericHttpMessageConverter<Object> {, +, +	public static final Charset DEFAULT_CHARSET = Charset.forName("UTF-8");, +, +	// Check for Jackson 2.3's overloaded canDeserialize/canSerialize variants with cause reference, +	private static final boolean jackson23Available = ClassUtils.hasMethod(ObjectMapper.class,, +			"canDeserialize", JavaType.class, AtomicReference.class);, +, +, +	protected ObjectMapper objectMapper;, +, +	private Boolean prettyPrint;, +, +, +	protected AbstractJackson2HttpMessageConverter(ObjectMapper objectMapper) {, +		this.objectMapper = objectMapper;, +	}, +, +	protected AbstractJackson2HttpMessageConverter(ObjectMapper objectMapper, MediaType supportedMediaType) {, +		super(supportedMediaType);, +		this.objectMapper = objectMapper;, +	}, +, +	protected AbstractJackson2HttpMessageConverter(ObjectMapper objectMapper, MediaType... supportedMediaTypes) {, +		super(supportedMediaTypes);, +		this.objectMapper = objectMapper;, +	}, +, +	/**, +	 * Set the {@code ObjectMapper} for this view., +	 * If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used., +	 * <p>Setting a custom-configured {@code ObjectMapper} is one way to take further, +	 * control of the JSON serialization process. For example, an extended]