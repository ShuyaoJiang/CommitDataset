[+++ b/org.springframework.config.java/.classpath, +	<classpathentry kind="var" path="CLOVER_RUNTIME"/>, +	<classpathentry combineaccessrules="false" kind="src" path="/org.springframework.aop"/>, +++ b/org.springframework.config.java/.classpath, +	<classpathentry kind="var" path="CLOVER_RUNTIME"/>, +	<classpathentry combineaccessrules="false" kind="src" path="/org.springframework.aop"/>, +++ b/org.springframework.config.java/.project, +			<name>com.cenqua.clover.core.prejavabuilder</name>, +			<arguments>, +			</arguments>, +		</buildCommand>, +		<buildCommand>, +			<name>com.cenqua.clover.core.postjavabuilder</name>, +			<arguments>, +			</arguments>, +		</buildCommand>, +		<buildCommand>, +		<nature>com.cenqua.clover.core.clovernature</nature>, +++ b/org.springframework.config.java/.classpath, +	<classpathentry kind="var" path="CLOVER_RUNTIME"/>, +	<classpathentry combineaccessrules="false" kind="src" path="/org.springframework.aop"/>, +++ b/org.springframework.config.java/.project, +			<name>com.cenqua.clover.core.prejavabuilder</name>, +			<arguments>, +			</arguments>, +		</buildCommand>, +		<buildCommand>, +			<name>com.cenqua.clover.core.postjavabuilder</name>, +			<arguments>, +			</arguments>, +		</buildCommand>, +		<buildCommand>, +		<nature>com.cenqua.clover.core.clovernature</nature>, +++ b/org.springframework.config.java/ivy.xml, +		<dependency org="org.springframework" name="org.springframework.aop" rev="latest.integration" conf="compile->compile"/>, +++ b/org.springframework.config.java/.classpath, +	<classpathentry kind="var" path="CLOVER_RUNTIME"/>, +	<classpathentry combineaccessrules="false" kind="src" path="/org.springframework.aop"/>, +++ b/org.springframework.config.java/.project, +			<name>com.cenqua.clover.core.prejavabuilder</name>, +			<arguments>, +			</arguments>, +		</buildCommand>, +		<buildCommand>, +			<name>com.cenqua.clover.core.postjavabuilder</name>, +			<arguments>, +			</arguments>, +		</buildCommand>, +		<buildCommand>, +		<nature>com.cenqua.clover.core.clovernature</nature>, +++ b/org.springframework.config.java/ivy.xml, +		<dependency org="org.springframework" name="org.springframework.aop" rev="latest.integration" conf="compile->compile"/>, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/BeanMethod.java, +		if (this.getAnnotation(ScopedProxy.class) == null), +			return;, +, +		Bean bean =this.getRequiredAnnotation(Bean.class);, +, +		if (bean.scope().equals(StandardScopes.SINGLETON), +				|| bean.scope().equals(StandardScopes.PROTOTYPE)), +			errors.add(new InvalidScopedProxyDeclarationError(this));, +++ b/org.springframework.config.java/.classpath, +	<classpathentry kind="var" path="CLOVER_RUNTIME"/>, +	<classpathentry combineaccessrules="false" kind="src" path="/org.springframework.aop"/>, +++ b/org.springframework.config.java/.project, +			<name>com.cenqua.clover.core.prejavabuilder</name>, +			<arguments>, +			</arguments>, +		</buildCommand>, +		<buildCommand>, +			<name>com.cenqua.clover.core.postjavabuilder</name>, +			<arguments>, +			</arguments>, +		</buildCommand>, +		<buildCommand>, +		<nature>com.cenqua.clover.core.clovernature</nature>, +++ b/org.springframework.config.java/ivy.xml, +		<dependency org="org.springframework" name="org.springframework.aop" rev="latest.integration" conf="compile->compile"/>, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/BeanMethod.java, +		if (this.getAnnotation(ScopedProxy.class) == null), +			return;, +, +		Bean bean =this.getRequiredAnnotation(Bean.class);, +, +		if (bean.scope().equals(StandardScopes.SINGLETON), +				|| bean.scope().equals(StandardScopes.PROTOTYPE)), +			errors.add(new InvalidScopedProxyDeclarationError(this));, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/ConfigurationModel.java, +		// check for any illegal @Bean overriding, +        ConfigurationClass[] allClasses = getAllConfigurationClasses();, +        for (int i = 0; i < allClasses.length; i++) {, +        	for (BeanMethod method : allClasses[i].getMethods()) {, +        		Bean bean = method.getAnnotation(Bean.class);, +        		if (bean == null || bean.allowOverriding()), +        			continue;, +        , +        		for (int j = i + 1; j < allClasses.length; j++), +        			if (allClasses[j].hasMethod(method.getName())), +        				errors.add(allClasses[i].new IllegalBeanOverrideError(allClasses[j], method));, +        	}]