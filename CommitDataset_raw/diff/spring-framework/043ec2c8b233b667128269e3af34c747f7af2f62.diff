[+++ b/org.springframework.oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java, +import java.util.LinkedHashMap;, +import java.util.List;, +		Map<String, Class<?>> classMap = toClassMap(aliases);, +, +		for (Map.Entry<String, Class<?>> entry : classMap.entrySet()) {, +			this.getXStream().alias(entry.getKey(), entry.getValue());, +		}, +	}, +, +	/**, +	 * Sets the aliases by type map, consisting of string aliases mapped to classes. Any class that is assignable to, +	 * this type will be aliased to the same name. Keys are aliases; values are either, +	 * {@code Class} instances, or String class names., +	 *, +	 * @see XStream#aliasType(String, Class), +	 */, +	public void setAliasesByType(Map<String, ?> aliases) throws ClassNotFoundException {, +		Map<String, Class<?>> classMap = toClassMap(aliases);, +, +		for (Map.Entry<String, Class<?>> entry : classMap.entrySet()) {, +			this.getXStream().aliasType(entry.getKey(), entry.getValue());, +		}, +	}, +, +	private Map<String, Class<?>> toClassMap(Map<String, ?> map) throws ClassNotFoundException {, +		Map<String, Class<?>> result = new LinkedHashMap<String, Class<?>>(map.size());, +, +		for (Map.Entry<String, ?> entry : map.entrySet()) {, +			String key = entry.getKey();, +			}, +			else if (value instanceof String) {, +			}, +			else {, +			result.put(key, type);, +		return result;, +	 * either {@code <String, Class>} pairs, in which case, +	 * {@link XStream#useAttributeFor(String, Class)} is called., +	 * Alternatively, the map can contain {@code <Class, String>}, +	 * or {@code <Class, List<String>>} pairs, which results in, +			if (entry.getKey() instanceof String) {, +				if (entry.getValue() instanceof Class) {, +				else {, +					throw new IllegalArgumentException(, +							"Invalid argument 'attributes'. 'useAttributesFor' property takes map of <String, Class>," +, +									" when using a map key of type String");, +				}, +			}, +			else if (entry.getKey() instanceof Class) {, +				Class<?> key = (Class<?>) entry.getKey();, +				if (entry.getValue() instanceof String) {, +					this.getXStream().useAttributeFor(key, (String) entry.getValue());, +				}, +				else if (entry.getValue() instanceof List) {, +					List list = (List) entry.getValue();, +, +					for (Object o : list) {, +						if (o instanceof String) {, +							this.getXStream().useAttributeFor(key, (String) o);, +						}, +					}, +					throw new IllegalArgumentException("Invalid argument 'attributes'. " +, +							"'useAttributesFor' property takes either <Class, String> or <Class, List<String>> map," +, +							" when using a map key of type Class");, +				}, +			}, +			else {, +				throw new IllegalArgumentException("Invalid argument 'attributes. " +, +						"'useAttributesFor' property takes either a map key of type String or Class");, +++ b/org.springframework.oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java, +import java.util.LinkedHashMap;, +import java.util.List;, +		Map<String, Class<?>> classMap = toClassMap(aliases);, +, +		for (Map.Entry<String, Class<?>> entry : classMap.entrySet()) {, +			this.getXStream().alias(entry.getKey(), entry.getValue());, +		}, +	}, +, +	/**, +	 * Sets the aliases by type map, consisting of string aliases mapped to classes. Any class that is assignable to, +	 * this type will be aliased to the same name. Keys are aliases; values are either, +	 * {@code Class} instances, or String class names., +	 *, +	 * @see XStream#aliasType(String, Class), +	 */, +	public void setAliasesByType(Map<String, ?> aliases) throws ClassNotFoundException {, +		Map<String, Class<?>> classMap = toClassMap(aliases);, +, +		for (Map.Entry<String, Class<?>> entry : classMap.entrySet()) {, +			this.getXStream().aliasType(entry.getKey(), entry.getValue());, +		}, +	}, +, +	private Map<String, Class<?>> toClassMap(Map<String, ?> map) throws ClassNotFoundException {, +		Map<String, Class<?>> result = new LinkedHashMap<String, Class<?>>(map.size());, +, +		for (Map.Entry<String, ?> entry : map.entrySet()) {, +			String key = entry.getKey();, +			}]