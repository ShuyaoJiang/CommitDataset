[+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/ContextPathIntegrationTests.java, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/ContextPathIntegrationTests.java, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/socket/AbstractWebSocketIntegrationTests.java, +		// Set dynamically chosen port, +		this.port = this.server.getPort();, +, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/ContextPathIntegrationTests.java, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/socket/AbstractWebSocketIntegrationTests.java, +		// Set dynamically chosen port, +		this.port = this.server.getPort();, +, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	protected Log logger = LogFactory.getLog(getClass());, +, +, +		// Set dynamically chosen port, +		this.port = this.server.getPort();, +		this.port = 0;, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/ContextPathIntegrationTests.java, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/socket/AbstractWebSocketIntegrationTests.java, +		// Set dynamically chosen port, +		this.port = this.server.getPort();, +, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	protected Log logger = LogFactory.getLog(getClass());, +, +, +		// Set dynamically chosen port, +		this.port = this.server.getPort();, +		this.port = 0;, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/bootstrap/AbstractHttpServer.java, +	private int port = 0;, +	@Override, +	@Override, +	@Override, +	@Override, +	protected abstract void stopInternal() throws Exception;, +, +	private void reset() {, +		this.port = 0;, +		resetInternal();, +	protected abstract void resetInternal();, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/ContextPathIntegrationTests.java, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/socket/AbstractWebSocketIntegrationTests.java, +		// Set dynamically chosen port, +		this.port = this.server.getPort();, +, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	protected Log logger = LogFactory.getLog(getClass());, +, +, +		// Set dynamically chosen port, +		this.port = this.server.getPort();, +		this.port = 0;, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/bootstrap/AbstractHttpServer.java, +	private int port = 0;, +	@Override, +	@Override, +	@Override, +	@Override, +	protected abstract void stopInternal() throws Exception;, +, +	private void reset() {, +		this.port = 0;, +		resetInternal();, +	protected abstract void resetInternal();, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/bootstrap/HttpServer.java, +	int getPort();, +, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/ContextPathIntegrationTests.java, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/socket/AbstractWebSocketIntegrationTests.java, +		// Set dynamically chosen port, +		this.port = this.server.getPort();, +, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/AbstractHttpHandlerIntegrationTests.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	protected Log logger = LogFactory.getLog(getClass());, +, +, +		// Set dynamically chosen port, +		this.port = this.server.getPort();, +		this.port = 0;, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/bootstrap/AbstractHttpServer.java, +	private int port = 0;, +	@Override, +	@Override, +	@Override, +	@Override, +	protected abstract void stopInternal() throws Exception;, +, +	private void reset() {, +		this.port = 0;, +		resetInternal();]