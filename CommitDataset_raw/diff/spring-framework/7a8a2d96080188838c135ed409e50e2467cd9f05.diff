[+++ b/spring-web/src/test/java/org/springframework/http/codec/FormHttpMessageWriterTests.java, +import reactor.test.StepVerifier;, +import org.springframework.core.io.buffer.AbstractDataBufferAllocatingTestCase;, +import static org.junit.Assert.*;, +public class FormHttpMessageWriterTests extends AbstractDataBufferAllocatingTestCase {, +		MockServerHttpResponse response = new MockServerHttpResponse(this.bufferFactory);, +		String expected = "name+1=value+1&name+2=value+2%2B1&name+2=value+2%2B2&name+3";, +		StepVerifier.create(response.getBody()), +				.consumeNextWith(stringConsumer(, +						expected)), +				.expectComplete(), +				.verify();, +		assertEquals(expected.length(), headers.getContentLength());, +++ b/spring-web/src/test/java/org/springframework/http/codec/FormHttpMessageWriterTests.java, +import reactor.test.StepVerifier;, +import org.springframework.core.io.buffer.AbstractDataBufferAllocatingTestCase;, +import static org.junit.Assert.*;, +public class FormHttpMessageWriterTests extends AbstractDataBufferAllocatingTestCase {, +		MockServerHttpResponse response = new MockServerHttpResponse(this.bufferFactory);, +		String expected = "name+1=value+1&name+2=value+2%2B1&name+2=value+2%2B2&name+3";, +		StepVerifier.create(response.getBody()), +				.consumeNextWith(stringConsumer(, +						expected)), +				.expectComplete(), +				.verify();, +		assertEquals(expected.length(), headers.getContentLength());, +++ b/spring-web/src/test/java/org/springframework/http/codec/ServerSentEventHttpMessageWriterTests.java, +import org.junit.Before;, +import org.springframework.core.io.buffer.DataBufferUtils;, +import org.springframework.core.io.buffer.support.DataBufferTestUtils;, +@SuppressWarnings("rawtypes"), +	private MockServerHttpResponse outputMessage;, +, +, +	@Before, +	public void setUp() {, +		this.outputMessage = new MockServerHttpResponse(this.bufferFactory);, +	}, +, +, +		StepVerifier.create(outputMessage.getBody()), +				.consumeNextWith(stringConsumer("id:c42\nevent:foo\nretry:123\n:bla\n:bla bla\n:bla bla bla\ndata:")), +				.consumeNextWith(stringConsumer("bar\n")), +				.consumeNextWith(stringConsumer("\n")), +		StepVerifier.create(outputMessage.getBody()), +				.consumeNextWith(stringConsumer("data:")), +				.consumeNextWith(stringConsumer("foo\n")), +				.consumeNextWith(stringConsumer("\n")), +				.consumeNextWith(stringConsumer("data:")), +				.consumeNextWith(stringConsumer("bar\n")), +				.consumeNextWith(stringConsumer("\n")), +		StepVerifier.create(outputMessage.getBody()), +				.consumeNextWith(stringConsumer("data:")), +				.consumeNextWith(stringConsumer("foo\ndata:bar\n")), +				.consumeNextWith(stringConsumer("\n")), +				.consumeNextWith(stringConsumer("data:")), +				.consumeNextWith(stringConsumer("foo\ndata:baz\n")), +				.consumeNextWith(stringConsumer("\n")), +		StepVerifier.create(outputMessage.getBody()), +				.consumeNextWith(stringConsumer("data:")), +				.consumeNextWith(dataBuffer -> {, +					String value =, +							DataBufferTestUtils.dumpString(dataBuffer, charset);, +					DataBufferUtils.release(dataBuffer);, +					assertEquals("\u00A3\n", value);, +				}), +				.consumeNextWith(stringConsumer("\n")), +				.expectComplete(), +				.verify();, +		StepVerifier.create(outputMessage.getBody()), +				.consumeNextWith(stringConsumer("data:")), +				.consumeNextWith(stringConsumer("{\"foo\":\"foofoo\",\"bar\":\"barbar\"}")), +				.consumeNextWith(stringConsumer("\n")), +				.consumeNextWith(stringConsumer("\n")), +				.consumeNextWith(stringConsumer("data:")), +				.consumeNextWith(stringConsumer("{\"foo\":\"foofoofoo\",\"bar\":\"barbarbar\"}")), +				.consumeNextWith(stringConsumer("\n")), +				.consumeNextWith(stringConsumer("\n")), +		StepVerifier.create(outputMessage.getBody()), +				.consumeNextWith(stringConsumer("data:")), +				.consumeNextWith(stringConsumer("{\n" +, +						"data:  \"bar\" : \"barbar\"\n" + "data:}")), +				.consumeNextWith(stringConsumer("\n")), +				.consumeNextWith(stringConsumer("\n")), +				.consumeNextWith(stringConsumer("data:")), +				.consumeNextWith(stringConsumer("{\n" +, +						"data:  \"bar\" : \"barbarbar\"\n" + "data:}")), +				.consumeNextWith(stringConsumer("\n")), +				.consumeNextWith(stringConsumer("\n")), +		StepVerifier.create(outputMessage.getBody()), +				.consumeNextWith(dataBuffer1 -> {, +					String value1 =, +							DataBufferTestUtils.dumpString(dataBuffer1, charset);, +					DataBufferUtils.release(dataBuffer1);, +					assertEquals("data:", value1);, +				}), +				.consumeNextWith(dataBuffer -> {, +					String value = DataBufferTestUtils.dumpString(dataBuffer, charset);, +					DataBufferUtils.release(dataBuffer);, +					assertEquals("{\"foo\":\"foo\uD834\uDD1E\",\"bar\":\"bar\uD834\uDD1E\"}", value);]