[+++ b/spring-test/src/main/java/org/springframework/test/context/CacheAwareContextLoaderDelegate.java, + * Copyright 2002-2015 the original author or authors., + * contexts, interacting transparently with a {@link ContextCache} behind, +	 * <p>If the context is present in the {@code ContextCache} it will simply, +	 * supplied {@link MergedContextConfiguration} from the {@code ContextCache}, +++ b/spring-test/src/main/java/org/springframework/test/context/CacheAwareContextLoaderDelegate.java, + * Copyright 2002-2015 the original author or authors., + * contexts, interacting transparently with a {@link ContextCache} behind, +	 * <p>If the context is present in the {@code ContextCache} it will simply, +	 * supplied {@link MergedContextConfiguration} from the {@code ContextCache}, +++ b/spring-test/src/main/java/org/springframework/test/context/ContextCache.java, + * {@code ContextCache} defines the public API for caching Spring, + * {@link ApplicationContext ApplicationContexts} within the <em>Spring, + * TestContext Framework</em>., + *, + * <p>A {@code ContextCache} maintains a cache of {@code ApplicationContexts}, + * keyed by {@link MergedContextConfiguration} instances., + * <p>Context caching can have significant performance benefits if context, + * initialization is complex. So, although initializing a Spring context itself, + * is typically very quick, some beans in a context &mdash; for example, an, + * in-memory database or a {@code LocalSessionFactoryBean} for working with, + * Hibernate &mdash; may take several seconds to initialize. Hence it often, + * makes sense to perform that initialization only once per test suite., + * @since 4.2, +public interface ContextCache {, +	boolean contains(MergedContextConfiguration key);, +	 * <p>The {@link #getHitCount() hit} and {@link #getMissCount() miss} counts, +	 * must be updated accordingly., +	ApplicationContext get(MergedContextConfiguration key);, +	void put(MergedContextConfiguration key, ApplicationContext context);, +	 * {@linkplain org.springframework.context.ConfigurableApplicationContext#close() close}, +	 * it if it is an instance of {@code ConfigurableApplicationContext}., +	 * <p>Generally speaking, this method should be called if the state of, +	 * a singleton bean has been modified, potentially affecting future, +	 * interaction with the context., +	 * <p>In addition, the semantics of the supplied {@code HierarchyMode} must, +	void remove(MergedContextConfiguration key, HierarchyMode hierarchyMode);, +	 * this method must return {@code Integer.MAX_VALUE}., +	int size();, +	int getParentContextCount();, +	 * Get the overall hit count for this cache., +	 * <p>A <em>hit</em> is any access to the cache that returns a non-null, +	 * context for the queried key., +	 */, +	int getHitCount();, +, +	/**, +	 * Get the overall miss count for this cache., +	 * <p>A <em>miss</em> is any access to the cache that returns a {@code null}, +	 * context for the queried key., +	 */, +	int getMissCount();, +, +	/**, +	 * Reset all state maintained by this cache including statistics., +	 * @see #clear(), +	 * @see #clearStatistics(), +	 */, +	void reset();, +, +	/**, +	 * Clear all contexts from the cache, clearing context hierarchy information as well., +	 */, +	void clear();, +, +	/**, +	 * Clear hit and miss count statistics for the cache (i.e., reset counters to zero)., +	 */, +	void clearStatistics();, +, +	/**, +	 * Generate a text string containing the implementation type of this, +	 * cache and its statistics., +	 * <p>The value returned by this method will be used primarily for, +	 * logging purposes., +	 * <p>Specifically, the returned string should contain the name of the, +	 * concrete {@code ContextCache} implementation, the {@linkplain #size},, +	 * {@linkplain #getParentContextCount() parent context count},, +	 * {@linkplain #getHitCount() hit count}, {@linkplain #getMissCount(), +	 * miss count}, and any other information useful in monitoring the, +	 * state of this cache., +	 * @return a string representation of this cache, including statistics, +	abstract String toString();, +++ b/spring-test/src/main/java/org/springframework/test/context/CacheAwareContextLoaderDelegate.java, + * Copyright 2002-2015 the original author or authors., + * contexts, interacting transparently with a {@link ContextCache} behind, +	 * <p>If the context is present in the {@code ContextCache} it will simply, +	 * supplied {@link MergedContextConfiguration} from the {@code ContextCache}, +++ b/spring-test/src/main/java/org/springframework/test/context/ContextCache.java, + * {@code ContextCache} defines the public API for caching Spring, + * {@link ApplicationContext ApplicationContexts} within the <em>Spring, + * TestContext Framework</em>., + *, + * <p>A {@code ContextCache} maintains a cache of {@code ApplicationContexts}, + * keyed by {@link MergedContextConfiguration} instances., + * <p>Context caching can have significant performance benefits if context, + * initialization is complex. So, although initializing a Spring context itself, + * is typically very quick, some beans in a context &mdash; for example, an, + * in-memory database or a {@code LocalSessionFactoryBean} for working with, + * Hibernate &mdash; may take several seconds to initialize. Hence it often]