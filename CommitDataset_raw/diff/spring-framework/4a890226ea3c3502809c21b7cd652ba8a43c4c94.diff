[+++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, +	public void setDefaultContentType(List<MediaType> contentTypes) {, +		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentTypes);, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, +	public void setDefaultContentType(List<MediaType> contentTypes) {, +		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentTypes);, +++ b/spring-web/src/main/java/org/springframework/web/accept/FixedContentNegotiationStrategy.java, +import java.util.Arrays;, +	private final List<MediaType> contentTypes;, +	public FixedContentNegotiationStrategy(MediaType... contentTypes) {, +		this.contentTypes = Arrays.asList(contentTypes);, +	}, +	, +	/**, +	 * Create an instance with the given content type., +	 * , +	 * <p>, +	 * List is ordered in the same manner as a "quality" parameter on incoming requests., +	 * If destinations which do not support any of the media types provided are present,, +	 * end the list with {@link MediaType#ALL} to allow standard media type determination, +	 */, +	public FixedContentNegotiationStrategy(List<MediaType> contentTypes) {, +		this.contentTypes = contentTypes;, +			logger.debug("Requested media types: " + this.contentTypes);, +		, +		return this.contentTypes;, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, +	public void setDefaultContentType(List<MediaType> contentTypes) {, +		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentTypes);, +++ b/spring-web/src/main/java/org/springframework/web/accept/FixedContentNegotiationStrategy.java, +import java.util.Arrays;, +	private final List<MediaType> contentTypes;, +	public FixedContentNegotiationStrategy(MediaType... contentTypes) {, +		this.contentTypes = Arrays.asList(contentTypes);, +	}, +	, +	/**, +	 * Create an instance with the given content type., +	 * , +	 * <p>, +	 * List is ordered in the same manner as a "quality" parameter on incoming requests., +	 * If destinations which do not support any of the media types provided are present,, +	 * end the list with {@link MediaType#ALL} to allow standard media type determination, +	 */, +	public FixedContentNegotiationStrategy(List<MediaType> contentTypes) {, +		this.contentTypes = contentTypes;, +			logger.debug("Requested media types: " + this.contentTypes);, +		, +		return this.contentTypes;, +++ b/spring-web/src/test/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBeanTests.java, +import java.util.Arrays;, +		this.factoryBean.setDefaultContentType(Arrays.asList(MediaType.APPLICATION_JSON));, +	@Test, +	public void setMultipleDefaultContentTypess() throws Exception {, +		this.factoryBean.setDefaultContentType(Arrays.asList(MediaType.APPLICATION_JSON, MediaType.ALL));, +		this.factoryBean.afterPropertiesSet();, +		ContentNegotiationManager manager = this.factoryBean.getObject();, +, +		assertEquals(Arrays.asList(MediaType.APPLICATION_JSON, MediaType.ALL),, +				manager.resolveMediaTypes(this.webRequest));, +, +		// SPR-15367, +		this.servletRequest.addHeader("Accept", MediaType.ALL_VALUE);, +		assertEquals(Arrays.asList(MediaType.APPLICATION_JSON, MediaType.ALL),, +				manager.resolveMediaTypes(this.webRequest));, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, +	public void setDefaultContentType(List<MediaType> contentTypes) {, +		this.defaultNegotiationStrategy = new FixedContentNegotiationStrategy(contentTypes);, +++ b/spring-web/src/main/java/org/springframework/web/accept/FixedContentNegotiationStrategy.java, +import java.util.Arrays;, +	private final List<MediaType> contentTypes;, +	public FixedContentNegotiationStrategy(MediaType... contentTypes) {, +		this.contentTypes = Arrays.asList(contentTypes);, +	}, +	, +	/**, +	 * Create an instance with the given content type., +	 * , +	 * <p>, +	 * List is ordered in the same manner as a "quality" parameter on incoming requests., +	 * If destinations which do not support any of the media types provided are present,, +	 * end the list with {@link MediaType#ALL} to allow standard media type determination, +	 */, +	public FixedContentNegotiationStrategy(List<MediaType> contentTypes) {, +		this.contentTypes = contentTypes;, +			logger.debug("Requested media types: " + this.contentTypes);, +		, +		return this.contentTypes;, +++ b/spring-web/src/test/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBeanTests.java, +import java.util.Arrays;, +		this.factoryBean.setDefaultContentType(Arrays.asList(MediaType.APPLICATION_JSON));, +	@Test, +	public void setMultipleDefaultContentTypess() throws Exception {, +		this.factoryBean.setDefaultContentType(Arrays.asList(MediaType.APPLICATION_JSON, MediaType.ALL));, +		this.factoryBean.afterPropertiesSet();, +		ContentNegotiationManager manager = this.factoryBean.getObject();, +, +		assertEquals(Arrays.asList(MediaType.APPLICATION_JSON, MediaType.ALL),]