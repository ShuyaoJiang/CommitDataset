[+++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java, +			// TODO: extract from query string, +++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java, +			// TODO: extract from query string, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/ConnectionManagerSupport.java, + * Abstract base class for WebSocket connection managers., +					stopInternal();, +		}, +	}, +, +	protected void stopInternal() throws Exception {, +		if (isConnected()) {, +			closeConnection();, +		}, +	}, +++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java, +			// TODO: extract from query string, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/ConnectionManagerSupport.java, + * Abstract base class for WebSocket connection managers., +					stopInternal();, +		}, +	}, +, +	protected void stopInternal() throws Exception {, +		if (isConnected()) {, +			closeConnection();, +		}, +	}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/WebSocketConnectionManager.java, +	public void stopInternal() throws Exception {, +++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java, +			// TODO: extract from query string, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/ConnectionManagerSupport.java, + * Abstract base class for WebSocket connection managers., +					stopInternal();, +		}, +	}, +, +	protected void stopInternal() throws Exception {, +		if (isConnected()) {, +			closeConnection();, +		}, +	}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/WebSocketConnectionManager.java, +	public void stopInternal() throws Exception {, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/endpoint/StandardWebSocketClient.java, +	private WebSocketContainer webSocketContainer;, +	public WebSocketContainer getWebSocketContainer() {, +		if (this.webSocketContainer == null) {, +			this.webSocketContainer = ContainerProvider.getWebSocketContainer();, +		}, +		return this.webSocketContainer;, +	}, +	public WebSocketSession doHandshake(WebSocketHandler webSocketHandler, HttpHeaders httpHeaders, URI uri), +			throws WebSocketConnectFailureException {, +			configBuidler.configurator(new StandardWebSocketClientConfigurator(httpHeaders));, +		}, +, +		try {, +			// TODO: do not block, +			this.webSocketContainer.connectToServer(endpoint, configBuidler.build(), uri);, +			return session;, +		}, +		catch (Exception e) {, +			throw new WebSocketConnectFailureException("Failed to connect to " + uri, e);, +		}, +	}, +, +, +	private static class StandardWebSocketClientConfigurator extends Configurator {, +, +		private static final Set<String> EXCLUDED_HEADERS = new HashSet<String>(, +				Arrays.asList("Sec-WebSocket-Accept", "Sec-WebSocket-Extensions", "Sec-WebSocket-Key",, +						"Sec-WebSocket-Protocol", "Sec-WebSocket-Version"));, +, +		private final HttpHeaders httpHeaders;, +, +, +		public StandardWebSocketClientConfigurator(HttpHeaders httpHeaders) {, +			this.httpHeaders = httpHeaders;, +		}, +, +			for (String headerName : this.httpHeaders.keySet()) {, +					List<String> value = this.httpHeaders.get(headerName);, +++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java, +			// TODO: extract from query string, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/ConnectionManagerSupport.java, + * Abstract base class for WebSocket connection managers., +					stopInternal();, +		}, +	}, +, +	protected void stopInternal() throws Exception {, +		if (isConnected()) {, +			closeConnection();, +		}, +	}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/WebSocketConnectionManager.java, +	public void stopInternal() throws Exception {, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/endpoint/StandardWebSocketClient.java]