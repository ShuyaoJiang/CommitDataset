[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, +		return pathExtension(new Predicate<String>() {, +			@Override, +			public boolean test(String pathExtension) {, +			}, +, +			public String toString() {, +				return String.format("*.%s", extension);, +			}, +		return new PathExtensionPredicate(extensionPredicate);, +	}, +, +	/**, +	 * Return a {@code RequestPredicate} that matches if the request's query parameter of the given name, +	 * has the given value, +	 * @param name the name of the query parameter to test against, +	 * @param value the value of the query parameter to test against, +	 * @return a predicate that matches if the query parameter has the given value, +	 * @see ServerRequest#queryParam(String), +	 * @since 5.0.7, +	 */, +	public static RequestPredicate queryParam(String name, String value) {, +		return queryParam(name, new Predicate<String>() {, +			@Override, +			public boolean test(String s) {, +				return s.equals(value);, +			}, +, +			@Override, +			public String toString() {, +				return String.format("== %s", value);, +			}, +		});, +		return new QueryParamPredicate(name, predicate);, +, +	private static class PathExtensionPredicate implements RequestPredicate {, +, +		private final Predicate<String> extensionPredicate;, +, +		public PathExtensionPredicate(Predicate<String> extensionPredicate) {, +			Assert.notNull(extensionPredicate, "Predicate must not be null");, +			this.extensionPredicate = extensionPredicate;, +		}, +, +		@Override, +		public boolean test(ServerRequest request) {, +			String pathExtension = UriUtils.extractFileExtension(request.path());, +			return this.extensionPredicate.test(pathExtension);, +		}, +, +		@Override, +		public String toString() {, +			return this.extensionPredicate.toString();, +		}, +, +	}, +, +, +	private static class QueryParamPredicate implements RequestPredicate {, +, +		private final String name;, +, +		private final Predicate<String> predicate;, +, +		public QueryParamPredicate(String name, Predicate<String> predicate) {, +			Assert.notNull(name, "Name must not be null");, +			Assert.notNull(predicate, "Predicate must not be null");, +			this.name = name;, +			this.predicate = predicate;, +		}, +, +		@Override, +		public boolean test(ServerRequest request) {, +			Optional<String> s = request.queryParam(this.name);, +			return s.filter(this.predicate).isPresent();, +		}, +, +		@Override, +		public String toString() {, +			return String.format("?%s %s", this.name, this.predicate);, +		}, +	}, +, +, +, +]