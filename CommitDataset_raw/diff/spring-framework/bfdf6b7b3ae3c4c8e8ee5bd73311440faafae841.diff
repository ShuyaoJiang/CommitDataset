[+++ b/src/asciidoc/data-access.adoc, +	<jdbc:embedded-database id="dataSource" generate-name="true">, +`schema.sql` and `test-data.sql` resources in the root of the classpath. In addition, as, +a best practice, the embedded database will be assigned a uniquely generated name. The, +embedded database is made available to the Spring container as a bean of type, +`javax.sql.DataSource` which can then be injected into data access objects as needed., +standalone environment or in a standalone integration test like in the following example., +    .generateUniqueName(true), +// perform actions against the db (EmbeddedDatabase extends javax.sql.DataSource), +Consult the Javadoc for `EmbeddedDatabaseBuilder` for further details on all supported, +options., +, +            .generateUniqueName(true), +			db = new EmbeddedDatabaseBuilder(), +					.generateUniqueName(true), +					.addDefaultScripts(), +					.build();, +[[jdbc-embedded-database-unique-names]], +==== Generating unique names for embedded databases, +, +Development teams often encounter errors with embedded databases if their test suite, +inadvertently attempts to recreate additional instances of the same database. This can, +happen quite easily if an XML configuration file or `@Configuration` class is responsible, +for creating an embedded database and the corresponding configuration is then reused, +across multiple testing scenarios within the same test suite (i.e., within the same JVM, +process) –- for example, integration tests against embedded databases whose, +`ApplicationContext` configuration only differs with regard to which bean definition, +profiles are active., +, +The root cause of such errors is the fact that Spring's `EmbeddedDatabaseFactory` (used, +internally by both the `<jdbc:embedded-database>` XML namespace element and the, +`EmbeddedDatabaseBuilder` for Java Config) will set the name of the embedded database to, +`"testdb"` if not otherwise specified. For the case of `<jdbc:embedded-database>`, the, +embedded database is typically assigned a name equal to the bean's `id` (i.e., often, +something like `"dataSource"`). Thus, subsequent attempts to create an embedded database, +will not result in a new database. Instead, the same JDBC connection URL will be reused,, +and attempts to create a new embedded database will actually point to an existing, +embedded database created from the same configuration., +, +To address this common issue Spring Framework 4.2 provides support for generating, +_unique_ names for embedded databases. To enable the use of generated names, use one of, +the following options., +, +* `EmbeddedDatabaseFactory.setGenerateUniqueDatabaseName()`, +* `EmbeddedDatabaseBuilder.generateUniqueName()`, +* `<jdbc:embedded-database generate-name="true" ... >`, +, +, +++ b/src/asciidoc/data-access.adoc, +	<jdbc:embedded-database id="dataSource" generate-name="true">, +`schema.sql` and `test-data.sql` resources in the root of the classpath. In addition, as, +a best practice, the embedded database will be assigned a uniquely generated name. The, +embedded database is made available to the Spring container as a bean of type, +`javax.sql.DataSource` which can then be injected into data access objects as needed., +standalone environment or in a standalone integration test like in the following example., +    .generateUniqueName(true), +// perform actions against the db (EmbeddedDatabase extends javax.sql.DataSource), +Consult the Javadoc for `EmbeddedDatabaseBuilder` for further details on all supported, +options., +, +            .generateUniqueName(true), +			db = new EmbeddedDatabaseBuilder(), +					.generateUniqueName(true), +					.addDefaultScripts(), +					.build();, +[[jdbc-embedded-database-unique-names]], +==== Generating unique names for embedded databases, +, +Development teams often encounter errors with embedded databases if their test suite, +inadvertently attempts to recreate additional instances of the same database. This can, +happen quite easily if an XML configuration file or `@Configuration` class is responsible, +for creating an embedded database and the corresponding configuration is then reused, +across multiple testing scenarios within the same test suite (i.e., within the same JVM, +process) –- for example, integration tests against embedded databases whose, +`ApplicationContext` configuration only differs with regard to which bean definition, +profiles are active., +, +The root cause of such errors is the fact that Spring's `EmbeddedDatabaseFactory` (used, +internally by both the `<jdbc:embedded-database>` XML namespace element and the, +`EmbeddedDatabaseBuilder` for Java Config) will set the name of the embedded database to, +`"testdb"` if not otherwise specified. For the case of `<jdbc:embedded-database>`, the, +embedded database is typically assigned a name equal to the bean's `id` (i.e., often, +something like `"dataSource"`). Thus, subsequent attempts to create an embedded database, +will not result in a new database. Instead, the same JDBC connection URL will be reused,, +and attempts to create a new embedded database will actually point to an existing, +embedded database created from the same configuration., +, +To address this common issue Spring Framework 4.2 provides support for generating, +_unique_ names for embedded databases. To enable the use of generated names, use one of, +the following options., +, +* `EmbeddedDatabaseFactory.setGenerateUniqueDatabaseName()`, +* `EmbeddedDatabaseBuilder.generateUniqueName()`, +* `<jdbc:embedded-database generate-name="true" ... >`, +, +, +++ b/src/asciidoc/whats-new.adoc, +  ++ApplicationContext++s within a test suite., +** See <<jdbc-embedded-database-unique-names>> for details., +]