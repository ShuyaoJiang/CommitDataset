[+++ b/spring-jms/src/main/java/org/springframework/jms/support/converter/MappingJackson2MessageConverter.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.beans.factory.BeanClassLoaderAware;, + * Message converter that uses Jackson 2.x to convert messages to and from JSON., + * Maps an object to a {@link BytesMessage}, or to a {@link TextMessage} if the, + * {@link #setTargetType targetType} is set to {@link MessageType#TEXT}., + * Converts from a {@link TextMessage} or {@link BytesMessage} to an object., + *, + * <p>Tested against Jackson 2.2; compatible with Jackson 2.0 and higher., +public class MappingJackson2MessageConverter implements MessageConverter, BeanClassLoaderAware {, +	private ClassLoader beanClassLoader;, +, +	 * Specify the {@link ObjectMapper} to use instead of using the default., +	 * Specify whether {@link #toMessage(Object, Session)} should marshal to a, +	 * {@link BytesMessage} or a {@link TextMessage}., +	 * <p>The default is {@link MessageType#BYTES}, i.e. this converter marshals to, +	 * a {@link BytesMessage}. Note that the default version of this converter, +	 * supports {@link MessageType#BYTES} and {@link MessageType#TEXT} only., +	 * @see MessageType#BYTES, +	 * @see MessageType#TEXT, +	public void setBeanClassLoader(ClassLoader classLoader) {, +		this.beanClassLoader = classLoader;, +	}, +, +	 * Map the given object to a {@link TextMessage}., +	 * @throws JMSException if thrown by JMS methods, +	 * @throws IOException in case of I/O errors, +	 * @see Session#createBytesMessage, +	 * Map the given object to a {@link BytesMessage}., +	 * @throws JMSException if thrown by JMS methods, +	 * @throws IOException in case of I/O errors, +	 * @see Session#createBytesMessage, +	 * Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or, +	 * {@link MessageType#BYTES}., +	 * @throws JMSException if thrown by JMS methods, +	 * @throws IOException in case of I/O errors, +				"]. MappingJackson2MessageConverter by default only supports TextMessages and BytesMessages.");, +	 * @throws JMSException if thrown by JMS methods, +	 * @throws JMSException if thrown by JMS, +	 * @throws IOException in case of I/O errors, +	 * @throws JMSException if thrown by JMS, +	 * @throws IOException in case of I/O errors, +	 * Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or, +	 * {@link MessageType#BYTES}., +	 * @throws JMSException if thrown by JMS, +	 * @throws IOException in case of I/O errors, +	 * @throws JMSException if thrown by JMS methods, +		Class<?> mappedClass = this.idClassMappings.get(typeId);, +			Class<?> typeClass = ClassUtils.forName(typeId, this.beanClassLoader);, +			return this.objectMapper.getTypeFactory().constructType(typeClass);, +++ b/spring-jms/src/main/java/org/springframework/jms/support/converter/MappingJackson2MessageConverter.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.beans.factory.BeanClassLoaderAware;, + * Message converter that uses Jackson 2.x to convert messages to and from JSON., + * Maps an object to a {@link BytesMessage}, or to a {@link TextMessage} if the, + * {@link #setTargetType targetType} is set to {@link MessageType#TEXT}., + * Converts from a {@link TextMessage} or {@link BytesMessage} to an object., + *, + * <p>Tested against Jackson 2.2; compatible with Jackson 2.0 and higher., +public class MappingJackson2MessageConverter implements MessageConverter, BeanClassLoaderAware {, +	private ClassLoader beanClassLoader;, +, +	 * Specify the {@link ObjectMapper} to use instead of using the default., +	 * Specify whether {@link #toMessage(Object, Session)} should marshal to a, +	 * {@link BytesMessage} or a {@link TextMessage}., +	 * <p>The default is {@link MessageType#BYTES}, i.e. this converter marshals to, +	 * a {@link BytesMessage}. Note that the default version of this converter, +	 * supports {@link MessageType#BYTES} and {@link MessageType#TEXT} only., +	 * @see MessageType#BYTES, +	 * @see MessageType#TEXT, +	public void setBeanClassLoader(ClassLoader classLoader) {, +		this.beanClassLoader = classLoader;, +	}, +, +	 * Map the given object to a {@link TextMessage}., +	 * @throws JMSException if thrown by JMS methods, +	 * @throws IOException in case of I/O errors, +	 * @see Session#createBytesMessage, +	 * Map the given object to a {@link BytesMessage}., +	 * @throws JMSException if thrown by JMS methods, +	 * @throws IOException in case of I/O errors, +	 * @see Session#createBytesMessage, +	 * Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or, +	 * {@link MessageType#BYTES}., +	 * @throws JMSException if thrown by JMS methods, +	 * @throws IOException in case of I/O errors, +				"]. MappingJackson2MessageConverter by default only supports TextMessages and BytesMessages.");, +	 * @throws JMSException if thrown by JMS methods, +	 * @throws JMSException if thrown by JMS, +	 * @throws IOException in case of I/O errors, +	 * @throws JMSException if thrown by JMS, +	 * @throws IOException in case of I/O errors, +	 * Invoked when {@link #setTargetType} is not {@link MessageType#TEXT} or, +	 * {@link MessageType#BYTES}., +	 * @throws JMSException if thrown by JMS, +	 * @throws IOException in case of I/O errors, +	 * @throws JMSException if thrown by JMS methods, +		Class<?> mappedClass = this.idClassMappings.get(typeId);, +			Class<?> typeClass = ClassUtils.forName(typeId, this.beanClassLoader);, +			return this.objectMapper.getTypeFactory().constructType(typeClass);]