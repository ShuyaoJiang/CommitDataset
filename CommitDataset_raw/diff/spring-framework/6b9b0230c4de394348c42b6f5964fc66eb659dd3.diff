[+++ b/spring-web/src/main/java/org/springframework/http/MediaType.java, +	 * Public constant media type for {@code application/stream+json}., +	 * @since 5.0, +	 */, +	public final static MediaType APPLICATION_STREAM_JSON;, +, +	/**, +	 * A String equivalent of {@link MediaType#APPLICATION_STREAM_JSON}., +	 * @since 5.0, +	 */, +	public final static String APPLICATION_STREAM_JSON_VALUE = "application/stream+json";, +, +	/**, +		APPLICATION_STREAM_JSON = valueOf(APPLICATION_STREAM_JSON_VALUE);, +++ b/spring-web/src/main/java/org/springframework/http/MediaType.java, +	 * Public constant media type for {@code application/stream+json}., +	 * @since 5.0, +	 */, +	public final static MediaType APPLICATION_STREAM_JSON;, +, +	/**, +	 * A String equivalent of {@link MediaType#APPLICATION_STREAM_JSON}., +	 * @since 5.0, +	 */, +	public final static String APPLICATION_STREAM_JSON_VALUE = "application/stream+json";, +, +	/**, +		APPLICATION_STREAM_JSON = valueOf(APPLICATION_STREAM_JSON_VALUE);, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonEncoder.java, + * Copyright 2002-2017 the original author or authors., +import static org.springframework.http.MediaType.APPLICATION_STREAM_JSON;, +		else if (APPLICATION_STREAM_JSON.isCompatibleWith(mimeType)) {, +			return Flux.from(inputStream).map(value -> {, +				DataBuffer buffer = encodeValue(value, bufferFactory, elementType, hints);, +				buffer.write(new byte[]{'\n'});, +				return buffer;, +		}, +		ResolvableType listType = ResolvableType.forClassWithGenerics(List.class, elementType);, +		return Flux.from(inputStream).collectList().map(list -> encodeValue(list, bufferFactory, listType, hints)).flux();, +++ b/spring-web/src/main/java/org/springframework/http/MediaType.java, +	 * Public constant media type for {@code application/stream+json}., +	 * @since 5.0, +	 */, +	public final static MediaType APPLICATION_STREAM_JSON;, +, +	/**, +	 * A String equivalent of {@link MediaType#APPLICATION_STREAM_JSON}., +	 * @since 5.0, +	 */, +	public final static String APPLICATION_STREAM_JSON_VALUE = "application/stream+json";, +, +	/**, +		APPLICATION_STREAM_JSON = valueOf(APPLICATION_STREAM_JSON_VALUE);, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonEncoder.java, + * Copyright 2002-2017 the original author or authors., +import static org.springframework.http.MediaType.APPLICATION_STREAM_JSON;, +		else if (APPLICATION_STREAM_JSON.isCompatibleWith(mimeType)) {, +			return Flux.from(inputStream).map(value -> {, +				DataBuffer buffer = encodeValue(value, bufferFactory, elementType, hints);, +				buffer.write(new byte[]{'\n'});, +				return buffer;, +		}, +		ResolvableType listType = ResolvableType.forClassWithGenerics(List.class, elementType);, +		return Flux.from(inputStream).collectList().map(list -> encodeValue(list, bufferFactory, listType, hints)).flux();, +++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonEncoderTests.java, + * Copyright 2002-2017 the original author or authors., +import static org.springframework.http.MediaType.APPLICATION_STREAM_JSON;, +				.consumeNextWith(stringConsumer("[{\"foo\":\"foo\",\"bar\":\"bar\"},{\"foo\":\"foofoo\",\"bar\":\"barbar\"},{\"foo\":\"foofoofoo\",\"bar\":\"barbarbar\"}]")), +				.consumeNextWith(stringConsumer("[{\"type\":\"foo\"},{\"type\":\"bar\"}]")), +				.expectComplete(), +				.verify();, +	}, +, +	@Test, +	public void encodeAsStream() throws Exception {, +		Flux<Pojo> source = Flux.just(, +				new Pojo("foo", "bar"),, +				new Pojo("foofoo", "barbar"),, +				new Pojo("foofoofoo", "barbarbar"), +		);, +		ResolvableType type = ResolvableType.forClass(Pojo.class);, +		Flux<DataBuffer> output = this.encoder.encode(source, this.bufferFactory, type, APPLICATION_STREAM_JSON, Collections.emptyMap());, +, +		StepVerifier.create(output), +				.consumeNextWith(stringConsumer("{\"foo\":\"foo\",\"bar\":\"bar\"}\n")), +				.consumeNextWith(stringConsumer("{\"foo\":\"foofoo\",\"bar\":\"barbar\"}\n")), +				.consumeNextWith(stringConsumer("{\"foo\":\"foofoofoo\",\"bar\":\"barbarbar\"}\n")), +++ b/spring-web/src/main/java/org/springframework/http/MediaType.java, +	 * Public constant media type for {@code application/stream+json}., +	 * @since 5.0, +	 */, +	public final static MediaType APPLICATION_STREAM_JSON;, +, +	/**, +	 * A String equivalent of {@link MediaType#APPLICATION_STREAM_JSON}., +	 * @since 5.0, +	 */, +	public final static String APPLICATION_STREAM_JSON_VALUE = "application/stream+json";, +, +	/**]