[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java, +import org.springframework.web.bind.support.FlashStatus;, +import org.springframework.web.bind.support.SimpleFlashStatus;, +import org.springframework.web.method.annotation.FlashAttributesHandler;, +	private final Map<Class<?>, FlashAttributesHandler> flashAttributesHandlerCache =, +		new ConcurrentHashMap<Class<?>, FlashAttributesHandler>();, +, +	 * Whether the given handler type defines any handler-specific session attributes , +	 * via {@link SessionAttributes}., +		SessionAttributesHandler sessionAttrsHandler = null;, +			sessionAttrsHandler = this.sessionAttributesHandlerCache.get(handlerType);, +			if (sessionAttrsHandler == null) {, +				sessionAttrsHandler = new SessionAttributesHandler(handlerType, sessionAttributeStore);, +				this.sessionAttributesHandlerCache.put(handlerType, sessionAttrsHandler);, +		FlashAttributesHandler flashAttrsHandler = null;, +		synchronized(this.flashAttributesHandlerCache) {, +			flashAttrsHandler = this.flashAttributesHandlerCache.get(handlerType);, +			if (flashAttrsHandler == null) {, +				flashAttrsHandler = new FlashAttributesHandler(handlerType);, +				this.flashAttributesHandlerCache.put(handlerType, flashAttrsHandler);, +			}, +		}, +		return sessionAttrsHandler.hasSessionAttributes() || flashAttrsHandler.hasFlashAttributes();, +		FlashStatus flashStatus = new SimpleFlashStatus();, +		requestMethod.invokeAndHandle(webRequest, mavContainer, sessionStatus, flashStatus);, +		modelFactory.updateModel(webRequest, mavContainer, sessionStatus, flashStatus);, +		SessionAttributesHandler sessionAttrsHandler = sessionAttributesHandlerCache.get(handlerType);, +		FlashAttributesHandler flashAttrsHandler = flashAttributesHandlerCache.get(handlerType);, +		, +		return new ModelFactory(modelAttrMethods, binderFactory, sessionAttrsHandler, flashAttrsHandler);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java, +import org.springframework.web.bind.support.FlashStatus;, +import org.springframework.web.bind.support.SimpleFlashStatus;, +import org.springframework.web.method.annotation.FlashAttributesHandler;, +	private final Map<Class<?>, FlashAttributesHandler> flashAttributesHandlerCache =, +		new ConcurrentHashMap<Class<?>, FlashAttributesHandler>();, +, +	 * Whether the given handler type defines any handler-specific session attributes , +	 * via {@link SessionAttributes}., +		SessionAttributesHandler sessionAttrsHandler = null;, +			sessionAttrsHandler = this.sessionAttributesHandlerCache.get(handlerType);, +			if (sessionAttrsHandler == null) {, +				sessionAttrsHandler = new SessionAttributesHandler(handlerType, sessionAttributeStore);, +				this.sessionAttributesHandlerCache.put(handlerType, sessionAttrsHandler);, +		FlashAttributesHandler flashAttrsHandler = null;, +		synchronized(this.flashAttributesHandlerCache) {, +			flashAttrsHandler = this.flashAttributesHandlerCache.get(handlerType);, +			if (flashAttrsHandler == null) {, +				flashAttrsHandler = new FlashAttributesHandler(handlerType);, +				this.flashAttributesHandlerCache.put(handlerType, flashAttrsHandler);, +			}, +		}, +		return sessionAttrsHandler.hasSessionAttributes() || flashAttrsHandler.hasFlashAttributes();, +		FlashStatus flashStatus = new SimpleFlashStatus();, +		requestMethod.invokeAndHandle(webRequest, mavContainer, sessionStatus, flashStatus);, +		modelFactory.updateModel(webRequest, mavContainer, sessionStatus, flashStatus);, +		SessionAttributesHandler sessionAttrsHandler = sessionAttributesHandlerCache.get(handlerType);, +		FlashAttributesHandler flashAttrsHandler = flashAttributesHandlerCache.get(handlerType);, +		, +		return new ModelFactory(modelAttrMethods, binderFactory, sessionAttrsHandler, flashAttrsHandler);, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/AbstractServletHandlerMethodTests.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.servlet.mvc.method.annotation;, +, +import static junit.framework.Assert.assertNotNull;, +, +import javax.servlet.ServletException;, +, +import org.junit.After;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +import org.springframework.context.ApplicationContextInitializer;, +import org.springframework.mock.web.MockServletConfig;, +import org.springframework.web.context.WebApplicationContext;, +import org.springframework.web.context.support.GenericWebApplicationContext;, +import org.springframework.web.servlet.DispatcherServlet;, +import org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver;, +import org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver;, +, +/**, + * Base class for tests using on the DispatcherServlet and HandlerMethod infrastructure classes: , + * <ul>, + * 	<li>RequestMappingHandlerMapping , + * 	<li>RequestMappingHandlerAdapter , + * 	<li>ExceptionHandlerExceptionResolver, + * </ul>]