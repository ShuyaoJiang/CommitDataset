[+++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/AnnotationConfigApplicationContextTests.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.context.annotation;, +, +import static java.lang.String.format;, +, +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +import org.junit.Test;, +import static org.junit.matchers.JUnitMatchers.*;, +import static org.springframework.util.StringUtils.uncapitalize;, +, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.context.annotation6.ComponentForScanning;, +import org.springframework.context.annotation6.ConfigForScanning;, +import org.springframework.context.annotation6.Jsr330NamedForScanning;, +import org.springframework.util.StringUtils;, +, +/**, + * @author Chris Beams, + */, +public class AnnotationConfigApplicationContextTests {, +, +	@Test(expected=IllegalArgumentException.class), +	public void nullGetBeanParameterIsDisallowed() {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Config.class);, +		context.getBean((Class<?>)null);, +	}, +	, +	@Test, +	public void scanAndRefresh() {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		context.scan("org.springframework.context.annotation6");, +		context.refresh();, +		context.getBean(uncapitalize(ConfigForScanning.class.getSimpleName()));, +		context.getBean("testBean"); // contributed by ConfigForScanning, +		context.getBean(uncapitalize(ComponentForScanning.class.getSimpleName()));, +		context.getBean(uncapitalize(Jsr330NamedForScanning.class.getSimpleName()));, +	}, +, +	@Test, +	public void registerAndRefresh() {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		context.register(Config.class, NameConfig.class);, +		context.refresh();, +		context.getBean("testBean");, +		context.getBean("name");, +	}, +, +	@Test, +	public void getBeanByType() {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Config.class);, +		TestBean testBean = context.getBean(TestBean.class);, +		assertNotNull("getBean() should not return null", testBean);, +		assertThat(testBean.name, equalTo("foo"));, +	}, +, +	/**, +	 * Tests that Configuration classes are registered according to convention, +	 * @see org.springframework.beans.factory.support.DefaultBeanNameGenerator#generateBeanName, +	 */, +	@Test, +	public void defaultConfigClassBeanNameIsGeneratedProperly() {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Config.class);, +, +		// attempt to retrieve the instance by its generated bean name, +		Config configObject = (Config) context.getBean("annotationConfigApplicationContextTests.Config");, +		assertNotNull(configObject);, +	}, +, +	/**, +	 * Tests that specifying @Configuration(value="foo") results in registering, +	 * the configuration class with bean name 'foo'., +	 */, +	@Test, +	public void explicitConfigClassBeanNameIsRespected() {, +		AnnotationConfigApplicationContext context =, +			new AnnotationConfigApplicationContext(ConfigWithCustomName.class);, +, +		// attempt to retrieve the instance by its specified name, +		ConfigWithCustomName configObject =, +			(ConfigWithCustomName) context.getBean("customConfigBeanName");, +		assertNotNull(configObject);, +	}]