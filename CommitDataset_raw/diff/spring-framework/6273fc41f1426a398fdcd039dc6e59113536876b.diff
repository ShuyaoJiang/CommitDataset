[+++ /dev/null, +++ /dev/null, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractServerSockJsSession.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.sockjs.server;, +, +import java.io.EOFException;, +import java.io.IOException;, +import java.net.SocketException;, +import java.util.Date;, +import java.util.concurrent.ScheduledFuture;, +, +import org.springframework.sockjs.SockJsHandler;, +import org.springframework.sockjs.SockJsSession;, +import org.springframework.sockjs.SockJsSessionSupport;, +import org.springframework.util.Assert;, +, +, +/**, + * Provides partial implementations of {@link SockJsSession} methods to send messages,, + * including heartbeat messages and to manage session state., + *, + * @author Rossen Stoyanchev, + * @since 4.0, + */, +public abstract class AbstractServerSockJsSession extends SockJsSessionSupport {, +, +	private final SockJsConfiguration sockJsConfig;, +, +	private ScheduledFuture<?> heartbeatTask;, +, +, +	public AbstractServerSockJsSession(String sessionId, SockJsConfiguration sockJsConfig, SockJsHandler sockJsHandler) {, +		super(sessionId, sockJsHandler);, +		this.sockJsConfig = sockJsConfig;, +	}, +, +	protected SockJsConfiguration getSockJsConfig() {, +		return this.sockJsConfig;, +	}, +, +	public final synchronized void sendMessage(String message) throws IOException {, +		Assert.isTrue(!isClosed(), "Cannot send a message, session has been closed");, +		sendMessageInternal(message);, +	}, +, +	protected abstract void sendMessageInternal(String message) throws IOException;, +, +, +	@Override, +	public void connectionClosed() {, +		logger.debug("Session closed");, +		super.close();, +		cancelHeartbeat();, +	}, +, +	@Override, +	public final synchronized void close() {, +		if (!isClosed()) {, +			logger.debug("Closing session");, +			if (isActive()) {, +				// deliver messages "in flight" before sending close frame, +				try {, +					writeFrame(SockJsFrame.closeFrameGoAway());, +				}, +				catch (Exception e) {, +					// ignore, +				}, +			}, +			super.close();, +			cancelHeartbeat();, +			closeInternal();, +		}, +	}, +, +	protected abstract void closeInternal();, +, +	/**, +	 * For internal use within a TransportHandler and the (TransportHandler-specific), +	 * session sub-class. The frame is written only if the connection is active., +	 */, +	protected void writeFrame(SockJsFrame frame) throws IOException {, +		if (logger.isTraceEnabled()) {, +			logger.trace("Preparing to write " + frame);, +		}]