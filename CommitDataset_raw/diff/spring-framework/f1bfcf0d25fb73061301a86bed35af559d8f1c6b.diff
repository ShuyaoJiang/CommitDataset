[+++ b/org.springframework.test/src/main/java/org/springframework/test/context/TestContext.java, +				String msg = String.format(, +					"Test class [%s] has been configured with @ContextConfiguration's 'value' [%s] and 'locations' [%s] attributes. Only one declaration of resource locations is permitted per @ContextConfiguration annotation.",, +					declaringClass, ObjectUtils.nullSafeToString(valueLocations),, +					ObjectUtils.nullSafeToString(locations));, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/TestContext.java, +				String msg = String.format(, +					"Test class [%s] has been configured with @ContextConfiguration's 'value' [%s] and 'locations' [%s] attributes. Only one declaration of resource locations is permitted per @ContextConfiguration annotation.",, +					declaringClass, ObjectUtils.nullSafeToString(valueLocations),, +					ObjectUtils.nullSafeToString(locations));, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/TestContextManager.java, +import org.springframework.util.ObjectUtils;, +, +				Class<? extends TestExecutionListener>[] valueListenerClasses = testExecutionListeners.value();, +				Class<? extends TestExecutionListener>[] listenerClasses = testExecutionListeners.listeners();, +				if (!ObjectUtils.isEmpty(valueListenerClasses) && !ObjectUtils.isEmpty(listenerClasses)) {, +					String msg = String.format(, +						"Test class [%s] has been configured with @TestExecutionListeners' 'value' [%s] and 'listeners' [%s] attributes. Use one or the other, but not both.",, +						declaringClass, ObjectUtils.nullSafeToString(valueListenerClasses),, +						ObjectUtils.nullSafeToString(listenerClasses));, +					logger.error(msg);, +					throw new IllegalStateException(msg);, +				}, +				else if (!ObjectUtils.isEmpty(valueListenerClasses)) {, +					listenerClasses = valueListenerClasses;, +				}, +, +				if (listenerClasses != null) {, +					classesList.addAll(0, Arrays.<Class<? extends TestExecutionListener>> asList(listenerClasses));, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/TestContext.java, +				String msg = String.format(, +					"Test class [%s] has been configured with @ContextConfiguration's 'value' [%s] and 'locations' [%s] attributes. Only one declaration of resource locations is permitted per @ContextConfiguration annotation.",, +					declaringClass, ObjectUtils.nullSafeToString(valueLocations),, +					ObjectUtils.nullSafeToString(locations));, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/TestContextManager.java, +import org.springframework.util.ObjectUtils;, +, +				Class<? extends TestExecutionListener>[] valueListenerClasses = testExecutionListeners.value();, +				Class<? extends TestExecutionListener>[] listenerClasses = testExecutionListeners.listeners();, +				if (!ObjectUtils.isEmpty(valueListenerClasses) && !ObjectUtils.isEmpty(listenerClasses)) {, +					String msg = String.format(, +						"Test class [%s] has been configured with @TestExecutionListeners' 'value' [%s] and 'listeners' [%s] attributes. Use one or the other, but not both.",, +						declaringClass, ObjectUtils.nullSafeToString(valueListenerClasses),, +						ObjectUtils.nullSafeToString(listenerClasses));, +					logger.error(msg);, +					throw new IllegalStateException(msg);, +				}, +				else if (!ObjectUtils.isEmpty(valueListenerClasses)) {, +					listenerClasses = valueListenerClasses;, +				}, +, +				if (listenerClasses != null) {, +					classesList.addAll(0, Arrays.<Class<? extends TestExecutionListener>> asList(listenerClasses));, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/TestExecutionListeners.java, +	Class<? extends TestExecutionListener>[] listeners() default {};, +, +	/**, +	 * Alias for {@link #listeners() listeners}., +	 */, +	Class<? extends TestExecutionListener>[] value() default {};, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/TestContext.java, +				String msg = String.format(, +					"Test class [%s] has been configured with @ContextConfiguration's 'value' [%s] and 'locations' [%s] attributes. Only one declaration of resource locations is permitted per @ContextConfiguration annotation.",, +					declaringClass, ObjectUtils.nullSafeToString(valueLocations),, +					ObjectUtils.nullSafeToString(locations));, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/TestContextManager.java, +import org.springframework.util.ObjectUtils;, +, +				Class<? extends TestExecutionListener>[] valueListenerClasses = testExecutionListeners.value();, +				Class<? extends TestExecutionListener>[] listenerClasses = testExecutionListeners.listeners();, +				if (!ObjectUtils.isEmpty(valueListenerClasses) && !ObjectUtils.isEmpty(listenerClasses)) {, +					String msg = String.format(, +						"Test class [%s] has been configured with @TestExecutionListeners' 'value' [%s] and 'listeners' [%s] attributes. Use one or the other, but not both.",, +						declaringClass, ObjectUtils.nullSafeToString(valueListenerClasses),, +						ObjectUtils.nullSafeToString(listenerClasses));, +					logger.error(msg);, +					throw new IllegalStateException(msg);, +				}, +				else if (!ObjectUtils.isEmpty(valueListenerClasses)) {, +					listenerClasses = valueListenerClasses;, +				}, +, +				if (listenerClasses != null) {, +					classesList.addAll(0, Arrays.<Class<? extends TestExecutionListener>> asList(listenerClasses));, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/TestExecutionListeners.java, +	Class<? extends TestExecutionListener>[] listeners() default {};, +, +	/**, +	 * Alias for {@link #listeners() listeners}., +	 */, +	Class<? extends TestExecutionListener>[] value() default {};, +++ b/org.springframework.test/src/test/java/org/springframework/test/context/TestExecutionListenersTests.java, + * Copyright 2002-2009 the original author or authors., + * JUnit 4 based unit test for the {@link TestExecutionListeners, + * &#064;TestExecutionListeners} annotation, which verifies:, +		TestContextManager testContextManager = new TestContextManager(, +			NonInheritedDefaultListenersExampleTestCase.class);, +			"Verifying the number of registered TestExecutionListeners for InheritedDefaultListenersExampleTest.", 1,, +			testContextManager.getTestExecutionListeners().size());, +	@Test(expected = IllegalStateException.class)]