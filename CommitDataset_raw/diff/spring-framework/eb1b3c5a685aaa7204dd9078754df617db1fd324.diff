[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +		return isAutowireCandidate(beanName, descriptor, getAutowireCandidateResolver());, +	}, +, +	/**, +	 * Determine whether the specified bean definition qualifies as an autowire candidate,, +	 * to be injected into other beans which declare a dependency of matching type., +	 * @param beanName the name of the bean definition to check, +	 * @param descriptor the descriptor of the dependency to resolve, +	 * @param resolver the AutowireCandidateResolver to use for the actual resolution algorithm, +	 * @return whether the bean should be considered as autowire candidate, +	 */, +	protected boolean isAutowireCandidate(String beanName, DependencyDescriptor descriptor, AutowireCandidateResolver resolver), +			throws NoSuchBeanDefinitionException {, +, +			return isAutowireCandidate(beanName, getMergedLocalBeanDefinition(beanDefinitionName), descriptor, resolver);, +			return isAutowireCandidate(beanName, new RootBeanDefinition(getType(beanName)), descriptor, resolver);, +		}, +		else if (getParentBeanFactory() instanceof DefaultListableBeanFactory) {, +			// No bean definition found in this factory -> delegate to parent., +			return ((DefaultListableBeanFactory) getParentBeanFactory()).isAutowireCandidate(beanName, descriptor, resolver);, +			// If no DefaultListableBeanFactory, can't pass the resolver along., +	 * @param resolver the AutowireCandidateResolver to use for the actual resolution algorithm, +	protected boolean isAutowireCandidate(String beanName, RootBeanDefinition mbd,, +			DependencyDescriptor descriptor, AutowireCandidateResolver resolver) {, +, +		return resolver.isAutowireCandidate(, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +		return isAutowireCandidate(beanName, descriptor, getAutowireCandidateResolver());, +	}, +, +	/**, +	 * Determine whether the specified bean definition qualifies as an autowire candidate,, +	 * to be injected into other beans which declare a dependency of matching type., +	 * @param beanName the name of the bean definition to check, +	 * @param descriptor the descriptor of the dependency to resolve, +	 * @param resolver the AutowireCandidateResolver to use for the actual resolution algorithm, +	 * @return whether the bean should be considered as autowire candidate, +	 */, +	protected boolean isAutowireCandidate(String beanName, DependencyDescriptor descriptor, AutowireCandidateResolver resolver), +			throws NoSuchBeanDefinitionException {, +, +			return isAutowireCandidate(beanName, getMergedLocalBeanDefinition(beanDefinitionName), descriptor, resolver);, +			return isAutowireCandidate(beanName, new RootBeanDefinition(getType(beanName)), descriptor, resolver);, +		}, +		else if (getParentBeanFactory() instanceof DefaultListableBeanFactory) {, +			// No bean definition found in this factory -> delegate to parent., +			return ((DefaultListableBeanFactory) getParentBeanFactory()).isAutowireCandidate(beanName, descriptor, resolver);, +			// If no DefaultListableBeanFactory, can't pass the resolver along., +	 * @param resolver the AutowireCandidateResolver to use for the actual resolution algorithm, +	protected boolean isAutowireCandidate(String beanName, RootBeanDefinition mbd,, +			DependencyDescriptor descriptor, AutowireCandidateResolver resolver) {, +, +		return resolver.isAutowireCandidate(, +++ b/spring-context/src/test/java/org/springframework/beans/factory/xml/QualifierAnnotationTests.java, +import org.springframework.beans.factory.support.AutowireCandidateQualifier;, +import org.springframework.beans.factory.support.GenericBeanDefinition;, +, +import static java.lang.String.format;, +import static org.junit.Assert.*;, +	public void testQualifiedByParentValue() {, +		StaticApplicationContext parent = new StaticApplicationContext();, +		GenericBeanDefinition parentLarry = new GenericBeanDefinition();, +		parentLarry.setBeanClass(Person.class);, +		parentLarry.getPropertyValues().add("name", "ParentLarry");, +		parentLarry.addQualifier(new AutowireCandidateQualifier(Qualifier.class, "parentLarry"));, +		parent.registerBeanDefinition("someLarry", parentLarry);, +		GenericBeanDefinition otherLarry = new GenericBeanDefinition();, +		otherLarry.setBeanClass(Person.class);, +		otherLarry.getPropertyValues().add("name", "OtherLarry");, +		otherLarry.addQualifier(new AutowireCandidateQualifier(Qualifier.class, "otherLarry"));, +		parent.registerBeanDefinition("someOtherLarry", otherLarry);, +		parent.refresh();, +, +		StaticApplicationContext context = new StaticApplicationContext(parent);, +		BeanDefinitionReader reader = new XmlBeanDefinitionReader(context);, +		reader.loadBeanDefinitions(CONFIG_LOCATION);, +		context.registerSingleton("testBean", QualifiedByParentValueTestBean.class);, +		context.refresh();, +		QualifiedByParentValueTestBean testBean = (QualifiedByParentValueTestBean) context.getBean("testBean");, +		Person person = testBean.getLarry();, +		assertEquals("ParentLarry", person.getName());, +	}, +, +	@Test, +	private static class QualifiedByParentValueTestBean {, +, +		@Autowired @Qualifier("parentLarry"), +		private Person larry;, +, +		public Person getLarry() {, +			return larry;, +		}, +	}, +, +]