[+++ b/spring-aop/src/main/java/org/aopalliance/aop/package-info.java, +/**, + * The core AOP Alliance advice marker., + */, +package org.aopalliance.aop;, +++ b/spring-aop/src/main/java/org/aopalliance/aop/package-info.java, +/**, + * The core AOP Alliance advice marker., + */, +package org.aopalliance.aop;, +++ b/spring-aop/src/main/java/org/aopalliance/intercept/package-info.java, +/**, + * The AOP Alliance reflective interception abstraction., + */, +package org.aopalliance.intercept;, +++ b/spring-aop/src/main/java/org/aopalliance/aop/package-info.java, +/**, + * The core AOP Alliance advice marker., + */, +package org.aopalliance.aop;, +++ b/spring-aop/src/main/java/org/aopalliance/intercept/package-info.java, +/**, + * The AOP Alliance reflective interception abstraction., + */, +package org.aopalliance.intercept;, +++ b/spring-aop/src/main/java/org/aopalliance/package-info.java, +/**, + * Spring's variant of the AOP Alliance interfaces., + */, +package org.aopalliance;, +++ b/spring-aop/src/main/java/org/aopalliance/aop/package-info.java, +/**, + * The core AOP Alliance advice marker., + */, +package org.aopalliance.aop;, +++ b/spring-aop/src/main/java/org/aopalliance/intercept/package-info.java, +/**, + * The AOP Alliance reflective interception abstraction., + */, +package org.aopalliance.intercept;, +++ b/spring-aop/src/main/java/org/aopalliance/package-info.java, +/**, + * Spring's variant of the AOP Alliance interfaces., + */, +package org.aopalliance;, +++ b/spring-context/src/main/java/org/springframework/cache/config/CacheNamespaceHandler.java, + * Copyright 2002-2017 the original author or authors., +, +		return (element.hasAttribute(CacheNamespaceHandler.CACHE_MANAGER_ATTRIBUTE) ?, +				element.getAttribute(CacheNamespaceHandler.CACHE_MANAGER_ATTRIBUTE) :, +				CacheNamespaceHandler.DEFAULT_CACHE_MANAGER_BEAN_NAME);, +, +, +++ b/spring-aop/src/main/java/org/aopalliance/aop/package-info.java, +/**, + * The core AOP Alliance advice marker., + */, +package org.aopalliance.aop;, +++ b/spring-aop/src/main/java/org/aopalliance/intercept/package-info.java, +/**, + * The AOP Alliance reflective interception abstraction., + */, +package org.aopalliance.intercept;, +++ b/spring-aop/src/main/java/org/aopalliance/package-info.java, +/**, + * Spring's variant of the AOP Alliance interfaces., + */, +package org.aopalliance;, +++ b/spring-context/src/main/java/org/springframework/cache/config/CacheNamespaceHandler.java, + * Copyright 2002-2017 the original author or authors., +, +		return (element.hasAttribute(CacheNamespaceHandler.CACHE_MANAGER_ATTRIBUTE) ?, +				element.getAttribute(CacheNamespaceHandler.CACHE_MANAGER_ATTRIBUTE) :, +				CacheNamespaceHandler.DEFAULT_CACHE_MANAGER_BEAN_NAME);, +, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/Configuration.java, +++ b/spring-aop/src/main/java/org/aopalliance/aop/package-info.java, +/**, + * The core AOP Alliance advice marker., + */, +package org.aopalliance.aop;, +++ b/spring-aop/src/main/java/org/aopalliance/intercept/package-info.java, +/**, + * The AOP Alliance reflective interception abstraction., + */, +package org.aopalliance.intercept;, +++ b/spring-aop/src/main/java/org/aopalliance/package-info.java, +/**, + * Spring's variant of the AOP Alliance interfaces., + */, +package org.aopalliance;, +++ b/spring-context/src/main/java/org/springframework/cache/config/CacheNamespaceHandler.java, + * Copyright 2002-2017 the original author or authors., +, +		return (element.hasAttribute(CacheNamespaceHandler.CACHE_MANAGER_ATTRIBUTE) ?, +				element.getAttribute(CacheNamespaceHandler.CACHE_MANAGER_ATTRIBUTE) :, +				CacheNamespaceHandler.DEFAULT_CACHE_MANAGER_BEAN_NAME);, +, +]