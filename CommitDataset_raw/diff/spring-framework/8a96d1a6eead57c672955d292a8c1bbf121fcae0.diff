[+++ b/spring-context/src/main/java/org/springframework/cache/CacheManager.java, + * Spring's central cache manager SPI., + * Allows for retrieving named {@link Cache} regions., +	 * @param name the cache identifier (must not be {@code null}), +	 * @return the associated cache, or {@code null} if none found, +	 * Return a collection of the cache names known by this manager., +	 * @return the names of all caches known by the cache manager, +++ b/spring-context/src/main/java/org/springframework/cache/CacheManager.java, + * Spring's central cache manager SPI., + * Allows for retrieving named {@link Cache} regions., +	 * @param name the cache identifier (must not be {@code null}), +	 * @return the associated cache, or {@code null} if none found, +	 * Return a collection of the cache names known by this manager., +	 * @return the names of all caches known by the cache manager, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ExceptionHandlerMethodResolver.java, + * Discovers {@linkplain ExceptionHandler @ExceptionHandler} methods in a given class,, + * including all of its superclasses, and helps to resolve a given {@link Exception}, + * to the exception types supported by a given {@link Method}., +	/**, +	 * A filter for selecting {@code @ExceptionHandler} methods., +	 */, +	public static final MethodFilter EXCEPTION_HANDLER_METHODS = new MethodFilter() {, +	/**, +	 * Arbitrary {@link Method} reference, indicating no method found in the cache., +	 */, +	 * Find a {@link Method} to handle the given exception., +	 * @return a Method to handle the exception, or {@code null} if none found, +	 * Find a {@link Method} to handle the given exception type. This can be, +	 * useful if an {@link Exception} instance is not available (e.g. for tools)., +	 * @return a Method to handle the exception, or {@code null} if none found, +			this.exceptionLookupCache.put(exceptionType, (method != null ? method : NO_METHOD_FOUND));, +			return this.mappedMethods.get(matches.get(0));, +++ b/spring-context/src/main/java/org/springframework/cache/CacheManager.java, + * Spring's central cache manager SPI., + * Allows for retrieving named {@link Cache} regions., +	 * @param name the cache identifier (must not be {@code null}), +	 * @return the associated cache, or {@code null} if none found, +	 * Return a collection of the cache names known by this manager., +	 * @return the names of all caches known by the cache manager, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ExceptionHandlerMethodResolver.java, + * Discovers {@linkplain ExceptionHandler @ExceptionHandler} methods in a given class,, + * including all of its superclasses, and helps to resolve a given {@link Exception}, + * to the exception types supported by a given {@link Method}., +	/**, +	 * A filter for selecting {@code @ExceptionHandler} methods., +	 */, +	public static final MethodFilter EXCEPTION_HANDLER_METHODS = new MethodFilter() {, +	/**, +	 * Arbitrary {@link Method} reference, indicating no method found in the cache., +	 */, +	 * Find a {@link Method} to handle the given exception., +	 * @return a Method to handle the exception, or {@code null} if none found, +	 * Find a {@link Method} to handle the given exception type. This can be, +	 * useful if an {@link Exception} instance is not available (e.g. for tools)., +	 * @return a Method to handle the exception, or {@code null} if none found, +			this.exceptionLookupCache.put(exceptionType, (method != null ? method : NO_METHOD_FOUND));, +			return this.mappedMethods.get(matches.get(0));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ProducesRequestCondition.java, +		catch (HttpMediaTypeNotAcceptableException ex) {, +			throw new IllegalStateException("Cannot compare without having any requested media types", ex);, +++ b/spring-context/src/main/java/org/springframework/cache/CacheManager.java, + * Spring's central cache manager SPI., + * Allows for retrieving named {@link Cache} regions., +	 * @param name the cache identifier (must not be {@code null}), +	 * @return the associated cache, or {@code null} if none found, +	 * Return a collection of the cache names known by this manager., +	 * @return the names of all caches known by the cache manager, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ExceptionHandlerMethodResolver.java, + * Discovers {@linkplain ExceptionHandler @ExceptionHandler} methods in a given class,, + * including all of its superclasses, and helps to resolve a given {@link Exception}, + * to the exception types supported by a given {@link Method}., +	/**, +	 * A filter for selecting {@code @ExceptionHandler} methods., +	 */, +	public static final MethodFilter EXCEPTION_HANDLER_METHODS = new MethodFilter() {, +	/**, +	 * Arbitrary {@link Method} reference, indicating no method found in the cache., +	 */, +	 * Find a {@link Method} to handle the given exception., +	 * @return a Method to handle the exception, or {@code null} if none found, +	 * Find a {@link Method} to handle the given exception type. This can be, +	 * useful if an {@link Exception} instance is not available (e.g. for tools)., +	 * @return a Method to handle the exception, or {@code null} if none found, +			this.exceptionLookupCache.put(exceptionType, (method != null ? method : NO_METHOD_FOUND));, +			return this.mappedMethods.get(matches.get(0));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ProducesRequestCondition.java, +		catch (HttpMediaTypeNotAcceptableException ex) {, +			throw new IllegalStateException("Cannot compare without having any requested media types", ex);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/RequestMethodsRequestCondition.java, +		catch (IllegalArgumentException ex) {, +++ b/spring-context/src/main/java/org/springframework/cache/CacheManager.java, + * Spring's central cache manager SPI., + * Allows for retrieving named {@link Cache} regions., +	 * @param name the cache identifier (must not be {@code null}), +	 * @return the associated cache, or {@code null} if none found, +	 * Return a collection of the cache names known by this manager., +	 * @return the names of all caches known by the cache manager, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ExceptionHandlerMethodResolver.java, + * Discovers {@linkplain ExceptionHandler @ExceptionHandler} methods in a given class,, + * including all of its superclasses, and helps to resolve a given {@link Exception}]