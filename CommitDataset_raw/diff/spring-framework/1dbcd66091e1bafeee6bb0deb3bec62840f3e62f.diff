[+++ b/src/docs/asciidoc/web/webflux.adoc, +See <<webflux-ann-typeconversion>> and <<webflux-ann-initbinder>>., +method argument type. See <<webflux-ann-requestparam>>., +type. See <<webflux-ann-requestheader>>., +, +|`@CookieValue`, +|For access to cookies. Cookies values are converted to the declared method argument, +type. See <<webflux-ann-cookievalue>>., +[[webflux-ann-typeconversion]], +==== Type Conversion, +[.small]#<<web.adoc#mvc-ann-typeconversion,Same in Spring MVC>>#, +, +Some annotated controller method arguments that represent String-based request input -- e.g., +`@RequestParam`, `@RequestHeader`, `@PathVariable`, `@MatrixVariable`, and `@CookieValue`,, +may require type conversion if the argument is declared as something other than `String`., +, +For such cases type conversion is automatically applied based on the configured converters., +By default simple types such as `int`, `long`, `Date`, etc. are supported. Type conversion, +can be customized through a `WebDataBinder`, see <<mvc-ann-initbinder>>, or by registering, +`Formatters` with the `FormattingConversionService`, see, +<<core.adoc#format, Spring Field Formatting>>., +, +, +[[webflux-ann-requestparam]], +==== @RequestParam, +[.small]#<<web.adoc#mvc-ann-requestparam,Same in Spring MVC>>#, +, +Use the `@RequestParam` annotation to bind Servlet request parameters (i.e. query, +parameters or form data) to a method argument in a controller., +, +The following code snippet shows the usage:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Controller, +	@RequestMapping("/pets"), +	public class EditPetForm {, +, +		// ..., +, +		@GetMapping, +		public String setupForm(**@RequestParam("petId") int petId**, Model model) {, +			Pet pet = this.clinic.loadPet(petId);, +			model.addAttribute("pet", pet);, +			return "petForm";, +		}, +, +		// ..., +, +	}, +----, +, +Parameters using this annotation are required by default, but you can specify that a, +parameter is optional by setting ``@RequestParam``'s `required` flag to `false` or, +declare the argument with a `java.util.Optional` wrapper., +, +Type conversion is applied automatically if the target method parameter type is not, +`String`. See <<mvc-ann-typeconversion>>., +, +When an `@RequestParam` annotation is declared as `Map<String, String>` or, +`MultiValueMap<String, String>` argument, the map is populated with all request, +parameters., +, +, +[[webflux-ann-requestheader]], +==== @RequestHeader, +[.small]#<<web.adoc#mvc-ann-requestheader,Same in Spring MVC>>#, +, +Use the `@RequestHeader` annotation to bind a request header to a method argument in a, +controller., +, +Given request with headers:, +, +[literal], +[subs="verbatim,quotes"], +----, +Host                    localhost:8080, +Accept                  text/html,application/xhtml+xml,application/xml;q=0.9, +Accept-Language         fr,en-gb;q=0.7,en;q=0.3, +Accept-Encoding         gzip,deflate, +Accept-Charset          ISO-8859-1,utf-8;q=0.7,*;q=0.7, +Keep-Alive              300, +----, +, +The following gets the value of the `Accept-Encoding` and `Keep-Alive` headers:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@GetMapping("/demo"), +	public void handle(, +			**@RequestHeader("Accept-Encoding")** String encoding,, +			**@RequestHeader("Keep-Alive")** long keepAlive) {, +		//..., +	}, +----, +, +Type conversion is applied automatically if the target method parameter type is not, +`String`. See <<mvc-ann-typeconversion>>.]