[+++ b/spring-context/src/main/java/org/springframework/context/support/GenericApplicationContext.java, + * Copyright 2002-2015 the original author or authors., +import java.util.concurrent.atomic.AtomicBoolean;, +import org.springframework.beans.factory.config.AutowireCapableBeanFactory;, +	private final AtomicBoolean refreshed = new AtomicBoolean();, +		if (!this.refreshed.compareAndSet(false, true)) {, +	@Override, +	public AutowireCapableBeanFactory getAutowireCapableBeanFactory() throws IllegalStateException {, +		assertBeanFactoryActive();, +		return this.beanFactory;, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/support/GenericApplicationContext.java, + * Copyright 2002-2015 the original author or authors., +import java.util.concurrent.atomic.AtomicBoolean;, +import org.springframework.beans.factory.config.AutowireCapableBeanFactory;, +	private final AtomicBoolean refreshed = new AtomicBoolean();, +		if (!this.refreshed.compareAndSet(false, true)) {, +	@Override, +	public AutowireCapableBeanFactory getAutowireCapableBeanFactory() throws IllegalStateException {, +		assertBeanFactoryActive();, +		return this.beanFactory;, +	}, +, +++ b/spring-context/src/test/java/org/springframework/context/support/GenericApplicationContextTests.java, + * Copyright 2002-2015 the original author or authors., +	@Test, +	public void accessAfterClosing() {, +		GenericApplicationContext ac = new GenericApplicationContext();, +		ac.registerBeanDefinition("testBean", new RootBeanDefinition(String.class));, +		ac.refresh();, +, +		assertSame(ac.getBean("testBean"), ac.getBean(String.class));, +		assertSame(ac.getAutowireCapableBeanFactory().getBean("testBean"),, +				ac.getAutowireCapableBeanFactory().getBean(String.class));, +, +		ac.close();, +, +		try {, +			assertSame(ac.getBean("testBean"), ac.getBean(String.class));, +			fail("Should have thrown IllegalStateException");, +		}, +		catch (IllegalStateException ex) {, +			// expected, +		}, +, +		try {, +			assertSame(ac.getAutowireCapableBeanFactory().getBean("testBean"),, +					ac.getAutowireCapableBeanFactory().getBean(String.class));, +			fail("Should have thrown IllegalStateException");, +		}, +		catch (IllegalStateException ex) {, +			// expected, +		}, +	}, +]