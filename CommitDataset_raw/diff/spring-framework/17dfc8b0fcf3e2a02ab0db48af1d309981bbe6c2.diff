[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +			Set<Constructor> ambiguousConstructors = null;, +					ambiguousConstructors = null;, +				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {, +					if (ambiguousConstructors == null) {, +						ambiguousConstructors = new LinkedHashSet<Constructor>();, +						ambiguousConstructors.add(constructorToUse);, +					}, +					ambiguousConstructors.add(candidate);, +			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {, +				throw new BeanCreationException(mbd.getResourceDescription(), beanName,, +						"Ambiguous constructor matches found in bean '" + beanName + "' " +, +						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +, +						ambiguousConstructors);, +			}, +			ConstructorArgumentValues resolvedValues = null;, +			Set<Method> 	ambiguousFactoryMethods = null;, +							ambiguousFactoryMethods = null;, +					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight) {, +						if (	ambiguousFactoryMethods == null) {, +								ambiguousFactoryMethods = new LinkedHashSet<Method>();, +								ambiguousFactoryMethods.add(factoryMethodToUse);, +						}, +							ambiguousFactoryMethods.add(candidate);, +			else if (void.class.equals(factoryMethodToUse.getReturnType())) {, +			else if (ambiguousFactoryMethods != null && !mbd.isLenientConstructorResolution()) {, +				throw new BeanCreationException(mbd.getResourceDescription(), beanName,, +						"Ambiguous factory method matches found in bean '" + beanName + "' " +, +						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +, +						ambiguousFactoryMethods);, +			}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +			Set<Constructor> ambiguousConstructors = null;, +					ambiguousConstructors = null;, +				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {, +					if (ambiguousConstructors == null) {, +						ambiguousConstructors = new LinkedHashSet<Constructor>();, +						ambiguousConstructors.add(constructorToUse);, +					}, +					ambiguousConstructors.add(candidate);, +			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {, +				throw new BeanCreationException(mbd.getResourceDescription(), beanName,, +						"Ambiguous constructor matches found in bean '" + beanName + "' " +, +						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +, +						ambiguousConstructors);, +			}, +			ConstructorArgumentValues resolvedValues = null;, +			Set<Method> 	ambiguousFactoryMethods = null;, +							ambiguousFactoryMethods = null;, +					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight) {, +						if (	ambiguousFactoryMethods == null) {, +								ambiguousFactoryMethods = new LinkedHashSet<Method>();, +								ambiguousFactoryMethods.add(factoryMethodToUse);, +						}, +							ambiguousFactoryMethods.add(candidate);, +			else if (void.class.equals(factoryMethodToUse.getReturnType())) {, +			else if (ambiguousFactoryMethods != null && !mbd.isLenientConstructorResolution()) {, +				throw new BeanCreationException(mbd.getResourceDescription(), beanName,, +						"Ambiguous factory method matches found in bean '" + beanName + "' " +, +						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +, +						ambiguousFactoryMethods);, +			}, +++ b/org.springframework.context/src/test/java/org/springframework/beans/factory/xml/XmlBeanFactoryTests-constructorArg.xml, +	<bean id="stringConstructor" class="org.springframework.beans.factory.xml.XmlBeanFactoryTests$StringConstructorTestBean" scope="prototype">, +		<constructor-arg value="test"/>, +	</bean>, +, +	<bean id="constructorArray" class="org.springframework.beans.factory.xml.XmlBeanFactoryTests$ConstructorArrayTestBean" scope="prototype">, +	<bean id="indexedConstructorArray" class="org.springframework.beans.factory.xml.XmlBeanFactoryTests$ConstructorArrayTestBean" scope="prototype">, +	<bean id="constructorArrayNoType" class="org.springframework.beans.factory.xml.XmlBeanFactoryTests$ConstructorArrayTestBean" scope="prototype">, +		<constructor-arg>, +			<array value-type="java.lang.String"/>, +		</constructor-arg>, +	</bean>, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +			Set<Constructor> ambiguousConstructors = null;, +					ambiguousConstructors = null;, +				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {, +					if (ambiguousConstructors == null) {, +						ambiguousConstructors = new LinkedHashSet<Constructor>();, +						ambiguousConstructors.add(constructorToUse);, +					}, +					ambiguousConstructors.add(candidate);, +			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {, +				throw new BeanCreationException(mbd.getResourceDescription(), beanName,, +						"Ambiguous constructor matches found in bean '" + beanName + "' " +, +						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +, +						ambiguousConstructors);, +			}, +			ConstructorArgumentValues resolvedValues = null;, +			Set<Method> 	ambiguousFactoryMethods = null;, +							ambiguousFactoryMethods = null;, +					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight) {, +						if (	ambiguousFactoryMethods == null) {, +								ambiguousFactoryMethods = new LinkedHashSet<Method>();, +								ambiguousFactoryMethods.add(factoryMethodToUse);, +						}, +							ambiguousFactoryMethods.add(candidate);, +			else if (void.class.equals(factoryMethodToUse.getReturnType())) {]