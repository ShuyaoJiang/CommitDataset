[+++ b/gradle/docs.gradle, +	externalDocumentationLink {, +		url = new URL("https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/"), +	}, +++ b/gradle/docs.gradle, +	externalDocumentationLink {, +		url = new URL("https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/"), +	}, +++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/CoRouterFunctionDsl.kt, + * Allow to create easily a WebFlux.fn [RouterFunction] with a [Coroutines router Kotlin DSL][CoRouterFunctionDsl]., + *, + * Example:, + *, + * ```, + * @Configuration, + * class RouterConfiguration {, + *, + * 	@Bean, + * 	fun mainRouter(userHandler: UserHandler) = coRouter {, + * 		accept(TEXT_HTML).nest {, + * 			(GET("/user/") or GET("/users/")).invoke(userHandler::findAllView), + * 			GET("/users/{login}", userHandler::findViewById), + * 		}, + * 		accept(APPLICATION_JSON).nest {, + * 			(GET("/api/user/") or GET("/api/users/")).invoke(userHandler::findAll), + * 			POST("/api/users/", userHandler::create), + * 		}, + * 	}, + *, + * }, + * ```, + * @see router, + * Provide a WebFlux.fn [RouterFunction] Coroutines Kotlin DSL created by [`coRouter { }`][coRouter] in order to be able to write idiomatic Kotlin code., +++ b/gradle/docs.gradle, +	externalDocumentationLink {, +		url = new URL("https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/"), +	}, +++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/CoRouterFunctionDsl.kt, + * Allow to create easily a WebFlux.fn [RouterFunction] with a [Coroutines router Kotlin DSL][CoRouterFunctionDsl]., + *, + * Example:, + *, + * ```, + * @Configuration, + * class RouterConfiguration {, + *, + * 	@Bean, + * 	fun mainRouter(userHandler: UserHandler) = coRouter {, + * 		accept(TEXT_HTML).nest {, + * 			(GET("/user/") or GET("/users/")).invoke(userHandler::findAllView), + * 			GET("/users/{login}", userHandler::findViewById), + * 		}, + * 		accept(APPLICATION_JSON).nest {, + * 			(GET("/api/user/") or GET("/api/users/")).invoke(userHandler::findAll), + * 			POST("/api/users/", userHandler::create), + * 		}, + * 	}, + *, + * }, + * ```, + * @see router, + * Provide a WebFlux.fn [RouterFunction] Coroutines Kotlin DSL created by [`coRouter { }`][coRouter] in order to be able to write idiomatic Kotlin code., +++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/RouterFunctionDsl.kt, + * Allow to create easily a WebFlux.fn [RouterFunction] with a [Reactive router Kotlin DSL][RouterFunctionDsl]., + * class RouterConfiguration {, + * 	fun mainRouter(userHandler: UserHandler) = router {, + * @see coRouter, + * Provide a WebFlux.fn [RouterFunction] Reactive Kotlin DSL created by [`router { }`][router] in order to be able to write idiomatic Kotlin code., +++ b/gradle/docs.gradle, +	externalDocumentationLink {, +		url = new URL("https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/"), +	}, +++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/CoRouterFunctionDsl.kt, + * Allow to create easily a WebFlux.fn [RouterFunction] with a [Coroutines router Kotlin DSL][CoRouterFunctionDsl]., + *, + * Example:, + *, + * ```, + * @Configuration, + * class RouterConfiguration {, + *, + * 	@Bean, + * 	fun mainRouter(userHandler: UserHandler) = coRouter {, + * 		accept(TEXT_HTML).nest {, + * 			(GET("/user/") or GET("/users/")).invoke(userHandler::findAllView), + * 			GET("/users/{login}", userHandler::findViewById), + * 		}, + * 		accept(APPLICATION_JSON).nest {, + * 			(GET("/api/user/") or GET("/api/users/")).invoke(userHandler::findAll), + * 			POST("/api/users/", userHandler::create), + * 		}, + * 	}, + *, + * }, + * ```, + * @see router, + * Provide a WebFlux.fn [RouterFunction] Coroutines Kotlin DSL created by [`coRouter { }`][coRouter] in order to be able to write idiomatic Kotlin code., +++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/RouterFunctionDsl.kt, + * Allow to create easily a WebFlux.fn [RouterFunction] with a [Reactive router Kotlin DSL][RouterFunctionDsl]., + * class RouterConfiguration {]