[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +				}, +				else {, +	 * For use in mathematical operators, handles converting from a (possibly boxed), +	 * number on the stack to a primitive numeric type., +	 * <p>For example, from a Integer to a double, just need to call 'Number.doubleValue()', +	 * but from an int to a double, need to use the bytecode 'i2d'., +	public static void insertNumericUnboxOrPrimitiveTypeCoercion(, +			MethodVisitor mv, String stackDescriptor, char targetDescriptor) {, +, +			CodeFlow.insertUnboxNumberInsns(mv, targetDescriptor, stackDescriptor);, +		}, +		else {, +			CodeFlow.insertAnyNecessaryTypeConversionBytecodes(mv, targetDescriptor, stackDescriptor);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +				}, +				else {, +	 * For use in mathematical operators, handles converting from a (possibly boxed), +	 * number on the stack to a primitive numeric type., +	 * <p>For example, from a Integer to a double, just need to call 'Number.doubleValue()', +	 * but from an int to a double, need to use the bytecode 'i2d'., +	public static void insertNumericUnboxOrPrimitiveTypeCoercion(, +			MethodVisitor mv, String stackDescriptor, char targetDescriptor) {, +, +			CodeFlow.insertUnboxNumberInsns(mv, targetDescriptor, stackDescriptor);, +		}, +		else {, +			CodeFlow.insertAnyNecessaryTypeConversionBytecodes(mv, targetDescriptor, stackDescriptor);, +++ b/spring-test/src/main/java/org/springframework/test/util/ReflectionTestUtils.java, +		Field field = ReflectionUtils.findField(targetClass, name, type);, +					"Could not find field '%s' of type [%s] on target object [%s] or target class [%s]", name, type,, +					"Setting field '%s' of type [%s] on target object [%s] or target class [%s] to value [%s]", name, type,, +	 * @see #getField(Object, String), +	 * @since 4.2, +	 * @see ReflectionUtils#getField(Field, Object), +		Field field = ReflectionUtils.findField(targetClass, name);, +				String.format("Could not find field '%s' on target object [%s] or target class [%s]", name,, +			logger.debug(String.format("Getting field '%s' from target object [%s] or target class [%s]", name,, +, +		if (method == null) {, +			throw new IllegalArgumentException("Could not find setter method '" + setterMethodName +, +					"' on target [" + target + "] with parameter type [" + type + "]");, +		}, +			logger.debug("Invoking setter method '" + setterMethodName + "' on target [" + target + "]");, +		ReflectionUtils.invokeMethod(method, target, value);, +		if (method == null) {, +			throw new IllegalArgumentException("Could not find getter method '" + getterMethodName +, +					"' on target [" + target + "]");, +		}, +			logger.debug("Invoking getter method '" + getterMethodName + "' on target [" + target + "]");, +				logger.debug("Invoking method '" + name + "' on target [" + target + "] with arguments [" +, +						ObjectUtils.nullSafeToString(args) + "]");, +		catch (Exception ex) {, +			ReflectionUtils.handleReflectionException(ex);, +	}, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +				}, +				else {, +	 * For use in mathematical operators, handles converting from a (possibly boxed), +	 * number on the stack to a primitive numeric type., +	 * <p>For example, from a Integer to a double, just need to call 'Number.doubleValue()', +	 * but from an int to a double, need to use the bytecode 'i2d'., +	public static void insertNumericUnboxOrPrimitiveTypeCoercion(, +			MethodVisitor mv, String stackDescriptor, char targetDescriptor) {, +, +			CodeFlow.insertUnboxNumberInsns(mv, targetDescriptor, stackDescriptor);, +		}, +		else {, +			CodeFlow.insertAnyNecessaryTypeConversionBytecodes(mv, targetDescriptor, stackDescriptor);, +++ b/spring-test/src/main/java/org/springframework/test/util/ReflectionTestUtils.java, +		Field field = ReflectionUtils.findField(targetClass, name, type);, +					"Could not find field '%s' of type [%s] on target object [%s] or target class [%s]", name, type,, +					"Setting field '%s' of type [%s] on target object [%s] or target class [%s] to value [%s]", name, type,, +	 * @see #getField(Object, String), +	 * @since 4.2, +	 * @see ReflectionUtils#getField(Field, Object), +		Field field = ReflectionUtils.findField(targetClass, name);, +				String.format("Could not find field '%s' on target object [%s] or target class [%s]", name,, +			logger.debug(String.format("Getting field '%s' from target object [%s] or target class [%s]", name,, +, +		if (method == null) {, +			throw new IllegalArgumentException("Could not find setter method '" + setterMethodName +, +					"' on target [" + target + "] with parameter type [" + type + "]");, +		}, +			logger.debug("Invoking setter method '" + setterMethodName + "' on target [" + target + "]");, +		ReflectionUtils.invokeMethod(method, target, value);, +		if (method == null) {, +			throw new IllegalArgumentException("Could not find getter method '" + getterMethodName +, +					"' on target [" + target + "]");, +		}, +			logger.debug("Invoking getter method '" + getterMethodName + "' on target [" + target + "]");, +				logger.debug("Invoking method '" + name + "' on target [" + target + "] with arguments [" +, +						ObjectUtils.nullSafeToString(args) + "]");, +		catch (Exception ex) {, +			ReflectionUtils.handleReflectionException(ex);, +	}, +++ b/spring-test/src/test/java/org/springframework/test/util/ReflectionTestUtilsTests.java, +, +, +		exception.expectMessage(startsWith("Could not find field 'bogus'"));]