[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/PathResourceResolver.java, + * Copyright 2002-2018 the original author or authors., +import java.io.UnsupportedEncodingException;, +		return (resourcePath.startsWith(locationPath) && !isInvalidEncodedPath(resourcePath));, +	private boolean isInvalidEncodedPath(String resourcePath) {, +			try {, +				String decodedPath = URLDecoder.decode(resourcePath, "UTF-8");, +				return (decodedPath.contains("../") || decodedPath.contains("..\\"));, +			}, +			catch (UnsupportedEncodingException ex) {, +				// Should never happen..., +			}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/PathResourceResolver.java, + * Copyright 2002-2018 the original author or authors., +import java.io.UnsupportedEncodingException;, +		return (resourcePath.startsWith(locationPath) && !isInvalidEncodedPath(resourcePath));, +	private boolean isInvalidEncodedPath(String resourcePath) {, +			try {, +				String decodedPath = URLDecoder.decode(resourcePath, "UTF-8");, +				return (decodedPath.contains("../") || decodedPath.contains("..\\"));, +			}, +			catch (UnsupportedEncodingException ex) {, +				// Should never happen..., +			}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/ResourceWebHandler.java, +, +		if (isInvalidEncodedPath(path)) {, +				logger.trace("Ignoring invalid resource path with escape sequences [" + path + "]");, +	 * Check whether the given path contains invalid escape sequences., +	 * @param path the path to validate, +	 * @return {@code true} if the path is invalid, {@code false} otherwise, +	 */, +	private boolean isInvalidEncodedPath(String path) {, +		if (path.contains("%")) {, +			try {, +				// Use URLDecoder (vs UriUtils) to preserve potentially decoded UTF-8 chars, +				String decodedPath = URLDecoder.decode(path, "UTF-8");, +				if (isInvalidPath(decodedPath)) {, +					return true;, +				}, +				decodedPath = processPath(decodedPath);, +				if (isInvalidPath(decodedPath)) {, +					return true;, +				}, +			}, +			catch (IllegalArgumentException | UnsupportedEncodingException ex) {, +				// Should never happen..., +			}, +		}, +		return false;, +	}, +, +	/**]