[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/ConstructorResolver.java, + * Copyright 2002-2010 the original author or authors., +import java.util.List;, +, +import org.springframework.core.convert.TypeDescriptor;, +, +	 * Within the supplied context determine a suitable constructor on the supplied type that can handle the, +	 * specified arguments. Return a ConstructorExecutor that can be used to invoke that constructor, +	 * (or <code>null</code> if no constructor could be found)., +	ConstructorExecutor resolve(EvaluationContext context, String typeName, List<TypeDescriptor> argumentTypes), +++ b/org.springframework.expression/src/main/java/org/springframework/expression/ConstructorResolver.java, + * Copyright 2002-2010 the original author or authors., +import java.util.List;, +, +import org.springframework.core.convert.TypeDescriptor;, +, +	 * Within the supplied context determine a suitable constructor on the supplied type that can handle the, +	 * specified arguments. Return a ConstructorExecutor that can be used to invoke that constructor, +	 * (or <code>null</code> if no constructor could be found)., +	ConstructorExecutor resolve(EvaluationContext context, String typeName, List<TypeDescriptor> argumentTypes), +++ b/org.springframework.expression/src/main/java/org/springframework/expression/MethodResolver.java, + * Copyright 2002-2010 the original author or authors., +import java.util.List;, +, +import org.springframework.core.convert.TypeDescriptor;, +, + * A method resolver attempts locate a method and returns a command executor that can be used to invoke that method., + * The command executor will be cached but if it 'goes stale' the resolvers will be called again., +	 * Within the supplied context determine a suitable method on the supplied object that can handle the, +	 * specified arguments. Return a MethodExecutor that can be used to invoke that method, +	 * (or <code>null</code> if no method could be found)., +	MethodExecutor resolve(EvaluationContext context, Object targetObject, String name,, +			List<TypeDescriptor> argumentTypes) throws AccessException;, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/ConstructorResolver.java, + * Copyright 2002-2010 the original author or authors., +import java.util.List;, +, +import org.springframework.core.convert.TypeDescriptor;, +, +	 * Within the supplied context determine a suitable constructor on the supplied type that can handle the, +	 * specified arguments. Return a ConstructorExecutor that can be used to invoke that constructor, +	 * (or <code>null</code> if no constructor could be found)., +	ConstructorExecutor resolve(EvaluationContext context, String typeName, List<TypeDescriptor> argumentTypes), +++ b/org.springframework.expression/src/main/java/org/springframework/expression/MethodResolver.java, + * Copyright 2002-2010 the original author or authors., +import java.util.List;, +, +import org.springframework.core.convert.TypeDescriptor;, +, + * A method resolver attempts locate a method and returns a command executor that can be used to invoke that method., + * The command executor will be cached but if it 'goes stale' the resolvers will be called again., +	 * Within the supplied context determine a suitable method on the supplied object that can handle the, +	 * specified arguments. Return a MethodExecutor that can be used to invoke that method, +	 * (or <code>null</code> if no method could be found)., +	MethodExecutor resolve(EvaluationContext context, Object targetObject, String name,, +			List<TypeDescriptor> argumentTypes) throws AccessException;, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, + * Copyright 2002-2010 the original author or authors., +++ b/org.springframework.expression/src/main/java/org/springframework/expression/ConstructorResolver.java, + * Copyright 2002-2010 the original author or authors., +import java.util.List;, +, +import org.springframework.core.convert.TypeDescriptor;, +, +	 * Within the supplied context determine a suitable constructor on the supplied type that can handle the, +	 * specified arguments. Return a ConstructorExecutor that can be used to invoke that constructor, +	 * (or <code>null</code> if no constructor could be found)., +	ConstructorExecutor resolve(EvaluationContext context, String typeName, List<TypeDescriptor> argumentTypes), +++ b/org.springframework.expression/src/main/java/org/springframework/expression/MethodResolver.java, + * Copyright 2002-2010 the original author or authors., +import java.util.List;, +, +import org.springframework.core.convert.TypeDescriptor;, +, + * A method resolver attempts locate a method and returns a command executor that can be used to invoke that method., + * The command executor will be cached but if it 'goes stale' the resolvers will be called again., +	 * Within the supplied context determine a suitable method on the supplied object that can handle the, +	 * specified arguments. Return a MethodExecutor that can be used to invoke that method, +	 * (or <code>null</code> if no method could be found)., +	MethodExecutor resolve(EvaluationContext context, Object targetObject, String name,, +			List<TypeDescriptor> argumentTypes) throws AccessException;, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, + * Copyright 2002-2010 the original author or authors., +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/ConstructorReference.java, + * Copyright 2002-2010 the original author or authors., +import java.util.ArrayList;, +	private boolean isArrayConstructor = false;, +, +	private SpelNodeImpl[] dimensions;, +, +, +		if (this.isArrayConstructor) {, +		}, +		else {, +		List<TypeDescriptor> argumentTypes = new ArrayList<TypeDescriptor>(getChildCount() - 1);, +			TypedValue childValue = this.children[i + 1].getValueInternal(state);, +			argumentTypes.add(TypeDescriptor.forObject(value));, +			}, +			catch (AccessException ae) {, +						String typename = (String) this.children[0].getValueInternal(state).getValue();]