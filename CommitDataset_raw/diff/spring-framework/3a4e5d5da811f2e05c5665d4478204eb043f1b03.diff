[+++ b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java, +import java.lang.reflect.ParameterizedType;, +		if (contextClass != null) {, +			ResolvableType resolvedType = ResolvableType.forType(type);, +			if (type instanceof TypeVariable) {, +				ResolvableType resolvedTypeVariable = resolveVariable(, +				if (resolvedTypeVariable != ResolvableType.NONE) {, +					return typeFactory.constructType(resolvedTypeVariable.resolve());, +				}, +			}, +			else if (type instanceof ParameterizedType && resolvedType.hasUnresolvableGenerics()) {, +				ParameterizedType parameterizedType = (ParameterizedType) type;, +				Class<?>[] generics = new Class<?>[parameterizedType.getActualTypeArguments().length];, +				Type[] typeArguments = parameterizedType.getActualTypeArguments();, +				for (int i = 0; i < typeArguments.length; i++) {, +					Type typeArgument = typeArguments[i];, +					if (typeArgument instanceof TypeVariable) {, +						ResolvableType resolvedTypeArgument = resolveVariable(, +								(TypeVariable<?>) typeArgument, ResolvableType.forClass(contextClass));, +						if (resolvedTypeArgument != ResolvableType.NONE) {, +							generics[i] = resolvedTypeArgument.resolve();, +						}, +						else {, +							generics[i] = ResolvableType.forType(typeArgument).resolve();, +						}, +					}, +					else {, +						generics[i] = ResolvableType.forType(typeArgument).resolve();, +					}, +				}, +				return typeFactory.constructType(ResolvableType., +						forClassWithGenerics(resolvedType.getRawClass(), generics).getType());, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java, +import java.lang.reflect.ParameterizedType;, +		if (contextClass != null) {, +			ResolvableType resolvedType = ResolvableType.forType(type);, +			if (type instanceof TypeVariable) {, +				ResolvableType resolvedTypeVariable = resolveVariable(, +				if (resolvedTypeVariable != ResolvableType.NONE) {, +					return typeFactory.constructType(resolvedTypeVariable.resolve());, +				}, +			}, +			else if (type instanceof ParameterizedType && resolvedType.hasUnresolvableGenerics()) {, +				ParameterizedType parameterizedType = (ParameterizedType) type;, +				Class<?>[] generics = new Class<?>[parameterizedType.getActualTypeArguments().length];, +				Type[] typeArguments = parameterizedType.getActualTypeArguments();, +				for (int i = 0; i < typeArguments.length; i++) {, +					Type typeArgument = typeArguments[i];, +					if (typeArgument instanceof TypeVariable) {, +						ResolvableType resolvedTypeArgument = resolveVariable(, +								(TypeVariable<?>) typeArgument, ResolvableType.forClass(contextClass));, +						if (resolvedTypeArgument != ResolvableType.NONE) {, +							generics[i] = resolvedTypeArgument.resolve();, +						}, +						else {, +							generics[i] = ResolvableType.forType(typeArgument).resolve();, +						}, +					}, +					else {, +						generics[i] = ResolvableType.forType(typeArgument).resolve();, +					}, +				}, +				return typeFactory.constructType(ResolvableType., +						forClassWithGenerics(resolvedType.getRawClass(), generics).getType());, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessorTests.java, +	@Test  // SPR-14470, +	public void resolveParameterizedWithTypeVariableArgument() throws Exception {, +		Method method = MyParameterizedControllerWithList.class.getMethod("handleDto", List.class);, +		HandlerMethod handlerMethod = new HandlerMethod(new MySimpleParameterizedControllerWithList(), method);, +		MethodParameter methodParam = handlerMethod.getMethodParameters()[0];, +, +		String content = "[{\"name\" : \"Jad\"}, {\"name\" : \"Robert\"}]";, +		this.servletRequest.setContent(content.getBytes("UTF-8"));, +		this.servletRequest.setContentType(MediaType.APPLICATION_JSON_VALUE);, +, +		List<HttpMessageConverter<?>> converters = new ArrayList<>();, +		converters.add(new MappingJackson2HttpMessageConverter());, +		RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters);, +, +		@SuppressWarnings("unchecked"), +		List<SimpleBean> result = (List<SimpleBean>), +				processor.resolveArgument(methodParam, container, request, factory);, +, +		assertNotNull(result);, +		assertEquals("Jad", result.get(0).getName());, +		assertEquals("Robert", result.get(1).getName());, +	}, +, +	@SuppressWarnings("unused"), +	private static abstract class MyParameterizedControllerWithList<DTO extends Identifiable> {, +, +		public void handleDto(@RequestBody List<DTO> dto) {, +		}, +	}, +, +	@SuppressWarnings("unused"), +	private static class MySimpleParameterizedControllerWithList extends MyParameterizedControllerWithList<SimpleBean> {, +	}, +]