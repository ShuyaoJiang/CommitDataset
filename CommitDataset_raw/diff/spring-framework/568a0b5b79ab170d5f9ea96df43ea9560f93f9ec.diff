[+++ b/spring-test/src/main/kotlin/org/springframework/test/web/reactive/server/WebTestClientExtensions.kt, +import org.springframework.test.util.AssertionErrors.assertEquals, + * Extension for [ResponseSpec.expectBody] providing an `expectBody<Foo>()` variant and, + * a workaround for [KT-5464](https://youtrack.jetbrains.com/issue/KT-5464) which, + * prevents to use `WebTestClient.BodySpec` in Kotlin., +inline fun <reified B : Any> ResponseSpec.expectBody(): KotlinBodySpec<B> =, +		expectBody(B::class.java).returnResult().let {, +			object : KotlinBodySpec<B> {, +, +				override fun isEqualTo(expected: B): KotlinBodySpec<B> = it, +							.assertWithDiagnostics({ assertEquals("Response body", expected, it.responseBody) }), +							.let { this }, +, +				override fun consumeWith(consumer: (EntityExchangeResult<B>) -> Unit): KotlinBodySpec<B> =, +					it, +							.assertWithDiagnostics({ consumer.invoke(it) }), +							.let { this }, +, +				override fun returnResult(): EntityExchangeResult<B> = it, +			}, +		}, +, +/**, + * Kotlin compliant `WebTestClient.BodySpec` for expectations on the response body decoded, + * to a single Object, see [KT-5464](https://youtrack.jetbrains.com/issue/KT-5464) for, + * more details., + * @since 5.0.6, + */, +interface KotlinBodySpec<B> {, +, +	/**, +	 * Assert the extracted body is equal to the given value., +	 */, +	fun isEqualTo(expected: B): KotlinBodySpec<B>, +, +	/**, +	 * Assert the exchange result with the given consumer., +	 */, +	fun consumeWith(consumer: (EntityExchangeResult<B>) -> Unit): KotlinBodySpec<B>, +, +	/**, +	 * Exit the chained API and return an `ExchangeResult` with the, +	 * decoded response content., +	 */, +	fun returnResult(): EntityExchangeResult<B>, +}, +++ b/spring-test/src/main/kotlin/org/springframework/test/web/reactive/server/WebTestClientExtensions.kt, +import org.springframework.test.util.AssertionErrors.assertEquals, + * Extension for [ResponseSpec.expectBody] providing an `expectBody<Foo>()` variant and, + * a workaround for [KT-5464](https://youtrack.jetbrains.com/issue/KT-5464) which, + * prevents to use `WebTestClient.BodySpec` in Kotlin., +inline fun <reified B : Any> ResponseSpec.expectBody(): KotlinBodySpec<B> =, +		expectBody(B::class.java).returnResult().let {, +			object : KotlinBodySpec<B> {, +, +				override fun isEqualTo(expected: B): KotlinBodySpec<B> = it, +							.assertWithDiagnostics({ assertEquals("Response body", expected, it.responseBody) }), +							.let { this }, +, +				override fun consumeWith(consumer: (EntityExchangeResult<B>) -> Unit): KotlinBodySpec<B> =, +					it, +							.assertWithDiagnostics({ consumer.invoke(it) }), +							.let { this }, +, +				override fun returnResult(): EntityExchangeResult<B> = it, +			}, +		}, +, +/**, + * Kotlin compliant `WebTestClient.BodySpec` for expectations on the response body decoded, + * to a single Object, see [KT-5464](https://youtrack.jetbrains.com/issue/KT-5464) for, + * more details., + * @since 5.0.6, + */, +interface KotlinBodySpec<B> {, +, +	/**, +	 * Assert the extracted body is equal to the given value., +	 */, +	fun isEqualTo(expected: B): KotlinBodySpec<B>, +, +	/**, +	 * Assert the exchange result with the given consumer., +	 */, +	fun consumeWith(consumer: (EntityExchangeResult<B>) -> Unit): KotlinBodySpec<B>, +, +	/**, +	 * Exit the chained API and return an `ExchangeResult` with the, +	 * decoded response content., +	 */, +	fun returnResult(): EntityExchangeResult<B>, +}, +++ b/spring-test/src/test/kotlin/org/springframework/test/web/reactive/server/WebTestClientExtensionsTests.kt, +import org.junit.Assert.assertEquals, +import org.springframework.web.reactive.function.server.ServerResponse.*, +import org.springframework.web.reactive.function.server.router, +	fun `KotlinBodySpec#isEqualTo`() {, +		WebTestClient, +				.bindToRouterFunction( router { GET("/") { ok().syncBody("foo") } } ), +				.build()]