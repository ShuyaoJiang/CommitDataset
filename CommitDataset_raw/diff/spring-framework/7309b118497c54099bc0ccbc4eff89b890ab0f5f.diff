[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +import java.util.ArrayList;, +import java.util.List;, +import org.springframework.beans.factory.config.BeanDefinitionHolder;, +import org.springframework.util.xml.DomUtils;, +import org.w3c.dom.Element;, +		Element interceptors = DomUtils.getChildElementByTagName(element, "interceptors");, +		if (interceptors != null) {, +			List<Element> beans = DomUtils.getChildElementsByTagName(interceptors, "bean");, +			List<BeanDefinition> interceptorBeans = new ArrayList<BeanDefinition>(beans.size());, +			for (Element bean : beans) {, +				interceptorBeans.add(parserContext.getDelegate().parseBeanDefinitionElement(bean).getBeanDefinition());				, +			}, +			mappingDef.getPropertyValues().add("interceptors", interceptorBeans);			, +		}, +		, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +import java.util.ArrayList;, +import java.util.List;, +import org.springframework.beans.factory.config.BeanDefinitionHolder;, +import org.springframework.util.xml.DomUtils;, +import org.w3c.dom.Element;, +		Element interceptors = DomUtils.getChildElementByTagName(element, "interceptors");, +		if (interceptors != null) {, +			List<Element> beans = DomUtils.getChildElementsByTagName(interceptors, "bean");, +			List<BeanDefinition> interceptorBeans = new ArrayList<BeanDefinition>(beans.size());, +			for (Element bean : beans) {, +				interceptorBeans.add(parserContext.getDelegate().parseBeanDefinitionElement(bean).getBeanDefinition());				, +			}, +			mappingDef.getPropertyValues().add("interceptors", interceptorBeans);			, +		}, +		, +++ b/org.springframework.web.servlet/src/main/resources/org/springframework/web/servlet/config/spring-mvc-3.0.xsd, +	Each inteceptor should be configured as an inner bean that implements either the org.springframework.web.servlet.HandlerInterceptor or org.springframework.web.context.request.WebRequestInterceptor interface., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +import java.util.ArrayList;, +import java.util.List;, +import org.springframework.beans.factory.config.BeanDefinitionHolder;, +import org.springframework.util.xml.DomUtils;, +import org.w3c.dom.Element;, +		Element interceptors = DomUtils.getChildElementByTagName(element, "interceptors");, +		if (interceptors != null) {, +			List<Element> beans = DomUtils.getChildElementsByTagName(interceptors, "bean");, +			List<BeanDefinition> interceptorBeans = new ArrayList<BeanDefinition>(beans.size());, +			for (Element bean : beans) {, +				interceptorBeans.add(parserContext.getDelegate().parseBeanDefinitionElement(bean).getBeanDefinition());				, +			}, +			mappingDef.getPropertyValues().add("interceptors", interceptorBeans);			, +		}, +		, +++ b/org.springframework.web.servlet/src/main/resources/org/springframework/web/servlet/config/spring-mvc-3.0.xsd, +	Each inteceptor should be configured as an inner bean that implements either the org.springframework.web.servlet.HandlerInterceptor or org.springframework.web.context.request.WebRequestInterceptor interface., +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertTrue;, +, +, +import org.junit.Ignore;, +import org.springframework.web.servlet.HandlerExecutionChain;, +import org.springframework.web.servlet.i18n.LocaleChangeInterceptor;, +import org.springframework.web.servlet.theme.ThemeChangeInterceptor;, +	@Ignore, +		mapping.setRootHandler(new TestController());, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		request.addParameter("locale", "en");, +		request.addParameter("theme", "green");, +, +		HandlerExecutionChain chain = mapping.getHandler(request);, +		assertEquals(2, chain.getInterceptors().length);, +		assertTrue(chain.getInterceptors()[0] instanceof LocaleChangeInterceptor);, +		assertTrue(chain.getInterceptors()[1] instanceof ThemeChangeInterceptor);]