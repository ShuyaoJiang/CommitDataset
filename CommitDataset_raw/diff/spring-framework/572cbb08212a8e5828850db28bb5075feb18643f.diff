[+++ b/spring-context/src/test/java/org/springframework/scheduling/support/CronTriggerTests.java, + * Copyright 2002-2015 the original author or authors., +	@Parameters(name = "date [{0}], time zone [{1}]"), +++ b/spring-context/src/test/java/org/springframework/scheduling/support/CronTriggerTests.java, + * Copyright 2002-2015 the original author or authors., +	@Parameters(name = "date [{0}], time zone [{1}]"), +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/FailingBeforeAndAfterMethodsJUnitTests.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.util.ClassUtils;, +	@Parameters(name = "{0}"), +			{ AlwaysFailingBeforeTestClassTestCase.class.getSimpleName() },//, +			{ AlwaysFailingAfterTestClassTestCase.class.getSimpleName() },//, +			{ AlwaysFailingPrepareTestInstanceTestCase.class.getSimpleName() },//, +			{ AlwaysFailingBeforeTestMethodTestCase.class.getSimpleName() },//, +			{ AlwaysFailingAfterTestMethodTestCase.class.getSimpleName() },//, +			{ FailingBeforeTransactionTestCase.class.getSimpleName() },//, +			{ FailingAfterTransactionTestCase.class.getSimpleName() } //, +	public FailingBeforeAndAfterMethodsJUnitTests(String testClassName) throws Exception {, +		this.clazz = ClassUtils.forName(getClass().getName() + "." + testClassName, getClass().getClassLoader());, +	}, +, +++ b/spring-context/src/test/java/org/springframework/scheduling/support/CronTriggerTests.java, + * Copyright 2002-2015 the original author or authors., +	@Parameters(name = "date [{0}], time zone [{1}]"), +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/FailingBeforeAndAfterMethodsJUnitTests.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.util.ClassUtils;, +	@Parameters(name = "{0}"), +			{ AlwaysFailingBeforeTestClassTestCase.class.getSimpleName() },//, +			{ AlwaysFailingAfterTestClassTestCase.class.getSimpleName() },//, +			{ AlwaysFailingPrepareTestInstanceTestCase.class.getSimpleName() },//, +			{ AlwaysFailingBeforeTestMethodTestCase.class.getSimpleName() },//, +			{ AlwaysFailingAfterTestMethodTestCase.class.getSimpleName() },//, +			{ FailingBeforeTransactionTestCase.class.getSimpleName() },//, +			{ FailingAfterTransactionTestCase.class.getSimpleName() } //, +	public FailingBeforeAndAfterMethodsJUnitTests(String testClassName) throws Exception {, +		this.clazz = ClassUtils.forName(getClass().getName() + "." + testClassName, getClass().getClassLoader());, +	}, +, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/FailingBeforeAndAfterMethodsTestNGTests.java, +import org.springframework.util.ClassUtils;, +	@Parameters(name = "{0}"), +	public static Collection<Object[]> testData() {, +		return Arrays.asList(new Object[][] {//, +		//, +			{ AlwaysFailingBeforeTestClassTestCase.class.getSimpleName(), 1, 0, 0, 1 },//, +			{ AlwaysFailingAfterTestClassTestCase.class.getSimpleName(), 1, 1, 0, 1 },//, +			{ AlwaysFailingPrepareTestInstanceTestCase.class.getSimpleName(), 1, 0, 0, 1 },//, +			{ AlwaysFailingBeforeTestMethodTestCase.class.getSimpleName(), 1, 0, 0, 1 },//, +			{ AlwaysFailingAfterTestMethodTestCase.class.getSimpleName(), 1, 1, 0, 1 },//, +			{ FailingBeforeTransactionTestCase.class.getSimpleName(), 1, 0, 0, 1 },//, +			{ FailingAfterTransactionTestCase.class.getSimpleName(), 1, 1, 0, 1 } //, +		});, +	}, +, +	public FailingBeforeAndAfterMethodsTestNGTests(String testClassName, int expectedTestStartCount,, +			int expectedTestSuccessCount, int expectedFailureCount, int expectedFailedConfigurationsCount) throws Exception {, +		this.clazz = ClassUtils.forName(getClass().getName() + "." + testClassName, getClass().getClassLoader());, +++ b/spring-context/src/test/java/org/springframework/scheduling/support/CronTriggerTests.java, + * Copyright 2002-2015 the original author or authors., +	@Parameters(name = "date [{0}], time zone [{1}]"), +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/FailingBeforeAndAfterMethodsJUnitTests.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.util.ClassUtils;, +	@Parameters(name = "{0}"), +			{ AlwaysFailingBeforeTestClassTestCase.class.getSimpleName() },//, +			{ AlwaysFailingAfterTestClassTestCase.class.getSimpleName() },//, +			{ AlwaysFailingPrepareTestInstanceTestCase.class.getSimpleName() },//, +			{ AlwaysFailingBeforeTestMethodTestCase.class.getSimpleName() },//, +			{ AlwaysFailingAfterTestMethodTestCase.class.getSimpleName() },//, +			{ FailingBeforeTransactionTestCase.class.getSimpleName() },//, +			{ FailingAfterTransactionTestCase.class.getSimpleName() } //, +	public FailingBeforeAndAfterMethodsJUnitTests(String testClassName) throws Exception {, +		this.clazz = ClassUtils.forName(getClass().getName() + "." + testClassName, getClass().getClassLoader());, +	}, +, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/FailingBeforeAndAfterMethodsTestNGTests.java, +import org.springframework.util.ClassUtils;, +	@Parameters(name = "{0}"), +	public static Collection<Object[]> testData() {, +		return Arrays.asList(new Object[][] {//, +		//, +			{ AlwaysFailingBeforeTestClassTestCase.class.getSimpleName(), 1, 0, 0, 1 },//, +			{ AlwaysFailingAfterTestClassTestCase.class.getSimpleName(), 1, 1, 0, 1 },//, +			{ AlwaysFailingPrepareTestInstanceTestCase.class.getSimpleName(), 1, 0, 0, 1 },//, +			{ AlwaysFailingBeforeTestMethodTestCase.class.getSimpleName(), 1, 0, 0, 1 },//, +			{ AlwaysFailingAfterTestMethodTestCase.class.getSimpleName(), 1, 1, 0, 1 },//, +			{ FailingBeforeTransactionTestCase.class.getSimpleName(), 1, 0, 0, 1 },//, +			{ FailingAfterTransactionTestCase.class.getSimpleName(), 1, 1, 0, 1 } //, +		});, +	}, +, +	public FailingBeforeAndAfterMethodsTestNGTests(String testClassName, int expectedTestStartCount,, +			int expectedTestSuccessCount, int expectedFailureCount, int expectedFailedConfigurationsCount) throws Exception {, +		this.clazz = ClassUtils.forName(getClass().getName() + "." + testClassName, getClass().getClassLoader());, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/ParameterizedDependencyInjectionTests.java, + * Copyright 2002-2015 the original author or authors., +import org.junit.runners.Parameterized.Parameter;, +	private final TestContextManager testContextManager = new TestContextManager(getClass());, +]