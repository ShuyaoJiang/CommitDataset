[+++ b/org.springframework.context/src/test/java/org/springframework/mock/env/MockPropertySource.java, +	public void setProperty(String name, Object value) {, +		this.source.put(name, value);, +	public MockPropertySource withProperty(String name, Object value) {, +		this.setProperty(name, value);, +++ b/org.springframework.context/src/test/java/org/springframework/mock/env/MockPropertySource.java, +	public void setProperty(String name, Object value) {, +		this.source.put(name, value);, +	public MockPropertySource withProperty(String name, Object value) {, +		this.setProperty(name, value);, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/CommandLinePropertySource.java, +	 * Return whether this {@code PropertySource} contains a property with the given name., +	 * <p>This implementation first checks to see if the name specified is the special, +	public final boolean containsProperty(String name) {, +		if (this.nonOptionArgsPropertyName.equals(name)) {, +		return this.containsOption(name);, +	 * <p>This implementation first checks to see if the name specified is the special, +	public final String getProperty(String name) {, +		if (this.nonOptionArgsPropertyName.equals(name)) {, +		Collection<String> optionValues = this.getOptionValues(name);, +++ b/org.springframework.context/src/test/java/org/springframework/mock/env/MockPropertySource.java, +	public void setProperty(String name, Object value) {, +		this.source.put(name, value);, +	public MockPropertySource withProperty(String name, Object value) {, +		this.setProperty(name, value);, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/CommandLinePropertySource.java, +	 * Return whether this {@code PropertySource} contains a property with the given name., +	 * <p>This implementation first checks to see if the name specified is the special, +	public final boolean containsProperty(String name) {, +		if (this.nonOptionArgsPropertyName.equals(name)) {, +		return this.containsOption(name);, +	 * <p>This implementation first checks to see if the name specified is the special, +	public final String getProperty(String name) {, +		if (this.nonOptionArgsPropertyName.equals(name)) {, +		Collection<String> optionValues = this.getOptionValues(name);, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/EnumerablePropertySource.java, + * underlying source object to enumerate all possible property name/value, +	 * Return whether this {@code PropertySource} contains a property with the given name., +	 * <p>This implementation checks for the presence of the given name within, +	 * @param name the property to find, +++ b/org.springframework.context/src/test/java/org/springframework/mock/env/MockPropertySource.java, +	public void setProperty(String name, Object value) {, +		this.source.put(name, value);, +	public MockPropertySource withProperty(String name, Object value) {, +		this.setProperty(name, value);, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/CommandLinePropertySource.java, +	 * Return whether this {@code PropertySource} contains a property with the given name., +	 * <p>This implementation first checks to see if the name specified is the special, +	public final boolean containsProperty(String name) {, +		if (this.nonOptionArgsPropertyName.equals(name)) {, +		return this.containsOption(name);, +	 * <p>This implementation first checks to see if the name specified is the special, +	public final String getProperty(String name) {, +		if (this.nonOptionArgsPropertyName.equals(name)) {, +		Collection<String> optionValues = this.getOptionValues(name);, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/EnumerablePropertySource.java, + * underlying source object to enumerate all possible property name/value, +	 * Return whether this {@code PropertySource} contains a property with the given name., +	 * <p>This implementation checks for the presence of the given name within, +	 * @param name the property to find, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/JOptCommandLinePropertySource.java, +	protected boolean containsOption(String name) {, +		return this.source.has(name);, +	public List<String> getOptionValues(String name) {, +		List<?> argValues = this.source.valuesOf(name);, +			if (this.source.has(name)) {, +++ b/org.springframework.context/src/test/java/org/springframework/mock/env/MockPropertySource.java, +	public void setProperty(String name, Object value) {, +		this.source.put(name, value);, +	public MockPropertySource withProperty(String name, Object value) {, +		this.setProperty(name, value);, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/CommandLinePropertySource.java, +	 * Return whether this {@code PropertySource} contains a property with the given name., +	 * <p>This implementation first checks to see if the name specified is the special, +	public final boolean containsProperty(String name) {, +		if (this.nonOptionArgsPropertyName.equals(name)) {, +		return this.containsOption(name);, +	 * <p>This implementation first checks to see if the name specified is the special, +	public final String getProperty(String name) {, +		if (this.nonOptionArgsPropertyName.equals(name)) {, +		Collection<String> optionValues = this.getOptionValues(name);, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/EnumerablePropertySource.java, + * underlying source object to enumerate all possible property name/value, +	 * Return whether this {@code PropertySource} contains a property with the given name., +	 * <p>This implementation checks for the presence of the given name within, +	 * @param name the property to find, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/JOptCommandLinePropertySource.java, +	protected boolean containsOption(String name) {, +		return this.source.has(name);, +	public List<String> getOptionValues(String name) {, +		List<?> argValues = this.source.valuesOf(name);, +			if (this.source.has(name)) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/MapPropertySource.java, +	public Object getProperty(String name) {, +		return this.source.get(name);, +++ b/org.springframework.context/src/test/java/org/springframework/mock/env/MockPropertySource.java, +	public void setProperty(String name, Object value) {, +		this.source.put(name, value);, +	public MockPropertySource withProperty(String name, Object value) {, +		this.setProperty(name, value);]