[+++ b/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java, +	 * Whether to decode the request URI when determining the lookup path., +	 * @since 4.3.13, +	 */, +	public boolean isUrlDecode() {, +		return this.urlDecode;, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java, +	 * Whether to decode the request URI when determining the lookup path., +	 * @since 4.3.13, +	 */, +	public boolean isUrlDecode() {, +		return this.urlDecode;, +	}, +, +	/**, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceUtils.java, +import java.nio.charset.Charset;, +import java.util.List;, +import org.springframework.core.io.Resource;, +import org.springframework.core.io.ResourceLoader;, +import org.springframework.core.io.UrlResource;, +import org.springframework.util.Assert;, +public abstract class MvcNamespaceUtils {, +	private static final String URL_RESOURCE_CHARSET_PREFIX = "[charset=";, +, +	/**, +	 * Load the {@link Resource}'s for the given locations with the given, +	 * {@link ResourceLoader} and add them to the output list. Also for, +	 * {@link org.springframework.core.io.UrlResource URL-based resources} (e.g., +	 * files, HTTP URLs, etc) this method supports a special prefix to indicate, +	 * the charset associated with the URL so that relative paths appended to it, +	 * can be encoded correctly, e.g., +	 * {@code [charset=Windows-31J]http://example.org/path}. The charsets, if, +	 * any, are added to the output map., +	 * @since 4.3.13, +	 */, +	public static void loadResourceLocations(String[] locations, ResourceLoader resourceLoader,, +			List<Resource> outputLocations, Map<Resource, Charset> outputLocationCharsets) {, +, +		for (String location : locations) {, +			Charset charset = null;, +			location = location.trim();, +			if (location.startsWith(URL_RESOURCE_CHARSET_PREFIX)) {, +				int endIndex = location.indexOf("]", URL_RESOURCE_CHARSET_PREFIX.length());, +				Assert.isTrue(endIndex != -1, "Invalid charset syntax in location: " + location);, +				String value = location.substring(URL_RESOURCE_CHARSET_PREFIX.length(), endIndex);, +				charset = Charset.forName(value);, +				location = location.substring(endIndex + 1);, +			}, +			Resource resource = resourceLoader.getResource(location);, +			outputLocations.add(resource);, +			if (charset != null) {, +				Assert.isInstanceOf(UrlResource.class, resource, "Unexpected charset for: " + resource);, +				outputLocationCharsets.put(resource, charset);, +			}, +		}, +	}, +++ b/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java, +	 * Whether to decode the request URI when determining the lookup path., +	 * @since 4.3.13, +	 */, +	public boolean isUrlDecode() {, +		return this.urlDecode;, +	}, +, +	/**, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceUtils.java, +import java.nio.charset.Charset;, +import java.util.List;, +import org.springframework.core.io.Resource;, +import org.springframework.core.io.ResourceLoader;, +import org.springframework.core.io.UrlResource;, +import org.springframework.util.Assert;, +public abstract class MvcNamespaceUtils {, +	private static final String URL_RESOURCE_CHARSET_PREFIX = "[charset=";, +, +	/**, +	 * Load the {@link Resource}'s for the given locations with the given, +	 * {@link ResourceLoader} and add them to the output list. Also for, +	 * {@link org.springframework.core.io.UrlResource URL-based resources} (e.g., +	 * files, HTTP URLs, etc) this method supports a special prefix to indicate, +	 * the charset associated with the URL so that relative paths appended to it, +	 * can be encoded correctly, e.g., +	 * {@code [charset=Windows-31J]http://example.org/path}. The charsets, if, +	 * any, are added to the output map., +	 * @since 4.3.13, +	 */, +	public static void loadResourceLocations(String[] locations, ResourceLoader resourceLoader,, +			List<Resource> outputLocations, Map<Resource, Charset> outputLocationCharsets) {, +, +		for (String location : locations) {, +			Charset charset = null;, +			location = location.trim();, +			if (location.startsWith(URL_RESOURCE_CHARSET_PREFIX)) {, +				int endIndex = location.indexOf("]", URL_RESOURCE_CHARSET_PREFIX.length());, +				Assert.isTrue(endIndex != -1, "Invalid charset syntax in location: " + location);, +				String value = location.substring(URL_RESOURCE_CHARSET_PREFIX.length(), endIndex);]