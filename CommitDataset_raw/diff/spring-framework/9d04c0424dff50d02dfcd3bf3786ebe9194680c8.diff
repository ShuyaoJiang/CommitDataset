[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java, +				ex -> (inputMessage.getHeaders().getContentType() == null) ?, +						Mono.from(permitEmptyOrFail(inputMessage, ex)) : Mono.error(ex),, +	@SuppressWarnings("unchecked"), +				ex -> (inputMessage.getHeaders().getContentType() == null) ?, +						permitEmptyOrFail(inputMessage, ex) : Flux.error(ex),, +	@SuppressWarnings("unchecked"), +	private static <T> Flux<T> permitEmptyOrFail(ReactiveHttpInputMessage message, UnsupportedMediaTypeException ex) {, +		return message.getBody().doOnNext(buffer -> {, +			throw ex;, +		}).map(o -> (T) o);, +	}, +, +			Function<HttpMessageReader<T>, S> readerFunction,, +			Function<UnsupportedMediaTypeException, S> unsupportedError,, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java, +				ex -> (inputMessage.getHeaders().getContentType() == null) ?, +						Mono.from(permitEmptyOrFail(inputMessage, ex)) : Mono.error(ex),, +	@SuppressWarnings("unchecked"), +				ex -> (inputMessage.getHeaders().getContentType() == null) ?, +						permitEmptyOrFail(inputMessage, ex) : Flux.error(ex),, +	@SuppressWarnings("unchecked"), +	private static <T> Flux<T> permitEmptyOrFail(ReactiveHttpInputMessage message, UnsupportedMediaTypeException ex) {, +		return message.getBody().doOnNext(buffer -> {, +			throw ex;, +		}).map(o -> (T) o);, +	}, +, +			Function<HttpMessageReader<T>, S> readerFunction,, +			Function<UnsupportedMediaTypeException, S> unsupportedError,, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/BodyExtractorsTests.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +	@Test // SPR-15758, +	public void toMonoWithEmptyBodyAndNoContentType() throws Exception {, +		BodyExtractor<Mono<Map<String, String>>, ReactiveHttpInputMessage> extractor =, +				BodyExtractors.toMono(new ParameterizedTypeReference<Map<String, String>>() {});, +, +		MockServerHttpRequest request = MockServerHttpRequest.post("/").body(Flux.empty());, +		Mono<Map<String, String>> result = extractor.extract(request, this.context);, +, +		StepVerifier.create(result).expectComplete().verify();, +	}, +]