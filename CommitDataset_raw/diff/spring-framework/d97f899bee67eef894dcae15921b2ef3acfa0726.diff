[+++ b/spring-framework-reference/src/aop.xml, +          extended in future releases to support more of the AspectJ pointcut, +          designators.</para>, +++ b/spring-framework-reference/src/aop.xml, +          extended in future releases to support more of the AspectJ pointcut, +          designators.</para>, +++ b/spring-framework-reference/src/beans.xml, +        each subsystem having its own set of object definitions. In XML-based, +        configuration metadata, you can use the, +        </itemizedlist>, +      When using XML-based configuration metadata<footnote><para>See, +      <xref linkend="beans-factory-collaborators" /></para></footnote>, you, +      specify autowire mode for a bean definition with the, +      <literal>autowire</literal> attribute of the, +      <literal>&lt;bean/&gt;</literal> element. The autowiring functionality has, +      five modes. You specify autowiring <emphasis>per</emphasis> bean and thus, +      can choose which ones to autowire.</para>, +    instead of angle-bracket declarations. Instead of using XML to describe a, +    class itself by using annotations on the relevant class, method, or field, +++ b/spring-framework-reference/src/aop.xml, +          extended in future releases to support more of the AspectJ pointcut, +          designators.</para>, +++ b/spring-framework-reference/src/beans.xml, +        each subsystem having its own set of object definitions. In XML-based, +        configuration metadata, you can use the, +        </itemizedlist>, +      When using XML-based configuration metadata<footnote><para>See, +      <xref linkend="beans-factory-collaborators" /></para></footnote>, you, +      specify autowire mode for a bean definition with the, +      <literal>autowire</literal> attribute of the, +      <literal>&lt;bean/&gt;</literal> element. The autowiring functionality has, +      five modes. You specify autowiring <emphasis>per</emphasis> bean and thus, +      can choose which ones to autowire.</para>, +    instead of angle-bracket declarations. Instead of using XML to describe a, +    class itself by using annotations on the relevant class, method, or field, +++ b/spring-framework-reference/src/dynamic-languages.xml, +          one for each bean that you want to configure (this is no different from, +++ b/spring-framework-reference/src/aop.xml, +          extended in future releases to support more of the AspectJ pointcut, +          designators.</para>, +++ b/spring-framework-reference/src/beans.xml, +        each subsystem having its own set of object definitions. In XML-based, +        configuration metadata, you can use the, +        </itemizedlist>, +      When using XML-based configuration metadata<footnote><para>See, +      <xref linkend="beans-factory-collaborators" /></para></footnote>, you, +      specify autowire mode for a bean definition with the, +      <literal>autowire</literal> attribute of the, +      <literal>&lt;bean/&gt;</literal> element. The autowiring functionality has, +      five modes. You specify autowiring <emphasis>per</emphasis> bean and thus, +      can choose which ones to autowire.</para>, +    instead of angle-bracket declarations. Instead of using XML to describe a, +    class itself by using annotations on the relevant class, method, or field, +++ b/spring-framework-reference/src/dynamic-languages.xml, +          one for each bean that you want to configure (this is no different from, +++ b/spring-framework-reference/src/ejb.xml, +        the implementation to a plain java service object. We have the business, +        interface:, +        <literal>loadBeanFactory()</literal> from <literal>ejbPassivate()</literal>, +        and <literal>ejbActivate()</literal>, respectively, to unload and reload the, +        The default behavior of the, +        <classname>ContextJndiBeanFactoryLocator</classname> class is to load an, +        <classname>ApplicationContext</classname> for use by an EJB, and is, +        adequate for some situations. However, it is problematic when the, +        <classname>ApplicationContext</classname> is loading a number of beans,, +        or the initialization of those beans is time consuming or memory, +        intensive (such as a Hibernate <classname>SessionFactory</classname>, +        initialization, for example), since every EJB will have their own copy., +        In this case, the user may want to override the default, +        <classname>ContextJndiBeanFactoryLocator</classname> usage and use, +        another <classname>BeanFactoryLocator</classname> variant, such as the, +        <classname>ContextSingletonBeanFactoryLocator</classname> which can load, +        and use a shared container to be used by multiple EJBs or other clients., +        Doing this is relatively simple, by adding code similar to this to the, +        EJB:, +++ b/spring-framework-reference/src/aop.xml, +          extended in future releases to support more of the AspectJ pointcut, +          designators.</para>, +++ b/spring-framework-reference/src/beans.xml, +        each subsystem having its own set of object definitions. In XML-based, +        configuration metadata, you can use the, +        </itemizedlist>, +      When using XML-based configuration metadata<footnote><para>See, +      <xref linkend="beans-factory-collaborators" /></para></footnote>, you, +      specify autowire mode for a bean definition with the, +      <literal>autowire</literal> attribute of the, +      <literal>&lt;bean/&gt;</literal> element. The autowiring functionality has, +      five modes. You specify autowiring <emphasis>per</emphasis> bean and thus, +      can choose which ones to autowire.</para>, +    instead of angle-bracket declarations. Instead of using XML to describe a, +    class itself by using annotations on the relevant class, method, or field, +++ b/spring-framework-reference/src/dynamic-languages.xml, +          one for each bean that you want to configure (this is no different from, +++ b/spring-framework-reference/src/ejb.xml, +        the implementation to a plain java service object. We have the business, +        interface:, +        <literal>loadBeanFactory()</literal> from <literal>ejbPassivate()</literal>, +        and <literal>ejbActivate()</literal>, respectively, to unload and reload the, +        The default behavior of the, +        <classname>ContextJndiBeanFactoryLocator</classname> class is to load an]