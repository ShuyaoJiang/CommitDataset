[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java, +			if (inputMessage.getMethod().equals(HttpMethod.GET) &&, +		if (!ifNoneMatch.isEmpty() && (inputMessage.getHeaders().containsKey(HttpHeaders.IF_UNMODIFIED_SINCE), +				|| inputMessage.getHeaders().containsKey(HttpHeaders.IF_MATCH))) {, +			// invalid conditional request, do not process, +		}, +		else if (lastModified != -1 && StringUtils.hasLength(eTag)) {, +						(clientETag.replaceFirst("^W/", "").equals(etag.replaceFirst("^W/", "")))) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java, +			if (inputMessage.getMethod().equals(HttpMethod.GET) &&, +		if (!ifNoneMatch.isEmpty() && (inputMessage.getHeaders().containsKey(HttpHeaders.IF_UNMODIFIED_SINCE), +				|| inputMessage.getHeaders().containsKey(HttpHeaders.IF_MATCH))) {, +			// invalid conditional request, do not process, +		}, +		else if (lastModified != -1 && StringUtils.hasLength(eTag)) {, +						(clientETag.replaceFirst("^W/", "").equals(etag.replaceFirst("^W/", "")))) {, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessorMockTests.java, +		assertResponseNotModified();, +		assertResponseNotModified();, +		assertResponseNotModified();, +		assertResponseNotModified();, +	}, +, +	private void assertResponseNotModified() {, +		assertTrue(mavContainer.isRequestHandled());, +		assertEquals(HttpStatus.NOT_MODIFIED.value(), servletResponse.getStatus());, +		processor.handleReturnValue(returnValue, returnTypeResponseEntity, mavContainer, webRequest);, +, +		assertResponseOkWithBody("body");, +		assertEquals(1, servletResponse.getHeaderValues(HttpHeaders.ETAG).size());, +		assertEquals(etagValue, servletResponse.getHeader(HttpHeaders.ETAG));, +	}, +, +	// SPR-13626, +	@Test, +	public void handleReturnTypeGetIfNoneMatchWildcard() throws Exception {, +		String wildcardValue = "*";, +		String etagValue = "\"some-etag\"";, +		servletRequest.addHeader(HttpHeaders.IF_NONE_MATCH, wildcardValue);, +		HttpHeaders responseHeaders = new HttpHeaders();, +		responseHeaders.set(HttpHeaders.ETAG, etagValue);, +		ResponseEntity<String> returnValue = new ResponseEntity<String>("body", responseHeaders, HttpStatus.OK);, +, +		given(messageConverter.canWrite(String.class, null)).willReturn(true);, +		given(messageConverter.getSupportedMediaTypes()).willReturn(Collections.singletonList(MediaType.TEXT_PLAIN));, +		given(messageConverter.canWrite(String.class, MediaType.TEXT_PLAIN)).willReturn(true);, +		assertResponseOkWithBody("body");, +	}, +, +	// SPR-13626, +	@Test, +	public void handleReturnTypeIfNoneMatchIfMatch() throws Exception {, +		String etagValue = "\"some-etag\"";, +		servletRequest.addHeader(HttpHeaders.IF_NONE_MATCH, etagValue);, +		servletRequest.addHeader(HttpHeaders.IF_MATCH, "ifmatch");, +		HttpHeaders responseHeaders = new HttpHeaders();, +		responseHeaders.set(HttpHeaders.ETAG, etagValue);, +		ResponseEntity<String> returnValue = new ResponseEntity<String>("body", responseHeaders, HttpStatus.OK);, +, +		given(messageConverter.canWrite(String.class, null)).willReturn(true);, +		given(messageConverter.getSupportedMediaTypes()).willReturn(Collections.singletonList(MediaType.TEXT_PLAIN));, +		given(messageConverter.canWrite(String.class, MediaType.TEXT_PLAIN)).willReturn(true);, +, +		processor.handleReturnValue(returnValue, returnTypeResponseEntity, mavContainer, webRequest);, +, +		assertResponseOkWithBody("body");, +		assertEquals(1, servletResponse.getHeaderValues(HttpHeaders.ETAG).size());, +		assertEquals(etagValue, servletResponse.getHeader(HttpHeaders.ETAG));, +	}, +, +	// SPR-13626, +	@Test, +	public void handleReturnTypeIfNoneMatchIfUnmodifiedSince() throws Exception {, +		String etagValue = "\"some-etag\"";, +		servletRequest.addHeader(HttpHeaders.IF_NONE_MATCH, etagValue);, +		servletRequest.addHeader(HttpHeaders.IF_UNMODIFIED_SINCE, dateFormat.format(new Date().getTime()));, +		HttpHeaders responseHeaders = new HttpHeaders();, +		responseHeaders.set(HttpHeaders.ETAG, etagValue);, +		ResponseEntity<String> returnValue = new ResponseEntity<String>("body", responseHeaders, HttpStatus.OK);, +, +		given(messageConverter.canWrite(String.class, null)).willReturn(true);, +		given(messageConverter.getSupportedMediaTypes()).willReturn(Collections.singletonList(MediaType.TEXT_PLAIN));, +		given(messageConverter.canWrite(String.class, MediaType.TEXT_PLAIN)).willReturn(true);, +, +		processor.handleReturnValue(returnValue, returnTypeResponseEntity, mavContainer, webRequest);, +, +		assertResponseOkWithBody("body");, +		assertEquals(1, servletResponse.getHeaderValues(HttpHeaders.ETAG).size());, +		assertEquals(etagValue, servletResponse.getHeader(HttpHeaders.ETAG));, +	}, +, +	private void assertResponseOkWithBody(String body) throws Exception {, +		assertTrue(mavContainer.isRequestHandled());, +		assertEquals(HttpStatus.OK.value(), servletResponse.getStatus());]