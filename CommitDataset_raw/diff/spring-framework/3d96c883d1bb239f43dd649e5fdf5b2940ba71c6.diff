[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlEncodingFilter.java, +		/* Cache the index of the path within the DispatcherServlet mapping. */, +		private Integer indexLookupPath;, +, +			initIndexLookupPath(resourceUrlProvider);, +			String prefix = url.substring(0, this.indexLookupPath);, +			String lookupPath = url.substring(this.indexLookupPath);, +			lookupPath = resourceUrlProvider.getForLookupPath(lookupPath);, +			return (lookupPath != null ? super.encodeURL(prefix + lookupPath) : super.encodeURL(url));, +		private void initIndexLookupPath(ResourceUrlProvider urlProvider) {, +			if (this.indexLookupPath == null) {, +				String requestUri = urlProvider.getPathHelper().getRequestUri(this.request);, +				String lookupPath = urlProvider.getPathHelper().getLookupPathForRequest(this.request);, +				this.indexLookupPath = requestUri.indexOf(lookupPath);, +			}, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlEncodingFilter.java, +		/* Cache the index of the path within the DispatcherServlet mapping. */, +		private Integer indexLookupPath;, +, +			initIndexLookupPath(resourceUrlProvider);, +			String prefix = url.substring(0, this.indexLookupPath);, +			String lookupPath = url.substring(this.indexLookupPath);, +			lookupPath = resourceUrlProvider.getForLookupPath(lookupPath);, +			return (lookupPath != null ? super.encodeURL(prefix + lookupPath) : super.encodeURL(url));, +		private void initIndexLookupPath(ResourceUrlProvider urlProvider) {, +			if (this.indexLookupPath == null) {, +				String requestUri = urlProvider.getPathHelper().getRequestUri(this.request);, +				String lookupPath = urlProvider.getPathHelper().getLookupPathForRequest(this.request);, +				this.indexLookupPath = requestUri.indexOf(lookupPath);, +			}, +		}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/ResourceUrlProviderJavaConfigTests.java, +	public void resolvePathWithServletMappedByPrefix() throws Exception {, +	@Test, +	public void resolvePathNoMatch() throws Exception {, +		this.request.setRequestURI("/myapp/myservlet/index");, +		this.request.setServletPath("/myservlet");, +		this.filterChain.doFilter(this.request, this.response);, +, +		assertEquals("/myapp/myservlet/index", resolvePublicResourceUrlPath("/myapp/myservlet/index"));, +	}, +, +]