[+++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +				paramType = (method != null ?, +						(KotlinDetector.isKotlinReflectPresent() && KotlinDetector.isKotlinType(getContainingClass()) ?, +						KotlinDelegate.getReturnType(method) : method.getReturnType()) : void.class);, +				paramType = (method != null ?, +						(KotlinDetector.isKotlinReflectPresent() && KotlinDetector.isKotlinType(getContainingClass()) ?, +						KotlinDelegate.getGenericReturnType(method) : method.getGenericReturnType()) : void.class);, +, +		/**, +		 * Return the generic return type of the method, with support of suspending, +		 * functions via Kotlin reflection., +		 */, +		static private Type getGenericReturnType(Method method) {, +			KFunction<?> function = ReflectJvmMapping.getKotlinFunction(method);, +			if (function != null && function.isSuspend()) {, +				return ReflectJvmMapping.getJavaType(function.getReturnType());, +			}, +			return method.getGenericReturnType();, +		/**, +		 * Return the return type of the method, with support of suspending, +		 * functions via Kotlin reflection., +		 */, +		static private Class<?> getReturnType(Method method) {, +			KFunction<?> function = ReflectJvmMapping.getKotlinFunction(method);, +			if (function != null && function.isSuspend()) {, +				Type paramType = ReflectJvmMapping.getJavaType(function.getReturnType());, +				Class<?> paramClass = ResolvableType.forType(paramType).resolve();, +				Assert.notNull(paramClass, "Type " + paramType + "can't be resolved to a class");, +				return paramClass;, +			}, +			return method.getReturnType();, +		}, +	}, +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +				paramType = (method != null ?, +						(KotlinDetector.isKotlinReflectPresent() && KotlinDetector.isKotlinType(getContainingClass()) ?, +						KotlinDelegate.getReturnType(method) : method.getReturnType()) : void.class);, +				paramType = (method != null ?, +						(KotlinDetector.isKotlinReflectPresent() && KotlinDetector.isKotlinType(getContainingClass()) ?, +						KotlinDelegate.getGenericReturnType(method) : method.getGenericReturnType()) : void.class);, +, +		/**, +		 * Return the generic return type of the method, with support of suspending, +		 * functions via Kotlin reflection., +		 */, +		static private Type getGenericReturnType(Method method) {, +			KFunction<?> function = ReflectJvmMapping.getKotlinFunction(method);, +			if (function != null && function.isSuspend()) {, +				return ReflectJvmMapping.getJavaType(function.getReturnType());, +			}, +			return method.getGenericReturnType();, +		/**, +		 * Return the return type of the method, with support of suspending, +		 * functions via Kotlin reflection., +		 */, +		static private Class<?> getReturnType(Method method) {, +			KFunction<?> function = ReflectJvmMapping.getKotlinFunction(method);, +			if (function != null && function.isSuspend()) {, +				Type paramType = ReflectJvmMapping.getJavaType(function.getReturnType());, +				Class<?> paramClass = ResolvableType.forType(paramType).resolve();, +				Assert.notNull(paramClass, "Type " + paramType + "can't be resolved to a class");, +				return paramClass;, +			}, +			return method.getReturnType();, +		}, +	}, +++ b/spring-core/src/test/kotlin/org/springframework/core/KotlinGenericTypeResolverTests.kt, +/*, + * Copyright 2002-2019 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.core, +, +import org.junit.Assert.assertEquals, +import org.junit.Test, +import org.springframework.core.GenericTypeResolver.resolveReturnTypeArgument, +import java.lang.reflect.Method, +, +/**, + * Tests for Kotlin support in [GenericTypeResolver]., + *, + * @author Konrad Kaminski, + * @author Sebastien Deleuze, + */, +class KotlinGenericTypeResolverTests {, +, +	@Test, +	fun methodReturnTypes() {]