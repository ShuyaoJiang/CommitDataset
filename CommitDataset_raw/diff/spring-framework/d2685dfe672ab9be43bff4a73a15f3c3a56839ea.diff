[+++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java, +import org.springframework.web.util.pattern.ParsingPathMatcher;, +		String lookupPath = LookupPath.getCurrent(exchange).getPath();, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java, +import org.springframework.web.util.pattern.ParsingPathMatcher;, +		String lookupPath = LookupPath.getCurrent(exchange).getPath();, +++ b/spring-web/src/main/java/org/springframework/web/server/support/LookupPath.java, +import org.springframework.web.server.ServerWebExchange;, + * @author Rossen Stoyanchev, +	/**, +	 * Name of request attribute under which the LookupPath is stored via, +	 * {@link #getOrCreate} and accessed via {@link #getCurrent}., +	 */, +	public static final String LOOKUP_PATH_ATTRIBUTE_NAME = LookupPath.class.getName();, +, +	/**, +	 * Get the LookupPath for the current request from the request attribute, +	 * {@link #LOOKUP_PATH_ATTRIBUTE_NAME} or otherwise create and stored it, +	 * under that attribute for subsequent use., +	 * @param exchange the current exchange, +	 * @param pathHelper the pathHelper to create the LookupPath with, +	 * @return the LookupPath for the current request, +	 */, +	public static LookupPath getOrCreate(ServerWebExchange exchange, HttpRequestPathHelper pathHelper) {, +		return exchange.<LookupPath>getAttribute(LookupPath.LOOKUP_PATH_ATTRIBUTE_NAME), +				.orElseGet(() -> {, +					LookupPath lookupPath = pathHelper.getLookupPathForRequest(exchange);, +					exchange.getAttributes().put(LookupPath.LOOKUP_PATH_ATTRIBUTE_NAME, lookupPath);, +					return lookupPath;, +				});, +	}, +, +	/**, +	 * Get the LookupPath for the current request from the request attribute, +	 * {@link #LOOKUP_PATH_ATTRIBUTE_NAME} or raise an {@link IllegalStateException}, +	 * if not found., +	 * @param exchange the current exchange, +	 * @return the LookupPath, never {@code null}, +	 */, +	public static LookupPath getCurrent(ServerWebExchange exchange) {, +		return exchange.<LookupPath>getAttribute(LookupPath.LOOKUP_PATH_ATTRIBUTE_NAME), +				.orElseThrow(() -> new IllegalStateException("No LookupPath attribute."));, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java, +import org.springframework.web.util.pattern.ParsingPathMatcher;, +		String lookupPath = LookupPath.getCurrent(exchange).getPath();, +++ b/spring-web/src/main/java/org/springframework/web/server/support/LookupPath.java, +import org.springframework.web.server.ServerWebExchange;, + * @author Rossen Stoyanchev, +	/**, +	 * Name of request attribute under which the LookupPath is stored via, +	 * {@link #getOrCreate} and accessed via {@link #getCurrent}., +	 */, +	public static final String LOOKUP_PATH_ATTRIBUTE_NAME = LookupPath.class.getName();, +, +	/**, +	 * Get the LookupPath for the current request from the request attribute, +	 * {@link #LOOKUP_PATH_ATTRIBUTE_NAME} or otherwise create and stored it, +	 * under that attribute for subsequent use., +	 * @param exchange the current exchange, +	 * @param pathHelper the pathHelper to create the LookupPath with, +	 * @return the LookupPath for the current request, +	 */, +	public static LookupPath getOrCreate(ServerWebExchange exchange, HttpRequestPathHelper pathHelper) {, +		return exchange.<LookupPath>getAttribute(LookupPath.LOOKUP_PATH_ATTRIBUTE_NAME), +				.orElseGet(() -> {, +					LookupPath lookupPath = pathHelper.getLookupPathForRequest(exchange);, +					exchange.getAttributes().put(LookupPath.LOOKUP_PATH_ATTRIBUTE_NAME, lookupPath);, +					return lookupPath;, +				});, +	}, +, +	/**, +	 * Get the LookupPath for the current request from the request attribute, +	 * {@link #LOOKUP_PATH_ATTRIBUTE_NAME} or raise an {@link IllegalStateException}, +	 * if not found., +	 * @param exchange the current exchange, +	 * @return the LookupPath, never {@code null}, +	 */, +	public static LookupPath getCurrent(ServerWebExchange exchange) {, +		return exchange.<LookupPath>getAttribute(LookupPath.LOOKUP_PATH_ATTRIBUTE_NAME), +				.orElseThrow(() -> new IllegalStateException("No LookupPath attribute."));, +	}, +, +++ b/spring-web/src/test/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSourceTests.java, +		LookupPath.getOrCreate(exchange, new HttpRequestPathHelper());, +		LookupPath.getOrCreate(exchange, new HttpRequestPathHelper());, +		LookupPath.getOrCreate(exchange, new HttpRequestPathHelper());, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java, +import org.springframework.web.util.pattern.ParsingPathMatcher;, +		String lookupPath = LookupPath.getCurrent(exchange).getPath();, +++ b/spring-web/src/main/java/org/springframework/web/server/support/LookupPath.java, +import org.springframework.web.server.ServerWebExchange;, + * @author Rossen Stoyanchev, +	/**, +	 * Name of request attribute under which the LookupPath is stored via, +	 * {@link #getOrCreate} and accessed via {@link #getCurrent}., +	 */, +	public static final String LOOKUP_PATH_ATTRIBUTE_NAME = LookupPath.class.getName();]