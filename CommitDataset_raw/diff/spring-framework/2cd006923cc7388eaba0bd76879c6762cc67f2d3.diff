[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, + * Spring's default implementation of the {@link ConfigurableListableBeanFactory}, + * and {@link BeanDefinitionRegistry} interfaces: a full-fledged bean factory, + * based on bean definition metadata, extensible through post-processors., + * from a bean definition file), before accessing beans. Bean lookup by name, + * operating on pre-resolved bean definition metadata objects., + * <p>Note that readers for specific bean definition formats are typically, + * implemented separately rather than as bean factory subclasses:, + * @see #registerBeanDefinition, + * @see #addBeanPostProcessor, + * @see #getBean, + * @see #resolveDependency, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, + * Spring's default implementation of the {@link ConfigurableListableBeanFactory}, + * and {@link BeanDefinitionRegistry} interfaces: a full-fledged bean factory, + * based on bean definition metadata, extensible through post-processors., + * from a bean definition file), before accessing beans. Bean lookup by name, + * operating on pre-resolved bean definition metadata objects., + * <p>Note that readers for specific bean definition formats are typically, + * implemented separately rather than as bean factory subclasses:, + * @see #registerBeanDefinition, + * @see #addBeanPostProcessor, + * @see #getBean, + * @see #resolveDependency, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunctions.java, + * Exposes routing functionality, such as to {@linkplain #route() create} a, + * {@code RouterFunction} using a discoverable builder-style API, to, +	private static final HandlerFunction<ServerResponse> NOT_FOUND_HANDLER =, +			request -> ServerResponse.notFound().build();, +, +, +, +	 * Represents a discoverable builder for router functions., +	 * Obtained via {@link RouterFunctions#route()}., +		 *     .GET("/user", RequestPredicates.accept(MediaType.APPLICATION_JSON), userController::listUsers), +		 *     .POST("/user", RequestPredicates.contentType(MediaType.APPLICATION_JSON), userController::addUser), +		 *     .PUT("/user", RequestPredicates.contentType(MediaType.APPLICATION_JSON), userController::editUser), +		 *     .PATCH("/user", RequestPredicates.contentType(MediaType.APPLICATION_JSON), userController::editUser), +		 * RouterFunctionlt;ServerResponsegt; route =, +		 *         .POST(this::createUser), +		 *         .build()), +		 *              .POST(this::createUser)), +		 *              .POST(this::createUser)), +, +, +, +, +	private static final class DefaultRouterFunction<T extends ServerResponse> extends AbstractRouterFunction<T> {, +, +	private static final class DefaultNestedRouterFunction<T extends ServerResponse> extends AbstractRouterFunction<T> {, +				Map<String, String> oldVariables =, +						(Map<String, String>) request.attribute(RouterFunctions.URI_TEMPLATE_VARIABLES_ATTRIBUTE), +, +]