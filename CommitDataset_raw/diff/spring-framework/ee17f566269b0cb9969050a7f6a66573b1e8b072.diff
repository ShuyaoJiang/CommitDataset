[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java, +import org.springframework.http.HttpMethod;, +		if (inputMessage.getMethod() == HttpMethod.GET || inputMessage.getMethod() == HttpMethod.HEAD) {, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java, +import org.springframework.http.HttpMethod;, +		if (inputMessage.getMethod() == HttpMethod.GET || inputMessage.getMethod() == HttpMethod.HEAD) {, +		}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessorMockTests.java, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +	@Rule, +	public ExpectedException thrown = ExpectedException.none();, +, +, +, +, +, +, +, +, +, +, +	public void shouldResolveHttpEntityArgument() throws Exception {, +	public void shouldResolveRequestEntityArgument() throws Exception {, +	@Test, +	public void shouldFailResolvingWhenConverterCannotRead() throws Exception {, +		this.thrown.expect(HttpMediaTypeNotSupportedException.class);, +	public void shouldFailResolvingWhenContentTypeNotSupported() throws Exception {, +		servletRequest.setMethod("POST");, +		servletRequest.setContent("some content".getBytes(StandardCharsets.UTF_8));, +		this.thrown.expect(HttpMediaTypeNotSupportedException.class);, +		processor.resolveArgument(paramHttpEntity, mavContainer, webRequest, null);, +	}, +, +	@Test, +	public void shouldHandleReturnValue() throws Exception {, +	public void shouldHandleReturnValueWithProducibleMediaType() throws Exception {, +	public void shouldHandleReturnValueWithResponseBodyAdvice() throws Exception {, +		ResponseEntity<String> returnValue = new ResponseEntity<>(HttpStatus.OK);, +	@Test, +	public void shouldFailHandlingWhenContentTypeNotSupported() throws Exception {, +		this.thrown.expect(HttpMediaTypeNotAcceptableException.class);, +	@Test, +	public void shouldFailHandlingWhenConverterCannotWrite() throws Exception {, +		this.thrown.expect(HttpMediaTypeNotAcceptableException.class);, +	@Test // SPR-9142, +	public void shouldFailHandlingWhenAcceptHeaderIllegal() throws Exception {, +		this.thrown.expect(HttpMediaTypeNotAcceptableException.class);, +	public void shouldHandleResponseHeaderNoBody() throws Exception {, +	public void shouldHandleResponseHeaderAndBody() throws Exception {, +	public void shouldHandleLastModifiedWithHttp304() throws Exception {, +		ResponseEntity<String> returnValue = ResponseEntity.ok().lastModified(oneMinuteAgo).body("body");, +		assertConditionalResponse(HttpStatus.NOT_MODIFIED, null, null, oneMinuteAgo);, +	public void handleEtagWithHttp304() throws Exception {, +		ResponseEntity<String> returnValue = ResponseEntity.ok().eTag(etagValue).body("body");, +		assertConditionalResponse(HttpStatus.NOT_MODIFIED, null, etagValue, -1);, +	public void shouldHandleInvalidIfNoneMatchWithHttp200() throws Exception {, +		ResponseEntity<String> returnValue = ResponseEntity.ok().eTag(etagValue).body("body");, +		assertConditionalResponse(HttpStatus.OK, "body", etagValue, -1);, +	public void shouldHandleETagAndLastModifiedWithHttp304() throws Exception {, +		ResponseEntity<String> returnValue = ResponseEntity.ok().eTag(etagValue).lastModified(oneMinuteAgo).body("body");, +		assertConditionalResponse(HttpStatus.NOT_MODIFIED, null, etagValue, oneMinuteAgo);, +	public void shouldHandleNotModifiedResponse() throws Exception {, +		ResponseEntity<String> returnValue = ResponseEntity.status(HttpStatus.NOT_MODIFIED), +				.eTag(etagValue).lastModified(oneMinuteAgo).body("body");, +		assertConditionalResponse(HttpStatus.NOT_MODIFIED, null, etagValue, oneMinuteAgo);, +	public void shouldHandleChangedETagAndLastModified() throws Exception {, +		ResponseEntity<String> returnValue = ResponseEntity.ok(), +				.eTag(changedEtagValue).lastModified(oneMinuteAgo).body("body");, +		assertConditionalResponse(HttpStatus.OK, null, changedEtagValue, oneMinuteAgo);, +	@Test // SPR-13496, +	public void shouldHandleConditionalRequestIfNoneMatchWildcard() throws Exception {, +		ResponseEntity<String> returnValue = ResponseEntity.ok().eTag(etagValue).body("body");, +		assertConditionalResponse(HttpStatus.OK, "body", etagValue, -1);, +	@Test // SPR-13626, +	public void shouldHandleGetIfNoneMatchWildcard() throws Exception {, +		ResponseEntity<String> returnValue = ResponseEntity.ok().eTag(etagValue).body("body");, +		assertConditionalResponse(HttpStatus.OK, "body", etagValue, -1);, +	@Test // SPR-13626, +	public void shouldHandleIfNoneMatchIfMatch() throws Exception {, +		ResponseEntity<String> returnValue = ResponseEntity.ok().eTag(etagValue).body("body");, +		assertConditionalResponse(HttpStatus.NOT_MODIFIED, null, etagValue, -1);, +	@Test // SPR-13626, +	public void shouldHandleIfNoneMatchIfUnmodifiedSince() throws Exception {, +		ResponseEntity<String> returnValue = ResponseEntity.ok().eTag(etagValue).body("body");, +		assertConditionalResponse(HttpStatus.NOT_MODIFIED, null, etagValue, -1);, +	public void shouldHandleResource() throws Exception {, +	@Test //SPR-14767, +	public void shouldHandleValidatorHeadersInPutResponses() throws Exception {, +		servletRequest.setMethod("PUT");, +		String etagValue = "\"some-etag\"";, +		ResponseEntity<String> returnValue = ResponseEntity.ok().header(HttpHeaders.ETAG, etagValue).body("body");, +, +		initStringMessageConversion(MediaType.TEXT_PLAIN);, +		processor.handleReturnValue(returnValue, returnTypeResponseEntity, mavContainer, webRequest);, +, +		assertConditionalResponse(HttpStatus.OK, "body", etagValue, -1);, +	}, +]