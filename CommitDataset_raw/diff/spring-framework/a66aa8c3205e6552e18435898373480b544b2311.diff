[+++ b/org.springframework.context/src/main/java/org/springframework/model/binder/Binder.java, + * @param <M> The type of model this binder binds to, +public interface Binder<M> {, +	 * @param model the model to bind to, +	BindingResults bind(Map<String, ? extends Object> fieldValues, M model);, +++ b/org.springframework.context/src/main/java/org/springframework/model/binder/Binder.java, + * @param <M> The type of model this binder binds to, +public interface Binder<M> {, +	 * @param model the model to bind to, +	BindingResults bind(Map<String, ? extends Object> fieldValues, M model);, +++ b/org.springframework.context/src/main/java/org/springframework/model/binder/support/AbstractBinder.java, + * Base Binder implementation that defines common structural elements., + * Subclasses should parameterized & implement {@link #bind(Map, Object)}., + * @see #bind(Map, Object), + * @see #createBindTemplate(), +public abstract class AbstractBinder<M> implements Binder<M> {, +	private BindTemplate bindTemplate;, +	public AbstractBinder() {, +		bindTemplate = createBindTemplate();, +	}, +, +		bindTemplate.setRequiredFields(fieldNames);, +	public abstract BindingResults bind(Map<String, ? extends Object> fieldValues, M model);, +	// subclass hooks, +	 * Create the template defining the bulk-binding algorithm., +	 * Subclasses may override to customize the algorithm., +	protected BindTemplate createBindTemplate() {, +		return new BindTemplate();, +	}, +, +	/**, +	 * The template defining the bulk-binding algorithm., +	 */, +	protected BindTemplate getBindTemplate() {, +		return bindTemplate;, +++ b/org.springframework.context/src/main/java/org/springframework/model/binder/Binder.java, + * @param <M> The type of model this binder binds to, +public interface Binder<M> {, +	 * @param model the model to bind to, +	BindingResults bind(Map<String, ? extends Object> fieldValues, M model);, +++ b/org.springframework.context/src/main/java/org/springframework/model/binder/support/AbstractBinder.java, + * Base Binder implementation that defines common structural elements., + * Subclasses should parameterized & implement {@link #bind(Map, Object)}., + * @see #bind(Map, Object), + * @see #createBindTemplate(), +public abstract class AbstractBinder<M> implements Binder<M> {, +	private BindTemplate bindTemplate;, +	public AbstractBinder() {, +		bindTemplate = createBindTemplate();, +	}, +, +		bindTemplate.setRequiredFields(fieldNames);, +	public abstract BindingResults bind(Map<String, ? extends Object> fieldValues, M model);, +	// subclass hooks, +	 * Create the template defining the bulk-binding algorithm., +	 * Subclasses may override to customize the algorithm., +	protected BindTemplate createBindTemplate() {, +		return new BindTemplate();, +	}, +, +	/**, +	 * The template defining the bulk-binding algorithm., +	 */, +	protected BindTemplate getBindTemplate() {, +		return bindTemplate;, +++ b/org.springframework.context/src/main/java/org/springframework/model/binder/support/BindTemplate.java, +/*, + * Copyright 2004-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.model.binder.support;, +, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Map;, +, +import org.springframework.model.binder.BindingResults;, +import org.springframework.model.binder.MissingFieldException;, +, +/**, + * A template that encapsulates the general bulk-binding algorithm., + * @author Keith Donald, + * @since 3.0, + * @see #setRequiredFields(String[]), + * @see #bind(Map), + */, +public class BindTemplate  {, +, +	private String[] requiredFields;]