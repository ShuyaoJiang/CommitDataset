[+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +import java.util.HashMap;, +import org.springframework.web.util.UriComponents.UriTemplateVariables;, +	private final Map<String, Object> uriVariables = new HashMap<>(4);, +, +		UriComponents result;, +			result = new OpaqueUriComponents(this.scheme, this.ssp, this.fragment);, +			HierarchicalUriComponents uric = new HierarchicalUriComponents(this.scheme, this.fragment,, +					this.userInfo, this.host, this.port, this.pathBuilder.build(), this.queryParams, encoded);, +, +			result = this.encodeTemplate ? uric.encodeTemplate(this.charset) : uric;, +		if (!this.uriVariables.isEmpty()) {, +			result = result.expand(name -> this.uriVariables.getOrDefault(name, UriTemplateVariables.SKIP_VALUE));, +		}, +		return result;, +		return encode().build().toUriString();, +	 * Configure URI variables to be expanded at build time., +	 * <p>The provided variables may be a subset of all required ones. At build, +	 * time, the available ones are expanded, while unresolved URI placeholders, +	 * are left in place and can still be expanded later., +	 * <p>In contrast to {@link UriComponents#expand(Map)} or, +	 * {@link #buildAndExpand(Map)}, this method is useful when you need to, +	 * supply URI variables without building the {@link UriComponents} instance, +	 * just yet, or perhaps pre-expand some shared default values such as host, +	 * and port., +	 * @param uriVariables the URI variables to use, +	 * @return this UriComponentsBuilder, +	 * @since 5.0.8, +	 */, +	public UriComponentsBuilder uriVariables(Map<String, Object> uriVariables) {, +		this.uriVariables.putAll(uriVariables);, +		return this;, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +import java.util.HashMap;, +import org.springframework.web.util.UriComponents.UriTemplateVariables;, +	private final Map<String, Object> uriVariables = new HashMap<>(4);, +, +		UriComponents result;, +			result = new OpaqueUriComponents(this.scheme, this.ssp, this.fragment);, +			HierarchicalUriComponents uric = new HierarchicalUriComponents(this.scheme, this.fragment,, +					this.userInfo, this.host, this.port, this.pathBuilder.build(), this.queryParams, encoded);, +, +			result = this.encodeTemplate ? uric.encodeTemplate(this.charset) : uric;, +		if (!this.uriVariables.isEmpty()) {, +			result = result.expand(name -> this.uriVariables.getOrDefault(name, UriTemplateVariables.SKIP_VALUE));, +		}, +		return result;, +		return encode().build().toUriString();, +	 * Configure URI variables to be expanded at build time., +	 * <p>The provided variables may be a subset of all required ones. At build, +	 * time, the available ones are expanded, while unresolved URI placeholders, +	 * are left in place and can still be expanded later., +	 * <p>In contrast to {@link UriComponents#expand(Map)} or, +	 * {@link #buildAndExpand(Map)}, this method is useful when you need to, +	 * supply URI variables without building the {@link UriComponents} instance, +	 * just yet, or perhaps pre-expand some shared default values such as host, +	 * and port., +	 * @param uriVariables the URI variables to use, +	 * @return this UriComponentsBuilder, +	 * @since 5.0.8, +	 */, +	public UriComponentsBuilder uriVariables(Map<String, Object> uriVariables) {, +		this.uriVariables.putAll(uriVariables);, +		return this;, +	}, +, +	/**, +++ b/spring-web/src/test/java/org/springframework/web/util/UriComponentsTests.java, +				.fromPath("/hotel list/{city} specials").queryParam("q", "{value}").encode(), +				.uriVariables(Collections.singletonMap("city", "Z\u00fcrich")), +				.build();, +		assertEquals("/hotel%20list/Z%C3%BCrich%20specials?q=a%2Bb", uri.expand("a+b").toString());, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +import java.util.HashMap;, +import org.springframework.web.util.UriComponents.UriTemplateVariables;, +	private final Map<String, Object> uriVariables = new HashMap<>(4);, +, +		UriComponents result;, +			result = new OpaqueUriComponents(this.scheme, this.ssp, this.fragment);, +			HierarchicalUriComponents uric = new HierarchicalUriComponents(this.scheme, this.fragment,, +					this.userInfo, this.host, this.port, this.pathBuilder.build(), this.queryParams, encoded);, +, +			result = this.encodeTemplate ? uric.encodeTemplate(this.charset) : uric;, +		if (!this.uriVariables.isEmpty()) {, +			result = result.expand(name -> this.uriVariables.getOrDefault(name, UriTemplateVariables.SKIP_VALUE));, +		}, +		return result;, +		return encode().build().toUriString();, +	 * Configure URI variables to be expanded at build time., +	 * <p>The provided variables may be a subset of all required ones. At build, +	 * time, the available ones are expanded, while unresolved URI placeholders, +	 * are left in place and can still be expanded later., +	 * <p>In contrast to {@link UriComponents#expand(Map)} or, +	 * {@link #buildAndExpand(Map)}, this method is useful when you need to, +	 * supply URI variables without building the {@link UriComponents} instance, +	 * just yet, or perhaps pre-expand some shared default values such as host, +	 * and port.]