[+++ b/spring-web/src/main/java/org/springframework/web/util/pattern/PathPattern.java, +		// Same object or null == null?, +		if (p1 == p2) {, +			return 0;, +		}, +, +		// null is sorted last, +		// catchall patterns are sorted last. If both catchall then the, +		// This will sort such that if they differ in terms of wildcards or, +		// longer is better, +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/PathPattern.java, +		// Same object or null == null?, +		if (p1 == p2) {, +			return 0;, +		}, +, +		// null is sorted last, +		// catchall patterns are sorted last. If both catchall then the, +		// This will sort such that if they differ in terms of wildcards or, +		// longer is better, +++ b/spring-web/src/test/java/org/springframework/web/util/pattern/PathPatternTests.java, +		Comparator<PathPattern> comparator = PathPattern.SPECIFICITY_COMPARATOR;, +	public void patternCompareToNull() {, +		Comparator<PathPattern> comparator = PathPattern.SPECIFICITY_COMPARATOR;, +		paths.add(null);, +		paths.sort(comparator);, +		assertNull(paths.get(0));, +		assertNull(paths.get(1));, +		paths.clear();, +, +		paths.add(null);, +		paths.sort(comparator);, +		paths.sort(comparator);, +		paths.sort(comparator);, +		paths.sort(comparator);, +		paths.sort(comparator);, +		paths.sort(comparator);, +		paths.sort(comparator);, +		paths.sort(comparator);, +		paths.sort(comparator);, +		paths.sort(comparator);]