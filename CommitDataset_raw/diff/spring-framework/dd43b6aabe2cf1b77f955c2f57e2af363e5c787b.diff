[+++ b/build.gradle, +		optional(project(":spring-aop")), +		optional(project(":spring-tx")), +++ b/build.gradle, +		optional(project(":spring-aop")), +		optional(project(":spring-tx")), +++ b/spring-test/src/main/java/org/springframework/test/util/ReflectionTestUtils.java, +import org.springframework.util.ClassUtils;, +	private static final boolean springAopPresent = ClassUtils.isPresent(, +			"org.springframework.aop.framework.Advised", ReflectionTestUtils.class.getClassLoader());, +, +		if (targetObject != null && springAopPresent) {, +			targetObject = AopTestUtils.getUltimateTargetObject(targetObject);, +		}, +			targetClass = targetObject.getClass();, +					safeToString(targetObject), targetClass));, +					safeToString(targetObject), targetClass, value));, +		ReflectionUtils.setField(field, targetObject, value);, +		if (targetObject != null && springAopPresent) {, +			targetObject = AopTestUtils.getUltimateTargetObject(targetObject);, +		}, +			targetClass = targetObject.getClass();, +					name, safeToString(targetObject), targetClass));, +					safeToString(targetObject), targetClass));, +		return ReflectionUtils.getField(field, targetObject);]