[+++ b/org.springframework.context/src/main/java/org/springframework/cache/config/AnnotationDrivenCacheBeanDefinitionParser.java, +import static org.springframework.context.annotation.AnnotationConfigUtils.*;, +import org.w3c.dom.Element;, +, +	private static void parseCacheManagerProperty(Element element, BeanDefinition def) {, +			parseCacheManagerProperty(element, def);, +			CacheNamespaceHandler.parseKeyGenerator(element, def);, +				parseCacheManagerProperty(element, interceptorDef);, +++ b/org.springframework.context/src/main/java/org/springframework/cache/config/AnnotationDrivenCacheBeanDefinitionParser.java, +import static org.springframework.context.annotation.AnnotationConfigUtils.*;, +import org.w3c.dom.Element;, +, +	private static void parseCacheManagerProperty(Element element, BeanDefinition def) {, +			parseCacheManagerProperty(element, def);, +			CacheNamespaceHandler.parseKeyGenerator(element, def);, +				parseCacheManagerProperty(element, interceptorDef);, +++ b/org.springframework.context/src/main/java/org/springframework/cache/config/CacheAdviceParser.java, +		CacheNamespaceHandler.parseKeyGenerator(element, builder.getBeanDefinition());, +++ b/org.springframework.context/src/main/java/org/springframework/cache/config/AnnotationDrivenCacheBeanDefinitionParser.java, +import static org.springframework.context.annotation.AnnotationConfigUtils.*;, +import org.w3c.dom.Element;, +, +	private static void parseCacheManagerProperty(Element element, BeanDefinition def) {, +			parseCacheManagerProperty(element, def);, +			CacheNamespaceHandler.parseKeyGenerator(element, def);, +				parseCacheManagerProperty(element, interceptorDef);, +++ b/org.springframework.context/src/main/java/org/springframework/cache/config/CacheAdviceParser.java, +		CacheNamespaceHandler.parseKeyGenerator(element, builder.getBeanDefinition());, +++ b/org.springframework.context/src/main/java/org/springframework/cache/config/CacheNamespaceHandler.java, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.config.RuntimeBeanReference;, +import org.springframework.util.StringUtils;, +	static BeanDefinition parseKeyGenerator(Element element, BeanDefinition def) {, +		String name = element.getAttribute("key-generator");, +		if (StringUtils.hasText(name)) {, +			def.getPropertyValues().add("keyGenerator", new RuntimeBeanReference(name.trim()));, +		}, +		return def;, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/cache/config/AnnotationDrivenCacheBeanDefinitionParser.java, +import static org.springframework.context.annotation.AnnotationConfigUtils.*;, +import org.w3c.dom.Element;, +, +	private static void parseCacheManagerProperty(Element element, BeanDefinition def) {, +			parseCacheManagerProperty(element, def);, +			CacheNamespaceHandler.parseKeyGenerator(element, def);, +				parseCacheManagerProperty(element, interceptorDef);, +++ b/org.springframework.context/src/main/java/org/springframework/cache/config/CacheAdviceParser.java, +		CacheNamespaceHandler.parseKeyGenerator(element, builder.getBeanDefinition());, +++ b/org.springframework.context/src/main/java/org/springframework/cache/config/CacheNamespaceHandler.java, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.config.RuntimeBeanReference;, +import org.springframework.util.StringUtils;, +	static BeanDefinition parseKeyGenerator(Element element, BeanDefinition def) {, +		String name = element.getAttribute("key-generator");, +		if (StringUtils.hasText(name)) {, +			def.getPropertyValues().add("keyGenerator", new RuntimeBeanReference(name.trim()));, +		}, +		return def;, +	}, +, +++ b/org.springframework.context/src/main/resources/org/springframework/cache/config/spring-cache-3.1.xsd, +			<xsd:attribute name="key-generator" type="xsd:string">, +				<xsd:annotation>, +					<xsd:documentation source="java:org.springframework.cache.interceptor.KeyGenerator"><![CDATA[, +	The bean name of the KeyGenerator that is to be used to retrieve the backing caches., +	, +	This attribute is not required, and only needs to be specified, +	explicitly if the default strategy (DefaultKeyGenerator) is not sufficient., +					]]></xsd:documentation>, +					<xsd:appinfo>, +						<tool:annotation kind="ref">, +							<tool:expected-type type="org.springframework.cache.interceptor.KeyGenerator"/>, +						</tool:annotation>, +					</xsd:appinfo>, +				</xsd:annotation>, +			</xsd:attribute>, +					<xsd:attribute name="key-generator" type="xsd:string">, +						<xsd:annotation>, +							<xsd:documentation source="java:org.springframework.cache.interceptor.KeyGenerator"><![CDATA[, +	The bean name of the KeyGenerator that is to be used to retrieve the backing caches., +	, +	This attribute is not required, and only needs to be specified, +	explicitly if the default strategy (DefaultKeyGenerator) is not sufficient., +							]]></xsd:documentation>, +							<xsd:appinfo>, +								<tool:annotation kind="ref">, +									<tool:expected-type type="org.springframework.cache.interceptor.KeyGenerator"/>, +								</tool:annotation>, +							</xsd:appinfo>, +						</xsd:annotation>, +					</xsd:attribute>					, +++ b/org.springframework.context/src/main/java/org/springframework/cache/config/AnnotationDrivenCacheBeanDefinitionParser.java, +import static org.springframework.context.annotation.AnnotationConfigUtils.*;, +import org.w3c.dom.Element;, +, +	private static void parseCacheManagerProperty(Element element, BeanDefinition def) {, +			parseCacheManagerProperty(element, def);, +			CacheNamespaceHandler.parseKeyGenerator(element, def);]