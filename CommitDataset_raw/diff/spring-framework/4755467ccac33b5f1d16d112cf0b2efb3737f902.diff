[+++ b/spring-core/src/main/java/org/springframework/core/convert/ConverterNotFoundException.java, + * Exception to be thrown when a suitable converter could not be found, + * in a given conversion service., + * @author Juergen Hoeller, +++ b/spring-core/src/main/java/org/springframework/core/convert/ConverterNotFoundException.java, + * Exception to be thrown when a suitable converter could not be found, + * in a given conversion service., + * @author Juergen Hoeller, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/DefaultConversionServiceTests.java, +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("rawtypes"), +	// test fields and helpers, +, +	public List<Integer> genericList = new ArrayList<Integer>();, +, +	public Stream<Integer> genericStream;, +, +	public Map<Integer, FooEnum> genericMap = new HashMap<Integer, FooEnum>();, +, +	public EnumSet<Foo> enumSet;, +, +	public Object assignableTarget;, +, +, +	public void handlerMethod(List<Color> color) {, +	}, +, +, +	public enum Foo {, +		BAR, BAZ, +	}, +, +, +	public enum SubFoo {, +, +		BAR {, +			@Override, +			String s() {, +				return "x";, +			}, +		},, +		BAZ {, +			@Override, +			String s() {, +				return "y";, +			}, +		};, +, +		abstract String s();, +	}, +, +, +	public class ColorConverter implements Converter<String, Color> {, +, +		@Override, +		public Color convert(String source) { if (!source.startsWith("#")) source = "#" + source; return Color.decode(source); }, +	}, +, +]