[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Bean.java, +@Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE}), +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Bean.java, +@Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE}), +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +		if (scopeAttributes != null) {, +					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Bean.java, +@Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE}), +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +		if (scopeAttributes != null) {, +					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +				return (AnnotationUtils.findAnnotation(candidateMethod, Bean.class) != null ? 0 : 1);, +			Bean bean = AnnotationUtils.findAnnotation(method, Bean.class);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Bean.java, +@Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE}), +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +		if (scopeAttributes != null) {, +					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +				return (AnnotationUtils.findAnnotation(candidateMethod, Bean.class) != null ? 0 : 1);, +			Bean bean = AnnotationUtils.findAnnotation(method, Bean.class);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Scope.java, +	 * <p>Defaults to {@link ScopedProxyMode#NO}, indicating that no scoped, +	 * proxy should be created., +	 * <p>Analogous to {@literal <aop:scoped-proxy/>} support in Spring XML., +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Bean.java, +@Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE}), +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +		if (scopeAttributes != null) {, +					new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +				return (AnnotationUtils.findAnnotation(candidateMethod, Bean.class) != null ? 0 : 1);, +			Bean bean = AnnotationUtils.findAnnotation(method, Bean.class);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Scope.java, +	 * <p>Defaults to {@link ScopedProxyMode#NO}, indicating that no scoped, +	 * proxy should be created., +	 * <p>Analogous to {@literal <aop:scoped-proxy/>} support in Spring XML., +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/ScopingTests.java, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +		if (customScope != null) {, +		}, +		beanFactory.registerBeanDefinition("config", new RootBeanDefinition(configClass));, +		assertEquals(9, ctx.getBeanDefinitionCount());, +, +, +		@MyScope, +		@MyScope, +		@MyProxiedScope, +		@MyProxiedScope, +	@Target({ElementType.METHOD}), +	@Retention(RetentionPolicy.RUNTIME), +	@Scope(SCOPE), +	@interface MyScope {, +	}, +, +, +	@Target({ElementType.METHOD}), +	@Retention(RetentionPolicy.RUNTIME), +	@Bean, +	@Scope(value=SCOPE, proxyMode=ScopedProxyMode.TARGET_CLASS), +	@interface MyProxiedScope {, +	}, +, +]