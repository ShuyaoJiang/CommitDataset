[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +	 * Get all {@link Annotation Annotations} from the supplied Method, Constructor or Field., +	 * @param annotatedElement the Method, Constructor or Field to retrieve annotations from, +	 * @return the annotations found, +	 * @since 4.0.8, +	 */, +	public static Annotation[] getAnnotations(AnnotatedElement annotatedElement) {, +		try {, +			return annotatedElement.getAnnotations();, +		}, +		catch (Exception ex) {, +			// Assuming nested Class values not resolvable within annotation attributes..., +			logIntrospectionFailure(annotatedElement, ex);, +			return null;, +		}, +	}, +, +	/**, +	 * @param method the Method to retrieve annotations from, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +	 * Get all {@link Annotation Annotations} from the supplied Method, Constructor or Field., +	 * @param annotatedElement the Method, Constructor or Field to retrieve annotations from, +	 * @return the annotations found, +	 * @since 4.0.8, +	 */, +	public static Annotation[] getAnnotations(AnnotatedElement annotatedElement) {, +		try {, +			return annotatedElement.getAnnotations();, +		}, +		catch (Exception ex) {, +			// Assuming nested Class values not resolvable within annotation attributes..., +			logIntrospectionFailure(annotatedElement, ex);, +			return null;, +		}, +	}, +, +	/**, +	 * @param method the Method to retrieve annotations from, +++ b/spring-core/src/main/java/org/springframework/core/type/classreading/AbstractRecursiveAnnotationVisitor.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.core.type.classreading;, +, +import java.lang.reflect.Field;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +import org.springframework.asm.AnnotationVisitor;, +import org.springframework.asm.SpringAsmInfo;, +import org.springframework.asm.Type;, +import org.springframework.core.annotation.AnnotationAttributes;, +import org.springframework.util.ReflectionUtils;, +, +/**, + * @author Chris Beams, + * @author Juergen Hoeller, + * @author Phillip Webb, + * @author Sam Brannen, + * @since 3.1.1, + */, +abstract class AbstractRecursiveAnnotationVisitor extends AnnotationVisitor {, +, +	protected final Log logger = LogFactory.getLog(getClass());, +, +	protected final AnnotationAttributes attributes;, +, +	protected final ClassLoader classLoader;, +, +, +	public AbstractRecursiveAnnotationVisitor(ClassLoader classLoader, AnnotationAttributes attributes) {, +		super(SpringAsmInfo.ASM_VERSION);, +		this.classLoader = classLoader;, +		this.attributes = attributes;, +	}, +, +, +	@Override, +	public void visit(String attributeName, Object attributeValue) {, +		this.attributes.put(attributeName, attributeValue);, +	}, +, +	@Override, +	public AnnotationVisitor visitAnnotation(String attributeName, String asmTypeDescriptor) {, +		String annotationType = Type.getType(asmTypeDescriptor).getClassName();, +		AnnotationAttributes nestedAttributes = new AnnotationAttributes();]