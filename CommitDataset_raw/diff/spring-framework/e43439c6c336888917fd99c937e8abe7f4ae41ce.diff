[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/BeanPropertySqlParameterSource.java, + * Copyright 2002-2018 the original author or authors., +	 * Derives a default SQL type from the corresponding property type., +	 * @see org.springframework.jdbc.core.StatementCreatorUtils#javaTypeToSqlParameterType, +	 */, +	@Override, +	public int getSqlType(String paramName) {, +		int sqlType = super.getSqlType(paramName);, +		if (sqlType != TYPE_UNKNOWN) {, +			return sqlType;, +		}, +		Class<?> propType = this.beanWrapper.getPropertyType(paramName);, +		return StatementCreatorUtils.javaTypeToSqlParameterType(propType);, +	}, +, +	@Override, +	@Nullable, +	public String[] getParameterNames() {, +		return getReadablePropertyNames();, +	}, +, +	/**, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/BeanPropertySqlParameterSource.java, + * Copyright 2002-2018 the original author or authors., +	 * Derives a default SQL type from the corresponding property type., +	 * @see org.springframework.jdbc.core.StatementCreatorUtils#javaTypeToSqlParameterType, +	 */, +	@Override, +	public int getSqlType(String paramName) {, +		int sqlType = super.getSqlType(paramName);, +		if (sqlType != TYPE_UNKNOWN) {, +			return sqlType;, +		}, +		Class<?> propType = this.beanWrapper.getPropertyType(paramName);, +		return StatementCreatorUtils.javaTypeToSqlParameterType(propType);, +	}, +, +	@Override, +	@Nullable, +	public String[] getParameterNames() {, +		return getReadablePropertyNames();, +	}, +, +	/**, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/EmptySqlParameterSource.java, + * Copyright 2002-2018 the original author or authors., +	@Override, +	@Nullable, +	public String[] getParameterNames() {, +		return null;, +	}, +, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/BeanPropertySqlParameterSource.java, + * Copyright 2002-2018 the original author or authors., +	 * Derives a default SQL type from the corresponding property type., +	 * @see org.springframework.jdbc.core.StatementCreatorUtils#javaTypeToSqlParameterType, +	 */, +	@Override, +	public int getSqlType(String paramName) {, +		int sqlType = super.getSqlType(paramName);, +		if (sqlType != TYPE_UNKNOWN) {, +			return sqlType;, +		}, +		Class<?> propType = this.beanWrapper.getPropertyType(paramName);, +		return StatementCreatorUtils.javaTypeToSqlParameterType(propType);, +	}, +, +	@Override, +	@Nullable, +	public String[] getParameterNames() {, +		return getReadablePropertyNames();, +	}, +, +	/**, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/EmptySqlParameterSource.java, + * Copyright 2002-2018 the original author or authors., +	@Override, +	@Nullable, +	public String[] getParameterNames() {, +		return null;, +	}, +, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/MapSqlParameterSource.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.util.StringUtils;, +	@Override, +	@Nullable, +	public String[] getParameterNames() {, +		return StringUtils.toStringArray(this.values.keySet());, +	}, +, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/BeanPropertySqlParameterSource.java, + * Copyright 2002-2018 the original author or authors., +	 * Derives a default SQL type from the corresponding property type., +	 * @see org.springframework.jdbc.core.StatementCreatorUtils#javaTypeToSqlParameterType, +	 */, +	@Override, +	public int getSqlType(String paramName) {, +		int sqlType = super.getSqlType(paramName);, +		if (sqlType != TYPE_UNKNOWN) {]