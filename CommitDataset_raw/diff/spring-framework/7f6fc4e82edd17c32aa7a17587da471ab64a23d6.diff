[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutionException.java, +	 * Returns the actual value we tried to convert, an instance of {@link #getSourceType()}., +	public TypeDescriptor getSourceType() {, +	public TypeDescriptor getTargetType() {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutionException.java, +	 * Returns the actual value we tried to convert, an instance of {@link #getSourceType()}., +	public TypeDescriptor getSourceType() {, +	public TypeDescriptor getTargetType() {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutor.java, +	 * Convert the source., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutionException.java, +	 * Returns the actual value we tried to convert, an instance of {@link #getSourceType()}., +	public TypeDescriptor getSourceType() {, +	public TypeDescriptor getTargetType() {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutor.java, +	 * Convert the source., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutorNotFoundException.java, +	 * Returns the source type that was requested to convert from., +	 * Returns the target type that was requested to convert to., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutionException.java, +	 * Returns the actual value we tried to convert, an instance of {@link #getSourceType()}., +	public TypeDescriptor getSourceType() {, +	public TypeDescriptor getTargetType() {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutor.java, +	 * Convert the source., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutorNotFoundException.java, +	 * Returns the source type that was requested to convert from., +	 * Returns the target type that was requested to convert to., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, + * <i>executeConversion</i> operations to perform a thread-safe type conversion using, + * this system. Call one of the <i>getConversionExecutor</i> operations to obtain, + * TODO - is TypeDescriptor/TypedValue needed on source?, + * , +	 * Get a type by its name; may be the fully-qualified class name or a registered type alias such as 'int'., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutionException.java, +	 * Returns the actual value we tried to convert, an instance of {@link #getSourceType()}., +	public TypeDescriptor getSourceType() {, +	public TypeDescriptor getTargetType() {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutor.java, +	 * Convert the source., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutorNotFoundException.java, +	 * Returns the source type that was requested to convert from., +	 * Returns the target type that was requested to convert to., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, + * <i>executeConversion</i> operations to perform a thread-safe type conversion using, + * this system. Call one of the <i>getConversionExecutor</i> operations to obtain, + * TODO - is TypeDescriptor/TypedValue needed on source?, + * , +	 * Get a type by its name; may be the fully-qualified class name or a registered type alias such as 'int'., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, + * Type metadata about a bindable target value., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutionException.java, +	 * Returns the actual value we tried to convert, an instance of {@link #getSourceType()}., +	public TypeDescriptor getSourceType() {, +	public TypeDescriptor getTargetType() {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutor.java, +	 * Convert the source., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutorNotFoundException.java, +	 * Returns the source type that was requested to convert from., +	 * Returns the target type that was requested to convert to., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, + * <i>executeConversion</i> operations to perform a thread-safe type conversion using, + * this system. Call one of the <i>getConversionExecutor</i> operations to obtain, + * TODO - is TypeDescriptor/TypedValue needed on source?, + * , +	 * Get a type by its name; may be the fully-qualified class name or a registered type alias such as 'int'., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, + * Type metadata about a bindable target value., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypedValue.java, + * TODO - is this needed?, + * , +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutionException.java, +	 * Returns the actual value we tried to convert, an instance of {@link #getSourceType()}., +	public TypeDescriptor getSourceType() {, +	public TypeDescriptor getTargetType() {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutor.java, +	 * Convert the source., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutorNotFoundException.java, +	 * Returns the source type that was requested to convert from., +	 * Returns the target type that was requested to convert to., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, + * <i>executeConversion</i> operations to perform a thread-safe type conversion using, + * this system. Call one of the <i>getConversionExecutor</i> operations to obtain, + * TODO - is TypeDescriptor/TypedValue needed on source?, + * , +	 * Get a type by its name; may be the fully-qualified class name or a registered type alias such as 'int'., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, + * Type metadata about a bindable target value., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypedValue.java, + * TODO - is this needed?, + * , +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/service/DefaultConversionService.java, +		addAlias("bigInt", BigInteger.class);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutionException.java, +	 * Returns the actual value we tried to convert, an instance of {@link #getSourceType()}., +	public TypeDescriptor getSourceType() {, +	public TypeDescriptor getTargetType() {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutor.java, +	 * Convert the source., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutorNotFoundException.java]