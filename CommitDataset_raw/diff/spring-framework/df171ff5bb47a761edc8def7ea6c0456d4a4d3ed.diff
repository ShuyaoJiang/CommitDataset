[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java, +	private final URI url;, +	 * @param url a URL template; the resulting URL will be encoded, +	 * @param vars zero or more URL variables, +	MockHttpServletRequestBuilder(HttpMethod httpMethod, String url, Object... vars) {, +		this(httpMethod, UriComponentsBuilder.fromUriString(url).buildAndExpand(vars).encode().toUri());, +	 * @param url the URL, +	MockHttpServletRequestBuilder(HttpMethod httpMethod, URI url) {, +		Assert.notNull(url, "url is required");, +		this.url = url;, +		String requestUri = this.url.getRawPath();, +		if (this.url.getScheme() != null) {, +			request.setScheme(this.url.getScheme());, +		if (this.url.getHost() != null) {, +			request.setServerName(this.url.getHost());, +		if (this.url.getPort() != -1) {, +			request.setServerPort(this.url.getPort());, +			if (this.url.getRawQuery() != null) {, +				request.setQueryString(this.url.getRawQuery());, +			MultiValueMap<String, String> queryParams =, +					UriComponentsBuilder.fromUri(this.url).build().getQueryParams();, +, +			for (Entry<String, List<String>> entry : queryParams.entrySet()) {, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java, +	private final URI url;, +	 * @param url a URL template; the resulting URL will be encoded, +	 * @param vars zero or more URL variables, +	MockHttpServletRequestBuilder(HttpMethod httpMethod, String url, Object... vars) {, +		this(httpMethod, UriComponentsBuilder.fromUriString(url).buildAndExpand(vars).encode().toUri());, +	 * @param url the URL, +	MockHttpServletRequestBuilder(HttpMethod httpMethod, URI url) {, +		Assert.notNull(url, "url is required");, +		this.url = url;, +		String requestUri = this.url.getRawPath();, +		if (this.url.getScheme() != null) {, +			request.setScheme(this.url.getScheme());, +		if (this.url.getHost() != null) {, +			request.setServerName(this.url.getHost());, +		if (this.url.getPort() != -1) {, +			request.setServerPort(this.url.getPort());, +			if (this.url.getRawQuery() != null) {, +				request.setQueryString(this.url.getRawQuery());, +			MultiValueMap<String, String> queryParams =, +					UriComponentsBuilder.fromUri(this.url).build().getQueryParams();, +, +			for (Entry<String, List<String>> entry : queryParams.entrySet()) {, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilderTests.java, +import java.net.URI;, +import java.net.URISyntaxException;, +	// SPR-13435, +, +	@Test, +	public void requestUriWithDoubleSlashes() throws URISyntaxException {, +		this.builder = new MockHttpServletRequestBuilder(HttpMethod.GET, new URI("/test//currentlyValid/0"));, +		MockHttpServletRequest request = this.builder.buildRequest(this.servletContext);, +, +		assertEquals("/test//currentlyValid/0", request.getRequestURI());, +	}, +]