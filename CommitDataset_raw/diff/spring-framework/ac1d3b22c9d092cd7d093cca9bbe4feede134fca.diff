[+++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java, +	 * Generate the bean name that is used within the scoped proxy to reference the target bean., +++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java, +	 * Generate the bean name that is used within the scoped proxy to reference the target bean., +++ b/spring-context/src/test/java/org/springframework/aop/scope/ScopedProxyTests.java, + * Copyright 2002-2017 the original author or authors., +, +	@Test  // SPR-2108, +++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java, +	 * Generate the bean name that is used within the scoped proxy to reference the target bean., +++ b/spring-context/src/test/java/org/springframework/aop/scope/ScopedProxyTests.java, + * Copyright 2002-2017 the original author or authors., +, +	@Test  // SPR-2108, +++ b/spring-context/src/test/resources/org/springframework/aop/scope/ScopedProxyTests-override.xml, +++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java, +	 * Generate the bean name that is used within the scoped proxy to reference the target bean., +++ b/spring-context/src/test/java/org/springframework/aop/scope/ScopedProxyTests.java, + * Copyright 2002-2017 the original author or authors., +, +	@Test  // SPR-2108, +++ b/spring-context/src/test/resources/org/springframework/aop/scope/ScopedProxyTests-override.xml, +++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, +	 * @param removeOnly whether to discard and ignore forwarded headers, +	 * @since 4.3.10, +			HttpServletResponse theResponse = (this.relativeRedirects ?, +					new ForwardedHeaderExtractingResponse(response, theRequest));, +++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java, +	 * Generate the bean name that is used within the scoped proxy to reference the target bean., +++ b/spring-context/src/test/java/org/springframework/aop/scope/ScopedProxyTests.java, + * Copyright 2002-2017 the original author or authors., +, +	@Test  // SPR-2108, +++ b/spring-context/src/test/resources/org/springframework/aop/scope/ScopedProxyTests-override.xml, +++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, +	 * @param removeOnly whether to discard and ignore forwarded headers, +	 * @since 4.3.10, +			HttpServletResponse theResponse = (this.relativeRedirects ?, +					new ForwardedHeaderExtractingResponse(response, theRequest));, +++ b/spring-web/src/main/java/org/springframework/web/filter/RelativeRedirectFilter.java, +import java.io.IOException;, +, +import org.springframework.http.HttpStatus;, +import org.springframework.util.Assert;, + * <p><strong>Note:</strong> While relative redirects are more efficient they, + * @since 4.3.10, +		Assert.notNull(status, "Property 'redirectStatus' is required");, +		Assert.isTrue(status.is3xxRedirection(), "Not a redirect status code");, +++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java, +	 * Generate the bean name that is used within the scoped proxy to reference the target bean., +++ b/spring-context/src/test/java/org/springframework/aop/scope/ScopedProxyTests.java, + * Copyright 2002-2017 the original author or authors., +, +	@Test  // SPR-2108, +++ b/spring-context/src/test/resources/org/springframework/aop/scope/ScopedProxyTests-override.xml, +++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, +	 * @param removeOnly whether to discard and ignore forwarded headers, +	 * @since 4.3.10, +			HttpServletResponse theResponse = (this.relativeRedirects ?, +					new ForwardedHeaderExtractingResponse(response, theRequest));, +++ b/spring-web/src/main/java/org/springframework/web/filter/RelativeRedirectFilter.java, +import java.io.IOException;, +, +import org.springframework.http.HttpStatus;, +import org.springframework.util.Assert;, + * <p><strong>Note:</strong> While relative redirects are more efficient they, + * @since 4.3.10, +		Assert.notNull(status, "Property 'redirectStatus' is required");, +		Assert.isTrue(status.is3xxRedirection(), "Not a redirect status code");, +++ b/spring-web/src/main/java/org/springframework/web/filter/RelativeRedirectResponseWrapper.java, + * @since 4.3.10, +		Assert.notNull(redirectStatus, "'redirectStatus' is required");, +		return (hasWrapper(response) ? response : new RelativeRedirectResponseWrapper(response, redirectStatus));, +++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java, +	 * Generate the bean name that is used within the scoped proxy to reference the target bean., +++ b/spring-context/src/test/java/org/springframework/aop/scope/ScopedProxyTests.java, + * Copyright 2002-2017 the original author or authors., +, +	@Test  // SPR-2108, +++ b/spring-context/src/test/resources/org/springframework/aop/scope/ScopedProxyTests-override.xml, +++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, +	 * @param removeOnly whether to discard and ignore forwarded headers, +	 * @since 4.3.10, +			HttpServletResponse theResponse = (this.relativeRedirects ?, +					new ForwardedHeaderExtractingResponse(response, theRequest));, +++ b/spring-web/src/main/java/org/springframework/web/filter/RelativeRedirectFilter.java, +import java.io.IOException;, +, +import org.springframework.http.HttpStatus;, +import org.springframework.util.Assert;, + * <p><strong>Note:</strong> While relative redirects are more efficient they, + * @since 4.3.10, +		Assert.notNull(status, "Property 'redirectStatus' is required");, +		Assert.isTrue(status.is3xxRedirection(), "Not a redirect status code");, +++ b/spring-web/src/main/java/org/springframework/web/filter/RelativeRedirectResponseWrapper.java, + * @since 4.3.10, +		Assert.notNull(redirectStatus, "'redirectStatus' is required");, +		return (hasWrapper(response) ? response : new RelativeRedirectResponseWrapper(response, redirectStatus));, +++ b/spring-web/src/test/java/org/springframework/web/filter/ForwardedHeaderFilterTests.java, + * Copyright 2002-2017 the original author or authors.]