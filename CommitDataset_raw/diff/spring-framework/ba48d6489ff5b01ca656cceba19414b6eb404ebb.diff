[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/groovy/GroovyMarkupConfigurer.java, + * @see <a href="http://groovy-lang.org/templating.html#_the_markuptemplateengine">, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/groovy/GroovyMarkupConfigurer.java, + * @see <a href="http://groovy-lang.org/templating.html#_the_markuptemplateengine">, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/groovy/GroovyMarkupView.java, + * @see <a href="http://groovy-lang.org/templating.html#_the_markuptemplateengine">, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/groovy/GroovyMarkupConfigurer.java, + * @see <a href="http://groovy-lang.org/templating.html#_the_markuptemplateengine">, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/groovy/GroovyMarkupView.java, + * @see <a href="http://groovy-lang.org/templating.html#_the_markuptemplateengine">, +++ b/src/asciidoc/web-view.adoc, +the rest of the MVC framework. For example, deciding to use Groovy Markup Templates, +or Thymeleaf in place of an existing JSP is primarily a matter of configuration., +This chapter covers the major view technologies that work with Spring and touches, +briefly on how to add new ones. This chapter assumes you are already familiar with, +<<mvc-viewresolver>> which covers the basics of how views in general are coupled, +to the MVC framework., +, +, +[[view-thymeleaf]], +== Thymeleaf, +, +http://www.thymeleaf.org/[Thymeleaf] is a good example of a view technology fitting, +perfectly in the MVC framework. Support for this integration is not provided by, +the Spring team but by the Thymeleaf team itself., +, +Configuring Thymeleaf for Spring usually requires a few beans defined, like a, +`ServletContextTemplateResolver`, a `SpringTemplateEngine` and a `ThymeleafViewResolver`., +Please refer to the http://www.thymeleaf.org/documentation.html[Thymeleaf+Spring], +documentation section for more details., +, +, +[[view-groovymarkup]], +== Groovy Markup Templates, +, +The http://groovy-lang.org/templating.html#_the_markuptemplateengine[Groovy Markup Template Engine], +is another view technology, supported by Spring. This template engine is a template engine primarily, +aimed at generating XML-like markup (XML, XHTML, HTML5, ...â€‹), but that can be used to generate any, +text based content., +, +This requires Groovy 2.3.1+ on the the classpath., +, +[[view-groovymarkup-configuration]], +=== Configuration, +, +Configuring the Groovy Markup Teplate Engine is quite easy:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Configuration, +	@EnableWebMvc, +	public class WebConfig extends WebMvcConfigurerAdapter {, +, +        @Override, +		public void configureViewResolvers(ViewResolverRegistry registry) {, +			registry.groovy();, +		}, +, +		@Bean, +		public GroovyMarkupConfigurer groovyMarkupConfigurer() {, +			GroovyMarkupConfigurer configurer = new GroovyMarkupConfigurer();, +			configurer.setResourceLoaderPath("/WEB-INF/");, +			return configurer;, +		}, +	}, +----, +, +The XML counterpart using the MVC namespace is:, +, +[source,xml,indent=0], +[subs="verbatim,quotes"], +----, +	<mvc:annotation-driven />, +, +	<mvc:view-resolvers>, +		<mvc:groovy />, +	</mvc:view-resolvers>, +, +	<mvc:groovy-configurer resource-loader-path="/WEB-INF/" />, +----, +, +[[view-groovymarkup-example]], +=== Example, +, +Unlike traditional template engines, this one relies on a DSL that uses the builder syntax., +Here is a sample template for an HTML page:, +, +[source,groovy,indent=0], +[subs="verbatim,quotes"], +----, +	yieldUnescaped '<!DOCTYPE html>', +	html(lang:'en') {, +		head {, +			meta('http-equiv':'"Content-Type" content="text/html; charset=utf-8"'), +			title('My page'), +		}, +		body {, +			p('This is an example of HTML contents'), +		}]