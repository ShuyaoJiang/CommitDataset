[+++ b/org.springframework.core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +import java.util.ArrayList;, +import java.util.List;, + * @author Oliver Gierke, +	/**, +	 * Returns a {@link ParameterAnnotation} instance for the first parameter with the given annotation., +	 * @param <T>, +	 * @param method the {@link Method} whose parameters shall be inspected, +	 * @param annotationType the annotation typed the parameter shall carry, +	 * @return, +	 */, +	public static <T extends Annotation> ParameterAnnotation<T> getParameterAnnotation(Method method,, +			Class<T> annotationType) {, +, +		List<ParameterAnnotation<T>> annotations = getParameterAnnotations(method, annotationType);, +		return annotations.isEmpty() ? null : annotations.get(0);, +	}, +, +	/**, +	 * Returns all {@link ParameterAnnotation}s for parameters with the given annotation., +	 * @param <T>, +	 * @param method the {@link Method} whose parameters shall be scanned for annotations, +	 * @param annotationType the annotation type the paramter shall carry, +	 * @return, +	 */, +	public static <T extends Annotation> List<ParameterAnnotation<T>> getParameterAnnotations(Method method,, +			Class<T> annotationType) {, +, +		return getParameterAnnotations(method, new AnnotationTypeFilter<T>(annotationType));, +	}, +, +	/**, +	 * Returns the {@link ParameterAnnotation} for a parameter of the given type that carries an annotation of the given, +	 * type., +	 * @param <T>, +	 * @param method the {@link Method} that shall be scanned for parameters carrying the annotation, +	 * @param annotationType the annotation type that shall be discovered, +	 * @param parameterType the parameter type that shall be considered, +	 * @return, +	 */, +	public static <T extends Annotation> ParameterAnnotation<T> getParameterAnnotation(Method method,, +			Class<T> annotationType, final Class<?> parameterType) {, +, +		List<ParameterAnnotation<T>> annotations = getParameterAnnotations(method, annotationType, parameterType);, +		return annotations.isEmpty() ? null : annotations.get(0);, +	}, +, +	/**, +	 * Returns all {@link ParameterAnnotation}s for parameters of the given type that carry an annotation of the given, +	 * type., +	 * @param <T>, +	 * @param method the {@link Method} that shall be scanned for parameters carrying the annotation, +	 * @param annotationType the annotation type that shall be discovered, +	 * @param parameterType the parameter type that shall be considered, +	 * @return, +	 */, +	public static <T extends Annotation> List<ParameterAnnotation<T>> getParameterAnnotations(Method method,, +			Class<T> annotationType, final Class<?> parameterType) {, +, +		return getParameterAnnotations(method, new AnnotationTypeFilter<T>(annotationType) {, +, +			@Override, +			public boolean matches(ParameterAnnotation<?> parameterAnnotation) {, +				return super.matches(parameterAnnotation), +						&& parameterType.equals(parameterAnnotation.getParameterType());, +			}, +		});, +	}, +, +	/**, +	 * Returns all {@link ParameterAnnotation}s for parameters of the given method that match the given, +	 * {@link ParameterAnnotationFilter}., +	 * @see ParameterAnnotationFilter, +	 * @param <T>, +	 * @param method the {@link Method} that shall be scanned for annotated parameters, +	 * @param filter a {@link ParameterAnnotationFilter} to apply criterias on the {@link ParameterAnnotation}s to be, +	 * returned, +	 * @return, +	 */, +	@SuppressWarnings("unchecked"), +	public static <T extends Annotation> List<ParameterAnnotation<T>> getParameterAnnotations(Method method,, +			ParameterAnnotationFilter filter) {, +, +		List<ParameterAnnotation<T>> result = new ArrayList<ParameterAnnotation<T>>();, +, +		Annotation[][] parameterAnnotations = method.getParameterAnnotations();, +		Class<?>[] parameterTypes = method.getParameterTypes();, +, +		for (int i = 0; i < parameterAnnotations.length; i++) {, +			for (Annotation annotation : parameterAnnotations[i]) {, +, +				ParameterAnnotation<T> parameterAnnotation = new ParameterAnnotation<T>((T) annotation, i,, +						parameterTypes[i]);, +, +				if (filter.matches(parameterAnnotation)) {, +					result.add(parameterAnnotation);, +				}, +			}, +		}, +]