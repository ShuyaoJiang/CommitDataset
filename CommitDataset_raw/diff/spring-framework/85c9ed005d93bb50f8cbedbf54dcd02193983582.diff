[+++ b/spring-core/src/main/java/org/springframework/util/xml/DomUtils.java, + * Copyright 2002-2013 the original author or authors., + * @since 1.2, +	 * Retrieves all child elements of the given DOM element that match any of the given element names., +	 * Only looks at the direct child level of the given element; do not go into further depth, +	 * (in contrast to the DOM API's {@code getElementsByTagName} method)., +	 * Retrieves all child elements of the given DOM element that match the given element name., +	 * Only look at the direct child level of the given element; do not go into further depth, +	 * (in contrast to the DOM API's {@code getElementsByTagName} method)., +	 * Retrieves all child elements of the given DOM element, +	 * Extracts the text value from the given DOM element, ignoring XML comments., +	 * <p>Appends all CharacterData nodes and EntityReference nodes into a single, +	 * String value, excluding Comment nodes. Only exposes actual user-specified, +	 * text, no default values of any kind., +	 * Namespace-aware equals comparison. Returns {@code true} if either, +	 * {@link Node#getLocalName} or {@link Node#getNodeName} equals, +	 * {@code desiredName}, otherwise returns {@code false}., +	/**, +	 * Matches the given node's name and local name against the given desired name., +	 */, +	/**, +	 * Matches the given node's name and local name against the given desired names., +	 */, +++ b/spring-core/src/main/java/org/springframework/util/xml/DomUtils.java, + * Copyright 2002-2013 the original author or authors., + * @since 1.2, +	 * Retrieves all child elements of the given DOM element that match any of the given element names., +	 * Only looks at the direct child level of the given element; do not go into further depth, +	 * (in contrast to the DOM API's {@code getElementsByTagName} method)., +	 * Retrieves all child elements of the given DOM element that match the given element name., +	 * Only look at the direct child level of the given element; do not go into further depth, +	 * (in contrast to the DOM API's {@code getElementsByTagName} method)., +	 * Retrieves all child elements of the given DOM element, +	 * Extracts the text value from the given DOM element, ignoring XML comments., +	 * <p>Appends all CharacterData nodes and EntityReference nodes into a single, +	 * String value, excluding Comment nodes. Only exposes actual user-specified, +	 * text, no default values of any kind., +	 * Namespace-aware equals comparison. Returns {@code true} if either, +	 * {@link Node#getLocalName} or {@link Node#getNodeName} equals, +	 * {@code desiredName}, otherwise returns {@code false}., +	/**, +	 * Matches the given node's name and local name against the given desired name., +	 */, +	/**, +	 * Matches the given node's name and local name against the given desired names., +	 */, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/PersistenceUnitReader.java, +, +		// evaluate data sources, +		if (excludeUnlistedClasses != null) {, +			unitInfo.setExcludeUnlistedClasses(!StringUtils.hasText(excludeText) || Boolean.valueOf(excludeText));, +++ b/spring-core/src/main/java/org/springframework/util/xml/DomUtils.java, + * Copyright 2002-2013 the original author or authors., + * @since 1.2, +	 * Retrieves all child elements of the given DOM element that match any of the given element names., +	 * Only looks at the direct child level of the given element; do not go into further depth, +	 * (in contrast to the DOM API's {@code getElementsByTagName} method)., +	 * Retrieves all child elements of the given DOM element that match the given element name., +	 * Only look at the direct child level of the given element; do not go into further depth, +	 * (in contrast to the DOM API's {@code getElementsByTagName} method)., +	 * Retrieves all child elements of the given DOM element, +	 * Extracts the text value from the given DOM element, ignoring XML comments., +	 * <p>Appends all CharacterData nodes and EntityReference nodes into a single, +	 * String value, excluding Comment nodes. Only exposes actual user-specified, +	 * text, no default values of any kind., +	 * Namespace-aware equals comparison. Returns {@code true} if either, +	 * {@link Node#getLocalName} or {@link Node#getNodeName} equals, +	 * {@code desiredName}, otherwise returns {@code false}., +	/**, +	 * Matches the given node's name and local name against the given desired name., +	 */, +	/**, +	 * Matches the given node's name and local name against the given desired names., +	 */, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/PersistenceUnitReader.java, +, +		// evaluate data sources, +		if (excludeUnlistedClasses != null) {, +			unitInfo.setExcludeUnlistedClasses(!StringUtils.hasText(excludeText) || Boolean.valueOf(excludeText));, +++ b/spring-orm/src/test/java/org/springframework/orm/jpa/persistenceunit/PersistenceXmlParsingTests.java, +		assertFalse("Exclude unlisted still defaults to false in 2.0.", noExclude.excludeUnlistedClasses());]