[+++ b/spring-framework-reference/src/aop.xml, +          example of a crosscutting concern in enterprise Java applications., +          In Spring AOP, aspects are implemented using regular classes (the, +          <link linkend="aop-schema">schema-based approach</link>) or regular, +      class loader hierarchy, and is thus suitable for use in a Servlet, +      solution to most problems in enterprise Java applications that are, +      amenable to AOP.</para>, +++ b/spring-framework-reference/src/aop.xml, +          example of a crosscutting concern in enterprise Java applications., +          In Spring AOP, aspects are implemented using regular classes (the, +          <link linkend="aop-schema">schema-based approach</link>) or regular, +      class loader hierarchy, and is thus suitable for use in a Servlet, +      solution to most problems in enterprise Java applications that are, +      amenable to AOP.</para>, +++ b/spring-framework-reference/src/beans.xml, +      property setter methods. This is a common pattern in Java EE 5 and 6,, +      for example in JSF 1.2 managed beans or JAX-WS 2.0 endpoints. Spring, +++ b/spring-framework-reference/src/aop.xml, +          example of a crosscutting concern in enterprise Java applications., +          In Spring AOP, aspects are implemented using regular classes (the, +          <link linkend="aop-schema">schema-based approach</link>) or regular, +      class loader hierarchy, and is thus suitable for use in a Servlet, +      solution to most problems in enterprise Java applications that are, +      amenable to AOP.</para>, +++ b/spring-framework-reference/src/beans.xml, +      property setter methods. This is a common pattern in Java EE 5 and 6,, +      for example in JSF 1.2 managed beans or JAX-WS 2.0 endpoints. Spring, +++ b/spring-framework-reference/src/transaction.xml, +        traditional rules as to when a enterprise Java application requires, +        an application server.</para>, +++ b/spring-framework-reference/src/aop.xml, +          example of a crosscutting concern in enterprise Java applications., +          In Spring AOP, aspects are implemented using regular classes (the, +          <link linkend="aop-schema">schema-based approach</link>) or regular, +      class loader hierarchy, and is thus suitable for use in a Servlet, +      solution to most problems in enterprise Java applications that are, +      amenable to AOP.</para>, +++ b/spring-framework-reference/src/beans.xml, +      property setter methods. This is a common pattern in Java EE 5 and 6,, +      for example in JSF 1.2 managed beans or JAX-WS 2.0 endpoints. Spring, +++ b/spring-framework-reference/src/transaction.xml, +        traditional rules as to when a enterprise Java application requires, +        an application server.</para>, +++ b/spring-framework-reference/src/web-integration.xml, +    layer</link>, there are a number of unique advantages to building an, +    enterprise Java application using a combination of Tapestry for the web, +    user interface and the Spring container for the lower layers. This section, +    of the web integration chapter attempts to detail a few best practices for, +    combining these two frameworks.</para>, +    <para>A <emphasis>typical</emphasis> layered enterprise Java application, +    built with Tapestry and Spring will consist of a top user interface (UI), +    layer built with Tapestry, and a number of lower layers, all wired together, +    by one or more Spring containers. Tapestry's own reference documentation, +    contains the following snippet of best practice advice. (Text that the, +    author of this Spring section has added is contained within, +    <literal>[]</literal> brackets.)</para>, +        it throughout the stack in this Tapestry application.</para>, +++ b/spring-framework-reference/src/aop.xml, +          example of a crosscutting concern in enterprise Java applications., +          In Spring AOP, aspects are implemented using regular classes (the, +          <link linkend="aop-schema">schema-based approach</link>) or regular, +      class loader hierarchy, and is thus suitable for use in a Servlet, +      solution to most problems in enterprise Java applications that are, +      amenable to AOP.</para>, +++ b/spring-framework-reference/src/beans.xml, +      property setter methods. This is a common pattern in Java EE 5 and 6,, +      for example in JSF 1.2 managed beans or JAX-WS 2.0 endpoints. Spring, +++ b/spring-framework-reference/src/transaction.xml, +        traditional rules as to when a enterprise Java application requires, +        an application server.</para>, +++ b/spring-framework-reference/src/web-integration.xml, +    layer</link>, there are a number of unique advantages to building an, +    enterprise Java application using a combination of Tapestry for the web, +    user interface and the Spring container for the lower layers. This section, +    of the web integration chapter attempts to detail a few best practices for, +    combining these two frameworks.</para>, +    <para>A <emphasis>typical</emphasis> layered enterprise Java application, +    built with Tapestry and Spring will consist of a top user interface (UI), +    layer built with Tapestry, and a number of lower layers, all wired together, +    by one or more Spring containers. Tapestry's own reference documentation, +    contains the following snippet of best practice advice. (Text that the, +    author of this Spring section has added is contained within, +    <literal>[]</literal> brackets.)</para>, +        it throughout the stack in this Tapestry application.</para>, +++ b/spring-framework-reference/src/xsd-configuration.xml, +            <para>The <literal>jee</literal> tags deal with Java EE (Java Enterprise Edition)-related]