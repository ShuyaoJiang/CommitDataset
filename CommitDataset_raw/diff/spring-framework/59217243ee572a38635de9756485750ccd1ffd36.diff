[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/view/UrlBasedViewResolver.java, +import org.springframework.util.PatternMatchUtils;, +	private String[] viewNames;, +, +	/**, +	 * Set the view names (or name patterns) that can be handled by this, +	 * {@link org.springframework.web.reactive.ViewResolver}. View names can, +	 * contain simple wildcards such that 'my*', '*Report' and '*Repo*' will, +	 * all match the view name 'myReport'., +	 * @see #canHandle, +	 */, +	public void setViewNames(String... viewNames) {, +		this.viewNames = viewNames;, +	}, +, +	/**, +	 * Return the view names (or name patterns) that can be handled by this, +	 * {@link org.springframework.web.reactive.ViewResolver}., +	 */, +	protected String[] getViewNames() {, +		return this.viewNames;, +	}, +, +		if (!canHandle(viewName, locale)) {, +			return Mono.empty();, +		}, +	 * Indicates whether or not this, +	 * {@link org.springframework.web.reactive.ViewResolver} can handle the, +	 * supplied view name. If not, an empty result is returned. The default, +	 * implementation checks against the configured {@link #setViewNames, +	 * view names}., +	 * @param viewName the name of the view to retrieve, +	 * @param locale the Locale to retrieve the view for, +	 * @return whether this resolver applies to the specified view, +	 * @see org.springframework.util.PatternMatchUtils#simpleMatch(String, String), +	 */, +	protected boolean canHandle(String viewName, Locale locale) {, +		String[] viewNames = getViewNames();, +		return (viewNames == null || PatternMatchUtils.simpleMatch(viewNames, viewName));, +	}, +, +	/**, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/view/UrlBasedViewResolver.java, +import org.springframework.util.PatternMatchUtils;, +	private String[] viewNames;, +, +	/**, +	 * Set the view names (or name patterns) that can be handled by this, +	 * {@link org.springframework.web.reactive.ViewResolver}. View names can, +	 * contain simple wildcards such that 'my*', '*Report' and '*Repo*' will, +	 * all match the view name 'myReport'., +	 * @see #canHandle, +	 */, +	public void setViewNames(String... viewNames) {, +		this.viewNames = viewNames;, +	}, +, +	/**, +	 * Return the view names (or name patterns) that can be handled by this, +	 * {@link org.springframework.web.reactive.ViewResolver}., +	 */, +	protected String[] getViewNames() {, +		return this.viewNames;, +	}, +, +		if (!canHandle(viewName, locale)) {, +			return Mono.empty();, +		}, +	 * Indicates whether or not this, +	 * {@link org.springframework.web.reactive.ViewResolver} can handle the, +	 * supplied view name. If not, an empty result is returned. The default, +	 * implementation checks against the configured {@link #setViewNames, +	 * view names}., +	 * @param viewName the name of the view to retrieve, +	 * @param locale the Locale to retrieve the view for, +	 * @return whether this resolver applies to the specified view, +	 * @see org.springframework.util.PatternMatchUtils#simpleMatch(String, String), +	 */, +	protected boolean canHandle(String viewName, Locale locale) {, +		String[] viewNames = getViewNames();, +		return (viewNames == null || PatternMatchUtils.simpleMatch(viewNames, viewName));, +	}, +, +	/**, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/view/UrlBasedViewResolverTests.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */]