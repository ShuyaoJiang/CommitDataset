[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScan.java, + * Copyright 2002-2015 the original author or authors., + * <p>Either {@link #basePackageClasses} or {@link #basePackages} (or its alias, + * {@link #value}) may be specified to define specific packages to scan. If specific, + * packages are not defined, scanning will occur from the package of the, + * class that declares this annotation., + * {@code annotation-config} attribute; however, this annotation does not. This is because, + * <p>See {@link Configuration @Configuration}'s Javadoc for usage examples., +	 * Alias for {@link #basePackages}., +	 * <p>Allows for more concise annotation declarations if no other attributes, +	 * are needed &mdash; for example, {@code @ComponentScan("org.my.pkg")}, +	 * instead of {@code @ComponentScan(basePackages = "org.my.pkg")}., +	 * <p>{@link #value} is an alias for (and mutually exclusive with) this, +	 * attribute., +	 * <p>Use {@link #basePackageClasses} for a type-safe alternative to, +	 * String-based package names., +	 * Type-safe alternative to {@link #basePackages} for specifying the packages, +	 * <p>Note that setting this attribute overrides any value set for {@link #scopeResolver}., +	 * <p>Consider use of {@link #includeFilters} and {@link #excludeFilters}, +	 * {@link #basePackages} to everything in the base packages that matches, +	 * @see #resourcePattern, +	 * @see #resourcePattern, +	 * Declares the type filter to be used as an {@linkplain ComponentScan#includeFilters, +	 * include filter} or {@linkplain ComponentScan#excludeFilters exclude filter}., +		 * The type of filter to use., +		 * <p>Default is {@link FilterType#ANNOTATION}., +		 * The class or classes to use as the filter., +		 * <p>In the case of {@link FilterType#ANNOTATION}, the class will be the, +		 * annotation itself. In the case of {@link FilterType#ASSIGNABLE_TYPE},, +		 * the class will be the type that detected components should be assignable, +		 * to. In the case of {@link FilterType#CUSTOM}, the class will be an, +		 * implementation of {@link TypeFilter}., +		 * <p>When multiple classes are specified, <em>OR</em> logic is applied, +		 * &mdash; for example, "include types annotated with {@code @Foo} OR {@code @Bar}"., +		 * The String pattern (or patterns) to use for the filter, as an, +		 * alternative to specifying a Class {@link #value}., +		 * <p>In the case of {@link FilterType#ASPECTJ}, this is an AspectJ, +		 * type pattern expression; in the case of {@link FilterType#REGEX},, +		 * this is a regex pattern for the fully-qualified class names to match.]