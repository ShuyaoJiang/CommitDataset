[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +			if (requiredType != null && Collection.class.isAssignableFrom(requiredType) &&, +					convertedValue instanceof String && typeDescriptor.getMethodParameter() != null) {, +				Class elementType = GenericCollectionTypeResolver.getCollectionParameterType(typeDescriptor.getMethodParameter());, +				if (elementType != null && Enum.class.isAssignableFrom(elementType)) {, +					convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue);, +				}, +			}, +					if (convertedValue instanceof String && Enum.class.isAssignableFrom(requiredType.getComponentType())) {, +						convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue);, +					}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +			if (requiredType != null && Collection.class.isAssignableFrom(requiredType) &&, +					convertedValue instanceof String && typeDescriptor.getMethodParameter() != null) {, +				Class elementType = GenericCollectionTypeResolver.getCollectionParameterType(typeDescriptor.getMethodParameter());, +				if (elementType != null && Enum.class.isAssignableFrom(elementType)) {, +					convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue);, +				}, +			}, +					if (convertedValue instanceof String && Enum.class.isAssignableFrom(requiredType.getComponentType())) {, +						convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue);, +					}, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/BeanWrapperEnumTests.java, + * Copyright 2002-2009 the original author or authors., +	@Test, +	public void testCustomEnumArrayWithSingleValue() {, +		GenericBean<?> gb = new GenericBean<Object>();, +		BeanWrapper bw = new BeanWrapperImpl(gb);, +		bw.setPropertyValue("customEnumArray", "VALUE_1");, +		assertEquals(1, gb.getCustomEnumArray().length);, +		assertEquals(CustomEnum.VALUE_1, gb.getCustomEnumArray()[0]);, +	}, +, +	@Test, +	public void testCustomEnumArrayWithMultipleValues() {, +		GenericBean<?> gb = new GenericBean<Object>();, +		BeanWrapper bw = new BeanWrapperImpl(gb);, +		bw.setPropertyValue("customEnumArray", new String[] {"VALUE_1", "VALUE_2"});, +		assertEquals(2, gb.getCustomEnumArray().length);, +		assertEquals(CustomEnum.VALUE_1, gb.getCustomEnumArray()[0]);, +		assertEquals(CustomEnum.VALUE_2, gb.getCustomEnumArray()[1]);, +	}, +, +	@Test, +	public void testCustomEnumArrayWithMultipleValuesAsCsv() {, +		GenericBean<?> gb = new GenericBean<Object>();, +		BeanWrapper bw = new BeanWrapperImpl(gb);, +		bw.setPropertyValue("customEnumArray", "VALUE_1,VALUE_2");, +		assertEquals(2, gb.getCustomEnumArray().length);, +		assertEquals(CustomEnum.VALUE_1, gb.getCustomEnumArray()[0]);, +		assertEquals(CustomEnum.VALUE_2, gb.getCustomEnumArray()[1]);, +	}, +, +	@Test, +	public void testCustomEnumSetWithSingleValue() {, +		GenericBean<?> gb = new GenericBean<Object>();, +		BeanWrapper bw = new BeanWrapperImpl(gb);, +		bw.setPropertyValue("customEnumSet", "VALUE_1");, +		assertEquals(1, gb.getCustomEnumSet().size());, +		assertTrue(gb.getCustomEnumSet().contains(CustomEnum.VALUE_1));, +	}, +, +	@Test, +	public void testCustomEnumSetWithMultipleValues() {, +		GenericBean<?> gb = new GenericBean<Object>();, +		BeanWrapper bw = new BeanWrapperImpl(gb);, +		bw.setPropertyValue("customEnumSet", new String[] {"VALUE_1", "VALUE_2"});, +		assertEquals(2, gb.getCustomEnumSet().size());, +		assertTrue(gb.getCustomEnumSet().contains(CustomEnum.VALUE_1));, +		assertTrue(gb.getCustomEnumSet().contains(CustomEnum.VALUE_2));, +	}, +, +	@Test, +	public void testCustomEnumSetWithMultipleValuesAsCsv() {, +		GenericBean<?> gb = new GenericBean<Object>();, +		BeanWrapper bw = new BeanWrapperImpl(gb);, +		bw.setPropertyValue("customEnumSet", "VALUE_1,VALUE_2");, +		assertEquals(2, gb.getCustomEnumSet().size());, +		assertTrue(gb.getCustomEnumSet().contains(CustomEnum.VALUE_1));, +		assertTrue(gb.getCustomEnumSet().contains(CustomEnum.VALUE_2));, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +			if (requiredType != null && Collection.class.isAssignableFrom(requiredType) &&, +					convertedValue instanceof String && typeDescriptor.getMethodParameter() != null) {, +				Class elementType = GenericCollectionTypeResolver.getCollectionParameterType(typeDescriptor.getMethodParameter());, +				if (elementType != null && Enum.class.isAssignableFrom(elementType)) {, +					convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue);, +				}, +			}, +					if (convertedValue instanceof String && Enum.class.isAssignableFrom(requiredType.getComponentType())) {, +						convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue);, +					}, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/BeanWrapperEnumTests.java, + * Copyright 2002-2009 the original author or authors., +	@Test, +	public void testCustomEnumArrayWithSingleValue() {, +		GenericBean<?> gb = new GenericBean<Object>();, +		BeanWrapper bw = new BeanWrapperImpl(gb);, +		bw.setPropertyValue("customEnumArray", "VALUE_1");]