[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/StandardEvaluationContext.java, +	public boolean removeConstructorResolver(ConstructorResolver resolver) {, +		ensureConstructorResolversInitialized();, +		return this.constructorResolvers.remove(resolver);, +	}, +	, +	public void setConstructorResolvers(List<ConstructorResolver> constructorResolvers) {, +		this.constructorResolvers = constructorResolvers;, +	}, +, +	public boolean removeMethodResolver(MethodResolver methodResolver) {, +		ensureMethodResolversInitialized();, +		return this.methodResolvers.remove(methodResolver);, +	}, +, +	public void setMethodResolvers(List<MethodResolver> methodResolvers) {, +		this.methodResolvers = methodResolvers;, +	}, +	, +	public boolean removePropertyAccessor(PropertyAccessor accessor) {, +		return this.propertyAccessors.remove(accessor);, +	}, +, +	public void setPropertyAccessors(List<PropertyAccessor> propertyAccessors) {, +		this.propertyAccessors = propertyAccessors;, +	}, +, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/StandardEvaluationContext.java, +	public boolean removeConstructorResolver(ConstructorResolver resolver) {, +		ensureConstructorResolversInitialized();, +		return this.constructorResolvers.remove(resolver);, +	}, +	, +	public void setConstructorResolvers(List<ConstructorResolver> constructorResolvers) {, +		this.constructorResolvers = constructorResolvers;, +	}, +, +	public boolean removeMethodResolver(MethodResolver methodResolver) {, +		ensureMethodResolversInitialized();, +		return this.methodResolvers.remove(methodResolver);, +	}, +, +	public void setMethodResolvers(List<MethodResolver> methodResolvers) {, +		this.methodResolvers = methodResolvers;, +	}, +	, +	public boolean removePropertyAccessor(PropertyAccessor accessor) {, +		return this.propertyAccessors.remove(accessor);, +	}, +, +	public void setPropertyAccessors(List<PropertyAccessor> propertyAccessors) {, +		this.propertyAccessors = propertyAccessors;, +	}, +, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/ConstructorInvocationTests.java, +import java.util.ArrayList;, +import java.util.List;, +, +import org.springframework.expression.AccessException;, +import org.springframework.expression.ConstructorExecutor;, +import org.springframework.expression.ConstructorResolver;, +import org.springframework.expression.EvaluationContext;, +	public void testAddingConstructorResolvers() {, +		StandardEvaluationContext ctx = new StandardEvaluationContext();, +		, +		// reflective constructor accessor is the only one by default, +		List<ConstructorResolver> constructorResolvers = ctx.getConstructorResolvers();, +		Assert.assertEquals(1,constructorResolvers.size());, +		, +		ConstructorResolver dummy = new DummyConstructorResolver();, +		ctx.addConstructorResolver(dummy);, +		Assert.assertEquals(2,ctx.getConstructorResolvers().size());, +		, +		List<ConstructorResolver> copy = new ArrayList<ConstructorResolver>();, +		copy.addAll(ctx.getConstructorResolvers());, +		Assert.assertTrue(ctx.removeConstructorResolver(dummy));, +		Assert.assertFalse(ctx.removeConstructorResolver(dummy));, +		Assert.assertEquals(1,ctx.getConstructorResolvers().size());, +		, +		ctx.setConstructorResolvers(copy);, +		Assert.assertEquals(2,ctx.getConstructorResolvers().size());, +	}, +	, +	static class DummyConstructorResolver implements ConstructorResolver {, +, +		public ConstructorExecutor resolve(EvaluationContext context, String typeName, Class<?>[] argumentTypes), +				throws AccessException {, +			throw new UnsupportedOperationException("Auto-generated method stub");, +		}, +		, +	}, +	, +	@Test, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/StandardEvaluationContext.java, +	public boolean removeConstructorResolver(ConstructorResolver resolver) {, +		ensureConstructorResolversInitialized();, +		return this.constructorResolvers.remove(resolver);, +	}, +	, +	public void setConstructorResolvers(List<ConstructorResolver> constructorResolvers) {]