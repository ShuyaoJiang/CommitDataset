[+++ b/spring-web/src/main/java/org/springframework/web/server/adapter/WebHttpHandlerBuilder.java, + * Copyright 2002-2018 the original author or authors., +	@Nullable, +	private final ApplicationContext applicationContext;, +, +	private WebHttpHandlerBuilder(WebHandler webHandler, @Nullable ApplicationContext applicationContext) {, +		this.applicationContext = other.applicationContext;, +		return new WebHttpHandlerBuilder(webHandler, null);, +		WebHandler decorated = new FilteringWebHandler(this.webHandler, this.filters);, +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/WebHttpHandlerBuilder.java, + * Copyright 2002-2018 the original author or authors., +	@Nullable, +	private final ApplicationContext applicationContext;, +, +	private WebHttpHandlerBuilder(WebHandler webHandler, @Nullable ApplicationContext applicationContext) {, +		this.applicationContext = other.applicationContext;, +		return new WebHttpHandlerBuilder(webHandler, null);, +		WebHandler decorated = new FilteringWebHandler(this.webHandler, this.filters);, +++ b/spring-web/src/test/java/org/springframework/web/server/adapter/WebHttpHandlerBuilderTests.java, + * Copyright 2002-2018 the original author or authors., +import static java.time.Duration.*;, +import static org.junit.Assert.*;, +	public void orderedWebFilterBeans() {, +	public void orderedWebExceptionHandlerBeans() {, +	public void configWithoutFilters() {, +	@Test  // SPR-16972, +	public void cloneWithApplicationContext() {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		context.register(NoFilterConfig.class);, +		context.refresh();, +, +		WebHttpHandlerBuilder builder = WebHttpHandlerBuilder.applicationContext(context);, +		assertSame(context, ((HttpWebHandlerAdapter) builder.build()).getApplicationContext());, +		assertSame(context, ((HttpWebHandlerAdapter) builder.clone().build()).getApplicationContext());, +	}, +]