[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolver.java, +	private final Map<Class<?>, SessionAttributesHandler> sessionAttributesHandlerCache = new ConcurrentHashMap<>(64);, +, +		registrar.addIfRequestBody(readers -> new SessionStatusMethodArgumentResolver());, +	/**, +	 * Return the handler for the type-level {@code @SessionAttributes} annotation, +	 * based on the given controller method., +	 */, +	public SessionAttributesHandler getSessionAttributesHandler(HandlerMethod handlerMethod) {, +		Class<?> handlerType = handlerMethod.getBeanType();, +		SessionAttributesHandler result = this.sessionAttributesHandlerCache.get(handlerType);, +		if (result == null) {, +			synchronized (this.sessionAttributesHandlerCache) {, +				result = this.sessionAttributesHandlerCache.get(handlerType);, +				if (result == null) {, +					result = new SessionAttributesHandler(handlerType);, +					this.sessionAttributesHandlerCache.put(handlerType, result);, +				}, +			}, +		}, +		return result;, +	}, +, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolver.java, +	private final Map<Class<?>, SessionAttributesHandler> sessionAttributesHandlerCache = new ConcurrentHashMap<>(64);, +, +		registrar.addIfRequestBody(readers -> new SessionStatusMethodArgumentResolver());, +	/**, +	 * Return the handler for the type-level {@code @SessionAttributes} annotation, +	 * based on the given controller method., +	 */, +	public SessionAttributesHandler getSessionAttributesHandler(HandlerMethod handlerMethod) {, +		Class<?> handlerType = handlerMethod.getBeanType();, +		SessionAttributesHandler result = this.sessionAttributesHandlerCache.get(handlerType);, +		if (result == null) {, +			synchronized (this.sessionAttributesHandlerCache) {, +				result = this.sessionAttributesHandlerCache.get(handlerType);, +				if (result == null) {, +					result = new SessionAttributesHandler(handlerType);, +					this.sessionAttributesHandlerCache.put(handlerType, result);, +				}, +			}, +		}, +		return result;, +	}, +, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/InitBinderBindingContext.java, +import org.springframework.web.bind.support.SessionStatus;, +import org.springframework.web.bind.support.SimpleSessionStatus;, +import org.springframework.web.server.WebSession;, +	private final SessionStatus sessionStatus = new SimpleSessionStatus();, +, +	@Nullable, +	private Runnable saveModelOperation;, +, +	/**, +	 * Return the {@link SessionStatus} instance to use that can be used to, +	 * signal that session processing is complete., +	 */, +	public SessionStatus getSessionStatus() {, +		return this.sessionStatus;, +	}, +, +, +	/**, +	 * Provide the context required to apply {@link #saveModel()} after the, +	 * controller method has been invoked., +	 */, +	public void setSessionContext(SessionAttributesHandler attributesHandler, WebSession session) {, +		this.saveModelOperation = () -> {, +			if (getSessionStatus().isComplete()) {, +				attributesHandler.cleanupAttributes(session);, +			}, +			else {, +				attributesHandler.storeAttributes(session, getModel().asMap());, +			}, +		};, +	}, +, +	/**, +	 * Save model attributes in the session based on a type-level declarations, +	 * in an {@code @SessionAttributes} annotation., +	 */, +	public void saveModel() {, +		if (this.saveModelOperation != null) {, +			this.saveModelOperation.run();, +		}, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolver.java, +	private final Map<Class<?>, SessionAttributesHandler> sessionAttributesHandlerCache = new ConcurrentHashMap<>(64);, +, +		registrar.addIfRequestBody(readers -> new SessionStatusMethodArgumentResolver());, +	/**, +	 * Return the handler for the type-level {@code @SessionAttributes} annotation, +	 * based on the given controller method., +	 */, +	public SessionAttributesHandler getSessionAttributesHandler(HandlerMethod handlerMethod) {]