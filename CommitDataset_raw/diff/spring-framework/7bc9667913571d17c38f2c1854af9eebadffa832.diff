[+++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java, +	 * Path mapping URIs may contain placeholders (e.g. "/${connect}"), +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java, +	 * Path mapping URIs may contain placeholders (e.g. "/${connect}"), +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.context.EmbeddedValueResolverAware;, +import org.springframework.util.StringValueResolver;, +public class RequestMappingHandlerMapping extends RequestMappingInfoHandlerMapping, +		implements EmbeddedValueResolverAware {, +	private StringValueResolver embeddedValueResolver;, +, +	@Override, +	public void setEmbeddedValueResolver(StringValueResolver resolver) {, +		this.embeddedValueResolver  = resolver;, +	}, +, +		return this.fileExtensions;, +		String[] patterns = resolveEmbeddedValuesInPatterns(annotation.value());, +				new PatternsRequestCondition(patterns, getUrlPathHelper(), getPathMatcher(),, +	/**, +	 * Resolve placeholder values in the given array of patterns., +	 * @return a new array with updated patterns, +	 */, +	protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {, +		if (this.embeddedValueResolver == null) {, +			return patterns;, +		}, +		else {, +			String[] resolvedPatterns = new String[patterns.length];, +			for (int i=0; i < patterns.length; i++) {, +				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i]);, +			}, +			return resolvedPatterns;, +		}, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java, +	 * Path mapping URIs may contain placeholders (e.g. "/${connect}"), +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.context.EmbeddedValueResolverAware;, +import org.springframework.util.StringValueResolver;, +public class RequestMappingHandlerMapping extends RequestMappingInfoHandlerMapping, +		implements EmbeddedValueResolverAware {, +	private StringValueResolver embeddedValueResolver;, +, +	@Override, +	public void setEmbeddedValueResolver(StringValueResolver resolver) {, +		this.embeddedValueResolver  = resolver;, +	}, +, +		return this.fileExtensions;, +		String[] patterns = resolveEmbeddedValuesInPatterns(annotation.value());, +				new PatternsRequestCondition(patterns, getUrlPathHelper(), getPathMatcher(),, +	/**, +	 * Resolve placeholder values in the given array of patterns., +	 * @return a new array with updated patterns, +	 */, +	protected String[] resolveEmbeddedValuesInPatterns(String[] patterns) {, +		if (this.embeddedValueResolver == null) {, +			return patterns;, +		}, +		else {, +			String[] resolvedPatterns = new String[patterns.length];, +			for (int i=0; i < patterns.length; i++) {, +				resolvedPatterns[i] = this.embeddedValueResolver.resolveStringValue(patterns[i]);, +			}, +			return resolvedPatterns;, +		}, +	}, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMappingTests.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.util.StringValueResolver;, +	@Test, +	public void resolveEmbeddedValuesInPatterns() {, +		this.handlerMapping.setEmbeddedValueResolver(new StringValueResolver() {, +			public String resolveStringValue(String value) {, +				return "/${pattern}/bar".equals(value) ? "/foo/bar" : value;, +			}, +		});, +, +		String[] patterns = new String[] { "/foo", "/${pattern}/bar" };, +		String[] result = this.handlerMapping.resolveEmbeddedValuesInPatterns(patterns);, +, +		assertArrayEquals(new String[] { "/foo", "/foo/bar" }, result);, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java, +	 * Path mapping URIs may contain placeholders (e.g. "/${connect}"), +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.context.EmbeddedValueResolverAware;, +import org.springframework.util.StringValueResolver;, +public class RequestMappingHandlerMapping extends RequestMappingInfoHandlerMapping, +		implements EmbeddedValueResolverAware {, +	private StringValueResolver embeddedValueResolver;, +, +	@Override]