[+++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartHttpMessageWriter.java, +import java.util.stream.Collectors;, +	private final DataBufferFactory bufferFactory = new DefaultDataBufferFactory();, +		outputMessage.getHeaders().setContentType(new MediaType("multipart", "form-data",, +		return Mono.from(inputStream).flatMap(map -> {, +, +			Flux<DataBuffer> body = Flux.fromIterable(map.entrySet()), +					.concatMap(entry -> encodePartValues(boundary, entry.getKey(), entry.getValue())), +					.concatWith(Mono.just(generateLastLine(boundary)));, +, +			return outputMessage.writeWith(body);, +		});, +	private Flux<DataBuffer> encodePartValues(byte[] boundary, String name, List<?> values) {, +		return Flux.concat(values.stream().map(v ->, +				encodePart(boundary, name, v)).collect(Collectors.toList()));, +	private <T> Flux<DataBuffer> encodePart(byte[] boundary, String name, T value) {]