[+++ b/spring-context/src/main/java/org/springframework/context/weaving/DefaultContextLoadTimeWeaver.java, + * Copyright 2002-2017 the original author or authors., + * appropriate weaver implementation: As of Spring Framework 5.0, it detects, + * Oracle WebLogic 10+, GlassFish 4+, Tomcat 8+, WildFly 8+, IBM WebSphere 8.5+,, +				if (logger.isInfoEnabled()) {, +			}, +			if (logger.isInfoEnabled()) {, +		}, +			if (logger.isInfoEnabled()) {, +			}, +++ b/spring-context/src/main/java/org/springframework/context/weaving/DefaultContextLoadTimeWeaver.java, + * Copyright 2002-2017 the original author or authors., + * appropriate weaver implementation: As of Spring Framework 5.0, it detects, + * Oracle WebLogic 10+, GlassFish 4+, Tomcat 8+, WildFly 8+, IBM WebSphere 8.5+,, +				if (logger.isInfoEnabled()) {, +			}, +			if (logger.isInfoEnabled()) {, +		}, +			if (logger.isInfoEnabled()) {, +			}, +++ b/spring-context/src/main/java/org/springframework/instrument/classloading/glassfish/GlassFishLoadTimeWeaver.java, + * Copyright 2002-2017 the original author or authors., + * <p>As of Spring Framework 5.0, this weaver supports GlassFish 4+., +	private static final String INSTRUMENTABLE_LOADER_CLASS_NAME =, +			"org.glassfish.api.deployment.InstrumentableClassLoader";, +		catch (Throwable ex) {, +		catch (Throwable ex) {, +		catch (Throwable ex) {, +++ b/spring-context/src/main/java/org/springframework/context/weaving/DefaultContextLoadTimeWeaver.java, + * Copyright 2002-2017 the original author or authors., + * appropriate weaver implementation: As of Spring Framework 5.0, it detects, + * Oracle WebLogic 10+, GlassFish 4+, Tomcat 8+, WildFly 8+, IBM WebSphere 8.5+,, +				if (logger.isInfoEnabled()) {, +			}, +			if (logger.isInfoEnabled()) {, +		}, +			if (logger.isInfoEnabled()) {, +			}, +++ b/spring-context/src/main/java/org/springframework/instrument/classloading/glassfish/GlassFishLoadTimeWeaver.java, + * Copyright 2002-2017 the original author or authors., + * <p>As of Spring Framework 5.0, this weaver supports GlassFish 4+., +	private static final String INSTRUMENTABLE_LOADER_CLASS_NAME =, +			"org.glassfish.api.deployment.InstrumentableClassLoader";, +		catch (Throwable ex) {, +		catch (Throwable ex) {, +		catch (Throwable ex) {, +++ /dev/null, +++ b/spring-context/src/main/java/org/springframework/context/weaving/DefaultContextLoadTimeWeaver.java, + * Copyright 2002-2017 the original author or authors., + * appropriate weaver implementation: As of Spring Framework 5.0, it detects, + * Oracle WebLogic 10+, GlassFish 4+, Tomcat 8+, WildFly 8+, IBM WebSphere 8.5+,, +				if (logger.isInfoEnabled()) {, +			}, +			if (logger.isInfoEnabled()) {, +		}, +			if (logger.isInfoEnabled()) {, +			}, +++ b/spring-context/src/main/java/org/springframework/instrument/classloading/glassfish/GlassFishLoadTimeWeaver.java, + * Copyright 2002-2017 the original author or authors., + * <p>As of Spring Framework 5.0, this weaver supports GlassFish 4+., +	private static final String INSTRUMENTABLE_LOADER_CLASS_NAME =, +			"org.glassfish.api.deployment.InstrumentableClassLoader";, +		catch (Throwable ex) {, +		catch (Throwable ex) {, +		catch (Throwable ex) {, +++ /dev/null, +++ b/spring-context/src/main/java/org/springframework/instrument/classloading/jboss/JBossLoadTimeWeaver.java, + * Copyright 2002-2017 the original author or authors., +import java.lang.reflect.Field;, +import java.lang.reflect.Method;, +import org.springframework.util.ReflectionUtils;, + * Thanks to Ales Justin and Marius Bogoevici for the initial prototype., + * <p>As of Spring Framework 5.0, this weaver supports WildFly 8+., +	private static final String DELEGATING_TRANSFORMER_CLASS_NAME =, +			"org.jboss.as.server.deployment.module.DelegatingClassFileTransformer";, +, +, +	private final ClassLoader classLoader;, +, +	private final Object delegatingTransformer;, +, +	private final Method addTransformer;, +		this.classLoader = classLoader;, +		try {, +			Field transformer = ReflectionUtils.findField(classLoader.getClass(), "transformer");, +			if (transformer == null) {, +				throw new IllegalArgumentException("Could not find 'transformer' field on JBoss ClassLoader: " +, +						classLoader.getClass().getName());, +			transformer.setAccessible(true);, +			this.delegatingTransformer = transformer.get(classLoader);, +			if (!this.delegatingTransformer.getClass().getName().equals(DELEGATING_TRANSFORMER_CLASS_NAME)) {, +				throw new IllegalStateException(, +						"Transformer not of the expected type DelegatingClassFileTransformer: " +, +						this.delegatingTransformer.getClass().getName());, +			}, +			this.addTransformer = ReflectionUtils.findMethod(this.delegatingTransformer.getClass(),, +					"addTransformer", ClassFileTransformer.class);, +			if (this.addTransformer == null) {, +				throw new IllegalArgumentException(, +						"Could not find 'addTransformer' method on JBoss DelegatingClassFileTransformer: " +]