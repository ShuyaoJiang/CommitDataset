[+++ b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java, + * Copyright 2002-2015 the original author or authors., + * {@link PathMatcher} implementation for Ant-style path patterns., + * <p>The mapping matches URLs using the following rules:<br>, + * <ul>, + * <li>{@code ?} matches one character</li>, + * <li>{@code *} matches zero or more characters</li>, + * <li>{@code **} matches zero or more <em>directories</em> in a path</li>, + * </ul>, + * <h3>Examples</h3>, + * <ul>, + * <li>{@code com/t?st.jsp} &mdash; matches {@code com/test.jsp} but also, + * {@code com/tast.jsp} or {@code com/txst.jsp}</li>, + * <li>{@code com/*.jsp} &mdash; matches all {@code .jsp} files in the, + * {@code com} directory</li>, + * <li><code>com/&#42;&#42;/test.jsp</code> &mdash; matches all {@code test.jsp}, + * files underneath the {@code com} path</li>, + * <li><code>org/springframework/&#42;&#42;/*.jsp</code> &mdash; matches all, + * {@code .jsp} files underneath the {@code org/springframework} path</li>, + * <li><code>org/&#42;&#42;/servlet/bla.jsp</code> &mdash; matches, + * {@code org/springframework/servlet/bla.jsp} but also, + * {@code org/springframework/testing/servlet/bla.jsp} and {@code org/servlet/bla.jsp}</li>, + * </ul>, + * @author Sam Brannen, +	 * A convenient, alternative constructor to use with a custom path separator., +	 * <p>Default is "/", as in Ant., +	 * <p>Default is {@code true}., +	 * are coming in, with little chance for encountering a recurring pattern., +	 * Test whether or not a string matches against a pattern., +	 * <p>When encountering too many patterns to cache at runtime (the threshold is 65536),, +	 * are coming in, with little chance for encountering a recurring pattern., +	 * <p>This method may be overridden to implement a custom cache strategy., +	 * Combine two patterns into a new pattern., +	 *, +	 * <p>This implementation simply concatenates the two patterns, unless, +	 * the first pattern contains a file extension match (e.g., {@code *.html})., +	 * In that case, the second pattern will be merged into the first. Otherwise,, +	 * an {@code IllegalArgumentException} will be thrown., +	 *, +	 * <h3>Examples</h3>, +	 * <table border="1">, +	 * <tr><th>Pattern 1</th><th>Pattern 2</th><th>Result</th></tr>, +	 * <tr><td>{@code null}</td><td>{@code null}</td><td>&nbsp;</td></tr>, +	 * <tr><td>/hotels</td><td>{@code null}</td><td>/hotels</td></tr>, +	 * <tr><td>{@code null}</td><td>/hotels</td><td>/hotels</td></tr>, +	 * <tr><td>/hotels</td><td>/bookings</td><td>/hotels/bookings</td></tr>, +	 * <tr><td>/hotels</td><td>bookings</td><td>/hotels/bookings</td></tr>, +	 * <tr><td>/hotels/*</td><td>/bookings</td><td>/hotels/bookings</td></tr>, +	 * <tr><td>/hotels/&#42;&#42;</td><td>/bookings</td><td>/hotels/&#42;&#42;/bookings</td></tr>, +	 * <tr><td>/hotels</td><td>{hotel}</td><td>/hotels/{hotel}</td></tr>, +	 * <tr><td>/hotels/*</td><td>{hotel}</td><td>/hotels/{hotel}</td></tr>, +	 * <tr><td>/*.html</td><td>/hotels.html</td><td>/hotels.html</td></tr>, +	 * <tr><td>/*.html</td><td>/hotels</td><td>/hotels.html</td></tr>, +	 * <tr><td>/*.html</td><td>/*.txt</td><td>{@code IllegalArgumentException}</td></tr>, +	 * </table>, +	 *, +	 * @throws IllegalArgumentException if the two patterns cannot be combined, +		boolean path1EndsWithSeparator = path1.endsWith(this.pathSeparator);, +		boolean path2StartsWithSeparator = path2.startsWith(this.pathSeparator);, +, +		if (path1EndsWithSeparator && path2StartsWithSeparator) {, +			return path1 + path2.substring(1);, +		}, +		else if (path1EndsWithSeparator || path2StartsWithSeparator) {, +		else {, +	}, +++ b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java, + * Copyright 2002-2015 the original author or authors., + * {@link PathMatcher} implementation for Ant-style path patterns., + * <p>The mapping matches URLs using the following rules:<br>, + * <ul>, + * <li>{@code ?} matches one character</li>, + * <li>{@code *} matches zero or more characters</li>, + * <li>{@code **} matches zero or more <em>directories</em> in a path</li>, + * </ul>, + * <h3>Examples</h3>, + * <ul>, + * <li>{@code com/t?st.jsp} &mdash; matches {@code com/test.jsp} but also, + * {@code com/tast.jsp} or {@code com/txst.jsp}</li>, + * <li>{@code com/*.jsp} &mdash; matches all {@code .jsp} files in the, + * {@code com} directory</li>, + * <li><code>com/&#42;&#42;/test.jsp</code> &mdash; matches all {@code test.jsp}, + * files underneath the {@code com} path</li>, + * <li><code>org/springframework/&#42;&#42;/*.jsp</code> &mdash; matches all, + * {@code .jsp} files underneath the {@code org/springframework} path</li>, + * <li><code>org/&#42;&#42;/servlet/bla.jsp</code> &mdash; matches, + * {@code org/springframework/servlet/bla.jsp} but also, + * {@code org/springframework/testing/servlet/bla.jsp} and {@code org/servlet/bla.jsp}</li>, + * </ul>, + * @author Sam Brannen, +	 * A convenient, alternative constructor to use with a custom path separator., +	 * <p>Default is "/", as in Ant., +	 * <p>Default is {@code true}., +	 * are coming in, with little chance for encountering a recurring pattern., +	 * Test whether or not a string matches against a pattern., +	 * <p>When encountering too many patterns to cache at runtime (the threshold is 65536),, +	 * are coming in, with little chance for encountering a recurring pattern., +	 * <p>This method may be overridden to implement a custom cache strategy., +	 * Combine two patterns into a new pattern., +	 *]