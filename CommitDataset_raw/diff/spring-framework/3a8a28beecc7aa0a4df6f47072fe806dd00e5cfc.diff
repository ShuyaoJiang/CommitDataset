[+++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +			this.partialPaths = Collections.unmodifiableList(initPartialPaths(path));, +			this.partialPaths = Collections.unmodifiableList(partialPaths);, +			this.path = initPath(partialPaths);, +		}, +, +		private static String initPath(List<PartialPath> partialPaths) {, +			StringBuilder builder = new StringBuilder();, +			for (PartialPath partialPath : partialPaths) {, +				builder.append(partialPath.getValue());, +			}, +			return builder.toString();, +		}, +, +		private static List<PartialPath> initPartialPaths(String path) {, +			List<PartialPath> result = new ArrayList<PartialPath>();, +			int startIdx;, +			int endIdx = 0;, +			while ((startIdx = path.indexOf("{/", endIdx)) != -1) {, +				if (startIdx > endIdx) {, +					String prevPart = path.substring(endIdx, startIdx);, +					result.add(new PartialPath(prevPart, Type.PATH));, +				}, +				endIdx = path.indexOf('}', startIdx + 2) + 1;, +				if (endIdx == -1) {, +					throw new IllegalArgumentException("Path \"" + path + "\" has no " +, +							"closing \"}\" after \"{/\" at index " + startIdx);, +				}, +				String part = path.substring(startIdx, endIdx);, +				result.add(new PartialPath(part, Type.PATH_SEGMENT));, +			}, +			if (endIdx < path.length()) {, +				String endPart = path.substring(endIdx);, +				result.add(new PartialPath(endPart, Type.PATH));, +			}, +			return result;, +		}, +, +		List<PartialPath> getPartialPaths() {, +			return this.partialPaths;, +			List<PartialPath> result = new ArrayList<PartialPath>();, +			for (PartialPath partialPath : this.partialPaths) {, +				PartialPath encoded = partialPath.encode(encoding);, +				result.add(encoded);, +			}, +			return new FullPathComponent(result);, +			for (PartialPath partialPath : this.partialPaths) {, +				partialPath.verify();, +			}, +			List<PartialPath> result = new ArrayList<PartialPath>();, +			for (PartialPath partialPath : this.partialPaths) {, +				PartialPath expanded = partialPath.expand(uriVariables);, +				result.add(expanded);, +			}, +			return new FullPathComponent(result);, +			public String getValue() {, +				return this.value;, +			}, +, +			private PartialPath encode(String encoding) throws UnsupportedEncodingException {, +			public void verify() {, +				verifyUriComponent(this.value, this.type);, +			}, +, +				return this.value;, +		@SuppressWarnings("EqualsWhichDoesntCheckParameterClass"), +++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +			this.partialPaths = Collections.unmodifiableList(initPartialPaths(path));, +			this.partialPaths = Collections.unmodifiableList(partialPaths);, +			this.path = initPath(partialPaths);, +		}, +, +		private static String initPath(List<PartialPath> partialPaths) {, +			StringBuilder builder = new StringBuilder();, +			for (PartialPath partialPath : partialPaths) {, +				builder.append(partialPath.getValue());, +			}, +			return builder.toString();, +		}, +, +		private static List<PartialPath> initPartialPaths(String path) {, +			List<PartialPath> result = new ArrayList<PartialPath>();, +			int startIdx;, +			int endIdx = 0;, +			while ((startIdx = path.indexOf("{/", endIdx)) != -1) {, +				if (startIdx > endIdx) {, +					String prevPart = path.substring(endIdx, startIdx);, +					result.add(new PartialPath(prevPart, Type.PATH));, +				}, +				endIdx = path.indexOf('}', startIdx + 2) + 1;, +				if (endIdx == -1) {, +					throw new IllegalArgumentException("Path \"" + path + "\" has no " +, +							"closing \"}\" after \"{/\" at index " + startIdx);, +				}, +				String part = path.substring(startIdx, endIdx);, +				result.add(new PartialPath(part, Type.PATH_SEGMENT));, +			}, +			if (endIdx < path.length()) {, +				String endPart = path.substring(endIdx);, +				result.add(new PartialPath(endPart, Type.PATH));]