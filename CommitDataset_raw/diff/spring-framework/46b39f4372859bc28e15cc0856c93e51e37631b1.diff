[+++ b/build.gradle, +		optional("javax.websocket:javax.websocket-api:${websocketVersion}"), +		optional("org.apache.tomcat:tomcat-websocket:${tomcatVersion}") {, +			exclude group: "org.apache.tomcat", module: "tomcat-websocket-api", +			exclude group: "org.apache.tomcat", module: "tomcat-servlet-api", +		}, +++ b/build.gradle, +		optional("javax.websocket:javax.websocket-api:${websocketVersion}"), +		optional("org.apache.tomcat:tomcat-websocket:${tomcatVersion}") {, +			exclude group: "org.apache.tomcat", module: "tomcat-websocket-api", +			exclude group: "org.apache.tomcat", module: "tomcat-servlet-api", +		}, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/TomcatWebSocketHandlerAdapter.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.reactive.socket.adapter;, +, +import java.nio.ByteBuffer;, +import java.nio.charset.StandardCharsets;, +, +import javax.websocket.CloseReason;, +import javax.websocket.Endpoint;, +import javax.websocket.EndpointConfig;, +import javax.websocket.MessageHandler;, +import javax.websocket.PongMessage;, +import javax.websocket.Session;, +, +import org.reactivestreams.Subscriber;, +import org.reactivestreams.Subscription;, +import org.springframework.core.io.buffer.DataBufferFactory;, +import org.springframework.core.io.buffer.DefaultDataBufferFactory;, +import org.springframework.util.Assert;, +import org.springframework.web.reactive.socket.CloseStatus;, +import org.springframework.web.reactive.socket.WebSocketHandler;, +import org.springframework.web.reactive.socket.WebSocketMessage;, +import org.springframework.web.reactive.socket.WebSocketMessage.Type;, +, +/**, + * Tomcat {@code WebSocketHandler} implementation adapting and, + * delegating to a Spring {@link WebSocketHandler}., + * , + * @author Violeta Georgieva, + * @since 5.0, + */, +public class TomcatWebSocketHandlerAdapter extends Endpoint {, +, +	private final DataBufferFactory bufferFactory = new DefaultDataBufferFactory(false);, +, +	private final WebSocketHandler handler;, +, +	private TomcatWebSocketSession wsSession;, +, +	public TomcatWebSocketHandlerAdapter(WebSocketHandler handler) {, +		Assert.notNull("'handler' is required");, +		this.handler = handler;, +	}, +, +	@Override, +	public void onOpen(Session session, EndpointConfig config) {, +		this.wsSession = new TomcatWebSocketSession(session);, +, +		session.addMessageHandler(new MessageHandler.Whole<String>() {, +, +			@Override, +			public void onMessage(String message) {, +				while (true) {, +					if (wsSession.canWebSocketMessagePublisherAccept()) {, +						WebSocketMessage wsMessage = toMessage(message);, +						wsSession.handleMessage(wsMessage.getType(), wsMessage);, +						break;, +					}, +				}, +			}, +, +		});, +		session.addMessageHandler(new MessageHandler.Whole<ByteBuffer>() {, +, +			@Override, +			public void onMessage(ByteBuffer message) {, +				while (true) {, +					if (wsSession.canWebSocketMessagePublisherAccept()) {, +						WebSocketMessage wsMessage = toMessage(message);, +						wsSession.handleMessage(wsMessage.getType(), wsMessage);, +						break;, +					}, +				}]