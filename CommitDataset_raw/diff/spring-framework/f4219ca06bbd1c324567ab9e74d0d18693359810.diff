[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +				AnnotationAttributes ann = BridgeMethodResolver.isVisibilityBridgeMethodPair(method, bridgedMethod) ?, +				if (ann != null && !method.isBridge() && method.equals(ClassUtils.getMostSpecificMethod(method, clazz))) {, +					boolean required = determineRequiredStatus(ann);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +				AnnotationAttributes ann = BridgeMethodResolver.isVisibilityBridgeMethodPair(method, bridgedMethod) ?, +				if (ann != null && !method.isBridge() && method.equals(ClassUtils.getMostSpecificMethod(method, clazz))) {, +					boolean required = determineRequiredStatus(ann);, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java, +import java.util.concurrent.Callable;, +	@Test, +	public void testBridgeMethodHandling() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		bf.registerBeanDefinition("bean1", new RootBeanDefinition(MyCallable.class));, +		bf.registerBeanDefinition("bean2", new RootBeanDefinition(SecondCallable.class));, +		bf.registerBeanDefinition("bean3", new RootBeanDefinition(FooBar.class));, +		assertNotNull(bf.getBean(FooBar.class));, +	}, +, +, +	public static class MyCallable implements Callable<Thread> {, +, +		@Override, +		public Thread call() throws Exception {, +			return null;, +		}, +	}, +, +, +	public static class SecondCallable implements Callable<Thread>{, +, +		@Override, +		public Thread call() throws Exception {, +			return null;, +		}, +	}, +, +, +	public static abstract class Foo<T extends Runnable, RT extends Callable<T>> {, +, +		private RT obj;, +, +		protected void setObj(RT obj) {, +			if (this.obj != null) {, +				throw new IllegalStateException("Already called");, +			}, +			this.obj = obj;, +		}, +	}, +, +, +	public static class FooBar extends Foo<Thread, MyCallable> {, +, +		@Override, +		@Autowired, +		public void setObj(MyCallable obj) {, +			super.setObj(obj);, +		}, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +				AnnotationAttributes ann = BridgeMethodResolver.isVisibilityBridgeMethodPair(method, bridgedMethod) ?, +				if (ann != null && !method.isBridge() && method.equals(ClassUtils.getMostSpecificMethod(method, clazz))) {, +					boolean required = determineRequiredStatus(ann);, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java, +import java.util.concurrent.Callable;, +	@Test, +	public void testBridgeMethodHandling() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		bf.registerBeanDefinition("bean1", new RootBeanDefinition(MyCallable.class));, +		bf.registerBeanDefinition("bean2", new RootBeanDefinition(SecondCallable.class));, +		bf.registerBeanDefinition("bean3", new RootBeanDefinition(FooBar.class));, +		assertNotNull(bf.getBean(FooBar.class));, +	}, +, +, +	public static class MyCallable implements Callable<Thread> {, +, +		@Override, +		public Thread call() throws Exception {, +			return null;, +		}, +	}, +, +, +	public static class SecondCallable implements Callable<Thread>{, +, +		@Override, +		public Thread call() throws Exception {, +			return null;, +		}, +	}, +, +]