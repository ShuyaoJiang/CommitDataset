[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java, + * Copyright 2002-2018 the original author or authors., +import java.util.ArrayList;, +			config.setAllowedOrigins(new ArrayList<>(this.allowedOrigins));, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java, + * Copyright 2002-2018 the original author or authors., +import java.util.ArrayList;, +			config.setAllowedOrigins(new ArrayList<>(this.allowedOrigins));, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/support/SockJsServiceTests.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.web.cors.CorsConfiguration;, +	public void handleInfoOptionsWithAllowedOrigin() throws Exception {, +	}, +	@Test  // SPR-16304, +	public void handleInfoOptionsWithForbiddenOrigin() throws Exception {, +		this.servletRequest.addHeader(HttpHeaders.ORIGIN, "http://mydomain2.com");, +		this.servletRequest.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, "GET");, +		this.servletRequest.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_HEADERS, "Last-Modified");, +		resetResponseAndHandleRequest("OPTIONS", "/echo/info", HttpStatus.FORBIDDEN);, +		CorsConfiguration corsConfiguration = this.service.getCorsConfiguration(this.servletRequest);, +		assertTrue(corsConfiguration.getAllowedOrigins().isEmpty());, +, +		corsConfiguration = this.service.getCorsConfiguration(this.servletRequest);, +		assertEquals(Arrays.asList("http://mydomain1.com"), corsConfiguration.getAllowedOrigins());]