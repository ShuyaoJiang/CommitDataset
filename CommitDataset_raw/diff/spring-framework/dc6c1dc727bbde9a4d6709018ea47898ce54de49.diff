[+++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/MBeanExporter.java, +import java.util.LinkedHashSet;, +import org.springframework.beans.factory.CannotLoadBeanClassException;, +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +	/** Whether to eagerly initialize candidate beans when autodetecting MBeans */, +			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.");, +		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&, +				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit());, +							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit);, +		Set<String> beanNames = new LinkedHashSet<String>(this.beanFactory.getBeanDefinitionCount());, +		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()));, +		if (this.beanFactory instanceof ConfigurableBeanFactory) {, +			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()));, +		}, +				try {, +				catch (CannotLoadBeanClassException ex) {, +					if (this.allowEagerInit) {, +						throw ex;, +					}, +					// otherwise ignore beans where the class is not resolvable, +				}, +			}, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/MBeanExporter.java, +import java.util.LinkedHashSet;, +import org.springframework.beans.factory.CannotLoadBeanClassException;, +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +	/** Whether to eagerly initialize candidate beans when autodetecting MBeans */, +			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.");, +		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&, +				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit());, +							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit);, +		Set<String> beanNames = new LinkedHashSet<String>(this.beanFactory.getBeanDefinitionCount());, +		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()));, +		if (this.beanFactory instanceof ConfigurableBeanFactory) {, +			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()));, +		}, +				try {, +				catch (CannotLoadBeanClassException ex) {, +					if (this.allowEagerInit) {, +						throw ex;, +					}, +					// otherwise ignore beans where the class is not resolvable, +				}, +			}, +++ b/org.springframework.context/src/test/java/org/springframework/jmx/export/annotation/AnnotationLazyInitMBeanTests.java, +			oname = ObjectNameManager.getInstance("bean:name=testBean5");, +			assertNotNull(server.getObjectInstance(oname));, +			name = (String) server.getAttribute(oname, "Name");, +			assertEquals("Invalid name returned", "FACTORY", name);, +, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/MBeanExporter.java, +import java.util.LinkedHashSet;, +import org.springframework.beans.factory.CannotLoadBeanClassException;, +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +	/** Whether to eagerly initialize candidate beans when autodetecting MBeans */, +			logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.");, +		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&, +				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isLazyInit());, +							this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit);, +		Set<String> beanNames = new LinkedHashSet<String>(this.beanFactory.getBeanDefinitionCount());, +		beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()));, +		if (this.beanFactory instanceof ConfigurableBeanFactory) {, +			beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()));, +		}, +				try {, +				catch (CannotLoadBeanClassException ex) {, +					if (this.allowEagerInit) {, +						throw ex;, +					}, +					// otherwise ignore beans where the class is not resolvable, +				}, +			}, +++ b/org.springframework.context/src/test/java/org/springframework/jmx/export/annotation/AnnotationLazyInitMBeanTests.java, +			oname = ObjectNameManager.getInstance("bean:name=testBean5");, +			assertNotNull(server.getObjectInstance(oname));, +			name = (String) server.getAttribute(oname, "Name");, +			assertEquals("Invalid name returned", "FACTORY", name);, +, +++ b/org.springframework.context/src/test/java/org/springframework/jmx/export/annotation/AnnotationTestBeanFactory.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.jmx.export.annotation;, +, +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.jmx.IJmxTestBean;, +]