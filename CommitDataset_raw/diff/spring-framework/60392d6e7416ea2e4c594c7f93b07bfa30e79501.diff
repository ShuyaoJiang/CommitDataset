[+++ b/org.springframework.context/src/main/java/org/springframework/context/ApplicationListener.java, + * Copyright 2002-2009 the original author or authors., + * @author Juergen Hoeller, +public interface ApplicationListener<E extends ApplicationEvent> extends EventListener {, +	void onApplicationEvent(E event);, +++ b/org.springframework.context/src/main/java/org/springframework/context/ApplicationListener.java, + * Copyright 2002-2009 the original author or authors., + * @author Juergen Hoeller, +public interface ApplicationListener<E extends ApplicationEvent> extends EventListener {, +	void onApplicationEvent(E event);, +++ b/org.springframework.context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, + * Copyright 2002-2009 the original author or authors., +import java.util.Collections;, +import java.util.LinkedList;, +import java.util.Set;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.core.OrderComparator;, +public abstract class AbstractApplicationEventMulticaster, +		implements ApplicationEventMulticaster, BeanFactoryAware {, +	private final Set<ApplicationListener> applicationListeners = new LinkedHashSet<ApplicationListener>();, +	private final Set<String> applicationListenerBeans = new LinkedHashSet<String>();, +	private BeanFactory beanFactory;, +	public void addApplicationListenerBean(String listenerBeanName) {, +		this.applicationListenerBeans.add(listenerBeanName);, +	public final void setBeanFactory(BeanFactory beanFactory) {, +		this.beanFactory = beanFactory;, +		LinkedList<ApplicationListener> allListeners =, +				new LinkedList<ApplicationListener>(this.applicationListeners);, +		if (!this.applicationListenerBeans.isEmpty()) {, +			if (this.beanFactory == null) {, +				throw new IllegalStateException("ApplicationEventMulticaster cannot retrieve listener beans " +, +						"because it is not associated with a BeanFactory: " + this.applicationListenerBeans);, +			}, +			for (String listenerBeanName : applicationListenerBeans) {, +				allListeners.add(this.beanFactory.getBean(listenerBeanName, ApplicationListener.class));, +			}, +		}, +		Collections.sort(allListeners, new OrderComparator());, +		return allListeners;, +++ b/org.springframework.context/src/main/java/org/springframework/context/ApplicationListener.java, + * Copyright 2002-2009 the original author or authors., + * @author Juergen Hoeller, +public interface ApplicationListener<E extends ApplicationEvent> extends EventListener {, +	void onApplicationEvent(E event);, +++ b/org.springframework.context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, + * Copyright 2002-2009 the original author or authors., +import java.util.Collections;, +import java.util.LinkedList;, +import java.util.Set;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.core.OrderComparator;, +public abstract class AbstractApplicationEventMulticaster, +		implements ApplicationEventMulticaster, BeanFactoryAware {, +	private final Set<ApplicationListener> applicationListeners = new LinkedHashSet<ApplicationListener>();, +	private final Set<String> applicationListenerBeans = new LinkedHashSet<String>();, +	private BeanFactory beanFactory;, +	public void addApplicationListenerBean(String listenerBeanName) {, +		this.applicationListenerBeans.add(listenerBeanName);, +	public final void setBeanFactory(BeanFactory beanFactory) {, +		this.beanFactory = beanFactory;, +		LinkedList<ApplicationListener> allListeners =, +				new LinkedList<ApplicationListener>(this.applicationListeners);, +		if (!this.applicationListenerBeans.isEmpty()) {, +			if (this.beanFactory == null) {, +				throw new IllegalStateException("ApplicationEventMulticaster cannot retrieve listener beans " +, +						"because it is not associated with a BeanFactory: " + this.applicationListenerBeans);, +			}, +			for (String listenerBeanName : applicationListenerBeans) {, +				allListeners.add(this.beanFactory.getBean(listenerBeanName, ApplicationListener.class));, +			}, +		}, +		Collections.sort(allListeners, new OrderComparator());, +		return allListeners;, +++ b/org.springframework.context/src/main/java/org/springframework/context/event/ApplicationEventMulticaster.java, + * Copyright 2002-2009 the original author or authors., + * @author Juergen Hoeller, +	 * Add a listener to be notified of all events., +	 * @param listenerBeanName the name of the listener bean to add, +	void addApplicationListenerBean(String listenerBeanName);, +++ b/org.springframework.context/src/main/java/org/springframework/context/ApplicationListener.java, + * Copyright 2002-2009 the original author or authors., + * @author Juergen Hoeller, +public interface ApplicationListener<E extends ApplicationEvent> extends EventListener {, +	void onApplicationEvent(E event);, +++ b/org.springframework.context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, + * Copyright 2002-2009 the original author or authors., +import java.util.Collections;, +import java.util.LinkedList;, +import java.util.Set;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.core.OrderComparator;, +public abstract class AbstractApplicationEventMulticaster, +		implements ApplicationEventMulticaster, BeanFactoryAware {, +	private final Set<ApplicationListener> applicationListeners = new LinkedHashSet<ApplicationListener>();, +	private final Set<String> applicationListenerBeans = new LinkedHashSet<String>();, +	private BeanFactory beanFactory;, +	public void addApplicationListenerBean(String listenerBeanName) {]