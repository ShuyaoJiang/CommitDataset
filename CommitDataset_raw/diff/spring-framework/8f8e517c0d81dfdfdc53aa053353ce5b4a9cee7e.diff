[+++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/handler/AbstractHandlerMapping.java, + * Copyright 2002-2012 the original author or authors., +public abstract class AbstractHandlerMapping extends ApplicationObjectSupport implements HandlerMapping, Ordered {, +	 * @param request current portlet request, +++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/handler/AbstractHandlerMapping.java, + * Copyright 2002-2012 the original author or authors., +public abstract class AbstractHandlerMapping extends ApplicationObjectSupport implements HandlerMapping, Ordered {, +	 * @param request current portlet request, +++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/DefaultAnnotationHandlerMapping.java, +			if (other instanceof SpecialRequestTypePredicate) {, +				return this.getClass().getName().compareTo(other.getClass().getName());, +			}, +			return -1;, +			if (other instanceof SpecialRequestTypePredicate) {, +				return this.getClass().getName().compareTo(other.getClass().getName());, +			}, +            return -1;, +			if (other instanceof SpecialRequestTypePredicate) {, +				return this.getClass().getName().compareTo(other.getClass().getName());, +			}, +            return -1;, +			if (other instanceof SpecialRequestTypePredicate) {, +				return this.getClass().getName().compareTo(other.getClass().getName());, +			}, +			return -1;, +++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/handler/AbstractHandlerMapping.java, + * Copyright 2002-2012 the original author or authors., +public abstract class AbstractHandlerMapping extends ApplicationObjectSupport implements HandlerMapping, Ordered {, +	 * @param request current portlet request, +++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/DefaultAnnotationHandlerMapping.java, +			if (other instanceof SpecialRequestTypePredicate) {, +				return this.getClass().getName().compareTo(other.getClass().getName());, +			}, +			return -1;, +			if (other instanceof SpecialRequestTypePredicate) {, +				return this.getClass().getName().compareTo(other.getClass().getName());, +			}, +            return -1;, +			if (other instanceof SpecialRequestTypePredicate) {, +				return this.getClass().getName().compareTo(other.getClass().getName());, +			}, +            return -1;, +			if (other instanceof SpecialRequestTypePredicate) {, +				return this.getClass().getName().compareTo(other.getClass().getName());, +			}, +			return -1;, +++ b/spring-webmvc-portlet/src/test/java/org/springframework/web/portlet/mvc/annotation/Portlet20AnnotationControllerTests.java, +				wac.registerSingleton("thirdController", ThirdController.class);, +		// Make sure all 6 annotated methods can be called, +, +, +		// renderFirst, +		assertArrayEquals(new String[] { "renderFirst" }, response.getProperties("RESPONSE"));, +, +		// renderSecond, +		request.setWindowState(WindowState.MAXIMIZED);, +		request.setParameter("report", "second");, +		portlet.render(request, response);, +		assertArrayEquals(new String[] { "renderSecond" }, response.getProperties("RESPONSE"));, +, +		// renderThirds, +		request.setWindowState(WindowState.MAXIMIZED);, +		request.setParameter("report", "third");, +		portlet.render(request, response);, +		assertArrayEquals(new String[] { "renderThird" }, response.getProperties("RESPONSE"));, +, +		MockResourceRequest resourceRequest;, +		MockResourceResponse resourceResponse = new MockResourceResponse();, +, +		// resourceFirst, +		resourceRequest = new MockResourceRequest("first");, +		portlet.serveResource(resourceRequest, resourceResponse);, +		assertArrayEquals(new String[] { "resourceFirst" }, resourceResponse.getProperties("RESPONSE"));, +, +		// resourceSecond, +		resourceRequest = new MockResourceRequest("second");, +		portlet.serveResource(resourceRequest, resourceResponse);, +		assertArrayEquals(new String[] { "resourceSecond" }, resourceResponse.getProperties("RESPONSE"));, +, +		// resourceThirds, +		resourceRequest = new MockResourceRequest("third");, +		portlet.serveResource(resourceRequest, resourceResponse);, +		assertArrayEquals(new String[] { "resourceThird" }, resourceResponse.getProperties("RESPONSE"));, +		public String renderFirst(RenderResponse response) {, +			response.setProperty("RESPONSE", "renderFirst");, +			return "renderFirst";, +		@ResourceMapping("first"), +		public String resourceFirst(ResourceResponse response) {, +			response.setProperty("RESPONSE", "resourceFirst");, +			return "resourceFirst";, +		@ResourceMapping("second"), +		public String processResource(ResourceResponse response) {, +			response.setProperty("RESPONSE", "resourceSecond");, +			return "resourceSecond";, +		@RenderMapping(value = "MAXIMIZED", params = "report=second"), +		public String renderSecond(RenderResponse response) {, +			response.setProperty("RESPONSE", "renderSecond");, +			return "renderSecond";, +		}, +	}]