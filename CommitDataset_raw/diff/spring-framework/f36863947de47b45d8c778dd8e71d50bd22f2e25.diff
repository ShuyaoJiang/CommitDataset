[+++ b/src/asciidoc/index.adoc, +when it is a good fit., +==== Overview of the STOMP Protocol, +==== Enable STOMP (over WebSocket), +==== Overview of STOMP Message Handling, +, +When a STOMP endpoint is configured, the Spring application effectively becomes, +the broker to connected clients, handling incoming messages and broadcasting, +messages back to them. This part of the documentation describes how STOMP, +messages are handled within the application., +, +As mentioned in the <<websocket-intro-architecture,introduction>> the, +`spring-messaging` module contains key abstractions from the, +https://spring.io/spring-integration[Spring Integration] project including, +`Message`, `MessageChannel`, `MessageHandler` and a few others., +, +[NOTE], +====, +Spring Integration 4 will be the first version to start using the abstractions, +from the package structure of the `spring-messaging` module as opposed to its, +own present packages. Spring Integration also provides many additional, +abstractions and implementations in support of the well-known, +EAI patterns (http://www.eaipatterns.com/[enterprise integration patterns])., +====, +, +https://github.com/spring-projects/spring-framework/blob/master/spring-messaging/src/main/java/org/springframework/messaging/MessageChannel.java[MessageChannel], +is a simple contract for passing messages between components without, +creating tight coupling among them., +https://github.com/spring-projects/spring-framework/blob/master/spring-messaging/src/main/java/org/springframework/messaging/SubscribableChannel.java[SubscribableChannel] extends, +it with the ability to register subscribers and, +https://github.com/spring-projects/spring-framework/blob/master/spring-messaging/src/main/java/org/springframework/messaging/support/ExecutorSubscribableChannel.java[ExecutorSubscribableChannel], +is an implementation that passes messages to subscribers in, +the same thread or a different thread depending on whether it has been provided with, +a `java.util.concurrent.Executor`. This enables assembling message, +handling flows from various components and modifying them through configuration., +, +The provided Java config `@EnableWebSocketMessageBroker` and XML namespace, +`<websocket:message-broker>` each put together a default message handling, +flow for applications to use, as explained next. This flow can be modified,, +customized, or extended. For example an application can add a, +https://github.com/spring-projects/spring-framework/blob/master/spring-messaging/src/main/java/org/springframework/messaging/support/ChannelInterceptor.java[ChannelInterceptor], +to any message channel in order to intercept messages passing through it,, +it can register additional message handling components, alternate between, +synchronous and asynchronous message passing, and so on., +, +Incoming client STOMP messages are passed to a message channel with the name, +`"clientInboundChannel"`. By default the messages are routed to annotated, +methods as well as to a "simple" message broker. This simple message broker, +automatically records subscriptions, in-memory, and broadcasts messages as, +necessary. As explained later you can also use a full-featured message broker, +(e.g. RabbitMQ, ActiveMQ, and any other broker that supports STOMP) to manage, +subscriptions and broadcast messages., +, +Below is example configuration:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Configuration, +	@EnableWebSocketMessageBroker, +	public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {, +, +		@Override, +		public void registerStompEndpoints(StompEndpointRegistry registry) {, +			registry.addEndpoint("/portfolio").withSockJS();, +		}, +, +		@Override, +		public void configureMessageBroker(MessageBrokerRegistry registry) {, +			registry.enableSimpleBroker("/topic/");, +			registry.setApplicationDestinationPrefixes("/app");, +		}, +, +	}, +----, +, +XML configuration equivalent:, +, +[source,xml,indent=0], +[subs="verbatim,quotes,attributes"], +----, +	<beans xmlns="http://www.springframework.org/schema/beans", +		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +		xmlns:websocket="http://www.springframework.org/schema/websocket", +		xsi:schemaLocation=", +			http://www.springframework.org/schema/beans, +			http://www.springframework.org/schema/beans/spring-beans.xsd, +			http://www.springframework.org/schema/websocket, +			http://www.springframework.org/schema/websocket/spring-websocket-4.0.xsd">, +, +		<websocket:message-broker application-destination-prefix="/app">, +			<websocket:stomp-endpoint path="/portfolio" />, +				<websocket:sockjs/>, +			</websocket:stomp-endpoint>, +			<websocket:simple-broker prefix="/topic"/>, +		</websocket:message-broker>, +, +	</beans>, +----, +]