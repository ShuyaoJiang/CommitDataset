[+++ b/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionConfiguration.java, + * Copyright 2002-2012 the original author or authors., + * {@code TransactionConfiguration} defines class-level metadata for configuring, + * @see org.springframework.test.context.ContextConfiguration, +	 * The bean name of the {@link org.springframework.transaction.PlatformTransactionManager, +	 * PlatformTransactionManager} that is to be used to drive transactions., +	 *, +	 * <p>This attribute is not required and only needs to be specified explicitly, +	 * if there are multiple beans of type {@code PlatformTransactionManager} in, +	 * the test's {@code ApplicationContext} and the bean name of the desired, +	 * {@code PlatformTransactionManager} is not "transactionManager"., +	 *, +	 * <p><b>NOTE:</b> The XML {@code <tx:annotation-driven>} element also refers, +	 * to a bean named "transactionManager" by default. If you are using both, +	 * features in combination, make sure to point to the same transaction manager, +	 * bean - here in {@code @TransactionConfiguration} and also in, +	 * {@code <tx:annotation-driven transaction-manager="...">}., +++ b/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionConfiguration.java, + * Copyright 2002-2012 the original author or authors., + * {@code TransactionConfiguration} defines class-level metadata for configuring, + * @see org.springframework.test.context.ContextConfiguration, +	 * The bean name of the {@link org.springframework.transaction.PlatformTransactionManager, +	 * PlatformTransactionManager} that is to be used to drive transactions., +	 *, +	 * <p>This attribute is not required and only needs to be specified explicitly, +	 * if there are multiple beans of type {@code PlatformTransactionManager} in, +	 * the test's {@code ApplicationContext} and the bean name of the desired, +	 * {@code PlatformTransactionManager} is not "transactionManager"., +	 *, +	 * <p><b>NOTE:</b> The XML {@code <tx:annotation-driven>} element also refers, +	 * to a bean named "transactionManager" by default. If you are using both, +	 * features in combination, make sure to point to the same transaction manager, +	 * bean - here in {@code @TransactionConfiguration} and also in, +	 * {@code <tx:annotation-driven transaction-manager="...">}., +++ b/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java, +import org.springframework.beans.factory.BeanFactoryUtils;, +import org.springframework.beans.factory.ListableBeanFactory;, +import org.springframework.context.ApplicationContext;, + * {@code TestExecutionListener} that provides support for executing tests, + * within transactions by honoring the, + * and {@link NotTransactional &#064;NotTransactional} annotations. Expects a, + * {@link PlatformTransactionManager} bean to be defined in the Spring, + * {@link ApplicationContext} for the test., + *, + * <p>Changes to the database during a test that is run with {@code @Transactional}, + * will be run within a transaction that will, by default, be automatically, + * database during a test that is run with {@code @NotTransactional} will, + * <strong>not</strong> be run within a transaction. Test methods that are not, + * annotated with either {@code @Transactional} (at the class or method level), + * or {@code @NotTransactional} will not be run within a transaction., + *, + * <p>Transactional commit and rollback behavior can be configured via the, + * class-level {@link TransactionConfiguration @TransactionConfiguration} and, + * method-level {@link Rollback @Rollback} annotations. In case there are multiple, + * instances of {@code PlatformTransactionManager} within the test's, + * {@code ApplicationContext}, {@code @TransactionConfiguration} supports, + * configuring the bean name of the {@code PlatformTransactionManager} that is, + * to be used to drive transactions., + *, + * <p>When executing transactional tests, it is sometimes useful to be able to, + * execute certain <em>set up</em> or <em>tear down</em> code outside of a, + * transaction. {@code TransactionalTestExecutionListener} provides such, + * {@link BeforeTransaction @BeforeTransaction} and, + * {@link AfterTransaction @AfterTransaction}., +	private static final String DEFAULT_TRANSACTION_MANAGER_NAME = (String) AnnotationUtils.getDefaultValue(, +		TransactionConfiguration.class, "transactionManager");, +, +	private static final Boolean DEFAULT_DEFAULT_ROLLBACK = (Boolean) AnnotationUtils.getDefaultValue(, +		TransactionConfiguration.class, "defaultRollback");, +, +	private final Map<Method, TransactionContext> transactionContextCache =, +			Collections.synchronizedMap(new IdentityHashMap<Method, TransactionContext>());, +, +	 * <p>Note that if a {@code BeforeTransaction &#064;BeforeTransaction method} fails,, +	 * remaining {@code BeforeTransaction &#064;BeforeTransaction methods} will not, +	 * @see #getTransactionManager(TestContext, String), +		PlatformTransactionManager tm = null;, +, +			transactionAttribute = new DelegatingTransactionAttribute(transactionAttribute) {, +, +			if (logger.isDebugEnabled()) {, +				logger.debug("Explicit transaction definition [" + transactionAttribute + "] found for test context ", +						+ testContext);, +			}, +			tm = getTransactionManager(testContext, transactionAttribute.getQualifier());, +		if (tm != null) {, +			TransactionContext txContext = new TransactionContext(tm, transactionAttribute);, +	 * <p>{@code AfterTransaction &#064;AfterTransaction methods} are guaranteed to be, +					logger.debug("Executing @BeforeTransaction method [" + method + "] for test context " + testContext);, +			logger.error("Exception encountered while executing @BeforeTransaction methods for test context ", +					+ testContext + ".", ex.getTargetException());, +					logger.debug("Executing @AfterTransaction method [" + method + "] for test context " + testContext);, +						+ "] for test context " + testContext, targetException);, +						+ "] for test context " + testContext, ex);, +			logger.trace("Ending transaction for test context " + testContext + "; transaction manager [", +					+ " transaction after test execution for test context " + testContext);, +	 * for the supplied {@link TestContext test context} and {@code qualifier}., +	 * <p>Delegates to {@link #getTransactionManager(TestContext)} if the, +	 * supplied {@code qualifier} is <code>null</code> or empty., +	 * @param testContext the test context for which the transaction manager]