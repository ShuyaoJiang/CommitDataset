[+++ b/spring-core/spring-core.gradle, +// As of Spring 5.1, spring-core includes asm 7.0 and repackages cglib 3.2.8, inlining, +// both into the spring-core jar. cglib 3.2.8 itself depends on asm 6+ and is therefore, +def cglibVersion = "3.2.8", +++ b/spring-core/spring-core.gradle, +// As of Spring 5.1, spring-core includes asm 7.0 and repackages cglib 3.2.8, inlining, +// both into the spring-core jar. cglib 3.2.8 itself depends on asm 6+ and is therefore, +def cglibVersion = "3.2.8", +++ b/spring-core/src/main/java/org/springframework/asm/AnnotationVisitor.java, + * order: ( {@code visit} | {@code visitEnum} | {@code visitAnnotation} | {@code visitArray} )*, + * {@code visitEnd}., +   * Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}., +   *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}., +   *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}., +    if (api != Opcodes.ASM6 && api != Opcodes.ASM5 && api != Opcodes.ASM4 && api != Opcodes.ASM7) {, +   * @return a visitor to visit the actual nested annotation value, or {@literal null} if this, +   *     visitor is not interested in visiting this nested annotation. <i>The nested annotation, +   *     value must be fully visited before calling other methods on this annotation visitor</i>., +   * @return a visitor to visit the actual array value elements, or {@literal null} if this visitor, +   *     is not interested in visiting these values. The 'name' parameters passed to the methods of, +++ b/spring-core/spring-core.gradle, +// As of Spring 5.1, spring-core includes asm 7.0 and repackages cglib 3.2.8, inlining, +// both into the spring-core jar. cglib 3.2.8 itself depends on asm 6+ and is therefore, +def cglibVersion = "3.2.8", +++ b/spring-core/src/main/java/org/springframework/asm/AnnotationVisitor.java, + * order: ( {@code visit} | {@code visitEnum} | {@code visitAnnotation} | {@code visitArray} )*, + * {@code visitEnd}., +   * Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}., +   *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}., +   *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}., +    if (api != Opcodes.ASM6 && api != Opcodes.ASM5 && api != Opcodes.ASM4 && api != Opcodes.ASM7) {, +   * @return a visitor to visit the actual nested annotation value, or {@literal null} if this, +   *     visitor is not interested in visiting this nested annotation. <i>The nested annotation, +   *     value must be fully visited before calling other methods on this annotation visitor</i>., +   * @return a visitor to visit the actual array value elements, or {@literal null} if this visitor, +   *     is not interested in visiting these values. The 'name' parameters passed to the methods of, +++ b/spring-core/src/main/java/org/springframework/asm/AnnotationWriter.java, +    super(Opcodes.ASM7);, +++ b/spring-core/spring-core.gradle, +// As of Spring 5.1, spring-core includes asm 7.0 and repackages cglib 3.2.8, inlining, +// both into the spring-core jar. cglib 3.2.8 itself depends on asm 6+ and is therefore, +def cglibVersion = "3.2.8", +++ b/spring-core/src/main/java/org/springframework/asm/AnnotationVisitor.java, + * order: ( {@code visit} | {@code visitEnum} | {@code visitAnnotation} | {@code visitArray} )*, + * {@code visitEnd}., +   * Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}., +   *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}., +   *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}., +    if (api != Opcodes.ASM6 && api != Opcodes.ASM5 && api != Opcodes.ASM4 && api != Opcodes.ASM7) {, +   * @return a visitor to visit the actual nested annotation value, or {@literal null} if this, +   *     visitor is not interested in visiting this nested annotation. <i>The nested annotation, +   *     value must be fully visited before calling other methods on this annotation visitor</i>., +   * @return a visitor to visit the actual array value elements, or {@literal null} if this visitor, +   *     is not interested in visiting these values. The 'name' parameters passed to the methods of, +++ b/spring-core/src/main/java/org/springframework/asm/AnnotationWriter.java, +    super(Opcodes.ASM7);, +++ b/spring-core/src/main/java/org/springframework/asm/Attribute.java, +   * store a list of class, field, method or code attributes). May be {@literal null}., +   * Returns {@literal true} if this type of attribute is unknown. This means that the attribute, +   * method bytecode, etc. The default implementation of this method always returns {@literal true}., +   * @return {@literal true} if this type of attribute is unknown., +   * Returns {@literal true} if this type of attribute is a code attribute., +   * @return {@literal true} if this type of attribute is a code attribute., +   * @return the labels corresponding to this attribute, or {@literal null} if this attribute is not, +   *     a code attribute that contains labels., +   * @param labels the labels of the method's code, or {@literal null} if the attribute to be read, +   *     is not a code attribute., +   * @param code the bytecode of the method corresponding to this code attribute, or {@literal null}, +   * @param code the bytecode of the method corresponding to these code attributes, or {@literal, +   *     null} if they are not code attributes. Corresponds to the 'code' field of the Code, +   *     attribute., +   * @param code the bytecode of the method corresponding to these code attributes, or {@literal, +   *     null} if they are not code attributes. Corresponds to the 'code' field of the Code, +   *     attribute., +++ b/spring-core/spring-core.gradle, +// As of Spring 5.1, spring-core includes asm 7.0 and repackages cglib 3.2.8, inlining, +// both into the spring-core jar. cglib 3.2.8 itself depends on asm 6+ and is therefore, +def cglibVersion = "3.2.8", +++ b/spring-core/src/main/java/org/springframework/asm/AnnotationVisitor.java, + * order: ( {@code visit} | {@code visitEnum} | {@code visitAnnotation} | {@code visitArray} )*, + * {@code visitEnd}., +   * Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}., +   *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}., +   *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}., +    if (api != Opcodes.ASM6 && api != Opcodes.ASM5 && api != Opcodes.ASM4 && api != Opcodes.ASM7) {, +   * @return a visitor to visit the actual nested annotation value, or {@literal null} if this, +   *     visitor is not interested in visiting this nested annotation. <i>The nested annotation, +   *     value must be fully visited before calling other methods on this annotation visitor</i>., +   * @return a visitor to visit the actual array value elements, or {@literal null} if this visitor, +   *     is not interested in visiting these values. The 'name' parameters passed to the methods of, +++ b/spring-core/src/main/java/org/springframework/asm/AnnotationWriter.java, +    super(Opcodes.ASM7);, +++ b/spring-core/src/main/java/org/springframework/asm/Attribute.java, +   * store a list of class, field, method or code attributes). May be {@literal null}., +   * Returns {@literal true} if this type of attribute is unknown. This means that the attribute, +   * method bytecode, etc. The default implementation of this method always returns {@literal true}., +   * @return {@literal true} if this type of attribute is unknown., +   * Returns {@literal true} if this type of attribute is a code attribute., +   * @return {@literal true} if this type of attribute is a code attribute., +   * @return the labels corresponding to this attribute, or {@literal null} if this attribute is not]