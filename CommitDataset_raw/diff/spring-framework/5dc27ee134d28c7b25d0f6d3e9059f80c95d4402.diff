[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/json/MappingJackson2JsonView.java, +import java.util.*;, +import org.springframework.http.converter.json.MappingJacksonValue;, + * @author Sebastien Deleuze, +	public static final String DEFAULT_JSONP_CONTENT_TYPE = "application/javascript";, +, +	public static final String[] DEFAULT_JSONP_PARAMETER_NAMES = {"jsonp", "callback"};, +, +	private String[] jsonpParameterNames;, +, +		this.jsonpParameterNames = DEFAULT_JSONP_PARAMETER_NAMES;, +	/**, +	 * Set the names of the request parameters recognized as JSONP ones., +	 * Each time a request has one of those parameters, the resulting JSON will, +	 * be wrapped into a function named as specified by the JSONP parameter value., +	 *, +	 * Default JSONP parameter names are "jsonp" and "callback"., +	 *, +	 * @since 4.1, +	 * @see <a href="http://en.wikipedia.org/wiki/JSONP">JSONP Wikipedia article</a>, +	 */, +	public void setJsonpParameterNames(Collection<String> jsonpParameterNames) {, +		Assert.isTrue(!CollectionUtils.isEmpty(jsonpParameterNames), "At least one JSONP query parameter name is required");, +		this.jsonpParameterNames = jsonpParameterNames.toArray(new String[jsonpParameterNames.size()]);, +	}, +	protected void setResponseContentType(HttpServletRequest request, HttpServletResponse response) {, +		if (getJsonpParameterValue(request) != null) {, +			response.setContentType(DEFAULT_JSONP_CONTENT_TYPE);, +		}, +		else {, +			super.setResponseContentType(request, response);, +		}, +	}, +, +	@Override, +, +		Class<?> serializationView = (Class<?>)model.get(JsonView.class.getName());, +		String jsonpParameterValue = getJsonpParameterValue(request);, +		if(serializationView != null || jsonpParameterValue != null) {, +			MappingJacksonValue container = new MappingJacksonValue(value);, +			container.setSerializationView(serializationView);, +			container.setJsonpFunction(jsonpParameterValue);, +			value = container;, +, +	private String getJsonpParameterValue(HttpServletRequest request) {, +		String jsonpParameterValue = null;, +		for(String jsonpParameterName : this.jsonpParameterNames) {, +			jsonpParameterValue = request.getParameter(jsonpParameterName);, +			if(jsonpParameterValue != null) {, +				break;, +			}, +		}, +		return jsonpParameterValue;, +	}, +, +			if (!(entry.getValue() instanceof BindingResult), +					&& renderedAttributes.contains(entry.getKey()), +					&& !entry.getKey().equals(JsonView.class.getName())) {, +	protected void writeContent(OutputStream stream, Object value, String jsonPrefix), +		Class<?> serializationView = null;, +		String jsonpFunction = null;, +		if (value instanceof MappingJacksonValue) {, +			MappingJacksonValue container = (MappingJacksonValue) value;, +			value = container.getValue();, +			serializationView = container.getSerializationView();, +			jsonpFunction = container.getJsonpFunction();, +		}, +		if (jsonpFunction != null) {, +			generator.writeRaw(jsonpFunction + "(" );, +		}, +		if (jsonpFunction != null) {, +			generator.writeRaw(");");, +			generator.flush();, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/json/MappingJackson2JsonView.java, +import java.util.*;, +import org.springframework.http.converter.json.MappingJacksonValue;, + * @author Sebastien Deleuze, +	public static final String DEFAULT_JSONP_CONTENT_TYPE = "application/javascript";, +, +	public static final String[] DEFAULT_JSONP_PARAMETER_NAMES = {"jsonp", "callback"};, +, +	private String[] jsonpParameterNames;, +, +		this.jsonpParameterNames = DEFAULT_JSONP_PARAMETER_NAMES;, +	/**, +	 * Set the names of the request parameters recognized as JSONP ones., +	 * Each time a request has one of those parameters, the resulting JSON will, +	 * be wrapped into a function named as specified by the JSONP parameter value., +	 *, +	 * Default JSONP parameter names are "jsonp" and "callback"., +	 *, +	 * @since 4.1, +	 * @see <a href="http://en.wikipedia.org/wiki/JSONP">JSONP Wikipedia article</a>, +	 */, +	public void setJsonpParameterNames(Collection<String> jsonpParameterNames) {, +		Assert.isTrue(!CollectionUtils.isEmpty(jsonpParameterNames), "At least one JSONP query parameter name is required");, +		this.jsonpParameterNames = jsonpParameterNames.toArray(new String[jsonpParameterNames.size()]);, +	}, +	protected void setResponseContentType(HttpServletRequest request, HttpServletResponse response) {]