[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/AbstractAnnotationConfigDispatcherServletInitializer.java, + * Copyright 2002-2014 the original author or authors., +			AnnotationConfigWebApplicationContext rootAppContext = new AnnotationConfigWebApplicationContext();, +		AnnotationConfigWebApplicationContext servletAppContext = new AnnotationConfigWebApplicationContext();, +		Class<?>[] configClasses = this.getServletConfigClasses();, +		if (!ObjectUtils.isEmpty(configClasses)) {, +			servletAppContext.register(configClasses);, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/AbstractAnnotationConfigDispatcherServletInitializer.java, + * Copyright 2002-2014 the original author or authors., +			AnnotationConfigWebApplicationContext rootAppContext = new AnnotationConfigWebApplicationContext();, +		AnnotationConfigWebApplicationContext servletAppContext = new AnnotationConfigWebApplicationContext();, +		Class<?>[] configClasses = this.getServletConfigClasses();, +		if (!ObjectUtils.isEmpty(configClasses)) {, +			servletAppContext.register(configClasses);, +		}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/support/AnnotationConfigDispatcherServletInitializerTests.java, + * Copyright 2002-2014 the original author or authors., +import java.util.*;, +import javax.servlet.*;, +import org.springframework.mock.web.test.MockServletConfig;, +		WebApplicationContext wac = servlet.getWebApplicationContext();, +		((AnnotationConfigWebApplicationContext) wac).refresh();, +		assertTrue(wac.containsBean("bean"));, +		assertTrue(wac.getBean("bean") instanceof MyBean);, +	// SPR-11357, +, +	@Test, +	public void rootContextOnly() throws ServletException {, +		initializer = new MyAnnotationConfigDispatcherServletInitializer() {, +			@Override, +			protected Class<?>[] getRootConfigClasses() {, +				return new Class[]{MyConfiguration.class};, +			}, +			@Override, +			protected Class<?>[] getServletConfigClasses() {, +				return null;, +			}, +		};, +, +		initializer.onStartup(servletContext);, +, +		DispatcherServlet servlet = (DispatcherServlet) servlets.get(SERVLET_NAME);, +		servlet.init(new MockServletConfig(this.servletContext));, +, +		WebApplicationContext wac = servlet.getWebApplicationContext();, +		((AnnotationConfigWebApplicationContext) wac).refresh();, +, +		assertTrue(wac.containsBean("bean"));, +		assertTrue(wac.getBean("bean") instanceof MyBean);, +	}, +, +, +		@Override, +		public <T extends EventListener> void addListener(T t) {, +			if (t instanceof ServletContextListener) {, +				((ServletContextListener) t).contextInitialized(new ServletContextEvent(this));, +			}, +		}]