[+++ b/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java, +, +, +		this.eventCollector.clear();, +		this.context.publishEvent(event);, +		this.eventCollector.assertEvent(listener, event);, +		this.eventCollector.assertTotalEventsCount(1);, +, +++ b/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java, +, +, +		this.eventCollector.clear();, +		this.context.publishEvent(event);, +		this.eventCollector.assertEvent(listener, event);, +		this.eventCollector.assertTotalEventsCount(1);, +, +++ b/spring-context/src/test/java/org/springframework/context/event/test/EventCollector.java, + * @author Juergen Hoeller, +		assertEquals("Wrong number of events", events.length, actual.size());, +		assertEquals("Wrong number of total events (" + this.content.size() +, +				") registered listener(s)", number, actual);, +	}, +, +	/**, +	 * Clear the collected events, allowing for reuse of the collector., +	 */, +	public void clear() {, +		this.content.clear();, +++ b/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java, +, +, +		this.eventCollector.clear();, +		this.context.publishEvent(event);, +		this.eventCollector.assertEvent(listener, event);, +		this.eventCollector.assertTotalEventsCount(1);, +, +++ b/spring-context/src/test/java/org/springframework/context/event/test/EventCollector.java, + * @author Juergen Hoeller, +		assertEquals("Wrong number of events", events.length, actual.size());, +		assertEquals("Wrong number of total events (" + this.content.size() +, +				") registered listener(s)", number, actual);, +	}, +, +	/**, +	 * Clear the collected events, allowing for reuse of the collector., +	 */, +	public void clear() {, +		this.content.clear();, +++ b/spring-core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, +			this.logger.debug(String.format(, +					setActiveProfiles(StringUtils.commaDelimitedListToStringArray(, +							StringUtils.trimAllWhitespace(profiles)));, +			this.logger.debug(String.format("Activating profile '%s'", profile));, +					setDefaultProfiles(StringUtils.commaDelimitedListToStringArray(, +							StringUtils.trimAllWhitespace(profiles)));, +							logger.info(String.format("Caught AccessControlException when accessing system " +, +							logger.info(String.format("Caught AccessControlException when accessing system " +, +		return String.format("%s {activeProfiles=%s, defaultProfiles=%s, propertySources=%s}",, +++ b/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java, +, +, +		this.eventCollector.clear();, +		this.context.publishEvent(event);, +		this.eventCollector.assertEvent(listener, event);, +		this.eventCollector.assertTotalEventsCount(1);, +, +++ b/spring-context/src/test/java/org/springframework/context/event/test/EventCollector.java, + * @author Juergen Hoeller, +		assertEquals("Wrong number of events", events.length, actual.size());, +		assertEquals("Wrong number of total events (" + this.content.size() +, +				") registered listener(s)", number, actual);, +	}, +, +	/**, +	 * Clear the collected events, allowing for reuse of the collector., +	 */, +	public void clear() {, +		this.content.clear();, +++ b/spring-core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, +			this.logger.debug(String.format(, +					setActiveProfiles(StringUtils.commaDelimitedListToStringArray(, +							StringUtils.trimAllWhitespace(profiles)));, +			this.logger.debug(String.format("Activating profile '%s'", profile));, +					setDefaultProfiles(StringUtils.commaDelimitedListToStringArray(, +							StringUtils.trimAllWhitespace(profiles)));, +							logger.info(String.format("Caught AccessControlException when accessing system " +, +							logger.info(String.format("Caught AccessControlException when accessing system " +, +		return String.format("%s {activeProfiles=%s, defaultProfiles=%s, propertySources=%s}",, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/ServerEndpointRegistration.java, +		return (this.endpoint != null ? this.endpoint.getClass() : this.endpointProvider.getHandlerType());, +++ b/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java, +, +, +		this.eventCollector.clear();, +		this.context.publishEvent(event);, +		this.eventCollector.assertEvent(listener, event);, +		this.eventCollector.assertTotalEventsCount(1);, +, +++ b/spring-context/src/test/java/org/springframework/context/event/test/EventCollector.java, + * @author Juergen Hoeller]