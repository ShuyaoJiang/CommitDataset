[+++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java, +import org.springframework.expression.spel.standard.SpelExpressionParserConfiguration;, +		int parserConfig =, +		  SpelExpressionParserConfiguration.CreateListsOnAttemptToIndexIntoNull | , +		  SpelExpressionParserConfiguration.GrowListsOnIndexBeyondSize;, +		expressionParser = new SpelExpressionParser(parserConfig);, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java, +import org.springframework.expression.spel.standard.SpelExpressionParserConfiguration;, +		int parserConfig =, +		  SpelExpressionParserConfiguration.CreateListsOnAttemptToIndexIntoNull | , +		  SpelExpressionParserConfiguration.GrowListsOnIndexBeyondSize;, +		expressionParser = new SpelExpressionParser(parserConfig);, +++ b/org.springframework.context/src/test/java/org/springframework/ui/binding/BinderTests.java, +import junit.framework.Assert;, +, +		TestBean testbean = new TestBean();, +		Binder<TestBean> binder = new Binder<TestBean>(testbean);, +		, +		// EL configured with some options from SpelExpressionParserConfiguration:, +		// (see where Binder creates the parser), +		// - new addresses List is created if null, +		// - new entries automatically built if List is currently too short - all new entries, +		//   are new instances of the type of the list entry, they are not null., +		// not currently doing anything for maps or arrays, +		, +, +		// Auto adds new Address at 1, +, +		// Auto adds new Address at 5 (plus intermediates 2,3,4), +		propertyValues.put("addresses[5].street", "1234 Rostock Circle");, +		propertyValues.put("addresses[5].city", "Palm Bay");, +		propertyValues.put("addresses[5].state", "FL");, +		propertyValues.put("addresses[5].state", "32901");, +, +		Assert.assertEquals(6,testbean.addresses.size());, +		Assert.assertEquals("Palm Bay",testbean.addresses.get(1).city);, +		Assert.assertNotNull(testbean.addresses.get(2));, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java, +import org.springframework.expression.spel.standard.SpelExpressionParserConfiguration;, +		int parserConfig =, +		  SpelExpressionParserConfiguration.CreateListsOnAttemptToIndexIntoNull | , +		  SpelExpressionParserConfiguration.GrowListsOnIndexBeyondSize;, +		expressionParser = new SpelExpressionParser(parserConfig);, +++ b/org.springframework.context/src/test/java/org/springframework/ui/binding/BinderTests.java, +import junit.framework.Assert;, +, +		TestBean testbean = new TestBean();, +		Binder<TestBean> binder = new Binder<TestBean>(testbean);, +		, +		// EL configured with some options from SpelExpressionParserConfiguration:, +		// (see where Binder creates the parser), +		// - new addresses List is created if null, +		// - new entries automatically built if List is currently too short - all new entries, +		//   are new instances of the type of the list entry, they are not null., +		// not currently doing anything for maps or arrays, +		, +, +		// Auto adds new Address at 1, +, +		// Auto adds new Address at 5 (plus intermediates 2,3,4), +		propertyValues.put("addresses[5].street", "1234 Rostock Circle");, +		propertyValues.put("addresses[5].city", "Palm Bay");, +		propertyValues.put("addresses[5].state", "FL");, +		propertyValues.put("addresses[5].state", "32901");, +, +		Assert.assertEquals(6,testbean.addresses.size());, +		Assert.assertEquals("Palm Bay",testbean.addresses.get(1).city);, +		Assert.assertNotNull(testbean.addresses.get(2));, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, +import org.springframework.expression.spel.standard.SpelExpressionParserConfiguration;, +	private int configuration = 0;, +, +	public ExpressionState(EvaluationContext context, int configuration) {, +		this.relatedContext = context;, +		this.configuration = configuration;, +		createVariableScope();, +	}, +	, +	public boolean configuredToGrowCollection() {, +		return (configuration & SpelExpressionParserConfiguration.GrowListsOnIndexBeyondSize)!=0;, +	}, +, +	public boolean configuredToCreateCollection() {, +		return (configuration & SpelExpressionParserConfiguration.CreateListsOnAttemptToIndexIntoNull)!=0;, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java, +import org.springframework.expression.spel.standard.SpelExpressionParserConfiguration;, +		int parserConfig =, +		  SpelExpressionParserConfiguration.CreateListsOnAttemptToIndexIntoNull | , +		  SpelExpressionParserConfiguration.GrowListsOnIndexBeyondSize;, +		expressionParser = new SpelExpressionParser(parserConfig);, +++ b/org.springframework.context/src/test/java/org/springframework/ui/binding/BinderTests.java, +import junit.framework.Assert;, +, +		TestBean testbean = new TestBean();, +		Binder<TestBean> binder = new Binder<TestBean>(testbean);, +		, +		// EL configured with some options from SpelExpressionParserConfiguration:, +		// (see where Binder creates the parser)]