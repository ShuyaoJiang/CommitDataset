[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/TextMessage.java, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/TextMessage.java, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/WebSocketConnectionManager.java, +	 * By default {@link LoggingWebSocketHandlerDecorator} is added., +++ b/spring-websocket/src/main/java/org/springframework/web/socket/TextMessage.java, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/WebSocketConnectionManager.java, +	 * By default {@link LoggingWebSocketHandlerDecorator} is added., +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/endpoint/StandardWebSocketClient.java, +import org.springframework.util.Assert;, +	private final WebSocketContainer webSocketContainer;, +	public StandardWebSocketClient() {, +	public StandardWebSocketClient(WebSocketContainer webSocketContainer) {, +		Assert.notNull(webSocketContainer, "webSocketContainer is required");, +		this.webSocketContainer = webSocketContainer;, +		Assert.notNull(uriTemplate, "uriTemplate is required");, +		return doHandshake(webSocketHandler, null, uriComponents.toUri());, +		Assert.notNull(webSocketHandler, "webSocketHandler is required");, +		Assert.notNull(uri, "uri is required");, +, +		httpHeaders = (httpHeaders != null) ? httpHeaders : new HttpHeaders();, +, +		if (logger.isDebugEnabled()) {, +			logger.debug("Connecting to " + uri);, +		}, +, +		configBuidler.configurator(new StandardWebSocketClientConfigurator(httpHeaders));, +, +			Endpoint endpoint = new StandardEndpointAdapter(webSocketHandler, session);, +, +			if (logger.isDebugEnabled()) {, +				logger.debug("Handshake request headers: " + headers);, +			if (logger.isDebugEnabled()) {, +				logger.debug("Handshake response headers: " + handshakeResponse.getHeaders());, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/TextMessage.java, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/WebSocketConnectionManager.java, +	 * By default {@link LoggingWebSocketHandlerDecorator} is added., +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/endpoint/StandardWebSocketClient.java, +import org.springframework.util.Assert;, +	private final WebSocketContainer webSocketContainer;, +	public StandardWebSocketClient() {, +	public StandardWebSocketClient(WebSocketContainer webSocketContainer) {, +		Assert.notNull(webSocketContainer, "webSocketContainer is required");, +		this.webSocketContainer = webSocketContainer;, +		Assert.notNull(uriTemplate, "uriTemplate is required");, +		return doHandshake(webSocketHandler, null, uriComponents.toUri());, +		Assert.notNull(webSocketHandler, "webSocketHandler is required");, +		Assert.notNull(uri, "uri is required");, +, +		httpHeaders = (httpHeaders != null) ? httpHeaders : new HttpHeaders();, +, +		if (logger.isDebugEnabled()) {, +			logger.debug("Connecting to " + uri);, +		}, +, +		configBuidler.configurator(new StandardWebSocketClientConfigurator(httpHeaders));, +, +			Endpoint endpoint = new StandardEndpointAdapter(webSocketHandler, session);, +, +			if (logger.isDebugEnabled()) {, +				logger.debug("Handshake request headers: " + headers);, +			if (logger.isDebugEnabled()) {, +				logger.debug("Handshake response headers: " + handshakeResponse.getHeaders());, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/jetty/JettyWebSocketClient.java, +import org.springframework.util.Assert;, +		return doHandshake(webSocketHandler, null, uriComponents.toUri());, +		Assert.notNull(webSocketHandler, "webSocketHandler is required");, +		Assert.notNull(uri, "uri is required");, +, +		if (logger.isDebugEnabled()) {, +			logger.debug("Connecting to " + uri);, +		}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/TextMessage.java, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/WebSocketConnectionManager.java, +	 * By default {@link LoggingWebSocketHandlerDecorator} is added., +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/endpoint/StandardWebSocketClient.java, +import org.springframework.util.Assert;, +	private final WebSocketContainer webSocketContainer;, +	public StandardWebSocketClient() {, +	public StandardWebSocketClient(WebSocketContainer webSocketContainer) {, +		Assert.notNull(webSocketContainer, "webSocketContainer is required");, +		this.webSocketContainer = webSocketContainer;, +		Assert.notNull(uriTemplate, "uriTemplate is required");, +		return doHandshake(webSocketHandler, null, uriComponents.toUri());, +		Assert.notNull(webSocketHandler, "webSocketHandler is required");, +		Assert.notNull(uri, "uri is required");, +, +		httpHeaders = (httpHeaders != null) ? httpHeaders : new HttpHeaders();, +, +		if (logger.isDebugEnabled()) {, +			logger.debug("Connecting to " + uri);, +		}, +, +		configBuidler.configurator(new StandardWebSocketClientConfigurator(httpHeaders));, +, +			Endpoint endpoint = new StandardEndpointAdapter(webSocketHandler, session);, +, +			if (logger.isDebugEnabled()) {, +				logger.debug("Handshake request headers: " + headers);, +			if (logger.isDebugEnabled()) {]