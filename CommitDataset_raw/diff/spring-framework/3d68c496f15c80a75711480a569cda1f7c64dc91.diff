[+++ b/spring-core/src/main/java/org/springframework/core/codec/CharSequenceEncoder.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.util.MimeTypeUtils;, + * @author Rossen Stoyanchev, +	private CharSequenceEncoder(MimeType... mimeTypes) {, +		super(mimeTypes);, +, +	/**, +	 * Create a {@code CharSequenceEncoder} that supports only "text/plain"., +	 */, +	public static CharSequenceEncoder textPlainOnly() {, +		return new CharSequenceEncoder(new MimeType("text", "plain", DEFAULT_CHARSET));, +	}, +, +	/**, +	 * Create a {@code CharSequenceEncoder} that supports all MIME types., +	 */, +	public static CharSequenceEncoder allMimeTypes() {, +		return new CharSequenceEncoder(new MimeType("text", "plain", DEFAULT_CHARSET), MimeTypeUtils.ALL);, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/codec/CharSequenceEncoder.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.util.MimeTypeUtils;, + * @author Rossen Stoyanchev, +	private CharSequenceEncoder(MimeType... mimeTypes) {, +		super(mimeTypes);, +, +	/**, +	 * Create a {@code CharSequenceEncoder} that supports only "text/plain"., +	 */, +	public static CharSequenceEncoder textPlainOnly() {, +		return new CharSequenceEncoder(new MimeType("text", "plain", DEFAULT_CHARSET));, +	}, +, +	/**, +	 * Create a {@code CharSequenceEncoder} that supports all MIME types., +	 */, +	public static CharSequenceEncoder allMimeTypes() {, +		return new CharSequenceEncoder(new MimeType("text", "plain", DEFAULT_CHARSET), MimeTypeUtils.ALL);, +	}, +, +++ b/spring-core/src/test/java/org/springframework/core/codec/CharSequenceEncoderTests.java, +		this.encoder = CharSequenceEncoder.textPlainOnly();, +++ b/spring-core/src/main/java/org/springframework/core/codec/CharSequenceEncoder.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.util.MimeTypeUtils;, + * @author Rossen Stoyanchev, +	private CharSequenceEncoder(MimeType... mimeTypes) {, +		super(mimeTypes);, +, +	/**, +	 * Create a {@code CharSequenceEncoder} that supports only "text/plain"., +	 */, +	public static CharSequenceEncoder textPlainOnly() {, +		return new CharSequenceEncoder(new MimeType("text", "plain", DEFAULT_CHARSET));, +	}, +, +	/**, +	 * Create a {@code CharSequenceEncoder} that supports all MIME types., +	 */, +	public static CharSequenceEncoder allMimeTypes() {, +		return new CharSequenceEncoder(new MimeType("text", "plain", DEFAULT_CHARSET), MimeTypeUtils.ALL);, +	}, +, +++ b/spring-core/src/test/java/org/springframework/core/codec/CharSequenceEncoderTests.java, +		this.encoder = CharSequenceEncoder.textPlainOnly();, +++ b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageReader.java, +	 * Constructor without a {@code Decoder}. In this mode only {@code String}, +	 * is supported as the data of an event., +	 */, +	public ServerSentEventHttpMessageReader() {, +		this(null);, +	}, +, +	/**, +	 * Constructor with JSON {@code Decoder} for decoding to Objects. Support, +	 * for decoding to {@code String} event data is built-in., +		return MediaType.TEXT_EVENT_STREAM.includes(mediaType) ||, +++ b/spring-core/src/main/java/org/springframework/core/codec/CharSequenceEncoder.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.util.MimeTypeUtils;, + * @author Rossen Stoyanchev, +	private CharSequenceEncoder(MimeType... mimeTypes) {, +		super(mimeTypes);, +, +	/**, +	 * Create a {@code CharSequenceEncoder} that supports only "text/plain"., +	 */, +	public static CharSequenceEncoder textPlainOnly() {, +		return new CharSequenceEncoder(new MimeType("text", "plain", DEFAULT_CHARSET));, +	}, +, +	/**, +	 * Create a {@code CharSequenceEncoder} that supports all MIME types., +	 */, +	public static CharSequenceEncoder allMimeTypes() {, +		return new CharSequenceEncoder(new MimeType("text", "plain", DEFAULT_CHARSET), MimeTypeUtils.ALL);, +	}, +]