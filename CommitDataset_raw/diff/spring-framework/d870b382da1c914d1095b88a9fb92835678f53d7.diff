[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/FactoryBeanRegistrySupport.java, + * Copyright 2002-2014 the original author or authors., +	 * @param shouldPostProcess whether the bean is subject to post-processing, +					object = doGetObjectFromFactoryBean(factory, beanName);, +					// Only post-process and store if not put there already during getObject() call above, +					// (e.g. because of circular reference processing triggered by custom getBean calls), +					Object alreadyThere = this.factoryBeanObjectCache.get(beanName);, +					if (alreadyThere != null) {, +						object = alreadyThere;, +					}, +					else {, +						if (object != null && shouldPostProcess) {, +							try {, +								object = postProcessObjectFromFactoryBean(object, beanName);, +							}, +							catch (Throwable ex) {, +								throw new BeanCreationException(beanName,, +										"Post-processing of FactoryBean's singleton object failed", ex);, +							}, +						}, +				}, +			Object object = doGetObjectFromFactoryBean(factory, beanName);, +			if (object != null && shouldPostProcess) {, +				try {, +					object = postProcessObjectFromFactoryBean(object, beanName);, +				}, +				catch (Throwable ex) {, +					throw new BeanCreationException(beanName, "Post-processing of FactoryBean's object failed", ex);, +				}, +			}, +			return object;, +	private Object doGetObjectFromFactoryBean(final FactoryBean<?> factory, final String beanName), +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/FactoryBeanRegistrySupport.java, + * Copyright 2002-2014 the original author or authors., +	 * @param shouldPostProcess whether the bean is subject to post-processing, +					object = doGetObjectFromFactoryBean(factory, beanName);, +					// Only post-process and store if not put there already during getObject() call above, +					// (e.g. because of circular reference processing triggered by custom getBean calls), +					Object alreadyThere = this.factoryBeanObjectCache.get(beanName);, +					if (alreadyThere != null) {, +						object = alreadyThere;, +					}, +					else {, +						if (object != null && shouldPostProcess) {, +							try {, +								object = postProcessObjectFromFactoryBean(object, beanName);, +							}, +							catch (Throwable ex) {, +								throw new BeanCreationException(beanName,, +										"Post-processing of FactoryBean's singleton object failed", ex);, +							}, +						}, +				}, +			Object object = doGetObjectFromFactoryBean(factory, beanName);, +			if (object != null && shouldPostProcess) {, +				try {, +					object = postProcessObjectFromFactoryBean(object, beanName);, +				}, +				catch (Throwable ex) {, +					throw new BeanCreationException(beanName, "Post-processing of FactoryBean's object failed", ex);, +				}, +			}, +			return object;, +	private Object doGetObjectFromFactoryBean(final FactoryBean<?> factory, final String beanName), +++ b/spring-beans/src/test/java/org/springframework/beans/factory/FactoryBeanTests-circular.xml, +<?xml version="1.0" encoding="ISO-8859-1"?>, +<beans xmlns="http://www.springframework.org/schema/beans", +   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +   xsi:schemaLocation="http://www.springframework.org/schema/beans, +                       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">, +, +   <bean id="bean1" class="org.springframework.beans.factory.FactoryBeanTests$PassThroughFactoryBean" primary="true">, +      <constructor-arg value="org.springframework.beans.factory.FactoryBeanTests$BeanImpl1"/>, +      <property name="instanceName" value="beanImpl1"/>, +   </bean>, +, +   <bean id="beanImpl1" class="org.springframework.beans.factory.FactoryBeanTests$BeanImpl1">, +      <property name="impl2" ref="bean2"/>, +   </bean>, +, +   <bean id="bean2" class="org.springframework.beans.factory.FactoryBeanTests$PassThroughFactoryBean" primary="true">, +      <constructor-arg value="org.springframework.beans.factory.FactoryBeanTests$BeanImpl2"/>, +      <property name="instanceName" value="beanImpl2"/>, +   </bean>, +, +   <bean id="beanImpl2" class="org.springframework.beans.factory.FactoryBeanTests$BeanImpl2">, +      <property name="impl1" ref="bean1"/>, +   </bean>, +, +</beans>, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/FactoryBeanRegistrySupport.java, + * Copyright 2002-2014 the original author or authors., +	 * @param shouldPostProcess whether the bean is subject to post-processing, +					object = doGetObjectFromFactoryBean(factory, beanName);, +					// Only post-process and store if not put there already during getObject() call above, +					// (e.g. because of circular reference processing triggered by custom getBean calls), +					Object alreadyThere = this.factoryBeanObjectCache.get(beanName);, +					if (alreadyThere != null) {, +						object = alreadyThere;, +					}]