[+++ b/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +++ b/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java, +		addConverter(Object.class, String.class, new ObjectToStringConverter());		, +		addGenericConverter(Object.class, Object.class, new ObjectToObjectGenericConverter());		, +++ b/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java, +		addConverter(Object.class, String.class, new ObjectToStringConverter());		, +		addGenericConverter(Object.class, Object.class, new ObjectToObjectGenericConverter());		, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +++ b/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java, +		addConverter(Object.class, String.class, new ObjectToStringConverter());		, +		addGenericConverter(Object.class, Object.class, new ObjectToObjectGenericConverter());		, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ObjectToObjectGenericConverter.java, +final class ObjectToObjectGenericConverter implements ConditionalGenericConverter {, +	, +	public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {, +		Class<?> sourceClass = sourceType.getObjectType();, +		Class<?> targetClass = targetType.getObjectType();		, +		return getValueOfMethodOn(targetClass, sourceClass) != null || getConstructor(targetClass, sourceClass) != null;, +	}, +		Method method = getValueOfMethodOn(targetClass, sourceClass);, +			Constructor<?> constructor = getConstructor(targetClass, sourceClass);, +, +	private Method getValueOfMethodOn(Class<?> targetClass, Class<?> argType) {, +		return ClassUtils.getStaticMethod(targetClass, "valueOf", argType);, +	}, +	, +	private Constructor<?> getConstructor(Class<?> targetClass, Class<?> sourceClass) {, +		return ClassUtils.getConstructorIfAvailable(targetClass, sourceClass);, +	}, +, +++ b/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java, +		addConverter(Object.class, String.class, new ObjectToStringConverter());		, +		addGenericConverter(Object.class, Object.class, new ObjectToObjectGenericConverter());		, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ObjectToObjectGenericConverter.java, +final class ObjectToObjectGenericConverter implements ConditionalGenericConverter {, +	, +	public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {, +		Class<?> sourceClass = sourceType.getObjectType();, +		Class<?> targetClass = targetType.getObjectType();		, +		return getValueOfMethodOn(targetClass, sourceClass) != null || getConstructor(targetClass, sourceClass) != null;, +	}, +		Method method = getValueOfMethodOn(targetClass, sourceClass);, +			Constructor<?> constructor = getConstructor(targetClass, sourceClass);, +, +	private Method getValueOfMethodOn(Class<?> targetClass, Class<?> argType) {, +		return ClassUtils.getStaticMethod(targetClass, "valueOf", argType);, +	}, +	, +	private Constructor<?> getConstructor(Class<?> targetClass, Class<?> sourceClass) {, +		return ClassUtils.getConstructorIfAvailable(targetClass, sourceClass);, +	}, +, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionServiceTests.java, +import static junit.framework.Assert.assertEquals;, +import static org.junit.Assert.fail;, +, +import org.springframework.core.convert.ConversionFailedException;, +	@Test, +	public void convertObjectToObjectValueOFMethod() {, +		DefaultConversionService conversionService = new DefaultConversionService();, +		assertEquals(new Integer(3), conversionService.convert("3", Integer.class));, +	}, +, +	@Test, +	public void convertObjectToObjectConstructor() {, +		DefaultConversionService conversionService = new DefaultConversionService();, +		assertEquals(new SSN("123456789"), conversionService.convert("123456789", SSN.class));, +		assertEquals("123456789", conversionService.convert(new SSN("123456789"), String.class));, +	}, +, +	@Test(expected=ConversionFailedException.class), +	public void convertObjectToObjectNoValueOFMethodOrConstructor() {, +		DefaultConversionService conversionService = new DefaultConversionService();, +		conversionService.convert(new Long(3), SSN.class);, +	}, +, +	private static class SSN {, +		private String value;, +		, +		public SSN(String value) {, +			this.value = value;, +		}, +		, +		public boolean equals(Object o) {, +			if (!(o instanceof SSN)) {, +				return false;, +			}, +			SSN ssn = (SSN) o;, +			return this.value.equals(ssn.value);, +		}, +		, +		public int hashCode() {, +			return value.hashCode();, +		}]