[+++ b/spring-test/src/main/java/org/springframework/test/web/client/MockRestServiceServer.java, + * <p>An alternative to the above is to use, + * {@link MockMvcClientHttpRequestFactory} which allows executing requests, + * against a {@link org.springframework.test.web.servlet.MockMvc MockMvc}, + * instance. That allows you to process requests using your server-side code, + * but without running a server., + *, +++ b/spring-test/src/main/java/org/springframework/test/web/client/MockRestServiceServer.java, + * <p>An alternative to the above is to use, + * {@link MockMvcClientHttpRequestFactory} which allows executing requests, + * against a {@link org.springframework.test.web.servlet.MockMvc MockMvc}, + * instance. That allows you to process requests using your server-side code, + * but without running a server., + *, +++ b/src/asciidoc/testing.adoc, +Client-side tests can be used to test code that internally uses the `RestTemplate`., +The idea is to declare expected requests and to provide "stub" responses so that, +you can focus on testing the code in isolation, i.e. without running a server., +Here is an example:, +	// Test code that uses the above RestTemplate ..., +necessary. Once expected requests and stub responses have been defined, the `RestTemplate` can be, +The client-side test support also provides an alternative `ClientHttpRequestFactory`, +strategy for executing requests with a `MockMvc` instance. That allows you to, +process requests using your server-side code but without running a server., +Here is an example:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	MockMvc mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();, +	this.restTemplate = new RestTemplate(new MockMvcClientHttpRequestFactory(mockMvc));, +, +	// Test code that uses the above RestTemplate ..., +, +	mockServer.verify();, +----, +, +, +]