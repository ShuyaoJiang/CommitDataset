[+++ b/spring-context/src/main/java/org/springframework/context/Lifecycle.java, + * Copyright 2002-2015 the original author or authors., + * A common interface defining methods for start/stop lifecycle control., + * <b>NOTE: This interface does not imply specific auto-startup semantics., + * Consider implementing {@link SmartLifecycle} for that purpose.</b>, + * <p>Can be implemented by both components (typically a Spring bean defined in a, + * Spring context) and containers  (typically a Spring {@link ApplicationContext}, + * itself). Containers will propagate start/stop signals to all components that, + * apply within each container, e.g. for a stop/restart scenario at runtime., + * <p>Note that the Lifecycle interface is only supported on <b>top-level singleton, + * beans</b>. On any other component, the Lifecycle interface will remain undetected, + * and hence ignored. Also, note that the extended {@link SmartLifecycle} interface, + * provides integration with the application context's startup and shutdown phases., +	 * @see SmartLifecycle#isAutoStartup(), +++ b/spring-context/src/main/java/org/springframework/context/Lifecycle.java, + * Copyright 2002-2015 the original author or authors., + * A common interface defining methods for start/stop lifecycle control., + * <b>NOTE: This interface does not imply specific auto-startup semantics., + * Consider implementing {@link SmartLifecycle} for that purpose.</b>, + * <p>Can be implemented by both components (typically a Spring bean defined in a, + * Spring context) and containers  (typically a Spring {@link ApplicationContext}, + * itself). Containers will propagate start/stop signals to all components that, + * apply within each container, e.g. for a stop/restart scenario at runtime., + * <p>Note that the Lifecycle interface is only supported on <b>top-level singleton, + * beans</b>. On any other component, the Lifecycle interface will remain undetected, + * and hence ignored. Also, note that the extended {@link SmartLifecycle} interface, + * provides integration with the application context's startup and shutdown phases., +	 * @see SmartLifecycle#isAutoStartup(), +++ b/spring-context/src/main/java/org/springframework/context/SmartLifecycle.java, + * Copyright 2002-2015 the original author or authors., + * An extension of the {@link Lifecycle} interface for those objects that require to, + * be started upon ApplicationContext refresh and/or shutdown in a particular order., + * @see LifecycleProcessor, + * @see ConfigurableApplicationContext, +	 * Returns {@code true} if this {@code Lifecycle} component should get, +	 * started automatically by the container at the time that the containing, +	 * {@link ApplicationContext} gets refreshed., +	 * <p>A value of {@code false} indicates that the component is intended to, +	 * be started through an explicit {@link #start()} call instead, analogous, +	 * to a plain {@link Lifecycle} implementation., +	 * @see #start(), +	 * @see #getPhase(), +	 * @see LifecycleProcessor#onRefresh(), +	 * @see ConfigurableApplicationContext#refresh(), +	 * <p>The provided callback is used by the {@link LifecycleProcessor} to support, +	 * an ordered, and potentially concurrent, shutdown of all components having a, +	 * the {@code SmartLifecycle} component does indeed stop., +	 * <p>The {@link LifecycleProcessor} will call <i>only</i> this variant of the, +	 * {@code SmartLifecycle} implementations unless explicitly delegated to within, +	 * the implementation of this method., +	 * @see #stop(), +	 * @see #getPhase(), +++ b/spring-context/src/main/java/org/springframework/context/Lifecycle.java, + * Copyright 2002-2015 the original author or authors., + * A common interface defining methods for start/stop lifecycle control., + * <b>NOTE: This interface does not imply specific auto-startup semantics., + * Consider implementing {@link SmartLifecycle} for that purpose.</b>, + * <p>Can be implemented by both components (typically a Spring bean defined in a, + * Spring context) and containers  (typically a Spring {@link ApplicationContext}, + * itself). Containers will propagate start/stop signals to all components that, + * apply within each container, e.g. for a stop/restart scenario at runtime., + * <p>Note that the Lifecycle interface is only supported on <b>top-level singleton, + * beans</b>. On any other component, the Lifecycle interface will remain undetected, + * and hence ignored. Also, note that the extended {@link SmartLifecycle} interface, + * provides integration with the application context's startup and shutdown phases., +	 * @see SmartLifecycle#isAutoStartup(), +++ b/spring-context/src/main/java/org/springframework/context/SmartLifecycle.java, + * Copyright 2002-2015 the original author or authors., + * An extension of the {@link Lifecycle} interface for those objects that require to, + * be started upon ApplicationContext refresh and/or shutdown in a particular order., + * @see LifecycleProcessor, + * @see ConfigurableApplicationContext, +	 * Returns {@code true} if this {@code Lifecycle} component should get, +	 * started automatically by the container at the time that the containing, +	 * {@link ApplicationContext} gets refreshed., +	 * <p>A value of {@code false} indicates that the component is intended to, +	 * be started through an explicit {@link #start()} call instead, analogous, +	 * to a plain {@link Lifecycle} implementation., +	 * @see #start(), +	 * @see #getPhase(), +	 * @see LifecycleProcessor#onRefresh(), +	 * @see ConfigurableApplicationContext#refresh(), +	 * <p>The provided callback is used by the {@link LifecycleProcessor} to support, +	 * an ordered, and potentially concurrent, shutdown of all components having a, +	 * the {@code SmartLifecycle} component does indeed stop., +	 * <p>The {@link LifecycleProcessor} will call <i>only</i> this variant of the, +	 * {@code SmartLifecycle} implementations unless explicitly delegated to within, +	 * the implementation of this method., +	 * @see #stop(), +	 * @see #getPhase(), +++ b/src/asciidoc/core-beans.adoc, +`ApplicationContext` itself receives start and stop signals, e.g. for a stop/restart, +scenario at runtime, it will cascade those calls to all `Lifecycle` implementations, +defined within that context. It does this by delegating to a `LifecycleProcessor`:, +[TIP], +====, +Note that the regular `org.springframework.context.Lifecycle` interface is just a plain, +contract for explicit start/stop notifications and does NOT imply auto-startup at context, +refresh time. Consider implementing `org.springframework.context.SmartLifecycle` instead, +for fine-grained control over auto-startup of a specific bean (including startup phases).]