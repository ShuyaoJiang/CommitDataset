[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +			writers.add(new Jackson2ServerHttpMessageWriter(new ServerSentEventHttpMessageWriter(sseDataEncoders)));, +		}, +		else {, +			writers.add(new ServerSentEventHttpMessageWriter(sseDataEncoders));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +			writers.add(new Jackson2ServerHttpMessageWriter(new ServerSentEventHttpMessageWriter(sseDataEncoders)));, +		}, +		else {, +			writers.add(new ServerSentEventHttpMessageWriter(sseDataEncoders));, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingIntegrationTests.java, +import org.springframework.http.MediaType;, +	public void longStreamResult() throws Exception {, +		assertArrayEquals(expected, performGet("/long-stream-result", null, String[].class).getBody());, +	}, +, +	@Test, +	public void objectStreamResultWithAllMediaType() throws Exception {, +		String expected = "[{\"name\":\"bar\"}]";, +		assertEquals(expected, performGet("/object-stream-result", MediaType.ALL, String.class).getBody());, +		@GetMapping("/long-stream-result"), +		public Publisher<Long> longStreamResponseBody() {, +		@GetMapping("/object-stream-result"), +		public Publisher<Foo> objectStreamResponseBody() {, +			return Flux.just(new Foo("bar"));, +		}, +, +	}, +, +	private static class Foo {, +, +		private String name;, +, +		public Foo() {, +		}, +, +		public Foo(String name) {, +			this.name = name;, +		}, +, +		public String getName() {, +			return name;, +		}, +, +		public void setName(String name) {, +			this.name = name;, +		}]