[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/RedirectView.java, +import java.util.ArrayList;, +import org.springframework.web.servlet.HandlerMapping;, +		UriTemplate redirectUri = createUriTemplate(targetUrl, enc);, +		if (redirectUri.getVariableNames().size() > 0) {, +			targetUrl = new StringBuilder(redirectUri.expand(model).toString());, +			model = removeKeys(model, redirectUri.getVariableNames());, +			List<String> uriTemplateVarNames = getUriTemplateVarNames(request);, +			if (!uriTemplateVarNames.isEmpty()) {, +				model = removeKeys(model, uriTemplateVarNames);, +			}, +	@SuppressWarnings("serial"), +	 * Returns URI template variable names for the current request; or an empty list., +	 */, +	@SuppressWarnings("unchecked"), +	private List<String> getUriTemplateVarNames(HttpServletRequest request) {, +		String key = HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE;, +		Map<String, String> map = (Map<String, String>) request.getAttribute(key);, +		return (map != null) ? new ArrayList<String>(map.keySet()) : Collections.<String>emptyList();, +	}, +, +	/**, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/RedirectView.java, +import java.util.ArrayList;, +import org.springframework.web.servlet.HandlerMapping;, +		UriTemplate redirectUri = createUriTemplate(targetUrl, enc);, +		if (redirectUri.getVariableNames().size() > 0) {, +			targetUrl = new StringBuilder(redirectUri.expand(model).toString());, +			model = removeKeys(model, redirectUri.getVariableNames());, +			List<String> uriTemplateVarNames = getUriTemplateVarNames(request);, +			if (!uriTemplateVarNames.isEmpty()) {, +				model = removeKeys(model, uriTemplateVarNames);, +			}, +	@SuppressWarnings("serial"), +	 * Returns URI template variable names for the current request; or an empty list., +	 */, +	@SuppressWarnings("unchecked"), +	private List<String> getUriTemplateVarNames(HttpServletRequest request) {, +		String key = HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE;, +		Map<String, String> map = (Map<String, String>) request.getAttribute(key);, +		return (map != null) ? new ArrayList<String>(map.keySet()) : Collections.<String>emptyList();, +	}, +, +	/**, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/view/RedirectViewUriTemplateTests.java, +import org.springframework.web.servlet.HandlerMapping;, +	public void uriTemplateVar() throws Exception {, +	public void uriTemplateVarAndArrayParam() throws Exception {, +	public void uriTemplateVarWithObjectConversion() throws Exception {, +	@Test, +	public void doNotAppendUriTemplateVarFromCurrentRequest() throws Exception {, +		Map<String, Object> model = new HashMap<String, Object>();, +		model.put("name1", "value1");, +		model.put("name2", "value2");, +		model.put("name3", "value3");, +		, +		Map<String, String> uriTemplatVars = new HashMap<String, String>();, +		uriTemplatVars.put("name1", "value1");, +		uriTemplatVars.put("name2", "value2");, +		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplatVars);, +, +		String url = "http://url.somewhere.com";, +		RedirectView redirectView = new RedirectView(url + "/{name2}");, +		redirectView.renderMergedOutputModel(model, request, response);, +, +		assertEquals(url + "/value2?name3=value3", response.getRedirectedUrl());, +	}]