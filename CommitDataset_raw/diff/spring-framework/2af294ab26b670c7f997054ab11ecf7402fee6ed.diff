[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.validation.MessageCodesResolver;, + * A sub-class of {@code WebMvcConfigurationSupport} that detects and delegates, + * to all beans of type {@link WebMvcConfigurer} allowing them to customize the, + * configuration provided by {@code WebMvcConfigurationSupport}. This is the, + * class actually imported by {@link EnableWebMvc @EnableWebMvc}., +		this.configurers.addInterceptors(registry);, +		this.configurers.addViewControllers(registry);, +		this.configurers.addResourceHandlers(registry);, +		this.configurers.configureDefaultServletHandling(configurer);, +		this.configurers.addArgumentResolvers(argumentResolvers);, +		this.configurers.addReturnValueHandlers(returnValueHandlers);, +		this.configurers.configureMessageConverters(converters);, +		this.configurers.addFormatters(registry);, +		return this.configurers.getValidator();, +	}, +, +	@Override, +	protected MessageCodesResolver getMessageCodesResolver() {, +		return this.configurers.getMessageCodesResolver();, +		this.configurers.configureHandlerExceptionResolvers(exceptionResolvers);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.validation.MessageCodesResolver;, + * A sub-class of {@code WebMvcConfigurationSupport} that detects and delegates, + * to all beans of type {@link WebMvcConfigurer} allowing them to customize the, + * configuration provided by {@code WebMvcConfigurationSupport}. This is the, + * class actually imported by {@link EnableWebMvc @EnableWebMvc}., +		this.configurers.addInterceptors(registry);, +		this.configurers.addViewControllers(registry);, +		this.configurers.addResourceHandlers(registry);, +		this.configurers.configureDefaultServletHandling(configurer);, +		this.configurers.addArgumentResolvers(argumentResolvers);, +		this.configurers.addReturnValueHandlers(returnValueHandlers);, +		this.configurers.configureMessageConverters(converters);, +		this.configurers.addFormatters(registry);, +		return this.configurers.getValidator();, +	}, +, +	@Override, +	protected MessageCodesResolver getMessageCodesResolver() {, +		return this.configurers.getMessageCodesResolver();, +		this.configurers.configureHandlerExceptionResolvers(exceptionResolvers);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.validation.MessageCodesResolver;, +		webBindingInitializer.setMessageCodesResolver(getMessageCodesResolver());, +	 * Returns a {@link FormattingConversionService} for use with annotated, +	 * controller methods and the {@code spring:eval} JSP tag., +	 * Also see {@link #addFormatters} as an alternative to overriding this method., +	 */, +	@Bean, +	public FormattingConversionService mvcConversionService() {, +		FormattingConversionService conversionService = new DefaultFormattingConversionService();, +		addFormatters(conversionService);, +		return conversionService;, +	}, +, +	/**, +	 * Returns a global {@link Validator} instance for example for validating, +	 * {@code @ModelAttribute} and {@code @RequestBody} method arguments., +	 * Delegates to {@link #getValidator()} first and if that returns {@code null}, +	 * checks the classpath for the presence of a JSR-303 implementations, +	 * before creating a {@code LocalValidatorFactoryBean}.If a JSR-303, +	 * implementation is not available, a no-op {@link Validator} is returned., +	 */, +	@Bean, +	public Validator mvcValidator() {, +		Validator validator = getValidator();, +		if (validator == null) {, +			if (ClassUtils.isPresent("javax.validation.Validator", getClass().getClassLoader())) {, +				Class<?> clazz;, +				try {, +					String className = "org.springframework.validation.beanvalidation.LocalValidatorFactoryBean";, +					clazz = ClassUtils.forName(className, WebMvcConfigurationSupport.class.getClassLoader());, +				} catch (ClassNotFoundException e) {, +					throw new BeanInitializationException("Could not find default validator", e);, +				} catch (LinkageError e) {, +					throw new BeanInitializationException("Could not find default validator", e);, +				}, +				validator = (Validator) BeanUtils.instantiate(clazz);, +			}, +			else {, +				validator = new Validator() {, +					public boolean supports(Class<?> clazz) {, +						return false;, +					}, +					public void validate(Object target, Errors errors) {, +					}, +				};, +			}, +		}, +		return validator;, +	}, +, +	/**, +	 * Override this method to provide a custom {@link Validator}., +	 */, +	protected Validator getValidator() {]