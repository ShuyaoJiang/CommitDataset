[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/handler/ConcurrentWebSocketSessionDecorator.java, +	private volatile boolean shutDownInProgress;, +, +		if (isDisabled()) {, +		while (!this.buffer.isEmpty() && !isDisabled());, +	}, +, +	private boolean isDisabled() {, +		return (this.limitExceeded || this.shutDownInProgress);, +		if (this.flushLock.tryLock()) {, +					if (messageToSend == null || isDisabled()) {, +		if (!isDisabled() && this.closeLock.tryLock()) {, +	@Override, +	public void close(CloseStatus status) throws IOException {, +		this.shutDownInProgress = true;, +		super.close(status);, +	}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/handler/ConcurrentWebSocketSessionDecorator.java, +	private volatile boolean shutDownInProgress;, +, +		if (isDisabled()) {, +		while (!this.buffer.isEmpty() && !isDisabled());, +	}, +, +	private boolean isDisabled() {, +		return (this.limitExceeded || this.shutDownInProgress);, +		if (this.flushLock.tryLock()) {, +					if (messageToSend == null || isDisabled()) {, +		if (!isDisabled() && this.closeLock.tryLock()) {, +	@Override, +	public void close(CloseStatus status) throws IOException {, +		this.shutDownInProgress = true;, +		super.close(status);, +	}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java, +import java.io.IOException;, +, +, +			// Notify sessions to stop flushing messages, +			for (WebSocketSession session : this.sessions.values()) {, +				try {, +					session.close(CloseStatus.GOING_AWAY);, +				}, +				catch (Throwable t) {, +					logger.error("Failed to close session id '" + session.getId() + "': " + t.getMessage());, +				}, +			}, +			logger.error("Session not found for session with id '" + sessionId + "', ignoring message " + message);]