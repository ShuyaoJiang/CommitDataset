[+++ b/org.springframework.context/src/main/java/org/springframework/jmx/access/MBeanClientInterceptor.java, + * Copyright 2002-2010 the original author or authors., +import java.lang.reflect.Array;, +import java.util.Collection;, +import org.springframework.core.CollectionFactory;, +import org.springframework.core.GenericCollectionTypeResolver;, +import org.springframework.core.MethodParameter;, +			return convertResultValueIfNecessary(result, new MethodParameter(method, -1));, +	protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter) {, +		Class targetClass = parameter.getParameterType();, +				Method fromMethod = targetClass.getMethod("from", CompositeData.class);, +				return ReflectionUtils.invokeMethod(fromMethod, null, result);, +			}, +			else if (result instanceof CompositeData[]) {, +				CompositeData[] array = (CompositeData[]) result;, +				if (targetClass.isArray()) {, +					return convertDataArrayToTargetArray(array, targetClass);, +				}, +				else if (Collection.class.isAssignableFrom(targetClass)) {, +					Class elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter);, +					if (elementType != null) {, +						return convertDataArrayToTargetCollection(array, targetClass, elementType);, +					}, +				}, +				Method fromMethod = targetClass.getMethod("from", TabularData.class);, +				return ReflectionUtils.invokeMethod(fromMethod, null, result);, +			else if (result instanceof TabularData[]) {, +				TabularData[] array = (TabularData[]) result;, +				if (targetClass.isArray()) {, +					return convertDataArrayToTargetArray(array, targetClass);, +				}, +				else if (Collection.class.isAssignableFrom(targetClass)) {, +					Class elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter);, +					if (elementType != null) {, +						return convertDataArrayToTargetCollection(array, targetClass, elementType);, +					}, +				}, +			}, +					"Could not obtain 'from(CompositeData)' / 'from(TabularData)' method on target type [" +, +	private Object convertDataArrayToTargetArray(Object[] array, Class targetClass) throws NoSuchMethodException {, +		Class targetType = targetClass.getComponentType();, +		Method fromMethod = targetType.getMethod("from", array.getClass().getComponentType());, +		Object resultArray = Array.newInstance(targetType, array.length);, +		for (int i = 0; i < array.length; i++) {, +			Array.set(resultArray, i, ReflectionUtils.invokeMethod(fromMethod, null, array[i]));, +		}, +		return resultArray;, +	}, +, +	@SuppressWarnings("unchecked"), +	private Collection convertDataArrayToTargetCollection(Object[] array, Class collectionType, Class elementType), +			throws NoSuchMethodException {, +, +		Method fromMethod = elementType.getMethod("from", array.getClass().getComponentType());, +		Collection resultColl = CollectionFactory.createCollection(collectionType, Array.getLength(array));, +		for (int i = 0; i < array.length; i++) {, +			resultColl.add(ReflectionUtils.invokeMethod(fromMethod, null, array[i]));, +		}, +		return resultColl;, +	}, +, +, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/access/MBeanClientInterceptor.java, + * Copyright 2002-2010 the original author or authors., +import java.lang.reflect.Array;, +import java.util.Collection;, +import org.springframework.core.CollectionFactory;, +import org.springframework.core.GenericCollectionTypeResolver;, +import org.springframework.core.MethodParameter;, +			return convertResultValueIfNecessary(result, new MethodParameter(method, -1));, +	protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter) {, +		Class targetClass = parameter.getParameterType();, +				Method fromMethod = targetClass.getMethod("from", CompositeData.class);, +				return ReflectionUtils.invokeMethod(fromMethod, null, result);, +			}, +			else if (result instanceof CompositeData[]) {, +				CompositeData[] array = (CompositeData[]) result;, +				if (targetClass.isArray()) {, +					return convertDataArrayToTargetArray(array, targetClass);, +				}, +				else if (Collection.class.isAssignableFrom(targetClass)) {, +					Class elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter);, +					if (elementType != null) {, +						return convertDataArrayToTargetCollection(array, targetClass, elementType);, +					}, +				}, +				Method fromMethod = targetClass.getMethod("from", TabularData.class);, +				return ReflectionUtils.invokeMethod(fromMethod, null, result);, +			else if (result instanceof TabularData[]) {, +				TabularData[] array = (TabularData[]) result;, +				if (targetClass.isArray()) {, +					return convertDataArrayToTargetArray(array, targetClass);, +				}, +				else if (Collection.class.isAssignableFrom(targetClass)) {, +					Class elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter);, +					if (elementType != null) {, +						return convertDataArrayToTargetCollection(array, targetClass, elementType);, +					}, +				}, +			}]