[+++ b/spring-core/src/main/java/org/springframework/asm/ClassReader.java, +      final byte[] classFileBuffer,, +      final int classFileOffset,, +      final int classFileLength) { // NOPMD(UnusedFormalParameter) used for backward compatibility., +      } else if (!Constants.BOOTSTRAP_METHODS.equals(attributeName)) {, +        // The BootstrapMethods attribute is read in the constructor., +      for (int typeAnnotationOffset : visibleTypeAnnotationOffsets) {, +        int targetType = readByte(typeAnnotationOffset);, +          currentOffset = readTypeAnnotationTarget(context, typeAnnotationOffset);, +      for (int typeAnnotationOffset : invisibleTypeAnnotationOffsets) {, +        int targetType = readByte(typeAnnotationOffset);, +          currentOffset = readTypeAnnotationTarget(context, typeAnnotationOffset);, +    for (Attribute attributePrototype : attributePrototypes) {, +      if (attributePrototype.type.equals(type)) {, +        return attributePrototype.read(, +++ b/spring-core/src/main/java/org/springframework/asm/ClassReader.java, +      final byte[] classFileBuffer,, +      final int classFileOffset,, +      final int classFileLength) { // NOPMD(UnusedFormalParameter) used for backward compatibility., +      } else if (!Constants.BOOTSTRAP_METHODS.equals(attributeName)) {, +        // The BootstrapMethods attribute is read in the constructor., +      for (int typeAnnotationOffset : visibleTypeAnnotationOffsets) {, +        int targetType = readByte(typeAnnotationOffset);, +          currentOffset = readTypeAnnotationTarget(context, typeAnnotationOffset);, +      for (int typeAnnotationOffset : invisibleTypeAnnotationOffsets) {, +        int targetType = readByte(typeAnnotationOffset);, +          currentOffset = readTypeAnnotationTarget(context, typeAnnotationOffset);, +    for (Attribute attributePrototype : attributePrototypes) {, +      if (attributePrototype.type.equals(type)) {, +        return attributePrototype.read(, +++ b/spring-core/src/main/java/org/springframework/asm/ClassWriter.java, +    // Else, compare the inner classes entry nameSymbol.info - 1 with the arguments of this method, +    // and throw an exception if there is a difference?, +++ b/spring-core/src/main/java/org/springframework/asm/ClassReader.java, +      final byte[] classFileBuffer,, +      final int classFileOffset,, +      final int classFileLength) { // NOPMD(UnusedFormalParameter) used for backward compatibility., +      } else if (!Constants.BOOTSTRAP_METHODS.equals(attributeName)) {, +        // The BootstrapMethods attribute is read in the constructor., +      for (int typeAnnotationOffset : visibleTypeAnnotationOffsets) {, +        int targetType = readByte(typeAnnotationOffset);, +          currentOffset = readTypeAnnotationTarget(context, typeAnnotationOffset);, +      for (int typeAnnotationOffset : invisibleTypeAnnotationOffsets) {, +        int targetType = readByte(typeAnnotationOffset);, +          currentOffset = readTypeAnnotationTarget(context, typeAnnotationOffset);, +    for (Attribute attributePrototype : attributePrototypes) {, +      if (attributePrototype.type.equals(type)) {, +        return attributePrototype.read(, +++ b/spring-core/src/main/java/org/springframework/asm/ClassWriter.java, +    // Else, compare the inner classes entry nameSymbol.info - 1 with the arguments of this method, +    // and throw an exception if there is a difference?, +++ b/spring-core/src/main/java/org/springframework/asm/ConstantDynamic.java, +   * Returns the number of arguments passed to the bootstrap method, in order to compute the value, +   * of this constant., +   *, +   * @return the number of arguments passed to the bootstrap method, in order to compute the value, +   *     of this constant., +   */, +  public int getBootstrapMethodArgumentCount() {, +    return bootstrapMethodArguments.length;, +  }, +, +  /**, +   * Returns an argument passed to the bootstrap method, in order to compute the value of this, +   * @param index an argument index, between 0 and {@link #getBootstrapMethodArgumentCount()}, +   *     (exclusive)., +   * @return the argument passed to the bootstrap method, with the given index., +   */, +  public Object getBootstrapMethodArgument(final int index) {, +    return bootstrapMethodArguments[index];, +  }, +, +  /**, +   * Returns the arguments to pass to the bootstrap method, in order to compute the value of this, +   * constant. WARNING: this array must not be modified, and must not be returned to the user., +   *, +  Object[] getBootstrapMethodArgumentsUnsafe() {, +++ b/spring-core/src/main/java/org/springframework/asm/ClassReader.java, +      final byte[] classFileBuffer,, +      final int classFileOffset,, +      final int classFileLength) { // NOPMD(UnusedFormalParameter) used for backward compatibility., +      } else if (!Constants.BOOTSTRAP_METHODS.equals(attributeName)) {, +        // The BootstrapMethods attribute is read in the constructor., +      for (int typeAnnotationOffset : visibleTypeAnnotationOffsets) {, +        int targetType = readByte(typeAnnotationOffset);, +          currentOffset = readTypeAnnotationTarget(context, typeAnnotationOffset);, +      for (int typeAnnotationOffset : invisibleTypeAnnotationOffsets) {, +        int targetType = readByte(typeAnnotationOffset);, +          currentOffset = readTypeAnnotationTarget(context, typeAnnotationOffset);, +    for (Attribute attributePrototype : attributePrototypes) {, +      if (attributePrototype.type.equals(type)) {, +        return attributePrototype.read(, +++ b/spring-core/src/main/java/org/springframework/asm/ClassWriter.java, +    // Else, compare the inner classes entry nameSymbol.info - 1 with the arguments of this method, +    // and throw an exception if there is a difference?, +++ b/spring-core/src/main/java/org/springframework/asm/ConstantDynamic.java, +   * Returns the number of arguments passed to the bootstrap method, in order to compute the value, +   * of this constant., +   *, +   * @return the number of arguments passed to the bootstrap method, in order to compute the value]