[+++ b/spring-web/src/main/java/org/springframework/http/ContentDisposition.java, +import java.time.ZonedDateTime;, +import java.time.format.DateTimeParseException;, +import static java.time.format.DateTimeFormatter.*;, +	private final ZonedDateTime creationDate;, +, +	private final ZonedDateTime modificationDate;, +, +	private final ZonedDateTime readDate;, +, +	private ContentDisposition(@Nullable String type, @Nullable String name, @Nullable String filename, @Nullable Charset charset, @Nullable Long size,, +			@Nullable ZonedDateTime creationDate, @Nullable ZonedDateTime modificationDate, @Nullable ZonedDateTime readDate) {, +		this.creationDate = creationDate;, +		this.modificationDate = modificationDate;, +		this.readDate = readDate;, +	/**, +	 * Return the value of the {@literal creation-date} parameter, or {@code null} if not defined., +	 */, +	@Nullable, +	public ZonedDateTime getCreationDate() {, +		return this.creationDate;, +	}, +, +	/**, +	 * Return the value of the {@literal modification-date} parameter, or {@code null} if not defined., +	 */, +	@Nullable, +	public ZonedDateTime getModificationDate() {, +		return this.modificationDate;, +	}, +, +	/**, +	 * Return the value of the {@literal read-date} parameter, or {@code null} if not defined., +	 */, +	@Nullable, +	public ZonedDateTime getReadDate() {, +		return this.readDate;, +	}, +, +		return new ContentDisposition("", null, null, null, null, null, null, null);, +	 *, +		ZonedDateTime creationDate = null;, +		ZonedDateTime modificationDate = null;, +		ZonedDateTime readDate = null;, +				else if (attribute.equals("creation-date")) {, +					try {, +						creationDate = ZonedDateTime.parse(value, RFC_1123_DATE_TIME);, +					}, +					catch (DateTimeParseException ex) {, +						// ignore, +					}, +				}, +				else if (attribute.equals("modification-date")) {, +					try {, +						modificationDate = ZonedDateTime.parse(value, RFC_1123_DATE_TIME);, +					}, +					catch (DateTimeParseException ex) {, +						// ignore, +					}, +				}, +				else if (attribute.equals("read-date")) {, +					try {, +						readDate = ZonedDateTime.parse(value, RFC_1123_DATE_TIME);, +					}, +					catch (DateTimeParseException ex) {, +						// ignore, +					}, +				}, +		return new ContentDisposition(type, name, filename, charset, size, creationDate, modificationDate, readDate);, +				ObjectUtils.nullSafeEquals(this.size, otherCd.size) &&, +				ObjectUtils.nullSafeEquals(this.creationDate, otherCd.creationDate)&&, +				ObjectUtils.nullSafeEquals(this.modificationDate, otherCd.modificationDate)&&, +				ObjectUtils.nullSafeEquals(this.readDate, otherCd.readDate));, +		result = 31 * result + (creationDate != null ? creationDate.hashCode() : 0);, +		result = 31 * result + (modificationDate != null ? modificationDate.hashCode() : 0);, +		result = 31 * result + (readDate != null ? readDate.hashCode() : 0);, +		if (this.creationDate != null) {, +			sb.append("; creation-date=\"");, +			sb.append(RFC_1123_DATE_TIME.format(this.creationDate));, +			sb.append('\"');, +		}, +		if (this.modificationDate != null) {, +			sb.append("; modification-date=\"");, +			sb.append(RFC_1123_DATE_TIME.format(this.modificationDate));, +			sb.append('\"');, +		}, +		if (this.readDate != null) {, +			sb.append("; read-date=\"");, +			sb.append(RFC_1123_DATE_TIME.format(this.readDate));, +			sb.append('\"');, +		}, +		 * Set the value of the {@literal creation-date} parameter., +		 */, +		Builder creationDate(ZonedDateTime creationDate);, +, +		/**, +		 * Set the value of the {@literal modification-date} parameter., +		 */, +		Builder modificationDate(ZonedDateTime modificationDate);, +]