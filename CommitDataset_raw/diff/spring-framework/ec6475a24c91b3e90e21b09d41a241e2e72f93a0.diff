[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java, +import io.netty.channel.ChannelPipeline;, +import io.netty.handler.ssl.SslHandler;, +		String scheme = getScheme(request);, +					return new URI(scheme, null, header.substring(0, portIndex),, +				return new URI(scheme, header, null, null);, +			return new URI(scheme, null, localAddress.getHostString(),, +	private static String getScheme(HttpServerRequest request) {, +		ChannelPipeline pipeline = request.context().channel().pipeline();, +		boolean ssl = pipeline.get(SslHandler.class) != null;, +		return ssl ? "https" : "http";, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java, +import io.netty.channel.ChannelPipeline;, +import io.netty.handler.ssl.SslHandler;, +		String scheme = getScheme(request);, +					return new URI(scheme, null, header.substring(0, portIndex),, +				return new URI(scheme, header, null, null);, +			return new URI(scheme, null, localAddress.getHostString(),, +	private static String getScheme(HttpServerRequest request) {, +		ChannelPipeline pipeline = request.context().channel().pipeline();, +		boolean ssl = pipeline.get(SslHandler.class) != null;, +		return ssl ? "https" : "http";, +	}, +, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/RxNettyServerHttpRequest.java, +		// TODO: determine scheme, +		URI baseUrl = new URI("http", null, address.getHostString(), address.getPort(), null, null, null);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java, +import io.netty.channel.ChannelPipeline;, +import io.netty.handler.ssl.SslHandler;, +		String scheme = getScheme(request);, +					return new URI(scheme, null, header.substring(0, portIndex),, +				return new URI(scheme, header, null, null);, +			return new URI(scheme, null, localAddress.getHostString(),, +	private static String getScheme(HttpServerRequest request) {, +		ChannelPipeline pipeline = request.context().channel().pipeline();, +		boolean ssl = pipeline.get(SslHandler.class) != null;, +		return ssl ? "https" : "http";, +	}, +, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/RxNettyServerHttpRequest.java, +		// TODO: determine scheme, +		URI baseUrl = new URI("http", null, address.getHostString(), address.getPort(), null, null, null);, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/ServerHttpRequestIntegrationTests.java, + * Copyright 2002-2017 the original author or authors., +import static org.junit.Assert.*;, +, +			assertEquals("http", uri.getScheme());]