[+++ b/spring-test/src/main/java/org/springframework/test/context/junit/jupiter/DisabledIf.java, +import org.junit.jupiter.api.extension.ExtendWith;, +, +import org.springframework.core.annotation.AliasFor;, +, + * {@code @DisabledIf} is used to signal that the annotated test class or test, + * method is <em>disabled</em> and should not be executed if the supplied, + * {@link #expression} evaluates to {@code true}., + * <p>When applied at the class level, all test methods within that class, + * are automatically disabled as well., + *, + * <p>For basic examples, see the Javadoc for {@link #expression}., + *, + * <p>This annotation may be used as a <em>meta-annotation</em> to create, + * custom <em>composed annotations</em>. For example, a custom, + * {@code @DisabledOnMac} annotation can be created as follows., + *, + * <pre style="code">, + * {@literal @}Target({ ElementType.TYPE, ElementType.METHOD }), + * {@literal @}Retention(RetentionPolicy.RUNTIME), + * {@literal @}DisabledIf(, + *     expression = "#{systemProperties['os.name'].toLowerCase().contains('mac')}",, + *     reason = "Disabled on Mac OS", + * ), + * public {@literal @}interface DisabledOnMac {}, + * </pre>, + *, + * @author Sam Brannen, + * @see org.junit.jupiter.api.Disabled, +@ExtendWith(DisabledIfCondition.class), +	 * Alias for {@link #expression}; only intended to be used if an, +	 * explicit {@link #reason} is not provided., +	 *, +	 * @see #expression, +	@AliasFor("expression"), +	 * The expression that will be evaluated to determine if the annotated test, +	 * class or test method is <em>disabled</em>., +	 * <p>If the expression evaluates to {@link Boolean#TRUE} or a {@link String}, +	 * equal to {@code "true"} (ignoring case), the test will be disabled., +	 *, +	 * <p>Expressions can be any of the following., +	 *, +	 * <ul>, +	 * <li>Spring Expression Language (SpEL) expression &mdash; for example:, +	 * <pre style="code">@DisabledIf("#{systemProperties['os.name'].toLowerCase().contains('mac')}")</pre>, +	 * <li>Placeholder for a property available in the Spring, +	 * {@link org.springframework.core.env.Environment Environment} &mdash; for example:, +	 * <pre style="code">@DisabledIf("${smoke.tests.enabled}")</pre>, +	 * <li>Text literal &mdash; for example:, +	 * <pre style="code">@DisabledIf("true")</pre>, +	 * </ul>, +	 *, +	 * <p>Note, however, that a <em>text literal</em> which is not the result of, +	 * dynamic resolution of a property placeholder is of zero practical value, +	 * since {@code @DisabledIf("true")} is equivalent to {@code @Disabled}, +	 * and {@code @DisabledIf("false")} is logically meaningless., +	 *, +	 * @see #reason, +	 * @see #value, +	String expression() default "";, +	/**, +	 * The reason this test is disabled., +	 *, +	 * @see #expression, +	 */, +++ b/spring-test/src/main/java/org/springframework/test/context/junit/jupiter/DisabledIf.java, +import org.junit.jupiter.api.extension.ExtendWith;, +, +import org.springframework.core.annotation.AliasFor;, +, + * {@code @DisabledIf} is used to signal that the annotated test class or test, + * method is <em>disabled</em> and should not be executed if the supplied, + * {@link #expression} evaluates to {@code true}., + * <p>When applied at the class level, all test methods within that class, + * are automatically disabled as well., + *, + * <p>For basic examples, see the Javadoc for {@link #expression}., + *, + * <p>This annotation may be used as a <em>meta-annotation</em> to create, + * custom <em>composed annotations</em>. For example, a custom, + * {@code @DisabledOnMac} annotation can be created as follows., + *, + * <pre style="code">, + * {@literal @}Target({ ElementType.TYPE, ElementType.METHOD }), + * {@literal @}Retention(RetentionPolicy.RUNTIME), + * {@literal @}DisabledIf(, + *     expression = "#{systemProperties['os.name'].toLowerCase().contains('mac')}",, + *     reason = "Disabled on Mac OS", + * ), + * public {@literal @}interface DisabledOnMac {}, + * </pre>, + *, + * @author Sam Brannen, + * @see org.junit.jupiter.api.Disabled, +@ExtendWith(DisabledIfCondition.class), +	 * Alias for {@link #expression}; only intended to be used if an, +	 * explicit {@link #reason} is not provided., +	 *, +	 * @see #expression, +	@AliasFor("expression")]