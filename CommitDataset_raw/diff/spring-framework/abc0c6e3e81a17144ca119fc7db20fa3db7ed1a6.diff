[+++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/RouterFunctionExtensions.kt, +/**, + * Allow to create easily a [RouterFunction] from [Routes], + */, +fun router(routes: Routes) = RouterDsl().apply(routes).router(), +++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/RouterFunctionExtensions.kt, +/**, + * Allow to create easily a [RouterFunction] from [Routes], + */, +fun router(routes: Routes) = RouterDsl().apply(routes).router(), +++ b/spring-webflux/src/test/kotlin/org/springframework/web/reactive/function/server/RouterFunctionExtensionsTests.kt, +		StepVerifier.create(sampleRouter().route(request)), +		StepVerifier.create(sampleRouter().route(request)), +		StepVerifier.create(sampleRouter().route(request)), +		StepVerifier.create(sampleRouter().route(request)), +		StepVerifier.create(sampleRouter().route(request)), +		StepVerifier.create(sampleRouter().route(request)), +		StepVerifier.create(sampleRouter().route(request)), +		StepVerifier.create(sampleRouter().route(request)), +		StepVerifier.create(sampleRouter().route(request)), +	fun sampleRouter() = router {, +		(GET("/foo/") or GET("/foos/")) { req -> handle(req) }, +			POST("/foo/", ::handleFromClass), +			PUT("/foo/", :: handleFromClass), +			"/foo/"  { handleFromClass(it) }, +		contentType(APPLICATION_OCTET_STREAM, ::handle), +		method(PATCH, ::handle), +		path("/baz", ::handle), +	}]