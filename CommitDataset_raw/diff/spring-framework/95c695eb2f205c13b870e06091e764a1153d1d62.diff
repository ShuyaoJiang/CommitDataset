[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, + * Copyright 2002-2010 the original author or authors., +			if (exposedObject != null) {, +		}, +				}, +				catch (PrivilegedActionException pae) {, +						initMethod.invoke(bean);, +				initMethod.invoke(bean);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, + * Copyright 2002-2010 the original author or authors., +			if (exposedObject != null) {, +		}, +				}, +				catch (PrivilegedActionException pae) {, +						initMethod.invoke(bean);, +				initMethod.invoke(bean);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, + * Copyright 2002-2010 the original author or authors., +		return (bean != null &&, +				(bean instanceof DisposableBean || mbd.getDestroyMethodName() != null ||, +						hasDestructionAwareBeanPostProcessors()));, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, + * Copyright 2002-2010 the original author or authors., +			if (exposedObject != null) {, +		}, +				}, +				catch (PrivilegedActionException pae) {, +						initMethod.invoke(bean);, +				initMethod.invoke(bean);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, + * Copyright 2002-2010 the original author or authors., +		return (bean != null &&, +				(bean instanceof DisposableBean || mbd.getDestroyMethodName() != null ||, +						hasDestructionAwareBeanPostProcessors()));, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java, + * Copyright 2002-2010 the original author or authors., + * Adapter that implements the {@link DisposableBean} and {@link Runnable} interfaces, + * <li>DestructionAwareBeanPostProcessors;, + * <li>the bean implementing DisposableBean itself;, + * <li>a custom destroy method specified on the bean definition., +	public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition,, +		Assert.notNull(bean, "Disposable bean must not be null");, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, + * Copyright 2002-2010 the original author or authors., +			if (exposedObject != null) {, +		}, +				}, +				catch (PrivilegedActionException pae) {, +						initMethod.invoke(bean);, +				initMethod.invoke(bean);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, + * Copyright 2002-2010 the original author or authors., +		return (bean != null &&, +				(bean instanceof DisposableBean || mbd.getDestroyMethodName() != null ||, +						hasDestructionAwareBeanPostProcessors()));, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java, + * Copyright 2002-2010 the original author or authors., + * Adapter that implements the {@link DisposableBean} and {@link Runnable} interfaces, + * <li>DestructionAwareBeanPostProcessors;, + * <li>the bean implementing DisposableBean itself;, + * <li>a custom destroy method specified on the bean definition., +	public DisposableBeanAdapter(Object bean, String beanName, RootBeanDefinition beanDefinition,, +		Assert.notNull(bean, "Disposable bean must not be null");, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2010 the original author or authors., +	public void testPostProcessorWithNullBean() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.addBeanPostProcessor(new CommonAnnotationBeanPostProcessor());, +		RootBeanDefinition rbd = new RootBeanDefinition(NullFactory.class);, +		rbd.setFactoryMethodName("create");, +		bf.registerBeanDefinition("bean", rbd);, +, +		assertNull(bf.getBean("bean"));, +		bf.destroySingletons();, +	}, +, +	@Test, +, +	private static class NullFactory {, +, +		public static Object create() {, +			return null;, +		}, +	}, +]