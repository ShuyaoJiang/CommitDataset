[+++ b/org.springframework.context/src/main/java/org/springframework/ui/WebBindAndValidateLifecycle.java, +import org.springframework.ui.binding.BindingResult;, +import org.springframework.ui.message.MessageBuilder;, +import org.springframework.ui.validation.ValidationResults;, +	@SuppressWarnings("unused"), +	private Validator validator;, +			ValidationResults validationResults = validator.validate(binder.getModel(), bindingResults.successes(), +		MessageBuilder builder = new MessageBuilder();, +		for (BindingResult result : bindingResults.failures()) {, +			builder., +				code(modelPropertyError(result))., +				code(propertyError(result))., +				code(typeError(result))., +				code(error(result))., +				//argContextFactory(createContextFactory(bindingResult))., +				// TODO arg names, +				// TODO el support including ability to setup evaluation context, +				//resolvableArg("label", getModelProperty(result))., +				//arg("value", result.getUserValue())., +				//arg("binding", binder.getBinding(result.getProperty()))., +				//args(result.getErrorArguments())., +				build();, +		}, +		// TODO expose property Binding in EL context for property error message resolution?, +	}, +	, +	private String modelPropertyError(BindingResult result) {, +		return getModelProperty(result) + "." + result.getErrorCode();, +	}, +, +	private String propertyError(BindingResult result) {, +		return result.getProperty() + "." + result.getErrorCode();, +	}, +, +	private String typeError(BindingResult result) { , +		return binder.getBinding(result.getProperty()).getType().getName() + "." + result.getErrorCode();, +	}, +	, +	private String error(BindingResult result) {, +		return result.getErrorCode();, +	}, +	, +	private String getModelProperty(BindingResult result) {, +		return getModel() + "." + result.getProperty();, +	}, +	, +	private String getModel() {, +		// TODO would be nice if model name was module.ClassName by default where module is subpackage of app base package, +		return binder.getModel().getClass().getName();, +++ b/org.springframework.context/src/main/java/org/springframework/ui/WebBindAndValidateLifecycle.java, +import org.springframework.ui.binding.BindingResult;, +import org.springframework.ui.message.MessageBuilder;, +import org.springframework.ui.validation.ValidationResults;, +	@SuppressWarnings("unused"), +	private Validator validator;, +			ValidationResults validationResults = validator.validate(binder.getModel(), bindingResults.successes(), +		MessageBuilder builder = new MessageBuilder();, +		for (BindingResult result : bindingResults.failures()) {, +			builder., +				code(modelPropertyError(result))., +				code(propertyError(result))., +				code(typeError(result))., +				code(error(result))., +				//argContextFactory(createContextFactory(bindingResult))., +				// TODO arg names, +				// TODO el support including ability to setup evaluation context, +				//resolvableArg("label", getModelProperty(result))., +				//arg("value", result.getUserValue())., +				//arg("binding", binder.getBinding(result.getProperty()))., +				//args(result.getErrorArguments())., +				build();, +		}, +		// TODO expose property Binding in EL context for property error message resolution?, +	}, +	, +	private String modelPropertyError(BindingResult result) {, +		return getModelProperty(result) + "." + result.getErrorCode();, +	}, +, +	private String propertyError(BindingResult result) {, +		return result.getProperty() + "." + result.getErrorCode();, +	}, +, +	private String typeError(BindingResult result) { , +		return binder.getBinding(result.getProperty()).getType().getName() + "." + result.getErrorCode();, +	}, +	, +	private String error(BindingResult result) {, +		return result.getErrorCode();, +	}, +	, +	private String getModelProperty(BindingResult result) {, +		return getModel() + "." + result.getProperty();, +	}, +	, +	private String getModel() {, +		// TODO would be nice if model name was module.ClassName by default where module is subpackage of app base package, +		return binder.getModel().getClass().getName();, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binding.java, +	/**]