[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/DeclareParentsAdvisor.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.aop.IntroductionInterceptor;, +	private final Advice advice;, +, +		this(interfaceType, typePattern,, +		this(interfaceType, typePattern, new DelegatingIntroductionInterceptor(delegateRef));, +	 * @param interceptor the delegation advice as {@link IntroductionInterceptor}, +	private DeclareParentsAdvisor(Class<?> interfaceType, String typePattern, IntroductionInterceptor interceptor) {, +		this.advice = interceptor;, +		ClassFilter typePatternFilter = new TypePatternClassFilter(typePattern);, +		ClassFilter exclusion = (clazz -> !introducedInterface.isAssignableFrom(clazz));, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/DeclareParentsAdvisor.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.aop.IntroductionInterceptor;, +	private final Advice advice;, +, +		this(interfaceType, typePattern,, +		this(interfaceType, typePattern, new DelegatingIntroductionInterceptor(delegateRef));, +	 * @param interceptor the delegation advice as {@link IntroductionInterceptor}, +	private DeclareParentsAdvisor(Class<?> interfaceType, String typePattern, IntroductionInterceptor interceptor) {, +		this.advice = interceptor;, +		ClassFilter typePatternFilter = new TypePatternClassFilter(typePattern);, +		ClassFilter exclusion = (clazz -> !introducedInterface.isAssignableFrom(clazz));, +++ b/spring-core/src/main/java/org/springframework/asm/ClassWriter.java, +        Item result = new Item(typeCount, item);]