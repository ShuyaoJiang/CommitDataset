[+++ b/spring-web/src/main/java/org/springframework/http/ZeroCopyHttpOutputMessage.java, + * Copyright 2002-2018 the original author or authors., +import java.nio.file.Path;, + * @author Juergen Hoeller, +	default Mono<Void> writeWith(File file, long position, long count) {, +		return writeWith(file.toPath(), position, count);, +	}, +, +	/**, +	 * Use the given {@link Path} to write the body of the message to the underlying, +	 * HTTP layer., +	 * @param file the file to transfer, +	 * @param position the position within the file from which the transfer is to begin, +	 * @param count the number of bytes to be transferred, +	 * @return a publisher that indicates completion or error., +	 * @since 5.1, +	 */, +	Mono<Void> writeWith(Path file, long position, long count);, +++ b/spring-web/src/main/java/org/springframework/http/ZeroCopyHttpOutputMessage.java, + * Copyright 2002-2018 the original author or authors., +import java.nio.file.Path;, + * @author Juergen Hoeller, +	default Mono<Void> writeWith(File file, long position, long count) {, +		return writeWith(file.toPath(), position, count);, +	}, +, +	/**, +	 * Use the given {@link Path} to write the body of the message to the underlying, +	 * HTTP layer., +	 * @param file the file to transfer, +	 * @param position the position within the file from which the transfer is to begin, +	 * @param count the number of bytes to be transferred, +	 * @return a publisher that indicates completion or error., +	 * @since 5.1, +	 */, +	Mono<Void> writeWith(Path file, long position, long count);, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java, +import java.nio.file.Path;, +	public Mono<Void> writeWith(Path file, long position, long count) {, +		return doCommit(() -> this.outbound.sendFile(file, position, count).then());, +++ b/spring-web/src/main/java/org/springframework/http/ZeroCopyHttpOutputMessage.java, + * Copyright 2002-2018 the original author or authors., +import java.nio.file.Path;, + * @author Juergen Hoeller, +	default Mono<Void> writeWith(File file, long position, long count) {, +		return writeWith(file.toPath(), position, count);, +	}, +, +	/**, +	 * Use the given {@link Path} to write the body of the message to the underlying, +	 * HTTP layer., +	 * @param file the file to transfer, +	 * @param position the position within the file from which the transfer is to begin, +	 * @param count the number of bytes to be transferred, +	 * @return a publisher that indicates completion or error., +	 * @since 5.1, +	 */, +	Mono<Void> writeWith(Path file, long position, long count);, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java, +import java.nio.file.Path;, +	public Mono<Void> writeWith(Path file, long position, long count) {, +		return doCommit(() -> this.outbound.sendFile(file, position, count).then());, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/FilePart.java, +import java.nio.file.Path;, + * @author Juergen Hoeller, +	 * <p>The default implementation delegates to {@link #transferTo(Path)}., +	 * @see #transferTo(Path), +	default Mono<Void> transferTo(File dest) {, +		return transferTo(dest.toPath());, +	}, +, +	/**, +	 * Convenience method to copy the content of the file in this part to the, +	 * given destination file. If the destination file already exists, it will, +	 * be truncated first., +	 * @param dest the target file, +	 * @return completion {@code Mono} with the result of the file transfer,, +	 * possibly {@link IllegalStateException} if the part isn't a file, +	 * @since 5.1, +	 * @see #transferTo(File), +	 */, +	Mono<Void> transferTo(Path dest);, +++ b/spring-web/src/main/java/org/springframework/http/ZeroCopyHttpOutputMessage.java, + * Copyright 2002-2018 the original author or authors., +import java.nio.file.Path;, + * @author Juergen Hoeller, +	default Mono<Void> writeWith(File file, long position, long count) {, +		return writeWith(file.toPath(), position, count);, +	}, +, +	/**, +	 * Use the given {@link Path} to write the body of the message to the underlying, +	 * HTTP layer., +	 * @param file the file to transfer, +	 * @param position the position within the file from which the transfer is to begin, +	 * @param count the number of bytes to be transferred, +	 * @return a publisher that indicates completion or error., +	 * @since 5.1, +	 */, +	Mono<Void> writeWith(Path file, long position, long count);]