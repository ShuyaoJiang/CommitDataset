[+++ b/spring-core/src/main/java/org/springframework/core/env/MutablePropertySources.java, +import java.util.List;, +import java.util.concurrent.CopyOnWriteArrayList;, + * @author Juergen Hoeller, +	private final List<PropertySource<?>> propertySourceList = new CopyOnWriteArrayList<PropertySource<?>>();, +		this.logger = LogFactory.getLog(getClass());, +			addLast(propertySource);, +		return (index != -1 ? this.propertySourceList.get(index) : null);, +		this.propertySourceList.add(0, propertySource);, +		this.propertySourceList.add(propertySource);, +		return (index != -1 ? this.propertySourceList.remove(index) : null);, +		if (relativePropertySourceName.equals(newPropertySourceName)) {, +			throw new IllegalArgumentException(, +					String.format("PropertySource named [%s] cannot be added relative to itself", newPropertySourceName));, +		}, +		if (index == -1) {, +			throw new IllegalArgumentException(String.format("PropertySource named [%s] does not exist", name));, +		}, +++ b/spring-core/src/main/java/org/springframework/core/env/MutablePropertySources.java, +import java.util.List;, +import java.util.concurrent.CopyOnWriteArrayList;, + * @author Juergen Hoeller, +	private final List<PropertySource<?>> propertySourceList = new CopyOnWriteArrayList<PropertySource<?>>();, +		this.logger = LogFactory.getLog(getClass());, +			addLast(propertySource);, +		return (index != -1 ? this.propertySourceList.get(index) : null);, +		this.propertySourceList.add(0, propertySource);, +		this.propertySourceList.add(propertySource);, +		return (index != -1 ? this.propertySourceList.remove(index) : null);, +		if (relativePropertySourceName.equals(newPropertySourceName)) {, +			throw new IllegalArgumentException(, +					String.format("PropertySource named [%s] cannot be added relative to itself", newPropertySourceName));, +		}, +		if (index == -1) {, +			throw new IllegalArgumentException(String.format("PropertySource named [%s] does not exist", name));, +		}, +++ b/spring-core/src/test/java/org/springframework/core/env/MutablePropertySourcesTests.java, + * Copyright 2002-2014 the original author or authors., + * @author Juergen Hoeller, +		}, +		catch (IllegalArgumentException ex) {, +			assertTrue(ex.getMessage().contains("does not exist"));, +		}, +		catch (IllegalArgumentException ex) {, +			assertTrue(ex.getMessage().contains("does not exist"));, +		}, +		catch (IllegalArgumentException ex) {, +			assertTrue(ex.getMessage().contains("cannot be added relative to itself"));, +		}, +		catch (IllegalArgumentException ex) {, +			assertTrue(ex.getMessage().contains("cannot be added relative to itself"));]