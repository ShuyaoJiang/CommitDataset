[+++ b/org.springframework.web/src/main/java/org/springframework/http/converter/BufferedImageHttpMessageConverter.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.http.converter;, +, +import java.awt.image.BufferedImage;, +import java.io.File;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.OutputStream;, +import java.util.ArrayList;, +import java.util.Iterator;, +import java.util.List;, +import javax.imageio.IIOImage;, +import javax.imageio.ImageIO;, +import javax.imageio.ImageReadParam;, +import javax.imageio.ImageReader;, +import javax.imageio.ImageWriteParam;, +import javax.imageio.ImageWriter;, +import javax.imageio.stream.FileCacheImageInputStream;, +import javax.imageio.stream.FileCacheImageOutputStream;, +import javax.imageio.stream.ImageInputStream;, +import javax.imageio.stream.ImageOutputStream;, +import javax.imageio.stream.MemoryCacheImageInputStream;, +import javax.imageio.stream.MemoryCacheImageOutputStream;, +, +import org.springframework.http.HttpInputMessage;, +import org.springframework.http.HttpOutputMessage;, +import org.springframework.http.MediaType;, +import org.springframework.util.Assert;, +, +/**, + * Implementation of {@link HttpMessageConverter} that can read and write {@link BufferedImage BufferedImages}., + *, + * <p>By default, this converter can read all media types that are supported by the {@linkplain, + * ImageIO#getReaderMIMETypes() registered image readers}, and writes using the media type of the first available, + * {@linkplain javax.imageio.ImageIO#getWriterMIMETypes() registered image writer}. This behavior can be overriden by, + * setting the {@link #setSupportedMediaTypes(java.util.List) supportedMediaTypes} and {@link, + * #setContentType(org.springframework.http.MediaType) contentType} properties respectively., + *, + * <p>If the {@link #setCacheDir(java.io.File) cacheDir} property is set to an existing directory, this converter will, + * cache image data., + *, + * <p>The {@link #process(ImageReadParam)} and {@link #process(ImageWriteParam)} template methods allow subclasses to, + * override Image I/O parameters., + *, + * @author Arjen Poutsma, + * @since 3.0, + */, +public class BufferedImageHttpMessageConverter extends AbstractHttpMessageConverter<BufferedImage> {, +, +	private MediaType contentType;, +, +	private File cacheDir;, +, +	public BufferedImageHttpMessageConverter() {, +		String[] readerMediaTypes = ImageIO.getReaderMIMETypes();, +		List<MediaType> supportedMediaTypes = new ArrayList<MediaType>(readerMediaTypes.length);, +		for (String mediaType : readerMediaTypes) {, +			supportedMediaTypes.add(MediaType.parseMediaType(mediaType));, +		}, +		setSupportedMediaTypes(supportedMediaTypes);, +		String[] writerMediaTypes = ImageIO.getWriterMIMETypes();, +		if (writerMediaTypes.length > 0) {, +			contentType = MediaType.parseMediaType(writerMediaTypes[0]);, +		}, +	}, +, +	/**, +	 * Sets the {@link MediaType MediaTypes} supported for reading., +	 *, +	 * @throws IllegalArgumentException if the given media type is not supported by the Java Image I/O API, +	 */, +	@Override, +	public void setSupportedMediaTypes(List<MediaType> supportedMediaTypes) {, +		Assert.notEmpty(supportedMediaTypes, "'supportedMediaTypes' must not be empty");, +		for (MediaType supportedMediaType : supportedMediaTypes) {, +			Iterator<ImageReader> imageReaders = ImageIO.getImageReadersByMIMEType(supportedMediaType.toString());, +			if (!imageReaders.hasNext()) {, +				throw new IllegalArgumentException(, +						"MediaType [" + supportedMediaType + "] is not supported by the Java Image I/O API");, +			}, +		}, +		super.setSupportedMediaTypes(supportedMediaTypes);, +	}, +]