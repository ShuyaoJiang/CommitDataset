[+++ b/spring-context/src/main/java/org/springframework/format/support/FormattingConversionService.java, +import org.springframework.core.DecoratingProxy;, +		if (fieldType == null && formatter instanceof DecoratingProxy) {, +			fieldType = GenericTypeResolver.resolveTypeArgument(, +					((DecoratingProxy) formatter).getDecoratedClass(), Formatter.class);, +		}, +			throw new IllegalArgumentException("Unable to extract the parameterized field type from Formatter [" +, +					formatter.getClass().getName() + "]; does the class parameterize the <T> generic type?");, +++ b/spring-context/src/main/java/org/springframework/format/support/FormattingConversionService.java, +import org.springframework.core.DecoratingProxy;, +		if (fieldType == null && formatter instanceof DecoratingProxy) {, +			fieldType = GenericTypeResolver.resolveTypeArgument(, +					((DecoratingProxy) formatter).getDecoratedClass(), Formatter.class);, +		}, +			throw new IllegalArgumentException("Unable to extract the parameterized field type from Formatter [" +, +					formatter.getClass().getName() + "]; does the class parameterize the <T> generic type?");, +++ b/spring-context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +import org.springframework.aop.framework.ProxyFactory;, +import org.springframework.core.convert.converter.ConverterFactory;, +	public void formatFieldForTypeWithFormatter() throws ParseException {, +	public void formatFieldForTypeWithPrinterParserWithCoercion() throws ParseException {, +	public void formatFieldForValueInjection() {, +	public void formatFieldForValueInjectionUsingMetaAnnotations() {, +	public void formatFieldForAnnotation() throws Exception {, +	public void formatFieldForAnnotationWithDirectFieldAccess() throws Exception {, +	public void formatFieldForAnnotationWithPlaceholders() throws Exception {, +	public void formatFieldForAnnotationWithPlaceholdersAndFactoryBean() throws Exception {, +	public void printNull() throws ParseException {, +	public void parseNull() throws ParseException {, +	public void parseEmptyString() throws ParseException {, +	public void parseBlankString() throws ParseException {, +	public void parseParserReturnsNull() throws ParseException {, +	public void parseNullPrimitiveProperty() throws ParseException {, +	public void printNullDefault() throws ParseException {, +	public void parseNullDefault() throws ParseException {, +	public void parseEmptyStringDefault() throws ParseException {, +	public void formatFieldForAnnotationWithSubclassAsFieldType() throws Exception {, +	public void registerDefaultValueViaFormatter() {, +	@Test, +	public void introspectedFormatter() throws ParseException {, +		formattingService.addFormatter(new NumberStyleFormatter());, +		assertNull(formattingService.convert(null, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +	}, +, +	@Test, +	public void proxiedFormatter() throws ParseException {, +		Formatter<?> formatter = new NumberStyleFormatter();, +		formattingService.addFormatter((Formatter<?>) new ProxyFactory(formatter).getProxy());, +		assertNull(formattingService.convert(null, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +	}, +, +	@Test, +	public void introspectedConverter() {, +		formattingService.addConverter(new IntegerConverter());, +		assertEquals(Integer.valueOf(1), formattingService.convert("1", Integer.class));, +	}, +, +	@Test, +	public void proxiedConverter() {, +		Converter<?, ?> converter = new IntegerConverter();, +		formattingService.addConverter((Converter<?, ?>) new ProxyFactory(converter).getProxy());, +		assertEquals(Integer.valueOf(1), formattingService.convert("1", Integer.class));, +	}, +, +	@Test, +	public void introspectedConverterFactory() {, +		formattingService.addConverterFactory(new IntegerConverterFactory());, +		assertEquals(Integer.valueOf(1), formattingService.convert("1", Integer.class));, +	}, +, +	@Test, +	public void proxiedConverterFactory() {, +		ConverterFactory<?, ?> converterFactory = new IntegerConverterFactory();, +		formattingService.addConverterFactory((ConverterFactory<?, ?>) new ProxyFactory(converterFactory).getProxy());, +		assertEquals(Integer.valueOf(1), formattingService.convert("1", Integer.class));, +	}, +, +, +, +	public @interface MyDateAnn {, +, +	public @interface MyNumberAnn {, +, +, +, +	public @interface MyDatePattern {, +, +, +, +, +	private static class IntegerConverter implements Converter<String, Integer> {, +, +		@Override, +		public Integer convert(String source) {, +			return Integer.parseInt(source);, +		}, +	}, +, +, +	private static class IntegerConverterFactory implements ConverterFactory<String, Number> {]