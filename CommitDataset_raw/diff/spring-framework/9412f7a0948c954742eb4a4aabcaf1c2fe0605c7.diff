[+++ b/spring-context/src/main/java/org/springframework/format/datetime/standard/InstantFormatter.java, + * Copyright 2002-2016 the original author or authors., +import java.time.format.DateTimeFormatter;, + * configurable {@link java.time.format.DateTimeFormatter}): accepting the, + * default {@code ISO_INSTANT} format as well as {@code RFC_1123_DATE_TIME}, + * (which is commonly used for HTTP date header values), as of Spring 4.3., + * @see java.time.format.DateTimeFormatter#ISO_INSTANT, + * @see java.time.format.DateTimeFormatter#RFC_1123_DATE_TIME, +		if (text.length() > 0 && Character.isDigit(text.charAt(0))) {, +			// assuming UTC instant a la "2007-12-03T10:15:30.00Z", +		else {, +			// assuming RFC-1123 value a la "Tue, 3 Jun 2008 11:05:30 GMT", +			return Instant.from(DateTimeFormatter.RFC_1123_DATE_TIME.parse(text));, +		}, +	}, +++ b/spring-context/src/main/java/org/springframework/format/datetime/standard/InstantFormatter.java, + * Copyright 2002-2016 the original author or authors., +import java.time.format.DateTimeFormatter;, + * configurable {@link java.time.format.DateTimeFormatter}): accepting the, + * default {@code ISO_INSTANT} format as well as {@code RFC_1123_DATE_TIME}, + * (which is commonly used for HTTP date header values), as of Spring 4.3., + * @see java.time.format.DateTimeFormatter#ISO_INSTANT, + * @see java.time.format.DateTimeFormatter#RFC_1123_DATE_TIME, +		if (text.length() > 0 && Character.isDigit(text.charAt(0))) {, +			// assuming UTC instant a la "2007-12-03T10:15:30.00Z", +		else {, +			// assuming RFC-1123 value a la "Tue, 3 Jun 2008 11:05:30 GMT", +			return Instant.from(DateTimeFormatter.RFC_1123_DATE_TIME.parse(text));, +		}, +	}, +++ b/spring-web/src/test/java/org/springframework/web/method/annotation/RequestHeaderMethodArgumentResolverTests.java, +import java.time.Instant;, +import java.time.format.DateTimeFormatter;, +import java.util.Date;, +import org.springframework.format.support.DefaultFormattingConversionService;, +import org.springframework.web.bind.support.ConfigurableWebBindingInitializer;, +import org.springframework.web.bind.support.DefaultDataBinderFactory;, +	private MethodParameter paramDate;, +	private MethodParameter paramInstant;, +		paramDate = new SynthesizingMethodParameter(method, 7);, +		paramInstant = new SynthesizingMethodParameter(method, 8);, +		assertEquals(expected, result);, +		assertArrayEquals(expected, (String[]) result);, +		assertEquals("bar", result);, +			assertEquals(expected, result);, +			assertEquals(expected, result);, +	@Test, +	public void dateConversion() throws Exception {, +		String rfc1123val = "Thu, 21 Apr 2016 17:11:08 +0100";, +		servletRequest.addHeader("name", rfc1123val);, +, +		ConfigurableWebBindingInitializer bindingInitializer = new ConfigurableWebBindingInitializer();, +		bindingInitializer.setConversionService(new DefaultFormattingConversionService());, +		Object result = resolver.resolveArgument(paramDate, null, webRequest,, +				new DefaultDataBinderFactory(bindingInitializer));, +, +		assertTrue(result instanceof Date);, +		assertEquals(new Date(rfc1123val), result);, +	}, +, +	@Test, +	public void instantConversion() throws Exception {, +		String rfc1123val = "Thu, 21 Apr 2016 17:11:08 +0100";, +		servletRequest.addHeader("name", rfc1123val);, +, +		ConfigurableWebBindingInitializer bindingInitializer = new ConfigurableWebBindingInitializer();, +		bindingInitializer.setConversionService(new DefaultFormattingConversionService());, +		Object result = resolver.resolveArgument(paramInstant, null, webRequest,, +				new DefaultDataBinderFactory(bindingInitializer));, +, +		assertTrue(result instanceof Instant);, +		assertEquals(Instant.from(DateTimeFormatter.RFC_1123_DATE_TIME.parse(rfc1123val)), result);, +	}, +, +			@RequestHeader("name") Map<?, ?> unsupported,, +			@RequestHeader("name") Date dateParam,, +			@RequestHeader("name") Instant instantParam) {]