[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/TypedStringValue.java, +	private volatile boolean dynamic;, +, +	/**, +	 * Mark this value as dynamic, i.e. as containing an expression, +	 * and hence not being subject to caching., +	 */, +	public void setDynamic() {, +		this.dynamic = true;, +	}, +, +	/**, +	 * Return whether this value has been marked as dynamic., +	 */, +	public boolean isDynamic() {, +		return this.dynamic;, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/TypedStringValue.java, +	private volatile boolean dynamic;, +, +	/**, +	 * Mark this value as dynamic, i.e. as containing an expression, +	 * and hence not being subject to caching., +	 */, +	public void setDynamic() {, +		this.dynamic = true;, +	}, +, +	/**, +	 * Return whether this value has been marked as dynamic., +	 */, +	public boolean isDynamic() {, +		return this.dynamic;, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +				else if (convertible && originalValue instanceof TypedStringValue &&, +						!((TypedStringValue) originalValue).isDynamic() &&, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/TypedStringValue.java, +	private volatile boolean dynamic;, +, +	/**, +	 * Mark this value as dynamic, i.e. as containing an expression, +	 * and hence not being subject to caching., +	 */, +	public void setDynamic() {, +		this.dynamic = true;, +	}, +, +	/**, +	 * Return whether this value has been marked as dynamic., +	 */, +	public boolean isDynamic() {, +		return this.dynamic;, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +				else if (convertible && originalValue instanceof TypedStringValue &&, +						!((TypedStringValue) originalValue).isDynamic() &&, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionValueResolver.java, +					propKey = evaluate((TypedStringValue) propKey);, +					propValue = evaluate((TypedStringValue) propValue);, +			Object valueObject = evaluate(typedStringValue);, +	protected Object evaluate(TypedStringValue value) {, +		Object result = this.beanFactory.evaluateBeanDefinitionString(value.getValue(), this.beanDefinition);, +		if (result != value.getValue()) {, +			value.setDynamic();, +		}, +		return result;, +	}, +, +	/**, +	 * Evaluate the given value as an expression, if necessary., +	 * @param value the candidate value (may be an expression), +	 * @return the resolved value, +	 */, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/TypedStringValue.java, +	private volatile boolean dynamic;, +, +	/**, +	 * Mark this value as dynamic, i.e. as containing an expression, +	 * and hence not being subject to caching., +	 */, +	public void setDynamic() {, +		this.dynamic = true;, +	}, +, +	/**, +	 * Return whether this value has been marked as dynamic., +	 */, +	public boolean isDynamic() {, +		return this.dynamic;, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +				else if (convertible && originalValue instanceof TypedStringValue &&, +						!((TypedStringValue) originalValue).isDynamic() &&, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionValueResolver.java, +					propKey = evaluate((TypedStringValue) propKey);]