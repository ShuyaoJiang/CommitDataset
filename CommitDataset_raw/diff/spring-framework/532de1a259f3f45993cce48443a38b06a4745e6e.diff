[+++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, + * <strong>Spring's central class for client-side HTTP access.</strong>, + * It simplifies communication with HTTP servers, and enforces RESTful principles., + * It handles HTTP connections, leaving application code to provide URLs, + * (with possible template variables) and extract results., + * HTTP PATCH method. However, note that the underlying HTTP library must also support the desired combination., + * <p>For each of these HTTP methods, there are three corresponding Java methods in the {@code RestTemplate}., + * Two variants take a {@code String} URI as first argument (eg. {@link #getForObject(String, Class, Object[])},, + * {@link #getForObject(String, Class, Map)}), and are capable of substituting any {@linkplain UriTemplate URI templates}, + * in that URL using either a {@code String} variable arguments array, or a {@code Map<String, String>}., + * The string varargs variant expands the given template variables in order, so that, + * will perform a GET on {@code http://example.com/hotels/42/bookings/21}. The map variant expands the template based, + * on variable name, and is therefore more useful when using many variables, or when a single variable is used multiple, + * <p>Objects passed to and returned from these methods are converted to and from HTTP messages by, + * {@link HttpMessageConverter} instances. Converters for the main mime types are registered by default,, + * but you can also write your own converter and register it via the {@link #setMessageConverters messageConverters}, + * bean property., + * <p>This template uses a {@link org.springframework.http.client.SimpleClientHttpRequestFactory} and a, + * {@link DefaultResponseErrorHandler} as default strategies for creating HTTP connections or handling HTTP errors,, +	private static boolean romePresent =, +			ClassUtils.isPresent("com.sun.syndication.feed.WireFeed", RestTemplate.class.getClassLoader());, +, +	 * @see org.springframework.http.client.HttpComponentsClientHttpRequestFactory, +	 * Set the message body converters to use., +	 * <p>These converters are used to convert from and to HTTP requests and responses., +	/**, +	 * Return the message body converters., +	 */, +	/**, +	 * Set the error handler., +	 * <p>By default, RestTemplate uses a {@link DefaultResponseErrorHandler}., +	 */, +	/**, +	 * Return the error handler., +	 */, +, +	public <T> ResponseEntity<T> postForEntity(String url, Object request, Class<T> responseType, Map<String, ?> uriVariables), +, +++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, + * <strong>Spring's central class for client-side HTTP access.</strong>, + * It simplifies communication with HTTP servers, and enforces RESTful principles., + * It handles HTTP connections, leaving application code to provide URLs, + * (with possible template variables) and extract results., + * HTTP PATCH method. However, note that the underlying HTTP library must also support the desired combination., + * <p>For each of these HTTP methods, there are three corresponding Java methods in the {@code RestTemplate}., + * Two variants take a {@code String} URI as first argument (eg. {@link #getForObject(String, Class, Object[])},, + * {@link #getForObject(String, Class, Map)}), and are capable of substituting any {@linkplain UriTemplate URI templates}, + * in that URL using either a {@code String} variable arguments array, or a {@code Map<String, String>}., + * The string varargs variant expands the given template variables in order, so that, + * will perform a GET on {@code http://example.com/hotels/42/bookings/21}. The map variant expands the template based, + * on variable name, and is therefore more useful when using many variables, or when a single variable is used multiple, + * <p>Objects passed to and returned from these methods are converted to and from HTTP messages by, + * {@link HttpMessageConverter} instances. Converters for the main mime types are registered by default,, + * but you can also write your own converter and register it via the {@link #setMessageConverters messageConverters}, + * bean property., + * <p>This template uses a {@link org.springframework.http.client.SimpleClientHttpRequestFactory} and a, + * {@link DefaultResponseErrorHandler} as default strategies for creating HTTP connections or handling HTTP errors,, +	private static boolean romePresent =, +			ClassUtils.isPresent("com.sun.syndication.feed.WireFeed", RestTemplate.class.getClassLoader());, +, +	 * @see org.springframework.http.client.HttpComponentsClientHttpRequestFactory, +	 * Set the message body converters to use., +	 * <p>These converters are used to convert from and to HTTP requests and responses., +	/**, +	 * Return the message body converters., +	 */, +	/**, +	 * Set the error handler., +	 * <p>By default, RestTemplate uses a {@link DefaultResponseErrorHandler}., +	 */, +	/**, +	 * Return the error handler., +	 */, +, +	public <T> ResponseEntity<T> postForEntity(String url, Object request, Class<T> responseType, Map<String, ?> uriVariables), +, +++ b/spring-web/src/main/java/org/springframework/web/util/UriTemplate.java, +, +						throw new IllegalArgumentException(, +								"No custom regular expression specified after ':' in \"" + match + "\"");]