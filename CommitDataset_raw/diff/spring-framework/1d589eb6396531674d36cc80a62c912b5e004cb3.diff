[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, +	 * Return a {@code RequestPredicate} that tests the request path against the given path pattern., +	 * Return a {@code RequestPredicate} that tests the beginning of the request path against the, +	 * given path pattern. This predicate is effectively identical to a, +	 * {@linkplain #path(String) standard path predicate} with path {@code pathPrefixPattern + "/**"}., +	 * @param pathPrefixPattern the pattern to match against the start of the request path, +	 * @return a predicate that matches if the given predicate matches against the beginning of, +	 * the request's path, +	 */, +	public static RequestPredicate pathPrefix(String pathPrefixPattern) {, +		Assert.notNull(pathPrefixPattern, "'pathPrefixPattern' must not be null");, +, +		if (!pathPrefixPattern.endsWith("/**")) {, +			pathPrefixPattern += "/**";, +		}, +		return path(pathPrefixPattern);, +	}, +, +	/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, +	 * Return a {@code RequestPredicate} that tests the request path against the given path pattern., +	 * Return a {@code RequestPredicate} that tests the beginning of the request path against the, +	 * given path pattern. This predicate is effectively identical to a, +	 * {@linkplain #path(String) standard path predicate} with path {@code pathPrefixPattern + "/**"}., +	 * @param pathPrefixPattern the pattern to match against the start of the request path, +	 * @return a predicate that matches if the given predicate matches against the beginning of, +	 * the request's path, +	 */, +	public static RequestPredicate pathPrefix(String pathPrefixPattern) {, +		Assert.notNull(pathPrefixPattern, "'pathPrefixPattern' must not be null");, +, +		if (!pathPrefixPattern.endsWith("/**")) {, +			pathPrefixPattern += "/**";, +		}, +		return path(pathPrefixPattern);, +	}, +, +	/**, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/server/RequestPredicatesTests.java, +	}, +	@Test, +	public void pathPrefix() throws Exception {, +		RequestPredicate predicate = RequestPredicates.pathPrefix("/foo");, +, +		URI uri = URI.create("http://localhost/foo/bar");, +		MockServerRequest request = MockServerRequest.builder().uri(uri).build();, +		assertTrue(predicate.test(request));, +, +		uri = URI.create("http://localhost/foo");, +		request = MockServerRequest.builder().uri(uri).build();, +		assertTrue(predicate.test(request));, +, +		uri = URI.create("http://localhost/bar");, +		request = MockServerRequest.builder().uri(uri).build();, +		assertFalse(predicate.test(request));]