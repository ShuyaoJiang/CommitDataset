[+++ b/spring-test/src/main/java/org/springframework/test/AssertThrows.java, +import org.springframework.util.Assert;, +, + * <p>If the <strong>wrong</strong> type of {@code Throwable} was thrown,, + * <p>The test for the correct {@code Throwable} respects polymorphism,, +	private final Class<? extends Throwable> expectedException;, +	private Throwable actualException;, +	 * @param expectedException the {@link Throwable} expected to be, +	 * {@code null}; or if said argument is not a {@code Throwable}-derived class, +	public AssertThrows(Class<? extends Throwable> expectedException) {, +	 * @param expectedException the {@link Throwable} expected to be, +	 * {@code null}; or if said argument is not a {@code Throwable}-derived class, +	public AssertThrows(Class<? extends Throwable> expectedException, String failureMessage) {, +		Assert.notNull(expectedException, "expectedException is required");, +		Assert.isAssignable(Throwable.class, expectedException, "expectedException: ");, +	 * Return the {@link java.lang.Throwable} expected to be thrown during, +	protected Class<? extends Throwable> getExpectedException() {, +	 * @throws Throwable if an error occurs during the execution of the, +	public abstract void test() throws Throwable;, +	 * {@linkplain #checkExceptionExpectations(Throwable) checking} of the, +	 * resulting (expected) {@link java.lang.Throwable}., +	 * @see #checkExceptionExpectations(Throwable), +		catch (Throwable actualException) {, +	 * {@link java.lang.Throwable} is <b>not</b> thrown., +	 * {@link Throwable} that was thrown in the body of the test is, +	 * {@link #createMessageForWrongThrownExceptionType(Throwable)}., +	 * @param actualException the {@link Throwable} that has been thrown, +	protected void checkExceptionExpectations(Throwable actualException) {, +			AssertionError error = new AssertionError(createMessageForWrongThrownExceptionType(actualException));, +	 * of {@link java.lang.Throwable} is thrown in the body of the test., +	protected String createMessageForWrongThrownExceptionType(Throwable actualException) {, +	public final Throwable getActualException() {]