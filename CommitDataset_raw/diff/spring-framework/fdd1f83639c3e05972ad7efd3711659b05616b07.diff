[+++ b/spring-context/src/main/java/org/springframework/cache/annotation/AbstractCachingConfiguration.java, + * Copyright 2002-2015 the original author or authors., + * Abstract base {@code @Configuration} class providing common structure, + * for enabling Spring's annotation-driven cache management capability., +, +		if (this.enableCaching == null) {, +			throw new IllegalArgumentException(, +					"@EnableCaching is not present on importing class " + importMetadata.getClassName());, +		}, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/AbstractCachingConfiguration.java, + * Copyright 2002-2015 the original author or authors., + * Abstract base {@code @Configuration} class providing common structure, + * for enabling Spring's annotation-driven cache management capability., +, +		if (this.enableCaching == null) {, +			throw new IllegalArgumentException(, +					"@EnableCaching is not present on importing class " + importMetadata.getClassName());, +		}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/MBeanExportConfiguration.java, + * Copyright 2002-2015 the original author or authors., +	private AnnotationAttributes enableMBeanExport;, +		this.enableMBeanExport = AnnotationAttributes.fromMap(map);, +		if (this.enableMBeanExport == null) {, +		String defaultDomain = this.enableMBeanExport.getString("defaultDomain");, +		String server = this.enableMBeanExport.getString("server");, +		RegistrationPolicy registrationPolicy = this.enableMBeanExport.getEnum("registration");, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/AbstractCachingConfiguration.java, + * Copyright 2002-2015 the original author or authors., + * Abstract base {@code @Configuration} class providing common structure, + * for enabling Spring's annotation-driven cache management capability., +, +		if (this.enableCaching == null) {, +			throw new IllegalArgumentException(, +					"@EnableCaching is not present on importing class " + importMetadata.getClassName());, +		}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/MBeanExportConfiguration.java, + * Copyright 2002-2015 the original author or authors., +	private AnnotationAttributes enableMBeanExport;, +		this.enableMBeanExport = AnnotationAttributes.fromMap(map);, +		if (this.enableMBeanExport == null) {, +		String defaultDomain = this.enableMBeanExport.getString("defaultDomain");, +		String server = this.enableMBeanExport.getString("server");, +		RegistrationPolicy registrationPolicy = this.enableMBeanExport.getEnum("registration");, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/AbstractAsyncConfiguration.java, +		if (this.enableAsync == null) {, +			throw new IllegalArgumentException(, +	}, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/AbstractCachingConfiguration.java, + * Copyright 2002-2015 the original author or authors., + * Abstract base {@code @Configuration} class providing common structure, + * for enabling Spring's annotation-driven cache management capability., +, +		if (this.enableCaching == null) {, +			throw new IllegalArgumentException(, +					"@EnableCaching is not present on importing class " + importMetadata.getClassName());, +		}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/MBeanExportConfiguration.java, + * Copyright 2002-2015 the original author or authors., +	private AnnotationAttributes enableMBeanExport;, +		this.enableMBeanExport = AnnotationAttributes.fromMap(map);, +		if (this.enableMBeanExport == null) {, +		String defaultDomain = this.enableMBeanExport.getString("defaultDomain");, +		String server = this.enableMBeanExport.getString("server");, +		RegistrationPolicy registrationPolicy = this.enableMBeanExport.getEnum("registration");, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/AbstractAsyncConfiguration.java, +		if (this.enableAsync == null) {, +			throw new IllegalArgumentException(, +	}, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/AbstractMessageListenerContainer.java, + * <p>Note that the "sessionTransacted" flag is strongly recommended over, + * {@link org.springframework.jms.connection.JmsTransactionManager}, provided, + * that transactions do not need to be managed externally. As a consequence,, + * set the transaction manager only if you are using JTA or if you need to, + * synchronize with custom external transaction arrangements., +++ b/spring-context/src/main/java/org/springframework/cache/annotation/AbstractCachingConfiguration.java, + * Copyright 2002-2015 the original author or authors., + * Abstract base {@code @Configuration} class providing common structure, + * for enabling Spring's annotation-driven cache management capability., +, +		if (this.enableCaching == null) {, +			throw new IllegalArgumentException(, +					"@EnableCaching is not present on importing class " + importMetadata.getClassName());, +		}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/MBeanExportConfiguration.java, + * Copyright 2002-2015 the original author or authors., +	private AnnotationAttributes enableMBeanExport;, +		this.enableMBeanExport = AnnotationAttributes.fromMap(map);, +		if (this.enableMBeanExport == null) {, +		String defaultDomain = this.enableMBeanExport.getString("defaultDomain");, +		String server = this.enableMBeanExport.getString("server");, +		RegistrationPolicy registrationPolicy = this.enableMBeanExport.getEnum("registration");, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/AbstractAsyncConfiguration.java, +		if (this.enableAsync == null) {, +			throw new IllegalArgumentException(, +	}, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/AbstractMessageListenerContainer.java, + * <p>Note that the "sessionTransacted" flag is strongly recommended over, + * {@link org.springframework.jms.connection.JmsTransactionManager}, provided, + * that transactions do not need to be managed externally. As a consequence,, + * set the transaction manager only if you are using JTA or if you need to]