[+++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpRequest.java, +import java.nio.charset.Charset;, +import java.nio.charset.StandardCharsets;, +import java.util.Optional;, +import org.springframework.core.io.buffer.DataBufferUtils;, +import org.springframework.util.MimeType;, +	 * Aggregate response data and convert to a String using the "Content-Type", +	 * charset or "UTF-8" by default., +	 */, +	public Mono<String> getBodyAsString() {, +, +		Charset charset = Optional.ofNullable(getHeaders().getContentType()).map(MimeType::getCharset), +				.orElse(StandardCharsets.UTF_8);, +, +		return getBody(), +				.reduce(bufferFactory().allocateBuffer(), (previous, current) -> {, +					previous.write(current);, +					DataBufferUtils.release(current);, +					return previous;, +				}), +				.map(buffer -> bufferToString(buffer, charset));, +	}, +, +	private static String bufferToString(DataBuffer buffer, Charset charset) {, +		Assert.notNull(charset, "'charset' must not be null");, +		byte[] bytes = new byte[buffer.readableByteCount()];, +		buffer.read(bytes);, +		return new String(bytes, charset);, +	}, +, +	/**, +	 *, +	 *, +++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpRequest.java, +import java.nio.charset.Charset;, +import java.nio.charset.StandardCharsets;, +import java.util.Optional;, +import org.springframework.core.io.buffer.DataBufferUtils;, +import org.springframework.util.MimeType;, +	 * Aggregate response data and convert to a String using the "Content-Type", +	 * charset or "UTF-8" by default., +	 */, +	public Mono<String> getBodyAsString() {, +, +		Charset charset = Optional.ofNullable(getHeaders().getContentType()).map(MimeType::getCharset), +				.orElse(StandardCharsets.UTF_8);, +, +		return getBody(), +				.reduce(bufferFactory().allocateBuffer(), (previous, current) -> {, +					previous.write(current);, +					DataBufferUtils.release(current);, +					return previous;, +				}), +				.map(buffer -> bufferToString(buffer, charset));, +	}, +, +	private static String bufferToString(DataBuffer buffer, Charset charset) {, +		Assert.notNull(charset, "'charset' must not be null");, +		byte[] bytes = new byte[buffer.readableByteCount()];, +		buffer.read(bytes);, +		return new String(bytes, charset);, +	}, +, +	/**, +	 *, +	 *, +++ b/spring-web/src/test/java/org/springframework/mock/http/client/reactive/test/MockClientHttpRequest.java, + * Copyright 2002-2018 the original author or authors., +import java.nio.charset.Charset;, +import java.nio.charset.StandardCharsets;, +import java.util.Optional;, +import org.springframework.core.io.buffer.DataBufferUtils;, +import org.springframework.util.MimeType;, + *, +	 * Aggregate response data and convert to a String using the "Content-Type", +	 * charset or "UTF-8" by default., +	 */, +	public Mono<String> getBodyAsString() {, +, +		Charset charset = Optional.ofNullable(getHeaders().getContentType()).map(MimeType::getCharset), +				.orElse(StandardCharsets.UTF_8);, +, +		return getBody(), +				.reduce(bufferFactory().allocateBuffer(), (previous, current) -> {, +					previous.write(current);, +					DataBufferUtils.release(current);, +					return previous;, +				}), +				.map(buffer -> bufferToString(buffer, charset));, +	}, +, +	private static String bufferToString(DataBuffer buffer, Charset charset) {, +		Assert.notNull(charset, "'charset' must not be null");, +		byte[] bytes = new byte[buffer.readableByteCount()];, +		buffer.read(bytes);, +		return new String(bytes, charset);, +	}, +, +	/**]