[+++ b/org.springframework.core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, +import static org.springframework.util.StringUtils.commaDelimitedListToStringArray;, +				setActiveProfiles(commaDelimitedListToStringArray(trimAllWhitespace(profiles)));, +			String profiles = this.propertyResolver.getProperty(DEFAULT_PROFILES_PROPERTY_NAME);, +			if (StringUtils.hasText(profiles)) {, +				this.setDefaultProfiles(commaDelimitedListToStringArray(trimAllWhitespace(profiles)));, +		for (String profile : profiles) {, +			this.validateProfile(profile);, +			this.defaultProfiles.add(profile);, +		}, +			this.validateProfile(profile);, +	/**, +	 * Validate the given profile, called internally prior to adding to the set of, +	 * active or default profiles., +	 * <p>Subclasses may override to impose further restrictions on profile syntax., +	 * @throws IllegalArgumentException if the profile is null, empty or whitespace-only, +	 * @see #acceptsProfiles, +	 * @see #setDefaultProfiles, +	 */, +	protected void validateProfile(String profile) {, +		Assert.hasText(profile, "Invalid profile [" + profile + "]: must contain text");, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, +import static org.springframework.util.StringUtils.commaDelimitedListToStringArray;, +				setActiveProfiles(commaDelimitedListToStringArray(trimAllWhitespace(profiles)));, +			String profiles = this.propertyResolver.getProperty(DEFAULT_PROFILES_PROPERTY_NAME);, +			if (StringUtils.hasText(profiles)) {, +				this.setDefaultProfiles(commaDelimitedListToStringArray(trimAllWhitespace(profiles)));, +		for (String profile : profiles) {, +			this.validateProfile(profile);, +			this.defaultProfiles.add(profile);, +		}, +			this.validateProfile(profile);, +	/**, +	 * Validate the given profile, called internally prior to adding to the set of, +	 * active or default profiles., +	 * <p>Subclasses may override to impose further restrictions on profile syntax., +	 * @throws IllegalArgumentException if the profile is null, empty or whitespace-only, +	 * @see #acceptsProfiles, +	 * @see #setDefaultProfiles, +	 */, +	protected void validateProfile(String profile) {, +		Assert.hasText(profile, "Invalid profile [" + profile + "]: must contain text");, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/ConfigurableEnvironment.java, +	 * <p>Any existing active profiles will be replaced with the given arguments; call, +	 * with zero arguments to clear the current set of active profiles., +	 * @throws IllegalArgumentException if any profile is null, empty or whitespace-only, +	 * @throws IllegalArgumentException if any profile is null, empty or whitespace-only, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, +import static org.springframework.util.StringUtils.commaDelimitedListToStringArray;, +				setActiveProfiles(commaDelimitedListToStringArray(trimAllWhitespace(profiles)));, +			String profiles = this.propertyResolver.getProperty(DEFAULT_PROFILES_PROPERTY_NAME);, +			if (StringUtils.hasText(profiles)) {, +				this.setDefaultProfiles(commaDelimitedListToStringArray(trimAllWhitespace(profiles)));, +		for (String profile : profiles) {, +			this.validateProfile(profile);, +			this.defaultProfiles.add(profile);, +		}, +			this.validateProfile(profile);, +	/**, +	 * Validate the given profile, called internally prior to adding to the set of, +	 * active or default profiles., +	 * <p>Subclasses may override to impose further restrictions on profile syntax., +	 * @throws IllegalArgumentException if the profile is null, empty or whitespace-only, +	 * @see #acceptsProfiles, +	 * @see #setDefaultProfiles, +	 */, +	protected void validateProfile(String profile) {, +		Assert.hasText(profile, "Invalid profile [" + profile + "]: must contain text");, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/ConfigurableEnvironment.java, +	 * <p>Any existing active profiles will be replaced with the given arguments; call, +	 * with zero arguments to clear the current set of active profiles., +	 * @throws IllegalArgumentException if any profile is null, empty or whitespace-only, +	 * @throws IllegalArgumentException if any profile is null, empty or whitespace-only, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/Environment.java, +	 * Return whether one or more of the given profiles is active or, in the case of no, +	 * @throws IllegalArgumentException if called with zero arguments, +	 * @throws IllegalArgumentException if any profile is null, empty or whitespace-only, +++ b/org.springframework.core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, +import static org.springframework.util.StringUtils.commaDelimitedListToStringArray;, +				setActiveProfiles(commaDelimitedListToStringArray(trimAllWhitespace(profiles)));, +			String profiles = this.propertyResolver.getProperty(DEFAULT_PROFILES_PROPERTY_NAME);, +			if (StringUtils.hasText(profiles)) {, +				this.setDefaultProfiles(commaDelimitedListToStringArray(trimAllWhitespace(profiles)));, +		for (String profile : profiles) {, +			this.validateProfile(profile);, +			this.defaultProfiles.add(profile);, +		}, +			this.validateProfile(profile);, +	/**, +	 * Validate the given profile, called internally prior to adding to the set of, +	 * active or default profiles., +	 * <p>Subclasses may override to impose further restrictions on profile syntax., +	 * @throws IllegalArgumentException if the profile is null, empty or whitespace-only, +	 * @see #acceptsProfiles]