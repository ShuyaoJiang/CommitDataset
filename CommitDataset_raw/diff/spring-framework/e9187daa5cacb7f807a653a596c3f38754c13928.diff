[+++ b/src/docs/asciidoc/web/webflux.adoc, +[[webflux-special-beans-table]], +[cols="1,2", options="header"], +  The main `HandlerMapping` implementations are `RequestMappingHandlerMapping` based on, +  `@RequestMapping` annotated methods, `RouterFunctionMapping` based on functional, +  endpoint routes, and `SimpleUrlHandlerMapping` based on explicit registrations of URI, +  path patterns to handlers., +, +| Help the `DispatcherHandler` to invoke a handler mapped to a request regardless of, +  requires resolving annotations. The main purpose of a `HandlerAdapter` is to shield the, +  `DispatcherHandler` from such details., +| Process the result from the handler invocation and finalize the response., +, +  The built-in `HandlerResultHandler` implementations are `ResponseEntityResultHandler`, +  supporting `ResponseEntity` return values, `ResponseBodyResultHandler`, +  supporting `@ResponseBody` methods, `ServerResponseResultHandler`, +  supporting the `ServerResponse` returned from functional endpoints, and, +  `ViewResolutionResultHandler` supporting rendering with a view and a model., +, +[[webflux-framework-config]], +=== Framework Config, +[.small]#<<web.adoc#mvc-servlet-config,Same in Spring MVC>>#, +, +The `DispatcherHandler` detects the special beans it needs in the `ApplicationContext`., +Applications can declare the special beans they wish to have. However most applications, +will find a better starting point in the WebFlux Java config which provide a higher level, +configuration API that in turn make the necessary bean declarations., +See <<webflux-config>> for more details., +, +, +, +=== Processing, +=== Request Mapping, +++ b/src/docs/asciidoc/web/webflux.adoc, +[[webflux-special-beans-table]], +[cols="1,2", options="header"], +  The main `HandlerMapping` implementations are `RequestMappingHandlerMapping` based on, +  `@RequestMapping` annotated methods, `RouterFunctionMapping` based on functional, +  endpoint routes, and `SimpleUrlHandlerMapping` based on explicit registrations of URI, +  path patterns to handlers., +, +| Help the `DispatcherHandler` to invoke a handler mapped to a request regardless of, +  requires resolving annotations. The main purpose of a `HandlerAdapter` is to shield the, +  `DispatcherHandler` from such details., +| Process the result from the handler invocation and finalize the response., +, +  The built-in `HandlerResultHandler` implementations are `ResponseEntityResultHandler`, +  supporting `ResponseEntity` return values, `ResponseBodyResultHandler`, +  supporting `@ResponseBody` methods, `ServerResponseResultHandler`, +  supporting the `ServerResponse` returned from functional endpoints, and, +  `ViewResolutionResultHandler` supporting rendering with a view and a model., +, +[[webflux-framework-config]], +=== Framework Config, +[.small]#<<web.adoc#mvc-servlet-config,Same in Spring MVC>>#, +, +The `DispatcherHandler` detects the special beans it needs in the `ApplicationContext`., +Applications can declare the special beans they wish to have. However most applications, +will find a better starting point in the WebFlux Java config which provide a higher level, +configuration API that in turn make the necessary bean declarations., +See <<webflux-config>> for more details., +, +, +, +=== Processing, +=== Request Mapping, +++ b/src/docs/asciidoc/web/webmvc.adoc, +  The two main `HandlerMapping` implementations are `RequestMappingHandlerMapping` which, +| Help the `DispatcherServlet` to invoke a handler mapped to a request regardless of, +  requires resolving annotations. The main purpose of a `HandlerAdapter` is, +| Resolve logical String-based view names returned from a handler to an actual `View`, +| Resolve the `Locale` a client is using and possibly their time zone, in order to be able, +| Resolve themes your web application can use, for example, to offer personalized layouts., +| Store and retrieve the "input" and the "output" `FlashMap` that can be used to pass, +[.small]#<<web-reactive.adoc#webflux-framework-config,Same in Spring WebFlux>>#, +]