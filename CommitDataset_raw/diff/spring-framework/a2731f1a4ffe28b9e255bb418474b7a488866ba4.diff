[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +							this.deferredImportSelectors.add(, +									new DeferredImportSelectorHolder(configClass, (DeferredImportSelector) selector));, +						// Candidate class is an ImportBeanDefinitionRegistrar ->, +						// delegate to it to register additional bean definitions, +						ImportBeanDefinitionRegistrar registrar =, +								BeanUtils.instantiateClass(candidateClass, ImportBeanDefinitionRegistrar.class);, +						// Candidate class not an ImportSelector or ImportBeanDefinitionRegistrar ->, +						// process it as a @Configuration class, +						this.importStack.registerImport(, +								currentSourceClass.getMetadata(), candidate.getMetadata().getClassName());, +	 * Simple wrapper that allows annotated source classes to be dealt with, +	 * in a uniform manner, regardless of how they are loaded., +		private final Object source;  // Class or MetadataReader, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +							this.deferredImportSelectors.add(, +									new DeferredImportSelectorHolder(configClass, (DeferredImportSelector) selector));, +						// Candidate class is an ImportBeanDefinitionRegistrar ->, +						// delegate to it to register additional bean definitions, +						ImportBeanDefinitionRegistrar registrar =, +								BeanUtils.instantiateClass(candidateClass, ImportBeanDefinitionRegistrar.class);, +						// Candidate class not an ImportSelector or ImportBeanDefinitionRegistrar ->, +						// process it as a @Configuration class, +						this.importStack.registerImport(, +								currentSourceClass.getMetadata(), candidate.getMetadata().getClassName());, +	 * Simple wrapper that allows annotated source classes to be dealt with, +	 * in a uniform manner, regardless of how they are loaded., +		private final Object source;  // Class or MetadataReader, +++ b/spring-context/src/test/java/org/springframework/context/annotation/spr12334/Spr12334Tests.java, +		TestImport.scanned = false;, +, +		private static boolean scanned = false;, +			if (scanned) {, +			scanned = true;]