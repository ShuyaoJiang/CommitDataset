[+++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/AbstractAdaptableMessageListener.java, +	 * @throws MessageConversionException if the message could not be unmarshaled, +	protected Object extractMessage(Message message)  {, +		try {, +		catch (JMSException e) {, +			throw new MessageConversionException("Could not unmarshal message", e);, +		}, +	}, +	 * @throws ReplyFailureException if the response message could not be sent, +	protected void handleResult(Object result, Message request, Session session) {, +			try {, +			catch (Exception e) {, +				throw new ReplyFailureException("Failed to send reply with payload '" + result + "'", e);, +			}, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/AbstractAdaptableMessageListener.java, +	 * @throws MessageConversionException if the message could not be unmarshaled, +	protected Object extractMessage(Message message)  {, +		try {, +		catch (JMSException e) {, +			throw new MessageConversionException("Could not unmarshal message", e);, +		}, +	}, +	 * @throws ReplyFailureException if the response message could not be sent, +	protected void handleResult(Object result, Message request, Session session) {, +			try {, +			catch (Exception e) {, +				throw new ReplyFailureException("Failed to send reply with payload '" + result + "'", e);, +			}, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/MessagingMessageListenerAdapter.java, +		Object result = invokeHandler(jmsMessage, session, message);, +, +	@SuppressWarnings("unchecked"), +	protected Message<?> toMessagingMessage(javax.jms.Message jmsMessage) {, +		Map<String, Object> mappedHeaders = getHeaderMapper().toHeaders(jmsMessage);, +		Object convertedObject = extractMessage(jmsMessage);, +		MessageBuilder<Object> builder = (convertedObject instanceof org.springframework.messaging.Message) ?, +				MessageBuilder.fromMessage((org.springframework.messaging.Message<Object>) convertedObject) :, +				MessageBuilder.withPayload(convertedObject);, +		return builder.copyHeadersIfAbsent(mappedHeaders).build();, +	}, +, +	/**, +	 * Invoke the handler, wrapping any exception to a {@link ListenerExecutionFailedException} with, +	 * a dedicated error message., +	 */, +	private Object invokeHandler(javax.jms.Message jmsMessage, Session session, Message<?> message) {, +		try {, +			return handlerMethod.invoke(message, jmsMessage, session);, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/AbstractAdaptableMessageListener.java, +	 * @throws MessageConversionException if the message could not be unmarshaled, +	protected Object extractMessage(Message message)  {, +		try {, +		catch (JMSException e) {, +			throw new MessageConversionException("Could not unmarshal message", e);, +		}, +	}, +	 * @throws ReplyFailureException if the response message could not be sent, +	protected void handleResult(Object result, Message request, Session session) {, +			try {, +			catch (Exception e) {, +				throw new ReplyFailureException("Failed to send reply with payload '" + result + "'", e);, +			}, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/MessagingMessageListenerAdapter.java, +		Object result = invokeHandler(jmsMessage, session, message);, +, +	@SuppressWarnings("unchecked"), +	protected Message<?> toMessagingMessage(javax.jms.Message jmsMessage) {, +		Map<String, Object> mappedHeaders = getHeaderMapper().toHeaders(jmsMessage);, +		Object convertedObject = extractMessage(jmsMessage);, +		MessageBuilder<Object> builder = (convertedObject instanceof org.springframework.messaging.Message) ?, +				MessageBuilder.fromMessage((org.springframework.messaging.Message<Object>) convertedObject) :, +				MessageBuilder.withPayload(convertedObject);, +		return builder.copyHeadersIfAbsent(mappedHeaders).build();, +	}, +, +	/**, +	 * Invoke the handler, wrapping any exception to a {@link ListenerExecutionFailedException} with, +	 * a dedicated error message., +	 */, +	private Object invokeHandler(javax.jms.Message jmsMessage, Session session, Message<?> message) {, +		try {, +			return handlerMethod.invoke(message, jmsMessage, session);, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/ReplyFailureException.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.]