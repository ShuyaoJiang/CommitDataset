[+++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java, +import junit.framework.Assert;, +, +	@SuppressWarnings("unchecked"), +	public void testUnmodifiableListConversion() {, +		List<String> stringList = new ArrayList<String>();, +		stringList.add("foo");, +		stringList.add("bar");, +, +		List<String> frozenList = Collections.unmodifiableList(stringList);, +		, +		List<String> converted = conversionService.convert(frozenList, List.class);, +, +		// The converted list should contain all the elements in the original list, +		Assert.assertEquals(frozenList, converted);, +		Assert.assertNotSame(frozenList, converted);, +	}, +, +	@Test, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java, +import junit.framework.Assert;, +, +	@SuppressWarnings("unchecked"), +	public void testUnmodifiableListConversion() {, +		List<String> stringList = new ArrayList<String>();, +		stringList.add("foo");, +		stringList.add("bar");, +, +		List<String> frozenList = Collections.unmodifiableList(stringList);, +		, +		List<String> converted = conversionService.convert(frozenList, List.class);, +, +		// The converted list should contain all the elements in the original list, +		Assert.assertEquals(frozenList, converted);, +		Assert.assertNotSame(frozenList, converted);, +	}, +, +	@Test, +++ b/spring-framework-reference/src/validation.xml, +			The system defines an SPI to implement type conversion logic, as well as an API to execute type conversions at runtime., +			Within a Spring container, this system can be used as an alternative to PropertyEditors to convert externalized bean property value strings to required property types., +			<title>Converter SPI</title>, +				The SPI to implement type conversion logic is simple and strongly typed:, +package org.springframework.core.convert.converter;, +				Several converter implementations are provided in the <filename>core.convert.support</filename> package as a convenience., +			<programlisting language="java">, +package org.springframework.core.convert.support;, +final class StringToInteger implements Converter&lt;String, Integer&gt; {, +				When you need to centralize the conversion logic for an entire class hierarchy, for example, when converting from String to java.lang.Enum objects, implement <interfacename>ConverterFactory</interfacename>:, +package org.springframework.core.convert.converter;, +package org.springframework.core.convert.support;, +, +final class StringToEnumConverterFactory implements ConverterFactory<String, Enum> {, +        return new StringToEnumConverter(targetType);, +    private final class StringToEnumConverter<T extends Enum> implements Converter<String, T> {, +        public StringToEnumConverter(Class<T> enumType) {, +		<section id="core-convert-GenericConverter-SPI">, +			<title>GenericConverter</title>, +			<para>, +				When you require a sophisticated Converter implementation, consider the GenericConverter interface., +				With a more flexible but less strongly typed signature, a GenericConverter supports converting between multiple source and target types., +				In addition, a GenericConverter makes available source and target field context you can use when implementing your conversion logic., +				Such context allows a type conversion to be driven by a field annotation, or generic information declared on a field signature., +			</para>, +			<programlisting language="java"><![CDATA[, +package org.springframework.core.convert.converter;, +, +public interface GenericConverter {, +, +    public Class<?>[][] getConvertibleTypes();, +, +    Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType);, +, +}]]>, +			</programlisting>, +			<para>, +				To implement a GenericConverter, have getConvertibleTypes() return the supported source-&gt;target type pairs., +				Then implement convert(Object, TypeDescriptor, TypeDescriptor) to implement your conversion logic., +				The source TypeDescriptor provides access to the source field holding the value being converted., +				The target TypeDescriptor provides access to the target field where the converted value will be set., +			</para>, +			<para>, +				A good example of a GenericConverter is a converter that converts between a Java Array and a Collection., +				Such an ArrayToCollectionConverter introspects the field that declares the target Collection type to resolve the Collection's element type., +				This allows each element in the source array to be converted to the Collection element type before the Collection is set on the target field. , +			</para>, +			<note>, +				<para>, +					Because GenericConverter is a more complex SPI interface, only use it when you need it., +					Favor Converter or ConverterFactory for basic type conversion needs., +				</para>, +			</note>, +			<section id="core-convert-ConditionalGenericConverter-SPI">, +				<title>ConditionalGenericConverter</title>, +				<para>, +					Sometimes you only want a Converter to execute if a specific condition holds true., +					For example, you might only want to execute a Converter if a specific annotation is present on the target field., +					Or you might only want to execute a Converter if a specific method, such as static valueOf method, is defined on the target class., +					ConditionalGenericConverter is an subinterface of GenericConverter that allows you to define such custom matching criteria:		, +				</para>]