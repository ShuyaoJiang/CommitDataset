[+++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpRequest.java, +	 * The given URI may contain query parameters, or those may be added later via, +	 * {@link BaseBuilder#queryParam queryParam} builder methods., +	 * Create an HTTP GET builder with the given URI template. The given URI may, +	 * contain query parameters, or those may be added later via, +	 * {@link BaseBuilder#queryParam queryParam} builder methods., +	 * HTTP HEAD variant. See {@link #get(String, Object...)} for general info., +	 * HTTP POST variant. See {@link #get(String, Object...)} for general info., +	 * HTTP PUT variant. See {@link #get(String, Object...)} for general info., +	 * {@link BaseBuilder#queryParam queryParam} builder methods., +	 * HTTP PATCH variant. See {@link #get(String, Object...)} for general info., +	 * HTTP DELETE variant. See {@link #get(String, Object...)} for general info., +	 * HTTP OPTIONS variant. See {@link #get(String, Object...)} for general info., +		 * Append the given query parameter to the existing query parameters., +		 * If no values are given, the resulting URI will contain the query, +		 * parameter name only (i.e. {@code ?foo} instead of {@code ?foo=bar})., +		 * <p>The provided query name and values will be encoded., +		 * @param name the query parameter name, +		 * @param values the query parameter values, +		 * @return this UriComponentsBuilder, +		 */, +		B queryParam(String name, Object... values);, +, +		/**, +		 * Add the given query parameters and values. The provided query name, +		 * and corresponding values will be encoded., +		 * @param params the params, +		 * @return this UriComponentsBuilder, +		 */, +		B queryParams(MultiValueMap<String, String> params);, +, +		/**, +		private final UriComponentsBuilder queryParamsBuilder = UriComponentsBuilder.newInstance();, +, +		public BodyBuilder queryParam(String name, Object... values) {, +			this.queryParamsBuilder.queryParam(name, values);, +			return this;, +		}, +, +		@Override, +		public BodyBuilder queryParams(MultiValueMap<String, String> params) {, +			this.queryParamsBuilder.queryParams(params);, +			return this;, +		}, +, +		@Override, +			return new MockServerHttpRequest(this.method, getUrlToUse(), this.contextPath,, +, +		private URI getUrlToUse() {, +			MultiValueMap<String, String> params =, +					this.queryParamsBuilder.buildAndExpand().encode().getQueryParams();, +, +			if (!params.isEmpty()) {, +				return UriComponentsBuilder.fromUri(this.url).queryParams(params).build(true).toUri();, +			}, +, +			return this.url;, +		}, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpRequest.java, +	 * The given URI may contain query parameters, or those may be added later via, +	 * {@link BaseBuilder#queryParam queryParam} builder methods., +	 * Create an HTTP GET builder with the given URI template. The given URI may, +	 * contain query parameters, or those may be added later via, +	 * {@link BaseBuilder#queryParam queryParam} builder methods., +	 * HTTP HEAD variant. See {@link #get(String, Object...)} for general info., +	 * HTTP POST variant. See {@link #get(String, Object...)} for general info., +	 * HTTP PUT variant. See {@link #get(String, Object...)} for general info., +	 * {@link BaseBuilder#queryParam queryParam} builder methods., +	 * HTTP PATCH variant. See {@link #get(String, Object...)} for general info., +	 * HTTP DELETE variant. See {@link #get(String, Object...)} for general info., +	 * HTTP OPTIONS variant. See {@link #get(String, Object...)} for general info., +		 * Append the given query parameter to the existing query parameters., +		 * If no values are given, the resulting URI will contain the query, +		 * parameter name only (i.e. {@code ?foo} instead of {@code ?foo=bar})., +		 * <p>The provided query name and values will be encoded., +		 * @param name the query parameter name, +		 * @param values the query parameter values, +		 * @return this UriComponentsBuilder, +		 */, +		B queryParam(String name, Object... values);, +, +		/**, +		 * Add the given query parameters and values. The provided query name, +		 * and corresponding values will be encoded., +		 * @param params the params, +		 * @return this UriComponentsBuilder, +		 */, +		B queryParams(MultiValueMap<String, String> params);, +, +		/**, +		private final UriComponentsBuilder queryParamsBuilder = UriComponentsBuilder.newInstance();, +, +		public BodyBuilder queryParam(String name, Object... values) {, +			this.queryParamsBuilder.queryParam(name, values);, +			return this;, +		}, +, +		@Override, +		public BodyBuilder queryParams(MultiValueMap<String, String> params) {, +			this.queryParamsBuilder.queryParams(params);]