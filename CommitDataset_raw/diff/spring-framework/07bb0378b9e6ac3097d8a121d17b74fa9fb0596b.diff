[+++ b/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java, +		assertThat(reason, value, instanceOf(List.class));, +	 * and assert that a non-null value exists at the given path., +	 * <p>If the JSON path expression is not, +	 * {@linkplain JsonPath#isDefinite() definite}, this method asserts, +	 * that the value at the given path is not <em>empty</em>., +	 * and assert that a value does not exist at the given path., +	 * <p>If the JSON path expression is not, +	 * {@linkplain JsonPath#isDefinite() definite}, this method asserts, +	 * that the value at the given path is <em>empty</em>., +		if (pathIsIndefinite() && value instanceof List) {, +		if (pathIsIndefinite() && value instanceof List) {, +			assertTrue(reason, !((List<?>) value).isEmpty());, +		}, +	private boolean pathIsIndefinite() {, +		return !this.jsonPath.isDefinite();, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java, +		assertThat(reason, value, instanceOf(List.class));, +	 * and assert that a non-null value exists at the given path., +	 * <p>If the JSON path expression is not, +	 * {@linkplain JsonPath#isDefinite() definite}, this method asserts, +	 * that the value at the given path is not <em>empty</em>., +	 * and assert that a value does not exist at the given path., +	 * <p>If the JSON path expression is not, +	 * {@linkplain JsonPath#isDefinite() definite}, this method asserts, +	 * that the value at the given path is <em>empty</em>., +		if (pathIsIndefinite() && value instanceof List) {, +		if (pathIsIndefinite() && value instanceof List) {, +			assertTrue(reason, !((List<?>) value).isEmpty());, +		}, +	private boolean pathIsIndefinite() {, +		return !this.jsonPath.isDefinite();, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/JsonPathResultMatchers.java, +	 * assert that a non-null value exists at the given path., +	 * <p>If the JSON path expression is not, +	 * {@linkplain com.jayway.jsonpath.JsonPath#isDefinite definite},, +	 * this method asserts that the value at the given path is not <em>empty</em>., +	 * assert that a value does not exist at the given path., +	 * <p>If the JSON path expression is not, +	 * {@linkplain com.jayway.jsonpath.JsonPath#isDefinite definite}, this, +	 * method asserts that the value at the given path is <em>empty</em>., +++ b/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java, +		assertThat(reason, value, instanceOf(List.class));, +	 * and assert that a non-null value exists at the given path., +	 * <p>If the JSON path expression is not, +	 * {@linkplain JsonPath#isDefinite() definite}, this method asserts, +	 * that the value at the given path is not <em>empty</em>., +	 * and assert that a value does not exist at the given path., +	 * <p>If the JSON path expression is not, +	 * {@linkplain JsonPath#isDefinite() definite}, this method asserts, +	 * that the value at the given path is <em>empty</em>., +		if (pathIsIndefinite() && value instanceof List) {, +		if (pathIsIndefinite() && value instanceof List) {, +			assertTrue(reason, !((List<?>) value).isEmpty());, +		}, +	private boolean pathIsIndefinite() {, +		return !this.jsonPath.isDefinite();, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/JsonPathResultMatchers.java, +	 * assert that a non-null value exists at the given path., +	 * <p>If the JSON path expression is not, +	 * {@linkplain com.jayway.jsonpath.JsonPath#isDefinite definite},, +	 * this method asserts that the value at the given path is not <em>empty</em>., +	 * assert that a value does not exist at the given path., +	 * <p>If the JSON path expression is not, +	 * {@linkplain com.jayway.jsonpath.JsonPath#isDefinite definite}, this, +	 * method asserts that the value at the given path is <em>empty</em>., +++ b/spring-test/src/test/java/org/springframework/test/util/JsonPathExpectationsHelperTests.java, +			"\"num\":           5,                   " + //, +			"\"emptyMap\":      {}                   " + //, +	private static final String SIMPSONS = "{ \"familyMembers\": [ " + //, +			"{\"name\": \"Homer\" },  " + //, +			"{\"name\": \"Marge\" },  " + //, +			"{\"name\": \"Bart\"  },  " + //, +			"{\"name\": \"Lisa\"  },  " + //, +			"{\"name\": \"Maggie\"}   " + //, +	" ] }";, +	public void existsForAnEmptyArray() throws Exception {, +		new JsonPathExpectationsHelper("$.emptyArray").exists(CONTENT);, +	}, +, +	@Test, +	public void existsForAnEmptyMap() throws Exception {, +		new JsonPathExpectationsHelper("$.emptyMap").exists(CONTENT);, +	}, +, +	@Test, +	public void existsForIndefinatePathWithResults() throws Exception {, +		new JsonPathExpectationsHelper("$.familyMembers[?(@.name == 'Bart')]").exists(SIMPSONS);, +	}, +, +	@Test, +	public void existsForIndefinatePathWithEmptyResults() throws Exception {, +		String expression = "$.familyMembers[?(@.name == 'Dilbert')]";, +		exception.expect(AssertionError.class);]