[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +		if (result.isEmpty() && !Collection.class.isAssignableFrom(requiredType) && !Map.class.isAssignableFrom(requiredType)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +		if (result.isEmpty() && !Collection.class.isAssignableFrom(requiredType) && !Map.class.isAssignableFrom(requiredType)) {, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java, +import java.util.HashMap;, +		RootBeanDefinition tbm = new RootBeanDefinition(CollectionFactoryMethods.class);, +		tbm.setUniqueFactoryMethodName("testBeanMap");, +		bf.registerBeanDefinition("myTestBeanMap", tbm);, +		bf.registerSingleton("otherMap", new HashMap<Object, Object>());, +		assertSame(bf.getBean("myTestBeanMap"), bean.getTestBeanMap());, +		assertSame(bf.getBean("myTestBeanMap"), bean.getTestBeanMap());, +		RootBeanDefinition tbs = new RootBeanDefinition(CollectionFactoryMethods.class);, +		tbs.setUniqueFactoryMethodName("testBeanSet");, +		bf.registerBeanDefinition("myTestBeanSet", tbs);, +		assertSame(bf.getBean("myTestBeanSet"), bean.getTestBeanSet());, +		assertSame(bf.getBean("myTestBeanSet"), bean.getTestBeanSet());, +, +	public static class CollectionFactoryMethods {, +, +		public static Map<String, TestBean> testBeanMap() {, +			Map<String, TestBean> tbm = new LinkedHashMap<String, TestBean>();, +			tbm.put("testBean1", new TestBean("tb1"));, +			tbm.put("testBean2", new TestBean("tb2"));, +			return tbm;, +		}, +, +		public static Set<TestBean> testBeanSet() {, +			Set<TestBean> tbs = new LinkedHashSet<TestBean>();, +			tbs.add(new TestBean("tb1"));, +			tbs.add(new TestBean("tb2"));, +			return tbs;, +		}, +, +	}, +]