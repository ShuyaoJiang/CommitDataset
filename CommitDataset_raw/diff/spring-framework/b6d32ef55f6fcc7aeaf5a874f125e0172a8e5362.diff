[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionReaderUtils.java, +			// Top-level bean: use plain class name with unique suffix if necessary., +			return uniqueBeanName(generatedBeanName, registry);, +		}, +		return id;, +	}, +, +	/**, +	 * Turn the given bean name into a unique bean name for the given bean factory,, +	 * appending a unique counter as suffix if necessary., +	 * @param beanName the original bean name, +	 * @param registry the bean factory that the definition is going to be, +	 * registered with (to check for existing bean names), +	 * @return the unique bean name to use, +	 * @since 5.1, +	 */, +	public static String uniqueBeanName(String beanName, BeanDefinitionRegistry registry) {, +		String id = beanName;, +, +		// Increase counter until the id is unique., +			id = beanName + GENERATED_BEAN_NAME_SEPARATOR + counter;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionReaderUtils.java, +			// Top-level bean: use plain class name with unique suffix if necessary., +			return uniqueBeanName(generatedBeanName, registry);, +		}, +		return id;, +	}, +, +	/**, +	 * Turn the given bean name into a unique bean name for the given bean factory,, +	 * appending a unique counter as suffix if necessary., +	 * @param beanName the original bean name, +	 * @param registry the bean factory that the definition is going to be, +	 * registered with (to check for existing bean names), +	 * @return the unique bean name to use, +	 * @since 5.1, +	 */, +	public static String uniqueBeanName(String beanName, BeanDefinitionRegistry registry) {, +		String id = beanName;, +, +		// Increase counter until the id is unique., +			id = beanName + GENERATED_BEAN_NAME_SEPARATOR + counter;, +++ b/spring-context/src/main/kotlin/org/springframework/context/support/BeanDefinitionDsl.kt, +import org.springframework.beans.factory.support.BeanDefinitionReaderUtils, +		val beanName = name ?: BeanDefinitionReaderUtils.uniqueBeanName(T::class.java.name, context);, +		context.registerBean(beanName, T::class.java, customizer), +		val beanName = name ?: BeanDefinitionReaderUtils.uniqueBeanName(T::class.java.name, context);, +		context.registerBean(beanName, T::class.java, Supplier { function.invoke() }, customizer), +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionReaderUtils.java, +			// Top-level bean: use plain class name with unique suffix if necessary., +			return uniqueBeanName(generatedBeanName, registry);, +		}, +		return id;, +	}, +, +	/**, +	 * Turn the given bean name into a unique bean name for the given bean factory,, +	 * appending a unique counter as suffix if necessary., +	 * @param beanName the original bean name, +	 * @param registry the bean factory that the definition is going to be, +	 * registered with (to check for existing bean names), +	 * @return the unique bean name to use, +	 * @since 5.1, +	 */, +	public static String uniqueBeanName(String beanName, BeanDefinitionRegistry registry) {, +		String id = beanName;, +, +		// Increase counter until the id is unique., +			id = beanName + GENERATED_BEAN_NAME_SEPARATOR + counter;, +++ b/spring-context/src/main/kotlin/org/springframework/context/support/BeanDefinitionDsl.kt, +import org.springframework.beans.factory.support.BeanDefinitionReaderUtils, +		val beanName = name ?: BeanDefinitionReaderUtils.uniqueBeanName(T::class.java.name, context);, +		context.registerBean(beanName, T::class.java, customizer), +		val beanName = name ?: BeanDefinitionReaderUtils.uniqueBeanName(T::class.java.name, context);, +		context.registerBean(beanName, T::class.java, Supplier { function.invoke() }, customizer), +++ b/spring-context/src/test/kotlin/org/springframework/context/support/BeanDefinitionDslTests.kt, +			bean<Foo>(), +			bean<Foo>()]