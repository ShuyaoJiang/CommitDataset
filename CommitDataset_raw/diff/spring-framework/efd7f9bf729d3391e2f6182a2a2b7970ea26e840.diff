[+++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java, +		return (this.validators.size() > 0 ? this.validators.get(0) : null);, +++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java, +		return (this.validators.size() > 0 ? this.validators.get(0) : null);, +++ b/spring-test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java, +		withRulesMethod = ReflectionUtils.findMethod(SpringJUnit4ClassRunner.class, "withRules",, +				FrameworkMethod.class, Object.class, Statement.class);, +				throw new IllegalStateException(String.format("Detected SpringClassRule field in test class [%s], " +, +						"but SpringClassRule cannot be used with the SpringJUnit4ClassRunner.", testClass.getName()));, +				throw new IllegalStateException(String.format("Detected SpringMethodRule field in test class [%s], " +, +						"but SpringMethodRule cannot be used with the SpringJUnit4ClassRunner.", testClass.getName()));, +			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "]");, +		return (method.isAnnotationPresent(Ignore.class) ||, +				!ProfileValueUtils.isTestEnabledInThisEnvironment(method, getTestClass().getJavaClass()));, +		return (test != null && test.expected() != Test.None.class ? test.expected() : null);, +			String msg = String.format("Test method [%s] has been configured with Spring's @Timed(millis=%s) and " +, +							"JUnit's @Test(timeout=%s) annotations, but only one declaration of a 'timeout' is " +, +							"permitted per test method.", frameworkMethod.getMethod(), springTimeout, junitTimeout);, +		return (test != null && test.timeout() > 0 ? test.timeout() : 0);, +++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java, +		return (this.validators.size() > 0 ? this.validators.get(0) : null);, +++ b/spring-test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java, +		withRulesMethod = ReflectionUtils.findMethod(SpringJUnit4ClassRunner.class, "withRules",, +				FrameworkMethod.class, Object.class, Statement.class);, +				throw new IllegalStateException(String.format("Detected SpringClassRule field in test class [%s], " +, +						"but SpringClassRule cannot be used with the SpringJUnit4ClassRunner.", testClass.getName()));, +				throw new IllegalStateException(String.format("Detected SpringMethodRule field in test class [%s], " +, +						"but SpringMethodRule cannot be used with the SpringJUnit4ClassRunner.", testClass.getName()));, +			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "]");, +		return (method.isAnnotationPresent(Ignore.class) ||, +				!ProfileValueUtils.isTestEnabledInThisEnvironment(method, getTestClass().getJavaClass()));, +		return (test != null && test.expected() != Test.None.class ? test.expected() : null);, +			String msg = String.format("Test method [%s] has been configured with Spring's @Timed(millis=%s) and " +, +							"JUnit's @Test(timeout=%s) annotations, but only one declaration of a 'timeout' is " +, +							"permitted per test method.", frameworkMethod.getMethod(), springTimeout, junitTimeout);, +		return (test != null && test.timeout() > 0 ? test.timeout() : 0);, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java, +					return this.objectMapper.readerWithView(deserializationView).withType(javaType)., +							readValue(inputMessage.getBody());, +			if (jackson26Available && type != null && value != null && TypeUtils.isAssignable(type, value.getClass())) {, +++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java, +		return (this.validators.size() > 0 ? this.validators.get(0) : null);, +++ b/spring-test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java, +		withRulesMethod = ReflectionUtils.findMethod(SpringJUnit4ClassRunner.class, "withRules",, +				FrameworkMethod.class, Object.class, Statement.class);, +				throw new IllegalStateException(String.format("Detected SpringClassRule field in test class [%s], " +, +						"but SpringClassRule cannot be used with the SpringJUnit4ClassRunner.", testClass.getName()));, +				throw new IllegalStateException(String.format("Detected SpringMethodRule field in test class [%s], " +, +						"but SpringMethodRule cannot be used with the SpringJUnit4ClassRunner.", testClass.getName()));, +			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "]");, +		return (method.isAnnotationPresent(Ignore.class) ||, +				!ProfileValueUtils.isTestEnabledInThisEnvironment(method, getTestClass().getJavaClass()));, +		return (test != null && test.expected() != Test.None.class ? test.expected() : null);, +			String msg = String.format("Test method [%s] has been configured with Spring's @Timed(millis=%s) and " +, +							"JUnit's @Test(timeout=%s) annotations, but only one declaration of a 'timeout' is " +, +							"permitted per test method.", frameworkMethod.getMethod(), springTimeout, junitTimeout);, +		return (test != null && test.timeout() > 0 ? test.timeout() : 0);, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java, +					return this.objectMapper.readerWithView(deserializationView).withType(javaType)., +							readValue(inputMessage.getBody());, +			if (jackson26Available && type != null && value != null && TypeUtils.isAssignable(type, value.getClass())) {, +++ b/spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpComponentsHttpInvokerRequestExecutor.java, + * Copyright 2002-2015 the original author or authors., +, +, +	private static HttpClient createDefaultHttpClient() {, +		Registry<ConnectionSocketFactory> schemeRegistry = RegistryBuilder.<ConnectionSocketFactory>create(), +				.register("http", PlainConnectionSocketFactory.getSocketFactory()), +				.register("https", SSLConnectionSocketFactory.getSocketFactory()), +				.build();, +, +		PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager(schemeRegistry);, +		connectionManager.setMaxTotal(DEFAULT_MAX_TOTAL_CONNECTIONS);, +		connectionManager.setDefaultMaxPerRoute(DEFAULT_MAX_CONNECTIONS_PER_ROUTE);, +, +		return HttpClientBuilder.create().setConnectionManager(connectionManager).build();, +	}, +, +, +		this.requestConfig = cloneRequestConfig().setConnectTimeout(timeout).build();, +			client.getParams().setIntParameter(org.apache.http.params.CoreConnectionPNames.CONNECTION_TIMEOUT, timeout);, +		this.requestConfig = cloneRequestConfig().setConnectionRequestTimeout(connectionRequestTimeout).build();, +		this.requestConfig = cloneRequestConfig().setSocketTimeout(timeout).build();, +			client.getParams().setIntParameter(org.apache.http.params.CoreConnectionPNames.SO_TIMEOUT, timeout);, +		return (this.requestConfig != null ? RequestConfig.copy(this.requestConfig) : RequestConfig.custom());, +, +++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java, +		return (this.validators.size() > 0 ? this.validators.get(0) : null);, +++ b/spring-test/src/main/java/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.java, +		withRulesMethod = ReflectionUtils.findMethod(SpringJUnit4ClassRunner.class, "withRules",, +				FrameworkMethod.class, Object.class, Statement.class);, +				throw new IllegalStateException(String.format("Detected SpringClassRule field in test class [%s], " +, +						"but SpringClassRule cannot be used with the SpringJUnit4ClassRunner.", testClass.getName()));, +				throw new IllegalStateException(String.format("Detected SpringMethodRule field in test class [%s], " +, +						"but SpringMethodRule cannot be used with the SpringJUnit4ClassRunner.", testClass.getName()));, +			logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "]");, +		return (method.isAnnotationPresent(Ignore.class) ||, +				!ProfileValueUtils.isTestEnabledInThisEnvironment(method, getTestClass().getJavaClass()));, +		return (test != null && test.expected() != Test.None.class ? test.expected() : null);, +			String msg = String.format("Test method [%s] has been configured with Spring's @Timed(millis=%s) and " +]