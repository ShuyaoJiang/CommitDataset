[+++ b/src/docs/asciidoc/web/webflux.adoc, +`HttpHandler` is the lowest level contract for running on different HTTP servers., +On top of that foundation, the WebHandler API provides a slightly higher level, but, +still general purpose, set of components that form a chain of, +{api-spring-framework}/web/server/WebExceptionHandler.html[WebExceptionHandler's],, +{api-spring-framework}/web/server/WebFilter.html[WebFilter's], and a, +{api-spring-framework}/web/server/WebHandler.html[WebHandler]., +All WebHandler API components take `ServerWebExchange` as input which goes beyond, +`ServerHttpRequest` and `ServerHttpResponse` to provide extra building blocks for, +use in web applications such as request attributes, session attributes, access to parsed, +form data, multipart data, and more., +`WebHttpHandlerBuilder` is used to assemble a request processing chain. You can use, +methods on the builder to add components manually, or more likely have them detected from, +a Spring `ApplicationContext`, with the resulting `HttpHandler` ready to run via a, +<<webflux-httphandler,server adapter>>:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +ApplicationContext context = ..., +HttpHandler handler = WebHttpHandlerBuilder.applicationContext(context).build(), +----, +, +The table below lists the components that `WebHttpHandlerBuilder` detects:, +|<any>, +|`WebExceptionHandler`, +|0..N, +|Exception handlers to apply after all ``WebFilter``'s and the target `WebHandler`., +, +|<any>, +|`WebFilter`, +|0..N, +|Filters to invoke before and after the target `WebHandler`., +, +|`WebHandler`, +|The handler for the request., +|`WebSessionManager`, +|The manager for ``WebSession``'s exposed through a method on `ServerWebExchange`., +, +`DefaultWebSessionManager` by default., +|`ServerCodecConfigurer`, +|For access to ``HttpMessageReader``'s for parsing form data and multipart data that's, +then exposed through methods on `ServerWebExchange`., +, +`ServerCodecConfigurer.create()` by default., +|`LocaleContextResolver`, +|The resolver for `LocaleContext` exposed through a method on `ServerWebExchange`., +, +`AcceptHeaderLocaleContextResolver` by default., +[[webflux-form-data]], +==== Form Reader, +, +`ServerWebExchange` exposes the following method for access to form data:, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +Mono<MultiValueMap<String, String>> getFormData();, +----, +, +The `DefaultServerWebExchange` uses the configured `HttpMessageReader` to parse form data, +("application/x-www-form-urlencoded") into a `MultiValueMap`. By default, +`FormHttpMessageReader` is configured for use via the `ServerCodecConfigurer` bean, +(see <<webflux-web-handler-api,Web Handler API>>)., +, +, +[[webflux-multipart]], +==== Multipart Reader, +[.small]#<<web.adoc#mvc-multipart,Same in Spring MVC>>#, +, +`ServerWebExchange` exposes the following method for access to multipart data:, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +Mono<MultiValueMap<String, Part>> getMultipartData();, +----, +, +The `DefaultServerWebExchange` uses the configured, +`HttpMessageReader<MultiValueMap<String, Part>>` to parse "multipart/form-data" content, +into a `MultiValueMap`. At present, +https://github.com/synchronoss/nio-multipart[Synchronoss NIO Multipart] is the only 3rd, +party library supported, and the only library we know for non-blocking parsing of, +multipart requests. It is enabled through the `ServerCodecConfigurer` bean, +(see <<webflux-web-handler-api,Web Handler API>>)., +, +To parse multipart data in streaming fashion, use the `Flux<Part>` returned from an, +`HttpMessageReader<Part>` instead. For example in an annotated controller use of, +`@RequestPart` implies Map-like access to individual parts by name, and hence requires, +parsing multipart data in full. By contrast `@RequestBody` can be used to decode the, +content to `Flux<Part>` without collecting to a `MultiValueMap`., +, +, +See <<webflux-multipart-forms>> and <<webflux-multipart>>., +Use the `@RequestParam` annotation to bind query parameters to a method argument in a, +controller. The following code snippet shows the usage:, +[TIP], +====, +Unlike the Servlet API "request paramater" concept that conflate query parameters, form, +data, and multiparts into one, in WebFlux each is accessed individually through the, +`ServerWebExchange`. While `@RequestParam` binds to query parameters only, you can, +use data binding to apply query paramerters, form data, and multiparts to a]