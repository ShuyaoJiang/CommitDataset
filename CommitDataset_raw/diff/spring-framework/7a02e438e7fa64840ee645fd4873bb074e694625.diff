[+++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, +			if (prefix.contains(FOLDER_SEPARATOR)) {, +		LinkedList<String> pathElements = new LinkedList<>();, +		// If nothing else left, at least explicitly point to current path., +		if (pathElements.size() == 1 && "".equals(pathElements.getLast()) && !prefix.endsWith(FOLDER_SEPARATOR)) {, +			pathElements.add(0, CURRENT_PATH);, +		}, +++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, +			if (prefix.contains(FOLDER_SEPARATOR)) {, +		LinkedList<String> pathElements = new LinkedList<>();, +		// If nothing else left, at least explicitly point to current path., +		if (pathElements.size() == 1 && "".equals(pathElements.getLast()) && !prefix.endsWith(FOLDER_SEPARATOR)) {, +			pathElements.add(0, CURRENT_PATH);, +		}, +++ b/spring-core/src/test/java/org/springframework/util/StringUtilsTests.java, +		assertEquals("/", StringUtils.cleanPath("/"));, +		assertEquals("/", StringUtils.cleanPath("/mypath/../"));, +		assertEquals("", StringUtils.cleanPath("mypath/.."));, +		assertEquals("", StringUtils.cleanPath("mypath/../."));, +		assertEquals("./", StringUtils.cleanPath("mypath/../"));, +		assertEquals("./", StringUtils.cleanPath("././"));, +		assertEquals("./", StringUtils.cleanPath("./"));, +		assertEquals("../", StringUtils.cleanPath("../"));, +		assertEquals("../", StringUtils.cleanPath("./../"));, +		assertEquals("../", StringUtils.cleanPath(".././"));, +		assertEquals("file:/", StringUtils.cleanPath("file:/"));, +		assertEquals("file:/", StringUtils.cleanPath("file:/mypath/../"));, +		assertEquals("file:", StringUtils.cleanPath("file:mypath/.."));, +		assertEquals("file:", StringUtils.cleanPath("file:mypath/../."));, +		assertEquals("file:./", StringUtils.cleanPath("file:mypath/../"));, +		assertEquals("file:./", StringUtils.cleanPath("file:././"));, +		assertEquals("file:./", StringUtils.cleanPath("file:./"));, +		assertEquals("file:../", StringUtils.cleanPath("file:../"));, +		assertEquals("file:../", StringUtils.cleanPath("file:./../"));, +		assertEquals("file:../", StringUtils.cleanPath("file:.././"));, +		assertEquals("file:///c:/path/the%20file.txt", StringUtils.cleanPath("file:///c:/some/../path/the%20file.txt"));, +				StringUtils.pathEquals("/dummy1/dummy2/dummy3", "/dummy1/dummy2/dummy3"));, +				StringUtils.pathEquals("C:\\dummy1\\dummy2\\dummy3", "C:\\dummy1\\dummy2\\dummy3"));, +				StringUtils.pathEquals("/dummy1/bin/../dummy2/dummy3", "/dummy1/dummy2/dummy3"));, +				StringUtils.pathEquals("C:\\dummy1\\dummy2\\dummy3", "C:\\dummy1\\bin\\..\\dummy2\\dummy3"));, +				StringUtils.pathEquals("/dummy1/bin/../dummy2/bin/../dummy3", "/dummy1/dummy2/dummy3"));, +				StringUtils.pathEquals("C:\\dummy1\\dummy2\\dummy3", "C:\\dummy1\\bin\\..\\dummy2\\bin\\..\\dummy3"));, +				StringUtils.pathEquals("/dummy1/bin/tmp/../../dummy2/dummy3", "/dummy1/dummy2/dummy3"));, +				StringUtils.pathEquals("/dummy1/dummy2/dummy3", "/dummy1/dum/dum/../../dummy2/dummy3"));, +				StringUtils.pathEquals("./dummy1/dummy2/dummy3", "dummy1/dum/./dum/../../dummy2/dummy3"));, +				StringUtils.pathEquals("./dummy1/dummy2/dummy3", "/dummy1/dum/./dum/../../dummy2/dummy3"));, +				StringUtils.pathEquals("/dummy1/dummy2/dummy3", "/dummy1/dummy4/dummy3"));, +				StringUtils.pathEquals("/dummy1/bin/tmp/../dummy2/dummy3", "/dummy1/dummy2/dummy3"));, +				StringUtils.pathEquals("C:\\dummy1\\dummy2\\dummy3", "C:\\dummy1\\bin\\tmp\\..\\dummy2\\dummy3"));, +				StringUtils.pathEquals("/dummy1/bin/../dummy2/dummy3", "/dummy1/dummy2/dummy4"));]