[+++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ForkJoinPoolFactoryBean.java, + * Copyright 2002-2013 the original author or authors., +import java.util.concurrent.TimeUnit;, + * May be used on Java 7 and 8 as well as on Java 6 with {@code jsr166.jar} on the classpath, +	private boolean commonPool = false;, +, +	private int awaitTerminationSeconds = 0;, +, +	 * Set whether to expose JDK 8's 'common' {@link ForkJoinPool}., +	 * <p>Default is "false", creating a local {@link ForkJoinPool} instance based on the, +	 * {@link #setParallelism "parallelism"}, {@link #setThreadFactory "threadFactory"},, +	 * {@link #setUncaughtExceptionHandler "uncaughtExceptionHandler"} and, +	 * {@link #setAsyncMode "asyncMode"} properties on this FactoryBean., +	 * <p><b>NOTE:</b> Setting this flag to "true" effectively ignores all other, +	 * properties on this FactoryBean, reusing the shared common JDK {@link ForkJoinPool}, +	 * instead. This is a fine choice on JDK 8 but does remove the application's ability, +	 * to customize ForkJoinPool behavior, in particular the use of custom threads., +	 * @since 3.2, +	 * @see java.util.concurrent.ForkJoinPool#commonPool(), +	 */, +	public void setCommonPool(boolean commonPool) {, +		this.commonPool = commonPool;, +	}, +, +	/**, +	/**, +	 * Set the maximum number of seconds that this ForkJoinPool is supposed to block, +	 * on shutdown in order to wait for remaining tasks to complete their execution, +	 * before the rest of the container continues to shut down. This is particularly, +	 * useful if your remaining tasks are likely to need access to other resources, +	 * that are also managed by the container., +	 * <p>By default, this ForkJoinPool won't wait for the termination of tasks at all., +	 * It will continue to fully execute all ongoing tasks as well as all remaining, +	 * tasks in the queue, in parallel to the rest of the container shutting down., +	 * In contrast, if you specify an await-termination period using this property,, +	 * this executor will wait for the given time (max) for the termination of tasks., +	 * <p>Note that this feature works for the {@link #setCommonPool "commonPool"}, +	 * mode as well. The underlying ForkJoinPool won't actually terminate in that, +	 * case but will wait for all tasks to terminate., +	 * @see java.util.concurrent.ForkJoinPool#shutdown(), +	 * @see java.util.concurrent.ForkJoinPool#awaitTermination, +	 */, +	public void setAwaitTerminationSeconds(int awaitTerminationSeconds) {, +		this.awaitTerminationSeconds = awaitTerminationSeconds;, +	}, +, +		this.forkJoinPool = (this.commonPool ? ForkJoinPool.commonPool() :, +				new ForkJoinPool(this.parallelism, this.threadFactory, this.uncaughtExceptionHandler, this.asyncMode));, +		// Ignored for the common pool., +, +		// Wait for all tasks to terminate - works for the common pool as well., +		if (this.awaitTerminationSeconds > 0) {, +			try {, +				this.forkJoinPool.awaitTermination(this.awaitTerminationSeconds, TimeUnit.SECONDS);, +			}, +			catch (InterruptedException ex) {, +				Thread.currentThread().interrupt();, +			}, +		}]