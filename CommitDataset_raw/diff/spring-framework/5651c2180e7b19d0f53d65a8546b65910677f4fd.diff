[+++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapter.java, +	 * A shortcut for {@code getDescriptor().getReactiveType()}., +	 */, +	public Class<?> getReactiveType() {, +		return getDescriptor().getReactiveType();, +	}, +, +	/**, +	 * A shortcut for {@code getDescriptor().isMultiValue()}., +	 */, +	public boolean isMultiValue() {, +		return getDescriptor().isMultiValue();, +	}, +, +	/**, +	 * A shortcut for {@code getDescriptor().supportsEmpty()}., +	 */, +	public boolean supportsEmpty() {, +		return getDescriptor().supportsEmpty();, +	}, +, +	/**, +	 * A shortcut for {@code getDescriptor().isNoValue()}., +	 */, +	public boolean isNoValue() {, +		return getDescriptor().isNoValue();, +	}, +, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapter.java, +	 * A shortcut for {@code getDescriptor().getReactiveType()}., +	 */, +	public Class<?> getReactiveType() {, +		return getDescriptor().getReactiveType();, +	}, +, +	/**, +	 * A shortcut for {@code getDescriptor().isMultiValue()}., +	 */, +	public boolean isMultiValue() {, +		return getDescriptor().isMultiValue();, +	}, +, +	/**, +	 * A shortcut for {@code getDescriptor().supportsEmpty()}., +	 */, +	public boolean supportsEmpty() {, +		return getDescriptor().supportsEmpty();, +	}, +, +	/**, +	 * A shortcut for {@code getDescriptor().isNoValue()}., +	 */, +	public boolean isNoValue() {, +		return getDescriptor().isNoValue();, +	}, +, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +	 * Get the adapter for the given reactive type., +	public ReactiveAdapter getAdapter(Class<?> reactiveType) {, +		return getAdapter(reactiveType, null);, +	 * Get the adapter for the given reactive type. Or if a "source" object is, +	 * provided, its actual type is used instead., +	 * @param reactiveType the reactive type, +	 * @param source an instance of the reactive type (i.e. to adapt from), +	public ReactiveAdapter getAdapter(Class<?> reactiveType, Object source) {, +, +				.filter(adapter -> adapter.getReactiveType().equals(clazz)), +				.orElseGet(() ->, +						this.adapters.stream(), +								.filter(adapter -> adapter.getReactiveType().isAssignableFrom(clazz)), +								.findFirst(), +								.orElse(null));, +			return (isMultiValue() ? Flux.from(publisher) : Mono.from(publisher));, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapter.java, +	 * A shortcut for {@code getDescriptor().getReactiveType()}., +	 */, +	public Class<?> getReactiveType() {, +		return getDescriptor().getReactiveType();, +	}, +, +	/**, +	 * A shortcut for {@code getDescriptor().isMultiValue()}., +	 */, +	public boolean isMultiValue() {, +		return getDescriptor().isMultiValue();, +	}, +, +	/**, +	 * A shortcut for {@code getDescriptor().supportsEmpty()}., +	 */, +	public boolean supportsEmpty() {, +		return getDescriptor().supportsEmpty();, +	}, +, +	/**, +	 * A shortcut for {@code getDescriptor().isNoValue()}.]