[+++ b/org.springframework.jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java, +	private int registeredWithDestination = 0;, +, +	/**, +	 * Return whether at lease one consumer has entered a fixed registration with the, +	 * target destination. This is particularly interesting for the pub-sub case where, +	 * it might be important to have an actual consumer registered that is guaranteed, +	 * to not miss any messages that are just about to be published., +	 * <p>This method may be polled after a {@link #start()} call, until asynchronous, +	 * registration of consumers has happened which is when the method will start returning, +	 * <code>true</code> - provided that the listener container actually ever establishes, +	 * a fixed registration. It will then keep returning <code>true</code> until shutdown,, +	 * since the container will hold on to at least one consumer registration thereafter., +	 * <p>Note that a listener container is not bound to having a fixed registration in, +	 * the first place. It may also keep recreating consumers for every invoker execution., +	 * This particularly depends on the {@link #setCacheLevel cache level} setting:, +	 * Only CACHE_CONSUMER will lead to a fixed registration., +	 */, +	public boolean isRegisteredWithDestination() {, +		synchronized (this.lifecycleMonitor) {, +			return (this.registeredWithDestination > 0);, +		}, +	}, +, +					synchronized (lifecycleMonitor) {, +						registeredWithDestination++;, +					}, +			if (this.consumer != null) {, +				synchronized (lifecycleMonitor) {, +					registeredWithDestination--;, +				}, +			}]