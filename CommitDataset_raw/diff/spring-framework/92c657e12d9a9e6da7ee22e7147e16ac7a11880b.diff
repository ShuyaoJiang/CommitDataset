[+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.ListableBeanFactory;, +import org.springframework.beans.factory.SmartInitializingSingleton;, + * See the @{@link EnableScheduling} javadocs for complete usage details., +		implements BeanPostProcessor, Ordered, EmbeddedValueResolverAware, BeanFactoryAware,, +		SmartInitializingSingleton, DisposableBean {, +	private ListableBeanFactory beanFactory;, +	@Override, +	public int getOrder() {, +		return LOWEST_PRECEDENCE;, +	}, +, +	/**, +	 * Making a {@link BeanFactory} available is optional; if not set,, +	 * {@link SchedulingConfigurer} beans won't get autodetected and, +	 * a {@link #setScheduler scheduler} has to be explicitly configured., +	 */, +	public void setBeanFactory(BeanFactory beanFactory) {, +		this.beanFactory = (beanFactory instanceof ListableBeanFactory ? (ListableBeanFactory) beanFactory : null);, +	/**, +	 * @deprecated as of Spring 4.1, in favor of {@link #setBeanFactory}, +	 */, +	@Deprecated, +	public void setApplicationContext(ApplicationContext applicationContext) {, +		this.beanFactory = applicationContext;, +, +	@Override, +	public void afterSingletonsInstantiated() {, +		if (this.scheduler != null) {, +			this.registrar.setScheduler(this.scheduler);, +		}, +, +		if (this.beanFactory != null) {, +			Map<String, SchedulingConfigurer> configurers = this.beanFactory.getBeansOfType(SchedulingConfigurer.class);, +			for (SchedulingConfigurer configurer : configurers.values()) {, +				configurer.configureTasks(this.registrar);, +			}, +		}, +, +		if (this.registrar.hasTasks() && this.registrar.getScheduler() == null) {, +			Assert.state(this.beanFactory != null, "BeanFactory must be set to find scheduler by type");, +			Map<String, ? super Object> schedulers = new HashMap<String, Object>();, +			schedulers.putAll(this.beanFactory.getBeansOfType(TaskScheduler.class));, +			schedulers.putAll(this.beanFactory.getBeansOfType(ScheduledExecutorService.class));, +			if (schedulers.size() == 0) {, +				// do nothing -> fall back to default scheduler, +			}, +			else if (schedulers.size() == 1) {, +				this.registrar.setScheduler(schedulers.values().iterator().next());, +			}, +			else if (schedulers.size() >= 2){, +				throw new IllegalStateException(, +						"More than one TaskScheduler and/or ScheduledExecutorService  " +, +								"exist within the context. Remove all but one of the beans; or " +, +								"implement the SchedulingConfigurer interface and call " +, +								"ScheduledTaskRegistrar#setScheduler explicitly within the " +, +								"configureTasks() callback. Found the following beans: " + schedulers.keySet());, +			}, +		}, +, +		this.registrar.afterPropertiesSet();, +	}, +, +, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.ListableBeanFactory;, +import org.springframework.beans.factory.SmartInitializingSingleton;, + * See the @{@link EnableScheduling} javadocs for complete usage details., +		implements BeanPostProcessor, Ordered, EmbeddedValueResolverAware, BeanFactoryAware,, +		SmartInitializingSingleton, DisposableBean {, +	private ListableBeanFactory beanFactory;, +	@Override, +	public int getOrder() {, +		return LOWEST_PRECEDENCE;, +	}, +, +	/**, +	 * Making a {@link BeanFactory} available is optional; if not set,, +	 * {@link SchedulingConfigurer} beans won't get autodetected and, +	 * a {@link #setScheduler scheduler} has to be explicitly configured., +	 */, +	public void setBeanFactory(BeanFactory beanFactory) {, +		this.beanFactory = (beanFactory instanceof ListableBeanFactory ? (ListableBeanFactory) beanFactory : null);, +	/**, +	 * @deprecated as of Spring 4.1, in favor of {@link #setBeanFactory}, +	 */, +	@Deprecated, +	public void setApplicationContext(ApplicationContext applicationContext) {, +		this.beanFactory = applicationContext;, +, +	@Override, +	public void afterSingletonsInstantiated() {, +		if (this.scheduler != null) {, +			this.registrar.setScheduler(this.scheduler);]