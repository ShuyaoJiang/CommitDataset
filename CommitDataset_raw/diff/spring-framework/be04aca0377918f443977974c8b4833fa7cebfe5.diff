[+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java, +	 * Invocation handler that suppresses close calls on JDBC Connections., +			if (method.getName().equals("equals")) {, +			else if (method.getName().equals("unwrap")) {, +				if (((Class) args[0]).isInstance(proxy)) {, +					return proxy;, +				}, +			}, +			else if (method.getName().equals("isWrapperFor")) {, +				if (((Class) args[0]).isInstance(proxy)) {, +					return true;, +				}, +			}, +			else if (method.getName().equals("isClosed")) {, +				return false;, +			}, +			else if (method.getName().equals("getTargetConnection")) {, +				// Handle getTargetConnection method: return underlying Connection., +				return this.target;, +			}, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java, +	 * Invocation handler that suppresses close calls on JDBC Connections., +			if (method.getName().equals("equals")) {, +			else if (method.getName().equals("unwrap")) {, +				if (((Class) args[0]).isInstance(proxy)) {, +					return proxy;, +				}, +			}, +			else if (method.getName().equals("isWrapperFor")) {, +				if (((Class) args[0]).isInstance(proxy)) {, +					return true;, +				}, +			}, +			else if (method.getName().equals("isClosed")) {, +				return false;, +			}, +			else if (method.getName().equals("getTargetConnection")) {, +				// Handle getTargetConnection method: return underlying Connection., +				return this.target;, +			}, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/LazyConnectionDataSourceProxy.java, + * Copyright 2002-2010 the original author or authors., +			else if (method.getName().equals("unwrap")) {, +				if (((Class) args[0]).isInstance(proxy)) {, +					return proxy;, +				}, +			}, +			else if (method.getName().equals("isWrapperFor")) {, +				if (((Class) args[0]).isInstance(proxy)) {, +					return true;, +				}, +			}, +				else if (method.getName().equals("isClosed")) {, +					return this.closed;, +				}, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java, +	 * Invocation handler that suppresses close calls on JDBC Connections., +			if (method.getName().equals("equals")) {, +			else if (method.getName().equals("unwrap")) {, +				if (((Class) args[0]).isInstance(proxy)) {, +					return proxy;, +				}, +			}, +			else if (method.getName().equals("isWrapperFor")) {, +				if (((Class) args[0]).isInstance(proxy)) {, +					return true;, +				}, +			}, +			else if (method.getName().equals("isClosed")) {, +				return false;, +			}, +			else if (method.getName().equals("getTargetConnection")) {, +				// Handle getTargetConnection method: return underlying Connection., +				return this.target;, +			}, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/LazyConnectionDataSourceProxy.java, + * Copyright 2002-2010 the original author or authors., +			else if (method.getName().equals("unwrap")) {, +				if (((Class) args[0]).isInstance(proxy)) {, +					return proxy;, +				}, +			}, +			else if (method.getName().equals("isWrapperFor")) {, +				if (((Class) args[0]).isInstance(proxy)) {, +					return true;, +				}, +			}, +				else if (method.getName().equals("isClosed")) {, +					return this.closed;, +				}, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/SingleConnectionDataSource.java, + * Copyright 2002-2010 the original author or authors., +			else if (method.getName().equals("unwrap")) {, +				if (((Class) args[0]).isInstance(proxy)) {, +					return proxy;, +				}, +			}, +			else if (method.getName().equals("isWrapperFor")) {, +				if (((Class) args[0]).isInstance(proxy)) {, +					return true;]