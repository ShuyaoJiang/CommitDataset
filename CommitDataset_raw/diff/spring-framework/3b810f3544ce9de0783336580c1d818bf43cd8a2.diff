[+++ b/spring-aop/src/test/java/org/springframework/aop/interceptor/ConcurrencyThrottleInterceptorTests.java, + * Copyright 2002-2018 the original author or authors., +		proxyFactory.setInterfaces(ITestBean.class);, +		proxyFactory.setInterfaces(ITestBean.class);, +					i % 2 == 0 ? new OutOfMemoryError() : new IllegalStateException());, +++ b/spring-aop/src/test/java/org/springframework/aop/interceptor/ConcurrencyThrottleInterceptorTests.java, + * Copyright 2002-2018 the original author or authors., +		proxyFactory.setInterfaces(ITestBean.class);, +		proxyFactory.setInterfaces(ITestBean.class);, +					i % 2 == 0 ? new OutOfMemoryError() : new IllegalStateException());, +++ b/spring-aop/src/test/java/org/springframework/aop/interceptor/CustomizableTraceInterceptorTests.java, + * Copyright 2002-2018 the original author or authors., +		given(methodInvocation.getMethod()).willReturn(String.class.getMethod("toString"));, +		given(methodInvocation.getMethod()).willReturn(String.class.getMethod("toString"));, +++ b/spring-aop/src/test/java/org/springframework/aop/interceptor/ConcurrencyThrottleInterceptorTests.java, + * Copyright 2002-2018 the original author or authors., +		proxyFactory.setInterfaces(ITestBean.class);, +		proxyFactory.setInterfaces(ITestBean.class);, +					i % 2 == 0 ? new OutOfMemoryError() : new IllegalStateException());, +++ b/spring-aop/src/test/java/org/springframework/aop/interceptor/CustomizableTraceInterceptorTests.java, + * Copyright 2002-2018 the original author or authors., +		given(methodInvocation.getMethod()).willReturn(String.class.getMethod("toString"));, +		given(methodInvocation.getMethod()).willReturn(String.class.getMethod("toString"));, +++ b/spring-aop/src/test/java/org/springframework/aop/interceptor/SimpleTraceInterceptorTests.java, + * Copyright 2002-2018 the original author or authors., +		given(mi.getMethod()).willReturn(String.class.getMethod("toString"));, +		given(mi.getMethod()).willReturn(String.class.getMethod("toString"));, +++ b/spring-aop/src/test/java/org/springframework/aop/interceptor/ConcurrencyThrottleInterceptorTests.java, + * Copyright 2002-2018 the original author or authors., +		proxyFactory.setInterfaces(ITestBean.class);, +		proxyFactory.setInterfaces(ITestBean.class);, +					i % 2 == 0 ? new OutOfMemoryError() : new IllegalStateException());, +++ b/spring-aop/src/test/java/org/springframework/aop/interceptor/CustomizableTraceInterceptorTests.java, + * Copyright 2002-2018 the original author or authors., +		given(methodInvocation.getMethod()).willReturn(String.class.getMethod("toString"));, +		given(methodInvocation.getMethod()).willReturn(String.class.getMethod("toString"));, +++ b/spring-aop/src/test/java/org/springframework/aop/interceptor/SimpleTraceInterceptorTests.java, + * Copyright 2002-2018 the original author or authors., +		given(mi.getMethod()).willReturn(String.class.getMethod("toString"));, +		given(mi.getMethod()).willReturn(String.class.getMethod("toString"));, +++ b/spring-beans/src/test/java/org/springframework/beans/BeanUtilsTests.java, + * Copyright 2002-2018 the original author or authors., +		Method desiredMethod = MethodSignatureBean.class.getMethod("doSomethingElse", String.class, int.class);, +		Method desiredMethod = MethodSignatureBean.class.getMethod("doSomethingElse", String.class, int.class);, +		desiredMethod = MethodSignatureBean.class.getMethod("overloaded", String.class);, +		desiredMethod = MethodSignatureBean.class.getMethod("overloaded", String.class, BeanFactory.class);, +		Method desiredMethod = MethodSignatureBean.class.getMethod("doSomethingWithAnArray", String[].class);, +		desiredMethod = MethodSignatureBean.class.getMethod("doSomethingWithAMultiDimensionalArray", String[][].class);, +++ b/spring-aop/src/test/java/org/springframework/aop/interceptor/ConcurrencyThrottleInterceptorTests.java, + * Copyright 2002-2018 the original author or authors., +		proxyFactory.setInterfaces(ITestBean.class);, +		proxyFactory.setInterfaces(ITestBean.class);, +					i % 2 == 0 ? new OutOfMemoryError() : new IllegalStateException());, +++ b/spring-aop/src/test/java/org/springframework/aop/interceptor/CustomizableTraceInterceptorTests.java, + * Copyright 2002-2018 the original author or authors., +		given(methodInvocation.getMethod()).willReturn(String.class.getMethod("toString"));, +		given(methodInvocation.getMethod()).willReturn(String.class.getMethod("toString"));, +++ b/spring-aop/src/test/java/org/springframework/aop/interceptor/SimpleTraceInterceptorTests.java, + * Copyright 2002-2018 the original author or authors., +		given(mi.getMethod()).willReturn(String.class.getMethod("toString"));, +		given(mi.getMethod()).willReturn(String.class.getMethod("toString"));, +++ b/spring-beans/src/test/java/org/springframework/beans/BeanUtilsTests.java, + * Copyright 2002-2018 the original author or authors., +		Method desiredMethod = MethodSignatureBean.class.getMethod("doSomethingElse", String.class, int.class);, +		Method desiredMethod = MethodSignatureBean.class.getMethod("doSomethingElse", String.class, int.class);, +		desiredMethod = MethodSignatureBean.class.getMethod("overloaded", String.class);, +		desiredMethod = MethodSignatureBean.class.getMethod("overloaded", String.class, BeanFactory.class);, +		Method desiredMethod = MethodSignatureBean.class.getMethod("doSomethingWithAnArray", String[].class);, +		desiredMethod = MethodSignatureBean.class.getMethod("doSomethingWithAMultiDimensionalArray", String[][].class);, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/AutowireUtilsTests.java, + * Copyright 2002-2018 the original author or authors., +		Method notParameterized = ReflectionUtils.findMethod(MyTypeWithMethods.class, "notParameterized");, +		Method notParameterizedWithArguments = ReflectionUtils.findMethod(MyTypeWithMethods.class, "notParameterizedWithArguments", Integer.class, Boolean.class);, +		Method createProxy = ReflectionUtils.findMethod(MyTypeWithMethods.class, "createProxy", Object.class);, +		Method createNamedProxyWithDifferentTypes = ReflectionUtils.findMethod(MyTypeWithMethods.class, "createNamedProxy", String.class, Object.class);, +		Method createNamedProxyWithDuplicateTypes = ReflectionUtils.findMethod(MyTypeWithMethods.class, "createNamedProxy", String.class, Object.class);, +		Method createMock = ReflectionUtils.findMethod(MyTypeWithMethods.class, "createMock", Class.class);, +		Method createNamedMock = ReflectionUtils.findMethod(MyTypeWithMethods.class, "createNamedMock", String.class, Class.class);, +		Method createVMock = ReflectionUtils.findMethod(MyTypeWithMethods.class, "createVMock", Object.class, Class.class);, +		Method extractValueFrom = ReflectionUtils.findMethod(MyTypeWithMethods.class, "extractValueFrom", MyInterfaceType.class);, +		Method extractMagicValue = ReflectionUtils.findMethod(MyTypeWithMethods.class, "extractMagicValue", Map.class);, +++ b/spring-aop/src/test/java/org/springframework/aop/interceptor/ConcurrencyThrottleInterceptorTests.java, + * Copyright 2002-2018 the original author or authors., +		proxyFactory.setInterfaces(ITestBean.class);, +		proxyFactory.setInterfaces(ITestBean.class);, +					i % 2 == 0 ? new OutOfMemoryError() : new IllegalStateException());, +++ b/spring-aop/src/test/java/org/springframework/aop/interceptor/CustomizableTraceInterceptorTests.java, + * Copyright 2002-2018 the original author or authors., +		given(methodInvocation.getMethod()).willReturn(String.class.getMethod("toString"));, +		given(methodInvocation.getMethod()).willReturn(String.class.getMethod("toString"));, +++ b/spring-aop/src/test/java/org/springframework/aop/interceptor/SimpleTraceInterceptorTests.java, + * Copyright 2002-2018 the original author or authors., +		given(mi.getMethod()).willReturn(String.class.getMethod("toString"));, +		given(mi.getMethod()).willReturn(String.class.getMethod("toString"));, +++ b/spring-beans/src/test/java/org/springframework/beans/BeanUtilsTests.java, + * Copyright 2002-2018 the original author or authors., +		Method desiredMethod = MethodSignatureBean.class.getMethod("doSomethingElse", String.class, int.class);, +		Method desiredMethod = MethodSignatureBean.class.getMethod("doSomethingElse", String.class, int.class);, +		desiredMethod = MethodSignatureBean.class.getMethod("overloaded", String.class);, +		desiredMethod = MethodSignatureBean.class.getMethod("overloaded", String.class, BeanFactory.class);]