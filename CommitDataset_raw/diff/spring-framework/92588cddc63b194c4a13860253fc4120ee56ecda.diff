[+++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AopNamespaceUtils.java, + * Copyright 2002-2009 the original author or authors., +			boolean proxyTargetClass = Boolean.valueOf(sourceElement.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE));, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AopNamespaceUtils.java, + * Copyright 2002-2009 the original author or authors., +			boolean proxyTargetClass = Boolean.valueOf(sourceElement.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE));, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/AdvisedSupport.java, +import java.util.Arrays;, +import java.util.Collection;, +import org.springframework.util.CollectionUtils;, +	 * @deprecated as of Spring 3.0, in favor of {@link #addAdvisors}, +	@Deprecated, +		addAdvisors(Arrays.asList(advisors));, +	}, +, +	/**, +	 * Add all of the given advisors to this proxy configuration., +	 * @param advisors the advisors to register, +	 */, +	public void addAdvisors(Advisor... advisors) {, +		addAdvisors(Arrays.asList(advisors));, +	}, +, +	/**, +	 * Add all of the given advisors to this proxy configuration., +	 * @param advisors the advisors to register, +	 */, +	public void addAdvisors(Collection<Advisor> advisors) {, +		if (!CollectionUtils.isEmpty(advisors)) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AopNamespaceUtils.java, + * Copyright 2002-2009 the original author or authors., +			boolean proxyTargetClass = Boolean.valueOf(sourceElement.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE));, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/AdvisedSupport.java, +import java.util.Arrays;, +import java.util.Collection;, +import org.springframework.util.CollectionUtils;, +	 * @deprecated as of Spring 3.0, in favor of {@link #addAdvisors}, +	@Deprecated, +		addAdvisors(Arrays.asList(advisors));, +	}, +, +	/**, +	 * Add all of the given advisors to this proxy configuration., +	 * @param advisors the advisors to register, +	 */, +	public void addAdvisors(Advisor... advisors) {, +		addAdvisors(Arrays.asList(advisors));, +	}, +, +	/**, +	 * Add all of the given advisors to this proxy configuration., +	 * @param advisors the advisors to register, +	 */, +	public void addAdvisors(Collection<Advisor> advisors) {, +		if (!CollectionUtils.isEmpty(advisors)) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/AopContext.java, + * Copyright 2002-2009 the original author or authors., +	private static final ThreadLocal<Object> currentProxy = new NamedThreadLocal<Object>("Current AOP proxy");, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AopNamespaceUtils.java, + * Copyright 2002-2009 the original author or authors., +			boolean proxyTargetClass = Boolean.valueOf(sourceElement.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE));, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/AdvisedSupport.java, +import java.util.Arrays;, +import java.util.Collection;, +import org.springframework.util.CollectionUtils;, +	 * @deprecated as of Spring 3.0, in favor of {@link #addAdvisors}, +	@Deprecated, +		addAdvisors(Arrays.asList(advisors));, +	}, +, +	/**, +	 * Add all of the given advisors to this proxy configuration., +	 * @param advisors the advisors to register, +	 */, +	public void addAdvisors(Advisor... advisors) {, +		addAdvisors(Arrays.asList(advisors));, +	}, +, +	/**, +	 * Add all of the given advisors to this proxy configuration., +	 * @param advisors the advisors to register, +	 */, +	public void addAdvisors(Collection<Advisor> advisors) {, +		if (!CollectionUtils.isEmpty(advisors)) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/AopContext.java, + * Copyright 2002-2009 the original author or authors., +	private static final ThreadLocal<Object> currentProxy = new NamedThreadLocal<Object>("Current AOP proxy");, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/JdkDynamicAopProxy.java, + * Copyright 2002-2009 the original author or authors., +		for (Class proxiedInterface : proxiedInterfaces) {, +			for (Method method : methods) {, +			List<Object> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AopNamespaceUtils.java, + * Copyright 2002-2009 the original author or authors., +			boolean proxyTargetClass = Boolean.valueOf(sourceElement.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE));, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/AdvisedSupport.java, +import java.util.Arrays;, +import java.util.Collection;, +import org.springframework.util.CollectionUtils;, +	 * @deprecated as of Spring 3.0, in favor of {@link #addAdvisors}]