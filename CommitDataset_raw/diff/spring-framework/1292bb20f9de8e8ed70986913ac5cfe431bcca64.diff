[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultControllerSpec.java, +import org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;, +	public DefaultControllerSpec argumentResolvers(Consumer<ArgumentResolverConfigurer> consumer) {, +		this.configurer.argumentResolverConsumer = consumer;, +		return this;, +	}, +, +	@Override, +		private Consumer<ArgumentResolverConfigurer> argumentResolverConsumer;, +, +		public void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {, +			if (this.argumentResolverConsumer != null) {, +				this.argumentResolverConsumer.accept(configurer);, +			}, +		}, +, +		@Override, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultControllerSpec.java, +import org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;, +	public DefaultControllerSpec argumentResolvers(Consumer<ArgumentResolverConfigurer> consumer) {, +		this.configurer.argumentResolverConsumer = consumer;, +		return this;, +	}, +, +	@Override, +		private Consumer<ArgumentResolverConfigurer> argumentResolverConsumer;, +, +		public void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {, +			if (this.argumentResolverConsumer != null) {, +				this.argumentResolverConsumer.accept(configurer);, +			}, +		}, +, +		@Override, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/WebTestClient.java, +import org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;, +		 * Configure resolvers for custom controller method arguments., +		 * @see WebFluxConfigurer#configureHttpMessageCodecs, +		 */, +		ControllerSpec argumentResolvers(Consumer<ArgumentResolverConfigurer> configurer);, +, +		/**, +		 * Configure custom HTTP message readers and writers or override built-in ones., +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultControllerSpec.java, +import org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;, +	public DefaultControllerSpec argumentResolvers(Consumer<ArgumentResolverConfigurer> consumer) {, +		this.configurer.argumentResolverConsumer = consumer;, +		return this;, +	}, +, +	@Override, +		private Consumer<ArgumentResolverConfigurer> argumentResolverConsumer;, +, +		public void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {, +			if (this.argumentResolverConsumer != null) {, +				this.argumentResolverConsumer.accept(configurer);, +			}, +		}, +, +		@Override, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/WebTestClient.java, +import org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;, +		 * Configure resolvers for custom controller method arguments., +		 * @see WebFluxConfigurer#configureHttpMessageCodecs, +		 */, +		ControllerSpec argumentResolvers(Consumer<ArgumentResolverConfigurer> configurer);, +, +		/**, +		 * Configure custom HTTP message readers and writers or override built-in ones., +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/DefaultControllerSpecTests.java, +import java.util.function.Consumer;, +, +import org.springframework.format.FormatterRegistry;, +import org.springframework.http.codec.ServerCodecConfigurer;, +import org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder;, +import org.springframework.web.reactive.config.CorsRegistry;, +import org.springframework.web.reactive.config.PathMatchConfigurer;, +import org.springframework.web.reactive.config.ViewResolverRegistry;, +import org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer;, +, +import static org.junit.Assert.assertNotNull;, +	@Test, +	public void configurerConsumers() throws Exception {, +, +		TestConsumer<ArgumentResolverConfigurer> argumentResolverConsumer = new TestConsumer<>();, +		TestConsumer<RequestedContentTypeResolverBuilder> contenTypeResolverConsumer = new TestConsumer<>();, +		TestConsumer<CorsRegistry> corsRegistryConsumer = new TestConsumer<>();, +		TestConsumer<FormatterRegistry> formatterConsumer = new TestConsumer<>();, +		TestConsumer<ServerCodecConfigurer> codecsConsumer = new TestConsumer<>();, +		TestConsumer<PathMatchConfigurer> pathMatchingConsumer = new TestConsumer<>();, +		TestConsumer<ViewResolverRegistry> viewResolverConsumer = new TestConsumer<>();, +, +		new DefaultControllerSpec(new MyController()), +				.argumentResolvers(argumentResolverConsumer), +				.contentTypeResolver(contenTypeResolverConsumer), +				.corsMappings(corsRegistryConsumer), +				.formatters(formatterConsumer), +				.httpMessageCodecs(codecsConsumer), +				.pathMatching(pathMatchingConsumer), +				.viewResolvers(viewResolverConsumer)]