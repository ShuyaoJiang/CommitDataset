[+++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriComponents.java, +import java.util.ArrayList;, +import java.util.Iterator;, +import org.springframework.util.CollectionUtils;, +public final class UriComponents {, +    private static final String DEFAULT_ENCODING = "UTF-8";, +    private static final char PATH_DELIMITER = '/';, +	/** Captures URI template variable names. */, +	private static final Pattern NAMES_PATTERN = Pattern.compile("\\{([^/]+?)\\}");, +	private final String scheme;, +	private final String userInfo;, +	private final String host;, +	private final int port;, +	private final List<String> pathSegments;, +	private final MultiValueMap<String, String> queryParams;, +	private final String fragment;, +	public UriComponents(String scheme,, +						 int port,, +						 List<String> pathSegments,, +						 MultiValueMap<String, String> queryParams,, +		this.scheme = scheme;, +		this.userInfo = userInfo;, +		this.host = host;, +		this.port = port;, +		if (pathSegments == null) {, +			pathSegments = Collections.emptyList();, +		this.pathSegments = Collections.unmodifiableList(pathSegments);, +		if (queryParams == null) {, +			queryParams = new LinkedMultiValueMap<String, String>(0);, +		this.queryParams = CollectionUtils.unmodifiableMultiValueMap(queryParams);, +		this.fragment = fragment;, +		this.encoded = encoded;, +		return scheme;, +		return userInfo;, +		return host;, +     * Returns the port. Returns {@code -1} if no port has been set., +     * @return the port, +    public int getPort() {, +		return port;, +		if (!pathSegments.isEmpty()) {, +			StringBuilder pathBuilder = new StringBuilder();, +			for (String pathSegment : pathSegments) {, +				if (StringUtils.hasLength(pathSegment)) {, +					boolean startsWithSlash = pathSegment.charAt(0) == PATH_DELIMITER;, +					boolean endsWithSlash =, +							pathBuilder.length() > 0 && pathBuilder.charAt(pathBuilder.length() - 1) == PATH_DELIMITER;, +, +					if (!endsWithSlash && !startsWithSlash) {, +						pathBuilder.append('/');, +					}, +					else if (endsWithSlash && startsWithSlash) {, +						pathSegment = pathSegment.substring(1);, +					}, +					pathBuilder.append(pathSegment);, +				}, +			}, +			return pathBuilder.toString();, +		}, +		else {, +			return null;, +		}, +		return pathSegments;, +		if (!queryParams.isEmpty()) {, +			StringBuilder queryBuilder = new StringBuilder();, +			for (Map.Entry<String, List<String>> entry : queryParams.entrySet()) {, +				String name = entry.getKey();, +				List<String> values = entry.getValue();, +				if (CollectionUtils.isEmpty(values)) {, +					if (queryBuilder.length() != 0) {, +						queryBuilder.append('&');, +					}, +					queryBuilder.append(name);, +				}, +				else {, +					for (Object value : values) {, +						if (queryBuilder.length() != 0) {, +							queryBuilder.append('&');, +						}, +						queryBuilder.append(name);, +, +						if (value != null) {, +							queryBuilder.append('=');, +							queryBuilder.append(value.toString());, +						}, +					}, +				}, +			}, +			return queryBuilder.toString();, +		}, +		else {, +			return null;, +		}, +		return queryParams;, +		return fragment;, +    // encoding, +	/**, +	 * Encodes all URI components using their specific encoding rules, and returns the result as a new, +	 * {@code UriComponents} instance. This method uses UTF-8 to encode., +	 *, +	 * @return the encoded uri components]