[+++ b/org.springframework.core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java, +	private static final Map<Member, String[]> NO_DEBUG_INFO_MAP = Collections.emptyMap();, +			map = inspectClass(declaringClass);, +			parameterNamesCache.put(declaringClass, map);, +		if (map != NO_DEBUG_INFO_MAP) {, +			return map.get(method);, +			map = inspectClass(declaringClass);, +			parameterNamesCache.put(declaringClass, map);, +		if (map != NO_DEBUG_INFO_MAP) {, +			return map.get(ctor);, +		}, +, +		return null;, +	 * Inspects the target class. Exceptions will be logged and a maker map returned to indicate the lack of debug information., +	 * @param clazz, +	 * @return, +	private Map<Member, String[]> inspectClass(Class<?> clazz) {, +, +			return NO_DEBUG_INFO_MAP;, +		return NO_DEBUG_INFO_MAP;, +++ b/org.springframework.core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java, +	private static final Map<Member, String[]> NO_DEBUG_INFO_MAP = Collections.emptyMap();, +			map = inspectClass(declaringClass);, +			parameterNamesCache.put(declaringClass, map);, +		if (map != NO_DEBUG_INFO_MAP) {, +			return map.get(method);, +			map = inspectClass(declaringClass);, +			parameterNamesCache.put(declaringClass, map);, +		if (map != NO_DEBUG_INFO_MAP) {, +			return map.get(ctor);, +		}, +, +		return null;, +	 * Inspects the target class. Exceptions will be logged and a maker map returned to indicate the lack of debug information., +	 * @param clazz, +	 * @return, +	private Map<Member, String[]> inspectClass(Class<?> clazz) {, +, +			return NO_DEBUG_INFO_MAP;, +		return NO_DEBUG_INFO_MAP;, +++ b/org.springframework.core/src/test/java/org/springframework/core/LocalVariableTableParameterNameDiscovererTests.java, +		, +		//System.in.read();, +		//System.in.read();]