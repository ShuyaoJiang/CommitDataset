[+++ b/org.springframework.web/src/main/java/org/springframework/remoting/caucho/HessianExporter.java, +import java.io.BufferedInputStream;, + * <b>Note: As of Spring 3.0, this exporter requires Hessian 3.2 or above.</b>, +		doInvoke(this.skeleton, inputStream, outputStream);, +	/**, +	 * Actually invoke the skeleton with the given streams., +	 * @param skeleton the skeleton to invoke, +	 * @param inputStream the request stream, +	 * @param outputStream the response stream, +	 * @throws Throwable if invocation failed, +	 */, +	protected void doInvoke(HessianSkeleton skeleton, InputStream inputStream, OutputStream outputStream), +			throws Throwable {, +, +		ClassLoader originalClassLoader = overrideThreadContextClassLoader();, +		try {, +				HessianDebugInputStream dis = new HessianDebugInputStream(inputStream, debugWriter);, +				dis.startTop2();, +				HessianDebugOutputStream dos = new HessianDebugOutputStream(outputStream, debugWriter);, +				dos.startTop2();, +				isToUse = dis;, +				osToUse = dos;, +			}, +, +			if (!isToUse.markSupported()) {, +				isToUse = new BufferedInputStream(isToUse);, +				isToUse.mark(1);, +				// Hessian 2.0 stream, +			else if (code == 'C') {, +				// Hessian 2.0 call... for some reason not handled in HessianServlet!, +				isToUse.reset();, +				in = new Hessian2Input(isToUse);, +				out = new Hessian2Output(osToUse);, +				in.readCall();, +			}, +				// Hessian 1.0 call, +				throw new IOException("Expected 'H'/'C' (Hessian 2.0) or 'c' (Hessian 1.0) in hessian input at " + code);, +				skeleton.invoke(in, out);, +		finally {, +			resetThreadContextClassLoader(originalClassLoader);, +		}, +	}, +++ b/org.springframework.web/src/main/java/org/springframework/remoting/caucho/HessianExporter.java, +import java.io.BufferedInputStream;, + * <b>Note: As of Spring 3.0, this exporter requires Hessian 3.2 or above.</b>, +		doInvoke(this.skeleton, inputStream, outputStream);, +	/**, +	 * Actually invoke the skeleton with the given streams., +	 * @param skeleton the skeleton to invoke, +	 * @param inputStream the request stream, +	 * @param outputStream the response stream, +	 * @throws Throwable if invocation failed, +	 */, +	protected void doInvoke(HessianSkeleton skeleton, InputStream inputStream, OutputStream outputStream), +			throws Throwable {, +, +		ClassLoader originalClassLoader = overrideThreadContextClassLoader();, +		try {, +				HessianDebugInputStream dis = new HessianDebugInputStream(inputStream, debugWriter);, +				dis.startTop2();, +				HessianDebugOutputStream dos = new HessianDebugOutputStream(outputStream, debugWriter);, +				dos.startTop2();, +				isToUse = dis;, +				osToUse = dos;, +			}, +, +			if (!isToUse.markSupported()) {, +				isToUse = new BufferedInputStream(isToUse);, +				isToUse.mark(1);, +				// Hessian 2.0 stream, +			else if (code == 'C') {, +				// Hessian 2.0 call... for some reason not handled in HessianServlet!, +				isToUse.reset();, +				in = new Hessian2Input(isToUse);, +				out = new Hessian2Output(osToUse);, +				in.readCall();, +			}, +				// Hessian 1.0 call, +				throw new IOException("Expected 'H'/'C' (Hessian 2.0) or 'c' (Hessian 1.0) in hessian input at " + code);, +				skeleton.invoke(in, out);, +		finally {, +			resetThreadContextClassLoader(originalClassLoader);, +		}, +	}, +++ b/org.springframework.web/src/main/java/org/springframework/remoting/caucho/HessianServiceExporter.java, + * <b>Note: As of Spring 3.0, this exporter requires Hessian 3.2 or above.</b>, + * <p>Hessian services exported with this class can be accessed by, +++ b/org.springframework.web/src/main/java/org/springframework/remoting/caucho/HessianExporter.java, +import java.io.BufferedInputStream;, + * <b>Note: As of Spring 3.0, this exporter requires Hessian 3.2 or above.</b>, +		doInvoke(this.skeleton, inputStream, outputStream);, +	/**, +	 * Actually invoke the skeleton with the given streams., +	 * @param skeleton the skeleton to invoke, +	 * @param inputStream the request stream, +	 * @param outputStream the response stream, +	 * @throws Throwable if invocation failed, +	 */, +	protected void doInvoke(HessianSkeleton skeleton, InputStream inputStream, OutputStream outputStream), +			throws Throwable {]