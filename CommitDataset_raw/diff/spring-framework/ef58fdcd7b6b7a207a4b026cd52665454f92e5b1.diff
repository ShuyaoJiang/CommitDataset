[+++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/StringDecoder.java, +			byte[] bytes = new byte[content.readableByteCount()];, +			content.read(bytes);, +			return new String(bytes, charset);, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/StringDecoder.java, +			byte[] bytes = new byte[content.readableByteCount()];, +			content.read(bytes);, +			return new String(bytes, charset);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/client/reactive/DefaultHttpRequestBuilder.java, +import org.springframework.util.Assert;, +	/**, +	 * Allows performing more complex operations with a strategy. For example, a, +	 * {@link RequestPostProcessor} implementation might accept the arguments of, +	 * username and password and set an HTTP Basic authentication header., +	 *, +	 * @param postProcessor the {@link RequestPostProcessor} to use. Cannot be null., +	 *, +	 * @return this instance for further modifications., +	 */, +	public DefaultHttpRequestBuilder apply(RequestPostProcessor postProcessor) {, +		Assert.notNull(postProcessor, "`postProcessor` is required");, +		postProcessor.postProcess(this);, +		return this;, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/StringDecoder.java, +			byte[] bytes = new byte[content.readableByteCount()];, +			content.read(bytes);, +			return new String(bytes, charset);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/client/reactive/DefaultHttpRequestBuilder.java, +import org.springframework.util.Assert;, +	/**, +	 * Allows performing more complex operations with a strategy. For example, a, +	 * {@link RequestPostProcessor} implementation might accept the arguments of, +	 * username and password and set an HTTP Basic authentication header., +	 *, +	 * @param postProcessor the {@link RequestPostProcessor} to use. Cannot be null., +	 *, +	 * @return this instance for further modifications., +	 */, +	public DefaultHttpRequestBuilder apply(RequestPostProcessor postProcessor) {, +		Assert.notNull(postProcessor, "`postProcessor` is required");, +		postProcessor.postProcess(this);, +		return this;, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/client/reactive/RequestPostProcessor.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.client.reactive;, +, +/**, + * Allows post processing the {@link DefaultHttpRequestBuilder} for strategy for, + * performing more complex operations., + *, + * @author Rob Winch, + * @see DefaultHttpRequestBuilder#apply(RequestPostProcessor), + */, +public interface RequestPostProcessor {, +, +	/**, +	 * Implementations can modify the {@link DefaultHttpRequestBuilder} passed, +	 * in., +	 *, +	 * @param toPostProcess, +	 *            the {@link DefaultHttpRequestBuilder} to be modified., +	 */, +	void postProcess(DefaultHttpRequestBuilder toPostProcess);, +}, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/support/StringDecoder.java, +			byte[] bytes = new byte[content.readableByteCount()];, +			content.read(bytes);, +			return new String(bytes, charset);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/client/reactive/DefaultHttpRequestBuilder.java, +import org.springframework.util.Assert;, +	/**, +	 * Allows performing more complex operations with a strategy. For example, a, +	 * {@link RequestPostProcessor} implementation might accept the arguments of, +	 * username and password and set an HTTP Basic authentication header., +	 *, +	 * @param postProcessor the {@link RequestPostProcessor} to use. Cannot be null., +	 *, +	 * @return this instance for further modifications., +	 */, +	public DefaultHttpRequestBuilder apply(RequestPostProcessor postProcessor) {, +		Assert.notNull(postProcessor, "`postProcessor` is required");]