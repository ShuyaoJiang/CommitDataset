[+++ b/org.springframework.test/src/main/java/org/springframework/test/context/TestContext.java, +import org.springframework.test.context.support.AnnotationConfigContextLoader;, +, +			// TODO [SPR-6184] Remove interim-solution ACCL check., +			//, +			// Config classes are not defined, but the context loader might, +			// have been set to AnnotationConfigContextLoader., +			if (AnnotationConfigContextLoader.class.isAssignableFrom(cc.loader())) {, +				return contextLoader.processLocations(declaringClass, new String[] {});, +			}, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/TestContext.java, +import org.springframework.test.context.support.AnnotationConfigContextLoader;, +, +			// TODO [SPR-6184] Remove interim-solution ACCL check., +			//, +			// Config classes are not defined, but the context loader might, +			// have been set to AnnotationConfigContextLoader., +			if (AnnotationConfigContextLoader.class.isAssignableFrom(cc.loader())) {, +				return contextLoader.processLocations(declaringClass, new String[] {});, +			}, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/AnnotationConfigContextLoader.java, +	 * Registers {@link org.springframework.context.annotation.Configuration configuration classes}, +	 * in the supplied {@link AnnotationConfigApplicationContext} from the specified, +	 * class names. Each class name must be the fully qualified class name of a, +	 * configuration class. The <code>AnnotationConfigApplicationContext</code>, +	 * assumes the responsibility of loading the appropriate bean definitions., +	 * <p>Note that this method does not call {@link #createBeanDefinitionReader}., +	 * @param context the context in which the configuration classes should be registered, +	 * @param classNames the names of configuration classes to register in the context, +	 * @throws IllegalArgumentException if the supplied context is not an instance of, +	 * <code>AnnotationConfigApplicationContext</code> or if a supplied class name, +	 * does not represent a class, +	 * @see #createGenericApplicationContext, +	protected void loadBeanDefinitions(GenericApplicationContext context, String... classNames) {, +		Class<?>[] configClasses = new Class<?>[classNames.length];, +		for (int i = 0; i < classNames.length; i++) {, +			String className = classNames[i];, +				configClasses[i] = (Class<?>) getClass().getClassLoader().loadClass(className);, +					"The supplied class name [%s] does not represent a class.", className), e);, +		((AnnotationConfigApplicationContext) context).register(configClasses);, +	 * Generates the default {@link org.springframework.context.annotation.Configuration configuration class}, +	 * names array based on the supplied class., +	 * <p>For example, if the supplied class is <code>com.example.MyTest</code>,, +	 * the generated array will contain a single string with a value of, +	 * &quot;com.example.MyTest<code>&lt;suffix&gt;</code>&quot;,, +	 * where <code>&lt;suffix&gt;</code> is the value of the, +	 * {@link #getResourceSuffix() resource suffix} string., +	 * @param clazz the class for which the default configuration class names are to be generated, +	 * @return an array of default configuration class names, +	 * @see #getResourceSuffix(), +		Assert.notNull(clazz, "Class must not be null");, +		String suffix = getResourceSuffix();, +		Assert.hasText(suffix, "Resource suffix must not be empty");, +		return new String[] { clazz.getName() + suffix };, +	 * Returns &quot;Config</code>&quot;; intended to be used as a suffix, +	 * to be appended to the name of the test class., +++ b/org.springframework.test/src/main/java/org/springframework/test/context/TestContext.java, +import org.springframework.test.context.support.AnnotationConfigContextLoader;, +, +			// TODO [SPR-6184] Remove interim-solution ACCL check., +			//, +			// Config classes are not defined, but the context loader might, +			// have been set to AnnotationConfigContextLoader., +			if (AnnotationConfigContextLoader.class.isAssignableFrom(cc.loader())) {, +				return contextLoader.processLocations(declaringClass, new String[] {});, +			}, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/AnnotationConfigContextLoader.java, +	 * Registers {@link org.springframework.context.annotation.Configuration configuration classes}, +	 * in the supplied {@link AnnotationConfigApplicationContext} from the specified, +	 * class names. Each class name must be the fully qualified class name of a, +	 * configuration class. The <code>AnnotationConfigApplicationContext</code>, +	 * assumes the responsibility of loading the appropriate bean definitions., +	 * <p>Note that this method does not call {@link #createBeanDefinitionReader}., +	 * @param context the context in which the configuration classes should be registered, +	 * @param classNames the names of configuration classes to register in the context, +	 * @throws IllegalArgumentException if the supplied context is not an instance of, +	 * <code>AnnotationConfigApplicationContext</code> or if a supplied class name, +	 * does not represent a class, +	 * @see #createGenericApplicationContext, +	protected void loadBeanDefinitions(GenericApplicationContext context, String... classNames) {, +		Class<?>[] configClasses = new Class<?>[classNames.length];, +		for (int i = 0; i < classNames.length; i++) {, +			String className = classNames[i];, +				configClasses[i] = (Class<?>) getClass().getClassLoader().loadClass(className);, +					"The supplied class name [%s] does not represent a class.", className), e);, +		((AnnotationConfigApplicationContext) context).register(configClasses);, +	 * Generates the default {@link org.springframework.context.annotation.Configuration configuration class}, +	 * names array based on the supplied class., +	 * <p>For example, if the supplied class is <code>com.example.MyTest</code>,, +	 * the generated array will contain a single string with a value of, +	 * &quot;com.example.MyTest<code>&lt;suffix&gt;</code>&quot;,, +	 * where <code>&lt;suffix&gt;</code> is the value of the, +	 * {@link #getResourceSuffix() resource suffix} string., +	 * @param clazz the class for which the default configuration class names are to be generated, +	 * @return an array of default configuration class names, +	 * @see #getResourceSuffix(), +		Assert.notNull(clazz, "Class must not be null");, +		String suffix = getResourceSuffix();, +		Assert.hasText(suffix, "Resource suffix must not be empty");, +		return new String[] { clazz.getName() + suffix };]