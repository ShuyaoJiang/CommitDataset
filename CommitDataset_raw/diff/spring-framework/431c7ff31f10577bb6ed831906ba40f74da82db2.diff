[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java, +					(boolean.class.equals(method.getReturnType()) || Boolean.class.equals(method.getReturnType())) &&, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java, +					(boolean.class.equals(method.getReturnType()) || Boolean.class.equals(method.getReturnType())) &&, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java, + * @author Juergen Hoeller, +		assertEquals(12,expr.getValue(eContext));, +		assertEquals(null,expr.getValue(eContext));, +			fail("Should have failed to find a method to which it could pass null");, +		assertEquals("ab",expr.getValue(eContext));, +		assertEquals("anullc",expr.getValue(eContext));, +		assertEquals("instance",expr.getValue(eContext));, +		assertEquals("instance",expr.getValue(eContext));, +		assertEquals("instance",expr.getValue(eContext));, +		assertEquals("instance",expr.getValue(eContext));, +		assertEquals(Map.Entry.class,expr.getValue(eContext));, +		assertEquals(12,expr.getValue(eContext));, +		assertEquals(13,expr.getValue(eContext));, +		assertEquals("bar", expr.getValue(eContext));, +		assertEquals("Dave",name);, +		assertEquals("Dave",name);, +		assertEquals("Dave",name);, +		assertEquals("Dave2",name);, +		assertEquals("Elephant",name);, +		assertFalse(propertyAccessor.canRead(context, null, "abc"));, +		assertFalse(propertyAccessor.canWrite(context, null, "abc"));, +			fail("Should have failed with an AccessException");, +			fail("Should have failed with an AccessException");, +		assertEquals("abc",name);, +		assertEquals("hello",name);, +		assertEquals("hello",name);, +		assertEquals("hello",name);, +		assertEquals("hello",name);, +		assertEquals("wibble",name);, +		assertEquals("wobble",name);, +		assertEquals("wabble",name);, +		assertEquals("wubble",name);, +		assertEquals("webble",name);, +		assertEquals("tribble",name);, +		assertEquals("wobble",name);, +		assertEquals("wobble",name);, +		assertEquals("world",g.wibble);, +		assertEquals("world",g.wibble);, +		assertEquals("world",g.value);, +		assertEquals("world",g.value);, +		assertEquals("wibble",expr.getValue(eContext,String.class));, +		assertEquals("wibble",expr.getValue(eContext,String.class));, +		assertEquals(expectedValue,expr.getValue(TestScenarioCreator.getTestEvaluationContext()));, +			fail("Should have failed");, +			assertEquals(expectedMessage,e.getMessage());, +			assertEquals("custard",expr.getValue(eContext,String.class));, +			assertEquals(SpelMessage.NO_BEAN_RESOLVER_REGISTERED,see.getMessageCode());, +			assertEquals("foo",see.getInserts()[0]);, +		assertEquals("custard",expr.getValue(eContext,String.class));, +		assertEquals(null,expr.getValue(eContext,String.class));, +			assertEquals(null,expr.getValue(eContext,String.class));, +			assertEquals(SpelMessage.EXCEPTION_DURING_BEAN_RESOLUTION,see.getMessageCode());, +			assertEquals("goo",see.getInserts()[0]);, +			assertTrue(see.getCause() instanceof AccessException);, +			assertTrue(((AccessException)see.getCause()).getMessage().startsWith("DONT"));, +		assertEquals("trouble",expr.getValue(eContext,String.class));, +			assertEquals("trouble",expr.getValue(eContext,String.class));, +			assertEquals(SpelMessage.INVALID_BEAN_REFERENCE,spe.getMessageCode());, +		assertEquals("default", expr.getValue());, +		assertEquals("default", expr.getValue());, +		assertEquals(null, expr.getValue());, +			fail();, +			assertEquals(SpelMessage.TYPE_CONVERSION_ERROR,see.getMessageCode());, +		assertEquals(null, expr.getValue());, +			fail();, +			assertEquals(SpelMessage.SETVALUE_NOT_SUPPORTED,see.getMessageCode());, +		assertEquals("default", expr.getValue());, +		assertEquals("default", expr.getValue());, +		assertEquals("default", expr.getValue());, +		assertEquals("Arthur", evaluated);, +		assertEquals("Arthur",evaluated);, +		assertEquals(Boolean.class,value.get(0).getClass());, +		assertEquals(null, evaluated.getElementTypeDescriptor());, +		assertEquals(Boolean.class,value[0].getClass());, +		assertEquals(Boolean.class, evaluated.getElementTypeDescriptor().getType());, +		assertEquals(Boolean.class,value.get(0).getClass());, +		assertEquals(null, evaluated.getElementTypeDescriptor());, +		assertEquals("abc",value);, +		assertEquals("def",value);, +		assertEquals("xyz",value);, +		assertEquals(1,exp.getValue(ctx));, +		assertEquals(3,exp.getValue(ctx));, +		assertEquals("abc",exp.getValue(ctx));, +			assertEquals("Equal assertion failed for SPR_9486_floatFunctionResolverTest Test: ", expectedResult, result);, +			fail("Test failed - SPR_9486_floatFunctionResolverTest");, +			assertEquals("Equal assertion failed for SPR_9486_addFloatWithDoubleTest Test: ", expectedNumber, result);, +			fail("Test failed - SPR_9486_addFloatWithDoubleTest");, +			assertEquals("Equal assertion failed for SPR_9486_addFloatWithFloatTest Test: ", expectedNumber, result);, +			fail("Test failed - SPR_9486_addFloatWithFloatTest");, +			assertEquals("Equal assertion failed for SPR_9486_subtractFloatWithDoubleTest Test: ", expectedNumber, result);, +			fail("Test failed - SPR_9486_subtractFloatWithDoubleTest");, +			assertEquals("Equal assertion failed for SPR_9486_subtractFloatWithFloatTest Test: ", expectedNumber, result);, +			fail("Test failed - SPR_9486_subtractFloatWithFloatTest");, +			assertEquals("Equal assertion failed for float multiplied by double Test: ", expectedNumber, result);, +			fail("Test failed - SPR_9486_multiplyFloatWithDoubleTest");]