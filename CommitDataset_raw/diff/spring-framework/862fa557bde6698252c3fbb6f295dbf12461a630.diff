[+++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, + * Copyright 2002-2019 the original author or authors., +		for(ReactiveAdapter adapter : this.adapters) {, +			if (adapter.getReactiveType() == clazz) {, +				return adapter;, +			}, +		}, +		for(ReactiveAdapter adapter : this.adapters) {, +			if (adapter.getReactiveType().isAssignableFrom(clazz)) {, +				return adapter;, +			}, +		}, +		return null;, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, + * Copyright 2002-2019 the original author or authors., +		for(ReactiveAdapter adapter : this.adapters) {, +			if (adapter.getReactiveType() == clazz) {, +				return adapter;, +			}, +		}, +		for(ReactiveAdapter adapter : this.adapters) {, +			if (adapter.getReactiveType().isAssignableFrom(clazz)) {, +				return adapter;, +			}, +		}, +		return null;, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractEncoder.java, + * Copyright 2002-2019 the original author or authors., +		for(MimeType candidate : this.encodableMimeTypes) {, +			if (candidate.isCompatibleWith(mimeType)) {, +				return true;, +			}, +		}, +		return false;, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, + * Copyright 2002-2019 the original author or authors., +		for(ReactiveAdapter adapter : this.adapters) {, +			if (adapter.getReactiveType() == clazz) {, +				return adapter;, +			}, +		}, +		for(ReactiveAdapter adapter : this.adapters) {, +			if (adapter.getReactiveType().isAssignableFrom(clazz)) {, +				return adapter;, +			}, +		}, +		return null;, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractEncoder.java, + * Copyright 2002-2019 the original author or authors., +		for(MimeType candidate : this.encodableMimeTypes) {, +			if (candidate.isCompatibleWith(mimeType)) {, +				return true;, +			}, +		}, +		return false;, +++ b/spring-core/src/main/java/org/springframework/core/log/CompositeLog.java, + * Copyright 2002-2019 the original author or authors., +		for (Log logger : loggers) {, +			if (predicate.test(logger)) {, +				return logger;, +			}, +		}, +		return NO_OP_LOG;, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, + * Copyright 2002-2019 the original author or authors., +		for(ReactiveAdapter adapter : this.adapters) {, +			if (adapter.getReactiveType() == clazz) {, +				return adapter;, +			}, +		}, +		for(ReactiveAdapter adapter : this.adapters) {, +			if (adapter.getReactiveType().isAssignableFrom(clazz)) {, +				return adapter;, +			}, +		}, +		return null;, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractEncoder.java, + * Copyright 2002-2019 the original author or authors., +		for(MimeType candidate : this.encodableMimeTypes) {, +			if (candidate.isCompatibleWith(mimeType)) {, +				return true;, +			}, +		}, +		return false;, +++ b/spring-core/src/main/java/org/springframework/core/log/CompositeLog.java, + * Copyright 2002-2019 the original author or authors., +		for (Log logger : loggers) {, +			if (predicate.test(logger)) {, +				return logger;, +			}, +		}, +		return NO_OP_LOG;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, + * Copyright 2002-2019 the original author or authors., +import java.util.ArrayList;, +		List<MediaType> writableMediaTypes = getMediaTypesFor(elementType);, +		MediaType bestMediaType = selectMediaType(exchange, () -> writableMediaTypes);, +			if (writableMediaTypes.isEmpty()) {, +		return Mono.error(new NotAcceptableStatusException(writableMediaTypes));, +		List<MediaType> writableMediaTypes = new ArrayList<>();]