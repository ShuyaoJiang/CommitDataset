[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +	private final Map<String, StompRelaySession> relaySessions = new ConcurrentHashMap<String, StompRelaySession>();, +		SystemStompRelaySession session = new SystemStompRelaySession();, +			sessionId = (sessionId == null) ? SystemStompRelaySession.ID : sessionId;, +				StompRelaySession session = new StompRelaySession(sessionId);, +				StompRelaySession session = this.relaySessions.remove(sessionId);, +				StompRelaySession session = this.relaySessions.get(sessionId);, +	private class StompRelaySession {, +		private StompRelaySession(String sessionId) {, +			Composable<TcpConnection<Message<byte[]>, Message<byte[]>>> promise = initConnection();, +					handleConnectionReady(connection, connectMessage);, +		protected Composable<TcpConnection<Message<byte[]>, Message<byte[]>>> initConnection() {, +		protected void handleConnectionReady(, +				TcpConnection<Message<byte[]>, Message<byte[]>> tcpConn, final Message<?> connectMessage) {, +, +		protected void connectionClosed() {, +			relaySessions.remove(this.sessionId);, +			if (this.stompConnection.isReady()) {, +				sendError("Lost connection to the broker");, +			}, +		}, +, +				logger.warn("Connection to STOMP broker is not active, discarding message: " + message);, +				return;, +			forwardInternal(tcpConnection, message);, +		private boolean forwardInternal(, +				TcpConnection<Message<byte[]>, Message<byte[]>> tcpConnection, Message<?> message) {, +			@SuppressWarnings("unchecked"), +			Message<byte[]> byteMessage = (Message<byte[]>) message;, +, +			tcpConnection.send(byteMessage, new Consumer<Boolean>() {, +	private class SystemStompRelaySession extends StompRelaySession {, +		public SystemStompRelaySession() {, +		protected Composable<TcpConnection<Message<byte[]>, Message<byte[]>>> initConnection() {]