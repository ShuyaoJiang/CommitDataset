[+++ b/org.springframework.core/ivy.xml, +++ b/org.springframework.core/ivy.xml, +++ b/org.springframework.core/pom.xml, +++ b/org.springframework.core/ivy.xml, +++ b/org.springframework.core/pom.xml, +++ b/org.springframework.core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java, +			return new VfsResource(VfsUtils.getRoot(url));, +			return new VfsResource(VfsUtils.getRoot(uri));, +++ b/org.springframework.core/ivy.xml, +++ b/org.springframework.core/pom.xml, +++ b/org.springframework.core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java, +			return new VfsResource(VfsUtils.getRoot(url));, +			return new VfsResource(VfsUtils.getRoot(uri));, +++ b/org.springframework.core/src/main/java/org/springframework/core/io/VfsResource.java, + * Copyright 2002-2010 the original author or authors., + * @author Costin Leau, + * @see org.jboss.vfs.VirtualFile, +	private final Object resource;, +	public VfsResource(Object resources) {, +		Assert.notNull(resources, "VirtualFile must not be null");, +		this.resource = resources;, +		return VfsUtils.exists(resource);, +		return VfsUtils.isReadable(resource);, +		return VfsUtils.getLastModified(resource);, +		return VfsUtils.getInputStream(resource);, +			return VfsUtils.getURL(resource);, +		} catch (Exception ex) {, +			throw new NestedIOException("Failed to obtain URL for file " + this.resource, ex);, +			return VfsUtils.getURI(resource);, +		} catch (Exception ex) {, +			throw new NestedIOException("Failed to obtain URI for " + this.resource, ex);, +		return VfsUtils.getFile(resource);, +		if (!relativePath.startsWith(".") && relativePath.contains("/")) {, +			try {, +				return new VfsResource(VfsUtils.getChild(resource, relativePath));, +			} catch (IOException ex) {, +				// fall back to #getRelative, +			}, +		}, +, +		return new VfsResource(VfsUtils.getRelative(new URL(getURL(), relativePath)));, +		return VfsUtils.getName(resource);, +		return this.resource.toString();, +		return (obj == this || (obj instanceof VfsResource && this.resource.equals(((VfsResource) obj).resource)));, +		return this.resource.hashCode();, +++ b/org.springframework.core/ivy.xml, +++ b/org.springframework.core/pom.xml, +++ b/org.springframework.core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java, +			return new VfsResource(VfsUtils.getRoot(url));, +			return new VfsResource(VfsUtils.getRoot(uri));, +++ b/org.springframework.core/src/main/java/org/springframework/core/io/VfsResource.java, + * Copyright 2002-2010 the original author or authors., + * @author Costin Leau, + * @see org.jboss.vfs.VirtualFile, +	private final Object resource;, +	public VfsResource(Object resources) {, +		Assert.notNull(resources, "VirtualFile must not be null");, +		this.resource = resources;, +		return VfsUtils.exists(resource);, +		return VfsUtils.isReadable(resource);, +		return VfsUtils.getLastModified(resource);, +		return VfsUtils.getInputStream(resource);, +			return VfsUtils.getURL(resource);, +		} catch (Exception ex) {, +			throw new NestedIOException("Failed to obtain URL for file " + this.resource, ex);, +			return VfsUtils.getURI(resource);, +		} catch (Exception ex) {, +			throw new NestedIOException("Failed to obtain URI for " + this.resource, ex);, +		return VfsUtils.getFile(resource);, +		if (!relativePath.startsWith(".") && relativePath.contains("/")) {, +			try {, +				return new VfsResource(VfsUtils.getChild(resource, relativePath));, +			} catch (IOException ex) {, +				// fall back to #getRelative, +			}, +		}, +, +		return new VfsResource(VfsUtils.getRelative(new URL(getURL(), relativePath)));, +		return VfsUtils.getName(resource);, +		return this.resource.toString();, +		return (obj == this || (obj instanceof VfsResource && this.resource.equals(((VfsResource) obj).resource)));, +		return this.resource.hashCode();, +++ b/org.springframework.core/src/main/java/org/springframework/core/io/VfsUtils.java, +/*, + * Copyright 2010 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.core.io;]