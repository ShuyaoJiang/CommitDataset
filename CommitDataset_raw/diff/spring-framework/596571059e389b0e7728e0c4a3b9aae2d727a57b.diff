[+++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/DispatcherPortlet.java, + * Copyright 2002-2012 the original author or authors., + * <p>Thanks to Rainer Schmitz, Nick Lothian and Eric Dalquist for their suggestions!, +	/** Whether exceptions thrown during doAction should be forwarded to doRender */, +	private boolean forwardActionException = true;, +, +	/** Whether exceptions thrown during doEvent should be forwarded to doRender */, +	private boolean forwardEventException = false;, +, +	 * Set whether to forward exceptions thrown during the action phase, +	 * to the render phase via a session attribute., +	 * <p>Default is true. Turn this off if you want the portlet container, +	 * to provide immediate exception handling for action requests., +	 * @see #exposeActionException(javax.portlet.PortletRequest, javax.portlet.StateAwareResponse, Exception), +	 */, +	public void setForwardActionException(boolean forwardActionException) {, +		this.forwardActionException = forwardActionException;, +	}, +, +	/**, +	 * Set whether to forward exceptions thrown during the event phase, +	 * to the render phase via a session attribute., +	 * <p>Default is false. Turn this on if you want the {@link DispatcherPortlet}, +	 * to forward the exception to the render phase, similar to what it does, +	 * for {@link #setForwardActionException action exceptions} by default., +	 */, +	public void setForwardEventException(boolean forwardEventException) {, +		this.forwardEventException = forwardEventException;, +	}, +, +	/**, +			if (this.forwardActionException) {, +			else {, +				throw ex;, +			}, +		}, +			if (this.forwardEventException) {, +			else {, +				throw ex;, +			}, +		}, +	 * @return the HandlerExecutionChain, or null if no handler could be found, +++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/DispatcherPortlet.java, + * Copyright 2002-2012 the original author or authors., + * <p>Thanks to Rainer Schmitz, Nick Lothian and Eric Dalquist for their suggestions!, +	/** Whether exceptions thrown during doAction should be forwarded to doRender */, +	private boolean forwardActionException = true;, +, +	/** Whether exceptions thrown during doEvent should be forwarded to doRender */, +	private boolean forwardEventException = false;, +, +	 * Set whether to forward exceptions thrown during the action phase, +	 * to the render phase via a session attribute., +	 * <p>Default is true. Turn this off if you want the portlet container, +	 * to provide immediate exception handling for action requests., +	 * @see #exposeActionException(javax.portlet.PortletRequest, javax.portlet.StateAwareResponse, Exception), +	 */, +	public void setForwardActionException(boolean forwardActionException) {, +		this.forwardActionException = forwardActionException;, +	}, +, +	/**, +	 * Set whether to forward exceptions thrown during the event phase, +	 * to the render phase via a session attribute., +	 * <p>Default is false. Turn this on if you want the {@link DispatcherPortlet}, +	 * to forward the exception to the render phase, similar to what it does, +	 * for {@link #setForwardActionException action exceptions} by default., +	 */, +	public void setForwardEventException(boolean forwardEventException) {, +		this.forwardEventException = forwardEventException;, +	}, +, +	/**, +			if (this.forwardActionException) {, +			else {, +				throw ex;, +			}, +		}, +			if (this.forwardEventException) {, +			else {, +				throw ex;, +			}, +		}, +	 * @return the HandlerExecutionChain, or null if no handler could be found, +++ b/spring-webmvc-portlet/src/test/java/org/springframework/web/portlet/DispatcherPortletTests.java, +* Copyright 2002-2012 the original author or authors., +import org.springframework.mock.web.portlet.MockEvent;, +import org.springframework.mock.web.portlet.MockEventRequest;, +import org.springframework.mock.web.portlet.MockEventResponse;, +, +	public void testSimpleInvalidActionRequestWithoutHandling() throws Exception {, +		MockActionRequest request = new MockActionRequest();, +		MockActionResponse response = new MockActionResponse();, +		request.setParameter("action", "invalid");, +		simpleDispatcherPortlet.setForwardActionException(false);, +		try {, +			simpleDispatcherPortlet.processAction(request, response);, +			fail("Should have thrown a " + NoHandlerFoundException.class);, +		}, +		catch (NoHandlerFoundException ex) {]