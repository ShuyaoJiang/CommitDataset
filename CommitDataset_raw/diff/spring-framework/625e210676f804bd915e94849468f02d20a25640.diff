[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompSession.java, +	 * subscribers, or broker-specific, non-standard headers., +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompSession.java, +	 * subscribers, or broker-specific, non-standard headers., +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * Return an {@code HttpHeaders} object that can only be read, not written to., +	 * Return an {@code HttpHeaders} object that can be read and written to., +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompSession.java, +	 * subscribers, or broker-specific, non-standard headers., +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * Return an {@code HttpHeaders} object that can only be read, not written to., +	 * Return an {@code HttpHeaders} object that can be read and written to., +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java, +		if (message != null && message.toLowerCase().contains("broken pipe")) {, +			return true;, +		}, +		return DISCONNECTED_CLIENT_EXCEPTIONS.contains(ex.getClass().getSimpleName());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompSession.java, +	 * subscribers, or broker-specific, non-standard headers., +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * Return an {@code HttpHeaders} object that can only be read, not written to., +	 * Return an {@code HttpHeaders} object that can be read and written to., +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java, +		if (message != null && message.toLowerCase().contains("broken pipe")) {, +			return true;, +		}, +		return DISCONNECTED_CLIENT_EXCEPTIONS.contains(ex.getClass().getSimpleName());, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java, +				.collect(Collectors.joining(".", "", "." + userType.getSimpleName()));, +			return new HandlerMethod((String) handler,, +		return new HandlerMethod(handler, method);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompSession.java, +	 * subscribers, or broker-specific, non-standard headers., +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * Return an {@code HttpHeaders} object that can only be read, not written to., +	 * Return an {@code HttpHeaders} object that can be read and written to., +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java, +		if (message != null && message.toLowerCase().contains("broken pipe")) {, +			return true;, +		}, +		return DISCONNECTED_CLIENT_EXCEPTIONS.contains(ex.getClass().getSimpleName());, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java, +				.collect(Collectors.joining(".", "", "." + userType.getSimpleName()));, +			return new HandlerMethod((String) handler,, +		return new HandlerMethod(handler, method);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +				.collect(Collectors.joining(".", "", "." + userType.getSimpleName()));, +			return new HandlerMethod((String) handler,, +		return new HandlerMethod(handler, method);]