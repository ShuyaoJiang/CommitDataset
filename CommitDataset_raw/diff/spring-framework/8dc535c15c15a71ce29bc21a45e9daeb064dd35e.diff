[+++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java, + * Copyright 2002-2019 the original author or authors., +	 * Narrows the primary mapping by media types that can be consumed by the, +	 * mapped handler. Consists of one or more media types one of which must, +	 * match to the request {@code Content-Type} header. Examples:, +	 * consumes = MediaType.TEXT_PLAIN_VALUE, +	 * Expressions can be negated by using the "!" operator, as in, +	 * "!text/plain", which matches all requests with a {@code Content-Type}, +	 * other than "text/plain"., +	 * If specified at both levels, the method level consumes condition overrides, +	 * the type level condition., +	 * Narrows the primary mapping by media types that can be produced by the, +	 * mapped handler. Consists of one or more media types one of which must, +	 * be chosen via content negotiation against the "acceptable" media types, +	 * of the request. Typically those are extracted from the {@code "Accept"}, +	 * header but may be derived from query parameters, or other. Examples:, +	 * produces = MediaType.TEXT_PLAIN_VALUE, +	 * produces = "text/plain;charset=UTF-8", +	 * <p>If a declared media type contains a parameter (e.g. "charset=UTF-8",, +	 * "type=feed", type="entry") and if a compatible media type from the request, +	 * has that parameter too, then the parameter values must match. Otherwise, +	 * if the media type from the request does not contain the parameter, it is, +	 * assumed the client accepts any value., +	 * <p>Expressions can be negated by using the "!" operator, as in "!text/plain",, +	 * which matches all requests with a {@code Accept} other than "text/plain"., +	 * If specified at both levels, the method level produces condition overrides, +	 * the type level condition., +	 * @see org.springframework.http.MediaType, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java, + * Copyright 2002-2019 the original author or authors., +	 * Narrows the primary mapping by media types that can be consumed by the, +	 * mapped handler. Consists of one or more media types one of which must, +	 * match to the request {@code Content-Type} header. Examples:, +	 * consumes = MediaType.TEXT_PLAIN_VALUE, +	 * Expressions can be negated by using the "!" operator, as in, +	 * "!text/plain", which matches all requests with a {@code Content-Type}, +	 * other than "text/plain"., +	 * If specified at both levels, the method level consumes condition overrides, +	 * the type level condition., +	 * Narrows the primary mapping by media types that can be produced by the, +	 * mapped handler. Consists of one or more media types one of which must, +	 * be chosen via content negotiation against the "acceptable" media types, +	 * of the request. Typically those are extracted from the {@code "Accept"}, +	 * header but may be derived from query parameters, or other. Examples:, +	 * produces = MediaType.TEXT_PLAIN_VALUE, +	 * produces = "text/plain;charset=UTF-8", +	 * <p>If a declared media type contains a parameter (e.g. "charset=UTF-8",, +	 * "type=feed", type="entry") and if a compatible media type from the request, +	 * has that parameter too, then the parameter values must match. Otherwise, +	 * if the media type from the request does not contain the parameter, it is, +	 * assumed the client accepts any value., +	 * <p>Expressions can be negated by using the "!" operator, as in "!text/plain",, +	 * which matches all requests with a {@code Accept} other than "text/plain"., +	 * If specified at both levels, the method level produces condition overrides, +	 * the type level condition., +	 * @see org.springframework.http.MediaType, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/ProducesRequestCondition.java, +import org.springframework.util.StringUtils;, +				if (getMediaType().isCompatibleWith(acceptedMediaType) && matchParameters(acceptedMediaType)) {, +, +		private boolean matchParameters(MediaType acceptedMediaType) {, +			for (String name : getMediaType().getParameters().keySet()) {, +				String s1 = getMediaType().getParameter(name);, +				String s2 = acceptedMediaType.getParameter(name);, +				if (StringUtils.hasText(s1) && StringUtils.hasText(s2) && !s1.equalsIgnoreCase(s2)) {, +					return false;, +				}, +			}, +			return true;, +		}, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java, + * Copyright 2002-2019 the original author or authors., +	 * Narrows the primary mapping by media types that can be consumed by the, +	 * mapped handler. Consists of one or more media types one of which must, +	 * match to the request {@code Content-Type} header. Examples:, +	 * consumes = MediaType.TEXT_PLAIN_VALUE, +	 * Expressions can be negated by using the "!" operator, as in, +	 * "!text/plain", which matches all requests with a {@code Content-Type}, +	 * other than "text/plain"., +	 * If specified at both levels, the method level consumes condition overrides, +	 * the type level condition., +	 * Narrows the primary mapping by media types that can be produced by the, +	 * mapped handler. Consists of one or more media types one of which must, +	 * be chosen via content negotiation against the "acceptable" media types, +	 * of the request. Typically those are extracted from the {@code "Accept"}, +	 * header but may be derived from query parameters, or other. Examples:, +	 * produces = MediaType.TEXT_PLAIN_VALUE, +	 * produces = "text/plain;charset=UTF-8", +	 * <p>If a declared media type contains a parameter (e.g. "charset=UTF-8",, +	 * "type=feed", type="entry") and if a compatible media type from the request, +	 * has that parameter too, then the parameter values must match. Otherwise, +	 * if the media type from the request does not contain the parameter, it is, +	 * assumed the client accepts any value., +	 * <p>Expressions can be negated by using the "!" operator, as in "!text/plain",, +	 * which matches all requests with a {@code Accept} other than "text/plain"., +	 * If specified at both levels, the method level produces condition overrides, +	 * the type level condition., +	 * @see org.springframework.http.MediaType, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/ProducesRequestCondition.java, +import org.springframework.util.StringUtils;]