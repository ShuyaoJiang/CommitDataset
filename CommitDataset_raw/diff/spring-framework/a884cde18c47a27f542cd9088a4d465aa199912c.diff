[+++ b/build.gradle, +		optional("javax.cache:cache-api:1.0.0-RC1"), +++ b/build.gradle, +		optional("javax.cache:cache-api:1.0.0-RC1"), +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, +	public final String getName() {, +	public final Ehcache getNativeCache() {, +++ b/build.gradle, +		optional("javax.cache:cache-api:1.0.0-RC1"), +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, +	public final String getName() {, +	public final Ehcache getNativeCache() {, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCacheManager.java, + * Copyright 2002-2013 the original author or authors., +	 * Create a new EhCacheCacheManager for the given backing EhCache CacheManager., +		net.sf.ehcache.CacheManager cacheManager = getCacheManager();, +		Assert.notNull(cacheManager, "A backing EhCache CacheManager is required");, +		Status status = cacheManager.getStatus();, +		String[] names = cacheManager.getCacheNames();, +			caches.add(new EhCacheCache(cacheManager.getEhcache(name)));, +			Ehcache ehcache = getCacheManager().getEhcache(name);, +++ b/build.gradle, +		optional("javax.cache:cache-api:1.0.0-RC1"), +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, +	public final String getName() {, +	public final Ehcache getNativeCache() {, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCacheManager.java, + * Copyright 2002-2013 the original author or authors., +	 * Create a new EhCacheCacheManager for the given backing EhCache CacheManager., +		net.sf.ehcache.CacheManager cacheManager = getCacheManager();, +		Assert.notNull(cacheManager, "A backing EhCache CacheManager is required");, +		Status status = cacheManager.getStatus();, +		String[] names = cacheManager.getCacheNames();, +			caches.add(new EhCacheCache(cacheManager.getEhcache(name)));, +			Ehcache ehcache = getCacheManager().getEhcache(name);, +++ b/spring-context-support/src/main/java/org/springframework/cache/guava/GuavaCache.java, +	public final String getName() {, +	public final com.google.common.cache.Cache<Object, Object> getNativeCache() {, +	public final boolean isAllowNullValues() {, +++ b/build.gradle, +		optional("javax.cache:cache-api:1.0.0-RC1"), +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, +	public final String getName() {, +	public final Ehcache getNativeCache() {, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCacheManager.java, + * Copyright 2002-2013 the original author or authors., +	 * Create a new EhCacheCacheManager for the given backing EhCache CacheManager., +		net.sf.ehcache.CacheManager cacheManager = getCacheManager();, +		Assert.notNull(cacheManager, "A backing EhCache CacheManager is required");, +		Status status = cacheManager.getStatus();, +		String[] names = cacheManager.getCacheNames();, +			caches.add(new EhCacheCache(cacheManager.getEhcache(name)));, +			Ehcache ehcache = getCacheManager().getEhcache(name);, +++ b/spring-context-support/src/main/java/org/springframework/cache/guava/GuavaCache.java, +	public final String getName() {, +	public final com.google.common.cache.Cache<Object, Object> getNativeCache() {, +	public final boolean isAllowNullValues() {, +++ b/spring-context-support/src/main/java/org/springframework/cache/guava/GuavaCacheManager.java, +public class GuavaCacheManager implements CacheManager {, +	private boolean allowNullValues = true;, +, +	/**, +	 * Specify whether to accept and convert {@code null} values for all caches, +	 * in this cache manager., +	 * <p>Default is "true", despite Guava itself not supporting {@code null} values., +	 * An internal holder object will be used to store user-level {@code null}s., +	 */, +	public void setAllowNullValues(boolean allowNullValues) {, +		this.allowNullValues = allowNullValues;, +	}, +, +	/**, +	 * Return whether this cache manager accepts and converts {@code null} values, +	 * for all of its caches., +	 */, +	public boolean isAllowNullValues() {, +		return this.allowNullValues;, +	}, +, +		return new GuavaCache(name, createNativeGuavaCache(name), isAllowNullValues());, +++ b/build.gradle, +		optional("javax.cache:cache-api:1.0.0-RC1"), +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, +	public final String getName() {, +	public final Ehcache getNativeCache() {, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCacheManager.java, + * Copyright 2002-2013 the original author or authors., +	 * Create a new EhCacheCacheManager for the given backing EhCache CacheManager., +		net.sf.ehcache.CacheManager cacheManager = getCacheManager();, +		Assert.notNull(cacheManager, "A backing EhCache CacheManager is required");, +		Status status = cacheManager.getStatus();, +		String[] names = cacheManager.getCacheNames();, +			caches.add(new EhCacheCache(cacheManager.getEhcache(name)));, +			Ehcache ehcache = getCacheManager().getEhcache(name);, +++ b/spring-context-support/src/main/java/org/springframework/cache/guava/GuavaCache.java, +	public final String getName() {, +	public final com.google.common.cache.Cache<Object, Object> getNativeCache() {, +	public final boolean isAllowNullValues() {, +++ b/spring-context-support/src/main/java/org/springframework/cache/guava/GuavaCacheManager.java, +public class GuavaCacheManager implements CacheManager {]