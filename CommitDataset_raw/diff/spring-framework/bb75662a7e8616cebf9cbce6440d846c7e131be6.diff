[+++ b/org.springframework.test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.transaction.interceptor.TransactionAspectUtils;, +import org.springframework.util.StringUtils;, +	private TransactionConfigurationAttributes configurationAttributes;, +			String qualifier = transactionAttribute.getQualifier();, +			PlatformTransactionManager tm;, +			if (StringUtils.hasLength(qualifier)) {, +				// Use autowire-capable factory in order to support extended qualifier matching, +				// (only exposed on the internal BeanFactory, not on the ApplicationContext)., +				BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory();, +				tm = TransactionAspectUtils.getTransactionManager(bf, qualifier);, +			}, +			else {, +				tm = getTransactionManager(testContext);, +			}, +			TransactionContext txContext = new TransactionContext(tm, transactionDefinition);, +		String tmName = retrieveConfigurationAttributes(testContext).getTransactionManagerName();, +			return testContext.getApplicationContext().getBean(tmName, PlatformTransactionManager.class);, +						tmName + "] for test context [" + testContext + "]", ex);, +		return retrieveConfigurationAttributes(testContext).isDefaultRollback();, +	private TransactionConfigurationAttributes retrieveConfigurationAttributes(TestContext testContext) {, +		if (this.configurationAttributes == null) {, +			Class<?> clazz = testContext.getTestClass();, +			this.configurationAttributes = configAttributes;, +		return this.configurationAttributes;, +	}, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.transaction.interceptor.TransactionAspectUtils;, +import org.springframework.util.StringUtils;, +	private TransactionConfigurationAttributes configurationAttributes;, +			String qualifier = transactionAttribute.getQualifier();, +			PlatformTransactionManager tm;, +			if (StringUtils.hasLength(qualifier)) {, +				// Use autowire-capable factory in order to support extended qualifier matching, +				// (only exposed on the internal BeanFactory, not on the ApplicationContext)., +				BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory();, +				tm = TransactionAspectUtils.getTransactionManager(bf, qualifier);, +			}, +			else {, +				tm = getTransactionManager(testContext);, +			}, +			TransactionContext txContext = new TransactionContext(tm, transactionDefinition);, +		String tmName = retrieveConfigurationAttributes(testContext).getTransactionManagerName();, +			return testContext.getApplicationContext().getBean(tmName, PlatformTransactionManager.class);, +						tmName + "] for test context [" + testContext + "]", ex);, +		return retrieveConfigurationAttributes(testContext).isDefaultRollback();, +	private TransactionConfigurationAttributes retrieveConfigurationAttributes(TestContext testContext) {, +		if (this.configurationAttributes == null) {, +			Class<?> clazz = testContext.getTestClass();, +			this.configurationAttributes = configAttributes;, +		return this.configurationAttributes;, +	}, +++ b/org.springframework.test/src/test/java/org/springframework/test/context/junit4/MethodLevelTransactionalSpringRunnerTests.java, +import static org.junit.Assert.*;, +import org.springframework.test.context.transaction.TransactionConfiguration;, +import static org.springframework.test.transaction.TransactionTestUtils.*;, +	@Transactional("transactionManager2"), +		public void setDataSource2(DataSource dataSource) {, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.transaction.interceptor.TransactionAspectUtils;, +import org.springframework.util.StringUtils;, +	private TransactionConfigurationAttributes configurationAttributes;, +			String qualifier = transactionAttribute.getQualifier();, +			PlatformTransactionManager tm;, +			if (StringUtils.hasLength(qualifier)) {, +				// Use autowire-capable factory in order to support extended qualifier matching, +				// (only exposed on the internal BeanFactory, not on the ApplicationContext)., +				BeanFactory bf = testContext.getApplicationContext().getAutowireCapableBeanFactory();, +				tm = TransactionAspectUtils.getTransactionManager(bf, qualifier);, +			}, +			else {, +				tm = getTransactionManager(testContext);, +			}, +			TransactionContext txContext = new TransactionContext(tm, transactionDefinition);, +		String tmName = retrieveConfigurationAttributes(testContext).getTransactionManagerName();, +			return testContext.getApplicationContext().getBean(tmName, PlatformTransactionManager.class);, +						tmName + "] for test context [" + testContext + "]", ex);, +		return retrieveConfigurationAttributes(testContext).isDefaultRollback();, +	private TransactionConfigurationAttributes retrieveConfigurationAttributes(TestContext testContext) {, +		if (this.configurationAttributes == null) {, +			Class<?> clazz = testContext.getTestClass();, +			this.configurationAttributes = configAttributes;, +		return this.configurationAttributes;, +	}, +++ b/org.springframework.test/src/test/java/org/springframework/test/context/junit4/MethodLevelTransactionalSpringRunnerTests.java, +import static org.junit.Assert.*;, +import org.springframework.test.context.transaction.TransactionConfiguration;, +import static org.springframework.test.transaction.TransactionTestUtils.*;, +	@Transactional("transactionManager2"), +		public void setDataSource2(DataSource dataSource) {, +++ b/org.springframework.test/src/test/java/org/springframework/test/context/junit4/transactionalTests-context.xml, +		p:dataSource-ref="dataSource" p:transactionSynchronizationName="SYNCHRONIZATION_NEVER"/>, +, +	<bean id="transactionManager2" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"]