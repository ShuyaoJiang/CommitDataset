[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMapping.java, +	 * Iterate all RequestMappingInfo's once again, look if any match by URL at, +	 * least and raise exceptions according to what doesn't match., +	 *, +	protected HandlerMethod handleNoMatch(Set<RequestMappingInfo> infos, String lookupPath,, +			HttpServletRequest request) throws ServletException {, +		PartialMatchHelper helper = new PartialMatchHelper(infos, request);, +		if (helper.isEmpty()) {, +, +		if (helper.hasMethodsMismatch()) {, +			Set<String> methods = helper.getAllowedMethods();, +				HttpOptionsHandler handler = new HttpOptionsHandler(methods);, +			throw new HttpRequestMethodNotSupportedException(request.getMethod(), methods);, +		if (helper.hasConsumesMismatch()) {, +			Set<MediaType> mediaTypes = helper.getConsumableMediaTypes();, +			throw new HttpMediaTypeNotSupportedException(contentType, new ArrayList<MediaType>(mediaTypes));, +, +		if (helper.hasProducesMismatch()) {, +			Set<MediaType> mediaTypes = helper.getProducibleMediaTypes();, +			throw new HttpMediaTypeNotAcceptableException(new ArrayList<MediaType>(mediaTypes));, +, +		if (helper.hasParamsMismatch()) {, +			List<String[]> conditions = helper.getParamConditions();, +			throw new UnsatisfiedServletRequestParameterException(conditions, request.getParameterMap());, +, +, +, +	/**, +	 * Aggregate all partial matches and expose methods checking across them., +	 */, +	private static class PartialMatchHelper {, +, +		private final List<PartialMatch> partialMatches = new ArrayList<PartialMatch>();, +, +, +		public PartialMatchHelper(Set<RequestMappingInfo> infos, HttpServletRequest request) {, +			for (RequestMappingInfo info : infos) {, +				if (info.getPatternsCondition().getMatchingCondition(request) != null) {, +					this.partialMatches.add(new PartialMatch(info, request));, +				}, +			}, +, +		/**, +		 * Whether there any partial matches., +		 */, +		public boolean isEmpty() {, +			return this.partialMatches.isEmpty();, +		}, +, +		/**, +		 * Any partial matches for "methods"?, +		 */, +		public boolean hasMethodsMismatch() {, +			for (PartialMatch match : this.partialMatches) {, +				if (match.hasMethodsMatch()) {, +					return false;, +				}, +			}, +			return true;, +		}, +, +		/**, +		 * Any partial matches for "methods" and "consumes"?, +		 */, +		public boolean hasConsumesMismatch() {, +			for (PartialMatch match : this.partialMatches) {, +				if (match.hasConsumesMatch()) {, +					return false;, +				}, +			}, +			return true;, +		}, +, +		/**, +		 * Any partial matches for "methods", "consumes", and "produces"?, +		 */, +		public boolean hasProducesMismatch() {, +			for (PartialMatch match : this.partialMatches) {, +				if (match.hasProducesMatch()) {, +					return false;, +				}, +			}, +			return true;, +		}, +, +		/**, +		 * Any partial matches for "methods", "consumes", "produces", and "params"?, +		 */, +		public boolean hasParamsMismatch() {, +			for (PartialMatch match : this.partialMatches) {, +				if (match.hasParamsMatch()) {, +					return false;, +				}, +			}, +			return true;, +		}, +, +		/**, +		 * Return declared HTTP methods., +		 */]