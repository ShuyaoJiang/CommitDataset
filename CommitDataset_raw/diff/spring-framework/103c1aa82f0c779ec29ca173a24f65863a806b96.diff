[+++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/MBeanExporter.java, +			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {, +	/**, +	 * Return whether the specified bean definition should be considered as abstract., +	 */, +	private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {, +		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&, +				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract());, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/MBeanExporter.java, +			if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) {, +	/**, +	 * Return whether the specified bean definition should be considered as abstract., +	 */, +	private boolean isBeanDefinitionAbstract(ListableBeanFactory beanFactory, String beanName) {, +		return (beanFactory instanceof ConfigurableListableBeanFactory && beanFactory.containsBeanDefinition(beanName) &&, +				((ConfigurableListableBeanFactory) beanFactory).getBeanDefinition(beanName).isAbstract());, +	}, +, +++ b/org.springframework.context/src/test/java/org/springframework/jmx/export/autodetectMBeans.xml, +	<bean id="toBeIgnoredToo" class="javax.management.DynamicMBean" abstract="true" lazy-init="true"/>, +]