[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/InjectionPoint.java, + * Copyright 2002-2017 the original author or authors., +	 * Retrieve a field/parameter annotation of the given type, if any., +	 * @param annotationType the annotation type to retrieve, +	 * @return the annotation instance, or {@code null} if none found, +	 * @since 4.3.9, +	 */, +	public <A extends Annotation> A getAnnotation(Class<A> annotationType) {, +		return (this.field != null ? this.field.getAnnotation(annotationType) :, +				this.methodParameter.getParameterAnnotation(annotationType));, +	}, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/InjectionPoint.java, + * Copyright 2002-2017 the original author or authors., +	 * Retrieve a field/parameter annotation of the given type, if any., +	 * @param annotationType the annotation type to retrieve, +	 * @return the annotation instance, or {@code null} if none found, +	 * @since 4.3.9, +	 */, +	public <A extends Annotation> A getAnnotation(Class<A> annotationType) {, +		return (this.field != null ? this.field.getAnnotation(annotationType) :, +				this.methodParameter.getParameterAnnotation(annotationType));, +	}, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, + * Copyright 2002-2017 the original author or authors., +	 * Determine whether the given dependency declares an autowired annotation,, +	 * checking its required flag., +	 * @see Autowired#required(), +	 */, +	@Override, +	public boolean isRequired(DependencyDescriptor descriptor) {, +		if (!super.isRequired(descriptor)) {, +			return false;, +		}, +		Autowired autowired = descriptor.getAnnotation(Autowired.class);, +		return (autowired == null || autowired.required());, +	}, +, +	/**, +	 * Determine whether the given dependency declares a value annotation., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/InjectionPoint.java, + * Copyright 2002-2017 the original author or authors., +	 * Retrieve a field/parameter annotation of the given type, if any., +	 * @param annotationType the annotation type to retrieve, +	 * @return the annotation instance, or {@code null} if none found, +	 * @since 4.3.9, +	 */, +	public <A extends Annotation> A getAnnotation(Class<A> annotationType) {, +		return (this.field != null ? this.field.getAnnotation(annotationType) :, +				this.methodParameter.getParameterAnnotation(annotationType));, +	}, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, + * Copyright 2002-2017 the original author or authors., +	 * Determine whether the given dependency declares an autowired annotation,, +	 * checking its required flag., +	 * @see Autowired#required(), +	 */, +	@Override, +	public boolean isRequired(DependencyDescriptor descriptor) {, +		if (!super.isRequired(descriptor)) {, +			return false;, +		}, +		Autowired autowired = descriptor.getAnnotation(Autowired.class);, +		return (autowired == null || autowired.required());, +	}, +, +	/**, +	 * Determine whether the given dependency declares a value annotation., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireCandidateResolver.java, + * Copyright 2002-2017 the original author or authors., +	 * <p>The default implementation checks, +	 * {@link org.springframework.beans.factory.config.BeanDefinition#isAutowireCandidate()}., +	 * @see org.springframework.beans.factory.config.BeanDefinition#isAutowireCandidate(), +	default boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {, +		return bdHolder.getBeanDefinition().isAutowireCandidate();, +	}, +, +	/**, +	 * Determine whether the given descriptor is effectively required., +	 * <p>The default implementation checks {@link DependencyDescriptor#isRequired()}., +	 * @param descriptor the descriptor for the target method parameter or field, +	 * @return whether the descriptor is marked as required or possibly indicating, +	 * non-required status some other way (e.g. through a parameter annotation), +	 * @since 5.0, +	 * @see DependencyDescriptor#isRequired(), +	 */, +	default boolean isRequired(DependencyDescriptor descriptor) {, +		return descriptor.isRequired();, +	}, +	 * <p>The default implementation simply returns {@code null}., +	default Object getSuggestedValue(DependencyDescriptor descriptor) {, +		return null;, +	}, +	 * <p>The default implementation simply returns {@code null}., +	default Object getLazyResolutionProxyIfNecessary(DependencyDescriptor descriptor, String beanName) {]