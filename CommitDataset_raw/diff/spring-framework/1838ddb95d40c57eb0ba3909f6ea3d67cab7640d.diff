[+++ b/spring-context/src/main/java/org/springframework/context/index/CandidateComponentsIndex.java, +import org.springframework.util.AntPathMatcher;, +import org.springframework.util.ClassUtils;, +	private final static AntPathMatcher pathMatcher = new AntPathMatcher(".");, +, +	private final MultiValueMap<String, Entry> index;, +		List<Entry> candidates = this.index.get(stereotype);, +					.filter(t -> t.match(basePackage)), +					.map(t -> t.type), +	private static MultiValueMap<String, Entry> parseIndex(List<Properties> content) {, +		MultiValueMap<String, Entry> index = new LinkedMultiValueMap<>();, +					index.add(stereotype, new Entry((String) type));, +	private static class Entry {, +		private final String type;, +		private final String packageName;, +, +		Entry(String type) {, +			this.type = type;, +			this.packageName = ClassUtils.getPackageName(type);, +		}, +, +		public boolean match(String basePackage) {, +			if (pathMatcher.isPattern(basePackage)) {, +				return pathMatcher.match(basePackage, this.packageName);, +			}, +			else {, +				return this.type.startsWith(basePackage);, +			}, +		}, +, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/index/CandidateComponentsIndex.java, +import org.springframework.util.AntPathMatcher;, +import org.springframework.util.ClassUtils;, +	private final static AntPathMatcher pathMatcher = new AntPathMatcher(".");, +, +	private final MultiValueMap<String, Entry> index;, +		List<Entry> candidates = this.index.get(stereotype);, +					.filter(t -> t.match(basePackage)), +					.map(t -> t.type), +	private static MultiValueMap<String, Entry> parseIndex(List<Properties> content) {, +		MultiValueMap<String, Entry> index = new LinkedMultiValueMap<>();, +					index.add(stereotype, new Entry((String) type));, +	private static class Entry {, +		private final String type;, +		private final String packageName;, +, +		Entry(String type) {, +			this.type = type;, +			this.packageName = ClassUtils.getPackageName(type);, +		}, +, +		public boolean match(String basePackage) {, +			if (pathMatcher.isPattern(basePackage)) {, +				return pathMatcher.match(basePackage, this.packageName);, +			}, +			else {, +				return this.type.startsWith(basePackage);, +			}, +		}, +, +	}, +, +++ b/spring-context/src/test/java/example/scannable/sub/BarComponent.java, +/*, + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package example.scannable.sub;, +, +import org.springframework.stereotype.Component;, +, +/**, + * @author Stephane Nicoll, + */, +@Component, +public class BarComponent {, +}, +++ b/spring-context/src/main/java/org/springframework/context/index/CandidateComponentsIndex.java, +import org.springframework.util.AntPathMatcher;, +import org.springframework.util.ClassUtils;, +	private final static AntPathMatcher pathMatcher = new AntPathMatcher(".");, +, +	private final MultiValueMap<String, Entry> index;, +		List<Entry> candidates = this.index.get(stereotype);, +					.filter(t -> t.match(basePackage)), +					.map(t -> t.type)]