[+++ b/spring-web-reactive/build.gradle, +	compile "io.projectreactor:reactor-net:2.0.5.RELEASE", +++ b/spring-web-reactive/build.gradle, +	compile "io.projectreactor:reactor-net:2.0.5.RELEASE", +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/DispatcherHttpHandler.java, +import reactor.rx.Promises;, +import reactor.rx.Streams;, +		Publisher<HandlerResult> resultPublisher = handlerAdapter.handle(request, response, handler);, +		return Streams.wrap(resultPublisher).concatMap((HandlerResult result) -> {, +					return resultHandler.handleResult(request, response, result);, +			String error = "No HandlerResultHandler for " + result.getReturnValue();, +			return Promises.error(new IllegalStateException(error));, +++ b/spring-web-reactive/build.gradle, +	compile "io.projectreactor:reactor-net:2.0.5.RELEASE", +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/DispatcherHttpHandler.java, +import reactor.rx.Promises;, +import reactor.rx.Streams;, +		Publisher<HandlerResult> resultPublisher = handlerAdapter.handle(request, response, handler);, +		return Streams.wrap(resultPublisher).concatMap((HandlerResult result) -> {, +					return resultHandler.handleResult(request, response, result);, +			String error = "No HandlerResultHandler for " + result.getReturnValue();, +			return Promises.error(new IllegalStateException(error));, +++ b/spring-web-reactive/src/test/java/org/springframework/reactive/web/DispatcherApp.java, +import reactor.rx.Stream;, +import reactor.rx.Streams;, +			return Streams.just("Hello world.");, +		public Publisher<HandlerResult> handle(ServerHttpRequest request, ServerHttpResponse response, Object handler) {, +			Publisher<String> resultPublisher = ((PlainTextHandler) handler).handle(request, response);, +			Stream<String> stream = Streams.wrap(resultPublisher);, +			return stream.concatMap((returnValue) -> Streams.just(new HandlerResult(returnValue)));, +			byte[] bytes = ((String) result.getReturnValue()).getBytes(Charset.forName("UTF-8"));, +			return response.writeWith(Streams.just(bytes));]