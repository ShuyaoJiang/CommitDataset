[+++ b/build.gradle, +		classpath("org.asciidoctor:asciidoctor-gradle-plugin:1.5.2"), +	apply plugin: "org.asciidoctor.convert", +		sourceDir project.file('src/asciidoc'), +		separateOutputDirs = false, +		backends = ['docbook5'], +		options doctype: 'book', eruby: 'erubis', +		attributes 'spring-version': project.version,, +++ b/build.gradle, +		classpath("org.asciidoctor:asciidoctor-gradle-plugin:1.5.2"), +	apply plugin: "org.asciidoctor.convert", +		sourceDir project.file('src/asciidoc'), +		separateOutputDirs = false, +		backends = ['docbook5'], +		options doctype: 'book', eruby: 'erubis', +		attributes 'spring-version': project.version,, +++ b/src/asciidoc/index.adoc, +Spring library modules in this guide we use a shorthand naming convention `spring-{asterisk}` or, +`spring-{asterisk}.jar,` where `{asterisk}` represents the short name for the module, +(e.g. `spring-core`, `spring-webmvc`, `spring-jms`, etc.). The actual jar file name that, +you use is normally the module name concatenated with the version number, +Examples are `/WEB-INF/{asterisk}Context.xml` for all files with names ending with "Context.xml",, +Please note that `classpath*:` when combined with Ant-style patterns will only work, +frequently you will use `{asterisk}` as the returning type pattern, which matches any return, +type. The name pattern matches the method name. You can use the `{asterisk}` wildcard as all or, +or more). The pattern `({asterisk})` matches a method taking one parameter of any type,, +`MockMvcRequestBuilders.{asterisk}`, `MockMvcResultMatchers.{asterisk}`, , +and `MockMvcBuilders.{asterisk}`. An easy way to find these classes is to search for, +types matching __"MockMvc*"__. If using Eclipse, be sure to add them as , +"favorite static members" in the Eclipse preferences under , +__Java -> Editor -> Content Assist -> Favorites__. That will allow use of content, +should add `"MockRestRequestMatchers.{asterisk}"` and `"MockRestResponseCreators.{asterisk}"`, +as "favorite static members" in the Eclipse preferences under , +__Java -> Editor -> Content Assist -> Favorites__., +That allows using content assist after typing the first character of the, +  wildcard ({asterisk}) character can be used to associate the same transaction attribute, +(e.g. `classpath{asterisk}:/com/foo/{asterisk}{asterisk}/sql/{asterisk}-data.sql`)., +If a pattern is used the scripts are executed in lexical order of their URL or filename., +path patterns (for example, `/myPath/{asterisk}.do`). A combination of URI template variables and, +Ant-style globs is also supported (e.g. `/owners/{asterisk}/pets/{petId}`)., +For example `/hotels/{hotel}/{asterisk}` has 1 URI variable and 1 wild card and is considered, +more specific than `/hotels/{hotel}/{asterisk}{asterisk}` which as 1 URI variable and 2 wild cards., +For example `/foo/bar{asterisk}` is longer and considered more specific than `/foo/{asterisk}`., +For example `/hotels/{hotel}` is more specific than `/hotels/{asterisk}`., +* The *default mapping pattern* `/{asterisk}{asterisk}` is less specific than any other pattern., +* A *prefix pattern* such as `/public/{asterisk}{asterisk}` is less specific than any other pattern that doesn't contain double wildcards., +By default Spring MVC automatically performs `".{asterisk}"` suffix pattern matching so, +that a controller mapped to `/person` is also implicitly mapped to `/person.{asterisk}`., +because the Servlet specification requires the `ServletRequest.getParameter{asterisk}()` family, +`ServletRequest.getParameter{asterisk}()` family of methods., +  `/testing/{asterisk}` and the `alwaysUseFullPath` property is set to true,, +header may include wild cards, for example `text/{asterisk}`, in which case a `View` whose, +Or in cases where the `DispatcherServlet` is mapped by name (e.g. `/main/{asterisk}`), you can, +in the context. The following example shows that calls to all `{asterisk}.view` resources, +`/viewshoppingcart{asterisk}` request URL., +* `WelcomeController` maps to the `/welcome{asterisk}` request URL, +* `HomeController` maps to the `/home{asterisk}` request URL, +* `IndexController` maps to the `/index{asterisk}` request URL, +* `RegisterController` maps to the `/register{asterisk}` request URL, +* `AdminController` maps to the `/admin/{asterisk}` request URL, +* `CatalogController` maps to the `/catalog/{asterisk}` request URL, +to serve resource requests with a URL pattern of `/resources/{asterisk}{asterisk}` from a, +* `path="{asterisk}"` - displays all errors, +definition to your `'{asterisk}-servlet.xml'` as shown below:, +Your templates need to be stored in the directory specified by the `{asterisk}Configurer` bean, + * Allow all origins: to enable this mode, you should provide `{asterisk}` as the allowed origin, +`text/{asterisk}`), and writes with a `Content-Type` of `text/plain`., +HTTP request and response. By default, this converter supports all media types ( `{asterisk}/{asterisk}`),, +<<jmx-naming-metadata, MetadataNamingStrategy>>., +that the enclosing `MBeanExporter` is exporting, one can use the special wildcard `'{asterisk}'`, +classes) with the `@Cache{asterisk}` annotation, as opposed to annotating interfaces. You, +certainly can place the `@Cache{asterisk}` annotation on an interface (or an interface method),]