[+++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, + * Copyright 2002-2017 the original author or authors., +import java.io.File;, +import java.nio.channels.AsynchronousFileChannel;, +import java.nio.file.StandardOpenOption;, +			if (resource.isFile()) {, +				File file = resource.getFile();, +				AsynchronousFileChannel channel =, +						AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ);, +				return DataBufferUtils.read(channel, dataBufferFactory, this.bufferSize);, +			}, +		}, +		catch (IOException ignore) {, +			// fallback to resource.readableChannel(), below, +		}, +, +		try {, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, + * Copyright 2002-2017 the original author or authors., +import java.io.File;, +import java.nio.channels.AsynchronousFileChannel;, +import java.nio.file.StandardOpenOption;, +			if (resource.isFile()) {, +				File file = resource.getFile();, +				AsynchronousFileChannel channel =, +						AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ);, +				return DataBufferUtils.read(channel, dataBufferFactory, this.bufferSize);, +			}, +		}, +		catch (IOException ignore) {, +			// fallback to resource.readableChannel(), below, +		}, +, +		try {, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceRegionEncoder.java, + * Copyright 2002-2017 the original author or authors., +import java.io.File;, +import java.nio.channels.AsynchronousFileChannel;, +import java.nio.file.StandardOpenOption;, +		Flux<DataBuffer> in = readResourceRegion(region, bufferFactory);, +		return DataBufferUtils.takeUntilByteCount(in, region.getCount());, +, +	private Flux<DataBuffer> readResourceRegion(ResourceRegion region, DataBufferFactory bufferFactory) {, +		Resource resource = region.getResource();, +		try {, +			if (resource.isFile()) {, +				File file = region.getResource().getFile();, +				AsynchronousFileChannel channel =, +						AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ);, +				return DataBufferUtils.read(channel, region.getPosition(),, +						bufferFactory, this.bufferSize);, +			}, +		}, +		catch (IOException ignore) {, +			// fallback to resource.readableChannel(), below, +		}, +		try {, +			ReadableByteChannel channel = resource.readableChannel();, +			Flux<DataBuffer> in = DataBufferUtils.read(channel, bufferFactory, this.bufferSize);, +			return DataBufferUtils.skipUntilByteCount(in, region.getPosition());, +		}, +		catch (IOException ex) {, +			return Flux.error(ex);, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, + * Copyright 2002-2017 the original author or authors., +import java.io.File;, +import java.nio.channels.AsynchronousFileChannel;, +import java.nio.file.StandardOpenOption;, +			if (resource.isFile()) {, +				File file = resource.getFile();, +				AsynchronousFileChannel channel =, +						AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ);, +				return DataBufferUtils.read(channel, dataBufferFactory, this.bufferSize);, +			}, +		}, +		catch (IOException ignore) {, +			// fallback to resource.readableChannel(), below, +		}, +, +		try {, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceRegionEncoder.java, + * Copyright 2002-2017 the original author or authors., +import java.io.File;, +import java.nio.channels.AsynchronousFileChannel;, +import java.nio.file.StandardOpenOption;, +		Flux<DataBuffer> in = readResourceRegion(region, bufferFactory);, +		return DataBufferUtils.takeUntilByteCount(in, region.getCount());, +, +	private Flux<DataBuffer> readResourceRegion(ResourceRegion region, DataBufferFactory bufferFactory) {, +		Resource resource = region.getResource();, +		try {, +			if (resource.isFile()) {, +				File file = region.getResource().getFile();, +				AsynchronousFileChannel channel =, +						AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ);, +				return DataBufferUtils.read(channel, region.getPosition(),, +						bufferFactory, this.bufferSize);, +			}, +		}, +		catch (IOException ignore) {]