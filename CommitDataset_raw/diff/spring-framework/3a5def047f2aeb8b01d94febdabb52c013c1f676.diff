[+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/Scheduled.java, + * @author Juergen Hoeller, +	 * A special cron expression value that indicates a disabled trigger: {@value}., +	 * <p>This is primarily meant for use with ${...} placeholders, allowing for, +	 * external disabling of corresponding scheduled methods., +	 * @since 5.1, +	 */, +	String CRON_DISABLED = "-";, +, +, +	/**, +	 * A cron-like expression, extending the usual UN*X definition to include triggers, +	 * on the second as well as minute, hour, day of month, month and day of week., +	 * <p>E.g. {@code "0 * * * * MON-FRI"} means once per minute on weekdays, +	 * (at the top of the minute - the 0th second)., +	 * <p>The special value {@link #CRON_DISABLED "-"} indicates a disabled cron trigger,, +	 * primarily meant for externally specified values resolved by a ${...} placeholder., +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/Scheduled.java, + * @author Juergen Hoeller, +	 * A special cron expression value that indicates a disabled trigger: {@value}., +	 * <p>This is primarily meant for use with ${...} placeholders, allowing for, +	 * external disabling of corresponding scheduled methods., +	 * @since 5.1, +	 */, +	String CRON_DISABLED = "-";, +, +, +	/**, +	 * A cron-like expression, extending the usual UN*X definition to include triggers, +	 * on the second as well as minute, hour, day of month, month and day of week., +	 * <p>E.g. {@code "0 * * * * MON-FRI"} means once per minute on weekdays, +	 * (at the top of the minute - the 0th second)., +	 * <p>The special value {@link #CRON_DISABLED "-"} indicates a disabled cron trigger,, +	 * primarily meant for externally specified values resolved by a ${...} placeholder., +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +	 * The default name of the {@link TaskScheduler} bean to pick up: {@value}., +					if (!Scheduled.CRON_DISABLED.equals(cron)) {, +			}, +				Set<ScheduledTask> regTasks = this.scheduledTasks.computeIfAbsent(bean, key -> new LinkedHashSet<>(4));, +				regTasks.addAll(tasks);, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/Scheduled.java, + * @author Juergen Hoeller, +	 * A special cron expression value that indicates a disabled trigger: {@value}., +	 * <p>This is primarily meant for use with ${...} placeholders, allowing for, +	 * external disabling of corresponding scheduled methods., +	 * @since 5.1, +	 */, +	String CRON_DISABLED = "-";, +, +, +	/**, +	 * A cron-like expression, extending the usual UN*X definition to include triggers, +	 * on the second as well as minute, hour, day of month, month and day of week., +	 * <p>E.g. {@code "0 * * * * MON-FRI"} means once per minute on weekdays, +	 * (at the top of the minute - the 0th second)., +	 * <p>The special value {@link #CRON_DISABLED "-"} indicates a disabled cron trigger,, +	 * primarily meant for externally specified values resolved by a ${...} placeholder., +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +	 * The default name of the {@link TaskScheduler} bean to pick up: {@value}., +					if (!Scheduled.CRON_DISABLED.equals(cron)) {, +			}, +				Set<ScheduledTask> regTasks = this.scheduledTasks.computeIfAbsent(bean, key -> new LinkedHashSet<>(4));, +				regTasks.addAll(tasks);, +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessorTests.java, +import org.springframework.scheduling.config.ScheduledTaskHolder;, +		ScheduledTaskHolder postProcessor = context.getBean("postProcessor", ScheduledTaskHolder.class);, +		assertEquals(1, postProcessor.getScheduledTasks().size());, +, +		ScheduledTaskHolder postProcessor = context.getBean("postProcessor", ScheduledTaskHolder.class);, +		assertEquals(1, postProcessor.getScheduledTasks().size());, +, +		ScheduledTaskHolder postProcessor = context.getBean("postProcessor", ScheduledTaskHolder.class);, +		assertEquals(1, postProcessor.getScheduledTasks().size());, +, +		ScheduledTaskHolder postProcessor = context.getBean("postProcessor", ScheduledTaskHolder.class);, +		assertEquals(2, postProcessor.getScheduledTasks().size());, +, +		ScheduledTaskHolder postProcessor = context.getBean("postProcessor", ScheduledTaskHolder.class);, +		assertEquals(1, postProcessor.getScheduledTasks().size());, +, +		ScheduledTaskHolder postProcessor = context.getBean("postProcessor", ScheduledTaskHolder.class);, +		assertEquals(1, postProcessor.getScheduledTasks().size());, +, +	public void cronTaskWithMethodValidation() {, +		ScheduledTaskHolder postProcessor = context.getBean("postProcessor", ScheduledTaskHolder.class);, +		assertEquals(1, postProcessor.getScheduledTasks().size());, +, +		ScheduledTaskHolder postProcessor = context.getBean("postProcessor", ScheduledTaskHolder.class);, +		assertEquals(1, postProcessor.getScheduledTasks().size());, +, +		ScheduledTaskHolder postProcessor = context.getBean("postProcessor", ScheduledTaskHolder.class);, +		assertEquals(1, postProcessor.getScheduledTasks().size());, +, +		ScheduledTaskHolder postProcessor = context.getBean("postProcessor", ScheduledTaskHolder.class);, +		assertEquals(1, postProcessor.getScheduledTasks().size());, +, +	public void propertyPlaceholderWithInactiveCron() {, +		String businessHoursCronExpression = "-";, +		BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class);, +		BeanDefinition placeholderDefinition = new RootBeanDefinition(PropertyPlaceholderConfigurer.class);]