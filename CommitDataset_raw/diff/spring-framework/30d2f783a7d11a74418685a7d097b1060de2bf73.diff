[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractStompEndpointRegistration.java, +import org.springframework.web.socket.WebSocketHandler;, +import org.springframework.web.socket.support.WebSocketHandlerDecorator;, +	private final WebSocketHandler wsHandler;, +	public AbstractStompEndpointRegistration(String[] paths, WebSocketHandler webSocketHandler,, +				Set<String> protocols = findSubProtocolWebSocketHandler(this.wsHandler).getSupportedProtocols();, +	private static SubProtocolWebSocketHandler findSubProtocolWebSocketHandler(WebSocketHandler webSocketHandler) {, +		WebSocketHandler actual = (webSocketHandler instanceof WebSocketHandlerDecorator) ?, +				((WebSocketHandlerDecorator) webSocketHandler).getLastHandler() : webSocketHandler;, +		Assert.isInstanceOf(SubProtocolWebSocketHandler.class, actual,, +						"No SubProtocolWebSocketHandler found: " + webSocketHandler);, +		return (SubProtocolWebSocketHandler) actual;, +	}, +, +			WebSocketHandler wsHandler, String pathPattern);, +			WebSocketHandler wsHandler, HandshakeHandler handshakeHandler, String path);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractStompEndpointRegistration.java, +import org.springframework.web.socket.WebSocketHandler;, +import org.springframework.web.socket.support.WebSocketHandlerDecorator;, +	private final WebSocketHandler wsHandler;, +	public AbstractStompEndpointRegistration(String[] paths, WebSocketHandler webSocketHandler,, +				Set<String> protocols = findSubProtocolWebSocketHandler(this.wsHandler).getSupportedProtocols();, +	private static SubProtocolWebSocketHandler findSubProtocolWebSocketHandler(WebSocketHandler webSocketHandler) {, +		WebSocketHandler actual = (webSocketHandler instanceof WebSocketHandlerDecorator) ?, +				((WebSocketHandlerDecorator) webSocketHandler).getLastHandler() : webSocketHandler;, +		Assert.isInstanceOf(SubProtocolWebSocketHandler.class, actual,, +						"No SubProtocolWebSocketHandler found: " + webSocketHandler);, +		return (SubProtocolWebSocketHandler) actual;, +	}, +, +			WebSocketHandler wsHandler, String pathPattern);, +			WebSocketHandler wsHandler, HandshakeHandler handshakeHandler, String path);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/ServletStompEndpointRegistration.java, +import org.springframework.web.socket.WebSocketHandler;, +	public ServletStompEndpointRegistration(String[] paths,, +			WebSocketHandler wsHandler, TaskScheduler sockJsTaskScheduler) {, +			SockJsService sockJsService, WebSocketHandler wsHandler, String pathPattern) {, +			WebSocketHandler wsHandler, HandshakeHandler handshakeHandler, String path) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractStompEndpointRegistration.java, +import org.springframework.web.socket.WebSocketHandler;, +import org.springframework.web.socket.support.WebSocketHandlerDecorator;, +	private final WebSocketHandler wsHandler;, +	public AbstractStompEndpointRegistration(String[] paths, WebSocketHandler webSocketHandler,, +				Set<String> protocols = findSubProtocolWebSocketHandler(this.wsHandler).getSupportedProtocols();, +	private static SubProtocolWebSocketHandler findSubProtocolWebSocketHandler(WebSocketHandler webSocketHandler) {, +		WebSocketHandler actual = (webSocketHandler instanceof WebSocketHandlerDecorator) ?, +				((WebSocketHandlerDecorator) webSocketHandler).getLastHandler() : webSocketHandler;, +		Assert.isInstanceOf(SubProtocolWebSocketHandler.class, actual,, +						"No SubProtocolWebSocketHandler found: " + webSocketHandler);, +		return (SubProtocolWebSocketHandler) actual;, +	}, +, +			WebSocketHandler wsHandler, String pathPattern);, +			WebSocketHandler wsHandler, HandshakeHandler handshakeHandler, String path);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/ServletStompEndpointRegistration.java, +import org.springframework.web.socket.WebSocketHandler;, +	public ServletStompEndpointRegistration(String[] paths,, +			WebSocketHandler wsHandler, TaskScheduler sockJsTaskScheduler) {, +			SockJsService sockJsService, WebSocketHandler wsHandler, String pathPattern) {, +			WebSocketHandler wsHandler, HandshakeHandler handshakeHandler, String path) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/ServletStompEndpointRegistry.java, +import org.springframework.web.socket.WebSocketHandler;, +import org.springframework.web.socket.support.WebSocketHandlerDecorator;, +	private final WebSocketHandler webSocketHandler;, +, +	private final SubProtocolWebSocketHandler subProtocolWebSocketHandler;, +	public ServletStompEndpointRegistry(WebSocketHandler webSocketHandler,, +		this.webSocketHandler = webSocketHandler;, +		this.subProtocolWebSocketHandler = findSubProtocolWebSocketHandler(webSocketHandler);, +	private static SubProtocolWebSocketHandler findSubProtocolWebSocketHandler(WebSocketHandler webSocketHandler) {, +, +		WebSocketHandler actual = (webSocketHandler instanceof WebSocketHandlerDecorator) ?, +				((WebSocketHandlerDecorator) webSocketHandler).getLastHandler() : webSocketHandler;, +, +		Assert.isInstanceOf(SubProtocolWebSocketHandler.class, actual,, +						"No SubProtocolWebSocketHandler found: " + webSocketHandler);, +, +		return (SubProtocolWebSocketHandler) actual;, +	}, +, +		this.subProtocolWebSocketHandler.addProtocolHandler(this.stompHandler);, +		ServletStompEndpointRegistration r = new ServletStompEndpointRegistration(, +				paths, this.webSocketHandler, this.sockJsScheduler);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractStompEndpointRegistration.java, +import org.springframework.web.socket.WebSocketHandler;, +import org.springframework.web.socket.support.WebSocketHandlerDecorator;, +	private final WebSocketHandler wsHandler;, +	public AbstractStompEndpointRegistration(String[] paths, WebSocketHandler webSocketHandler,, +				Set<String> protocols = findSubProtocolWebSocketHandler(this.wsHandler).getSupportedProtocols();, +	private static SubProtocolWebSocketHandler findSubProtocolWebSocketHandler(WebSocketHandler webSocketHandler) {, +		WebSocketHandler actual = (webSocketHandler instanceof WebSocketHandlerDecorator) ?, +				((WebSocketHandlerDecorator) webSocketHandler).getLastHandler() : webSocketHandler;, +		Assert.isInstanceOf(SubProtocolWebSocketHandler.class, actual,, +						"No SubProtocolWebSocketHandler found: " + webSocketHandler);, +		return (SubProtocolWebSocketHandler) actual;, +	}, +, +			WebSocketHandler wsHandler, String pathPattern);, +			WebSocketHandler wsHandler, HandshakeHandler handshakeHandler, String path);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/ServletStompEndpointRegistration.java]