[+++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, +	@Test, +	public void configurationIntrospectionOfInnerClassesWorksWithDotNameSyntax() {, +		beanFactory.registerBeanDefinition("config", new RootBeanDefinition(getClass().getName() + ".SingletonBeanConfig"));, +		ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor();, +		pp.postProcessBeanFactory(beanFactory);, +		Foo foo = beanFactory.getBean("foo", Foo.class);, +		Bar bar = beanFactory.getBean("bar", Bar.class);, +		assertSame(foo, bar.foo);, +	}, +, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, +	@Test, +	public void configurationIntrospectionOfInnerClassesWorksWithDotNameSyntax() {, +		beanFactory.registerBeanDefinition("config", new RootBeanDefinition(getClass().getName() + ".SingletonBeanConfig"));, +		ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor();, +		pp.postProcessBeanFactory(beanFactory);, +		Foo foo = beanFactory.getBean("foo", Foo.class);, +		Bar bar = beanFactory.getBean("bar", Bar.class);, +		assertSame(foo, bar.foo);, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/type/classreading/SimpleMetadataReaderFactory.java, + * Copyright 2002-2014 the original author or authors., +		Resource resource = this.resourceLoader.getResource(resourcePath);, +		if (!resource.exists()) {, +			// Maybe an inner class name using the dot name syntax? Need to use the dollar syntax here..., +			// ClassUtils.forName has an equivalent check for resolution into Class references later on., +			int lastDotIndex = className.lastIndexOf('.');, +			if (lastDotIndex != -1) {, +				String innerClassName =, +						className.substring(0, lastDotIndex) + '$' + className.substring(lastDotIndex + 1);, +				String innerClassResourcePath = ResourceLoader.CLASSPATH_URL_PREFIX +, +						ClassUtils.convertClassNameToResourcePath(innerClassName) + ClassUtils.CLASS_FILE_SUFFIX;, +				Resource innerClassResource = this.resourceLoader.getResource(innerClassResourcePath);, +				if (innerClassResource.exists()) {, +					resource = innerClassResource;, +				}, +			}, +		}, +		return getMetadataReader(resource);]