[+++ b/spring-core/src/main/java/org/springframework/core/io/ClassPathResource.java, + * Copyright 2002-2014 the original author or authors., +	 * Create a new {@code ClassPathResource} for {@code ClassLoader} usage., +	 * A leading slash will be removed, as the ClassLoader resource access, +	 * methods will not accept it., +	 * Create a new {@code ClassPathResource} for {@code ClassLoader} usage., +	 * A leading slash will be removed, as the ClassLoader resource access, +	 * methods will not accept it., +	 * Create a new {@code ClassPathResource} for {@code Class} usage., +	 * The path can be relative to the given class, or absolute within, +	 * the classpath via a leading slash., +	 * Create a new {@code ClassPathResource} with optional {@code ClassLoader}, +	 * and {@code Class}. Only for internal usage., +, +		return (this.clazz != null ? this.clazz.getClassLoader() : this.classLoader);, +, +		return (resolveURL() != null);, +	}, +, +	/**, +	 * Resolves a URL for the underlying class path resource., +	 * @return the resolved URL, or {@code null} if not resolvable, +	 */, +	protected URL resolveURL() {, +			return this.clazz.getResource(this.path);, +		}, +		else if (this.classLoader != null) {, +			return this.classLoader.getResource(this.path);, +			return ClassLoader.getSystemResource(this.path);, +		else if (this.classLoader != null) {, +		else {, +			is = ClassLoader.getSystemResourceAsStream(this.path);, +		}, +	 * This implementation returns a URL for the underlying class path resource,, +	 * if available., +		URL url = resolveURL();, +++ b/spring-core/src/main/java/org/springframework/core/io/ClassPathResource.java, + * Copyright 2002-2014 the original author or authors., +	 * Create a new {@code ClassPathResource} for {@code ClassLoader} usage., +	 * A leading slash will be removed, as the ClassLoader resource access, +	 * methods will not accept it., +	 * Create a new {@code ClassPathResource} for {@code ClassLoader} usage., +	 * A leading slash will be removed, as the ClassLoader resource access, +	 * methods will not accept it., +	 * Create a new {@code ClassPathResource} for {@code Class} usage., +	 * The path can be relative to the given class, or absolute within, +	 * the classpath via a leading slash., +	 * Create a new {@code ClassPathResource} with optional {@code ClassLoader}, +	 * and {@code Class}. Only for internal usage., +, +		return (this.clazz != null ? this.clazz.getClassLoader() : this.classLoader);, +, +		return (resolveURL() != null);, +	}, +, +	/**, +	 * Resolves a URL for the underlying class path resource., +	 * @return the resolved URL, or {@code null} if not resolvable, +	 */, +	protected URL resolveURL() {, +			return this.clazz.getResource(this.path);, +		}, +		else if (this.classLoader != null) {, +			return this.classLoader.getResource(this.path);, +			return ClassLoader.getSystemResource(this.path);, +		else if (this.classLoader != null) {, +		else {, +			is = ClassLoader.getSystemResourceAsStream(this.path);, +		}, +	 * This implementation returns a URL for the underlying class path resource,, +	 * if available., +		URL url = resolveURL();, +++ b/spring-core/src/main/java/org/springframework/core/io/ResourceLoader.java, + * Copyright 2002-2014 the original author or authors., +	 * @return the ClassLoader (only {@code null} if even the system, +	 * ClassLoader isn't accessible), +	 * @see org.springframework.util.ClassUtils#getDefaultClassLoader(), +++ b/spring-core/src/main/java/org/springframework/core/io/ClassPathResource.java, + * Copyright 2002-2014 the original author or authors., +	 * Create a new {@code ClassPathResource} for {@code ClassLoader} usage., +	 * A leading slash will be removed, as the ClassLoader resource access, +	 * methods will not accept it., +	 * Create a new {@code ClassPathResource} for {@code ClassLoader} usage., +	 * A leading slash will be removed, as the ClassLoader resource access, +	 * methods will not accept it., +	 * Create a new {@code ClassPathResource} for {@code Class} usage., +	 * The path can be relative to the given class, or absolute within, +	 * the classpath via a leading slash., +	 * Create a new {@code ClassPathResource} with optional {@code ClassLoader}, +	 * and {@code Class}. Only for internal usage., +, +		return (this.clazz != null ? this.clazz.getClassLoader() : this.classLoader);, +, +		return (resolveURL() != null);, +	}, +, +	/**, +	 * Resolves a URL for the underlying class path resource., +	 * @return the resolved URL, or {@code null} if not resolvable, +	 */]