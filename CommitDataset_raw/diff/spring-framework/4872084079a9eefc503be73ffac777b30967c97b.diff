[+++ /dev/null, +++ /dev/null, +++ b/build.gradle, +	ext.kotlinVersion = '1.1.2-4', +	id "org.sonarqube" version "2.2.1", +	ext.aspectjVersion         = "1.9.0.BETA-5", +	ext.caffeineVersion        = "2.5.0", +	ext.eclipselinkVersion     = "2.6.4", +	ext.fileuploadVersion      = "1.3.2", +	ext.groovyVersion          = "2.4.11", +	ext.gsonVersion            = "2.8.0", +	ext.hibval5Version         = "5.4.1.Final", +	ext.jackson2Version        = "2.9.0.pr3", +	ext.javamailVersion        = "1.6.0-rc1", +	ext.jettyVersion           = "9.4.5.v20170502", +	ext.junitVintageVersion    = "4.12.0-M4", +	ext.junitJupiterVersion    = '5.0.0-M4', +	ext.junitPlatformVersion   = '1.0.0-M4', +	ext.nettyVersion           = "4.1.11.Final", +	ext.niomultipartVersion    = "1.0.2", +	ext.okhttp3Version         = "3.8.0", +	ext.reactorVersion         = "Bismuth-M1", +	ext.romeVersion            = "1.7.3", +	ext.rxjava2Version         = '2.1.0', +	ext.tomcatVersion          = "8.5.15", +	ext.undertowVersion        = "1.4.15.Final", +	ext.xstreamVersion         = "1.4.9", +		kotlinOptions.freeCompilerArgs = ["-Xskip-runtime-version-check"], +		kotlinOptions.freeCompilerArgs = ["-Xskip-runtime-version-check"], +	def objenesisVersion = "2.5.1", +		optional("org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}"), +		testCompile("io.projectreactor.addons:reactor-test"), +		optional("org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}"), +		optional("org.hibernate:hibernate-validator:${hibval5Version}"), +		optional("org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}"), +		testCompile("xpp3:xpp3:1.1.4c"), +		compile(project(":spring-context")), +		testCompile("org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}"), +		compile(project(":spring-beans")), +		compile(project(":spring-aop")), +		compile(project(":spring-context")), +		optional("com.h2database:h2:1.4.195"), +		optional("org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}"), +		compile(project(":spring-core")), +		compile(project(":spring-aop"))  // for JaxWsPortProxyFactoryBean, +		compile(project(":spring-beans"))  // for MultipartFilter, +		compile(project(":spring-context")), +		provided "javax.servlet:javax.servlet-api:${servletVersion}", +		optional(project(":spring-oxm"))  // for MarshallingHttpMessageConverter, +		optional("javax.json.bind:javax.json.bind-api:1.0.0-M2"), +		optional("org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}"), +		testCompile("io.projectreactor.addons:reactor-test"), +	}, +}, +, +project("spring-webflux") {, +	description = "Spring WebFlux", +, +	dependencies {, +		compile(project(":spring-core")), +		compile(project(":spring-web")), +		compile("org.reactivestreams:reactive-streams"), +		compile("io.projectreactor:reactor-core"), +		optional(project(":spring-context-support"))  // for FreeMarker support, +		provided "javax.servlet:javax.servlet-api:${servletVersion}", +		optional("javax.xml.bind:jaxb-api:${jaxbVersion}"), +		optional("com.fasterxml.jackson.core:jackson-databind:${jackson2Version}"), +		optional("org.freemarker:freemarker:${freemarkerVersion}"), +		optional("org.apache.httpcomponents:httpclient:${httpclientVersion}") {, +			exclude group: "commons-logging", module: "commons-logging", +		}, +		optional('org.webjars:webjars-locator:0.32-1'), +		optional("io.projectreactor.ipc:reactor-netty"), +		optional("io.reactivex:rxjava:${rxjavaVersion}"), +		optional("io.reactivex:rxjava-reactive-streams:${rxjavaAdapterVersion}"), +		optional("javax.websocket:javax.websocket-api:${websocketVersion}"), +		optional("org.apache.tomcat:tomcat-websocket:${tomcatVersion}") {, +			exclude group: "org.apache.tomcat", module: "tomcat-websocket-api", +			exclude group: "org.apache.tomcat", module: "tomcat-servlet-api", +		}, +		optional("org.eclipse.jetty.websocket:websocket-server:${jettyVersion}") {, +			exclude group: "javax.servlet", module: "javax.servlet", +		}, +		optional("io.undertow:undertow-websockets-jsr:${undertowVersion}") {, +			exclude group: "org.jboss.spec.javax.websocket", module: "jboss-websocket-api_1.1_spec", +		}, +		optional("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"), +		optional("org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}"), +		testCompile("io.projectreactor.addons:reactor-test"), +		testCompile("javax.validation:validation-api:${beanvalVersion}"), +		testCompile("org.hibernate:hibernate-validator:${hibval5Version}"), +		testCompile("org.apache.tomcat:tomcat-util:${tomcatVersion}"), +		testCompile("org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}"), +		testCompile("org.eclipse.jetty:jetty-server:${jettyVersion}"), +		testCompile("org.eclipse.jetty:jetty-servlet:${jettyVersion}"), +		testCompile "io.reactivex.rxjava2:rxjava:${rxjava2Version}", +		testCompile("io.undertow:undertow-core:${undertowVersion}"), +		testCompile("io.reactivex:rxnetty-http:${rxnettyVersion}") {, +			exclude group: 'io.reactivex', module: 'rxjava', +		}]