[+++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/SpringValidatorAdapter.java, + * Copyright 2002-2015 the original author or authors., +			String field = determineField(violation);, +					String errorCode = determineErrorCode(cd);, +							Object rejectedValue = getRejectedValue(field, violation, bindingResult);, +									errors.getObjectName(), nestedField, rejectedValue, false,, +	 * Determine a field for the given constraint violation., +	 * <p>The default implementation returns the stringified property path., +	 * @param violation the current JSR-303 ConstraintViolation, +	 * @return the Spring-reported field (for use with {@link Errors}), +	 * @since 4.2, +	 * @see javax.validation.ConstraintViolation#getPropertyPath(), +	 * @see org.springframework.validation.FieldError#getField(), +	 */, +	protected String determineField(ConstraintViolation<Object> violation) {, +		return violation.getPropertyPath().toString();, +	}, +, +	/**, +	 * Determine a Spring-reported error code for the given constraint descriptor., +	 * <p>The default implementation returns the simple class name of the descriptor's, +	 * annotation type. Note that the configured, +	 * {@link org.springframework.validation.MessageCodesResolver} will automatically, +	 * generate error code variations which include the object name and the field name., +	 * @param descriptor the JSR-303 ConstraintDescriptor for the current violation, +	 * @return a corresponding error code (for use with {@link Errors}), +	 * @since 4.2, +	 * @see javax.validation.metadata.ConstraintDescriptor#getAnnotation(), +	 * @see org.springframework.validation.MessageCodesResolver, +	 */, +	protected String determineErrorCode(ConstraintDescriptor<?> descriptor) {, +		return descriptor.getAnnotation().annotationType().getSimpleName();, +	}, +, +	/**, +	/**, +	 * Extract the rejected value behind the given constraint violation,, +	 * for exposure through the Spring errors representation., +	 * @param field the field that caused the binding error, +	 * @param violation the corresponding JSR-303 ConstraintViolation, +	 * @param bindingResult a Spring BindingResult for the backing object, +	 * which contains the current field's value, +	 * @return the invalid value to expose as part of the field error, +	 * @since 4.2, +	 * @see javax.validation.ConstraintViolation#getInvalidValue(), +	 * @see org.springframework.validation.FieldError#getRejectedValue(), +	 */, +	protected Object getRejectedValue(String field, ConstraintViolation<Object> violation, BindingResult bindingResult) {, +		Object invalidValue = violation.getInvalidValue();, +		if (!"".equals(field) && (invalidValue == violation.getLeafBean() ||, +				(field.contains(".") && !field.contains("[]")))) {, +			// Possibly a bean constraint with property path: retrieve the actual property value., +			// However, explicitly avoid this for "address[]" style paths that we can't handle., +			invalidValue = bindingResult.getRawFieldValue(field);, +		}, +		return invalidValue;, +	}, +]