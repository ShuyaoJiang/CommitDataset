[+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DefaultDataBuffer.java, + * Copyright 2002-2017 the original author or authors., +	private static final int MAX_CAPACITY = Integer.MAX_VALUE;, +, +	private static final int CAPACITY_THRESHOLD = 1024 * 1024 * 4;, +, +, +		int neededCapacity = calculateCapacity(this.writePosition + extraCapacity);, +	/**, +	 * @see io.netty.buffer.AbstractByteBufAllocator#calculateNewCapacity(int, int), +	 */, +	private int calculateCapacity(int neededCapacity) {, +		Assert.isTrue(neededCapacity >= 0, "'neededCapacity' must >= 0");, +, +		if (neededCapacity == CAPACITY_THRESHOLD) {, +			return CAPACITY_THRESHOLD;, +		}, +		else if (neededCapacity > CAPACITY_THRESHOLD) {, +			int newCapacity = neededCapacity / CAPACITY_THRESHOLD * CAPACITY_THRESHOLD;, +			if (newCapacity > MAX_CAPACITY - CAPACITY_THRESHOLD) {, +				newCapacity = MAX_CAPACITY;, +			}, +			else {, +				newCapacity += CAPACITY_THRESHOLD;, +			}, +			return newCapacity;, +		}, +		else {, +			int newCapacity = 64;, +			while (newCapacity < neededCapacity) {, +				newCapacity <<= 1;, +			}, +			return Math.min(newCapacity, MAX_CAPACITY);, +		}, +	}, +, +	void grow(int capacity) {, +				(oldBuffer.isDirect() ? ByteBuffer.allocateDirect(capacity) :, +						ByteBuffer.allocate(capacity));, +		void grow(int capacity) {]