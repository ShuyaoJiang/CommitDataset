[+++ b/spring-websocket/src/main/java/org/springframework/sockjs/AbstractSockJsSession.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.sockjs;, +, +import java.net.URI;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.util.Assert;, +import org.springframework.websocket.CloseStatus;, +import org.springframework.websocket.TextMessage;, +import org.springframework.websocket.TextMessageHandler;, +import org.springframework.websocket.WebSocketHandler;, +import org.springframework.websocket.WebSocketSession;, +, +, +/**, + * TODO, + *, + * @author Rossen Stoyanchev, + * @since 4.0, + */, +public abstract class AbstractSockJsSession implements WebSocketSession {, +, +	protected Log logger = LogFactory.getLog(this.getClass());, +, +	private final String sessionId;, +, +	private final TextMessageHandler handler;, +, +	private State state = State.NEW;, +, +	private long timeCreated = System.currentTimeMillis();, +, +	private long timeLastActive = System.currentTimeMillis();, +, +, +	/**, +	 *, +	 * @param sessionId, +	 * @param handler the recipient of SockJS messages, +	 */, +	public AbstractSockJsSession(String sessionId, WebSocketHandler webSocketHandler) {, +		Assert.notNull(sessionId, "sessionId is required");, +		Assert.notNull(webSocketHandler, "webSocketHandler is required");, +		Assert.isInstanceOf(TextMessageHandler.class, webSocketHandler, "Expected a TextMessageHandler");, +		this.sessionId = sessionId;, +		this.handler = (TextMessageHandler) webSocketHandler;, +	}, +, +	public String getId() {, +		return this.sessionId;, +	}, +, +	@Override, +	public boolean isSecure() {, +		// TODO, +		return false;, +	}, +, +	@Override, +	public URI getURI() {, +		// TODO, +		return null;, +	}, +, +	public boolean isNew() {, +		return State.NEW.equals(this.state);, +	}, +, +	public boolean isOpen() {, +		return State.OPEN.equals(this.state);, +	}, +, +	public boolean isClosed() {, +		return State.CLOSED.equals(this.state);, +	}, +, +	/**, +	 * Polling and Streaming sessions periodically close the current HTTP request and, +	 * wait for the next request to come through. During this "downtime" the session is, +	 * still open but inactive and unable to send messages and therefore has to buffer, +	 * them temporarily. A WebSocket session by contrast is stateful and remain active, +	 * until closed., +	 */]