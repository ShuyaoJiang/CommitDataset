[+++ b/build.gradle, +		dependencies {, +			dependency "io.projectreactor.netty:reactor-netty:0.8.0.BUILD-SNAPSHOT", +		}, +++ b/build.gradle, +		dependencies {, +			dependency "io.projectreactor.netty:reactor-netty:0.8.0.BUILD-SNAPSHOT", +		}, +++ b/spring-messaging/spring-messaging.gradle, +	dependencies {, +		dependency "io.projectreactor.netty:reactor-netty:0.8.0.BUILD-SNAPSHOT", +	}, +	optional("io.projectreactor.netty:reactor-netty"), +++ b/build.gradle, +		dependencies {, +			dependency "io.projectreactor.netty:reactor-netty:0.8.0.BUILD-SNAPSHOT", +		}, +++ b/spring-messaging/spring-messaging.gradle, +	dependencies {, +		dependency "io.projectreactor.netty:reactor-netty:0.8.0.BUILD-SNAPSHOT", +	}, +	optional("io.projectreactor.netty:reactor-netty"), +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java, +	 * Simple constructor with the host and port to use to connect to., +	 * <p>This constructor manages the lifecycle of the {@link TcpClient} and, +	 * underlying resources such as {@link ConnectionProvider},, +	 * {@link LoopResources}, and {@link ChannelGroup}., +	 * <p>For full control over the initialization and lifecycle of the, +	 * TcpClient, use {@link #ReactorNettyTcpClient(TcpClient, ReactorNettyCodec)}., +	 * @param codec for encoding and decoding the input/output byte streams, +, +		this.tcpClient = TcpClient.create(this.poolResources), +				.host(host).port(port), +				.runOn(this.loopResources, false), +				.doOnConnected(conn -> this.channelGroup.add(conn.channel()));, +, +	 * @param codec for encoding and decoding the input/output byte streams, +			inbound.withConnection(conn -> {, +					logger.debug("Connected to " + conn.address());, +			inbound.withConnection(conn -> conn.addHandler(new StompMessageDecoder<>(codec)));, +++ b/build.gradle, +		dependencies {, +			dependency "io.projectreactor.netty:reactor-netty:0.8.0.BUILD-SNAPSHOT", +		}, +++ b/spring-messaging/spring-messaging.gradle, +	dependencies {, +		dependency "io.projectreactor.netty:reactor-netty:0.8.0.BUILD-SNAPSHOT", +	}, +	optional("io.projectreactor.netty:reactor-netty"), +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java, +	 * Simple constructor with the host and port to use to connect to., +	 * <p>This constructor manages the lifecycle of the {@link TcpClient} and, +	 * underlying resources such as {@link ConnectionProvider},, +	 * {@link LoopResources}, and {@link ChannelGroup}., +	 * <p>For full control over the initialization and lifecycle of the, +	 * TcpClient, use {@link #ReactorNettyTcpClient(TcpClient, ReactorNettyCodec)}., +	 * @param codec for encoding and decoding the input/output byte streams, +, +		this.tcpClient = TcpClient.create(this.poolResources), +				.host(host).port(port), +				.runOn(this.loopResources, false), +				.doOnConnected(conn -> this.channelGroup.add(conn.channel()));, +, +	 * @param codec for encoding and decoding the input/output byte streams, +			inbound.withConnection(conn -> {, +					logger.debug("Connected to " + conn.address());, +			inbound.withConnection(conn -> conn.addHandler(new StompMessageDecoder<>(codec)));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpConnection.java, + * Copyright 2002-2018 the original author or authors., +		this.inbound.withConnection(conn -> conn.onReadIdle(inactivityDuration, runnable));, +		this.inbound.withConnection(conn -> conn.onWriteIdle(inactivityDuration, runnable));, +++ b/build.gradle, +		dependencies {, +			dependency "io.projectreactor.netty:reactor-netty:0.8.0.BUILD-SNAPSHOT", +		}, +++ b/spring-messaging/spring-messaging.gradle, +	dependencies {, +		dependency "io.projectreactor.netty:reactor-netty:0.8.0.BUILD-SNAPSHOT", +	}, +	optional("io.projectreactor.netty:reactor-netty"), +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java, +	 * Simple constructor with the host and port to use to connect to., +	 * <p>This constructor manages the lifecycle of the {@link TcpClient} and, +	 * underlying resources such as {@link ConnectionProvider},, +	 * {@link LoopResources}, and {@link ChannelGroup}., +	 * <p>For full control over the initialization and lifecycle of the, +	 * TcpClient, use {@link #ReactorNettyTcpClient(TcpClient, ReactorNettyCodec)}., +	 * @param codec for encoding and decoding the input/output byte streams, +, +		this.tcpClient = TcpClient.create(this.poolResources), +				.host(host).port(port), +				.runOn(this.loopResources, false), +				.doOnConnected(conn -> this.channelGroup.add(conn.channel()));, +, +	 * @param codec for encoding and decoding the input/output byte streams, +			inbound.withConnection(conn -> {, +					logger.debug("Connected to " + conn.address());, +			inbound.withConnection(conn -> conn.addHandler(new StompMessageDecoder<>(codec)));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpConnection.java, + * Copyright 2002-2018 the original author or authors.]