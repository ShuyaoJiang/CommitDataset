[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +	/**, +	 * Resolve the specified cached method argument or field value., +	 */, +	private Object resolvedCachedArgument(String beanName, Object cachedArgument) {, +		if (cachedArgument instanceof DependencyDescriptor) {, +			DependencyDescriptor descriptor = (DependencyDescriptor) cachedArgument;, +			TypeConverter typeConverter = beanFactory.getTypeConverter();, +			return beanFactory.resolveDependency(descriptor, beanName, null, typeConverter);, +		}, +		else if (cachedArgument instanceof RuntimeBeanReference) {, +			return beanFactory.getBean(((RuntimeBeanReference) cachedArgument).getBeanName());, +		}, +		else {, +			return cachedArgument;, +		}, +	}, +, +					value = resolvedCachedArgument(beanName, this.cachedFieldValue);, +					synchronized (this) {, +						if (!this.cached) {, +						else {, +							// Already cached in the meantime..., +							value = resolvedCachedArgument(beanName, this.cachedFieldValue);, +						}, +					}, +				}, +				Object[] arguments;, +					// Shortcut for avoiding synchronization..., +					arguments = resolveCachedArguments(beanName);, +					synchronized (this) {, +						if (!this.cached) {, +						else {, +							// Already cached in the meantime..., +							arguments = resolveCachedArguments(beanName);, +						}, +					}, +				}, +, +		private Object[] resolveCachedArguments(String beanName) {, +			if (this.cachedMethodArguments == null) {, +				return null;, +			}, +			Object[] arguments = new Object[this.cachedMethodArguments.length];, +			for (int i = 0; i < arguments.length; i++) {, +				arguments[i] = resolvedCachedArgument(beanName, this.cachedMethodArguments[i]);, +			}, +			return arguments;, +		}]