[+++ b/spring-web/src/main/java/org/springframework/web/util/pattern/CaptureTheRestPathElement.java, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import java.util.List;, +, +import org.springframework.http.server.reactive.PathContainer.Element;, +import org.springframework.http.server.reactive.PathContainer.Segment;, +, +	public boolean matches(int pathIndex, MatchingContext matchingContext) {, +		if (pathIndex < matchingContext.pathLength && !matchingContext.isSeparator(pathIndex)) {, +			matchingContext.remainingPathIndex = matchingContext.pathLength;, +			// Collect the parameters from all the remaining segments, +			MultiValueMap<String,String> parametersCollector = null;, +			for (int i = pathIndex; i < matchingContext.pathLength; i++) {, +				Element element = matchingContext.pathElements.get(i);, +				if (element instanceof Segment) {, +					MultiValueMap<String, String> parameters = ((Segment)element).parameters();, +					if (parameters != null && parameters.size()!=0) {, +						if (parametersCollector == null) {, +							parametersCollector = new LinkedMultiValueMap<>();, +						}, +						parametersCollector.addAll(parameters);, +					}, +				}, +			}, +			matchingContext.set(variableName, pathToString(pathIndex, matchingContext.pathElements),, +					parametersCollector == null?NO_PARAMETERS:parametersCollector);, +	private String pathToString(int fromSegment, List<Element> pathElements) {, +		StringBuilder buf = new StringBuilder();, +		for (int i = fromSegment, max = pathElements.size(); i < max; i++) {, +			Element element = pathElements.get(i);, +			if (element instanceof Segment) {, +				buf.append(((Segment)element).valueDecoded());, +			}, +			else {, +				buf.append(element.value());, +			}, +		}, +		return buf.toString();, +	}, +, +	@Override, +	public char[] getChars() {, +		return ("/{*"+this.variableName+"}").toCharArray();, +	}, +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/CaptureTheRestPathElement.java, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import java.util.List;, +, +import org.springframework.http.server.reactive.PathContainer.Element;, +import org.springframework.http.server.reactive.PathContainer.Segment;, +, +	public boolean matches(int pathIndex, MatchingContext matchingContext) {, +		if (pathIndex < matchingContext.pathLength && !matchingContext.isSeparator(pathIndex)) {, +			matchingContext.remainingPathIndex = matchingContext.pathLength;, +			// Collect the parameters from all the remaining segments, +			MultiValueMap<String,String> parametersCollector = null;, +			for (int i = pathIndex; i < matchingContext.pathLength; i++) {, +				Element element = matchingContext.pathElements.get(i);, +				if (element instanceof Segment) {, +					MultiValueMap<String, String> parameters = ((Segment)element).parameters();, +					if (parameters != null && parameters.size()!=0) {, +						if (parametersCollector == null) {, +							parametersCollector = new LinkedMultiValueMap<>();, +						}, +						parametersCollector.addAll(parameters);, +					}, +				}, +			}, +			matchingContext.set(variableName, pathToString(pathIndex, matchingContext.pathElements),, +					parametersCollector == null?NO_PARAMETERS:parametersCollector);, +	private String pathToString(int fromSegment, List<Element> pathElements) {, +		StringBuilder buf = new StringBuilder();, +		for (int i = fromSegment, max = pathElements.size(); i < max; i++) {, +			Element element = pathElements.get(i);, +			if (element instanceof Segment) {, +				buf.append(((Segment)element).valueDecoded());, +			}, +			else {, +				buf.append(element.value());, +			}, +		}, +		return buf.toString();, +	}, +, +	@Override, +	public char[] getChars() {, +		return ("/{*"+this.variableName+"}").toCharArray();, +	}, +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/CaptureVariablePathElement.java, +import org.springframework.http.server.reactive.PathContainer.Segment;, +	public boolean matches(int pathIndex, PathPattern.MatchingContext matchingContext) {, +		if (pathIndex >= matchingContext.pathLength) {, +			// no more path left to match this element, +			return false;, +		}, +		String candidateCapture = matchingContext.pathElementValue(pathIndex);, +		if (candidateCapture.length() == 0) {, +		pathIndex++;]