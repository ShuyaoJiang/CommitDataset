[+++ b/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java, +			this.customEditorsForPath.forEach((editorPath, editorHolder) -> {, +			});, +++ b/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java, +			this.customEditorsForPath.forEach((editorPath, editorHolder) -> {, +			});, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/CustomScopeConfigurer.java, + * Copyright 2002-2018 the original author or authors., +			this.scopes.forEach((scopeKey, value) -> {, +			});, +++ b/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java, +			this.customEditorsForPath.forEach((editorPath, editorHolder) -> {, +			});, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/CustomScopeConfigurer.java, + * Copyright 2002-2018 the original author or authors., +			this.scopes.forEach((scopeKey, value) -> {, +			});, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java, + * Copyright 2002-2018 the original author or authors., +		source.forEach((key, value) -> {, +		});, +++ b/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java, +			this.customEditorsForPath.forEach((editorPath, editorHolder) -> {, +			});, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/CustomScopeConfigurer.java, + * Copyright 2002-2018 the original author or authors., +			this.scopes.forEach((scopeKey, value) -> {, +			});, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java, + * Copyright 2002-2018 the original author or authors., +		source.forEach((key, value) -> {, +		});, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionValueResolver.java, + * Copyright 2002-2018 the original author or authors., +		mm.forEach((key, value) -> {, +			Object resolvedKey = resolveValueIfNecessary(argName, key);, +			Object resolvedValue = resolveValueIfNecessary(new KeyedArgName(argName, key), value);, +		});, +++ b/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java, +			this.customEditorsForPath.forEach((editorPath, editorHolder) -> {, +			});, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/CustomScopeConfigurer.java, + * Copyright 2002-2018 the original author or authors., +			this.scopes.forEach((scopeKey, value) -> {, +			});, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java, + * Copyright 2002-2018 the original author or authors., +		source.forEach((key, value) -> {, +		});, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionValueResolver.java, + * Copyright 2002-2018 the original author or authors., +		mm.forEach((key, value) -> {, +			Object resolvedKey = resolveValueIfNecessary(argName, key);, +			Object resolvedValue = resolveValueIfNecessary(new KeyedArgName(argName, key), value);, +		});, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +		importedResources.forEach((resource, readerClass) -> {, +		});, +++ b/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java, +			this.customEditorsForPath.forEach((editorPath, editorHolder) -> {, +			});, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/CustomScopeConfigurer.java, + * Copyright 2002-2018 the original author or authors., +			this.scopes.forEach((scopeKey, value) -> {, +			});, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java, + * Copyright 2002-2018 the original author or authors., +		source.forEach((key, value) -> {, +		});, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionValueResolver.java, + * Copyright 2002-2018 the original author or authors., +		mm.forEach((key, value) -> {, +			Object resolvedKey = resolveValueIfNecessary(argName, key);, +			Object resolvedValue = resolveValueIfNecessary(new KeyedArgName(argName, key), value);, +		});, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +		importedResources.forEach((resource, readerClass) -> {, +		});, +++ b/spring-core/src/main/java/org/springframework/core/Constants.java, + * Copyright 2002-2018 the original author or authors., +		this.fieldCache.forEach((code, value) -> {, +				values.add(value);, +		});, +		this.fieldCache.forEach((code, value) -> {, +				values.add(value);, +		});, +++ b/spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java, +			this.customEditorsForPath.forEach((editorPath, editorHolder) -> {, +			});, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/CustomScopeConfigurer.java, + * Copyright 2002-2018 the original author or authors., +			this.scopes.forEach((scopeKey, value) -> {, +			});, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java, + * Copyright 2002-2018 the original author or authors., +		source.forEach((key, value) -> {, +		});, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionValueResolver.java, + * Copyright 2002-2018 the original author or authors., +		mm.forEach((key, value) -> {]