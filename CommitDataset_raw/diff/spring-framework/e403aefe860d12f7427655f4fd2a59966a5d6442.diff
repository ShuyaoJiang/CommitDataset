[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.beans.factory.config.BeanDefinition;, +							"these container lifecycle issues; see @Bean javadoc for complete details.",, +					Object beanInstance = (!ObjectUtils.isEmpty(beanMethodArgs) ?, +					if (beanInstance != null && !beanMethod.getReturnType().isInstance(beanInstance)) {, +						String msg = String.format("@Bean method %s.%s called as a bean reference " +, +									"for type [%s] but overridden by non-compatible bean instance of type [%s].",, +									beanMethod.getDeclaringClass().getSimpleName(), beanMethod.getName(),, +									beanMethod.getReturnType().getName(), beanInstance.getClass().getName());, +						try {, +							BeanDefinition beanDefinition = beanFactory.getMergedBeanDefinition(beanName);, +							msg += " Overriding bean of same name declared in: " + beanDefinition.getResourceDescription();, +						}, +						catch (NoSuchBeanDefinitionException ex) {, +							// Ignore - simply no detailed message then., +						}, +						throw new IllegalStateException(msg);, +					}, +					return beanInstance;, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.beans.factory.config.BeanDefinition;, +							"these container lifecycle issues; see @Bean javadoc for complete details.",, +					Object beanInstance = (!ObjectUtils.isEmpty(beanMethodArgs) ?, +					if (beanInstance != null && !beanMethod.getReturnType().isInstance(beanInstance)) {, +						String msg = String.format("@Bean method %s.%s called as a bean reference " +, +									"for type [%s] but overridden by non-compatible bean instance of type [%s].",, +									beanMethod.getDeclaringClass().getSimpleName(), beanMethod.getName(),, +									beanMethod.getReturnType().getName(), beanInstance.getClass().getName());, +						try {, +							BeanDefinition beanDefinition = beanFactory.getMergedBeanDefinition(beanName);, +							msg += " Overriding bean of same name declared in: " + beanDefinition.getResourceDescription();, +						}, +						catch (NoSuchBeanDefinitionException ex) {, +							// Ignore - simply no detailed message then., +						}, +						throw new IllegalStateException(msg);, +					}, +					return beanInstance;, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, +, +		Foo foo = beanFactory.getBean(Foo.class);, +		assertTrue(foo instanceof ExtendedFoo);, +		Bar bar = beanFactory.getBean(Bar.class);, +		assertSame(foo, bar.foo);, +	}, +, +	@Test, +	public void configurationClassesWithValidOverridingForProgrammaticCall() {, +		beanFactory.registerBeanDefinition("config1", new RootBeanDefinition(OverridingAgainSingletonBeanConfig.class));, +		beanFactory.registerBeanDefinition("config2", new RootBeanDefinition(OverridingSingletonBeanConfig.class));, +		beanFactory.registerBeanDefinition("config3", new RootBeanDefinition(SingletonBeanConfig.class));, +		ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor();, +		pp.postProcessBeanFactory(beanFactory);, +, +		Foo foo = beanFactory.getBean(Foo.class);, +		assertTrue(foo instanceof ExtendedAgainFoo);, +		Bar bar = beanFactory.getBean(Bar.class);, +		assertSame(foo, bar.foo);, +	}, +, +	@Test, +	public void configurationClassesWithInvalidOverridingForProgrammaticCall() {, +		beanFactory.registerBeanDefinition("config1", new RootBeanDefinition(InvalidOverridingSingletonBeanConfig.class));, +		beanFactory.registerBeanDefinition("config2", new RootBeanDefinition(OverridingSingletonBeanConfig.class));, +		beanFactory.registerBeanDefinition("config3", new RootBeanDefinition(SingletonBeanConfig.class));, +		ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor();, +		pp.postProcessBeanFactory(beanFactory);, +, +		try {, +			fail("Should have thrown BeanCreationException");, +		}, +		catch (BeanCreationException ex) {, +			assertTrue(ex.getMessage().contains("OverridingSingletonBeanConfig.foo"));, +			assertTrue(ex.getMessage().contains(ExtendedFoo.class.getName()));, +			assertTrue(ex.getMessage().contains(Foo.class.getName()));, +			assertTrue(ex.getMessage().contains("InvalidOverridingSingletonBeanConfig"));, +		}, +, +		public @Bean Foo foo() {, +		public @Bean Bar bar() {, +		public @Bean ExtendedFoo foo() {, +		public @Bean Bar bar() {, +	@Configuration, +	static class OverridingAgainSingletonBeanConfig {, +, +		public @Bean ExtendedAgainFoo foo() {, +			return new ExtendedAgainFoo();, +		}, +	}, +, +	@Configuration, +	static class InvalidOverridingSingletonBeanConfig {, +, +		public @Bean Foo foo() {, +			return new Foo();, +		}, +	}, +]