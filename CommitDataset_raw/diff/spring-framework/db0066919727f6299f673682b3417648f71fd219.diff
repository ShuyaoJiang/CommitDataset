[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultEntityResponseBuilder.java, +import java.util.function.Consumer;, +import org.springframework.http.ResponseCookie;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +	private final MultiValueMap<String, ResponseCookie> cookies = new LinkedMultiValueMap<>();, +, +	public EntityResponse.Builder<T> cookie(ResponseCookie cookie) {, +		Assert.notNull(cookie, "'cookie' must not be null");, +		this.cookies.add(cookie.getName(), cookie);, +		return this;, +	}, +, +	@Override, +	public EntityResponse.Builder<T> cookies(, +			Consumer<MultiValueMap<String, ResponseCookie>> cookiesConsumer) {, +		Assert.notNull(cookiesConsumer, "'cookiesConsumer' must not be null");, +		cookiesConsumer.accept(this.cookies);, +		return this;, +	}, +, +	@Override, +		return Mono.just(new DefaultEntityResponse<T>(this.status, this.headers, this.cookies,, +				this.entity, this.inserter, this.hints));, +		public DefaultEntityResponse(HttpStatus statusCode, HttpHeaders headers,, +				MultiValueMap<String, ResponseCookie> cookies, T entity,, +			super(statusCode, headers, cookies);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultEntityResponseBuilder.java, +import java.util.function.Consumer;, +import org.springframework.http.ResponseCookie;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +	private final MultiValueMap<String, ResponseCookie> cookies = new LinkedMultiValueMap<>();, +, +	public EntityResponse.Builder<T> cookie(ResponseCookie cookie) {, +		Assert.notNull(cookie, "'cookie' must not be null");, +		this.cookies.add(cookie.getName(), cookie);, +		return this;, +	}, +, +	@Override, +	public EntityResponse.Builder<T> cookies(, +			Consumer<MultiValueMap<String, ResponseCookie>> cookiesConsumer) {, +		Assert.notNull(cookiesConsumer, "'cookiesConsumer' must not be null");, +		cookiesConsumer.accept(this.cookies);, +		return this;, +	}, +, +	@Override, +		return Mono.just(new DefaultEntityResponse<T>(this.status, this.headers, this.cookies,, +				this.entity, this.inserter, this.hints));, +		public DefaultEntityResponse(HttpStatus statusCode, HttpHeaders headers,, +				MultiValueMap<String, ResponseCookie> cookies, T entity,, +			super(statusCode, headers, cookies);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultRenderingResponseBuilder.java, +import java.util.function.Consumer;, +import org.springframework.http.ResponseCookie;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +	private final MultiValueMap<String, ResponseCookie> cookies = new LinkedMultiValueMap<>();, +, +	public RenderingResponse.Builder cookie(ResponseCookie cookie) {, +		Assert.notNull(cookie, "'cookie' must not be null");, +		this.cookies.add(cookie.getName(), cookie);, +		return this;, +	}, +, +	@Override, +	public RenderingResponse.Builder cookies(Consumer<MultiValueMap<String, ResponseCookie>> cookiesConsumer) {, +		Assert.notNull(cookiesConsumer, "'cookiesConsumer' must not be null");, +		cookiesConsumer.accept(this.cookies);, +		return this;, +	}, +, +	@Override, +		return Mono.just(new DefaultRenderingResponse(this.status, this.headers, this.cookies,, +				this.name, this.model));, +		public DefaultRenderingResponse(HttpStatus statusCode, HttpHeaders headers,, +				MultiValueMap<String, ResponseCookie> cookies,, +				String name, Map<String, Object> model) {, +			super(statusCode, headers, cookies);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultEntityResponseBuilder.java, +import java.util.function.Consumer;, +import org.springframework.http.ResponseCookie;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +	private final MultiValueMap<String, ResponseCookie> cookies = new LinkedMultiValueMap<>();, +, +	public EntityResponse.Builder<T> cookie(ResponseCookie cookie) {, +		Assert.notNull(cookie, "'cookie' must not be null");, +		this.cookies.add(cookie.getName(), cookie);, +		return this;, +	}, +, +	@Override, +	public EntityResponse.Builder<T> cookies(, +			Consumer<MultiValueMap<String, ResponseCookie>> cookiesConsumer) {, +		Assert.notNull(cookiesConsumer, "'cookiesConsumer' must not be null");, +		cookiesConsumer.accept(this.cookies);, +		return this;]