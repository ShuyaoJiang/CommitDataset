[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/method/InvocableHandlerMethod.java, +import org.springframework.core.DefaultParameterNameDiscoverer;, +	private ParameterNameDiscoverer parameterNameDiscoverer = new DefaultParameterNameDiscoverer();, +	 * Construct a new handler method with the given bean instance, method name and parameters., +	public InvocableHandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException {, +, +	 * Set the ParameterNameDiscoverer for resolving parameter names when needed, +	 * (e.g. default request attribute name)., +	 * <p>Default is a {@link org.springframework.core.DefaultParameterNameDiscoverer}., +, +	 * @throws Exception raised if no suitable argument resolver can be found,, +	 * or the method raised an exception, +			sb.append(getMethod().getName()).append("] method with arguments ");, +			logger.trace("Method [" + getMethod().getName() + "] returned [" + returnValue + "]");, +				}, +				catch (Exception ex) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/method/InvocableHandlerMethod.java, +import org.springframework.core.DefaultParameterNameDiscoverer;, +	private ParameterNameDiscoverer parameterNameDiscoverer = new DefaultParameterNameDiscoverer();, +	 * Construct a new handler method with the given bean instance, method name and parameters., +	public InvocableHandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException {, +, +	 * Set the ParameterNameDiscoverer for resolving parameter names when needed, +	 * (e.g. default request attribute name)., +	 * <p>Default is a {@link org.springframework.core.DefaultParameterNameDiscoverer}., +, +	 * @throws Exception raised if no suitable argument resolver can be found,, +	 * or the method raised an exception, +			sb.append(getMethod().getName()).append("] method with arguments ");, +			logger.trace("Method [" + getMethod().getName() + "] returned [" + returnValue + "]");, +				}, +				catch (Exception ex) {, +++ b/spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java, + * Copyright 2002-2013 the original author or authors., +	 * Construct a new handler method with the given bean instance, method name and parameters., +	public InvocableHandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException {, +, +	 * Set the {@link WebDataBinderFactory} to be passed to argument resolvers allowing them to create, +, +	public final Object invokeForRequest(NativeWebRequest request, ModelAndViewContainer mavContainer,, +, +			StringBuilder sb = new StringBuilder("Invoking [");, +			sb.append(this.getBeanType().getSimpleName()).append(".");, +			sb.append(getMethod().getName()).append("] method with arguments ");, +			sb.append(Arrays.asList(args));, +			logger.trace(sb.toString());, +			logger.trace("Method [" + getMethod().getName() + "] returned [" + returnValue + "]");, +	private Object[] getMethodArgumentValues(NativeWebRequest request, ModelAndViewContainer mavContainer,, +			parameter.initParameterNameDiscovery(this.parameterNameDiscoverer);, +			if (this.argumentResolvers.supportsParameter(parameter)) {, +					args[i] = this.argumentResolvers.resolveArgument(parameter, mavContainer, request, this.dataBinderFactory);, +				}, +				catch (Exception ex) {]