[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/MockMvcWebConnection.java, +import java.util.Date;, +import com.gargoylesoftware.htmlunit.CookieManager;, +import com.gargoylesoftware.htmlunit.util.Cookie;, +		storeCookies(webRequest, httpServletResponse.getCookies());, +	private void storeCookies(WebRequest webRequest, javax.servlet.http.Cookie[] cookies) {, +		if (cookies == null) {, +			return;, +		}, +		Date now = new Date();, +		CookieManager cookieManager = webClient.getCookieManager();, +		for (javax.servlet.http.Cookie cookie : cookies) {, +			if (cookie.getDomain() == null) {, +				cookie.setDomain(webRequest.getUrl().getHost());, +			}, +			Cookie toManage = MockWebResponseBuilder.createCookie(cookie);, +			Date expires = toManage.getExpires();, +			if (expires == null || expires.after(now)) {, +				cookieManager.addCookie(toManage);, +			}, +			else {, +				cookieManager.removeCookie(toManage);, +			}, +		}, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/MockMvcWebConnection.java, +import java.util.Date;, +import com.gargoylesoftware.htmlunit.CookieManager;, +import com.gargoylesoftware.htmlunit.util.Cookie;, +		storeCookies(webRequest, httpServletResponse.getCookies());, +	private void storeCookies(WebRequest webRequest, javax.servlet.http.Cookie[] cookies) {, +		if (cookies == null) {, +			return;, +		}, +		Date now = new Date();, +		CookieManager cookieManager = webClient.getCookieManager();, +		for (javax.servlet.http.Cookie cookie : cookies) {, +			if (cookie.getDomain() == null) {, +				cookie.setDomain(webRequest.getUrl().getHost());, +			}, +			Cookie toManage = MockWebResponseBuilder.createCookie(cookie);, +			Date expires = toManage.getExpires();, +			if (expires == null || expires.after(now)) {, +				cookieManager.addCookie(toManage);, +			}, +			else {, +				cookieManager.removeCookie(toManage);, +			}, +		}, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/MockWebResponseBuilder.java, +		return createCookie(cookie).toString();, +	}, +, +	static com.gargoylesoftware.htmlunit.util.Cookie createCookie(Cookie cookie) {, +		return new com.gargoylesoftware.htmlunit.util.Cookie(result);, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/MockMvcWebConnection.java, +import java.util.Date;, +import com.gargoylesoftware.htmlunit.CookieManager;, +import com.gargoylesoftware.htmlunit.util.Cookie;, +		storeCookies(webRequest, httpServletResponse.getCookies());, +	private void storeCookies(WebRequest webRequest, javax.servlet.http.Cookie[] cookies) {, +		if (cookies == null) {, +			return;, +		}, +		Date now = new Date();, +		CookieManager cookieManager = webClient.getCookieManager();, +		for (javax.servlet.http.Cookie cookie : cookies) {, +			if (cookie.getDomain() == null) {, +				cookie.setDomain(webRequest.getUrl().getHost());, +			}, +			Cookie toManage = MockWebResponseBuilder.createCookie(cookie);, +			Date expires = toManage.getExpires();, +			if (expires == null || expires.after(now)) {, +				cookieManager.addCookie(toManage);, +			}, +			else {, +				cookieManager.removeCookie(toManage);, +			}, +		}, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/MockWebResponseBuilder.java, +		return createCookie(cookie).toString();, +	}, +, +	static com.gargoylesoftware.htmlunit.util.Cookie createCookie(Cookie cookie) {, +		return new com.gargoylesoftware.htmlunit.util.Cookie(result);, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/htmlunit/MockMvcWebClientBuilderTests.java, +import javax.servlet.http.HttpServletResponse;, +import com.gargoylesoftware.htmlunit.HttpMethod;, +import org.springframework.web.bind.annotation.DeleteMapping;, +import org.springframework.web.bind.annotation.PostMapping;, +import org.springframework.web.bind.annotation.RequestParam;, +		assertThat(getResponse(client, "http://localhost/").getContentAsString(), equalTo("NA"));, +	@Test // SPR-14265, +	public void cookiesAreManaged() throws Exception {, +		this.mockMvc = MockMvcBuilders.standaloneSetup(new CookieController()).build();]