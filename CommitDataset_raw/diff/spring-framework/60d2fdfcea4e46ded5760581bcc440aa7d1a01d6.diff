[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/UrlTag.java, +import org.springframework.util.StringUtils;, +	protected String createQueryString(List<Param> params, Set<String> usedParams, boolean includeQueryStringDelimiter), +		String encoding = pageContext.getResponse().getCharacterEncoding();, +, +			if (!usedParams.contains(param.getName()) && StringUtils.hasLength(param.getName())) {, +				try {, +					qs.append(UriUtils.encodeQueryParam(param.getName(), encoding));, +						qs.append(UriUtils.encodeQueryParam(param.getValue(), encoding));, +					}, +				}, +				catch (UnsupportedEncodingException ex) {, +					throw new JspException(ex);, +		String encoding = pageContext.getResponse().getCharacterEncoding();, +, +					uri = uri.replace(template, UriUtils.encodePath(param.getValue(), encoding));, +		}, +		return uri;, +	}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/UrlTag.java, +import org.springframework.util.StringUtils;, +	protected String createQueryString(List<Param> params, Set<String> usedParams, boolean includeQueryStringDelimiter), +		String encoding = pageContext.getResponse().getCharacterEncoding();, +, +			if (!usedParams.contains(param.getName()) && StringUtils.hasLength(param.getName())) {, +				try {, +					qs.append(UriUtils.encodeQueryParam(param.getName(), encoding));, +						qs.append(UriUtils.encodeQueryParam(param.getValue(), encoding));, +					}, +				}, +				catch (UnsupportedEncodingException ex) {, +					throw new JspException(ex);, +		String encoding = pageContext.getResponse().getCharacterEncoding();, +, +					uri = uri.replace(template, UriUtils.encodePath(param.getValue(), encoding));, +		}, +		return uri;, +	}, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/tags/UrlTagTests.java, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/UrlTag.java, +import org.springframework.util.StringUtils;, +	protected String createQueryString(List<Param> params, Set<String> usedParams, boolean includeQueryStringDelimiter), +		String encoding = pageContext.getResponse().getCharacterEncoding();, +, +			if (!usedParams.contains(param.getName()) && StringUtils.hasLength(param.getName())) {, +				try {, +					qs.append(UriUtils.encodeQueryParam(param.getName(), encoding));, +						qs.append(UriUtils.encodeQueryParam(param.getValue(), encoding));, +					}, +				}, +				catch (UnsupportedEncodingException ex) {, +					throw new JspException(ex);, +		String encoding = pageContext.getResponse().getCharacterEncoding();, +, +					uri = uri.replace(template, UriUtils.encodePath(param.getValue(), encoding));, +		}, +		return uri;, +	}, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/tags/UrlTagTests.java, +++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriTemplate.java, +import java.io.UnsupportedEncodingException;, +			String encoded = UriUtils.encodeUri(uri, "UTF-8");, +			return new URI(encoded);, +		catch (UnsupportedEncodingException ex) {, +			// should not happen, UTF-8 is always supported, +			throw new IllegalStateException(ex);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/UrlTag.java, +import org.springframework.util.StringUtils;, +	protected String createQueryString(List<Param> params, Set<String> usedParams, boolean includeQueryStringDelimiter), +		String encoding = pageContext.getResponse().getCharacterEncoding();, +, +			if (!usedParams.contains(param.getName()) && StringUtils.hasLength(param.getName())) {, +				try {, +					qs.append(UriUtils.encodeQueryParam(param.getName(), encoding));, +						qs.append(UriUtils.encodeQueryParam(param.getValue(), encoding));, +					}, +				}, +				catch (UnsupportedEncodingException ex) {, +					throw new JspException(ex);, +		String encoding = pageContext.getResponse().getCharacterEncoding();, +, +					uri = uri.replace(template, UriUtils.encodePath(param.getValue(), encoding));, +		}, +		return uri;, +	}, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/tags/UrlTagTests.java, +++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriTemplate.java, +import java.io.UnsupportedEncodingException;, +			String encoded = UriUtils.encodeUri(uri, "UTF-8");, +			return new URI(encoded);, +		catch (UnsupportedEncodingException ex) {, +			// should not happen, UTF-8 is always supported, +			throw new IllegalStateException(ex);, +++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriUtils.java, +import java.util.regex.Pattern;, +import java.util.regex.Matcher;, + * Utility class for URI encoding and decoding based on RFC 3986. Offers encoding methods for, + * the various URI components., + * <p>All {@code encode*(String, String} methods in this class operate in a similar way:, + * <ul>]