[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Bean.java, + * to those of the {@literal <bean/>} element in the Spring XML schema., + * <p>Note that the <code>@Bean</code> annotation does not provide attributes for scope,, + * primary or lazy. Rather, it should be used in conjunction with {@link Scope &#064;Scope},, + * {@link Primary &#064;Primary}, and {@link Lazy &#064;Lazy} annotations to achieve, + * those semantics. The same annotations can also be used at the type level, e.g. for, + * component scanning., + * Also note that {@link #name()} accepts an array of Strings. This is in order to allow, + * <p>The <code>@Bean</code> annotation may be used on any methods in an <code>@Component</code>, + * class, in which case they will get processed in a configuration class 'lite' mode where, + * they will simply be called as plain factory methods from the container (similar to, + * <code>factory-method</code> declarations in XML). The containing component classes remain, + * unmodified in this case, and there are no unusual constraints for factory methods., + * <p>As an advanced mode, <code>@Bean</code> may also be used within <code>@Configuration</code>, + * component classes. In this case, bean methods may reference other <code>@Bean</code> methods, + * on the same class by calling them <i>directly</i>. This ensures that references between beans, + * are strongly typed and navigable. Such so-called 'inter-bean references' are guaranteed to, + * respect scoping and AOP semantics, just like <code>getBean</code> lookups would. These are, + * the semantics known from the original 'Spring JavaConfig' project which require CGLIB, + * subclassing of each such configuration class at runtime. As a consequence, configuration, + * classes and their factory methods must not be marked as final or private in this mode., + * @author Juergen Hoeller, + * @see org.springframework.stereotype.Component, + * @see Scope, + * @see org.springframework.beans.factory.annotation.Autowired, + * @see org.springframework.beans.factory.annotation.Value]