[+++ b/spring-context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassProcessingTests.java, +import org.springframework.tests.sample.beans.NestedTestBean;, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(ConfigWithPrototypeBean.class, AdaptiveInjectionPoints.class);, +		ctx.refresh();, +		AdaptiveInjectionPoints adaptive = ctx.getBean(AdaptiveInjectionPoints.class);, +		adaptive = ctx.getBean(AdaptiveInjectionPoints.class);, +		ctx.close();, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(ConfigWithPostProcessor.class);, +		ctx.registerBeanDefinition("placeholderConfigurer", placeholderConfigurer);, +		ctx.refresh();, +		TestBean foo = ctx.getBean("foo", TestBean.class);, +		ITestBean bar = ctx.getBean("bar", ITestBean.class);, +		ITestBean baz = ctx.getBean("baz", ITestBean.class);, +		SpousyTestBean listener = ctx.getBean("listenerTestBean", SpousyTestBean.class);, +		ctx.close();, +	}, +, +	@Test, +	public void configurationWithFunctionalRegistration() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(ConfigWithFunctionalRegistration.class);, +		ctx.refresh();, +, +		assertSame(ctx.getBean("spouse"), ctx.getBean(TestBean.class).getSpouse());, +		assertEquals("functional", ctx.getBean(NestedTestBean.class).getCompany());, +, +	@Configuration, +	static class ConfigWithFunctionalRegistration {, +, +		@Autowired, +		void register(GenericApplicationContext ctx) {, +			ctx.registerBean("spouse", TestBean.class,, +					() -> new TestBean("functional"));, +			ctx.registerBean(TestBean.class,, +					() -> new TestBean(ctx.getBean("spouse", TestBean.class)),, +					bd -> bd.setPrimary(true));, +		}, +, +		@Bean, +		public NestedTestBean nestedTestBean(TestBean testBean) {, +			return new NestedTestBean(testBean.getSpouse().getName());, +		}, +	}, +]