[+++ b/spring-aop/src/main/java/org/springframework/aop/support/MethodMatchers.java, +			return 37 * this.mm1.hashCode() + this.mm2.hashCode();, +, +		@Override, +		public int hashCode() {, +			int hashCode = super.hashCode();, +			hashCode = 37 * hashCode + this.cf1.hashCode();, +			hashCode = 37 * hashCode + this.cf2.hashCode();, +			return hashCode;, +		}, +			return 37 * this.mm1.hashCode() + this.mm2.hashCode();, +++ b/spring-aop/src/main/java/org/springframework/aop/support/MethodMatchers.java, +			return 37 * this.mm1.hashCode() + this.mm2.hashCode();, +, +		@Override, +		public int hashCode() {, +			int hashCode = super.hashCode();, +			hashCode = 37 * hashCode + this.cf1.hashCode();, +			hashCode = 37 * hashCode + this.cf2.hashCode();, +			return hashCode;, +		}, +			return 37 * this.mm1.hashCode() + this.mm2.hashCode();, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, + * Copyright 2002-2018 the original author or authors., +		return 31 * super.hashCode() + ObjectUtils.nullSafeHashCode(this.containingClass);, +++ b/spring-aop/src/main/java/org/springframework/aop/support/MethodMatchers.java, +			return 37 * this.mm1.hashCode() + this.mm2.hashCode();, +, +		@Override, +		public int hashCode() {, +			int hashCode = super.hashCode();, +			hashCode = 37 * hashCode + this.cf1.hashCode();, +			hashCode = 37 * hashCode + this.cf2.hashCode();, +			return hashCode;, +		}, +			return 37 * this.mm1.hashCode() + this.mm2.hashCode();, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, + * Copyright 2002-2018 the original author or authors., +		return 31 * super.hashCode() + ObjectUtils.nullSafeHashCode(this.containingClass);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, +public abstract class AnnotationConfigUtils {, +++ b/spring-aop/src/main/java/org/springframework/aop/support/MethodMatchers.java, +			return 37 * this.mm1.hashCode() + this.mm2.hashCode();, +, +		@Override, +		public int hashCode() {, +			int hashCode = super.hashCode();, +			hashCode = 37 * hashCode + this.cf1.hashCode();, +			hashCode = 37 * hashCode + this.cf2.hashCode();, +			return hashCode;, +		}, +			return 37 * this.mm1.hashCode() + this.mm2.hashCode();, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, + * Copyright 2002-2018 the original author or authors., +		return 31 * super.hashCode() + ObjectUtils.nullSafeHashCode(this.containingClass);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, +public abstract class AnnotationConfigUtils {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +	 * Return if the supplied array type has a core component reference type., +++ b/spring-aop/src/main/java/org/springframework/aop/support/MethodMatchers.java, +			return 37 * this.mm1.hashCode() + this.mm2.hashCode();, +, +		@Override, +		public int hashCode() {, +			int hashCode = super.hashCode();, +			hashCode = 37 * hashCode + this.cf1.hashCode();, +			hashCode = 37 * hashCode + this.cf2.hashCode();, +			return hashCode;, +		}, +			return 37 * this.mm1.hashCode() + this.mm2.hashCode();, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, + * Copyright 2002-2018 the original author or authors., +		return 31 * super.hashCode() + ObjectUtils.nullSafeHashCode(this.containingClass);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, +public abstract class AnnotationConfigUtils {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +	 * Return if the supplied array type has a core component reference type., +++ b/spring-jms/src/main/java/org/springframework/jms/connection/CachingConnectionFactory.java, +			return 31 * super.hashCode() + ObjectUtils.nullSafeHashCode(this.selector);, +++ b/spring-aop/src/main/java/org/springframework/aop/support/MethodMatchers.java, +			return 37 * this.mm1.hashCode() + this.mm2.hashCode();, +, +		@Override, +		public int hashCode() {, +			int hashCode = super.hashCode();, +			hashCode = 37 * hashCode + this.cf1.hashCode();, +			hashCode = 37 * hashCode + this.cf2.hashCode();, +			return hashCode;, +		}, +			return 37 * this.mm1.hashCode() + this.mm2.hashCode();, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, + * Copyright 2002-2018 the original author or authors., +		return 31 * super.hashCode() + ObjectUtils.nullSafeHashCode(this.containingClass);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, +public abstract class AnnotationConfigUtils {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +	 * Return if the supplied array type has a core component reference type., +++ b/spring-jms/src/main/java/org/springframework/jms/connection/CachingConnectionFactory.java, +			return 31 * super.hashCode() + ObjectUtils.nullSafeHashCode(this.selector);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/ResourceUrlProvider.java]