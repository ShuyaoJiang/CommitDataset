[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/DefaultResourceResolverChain.java, + * A default implementation of {@link ResourceResolverChain} for invoking a list, + * of {@link ResourceResolver}s., + * @author Sam Brannen, +	private static final Log logger = LogFactory.getLog(DefaultResourceResolverChain.class);, +	public DefaultResourceResolverChain(List<? extends ResourceResolver> resolvers) {, +		if (resolvers != null) {, +			this.resolvers.addAll(resolvers);, +		}, +	public Resource resolveResource(HttpServletRequest request, String requestPath, List<? extends Resource> locations) {, +	public String resolvePublicUrlPath(String resourcePath, List<? extends Resource> locations) {, +			String urlPath = resolver.resolvePublicUrlPath(resourcePath, locations, this);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/DefaultResourceResolverChain.java, + * A default implementation of {@link ResourceResolverChain} for invoking a list, + * of {@link ResourceResolver}s., + * @author Sam Brannen, +	private static final Log logger = LogFactory.getLog(DefaultResourceResolverChain.class);, +	public DefaultResourceResolverChain(List<? extends ResourceResolver> resolvers) {, +		if (resolvers != null) {, +			this.resolvers.addAll(resolvers);, +		}, +	public Resource resolveResource(HttpServletRequest request, String requestPath, List<? extends Resource> locations) {, +	public String resolvePublicUrlPath(String resourcePath, List<? extends Resource> locations) {, +			String urlPath = resolver.resolvePublicUrlPath(resourcePath, locations, this);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/FingerprintResourceResolver.java, + * @author Sam Brannen, +	private static final Pattern pattern = Pattern.compile("-(\\S*)\\.");, +	public Resource resolveResource(HttpServletRequest request, String requestPath, List<? extends Resource> locations,, +			ResourceResolverChain chain) {, +		Matcher matcher = pattern.matcher(path);, +			logger.error("Failed to calculate hash for resource [" + resource + "]");, +	public String resolvePublicUrlPath(String resourceUrlPath, List<? extends Resource> locations,, +			ResourceResolverChain chain) {, +		String baseUrl = chain.resolvePublicUrlPath(resourceUrlPath, locations);, +			return StringUtils.stripFilenameExtension(baseUrl) + "-" + hash + ".", +					+ StringUtils.getFilenameExtension(baseUrl);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/DefaultResourceResolverChain.java, + * A default implementation of {@link ResourceResolverChain} for invoking a list, + * of {@link ResourceResolver}s., + * @author Sam Brannen, +	private static final Log logger = LogFactory.getLog(DefaultResourceResolverChain.class);, +	public DefaultResourceResolverChain(List<? extends ResourceResolver> resolvers) {, +		if (resolvers != null) {, +			this.resolvers.addAll(resolvers);, +		}, +	public Resource resolveResource(HttpServletRequest request, String requestPath, List<? extends Resource> locations) {, +	public String resolvePublicUrlPath(String resourcePath, List<? extends Resource> locations) {, +			String urlPath = resolver.resolvePublicUrlPath(resourcePath, locations, this);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/FingerprintResourceResolver.java, + * @author Sam Brannen, +	private static final Pattern pattern = Pattern.compile("-(\\S*)\\.");, +	public Resource resolveResource(HttpServletRequest request, String requestPath, List<? extends Resource> locations,, +			ResourceResolverChain chain) {, +		Matcher matcher = pattern.matcher(path);, +			logger.error("Failed to calculate hash for resource [" + resource + "]");, +	public String resolvePublicUrlPath(String resourceUrlPath, List<? extends Resource> locations,, +			ResourceResolverChain chain) {, +		String baseUrl = chain.resolvePublicUrlPath(resourceUrlPath, locations);, +			return StringUtils.stripFilenameExtension(baseUrl) + "-" + hash + ".", +					+ StringUtils.getFilenameExtension(baseUrl);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/GzipResourceResolver.java, + * @author Sam Brannen, +	public Resource resolveResource(HttpServletRequest request, String requestPath, List<? extends Resource> locations,, +			ResourceResolverChain chain) {, +	public String resolvePublicUrlPath(String resourceUrlPath, List<? extends Resource> locations,, +			ResourceResolverChain chain) {, +		return chain.resolvePublicUrlPath(resourceUrlPath, locations);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/DefaultResourceResolverChain.java, + * A default implementation of {@link ResourceResolverChain} for invoking a list, + * of {@link ResourceResolver}s., + * @author Sam Brannen, +	private static final Log logger = LogFactory.getLog(DefaultResourceResolverChain.class);, +	public DefaultResourceResolverChain(List<? extends ResourceResolver> resolvers) {, +		if (resolvers != null) {, +			this.resolvers.addAll(resolvers);, +		}, +	public Resource resolveResource(HttpServletRequest request, String requestPath, List<? extends Resource> locations) {, +	public String resolvePublicUrlPath(String resourcePath, List<? extends Resource> locations) {, +			String urlPath = resolver.resolvePublicUrlPath(resourcePath, locations, this);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/FingerprintResourceResolver.java, + * @author Sam Brannen, +	private static final Pattern pattern = Pattern.compile("-(\\S*)\\.");, +	public Resource resolveResource(HttpServletRequest request, String requestPath, List<? extends Resource> locations,, +			ResourceResolverChain chain) {, +		Matcher matcher = pattern.matcher(path);, +			logger.error("Failed to calculate hash for resource [" + resource + "]");, +	public String resolvePublicUrlPath(String resourceUrlPath, List<? extends Resource> locations,, +			ResourceResolverChain chain) {, +		String baseUrl = chain.resolvePublicUrlPath(resourceUrlPath, locations);, +			return StringUtils.stripFilenameExtension(baseUrl) + "-" + hash + ".", +					+ StringUtils.getFilenameExtension(baseUrl);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/GzipResourceResolver.java, + * @author Sam Brannen, +	public Resource resolveResource(HttpServletRequest request, String requestPath, List<? extends Resource> locations,, +			ResourceResolverChain chain) {, +	public String resolvePublicUrlPath(String resourceUrlPath, List<? extends Resource> locations,, +			ResourceResolverChain chain) {, +		return chain.resolvePublicUrlPath(resourceUrlPath, locations);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/PathResourceResolver.java, + * @author Sam Brannen]