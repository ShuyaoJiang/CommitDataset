[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/handler/AbstractHttpSendingTransportHandler.java, +			sockJsSession.handleInitialRequest(request, response, getFrameFormat(request));, +		}, +		else if (sockJsSession.isClosed()) {, +			logger.debug("Connection already closed (but not removed yet)");, +			SockJsFrame frame = SockJsFrame.closeFrameGoAway();, +			try {, +				response.getBody().write(frame.getContentBytes());, +			}, +			catch (IOException ex) {, +				throw new SockJsException("Failed to send " + frame, sockJsSession.getId(), ex);, +			}, +			return;, +			sockJsSession.startLongPollingRequest(request, response, getFrameFormat(request));, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/handler/AbstractHttpSendingTransportHandler.java, +			sockJsSession.handleInitialRequest(request, response, getFrameFormat(request));, +		}, +		else if (sockJsSession.isClosed()) {, +			logger.debug("Connection already closed (but not removed yet)");, +			SockJsFrame frame = SockJsFrame.closeFrameGoAway();, +			try {, +				response.getBody().write(frame.getContentBytes());, +			}, +			catch (IOException ex) {, +				throw new SockJsException("Failed to send " + frame, sockJsSession.getId(), ex);, +			}, +			return;, +			sockJsSession.startLongPollingRequest(request, response, getFrameFormat(request));, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/handler/HtmlFileTransportHandler.java, +		protected void afterRequestUpdated() {, +, +			try {, +			catch (IOException e) {, +				tryCloseWithSockJsTransportError(e, CloseStatus.SERVER_ERROR);, +				throw new SockJsTransportFailureException("Failed to write HTML content", getId(), e);, +			}, +		}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/handler/AbstractHttpSendingTransportHandler.java, +			sockJsSession.handleInitialRequest(request, response, getFrameFormat(request));, +		}, +		else if (sockJsSession.isClosed()) {, +			logger.debug("Connection already closed (but not removed yet)");, +			SockJsFrame frame = SockJsFrame.closeFrameGoAway();, +			try {, +				response.getBody().write(frame.getContentBytes());, +			}, +			catch (IOException ex) {, +				throw new SockJsException("Failed to send " + frame, sockJsSession.getId(), ex);, +			}, +			return;, +			sockJsSession.startLongPollingRequest(request, response, getFrameFormat(request));, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/handler/HtmlFileTransportHandler.java, +		protected void afterRequestUpdated() {, +, +			try {, +			catch (IOException e) {, +				tryCloseWithSockJsTransportError(e, CloseStatus.SERVER_ERROR);, +				throw new SockJsTransportFailureException("Failed to write HTML content", getId(), e);, +			}, +		}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractHttpSockJsSession.java, +	public synchronized void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response,, +	public synchronized void startLongPollingRequest(ServerHttpRequest request,, +			ServerHttpResponse response, FrameFormat frameFormat) throws SockJsException {, +	private void udpateRequest(ServerHttpRequest request, ServerHttpResponse response,, +			FrameFormat frameFormat) {, +		afterRequestUpdated();, +	protected void afterRequestUpdated() {, +	}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/handler/AbstractHttpSendingTransportHandler.java, +			sockJsSession.handleInitialRequest(request, response, getFrameFormat(request));, +		}, +		else if (sockJsSession.isClosed()) {, +			logger.debug("Connection already closed (but not removed yet)");, +			SockJsFrame frame = SockJsFrame.closeFrameGoAway();, +			try {, +				response.getBody().write(frame.getContentBytes());, +			}, +			catch (IOException ex) {, +				throw new SockJsException("Failed to send " + frame, sockJsSession.getId(), ex);, +			}, +			return;, +			sockJsSession.startLongPollingRequest(request, response, getFrameFormat(request));, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/handler/HtmlFileTransportHandler.java, +		protected void afterRequestUpdated() {, +, +			try {, +			catch (IOException e) {, +				tryCloseWithSockJsTransportError(e, CloseStatus.SERVER_ERROR);, +				throw new SockJsTransportFailureException("Failed to write HTML content", getId(), e);, +			}, +		}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractHttpSockJsSession.java, +	public synchronized void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response,, +	public synchronized void startLongPollingRequest(ServerHttpRequest request,, +			ServerHttpResponse response, FrameFormat frameFormat) throws SockJsException {, +	private void udpateRequest(ServerHttpRequest request, ServerHttpResponse response,, +			FrameFormat frameFormat) {, +		afterRequestUpdated();, +	protected void afterRequestUpdated() {]