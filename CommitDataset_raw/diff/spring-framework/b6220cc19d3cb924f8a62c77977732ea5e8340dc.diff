[+++ b/spring-test/src/main/java/org/springframework/test/context/junit/jupiter/DisabledIfCondition.java, +		// @formatter:off, +		String expression = disabledIf.map(DisabledIf::expression).map(String::trim).filter(StringUtils::hasLength), +				.orElseThrow(() -> new IllegalStateException(String.format(, +						"The expression in @DisabledIf on [%s] must not be blank", element)));, +		// @formatter:on, +++ b/spring-test/src/main/java/org/springframework/test/context/junit/jupiter/DisabledIfCondition.java, +		// @formatter:off, +		String expression = disabledIf.map(DisabledIf::expression).map(String::trim).filter(StringUtils::hasLength), +				.orElseThrow(() -> new IllegalStateException(String.format(, +						"The expression in @DisabledIf on [%s] must not be blank", element)));, +		// @formatter:on, +++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/DisabledIfTestCase.java, +		@DisabledIf("   true   "), +		void disabledByStringTrueWithSurroundingWhitespace() {, +			fail("This test must be disabled");, +		}, +, +		@Test, +		@DisabledIf("\t${foo}   "), +		void disabledByPropertyPlaceholderWithSurroundingWhitespace() {, +			fail("This test must be disabled");, +		}, +, +		@Test, +		@DisabledIf("   #{T(java.lang.Boolean).TRUE}   "), +		void disabledBySpelBooleanWithSurroundingWhitespace() {, +			fail("This test must be disabled");, +		}, +, +		@Test]