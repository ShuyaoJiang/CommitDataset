[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultEntityResponseBuilder.java, +import java.lang.reflect.Type;, +import org.springframework.core.ParameterizedTypeReference;, +import org.springframework.http.converter.GenericHttpMessageConverter;, +	private final Type entityType;, +	private DefaultEntityResponseBuilder(T entity, @Nullable Type entityType) {, +		this.entityType = (entityType != null) ? entityType : entity.getClass();, +	@SuppressWarnings({"rawtypes", "unchecked"}), +		if (this.entity instanceof CompletionStage) {, +			CompletionStage completionStage = (CompletionStage) this.entity;, +			return new CompletionStageEntityResponse(this.status, this.headers, this.cookies,, +					completionStage, this.entityType);, +		}, +		else if (this.entity instanceof Publisher) {, +			Publisher publisher = (Publisher) this.entity;, +			return new PublisherEntityResponse(this.status, this.headers, this.cookies, publisher,, +					this.entityType);, +		}, +		else {, +			return new DefaultEntityResponse<>(this.status, this.headers, this.cookies, this.entity,, +					this.entityType);, +		}, +		return new DefaultEntityResponseBuilder<>(t, null);, +	 * Return a new {@link EntityResponse.Builder} from the given object and type reference., +	public static <T> EntityResponse.Builder<T> fromObject(T t, ParameterizedTypeReference<?> bodyType) {, +		return new DefaultEntityResponseBuilder<>(t, bodyType.getType());, +		private final Type entityType;, +, +				MultiValueMap<String, Cookie> cookies, T entity, Type entityType) {, +			this.entityType = entityType;, +		@SuppressWarnings("unchecked"), +			Class<?> entityClass = entity.getClass();, +			for (HttpMessageConverter<?> messageConverter : context.messageConverters()) {, +				if (messageConverter instanceof GenericHttpMessageConverter<?>) {, +					GenericHttpMessageConverter<Object> genericMessageConverter =, +							(GenericHttpMessageConverter<Object>) messageConverter;, +					if (genericMessageConverter.canWrite(this.entityType, entityClass, contentType)) {, +						genericMessageConverter.write(entity, this.entityType, contentType, serverResponse);, +						return;, +					}, +				}, +				if (messageConverter.canWrite(entityClass, contentType)) {, +					((HttpMessageConverter<Object>)messageConverter).write(entity, contentType, serverResponse);, +					return;, +				}, +			}, +			List<MediaType> producibleMediaTypes = producibleMediaTypes(context.messageConverters(), entityClass);, +			throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes);, +		private static MediaType getContentType(HttpServletResponse response) {, +				return MediaType.parseMediaType(response.getContentType()).removeQualityValue();, +		protected void tryWriteEntityWithMessageConverters(Object entity,, +		public CompletionStageEntityResponse(int statusCode, HttpHeaders headers,, +				MultiValueMap<String, Cookie> cookies, CompletionStage<T> entity,, +				Type entityType) {, +			super(statusCode, headers, cookies, entity, entityType);, +, +				MultiValueMap<String, Cookie> cookies, Publisher<T> entity,, +				Type entityType) {, +			super(statusCode, headers, cookies, entity, entityType);, +, +				this.asyncContext.complete();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultEntityResponseBuilder.java, +import java.lang.reflect.Type;, +import org.springframework.core.ParameterizedTypeReference;, +import org.springframework.http.converter.GenericHttpMessageConverter;, +	private final Type entityType;, +	private DefaultEntityResponseBuilder(T entity, @Nullable Type entityType) {, +		this.entityType = (entityType != null) ? entityType : entity.getClass();, +	@SuppressWarnings({"rawtypes", "unchecked"}), +		if (this.entity instanceof CompletionStage) {, +			CompletionStage completionStage = (CompletionStage) this.entity;, +			return new CompletionStageEntityResponse(this.status, this.headers, this.cookies,, +					completionStage, this.entityType);, +		}, +		else if (this.entity instanceof Publisher) {, +			Publisher publisher = (Publisher) this.entity;, +			return new PublisherEntityResponse(this.status, this.headers, this.cookies, publisher,, +					this.entityType);, +		}, +		else {, +			return new DefaultEntityResponse<>(this.status, this.headers, this.cookies, this.entity,, +					this.entityType);, +		}, +		return new DefaultEntityResponseBuilder<>(t, null);, +	 * Return a new {@link EntityResponse.Builder} from the given object and type reference., +	public static <T> EntityResponse.Builder<T> fromObject(T t, ParameterizedTypeReference<?> bodyType) {, +		return new DefaultEntityResponseBuilder<>(t, bodyType.getType());, +		private final Type entityType;, +, +				MultiValueMap<String, Cookie> cookies, T entity, Type entityType) {, +			this.entityType = entityType;, +		@SuppressWarnings("unchecked"), +			Class<?> entityClass = entity.getClass();, +			for (HttpMessageConverter<?> messageConverter : context.messageConverters()) {, +				if (messageConverter instanceof GenericHttpMessageConverter<?>) {, +					GenericHttpMessageConverter<Object> genericMessageConverter =, +							(GenericHttpMessageConverter<Object>) messageConverter;, +					if (genericMessageConverter.canWrite(this.entityType, entityClass, contentType)) {, +						genericMessageConverter.write(entity, this.entityType, contentType, serverResponse);, +						return;]