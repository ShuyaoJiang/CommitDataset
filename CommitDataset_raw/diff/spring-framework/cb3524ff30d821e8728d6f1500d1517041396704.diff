[+++ b/build-spring-framework/resources/changelog.txt, +* renamed attribute @CacheEvict#afterInvocation to beforeInvocation (for better readability), +++ b/build-spring-framework/resources/changelog.txt, +* renamed attribute @CacheEvict#afterInvocation to beforeInvocation (for better readability), +++ b/org.springframework.aspects/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, +	@CacheEvict(value = "default", beforeInvocation = false), +	@CacheEvict(value = "default", key = "#p0", beforeInvocation = false), +++ b/build-spring-framework/resources/changelog.txt, +* renamed attribute @CacheEvict#afterInvocation to beforeInvocation (for better readability), +++ b/org.springframework.aspects/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, +	@CacheEvict(value = "default", beforeInvocation = false), +	@CacheEvict(value = "default", key = "#p0", beforeInvocation = false), +++ b/org.springframework.aspects/src/test/java/org/springframework/cache/config/DefaultCacheableService.java, +	@CacheEvict(value = "default", beforeInvocation = false), +	@CacheEvict(value = "default", key = "#p0", beforeInvocation = false), +++ b/build-spring-framework/resources/changelog.txt, +* renamed attribute @CacheEvict#afterInvocation to beforeInvocation (for better readability), +++ b/org.springframework.aspects/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, +	@CacheEvict(value = "default", beforeInvocation = false), +	@CacheEvict(value = "default", key = "#p0", beforeInvocation = false), +++ b/org.springframework.aspects/src/test/java/org/springframework/cache/config/DefaultCacheableService.java, +	@CacheEvict(value = "default", beforeInvocation = false), +	@CacheEvict(value = "default", key = "#p0", beforeInvocation = false), +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/CacheEvict.java, +	boolean beforeInvocation() default false;, +++ b/build-spring-framework/resources/changelog.txt, +* renamed attribute @CacheEvict#afterInvocation to beforeInvocation (for better readability), +++ b/org.springframework.aspects/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, +	@CacheEvict(value = "default", beforeInvocation = false), +	@CacheEvict(value = "default", key = "#p0", beforeInvocation = false), +++ b/org.springframework.aspects/src/test/java/org/springframework/cache/config/DefaultCacheableService.java, +	@CacheEvict(value = "default", beforeInvocation = false), +	@CacheEvict(value = "default", key = "#p0", beforeInvocation = false), +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/CacheEvict.java, +	boolean beforeInvocation() default false;, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java, +		ceo.setBeforeInvocation(caching.beforeInvocation());, +		return (anns.isEmpty() ? null : anns);, +++ b/build-spring-framework/resources/changelog.txt, +* renamed attribute @CacheEvict#afterInvocation to beforeInvocation (for better readability), +++ b/org.springframework.aspects/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, +	@CacheEvict(value = "default", beforeInvocation = false), +	@CacheEvict(value = "default", key = "#p0", beforeInvocation = false), +++ b/org.springframework.aspects/src/test/java/org/springframework/cache/config/DefaultCacheableService.java, +	@CacheEvict(value = "default", beforeInvocation = false), +	@CacheEvict(value = "default", key = "#p0", beforeInvocation = false), +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/CacheEvict.java, +	boolean beforeInvocation() default false;, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java, +		ceo.setBeforeInvocation(caching.beforeInvocation());, +		return (anns.isEmpty() ? null : anns);, +++ b/org.springframework.context/src/main/java/org/springframework/cache/config/CacheAdviceParser.java, +			String after = opElement.getAttribute("before-invocation");, +				op.setBeforeInvocation(Boolean.valueOf(after.trim()));, +++ b/build-spring-framework/resources/changelog.txt, +* renamed attribute @CacheEvict#afterInvocation to beforeInvocation (for better readability), +++ b/org.springframework.aspects/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, +	@CacheEvict(value = "default", beforeInvocation = false), +	@CacheEvict(value = "default", key = "#p0", beforeInvocation = false), +++ b/org.springframework.aspects/src/test/java/org/springframework/cache/config/DefaultCacheableService.java, +	@CacheEvict(value = "default", beforeInvocation = false), +	@CacheEvict(value = "default", key = "#p0", beforeInvocation = false), +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/CacheEvict.java, +	boolean beforeInvocation() default false;, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java, +		ceo.setBeforeInvocation(caching.beforeInvocation());, +		return (anns.isEmpty() ? null : anns);, +++ b/org.springframework.context/src/main/java/org/springframework/cache/config/CacheAdviceParser.java, +			String after = opElement.getAttribute("before-invocation");, +				op.setBeforeInvocation(Boolean.valueOf(after.trim()));, +++ b/org.springframework.context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +	private void inspectAfterCacheEvicts(Collection<CacheOperationContext> evictions) {, +		inspectCacheEvicts(evictions, false);, +	}, +, +	private void inspectCacheEvicts(Collection<CacheOperationContext> evictions, boolean beforeInvocation) {, +				if (beforeInvocation == evictOp.isBeforeInvocation()) {, +++ b/build-spring-framework/resources/changelog.txt, +* renamed attribute @CacheEvict#afterInvocation to beforeInvocation (for better readability), +++ b/org.springframework.aspects/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, +	@CacheEvict(value = "default", beforeInvocation = false), +	@CacheEvict(value = "default", key = "#p0", beforeInvocation = false), +++ b/org.springframework.aspects/src/test/java/org/springframework/cache/config/DefaultCacheableService.java, +	@CacheEvict(value = "default", beforeInvocation = false), +	@CacheEvict(value = "default", key = "#p0", beforeInvocation = false), +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/CacheEvict.java, +	boolean beforeInvocation() default false;, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java, +		ceo.setBeforeInvocation(caching.beforeInvocation());, +		return (anns.isEmpty() ? null : anns);, +++ b/org.springframework.context/src/main/java/org/springframework/cache/config/CacheAdviceParser.java, +			String after = opElement.getAttribute("before-invocation");, +				op.setBeforeInvocation(Boolean.valueOf(after.trim()));, +++ b/org.springframework.context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +	private void inspectAfterCacheEvicts(Collection<CacheOperationContext> evictions) {, +		inspectCacheEvicts(evictions, false);, +	}, +, +	private void inspectCacheEvicts(Collection<CacheOperationContext> evictions, boolean beforeInvocation) {, +				if (beforeInvocation == evictOp.isBeforeInvocation()) {]