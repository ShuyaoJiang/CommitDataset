[+++ b/org.springframework.core/src/main/java/org/springframework/util/PropertyPlaceholderUtils.java, +import java.util.Set;, +import java.util.HashSet;, +		return parseStringValue(value, placeholderResolver, new HashSet<String>());, +	protected static String parseStringValue(String strVal, PlaceholderResolver placeholderResolver, Set<String> visitedPlaceholders) {, +		StringBuilder buf = new StringBuilder(strVal);, +, +		int startIndex = strVal.indexOf(PLACEHOLDER_PREFIX);, +		while (startIndex != -1) {, +			int endIndex = findPlaceholderEndIndex(buf, startIndex);, +			if (endIndex != -1) {, +				String placeholder = buf.substring(startIndex + PLACEHOLDER_PREFIX.length(), endIndex);, +				if (!visitedPlaceholders.add(placeholder)) {, +					throw new IllegalArgumentException(, +							"Circular placeholder reference '" + placeholder + "' in property definitions");, +				}, +				// Recursive invocation, parsing placeholders contained in the placeholder key., +				placeholder = parseStringValue(placeholder, placeholderResolver, visitedPlaceholders);, +, +				// Now obtain the value for the fully resolved key..., +				String propVal = placeholderResolver.resolvePlaceholder(placeholder);, +				if (propVal != null) {, +					// Recursive invocation, parsing placeholders contained in the, +					// previously resolved placeholder value., +					propVal = parseStringValue(propVal, placeholderResolver, visitedPlaceholders);, +					buf.replace(startIndex, endIndex + PLACEHOLDER_SUFFIX.length(), propVal);, +, +					//if (logger.isTraceEnabled()) {, +					//	logger.trace("Resolved placeholder '" + placeholder + "'");, +					//}, +, +					startIndex = buf.indexOf(PLACEHOLDER_PREFIX, startIndex + propVal.length());, +				}, +				else  {, +					// Proceed with unprocessed value., +					startIndex = buf.indexOf(PLACEHOLDER_PREFIX, endIndex + PLACEHOLDER_SUFFIX.length());, +				}, +, +				visitedPlaceholders.remove(placeholder);, +		return buf.toString();, +	}, +, +	private static int findPlaceholderEndIndex(CharSequence buf, int startIndex) {, +		int index = startIndex + PLACEHOLDER_PREFIX.length();, +		int withinNestedPlaceholder = 0;, +		while (index < buf.length()) {, +			if (StringUtils.substringMatch(buf, index, PLACEHOLDER_SUFFIX)) {, +				if (withinNestedPlaceholder > 0) {, +					withinNestedPlaceholder--;, +					index = index + PLACEHOLDER_PREFIX.length() - 1;, +				}, +				else {, +					return index;, +				}, +			}, +			else if (StringUtils.substringMatch(buf, index, PLACEHOLDER_PREFIX)) {, +				withinNestedPlaceholder++;, +				index = index + PLACEHOLDER_PREFIX.length();, +			}, +			else {, +				index++;, +			}, +		}, +		return -1;, +++ b/org.springframework.core/src/main/java/org/springframework/util/PropertyPlaceholderUtils.java, +import java.util.Set;, +import java.util.HashSet;, +		return parseStringValue(value, placeholderResolver, new HashSet<String>());, +	protected static String parseStringValue(String strVal, PlaceholderResolver placeholderResolver, Set<String> visitedPlaceholders) {, +		StringBuilder buf = new StringBuilder(strVal);, +, +		int startIndex = strVal.indexOf(PLACEHOLDER_PREFIX);, +		while (startIndex != -1) {, +			int endIndex = findPlaceholderEndIndex(buf, startIndex);, +			if (endIndex != -1) {, +				String placeholder = buf.substring(startIndex + PLACEHOLDER_PREFIX.length(), endIndex);, +				if (!visitedPlaceholders.add(placeholder)) {, +					throw new IllegalArgumentException(, +							"Circular placeholder reference '" + placeholder + "' in property definitions");, +				}, +				// Recursive invocation, parsing placeholders contained in the placeholder key., +				placeholder = parseStringValue(placeholder, placeholderResolver, visitedPlaceholders);, +, +				// Now obtain the value for the fully resolved key..., +				String propVal = placeholderResolver.resolvePlaceholder(placeholder);, +				if (propVal != null) {, +					// Recursive invocation, parsing placeholders contained in the, +					// previously resolved placeholder value., +					propVal = parseStringValue(propVal, placeholderResolver, visitedPlaceholders);, +					buf.replace(startIndex, endIndex + PLACEHOLDER_SUFFIX.length(), propVal);, +, +					//if (logger.isTraceEnabled()) {, +					//	logger.trace("Resolved placeholder '" + placeholder + "'");, +					//}, +, +					startIndex = buf.indexOf(PLACEHOLDER_PREFIX, startIndex + propVal.length());, +				}, +				else  {, +					// Proceed with unprocessed value., +					startIndex = buf.indexOf(PLACEHOLDER_PREFIX, endIndex + PLACEHOLDER_SUFFIX.length());]