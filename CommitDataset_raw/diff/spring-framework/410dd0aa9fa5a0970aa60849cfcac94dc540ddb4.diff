[+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.context.ConfigurableApplicationContext;, +						if (applicationContext instanceof ConfigurableApplicationContext) {, +							cron = ((ConfigurableApplicationContext) applicationContext), +									.getBeanFactory().resolveEmbeddedValue(cron);, +						}, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.context.ConfigurableApplicationContext;, +						if (applicationContext instanceof ConfigurableApplicationContext) {, +							cron = ((ConfigurableApplicationContext) applicationContext), +									.getBeanFactory().resolveEmbeddedValue(cron);, +						}, +++ b/org.springframework.context/src/test/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessorTests.java, +import java.util.Properties;, +import org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;, +	@Test, +	public void propertyPlaceholderWithCronExpression() {, +		String businessHoursCronExpression = "0 0 9-17 * * MON-FRI";, +		StaticApplicationContext context = new StaticApplicationContext();, +		BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class);, +		BeanDefinition placeholderDefinition = new RootBeanDefinition(PropertyPlaceholderConfigurer.class);, +		Properties properties = new Properties();, +		properties.setProperty("schedules.businessHours", businessHoursCronExpression);, +		placeholderDefinition.getPropertyValues().addPropertyValue("properties", properties);, +		BeanDefinition targetDefinition = new RootBeanDefinition(, +				ScheduledAnnotationBeanPostProcessorTests.PropertyPlaceholderTestBean.class);, +		context.registerBeanDefinition("placeholder", placeholderDefinition);, +		context.registerBeanDefinition("postProcessor", processorDefinition);, +		context.registerBeanDefinition("target", targetDefinition);, +		context.refresh();, +		Object postProcessor = context.getBean("postProcessor");, +		Object target = context.getBean("target");, +		ScheduledTaskRegistrar registrar = (ScheduledTaskRegistrar), +				new DirectFieldAccessor(postProcessor).getPropertyValue("registrar");, +		Map<Runnable, String> cronTasks = (Map<Runnable, String>), +				new DirectFieldAccessor(registrar).getPropertyValue("cronTasks");, +		assertEquals(1, cronTasks.size());, +		MethodInvokingRunnable runnable = (MethodInvokingRunnable) cronTasks.keySet().iterator().next();, +		Object targetObject = runnable.getTargetObject();, +		String targetMethod = runnable.getTargetMethod();, +		assertEquals(target, targetObject);, +		assertEquals("x", targetMethod);, +		assertEquals(businessHoursCronExpression, cronTasks.values().iterator().next());, +	}, +, +	@Test, +	public void propertyPlaceholderForMetaAnnotation() {, +		String businessHoursCronExpression = "0 0 9-17 * * MON-FRI";, +		StaticApplicationContext context = new StaticApplicationContext();, +		BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class);, +		BeanDefinition placeholderDefinition = new RootBeanDefinition(PropertyPlaceholderConfigurer.class);, +		Properties properties = new Properties();, +		properties.setProperty("schedules.businessHours", businessHoursCronExpression);, +		placeholderDefinition.getPropertyValues().addPropertyValue("properties", properties);, +		BeanDefinition targetDefinition = new RootBeanDefinition(, +				ScheduledAnnotationBeanPostProcessorTests.PropertyPlaceholderMetaAnnotationTestBean.class);, +		context.registerBeanDefinition("postProcessor", processorDefinition);, +		context.registerBeanDefinition("placeholder", placeholderDefinition);, +		context.registerBeanDefinition("target", targetDefinition);, +		context.refresh();, +		Object postProcessor = context.getBean("postProcessor");, +		Object target = context.getBean("target");, +		ScheduledTaskRegistrar registrar = (ScheduledTaskRegistrar), +				new DirectFieldAccessor(postProcessor).getPropertyValue("registrar");, +		Map<Runnable, String> cronTasks = (Map<Runnable, String>), +				new DirectFieldAccessor(registrar).getPropertyValue("cronTasks");, +		assertEquals(1, cronTasks.size());, +		MethodInvokingRunnable runnable = (MethodInvokingRunnable) cronTasks.keySet().iterator().next();, +		Object targetObject = runnable.getTargetObject();, +		String targetMethod = runnable.getTargetMethod();, +		assertEquals(target, targetObject);, +		assertEquals("y", targetMethod);, +		assertEquals(businessHoursCronExpression, cronTasks.values().iterator().next());, +	}, +, +, +	private static class PropertyPlaceholderTestBean {, +, +		@Scheduled(cron = "${schedules.businessHours}"), +		public void x() {, +		}, +	}, +, +, +	@Scheduled(cron = "${schedules.businessHours}"), +	@Target(ElementType.METHOD), +	@Retention(RetentionPolicy.RUNTIME)	, +	private static @interface BusinessHours {}, +, +, +	private static class PropertyPlaceholderMetaAnnotationTestBean {, +, +		@BusinessHours, +		public void y() {, +		}, +	}, +]