[+++ b/spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java, + * Copyright 2002-2016 the original author or authors., +	@Override, +	public boolean isFile() {, +		try {, +			URL url = getURL();, +			if (url.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {, +				return VfsResourceDelegate.getResource(url).isFile();, +			}, +			return ResourceUtils.URL_PROTOCOL_FILE.equals(url.getProtocol());, +		}, +		catch (IOException ex) {, +			return false;, +		}, +	}, +, +	 * This implementation returns a File reference for the given URI-identified, +	 * resource, provided that it refers to a file in the file system., +	 * @since 5.0, +	 * @see #getFile(URI), +	 */, +	protected boolean isFile(URI uri) {, +		try {, +			if (uri.getScheme().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {, +				return VfsResourceDelegate.getResource(uri).isFile();, +			}, +			return ResourceUtils.URL_PROTOCOL_FILE.equals(uri.getScheme());, +		}, +		catch (IOException ex) {, +			return false;, +		}, +	}, +, +	/**, +	 * This implementation returns a File reference for the given URI-identified, +++ b/spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java, + * Copyright 2002-2016 the original author or authors., +	@Override, +	public boolean isFile() {, +		try {, +			URL url = getURL();, +			if (url.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {, +				return VfsResourceDelegate.getResource(url).isFile();, +			}, +			return ResourceUtils.URL_PROTOCOL_FILE.equals(url.getProtocol());, +		}, +		catch (IOException ex) {, +			return false;, +		}, +	}, +, +	 * This implementation returns a File reference for the given URI-identified, +	 * resource, provided that it refers to a file in the file system., +	 * @since 5.0, +	 * @see #getFile(URI), +	 */, +	protected boolean isFile(URI uri) {, +		try {, +			if (uri.getScheme().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {, +				return VfsResourceDelegate.getResource(uri).isFile();, +			}, +			return ResourceUtils.URL_PROTOCOL_FILE.equals(uri.getScheme());, +		}, +		catch (IOException ex) {, +			return false;, +		}, +	}, +, +	/**, +	 * This implementation returns a File reference for the given URI-identified, +++ b/spring-core/src/main/java/org/springframework/core/io/AbstractResource.java, +	 * This implementation always returns {@code false}., +	 */, +	@Override, +	public boolean isFile() {, +		return false;, +	}, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java, + * Copyright 2002-2016 the original author or authors., +	@Override, +	public boolean isFile() {, +		try {, +			URL url = getURL();, +			if (url.getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {, +				return VfsResourceDelegate.getResource(url).isFile();, +			}, +			return ResourceUtils.URL_PROTOCOL_FILE.equals(url.getProtocol());, +		}, +		catch (IOException ex) {, +			return false;, +		}, +	}, +, +	 * This implementation returns a File reference for the given URI-identified, +	 * resource, provided that it refers to a file in the file system., +	 * @since 5.0, +	 * @see #getFile(URI), +	 */]