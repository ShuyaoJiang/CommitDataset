[+++ b/spring-web/src/test/java/org/springframework/web/method/ResolvableMethod.java, +import org.springframework.core.annotation.SynthesizingMethodParameter;, + * on(TestController.class).notAnnotated(ResponseBody.class).resolveReturnType();, +		return new SynthesizingMethodParameter(this.method, -1);, +		public final Builder notAnnotated(Class<? extends Annotation>... annotationTypes) {, +			String message = "notAnnotated=" + Arrays.toString(annotationTypes);, +			addFilter(message, method -> {, +				if (annotationTypes.length != 0) {, +					return Arrays.stream(annotationTypes).noneMatch(annotType ->, +							AnnotatedElementUtils.findMergedAnnotation(method, annotType) != null);, +				}, +				else {, +					return method.getAnnotations().length == 0;, +				}, +			});, +			this.filters.add(param ->, +					(annotationTypes.length != 0) ?, +							Arrays.stream(annotationTypes).noneMatch(param::hasParameterAnnotation) :, +							param.getParameterAnnotations().length == 0);, +				MethodParameter param = new SynthesizingMethodParameter(method, i);, +++ b/spring-web/src/test/java/org/springframework/web/method/ResolvableMethod.java, +import org.springframework.core.annotation.SynthesizingMethodParameter;, + * on(TestController.class).notAnnotated(ResponseBody.class).resolveReturnType();, +		return new SynthesizingMethodParameter(this.method, -1);, +		public final Builder notAnnotated(Class<? extends Annotation>... annotationTypes) {, +			String message = "notAnnotated=" + Arrays.toString(annotationTypes);, +			addFilter(message, method -> {, +				if (annotationTypes.length != 0) {, +					return Arrays.stream(annotationTypes).noneMatch(annotType ->, +							AnnotatedElementUtils.findMergedAnnotation(method, annotType) != null);, +				}, +				else {, +					return method.getAnnotations().length == 0;, +				}, +			});, +			this.filters.add(param ->, +					(annotationTypes.length != 0) ?, +							Arrays.stream(annotationTypes).noneMatch(param::hasParameterAnnotation) :, +							param.getParameterAnnotations().length == 0);, +				MethodParameter param = new SynthesizingMethodParameter(method, i);, +++ b/spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMapMethodArgumentResolverTests.java, +import java.util.function.Predicate;, +import org.springframework.web.method.ResolvableMethod;, +	private ResolvableMethod testMethod = ResolvableMethod.on(getClass()).named("handle").build();, +, +		MethodParameter param = this.testMethod.annotated(RequestParam.class, name("")).arg(Map.class);, +		assertTrue(resolver.supportsParameter(param));, +, +		param = this.testMethod.annotated(RequestParam.class).arg(MultiValueMap.class);, +		assertTrue(resolver.supportsParameter(param));, +, +		param = this.testMethod.annotated(RequestParam.class, name("name")).arg(Map.class);, +		assertFalse(resolver.supportsParameter(param));, +, +		param = this.testMethod.notAnnotated(RequestParam.class).arg(Map.class);, +		assertFalse(resolver.supportsParameter(param));, +		MethodParameter param = this.testMethod.annotated(RequestParam.class, name("")).arg(Map.class);, +		Object result = resolver.resolveArgument(param, null, webRequest, null);, +		request.addParameter(name, value1, value2);, +		MethodParameter param = this.testMethod.annotated(RequestParam.class).arg(MultiValueMap.class);, +		Object result = resolver.resolveArgument(param, null, webRequest, null);, +	private Predicate<RequestParam> name(String name) {, +		return a -> name.equals(a.name());, +	}, +, +	public void handle(, +			@RequestParam Map<?, ?> param1,, +++ b/spring-web/src/test/java/org/springframework/web/method/ResolvableMethod.java, +import org.springframework.core.annotation.SynthesizingMethodParameter;, + * on(TestController.class).notAnnotated(ResponseBody.class).resolveReturnType();, +		return new SynthesizingMethodParameter(this.method, -1);, +		public final Builder notAnnotated(Class<? extends Annotation>... annotationTypes) {, +			String message = "notAnnotated=" + Arrays.toString(annotationTypes);, +			addFilter(message, method -> {, +				if (annotationTypes.length != 0) {, +					return Arrays.stream(annotationTypes).noneMatch(annotType ->, +							AnnotatedElementUtils.findMergedAnnotation(method, annotType) != null);, +				}, +				else {, +					return method.getAnnotations().length == 0;, +				}, +			});, +			this.filters.add(param ->, +					(annotationTypes.length != 0) ?, +							Arrays.stream(annotationTypes).noneMatch(param::hasParameterAnnotation) :, +							param.getParameterAnnotations().length == 0);, +				MethodParameter param = new SynthesizingMethodParameter(method, i);, +++ b/spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMapMethodArgumentResolverTests.java, +import java.util.function.Predicate;, +import org.springframework.web.method.ResolvableMethod;, +	private ResolvableMethod testMethod = ResolvableMethod.on(getClass()).named("handle").build();, +, +		MethodParameter param = this.testMethod.annotated(RequestParam.class, name("")).arg(Map.class);, +		assertTrue(resolver.supportsParameter(param));, +, +		param = this.testMethod.annotated(RequestParam.class).arg(MultiValueMap.class);, +		assertTrue(resolver.supportsParameter(param));, +, +		param = this.testMethod.annotated(RequestParam.class, name("name")).arg(Map.class);, +		assertFalse(resolver.supportsParameter(param));]