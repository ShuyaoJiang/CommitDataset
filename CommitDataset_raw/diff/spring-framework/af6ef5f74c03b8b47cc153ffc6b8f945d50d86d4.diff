[+++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +			td = cachedIntrospectionResults.addTypeDescriptor(pd, new TypeDescriptor(property(pd)));, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +			td = cachedIntrospectionResults.addTypeDescriptor(pd, new TypeDescriptor(property(pd)));, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +import java.util.concurrent.ConcurrentMap;, +	static final ConcurrentMap<Class<?>, CachedIntrospectionResults> strongClassCache =, +	static final ConcurrentMap<Class<?>, CachedIntrospectionResults> softClassCache =, +		ConcurrentMap<Class<?>, CachedIntrospectionResults> classCacheToUse;, +, +			classCacheToUse = strongClassCache;, +			classCacheToUse = softClassCache;, +, +		CachedIntrospectionResults existing = classCacheToUse.putIfAbsent(beanClass, results);, +		return (existing != null ? existing : results);, +	private final ConcurrentMap<PropertyDescriptor, TypeDescriptor> typeDescriptorCache;, +				this.propertyDescriptorCache.put(pd.getName(), pd);, +	TypeDescriptor addTypeDescriptor(PropertyDescriptor pd, TypeDescriptor td) {, +		TypeDescriptor existing = this.typeDescriptorCache.putIfAbsent(pd, td);, +		return (existing != null ? existing : td);]