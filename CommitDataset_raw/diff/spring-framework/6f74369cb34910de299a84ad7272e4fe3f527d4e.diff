[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/BindingPoint.java, +/*, + * Copyright 2004-2009 the original author or authors., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + *      http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.core.convert;, +, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Field;, +import java.lang.reflect.Modifier;, +import java.util.Collection;, +import java.util.Map;, +, +import org.springframework.core.GenericCollectionTypeResolver;, +import org.springframework.core.MethodParameter;, +import org.springframework.util.Assert;, +, +// TODO doesn't support more than depth of one (eg. Map<String,List<Foo>> or List<String>[]), +/**, + * Type metadata about a bindable target value., + * , + * @author Keith Donald, + * @author Andy Clement, + */, +public class BindingPoint<T> {, +, +	/**, +	 * Constant value typeDescriptor for the type of a null value, +	 */, +	public final static BindingPoint NULL_TYPE_DESCRIPTOR = new BindingPoint((Class<?>) null);, +, +	private MethodParameter methodParameter;, +, +	private Field field;, +, +	private Annotation[] cachedFieldAnnotations;, +, +	private Class<?> type;, +, +	/**, +	 * Creates a new descriptor for the given type. Use this constructor when a bound value comes from a source such as, +	 * a Map or collection, where no additional binding metadata is available., +	 * @param type the actual type, +	 */, +	public BindingPoint(Class<?> type) {, +		this.type = type;, +	}, +, +	/**, +	 * Create a new descriptor for a method or constructor parameter. Use this constructor when a bound value originates, +	 * from a method parameter, such as a setter method argument., +	 * @param methodParameter the MethodParameter to wrap, +	 */, +	public BindingPoint(MethodParameter methodParameter) {, +		Assert.notNull(methodParameter, "MethodParameter must not be null");, +		this.methodParameter = methodParameter;, +	}, +, +	/**, +	 * Create a new descriptor for a field. Use this constructor when a bound value originates from a field., +	 * @param field the field to wrap, +	 */, +	public BindingPoint(Field field) {, +		Assert.notNull(field, "Field must not be null");, +		this.field = field;, +	}, +, +	/**, +	 * Determine the declared (non-generic) type of the wrapped parameter/field., +	 * , +	 * @return the declared type (never <code>null</code>), +	 */, +	public Class<?> getType() {, +		if (type != null) {, +			return wrapperType(type);, +		} else if (field != null) {, +			return wrapperType(field.getType());, +		} else if (methodParameter != null) {, +			return wrapperType(methodParameter.getParameterType());, +		} else {, +			return null;, +		}, +	}, +, +	/**, +	 * Returns the name of this type; the fully qualified classname., +	 */, +	public String getName() {, +		Class<?> type = getType();]