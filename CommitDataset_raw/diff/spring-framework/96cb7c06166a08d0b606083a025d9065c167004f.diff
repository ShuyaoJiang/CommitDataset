[+++ b/spring-websocket/src/main/java/org/springframework/web/messaging/support/CachingSessionSubscriptionRegistry.java, +			destinationCache.mapRegistration(destination, this);, +				destinationCache.unmapRegistration(destination, this);, +		public boolean equals(Object other) {, +			if (this == other) {, +				return true;, +			}, +			if (!(other instanceof CachingSessionSubscriptionRegistration)) {, +				return false;, +			}, +			CachingSessionSubscriptionRegistration otherType = (CachingSessionSubscriptionRegistration) other;, +			return this.delegate.equals(otherType.delegate);, +		}, +, +		@Override, +		public int hashCode() {, +			return this.delegate.hashCode();, +		}, +, +		@Override, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/support/CachingSessionSubscriptionRegistry.java, +			destinationCache.mapRegistration(destination, this);, +				destinationCache.unmapRegistration(destination, this);, +		public boolean equals(Object other) {, +			if (this == other) {, +				return true;, +			}, +			if (!(other instanceof CachingSessionSubscriptionRegistration)) {, +				return false;, +			}, +			CachingSessionSubscriptionRegistration otherType = (CachingSessionSubscriptionRegistration) other;, +			return this.delegate.equals(otherType.delegate);, +		}, +, +		@Override, +		public int hashCode() {, +			return this.delegate.hashCode();, +		}, +, +		@Override, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/support/DefaultSessionSubscriptionRegistration.java, +	@Override, +	public boolean equals(Object other) {, +		if (this == other) {, +			return true;, +		}, +		if (!(other instanceof DefaultSessionSubscriptionRegistration)) {, +			return false;, +		}, +		DefaultSessionSubscriptionRegistration otherType = (DefaultSessionSubscriptionRegistration) other;, +		return this.sessionId.equals(otherType.sessionId);, +	}, +, +	@Override, +	public int hashCode() {, +		return 31 + this.sessionId.hashCode();, +	}, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/support/CachingSessionSubscriptionRegistry.java, +			destinationCache.mapRegistration(destination, this);, +				destinationCache.unmapRegistration(destination, this);, +		public boolean equals(Object other) {, +			if (this == other) {, +				return true;, +			}, +			if (!(other instanceof CachingSessionSubscriptionRegistration)) {, +				return false;, +			}, +			CachingSessionSubscriptionRegistration otherType = (CachingSessionSubscriptionRegistration) other;, +			return this.delegate.equals(otherType.delegate);, +		}, +, +		@Override, +		public int hashCode() {, +			return this.delegate.hashCode();, +		}, +, +		@Override, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/support/DefaultSessionSubscriptionRegistration.java, +	@Override, +	public boolean equals(Object other) {, +		if (this == other) {, +			return true;, +		}, +		if (!(other instanceof DefaultSessionSubscriptionRegistration)) {, +			return false;, +		}, +		DefaultSessionSubscriptionRegistration otherType = (DefaultSessionSubscriptionRegistration) other;, +		return this.sessionId.equals(otherType.sessionId);, +	}, +, +	@Override, +	public int hashCode() {, +		return 31 + this.sessionId.hashCode();, +	}, +++ b/spring-websocket/src/test/java/org/springframework/web/messaging/service/SimpleBrokerWebMessageHandlerTests.java, +		assertCapturedMessage("sess1", "sub1", "/foo");, +		assertCapturedMessage("sess1", "sub2", "/foo");, +		assertCapturedMessage("sess2", "sub1", "/foo");, +		assertCapturedMessage("sess2", "sub2", "/foo");, +		assertCapturedMessage("sess1", "sub3", "/bar");]