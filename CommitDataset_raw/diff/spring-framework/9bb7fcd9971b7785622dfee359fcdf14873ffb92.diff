[+++ b/spring-context/src/main/java/org/springframework/validation/DefaultBindingErrorProcessor.java, + * Copyright 2002-2018 the original author or authors., +		FieldError error = new FieldError(bindingResult.getObjectName(), fixedField, "", true,, +				codes, arguments, "Field '" + fixedField + "' is required");, +		bindingResult.addError(error);, +		if (ObjectUtils.isArray(rejectedValue)) {, +		FieldError error = new FieldError(bindingResult.getObjectName(), field, rejectedValue, true,, +				codes, arguments, ex.getLocalizedMessage());, +		error.initSource(ex);, +		bindingResult.addError(error);, +++ b/spring-context/src/main/java/org/springframework/validation/DefaultBindingErrorProcessor.java, + * Copyright 2002-2018 the original author or authors., +		FieldError error = new FieldError(bindingResult.getObjectName(), fixedField, "", true,, +				codes, arguments, "Field '" + fixedField + "' is required");, +		bindingResult.addError(error);, +		if (ObjectUtils.isArray(rejectedValue)) {, +		FieldError error = new FieldError(bindingResult.getObjectName(), field, rejectedValue, true,, +				codes, arguments, ex.getLocalizedMessage());, +		error.initSource(ex);, +		bindingResult.addError(error);, +++ b/spring-context/src/main/java/org/springframework/validation/FieldError.java, + * Copyright 2002-2018 the original author or authors., +	@Override, +	public String toString() {, +		return "Field error in object '" + getObjectName() + "' on field '" + this.field +, +				"': rejected value [" + ObjectUtils.nullSafeToString(this.rejectedValue) + "]; " +, +				resolvableToString();, +	}, +, +++ b/spring-context/src/main/java/org/springframework/validation/DefaultBindingErrorProcessor.java, + * Copyright 2002-2018 the original author or authors., +		FieldError error = new FieldError(bindingResult.getObjectName(), fixedField, "", true,, +				codes, arguments, "Field '" + fixedField + "' is required");, +		bindingResult.addError(error);, +		if (ObjectUtils.isArray(rejectedValue)) {, +		FieldError error = new FieldError(bindingResult.getObjectName(), field, rejectedValue, true,, +				codes, arguments, ex.getLocalizedMessage());, +		error.initSource(ex);, +		bindingResult.addError(error);, +++ b/spring-context/src/main/java/org/springframework/validation/FieldError.java, + * Copyright 2002-2018 the original author or authors., +	@Override, +	public String toString() {, +		return "Field error in object '" + getObjectName() + "' on field '" + this.field +, +				"': rejected value [" + ObjectUtils.nullSafeToString(this.rejectedValue) + "]; " +, +				resolvableToString();, +	}, +, +++ b/spring-context/src/main/java/org/springframework/validation/ObjectError.java, + * Copyright 2002-2018 the original author or authors., +	@Nullable, +	private Object source;, +, +	/**, +	 * Initialize the source behind this error: possibly an {@link Exception}, +	 * (typically {@link org.springframework.beans.PropertyAccessException}), +	 * or a Bean Validation {@link javax.validation.ConstraintViolation}., +	 * @param source the source object, +	 * @since 5.0.4, +	 */, +	public void initSource(Object source) {, +		Assert.state(this.source == null, "Source already initialized");, +		this.source = source;, +	/**, +	 * Return the source behind this error: possibly an {@link Exception}, +	 * (typically {@link org.springframework.beans.PropertyAccessException}), +	 * or a Bean Validation {@link javax.validation.ConstraintViolation}., +	 * @return the source object, or {@code null} if none, +	 * @since 5.0.4, +	 */, +	@Nullable, +	public Object getSource() {, +		return this.source;, +	}, +, +, +	@Override, +	public String toString() {, +		return "Error in object '" + this.objectName + "': " + resolvableToString();, +	}, +, +++ b/spring-context/src/main/java/org/springframework/validation/DefaultBindingErrorProcessor.java, + * Copyright 2002-2018 the original author or authors., +		FieldError error = new FieldError(bindingResult.getObjectName(), fixedField, "", true,, +				codes, arguments, "Field '" + fixedField + "' is required");, +		bindingResult.addError(error);, +		if (ObjectUtils.isArray(rejectedValue)) {, +		FieldError error = new FieldError(bindingResult.getObjectName(), field, rejectedValue, true,, +				codes, arguments, ex.getLocalizedMessage());, +		error.initSource(ex);, +		bindingResult.addError(error);, +++ b/spring-context/src/main/java/org/springframework/validation/FieldError.java, + * Copyright 2002-2018 the original author or authors., +	@Override, +	public String toString() {, +		return "Field error in object '" + getObjectName() + "' on field '" + this.field +, +				"': rejected value [" + ObjectUtils.nullSafeToString(this.rejectedValue) + "]; " +, +				resolvableToString();, +	}, +]