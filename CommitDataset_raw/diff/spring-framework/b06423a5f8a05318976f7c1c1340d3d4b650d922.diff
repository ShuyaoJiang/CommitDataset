[+++ b/spring-context/src/main/java/org/springframework/context/support/AbstractMessageSource.java, + * Copyright 2002-2017 the original author or authors., +	public final String getMessage(MessageSourceResolvable resolvable, Locale locale) throws NoSuchMessageException {, +		if (codes != null) {, +				String message = getMessageInternal(code, resolvable.getArguments(), locale);, +				if (message != null) {, +					return message;, +		}, +		String defaultMessage = getDefaultMessage(resolvable, locale);, +			return defaultMessage;, +		throw new NoSuchMessageException(!ObjectUtils.isEmpty(codes) ? codes[codes.length - 1] : null, locale);, +	 * @param locale the locale in which to do the lookup, +	 * Try to retrieve the given message from the parent {@code MessageSource}, if any., +	 * @param locale the locale in which to do the lookup, +	 * Get a default message for the given {@code MessageSourceResolvable}., +	 * <p>This implementation fully renders the default message if available,, +	 * or just returns the plain default message {@code String} if the primary, +	 * message code is being used as a default message., +	 * @param resolvable the value object to resolve a default message for, +	 * @param locale the current locale, +	 * @return the default message, or {@code null} if none, +	 * @since 4.3.6, +	 * @see #renderDefaultMessage(String, Object[], Locale), +	 * @see #getDefaultMessage(String), +	 */, +	protected String getDefaultMessage(MessageSourceResolvable resolvable, Locale locale) {, +		String defaultMessage = resolvable.getDefaultMessage();, +		String[] codes = resolvable.getCodes();, +		if (defaultMessage != null) {, +			if (!ObjectUtils.isEmpty(codes) && defaultMessage.equals(codes[0])) {, +				// Never format a code-as-default-message, even with alwaysUseMessageFormat=true, +				return defaultMessage;, +			}, +			return renderDefaultMessage(defaultMessage, resolvable.getArguments(), locale);, +		}, +		return (!ObjectUtils.isEmpty(codes) ? getDefaultMessage(codes[0]) : null);, +	}, +, +	/**, +	 * receive a {@code NoSuchMessageException} from {@code getMessage}., +	 * @param locale the locale to resolve the code for, +	 * @param locale the locale to resolve the code for, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractMessageSource.java, + * Copyright 2002-2017 the original author or authors., +	public final String getMessage(MessageSourceResolvable resolvable, Locale locale) throws NoSuchMessageException {, +		if (codes != null) {, +				String message = getMessageInternal(code, resolvable.getArguments(), locale);, +				if (message != null) {, +					return message;, +		}, +		String defaultMessage = getDefaultMessage(resolvable, locale);, +			return defaultMessage;, +		throw new NoSuchMessageException(!ObjectUtils.isEmpty(codes) ? codes[codes.length - 1] : null, locale);, +	 * @param locale the locale in which to do the lookup, +	 * Try to retrieve the given message from the parent {@code MessageSource}, if any., +	 * @param locale the locale in which to do the lookup, +	 * Get a default message for the given {@code MessageSourceResolvable}., +	 * <p>This implementation fully renders the default message if available,, +	 * or just returns the plain default message {@code String} if the primary, +	 * message code is being used as a default message., +	 * @param resolvable the value object to resolve a default message for, +	 * @param locale the current locale, +	 * @return the default message, or {@code null} if none, +	 * @since 4.3.6, +	 * @see #renderDefaultMessage(String, Object[], Locale), +	 * @see #getDefaultMessage(String), +	 */, +	protected String getDefaultMessage(MessageSourceResolvable resolvable, Locale locale) {, +		String defaultMessage = resolvable.getDefaultMessage();, +		String[] codes = resolvable.getCodes();, +		if (defaultMessage != null) {, +			if (!ObjectUtils.isEmpty(codes) && defaultMessage.equals(codes[0])) {, +				// Never format a code-as-default-message, even with alwaysUseMessageFormat=true, +				return defaultMessage;, +			}, +			return renderDefaultMessage(defaultMessage, resolvable.getArguments(), locale);, +		}, +		return (!ObjectUtils.isEmpty(codes) ? getDefaultMessage(codes[0]) : null);, +	}, +, +	/**, +	 * receive a {@code NoSuchMessageException} from {@code getMessage}., +	 * @param locale the locale to resolve the code for, +	 * @param locale the locale to resolve the code for, +++ b/spring-context/src/test/java/org/springframework/validation/beanvalidation/SpringValidatorAdapterTests.java, + * Copyright 2002-2017 the original author or authors., +import javax.validation.constraints.Pattern;, + * @author Juergen Hoeller, +	public void testNoStringArgumentValue() {, +		TestBean testBean = new TestBean();, +		testBean.setPassword("pass");, +		testBean.setConfirmPassword("pass");, +, +		BeanPropertyBindingResult errors = new BeanPropertyBindingResult(testBean, "testBean");, +		validatorAdapter.validate(testBean, errors);, +, +		assertThat(errors.getFieldErrorCount("password"), is(1));, +		assertThat(messageSource.getMessage(errors.getFieldError("password"), Locale.ENGLISH),, +				is("Size of Password is must be between 8 and 128"));, +	}]