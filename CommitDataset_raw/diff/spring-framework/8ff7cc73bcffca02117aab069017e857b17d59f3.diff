[+++ b/spring-web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java, + * Copyright 2002-2015 the original author or authors., +			else if (MediaType.APPLICATION_OCTET_STREAM.equals(contentType)) {, +				MediaType type = getDefaultContentType(t);, +				contentTypeToUse = (type != null ? type : contentTypeToUse);, +			}, +++ b/spring-web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java, + * Copyright 2002-2015 the original author or authors., +			else if (MediaType.APPLICATION_OCTET_STREAM.equals(contentType)) {, +				MediaType type = getDefaultContentType(t);, +				contentTypeToUse = (type != null ? type : contentTypeToUse);, +			}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessorTests.java, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.core.io.FileSystemResource;, +import org.springframework.core.io.Resource;, +import org.springframework.http.converter.ResourceHttpMessageConverter;, +import org.springframework.web.bind.annotation.RequestMethod;, +	// SPR-12894, +, +	@Test, +	public void handleReturnValueImage() throws Exception {, +		this.servletRequest.addHeader("Accept", "*/*");, +, +		Method method = getClass().getMethod("getImage");, +		MethodParameter returnType = new MethodParameter(method, -1);, +, +		List<HttpMessageConverter<?>> converters = Arrays.asList(new ResourceHttpMessageConverter());, +		RequestResponseBodyMethodProcessor processor = new RequestResponseBodyMethodProcessor(converters);, +, +		ClassPathResource resource = new ClassPathResource("logo.jpg", getClass());, +		processor.writeWithMessageConverters(resource, returnType, this.webRequest);, +, +		assertEquals("image/jpeg", this.servletResponse.getHeader("Content-Type"));, +	}, +, +	@SuppressWarnings("unused"), +	public Resource getImage() {, +		return null;, +	}]