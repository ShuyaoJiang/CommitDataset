[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/MessageMapping.java, + * Annotation for mapping a {@link Message} onto message handling methods by matching to, + * the message destination., + *, + * @see org.springframework.messaging.simp.handler.AnnotationMethodMessageHandler, +	 * Destination-based mapping expressed by this annotation., +	 * <p>, +	 * For STOMP over WebSocket messages: this is the destination of the STOMP message, +	 * (e.g. "/positions"). Ant-style path patterns (e.g. "/price.stock.*") are supported, +	 * and so are path template variables (e.g. "/price.stock.{ticker}"")., +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/MessageMapping.java, + * Annotation for mapping a {@link Message} onto message handling methods by matching to, + * the message destination., + *, + * @see org.springframework.messaging.simp.handler.AnnotationMethodMessageHandler, +	 * Destination-based mapping expressed by this annotation., +	 * <p>, +	 * For STOMP over WebSocket messages: this is the destination of the STOMP message, +	 * (e.g. "/positions"). Ant-style path patterns (e.g. "/price.stock.*") are supported, +	 * and so are path template variables (e.g. "/price.stock.{ticker}"")., +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/PathVariable.java, + * Annotation that indicates a method parameter should be bound to a path template, + * variable. Supported on message handling methods such as {@link MessageMapping, + * @MessageMapping} for messages with path-like destination semantics., + * <p>, + * A {@code @PathVariable} template variable is always required and does not have a, + * default value to fall back on., + * @see org.springframework.messaging.simp.handler.AnnotationMethodMessageHandler, + *, +	/**, +	 * The path template variable to bind to., +	 */, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/MessageMapping.java, + * Annotation for mapping a {@link Message} onto message handling methods by matching to, + * the message destination., + *, + * @see org.springframework.messaging.simp.handler.AnnotationMethodMessageHandler, +	 * Destination-based mapping expressed by this annotation., +	 * <p>, +	 * For STOMP over WebSocket messages: this is the destination of the STOMP message, +	 * (e.g. "/positions"). Ant-style path patterns (e.g. "/price.stock.*") are supported, +	 * and so are path template variables (e.g. "/price.stock.{ticker}"")., +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/PathVariable.java, + * Annotation that indicates a method parameter should be bound to a path template, + * variable. Supported on message handling methods such as {@link MessageMapping, + * @MessageMapping} for messages with path-like destination semantics., + * <p>, + * A {@code @PathVariable} template variable is always required and does not have a, + * default value to fall back on., + * @see org.springframework.messaging.simp.handler.AnnotationMethodMessageHandler, + *, +	/**, +	 * The path template variable to bind to., +	 */, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PathVariableMethodArgumentResolver.java, +import java.util.Map;, +, +, +	public PathVariableMethodArgumentResolver(ConversionService cs) {, +		super(cs, null);, +		String headerName = AnnotationMethodMessageHandler.PATH_TEMPLATE_VARIABLES_HEADER;, +		@SuppressWarnings("unchecked"), +		Map<String, String> vars = (Map<String, String>) message.getHeaders().get(headerName);, +		return (vars != null) ? vars.get(name) : null;, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/MessageMapping.java, + * Annotation for mapping a {@link Message} onto message handling methods by matching to, + * the message destination., + *, + * @see org.springframework.messaging.simp.handler.AnnotationMethodMessageHandler, +	 * Destination-based mapping expressed by this annotation., +	 * <p>, +	 * For STOMP over WebSocket messages: this is the destination of the STOMP message, +	 * (e.g. "/positions"). Ant-style path patterns (e.g. "/price.stock.*") are supported, +	 * and so are path template variables (e.g. "/price.stock.{ticker}"")., +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/PathVariable.java, + * Annotation that indicates a method parameter should be bound to a path template, + * variable. Supported on message handling methods such as {@link MessageMapping, + * @MessageMapping} for messages with path-like destination semantics., + * <p>, + * A {@code @PathVariable} template variable is always required and does not have a, + * default value to fall back on., + * @see org.springframework.messaging.simp.handler.AnnotationMethodMessageHandler, + *, +	/**, +	 * The path template variable to bind to., +	 */, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PathVariableMethodArgumentResolver.java, +import java.util.Map;, +, +, +	public PathVariableMethodArgumentResolver(ConversionService cs) {, +		super(cs, null);, +		String headerName = AnnotationMethodMessageHandler.PATH_TEMPLATE_VARIABLES_HEADER;, +		@SuppressWarnings("unchecked"), +		Map<String, String> vars = (Map<String, String>) message.getHeaders().get(headerName);, +		return (vars != null) ? vars.get(name) : null;]