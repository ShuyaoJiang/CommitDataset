[+++ b/spring-test/src/main/java/org/springframework/test/web/client/AbstractRequestExpectationManager.java, +import java.net.URI;, +import java.util.Collection;, +import java.util.LinkedHashSet;, +import java.util.Set;, +import org.springframework.http.HttpMethod;, + * for storing expectations and actual requests, and checking for unsatisfied, + * expectations at the end., + * <p>Sub-classes are responsible for validating each request by matching it to, + * to expectations following the order of declaration or not., +, +	public ResponseActions expectRequest(ExpectedCount count, RequestMatcher matcher) {, +		RequestExpectation expectation = new DefaultRequestExpectation(count, matcher);, +		if (getRequests().isEmpty()) {, +			afterExpectationsDeclared();, +		}, +	/**, +	 * Invoked after the phase of declaring expected requests is over. This is, +	 * detected from {@link #validateRequest} on the first actual request., +	 */, +	protected void afterExpectationsDeclared() {, +	}, +, +	/**, +	 * Sub-classes must implement the actual validation of the request, +	 * matching it to a declared expectation., +	 */, +	@Override, +	public void verify() {, +		if (getExpectations().isEmpty()) {, +			return;, +		}, +		int count = 0;, +		for (RequestExpectation expectation : getExpectations()) {, +			if (!expectation.isSatisfied()) {, +				count++;, +			}, +		}, +		if (count > 0) {, +			String message = "Further request(s) expected leaving " + count + " unsatisfied expectation(s).\n";, +			throw new AssertionError(message + getRequestDetails());, +		}, +	}, +, +	/**, +	 * Return details of executed requests., +	 */, +	protected String getRequestDetails() {, +		StringBuilder sb = new StringBuilder();, +		sb.append(getRequests().size()).append(" request(s) executed");, +		if (!getRequests().isEmpty()) {, +			sb.append(":\n");, +			for (ClientHttpRequest request : getRequests()) {, +				sb.append(request.toString()).append("\n");, +			}, +		}, +		else {, +			sb.append(".\n");, +		}, +		return sb.toString();, +	}, +, +	/**, +	 * Return an {@code AssertionError} that a sub-class can raise for an, +	 * unexpected request., +	 */, +	protected AssertionError createUnexpectedRequestError(ClientHttpRequest request) {, +		HttpMethod method = request.getMethod();, +		URI uri = request.getURI();, +		String message = "No further requests expected: HTTP " + method + " " + uri + "\n";, +		return new AssertionError(message + getRequestDetails());, +	}, +, +, +	/**, +	 * Helper class to manage a group of request expectations. It helps with, +	 * operations against the entire group such as finding a match and updating, +	 * (add or remove) based on expected request count., +	 */, +	protected static class RequestExpectationGroup {, +, +		private final Set<RequestExpectation> expectations = new LinkedHashSet<RequestExpectation>();, +, +, +		public Set<RequestExpectation> getExpectations() {, +			return this.expectations;, +		}, +, +		public void update(RequestExpectation expectation) {, +			if (expectation.hasRemainingCount()) {, +				getExpectations().add(expectation);, +			}, +			else {, +				getExpectations().remove(expectation);, +			}, +		}, +, +		public void updateAll(Collection<RequestExpectation> expectations) {, +			for (RequestExpectation expectation : expectations) {, +				update(expectation);]