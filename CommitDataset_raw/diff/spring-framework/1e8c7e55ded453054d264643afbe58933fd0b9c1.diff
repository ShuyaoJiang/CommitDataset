[+++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceDecoder.java, + * Copyright 2002-2017 the original author or authors., +		return Flux.from(decodeToMono(inputStream, elementType, mimeType, hints));, +	}, +, +	@Override, +	public Mono<Resource> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType,, +			MimeType mimeType, Map<String, Object> hints) {, +, +			return Mono.from(byteArray.map(ByteArrayInputStream::new).map(InputStreamResource::new));, +			return Mono.from(byteArray.map(ByteArrayResource::new));, +			return Mono.error(new IllegalStateException("Unsupported resource class: " + clazz));, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceDecoder.java, + * Copyright 2002-2017 the original author or authors., +		return Flux.from(decodeToMono(inputStream, elementType, mimeType, hints));, +	}, +, +	@Override, +	public Mono<Resource> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType,, +			MimeType mimeType, Map<String, Object> hints) {, +, +			return Mono.from(byteArray.map(ByteArrayInputStream::new).map(InputStreamResource::new));, +			return Mono.from(byteArray.map(ByteArrayResource::new));, +			return Mono.error(new IllegalStateException("Unsupported resource class: " + clazz));, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +import java.util.Optional;, +import java.util.function.Consumer;, +import org.springframework.core.io.ByteArrayResource;, +import org.springframework.util.MimeType;, +import static java.nio.charset.StandardCharsets.UTF_8;, +, +		public EntityExchangeResult<byte[]> decodeToByteArray() {, +			ByteArrayResource resource = this.response.body(toMono(ByteArrayResource.class)).block(this.timeout);, +			byte[] body = (resource != null ? resource.getByteArray() : null);, +			return new EntityExchangeResult<>(this, body);, +, +			return new DefaultBodyContentSpec(this.result.decodeToByteArray());, +, +			B actual = this.result.getResponseBody();, +		@Override, +		public <T extends S> T consumeWith(Consumer<B> consumer) {, +			B actual = this.result.getResponseBody();, +			this.result.assertWithDiagnostics(() -> consumer.accept(actual));, +			return self();, +		}, +, +, +, +		private final EntityExchangeResult<byte[]> result;, +, +		private final boolean isEmpty;, +		DefaultBodyContentSpec(EntityExchangeResult<byte[]> result) {, +			this.isEmpty = (result.getResponseBody() == null);, +			this.result.assertWithDiagnostics(() -> assertTrue("Expected empty body", this.isEmpty));, +			return new EntityExchangeResult<>(this.result, null);, +, +		@Override, +		public BodyContentSpec consumeAsStringWith(Consumer<String> consumer) {, +			this.result.assertWithDiagnostics(() -> consumer.accept(getBodyAsString()));, +			return this;, +		}, +, +		private String getBodyAsString() {, +			if (this.isEmpty) {, +				return null;, +			}, +			MediaType mediaType = this.result.getResponseHeaders().getContentType();, +			Charset charset = Optional.ofNullable(mediaType).map(MimeType::getCharset).orElse(UTF_8);, +			return new String(this.result.getResponseBody(), charset);, +		}, +, +		@Override, +		public BodyContentSpec consumeWith(Consumer<byte[]> consumer) {, +			this.result.assertWithDiagnostics(() -> consumer.accept(this.result.getResponseBody()));, +			return this;, +		}, +, +		@Override, +		public EntityExchangeResult<byte[]> returnResult() {, +			return this.result;, +		}, +, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceDecoder.java, + * Copyright 2002-2017 the original author or authors., +		return Flux.from(decodeToMono(inputStream, elementType, mimeType, hints));, +	}, +, +	@Override, +	public Mono<Resource> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType,, +			MimeType mimeType, Map<String, Object> hints) {, +, +			return Mono.from(byteArray.map(ByteArrayInputStream::new).map(InputStreamResource::new));, +			return Mono.from(byteArray.map(ByteArrayResource::new));, +			return Mono.error(new IllegalStateException("Unsupported resource class: " + clazz));, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +import java.util.Optional;, +import java.util.function.Consumer;, +import org.springframework.core.io.ByteArrayResource;, +import org.springframework.util.MimeType;, +import static java.nio.charset.StandardCharsets.UTF_8;]