[+++ b/org.springframework.context/src/main/java/org/springframework/cache/KeyGenerator.java, +public interface KeyGenerator {, +	Object extract(Object target, Method method, Object... params);, +++ b/org.springframework.context/src/main/java/org/springframework/cache/KeyGenerator.java, +public interface KeyGenerator {, +	Object extract(Object target, Method method, Object... params);, +++ b/org.springframework.context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +	private KeyGenerator keyGenerator = new DefaultKeyGenerator();, +, +	private volatile boolean initialized = false;, +, +		initialized = true;, +	public void setKeyGenerator(KeyGenerator keyGenerator) {, +		// check whether aspect is enabled, +		// to cope with cases where the AJ is pulled in automatically, +, +		if (!initialized) {, +			return invocation.call();, +		}, +, +		boolean log = logger.isTraceEnabled();, +, +, +		private final KeyGenerator keyGenerator = CacheAspectSupport.this.keyGenerator;, +++ b/org.springframework.context/src/main/java/org/springframework/cache/KeyGenerator.java, +public interface KeyGenerator {, +	Object extract(Object target, Method method, Object... params);, +++ b/org.springframework.context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +	private KeyGenerator keyGenerator = new DefaultKeyGenerator();, +, +	private volatile boolean initialized = false;, +, +		initialized = true;, +	public void setKeyGenerator(KeyGenerator keyGenerator) {, +		// check whether aspect is enabled, +		// to cope with cases where the AJ is pulled in automatically, +, +		if (!initialized) {, +			return invocation.call();, +		}, +, +		boolean log = logger.isTraceEnabled();, +, +, +		private final KeyGenerator keyGenerator = CacheAspectSupport.this.keyGenerator;, +++ b/org.springframework.context/src/main/java/org/springframework/cache/support/DefaultKeyGenerator.java, +public class DefaultKeyGenerator implements KeyGenerator {]