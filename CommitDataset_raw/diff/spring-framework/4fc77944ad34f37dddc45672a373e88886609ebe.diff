[+++ b/spring-framework-reference/src/expressions.xml, +      linkend="expressions-example-classes">Classes used in the, +++ b/spring-framework-reference/src/expressions.xml, +      linkend="expressions-example-classes">Classes used in the, +++ b/spring-framework-reference/src/rest.xml, +<chapter id="rest">, +  <title>REST support</title>, +      will bind the userId method parameter to the String value 'fred'.</para>, +        <programlisting language="java">@RequestMapping("/owners/{ownerId}", method=RequestMethod.GET), +        <programlisting language="java">@RequestMapping("/owners/{ownerId}", method=RequestMethod.GET), +      <title>Returning multiple representations</title>, +      <para>A RESTful architecture may expose multiple representations of a, +      resource. There are two strategies for a client to inform the server of, +      the representation it is interested in receiving.</para>, +, +      <para>The first strategy is to use a distinct URI for each resource., +      This is typically done by using a different file extension in the URI., +      For example the URI<literal>, +      http://www.example.com/users/fred.pdf</literal> requests a PDF, +      representation of the user fred while, +      <literal>http://www.example.com/users/fred.xml</literal> requests an XML, +      representation.</para>, +, +      <para>The second strategy is for the client to use the same URI to, +      locate the resource but set the <literal>Accept</literal> HTTP request, +      header to list the <ulink, +      url="http://en.wikipedia.org/wiki/Internet_media_type">media, +      types</ulink> that it understands. For example, a HTTP request for, +      <literal>http://www.example.com/users/fred</literal> with an, +      <literal>Accept</literal> header set to <literal>application/pdf, +      </literal>requests a PDF representation of the user fred while, +      <literal>http://www.example.com/users/fred</literal> with an, +      <literal>Accept</literal> header set to <literal>text/xml</literal>, +      requests an XML representation. This strategy is known as <ulink, +      url="http://en.wikipedia.org/wiki/Content_negotiation">content, +      negotiation</ulink>.</para>, +, +      <note>, +        <para>One issue with the Accept header is that is impossible to change, +        it in a web browser, in HTML. For instance, in Firefox, it's fixed, +        to</para>, +, +        <programlisting>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8, +</programlisting>, +, +        <para>For this reason it is common to see the use of a distinct URI, +        for each representation.</para>, +      </note>, +, +      <para>To support multiple representations of a resource Spring provides, +      the <classname>ContentNegotiatingViewResolver</classname> to resolve a, +      view based on the file extension or <literal>Accept</literal> header of, +      the HTTP request. <classname>ContentNegotiatingViewResolver</classname>, +      does not perform the view resolution itself, but instead delegates to a, +      list of view resolvers set using the property, +      <literal>ViewResolvers</literal>.</para>, +, +      <para>The <classname>ContentNegotiatingViewResolver</classname> selects, +      an appropriate <classname>View</classname> to handle the request by, +      comparing the request media type(s) with the media type (a.k.a., +      <literal>Content-Type</literal>) supported by the, +      <classname>View</classname> associated with each of its, +      <classname>ViewResolvers</classname>. The first, +      <classname>View</classname> in the list that has a compatible, +      <literal>Content-Type</literal> is used to return the representation to, +      the client. The <literal>Accept</literal> header may include wild cards,, +      for example 'text/*', in which case a <classname>View</classname> whose, +      Context-Type was 'text/xml' is a compatible match.</para>, +, +      <para>To support the resolution of a view based on a file extension,, +      <classname>ContentNegotiatingViewResolver</classname>'s property, +      <literal>MediaTypes</literal> is used to specify a mapping of file, +      extensions to media types. For more information on the algorithm to, +      determine the request media type, refer to the API documentation for, +      <classname>ContentNegotiatingViewResolver</classname>..</para>, +, +      <para>Here is an example configuration of a, +      <classname>ContentNegotiatingViewResolver</classname></para>, +, +      <programlisting language="xml">	&lt;bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver"&gt;, +		&lt;property name="mediaTypes"&gt;, +			&lt;map&gt;, +				&lt;entry key="atom" value="application/atom+xml"/&gt;, +				&lt;entry key="html" value="text/html"/&gt;, +			&lt;/map&gt;, +		&lt;/property&gt;, +		&lt;property name="viewResolvers"&gt;, +			&lt;list&gt;, +				&lt;bean class="org.springframework.web.servlet.view.BeanNameViewResolver"/&gt;, +				&lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;, +					&lt;property name="prefix" value="/WEB-INF/jsp/"/&gt;, +					&lt;property name="suffix" value=".jsp"/&gt;, +				&lt;/bean&gt;, +			&lt;/list&gt;, +		&lt;/property&gt;, +	&lt;/bean&gt;, +	, +	, +	&lt;bean id="content" class="com.springsource.samples.rest.SampleContentAtomView"/&gt;</programlisting>, +]