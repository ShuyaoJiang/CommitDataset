[+++ b/org.springframework.context/src/test/java/org/springframework/beans/factory/support/QualifierAnnotationAutowireContextTests.java, +/*, + * Copyright 2002-2007 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.beans.factory.support;, +, +import static org.junit.Assert.*;, +, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +import org.junit.Test;, +import org.springframework.beans.factory.BeanCreationException;, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.beans.factory.UnsatisfiedDependencyException;, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.beans.factory.annotation.Qualifier;, +import org.springframework.beans.factory.config.ConstructorArgumentValues;, +import org.springframework.context.annotation.AnnotationConfigUtils;, +import org.springframework.context.support.GenericApplicationContext;, +, +/**, + * Integration tests for handling {@link Qualifier} annotations., + * , + * @author Mark Fisher, + * @author Juergen Hoeller, + * @author Chris Beams, + */, +public class QualifierAnnotationAutowireContextTests {, +	, +	private static final String JUERGEN = "juergen";, +, +	private static final String MARK = "mark";, +, +, +	@Test, +	public void testAutowiredFieldWithSingleNonQualifiedCandidate() {, +		GenericApplicationContext context = new GenericApplicationContext();, +		ConstructorArgumentValues cavs = new ConstructorArgumentValues();, +		cavs.addGenericArgumentValue(JUERGEN);, +		RootBeanDefinition person = new RootBeanDefinition(Person.class, cavs, null);, +		context.registerBeanDefinition(JUERGEN, person);, +		context.registerBeanDefinition("autowired", , +				new RootBeanDefinition(QualifiedFieldTestBean.class));, +		AnnotationConfigUtils.registerAnnotationConfigProcessors(context);, +		try {, +			context.refresh();, +			fail("expected BeanCreationException");, +		}, +		catch (BeanCreationException e) {, +			assertTrue(e.getRootCause() instanceof NoSuchBeanDefinitionException);, +			assertEquals("autowired", e.getBeanName());, +		}, +	}, +, +	@Test, +	public void testAutowiredMethodParameterWithSingleNonQualifiedCandidate() {, +		GenericApplicationContext context = new GenericApplicationContext();, +		ConstructorArgumentValues cavs = new ConstructorArgumentValues();, +		cavs.addGenericArgumentValue(JUERGEN);, +		RootBeanDefinition person = new RootBeanDefinition(Person.class, cavs, null);, +		context.registerBeanDefinition(JUERGEN, person);, +		context.registerBeanDefinition("autowired", , +				new RootBeanDefinition(QualifiedMethodParameterTestBean.class));, +		AnnotationConfigUtils.registerAnnotationConfigProcessors(context);, +		try {, +			context.refresh();, +			fail("expected BeanCreationException");, +		}, +		catch (BeanCreationException e) {, +			assertTrue(e.getRootCause() instanceof NoSuchBeanDefinitionException);, +			assertEquals("autowired", e.getBeanName());, +		}, +	}, +, +	@Test, +	public void testAutowiredConstructorArgumentWithSingleNonQualifiedCandidate() {, +		GenericApplicationContext context = new GenericApplicationContext();, +		ConstructorArgumentValues cavs = new ConstructorArgumentValues();, +		cavs.addGenericArgumentValue(JUERGEN);, +		RootBeanDefinition person = new RootBeanDefinition(Person.class, cavs, null);, +		context.registerBeanDefinition(JUERGEN, person);, +		context.registerBeanDefinition("autowired", , +				new RootBeanDefinition(QualifiedConstructorArgumentTestBean.class));, +		AnnotationConfigUtils.registerAnnotationConfigProcessors(context);]