[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/ServletModelAttributeMethodProcessor.java, +import org.springframework.core.convert.ConversionService;, +import org.springframework.core.convert.TypeDescriptor;, +import org.springframework.core.convert.converter.Converter;, +import org.springframework.util.StringUtils;, + * <p>Also adds a fall-back strategy to instantiate the model attribute from a, + * URI template variable or from a request parameter if the name matches the, + * model attribute name and there is an appropriate type conversion strategy., +	 * Instantiate the model attribute from a URI template variable or from a, +	 * request parameter if the name matches to the model attribute name and, +	 * if there is an appropriate type conversion strategy. If none of these, +	 * are true delegate back to the base class., +	 * @see #createAttributeFromUriValue, +	protected final Object createAttribute(String attributeName, , +		String value = getRequestValueForAttribute(attributeName, request);, +		if (value != null) {, +			Object attribute = createAttributeFromRequestValue(value, attributeName, parameter, binderFactory, request);, +			if (attribute != null) {, +				return attribute;, +			}, +	/**, +	 * Obtain a value from the request that may be used to instantiate the, +	 * model attribute through type conversion from String to the target type. , +	 * <p>The default implementation looks for the attribute name to match, +	 * a URI variable first and then a request parameter., +	 * @param attributeName the model attribute name, +	 * @param request the current request, +	 * @return the request value to try to convert or {@code null}, +	 */, +	protected String getRequestValueForAttribute(String attributeName, NativeWebRequest request) {, +		Map<String, String> variables = getUriTemplateVariables(request);, +		if (StringUtils.hasText(variables.get(attributeName))) {, +			return variables.get(attributeName);, +		}, +		else if (StringUtils.hasText(request.getParameter(attributeName))) {, +			return request.getParameter(attributeName);, +		}, +		else {, +			return null;, +		}, +	}, +	@SuppressWarnings("unchecked"), +	protected final Map<String, String> getUriTemplateVariables(NativeWebRequest request) {, +		Map<String, String> variables = , +		return (variables != null) ? variables : Collections.<String, String>emptyMap();, +	}, +	/**, +	 * Create a model attribute from a String request value (e.g. URI template, +	 * variable, request parameter) using type conversion., +	 * <p>The default implementation converts only if there a registered , +	 * {@link Converter} that can perform the conversion., +	 * @param sourceValue the source value to create the model attribute from, +	 * @param attributeName the name of the attribute, never {@code null}, +	 * @param parameter the method parameter, +	 * @param binderFactory for creating WebDataBinder instance, +	 * @param request the current request, +	 * @return the created model attribute, or {@code null}, +	 * @throws Exception, +	 */, +	protected Object createAttributeFromRequestValue(String sourceValue,, +												 String attributeName, , +												 MethodParameter parameter, , +												 WebDataBinderFactory binderFactory, , +												 NativeWebRequest request) throws Exception {, +		DataBinder binder = binderFactory.createBinder(request, null, attributeName);, +		ConversionService conversionService = binder.getConversionService();, +		if (conversionService != null) {, +			TypeDescriptor source = TypeDescriptor.valueOf(String.class);, +			TypeDescriptor target = new TypeDescriptor(parameter);, +			if (conversionService.canConvert(source, target)) {, +				return binder.convertIfNecessary(sourceValue, parameter.getParameterType(), parameter);, +			}, +		}, +		return null;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/ServletModelAttributeMethodProcessor.java, +import org.springframework.core.convert.ConversionService;, +import org.springframework.core.convert.TypeDescriptor;, +import org.springframework.core.convert.converter.Converter;, +import org.springframework.util.StringUtils;, + * <p>Also adds a fall-back strategy to instantiate the model attribute from a, + * URI template variable or from a request parameter if the name matches the, + * model attribute name and there is an appropriate type conversion strategy., +	 * Instantiate the model attribute from a URI template variable or from a, +	 * request parameter if the name matches to the model attribute name and, +	 * if there is an appropriate type conversion strategy. If none of these, +	 * are true delegate back to the base class., +	 * @see #createAttributeFromUriValue, +	protected final Object createAttribute(String attributeName, , +		String value = getRequestValueForAttribute(attributeName, request);, +		if (value != null) {, +			Object attribute = createAttributeFromRequestValue(value, attributeName, parameter, binderFactory, request);, +			if (attribute != null) {, +				return attribute;, +			}, +	/**, +	 * Obtain a value from the request that may be used to instantiate the, +	 * model attribute through type conversion from String to the target type. , +	 * <p>The default implementation looks for the attribute name to match, +	 * a URI variable first and then a request parameter., +	 * @param attributeName the model attribute name]