[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/OriginHandshakeInterceptor.java, +import java.util.LinkedHashSet;, +import java.util.Set;, + * An interceptor to check request {@code Origin} header value against a, + * collection of allowed origins., +	private final Set<String> allowedOrigins = new LinkedHashSet<String>();, +, +		Assert.notNull(allowedOrigins, "Allowed origins Collection must not be null");, +	 * @see #setAllowedOrigins, +		return Collections.unmodifiableSet(this.allowedOrigins);, +, +				logger.debug("Handshake request rejected, Origin header value " +, +						request.getHeaders().getOrigin() + " not allowed");, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/OriginHandshakeInterceptor.java, +import java.util.LinkedHashSet;, +import java.util.Set;, + * An interceptor to check request {@code Origin} header value against a, + * collection of allowed origins., +	private final Set<String> allowedOrigins = new LinkedHashSet<String>();, +, +		Assert.notNull(allowedOrigins, "Allowed origins Collection must not be null");, +	 * @see #setAllowedOrigins, +		return Collections.unmodifiableSet(this.allowedOrigins);, +, +				logger.debug("Handshake request rejected, Origin header value " +, +						request.getHeaders().getOrigin() + " not allowed");, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java, +import java.util.Collection;, +import java.util.LinkedHashSet;, +import java.util.Set;, + * By default, only same origin requests are allowed. Use {@link #setAllowedOrigins}, +	protected final Set<String> allowedOrigins = new LinkedHashSet<String>();, +, +	/**, +	 * Configure allowed {@code Origin} header values. This check is mostly, +	 * designed for browsers. There is nothing preventing other types of client, +	 * to modify the {@code Origin} header value., +	 * <p>When SockJS is enabled and origins are restricted, transport types, +	 * that do not allow to check request origin (JSONP and Iframe based, +	 * transports) are disabled. As a consequence, IE 6 to 9 are not supported, +	 * when origins are restricted., +	 * <p>Each provided allowed origin must have a scheme, and optionally a port, +	 * (e.g. "http://example.org", "http://example.org:9090"). An allowed origin, +	 * string may also be "*" in which case all origins are allowed., +	 * @since 4.1.2, +	 * @see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>, +	 * @see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>, +	 */, +	public void setAllowedOrigins(Collection<String> allowedOrigins) {, +		Assert.notNull(allowedOrigins, "Allowed origins Collection must not be null");, +		this.allowedOrigins.clear();, +		this.allowedOrigins.addAll(allowedOrigins);, +	}, +, +	/**, +	 * @since 4.1.2, +	 * @see #setAllowedOrigins, +	 */, +	public Collection<String> getAllowedOrigins() {, +		return Collections.unmodifiableSet(this.allowedOrigins);, +	}, +, +		return (filename.indexOf(';') == -1);, +	protected boolean checkOrigin(ServerHttpRequest request, ServerHttpResponse response, HttpMethod... httpMethods), +			throws IOException {, +	/**, +	 * Handle request for raw WebSocket communication, i.e. without any SockJS message framing., +	 */, +	protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,, +			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException;, +, +	/**, +	 * Handle a SockJS session URL (i.e. transport-specific request)., +	 */, +	protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,, +			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException;, +, +, +					String content = String.format(, +							INFO_CONTENT, random.nextInt(), isSessionCookieNeeded(), isWebSocketEnabled());, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/OriginHandshakeInterceptor.java, +import java.util.LinkedHashSet;, +import java.util.Set;, + * An interceptor to check request {@code Origin} header value against a, + * collection of allowed origins., +	private final Set<String> allowedOrigins = new LinkedHashSet<String>();, +, +		Assert.notNull(allowedOrigins, "Allowed origins Collection must not be null");, +	 * @see #setAllowedOrigins, +		return Collections.unmodifiableSet(this.allowedOrigins);, +, +				logger.debug("Handshake request rejected, Origin header value " +, +						request.getHeaders().getOrigin() + " not allowed");, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java, +import java.util.Collection;, +import java.util.LinkedHashSet;, +import java.util.Set;, + * By default, only same origin requests are allowed. Use {@link #setAllowedOrigins}, +	protected final Set<String> allowedOrigins = new LinkedHashSet<String>();, +]