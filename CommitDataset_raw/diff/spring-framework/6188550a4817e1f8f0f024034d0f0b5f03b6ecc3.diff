[+++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletRequestAttributes.java, +					if (oldValue == newValue && !isImmutableSessionAttribute(name, newValue)) {, +	 * Determine whether the given value is to be considered as an immutable session, +	 * attribute, that is, doesn't have to be re-set via {@code session.setAttribute}, +	 * since its value cannot meaningfully change internally., +	 * <p>The default implementation returns {@code true} for {@code String},, +	 * {@code Character}, {@code Boolean} and {@code Number} values., +	 * @param name the name of the attribute, +	 * @param value the corresponding value to check, +	 * @return {@code true} if the value is to be considered as immutable for the, +	 * purposes of session attribute management; {@code false} otherwise, +	 * @see #updateAccessedSessionAttributes(), +	 */, +	protected boolean isImmutableSessionAttribute(String name, Object value) {, +		return (value instanceof String || value instanceof Character ||, +				value instanceof Boolean || value instanceof Number);, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletRequestAttributes.java, +					if (oldValue == newValue && !isImmutableSessionAttribute(name, newValue)) {, +	 * Determine whether the given value is to be considered as an immutable session, +	 * attribute, that is, doesn't have to be re-set via {@code session.setAttribute}, +	 * since its value cannot meaningfully change internally., +	 * <p>The default implementation returns {@code true} for {@code String},, +	 * {@code Character}, {@code Boolean} and {@code Number} values., +	 * @param name the name of the attribute, +	 * @param value the corresponding value to check, +	 * @return {@code true} if the value is to be considered as immutable for the, +	 * purposes of session attribute management; {@code false} otherwise, +	 * @see #updateAccessedSessionAttributes(), +	 */, +	protected boolean isImmutableSessionAttribute(String name, Object value) {, +		return (value instanceof String || value instanceof Character ||, +				value instanceof Boolean || value instanceof Number);, +	}, +, +	/**, +++ b/spring-web/src/test/java/org/springframework/web/context/request/ServletRequestAttributesTests.java, + * Copyright 2002-2014 the original author or authors., +import java.math.BigInteger;, +import javax.servlet.http.HttpSession;, +, +, +	@Test, +	public void updateAccessedAttributes() throws Exception {, +		HttpServletRequest request = mock(HttpServletRequest.class);, +		HttpSession session = mock(HttpSession.class);, +		when(request.getSession(anyBoolean())).thenReturn(session);, +		when(session.getAttribute(KEY)).thenReturn(VALUE);, +, +		ServletRequestAttributes attrs = new ServletRequestAttributes(request);, +		assertSame(VALUE, attrs.getAttribute(KEY, RequestAttributes.SCOPE_SESSION));, +		attrs.requestCompleted();, +, +		verify(session, times(2)).getAttribute(KEY);, +		verify(session).setAttribute(KEY, VALUE);, +		verifyNoMoreInteractions(session);, +	}, +, +	@Test, +	public void skipImmutableString() {, +		doSkipImmutableValue("someString");, +	}, +, +	@Test, +	public void skipImmutableCharacter() {, +		doSkipImmutableValue(new Character('x'));, +	}, +, +	@Test, +	public void skipImmutableBoolean() {, +		doSkipImmutableValue(Boolean.TRUE);, +	}, +, +	@Test, +	public void skipImmutableInteger() {, +		doSkipImmutableValue(new Integer(1));, +	}, +, +	@Test, +	public void skipImmutableFloat() {, +		doSkipImmutableValue(new Float(1.1));, +	}, +, +	@Test, +	public void skipImmutableBigInteger() {, +		doSkipImmutableValue(new BigInteger("1"));, +	}, +, +	private void doSkipImmutableValue(Object immutableValue) {, +		HttpServletRequest request = mock(HttpServletRequest.class);, +		HttpSession session = mock(HttpSession.class);, +		when(request.getSession(anyBoolean())).thenReturn(session);, +		when(session.getAttribute(KEY)).thenReturn(immutableValue);, +, +		ServletRequestAttributes attrs = new ServletRequestAttributes(request);, +		attrs.getAttribute(KEY, RequestAttributes.SCOPE_SESSION);, +		attrs.requestCompleted();, +]