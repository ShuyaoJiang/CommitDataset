[+++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MappingJackson2MessageConverter.java, + * Copyright 2002-2018 the original author or authors., +			if (Message.class.isAssignableFrom(param.getParameterType())) {, +				param = param.nested();, +			}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MappingJackson2MessageConverter.java, + * Copyright 2002-2018 the original author or authors., +			if (Message.class.isAssignableFrom(param.getParameterType())) {, +				param = param.nested();, +			}, +++ b/spring-messaging/src/test/java/org/springframework/messaging/converter/MappingJackson2MessageConverterTests.java, + * Copyright 2002-2018 the original author or authors., + * Test fixture for {@link MappingJackson2MessageConverter}., +	@Test // SPR-16486, +	public void fromMessageToMessageWithPojo() throws Exception {, +		MappingJackson2MessageConverter converter = new MappingJackson2MessageConverter();, +		String payload = "{\"string\":\"foo\"}";, +		Message<?> message = MessageBuilder.withPayload(payload.getBytes(StandardCharsets.UTF_8)).build();, +, +		Method method = getClass().getDeclaredMethod("handleMessage", Message.class);, +		MethodParameter param = new MethodParameter(method, 0);, +		Object actual = converter.fromMessage(message, Message.class, param);, +, +		assertTrue(actual instanceof MyBean);, +		assertEquals("foo", ((MyBean) actual).getString());, +	}, +, +	void handleMessage(Message<MyBean> message) {}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MappingJackson2MessageConverter.java, + * Copyright 2002-2018 the original author or authors., +			if (Message.class.isAssignableFrom(param.getParameterType())) {, +				param = param.nested();, +			}, +++ b/spring-messaging/src/test/java/org/springframework/messaging/converter/MappingJackson2MessageConverterTests.java, + * Copyright 2002-2018 the original author or authors., + * Test fixture for {@link MappingJackson2MessageConverter}., +	@Test // SPR-16486, +	public void fromMessageToMessageWithPojo() throws Exception {, +		MappingJackson2MessageConverter converter = new MappingJackson2MessageConverter();, +		String payload = "{\"string\":\"foo\"}";, +		Message<?> message = MessageBuilder.withPayload(payload.getBytes(StandardCharsets.UTF_8)).build();, +, +		Method method = getClass().getDeclaredMethod("handleMessage", Message.class);, +		MethodParameter param = new MethodParameter(method, 0);, +		Object actual = converter.fromMessage(message, Message.class, param);, +, +		assertTrue(actual instanceof MyBean);, +		assertEquals("foo", ((MyBean) actual).getString());, +	}, +, +	void handleMessage(Message<MyBean> message) {}, +++ b/spring-messaging/src/test/java/org/springframework/messaging/handler/annotation/support/MessageMethodArgumentResolverTests.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.messaging.converter.MappingJackson2MessageConverter;, +				Message.class, Message.class, Message.class, Message.class, ErrorMessage.class, Message.class);, +	@Test // SPR-16486, +	public void resolveWithJacksonConverter() throws Exception {, +		Message<String> inMessage = MessageBuilder.withPayload("{\"foo\":\"bar\"}").build();, +		MethodParameter parameter = new MethodParameter(this.method, 5);, +, +		this.resolver = new MessageMethodArgumentResolver(new MappingJackson2MessageConverter());, +		Object actual = this.resolver.resolveArgument(parameter, inMessage);, +, +		assertTrue(actual instanceof Message);, +		Message<?> outMessage = (Message<?>) actual;, +		assertTrue(outMessage.getPayload() instanceof Foo);, +		assertEquals("bar", ((Foo) outMessage.getPayload()).getFoo());, +	}, +, +			ErrorMessage subClass,, +			Message<Foo> fooPayload) {, +	}, +, +, +	static class Foo {, +, +		private String foo;, +, +		public String getFoo() {, +			return foo;, +		}, +, +		public void setFoo(String foo) {, +			this.foo = foo;, +		}, +]