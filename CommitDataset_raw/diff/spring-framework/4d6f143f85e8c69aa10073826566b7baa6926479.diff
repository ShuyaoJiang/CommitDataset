[+++ b/src/asciidoc/appendix.adoc, +[[annotation-programming-model]], +== Spring Annotation Programming Model, +Spring's annotation programming model is documented in the, +https://github.com/spring-projects/spring-framework/wiki/Spring-Annotation-Programming-Model[Spring Framework Wiki]., +, +, +++ b/src/asciidoc/appendix.adoc, +[[annotation-programming-model]], +== Spring Annotation Programming Model, +Spring's annotation programming model is documented in the, +https://github.com/spring-projects/spring-framework/wiki/Spring-Annotation-Programming-Model[Spring Framework Wiki]., +, +, +++ b/src/asciidoc/core-beans.adoc, +Many of the annotations provided by Spring can be used as __meta-annotations__ in your, +own code. A meta-annotation is simply an annotation that can be applied to another, +`@Component`:, +Meta-annotations can also be combined to create __composed annotations__. For example,, +the `@RestController` annotation from Spring MVC is __composed__ of `@Controller` and, +`@ResponseBody`., +In addition, composed annotations may optionally redeclare attributes from, +meta-annotations to allow user customization. This can be particularly useful when you, +want to only expose a subset of the meta-annotation's attributes. For example, the, +following is a custom `@Scope` annotation that hardcodes the scope name to `session` but, +still allows customization of the `proxyMode`., +	@Target(ElementType.TYPE), +		ScopedProxyMode proxyMode() default ScopedProxyMode.DEFAULT;, +`@SessionScope` can then be used without declaring the `proxyMode` as follows:, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Service, +	**@SessionScope**, +	public class SessionScopedUserService implements UserService {, +		// ..., +	}, +----, +, +Or with an overridden value for the `proxyMode` as follows:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Service, +	**@SessionScope(proxyMode = ScopedProxyMode.TARGET_CLASS)**, +	public class SessionScopedService {, +		// ..., +	}, +----, +, +For further details, consult the <<annotation-programming-model,Spring Annotation Programming Model>>., +++ b/src/asciidoc/appendix.adoc, +[[annotation-programming-model]], +== Spring Annotation Programming Model, +Spring's annotation programming model is documented in the, +https://github.com/spring-projects/spring-framework/wiki/Spring-Annotation-Programming-Model[Spring Framework Wiki]., +, +, +++ b/src/asciidoc/core-beans.adoc, +Many of the annotations provided by Spring can be used as __meta-annotations__ in your, +own code. A meta-annotation is simply an annotation that can be applied to another, +`@Component`:, +Meta-annotations can also be combined to create __composed annotations__. For example,, +the `@RestController` annotation from Spring MVC is __composed__ of `@Controller` and, +`@ResponseBody`., +In addition, composed annotations may optionally redeclare attributes from, +meta-annotations to allow user customization. This can be particularly useful when you, +want to only expose a subset of the meta-annotation's attributes. For example, the, +following is a custom `@Scope` annotation that hardcodes the scope name to `session` but, +still allows customization of the `proxyMode`., +	@Target(ElementType.TYPE), +		ScopedProxyMode proxyMode() default ScopedProxyMode.DEFAULT;, +`@SessionScope` can then be used without declaring the `proxyMode` as follows:, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Service, +	**@SessionScope**, +	public class SessionScopedUserService implements UserService {, +		// ..., +	}, +----, +, +Or with an overridden value for the `proxyMode` as follows:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Service, +	**@SessionScope(proxyMode = ScopedProxyMode.TARGET_CLASS)**, +	public class SessionScopedService {, +		// ..., +	}, +----, +, +For further details, consult the <<annotation-programming-model,Spring Annotation Programming Model>>., +++ b/src/asciidoc/testing.adoc, +For further details, consult the <<annotation-programming-model,Spring Annotation Programming Model>>.]