[+++ b/spring-context/src/main/java/org/springframework/context/support/AbstractResourceBasedMessageSource.java, + * Copyright 2002-2018 the original author or authors., +	 * <p>The effective default is the {@code java.util.Properties}, +	 * default encoding: ISO-8859-1. A {@code null} value indicates, +	 * the platform default encoding., +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractResourceBasedMessageSource.java, + * Copyright 2002-2018 the original author or authors., +	 * <p>The effective default is the {@code java.util.Properties}, +	 * default encoding: ISO-8859-1. A {@code null} value indicates, +	 * the platform default encoding., +++ b/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java, + * <p>On the classpath, bundle resources will be read with the locally configured, + * {@link #setDefaultEncoding encoding}: by default, ISO-8859-1; consider switching, + * this to UTF-8, or to {@code null} for the platform default encoding. On the JDK 9+, + * module path where locally provided {@link ResourceBundle.Control} handles are not, + * supported, this MessageSource always falls back to {@link ResourceBundle#getBundle}, + * retrieval with the platform default encoding: UTF-8 with a ISO-8859-1 fallback on, + * JDK 9+ (configurable through the "java.util.PropertyResourceBundle.encoding" system, + * property). Note that {@link #loadBundle(Reader)}/{@link #loadBundle(InputStream)}, + * won't be called in this case either, effectively ignoring overrides in subclasses., + * Consider implementing a JDK 9 {@code java.util.spi.ResourceBundleProvider} instead., + *, +	private final Map<String, Map<Locale, ResourceBundle>> cachedResourceBundles =, +			new ConcurrentHashMap<>();, +	private final Map<ResourceBundle, Map<String, Map<Locale, MessageFormat>>> cachedBundleMessageFormats =, +			new ConcurrentHashMap<>();, +, +	@Nullable, +	private volatile MessageSourceControl control = new MessageSourceControl();, +, +, +	public ResourceBundleMessageSource() {, +		setDefaultEncoding("ISO-8859-1");, +	}, +		MessageSourceControl control = this.control;, +		if (control != null) {, +				return ResourceBundle.getBundle(basename, locale, classLoader, control);, +				this.control = null;, +				String encoding = getDefaultEncoding();, +				if (encoding != null && logger.isInfoEnabled()) {, +					logger.info("ResourceBundleMessageSource is configured to read resources with encoding '" +, +							encoding + "' but ResourceBundle.Control not supported in current system environment: " +, +							ex.getMessage() + " - falling back to plain ResourceBundle.getBundle retrieval with the " +, +							"platform default encoding. Consider setting the 'defaultEncoding' property to 'null' " +, +							"for participating in the platform default and therefore avoiding this log message.");, +		}, +, +		// Fallback: plain getBundle lookup without Control handle, +	 * <p>This will be called in case of a {@link #setDefaultEncoding "defaultEncoding"},, +	 * including {@link ResourceBundleMessageSource}'s default ISO-8859-1 encoding., +	 * Note that this method can only be called with a {@link ResourceBundle.Control}:, +	 * When running on the JDK 9+ module path where such control handles are not, +	 * supported, any overrides in custom subclasses will effectively get ignored., +	 * @see #loadBundle(InputStream), +	 * Load a property-based resource bundle from the given input stream,, +	 * picking up the default properties encoding on JDK 9+., +	 * <p>This will only be called with {@link #setDefaultEncoding "defaultEncoding"}, +	 * set to {@code null}, explicitly enforcing the platform default encoding, +	 * (which is UTF-8 with a ISO-8859-1 fallback on JDK 9+ but configurable, +	 * through the "java.util.PropertyResourceBundle.encoding" system property)., +	 * Note that this method can only be called with a {@link ResourceBundle.Control}:, +	 * When running on the JDK 9+ module path where such control handles are not, +	 * supported, any overrides in custom subclasses will effectively get ignored., +	 * <p>The default implementation returns a {@link PropertyResourceBundle}., +	 * @param inputStream the input stream for the target resource, +	 * @return the fully loaded bundle, +	 * @throws IOException in case of I/O failure, +	 * @since 5.1, +	 * @see #loadBundle(Reader), +	 * @see PropertyResourceBundle#PropertyResourceBundle(InputStream), +	 */, +	protected ResourceBundle loadBundle(InputStream inputStream) throws IOException {, +		return new PropertyResourceBundle(inputStream);, +	}, +, +	/**, +				Map<String, Map<Locale, MessageFormat>> existing =, +						this.cachedBundleMessageFormats.putIfAbsent(bundle, codeMap);, +				InputStream inputStream;, +					inputStream = AccessController.doPrivileged((PrivilegedExceptionAction<InputStream>) () -> {, +				if (inputStream != null) {, +					if (encoding != null) {, +						try (InputStreamReader bundleReader = new InputStreamReader(inputStream, encoding)) {, +						try (InputStream bundleStream = inputStream) {, +							return loadBundle(bundleStream);, +						}, +					}, +				}, +				else {]