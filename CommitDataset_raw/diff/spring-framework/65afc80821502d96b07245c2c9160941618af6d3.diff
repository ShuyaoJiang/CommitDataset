[+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/UriTemplateServletAnnotationControllerTests.java, +import org.junit.Ignore;, +import org.springframework.web.bind.annotation.RequestMethod;, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/hotels/42/bookings/21-other");, +		assertEquals("test-42-21-other", response.getContentAsString());, +	@Ignore("In progress"), +, +		request = new MockHttpServletRequest("GET", "/hotels/42/bookings/21.html");, +		response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("test-42-21", response.getContentAsString());, +	@Test, +	public void explicitSubPath() throws Exception {, +		initServlet(ExplicitSubPathController.class);, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/hotels/42");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("test-42", response.getContentAsString());, +	}, +, +	@Test, +	@Ignore("In progress"), +	public void implicitSubPath() throws Exception {, +		initServlet(ImplicitSubPathController.class);, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/hotels/42");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("test-42", response.getContentAsString());, +	}, +, +	@Test, +	@Ignore("In progress"), +	public void crud() throws Exception {, +		initServlet(CrudController.class);, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/hotels");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("getHotels", response.getContentAsString());, +, +		request = new MockHttpServletRequest("POST", "/hotels");, +		response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("newHotel", response.getContentAsString());, +, +		request = new MockHttpServletRequest("POST", "/hotels");, +		response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("newHotel", response.getContentAsString());, +	}, +, +		@RequestMapping("/hotels/{hotel}/bookings/{booking}-{other}"), +		public void handle(@PathVariable("hotel") String hotel,, +				@PathVariable int booking,, +				@PathVariable String other,, +				Writer writer) throws IOException {, +			writer.write("test-" + hotel + "-" + booking + "-" + other);, +	@RequestMapping("/hotels/{hotel}"), +	}, +, +	@Controller, +	@RequestMapping("/hotels/*"), +	public static class ExplicitSubPathController {, +, +		@RequestMapping("{hotel}"), +		public void handleHotel(@PathVariable String hotel, Writer writer) throws IOException {, +			writer.write("test-" + hotel);, +		}, +	@Controller, +	@RequestMapping("hotels"), +	public static class ImplicitSubPathController {, +, +		@RequestMapping("{hotel}"), +		public void handleHotel(@PathVariable String hotel, Writer writer) throws IOException {, +			writer.write("test-" + hotel);, +		}, +	}, +, +	@Controller, +	@RequestMapping("hotels"), +	public static class CrudController {, +, +		@RequestMapping(method = RequestMethod.GET), +		public void list(Writer writer) throws IOException {, +			writer.write("list");, +		}, +, +		@RequestMapping(method = RequestMethod.POST), +		public void create(Writer writer) throws IOException {, +			writer.write("create");, +		}, +, +		@RequestMapping(value = "{hotel}", method = RequestMethod.GET), +		public void show(@PathVariable String hotel, Writer writer) throws IOException {, +			writer.write("show-" + hotel);, +		}, +, +		@RequestMapping(value = "{hotel}", method = RequestMethod.PUT)]