[+++ b/spring-context/src/main/kotlin/org/springframework/context/support/BeanDefinitionDsl.kt, + * Functional bean definition Kotlin DSL., + *, + * Example:, + *, + * ```, + * beans {, + * 	bean<UserHandler>(), + * 	bean {, + * 		Routes(ref(), ref()), + * 	}, + * 	bean<WebHandler>("webHandler") {, + * 	RouterFunctions.toWebHandler(, + * 		ref<Routes>().router(),, + * 		HandlerStrategies.builder().viewResolver(ref()).build()), + * 	}, + * 	bean("messageSource") {, + * 		ReloadableResourceBundleMessageSource().apply {, + * 			setBasename("messages"), + * 			setDefaultEncoding("UTF-8"), + * 		}, + * 	}, + * 	bean {, + * 		val prefix = "classpath:/templates/", + * 		val suffix = ".mustache", + * 		val loader = MustacheResourceTemplateLoader(prefix, suffix), + * 		MustacheViewResolver(Mustache.compiler().withLoader(loader)).apply {, + * 			setPrefix(prefix), + * 			setSuffix(suffix), + * 		}, + * 	}, + * 	profile("foo") {, + * 		bean<Foo>(), + * 	}, + * }, + * ```, + *, + * @author Sebastien Deleuze, + * @see BeanDefinitionDsl, + * @since 5.0, + */, +fun beans(init: BeanDefinitionDsl.() -> Unit): BeanDefinitionDsl {, +	val beans = BeanDefinitionDsl(), +	beans.init(), +	return beans, +}, +, +/**, + * @constructor Create a new bean definition DSL., + * @param condition the predicate to fulfill in order to take in account the inner bean definition block, +class BeanDefinitionDsl(private val condition: (ConfigurableEnvironment) -> Boolean = { true }) : (GenericApplicationContext) -> Unit {, +	@PublishedApi, +	internal val registrations = arrayListOf<(GenericApplicationContext) -> Unit>(), +	@PublishedApi, +	internal val children = arrayListOf<BeanDefinitionDsl>(), +	/**, +	 * Scope enum constants., +	 */, +		/**, +		 * Scope constant for the standard singleton scope, +		 * @see org.springframework.beans.factory.config.BeanDefinition.SCOPE_SINGLETON, +		 */, +		/**, +		 * Scope constant for the standard singleton scope, +		 * @see org.springframework.beans.factory.config.BeanDefinition.SCOPE_PROTOTYPE, +		 */, +	/**, +	 * Provide read access to some application context facilities., +	 * @constructor Create a new bean definition context., +	 * @param context the `ApplicationContext` instance to use for retrieving bean references, `Environment`, etc., +	 */, +	inner class BeanDefinitionContext(@PublishedApi internal val context: GenericApplicationContext) {, +		/**, +		 * Get a reference to the bean by type or type + name with the syntax, +		 * `ref<Foo>()` or `ref<Foo>("foo")`. When leveraging Kotlin type inference, +		 * it could be as short as `ref()` or `ref("foo")`., +		 * @param name the name of the bean to retrieve, +		 * @param T type the bean must match, can be an interface or superclass, +		 */, +	 * @param name the name of the bean, +	 * @param scope Override the target scope of this bean, specifying a new scope name., +	 * @param isLazyInit Set whether this bean should be lazily initialized., +	 * @param isPrimary Set whether this bean is a primary autowire candidate., +	 * @param isAutowireCandidate Set whether this bean is a candidate for getting autowired into some other bean., +	 * @see GenericApplicationContext.registerBean, +	 * @see org.springframework.beans.factory.config.BeanDefinition, +	 * @see GenericApplicationContext.registerBean, +	 * @param condition the predicate to fulfill in order to take in account the inner bean definition block, +	/**, +	 * Register the bean defined via the DSL on thAh pe provided application context., +	 * @param context The `ApplicationContext` to use for registering the beans, +	 */, +++ b/spring-context/src/main/kotlin/org/springframework/context/support/BeanDefinitionDsl.kt, + * Functional bean definition Kotlin DSL., + *, + * Example:, + *, + * ```, + * beans {, + * 	bean<UserHandler>()]