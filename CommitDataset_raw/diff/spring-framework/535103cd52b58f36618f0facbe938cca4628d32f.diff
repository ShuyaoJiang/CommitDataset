[+++ b/spring-context/src/main/java/org/springframework/remoting/rmi/JndiRmiClientInterceptor.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.util.Assert;, +		Assert.notNull(serviceInterface, "'serviceInterface' must not be null");, +		Assert.isTrue(serviceInterface.isInterface(), "'serviceInterface' must be an interface");, +++ b/spring-context/src/main/java/org/springframework/remoting/rmi/JndiRmiClientInterceptor.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.util.Assert;, +		Assert.notNull(serviceInterface, "'serviceInterface' must not be null");, +		Assert.isTrue(serviceInterface.isInterface(), "'serviceInterface' must be an interface");, +++ b/spring-context/src/main/java/org/springframework/remoting/rmi/JndiRmiProxyFactoryBean.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.util.Assert;, +		Class<?> ifc = getServiceInterface();, +		Assert.notNull(ifc, "Property 'serviceInterface' is required");, +		this.serviceProxy = new ProxyFactory(ifc, this).getProxy(this.beanClassLoader);, +++ b/spring-context/src/main/java/org/springframework/remoting/rmi/JndiRmiClientInterceptor.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.util.Assert;, +		Assert.notNull(serviceInterface, "'serviceInterface' must not be null");, +		Assert.isTrue(serviceInterface.isInterface(), "'serviceInterface' must be an interface");, +++ b/spring-context/src/main/java/org/springframework/remoting/rmi/JndiRmiProxyFactoryBean.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.util.Assert;, +		Class<?> ifc = getServiceInterface();, +		Assert.notNull(ifc, "Property 'serviceInterface' is required");, +		this.serviceProxy = new ProxyFactory(ifc, this).getProxy(this.beanClassLoader);, +++ b/spring-context/src/main/java/org/springframework/remoting/rmi/RemoteInvocationSerializingExporter.java, + * Copyright 2002-2017 the original author or authors., +		if (this.proxy == null) {, +			throw new IllegalStateException(ClassUtils.getShortName(getClass()) + " has not been initialized");, +		}, +					RemoteInvocation.class.getName() + "]: " + ClassUtils.getDescriptiveType(obj));, +++ b/spring-context/src/main/java/org/springframework/remoting/rmi/JndiRmiClientInterceptor.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.util.Assert;, +		Assert.notNull(serviceInterface, "'serviceInterface' must not be null");, +		Assert.isTrue(serviceInterface.isInterface(), "'serviceInterface' must be an interface");, +++ b/spring-context/src/main/java/org/springframework/remoting/rmi/JndiRmiProxyFactoryBean.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.util.Assert;, +		Class<?> ifc = getServiceInterface();, +		Assert.notNull(ifc, "Property 'serviceInterface' is required");, +		this.serviceProxy = new ProxyFactory(ifc, this).getProxy(this.beanClassLoader);, +++ b/spring-context/src/main/java/org/springframework/remoting/rmi/RemoteInvocationSerializingExporter.java, + * Copyright 2002-2017 the original author or authors., +		if (this.proxy == null) {, +			throw new IllegalStateException(ClassUtils.getShortName(getClass()) + " has not been initialized");, +		}, +					RemoteInvocation.class.getName() + "]: " + ClassUtils.getDescriptiveType(obj));, +++ b/spring-context/src/main/java/org/springframework/remoting/rmi/RmiProxyFactoryBean.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.util.Assert;, +		Class<?> ifc = getServiceInterface();, +		Assert.notNull(ifc, "Property 'serviceInterface' is required");, +		this.serviceProxy = new ProxyFactory(ifc, this).getProxy(getBeanClassLoader());, +++ b/spring-context/src/main/java/org/springframework/remoting/rmi/JndiRmiClientInterceptor.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.util.Assert;, +		Assert.notNull(serviceInterface, "'serviceInterface' must not be null");, +		Assert.isTrue(serviceInterface.isInterface(), "'serviceInterface' must be an interface");, +++ b/spring-context/src/main/java/org/springframework/remoting/rmi/JndiRmiProxyFactoryBean.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.util.Assert;, +		Class<?> ifc = getServiceInterface();, +		Assert.notNull(ifc, "Property 'serviceInterface' is required");, +		this.serviceProxy = new ProxyFactory(ifc, this).getProxy(this.beanClassLoader);, +++ b/spring-context/src/main/java/org/springframework/remoting/rmi/RemoteInvocationSerializingExporter.java, + * Copyright 2002-2017 the original author or authors., +		if (this.proxy == null) {, +			throw new IllegalStateException(ClassUtils.getShortName(getClass()) + " has not been initialized");, +		}, +					RemoteInvocation.class.getName() + "]: " + ClassUtils.getDescriptiveType(obj));, +++ b/spring-context/src/main/java/org/springframework/remoting/rmi/RmiProxyFactoryBean.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.util.Assert;, +		Class<?> ifc = getServiceInterface();, +		Assert.notNull(ifc, "Property 'serviceInterface' is required");, +		this.serviceProxy = new ProxyFactory(ifc, this).getProxy(getBeanClassLoader());, +++ b/spring-context/src/main/java/org/springframework/remoting/support/RemoteAccessor.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.util.Assert;, +, +		Assert.notNull(serviceInterface, "'serviceInterface' must not be null");, +		Assert.isTrue(serviceInterface.isInterface(), "'serviceInterface' must be an interface");, +++ b/spring-context/src/main/java/org/springframework/remoting/rmi/JndiRmiClientInterceptor.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.util.Assert;, +		Assert.notNull(serviceInterface, "'serviceInterface' must not be null");, +		Assert.isTrue(serviceInterface.isInterface(), "'serviceInterface' must be an interface");, +++ b/spring-context/src/main/java/org/springframework/remoting/rmi/JndiRmiProxyFactoryBean.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.util.Assert;, +		Class<?> ifc = getServiceInterface();, +		Assert.notNull(ifc, "Property 'serviceInterface' is required");, +		this.serviceProxy = new ProxyFactory(ifc, this).getProxy(this.beanClassLoader);, +++ b/spring-context/src/main/java/org/springframework/remoting/rmi/RemoteInvocationSerializingExporter.java, + * Copyright 2002-2017 the original author or authors., +		if (this.proxy == null) {, +			throw new IllegalStateException(ClassUtils.getShortName(getClass()) + " has not been initialized");]