[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/MockMvcResultHandlers.java, + * favorite. To navigate to this setting, open the Preferences and type "favorites"., + * @author Sam Brannen, +					System.out.println(String.format("%s:", heading));, +					System.out.println(String.format("%17s = %s", label, value));, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/MockMvcResultHandlers.java, + * favorite. To navigate to this setting, open the Preferences and type "favorites"., + * @author Sam Brannen, +					System.out.println(String.format("%s:", heading));, +					System.out.println(String.format("%17s = %s", label, value));, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/PrintingResultHandler.java, +, +import javax.servlet.http.Cookie;, +import org.springframework.core.style.ToStringCreator;, +import org.springframework.util.ObjectUtils;, + * stream., + * <p>An instance of this class is typically accessed via, + * @author Sam Brannen, +	 * @return the result value printer, +		if (ObjectUtils.isEmpty(flashMap)) {, +		printCookies(response.getCookies());, +	}, +, +	/**, +	 * Print the supplied cookies in a human-readable form, assuming the, +	 * {@link Cookie} implementation does not provide its own {@code toString()}., +	 * @since 4.2, +	 */, +	private void printCookies(Cookie[] cookies) {, +		String[] cookieStrings = new String[cookies.length];, +		for (int i = 0; i < cookies.length; i++) {, +			Cookie cookie = cookies[i];, +			cookieStrings[i] = new ToStringCreator(cookie), +				.append("name", cookie.getName()), +				.append("value", cookie.getValue()), +				.append("comment", cookie.getComment()), +				.append("domain", cookie.getDomain()), +				.append("maxAge", cookie.getMaxAge()), +				.append("path", cookie.getPath()), +				.append("secure", cookie.getSecure()), +				.append("version", cookie.getVersion()), +				.append("httpOnly", cookie.isHttpOnly()), +				.toString();, +		}, +		this.printer.printValue("Cookies", cookieStrings);, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/MockMvcResultHandlers.java, + * favorite. To navigate to this setting, open the Preferences and type "favorites"., + * @author Sam Brannen, +					System.out.println(String.format("%s:", heading));, +					System.out.println(String.format("%17s = %s", label, value));, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/PrintingResultHandler.java, +, +import javax.servlet.http.Cookie;, +import org.springframework.core.style.ToStringCreator;, +import org.springframework.util.ObjectUtils;, + * stream., + * <p>An instance of this class is typically accessed via, + * @author Sam Brannen, +	 * @return the result value printer, +		if (ObjectUtils.isEmpty(flashMap)) {, +		printCookies(response.getCookies());, +	}, +, +	/**, +	 * Print the supplied cookies in a human-readable form, assuming the, +	 * {@link Cookie} implementation does not provide its own {@code toString()}., +	 * @since 4.2, +	 */, +	private void printCookies(Cookie[] cookies) {, +		String[] cookieStrings = new String[cookies.length];, +		for (int i = 0; i < cookies.length; i++) {, +			Cookie cookie = cookies[i];, +			cookieStrings[i] = new ToStringCreator(cookie), +				.append("name", cookie.getName()), +				.append("value", cookie.getValue()), +				.append("comment", cookie.getComment()), +				.append("domain", cookie.getDomain()), +				.append("maxAge", cookie.getMaxAge()), +				.append("path", cookie.getPath()), +				.append("secure", cookie.getSecure()), +				.append("version", cookie.getVersion()), +				.append("httpOnly", cookie.isHttpOnly()), +				.toString();, +		}, +		this.printer.printValue("Cookies", cookieStrings);, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/result/PrintingResultHandlerTests.java, + * Copyright 2002-2015 the original author or authors., +, + * @author Sam Brannen, +	private final TestPrintingResultHandler handler = new TestPrintingResultHandler();, +	private final MockHttpServletRequest request = new MockHttpServletRequest("GET", "/") {, +, +	private final MockHttpServletResponse response = new MockHttpServletResponse();, +, +	private final StubMvcResult mvcResult = new StubMvcResult(this.request, null, null,, +			null, null, null, this.response);, +, +	public void printRequest() throws Exception {, +	public void printResponse() throws Exception {, +		Cookie enigmaCookie = new Cookie("enigma", "42");]