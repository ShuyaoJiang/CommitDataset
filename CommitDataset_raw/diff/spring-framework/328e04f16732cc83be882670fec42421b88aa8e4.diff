[+++ b/spring-context/src/main/java/org/springframework/jndi/JndiPropertySource.java, + * Copyright 2002-2016 the original author or authors., +		if (getSource().isResourceRef() && name.indexOf(':') != -1) {, +			// We're in resource-ref (prefixing with "java:comp/env") mode. Let's not bother, +			// with property names with a colon it since they're probably just containing a, +			// default value clause, very unlikely to match including the colon part even in, +			// a textual property source, and effectively never meant to match that way in, +			// JNDI where a colon indicates a separator between JNDI scheme and actual name., +			return null;, +		}, +, +++ b/spring-context/src/main/java/org/springframework/jndi/JndiPropertySource.java, + * Copyright 2002-2016 the original author or authors., +		if (getSource().isResourceRef() && name.indexOf(':') != -1) {, +			// We're in resource-ref (prefixing with "java:comp/env") mode. Let's not bother, +			// with property names with a colon it since they're probably just containing a, +			// default value clause, very unlikely to match including the colon part even in, +			// a textual property source, and effectively never meant to match that way in, +			// JNDI where a colon indicates a separator between JNDI scheme and actual name., +			return null;, +		}, +, +++ b/spring-context/src/test/java/org/springframework/jndi/JndiPropertySourceTests.java, + * Copyright 2002-2016 the original author or authors., + * @author Juergen Hoeller, +		assertThat(ps.getProperty("p1"), equalTo("v1"));, +		assertThat(ps.getProperty("p1"), equalTo("v1"));, +	}, +, +	@Test, +	public void propertyWithDefaultClauseInResourceRefMode() {, +		JndiLocatorDelegate jndiLocator = new JndiLocatorDelegate() {, +			@Override, +			public Object lookup(String jndiName) throws NamingException {, +				throw new IllegalStateException("Should not get called");, +			}, +		};, +		jndiLocator.setResourceRef(true);, +, +		JndiPropertySource ps = new JndiPropertySource("jndiProperties", jndiLocator);, +		assertThat(ps.getProperty("propertyKey:defaultValue"), nullValue());, +	}, +, +	@Test, +	public void propertyWithColonInNonResourceRefMode() {, +		JndiLocatorDelegate jndiLocator = new JndiLocatorDelegate() {, +			@Override, +			public Object lookup(String jndiName) throws NamingException {, +				assertEquals("my:key", jndiName);, +				return "my:value";, +			}, +		};, +		jndiLocator.setResourceRef(false);, +, +		JndiPropertySource ps = new JndiPropertySource("jndiProperties", jndiLocator);, +		assertThat(ps.getProperty("my:key"), equalTo("my:value"));]