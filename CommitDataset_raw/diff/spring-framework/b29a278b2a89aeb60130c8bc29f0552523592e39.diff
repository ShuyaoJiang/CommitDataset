[+++ b/src/docs/asciidoc/data-access-appendix.adoc, +This part of the appendix lists XML schemas for data access, including the following:, +, +* <<xsd-schemas-tx>>, +* <<xsd-schemas-jdbc>>, +=== The `tx` Schema, +TIP: We strongly encourag you to look at the `'spring-tx.xsd'` file that ships with the, +Spring distribution. This file contains the XML Schema for Spring's transaction, +configuration and covers all of the various elements in the `tx` namespace, including, +attribute defaults and similar information. This file is documented inline, and, thus, the, +In the interest of completeness, to use the elements in the `tx` schema, you need to have, +the following preamble at the top of your Spring XML configuration file. The text in the, +are available to you:, +====, +			xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemaLocation=" <1>, +			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd <2>, +<1> Specify the namespace., +<2> Specify the location (with other schema locations)., +====, +NOTE: Often, when you use the elements in the `tx` namespace, you are also using the elements from the, +by using AOP). The preceding XML snippet contains the relevant lines needed to reference the, +`aop` schema so that the elements in the `aop` namespace are available to you., +=== The `jdbc` Schema, +The `jdbc` elements let you quickly configure an embedded database or initialize an, +existing data source. These elements are documented in, +<<data-access.adoc#jdbc-embedded-database-support,Embedded Database Support>>, +and <<data-access.adoc#jdbc-initializing-datasource,Initializing a DataSource>>, respectively., +To use the elements in the `jdbc` schema, you need to have the following preamble at the top, +of your Spring XML configuration file. The text in the following snippet references the, +correct schema so that the elements in the `jdbc` namespace are available to you:, +====, +		xmlns:jdbc="http://www.springframework.org/schema/jdbc" xsi:schemaLocation=" <2>, +			http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd"> <!-- bean definitions here --> <2>, +<1> Specify the namespace., +<2> Specify the location (with other schema locations)., +====, +++ b/src/docs/asciidoc/data-access-appendix.adoc, +This part of the appendix lists XML schemas for data access, including the following:, +, +* <<xsd-schemas-tx>>, +* <<xsd-schemas-jdbc>>, +=== The `tx` Schema, +TIP: We strongly encourag you to look at the `'spring-tx.xsd'` file that ships with the, +Spring distribution. This file contains the XML Schema for Spring's transaction, +configuration and covers all of the various elements in the `tx` namespace, including, +attribute defaults and similar information. This file is documented inline, and, thus, the, +In the interest of completeness, to use the elements in the `tx` schema, you need to have, +the following preamble at the top of your Spring XML configuration file. The text in the, +are available to you:, +====, +			xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemaLocation=" <1>, +			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd <2>, +<1> Specify the namespace., +<2> Specify the location (with other schema locations)., +====, +NOTE: Often, when you use the elements in the `tx` namespace, you are also using the elements from the, +by using AOP). The preceding XML snippet contains the relevant lines needed to reference the, +`aop` schema so that the elements in the `aop` namespace are available to you., +=== The `jdbc` Schema, +The `jdbc` elements let you quickly configure an embedded database or initialize an, +existing data source. These elements are documented in, +<<data-access.adoc#jdbc-embedded-database-support,Embedded Database Support>>, +and <<data-access.adoc#jdbc-initializing-datasource,Initializing a DataSource>>, respectively., +To use the elements in the `jdbc` schema, you need to have the following preamble at the top, +of your Spring XML configuration file. The text in the following snippet references the, +correct schema so that the elements in the `jdbc` namespace are available to you:, +====, +		xmlns:jdbc="http://www.springframework.org/schema/jdbc" xsi:schemaLocation=" <2>, +			http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd"> <!-- bean definitions here --> <2>, +<1> Specify the namespace., +<2> Specify the location (with other schema locations)., +====, +++ b/src/docs/asciidoc/data-access.adoc, +with which the Spring Framework integrates., +* A consistent programming model across different transaction APIs, such as Java, +  Transaction API (JTA), JDBC, Hibernate, and the Java Persistence API (JPA)., +* A simpler API for <<transaction-programmatic,programmatic>> transaction management than, +  complex transaction APIs, such as JTA., +The following sections describe the Spring Framework's transaction features and, +technologies:, +  model>> describes why you would use the Spring Framework's transaction abstraction, +  transactions through a proprietary API, such as Hibernate., +(The chapter also includes discussions of best practices, <<transaction-application-server-integration,application, +server integration>>, and <<transaction-solutions-to-common-problems,solutions to common problems>>.), +, +=== Advantages of the Spring Framework's Transaction Support Model, +global or local transactions, both of which have profound limitations. Global, +==== Global Transactions, +Global transactions let you work with multiple transactional resources, typically, +transactions through the JTA, which is a cumbersome API (partly due to its, +JNDI, meaning that you also need to use JNDI in order to use JTA. The use, +of global transactions limits any potential reuse of application code, as JTA is, +Previously, the preferred way to use global transactions was through EJB CMT, +(Container Managed Transaction). CMT is a form of declarative transaction, +management (as distinguished from programmatic transaction management). EJB CMT, +removes the need for transaction-related JNDI lookups, although the use of EJB, +implement business logic in EJBs (or at least behind a transactional EJB facade). The, +, +==== Local Transactions, +connection. Local transactions may be easier to use but have a significant disadvantage:]