[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/CssLinkResourceTransformer.java, +			String newLink = null;, +			if(!hasScheme(link)) {, +				newLink = transformerChain.getResolverChain().resolveUrlPath(link, Arrays.asList(resource));, +			}, +	private boolean hasScheme(String link) {, +		int schemeIndex = link.indexOf(":");, +		return schemeIndex > 0 && !link.substring(0, schemeIndex).contains("/");, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/CssLinkResourceTransformer.java, +			String newLink = null;, +			if(!hasScheme(link)) {, +				newLink = transformerChain.getResolverChain().resolveUrlPath(link, Arrays.asList(resource));, +			}, +	private boolean hasScheme(String link) {, +		int schemeIndex = link.indexOf(":");, +		return schemeIndex > 0 && !link.substring(0, schemeIndex).contains("/");, +	}, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/CssLinkResourceTransformerTests.java, +import java.util.Arrays;, +import org.mockito.Mockito;, +				"body { background: url(\"images/image-f448cd1d5dba82b774f3202c878230b3.png\") }\n";, +	@Test, +	public void transformExtLinksNotAllowed() throws Exception {, +		ResourceResolverChain resolverChain = Mockito.mock(DefaultResourceResolverChain.class);, +		ResourceTransformerChain transformerChain = new DefaultResourceTransformerChain(resolverChain,, +				Arrays.asList(new CssLinkResourceTransformer()));, +, +		Resource externalCss = new ClassPathResource("test/external.css", getClass());, +		Resource resource = transformerChain.transform(this.request, externalCss);, +		TransformedResource transformedResource = (TransformedResource) resource;, +, +		String expected = "@import url(\"http://example.org/fonts/css\");\n" +, +				"body { background: url(\"file:///home/spring/image.png\") }";, +		String result = new String(transformedResource.getByteArray(), "UTF-8");, +		result = StringUtils.deleteAny(result, "\r");, +		assertEquals(expected, result);, +, +		Mockito.verify(resolverChain, Mockito.never()), +				.resolveUrlPath("http://example.org/fonts/css", Arrays.asList(externalCss));, +		Mockito.verify(resolverChain, Mockito.never()), +				.resolveUrlPath("file:///home/spring/image.png", Arrays.asList(externalCss));, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/CssLinkResourceTransformer.java, +			String newLink = null;, +			if(!hasScheme(link)) {, +				newLink = transformerChain.getResolverChain().resolveUrlPath(link, Arrays.asList(resource));, +			}, +	private boolean hasScheme(String link) {, +		int schemeIndex = link.indexOf(":");, +		return schemeIndex > 0 && !link.substring(0, schemeIndex).contains("/");, +	}, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/CssLinkResourceTransformerTests.java, +import java.util.Arrays;, +import org.mockito.Mockito;, +				"body { background: url(\"images/image-f448cd1d5dba82b774f3202c878230b3.png\") }\n";, +	@Test, +	public void transformExtLinksNotAllowed() throws Exception {, +		ResourceResolverChain resolverChain = Mockito.mock(DefaultResourceResolverChain.class);, +		ResourceTransformerChain transformerChain = new DefaultResourceTransformerChain(resolverChain,, +				Arrays.asList(new CssLinkResourceTransformer()));, +, +		Resource externalCss = new ClassPathResource("test/external.css", getClass());, +		Resource resource = transformerChain.transform(this.request, externalCss);, +		TransformedResource transformedResource = (TransformedResource) resource;, +, +		String expected = "@import url(\"http://example.org/fonts/css\");\n" +, +				"body { background: url(\"file:///home/spring/image.png\") }";, +		String result = new String(transformedResource.getByteArray(), "UTF-8");, +		result = StringUtils.deleteAny(result, "\r");, +		assertEquals(expected, result);, +, +		Mockito.verify(resolverChain, Mockito.never()), +				.resolveUrlPath("http://example.org/fonts/css", Arrays.asList(externalCss));, +		Mockito.verify(resolverChain, Mockito.never()), +				.resolveUrlPath("file:///home/spring/image.png", Arrays.asList(externalCss));, +	}, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/PathResourceResolverTests.java, +package org.springframework.web.servlet.resource;, +, +import static org.junit.Assert.*;, +, +import java.util.ArrayList;, +import java.util.List;, +, +import org.junit.Before;, +import org.junit.Test;, +, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.core.io.Resource;, +, +/**, + * Unit tests for, + * {@link org.springframework.web.servlet.resource.PathResourceResolver}., + *]