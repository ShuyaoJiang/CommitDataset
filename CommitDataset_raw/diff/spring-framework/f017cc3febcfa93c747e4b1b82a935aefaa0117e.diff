[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java, + * Copyright 2002-2015 the original author or authors., +, +				this.updateCache.put(destination, new LinkedMultiValueMap<String, String>(subscriptions));, +				this.accessCache.put(destination, subscriptions);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java, + * Copyright 2002-2015 the original author or authors., +, +				this.updateCache.put(destination, new LinkedMultiValueMap<String, String>(subscriptions));, +				this.accessCache.put(destination, subscriptions);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SubscriptionRegistry.java, + * Copyright 2002-2015 the original author or authors., +	 * Find all subscriptions that should receive the given message. The map, +	 * returned is safe to iterate and will never be modified., +	 * @return a {@code MultiValueMap} with sessionId-subscriptionId pairs,, +	 * possibly empty., +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java, + * Copyright 2002-2015 the original author or authors., +, +				this.updateCache.put(destination, new LinkedMultiValueMap<String, String>(subscriptions));, +				this.accessCache.put(destination, subscriptions);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SubscriptionRegistry.java, + * Copyright 2002-2015 the original author or authors., +	 * Find all subscriptions that should receive the given message. The map, +	 * returned is safe to iterate and will never be modified., +	 * @return a {@code MultiValueMap} with sessionId-subscriptionId pairs,, +	 * possibly empty., +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistryTests.java, + * Copyright 2002-2015 the original author or authors., +import java.util.Iterator;, +, +	// SPR-12665, +, +	@Test, +	public void findSubscriptionsReturnsMapSafeToIterate() throws Exception {, +		this.registry.registerSubscription(subscribeMessage("sess1", "1", "/foo"));, +		this.registry.registerSubscription(subscribeMessage("sess2", "1", "/foo"));, +		MultiValueMap<String, String> subscriptions = this.registry.findSubscriptions(message("/foo"));, +		assertEquals(2, subscriptions.size());, +, +		Iterator iterator = subscriptions.entrySet().iterator();, +		iterator.next();, +, +		this.registry.registerSubscription(subscribeMessage("sess3", "1", "/foo"));, +, +		iterator.next();, +		// no ConcurrentModificationException, +	}]