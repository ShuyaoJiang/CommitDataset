[+++ b/org.springframework.web/src/main/java/org/springframework/http/converter/json/MappingJacksonHttpMessageConverter.java, + * Copyright 2002-2011 the original author or authors., +import org.codehaus.jackson.JsonGenerator;, +	 * Set the {@code ObjectMapper} for this view. If not set, a default, +	 * <p>Setting a custom-configured {@code ObjectMapper} is one way to take further control of the JSON, +	 * serialization process. For example, an extended {@link org.codehaus.jackson.map.SerializerFactory}, +	 * can be configured that provides custom serializers for specific types. The other option for refining, +	 * the serialization process is to use Jackson's provided annotations on the types to be serialized,, +	 * in which case a custom-configured ObjectMapper is unnecessary., +		Assert.notNull(objectMapper, "ObjectMapper must not be null");, +	 * Return the underlying {@code ObjectMapper} for this view., +	 */, +	public ObjectMapper getObjectMapper() {, +		return this.objectMapper;, +	}, +, +	/**, +	 * Indicate whether the JSON output by this view should be prefixed with "{} &&". Default is false., +	 * <p>Prefixing the JSON string in this manner is used to help prevent JSON Hijacking., +	 * The prefix renders the string syntactically invalid as a script so that it cannot be hijacked., +	 * This prefix does not affect the evaluation of JSON, but if JSON validation is performed on the, +	 * string, the prefix would need to be ignored., +, +		return (this.objectMapper.canDeserialize(javaType) && canRead(mediaType));, +	 * <p>The default implementation returns {@link TypeFactory#type(java.lang.reflect.Type)},, +	 * but this can be overridden in subclasses, to allow for custom generic collection handling., +	 * For instance:, +		return (this.objectMapper.canSerialize(clazz) && canWrite(mediaType));, +]