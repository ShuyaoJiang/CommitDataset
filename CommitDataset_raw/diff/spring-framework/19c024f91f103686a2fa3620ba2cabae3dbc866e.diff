[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java, + * Copyright 2002-2019 the original author or authors., +import java.util.Arrays;, +import java.util.function.Function;, +import java.util.stream.Collectors;, +				logger.debug(formatMappings(userType, methods));, +	private String formatMappings(Class<?> userType, Map<Method, T> methods) {, +		String formattedType = Arrays.stream(ClassUtils.getPackageName(userType).split("\\.")), +				.map(p -> p.substring(0, 1)), +				.collect(Collectors.joining(".", "", "." + userType.getSimpleName()));, +		Function<Method, String> methodFormatter = method -> Arrays.stream(method.getParameterTypes()), +				.map(Class::getSimpleName), +				.collect(Collectors.joining(",", "(", ")"));, +		return methods.entrySet().stream(), +				.map(e -> {, +					Method method = e.getKey();, +					return e.getValue() + ": " + method.getName() + methodFormatter.apply(method);, +				}), +				.collect(Collectors.joining("\n\t", "\n\t" + formattedType + ":" + "\n\t", ""));, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java, + * Copyright 2002-2019 the original author or authors., +import java.util.Arrays;, +import java.util.function.Function;, +import java.util.stream.Collectors;, +				logger.debug(formatMappings(userType, methods));, +	private String formatMappings(Class<?> userType, Map<Method, T> methods) {, +		String formattedType = Arrays.stream(ClassUtils.getPackageName(userType).split("\\.")), +				.map(p -> p.substring(0, 1)), +				.collect(Collectors.joining(".", "", "." + userType.getSimpleName()));, +		Function<Method, String> methodFormatter = method -> Arrays.stream(method.getParameterTypes()), +				.map(Class::getSimpleName), +				.collect(Collectors.joining(",", "(", ")"));, +		return methods.entrySet().stream(), +				.map(e -> {, +					Method method = e.getKey();, +					return e.getValue() + ": " + method.getName() + methodFormatter.apply(method);, +				}), +				.collect(Collectors.joining("\n\t", "\n\t" + formattedType + ":" + "\n\t", ""));, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/reactive/AbstractMethodMessageHandler.java, +import java.util.Arrays;, +import java.util.function.Function;, +import java.util.stream.Collectors;, +				logger.debug(formatMappings(userType, methods));, +	private String formatMappings(Class<?> userType, Map<Method, T> methods) {, +		String formattedType = Arrays.stream(ClassUtils.getPackageName(userType).split("\\.")), +				.map(p -> p.substring(0, 1)), +				.collect(Collectors.joining(".", "", "." + userType.getSimpleName()));, +		Function<Method, String> methodFormatter = method -> Arrays.stream(method.getParameterTypes()), +				.map(Class::getSimpleName), +				.collect(Collectors.joining(",", "(", ")"));, +		return methods.entrySet().stream(), +				.map(e -> {, +					Method method = e.getKey();, +					return e.getValue() + ": " + method.getName() + methodFormatter.apply(method);, +				}), +				.collect(Collectors.joining("\n\t", "\n\t" + formattedType + ":" + "\n\t", ""));, +	}, +]