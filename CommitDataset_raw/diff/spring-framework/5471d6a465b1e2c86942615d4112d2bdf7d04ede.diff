[+++ b/spring-context-indexer/src/main/java/org/springframework/context/index/CandidateComponentsIndexer.java, + * Copyright 2002-2017 the original author or authors., +import java.util.Collections;, +import javax.annotation.processing.Completion;, +import javax.lang.model.element.AnnotationMirror;, +import javax.lang.model.element.ExecutableElement;, + * @author Juergen Hoeller, +public class CandidateComponentsIndexer implements Processor {, +	private TypeHelper typeHelper;, +, +	@Override, +	public Set<String> getSupportedOptions() {, +		return Collections.emptySet();, +	}, +, +	@Override, +	public Set<String> getSupportedAnnotationTypes() {, +		return Collections.singleton("*");, +	}, +, +	@Override, +	public SourceVersion getSupportedSourceVersion() {, +		return SourceVersion.latest();, +	}, +, +		this.typeHelper = new TypeHelper(env);, +		this.metadataCollector = new MetadataCollector(env, this.metadataStore.readMetadata());, +	@Override, +	public Iterable<? extends Completion> getCompletions(, +			Element element, AnnotationMirror annotation, ExecutableElement member, String userText) {, +, +		return Collections.emptyList();, +	}, +, +, +	private List<StereotypesProvider> getStereotypesProviders(ProcessingEnvironment env) {, +		TypeHelper typeHelper = new TypeHelper(env);, +		result.add(new IndexedStereotypesProvider(typeHelper));, +		result.add(new StandardStereotypesProvider(typeHelper));, +		this.stereotypesProviders.forEach(p -> stereotypes.addAll(p.getStereotypes(element)));, +			this.metadataCollector.add(new ItemMetadata(this.typeHelper.getType(element), stereotypes));, +	private CandidateComponentsMetadata writeMetaData() {, +++ b/spring-context-indexer/src/main/java/org/springframework/context/index/CandidateComponentsIndexer.java, + * Copyright 2002-2017 the original author or authors., +import java.util.Collections;, +import javax.annotation.processing.Completion;, +import javax.lang.model.element.AnnotationMirror;, +import javax.lang.model.element.ExecutableElement;, + * @author Juergen Hoeller, +public class CandidateComponentsIndexer implements Processor {, +	private TypeHelper typeHelper;, +, +	@Override, +	public Set<String> getSupportedOptions() {, +		return Collections.emptySet();, +	}, +, +	@Override, +	public Set<String> getSupportedAnnotationTypes() {, +		return Collections.singleton("*");, +	}, +, +	@Override, +	public SourceVersion getSupportedSourceVersion() {, +		return SourceVersion.latest();, +	}, +, +		this.typeHelper = new TypeHelper(env);, +		this.metadataCollector = new MetadataCollector(env, this.metadataStore.readMetadata());, +	@Override, +	public Iterable<? extends Completion> getCompletions(, +			Element element, AnnotationMirror annotation, ExecutableElement member, String userText) {, +, +		return Collections.emptyList();, +	}, +, +, +	private List<StereotypesProvider> getStereotypesProviders(ProcessingEnvironment env) {, +		TypeHelper typeHelper = new TypeHelper(env);, +		result.add(new IndexedStereotypesProvider(typeHelper));, +		result.add(new StandardStereotypesProvider(typeHelper));, +		this.stereotypesProviders.forEach(p -> stereotypes.addAll(p.getStereotypes(element)));, +			this.metadataCollector.add(new ItemMetadata(this.typeHelper.getType(element), stereotypes));, +	private CandidateComponentsMetadata writeMetaData() {, +++ b/spring-context-indexer/src/main/java/org/springframework/context/index/CandidateComponentsMetadata.java, +/*, + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */]