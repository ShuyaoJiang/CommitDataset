[+++ b/src/reference/docbook/index.xml, +    <xi:include href="migration-3.2.xml", +                xmlns:xi="http://www.w3.org/2001/XInclude" />, +, +++ b/src/reference/docbook/index.xml, +    <xi:include href="migration-3.2.xml", +                xmlns:xi="http://www.w3.org/2001/XInclude" />, +, +++ b/src/reference/docbook/migration-3.2.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<appendix xml:id="migration-3.2", +    xmlns="http://docbook.org/ns/docbook" version="5.0", +    xmlns:xl="http://www.w3.org/1999/xlink", +    xmlns:xi="http://www.w3.org/2001/XInclude", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xsi:schemaLocation=", +        http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd, +        http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd">, +  <title>Migrating to Spring Framework 3.2</title>, +, +  <para>In this appendix we discuss discuss what users will want to know when upgrading to, +  Spring Framework 3.2. For a general overview of features, please see, +  <xref linkend="new-in-3.2"/></para>, +, +  <section xml:id="migration-3.2-new-optional-deps">, +    <title>Newly optional dependencies</title>, +    <para>Certain inter-module dependencies are now <literal>optional</literal> at the, +    Maven POM level where they were once required. For example, <literal>spring-tx</literal>, +    and its dependence on <literal>spring-context</literal>. This may result in <literal>, +    ClassNotFoundErrors</literal> or other similar problems for users that have been relying, +    on transitive dependency management to pull in affected downstream <literal>spring-*, +    </literal>. To resolve this problem, simply add the appropriate missing jars to your, +    build configuration.</para>, +  </section>, +, +  <section xml:id="migration-3.2-inline-asm">, +    <title>Inlining of spring-asm jar</title>, +    <para>In versions 3.0 and 3.1, we published a discrete <literal>spring-asm</literal>, +    containing repackaged <literal>org.objectweb.asm</literal> 3.x sources. As of Spring, +    Framework 3.2, we have upgraded to <literal>org.objectweb.asm</literal> 4.0 and done, +    away with the separate module jar, favoring inlining these classes directly within, +    <literal>spring-core</literal>. This should cause no migration issue for most users;, +    but on the off chance that you have <literal>spring-asm</literal> declared directly, +    within your project's build script, you'll want to remove it when upgrading to, +    Spring Framework 3.2.</para>, +  </section>, +, +  <section xml:id="migration-3.2-inline-cglib">, +    <title>Explicit CGLIB dependency no longer required</title>, +    <para>In prior versions, users of Spring's subclass-based AOP proxies (e.g. via, +    <literal>proxy-target-class="true"</literal>) and <literal>@Configuration</literal>, +    class support were required to declare an explicit dependency on CGLIB 2.2. As of, +    Spring Framework 3.2, we now repackage and inline the newly-released CGLIB 3.0.</para>, +    <para>This means greater convenience for users, as well as correct functionality for, +    Java 7 users who are creating subclass proxies of types that contain <literal>, +    invokedynamic</literal> bytecode instructions. Repackaging CGLIB internally ensures, +    no classpath conflicts with other third party frameworks that may depend on other, +    versions of CGLIB.</para>, +  </section>, +, +  <section xml:id="migration-3.2-osgi-users">, +    <title>For OSGi users</title>, +    <para>OSGi metadata is no longer published within individual Spring Framework, +    jar MANIFEST.MF files. Please see this, +    <link xl:href="http://www.springsource.org/springframework-ebr">announcement</link>, +    for more information about how users can get OSGi-ready versions of Spring, +    Framework 3.2 jars.</para>, +  </section>, +, +  <section xml:id="migration-3.2-compatibility-mvc-config">, +    <title>MVC Java Config and MVC Namespace</title>, +, +    <para>As explained in <xref linkend="mvc-config-content-negotiation"/>, both, +    the MVC Java config and the MVC namespace register extensions such as, +    <filename>.json</filename> and <filename>.xml</filename> if the, +    corresponding classpath dependencies are present. That means controller, +    methods may now return JSON or XML formatted content if those, +    extensions are present in the request URI,, +    even if the 'Accept' header doesn't request those media types.</para>, +, +    <para>The newly added support for matrix variables is explained in, +    <xref linkend="mvc-ann-matrix-variables"/>. To preserve backward, +    compatibility, by default, semicolon content is removed from incoming, +    request URIs and therefore <interfacename>@MatrixVariable</interfacename>, +    cannot be used without additional configuration. However, when using, +    the MVC Java config and the MVC namespace, semicolon content is left, +    in the URI so that matrix variables are automatically supported., +    The removal of semicolon content is controlled through the, +    <classname>UrlPathHelper</classname> property of, +    <classname>RequestMappingHandlerMapping</classname>.</para>, +  </section>, +, +  <section xml:id="migration-3.2-compatibility-uri-variable-values">, +    <title>Decoding of URI Variable Values</title>, +    <para>URI variable values now get decoded when, +    <code>UrlPathHelper.setUrlDecode</code> is set to <code>false</code>., +    See <link xl:href="https://jira.springsource.org/browse/SPR-9098">SPR-9098</link>.</para>, +  </section>, +, +  <section xml:id="migration-3.2-compatibility-http-patch">]