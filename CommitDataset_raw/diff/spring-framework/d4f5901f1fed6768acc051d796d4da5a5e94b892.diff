[+++ b/src/asciidoc/index.adoc, +[[groovy-bean-definition-dsl]], +to an `AnnotationConfigContextLoader`, a `GenericXmlContextLoader`, or a, +`GenericGroovyXmlContextLoader` depending either on the configuration declared for the, +test class or on the presence of default locations or default configuration classes., +Groovy support is only enabled if Groovy is on the classpath., +internally to an `AnnotationConfigWebContextLoader`, a `GenericXmlWebContextLoader`, or a, +`GenericGroovyXmlWebContextLoader` depending either on the configuration declared for the, +test class or on the presence of default locations or default configuration classes. A, +web `ContextLoader` will only be used if `@WebAppConfiguration` is present on the test, +class. Groovy support is only enabled if Groovy is on the classpath., +** `GenericGroovyXmlContextLoader`: loads a standard `ApplicationContext` from __resource, +locations__ that are either Groovy scripts or XML configuration files., +** `GenericGroovyXmlWebContextLoader`: loads a `WebApplicationContext` from __resource, +locations__ that are either Groovy scripts or XML configuration files., +, +your test class with `@ContextConfiguration` and configure the `locations` attribute with, +an array that contains the resource locations of XML configuration metadata. A plain or, +relative path -- for example `"context.xml"` -- will be treated as a classpath resource, +that is relative to the package in which the test class is defined. A path starting with, +a slash is treated as an absolute classpath location, for example, +location. Specifically, `GenericXmlContextLoader` and `GenericXmlWebContextLoader` detect, +a default location based on the name of the test class. If your class is named, +`com.example.MyTest`, `GenericXmlContextLoader` loads your application context from, +`"classpath:com/example/MyTest-context.xml"`., +	// "classpath:com/example/MyTest-context.xml", +[[testcontext-ctx-management-groovy]], +====== Context configuration with Groovy scripts, +, +To load an `ApplicationContext` for your tests using Groovy scripts that utilize the, +<<groovy-bean-definition-dsl>>, annotate your test class with `@ContextConfiguration` and, +configure the `locations` or `value` attribute with an array that contains the resource, +locations of Groovy scripts. Resource lookup semantics for Groovy scripts are the same as, +those described for <<testcontext-ctx-management-xml,XML configuration files>>., +, +, +.Enabling Groovy script support, +[TIP], +====, +Support for using Groovy scripts to load an `ApplicationContext` in the Spring, +TestContext Framework is enabled automatically if Groovy is on the classpath., +====, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@RunWith(SpringJUnit4ClassRunner.class), +	// ApplicationContext will be loaded from "/AppConfig.groovy" and, +	// "/TestConfig.groovy" in the root of the classpath, +	**@ContextConfiguration({"/AppConfig.groovy", "/TestConfig.Groovy"})**, +	public class MyTest {, +		// class body..., +	}, +----, +, +If you omit both the `locations` and `value` attributes from the `@ContextConfiguration`, +annotation, the TestContext framework will attempt to detect a default Groovy script., +Specifically, `GenericGroovyXmlContextLoader` and `GenericGroovyXmlWebContextLoader`, +detect a default location based on the name of the test class. If your class is named, +`com.example.MyTest`, the Groovy context loader will load your application context from, +`"classpath:com/example/MyTestContext.groovy"`., +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	package com.example;, +, +	@RunWith(SpringJUnit4ClassRunner.class), +	// ApplicationContext will be loaded from, +	// "classpath:com/example/MyTestContext.groovy", +	**@ContextConfiguration**, +	public class MyTest {, +		// class body..., +	}, +----, +, +.Declaring XML config and Groovy scripts simultaneously, +[TIP], +====, +Both XML configuration files and Groovy scripts can be declared simultaneously via the, +`locations` or `value` attribute of `@ContextConfiguration`. If the path to a configured, +resource location ends with `.xml` it will be loaded using an `XmlBeanDefinitionReader`;, +otherwise it will be loaded using a `GroovyBeanDefinitionReader`., +, +The following listing demonstrates how to combine both in an integration test., +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@RunWith(SpringJUnit4ClassRunner.class), +	// ApplicationContext will be loaded from, +	// "/app-config.xml" and "/TestConfig.groovy", +	@ContextConfiguration({ "/app-config.xml", "/TestConfig.groovy" }), +	public class MyTest {, +		// class body..., +	}, +----, +====, +, +]