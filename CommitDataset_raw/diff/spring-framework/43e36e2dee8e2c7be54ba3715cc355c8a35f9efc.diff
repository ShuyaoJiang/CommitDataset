[+++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +import java.text.ParseException;, +import java.text.SimpleDateFormat;, +import java.util.TimeZone;, +, +	/**, +	 * Date formats as specified in the HTTP RFC, +	 * @see <a href="https://tools.ietf.org/html/rfc7231#section-7.1.1.1">Section 7.1.1.1 of RFC 7231</a>, +	 */, +	private static final String[] DATE_FORMATS = new String[] {, +			"EEE, dd MMM yyyy HH:mm:ss zzz",, +			"EEE, dd-MMM-yy HH:mm:ss zzz",, +			"EEE MMM dd HH:mm:ss yyyy", +	};, +, +	private static final TimeZone GMT = TimeZone.getTimeZone("GMT");, +, +	 * Return the first preferred {@linkplain Locale locale} configured, +	 * Return an {@linkplain Enumeration enumeration} of the preferred, +	 * Return {@code true} if the {@link #setSecure secure} flag has been set, +	 * <p>While this method can take any {@code Object} as a parameter,, +	 * it is recommended to use the following types:, +	 * <ul>, +	 *   <li>String or any Object to be converted using {@code toString}, see {@link #getHeader} </li>, +	 *   <li>String, Number or Date for date headers, see {@link #getDateHeader}</li>, +	 *   <li>String or Number for integer headers, see {@link #getIntHeader}</li>, +	 * 	 <li>{@code String[]} and {@code Collection<String>} for multiple values, see {@link #getHeaders}</li>, +	 * </ul>, +	/**, +	 * Return the long timestamp for the date header with the given {@code name}., +	 * <p>If the internal value representation is a String, this method will try, +	 * to parse it as a date using the supported date formats:, +	 * <ul>, +	 *   <li>"EEE, dd MMM yyyy HH:mm:ss zzz"</li>, +	 *   <li>"EEE, dd-MMM-yy HH:mm:ss zzz"</li>, +	 *   <li>"EEE MMM dd HH:mm:ss yyyy"</li>, +	 * </ul>, +	 * @param name the header name, +	 * @see <a href="https://tools.ietf.org/html/rfc7231#section-7.1.1.1">Section 7.1.1.1 of RFC 7231</a>, +	 */, +		else if (value instanceof String) {, +			return parseDateHeader(name, (String) value);, +		}, +					"Value for header '" + name + "' is not a Date, Number, or String: " + value);, +	private long parseDateHeader(String name, String value) {, +		for (String dateFormat : DATE_FORMATS) {, +			SimpleDateFormat simpleDateFormat = new SimpleDateFormat(dateFormat, Locale.US);, +			simpleDateFormat.setTimeZone(GMT);, +			try {, +				return simpleDateFormat.parse(value).getTime();, +			}, +			catch (ParseException ex) {, +				// ignore, +			}, +		}, +		throw new IllegalArgumentException("Cannot parse date value '" + value + "' for '" + name + "' header");, +	}, +, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +import java.text.ParseException;, +import java.text.SimpleDateFormat;, +import java.util.TimeZone;, +, +	/**, +	 * Date formats as specified in the HTTP RFC, +	 * @see <a href="https://tools.ietf.org/html/rfc7231#section-7.1.1.1">Section 7.1.1.1 of RFC 7231</a>, +	 */, +	private static final String[] DATE_FORMATS = new String[] {, +			"EEE, dd MMM yyyy HH:mm:ss zzz",, +			"EEE, dd-MMM-yy HH:mm:ss zzz",, +			"EEE MMM dd HH:mm:ss yyyy", +	};, +, +	private static final TimeZone GMT = TimeZone.getTimeZone("GMT");, +, +	 * Return the first preferred {@linkplain Locale locale} configured, +	 * Return an {@linkplain Enumeration enumeration} of the preferred, +	 * Return {@code true} if the {@link #setSecure secure} flag has been set, +	 * <p>While this method can take any {@code Object} as a parameter,, +	 * it is recommended to use the following types:, +	 * <ul>, +	 *   <li>String or any Object to be converted using {@code toString}, see {@link #getHeader} </li>, +	 *   <li>String, Number or Date for date headers, see {@link #getDateHeader}</li>, +	 *   <li>String or Number for integer headers, see {@link #getIntHeader}</li>, +	 * 	 <li>{@code String[]} and {@code Collection<String>} for multiple values, see {@link #getHeaders}</li>, +	 * </ul>, +	/**, +	 * Return the long timestamp for the date header with the given {@code name}., +	 * <p>If the internal value representation is a String, this method will try, +	 * to parse it as a date using the supported date formats:, +	 * <ul>, +	 *   <li>"EEE, dd MMM yyyy HH:mm:ss zzz"</li>, +	 *   <li>"EEE, dd-MMM-yy HH:mm:ss zzz"</li>, +	 *   <li>"EEE MMM dd HH:mm:ss yyyy"</li>, +	 * </ul>, +	 * @param name the header name, +	 * @see <a href="https://tools.ietf.org/html/rfc7231#section-7.1.1.1">Section 7.1.1.1 of RFC 7231</a>, +	 */, +		else if (value instanceof String) {, +			return parseDateHeader(name, (String) value);]