[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/resource/AppCacheManifestTransformer.java, +		String link = toAbsolutePath(info.getLine(), exchange.getRequest());, +		Mono<String> pathMono = resolveUrlPath(link, exchange, resource, chain), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/resource/AppCacheManifestTransformer.java, +		String link = toAbsolutePath(info.getLine(), exchange.getRequest());, +		Mono<String> pathMono = resolveUrlPath(link, exchange, resource, chain), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/resource/CssLinkResourceTransformer.java, +									String link = toAbsolutePath(segmentContent, exchange.getRequest());, +									return resolveUrlPath(link, exchange, newResource, transformerChain), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/resource/AppCacheManifestTransformer.java, +		String link = toAbsolutePath(info.getLine(), exchange.getRequest());, +		Mono<String> pathMono = resolveUrlPath(link, exchange, resource, chain), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/resource/CssLinkResourceTransformer.java, +									String link = toAbsolutePath(segmentContent, exchange.getRequest());, +									return resolveUrlPath(link, exchange, newResource, transformerChain), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/resource/ResourceTransformerSupport.java, +import org.springframework.http.server.reactive.ServerHttpRequest;, +import org.springframework.util.StringUtils;, +			return (urlProvider != null ? urlProvider.getForRequestUrl(exchange, resourcePath) : Mono.empty());, +	/**, +	 * Transform the given relative request path to an absolute path,, +	 * taking the path of the given request as a point of reference., +	 * The resulting path is also cleaned from sequences like "path/.."., +	 *, +	 * @param path the relative path to transform, +	 * @param request the referer request, +	 * @return the absolute request path for the given resource path, +	 */, +	protected String toAbsolutePath(String path, ServerHttpRequest request) {, +		String requestPath = request.getURI().getPath();, +		String absolutePath = StringUtils.applyRelativePath(requestPath, path);, +		return StringUtils.cleanPath(absolutePath);, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/resource/AppCacheManifestTransformer.java, +		String link = toAbsolutePath(info.getLine(), exchange.getRequest());, +		Mono<String> pathMono = resolveUrlPath(link, exchange, resource, chain), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/resource/CssLinkResourceTransformer.java, +									String link = toAbsolutePath(segmentContent, exchange.getRequest());, +									return resolveUrlPath(link, exchange, newResource, transformerChain), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/resource/ResourceTransformerSupport.java, +import org.springframework.http.server.reactive.ServerHttpRequest;, +import org.springframework.util.StringUtils;, +			return (urlProvider != null ? urlProvider.getForRequestUrl(exchange, resourcePath) : Mono.empty());, +	/**, +	 * Transform the given relative request path to an absolute path,, +	 * taking the path of the given request as a point of reference., +	 * The resulting path is also cleaned from sequences like "path/.."., +	 *, +	 * @param path the relative path to transform, +	 * @param request the referer request, +	 * @return the absolute request path for the given resource path, +	 */, +	protected String toAbsolutePath(String path, ServerHttpRequest request) {, +		String requestPath = request.getURI().getPath();, +		String absolutePath = StringUtils.applyRelativePath(requestPath, path);, +		return StringUtils.cleanPath(absolutePath);, +	}, +, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/resource/AppCacheManifestTransformerTests.java, +		ClassPathResource allowedLocation = new ClassPathResource("test/", getClass());, +		ResourceWebHandler resourceHandler = new ResourceWebHandler();, +		ResourceUrlProvider resourceUrlProvider = new ResourceUrlProvider();, +		resourceUrlProvider.setHandlerMap(Collections.singletonMap("/static/**", resourceHandler));, +		VersionResourceResolver versionResolver = new VersionResourceResolver();, +		versionResolver.setStrategyMap(Collections.singletonMap("/**", new ContentVersionStrategy()));, +		PathResourceResolver pathResolver = new PathResourceResolver();, +		pathResolver.setAllowedLocations(allowedLocation);, +		List<ResourceResolver> resolvers = Arrays.asList(versionResolver, pathResolver);, +		ResourceResolverChain resolverChain = new DefaultResourceResolverChain(resolvers);, +, +		CssLinkResourceTransformer cssLinkResourceTransformer = new CssLinkResourceTransformer();, +		cssLinkResourceTransformer.setResourceUrlProvider(resourceUrlProvider);, +		List<ResourceTransformer> transformers = Arrays.asList(cssLinkResourceTransformer);, +		this.chain = new DefaultResourceTransformerChain(resolverChain, transformers);, +		this.transformer = new AppCacheManifestTransformer();, +		this.transformer.setResourceUrlProvider(resourceUrlProvider);, +, +		resourceHandler.setResourceResolvers(resolvers);, +		resourceHandler.setResourceTransformers(transformers);, +		resourceHandler.setLocations(Collections.singletonList(allowedLocation));, +		initExchange(HttpMethod.GET, "/static/foobar.file");, +		this.chain = mock(ResourceTransformerChain.class);, +		initExchange(HttpMethod.GET, "/static/error.appcache");, +		this.chain = mock(ResourceTransformerChain.class);, +		initExchange(HttpMethod.GET, "/static/test.appcache");, +				Matchers.containsString("/static/foo-e36d2e05253c6c7085a91522ce43a0b4.css"));, +				Matchers.containsString("/static/bar-11e16cf79faee7ac698c805cf28248d2.css"));, +				Matchers.containsString("/static/js/bar-bd508c62235b832d960298ca6c0b7645.js"));, +	private void initExchange(HttpMethod method, String url) {, +		MockServerHttpRequest request = new MockServerHttpRequest(method, url);, +		ServerHttpResponse response = new MockServerHttpResponse();, +		WebSessionManager manager = new DefaultWebSessionManager();, +		this.exchange = new DefaultServerWebExchange(request, response, manager);, +	}, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/resource/AppCacheManifestTransformer.java, +		String link = toAbsolutePath(info.getLine(), exchange.getRequest());, +		Mono<String> pathMono = resolveUrlPath(link, exchange, resource, chain), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/resource/CssLinkResourceTransformer.java, +									String link = toAbsolutePath(segmentContent, exchange.getRequest());]