[+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParserTests.java, +import org.springframework.core.io.Resource;, +		this.appContext = new GenericWebApplicationContext();, +		RequestMappingHandlerAdapter adapter = this.appContext.getBean(RequestMappingHandlerAdapter.class);, +		MessageCodesResolver resolver =, +				((ConfigurableWebBindingInitializer) initializer).getMessageCodesResolver();, +		RequestMappingHandlerMapping hm = this.appContext.getBean(RequestMappingHandlerMapping.class);, +		verifyMessageConverters(this.appContext.getBean(RequestMappingHandlerAdapter.class), true);, +		verifyMessageConverters(this.appContext.getBean(ExceptionHandlerExceptionResolver.class), true);, +		verifyRequestResponseBodyAdvice(this.appContext.getBean(RequestMappingHandlerAdapter.class));, +		verifyResponseBodyAdvice(this.appContext.getBean(ExceptionHandlerExceptionResolver.class));, +		verifyMessageConverters(this.appContext.getBean(RequestMappingHandlerAdapter.class), false);, +		verifyMessageConverters(this.appContext.getBean(ExceptionHandlerExceptionResolver.class), false);, +		BeanNameUrlHandlerMapping mapping = this.appContext.getBean(BeanNameUrlHandlerMapping.class);, +		XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(this.appContext);, +		Resource resource = new ClassPathResource(fileName, AnnotationDrivenBeanDefinitionParserTests.class);, +		this.appContext.refresh();, +			assertTrue("Default and custom converter expected", converters.size() > 2);, +			assertTrue("Only custom converters expected", converters.size() == 2);, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParserTests.java, +import org.springframework.core.io.Resource;, +		this.appContext = new GenericWebApplicationContext();, +		RequestMappingHandlerAdapter adapter = this.appContext.getBean(RequestMappingHandlerAdapter.class);, +		MessageCodesResolver resolver =, +				((ConfigurableWebBindingInitializer) initializer).getMessageCodesResolver();, +		RequestMappingHandlerMapping hm = this.appContext.getBean(RequestMappingHandlerMapping.class);, +		verifyMessageConverters(this.appContext.getBean(RequestMappingHandlerAdapter.class), true);, +		verifyMessageConverters(this.appContext.getBean(ExceptionHandlerExceptionResolver.class), true);, +		verifyRequestResponseBodyAdvice(this.appContext.getBean(RequestMappingHandlerAdapter.class));, +		verifyResponseBodyAdvice(this.appContext.getBean(ExceptionHandlerExceptionResolver.class));, +		verifyMessageConverters(this.appContext.getBean(RequestMappingHandlerAdapter.class), false);, +		verifyMessageConverters(this.appContext.getBean(ExceptionHandlerExceptionResolver.class), false);, +		BeanNameUrlHandlerMapping mapping = this.appContext.getBean(BeanNameUrlHandlerMapping.class);, +		XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(this.appContext);, +		Resource resource = new ClassPathResource(fileName, AnnotationDrivenBeanDefinitionParserTests.class);, +		this.appContext.refresh();, +			assertTrue("Default and custom converter expected", converters.size() > 2);, +			assertTrue("Only custom converters expected", converters.size() == 2);, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java, +import static com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;, +import static com.fasterxml.jackson.databind.MapperFeature.DEFAULT_VIEW_INCLUSION;, +		assertNotNull(chain);, +		converters.stream(), +				.filter(converter -> converter instanceof AbstractJackson2HttpMessageConverter), +				.forEach(converter -> {, +					ObjectMapper mapper = ((AbstractJackson2HttpMessageConverter) converter).getObjectMapper();, +					assertFalse(mapper.getDeserializationConfig().isEnabled(DEFAULT_VIEW_INCLUSION));, +					assertFalse(mapper.getSerializationConfig().isEnabled(DEFAULT_VIEW_INCLUSION));, +					assertFalse(mapper.getDeserializationConfig().isEnabled(FAIL_ON_UNKNOWN_PROPERTIES));, +						assertEquals(XmlMapper.class, mapper.getClass());, +				});, +		ConfigurableWebBindingInitializer initializer =, +				(ConfigurableWebBindingInitializer) adapter.getWebBindingInitializer();, +	@Configuration @SuppressWarnings("unused"), +	static class WebConfig {, +	@Configuration @SuppressWarnings("unused"), +	static class ViewResolverConfig {, +	static class CustomViewResolverOrderConfig extends WebMvcConfigurerAdapter {, +		public void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {, +			resolvers.add(new TestArgumentResolver());, +		public void addReturnValueHandlers(List<HandlerMethodReturnValueHandler> handlers) {, +			handlers.add(new TestReturnValueHandler());, +	@Controller @SuppressWarnings("unused"), +	private static class TestController {, +	private static class ScopedController {, +	static class ScopedProxyController {, +	private static class UserAlreadyExistsException extends RuntimeException {]