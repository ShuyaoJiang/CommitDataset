[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.java, +		location = environment.resolveRequiredPlaceholders(location);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.java, +		location = environment.resolveRequiredPlaceholders(location);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/support/ResourceEditorRegistrar.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.core.env.PropertyResolver;, + * @author Chris Beams, +	private final PropertyResolver propertyResolver;, +	public ResourceEditorRegistrar(ResourceLoader resourceLoader, PropertyResolver propertyResolver) {, +		this.propertyResolver = propertyResolver;, +		ResourceEditor baseEditor = new ResourceEditor(this.resourceLoader, this.propertyResolver);, +					new ResourceArrayPropertyEditor((ResourcePatternResolver) this.resourceLoader, this.propertyResolver));, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.java, +		location = environment.resolveRequiredPlaceholders(location);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/support/ResourceEditorRegistrar.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.core.env.PropertyResolver;, + * @author Chris Beams, +	private final PropertyResolver propertyResolver;, +	public ResourceEditorRegistrar(ResourceLoader resourceLoader, PropertyResolver propertyResolver) {, +		this.propertyResolver = propertyResolver;, +		ResourceEditor baseEditor = new ResourceEditor(this.resourceLoader, this.propertyResolver);, +					new ResourceArrayPropertyEditor((ResourcePatternResolver) this.resourceLoader, this.propertyResolver));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +		if (ProfileHelper.isProfileAnnotationPresent(metadata)) {, +			if (!this.environment.acceptsProfiles(ProfileHelper.getCandidateProfiles(metadata))) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.java, +		location = environment.resolveRequiredPlaceholders(location);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/support/ResourceEditorRegistrar.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.core.env.PropertyResolver;, + * @author Chris Beams, +	private final PropertyResolver propertyResolver;, +	public ResourceEditorRegistrar(ResourceLoader resourceLoader, PropertyResolver propertyResolver) {, +		this.propertyResolver = propertyResolver;, +		ResourceEditor baseEditor = new ResourceEditor(this.resourceLoader, this.propertyResolver);, +					new ResourceArrayPropertyEditor((ResourcePatternResolver) this.resourceLoader, this.propertyResolver));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +		if (ProfileHelper.isProfileAnnotationPresent(metadata)) {, +			if (!this.environment.acceptsProfiles(ProfileHelper.getCandidateProfiles(metadata))) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.java, +		location = environment.resolveRequiredPlaceholders(location);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/support/ResourceEditorRegistrar.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.core.env.PropertyResolver;, + * @author Chris Beams, +	private final PropertyResolver propertyResolver;, +	public ResourceEditorRegistrar(ResourceLoader resourceLoader, PropertyResolver propertyResolver) {, +		this.propertyResolver = propertyResolver;, +		ResourceEditor baseEditor = new ResourceEditor(this.resourceLoader, this.propertyResolver);, +					new ResourceArrayPropertyEditor((ResourcePatternResolver) this.resourceLoader, this.propertyResolver));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +		if (ProfileHelper.isProfileAnnotationPresent(metadata)) {, +			if (!this.environment.acceptsProfiles(ProfileHelper.getCandidateProfiles(metadata))) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, +		return ClassUtils.convertClassNameToResourcePath(environment.resolveRequiredPlaceholders(basePackage));, +				if (!ProfileHelper.isProfileAnnotationPresent(metadata)) {, +				return this.environment.acceptsProfiles(ProfileHelper.getCandidateProfiles(metadata));, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.java, +		location = environment.resolveRequiredPlaceholders(location);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/support/ResourceEditorRegistrar.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.core.env.PropertyResolver;, + * @author Chris Beams, +	private final PropertyResolver propertyResolver;, +	public ResourceEditorRegistrar(ResourceLoader resourceLoader, PropertyResolver propertyResolver) {, +		this.propertyResolver = propertyResolver;, +		ResourceEditor baseEditor = new ResourceEditor(this.resourceLoader, this.propertyResolver);, +					new ResourceArrayPropertyEditor((ResourcePatternResolver) this.resourceLoader, this.propertyResolver));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +		if (ProfileHelper.isProfileAnnotationPresent(metadata)) {, +			if (!this.environment.acceptsProfiles(ProfileHelper.getCandidateProfiles(metadata))) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, +		return ClassUtils.convertClassNameToResourcePath(environment.resolveRequiredPlaceholders(basePackage));, +				if (!ProfileHelper.isProfileAnnotationPresent(metadata)) {, +				return this.environment.acceptsProfiles(ProfileHelper.getCandidateProfiles(metadata));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +		if (this.environment != null && ProfileHelper.isProfileAnnotationPresent(metadata)) {, +			if (!this.environment.acceptsProfiles(ProfileHelper.getCandidateProfiles(metadata))) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.java, +		location = environment.resolveRequiredPlaceholders(location);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/support/ResourceEditorRegistrar.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.core.env.PropertyResolver;, + * @author Chris Beams, +	private final PropertyResolver propertyResolver;, +	public ResourceEditorRegistrar(ResourceLoader resourceLoader, PropertyResolver propertyResolver) {, +		this.propertyResolver = propertyResolver;, +		ResourceEditor baseEditor = new ResourceEditor(this.resourceLoader, this.propertyResolver);, +					new ResourceArrayPropertyEditor((ResourcePatternResolver) this.resourceLoader, this.propertyResolver));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +		if (ProfileHelper.isProfileAnnotationPresent(metadata)) {, +			if (!this.environment.acceptsProfiles(ProfileHelper.getCandidateProfiles(metadata))) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, +		return ClassUtils.convertClassNameToResourcePath(environment.resolveRequiredPlaceholders(basePackage));]