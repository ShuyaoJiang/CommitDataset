[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java, + * Copyright 2002-2018 the original author or authors., +		methods.sort(METHOD_COMPARATOR);, +	 * @return the Advisor instance, or {@code null} if not an Advisor, +, +					(method, args, target) -> aif.getAspectInstance());, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java, + * Copyright 2002-2018 the original author or authors., +		methods.sort(METHOD_COMPARATOR);, +	 * @return the Advisor instance, or {@code null} if not an Advisor, +, +					(method, args, target) -> aif.getAspectInstance());, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +				((List<?>) result).sort(adaptDependencyComparator(matchingBeans));, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java, + * Copyright 2002-2018 the original author or authors., +		methods.sort(METHOD_COMPARATOR);, +	 * @return the Advisor instance, or {@code null} if not an Advisor, +, +					(method, args, target) -> aif.getAspectInstance());, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +				((List<?>) result).sort(adaptDependencyComparator(matchingBeans));, +++ b/spring-beans/src/main/java/org/springframework/beans/support/PropertyComparator.java, + * Copyright 2002-2018 the original author or authors., +			source.sort(new PropertyComparator<>(sortDefinition));, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java, + * Copyright 2002-2018 the original author or authors., +		methods.sort(METHOD_COMPARATOR);, +	 * @return the Advisor instance, or {@code null} if not an Advisor, +, +					(method, args, target) -> aif.getAspectInstance());, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +				((List<?>) result).sort(adaptDependencyComparator(matchingBeans));, +++ b/spring-beans/src/main/java/org/springframework/beans/support/PropertyComparator.java, + * Copyright 2002-2018 the original author or authors., +			source.sort(new PropertyComparator<>(sortDefinition));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +		deferredImports.sort(DEFERRED_IMPORT_COMPARATOR);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java, + * Copyright 2002-2018 the original author or authors., +		methods.sort(METHOD_COMPARATOR);, +	 * @return the Advisor instance, or {@code null} if not an Advisor, +, +					(method, args, target) -> aif.getAspectInstance());, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +				((List<?>) result).sort(adaptDependencyComparator(matchingBeans));, +++ b/spring-beans/src/main/java/org/springframework/beans/support/PropertyComparator.java, + * Copyright 2002-2018 the original author or authors., +			source.sort(new PropertyComparator<>(sortDefinition));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +		deferredImports.sort(DEFERRED_IMPORT_COMPARATOR);, +++ b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java, +			this.members.sort(Collections.reverseOrder());, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java, + * Copyright 2002-2018 the original author or authors., +		methods.sort(METHOD_COMPARATOR);, +	 * @return the Advisor instance, or {@code null} if not an Advisor, +, +					(method, args, target) -> aif.getAspectInstance());, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +				((List<?>) result).sort(adaptDependencyComparator(matchingBeans));, +++ b/spring-beans/src/main/java/org/springframework/beans/support/PropertyComparator.java, + * Copyright 2002-2018 the original author or authors., +			source.sort(new PropertyComparator<>(sortDefinition));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +		deferredImports.sort(DEFERRED_IMPORT_COMPARATOR);, +++ b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java, +			this.members.sort(Collections.reverseOrder());, +++ b/spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java, + * Copyright 2002-2018 the original author or authors., +		postProcessors.sort(comparatorToUse);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java, + * Copyright 2002-2018 the original author or authors., +		methods.sort(METHOD_COMPARATOR);, +	 * @return the Advisor instance, or {@code null} if not an Advisor, +, +					(method, args, target) -> aif.getAspectInstance());, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +				((List<?>) result).sort(adaptDependencyComparator(matchingBeans));, +++ b/spring-beans/src/main/java/org/springframework/beans/support/PropertyComparator.java, + * Copyright 2002-2018 the original author or authors., +			source.sort(new PropertyComparator<>(sortDefinition));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +		deferredImports.sort(DEFERRED_IMPORT_COMPARATOR);, +++ b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java, +			this.members.sort(Collections.reverseOrder());, +++ b/spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java, + * Copyright 2002-2018 the original author or authors., +		postProcessors.sort(comparatorToUse);, +++ b/spring-core/src/main/java/org/springframework/core/ExceptionDepthComparator.java, + * Copyright 2002-2018 the original author or authors., +		List<Class<? extends Throwable>> handledExceptions = new ArrayList<>(exceptionTypes);, +		handledExceptions.sort(new ExceptionDepthComparator(targetException));, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java, + * Copyright 2002-2018 the original author or authors., +		methods.sort(METHOD_COMPARATOR);, +	 * @return the Advisor instance, or {@code null} if not an Advisor, +, +					(method, args, target) -> aif.getAspectInstance());, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java]