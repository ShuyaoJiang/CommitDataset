[+++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +		AnnotatedGenericBeanDefinition abd = new AnnotatedGenericBeanDefinition(annotatedClass);, +		if (conditionEvaluator.shouldSkip(abd.getMetadata())) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +		AnnotatedGenericBeanDefinition abd = new AnnotatedGenericBeanDefinition(annotatedClass);, +		if (conditionEvaluator.shouldSkip(abd.getMetadata())) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, +				return isConditionMatch(metadataReader);, +	/**, +	 * Determine whether the given class is a candidate component based on any, +	 * {@code @Conditional} annotations., +	 * @param metadataReader the ASM ClassReader for the class, +	 * @return whether the class qualifies as a candidate component, +	 */, +	private boolean isConditionMatch(MetadataReader metadataReader) {, +		return !conditionEvaluator.shouldSkip(metadataReader.getAnnotationMetadata());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +		AnnotatedGenericBeanDefinition abd = new AnnotatedGenericBeanDefinition(annotatedClass);, +		if (conditionEvaluator.shouldSkip(abd.getMetadata())) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, +				return isConditionMatch(metadataReader);, +	/**, +	 * Determine whether the given class is a candidate component based on any, +	 * {@code @Conditional} annotations., +	 * @param metadataReader the ASM ClassReader for the class, +	 * @return whether the class qualifies as a candidate component, +	 */, +	private boolean isConditionMatch(MetadataReader metadataReader) {, +		return !conditionEvaluator.shouldSkip(metadataReader.getAnnotationMetadata());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConditionEvaluator.java, +, +		if (metadata == null || !metadata.isAnnotated(Conditional.class.getName())) {, +			return false;, +		}, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +		AnnotatedGenericBeanDefinition abd = new AnnotatedGenericBeanDefinition(annotatedClass);, +		if (conditionEvaluator.shouldSkip(abd.getMetadata())) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, +				return isConditionMatch(metadataReader);, +	/**, +	 * Determine whether the given class is a candidate component based on any, +	 * {@code @Conditional} annotations., +	 * @param metadataReader the ASM ClassReader for the class, +	 * @return whether the class qualifies as a candidate component, +	 */, +	private boolean isConditionMatch(MetadataReader metadataReader) {, +		return !conditionEvaluator.shouldSkip(metadataReader.getAnnotationMetadata());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConditionEvaluator.java, +, +		if (metadata == null || !metadata.isAnnotated(Conditional.class.getName())) {, +			return false;, +		}, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +		AnnotatedGenericBeanDefinition abd = new AnnotatedGenericBeanDefinition(annotatedClass);, +		if (conditionEvaluator.shouldSkip(abd.getMetadata())) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, +				return isConditionMatch(metadataReader);, +	/**, +	 * Determine whether the given class is a candidate component based on any, +	 * {@code @Conditional} annotations., +	 * @param metadataReader the ASM ClassReader for the class, +	 * @return whether the class qualifies as a candidate component, +	 */, +	private boolean isConditionMatch(MetadataReader metadataReader) {, +		return !conditionEvaluator.shouldSkip(metadataReader.getAnnotationMetadata());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConditionEvaluator.java, +, +		if (metadata == null || !metadata.isAnnotated(Conditional.class.getName())) {, +			return false;, +		}, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +					skip = conditionEvaluator.shouldSkip(configClass.getMetadata(),, +							ConfigurationPhase.REGISTER_BEAN);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +		AnnotatedGenericBeanDefinition abd = new AnnotatedGenericBeanDefinition(annotatedClass);, +		if (conditionEvaluator.shouldSkip(abd.getMetadata())) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, +				return isConditionMatch(metadataReader);, +	/**, +	 * Determine whether the given class is a candidate component based on any, +	 * {@code @Conditional} annotations., +	 * @param metadataReader the ASM ClassReader for the class, +	 * @return whether the class qualifies as a candidate component, +	 */, +	private boolean isConditionMatch(MetadataReader metadataReader) {, +		return !conditionEvaluator.shouldSkip(metadataReader.getAnnotationMetadata());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConditionEvaluator.java, +, +		if (metadata == null || !metadata.isAnnotated(Conditional.class.getName())) {, +			return false;, +		}, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +					skip = conditionEvaluator.shouldSkip(configClass.getMetadata(),]