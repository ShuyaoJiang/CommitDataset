[+++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractDecoder.java, + * Copyright 2002-2018 the original author or authors., +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	protected final Log logger = LogFactory.getLog(getClass());, +, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractDecoder.java, + * Copyright 2002-2018 the original author or authors., +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	protected final Log logger = LogFactory.getLog(getClass());, +, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractEncoder.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Map;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	protected final Log logger = LogFactory.getLog(getClass());, +, +	/**, +	 * Helper method to obtain the logger to use from the Map of hints, or fall, +	 * back on the default logger. This may be used for example to override, +	 * logging, e.g. for a multipart request where the full map of part values, +	 * has already been logged., +	 * @param hints the hints passed to the encode method, +	 * @return the logger to use, +	 * @since 5.1, +	 */, +	protected Log getLogger(@Nullable Map<String, Object> hints) {, +		return hints != null ? ((Log) hints.getOrDefault(Log.class.getName(), logger)) : logger;, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractDecoder.java, + * Copyright 2002-2018 the original author or authors., +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	protected final Log logger = LogFactory.getLog(getClass());, +, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractEncoder.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Map;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	protected final Log logger = LogFactory.getLog(getClass());, +, +	/**, +	 * Helper method to obtain the logger to use from the Map of hints, or fall, +	 * back on the default logger. This may be used for example to override, +	 * logging, e.g. for a multipart request where the full map of part values, +	 * has already been logged., +	 * @param hints the hints passed to the encode method, +	 * @return the logger to use, +	 * @since 5.1, +	 */, +	protected Log getLogger(@Nullable Map<String, Object> hints) {, +		return hints != null ? ((Log) hints.getOrDefault(Log.class.getName(), logger)) : logger;, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteArrayDecoder.java, + * Copyright 2002-2018 the original author or authors., +		if (logger.isDebugEnabled()) {, +			logger.debug("Read " + result.length + " bytes");, +		}, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractDecoder.java, + * Copyright 2002-2018 the original author or authors., +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	protected final Log logger = LogFactory.getLog(getClass());, +, +++ b/spring-core/src/main/java/org/springframework/core/codec/AbstractEncoder.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Map;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	protected final Log logger = LogFactory.getLog(getClass());, +, +	/**, +	 * Helper method to obtain the logger to use from the Map of hints, or fall, +	 * back on the default logger. This may be used for example to override, +	 * logging, e.g. for a multipart request where the full map of part values, +	 * has already been logged., +	 * @param hints the hints passed to the encode method, +	 * @return the logger to use, +	 * @since 5.1, +	 */, +	protected Log getLogger(@Nullable Map<String, Object> hints) {, +		return hints != null ? ((Log) hints.getOrDefault(Log.class.getName(), logger)) : logger;, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteArrayDecoder.java, + * Copyright 2002-2018 the original author or authors., +		if (logger.isDebugEnabled()) {, +			logger.debug("Read " + result.length + " bytes");, +		}, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteArrayEncoder.java, +import org.apache.commons.logging.Log;, +		return Flux.from(inputStream).map(bytes -> {]