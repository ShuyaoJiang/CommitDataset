[+++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java, +import javax.validation.ValidationException;, + * <p><b>As of Spring 5.0, this class requires Bean Validation 1.1+, with special support, + * This class is also runtime-compatible with Bean Validation 2.0 and Hibernate Validator 6.0,, + * with one special note: If you'd like to call BV 2.0's {@code getClockProvider()} method,, + * obtain the native {@code ValidatorFactory} through {@code #unwrap(ValidatorFactory.class)}, + * and call the {@code getClockProvider()} method on the returned native reference there., +	// Bean Validation 2.0: currently not implemented here since it would imply, +	// a hard dependency on the new javax.validation.ClockProvider interface., +	// To be resolved once Spring Framework requires Bean Validation 2.0+., +	// Obtain the native ValidatorFactory through unwrap(ValidatorFactory.class), +	// instead which will fully support a getClockProvider() call as well., +	/*, +	@Override, +	public javax.validation.ClockProvider getClockProvider() {, +		Assert.notNull(this.validatorFactory, "No target ValidatorFactory set");, +		return this.validatorFactory.getClockProvider();, +	}, +	*/, +, +	@Override, +	public <T> T unwrap(Class<T> type) {, +		if (type == null || !ValidatorFactory.class.isAssignableFrom(type)) {, +			try {, +				return super.unwrap(type);, +			}, +			catch (ValidationException ex) {, +				// ignore - we'll try ValidatorFactory unwrapping next, +			}, +		}, +		return this.validatorFactory.unwrap(type);, +	}, +, +++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java, +import javax.validation.ValidationException;, + * <p><b>As of Spring 5.0, this class requires Bean Validation 1.1+, with special support, + * This class is also runtime-compatible with Bean Validation 2.0 and Hibernate Validator 6.0,, + * with one special note: If you'd like to call BV 2.0's {@code getClockProvider()} method,, + * obtain the native {@code ValidatorFactory} through {@code #unwrap(ValidatorFactory.class)}, + * and call the {@code getClockProvider()} method on the returned native reference there., +	// Bean Validation 2.0: currently not implemented here since it would imply, +	// a hard dependency on the new javax.validation.ClockProvider interface., +	// To be resolved once Spring Framework requires Bean Validation 2.0+., +	// Obtain the native ValidatorFactory through unwrap(ValidatorFactory.class), +	// instead which will fully support a getClockProvider() call as well., +	/*, +	@Override, +	public javax.validation.ClockProvider getClockProvider() {, +		Assert.notNull(this.validatorFactory, "No target ValidatorFactory set");, +		return this.validatorFactory.getClockProvider();, +	}, +	*/, +, +	@Override, +	public <T> T unwrap(Class<T> type) {, +		if (type == null || !ValidatorFactory.class.isAssignableFrom(type)) {, +			try {, +				return super.unwrap(type);, +			}, +			catch (ValidationException ex) {, +				// ignore - we'll try ValidatorFactory unwrapping next, +			}, +		}, +		return this.validatorFactory.unwrap(type);, +	}, +, +++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/SpringValidatorAdapter.java, + * Adapter that takes a JSR-303 {@code javax.validator.Validator} and, + * exposes it as a Spring {@link org.springframework.validation.Validator}, + * <p>As of Spring Framework 5.0, this adapter is fully compatible with, + * Bean Validation 1.1 as well as 2.0., + *, +++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java, +import javax.validation.ValidationException;, + * <p><b>As of Spring 5.0, this class requires Bean Validation 1.1+, with special support, + * This class is also runtime-compatible with Bean Validation 2.0 and Hibernate Validator 6.0,, + * with one special note: If you'd like to call BV 2.0's {@code getClockProvider()} method,, + * obtain the native {@code ValidatorFactory} through {@code #unwrap(ValidatorFactory.class)}, + * and call the {@code getClockProvider()} method on the returned native reference there., +	// Bean Validation 2.0: currently not implemented here since it would imply, +	// a hard dependency on the new javax.validation.ClockProvider interface., +	// To be resolved once Spring Framework requires Bean Validation 2.0+., +	// Obtain the native ValidatorFactory through unwrap(ValidatorFactory.class), +	// instead which will fully support a getClockProvider() call as well., +	/*, +	@Override, +	public javax.validation.ClockProvider getClockProvider() {, +		Assert.notNull(this.validatorFactory, "No target ValidatorFactory set");, +		return this.validatorFactory.getClockProvider();, +	}, +	*/, +, +	@Override, +	public <T> T unwrap(Class<T> type) {, +		if (type == null || !ValidatorFactory.class.isAssignableFrom(type)) {, +			try {, +				return super.unwrap(type);, +			}, +			catch (ValidationException ex) {, +				// ignore - we'll try ValidatorFactory unwrapping next]