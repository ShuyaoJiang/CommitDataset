[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, +import org.springframework.core.ParameterizedTypeReference;, +	 * Extract the body to a {@code Mono}., +	 * @param typeReference a type reference describing the expected response body type, +	 * @param <T> the element type, +	 * @return a mono containing the body of the given type {@code T}, +	 */, +	<T> Mono<T> bodyToMono(ParameterizedTypeReference<T> typeReference);, +, +	/**, +	 * Extract the body to a {@code Flux}., +	 * @param typeReference a type reference describing the expected response body type, +	 * @param <T> the element type, +	 * @return a flux containing the body of the given type {@code T}, +	 */, +	<T> Flux<T> bodyToFlux(ParameterizedTypeReference<T> typeReference);, +, +	/**, +	 * Return this response as a delayed {@code ResponseEntity}., +	 * @param typeReference a type reference describing the expected response body type, +	 * @param <T> response body type, +	 * @return {@code Mono} with the {@code ResponseEntity}, +	 */, +	<T> Mono<ResponseEntity<T>> toEntity(ParameterizedTypeReference<T> typeReference);, +, +	/**, +	/**, +	 * Return this response as a delayed list of {@code ResponseEntity}s., +	 * @param typeReference a type reference describing the expected response body type, +	 * @param <T> the type of elements in the list, +	 * @return {@code Mono} with the list of {@code ResponseEntity}s, +	 */, +	<T> Mono<ResponseEntity<List<T>>> toEntityList(ParameterizedTypeReference<T> typeReference);, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, +import org.springframework.core.ParameterizedTypeReference;, +	 * Extract the body to a {@code Mono}., +	 * @param typeReference a type reference describing the expected response body type, +	 * @param <T> the element type, +	 * @return a mono containing the body of the given type {@code T}, +	 */, +	<T> Mono<T> bodyToMono(ParameterizedTypeReference<T> typeReference);, +, +	/**, +	 * Extract the body to a {@code Flux}., +	 * @param typeReference a type reference describing the expected response body type, +	 * @param <T> the element type, +	 * @return a flux containing the body of the given type {@code T}, +	 */, +	<T> Flux<T> bodyToFlux(ParameterizedTypeReference<T> typeReference);, +, +	/**, +	 * Return this response as a delayed {@code ResponseEntity}., +	 * @param typeReference a type reference describing the expected response body type, +	 * @param <T> response body type, +	 * @return {@code Mono} with the {@code ResponseEntity}, +	 */, +	<T> Mono<ResponseEntity<T>> toEntity(ParameterizedTypeReference<T> typeReference);, +, +	/**, +	/**, +	 * Return this response as a delayed list of {@code ResponseEntity}s., +	 * @param typeReference a type reference describing the expected response body type, +	 * @param <T> the type of elements in the list, +	 * @return {@code Mono} with the list of {@code ResponseEntity}s, +	 */, +	<T> Mono<ResponseEntity<List<T>>> toEntityList(ParameterizedTypeReference<T> typeReference);, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientResponse.java, +import org.springframework.core.ParameterizedTypeReference;, +	public <T> Mono<T> bodyToMono(ParameterizedTypeReference<T> typeReference) {, +		return body(BodyExtractors.toMono(typeReference));, +	}, +, +	@Override, +	public <T> Flux<T> bodyToFlux(ParameterizedTypeReference<T> typeReference) {, +		return body(BodyExtractors.toFlux(typeReference));, +	}, +, +	@Override, +		return toEntityInternal(bodyToMono(bodyType));, +	}, +, +	@Override, +	public <T> Mono<ResponseEntity<T>> toEntity(ParameterizedTypeReference<T> typeReference) {, +		return toEntityInternal(bodyToMono(typeReference));, +	}, +, +	private <T> Mono<ResponseEntity<T>> toEntityInternal(Mono<T> bodyMono) {, +		return bodyMono, +		return toEntityListInternal(bodyToFlux(responseType));, +	}, +, +	@Override, +	public <T> Mono<ResponseEntity<List<T>>> toEntityList(, +			ParameterizedTypeReference<T> typeReference) {, +		return toEntityListInternal(bodyToFlux(typeReference));, +	}, +, +	private <T> Mono<ResponseEntity<List<T>>> toEntityListInternal(Flux<T> bodyFlux) {]