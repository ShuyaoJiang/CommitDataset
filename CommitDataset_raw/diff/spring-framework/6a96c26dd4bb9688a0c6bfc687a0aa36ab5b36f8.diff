[+++ b/spring-web/src/main/java/org/springframework/http/HttpRange.java, + * Represents an HTTP (byte) range for use with the HTTP {@code "Range"} header., +	 * Return the start of the range given the total length of a representation., +	 * @param length the length of the representation, +	 * @return the start of this range for the representation, +	 */, +	public abstract long getRangeStart(long length);, +, +	/**, +	 * Return the end of the range (inclusive) given the total length of a representation., +	 * @param length the length of the representation, +	 * @return the end of the range for the representation, +	 */, +	public abstract long getRangeEnd(long length);, +, +, +	/**, +	 * Create an {@code HttpRange} from the given position to the end., +	 * @return a byte range that ranges from {@code firstPos} till the end, +	 * Create a {@code HttpRange} from the given fist to last position., +	 * @return a byte range that ranges from {@code firstPos} till {@code lastPos}, +	 * Create an {@code HttpRange} that ranges over the last given number of bytes., +	 * @param suffixLength the number of bytes for the range, +			throw new IllegalArgumentException("Range '" + ranges + "' does not start with 'bytes='");, +		Assert.notNull(range);, +		if (dashIdx > 0) {, +				Long lastPos = Long.parseLong(range.substring(dashIdx + 1, range.length()));, +				return new ByteRange(firstPos, lastPos);, +				return new ByteRange(firstPos, null);, +		else if (dashIdx == 0) {, +		else {, +			throw new IllegalArgumentException("Range '" + range + "' does not contain \"-\"");, +		}, +		Assert.notNull(ranges);, +, +, +			assertPositions(firstPos, lastPos);, +		private void assertPositions(long firstBytePos, Long lastBytePos) {, +			if (firstBytePos < 0) {, +				throw new IllegalArgumentException("Invalid firstPos=" + firstBytePos);, +			}, +			if (lastBytePos != null && lastBytePos < firstBytePos) {, +				throw new IllegalArgumentException("firstPost= " + firstBytePos +, +						" should be less then or equal to lastBytePosition=" + lastBytePos);, +			}, +		}, +, +			return this.firstPos == other.firstPos && ObjectUtils.nullSafeEquals(this.lastPos, other.lastPos);, +, +			if (suffixLength < 0) {, +				throw new IllegalArgumentException("Invalid suffixLength=" + suffixLength);, +			}, +		void appendTo(StringBuilder builder) {, +			builder.append('-');, +			builder.append(this.suffixLength);, +		}, +, +		@Override, +++ b/spring-web/src/main/java/org/springframework/http/HttpRange.java, + * Represents an HTTP (byte) range for use with the HTTP {@code "Range"} header., +	 * Return the start of the range given the total length of a representation., +	 * @param length the length of the representation, +	 * @return the start of this range for the representation, +	 */, +	public abstract long getRangeStart(long length);, +, +	/**, +	 * Return the end of the range (inclusive) given the total length of a representation., +	 * @param length the length of the representation, +	 * @return the end of the range for the representation, +	 */, +	public abstract long getRangeEnd(long length);, +, +, +	/**, +	 * Create an {@code HttpRange} from the given position to the end., +	 * @return a byte range that ranges from {@code firstPos} till the end, +	 * Create a {@code HttpRange} from the given fist to last position., +	 * @return a byte range that ranges from {@code firstPos} till {@code lastPos}, +	 * Create an {@code HttpRange} that ranges over the last given number of bytes., +	 * @param suffixLength the number of bytes for the range, +			throw new IllegalArgumentException("Range '" + ranges + "' does not start with 'bytes='");, +		Assert.notNull(range);, +		if (dashIdx > 0) {, +				Long lastPos = Long.parseLong(range.substring(dashIdx + 1, range.length()));, +				return new ByteRange(firstPos, lastPos);, +				return new ByteRange(firstPos, null);, +		else if (dashIdx == 0) {, +		else {, +			throw new IllegalArgumentException("Range '" + range + "' does not contain \"-\"");, +		}, +		Assert.notNull(ranges);, +, +, +			assertPositions(firstPos, lastPos);, +		private void assertPositions(long firstBytePos, Long lastBytePos) {, +			if (firstBytePos < 0) {, +				throw new IllegalArgumentException("Invalid firstPos=" + firstBytePos);, +			}, +			if (lastBytePos != null && lastBytePos < firstBytePos) {]