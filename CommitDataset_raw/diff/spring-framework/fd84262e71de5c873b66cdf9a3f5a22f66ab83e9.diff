[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpPlus.java, + * Copyright 2002-2015 the original author or authors., +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpPlus.java, + * Copyright 2002-2015 the original author or authors., +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelCompilationCoverageTests.java, +, +		}, +		catch (SpelEvaluationException see) {, +		}, +		catch (SpelEvaluationException see) {, +		}, +		catch (SpelEvaluationException see) {, +		}, +		catch (SpelEvaluationException see) {, +		}, +		catch (SpelEvaluationException see) {, +, +	// helper methods, +, +	private SpelNodeImpl getAst() {, +		SpelExpression spelExpression = (SpelExpression)expression;, +		SpelNode ast = spelExpression.getAST();, +		return (SpelNodeImpl)ast;, +	}, +, +	private String stringify(Object object) {, +		StringBuilder s = new StringBuilder();, +		if (object instanceof List) {, +			List<?> ls = (List<?>)object;, +			for (Object l: ls) {, +				s.append(l);, +				s.append(" ");, +			}, +		}, +		else if (object instanceof Object[]) {, +			Object[] os = (Object[])object;, +			for (Object o: os) {, +				s.append(o);, +				s.append(" ");, +			}, +		}, +		else if (object instanceof int[]) {, +			int[] is = (int[])object;, +			for (int i: is) {, +				s.append(i);, +				s.append(" ");, +			}, +		}, +		else {, +			s.append(object.toString());, +		}, +		return s.toString().trim();, +	}, +, +	private void assertCanCompile(Expression expression) {, +		assertTrue(SpelCompiler.compile(expression));, +	}, +, +	private void assertCantCompile(Expression expression) {, +		assertFalse(SpelCompiler.compile(expression));, +	}, +, +	private Expression parse(String expression) {, +		return parser.parseExpression(expression);, +	}, +, +	private void assertGetValueFail(Expression expression) {, +		try {, +			Object o = expression.getValue();, +			fail("Calling getValue on the expression should have failed but returned "+o);, +		}, +		catch (Exception ex) {, +			// success!, +		}, +	}, +, +, +	// helper classes, +, +, +, +, +, +, +	public static class MessageHeaders extends HashMap<String,Object> {, +	}, +, +, +	public static class FooObject {, +, +		public Object getObject() { return "hello"; }, +	}, +, +	public static class FooString {, +, +		public String getObject() { return "hello"; }, +	}, +, +, +]