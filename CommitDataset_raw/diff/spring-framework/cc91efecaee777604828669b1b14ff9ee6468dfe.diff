[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +						TypeDescriptor typeDescriptor = mapKeyType != null ? TypeDescriptor.valueOf(mapKeyType) : TypeDescriptor.valueOf(Object.class);, +						Object convertedMapKey = convertIfNecessary(null, null, key, mapKeyType, typeDescriptor);, +					MethodParameter methodParameter = new MethodParameter(pd.getReadMethod(), -1);, +					methodParameter.increaseNestingLevel();					, +							new PropertyTypeDescriptor(requiredType, methodParameter, pd));, +				MethodParameter methodParameter = new MethodParameter(pd.getReadMethod(), -1);, +				methodParameter.increaseNestingLevel();, +						new PropertyTypeDescriptor(requiredType, methodParameter, pd));, +				TypeDescriptor typeDescriptor = mapKeyType != null ? TypeDescriptor.valueOf(mapKeyType) : TypeDescriptor.valueOf(Object.class);, +				Object convertedMapKey = convertIfNecessary(null, null, key, mapKeyType, typeDescriptor);, +				MethodParameter methodParameter = new MethodParameter(pd.getReadMethod(), -1);, +				methodParameter.increaseNestingLevel();, +						new PropertyTypeDescriptor(mapValueType, methodParameter, pd));, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +						TypeDescriptor typeDescriptor = mapKeyType != null ? TypeDescriptor.valueOf(mapKeyType) : TypeDescriptor.valueOf(Object.class);, +						Object convertedMapKey = convertIfNecessary(null, null, key, mapKeyType, typeDescriptor);, +					MethodParameter methodParameter = new MethodParameter(pd.getReadMethod(), -1);, +					methodParameter.increaseNestingLevel();					, +							new PropertyTypeDescriptor(requiredType, methodParameter, pd));, +				MethodParameter methodParameter = new MethodParameter(pd.getReadMethod(), -1);, +				methodParameter.increaseNestingLevel();, +						new PropertyTypeDescriptor(requiredType, methodParameter, pd));, +				TypeDescriptor typeDescriptor = mapKeyType != null ? TypeDescriptor.valueOf(mapKeyType) : TypeDescriptor.valueOf(Object.class);, +				Object convertedMapKey = convertIfNecessary(null, null, key, mapKeyType, typeDescriptor);, +				MethodParameter methodParameter = new MethodParameter(pd.getReadMethod(), -1);, +				methodParameter.increaseNestingLevel();, +						new PropertyTypeDescriptor(mapValueType, methodParameter, pd));, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/Spr7839Tests.java, +import java.util.ArrayList;, +	public void arrayOfLists() throws Exception {, +		// TODO two issues here: no autogrow for array properties, and GenericCollectionResolver not capable of accessing nested element type, +		request.setRequestURI("/nested/arrayOfLists");, +		request.addParameter("nested.arrayOfLists[0]", "Nested1,Nested2");, +		adapter.handle(request, response, controller);, +	}, +, +	@Test, +	@Ignore, +	@Test, +	public void mapOfLists() throws Exception {, +		request.setRequestURI("/nested/mapOfLists");		, +		request.addParameter("nested.mapOfLists['apples'][0]", "1");, +		adapter.handle(request, response, controller);, +	}, +, +		@RequestMapping("/nested/arrayOfLists"), +		public void handlerArrayOfLists(JavaBean bean) {, +			System.out.println(bean.nested.arrayOfLists[0].get(1).getClass());, +			assertEquals("Nested2", bean.nested.arrayOfLists[0].get(1).foo);, +		}, +, +		@RequestMapping("/nested/map"), +		public void handlerMap(JavaBean bean) {, +			assertEquals("bar", bean.nested.map.get("apple").foo);, +		}, +		, +		@RequestMapping("/nested/mapOfLists"), +		public void handlerMapOfLists(JavaBean bean) {, +			assertEquals(new Integer(1), bean.nested.mapOfLists.get("apples").get(0));, +		}, +, +	    private List<NestedBean>[] arrayOfLists;, +, +	    private Map<String, List<Integer>> mapOfLists = new HashMap<String, List<Integer>>();, +	    public NestedBean() {, +	    	mapOfLists.put("apples", new ArrayList<Integer>());, +		public List<NestedBean>[] getArrayOfLists() {, +			return arrayOfLists;, +		}, +, +		public void setArrayOfLists(List<NestedBean>[] arrayOfLists) {, +			this.arrayOfLists = arrayOfLists;, +		}, +, +		public Map<String, List<Integer>> getMapOfLists() {, +			return mapOfLists;, +		}, +, +		public void setMapOfLists(Map<String, List<Integer>> mapOfLists) {, +			this.mapOfLists = mapOfLists;, +		}, +	   ]