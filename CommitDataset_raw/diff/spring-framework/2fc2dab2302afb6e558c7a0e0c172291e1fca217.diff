[+++ /dev/null, +++ /dev/null, +++ b/spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java, +import java.time.Duration;, +import java.util.concurrent.atomic.AtomicReference;, +, +import reactor.core.publisher.Mono;, +	public Mono<WebSession> createWebSession() {, +		return Mono.fromSupplier(InMemoryWebSession::new);, +	}, +, +	@Override, +			InMemoryWebSession session = (InMemoryWebSession) webSession;, +			return new InMemoryWebSession(session, lastAccessTime);, +	/* Private methods for InMemoryWebSession */, +, +, +, +	private class InMemoryWebSession implements WebSession {, +, +		private final AtomicReference<String> id;, +, +		private final Map<String, Object> attributes;, +, +		private final Instant creationTime;, +, +		private final Instant lastAccessTime;, +, +		private volatile Duration maxIdleTime;, +, +		private volatile boolean started;, +, +, +		InMemoryWebSession() {, +			this.id = new AtomicReference<>(String.valueOf(idGenerator.generateId()));, +			this.attributes = new ConcurrentHashMap<>();, +			this.creationTime = Instant.now(getClock());, +			this.lastAccessTime = this.creationTime;, +			this.maxIdleTime = Duration.ofMinutes(30);, +		}, +, +		InMemoryWebSession(InMemoryWebSession existingSession, Instant lastAccessTime) {, +			this.id = existingSession.id;, +			this.attributes = existingSession.attributes;, +			this.creationTime = existingSession.creationTime;, +			this.lastAccessTime = lastAccessTime;, +			this.maxIdleTime = existingSession.maxIdleTime;, +			this.started = existingSession.isStarted(); // Use method (explicit or implicit start), +		}, +, +, +		@Override, +		public String getId() {, +			return this.id.get();, +		}, +, +		@Override, +		public Map<String, Object> getAttributes() {, +			return this.attributes;, +		}, +, +		@Override, +		public Instant getCreationTime() {, +			return this.creationTime;, +		}, +, +		@Override, +		public Instant getLastAccessTime() {, +			return this.lastAccessTime;, +		}, +, +		@Override, +		public void setMaxIdleTime(Duration maxIdleTime) {, +			this.maxIdleTime = maxIdleTime;, +		}, +, +		@Override, +		public Duration getMaxIdleTime() {, +			return this.maxIdleTime;, +		}, +, +, +		@Override, +		public void start() {, +			this.started = true;, +		}, +, +		@Override, +		public boolean isStarted() {, +			return this.started || !getAttributes().isEmpty();, +		}, +, +		@Override, +		public Mono<Void> changeSessionId() {, +			String oldId = this.id.get();, +			String newId = String.valueOf(idGenerator.generateId());, +			this.id.set(newId);, +			return InMemoryWebSessionStore.this.changeSessionId(oldId, this).doOnError(ex -> this.id.set(oldId));, +		}, +]