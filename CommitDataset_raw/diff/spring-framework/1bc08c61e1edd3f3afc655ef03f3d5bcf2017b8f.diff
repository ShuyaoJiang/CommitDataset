[+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java, +import reactor.netty.resources.ConnectionProvider;, +import reactor.netty.resources.LoopResources;, +import reactor.netty.tcp.TcpClient;, +	private final static Function<HttpClient, HttpClient> defaultInitializer = HttpClient::compress;, +, +, +	 * Default constructor that initializes an {@link HttpClient} with:, +	 * <pre class="code">, +	 * HttpClient.create().compress(), +	 * </pre>, +		this.httpClient = defaultInitializer.apply(HttpClient.create());, +	 * Constructor with externally managed Reactor Netty resources, including, +	 * {@link LoopResources} for event loop threads, and {@link ConnectionProvider}, +	 * for the connection pool., +	 * <p>This constructor should be used only when you don't want the client, +	 * to participate in the Reactor Netty global resources. By default the, +	 * client participates in the Reactor Netty global resources held in, +	 * {@link reactor.netty.http.HttpResources}, which is recommended since, +	 * fixed, shared resources are favored for event loop concurrency. However,, +	 * consider declaring a {@link ReactorResourceFactory} bean with, +	 * {@code globaResources=true} in order to ensure the Reactor Netty global, +	 * resources are shut down when the Spring ApplicationContext is closed., +	 * @param factory the resource factory to obtain the resources from, +	 * @param mapper a mapper for further initialization of the created client, +	 * @since 5.1, +	 */, +	public ReactorClientHttpConnector(ReactorResourceFactory factory, Function<HttpClient, HttpClient> mapper) {, +		this.httpClient = defaultInitializer.andThen(mapper).apply(initHttpClient(factory));, +	}, +, +	private static HttpClient initHttpClient(ReactorResourceFactory resourceFactory) {, +		ConnectionProvider provider = resourceFactory.getConnectionProvider();, +		LoopResources resources = resourceFactory.getLoopResources();, +		Assert.notNull(provider, "No ConnectionProvider: is ReactorResourceFactory not initialized yet?");, +		Assert.notNull(resources, "No LoopResources: is ReactorResourceFactory not initialized yet?");, +		return HttpClient.create(provider).tcpConfiguration(tcpClient -> tcpClient.runOn(resources)).compress();, +	}, +, +	/**, +	 * Constructor with a pre-configured {@code HttpClient} instance., +	 * @param httpClient the client to use, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java, +import reactor.netty.resources.ConnectionProvider;, +import reactor.netty.resources.LoopResources;, +import reactor.netty.tcp.TcpClient;, +	private final static Function<HttpClient, HttpClient> defaultInitializer = HttpClient::compress;, +, +, +	 * Default constructor that initializes an {@link HttpClient} with:, +	 * <pre class="code">, +	 * HttpClient.create().compress(), +	 * </pre>, +		this.httpClient = defaultInitializer.apply(HttpClient.create());, +	 * Constructor with externally managed Reactor Netty resources, including, +	 * {@link LoopResources} for event loop threads, and {@link ConnectionProvider}, +	 * for the connection pool., +	 * <p>This constructor should be used only when you don't want the client, +	 * to participate in the Reactor Netty global resources. By default the, +	 * client participates in the Reactor Netty global resources held in, +	 * {@link reactor.netty.http.HttpResources}, which is recommended since, +	 * fixed, shared resources are favored for event loop concurrency. However,, +	 * consider declaring a {@link ReactorResourceFactory} bean with, +	 * {@code globaResources=true} in order to ensure the Reactor Netty global, +	 * resources are shut down when the Spring ApplicationContext is closed., +	 * @param factory the resource factory to obtain the resources from, +	 * @param mapper a mapper for further initialization of the created client, +	 * @since 5.1, +	 */, +	public ReactorClientHttpConnector(ReactorResourceFactory factory, Function<HttpClient, HttpClient> mapper) {, +		this.httpClient = defaultInitializer.andThen(mapper).apply(initHttpClient(factory));, +	}, +, +	private static HttpClient initHttpClient(ReactorResourceFactory resourceFactory) {, +		ConnectionProvider provider = resourceFactory.getConnectionProvider();, +		LoopResources resources = resourceFactory.getLoopResources();, +		Assert.notNull(provider, "No ConnectionProvider: is ReactorResourceFactory not initialized yet?");, +		Assert.notNull(resources, "No LoopResources: is ReactorResourceFactory not initialized yet?");, +		return HttpClient.create(provider).tcpConfiguration(tcpClient -> tcpClient.runOn(resources)).compress();, +	}, +, +	/**, +	 * Constructor with a pre-configured {@code HttpClient} instance., +	 * @param httpClient the client to use, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorResourceFactory.java, +/*, + * Copyright 2002-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */]