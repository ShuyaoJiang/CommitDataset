[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +		return new RequestMappingInfo(Arrays.asList(annotation.value()),, +						RequestConditionFactory.parseMethods(annotation.method()),, +					for (RequestMethod method : info.getMethods().getMethods()) {, +			result = mapping.getMethods().compareTo(otherMapping.getMethods());, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +		return new RequestMappingInfo(Arrays.asList(annotation.value()),, +						RequestConditionFactory.parseMethods(annotation.method()),, +					for (RequestMethod method : info.getMethods().getMethods()) {, +			result = mapping.getMethods().compareTo(otherMapping.getMethods());, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingInfo.java, +import org.springframework.web.servlet.mvc.method.condition.RequestConditionFactory;, +import org.springframework.web.servlet.mvc.method.condition.RequestMethodsRequestCondition;, +	private final RequestMethodsRequestCondition methodsCondition;, +	RequestMappingInfo(Collection<String> patterns, RequestMethod[] methods) {, +		this(patterns, RequestConditionFactory.parseMethods(methods), null, null, null);, +							 RequestMethodsRequestCondition methodsCondition,, +		this.methodsCondition = methodsCondition != null ? methodsCondition : new RequestMethodsRequestCondition();, +	 * Returns the request method conditions of this request key., +	public RequestMethodsRequestCondition getMethods() {, +		return methodsCondition;, +		RequestMethodsRequestCondition methods = this.methodsCondition.combine(methodKey.methodsCondition);, +		RequestMethodsRequestCondition matchingMethodCondition = methodsCondition.getMatchingCondition(request);, +		if (matchingMethodCondition == null || matchingParamsCondition == null || matchingHeadersCondition == null ||, +			List<String> matchingPatterns = getMatchingPatterns(lookupPath, pathMatcher);, +				return new RequestMappingInfo(matchingPatterns, matchingMethodCondition, matchingParamsCondition,, +	private List<String> getMatchingPatterns(String lookupPath, PathMatcher pathMatcher) {, +			return (this.patterns.equals(other.patterns) &&, +					this.methodsCondition.equals(other.methodsCondition) &&, +			result = 31 * result + methodsCondition.hashCode();, +		builder.append(",methods=").append(methodsCondition);, +		builder.append(",params=").append(paramsCondition);, +		builder.append(",headers=").append(headersCondition);, +		builder.append(",consumes=").append(consumesCondition);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +		return new RequestMappingInfo(Arrays.asList(annotation.value()),, +						RequestConditionFactory.parseMethods(annotation.method()),, +					for (RequestMethod method : info.getMethods().getMethods()) {, +			result = mapping.getMethods().compareTo(otherMapping.getMethods());, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingInfo.java, +import org.springframework.web.servlet.mvc.method.condition.RequestConditionFactory;, +import org.springframework.web.servlet.mvc.method.condition.RequestMethodsRequestCondition;, +	private final RequestMethodsRequestCondition methodsCondition;, +	RequestMappingInfo(Collection<String> patterns, RequestMethod[] methods) {, +		this(patterns, RequestConditionFactory.parseMethods(methods), null, null, null);, +							 RequestMethodsRequestCondition methodsCondition,, +		this.methodsCondition = methodsCondition != null ? methodsCondition : new RequestMethodsRequestCondition();, +	 * Returns the request method conditions of this request key., +	public RequestMethodsRequestCondition getMethods() {, +		return methodsCondition;, +		RequestMethodsRequestCondition methods = this.methodsCondition.combine(methodKey.methodsCondition);, +		RequestMethodsRequestCondition matchingMethodCondition = methodsCondition.getMatchingCondition(request);, +		if (matchingMethodCondition == null || matchingParamsCondition == null || matchingHeadersCondition == null ||, +			List<String> matchingPatterns = getMatchingPatterns(lookupPath, pathMatcher);, +				return new RequestMappingInfo(matchingPatterns, matchingMethodCondition, matchingParamsCondition,, +	private List<String> getMatchingPatterns(String lookupPath, PathMatcher pathMatcher) {, +			return (this.patterns.equals(other.patterns) &&, +					this.methodsCondition.equals(other.methodsCondition) &&, +			result = 31 * result + methodsCondition.hashCode();, +		builder.append(",methods=").append(methodsCondition);, +		builder.append(",params=").append(paramsCondition);, +		builder.append(",headers=").append(headersCondition);, +		builder.append(",consumes=").append(consumesCondition);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/condition/HeadersRequestCondition.java, +	 * Returns a new {@code RequestCondition} that contains all conditions that match the request., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +		return new RequestMappingInfo(Arrays.asList(annotation.value()),, +						RequestConditionFactory.parseMethods(annotation.method()),, +					for (RequestMethod method : info.getMethods().getMethods()) {, +			result = mapping.getMethods().compareTo(otherMapping.getMethods());, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingInfo.java, +import org.springframework.web.servlet.mvc.method.condition.RequestConditionFactory;, +import org.springframework.web.servlet.mvc.method.condition.RequestMethodsRequestCondition;, +	private final RequestMethodsRequestCondition methodsCondition;, +	RequestMappingInfo(Collection<String> patterns, RequestMethod[] methods) {, +		this(patterns, RequestConditionFactory.parseMethods(methods), null, null, null);, +							 RequestMethodsRequestCondition methodsCondition,, +		this.methodsCondition = methodsCondition != null ? methodsCondition : new RequestMethodsRequestCondition();, +	 * Returns the request method conditions of this request key., +	public RequestMethodsRequestCondition getMethods() {, +		return methodsCondition;, +		RequestMethodsRequestCondition methods = this.methodsCondition.combine(methodKey.methodsCondition);, +		RequestMethodsRequestCondition matchingMethodCondition = methodsCondition.getMatchingCondition(request);, +		if (matchingMethodCondition == null || matchingParamsCondition == null || matchingHeadersCondition == null ||, +			List<String> matchingPatterns = getMatchingPatterns(lookupPath, pathMatcher);, +				return new RequestMappingInfo(matchingPatterns, matchingMethodCondition, matchingParamsCondition,, +	private List<String> getMatchingPatterns(String lookupPath, PathMatcher pathMatcher) {, +			return (this.patterns.equals(other.patterns) &&, +					this.methodsCondition.equals(other.methodsCondition) &&, +			result = 31 * result + methodsCondition.hashCode();, +		builder.append(",methods=").append(methodsCondition);, +		builder.append(",params=").append(paramsCondition);, +		builder.append(",headers=").append(headersCondition);, +		builder.append(",consumes=").append(consumesCondition);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/condition/HeadersRequestCondition.java, +	 * Returns a new {@code RequestCondition} that contains all conditions that match the request., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/condition/LogicalConjunctionRequestCondition.java, +		if (isEmpty()) {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +		return new RequestMappingInfo(Arrays.asList(annotation.value()),]