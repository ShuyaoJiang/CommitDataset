[+++ /dev/null, +++ /dev/null, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/binder/PresentationModelBinder.java, +/*, + * Copyright 2004-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.ui.binding.binder;, +, +import java.util.ArrayList;, +import java.util.List;, +import java.util.Map;, +, +import org.springframework.context.MessageSource;, +import org.springframework.ui.binding.BindingStatus;, +import org.springframework.ui.binding.FieldModel;, +import org.springframework.ui.binding.FieldNotFoundException;, +import org.springframework.ui.binding.PresentationModel;, +import org.springframework.util.Assert;, +, +/**, + * A generic {@link Binder binder} suitable for use in most environments., + * @author Keith Donald, + * @since 3.0, + * @see #setMessageSource(MessageSource), + * @see #setRequiredFields(String[]), + * @see #bind(Map), + */, +public class PresentationModelBinder implements Binder {, +, +	private PresentationModel presentationModel;, +	, +	private String[] requiredFields;, +	, +	private MessageSource messageSource;, +, +	public PresentationModelBinder(PresentationModel presentationModel) {, +		Assert.notNull(presentationModel, "The PresentationModel is required");, +		this.presentationModel = presentationModel;, +	}, +, +	/**, +	 * Configure the MessageSource that resolves localized {@link BindingResult} alert messages., +	 * @param messageSource the message source, +	 */, +	public void setMessageSource(MessageSource messageSource) {, +		Assert.notNull(messageSource, "The MessageSource is required");, +		this.messageSource = messageSource;, +	}, +	, +	/**, +	 * Configure the fields for which values must be present in each bind attempt., +	 * @param fieldNames the field names, +	 * @see MissingFieldException, +	 */, +	public void setRequiredFields(String[] fieldNames) {, +		this.requiredFields = fieldNames;, +	}, +	, +	// subclassing hooks, +	, +	/**, +	 * Get the model for the field., +	 * @param fieldName, +	 * @return the field model, +	 * @throws NoSuchFieldException if no such field exists, +	 */, +	protected FieldModel getFieldModel(String fieldName) {, +		return presentationModel.getFieldModel(fieldName);, +	}, +, +	// implementing Binder, +, +	public BindingResults bind(Map<String, ? extends Object> fieldValues) {, +		fieldValues = filter(fieldValues);, +		checkRequired(fieldValues);, +		ArrayListBindingResults results = new ArrayListBindingResults(fieldValues.size());, +		for (Map.Entry<String, ? extends Object> fieldValue : fieldValues.entrySet()) {, +			try {, +				FieldModel field = getFieldModel(fieldValue.getKey());, +				results.add(bind(fieldValue, field));, +			} catch (FieldNotFoundException e) {, +				results.add(new FieldNotFoundResult(fieldValue.getKey(), fieldValue.getValue(), messageSource));, +			}, +		}, +		return results;, +	}, +, +	// subclassing hooks]