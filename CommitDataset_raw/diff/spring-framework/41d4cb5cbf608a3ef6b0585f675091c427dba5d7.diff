[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/ObjectProvider.java, +	 * Return an {@link Iterator} over all matching object instances,, +	 * Return a sequential {@link Stream} over all matching object instances,, +	 * without specific ordering guarantees (but typically in registration order)., +	 * @since 5.1, +	 * @see #iterator(), +	 * @see #orderedStream(), +	 */, +	default Stream<T> stream() {, +		throw new UnsupportedOperationException("Multi-element access not supported");, +	}, +, +	/**, +	 * Return a sequential {@link Stream} over all matching object instances,, +	 * pre-ordered according to the factory's common order comparator., +	 * <p>In a standard Spring application context, this will be ordered, +	 * according to {@link org.springframework.core.Ordered} conventions,, +	 * and in case of annotation-based configuration also considering the, +	 * {@link org.springframework.core.annotation.Order} annotation,, +	 * @see org.springframework.core.OrderComparator, +	default Stream<T> orderedStream() {, +		throw new UnsupportedOperationException("Multi-element access not supported");, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/ObjectProvider.java, +	 * Return an {@link Iterator} over all matching object instances,, +	 * Return a sequential {@link Stream} over all matching object instances,, +	 * without specific ordering guarantees (but typically in registration order)., +	 * @since 5.1, +	 * @see #iterator(), +	 * @see #orderedStream(), +	 */, +	default Stream<T> stream() {, +		throw new UnsupportedOperationException("Multi-element access not supported");, +	}, +, +	/**, +	 * Return a sequential {@link Stream} over all matching object instances,, +	 * pre-ordered according to the factory's common order comparator., +	 * <p>In a standard Spring application context, this will be ordered, +	 * according to {@link org.springframework.core.Ordered} conventions,, +	 * and in case of annotation-based configuration also considering the, +	 * {@link org.springframework.core.annotation.Order} annotation,, +	 * @see org.springframework.core.OrderComparator, +	default Stream<T> orderedStream() {, +		throw new UnsupportedOperationException("Multi-element access not supported");, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +			public Stream<T> orderedStream() {, +				Stream<T> stream = matchingBeans.values().stream();, +				return stream.sorted(adaptOrderComparator(matchingBeans));, +			Stream<Object> stream = matchingBeans.keySet().stream(), +			if (((StreamDependencyDescriptor) descriptor).isOrdered()) {, +				stream = stream.sorted(adaptOrderComparator(matchingBeans));, +			return stream;, +	private Comparator<Object> adaptOrderComparator(Map<String, ?> matchingBeans) {, +		Comparator<Object> dependencyComparator = getDependencyComparator();, +		OrderComparator comparator = (dependencyComparator instanceof OrderComparator ?, +				(OrderComparator) dependencyComparator : OrderComparator.INSTANCE);, +		return comparator.withSourceProvider(createFactoryAwareOrderSourceProvider(matchingBeans));, +	}, +, +		private final boolean ordered;, +		public StreamDependencyDescriptor(DependencyDescriptor original, boolean ordered) {, +			this.ordered = ordered;, +		public boolean isOrdered() {, +			return this.ordered;, +			return resolveStream(false);, +		}, +, +		@Override, +		public Stream<Object> orderedStream() {, +			return resolveStream(true);, +		private Stream<Object> resolveStream(boolean ordered) {, +			DependencyDescriptor descriptorToUse = new StreamDependencyDescriptor(this.descriptor, ordered);, +			return (Stream<Object>) result;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/ObjectProvider.java, +	 * Return an {@link Iterator} over all matching object instances,, +	 * Return a sequential {@link Stream} over all matching object instances,, +	 * without specific ordering guarantees (but typically in registration order)., +	 * @since 5.1, +	 * @see #iterator(), +	 * @see #orderedStream(), +	 */, +	default Stream<T> stream() {, +		throw new UnsupportedOperationException("Multi-element access not supported");, +	}, +, +	/**, +	 * Return a sequential {@link Stream} over all matching object instances,, +	 * pre-ordered according to the factory's common order comparator., +	 * <p>In a standard Spring application context, this will be ordered, +	 * according to {@link org.springframework.core.Ordered} conventions,, +	 * and in case of annotation-based configuration also considering the, +	 * {@link org.springframework.core.annotation.Order} annotation,, +	 * @see org.springframework.core.OrderComparator, +	default Stream<T> orderedStream() {, +		throw new UnsupportedOperationException("Multi-element access not supported");, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +			public Stream<T> orderedStream() {, +				Stream<T> stream = matchingBeans.values().stream();, +				return stream.sorted(adaptOrderComparator(matchingBeans));, +			Stream<Object> stream = matchingBeans.keySet().stream()]