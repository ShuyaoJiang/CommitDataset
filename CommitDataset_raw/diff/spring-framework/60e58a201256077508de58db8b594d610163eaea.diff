[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java, +		// No entry yet -> fully synchronized manipulation of the containedBeans Set, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java, +		// No entry yet -> fully synchronized manipulation of the containedBeans Set, +++ b/spring-core/src/main/java/org/springframework/core/io/support/PropertiesLoaderSupport.java, + * Copyright 2002-2014 the original author or authors., +	public void setPropertiesArray(Properties... propertiesArray) {, +	public void setLocations(Resource... locations) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java, +		// No entry yet -> fully synchronized manipulation of the containedBeans Set, +++ b/spring-core/src/main/java/org/springframework/core/io/support/PropertiesLoaderSupport.java, + * Copyright 2002-2014 the original author or authors., +	public void setPropertiesArray(Properties... propertiesArray) {, +	public void setLocations(Resource... locations) {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java, +			return (this.exitTypeDescriptor != null);, +			return (this.children[0] instanceof PropertyOrFieldReference || this.children[0].isCompilable());, +			}, +		String descriptor = codeflow.lastDescriptor();, +		if (descriptor == null) {, +			// Stack is empty, should use context object, +			if ("I".equals(this.exitTypeDescriptor)) {, +			else if ("D".equals(this.exitTypeDescriptor)) {, +			else if ("J".equals(this.exitTypeDescriptor)) {, +			else if ("F".equals(this.exitTypeDescriptor)) {, +			else if ("S".equals(this.exitTypeDescriptor)) {, +			else if ("B".equals(this.exitTypeDescriptor)) {, +			else if ("C".equals(this.exitTypeDescriptor)) {, +				mv.visitTypeInsn(CHECKCAST, "["+ this.exitTypeDescriptor +, +						(CodeFlow.isPrimitiveArray(this.exitTypeDescriptor) ? "" : ";"));, +						//depthPlusOne(exitTypeDescriptor)+"Ljava/lang/Object;");, +			CodeFlow.insertCheckCast(mv, this.exitTypeDescriptor);, +			CodeFlow.insertCheckCast(mv, this.exitTypeDescriptor);, +				mv.visitFieldInsn(isStatic ? GETSTATIC : GETFIELD, memberDeclaringClassSlashedDescriptor,, +						member.getName(), CodeFlow.toJVMDescriptor(((Field) member).getType()));, +				mv.visitMethodInsn(isStatic? INVOKESTATIC : INVOKEVIRTUAL, memberDeclaringClassSlashedDescriptor,, +						member.getName(), CodeFlow.createSignatureDescriptor((Method) member), false);, +, +		codeflow.pushDescriptor(this.exitTypeDescriptor);]