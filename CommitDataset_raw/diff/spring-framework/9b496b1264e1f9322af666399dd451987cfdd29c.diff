[+++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartHttpMessageWriter.java, +	 * Return the configured part writers., +	 * @since 5.0.7, +	 */, +	public List<HttpMessageWriter<?>> getPartWriters() {, +		return Collections.unmodifiableList(partWriters);, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartHttpMessageWriter.java, +	 * Return the configured part writers., +	 * @since 5.0.7, +	 */, +	public List<HttpMessageWriter<?>> getPartWriters() {, +		return Collections.unmodifiableList(partWriters);, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/http/codec/support/BaseCodecConfigurer.java, +import org.springframework.http.codec.multipart.MultipartHttpMessageWriter;, +		return getWritersInternal(false);, +	}, +, +	/**, +	 * Internal method that returns the configured writers., +	 * @param forMultipart whether to returns writers for general use ("false"),, +	 * or for multipart requests only ("true"). Generally the two sets are the, +	 * same except for the multipart writer itself., +	 */, +	protected List<HttpMessageWriter<?>> getWritersInternal(boolean forMultipart) {, +		result.addAll(this.defaultCodecs.getTypedWriters(forMultipart));, +		result.addAll(this.defaultCodecs.getObjectWriters(forMultipart));, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartHttpMessageWriter.java, +	 * Return the configured part writers., +	 * @since 5.0.7, +	 */, +	public List<HttpMessageWriter<?>> getPartWriters() {, +		return Collections.unmodifiableList(partWriters);, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/http/codec/support/BaseCodecConfigurer.java, +import org.springframework.http.codec.multipart.MultipartHttpMessageWriter;, +		return getWritersInternal(false);, +	}, +, +	/**, +	 * Internal method that returns the configured writers., +	 * @param forMultipart whether to returns writers for general use ("false"),, +	 * or for multipart requests only ("true"). Generally the two sets are the, +	 * same except for the multipart writer itself., +	 */, +	protected List<HttpMessageWriter<?>> getWritersInternal(boolean forMultipart) {, +		result.addAll(this.defaultCodecs.getTypedWriters(forMultipart));, +		result.addAll(this.defaultCodecs.getObjectWriters(forMultipart));, +++ b/spring-web/src/main/java/org/springframework/http/codec/support/BaseDefaultCodecs.java, +	/**, +	 * Return readers that support specific types., +	 */, +	/**, +	 * Hook for client or server specific typed readers., +	 */, +	/**, +	 * Return Object readers (JSON, XML, SSE)., +	 */, +	/**, +	 * Hook for client or server specific Object readers., +	 */, +	/**, +	 * Return readers that need to be at the end, after all others., +	 */, +	/**, +	 * Return writers that support specific types., +	 * @param forMultipart whether to returns writers for general use ("false"),, +	 * or for multipart requests only ("true"). Generally the two sets are the, +	 * same except for the multipart writer itself., +	 */, +	final List<HttpMessageWriter<?>> getTypedWriters(boolean forMultipart) {, +		// No client or server specific multipart writers currently.., +		if (!forMultipart) {, +		}, +	/**, +	 * Hook for client or server specific typed writers., +	 */, +	/**, +	 * Return Object writers (JSON, XML, SSE)., +	 * @param forMultipart whether to returns writers for general use ("false"),, +	 * or for multipart requests only ("true"). Generally the two sets are the, +	 * same except for the multipart writer itself., +	 */, +	final List<HttpMessageWriter<?>> getObjectWriters(boolean forMultipart) {, +		// No client or server specific multipart writers currently.., +		if (!forMultipart) {, +		}, +	/**, +	 * Hook for client or server specific Object writers., +	 */, +	/**, +	 * Return writers that need to be at the end, after all others., +	 */]