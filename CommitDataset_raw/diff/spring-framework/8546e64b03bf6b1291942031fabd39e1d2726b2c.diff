[+++ b/org.springframework.web/src/main/java/org/springframework/http/MediaType.java, + * <p>Consists of a {@linkplain #getType() type} and a {@linkplain #getSubtype() subtype}. Also has functionality to, + * parse media types from a string using {@link #parseMediaType(String)}, or multiple comma-separated media types using, + * {@link #parseMediaTypes(String)}., + * @since 3.0, +	 * Create a new {@link MediaType} for the given primary type. <p>The {@linkplain #getSubtype() subtype} is set to, +	 * <code>&#42;</code>, parameters empty., +	 *, +	 * Create a new {@link MediaType} for the given primary type and subtype. <p>The parameters are empty., +	 *, +	 *, +	 *, +	/** Return the primary type. */, +	/** Indicate whether the {@linkplain #getType() type} is the wildcard character <code>&#42;</code> or not. */, +	/** Return the subtype. */, +	 *, +	 *, +	 *, +	 *, +	 * Indicate whether this {@link MediaType} includes the given media type. <p>For instance, {@code text/*} includes, +	 * {@code text/plain}, {@code text/html}, and {@code application/*+xml} includes {@code application/soap+xml}, etc., +	 *, +			// application/*+xml includes application/soap+xml, +			int thisPlusIdx = this.subtype.indexOf('+');, +			int otherPlusIdx = other.subtype.indexOf('+');, +			if (thisPlusIdx != -1 && otherPlusIdx != -1) {, +				String thisSubtypeNoSuffix = this.subtype.substring(0, thisPlusIdx);, +, +				String thisSubtypeSuffix = this.subtype.substring(thisPlusIdx + 1);, +				String otherSubtypeSuffix = other.subtype.substring(otherPlusIdx + 1);, +				if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {, +					return true;, +				}, +			}, +	 *, +	 * @return a negative integer, zero, or a positive integer as this media type is less than, equal to, or greater than, +	 *         the specified media type, +	 *, +	 * Parse the given, comma-seperated string into a list of {@link MediaType} objects. <p>This method can be used to, +	 * parse an Accept or Content-Type header., +	 *, +	 * Return a string representation of the given list of {@link MediaType} objects. <p>This method can be used to for an, +	 * Accept or Content-Type header., +	 *, +++ b/org.springframework.web/src/main/java/org/springframework/http/MediaType.java, + * <p>Consists of a {@linkplain #getType() type} and a {@linkplain #getSubtype() subtype}. Also has functionality to, + * parse media types from a string using {@link #parseMediaType(String)}, or multiple comma-separated media types using, + * {@link #parseMediaTypes(String)}., + * @since 3.0, +	 * Create a new {@link MediaType} for the given primary type. <p>The {@linkplain #getSubtype() subtype} is set to, +	 * <code>&#42;</code>, parameters empty., +	 *, +	 * Create a new {@link MediaType} for the given primary type and subtype. <p>The parameters are empty., +	 *, +	 *, +	 *, +	/** Return the primary type. */, +	/** Indicate whether the {@linkplain #getType() type} is the wildcard character <code>&#42;</code> or not. */, +	/** Return the subtype. */, +	 *, +	 *, +	 *, +	 *, +	 * Indicate whether this {@link MediaType} includes the given media type. <p>For instance, {@code text/*} includes, +	 * {@code text/plain}, {@code text/html}, and {@code application/*+xml} includes {@code application/soap+xml}, etc., +	 *, +			// application/*+xml includes application/soap+xml, +			int thisPlusIdx = this.subtype.indexOf('+');, +			int otherPlusIdx = other.subtype.indexOf('+');, +			if (thisPlusIdx != -1 && otherPlusIdx != -1) {, +				String thisSubtypeNoSuffix = this.subtype.substring(0, thisPlusIdx);, +, +				String thisSubtypeSuffix = this.subtype.substring(thisPlusIdx + 1);, +				String otherSubtypeSuffix = other.subtype.substring(otherPlusIdx + 1);, +				if (thisSubtypeSuffix.equals(otherSubtypeSuffix) && WILDCARD_TYPE.equals(thisSubtypeNoSuffix)) {, +					return true;, +				}, +			}, +	 *, +	 * @return a negative integer, zero, or a positive integer as this media type is less than, equal to, or greater than, +	 *         the specified media type, +	 *, +	 * Parse the given, comma-seperated string into a list of {@link MediaType} objects. <p>This method can be used to, +	 * parse an Accept or Content-Type header., +	 *, +	 * Return a string representation of the given list of {@link MediaType} objects. <p>This method can be used to for an, +	 * Accept or Content-Type header., +	 *, +++ b/org.springframework.web/src/test/java/org/springframework/http/MediaTypeTests.java, +import java.nio.charset.Charset;, +/** @author Arjen Poutsma */, +		MediaType textPlain = new MediaType("text", "plain");, +		assertTrue("Equal types is not inclusive", textPlain.includes(textPlain));, +		MediaType allText = new MediaType("text");, +		assertTrue("All subtypes is not inclusive", allText.includes(textPlain));, +		assertFalse("All subtypes is not inclusive", textPlain.includes(allText));, +		assertTrue("All types is not inclusive", MediaType.ALL.includes(textPlain));, +		assertFalse("All types is not inclusive", textPlain.includes(MediaType.ALL));, +, +		MediaType applicationSoapXml = new MediaType("application", "soap+xml");]