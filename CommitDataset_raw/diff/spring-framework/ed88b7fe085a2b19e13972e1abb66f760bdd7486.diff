[+++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java, + * Copyright 2002-2015 the original author or authors., +		assertNull(m.getAnnotation(Transactional.class));, +	@Test, +	public void findMethodAnnotationFromInterface() throws Exception {, +		Method method = ImplementsInterfaceWithAnnotatedMethod.class.getMethod("foo");, +		Order order = findAnnotation(method, Order.class);, +		assertNotNull(order);, +	}, +, +	@Test, +	public void findMethodAnnotationFromInterfaceOnSuper() throws Exception {, +		Method method = SubOfImplementsInterfaceWithAnnotatedMethod.class.getMethod("foo");, +		Order order = findAnnotation(method, Order.class);, +		assertNotNull(order);, +	}, +, +	@Test, +	public void findMethodAnnotationFromInterfaceWhenSuperDoesNotImplementMethod() throws Exception {, +		Method method = SubOfAbstractImplementsInterfaceWithAnnotatedMethod.class.getMethod("foo");, +		Order order = findAnnotation(method, Order.class);, +		assertNotNull(order);, +	}, +	public void findClassAnnotationFavorsLocalMetaAnnotationsOverInterfaces() {, +	public void findClassAnnotationFavorsInheritedAnnotationsOverMoreLocallyDeclaredComposedAnnotations() {, +	public void findClassAnnotationFavorsInheritedComposedAnnotationsOverMoreLocallyDeclaredComposedAnnotations() {, +	public void findClassAnnotationOnMetaMetaAnnotatedClass() {, +	public void findClassAnnotationOnMetaMetaMetaAnnotatedClass() {, +	public void findClassAnnotationOnAnnotatedClassWithMissingTargetMetaAnnotation() {, +	public void findClassAnnotationOnMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation() {, +	public void findAnnotationDeclaringClassForAllScenarios() throws Exception {, +	public void isAnnotationDeclaredLocallyForAllScenarios() throws Exception {, +	public void isAnnotationInheritedForAllScenarios() throws Exception {]