[+++ b/spring-aop/src/main/java/org/springframework/aop/TargetSource.java, +import org.springframework.lang.Nullable;, +, +	 * @return the target object which contains the joinpoint,, +	 * or {@code null} if there is no actual target instance, +	@Nullable, +	 * {@link #getTarget()} method, if any., +++ b/spring-aop/src/main/java/org/springframework/aop/TargetSource.java, +import org.springframework.lang.Nullable;, +, +	 * @return the target object which contains the joinpoint,, +	 * or {@code null} if there is no actual target instance, +	@Nullable, +	 * {@link #getTarget()} method, if any., +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +				fixedCallbacks[x] = new FixedChainStaticTargetInterceptor(, +						chain, this.advised.getTargetSource().getTarget(), this.advised.getTargetClass());, +	private static Object processReturnType(, +			Object proxy, @Nullable Object target, Method method, @Nullable Object returnValue) {, +, +		if (returnValue != null && returnValue == target &&, +			returnValue = proxy;, +		if (returnValue == null && returnType != Void.TYPE && returnType.isPrimitive()) {, +		return returnValue;, +		public StaticUnadvisedInterceptor(@Nullable Object target) {, +		public StaticUnadvisedExposedInterceptor(@Nullable Object target) {, +				if (target != null) {, +	}, +				if (target != null) {, +	}, +		public FixedChainStaticTargetInterceptor(, +				List<Object> adviceChain, @Nullable Object target, @Nullable Class<?> targetClass) {, +, +			TargetSource targetSource = this.advised.getTargetSource();, +				target = targetSource.getTarget();, +				Class<?> targetClass = (target != null ? target.getClass() : null);, +				if (target != null && !targetSource.isStatic()) {, +					targetSource.releaseTarget(target);, +		public CglibMethodInvocation(Object proxy, @Nullable Object target, Method method,, +				Object[] arguments, @Nullable Class<?> targetClass,, +				List<Object> interceptorsAndDynamicMethodMatchers, MethodProxy methodProxy) {, +++ b/spring-aop/src/main/java/org/springframework/aop/TargetSource.java, +import org.springframework.lang.Nullable;, +, +	 * @return the target object which contains the joinpoint,, +	 * or {@code null} if there is no actual target instance, +	@Nullable, +	 * {@link #getTarget()} method, if any., +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +				fixedCallbacks[x] = new FixedChainStaticTargetInterceptor(, +						chain, this.advised.getTargetSource().getTarget(), this.advised.getTargetClass());, +	private static Object processReturnType(, +			Object proxy, @Nullable Object target, Method method, @Nullable Object returnValue) {, +, +		if (returnValue != null && returnValue == target &&, +			returnValue = proxy;, +		if (returnValue == null && returnType != Void.TYPE && returnType.isPrimitive()) {, +		return returnValue;, +		public StaticUnadvisedInterceptor(@Nullable Object target) {, +		public StaticUnadvisedExposedInterceptor(@Nullable Object target) {, +				if (target != null) {, +	}, +				if (target != null) {, +	}, +		public FixedChainStaticTargetInterceptor(, +				List<Object> adviceChain, @Nullable Object target, @Nullable Class<?> targetClass) {, +, +			TargetSource targetSource = this.advised.getTargetSource();, +				target = targetSource.getTarget();, +				Class<?> targetClass = (target != null ? target.getClass() : null);, +				if (target != null && !targetSource.isStatic()) {, +					targetSource.releaseTarget(target);, +		public CglibMethodInvocation(Object proxy, @Nullable Object target, Method method,, +				Object[] arguments, @Nullable Class<?> targetClass,, +				List<Object> interceptorsAndDynamicMethodMatchers, MethodProxy methodProxy) {, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/JdkDynamicAopProxy.java, +			Class<?> targetClass = (target != null ? target.getClass() : null);, +++ b/spring-aop/src/main/java/org/springframework/aop/TargetSource.java, +import org.springframework.lang.Nullable;, +, +	 * @return the target object which contains the joinpoint,, +	 * or {@code null} if there is no actual target instance, +	@Nullable, +	 * {@link #getTarget()} method, if any., +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +				fixedCallbacks[x] = new FixedChainStaticTargetInterceptor(, +						chain, this.advised.getTargetSource().getTarget(), this.advised.getTargetClass());, +	private static Object processReturnType(, +			Object proxy, @Nullable Object target, Method method, @Nullable Object returnValue) {, +, +		if (returnValue != null && returnValue == target &&, +			returnValue = proxy;, +		if (returnValue == null && returnType != Void.TYPE && returnType.isPrimitive()) {, +		return returnValue;, +		public StaticUnadvisedInterceptor(@Nullable Object target) {, +		public StaticUnadvisedExposedInterceptor(@Nullable Object target) {, +				if (target != null) {, +	}, +				if (target != null) {, +	}]