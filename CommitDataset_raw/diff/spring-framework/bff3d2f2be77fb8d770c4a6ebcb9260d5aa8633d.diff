[+++ b/build.gradle, +		checkstyle("io.spring.javaformat:spring-javaformat-checkstyle:0.0.7"), +++ b/build.gradle, +		checkstyle("io.spring.javaformat:spring-javaformat-checkstyle:0.0.7"), +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcCall.java, +		this.declaredRowMappers.forEach((key, value) -> this.declaredParameters.add(this.callMetaDataContext.createReturnResultSetParameter(key, value)));, +++ b/build.gradle, +		checkstyle("io.spring.javaformat:spring-javaformat-checkstyle:0.0.7"), +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcCall.java, +		this.declaredRowMappers.forEach((key, value) -> this.declaredParameters.add(this.callMetaDataContext.createReturnResultSetParameter(key, value)));, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpResponse.java, +			cookieHeader.forEach(header ->, +						.build())), +			);, +++ b/build.gradle, +		checkstyle("io.spring.javaformat:spring-javaformat-checkstyle:0.0.7"), +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcCall.java, +		this.declaredRowMappers.forEach((key, value) -> this.declaredParameters.add(this.callMetaDataContext.createReturnResultSetParameter(key, value)));, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpResponse.java, +			cookieHeader.forEach(header ->, +						.build())), +			);, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpResponse.java, +				.doOnCancel(() ->, +					this.rejectSubscribers.set(true), +				), +++ b/build.gradle, +		checkstyle("io.spring.javaformat:spring-javaformat-checkstyle:0.0.7"), +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcCall.java, +		this.declaredRowMappers.forEach((key, value) -> this.declaredParameters.add(this.callMetaDataContext.createReturnResultSetParameter(key, value)));, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/JettyClientHttpResponse.java, +			cookieHeader.forEach(header ->, +						.build())), +			);, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpResponse.java, +				.doOnCancel(() ->, +					this.rejectSubscribers.set(true), +				), +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartHttpMessageReader.java, +				.doOnNext(map ->, +									"parts " + map.keySet() + " (content masked)")), +				)]