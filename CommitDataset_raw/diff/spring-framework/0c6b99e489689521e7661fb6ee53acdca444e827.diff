[+++ b/org.springframework.web/src/main/java/org/springframework/http/MediaType.java, +import java.util.Comparator;, +public class MediaType implements Comparable<MediaType> {, +	/**, +	 * Compares this {@link MediaType} to another alphabetically., +	 *, +	 * @param other media type to compare to, +	 * @see #sortBySpecificity(List), +	 */, +	public int compareTo(MediaType other) {, +		String s1 = this.toString();, +		String s2 = other.toString();, +		return s1.compareToIgnoreCase(s2);, +	}, +, +++ b/org.springframework.web/src/main/java/org/springframework/http/MediaType.java, +import java.util.Comparator;, +public class MediaType implements Comparable<MediaType> {, +	/**, +	 * Compares this {@link MediaType} to another alphabetically., +	 *, +	 * @param other media type to compare to, +	 * @see #sortBySpecificity(List), +	 */, +	public int compareTo(MediaType other) {, +		String s1 = this.toString();, +		String s2 = other.toString();, +		return s1.compareToIgnoreCase(s2);, +	}, +, +++ b/org.springframework.web/src/test/java/org/springframework/http/MediaTypeTests.java, +import java.util.List;, +	public void compareTo() {, +		MediaType audioBasic = new MediaType("audio", "basic");, +		MediaType audio = new MediaType("audio");, +		MediaType audioWave = new MediaType("audio", "wave");, +		MediaType audioBasicLevel = new MediaType("audio", "basic", Collections.singletonMap("level", "1"));, +, +		// equal, +		assertEquals("Invalid comparison result", 0, audioBasic.compareTo(audioBasic));, +		assertEquals("Invalid comparison result", 0, audio.compareTo(audio));, +		assertEquals("Invalid comparison result", 0, audioBasicLevel.compareTo(audioBasicLevel));, +, +		assertTrue("Invalid comparison result", audioBasicLevel.compareTo(audio) > 0);, +, +		List<MediaType> expected = new ArrayList<MediaType>();, +		expected.add(audio);, +		expected.add(audioBasic);, +		expected.add(audioBasicLevel);, +		expected.add(audioWave);, +, +		List<MediaType> result = new ArrayList<MediaType>(expected);, +		Random rnd = new Random();, +		// shuffle & sort 10 times, +		for (int i = 0; i < 10; i++) {, +			Collections.shuffle(result, rnd);, +			Collections.sort(result);, +, +			for (int j = 0; j < result.size(); j++) {, +				assertSame("Invalid media type at " + j, expected.get(j), result.get(j));, +			}, +		}, +, +	}, +, +	@Test]