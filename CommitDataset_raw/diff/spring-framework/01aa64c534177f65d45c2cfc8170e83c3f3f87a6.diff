[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageType.java, +	DISCONNECT_ACK,, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageType.java, +	DISCONNECT_ACK,, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java, +			SimpMessageHeaderAccessor disconnectAck = SimpMessageHeaderAccessor.create(SimpMessageType.DISCONNECT_ACK);, +			initHeaders(disconnectAck);, +			disconnectAck.setSessionId(sessionId);, +			Message<byte[]> messageOut = MessageBuilder.createMessage(EMPTY_PAYLOAD, disconnectAck.getMessageHeaders());, +			getClientOutboundChannel().send(messageOut);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageType.java, +	DISCONNECT_ACK,, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java, +			SimpMessageHeaderAccessor disconnectAck = SimpMessageHeaderAccessor.create(SimpMessageType.DISCONNECT_ACK);, +			initHeaders(disconnectAck);, +			disconnectAck.setSessionId(sessionId);, +			Message<byte[]> messageOut = MessageBuilder.createMessage(EMPTY_PAYLOAD, disconnectAck.getMessageHeaders());, +			getClientOutboundChannel().send(messageOut);, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandlerTests.java, +import static org.junit.Assert.assertEquals;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +, +		verify(this.clientOutboundChannel, times(4)).send(this.messageCaptor.capture());, +, +		Message<?> captured = this.messageCaptor.getAllValues().get(0);, +		assertEquals(SimpMessageType.DISCONNECT_ACK, SimpMessageHeaderAccessor.getMessageType(captured.getHeaders()));, +		assertEquals(sess1, SimpMessageHeaderAccessor.getSessionId(captured.getHeaders()));, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageType.java, +	DISCONNECT_ACK,, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java, +			SimpMessageHeaderAccessor disconnectAck = SimpMessageHeaderAccessor.create(SimpMessageType.DISCONNECT_ACK);, +			initHeaders(disconnectAck);, +			disconnectAck.setSessionId(sessionId);, +			Message<byte[]> messageOut = MessageBuilder.createMessage(EMPTY_PAYLOAD, disconnectAck.getMessageHeaders());, +			getClientOutboundChannel().send(messageOut);, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandlerTests.java, +import static org.junit.Assert.assertEquals;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +, +		verify(this.clientOutboundChannel, times(4)).send(this.messageCaptor.capture());, +, +		Message<?> captured = this.messageCaptor.getAllValues().get(0);, +		assertEquals(SimpMessageType.DISCONNECT_ACK, SimpMessageHeaderAccessor.getMessageType(captured.getHeaders()));, +		assertEquals(sess1, SimpMessageHeaderAccessor.getSessionId(captured.getHeaders()));, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java, +			else if (SimpMessageType.DISCONNECT_ACK.equals(stompAccessor.getMessageType())) {, +				stompAccessor = StompHeaderAccessor.create(StompCommand.ERROR);, +				stompAccessor.setMessage("Session closed.");, +			}]