[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/AbstractHandlerResultHandler.java, +import java.util.function.Supplier;, +	 * @param producibleTypesSupplier the media types that can be produced for the current request, +	protected MediaType selectMediaType(ServerWebExchange exchange,, +			Supplier<List<MediaType>> producibleTypesSupplier) {, +		List<MediaType> producibleTypes = getProducibleTypes(exchange, producibleTypesSupplier);, +	private List<MediaType> getProducibleTypes(ServerWebExchange exchange,, +			Supplier<List<MediaType>> producibleTypesSupplier) {, +, +		return producibleTypesSupplier.get();, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/AbstractHandlerResultHandler.java, +import java.util.function.Supplier;, +	 * @param producibleTypesSupplier the media types that can be produced for the current request, +	protected MediaType selectMediaType(ServerWebExchange exchange,, +			Supplier<List<MediaType>> producibleTypesSupplier) {, +		List<MediaType> producibleTypes = getProducibleTypes(exchange, producibleTypesSupplier);, +	private List<MediaType> getProducibleTypes(ServerWebExchange exchange,, +			Supplier<List<MediaType>> producibleTypesSupplier) {, +, +		return producibleTypesSupplier.get();, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +		ResolvableType valueType = ResolvableType.forMethodParameter(bodyParameter);, +		Class<?> valueClass = valueType.resolve();, +		ReactiveAdapter adapter = getAdapterRegistry().getAdapterFrom(valueClass, body);, +					valueType.getGeneric(0);, +			elementType = (valueClass == null && body != null ? ResolvableType.forInstance(body) : valueType);, +		MediaType bestMediaType = selectMediaType(exchange, () -> getProducibleMediaTypes(elementType));, +									valueType, elementType, bestMediaType, request, response, Collections.emptyMap()) :, +		else {, +			if (getProducibleMediaTypes(elementType).isEmpty()) {, +				return Mono.error(new IllegalStateException(, +						"No converter for return value type: " + elementType));, +			}, +		}, +		return Mono.error(new NotAcceptableStatusException(getProducibleMediaTypes(elementType)));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/AbstractHandlerResultHandler.java, +import java.util.function.Supplier;, +	 * @param producibleTypesSupplier the media types that can be produced for the current request, +	protected MediaType selectMediaType(ServerWebExchange exchange,, +			Supplier<List<MediaType>> producibleTypesSupplier) {, +		List<MediaType> producibleTypes = getProducibleTypes(exchange, producibleTypesSupplier);, +	private List<MediaType> getProducibleTypes(ServerWebExchange exchange,, +			Supplier<List<MediaType>> producibleTypesSupplier) {, +, +		return producibleTypesSupplier.get();, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +		ResolvableType valueType = ResolvableType.forMethodParameter(bodyParameter);, +		Class<?> valueClass = valueType.resolve();, +		ReactiveAdapter adapter = getAdapterRegistry().getAdapterFrom(valueClass, body);, +					valueType.getGeneric(0);, +			elementType = (valueClass == null && body != null ? ResolvableType.forInstance(body) : valueType);, +		MediaType bestMediaType = selectMediaType(exchange, () -> getProducibleMediaTypes(elementType));, +									valueType, elementType, bestMediaType, request, response, Collections.emptyMap()) :, +		else {, +			if (getProducibleMediaTypes(elementType).isEmpty()) {, +				return Mono.error(new IllegalStateException(, +						"No converter for return value type: " + elementType));, +			}, +		}, +		return Mono.error(new NotAcceptableStatusException(getProducibleMediaTypes(elementType)));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, +					MediaType bestMediaType = selectMediaType(exchange, () -> producibleTypes);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/AbstractHandlerResultHandler.java, +import java.util.function.Supplier;, +	 * @param producibleTypesSupplier the media types that can be produced for the current request, +	protected MediaType selectMediaType(ServerWebExchange exchange,, +			Supplier<List<MediaType>> producibleTypesSupplier) {, +		List<MediaType> producibleTypes = getProducibleTypes(exchange, producibleTypesSupplier);, +	private List<MediaType> getProducibleTypes(ServerWebExchange exchange,, +			Supplier<List<MediaType>> producibleTypesSupplier) {, +, +		return producibleTypesSupplier.get();, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +		ResolvableType valueType = ResolvableType.forMethodParameter(bodyParameter);, +		Class<?> valueClass = valueType.resolve();, +		ReactiveAdapter adapter = getAdapterRegistry().getAdapterFrom(valueClass, body);, +					valueType.getGeneric(0);, +			elementType = (valueClass == null && body != null ? ResolvableType.forInstance(body) : valueType);, +		MediaType bestMediaType = selectMediaType(exchange, () -> getProducibleMediaTypes(elementType));, +									valueType, elementType, bestMediaType, request, response, Collections.emptyMap()) :, +		else {, +			if (getProducibleMediaTypes(elementType).isEmpty()) {, +				return Mono.error(new IllegalStateException(, +						"No converter for return value type: " + elementType));, +			}, +		}, +		return Mono.error(new NotAcceptableStatusException(getProducibleMediaTypes(elementType)));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, +					MediaType bestMediaType = selectMediaType(exchange, () -> producibleTypes);, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/HandlerResultHandlerTests.java, +		MediaType actual = resultHandler.selectMediaType(this.exchange, () -> mediaTypes);, +		MediaType actual = resultHandler.selectMediaType(this.exchange, () -> mediaTypes);, +		MediaType actual = this.resultHandler.selectMediaType(this.exchange, () -> mediaTypes);, +		MediaType actual = this.resultHandler.selectMediaType(this.exchange,, +				() -> Collections.singletonList(textUtf8));, +		MediaType actual = this.resultHandler.selectMediaType(this.exchange, () -> producible);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/AbstractHandlerResultHandler.java, +import java.util.function.Supplier;, +	 * @param producibleTypesSupplier the media types that can be produced for the current request, +	protected MediaType selectMediaType(ServerWebExchange exchange,]