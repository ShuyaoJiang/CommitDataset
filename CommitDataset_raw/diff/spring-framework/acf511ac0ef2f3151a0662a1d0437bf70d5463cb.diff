[+++ b/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFuture.java, + * Copyright 2002-2017 the original author or authors., + *, +++ b/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFuture.java, + * Copyright 2002-2017 the original author or authors., + *, +++ b/spring-core/src/test/java/org/springframework/util/concurrent/SettableListenableFutureTests.java, +		InterruptibleSettableListenableFuture interruptibleFuture = new InterruptibleSettableListenableFuture();, +		assertTrue(interruptibleFuture.cancel(true));, +		assertTrue(interruptibleFuture.calledInterruptTask());, +		assertTrue(interruptibleFuture.isCancelled());, +		assertTrue(interruptibleFuture.isDone());, +		InterruptibleSettableListenableFuture interruptibleFuture = new InterruptibleSettableListenableFuture();, +		assertTrue(interruptibleFuture.cancel(false));, +		assertFalse(interruptibleFuture.calledInterruptTask());, +		assertTrue(interruptibleFuture.isCancelled());, +		assertTrue(interruptibleFuture.isDone());, +	@SuppressWarnings({"rawtypes", "unchecked"}), +	@SuppressWarnings({"rawtypes", "unchecked"}), +	private static class InterruptibleSettableListenableFuture extends SettableListenableFuture<String> {, +++ b/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFuture.java, + * Copyright 2002-2017 the original author or authors., + *, +++ b/spring-core/src/test/java/org/springframework/util/concurrent/SettableListenableFutureTests.java, +		InterruptibleSettableListenableFuture interruptibleFuture = new InterruptibleSettableListenableFuture();, +		assertTrue(interruptibleFuture.cancel(true));, +		assertTrue(interruptibleFuture.calledInterruptTask());, +		assertTrue(interruptibleFuture.isCancelled());, +		assertTrue(interruptibleFuture.isDone());, +		InterruptibleSettableListenableFuture interruptibleFuture = new InterruptibleSettableListenableFuture();, +		assertTrue(interruptibleFuture.cancel(false));, +		assertFalse(interruptibleFuture.calledInterruptTask());, +		assertTrue(interruptibleFuture.isCancelled());, +		assertTrue(interruptibleFuture.isDone());, +	@SuppressWarnings({"rawtypes", "unchecked"}), +	@SuppressWarnings({"rawtypes", "unchecked"}), +	private static class InterruptibleSettableListenableFuture extends SettableListenableFuture<String> {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/DataSourceUtils.java, + * Copyright 2002-2017 the original author or authors., +			catch (SQLException | RuntimeException ex) {, +++ b/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFuture.java, + * Copyright 2002-2017 the original author or authors., + *, +++ b/spring-core/src/test/java/org/springframework/util/concurrent/SettableListenableFutureTests.java, +		InterruptibleSettableListenableFuture interruptibleFuture = new InterruptibleSettableListenableFuture();, +		assertTrue(interruptibleFuture.cancel(true));, +		assertTrue(interruptibleFuture.calledInterruptTask());, +		assertTrue(interruptibleFuture.isCancelled());, +		assertTrue(interruptibleFuture.isDone());, +		InterruptibleSettableListenableFuture interruptibleFuture = new InterruptibleSettableListenableFuture();, +		assertTrue(interruptibleFuture.cancel(false));, +		assertFalse(interruptibleFuture.calledInterruptTask());, +		assertTrue(interruptibleFuture.isCancelled());, +		assertTrue(interruptibleFuture.isDone());, +	@SuppressWarnings({"rawtypes", "unchecked"}), +	@SuppressWarnings({"rawtypes", "unchecked"}), +	private static class InterruptibleSettableListenableFuture extends SettableListenableFuture<String> {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/DataSourceUtils.java, + * Copyright 2002-2017 the original author or authors., +			catch (SQLException | RuntimeException ex) {, +++ b/spring-jms/src/main/java/org/springframework/jms/connection/JmsTransactionManager.java, + * Copyright 2002-2017 the original author or authors., +		TransactionSynchronizationManager.bindResource(getConnectionFactory(), suspendedResources);, +++ b/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFuture.java, + * Copyright 2002-2017 the original author or authors., + *, +++ b/spring-core/src/test/java/org/springframework/util/concurrent/SettableListenableFutureTests.java, +		InterruptibleSettableListenableFuture interruptibleFuture = new InterruptibleSettableListenableFuture();, +		assertTrue(interruptibleFuture.cancel(true));, +		assertTrue(interruptibleFuture.calledInterruptTask());, +		assertTrue(interruptibleFuture.isCancelled());, +		assertTrue(interruptibleFuture.isDone());, +		InterruptibleSettableListenableFuture interruptibleFuture = new InterruptibleSettableListenableFuture();, +		assertTrue(interruptibleFuture.cancel(false));, +		assertFalse(interruptibleFuture.calledInterruptTask());, +		assertTrue(interruptibleFuture.isCancelled());, +		assertTrue(interruptibleFuture.isDone());, +	@SuppressWarnings({"rawtypes", "unchecked"}), +	@SuppressWarnings({"rawtypes", "unchecked"}), +	private static class InterruptibleSettableListenableFuture extends SettableListenableFuture<String> {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/DataSourceUtils.java, + * Copyright 2002-2017 the original author or authors., +			catch (SQLException | RuntimeException ex) {, +++ b/spring-jms/src/main/java/org/springframework/jms/connection/JmsTransactionManager.java, + * Copyright 2002-2017 the original author or authors., +		TransactionSynchronizationManager.bindResource(getConnectionFactory(), suspendedResources);, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/support/OpenSessionInViewInterceptor.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFuture.java, + * Copyright 2002-2017 the original author or authors., + *, +++ b/spring-core/src/test/java/org/springframework/util/concurrent/SettableListenableFutureTests.java, +		InterruptibleSettableListenableFuture interruptibleFuture = new InterruptibleSettableListenableFuture();, +		assertTrue(interruptibleFuture.cancel(true));, +		assertTrue(interruptibleFuture.calledInterruptTask());, +		assertTrue(interruptibleFuture.isCancelled());, +		assertTrue(interruptibleFuture.isDone());, +		InterruptibleSettableListenableFuture interruptibleFuture = new InterruptibleSettableListenableFuture();, +		assertTrue(interruptibleFuture.cancel(false));, +		assertFalse(interruptibleFuture.calledInterruptTask());]