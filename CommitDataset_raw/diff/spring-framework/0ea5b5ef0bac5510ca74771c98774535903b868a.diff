[+++ b/org.springframework.web/src/main/java/org/springframework/web/client/RestOperations.java, + * Interface specifying a basic set of RESTful operations. Implemented by {@link RestTemplate}., + * Not often used directly, but a useful option to enhance testability, as it can easily, + * be mocked or stubbed., + * @author Juergen Hoeller, + * @see RestTemplate, +	 * Retrieve a representation by doing a GET on the specified URL., +	 * The response (if any) is converted and returned., +	<T> T getForObject(String url, Class<T> responseType, Object... uriVariables) throws RestClientException;, +	 * Retrieve a representation by doing a GET on the URI template., +	 * The response (if any) is converted and returned., +	<T> T getForObject(String url, Class<T> responseType, Map<String, ?> uriVariables) throws RestClientException;, +	 * Retrieve a representation by doing a GET on the URL ., +	 * The response (if any) is converted and returned., +	 * Retrieve all headers of the resource specified by the URI template., +	 * <p>URI Template variables are expanded using the given URI variables, if any., +	HttpHeaders headForHeaders(String url, Object... uriVariables) throws RestClientException;, +	 * Retrieve all headers of the resource specified by the URI template., +	 * <p>URI Template variables are expanded using the given map., +	HttpHeaders headForHeaders(String url, Map<String, ?> uriVariables) throws RestClientException;, +	 * <code>Location</code> header. This header typically indicates where the new resource is stored., +	 * <p>URI Template variables are expanded using the given URI variables, if any., +	URI postForLocation(String url, Object request, Object... uriVariables) throws RestClientException;, +	 * <code>Location</code> header. This header typically indicates where the new resource is stored., +	 * <p>URI Template variables are expanded using the given map., +	URI postForLocation(String url, Object request, Map<String, ?> uriVariables) throws RestClientException;, +	 * Create a new resource by POSTing the given object to the URI template,, +	 * and returns the representation found in the response., +	 * <p>URI Template variables are expanded using the given URI variables, if any., +	<T> T postForObject(String url, Object request, Class<T> responseType, Object... uriVariables), +	 * Create a new resource by POSTing the given object to the URI template,, +	 * and returns the representation found in the response., +	 * <p>URI Template variables are expanded using the given map., +	<T> T postForObject(String url, Object request, Class<T> responseType, Map<String, ?> uriVariables), +	 * Create a new resource by POSTing the given object to the URL,, +	 * and returns the representation found in the response., +	 * Create or update a resource by PUTting the given object to the URI., +	 * <p>URI Template variables are expanded using the given URI variables, if any., +	void put(String url, Object request, Object... uriVariables) throws RestClientException;, +	 * Creates a new resource by PUTting the given object to URI template., +	 * <p>URI Template variables are expanded using the given map., +	void put(String url, Object request, Map<String, ?> uriVariables) throws RestClientException;, +	 * Delete the resources at the specified URI., +	 * <p>URI Template variables are expanded using the given URI variables, if any., +	void delete(String url, Object... uriVariables) throws RestClientException;, +	 * Delete the resources at the specified URI., +	 * <p>URI Template variables are expanded using the given map., +	void delete(String url, Map<String, ?> uriVariables) throws RestClientException;, +	 * Return the value of the Allow header for the given URI., +	 * <p>URI Template variables are expanded using the given URI variables, if any., +	Set<HttpMethod> optionsForAllow(String url, Object... uriVariables) throws RestClientException;, +	 * Return the value of the Allow header for the given URI., +	 * <p>URI Template variables are expanded using the given map., +	Set<HttpMethod> optionsForAllow(String url, Map<String, ?> uriVariables) throws RestClientException;, +	 * Execute the HTTP methods to the given URI template, preparing the request with the, +	 * {@link RequestCallback}, and reading the response with a{@link ResponseExtractor}., +	 * <p>URI Template variables are expanded using the given URI variables, if any., +	<T> T execute(String url, HttpMethod method, RequestCallback requestCallback,, +			ResponseExtractor<T> responseExtractor, Object... uriVariables) throws RestClientException;, +	 * Execute the HTTP methods to the given URI template, preparing the request with the, +	 * {@link RequestCallback}, and reading the response with a {@link ResponseExtractor}., +	 * <p>URI Template variables are expanded using the given URI variables map., +	<T> T execute(String url, HttpMethod method, RequestCallback requestCallback,, +			ResponseExtractor<T> responseExtractor, Map<String, ?> uriVariables) throws RestClientException;, +	 * Execute the HTTP methods to the given URL, preparing the request with the, +	 * {@link RequestCallback}, and reading the response with a {@link ResponseExtractor}., +	<T> T execute(URI url, HttpMethod method, RequestCallback requestCallback,, +++ b/org.springframework.web/src/main/java/org/springframework/web/client/RestOperations.java, + * Interface specifying a basic set of RESTful operations. Implemented by {@link RestTemplate}., + * Not often used directly, but a useful option to enhance testability, as it can easily, + * be mocked or stubbed., + * @author Juergen Hoeller, + * @see RestTemplate, +	 * Retrieve a representation by doing a GET on the specified URL., +	 * The response (if any) is converted and returned., +	<T> T getForObject(String url, Class<T> responseType, Object... uriVariables) throws RestClientException;, +	 * Retrieve a representation by doing a GET on the URI template., +	 * The response (if any) is converted and returned., +	<T> T getForObject(String url, Class<T> responseType, Map<String, ?> uriVariables) throws RestClientException;, +	 * Retrieve a representation by doing a GET on the URL ., +	 * The response (if any) is converted and returned., +	 * Retrieve all headers of the resource specified by the URI template., +	 * <p>URI Template variables are expanded using the given URI variables, if any., +	HttpHeaders headForHeaders(String url, Object... uriVariables) throws RestClientException;, +	 * Retrieve all headers of the resource specified by the URI template., +	 * <p>URI Template variables are expanded using the given map., +	HttpHeaders headForHeaders(String url, Map<String, ?> uriVariables) throws RestClientException;, +	 * <code>Location</code> header. This header typically indicates where the new resource is stored., +	 * <p>URI Template variables are expanded using the given URI variables, if any., +	URI postForLocation(String url, Object request, Object... uriVariables) throws RestClientException;, +	 * <code>Location</code> header. This header typically indicates where the new resource is stored., +	 * <p>URI Template variables are expanded using the given map., +	URI postForLocation(String url, Object request, Map<String, ?> uriVariables) throws RestClientException;, +	 * Create a new resource by POSTing the given object to the URI template,, +	 * and returns the representation found in the response., +	 * <p>URI Template variables are expanded using the given URI variables, if any., +	<T> T postForObject(String url, Object request, Class<T> responseType, Object... uriVariables), +	 * Create a new resource by POSTing the given object to the URI template,, +	 * and returns the representation found in the response., +	 * <p>URI Template variables are expanded using the given map.]