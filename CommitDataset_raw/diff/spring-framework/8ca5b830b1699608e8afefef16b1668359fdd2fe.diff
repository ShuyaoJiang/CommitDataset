[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/RequestMappingInfoHandlerMapping.java, +import java.util.StringTokenizer;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.StringUtils;, +			MultiValueMap<String, String> vars = parseMatrixVariables(matrixVariables);, +	 * Parse the given string with matrix variables. An example string would look, +	 * like this {@code "q1=a;q1=b;q2=a,b,c"}. The resulting map would contain, +	 * keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and, +	 * {@code ["a","b","c"]} respectively., +	 * @param matrixVariables the unparsed matrix variables string, +	 * @return a map with matrix variable names and values (never {@code null}), +	 */, +	private static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {, +		MultiValueMap<String, String> result = new LinkedMultiValueMap<>();, +		if (!StringUtils.hasText(matrixVariables)) {, +			return result;, +		}, +		StringTokenizer pairs = new StringTokenizer(matrixVariables, ";");, +		while (pairs.hasMoreTokens()) {, +			String pair = pairs.nextToken();, +			int index = pair.indexOf('=');, +			if (index != -1) {, +				String name = pair.substring(0, index);, +				String rawValue = pair.substring(index + 1);, +				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {, +					result.add(name, value);, +				}, +			}, +			else {, +				result.add(pair, "");, +			}, +		}, +		return result;, +	}, +, +	/**, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/RequestMappingInfoHandlerMapping.java, +import java.util.StringTokenizer;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.StringUtils;, +			MultiValueMap<String, String> vars = parseMatrixVariables(matrixVariables);, +	 * Parse the given string with matrix variables. An example string would look, +	 * like this {@code "q1=a;q1=b;q2=a,b,c"}. The resulting map would contain, +	 * keys {@code "q1"} and {@code "q2"} with values {@code ["a","b"]} and, +	 * {@code ["a","b","c"]} respectively., +	 * @param matrixVariables the unparsed matrix variables string, +	 * @return a map with matrix variable names and values (never {@code null}), +	 */, +	private static MultiValueMap<String, String> parseMatrixVariables(String matrixVariables) {, +		MultiValueMap<String, String> result = new LinkedMultiValueMap<>();, +		if (!StringUtils.hasText(matrixVariables)) {, +			return result;, +		}, +		StringTokenizer pairs = new StringTokenizer(matrixVariables, ";");, +		while (pairs.hasMoreTokens()) {, +			String pair = pairs.nextToken();, +			int index = pair.indexOf('=');, +			if (index != -1) {, +				String name = pair.substring(0, index);, +				String rawValue = pair.substring(index + 1);, +				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {, +					result.add(name, value);, +				}, +			}, +			else {, +				result.add(pair, "");, +			}, +		}, +		return result;, +	}, +, +	/**, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerMapping.java, +	 * Set the {@link ContentTypeResolver} to use to determine requested media types.]