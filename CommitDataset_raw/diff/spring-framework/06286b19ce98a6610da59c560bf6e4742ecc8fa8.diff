[+++ b/org.springframework.web/src/main/java/org/springframework/web/client/RestOperations.java, +	/**, +	 * Retrieve a representation by doing a GET on the URL . The response (if any) is converted and returned., +	 *, +	 * @param url the URL, +	 * @param responseType the type of the return value, +	 * @return the converted object, +	 */, +	<T> T getForObject(URI url, Class<T> responseType) throws RestClientException;, +, +	/**, +	 * Retrieve all headers of the resource specified by the URL., +	 *, +	 * @param url the URL, +	 * @return all HTTP headers of that resource, +	 */, +	HttpHeaders headForHeaders(URI url) throws RestClientException;, +, +	 * @param uriVariables the variables to expand the template, +	 * Create a new resource by POSTing the given object to the URL, and returns the value of the, +	 * <code>Location</code> header. This header typically indicates where the new resource is stored., +	 *, +	 * @param url the URL, +	 * @param request the Object to be POSTed, may be <code>null</code>, +	 * @return the value for the <code>Location</code> header, +	 */, +	URI postForLocation(URI url, Object request) throws RestClientException;, +, +	/**, +	 * @param uriVariables the variables to expand the template, +	 * @param uriVariables the variables to expand the template, +	/**, +	 * Create a new resource by POSTing the given object to the URL, and returns the representation, +	 * found in the response., +	 *, +	 * @param url the URL, +	 * @param request the Object to be POSTed, may be <code>null</code>, +	 * @return the converted object, +	 */, +	<T> T postForObject(URI url, Object request, Class<T> responseType) throws RestClientException;, +, +	/**, +	 * Creates a new resource by PUTting the given object to URL., +	 *, +	 * @param url the URL, +	 * @param request the Object to be PUT, may be <code>null</code>, +	 */, +	void put(URI url, Object request) throws RestClientException;, +, +	/**, +	 * Delete the resources at the specified URL., +	 *, +	 * @param url the URL, +	 */, +	void delete(URI url) throws RestClientException;, +, +	/**, +	 * Return the value of the Allow header for the given URL., +	 *, +	 * @param url the URL, +	 * @return the value of the allow header, +	 */, +	Set<HttpMethod> optionsForAllow(URI url) throws RestClientException;, +, +	 * Execute the HTTP methods to the given URI template, preparing the request with the {@link RequestCallback}, and reading the, +	 * Execute the HTTP methods to the given URI template, preparing the request with the {@link RequestCallback}, and reading the, +	/**, +	 * Execute the HTTP methods to the given URL, preparing the request with the {@link RequestCallback}, and reading the, +	 * response with a {@link ResponseExtractor}., +	 *, +	 * @param url the URL, +	 * @param method the HTTP method (GET, POST, etc), +	 * @param requestCallback object that prepares the request, +	 * @param responseExtractor object that extracts the return value from the response, +	 * @return an arbitrary object, as returned by the {@link ResponseExtractor}, +	 */, +	<T> T execute(URI url,, +			HttpMethod method,, +			RequestCallback requestCallback,, +			ResponseExtractor<T> responseExtractor) throws RestClientException;, +, +++ b/org.springframework.web/src/main/java/org/springframework/web/client/RestOperations.java, +	/**, +	 * Retrieve a representation by doing a GET on the URL . The response (if any) is converted and returned., +	 *, +	 * @param url the URL, +	 * @param responseType the type of the return value, +	 * @return the converted object, +	 */, +	<T> T getForObject(URI url, Class<T> responseType) throws RestClientException;, +, +	/**, +	 * Retrieve all headers of the resource specified by the URL., +	 *, +	 * @param url the URL, +	 * @return all HTTP headers of that resource, +	 */, +	HttpHeaders headForHeaders(URI url) throws RestClientException;, +, +	 * @param uriVariables the variables to expand the template]