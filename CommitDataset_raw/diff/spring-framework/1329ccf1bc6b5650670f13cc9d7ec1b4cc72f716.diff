[+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/context/WebAppResourceTests.java, + * Copyright 2002-2017 the original author or authors., +import static org.hamcrest.Matchers.containsString;, +import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.forwardedUrl;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.handler;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;, +			.andExpect(content().contentType("application/javascript")), +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/context/WebAppResourceTests.java, + * Copyright 2002-2017 the original author or authors., +import static org.hamcrest.Matchers.containsString;, +import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.forwardedUrl;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.handler;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;, +			.andExpect(content().contentType("application/javascript")), +++ b/spring-web/src/test/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBeanTests.java, + * Copyright 2002-2017 the original author or authors., +import static org.junit.Assert.assertEquals;, +		this.servletRequest.setRequestURI("/flower.foobarbaz");, +		this.servletRequest.setRequestURI("/flower.foobarbaz");, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/context/WebAppResourceTests.java, + * Copyright 2002-2017 the original author or authors., +import static org.hamcrest.Matchers.containsString;, +import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.forwardedUrl;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.handler;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;, +			.andExpect(content().contentType("application/javascript")), +++ b/spring-web/src/test/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBeanTests.java, + * Copyright 2002-2017 the original author or authors., +import static org.junit.Assert.assertEquals;, +		this.servletRequest.setRequestURI("/flower.foobarbaz");, +		this.servletRequest.setRequestURI("/flower.foobarbaz");, +++ b/spring-web/src/test/java/org/springframework/web/accept/PathExtensionContentNegotiationStrategyTests.java, + * Copyright 2002-2017 the original author or authors., +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertTrue;, +	public void resolveMediaTypesFromMediaTypeFactory() throws Exception {, +		this.servletRequest.setRequestURI("test.foobar");, +		this.servletRequest.setRequestURI("test.foobar");, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/context/WebAppResourceTests.java, + * Copyright 2002-2017 the original author or authors., +import static org.hamcrest.Matchers.containsString;, +import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.forwardedUrl;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.handler;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;, +			.andExpect(content().contentType("application/javascript")), +++ b/spring-web/src/test/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBeanTests.java, + * Copyright 2002-2017 the original author or authors., +import static org.junit.Assert.assertEquals;, +		this.servletRequest.setRequestURI("/flower.foobarbaz");, +		this.servletRequest.setRequestURI("/flower.foobarbaz");, +++ b/spring-web/src/test/java/org/springframework/web/accept/PathExtensionContentNegotiationStrategyTests.java, + * Copyright 2002-2017 the original author or authors., +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertTrue;, +	public void resolveMediaTypesFromMediaTypeFactory() throws Exception {, +		this.servletRequest.setRequestURI("test.foobar");, +		this.servletRequest.setRequestURI("test.foobar");, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/accept/CompositeContentTypeResolverBuilderTests.java, + * Copyright 2002-2017 the original author or authors., +		exchange = MockServerHttpRequest.get("/flower.foobar").toExchange();, +		ServerWebExchange exchange = MockServerHttpRequest.get("/flower.foobar?format=json").toExchange();, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/context/WebAppResourceTests.java, + * Copyright 2002-2017 the original author or authors., +import static org.hamcrest.Matchers.containsString;, +import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.forwardedUrl;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.handler;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;, +			.andExpect(content().contentType("application/javascript")), +++ b/spring-web/src/test/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBeanTests.java, + * Copyright 2002-2017 the original author or authors., +import static org.junit.Assert.assertEquals;, +		this.servletRequest.setRequestURI("/flower.foobarbaz");, +		this.servletRequest.setRequestURI("/flower.foobarbaz");, +++ b/spring-web/src/test/java/org/springframework/web/accept/PathExtensionContentNegotiationStrategyTests.java, + * Copyright 2002-2017 the original author or authors., +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertTrue;, +	public void resolveMediaTypesFromMediaTypeFactory() throws Exception {, +		this.servletRequest.setRequestURI("test.foobar");, +		this.servletRequest.setRequestURI("test.foobar");, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/accept/CompositeContentTypeResolverBuilderTests.java, + * Copyright 2002-2017 the original author or authors., +		exchange = MockServerHttpRequest.get("/flower.foobar").toExchange();, +		ServerWebExchange exchange = MockServerHttpRequest.get("/flower.foobar?format=json").toExchange();, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/accept/PathExtensionContentTypeResolverTests.java, + * Copyright 2002-2017 the original author or authors., +		ServerWebExchange exchange = MockServerHttpRequest.get("test.foobar").toExchange();, +		ServerWebExchange exchange = MockServerHttpRequest.get("test.foobar").toExchange();, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/context/WebAppResourceTests.java, + * Copyright 2002-2017 the original author or authors.]