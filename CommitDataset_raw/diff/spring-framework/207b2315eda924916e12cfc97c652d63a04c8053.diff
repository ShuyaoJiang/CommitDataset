[+++ b/org.springframework.context/src/main/java/org/springframework/validation/DataBinder.java, +		if (!ObjectUtils.isEmpty(validationHints) && validator instanceof SmartValidator) {, +++ b/org.springframework.context/src/main/java/org/springframework/validation/DataBinder.java, +		if (!ObjectUtils.isEmpty(validationHints) && validator instanceof SmartValidator) {, +++ b/org.springframework.context/src/main/java/org/springframework/validation/ValidationUtils.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.util.ObjectUtils;, +	 * @throws IllegalArgumentException if either of the <code>Validator</code> or <code>Errors</code> arguments is, +	 * <code>null</code>, or if the supplied <code>Validator</code> does not {@link Validator#supports(Class) support}, +		invokeValidator(validator, obj, errors, (Class[]) null);, +	}, +, +	/**, +	 * Invoke the given {@link Validator}/{@link SmartValidator} for the supplied object and, +	 * {@link Errors} instance., +	 * @param validator the <code>Validator</code> to be invoked (must not be <code>null</code>), +	 * @param obj the object to bind the parameters to, +	 * @param errors the {@link Errors} instance that should store the errors (must not be <code>null</code>), +	 * @param validationHints one or more hint objects to be passed to the validation engine, +	 * @throws IllegalArgumentException if either of the <code>Validator</code> or <code>Errors</code> arguments is, +	 * <code>null</code>, or if the supplied <code>Validator</code> does not {@link Validator#supports(Class) support}, +	 * the validation of the supplied object's type, +	 */, +	public static void invokeValidator(Validator validator, Object obj, Errors errors, Object... validationHints) {, +		if (!ObjectUtils.isEmpty(validationHints) && validator instanceof SmartValidator) {, +			((SmartValidator) validator).validate(obj, errors, validationHints);, +		}, +		else {, +		}]