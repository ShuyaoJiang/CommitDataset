[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java, +	protected MultiValueMap<String, String> findSubscriptionsInternal(String destination, Message<?> message) {, +		MultiValueMap<String, String> result = this.destinationCache.getSubscriptions(destination, message);, +	private MultiValueMap<String, String> filterSubscriptions(, +			MultiValueMap<String, String> allMatches, Message<?> message) {, +						if (size() > getCacheLimit()) {, +							accessCache.remove(eldest.getKey());, +							return true;, +						}, +						else {, +							return false;, +						}, +		public LinkedMultiValueMap<String, String> getSubscriptions(String destination, Message<?> message) {, +			LinkedMultiValueMap<String, String> result = this.accessCache.get(destination);, +			if (result == null) {, +					result = new LinkedMultiValueMap<String, String>();, +					for (SessionSubscriptionInfo info : subscriptionRegistry.getAllSubscriptions()) {, +						for (String destinationPattern : info.getDestinations()) {, +							if (getPathMatcher().match(destinationPattern, destination)) {, +								for (Subscription subscription : info.getSubscriptions(destinationPattern)) {, +									result.add(info.sessionId, subscription.getId());, +						}, +					}, +					if (!result.isEmpty()) {, +						this.updateCache.put(destination, result.deepCopy());, +						this.accessCache.put(destination, result);, +					}, +				}, +			}, +			return result;, +		}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java, +	protected MultiValueMap<String, String> findSubscriptionsInternal(String destination, Message<?> message) {, +		MultiValueMap<String, String> result = this.destinationCache.getSubscriptions(destination, message);, +	private MultiValueMap<String, String> filterSubscriptions(, +			MultiValueMap<String, String> allMatches, Message<?> message) {, +						if (size() > getCacheLimit()) {, +							accessCache.remove(eldest.getKey());, +							return true;, +						}, +						else {, +							return false;, +						}, +		public LinkedMultiValueMap<String, String> getSubscriptions(String destination, Message<?> message) {, +			LinkedMultiValueMap<String, String> result = this.accessCache.get(destination);, +			if (result == null) {, +					result = new LinkedMultiValueMap<String, String>();, +					for (SessionSubscriptionInfo info : subscriptionRegistry.getAllSubscriptions()) {, +						for (String destinationPattern : info.getDestinations()) {, +							if (getPathMatcher().match(destinationPattern, destination)) {, +								for (Subscription subscription : info.getSubscriptions(destinationPattern)) {, +									result.add(info.sessionId, subscription.getId());, +						}, +					}, +					if (!result.isEmpty()) {, +						this.updateCache.put(destination, result.deepCopy());, +						this.accessCache.put(destination, result);, +					}, +				}, +			}, +			return result;, +		}, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistryTests.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +	@Test // SPR-13555, +	public void cacheLimitExceeded() throws Exception {, +		this.registry.setCacheLimit(1);, +		this.registry.registerSubscription(subscribeMessage("sess1", "2", "/bar"));, +, +		assertEquals(1, this.registry.findSubscriptions(createMessage("/foo")).size());, +		assertEquals(1, this.registry.findSubscriptions(createMessage("/bar")).size());, +, +		this.registry.registerSubscription(subscribeMessage("sess2", "2", "/bar"));, +		assertEquals(2, this.registry.findSubscriptions(createMessage("/foo")).size());, +		assertEquals(2, this.registry.findSubscriptions(createMessage("/bar")).size());]