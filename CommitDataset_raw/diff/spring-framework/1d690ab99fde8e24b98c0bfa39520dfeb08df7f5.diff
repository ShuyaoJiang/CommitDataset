[+++ b/org.springframework.context/src/main/java/org/springframework/instrument/classloading/jboss/JBossClassLoaderAdapter.java, + * Copyright 2011 the original author or authors., +, + * Simple interface used for handling the different JBoss class loader adapters., +interface JBossClassLoaderAdapter {, +	void addTransformer(ClassFileTransformer transformer);, +	ClassLoader getInstrumentableClassLoader();, +++ b/org.springframework.context/src/main/java/org/springframework/instrument/classloading/jboss/JBossClassLoaderAdapter.java, + * Copyright 2011 the original author or authors., +, + * Simple interface used for handling the different JBoss class loader adapters., +interface JBossClassLoaderAdapter {, +	void addTransformer(ClassFileTransformer transformer);, +	ClassLoader getInstrumentableClassLoader();, +++ b/org.springframework.context/src/main/java/org/springframework/instrument/classloading/jboss/JBossLoadTimeWeaver.java, + * Currently supports JBoss 5, 6 and 7 (since Spring 3.1)., +	private final JBossClassLoaderAdapter adapter;, +		String loaderClassName = classLoader.getClass().getName();, +, +		if (loaderClassName.startsWith("org.jboss.classloader")) {, +			// JBoss AS 5 or JBoss AS 6, +			this.adapter = new JBossMCAdapter(classLoader);, +		} else if (loaderClassName.startsWith("org.jboss.modules")) {, +			// JBoss AS 7, +			this.adapter = new JBossModulesAdapter(classLoader);, +		} else {, +			throw new IllegalArgumentException("Unexpected classloader type: " + loaderClassName);, +		}, +		this.adapter.addTransformer(transformer);, +		return this.adapter.getInstrumentableClassLoader();, +++ b/org.springframework.context/src/main/java/org/springframework/instrument/classloading/jboss/JBossClassLoaderAdapter.java, + * Copyright 2011 the original author or authors., +, + * Simple interface used for handling the different JBoss class loader adapters., +interface JBossClassLoaderAdapter {, +	void addTransformer(ClassFileTransformer transformer);, +	ClassLoader getInstrumentableClassLoader();, +++ b/org.springframework.context/src/main/java/org/springframework/instrument/classloading/jboss/JBossLoadTimeWeaver.java, + * Currently supports JBoss 5, 6 and 7 (since Spring 3.1)., +	private final JBossClassLoaderAdapter adapter;, +		String loaderClassName = classLoader.getClass().getName();, +, +		if (loaderClassName.startsWith("org.jboss.classloader")) {, +			// JBoss AS 5 or JBoss AS 6, +			this.adapter = new JBossMCAdapter(classLoader);, +		} else if (loaderClassName.startsWith("org.jboss.modules")) {, +			// JBoss AS 7, +			this.adapter = new JBossModulesAdapter(classLoader);, +		} else {, +			throw new IllegalArgumentException("Unexpected classloader type: " + loaderClassName);, +		}, +		this.adapter.addTransformer(transformer);, +		return this.adapter.getInstrumentableClassLoader();, +++ b/org.springframework.context/src/main/java/org/springframework/instrument/classloading/jboss/JBossMCAdapter.java, +/*, + * Copyright 2006-2009 the original author or authors., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + *      http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.instrument.classloading.jboss;, +, +import java.lang.instrument.ClassFileTransformer;, +import java.lang.reflect.InvocationHandler;, +import java.lang.reflect.Method;, +import java.lang.reflect.Proxy;, +, +import org.springframework.util.Assert;, +import org.springframework.util.ReflectionUtils;, +, +/**, + * Reflective wrapper around a JBoss 5 and 6 class loader methods (discovered and called, + * through reflection) for load time weaving., + * , + * @author Costin Leau, + */, +class JBossMCAdapter implements JBossClassLoaderAdapter {, +, +	private static final String TRANSLATOR_NAME = "org.jboss.util.loading.Translator";, +	private static final String POLICY_NAME = "org.jboss.classloader.spi.base.BaseClassLoaderPolicy";, +	private static final String DOMAIN_NAME = "org.jboss.classloader.spi.base.BaseClassLoaderDomain";, +	private static final String DEDICATED_SYSTEM = "org.jboss.classloader.spi.ClassLoaderSystem";, +	private static final String LOADER_NAME = "org.jboss.classloader.spi.base.BaseClassLoader";, +	private static final String GET_POLICY = "getPolicy";, +	private static final String GET_DOMAIN = "getClassLoaderDomain";, +	private static final String GET_SYSTEM = "getClassLoaderSystem";, +, +	// available since JBoss AS 5.1.0 / MC 2.0.6 (allows multiple transformers to be added), +	private static final String ADD_TRANSLATOR_NAME = "addTranslator";, +	// available since JBoss AS 5.0.0 / MC 2.0.1 (allows only one transformer to be added), +	private static final String SET_TRANSLATOR_NAME = "setTranslator";]