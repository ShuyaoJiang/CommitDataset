[+++ b/org.springframework.aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.beans.factory.support.AbstractBeanDefinition;, +		// Copy autowire settings from original bean definition., +		if (targetDefinition instanceof AbstractBeanDefinition) {, +			scopedProxyDefinition.copyQualifiersFrom((AbstractBeanDefinition) targetDefinition);, +		}, +		scopedProxyDefinition.setPrimary(targetDefinition.isPrimary());, +		targetDefinition.setPrimary(false);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.beans.factory.support.AbstractBeanDefinition;, +		// Copy autowire settings from original bean definition., +		if (targetDefinition instanceof AbstractBeanDefinition) {, +			scopedProxyDefinition.copyQualifiersFrom((AbstractBeanDefinition) targetDefinition);, +		}, +		scopedProxyDefinition.setPrimary(targetDefinition.isPrimary());, +		targetDefinition.setPrimary(false);, +++ b/org.springframework.context/src/test/java/org/springframework/beans/factory/support/QualifierAnnotationAutowireContextTests.java, +import static org.junit.Assert.*;, +, +import org.springframework.aop.scope.ScopedProxyUtils;, +import org.springframework.beans.factory.config.BeanDefinitionHolder;, +		context.registerBeanDefinition(JUERGEN,, +				ScopedProxyUtils.createScopedProxy(new BeanDefinitionHolder(person, JUERGEN), context, true).getBeanDefinition());, +		context.registerBeanDefinition("autowired",, +				new RootBeanDefinition(QualifiedMethodParameterTestBean.class));, +		AnnotationConfigUtils.registerAnnotationConfigProcessors(context);, +		context.refresh();, +		QualifiedMethodParameterTestBean bean =, +				(QualifiedMethodParameterTestBean) context.getBean("autowired");, +		assertEquals(JUERGEN, bean.getPerson().getName());, +	}, +, +	@Test, +	public void testAutowiredMethodParameterWithStaticallyQualifiedCandidateAmongOthers() {, +		GenericApplicationContext context = new GenericApplicationContext();, +		ConstructorArgumentValues cavs = new ConstructorArgumentValues();, +		cavs.addGenericArgumentValue(JUERGEN);, +		RootBeanDefinition person = new RootBeanDefinition(QualifiedPerson.class, cavs, null);, +		ConstructorArgumentValues cavs2 = new ConstructorArgumentValues();, +		cavs2.addGenericArgumentValue(MARK);, +		RootBeanDefinition person2 = new RootBeanDefinition(Person.class, cavs2, null);, +		context.registerBeanDefinition(MARK, person2);, +		public QualifiedPerson() {, +			super(null);, +		}, +]