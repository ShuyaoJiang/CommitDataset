[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +	 * <p>If no implementation is configured then we default to , +	 * {@code org.springframework.web.servlet.support.DefaultFlashMapManager}., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +	 * <p>If no implementation is configured then we default to , +	 * {@code org.springframework.web.servlet.support.DefaultFlashMapManager}., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FlashMap.java, + * recipient. On a redirect, the target URL is known and for example, + * {@code org.springframework.web.servlet.view.RedirectView} has the, + * opportunity to automatically update the current FlashMap with target, + * URL information ., + * <p>Annotated controllers will usually not use this type directly., + * See {@code org.springframework.web.servlet.mvc.support.RedirectAttributes}, + * for an overview of using flash attributes in annotated controllers. , +	 * Create a new instance., +	 */, +	public FlashMap() {, +		this.createdBy = 0;, +	}, +, +	/**, +	 * @param path the URI path, +	 * Return the target URL path or {@code null}., +	 * Only simple type, non-null parameter values are used., +	 * @see BeanUtils#isSimpleValueType(Class), +	 * @param name the name of the expected parameter, never {@code null}, +	 * @param value the value for the expected parameter, never {@code null}, +	 * Start the expiration period for this instance., +	 * @param timeToLive the number of seconds before expiration, +	 * Whether this instance has expired depending on the amount of elapsed, +	 * time since the call to {@link #startExpirationPeriod}., +	 * Compare two FlashMaps and prefer the one that specifies a target URL , +	 * path or has more target URL parameters. Before comparing FlashMap, +	 * instances ensure that they match a given request., +		result.append(", targetRequestPath=").append(this.targetRequestPath);, +		result.append(", targetRequestParams=" + this.targetRequestParams.toString()).append("]");, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +	 * <p>If no implementation is configured then we default to , +	 * {@code org.springframework.web.servlet.support.DefaultFlashMapManager}., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FlashMap.java, + * recipient. On a redirect, the target URL is known and for example, + * {@code org.springframework.web.servlet.view.RedirectView} has the, + * opportunity to automatically update the current FlashMap with target, + * URL information ., + * <p>Annotated controllers will usually not use this type directly., + * See {@code org.springframework.web.servlet.mvc.support.RedirectAttributes}, + * for an overview of using flash attributes in annotated controllers. , +	 * Create a new instance., +	 */, +	public FlashMap() {, +		this.createdBy = 0;, +	}, +, +	/**, +	 * @param path the URI path, +	 * Return the target URL path or {@code null}., +	 * Only simple type, non-null parameter values are used., +	 * @see BeanUtils#isSimpleValueType(Class), +	 * @param name the name of the expected parameter, never {@code null}, +	 * @param value the value for the expected parameter, never {@code null}, +	 * Start the expiration period for this instance., +	 * @param timeToLive the number of seconds before expiration, +	 * Whether this instance has expired depending on the amount of elapsed, +	 * time since the call to {@link #startExpirationPeriod}., +	 * Compare two FlashMaps and prefer the one that specifies a target URL , +	 * path or has more target URL parameters. Before comparing FlashMap, +	 * instances ensure that they match a given request., +		result.append(", targetRequestPath=").append(this.targetRequestPath);, +		result.append(", targetRequestParams=" + this.targetRequestParams.toString()).append("]");, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FlashMapManager.java, + * A strategy interface for storing, retrieving, and managing {@code FlashMap}, + * instances. See {@link FlashMap} for a general overview of flash attributes., + * <p>A FlashMapManager is invoked at the beginning and at the end of requests., + * For each request it retrieves an "input" FlashMap with attributes passed , + * from a previous request (if any) and creates an "output" FlashMap with , + * attributes to pass to a subsequent request. "Input" and "output" FlashMap , + * instances are exposed as request attributes and are accessible via methods, + * in {@code org.springframework.web.servlet.support.RequestContextUtils}., + * , + * <p>Annotated controllers are most likely to store and access flash attributes, + * through their model. , + * See {@code org.springframework.web.servlet.mvc.support.RedirectAttributes}., +	 * Name of request attribute that holds a read-only , +	 * {@code Map<String, Object>} with "input" flash attributes if any., +	 * attributes to save for a subsequent request., +	 * Perform the following tasks unless the {@link #OUTPUT_FLASH_MAP_ATTRIBUTE} , +	 * 	<li>Find the "input" FlashMap, expose it under the request attribute , +	 * {@link #INPUT_FLASH_MAP_ATTRIBUTE}, and remove it from underlying storage., +	 * 	<li>Create the "output" FlashMap and expose it under the request , +	 * attribute {@link #OUTPUT_FLASH_MAP_ATTRIBUTE}., +	 * 	<li>Clean expired FlashMap instances., +	 * Start the expiration period of the "output" FlashMap save it in the, +	 * underlying storage., +	 * <p>The "output" FlashMap should not be saved if it is empty or if it was, +	 * not created by the current FlashMapManager instance., +	 * @param request the current request, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +	 * <p>If no implementation is configured then we default to , +	 * {@code org.springframework.web.servlet.support.DefaultFlashMapManager}., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FlashMap.java]