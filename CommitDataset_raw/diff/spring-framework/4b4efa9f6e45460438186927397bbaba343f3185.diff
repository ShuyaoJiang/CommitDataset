[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.context.EmbeddedValueResolverAware;, +import org.springframework.util.StringValueResolver;, +		implements EmbeddedValueResolverAware, SmartLifecycle {, +	private StringValueResolver valueResolver;, +, +	@Override, +	public void setEmbeddedValueResolver(StringValueResolver resolver) {, +		this.valueResolver = resolver;, +	}, +, +		String[] destinations = resolveEmbeddedValuesInDestinations(annotation.value());, +				new DestinationPatternsMessageCondition(destinations, this.pathMatcher));, +		String[] destinations = resolveEmbeddedValuesInDestinations(annotation.value());, +				new DestinationPatternsMessageCondition(destinations, this.pathMatcher));, +	}, +, +	/**, +	 * Resolve placeholder values in the given array of destinations., +	 * @return a new array with updated destinations, +	 */, +	protected String[] resolveEmbeddedValuesInDestinations(String[] destinations) {, +		if (this.valueResolver == null) {, +			return destinations;, +		}, +		String[] result = new String[destinations.length];, +		for (int i = 0; i < destinations.length; i++) {, +			result[i] = this.valueResolver.resolveStringValue(destinations[i]);, +		}, +		return result;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.context.EmbeddedValueResolverAware;, +import org.springframework.util.StringValueResolver;, +		implements EmbeddedValueResolverAware, SmartLifecycle {, +	private StringValueResolver valueResolver;, +, +	@Override, +	public void setEmbeddedValueResolver(StringValueResolver resolver) {, +		this.valueResolver = resolver;, +	}, +, +		String[] destinations = resolveEmbeddedValuesInDestinations(annotation.value());, +				new DestinationPatternsMessageCondition(destinations, this.pathMatcher));, +		String[] destinations = resolveEmbeddedValuesInDestinations(annotation.value());, +				new DestinationPatternsMessageCondition(destinations, this.pathMatcher));, +	}, +, +	/**, +	 * Resolve placeholder values in the given array of destinations., +	 * @return a new array with updated destinations, +	 */, +	protected String[] resolveEmbeddedValuesInDestinations(String[] destinations) {, +		if (this.valueResolver == null) {, +			return destinations;, +		}, +		String[] result = new String[destinations.length];, +		for (int i = 0; i < destinations.length; i++) {, +			result[i] = this.valueResolver.resolveStringValue(destinations[i]);, +		}, +		return result;, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandlerTests.java, +import org.mockito.MockitoAnnotations;, +import static org.hamcrest.Matchers.is;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.assertTrue;, +import static org.mockito.BDDMockito.given;, +import static org.mockito.Matchers.any;, +import static org.mockito.Matchers.anyObject;, +		this.testController = new TestController();, +		this.messageHandler.registerHandler(this.testController);, +		this.messageHandler.registerHandler(this.testController);, +		this.messageHandler.registerHandler(this.testController);, +		this.messageHandler.registerHandler(this.testController);, +		this.messageHandler.registerHandler(this.testController);, +		this.messageHandler.registerHandler(this.testController);, +		this.messageHandler.registerHandler(this.testController);, +, +		this.messageHandler.registerHandler(this.testController);, +		this.messageHandler.registerHandler(this.testController);, +		this.messageHandler.registerHandler(this.testController);, +	@Test, +	public void placeholder() throws Exception {, +		Message<?> message = createMessage("/pre/myValue");, +		this.messageHandler.setEmbeddedValueResolver(value -> ("/${myProperty}".equals(value) ? "/myValue" : value));, +		this.messageHandler.registerHandler(this.testController);, +		this.messageHandler.handleMessage(message);, +, +		assertEquals("placeholder", this.testController.method);, +	}, +, +, +, +		@MessageMapping("/${myProperty}"), +		public void placeholder() {, +			this.method = "placeholder";]