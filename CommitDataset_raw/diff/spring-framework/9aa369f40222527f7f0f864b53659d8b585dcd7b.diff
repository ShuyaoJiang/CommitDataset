[+++ b/spring-web/src/main/java/org/springframework/web/bind/WebDataBinder.java, +		if (fieldDefaultPrefix != null) {, +		if (fieldMarkerPrefix != null) {, +	 * <p>The default implementation delegates to {@link #getEmptyValue(Class)}, +	 * if the field type is known, otherwise falls back to {@code null}., +	 * @param field the name of the field, +	 * @param fieldType the type of the field, +	 * @return the empty value (for most fields: {@code null}), +	 */, +	@Nullable, +	protected Object getEmptyValue(String field, @Nullable Class<?> fieldType) {, +		return (fieldType != null ? getEmptyValue(fieldType) : null);, +	}, +, +	/**, +	 * Determine an empty value for the specified field., +	 * <p>The default implementation returns:, +	 * @return the empty value (for most fields: {@code null}), +	 * @since 5.0, +	public Object getEmptyValue(Class<?> fieldType) {, +		catch (IllegalArgumentException ex) {, +			logger.debug("Failed to create default value - falling back to null: " + ex.getMessage());, +		// Default value: null., +, +	 * (in case of a multipart request). To be called by subclasses., +++ b/spring-web/src/main/java/org/springframework/web/bind/WebDataBinder.java, +		if (fieldDefaultPrefix != null) {, +		if (fieldMarkerPrefix != null) {, +	 * <p>The default implementation delegates to {@link #getEmptyValue(Class)}, +	 * if the field type is known, otherwise falls back to {@code null}., +	 * @param field the name of the field, +	 * @param fieldType the type of the field, +	 * @return the empty value (for most fields: {@code null}), +	 */, +	@Nullable, +	protected Object getEmptyValue(String field, @Nullable Class<?> fieldType) {, +		return (fieldType != null ? getEmptyValue(fieldType) : null);, +	}, +, +	/**, +	 * Determine an empty value for the specified field., +	 * <p>The default implementation returns:, +	 * @return the empty value (for most fields: {@code null}), +	 * @since 5.0, +	public Object getEmptyValue(Class<?> fieldType) {, +		catch (IllegalArgumentException ex) {, +			logger.debug("Failed to create default value - falling back to null: " + ex.getMessage());, +		// Default value: null., +, +	 * (in case of a multipart request). To be called by subclasses., +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java, +, +		String fieldDefaultPrefix = binder.getFieldDefaultPrefix();, +		String fieldMarkerPrefix = binder.getFieldMarkerPrefix();, +, +			String paramName = paramNames[i];, +			Class<?> paramType = paramTypes[i];, +			Object value = webRequest.getParameterValues(paramName);, +			if (value == null) {, +				if (fieldDefaultPrefix != null) {, +					value = webRequest.getParameter(fieldDefaultPrefix + paramName);, +				}, +				if (value == null && fieldMarkerPrefix != null) {, +					if (webRequest.getParameter(fieldMarkerPrefix + paramName) != null) {, +						value = binder.getEmptyValue(paramType);, +					}, +				}, +			}, +				args[i] = (value != null ?, +						binder.convertIfNecessary(value, paramType, new MethodParameter(ctor, i)) : null);, +, +++ b/spring-web/src/main/java/org/springframework/web/bind/WebDataBinder.java, +		if (fieldDefaultPrefix != null) {, +		if (fieldMarkerPrefix != null) {, +	 * <p>The default implementation delegates to {@link #getEmptyValue(Class)}, +	 * if the field type is known, otherwise falls back to {@code null}., +	 * @param field the name of the field, +	 * @param fieldType the type of the field, +	 * @return the empty value (for most fields: {@code null}), +	 */, +	@Nullable, +	protected Object getEmptyValue(String field, @Nullable Class<?> fieldType) {, +		return (fieldType != null ? getEmptyValue(fieldType) : null);, +	}, +, +	/**, +	 * Determine an empty value for the specified field., +	 * <p>The default implementation returns:, +	 * @return the empty value (for most fields: {@code null}), +	 * @since 5.0, +	public Object getEmptyValue(Class<?> fieldType) {, +		catch (IllegalArgumentException ex) {, +			logger.debug("Failed to create default value - falling back to null: " + ex.getMessage());, +		// Default value: null., +, +	 * (in case of a multipart request). To be called by subclasses., +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java, +, +		String fieldDefaultPrefix = binder.getFieldDefaultPrefix();, +		String fieldMarkerPrefix = binder.getFieldMarkerPrefix();]