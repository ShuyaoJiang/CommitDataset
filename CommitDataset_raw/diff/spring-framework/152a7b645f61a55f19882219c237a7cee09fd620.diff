[+++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +import java.util.Collection;, +import org.springframework.util.ObjectUtils;, +		if (result.getClass().isArray()) {, +			Object[] events = ObjectUtils.toObjectArray(result);, +			for (Object event : events) {, +				publishEvent(event);, +			}, +		}, +		else if (result instanceof Collection<?>) {, +			Collection<?> events = (Collection<?>) result;, +			for (Object event : events) {, +				publishEvent(event);, +			}, +		}, +		else {, +			publishEvent(result);, +		}, +	}, +, +	private void publishEvent(Object event) {, +		if (event != null) {, +			this.applicationContext.publishEvent(event);, +		}, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +import java.util.Collection;, +import org.springframework.util.ObjectUtils;, +		if (result.getClass().isArray()) {, +			Object[] events = ObjectUtils.toObjectArray(result);, +			for (Object event : events) {, +				publishEvent(event);, +			}, +		}, +		else if (result instanceof Collection<?>) {, +			Collection<?> events = (Collection<?>) result;, +			for (Object event : events) {, +				publishEvent(event);, +			}, +		}, +		else {, +			publishEvent(result);, +		}, +	}, +, +	private void publishEvent(Object event) {, +		if (event != null) {, +			this.applicationContext.publishEvent(event);, +		}, +++ b/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java, +import java.util.LinkedHashSet;, +import java.util.Set;, +		this.eventCollector.assertEvent(listener, new TestEvent(replyEventListener, event.getId(), "dummy")); // reply, +	public void arrayReply() {, +		load(TestEventListener.class, ReplyEventListener.class);, +		AnotherTestEvent event = new AnotherTestEvent(this, new String[]{"first", "second"});, +		ReplyEventListener replyEventListener = this.context.getBean(ReplyEventListener.class);, +		TestEventListener listener = this.context.getBean(TestEventListener.class);, +, +		this.eventCollector.assertNoEventReceived(listener);, +		this.eventCollector.assertNoEventReceived(replyEventListener);, +		this.context.publishEvent(event);, +		this.eventCollector.assertEvent(replyEventListener, event);, +		this.eventCollector.assertEvent(listener, "first", "second"); // reply, +		this.eventCollector.assertTotalEventsCount(3);, +	}, +, +	@Test, +	public void collectionReply() {, +		load(TestEventListener.class, ReplyEventListener.class);, +		Set<Object> replies = new LinkedHashSet<>();, +		replies.add("first");, +		replies.add(4L);, +		replies.add("third");, +		AnotherTestEvent event = new AnotherTestEvent(this, replies);, +		ReplyEventListener replyEventListener = this.context.getBean(ReplyEventListener.class);, +		TestEventListener listener = this.context.getBean(TestEventListener.class);, +, +		this.eventCollector.assertNoEventReceived(listener);, +		this.eventCollector.assertNoEventReceived(replyEventListener);, +		this.context.publishEvent(event);, +		this.eventCollector.assertEvent(replyEventListener, event);, +		this.eventCollector.assertEvent(listener, "first", "third"); // reply (no listener for 4L), +		this.eventCollector.assertTotalEventsCount(3);, +	}, +, +	@Test, +	public void collectionReplyNullValue() {, +		load(TestEventListener.class, ReplyEventListener.class);, +		AnotherTestEvent event = new AnotherTestEvent(this, Arrays.asList(null, "test"));, +		ReplyEventListener replyEventListener = this.context.getBean(ReplyEventListener.class);, +		TestEventListener listener = this.context.getBean(TestEventListener.class);, +, +		this.eventCollector.assertNoEventReceived(listener);, +		this.eventCollector.assertNoEventReceived(replyEventListener);, +		this.context.publishEvent(event);, +		this.eventCollector.assertEvent(replyEventListener, event);, +		this.eventCollector.assertEvent(listener, "test");, +		this.eventCollector.assertTotalEventsCount(2);, +	}, +]