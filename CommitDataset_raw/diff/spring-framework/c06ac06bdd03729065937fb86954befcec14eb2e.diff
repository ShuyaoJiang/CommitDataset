[+++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsMessagingTemplate.java, +import org.springframework.jms.InvalidDestinationException;, +import org.springframework.messaging.core.DestinationResolutionException;, +		return this.jmsTemplate;, +	 * Return the {@link MessageConverter} to use to convert a {@link Message}, +	 * from the messaging to and from a {@link javax.jms.Message}., +	public MessageConverter getJmsMessageConverter() {, +		return this.jmsMessageConverter;, +		Assert.notNull(getJmsTemplate(), "Property 'jmsTemplate' is required");, +		Assert.notNull(getJmsMessageConverter(), "Property 'jmsMessageConverter' is required");, +			throw convertJmsException(ex);, +			throw convertJmsException(ex);, +			return convertJmsMessage(jmsMessage);, +			throw convertJmsException(ex);, +			return convertJmsMessage(jmsMessage);, +			throw convertJmsException(ex);, +			return convertJmsMessage(jmsMessage);, +			throw convertJmsException(ex);, +			return convertJmsMessage(jmsMessage);, +			throw convertJmsException(ex);, +		return new MessagingMessageCreator(message, getJmsMessageConverter());, +	protected Message<?> convertJmsMessage(javax.jms.Message message) {, +			return (Message<?>) getJmsMessageConverter().fromMessage(message);, +		catch (Exception ex) {, +	protected MessagingException convertJmsException(JmsException ex) {, +		if (ex instanceof org.springframework.jms.support.destination.DestinationResolutionException ||, +				ex instanceof InvalidDestinationException) {, +			return new DestinationResolutionException(ex.getMessage(), ex);, +		}, +		if (ex instanceof org.springframework.jms.support.converter.MessageConversionException) {, +			return new MessageConversionException(ex.getMessage(), ex);, +		}, +		// Fallback, +		return new MessagingException(ex.getMessage(), ex);, +			catch (Exception ex) {, +++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsMessagingTemplate.java, +import org.springframework.jms.InvalidDestinationException;, +import org.springframework.messaging.core.DestinationResolutionException;, +		return this.jmsTemplate;, +	 * Return the {@link MessageConverter} to use to convert a {@link Message}, +	 * from the messaging to and from a {@link javax.jms.Message}., +	public MessageConverter getJmsMessageConverter() {, +		return this.jmsMessageConverter;, +		Assert.notNull(getJmsTemplate(), "Property 'jmsTemplate' is required");, +		Assert.notNull(getJmsMessageConverter(), "Property 'jmsMessageConverter' is required");, +			throw convertJmsException(ex);, +			throw convertJmsException(ex);, +			return convertJmsMessage(jmsMessage);, +			throw convertJmsException(ex);, +			return convertJmsMessage(jmsMessage);, +			throw convertJmsException(ex);, +			return convertJmsMessage(jmsMessage);, +			throw convertJmsException(ex);, +			return convertJmsMessage(jmsMessage);, +			throw convertJmsException(ex);, +		return new MessagingMessageCreator(message, getJmsMessageConverter());, +	protected Message<?> convertJmsMessage(javax.jms.Message message) {, +			return (Message<?>) getJmsMessageConverter().fromMessage(message);, +		catch (Exception ex) {, +	protected MessagingException convertJmsException(JmsException ex) {, +		if (ex instanceof org.springframework.jms.support.destination.DestinationResolutionException ||, +				ex instanceof InvalidDestinationException) {, +			return new DestinationResolutionException(ex.getMessage(), ex);, +		}, +		if (ex instanceof org.springframework.jms.support.converter.MessageConversionException) {, +			return new MessageConversionException(ex.getMessage(), ex);, +		}, +		// Fallback, +		return new MessagingException(ex.getMessage(), ex);, +			catch (Exception ex) {, +++ /dev/null, +++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsMessagingTemplate.java, +import org.springframework.jms.InvalidDestinationException;, +import org.springframework.messaging.core.DestinationResolutionException;, +		return this.jmsTemplate;, +	 * Return the {@link MessageConverter} to use to convert a {@link Message}, +	 * from the messaging to and from a {@link javax.jms.Message}., +	public MessageConverter getJmsMessageConverter() {, +		return this.jmsMessageConverter;, +		Assert.notNull(getJmsTemplate(), "Property 'jmsTemplate' is required");, +		Assert.notNull(getJmsMessageConverter(), "Property 'jmsMessageConverter' is required");, +			throw convertJmsException(ex);, +			throw convertJmsException(ex);, +			return convertJmsMessage(jmsMessage);, +			throw convertJmsException(ex);, +			return convertJmsMessage(jmsMessage);, +			throw convertJmsException(ex);, +			return convertJmsMessage(jmsMessage);, +			throw convertJmsException(ex);, +			return convertJmsMessage(jmsMessage);, +			throw convertJmsException(ex);, +		return new MessagingMessageCreator(message, getJmsMessageConverter());, +	protected Message<?> convertJmsMessage(javax.jms.Message message) {, +			return (Message<?>) getJmsMessageConverter().fromMessage(message);, +		catch (Exception ex) {, +	protected MessagingException convertJmsException(JmsException ex) {, +		if (ex instanceof org.springframework.jms.support.destination.DestinationResolutionException ||, +				ex instanceof InvalidDestinationException) {, +			return new DestinationResolutionException(ex.getMessage(), ex);, +		}]