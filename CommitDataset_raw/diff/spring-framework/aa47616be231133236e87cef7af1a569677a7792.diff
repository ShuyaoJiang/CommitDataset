[+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingMessageConversionIntegrationTests.java, +import org.springframework.web.bind.annotation.RequestMapping;, +	public void byteBufferResponseBodyWithPublisher() throws Exception {, +		assertEquals(expected, performGet("/raw-response/publisher", JSON, Person.class).getBody());, +	public void byteBufferResponseBodyWithFlux() throws Exception {, +		assertEquals(expected, performGet("/raw-response/flux", null, String.class).getBody());, +	public void byteBufferResponseBodyWithObservable() throws Exception {, +		assertEquals(expected, performGet("/raw-response/observable", null, String.class).getBody());, +	public void personResponseBody() throws Exception {, +		assertEquals(expected, performGet("/person-response/person", JSON, Person.class).getBody());, +	public void personResponseBodyWithCompletableFuture() throws Exception {, +		assertEquals(expected, performGet("/person-response/completable-future", JSON, Person.class).getBody());, +	public void personResponseBodyWithMono() throws Exception {, +		assertEquals(expected, performGet("/person-response/mono", JSON, Person.class).getBody());, +	public void personResponseBodyWithSingle() throws Exception {, +		assertEquals(expected, performGet("/person-response/single", JSON, Person.class).getBody());, +	public void personResponseBodyWithMonoResponseEntity() throws Exception {, +		assertEquals(expected, performGet("/person-response/mono-response-entity", JSON, Person.class).getBody());, +	public void personResponseBodyWithList() throws Exception {, +		assertEquals(expected, performGet("/person-response/list", JSON, PERSON_LIST).getBody());, +	public void personResponseBodyWithPublisher() throws Exception {, +		assertEquals(expected, performGet("/person-response/publisher", JSON, PERSON_LIST).getBody());, +	public void personResponseBodyWithFlux() throws Exception {, +		assertEquals(expected, performGet("/person-response/flux", JSON, PERSON_LIST).getBody());, +	public void personResponseBodyWithObservable() throws Exception {, +		assertEquals(expected, performGet("/person-response/observable", JSON, PERSON_LIST).getBody());, +	public void personTransform() throws Exception {, +				performPost("/person-transform/person", JSON, new Person("Robert"),, +	public void personTransformWithCompletableFuture() throws Exception {, +				performPost("/person-transform/completable-future", JSON, new Person("Robert"),, +	public void personTransformWithMono() throws Exception {, +				performPost("/person-transform/mono", JSON, new Person("Robert"),, +	public void personTransformWithSingle() throws Exception {, +				performPost("/person-transform/single", JSON, new Person("Robert"),, +	public void personTransformWithPublisher() throws Exception {, +		assertEquals(res, performPost("/person-transform/publisher", JSON, req, JSON, PERSON_LIST).getBody());, +	public void personTransformWithFlux() throws Exception {, +		assertEquals(res, performPost("/person-transform/flux", JSON, req, JSON, PERSON_LIST).getBody());, +	public void personTransformWithObservable() throws Exception {, +		assertEquals(res, performPost("/person-transform/observable", JSON, req, JSON, PERSON_LIST).getBody());, +	public void personCreateWithPublisherJson() throws Exception {, +		ResponseEntity<Void> entity = performPost("/person-create/publisher", JSON,, +		assertEquals(2, getApplicationContext().getBean(PersonCreateController.class).persons.size());, +	public void personCreateWithPublisherXml() throws Exception {, +		ResponseEntity<Void> response = performPost("/person-create/publisher", APPLICATION_XML, people, null, Void.class);, +		assertEquals(2, getApplicationContext().getBean(PersonCreateController.class).persons.size());, +	public void personCreateWithFluxJson() throws Exception {, +		ResponseEntity<Void> entity = performPost("/person-create/flux", JSON,, +		assertEquals(2, getApplicationContext().getBean(PersonCreateController.class).persons.size());, +	public void personCreateWithFluxXml() throws Exception {, +		ResponseEntity<Void> response = performPost("/person-create/flux", APPLICATION_XML, people, null, Void.class);, +		assertEquals(2, getApplicationContext().getBean(PersonCreateController.class).persons.size());, +	public void personCreateWithObservableJson() throws Exception {, +		ResponseEntity<Void> entity = performPost("/person-create/observable", JSON,, +		assertEquals(2, getApplicationContext().getBean(PersonCreateController.class).persons.size());, +	public void personCreateWithObservableXml() throws Exception {, +		ResponseEntity<Void> response = performPost("/person-create/observable", APPLICATION_XML, people, null, Void.class);, +		assertEquals(2, getApplicationContext().getBean(PersonCreateController.class).persons.size());, +	@RequestMapping("/raw-response"), +	private static class RawResponseBodyController {, +		@GetMapping("/publisher"), +		public Publisher<ByteBuffer> getPublisher() {, +		@GetMapping("/flux"), +		public Flux<ByteBuffer> getFlux() {, +		@GetMapping("/observable"), +		public Observable<ByteBuffer> getObservable() {, +	}, +	@RestController, +	@RequestMapping("/person-response"), +	@SuppressWarnings("unused"), +	private static class PersonResponseBodyController {, +		public Person getPerson() {, +		public CompletableFuture<Person> getCompletableFuture() {, +		public Mono<Person> getMono() {, +		public Single<Person> getSingle() {, +		@GetMapping("/mono-response-entity"), +		public ResponseEntity<Mono<Person>> getMonoResponseEntity() {, +		public List<Person> getList() {, +		public Publisher<Person> getPublisher() {, +		public Flux<Person> getFlux() {, +		public Observable<Person> getObservable() {, +	}, +	@RestController, +	@SuppressWarnings("unused"), +	private static class ResourceController {, +	}, +	@RestController, +	@RequestMapping("/person-transform"), +	@SuppressWarnings("unused"), +	private static class PersonTransformationController {, +		@PostMapping("/person"), +		public Person transformPerson(@RequestBody Person person) {, +		@PostMapping("/completable-future"), +		public CompletableFuture<Person> transformCompletableFuture(, +		@PostMapping("/mono"), +		public Mono<Person> transformMono(@RequestBody Mono<Person> personFuture) {, +		@PostMapping("/single"), +		public Single<Person> transformSingle(@RequestBody Single<Person> personFuture) {, +		@PostMapping("/publisher"), +		public Publisher<Person> transformPublisher(@RequestBody Publisher<Person> persons) {]