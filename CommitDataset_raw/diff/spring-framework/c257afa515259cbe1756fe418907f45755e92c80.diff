[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/support/RequestContext.java, +, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +	/**, +	 * The name of the bean to use to look up in an implementation of , +	 * {@link RequestDataValueProcessor} has been configured. , +	 */, +	private static final String REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME = "requestDataValueProcessor";, +, +	private RequestDataValueProcessor requestDataValueProcessor;, +, +, +		try {, +			this.requestDataValueProcessor = this.webApplicationContext.getBean(, +					REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME, RequestDataValueProcessor.class);, +		} , +		catch (NoSuchBeanDefinitionException ex) {, +			// Ignored, +		}, +	 * Return the RequestDataValueProcessor instance to use obtained from the , +	 * WebApplicationContext under the name {@code "requestDataValueProcessor"}., +	 * Or {@code null} if no matching bean was found., +	 */, +	public RequestDataValueProcessor getRequestDataValueProcessor() {, +		return this.requestDataValueProcessor;, +	}, +, +	/**, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/support/RequestContext.java, +, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +	/**, +	 * The name of the bean to use to look up in an implementation of , +	 * {@link RequestDataValueProcessor} has been configured. , +	 */, +	private static final String REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME = "requestDataValueProcessor";, +, +	private RequestDataValueProcessor requestDataValueProcessor;, +, +, +		try {, +			this.requestDataValueProcessor = this.webApplicationContext.getBean(, +					REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME, RequestDataValueProcessor.class);, +		} , +		catch (NoSuchBeanDefinitionException ex) {, +			// Ignored, +		}, +	 * Return the RequestDataValueProcessor instance to use obtained from the , +	 * WebApplicationContext under the name {@code "requestDataValueProcessor"}., +	 * Or {@code null} if no matching bean was found., +	 */, +	public RequestDataValueProcessor getRequestDataValueProcessor() {, +		return this.requestDataValueProcessor;, +	}, +, +	/**, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/support/RequestDataValueProcessor.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.servlet.support;, +, +import java.util.Map;, +, +import javax.servlet.http.HttpServletRequest;, +, +/**, + * A contract for inspecting and potentially modifying request data values such, + * as URL query parameters or form field values before they are rendered by a , + * view or before a redirect., + * , + * <p>Implementations may use this contract for example as part of a solution , + * to provide data integrity, confidentiality, protection against cross-site , + * request forgery (CSRF), and others or for other tasks such as automatically, + * adding a hidden field to all forms and URLs., + * , + * <p>View technologies that support this contract can obtain an instance to, + * delegate to via {@link RequestContext#getRequestDataValueProcessor()}., + * , + * @author Rossen Stoyanchev, + * @since 3.1, + */, +public interface RequestDataValueProcessor {, +, +	/**, +	 * Invoked when a new form action is rendered., +	 * @param request the current request]