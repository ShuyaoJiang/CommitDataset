[+++ b/build.gradle, +		optional("org.hibernate:hibernate-core:4.2.0.Final"), +		optional("org.hibernate:hibernate-entitymanager:4.2.0.Final"), +		testCompile("org.hibernate:hibernate-core:4.2.0.Final"), +++ b/build.gradle, +		optional("org.hibernate:hibernate-core:4.2.0.Final"), +		optional("org.hibernate:hibernate-entitymanager:4.2.0.Final"), +		testCompile("org.hibernate:hibernate-core:4.2.0.Final"), +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaDialect.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.util.ClassUtils;, +		return em.unwrap(Session.class);, +		// This will find a corresponding method on Hibernate 3.x but not on 4.x, +		private static final Method sessionConnectionMethod =, +				ClassUtils.getMethodIfAvailable(Session.class, "connection");, +, +		private static volatile Method connectionMethodToUse = sessionConnectionMethod;, +				if (connectionMethodToUse == null) {, +					// Reflective lookup trying to find SessionImpl's connection() on Hibernate 4.x, +					connectionMethodToUse = this.session.getClass().getMethod("connection");, +				return (Connection) ReflectionUtils.invokeMethod(connectionMethodToUse, this.session);, +				throw new IllegalStateException("Cannot find connection() method on Hibernate Session", ex);, +			if (sessionConnectionMethod != null) {, +				// Need to explicitly call close() with Hibernate 3.x in order to allow, +				// for eager release of the underlying physical Connection if necessary., +				// However, do not do this on Hibernate 4.2+ since it would return the, +				// physical Connection to the pool right away, making it unusable for, +				// further operations within the current transaction!, +	}]