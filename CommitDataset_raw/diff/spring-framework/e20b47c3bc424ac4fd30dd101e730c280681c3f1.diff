[+++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java, +	@Test, +	public void findMergedAnnotationWithLocalAliasesThatConflictWithAttributesInMetaAnnotationByConvention() {, +		final String[] EMPTY = new String[] {};, +		Class<?> element = SpringAppConfigClass.class;, +		ContextConfig contextConfig = findMergedAnnotation(element, ContextConfig.class);, +		assertNotNull("Should find @ContextConfig on " + element, contextConfig);, +		assertArrayEquals("locations for " + element, EMPTY, contextConfig.locations());, +		// 'value' in @SpringAppConfig should not override 'value' in @ContextConfig, +		assertArrayEquals("value for " + element, EMPTY, contextConfig.value());, +		assertArrayEquals("classes for " + element, new Class<?>[] { Number.class }, contextConfig.classes());, +	}, +, +, +		Class<?>[] classes() default {};, +	 * Mock of {@code org.springframework.boot.test.SpringApplicationConfiguration}., +	 */, +	@ContextConfig, +	@Retention(RetentionPolicy.RUNTIME), +	@interface SpringAppConfig {, +, +		@AliasFor(annotation = ContextConfig.class, attribute = "locations"), +		String[] locations() default {};, +, +		@AliasFor("value"), +		Class<?>[] classes() default {};, +, +		@AliasFor("classes"), +		Class<?>[] value() default {};, +	}, +, +	/**, +	@SpringAppConfig(Number.class), +	static class SpringAppConfigClass {, +	}, +]