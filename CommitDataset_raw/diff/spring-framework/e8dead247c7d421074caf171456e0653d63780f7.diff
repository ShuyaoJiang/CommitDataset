[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +	private final Map<ImportBeanDefinitionRegistrar, AnnotationMetadata> importBeanDefinitionRegistrars =, +			new LinkedHashMap<ImportBeanDefinitionRegistrar, AnnotationMetadata>();, +, +	public void addImportBeanDefinitionRegistrar(ImportBeanDefinitionRegistrar registrar, AnnotationMetadata importingClassMetadata) {, +		this.importBeanDefinitionRegistrars.put(registrar, importingClassMetadata);, +	public Map<ImportBeanDefinitionRegistrar, AnnotationMetadata> getImportBeanDefinitionRegistrars() {, +		return this.importBeanDefinitionRegistrars;, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +	private final Map<ImportBeanDefinitionRegistrar, AnnotationMetadata> importBeanDefinitionRegistrars =, +			new LinkedHashMap<ImportBeanDefinitionRegistrar, AnnotationMetadata>();, +, +	public void addImportBeanDefinitionRegistrar(ImportBeanDefinitionRegistrar registrar, AnnotationMetadata importingClassMetadata) {, +		this.importBeanDefinitionRegistrars.put(registrar, importingClassMetadata);, +	public Map<ImportBeanDefinitionRegistrar, AnnotationMetadata> getImportBeanDefinitionRegistrars() {, +		return this.importBeanDefinitionRegistrars;, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars());, +	private void loadBeanDefinitionsFromRegistrars(Map<ImportBeanDefinitionRegistrar, AnnotationMetadata> registrars) {, +		for (Map.Entry<ImportBeanDefinitionRegistrar, AnnotationMetadata> entry : registrars.entrySet()) {, +			entry.getKey().registerBeanDefinitions(entry.getValue(), this.registry);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +	private final Map<ImportBeanDefinitionRegistrar, AnnotationMetadata> importBeanDefinitionRegistrars =, +			new LinkedHashMap<ImportBeanDefinitionRegistrar, AnnotationMetadata>();, +, +	public void addImportBeanDefinitionRegistrar(ImportBeanDefinitionRegistrar registrar, AnnotationMetadata importingClassMetadata) {, +		this.importBeanDefinitionRegistrars.put(registrar, importingClassMetadata);, +	public Map<ImportBeanDefinitionRegistrar, AnnotationMetadata> getImportBeanDefinitionRegistrars() {, +		return this.importBeanDefinitionRegistrars;, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars());, +	private void loadBeanDefinitionsFromRegistrars(Map<ImportBeanDefinitionRegistrar, AnnotationMetadata> registrars) {, +		for (Map.Entry<ImportBeanDefinitionRegistrar, AnnotationMetadata> entry : registrars.entrySet()) {, +			entry.getKey().registerBeanDefinitions(entry.getValue(), this.registry);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +				sourceClass.getMetadata(), PropertySources.class, org.springframework.context.annotation.PropertySource.class)) {, +		processImports(configClass, sourceClass, getImports(sourceClass), true);, +				processImports(configClass, asSourceClass(configClass), asSourceClasses(imports), false);, +	private void processImports(ConfigurationClass configClass, SourceClass currentSourceClass,, +			Collection<SourceClass> importCandidates, boolean checkForCircularImports) throws IOException {, +		if (importCandidates.isEmpty()) {, +				for (SourceClass candidate : importCandidates) {, +							String[] importClassNames = selector.selectImports(currentSourceClass.getMetadata());, +							processImports(configClass, currentSourceClass, importSourceClasses, false);, +						configClass.addImportBeanDefinitionRegistrar(registrar, currentSourceClass.getMetadata());, +						this.importStack.registerImport(currentSourceClass.getMetadata(), candidate.getMetadata().getClassName());, +	private PropertySource<?> collatePropertySources(String name, List<PropertySource<?>> propertySources) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +	private final Map<ImportBeanDefinitionRegistrar, AnnotationMetadata> importBeanDefinitionRegistrars =, +			new LinkedHashMap<ImportBeanDefinitionRegistrar, AnnotationMetadata>();, +, +	public void addImportBeanDefinitionRegistrar(ImportBeanDefinitionRegistrar registrar, AnnotationMetadata importingClassMetadata) {, +		this.importBeanDefinitionRegistrars.put(registrar, importingClassMetadata);, +	public Map<ImportBeanDefinitionRegistrar, AnnotationMetadata> getImportBeanDefinitionRegistrars() {, +		return this.importBeanDefinitionRegistrars;, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +		loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars());, +	private void loadBeanDefinitionsFromRegistrars(Map<ImportBeanDefinitionRegistrar, AnnotationMetadata> registrars) {, +		for (Map.Entry<ImportBeanDefinitionRegistrar, AnnotationMetadata> entry : registrars.entrySet()) {, +			entry.getKey().registerBeanDefinitions(entry.getValue(), this.registry);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +				sourceClass.getMetadata(), PropertySources.class, org.springframework.context.annotation.PropertySource.class)) {, +		processImports(configClass, sourceClass, getImports(sourceClass), true);, +				processImports(configClass, asSourceClass(configClass), asSourceClasses(imports), false);, +	private void processImports(ConfigurationClass configClass, SourceClass currentSourceClass,, +			Collection<SourceClass> importCandidates, boolean checkForCircularImports) throws IOException {, +		if (importCandidates.isEmpty()) {, +				for (SourceClass candidate : importCandidates) {, +							String[] importClassNames = selector.selectImports(currentSourceClass.getMetadata());, +							processImports(configClass, currentSourceClass, importSourceClasses, false);, +						configClass.addImportBeanDefinitionRegistrar(registrar, currentSourceClass.getMetadata());, +						this.importStack.registerImport(currentSourceClass.getMetadata(), candidate.getMetadata().getClassName());, +	private PropertySource<?> collatePropertySources(String name, List<PropertySource<?>> propertySources) {, +++ b/spring-tx/src/test/java/org/springframework/transaction/annotation/EnableTransactionManagementTests.java, +	public void transactionProxyIsCreatedWithEnableOnSuperclass() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(InheritedEnableTxConfig.class, TxManagerConfig.class);, +		ctx.refresh();, +		TransactionalTestBean bean = ctx.getBean(TransactionalTestBean.class);, +		assertThat("testBean is not a proxy", AopUtils.isAopProxy(bean), is(true));, +		Map<?,?> services = ctx.getBeansWithAnnotation(Service.class);, +		assertThat("Stereotype annotation not visible", services.containsKey("testBean"), is(true));, +	}, +, +	@Test, +	static class InheritedEnableTxConfig extends EnableTxConfig {, +	}, +, +, +	@Configuration]