[+++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, +	 * Use this property to enable relative redirects as explained in, +	 * {@link RelativeRedirectFilter}, and also using the same response wrapper, +	 * as that filter does, or if both are configured, only one will wrap., +	 * to turn relative into absolute URLs, also taking into account forwarded, +	 * headers., +, +	UriComponents uriComponents = builder.build();, +	if (uriComponents.getScheme() != null) {, +	String path = uriComponents.getPath();, +	if (path != null) {, +		path = (path.startsWith(FOLDER_SEPARATOR) ? path :, +				StringUtils.applyRelativePath(this.request.getRequestURI(), path));, +	}, +			.replaceQuery(uriComponents.getQuery()), +			.fragment(uriComponents.getFragment()), +++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, +	 * Use this property to enable relative redirects as explained in, +	 * {@link RelativeRedirectFilter}, and also using the same response wrapper, +	 * as that filter does, or if both are configured, only one will wrap., +	 * to turn relative into absolute URLs, also taking into account forwarded, +	 * headers., +, +	UriComponents uriComponents = builder.build();, +	if (uriComponents.getScheme() != null) {, +	String path = uriComponents.getPath();, +	if (path != null) {, +		path = (path.startsWith(FOLDER_SEPARATOR) ? path :, +				StringUtils.applyRelativePath(this.request.getRequestURI(), path));, +	}, +			.replaceQuery(uriComponents.getQuery()), +			.fragment(uriComponents.getFragment()), +++ b/spring-web/src/main/java/org/springframework/web/filter/RelativeRedirectFilter.java, + * Copyright 2002-2018 the original author or authors., + * setting the HTTP status and "Location" headers, which keeps the Servlet, + * container from re-writing relative redirect URLs into absolute ones., + * Servlet containers are required to do that but against the recommendation of, + * <a href="https://tools.ietf.org/html/rfc7231#section-7.1.2"> RFC 7231 Section 7.1.2</a>,, + * and furthermore not necessarily taking into account "X-Forwarded" headers., + * <p><strong>Note:</strong> While relative redirects are recommended in the, + * RFC, under some configurations with reverse proxies they may not work., +++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, +	 * Use this property to enable relative redirects as explained in, +	 * {@link RelativeRedirectFilter}, and also using the same response wrapper, +	 * as that filter does, or if both are configured, only one will wrap., +	 * to turn relative into absolute URLs, also taking into account forwarded, +	 * headers., +, +	UriComponents uriComponents = builder.build();, +	if (uriComponents.getScheme() != null) {, +	String path = uriComponents.getPath();, +	if (path != null) {, +		path = (path.startsWith(FOLDER_SEPARATOR) ? path :, +				StringUtils.applyRelativePath(this.request.getRequestURI(), path));, +	}, +			.replaceQuery(uriComponents.getQuery()), +			.fragment(uriComponents.getFragment()), +++ b/spring-web/src/main/java/org/springframework/web/filter/RelativeRedirectFilter.java, + * Copyright 2002-2018 the original author or authors., + * setting the HTTP status and "Location" headers, which keeps the Servlet, + * container from re-writing relative redirect URLs into absolute ones., + * Servlet containers are required to do that but against the recommendation of, + * <a href="https://tools.ietf.org/html/rfc7231#section-7.1.2"> RFC 7231 Section 7.1.2</a>,, + * and furthermore not necessarily taking into account "X-Forwarded" headers., + * <p><strong>Note:</strong> While relative redirects are recommended in the, + * RFC, under some configurations with reverse proxies they may not work., +++ b/spring-web/src/main/java/org/springframework/web/filter/RelativeRedirectResponseWrapper.java, +import org.springframework.web.util.WebUtils;, +	public void sendRedirect(String location) {, +		RelativeRedirectResponseWrapper wrapper =, +				WebUtils.getNativeResponse(response, RelativeRedirectResponseWrapper.class);, +		return (wrapper != null ? response :, +				new RelativeRedirectResponseWrapper(response, redirectStatus));, +++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, +	 * Use this property to enable relative redirects as explained in, +	 * {@link RelativeRedirectFilter}, and also using the same response wrapper, +	 * as that filter does, or if both are configured, only one will wrap., +	 * to turn relative into absolute URLs, also taking into account forwarded, +	 * headers., +, +	UriComponents uriComponents = builder.build();, +	if (uriComponents.getScheme() != null) {, +	String path = uriComponents.getPath();, +	if (path != null) {, +		path = (path.startsWith(FOLDER_SEPARATOR) ? path :, +				StringUtils.applyRelativePath(this.request.getRequestURI(), path));, +	}, +			.replaceQuery(uriComponents.getQuery()), +			.fragment(uriComponents.getFragment()), +++ b/spring-web/src/main/java/org/springframework/web/filter/RelativeRedirectFilter.java, + * Copyright 2002-2018 the original author or authors., + * setting the HTTP status and "Location" headers, which keeps the Servlet, + * container from re-writing relative redirect URLs into absolute ones., + * Servlet containers are required to do that but against the recommendation of, + * <a href="https://tools.ietf.org/html/rfc7231#section-7.1.2"> RFC 7231 Section 7.1.2</a>,, + * and furthermore not necessarily taking into account "X-Forwarded" headers., + * <p><strong>Note:</strong> While relative redirects are recommended in the, + * RFC, under some configurations with reverse proxies they may not work., +++ b/spring-web/src/main/java/org/springframework/web/filter/RelativeRedirectResponseWrapper.java, +import org.springframework.web.util.WebUtils;]