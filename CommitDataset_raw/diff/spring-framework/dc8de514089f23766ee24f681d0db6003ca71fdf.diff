[+++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/AbstractAdaptableMessageListener.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.jms.support.converter.SmartMessageConverter;, +		Object content = preProcessResponse(result instanceof JmsResponse, +				? ((JmsResponse<?>) result).getResponse() : result);, +			if (content instanceof org.springframework.messaging.Message) {, +				return this.messagingMessageConverter.toMessage(content, session);, +			}, +			else {, +		}, +	 * Pre-process the given result before it is converted to a {@link Message}., +	 * @param result the result of the invocation, +	 * @return the payload response to handle, either the {@code result} argument or any other, +	 * object (for instance wrapping the result)., +	 * @since 4.3, +	 */, +	protected Object preProcessResponse(Object result) {, +		return result;, +	}, +, +	/**, +		protected Message createMessageForPayload(Object payload, Session session, Object conversionHint), +				throws JMSException {, +			if (converter == null) {, +				throw new IllegalStateException("No message converter, cannot handle '" + payload + "'");, +			if (converter instanceof SmartMessageConverter) {, +				return ((SmartMessageConverter) converter).toMessage(payload, session, conversionHint);, +, +			}, +			return converter.toMessage(payload, session);, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/AbstractAdaptableMessageListener.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.jms.support.converter.SmartMessageConverter;, +		Object content = preProcessResponse(result instanceof JmsResponse, +				? ((JmsResponse<?>) result).getResponse() : result);, +			if (content instanceof org.springframework.messaging.Message) {, +				return this.messagingMessageConverter.toMessage(content, session);, +			}, +			else {, +		}, +	 * Pre-process the given result before it is converted to a {@link Message}., +	 * @param result the result of the invocation, +	 * @return the payload response to handle, either the {@code result} argument or any other, +	 * object (for instance wrapping the result)., +	 * @since 4.3, +	 */, +	protected Object preProcessResponse(Object result) {, +		return result;, +	}, +, +	/**, +		protected Message createMessageForPayload(Object payload, Session session, Object conversionHint), +				throws JMSException {, +			if (converter == null) {, +				throw new IllegalStateException("No message converter, cannot handle '" + payload + "'");, +			if (converter instanceof SmartMessageConverter) {, +				return ((SmartMessageConverter) converter).toMessage(payload, session, conversionHint);, +, +			}, +			return converter.toMessage(payload, session);, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/MessagingMessageListenerAdapter.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.MethodParameter;, +import org.springframework.messaging.core.AbstractMessageSendingTemplate;, +import org.springframework.messaging.support.MessageBuilder;, +	@Override, +	protected Object preProcessResponse(Object result) {, +		MethodParameter returnType = this.handlerMethod.getReturnType();, +		if (result instanceof Message) {, +			return MessageBuilder.fromMessage((Message<?>) result), +					.setHeader(AbstractMessageSendingTemplate.CONVERSION_HINT_HEADER, returnType).build();, +		}, +		return MessageBuilder.withPayload(result).setHeader(, +				AbstractMessageSendingTemplate.CONVERSION_HINT_HEADER, returnType).build();, +	}, +, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/AbstractAdaptableMessageListener.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.jms.support.converter.SmartMessageConverter;, +		Object content = preProcessResponse(result instanceof JmsResponse, +				? ((JmsResponse<?>) result).getResponse() : result);, +			if (content instanceof org.springframework.messaging.Message) {, +				return this.messagingMessageConverter.toMessage(content, session);, +			}, +			else {, +		}, +	 * Pre-process the given result before it is converted to a {@link Message}., +	 * @param result the result of the invocation, +	 * @return the payload response to handle, either the {@code result} argument or any other, +	 * object (for instance wrapping the result)., +	 * @since 4.3, +	 */, +	protected Object preProcessResponse(Object result) {, +		return result;, +	}, +, +	/**, +		protected Message createMessageForPayload(Object payload, Session session, Object conversionHint), +				throws JMSException {, +			if (converter == null) {]