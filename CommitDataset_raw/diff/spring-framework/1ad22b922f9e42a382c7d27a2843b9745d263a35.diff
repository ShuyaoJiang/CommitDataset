[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceHandler.java, +		registerBeanDefinitionParser("redirect-view-controller", new ViewControllerBeanDefinitionParser());, +		registerBeanDefinitionParser("status-controller", new ViewControllerBeanDefinitionParser());, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceHandler.java, +		registerBeanDefinitionParser("redirect-view-controller", new ViewControllerBeanDefinitionParser());, +		registerBeanDefinitionParser("status-controller", new ViewControllerBeanDefinitionParser());, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ViewControllerBeanDefinitionParser.java, +import org.springframework.beans.factory.config.ConstructorArgumentValues;, +import org.springframework.http.HttpStatus;, +import org.springframework.web.servlet.view.RedirectView;, + * {@link org.springframework.beans.factory.xml.BeanDefinitionParser} that, + * parses the following MVC namespace elements:, + * <ul>, + *	<li>{@code <view-controller>}, + *	<li>{@code <redirect-view-controller>}, + *	<li>{@code <status-controller>}, + * </ul>, + *, + * <p>All elements result in the registration of a, + * {@link org.springframework.web.servlet.mvc.ParameterizableViewController, + * ParameterizableViewController} with all controllers mapped using in a single, + * {@link org.springframework.web.servlet.handler.SimpleUrlHandlerMapping, + * SimpleUrlHandlerMapping}., +		BeanDefinition hm = registerHandlerMapping(parserContext, source);, +, +		HttpStatus statusCode = null;, +		if (element.hasAttribute("status-code")) {, +			int statusValue = Integer.valueOf(element.getAttribute("status-code"));, +			statusCode = HttpStatus.valueOf(statusValue);, +		}, +, +		String name = element.getLocalName();, +		if (name.equals("view-controller")) {, +			if (statusCode != null) {, +				controller.getPropertyValues().add("statusCode", statusCode);, +			}, +		}, +		else if (name.equals("redirect-view-controller")) {, +			controller.getPropertyValues().add("view", getRedirectView(element, statusCode, source));, +		}, +		else if (name.equals("status-controller")) {, +			controller.getPropertyValues().add("statusCode", statusCode);, +			controller.getPropertyValues().add("statusOnly", true);, +		}, +		else {, +			// Should never happen..., +			throw new IllegalStateException("Unexpected tag name: " + name);, +		}, +, +		if (hm.getPropertyValues().contains("urlMap")) {, +			urlMap = (Map<String, BeanDefinition>) hm.getPropertyValues().getPropertyValue("urlMap").getValue();, +			hm.getPropertyValues().add("urlMap", urlMap);, +	private RootBeanDefinition getRedirectView(Element element, HttpStatus status, Object source) {, +		ConstructorArgumentValues cavs = new ConstructorArgumentValues();, +		cavs.addIndexedArgumentValue(0, element.getAttribute("redirect-url"));, +		RootBeanDefinition redirectView = new RootBeanDefinition(RedirectView.class, cavs, null);, +		redirectView.setSource(source);, +		if (status != null) {, +			redirectView.getPropertyValues().add("statusCode", status);, +		}, +		if (element.hasAttribute("context-relative")) {, +			redirectView.getPropertyValues().add("contextRelative", element.getAttribute("context-relative"));, +		}, +		if (element.hasAttribute("keep-query-params")) {, +			redirectView.getPropertyValues().add("propagateQueryParams", element.getAttribute("keep-query-params"));, +		}, +		return redirectView;, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/MvcNamespaceHandler.java, +		registerBeanDefinitionParser("redirect-view-controller", new ViewControllerBeanDefinitionParser());, +		registerBeanDefinitionParser("status-controller", new ViewControllerBeanDefinitionParser());, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ViewControllerBeanDefinitionParser.java, +import org.springframework.beans.factory.config.ConstructorArgumentValues;, +import org.springframework.http.HttpStatus;, +import org.springframework.web.servlet.view.RedirectView;, + * {@link org.springframework.beans.factory.xml.BeanDefinitionParser} that, + * parses the following MVC namespace elements:, + * <ul>, + *	<li>{@code <view-controller>}, + *	<li>{@code <redirect-view-controller>}, + *	<li>{@code <status-controller>}, + * </ul>, + *, + * <p>All elements result in the registration of a, + * {@link org.springframework.web.servlet.mvc.ParameterizableViewController, + * ParameterizableViewController} with all controllers mapped using in a single, + * {@link org.springframework.web.servlet.handler.SimpleUrlHandlerMapping, + * SimpleUrlHandlerMapping}., +		BeanDefinition hm = registerHandlerMapping(parserContext, source);, +, +		HttpStatus statusCode = null;, +		if (element.hasAttribute("status-code")) {, +			int statusValue = Integer.valueOf(element.getAttribute("status-code"));, +			statusCode = HttpStatus.valueOf(statusValue);, +		}, +, +		String name = element.getLocalName();, +		if (name.equals("view-controller")) {, +			if (statusCode != null) {]