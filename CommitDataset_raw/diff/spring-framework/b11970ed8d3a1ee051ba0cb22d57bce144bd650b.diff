[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import java.io.IOException;, +import java.util.Iterator;, +import org.springframework.http.MediaType;, +import org.springframework.web.HttpMediaTypeNotAcceptableException;, +				handleRequestBody(returnValue, webRequest);, +, +		@SuppressWarnings("unchecked"), +		private void handleRequestBody(Object returnValue, ServletWebRequest webRequest) throws ServletException, IOException {, +			HttpInputMessage inputMessage = new ServletServerHttpRequest(webRequest.getRequest());, +			List<MediaType> acceptedMediaTypes = inputMessage.getHeaders().getAccept();, +			HttpOutputMessage outputMessage = new ServletServerHttpResponse(webRequest.getResponse());, +			Class<?> returnValueType = returnValue.getClass();, +			List<MediaType> allSupportedMediaTypes = new ArrayList<MediaType>();, +			for (HttpMessageConverter messageConverter : messageConverters) {, +				allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes());, +				if (messageConverter.supports(returnValueType)) {, +					for (Object o : messageConverter.getSupportedMediaTypes()) {, +						MediaType supportedMediaType = (MediaType) o;, +						for (MediaType acceptedMediaType : acceptedMediaTypes) {, +							if (supportedMediaType.includes(acceptedMediaType)) {, +								messageConverter.write(returnValue, outputMessage);, +								responseArgumentUsed = true;, +								return;, +							}, +						}, +					}, +				}, +			}, +			throw new HttpMediaTypeNotAcceptableException(allSupportedMediaTypes);, +		}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import java.io.IOException;, +import java.util.Iterator;, +import org.springframework.http.MediaType;, +import org.springframework.web.HttpMediaTypeNotAcceptableException;, +				handleRequestBody(returnValue, webRequest);, +, +		@SuppressWarnings("unchecked"), +		private void handleRequestBody(Object returnValue, ServletWebRequest webRequest) throws ServletException, IOException {, +			HttpInputMessage inputMessage = new ServletServerHttpRequest(webRequest.getRequest());, +			List<MediaType> acceptedMediaTypes = inputMessage.getHeaders().getAccept();, +			HttpOutputMessage outputMessage = new ServletServerHttpResponse(webRequest.getResponse());, +			Class<?> returnValueType = returnValue.getClass();, +			List<MediaType> allSupportedMediaTypes = new ArrayList<MediaType>();, +			for (HttpMessageConverter messageConverter : messageConverters) {, +				allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes());, +				if (messageConverter.supports(returnValueType)) {, +					for (Object o : messageConverter.getSupportedMediaTypes()) {, +						MediaType supportedMediaType = (MediaType) o;, +						for (MediaType acceptedMediaType : acceptedMediaTypes) {, +							if (supportedMediaType.includes(acceptedMediaType)) {, +								messageConverter.write(returnValue, outputMessage);, +								responseArgumentUsed = true;, +								return;, +							}, +						}, +					}, +				}, +			}, +			throw new HttpMediaTypeNotAcceptableException(allSupportedMediaTypes);, +		}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java, +import org.springframework.web.HttpMediaTypeNotAcceptableException;, +			else if (ex instanceof HttpMediaTypeNotAcceptableException) {, +				return handleHttpMediaTypeNotAcceptable((HttpMediaTypeNotAcceptableException) ex, request, response,, +						handler);, +			}, +	 * were found for the PUT or POSTed content. <p>The default implementation sends an HTTP 415 error, sets the "Accept", +	 * Handle the case where no {@linkplain org.springframework.http.converter.HttpMessageConverter message converters}, +	 * were found that were acceptable for the client (expressed via the {@code Accept} header., +	 * <p>The default implementation sends an HTTP 406 error and returns an empty {@code ModelAndView}. Alternatively,, +	 * a fallback view could be chosen, or the HttpMediaTypeNotAcceptableException could be rethrown as-is., +	 *, +	 * @param ex the HttpMediaTypeNotAcceptableException to be handled, +	 * @param request current HTTP request, +	 * @param response current HTTP response, +	 * @param handler the executed handler, or <code>null</code> if none chosen at the time of the exception (for example,, +	 * if multipart resolution failed), +	 * @return a ModelAndView to render, or <code>null</code> if handled directly, +	 * @throws Exception an Exception that should be thrown as result of the servlet request, +	 */, +	protected ModelAndView handleHttpMediaTypeNotAcceptable(HttpMediaTypeNotAcceptableException ex,, +			HttpServletRequest request,, +			HttpServletResponse response,, +			Object handler) throws Exception {, +, +		response.sendError(HttpServletResponse.SC_NOT_ACCEPTABLE);, +		return new ModelAndView();, +	}, +, +	/**, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import java.io.IOException;, +import java.util.Iterator;, +import org.springframework.http.MediaType;, +import org.springframework.web.HttpMediaTypeNotAcceptableException;, +				handleRequestBody(returnValue, webRequest);, +, +		@SuppressWarnings("unchecked")]