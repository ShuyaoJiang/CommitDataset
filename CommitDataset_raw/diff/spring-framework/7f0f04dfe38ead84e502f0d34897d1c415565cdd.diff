[+++ b/spring-aspects/src/test/java/org/springframework/transaction/aspectj/TransactionAspectTests.java, + * Copyright 2002-2015 the original author or authors., + * @author Sam Brannen, +@SuppressWarnings("deprecation"), +public class TransactionAspectTests extends org.springframework.test.AbstractDependencyInjectionSpringContextTests {, +	public void testDoesNotResolveTxAnnotationOnMethodFromClassImplementingAnnotatedInterface() throws Exception {, +++ b/spring-aspects/src/test/java/org/springframework/transaction/aspectj/TransactionAspectTests.java, + * Copyright 2002-2015 the original author or authors., + * @author Sam Brannen, +@SuppressWarnings("deprecation"), +public class TransactionAspectTests extends org.springframework.test.AbstractDependencyInjectionSpringContextTests {, +	public void testDoesNotResolveTxAnnotationOnMethodFromClassImplementingAnnotatedInterface() throws Exception {, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, + * Utility class used to collect all annotation attributes, including those, + * declared on meta-annotations., +		process(element, annotationType, true, false, new Processor<Object>() {, +		return Boolean.TRUE.equals(process(element, annotationType, true, false, new Processor<Boolean>() {, +		return Boolean.TRUE.equals(process(element, annotationType, true, false, new Processor<Boolean>() {, +	/**, +	 * Delegates to {@link #getAnnotationAttributes(AnnotatedElement, String, boolean, boolean)},, +	 * supplying {@code false} for {@code classValuesAsString} and {@code nestedAnnotationsAsMap}., +	 *, +	 * @param element the annotated element, +	 * @param annotationType the annotation type to find, +	 * @see #getAnnotationAttributes(AnnotatedElement, String, boolean, boolean), +	 */, +	/**, +	 * Delegates to {@link #getAnnotationAttributes(AnnotatedElement, String, boolean, boolean, boolean, boolean)},, +	 * supplying {@code true} for {@code searchInterfaces} and {@code false} for {@code searchClassHierarchy}., +	 *, +	 * @param element the annotated element, +	 * @param annotationType the annotation type to find, +	 * @param classValuesAsString whether to convert Class references into, +	 * Strings or to preserve them as Class references, +	 * @param nestedAnnotationsAsMap whether to turn nested Annotation instances, +	 * into {@link AnnotationAttributes} maps or to preserve them as Annotation, +	 * instances, +	 * @see #getAnnotationAttributes(AnnotatedElement, String, boolean, boolean, boolean, boolean), +	 */, +			boolean classValuesAsString, boolean nestedAnnotationsAsMap) {, +		return getAnnotationAttributes(element, annotationType, true, false, classValuesAsString,, +			nestedAnnotationsAsMap);, +	}, +	/**, +	 * Find annotation attributes of the specified {@code annotationType} in, +	 * the annotation hierarchy of the supplied {@link AnnotatedElement},, +	 * and merge the results into an {@link AnnotationAttributes} map., +	 *, +	 * @param element the annotated element, +	 * @param annotationType the annotation type to find, +	 * @param searchInterfaces whether or not to search on interfaces, if the, +	 * annotated element is a class, +	 * @param searchClassHierarchy whether or not to search the class hierarchy, +	 * recursively, if the annotated element is a class, +	 * @param classValuesAsString whether to convert Class references into, +	 * Strings or to preserve them as Class references, +	 * @param nestedAnnotationsAsMap whether to turn nested Annotation instances, +	 * into {@link AnnotationAttributes} maps or to preserve them as Annotation, +	 * instances, +	 */, +	public static AnnotationAttributes getAnnotationAttributes(AnnotatedElement element, String annotationType,, +			boolean searchInterfaces, boolean searchClassHierarchy, final boolean classValuesAsString,, +			final boolean nestedAnnotationsAsMap) {, +, +		return process(element, annotationType, searchInterfaces, searchClassHierarchy, new Processor<AnnotationAttributes>() {, +		process(element, annotationType, true, false, new Processor<Void>() {, +	 *, +	 * <p>If the {@code searchClassHierarchy} flag is {@code true} and the sought, +	 *, +	 * @param searchInterfaces whether or not to search on interfaces, if the, +	 * annotated element is a class, +	 * @param searchClassHierarchy whether or not to search the class hierarchy, +	 * recursively, if the annotated element is a class, +	private static <T> T process(AnnotatedElement element, String annotationType, boolean searchInterfaces,, +			boolean searchClassHierarchy, Processor<T> processor) {, +			return doProcess(element, annotationType, searchInterfaces, searchClassHierarchy, processor,, +	 *, +	 *, +	 * @param searchInterfaces whether or not to search on interfaces, if the, +	 * annotated element is a class, +	 * @param searchClassHierarchy whether or not to search the class hierarchy, +	 * recursively, if the annotated element is a class, +	private static <T> T doProcess(AnnotatedElement element, String annotationType, boolean searchInterfaces,, +			boolean searchClassHierarchy, Processor<T> processor, Set<AnnotatedElement> visited, int metaDepth) {, +, +				// Local annotations: either directly declared or inherited., +						(searchClassHierarchy ? element.getDeclaredAnnotations() : element.getAnnotations());, +, +				// Search in local annotations, +						result = doProcess(annotation.annotationType(), annotationType, searchInterfaces,, +							searchClassHierarchy, processor, visited, metaDepth + 1);, +, +				// Search in meta annotations on location annotations, +						T result = doProcess(annotation.annotationType(), annotationType, searchInterfaces,, +							searchClassHierarchy, processor, visited, metaDepth);, +, +				// Search on interfaces, +				if (searchInterfaces && element instanceof Class) {, +					Class<?> clazz = (Class<?>) element;, +					for (Class<?> ifc : clazz.getInterfaces()) {]