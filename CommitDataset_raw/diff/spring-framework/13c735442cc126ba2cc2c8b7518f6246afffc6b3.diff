[+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/Scheduled.java, + * Copyright 2002-2018 the original author or authors., +	 * or a {@link java.time.Duration#parse java.time.Duration} compliant value, +	 * or a {@link java.time.Duration#parse java.time.Duration} compliant value, +	 * or a {@link java.time.Duration#parse java.time.Duration} compliant value, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/Scheduled.java, + * Copyright 2002-2018 the original author or authors., +	 * or a {@link java.time.Duration#parse java.time.Duration} compliant value, +	 * or a {@link java.time.Duration#parse java.time.Duration} compliant value, +	 * or a {@link java.time.Duration#parse java.time.Duration} compliant value, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +import java.time.Duration;, +						initialDelay = parseDelayAsLong(initialDelayString);, +					catch (RuntimeException ex) {, +						fixedDelay = parseDelayAsLong(fixedDelayString);, +					catch (RuntimeException ex) {, +						fixedRate = parseDelayAsLong(fixedRateString);, +					catch (RuntimeException ex) {, +	private static long parseDelayAsLong(String value) throws RuntimeException {, +		if (value.length() > 1 && (isP(value.charAt(0)) || isP(value.charAt(1)))) {, +			return Duration.parse(value).toMillis();, +		}, +		return Long.parseLong(value);, +	}, +, +	private static boolean isP(char ch) {, +		return (ch == 'P' || ch == 'p');, +	}, +, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/Scheduled.java, + * Copyright 2002-2018 the original author or authors., +	 * or a {@link java.time.Duration#parse java.time.Duration} compliant value, +	 * or a {@link java.time.Duration#parse java.time.Duration} compliant value, +	 * or a {@link java.time.Duration#parse java.time.Duration} compliant value, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +import java.time.Duration;, +						initialDelay = parseDelayAsLong(initialDelayString);, +					catch (RuntimeException ex) {, +						fixedDelay = parseDelayAsLong(fixedDelayString);, +					catch (RuntimeException ex) {, +						fixedRate = parseDelayAsLong(fixedRateString);, +					catch (RuntimeException ex) {, +	private static long parseDelayAsLong(String value) throws RuntimeException {, +		if (value.length() > 1 && (isP(value.charAt(0)) || isP(value.charAt(1)))) {, +			return Duration.parse(value).toMillis();, +		}, +		return Long.parseLong(value);, +	}, +, +	private static boolean isP(char ch) {, +		return (ch == 'P' || ch == 'p');, +	}, +, +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessorTests.java, +	public void propertyPlaceholderWithFixedDelayInMillis() {, +		propertyPlaceholderWithFixedDelay(false);, +	}, +, +	@Test, +	public void propertyPlaceholderWithFixedDelayInDuration() {, +		propertyPlaceholderWithFixedDelay(true);, +	}, +, +	private void propertyPlaceholderWithFixedDelay(boolean durationFormat) {, +		properties.setProperty("fixedDelay", (durationFormat ? "PT5S" : "5000"));, +		properties.setProperty("initialDelay", (durationFormat ? "PT1S" : "1000"));, +	public void propertyPlaceholderWithFixedRateInMillis() {, +		propertyPlaceholderWithFixedRate(false);, +	}, +, +	@Test, +	public void propertyPlaceholderWithFixedRateInDuration() {, +		propertyPlaceholderWithFixedRate(true);, +	}, +, +	private void propertyPlaceholderWithFixedRate(boolean durationFormat) {, +		properties.setProperty("fixedRate", (durationFormat ? "PT3S" : "3000"));, +		properties.setProperty("initialDelay", (durationFormat ? "PT1S" : "1000"));]