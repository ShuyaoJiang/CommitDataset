[+++ b/spring-web/src/main/java/org/springframework/http/codec/json/JacksonJsonDecoder.java, +import java.util.List;, +import com.fasterxml.jackson.annotation.JsonView;, +import org.springframework.core.MethodParameter;, +import org.springframework.core.codec.Decoder;, +import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;, +public class JacksonJsonDecoder extends AbstractJacksonJsonCodec implements Decoder<Object> {, +		super(Jackson2ObjectMapperBuilder.json().build());, +		super(mapper);, +	@Override, +	public boolean canDecode(ResolvableType elementType, MimeType mimeType, Object... hints) {, +		if (mimeType == null) {, +			return true;, +		}, +		return JSON_MIME_TYPES.stream().anyMatch(m -> m.isCompatibleWith(mimeType));, +	}, +, +	@Override, +	public List<MimeType> getDecodableMimeTypes() {, +		return JSON_MIME_TYPES;, +	}, +		MethodParameter methodParameter = (elementType.getSource() instanceof MethodParameter ?, +				(MethodParameter)elementType.getSource() : null);, +		// TODO Find a way to pass the real concrete controller contextClass, +		JavaType javaType = getJavaType(elementType.getType(), null);, +		ObjectReader reader;, +		if (methodParameter != null && methodParameter.getParameter().getAnnotation(JsonView.class) != null) {, +			JsonView annotation = methodParameter.getParameter().getAnnotation(JsonView.class);, +			Class<?>[] classes = annotation.value();, +			if (classes.length != 1) {, +				throw new IllegalArgumentException(, +						"@JsonView only supported for response body advice with exactly 1 class argument: " + methodParameter);, +			}, +			reader = mapper.readerWithView(classes[0]).forType(javaType);, +		}, +		else {, +			reader = mapper.readerFor(javaType);, +		}, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/JacksonJsonDecoder.java, +import java.util.List;, +import com.fasterxml.jackson.annotation.JsonView;, +import org.springframework.core.MethodParameter;, +import org.springframework.core.codec.Decoder;, +import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;, +public class JacksonJsonDecoder extends AbstractJacksonJsonCodec implements Decoder<Object> {, +		super(Jackson2ObjectMapperBuilder.json().build());, +		super(mapper);, +	@Override, +	public boolean canDecode(ResolvableType elementType, MimeType mimeType, Object... hints) {, +		if (mimeType == null) {, +			return true;, +		}, +		return JSON_MIME_TYPES.stream().anyMatch(m -> m.isCompatibleWith(mimeType));, +	}, +, +	@Override, +	public List<MimeType> getDecodableMimeTypes() {, +		return JSON_MIME_TYPES;, +	}, +		MethodParameter methodParameter = (elementType.getSource() instanceof MethodParameter ?, +				(MethodParameter)elementType.getSource() : null);, +		// TODO Find a way to pass the real concrete controller contextClass, +		JavaType javaType = getJavaType(elementType.getType(), null);, +		ObjectReader reader;, +		if (methodParameter != null && methodParameter.getParameter().getAnnotation(JsonView.class) != null) {, +			JsonView annotation = methodParameter.getParameter().getAnnotation(JsonView.class);, +			Class<?>[] classes = annotation.value();, +			if (classes.length != 1) {, +				throw new IllegalArgumentException(, +						"@JsonView only supported for response body advice with exactly 1 class argument: " + methodParameter);, +			}, +			reader = mapper.readerWithView(classes[0]).forType(javaType);, +		}, +		else {, +			reader = mapper.readerFor(javaType);, +		}, +++ b/spring-web/src/test/java/org/springframework/http/codec/json/JacksonJsonDecoderTests.java, +import com.fasterxml.jackson.annotation.JsonView;, +import static org.junit.Assert.assertNull;, +	@Test, +	public void jsonView() throws Exception {, +		Flux<DataBuffer> source = Flux.just(, +				stringBuffer("{\"withView1\" : \"with\", \"withView2\" : \"with\", \"withoutView\" : \"without\"}"));, +		ResolvableType elementType =  ResolvableType, +				.forMethodParameter(JacksonController.class.getMethod("foo", JacksonViewBean.class), 0);, +		Flux<JacksonViewBean> flux = new JacksonJsonDecoder(), +				.decode(source, elementType, null).cast(JacksonViewBean.class);, +, +		TestSubscriber, +				.subscribe(flux), +				.assertNoError(), +				.assertComplete(), +				.assertValuesWith(b -> {, +					assertTrue(b.getWithView1().equals("with"));, +					assertNull(b.getWithView2());, +					assertNull(b.getWithoutView());, +				});, +	}, +, +	private interface MyJacksonView1 {}]