[+++ b/spring-context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassAspectIntegrationTests.java, + * Copyright 2002-2015 the original author or authors., +import org.aspectj.lang.JoinPoint;, +import org.aspectj.lang.annotation.After;, +import org.junit.Ignore;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.context.annotation.EnableAspectJAutoProxy;, + * @author Juergen Hoeller, +, +	@Test, +	public void aspectAnnotatedConfiguration() {, +		assertAdviceWasApplied(AspectConfig.class);, +	}, +, +	@Test, +	public void configurationIncludesAspect() {, +		assertAdviceWasApplied(ConfigurationWithAspect.class);, +	}, +, +	@Ignore  // SPR-11807, +	public void withInnerClassAndLambdaExpression() {, +		ApplicationContext ctx = new AnnotationConfigApplicationContext(Application.class, CountingAspect.class);, +		ctx.getBeansOfType(Runnable.class).forEach((k, v) -> v.run());, +		assertEquals(2, ctx.getBean(CountingAspect.class).count);, +, +, +, +, +, +, +, +, +	@Configuration, +	@EnableAspectJAutoProxy, +	public static class Application {, +, +		@Bean, +		Runnable fromInnerClass() {, +			return new Runnable() {, +				@Override, +				public void run() {, +				}, +			};, +		}, +, +		@Bean, +		Runnable fromLambdaExpression() {, +			return () -> {, +			};, +		}, +	}, +, +, +	@Aspect, +	public static class CountingAspect {, +, +		public int count = 0;, +, +		@After("execution(* java.lang.Runnable.*(..))"), +		public void after(JoinPoint joinPoint) {, +			count++;, +		}, +	}, +]