[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java, +import org.apache.commons.logging.Log;, +	private static Log logger = LogFactory.getLog(ReactorHttpHandlerAdapter.class);, +, +, +					logger.debug("Could not complete request", ex);, +				}), +				.doOnSuccess(aVoid -> logger.debug("Successfully completed request"));, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java, +import org.apache.commons.logging.Log;, +	private static Log logger = LogFactory.getLog(ReactorHttpHandlerAdapter.class);, +, +, +					logger.debug("Could not complete request", ex);, +				}), +				.doOnSuccess(aVoid -> logger.debug("Successfully completed request"));, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java, +	private final NettyDataBufferFactory bufferFactory;, +, +	public ReactorServerHttpRequest(HttpChannel request, NettyDataBufferFactory bufferFactory) {, +		Assert.notNull(bufferFactory, "'bufferFactory' must not be null");, +		this.bufferFactory = bufferFactory;, +		return this.channel.receive().retain().map(this.bufferFactory::wrap);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java, +import org.apache.commons.logging.Log;, +	private static Log logger = LogFactory.getLog(ReactorHttpHandlerAdapter.class);, +, +, +					logger.debug("Could not complete request", ex);, +				}), +				.doOnSuccess(aVoid -> logger.debug("Successfully completed request"));, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java, +	private final NettyDataBufferFactory bufferFactory;, +, +	public ReactorServerHttpRequest(HttpChannel request, NettyDataBufferFactory bufferFactory) {, +		Assert.notNull(bufferFactory, "'bufferFactory' must not be null");, +		this.bufferFactory = bufferFactory;, +		return this.channel.receive().retain().map(this.bufferFactory::wrap);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java, +	public ReactorServerHttpResponse(HttpChannel response, DataBufferFactory bufferFactory) {, +		super(bufferFactory);, +	protected Mono<Void> writeAndFlushWithInternal(Publisher<Publisher<DataBuffer>> publisher) {, +		Publisher<Publisher<ByteBuf>> body = Flux.from(publisher), +				.map(ReactorServerHttpResponse::toByteBufs);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java, +import org.apache.commons.logging.Log;, +	private static Log logger = LogFactory.getLog(ReactorHttpHandlerAdapter.class);, +, +, +					logger.debug("Could not complete request", ex);, +				}), +				.doOnSuccess(aVoid -> logger.debug("Successfully completed request"));, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java, +	private final NettyDataBufferFactory bufferFactory;, +, +	public ReactorServerHttpRequest(HttpChannel request, NettyDataBufferFactory bufferFactory) {, +		Assert.notNull(bufferFactory, "'bufferFactory' must not be null");, +		this.bufferFactory = bufferFactory;, +		return this.channel.receive().retain().map(this.bufferFactory::wrap);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java, +	public ReactorServerHttpResponse(HttpChannel response, DataBufferFactory bufferFactory) {, +		super(bufferFactory);, +	protected Mono<Void> writeAndFlushWithInternal(Publisher<Publisher<DataBuffer>> publisher) {, +		Publisher<Publisher<ByteBuf>> body = Flux.from(publisher), +				.map(ReactorServerHttpResponse::toByteBufs);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/RxNettyHttpHandlerAdapter.java, +import org.apache.commons.logging.Log;, +	private static Log logger = LogFactory.getLog(RxNettyHttpHandlerAdapter.class);, +, +, +					logger.debug("Could not complete request", ex);, +				}), +				.doOnSuccess(aVoid -> logger.debug("Successfully completed request"));, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java, +import org.apache.commons.logging.Log;, +	private static Log logger = LogFactory.getLog(ReactorHttpHandlerAdapter.class);, +, +, +					logger.debug("Could not complete request", ex);, +				}), +				.doOnSuccess(aVoid -> logger.debug("Successfully completed request"));, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java, +	private final NettyDataBufferFactory bufferFactory;, +, +	public ReactorServerHttpRequest(HttpChannel request, NettyDataBufferFactory bufferFactory) {, +		Assert.notNull(bufferFactory, "'bufferFactory' must not be null");, +		this.bufferFactory = bufferFactory;, +		return this.channel.receive().retain().map(this.bufferFactory::wrap);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpResponse.java, +	public ReactorServerHttpResponse(HttpChannel response, DataBufferFactory bufferFactory) {, +		super(bufferFactory);, +	protected Mono<Void> writeAndFlushWithInternal(Publisher<Publisher<DataBuffer>> publisher) {, +		Publisher<Publisher<ByteBuf>> body = Flux.from(publisher), +				.map(ReactorServerHttpResponse::toByteBufs);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/RxNettyHttpHandlerAdapter.java, +import org.apache.commons.logging.Log;, +	private static Log logger = LogFactory.getLog(RxNettyHttpHandlerAdapter.class);, +, +, +					logger.debug("Could not complete request", ex);]