[+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java, +	public void registerAllCallableInterceptors(Map<Object, CallableProcessingInterceptor> interceptors) {, +		Assert.notNull(interceptors);, +		this.callableInterceptors.putAll(interceptors);, +	}, +, +	public void registerAllDeferredResultInterceptors(Map<Object, DeferredResultProcessingInterceptor> interceptors) {, +		Assert.notNull(interceptors);, +		this.deferredResultInterceptors.putAll(interceptors);, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java, +	public void registerAllCallableInterceptors(Map<Object, CallableProcessingInterceptor> interceptors) {, +		Assert.notNull(interceptors);, +		this.callableInterceptors.putAll(interceptors);, +	}, +, +	public void registerAllDeferredResultInterceptors(Map<Object, DeferredResultProcessingInterceptor> interceptors) {, +		Assert.notNull(interceptors);, +		this.deferredResultInterceptors.putAll(interceptors);, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +		ManagedList<?> callableInterceptors = getCallableInterceptors(element, source, parserContext);, +		ManagedList<?> deferredResultInterceptors = getDeferredResultInterceptors(element, source, parserContext);, +		handlerAdapterDef.getPropertyValues().add("callableInterceptors", callableInterceptors);, +		handlerAdapterDef.getPropertyValues().add("deferredResultInterceptors", deferredResultInterceptors);, +	private ManagedList<?> getCallableInterceptors(Element element, Object source, ParserContext parserContext) {, +		ManagedList<? super Object> interceptors = new ManagedList<Object>();, +		Element asyncElement = DomUtils.getChildElementByTagName(element, "async-support");, +		if (asyncElement != null) {, +			Element interceptorsElement = DomUtils.getChildElementByTagName(asyncElement, "callable-interceptors");, +			if (interceptorsElement != null) {, +				interceptors.setSource(source);, +				for (Element converter : DomUtils.getChildElementsByTagName(interceptorsElement, "bean")) {, +					BeanDefinitionHolder beanDef = parserContext.getDelegate().parseBeanDefinitionElement(converter);, +					beanDef = parserContext.getDelegate().decorateBeanDefinitionIfRequired(converter, beanDef);, +					interceptors.add(beanDef);, +				}, +			}, +		}, +		return interceptors;, +	}, +, +	private ManagedList<?> getDeferredResultInterceptors(Element element, Object source, ParserContext parserContext) {, +		ManagedList<? super Object> interceptors = new ManagedList<Object>();, +		Element asyncElement = DomUtils.getChildElementByTagName(element, "async-support");, +		if (asyncElement != null) {, +			Element interceptorsElement = DomUtils.getChildElementByTagName(asyncElement, "deferred-result-interceptors");, +			if (interceptorsElement != null) {, +				interceptors.setSource(source);, +				for (Element converter : DomUtils.getChildElementsByTagName(interceptorsElement, "bean")) {, +					BeanDefinitionHolder beanDef = parserContext.getDelegate().parseBeanDefinitionElement(converter);, +					beanDef = parserContext.getDelegate().decorateBeanDefinitionIfRequired(converter, beanDef);, +					interceptors.add(beanDef);, +				}, +			}, +		}, +		return interceptors;, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java, +	public void registerAllCallableInterceptors(Map<Object, CallableProcessingInterceptor> interceptors) {, +		Assert.notNull(interceptors);, +		this.callableInterceptors.putAll(interceptors);, +	}, +, +	public void registerAllDeferredResultInterceptors(Map<Object, DeferredResultProcessingInterceptor> interceptors) {, +		Assert.notNull(interceptors);, +		this.deferredResultInterceptors.putAll(interceptors);, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +		ManagedList<?> callableInterceptors = getCallableInterceptors(element, source, parserContext);, +		ManagedList<?> deferredResultInterceptors = getDeferredResultInterceptors(element, source, parserContext);, +		handlerAdapterDef.getPropertyValues().add("callableInterceptors", callableInterceptors);, +		handlerAdapterDef.getPropertyValues().add("deferredResultInterceptors", deferredResultInterceptors);, +	private ManagedList<?> getCallableInterceptors(Element element, Object source, ParserContext parserContext) {, +		ManagedList<? super Object> interceptors = new ManagedList<Object>();, +		Element asyncElement = DomUtils.getChildElementByTagName(element, "async-support");, +		if (asyncElement != null) {, +			Element interceptorsElement = DomUtils.getChildElementByTagName(asyncElement, "callable-interceptors");, +			if (interceptorsElement != null) {, +				interceptors.setSource(source);, +				for (Element converter : DomUtils.getChildElementsByTagName(interceptorsElement, "bean")) {, +					BeanDefinitionHolder beanDef = parserContext.getDelegate().parseBeanDefinitionElement(converter);, +					beanDef = parserContext.getDelegate().decorateBeanDefinitionIfRequired(converter, beanDef);, +					interceptors.add(beanDef);, +				}, +			}, +		}, +		return interceptors;, +	}, +, +	private ManagedList<?> getDeferredResultInterceptors(Element element, Object source, ParserContext parserContext) {, +		ManagedList<? super Object> interceptors = new ManagedList<Object>();, +		Element asyncElement = DomUtils.getChildElementByTagName(element, "async-support");, +		if (asyncElement != null) {, +			Element interceptorsElement = DomUtils.getChildElementByTagName(asyncElement, "deferred-result-interceptors");, +			if (interceptorsElement != null) {]