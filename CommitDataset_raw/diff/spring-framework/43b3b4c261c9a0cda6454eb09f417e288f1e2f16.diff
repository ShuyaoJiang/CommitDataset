[+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/EnableAsync.java, +	 * Indicate how async advice should be applied. The default is, +	 * {@link AdviceMode#PROXY}., +	 * @see AdviceMode, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/EnableAsync.java, +	 * Indicate how async advice should be applied. The default is, +	 * {@link AdviceMode#PROXY}., +	 * @see AdviceMode, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/AbstractTransactionManagementConfiguration.java, +		this.enableTx = importMetadata.getAnnotationAttributes(EnableTransactionManagement.class.getName(), false);, +		Assert.notNull(this.enableTx,, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/EnableAsync.java, +	 * Indicate how async advice should be applied. The default is, +	 * {@link AdviceMode#PROXY}., +	 * @see AdviceMode, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/AbstractTransactionManagementConfiguration.java, +		this.enableTx = importMetadata.getAnnotationAttributes(EnableTransactionManagement.class.getName(), false);, +		Assert.notNull(this.enableTx,, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/EnableTransactionManagement.java, + * interceptor into the call stack when {@code JdbcFooRepository}'s {@code @Transactional}, + * <p>If the {@linkplain #mode} is set to {@link AdviceMode#ASPECTJ}, then the, + * {@link #proxyTargetClass()} attribute is obsolete. Note also that in this case the, + * {@code spring-aspects} module JAR must be present on the classpath., +	 * Indicate whether subclass-based (CGLIB) proxies are to be created ({@code true}) as, +	 * opposed to standard Java interface-based proxies ({@code false}). The default is, +	 * {@code false}. <strong>Applicable only if {@link #mode()} is set to, +	 * {@link AdviceMode#PROXY}</strong>., +	 * Indicate how transactional advice should be applied. The default is, +	 * {@link AdviceMode.PROXY}., +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/EnableAsync.java, +	 * Indicate how async advice should be applied. The default is, +	 * {@link AdviceMode#PROXY}., +	 * @see AdviceMode, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/AbstractTransactionManagementConfiguration.java, +		this.enableTx = importMetadata.getAnnotationAttributes(EnableTransactionManagement.class.getName(), false);, +		Assert.notNull(this.enableTx,, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/EnableTransactionManagement.java, + * interceptor into the call stack when {@code JdbcFooRepository}'s {@code @Transactional}, + * <p>If the {@linkplain #mode} is set to {@link AdviceMode#ASPECTJ}, then the, + * {@link #proxyTargetClass()} attribute is obsolete. Note also that in this case the, + * {@code spring-aspects} module JAR must be present on the classpath., +	 * Indicate whether subclass-based (CGLIB) proxies are to be created ({@code true}) as, +	 * opposed to standard Java interface-based proxies ({@code false}). The default is, +	 * {@code false}. <strong>Applicable only if {@link #mode()} is set to, +	 * {@link AdviceMode#PROXY}</strong>., +	 * Indicate how transactional advice should be applied. The default is, +	 * {@link AdviceMode.PROXY}., +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/TransactionManagementConfigurer.java, + * {@code PlatformTransactionManager} beans present in the container., + * {@link #annotationDrivenTransactionManager()} for detailed instructions.]