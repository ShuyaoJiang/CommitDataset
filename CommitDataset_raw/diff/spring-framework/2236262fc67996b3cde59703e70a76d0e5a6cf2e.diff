[+++ b/spring-web/src/main/java/org/springframework/remoting/httpinvoker/AbstractHttpInvokerRequestExecutor.java, + * Copyright 2002-2017 the original author or authors., +public abstract class AbstractHttpInvokerRequestExecutor implements HttpInvokerRequestExecutor, BeanClassLoaderAware {, +	private static final int SERIALIZED_INVOCATION_BYTE_ARRAY_INITIAL_SIZE = 1024;, +, +++ b/spring-web/src/main/java/org/springframework/remoting/httpinvoker/AbstractHttpInvokerRequestExecutor.java, + * Copyright 2002-2017 the original author or authors., +public abstract class AbstractHttpInvokerRequestExecutor implements HttpInvokerRequestExecutor, BeanClassLoaderAware {, +	private static final int SERIALIZED_INVOCATION_BYTE_ARRAY_INITIAL_SIZE = 1024;, +, +++ b/spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerClientInterceptor.java, + * Copyright 2002-2017 the original author or authors., + * <p>Can use the JDK's {@link java.rmi.server.RMIClassLoader} to load classes, + * from a given {@link #setCodebaseUrl codebase}, performing on-demand dynamic, + * code download from a remote location. The codebase can consist of multiple, + * URLs, separated by spaces. Note that RMIClassLoader requires a SecurityManager, + * to be set, analogous to when using dynamic class download with standard RMI!, + * <p><b>WARNING: Be aware of vulnerabilities due to unsafe Java deserialization:, + * Manipulated input streams could lead to unwanted code execution on the server, + * during the deserialization step. As a consequence, do not expose HTTP invoker, + * endpoints to untrusted clients but rather just between your own services.</b>, + * In general, we strongly recommend any other message format (e.g. JSON) instead., + *, +++ b/spring-web/src/main/java/org/springframework/remoting/httpinvoker/AbstractHttpInvokerRequestExecutor.java, + * Copyright 2002-2017 the original author or authors., +public abstract class AbstractHttpInvokerRequestExecutor implements HttpInvokerRequestExecutor, BeanClassLoaderAware {, +	private static final int SERIALIZED_INVOCATION_BYTE_ARRAY_INITIAL_SIZE = 1024;, +, +++ b/spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerClientInterceptor.java, + * Copyright 2002-2017 the original author or authors., + * <p>Can use the JDK's {@link java.rmi.server.RMIClassLoader} to load classes, + * from a given {@link #setCodebaseUrl codebase}, performing on-demand dynamic, + * code download from a remote location. The codebase can consist of multiple, + * URLs, separated by spaces. Note that RMIClassLoader requires a SecurityManager, + * to be set, analogous to when using dynamic class download with standard RMI!, + * <p><b>WARNING: Be aware of vulnerabilities due to unsafe Java deserialization:, + * Manipulated input streams could lead to unwanted code execution on the server, + * during the deserialization step. As a consequence, do not expose HTTP invoker, + * endpoints to untrusted clients but rather just between your own services.</b>, + * In general, we strongly recommend any other message format (e.g. JSON) instead., + *, +++ b/spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java, + * In general, we strongly recommend any other message format (e.g. JSON) instead., +public class HttpInvokerProxyFactoryBean extends HttpInvokerClientInterceptor implements FactoryBean<Object> {, +++ b/spring-web/src/main/java/org/springframework/remoting/httpinvoker/AbstractHttpInvokerRequestExecutor.java, + * Copyright 2002-2017 the original author or authors., +public abstract class AbstractHttpInvokerRequestExecutor implements HttpInvokerRequestExecutor, BeanClassLoaderAware {, +	private static final int SERIALIZED_INVOCATION_BYTE_ARRAY_INITIAL_SIZE = 1024;, +, +++ b/spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerClientInterceptor.java, + * Copyright 2002-2017 the original author or authors., + * <p>Can use the JDK's {@link java.rmi.server.RMIClassLoader} to load classes, + * from a given {@link #setCodebaseUrl codebase}, performing on-demand dynamic, + * code download from a remote location. The codebase can consist of multiple, + * URLs, separated by spaces. Note that RMIClassLoader requires a SecurityManager, + * to be set, analogous to when using dynamic class download with standard RMI!, + * <p><b>WARNING: Be aware of vulnerabilities due to unsafe Java deserialization:, + * Manipulated input streams could lead to unwanted code execution on the server, + * during the deserialization step. As a consequence, do not expose HTTP invoker, + * endpoints to untrusted clients but rather just between your own services.</b>, + * In general, we strongly recommend any other message format (e.g. JSON) instead., + *, +++ b/spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java, + * In general, we strongly recommend any other message format (e.g. JSON) instead., +public class HttpInvokerProxyFactoryBean extends HttpInvokerClientInterceptor implements FactoryBean<Object> {, +++ b/spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java, + * Copyright 2002-2017 the original author or authors., + * In general, we strongly recommend any other message format (e.g. JSON) instead., +public class HttpInvokerServiceExporter extends RemoteInvocationSerializingExporter implements HttpRequestHandler {, +	 * <p>Delegates to {@link #readRemoteInvocation(HttpServletRequest, InputStream)} with, +	 * the {@link HttpServletRequest#getInputStream() servlet request's input stream}., +++ b/spring-web/src/main/java/org/springframework/remoting/httpinvoker/AbstractHttpInvokerRequestExecutor.java, + * Copyright 2002-2017 the original author or authors., +public abstract class AbstractHttpInvokerRequestExecutor implements HttpInvokerRequestExecutor, BeanClassLoaderAware {, +	private static final int SERIALIZED_INVOCATION_BYTE_ARRAY_INITIAL_SIZE = 1024;, +, +++ b/spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerClientInterceptor.java, + * Copyright 2002-2017 the original author or authors., + * <p>Can use the JDK's {@link java.rmi.server.RMIClassLoader} to load classes, + * from a given {@link #setCodebaseUrl codebase}, performing on-demand dynamic, + * code download from a remote location. The codebase can consist of multiple, + * URLs, separated by spaces. Note that RMIClassLoader requires a SecurityManager, + * to be set, analogous to when using dynamic class download with standard RMI!, + * <p><b>WARNING: Be aware of vulnerabilities due to unsafe Java deserialization:, + * Manipulated input streams could lead to unwanted code execution on the server, + * during the deserialization step. As a consequence, do not expose HTTP invoker, + * endpoints to untrusted clients but rather just between your own services.</b>, + * In general, we strongly recommend any other message format (e.g. JSON) instead., + *, +++ b/spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerProxyFactoryBean.java, + * In general, we strongly recommend any other message format (e.g. JSON) instead., +public class HttpInvokerProxyFactoryBean extends HttpInvokerClientInterceptor implements FactoryBean<Object> {, +++ b/spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.java, + * Copyright 2002-2017 the original author or authors., + * In general, we strongly recommend any other message format (e.g. JSON) instead., +public class HttpInvokerServiceExporter extends RemoteInvocationSerializingExporter implements HttpRequestHandler {, +	 * <p>Delegates to {@link #readRemoteInvocation(HttpServletRequest, InputStream)} with, +	 * the {@link HttpServletRequest#getInputStream() servlet request's input stream}., +++ b/spring-web/src/main/java/org/springframework/remoting/httpinvoker/SimpleHttpInvokerServiceExporter.java, + * Copyright 2002-2017 the original author or authors.]