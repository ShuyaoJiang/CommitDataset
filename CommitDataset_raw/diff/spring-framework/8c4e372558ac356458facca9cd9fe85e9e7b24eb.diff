[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.cglib.core.SpringNamingPolicy;, +import org.springframework.cglib.transform.impl.UndeclaredThrowableStrategy;, +			enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);, +			enhancer.setStrategy(new UndeclaredThrowableStrategy(UndeclaredThrowableException.class));, +			// fixedInterceptorMap only populated at this point, after getCallbacks call above, +			enhancer.setCallbackTypes(types);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.cglib.core.SpringNamingPolicy;, +import org.springframework.cglib.transform.impl.UndeclaredThrowableStrategy;, +			enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);, +			enhancer.setStrategy(new UndeclaredThrowableStrategy(UndeclaredThrowableException.class));, +			// fixedInterceptorMap only populated at this point, after getCallbacks call above, +			enhancer.setCallbackTypes(types);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/CglibSubclassingInstantiationStrategy.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.cglib.core.SpringNamingPolicy;, +			enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);, +			return (ctor != null ? enhancer.create(ctor.getParameterTypes(), args) : enhancer.create());, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.cglib.core.SpringNamingPolicy;, +import org.springframework.cglib.transform.impl.UndeclaredThrowableStrategy;, +			enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);, +			enhancer.setStrategy(new UndeclaredThrowableStrategy(UndeclaredThrowableException.class));, +			// fixedInterceptorMap only populated at this point, after getCallbacks call above, +			enhancer.setCallbackTypes(types);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/CglibSubclassingInstantiationStrategy.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.cglib.core.SpringNamingPolicy;, +			enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);, +			return (ctor != null ? enhancer.create(ctor.getParameterTypes(), args) : enhancer.create());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.cglib.core.SpringNamingPolicy;, +	private static final DefaultGeneratorStrategy GENERATOR_STRATEGY = new BeanFactoryAwareGeneratorStrategy();, +, +		enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);, +		enhancer.setStrategy(GENERATOR_STRATEGY);, +	 * Custom extension of CGLIB's DefaultGeneratorStrategy, introducing a {@link BeanFactory} field., +	private static class BeanFactoryAwareGeneratorStrategy extends DefaultGeneratorStrategy {, +		protected ClassGenerator transform(ClassGenerator cg) throws Exception {, +			ClassEmitterTransformer transformer = new ClassEmitterTransformer() {, +				public void end_class() {, +					declare_field(Constants.ACC_PUBLIC, BEAN_FACTORY_FIELD, Type.getType(BeanFactory.class), null);, +					super.end_class();, +				}, +			};, +			return new TransformingClassGenerator(cg, transformer);, +	 * Intercepts the invocation of any {@link BeanFactoryAware#setBeanFactory(BeanFactory)} on, +	 * {@code @Configuration} class instances for the purpose of recording the {@link BeanFactory}., +			enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);, +			Assert.state(beanFactory instanceof ConfigurableBeanFactory,, +					"Injected BeanFactory is not a ConfigurableBeanFactory");, +, +	/**, +	 * Intercepts the invocation of any {@link DisposableBean#destroy()} on @Configuration, +	 * class instances for the purpose of de-registering CGLIB callbacks. This helps avoid, +	 * garbage collection issues. See SPR-7901., +	 * @see EnhancedConfiguration, +	 */, +	private static class DisposableBeanMethodInterceptor implements MethodInterceptor, ConditionalCallback {, +, +		@Override, +		public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {, +			Enhancer.registerStaticCallbacks(obj.getClass(), null);, +			// Does the actual (non-CGLIB) superclass actually implement DisposableBean?, +			// If so, call its dispose() method. If not, just exit., +			if (DisposableBean.class.isAssignableFrom(obj.getClass().getSuperclass())) {, +				return proxy.invokeSuper(obj, args);, +			}, +			return null;, +		}, +, +		@Override, +		public boolean isMatch(Method candidateMethod) {, +			return candidateMethod.getName().equals("destroy") &&, +					candidateMethod.getParameterTypes().length == 0 &&, +					DisposableBean.class.isAssignableFrom(candidateMethod.getDeclaringClass());, +		}, +	}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.cglib.core.SpringNamingPolicy;, +import org.springframework.cglib.transform.impl.UndeclaredThrowableStrategy;, +			enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);, +			enhancer.setStrategy(new UndeclaredThrowableStrategy(UndeclaredThrowableException.class));, +			// fixedInterceptorMap only populated at this point, after getCallbacks call above, +			enhancer.setCallbackTypes(types);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/CglibSubclassingInstantiationStrategy.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.cglib.core.SpringNamingPolicy;, +			enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);, +			return (ctor != null ? enhancer.create(ctor.getParameterTypes(), args) : enhancer.create());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.cglib.core.SpringNamingPolicy;]