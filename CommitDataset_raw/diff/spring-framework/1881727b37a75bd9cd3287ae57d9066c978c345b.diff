[+++ b/spring-web/src/main/java/org/springframework/web/bind/support/WebExchangeDataBinder.java, +import org.springframework.http.codec.multipart.Part;, +, +	 * Bind query params, form data, and or multipart form data to the binder target., +		return getValuesToBind(exchange), +				.doOnNext(values -> doBind(new MutablePropertyValues(values))), +				.then();, +	}, +, +	/**, +	 * Protected method to obtain the values for data binding. By default this, +	 * method delegates to {@link #extractValuesToBind(ServerWebExchange)}., +	 */, +	protected Mono<Map<String, Object>> getValuesToBind(ServerWebExchange exchange) {, +		return extractValuesToBind(exchange);, +	}, +, +	/**, +	 * Combine query params and form data for multipart form data from the body, +	 * of the request into a {@code Map<String, Object>} of values to use for, +	 * data binding purposes., +	 *, +	 * @param exchange the current exchange, +	 * @return a {@code Mono} with the values to bind, +	 */, +	public static Mono<Map<String, Object>> extractValuesToBind(ServerWebExchange exchange) {, +, +		MultiValueMap<String, String> queryParams = exchange.getRequest().getQueryParams();, +		Mono<MultiValueMap<String, String>> formData = exchange.getFormData();, +		Mono<MultiValueMap<String, Part>> multipartData = exchange.getMultipartData();, +, +		return Mono.when(Mono.just(queryParams), formData, multipartData), +				.map(tuple -> {, +					Map<String, Object> result = new TreeMap<>();, +					tuple.getT1().forEach((key, values) -> addBindValue(result, key, values));, +					tuple.getT2().forEach((key, values) -> addBindValue(result, key, values));, +					tuple.getT3().forEach((key, values) -> addBindValue(result, key, values));, +					return result;, +	private static void addBindValue(Map<String, Object> params, String key, List<?> values) {, +		if (!CollectionUtils.isEmpty(values)) {, +			params.put(key, values.size() == 1 ? values.get(0) : values);, +++ b/spring-web/src/main/java/org/springframework/web/bind/support/WebExchangeDataBinder.java, +import org.springframework.http.codec.multipart.Part;, +, +	 * Bind query params, form data, and or multipart form data to the binder target., +		return getValuesToBind(exchange), +				.doOnNext(values -> doBind(new MutablePropertyValues(values))), +				.then();, +	}, +, +	/**, +	 * Protected method to obtain the values for data binding. By default this, +	 * method delegates to {@link #extractValuesToBind(ServerWebExchange)}., +	 */, +	protected Mono<Map<String, Object>> getValuesToBind(ServerWebExchange exchange) {, +		return extractValuesToBind(exchange);, +	}, +, +	/**, +	 * Combine query params and form data for multipart form data from the body, +	 * of the request into a {@code Map<String, Object>} of values to use for, +	 * data binding purposes., +	 *, +	 * @param exchange the current exchange, +	 * @return a {@code Mono} with the values to bind, +	 */, +	public static Mono<Map<String, Object>> extractValuesToBind(ServerWebExchange exchange) {, +, +		MultiValueMap<String, String> queryParams = exchange.getRequest().getQueryParams();, +		Mono<MultiValueMap<String, String>> formData = exchange.getFormData();, +		Mono<MultiValueMap<String, Part>> multipartData = exchange.getMultipartData();, +, +		return Mono.when(Mono.just(queryParams), formData, multipartData), +				.map(tuple -> {, +					Map<String, Object> result = new TreeMap<>();, +					tuple.getT1().forEach((key, values) -> addBindValue(result, key, values));, +					tuple.getT2().forEach((key, values) -> addBindValue(result, key, values));, +					tuple.getT3().forEach((key, values) -> addBindValue(result, key, values));, +					return result;, +	private static void addBindValue(Map<String, Object> params, String key, List<?> values) {, +		if (!CollectionUtils.isEmpty(values)) {, +			params.put(key, values.size() == 1 ? values.get(0) : values);, +++ b/spring-web/src/main/java/org/springframework/web/server/ServerWebExchange.java, + * Copyright 2002-2017 the original author or authors., +	 *, +	 * <p><strong>Note:</strong> calling this method causes the request body to, +	 * be read and parsed in full and the resulting {@code MultiValueMap} is, +	 * cached so that this method is safe to call more than once., +	 *, +	 * <p><strong>Note:</strong> calling this method causes the request body to, +	 * be read and parsed in full and the resulting {@code MultiValueMap} is, +	 * cached so that this method is safe to call more than once., +++ b/spring-web/src/main/java/org/springframework/web/bind/support/WebExchangeDataBinder.java, +import org.springframework.http.codec.multipart.Part;, +, +	 * Bind query params, form data, and or multipart form data to the binder target., +		return getValuesToBind(exchange), +				.doOnNext(values -> doBind(new MutablePropertyValues(values))), +				.then();, +	}]