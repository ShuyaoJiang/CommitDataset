[+++ b/spring-context/src/main/java/org/springframework/format/datetime/DateFormatterRegistrar.java, +	private DateFormatter dateFormatter;, +		registry.addFormatterForFieldAnnotation(new DateTimeFormatAnnotationFormatterFactory());, +, +		// In order to retain back compatibility we only register Date/Calendar, +		// types when a user defined formatter is specified (see SPR-10105), +		if(this.dateFormatter != null) {, +		}, +	 * Set the date formatter to register. If not specified no formatter is registered., +	 * This method can be used if global formatter configuration is required., +++ b/spring-context/src/main/java/org/springframework/format/datetime/DateFormatterRegistrar.java, +	private DateFormatter dateFormatter;, +		registry.addFormatterForFieldAnnotation(new DateTimeFormatAnnotationFormatterFactory());, +, +		// In order to retain back compatibility we only register Date/Calendar, +		// types when a user defined formatter is specified (see SPR-10105), +		if(this.dateFormatter != null) {, +		}, +	 * Set the date formatter to register. If not specified no formatter is registered., +	 * This method can be used if global formatter configuration is required., +++ b/spring-context/src/main/java/org/springframework/format/datetime/joda/JodaTimeFormatterRegistrar.java, +				ReadableInstant.class);, +, +		// In order to retain back compatibility we only register Date/Calendar, +		// types when a user defined formatter is specified (see SPR-10105), +		if(this.formatters.containsKey(Type.DATE_TIME)) {, +			addFormatterForFields(registry,, +					new ReadableInstantPrinter(dateTimeFormatter),, +					new DateTimeParser(dateTimeFormatter),, +					Date.class, Calendar.class);, +		}, +++ b/spring-context/src/main/java/org/springframework/format/datetime/DateFormatterRegistrar.java, +	private DateFormatter dateFormatter;, +		registry.addFormatterForFieldAnnotation(new DateTimeFormatAnnotationFormatterFactory());, +, +		// In order to retain back compatibility we only register Date/Calendar, +		// types when a user defined formatter is specified (see SPR-10105), +		if(this.dateFormatter != null) {, +		}, +	 * Set the date formatter to register. If not specified no formatter is registered., +	 * This method can be used if global formatter configuration is required., +++ b/spring-context/src/main/java/org/springframework/format/datetime/joda/JodaTimeFormatterRegistrar.java, +				ReadableInstant.class);, +, +		// In order to retain back compatibility we only register Date/Calendar, +		// types when a user defined formatter is specified (see SPR-10105), +		if(this.formatters.containsKey(Type.DATE_TIME)) {, +			addFormatterForFields(registry,, +					new ReadableInstantPrinter(dateTimeFormatter),, +					new DateTimeParser(dateTimeFormatter),, +					Date.class, Calendar.class);, +		}, +++ b/spring-context/src/test/java/org/springframework/format/datetime/DateFormattingTests.java, +import static org.hamcrest.Matchers.equalTo;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertThat;, +		setUp(registrar);, +	}, +, +	private void setUp(DateFormatterRegistrar registrar) {, +		DefaultConversionService.addDefaultConverters(conversionService);, +	public void dateToStringWithoutGlobalFormat() throws Exception {, +		Date date = new Date();, +		Object actual = this.conversionService.convert(date, TypeDescriptor.valueOf(Date.class), TypeDescriptor.valueOf(String.class));, +		String expected = date.toString();, +		assertEquals(expected, actual);, +	}, +, +	@Test, +	public void dateToStringWithGlobalFormat() throws Exception {, +		DateFormatterRegistrar registrar = new DateFormatterRegistrar();, +		registrar.setFormatter(new DateFormatter());, +		setUp(registrar);, +	@Test, +	@SuppressWarnings("deprecation"), +	public void stringToDateWithoutGlobalFormat() throws Exception {, +		// SPR-10105, +		String string = "Sat, 12 Aug 1995 13:30:00 GM";, +		Date date = this.conversionService.convert(string, Date.class);, +		assertThat(date, equalTo(new Date(string)));, +	}, +, +	@Test, +	public void stringToDateWithGlobalFormat() throws Exception {, +		// SPR-10105, +		DateFormatterRegistrar registrar = new DateFormatterRegistrar();, +		DateFormatter dateFormatter = new DateFormatter();, +		dateFormatter.setIso(ISO.DATE_TIME);, +		registrar.setFormatter(dateFormatter);, +		setUp(registrar);, +		// This is a format that cannot be parsed by new Date(String), +		String string = "2009-06-01T14:23:05.003+0000";, +		Date date = this.conversionService.convert(string, Date.class);, +		assertNotNull(date);, +	}, +, +, +++ b/spring-context/src/main/java/org/springframework/format/datetime/DateFormatterRegistrar.java, +	private DateFormatter dateFormatter;, +		registry.addFormatterForFieldAnnotation(new DateTimeFormatAnnotationFormatterFactory());]