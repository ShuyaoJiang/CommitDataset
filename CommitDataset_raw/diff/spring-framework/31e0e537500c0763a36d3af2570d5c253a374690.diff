[+++ b/build.gradle, +    ext.jsonassertVersion      = "1.5.0", +		testCompile("org.skyscreamer:jsonassert:${jsonassertVersion}"), +		optional("org.skyscreamer:jsonassert:${jsonassertVersion}"), + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +/*, +++ b/build.gradle, +    ext.jsonassertVersion      = "1.5.0", +		testCompile("org.skyscreamer:jsonassert:${jsonassertVersion}"), +		optional("org.skyscreamer:jsonassert:${jsonassertVersion}"), + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +/*, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +import com.fasterxml.jackson.core.JsonFactory;, +import com.fasterxml.jackson.core.JsonParser;, +import com.fasterxml.jackson.databind.util.TokenBuffer;, +import org.eclipse.jetty.io.RuntimeIOException;, +		Flux<TokenBuffer> tokens = Flux.from(input), +				.flatMap(new Jackson2Tokenizer(nonBlockingParser(), true));, +, +		return decodeInternal(tokens, elementType, mimeType, hints);, +		Flux<TokenBuffer> tokens = Flux.from(input), +				.flatMap(new Jackson2Tokenizer(nonBlockingParser(), false));, +, +		return decodeInternal(tokens, elementType, mimeType, hints).singleOrEmpty();, +	private Flux<Object> decodeInternal(Flux<TokenBuffer> tokens,, +			ResolvableType elementType, @Nullable MimeType mimeType,, +			@Nullable Map<String, Object> hints) {, +		Assert.notNull(tokens, "'tokens' must not be null");, +		return tokens.flatMap(tokenBuffer -> {, +				Object value = reader.readValue(tokenBuffer.asParser());, +	private JsonParser nonBlockingParser() {, +		try {, +			JsonFactory factory = this.objectMapper().getFactory();, +			return factory.createNonBlockingByteArrayParser();, +		}, +		catch (IOException ex) {, +			throw new RuntimeIOException(ex);, +		}, +	}, +++ b/build.gradle, +    ext.jsonassertVersion      = "1.5.0", +		testCompile("org.skyscreamer:jsonassert:${jsonassertVersion}"), +		optional("org.skyscreamer:jsonassert:${jsonassertVersion}"), + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +/*, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +import com.fasterxml.jackson.core.JsonFactory;, +import com.fasterxml.jackson.core.JsonParser;, +import com.fasterxml.jackson.databind.util.TokenBuffer;, +import org.eclipse.jetty.io.RuntimeIOException;, +		Flux<TokenBuffer> tokens = Flux.from(input), +				.flatMap(new Jackson2Tokenizer(nonBlockingParser(), true));, +, +		return decodeInternal(tokens, elementType, mimeType, hints);, +		Flux<TokenBuffer> tokens = Flux.from(input), +				.flatMap(new Jackson2Tokenizer(nonBlockingParser(), false));, +]