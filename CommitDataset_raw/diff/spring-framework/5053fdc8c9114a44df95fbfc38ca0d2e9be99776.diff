[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/HeaderMethodArgumentResolver.java, + * Copyright 2002-2014 the original author or authors., +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.messaging.support.NativeMessageHeaderAccessor;, +import org.springframework.util.MultiValueMap;, +, +import java.util.List;, +import java.util.Map;, +	private static final Log logger = LogFactory.getLog(HeaderMethodArgumentResolver.class);, +, +		Object headerValue = message.getHeaders().get(name);, +		Object nativeHeaderValue = getNativeHeaderValue(message, name);, +, +		if (headerValue != null && nativeHeaderValue != null) {, +			if (logger.isWarnEnabled()) {, +				logger.warn("Message headers contain two values for the same header '" + name + "', " +, +						"one in the top level header map and a second in the nested map with native headers. " +, +						"Using the value from top level map. " +, +						"Use 'nativeHeader.myHeader' to resolve to the value from the nested native header map." );, +			}, +		}, +, +		return (headerValue != null) ? headerValue : nativeHeaderValue;, +	}, +, +	private Object getNativeHeaderValue(Message<?> message, String name) {, +, +		Map<String, List<String>> nativeHeaders =, +				(Map<String, List<String>>) message.getHeaders().get(NativeMessageHeaderAccessor.NATIVE_HEADERS);, +, +		if (name.startsWith("nativeHeaders.")) {, +			name = name.substring("nativeHeaders.".length());, +			if (logger.isDebugEnabled()) {, +				logger.debug("Looking up native header '" + name + "'");, +			}, +		}, +, +		if ((nativeHeaders == null) || !nativeHeaders.containsKey(name)) {, +			return null;, +		}, +, +		List<?> nativeHeaderValues = nativeHeaders.get(name);, +		return (nativeHeaderValues.size() == 1) ? nativeHeaderValues.get(0) : nativeHeaderValues;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/HeaderMethodArgumentResolver.java, + * Copyright 2002-2014 the original author or authors., +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.messaging.support.NativeMessageHeaderAccessor;, +import org.springframework.util.MultiValueMap;, +, +import java.util.List;, +import java.util.Map;, +	private static final Log logger = LogFactory.getLog(HeaderMethodArgumentResolver.class);, +, +		Object headerValue = message.getHeaders().get(name);, +		Object nativeHeaderValue = getNativeHeaderValue(message, name);, +, +		if (headerValue != null && nativeHeaderValue != null) {, +			if (logger.isWarnEnabled()) {, +				logger.warn("Message headers contain two values for the same header '" + name + "', " +, +						"one in the top level header map and a second in the nested map with native headers. " +, +						"Using the value from top level map. " +, +						"Use 'nativeHeader.myHeader' to resolve to the value from the nested native header map." );, +			}, +		}, +, +		return (headerValue != null) ? headerValue : nativeHeaderValue;, +	}, +, +	private Object getNativeHeaderValue(Message<?> message, String name) {, +, +		Map<String, List<String>> nativeHeaders =, +				(Map<String, List<String>>) message.getHeaders().get(NativeMessageHeaderAccessor.NATIVE_HEADERS);, +, +		if (name.startsWith("nativeHeaders.")) {, +			name = name.substring("nativeHeaders.".length());, +			if (logger.isDebugEnabled()) {, +				logger.debug("Looking up native header '" + name + "'");, +			}, +		}, +, +		if ((nativeHeaders == null) || !nativeHeaders.containsKey(name)) {, +			return null;, +		}, +, +		List<?> nativeHeaderValues = nativeHeaders.get(name);, +		return (nativeHeaderValues.size() == 1) ? nativeHeaderValues.get(0) : nativeHeaderValues;, +++ b/spring-messaging/src/test/java/org/springframework/messaging/handler/annotation/support/HeaderMethodArgumentResolverTests.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.messaging.support.NativeMessageHeaderAccessor;, +	private MethodParameter paramNativeHeader;, +				String.class, String.class, String.class, String.class, String.class);, +		this.paramNativeHeader = new MethodParameter(method, 4);, +		Object result = this.resolver.resolveArgument(this.paramRequired, message);, +, +		assertEquals("foo", result);, +	}, +, +	// SPR-11326]