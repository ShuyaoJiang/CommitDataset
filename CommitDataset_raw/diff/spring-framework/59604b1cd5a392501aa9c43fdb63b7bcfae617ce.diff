[+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +		return SerializableTypeWrapper.unwrap(this.type);, +				if (SerializableTypeWrapper.unwrap(this.typeVariables[i]).equals(, +						SerializableTypeWrapper.unwrap(variable))) {, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +		return SerializableTypeWrapper.unwrap(this.type);, +				if (SerializableTypeWrapper.unwrap(this.typeVariables[i]).equals(, +						SerializableTypeWrapper.unwrap(variable))) {, +++ b/spring-core/src/main/java/org/springframework/core/SerializableTypeWrapper.java, +	 * Unwrap the given type, effectively returning the original non-serializable type., +	 * @param type the type to unwrap, +	 * @return the original non-serializable type, +	 */, +	@SuppressWarnings("unchecked"), +	public static <T extends Type> T unwrap(T type) {, +		Type unwrapped = type;, +		while (unwrapped instanceof SerializableTypeProxy) {, +			unwrapped = ((SerializableTypeProxy) type).getTypeProvider().getType();, +		}, +		return (T) unwrapped;, +	}, +, +	/**, +				if (other instanceof Type) {, +					other = unwrap((Type) other);]