[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/Property.java, +		if (read != null && write != null && !write.getParameterType().isAssignableFrom(read.getParameterType())) {, +			throw new IllegalStateException("Write parameter is not assignable from read parameter");, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/Property.java, +		if (read != null && write != null && !write.getParameterType().isAssignableFrom(read.getParameterType())) {, +			throw new IllegalStateException("Write parameter is not assignable from read parameter");, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/TypeDescriptorTests.java, +	public void propertyTypeCovariance() throws Exception {, +		GenericType<Number> genericBean = new NumberType();, +		Property property = new Property(getClass(), genericBean.getClass().getMethod("getProperty", null), genericBean.getClass().getMethod("setProperty", Number.class));		, +		TypeDescriptor desc = new TypeDescriptor(property);, +		assertEquals(Integer.class, desc.getType());, +	}, +, +	@Test, +	public class NumberType implements GenericType<Number> {, +, +		public Integer getProperty() {, +			return null;, +		}, +, +		public void setProperty(Number t) {, +		}, +, +		public List<Number> getListProperty() {, +			return null;, +		}, +, +		public void setListProperty(List<Number> t) {, +		}, +	}, +]