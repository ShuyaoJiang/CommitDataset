[+++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +import java.util.concurrent.ConcurrentHashMap;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +, +		beanFactory.addBeanPostProcessor(new ApplicationListenerDetector());, +, +	/**, +	 * BeanPostProcessor that detects beans which implement the ApplicationListener interface., +	 * This catches beans that can't reliably be detected by getBeanNamesForType., +	 */, +	private class ApplicationListenerDetector implements MergedBeanDefinitionPostProcessor {, +, +		private final Map<String, Boolean> singletonNames = new ConcurrentHashMap<String, Boolean>();, +, +		public void postProcessMergedBeanDefinition(RootBeanDefinition beanDefinition, Class beanType, String beanName) {, +			if (beanDefinition.isSingleton()) {, +				this.singletonNames.put(beanName, Boolean.TRUE);, +			}, +		}, +, +		public Object postProcessBeforeInitialization(Object bean, String beanName) {, +			return bean;, +		}, +, +		public Object postProcessAfterInitialization(Object bean, String beanName) {, +			if (bean instanceof ApplicationListener) {, +				// potentially not detected as a listener by getBeanNamesForType retrieval, +				Boolean flag = this.singletonNames.get(beanName);, +				if (Boolean.TRUE.equals(flag)) {, +					// singleton bean (top-level or inner): register on the fly, +					addApplicationListener((ApplicationListener) bean);, +				}, +				else if (flag == null) {, +					if (logger.isWarnEnabled() && !containsBean(beanName)) {, +						// inner bean with other scope - can't reliably process events, +						logger.warn("Inner bean '" + beanName + "' implements ApplicationListener interface " +, +								"but is not reachable for event multicasting by its containing ApplicationContext " +, +								"because it does not have singleton scope. Only top-level listener beans are allowed " +, +								"to be of non-singleton scope.");, +					}, +					this.singletonNames.put(beanName, Boolean.FALSE);, +				}, +			}, +			return bean;, +		}, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +import java.util.concurrent.ConcurrentHashMap;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +, +		beanFactory.addBeanPostProcessor(new ApplicationListenerDetector());, +, +	/**, +	 * BeanPostProcessor that detects beans which implement the ApplicationListener interface., +	 * This catches beans that can't reliably be detected by getBeanNamesForType., +	 */, +	private class ApplicationListenerDetector implements MergedBeanDefinitionPostProcessor {, +, +		private final Map<String, Boolean> singletonNames = new ConcurrentHashMap<String, Boolean>();, +, +		public void postProcessMergedBeanDefinition(RootBeanDefinition beanDefinition, Class beanType, String beanName) {, +			if (beanDefinition.isSingleton()) {, +				this.singletonNames.put(beanName, Boolean.TRUE);, +			}, +		}, +, +		public Object postProcessBeforeInitialization(Object bean, String beanName) {, +			return bean;, +		}, +, +		public Object postProcessAfterInitialization(Object bean, String beanName) {, +			if (bean instanceof ApplicationListener) {, +				// potentially not detected as a listener by getBeanNamesForType retrieval, +				Boolean flag = this.singletonNames.get(beanName);, +				if (Boolean.TRUE.equals(flag)) {, +					// singleton bean (top-level or inner): register on the fly, +					addApplicationListener((ApplicationListener) bean);, +				}, +				else if (flag == null) {, +					if (logger.isWarnEnabled() && !containsBean(beanName)) {, +						// inner bean with other scope - can't reliably process events, +						logger.warn("Inner bean '" + beanName + "' implements ApplicationListener interface " +, +								"but is not reachable for event multicasting by its containing ApplicationContext " +, +								"because it does not have singleton scope. Only top-level listener beans are allowed " +, +								"to be of non-singleton scope.");, +					}, +					this.singletonNames.put(beanName, Boolean.FALSE);, +				}, +			}, +			return bean;, +		}, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/support/ApplicationContextAwareProcessor.java, +import org.springframework.beans.factory.config.BeanPostProcessor;, +class ApplicationContextAwareProcessor implements BeanPostProcessor {]