[+++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/AbstractAdaptableMessageListener.java, + * Copyright 2002-2015 the original author or authors., +, +		@Override, +		protected Message createMessageForPayload(Object payload, Session session) throws JMSException {, +			MessageConverter converter = getMessageConverter();, +			if (converter != null) {, +				return converter.toMessage(payload, session);, +			}, +			throw new IllegalStateException("No message converter, cannot handle '" + payload + "'");, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/AbstractAdaptableMessageListener.java, + * Copyright 2002-2015 the original author or authors., +, +		@Override, +		protected Message createMessageForPayload(Object payload, Session session) throws JMSException {, +			MessageConverter converter = getMessageConverter();, +			if (converter != null) {, +				return converter.toMessage(payload, session);, +			}, +			throw new IllegalStateException("No message converter, cannot handle '" + payload + "'");, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/support/converter/MessagingMessageConverter.java, + * Copyright 2002-2015 the original author or authors., +		javax.jms.Message reply = createMessageForPayload(input.getPayload(), session);, +	/**, +	 * Create a JMS message for the specified payload., +	 * @see MessageConverter#toMessage(Object, Session), +	 */, +	protected javax.jms.Message createMessageForPayload(Object payload, Session session) throws JMSException {, +		return this.payloadConverter.toMessage(payload, session);, +	}, +, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/AbstractAdaptableMessageListener.java, + * Copyright 2002-2015 the original author or authors., +, +		@Override, +		protected Message createMessageForPayload(Object payload, Session session) throws JMSException {, +			MessageConverter converter = getMessageConverter();, +			if (converter != null) {, +				return converter.toMessage(payload, session);, +			}, +			throw new IllegalStateException("No message converter, cannot handle '" + payload + "'");, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/support/converter/MessagingMessageConverter.java, + * Copyright 2002-2015 the original author or authors., +		javax.jms.Message reply = createMessageForPayload(input.getPayload(), session);, +	/**, +	 * Create a JMS message for the specified payload., +	 * @see MessageConverter#toMessage(Object, Session), +	 */, +	protected javax.jms.Message createMessageForPayload(Object payload, Session session) throws JMSException {, +		return this.payloadConverter.toMessage(payload, session);, +	}, +, +++ b/spring-jms/src/test/java/org/springframework/jms/listener/adapter/MessagingMessageListenerAdapterTests.java, + * Copyright 2002-2015 the original author or authors., +import java.util.ArrayList;, +import java.util.List;, +import org.springframework.jms.support.converter.MessageConverter;, +	@Test, +	public void incomingMessageUsesMessageConverter() throws JMSException {, +		javax.jms.Message jmsMessage = mock(javax.jms.Message.class);, +		Session session = mock(Session.class);, +		MessageConverter messageConverter = mock(MessageConverter.class);, +		given(messageConverter.fromMessage(jmsMessage)).willReturn("FooBar");, +		MessagingMessageListenerAdapter listener = getSimpleInstance("simple", Message.class);, +		listener.setMessageConverter(messageConverter);, +		listener.onMessage(jmsMessage, session);, +		verify(messageConverter, times(1)).fromMessage(jmsMessage);, +		assertEquals(1, sample.simples.size());, +		assertEquals("FooBar", sample.simples.get(0).getPayload());, +	}, +, +	@Test, +	public void replyUsesMessageConverterForPayload() throws JMSException {, +		Session session = mock(Session.class);, +		MessageConverter messageConverter = mock(MessageConverter.class);, +		given(messageConverter.toMessage("Response", session)).willReturn(new StubTextMessage("Response"));, +, +		Message<String> result = MessageBuilder.withPayload("Response"), +				.build();, +, +		MessagingMessageListenerAdapter listener = getSimpleInstance("echo", Message.class);, +		listener.setMessageConverter(messageConverter);, +		javax.jms.Message replyMessage = listener.buildMessage(session, result);, +, +		verify(messageConverter, times(1)).toMessage("Response", session);, +		assertNotNull("reply should never be null", replyMessage);, +		assertEquals("Response", ((TextMessage) replyMessage).getText());, +	}, +, +		public final List<Message<String>> simples = new ArrayList<>();, +, +		public void simple(Message<String> input) {, +			simples.add(input);, +		}, +]