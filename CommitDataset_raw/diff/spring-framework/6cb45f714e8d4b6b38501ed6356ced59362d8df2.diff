[+++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, + * Copyright 2002-2014 the original author or authors., +				ClassLoader cl = this.targetObject.getClass().getClassLoader();, +					Class<?> enumValueType = ClassUtils.forName(enumType, cl);, +						logger.trace("Enum class [" + enumType + "] cannot be loaded", ex);, +++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, + * Copyright 2002-2014 the original author or authors., +				ClassLoader cl = this.targetObject.getClass().getClassLoader();, +					Class<?> enumValueType = ClassUtils.forName(enumType, cl);, +						logger.trace("Enum class [" + enumType + "] cannot be loaded", ex);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + * Copyright 2002-2014 the original author or authors., +			this.autowiredAnnotationTypes.add((Class<? extends Annotation>), +					ClassUtils.forName("javax.inject.Inject", AutowiredAnnotationBeanPostProcessor.class.getClassLoader()));, +++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, + * Copyright 2002-2014 the original author or authors., +				ClassLoader cl = this.targetObject.getClass().getClassLoader();, +					Class<?> enumValueType = ClassUtils.forName(enumType, cl);, +						logger.trace("Enum class [" + enumType + "] cannot be loaded", ex);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + * Copyright 2002-2014 the original author or authors., +			this.autowiredAnnotationTypes.add((Class<? extends Annotation>), +					ClassUtils.forName("javax.inject.Inject", AutowiredAnnotationBeanPostProcessor.class.getClassLoader()));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, + * Copyright 2002-2014 the original author or authors., +			this.qualifierTypes.add((Class<? extends Annotation>), +					ClassUtils.forName("javax.inject.Qualifier", QualifierAnnotationAutowireCandidateResolver.class.getClassLoader()));, +++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, + * Copyright 2002-2014 the original author or authors., +				ClassLoader cl = this.targetObject.getClass().getClassLoader();, +					Class<?> enumValueType = ClassUtils.forName(enumType, cl);, +						logger.trace("Enum class [" + enumType + "] cannot be loaded", ex);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + * Copyright 2002-2014 the original author or authors., +			this.autowiredAnnotationTypes.add((Class<? extends Annotation>), +					ClassUtils.forName("javax.inject.Inject", AutowiredAnnotationBeanPostProcessor.class.getClassLoader()));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, + * Copyright 2002-2014 the original author or authors., +			this.qualifierTypes.add((Class<? extends Annotation>), +					ClassUtils.forName("javax.inject.Qualifier", QualifierAnnotationAutowireCandidateResolver.class.getClassLoader()));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +			javaxInjectProviderClass =, +					ClassUtils.forName("javax.inject.Provider", DefaultListableBeanFactory.class.getClassLoader());, +++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, + * Copyright 2002-2014 the original author or authors., +				ClassLoader cl = this.targetObject.getClass().getClassLoader();, +					Class<?> enumValueType = ClassUtils.forName(enumType, cl);, +						logger.trace("Enum class [" + enumType + "] cannot be loaded", ex);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + * Copyright 2002-2014 the original author or authors., +			this.autowiredAnnotationTypes.add((Class<? extends Annotation>), +					ClassUtils.forName("javax.inject.Inject", AutowiredAnnotationBeanPostProcessor.class.getClassLoader()));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, + * Copyright 2002-2014 the original author or authors., +			this.qualifierTypes.add((Class<? extends Annotation>), +					ClassUtils.forName("javax.inject.Qualifier", QualifierAnnotationAutowireCandidateResolver.class.getClassLoader()));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +			javaxInjectProviderClass =, +					ClassUtils.forName("javax.inject.Provider", DefaultListableBeanFactory.class.getClassLoader());, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java, + * Copyright 2002-2014 the original author or authors., +			closeableInterface = ClassUtils.forName("java.lang.AutoCloseable",, +					DisposableBeanAdapter.class.getClassLoader());, +++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, + * Copyright 2002-2014 the original author or authors., +				ClassLoader cl = this.targetObject.getClass().getClassLoader();, +					Class<?> enumValueType = ClassUtils.forName(enumType, cl);, +						logger.trace("Enum class [" + enumType + "] cannot be loaded", ex);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + * Copyright 2002-2014 the original author or authors., +			this.autowiredAnnotationTypes.add((Class<? extends Annotation>), +					ClassUtils.forName("javax.inject.Inject", AutowiredAnnotationBeanPostProcessor.class.getClassLoader()));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, + * Copyright 2002-2014 the original author or authors., +			this.qualifierTypes.add((Class<? extends Annotation>), +					ClassUtils.forName("javax.inject.Qualifier", QualifierAnnotationAutowireCandidateResolver.class.getClassLoader()));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +			javaxInjectProviderClass =, +					ClassUtils.forName("javax.inject.Provider", DefaultListableBeanFactory.class.getClassLoader());, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java, + * Copyright 2002-2014 the original author or authors., +			closeableInterface = ClassUtils.forName("java.lang.AutoCloseable",, +					DisposableBeanAdapter.class.getClassLoader());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, +				def.setBeanClass(ClassUtils.forName(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME,, +						AnnotationConfigUtils.class.getClassLoader()));, +++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, + * Copyright 2002-2014 the original author or authors., +				ClassLoader cl = this.targetObject.getClass().getClassLoader();, +					Class<?> enumValueType = ClassUtils.forName(enumType, cl);, +						logger.trace("Enum class [" + enumType + "] cannot be loaded", ex);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + * Copyright 2002-2014 the original author or authors., +			this.autowiredAnnotationTypes.add((Class<? extends Annotation>), +					ClassUtils.forName("javax.inject.Inject", AutowiredAnnotationBeanPostProcessor.class.getClassLoader()));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, + * Copyright 2002-2014 the original author or authors., +			this.qualifierTypes.add((Class<? extends Annotation>), +					ClassUtils.forName("javax.inject.Qualifier", QualifierAnnotationAutowireCandidateResolver.class.getClassLoader()));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java]