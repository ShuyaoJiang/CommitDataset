[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java, +					String destination = entry.getKey();, +					MultiValueMap<String, String> sessionMap = entry.getValue();, +					List<String> subscriptions = sessionMap.get(sessionId);, +					if (subscriptions != null) {, +						subscriptions.remove(subsId);, +						if (subscriptions.isEmpty()) {, +							sessionMap.remove(sessionId);, +						if (sessionMap.isEmpty()) {, +							destinationsToRemove.add(destination);, +							this.accessCache.put(destination, new LinkedMultiValueMap<String, String>(sessionMap));, +				for (String destination : destinationsToRemove) {, +					this.updateCache.remove(destination);, +					this.accessCache.remove(destination);, +					String destination = entry.getKey();, +					MultiValueMap<String, String> sessionMap = entry.getValue();, +					if (sessionMap.remove(info.getSessionId()) != null) {, +						if (sessionMap.isEmpty()) {, +							destinationsToRemove.add(destination);, +							this.accessCache.put(destination, new LinkedMultiValueMap<String, String>(sessionMap));, +				for (String destination : destinationsToRemove) {, +					this.updateCache.remove(destination);, +					this.accessCache.remove(destination);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java, +					String destination = entry.getKey();, +					MultiValueMap<String, String> sessionMap = entry.getValue();, +					List<String> subscriptions = sessionMap.get(sessionId);, +					if (subscriptions != null) {, +						subscriptions.remove(subsId);, +						if (subscriptions.isEmpty()) {, +							sessionMap.remove(sessionId);, +						if (sessionMap.isEmpty()) {, +							destinationsToRemove.add(destination);, +							this.accessCache.put(destination, new LinkedMultiValueMap<String, String>(sessionMap));, +				for (String destination : destinationsToRemove) {, +					this.updateCache.remove(destination);, +					this.accessCache.remove(destination);, +					String destination = entry.getKey();, +					MultiValueMap<String, String> sessionMap = entry.getValue();, +					if (sessionMap.remove(info.getSessionId()) != null) {, +						if (sessionMap.isEmpty()) {, +							destinationsToRemove.add(destination);, +							this.accessCache.put(destination, new LinkedMultiValueMap<String, String>(sessionMap));, +				for (String destination : destinationsToRemove) {, +					this.updateCache.remove(destination);, +					this.accessCache.remove(destination);, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistryTests.java, +		assertEquals(Arrays.asList("subs01", "subs02"), actual.get("sess01"));, +		actual = this.registry.findSubscriptions(message("/foo"));, +		assertEquals("Expected 1 element", 1, actual.size());, +		assertEquals(Arrays.asList("subs02"), actual.get("sess01"));, +]