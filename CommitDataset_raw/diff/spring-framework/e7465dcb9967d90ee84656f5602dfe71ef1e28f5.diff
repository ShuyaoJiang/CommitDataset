[+++ b/org.springframework.orm/ivy.xml, +		<dependency org="javax.jdo" name="com.springsource.javax.jdo" rev="2.1.0" conf="provided, jdo->compile"/>, +++ b/org.springframework.orm/ivy.xml, +		<dependency org="javax.jdo" name="com.springsource.javax.jdo" rev="2.1.0" conf="provided, jdo->compile"/>, +++ b/org.springframework.orm/orm.iml, +          <root url="jar://$IVY_CACHE$/javax.jdo/com.springsource.javax.jdo/2.1.0/com.springsource.javax.jdo-2.1.0.jar!/" />, +          <root url="jar://$IVY_CACHE$/javax.jdo/com.springsource.javax.jdo/2.1.0/com.springsource.javax.jdo-sources-2.1.0.jar!/" />, +++ b/org.springframework.orm/ivy.xml, +		<dependency org="javax.jdo" name="com.springsource.javax.jdo" rev="2.1.0" conf="provided, jdo->compile"/>, +++ b/org.springframework.orm/orm.iml, +          <root url="jar://$IVY_CACHE$/javax.jdo/com.springsource.javax.jdo/2.1.0/com.springsource.javax.jdo-2.1.0.jar!/" />, +          <root url="jar://$IVY_CACHE$/javax.jdo/com.springsource.javax.jdo/2.1.0/com.springsource.javax.jdo-sources-2.1.0.jar!/" />, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate3/AbstractSessionFactoryBean.java, + * Copyright 2002-2009 the original author or authors., +		implements FactoryBean<SessionFactory>, InitializingBean, DisposableBean, PersistenceExceptionTranslator {, +	public SessionFactory getObject() {, +	public Class<? extends SessionFactory> getObjectType() {, +++ b/org.springframework.orm/ivy.xml, +		<dependency org="javax.jdo" name="com.springsource.javax.jdo" rev="2.1.0" conf="provided, jdo->compile"/>, +++ b/org.springframework.orm/orm.iml, +          <root url="jar://$IVY_CACHE$/javax.jdo/com.springsource.javax.jdo/2.1.0/com.springsource.javax.jdo-2.1.0.jar!/" />, +          <root url="jar://$IVY_CACHE$/javax.jdo/com.springsource.javax.jdo/2.1.0/com.springsource.javax.jdo-sources-2.1.0.jar!/" />, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate3/AbstractSessionFactoryBean.java, + * Copyright 2002-2009 the original author or authors., +		implements FactoryBean<SessionFactory>, InitializingBean, DisposableBean, PersistenceExceptionTranslator {, +	public SessionFactory getObject() {, +	public Class<? extends SessionFactory> getObjectType() {, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate3/HibernateCallback.java, + * Copyright 2002-2009 the original author or authors., +public interface HibernateCallback<T> {, +	T doInHibernate(Session session) throws HibernateException, SQLException;, +++ b/org.springframework.orm/ivy.xml, +		<dependency org="javax.jdo" name="com.springsource.javax.jdo" rev="2.1.0" conf="provided, jdo->compile"/>, +++ b/org.springframework.orm/orm.iml, +          <root url="jar://$IVY_CACHE$/javax.jdo/com.springsource.javax.jdo/2.1.0/com.springsource.javax.jdo-2.1.0.jar!/" />, +          <root url="jar://$IVY_CACHE$/javax.jdo/com.springsource.javax.jdo/2.1.0/com.springsource.javax.jdo-sources-2.1.0.jar!/" />, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate3/AbstractSessionFactoryBean.java, + * Copyright 2002-2009 the original author or authors., +		implements FactoryBean<SessionFactory>, InitializingBean, DisposableBean, PersistenceExceptionTranslator {, +	public SessionFactory getObject() {, +	public Class<? extends SessionFactory> getObjectType() {, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate3/HibernateCallback.java, + * Copyright 2002-2009 the original author or authors., +public interface HibernateCallback<T> {, +	T doInHibernate(Session session) throws HibernateException, SQLException;, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate3/HibernateOperations.java, + * Copyright 2002-2009 the original author or authors., +	<T> T execute(HibernateCallback<T> action) throws DataAccessException;, +	List executeFind(HibernateCallback<?> action) throws DataAccessException;, +	<T> T merge(String entityName, T entity) throws DataAccessException;, +++ b/org.springframework.orm/ivy.xml, +		<dependency org="javax.jdo" name="com.springsource.javax.jdo" rev="2.1.0" conf="provided, jdo->compile"/>, +++ b/org.springframework.orm/orm.iml, +          <root url="jar://$IVY_CACHE$/javax.jdo/com.springsource.javax.jdo/2.1.0/com.springsource.javax.jdo-2.1.0.jar!/" />, +          <root url="jar://$IVY_CACHE$/javax.jdo/com.springsource.javax.jdo/2.1.0/com.springsource.javax.jdo-sources-2.1.0.jar!/" />, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate3/AbstractSessionFactoryBean.java, + * Copyright 2002-2009 the original author or authors., +		implements FactoryBean<SessionFactory>, InitializingBean, DisposableBean, PersistenceExceptionTranslator {, +	public SessionFactory getObject() {, +	public Class<? extends SessionFactory> getObjectType() {, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate3/HibernateCallback.java, + * Copyright 2002-2009 the original author or authors., +public interface HibernateCallback<T> {, +	T doInHibernate(Session session) throws HibernateException, SQLException;, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate3/HibernateOperations.java, + * Copyright 2002-2009 the original author or authors., +	<T> T execute(HibernateCallback<T> action) throws DataAccessException;, +	List executeFind(HibernateCallback<?> action) throws DataAccessException;, +	<T> T merge(String entityName, T entity) throws DataAccessException;, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate3/HibernateTemplate.java, +	public <T> T execute(HibernateCallback<T> action) throws DataAccessException {, +	public List executeFind(HibernateCallback<?> action) throws DataAccessException {, +	public <T> T executeWithNewSession(HibernateCallback<T> action) {, +	public <T> T executeWithNativeSession(HibernateCallback<T> action) {, +	protected <T> T doExecute(HibernateCallback<T> action, boolean enforceNewSession, boolean enforceNativeSession), +			T result = action.doInHibernate(sessionToExpose);, +		return executeWithNativeSession(new HibernateCallback<T>() {, +			@SuppressWarnings("unchecked"), +			public T doInHibernate(Session session) throws HibernateException {, +					return (T) session.get(entityClass, id, lockMode);, +					return (T) session.get(entityClass, id);, +		return executeWithNativeSession(new HibernateCallback<Object>() {, +		return executeWithNativeSession(new HibernateCallback<T>() {, +			@SuppressWarnings("unchecked"), +			public T doInHibernate(Session session) throws HibernateException {, +					return (T) session.load(entityClass, id, lockMode);, +					return (T) session.load(entityClass, id);, +		return executeWithNativeSession(new HibernateCallback<Object>() {, +		return executeWithNativeSession(new HibernateCallback<List<T>>() {, +			@SuppressWarnings("unchecked"), +			public List<T> doInHibernate(Session session) throws HibernateException {, +		executeWithNativeSession(new HibernateCallback<Object>() {, +		executeWithNativeSession(new HibernateCallback<Object>() {, +		return executeWithNativeSession(new HibernateCallback<Boolean>() {, +			public Boolean doInHibernate(Session session) {, +		executeWithNativeSession(new HibernateCallback<Object>() {, +		executeWithNativeSession(new HibernateCallback<Object>() {, +		executeWithNativeSession(new HibernateCallback<Object>() {, +		return executeWithNativeSession(new HibernateCallback<Serializable>() {, +			public Serializable doInHibernate(Session session) throws HibernateException {]