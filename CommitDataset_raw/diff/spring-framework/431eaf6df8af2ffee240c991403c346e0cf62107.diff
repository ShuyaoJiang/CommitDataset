[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/AbstractPropertyPlaceholderConfigurer.java, + * Copyright 2002-2011 the original author or authors., +	protected String nullValue;, +	private String beanName;, +	protected void doProcessProperties(ConfigurableListableBeanFactory beanFactoryToProcess,, +			StringValueResolver valueResolver) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/AbstractPropertyPlaceholderConfigurer.java, + * Copyright 2002-2011 the original author or authors., +	protected String nullValue;, +	private String beanName;, +	protected void doProcessProperties(ConfigurableListableBeanFactory beanFactoryToProcess,, +			StringValueResolver valueResolver) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.java, +import org.springframework.beans.BeansException;, +import org.springframework.util.StringValueResolver;, +	 * Visit each bean definition in the given bean factory and attempt to replace ${...} property, +	 * placeholders with values from the given properties., +	 */, +	@Override, +	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props), +			throws BeansException {, +, +		StringValueResolver valueResolver = new PlaceholderResolvingStringValueResolver(props);, +, +		this.doProcessProperties(beanFactoryToProcess, valueResolver);, +	}, +, +	private class PlaceholderResolvingStringValueResolver implements StringValueResolver {, +, +		private final PropertyPlaceholderHelper helper;, +, +		private final PlaceholderResolver resolver;, +, +		public PlaceholderResolvingStringValueResolver(Properties props) {, +			this.helper = new PropertyPlaceholderHelper(, +					placeholderPrefix, placeholderSuffix, valueSeparator, ignoreUnresolvablePlaceholders);, +			this.resolver = new PropertyPlaceholderConfigurerResolver(props);, +		}, +, +		public String resolveStringValue(String strVal) throws BeansException {, +			String value = this.helper.replacePlaceholders(strVal, this.resolver);, +			return (value.equals(nullValue) ? null : value);, +		}, +	}, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/AbstractPropertyPlaceholderConfigurer.java, + * Copyright 2002-2011 the original author or authors., +	protected String nullValue;, +	private String beanName;, +	protected void doProcessProperties(ConfigurableListableBeanFactory beanFactoryToProcess,, +			StringValueResolver valueResolver) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.java, +import org.springframework.beans.BeansException;, +import org.springframework.util.StringValueResolver;, +	 * Visit each bean definition in the given bean factory and attempt to replace ${...} property, +	 * placeholders with values from the given properties., +	 */, +	@Override, +	protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props), +			throws BeansException {, +, +		StringValueResolver valueResolver = new PlaceholderResolvingStringValueResolver(props);, +, +		this.doProcessProperties(beanFactoryToProcess, valueResolver);, +	}, +, +	private class PlaceholderResolvingStringValueResolver implements StringValueResolver {, +, +		private final PropertyPlaceholderHelper helper;, +, +		private final PlaceholderResolver resolver;, +, +		public PlaceholderResolvingStringValueResolver(Properties props) {, +			this.helper = new PropertyPlaceholderHelper(, +					placeholderPrefix, placeholderSuffix, valueSeparator, ignoreUnresolvablePlaceholders);, +			this.resolver = new PropertyPlaceholderConfigurerResolver(props);, +		}, +, +		public String resolveStringValue(String strVal) throws BeansException {, +			String value = this.helper.replacePlaceholders(strVal, this.resolver);, +			return (value.equals(nullValue) ? null : value);, +		}, +	}, +, +	/**, +++ b/org.springframework.context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java, +import org.springframework.core.env.ConfigurablePropertyResolver;, +import org.springframework.util.StringValueResolver;, + * @see org.springframework.beans.factory.config.PropertyPlaceholderConfigurer, +	/**, +	 * {@value} is the name given to the {@link PropertySource} that wraps the, +	 * {@linkplain #setEnvironment environment} supplied to this configurer., +	 */, +	public static final String ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME = "environmentProperties";, +	private MutablePropertySources propertySources;, +				this.propertySources.addLast(, +					new PropertySource<Environment>(ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME, this.environment) {, +						@Override, +						public String getProperty(String key) {]