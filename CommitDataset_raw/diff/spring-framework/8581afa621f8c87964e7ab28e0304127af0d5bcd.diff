[+++ b/spring-web/src/main/java/org/springframework/web/util/pattern/ParsingPathMatcher.java, +import java.util.stream.Collectors;, +		PathContainer pathContainer = PathContainer.parse(path, StandardCharsets.UTF_8);, +		PathMatchResult results = pathPattern.matchAndExtract(pathContainer);, +		// Collapse PathMatchResults to simple value results, +		// TODO: (path parameters are lost in this translation), +		if (results.getUriVariables().size() == 0) {, +			return Collections.emptyMap();, +			return results.getUriVariables().entrySet().stream(), +					.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));, +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/ParsingPathMatcher.java, +import java.util.stream.Collectors;, +		PathContainer pathContainer = PathContainer.parse(path, StandardCharsets.UTF_8);, +		PathMatchResult results = pathPattern.matchAndExtract(pathContainer);, +		// Collapse PathMatchResults to simple value results, +		// TODO: (path parameters are lost in this translation), +		if (results.getUriVariables().size() == 0) {, +			return Collections.emptyMap();, +			return results.getUriVariables().entrySet().stream(), +					.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));, +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/PathPattern.java, +import org.springframework.util.CollectionUtils;, +, +	// TODO: remove String-variants, +, +	public boolean matches(String path) {, +		return matches(PathContainer.parse(path, StandardCharsets.UTF_8));, +	}, +, +	public PathMatchResult matchAndExtract(String path) {, +		return matchAndExtract(PathContainer.parse(path, StandardCharsets.UTF_8));, +	}, +, +	@Nullable, +	public PathRemainingMatchInfo getPathRemaining(@Nullable String path) {, +		return getPathRemaining(path != null ?, +				PathContainer.parse(path, StandardCharsets.UTF_8) : null);, +	}, +, +, +, +, +				info = new PathRemainingMatchInfo(EMPTY_PATH, matchingContext.getPathMatchResult());, +						 matchingContext.getPathMatchResult());, +	public PathMatchResult matchAndExtract(PathContainer pathContainer) {, +			return matchingContext.getPathMatchResult();, +			return PathMatchResult.EMPTY;, +, +	 * Represents the result of a successful path match. This holds the keys that matched, the, +	 * values that were found for each key and, if any, the path parameters (matrix variables), +	 * attached to that path element., +	 * For example: "/{var}" against "/foo;a=b" will return a PathMathResult with 'foo=bar', +	 * for URI variables and 'a=b' as path parameters for 'foo'., +		private static final PathMatchResult EMPTY =, +				new PathMatchResult(Collections.emptyMap(), Collections.emptyMap());, +		private final Map<String, String> uriVariables;, +		private final Map<String, MultiValueMap<String, String>> matrixVariables;, +, +, +		public PathMatchResult(Map<String, String> uriVars,, +				@Nullable Map<String, MultiValueMap<String, String>> matrixVars) {, +, +			this.uriVariables = Collections.unmodifiableMap(uriVars);, +			this.matrixVariables = matrixVars != null ?, +					Collections.unmodifiableMap(matrixVars) : Collections.emptyMap();, +, +		public Map<String, String> getUriVariables() {, +			return this.uriVariables;, +		public Map<String, MultiValueMap<String, String>> getMatrixVariables() {, +			return this.matrixVariables;, +		@Override, +		public String toString() {, +			return "PathMatchResult[uriVariables=" + this.uriVariables + ", " +, +					"matrixVariables=" + this.matrixVariables + "]";, +		private final PathMatchResult pathMatchResult;, +			this(pathRemaining, PathMatchResult.EMPTY);, +		PathRemainingMatchInfo(@Nullable PathContainer pathRemaining, PathMatchResult pathMatchResult) {, +			this.pathMatchResult = pathMatchResult;, +		public Map<String, String> getUriVariables() {, +			return this.pathMatchResult.getUriVariables();, +		}, +, +		/**, +		 * Return the path parameters for each bound variable., +		 */, +		public Map<String, MultiValueMap<String, String>> getMatrixVariables() {, +			return this.pathMatchResult.getMatrixVariables();, +		private Map<String, String> extractedUriVariables;, +, +		@Nullable, +		private Map<String, MultiValueMap<String, String>> extractedMatrixVariables;, +			if (this.extractedUriVariables == null) {, +				this.extractedUriVariables = new HashMap<>();, +			this.extractedUriVariables.put(key, value);, +, +			if (!parameters.isEmpty()) {, +				if (this.extractedMatrixVariables == null) {, +					this.extractedMatrixVariables = new HashMap<>();, +				}, +				this.extractedMatrixVariables.put(key, CollectionUtils.unmodifiableMultiValueMap(parameters));]