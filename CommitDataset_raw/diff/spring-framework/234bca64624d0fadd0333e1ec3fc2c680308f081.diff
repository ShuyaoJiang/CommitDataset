[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +				location = this.environment.resolveRequiredPlaceholders(location);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +				location = this.environment.resolveRequiredPlaceholders(location);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/PropertySource.java, + * <h3>Resolving placeholders within @PropertySource resource locations</h3>, + * Any ${...} placeholders present in a {@code @PropertySource} {@linkplain #value(), + * resource location} will be resolved against the set of property sources already, + * registered against the environment.  For example:, + * <pre class="code">, + * &#064;Configuration, + * &#064;PropertySource("classpath:/com/${my.placeholder:default/path}/app.properties"), + * public class AppConfig {, + *     &#064;Autowired, + *     Environment env;, + *, + *     &#064;Bean, + *     public TestBean testBean() {, + *         TestBean testBean = new TestBean();, + *         testBean.setName(env.getProperty("testbean.name"));, + *         return testBean;, + *     }, + * }</pre>, + *, + * Assuming that "my.placeholder" is present in one of the property sources already, + * registered, e.g. system properties or environment variables, the placeholder will, + * be resolved to the corresponding value. If not, then "default/path" will be used as a, + * default. Expressing a default value (delimited by colon ":") is optional.  If no, + * default is specified and a property cannot be resolved, an {@code, + * IllegalArgumentException} will be thrown., + *, +	 * {@code "file:/path/to/file"}., +	 * <p>Resource location wildcards (e.g. *&#42;/*.properties) are not permitted; each, +	 * location must evaluate to exactly one {@code .properties} resource., +	 * <p>${...} placeholders will be resolved against any/all property sources already, +	 * registered with the {@code Environment}. See {@linkplain PropertySource above} for, +	 * examples., +	 * <p>Each location will be added to the enclosing {@code Environment} as its own, +	 * property source, and in the order declared., +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +				location = this.environment.resolveRequiredPlaceholders(location);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/PropertySource.java, + * <h3>Resolving placeholders within @PropertySource resource locations</h3>, + * Any ${...} placeholders present in a {@code @PropertySource} {@linkplain #value(), + * resource location} will be resolved against the set of property sources already, + * registered against the environment.  For example:, + * <pre class="code">, + * &#064;Configuration, + * &#064;PropertySource("classpath:/com/${my.placeholder:default/path}/app.properties"), + * public class AppConfig {, + *     &#064;Autowired, + *     Environment env;, + *, + *     &#064;Bean, + *     public TestBean testBean() {, + *         TestBean testBean = new TestBean();, + *         testBean.setName(env.getProperty("testbean.name"));, + *         return testBean;, + *     }, + * }</pre>, + *, + * Assuming that "my.placeholder" is present in one of the property sources already, + * registered, e.g. system properties or environment variables, the placeholder will, + * be resolved to the corresponding value. If not, then "default/path" will be used as a, + * default. Expressing a default value (delimited by colon ":") is optional.  If no, + * default is specified and a property cannot be resolved, an {@code, + * IllegalArgumentException} will be thrown., + *, +	 * {@code "file:/path/to/file"}., +	 * <p>Resource location wildcards (e.g. *&#42;/*.properties) are not permitted; each, +	 * location must evaluate to exactly one {@code .properties} resource., +	 * <p>${...} placeholders will be resolved against any/all property sources already, +	 * registered with the {@code Environment}. See {@linkplain PropertySource above} for, +	 * examples., +	 * <p>Each location will be added to the enclosing {@code Environment} as its own, +	 * property source, and in the order declared., +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/PropertySourceAnnotationTests.java, +	@Test(expected=IllegalArgumentException.class), +	public void withUnresolvablePlaceholder() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(ConfigWithUnresolvablePlaceholder.class);, +		ctx.refresh();, +	}, +, +	@Test, +	public void withUnresolvablePlaceholderAndDefault() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(ConfigWithUnresolvablePlaceholderAndDefault.class);, +		ctx.refresh();, +		assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p1TestBean"));, +	}, +, +	@Test, +	public void withResolvablePlaceholder() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(ConfigWithResolvablePlaceholder.class);, +		System.setProperty("path.to.properties", "org/springframework/context/annotation");, +		ctx.refresh();, +		assertThat(ctx.getBean(TestBean.class).getName(), equalTo("p1TestBean"));, +		System.clearProperty("path.to.properties");]