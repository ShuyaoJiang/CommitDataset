[+++ b/spring-context/src/main/java/org/springframework/context/PayloadApplicationEvent.java, +	/**, +	 * Create a new PayloadApplicationEvent., +	 * @param source the component that published the event (never {@code null}), +	 * @param payload the payload object, +	 */, +		return this.payload;, +++ b/spring-context/src/main/java/org/springframework/context/PayloadApplicationEvent.java, +	/**, +	 * Create a new PayloadApplicationEvent., +	 * @param source the component that published the event (never {@code null}), +	 * @param payload the payload object, +	 */, +		return this.payload;, +++ b/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java, +		@EventListener(condition = "#payload.startsWith('OK')"), +		public void handleString(String payload) {, +			super.handleString(payload);, +++ b/spring-context/src/main/java/org/springframework/context/PayloadApplicationEvent.java, +	/**, +	 * Create a new PayloadApplicationEvent., +	 * @param source the component that published the event (never {@code null}), +	 * @param payload the payload object, +	 */, +		return this.payload;, +++ b/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java, +		@EventListener(condition = "#payload.startsWith('OK')"), +		public void handleString(String payload) {, +			super.handleString(payload);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java, + * Copyright 2002-2015 the original author or authors., +	public long[] getHeartbeat() {, +		String rawValue = getFirstNativeHeader(STOMP_HEARTBEAT_HEADER);, +		if (!StringUtils.hasText(rawValue)) {, +			return Arrays.copyOf(DEFAULT_HEARTBEAT, 2);, +		}, +		String[] rawValues = StringUtils.commaDelimitedListToStringArray(rawValue);, +		return new long[] {Long.valueOf(rawValues[0]), Long.valueOf(rawValues[1])};, +	}, +, +	public Set<String> getAcceptVersion() {, +		String rawValue = getFirstNativeHeader(STOMP_ACCEPT_VERSION_HEADER);, +		return (rawValue != null ? StringUtils.commaDelimitedListToSet(rawValue) : Collections.<String>emptySet());, +	}, +, +	@Override, +++ b/spring-context/src/main/java/org/springframework/context/PayloadApplicationEvent.java, +	/**, +	 * Create a new PayloadApplicationEvent., +	 * @param source the component that published the event (never {@code null}), +	 * @param payload the payload object, +	 */, +		return this.payload;, +++ b/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java, +		@EventListener(condition = "#payload.startsWith('OK')"), +		public void handleString(String payload) {, +			super.handleString(payload);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java, + * Copyright 2002-2015 the original author or authors., +	public long[] getHeartbeat() {, +		String rawValue = getFirstNativeHeader(STOMP_HEARTBEAT_HEADER);, +		if (!StringUtils.hasText(rawValue)) {, +			return Arrays.copyOf(DEFAULT_HEARTBEAT, 2);, +		}, +		String[] rawValues = StringUtils.commaDelimitedListToStringArray(rawValue);, +		return new long[] {Long.valueOf(rawValues[0]), Long.valueOf(rawValues[1])};, +	}, +, +	public Set<String> getAcceptVersion() {, +		String rawValue = getFirstNativeHeader(STOMP_ACCEPT_VERSION_HEADER);, +		return (rawValue != null ? StringUtils.commaDelimitedListToSet(rawValue) : Collections.<String>emptySet());, +	}, +, +	@Override, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/CrossOrigin.java, + * @since 4.2, +++ b/spring-context/src/main/java/org/springframework/context/PayloadApplicationEvent.java, +	/**, +	 * Create a new PayloadApplicationEvent., +	 * @param source the component that published the event (never {@code null}), +	 * @param payload the payload object, +	 */, +		return this.payload;, +++ b/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java, +		@EventListener(condition = "#payload.startsWith('OK')"), +		public void handleString(String payload) {, +			super.handleString(payload);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java, + * Copyright 2002-2015 the original author or authors., +	public long[] getHeartbeat() {, +		String rawValue = getFirstNativeHeader(STOMP_HEARTBEAT_HEADER);, +		if (!StringUtils.hasText(rawValue)) {, +			return Arrays.copyOf(DEFAULT_HEARTBEAT, 2);, +		}, +		String[] rawValues = StringUtils.commaDelimitedListToStringArray(rawValue);, +		return new long[] {Long.valueOf(rawValues[0]), Long.valueOf(rawValues[1])};, +	}, +, +	public Set<String> getAcceptVersion() {, +		String rawValue = getFirstNativeHeader(STOMP_ACCEPT_VERSION_HEADER);]