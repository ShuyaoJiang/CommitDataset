[+++ b/spring-web/src/main/java/org/springframework/http/codec/protobuf/ProtobufDecoder.java, +import java.util.ArrayList;, + * <p>Flux deserialized via, + * <p>Notice that default instance of Protobuf message produces empty byte array, so, + * {@code Mono.just(Msg.getDefaultInstance())} sent over the network will be deserialized, + * as an empty {@link Mono}., + *, +				.flatMapIterable(new MessageDecoderFunction(elementType, this.maxMessageSize));, +	private class MessageDecoderFunction implements Function<DataBuffer, Iterable<? extends Message>> {, +, +, +		public Iterable<? extends Message> apply(DataBuffer input) {, +				List<Message> messages = new ArrayList<>();, +				int remainingBytesToRead;, +				int chunkBytesToRead;, +, +				do {, +							throw new DecodingException("Can't parse message size");, +							throw new DecodingException(, +											this.messageBytesToRead + ") exceeds the configured limit (" + this.maxMessageSize + ")");, +, +					chunkBytesToRead = this.messageBytesToRead >= input.readableByteCount() ?, +					remainingBytesToRead = input.readableByteCount() - chunkBytesToRead;, +, +					byte[] bytesToWrite = new byte[chunkBytesToRead];, +					input.read(bytesToWrite, 0, chunkBytesToRead);, +					this.output.write(bytesToWrite);, +, +						messages.add(builder.build());, +				} while (remainingBytesToRead > 0);, +				return messages;, +				throw new DecodingException("I/O error while parsing input stream", ex);, +				throw new DecodingException("Could not read Protobuf message: " + ex.getMessage(), ex);, +++ b/spring-web/src/main/java/org/springframework/http/codec/protobuf/ProtobufDecoder.java, +import java.util.ArrayList;, + * <p>Flux deserialized via, + * <p>Notice that default instance of Protobuf message produces empty byte array, so, + * {@code Mono.just(Msg.getDefaultInstance())} sent over the network will be deserialized, + * as an empty {@link Mono}., + *, +				.flatMapIterable(new MessageDecoderFunction(elementType, this.maxMessageSize));, +	private class MessageDecoderFunction implements Function<DataBuffer, Iterable<? extends Message>> {, +, +, +		public Iterable<? extends Message> apply(DataBuffer input) {, +				List<Message> messages = new ArrayList<>();, +				int remainingBytesToRead;, +				int chunkBytesToRead;, +, +				do {, +							throw new DecodingException("Can't parse message size");, +							throw new DecodingException(, +											this.messageBytesToRead + ") exceeds the configured limit (" + this.maxMessageSize + ")");, +, +					chunkBytesToRead = this.messageBytesToRead >= input.readableByteCount() ?, +					remainingBytesToRead = input.readableByteCount() - chunkBytesToRead;, +, +					byte[] bytesToWrite = new byte[chunkBytesToRead];, +					input.read(bytesToWrite, 0, chunkBytesToRead);, +					this.output.write(bytesToWrite);, +, +						messages.add(builder.build());, +				} while (remainingBytesToRead > 0);, +				return messages;, +				throw new DecodingException("I/O error while parsing input stream", ex);, +				throw new DecodingException("Could not read Protobuf message: " + ex.getMessage(), ex);, +++ b/spring-web/src/main/java/org/springframework/http/codec/protobuf/ProtobufEncoder.java, + * <p>Flux are serialized using, +++ b/spring-web/src/main/java/org/springframework/http/codec/protobuf/ProtobufDecoder.java, +import java.util.ArrayList;, + * <p>Flux deserialized via, + * <p>Notice that default instance of Protobuf message produces empty byte array, so, + * {@code Mono.just(Msg.getDefaultInstance())} sent over the network will be deserialized, + * as an empty {@link Mono}., + *, +				.flatMapIterable(new MessageDecoderFunction(elementType, this.maxMessageSize));, +	private class MessageDecoderFunction implements Function<DataBuffer, Iterable<? extends Message>> {, +, +, +		public Iterable<? extends Message> apply(DataBuffer input) {, +				List<Message> messages = new ArrayList<>();, +				int remainingBytesToRead;, +				int chunkBytesToRead;, +, +				do {, +							throw new DecodingException("Can't parse message size");, +							throw new DecodingException(, +											this.messageBytesToRead + ") exceeds the configured limit (" + this.maxMessageSize + ")");, +, +					chunkBytesToRead = this.messageBytesToRead >= input.readableByteCount() ?, +					remainingBytesToRead = input.readableByteCount() - chunkBytesToRead;, +, +					byte[] bytesToWrite = new byte[chunkBytesToRead];, +					input.read(bytesToWrite, 0, chunkBytesToRead);, +					this.output.write(bytesToWrite);, +, +						messages.add(builder.build());, +				} while (remainingBytesToRead > 0);, +				return messages;, +				throw new DecodingException("I/O error while parsing input stream", ex);]