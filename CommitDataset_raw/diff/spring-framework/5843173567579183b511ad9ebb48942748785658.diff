[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +				this.knownSuperclasses.values().removeIf(configClass::equals);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +				this.knownSuperclasses.values().removeIf(configClass::equals);, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +	/**, +	 * Return a shared default {@code ReactiveAdapterRegistry} instance, lazily, +	 * building it once needed., +	 * <p><b>NOTE:</b> We highly recommend passing a long-lived, pre-configured, +	 * {@code ReactiveAdapterRegistry} instance for customization purposes., +	 * This accessor is only meant as a fallback for code paths that want to, +	 * fall back on a default instance if one isn't provided., +	 * @return the shared {@code ReactiveAdapterRegistry} instance (never {@code null}), +	 * @since 5.0.2, +	 */, +	public static ReactiveAdapterRegistry getSharedInstance() {, +		ReactiveAdapterRegistry ar = sharedInstance;, +		if (ar == null) {, +			synchronized (ReactiveAdapterRegistry.class) {, +				ar = sharedInstance;, +				if (ar == null) {, +					ar = new ReactiveAdapterRegistry();, +					sharedInstance = ar;, +				}, +			}, +		}, +		return ar;, +	}, +, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +				this.knownSuperclasses.values().removeIf(configClass::equals);, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +	/**, +	 * Return a shared default {@code ReactiveAdapterRegistry} instance, lazily, +	 * building it once needed., +	 * <p><b>NOTE:</b> We highly recommend passing a long-lived, pre-configured, +	 * {@code ReactiveAdapterRegistry} instance for customization purposes., +	 * This accessor is only meant as a fallback for code paths that want to, +	 * fall back on a default instance if one isn't provided., +	 * @return the shared {@code ReactiveAdapterRegistry} instance (never {@code null}), +	 * @since 5.0.2, +	 */, +	public static ReactiveAdapterRegistry getSharedInstance() {, +		ReactiveAdapterRegistry ar = sharedInstance;, +		if (ar == null) {, +			synchronized (ReactiveAdapterRegistry.class) {, +				ar = sharedInstance;, +				if (ar == null) {, +					ar = new ReactiveAdapterRegistry();, +					sharedInstance = ar;, +				}, +			}, +		}, +		return ar;, +	}, +, +, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java, +	 * Create a new {@code DefaultConversionService} with the set of, +	 * {@linkplain DefaultConversionService#addDefaultConverters(ConverterRegistry) default converters}., +	 */, +	public DefaultConversionService() {, +		addDefaultConverters(this);, +	}, +, +, +	/**]