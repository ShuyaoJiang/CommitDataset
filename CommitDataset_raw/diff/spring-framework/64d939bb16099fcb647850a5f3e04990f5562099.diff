[+++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, +/*, + * Copyright 2002-2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.web.accept;, +, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +import java.util.Properties;, +, +import javax.servlet.ServletContext;, +, +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.beans.factory.InitializingBean;, +import org.springframework.http.MediaType;, +import org.springframework.util.CollectionUtils;, +, +/**, + * A factory providing convenient access to a {@code ContentNegotiationManager}, + * configured with one or more {@link ContentNegotiationStrategy} instances., + *, + * <p>By default strategies for checking the extension of the request path and, + * the {@code Accept} header are registered. The path extension check will perform, + * lookups through the {@link ServletContext} and the Java Activation Framework, + * (if present) unless {@linkplain #setMediaTypes(Map) media types} are configured., + *, + * @author Rossen Stoyanchev, + * @since 3.2, + */, +public class ContentNegotiationManagerFactoryBean implements FactoryBean<ContentNegotiationManager>, InitializingBean {, +, +	private boolean favorPathExtension = true;, +, +	private boolean favorParameter = false;, +, +	private boolean ignoreAcceptHeader = false;, +, +	private Map<String, MediaType> mediaTypes = new HashMap<String, MediaType>();, +, +	private Boolean useJaf;, +, +	private String parameterName;, +, +	private MediaType defaultContentType;, +, +	private ContentNegotiationManager contentNegotiationManager;, +, +	/**, +	 * Indicate whether the extension of the request path should be used to determine, +	 * the requested media type with the <em>highest priority</em>., +	 * <p>By default this value is set to {@code true} in which case a request, +	 * for {@code /hotels.pdf} will be interpreted as a request for, +	 * {@code "application/pdf"} regardless of the {@code Accept} header., +	 */, +	public void setFavorPathExtension(boolean favorPathExtension) {, +		this.favorPathExtension = favorPathExtension;, +	}, +, +	/**, +	 * Add mappings from file extensions to media types., +	 * <p>If this property is not set, the Java Action Framework, if available, may, +	 * still be used in conjunction with {@link #setFavorPathExtension(boolean)}., +	 */, +	public void setMediaTypes(Properties mediaTypes) {, +		if (!CollectionUtils.isEmpty(mediaTypes)) {, +			for (Map.Entry<Object, Object> entry : mediaTypes.entrySet()) {, +				String extension = ((String) entry.getKey()).toLowerCase(Locale.ENGLISH);, +				this.mediaTypes.put(extension, MediaType.valueOf((String) entry.getValue()));, +			}, +		}, +	}, +, +	/**, +	 * Indicate whether to use the Java Activation Framework as a fallback option, +	 * to map from file extensions to media types. This is used only when, +	 * {@link #setFavorPathExtension(boolean)} is set to {@code true}., +	 * <p>The default value is {@code true}., +	 * @see #parameterName, +	 * @see #setMediaTypes(Map), +	 */, +	public void setUseJaf(boolean useJaf) {, +		this.useJaf = useJaf;, +	}, +, +	/**]