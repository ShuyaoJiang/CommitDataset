[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +		Class<?> resolved = type.resolve();, +		if (resolved != null && !type.hasGenerics()) {, +			return getBeanNamesForType(resolved, true, true);, +		}, +		else {, +	}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +		Class<?> resolved = type.resolve();, +		if (resolved != null && !type.hasGenerics()) {, +			return getBeanNamesForType(resolved, true, true);, +		}, +		else {, +	}, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java, +		lbf.freezeConfiguration();, +		lbf.freezeConfiguration();, +		lbf.freezeConfiguration();, +		lbf.freezeConfiguration();, +		lbf.freezeConfiguration();, +		lbf.freezeConfiguration();, +	public void testSingletonLookupByNameIsFastEnough() {, +		// Assume.group(TestGroup.PERFORMANCE);, +		Assume.notLogging(factoryLog);, +		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory();, +		lbf.registerBeanDefinition("test", new RootBeanDefinition(TestBean.class));, +		lbf.freezeConfiguration();, +		StopWatch sw = new StopWatch();, +		sw.start("singleton");, +		for (int i = 0; i < 1000000; i++) {, +			lbf.getBean("test");, +		}, +		sw.stop();, +		// System.out.println(sw.getTotalTimeMillis());, +		assertTrue("Singleton lookup took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1000);, +	}, +, +	@Test, +	public void testSingletonLookupByTypeIsFastEnough() {, +		// Assume.group(TestGroup.PERFORMANCE);, +		Assume.notLogging(factoryLog);, +		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory();, +		lbf.registerBeanDefinition("test", new RootBeanDefinition(TestBean.class));, +		lbf.freezeConfiguration();, +		StopWatch sw = new StopWatch();, +		sw.start("singleton");, +		for (int i = 0; i < 1000000; i++) {, +			lbf.getBean(TestBean.class);, +		}, +		sw.stop();, +		// System.out.println(sw.getTotalTimeMillis());, +		assertTrue("Singleton lookup took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1000);, +	}, +, +	@Test, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +		Class<?> resolved = type.resolve();, +		if (resolved != null && !type.hasGenerics()) {, +			return getBeanNamesForType(resolved, true, true);, +		}, +		else {, +	}, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java, +		lbf.freezeConfiguration();, +		lbf.freezeConfiguration();, +		lbf.freezeConfiguration();, +		lbf.freezeConfiguration();, +		lbf.freezeConfiguration();, +		lbf.freezeConfiguration();, +	public void testSingletonLookupByNameIsFastEnough() {, +		// Assume.group(TestGroup.PERFORMANCE);, +		Assume.notLogging(factoryLog);, +		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory();, +		lbf.registerBeanDefinition("test", new RootBeanDefinition(TestBean.class));, +		lbf.freezeConfiguration();, +		StopWatch sw = new StopWatch();, +		sw.start("singleton");, +		for (int i = 0; i < 1000000; i++) {, +			lbf.getBean("test");, +		}, +		sw.stop();, +		// System.out.println(sw.getTotalTimeMillis());, +		assertTrue("Singleton lookup took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1000);, +	}, +, +	@Test, +	public void testSingletonLookupByTypeIsFastEnough() {, +		// Assume.group(TestGroup.PERFORMANCE);, +		Assume.notLogging(factoryLog);, +		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory();, +		lbf.registerBeanDefinition("test", new RootBeanDefinition(TestBean.class));, +		lbf.freezeConfiguration();, +		StopWatch sw = new StopWatch();, +		sw.start("singleton");, +		for (int i = 0; i < 1000000; i++) {, +			lbf.getBean(TestBean.class);, +		}, +		sw.stop();, +		// System.out.println(sw.getTotalTimeMillis());, +		assertTrue("Singleton lookup took too long: " + sw.getTotalTimeMillis(), sw.getTotalTimeMillis() < 1000);]