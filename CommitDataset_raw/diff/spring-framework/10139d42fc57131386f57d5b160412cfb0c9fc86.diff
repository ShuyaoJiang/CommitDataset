[+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponse.java, +	 * Close this response and the underlying HTTP connection., +	 * <p>This non-blocking method has to be called if its body isn't going, +	 * to be consumed. Not doing so might result in HTTP connection pool, +	 * inconsistencies or memory leaks., +	 * <p>This shouldn't be called if the response body is read,, +	 * because it would prevent connections to be reused and cancel, +	 * the benefits of using a connection pooling., +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponse.java, +	 * Close this response and the underlying HTTP connection., +	 * <p>This non-blocking method has to be called if its body isn't going, +	 * to be consumed. Not doing so might result in HTTP connection pool, +	 * inconsistencies or memory leaks., +	 * <p>This shouldn't be called if the response body is read,, +	 * because it would prevent connections to be reused and cancel, +	 * the benefits of using a connection pooling., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, +	 * Close this response and the underlying HTTP connection., +	 * <p>This non-blocking method has to be called if its body isn't going, +	 * to be consumed. Not doing so might result in HTTP connection pool, +	 * inconsistencies or memory leaks., +	 * <p>This shouldn't be called if the response body is read,, +	 * because it would prevent connections to be reused and cancel, +	 * the benefits of using a connection pooling., +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponse.java, +	 * Close this response and the underlying HTTP connection., +	 * <p>This non-blocking method has to be called if its body isn't going, +	 * to be consumed. Not doing so might result in HTTP connection pool, +	 * inconsistencies or memory leaks., +	 * <p>This shouldn't be called if the response body is read,, +	 * because it would prevent connections to be reused and cancel, +	 * the benefits of using a connection pooling., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, +	 * Close this response and the underlying HTTP connection., +	 * <p>This non-blocking method has to be called if its body isn't going, +	 * to be consumed. Not doing so might result in HTTP connection pool, +	 * inconsistencies or memory leaks., +	 * <p>This shouldn't be called if the response body is read,, +	 * because it would prevent connections to be reused and cancel, +	 * the benefits of using a connection pooling., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientResponse.java, +		return  body(BodyExtractors.toMono(elementClass));, +		return body(BodyExtractors.toMono(typeReference));, +		return body(BodyExtractors.toFlux(elementClass));, +		return body(BodyExtractors.toFlux(typeReference));, +						() -> Mono.just(new ResponseEntity<>(headers, statusCode))));, +				.map(body -> new ResponseEntity<>(body, headers, statusCode));, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponse.java, +	 * Close this response and the underlying HTTP connection., +	 * <p>This non-blocking method has to be called if its body isn't going, +	 * to be consumed. Not doing so might result in HTTP connection pool, +	 * inconsistencies or memory leaks., +	 * <p>This shouldn't be called if the response body is read,, +	 * because it would prevent connections to be reused and cancel, +	 * the benefits of using a connection pooling., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, +	 * Close this response and the underlying HTTP connection., +	 * <p>This non-blocking method has to be called if its body isn't going, +	 * to be consumed. Not doing so might result in HTTP connection pool, +	 * inconsistencies or memory leaks., +	 * <p>This shouldn't be called if the response body is read,, +	 * because it would prevent connections to be reused and cancel, +	 * the benefits of using a connection pooling., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientResponse.java, +		return  body(BodyExtractors.toMono(elementClass));, +		return body(BodyExtractors.toMono(typeReference));, +		return body(BodyExtractors.toFlux(elementClass));, +		return body(BodyExtractors.toFlux(typeReference));, +						() -> Mono.just(new ResponseEntity<>(headers, statusCode))));, +				.map(body -> new ResponseEntity<>(body, headers, statusCode));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +					response -> bodyToPublisher(response, BodyExtractors.toMono(bodyType),, +					response -> bodyToPublisher(response, BodyExtractors.toMono(typeReference),, +							mono -> (Mono<T>)mono));, +					response -> bodyToPublisher(response, BodyExtractors.toFlux(elementType),, +					response -> bodyToPublisher(response, BodyExtractors.toFlux(typeReference),, +		private <T extends Publisher<?>> T bodyToPublisher(ClientResponse response,, +				BodyExtractor<T, ? super ClientHttpResponse> extractor,, +				Function<Mono<? extends Throwable>, T> errorFunction) {, +					.orElse(response.body(extractor));, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponse.java, +	 * Close this response and the underlying HTTP connection., +	 * <p>This non-blocking method has to be called if its body isn't going, +	 * to be consumed. Not doing so might result in HTTP connection pool, +	 * inconsistencies or memory leaks., +	 * <p>This shouldn't be called if the response body is read,, +	 * because it would prevent connections to be reused and cancel, +	 * the benefits of using a connection pooling., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, +	 * Close this response and the underlying HTTP connection., +	 * <p>This non-blocking method has to be called if its body isn't going, +	 * to be consumed. Not doing so might result in HTTP connection pool, +	 * inconsistencies or memory leaks., +	 * <p>This shouldn't be called if the response body is read,, +	 * because it would prevent connections to be reused and cancel, +	 * the benefits of using a connection pooling., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientResponse.java, +		return  body(BodyExtractors.toMono(elementClass));, +		return body(BodyExtractors.toMono(typeReference));, +		return body(BodyExtractors.toFlux(elementClass));]