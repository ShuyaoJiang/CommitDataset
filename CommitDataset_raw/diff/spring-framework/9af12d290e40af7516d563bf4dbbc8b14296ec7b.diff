[+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/Async.java, + * Copyright 2002-2016 the original author or authors., +	 * of {@code Async#value} always overrides any value set at the class level., +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/Async.java, + * Copyright 2002-2016 the original author or authors., +	 * of {@code Async#value} always overrides any value set at the class level., +++ b/spring-context/src/test/java/org/springframework/scripting/groovy/GroovyScriptFactoryTests.java, + * Copyright 2002-2016 the original author or authors., +	@Test  // SPR-6268, +	@Test  // SPR-6268, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/Async.java, + * Copyright 2002-2016 the original author or authors., +	 * of {@code Async#value} always overrides any value set at the class level., +++ b/spring-context/src/test/java/org/springframework/scripting/groovy/GroovyScriptFactoryTests.java, + * Copyright 2002-2016 the original author or authors., +	@Test  // SPR-6268, +	@Test  // SPR-6268, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAwareOrderComparator.java, +import org.springframework.core.OrderComparator;, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/Async.java, + * Copyright 2002-2016 the original author or authors., +	 * of {@code Async#value} always overrides any value set at the class level., +++ b/spring-context/src/test/java/org/springframework/scripting/groovy/GroovyScriptFactoryTests.java, + * Copyright 2002-2016 the original author or authors., +	@Test  // SPR-6268, +	@Test  // SPR-6268, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAwareOrderComparator.java, +import org.springframework.core.OrderComparator;, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, + * <p>Most {@code find*()} methods and some {@code get*()} methods in this class, + * provide support for finding annotations used as meta-annotations. Consult the, + * javadoc for each method in this class for details. For fine-grained support for, + * meta-annotations with <em>attribute overrides</em> in <em>composed annotations</em>,, + * consider using {@link AnnotatedElementUtils}'s more specific methods instead., +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/Async.java, + * Copyright 2002-2016 the original author or authors., +	 * of {@code Async#value} always overrides any value set at the class level., +++ b/spring-context/src/test/java/org/springframework/scripting/groovy/GroovyScriptFactoryTests.java, + * Copyright 2002-2016 the original author or authors., +	@Test  // SPR-6268, +	@Test  // SPR-6268, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAwareOrderComparator.java, +import org.springframework.core.OrderComparator;, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, + * <p>Most {@code find*()} methods and some {@code get*()} methods in this class, + * provide support for finding annotations used as meta-annotations. Consult the, + * javadoc for each method in this class for details. For fine-grained support for, + * meta-annotations with <em>attribute overrides</em> in <em>composed annotations</em>,, + * consider using {@link AnnotatedElementUtils}'s more specific methods instead., +++ b/spring-test/src/main/java/org/springframework/test/annotation/Commit.java, +import java.lang.annotation.ElementType;, +import java.lang.annotation.RetentionPolicy;, +@Target({ElementType.TYPE, ElementType.METHOD}), +@Retention(RetentionPolicy.RUNTIME), +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/Async.java, + * Copyright 2002-2016 the original author or authors., +	 * of {@code Async#value} always overrides any value set at the class level., +++ b/spring-context/src/test/java/org/springframework/scripting/groovy/GroovyScriptFactoryTests.java, + * Copyright 2002-2016 the original author or authors., +	@Test  // SPR-6268, +	@Test  // SPR-6268, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAwareOrderComparator.java, +import org.springframework.core.OrderComparator;, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, + * <p>Most {@code find*()} methods and some {@code get*()} methods in this class, + * provide support for finding annotations used as meta-annotations. Consult the, + * javadoc for each method in this class for details. For fine-grained support for, + * meta-annotations with <em>attribute overrides</em> in <em>composed annotations</em>,, + * consider using {@link AnnotatedElementUtils}'s more specific methods instead., +++ b/spring-test/src/main/java/org/springframework/test/annotation/Commit.java, +import java.lang.annotation.ElementType;, +import java.lang.annotation.RetentionPolicy;, +@Target({ElementType.TYPE, ElementType.METHOD}), +@Retention(RetentionPolicy.RUNTIME), +++ b/spring-test/src/main/java/org/springframework/test/annotation/DirtiesContext.java, + * Copyright 2002-2016 the original author or authors., +@Target({ElementType.TYPE, ElementType.METHOD}), +@Retention(RetentionPolicy.RUNTIME), +	 * The <i>mode</i> to use when a test method is annotated with, +	 * {@code @DirtiesContext}., +	 * <p>Defaults to {@link MethodMode#AFTER_METHOD AFTER_METHOD}., +	 * <p>Setting the method mode on an annotated test class has no meaning., +	 * For class-level control, use {@link #classMode} instead., +	 * @since 4.2, +	 */, +	MethodMode methodMode() default MethodMode.AFTER_METHOD;, +, +	/**, +	 * The <i>mode</i> to use when a test class is annotated with, +	 * {@code @DirtiesContext}., +	 * <p>Defaults to {@link ClassMode#AFTER_CLASS AFTER_CLASS}., +	 * <p>Setting the class mode on an annotated test method has no meaning., +	 * For method-level control, use {@link #methodMode} instead., +	 * @since 3.0, +	 */, +	ClassMode classMode() default ClassMode.AFTER_CLASS;, +, +	/**, +	 * The context cache clearing <em>mode</em> to use when a context is, +	 * configured as part of a hierarchy via]