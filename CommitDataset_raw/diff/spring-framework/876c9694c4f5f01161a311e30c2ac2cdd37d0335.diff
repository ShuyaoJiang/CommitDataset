[+++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/AbstractMessageConverter.java, +import org.springframework.core.MethodParameter;, + * @author Sebastien Deleuze, +	/**, +	 * Name of the header that can be set to provide further information, +	 * ({@link MethodParameter} instance) about the origin of the payload (for, +	 * {@link #toMessage(Object, MessageHeaders)}) or about the target of the payload, +	 * ({@link #fromMessage(Message, Class)})., +	 *, +	 * @since 4.2, +	 */, +	public static final String METHOD_PARAMETER_HINT_HEADER = "methodParameterHint";, +	protected final Log logger = LogFactory.getLog(getClass());, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/AbstractMessageConverter.java, +import org.springframework.core.MethodParameter;, + * @author Sebastien Deleuze, +	/**, +	 * Name of the header that can be set to provide further information, +	 * ({@link MethodParameter} instance) about the origin of the payload (for, +	 * {@link #toMessage(Object, MessageHeaders)}) or about the target of the payload, +	 * ({@link #fromMessage(Message, Class)})., +	 *, +	 * @since 4.2, +	 */, +	public static final String METHOD_PARAMETER_HINT_HEADER = "methodParameterHint";, +	protected final Log logger = LogFactory.getLog(getClass());, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MappingJackson2MessageConverter.java, +import com.fasterxml.jackson.annotation.JsonView;, +import org.springframework.core.MethodParameter;, +			Class<?> serializationView = getSerializationView(headers);, +				if (serializationView != null) {, +					this.objectMapper.writerWithView(serializationView).writeValue(generator, payload);, +				}, +				else {, +				}, +				if (serializationView != null) {, +					this.objectMapper.writerWithView(serializationView).writeValue(writer, payload);, +				}, +				else {, +				}, +	private Class<?> getSerializationView(MessageHeaders headers) {, +		MethodParameter returnType = (headers == null ? null :, +				(MethodParameter)headers.get(METHOD_PARAMETER_HINT_HEADER));, +		if (returnType == null) {, +			return null;, +		}, +		JsonView annotation = returnType.getMethodAnnotation(JsonView.class);, +		if (annotation == null) {, +			return null;, +		}, +		Class<?>[] classes = annotation.value();, +		if (classes.length != 1) {, +			throw new IllegalArgumentException(, +					"@JsonView only supported for handler methods with exactly 1 class argument: " + returnType);, +		}, +		return classes[0];, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/AbstractMessageConverter.java, +import org.springframework.core.MethodParameter;, + * @author Sebastien Deleuze, +	/**, +	 * Name of the header that can be set to provide further information, +	 * ({@link MethodParameter} instance) about the origin of the payload (for, +	 * {@link #toMessage(Object, MessageHeaders)}) or about the target of the payload, +	 * ({@link #fromMessage(Message, Class)})., +	 *, +	 * @since 4.2, +	 */, +	public static final String METHOD_PARAMETER_HINT_HEADER = "methodParameterHint";, +	protected final Log logger = LogFactory.getLog(getClass());, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MappingJackson2MessageConverter.java, +import com.fasterxml.jackson.annotation.JsonView;, +import org.springframework.core.MethodParameter;, +			Class<?> serializationView = getSerializationView(headers);, +				if (serializationView != null) {, +					this.objectMapper.writerWithView(serializationView).writeValue(generator, payload);, +				}, +				else {, +				}, +				if (serializationView != null) {, +					this.objectMapper.writerWithView(serializationView).writeValue(writer, payload);, +				}, +				else {, +				}, +	private Class<?> getSerializationView(MessageHeaders headers) {, +		MethodParameter returnType = (headers == null ? null :, +				(MethodParameter)headers.get(METHOD_PARAMETER_HINT_HEADER));, +		if (returnType == null) {, +			return null;, +		}, +		JsonView annotation = returnType.getMethodAnnotation(JsonView.class);, +		if (annotation == null) {, +			return null;, +		}, +		Class<?>[] classes = annotation.value();, +		if (classes.length != 1) {]