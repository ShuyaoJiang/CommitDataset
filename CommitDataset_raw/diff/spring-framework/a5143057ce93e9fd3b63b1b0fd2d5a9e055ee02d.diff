[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/AbstractWebSocketSesssion.java, + * @param T the type of the native (or delegate) WebSocket session, + *, +public abstract class AbstractWebSocketSesssion<T> implements WebSocketSession, NativeWebSocketSession {, +	private T nativeSession;, +	public T getNativeSession() {, +		return this.nativeSession;, +	@SuppressWarnings("unchecked"), +	@Override, +	public <R> R getNativeSession(Class<R> requiredType) {, +		if (requiredType != null) {, +			if (requiredType.isInstance(this.nativeSession)) {, +				return (R) this.nativeSession;, +			}, +		}, +		return null;, +	}, +, +	public void initializeNativeSession(T session) {, +		Assert.notNull(session, "session must not be null");, +		this.nativeSession = session;, +	}, +, +	protected final void checkNativeSessionInitialized() {, +		Assert.state(this.nativeSession != null, "WebSocket session is not yet initialized");, +		checkNativeSessionInitialized();, +		checkNativeSessionInitialized();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/AbstractWebSocketSesssion.java, + * @param T the type of the native (or delegate) WebSocket session, + *, +public abstract class AbstractWebSocketSesssion<T> implements WebSocketSession, NativeWebSocketSession {, +	private T nativeSession;, +	public T getNativeSession() {, +		return this.nativeSession;, +	@SuppressWarnings("unchecked"), +	@Override, +	public <R> R getNativeSession(Class<R> requiredType) {, +		if (requiredType != null) {, +			if (requiredType.isInstance(this.nativeSession)) {, +				return (R) this.nativeSession;, +			}, +		}, +		return null;, +	}, +, +	public void initializeNativeSession(T session) {, +		Assert.notNull(session, "session must not be null");, +		this.nativeSession = session;, +	}, +, +	protected final void checkNativeSessionInitialized() {, +		Assert.state(this.nativeSession != null, "WebSocket session is not yet initialized");, +		checkNativeSessionInitialized();, +		checkNativeSessionInitialized();, +++ /dev/null, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/AbstractWebSocketSesssion.java, + * @param T the type of the native (or delegate) WebSocket session, + *, +public abstract class AbstractWebSocketSesssion<T> implements WebSocketSession, NativeWebSocketSession {, +	private T nativeSession;, +	public T getNativeSession() {, +		return this.nativeSession;, +	@SuppressWarnings("unchecked"), +	@Override, +	public <R> R getNativeSession(Class<R> requiredType) {, +		if (requiredType != null) {, +			if (requiredType.isInstance(this.nativeSession)) {, +				return (R) this.nativeSession;, +			}, +		}, +		return null;, +	}, +, +	public void initializeNativeSession(T session) {, +		Assert.notNull(session, "session must not be null");, +		this.nativeSession = session;, +	}, +, +	protected final void checkNativeSessionInitialized() {, +		Assert.state(this.nativeSession != null, "WebSocket session is not yet initialized");, +		checkNativeSessionInitialized();, +		checkNativeSessionInitialized();, +++ /dev/null, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/JettyWebSocketHandlerAdapter.java, +			this.wsSession.initializeNativeSession(session);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/AbstractWebSocketSesssion.java, + * @param T the type of the native (or delegate) WebSocket session, + *, +public abstract class AbstractWebSocketSesssion<T> implements WebSocketSession, NativeWebSocketSession {, +	private T nativeSession;, +	public T getNativeSession() {, +		return this.nativeSession;, +	@SuppressWarnings("unchecked"), +	@Override, +	public <R> R getNativeSession(Class<R> requiredType) {, +		if (requiredType != null) {, +			if (requiredType.isInstance(this.nativeSession)) {, +				return (R) this.nativeSession;, +			}, +		}]