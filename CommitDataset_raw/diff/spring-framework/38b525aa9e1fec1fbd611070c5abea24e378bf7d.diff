[+++ b/spring-core/src/main/java/org/springframework/util/concurrent/SettableListenableFuture.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.util.concurrent;, +, +import org.springframework.util.Assert;, +, +import java.util.concurrent.CancellationException;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.ExecutionException;, +import java.util.concurrent.Future;, +import java.util.concurrent.TimeUnit;, +import java.util.concurrent.TimeoutException;, +import java.util.concurrent.locks.ReadWriteLock;, +import java.util.concurrent.locks.ReentrantReadWriteLock;, +, +/**, + * A {@link ListenableFuture} whose value can be set by the {@link #set(Object)} or, + * {@link #setException(Throwable)}. It may also be cancelled., + *, + * <p>Inspired by {@code com.google.common.util.concurrent.SettableFuture}., + *, + * @author Mattias Severson, + * @since 4.1, + */, +public class SettableListenableFuture<T> implements ListenableFuture<T> {, +, +	private final SettableFuture<T> settableFuture = new SettableFuture<T>();, +	private final ListenableFutureCallbackRegistry<T> registry = new ListenableFutureCallbackRegistry<T>();, +, +, +	/**, +	 * Set the value of this future. This method will return {@code true} if, +	 * the value was set successfully, or {@code false} if the future has already, +	 * been set or cancelled., +	 *, +	 * @param value the value that will be set., +	 * @return {@code true} if the value was successfully set, else {@code false}., +	 */, +	public boolean set(T value) {, +		boolean setValue = this.settableFuture.setValue(value);, +		if (setValue) {, +			this.registry.success(value);, +		}, +		return setValue;, +	}, +, +	/**, +	 * Set the exception of this future. This method will return {@code true} if, +	 * the exception was set successfully, or {@code false} if the future has already, +	 * been set or cancelled., +	 * @param exception the value that will be set., +	 * @return {@code true} if the exception was successfully set, else {@code false}., +	 */, +	public boolean setException(Throwable exception) {, +		Assert.notNull(exception, "exception must not be null");, +		boolean setException = this.settableFuture.setThrowable(exception);, +		if (setException) {, +			this.registry.failure(exception);, +		}, +		return setException;, +	}, +, +    @Override, +    public void addCallback(ListenableFutureCallback<? super T> callback) {, +		this.registry.addCallback(callback);, +    }, +, +    @Override, +    public boolean cancel(boolean mayInterruptIfRunning) {, +		boolean cancelled = this.settableFuture.cancel(mayInterruptIfRunning);, +		if (cancelled && mayInterruptIfRunning) {, +			interruptTask();, +		}, +		return cancelled;, +    }, +, +    @Override, +    public boolean isCancelled() {, +        return this.settableFuture.isCancelled();, +    }, +, +    @Override, +    public boolean isDone() {, +        return this.settableFuture.isDone();, +    }]