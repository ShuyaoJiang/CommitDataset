[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StubWebApplicationContext.java, +import org.springframework.beans.BeanUtils;, +import org.springframework.util.ClassUtils;, + * A stub WebApplicationContext that accepts registrations of object instances., + * <p>As registered object instances are instantiated and initialized externally,, + * there is no wiring, bean initialization, lifecycle events, as well as no, + * pre-processing and post-processing hooks typically associated with beans, + * managed by an {@link ApplicationContext}. Just a simple lookup into a, + * @author Juergen Hoeller, +		return ClassUtils.getDefaultClassLoader();, +			return BeanUtils.instantiate(beanClass);, +		public Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) {, +			return BeanUtils.instantiate(beanClass);, +		public Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) {, +			return BeanUtils.instantiate(beanClass);, +			return existingBean;, +			throw new UnsupportedOperationException("Dependency resolution not supported");, +			throw new UnsupportedOperationException("Dependency resolution not supported");, +			return existingBean;, +			return existingBean;, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StubWebApplicationContext.java, +import org.springframework.beans.BeanUtils;, +import org.springframework.util.ClassUtils;, + * A stub WebApplicationContext that accepts registrations of object instances., + * <p>As registered object instances are instantiated and initialized externally,, + * there is no wiring, bean initialization, lifecycle events, as well as no, + * pre-processing and post-processing hooks typically associated with beans, + * managed by an {@link ApplicationContext}. Just a simple lookup into a, + * @author Juergen Hoeller, +		return ClassUtils.getDefaultClassLoader();, +			return BeanUtils.instantiate(beanClass);, +		public Object createBean(Class<?> beanClass, int autowireMode, boolean dependencyCheck) {, +			return BeanUtils.instantiate(beanClass);, +		public Object autowire(Class<?> beanClass, int autowireMode, boolean dependencyCheck) {, +			return BeanUtils.instantiate(beanClass);, +			return existingBean;, +			throw new UnsupportedOperationException("Dependency resolution not supported");, +			throw new UnsupportedOperationException("Dependency resolution not supported");, +			return existingBean;, +			return existingBean;, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilderTests.java, + * Copyright 2002-2015 the original author or authors., +import com.fasterxml.jackson.databind.JsonSerializer;, +import com.fasterxml.jackson.databind.ser.impl.UnknownSerializer;, +import org.springframework.http.converter.json.SpringHandlerInstantiator;, +	@Test  // SPR-13375, +	public void springHandlerInstantiator() {, +		TestStandaloneMockMvcBuilder builder = new TestStandaloneMockMvcBuilder(new PersonController());, +		builder.build();, +		SpringHandlerInstantiator instantiator = new SpringHandlerInstantiator(builder.wac.getAutowireCapableBeanFactory());, +		JsonSerializer serializer = instantiator.serializerInstance(null, null, UnknownSerializer.class);, +		assertNotNull(serializer);, +	}, +]