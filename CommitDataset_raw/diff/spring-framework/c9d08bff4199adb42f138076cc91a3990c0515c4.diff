[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +				candidateNames = StringUtils.toStringArray(autowireCandidates);, +				if (containsSingleton(beanName) && args == null) {, +					Object beanInstance = getBean(beanName);, +					candidates.put(beanName, (beanInstance instanceof NullBean ? null : beanInstance));, +				if (beanInstance == null || beanInstance instanceof Class) {, +			if (beanInstance != null) {, +		}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +				candidateNames = StringUtils.toStringArray(autowireCandidates);, +				if (containsSingleton(beanName) && args == null) {, +					Object beanInstance = getBean(beanName);, +					candidates.put(beanName, (beanInstance instanceof NullBean ? null : beanInstance));, +				if (beanInstance == null || beanInstance instanceof Class) {, +			if (beanInstance != null) {, +		}, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java, +	public void testGetBeanByTypeWithPrimary() {, +	public void testGetBeanByTypeWithMultiplePrimary() {, +	public void testGetBeanByTypeWithPriority() {, +		RootBeanDefinition bd3 = new RootBeanDefinition(NullTestBeanFactoryBean.class);, +		lbf.registerBeanDefinition("bd3", bd3);, +		lbf.preInstantiateSingletons();, +	public void testMapInjectionWithPriority() {, +		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory();, +		lbf.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE);, +		RootBeanDefinition bd1 = new RootBeanDefinition(HighPriorityTestBean.class);, +		RootBeanDefinition bd2 = new RootBeanDefinition(LowPriorityTestBean.class);, +		RootBeanDefinition bd3 = new RootBeanDefinition(NullTestBeanFactoryBean.class);, +		RootBeanDefinition bd4 = new RootBeanDefinition(TestBeanRecipient.class, RootBeanDefinition.AUTOWIRE_CONSTRUCTOR, false);, +		lbf.registerBeanDefinition("bd1", bd1);, +		lbf.registerBeanDefinition("bd2", bd2);, +		lbf.registerBeanDefinition("bd3", bd3);, +		lbf.registerBeanDefinition("bd4", bd4);, +		lbf.preInstantiateSingletons();, +		TestBean bean = lbf.getBean(TestBeanRecipient.class).testBean;, +		assertThat(bean.getBeanName(), equalTo("bd1"));, +	}, +, +	@Test, +	public void testGetBeanByTypeWithMultiplePriority() {, +	public void testGetBeanByTypeWithPriorityAndNullInstance() {, +	public void testGetBeanByTypePrimaryHasPrecedenceOverPriority() {, +	 * public void testPrototypeCreationIsFastEnough2() {, +	public void testScopingBeanToUnregisteredScopeResultsInAnException() {, +	public void testExplicitScopeInheritanceForChildBeanDefinitions() {, +	public void testScopeInheritanceForChildBeanDefinitions() {, +		public T call() {, +		public Object getObject() {, +		public Object getObject() {, +		public TestBean getObject() {, +	private static class TestBeanRecipient {, +, +		public TestBean testBean;, +, +		public TestBeanRecipient(TestBean testBean) {, +			this.testBean = testBean;, +		}, +	}, +, +]