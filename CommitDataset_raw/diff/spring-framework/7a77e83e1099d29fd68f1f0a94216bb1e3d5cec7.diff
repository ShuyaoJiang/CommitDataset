[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Assign.java, + * Copyright 2002-2019 the original author or authors., +	public Assign(int startPos, int endPos, SpelNodeImpl... operands) {, +		super(startPos, endPos, operands);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Assign.java, + * Copyright 2002-2019 the original author or authors., +	public Assign(int startPos, int endPos, SpelNodeImpl... operands) {, +		super(startPos, endPos, operands);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/BeanReference.java, + * Copyright 2002-2019 the original author or authors., +	public BeanReference(int startPos, int endPos, String beanName) {, +		super(startPos, endPos);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Assign.java, + * Copyright 2002-2019 the original author or authors., +	public Assign(int startPos, int endPos, SpelNodeImpl... operands) {, +		super(startPos, endPos, operands);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/BeanReference.java, + * Copyright 2002-2019 the original author or authors., +	public BeanReference(int startPos, int endPos, String beanName) {, +		super(startPos, endPos);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/BooleanLiteral.java, + * Copyright 2002-2019 the original author or authors., +	public BooleanLiteral(String payload, int startPos, int endPos, boolean value) {, +		super(payload, startPos, endPos);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Assign.java, + * Copyright 2002-2019 the original author or authors., +	public Assign(int startPos, int endPos, SpelNodeImpl... operands) {, +		super(startPos, endPos, operands);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/BeanReference.java, + * Copyright 2002-2019 the original author or authors., +	public BeanReference(int startPos, int endPos, String beanName) {, +		super(startPos, endPos);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/BooleanLiteral.java, + * Copyright 2002-2019 the original author or authors., +	public BooleanLiteral(String payload, int startPos, int endPos, boolean value) {, +		super(payload, startPos, endPos);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/CompoundExpression.java, + * Copyright 2002-2019 the original author or authors., +	public CompoundExpression(int startPos, int endPos, SpelNodeImpl... expressionComponents) {, +		super(startPos, endPos, expressionComponents);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Assign.java, + * Copyright 2002-2019 the original author or authors., +	public Assign(int startPos, int endPos, SpelNodeImpl... operands) {, +		super(startPos, endPos, operands);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/BeanReference.java, + * Copyright 2002-2019 the original author or authors., +	public BeanReference(int startPos, int endPos, String beanName) {, +		super(startPos, endPos);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/BooleanLiteral.java, + * Copyright 2002-2019 the original author or authors., +	public BooleanLiteral(String payload, int startPos, int endPos, boolean value) {, +		super(payload, startPos, endPos);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/CompoundExpression.java, + * Copyright 2002-2019 the original author or authors., +	public CompoundExpression(int startPos, int endPos, SpelNodeImpl... expressionComponents) {, +		super(startPos, endPos, expressionComponents);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/ConstructorReference.java, + * Copyright 2002-2019 the original author or authors., +	public ConstructorReference(int startPos, int endPos, SpelNodeImpl... arguments) {, +		super(startPos, endPos, arguments);, +	public ConstructorReference(int startPos, int endPos, SpelNodeImpl[] dimensions, SpelNodeImpl... arguments) {, +		super(startPos, endPos, arguments);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Assign.java, + * Copyright 2002-2019 the original author or authors., +	public Assign(int startPos, int endPos, SpelNodeImpl... operands) {, +		super(startPos, endPos, operands);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/BeanReference.java, + * Copyright 2002-2019 the original author or authors., +	public BeanReference(int startPos, int endPos, String beanName) {, +		super(startPos, endPos);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/BooleanLiteral.java, + * Copyright 2002-2019 the original author or authors., +	public BooleanLiteral(String payload, int startPos, int endPos, boolean value) {, +		super(payload, startPos, endPos);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/CompoundExpression.java, + * Copyright 2002-2019 the original author or authors., +	public CompoundExpression(int startPos, int endPos, SpelNodeImpl... expressionComponents) {, +		super(startPos, endPos, expressionComponents);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/ConstructorReference.java, + * Copyright 2002-2019 the original author or authors., +	public ConstructorReference(int startPos, int endPos, SpelNodeImpl... arguments) {, +		super(startPos, endPos, arguments);, +	public ConstructorReference(int startPos, int endPos, SpelNodeImpl[] dimensions, SpelNodeImpl... arguments) {, +		super(startPos, endPos, arguments);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Elvis.java, + * Copyright 2002-2019 the original author or authors., +	public Elvis(int startPos, int endPos, SpelNodeImpl... args) {, +		super(startPos, endPos, args);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Assign.java, + * Copyright 2002-2019 the original author or authors., +	public Assign(int startPos, int endPos, SpelNodeImpl... operands) {, +		super(startPos, endPos, operands);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/BeanReference.java, + * Copyright 2002-2019 the original author or authors., +	public BeanReference(int startPos, int endPos, String beanName) {, +		super(startPos, endPos);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/BooleanLiteral.java, + * Copyright 2002-2019 the original author or authors., +	public BooleanLiteral(String payload, int startPos, int endPos, boolean value) {, +		super(payload, startPos, endPos);]