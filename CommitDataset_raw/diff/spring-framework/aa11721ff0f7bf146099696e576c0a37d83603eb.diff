[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java, +import org.springframework.aop.support.AopUtils;, +		Method targetMethod = AopUtils.getMostSpecificMethod(method, targetClass);, +		if (targetClass != null && targetMethod.getDeclaringClass().isInterface()) {, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java, +import org.springframework.aop.support.AopUtils;, +		Method targetMethod = AopUtils.getMostSpecificMethod(method, targetClass);, +		if (targetClass != null && targetMethod.getDeclaringClass().isInterface()) {, +++ b/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java, +		Class<?> specificTargetClass = (targetClass != null ? ClassUtils.getUserClass(targetClass) : null);, +				if (introductionAwareMethodMatcher != null ?, +						introductionAwareMethodMatcher.matches(method, targetClass, hasIntroductions) :, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java, +import org.springframework.aop.support.AopUtils;, +		Method targetMethod = AopUtils.getMostSpecificMethod(method, targetClass);, +		if (targetClass != null && targetMethod.getDeclaringClass().isInterface()) {, +++ b/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java, +		Class<?> specificTargetClass = (targetClass != null ? ClassUtils.getUserClass(targetClass) : null);, +				if (introductionAwareMethodMatcher != null ?, +						introductionAwareMethodMatcher.matches(method, targetClass, hasIntroductions) :, +++ b/spring-aop/src/main/java/org/springframework/aop/support/annotation/AnnotationMethodMatcher.java, + * Copyright 2002-2018 the original author or authors., +import java.lang.reflect.Proxy;, +		// Proxy classes never have annotations on their redeclared methods., +		if (targetClass != null && Proxy.isProxyClass(targetClass)) {, +			return false;, +		}, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java, +import org.springframework.aop.support.AopUtils;, +		Method targetMethod = AopUtils.getMostSpecificMethod(method, targetClass);, +		if (targetClass != null && targetMethod.getDeclaringClass().isInterface()) {, +++ b/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java, +		Class<?> specificTargetClass = (targetClass != null ? ClassUtils.getUserClass(targetClass) : null);, +				if (introductionAwareMethodMatcher != null ?, +						introductionAwareMethodMatcher.matches(method, targetClass, hasIntroductions) :, +++ b/spring-aop/src/main/java/org/springframework/aop/support/annotation/AnnotationMethodMatcher.java, + * Copyright 2002-2018 the original author or authors., +import java.lang.reflect.Proxy;, +		// Proxy classes never have annotations on their redeclared methods., +		if (targetClass != null && Proxy.isProxyClass(targetClass)) {, +			return false;, +		}, +++ b/spring-context/src/test/java/org/springframework/aop/aspectj/autoproxy/AnnotationPointcutTests.java, + * Copyright 2002-2018 the original author or authors., +, +	public void setup() {, +, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java, +import org.springframework.aop.support.AopUtils;, +		Method targetMethod = AopUtils.getMostSpecificMethod(method, targetClass);, +		if (targetClass != null && targetMethod.getDeclaringClass().isInterface()) {, +++ b/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java, +		Class<?> specificTargetClass = (targetClass != null ? ClassUtils.getUserClass(targetClass) : null);, +				if (introductionAwareMethodMatcher != null ?, +						introductionAwareMethodMatcher.matches(method, targetClass, hasIntroductions) :, +++ b/spring-aop/src/main/java/org/springframework/aop/support/annotation/AnnotationMethodMatcher.java, + * Copyright 2002-2018 the original author or authors., +import java.lang.reflect.Proxy;, +		// Proxy classes never have annotations on their redeclared methods., +		if (targetClass != null && Proxy.isProxyClass(targetClass)) {, +			return false;, +		}, +++ b/spring-context/src/test/java/org/springframework/aop/aspectj/autoproxy/AnnotationPointcutTests.java, + * Copyright 2002-2018 the original author or authors., +, +	public void setup() {, +, +++ b/spring-tx/src/test/java/org/springframework/transaction/annotation/AnnotationTransactionInterceptorTests.java, + * Copyright 2002-2018 the original author or authors., +, +		proxy.doSomethingDefault();, +		assertGetTransactionAndCommitCount(5);, +	public void crossClassInterfaceMethodLevelOnJdkProxy() {, +	public void crossClassInterfaceOnJdkProxy() {, +	@Test, +	public void withInterfaceOnTargetJdkProxy() {, +		ProxyFactory targetFactory = new ProxyFactory();, +		targetFactory.setTarget(new TestWithInterfaceImpl());, +		targetFactory.addInterface(TestWithInterface.class);, +, +		ProxyFactory proxyFactory = new ProxyFactory();, +		proxyFactory.setTarget(targetFactory.getProxy());, +		proxyFactory.addInterface(TestWithInterface.class);, +		proxyFactory.addAdvice(this.ti);, +, +		TestWithInterface proxy = (TestWithInterface) proxyFactory.getProxy();, +, +		proxy.doSomething();, +		assertGetTransactionAndCommitCount(1);, +, +		proxy.doSomethingElse();, +		assertGetTransactionAndCommitCount(2);, +, +		proxy.doSomethingElse();, +		assertGetTransactionAndCommitCount(3);, +, +		proxy.doSomething();, +		assertGetTransactionAndCommitCount(4);, +, +		proxy.doSomethingDefault();]