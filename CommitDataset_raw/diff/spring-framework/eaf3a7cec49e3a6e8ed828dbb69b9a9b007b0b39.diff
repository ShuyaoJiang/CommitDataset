[+++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/BeanDefinitionRegistrar.java, + * @see BeanMethod, +	void register(BeanMethod method, BeanDefinitionRegistry registry);, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/BeanDefinitionRegistrar.java, + * @see BeanMethod, +	void register(BeanMethod method, BeanDefinitionRegistry registry);, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/BeanMethod.java, +/*, + * Copyright 2002-2008 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.config.java;, +, +import static java.lang.String.*;, +import static org.springframework.config.java.Util.*;, +, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Modifier;, +import java.util.ArrayList;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Set;, +, +import net.sf.cglib.proxy.Callback;, +, +import org.springframework.util.Assert;, +, +, +/** TODO: JAVADOC */, +public final class BeanMethod implements Validatable {, +, +	private final String name;, +	private final int modifiers;, +	private final ModelClass returnType;, +	private final List<Annotation> annotations = new ArrayList<Annotation>();, +	private transient ConfigurationClass declaringClass;, +	private transient int lineNumber;, +	private transient FactoryMethod factoryAnno;, +	private transient final List<Validator> validators = new ArrayList<Validator>();, +, +	public BeanMethod(String name, int modifiers, ModelClass returnType, Annotation... annotations) {, +		Assert.hasText(name);, +		this.name = name;, +, +		Assert.notNull(annotations);, +		for (Annotation annotation : annotations) {, +			this.annotations.add(annotation);, +			if (factoryAnno == null), +				factoryAnno = annotation.annotationType().getAnnotation(FactoryMethod.class);, +		}, +, +		Assert.isTrue(modifiers >= 0, "modifiers must be non-negative: " + modifiers);, +		this.modifiers = modifiers;, +, +		Assert.notNull(returnType);, +		this.returnType = returnType;, +	}, +, +	public String getName() {, +		return name;, +	}, +, +	public ModelClass getReturnType() {, +		return returnType;, +	}, +, +	/**, +	 * @see java.lang.reflect.Modifier, +	 */, +	public int getModifiers() {, +		return modifiers;, +	}, +, +	/**, +	 * Returns the annotation on this method matching <var>annoType</var> or null, +	 * IllegalStateException} if not present., +	 * , +	 * @see #getRequiredAnnotation(Class), +	 */, +	@SuppressWarnings("unchecked"), +	public <T extends Annotation> T getAnnotation(Class<T> annoType) {, +		for (Annotation anno : annotations), +			if (anno.annotationType().equals(annoType)), +				return (T) anno;, +, +		return null;, +	}, +, +	/**]