[+++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/ExpressionTestCase.java, +			SpelExpression expr = parser.parseExpression(expression);, +			SpelUtilities.printAbstractSyntaxTree(System.out, expr);, +			Throwable t = pe.getCause();, +			if (t == null) {, +				fail("ParseException caught with no defined cause");, +			}, +			if (!(t instanceof SpelException)) {, +				t.printStackTrace();, +				fail("Cause of parse exception is not a SpelException");, +			}, +			SpelException ex = (SpelException) t;, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/ExpressionTestCase.java, +			SpelExpression expr = parser.parseExpression(expression);, +			SpelUtilities.printAbstractSyntaxTree(System.out, expr);, +			Throwable t = pe.getCause();, +			if (t == null) {, +				fail("ParseException caught with no defined cause");, +			}, +			if (!(t instanceof SpelException)) {, +				t.printStackTrace();, +				fail("Cause of parse exception is not a SpelException");, +			}, +			SpelException ex = (SpelException) t;, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/ParserErrorMessagesTests.java, +	// TODO (asc) extract expected insert messages into constants (just in case of changes)?, +	// TODO (asc) review poor messages, marked // POOR below, +		// will not fit into an int, needs L suffix, +		evaluate("0xCAFEBABEL", 0xCAFEBABEL, Long.class);, +	public void testBrokenExpression02() {, +		// rogue 'G' on the end, +		parseAndCheckError("0xB0BG", SpelMessages.PARSE_PROBLEM, 5, "mismatched input 'G' expecting EOF");, +	}, +, +	public void testBrokenExpression03() {, +		// too many closing brackets, +		parseAndCheckError("((3;4;)+(5;6;)))", SpelMessages.PARSE_PROBLEM, 15, "mismatched input ')' expecting EOF");, +		evaluate("((3;4;)+(5;6;))", 10 /* 4+6 */, Integer.class);, +	}, +, +	public void testBrokenExpression04() {, +		// missing right operand, +		parseAndCheckError("true or ", SpelMessages.PARSE_PROBLEM, -1, "no viable alternative at input '<EOF>'"); // POOR, +	}, +, +	public void testBrokenExpression05() {, +		// missing right operand, +		parseAndCheckError("1 + ", SpelMessages.PARSE_PROBLEM, -1, "no viable alternative at input '<EOF>'"); // POOR, +	}, +, +	public void testBrokenExpression06() {, +		// expression list missing surrounding parentheses, +		parseAndCheckError("1;2;3", SpelMessages.PARSE_PROBLEM, 1, "mismatched input ';' expecting EOF"); // POOR, +		evaluate("(1;2;3)", 3, Integer.class);, +	}]