[+++ b/src/docs/asciidoc/index.adoc, +* <<web.adoc#spring-web,The Web>>, +++ b/src/docs/asciidoc/index.adoc, +* <<web.adoc#spring-web,The Web>>, +++ b/src/docs/asciidoc/web.adoc, +including its <<webflux-fn,functional programming model>>., +++ b/src/docs/asciidoc/index.adoc, +* <<web.adoc#spring-web,The Web>>, +++ b/src/docs/asciidoc/web.adoc, +including its <<webflux-fn,functional programming model>>., +++ b/src/docs/asciidoc/web/web-integration.adoc, +++ b/src/docs/asciidoc/index.adoc, +* <<web.adoc#spring-web,The Web>>, +++ b/src/docs/asciidoc/web.adoc, +including its <<webflux-fn,functional programming model>>., +++ b/src/docs/asciidoc/web/web-integration.adoc, +++ b/src/docs/asciidoc/web/web-mvc.adoc, +== Introduction to Spring Web MVC, +Spring Web MVC is the Servlet-based, web framework included in the Spring Framework., +Its name is based on the name of the module, "spring-webmvc", but most people call, +it simply Spring MVC., +The Spring Framework also includes the reactive, <<webflux,Spring WebFlux>>, +web framework that runs on on Servlet containers via Servlet 3.1 non-blocking I/O, +as well as on other non-blocking runtimes such as Netty and Undertow., +Spring MVC, like many other web frameworks, is designed around the front controller, +pattern with a central `Servlet`, the `DispatcherServlet`, dispatching incoming, +requests to registered handlers for processing requests, providing convenient mapping, +and exception handling facilities., +The `DispatcherServlet` provides the shared algorithm for processing requests while, +actual work is performed by configurable, delegate components. This model is very, +flexible and it can be used with just about any workflow, with the installation of the, +appropriate delegate components, +(see <<mvc-servlet-special-bean-types,Special Bean Types>>)., +The `DispatcherServlet` uses Spring configuration to discover the delegate components, +it needs to perform handler mapping, view resolution, and much more. As an actual, +`Servlet` it needs to be declared and mapped according to the Servlet specification., +This can be done through code configuration or in`web.xml`., +Below is an example of code-based configuration where `WebApplicationInitializer` is an, +interface provided by Spring MVC that ensures this Java-based configuration is, +auto-detected by the Servlet container (see, +<<mvc-container-config,Code-based Servlet container initialization>> for more details):, +  public void onStartup(ServletContext servletCxt) {, +, +    // Load Spring web application configuration, +    AnnotationConfigWebApplicationContext cxt = new AnnotationConfigWebApplicationContext();, +    cxt.register(AppConfig.class);, +    cxt.refresh();, +, +    // Create DispatcherServlet, +    DispatcherServlet servlet = new DispatcherServlet(cxt);, +, +    // Register and map the Servlet, +    ServletRegistration.Dynamic registration = servletCxt.addServlet("app", servlet);, +    registration.addMapping("/app/*");, +In addition to using the ServletContext API directly as shown above, you can also extend, +the convenient base class `AbstractAnnotationConfigDispatcherServletInitializer` and, +override specific methods to customize it (an example is shown later under, +<<mvc-servlet-context-hierarchy,WebApplicationContext Hierarchy>>)., +Below is the `web.xml` equivalent of the above code-based example:, +  <listener>, +    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>, +  </listener>, +    <param-value>/WEB-INF/app-context.xml</param-value>, +, +    <servlet-name>app</servlet-name>, +, +    <servlet-name>app</servlet-name>, +    <url-pattern>/app/*</url-pattern>, +, +[[mvc-servlet-context-hierarchy]], +=== WebApplicationContext Hierarchy, +, +For many applications, a single `WebApplicationContext` is simple and sufficient., +It is also possible to set up a context hierarchy where one root `WebApplicationContext`, +is shared across multiple `DispatcherServlet` (or other `Servlet`) instances each with, +its own `WebApplicationContext` configuration, +(see <<core.adoc#context-introduction,Additional Capabilities of the ApplicationContext>>, +for more details)., +, +The root `WebApplicationContext` contains infrastructure beans (e.g. data repositories,, +business services) that need to be shared across multiple Servlet instances. These beans, +are effectively inherited and can be overridden (re-declared) in the Servlet-specific, +context, which also contains beans local to the given `Servlet`., +, +image::images/mvc-context-hierarchy.png[], +, +[NOTE], +====, +`WebApplicationContext` is an extension of the plain `ApplicationContext` that has, +a link to the `ServletContext`). `WebApplicationContext` is bound to the, +`ServletContext` and by using static methods on the `RequestContextUtils` class you can, +====, +Below is an example of configuration that sets up a `WebApplicationContext` hierarchy:, +  public class MyWebAppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {, +      return new Class[] { RootConfig.class };, +      return new Class[] { App1Config.class };, +      return new String[] { "/app1/*" };, +Below is the `web.xml` equivalent:, +, +[source,xml,indent=0]]