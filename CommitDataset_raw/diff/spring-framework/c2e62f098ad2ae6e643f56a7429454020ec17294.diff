[+++ b/.gitignore, +jxl.log, +++ b/.gitignore, +jxl.log, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/support/RequestContext.java, +import org.springframework.web.util.UriTemplate;, +	 * Return a context-aware URl for the given relative URL with placeholders (named keys with braces <code>{}</code>). , +	 * @param relativeUrl the relative URL part, +	 * @param a map of parameters to insert as placeholders in the url, +	 * @return a URL that points back to the server with an absolute path, +	 * (also URL-encoded accordingly), +	 */, +	public String getContextUrl(String relativeUrl, Map<String,?> params) {, +		String url = getContextPath() + relativeUrl;, +		UriTemplate template = new UriTemplate(url);, +		url = template.expand(params).toASCIIString();, +		if (this.response != null) {, +			url = this.response.encodeURL(url);, +		}, +		return url;, +	}, +, +	/**, +++ b/.gitignore, +jxl.log, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/support/RequestContext.java, +import org.springframework.web.util.UriTemplate;, +	 * Return a context-aware URl for the given relative URL with placeholders (named keys with braces <code>{}</code>). , +	 * @param relativeUrl the relative URL part, +	 * @param a map of parameters to insert as placeholders in the url, +	 * @return a URL that points back to the server with an absolute path, +	 * (also URL-encoded accordingly), +	 */, +	public String getContextUrl(String relativeUrl, Map<String,?> params) {, +		String url = getContextPath() + relativeUrl;, +		UriTemplate template = new UriTemplate(url);, +		url = template.expand(params).toASCIIString();, +		if (this.response != null) {, +			url = this.response.encodeURL(url);, +		}, +		return url;, +	}, +, +	/**, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/freemarker/spring.ftl, +<#macro url relativeUrl extra...><#if extra?? && extra?size!=0>${springMacroRequestContext.getContextUrl(relativeUrl,extra)}<#else>${springMacroRequestContext.getContextUrl(relativeUrl)}</#if></#macro>, +++ b/.gitignore, +jxl.log, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/support/RequestContext.java, +import org.springframework.web.util.UriTemplate;, +	 * Return a context-aware URl for the given relative URL with placeholders (named keys with braces <code>{}</code>). , +	 * @param relativeUrl the relative URL part, +	 * @param a map of parameters to insert as placeholders in the url, +	 * @return a URL that points back to the server with an absolute path, +	 * (also URL-encoded accordingly), +	 */, +	public String getContextUrl(String relativeUrl, Map<String,?> params) {, +		String url = getContextPath() + relativeUrl;, +		UriTemplate template = new UriTemplate(url);, +		url = template.expand(params).toASCIIString();, +		if (this.response != null) {, +			url = this.response.encodeURL(url);, +		}, +		return url;, +	}, +, +	/**, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/freemarker/spring.ftl, +<#macro url relativeUrl extra...><#if extra?? && extra?size!=0>${springMacroRequestContext.getContextUrl(relativeUrl,extra)}<#else>${springMacroRequestContext.getContextUrl(relativeUrl)}</#if></#macro>, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/view/DummyMacroRequestContext.java, +import org.springframework.web.util.UriTemplate;, +	 * @see org.springframework.web.servlet.support.RequestContext#getContextUrl(String, Map), +	 */, +	public String getContextUrl(String relativeUrl, Map<String,String> params) {, +		UriTemplate template = new UriTemplate(relativeUrl);, +		return getContextPath() + template.expand(params).toASCIIString();, +	}, +, +	/**, +++ b/.gitignore, +jxl.log, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/support/RequestContext.java, +import org.springframework.web.util.UriTemplate;, +	 * Return a context-aware URl for the given relative URL with placeholders (named keys with braces <code>{}</code>). , +	 * @param relativeUrl the relative URL part, +	 * @param a map of parameters to insert as placeholders in the url, +	 * @return a URL that points back to the server with an absolute path, +	 * (also URL-encoded accordingly), +	 */, +	public String getContextUrl(String relativeUrl, Map<String,?> params) {, +		String url = getContextPath() + relativeUrl;, +		UriTemplate template = new UriTemplate(url);, +		url = template.expand(params).toASCIIString();, +		if (this.response != null) {, +			url = this.response.encodeURL(url);, +		}, +		return url;, +	}, +, +	/**]