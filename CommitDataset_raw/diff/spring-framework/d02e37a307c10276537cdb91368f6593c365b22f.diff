[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/ConverterRegistry.java, +	 * The convertible sourceType/targetType pair is derived from the Converter's parameterized types., +	 * @throws IllegalArgumentException if the parameterized types could not be resolved, +	 * Add a plain converter to this registry., +	 * The convertible sourceType/targetType pair is specified explicitly., +	 * Allows for a Converter to be reused for multiple distinct pairs without having to create a Converter class for each pair., +	 * @since 3.1, +	 */, +	void addConverter(Class<?> sourceType, Class<?> targetType, Converter<?, ?> converter);, +, +	/**, +	 * The convertible sourceType/rangeType pair is derived from the ConverterFactory's parameterized types., +	 * @throws IllegalArgumentException if the parameterized types could not be resolved. , +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/ConverterRegistry.java, +	 * The convertible sourceType/targetType pair is derived from the Converter's parameterized types., +	 * @throws IllegalArgumentException if the parameterized types could not be resolved, +	 * Add a plain converter to this registry., +	 * The convertible sourceType/targetType pair is specified explicitly., +	 * Allows for a Converter to be reused for multiple distinct pairs without having to create a Converter class for each pair., +	 * @since 3.1, +	 */, +	void addConverter(Class<?> sourceType, Class<?> targetType, Converter<?, ?> converter);, +, +	/**, +	 * The convertible sourceType/rangeType pair is derived from the ConverterFactory's parameterized types., +	 * @throws IllegalArgumentException if the parameterized types could not be resolved. , +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ConversionServiceFactory.java, +	 * Create a new default GenericConversionService instance that can be safely modified., +	 * Populate the given GenericConversionService instance with the set of default converters., +	 * @deprecated in Spring 3.1 in favor of {@link DefaultConversionService#addDefaultConverters(ConverterRegistry)}, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/ConverterRegistry.java, +	 * The convertible sourceType/targetType pair is derived from the Converter's parameterized types., +	 * @throws IllegalArgumentException if the parameterized types could not be resolved, +	 * Add a plain converter to this registry., +	 * The convertible sourceType/targetType pair is specified explicitly., +	 * Allows for a Converter to be reused for multiple distinct pairs without having to create a Converter class for each pair., +	 * @since 3.1, +	 */, +	void addConverter(Class<?> sourceType, Class<?> targetType, Converter<?, ?> converter);, +, +	/**, +	 * The convertible sourceType/rangeType pair is derived from the ConverterFactory's parameterized types., +	 * @throws IllegalArgumentException if the parameterized types could not be resolved. , +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ConversionServiceFactory.java, +	 * Create a new default GenericConversionService instance that can be safely modified., +	 * Populate the given GenericConversionService instance with the set of default converters., +	 * @deprecated in Spring 3.1 in favor of {@link DefaultConversionService#addDefaultConverters(ConverterRegistry)}, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java, +import org.springframework.core.convert.ConversionService;, +import org.springframework.core.convert.converter.ConverterRegistry;, +, + * converters appropriate for most environments., + * {@link #addDefaultConverters(ConverterRegistry)} utility method for ad hoc use against any, + * {@code ConverterRegistry} instance., +	 * {@linkplain DefaultConversionService#addDefaultConverters(ConverterRegistry) default converters}., +	// static utility methods, +	, +	 * @param converterRegistry the registry of converters to add to (must also be castable to ConversionService), +	 * @throws ClassCastException if the converterRegistry could not be cast to a ConversionService, +	public static void addDefaultConverters(ConverterRegistry converterRegistry) {, +		addScalarConverters(converterRegistry);, +		addCollectionConverters(converterRegistry);, +		addFallbackConverters(converterRegistry);, +	}, +	// internal helpers, +	private static void addScalarConverters(ConverterRegistry converterRegistry) {, +		converterRegistry.addConverter(new StringToBooleanConverter());, +		converterRegistry.addConverter(Boolean.class, String.class, new ObjectToStringConverter());, +		converterRegistry.addConverterFactory(new StringToNumberConverterFactory());, +		converterRegistry.addConverter(Number.class, String.class, new ObjectToStringConverter());, +		converterRegistry.addConverterFactory(new NumberToNumberConverterFactory());, +		converterRegistry.addConverter(new StringToCharacterConverter());, +		converterRegistry.addConverter(Character.class, String.class, new ObjectToStringConverter());, +		converterRegistry.addConverter(new NumberToCharacterConverter());, +		converterRegistry.addConverterFactory(new CharacterToNumberFactory());, +		converterRegistry.addConverterFactory(new StringToEnumConverterFactory());, +		converterRegistry.addConverter(Enum.class, String.class, new EnumToStringConverter());, +		converterRegistry.addConverter(new StringToLocaleConverter());, +		converterRegistry.addConverter(Locale.class, String.class, new ObjectToStringConverter());, +		converterRegistry.addConverter(new PropertiesToStringConverter());, +		converterRegistry.addConverter(new StringToPropertiesConverter());, +	}, +	private static void addCollectionConverters(ConverterRegistry converterRegistry) {, +		ConversionService conversionService = (ConversionService) converterRegistry;		, +		converterRegistry.addConverter(new ArrayToCollectionConverter(conversionService));, +		converterRegistry.addConverter(new CollectionToArrayConverter(conversionService));, +		converterRegistry.addConverter(new ArrayToArrayConverter(conversionService));, +		converterRegistry.addConverter(new CollectionToCollectionConverter(conversionService));, +		converterRegistry.addConverter(new MapToMapConverter(conversionService));		, +		converterRegistry.addConverter(new ArrayToStringConverter(conversionService));, +		converterRegistry.addConverter(new StringToArrayConverter(conversionService));, +		converterRegistry.addConverter(new ArrayToObjectConverter(conversionService));, +		converterRegistry.addConverter(new ObjectToArrayConverter(conversionService));, +		converterRegistry.addConverter(new CollectionToStringConverter(conversionService));, +		converterRegistry.addConverter(new StringToCollectionConverter(conversionService));, +, +		converterRegistry.addConverter(new CollectionToObjectConverter(conversionService));, +		converterRegistry.addConverter(new ObjectToCollectionConverter(conversionService));, +	}, +	]