[+++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCacheManager.java, +	@Override, +	public void afterPropertiesSet() {, +		if (getCacheManager() == null) {, +			setCacheManager(EhCacheManagerUtils.buildCacheManager());, +		}, +		super.afterPropertiesSet();, +	}, +, +		Status status = getCacheManager().getStatus();, +		String[] names = getCacheManager().getCacheNames();, +			caches.add(new EhCacheCache(getCacheManager().getEhcache(name)));, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCacheManager.java, +	@Override, +	public void afterPropertiesSet() {, +		if (getCacheManager() == null) {, +			setCacheManager(EhCacheManagerUtils.buildCacheManager());, +		}, +		super.afterPropertiesSet();, +	}, +, +		Status status = getCacheManager().getStatus();, +		String[] names = getCacheManager().getCacheNames();, +			caches.add(new EhCacheCache(getCacheManager().getEhcache(name)));, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java, +	public void afterPropertiesSet() throws CacheException {, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCacheManager.java, +	@Override, +	public void afterPropertiesSet() {, +		if (getCacheManager() == null) {, +			setCacheManager(EhCacheManagerUtils.buildCacheManager());, +		}, +		super.afterPropertiesSet();, +	}, +, +		Status status = getCacheManager().getStatus();, +		String[] names = getCacheManager().getCacheNames();, +			caches.add(new EhCacheCache(getCacheManager().getEhcache(name)));, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java, +	public void afterPropertiesSet() throws CacheException {, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheManagerFactoryBean.java, +	public void afterPropertiesSet() throws CacheException {, +		Configuration configuration = (this.configLocation != null ?, +				EhCacheManagerUtils.parseConfiguration(this.configLocation) : ConfigurationFactory.parseConfiguration());, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCacheManager.java, +	@Override, +	public void afterPropertiesSet() {, +		if (getCacheManager() == null) {, +			setCacheManager(EhCacheManagerUtils.buildCacheManager());, +		}, +		super.afterPropertiesSet();, +	}, +, +		Status status = getCacheManager().getStatus();, +		String[] names = getCacheManager().getCacheNames();, +			caches.add(new EhCacheCache(getCacheManager().getEhcache(name)));, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java, +	public void afterPropertiesSet() throws CacheException {, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheManagerFactoryBean.java, +	public void afterPropertiesSet() throws CacheException {, +		Configuration configuration = (this.configLocation != null ?, +				EhCacheManagerUtils.parseConfiguration(this.configLocation) : ConfigurationFactory.parseConfiguration());, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheManagerUtils.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.cache.ehcache;, +, +import java.io.IOException;, +import java.io.InputStream;, +, +import net.sf.ehcache.CacheException;, +import net.sf.ehcache.CacheManager;, +import net.sf.ehcache.config.Configuration;, +import net.sf.ehcache.config.ConfigurationFactory;, +, +import org.springframework.core.io.Resource;, +, +/**, + * Convenient builder methods for EhCache 2.5+ {@link CacheManager} setup,, + * providing easy programmatic bootstrapping from a Spring-provided resource., + * This is primarily intended for use within {@code @Bean} methods in a, + * Spring configuration class., + *, + * <p>These methods are a simple alternative to custom {@link CacheManager} setup, + * code. For any advanced purposes, consider using {@link #parseConfiguration},, + * customizing the configuration object, and then calling the]