[+++ b/build.gradle, +		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.0.5-2", +	ext.kotlinVersion          = "1.0.5-2", +	apply plugin: "kotlin", +, +		testCompile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"), +		testCompile("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"), +, +	apply plugin: "kotlin", +		testCompile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"), +		testCompile("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"), +	apply plugin: "kotlin", +, +		testCompile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"), +		testCompile("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"), +++ b/build.gradle, +		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.0.5-2", +	ext.kotlinVersion          = "1.0.5-2", +	apply plugin: "kotlin", +, +		testCompile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"), +		testCompile("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"), +, +	apply plugin: "kotlin", +		testCompile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"), +		testCompile("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"), +	apply plugin: "kotlin", +, +		testCompile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"), +		testCompile("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"), +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +	 * Return whether this method indicates a parameter which is not required, +	 * (either in the form of Java 8's {@link java.util.Optional} or Kotlin nullable type)., +		return (getParameterType() == Optional.class || KotlinUtils.isNullable(this));, +		return (getParameterType() == Optional.class ? nested() : this);, +++ b/build.gradle, +		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.0.5-2", +	ext.kotlinVersion          = "1.0.5-2", +	apply plugin: "kotlin", +, +		testCompile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"), +		testCompile("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"), +, +	apply plugin: "kotlin", +		testCompile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"), +		testCompile("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"), +	apply plugin: "kotlin", +, +		testCompile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"), +		testCompile("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"), +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +	 * Return whether this method indicates a parameter which is not required, +	 * (either in the form of Java 8's {@link java.util.Optional} or Kotlin nullable type)., +		return (getParameterType() == Optional.class || KotlinUtils.isNullable(this));, +		return (getParameterType() == Optional.class ? nested() : this);, +++ b/spring-core/src/main/java/org/springframework/util/KotlinUtils.java, + * @author Sebastien Deleuze, +public abstract class KotlinUtils {, +	private static final boolean kotlinPresent = ClassUtils.isPresent("kotlin.Unit", KotlinUtils.class.getClassLoader());, +	/**, +	 * Return whether Kotlin is available on the classpath or not., +	 */, +	/**, +	 * Return whether the specified type is a Kotlin class or not., +	 */, +		Assert.notNull(type, "Type must not be null");, +		return isKotlinPresent() && type.getDeclaredAnnotation(Metadata.class) != null;, +	/**, +	 * Check whether the specified {@link MethodParameter} represents a nullable Kotlin type or not., +	 */, +	public static boolean isNullable(MethodParameter methodParameter) {, +		Method method = methodParameter.getMethod();, +		int parameterIndex = methodParameter.getParameterIndex();, +		if (isKotlinClass(methodParameter.getContainingClass())) {, +			}, +			else {, +				KFunction<?> function = (method != null ? ReflectJvmMapping.getKotlinFunction(method) :, +					ReflectJvmMapping.getKotlinFunction(methodParameter.getConstructor()));, +			}, +		}, +, +++ b/build.gradle, +		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.0.5-2", +	ext.kotlinVersion          = "1.0.5-2", +	apply plugin: "kotlin", +, +		testCompile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"), +		testCompile("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"), +, +	apply plugin: "kotlin", +		testCompile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"), +		testCompile("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"), +	apply plugin: "kotlin", +, +		testCompile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"), +		testCompile("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"), +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +	 * Return whether this method indicates a parameter which is not required, +	 * (either in the form of Java 8's {@link java.util.Optional} or Kotlin nullable type)., +		return (getParameterType() == Optional.class || KotlinUtils.isNullable(this));]