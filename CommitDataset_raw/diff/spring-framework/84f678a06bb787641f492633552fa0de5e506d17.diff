[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/DatabasePopulator.java, +	 * configured and ready to use; never {@code null}, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/DatabasePopulator.java, +	 * configured and ready to use; never {@code null}, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java, +import org.springframework.util.Assert;, +		setScripts(scripts);, +	 * @param scripts the scripts to execute to initialize or populate the database;, +	 * never {@code null}, +	 * @param script the path to an SQL script; never {@code null}, +		Assert.notNull(script, "script must not be null");, +		getScripts().add(script);, +	 * @param scripts the scripts to execute; never {@code null}, +		assertContentsOfScriptArray(scripts);, +		getScripts().addAll(Arrays.asList(scripts));, +	 * @param scripts the scripts to execute; never {@code null}, +		assertContentsOfScriptArray(scripts);, +	 * @param blockCommentStartDelimiter the start delimiter for block comments;, +	 * never {@code null} or empty, +		Assert.hasText(blockCommentStartDelimiter, "blockCommentStartDelimiter must not be null or empty");, +	 * @param blockCommentEndDelimiter the end delimiter for block comments;, +	 * never {@code null} or empty, +		Assert.hasText(blockCommentEndDelimiter, "blockCommentEndDelimiter must not be null or empty");, +		Assert.notNull(connection, "Connection must not be null");, +		for (Resource script : getScripts()) {, +	 * @param dataSource the {@code DataSource} to execute against; never {@code null}, +		Assert.notNull(dataSource, "DataSource must not be null");, +	final List<Resource> getScripts() {, +		return this.scripts;, +	}, +, +	 * @param script the script to wrap; never {@code null}, +		Assert.notNull(script, "script must not be null");, +	private void assertContentsOfScriptArray(Resource... scripts) {, +		Assert.notNull(scripts, "scripts must not be null");, +		Assert.noNullElements(scripts, "scripts array must not contain null elements");, +	}, +, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/DatabasePopulator.java, +	 * configured and ready to use; never {@code null}, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java, +import org.springframework.util.Assert;, +		setScripts(scripts);, +	 * @param scripts the scripts to execute to initialize or populate the database;, +	 * never {@code null}, +	 * @param script the path to an SQL script; never {@code null}, +		Assert.notNull(script, "script must not be null");, +		getScripts().add(script);, +	 * @param scripts the scripts to execute; never {@code null}, +		assertContentsOfScriptArray(scripts);, +		getScripts().addAll(Arrays.asList(scripts));, +	 * @param scripts the scripts to execute; never {@code null}, +		assertContentsOfScriptArray(scripts);, +	 * @param blockCommentStartDelimiter the start delimiter for block comments;, +	 * never {@code null} or empty, +		Assert.hasText(blockCommentStartDelimiter, "blockCommentStartDelimiter must not be null or empty");, +	 * @param blockCommentEndDelimiter the end delimiter for block comments;, +	 * never {@code null} or empty, +		Assert.hasText(blockCommentEndDelimiter, "blockCommentEndDelimiter must not be null or empty");, +		Assert.notNull(connection, "Connection must not be null");, +		for (Resource script : getScripts()) {, +	 * @param dataSource the {@code DataSource} to execute against; never {@code null}, +		Assert.notNull(dataSource, "DataSource must not be null");, +	final List<Resource> getScripts() {, +		return this.scripts;, +	}, +, +	 * @param script the script to wrap; never {@code null}, +		Assert.notNull(script, "script must not be null");, +	private void assertContentsOfScriptArray(Resource... scripts) {, +		Assert.notNull(scripts, "scripts must not be null");, +		Assert.noNullElements(scripts, "scripts array must not contain null elements");, +	}, +, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulatorTests.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.jdbc.datasource.init;, +, +import org.junit.Test;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.core.io.Resource;, +, +import static org.junit.Assert.*;, +, +/**]