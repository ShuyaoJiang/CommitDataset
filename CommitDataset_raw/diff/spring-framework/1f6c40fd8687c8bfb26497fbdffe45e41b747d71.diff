[+++ b/src/asciidoc/index.adoc, +Programming), Instrumentation, Messaging, and Test, as shown in the following diagram., +The following sections list the available modules for each feature along with their, +artifact name and the topics they cover. Artifact names correlate to _artifact IDs_ used, +in <<dependency-management,Dependency Management tools>>., +The <<beans-introduction,__Core Container__>> consists of the `spring-core`,, +`spring-beans`, `spring-context`, and `spring-expression` (Spring Expression Language), +modules., +The `spring-core` and `spring-beans` modules <<beans-introduction,provide the fundamental, +parts of the framework>>, including the IoC and Dependency Injection features. The, +`BeanFactory` is a sophisticated implementation of the factory pattern. It removes the, +need for programmatic singletons and allows you to decouple the configuration and, +specification of dependencies from your actual program logic., +The <<context-introduction,__Context__>> (`spring-context`) module builds on the solid, +base provided by the <<beans-introduction,__Core and Beans__>> modules: it is a means to, +access objects in a framework-style manner that is similar to a JNDI registry. The, +Context module inherits its features from the Beans module and adds support for, +internationalization (using, for example, resource bundles), event propagation, resource, +loading, and the transparent creation of contexts by, for example, a Servlet container., +The Context module also supports Java EE features such as EJB, JMX, and basic remoting., +The `ApplicationContext` interface is the focal point of the Context module., +The `spring-expression` module provides a powerful <<expressions,__Expression, +Language__>> for querying and manipulating an object graph at runtime. It is an extension, +of the unified expression language (unified EL) as specified in the JSP 2.1, +specification. The language supports setting and getting property values, property, +assignment, method invocation, accessing the content of arrays, collections and indexers,, +logical and arithmetic operators, named variables, and retrieval of objects by name from, +Spring's IoC container. It also supports list projection and selection as well as common, +list aggregations., +, +method interceptors and pointcuts to cleanly decouple code that implements functionality, +The separate `spring-aspects` module provides integration with AspectJ., +, +Spring Framework 4 includes a `spring-messaging` module with key abstractions from the, +_Spring Integration_ project such as `Message`, `MessageChannel`, `MessageHandler`, and, +others to serve as a foundation for messaging-based applications. The module also, +includes a set of annotations for mapping messages to methods, similar to the Spring MVC, +annotation based programming model., +, +The __Data Access/Integration__ layer consists of the JDBC, ORM, OXM, JMS, and, +The `spring-jdbc` module provides a <<jdbc-introduction,JDBC>>-abstraction layer that, +removes the need to do tedious JDBC coding and parsing of database-vendor specific error, +codes., +<<orm-introduction,object-relational mapping>> APIs, including <<orm-jpa,JPA>>,, +<<orm-jdo,JDO>>, and <<orm-hibernate,Hibernate>>. Using the `spring-orm` module you can, +use all of these O/R-mapping frameworks in combination with all of the other features, +Spring offers, such as the simple declarative transaction management feature mentioned, +previously., +The `spring-oxm` module provides an abstraction layer that supports <<oxm,Object/XML, +mapping>> implementations such as JAXB, Castor, XMLBeans, JiBX and XStream., +consuming messages. Since Spring Framework 4.1, it provides integration with the, +management for classes that implement special interfaces and for __all your POJOs (Plain, +Old Java Objects)__., +The __Web__ layer consists of the `spring-web`, `spring-webmvc`, `spring-websocket`, and, +`spring-webmvc-portlet` modules., +multipart file upload functionality and the initialization of the IoC container using, +Servlet listeners and a web-oriented application context. It also contains the, +The `spring-webmvc` module (also known as the __Web-Servlet__ module) contains Spring's, +model-view-controller (<<mvc-introduction,__MVC__>>) implementation for web applications., +Spring's MVC framework provides a clean separation between domain model code and web, +forms and integrates with all of the other features of the Spring Framework., +The `spring-webmvc-portlet` module (also known as the __Web-Portlet__ module) provides, +the MVC implementation to be used in a Portlet environment and mirrors the functionality, +of the `spring-webmvc` module., +The `spring-test` module supports the <<unit-testing,unit testing>> and, +<<integration-testing,integration testing>> of Spring components with JUnit or TestNG. It, +provides consistent <<testcontext-ctx-management,loading>> of Spring, +++ApplicationContext++s and <<testcontext-ctx-management-caching,caching>> of those, +contexts. It also provides <<mock-objects,mock objects>> that you can use to test your, +code in isolation., +The XML namespace has been enhanced to support this new style (`jms:annotation-driven`),, +and it is also possible to fully configure the infrastructure using Java config, +({javadoc-baseurl}/org/springframework/jms/annotation/EnableJms.html[`@EnableJms`],, +  standard messaging annotations such as `@Payload`, `@Header`, `@Headers`, and `@SendTo`. It, +  argument., +  abstraction., +* Recovery options for the message listener container are configurable using a, +Spring 4.1 also improves its own caching abstraction significantly:, +  `value` argument defining the cache name(s) to use is no longer mandatory., +  common settings to be shared at the class level **without** enabling any cache operation., +Spring 4.1 also has a breaking change in the `CacheInterface` as a new `putIfAbsent`, +method has been added., +* JDK 1.8's `java.util.Optional` is now supported for `@RequestParam`, `@RequestHeader`,, +  and `@MatrixVariable` controller method arguments, while `ListenableFuture` is supported as, +  controller methods for serializing different amounts of detail for the same POJO -- for, +  example, summary vs. detail page. This is also supported with View-based rendering by, +  instead of JAXB2 if `jackson-dataformat-xml` classes are found in the classpath., +   and can be also be set explicitly through the new `name` attribute on `@RequestMapping`., +   A new `mvcUrl` Spring JSP tag makes this easy to use in JSP pages., +  For the client side there is a new `RequestEntity` also offering a builder-style API that, +   Some use cases are https://jira.spring.io/browse/SPR-11543?focusedCommentId=100308&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-100308[listed here]., +* `MockMvcBuilder` _recipes_ can now be created with the help of `MockMvcConfigurer`. This]