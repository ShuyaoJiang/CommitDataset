[+++ b/spring-framework-reference/src/validation.xml, +		<section id="ui-format-CustomFormatAnnotations">, +				To bind a custom annotation to a Formatter instance, simply annotate the annotation as @Formatted:, +			</para>, +			<programlisting language="java"><![CDATA[, +@Target({ElementType.METHOD, ElementType.FIELD}), +@Retention(RetentionPolicy.RUNTIME), +@Formatted(CurrencyFormatter.class), +public @interface Currency {, +}			, +]]>, +			</programlisting>, +			<para>, +				Then, to trigger formatting, simply annotate a model property with the annotation:, +			</para>, +			<programlisting language="java"><![CDATA[, +public class MyModel {, +, +    @Currency, +    private BigDecimal amount;, +	, +}, +]]>, +			</programlisting>, +			<para>, +				Custom annotations like @Currency can also be annotated with JSR-303 constraint annotations to specify declarative validation constraints., +				For example:, +			</para>, +			<programlisting language="java"><![CDATA[, +@Target({ElementType.METHOD, ElementType.FIELD}), +@Retention(RetentionPolicy.RUNTIME), +@Formatted(CurrencyFormatter.class), +@Constraint(validatedBy = CurrencyValidator.class), +public @interface Currency {, +}			, +]]>, +			</programlisting>, +			<para>, +				Given the example above, on form postback any @Currency properties will first be parsed by CurrencyFormatter, then validated by CurrencyValidator., +			</para>, +			<section id="ui-format-AnnotationFormatterFactory">, +				<title>AnnotationFormatterFactory</title>, +				<para>, +					If your custom annotation has attributes to configure Formatter instance behavior by property, implement a AnnotationFormatterFactory:, +					The example implementation below binds a @DecimalFormat instance to a Formatter instance., +					This particular annotation allows the NumberFormat pattern to be configured., +		</section>, +				Formatters can be registered in a FormatterRegistry., +package org.springframework.ui.format;, +, +	                        <!-- Register Formatter beans here -->, +				When using the @Formatted annotation, no explicit Formatter or AnnotationFormatterFactory registration is required.]