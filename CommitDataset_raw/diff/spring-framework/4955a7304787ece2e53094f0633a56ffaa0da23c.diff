[+++ b/org.springframework.web/src/main/java/org/springframework/remoting/jaxws/JaxWsPortClientInterceptor.java, +import javax.xml.ws.WebServiceFeature;, +import org.springframework.beans.BeanUtils;, +import org.springframework.beans.factory.BeanClassLoaderAware;, +import org.springframework.util.Assert;, +import org.springframework.util.ClassUtils;, +		implements MethodInterceptor, BeanClassLoaderAware, InitializingBean {, +	private Object[] webServiceFeatures;, +, +	private ClassLoader beanClassLoader = ClassUtils.getDefaultClassLoader();, +, +	 * Allows for providing JAX-WS 2.1 WebServiceFeature specifications:, +	 * in the form of actual {@link javax.xml.ws.WebServiceFeature} objects,, +	 * WebServiceFeature Class references, or WebServiceFeature class names., +	 */, +	public void setWebServiceFeatures(Object[] webServiceFeatures) {, +		this.webServiceFeatures = webServiceFeatures;, +	}, +, +	/**, +	/**, +	 * Set the bean ClassLoader to use for this interceptor:, +	 * for resolving WebServiceFeature class names as specified through, +	 * {@link #setWebServiceFeatures}, and also for building a client, +	 * proxy in the {@link JaxWsPortProxyFactoryBean} subclass., +	 */, +	public void setBeanClassLoader(ClassLoader classLoader) {, +		this.beanClassLoader = classLoader;, +	}, +, +	/**, +	 * Return the bean ClassLoader to use for this interceptor., +	 */, +	protected ClassLoader getBeanClassLoader() {, +		return this.beanClassLoader;, +	}, +, +	/**, +	 * Initialize the JAX-WS port for this interceptor., +	 */, +		Object stub = getPortStub(serviceToUse, (getPortName() != null ? this.portQName : null));, +	 * Obtain the port stub from the given JAX-WS Service., +	 * @param service the Service object to obtain the port from, +	 * @param portQName the name of the desired port, if specified, +	 * @return the corresponding port object as returned from, +	 * <code>Service.getPort(...)</code>, +	 */, +	protected Object getPortStub(Service service, QName portQName) {, +		if (this.webServiceFeatures != null) {, +			return new FeaturePortProvider().getPortStub(service, portQName, this.webServiceFeatures);, +		}, +		else {, +			return (portQName != null ? service.getPort(portQName, getServiceInterface()) :, +					service.getPort(getServiceInterface()));, +		}, +	}, +, +	/**, +, +	/**, +	 * Inner class in order to avoid a hard-coded JAX-WS 2.1 dependency., +	 * JAX-WS 2.0, as used in Java EE 5, didn't have WebServiceFeatures yet..., +	 */, +	private class FeaturePortProvider {, +, +		public Object getPortStub(Service service, QName portQName, Object[] features) {, +			WebServiceFeature[] wsFeatures = new WebServiceFeature[features.length];, +			for (int i = 0; i < features.length; i++) {, +				wsFeatures[i] = convertWebServiceFeature(features[i]);, +			}, +			return (portQName != null ? service.getPort(portQName, getServiceInterface(), wsFeatures) :, +					service.getPort(getServiceInterface(), wsFeatures));, +		}, +, +		private WebServiceFeature convertWebServiceFeature(Object feature) {, +			Assert.notNull(feature, "WebServiceFeature specification object must not be null");, +			if (feature instanceof WebServiceFeature) {, +				return (WebServiceFeature) feature;, +			}, +			else if (feature instanceof Class) {, +				return (WebServiceFeature) BeanUtils.instantiate((Class<?>) feature);, +			}, +			else if (feature instanceof String) {, +				try {, +					Class<?> featureClass = getBeanClassLoader().loadClass((String) feature);, +					return (WebServiceFeature) BeanUtils.instantiate(featureClass);, +				}, +				catch (ClassNotFoundException ex) {, +					throw new IllegalArgumentException("Could not load WebServiceFeature class [" + feature + "]");, +				}, +			}, +			else {, +				throw new IllegalArgumentException("Unknown WebServiceFeature specification type: " + feature.getClass());, +			}, +		}, +, +	}, +, +++ b/org.springframework.web/src/main/java/org/springframework/remoting/jaxws/JaxWsPortClientInterceptor.java, +import javax.xml.ws.WebServiceFeature;]