[+++ b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageWriter.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.util.Assert;, +	private static final MediaType DEFAULT_MEDIA_TYPE = new MediaType("text", "event-stream", StandardCharsets.UTF_8);, +, +, +		mediaType = (mediaType != null && mediaType.getCharset() != null ? mediaType : DEFAULT_MEDIA_TYPE);, +		DataBufferFactory bufferFactory = message.bufferFactory();, +, +		message.getHeaders().setContentType(mediaType);, +		return message.writeAndFlushWith(encode(input, elementType, mediaType, bufferFactory, hints));, +	private Flux<Publisher<DataBuffer>> encode(Publisher<?> input, ResolvableType elementType,, +			MediaType mediaType, DataBufferFactory factory, Map<String, Object> hints) {, +			return Flux.concat(encodeText(sb, mediaType, factory),, +					encodeData(data, valueType, mediaType, factory, hints),, +					encodeText("\n", mediaType, factory));, +			MediaType mediaType, DataBufferFactory factory, Map<String, Object> hints) {, +			return Flux.from(encodeText(text.replaceAll("\\n", "\ndata:") + "\n", mediaType, factory));, +				.encode(Mono.just(data), factory, valueType, mediaType, hints), +				.concatWith(encodeText("\n", mediaType, factory));, +	private Mono<DataBuffer> encodeText(CharSequence text, MediaType mediaType, DataBufferFactory bufferFactory) {, +		Assert.notNull(mediaType.getCharset(), "Expected MediaType with charset");, +		byte[] bytes = text.toString().getBytes(mediaType.getCharset());, +++ b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEventHttpMessageWriter.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.util.Assert;, +	private static final MediaType DEFAULT_MEDIA_TYPE = new MediaType("text", "event-stream", StandardCharsets.UTF_8);, +, +, +		mediaType = (mediaType != null && mediaType.getCharset() != null ? mediaType : DEFAULT_MEDIA_TYPE);, +		DataBufferFactory bufferFactory = message.bufferFactory();, +, +		message.getHeaders().setContentType(mediaType);, +		return message.writeAndFlushWith(encode(input, elementType, mediaType, bufferFactory, hints));, +	private Flux<Publisher<DataBuffer>> encode(Publisher<?> input, ResolvableType elementType,, +			MediaType mediaType, DataBufferFactory factory, Map<String, Object> hints) {, +			return Flux.concat(encodeText(sb, mediaType, factory),, +					encodeData(data, valueType, mediaType, factory, hints),, +					encodeText("\n", mediaType, factory));, +			MediaType mediaType, DataBufferFactory factory, Map<String, Object> hints) {, +			return Flux.from(encodeText(text.replaceAll("\\n", "\ndata:") + "\n", mediaType, factory));, +				.encode(Mono.just(data), factory, valueType, mediaType, hints), +				.concatWith(encodeText("\n", mediaType, factory));, +	private Mono<DataBuffer> encodeText(CharSequence text, MediaType mediaType, DataBufferFactory bufferFactory) {, +		Assert.notNull(mediaType.getCharset(), "Expected MediaType with charset");, +		byte[] bytes = text.toString().getBytes(mediaType.getCharset());, +++ b/spring-web/src/test/java/org/springframework/http/codec/ServerSentEventHttpMessageWriterTests.java, + * Copyright 2002-2018 the original author or authors., +import java.nio.charset.Charset;, +import java.nio.charset.StandardCharsets;, +import org.junit.Ignore;, +import static org.junit.Assert.*;, +import static org.springframework.core.ResolvableType.*;, +	private static final Map<String, Object> HINTS = Collections.emptyMap();, +, +	@Test // SPR-16516, +	public void writeStringWithCustomCharset() {, +		Flux<String> source = Flux.just("\u00A3");, +		Charset charset = StandardCharsets.ISO_8859_1;, +		MediaType mediaType = new MediaType("text", "event-stream", charset);, +		MockServerHttpResponse outputMessage = new MockServerHttpResponse();, +		testWrite(source, mediaType, outputMessage, String.class);, +, +		assertEquals(mediaType, outputMessage.getHeaders().getContentType());, +		StepVerifier.create(outputMessage.getBodyAsString()).expectNext("data:\u00A3\n\n").verifyComplete();, +	}, +, +	@Ignore, +	@Test // SPR-16516, SPR-16539, +	public void writePojoWithCustomEncoding() {, +		Flux<Pojo> source = Flux.just(new Pojo("foo\u00A3", "bar\u00A3"));, +		Charset charset = StandardCharsets.ISO_8859_1;, +		MediaType mediaType = new MediaType("text", "event-stream", charset);, +		MockServerHttpResponse outputMessage = new MockServerHttpResponse();, +		testWrite(source, mediaType, outputMessage, Pojo.class);, +, +		assertEquals(mediaType, outputMessage.getHeaders().getContentType());, +		StepVerifier.create(outputMessage.getBodyAsString()), +				.expectNext("data:{\"foo\":\"foo\u00A3\",\"bar\":\"bar\u00A3\"}\n\n"), +				.expectComplete(), +				.verify();, +	}, +, +, +	private <T> void testWrite(Publisher<T> source, MockServerHttpResponse response, Class<T> clazz) {, +		testWrite(source, MediaType.TEXT_EVENT_STREAM, response, clazz);, +	}, +, +	private <T> void testWrite(Publisher<T> source, MediaType mediaType, MockServerHttpResponse response,, +			Class<T> clazz) {, +, +		this.messageWriter.write(source, forClass(clazz), mediaType, response, HINTS), +				.block(Duration.ofMillis(5000));]