[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, + * General utility methods for working with annotations, handling meta-annotations,, + * bridge methods (which the compiler generates for generic declarations) as well, + * as super methods (for optional <em>annotation inheritance</em>)., + *, + * <p>Note that most of the features of this class are not provided by the, + * JDK's introspection facilities themselves., + * <h3>Meta-annotation Support</h3>, + * <p>Most {@code find*()} methods and some {@code get*()} methods in this class, + * provide support for meta-annotations. Consult the Javadoc for each method in, + * this class for details. For support for meta-annotations with, + * <em>attribute overrides</em> in <em>composed annotations</em>, use, + * {@link AnnotatedElementUtils} instead., + *, + * @see java.lang.reflect.AnnotatedElement#getAnnotations(), + * @see java.lang.reflect.AnnotatedElement#getAnnotation(Class), + * @see java.lang.reflect.AnnotatedElement#getDeclaredAnnotations(), +	 * annotation: either the given annotation itself or a direct meta-annotation, +	 * thereof., +	 * <p>Note that this method does <em>not</em> support arbitrary levels of, +	 * meta-annotations., +	 * @return the matching annotation, or {@code null} if not found, +	 * {@link AnnotatedElement}., +	 * <p>Meta-annotations will be searched if the annotation is not, +	 * <em>directly present</em> on the supplied element., +	 * @param annotatedElement the {@code AnnotatedElement} from which to get the annotation, +	 * @return the matching annotation, or {@code null} if not found, +	 * Get a single {@link Annotation} of {@code annotationType} from the supplied {@link Method}., +	 * <p>Correctly handles bridge {@link Method Methods} generated by the compiler., +	 * <p>Meta-annotations will be searched if the annotation is not, +	 * <em>directly present</em> on the supplied method., +	 * @param method the method to look for annotations on, +	 * @param annotationType the annotation type to look for, +	 * @return the matching annotation, or {@code null} if not found, +	 * @see org.springframework.core.BridgeMethodResolver#findBridgedMethod(Method), +	 * @see #getAnnotation(AnnotatedElement, Class), +	 */, +	public static <A extends Annotation> A getAnnotation(Method method, Class<A> annotationType) {, +		Method resolvedMethod = BridgeMethodResolver.findBridgedMethod(method);, +		return getAnnotation((AnnotatedElement) resolvedMethod, annotationType);, +	}, +, +	/**, +	 * Get all {@link Annotation Annotations} that are <em>present</em> on the, +	 * supplied {@link AnnotatedElement}., +	 * <p>Meta-annotations will <em>not</em> be searched., +	 * @return the annotations found, an empty array, or {@code null} if not, +	 * resolvable (e.g. because nested Class values in annotation attributes, +	 * failed to resolve at runtime), +		return null;, +	 * Get all {@link Annotation Annotations} that are <em>present</em on the, +	 * supplied {@link Method}., +	 * <p>Meta-annotations will <em>not</em> be searched., +	 * @return the annotations found, an empty array, or {@code null} if not, +	 * resolvable (e.g. because nested Class values in annotation attributes, +	 * failed to resolve at runtime), +	 * @see AnnotatedElement#getAnnotations(), +		}, +	 * Get the possibly repeating {@link Annotation}s of {@code annotationType}, +	 * from the supplied {@link Method}., +	 * <p>Deals with both a single direct annotation and repeating annotations, +	 * nested within a containing annotation., +	 * <p>Meta-annotations will be searched if the annotation is not, +	 * <em>directly present</em> on the supplied method., +	 * @return the annotations found or an empty set; never {@code null}, +	 * @see java.lang.annotation.Repeatable, +	 * supplied {@link AnnotatedElement}., +	 * <p>Deals with both a single direct annotation and repeating annotations, +	 * nested within a containing annotation., +	 * <p>Meta-annotations will be searched if the annotation is not, +	 * <em>directly present</em> on the supplied element., +	 * @return the annotations found or an empty set; never {@code null}, +	 * @see java.lang.annotation.Repeatable, +	 * <p>Meta-annotations will <em>not</em> be searched., +	 * @return the matching annotation, or {@code null} if not found, +	 * @return the matching annotation, or {@code null} if not found, +	 * @return the matching annotation, or {@code null} if not found, +	 * <p>Meta-annotations will <em>not</em> be searched., +	 * which declares an annotation of the specified {@code annotationType}, or {@code null}, +	 * <p>Meta-annotations will <em>not</em> be searched., +	 * Determine whether an annotation of the specified {@code annotationType} is, +	 * declared locally (i.e., <em>directly present</em>) on the supplied, +	 * {@code clazz}. The supplied {@link Class} may represent any type., +	 * <p>Meta-annotations will <em>not</em> be searched., +	 * @return {@code true} if an annotation of the specified {@code annotationType}, +	 * is <em>directly present</em> on the supplied {@code clazz}, +	 * @see java.lang.Class#getDeclaredAnnotations(), +	 * @see java.lang.Class#getDeclaredAnnotation(Class), +	 * Determine whether an annotation of the specified {@code annotationType} is <em>present</em>, +	 * <p>Meta-annotations will <em>not</em> be searched., +	 * @return {@code true} if an annotation of the specified {@code annotationType} is present, +	 * attribute types., +	 * <p>Equivalent to calling {@link #getAnnotationAttributes(Annotation, boolean, boolean)}, +	 * with the {@code classValuesAsString} and {@code nestedAnnotationsAsMap} parameters, +	 * set to {@code false}., +	 * corresponding attribute values as values; never {@code null}, +	 * @see #getAnnotationAttributes(Annotation, boolean, boolean), +	 * Retrieve the given annotation's attributes as a {@link Map}., +	 * <p>Equivalent to calling {@link #getAnnotationAttributes(Annotation, boolean, boolean)}, +	 * with the {@code nestedAnnotationsAsMap} parameter set to {@code false}.]