[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/SimpleEvaluationContext.java, +import java.util.Arrays;, + * of essential SpEL features and configuration options., + * <p>In many cases, the full extent of the SpEL language is not, + * that effect, {@code SimpleEvaluationContext} is tailored to support only a, + * subset of the SpEL language syntax, e.g. excluding references to Java types,, + * constructors, and bean references., + *, + * <p>When creating {@code SimpleEvaluationContext} you need to choose the level, + * of support you need to deal with properties and methods in SpEL expressions., + * By default, {@link SimpleEvaluationContext#create()} enables only read access, + * to properties via {@link DataBindingPropertyAccessor}. Alternatively, use, + * {@link SimpleEvaluationContext#builder()} to configure the exact level of, + * support needed, targeting one of, or some combination of the following:, + * <ul>, + * <li>Custom {@code PropertyAccessor} only (no reflection).</li>, + * <li>Data binding properties for read-only access.</li>, + * <li>Data binding properties for read and write.</li>, + * </ul>, + * @see StandardEvaluationContext, + * @see DataBindingPropertyAccessor, +	private final List<ConstructorResolver> constructorResolvers = Collections.emptyList();, +	private final List<MethodResolver> methodResolvers = Collections.emptyList();, +	private SimpleEvaluationContext(List<PropertyAccessor> accessors, @Nullable TypeConverter converter) {, +		this.propertyAccessors = Collections.unmodifiableList(new ArrayList<>(accessors));, +	 * Return an empty list, always, since this context does not support the, +	 * use of type references., +, +	/**, +	 * Create a {@code SimpleEvaluationContext} with read-only access to, +	 * public properties via {@link DataBindingPropertyAccessor}., +	 * <p>Effectively, a shortcut for:, +	 * <pre class="code">, +	 * SimpleEvaluationContext context = SimpleEvaluationContext.builder(), +	 *         .dataBindingPropertyAccessor(true), +	 *         .build();, +	 * </pre>, +	 * @see #builder(), +	 */, +	public static SimpleEvaluationContext create() {, +		return new Builder().dataBindingPropertyAccessor(true).build();, +	}, +, +	/**, +	 * Return a builder to create a {@code SimpleEvaluationContext}., +	 * @see #create(), +	 */, +	public static Builder builder() {, +		return new Builder();, +	}, +, +, +	/**, +	 * Builder for {@code SimpleEvaluationContext}., +	 */, +	public static class Builder {, +, +		private final List<PropertyAccessor> propertyAccessors = new ArrayList<>();, +, +		@Nullable, +		private TypeConverter typeConverter;, +, +, +		/**, +		 * Enable access to public properties for data binding purposes., +		 * <p>Effectively, a shortcut for, +		 * {@code propertyAccessor(new DataBindingPropertyAccessor(boolean))}., +		 * @param readOnlyAccess whether to read-only access to properties,, +		 * {@code "true"}, or read and write, {@code "false"}., +		 */, +		public Builder dataBindingPropertyAccessor(boolean readOnlyAccess) {, +			return propertyAccessor(readOnlyAccess ?, +					DataBindingPropertyAccessor.forReadOnlyAccess() :, +					DataBindingPropertyAccessor.forReadWriteAccess());, +		}, +, +		/**, +		 * Register a custom accessor for properties in expressions., +		 * <p>By default, the builder does not enable property access., +		 */, +		public Builder propertyAccessor(PropertyAccessor... accessors) {, +			this.propertyAccessors.addAll(Arrays.asList(accessors));, +			return this;, +		}, +, +		/**, +		 * Register a custom {@link TypeConverter}., +		 * <p>By default {@link StandardTypeConverter} is used., +		 */, +		public Builder typeConverter(TypeConverter converter) {, +			this.typeConverter = converter;, +			return this;, +		}, +, +		public SimpleEvaluationContext build() {, +			return new SimpleEvaluationContext(this.propertyAccessors, this.typeConverter);, +		}, +	}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/SimpleEvaluationContext.java]