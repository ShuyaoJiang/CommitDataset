[+++ b/org.springframework.context/src/main/java/org/springframework/context/expression/MapAccessor.java, +		return new TypedValue(((Map) target).get(name));, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/MapAccessor.java, +		return new TypedValue(((Map) target).get(name));, +++ b/org.springframework.context/src/main/java/org/springframework/validation/AbstractPropertyBindingResult.java, +			// Try custom converter..., +			TypeDescriptor strDesc = TypeDescriptor.valueOf(String.class);, +			if (fieldDesc != null && this.conversionService.canConvert(fieldDesc, strDesc)) {, +				return this.conversionService.convert(value, fieldDesc, strDesc);, +			if (this.conversionService.canConvert(TypeDescriptor.valueOf(String.class), td)) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/MapAccessor.java, +		return new TypedValue(((Map) target).get(name));, +++ b/org.springframework.context/src/main/java/org/springframework/validation/AbstractPropertyBindingResult.java, +			// Try custom converter..., +			TypeDescriptor strDesc = TypeDescriptor.valueOf(String.class);, +			if (fieldDesc != null && this.conversionService.canConvert(fieldDesc, strDesc)) {, +				return this.conversionService.convert(value, fieldDesc, strDesc);, +			if (this.conversionService.canConvert(TypeDescriptor.valueOf(String.class), td)) {, +++ b/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +				.toDate(), new TypeDescriptor(Model.class.getField("date")), TypeDescriptor.valueOf(String.class));, +		LocalDate date = new LocalDate(formattingService.convert("10/31/09", TypeDescriptor.valueOf(String.class),, +		assertEquals("", formattingService.convert(null, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.valueOf(String.class)));, +		assertNull(formattingService.convert(null, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +		assertNull(formattingService.convert("", TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +		assertEquals(null, formattingService.convert(null, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.valueOf(String.class)));, +		assertNull(formattingService.convert(null, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +		assertNull(formattingService.convert("", TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/MapAccessor.java, +		return new TypedValue(((Map) target).get(name));, +++ b/org.springframework.context/src/main/java/org/springframework/validation/AbstractPropertyBindingResult.java, +			// Try custom converter..., +			TypeDescriptor strDesc = TypeDescriptor.valueOf(String.class);, +			if (fieldDesc != null && this.conversionService.canConvert(fieldDesc, strDesc)) {, +				return this.conversionService.convert(value, fieldDesc, strDesc);, +			if (this.conversionService.canConvert(TypeDescriptor.valueOf(String.class), td)) {, +++ b/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +				.toDate(), new TypeDescriptor(Model.class.getField("date")), TypeDescriptor.valueOf(String.class));, +		LocalDate date = new LocalDate(formattingService.convert("10/31/09", TypeDescriptor.valueOf(String.class),, +		assertEquals("", formattingService.convert(null, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.valueOf(String.class)));, +		assertNull(formattingService.convert(null, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +		assertNull(formattingService.convert("", TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +		assertEquals(null, formattingService.convert(null, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.valueOf(String.class)));, +		assertNull(formattingService.convert(null, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +		assertNull(formattingService.convert("", TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +import java.util.HashMap;, +	private static final Map<Class<?>, TypeDescriptor> typeDescriptorCache = new HashMap<Class<?>, TypeDescriptor>();, +	static {, +		typeDescriptorCache.put(String.class, new TypeDescriptor(String.class));, +		typeDescriptorCache.put(Byte.class, new TypeDescriptor(Byte.class));, +		typeDescriptorCache.put(Character.class, new TypeDescriptor(Character.class));, +		typeDescriptorCache.put(Boolean.class, new TypeDescriptor(Boolean.class));, +		typeDescriptorCache.put(Short.class, new TypeDescriptor(Short.class));, +		typeDescriptorCache.put(Integer.class, new TypeDescriptor(Integer.class));, +		typeDescriptorCache.put(Long.class, new TypeDescriptor(Long.class));, +		typeDescriptorCache.put(Float.class, new TypeDescriptor(Float.class));, +		typeDescriptorCache.put(Double.class, new TypeDescriptor(Double.class));, +	}, +		TypeDescriptor desc = typeDescriptorCache.get(type);, +		return desc != null ? desc : new TypeDescriptor(type);, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/MapAccessor.java, +		return new TypedValue(((Map) target).get(name));, +++ b/org.springframework.context/src/main/java/org/springframework/validation/AbstractPropertyBindingResult.java, +			// Try custom converter..., +			TypeDescriptor strDesc = TypeDescriptor.valueOf(String.class);, +			if (fieldDesc != null && this.conversionService.canConvert(fieldDesc, strDesc)) {, +				return this.conversionService.convert(value, fieldDesc, strDesc);, +			if (this.conversionService.canConvert(TypeDescriptor.valueOf(String.class), td)) {, +++ b/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +				.toDate(), new TypeDescriptor(Model.class.getField("date")), TypeDescriptor.valueOf(String.class));, +		LocalDate date = new LocalDate(formattingService.convert("10/31/09", TypeDescriptor.valueOf(String.class),, +		assertEquals("", formattingService.convert(null, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.valueOf(String.class)));, +		assertNull(formattingService.convert(null, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +		assertNull(formattingService.convert("", TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +		assertEquals(null, formattingService.convert(null, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.valueOf(String.class)));, +		assertNull(formattingService.convert(null, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +		assertNull(formattingService.convert("", TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +import java.util.HashMap;, +	private static final Map<Class<?>, TypeDescriptor> typeDescriptorCache = new HashMap<Class<?>, TypeDescriptor>();, +	static {, +		typeDescriptorCache.put(String.class, new TypeDescriptor(String.class));, +		typeDescriptorCache.put(Byte.class, new TypeDescriptor(Byte.class));, +		typeDescriptorCache.put(Character.class, new TypeDescriptor(Character.class));, +		typeDescriptorCache.put(Boolean.class, new TypeDescriptor(Boolean.class));, +		typeDescriptorCache.put(Short.class, new TypeDescriptor(Short.class));, +		typeDescriptorCache.put(Integer.class, new TypeDescriptor(Integer.class));, +		typeDescriptorCache.put(Long.class, new TypeDescriptor(Long.class));, +		typeDescriptorCache.put(Float.class, new TypeDescriptor(Float.class));, +		typeDescriptorCache.put(Double.class, new TypeDescriptor(Double.class));, +	}, +		TypeDescriptor desc = typeDescriptorCache.get(type);, +		return desc != null ? desc : new TypeDescriptor(type);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ConvertingPropertyEditorAdapter.java, +		this.canConvertToString = conversionService.canConvert(this.targetDescriptor, TypeDescriptor.valueOf(String.class));, +		setValue(this.conversionService.convert(text, TypeDescriptor.valueOf(String.class), this.targetDescriptor));, +			return (String) this.conversionService.convert(getValue(), this.targetDescriptor, TypeDescriptor.valueOf(String.class));, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/MapAccessor.java, +		return new TypedValue(((Map) target).get(name));, +++ b/org.springframework.context/src/main/java/org/springframework/validation/AbstractPropertyBindingResult.java]