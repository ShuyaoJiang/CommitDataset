[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java, + * Copyright 2002-2014 the original author or authors., +	 *, +	public JettyWebSocketSession(Map<String, Object> handshakeAttributes) {, +		this(handshakeAttributes, null);, +	}, +, +	/**, +	 * Create a new {@link JettyWebSocketSession} instance associated with the given user., +	 *, +	 * @param handshakeAttributes attributes from the HTTP handshake to make available, +	 *        through the WebSocket session, +	 * @param principal the user associated with the session; can be left, +	 * 	{@code null} in which case, we'll fallback on the user available via, +	 * 	{@link org.eclipse.jetty.websocket.api.Session#getUpgradeRequest()}, +	 */, +	public JettyWebSocketSession(Map<String, Object> handshakeAttributes, Principal principal) {, +		if (this.principal != null) {, +		checkNativeSessionInitialized();, +		return getNativeSession().getUpgradeRequest().getUserPrincipal();, +	}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java, + * Copyright 2002-2014 the original author or authors., +	 *, +	public JettyWebSocketSession(Map<String, Object> handshakeAttributes) {, +		this(handshakeAttributes, null);, +	}, +, +	/**, +	 * Create a new {@link JettyWebSocketSession} instance associated with the given user., +	 *, +	 * @param handshakeAttributes attributes from the HTTP handshake to make available, +	 *        through the WebSocket session, +	 * @param principal the user associated with the session; can be left, +	 * 	{@code null} in which case, we'll fallback on the user available via, +	 * 	{@link org.eclipse.jetty.websocket.api.Session#getUpgradeRequest()}, +	 */, +	public JettyWebSocketSession(Map<String, Object> handshakeAttributes, Principal principal) {, +		if (this.principal != null) {, +		checkNativeSessionInitialized();, +		return getNativeSession().getUpgradeRequest().getUserPrincipal();, +	}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/jetty/JettyWebSocketClient.java, + * Copyright 2002-2014 the original author or authors., +		final JettyWebSocketSession wsSession = new JettyWebSocketSession(handshakeAttributes, user);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java, + * Copyright 2002-2014 the original author or authors., +	 *, +	public JettyWebSocketSession(Map<String, Object> handshakeAttributes) {, +		this(handshakeAttributes, null);, +	}, +, +	/**, +	 * Create a new {@link JettyWebSocketSession} instance associated with the given user., +	 *, +	 * @param handshakeAttributes attributes from the HTTP handshake to make available, +	 *        through the WebSocket session, +	 * @param principal the user associated with the session; can be left, +	 * 	{@code null} in which case, we'll fallback on the user available via, +	 * 	{@link org.eclipse.jetty.websocket.api.Session#getUpgradeRequest()}, +	 */, +	public JettyWebSocketSession(Map<String, Object> handshakeAttributes, Principal principal) {, +		if (this.principal != null) {, +		checkNativeSessionInitialized();, +		return getNativeSession().getUpgradeRequest().getUserPrincipal();, +	}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/jetty/JettyWebSocketClient.java, + * Copyright 2002-2014 the original author or authors., +		final JettyWebSocketSession wsSession = new JettyWebSocketSession(handshakeAttributes, user);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/jetty/JettyRequestUpgradeStrategy.java, + * Copyright 2002-2014 the original author or authors., +		JettyWebSocketSession session = new JettyWebSocketSession(attributes, request.getPrincipal());]