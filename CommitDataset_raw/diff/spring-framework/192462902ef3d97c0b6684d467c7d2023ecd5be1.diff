[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +	private InjectionMetadata buildAutowiringMetadata(final Class<?> clazz) {, +			final LinkedList<InjectionMetadata.InjectedElement> currElements =, +					new LinkedList<InjectionMetadata.InjectedElement>();, +, +			ReflectionUtils.doWithLocalFields(targetClass, new ReflectionUtils.FieldCallback() {, +				@Override, +				public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {, +							return;, +			});, +, +			ReflectionUtils.doWithLocalMethods(targetClass, new ReflectionUtils.MethodCallback() {, +				@Override, +				public void doWith(Method method) throws IllegalArgumentException, IllegalAccessException {, +						return;, +							return;, +								logger.warn("Autowired annotation should be used on methods with parameters: " + method);, +			});, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +	private InjectionMetadata buildAutowiringMetadata(final Class<?> clazz) {, +			final LinkedList<InjectionMetadata.InjectedElement> currElements =, +					new LinkedList<InjectionMetadata.InjectedElement>();, +, +			ReflectionUtils.doWithLocalFields(targetClass, new ReflectionUtils.FieldCallback() {, +				@Override, +				public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {, +							return;, +			});, +, +			ReflectionUtils.doWithLocalMethods(targetClass, new ReflectionUtils.MethodCallback() {, +				@Override, +				public void doWith(Method method) throws IllegalArgumentException, IllegalAccessException {, +						return;, +							return;, +								logger.warn("Autowired annotation should be used on methods with parameters: " + method);, +			});, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InitDestroyAnnotationBeanPostProcessor.java, + * Copyright 2002-2015 the original author or authors., +	private LifecycleMetadata buildLifecycleMetadata(final Class<?> clazz) {, +			final LinkedList<LifecycleElement> currInitMethods = new LinkedList<LifecycleElement>();, +			final LinkedList<LifecycleElement> currDestroyMethods = new LinkedList<LifecycleElement>();, +, +			ReflectionUtils.doWithLocalMethods(targetClass, new ReflectionUtils.MethodCallback() {, +				@Override, +				public void doWith(Method method) throws IllegalArgumentException, IllegalAccessException {, +					if (initAnnotationType != null) {, +						if (method.getAnnotation(initAnnotationType) != null) {, +					if (destroyAnnotationType != null) {, +						if (method.getAnnotation(destroyAnnotationType) != null) {, +			});, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +	private InjectionMetadata buildAutowiringMetadata(final Class<?> clazz) {, +			final LinkedList<InjectionMetadata.InjectedElement> currElements =, +					new LinkedList<InjectionMetadata.InjectedElement>();, +, +			ReflectionUtils.doWithLocalFields(targetClass, new ReflectionUtils.FieldCallback() {, +				@Override, +				public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {, +							return;, +			});, +, +			ReflectionUtils.doWithLocalMethods(targetClass, new ReflectionUtils.MethodCallback() {, +				@Override, +				public void doWith(Method method) throws IllegalArgumentException, IllegalAccessException {, +						return;, +							return;, +								logger.warn("Autowired annotation should be used on methods with parameters: " + method);, +			});, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InitDestroyAnnotationBeanPostProcessor.java, + * Copyright 2002-2015 the original author or authors., +	private LifecycleMetadata buildLifecycleMetadata(final Class<?> clazz) {, +			final LinkedList<LifecycleElement> currInitMethods = new LinkedList<LifecycleElement>();, +			final LinkedList<LifecycleElement> currDestroyMethods = new LinkedList<LifecycleElement>();, +, +			ReflectionUtils.doWithLocalMethods(targetClass, new ReflectionUtils.MethodCallback() {, +				@Override, +				public void doWith(Method method) throws IllegalArgumentException, IllegalAccessException {, +					if (initAnnotationType != null) {, +						if (method.getAnnotation(initAnnotationType) != null) {, +					if (destroyAnnotationType != null) {, +						if (method.getAnnotation(destroyAnnotationType) != null) {, +			});, +, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java, +	public void testExtendedResourceInjectionWithDefaultMethod() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.registerResolvableDependency(BeanFactory.class, bf);, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		RootBeanDefinition annotatedBd = new RootBeanDefinition(DefaultMethodResourceInjectionBean.class);, +		bf.registerBeanDefinition("annotatedBean", annotatedBd);, +		TestBean tb = new TestBean();, +		bf.registerSingleton("testBean", tb);, +		NestedTestBean ntb = new NestedTestBean();, +		bf.registerSingleton("nestedTestBean", ntb);]