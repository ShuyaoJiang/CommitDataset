[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +			headers.updateStompCommandAsClientMessage();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +			headers.updateStompCommandAsClientMessage();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java, +import org.springframework.messaging.simp.SimpMessageType;, +	public void updateStompCommandAsClientMessage() {, +, +		Assert.state(SimpMessageType.MESSAGE.equals(getMessageType()),, +				"Unexpected message type " + getMessage());, +, +			setHeader(COMMAND_HEADER, StompCommand.SEND);, +		}, +		else if (!getCommand().equals(StompCommand.SEND)) {, +			throw new IllegalStateException("Unexpected STOMP command " + getCommand());, +		}, +	}, +, +	public void updateStompCommandAsServerMessage() {, +, +		Assert.state(SimpMessageType.MESSAGE.equals(getMessageType()),, +				"Unexpected message type " + getMessage());, +, +		if ((getCommand() == null) || getCommand().equals(StompCommand.SEND)) {, +			setHeader(COMMAND_HEADER, StompCommand.MESSAGE);, +		}, +		else if (!getCommand().equals(StompCommand.MESSAGE)) {, +			throw new IllegalStateException("Unexpected STOMP command " + getCommand());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +			headers.updateStompCommandAsClientMessage();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java, +import org.springframework.messaging.simp.SimpMessageType;, +	public void updateStompCommandAsClientMessage() {, +, +		Assert.state(SimpMessageType.MESSAGE.equals(getMessageType()),, +				"Unexpected message type " + getMessage());, +, +			setHeader(COMMAND_HEADER, StompCommand.SEND);, +		}, +		else if (!getCommand().equals(StompCommand.SEND)) {, +			throw new IllegalStateException("Unexpected STOMP command " + getCommand());, +		}, +	}, +, +	public void updateStompCommandAsServerMessage() {, +, +		Assert.state(SimpMessageType.MESSAGE.equals(getMessageType()),, +				"Unexpected message type " + getMessage());, +, +		if ((getCommand() == null) || getCommand().equals(StompCommand.SEND)) {, +			setHeader(COMMAND_HEADER, StompCommand.MESSAGE);, +		}, +		else if (!getCommand().equals(StompCommand.MESSAGE)) {, +			throw new IllegalStateException("Unexpected STOMP command " + getCommand());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompProtocolHandler.java, +		else if (SimpMessageType.MESSAGE.equals(headers.getMessageType())) {, +			headers.updateStompCommandAsServerMessage();, +		}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +			headers.updateStompCommandAsClientMessage();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java, +import org.springframework.messaging.simp.SimpMessageType;, +	public void updateStompCommandAsClientMessage() {, +, +		Assert.state(SimpMessageType.MESSAGE.equals(getMessageType()),, +				"Unexpected message type " + getMessage());, +, +			setHeader(COMMAND_HEADER, StompCommand.SEND);, +		}, +		else if (!getCommand().equals(StompCommand.SEND)) {, +			throw new IllegalStateException("Unexpected STOMP command " + getCommand());, +		}, +	}, +, +	public void updateStompCommandAsServerMessage() {, +, +		Assert.state(SimpMessageType.MESSAGE.equals(getMessageType()),, +				"Unexpected message type " + getMessage());, +, +		if ((getCommand() == null) || getCommand().equals(StompCommand.SEND)) {, +			setHeader(COMMAND_HEADER, StompCommand.MESSAGE);, +		}, +		else if (!getCommand().equals(StompCommand.MESSAGE)) {, +			throw new IllegalStateException("Unexpected STOMP command " + getCommand());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompProtocolHandler.java, +		else if (SimpMessageType.MESSAGE.equals(headers.getMessageType())) {, +			headers.updateStompCommandAsServerMessage();, +		}, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/handler/AnnotationMethodIntegrationTests.java, +	public void sendMessageToController() throws Exception {, +	public void sendMessageToControllerAndReceiveReplyViaTopic() throws Exception {, +				"id:subs1", "destination:/topic/increment").build();, +	// SPR-10930, +, +	@Test, +	public void sendMessageToBrokerAndReceiveReplyViaTopic() throws Exception {, +, +		TextMessage message1 = create(StompCommand.SUBSCRIBE).headers("id:subs1", "destination:/topic/foo").build();, +		TextMessage message2 = create(StompCommand.SEND).headers("destination:/topic/foo").body("5").build();, +]