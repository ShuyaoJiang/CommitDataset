[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, +		resolver.setPathMatcher(getBrokerRegistry().getPathMatcher());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, +		resolver.setPathMatcher(getBrokerRegistry().getPathMatcher());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolver.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.util.PathMatcher;, +	private boolean keepLeadingSlash = true;, +, +	/**, +	 * Provide the {@code PathMatcher} in use for working with destinations, +	 * which in turn helps to determine whether the leading slash should be, +	 * kept in actual destinations after removing the, +	 * {@link #setUserDestinationPrefix userDestinationPrefix}., +	 * <p>By default actual destinations have a leading slash, e.g., +	 * {@code /queue/position-updates} which makes sense with brokers that, +	 * support destinations with slash as separator. When a {@code PathMatcher}, +	 * is provided that supports an alternative separator, then resulting, +	 * destinations won't have a leading slash, e.g. {@code, +	 * jms.queue.position-updates}., +	 * @param pathMatcher the PathMatcher used to work with destinations, +	 * @since 4.3, +	 */, +	public void setPathMatcher(PathMatcher pathMatcher) {, +		if (pathMatcher != null) {, +			this.keepLeadingSlash = pathMatcher.combine("1", "2").equals("1/2");, +		}, +	}, +, +			if (!this.keepLeadingSlash) {, +				actualDestination = actualDestination.substring(1);, +			}, +			if (!this.keepLeadingSlash) {, +				actualDestination = actualDestination.substring(1);, +			}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, +		resolver.setPathMatcher(getBrokerRegistry().getPathMatcher());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolver.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.util.PathMatcher;, +	private boolean keepLeadingSlash = true;, +, +	/**, +	 * Provide the {@code PathMatcher} in use for working with destinations, +	 * which in turn helps to determine whether the leading slash should be, +	 * kept in actual destinations after removing the, +	 * {@link #setUserDestinationPrefix userDestinationPrefix}., +	 * <p>By default actual destinations have a leading slash, e.g., +	 * {@code /queue/position-updates} which makes sense with brokers that, +	 * support destinations with slash as separator. When a {@code PathMatcher}, +	 * is provided that supports an alternative separator, then resulting, +	 * destinations won't have a leading slash, e.g. {@code, +	 * jms.queue.position-updates}., +	 * @param pathMatcher the PathMatcher used to work with destinations, +	 * @since 4.3, +	 */, +	public void setPathMatcher(PathMatcher pathMatcher) {, +		if (pathMatcher != null) {, +			this.keepLeadingSlash = pathMatcher.combine("1", "2").equals("1/2");, +		}, +	}, +, +			if (!this.keepLeadingSlash) {, +				actualDestination = actualDestination.substring(1);, +			}, +			if (!this.keepLeadingSlash) {, +				actualDestination = actualDestination.substring(1);, +			}, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/config/MessageBrokerConfigurationTests.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.beans.DirectFieldAccessor;, +import org.springframework.messaging.simp.user.DefaultUserDestinationResolver;, +import org.springframework.messaging.simp.user.UserDestinationResolver;, +, +		DefaultUserDestinationResolver resolver = this.customContext.getBean(DefaultUserDestinationResolver.class);, +		assertNotNull(resolver);, +		assertEquals(false, new DirectFieldAccessor(resolver).getPropertyValue("keepLeadingSlash"));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, +		resolver.setPathMatcher(getBrokerRegistry().getPathMatcher());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolver.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.util.PathMatcher;, +	private boolean keepLeadingSlash = true;, +, +	/**, +	 * Provide the {@code PathMatcher} in use for working with destinations, +	 * which in turn helps to determine whether the leading slash should be, +	 * kept in actual destinations after removing the, +	 * {@link #setUserDestinationPrefix userDestinationPrefix}., +	 * <p>By default actual destinations have a leading slash, e.g., +	 * {@code /queue/position-updates} which makes sense with brokers that, +	 * support destinations with slash as separator. When a {@code PathMatcher}, +	 * is provided that supports an alternative separator, then resulting, +	 * destinations won't have a leading slash, e.g. {@code, +	 * jms.queue.position-updates}., +	 * @param pathMatcher the PathMatcher used to work with destinations, +	 * @since 4.3, +	 */, +	public void setPathMatcher(PathMatcher pathMatcher) {, +		if (pathMatcher != null) {]