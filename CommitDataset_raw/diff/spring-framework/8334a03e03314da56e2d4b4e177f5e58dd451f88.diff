[+++ b/org.springframework.context/src/main/java/org/springframework/context/support/ConversionServiceFactoryBean.java, +, +import org.springframework.core.convert.support.GenericConversionService;, + * Set the {@link #setConverters "converters"} property to supplement or override the default converters., + *, + * @author Juergen Hoeller, +	private GenericConversionService conversionService;, +, +	 * Configure the set of custom converter objects that should be added:, +	 * implementing {@link org.springframework.core.convert.converter.Converter},, +	 * {@link org.springframework.core.convert.converter.ConverterFactory},, +	 * or {@link org.springframework.core.convert.converter.GenericConverter}., +		ConversionServiceFactory.addDefaultConverters(this.conversionService);, +		ConversionServiceFactory.registerConverters(this.converters, this.conversionService);, +	/**, +	 * Create the ConversionService instance returned by this factory bean., +	 * <p>Creates a simple {@link GenericConversionService} instance by default., +	 * Subclasses may override to customize the ConversionService instance that gets created., +	 */, +	protected GenericConversionService createConversionService() {, +		return new GenericConversionService();, +	}, +, +, +		return GenericConversionService.class;, +++ b/org.springframework.context/src/main/java/org/springframework/context/support/ConversionServiceFactoryBean.java, +, +import org.springframework.core.convert.support.GenericConversionService;, + * Set the {@link #setConverters "converters"} property to supplement or override the default converters., + *, + * @author Juergen Hoeller, +	private GenericConversionService conversionService;, +, +	 * Configure the set of custom converter objects that should be added:, +	 * implementing {@link org.springframework.core.convert.converter.Converter},, +	 * {@link org.springframework.core.convert.converter.ConverterFactory},, +	 * or {@link org.springframework.core.convert.converter.GenericConverter}., +		ConversionServiceFactory.addDefaultConverters(this.conversionService);, +		ConversionServiceFactory.registerConverters(this.converters, this.conversionService);, +	/**, +	 * Create the ConversionService instance returned by this factory bean., +	 * <p>Creates a simple {@link GenericConversionService} instance by default., +	 * Subclasses may override to customize the ConversionService instance that gets created., +	 */, +	protected GenericConversionService createConversionService() {, +		return new GenericConversionService();, +	}, +, +, +		return GenericConversionService.class;, +++ b/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionServiceFactoryBean.java, +	private Set<Object> converters;, +, +	/**, +	 * Configure the set of custom converter objects that should be added:, +	 * implementing {@link org.springframework.core.convert.converter.Converter},, +	 * {@link org.springframework.core.convert.converter.ConverterFactory},, +	 * or {@link org.springframework.core.convert.converter.GenericConverter}., +	 */, +	public void setConverters(Set<Object> converters) {, +		this.converters = converters;, +	}, +, +		ConversionServiceFactory.registerConverters(this.converters, this.conversionService);]