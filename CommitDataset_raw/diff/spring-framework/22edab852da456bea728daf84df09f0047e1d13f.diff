[+++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java, +import org.springframework.http.codec.HttpMessageReader;, +import org.springframework.web.reactive.function.server.HandlerStrategies;, +import org.springframework.web.server.ServerWebExchange;, +	private final List<HttpMessageReader<?>> messageReaders;, +, +	@Nullable, +	private final ServerWebExchange exchange;, +, +			@Nullable InetSocketAddress remoteAddress, List<HttpMessageReader<?>> messageReaders,, +			@Nullable ServerWebExchange exchange) {, +		this.messageReaders = messageReaders;, +		this.exchange = exchange;, +	public List<HttpMessageReader<?>> messageReaders() {, +		return this.messageReaders;, +	}, +, +	@Override, +	@Override, +	public ServerWebExchange exchange() {, +		Assert.state(this.exchange != null, "No exchange");, +		return this.exchange;, +	}, +, +		Builder messageReaders(List<HttpMessageReader<?>> messageReaders);, +, +		Builder exchange(ServerWebExchange exchange);, +, +		private List<HttpMessageReader<?>> messageReaders = HandlerStrategies.withDefaults().messageReaders();, +, +		@Nullable, +		private ServerWebExchange exchange;, +, +		public Builder messageReaders(List<HttpMessageReader<?>> messageReaders) {, +			Assert.notNull(messageReaders, "'messageReaders' must not be null");, +			this.messageReaders = messageReaders;, +			return this;, +		}, +, +		@Override, +		public Builder exchange(ServerWebExchange exchange) {, +			Assert.notNull(exchange, "'exchange' must not be null");, +			this.exchange = exchange;, +			return this;, +		}, +, +		@Override, +					this.session, this.principal, this.remoteAddress, this.messageReaders,, +					this.exchange);, +					this.session, this.principal, this.remoteAddress, this.messageReaders,, +					this.exchange);, +++ b/spring-test/src/main/java/org/springframework/mock/web/reactive/function/server/MockServerRequest.java, +import org.springframework.http.codec.HttpMessageReader;, +import org.springframework.web.reactive.function.server.HandlerStrategies;, +import org.springframework.web.server.ServerWebExchange;, +	private final List<HttpMessageReader<?>> messageReaders;, +, +	@Nullable, +	private final ServerWebExchange exchange;, +, +			@Nullable InetSocketAddress remoteAddress, List<HttpMessageReader<?>> messageReaders,, +			@Nullable ServerWebExchange exchange) {, +		this.messageReaders = messageReaders;, +		this.exchange = exchange;, +	public List<HttpMessageReader<?>> messageReaders() {, +		return this.messageReaders;, +	}, +, +	@Override, +	@Override, +	public ServerWebExchange exchange() {, +		Assert.state(this.exchange != null, "No exchange");, +		return this.exchange;, +	}, +, +		Builder messageReaders(List<HttpMessageReader<?>> messageReaders);, +, +		Builder exchange(ServerWebExchange exchange);, +, +		private List<HttpMessageReader<?>> messageReaders = HandlerStrategies.withDefaults().messageReaders();, +, +		@Nullable, +		private ServerWebExchange exchange;, +, +		public Builder messageReaders(List<HttpMessageReader<?>> messageReaders) {, +			Assert.notNull(messageReaders, "'messageReaders' must not be null");, +			this.messageReaders = messageReaders;, +			return this;, +		}, +, +		@Override, +		public Builder exchange(ServerWebExchange exchange) {, +			Assert.notNull(exchange, "'exchange' must not be null");, +			this.exchange = exchange;, +			return this;, +		}, +, +		@Override, +					this.session, this.principal, this.remoteAddress, this.messageReaders,, +					this.exchange);]