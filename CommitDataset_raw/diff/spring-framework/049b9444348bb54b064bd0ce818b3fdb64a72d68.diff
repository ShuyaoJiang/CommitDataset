[+++ b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java, + * @since 3.0, +	 * Return the packages to search for JAXB2 annotations., +		return this.packagesToScan;, +	 * Set the resource resolver, as used to load the schema resources., +		boolean hasContextPath = StringUtils.hasLength(this.contextPath);, +		boolean hasClassesToBeBound = !ObjectUtils.isEmpty(this.classesToBeBound);, +		boolean hasPackagesToScan = !ObjectUtils.isEmpty(this.packagesToScan);, +				if (StringUtils.hasLength(this.contextPath)) {, +				else if (!ObjectUtils.isEmpty(this.classesToBeBound)) {, +				else if (!ObjectUtils.isEmpty(this.packagesToScan)) {, +		return this.jaxbContext;, +			logger.info("Creating JAXBContext with context path [" + this.contextPath + "]");, +				return JAXBContext.newInstance(this.contextPath, this.beanClassLoader, this.jaxbContextProperties);, +				return JAXBContext.newInstance(this.contextPath, ClassUtils.getDefaultClassLoader(), this.jaxbContextProperties);, +				return JAXBContext.newInstance(this.contextPath, this.beanClassLoader);, +				return JAXBContext.newInstance(this.contextPath);, +					StringUtils.arrayToCommaDelimitedString(this.classesToBeBound) + "]");, +			return JAXBContext.newInstance(this.classesToBeBound, this.jaxbContextProperties);, +			return JAXBContext.newInstance(this.classesToBeBound);, +					StringUtils.arrayToCommaDelimitedString(this.packagesToScan) + "]");, +		ClassPathJaxb2TypeScanner scanner = new ClassPathJaxb2TypeScanner(this.packagesToScan);, +			logger.debug("Setting validation schema to " +, +					StringUtils.arrayToCommaDelimitedString(this.schemaResources));, +		if (this.schemaResourceResolver != null) {, +			schemaFactory.setResourceResolver(this.schemaResourceResolver);, +		if (this.supportJaxbElementClass && JAXBElement.class.isAssignableFrom(clazz)) {, +		if (StringUtils.hasLength(this.contextPath)) {, +			String[] contextPaths = StringUtils.tokenizeToStringArray(this.contextPath, ":");, +		else if (!ObjectUtils.isEmpty(this.classesToBeBound)) {, +			return Arrays.asList(this.classesToBeBound).contains(clazz);, +	 * Return a newly created JAXB unmarshaller., +	 * Note: JAXB unmarshallers are not necessarily thread-safe., +			this.mimeContainer.addAttachment(contentId, dataHandler);]