[+++ b/org.springframework.web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java, +, +		return request.getContentType() != null && request.getContentType().contains(FORM_CONTENT_TYPE) &&, +++ b/org.springframework.web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java, +, +		return request.getContentType() != null && request.getContentType().contains(FORM_CONTENT_TYPE) &&, +++ /dev/null, +++ b/org.springframework.web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java, +, +		return request.getContentType() != null && request.getContentType().contains(FORM_CONTENT_TYPE) &&, +++ /dev/null, +++ /dev/null, +++ b/org.springframework.web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java, +, +		return request.getContentType() != null && request.getContentType().contains(FORM_CONTENT_TYPE) &&, +++ /dev/null, +++ /dev/null, +++ b/org.springframework.web/src/test/java/org/springframework/http/server/ServletServerHttpRequestTests.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *     http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.http.server;, +, +import java.net.URI;, +import java.util.List;, +, +import org.junit.Before;, +import org.junit.Test;, +, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpMethod;, +import org.springframework.mock.web.MockHttpServletRequest;, +import org.springframework.util.FileCopyUtils;, +, +import static org.junit.Assert.*;, +, +/**, + * @author Arjen Poutsma, + */, +public class ServletServerHttpRequestTests {, +, +	private ServletServerHttpRequest request;, +, +	private MockHttpServletRequest mockRequest;, +, +	@Before, +	public void create() throws Exception {, +		mockRequest = new MockHttpServletRequest();, +		request = new ServletServerHttpRequest(mockRequest);, +	}, +, +	@Test, +	public void getMethod() throws Exception {, +		mockRequest.setMethod("POST");, +		assertEquals("Invalid method", HttpMethod.POST, request.getMethod());, +	}, +, +	@Test, +	public void getURI() throws Exception {, +		URI uri = new URI("http://example.com/path?query");, +		mockRequest.setServerName(uri.getHost());, +		mockRequest.setServerPort(uri.getPort());, +		mockRequest.setRequestURI(uri.getPath());, +		mockRequest.setQueryString(uri.getQuery());, +		assertEquals("Invalid uri", uri, request.getURI());, +	}, +, +	@Test, +	public void getHeaders() throws Exception {, +		String headerName = "MyHeader";, +		String headerValue1 = "value1";, +		mockRequest.addHeader(headerName, headerValue1);, +		String headerValue2 = "value2";, +		mockRequest.addHeader(headerName, headerValue2);, +, +		HttpHeaders headers = request.getHeaders();, +		assertNotNull("No HttpHeaders returned", headers);, +		assertTrue("Invalid headers returned", headers.containsKey(headerName));, +		List<String> headerValues = headers.get(headerName);, +		assertEquals("Invalid header values returned", 2, headerValues.size());, +		assertTrue("Invalid header values returned", headerValues.contains(headerValue1));, +		assertTrue("Invalid header values returned", headerValues.contains(headerValue2));, +	}, +, +	@Test, +	public void getBody() throws Exception {, +		byte[] content = "Hello World".getBytes("UTF-8");]