[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/RedirectView.java, + * all primitive model attributes (or collections thereof) are exposed as HTTP , + * query parameters (assuming they've not been used as URI template variables), , + * but this behavior can be changed by overriding the , +			flashMap.setExpectedUrlPath(request, targetUrl.toString());, +			if (!CollectionUtils.isEmpty(flashMap)) {, +				flashMap.setExpectedRequestParams(model);, +			}, +		String encodedRedirectURL = response.encodeRedirectURL(targetUrl);, +		, +			if (this.statusCode != null) {, +				response.setStatus(this.statusCode.value());, +				response.setHeader("Location", encodedRedirectURL);, +			}, +			else {, +				// Send status code 302 by default., +				response.sendRedirect(encodedRedirectURL);, +			}, +			response.setHeader("Location", encodedRedirectURL);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/RedirectView.java, + * all primitive model attributes (or collections thereof) are exposed as HTTP , + * query parameters (assuming they've not been used as URI template variables), , + * but this behavior can be changed by overriding the , +			flashMap.setExpectedUrlPath(request, targetUrl.toString());, +			if (!CollectionUtils.isEmpty(flashMap)) {, +				flashMap.setExpectedRequestParams(model);, +			}, +		String encodedRedirectURL = response.encodeRedirectURL(targetUrl);, +		, +			if (this.statusCode != null) {, +				response.setStatus(this.statusCode.value());, +				response.setHeader("Location", encodedRedirectURL);, +			}, +			else {, +				// Send status code 302 by default., +				response.sendRedirect(encodedRedirectURL);, +			}, +			response.setHeader("Location", encodedRedirectURL);, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/view/RedirectViewTests.java, +	public void explicitStatusCodeHttp11() throws Exception {, +		rv.setStatusCode(HttpStatus.MOVED_PERMANENTLY);, +		assertEquals(301, response.getStatus());, +	public void explicitStatusCodeHttp10() throws Exception {, +		RedirectView rv = new RedirectView();, +		rv.setUrl("http://url.somewhere.com");, +		rv.setStatusCode(HttpStatus.MOVED_PERMANENTLY);, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		rv.render(new HashMap<String, Object>(), request, response);, +		assertEquals(301, response.getStatus());, +		assertEquals("http://url.somewhere.com", response.getHeader("Location"));, +	}, +	, +	@Test, +	public void attributeStatusCodeHttp11() throws Exception {]