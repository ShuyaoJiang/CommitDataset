[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +				result.putAll(defaultHeaders);, +				result.putAll(defaultCookies);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +				result.putAll(defaultHeaders);, +				result.putAll(defaultCookies);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientBuilder.java, +		this.defaultUriVariables =, +				other.defaultUriVariables != null ? new LinkedHashMap<>(other.defaultUriVariables) : null;, +		this.defaultCookies =, +				other.defaultCookies != null ? new LinkedMultiValueMap<>(other.defaultCookies) : null;, +		this.filters = other.filters != null ? new ArrayList<>(other.filters) : null;, +	public WebClient.Builder defaultHeader(String header, String... values) {, +		initHeaders().put(header, Arrays.asList(values));, +	public WebClient.Builder defaultCookie(String cookie, String... values) {, +		initCookies().addAll(cookie, Arrays.asList(values));, +				this.defaultHeaders != null ? unmodifiableCopy(this.defaultHeaders) : null,, +				this.defaultCookies != null ? unmodifiableCopy(this.defaultCookies) : null,, +	private UriBuilderFactory initUriBuilderFactory() {, +		if (this.uriBuilderFactory != null) {, +			return this.uriBuilderFactory;, +		}, +		DefaultUriBuilderFactory factory = this.baseUrl != null ?, +				new DefaultUriBuilderFactory(this.baseUrl) : new DefaultUriBuilderFactory();, +		factory.setDefaultUriVariables(this.defaultUriVariables);, +		return factory;, +	}, +, +	private static HttpHeaders unmodifiableCopy(HttpHeaders headers) {, +		return HttpHeaders.readOnlyHttpHeaders(headers);, +	}, +, +	private static <K, V> MultiValueMap<K, V> unmodifiableCopy(MultiValueMap<K, V> map) {, +		return CollectionUtils.unmodifiableMultiValueMap(new LinkedMultiValueMap<>(map));, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +				result.putAll(defaultHeaders);, +				result.putAll(defaultCookies);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientBuilder.java, +		this.defaultUriVariables =, +				other.defaultUriVariables != null ? new LinkedHashMap<>(other.defaultUriVariables) : null;, +		this.defaultCookies =, +				other.defaultCookies != null ? new LinkedMultiValueMap<>(other.defaultCookies) : null;, +		this.filters = other.filters != null ? new ArrayList<>(other.filters) : null;, +	public WebClient.Builder defaultHeader(String header, String... values) {, +		initHeaders().put(header, Arrays.asList(values));, +	public WebClient.Builder defaultCookie(String cookie, String... values) {, +		initCookies().addAll(cookie, Arrays.asList(values));, +				this.defaultHeaders != null ? unmodifiableCopy(this.defaultHeaders) : null,, +				this.defaultCookies != null ? unmodifiableCopy(this.defaultCookies) : null,, +	private UriBuilderFactory initUriBuilderFactory() {, +		if (this.uriBuilderFactory != null) {, +			return this.uriBuilderFactory;, +		}, +		DefaultUriBuilderFactory factory = this.baseUrl != null ?, +				new DefaultUriBuilderFactory(this.baseUrl) : new DefaultUriBuilderFactory();, +		factory.setDefaultUriVariables(this.defaultUriVariables);, +		return factory;, +	}, +, +	private static HttpHeaders unmodifiableCopy(HttpHeaders headers) {, +		return HttpHeaders.readOnlyHttpHeaders(headers);, +	}, +, +	private static <K, V> MultiValueMap<K, V> unmodifiableCopy(MultiValueMap<K, V> map) {, +		return CollectionUtils.unmodifiableMultiValueMap(new LinkedMultiValueMap<>(map));, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java, +		 * A global option to specify a header to be added to every request,, +		 * if the request does not already contain such a header., +		 * @param header the header name, +		 * @param values the header values, +		Builder defaultHeader(String header, String... values);, +		 * Provides access to every {@link #defaultHeader(String, String...)}, +		 * declared so far with the possibility to add, replace, or remove., +		 * @param headersConsumer the consumer, +		 * A global option to specify a cookie to be added to every request,, +		 * if the request does not already contain such a cookie., +		 * @param cookie the cookie name, +		 * @param values the cookie values, +		Builder defaultCookie(String cookie, String... values);, +		 * Provides access to every {@link #defaultCookie(String, String...)}, +		 * declared so far with the possibility to add, replace, or remove., +		 * Provides access to every cookie declared so far with the possibility, +		 * to add, replace, or remove values., +		 * @param cookiesConsumer the consumer to provide access to, +		 * Provides access to every header declared so far with the possibility, +		 * to add, replace, or remove values., +		 * @param headersConsumer the consumer to provide access to, +		 * Provides access to every attribute declared so far with the, +		 * possibility to add, replace, or remove values., +		 * @param attributesConsumer the consumer to provide access to, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +				result.putAll(defaultHeaders);, +				result.putAll(defaultCookies);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientBuilder.java, +		this.defaultUriVariables =, +				other.defaultUriVariables != null ? new LinkedHashMap<>(other.defaultUriVariables) : null;]