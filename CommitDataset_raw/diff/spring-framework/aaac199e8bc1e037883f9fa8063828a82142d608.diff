[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/SimpleAspectInstanceFactory.java, + * Copyright 2002-2016 the original author or authors., +import java.lang.reflect.InvocationTargetException;, +, +import org.springframework.util.ReflectionUtils;, +			return ReflectionUtils.accessibleConstructor(this.aspectClass).newInstance();, +		}, +		catch (NoSuchMethodException ex) {, +			throw new AopConfigException(, +					"No default constructor on aspect class: " + this.aspectClass.getName(), ex);, +			throw new AopConfigException(, +					"Unable to instantiate aspect class: " + this.aspectClass.getName(), ex);, +			throw new AopConfigException(, +					"Could not access aspect constructor: " + this.aspectClass.getName(), ex);, +		}, +		catch (InvocationTargetException ex) {, +			throw new AopConfigException(, +					"Failed to invoke aspect constructor: " + this.aspectClass.getName(), ex.getTargetException());, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/SimpleAspectInstanceFactory.java, + * Copyright 2002-2016 the original author or authors., +import java.lang.reflect.InvocationTargetException;, +, +import org.springframework.util.ReflectionUtils;, +			return ReflectionUtils.accessibleConstructor(this.aspectClass).newInstance();, +		}, +		catch (NoSuchMethodException ex) {, +			throw new AopConfigException(, +					"No default constructor on aspect class: " + this.aspectClass.getName(), ex);, +			throw new AopConfigException(, +					"Unable to instantiate aspect class: " + this.aspectClass.getName(), ex);, +			throw new AopConfigException(, +					"Could not access aspect constructor: " + this.aspectClass.getName(), ex);, +		}, +		catch (InvocationTargetException ex) {, +			throw new AopConfigException(, +					"Failed to invoke aspect constructor: " + this.aspectClass.getName(), ex.getTargetException());, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AspectJProxyFactory.java, +import org.springframework.aop.aspectj.SimpleAspectInstanceFactory;, +			instance = new SimpleAspectInstanceFactory(aspectClass).getAspectInstance();, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/SimpleAspectInstanceFactory.java, + * Copyright 2002-2016 the original author or authors., +import java.lang.reflect.InvocationTargetException;, +, +import org.springframework.util.ReflectionUtils;, +			return ReflectionUtils.accessibleConstructor(this.aspectClass).newInstance();, +		}, +		catch (NoSuchMethodException ex) {, +			throw new AopConfigException(, +					"No default constructor on aspect class: " + this.aspectClass.getName(), ex);, +			throw new AopConfigException(, +					"Unable to instantiate aspect class: " + this.aspectClass.getName(), ex);, +			throw new AopConfigException(, +					"Could not access aspect constructor: " + this.aspectClass.getName(), ex);, +		}, +		catch (InvocationTargetException ex) {, +			throw new AopConfigException(, +					"Failed to invoke aspect constructor: " + this.aspectClass.getName(), ex.getTargetException());, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AspectJProxyFactory.java, +import org.springframework.aop.aspectj.SimpleAspectInstanceFactory;, +			instance = new SimpleAspectInstanceFactory(aspectClass).getAspectInstance();, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ObjenesisCglibAopProxy.java, + * Copyright 2002-2016 the original author or authors., +import java.lang.reflect.Constructor;, +, +import org.springframework.util.ReflectionUtils;, +				Constructor<?> ctor = (this.constructorArgs != null ?, +						proxyClass.getDeclaredConstructor(this.constructorArgTypes) :, +						proxyClass.getDeclaredConstructor());, +				ReflectionUtils.makeAccessible(ctor);, +						ctor.newInstance(this.constructorArgs) : ctor.newInstance());, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/SimpleAspectInstanceFactory.java, + * Copyright 2002-2016 the original author or authors., +import java.lang.reflect.InvocationTargetException;, +, +import org.springframework.util.ReflectionUtils;, +			return ReflectionUtils.accessibleConstructor(this.aspectClass).newInstance();, +		}, +		catch (NoSuchMethodException ex) {, +			throw new AopConfigException(, +					"No default constructor on aspect class: " + this.aspectClass.getName(), ex);, +			throw new AopConfigException(, +					"Unable to instantiate aspect class: " + this.aspectClass.getName(), ex);, +			throw new AopConfigException(, +					"Could not access aspect constructor: " + this.aspectClass.getName(), ex);, +		}, +		catch (InvocationTargetException ex) {, +			throw new AopConfigException(, +					"Failed to invoke aspect constructor: " + this.aspectClass.getName(), ex.getTargetException());, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AspectJProxyFactory.java, +import org.springframework.aop.aspectj.SimpleAspectInstanceFactory;, +			instance = new SimpleAspectInstanceFactory(aspectClass).getAspectInstance();, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ObjenesisCglibAopProxy.java, + * Copyright 2002-2016 the original author or authors., +import java.lang.reflect.Constructor;, +, +import org.springframework.util.ReflectionUtils;, +				Constructor<?> ctor = (this.constructorArgs != null ?, +						proxyClass.getDeclaredConstructor(this.constructorArgTypes) :, +						proxyClass.getDeclaredConstructor());, +				ReflectionUtils.makeAccessible(ctor);]