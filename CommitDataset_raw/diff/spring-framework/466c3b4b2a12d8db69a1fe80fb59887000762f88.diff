[+++ b/org.springframework.test/src/main/java/org/springframework/test/context/SmartContextLoader.java, + * <p>The {@code SmartContextLoader} SPI supersedes the {@link ContextLoader} SPI, + * introduced in Spring 2.5: a {@code SmartContextLoader} can choose to process, + * either resource locations or configuration classes. Furthermore, a, + * {@code SmartContextLoader} can set active bean definition profiles in the, + * context that it loads (see {@link MergedContextConfiguration#getActiveProfiles()}, + * and {@link #loadContext(MergedContextConfiguration)})., +++ b/org.springframework.test/src/main/java/org/springframework/test/context/SmartContextLoader.java, + * <p>The {@code SmartContextLoader} SPI supersedes the {@link ContextLoader} SPI, + * introduced in Spring 2.5: a {@code SmartContextLoader} can choose to process, + * either resource locations or configuration classes. Furthermore, a, + * {@code SmartContextLoader} can set active bean definition profiles in the, + * context that it loads (see {@link MergedContextConfiguration#getActiveProfiles()}, + * and {@link #loadContext(MergedContextConfiguration)})., +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/DelegatingSmartContextLoader.java, +import org.springframework.context.annotation.Configuration;, +import org.springframework.test.context.ContextConfiguration;, + * {@code DelegatingSmartContextLoader} is an implementation of the {@link SmartContextLoader}, + * SPI that delegates to a set of <em>candidate</em> SmartContextLoaders (i.e.,, + * {@link GenericXmlContextLoader} and {@link AnnotationConfigContextLoader}) to, + * determine which context loader is appropriate for a given test classï¿½s configuration., + * Each candidate is given a chance to {@link #processContextConfiguration process} the, + * {@link ContextConfigurationAttributes} for each class in the test class hierarchy that, + * is annotated with {@link ContextConfiguration @ContextConfiguration}, and the candidate, + * that supports the merged, processed configuration will be used to actually, + * {@link #loadContext load} the context., + * , + * <p>Placing an empty {@code @ContextConfiguration} annotation on, + * a test class signals that default resource locations (i.e., XML configuration files), + * or default {@link Configuration configuration classes} should be detected. Furthermore,, + * if a specific {@link ContextLoader} or {@link SmartContextLoader} is not explicitly, + * declared via {@code @ContextConfiguration}, {@code DelegatingSmartContextLoader} will, + * be used as the default loader, thus providing automatic support for either XML, + * configuration files or configuration classes, but not both simultaneously., +	private final SmartContextLoader annotationConfigLoader = new AnnotationConfigContextLoader();, +	 * Delegates to candidate {@code SmartContextLoaders} to process the supplied, +	 * {@link ContextConfigurationAttributes}., +	 * , +	 * <p>Delegation is based on explicit knowledge of the implementations of, +	 * {@link GenericXmlContextLoader} and {@link AnnotationConfigContextLoader}., +	 * Specifically, the delegation algorithm is as follows:, +	 * , +	 * <ul>, +	 * <li>If the resource locations or configuration classes in the supplied, +	 * {@code ContextConfigurationAttributes} are not empty, the appropriate , +	 * candidate loader will be allowed to process the configuration <em>as is</em>,, +	 * without any checks for detection of defaults.</li>, +	 * <li>Otherwise, {@code GenericXmlContextLoader} will be allowed to process, +	 * the configuration in order to detect default resource locations. If, +	 * {@code GenericXmlContextLoader} detects default resource locations,, +	 * an {@code info} message will be logged.</li>, +	 * <li>Subsequently, {@code AnnotationConfigContextLoader} will be allowed to, +	 * process the configuration in order to detect default configuration classes., +	 * If {@code AnnotationConfigContextLoader} detects default configuration, +	 * classes, an {@code info} message will be logged.</li>, +	 * </ul>, +	 * , +	 * @param configAttributes the context configuration attributes to process, +	 * @throws IllegalArgumentException if the supplied configuration attributes are, +	 * <code>null</code>, or if the supplied configuration attributes include both, +	 * resource locations and configuration classes, +	 * @throws IllegalStateException if {@code GenericXmlContextLoader} detects default, +	 * configuration classes; if {@code AnnotationConfigContextLoader} detects default, +	 * resource locations; if neither candidate loader detects defaults for the supplied, +	 * context configuration; or if both candidate loaders detect defaults for the, +	 * supplied context configuration, +		Assert.notNull(configAttributes, "configAttributes must not be null");, +		Assert.isTrue(configAttributes.hasLocations() && configAttributes.hasClasses(), String.format(, +		// need to bother with default detection checks; just let the, +		// appropriate loader process the configuration., +			delegateProcessing(annotationConfigLoader, configAttributes);, +			// Now let the annotation config loader process the configuration., +			delegateProcessing(annotationConfigLoader, configAttributes);, +						name(annotationConfigLoader), configAttributes));, +					name(annotationConfigLoader), configAttributes));, +					name(annotationConfigLoader), configAttributes));, +	 * Delegates to an appropriate candidate {@code SmartContextLoader} to load, +	 * an {@link ApplicationContext}., +	 * , +	 * <p>Delegation is based on explicit knowledge of the implementations of, +	 * {@link GenericXmlContextLoader} and {@link AnnotationConfigContextLoader}., +	 * Specifically, the delegation algorithm is as follows:, +	 * , +	 * <ul>, +	 * <li>If the resource locations in the supplied {@code MergedContextConfiguration}, +	 * are not empty and the configuration classes are empty,, +	 * {@code GenericXmlContextLoader} will load the {@code ApplicationContext}.</li>, +	 * <li>If the configuration classes in the supplied {@code MergedContextConfiguration}, +	 * are not empty and the resource locations are empty,, +	 * {@code AnnotationConfigContextLoader} will load the {@code ApplicationContext}.</li>, +	 * </ul>, +	 * , +	 * @param mergedConfig the merged context configuration to use to load the application context, +	 * @throws IllegalArgumentException if the supplied merged configuration is <code>null</code>, +	 * @throws IllegalStateException if neither candidate loader is capable of loading an, +	 * {@code ApplicationContext} from the supplied merged context configuration, +		List<SmartContextLoader> candidates = Arrays.asList(xmlLoader, annotationConfigLoader);, +			// Determine if each loader can load a context from the, +			// mergedConfig. If it can, let it; otherwise, keep iterating., +			name(annotationConfigLoader), mergedConfig));]