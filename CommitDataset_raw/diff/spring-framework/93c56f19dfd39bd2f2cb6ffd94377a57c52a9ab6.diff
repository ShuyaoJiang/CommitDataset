[+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java, + * Java primitives, this causes a TypeMismatchException. This class can be configured (using the, + * primitivesDefaultedForNullValue property) to trap this exception and use the primitives default value., +	/** Whether we're defaulting primitives when mapping a null value */, +	private boolean primitivesDefaultedForNullValue = false;, +, +	/**, +	 * Set whether we're defaulting Java primitives in the case of mapping a null value from corresponding, +	 * database fields., +	 * <p>Default is <code>false</code>, throwing an exception when nulls are mapped to Java primitives., +	 */, +	public boolean isPrimitivesDefaultedForNullValue() {, +		return primitivesDefaultedForNullValue;, +	}, +, +	/**, +	 * Return whether we're defaulting Java primitives in the case of mapping a null value from corresponding, +	 * database fields., +	 */, +	public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue) {, +		this.primitivesDefaultedForNullValue = primitivesDefaultedForNullValue;, +	}, +						if (value == null && primitivesDefaultedForNullValue) {, +							logger.debug("Intercepted TypeMismatchException for row " + rowNumber +, +						}, +						else {, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java, + * Java primitives, this causes a TypeMismatchException. This class can be configured (using the, + * primitivesDefaultedForNullValue property) to trap this exception and use the primitives default value., +	/** Whether we're defaulting primitives when mapping a null value */, +	private boolean primitivesDefaultedForNullValue = false;, +, +	/**, +	 * Set whether we're defaulting Java primitives in the case of mapping a null value from corresponding, +	 * database fields., +	 * <p>Default is <code>false</code>, throwing an exception when nulls are mapped to Java primitives., +	 */, +	public boolean isPrimitivesDefaultedForNullValue() {, +		return primitivesDefaultedForNullValue;, +	}, +, +	/**, +	 * Return whether we're defaulting Java primitives in the case of mapping a null value from corresponding, +	 * database fields., +	 */, +	public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue) {, +		this.primitivesDefaultedForNullValue = primitivesDefaultedForNullValue;, +	}, +						if (value == null && primitivesDefaultedForNullValue) {, +							logger.debug("Intercepted TypeMismatchException for row " + rowNumber +, +						}, +						else {, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/ParameterizedBeanPropertyRowMapper.java, + * <p>The mapper can be configured to use the primitives default value when mapping null values by, + * passing in 'true' for the 'primitivesDefaultedForNullValue' using the {@link #newInstance(Class, boolean)} method., + * Also see {@link BeanPropertyRowMapper#setPrimitivesDefaultedForNullValue(boolean)}, + *, +		return newInstance(mappedClass, false);, +	}, +, +	/**, +	 * Static factory method to create a new ParameterizedBeanPropertyRowMapper, +	 * (with the mapped class specified only once)., +	 * @param mappedClass the class that each row should be mapped to, +	 * @param primitivesDefaultedForNullValue whether we're defaulting primitives when mapping a null value, +	 */, +	public static <T> ParameterizedBeanPropertyRowMapper<T> newInstance(Class<T> mappedClass, boolean primitivesDefaultedForNullValue) {, +		newInstance.setPrimitivesDefaultedForNullValue(primitivesDefaultedForNullValue);, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java, + * Java primitives, this causes a TypeMismatchException. This class can be configured (using the, + * primitivesDefaultedForNullValue property) to trap this exception and use the primitives default value., +	/** Whether we're defaulting primitives when mapping a null value */, +	private boolean primitivesDefaultedForNullValue = false;, +, +	/**, +	 * Set whether we're defaulting Java primitives in the case of mapping a null value from corresponding, +	 * database fields., +	 * <p>Default is <code>false</code>, throwing an exception when nulls are mapped to Java primitives., +	 */, +	public boolean isPrimitivesDefaultedForNullValue() {, +		return primitivesDefaultedForNullValue;, +	}, +, +	/**, +	 * Return whether we're defaulting Java primitives in the case of mapping a null value from corresponding, +	 * database fields., +	 */, +	public void setPrimitivesDefaultedForNullValue(boolean primitivesDefaultedForNullValue) {, +		this.primitivesDefaultedForNullValue = primitivesDefaultedForNullValue;, +	}, +						if (value == null && primitivesDefaultedForNullValue) {, +							logger.debug("Intercepted TypeMismatchException for row " + rowNumber +, +						}, +						else {, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/simple/ParameterizedBeanPropertyRowMapper.java, + * <p>The mapper can be configured to use the primitives default value when mapping null values by, + * passing in 'true' for the 'primitivesDefaultedForNullValue' using the {@link #newInstance(Class, boolean)} method., + * Also see {@link BeanPropertyRowMapper#setPrimitivesDefaultedForNullValue(boolean)}, + *, +		return newInstance(mappedClass, false);]