[+++ b/org.springframework.context/src/test/java/org/springframework/ui/binding/support/GenericBinderTests.java, +import org.springframework.ui.binding.binder.BindingResults;, +import org.springframework.ui.binding.binder.GenericBinder;, +import org.springframework.ui.binding.binder.MissingSourceValuesException;, +	private GenericBindingFactory bindingFactory;, +, +		bindingFactory = new GenericBindingFactory(bean);, +		binder = new GenericBinder(bindingFactory);, +		bindingFactory.bindingRule("date").formatWith(new DateFormatter());, +		bindingFactory.bindingRule("date").formatWith(new DateFormatter());, +		bindingFactory.setFormatterRegistry(formatterRegistry);, +		bindingFactory.setFormatterRegistry(formatterRegistry);, +		binder.setRequired(new String[] { "integer" });, +		bindingFactory.bindingRule("currency").formatWith(new CurrencyFormatter());, +		Binding b = bindingFactory.getBinding("currency");, +		bindingFactory.bindingRule("integer").formatWith(new IntegerFormatter());, +		Binding b = bindingFactory.getBinding("integer");, +		bindingFactory.setMessageSource(messages);, +		bindingFactory.bindingRule("integer").formatWith(new IntegerFormatter());, +		Binding b = bindingFactory.getBinding("integer");, +		assertEquals("Please enter an integer in format ### for the integer field; you entered bogus", b, +				.getStatusAlert().getMessage());, +		Binding b = bindingFactory.getBinding("foos");, +		Binding b = bindingFactory.getBinding("foos[0]");, +		Binding b = bindingFactory.getBinding("foos");, +		values.put("addresses", new String[] { "4655 Macy Lane:Melbourne:FL:35452",, +				"1234 Rostock Circle:Palm Bay:FL:32901", "1977 Bel Aire Estates:Coker:AL:12345" });, +		binder.bind(values);, +		bindingFactory.setFormatterRegistry(formatterRegistry);, +		values, +				.put("addresses",, +						"4655 Macy Lane:Melbourne:FL:35452,1234 Rostock Circle:Palm Bay:FL:32901,1977 Bel Aire Estates:Coker:AL:12345");, +		values, +				.put("addresses",, +						"4655 Macy Lane:Melbourne:FL:35452,1234 Rostock Circle:Palm Bay:FL:32901,1977 Bel Aire Estates:Coker:AL:12345");, +		binder.bind(values);, +		bindingFactory.setFormatterRegistry(formatterRegistry);, +		String value = bindingFactory.getBinding("addresses").getRenderValue();, +		String value = bindingFactory.getBinding("addresses").getRenderValue();, +		assertEquals("s1:c1:st1:z1,s2:c2:st2:z2", value);, +		values.put("favoriteFoodsByGroup[DAIRY]", "Milk");, +		values.put("favoriteFoodsByGroup[FRUIT]", "Peaches");, +		values.put("favoriteFoodsByGroup[MEAT]", "Ham");, +		System.out.println(results);, +		binder.bind(values);, +		String value = bindingFactory.getBinding("favoriteFoodsByGroup").getRenderValue();, +		// TODO this is inconsistent with previous test case, +		assertEquals("{DAIRY=Milk, FRUIT=Peaches, MEAT=Ham}", value);, +		bindingFactory.bindingRule("currency").formatWith(new CurrencyFormatter());, +		Binding b = bindingFactory.getBinding("currency");, +	@Test, +	public void formatPossibleValueDefault() {, +		bindingFactory.bindingRule("currency");, +		Binding b = bindingFactory.getBinding("currency");, +		assertEquals("5", b.formatValue(new BigDecimal("5")));, +	}, +, +			return new ToStringCreator(this).append("street", street).append("city", city).append("state", state), +					.append("zip", zip).toString();, +++ b/org.springframework.context/src/test/java/org/springframework/ui/binding/support/GenericBinderTests.java, +import org.springframework.ui.binding.binder.BindingResults;, +import org.springframework.ui.binding.binder.GenericBinder;, +import org.springframework.ui.binding.binder.MissingSourceValuesException;, +	private GenericBindingFactory bindingFactory;, +, +		bindingFactory = new GenericBindingFactory(bean);, +		binder = new GenericBinder(bindingFactory);, +		bindingFactory.bindingRule("date").formatWith(new DateFormatter());, +		bindingFactory.bindingRule("date").formatWith(new DateFormatter());, +		bindingFactory.setFormatterRegistry(formatterRegistry);, +		bindingFactory.setFormatterRegistry(formatterRegistry);, +		binder.setRequired(new String[] { "integer" });, +		bindingFactory.bindingRule("currency").formatWith(new CurrencyFormatter());, +		Binding b = bindingFactory.getBinding("currency");, +		bindingFactory.bindingRule("integer").formatWith(new IntegerFormatter());, +		Binding b = bindingFactory.getBinding("integer");, +		bindingFactory.setMessageSource(messages);, +		bindingFactory.bindingRule("integer").formatWith(new IntegerFormatter());, +		Binding b = bindingFactory.getBinding("integer");, +		assertEquals("Please enter an integer in format ### for the integer field; you entered bogus", b, +				.getStatusAlert().getMessage());, +		Binding b = bindingFactory.getBinding("foos");, +		Binding b = bindingFactory.getBinding("foos[0]");, +		Binding b = bindingFactory.getBinding("foos");, +		values.put("addresses", new String[] { "4655 Macy Lane:Melbourne:FL:35452",, +				"1234 Rostock Circle:Palm Bay:FL:32901", "1977 Bel Aire Estates:Coker:AL:12345" });, +		binder.bind(values);, +		bindingFactory.setFormatterRegistry(formatterRegistry);, +		values, +				.put("addresses",, +						"4655 Macy Lane:Melbourne:FL:35452,1234 Rostock Circle:Palm Bay:FL:32901,1977 Bel Aire Estates:Coker:AL:12345");, +		values, +				.put("addresses",, +						"4655 Macy Lane:Melbourne:FL:35452,1234 Rostock Circle:Palm Bay:FL:32901,1977 Bel Aire Estates:Coker:AL:12345");, +		binder.bind(values);, +		bindingFactory.setFormatterRegistry(formatterRegistry);, +		String value = bindingFactory.getBinding("addresses").getRenderValue();, +		String value = bindingFactory.getBinding("addresses").getRenderValue();, +		assertEquals("s1:c1:st1:z1,s2:c2:st2:z2", value);, +		values.put("favoriteFoodsByGroup[DAIRY]", "Milk");]