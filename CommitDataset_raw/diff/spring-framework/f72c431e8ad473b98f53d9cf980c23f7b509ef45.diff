[+++ b/org.springframework.oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java, + * Copyright 2002-2010 the original author or authors., +		if (domResult.getNode() == null) {, +			try {, +				synchronized (this.documentBuilderFactoryMonitor) {, +					if (this.documentBuilderFactory == null) {, +						this.documentBuilderFactory = createDocumentBuilderFactory();, +					}, +				}, +				DocumentBuilder documentBuilder = createDocumentBuilder(this.documentBuilderFactory);, +				domResult.setNode(documentBuilder.newDocument());, +			}, +			catch (ParserConfigurationException ex) {, +				throw new UnmarshallingFailureException(, +						"Could not create document placeholder for DOMResult: " + ex.getMessage(), ex);, +			}, +		}, +++ b/org.springframework.oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java, + * Copyright 2002-2010 the original author or authors., +		if (domResult.getNode() == null) {, +			try {, +				synchronized (this.documentBuilderFactoryMonitor) {, +					if (this.documentBuilderFactory == null) {, +						this.documentBuilderFactory = createDocumentBuilderFactory();, +					}, +				}, +				DocumentBuilder documentBuilder = createDocumentBuilder(this.documentBuilderFactory);, +				domResult.setNode(documentBuilder.newDocument());, +			}, +			catch (ParserConfigurationException ex) {, +				throw new UnmarshallingFailureException(, +						"Could not create document placeholder for DOMResult: " + ex.getMessage(), ex);, +			}, +		}, +++ b/org.springframework.oxm/src/test/java/org/springframework/oxm/AbstractMarshallerTests.java, + * Copyright 2002-2010 the original author or authors., +import static org.custommonkey.xmlunit.XMLAssert.*;, +import static org.junit.Assert.assertTrue;, +	public void marshalEmptyDOMResult() throws Exception {, +		DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();, +		documentBuilderFactory.setNamespaceAware(true);, +		DocumentBuilder builder = documentBuilderFactory.newDocumentBuilder();, +		DOMResult domResult = new DOMResult();, +		marshaller.marshal(flights, domResult);, +		assertTrue("DOMResult does not contain a Document", domResult.getNode() instanceof Document);, +		Document result = (Document) domResult.getNode();, +		Document expected = builder.newDocument();, +		Element flightsElement = expected.createElementNS("http://samples.springframework.org/flight", "tns:flights");, +		Attr namespace = expected.createAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:tns");, +		namespace.setNodeValue("http://samples.springframework.org/flight");, +		flightsElement.setAttributeNode(namespace);, +		expected.appendChild(flightsElement);, +		Element flightElement = expected.createElementNS("http://samples.springframework.org/flight", "tns:flight");, +		flightsElement.appendChild(flightElement);, +		Element numberElement = expected.createElementNS("http://samples.springframework.org/flight", "tns:number");, +		flightElement.appendChild(numberElement);, +		Text text = expected.createTextNode("42");, +		numberElement.appendChild(text);, +		assertXMLEqual("Marshaller writes invalid DOMResult", expected, result);, +	}, +, +	@Test]