[+++ b/spring-context/src/main/java/org/springframework/ui/context/support/ResourceBundleThemeSource.java, + * Copyright 2002-2015 the original author or authors., +import java.util.concurrent.ConcurrentHashMap;, +import org.springframework.beans.factory.BeanClassLoaderAware;, +public class ResourceBundleThemeSource implements HierarchicalThemeSource, BeanClassLoaderAware {, +	private String defaultEncoding;, +, +	private Boolean fallbackToSystemLocale;, +, +	private ClassLoader beanClassLoader;, +, +	private final Map<String, Theme> themeCache = new ConcurrentHashMap<String, Theme>();, +	/**, +	 * Set the default charset to use for parsing resource bundle files., +	 * <p>{@link ResourceBundleMessageSource}'s default is the, +	 * {@code java.util.ResourceBundle} default encoding: ISO-8859-1., +	 * @since 4.2, +	 * @see ResourceBundleMessageSource#setDefaultEncoding, +	 */, +	public void setDefaultEncoding(String defaultEncoding) {, +		this.defaultEncoding = defaultEncoding;, +	}, +, +	/**, +	 * Set whether to fall back to the system Locale if no files for a, +	 * specific Locale have been found., +	 * <p>{@link ResourceBundleMessageSource}'s default is "true"., +	 * @since 4.2, +	 * @see ResourceBundleMessageSource#setFallbackToSystemLocale, +	 */, +	public void setFallbackToSystemLocale(boolean fallbackToSystemLocale) {, +		this.fallbackToSystemLocale = fallbackToSystemLocale;, +	}, +, +	@Override, +	public void setBeanClassLoader(ClassLoader beanClassLoader) {, +		this.beanClassLoader = beanClassLoader;, +	}, +, +			synchronized (this.themeCache) {, +				theme = this.themeCache.get(themeName);, +				if (theme == null) {, +		return theme;, +	}, +		if (this.defaultEncoding != null) {, +			messageSource.setDefaultEncoding(this.defaultEncoding);, +		}, +		if (this.fallbackToSystemLocale != null) {, +			messageSource.setFallbackToSystemLocale(this.fallbackToSystemLocale);, +		}, +		if (this.beanClassLoader != null) {, +			messageSource.setBeanClassLoader(this.beanClassLoader);, +		}]