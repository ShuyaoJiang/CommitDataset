[+++ b/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java, +			if (responseType != null) {, +			} else {, +				this.delegate = null;, +			}, +			if (delegate != null) {, +			else {, +				return new HttpEntity<T>(response.getHeaders());, +			}, +		}, +++ b/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java, +			if (responseType != null) {, +			} else {, +				this.delegate = null;, +			}, +			if (delegate != null) {, +			else {, +				return new HttpEntity<T>(response.getHeaders());, +			}, +		}, +++ b/org.springframework.web/src/test/java/org/springframework/web/client/RestTemplateIntegrationTests.java, +import org.springframework.http.HttpHeaders;, +	public void exchangeGet() throws Exception {, +	@Test, +	public void exchangePost() throws Exception {, +		HttpHeaders requestHeaders = new HttpHeaders();, +		requestHeaders.set("MyHeader", "MyValue");, +		HttpEntity<String> requestEntity = new HttpEntity<String>(helloWorld, requestHeaders);, +		HttpEntity<?> result = template.exchange(URI + "/{method}", HttpMethod.POST, requestEntity, null, "post");, +		assertEquals("Invalid location", new URI(URI + "/post/1"), result.getHeaders().getLocation());, +		assertFalse(result.hasBody());, +	}]