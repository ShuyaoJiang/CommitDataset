[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/InternalResourceView.java, + * Copyright 2002-2010 the original author or authors., +		RequestDispatcher rd = getRequestDispatcher(requestToExpose, dispatcherPath);, +			throw new ServletException("Could not get RequestDispatcher for [" + getUrl() +, +					"]: Check that the corresponding file exists within your web application archive!");, +	 * Get the request handle to expose to the RequestDispatcher, i.e. to the view., +	 * <p>The default implementation wraps the original request for exposure of, +	 * Spring beans as request attributes (if demanded)., +	 * @param originalRequest the original servlet request as provided by the engine, +	 * @return the wrapped request, or the original request if no wrapping is necessary, +	 * @see #setExposeContextBeansAsAttributes, +	 * @see org.springframework.web.context.support.ContextExposingHttpServletRequest, +	 */, +	protected HttpServletRequest getRequestToExpose(HttpServletRequest originalRequest) {, +		if (this.exposeContextBeansAsAttributes || this.exposedContextBeanNames != null) {, +			return new ContextExposingHttpServletRequest(, +					originalRequest, getWebApplicationContext(), this.exposedContextBeanNames);, +		}, +		return originalRequest;, +	}, +, +	/**, +	 * Obtain the RequestDispatcher to use for the forward/include., +	 * <p>The default implementation simply calls, +	 * {@link HttpServletRequest#getRequestDispatcher(String)}., +	 * Can be overridden in subclasses., +	 * @param request current HTTP request, +	 * @param path the target URL (as returned from {@link #prepareForRendering}), +	 * @return a corresponding RequestDispatcher, +	protected RequestDispatcher getRequestDispatcher(HttpServletRequest request, String path) {, +		return request.getRequestDispatcher(path);]