[+++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/AbstractDecoder.java, +import org.reactivestreams.Publisher;, +import reactor.core.publisher.Mono;, +, +import org.springframework.core.io.buffer.DataBuffer;, +	@Override, +	public Mono<T> decodeOne(Publisher<DataBuffer> inputStream, ResolvableType elementType, MimeType mimeType, Object... hints) {, +		throw new UnsupportedOperationException();, +	}, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/AbstractDecoder.java, +import org.reactivestreams.Publisher;, +import reactor.core.publisher.Mono;, +, +import org.springframework.core.io.buffer.DataBuffer;, +	@Override, +	public Mono<T> decodeOne(Publisher<DataBuffer> inputStream, ResolvableType elementType, MimeType mimeType, Object... hints) {, +		throw new UnsupportedOperationException();, +	}, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/Decoder.java, +import reactor.core.publisher.Mono;, +	 * Decode a {@link DataBuffer} input stream into a Mono of {@code T}., +	 *, +	 * @param inputStream the {@code DataBuffer} input stream to decode, +	 * @param elementType the expected type of elements in the output stream;, +	 * this type must have been previously passed to the {@link #canDecode}, +	 * method and it must have returned {@code true}., +	 * @param mimeType the MIME type associated with the input stream, optional, +	 * @param hints additional information about how to do decode, optional, +	 * @return the output stream with the decoded element, +	 */, +	Mono<T> decodeOne(Publisher<DataBuffer> inputStream, ResolvableType elementType,, +			MimeType mimeType, Object... hints);, +, +	/**, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/AbstractDecoder.java, +import org.reactivestreams.Publisher;, +import reactor.core.publisher.Mono;, +, +import org.springframework.core.io.buffer.DataBuffer;, +	@Override, +	public Mono<T> decodeOne(Publisher<DataBuffer> inputStream, ResolvableType elementType, MimeType mimeType, Object... hints) {, +		throw new UnsupportedOperationException();, +	}, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/Decoder.java, +import reactor.core.publisher.Mono;, +	 * Decode a {@link DataBuffer} input stream into a Mono of {@code T}., +	 *, +	 * @param inputStream the {@code DataBuffer} input stream to decode, +	 * @param elementType the expected type of elements in the output stream;, +	 * this type must have been previously passed to the {@link #canDecode}, +	 * method and it must have returned {@code true}., +	 * @param mimeType the MIME type associated with the input stream, optional, +	 * @param hints additional information about how to do decode, optional, +	 * @return the output stream with the decoded element, +	 */, +	Mono<T> decodeOne(Publisher<DataBuffer> inputStream, ResolvableType elementType,, +			MimeType mimeType, Object... hints);, +, +	/**, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/StringDecoder.java, +import reactor.core.publisher.Mono;, +	@Override, +	public Mono<String> decodeOne(Publisher<DataBuffer> inputStream, ResolvableType elementType,, +			MimeType mimeType, Object... hints) {, +, +		Charset charset = getCharset(mimeType);, +		return Flux.from(inputStream), +				.map(dataBuffer -> {, +					CharBuffer charBuffer = charset.decode(dataBuffer.asByteBuffer());, +					DataBufferUtils.release(dataBuffer);, +					return charBuffer.toString();, +				}), +				.collect(StringBuilder::new, StringBuilder::append), +				.map(StringBuilder::toString);, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/AbstractDecoder.java, +import org.reactivestreams.Publisher;, +import reactor.core.publisher.Mono;, +, +import org.springframework.core.io.buffer.DataBuffer;, +	@Override, +	public Mono<T> decodeOne(Publisher<DataBuffer> inputStream, ResolvableType elementType, MimeType mimeType, Object... hints) {, +		throw new UnsupportedOperationException();, +	}, +++ b/spring-web-reactive/src/main/java/org/springframework/core/codec/Decoder.java, +import reactor.core.publisher.Mono;, +	 * Decode a {@link DataBuffer} input stream into a Mono of {@code T}., +	 *, +	 * @param inputStream the {@code DataBuffer} input stream to decode, +	 * @param elementType the expected type of elements in the output stream;, +	 * this type must have been previously passed to the {@link #canDecode}, +	 * method and it must have returned {@code true}., +	 * @param mimeType the MIME type associated with the input stream, optional, +	 * @param hints additional information about how to do decode, optional, +	 * @return the output stream with the decoded element, +	 */, +	Mono<T> decodeOne(Publisher<DataBuffer> inputStream, ResolvableType elementType,, +			MimeType mimeType, Object... hints);, +]