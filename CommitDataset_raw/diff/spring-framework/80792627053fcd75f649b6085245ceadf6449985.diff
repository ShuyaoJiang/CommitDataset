[+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java, +			String column = JdbcUtils.lookupColumnName(rsmd, index);, +			PropertyDescriptor pd = this.mappedFields.get(column.replaceAll(" ", "").toLowerCase());, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java, +			String column = JdbcUtils.lookupColumnName(rsmd, index);, +			PropertyDescriptor pd = this.mappedFields.get(column.replaceAll(" ", "").toLowerCase());, +++ b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/core/AbstractRowMapperTests.java, +import org.springframework.jdbc.core.test.SpacePerson;, +	protected MockControl conControl3;, +	protected Connection con3;, +, +, +	protected MockControl rsmdControl3;, +	protected ResultSetMetaData rsmd3;, +	protected MockControl rsControl3;, +	protected ResultSet rs3;, +	protected MockControl stmtControl3;, +	protected Statement stmt3;, +	protected JdbcTemplate jdbcTemplate3;, +, +		conControl.replay();, +		stmtControl.replay();, +, +		conControl3 = MockControl.createControl(Connection.class);, +		con3 = (Connection) conControl3.getMock();, +		con3.isClosed();, +		conControl3.setDefaultReturnValue(false);, +, +		rsmdControl3 = MockControl.createControl(ResultSetMetaData.class);, +		rsmd3 = (ResultSetMetaData)rsmdControl3.getMock();, +		rsmd3.getColumnCount();, +		rsmdControl3.setReturnValue(4, 1);, +		rsmd3.getColumnLabel(1);, +		rsmdControl3.setReturnValue("Last Name", 1);, +		rsmd3.getColumnLabel(2);, +		rsmdControl3.setReturnValue("age", 1);, +		rsmd3.getColumnLabel(3);, +		rsmdControl3.setReturnValue("birth_date", 1);, +		rsmd3.getColumnLabel(4);, +		rsmdControl3.setReturnValue("balance", 1);, +		rsmdControl3.replay();, +, +		rsControl3 = MockControl.createControl(ResultSet.class);, +		rs3 = (ResultSet) rsControl3.getMock();, +		rs3.getMetaData();, +		rsControl3.setReturnValue(rsmd3, 1);, +		rs3.next();, +		rsControl3.setReturnValue(true, 1);, +		rs3.getString(1);, +		rsControl3.setReturnValue("Gagarin", 1);, +		rs3.wasNull();, +		rsControl3.setReturnValue(false, 1);, +		rs3.getLong(2);, +		rsControl3.setReturnValue(22, 1);, +		rs3.getTimestamp(3);, +		rsControl3.setReturnValue(new Timestamp(1221222L), 1);, +		rs3.getBigDecimal(4);, +		rsControl3.setReturnValue(new BigDecimal("1234.56"), 1);, +		rs3.next();, +		rsControl3.setReturnValue(false, 1);, +		rs3.close();, +		rsControl3.setVoidCallable(1);, +		rsControl3.replay();, +, +		stmtControl3 = MockControl.createControl(Statement.class);, +		stmt3 = (Statement) stmtControl3.getMock();, +, +		con3.createStatement();, +		conControl3.setReturnValue(stmt3, 1);, +		stmt3.executeQuery("select last_name as \"Last Name\", age, birth_date, balance from people");, +		stmtControl3.setReturnValue(rs3, 1);, +		if (debugEnabled) {, +			stmt3.getWarnings();, +			stmtControl3.setReturnValue(null, 1);, +		}, +		stmt3.close();, +		stmtControl3.setVoidCallable(1);, +, +		conControl3.replay();, +		stmtControl3.replay();, +, +, +		jdbcTemplate3 = new JdbcTemplate();, +		jdbcTemplate3.setDataSource(new SingleConnectionDataSource(con3, false));, +		jdbcTemplate3.setExceptionTranslator(new SQLStateSQLExceptionTranslator());, +		jdbcTemplate3.afterPropertiesSet();, +	protected void verifySpacePerson(SpacePerson bean) {, +		conControl3.verify();, +		rsControl3.verify();, +		rsmdControl3.verify();, +		stmtControl3.verify();, +		assertEquals("Gagarin", bean.getLastName());, +		assertEquals(22L, bean.getAge());, +		assertEquals(new java.util.Date(1221222L), bean.getBirthDate());, +		assertEquals(new BigDecimal("1234.56"), bean.getBalance());, +	}, +, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java, +			String column = JdbcUtils.lookupColumnName(rsmd, index);, +			PropertyDescriptor pd = this.mappedFields.get(column.replaceAll(" ", "").toLowerCase());]