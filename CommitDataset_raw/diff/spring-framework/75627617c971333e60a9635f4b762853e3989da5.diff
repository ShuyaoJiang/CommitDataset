[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +		else if (containsSingleton(candidateName) || (descriptor instanceof StreamDependencyDescriptor &&, +				((StreamDependencyDescriptor) descriptor).isOrdered())) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +		else if (containsSingleton(candidateName) || (descriptor instanceof StreamDependencyDescriptor &&, +				((StreamDependencyDescriptor) descriptor).isOrdered())) {, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java, +		RootBeanDefinition tb1 = new RootBeanDefinition(TestBeanFactory.class);, +		tb1.setFactoryMethodName("newTestBean1");, +		RootBeanDefinition tb2 = new RootBeanDefinition(TestBeanFactory.class);, +		tb2.setFactoryMethodName("newTestBean2");, +		assertSame(bf.getBean("testBean1"), testBeans.get(1));, +	}, +, +	@Test, +	public void testObjectProviderInjectionWithUnresolvedOrderedStream() {, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectProviderInjectionBean.class));, +		RootBeanDefinition tb1 = new RootBeanDefinition(TestBeanFactory.class);, +		tb1.setFactoryMethodName("newTestBean1");, +		tb1.setPrimary(true);, +		bf.registerBeanDefinition("testBean1", tb1);, +		RootBeanDefinition tb2 = new RootBeanDefinition(TestBeanFactory.class);, +		tb2.setFactoryMethodName("newTestBean2");, +		tb2.setLazyInit(true);, +		bf.registerBeanDefinition("testBean2", tb2);, +, +		ObjectProviderInjectionBean bean = (ObjectProviderInjectionBean) bf.getBean("annotatedBean");, +		List<?> testBeans = bean.sortedTestBeans();, +		assertEquals(2, testBeans.size());, +		assertSame(bf.getBean("testBean2"), testBeans.get(0));, +		assertSame(bf.getBean("testBean1"), testBeans.get(1));, +, +	public static class TestBeanFactory {, +, +		@Order(1), +		public static TestBean newTestBean1() {, +			return new TestBean();, +		}, +, +		@Order(0), +		public static TestBean newTestBean2() {, +			return new TestBean();, +		}, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +		else if (containsSingleton(candidateName) || (descriptor instanceof StreamDependencyDescriptor &&, +				((StreamDependencyDescriptor) descriptor).isOrdered())) {, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java, +		RootBeanDefinition tb1 = new RootBeanDefinition(TestBeanFactory.class);, +		tb1.setFactoryMethodName("newTestBean1");, +		RootBeanDefinition tb2 = new RootBeanDefinition(TestBeanFactory.class);, +		tb2.setFactoryMethodName("newTestBean2");, +		assertSame(bf.getBean("testBean1"), testBeans.get(1));, +	}, +, +	@Test, +	public void testObjectProviderInjectionWithUnresolvedOrderedStream() {, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ObjectProviderInjectionBean.class));, +		RootBeanDefinition tb1 = new RootBeanDefinition(TestBeanFactory.class);, +		tb1.setFactoryMethodName("newTestBean1");, +		tb1.setPrimary(true);, +		bf.registerBeanDefinition("testBean1", tb1);, +		RootBeanDefinition tb2 = new RootBeanDefinition(TestBeanFactory.class);, +		tb2.setFactoryMethodName("newTestBean2");, +		tb2.setLazyInit(true);, +		bf.registerBeanDefinition("testBean2", tb2);, +, +		ObjectProviderInjectionBean bean = (ObjectProviderInjectionBean) bf.getBean("annotatedBean");, +		List<?> testBeans = bean.sortedTestBeans();, +		assertEquals(2, testBeans.size());, +		assertSame(bf.getBean("testBean2"), testBeans.get(0));, +		assertSame(bf.getBean("testBean1"), testBeans.get(1));, +, +	public static class TestBeanFactory {, +, +		@Order(1), +		public static TestBean newTestBean1() {, +			return new TestBean();, +		}, +, +		@Order(0), +		public static TestBean newTestBean2() {, +			return new TestBean();, +		}, +	}, +, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/BeanFactoryGenericsTests.java, +import org.springframework.core.annotation.AnnotationAwareOrderComparator;, +import org.springframework.core.annotation.Order;, +	public void testGenericListProperty() throws Exception {, +	public void testGenericListPropertyWithAutowiring() throws Exception {, +	public void testGenericSetListConstructor() throws Exception {, +	public void testGenericSetListConstructorWithAutowiring() throws Exception {, +	public void testGenericSetListConstructorWithOptionalAutowiring() throws Exception {, +	public void testGenericSetMapConstructor() {, +	public void testGenericMapResourceConstructor() throws Exception {, +	public void testGenericMapMapConstructor() {, +	public void testGenericMapMapConstructorWithSameRefAndConversion() {, +	public void testGenericMapMapConstructorWithSameRefAndNoConversion() {]