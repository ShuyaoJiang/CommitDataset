[+++ b/spring-jms/src/test/java/org/springframework/jms/config/MethodJmsListenerEndpointTests.java, +	public void resolveCustomHeaderNameAndPayloadWithHeaderNameSet() throws JMSException {, +		MessagingMessageListenerAdapter listener = createDefaultInstance(String.class, int.class);, +, +		Session session = mock(Session.class);, +		StubTextMessage message = createSimpleJmsTextMessage("my payload");, +		message.setIntProperty("myCounter", 24);, +		listener.onMessage(message, session);, +		assertDefaultListenerMethodInvocation();, +	}, +, +	@Test, +		public void resolveCustomHeaderNameAndPayloadWithHeaderNameSet(@Payload String content, @Header(name = "myCounter") int counter) {, +			invocations.put("resolveCustomHeaderNameAndPayloadWithHeaderNameSet", true);, +			assertEquals("Wrong @Payload resolution", "my payload", content);, +			assertEquals("Wrong @Header resolution", 24, counter);, +		}, +, +++ b/spring-jms/src/test/java/org/springframework/jms/config/MethodJmsListenerEndpointTests.java, +	public void resolveCustomHeaderNameAndPayloadWithHeaderNameSet() throws JMSException {, +		MessagingMessageListenerAdapter listener = createDefaultInstance(String.class, int.class);, +, +		Session session = mock(Session.class);, +		StubTextMessage message = createSimpleJmsTextMessage("my payload");, +		message.setIntProperty("myCounter", 24);, +		listener.onMessage(message, session);, +		assertDefaultListenerMethodInvocation();, +	}, +, +	@Test, +		public void resolveCustomHeaderNameAndPayloadWithHeaderNameSet(@Payload String content, @Header(name = "myCounter") int counter) {, +			invocations.put("resolveCustomHeaderNameAndPayloadWithHeaderNameSet", true);, +			assertEquals("Wrong @Payload resolution", "my payload", content);, +			assertEquals("Wrong @Header resolution", 24, counter);, +		}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/Header.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.core.annotation.AliasFor;, +, + * @author Sam Brannen, +	 * Alias for {@link #name}., +	@AliasFor(attribute = "name"), +	 * The name of the request header to bind to., +	 * @since 4.2, +	 */, +	@AliasFor(attribute = "value"), +	String name() default "";, +, +	/**, +	 * <p>Default is {@code true}, leading to an exception if the header is, +	 * missing. Switch this to {@code false} if you prefer a {@code null}, +	 * value in case of a header missing., +	 * @see #defaultValue, +	 * The default value to use as a fallback., +	 * <p>Supplying a default value implicitly sets {@link #required} to {@code false}., +++ b/spring-jms/src/test/java/org/springframework/jms/config/MethodJmsListenerEndpointTests.java, +	public void resolveCustomHeaderNameAndPayloadWithHeaderNameSet() throws JMSException {, +		MessagingMessageListenerAdapter listener = createDefaultInstance(String.class, int.class);, +, +		Session session = mock(Session.class);, +		StubTextMessage message = createSimpleJmsTextMessage("my payload");, +		message.setIntProperty("myCounter", 24);, +		listener.onMessage(message, session);, +		assertDefaultListenerMethodInvocation();, +	}, +, +	@Test, +		public void resolveCustomHeaderNameAndPayloadWithHeaderNameSet(@Payload String content, @Header(name = "myCounter") int counter) {, +			invocations.put("resolveCustomHeaderNameAndPayloadWithHeaderNameSet", true);, +			assertEquals("Wrong @Payload resolution", "my payload", content);, +			assertEquals("Wrong @Header resolution", 24, counter);, +		}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/Header.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.core.annotation.AliasFor;, +, + * @author Sam Brannen, +	 * Alias for {@link #name}., +	@AliasFor(attribute = "name"), +	 * The name of the request header to bind to., +	 * @since 4.2, +	 */, +	@AliasFor(attribute = "value"), +	String name() default "";, +, +	/**, +	 * <p>Default is {@code true}, leading to an exception if the header is, +	 * missing. Switch this to {@code false} if you prefer a {@code null}, +	 * value in case of a header missing., +	 * @see #defaultValue, +	 * The default value to use as a fallback., +	 * <p>Supplying a default value implicitly sets {@link #required} to {@code false}., +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/HeaderMethodArgumentResolver.java, +			super(annotation.name(), annotation.required(), annotation.defaultValue());, +++ b/spring-jms/src/test/java/org/springframework/jms/config/MethodJmsListenerEndpointTests.java, +	public void resolveCustomHeaderNameAndPayloadWithHeaderNameSet() throws JMSException {, +		MessagingMessageListenerAdapter listener = createDefaultInstance(String.class, int.class);, +]