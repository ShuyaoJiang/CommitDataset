[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/AbstractMockServerSpec.java, +import java.util.function.UnaryOperator;, +import org.springframework.http.server.reactive.HttpHandler;, +	private final ExchangeMutatorWebFilter exchangeMutatorFilter = new ExchangeMutatorWebFilter();, +	public <T extends B> T exchangeMutator(UnaryOperator<ServerWebExchange> mutator) {, +		this.exchangeMutatorFilter.register(mutator);, +	private <T extends B> T self() {, +		HttpHandler handler = initHttpHandlerBuilder().prependFilter(this.exchangeMutatorFilter).build();, +		return new DefaultWebTestClientBuilder(handler, this.exchangeMutatorFilter);, +	protected abstract WebHttpHandlerBuilder initHttpHandlerBuilder();, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/AbstractMockServerSpec.java, +import java.util.function.UnaryOperator;, +import org.springframework.http.server.reactive.HttpHandler;, +	private final ExchangeMutatorWebFilter exchangeMutatorFilter = new ExchangeMutatorWebFilter();, +	public <T extends B> T exchangeMutator(UnaryOperator<ServerWebExchange> mutator) {, +		this.exchangeMutatorFilter.register(mutator);, +	private <T extends B> T self() {, +		HttpHandler handler = initHttpHandlerBuilder().prependFilter(this.exchangeMutatorFilter).build();, +		return new DefaultWebTestClientBuilder(handler, this.exchangeMutatorFilter);, +	protected abstract WebHttpHandlerBuilder initHttpHandlerBuilder();, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ApplicationContextSpec.java, +	protected WebHttpHandlerBuilder initHttpHandlerBuilder() {, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/AbstractMockServerSpec.java, +import java.util.function.UnaryOperator;, +import org.springframework.http.server.reactive.HttpHandler;, +	private final ExchangeMutatorWebFilter exchangeMutatorFilter = new ExchangeMutatorWebFilter();, +	public <T extends B> T exchangeMutator(UnaryOperator<ServerWebExchange> mutator) {, +		this.exchangeMutatorFilter.register(mutator);, +	private <T extends B> T self() {, +		HttpHandler handler = initHttpHandlerBuilder().prependFilter(this.exchangeMutatorFilter).build();, +		return new DefaultWebTestClientBuilder(handler, this.exchangeMutatorFilter);, +	protected abstract WebHttpHandlerBuilder initHttpHandlerBuilder();, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ApplicationContextSpec.java, +	protected WebHttpHandlerBuilder initHttpHandlerBuilder() {, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultControllerSpec.java, +	protected WebHttpHandlerBuilder initHttpHandlerBuilder() {, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/AbstractMockServerSpec.java, +import java.util.function.UnaryOperator;, +import org.springframework.http.server.reactive.HttpHandler;, +	private final ExchangeMutatorWebFilter exchangeMutatorFilter = new ExchangeMutatorWebFilter();, +	public <T extends B> T exchangeMutator(UnaryOperator<ServerWebExchange> mutator) {, +		this.exchangeMutatorFilter.register(mutator);, +	private <T extends B> T self() {, +		HttpHandler handler = initHttpHandlerBuilder().prependFilter(this.exchangeMutatorFilter).build();, +		return new DefaultWebTestClientBuilder(handler, this.exchangeMutatorFilter);, +	protected abstract WebHttpHandlerBuilder initHttpHandlerBuilder();, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ApplicationContextSpec.java, +	protected WebHttpHandlerBuilder initHttpHandlerBuilder() {, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultControllerSpec.java, +	protected WebHttpHandlerBuilder initHttpHandlerBuilder() {, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +import java.util.function.UnaryOperator;, +import org.springframework.web.server.ServerWebExchange;, +	private final ExchangeMutatorWebFilter exchangeMutatorWebFilter;, +, +	DefaultWebTestClient(WebClient.Builder webClientBuilder, ClientHttpConnector connector,, +			ExchangeMutatorWebFilter webFilter, Duration timeout) {, +, +		this.exchangeMutatorWebFilter = webFilter;, +		this.exchangeMutatorWebFilter = webTestClient.exchangeMutatorWebFilter;, +		this.timeout = webTestClient.timeout;, +	@Override, +	public WebTestClient exchangeMutator(UnaryOperator<ServerWebExchange> mutator) {, +, +		Assert.notNull(this.exchangeMutatorWebFilter,, +				"This option is applicable only for tests without an actual running server");, +, +		return filter((request, next) -> {, +			String requestId = request.headers().getFirst(WiretapConnector.REQUEST_ID_HEADER_NAME);, +			Assert.notNull(requestId, "No request-id header");, +			this.exchangeMutatorWebFilter.register(requestId, mutator);, +			return next.exchange(request);, +		});, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/AbstractMockServerSpec.java, +import java.util.function.UnaryOperator;, +import org.springframework.http.server.reactive.HttpHandler;, +	private final ExchangeMutatorWebFilter exchangeMutatorFilter = new ExchangeMutatorWebFilter();, +	public <T extends B> T exchangeMutator(UnaryOperator<ServerWebExchange> mutator) {, +		this.exchangeMutatorFilter.register(mutator);, +	private <T extends B> T self() {, +		HttpHandler handler = initHttpHandlerBuilder().prependFilter(this.exchangeMutatorFilter).build();, +		return new DefaultWebTestClientBuilder(handler, this.exchangeMutatorFilter);, +	protected abstract WebHttpHandlerBuilder initHttpHandlerBuilder();, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ApplicationContextSpec.java, +	protected WebHttpHandlerBuilder initHttpHandlerBuilder() {, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultControllerSpec.java, +	protected WebHttpHandlerBuilder initHttpHandlerBuilder() {, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +import java.util.function.UnaryOperator;, +import org.springframework.web.server.ServerWebExchange;, +	private final ExchangeMutatorWebFilter exchangeMutatorWebFilter;, +, +	DefaultWebTestClient(WebClient.Builder webClientBuilder, ClientHttpConnector connector,, +			ExchangeMutatorWebFilter webFilter, Duration timeout) {, +, +		this.exchangeMutatorWebFilter = webFilter;, +		this.exchangeMutatorWebFilter = webTestClient.exchangeMutatorWebFilter;, +		this.timeout = webTestClient.timeout;]