[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/ServerEndpointExporter.java, +import java.util.Map;, +import org.springframework.beans.factory.SmartInitializingSingleton;, + * done with the help of the {@code <absolute-ordering>} element in {@code web.xml}., +public class ServerEndpointExporter extends WebApplicationObjectSupport, +		implements InitializingBean, SmartInitializingSingleton {, +	private ServerContainer serverContainer;, +	 * Explicitly list annotated endpoint types that should be registered on startup. This, +	 * can be done if you wish to turn off a Servlet container's scan for endpoints, which, +	 * goes through all 3rd party jars in the, and rely on Spring configuration instead., +	 * @param annotatedEndpointClasses {@link ServerEndpoint}-annotated types, +	 */, +	public void setAnnotatedEndpointClasses(Class<?>... annotatedEndpointClasses) {, +		this.annotatedEndpointClasses = Arrays.asList(annotatedEndpointClasses);, +	}, +, +	/**, +	@Override, +	protected boolean isContextRequired() {, +		return false;, +	}, +	}, +, +	@Override, +	public void afterSingletonsInstantiated() {, +, +	 * Actually register the endpoints. Called by {@link #afterSingletonsInstantiated()}., +, +		ApplicationContext context = getApplicationContext();, +		if (context != null) {, +			String[] endpointNames = context.getBeanNamesForAnnotation(ServerEndpoint.class);, +			for (String beanName : endpointNames) {, +				Class<?> beanType = context.getType(beanName);, +				endpointClasses.add(beanType);, +		}, +, +, +		if (context != null) {, +			Map<String, ServerEndpointConfig> endpointConfigMap = context.getBeansOfType(ServerEndpointConfig.class);, +			for (Map.Entry<String, ServerEndpointConfig> configEntry : endpointConfigMap.entrySet()) {, +				String beanName = configEntry.getKey();, +				ServerEndpointConfig endpointConfig = configEntry.getValue();, +				registerEndpoint(endpointConfig);, +			}, +		}, +				logger.info("Registering @ServerEndpoint class: " + endpointClass);, +			throw new IllegalStateException("Failed to register @ServerEndpoint class: " + endpointClass, ex);, +	private void registerEndpoint(ServerEndpointConfig endpointConfig) {, +				logger.info("Registering ServerEndpointConfig: " + endpointConfig);, +			throw new IllegalStateException("Failed to register ServerEndpointConfig: " + endpointConfig, ex);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/ServerEndpointExporter.java, +import java.util.Map;, +import org.springframework.beans.factory.SmartInitializingSingleton;, + * done with the help of the {@code <absolute-ordering>} element in {@code web.xml}., +public class ServerEndpointExporter extends WebApplicationObjectSupport, +		implements InitializingBean, SmartInitializingSingleton {, +	private ServerContainer serverContainer;, +	 * Explicitly list annotated endpoint types that should be registered on startup. This, +	 * can be done if you wish to turn off a Servlet container's scan for endpoints, which, +	 * goes through all 3rd party jars in the, and rely on Spring configuration instead., +	 * @param annotatedEndpointClasses {@link ServerEndpoint}-annotated types, +	 */, +	public void setAnnotatedEndpointClasses(Class<?>... annotatedEndpointClasses) {, +		this.annotatedEndpointClasses = Arrays.asList(annotatedEndpointClasses);, +	}, +, +	/**, +	@Override, +	protected boolean isContextRequired() {, +		return false;, +	}, +	}, +, +	@Override, +	public void afterSingletonsInstantiated() {, +, +	 * Actually register the endpoints. Called by {@link #afterSingletonsInstantiated()}., +, +		ApplicationContext context = getApplicationContext();, +		if (context != null) {, +			String[] endpointNames = context.getBeanNamesForAnnotation(ServerEndpoint.class);, +			for (String beanName : endpointNames) {, +				Class<?> beanType = context.getType(beanName);, +				endpointClasses.add(beanType);, +		}, +, +, +		if (context != null) {, +			Map<String, ServerEndpointConfig> endpointConfigMap = context.getBeansOfType(ServerEndpointConfig.class);, +			for (Map.Entry<String, ServerEndpointConfig> configEntry : endpointConfigMap.entrySet()) {, +				String beanName = configEntry.getKey();, +				ServerEndpointConfig endpointConfig = configEntry.getValue();, +				registerEndpoint(endpointConfig);, +			}, +		}, +				logger.info("Registering @ServerEndpoint class: " + endpointClass);, +			throw new IllegalStateException("Failed to register @ServerEndpoint class: " + endpointClass, ex);, +	private void registerEndpoint(ServerEndpointConfig endpointConfig) {, +				logger.info("Registering ServerEndpointConfig: " + endpointConfig);, +			throw new IllegalStateException("Failed to register ServerEndpointConfig: " + endpointConfig, ex);]