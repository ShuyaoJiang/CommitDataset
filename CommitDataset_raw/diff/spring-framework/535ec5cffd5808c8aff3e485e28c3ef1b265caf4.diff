[+++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java, +	private int shutdownOrder = Integer.MAX_VALUE;, +, +	 * Specify the order in which this scheduler should be stopped., +	 * By default it will be stopped in the last group. , +	 */, +	public void setShutdownOrder(int shutdownOrder) {, +		this.shutdownOrder = shutdownOrder;, +	}, +, +	/**, +	 * Return the order in which this scheduler will be stopped., +	 */, +	public int getShutdownOrder() {, +		return this.shutdownOrder;, +	}, +, +	/**, +	public void stop(Runnable callback) throws SchedulingException {, +		this.stop();, +		callback.run();, +	}, +, +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java, +	private int shutdownOrder = Integer.MAX_VALUE;, +, +	 * Specify the order in which this scheduler should be stopped., +	 * By default it will be stopped in the last group. , +	 */, +	public void setShutdownOrder(int shutdownOrder) {, +		this.shutdownOrder = shutdownOrder;, +	}, +, +	/**, +	 * Return the order in which this scheduler will be stopped., +	 */, +	public int getShutdownOrder() {, +		return this.shutdownOrder;, +	}, +, +	/**, +	public void stop(Runnable callback) throws SchedulingException {, +		this.stop();, +		callback.run();, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/LifecycleProcessor.java, + * Strategy interface for processing Lifecycle beans within the ApplicationContext., + * , +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java, +	private int shutdownOrder = Integer.MAX_VALUE;, +, +	 * Specify the order in which this scheduler should be stopped., +	 * By default it will be stopped in the last group. , +	 */, +	public void setShutdownOrder(int shutdownOrder) {, +		this.shutdownOrder = shutdownOrder;, +	}, +, +	/**, +	 * Return the order in which this scheduler will be stopped., +	 */, +	public int getShutdownOrder() {, +		return this.shutdownOrder;, +	}, +, +	/**, +	public void stop(Runnable callback) throws SchedulingException {, +		this.stop();, +		callback.run();, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/LifecycleProcessor.java, + * Strategy interface for processing Lifecycle beans within the ApplicationContext., + * , +++ b/org.springframework.context/src/main/java/org/springframework/context/SmartLifecycle.java, + * An extension of the Lifecycle interface for those beans that require to be, + * started upon ApplicationContext refresh and/or shutdown in a particular order., + * , +	int getShutdownOrder();, +, +	void stop(Runnable callback);, +, +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java, +	private int shutdownOrder = Integer.MAX_VALUE;, +, +	 * Specify the order in which this scheduler should be stopped., +	 * By default it will be stopped in the last group. , +	 */, +	public void setShutdownOrder(int shutdownOrder) {, +		this.shutdownOrder = shutdownOrder;, +	}, +, +	/**, +	 * Return the order in which this scheduler will be stopped., +	 */, +	public int getShutdownOrder() {, +		return this.shutdownOrder;, +	}, +]