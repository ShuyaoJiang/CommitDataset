[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import org.springframework.stereotype.Component;, +		if (sourceClass.getMetadata().isAnnotated(Component.class.getName())) {, +		}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import org.springframework.stereotype.Component;, +		if (sourceClass.getMetadata().isAnnotated(Component.class.getName())) {, +		}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassUtils.java, +			return false;, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import org.springframework.stereotype.Component;, +		if (sourceClass.getMetadata().isAnnotated(Component.class.getName())) {, +		}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassUtils.java, +			return false;, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ImportVersusDirectRegistrationTests.java, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +	@Test(expected = NoSuchBeanDefinitionException.class), +	public void thingIsNotAvailableWhenOuterConfigurationIsRegisteredDirectly() {, +	@Test(expected = NoSuchBeanDefinitionException.class), +	public void thingIsNotAvailableWhenOuterConfigurationIsRegisteredWithClassName() {, +	@Test(expected = NoSuchBeanDefinitionException.class), +	public void thingIsNotAvailableWhenOuterConfigurationIsImported() {]