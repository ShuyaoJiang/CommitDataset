[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, + * Copyright 2002-2014 the original author or authors., +import java.security.Principal;, +import org.springframework.messaging.simp.user.DestinationUserNameProvider;, +			Principal principal = inputHeaders.getUser();, +			if (principal == null) {, +			String userName = principal.getName();, +			if (principal instanceof DestinationUserNameProvider) {, +				userName = ((DestinationUserNameProvider) principal).getDestinationUserName();, +			}, +				this.messagingTemplate.convertAndSendToUser(userName, destination, returnValue, postProcessor);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, + * Copyright 2002-2014 the original author or authors., +import java.security.Principal;, +import org.springframework.messaging.simp.user.DestinationUserNameProvider;, +			Principal principal = inputHeaders.getUser();, +			if (principal == null) {, +			String userName = principal.getName();, +			if (principal instanceof DestinationUserNameProvider) {, +				userName = ((DestinationUserNameProvider) principal).getDestinationUserName();, +			}, +				this.messagingTemplate.convertAndSendToUser(userName, destination, returnValue, postProcessor);, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandlerTests.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.messaging.simp.TestPrincipal;, +import org.springframework.messaging.simp.user.DestinationUserNameProvider;, +	public void sendTo() throws Exception {, +	public void sendToDefaultDestination() throws Exception {, +	public void sendToUser() throws Exception {, +	public void sendToUserWithUserNameProvider() throws Exception {, +, +		when(this.messageChannel.send(any(Message.class))).thenReturn(true);, +, +		String sessionId = "sess1";, +		TestUser user = new UniqueUser();, +		Message<?> inputMessage = createInputMessage(sessionId, "sub1", null, user);, +		this.handler.handleReturnValue(payloadContent, this.sendToUserReturnType, inputMessage);, +, +		verify(this.messageChannel, times(2)).send(this.messageCaptor.capture());, +, +		SimpMessageHeaderAccessor headers = SimpMessageHeaderAccessor.wrap(this.messageCaptor.getAllValues().get(0));, +		assertEquals("/user/Me myself and I/dest1", headers.getDestination());, +, +		headers = SimpMessageHeaderAccessor.wrap(this.messageCaptor.getAllValues().get(1));, +		assertEquals("/user/Me myself and I/dest2", headers.getDestination());, +	}, +, +	@Test, +	public void sendToUserDefaultDestination() throws Exception {, +	private static class UniqueUser extends TestUser implements DestinationUserNameProvider {, +, +		@Override, +		public String getDestinationUserName() {, +			return "Me myself and I";, +		}, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, + * Copyright 2002-2014 the original author or authors., +import java.security.Principal;, +import org.springframework.messaging.simp.user.DestinationUserNameProvider;, +			Principal principal = inputHeaders.getUser();, +			if (principal == null) {, +			String userName = principal.getName();, +			if (principal instanceof DestinationUserNameProvider) {, +				userName = ((DestinationUserNameProvider) principal).getDestinationUserName();, +			}, +				this.messagingTemplate.convertAndSendToUser(userName, destination, returnValue, postProcessor);, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandlerTests.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.messaging.simp.TestPrincipal;, +import org.springframework.messaging.simp.user.DestinationUserNameProvider;, +	public void sendTo() throws Exception {, +	public void sendToDefaultDestination() throws Exception {, +	public void sendToUser() throws Exception {, +	public void sendToUserWithUserNameProvider() throws Exception {, +, +		when(this.messageChannel.send(any(Message.class))).thenReturn(true);, +, +		String sessionId = "sess1";, +		TestUser user = new UniqueUser();, +		Message<?> inputMessage = createInputMessage(sessionId, "sub1", null, user);, +		this.handler.handleReturnValue(payloadContent, this.sendToUserReturnType, inputMessage);, +, +		verify(this.messageChannel, times(2)).send(this.messageCaptor.capture());, +, +		SimpMessageHeaderAccessor headers = SimpMessageHeaderAccessor.wrap(this.messageCaptor.getAllValues().get(0));, +		assertEquals("/user/Me myself and I/dest1", headers.getDestination());, +, +		headers = SimpMessageHeaderAccessor.wrap(this.messageCaptor.getAllValues().get(1));, +		assertEquals("/user/Me myself and I/dest2", headers.getDestination());, +	}, +, +	@Test, +	public void sendToUserDefaultDestination() throws Exception {, +	private static class UniqueUser extends TestUser implements DestinationUserNameProvider {, +, +		@Override, +		public String getDestinationUserName() {, +			return "Me myself and I";]