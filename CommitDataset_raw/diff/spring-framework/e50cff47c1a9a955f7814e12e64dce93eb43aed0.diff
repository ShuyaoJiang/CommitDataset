[+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/DefaultKeyGenerator.java, + * Copyright 2002-2014 the original author or authors., +import java.util.Arrays;, + * @author Juergen Hoeller, +		if (params.length == 1) {, +			Object param = params[0];, +			if (param == null) {, +				return NULL_PARAM_KEY;, +			if (!param.getClass().isArray()) {, +				return param;, +			}, +		}, +		return Arrays.deepHashCode(params);, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/DefaultKeyGenerator.java, + * Copyright 2002-2014 the original author or authors., +import java.util.Arrays;, + * @author Juergen Hoeller, +		if (params.length == 1) {, +			Object param = params[0];, +			if (param == null) {, +				return NULL_PARAM_KEY;, +			if (!param.getClass().isArray()) {, +				return param;, +			}, +		}, +		return Arrays.deepHashCode(params);, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/SimpleKeyGenerator.java, + * Copyright 2002-2014 the original author or authors., + * @author Juergen Hoeller, +		if (params.length == 1) {, +			Object param = params[0];, +			if (param != null && !param.getClass().isArray()) {, +				return param;, +			}, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/DefaultKeyGenerator.java, + * Copyright 2002-2014 the original author or authors., +import java.util.Arrays;, + * @author Juergen Hoeller, +		if (params.length == 1) {, +			Object param = params[0];, +			if (param == null) {, +				return NULL_PARAM_KEY;, +			if (!param.getClass().isArray()) {, +				return param;, +			}, +		}, +		return Arrays.deepHashCode(params);, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/SimpleKeyGenerator.java, + * Copyright 2002-2014 the original author or authors., + * @author Juergen Hoeller, +		if (params.length == 1) {, +			Object param = params[0];, +			if (param != null && !param.getClass().isArray()) {, +				return param;, +			}, +++ b/spring-context/src/test/java/org/springframework/cache/interceptor/DefaultKeyGeneratorTests.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.cache.interceptor;, +, +import org.junit.Test;, +, +import static org.hamcrest.Matchers.*;, +import static org.junit.Assert.*;, +, +/**, + * Tests for {@link DefaultKeyGenerator}., + *, + * @author Juergen Hoeller, + * @author Stephane Nicoll, + */, +public class DefaultKeyGeneratorTests {, +, +	private final DefaultKeyGenerator generator = new DefaultKeyGenerator();, +, +, +	@Test, +	public void noValues() {, +		Object k1 = generateKey(new Object[] {});, +		Object k2 = generateKey(new Object[] {});, +		Object k3 = generateKey(new Object[] { "different" });, +		assertThat(k1.hashCode(), equalTo(k2.hashCode()));, +		assertThat(k1.hashCode(), not(equalTo(k3.hashCode())));, +		assertThat(k1, equalTo(k2));, +		assertThat(k1, not(equalTo(k3)));, +	}]