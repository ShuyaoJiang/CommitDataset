[+++ b/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionConfiguration.java, +	 * PlatformTransactionManager} that should be used to drive transactions., +	 * <p>This attribute is not required and only needs to be declared if there, +	 * are multiple beans of type {@code PlatformTransactionManager} in the test's, +	 * {@code ApplicationContext} <em>and</em> if one of the following is true., +	 * <ul>, +	 * <li>the bean name of the desired {@code PlatformTransactionManager} is not, +	 * "transactionManager"</li>, +	 * <li>{@link org.springframework.transaction.annotation.TransactionManagementConfigurer, +	 * TransactionManagementConfigurer} was not implemented to specify which, +	 * {@code PlatformTransactionManager} bean should be used for annotation-driven, +	 * transaction management, +	 * </ul>, +++ b/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionConfiguration.java, +	 * PlatformTransactionManager} that should be used to drive transactions., +	 * <p>This attribute is not required and only needs to be declared if there, +	 * are multiple beans of type {@code PlatformTransactionManager} in the test's, +	 * {@code ApplicationContext} <em>and</em> if one of the following is true., +	 * <ul>, +	 * <li>the bean name of the desired {@code PlatformTransactionManager} is not, +	 * "transactionManager"</li>, +	 * <li>{@link org.springframework.transaction.annotation.TransactionManagementConfigurer, +	 * TransactionManagementConfigurer} was not implemented to specify which, +	 * {@code PlatformTransactionManager} bean should be used for annotation-driven, +	 * transaction management, +	 * </ul>, +++ b/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java, +import org.springframework.transaction.annotation.TransactionManagementConfigurer;, + * method-level {@link Rollback @Rollback} annotations., + *, + * <p>In case there are multiple instances of {@code PlatformTransactionManager}, + * within the test's {@code ApplicationContext}, @{@code TransactionConfiguration}, + * supports configuring the bean name of the {@code PlatformTransactionManager}, + * that should be used to drive transactions. Alternatively,, + * {@link TransactionManagementConfigurer} can be implemented in an, + * {@link org.springframework.context.annotation.Configuration @Configuration}, + * class., +, +				// look up single bean by type, +				Map<String, PlatformTransactionManager> txMgrs = BeanFactoryUtils.beansOfTypeIncludingAncestors(, +				if (txMgrs.size() == 1) {, +					return txMgrs.values().iterator().next();, +				}, +, +				// look up single TransactionManagementConfigurer, +				Map<String, TransactionManagementConfigurer> configurers = BeanFactoryUtils.beansOfTypeIncludingAncestors(, +					lbf, TransactionManagementConfigurer.class);, +				if (configurers.size() > 1) {, +					throw new IllegalStateException(, +						"Only one TransactionManagementConfigurer may exist in the ApplicationContext");, +				}, +				if (configurers.size() == 1) {, +					return configurers.values().iterator().next().annotationDrivenTransactionManager();, +++ b/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionConfiguration.java, +	 * PlatformTransactionManager} that should be used to drive transactions., +	 * <p>This attribute is not required and only needs to be declared if there, +	 * are multiple beans of type {@code PlatformTransactionManager} in the test's, +	 * {@code ApplicationContext} <em>and</em> if one of the following is true., +	 * <ul>, +	 * <li>the bean name of the desired {@code PlatformTransactionManager} is not, +	 * "transactionManager"</li>, +	 * <li>{@link org.springframework.transaction.annotation.TransactionManagementConfigurer, +	 * TransactionManagementConfigurer} was not implemented to specify which, +	 * {@code PlatformTransactionManager} bean should be used for annotation-driven, +	 * transaction management, +	 * </ul>, +++ b/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java, +import org.springframework.transaction.annotation.TransactionManagementConfigurer;, + * method-level {@link Rollback @Rollback} annotations., + *, + * <p>In case there are multiple instances of {@code PlatformTransactionManager}, + * within the test's {@code ApplicationContext}, @{@code TransactionConfiguration}, + * supports configuring the bean name of the {@code PlatformTransactionManager}, + * that should be used to drive transactions. Alternatively,, + * {@link TransactionManagementConfigurer} can be implemented in an, + * {@link org.springframework.context.annotation.Configuration @Configuration}, + * class., +, +				// look up single bean by type, +				Map<String, PlatformTransactionManager> txMgrs = BeanFactoryUtils.beansOfTypeIncludingAncestors(, +				if (txMgrs.size() == 1) {, +					return txMgrs.values().iterator().next();, +				}, +, +				// look up single TransactionManagementConfigurer, +				Map<String, TransactionManagementConfigurer> configurers = BeanFactoryUtils.beansOfTypeIncludingAncestors(, +					lbf, TransactionManagementConfigurer.class);, +				if (configurers.size() > 1) {, +					throw new IllegalStateException(, +						"Only one TransactionManagementConfigurer may exist in the ApplicationContext");, +				}, +				if (configurers.size() == 1) {, +					return configurers.values().iterator().next().annotationDrivenTransactionManager();, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/spr9604/LookUpTxMgrViaTransactionManagementConfigurerTests.java, +/*, + * Copyright 2002-2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at]