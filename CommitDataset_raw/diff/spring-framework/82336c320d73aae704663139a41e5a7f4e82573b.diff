[+++ b/spring-web/src/main/java/org/springframework/web/multipart/support/DefaultMultipartHttpServletRequest.java, + * Copyright 2002-2014 the original author or authors., +import java.util.LinkedHashSet;, + * <p>Used by {@link org.springframework.web.multipart.commons.CommonsMultipartResolver}., + *, +		Map<String, String[]> multipartParameters = getMultipartParameters();, +		if (multipartParameters.isEmpty()) {, +			return super.getParameterNames();, +		}, +, +		Set<String> paramNames = new LinkedHashSet<String>();, +		paramNames.addAll(multipartParameters.keySet());, +++ b/spring-web/src/main/java/org/springframework/web/multipart/support/DefaultMultipartHttpServletRequest.java, + * Copyright 2002-2014 the original author or authors., +import java.util.LinkedHashSet;, + * <p>Used by {@link org.springframework.web.multipart.commons.CommonsMultipartResolver}., + *, +		Map<String, String[]> multipartParameters = getMultipartParameters();, +		if (multipartParameters.isEmpty()) {, +			return super.getParameterNames();, +		}, +, +		Set<String> paramNames = new LinkedHashSet<String>();, +		paramNames.addAll(multipartParameters.keySet());, +++ b/spring-web/src/main/java/org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.java, + * Copyright 2002-2014 the original author or authors., +import java.util.Collections;, +import java.util.Enumeration;, +import java.util.LinkedHashSet;, +import java.util.Set;, +	private Set<String> multipartParameterNames;, +, +	 * Create a new StandardMultipartHttpServletRequest wrapper for the given request,, +	 * immediately parsing the multipart content., +		this(request, false);, +	}, +, +	/**, +	 * Create a new StandardMultipartHttpServletRequest wrapper for the given request., +	 * @param request the servlet request to wrap, +	 * @param lazyParsing whether multipart parsing should be triggered lazily on, +	 * first access of multipart files or parameters, +	 * @throws MultipartException if an immediate parsing attempt failed, +	 */, +	public StandardMultipartHttpServletRequest(HttpServletRequest request, boolean lazyParsing) throws MultipartException {, +		if (!lazyParsing) {, +			parseRequest(request);, +		}, +	}, +, +, +	private void parseRequest(HttpServletRequest request) {, +			this.multipartParameterNames = new LinkedHashSet<String>(parts.size());, +				else {, +					this.multipartParameterNames.add(part.getName());, +				}, +	protected void initializeMultipart() {, +		parseRequest(getRequest());, +	}, +, +	@Override, +	public Enumeration<String> getParameterNames() {, +		if (this.multipartParameterNames == null) {, +			initializeMultipart();, +		}, +		if (this.multipartParameterNames.isEmpty()) {, +			return super.getParameterNames();, +		}, +, +		Set<String> paramNames = new LinkedHashSet<String>();, +		Enumeration<String> paramEnum = super.getParameterNames();, +		while (paramEnum.hasMoreElements()) {, +			paramNames.add(paramEnum.nextElement());, +		}, +		paramNames.addAll(this.multipartParameterNames);, +		return Collections.enumeration(paramNames);, +	}, +, +	@Override, +++ b/spring-web/src/main/java/org/springframework/web/multipart/support/DefaultMultipartHttpServletRequest.java, + * Copyright 2002-2014 the original author or authors., +import java.util.LinkedHashSet;, + * <p>Used by {@link org.springframework.web.multipart.commons.CommonsMultipartResolver}., + *, +		Map<String, String[]> multipartParameters = getMultipartParameters();, +		if (multipartParameters.isEmpty()) {, +			return super.getParameterNames();, +		}, +, +		Set<String> paramNames = new LinkedHashSet<String>();, +		paramNames.addAll(multipartParameters.keySet());, +++ b/spring-web/src/main/java/org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.java, + * Copyright 2002-2014 the original author or authors., +import java.util.Collections;, +import java.util.Enumeration;, +import java.util.LinkedHashSet;, +import java.util.Set;, +	private Set<String> multipartParameterNames;, +, +	 * Create a new StandardMultipartHttpServletRequest wrapper for the given request,]