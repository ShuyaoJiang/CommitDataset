[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/HeaderResultMatchers.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.mock.web.MockHttpServletResponse;, + * <p>An instance of this class is available via, +, +	 * See {@link MockMvcResultMatchers#header()}., +, +				assertTrue("Response should not contain header " + name,, +						!result.getResponse().containsHeader(name));, +	 * <p>The {@link ResultMatcher} returned by this method throws an, +	 * {@link AssertionError} if the response does not contain the specified, +	 * header, or if the supplied {@code value} does not match the primary value., +				MockHttpServletResponse response = result.getResponse();, +				assertTrue("Response does not contain header " + name, response.containsHeader(name));, +				assertEquals("Response header " + name, value, Long.parseLong(response.getHeader(name)));, +	 * <p>The {@link ResultMatcher} returned by this method throws an, +	 * {@link AssertionError} if the response does not contain the specified, +	 * header, or if the supplied {@code value} does not match the primary value., +				String formatted = format.format(new Date(value));, +				MockHttpServletResponse response = result.getResponse();, +				assertTrue("Response does not contain header " + name, response.containsHeader(name));, +				assertEquals("Response header " + name, formatted, response.getHeader(name));, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/HeaderResultMatchers.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.mock.web.MockHttpServletResponse;, + * <p>An instance of this class is available via, +, +	 * See {@link MockMvcResultMatchers#header()}., +, +				assertTrue("Response should not contain header " + name,, +						!result.getResponse().containsHeader(name));, +	 * <p>The {@link ResultMatcher} returned by this method throws an, +	 * {@link AssertionError} if the response does not contain the specified, +	 * header, or if the supplied {@code value} does not match the primary value., +				MockHttpServletResponse response = result.getResponse();, +				assertTrue("Response does not contain header " + name, response.containsHeader(name));, +				assertEquals("Response header " + name, value, Long.parseLong(response.getHeader(name)));, +	 * <p>The {@link ResultMatcher} returned by this method throws an, +	 * {@link AssertionError} if the response does not contain the specified, +	 * header, or if the supplied {@code value} does not match the primary value., +				String formatted = format.format(new Date(value));, +				MockHttpServletResponse response = result.getResponse();, +				assertTrue("Response does not contain header " + name, response.containsHeader(name));, +				assertEquals("Response header " + name, formatted, response.getHeader(name));, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/HeaderAssertionTests.java, + * Copyright 2002-2016 the original author or authors., +import java.text.SimpleDateFormat;, +import java.util.Date;, +import java.util.Locale;, +import java.util.TimeZone;, +, +import static org.hamcrest.CoreMatchers.equalTo;, +import static org.hamcrest.CoreMatchers.nullValue;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +import static org.springframework.http.HttpHeaders.IF_MODIFIED_SINCE;, +import static org.springframework.http.HttpHeaders.LAST_MODIFIED;, +import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.header;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;, +import static org.springframework.test.web.servlet.setup.MockMvcBuilders.standaloneSetup;, +	private static final String ERROR_MESSAGE = "Should have thrown an AssertionError";, +	private String minuteAgo;, +	private String secondLater;, +	private final long currentTime = System.currentTimeMillis();, +		this.now = dateFormat.format(new Date(this.currentTime));, +		this.minuteAgo = dateFormat.format(new Date(this.currentTime - (1000 * 60)));, +		this.secondLater = dateFormat.format(new Date(this.currentTime + 1000));, +, +		PersonController controller = new PersonController();, +		controller.setStubTimestamp(this.currentTime);, +		this.mockMvc = standaloneSetup(controller).build();, +, +		this.mockMvc.perform(get("/persons/1").header(IF_MODIFIED_SINCE, minuteAgo)), +		this.mockMvc.perform(get("/persons/1").header(IF_MODIFIED_SINCE, minuteAgo)), +		this.mockMvc.perform(get("/persons/1").header(IF_MODIFIED_SINCE, minuteAgo)), +				.andExpect(header().dateValue(LAST_MODIFIED, this.currentTime));, +		this.mockMvc.perform(get("/persons/1")), +		this.mockMvc.perform(get("/persons/1").header(IF_MODIFIED_SINCE, now)), +				.andExpect(status().isNotModified()), +		this.mockMvc.perform(get("/persons/1").header(IF_MODIFIED_SINCE, now)), +				.andExpect(status().isNotModified()), +			this.mockMvc.perform(get("/persons/1").header(IF_MODIFIED_SINCE, now)), +					.andExpect(status().isNotModified()), +			fail(ERROR_MESSAGE);, +			if (ERROR_MESSAGE.equals(e.getMessage())) {, +		this.mockMvc.perform(get("/persons/1")).andExpect(header().doesNotExist("X-Custom-Header"));, +		this.mockMvc.perform(get("/persons/1")).andExpect(header().doesNotExist(LAST_MODIFIED));, +		assertIncorrectResponseHeader(header().string(LAST_MODIFIED, secondLater), secondLater);, +		assertIncorrectResponseHeader(header().string(LAST_MODIFIED, equalTo(secondLater)), secondLater);, +		long unexpected = this.currentTime + 1000;, +		assertIncorrectResponseHeader(header().dateValue(LAST_MODIFIED, unexpected), secondLater);, +	private void assertIncorrectResponseHeader(ResultMatcher matcher, String unexpected) throws Exception {, +			this.mockMvc.perform(get("/persons/1"), +					.header(IF_MODIFIED_SINCE, minuteAgo)), +					.andExpect(matcher);, +			fail(ERROR_MESSAGE);, +			if (ERROR_MESSAGE.equals(e.getMessage())) {, +			// SPR-10659: ensure header name is in the message]