[+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, +	/**, +	 * Returns "false" so that the filter may provide a Hibernate, +	 * {@code Session} to each error dispatches., +	 */, +	@Override, +	protected boolean shouldNotFilterErrorDispatch() {, +		return false;, +	}, +, +				boolean isFirstRequest = !isAsyncDispatch(request);, +			Assert.state(!isAsyncStarted(request), "Deferred close mode is not supported on async dispatches");, +					if (!isAsyncStarted(request)) {, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, +	/**, +	 * Returns "false" so that the filter may provide a Hibernate, +	 * {@code Session} to each error dispatches., +	 */, +	@Override, +	protected boolean shouldNotFilterErrorDispatch() {, +		return false;, +	}, +, +				boolean isFirstRequest = !isAsyncDispatch(request);, +			Assert.state(!isAsyncStarted(request), "Deferred close mode is not supported on async dispatches");, +					if (!isAsyncStarted(request)) {, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewFilter.java, +	 * Returns "false" so that the filter may re-bind the opened Hibernate, +	/**, +	 * Returns "false" so that the filter may provide a Hibernate, +	 * {@code Session} to each error dispatches., +	 */, +	@Override, +	protected boolean shouldNotFilterErrorDispatch() {, +		return false;, +	}, +, +			boolean isFirstRequest = !isAsyncDispatch(request);, +				if (!isAsyncStarted(request)) {, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, +	/**, +	 * Returns "false" so that the filter may provide a Hibernate, +	 * {@code Session} to each error dispatches., +	 */, +	@Override, +	protected boolean shouldNotFilterErrorDispatch() {, +		return false;, +	}, +, +				boolean isFirstRequest = !isAsyncDispatch(request);, +			Assert.state(!isAsyncStarted(request), "Deferred close mode is not supported on async dispatches");, +					if (!isAsyncStarted(request)) {, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewFilter.java, +	 * Returns "false" so that the filter may re-bind the opened Hibernate, +	/**, +	 * Returns "false" so that the filter may provide a Hibernate, +	 * {@code Session} to each error dispatches., +	 */, +	@Override, +	protected boolean shouldNotFilterErrorDispatch() {, +		return false;, +	}, +, +			boolean isFirstRequest = !isAsyncDispatch(request);, +				if (!isAsyncStarted(request)) {, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/support/OpenEntityManagerInViewFilter.java, +	 * Returns "false" so that the filter may re-bind the opened, +	/**, +	 * Returns "false" so that the filter may provide an {@code EntityManager}, +	 * to each error dispatches., +	 */, +	@Override, +	protected boolean shouldNotFilterErrorDispatch() {, +		return false;, +	}, +, +			boolean isFirstRequest = !isAsyncDispatch(request);, +				if (!isAsyncStarted(request)) {, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, +	/**, +	 * Returns "false" so that the filter may provide a Hibernate, +	 * {@code Session} to each error dispatches., +	 */, +	@Override, +	protected boolean shouldNotFilterErrorDispatch() {, +		return false;, +	}, +, +				boolean isFirstRequest = !isAsyncDispatch(request);, +			Assert.state(!isAsyncStarted(request), "Deferred close mode is not supported on async dispatches");, +					if (!isAsyncStarted(request)) {, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewFilter.java, +	 * Returns "false" so that the filter may re-bind the opened Hibernate, +	/**, +	 * Returns "false" so that the filter may provide a Hibernate, +	 * {@code Session} to each error dispatches., +	 */, +	@Override, +	protected boolean shouldNotFilterErrorDispatch() {, +		return false;]