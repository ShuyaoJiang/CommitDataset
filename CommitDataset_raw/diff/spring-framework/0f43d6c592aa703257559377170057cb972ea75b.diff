[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.java, +	/** Default value separator: ":" */, +	public static final String DEFAULT_VALUE_SEPARATOR = ":";, +, +	private String valueSeparator = DEFAULT_VALUE_SEPARATOR;, +, +			this.helper = new PropertyPlaceholderHelper(, +					placeholderPrefix, placeholderSuffix, valueSeparator, ignoreUnresolvablePlaceholders);, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.java, +	/** Default value separator: ":" */, +	public static final String DEFAULT_VALUE_SEPARATOR = ":";, +, +	private String valueSeparator = DEFAULT_VALUE_SEPARATOR;, +, +			this.helper = new PropertyPlaceholderHelper(, +					placeholderPrefix, placeholderSuffix, valueSeparator, ignoreUnresolvablePlaceholders);, +, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/config/PropertyResourceConfigurerTests.java, +	public void testPropertyPlaceholderConfigurerWithInlineDefault() {, +		factory.registerBeanDefinition("tb",, +			genericBeanDefinition(TestBean.class), +			.addPropertyValue("touchy", "${test:mytest}").getBeanDefinition());, +, +		PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer();, +		ppc.postProcessBeanFactory(factory);, +, +		TestBean tb = (TestBean) factory.getBean("tb");, +		assertEquals("mytest", tb.getTouchy());, +	}, +, +	@Test, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.java, +	/** Default value separator: ":" */, +	public static final String DEFAULT_VALUE_SEPARATOR = ":";, +, +	private String valueSeparator = DEFAULT_VALUE_SEPARATOR;, +, +			this.helper = new PropertyPlaceholderHelper(, +					placeholderPrefix, placeholderSuffix, valueSeparator, ignoreUnresolvablePlaceholders);, +, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/config/PropertyResourceConfigurerTests.java, +	public void testPropertyPlaceholderConfigurerWithInlineDefault() {, +		factory.registerBeanDefinition("tb",, +			genericBeanDefinition(TestBean.class), +			.addPropertyValue("touchy", "${test:mytest}").getBeanDefinition());, +, +		PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer();, +		ppc.postProcessBeanFactory(factory);, +, +		TestBean tb = (TestBean) factory.getBean("tb");, +		assertEquals("mytest", tb.getTouchy());, +	}, +, +	@Test, +++ b/org.springframework.core/src/main/java/org/springframework/util/PropertyPlaceholderHelper.java, +import java.util.HashSet;, + * <code>${name}</code>. Using <code>PropertyPlaceholderHelper</code> these placeholders can be substituted for, + * user-supplied values. <p> Values for substitution can be supplied using a {@link Properties} instance or, + * using a {@link PlaceholderResolver}., +	private static final Log logger = LogFactory.getLog(PropertyPlaceholderHelper.class);, +	private final String valueSeparator;, +, +, +	 * Creates a new <code>PropertyPlaceholderHelper</code> that uses the supplied prefix and suffix., +	 * Unresolvable placeholders are ignored., +		this(placeholderPrefix, placeholderSuffix, null, true);, +			String valueSeparator, boolean ignoreUnresolvablePlaceholders) {, +, +		Assert.notNull(placeholderPrefix, "placeholderPrefix must not be null");, +		Assert.notNull(placeholderSuffix, "placeholderSuffix must not be null");, +		this.valueSeparator = valueSeparator;, +, +	 * Replaces all placeholders of format <code>${name}</code> with the corresponding property, +	 * from the supplied {@link Properties}., +	 * Replaces all placeholders of format <code>${name}</code> with the value returned from the supplied, +	 * {@link PlaceholderResolver}., +	protected String parseStringValue(, +			String strVal, PlaceholderResolver placeholderResolver, Set<String> visitedPlaceholders) {, +, +				if (propVal == null && this.valueSeparator != null) {, +					int separatorIndex = placeholder.indexOf(this.valueSeparator);, +					if (separatorIndex != -1) {, +						String actualPlaceholder = placeholder.substring(0, separatorIndex);, +						String defaultValue = placeholder.substring(separatorIndex + this.valueSeparator.length());, +						propVal = placeholderResolver.resolvePlaceholder(actualPlaceholder);, +						if (propVal == null) {, +							propVal = defaultValue;, +						}, +					}, +				}, +					if (logger.isTraceEnabled()) {, +						logger.trace("Resolved placeholder '" + placeholder + "'");, +, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.java, +	/** Default value separator: ":" */, +	public static final String DEFAULT_VALUE_SEPARATOR = ":";, +, +	private String valueSeparator = DEFAULT_VALUE_SEPARATOR;]