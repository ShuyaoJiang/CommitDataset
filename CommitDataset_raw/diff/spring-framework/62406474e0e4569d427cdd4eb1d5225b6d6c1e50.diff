[+++ b/spring-framework-reference/src/classic-spring.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<!DOCTYPE appendix PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN", +"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">, +<appendix id="classic-spring">, +  <title>Classic Spring Usage</title>, +, +  <para>This appendix discusses some classic Spring usage patterns as a, +  reference for developers maintaining legacy Spring applications. These usage, +  patterns no longer reflect the recommended way of using these features and, +  the current recommended usage is covered in the respective sections of the, +  reference manual.</para>, +, +  <section id="classic-spring-orm">, +    <title>Classic ORM usage</title>, +, +    <para>This section documents the classic usage patterns that you might, +    encounter in a legacy Spring application. For the currently recommended, +    usage patterns, please refer to the <xref linkend="orm" /> chapter., +    </para>, +, +    <section id="classic-spring-hibernate">, +      <title>Hibernate</title>, +, +      <para>For the currently recommended usage patterns for Hibernate see, +      <xref linkend="orm-hibernate" /></para>, +, +      <section id="orm-hibernate-template">, +        <title>The <classname>HibernateTemplate</classname></title>, +, +        <para>The basic programming model for templating looks as follows, for, +        methods that can be part of any custom data access object or business, +        service. There are no restrictions on the implementation of the, +        surrounding object at all, it just needs to provide a Hibernate, +        <interfacename>SessionFactory</interfacename>. It can get the latter, +        from anywhere, but preferably as bean reference from a Spring IoC, +        container - via a simple, +        <methodname>setSessionFactory(..)</methodname> bean property setter., +        The following snippets show a DAO definition in a Spring container,, +        referencing the above defined, +        <interfacename>SessionFactory</interfacename>, and an example for a, +        DAO method implementation.</para>, +, +        <programlisting language="xml">&lt;beans&gt;, +, +  &lt;bean id="myProductDao" class="product.ProductDaoImpl"&gt;, +    &lt;property name="sessionFactory" ref="mySessionFactory"/&gt;, +  &lt;/bean&gt;, +, +&lt;/beans&gt;</programlisting>, +, +        <programlisting language="java">public class ProductDaoImpl implements ProductDao {, +, +    private HibernateTemplate hibernateTemplate;, +, +    public void setSessionFactory(SessionFactory sessionFactory) {, +        this.hibernateTemplate = new HibernateTemplate(sessionFactory);, +    }, +, +    public Collection loadProductsByCategory(String category) throws DataAccessException {, +    	return this.hibernateTemplate.find("from test.Product product where product.category=?", category);, +    }, +}</programlisting>, +, +        <para>The <classname>HibernateTemplate</classname> class provides many, +        methods that mirror the methods exposed on the Hibernate, +        <interfacename>Session</interfacename> interface, in addition to a, +        number of convenience methods such as the one shown above. If you need, +        access to the <interfacename>Session</interfacename> to invoke methods, +        that are not exposed on the <classname>HibernateTemplate</classname>,, +        you can always drop down to a callback-based approach like so.</para>, +, +        <programlisting language="java">public class ProductDaoImpl implements ProductDao {, +, +    private HibernateTemplate hibernateTemplate;, +, +    public void setSessionFactory(SessionFactory sessionFactory) {, +        this.hibernateTemplate = new HibernateTemplate(sessionFactory);, +    }, +, +    public Collection loadProductsByCategory(final String category) throws DataAccessException {, +        return this.hibernateTemplate.execute(new HibernateCallback() {, +, +            public Object doInHibernate(Session session) {, +                Criteria criteria = session.createCriteria(Product.class);, +                criteria.add(Expression.eq("category", category));, +                criteria.setMaxResults(6);, +                return criteria.list();, +            }, +        };, +    }, +}</programlisting>, +, +        <para>A callback implementation effectively can be used for any, +        Hibernate data access. <classname>HibernateTemplate</classname> will, +        ensure that <interfacename>Session</interfacename> instances are, +        properly opened and closed, and automatically participate in, +        transactions. The template instances are thread-safe and reusable,, +        they can thus be kept as instance variables of the surrounding class., +        For simple single step actions like a single find, load, saveOrUpdate,]