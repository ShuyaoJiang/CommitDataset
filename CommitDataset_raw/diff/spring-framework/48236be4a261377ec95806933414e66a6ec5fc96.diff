[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/HandlerMethod.java, +	public String getShortLogMessage() {, +		int args = method.getParameterTypes().length;, +		return getBeanType().getName() + "#" + this.method.getName() + "[" + args + " args]";, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/HandlerMethod.java, +	public String getShortLogMessage() {, +		int args = method.getParameterTypes().length;, +		return getBeanType().getName() + "#" + this.method.getName() + "[" + args + " args]";, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/HeaderMethodArgumentResolver.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/HandlerMethod.java, +	public String getShortLogMessage() {, +		int args = method.getParameterTypes().length;, +		return getBeanType().getName() + "#" + this.method.getName() + "[" + args + " args]";, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/HeaderMethodArgumentResolver.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java, + * Copyright 2002-2014 the original author or authors., +		if (logger.isDebugEnabled()) {, +			logger.debug("Searching methods to handle " + headerAccessor.getShortLogMessage(message.getPayload()));, +		}, +, +			logger.trace("Found " + matches.size() + " methods: " + matches);, +			logger.debug("Invoking " + handlerMethod.getShortLogMessage());, +		if (logger.isDebugEnabled()) {, +			logger.debug("Searching methods to handle " + ex.getClass().getSimpleName());, +		}, +		if (logger.isDebugEnabled()) {, +			logger.debug("Invoking " + invocable.getShortLogMessage());, +		}, +			logger.debug("No matching methods.");, +	@Override, +	public String toString() {, +		return getClass().getSimpleName() + "[prefixes=" + getDestinationPrefixes() + "]";, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/HandlerMethod.java, +	public String getShortLogMessage() {, +		int args = method.getParameterTypes().length;, +		return getBeanType().getName() + "#" + this.method.getName() + "[" + args + " args]";, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/HeaderMethodArgumentResolver.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java, + * Copyright 2002-2014 the original author or authors., +		if (logger.isDebugEnabled()) {, +			logger.debug("Searching methods to handle " + headerAccessor.getShortLogMessage(message.getPayload()));, +		}, +, +			logger.trace("Found " + matches.size() + " methods: " + matches);, +			logger.debug("Invoking " + handlerMethod.getShortLogMessage());, +		if (logger.isDebugEnabled()) {, +			logger.debug("Searching methods to handle " + ex.getClass().getSimpleName());, +		}, +		if (logger.isDebugEnabled()) {, +			logger.debug("Invoking " + invocable.getShortLogMessage());, +		}, +			logger.debug("No matching methods.");, +	@Override, +	public String toString() {, +		return getClass().getSimpleName() + "[prefixes=" + getDestinationPrefixes() + "]";, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/HandlerMethodArgumentResolverComposite.java, + * Copyright 2002-2014 the original author or authors., +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/HandlerMethod.java, +	public String getShortLogMessage() {, +		int args = method.getParameterTypes().length;, +		return getBeanType().getName() + "#" + this.method.getName() + "[" + args + " args]";, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/HeaderMethodArgumentResolver.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java, + * Copyright 2002-2014 the original author or authors., +		if (logger.isDebugEnabled()) {, +			logger.debug("Searching methods to handle " + headerAccessor.getShortLogMessage(message.getPayload()));, +		}, +, +			logger.trace("Found " + matches.size() + " methods: " + matches);, +			logger.debug("Invoking " + handlerMethod.getShortLogMessage());, +		if (logger.isDebugEnabled()) {, +			logger.debug("Searching methods to handle " + ex.getClass().getSimpleName());, +		}, +		if (logger.isDebugEnabled()) {, +			logger.debug("Invoking " + invocable.getShortLogMessage());, +		}, +			logger.debug("No matching methods.");, +	@Override, +	public String toString() {, +		return getClass().getSimpleName() + "[prefixes=" + getDestinationPrefixes() + "]";, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/HandlerMethodArgumentResolverComposite.java, + * Copyright 2002-2014 the original author or authors., +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/HandlerMethodReturnValueHandlerComposite.java, + * A HandlerMethodReturnValueHandler that wraps and delegates to others.]