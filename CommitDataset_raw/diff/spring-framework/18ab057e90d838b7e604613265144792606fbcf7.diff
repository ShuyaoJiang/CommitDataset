[+++ b/org.springframework.test/src/main/java/org/springframework/mock/web/HeaderValueHolder.java, + * Copyright 2002-2011 the original author or authors., +	public String getStringValue() {, +		return (!this.values.isEmpty() ? this.values.get(0).toString() : null);, +	}, +, +++ b/org.springframework.test/src/main/java/org/springframework/mock/web/HeaderValueHolder.java, + * Copyright 2002-2011 the original author or authors., +	public String getStringValue() {, +		return (!this.values.isEmpty() ? this.values.get(0).toString() : null);, +	}, +, +++ b/org.springframework.test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, + * Copyright 2002-2011 the original author or authors., +import java.io.IOException;, +import javax.servlet.ServletException;, +import javax.servlet.http.HttpServletResponse;, + * Mock implementation of the {@link javax.servlet.http.HttpServletRequest} interface., + *, + * <p>Compatible with Servlet 2.5 and partially with Servlet 3.0 (notable exceptions:, + * the <code>getPart(s)</code> and <code>startAsync</code> families of methods)., +, +, +, +, +, +	 * <p>If there was no entry for that header name before, the value will be used, +	 * <p>Multiple values can only be stored as list of Strings, following the, +	public String getHeader(String name) {, +		HeaderValueHolder header = HeaderValueHolder.getByName(this.headers, name);, +		return (header != null ? header.getStringValue() : null);, +	}, +, +	public Enumeration<String> getHeaders(String name) {, +		HeaderValueHolder header = HeaderValueHolder.getByName(this.headers, name);, +		return Collections.enumeration(header != null ? header.getStringValues() : new LinkedList<String>());, +	}, +, +	public Enumeration<String> getHeaderNames() {, +		return Collections.enumeration(this.headers.keySet());, +	}, +, +		return (this.userRoles.contains(role) || (this.servletContext instanceof MockServletContext &&, +				((MockServletContext) this.servletContext).getDeclaredRoles().contains(role)));, +	public boolean authenticate(HttpServletResponse response) throws IOException, ServletException {, +		return (this.userPrincipal != null && this.remoteUser != null && this.authType != null);, +	}, +, +	public void login(String username, String password) throws ServletException {, +		throw new ServletException("Username-password authentication not supported - override the login method");, +	}, +, +	public void logout() throws ServletException {, +		this.userPrincipal = null;, +		this.remoteUser = null;, +		this.authType = null;, +	}, +, +++ b/org.springframework.test/src/main/java/org/springframework/mock/web/HeaderValueHolder.java, + * Copyright 2002-2011 the original author or authors., +	public String getStringValue() {, +		return (!this.values.isEmpty() ? this.values.get(0).toString() : null);, +	}, +, +++ b/org.springframework.test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, + * Copyright 2002-2011 the original author or authors., +import java.io.IOException;, +import javax.servlet.ServletException;, +import javax.servlet.http.HttpServletResponse;, + * Mock implementation of the {@link javax.servlet.http.HttpServletRequest} interface., + *, + * <p>Compatible with Servlet 2.5 and partially with Servlet 3.0 (notable exceptions:, + * the <code>getPart(s)</code> and <code>startAsync</code> families of methods)., +, +, +, +, +, +	 * <p>If there was no entry for that header name before, the value will be used, +	 * <p>Multiple values can only be stored as list of Strings, following the, +	public String getHeader(String name) {, +		HeaderValueHolder header = HeaderValueHolder.getByName(this.headers, name);, +		return (header != null ? header.getStringValue() : null);, +	}, +, +	public Enumeration<String> getHeaders(String name) {, +		HeaderValueHolder header = HeaderValueHolder.getByName(this.headers, name);, +		return Collections.enumeration(header != null ? header.getStringValues() : new LinkedList<String>());, +	}, +, +	public Enumeration<String> getHeaderNames() {, +		return Collections.enumeration(this.headers.keySet());, +	}, +, +		return (this.userRoles.contains(role) || (this.servletContext instanceof MockServletContext &&, +				((MockServletContext) this.servletContext).getDeclaredRoles().contains(role)));, +	public boolean authenticate(HttpServletResponse response) throws IOException, ServletException {, +		return (this.userPrincipal != null && this.remoteUser != null && this.authType != null);, +	}, +]