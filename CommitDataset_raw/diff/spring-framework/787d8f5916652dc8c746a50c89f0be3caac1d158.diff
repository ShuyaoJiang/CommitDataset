[+++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +	/** Stores the BeanInfoFactory instances */, +	private static List<BeanInfoFactory> beanInfoFactories =, +			SpringFactoriesLoader.loadFactories(BeanInfoFactory.class, CachedIntrospectionResults.class.getClassLoader());, +, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +	/** Stores the BeanInfoFactory instances */, +	private static List<BeanInfoFactory> beanInfoFactories =, +			SpringFactoriesLoader.loadFactories(BeanInfoFactory.class, CachedIntrospectionResults.class.getClassLoader());, +, +++ b/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoader.java, +import org.springframework.core.OrderComparator;, + * General purpose factory loading mechanism for internal use within the framework., + * from "META-INF/spring.factories" files. The file should be in {@link Properties} format,, + * where the key is the fully qualified interface or abstract class name, and the value, + * is a comma-separated list of implementation class names. For instance:, + * @author Juergen Hoeller, +	/** The location to look for the factories. Can be present in multiple JAR files. */, +	private static final String FACTORIES_RESOURCE_LOCATION = "META-INF/spring.factories";, +, +	 * <p>The returned factories are ordered in accordance with the {@link OrderComparator}., +	 * @param classLoader the ClassLoader to use for loading (can be {@code null} to use the default), +	public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader) {, +			classLoader = SpringFactoriesLoader.class.getClassLoader();, +		List<String> factoryNames = loadFactoryNames(factoryClass, classLoader);, +			logger.trace("Loaded [" + factoryClass.getName() + "] names: " + factoryNames);, +		OrderComparator.sort(result);, +	private static List<String> loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader) {, +			Enumeration<URL> urls = classLoader.getResources(FACTORIES_RESOURCE_LOCATION);, +				Properties properties = PropertiesLoaderUtils.loadProperties(new UrlResource(url));, +				result.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(factoryClassNames)));, +			throw new IllegalArgumentException("Unable to load [" + factoryClass.getName() +, +					"] factories from location [" + FACTORIES_RESOURCE_LOCATION + "]", ex);, +	private static <T> T instantiateFactory(String instanceClassName, Class<T> factoryClass, ClassLoader classLoader) {, +						"Class [" + instanceClassName + "] is not assignable to [" + factoryClass.getName() + "]");, +		catch (Throwable ex) {, +			throw new IllegalArgumentException("Cannot instantiate factory class: " + factoryClass.getName(), ex);, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +	/** Stores the BeanInfoFactory instances */, +	private static List<BeanInfoFactory> beanInfoFactories =, +			SpringFactoriesLoader.loadFactories(BeanInfoFactory.class, CachedIntrospectionResults.class.getClassLoader());, +, +++ b/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoader.java, +import org.springframework.core.OrderComparator;, + * General purpose factory loading mechanism for internal use within the framework., + * from "META-INF/spring.factories" files. The file should be in {@link Properties} format,, + * where the key is the fully qualified interface or abstract class name, and the value, + * is a comma-separated list of implementation class names. For instance:, + * @author Juergen Hoeller, +	/** The location to look for the factories. Can be present in multiple JAR files. */, +	private static final String FACTORIES_RESOURCE_LOCATION = "META-INF/spring.factories";, +, +	 * <p>The returned factories are ordered in accordance with the {@link OrderComparator}., +	 * @param classLoader the ClassLoader to use for loading (can be {@code null} to use the default), +	public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader) {, +			classLoader = SpringFactoriesLoader.class.getClassLoader();, +		List<String> factoryNames = loadFactoryNames(factoryClass, classLoader);, +			logger.trace("Loaded [" + factoryClass.getName() + "] names: " + factoryNames);, +		OrderComparator.sort(result);, +	private static List<String> loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader) {, +			Enumeration<URL> urls = classLoader.getResources(FACTORIES_RESOURCE_LOCATION);, +				Properties properties = PropertiesLoaderUtils.loadProperties(new UrlResource(url));, +				result.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(factoryClassNames)));, +			throw new IllegalArgumentException("Unable to load [" + factoryClass.getName() +, +					"] factories from location [" + FACTORIES_RESOURCE_LOCATION + "]", ex);, +	private static <T> T instantiateFactory(String instanceClassName, Class<T> factoryClass, ClassLoader classLoader) {, +						"Class [" + instanceClassName + "] is not assignable to [" + factoryClass.getName() + "]");, +		catch (Throwable ex) {, +			throw new IllegalArgumentException("Cannot instantiate factory class: " + factoryClass.getName(), ex);, +++ /dev/null]