[+++ b/spring-aop/src/test/java/org/springframework/aop/scope/ScopedProxyAutowireTests.java, + * @author Chris Beams, +	private static final Resource SCOPED_AUTOWIRE_FALSE_CONTEXT =, +			qualifiedResource(ScopedProxyAutowireTests.class, "scopedAutowireFalse.xml");, +	private static final Resource SCOPED_AUTOWIRE_TRUE_CONTEXT =, +			qualifiedResource(ScopedProxyAutowireTests.class, "scopedAutowireTrue.xml");, +		assertTrue(Arrays.asList(bf.getBeanNamesForType(TestBean.class, true, false)).contains("scoped"));, +		assertFalse(bf.containsSingleton("scoped"));, +		assertTrue(Arrays.asList(bf.getBeanNamesForType(TestBean.class, true, false)).contains("scoped"));, +		assertFalse(bf.containsSingleton("scoped"));, +++ b/spring-aop/src/test/java/org/springframework/aop/scope/ScopedProxyAutowireTests.java, + * @author Chris Beams, +	private static final Resource SCOPED_AUTOWIRE_FALSE_CONTEXT =, +			qualifiedResource(ScopedProxyAutowireTests.class, "scopedAutowireFalse.xml");, +	private static final Resource SCOPED_AUTOWIRE_TRUE_CONTEXT =, +			qualifiedResource(ScopedProxyAutowireTests.class, "scopedAutowireTrue.xml");, +		assertTrue(Arrays.asList(bf.getBeanNamesForType(TestBean.class, true, false)).contains("scoped"));, +		assertFalse(bf.containsSingleton("scoped"));, +		assertTrue(Arrays.asList(bf.getBeanNamesForType(TestBean.class, true, false)).contains("scoped"));, +		assertFalse(bf.containsSingleton("scoped"));, +++ b/spring-aop/src/test/resources/org/springframework/aop/config/TopLevelAopTagTests-context.xml, +++ b/spring-aop/src/test/java/org/springframework/aop/scope/ScopedProxyAutowireTests.java, + * @author Chris Beams, +	private static final Resource SCOPED_AUTOWIRE_FALSE_CONTEXT =, +			qualifiedResource(ScopedProxyAutowireTests.class, "scopedAutowireFalse.xml");, +	private static final Resource SCOPED_AUTOWIRE_TRUE_CONTEXT =, +			qualifiedResource(ScopedProxyAutowireTests.class, "scopedAutowireTrue.xml");, +		assertTrue(Arrays.asList(bf.getBeanNamesForType(TestBean.class, true, false)).contains("scoped"));, +		assertFalse(bf.containsSingleton("scoped"));, +		assertTrue(Arrays.asList(bf.getBeanNamesForType(TestBean.class, true, false)).contains("scoped"));, +		assertFalse(bf.containsSingleton("scoped"));, +++ b/spring-aop/src/test/resources/org/springframework/aop/config/TopLevelAopTagTests-context.xml, +++ b/spring-aop/src/test/resources/org/springframework/aop/scope/ScopedProxyAutowireTests-scopedAutowireFalse.xml, +	<bean id="scoped" class="org.springframework.aop.scope.ScopedProxyAutowireTests$TestBean" scope="prototype" autowire-candidate="false">, +++ b/spring-aop/src/test/java/org/springframework/aop/scope/ScopedProxyAutowireTests.java, + * @author Chris Beams, +	private static final Resource SCOPED_AUTOWIRE_FALSE_CONTEXT =, +			qualifiedResource(ScopedProxyAutowireTests.class, "scopedAutowireFalse.xml");, +	private static final Resource SCOPED_AUTOWIRE_TRUE_CONTEXT =, +			qualifiedResource(ScopedProxyAutowireTests.class, "scopedAutowireTrue.xml");, +		assertTrue(Arrays.asList(bf.getBeanNamesForType(TestBean.class, true, false)).contains("scoped"));, +		assertFalse(bf.containsSingleton("scoped"));, +		assertTrue(Arrays.asList(bf.getBeanNamesForType(TestBean.class, true, false)).contains("scoped"));, +		assertFalse(bf.containsSingleton("scoped"));, +++ b/spring-aop/src/test/resources/org/springframework/aop/config/TopLevelAopTagTests-context.xml, +++ b/spring-aop/src/test/resources/org/springframework/aop/scope/ScopedProxyAutowireTests-scopedAutowireFalse.xml, +	<bean id="scoped" class="org.springframework.aop.scope.ScopedProxyAutowireTests$TestBean" scope="prototype" autowire-candidate="false">, +++ b/spring-aop/src/test/resources/org/springframework/aop/scope/ScopedProxyAutowireTests-scopedAutowireTrue.xml, +	<bean id="scoped" class="org.springframework.aop.scope.ScopedProxyAutowireTests$TestBean" scope="singleton" autowire-candidate="true">, +++ b/spring-aop/src/test/java/org/springframework/aop/scope/ScopedProxyAutowireTests.java, + * @author Chris Beams, +	private static final Resource SCOPED_AUTOWIRE_FALSE_CONTEXT =, +			qualifiedResource(ScopedProxyAutowireTests.class, "scopedAutowireFalse.xml");, +	private static final Resource SCOPED_AUTOWIRE_TRUE_CONTEXT =, +			qualifiedResource(ScopedProxyAutowireTests.class, "scopedAutowireTrue.xml");, +		assertTrue(Arrays.asList(bf.getBeanNamesForType(TestBean.class, true, false)).contains("scoped"));, +		assertFalse(bf.containsSingleton("scoped"));, +		assertTrue(Arrays.asList(bf.getBeanNamesForType(TestBean.class, true, false)).contains("scoped"));, +		assertFalse(bf.containsSingleton("scoped"));, +++ b/spring-aop/src/test/resources/org/springframework/aop/config/TopLevelAopTagTests-context.xml, +++ b/spring-aop/src/test/resources/org/springframework/aop/scope/ScopedProxyAutowireTests-scopedAutowireFalse.xml, +	<bean id="scoped" class="org.springframework.aop.scope.ScopedProxyAutowireTests$TestBean" scope="prototype" autowire-candidate="false">, +++ b/spring-aop/src/test/resources/org/springframework/aop/scope/ScopedProxyAutowireTests-scopedAutowireTrue.xml, +	<bean id="scoped" class="org.springframework.aop.scope.ScopedProxyAutowireTests$TestBean" scope="singleton" autowire-candidate="true">, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +						BeanDefinitionHolder dbd = mbd.getDecoratedDefinition();, +						boolean matchFound =, +								(allowEagerInit || !isFactoryBean ||, +										(dbd != null && !mbd.isLazyInit()) || containsSingleton(beanName)) &&, +								(includeNonSingletons ||, +										(dbd != null ? mbd.isSingleton() : isSingleton(beanName))) &&, +++ b/spring-aop/src/test/java/org/springframework/aop/scope/ScopedProxyAutowireTests.java, + * @author Chris Beams, +	private static final Resource SCOPED_AUTOWIRE_FALSE_CONTEXT =, +			qualifiedResource(ScopedProxyAutowireTests.class, "scopedAutowireFalse.xml");, +	private static final Resource SCOPED_AUTOWIRE_TRUE_CONTEXT =, +			qualifiedResource(ScopedProxyAutowireTests.class, "scopedAutowireTrue.xml");, +		assertTrue(Arrays.asList(bf.getBeanNamesForType(TestBean.class, true, false)).contains("scoped"));, +		assertFalse(bf.containsSingleton("scoped"));, +		assertTrue(Arrays.asList(bf.getBeanNamesForType(TestBean.class, true, false)).contains("scoped"));, +		assertFalse(bf.containsSingleton("scoped"));, +++ b/spring-aop/src/test/resources/org/springframework/aop/config/TopLevelAopTagTests-context.xml, +++ b/spring-aop/src/test/resources/org/springframework/aop/scope/ScopedProxyAutowireTests-scopedAutowireFalse.xml, +	<bean id="scoped" class="org.springframework.aop.scope.ScopedProxyAutowireTests$TestBean" scope="prototype" autowire-candidate="false">, +++ b/spring-aop/src/test/resources/org/springframework/aop/scope/ScopedProxyAutowireTests-scopedAutowireTrue.xml, +	<bean id="scoped" class="org.springframework.aop.scope.ScopedProxyAutowireTests$TestBean" scope="singleton" autowire-candidate="true">, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +						BeanDefinitionHolder dbd = mbd.getDecoratedDefinition();, +						boolean matchFound =, +								(allowEagerInit || !isFactoryBean ||, +										(dbd != null && !mbd.isLazyInit()) || containsSingleton(beanName)) &&, +								(includeNonSingletons ||, +										(dbd != null ? mbd.isSingleton() : isSingleton(beanName))) &&, +++ b/spring-context/src/test/java/org/springframework/context/annotation/Spr15042Tests.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at]