[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, + * Copyright 2002-2011 the original author or authors., +, + * <li>If the requested path has a file extension and if the {@link #setFavorPathExtension} property is, + * <li>If the request contains a parameter defining the extension and if the {@link #setFavorParameter}, + * Framework (JAF) is both {@linkplain #setUseJaf enabled} and present on the class path,, + * {@link #setIgnoreAcceptHeader ignoreAcceptHeader} is {@code false}, the request {@code Accept} header is, +	 * Indicate whether the extension of the request path should be used to determine the requested media type,, +	 * Indicate whether a request parameter should be used to determine the requested media type,, +	 * Set the parameter name that can be used to determine the requested media type if the {@link, +	 * #setFavorParameter} property is {@code true}. The default parameter name is {@code format}., +	 * Indicate whether the HTTP {@code Accept} header should be ignored. Default is {@code false}., +	 * <p>If set to {@code true}, this view resolver will only refer to the file extension and/or, +	 * parameter, as indicated by the {@link #setFavorPathExtension favorPathExtension} and, +	 * {@link #setFavorParameter favorParameter} properties., +	 * Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}, +	 * status code should be returned if no suitable view can be found., +	 * {@link #resolveViewName(String, Locale)} when an acceptable view cannot be found., +	 * This will allow for view resolvers chaining. When this property is set to {@code true},, +	 * {@link #resolveViewName(String, Locale)} will respond with a view that sets the, +	 * response status to {@code 406 Not Acceptable} instead., +	 * Set the mapping from file extensions to media types., +	 * Set the default views to use when a more specific view can not be obtained, +	 * Set the default content type., +	 * Indicate whether to use the Java Activation Framework to map from file extensions to media types., +	public View resolveViewName(String viewName, Locale locale) throws Exception {, +		RequestAttributes attrs = RequestContextHolder.getRequestAttributes();, +		Assert.isInstanceOf(ServletRequestAttributes.class, attrs);, +		List<MediaType> requestedMediaTypes = getMediaTypes(((ServletRequestAttributes) attrs).getRequest());, +		if (requestedMediaTypes != null) {, +			List<View> candidateViews = getCandidateViews(viewName, locale, requestedMediaTypes);, +			View bestView = getBestView(candidateViews, requestedMediaTypes);, +			if (bestView != null) {, +				return bestView;, +			}, +		}, +		if (this.useNotAcceptableStatusCode) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("No acceptable view found; returning 406 (Not Acceptable) status code");, +			}, +			return NOT_ACCEPTABLE_VIEW;, +		}, +		else {, +			if (logger.isDebugEnabled()) {, +				logger.debug("No acceptable view found; returning null");, +			}, +			return null;, +		}, +	}, +, +	 * #setFavorPathExtension favorPathExtension} property is <code>true</code>. If the property is, +	 * <code>false</code>, or when a media type cannot be determined from the request path,, +	 * this method will inspect the {@code Accept} header of the request., +	 * <p>This method can be overridden to provide a different algorithm., +				try {, +					for (MediaType acceptable : acceptableMediaTypes) {, +						for (MediaType producible : producibleMediaTypes) {, +							if (acceptable.isCompatibleWith(producible)) {, +								compatibleMediaTypes.add(getMostSpecificMediaType(acceptable, producible));, +				catch (IllegalArgumentException ex) {, +					logger.debug("Could not parse accept header [" + acceptHeader + "]: " + ex.getMessage());, +					return null;, +				}, +			}, +		Set<MediaType> mediaTypes = (Set<MediaType>), +				request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);, +		for (Entry<String, MediaType> entry : this.mediaTypes.entrySet()) {, +					logger.debug("Returning [" + bestView + "] based on requested media type '" +, +							bestRequestedMediaType + "'");, +			return (StringUtils.hasText(mediaType) ? MediaType.parseMediaType(mediaType) : null);, +		public void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, + * Copyright 2002-2011 the original author or authors., +, + * <li>If the requested path has a file extension and if the {@link #setFavorPathExtension} property is, + * <li>If the request contains a parameter defining the extension and if the {@link #setFavorParameter}, + * Framework (JAF) is both {@linkplain #setUseJaf enabled} and present on the class path,, + * {@link #setIgnoreAcceptHeader ignoreAcceptHeader} is {@code false}, the request {@code Accept} header is, +	 * Indicate whether the extension of the request path should be used to determine the requested media type,, +	 * Indicate whether a request parameter should be used to determine the requested media type,, +	 * Set the parameter name that can be used to determine the requested media type if the {@link, +	 * #setFavorParameter} property is {@code true}. The default parameter name is {@code format}., +	 * Indicate whether the HTTP {@code Accept} header should be ignored. Default is {@code false}., +	 * <p>If set to {@code true}, this view resolver will only refer to the file extension and/or, +	 * parameter, as indicated by the {@link #setFavorPathExtension favorPathExtension} and, +	 * {@link #setFavorParameter favorParameter} properties., +	 * Indicate whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable}, +	 * status code should be returned if no suitable view can be found., +	 * {@link #resolveViewName(String, Locale)} when an acceptable view cannot be found., +	 * This will allow for view resolvers chaining. When this property is set to {@code true},, +	 * {@link #resolveViewName(String, Locale)} will respond with a view that sets the, +	 * response status to {@code 406 Not Acceptable} instead., +	 * Set the mapping from file extensions to media types., +	 * Set the default views to use when a more specific view can not be obtained, +	 * Set the default content type., +	 * Indicate whether to use the Java Activation Framework to map from file extensions to media types., +	public View resolveViewName(String viewName, Locale locale) throws Exception {, +		RequestAttributes attrs = RequestContextHolder.getRequestAttributes();, +		Assert.isInstanceOf(ServletRequestAttributes.class, attrs);, +		List<MediaType> requestedMediaTypes = getMediaTypes(((ServletRequestAttributes) attrs).getRequest());]