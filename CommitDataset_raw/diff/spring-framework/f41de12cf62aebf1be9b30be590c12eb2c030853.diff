[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +					annotations[i] = synthesizeAnnotation(annotations[i], annotatedElement);, +				return annotations;, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +					annotations[i] = synthesizeAnnotation(annotations[i], annotatedElement);, +				return annotations;, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java, +import java.util.List;, +import static java.util.stream.Collectors.*;, +import static org.hamcrest.Matchers.*;, +	@Test, +	public void findAnnotationAttributesOnClassWithAttributeAliasInComposedAnnotationAndNestedAnnotationsInTargetAnnotation() {, +		Class<?> element = TestComponentScanClass.class;, +		AnnotationAttributes attributes = findAnnotationAttributes(element, ComponentScan.class);, +		assertNotNull("Should find @ComponentScan on " + element, attributes);, +		assertArrayEquals("basePackages for " + element, new String[] { "com.example.app.test" },, +			attributes.getStringArray("basePackages"));, +, +		Filter[] excludeFilters = attributes.getAnnotationArray("excludeFilters", Filter.class);, +		assertNotNull(excludeFilters);, +, +		List<String> patterns = stream(excludeFilters).map(Filter::pattern).collect(toList());, +		assertEquals(asList("*Test", "*Tests"), patterns);, +	}, +, +		return stream(classes).map(Class::getName).collect(toSet());, +	/**, +	 * Mock of {@code org.springframework.context.annotation.ComponentScan}, +	 */, +	@Retention(RetentionPolicy.RUNTIME), +	@interface ComponentScan {, +, +		String[] basePackages() default {};, +, +		Filter[] excludeFilters() default {};, +	}, +, +	@Retention(RetentionPolicy.RUNTIME), +	@Target({}), +	@interface Filter {, +, +		String pattern();, +	}, +, +	@ComponentScan(excludeFilters = { @Filter(pattern = "*Test"), @Filter(pattern = "*Tests") }), +	@Retention(RetentionPolicy.RUNTIME), +	@interface TestComponentScan {, +, +		@AliasFor(attribute = "basePackages", annotation = ComponentScan.class), +		String[] packages();, +	}, +, +, +	@TestComponentScan(packages = "com.example.app.test"), +	static class TestComponentScanClass {, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +					annotations[i] = synthesizeAnnotation(annotations[i], annotatedElement);, +				return annotations;, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java, +import java.util.List;, +import static java.util.stream.Collectors.*;, +import static org.hamcrest.Matchers.*;, +	@Test, +	public void findAnnotationAttributesOnClassWithAttributeAliasInComposedAnnotationAndNestedAnnotationsInTargetAnnotation() {, +		Class<?> element = TestComponentScanClass.class;, +		AnnotationAttributes attributes = findAnnotationAttributes(element, ComponentScan.class);, +		assertNotNull("Should find @ComponentScan on " + element, attributes);, +		assertArrayEquals("basePackages for " + element, new String[] { "com.example.app.test" },, +			attributes.getStringArray("basePackages"));, +, +		Filter[] excludeFilters = attributes.getAnnotationArray("excludeFilters", Filter.class);, +		assertNotNull(excludeFilters);, +, +		List<String> patterns = stream(excludeFilters).map(Filter::pattern).collect(toList());, +		assertEquals(asList("*Test", "*Tests"), patterns);, +	}, +, +		return stream(classes).map(Class::getName).collect(toSet());, +	/**, +	 * Mock of {@code org.springframework.context.annotation.ComponentScan}, +	 */, +	@Retention(RetentionPolicy.RUNTIME), +	@interface ComponentScan {, +, +		String[] basePackages() default {};, +, +		Filter[] excludeFilters() default {};, +	}, +, +	@Retention(RetentionPolicy.RUNTIME), +	@Target({}), +	@interface Filter {, +, +		String pattern();, +	}, +, +	@ComponentScan(excludeFilters = { @Filter(pattern = "*Test"), @Filter(pattern = "*Tests") }), +	@Retention(RetentionPolicy.RUNTIME)]