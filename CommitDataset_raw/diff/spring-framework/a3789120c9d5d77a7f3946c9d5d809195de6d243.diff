[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import org.springframework.core.io.support.DefaultPropertySourceFactory;, +import org.springframework.core.io.support.PropertySourceFactory;, +	private static final PropertySourceFactory DEFAULT_PROPERTY_SOURCE_FACTORY = new DefaultPropertySourceFactory();, +, +		if (!StringUtils.hasLength(name)) {, +			name = null;, +		}, +		if (!StringUtils.hasLength(encoding)) {, +			encoding = null;, +		}, +		boolean ignoreResourceNotFound = propertySource.getBoolean("ignoreResourceNotFound");, +, +		Class<? extends PropertySourceFactory> factoryClass = propertySource.getClass("factory");, +		PropertySourceFactory factory = (factoryClass == PropertySourceFactory.class ?, +				DEFAULT_PROPERTY_SOURCE_FACTORY : BeanUtils.instantiate(factoryClass));, +, +				addPropertySource(factory.createPropertySource(name, new EncodedResource(resource, encoding)));, +	private void addPropertySource(PropertySource<?> propertySource) {, +			PropertySource<?> newSource = (propertySource instanceof ResourcePropertySource ?, +					((ResourcePropertySource) propertySource).withResourceName() : propertySource);, +				((CompositePropertySource) existing).addFirstPropertySource(newSource);, +				composite.addPropertySource(newSource);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import org.springframework.core.io.support.DefaultPropertySourceFactory;, +import org.springframework.core.io.support.PropertySourceFactory;, +	private static final PropertySourceFactory DEFAULT_PROPERTY_SOURCE_FACTORY = new DefaultPropertySourceFactory();, +, +		if (!StringUtils.hasLength(name)) {, +			name = null;, +		}, +		if (!StringUtils.hasLength(encoding)) {, +			encoding = null;, +		}, +		boolean ignoreResourceNotFound = propertySource.getBoolean("ignoreResourceNotFound");, +, +		Class<? extends PropertySourceFactory> factoryClass = propertySource.getClass("factory");, +		PropertySourceFactory factory = (factoryClass == PropertySourceFactory.class ?, +				DEFAULT_PROPERTY_SOURCE_FACTORY : BeanUtils.instantiate(factoryClass));, +, +				addPropertySource(factory.createPropertySource(name, new EncodedResource(resource, encoding)));, +	private void addPropertySource(PropertySource<?> propertySource) {, +			PropertySource<?> newSource = (propertySource instanceof ResourcePropertySource ?, +					((ResourcePropertySource) propertySource).withResourceName() : propertySource);, +				((CompositePropertySource) existing).addFirstPropertySource(newSource);, +				composite.addPropertySource(newSource);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/PropertySource.java, +import org.springframework.core.io.support.PropertySourceFactory;, +, + * @author Juergen Hoeller, +	/**, +	 * A specific character encoding for the given resources, e.g. "UTF-8"., +	 * @since 4.3, +	 */, +	String encoding() default "";, +, +	/**, +	 * Specify a custom {@link PropertySourceFactory}, if any., +	 * <p>By default, a default factory for standard resource files will be used., +	 * @since 4.3, +	 * @see org.springframework.core.io.support.DefaultPropertySourceFactory, +	 * @see org.springframework.core.io.support.ResourcePropertySource, +	 */, +	Class<? extends PropertySourceFactory> factory() default PropertySourceFactory.class;, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import org.springframework.core.io.support.DefaultPropertySourceFactory;, +import org.springframework.core.io.support.PropertySourceFactory;, +	private static final PropertySourceFactory DEFAULT_PROPERTY_SOURCE_FACTORY = new DefaultPropertySourceFactory();, +, +		if (!StringUtils.hasLength(name)) {, +			name = null;, +		}, +		if (!StringUtils.hasLength(encoding)) {, +			encoding = null;, +		}, +		boolean ignoreResourceNotFound = propertySource.getBoolean("ignoreResourceNotFound");, +, +		Class<? extends PropertySourceFactory> factoryClass = propertySource.getClass("factory");, +		PropertySourceFactory factory = (factoryClass == PropertySourceFactory.class ?, +				DEFAULT_PROPERTY_SOURCE_FACTORY : BeanUtils.instantiate(factoryClass));, +, +				addPropertySource(factory.createPropertySource(name, new EncodedResource(resource, encoding)));, +	private void addPropertySource(PropertySource<?> propertySource) {, +			PropertySource<?> newSource = (propertySource instanceof ResourcePropertySource ?, +					((ResourcePropertySource) propertySource).withResourceName() : propertySource);, +				((CompositePropertySource) existing).addFirstPropertySource(newSource);, +				composite.addPropertySource(newSource);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/PropertySource.java, +import org.springframework.core.io.support.PropertySourceFactory;, +, + * @author Juergen Hoeller, +	/**, +	 * A specific character encoding for the given resources, e.g. "UTF-8"., +	 * @since 4.3, +	 */, +	String encoding() default "";, +, +	/**, +	 * Specify a custom {@link PropertySourceFactory}, if any.]