[+++ /dev/null, +++ /dev/null, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +import java.lang.reflect.Method;, +import org.springframework.core.OrderComparator;, +				Arrays.sort((Object[]) result, adaptDependencyComparator(matchingBeans));, +				Collections.sort((List<?>) result, adaptDependencyComparator(matchingBeans));, +	private Comparator<Object> adaptDependencyComparator(Map<String, Object> matchingBeans) {, +		if (this.dependencyComparator instanceof OrderComparator) {, +			return ((OrderComparator) this.dependencyComparator).withSourceProvider(, +					createFactoryAwareOrderSourceProvider(matchingBeans));, +			return this.dependencyComparator;, +	private FactoryAwareOrderSourceProvider createFactoryAwareOrderSourceProvider(Map<String, Object> beans) {, +		return new FactoryAwareOrderSourceProvider(instancesToBeanNames);, +	 * <p>The default implementation delegates to the specified, +	 * {@link #setDependencyComparator dependency comparator}, checking its, +	 * {@link OrderComparator#getPriority method} if it is an extension of, +	 * Spring's common {@link OrderComparator} - typically, an, +	 * {@link org.springframework.core.annotation.AnnotationAwareOrderComparator}., +	 * If no such comparator is present, this implementation returns {@code null}., +	 * @param beanInstance the bean instance to check (can be {@code null}), +		if (this.dependencyComparator instanceof OrderComparator) {, +			return ((OrderComparator) this.dependencyComparator).getPriority(beanInstance);, +, +	/**, +	 * An {@link org.springframework.core.OrderComparator.OrderSourceProvider} implementation, +	 * that is aware of the bean metadata of the instances to sort., +	 * <p>Lookup for the method factory of an instance to sort, if any, and let the, +	 * comparator retrieve the {@link org.springframework.core.annotation.Order}, +	 * value defined on it. This essentially allows for the following construct:, +	 */, +	private class FactoryAwareOrderSourceProvider implements OrderComparator.OrderSourceProvider {, +, +		private final Map<Object, String> instancesToBeanNames;, +, +		public FactoryAwareOrderSourceProvider(Map<Object, String> instancesToBeanNames) {, +			this.instancesToBeanNames = instancesToBeanNames;, +		}, +, +		@Override, +		public Object getOrderSource(Object obj) {, +			return getFactoryMethod(this.instancesToBeanNames.get(obj));, +		}, +, +		private Method getFactoryMethod(String beanName) {, +			if (beanName != null && containsBeanDefinition(beanName)) {, +				BeanDefinition bd = getMergedBeanDefinition(beanName);, +				if (bd instanceof RootBeanDefinition) {, +					return ((RootBeanDefinition) bd).getResolvedFactoryMethod();, +				}, +			}, +			return null;, +		}, +	}, +, +++ /dev/null, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +import java.lang.reflect.Method;, +import org.springframework.core.OrderComparator;, +				Arrays.sort((Object[]) result, adaptDependencyComparator(matchingBeans));, +				Collections.sort((List<?>) result, adaptDependencyComparator(matchingBeans));, +	private Comparator<Object> adaptDependencyComparator(Map<String, Object> matchingBeans) {, +		if (this.dependencyComparator instanceof OrderComparator) {, +			return ((OrderComparator) this.dependencyComparator).withSourceProvider(, +					createFactoryAwareOrderSourceProvider(matchingBeans));, +			return this.dependencyComparator;, +	private FactoryAwareOrderSourceProvider createFactoryAwareOrderSourceProvider(Map<String, Object> beans) {, +		return new FactoryAwareOrderSourceProvider(instancesToBeanNames);, +	 * <p>The default implementation delegates to the specified, +	 * {@link #setDependencyComparator dependency comparator}, checking its, +	 * {@link OrderComparator#getPriority method} if it is an extension of, +	 * Spring's common {@link OrderComparator} - typically, an, +	 * {@link org.springframework.core.annotation.AnnotationAwareOrderComparator}., +	 * If no such comparator is present, this implementation returns {@code null}., +	 * @param beanInstance the bean instance to check (can be {@code null}), +		if (this.dependencyComparator instanceof OrderComparator) {, +			return ((OrderComparator) this.dependencyComparator).getPriority(beanInstance);, +, +	/**, +	 * An {@link org.springframework.core.OrderComparator.OrderSourceProvider} implementation, +	 * that is aware of the bean metadata of the instances to sort., +	 * <p>Lookup for the method factory of an instance to sort, if any, and let the, +	 * comparator retrieve the {@link org.springframework.core.annotation.Order}, +	 * value defined on it. This essentially allows for the following construct:, +	 */, +	private class FactoryAwareOrderSourceProvider implements OrderComparator.OrderSourceProvider {, +, +		private final Map<Object, String> instancesToBeanNames;, +, +		public FactoryAwareOrderSourceProvider(Map<Object, String> instancesToBeanNames) {, +			this.instancesToBeanNames = instancesToBeanNames;, +		}, +, +		@Override, +		public Object getOrderSource(Object obj) {, +			return getFactoryMethod(this.instancesToBeanNames.get(obj));, +		}, +, +		private Method getFactoryMethod(String beanName) {, +			if (beanName != null && containsBeanDefinition(beanName)) {]