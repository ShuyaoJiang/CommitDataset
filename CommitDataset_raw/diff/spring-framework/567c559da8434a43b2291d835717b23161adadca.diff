[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/reactive/AbstractNamedValueMethodArgumentResolver.java, +/*, + * Copyright 2002-2019 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.messaging.handler.annotation.support.reactive;, +, +import java.util.Map;, +import java.util.concurrent.ConcurrentHashMap;, +, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.config.BeanExpressionContext;, +import org.springframework.beans.factory.config.BeanExpressionResolver;, +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +import org.springframework.core.MethodParameter;, +import org.springframework.core.convert.ConversionService;, +import org.springframework.core.convert.TypeDescriptor;, +import org.springframework.lang.Nullable;, +import org.springframework.messaging.Message;, +import org.springframework.messaging.handler.annotation.ValueConstants;, +import org.springframework.messaging.handler.invocation.reactive.SyncHandlerMethodArgumentResolver;, +import org.springframework.util.ClassUtils;, +, +/**, + * Abstract base class to resolve method arguments from a named value, e.g., + * message headers or destination variables. Named values could have one or more, + * of a name, a required flag, and a default value., + *, + * <p>Subclasses only need to define specific steps such as how to obtain named, + * value details from a method parameter, how to resolve to argument values, or, + * how to handle missing values., + *, + *  <p>A default value string can contain ${...} placeholders and Spring, + * Expression Language {@code #{...}} expressions which will be resolved if a, + * {@link ConfigurableBeanFactory} is supplied to the class constructor., + *, + * <p>A {@link ConversionService} is used to to convert resolved String argument, + * value to the expected target method parameter type., + *, + * @author Rossen Stoyanchev, + * @since 5.2, + */, +public abstract class AbstractNamedValueMethodArgumentResolver implements SyncHandlerMethodArgumentResolver {, +, +	private final ConversionService conversionService;, +, +	@Nullable, +	private final ConfigurableBeanFactory configurableBeanFactory;, +, +	@Nullable, +	private final BeanExpressionContext expressionContext;, +, +	private final Map<MethodParameter, NamedValueInfo> namedValueInfoCache = new ConcurrentHashMap<>(256);, +, +, +	/**, +	 * Constructor with a {@link ConversionService} and a {@link BeanFactory}., +	 * @param conversionService conversion service for converting String values, +	 * to the target method parameter type, +	 * @param beanFactory a bean factory for resolving {@code ${...}}, +	 * placeholders and {@code #{...}} SpEL expressions in default values, +	 */, +	protected AbstractNamedValueMethodArgumentResolver(ConversionService conversionService,, +			@Nullable ConfigurableBeanFactory beanFactory) {, +, +		this.conversionService = conversionService;, +		this.configurableBeanFactory = beanFactory;, +		this.expressionContext = (beanFactory != null ? new BeanExpressionContext(beanFactory, null) : null);, +	}, +, +, +	@Override, +	public Object resolveArgumentValue(MethodParameter parameter, Message<?> message) {, +, +		NamedValueInfo namedValueInfo = getNamedValueInfo(parameter);, +		MethodParameter nestedParameter = parameter.nestedIfOptional();, +, +		Object resolvedName = resolveEmbeddedValuesAndExpressions(namedValueInfo.name);, +		if (resolvedName == null) {, +			throw new IllegalArgumentException(, +					"Specified name must not resolve to null: [" + namedValueInfo.name + "]");, +		}, +, +		Object arg = resolveArgumentInternal(nestedParameter, message, resolvedName.toString());, +		if (arg == null) {, +			if (namedValueInfo.defaultValue != null) {, +				arg = resolveEmbeddedValuesAndExpressions(namedValueInfo.defaultValue);, +			}]