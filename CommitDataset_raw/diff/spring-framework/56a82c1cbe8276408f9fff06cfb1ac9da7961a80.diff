[+++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelFactory.java, +import java.util.HashSet;, +import java.util.Set;, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private static final Log logger = LogFactory.getLog(ModelFactory.class);, +, +	private final List<ModelMethod> modelMethods = new ArrayList<ModelMethod>();, +	 * @param invocableMethods the {@code @ModelAttribute} methods to invoke, +	public ModelFactory(List<InvocableHandlerMethod> invocableMethods, WebDataBinderFactory dataBinderFactory,, +		if (invocableMethods != null) {, +			for (InvocableHandlerMethod method : invocableMethods) {, +				this.modelMethods.add(new ModelMethod(method));, +			}, +		}, +		while (!this.modelMethods.isEmpty()) {, +			InvocableHandlerMethod attrMethod = getNextModelMethod(mavContainer).getHandlerMethod();, +	private ModelMethod getNextModelMethod(ModelAndViewContainer mavContainer) {, +		for (ModelMethod modelMethod : this.modelMethods) {, +			if (modelMethod.checkDependencies(mavContainer)) {, +				if (logger.isTraceEnabled()) {, +					logger.trace("Selected @ModelAttribute method " + modelMethod);, +				}, +				this.modelMethods.remove(modelMethod);, +				return modelMethod;, +			}, +		}, +		ModelMethod modelMethod = this.modelMethods.get(0);, +		if (logger.isTraceEnabled()) {, +			logger.trace("Selected @ModelAttribute method (not present: " +, +					modelMethod.getUnresolvedDependencies(mavContainer)+ ") " + modelMethod);, +		}, +		this.modelMethods.remove(modelMethod);, +		return modelMethod;, +	}, +, +, +	private static class ModelMethod {, +, +		private final InvocableHandlerMethod handlerMethod;, +, +		private final Set<String> dependencies = new HashSet<String>();, +, +, +		private ModelMethod(InvocableHandlerMethod handlerMethod) {, +			this.handlerMethod = handlerMethod;, +			for (MethodParameter parameter : handlerMethod.getMethodParameters()) {, +				if (parameter.hasParameterAnnotation(ModelAttribute.class)) {, +					this.dependencies.add(getNameForParameter(parameter));, +				}, +			}, +		}, +, +		public InvocableHandlerMethod getHandlerMethod() {, +			return this.handlerMethod;, +		}, +, +		public boolean checkDependencies(ModelAndViewContainer mavContainer) {, +			for (String name : this.dependencies) {, +				if (!mavContainer.containsAttribute(name)) {, +					return false;, +				}, +			}, +			return true;, +		}, +, +		public List<String> getUnresolvedDependencies(ModelAndViewContainer mavContainer) {, +			List<String> result = new ArrayList<String>(this.dependencies.size());, +			for (String name : this.dependencies) {, +				if (!mavContainer.containsAttribute(name)) {, +					result.add(name);, +				}, +			}, +			return result;, +		}, +, +		@Override, +		public String toString() {, +			return this.handlerMethod.getMethod().toGenericString();, +		}, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelFactory.java, +import java.util.HashSet;, +import java.util.Set;, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	private static final Log logger = LogFactory.getLog(ModelFactory.class);, +, +	private final List<ModelMethod> modelMethods = new ArrayList<ModelMethod>();, +	 * @param invocableMethods the {@code @ModelAttribute} methods to invoke, +	public ModelFactory(List<InvocableHandlerMethod> invocableMethods, WebDataBinderFactory dataBinderFactory,, +		if (invocableMethods != null) {, +			for (InvocableHandlerMethod method : invocableMethods) {, +				this.modelMethods.add(new ModelMethod(method));, +			}, +		}, +		while (!this.modelMethods.isEmpty()) {, +			InvocableHandlerMethod attrMethod = getNextModelMethod(mavContainer).getHandlerMethod();, +	private ModelMethod getNextModelMethod(ModelAndViewContainer mavContainer) {]