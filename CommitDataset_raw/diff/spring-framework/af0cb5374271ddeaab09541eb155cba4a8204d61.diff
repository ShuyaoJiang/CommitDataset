[+++ b/spring-web/src/main/java/org/springframework/http/codec/xml/Jaxb2XmlDecoder.java, +	@Override, +	public Mono<Object> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType,, +			@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {, +		return decode(inputStream, elementType, mimeType, hints).singleOrEmpty();, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/xml/Jaxb2XmlDecoder.java, +	@Override, +	public Mono<Object> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType,, +			@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {, +		return decode(inputStream, elementType, mimeType, hints).singleOrEmpty();, +	}, +, +++ b/spring-web/src/test/java/org/springframework/http/codec/xml/Jaxb2XmlDecoderTests.java, +import reactor.core.publisher.Mono;, +		Mono<Object> output = this.decoder.decodeToMono(source, ResolvableType.forClass(Pojo.class),, +		Mono<Object> output = this.decoder.decodeToMono(source, ResolvableType.forClass(TypePojo.class),, +++ b/spring-web/src/main/java/org/springframework/http/codec/xml/Jaxb2XmlDecoder.java, +	@Override, +	public Mono<Object> decodeToMono(Publisher<DataBuffer> inputStream, ResolvableType elementType,, +			@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {, +		return decode(inputStream, elementType, mimeType, hints).singleOrEmpty();, +	}, +, +++ b/spring-web/src/test/java/org/springframework/http/codec/xml/Jaxb2XmlDecoderTests.java, +import reactor.core.publisher.Mono;, +		Mono<Object> output = this.decoder.decodeToMono(source, ResolvableType.forClass(Pojo.class),, +		Mono<Object> output = this.decoder.decodeToMono(source, ResolvableType.forClass(TypePojo.class),, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingMessageConversionIntegrationTests.java, +	@Test  // SPR-16759, +	public void personTransformWithMonoAndXml() throws Exception {, +		assertEquals(new Person("ROBERT"),, +				performPost("/person-transform/mono", MediaType.APPLICATION_XML, new Person("Robert"),, +						MediaType.APPLICATION_XML, Person.class).getBody());, +	}, +]