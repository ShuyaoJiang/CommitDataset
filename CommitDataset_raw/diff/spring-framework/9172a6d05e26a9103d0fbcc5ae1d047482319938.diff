[+++ b/spring-context-support/src/main/java/org/springframework/cache/guava/GuavaCache.java, + * Copyright 2002-2015 the original author or authors., +import com.google.common.cache.LoadingCache;, +import com.google.common.util.concurrent.UncheckedExecutionException;, +, +		if (this.cache instanceof LoadingCache) {, +			try {, +				Object value = ((LoadingCache<Object, Object>) this.cache).get(key);, +			catch (ExecutionException ex) {, +				throw new UncheckedExecutionException(ex.getMessage(), ex);, +			}, +		}, +		return toWrapper(this.cache.getIfPresent(key));, +	}, +++ b/spring-context-support/src/main/java/org/springframework/cache/guava/GuavaCache.java, + * Copyright 2002-2015 the original author or authors., +import com.google.common.cache.LoadingCache;, +import com.google.common.util.concurrent.UncheckedExecutionException;, +, +		if (this.cache instanceof LoadingCache) {, +			try {, +				Object value = ((LoadingCache<Object, Object>) this.cache).get(key);, +			catch (ExecutionException ex) {, +				throw new UncheckedExecutionException(ex.getMessage(), ex);, +			}, +		}, +		return toWrapper(this.cache.getIfPresent(key));, +	}, +++ b/spring-context-support/src/test/java/org/springframework/cache/guava/GuavaCacheManagerTests.java, + * Copyright 2002-2015 the original author or authors., +import com.google.common.util.concurrent.UncheckedExecutionException;, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +	@Rule, +	public final ExpectedException thrown = ExpectedException.none();, +, +	@Test, +	public void cacheLoaderUseLoadingCache() {, +		GuavaCacheManager cm = new GuavaCacheManager("c1");, +		cm.setCacheLoader(new CacheLoader<Object, Object>() {, +			@Override, +			public Object load(Object key) throws Exception {, +				if ("ping".equals(key)) {, +					return "pong";, +				}, +				throw new IllegalArgumentException("I only know ping");, +			}, +		});, +		Cache cache1 = cm.getCache("c1");, +		Cache.ValueWrapper value = cache1.get("ping");, +		assertNotNull(value);, +		assertEquals("pong", value.get());, +, +		thrown.expect(UncheckedExecutionException.class);, +		thrown.expectMessage("I only know ping");, +		assertNull(cache1.get("foo"));, +	}, +]