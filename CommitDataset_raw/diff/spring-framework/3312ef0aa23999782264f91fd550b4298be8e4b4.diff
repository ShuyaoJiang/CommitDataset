[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java, +import java.util.concurrent.atomic.AtomicLong;, +import java.util.concurrent.atomic.AtomicReference;, +	private static abstract class AbstractEmitterSubscriber implements Subscriber<Object>, Runnable {, +		private final AtomicReference<Object> queue = new AtomicReference<Object>();, +		private final AtomicLong executing = new AtomicLong();, +		private volatile boolean terminated;, +		, +		private Throwable error;, +			this.queue.lazySet(element);, +			error = ex;, +			terminated = true;, +			terminated = true;, +			if (this.executing.getAndIncrement() == 0) {, +				schedule();, +			}, +		}, +		, +		private void schedule() {, +				this.taskExecutor.execute(this);, +					this.executing.decrementAndGet();, +					queue.lazySet(null);, +		@Override, +		public void run() {, +			if (done) {, +				queue.lazySet(null);, +				return;, +				, +			boolean d = terminated;, +			Object o = queue.get();, +			if (o != null) {, +				queue.lazySet(null);, +					send(o);, +					return;, +			, +			if (d) {, +				this.done = true;, +				Throwable ex = error;, +				error = null;, +				if (ex != null) {, +					if (logger.isDebugEnabled()) {, +						logger.debug("Publisher error for " + this.emitter, ex);, +					}, +					emitter.completeWithError(ex);, +				} else {, +					if (logger.isDebugEnabled()) {, +						logger.debug("Publishing completed for " + this.emitter);, +					}, +					this.emitter.complete();, +				}, +				return;, +			}, +			, +			if (executing.decrementAndGet() != 0) {, +				schedule();, +			}]