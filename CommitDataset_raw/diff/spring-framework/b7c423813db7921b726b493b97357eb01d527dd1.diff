[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataContext.java, + * Class to manage context meta-data used for the configuration, + * and execution of a stored procedure call., +	// Should we access call parameter meta-data info or not, +	// The provider of call meta-data, +	 * Specify whether call parameter meta-data should be accessed., +	 * Check whether call parameter meta-data should be accessed., +	 * Initialize this class with meta-data from the database., +	 * @param dataSource the DataSource used to retrieve meta-data, +	 * Process the list of parameters provided, and if procedure column meta-data is used,, +	 * the parameters will be matched against the meta-data information and any missing, +	 * Reconcile the provided parameters with available meta-data and add new ones where appropriate., +		// Get the names of the meta-data parameters, +			if (!meta.isReturnParameter()) {, +			if (declaredParams.containsKey(paramNameToCheck) || (meta.isReturnParameter() && returnDeclared)) {, +				if (meta.isReturnParameter()) {, +				if (meta.isReturnParameter()) {, +					// DatabaseMetaData.procedureColumnReturn or possibly procedureColumnResult, +							logger.debug("Bypassing meta-data return parameter for '" + paramName + "'");, +							logger.debug("Added meta-data return parameter for '" + returnNameToUse + "'");, +							logger.debug("Added meta-data out parameter for '" + paramNameToUse + "'");, +							logger.debug("Added meta-data in-out parameter for '" + paramNameToUse + "'");, +						// DatabaseMetaData.procedureColumnIn or possibly procedureColumnUnknown, +								logger.debug("Added meta-data in parameter for '" + paramNameToUse + "'");, +		// since the database meta-data is not necessarily providing case sensitive parameter names., +	 * Build the call string based on configuration and meta-data information., +			if (!parameter.isResultsParameter()) {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataContext.java, + * Class to manage context meta-data used for the configuration, + * and execution of a stored procedure call., +	// Should we access call parameter meta-data info or not, +	// The provider of call meta-data, +	 * Specify whether call parameter meta-data should be accessed., +	 * Check whether call parameter meta-data should be accessed., +	 * Initialize this class with meta-data from the database., +	 * @param dataSource the DataSource used to retrieve meta-data, +	 * Process the list of parameters provided, and if procedure column meta-data is used,, +	 * the parameters will be matched against the meta-data information and any missing, +	 * Reconcile the provided parameters with available meta-data and add new ones where appropriate., +		// Get the names of the meta-data parameters, +			if (!meta.isReturnParameter()) {, +			if (declaredParams.containsKey(paramNameToCheck) || (meta.isReturnParameter() && returnDeclared)) {, +				if (meta.isReturnParameter()) {, +				if (meta.isReturnParameter()) {, +					// DatabaseMetaData.procedureColumnReturn or possibly procedureColumnResult, +							logger.debug("Bypassing meta-data return parameter for '" + paramName + "'");, +							logger.debug("Added meta-data return parameter for '" + returnNameToUse + "'");, +							logger.debug("Added meta-data out parameter for '" + paramNameToUse + "'");, +							logger.debug("Added meta-data in-out parameter for '" + paramNameToUse + "'");, +						// DatabaseMetaData.procedureColumnIn or possibly procedureColumnUnknown, +								logger.debug("Added meta-data in parameter for '" + paramNameToUse + "'");, +		// since the database meta-data is not necessarily providing case sensitive parameter names., +	 * Build the call string based on configuration and meta-data information., +			if (!parameter.isResultsParameter()) {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallParameterMetaData.java, + * Copyright 2002-2018 the original author or authors., +import java.sql.DatabaseMetaData;, +, + * Holder of meta-data for a specific parameter that is used for call processing., + * @author Juergen Hoeller, +	 * Determine whether the declared parameter qualifies as a 'return' parameter, +	 * for our purposes: type {@link DatabaseMetaData#procedureColumnReturn} or, +	 * {@link DatabaseMetaData#procedureColumnResult}., +	 * @since 4.3.15, +	 */, +	public boolean isReturnParameter() {, +		return (this.parameterType == DatabaseMetaData.procedureColumnReturn ||, +				this.parameterType == DatabaseMetaData.procedureColumnResult);, +	}, +, +	/**]