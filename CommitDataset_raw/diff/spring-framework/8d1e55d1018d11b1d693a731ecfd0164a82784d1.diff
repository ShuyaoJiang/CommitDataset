[+++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java, + * <p>This class is also being used by Spring's MVC configuration namespace, in case of the, + * {@code javax.validation} API being present but no explicit Validator having been configured., + *, +	public void setMappingLocations(Resource... mappingLocations) {, +++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java, + * <p>This class is also being used by Spring's MVC configuration namespace, in case of the, + * {@code javax.validation} API being present but no explicit Validator having been configured., + *, +	public void setMappingLocations(Resource... mappingLocations) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, + * Copyright 2002-2013 the original author or authors., +import org.w3c.dom.Element;, +, +	private static final boolean javaxValidationPresent = ClassUtils.isPresent(, +, +, +		if (element.hasAttribute("enable-matrix-variables")) {, +			Boolean enableMatrixVariables = Boolean.valueOf(element.getAttribute("enable-matrix-variables"));, +			handlerMappingDef.getPropertyValues().add("removeSemicolonContent", !enableMatrixVariables);, +		}, +		else if (element.hasAttribute("enableMatrixVariables")) {, +			Boolean enableMatrixVariables = Boolean.valueOf(element.getAttribute("enableMatrixVariables"));, +		ManagedList<?> argumentResolvers = getArgumentResolvers(element, parserContext);, +, +		if (element.hasAttribute("ignore-default-model-on-redirect")) {, +			Boolean ignoreDefaultModel = Boolean.valueOf(element.getAttribute("ignore-default-model-on-redirect"));, +		else if (element.hasAttribute("ignoreDefaultModelOnRedirect")) {, +			// "ignoreDefaultModelOnRedirect" spelling is deprecated, +			Boolean ignoreDefaultModel = Boolean.valueOf(element.getAttribute("ignoreDefaultModelOnRedirect"));, +			handlerAdapterDef.getPropertyValues().add("ignoreDefaultModelOnRedirect", ignoreDefaultModel);, +		}, +, +, +		else if (javaxValidationPresent) {, +			RootBeanDefinition validatorDef = new RootBeanDefinition(, +					"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean");, +		}, +		else {, +	private ManagedList<?> getArgumentResolvers(Element element, ParserContext parserContext) {, +			return wrapWebArgumentResolverBeanDefs(argumentResolvers, parserContext);, +			messageConverters.add(createConverterDefinition(ByteArrayHttpMessageConverter.class, source));, +			RootBeanDefinition stringConverterDef = createConverterDefinition(StringHttpMessageConverter.class, source);, +			messageConverters.add(createConverterDefinition(ResourceHttpMessageConverter.class, source));, +			messageConverters.add(createConverterDefinition(SourceHttpMessageConverter.class, source));, +			messageConverters.add(createConverterDefinition(AllEncompassingFormHttpMessageConverter.class, source));, +, +				messageConverters.add(createConverterDefinition(AtomFeedHttpMessageConverter.class, source));, +				messageConverters.add(createConverterDefinition(RssChannelHttpMessageConverter.class, source));, +				messageConverters.add(createConverterDefinition(Jaxb2RootElementHttpMessageConverter.class, source));, +, +				messageConverters.add(createConverterDefinition(MappingJackson2HttpMessageConverter.class, source));, +				messageConverters.add(createConverterDefinition(, +						org.springframework.http.converter.json.MappingJacksonHttpMessageConverter.class, source));, +	private RootBeanDefinition createConverterDefinition(Class<? extends HttpMessageConverter> converterClass, Object source) {, +	private ManagedList<BeanDefinitionHolder> wrapWebArgumentResolverBeanDefs(, +			List<BeanDefinitionHolder> beanDefs, ParserContext parserContext) {, +		ManagedList<BeanDefinitionHolder> result = new ManagedList<BeanDefinitionHolder>();, +			Class<?> clazz = ClassUtils.resolveClassName(className, parserContext.getReaderContext().getBeanClassLoader());, +			}, +			else {, +	static class CompositeUriComponentsContributorFactoryBean, +			implements FactoryBean<CompositeUriComponentsContributor>, InitializingBean {, +		public void afterPropertiesSet() {]