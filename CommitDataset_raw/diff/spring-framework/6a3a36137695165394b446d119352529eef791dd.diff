[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java, +import java.sql.BatchUpdateException;, +						this.currSql = appendSql(this.currSql, sqlStmt);, +					try {, +					catch (BatchUpdateException ex) {, +						String batchExceptionSql = null;, +						for (int i = 0; i < ex.getUpdateCounts().length; i++) {, +							if (ex.getUpdateCounts()[i] == Statement.EXECUTE_FAILED) {, +								batchExceptionSql = appendSql(batchExceptionSql, sql[i]);, +							}, +						}, +						if (StringUtils.hasLength(batchExceptionSql)) {, +							this.currSql = batchExceptionSql;, +						}, +						throw ex;, +					}, +				}, +, +			private String appendSql(String sql, String statement) {, +				return (StringUtils.isEmpty(sql) ? statement : sql + "; " + statement);, +			}, +, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java, +import java.sql.BatchUpdateException;, +						this.currSql = appendSql(this.currSql, sqlStmt);, +					try {, +					catch (BatchUpdateException ex) {, +						String batchExceptionSql = null;, +						for (int i = 0; i < ex.getUpdateCounts().length; i++) {, +							if (ex.getUpdateCounts()[i] == Statement.EXECUTE_FAILED) {, +								batchExceptionSql = appendSql(batchExceptionSql, sql[i]);, +							}, +						}, +						if (StringUtils.hasLength(batchExceptionSql)) {, +							this.currSql = batchExceptionSql;, +						}, +						throw ex;, +					}, +				}, +, +			private String appendSql(String sql, String statement) {, +				return (StringUtils.isEmpty(sql) ? statement : sql + "; " + statement);, +			}, +, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/JdbcTemplateTests.java, +import java.sql.BatchUpdateException;, +	public void testBatchUpdateWithBatchFailure() throws Exception {, +		final String[] sql = {"A", "B", "C", "D"};, +		given(this.statement.executeBatch()).willThrow(, +				new BatchUpdateException(new int[] { 1, Statement.EXECUTE_FAILED, 1,, +					Statement.EXECUTE_FAILED }));, +		mockDatabaseMetaData(true);, +		given(this.connection.createStatement()).willReturn(this.statement);, +, +		JdbcTemplate template = new JdbcTemplate(this.dataSource, false);, +		try {, +			template.batchUpdate(sql);, +		}, +		catch (UncategorizedSQLException ex) {, +			assertThat(ex.getSql(), equalTo("B; D"));, +		}, +	}, +, +	@Test]