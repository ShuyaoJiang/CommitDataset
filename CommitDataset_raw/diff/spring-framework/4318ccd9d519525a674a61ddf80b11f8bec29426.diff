[+++ b/org.springframework.aspects/src/test/java/org/springframework/beans/factory/aspectj/AbstractBeanConfigurerTests.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.beans.factory.aspectj;, +, +import java.io.ByteArrayInputStream;, +import java.io.ByteArrayOutputStream;, +import java.io.ObjectInputStream;, +import java.io.ObjectOutputStream;, +import java.io.ObjectStreamException;, +import java.io.Serializable;, +, +import junit.framework.TestCase;, +, +import org.aspectj.lang.annotation.Aspect;, +import org.aspectj.lang.annotation.Pointcut;, +import org.springframework.beans.TestBean;, +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.beans.factory.UnsatisfiedDependencyException;, +import org.springframework.beans.factory.annotation.Autowire;, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.beans.factory.annotation.Configurable;, +import org.springframework.context.ConfigurableApplicationContext;, +import org.springframework.mail.MailSender;, +import org.springframework.mail.javamail.JavaMailSenderImpl;, +, +/**, + * @author Adrian Colyer, + * @author Rod Johnson, + * @author Ramnivas Laddad, + * @author Juergen Hoeller, + * @author Chris Beams, + */, +public abstract class AbstractBeanConfigurerTests extends TestCase {, +, +	protected ConfigurableApplicationContext context;, +, +	@Override, +	protected void setUp() throws Exception {, +		this.context = createContext();, +	}, +, +	protected abstract ConfigurableApplicationContext createContext();, +, +	public void testConfigurableWithExplicitBeanName() {, +		ShouldBeConfiguredBySpring myObject = new ShouldBeConfiguredBySpring();, +		assertEquals("Rod", myObject.getName());, +	}, +, +	public void testWithoutAnnotation() {, +		ShouldNotBeConfiguredBySpring myObject = new ShouldNotBeConfiguredBySpring();, +		assertNull("Name should not have been set", myObject.getName());, +	}, +, +	public void testConfigurableWithImplicitBeanName() {, +		ShouldBeConfiguredBySpringUsingTypeNameAsBeanName myObject =, +				new ShouldBeConfiguredBySpringUsingTypeNameAsBeanName();, +		assertEquals("Rob", myObject.getName());, +	}, +, +	public void testConfigurableUsingAutowireByType() {, +		ShouldBeConfiguredBySpringUsingAutowireByType myObject =, +				new ShouldBeConfiguredBySpringUsingAutowireByType();, +		assertNotNull(myObject.getFriend());, +		assertEquals("Ramnivas", myObject.getFriend().getName());, +	}, +, +	public void testConfigurableUsingAutowireByName() {, +		ValidAutowireByName myObject = new ValidAutowireByName();, +		assertNotNull(myObject.getRamnivas());, +		assertEquals("Ramnivas", myObject.getRamnivas().getName());, +	}, +, +	public void testInvalidAutowireByName() {, +		try {, +			new InvalidAutowireByName();, +			fail("Autowire by name cannot work");, +		}, +		catch (UnsatisfiedDependencyException ex) {, +			// Ok, +		}, +	}, +, +	public void testNewAspectAppliesToArbitraryNonAnnotatedPojo() {, +		ArbitraryExistingPojo aep = new ArbitraryExistingPojo();, +		assertNotNull(aep.friend);]