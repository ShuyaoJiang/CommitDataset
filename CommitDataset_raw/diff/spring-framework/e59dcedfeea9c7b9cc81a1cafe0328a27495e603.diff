[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, +import java.util.Collection;, +import org.springframework.validation.BindingResult;, +import org.springframework.web.bind.WebExchangeDataBinder;, +import org.springframework.web.reactive.result.method.BindingContext;, +							.doOnSuccess(aVoid -> addBindingResult(result, exchange)), +	private void addBindingResult(HandlerResult result, ServerWebExchange exchange) {, +		BindingContext context = result.getBindingContext();, +		Map<String, Object> model = context.getModel().asMap();, +		model.keySet().stream(), +				.filter(name -> isBindingCandidate(name, model.get(name))), +				.filter(name -> !model.containsKey(BindingResult.MODEL_KEY_PREFIX + name)), +				.forEach(name -> {, +					WebExchangeDataBinder binder = context.createDataBinder(exchange, model.get(name), name);, +					model.put(BindingResult.MODEL_KEY_PREFIX + name, binder.getBindingResult());, +				});, +	}, +, +	private boolean isBindingCandidate(String name, Object value) {, +		return !name.startsWith(BindingResult.MODEL_KEY_PREFIX) && value != null &&, +				!value.getClass().isArray() && !(value instanceof Collection) &&, +				!(value instanceof Map) && !BeanUtils.isSimpleValueType(value.getClass());, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, +import java.util.Collection;, +import org.springframework.validation.BindingResult;, +import org.springframework.web.bind.WebExchangeDataBinder;, +import org.springframework.web.reactive.result.method.BindingContext;, +							.doOnSuccess(aVoid -> addBindingResult(result, exchange)), +	private void addBindingResult(HandlerResult result, ServerWebExchange exchange) {, +		BindingContext context = result.getBindingContext();, +		Map<String, Object> model = context.getModel().asMap();, +		model.keySet().stream(), +				.filter(name -> isBindingCandidate(name, model.get(name))), +				.filter(name -> !model.containsKey(BindingResult.MODEL_KEY_PREFIX + name)), +				.forEach(name -> {, +					WebExchangeDataBinder binder = context.createDataBinder(exchange, model.get(name), name);, +					model.put(BindingResult.MODEL_KEY_PREFIX + name, binder.getBindingResult());, +				});, +	}, +, +	private boolean isBindingCandidate(String name, Object value) {, +		return !name.startsWith(BindingResult.MODEL_KEY_PREFIX) && value != null &&, +				!value.getClass().isArray() && !(value instanceof Collection) &&, +				!(value instanceof Map) && !BeanUtils.isSimpleValueType(value.getClass());, +	}, +, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandlerTests.java, +		String responseBody = "account: {" +, +				"id=123, " +, +				"org.springframework.validation.BindingResult.testBean=" +, +				"org.springframework.validation.BeanPropertyBindingResult: 0 errors, " +, +				"testBean=TestBean[name=Joe]" +, +				"}";, +		assertResponseBody("jsonView: {" +, +				"org.springframework.validation.BindingResult.testBean=" +, +				"org.springframework.validation.BeanPropertyBindingResult: 0 errors, " +, +				"testBean=TestBean[name=Joe]" +, +				"}");, +		assertResponseBody("account: {" +, +				"bean1=TestBean[name=Bean1], " +, +				"bean2=TestBean[name=Bean2], " +, +				"org.springframework.validation.BindingResult.bean1=" +, +				"org.springframework.validation.BeanPropertyBindingResult: 0 errors, " +, +				"org.springframework.validation.BindingResult.bean2=" +, +				"org.springframework.validation.BeanPropertyBindingResult: 0 errors" +, +				"}");]