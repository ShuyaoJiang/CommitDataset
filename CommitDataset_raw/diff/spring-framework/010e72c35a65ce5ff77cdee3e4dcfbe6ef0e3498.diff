[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +, +import static org.springframework.core.convert.support.ConversionUtils.*;, + * Base {@link ConversionService} implementation suitable for use in most environments., + * Implements {@link ConverterRegistry} as registration API., + *, +, +	private final Map<Class<?>, Map<Class<?>, MatchableConverters>> converters =, +			new HashMap<Class<?>, Map<Class<?>, MatchableConverters>>(36);, +, +			throw new IllegalArgumentException("Unable to the determine sourceType <S> and targetType <T> which " +, +							"your Converter<S, T> converts between; declare these generic types.");, +			throw new IllegalArgumentException("Unable to the determine sourceType <S> and targetRangeType R which " +, +					"your ConverterFactory<S, R> converts between; declare these generic types.");, +, +, +			throw new ConversionFailedException(sourceType, targetType, null,, +					new IllegalArgumentException("A null value cannot be assigned to a primitive type"));, +	 * <p>Returns <code>null</code> if this ConversionService simply cannot convert, +	 * between sourceType and targetType. Subclasses may override., +						addInterfaceHierarchy(ifc, classQueue);, +				}, +				else {, +						addInterfaceHierarchy(ifc, classQueue);, +	private void addInterfaceHierarchy(Class<?> ifc, LinkedList<Class<?>> classQueue) {, +		classQueue.addFirst(ifc);, +		for (Class<?> inheritedIfc : ifc.getInterfaces()) {, +			addInterfaceHierarchy(inheritedIfc, classQueue);, +		}, +	}, +	private GenericConverter matchConverter(, +			MatchableConverters matchable, TypeDescriptor sourceFieldType, TypeDescriptor targetFieldType) {, +, +		return (matchable != null ? matchable.matchConverter(sourceFieldType, targetFieldType) : null);, +			return this.typeInfo[0].getName() + " -> " + this.typeInfo[1].getName() + " : " +, +					this.converterFactory.toString();, +			}, +			else {, +							logger.debug("Converter lookup [MATCHED] " + conditional);, +					}, +					else {, +							logger.debug("Converter lookup [DID NOT MATCH] " + conditional);, +				logger.debug("Converter lookup [MATCHED] " + this.defaultConverter);, +			}, +			else {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +, +import static org.springframework.core.convert.support.ConversionUtils.*;, + * Base {@link ConversionService} implementation suitable for use in most environments., + * Implements {@link ConverterRegistry} as registration API., + *, +, +	private final Map<Class<?>, Map<Class<?>, MatchableConverters>> converters =, +			new HashMap<Class<?>, Map<Class<?>, MatchableConverters>>(36);, +, +			throw new IllegalArgumentException("Unable to the determine sourceType <S> and targetType <T> which " +, +							"your Converter<S, T> converts between; declare these generic types.");, +			throw new IllegalArgumentException("Unable to the determine sourceType <S> and targetRangeType R which " +, +					"your ConverterFactory<S, R> converts between; declare these generic types.");, +, +, +			throw new ConversionFailedException(sourceType, targetType, null,, +					new IllegalArgumentException("A null value cannot be assigned to a primitive type"));, +	 * <p>Returns <code>null</code> if this ConversionService simply cannot convert, +	 * between sourceType and targetType. Subclasses may override., +						addInterfaceHierarchy(ifc, classQueue);, +				}, +				else {, +						addInterfaceHierarchy(ifc, classQueue);, +	private void addInterfaceHierarchy(Class<?> ifc, LinkedList<Class<?>> classQueue) {, +		classQueue.addFirst(ifc);, +		for (Class<?> inheritedIfc : ifc.getInterfaces()) {, +			addInterfaceHierarchy(inheritedIfc, classQueue);, +		}, +	}, +	private GenericConverter matchConverter(, +			MatchableConverters matchable, TypeDescriptor sourceFieldType, TypeDescriptor targetFieldType) {, +, +		return (matchable != null ? matchable.matchConverter(sourceFieldType, targetFieldType) : null);, +			return this.typeInfo[0].getName() + " -> " + this.typeInfo[1].getName() + " : " +, +					this.converterFactory.toString();, +			}, +			else {, +							logger.debug("Converter lookup [MATCHED] " + conditional);, +					}, +					else {, +							logger.debug("Converter lookup [DID NOT MATCH] " + conditional);, +				logger.debug("Converter lookup [MATCHED] " + this.defaultConverter);, +			}, +			else {, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/GenericConversionServiceTests.java, +import java.util.ArrayList;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +import static org.junit.Assert.*;, +, +/**, + * @author Keith Donald, + * @author Juergen Hoeller]