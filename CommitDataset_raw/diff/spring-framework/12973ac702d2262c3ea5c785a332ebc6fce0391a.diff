[+++ b/build.gradle, +				// Ensure the javadoc process can resolve types compiled from .aj sources, +++ b/build.gradle, +				// Ensure the javadoc process can resolve types compiled from .aj sources, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, + * Copyright 2002-2017 the original author or authors., +		public Void call() throws Exception {, +++ b/build.gradle, +				// Ensure the javadoc process can resolve types compiled from .aj sources, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, + * Copyright 2002-2017 the original author or authors., +		public Void call() throws Exception {, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/frame/SockJsFrame.java, + * Copyright 2002-2017 the original author or authors., +	private static final SockJsFrame CLOSE_ANOTHER_CONNECTION_OPEN_FRAME =, +			closeFrame(2010, "Another connection still open");, +	 * @param content the content (must be a non-empty and represent a valid SockJS frame), +		Assert.hasText(content, "Content must not be empty");, +			throw new IllegalArgumentException("Unexpected SockJS frame type in content \"" + content + "\"");, +, +	/**, +	 * Return the SockJS frame type., +	 */, +	public SockJsFrameType getType() {, +		return this.type;, +	}, +, +	/**, +	 * Return the SockJS frame content (never {@code null})., +	 */, +	public String getContent() {, +		return this.content;, +	}, +, +	/**, +	 * Return the SockJS frame content as a byte array., +	 */, +	public byte[] getContentBytes() {, +		return this.content.getBytes(CHARSET);, +	}, +, +	/**, +	 * Return data contained in a SockJS "message" and "close" frames. Otherwise, +	 * for SockJS "open" and "close" frames, which do not contain data, return, +	 * {@code null}., +	 */, +	public String getFrameData() {, +		if (getType() == SockJsFrameType.OPEN || getType() == SockJsFrameType.HEARTBEAT) {, +			return null;, +		}, +		else {, +			return getContent().substring(1);, +		}, +	}, +, +, +	@Override, +	public boolean equals(Object other) {, +		if (this == other) {, +			return true;, +		}, +		if (!(other instanceof SockJsFrame)) {, +			return false;, +		}, +		SockJsFrame otherFrame = (SockJsFrame) other;, +		return (this.type.equals(otherFrame.type) && this.content.equals(otherFrame.content));, +	}, +, +	@Override, +	public int hashCode() {, +		return this.content.hashCode();, +	}, +, +	@Override, +	public String toString() {, +		String result = this.content;, +		if (result.length() > 80) {, +			result = result.substring(0, 80) + "...(truncated)";, +		}, +		return "SockJsFrame content='" + result.replace("\n", "\\n").replace("\r", "\\r") + "'";, +	}, +, +]