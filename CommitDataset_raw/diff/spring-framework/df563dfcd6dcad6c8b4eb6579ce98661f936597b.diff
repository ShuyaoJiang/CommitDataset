[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.servlet.view;, +, +import java.io.IOException;, +import java.io.InputStream;, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +import java.util.SortedMap;, +import java.util.TreeMap;, +import javax.activation.FileTypeMap;, +import javax.activation.MimetypesFileTypeMap;, +import javax.servlet.ServletContext;, +import javax.servlet.http.HttpServletRequest;, +, +import org.springframework.beans.factory.BeanFactoryUtils;, +import org.springframework.core.OrderComparator;, +import org.springframework.core.Ordered;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.core.io.Resource;, +import org.springframework.util.Assert;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.MediaType;, +import org.springframework.util.StringUtils;, +import org.springframework.web.context.request.RequestAttributes;, +import org.springframework.web.context.request.RequestContextHolder;, +import org.springframework.web.context.request.ServletRequestAttributes;, +import org.springframework.web.context.support.WebApplicationObjectSupport;, +import org.springframework.web.servlet.View;, +import org.springframework.web.servlet.ViewResolver;, +import org.springframework.web.util.UrlPathHelper;, +import org.springframework.web.util.WebUtils;, +, +/**, + * Implementation of {@link ViewResolver} that resolves a view based on the request file name or {@code Accept} header., + *, + * <p>The {@code ContentNegotiatingViewResolver} does not resolve views itself, but delegates to other {@link, + * ViewResolver}s. By default, these other view resolvers are picked up automatically from the application context,, + * though they can also be set explicitely by using the {@link #setViewResolvers(List) viewResolvers} property., + * <strong>Note</strong> that in order for this view resolver to work properly, the {@link #setOrder(int) order}, + * property needs to be set to a higher precedence than the others (the default is {@link Ordered#HIGHEST_PRECEDENCE}.), + *, + * <p>This view resolver uses the requested {@linkplain MediaType media type} to select a suitable {@link View} for a, + * request. This media type is determined by using the following criteria:, + * <ol>, + * <li>If the requested path has a file extension and if the {@link #setFavorPathExtension(boolean)} property is, + * <code>true</code>, the {@link #setMediaTypes(Map)  mediaTypes} property is inspected for a matching media type.</li>, + * <li>If there is no match and if the Java Activation Framework (JAF) is present on the class path,, + * {@link FileTypeMap#getContentType(String)} is used.</li>, + * <li>If the previous steps did not result in a media type, the request {@code Accept} header is used.</li>, + * </ol>, + * Once the requested media type has been determined, this resolver queries each delegate view resolver for a, + * {@link View} and determines if the requested media type is {@linkplain MediaType#includes(MediaType) compatible} with, + * the view's {@linkplain View#getContentType() content type}). The most compatible view is returned., + *, + * <p>For example, if the request path is {@code /view.html}, this view resolver will look for a view that has the, + * {@code text/html} content type (based on the {@code html} file extension). A request for {@code /view} with a {@code, + * text/html} request {@code Accept} header has the same result., + *, + * @author Arjen Poutsma, + * @see ViewResolver, + * @see InternalResourceViewResolver, + * @see BeanNameViewResolver, + * @since 3.0, + */, +public class ContentNegotiatingViewResolver extends WebApplicationObjectSupport implements ViewResolver, Ordered {, +, +	private static final boolean jafPresent =, +			ClassUtils.isPresent("javax.activation.FileTypeMap", ContentNegotiatingViewResolver.class.getClassLoader());, +, +	private static final String ACCEPT_HEADER = "Accept";, +, +	private UrlPathHelper urlPathHelper = new UrlPathHelper();, +, +	private boolean favorPathExtension = true;, +, +	private int order = Ordered.HIGHEST_PRECEDENCE;, +, +	private Map<String, MediaType> mediaTypes = new HashMap<String, MediaType>();, +, +	private List<ViewResolver> viewResolvers;]