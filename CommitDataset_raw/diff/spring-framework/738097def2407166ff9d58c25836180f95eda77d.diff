[+++ b/spring-web/src/main/java/org/springframework/http/HttpStatus.java, +		/**, +		 * Return the enum constant of this type with the corresponding series., +		 * @param status a standard HTTP status enum value, +		 * @return the enum constant of this type with the corresponding series, +		 * @throws IllegalArgumentException if this enum has no corresponding constant, +		 */, +		public static Series valueOf(HttpStatus status) {, +			return valueOf(status.value);, +		}, +, +		/**, +		 * Return the enum constant of this type with the corresponding series., +		 * @param statusCode the HTTP status code (potentially non-standard), +		 * @return the enum constant of this type with the corresponding series, +		 * @throws IllegalArgumentException if this enum has no corresponding constant, +		 */, +		public static Series valueOf(int statusCode) {, +			Series series = resolve(statusCode);, +			if (series == null) {, +				throw new IllegalArgumentException("No matching constant for [" + statusCode + "]");, +			}, +			return series;, +		}, +, +		/**, +		 * Resolve the given status code to an {@code HttpStatus.Series}, if possible., +		 * @param statusCode the HTTP status code (potentially non-standard), +		 * @return the corresponding {@code Series}, or {@code null} if not found, +		 * @since 5.1.3, +		 */, +		@Nullable, +		public static Series resolve(int statusCode) {, +			int seriesCode = statusCode / 100;, +			return null;, +++ b/spring-web/src/main/java/org/springframework/http/HttpStatus.java, +		/**, +		 * Return the enum constant of this type with the corresponding series., +		 * @param status a standard HTTP status enum value, +		 * @return the enum constant of this type with the corresponding series, +		 * @throws IllegalArgumentException if this enum has no corresponding constant, +		 */, +		public static Series valueOf(HttpStatus status) {, +			return valueOf(status.value);, +		}, +, +		/**, +		 * Return the enum constant of this type with the corresponding series., +		 * @param statusCode the HTTP status code (potentially non-standard), +		 * @return the enum constant of this type with the corresponding series, +		 * @throws IllegalArgumentException if this enum has no corresponding constant, +		 */, +		public static Series valueOf(int statusCode) {, +			Series series = resolve(statusCode);, +			if (series == null) {, +				throw new IllegalArgumentException("No matching constant for [" + statusCode + "]");, +			}, +			return series;, +		}, +, +		/**, +		 * Resolve the given status code to an {@code HttpStatus.Series}, if possible., +		 * @param statusCode the HTTP status code (potentially non-standard), +		 * @return the corresponding {@code Series}, or {@code null} if not found, +		 * @since 5.1.3, +		 */, +		@Nullable, +		public static Series resolve(int statusCode) {, +			int seriesCode = statusCode / 100;, +			return null;, +++ b/spring-web/src/main/java/org/springframework/web/client/DefaultResponseErrorHandler.java, +		int rawStatusCode = response.getRawStatusCode();, +		HttpStatus statusCode = HttpStatus.resolve(rawStatusCode);, +		return (statusCode != null ? hasError(statusCode) : hasError(rawStatusCode));, +	 * @param statusCode the HTTP status code as enum value, +	 * Template method called from {@link #hasError(ClientHttpResponse)}., +	 * <p>The default implementation checks if the given status code is, +	 * {@code HttpStatus.Series#CLIENT_ERROR CLIENT_ERROR} or, +	 * {@code HttpStatus.Series#SERVER_ERROR SERVER_ERROR}., +	 * Can be overridden in subclasses., +	 * @param unknownStatusCode the HTTP status code as raw value, +	 * @return {@code true} if the response has an error; {@code false} otherwise, +	 * @since 4.3.21, +	 */, +	protected boolean hasError(int unknownStatusCode) {, +		HttpStatus.Series series = HttpStatus.Series.resolve(unknownStatusCode);, +		return (series == HttpStatus.Series.CLIENT_ERROR || series == HttpStatus.Series.SERVER_ERROR);, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/http/HttpStatus.java, +		/**, +		 * Return the enum constant of this type with the corresponding series., +		 * @param status a standard HTTP status enum value, +		 * @return the enum constant of this type with the corresponding series, +		 * @throws IllegalArgumentException if this enum has no corresponding constant, +		 */, +		public static Series valueOf(HttpStatus status) {, +			return valueOf(status.value);, +		}]