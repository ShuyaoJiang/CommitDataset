[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, +import java.util.concurrent.ConcurrentHashMap;, +	private static Map<String, String> mergePathVariables(Map<String, String> oldVariables,, +			Map<String, String> newVariables) {, +, +		if (!newVariables.isEmpty()) {, +			Map<String, String> mergedVariables = new LinkedHashMap<>(oldVariables);, +			mergedVariables.putAll(newVariables);, +			return mergedVariables;, +		}, +		else {, +			return oldVariables;, +		}, +	}, +, +	private static String mergePatterns(@Nullable String oldPattern, String newPattern) {, +		if (oldPattern != null) {, +			if (oldPattern.endsWith("/") && newPattern.startsWith("/")) {, +				oldPattern = oldPattern.substring(0, oldPattern.length() - 1);, +			}, +			return oldPattern + newPattern;, +		}, +		else {, +			return newPattern;, +		}, +, +	}, +			String patternString = this.pattern.getPatternString();, +			traceMatch("Pattern", patternString, request.path(), info != null);, +				mergeAttributes(request, info.getUriVariables(), patternString);, +		private static void mergeAttributes(ServerRequest request, Map<String, String> variables,, +				String pattern) {, +			Map<String, String> pathVariables = mergePathVariables(request.pathVariables(), variables);, +			request.attributes().put(RouterFunctions.URI_TEMPLATE_VARIABLES_ATTRIBUTE,, +						Collections.unmodifiableMap(pathVariables));, +, +			pattern = mergePatterns(, +					(String) request.attributes().get(RouterFunctions.MATCHING_PATTERN_ATTRIBUTE),, +					pattern);, +			request.attributes().put(RouterFunctions.MATCHING_PATTERN_ATTRIBUTE, pattern);, +		}, +, +					.map(info -> new SubPathServerRequestWrapper(request, info, this.pattern.getPatternString()));, +		private final PathContainer pathContainer;, +		private final Map<String, Object> attributes;, +		public SubPathServerRequestWrapper(ServerRequest request,, +				PathPattern.PathRemainingMatchInfo info, String pattern) {, +			this.pathContainer = new SubPathContainer(info.getPathRemaining());, +			this.attributes = mergeAttributes(request, info.getUriVariables(), pattern);, +		private static Map<String, Object> mergeAttributes(ServerRequest request,, +		Map<String, String> pathVariables, String pattern) {, +			Map<String, Object> result = new ConcurrentHashMap<>(request.attributes());, +			result.put(RouterFunctions.URI_TEMPLATE_VARIABLES_ATTRIBUTE,, +					mergePathVariables(request.pathVariables(), pathVariables));, +, +			pattern = mergePatterns(, +					(String) request.attributes().get(RouterFunctions.MATCHING_PATTERN_ATTRIBUTE),, +					pattern);, +			result.put(RouterFunctions.MATCHING_PATTERN_ATTRIBUTE, pattern);, +			return result;, +			return this.pathContainer.value();, +			return this.pathContainer;, +			return this.attributes;, +		@SuppressWarnings("unchecked"), +			return (Map<String, String>) this.attributes.getOrDefault(, +					RouterFunctions.URI_TEMPLATE_VARIABLES_ATTRIBUTE, Collections.emptyMap());, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, +import java.util.concurrent.ConcurrentHashMap;, +	private static Map<String, String> mergePathVariables(Map<String, String> oldVariables,, +			Map<String, String> newVariables) {, +, +		if (!newVariables.isEmpty()) {, +			Map<String, String> mergedVariables = new LinkedHashMap<>(oldVariables);, +			mergedVariables.putAll(newVariables);, +			return mergedVariables;, +		}, +		else {, +			return oldVariables;, +		}, +	}, +, +	private static String mergePatterns(@Nullable String oldPattern, String newPattern) {, +		if (oldPattern != null) {, +			if (oldPattern.endsWith("/") && newPattern.startsWith("/")) {, +				oldPattern = oldPattern.substring(0, oldPattern.length() - 1);, +			}, +			return oldPattern + newPattern;, +		}, +		else {, +			return newPattern;, +		}, +, +	}, +			String patternString = this.pattern.getPatternString();, +			traceMatch("Pattern", patternString, request.path(), info != null);, +				mergeAttributes(request, info.getUriVariables(), patternString);, +		private static void mergeAttributes(ServerRequest request, Map<String, String> variables,, +				String pattern) {, +			Map<String, String> pathVariables = mergePathVariables(request.pathVariables(), variables);]