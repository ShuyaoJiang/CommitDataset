[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, +				, +, +				BeanDefinitionHolder definitionHolder;, +				if (candidate.getBeanClassName().equals("org.springframework.aop.scope.ScopedProxyFactoryBean")){, +					String scopedFactoryBeanName = "scopedTarget." + candidate.getPropertyValues().getPropertyValue("targetBeanName").getValue();					, +					definitionHolder = new BeanDefinitionHolder(candidate, scopedFactoryBeanName);, +				} else {	, +					String configurationComponentBeanName = beanDefinitionHolder.getBeanName();, +					String factoryMethodName = candidate.getFactoryMethodName();, +					String beanName = createFactoryBeanName(configurationComponentBeanName, factoryMethodName);	, +					definitionHolder = new BeanDefinitionHolder(candidate, beanName);, +				}, +																			, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, +				, +, +				BeanDefinitionHolder definitionHolder;, +				if (candidate.getBeanClassName().equals("org.springframework.aop.scope.ScopedProxyFactoryBean")){, +					String scopedFactoryBeanName = "scopedTarget." + candidate.getPropertyValues().getPropertyValue("targetBeanName").getValue();					, +					definitionHolder = new BeanDefinitionHolder(candidate, scopedFactoryBeanName);, +				} else {	, +					String configurationComponentBeanName = beanDefinitionHolder.getBeanName();, +					String factoryMethodName = candidate.getFactoryMethodName();, +					String beanName = createFactoryBeanName(configurationComponentBeanName, factoryMethodName);	, +					definitionHolder = new BeanDefinitionHolder(candidate, beanName);, +				}, +																			, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, +import org.springframework.aop.scope.ScopedProxyFactoryBean;, +import org.springframework.beans.factory.support.GenericBeanDefinition;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +	protected static final String SCOPEDPROXY_CLASS_NAME = "org.springframework.beans.factory.annotation.ScopedProxy";, +, +	private int factoryBeanCount = 0;, +, +						, +												, +						RootBeanDefinition scopedFactoryBeanDef = null;, +						if (methodMetadata.hasAnnotation(SCOPEDPROXY_CLASS_NAME))	{, +							//TODO validate that @ScopedProxy isn't applied to singleton/prototype beans., +							Map<String, Object> attributes = methodMetadata.getAnnotationAttributes(SCOPEDPROXY_CLASS_NAME);, +							scopedFactoryBeanDef = new RootBeanDefinition(ScopedProxyFactoryBean.class);, +							String t= scopedFactoryBeanDef.getBeanClassName();, +							String targetBeanName = createFactoryBeanName(beanDefinitionHolder.getBeanName(), factoryBeanDef.getFactoryMethodName());, +							scopedFactoryBeanDef.getPropertyValues().addPropertyValue("targetBeanName", targetBeanName);, +							, +							//TODO handle cglib options, +							//  scopedFactoryBeanDef.getPropertyValues().addPropertyValue("proxyTargetClass", Boolean.FALSE);, +							scopedFactoryBeanDef.setAutowireCandidate(false);, +							scopedFactoryBeanDef.setResource(containingBeanDef.getResource());, +							scopedFactoryBeanDef.setSource(containingBeanDef.getSource());, +							, +							candidates.add(scopedFactoryBeanDef);, +							, +						}, +						, +, +, +, +	protected String createFactoryBeanName(String configurationComponentBeanName, String factoryMethodName) {, +		//TODO consider adding hex string and passing in definition object., +		String beanName = configurationComponentBeanName + "$" + factoryMethodName;, +		return beanName;, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, +				, +, +				BeanDefinitionHolder definitionHolder;, +				if (candidate.getBeanClassName().equals("org.springframework.aop.scope.ScopedProxyFactoryBean")){, +					String scopedFactoryBeanName = "scopedTarget." + candidate.getPropertyValues().getPropertyValue("targetBeanName").getValue();					, +					definitionHolder = new BeanDefinitionHolder(candidate, scopedFactoryBeanName);, +				} else {	, +					String configurationComponentBeanName = beanDefinitionHolder.getBeanName();, +					String factoryMethodName = candidate.getFactoryMethodName();, +					String beanName = createFactoryBeanName(configurationComponentBeanName, factoryMethodName);	, +					definitionHolder = new BeanDefinitionHolder(candidate, beanName);, +				}, +																			, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, +import org.springframework.aop.scope.ScopedProxyFactoryBean;, +import org.springframework.beans.factory.support.GenericBeanDefinition;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +	protected static final String SCOPEDPROXY_CLASS_NAME = "org.springframework.beans.factory.annotation.ScopedProxy";, +, +	private int factoryBeanCount = 0;, +, +						, +												, +						RootBeanDefinition scopedFactoryBeanDef = null;, +						if (methodMetadata.hasAnnotation(SCOPEDPROXY_CLASS_NAME))	{, +							//TODO validate that @ScopedProxy isn't applied to singleton/prototype beans., +							Map<String, Object> attributes = methodMetadata.getAnnotationAttributes(SCOPEDPROXY_CLASS_NAME);, +							scopedFactoryBeanDef = new RootBeanDefinition(ScopedProxyFactoryBean.class);, +							String t= scopedFactoryBeanDef.getBeanClassName();, +							String targetBeanName = createFactoryBeanName(beanDefinitionHolder.getBeanName(), factoryBeanDef.getFactoryMethodName());, +							scopedFactoryBeanDef.getPropertyValues().addPropertyValue("targetBeanName", targetBeanName);, +							, +							//TODO handle cglib options]