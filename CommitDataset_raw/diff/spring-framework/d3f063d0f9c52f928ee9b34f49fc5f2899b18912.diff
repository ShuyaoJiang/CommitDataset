[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJAfterReturningAdvice.java, + * Copyright 2002-2013 the original author or authors., +		Class<?> type = getDiscoveredReturningType();, +		return (matchesReturnValue(type, method, returnValue) &&, +	/**, +	 * Following AspectJ semantics, if a return value is null (or return type is void),, +	 * then the return type of target method should be used to determine whether advice, +	 * is invoked or not. Also, even if the return type is void, if the type of argument, +	 * declared in the advice method is Object, then the advice must still get invoked., +	 * @param type the type of argument declared in advice method, +	 * @param method the advice method, +	 * @param returnValue the return value of the target method, +	 * @return whether to invoke the advice method for the given return value and type, +	 */, +	private boolean matchesReturnValue(Class<?> type, Method method, Object returnValue) {, +		if (returnValue != null) {, +			return ClassUtils.isAssignableValue(type, returnValue);, +		}, +		else if (type.equals(Object.class) && method.getReturnType().equals(void.class)) {, +			return true;, +		}, +		else{, +			return ClassUtils.isAssignable(type, method.getReturnType());, +		}, +	}, +]