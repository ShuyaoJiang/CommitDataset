[+++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java, +import java.util.ArrayList;, +import java.util.List;, +		public Object parse(String formatted, Locale locale) throws ParseException {, +		int parserConfig = SpelExpressionParserConfiguration.CreateListsOnAttemptToIndexIntoNull, +				| SpelExpressionParserConfiguration.GrowListsOnIndexBeyondSize;, +	 * TODO return BindingResults with getSuccesses()/getErrors()/etc?, +	public List<BindingResult> bind(List<UserValue> userValues) {, +		List<BindingResult> results = new ArrayList<BindingResult>(userValues.size());, +		for (UserValue value : userValues) {, +			Binding binding = getBinding(value.getProperty());, +			if (value.isString()) {, +				results.add(binding.setValue((String) value.getValue()));, +			} else if (value.isStringArray()) {, +				results.add(binding.setValues((String[]) value.getValue()));, +		return results;, +		public BindingImpl(BindingConfiguration config) throws org.springframework.expression.ParseException {, +			Object value;, +				value = property.getValue(createEvaluationContext());, +				throw new IllegalStateException("Failed to get property expression value - this should not happen", e);, +			return format(value);, +		public BindingResult setValue(String formatted) {, +			Formatter formatter;, +			try {, +				formatter = getFormatter();, +			} catch (EvaluationException e) {, +				// could occur the property was not found or is not readable, +				// TODO probably should not handle all EL failures, only type conversion & property not found?, +				return new ExpressionEvaluationErrorResult(property.getExpressionString(), formatted, e);, +			}, +			Object parsed;, +			try {, +				parsed = formatter.parse(formatted, LocaleContextHolder.getLocale());, +			} catch (ParseException e) {, +				return new InvalidFormatResult(property.getExpressionString(), formatted, e);, +			}, +			return setValue(parsed, formatted);, +			Formatter formatter;, +			try {, +				formatter = getFormatter();, +			} catch (EvaluationException e) {, +				throw new IllegalStateException("Failed to get property expression value type - this should not happen", e);, +			}, +			Class type;, +			try { , +				type = getValueType();, +			} catch (EvaluationException e) {, +				throw new IllegalArgumentException("Failed to get property expression value type - this should not happen", e);, +			}, +			TypeDescriptor<?> typeDesc = TypeDescriptor.valueOf(type);, +			return typeDesc.isCollection() || typeDesc.isArray();, +				throw new IllegalStateException("Failed to get property expression value - this should not happen", e);, +		public BindingResult setValues(String[] formatted) {, +			Formatter formatter;, +			try {, +				formatter = getFormatter();, +			} catch (EvaluationException e) {, +				// could occur the property was not found or is not readable, +				// TODO probably should not handle all EL failures, only type conversion & property not found?, +				return new ExpressionEvaluationErrorResult(property.getExpressionString(), formatted, e);, +			}			, +			Object parsed = Array.newInstance(parsedType, formatted.length);, +			for (int i = 0; i < formatted.length; i++) {, +				Object parsedValue;, +				try {, +					parsedValue = formatter.parse(formatted[i], LocaleContextHolder.getLocale());, +				} catch (ParseException e) {, +					return new InvalidFormatResult(property.getExpressionString(), formatted, e);, +				Array.set(parsed, i, parsedValue);, +			}, +			return setValue(parsed, formatted);, +		private Formatter getFormatter() throws EvaluationException {, +		private Class<?> getValueType() throws EvaluationException {, +		private Annotation[] getAnnotations() throws EvaluationException {, +			return property.getValueTypeDescriptor(createEvaluationContext()).getAnnotations();, +		private BindingResult setValue(Object parsed, Object formatted) {, +				property.setValue(createEvaluationContext(), parsed);, +				return new SuccessResult(property.getExpressionString(), formatted);, +			} catch (EvaluationException e) {, +				return new ExpressionEvaluationErrorResult(property.getExpressionString(), formatted, e);, +		throw new IllegalArgumentException(, +				"Unable to extract Annotation type A argument from AnnotationFormatterFactory [", +, +	static class InvalidFormatResult implements BindingResult {, +, +		private String property;, +, +		private Object formatted;, +, +		private ParseException e;, +, +		public InvalidFormatResult(String property, Object formatted, ParseException e) {, +			this.property = property;, +			this.formatted = formatted;, +			this.e = e;, +		}, +, +		public String getProperty() {, +			return property;, +		}]