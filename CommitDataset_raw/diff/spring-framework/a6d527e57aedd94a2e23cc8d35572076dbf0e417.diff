[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.io.buffer.DefaultDataBufferFactory;, +	static final DataBuffer EOF_BUFFER = new DefaultDataBufferFactory().allocateBuffer(0);, +, +	DataBuffer readFromInputStream() throws IOException {, +		else if (read == -1) {, +			return EOF_BUFFER;, +		}, +				DataBuffer dataBuffer = readFromInputStream();, +				if (dataBuffer != EOF_BUFFER) {, +					return dataBuffer;, +				}, +				else {, +					// No need to wait for container callback..., +					onAllDataRead();, +				}, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.io.buffer.DefaultDataBufferFactory;, +	static final DataBuffer EOF_BUFFER = new DefaultDataBufferFactory().allocateBuffer(0);, +, +	DataBuffer readFromInputStream() throws IOException {, +		else if (read == -1) {, +			return EOF_BUFFER;, +		}, +				DataBuffer dataBuffer = readFromInputStream();, +				if (dataBuffer != EOF_BUFFER) {, +					return dataBuffer;, +				}, +				else {, +					// No need to wait for container callback..., +					onAllDataRead();, +				}, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/TomcatHttpHandlerAdapter.java, + * Copyright 2002-2018 the original author or authors., +				else if (read == -1) {, +					return EOF_BUFFER;, +				}]