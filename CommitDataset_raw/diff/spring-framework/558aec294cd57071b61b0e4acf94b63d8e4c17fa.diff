[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java, +	 * MvcUriComponentsBuilder.fromMethodCall(, +	 * MvcUriComponentsBuilder.fromMethodCall(controller);, +	public static UriComponentsBuilder fromMethodCall(Object methodInvocationInfo) {, +	 * Return a "mock" controller instance. When an {@code @RequestMapping} method, +	 * on the controller is invoked, the supplied argument values are remembered, +	 * and the result can then be used to prepare a URL to the method via, +	 * {@link #fromMethodCall(Object)}., +	 * This is a shorthand version of {@link #controller(Class)} intended for, +	 * inline use as follows:, +	 * UriComponentsBuilder builder = MvcUriComponentsBuilder.fromMethodCall(, +	 * 		on(FooController.class).getFoo(1)).build();, +	 * @param controllerType the target controller, +	public static <T> T on(Class<T> controllerType) {, +		return controller(controllerType);, +	}, +, +	/**, +	 * Return a "mock" controller instance. When an {@code @RequestMapping} method, +	 * on the controller is invoked, the supplied argument values are remembered, +	 * and the result can then be used to prepare a URL to the method via, +	 * {@link #fromMethodCall(Object)}., +	 * <p>, +	 * This is a longer version of {@link #on(Class)} for use with void controller, +	 * methods as well as for creating multiple links in succession., +	 *, +	 * <pre>, +	 * FooController fooController = controller(FooController.class);, +	 *, +	 * fooController.saveFoo(1, null);, +	 * builder = MvcUriComponentsBuilder.fromMethodCall(fooController);, +	 *, +	 * fooController.saveFoo(2, null);, +	 * builder = MvcUriComponentsBuilder.fromMethodCall(fooController);, +	 * </pre>, +	 *, +	 * @param controllerType the target controller, +	 */, +	public static <T> T controller(Class<T> controllerType) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java, +	 * MvcUriComponentsBuilder.fromMethodCall(, +	 * MvcUriComponentsBuilder.fromMethodCall(controller);, +	public static UriComponentsBuilder fromMethodCall(Object methodInvocationInfo) {, +	 * Return a "mock" controller instance. When an {@code @RequestMapping} method, +	 * on the controller is invoked, the supplied argument values are remembered, +	 * and the result can then be used to prepare a URL to the method via, +	 * {@link #fromMethodCall(Object)}., +	 * This is a shorthand version of {@link #controller(Class)} intended for, +	 * inline use as follows:, +	 * UriComponentsBuilder builder = MvcUriComponentsBuilder.fromMethodCall(, +	 * 		on(FooController.class).getFoo(1)).build();, +	 * @param controllerType the target controller, +	public static <T> T on(Class<T> controllerType) {, +		return controller(controllerType);, +	}, +, +	/**, +	 * Return a "mock" controller instance. When an {@code @RequestMapping} method, +	 * on the controller is invoked, the supplied argument values are remembered, +	 * and the result can then be used to prepare a URL to the method via, +	 * {@link #fromMethodCall(Object)}., +	 * <p>, +	 * This is a longer version of {@link #on(Class)} for use with void controller, +	 * methods as well as for creating multiple links in succession., +	 *, +	 * <pre>, +	 * FooController fooController = controller(FooController.class);, +	 *, +	 * fooController.saveFoo(1, null);, +	 * builder = MvcUriComponentsBuilder.fromMethodCall(fooController);, +	 *, +	 * fooController.saveFoo(2, null);, +	 * builder = MvcUriComponentsBuilder.fromMethodCall(fooController);, +	 * </pre>, +	 *, +	 * @param controllerType the target controller, +	 */, +	public static <T> T controller(Class<T> controllerType) {, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsContributorTests.java, +import static org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.on;, +	public void fromMethodCall() {, +		UriComponents uriComponents = this.builder.fromMethodCall(, +				on(ControllerWithMethods.class).myMethod(null)).build();, +	public void fromMethodCallWithTypeLevelUriVars() {, +		UriComponents uriComponents = this.builder.fromMethodCall(, +				on(PersonsAddressesController.class).getAddressesForCountry("DE")).buildAndExpand(15);, +	public void fromMethodCallWithPathVar() {, +		UriComponents uriComponents = this.builder.fromMethodCall(, +				on(ControllerWithMethods.class).methodWithPathVariable("1")).build();, +	public void fromMethodCallWithPathVarAndRequestParams() {, +		UriComponents uriComponents = this.builder.fromMethodCall(, +				on(ControllerWithMethods.class).methodForNextPage("1", 10, 5)).build();, +	public void fromMethodCallWithPathVarAndMultiValueRequestParams() {, +		UriComponents uriComponents = this.builder.fromMethodCall(, +				on(ControllerWithMethods.class).methodWithMultiValueRequestParams(]