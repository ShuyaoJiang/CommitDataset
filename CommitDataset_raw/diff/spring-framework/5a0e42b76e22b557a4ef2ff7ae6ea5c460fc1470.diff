[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/WebSocketSession.java, +	 * Return the negotiated sub-protocol or {@code null} if none was specified., +	 */, +	String getAcceptedProtocol();, +, +	/**, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/WebSocketSession.java, +	 * Return the negotiated sub-protocol or {@code null} if none was specified., +	 */, +	String getAcceptedProtocol();, +, +	/**, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/ConfigurableWebSocketSession.java, +import org.springframework.web.socket.server.DefaultHandshakeHandler;, +	/**, +	 * Set the protocol accepted as part of the WebSocket handshake. This property can be, +	 * used when the WebSocket handshake is performed through, +	 * {@link DefaultHandshakeHandler} rather than the underlying WebSocket runtime, or, +	 * when there is no WebSocket handshake (e.g. SockJS HTTP fallback options), +	 */, +	void setAcceptedProtocol(String protocol);, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/WebSocketSession.java, +	 * Return the negotiated sub-protocol or {@code null} if none was specified., +	 */, +	String getAcceptedProtocol();, +, +	/**, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/ConfigurableWebSocketSession.java, +import org.springframework.web.socket.server.DefaultHandshakeHandler;, +	/**, +	 * Set the protocol accepted as part of the WebSocket handshake. This property can be, +	 * used when the WebSocket handshake is performed through, +	 * {@link DefaultHandshakeHandler} rather than the underlying WebSocket runtime, or, +	 * when there is no WebSocket handshake (e.g. SockJS HTTP fallback options), +	 */, +	void setAcceptedProtocol(String protocol);, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/JettyWebSocketSessionAdapter.java, +import org.eclipse.jetty.websocket.api.UpgradeResponse;, +	private String protocol;, +, +, +		if (this.protocol == null) {, +			UpgradeResponse response = session.getUpgradeResponse();, +			if ((response != null) && response.getAcceptedSubProtocol() != null) {, +				this.protocol = response.getAcceptedSubProtocol();, +			}, +		}, +	public String getAcceptedProtocol() {, +		return this.protocol;, +	}, +, +	@Override, +	public void setAcceptedProtocol(String protocol) {, +		this.protocol = protocol;, +	}, +, +	@Override, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/WebSocketSession.java, +	 * Return the negotiated sub-protocol or {@code null} if none was specified., +	 */, +	String getAcceptedProtocol();, +, +	/**, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/ConfigurableWebSocketSession.java, +import org.springframework.web.socket.server.DefaultHandshakeHandler;, +	/**, +	 * Set the protocol accepted as part of the WebSocket handshake. This property can be, +	 * used when the WebSocket handshake is performed through, +	 * {@link DefaultHandshakeHandler} rather than the underlying WebSocket runtime, or, +	 * when there is no WebSocket handshake (e.g. SockJS HTTP fallback options), +	 */, +	void setAcceptedProtocol(String protocol);, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/JettyWebSocketSessionAdapter.java, +import org.eclipse.jetty.websocket.api.UpgradeResponse;, +	private String protocol;, +, +, +		if (this.protocol == null) {, +			UpgradeResponse response = session.getUpgradeResponse();, +			if ((response != null) && response.getAcceptedSubProtocol() != null) {, +				this.protocol = response.getAcceptedSubProtocol();, +			}, +		}, +	public String getAcceptedProtocol() {, +		return this.protocol;, +	}, +, +	@Override, +	public void setAcceptedProtocol(String protocol) {, +		this.protocol = protocol;, +	}, +, +	@Override, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/StandardWebSocketSessionAdapter.java, +import org.springframework.util.StringUtils;, +	private String protocol;, +]