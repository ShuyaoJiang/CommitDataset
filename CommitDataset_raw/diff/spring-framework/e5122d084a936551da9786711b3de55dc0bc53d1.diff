[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java, + * Copyright 2002-2016 the original author or authors., +	private Collection<String> destinationPrefixes = new ArrayList<String>();, +, +	private HandlerMethodArgumentResolverComposite argumentResolvers = new HandlerMethodArgumentResolverComposite();, +, +	private HandlerMethodReturnValueHandlerComposite returnValueHandlers =new HandlerMethodReturnValueHandlerComposite();, +, +	private ApplicationContext applicationContext;, +, +	/**, +	 * Return the configured destination prefixes., +	 */, +	public Collection<String> getDestinationPrefixes() {, +		return this.destinationPrefixes;, +	}, +	 * Return the configured custom argument resolvers, if any., +	public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {, +		return this.customArgumentResolvers;, +	 * Return the configured custom return value handlers, if any., +	public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {, +		return this.customReturnValueHandlers;, +	public List<HandlerMethodArgumentResolver> getArgumentResolvers() {, +		return this.argumentResolvers.getResolvers();, +	public List<HandlerMethodReturnValueHandler> getReturnValueHandlers() {, +		return this.returnValueHandlers.getReturnValueHandlers();, +	@Override, +	public void setApplicationContext(ApplicationContext applicationContext) {, +		this.applicationContext = applicationContext;, +	}, +			logger.trace("Found " + matches.size() + " handler methods: " + matches);, +		logger.debug("No matching message handler methods.");, +			logger.error("Unhandled exception from message handler method", ex);, +		public Match(T mapping, HandlerMethod handlerMethod) {, +			Exception cause = (ex instanceof Exception ? (Exception) ex : new IllegalStateException(ex));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java, + * Copyright 2002-2016 the original author or authors., +	private Collection<String> destinationPrefixes = new ArrayList<String>();, +, +	private HandlerMethodArgumentResolverComposite argumentResolvers = new HandlerMethodArgumentResolverComposite();, +, +	private HandlerMethodReturnValueHandlerComposite returnValueHandlers =new HandlerMethodReturnValueHandlerComposite();, +, +	private ApplicationContext applicationContext;, +, +	/**, +	 * Return the configured destination prefixes., +	 */, +	public Collection<String> getDestinationPrefixes() {, +		return this.destinationPrefixes;, +	}, +	 * Return the configured custom argument resolvers, if any., +	public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {, +		return this.customArgumentResolvers;, +	 * Return the configured custom return value handlers, if any., +	public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {, +		return this.customReturnValueHandlers;, +	public List<HandlerMethodArgumentResolver> getArgumentResolvers() {, +		return this.argumentResolvers.getResolvers();, +	public List<HandlerMethodReturnValueHandler> getReturnValueHandlers() {, +		return this.returnValueHandlers.getReturnValueHandlers();, +	@Override, +	public void setApplicationContext(ApplicationContext applicationContext) {, +		this.applicationContext = applicationContext;, +	}, +			logger.trace("Found " + matches.size() + " handler methods: " + matches);, +		logger.debug("No matching message handler methods.");, +			logger.error("Unhandled exception from message handler method", ex);, +		public Match(T mapping, HandlerMethod handlerMethod) {, +			Exception cause = (ex instanceof Exception ? (Exception) ex : new IllegalStateException(ex));, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/HtmlUnitRequestBuilder.java, +		MockHttpServletRequest request = new HtmlUnitMockHttpServletRequest(, +				servletContext, httpMethod, uriComponents.getPath());, +		request.setPathInfo(null);, +		catch (UnsupportedEncodingException ex) {, +			throw new IllegalStateException(ex);, +		request.setContentType(contentType != null ? contentType : MediaType.ALL_VALUE);, +				throw new IllegalArgumentException(uriComponents.getPath() + " should start with contextPath " +, +						this.contextPath);, +		catch (UnsupportedEncodingException ex) {, +			throw new IllegalStateException(ex);, +	private CookieManager getCookieManager() {, +		return this.webClient.getCookieManager();, +	}]