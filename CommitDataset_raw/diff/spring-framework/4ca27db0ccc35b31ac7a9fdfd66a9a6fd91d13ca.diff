[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultEntityResponseBuilder.java, +	public EntityResponse.Builder<T> headers(Consumer<HttpHeaders> headersConsumer) {, +		headersConsumer.accept(this.headers);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultEntityResponseBuilder.java, +	public EntityResponse.Builder<T> headers(Consumer<HttpHeaders> headersConsumer) {, +		headersConsumer.accept(this.headers);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultRenderingResponseBuilder.java, +	public RenderingResponse.Builder headers(Consumer<HttpHeaders> headersConsumer) {, +		headersConsumer.accept(this.headers);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultEntityResponseBuilder.java, +	public EntityResponse.Builder<T> headers(Consumer<HttpHeaders> headersConsumer) {, +		headersConsumer.accept(this.headers);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultRenderingResponseBuilder.java, +	public RenderingResponse.Builder headers(Consumer<HttpHeaders> headersConsumer) {, +		headersConsumer.accept(this.headers);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultServerResponseBuilder.java, +				.headers(headers -> headers.putAll(this.headers)), +				.cookies(cookies -> cookies.addAll(this.cookies)), +				.headers(headers -> headers.putAll(this.headers)), +				.cookies(cookies -> cookies.addAll(this.cookies)), +				.headers(headers -> headers.putAll(this.headers)), +				.cookies(cookies -> cookies.addAll(this.cookies)), +				.headers(headers -> headers.putAll(this.headers)), +				.cookies(cookies -> cookies.addAll(this.cookies)), +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultEntityResponseBuilder.java, +	public EntityResponse.Builder<T> headers(Consumer<HttpHeaders> headersConsumer) {, +		headersConsumer.accept(this.headers);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultRenderingResponseBuilder.java, +	public RenderingResponse.Builder headers(Consumer<HttpHeaders> headersConsumer) {, +		headersConsumer.accept(this.headers);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultServerResponseBuilder.java, +				.headers(headers -> headers.putAll(this.headers)), +				.cookies(cookies -> cookies.addAll(this.cookies)), +				.headers(headers -> headers.putAll(this.headers)), +				.cookies(cookies -> cookies.addAll(this.cookies)), +				.headers(headers -> headers.putAll(this.headers)), +				.cookies(cookies -> cookies.addAll(this.cookies)), +				.headers(headers -> headers.putAll(this.headers)), +				.cookies(cookies -> cookies.addAll(this.cookies)), +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/EntityResponse.java, +		 * Manipulate this response's headers with the given consumer. The, +		 * headers provided to the consumer are "live", so that the consumer can be used to, +		 * {@linkplain HttpHeaders#set(String, String) overwrite} existing header values,, +		 * {@linkplain HttpHeaders#remove(Object) remove} values, or use any of the other, +		 * {@link HttpHeaders} methods., +		 * @param headersConsumer a function that consumes the {@code HttpHeaders}, +		Builder<T> headers(Consumer<HttpHeaders> headersConsumer);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultEntityResponseBuilder.java, +	public EntityResponse.Builder<T> headers(Consumer<HttpHeaders> headersConsumer) {, +		headersConsumer.accept(this.headers);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultRenderingResponseBuilder.java, +	public RenderingResponse.Builder headers(Consumer<HttpHeaders> headersConsumer) {, +		headersConsumer.accept(this.headers);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultServerResponseBuilder.java, +				.headers(headers -> headers.putAll(this.headers)), +				.cookies(cookies -> cookies.addAll(this.cookies)), +				.headers(headers -> headers.putAll(this.headers)), +				.cookies(cookies -> cookies.addAll(this.cookies)), +				.headers(headers -> headers.putAll(this.headers)), +				.cookies(cookies -> cookies.addAll(this.cookies)), +				.headers(headers -> headers.putAll(this.headers)), +				.cookies(cookies -> cookies.addAll(this.cookies)), +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/EntityResponse.java, +		 * Manipulate this response's headers with the given consumer. The, +		 * headers provided to the consumer are "live", so that the consumer can be used to, +		 * {@linkplain HttpHeaders#set(String, String) overwrite} existing header values,, +		 * {@linkplain HttpHeaders#remove(Object) remove} values, or use any of the other, +		 * {@link HttpHeaders} methods., +		 * @param headersConsumer a function that consumes the {@code HttpHeaders}, +		Builder<T> headers(Consumer<HttpHeaders> headersConsumer);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/RenderingResponse.java, +		 * Manipulate this response's headers with the given consumer. The, +		 * headers provided to the consumer are "live", so that the consumer can be used to, +		 * {@linkplain HttpHeaders#set(String, String) overwrite} existing header values,, +		 * {@linkplain HttpHeaders#remove(Object) remove} values, or use any of the other, +		 * {@link HttpHeaders} methods., +		 * @param headersConsumer a function that consumes the {@code HttpHeaders}, +		Builder headers(Consumer<HttpHeaders> headersConsumer);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultEntityResponseBuilder.java, +	public EntityResponse.Builder<T> headers(Consumer<HttpHeaders> headersConsumer) {, +		headersConsumer.accept(this.headers);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultRenderingResponseBuilder.java, +	public RenderingResponse.Builder headers(Consumer<HttpHeaders> headersConsumer) {, +		headersConsumer.accept(this.headers);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultServerResponseBuilder.java, +				.headers(headers -> headers.putAll(this.headers)), +				.cookies(cookies -> cookies.addAll(this.cookies)), +				.headers(headers -> headers.putAll(this.headers)), +				.cookies(cookies -> cookies.addAll(this.cookies)), +				.headers(headers -> headers.putAll(this.headers)), +				.cookies(cookies -> cookies.addAll(this.cookies)), +				.headers(headers -> headers.putAll(this.headers)), +				.cookies(cookies -> cookies.addAll(this.cookies)), +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/function/EntityResponse.java, +		 * Manipulate this response's headers with the given consumer. The, +		 * headers provided to the consumer are "live", so that the consumer can be used to, +		 * {@linkplain HttpHeaders#set(String, String) overwrite} existing header values,, +		 * {@linkplain HttpHeaders#remove(Object) remove} values, or use any of the other, +		 * {@link HttpHeaders} methods., +		 * @param headersConsumer a function that consumes the {@code HttpHeaders}]