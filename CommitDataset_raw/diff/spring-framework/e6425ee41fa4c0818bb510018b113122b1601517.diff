[+++ b/org.springframework.core/src/main/java/org/springframework/core/GenericCollectionTypeResolver.java, + * Copyright 2002-2010 the original author or authors., +	 * @param source the source collection/map Class that we check, +	 * Extract the generic type from the given Class object., +	 * @param clazz the Class to check, +	private static Class<?> extractTypeFromClass(Class<?> clazz, Class<?> source, int typeIndex) {, +	 * Extract the generic type from the given Class object., +	 * @param clazz the Class to check, +				if (rawType instanceof Class && isIntrospectionCandidate((Class) rawType)) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/GenericCollectionTypeResolver.java, + * Copyright 2002-2010 the original author or authors., +	 * @param source the source collection/map Class that we check, +	 * Extract the generic type from the given Class object., +	 * @param clazz the Class to check, +	private static Class<?> extractTypeFromClass(Class<?> clazz, Class<?> source, int typeIndex) {, +	 * Extract the generic type from the given Class object., +	 * @param clazz the Class to check, +				if (rawType instanceof Class && isIntrospectionCandidate((Class) rawType)) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * @return the declared type, or <code>null</code> if this is {@link TypeDescriptor#NULL}]