[+++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/DefaultContentTypeResolver.java, + * {@link MessageHeaders#CONTENT_TYPE} header or falls back to a default value,, + * The header value is expected to be a {@link org.springframework.util.MimeType}, + * or a String that can be parsed into a {@code MimeType}., +	 * Set the default MIME type to use when there is no, +	 * {@link MessageHeaders#CONTENT_TYPE} header present., +	 * <p>, +	 * This property does not have a default value., +	 * Return the default MIME type to use if no, +	 * {@link MessageHeaders#CONTENT_TYPE} header is present., +		if (headers == null || headers.get(MessageHeaders.CONTENT_TYPE) == null) {, +			return this.defaultMimeType;, +		Object value = headers.get(MessageHeaders.CONTENT_TYPE);, +		if (value instanceof MimeType) {, +			return (MimeType) value;, +		}, +		else if (value instanceof String) {, +			return MimeType.valueOf((String) value);, +		}, +		else {, +			throw new IllegalArgumentException(, +					"Unknown type for contentType header value: " + value.getClass());, +		}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/DefaultContentTypeResolver.java, + * {@link MessageHeaders#CONTENT_TYPE} header or falls back to a default value,, + * The header value is expected to be a {@link org.springframework.util.MimeType}, + * or a String that can be parsed into a {@code MimeType}., +	 * Set the default MIME type to use when there is no, +	 * {@link MessageHeaders#CONTENT_TYPE} header present., +	 * <p>, +	 * This property does not have a default value., +	 * Return the default MIME type to use if no, +	 * {@link MessageHeaders#CONTENT_TYPE} header is present., +		if (headers == null || headers.get(MessageHeaders.CONTENT_TYPE) == null) {, +			return this.defaultMimeType;, +		Object value = headers.get(MessageHeaders.CONTENT_TYPE);, +		if (value instanceof MimeType) {, +			return (MimeType) value;, +		}, +		else if (value instanceof String) {, +			return MimeType.valueOf((String) value);, +		}, +		else {, +			throw new IllegalArgumentException(, +					"Unknown type for contentType header value: " + value.getClass());, +		}, +, +++ b/spring-messaging/src/test/java/org/springframework/messaging/converter/DefaultContentTypeResolverTests.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.util.InvalidMimeTypeException;, +	public void resolveStringContentType() {, +		Map<String, Object> map = new HashMap<String, Object>();, +		map.put(MessageHeaders.CONTENT_TYPE, MimeTypeUtils.APPLICATION_JSON_VALUE);, +		MessageHeaders headers = new MessageHeaders(map);, +, +		assertEquals(MimeTypeUtils.APPLICATION_JSON, this.resolver.resolve(headers));, +	}, +, +	@Test(expected = InvalidMimeTypeException.class), +	public void resolveInvalidStringContentType() {, +		Map<String, Object> map = new HashMap<String, Object>();, +		map.put(MessageHeaders.CONTENT_TYPE, "invalidContentType");, +		MessageHeaders headers = new MessageHeaders(map);, +		this.resolver.resolve(headers);, +	}, +, +	@Test(expected = IllegalArgumentException.class), +	public void resolveUnknownHeaderType() {, +		Map<String, Object> map = new HashMap<String, Object>();, +		map.put(MessageHeaders.CONTENT_TYPE, new Integer(1));, +		MessageHeaders headers = new MessageHeaders(map);, +		this.resolver.resolve(headers);, +	}, +, +	@Test, +	public void resolveDefaultMimeType() {]