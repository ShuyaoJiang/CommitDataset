[+++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.java, + * Copyright 2002-2013 the original author or authors., +	 * <p>Default is "false"., +		if (this.threadPoolExecutor == null) {, +			// Not initialized yet: assume core pool size., +			return this.corePoolSize;, +		}, +		return this.threadPoolExecutor.getPoolSize();, +		if (this.threadPoolExecutor == null) {, +			// Not initialized yet: assume no active threads., +			return 0;, +		}, +		return this.threadPoolExecutor.getActiveCount();, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ThreadPoolTaskExecutor.java, + * Copyright 2002-2013 the original author or authors., +	 * <p>Default is "false"., +		if (this.threadPoolExecutor == null) {, +			// Not initialized yet: assume core pool size., +			return this.corePoolSize;, +		}, +		return this.threadPoolExecutor.getPoolSize();, +		if (this.threadPoolExecutor == null) {, +			// Not initialized yet: assume no active threads., +			return 0;, +		}, +		return this.threadPoolExecutor.getActiveCount();, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ThreadPoolTaskScheduler.java, + * Copyright 2002-2013 the original author or authors., +	 * <p><b>This setting can be modified at runtime, for example through JMX.</b>, +		if (this.scheduledExecutor instanceof ScheduledThreadPoolExecutor) {, +			((ScheduledThreadPoolExecutor) this.scheduledExecutor).setCorePoolSize(poolSize);, +		}, +	 * Set a custom {@link ErrorHandler} strategy., +	/**, +	 * Return the underlying ScheduledThreadPoolExecutor, if available., +	 * @return the underlying ScheduledExecutorService (never {@code null}), +	 * @throws IllegalStateException if the ThreadPoolTaskScheduler hasn't been initialized yet, +	 * or if the underlying ScheduledExecutorService isn't a ScheduledThreadPoolExecutor, +	 * @see #getScheduledExecutor(), +	 */, +	public ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() throws IllegalStateException {, +		Assert.state(this.scheduledExecutor instanceof ScheduledThreadPoolExecutor,, +				"No ScheduledThreadPoolExecutor available");, +		return (ScheduledThreadPoolExecutor) this.scheduledExecutor;, +	}, +, +	/**, +	 * Return the current pool size., +	 * <p>Requires an underlying {@link ScheduledThreadPoolExecutor}., +	 * @see #getScheduledThreadPoolExecutor(), +	 * @see java.util.concurrent.ScheduledThreadPoolExecutor#getPoolSize(), +	 */, +	public int getPoolSize() {, +		if (this.scheduledExecutor == null) {, +			// Not initialized yet: assume initial pool size., +			return this.poolSize;, +		}, +		return getScheduledThreadPoolExecutor().getPoolSize();, +	}, +, +	/**, +	 * Return the number of currently active threads., +	 * <p>Requires an underlying {@link ScheduledThreadPoolExecutor}., +	 * @see #getScheduledThreadPoolExecutor(), +	 * @see java.util.concurrent.ScheduledThreadPoolExecutor#getActiveCount(), +	 */, +	public int getActiveCount() {, +		if (this.scheduledExecutor == null) {, +			// Not initialized yet: assume no active threads., +			return 0;, +		}, +		return getScheduledThreadPoolExecutor().getActiveCount();, +	}, +]