[+++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscoverAnnotationTests.java, + * Copyright 2002-2018 the original author or authors., +public class AspectJAdviceParameterNameDiscoverAnnotationTests extends AspectJAdviceParameterNameDiscovererTests {, +, +	public void pjpAndAnAnnotation(ProceedingJoinPoint pjp, MyAnnotation ann) {}, +, +	@interface MyAnnotation {}, +, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscoverAnnotationTests.java, + * Copyright 2002-2018 the original author or authors., +public class AspectJAdviceParameterNameDiscoverAnnotationTests extends AspectJAdviceParameterNameDiscovererTests {, +, +	public void pjpAndAnAnnotation(ProceedingJoinPoint pjp, MyAnnotation ann) {}, +, +	@interface MyAnnotation {}, +, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscovererTests.java, + * Copyright 2002-2018 the original author or authors., +, +		assertParameterNames(getMethod("oneObjectOnePrimitive"), "args(count) && this(obj)",, +				new String[] {"obj", "count"});, +		assertParameterNames(getMethod("oneObjectOnePrimitive"), "args(count) && target(obj)",, +				new String[] {"obj", "count"});, +		assertParameterNames(getMethod("oneThrowableOnePrimitive"), "args(count)", null, "ex",, +				new String[] {"ex", "count"});, +		assertParameterNames(getMethod("theBigOne"), "this(foo) && args(x)", null, "ex",, +				new String[] {"thisJoinPoint", "ex", "x", "foo"});, +		// Assumes no overloading of test methods..., +		Method[] candidates = getClass().getMethods();, +	protected void assertParameterNames(, +			Method method, String pointcut, String returning, String throwing, String[] parameterNames) {, +	protected void assertException(, +			Method method, String pointcut, String returning, String throwing, Class<?> exceptionType, String message) {, +, +	// Methods to discover parameter names for, +, +	public void noArgs() {, +	}, +, +	public void tjp(JoinPoint jp) {, +	}, +, +	public void tjpsp(JoinPoint.StaticPart tjpsp) {, +	}, +, +	public void twoJoinPoints(JoinPoint jp1, JoinPoint jp2) {, +	}, +, +	public void oneThrowable(Exception ex) {, +	}, +, +	public void jpAndOneThrowable(JoinPoint jp, Exception ex) {, +	}, +, +	public void jpAndTwoThrowables(JoinPoint jp, Exception ex, Error err) {, +	}, +, +	public void oneObject(Object x) {, +	}, +, +	public void twoObjects(Object x, Object y) {, +	}, +, +	public void onePrimitive(int x) {, +	}, +, +	public void oneObjectOnePrimitive(Object x, int y) {, +	}, +, +	public void oneThrowableOnePrimitive(Throwable x, int y) {, +	}, +, +	public void theBigOne(JoinPoint jp, Throwable x, int y, Object foo) {, +	}, +, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscoverAnnotationTests.java, + * Copyright 2002-2018 the original author or authors., +public class AspectJAdviceParameterNameDiscoverAnnotationTests extends AspectJAdviceParameterNameDiscovererTests {, +, +	public void pjpAndAnAnnotation(ProceedingJoinPoint pjp, MyAnnotation ann) {}, +, +	@interface MyAnnotation {}, +, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscovererTests.java, + * Copyright 2002-2018 the original author or authors., +, +		assertParameterNames(getMethod("oneObjectOnePrimitive"), "args(count) && this(obj)",, +				new String[] {"obj", "count"});, +		assertParameterNames(getMethod("oneObjectOnePrimitive"), "args(count) && target(obj)",, +				new String[] {"obj", "count"});, +		assertParameterNames(getMethod("oneThrowableOnePrimitive"), "args(count)", null, "ex",, +				new String[] {"ex", "count"});, +		assertParameterNames(getMethod("theBigOne"), "this(foo) && args(x)", null, "ex",, +				new String[] {"thisJoinPoint", "ex", "x", "foo"});, +		// Assumes no overloading of test methods..., +		Method[] candidates = getClass().getMethods();, +	protected void assertParameterNames(, +			Method method, String pointcut, String returning, String throwing, String[] parameterNames) {, +	protected void assertException(, +			Method method, String pointcut, String returning, String throwing, Class<?> exceptionType, String message) {]