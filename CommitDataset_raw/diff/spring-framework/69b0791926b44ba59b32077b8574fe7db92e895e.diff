[+++ b/spring-test/src/main/java/org/springframework/test/util/MetaAnnotationUtils.java, + * Copyright 2002-2015 the original author or authors., +			this.annotationAttributes = AnnotatedElementUtils.getAnnotationAttributes(rootDeclaringClass,, +				annotation.annotationType().getName(), true, true, false, false);, +++ b/spring-test/src/main/java/org/springframework/test/util/MetaAnnotationUtils.java, + * Copyright 2002-2015 the original author or authors., +			this.annotationAttributes = AnnotatedElementUtils.getAnnotationAttributes(rootDeclaringClass,, +				annotation.annotationType().getName(), true, true, false, false);, +++ b/spring-test/src/test/java/org/springframework/test/util/MetaAnnotationUtilsTests.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.test.util.MetaAnnotationUtils.AnnotationDescriptor;, +import org.springframework.test.util.MetaAnnotationUtils.UntypedAnnotationDescriptor;, +	public void findAnnotationDescriptorForClassWithLocalMetaAnnotationAndAnnotatedSuperclass() {, +		AnnotationDescriptor<ContextConfiguration> descriptor = findAnnotationDescriptor(, +			MetaAnnotatedAndSuperAnnotatedContextConfigClass.class, ContextConfiguration.class);, +, +		assertNotNull("AnnotationDescriptor should not be null", descriptor);, +		assertEquals("rootDeclaringClass", MetaAnnotatedAndSuperAnnotatedContextConfigClass.class, descriptor.getRootDeclaringClass());, +		assertEquals("declaringClass", MetaConfig.class, descriptor.getDeclaringClass());, +		assertEquals("annotationType", ContextConfiguration.class, descriptor.getAnnotationType());, +		assertNotNull("composedAnnotation should not be null", descriptor.getComposedAnnotation());, +		assertEquals("composedAnnotationType", MetaConfig.class, descriptor.getComposedAnnotationType());, +, +		assertArrayEquals("configured classes", new Class[] { String.class },, +			descriptor.getAnnotationAttributes().getClassArray("classes"));, +	}, +, +	@Test, +	@ContextConfiguration(classes = Number.class), +	static class AnnotatedContextConfigClass {, +	}, +, +	@MetaConfig(classes = String.class), +	static class MetaAnnotatedAndSuperAnnotatedContextConfigClass extends AnnotatedContextConfigClass {, +	}, +]