[+++ b/spring-core/src/main/java/org/springframework/util/Assert.java, +	 * <pre class="code">Assert.state(id == null, "The id property must not already be initialized");</pre>, +	 * @param expression a boolean expression, +	 * @param message the exception message to use if the assertion fails, +	 * @throws IllegalStateException if {@code expression} is {@code false}, +	 */, +	public static void state(boolean expression, String message) {, +		if (!expression) {, +			throw new IllegalStateException(message);, +		}, +	}, +, +	/**, +	 * Assert a boolean expression, throwing an {@code IllegalStateException}, +	 * if the expression evaluates to {@code false}., +	 * <p>Call {@link #isTrue} if you wish to throw an {@code IllegalArgumentException}, +	 * on an assertion failure., +	 * <pre class="code">Assert.isTrue(i &gt; 0, "The value must be greater than zero");</pre>, +	 * @param expression a boolean expression, +	 * @param message the exception message to use if the assertion fails, +	 * @throws IllegalArgumentException if {@code expression} is {@code false}, +	 */, +	public static void isTrue(boolean expression, String message) {, +		if (!expression) {, +			throw new IllegalArgumentException(message);, +		}, +	}, +, +	/**, +	 * Assert a boolean expression, throwing an {@code IllegalArgumentException}, +	 * if the expression evaluates to {@code false}., +	 * <pre class="code">Assert.isNull(value, "The value must be null");</pre>, +	 * @param object the object to check, +	 * @param message the exception message to use if the assertion fails, +	 * @throws IllegalArgumentException if the object is not {@code null}, +	 */, +	public static void isNull(Object object, String message) {, +		if (object != null) {, +			throw new IllegalArgumentException(message);, +		}, +	}, +, +	/**, +	 * Assert that an object is {@code null}., +	 * <pre class="code">Assert.notNull(clazz, "The class must not be null");</pre>, +	 * @param object the object to check, +	 * @param message the exception message to use if the assertion fails, +	 * @throws IllegalArgumentException if the object is {@code null}, +	 */, +	public static void notNull(Object object, String message) {, +		if (object == null) {, +			throw new IllegalArgumentException(message);, +		}, +	}, +, +	/**, +	 * Assert that an object is not {@code null}., +	 * <pre class="code">Assert.hasLength(name, "Name must not be empty");</pre>, +	 * @param text the String to check, +	 * @param message the exception message to use if the assertion fails, +	 * @see StringUtils#hasLength, +	 * @throws IllegalArgumentException if the text is empty, +	 */, +	public static void hasLength(String text, String message) {, +		if (!StringUtils.hasLength(text)) {, +			throw new IllegalArgumentException(message);, +		}, +	}, +, +	/**, +	 * Assert that the given String is not empty; that is,, +	 * it must not be {@code null} and not the empty String., +	 * <pre class="code">Assert.hasText(name, "'name' must not be empty");</pre>, +	 * @param text the String to check, +	 * @param message the exception message to use if the assertion fails, +	 * @see StringUtils#hasText, +	 * @throws IllegalArgumentException if the text does not contain valid text content, +	 */, +	public static void hasText(String text, String message) {, +		if (!StringUtils.hasText(text)) {, +			throw new IllegalArgumentException(message);, +		}, +	}, +, +	/**, +	 * Assert that the given String contains valid text content; that is, it must not, +	 * be {@code null} and must contain at least one non-whitespace character., +	 * <pre class="code">Assert.doesNotContain(name, "rod", "Name must not contain 'rod'");</pre>, +	 * @param textToSearch the text to search, +	 * @param substring the substring to find within the text, +	 * @param message the exception message to use if the assertion fails, +	 * @throws IllegalArgumentException if the text contains the substring, +	 */, +	public static void doesNotContain(String textToSearch, String substring, String message) {, +		if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&, +				textToSearch.contains(substring)) {, +			throw new IllegalArgumentException(message);, +		}, +	}, +]