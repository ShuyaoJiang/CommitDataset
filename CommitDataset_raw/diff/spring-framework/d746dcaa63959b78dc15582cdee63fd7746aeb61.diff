[+++ b/org.springframework.web/src/main/java/org/springframework/web/filter/HttpPutFormContentFilter.java, +import org.springframework.http.MediaType;, + * {@link javax.servlet.Filter} that makes form encoded data available through , + * the {@code ServletRequest.getParameter*()} family of methods during HTTP PUT , + * requests., + * <p>The Servlet spec requires form data to be available for HTTP POST but , + * not for HTTP PUT requests. This filter intercepts HTTP PUT requests where , + * content type is {@code 'application/x-www-form-urlencoded'}, reads form, + * encoded content from the body of the request, and wraps the ServletRequest , + * in order to make the form data available as request parameters just like, + * it is for HTTP POST requests., +	protected void doFilterInternal(final HttpServletRequest request, HttpServletResponse response,, +			FilterChain filterChain) throws ServletException, IOException {, +		if (contentType != null) {, +			MediaType mediaType = MediaType.parseMediaType(contentType);, +			return (MediaType.APPLICATION_FORM_URLENCODED.includes(mediaType));, +		}, +		else {, +			return false;, +		}, +++ b/org.springframework.web/src/main/java/org/springframework/web/filter/HttpPutFormContentFilter.java, +import org.springframework.http.MediaType;, + * {@link javax.servlet.Filter} that makes form encoded data available through , + * the {@code ServletRequest.getParameter*()} family of methods during HTTP PUT , + * requests., + * <p>The Servlet spec requires form data to be available for HTTP POST but , + * not for HTTP PUT requests. This filter intercepts HTTP PUT requests where , + * content type is {@code 'application/x-www-form-urlencoded'}, reads form, + * encoded content from the body of the request, and wraps the ServletRequest , + * in order to make the form data available as request parameters just like, + * it is for HTTP POST requests., +	protected void doFilterInternal(final HttpServletRequest request, HttpServletResponse response,, +			FilterChain filterChain) throws ServletException, IOException {, +		if (contentType != null) {, +			MediaType mediaType = MediaType.parseMediaType(contentType);, +			return (MediaType.APPLICATION_FORM_URLENCODED.includes(mediaType));, +		}, +		else {, +			return false;, +		}, +++ b/org.springframework.web/src/test/java/org/springframework/web/filter/HttpPutFormContentFilterTests.java, +import static org.junit.Assert.assertNotSame;, +		request.setContentType("application/x-www-form-urlencoded; charset=ISO-8859-1");, +	public void getParameterFromQueryString() throws Exception {, +		assertNotSame("Request not wrapped", request, filterChain.getRequest());, +	public void getParameterNullValue() throws Exception {, +		assertNotSame("Request not wrapped", request, filterChain.getRequest());, +		filter.doFilter(request, response, filterChain);, +, +		assertNotSame("Request not wrapped", request, filterChain.getRequest());, +		filter.doFilter(request, response, filterChain);, +, +		assertNotSame("Request not wrapped", request, filterChain.getRequest());, +	public void getParameterValuesFromQueryString() throws Exception {, +		filter.doFilter(request, response, filterChain);, +, +		assertNotSame("Request not wrapped", request, filterChain.getRequest());, +	public void getParameterValuesFromFormContent() throws Exception {, +		filter.doFilter(request, response, filterChain);, +, +		assertNotSame("Request not wrapped", request, filterChain.getRequest());, +	public void getParameterValuesInvalidName() throws Exception {, +		filter.doFilter(request, response, filterChain);, +, +		assertNotSame("Request not wrapped", request, filterChain.getRequest());, +		filter.doFilter(request, response, filterChain);, +, +		assertNotSame("Request not wrapped", request, filterChain.getRequest());]