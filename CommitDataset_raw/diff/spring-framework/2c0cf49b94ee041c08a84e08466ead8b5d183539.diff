[+++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/LocalDataSourceJobStore.java, +import org.quartz.impl.jdbcjobstore.SimpleSemaphore;, +import org.springframework.jdbc.support.JdbcUtils;, +import org.springframework.jdbc.support.MetaDataAccessException;, +		// No, if HSQL is the platform, we really don't want to use locks, +		try {, +			String productName = JdbcUtils.extractDatabaseMetaData(dataSource,, +					"getDatabaseProductName").toString();, +			productName = JdbcUtils.commonDatabaseName(productName);, +			if (productName != null, +					&& productName.toLowerCase().contains("hsql")) {, +				setUseDBLocks(false);, +				setLockHandler(new SimpleSemaphore());, +			}, +		} catch (MetaDataAccessException e) {, +			logWarnIfNonZero(1, "Could not detect database type.  Assuming locks can be taken.");, +		}, +, +, +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/LocalDataSourceJobStore.java, +import org.quartz.impl.jdbcjobstore.SimpleSemaphore;, +import org.springframework.jdbc.support.JdbcUtils;, +import org.springframework.jdbc.support.MetaDataAccessException;, +		// No, if HSQL is the platform, we really don't want to use locks, +		try {, +			String productName = JdbcUtils.extractDatabaseMetaData(dataSource,, +					"getDatabaseProductName").toString();, +			productName = JdbcUtils.commonDatabaseName(productName);, +			if (productName != null, +					&& productName.toLowerCase().contains("hsql")) {, +				setUseDBLocks(false);, +				setLockHandler(new SimpleSemaphore());, +			}, +		} catch (MetaDataAccessException e) {, +			logWarnIfNonZero(1, "Could not detect database type.  Assuming locks can be taken.");, +		}, +, +, +++ b/org.springframework.context.support/src/test/java/org/springframework/scheduling/quartz/QuartzSupportTests.java, +import javax.sql.DataSource;, +, +import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;, +	// SPR-6038: detect HSQL and stop illegal locks being taken, +	@Test, +	public void testSchedulerWithHsqlDataSource() throws Exception {, +		DummyJob.param = 0;, +		DummyJob.count = 0;, +, +		ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext(, +				"/org/springframework/scheduling/quartz/databasePersistence.xml");, +		SimpleJdbcTemplate jdbcTemplate = new SimpleJdbcTemplate(ctx.getBean(DataSource.class));, +		assertTrue("No triggers were persisted", jdbcTemplate.queryForList("SELECT * FROM qrtz_triggers").size()>0);, +		Thread.sleep(3000);, +		try {, +			// assertEquals(10, DummyJob.param);, +			assertTrue(DummyJob.count > 0);, +		} finally {, +			ctx.close();, +		}, +, +	}, +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/LocalDataSourceJobStore.java, +import org.quartz.impl.jdbcjobstore.SimpleSemaphore;, +import org.springframework.jdbc.support.JdbcUtils;, +import org.springframework.jdbc.support.MetaDataAccessException;, +		// No, if HSQL is the platform, we really don't want to use locks, +		try {, +			String productName = JdbcUtils.extractDatabaseMetaData(dataSource,, +					"getDatabaseProductName").toString();, +			productName = JdbcUtils.commonDatabaseName(productName);, +			if (productName != null, +					&& productName.toLowerCase().contains("hsql")) {, +				setUseDBLocks(false);, +				setLockHandler(new SimpleSemaphore());, +			}, +		} catch (MetaDataAccessException e) {, +			logWarnIfNonZero(1, "Could not detect database type.  Assuming locks can be taken.");, +		}, +, +, +++ b/org.springframework.context.support/src/test/java/org/springframework/scheduling/quartz/QuartzSupportTests.java, +import javax.sql.DataSource;, +, +import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;, +	// SPR-6038: detect HSQL and stop illegal locks being taken, +	@Test, +	public void testSchedulerWithHsqlDataSource() throws Exception {, +		DummyJob.param = 0;, +		DummyJob.count = 0;, +, +		ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext(, +				"/org/springframework/scheduling/quartz/databasePersistence.xml");, +		SimpleJdbcTemplate jdbcTemplate = new SimpleJdbcTemplate(ctx.getBean(DataSource.class));, +		assertTrue("No triggers were persisted", jdbcTemplate.queryForList("SELECT * FROM qrtz_triggers").size()>0);, +		Thread.sleep(3000);, +		try {, +			// assertEquals(10, DummyJob.param);, +			assertTrue(DummyJob.count > 0);, +		} finally {, +			ctx.close();]