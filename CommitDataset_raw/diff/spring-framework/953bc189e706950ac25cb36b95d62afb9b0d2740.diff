[+++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/Transactional.java, + * Copyright 2002-2016 the original author or authors., + * (rolling back on {@link RuntimeException} and {@link Error} but not on checked, + * exceptions)., +	 * <i>not</i> throw an exception when asked for a read-only transaction, +	 * but rather silently ignore the hint., +	 * <p>By default, a transaction will be rolling back on {@link RuntimeException}, +	 * and {@link Error} but not on checked exceptions (business exceptions). See, +	 * {@link org.springframework.transaction.interceptor.DefaultTransactionAttribute#rollbackOn(Throwable)}, +	 * for a detailed explanation., +	 * <p>Similar to {@link org.springframework.transaction.interceptor.RollbackRuleAttribute#RollbackRuleAttribute(Class clazz)}., +	 * @see org.springframework.transaction.interceptor.DefaultTransactionAttribute#rollbackOn(Throwable), +	 * match {@code javax.servlet.ServletException} and its subclasses., +	 * <p>Similar to {@link org.springframework.transaction.interceptor.RollbackRuleAttribute#RollbackRuleAttribute(String exceptionName)}., +	 * @see org.springframework.transaction.interceptor.DefaultTransactionAttribute#rollbackOn(Throwable), +	 * <p>Similar to {@link org.springframework.transaction.interceptor.NoRollbackRuleAttribute#NoRollbackRuleAttribute(Class clazz)}., +	 * @see org.springframework.transaction.interceptor.DefaultTransactionAttribute#rollbackOn(Throwable), +	 * <p>Similar to {@link org.springframework.transaction.interceptor.NoRollbackRuleAttribute#NoRollbackRuleAttribute(String exceptionName)}., +	 * @see org.springframework.transaction.interceptor.DefaultTransactionAttribute#rollbackOn(Throwable), +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/Transactional.java, + * Copyright 2002-2016 the original author or authors., + * (rolling back on {@link RuntimeException} and {@link Error} but not on checked, + * exceptions)., +	 * <i>not</i> throw an exception when asked for a read-only transaction, +	 * but rather silently ignore the hint., +	 * <p>By default, a transaction will be rolling back on {@link RuntimeException}, +	 * and {@link Error} but not on checked exceptions (business exceptions). See, +	 * {@link org.springframework.transaction.interceptor.DefaultTransactionAttribute#rollbackOn(Throwable)}, +	 * for a detailed explanation., +	 * <p>Similar to {@link org.springframework.transaction.interceptor.RollbackRuleAttribute#RollbackRuleAttribute(Class clazz)}., +	 * @see org.springframework.transaction.interceptor.DefaultTransactionAttribute#rollbackOn(Throwable), +	 * match {@code javax.servlet.ServletException} and its subclasses., +	 * <p>Similar to {@link org.springframework.transaction.interceptor.RollbackRuleAttribute#RollbackRuleAttribute(String exceptionName)}., +	 * @see org.springframework.transaction.interceptor.DefaultTransactionAttribute#rollbackOn(Throwable), +	 * <p>Similar to {@link org.springframework.transaction.interceptor.NoRollbackRuleAttribute#NoRollbackRuleAttribute(Class clazz)}., +	 * @see org.springframework.transaction.interceptor.DefaultTransactionAttribute#rollbackOn(Throwable), +	 * <p>Similar to {@link org.springframework.transaction.interceptor.NoRollbackRuleAttribute#NoRollbackRuleAttribute(String exceptionName)}., +	 * @see org.springframework.transaction.interceptor.DefaultTransactionAttribute#rollbackOn(Throwable), +++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/DefaultTransactionAttribute.java, +	 * The default behavior is as with EJB: rollback on unchecked exception, +	 * ({@link RuntimeException}), assuming an unexpected outcome outside of any, +	 * business rules. Additionally, we also attempt to rollback on {@link Error} which, +	 * is clearly an unexpected outcome as well. By contrast, a checked exception is, +	 * considered a business exception and therefore a regular expected outcome of the, +	 * transactional business method, i.e. a kind of alternative return value which, +	 * still allows for regular completion of resource operations., +	 * <p>This is largely consistent with TransactionTemplate's default behavior,, +	 * except that TransactionTemplate also rolls back on undeclared checked exceptions, +	 * (a corner case). For declarative transactions, we expect checked exceptions to be, +	 * intentionally declared as business exceptions, leading to a commit by default., +	 * @see org.springframework.transaction.support.TransactionTemplate#execute]