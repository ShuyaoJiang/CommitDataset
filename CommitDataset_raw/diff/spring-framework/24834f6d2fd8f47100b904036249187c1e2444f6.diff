[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.java, +	protected void extendMessageConverters(List<HttpMessageConverter<?>> converters) {, +		this.configurers.extendMessageConverters(converters);, +	}, +, +	@Override, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.java, +	protected void extendMessageConverters(List<HttpMessageConverter<?>> converters) {, +		this.configurers.extendMessageConverters(converters);, +	}, +, +	@Override, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +			extendMessageConverters(this.messageConverters);, +	protected void extendMessageConverters(List<HttpMessageConverter<?>> converters) {, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.java, +	protected void extendMessageConverters(List<HttpMessageConverter<?>> converters) {, +		this.configurers.extendMessageConverters(converters);, +	}, +, +	@Override, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +			extendMessageConverters(this.messageConverters);, +	protected void extendMessageConverters(List<HttpMessageConverter<?>> converters) {, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.java, +	 * Configure the {@link HttpMessageConverter}s to use for reading or writing, +	 * to the body of the request or response. If no converters are added, a, +	 * default list of converters is registered., +	 * <p><strong>Note</strong> that adding converters to the list, turns off, +	 * default converter registration. To simply add a converter without impacting, +	 * default registration, consider using the method, +	 * {@link #extendMessageConverters(java.util.List)} instead., +	 * A hook for extending or modifying the list of converters after it has been, +	 * configured. This may be useful for example to allow default converters to, +	 * be registered and then insert a custom converter through this method., +	 * @param converters the list of configured converters to extend., +	 * @since 4.1.3, +	 */, +	void extendMessageConverters(List<HttpMessageConverter<?>> converters);, +, +	/**, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.java, +	protected void extendMessageConverters(List<HttpMessageConverter<?>> converters) {, +		this.configurers.extendMessageConverters(converters);, +	}, +, +	@Override, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +			extendMessageConverters(this.messageConverters);, +	protected void extendMessageConverters(List<HttpMessageConverter<?>> converters) {, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.java, +	 * Configure the {@link HttpMessageConverter}s to use for reading or writing, +	 * to the body of the request or response. If no converters are added, a, +	 * default list of converters is registered., +	 * <p><strong>Note</strong> that adding converters to the list, turns off, +	 * default converter registration. To simply add a converter without impacting, +	 * default registration, consider using the method, +	 * {@link #extendMessageConverters(java.util.List)} instead., +	 * A hook for extending or modifying the list of converters after it has been, +	 * configured. This may be useful for example to allow default converters to, +	 * be registered and then insert a custom converter through this method., +	 * @param converters the list of configured converters to extend., +	 * @since 4.1.3, +	 */, +	void extendMessageConverters(List<HttpMessageConverter<?>> converters);, +, +	/**, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerAdapter.java, +	 * <p>This implementation is empty., +	 */, +	@Override, +	public void extendMessageConverters(List<HttpMessageConverter<?>> converters) {, +	}, +, +	/**, +	 * {@inheritDoc}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.java, +	protected void extendMessageConverters(List<HttpMessageConverter<?>> converters) {, +		this.configurers.extendMessageConverters(converters);, +	}, +, +	@Override, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +			extendMessageConverters(this.messageConverters);, +	protected void extendMessageConverters(List<HttpMessageConverter<?>> converters) {, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.java, +	 * Configure the {@link HttpMessageConverter}s to use for reading or writing, +	 * to the body of the request or response. If no converters are added, a, +	 * default list of converters is registered., +	 * <p><strong>Note</strong> that adding converters to the list, turns off, +	 * default converter registration. To simply add a converter without impacting, +	 * default registration, consider using the method]