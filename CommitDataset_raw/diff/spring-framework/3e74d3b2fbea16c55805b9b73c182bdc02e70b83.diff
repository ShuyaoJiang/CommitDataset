[+++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, + * @author Stephane Nicoll, +		return toWrapper(element);, +	public ValueWrapper putIfAbsent(Object key, Object value) {, +		Element existingElement = this.cache.putIfAbsent(new Element(key, value));, +		return toWrapper(existingElement);, +	}, +, +	@Override, +	private ValueWrapper toWrapper(Element element) {, +		return (element != null ? new SimpleValueWrapper(element.getObjectValue()) : null);, +	}, +, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, + * @author Stephane Nicoll, +		return toWrapper(element);, +	public ValueWrapper putIfAbsent(Object key, Object value) {, +		Element existingElement = this.cache.putIfAbsent(new Element(key, value));, +		return toWrapper(existingElement);, +	}, +, +	@Override, +	private ValueWrapper toWrapper(Element element) {, +		return (element != null ? new SimpleValueWrapper(element.getObjectValue()) : null);, +	}, +, +++ b/spring-context-support/src/main/java/org/springframework/cache/guava/GuavaCache.java, +import java.util.concurrent.Callable;, +import java.util.concurrent.ExecutionException;, + * @author Stephane Nicoll, +		return toWrapper(value);, +	public ValueWrapper putIfAbsent(Object key, final Object value) {, +		try {, +			PutIfAbsentCallable callable = new PutIfAbsentCallable(value);, +			Object result = this.cache.get(key, callable);, +			return (callable.called ? null : toWrapper(result));, +		} catch (ExecutionException e) {, +			throw new IllegalArgumentException(e);, +		}, +	}, +, +	@Override, +	private ValueWrapper toWrapper(Object value) {, +		return (value != null ? new SimpleValueWrapper(fromStoreValue(value)) : null);, +	}, +, +	private class PutIfAbsentCallable implements Callable<Object> {, +		private boolean called;, +, +		private final Object value;, +, +		private PutIfAbsentCallable(Object value) {, +			this.value = value;, +		}, +, +		@Override, +		public Object call() throws Exception {, +			called = true;, +			return toStoreValue(value);, +		}, +	}, +, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, + * @author Stephane Nicoll, +		return toWrapper(element);, +	public ValueWrapper putIfAbsent(Object key, Object value) {, +		Element existingElement = this.cache.putIfAbsent(new Element(key, value));, +		return toWrapper(existingElement);, +	}, +, +	@Override, +	private ValueWrapper toWrapper(Element element) {, +		return (element != null ? new SimpleValueWrapper(element.getObjectValue()) : null);, +	}, +, +++ b/spring-context-support/src/main/java/org/springframework/cache/guava/GuavaCache.java, +import java.util.concurrent.Callable;, +import java.util.concurrent.ExecutionException;, + * @author Stephane Nicoll, +		return toWrapper(value);, +	public ValueWrapper putIfAbsent(Object key, final Object value) {, +		try {, +			PutIfAbsentCallable callable = new PutIfAbsentCallable(value);, +			Object result = this.cache.get(key, callable);, +			return (callable.called ? null : toWrapper(result));, +		} catch (ExecutionException e) {, +			throw new IllegalArgumentException(e);, +		}, +	}, +, +	@Override, +	private ValueWrapper toWrapper(Object value) {, +		return (value != null ? new SimpleValueWrapper(fromStoreValue(value)) : null);, +	}, +, +	private class PutIfAbsentCallable implements Callable<Object> {, +		private boolean called;, +, +		private final Object value;, +]