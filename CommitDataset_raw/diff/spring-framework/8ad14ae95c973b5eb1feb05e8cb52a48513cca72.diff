[+++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSession.java, +	 * Constructor for creating a new session with an updated last access time., +	 * @param existingSession the existing session to copy, +	 * @param lastAccessTime the new last access time, +		this.state = existingSession.isStarted() ? State.STARTED : State.NEW;, +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSession.java, +	 * Constructor for creating a new session with an updated last access time., +	 * @param existingSession the existing session to copy, +	 * @param lastAccessTime the new last access time, +		this.state = existingSession.isStarted() ? State.STARTED : State.NEW;, +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java, +						.switchIfEmpty(this.sessionStore.createWebSession()), +						.doOnNext(session -> exchange.getResponse().beforeCommit(() -> save(exchange, session))));, +	private Mono<Void> save(ServerWebExchange exchange, WebSession session) {, +			DefaultWebSessionManager.this.sessionIdResolver.setSessionId(exchange, session.getId());, +		return session.save();, +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSession.java, +	 * Constructor for creating a new session with an updated last access time., +	 * @param existingSession the existing session to copy, +	 * @param lastAccessTime the new last access time, +		this.state = existingSession.isStarted() ? State.STARTED : State.NEW;, +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java, +						.switchIfEmpty(this.sessionStore.createWebSession()), +						.doOnNext(session -> exchange.getResponse().beforeCommit(() -> save(exchange, session))));, +	private Mono<Void> save(ServerWebExchange exchange, WebSession session) {, +			DefaultWebSessionManager.this.sessionIdResolver.setSessionId(exchange, session.getId());, +		return session.save();, +++ b/spring-web/src/test/java/org/springframework/web/server/session/DefaultWebSessionManagerTests.java, +import static org.mockito.Mockito.verifyZeroInteractions;, +	@Mock, +	private WebSession createSession;, +, +	@Mock, +	private WebSession retrieveSession;, +, +	@Mock, +	private WebSession updateSession;, +, +		when(this.store.createWebSession()).thenReturn(Mono.just(this.createSession));, +		when(this.store.updateLastAccessTime(any())).thenReturn(Mono.just(this.updateSession));, +		when(this.store.retrieveSession(any())).thenReturn(Mono.just(this.retrieveSession));, +		when(this.createSession.save()).thenReturn(Mono.empty());, +		when(this.updateSession.getId()).thenReturn("update-session-id");, +		when(this.retrieveSession.getId()).thenReturn("retrieve-session-id");, +	public void getSessionSaveWhenCreatedAndNotStartedThenNotSaved() throws Exception {, +		this.exchange.getResponse().setComplete().block();, +		verifyZeroInteractions(this.retrieveSession, this.updateSession);, +		verify(this.createSession, never()).save();, +	public void getSessionSaveWhenCreatedAndStartedThenSavesAndSetsId() throws Exception {, +		when(this.createSession.isStarted()).thenReturn(true);, +		this.exchange.getResponse().setComplete().block();, +		verify(this.createSession).save();, +		String id = this.createSession.getId();, +		when(this.createSession.isStarted()).thenReturn(true);, +		verify(this.createSession).save();, +		String id = this.updateSession.getId();, +		when(this.store.retrieveSession(id)).thenReturn(Mono.just(this.updateSession));, +		assertEquals(id, actual.getId());, +		String id = this.retrieveSession.getId();, +		when(this.retrieveSession.isExpired()).thenReturn(true);, +		when(this.idResolver.resolveSessionIds(this.exchange)).thenReturn(Collections.singletonList(id));, +		when(this.store.removeSession(any())).thenReturn(Mono.empty());, +		assertEquals(this.createSession.getId(), actual.getId());, +		verify(this.store).removeSession(id);, +		WebSession existing = this.updateSession;, +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSession.java, +	 * Constructor for creating a new session with an updated last access time., +	 * @param existingSession the existing session to copy, +	 * @param lastAccessTime the new last access time, +		this.state = existingSession.isStarted() ? State.STARTED : State.NEW;, +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java, +						.switchIfEmpty(this.sessionStore.createWebSession()), +						.doOnNext(session -> exchange.getResponse().beforeCommit(() -> save(exchange, session))));, +	private Mono<Void> save(ServerWebExchange exchange, WebSession session) {, +			DefaultWebSessionManager.this.sessionIdResolver.setSessionId(exchange, session.getId());, +		return session.save();, +++ b/spring-web/src/test/java/org/springframework/web/server/session/DefaultWebSessionManagerTests.java, +import static org.mockito.Mockito.verifyZeroInteractions;, +	@Mock, +	private WebSession createSession;, +, +	@Mock, +	private WebSession retrieveSession;, +, +	@Mock, +	private WebSession updateSession;, +, +		when(this.store.createWebSession()).thenReturn(Mono.just(this.createSession));, +		when(this.store.updateLastAccessTime(any())).thenReturn(Mono.just(this.updateSession));, +		when(this.store.retrieveSession(any())).thenReturn(Mono.just(this.retrieveSession));, +		when(this.createSession.save()).thenReturn(Mono.empty());, +		when(this.updateSession.getId()).thenReturn("update-session-id");, +		when(this.retrieveSession.getId()).thenReturn("retrieve-session-id");, +	public void getSessionSaveWhenCreatedAndNotStartedThenNotSaved() throws Exception {, +		this.exchange.getResponse().setComplete().block();, +		verifyZeroInteractions(this.retrieveSession, this.updateSession);, +		verify(this.createSession, never()).save();, +	public void getSessionSaveWhenCreatedAndStartedThenSavesAndSetsId() throws Exception {, +		when(this.createSession.isStarted()).thenReturn(true);, +		this.exchange.getResponse().setComplete().block();]