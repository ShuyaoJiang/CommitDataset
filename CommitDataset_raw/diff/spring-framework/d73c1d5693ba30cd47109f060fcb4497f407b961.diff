[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/ConnectionManagerSupport.java, +	private boolean running = false;, +			return this.running;, +			this.running = true;, +					this.running = false;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/ConnectionManagerSupport.java, +	private boolean running = false;, +			return this.running;, +			this.running = true;, +					this.running = false;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/WebSocketConnectionManager.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.context.Lifecycle;, +		if (this.client instanceof Lifecycle && !((Lifecycle) client).isRunning()) {, +			((Lifecycle) client).start();, +		if (this.client instanceof Lifecycle && ((Lifecycle) client).isRunning()) {, +			((Lifecycle) client).stop();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/ConnectionManagerSupport.java, +	private boolean running = false;, +			return this.running;, +			this.running = true;, +					this.running = false;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/WebSocketConnectionManager.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.context.Lifecycle;, +		if (this.client instanceof Lifecycle && !((Lifecycle) client).isRunning()) {, +			((Lifecycle) client).start();, +		if (this.client instanceof Lifecycle && ((Lifecycle) client).isRunning()) {, +			((Lifecycle) client).stop();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/jetty/JettyWebSocketClient.java, +import org.springframework.context.Lifecycle;, + * <p>As of 4.1 this class implements {@link Lifecycle} rather than, + * {@link org.springframework.context.SmartLifecycle}. Use, + * {@link org.springframework.web.socket.client.WebSocketConnectionManager, + * WebSocketConnectionManager} instead to auto-start a WebSocket connection., + *, +public class JettyWebSocketClient extends AbstractWebSocketClient implements Lifecycle {, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/ConnectionManagerSupport.java, +	private boolean running = false;, +			return this.running;, +			this.running = true;, +					this.running = false;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/WebSocketConnectionManager.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.context.Lifecycle;, +		if (this.client instanceof Lifecycle && !((Lifecycle) client).isRunning()) {, +			((Lifecycle) client).start();, +		if (this.client instanceof Lifecycle && ((Lifecycle) client).isRunning()) {, +			((Lifecycle) client).stop();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/jetty/JettyWebSocketClient.java, +import org.springframework.context.Lifecycle;, + * <p>As of 4.1 this class implements {@link Lifecycle} rather than, + * {@link org.springframework.context.SmartLifecycle}. Use, + * {@link org.springframework.web.socket.client.WebSocketConnectionManager, + * WebSocketConnectionManager} instead to auto-start a WebSocket connection., + *, +public class JettyWebSocketClient extends AbstractWebSocketClient implements Lifecycle {, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/client/WebSocketConnectionManagerTests.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.context.Lifecycle;, +import org.springframework.web.socket.handler.TextWebSocketHandler;, +, +		WebSocketHandler handler = new TextWebSocketHandler();, +	public void clientLifecycle() throws Exception {, +		WebSocketHandler handler = new TextWebSocketHandler();, +	private static class TestLifecycleWebSocketClient implements WebSocketClient, Lifecycle {, +		public ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler handler, String uriTemplate, Object... uriVars) {, +			return doHandshake(handler, null, uri);, +		public ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler handler, WebSocketHttpHeaders headers, URI uri) {, +			this.webSocketHandler = handler;, +			return new ListenableFutureTask<>(() -> null);]