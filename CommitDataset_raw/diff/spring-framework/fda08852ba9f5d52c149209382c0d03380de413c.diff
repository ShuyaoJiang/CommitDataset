[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/HandlerResultHandlerSupport.java, +		MediaType contentType = exchange.getResponse().getHeaders().getContentType();, +		if (contentType != null && contentType.isConcrete()) {, +			return contentType;, +		}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/HandlerResultHandlerSupport.java, +		MediaType contentType = exchange.getResponse().getHeaders().getContentType();, +		if (contentType != null && contentType.isConcrete()) {, +			return contentType;, +		}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +, +		List<MediaType> mediaTypesToUse;, +		if (contentType != null && contentType.isConcrete()) {, +			mediaTypesToUse = Collections.singletonList(contentType);, +		}, +		else {, +			HttpServletRequest request = inputMessage.getServletRequest();, +			List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(request);, +			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request, valueType, declaredType);, +				throw new HttpMessageNotWritableException(, +						"No converter found for return value of type: " + valueType);, +			mediaTypesToUse = new ArrayList<>();, +						mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType));, +			if (mediaTypesToUse.isEmpty()) {, +			MediaType.sortBySpecificityAndQuality(mediaTypesToUse);, +		}, +		for (MediaType mediaType : mediaTypesToUse) {]