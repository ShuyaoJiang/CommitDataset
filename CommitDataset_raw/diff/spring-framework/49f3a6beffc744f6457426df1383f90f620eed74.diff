[+++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/HibernateTransactionManager.java, +import java.sql.ResultSet;, +	private boolean allowResultAccessAfterCompletion = false;, +, +	 * Set whether to allow result access after completion, typically via Hibernate's, +	 * ScrollableResults mechanism., +	 * <p>Default is "false". Turning this flag on enforces over-commit holdability on the, +	 * underlying JDBC Connection (if {@link #prepareConnection "prepareConnection"} is on), +	 * and skips the disconnect-on-completion step., +	 * @since 4.1.2, +	 * @see java.sql.Connection#setHoldability, +	 * @see ResultSet#HOLD_CURSORS_OVER_COMMIT, +	 * @see #disconnectOnCompletion(Session), +	 */, +	public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion) {, +		this.allowResultAccessAfterCompletion = allowResultAccessAfterCompletion;, +	}, +, +	/**, +				if (this.allowResultAccessAfterCompletion && !txObject.isNewSession()) {, +					int currentHoldability = con.getHoldability();, +					if (currentHoldability != ResultSet.HOLD_CURSORS_OVER_COMMIT) {, +						txObject.setPreviousHoldability(currentHoldability);, +						con.setHoldability(ResultSet.HOLD_CURSORS_OVER_COMMIT);, +					}, +				}, +				Integer previousHoldability = txObject.getPreviousHoldability();, +				if (previousHoldability != null) {, +					con.setHoldability(previousHoldability);, +				}, +			catch (Throwable ex) {, +				logger.debug("Could not reset JDBC Connection after transaction", ex);, +			}, +			if (!this.allowResultAccessAfterCompletion && !this.hibernateManagedSession) {, +				disconnectOnCompletion(session);, +	 * Disconnect a pre-existing Hibernate Session on transaction completion,, +	 * returning its database connection but preserving its entity state., +	 * <p>The default implementation simply calls {@link Session#disconnect()}., +	 * Subclasses may override this with a no-op or with fine-tuned disconnection logic., +	 * @param session the Hibernate Session to disconnect, +	 * @since 4.1.2, +	 * @see org.hibernate.Session#disconnect(), +	 */, +	protected void disconnectOnCompletion(Session session) {, +		session.disconnect();, +	}, +, +	/**, +		private Integer previousHoldability;, +, +		public void setPreviousHoldability(Integer previousHoldability) {, +			this.previousHoldability = previousHoldability;, +		}, +, +		public Integer getPreviousHoldability() {, +			return this.previousHoldability;, +		}, +, +++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/HibernateTransactionManager.java, +import java.sql.ResultSet;, +	private boolean allowResultAccessAfterCompletion = false;, +, +	 * Set whether to allow result access after completion, typically via Hibernate's, +	 * ScrollableResults mechanism., +	 * <p>Default is "false". Turning this flag on enforces over-commit holdability on the, +	 * underlying JDBC Connection (if {@link #prepareConnection "prepareConnection"} is on), +	 * and skips the disconnect-on-completion step., +	 * @since 4.1.2, +	 * @see java.sql.Connection#setHoldability, +	 * @see ResultSet#HOLD_CURSORS_OVER_COMMIT, +	 * @see #disconnectOnCompletion(Session), +	 */, +	public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion) {, +		this.allowResultAccessAfterCompletion = allowResultAccessAfterCompletion;, +	}, +, +	/**, +				if (this.allowResultAccessAfterCompletion && !txObject.isNewSession()) {, +					int currentHoldability = con.getHoldability();, +					if (currentHoldability != ResultSet.HOLD_CURSORS_OVER_COMMIT) {, +						txObject.setPreviousHoldability(currentHoldability);, +						con.setHoldability(ResultSet.HOLD_CURSORS_OVER_COMMIT);, +					}, +				}, +				Integer previousHoldability = txObject.getPreviousHoldability();, +				if (previousHoldability != null) {, +					con.setHoldability(previousHoldability);, +				}, +			catch (Throwable ex) {, +				logger.debug("Could not reset JDBC Connection after transaction", ex);, +			}, +			if (!this.allowResultAccessAfterCompletion && !this.hibernateManagedSession) {, +				disconnectOnCompletion(session);, +	 * Disconnect a pre-existing Hibernate Session on transaction completion,, +	 * returning its database connection but preserving its entity state., +	 * <p>The default implementation simply calls {@link Session#disconnect()}., +	 * Subclasses may override this with a no-op or with fine-tuned disconnection logic., +	 * @param session the Hibernate Session to disconnect, +	 * @since 4.1.2, +	 * @see org.hibernate.Session#disconnect()]