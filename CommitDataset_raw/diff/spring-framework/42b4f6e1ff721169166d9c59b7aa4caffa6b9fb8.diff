[+++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceRegionEncoder.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceRegionEncoder.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-core/src/test/java/org/springframework/core/BridgeMethodResolverTests.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceRegionEncoder.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-core/src/test/java/org/springframework/core/BridgeMethodResolverTests.java, +++ b/spring-core/src/test/java/org/springframework/core/ConstantsTests.java, + * Copyright 2002-2018 the original author or authors., +		assertTrue(values.contains(Integer.valueOf(0)));, +		assertTrue(values.contains(Integer.valueOf(66)));, +		assertTrue(values.contains(Integer.valueOf(0)));, +		assertTrue(values.contains(Integer.valueOf(1)));, +		assertTrue(values.contains(Integer.valueOf(2)));, +		assertTrue(values.contains(Integer.valueOf(1)));, +		assertTrue(values.contains(Integer.valueOf(2)));, +			assertTrue(values.contains(Integer.valueOf(0)));, +			assertTrue(values.contains(Integer.valueOf(66)));, +			assertTrue(values.contains(Integer.valueOf(0)));, +			assertTrue(values.contains(Integer.valueOf(1)));, +			assertTrue(values.contains(Integer.valueOf(2)));, +			assertTrue(values.contains(Integer.valueOf(1)));, +			assertTrue(values.contains(Integer.valueOf(2)));, +		assertTrue(values.contains(Integer.valueOf(3)));, +		assertTrue(values.contains(Integer.valueOf(4)));, +		assertEquals("DOG", c.toCode(Integer.valueOf(0), ""));, +		assertEquals("DOG", c.toCode(Integer.valueOf(0), "D"));, +		assertEquals("DOG", c.toCode(Integer.valueOf(0), "DO"));, +		assertEquals("DOG", c.toCode(Integer.valueOf(0), "DoG"));, +		assertEquals("DOG", c.toCode(Integer.valueOf(0), null));, +		assertEquals("CAT", c.toCode(Integer.valueOf(66), ""));, +		assertEquals("CAT", c.toCode(Integer.valueOf(66), "C"));, +		assertEquals("CAT", c.toCode(Integer.valueOf(66), "ca"));, +		assertEquals("CAT", c.toCode(Integer.valueOf(66), "cAt"));, +		assertEquals("CAT", c.toCode(Integer.valueOf(66), null));, +		assertEquals("MY_PROPERTY_NO", c.toCodeForProperty(Integer.valueOf(1), "myProperty"));, +		assertEquals("MY_PROPERTY_YES", c.toCodeForProperty(Integer.valueOf(2), "myProperty"));, +		assertEquals("DOG", c.toCodeForSuffix(Integer.valueOf(0), ""));, +		assertEquals("DOG", c.toCodeForSuffix(Integer.valueOf(0), "G"));, +		assertEquals("DOG", c.toCodeForSuffix(Integer.valueOf(0), "OG"));, +		assertEquals("DOG", c.toCodeForSuffix(Integer.valueOf(0), "DoG"));, +		assertEquals("DOG", c.toCodeForSuffix(Integer.valueOf(0), null));, +		assertEquals("CAT", c.toCodeForSuffix(Integer.valueOf(66), ""));, +		assertEquals("CAT", c.toCodeForSuffix(Integer.valueOf(66), "T"));, +		assertEquals("CAT", c.toCodeForSuffix(Integer.valueOf(66), "at"));, +		assertEquals("CAT", c.toCodeForSuffix(Integer.valueOf(66), "cAt"));, +		assertEquals("CAT", c.toCodeForSuffix(Integer.valueOf(66), null));, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceRegionEncoder.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-core/src/test/java/org/springframework/core/BridgeMethodResolverTests.java, +++ b/spring-core/src/test/java/org/springframework/core/ConstantsTests.java, + * Copyright 2002-2018 the original author or authors., +		assertTrue(values.contains(Integer.valueOf(0)));, +		assertTrue(values.contains(Integer.valueOf(66)));, +		assertTrue(values.contains(Integer.valueOf(0)));, +		assertTrue(values.contains(Integer.valueOf(1)));, +		assertTrue(values.contains(Integer.valueOf(2)));, +		assertTrue(values.contains(Integer.valueOf(1)));, +		assertTrue(values.contains(Integer.valueOf(2)));, +			assertTrue(values.contains(Integer.valueOf(0)));, +			assertTrue(values.contains(Integer.valueOf(66)));, +			assertTrue(values.contains(Integer.valueOf(0)));, +			assertTrue(values.contains(Integer.valueOf(1)));, +			assertTrue(values.contains(Integer.valueOf(2)));, +			assertTrue(values.contains(Integer.valueOf(1)));, +			assertTrue(values.contains(Integer.valueOf(2)));, +		assertTrue(values.contains(Integer.valueOf(3)));, +		assertTrue(values.contains(Integer.valueOf(4)));, +		assertEquals("DOG", c.toCode(Integer.valueOf(0), ""));, +		assertEquals("DOG", c.toCode(Integer.valueOf(0), "D"));, +		assertEquals("DOG", c.toCode(Integer.valueOf(0), "DO"));, +		assertEquals("DOG", c.toCode(Integer.valueOf(0), "DoG"));, +		assertEquals("DOG", c.toCode(Integer.valueOf(0), null));, +		assertEquals("CAT", c.toCode(Integer.valueOf(66), ""));, +		assertEquals("CAT", c.toCode(Integer.valueOf(66), "C"));, +		assertEquals("CAT", c.toCode(Integer.valueOf(66), "ca"));, +		assertEquals("CAT", c.toCode(Integer.valueOf(66), "cAt"));, +		assertEquals("CAT", c.toCode(Integer.valueOf(66), null));, +		assertEquals("MY_PROPERTY_NO", c.toCodeForProperty(Integer.valueOf(1), "myProperty"));, +		assertEquals("MY_PROPERTY_YES", c.toCodeForProperty(Integer.valueOf(2), "myProperty"));, +		assertEquals("DOG", c.toCodeForSuffix(Integer.valueOf(0), ""));, +		assertEquals("DOG", c.toCodeForSuffix(Integer.valueOf(0), "G"));, +		assertEquals("DOG", c.toCodeForSuffix(Integer.valueOf(0), "OG"));, +		assertEquals("DOG", c.toCodeForSuffix(Integer.valueOf(0), "DoG"));, +		assertEquals("DOG", c.toCodeForSuffix(Integer.valueOf(0), null));, +		assertEquals("CAT", c.toCodeForSuffix(Integer.valueOf(66), ""));, +		assertEquals("CAT", c.toCodeForSuffix(Integer.valueOf(66), "T"));, +		assertEquals("CAT", c.toCodeForSuffix(Integer.valueOf(66), "at"));, +		assertEquals("CAT", c.toCodeForSuffix(Integer.valueOf(66), "cAt"));, +		assertEquals("CAT", c.toCodeForSuffix(Integer.valueOf(66), null));, +++ b/spring-core/src/test/java/org/springframework/core/codec/DataBufferDecoderTests.java, + * Copyright 2002-2018 the original author or authors., +	}, +]