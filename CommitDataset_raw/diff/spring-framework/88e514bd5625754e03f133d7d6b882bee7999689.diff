[+++ b/spring-test/src/main/java/org/springframework/test/context/junit4/AbstractTransactionalJUnit4SpringContextTests.java, + * Copyright 2002-2013 the original author or authors., +	 * <p>This method also instantiates the {@link #jdbcTemplate} instance, +     * variable., +++ b/spring-test/src/main/java/org/springframework/test/context/junit4/AbstractTransactionalJUnit4SpringContextTests.java, + * Copyright 2002-2013 the original author or authors., +	 * <p>This method also instantiates the {@link #jdbcTemplate} instance, +     * variable., +++ b/spring-test/src/main/java/org/springframework/test/context/testng/AbstractTransactionalTestNGSpringContextTests.java, + * Copyright 2002-2013 the original author or authors., +	 * <p>This method also instantiates the {@link #jdbcTemplate} instance, +     * variable., +++ b/spring-test/src/main/java/org/springframework/test/context/junit4/AbstractTransactionalJUnit4SpringContextTests.java, + * Copyright 2002-2013 the original author or authors., +	 * <p>This method also instantiates the {@link #jdbcTemplate} instance, +     * variable., +++ b/spring-test/src/main/java/org/springframework/test/context/testng/AbstractTransactionalTestNGSpringContextTests.java, + * Copyright 2002-2013 the original author or authors., +	 * <p>This method also instantiates the {@link #jdbcTemplate} instance, +     * variable., +++ b/spring-test/src/main/java/org/springframework/test/jdbc/JdbcTestUtils.java, +++ b/spring-test/src/main/java/org/springframework/test/context/junit4/AbstractTransactionalJUnit4SpringContextTests.java, + * Copyright 2002-2013 the original author or authors., +	 * <p>This method also instantiates the {@link #jdbcTemplate} instance, +     * variable., +++ b/spring-test/src/main/java/org/springframework/test/context/testng/AbstractTransactionalTestNGSpringContextTests.java, + * Copyright 2002-2013 the original author or authors., +	 * <p>This method also instantiates the {@link #jdbcTemplate} instance, +     * variable., +++ b/spring-test/src/main/java/org/springframework/test/jdbc/JdbcTestUtils.java, +++ /dev/null, +++ b/spring-test/src/main/java/org/springframework/test/context/junit4/AbstractTransactionalJUnit4SpringContextTests.java, + * Copyright 2002-2013 the original author or authors., +	 * <p>This method also instantiates the {@link #jdbcTemplate} instance, +     * variable., +++ b/spring-test/src/main/java/org/springframework/test/context/testng/AbstractTransactionalTestNGSpringContextTests.java, + * Copyright 2002-2013 the original author or authors., +	 * <p>This method also instantiates the {@link #jdbcTemplate} instance, +     * variable., +++ b/spring-test/src/main/java/org/springframework/test/jdbc/JdbcTestUtils.java, +++ /dev/null, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/ConcreteTransactionalJUnit4SpringContextTests.java, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.test.jdbc.JdbcTestUtils;, +	protected static int clearPersonTable(final JdbcTemplate jdbcTemplate) {, +		return JdbcTestUtils.deleteFromTables(jdbcTemplate, "person");, +	protected static void createPersonTable(final JdbcTemplate jdbcTemplate) {, +			jdbcTemplate.update("CREATE TABLE person (name VARCHAR(20) NOT NULL, PRIMARY KEY(name))");, +	protected static int countRowsInPersonTable(final JdbcTemplate jdbcTemplate) {, +		return JdbcTestUtils.countRowsInTable(jdbcTemplate, "person");, +	protected static int addPerson(final JdbcTemplate jdbcTemplate, final String name) {, +		return jdbcTemplate.update("INSERT INTO person VALUES(?)", name);, +	protected static int deletePerson(final JdbcTemplate jdbcTemplate, final String name) {, +		return jdbcTemplate.update("DELETE FROM person WHERE name=?", name);, +			countRowsInPersonTable(super.jdbcTemplate));, +		assertEquals("Adding yoda", 1, addPerson(super.jdbcTemplate, YODA));, +			(inTransaction() ? 2 : 1), countRowsInPersonTable(super.jdbcTemplate));, +		assertEquals("Adding jane", 1, addPerson(super.jdbcTemplate, JANE));, +		assertEquals("Adding sue", 1, addPerson(super.jdbcTemplate, SUE));, +			countRowsInPersonTable(super.jdbcTemplate));, +			(inTransaction() ? 4 : 1), countRowsInPersonTable(super.jdbcTemplate));, +		assertEquals("Deleting yoda", 1, deletePerson(super.jdbcTemplate, YODA));, +			countRowsInPersonTable(super.jdbcTemplate));, +			JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);, +			createPersonTable(jdbcTemplate);, +			clearPersonTable(jdbcTemplate);, +			addPerson(jdbcTemplate, BOB);, +++ b/spring-test/src/main/java/org/springframework/test/context/junit4/AbstractTransactionalJUnit4SpringContextTests.java, + * Copyright 2002-2013 the original author or authors., +	 * <p>This method also instantiates the {@link #jdbcTemplate} instance, +     * variable., +++ b/spring-test/src/main/java/org/springframework/test/context/testng/AbstractTransactionalTestNGSpringContextTests.java, + * Copyright 2002-2013 the original author or authors., +	 * <p>This method also instantiates the {@link #jdbcTemplate} instance, +     * variable., +++ b/spring-test/src/main/java/org/springframework/test/jdbc/JdbcTestUtils.java, +++ /dev/null, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/ConcreteTransactionalJUnit4SpringContextTests.java, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.test.jdbc.JdbcTestUtils;, +	protected static int clearPersonTable(final JdbcTemplate jdbcTemplate) {, +		return JdbcTestUtils.deleteFromTables(jdbcTemplate, "person");, +	protected static void createPersonTable(final JdbcTemplate jdbcTemplate) {, +			jdbcTemplate.update("CREATE TABLE person (name VARCHAR(20) NOT NULL, PRIMARY KEY(name))");, +	protected static int countRowsInPersonTable(final JdbcTemplate jdbcTemplate) {, +		return JdbcTestUtils.countRowsInTable(jdbcTemplate, "person");, +	protected static int addPerson(final JdbcTemplate jdbcTemplate, final String name) {, +		return jdbcTemplate.update("INSERT INTO person VALUES(?)", name);, +	protected static int deletePerson(final JdbcTemplate jdbcTemplate, final String name) {, +		return jdbcTemplate.update("DELETE FROM person WHERE name=?", name);, +			countRowsInPersonTable(super.jdbcTemplate));, +		assertEquals("Adding yoda", 1, addPerson(super.jdbcTemplate, YODA));, +			(inTransaction() ? 2 : 1), countRowsInPersonTable(super.jdbcTemplate));, +		assertEquals("Adding jane", 1, addPerson(super.jdbcTemplate, JANE));, +		assertEquals("Adding sue", 1, addPerson(super.jdbcTemplate, SUE));, +			countRowsInPersonTable(super.jdbcTemplate));, +			(inTransaction() ? 4 : 1), countRowsInPersonTable(super.jdbcTemplate));, +		assertEquals("Deleting yoda", 1, deletePerson(super.jdbcTemplate, YODA));, +			countRowsInPersonTable(super.jdbcTemplate));, +			JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);]