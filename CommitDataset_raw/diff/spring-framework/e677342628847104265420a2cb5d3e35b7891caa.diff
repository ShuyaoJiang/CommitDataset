[+++ b/spring-messaging/src/main/java/org/springframework/messaging/support/ErrorMessage.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.messaging.Message;, + * The payload is typically a {@link org.springframework.messaging.MessagingException}, + * with the message at the point of failure in its {@code failedMessage} property., + * An optional {@code originalMessage} may be provided, which represents the message, + * that existed at the point in the stack where the error message is created., + * <p>Consider some code that starts with a message, invokes some process that performs, + * transformation on that message and then fails for some reason, throwing the exception., + * The exception is caught and an error message produced that contains both the original, + * message, and the transformed message that failed., + * @author Gary Russell, +	private final Message<?> originalMessage;, +		this.originalMessage = null;, +		this.originalMessage = null;, +		this.originalMessage = null;, +	}, +, +	/**, +	 * Create a new message with the given payload and original message., +	 * @param payload the message payload (never {@code null}), +	 * @param originalMessage the original message (if present) at the point in the stack, +	 *        where the ErrorMessage was created, +	 * @since 5.0, +	 */, +	public ErrorMessage(Throwable payload, Message<?> originalMessage) {, +		super(payload);, +		this.originalMessage = originalMessage;, +	}, +, +	/**, +	 * Create a new message with the given payload, headers and original message., +	 * The content of the given header map is copied., +	 * @param payload the message payload (never {@code null}), +	 * @param headers message headers to use for initialization, +	 * @param originalMessage the original message (if present) at the point in the stack, +	 *        where the ErrorMessage was created, +	 * @since 5.0, +	 */, +	public ErrorMessage(Throwable payload, Map<String, Object> headers, Message<?> originalMessage) {, +		super(payload, headers);, +		this.originalMessage = originalMessage;, +	}, +, +	/**, +	 * Create a new message with the payload, {@link MessageHeaders} and original message., +	 * <p><strong>Note:</strong> the given {@code MessageHeaders} instance, +	 * is used directly in the new message, i.e. it is not copied., +	 * @param payload the message payload (never {@code null}), +	 * @param headers message headers, +	 * @param originalMessage the original message (if present) at the point in the stack, +	 *        where the ErrorMessage was created, +	 * @since 5.0, +	 */, +	public ErrorMessage(Throwable payload, MessageHeaders headers, Message<?> originalMessage) {, +		super(payload, headers);, +		this.originalMessage = originalMessage;, +	}, +, +	/**, +	 * The original message (if present) at the point in the stack where the, +	 * ErrorMessage was created., +	 * @return the originalMessage, +	 */, +	public Message<?> getOriginalMessage() {, +		return originalMessage;, +	}, +, +	@Override, +	public String toString() {, +		if (this.originalMessage == null) {, +			return super.toString();, +		}, +		else {, +			StringBuilder sb = new StringBuilder(super.toString());, +			if (sb.length() > 0) {, +				sb.setLength(sb.length() - 1);, +			}, +			sb.append(", originalMessage=").append(this.originalMessage.toString()).append("]");, +			return sb.toString();, +		}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/ErrorMessage.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.messaging.Message;, + * The payload is typically a {@link org.springframework.messaging.MessagingException}, + * with the message at the point of failure in its {@code failedMessage} property., + * An optional {@code originalMessage} may be provided, which represents the message, + * that existed at the point in the stack where the error message is created., + * <p>Consider some code that starts with a message, invokes some process that performs, + * transformation on that message and then fails for some reason, throwing the exception., + * The exception is caught and an error message produced that contains both the original, + * message, and the transformed message that failed., + * @author Gary Russell, +	private final Message<?> originalMessage;, +		this.originalMessage = null;, +		this.originalMessage = null;, +		this.originalMessage = null;, +	}, +, +	/**]