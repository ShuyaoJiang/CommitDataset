[+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/context/JavaConfigTests.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.web.servlet.config.annotation.*;, + * @author Sebastien Deleuze, +		@Override, +		public void configureViewResolution(ViewResolutionRegistry registry) {, +			registry.tiles().definition("/WEB-INF/**/tiles.xml");, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/context/JavaConfigTests.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.web.servlet.config.annotation.*;, + * @author Sebastien Deleuze, +		@Override, +		public void configureViewResolution(ViewResolutionRegistry registry) {, +			registry.tiles().definition("/WEB-INF/**/tiles.xml");, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/spr/EncodedUriTests.java, +import org.springframework.web.servlet.config.annotation.ViewResolutionRegistry;, +, +		@Override, +		public void configureViewResolution(ViewResolutionRegistry registry) {, +			registry.jsp("", "");, +		}, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/context/JavaConfigTests.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.web.servlet.config.annotation.*;, + * @author Sebastien Deleuze, +		@Override, +		public void configureViewResolution(ViewResolutionRegistry registry) {, +			registry.tiles().definition("/WEB-INF/**/tiles.xml");, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/spr/EncodedUriTests.java, +import org.springframework.web.servlet.config.annotation.ViewResolutionRegistry;, +, +		@Override, +		public void configureViewResolution(ViewResolutionRegistry registry) {, +			registry.jsp("", "");, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/ViewResolverComposite.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.servlet;, +, +import org.springframework.beans.BeansException;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.ApplicationContextAware;, +import org.springframework.core.Ordered;, +import org.springframework.web.context.ServletContextAware;, +, +import javax.servlet.ServletContext;, +import java.util.Collections;, +import java.util.List;, +import java.util.Locale;, +, +/**, + * A {@link ViewResolverComposite} that delegates to a list of other {@link ViewResolver}s., + *, + * @author Sebastien Deleuze, + * @since 4.1, + */, +public class ViewResolverComposite implements ApplicationContextAware, ServletContextAware, ViewResolver, Ordered {, +, +	private List<ViewResolver> viewResolvers;, +, +	private int order = Ordered.LOWEST_PRECEDENCE;, +, +	public void setOrder(int order) {, +		this.order = order;, +	}, +, +	@Override, +	public int getOrder() {, +		return this.order;, +	}, +, +	/**, +	 * Set the list of view viewResolvers to delegate to., +	 */, +	public void setViewResolvers(List<ViewResolver> viewResolvers) {, +		this.viewResolvers = viewResolvers;, +	}, +, +	/**, +	 * Return the list of view viewResolvers to delegate to., +	 */, +	public List<ViewResolver> getViewResolvers() {, +		return Collections.unmodifiableList(viewResolvers);, +	}, +]