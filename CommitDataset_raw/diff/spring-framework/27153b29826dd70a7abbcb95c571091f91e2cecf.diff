[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorRegistration.java, +, +		String[] include = toArray(this.includePatterns);, +		String[] exclude = toArray(this.excludePatterns);, +		MappedInterceptor mappedInterceptor = new MappedInterceptor(include, exclude, this.interceptor);, +, +, +		return (CollectionUtils.isEmpty(list) ? null : list.toArray(new String[list.size()]));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorRegistration.java, +, +		String[] include = toArray(this.includePatterns);, +		String[] exclude = toArray(this.excludePatterns);, +		MappedInterceptor mappedInterceptor = new MappedInterceptor(include, exclude, this.interceptor);, +, +, +		return (CollectionUtils.isEmpty(list) ? null : list.toArray(new String[list.size()]));, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/InterceptorRegistryTests.java, +	private TestWebRequestInterceptor webInterceptor1;, +	private TestWebRequestInterceptor webInterceptor2;, +, +		this.registry = new InterceptorRegistry();, +		this.webInterceptor1 = new TestWebRequestInterceptor();, +		this.webInterceptor2 = new TestWebRequestInterceptor();, +		this.registry.addInterceptor(this.interceptor1);, +		assertEquals(Arrays.asList(this.interceptor1), interceptors);, +		this.registry.addInterceptor(this.interceptor1);, +		this.registry.addInterceptor(this.interceptor2);, +		assertEquals(Arrays.asList(this.interceptor1, this.interceptor2), interceptors);, +		this.registry.addInterceptor(this.interceptor1).addPathPatterns("/path1/**").excludePathPatterns("/path1/secret");, +		this.registry.addInterceptor(this.interceptor2).addPathPatterns("/path2");, +		assertEquals(Arrays.asList(this.interceptor1), getInterceptorsForPath("/path1"));, +		assertEquals(Arrays.asList(this.interceptor2), getInterceptorsForPath("/path2"));, +		this.registry.addWebRequestInterceptor(this.webInterceptor1);, +		verifyWebInterceptor(interceptors.get(0), this.webInterceptor1);, +		this.registry.addWebRequestInterceptor(this.webInterceptor1);, +		this.registry.addWebRequestInterceptor(this.webInterceptor2);, +		verifyWebInterceptor(interceptors.get(0), this.webInterceptor1);, +		verifyWebInterceptor(interceptors.get(1), this.webInterceptor2);, +		this.registry.addInterceptor(interceptor1).addPathPatterns("/path1/**").pathMatcher(pathMatcher);, +		MappedInterceptor mappedInterceptor = (MappedInterceptor) this.registry.getInterceptors().get(0);, +		this.registry.addWebRequestInterceptor(this.webInterceptor1).addPathPatterns("/path1");, +		this.registry.addWebRequestInterceptor(this.webInterceptor2).addPathPatterns("/path2");, +		verifyWebInterceptor(interceptors.get(0), this.webInterceptor1);, +		verifyWebInterceptor(interceptors.get(0), this.webInterceptor2);, +	// SPR-11130, +, +		this.registry.addInterceptor(this.interceptor1).excludePathPatterns("/path1/secret");, +		this.registry.addInterceptor(this.interceptor2).addPathPatterns("/path2");, +		assertEquals(Arrays.asList(this.interceptor1), getInterceptorsForPath("/path1"));, +		assertEquals(Arrays.asList(this.interceptor1, this.interceptor2), getInterceptorsForPath("/path2"));, +		for (Object interceptor : this.registry.getInterceptors()) {, +	private void verifyWebInterceptor(HandlerInterceptor interceptor, TestWebRequestInterceptor webInterceptor) throws Exception {, +		interceptor.preHandle(this.request, this.response, null);]