[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +, +		if (factoryBeanName != null) {, +			if (factoryMethodName != null) {, +			// If not resolvable above and the referenced factory bean doesn't exist yet,, +			// exit here - we don't want to force the creation of another bean just to, +			// obtain a FactoryBean's object type..., +			if (!isBeanEligibleForMetadataCaching(factoryBeanName)) {, +				return null;, +			}, +		}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +, +		if (factoryBeanName != null) {, +			if (factoryMethodName != null) {, +			// If not resolvable above and the referenced factory bean doesn't exist yet,, +			// exit here - we don't want to force the creation of another bean just to, +			// obtain a FactoryBean's object type..., +			if (!isBeanEligibleForMetadataCaching(factoryBeanName)) {, +				return null;, +			}, +		}, +++ b/spring-context/src/test/java/org/springframework/context/annotation/Spr11202Tests.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.context.annotation;, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +import org.junit.After;, +import org.junit.Test;, +, +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.beans.factory.InitializingBean;, +import org.springframework.core.type.AnnotatedTypeMetadata;, +import org.springframework.core.type.AnnotationMetadata;, +import org.springframework.util.Assert;, +, +import static org.junit.Assert.*;, +, +/**, + * @author Dave Syer, + */, +public class Spr11202Tests {, +, +	private AnnotationConfigApplicationContext context;, +, +	@After, +	public void close() {, +		if (context != null) {, +			context.close();, +		}, +	}, +, +	@Test // Fails, +	public void testWithImporter() {, +		context = new AnnotationConfigApplicationContext(Wrapper.class);, +		assertEquals("foo", context.getBean("value"));, +	}, +	, +	@Test // Passes, +	public void testWithoutImporter() {, +		context = new AnnotationConfigApplicationContext(Config.class);, +		assertEquals("foo", context.getBean("value"));, +	}, +	, +, +	@Configuration, +	@Import(Selector.class), +	protected static class Wrapper {, +	}, +	, +	protected static class Selector implements ImportSelector {, +, +		@Override, +		public String[] selectImports(AnnotationMetadata importingClassMetadata) {, +			return new String[] {Config.class.getName()};, +		}, +	}, +, +	@Configuration, +	protected static class Config {]