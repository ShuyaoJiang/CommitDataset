[+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.Set;, +import java.util.concurrent.ConcurrentHashMap;, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +	protected final Log logger = LogFactory.getLog(getClass());, +, +	private final Set<Class<?>> nonAnnotatedClasses =, +			Collections.newSetFromMap(new ConcurrentHashMap<Class<?>, Boolean>(64));, +, +		if (this.beanFactory == null) {, +	}, +				throw new IllegalStateException("More than one TaskScheduler and/or ScheduledExecutorService  " +, +						"exist within the context. Remove all but one of the beans; or implement the " +, +						"SchedulingConfigurer interface and call ScheduledTaskRegistrar#setScheduler " +, +						"explicitly within the configureTasks() callback. Found the following beans: " +, +						schedulers.keySet());, +		if (!this.nonAnnotatedClasses.contains(bean.getClass())) {, +			final Set<Method> annotatedMethods = new LinkedHashSet<Method>(1);, +					for (Scheduled scheduled :, +							AnnotationUtils.getRepeatableAnnotation(method, Schedules.class, Scheduled.class)) {, +						annotatedMethods.add(method);, +			if (annotatedMethods.isEmpty()) {, +				this.nonAnnotatedClasses.add(bean.getClass());, +				if (logger.isDebugEnabled()) {, +					logger.debug("No @Scheduled annotations found on bean class: " + bean.getClass());, +				}, +			}, +			else {, +				// Non-empty set of methods, +				if (logger.isDebugEnabled()) {, +					logger.debug(annotatedMethods.size() + " @Scheduled methods processed on bean '" + beanName +, +							"': " + annotatedMethods);, +				}, +			}, +		}, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.Set;, +import java.util.concurrent.ConcurrentHashMap;, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +	protected final Log logger = LogFactory.getLog(getClass());, +, +	private final Set<Class<?>> nonAnnotatedClasses =, +			Collections.newSetFromMap(new ConcurrentHashMap<Class<?>, Boolean>(64));, +, +		if (this.beanFactory == null) {, +	}, +				throw new IllegalStateException("More than one TaskScheduler and/or ScheduledExecutorService  " +, +						"exist within the context. Remove all but one of the beans; or implement the " +, +						"SchedulingConfigurer interface and call ScheduledTaskRegistrar#setScheduler " +, +						"explicitly within the configureTasks() callback. Found the following beans: " +, +						schedulers.keySet());, +		if (!this.nonAnnotatedClasses.contains(bean.getClass())) {, +			final Set<Method> annotatedMethods = new LinkedHashSet<Method>(1);, +					for (Scheduled scheduled :, +							AnnotationUtils.getRepeatableAnnotation(method, Schedules.class, Scheduled.class)) {, +						annotatedMethods.add(method);, +			if (annotatedMethods.isEmpty()) {, +				this.nonAnnotatedClasses.add(bean.getClass());, +				if (logger.isDebugEnabled()) {, +					logger.debug("No @Scheduled annotations found on bean class: " + bean.getClass());, +				}, +			}, +			else {, +				// Non-empty set of methods, +				if (logger.isDebugEnabled()) {, +					logger.debug(annotatedMethods.size() + " @Scheduled methods processed on bean '" + beanName +, +							"': " + annotatedMethods);, +				}, +			}, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.Set;, +import java.util.concurrent.ConcurrentHashMap;, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +	protected final Log logger = LogFactory.getLog(getClass());, +, +	private final Set<Class<?>> nonAnnotatedClasses =, +			Collections.newSetFromMap(new ConcurrentHashMap<Class<?>, Boolean>(64));, +, +		if (!this.nonAnnotatedClasses.contains(bean.getClass())) {, +			final Set<Method> annotatedMethods = new LinkedHashSet<Method>(1);, +						annotatedMethods.add(method);, +			if (annotatedMethods.isEmpty()) {, +				this.nonAnnotatedClasses.add(bean.getClass());, +				if (logger.isDebugEnabled()) {, +					logger.debug("No @JmsListener annotations found on bean class: " + bean.getClass());, +				}, +			}]