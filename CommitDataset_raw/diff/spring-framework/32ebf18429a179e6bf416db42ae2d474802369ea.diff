[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/support/RequestContext.java, + * Context holder for request-specific state, like current web application context, current locale, current theme, and, + * potential binding errors. Provides easy access to localized messages and Errors instances., + * <p>Suitable for exposition to views, and usage within JSP's "useBean" tag, JSP scriptlets, JSTL EL, Velocity, + * templates, etc. Necessary for views that do not have access to the servlet request, like Velocity templates., + * <p>Can be instantiated manually, or automatically exposed to views as model attribute via AbstractView's, + * "requestContextAttribute" property., + * <p>Will also work outside of DispatcherServlet requests, accessing the root WebApplicationContext and using an, + * appropriate fallback for the locale (the HttpServletRequest's primary locale)., +	 * Default theme name used if the RequestContext cannot find a ThemeResolver. Only applies to non-DispatcherServlet, +	 * requests. <p>Same as AbstractThemeResolver's default, but not linked in here to avoid package interdependencies., +	 * Request attribute to hold the current web application context for RequestContext usage. By default, the, +	 * DispatcherServlet's context (or the root context as fallback) is exposed., +	protected static final boolean jstlPresent = ClassUtils.isPresent("javax.servlet.jsp.jstl.core.Config",, +			RequestContext.class.getClassLoader());, +	 * Create a new RequestContext for the given request, using the request attributes for Errors retrieval. <p>This, +	 * only works with InternalResourceViews, as Errors instances are part of the model and not normally exposed as, +	 * request attributes. It will typically be used within JSPs or custom tags. <p><b>Will only work within a, +	 * DispatcherServlet request.</b> Pass in a ServletContext to be able to fallback to the root WebApplicationContext., +	 * Create a new RequestContext for the given request, using the request attributes for Errors retrieval. <p>This, +	 * only works with InternalResourceViews, as Errors instances are part of the model and not normally exposed as, +	 * request attributes. It will typically be used within JSPs or custom tags. <p>If a ServletContext is specified,, +	 * the RequestContext will also work with the root WebApplicationContext (outside a DispatcherServlet)., +	 * @param servletContext the servlet context of the web application (can be <code>null</code>; necessary for, +	 * fallback to root WebApplicationContext), +	 * Create a new RequestContext for the given request, using the given model attributes for Errors retrieval. <p>This, +	 * works with all View implementations. It will typically be used by View implementations. <p><b>Will only work, +	 * within a DispatcherServlet request.</b> Pass in a ServletContext to be able to fallback to the root, +	 * WebApplicationContext., +	 * @param model the model attributes for the current view (can be <code>null</code>, using the request attributes, +	 * for Errors retrieval), +	 * Create a new RequestContext for the given request, using the given model attributes for Errors retrieval. <p>This, +	 * works with all View implementations. It will typically be used by View implementations. <p>If a ServletContext is, +	 * specified, the RequestContext will also work with a root WebApplicationContext (outside a DispatcherServlet)., +	 * @param servletContext the servlet context of the web application (can be <code>null</code>; necessary for, +	 * fallback to root WebApplicationContext), +	 * @param model the model attributes for the current view (can be <code>null</code>, using the request attributes, +	 * for Errors retrieval), +	public RequestContext(HttpServletRequest request, HttpServletResponse response, ServletContext servletContext,, +			Map<String, Object> model) {, +	 * Initialize this context with the given request, using the given model attributes for Errors retrieval., +	 * <p>Delegates to <code>getFallbackLocale</code> and <code>getFallbackTheme</code> for determining the fallback, +	 * locale and theme, respectively, if no LocaleResolver and/or ThemeResolver can be found in the request., +	 * @param servletContext the servlet context of the web application (can be <code>null</code>; necessary for, +	 * fallback to root WebApplicationContext), +	 * @param model the model attributes for the current view (can be <code>null</code>, using the request attributes, +	 * for Errors retrieval), +	protected void initContext(HttpServletRequest request, HttpServletResponse response, ServletContext servletContext,, +			Map<String, Object> model) {, +		this.webApplicationContext = (WebApplicationContext) request.getAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE);, +		} else {, +	 * Determine the fallback locale for this context. <p>The default implementation checks for a JSTL locale attribute, +	 * in request, session or application scope; if not found, returns the <code>HttpServletRequest.getLocale()</code>., +	 * Determine the fallback theme for this context. <p>The default implementation returns the default theme (with name, +	 * "theme")., +	 * Return the underlying HttpServletRequest. Only intended for cooperating classes in this package., +	 * Return the underlying ServletContext. Only intended for cooperating classes in this package., +	 * Return the current theme (never <code>null</code>). <p>Resolved lazily for more efficiency when theme support is, +	 * not being used., +	 * (De)activate default HTML escaping for messages and errors, for the scope of this RequestContext. The default is, +	 * the application-wide setting (the "defaultHtmlEscape" context-param in web.xml)., +	 * Is default HTML escaping active? Falls back to <code>false</code> in case of no explicit default given., +	 * Return the default HTML escape setting, differentiating between no default specified and an explicit value., +	 * Set the UrlPathHelper to use for context path and request URI decoding. Can be used to pass a shared, +	 * UrlPathHelper instance in. <p>A default UrlPathHelper is always available., +	 * Return the UrlPathHelper used for context path and request URI decoding. Can be used to configure the current, +	 * UrlPathHelper. <p>A default UrlPathHelper is always available., +	 * Return the context path of the original request, that is, the path that indicates the current web application., +	 * This is useful for building links to other resources within the application. <p>Delegates to the UrlPathHelper, +	 * for decoding., +	 * @return a URL that points back to the server with an absolute path (also URL-encoded accordingly), +	 * For example, send in a relative URL <code>foo/{bar}?spam={spam}</code> and a parameter map, +	 * <code>{bar=baz,spam=nuts}</code> and the result will be <code>[contextpath]/foo/baz?spam=nuts</code>., +	 * , +	 * @return a URL that points back to the server with an absolute path (also URL-encoded accordingly), +	 * Return the request URI of the original request, that is, the invoked URL without parameters. This is particularly, +	 * useful as HTML form action target, possibly in combination with the original query string. <p><b>Note this, +	 * implementation will correctly resolve to the URI of any originating root request in the presence of a forwarded, +	 * request. However, this can only work when the Servlet 2.4 'forward' request attributes are present. <p>Delegates, +	 * to the UrlPathHelper for decoding., +	 * Return the query string of the current request, that is, the part after the request path. This is particularly, +	 * useful for building an HTML form action target in combination with the original request URI. <p><b>Note this, +	 * implementation will correctly resolve to the query string of any originating root request in the presence of a, +	 * forwarded request. However, this can only work when the Servlet 2.4 'forward' request attributes are present., +	 * Retrieve the given MessageSourceResolvable (e.g. an ObjectError instance), using the "defaultHtmlEscape" setting., +	 * Retrieve the theme message for the given code. <p>Note that theme messages are never HTML-escaped, as they, +	 * typically denote theme-specific resource paths and not client-visible messages., +	 * Retrieve the theme message for the given code. <p>Note that theme messages are never HTML-escaped, as they, +	 * typically denote theme-specific resource paths and not client-visible messages., +	 * Retrieve the theme message for the given code. <p>Note that theme messages are never HTML-escaped, as they, +	 * typically denote theme-specific resource paths and not client-visible messages., +		return getTheme().getMessageSource().getMessage(code, (args != null ? args.toArray() : null), defaultMessage,, +				this.locale);, +	 * Retrieve the theme message for the given code. <p>Note that theme messages are never HTML-escaped, as they, +	 * typically denote theme-specific resource paths and not client-visible messages., +	 * Retrieve the theme message for the given code. <p>Note that theme messages are never HTML-escaped, as they, +	 * typically denote theme-specific resource paths and not client-visible messages., +	 * Retrieve the theme message for the given code. <p>Note that theme messages are never HTML-escaped, as they, +	 * typically denote theme-specific resource paths and not client-visible messages., +		return getTheme().getMessageSource().getMessage(code, (args != null ? args.toArray() : null), this.locale);]