[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpEQ.java, +, +	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {, +		String evaluationContextClassName = EvaluationContext.class.getName().replace('.', '/');, +		mv.visitMethodInsn(INVOKESTATIC, operatorClassName, "equalityCheck",, +				"(L" + evaluationContextClassName + ";Ljava/lang/Object;Ljava/lang/Object;)Z", false);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpEQ.java, +, +	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {, +		String evaluationContextClassName = EvaluationContext.class.getName().replace('.', '/');, +		mv.visitMethodInsn(INVOKESTATIC, operatorClassName, "equalityCheck",, +				"(L" + evaluationContextClassName + ";Ljava/lang/Object;Ljava/lang/Object;)Z", false);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpNE.java, +, +	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {, +		String evaluationContextClassName = EvaluationContext.class.getName().replace('.', '/');, +		mv.visitMethodInsn(INVOKESTATIC, operatorClassName, "equalityCheck",, +				"(L" + evaluationContextClassName + ";Ljava/lang/Object;Ljava/lang/Object;)Z", false);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpEQ.java, +, +	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {, +		String evaluationContextClassName = EvaluationContext.class.getName().replace('.', '/');, +		mv.visitMethodInsn(INVOKESTATIC, operatorClassName, "equalityCheck",, +				"(L" + evaluationContextClassName + ";Ljava/lang/Object;Ljava/lang/Object;)Z", false);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpNE.java, +, +	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {, +		String evaluationContextClassName = EvaluationContext.class.getName().replace('.', '/');, +		mv.visitMethodInsn(INVOKESTATIC, operatorClassName, "equalityCheck",, +				"(L" + evaluationContextClassName + ";Ljava/lang/Object;Ljava/lang/Object;)Z", false);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Operator.java, +, +	/**, +	 * Perform an equality check for the given operand values., +	 * <p>This method is not just used for reflective comparisons in subclasses, +	 * but also from compiled expression code, which is why it needs to be, +	 * declared as {@code public static} here., +	 * @param context the current evaluation context, +	 * @param left the left-hand operand value, +	 * @param right the right-hand operand value, +	 */, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpEQ.java, +, +	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {, +		String evaluationContextClassName = EvaluationContext.class.getName().replace('.', '/');, +		mv.visitMethodInsn(INVOKESTATIC, operatorClassName, "equalityCheck",, +				"(L" + evaluationContextClassName + ";Ljava/lang/Object;Ljava/lang/Object;)Z", false);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpNE.java, +, +	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {, +		String evaluationContextClassName = EvaluationContext.class.getName().replace('.', '/');, +		mv.visitMethodInsn(INVOKESTATIC, operatorClassName, "equalityCheck",, +				"(L" + evaluationContextClassName + ";Ljava/lang/Object;Ljava/lang/Object;)Z", false);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Operator.java, +, +	/**, +	 * Perform an equality check for the given operand values., +	 * <p>This method is not just used for reflective comparisons in subclasses, +	 * but also from compiled expression code, which is why it needs to be, +	 * declared as {@code public static} here., +	 * @param context the current evaluation context, +	 * @param left the left-hand operand value, +	 * @param right the right-hand operand value, +	 */, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelCompilationCoverageTests.java, + * Checks the behaviour of the SpelCompiler., + * This should cover compilation all compiled node types., +, +	private Expression expression;, +, +	private SpelNodeImpl ast;, +, +, +				DelegatingStringFormat.class.getDeclaredMethod("format", String.class, Object[].class));, +				DelegatingStringFormat.class.getDeclaredMethod("format", String.class, Object[].class));, +				DelegatingStringFormat.class.getDeclaredMethod("format", String.class, Object[].class));, +		Method m = getClass().getDeclaredMethod("concat", String.class, String.class);, +		Method m = getClass().getDeclaredMethod("join", String[].class);, +			}, +			else if (this.i>that.i) {, +			}, +			else {, +		String type = getClass().getName();, +						getClass().getClassLoader()));, +, +, +		SpelParserConfiguration spc = new SpelParserConfiguration(SpelCompilerMode.IMMEDIATE,getClass().getClassLoader());, +, +, +, +, +, +, +, +, +, +, +, +, +]