[+++ b/org.springframework.core/src/main/java/org/springframework/core/CollectionFactory.java, +import org.springframework.util.LinkedCaseInsensitiveMap;, +	 * Create a linked case-insensitive Map if possible: This implementation, +	 * always returns a {@link org.springframework.util.LinkedCaseInsensitiveMap}., +	 * @deprecated as of Spring 3.0, for usage on JDK 1.5 or higher, +	@Deprecated, +	public static Map createLinkedCaseInsensitiveMapIfPossible(int initialCapacity) {, +		return new LinkedCaseInsensitiveMap(initialCapacity);, +	public static Map createIdentityMapIfPossible(int initialCapacity) {, +		return new IdentityHashMap(initialCapacity);, +	public static Map createConcurrentMapIfPossible(int initialCapacity) {, +		return new ConcurrentHashMap(initialCapacity);, +	public static ConcurrentMap createConcurrentMap(int initialCapacity) {, +		return new JdkConcurrentHashMap(initialCapacity);, +	public static Map createApproximateMap(Object map, int initialCapacity) {, +			return new TreeMap(((SortedMap) map).comparator());, +			return new LinkedHashMap(initialCapacity);, +	private static class JdkConcurrentHashMap extends ConcurrentHashMap implements ConcurrentMap {, +++ b/org.springframework.core/src/main/java/org/springframework/core/CollectionFactory.java, +import org.springframework.util.LinkedCaseInsensitiveMap;, +	 * Create a linked case-insensitive Map if possible: This implementation, +	 * always returns a {@link org.springframework.util.LinkedCaseInsensitiveMap}., +	 * @deprecated as of Spring 3.0, for usage on JDK 1.5 or higher, +	@Deprecated, +	public static Map createLinkedCaseInsensitiveMapIfPossible(int initialCapacity) {, +		return new LinkedCaseInsensitiveMap(initialCapacity);, +	public static Map createIdentityMapIfPossible(int initialCapacity) {, +		return new IdentityHashMap(initialCapacity);, +	public static Map createConcurrentMapIfPossible(int initialCapacity) {, +		return new ConcurrentHashMap(initialCapacity);, +	public static ConcurrentMap createConcurrentMap(int initialCapacity) {, +		return new JdkConcurrentHashMap(initialCapacity);, +	public static Map createApproximateMap(Object map, int initialCapacity) {, +			return new TreeMap(((SortedMap) map).comparator());, +			return new LinkedHashMap(initialCapacity);, +	private static class JdkConcurrentHashMap extends ConcurrentHashMap implements ConcurrentMap {, +++ b/org.springframework.core/src/main/java/org/springframework/core/ConcurrentMap.java, +public interface ConcurrentMap extends Map {, +	Object putIfAbsent(Object key, Object value);, +	boolean replace(Object key, Object oldValue, Object newValue);, +	Object replace(Object key, Object value);, +++ b/org.springframework.core/src/main/java/org/springframework/core/CollectionFactory.java, +import org.springframework.util.LinkedCaseInsensitiveMap;, +	 * Create a linked case-insensitive Map if possible: This implementation, +	 * always returns a {@link org.springframework.util.LinkedCaseInsensitiveMap}., +	 * @deprecated as of Spring 3.0, for usage on JDK 1.5 or higher, +	@Deprecated, +	public static Map createLinkedCaseInsensitiveMapIfPossible(int initialCapacity) {, +		return new LinkedCaseInsensitiveMap(initialCapacity);, +	public static Map createIdentityMapIfPossible(int initialCapacity) {, +		return new IdentityHashMap(initialCapacity);, +	public static Map createConcurrentMapIfPossible(int initialCapacity) {, +		return new ConcurrentHashMap(initialCapacity);, +	public static ConcurrentMap createConcurrentMap(int initialCapacity) {, +		return new JdkConcurrentHashMap(initialCapacity);, +	public static Map createApproximateMap(Object map, int initialCapacity) {, +			return new TreeMap(((SortedMap) map).comparator());, +			return new LinkedHashMap(initialCapacity);, +	private static class JdkConcurrentHashMap extends ConcurrentHashMap implements ConcurrentMap {, +++ b/org.springframework.core/src/main/java/org/springframework/core/ConcurrentMap.java, +public interface ConcurrentMap extends Map {, +	Object putIfAbsent(Object key, Object value);, +	boolean replace(Object key, Object oldValue, Object newValue);, +	Object replace(Object key, Object value);, +++ b/org.springframework.core/src/main/java/org/springframework/util/LinkedCaseInsensitiveMap.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.util;, +, +import java.util.HashMap;, +import java.util.LinkedHashMap;, +import java.util.Locale;, +import java.util.Map;, +, +/**, + * {@link LinkedHashMap} variant that stores String keys in a case-insensitive, + * manner, for example for key-based access in a results table., + *, + * <p>Preserves the original order as well as the original casing of keys,, + * while allowing for contains, get and remove calls with any case of key., + *, + * <p>Does <i>not</i> support <code>null</code> keys., + *, + * @author Juergen Hoeller, + * @since 3.0, + */]