[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Selection.java, + * @author Sam Brannen, +							lastKey = entry.getKey();, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Selection.java, + * @author Sam Brannen, +							lastKey = entry.getKey();, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/SelectionAndProjectionTests.java, + * Copyright 2002-2010 the original author or authors., +import java.util.Map;, +import java.util.TreeMap;, +import org.springframework.expression.ExpressionParser;, + * @author Sam Brannen, + * , +	@SuppressWarnings("unchecked"), +	public void selectionWithMap() {, +		EvaluationContext context = new StandardEvaluationContext(new MapTestBean());, +		ExpressionParser parser = new SpelExpressionParser();, +		Expression exp = parser.parseExpression("colors.?[key.startsWith('b')]");, +, +		Map<String, String> colorsMap = (Map<String, String>) exp.getValue(context);, +		assertEquals(3, colorsMap.size());, +		assertTrue(colorsMap.containsKey("beige"));, +		assertTrue(colorsMap.containsKey("blue"));, +		assertTrue(colorsMap.containsKey("brown"));, +	}, +, +	@Test, +	@SuppressWarnings("unchecked"), +	public void selectFirstItemInMap() {, +		EvaluationContext context = new StandardEvaluationContext(new MapTestBean());, +		ExpressionParser parser = new SpelExpressionParser();, +, +		Expression exp = parser.parseExpression("colors.^[key.startsWith('b')]");, +		Map<String, String> colorsMap = (Map<String, String>) exp.getValue(context);, +		assertEquals(1, colorsMap.size());, +		assertEquals("beige", colorsMap.keySet().iterator().next());, +	}, +, +	@Test, +	@SuppressWarnings("unchecked"), +	public void selectLastItemInMap() {, +		EvaluationContext context = new StandardEvaluationContext(new MapTestBean());, +		ExpressionParser parser = new SpelExpressionParser();, +, +		Expression exp = parser.parseExpression("colors.$[key.startsWith('b')]");, +		Map<String, String> colorsMap = (Map<String, String>) exp.getValue(context);, +		assertEquals(1, colorsMap.size());, +		assertEquals("brown", colorsMap.keySet().iterator().next());, +	}, +, +	@Test, +	static class MapTestBean {, +, +		private final Map<String, String> colors = new TreeMap<String, String>();, +, +		MapTestBean() {, +			// colors.put("black", "schwarz");, +			colors.put("red", "rot");, +			colors.put("brown", "braun");, +			colors.put("blue", "blau");, +			colors.put("yellow", "gelb");, +			colors.put("beige", "beige");, +		}, +, +		public Map<String, String> getColors() {, +			return colors;, +		}, +	}, +				} else {]