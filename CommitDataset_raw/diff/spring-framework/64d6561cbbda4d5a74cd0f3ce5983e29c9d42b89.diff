[+++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, +			processKeyedProperty(tokens, pv);, +			processLocalProperty(tokens, pv);, +, +	@SuppressWarnings("unchecked"), +	private void processKeyedProperty(PropertyTokenHolder tokens, PropertyValue pv) {, +		Object propValue = getPropertyHoldingValue(tokens);, +		String lastKey = tokens.keys[tokens.keys.length - 1];, +, +			PropertyHandler ph = getLocalPropertyHandler(tokens.actualName);, +			int arrayIndex = Integer.parseInt(lastKey);, +				Object convertedValue = convertIfNecessary(tokens.canonicalName, oldValue, pv.getValue(),, +					setPropertyValue(tokens.actualName, newArray);, +					propValue = getPropertyValue(tokens.actualName);, +				throw new InvalidPropertyException(getRootClass(), this.nestedPath + tokens.canonicalName,, +						"Invalid array index in property path '" + tokens.canonicalName + "'", ex);, +, +			PropertyHandler ph = getPropertyHandler(tokens.actualName);, +			int index = Integer.parseInt(lastKey);, +			Object convertedValue = convertIfNecessary(tokens.canonicalName, oldValue, pv.getValue(),, +						throw new InvalidPropertyException(getRootClass(), this.nestedPath + tokens.canonicalName,, +								size + ", accessed using property path '" + tokens.canonicalName +, +					throw new InvalidPropertyException(getRootClass(), this.nestedPath + tokens.canonicalName,, +							"Invalid list index in property path '" + tokens.canonicalName + "'", ex);, +, +			PropertyHandler ph = getLocalPropertyHandler(tokens.actualName);, +			Object convertedMapKey = convertIfNecessary(null, null, lastKey, mapKeyType, typeDescriptor);, +			Object convertedMapValue = convertIfNecessary(tokens.canonicalName, oldValue, pv.getValue(),, +, +			throw new InvalidPropertyException(getRootClass(), this.nestedPath + tokens.canonicalName,, +					"Property referenced in indexed property path '" + tokens.canonicalName +, +	private Object getPropertyHoldingValue(PropertyTokenHolder tokens) {, +		// Apply indexes and map keys: fetch value for all keys but the last one., +		PropertyTokenHolder getterTokens = new PropertyTokenHolder();, +		getterTokens.canonicalName = tokens.canonicalName;, +		getterTokens.actualName = tokens.actualName;, +		getterTokens.keys = new String[tokens.keys.length - 1];, +		System.arraycopy(tokens.keys, 0, getterTokens.keys, 0, tokens.keys.length - 1);, +, +		Object propValue;, +		try {, +			propValue = getPropertyValue(getterTokens);, +		}, +		catch (NotReadablePropertyException ex) {, +			throw new NotWritablePropertyException(getRootClass(), this.nestedPath + tokens.canonicalName,, +					"Cannot access indexed value in property referenced " +, +					"in indexed property path '" + tokens.canonicalName + "'", ex);, +		}, +, +		if (propValue == null) {, +			// null map value case, +			if (isAutoGrowNestedPaths()) {, +				int lastKeyIndex = tokens.canonicalName.lastIndexOf('[');, +				getterTokens.canonicalName = tokens.canonicalName.substring(0, lastKeyIndex);, +				propValue = setDefaultValue(getterTokens);, +			}, +				throw new NullValueInNestedPathException(getRootClass(), this.nestedPath + tokens.canonicalName,, +						"Cannot access indexed value in property referenced " +, +						"in indexed property path '" + tokens.canonicalName + "': returned null");, +			}, +		}, +		return propValue;, +	}, +, +	private void processLocalProperty(PropertyTokenHolder tokens, PropertyValue pv) {, +		PropertyHandler ph = getLocalPropertyHandler(tokens.actualName);, +					logger.debug("Ignoring optional value for property '" + tokens.actualName +, +				throw createNotWritablePropertyException(tokens.canonicalName);, +, +										this.nestedPath + tokens.canonicalName + "'", ex);, +							tokens.canonicalName, oldValue, originalValue, ph.toTypeDescriptor());, +			PropertyChangeEvent propertyChangeEvent = new PropertyChangeEvent(, +					this.rootObject, this.nestedPath + tokens.canonicalName, oldValue, pv.getValue());, +			PropertyChangeEvent pce = new PropertyChangeEvent(, +					this.rootObject, this.nestedPath + tokens.canonicalName, oldValue, pv.getValue());]