[+++ b/org.springframework.context/src/main/java/org/springframework/ui/message/DefaultMessageResolver.java, +	private static class TextMessage implements Message {, +	private static class MessageSourceResolvableAccessor implements PropertyAccessor {, +		public Class<?>[] getSpecificTargetClasses() {, +++ b/org.springframework.context/src/main/java/org/springframework/ui/message/DefaultMessageResolver.java, +	private static class TextMessage implements Message {, +	private static class MessageSourceResolvableAccessor implements PropertyAccessor {, +		public Class<?>[] getSpecificTargetClasses() {, +++ b/org.springframework.context/src/main/java/org/springframework/ui/message/Message.java, + * Communicates information of interest to the user., + * For example, a error message may inform a user of a web application a business rule was violated., + * TODO - should we introduce summary/detail fields instead of just text, +	 * The severity indicates the intensity or priority of the message., +++ b/org.springframework.context/src/main/java/org/springframework/ui/message/DefaultMessageResolver.java, +	private static class TextMessage implements Message {, +	private static class MessageSourceResolvableAccessor implements PropertyAccessor {, +		public Class<?>[] getSpecificTargetClasses() {, +++ b/org.springframework.context/src/main/java/org/springframework/ui/message/Message.java, + * Communicates information of interest to the user., + * For example, a error message may inform a user of a web application a business rule was violated., + * TODO - should we introduce summary/detail fields instead of just text, +	 * The severity indicates the intensity or priority of the message., +++ b/org.springframework.context/src/main/java/org/springframework/ui/message/MessageBuilder.java, + * A builder for building {@link MessageResolver} objects., + * Typically used by Controllers to {@link MessageContext#add(MessageResolver, String) add} messages to display in a user interface., + * Supports MessageResolvers that hard-code the message text, as well as MessageResolvers that resolve the message text from a localized {@link MessageSource}., + * Also supports named arguments whose values can be inserted into messages using #{eval expressions}., + * Usage example: , + *     code("invalidFormat")., + *     resolvableArg("label", "mathForm.decimalField")., + *     arg("format", "#,###.##")., + *     defaultText("The decimal field must be in format #,###.##")., + * Example messages.properties loaded by the MessageSource:, + * <pre>, + * invalidFormat=The #{label} must be in format #{format}., + * mathForm.decimalField=Decimal Field, + * </pre>, + * @see MessageContext#add(MessageResolver, String), +	 * Add a code to use to resolve the template for generating the localized message text., +	 * Codes are tried in the order they are added., +	 * Add a message argument to insert into the message text., +	 * Named message arguments are inserted by eval expressions denoted within the resolved message template., +	 * For example, the value of the 'format' argument would be inserted where a corresponding #{format} expression is defined in the message template., +	 * Successive calls to this method add additional arguments., +	 * Add a message argument to insert into the message text, where the actual value to be inserted should be resolved by the {@link MessageSource}., +	 * Successive calls to this method add additional resolvable arguments., +	 * @param code the code to use to resolve the argument value, +	public MessageBuilder resolvableArg(String name, Object code) {, +		args.put(name, new ResolvableArgumentValue(code));, +	private static class ResolvableArgumentValue implements MessageSourceResolvable {, +		private Object code;, +		public ResolvableArgumentValue(Object code) {, +			this.code = code;, +			return new String[] { code.toString() };, +			return String.valueOf(code);, +			return new ToStringCreator(this).append("code", code).toString();, +++ b/org.springframework.context/src/main/java/org/springframework/ui/message/DefaultMessageResolver.java, +	private static class TextMessage implements Message {, +	private static class MessageSourceResolvableAccessor implements PropertyAccessor {, +		public Class<?>[] getSpecificTargetClasses() {, +++ b/org.springframework.context/src/main/java/org/springframework/ui/message/Message.java, + * Communicates information of interest to the user., + * For example, a error message may inform a user of a web application a business rule was violated., + * TODO - should we introduce summary/detail fields instead of just text, +	 * The severity indicates the intensity or priority of the message., +++ b/org.springframework.context/src/main/java/org/springframework/ui/message/MessageBuilder.java, + * A builder for building {@link MessageResolver} objects., + * Typically used by Controllers to {@link MessageContext#add(MessageResolver, String) add} messages to display in a user interface., + * Supports MessageResolvers that hard-code the message text, as well as MessageResolvers that resolve the message text from a localized {@link MessageSource}., + * Also supports named arguments whose values can be inserted into messages using #{eval expressions}., + * Usage example: , + *     code("invalidFormat")., + *     resolvableArg("label", "mathForm.decimalField")., + *     arg("format", "#,###.##")., + *     defaultText("The decimal field must be in format #,###.##")., + * Example messages.properties loaded by the MessageSource:, + * <pre>, + * invalidFormat=The #{label} must be in format #{format}., + * mathForm.decimalField=Decimal Field, + * </pre>, + * @see MessageContext#add(MessageResolver, String), +	 * Add a code to use to resolve the template for generating the localized message text., +	 * Codes are tried in the order they are added., +	 * Add a message argument to insert into the message text., +	 * Named message arguments are inserted by eval expressions denoted within the resolved message template., +	 * For example, the value of the 'format' argument would be inserted where a corresponding #{format} expression is defined in the message template., +	 * Successive calls to this method add additional arguments., +	 * Add a message argument to insert into the message text, where the actual value to be inserted should be resolved by the {@link MessageSource}., +	 * Successive calls to this method add additional resolvable arguments., +	 * @param code the code to use to resolve the argument value, +	public MessageBuilder resolvableArg(String name, Object code) {, +		args.put(name, new ResolvableArgumentValue(code));, +	private static class ResolvableArgumentValue implements MessageSourceResolvable {, +		private Object code;, +		public ResolvableArgumentValue(Object code) {, +			this.code = code;, +			return new String[] { code.toString() };, +			return String.valueOf(code);, +			return new ToStringCreator(this).append("code", code).toString();, +++ b/org.springframework.context/src/main/java/org/springframework/ui/message/MessageResolutionException.java]