[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/RedirectView.java, + * sending a {@literal 3xx} status code. By default {@link HttpStatus#SEE_OTHER} is used., + * If HTTP 1.0 compatibility is needed, {@link HttpStatus#FOUND} code can be set via, + * {@link #setStatusCode(HttpStatus)}., +	private boolean propagateQuery = false;, +	 * Constructor for use as a bean., +	 */, +	public RedirectView() {, +	}, +, +	/**, +	 * Create a new {@code RedirectView} with the given URL and the {@link HttpStatus#SEE_OTHER}, +	 * status code which is the correct code for HTTP 1.1 clients., +	 * Create a new {@code RedirectView} with the given redirect URL ans status code. Most, +	 * frequently used ones are:, +	 * <ul>, +	 *     <li>{@link HttpStatus#SEE_OTHER} : temporary redirect for HTTP 1.1 compatible clients</li>, +	 *     <li>{@link HttpStatus#FOUND} : temporary redirect for HTTP 1.0 compatible clients</li>, +	 *     <li>{@link HttpStatus#MOVED_PERMANENTLY} : permanent redirect</li>, +	 * </ul>, +	public RedirectView(String redirectUrl, HttpStatus statusCode) {, +		super(redirectUrl);, +		setStatusCode(statusCode);, +	 * as relative to the current context path ({@code true}, the default) or to, +	 * the web server root ({@code false})., +	 * Return whether to interpret a given URL that starts with a slash ("/"), +	 * as relative to the current context path ("true") or to the web server, +	 * root ("false")., +	 * @return, +	 */, +	public boolean isContextRelative() {, +		return contextRelative;, +	}, +, +	/**, +	 * Set the redirect status code. Most frequently used ones are:, +	 * <ul>, +	 *     <li>{@link HttpStatus#SEE_OTHER} : temporary redirect for HTTP 1.1 compatible clients</li>, +	 *     <li>{@link HttpStatus#FOUND} : temporary redirect for HTTP 1.0 compatible clients</li>, +	 *     <li>{@link HttpStatus#MOVED_PERMANENTLY} : permanent redirect</li>, +	 * </ul>, +		Assert.notNull(statusCode, "HttpStatus must not be null");, +		Assert.isTrue(statusCode.is3xxRedirection(), "HttpStatus must be a redirection (3xx status code)");, +	 * Set whether to append the query string of the current URL to the redirected URL, +	 * ({@code true}) or not ({@code false}, the default)., +	public void setPropagateQuery(boolean propagateQuery) {, +		this.propagateQuery = propagateQuery;, +	}, +, +	/**, +	 * Return whether the query string of the current URL is appended to the redirected URL, +	 * ({@code true}) or not ({@code false})., +	 */, +	public boolean isPropagateQuery() {, +		return propagateQuery;, +	 * Return the configured application hosts., +	 */, +	public String[] getHosts() {, +		return this.hosts;, +	}, +, +	/**, +		if (this.propagateQuery) {, +	public void afterPropertiesSet() throws Exception {, +		super.afterPropertiesSet();, +		if (getStatusCode() == null) {, +			throw new IllegalArgumentException("Property 'statusCode' is required");, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/RedirectView.java, + * sending a {@literal 3xx} status code. By default {@link HttpStatus#SEE_OTHER} is used., + * If HTTP 1.0 compatibility is needed, {@link HttpStatus#FOUND} code can be set via, + * {@link #setStatusCode(HttpStatus)}., +	private boolean propagateQuery = false;, +	 * Constructor for use as a bean., +	 */, +	public RedirectView() {, +	}, +, +	/**, +	 * Create a new {@code RedirectView} with the given URL and the {@link HttpStatus#SEE_OTHER}, +	 * status code which is the correct code for HTTP 1.1 clients., +	 * Create a new {@code RedirectView} with the given redirect URL ans status code. Most, +	 * frequently used ones are:, +	 * <ul>, +	 *     <li>{@link HttpStatus#SEE_OTHER} : temporary redirect for HTTP 1.1 compatible clients</li>, +	 *     <li>{@link HttpStatus#FOUND} : temporary redirect for HTTP 1.0 compatible clients</li>, +	 *     <li>{@link HttpStatus#MOVED_PERMANENTLY} : permanent redirect</li>, +	 * </ul>, +	public RedirectView(String redirectUrl, HttpStatus statusCode) {, +		super(redirectUrl);, +		setStatusCode(statusCode);, +	 * as relative to the current context path ({@code true}, the default) or to, +	 * the web server root ({@code false})., +	 * Return whether to interpret a given URL that starts with a slash ("/"), +	 * as relative to the current context path ("true") or to the web server, +	 * root ("false")., +	 * @return, +	 */, +	public boolean isContextRelative() {, +		return contextRelative;, +	}]