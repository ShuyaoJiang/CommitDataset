[+++ b/src/asciidoc/appendix.adoc, +[source,xml,indent=0], +[source,java,indent=0], +[source,java,indent=0], +, +[source,java,indent=0], +, +[source,java,indent=0], +[source,xml,indent=0], +[source,java,indent=0], +, +[source,java,indent=0], +			return getJdoTemplate().find(Product.class,, +					"category = pCategory", "String category", new Object[] {category});, +, +[source,xml,indent=0], +[source,java,indent=0], +, +[source,java,indent=0], +, +[source,java,indent=0], +[source,java,indent=0], +, +[source,java,indent=0], +, +[source,xml,indent=0], +[source,xml,indent=0], +[source,java,indent=0], +, +[source,java,indent=0], +, +[source,java,indent=0], +, +[source,java,indent=0], +, +[source,java,indent=0], +[source,java,indent=0], +[source,java,indent=0], +, +[source,java,indent=0], +, +[source,java,indent=0], +[source,java,indent=0], +		void afterReturning(Object returnValue, Method m, Object[] args,, +				Object target) throws Throwable;, +, +[source,java,indent=0], +		public void afterReturning(Object returnValue, Method m, Object[] args,, +				Object target) throws Throwable {, +, +[source,java,indent=0], +, +[source,java,indent=0], +, +, +[source,java,indent=0], +, +, +, +, +[source,java,indent=0], +	public class LockMixin extends DelegatingIntroductionInterceptor implements Lockable {, +			if (locked() && invocation.getMethod().getName().indexOf("set") == 0) {, +			}, +[source,java,indent=0], +, +[source,xml,indent=0], +	<bean id="person" class="org.springframework.aop.framework.ProxyFactoryBean">, +[source,java,indent=0], +[source,xml,indent=0], +[source,xml,indent=0], +[source,xml,indent=0], +[source,xml,indent=0], +[source,xml,indent=0], +[source,xml,indent=0], +[source,java,indent=0], +[source,java,indent=0], +	void addAdvice(int pos, Advice advice) throws AopConfigException;, +[source,java,indent=0], +	assertEquals("Added two advisors", oldAdvisorCount + 2, advised.getAdvisors().length);, +[source,xml,indent=0], +[source,xml,indent=0], +[source,xml,indent=0], +[source,xml,indent=0], +[source,xml,indent=0], +[source,xml,indent=0], +[source,java,indent=0], +	HotSwappableTargetSource swapper = (HotSwappableTargetSource) beanFactory.getBean("swapper");, +[source,xml,indent=0], +[source,xml,indent=0], +	<bean id="businessObjectTarget" class="com.mycompany.MyBusinessObject" scope="prototype">, +[source,xml,indent=0], +[source,java,indent=0], +[source,xml,indent=0], +[source,xml,indent=0], +[source,xml,indent=0], +[source,xml,indent=0], +[source,xml,indent=0], +[source,xml,indent=0], +[source,xml,indent=0]]