[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +		if (locations.length == 0) {, +					// We need to ensure unique names when the property source will ultimately end up in a composite, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +		if (locations.length == 0) {, +					// We need to ensure unique names when the property source will ultimately end up in a composite, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, + * Copyright 2002-2014 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +		if (locations.length == 0) {, +					// We need to ensure unique names when the property source will ultimately end up in a composite, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, + * Copyright 2002-2014 the original author or authors., +++ b/spring-context/src/test/java/org/springframework/context/annotation/PropertySourceAnnotationTests.java, +	public void withNameAndMultipleResourceLocations() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(ConfigWithNameAndMultipleResourceLocations.class);, +		assertThat(ctx.getEnvironment().containsProperty("from.p1"), is(true));, +		assertThat(ctx.getEnvironment().containsProperty("from.p2"), is(true));, +		// p2 should 'win' as it was registered last, +		assertThat(ctx.getEnvironment().getProperty("testbean.name"), equalTo("p2TestBean"));, +	}, +, +	@Test, +	public void withMultipleResourceLocations() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(ConfigWithMultipleResourceLocations.class);, +		assertThat(ctx.getEnvironment().containsProperty("from.p1"), is(true));, +		assertThat(ctx.getEnvironment().containsProperty("from.p2"), is(true));, +		// p2 should 'win' as it was registered last, +		assertThat(ctx.getEnvironment().getProperty("testbean.name"), equalTo("p2TestBean"));, +	}, +, +	@Test, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +		if (locations.length == 0) {, +					// We need to ensure unique names when the property source will ultimately end up in a composite, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, + * Copyright 2002-2014 the original author or authors., +++ b/spring-context/src/test/java/org/springframework/context/annotation/PropertySourceAnnotationTests.java, +	public void withNameAndMultipleResourceLocations() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(ConfigWithNameAndMultipleResourceLocations.class);, +		assertThat(ctx.getEnvironment().containsProperty("from.p1"), is(true));, +		assertThat(ctx.getEnvironment().containsProperty("from.p2"), is(true));, +		// p2 should 'win' as it was registered last, +		assertThat(ctx.getEnvironment().getProperty("testbean.name"), equalTo("p2TestBean"));, +	}, +, +	@Test, +	public void withMultipleResourceLocations() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(ConfigWithMultipleResourceLocations.class);, +		assertThat(ctx.getEnvironment().containsProperty("from.p1"), is(true));, +		assertThat(ctx.getEnvironment().containsProperty("from.p2"), is(true));, +		// p2 should 'win' as it was registered last, +		assertThat(ctx.getEnvironment().getProperty("testbean.name"), equalTo("p2TestBean"));, +	}, +, +	@Test, +++ b/spring-core/src/main/java/org/springframework/core/env/CompositePropertySource.java, + * Copyright 2002-2014 the original author or authors., +	private final Set<PropertySource<?>> propertySources = new LinkedHashSet<PropertySource<?>>();, +				getClass().getSimpleName(), this.name, this.propertySources);, +]