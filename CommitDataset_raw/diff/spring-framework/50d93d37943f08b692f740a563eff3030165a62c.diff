[+++ b/spring-core/src/main/java/org/springframework/util/concurrent/CompletableToListenableFutureAdapter.java, + * Copyright 2002-2017 the original author or authors., +import java.util.concurrent.CompletionStage;, + * Adapts a {@link CompletableFuture} or {@link CompletionStage} into a, + * Spring {@link ListenableFuture}., + * @author Juergen Hoeller, +	/**, +	 * Create a new adapter for the given {@link CompletionStage}., +	 * @since 4.3.7, +	 */, +	public CompletableToListenableFutureAdapter(CompletionStage<T> completionStage) {, +		this(completionStage.toCompletableFuture());, +	}, +, +	/**, +	 * Create a new adapter for the given {@link CompletableFuture}., +	 */, +++ b/spring-core/src/main/java/org/springframework/util/concurrent/CompletableToListenableFutureAdapter.java, + * Copyright 2002-2017 the original author or authors., +import java.util.concurrent.CompletionStage;, + * Adapts a {@link CompletableFuture} or {@link CompletionStage} into a, + * Spring {@link ListenableFuture}., + * @author Juergen Hoeller, +	/**, +	 * Create a new adapter for the given {@link CompletionStage}., +	 * @since 4.3.7, +	 */, +	public CompletableToListenableFutureAdapter(CompletionStage<T> completionStage) {, +		this(completionStage.toCompletableFuture());, +	}, +, +	/**, +	 * Create a new adapter for the given {@link CompletableFuture}., +	 */, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/MessageMapping.java, + * Copyright 2002-2017 the original author or authors., + * <p>A return value will get wrapped as a message and sent to a default response, + * destination or to a custom destination specified with an {@link SendTo @SendTo}, + * method-level annotation. Such a response may also be provided asynchronously, + * via a {@link org.springframework.util.concurrent.ListenableFuture} return type, + * or a corresponding JDK 8 {@link java.util.concurrent.CompletableFuture} /, + * {@link java.util.concurrent.CompletionStage} handle., +++ b/spring-core/src/main/java/org/springframework/util/concurrent/CompletableToListenableFutureAdapter.java, + * Copyright 2002-2017 the original author or authors., +import java.util.concurrent.CompletionStage;, + * Adapts a {@link CompletableFuture} or {@link CompletionStage} into a, + * Spring {@link ListenableFuture}., + * @author Juergen Hoeller, +	/**, +	 * Create a new adapter for the given {@link CompletionStage}., +	 * @since 4.3.7, +	 */, +	public CompletableToListenableFutureAdapter(CompletionStage<T> completionStage) {, +		this(completionStage.toCompletableFuture());, +	}, +, +	/**, +	 * Create a new adapter for the given {@link CompletableFuture}., +	 */, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/MessageMapping.java, + * Copyright 2002-2017 the original author or authors., + * <p>A return value will get wrapped as a message and sent to a default response, + * destination or to a custom destination specified with an {@link SendTo @SendTo}, + * method-level annotation. Such a response may also be provided asynchronously, + * via a {@link org.springframework.util.concurrent.ListenableFuture} return type, + * or a corresponding JDK 8 {@link java.util.concurrent.CompletableFuture} /, + * {@link java.util.concurrent.CompletionStage} handle., +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/CompletableFutureReturnValueHandler.java, + * Copyright 2002-2017 the original author or authors., +import java.util.concurrent.CompletionStage;, + * Support for {@link CompletableFuture} (and as of 4.3.7 also {@link CompletionStage}), + * as a return value type., + * @author Juergen Hoeller, +		return CompletionStage.class.isAssignableFrom(returnType.getParameterType());, +		return new CompletableToListenableFutureAdapter<>((CompletionStage<Object>) returnValue);, +++ b/spring-core/src/main/java/org/springframework/util/concurrent/CompletableToListenableFutureAdapter.java, + * Copyright 2002-2017 the original author or authors., +import java.util.concurrent.CompletionStage;, + * Adapts a {@link CompletableFuture} or {@link CompletionStage} into a, + * Spring {@link ListenableFuture}., + * @author Juergen Hoeller, +	/**, +	 * Create a new adapter for the given {@link CompletionStage}., +	 * @since 4.3.7, +	 */, +	public CompletableToListenableFutureAdapter(CompletionStage<T> completionStage) {, +		this(completionStage.toCompletableFuture());, +	}, +, +	/**, +	 * Create a new adapter for the given {@link CompletableFuture}., +	 */, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/MessageMapping.java, + * Copyright 2002-2017 the original author or authors., + * <p>A return value will get wrapped as a message and sent to a default response, + * destination or to a custom destination specified with an {@link SendTo @SendTo}, + * method-level annotation. Such a response may also be provided asynchronously, + * via a {@link org.springframework.util.concurrent.ListenableFuture} return type, + * or a corresponding JDK 8 {@link java.util.concurrent.CompletableFuture} /, + * {@link java.util.concurrent.CompletionStage} handle.]