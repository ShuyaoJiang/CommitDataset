[+++ b/build.gradle, +		optional(project(":spring-webflux")), +		optional("io.projectreactor.addons:reactor-test"), +		testCompile('io.projectreactor.ipc:reactor-netty'), +++ b/build.gradle, +		optional(project(":spring-webflux")), +		optional("io.projectreactor.addons:reactor-test"), +		testCompile('io.projectreactor.ipc:reactor-netty'), +++ b/spring-test/src/main/java/org/springframework/test/util/AssertionErrors.java, +	 * Assert two objects are equal and raise an {@link AssertionError} if not., +	 * assertEquals("Response header [" + name + "]", expected, actual);, +	/**, +	 * Assert two objects are not equal and raise an {@link AssertionError} otherwise., +	 * <p>For example:, +	 * <pre class="code">, +	 * assertNotEquals("Response header [" + name + "]", expected, actual);, +	 * </pre>, +	 * @param message describes the value being checked, +	 * @param expected the expected value, +	 * @param actual the actual value, +	 */, +	public static void assertNotEquals(String message, Object expected, Object actual) {, +		if (ObjectUtils.nullSafeEquals(expected, actual)) {, +			throw new AssertionError(message + " was not expected to be:" +, +					"<" + ObjectUtils.nullSafeToString(actual) + ">");, +		}, +	}, +, +++ b/build.gradle, +		optional(project(":spring-webflux")), +		optional("io.projectreactor.addons:reactor-test"), +		testCompile('io.projectreactor.ipc:reactor-netty'), +++ b/spring-test/src/main/java/org/springframework/test/util/AssertionErrors.java, +	 * Assert two objects are equal and raise an {@link AssertionError} if not., +	 * assertEquals("Response header [" + name + "]", expected, actual);, +	/**, +	 * Assert two objects are not equal and raise an {@link AssertionError} otherwise., +	 * <p>For example:, +	 * <pre class="code">, +	 * assertNotEquals("Response header [" + name + "]", expected, actual);, +	 * </pre>, +	 * @param message describes the value being checked, +	 * @param expected the expected value, +	 * @param actual the actual value, +	 */, +	public static void assertNotEquals(String message, Object expected, Object actual) {, +		if (ObjectUtils.nullSafeEquals(expected, actual)) {, +			throw new AssertionError(message + " was not expected to be:" +, +					"<" + ObjectUtils.nullSafeToString(actual) + ">");, +		}, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultControllerSpec.java, +/*, + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.test.web.reactive.server;, +, +import java.util.Arrays;, +import java.util.List;, +import java.util.Optional;, +import java.util.function.Consumer;, +, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.format.FormatterRegistry;, +import org.springframework.http.codec.HttpMessageReader;, +import org.springframework.http.codec.HttpMessageWriter;, +import org.springframework.util.Assert;, +import org.springframework.util.ObjectUtils;, +import org.springframework.validation.Validator;, +import org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder;, +import org.springframework.web.reactive.config.CorsRegistry;, +import org.springframework.web.reactive.config.DelegatingWebFluxConfiguration;, +import org.springframework.web.reactive.config.PathMatchConfigurer;, +import org.springframework.web.reactive.config.ViewResolverRegistry;, +import org.springframework.web.reactive.config.WebFluxConfigurer;, +, +/**, + * Default implementation of {@link WebTestClient.ControllerSpec}., + *, + * @author Rossen Stoyanchev, + * @since 5.0, + */, +class DefaultControllerSpec implements WebTestClient.ControllerSpec {, +, +	private final List<Object> controllers;, +, +	private final TestWebFluxConfigurer configurer = new TestWebFluxConfigurer();]