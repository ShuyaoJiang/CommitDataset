[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlMapFactoryBean.java, + * Factory for a {@code Map} that reads from a YAML source, preserving the, + * YAML-declared value types and their structure., + *, + * <p>YAML is a nice human-readable format for configuration, and it has some, + * useful hierarchical properties. It's more or less a superset of JSON, so it, + * has a lot of similar features., + *, + * <p>If multiple resources are provided the later ones will override entries in, + * the earlier ones hierarchically; that is, all entries with the same nested key, + * of type {@code Map} at any depth are merged. For example:, + * @author Juergen Hoeller, +, +		Map<String, Object> result = new LinkedHashMap<>();, +		process((properties, map) -> merge(result, map));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlMapFactoryBean.java, + * Factory for a {@code Map} that reads from a YAML source, preserving the, + * YAML-declared value types and their structure., + *, + * <p>YAML is a nice human-readable format for configuration, and it has some, + * useful hierarchical properties. It's more or less a superset of JSON, so it, + * has a lot of similar features., + *, + * <p>If multiple resources are provided the later ones will override entries in, + * the earlier ones hierarchically; that is, all entries with the same nested key, + * of type {@code Map} at any depth are merged. For example:, + * @author Juergen Hoeller, +, +		Map<String, Object> result = new LinkedHashMap<>();, +		process((properties, map) -> merge(result, map));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java, +import org.springframework.core.CollectionFactory;, + * @author Juergen Hoeller, +		Properties properties = CollectionFactory.createStringAdaptingProperties();, +				result.put(key, (value != null ? value : ""));, +	 * Callback interface used to process the YAML parsing results., +		 * Process the given representation of the parsing results., +		 * @param properties the properties to process (as a flattened, +		 * representation with indexed keys in case of a collection or map), +		 * @param map the result map (preserving the original value structure, +		 * in the YAML document), +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlMapFactoryBean.java, + * Factory for a {@code Map} that reads from a YAML source, preserving the, + * YAML-declared value types and their structure., + *, + * <p>YAML is a nice human-readable format for configuration, and it has some, + * useful hierarchical properties. It's more or less a superset of JSON, so it, + * has a lot of similar features., + *, + * <p>If multiple resources are provided the later ones will override entries in, + * the earlier ones hierarchically; that is, all entries with the same nested key, + * of type {@code Map} at any depth are merged. For example:, + * @author Juergen Hoeller, +, +		Map<String, Object> result = new LinkedHashMap<>();, +		process((properties, map) -> merge(result, map));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java, +import org.springframework.core.CollectionFactory;, + * @author Juergen Hoeller, +		Properties properties = CollectionFactory.createStringAdaptingProperties();, +				result.put(key, (value != null ? value : ""));, +	 * Callback interface used to process the YAML parsing results., +		 * Process the given representation of the parsing results., +		 * @param properties the properties to process (as a flattened, +		 * representation with indexed keys in case of a collection or map), +		 * @param map the result map (preserving the original value structure, +		 * in the YAML document), +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlPropertiesFactoryBean.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.CollectionFactory;, + * Factory for {@link java.util.Properties} that reads from a YAML source,, + * exposing a flat structure of String property values., + *, + * <p>YAML is a nice human-readable format for configuration, and it has some, + * useful hierarchical properties. It's more or less a superset of JSON, so it, + * has a lot of similar features., + *, + * <p><b>Note: All exposed values are of type {@code String}</b> for access through, + * the common {@link Properties#getProperty} method (e.g. in configuration property, + * resolution through {@link PropertyResourceConfigurer#setProperties(Properties)})., + * If this is not desirable, use {@link YamlMapFactoryBean} instead., + *, + * <p>The Properties created by this factory have nested paths for hierarchical, + * objects, so for instance this YAML, + * is transformed into these properties:, + * becomes properties like this:, + * @author Juergen Hoeller, +		Properties result = CollectionFactory.createStringAdaptingProperties();, +		process((properties, map) -> result.putAll(properties));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlMapFactoryBean.java, + * Factory for a {@code Map} that reads from a YAML source, preserving the, + * YAML-declared value types and their structure., + *, + * <p>YAML is a nice human-readable format for configuration, and it has some, + * useful hierarchical properties. It's more or less a superset of JSON, so it, + * has a lot of similar features., + *, + * <p>If multiple resources are provided the later ones will override entries in, + * the earlier ones hierarchically; that is, all entries with the same nested key, + * of type {@code Map} at any depth are merged. For example:]