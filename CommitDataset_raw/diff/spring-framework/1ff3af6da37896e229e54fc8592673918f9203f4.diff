[+++ b/spring-core/src/main/java/org/springframework/core/OrderComparator.java, + * Copyright 2002-2015 the original author or authors., + * {@link Comparator} implementation for {@link Ordered} objects, sorting, + * by order value ascending, respectively by priority descending., + * <h3>Same Order Objects</h3>, + * <p>Objects that have the same order value will be sorted with arbitrary, + * ordering with respect to other objects with the same order value., + *, + * <h3>Non-ordered Objects</h3>, + * <p>Any object that does not provide its own order value is implicitly, + * assigned a value of {@link Ordered#LOWEST_PRECEDENCE}, thus ending up, + * at the end of a sorted collection in arbitrary order with respect to, + * other objects with the same order value., + * @author Sam Brannen, + * @see org.springframework.core.annotation.AnnotationAwareOrderComparator, +	 * Shared default instance of {@code OrderComparator}., +++ b/spring-core/src/main/java/org/springframework/core/OrderComparator.java, + * Copyright 2002-2015 the original author or authors., + * {@link Comparator} implementation for {@link Ordered} objects, sorting, + * by order value ascending, respectively by priority descending., + * <h3>Same Order Objects</h3>, + * <p>Objects that have the same order value will be sorted with arbitrary, + * ordering with respect to other objects with the same order value., + *, + * <h3>Non-ordered Objects</h3>, + * <p>Any object that does not provide its own order value is implicitly, + * assigned a value of {@link Ordered#LOWEST_PRECEDENCE}, thus ending up, + * at the end of a sorted collection in arbitrary order with respect to, + * other objects with the same order value., + * @author Sam Brannen, + * @see org.springframework.core.annotation.AnnotationAwareOrderComparator, +	 * Shared default instance of {@code OrderComparator}., +++ b/spring-core/src/main/java/org/springframework/core/Ordered.java, + * Copyright 2002-2015 the original author or authors., + * {@code Ordered} is an interface that can be implemented by objects that, + * should be <em>orderable</em>, for example in a {@code Collection}., + * <p>The actual {@link #getOrder() order} can be interpreted as prioritization,, + * with the first object (with the lowest order value) having the highest, + * <p>Note that there is also a <em>priority</em> marker for this interface:, + * {@link PriorityOrdered}. Order values expressed by {@code PriorityOrdered}, + * objects always apply before same order values expressed by <em>plain</em>, + * {@link Ordered} objects., + *, + * <p>Consult the Javadoc for {@link OrderComparator} for details on the, + * sort semantics for non-ordered objects., + * @author Sam Brannen, + * @see PriorityOrdered, + * @see org.springframework.core.annotation.AnnotationAwareOrderComparator, +	 * Get the order value of this object., +	 * <p>Higher values are interpreted as lower priority. As a consequence,, +	 * the object with the lowest value has the highest priority (somewhat, +	 * analogous to Servlet {@code load-on-startup} values)., +	 * <p>Same order values will result in arbitrary sort positions for the, +	 * affected objects., +	 * @see #HIGHEST_PRECEDENCE, +	 * @see #LOWEST_PRECEDENCE, +++ b/spring-core/src/main/java/org/springframework/core/OrderComparator.java, + * Copyright 2002-2015 the original author or authors., + * {@link Comparator} implementation for {@link Ordered} objects, sorting, + * by order value ascending, respectively by priority descending., + * <h3>Same Order Objects</h3>, + * <p>Objects that have the same order value will be sorted with arbitrary, + * ordering with respect to other objects with the same order value., + *, + * <h3>Non-ordered Objects</h3>, + * <p>Any object that does not provide its own order value is implicitly, + * assigned a value of {@link Ordered#LOWEST_PRECEDENCE}, thus ending up, + * at the end of a sorted collection in arbitrary order with respect to, + * other objects with the same order value., + * @author Sam Brannen, + * @see org.springframework.core.annotation.AnnotationAwareOrderComparator, +	 * Shared default instance of {@code OrderComparator}., +++ b/spring-core/src/main/java/org/springframework/core/Ordered.java, + * Copyright 2002-2015 the original author or authors., + * {@code Ordered} is an interface that can be implemented by objects that, + * should be <em>orderable</em>, for example in a {@code Collection}., + * <p>The actual {@link #getOrder() order} can be interpreted as prioritization,, + * with the first object (with the lowest order value) having the highest, + * <p>Note that there is also a <em>priority</em> marker for this interface:, + * {@link PriorityOrdered}. Order values expressed by {@code PriorityOrdered}, + * objects always apply before same order values expressed by <em>plain</em>, + * {@link Ordered} objects., + *, + * <p>Consult the Javadoc for {@link OrderComparator} for details on the, + * sort semantics for non-ordered objects., + * @author Sam Brannen, + * @see PriorityOrdered, + * @see org.springframework.core.annotation.AnnotationAwareOrderComparator, +	 * Get the order value of this object., +	 * <p>Higher values are interpreted as lower priority. As a consequence,, +	 * the object with the lowest value has the highest priority (somewhat, +	 * analogous to Servlet {@code load-on-startup} values)., +	 * <p>Same order values will result in arbitrary sort positions for the, +	 * affected objects., +	 * @see #HIGHEST_PRECEDENCE, +	 * @see #LOWEST_PRECEDENCE, +++ b/spring-core/src/main/java/org/springframework/core/PriorityOrdered.java, + * Copyright 2002-2015 the original author or authors., + * Extension of the {@link Ordered} interface, expressing a <em>priority</em>, + * ordering: order values expressed by {@code PriorityOrdered} objects]