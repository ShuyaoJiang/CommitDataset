[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/AbstractWebSocketMessage.java, + * Copyright 2002-2014 the original author or authors., +				+ ", byteCount=" + getPayloadLength() + ", last=" + isLast() + "]";, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/AbstractWebSocketMessage.java, + * Copyright 2002-2014 the original author or authors., +				+ ", byteCount=" + getPayloadLength() + ", last=" + isLast() + "]";, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/BinaryMessage.java, + * Copyright 2002-2014 the original author or authors., +	public int getPayloadLength() {, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/AbstractWebSocketMessage.java, + * Copyright 2002-2014 the original author or authors., +				+ ", byteCount=" + getPayloadLength() + ", last=" + isLast() + "]";, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/BinaryMessage.java, + * Copyright 2002-2014 the original author or authors., +	public int getPayloadLength() {, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/PingMessage.java, + * Copyright 2002-2014 the original author or authors., +	public int getPayloadLength() {, +		return (getPayload() != null) ? getPayload().remaining() : 0;, +		return (getPayload() != null) ? getPayload().toString() : null;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/AbstractWebSocketMessage.java, + * Copyright 2002-2014 the original author or authors., +				+ ", byteCount=" + getPayloadLength() + ", last=" + isLast() + "]";, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/BinaryMessage.java, + * Copyright 2002-2014 the original author or authors., +	public int getPayloadLength() {, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/PingMessage.java, + * Copyright 2002-2014 the original author or authors., +	public int getPayloadLength() {, +		return (getPayload() != null) ? getPayload().remaining() : 0;, +		return (getPayload() != null) ? getPayload().toString() : null;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/PongMessage.java, + * Copyright 2002-2014 the original author or authors., +	public int getPayloadLength() {, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/AbstractWebSocketMessage.java, + * Copyright 2002-2014 the original author or authors., +				+ ", byteCount=" + getPayloadLength() + ", last=" + isLast() + "]";, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/BinaryMessage.java, + * Copyright 2002-2014 the original author or authors., +	public int getPayloadLength() {, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/PingMessage.java, + * Copyright 2002-2014 the original author or authors., +	public int getPayloadLength() {, +		return (getPayload() != null) ? getPayload().remaining() : 0;, +		return (getPayload() != null) ? getPayload().toString() : null;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/PongMessage.java, + * Copyright 2002-2014 the original author or authors., +	public int getPayloadLength() {, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/TextMessage.java, +import java.nio.charset.Charset;, +, +	private static final Charset UTF_8 = Charset.forName("UTF-8");, +, +	private final byte[] bytes;, +, +		this.bytes = null;, +	}, +, +	/**, +	 * Create a new text WebSocket message from the given byte[]. It is assumed the, +	 * byte array can be encoded into an UTF-8 String., +	 *, +	 * @param payload the non-null payload, +	 */, +	public TextMessage(byte[] payload) {, +		super(new String(payload, UTF_8));, +		this.bytes = payload;, +		this.bytes = null;, +	public int getPayloadLength() {, +		return asBytes().length;, +	}, +, +	public byte[] asBytes() {, +		return (this.bytes != null ? this.bytes : getPayload().getBytes(UTF_8));, +		return (getPayloadLength() > 10) ? getPayload().substring(0, 10) + ".." : getPayload();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/AbstractWebSocketMessage.java, + * Copyright 2002-2014 the original author or authors., +				+ ", byteCount=" + getPayloadLength() + ", last=" + isLast() + "]";, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/BinaryMessage.java, + * Copyright 2002-2014 the original author or authors., +	public int getPayloadLength() {, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/PingMessage.java, + * Copyright 2002-2014 the original author or authors., +	public int getPayloadLength() {, +		return (getPayload() != null) ? getPayload().remaining() : 0;, +		return (getPayload() != null) ? getPayload().toString() : null;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/PongMessage.java, + * Copyright 2002-2014 the original author or authors., +	public int getPayloadLength() {, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/TextMessage.java, +import java.nio.charset.Charset;, +, +	private static final Charset UTF_8 = Charset.forName("UTF-8");, +, +	private final byte[] bytes;, +, +		this.bytes = null;, +	}, +, +	/**]