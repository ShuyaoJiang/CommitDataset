[+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.web.context.request.async.AbstractDelegatingCallable;, +import org.springframework.web.context.request.async.AsyncExecutionChain;, +		AsyncExecutionChain chain = AsyncExecutionChain.getForCurrentRequest(request);, +, +				SessionHolder sessionHolder = new SessionHolder(session);, +				TransactionSynchronizationManager.bindResource(sessionFactory, sessionHolder);, +, +				chain.addDelegatingCallable(getAsyncCallable(request, sessionFactory, sessionHolder));, +					if (chain.isAsyncStarted()) {, +						return;, +					}, +	/**, +	 * Create a Callable to extend the use of the open Hibernate Session to the, +	 * async thread completing the request., +	 */, +	private AbstractDelegatingCallable getAsyncCallable(final HttpServletRequest request,, +			final SessionFactory sessionFactory, final SessionHolder sessionHolder) {, +, +		return new AbstractDelegatingCallable() {, +			public Object call() throws Exception {, +				TransactionSynchronizationManager.bindResource(sessionFactory, sessionHolder);, +				try {, +					getNextCallable().call();, +				}, +				finally {, +					SessionHolder sessionHolder =, +							(SessionHolder) TransactionSynchronizationManager.unbindResource(sessionFactory);, +					logger.debug("Closing Hibernate Session in OpenSessionInViewFilter");, +					SessionFactoryUtils.closeSession(sessionHolder.getSession());, +				}, +				return null;, +			}, +		};, +	}, +, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.web.context.request.async.AbstractDelegatingCallable;, +import org.springframework.web.context.request.async.AsyncExecutionChain;, +		AsyncExecutionChain chain = AsyncExecutionChain.getForCurrentRequest(request);, +, +				SessionHolder sessionHolder = new SessionHolder(session);, +				TransactionSynchronizationManager.bindResource(sessionFactory, sessionHolder);, +, +				chain.addDelegatingCallable(getAsyncCallable(request, sessionFactory, sessionHolder));, +					if (chain.isAsyncStarted()) {, +						return;, +					}, +	/**, +	 * Create a Callable to extend the use of the open Hibernate Session to the, +	 * async thread completing the request., +	 */, +	private AbstractDelegatingCallable getAsyncCallable(final HttpServletRequest request,, +			final SessionFactory sessionFactory, final SessionHolder sessionHolder) {, +, +		return new AbstractDelegatingCallable() {, +			public Object call() throws Exception {, +				TransactionSynchronizationManager.bindResource(sessionFactory, sessionHolder);, +				try {, +					getNextCallable().call();, +				}, +				finally {, +					SessionHolder sessionHolder =, +							(SessionHolder) TransactionSynchronizationManager.unbindResource(sessionFactory);, +					logger.debug("Closing Hibernate Session in OpenSessionInViewFilter");, +					SessionFactoryUtils.closeSession(sessionHolder.getSession());, +				}, +				return null;, +			}, +		};, +	}, +, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewInterceptor.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.web.context.request.async.AbstractDelegatingCallable;, +import org.springframework.web.context.request.async.AsyncWebRequestInterceptor;, +public class OpenSessionInViewInterceptor extends HibernateAccessor implements AsyncWebRequestInterceptor {, +				SessionHolder sessionHolder = new SessionHolder(session);, +				TransactionSynchronizationManager.bindResource(getSessionFactory(), sessionHolder);, +	 * Create a <code>Callable</code> to bind the <code>Hibernate</code> session, +	 * to the async request thread., +	 */, +	public AbstractDelegatingCallable getAsyncCallable(WebRequest request) {, +		String attributeName = getParticipateAttributeName();, +		if ((request.getAttribute(attributeName, WebRequest.SCOPE_REQUEST) != null) || !isSingleSession()) {, +			return null;, +		}, +, +		final SessionHolder sessionHolder =, +				(SessionHolder) TransactionSynchronizationManager.getResource(getSessionFactory());, +, +		return new AbstractDelegatingCallable() {, +			public Object call() throws Exception {, +				TransactionSynchronizationManager.bindResource(getSessionFactory(), sessionHolder);, +				getNextCallable().call();, +				return null;, +			}, +		};]