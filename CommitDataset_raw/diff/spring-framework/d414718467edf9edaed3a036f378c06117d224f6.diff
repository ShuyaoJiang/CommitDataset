[+++ b/spring-test/src/main/java/org/springframework/mock/web/MockServletContext.java, +import org.springframework.http.MediaType;, +import org.springframework.http.MediaTypeFactory;, +import org.springframework.util.StringUtils;, +	private final Map<String, MediaType> mimeTypes = new LinkedHashMap<>();, +, +		String extension = StringUtils.getFilenameExtension(filePath);, +		MediaType result;, +		if (this.mimeTypes.containsKey(extension)) {, +			result = this.mimeTypes.get(extension);, +		}, +		else {, +			result = MediaTypeFactory.getMediaType(filePath);, +		}, +		return result != null ? result.toString() : null;, +	}, +, +	/**, +	 * Adds a mime type mapping for use by {@link #getMimeType(String)}., +	 * @param fileExtension a file extension, such as {@code txt}, {@code gif}, +	 * @param mimeType the mime type, +	 */, +	public void addMimeType(String fileExtension, MediaType mimeType) {, +		Assert.notNull(fileExtension, "'fileExtension' must not be null");, +		this.mimeTypes.put(fileExtension, mimeType);, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockServletContext.java, +import org.springframework.http.MediaType;, +import org.springframework.http.MediaTypeFactory;, +import org.springframework.util.StringUtils;, +	private final Map<String, MediaType> mimeTypes = new LinkedHashMap<>();, +, +		String extension = StringUtils.getFilenameExtension(filePath);, +		MediaType result;, +		if (this.mimeTypes.containsKey(extension)) {, +			result = this.mimeTypes.get(extension);, +		}, +		else {, +			result = MediaTypeFactory.getMediaType(filePath);, +		}, +		return result != null ? result.toString() : null;, +	}, +, +	/**, +	 * Adds a mime type mapping for use by {@link #getMimeType(String)}., +	 * @param fileExtension a file extension, such as {@code txt}, {@code gif}, +	 * @param mimeType the mime type, +	 */, +	public void addMimeType(String fileExtension, MediaType mimeType) {, +		Assert.notNull(fileExtension, "'fileExtension' must not be null");, +		this.mimeTypes.put(fileExtension, mimeType);, +++ b/spring-test/src/test/java/org/springframework/mock/web/MockServletContextTests.java, +import org.springframework.http.MediaType;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +		sc.addMimeType("enigma", new MediaType("text", "enigma"));, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockServletContext.java, +import org.springframework.http.MediaType;, +import org.springframework.http.MediaTypeFactory;, +import org.springframework.util.StringUtils;, +	private final Map<String, MediaType> mimeTypes = new LinkedHashMap<>();, +, +		String extension = StringUtils.getFilenameExtension(filePath);, +		MediaType result;, +		if (this.mimeTypes.containsKey(extension)) {, +			result = this.mimeTypes.get(extension);, +		}, +		else {, +			result = MediaTypeFactory.getMediaType(filePath);, +		}, +		return result != null ? result.toString() : null;, +	}, +, +	/**, +	 * Adds a mime type mapping for use by {@link #getMimeType(String)}., +	 * @param fileExtension a file extension, such as {@code txt}, {@code gif}, +	 * @param mimeType the mime type, +	 */, +	public void addMimeType(String fileExtension, MediaType mimeType) {, +		Assert.notNull(fileExtension, "'fileExtension' must not be null");, +		this.mimeTypes.put(fileExtension, mimeType);, +++ b/spring-test/src/test/java/org/springframework/mock/web/MockServletContextTests.java, +import org.springframework.http.MediaType;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +		sc.addMimeType("enigma", new MediaType("text", "enigma"));, +++ b/spring-web/src/test/java/org/springframework/mock/web/test/MockServletContext.java, +import org.springframework.http.MediaType;, +import org.springframework.http.MediaTypeFactory;, +import org.springframework.util.StringUtils;, +	private final Map<String, MediaType> mimeTypes = new LinkedHashMap<>();, +		String extension = StringUtils.getFilenameExtension(filePath);, +		MediaType result;]