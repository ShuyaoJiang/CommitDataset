[+++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, +import org.springframework.web.context.ServletContextAware;, +public class ContentNegotiationManagerFactoryBean, +		implements FactoryBean<ContentNegotiationManager>, InitializingBean, ServletContextAware {, +	private Properties mediaTypes = new Properties();, +	private ServletContext servletContext;, +, +, +	public Properties getMediaTypes() {, +		return this.mediaTypes;, +	}, +, +	public void setServletContext(ServletContext servletContext) {, +		this.servletContext = servletContext;, +	}, +, +		Map<String, MediaType> mediaTypesMap = new HashMap<String, MediaType>();, +		CollectionUtils.mergePropertiesIntoMap(this.mediaTypes, mediaTypesMap);, +, +			PathExtensionContentNegotiationStrategy strategy;, +			if (this.servletContext != null) {, +				strategy = new ServletPathExtensionContentNegotiationStrategy(this.servletContext, mediaTypesMap);, +			}, +			else {, +				strategy = new PathExtensionContentNegotiationStrategy(mediaTypesMap);, +			}, +			ParameterContentNegotiationStrategy strategy = new ParameterContentNegotiationStrategy(mediaTypesMap);, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, +import org.springframework.web.context.ServletContextAware;, +public class ContentNegotiationManagerFactoryBean, +		implements FactoryBean<ContentNegotiationManager>, InitializingBean, ServletContextAware {, +	private Properties mediaTypes = new Properties();, +	private ServletContext servletContext;, +, +, +	public Properties getMediaTypes() {, +		return this.mediaTypes;, +	}, +, +	public void setServletContext(ServletContext servletContext) {, +		this.servletContext = servletContext;, +	}, +, +		Map<String, MediaType> mediaTypesMap = new HashMap<String, MediaType>();, +		CollectionUtils.mergePropertiesIntoMap(this.mediaTypes, mediaTypesMap);, +, +			PathExtensionContentNegotiationStrategy strategy;, +			if (this.servletContext != null) {, +				strategy = new ServletPathExtensionContentNegotiationStrategy(this.servletContext, mediaTypesMap);, +			}, +			else {, +				strategy = new PathExtensionContentNegotiationStrategy(mediaTypesMap);, +			}, +			ParameterContentNegotiationStrategy strategy = new ParameterContentNegotiationStrategy(mediaTypesMap);, +++ b/spring-web/src/main/java/org/springframework/web/accept/PathExtensionContentNegotiationStrategy.java, + * A ContentNegotiationStrategy that uses the path extension of the URL to, + * determine what media types are requested. The path extension is first looked, + * up in the map of media types provided to the constructor. If that fails, the, + * Java Activation framework is used as a fallback mechanism., + * <p>, + * The presence of the Java Activation framework is detected and enabled, + * automatically but the {@link #setUseJaf(boolean)} property may be used to, + * override that setting., +	private static final boolean JAF_PRESENT = ClassUtils.isPresent("javax.activation.FileTypeMap",, +					PathExtensionContentNegotiationStrategy.class.getClassLoader());, +, +	 * later on if any extensions are resolved through the Java Activation framework., +		if (this.useJaf) {, +				return jafMediaType;, +		return null;, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, +import org.springframework.web.context.ServletContextAware;, +public class ContentNegotiationManagerFactoryBean, +		implements FactoryBean<ContentNegotiationManager>, InitializingBean, ServletContextAware {, +	private Properties mediaTypes = new Properties();, +	private ServletContext servletContext;, +, +, +	public Properties getMediaTypes() {, +		return this.mediaTypes;, +	}, +, +	public void setServletContext(ServletContext servletContext) {, +		this.servletContext = servletContext;, +	}, +, +		Map<String, MediaType> mediaTypesMap = new HashMap<String, MediaType>();, +		CollectionUtils.mergePropertiesIntoMap(this.mediaTypes, mediaTypesMap);, +, +			PathExtensionContentNegotiationStrategy strategy;, +			if (this.servletContext != null) {, +				strategy = new ServletPathExtensionContentNegotiationStrategy(this.servletContext, mediaTypesMap);, +			}, +			else {, +				strategy = new PathExtensionContentNegotiationStrategy(mediaTypesMap);, +			}, +			ParameterContentNegotiationStrategy strategy = new ParameterContentNegotiationStrategy(mediaTypesMap);, +++ b/spring-web/src/main/java/org/springframework/web/accept/PathExtensionContentNegotiationStrategy.java, + * A ContentNegotiationStrategy that uses the path extension of the URL to, + * determine what media types are requested. The path extension is first looked]