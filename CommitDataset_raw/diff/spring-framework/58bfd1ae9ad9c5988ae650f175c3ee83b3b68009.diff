[+++ b/build.gradle, +		testCompile("com.thoughtworks.xstream:xstream:1.4.4"), +++ b/build.gradle, +		testCompile("com.thoughtworks.xstream:xstream:1.4.4"), +++ b/spring-oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java, +import com.thoughtworks.xstream.core.util.CompositeClassLoader;, +import com.thoughtworks.xstream.io.xml.XmlFriendlyNameCoder;, +import com.thoughtworks.xstream.io.xml.XppDriver;, +import com.thoughtworks.xstream.mapper.Mapper;, + * {@code XStreamMarshaller} to unmarshal XML from external sources</b> (i.e. the Web),, + * as this can result in <b>security vulnerabilities</b>. If you do use the, + * usage within Web Services., + *, + * <p>This marshaller requires XStream 1.4 or higher, as of Spring 4.0., + * Note that {@link XStream} construction has been reworked in 4.0, with the, + * stream driver and the class loader getting passed into XStream itself now., + * @author Juergen Hoeller, +	private final XppDriver fallbackDriver = new XppDriver();, +, +	private Mapper mapper;, +, +	private Integer mode;, +, +	private ConverterMatcher[] converters;, +, +	private Map<String, ?> aliases;, +, +	private Map<String, ?> aliasesByType;, +, +	private Map<String, String> fieldAliases;, +, +	private Class<?>[] useAttributeForTypes;, +, +	private Map<?, ?> useAttributesFor;, +, +	private Map<Class<?>, String> implicitCollections;, +, +	private Map<Class<?>, String> omittedFields;, +, +	private Class<?>[] annotatedClasses;, +, +	private boolean autodetectAnnotations;, +, +	private Class<?>[] supportedClasses;, +	private ClassLoader beanClassLoader = new CompositeClassLoader();, +, +	private XStream xstream;, +	 * Set the XStream hierarchical stream driver to be used for readers and writers., +	 * <p>As of Spring 4.0, this stream driver will also be passed to the {@link XStream}, +	 * constructor and therefore used by streaming-related native API methods themselves., +	public void setStreamDriver(HierarchicalStreamDriver streamDriver) {, +		this.streamDriver = streamDriver;, +	 * Set a custom XStream Mapper to use., +	 * @since 4.0, +	 */, +	public void setMapper(Mapper mapper) {, +		this.mapper = mapper;, +	}, +, +	/**, +	 * Set the XStream mode to use., +		this.mode = mode;, +	public void setConverters(ConverterMatcher... converters) {, +		this.converters = converters;, +	 * Set an alias/type map, consisting of string aliases mapped to classes., +	 * <p>Keys are aliases; values are either {@code Class} instances, or String class names., +	public void setAliases(Map<String, ?> aliases) {, +		this.aliases = aliases;, +	 * Sets the aliases by type map, consisting of string aliases mapped to classes., +	 * <p>Any class that is assignable to this type will be aliased to the same name., +	 * Keys are aliases; values are either {@code Class} instances, or String class names., +	public void setAliasesByType(Map<String, ?> aliasesByType) {, +		this.aliasesByType = aliasesByType;, +	public void setFieldAliases(Map<String, String> fieldAliases) {, +		this.fieldAliases = fieldAliases;, +	public void setUseAttributeForTypes(Class<?>... useAttributeForTypes) {, +		this.useAttributeForTypes = useAttributeForTypes;, +	 * either {@code &lt;String, Class&gt;} pairs, in which case, +	 * Alternatively, the map can contain {@code &lt;Class, String&gt;}, +	 * or {@code &lt;Class, List&lt;String&gt;&gt;} pairs, which results, +	 * in {@link XStream#useAttributeFor(Class, String)} calls., +	public void setUseAttributeFor(Map<?, ?> useAttributesFor) {, +		this.useAttributesFor = useAttributesFor;, +	}, +, +	/**, +	 * Specify implicit collection fields, as a Map consisting of {@code Class} instances, +	 * mapped to comma separated collection field names., +	 *@see XStream#addImplicitCollection(Class, String), +	 */, +	public void setImplicitCollections(Map<Class<?>, String> implicitCollections) {, +		this.implicitCollections = implicitCollections;, +	}, +, +	/**, +	 * Specify omitted fields, as a Map consisting of {@code Class} instances, +	 * mapped to comma separated field names., +	 * @see XStream#omitField(Class, String), +	 */, +	public void setOmittedFields(Map<Class<?>, String> omittedFields) {]