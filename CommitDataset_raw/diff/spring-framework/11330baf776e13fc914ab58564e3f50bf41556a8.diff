[+++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java, +	public void testAliasCircle() {, +		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory();, +		lbf.registerAlias("test", "test2");, +		lbf.registerAlias("test2", "test3");, +		try {, +			lbf.registerAlias("test3", "test");, +			fail("Should have thrown IllegalStateException");, +		}, +		catch (IllegalStateException ex) {, +			// expected, +		}, +	}, +, +	@Test, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java, +	public void testAliasCircle() {, +		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory();, +		lbf.registerAlias("test", "test2");, +		lbf.registerAlias("test2", "test3");, +		try {, +			lbf.registerAlias("test3", "test");, +			fail("Should have thrown IllegalStateException");, +		}, +		catch (IllegalStateException ex) {, +			// expected, +		}, +	}, +, +	@Test, +++ b/org.springframework.core/src/main/java/org/springframework/core/SimpleAliasRegistry.java, +			checkForAliasCircle(name, alias);, +					checkForAliasCircle(resolvedName, resolvedAlias);, +	/**, +	 * Check whether the given name points back to given alias as an alias, +	 * in the other direction, catching a circular reference upfront and, +	 * throwing a corresponding IllegalStateException., +	 * @param name the candidate name, +	 * @param alias the candidate alias, +	 * @see #registerAlias, +	 */, +	protected void checkForAliasCircle(String name, String alias) {, +		if (alias.equals(canonicalName(name))) {, +			throw new IllegalStateException("Cannot register alias '" + alias +, +					"' for name '" + name + "': Circular reference - '" +, +					name + "' is a direct or indirect alias for '" + alias + "' already");, +		}, +	}, +]