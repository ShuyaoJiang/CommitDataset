[+++ b/spring-test/src/main/java/org/springframework/test/context/web/ServletTestExecutionListener.java, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.util.Assert;, + * generally takes no action if the {@linkplain TestContext#getTestClass() test, + * class} is not annotated with {@link WebAppConfiguration @WebAppConfiguration}., + * See the Javadoc for individual methods in this class for details., +	 * callback phase via Spring Web's {@link RequestContextHolder}, but only if, +	 * the {@linkplain TestContext#getTestClass() test class} is annotated with, +	 * {@link WebAppConfiguration @WebAppConfiguration}., +	 * {@link RequestContextHolder}, but only if the, +	 * {@linkplain TestContext#getTestClass() test class} is annotated with, +	 * {@link WebAppConfiguration @WebAppConfiguration}., +	 * {@code RequestContextHolder}, but only if the {@link, +	 * #RESET_REQUEST_CONTEXT_HOLDER_ATTRIBUTE} in the supplied {@code TestContext}, +	 * has a value of {@link Boolean#TRUE}., +	 * <p>The {@link #RESET_REQUEST_CONTEXT_HOLDER_ATTRIBUTE} will be, +	 * subsequently removed from the test context, regardless of its value., +		}, +, +	private boolean notAnnotatedWithWebAppConfiguration(TestContext testContext) {, +		return AnnotationUtils.findAnnotation(testContext.getTestClass(), WebAppConfiguration.class) == null;, +		if (notAnnotatedWithWebAppConfiguration(testContext)) {, +			return;, +		}, +			Assert.state(servletContext instanceof MockServletContext, String.format(, +++ b/spring-test/src/main/java/org/springframework/test/context/web/ServletTestExecutionListener.java, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.util.Assert;, + * generally takes no action if the {@linkplain TestContext#getTestClass() test, + * class} is not annotated with {@link WebAppConfiguration @WebAppConfiguration}., + * See the Javadoc for individual methods in this class for details., +	 * callback phase via Spring Web's {@link RequestContextHolder}, but only if, +	 * the {@linkplain TestContext#getTestClass() test class} is annotated with, +	 * {@link WebAppConfiguration @WebAppConfiguration}., +	 * {@link RequestContextHolder}, but only if the, +	 * {@linkplain TestContext#getTestClass() test class} is annotated with, +	 * {@link WebAppConfiguration @WebAppConfiguration}., +	 * {@code RequestContextHolder}, but only if the {@link, +	 * #RESET_REQUEST_CONTEXT_HOLDER_ATTRIBUTE} in the supplied {@code TestContext}, +	 * has a value of {@link Boolean#TRUE}., +	 * <p>The {@link #RESET_REQUEST_CONTEXT_HOLDER_ATTRIBUTE} will be, +	 * subsequently removed from the test context, regardless of its value., +		}, +, +	private boolean notAnnotatedWithWebAppConfiguration(TestContext testContext) {, +		return AnnotationUtils.findAnnotation(testContext.getTestClass(), WebAppConfiguration.class) == null;, +		if (notAnnotatedWithWebAppConfiguration(testContext)) {, +			return;, +		}, +			Assert.state(servletContext instanceof MockServletContext, String.format(, +++ b/spring-test/src/test/java/org/springframework/test/context/web/ServletTestExecutionListenerTests.java, +import org.mockito.Mockito;, +	private void assertAttributesAvailable() {, +		assertNotNull("request attributes should be available", RequestContextHolder.getRequestAttributes());, +	}, +, +	private void assertAttributesNotAvailable() {, +		assertNull("request attributes should not be available", RequestContextHolder.getRequestAttributes());, +	}, +, +	public void standardApplicationContext() throws Exception {, +		Mockito.<Class<?>> when(testContext.getTestClass()).thenReturn(getClass());, +		listener.beforeTestClass(testContext);, +		assertAttributeExists();, +, +	public void legacyWebTestCaseWithoutExistingRequestAttributes() throws Exception {, +		Mockito.<Class<?>> when(testContext.getTestClass()).thenReturn(LegacyWebTestCase.class);, +, +		assertAttributesNotAvailable();, +, +		listener.beforeTestClass(testContext);, +		assertAttributesNotAvailable();, +		verify(testContext, times(0)).setAttribute(RESET_REQUEST_CONTEXT_HOLDER_ATTRIBUTE, Boolean.TRUE);, +		when(testContext.getAttribute(RESET_REQUEST_CONTEXT_HOLDER_ATTRIBUTE)).thenReturn(null);, +, +		listener.beforeTestMethod(testContext);, +		assertAttributesNotAvailable();, +		verify(testContext, times(0)).setAttribute(RESET_REQUEST_CONTEXT_HOLDER_ATTRIBUTE, Boolean.TRUE);, +, +		listener.afterTestMethod(testContext);, +		verify(testContext, times(1)).removeAttribute(RESET_REQUEST_CONTEXT_HOLDER_ATTRIBUTE);, +		assertAttributesNotAvailable();, +	}, +, +	@Test, +	public void legacyWebTestCaseWithPresetRequestAttributes() throws Exception {, +		Mockito.<Class<?>> when(testContext.getTestClass()).thenReturn(LegacyWebTestCase.class);, +, +		listener.beforeTestClass(testContext);, +		assertAttributeExists();, +, +		listener.prepareTestInstance(testContext);, +		assertAttributeExists();, +		verify(testContext, times(0)).setAttribute(RESET_REQUEST_CONTEXT_HOLDER_ATTRIBUTE, Boolean.TRUE);, +		when(testContext.getAttribute(RESET_REQUEST_CONTEXT_HOLDER_ATTRIBUTE)).thenReturn(null);, +, +		listener.beforeTestMethod(testContext);, +		assertAttributeExists();, +		verify(testContext, times(0)).setAttribute(RESET_REQUEST_CONTEXT_HOLDER_ATTRIBUTE, Boolean.TRUE);, +		when(testContext.getAttribute(RESET_REQUEST_CONTEXT_HOLDER_ATTRIBUTE)).thenReturn(null);]