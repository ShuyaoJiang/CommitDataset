[+++ b/spring-web/src/main/java/org/springframework/remoting/jaxws/JaxWsPortClientInterceptor.java, + * port of a JAX-WS service. Compatible with JAX-WS 2.1 and 2.2., +	private WebServiceFeature[] portFeatures;, +, +	 * Specify WebServiceFeature objects (e.g. as inner bean definitions), +	 * to apply to JAX-WS port stub creation., +	 * <p>Note: This mechanism requires a fully JAX-WS 2.1 compliant provider., +	 * @see Service#getPort(Class, javax.xml.ws.WebServiceFeature...), +	 * @see #setServiceFeatures, +	 */, +	public void setPortFeatures(WebServiceFeature... features) {, +		this.portFeatures = features;, +	}, +, +	/**, +	 * Specify WebServiceFeature specifications for the JAX-WS port stub:, +	 * <p>As of Spring 4.0, this is effectively just an alternative way of, +	 * specifying {@link #setPortFeatures "portFeatures"}. Do not specify, +	 * both properties at the same time; prefer "portFeatures" moving forward., +	 * @deprecated as of Spring 4.0, in favor of the differentiated, +	 * {@link #setServiceFeatures "serviceFeatures"} and, +	 * {@link #setPortFeatures "portFeatures"} properties, +	@Deprecated, +		if (this.portFeatures != null || this.webServiceFeatures != null) {, +			WebServiceFeature[] portFeaturesToUse = this.portFeatures;, +			if (portFeaturesToUse == null) {, +				portFeaturesToUse = new WebServiceFeature[this.webServiceFeatures.length];, +				for (int i = 0; i < this.webServiceFeatures.length; i++) {, +					portFeaturesToUse[i] = convertWebServiceFeature(this.webServiceFeatures[i]);, +			return (portQName != null ? service.getPort(portQName, getServiceInterface(), portFeaturesToUse) :, +					service.getPort(getServiceInterface(), portFeaturesToUse));, +	 * Convert the given feature specification object to a WebServiceFeature instance, +	 * @param feature the feature specification object, as passed into the, +	 * {@link #setWebServiceFeatures "webServiceFeatures"} bean property, +	 * @return the WebServiceFeature instance (never {@code null}), +	 */, +	private WebServiceFeature convertWebServiceFeature(Object feature) {, +		Assert.notNull(feature, "WebServiceFeature specification object must not be null");, +		if (feature instanceof WebServiceFeature) {, +			return (WebServiceFeature) feature;, +		}, +		else if (feature instanceof Class) {, +			return (WebServiceFeature) BeanUtils.instantiate((Class<?>) feature);, +		}, +		else if (feature instanceof String) {, +			try {, +				Class<?> featureClass = getBeanClassLoader().loadClass((String) feature);, +				return (WebServiceFeature) BeanUtils.instantiate(featureClass);, +			}, +			catch (ClassNotFoundException ex) {, +				throw new IllegalArgumentException("Could not load WebServiceFeature class [" + feature + "]");, +			}, +		}, +		else {, +			throw new IllegalArgumentException("Unknown WebServiceFeature specification type: " + feature.getClass());, +		}, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/remoting/jaxws/JaxWsPortClientInterceptor.java, + * port of a JAX-WS service. Compatible with JAX-WS 2.1 and 2.2., +	private WebServiceFeature[] portFeatures;, +, +	 * Specify WebServiceFeature objects (e.g. as inner bean definitions), +	 * to apply to JAX-WS port stub creation., +	 * <p>Note: This mechanism requires a fully JAX-WS 2.1 compliant provider., +	 * @see Service#getPort(Class, javax.xml.ws.WebServiceFeature...), +	 * @see #setServiceFeatures, +	 */, +	public void setPortFeatures(WebServiceFeature... features) {, +		this.portFeatures = features;, +	}, +, +	/**, +	 * Specify WebServiceFeature specifications for the JAX-WS port stub:, +	 * <p>As of Spring 4.0, this is effectively just an alternative way of, +	 * specifying {@link #setPortFeatures "portFeatures"}. Do not specify, +	 * both properties at the same time; prefer "portFeatures" moving forward., +	 * @deprecated as of Spring 4.0, in favor of the differentiated, +	 * {@link #setServiceFeatures "serviceFeatures"} and, +	 * {@link #setPortFeatures "portFeatures"} properties, +	@Deprecated, +		if (this.portFeatures != null || this.webServiceFeatures != null) {, +			WebServiceFeature[] portFeaturesToUse = this.portFeatures;, +			if (portFeaturesToUse == null) {, +				portFeaturesToUse = new WebServiceFeature[this.webServiceFeatures.length];, +				for (int i = 0; i < this.webServiceFeatures.length; i++) {, +					portFeaturesToUse[i] = convertWebServiceFeature(this.webServiceFeatures[i]);, +			return (portQName != null ? service.getPort(portQName, getServiceInterface(), portFeaturesToUse) :, +					service.getPort(getServiceInterface(), portFeaturesToUse));, +	 * Convert the given feature specification object to a WebServiceFeature instance, +	 * @param feature the feature specification object, as passed into the, +	 * {@link #setWebServiceFeatures "webServiceFeatures"} bean property, +	 * @return the WebServiceFeature instance (never {@code null}), +	 */, +	private WebServiceFeature convertWebServiceFeature(Object feature) {, +		Assert.notNull(feature, "WebServiceFeature specification object must not be null");, +		if (feature instanceof WebServiceFeature) {, +			return (WebServiceFeature) feature;, +		}]