[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/UrlTag.java, +import java.io.ByteArrayOutputStream;, +, + * <code>/currentApplicationContext/url/path/more%20than%20JSTL%20c%3Aurl</code>, +	 * URL-encode the provided String using the character encoding for the response., +	 * <p>This method will <strong>not</strong> URL-encode according to the , +	 * <code>application/x-www-form-urlencoded</code> MIME format. Spaces will , +	 * encoded as regular character instead of <code>+</code>. In <code>UTF-8</code>, +	 * a space encodes to <code>%20</code>., +			String encoding = pageContext.getResponse().getCharacterEncoding();, +			String formUrlEncodedValue = URLEncoder.encode(value, encoding);, +			if (!formUrlEncodedValue.contains("+")) {, +				return formUrlEncodedValue;, +			}, +			String spaceEncoding = this.urlEncode(' ', encoding);, +			return formUrlEncodedValue.replace("+", spaceEncoding);, +	/*, +	 * based on URLCodec from Apache Commons Codec, +	 */, +	protected String urlEncode(Character c, String enc) throws UnsupportedEncodingException {, +		if (c == null) {, +			return null;, +		}, +		byte[] bytes = c.toString().getBytes(enc);, +		StringBuilder builder = new StringBuilder();, +		for (int i = 0; i < bytes.length; i++) {, +			int b = bytes[i];, +			if (b < 0) {, +				b = 256 + b;, +			}, +			char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16));, +			char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16));, +			builder.append('%');, +			builder.append(hex1);, +			builder.append(hex2);, +		}, +		return builder.toString();, +	}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/UrlTag.java, +import java.io.ByteArrayOutputStream;, +, + * <code>/currentApplicationContext/url/path/more%20than%20JSTL%20c%3Aurl</code>, +	 * URL-encode the provided String using the character encoding for the response., +	 * <p>This method will <strong>not</strong> URL-encode according to the , +	 * <code>application/x-www-form-urlencoded</code> MIME format. Spaces will , +	 * encoded as regular character instead of <code>+</code>. In <code>UTF-8</code>, +	 * a space encodes to <code>%20</code>., +			String encoding = pageContext.getResponse().getCharacterEncoding();, +			String formUrlEncodedValue = URLEncoder.encode(value, encoding);, +			if (!formUrlEncodedValue.contains("+")) {, +				return formUrlEncodedValue;, +			}, +			String spaceEncoding = this.urlEncode(' ', encoding);, +			return formUrlEncodedValue.replace("+", spaceEncoding);, +	/*, +	 * based on URLCodec from Apache Commons Codec, +	 */, +	protected String urlEncode(Character c, String enc) throws UnsupportedEncodingException {, +		if (c == null) {, +			return null;, +		}, +		byte[] bytes = c.toString().getBytes(enc);, +		StringBuilder builder = new StringBuilder();, +		for (int i = 0; i < bytes.length; i++) {, +			int b = bytes[i];, +			if (b < 0) {, +				b = 256 + b;, +			}, +			char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16));, +			char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16));, +			builder.append('%');, +			builder.append(hex1);, +			builder.append(hex2);, +		}, +		return builder.toString();, +	}, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/tags/UrlTagTests.java, +import java.io.UnsupportedEncodingException;, +import java.net.URLDecoder;, +		assertEquals("url/path?n%20me=v%26l%3De&name=value2", context, +		assertEquals("url/path?n%20me=v%26l%3De&name=value2", context, +		assertEquals("url/path?n%20me=v%26l%3De&amp;name=value2", context, +		assertEquals("url\\/path?n%20me=v%26l%3De&name=value2", context, +		assertEquals("url\\/path?n%20me=v%26l%3De&amp;name=value2", context, +		assertEquals("?n%20me=v%26l%3De&name=value2", queryString);, +		assertEquals("url/v%20lue", uri);, +		assertEquals("url/path?name=value&n%20me=v%20lue", uri);, +		assertEquals("url/value?n%20me=v%20lue", uri);, +		assertEquals("my%20name%2Bis", tag.urlEncode("my name+is"));, +	}, +	, +	public void testUrlEncode_character() throws UnsupportedEncodingException {, +		assertEquals("%20", tag.urlEncode(' ', "UTF-8"));, +		assertEquals(" ", URLDecoder.decode("%20", "UTF-8"));, +		assertEquals("%FE%FF%00%20", tag.urlEncode(' ', "UTF-16"));, +		assertEquals("%40", tag.urlEncode(' ', "IBM-Thai"));]