[+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, +				chain.push(getAsyncCallable(request, sessionFactory, sessionHolder));, +					if (!chain.pop()) {, +					if (!chain.pop()) {, +					getNext().call();, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, +				chain.push(getAsyncCallable(request, sessionFactory, sessionHolder));, +					if (!chain.pop()) {, +					if (!chain.pop()) {, +					getNext().call();, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewInterceptor.java, +				getNext().call();, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, +				chain.push(getAsyncCallable(request, sessionFactory, sessionHolder));, +					if (!chain.pop()) {, +					if (!chain.pop()) {, +					getNext().call();, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewInterceptor.java, +				getNext().call();, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewFilter.java, +			chain.push(getAsyncCallable(request, sessionFactory, sessionHolder));, +				if (!chain.pop()) {, +					getNext().call();, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, +				chain.push(getAsyncCallable(request, sessionFactory, sessionHolder));, +					if (!chain.pop()) {, +					if (!chain.pop()) {, +					getNext().call();, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewInterceptor.java, +				getNext().call();, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewFilter.java, +			chain.push(getAsyncCallable(request, sessionFactory, sessionHolder));, +				if (!chain.pop()) {, +					getNext().call();, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewInterceptor.java, +				getNext().call();, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, +				chain.push(getAsyncCallable(request, sessionFactory, sessionHolder));, +					if (!chain.pop()) {, +					if (!chain.pop()) {, +					getNext().call();, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewInterceptor.java, +				getNext().call();, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewFilter.java, +			chain.push(getAsyncCallable(request, sessionFactory, sessionHolder));, +				if (!chain.pop()) {, +					getNext().call();, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewInterceptor.java, +				getNext().call();, +++ b/spring-orm/src/test/java/org/springframework/orm/hibernate3/support/OpenSessionInViewTests.java, +		asyncCallable.setNext(new Callable<Object>() {, +		chain.setLastCallable(new Callable<Object>() {, +		chain.startCallableProcessing();, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, +				chain.push(getAsyncCallable(request, sessionFactory, sessionHolder));, +					if (!chain.pop()) {, +					if (!chain.pop()) {, +					getNext().call();, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewInterceptor.java, +				getNext().call();, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewFilter.java, +			chain.push(getAsyncCallable(request, sessionFactory, sessionHolder));, +				if (!chain.pop()) {, +					getNext().call();, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewInterceptor.java, +				getNext().call();, +++ b/spring-orm/src/test/java/org/springframework/orm/hibernate3/support/OpenSessionInViewTests.java, +		asyncCallable.setNext(new Callable<Object>() {, +		chain.setLastCallable(new Callable<Object>() {, +		chain.startCallableProcessing();, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/AbstractDelegatingCallable.java, + * A base class for a Callable used to form a chain of Callable instances., + * Instances of this class are typically registered via, + * {@link AsyncExecutionChain#push(AbstractDelegatingCallable)} in which case, + * there is no need to set the next Callable. Implementations can simply use, + * {@link #getNext()} to delegate to the next Callable and assume it will be set., +	protected Callable<Object> getNext() {, +		return this.next;, +	public void setNext(Callable<Object> callable) {, +		this.next = callable;, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.java, +				chain.push(getAsyncCallable(request, sessionFactory, sessionHolder));, +					if (!chain.pop()) {, +					if (!chain.pop()) {, +					getNext().call();, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/support/OpenSessionInViewInterceptor.java, +				getNext().call();, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewFilter.java, +			chain.push(getAsyncCallable(request, sessionFactory, sessionHolder));, +				if (!chain.pop()) {, +					getNext().call();, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewInterceptor.java, +				getNext().call();, +++ b/spring-orm/src/test/java/org/springframework/orm/hibernate3/support/OpenSessionInViewTests.java, +		asyncCallable.setNext(new Callable<Object>() {, +		chain.setLastCallable(new Callable<Object>() {, +		chain.startCallableProcessing();, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/AbstractDelegatingCallable.java, + * A base class for a Callable used to form a chain of Callable instances., + * Instances of this class are typically registered via]