[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ConsumesRequestCondition.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.web.cors.CorsUtils;, +	private final static ConsumesRequestCondition PRE_FLIGHT_MATCH = new ConsumesRequestCondition();, +, +, +		if (CorsUtils.isPreFlightRequest(request)) {, +			return PRE_FLIGHT_MATCH;, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ConsumesRequestCondition.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.web.cors.CorsUtils;, +	private final static ConsumesRequestCondition PRE_FLIGHT_MATCH = new ConsumesRequestCondition();, +, +, +		if (CorsUtils.isPreFlightRequest(request)) {, +			return PRE_FLIGHT_MATCH;, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/HeadersRequestCondition.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.web.cors.CorsUtils;, +	private final static HeadersRequestCondition PRE_FLIGHT_MATCH = new HeadersRequestCondition();, +, +, +		if (CorsUtils.isPreFlightRequest(request)) {, +			return PRE_FLIGHT_MATCH;, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ConsumesRequestCondition.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.web.cors.CorsUtils;, +	private final static ConsumesRequestCondition PRE_FLIGHT_MATCH = new ConsumesRequestCondition();, +, +, +		if (CorsUtils.isPreFlightRequest(request)) {, +			return PRE_FLIGHT_MATCH;, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/HeadersRequestCondition.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.web.cors.CorsUtils;, +	private final static HeadersRequestCondition PRE_FLIGHT_MATCH = new HeadersRequestCondition();, +, +, +		if (CorsUtils.isPreFlightRequest(request)) {, +			return PRE_FLIGHT_MATCH;, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ProducesRequestCondition.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.web.cors.CorsUtils;, +	private final static ProducesRequestCondition PRE_FLIGHT_MATCH = new ProducesRequestCondition();, +, +, +		if (CorsUtils.isPreFlightRequest(request)) {, +			return PRE_FLIGHT_MATCH;, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ConsumesRequestCondition.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.web.cors.CorsUtils;, +	private final static ConsumesRequestCondition PRE_FLIGHT_MATCH = new ConsumesRequestCondition();, +, +, +		if (CorsUtils.isPreFlightRequest(request)) {, +			return PRE_FLIGHT_MATCH;, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/HeadersRequestCondition.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.web.cors.CorsUtils;, +	private final static HeadersRequestCondition PRE_FLIGHT_MATCH = new HeadersRequestCondition();, +, +, +		if (CorsUtils.isPreFlightRequest(request)) {, +			return PRE_FLIGHT_MATCH;, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ProducesRequestCondition.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.web.cors.CorsUtils;, +	private final static ProducesRequestCondition PRE_FLIGHT_MATCH = new ProducesRequestCondition();, +, +, +		if (CorsUtils.isPreFlightRequest(request)) {, +			return PRE_FLIGHT_MATCH;, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/RequestCondition.java, + * Copyright 2002-2016 the original author or authors., + * Contract for request mapping conditions., + * which is a closer match for a given request., + * @param <T> the type of objects that this RequestCondition can be combined, + * with and compared to, +	 * Combine this condition with another such as conditions from a, +	 * type-level and method-level {@code @RequestMapping} annotation., +	 * Check if the condition matches the request returning a potentially new, +	 * instance created for the current request. For example a condition with, +	 * multiple URL patterns may return a new instance only with those patterns, +	 * that match the request., +	 * <p>For CORS pre-flight requests, conditions should match to the would-be,, +	 * actual request (e.g. URL pattern, query parameters, and the HTTP method, +	 * from the "Access-Control-Request-Method" header). If a condition cannot, +	 * be matched to a pre-flight request it should return an instance with, +	 * empty content thus not causing a failure to match., +	 * @return a condition instance in case of a match or {@code null} otherwise., +	 * Compare this condition to another condition in the context of]