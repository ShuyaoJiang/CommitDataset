[+++ b/spring-core/src/main/java/org/springframework/core/convert/converter/ConditionalGenericConverter.java, + * Copyright 2002-2015 the original author or authors., + *, + * <p>See {@link ConditionalConverter} for details., +++ b/spring-core/src/main/java/org/springframework/core/convert/converter/ConditionalGenericConverter.java, + * Copyright 2002-2015 the original author or authors., + *, + * <p>See {@link ConditionalConverter} for details., +++ b/spring-core/src/main/java/org/springframework/core/convert/converter/Converter.java, + * A converter converts a source object of type {@code S} to a target of type {@code T}., + *, + * <p>Implementations of this interface are thread-safe and can be shared., + * @param <S> the source type, + * @param <T> the target type, +	 * Convert the source object of type {@code S} to target type {@code T}., +	 * @param source the source object to convert, which must be an instance of {@code S} (never {@code null}), +	 * @return the converted object, which must be an instance of {@code T} (potentially {@code null}), +	 * @throws IllegalArgumentException if the source cannot be converted to the desired target type, +++ b/spring-core/src/main/java/org/springframework/core/convert/converter/ConditionalGenericConverter.java, + * Copyright 2002-2015 the original author or authors., + *, + * <p>See {@link ConditionalConverter} for details., +++ b/spring-core/src/main/java/org/springframework/core/convert/converter/Converter.java, + * A converter converts a source object of type {@code S} to a target of type {@code T}., + *, + * <p>Implementations of this interface are thread-safe and can be shared., + * @param <S> the source type, + * @param <T> the target type, +	 * Convert the source object of type {@code S} to target type {@code T}., +	 * @param source the source object to convert, which must be an instance of {@code S} (never {@code null}), +	 * @return the converted object, which must be an instance of {@code T} (potentially {@code null}), +	 * @throws IllegalArgumentException if the source cannot be converted to the desired target type, +++ b/spring-core/src/main/java/org/springframework/core/convert/converter/GenericConverter.java, + * generics information, which can be used to influence the conversion logic., + * {@link ConverterFactory} interface is sufficient., +	 * Return the source and target types that this converter can convert between., +	 * <p>Each entry is a convertible source-to-target type pair., +	 * <p>For {@link ConditionalConverter conditional converters} this method may return, +	 * Convert the source object to the targetType described by the {@code TypeDescriptor}., +	 * @param source the source object to convert (may be {@code null}), +++ b/spring-core/src/main/java/org/springframework/core/convert/converter/ConditionalGenericConverter.java, + * Copyright 2002-2015 the original author or authors., + *, + * <p>See {@link ConditionalConverter} for details., +++ b/spring-core/src/main/java/org/springframework/core/convert/converter/Converter.java, + * A converter converts a source object of type {@code S} to a target of type {@code T}., + *, + * <p>Implementations of this interface are thread-safe and can be shared., + * @param <S> the source type, + * @param <T> the target type, +	 * Convert the source object of type {@code S} to target type {@code T}., +	 * @param source the source object to convert, which must be an instance of {@code S} (never {@code null}), +	 * @return the converted object, which must be an instance of {@code T} (potentially {@code null}), +	 * @throws IllegalArgumentException if the source cannot be converted to the desired target type, +++ b/spring-core/src/main/java/org/springframework/core/convert/converter/GenericConverter.java, + * generics information, which can be used to influence the conversion logic., + * {@link ConverterFactory} interface is sufficient., +	 * Return the source and target types that this converter can convert between., +	 * <p>Each entry is a convertible source-to-target type pair., +	 * <p>For {@link ConditionalConverter conditional converters} this method may return, +	 * Convert the source object to the targetType described by the {@code TypeDescriptor}., +	 * @param source the source object to convert (may be {@code null}), +++ b/spring-core/src/main/java/org/springframework/core/convert/support/FallbackObjectToStringConverter.java, + * Copyright 2002-2015 the original author or authors., + * Simply calls {@link Object#toString()} to convert any supported object, + * to a {@link String}., + * <p>Supports {@link CharSequence}, {@link StringWriter}, and any class, + * with a String constructor or one of the following static factory methods:, + * {@code valueOf(String)}, {@code of(String)}, {@code from(String)}., + *, + * <p>Used by the {@link DefaultConversionService} as a fallback if there, + * are no other explicit to-String converters registered., +++ b/spring-core/src/main/java/org/springframework/core/convert/converter/ConditionalGenericConverter.java, + * Copyright 2002-2015 the original author or authors., + *, + * <p>See {@link ConditionalConverter} for details., +++ b/spring-core/src/main/java/org/springframework/core/convert/converter/Converter.java, + * A converter converts a source object of type {@code S} to a target of type {@code T}., + *, + * <p>Implementations of this interface are thread-safe and can be shared., + * @param <S> the source type, + * @param <T> the target type, +	 * Convert the source object of type {@code S} to target type {@code T}., +	 * @param source the source object to convert, which must be an instance of {@code S} (never {@code null}), +	 * @return the converted object, which must be an instance of {@code T} (potentially {@code null}), +	 * @throws IllegalArgumentException if the source cannot be converted to the desired target type, +++ b/spring-core/src/main/java/org/springframework/core/convert/converter/GenericConverter.java, + * generics information, which can be used to influence the conversion logic., + * {@link ConverterFactory} interface is sufficient., +	 * Return the source and target types that this converter can convert between., +	 * <p>Each entry is a convertible source-to-target type pair., +	 * <p>For {@link ConditionalConverter conditional converters} this method may return, +	 * Convert the source object to the targetType described by the {@code TypeDescriptor}., +	 * @param source the source object to convert (may be {@code null}), +++ b/spring-core/src/main/java/org/springframework/core/convert/support/FallbackObjectToStringConverter.java, + * Copyright 2002-2015 the original author or authors., + * Simply calls {@link Object#toString()} to convert any supported object, + * to a {@link String}., + * <p>Supports {@link CharSequence}, {@link StringWriter}, and any class, + * with a String constructor or one of the following static factory methods:]