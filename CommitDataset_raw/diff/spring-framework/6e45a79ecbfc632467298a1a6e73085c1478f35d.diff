[+++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +/*, + * Copyright 2002-2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.util;, +, +import java.io.ByteArrayOutputStream;, +import java.io.UnsupportedEncodingException;, +import java.net.URI;, +import java.net.URISyntaxException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Map;, +, +import org.springframework.util.Assert;, +import org.springframework.util.CollectionUtils;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import org.springframework.util.ObjectUtils;, +import org.springframework.util.StringUtils;, +, +/**, + * Extension of {@link UriComponents} for hierarchical URIs., + *, + * @author Arjen Poutsma, + * @since 3.2, + * @see <a href="http://tools.ietf.org/html/rfc3986#section-1.2.3">Hierarchical URIs</a>, + */, +final class HierarchicalUriComponents extends UriComponents {, +, +    private static final char PATH_DELIMITER = '/';, +, +	private final String userInfo;, +, +	private final String host;, +, +	private final int port;, +, +	private final PathComponent path;, +, +	private final MultiValueMap<String, String> queryParams;, +, +	private final boolean encoded;, +, +	/**, +	 * Package-private constructor. All arguments are optional, and can be {@code null}., +	 *, +	 * @param scheme the scheme, +	 * @param userInfo the user info, +	 * @param host the host, +	 * @param port the port, +	 * @param path the path, +	 * @param queryParams the query parameters, +	 * @param fragment the fragment, +	 * @param encoded whether the components are already encoded, +	 * @param verify whether the components need to be checked for illegal characters, +	 */, +	HierarchicalUriComponents(String scheme, String userInfo, String host, int port,, +			PathComponent path, MultiValueMap<String, String> queryParams,, +			String fragment, boolean encoded, boolean verify) {, +, +		super(scheme, fragment);, +		this.userInfo = userInfo;, +		this.host = host;, +		this.port = port;, +		this.path = path != null ? path : NULL_PATH_COMPONENT;, +		this.queryParams = CollectionUtils.unmodifiableMultiValueMap(, +				queryParams != null ? queryParams : new LinkedMultiValueMap<String, String>(0));, +		this.encoded = encoded;, +		if (verify) {, +			verify();, +		}, +	}, +, +	// component getters, +, +	@Override, +	public String getSchemeSpecificPart() {, +		return null;, +	}, +, +	@Override, +    public String getUserInfo() {, +		return this.userInfo;]