[+++ b/spring-aop/src/main/java/org/springframework/aop/IntroductionAwareMethodMatcher.java, + * Copyright 2002-2013 the original author or authors., + * A specialized type of {@link MethodMatcher} that takes into account introductions, + * when matching methods. If there are no introductions on the target class,, + * a method matcher may be able to optimize matching more effectively for example., +++ b/spring-aop/src/main/java/org/springframework/aop/IntroductionAwareMethodMatcher.java, + * Copyright 2002-2013 the original author or authors., + * A specialized type of {@link MethodMatcher} that takes into account introductions, + * when matching methods. If there are no introductions on the target class,, + * a method matcher may be able to optimize matching more effectively for example., +++ b/spring-aop/src/main/java/org/springframework/aop/support/ClassFilters.java, + * Copyright 2002-2013 the original author or authors., + * Static utility methods for composing {@link ClassFilter ClassFilters}., +			for (ClassFilter filter : this.filters) {, +				if (filter.matches(clazz)) {, +			for (ClassFilter filter : this.filters) {, +				if (!filter.matches(clazz)) {, +++ b/spring-aop/src/main/java/org/springframework/aop/IntroductionAwareMethodMatcher.java, + * Copyright 2002-2013 the original author or authors., + * A specialized type of {@link MethodMatcher} that takes into account introductions, + * when matching methods. If there are no introductions on the target class,, + * a method matcher may be able to optimize matching more effectively for example., +++ b/spring-aop/src/main/java/org/springframework/aop/support/ClassFilters.java, + * Copyright 2002-2013 the original author or authors., + * Static utility methods for composing {@link ClassFilter ClassFilters}., +			for (ClassFilter filter : this.filters) {, +				if (filter.matches(clazz)) {, +			for (ClassFilter filter : this.filters) {, +				if (!filter.matches(clazz)) {, +++ b/spring-aop/src/main/java/org/springframework/aop/support/MethodMatchers.java, + * Static utility methods for composing {@link MethodMatcher MethodMatchers}., + * <p>A MethodMatcher may be evaluated statically (based on method and target, + * class) or need further evaluation dynamically (based on arguments at the, + * time of method invocation)., +++ b/spring-aop/src/main/java/org/springframework/aop/IntroductionAwareMethodMatcher.java, + * Copyright 2002-2013 the original author or authors., + * A specialized type of {@link MethodMatcher} that takes into account introductions, + * when matching methods. If there are no introductions on the target class,, + * a method matcher may be able to optimize matching more effectively for example., +++ b/spring-aop/src/main/java/org/springframework/aop/support/ClassFilters.java, + * Copyright 2002-2013 the original author or authors., + * Static utility methods for composing {@link ClassFilter ClassFilters}., +			for (ClassFilter filter : this.filters) {, +				if (filter.matches(clazz)) {, +			for (ClassFilter filter : this.filters) {, +				if (!filter.matches(clazz)) {, +++ b/spring-aop/src/main/java/org/springframework/aop/support/MethodMatchers.java, + * Static utility methods for composing {@link MethodMatcher MethodMatchers}., + * <p>A MethodMatcher may be evaluated statically (based on method and target, + * class) or need further evaluation dynamically (based on arguments at the, + * time of method invocation)., +++ b/spring-context/src/test/java/org/springframework/aop/aspectj/TargetPointcutSelectionTests.java, + * Copyright 2002-2013 the original author or authors., +, +, +, +, +, +]