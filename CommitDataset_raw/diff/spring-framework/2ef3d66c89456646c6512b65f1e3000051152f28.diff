[+++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheManagerFactoryBean.java, + * Copyright 2002-2014 the original author or authors., +		this.cacheManager = Caching.getCachingProvider().getCacheManager(, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheManagerFactoryBean.java, + * Copyright 2002-2014 the original author or authors., +		this.cacheManager = Caching.getCachingProvider().getCacheManager(, +++ b/spring-context/src/main/java/org/springframework/cache/support/AbstractCacheManager.java, +	// Early cache initialization on startup, +, +		// Preserve the initial order of the cache names, +			addCache(cache);, +	/**, +	 * Load the initial caches for this cache manager., +	 * <p>Called by {@link #afterPropertiesSet()} on startup., +	 * The returned collection may be empty but must not be {@code null}., +	 */, +	protected abstract Collection<? extends Cache> loadCaches();, +, +, +	// Lazy cache initialization on access, +, +	@Override, +	public Cache getCache(String name) {, +		Cache cache = lookupCache(name);, +		if (cache != null) {, +			return cache;, +		}, +		else {, +			Cache missingCache = getMissingCache(name);, +			if (missingCache != null) {, +				addCache(missingCache);, +				return lookupCache(name);  // may be decorated, +			}, +			return null;, +		}, +	}, +, +	@Override, +	public Collection<String> getCacheNames() {, +		return Collections.unmodifiableSet(this.cacheNames);, +	}, +, +, +	// Common cache initialization delegates/callbacks, +, +	protected final Cache lookupCache(String name) {, +		return this.cacheMap.get(name);, +	}, +, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheManagerFactoryBean.java, + * Copyright 2002-2014 the original author or authors., +		this.cacheManager = Caching.getCachingProvider().getCacheManager(, +++ b/spring-context/src/main/java/org/springframework/cache/support/AbstractCacheManager.java, +	// Early cache initialization on startup, +, +		// Preserve the initial order of the cache names, +			addCache(cache);, +	/**, +	 * Load the initial caches for this cache manager., +	 * <p>Called by {@link #afterPropertiesSet()} on startup., +	 * The returned collection may be empty but must not be {@code null}., +	 */, +	protected abstract Collection<? extends Cache> loadCaches();, +, +, +	// Lazy cache initialization on access, +, +	@Override, +	public Cache getCache(String name) {, +		Cache cache = lookupCache(name);, +		if (cache != null) {, +			return cache;, +		}, +		else {, +			Cache missingCache = getMissingCache(name);, +			if (missingCache != null) {, +				addCache(missingCache);, +				return lookupCache(name);  // may be decorated, +			}, +			return null;, +		}, +	}, +, +	@Override, +	public Collection<String> getCacheNames() {, +		return Collections.unmodifiableSet(this.cacheNames);, +	}, +, +, +	// Common cache initialization delegates/callbacks, +, +	protected final Cache lookupCache(String name) {, +		return this.cacheMap.get(name);, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java, +public abstract class AbstractJackson2HttpMessageConverter extends AbstractHttpMessageConverter<Object>, +		implements GenericHttpMessageConverter<Object> {, +, +]