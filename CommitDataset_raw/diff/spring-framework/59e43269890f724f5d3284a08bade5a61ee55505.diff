[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/HandlerFilterFunction.java, +import org.springframework.util.Assert;, +	/**, +	 * Return a composed filter function that first applies this filter, and then applies the, +	 * {@code after} filter., +	 * @param after the filter to apply after this filter is applied, +	 * @return a composed filter that first applies this function and then applies the, +	 * {@code after} function, +	 */, +	default HandlerFilterFunction<T, R> andThen(HandlerFilterFunction<T, T> after) {, +		Assert.notNull(after, "'after' must not be null");, +		return (request, next) -> {, +			HandlerFunction<T> nextHandler =, +					handlerRequest -> after.filter(handlerRequest, next);, +			return filter(request, nextHandler);, +		};, +	}, +, +	/**, +	 * Apply this filter to the given handler function, resulting in a filtered handler function., +	 * @param handler the handler function to filter, +	 * @return the filtered handler function, +	 */, +	default HandlerFunction<R> apply(HandlerFunction<T> handler) {, +		Assert.notNull(handler, "'handler' must not be null");, +		return request -> this.filter(request, handler);, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/HandlerFilterFunction.java, +import org.springframework.util.Assert;, +	/**, +	 * Return a composed filter function that first applies this filter, and then applies the, +	 * {@code after} filter., +	 * @param after the filter to apply after this filter is applied, +	 * @return a composed filter that first applies this function and then applies the, +	 * {@code after} function, +	 */, +	default HandlerFilterFunction<T, R> andThen(HandlerFilterFunction<T, T> after) {, +		Assert.notNull(after, "'after' must not be null");, +		return (request, next) -> {, +			HandlerFunction<T> nextHandler =, +					handlerRequest -> after.filter(handlerRequest, next);, +			return filter(request, nextHandler);, +		};, +	}, +, +	/**, +	 * Apply this filter to the given handler function, resulting in a filtered handler function., +	 * @param handler the handler function to filter, +	 * @return the filtered handler function, +	 */, +	default HandlerFunction<R> apply(HandlerFunction<T> handler) {, +		Assert.notNull(handler, "'handler' must not be null");, +		return request -> this.filter(request, handler);, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/RequestPredicates.java, +		public String pathVariable(String name) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/HandlerFilterFunction.java, +import org.springframework.util.Assert;, +	/**, +	 * Return a composed filter function that first applies this filter, and then applies the, +	 * {@code after} filter., +	 * @param after the filter to apply after this filter is applied, +	 * @return a composed filter that first applies this function and then applies the, +	 * {@code after} function, +	 */, +	default HandlerFilterFunction<T, R> andThen(HandlerFilterFunction<T, T> after) {, +		Assert.notNull(after, "'after' must not be null");, +		return (request, next) -> {, +			HandlerFunction<T> nextHandler =, +					handlerRequest -> after.filter(handlerRequest, next);, +			return filter(request, nextHandler);, +		};, +	}, +, +	/**, +	 * Apply this filter to the given handler function, resulting in a filtered handler function., +	 * @param handler the handler function to filter, +	 * @return the filtered handler function, +	 */, +	default HandlerFunction<R> apply(HandlerFunction<T> handler) {, +		Assert.notNull(handler, "'handler' must not be null");, +		return request -> this.filter(request, handler);, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/RequestPredicates.java, +		public String pathVariable(String name) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/RouterFunction.java, +	 * Return a composed routing function that first invokes this function,, +	 * and then routes to the given handler function if the given request predicate applies. This, +	 * method is a convenient combination of {@link #and(RouterFunction)} and, +	 * {@link RouterFunctions#route(RequestPredicate, HandlerFunction)}., +	 * @param predicate the predicate to test, +	 * @param handlerFunction the handler function to route to, +	 * @return a composed function that first routes with this function and then the function, +	 * created from {@code predicate} and {@code handlerFunction} if this, +	 * function has no result, +	 */, +	default RouterFunction<?> andRoute(RequestPredicate predicate,]