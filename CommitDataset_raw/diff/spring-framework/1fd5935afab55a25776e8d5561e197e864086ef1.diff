[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java, + * Copyright 2002-2018 the original author or authors., + * A powerful {@link PropertyAccessor} that uses reflection to access properties, + * @see StandardEvaluationContext, + * @see SimpleEvaluationContext, + * @see SimplePropertyAccessor, +		Set<Class<?>> booleanTypes = new HashSet<>(4);, +	private volatile InvokerPair lastReadInvokerPair;, +, +, +, +		return false;, +		this.lastReadInvokerPair = invoker;, +					this.lastReadInvokerPair = invoker;, +					this.lastReadInvokerPair = invoker;, +, +, +, +, +	/**, +	 * @deprecated as of 4.3.15 since it is not used within the framework anymore, +	 */, +	@Deprecated, +	@Nullable, +	public Member getLastReadInvokerPair() {, +		InvokerPair lastReadInvoker = this.lastReadInvokerPair;, +		return (lastReadInvoker != null ? lastReadInvoker.member : null);, +	}, +, +, +			// Attempt to populate the cache entry, +				// Continue with null type descriptor, +				if (isCandidateForProperty(method) && method.getName().equals(prefix + methodSuffix) &&, +	 * Determine whether the given {@code Method} is a candidate for property access., +	 * <p>The default implementation considers any method as a candidate, even for, +	 * non-user-declared properties on the {@link Object} base class., +	 * @param method the Method to evaluate, +	 * @since 4.3.15, +	 */, +	protected boolean isCandidateForProperty(Method method) {, +		return true;, +	}, +, +	/**, +	 * Return class methods ordered with non bridge methods appearing higher., +		Arrays.sort(methods, (o1, o2) -> (o1.isBridge() == o2.isBridge() ? 0 : (o1.isBridge() ? 1 : -1)));, +	@Nullable, +	private Field findField(String name, Class<?> clazz, Object target) {, +		Field field = findField(name, clazz, target instanceof Class);, +		if (field == null && target instanceof Class) {, +			field = findField(name, target.getClass(), false);, +		}, +		return field;, +	}, +, +	public PropertyAccessor createOptimalAccessor(EvaluationContext context, @Nullable Object target, String name) {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java, + * Copyright 2002-2018 the original author or authors., + * A powerful {@link PropertyAccessor} that uses reflection to access properties, + * @see StandardEvaluationContext, + * @see SimpleEvaluationContext, + * @see SimplePropertyAccessor, +		Set<Class<?>> booleanTypes = new HashSet<>(4);, +	private volatile InvokerPair lastReadInvokerPair;, +, +, +, +		return false;, +		this.lastReadInvokerPair = invoker;, +					this.lastReadInvokerPair = invoker;, +					this.lastReadInvokerPair = invoker;, +, +, +, +, +	/**, +	 * @deprecated as of 4.3.15 since it is not used within the framework anymore, +	 */, +	@Deprecated, +	@Nullable, +	public Member getLastReadInvokerPair() {, +		InvokerPair lastReadInvoker = this.lastReadInvokerPair;, +		return (lastReadInvoker != null ? lastReadInvoker.member : null);, +	}, +, +, +			// Attempt to populate the cache entry, +				// Continue with null type descriptor, +				if (isCandidateForProperty(method) && method.getName().equals(prefix + methodSuffix) &&, +	 * Determine whether the given {@code Method} is a candidate for property access., +	 * <p>The default implementation considers any method as a candidate, even for, +	 * non-user-declared properties on the {@link Object} base class., +	 * @param method the Method to evaluate, +	 * @since 4.3.15, +	 */, +	protected boolean isCandidateForProperty(Method method) {, +		return true;, +	}, +, +	/**]