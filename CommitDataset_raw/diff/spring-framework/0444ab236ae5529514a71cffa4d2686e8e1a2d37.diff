[+++ b/org.springframework.context/src/test/java/org/springframework/context/expression/ApplicationContextExpressionTests.java, +	@Test, +	public void stringConcatenationWithDebugLogging() {, +		GenericApplicationContext ac = new GenericApplicationContext();, +		AnnotationConfigUtils.registerAnnotationConfigProcessors(ac);, +, +		GenericBeanDefinition bd = new GenericBeanDefinition();, +		bd.setBeanClass(String.class);, +		bd.getConstructorArgumentValues().addGenericArgumentValue("test-#{ T(java.lang.System).currentTimeMillis() }");, +		ac.registerBeanDefinition("str", bd);, +		ac.refresh();, +, +		String str = ac.getBean("str", String.class);, +		assertTrue(str.startsWith("test-"));, +	}, +, +, +++ b/org.springframework.context/src/test/java/org/springframework/context/expression/ApplicationContextExpressionTests.java, +	@Test, +	public void stringConcatenationWithDebugLogging() {, +		GenericApplicationContext ac = new GenericApplicationContext();, +		AnnotationConfigUtils.registerAnnotationConfigProcessors(ac);, +, +		GenericBeanDefinition bd = new GenericBeanDefinition();, +		bd.setBeanClass(String.class);, +		bd.getConstructorArgumentValues().addGenericArgumentValue("test-#{ T(java.lang.System).currentTimeMillis() }");, +		ac.registerBeanDefinition("str", bd);, +		ac.refresh();, +, +		String str = ac.getBean("str", String.class);, +		assertTrue(str.startsWith("test-"));, +	}, +, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/MethodParameter.java, + * Copyright 2002-2010 the original author or authors., +			if (this.parameterIndex >= 0 && this.parameterIndex < annotationArray.length) {, +			else {, +				this.parameterAnnotations = new Annotation[0];, +			}, +		}, +++ b/org.springframework.context/src/test/java/org/springframework/context/expression/ApplicationContextExpressionTests.java, +	@Test, +	public void stringConcatenationWithDebugLogging() {, +		GenericApplicationContext ac = new GenericApplicationContext();, +		AnnotationConfigUtils.registerAnnotationConfigProcessors(ac);, +, +		GenericBeanDefinition bd = new GenericBeanDefinition();, +		bd.setBeanClass(String.class);, +		bd.getConstructorArgumentValues().addGenericArgumentValue("test-#{ T(java.lang.System).currentTimeMillis() }");, +		ac.registerBeanDefinition("str", bd);, +		ac.refresh();, +, +		String str = ac.getBean("str", String.class);, +		assertTrue(str.startsWith("test-"));, +	}, +, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/MethodParameter.java, + * Copyright 2002-2010 the original author or authors., +			if (this.parameterIndex >= 0 && this.parameterIndex < annotationArray.length) {, +			else {, +				this.parameterAnnotations = new Annotation[0];, +			}, +		}, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +, +			logger.debug("Converting value of " + sourceType + " to " + targetType);, +		if (logger.isTraceEnabled()) {, +			logger.trace("Looking for Converter to convert from " + sourceType + " to " + targetType);]