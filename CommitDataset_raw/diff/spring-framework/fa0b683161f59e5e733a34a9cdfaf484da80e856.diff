[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfo.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.servlet.mvc.method;, +, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.LinkedHashSet;, +import java.util.List;, +import java.util.Set;, +import javax.servlet.http.HttpServletRequest;, +, +import org.springframework.util.PathMatcher;, +import org.springframework.util.StringUtils;, +import org.springframework.web.bind.annotation.RequestMethod;, +import org.springframework.web.servlet.mvc.method.condition.ConsumesRequestCondition;, +import org.springframework.web.servlet.mvc.method.condition.HeadersRequestCondition;, +import org.springframework.web.servlet.mvc.method.condition.ParamsRequestCondition;, +import org.springframework.web.servlet.mvc.method.condition.ProducesRequestCondition;, +import org.springframework.web.servlet.mvc.method.condition.RequestConditionFactory;, +import org.springframework.web.servlet.mvc.method.condition.RequestMethodsRequestCondition;, +, +/**, + * Contains a set of conditions to match to a given request such as URL patterns, HTTP methods, request parameters , + * and headers. , + * , + * <p>Two {@link RequestMappingInfo}s can be combined resulting in a new {@link RequestMappingInfo} with conditions, + * from both. A {@link RequestMappingInfo} can also match itself to an HTTP request resulting in a new , + * {@link RequestMappingInfo} with the subset of conditions relevant to the request., + * , + * @author Arjen Poutsma, + * @author Rossen Stoyanchev, + * @since 3.1, + */, +public final class RequestMappingInfo {, +, +	private final Set<String> patterns;, +, +	private final RequestMethodsRequestCondition methodsCondition;, +, +	private final ParamsRequestCondition paramsCondition;, +, +	private final HeadersRequestCondition headersCondition;, +, +	private final ConsumesRequestCondition consumesCondition;, +, +	private final ProducesRequestCondition producesCondition;, +, +	private int hash;, +, +	/**, +	 * Creates a new {@code RequestMappingInfo} instance with the given URL patterns and HTTP methods., +	 * , +	 * <p>Package protected for testing purposes., +	 */, +	RequestMappingInfo(Collection<String> patterns, RequestMethod[] methods) {, +		this(patterns, RequestConditionFactory.parseMethods(methods), null, null, null, null);, +	}, +, +	/**, +	 * Creates a new {@code RequestMappingInfo} instance with a full set of conditions., +	 */, +	public RequestMappingInfo(Collection<String> patterns,, +							 RequestMethodsRequestCondition methodsCondition,, +							 ParamsRequestCondition paramsCondition,, +							 HeadersRequestCondition headersCondition,, +							 ConsumesRequestCondition consumesCondition,, +							 ProducesRequestCondition producesCondition) {, +		this.patterns = asUnmodifiableSet(prependLeadingSlash(patterns));, +		this.methodsCondition = methodsCondition != null ? methodsCondition : new RequestMethodsRequestCondition();, +		this.paramsCondition = paramsCondition != null ? paramsCondition : new ParamsRequestCondition();, +		this.headersCondition = headersCondition != null ? headersCondition : new HeadersRequestCondition();, +		this.consumesCondition = consumesCondition != null ? consumesCondition : new ConsumesRequestCondition();, +		this.producesCondition = producesCondition != null ? producesCondition : new ProducesRequestCondition();, +	}, +, +	private static Set<String> prependLeadingSlash(Collection<String> patterns) {, +		if (patterns == null) {, +			return Collections.emptySet();, +		}, +		Set<String> result = new LinkedHashSet<String>(patterns.size());, +		for (String pattern : patterns) {, +			if (StringUtils.hasLength(pattern) && !pattern.startsWith("/")) {, +				pattern = "/" + pattern;, +			}]