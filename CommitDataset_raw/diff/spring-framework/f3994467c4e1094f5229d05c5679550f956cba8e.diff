[+++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, + * Copyright 2002-2018 the original author or authors., +		return MEDIA_TYPE_ALL_LIST;, +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, + * Copyright 2002-2018 the original author or authors., +		return MEDIA_TYPE_ALL_LIST;, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, +			if (mediaTypes.equals(MEDIA_TYPE_ALL_LIST)) {, +		return MEDIA_TYPE_ALL_LIST;, +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, + * Copyright 2002-2018 the original author or authors., +		return MEDIA_TYPE_ALL_LIST;, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, +			if (mediaTypes.equals(MEDIA_TYPE_ALL_LIST)) {, +		return MEDIA_TYPE_ALL_LIST;, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationStrategy.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +	 * A singleton list with {@link MediaType#ALL} that is returned from, +	 * {@link #resolveMediaTypes} when no specific media types are requested., +	 * @since 5.0.5, +	 */, +	List<MediaType> MEDIA_TYPE_ALL_LIST = Collections.singletonList(MediaType.ALL);, +, +, +	/**, +	 * @return the requested media types, or {@link #MEDIA_TYPE_ALL_LIST} if none, +	 * were requested., +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, + * Copyright 2002-2018 the original author or authors., +		return MEDIA_TYPE_ALL_LIST;, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, +			if (mediaTypes.equals(MEDIA_TYPE_ALL_LIST)) {, +		return MEDIA_TYPE_ALL_LIST;, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationStrategy.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +	 * A singleton list with {@link MediaType#ALL} that is returned from, +	 * {@link #resolveMediaTypes} when no specific media types are requested., +	 * @since 5.0.5, +	 */, +	List<MediaType> MEDIA_TYPE_ALL_LIST = Collections.singletonList(MediaType.ALL);, +, +, +	/**, +	 * @return the requested media types, or {@link #MEDIA_TYPE_ALL_LIST} if none, +	 * were requested., +++ b/spring-web/src/main/java/org/springframework/web/accept/HeaderContentNegotiationStrategy.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.util.CollectionUtils;, +			return MEDIA_TYPE_ALL_LIST;, +			return !CollectionUtils.isEmpty(mediaTypes) ? mediaTypes : MEDIA_TYPE_ALL_LIST;, +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, + * Copyright 2002-2018 the original author or authors., +		return MEDIA_TYPE_ALL_LIST;, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, +			if (mediaTypes.equals(MEDIA_TYPE_ALL_LIST)) {, +		return MEDIA_TYPE_ALL_LIST;, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationStrategy.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +	 * A singleton list with {@link MediaType#ALL} that is returned from, +	 * {@link #resolveMediaTypes} when no specific media types are requested., +	 * @since 5.0.5, +	 */, +	List<MediaType> MEDIA_TYPE_ALL_LIST = Collections.singletonList(MediaType.ALL);, +, +, +	/**, +	 * @return the requested media types, or {@link #MEDIA_TYPE_ALL_LIST} if none, +	 * were requested., +++ b/spring-web/src/main/java/org/springframework/web/accept/HeaderContentNegotiationStrategy.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.util.CollectionUtils;, +			return MEDIA_TYPE_ALL_LIST;, +			return !CollectionUtils.isEmpty(mediaTypes) ? mediaTypes : MEDIA_TYPE_ALL_LIST;, +++ b/spring-web/src/test/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBeanTests.java, + * Copyright 2002-2018 the original author or authors., +, +import static org.junit.Assert.*;, +				ContentNegotiationStrategy.MEDIA_TYPE_ALL_LIST, manager.resolveMediaTypes(this.webRequest));, +				ContentNegotiationStrategy.MEDIA_TYPE_ALL_LIST, manager.resolveMediaTypes(this.webRequest));, +		assertEquals(ContentNegotiationStrategy.MEDIA_TYPE_ALL_LIST, manager.resolveMediaTypes(this.webRequest));, +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, + * Copyright 2002-2018 the original author or authors., +		return MEDIA_TYPE_ALL_LIST;, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, +			if (mediaTypes.equals(MEDIA_TYPE_ALL_LIST)) {, +		return MEDIA_TYPE_ALL_LIST;, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationStrategy.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Collections;, +	 * A singleton list with {@link MediaType#ALL} that is returned from, +	 * {@link #resolveMediaTypes} when no specific media types are requested., +	 * @since 5.0.5, +	 */, +	List<MediaType> MEDIA_TYPE_ALL_LIST = Collections.singletonList(MediaType.ALL);, +, +, +	/**]