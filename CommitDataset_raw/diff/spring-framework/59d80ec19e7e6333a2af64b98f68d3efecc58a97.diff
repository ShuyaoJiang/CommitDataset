[+++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletResponse.java, + * Copyright 2002-2012 the original author or authors., +	private static final String LOCATION_HEADER = "Location";, +, +	 * <p>As of Servlet 3.0, this method is also defined in HttpServletResponse., +	 * <p>As of Servlet 3.0, this method is also defined in HttpServletResponse., +	 * override the common {@link #encodeURL} method instead, applying, +		setHeader(LOCATION_HEADER, url);, +		setStatus(HttpServletResponse.SC_MOVED_TEMPORARILY);, +		return getHeader(LOCATION_HEADER);, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletResponse.java, + * Copyright 2002-2012 the original author or authors., +	private static final String LOCATION_HEADER = "Location";, +, +	 * <p>As of Servlet 3.0, this method is also defined in HttpServletResponse., +	 * <p>As of Servlet 3.0, this method is also defined in HttpServletResponse., +	 * override the common {@link #encodeURL} method instead, applying, +		setHeader(LOCATION_HEADER, url);, +		setStatus(HttpServletResponse.SC_MOVED_TEMPORARILY);, +		return getHeader(LOCATION_HEADER);, +++ b/spring-test/src/test/java/org/springframework/mock/web/MockHttpServletResponseTests.java, + * Copyright 2002-2012 the original author or authors., +import static org.junit.Assert.*;, +, +import javax.servlet.http.HttpServletResponse;, +, +import org.junit.Test;, + * Unit tests for {@link MockHttpServletResponse}., + *, + * @author Rob Winch, + * @author Sam Brannen, +public class MockHttpServletResponseTests {, +	private MockHttpServletResponse response = new MockHttpServletResponse();, +, +, +	@Test, +	public void setContentType() {, +	@Test, +	public void setContentTypeUTF8() {, +	@Test, +	public void contentTypeHeader() {, +	@Test, +	public void contentTypeHeaderUTF8() {, +	@Test, +	public void setContentTypeThenCharacterEncoding() {, +	@Test, +	public void setCharacterEncodingThenContentType() {, +	@Test, +	public void contentLength() {, +	@Test, +	public void contentLengthHeader() {, +	@Test, +	public void httpHeaderNameCasingIsPreserved() throws Exception {, +	@Test, +	public void servletOutputStreamCommittedWhenBufferSizeExceeded() throws IOException {, +	@Test, +	public void servletOutputStreamCommittedOnFlushBuffer() throws IOException {, +	@Test, +	public void servletWriterCommittedWhenBufferSizeExceeded() throws IOException {, +	@Test, +	public void servletOutputStreamCommittedOnOutputStreamFlush() throws IOException {, +	@Test, +	public void servletWriterCommittedOnWriterFlush() throws IOException {, +	@Test, +	public void servletWriterAutoFlushedForString() throws IOException {, +	@Test, +	public void servletWriterAutoFlushedForChar() throws IOException {, +	@Test, +	public void servletWriterAutoFlushedForCharArray() throws IOException {, +	@Test, +	public void sendRedirect() throws IOException {, +		String redirectUrl = "/redirect";, +		response.sendRedirect(redirectUrl);, +		assertEquals(HttpServletResponse.SC_MOVED_TEMPORARILY, response.getStatus());, +		assertEquals(redirectUrl, response.getHeader("Location"));, +		assertEquals(redirectUrl, response.getRedirectedUrl());, +		assertTrue(response.isCommitted());, +	}, +, +	@Test, +	public void locationHeaderUpdatesGetRedirectedUrl() {, +		String redirectUrl = "/redirect";, +		response.setHeader("Location", redirectUrl);, +		assertEquals(redirectUrl, response.getRedirectedUrl());, +	}, +]