[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +	public static String toBoxedDescriptor(String primitiveDescriptor) {, +		switch (primitiveDescriptor.charAt(0)) {, +			case 'I': return "Ljava/lang/Integer";, +			case 'J': return "Ljava/lang/Long";, +			case 'F': return "Ljava/lang/Float";, +			case 'D': return "Ljava/lang/Double";, +			case 'B': return "Ljava/lang/Byte";, +			case 'C': return "Ljava/lang/Character";, +			case 'S': return "Ljava/lang/Short";, +			case 'Z': return "Ljava/lang/Boolean";, +			default:, +				throw new IllegalArgumentException("Unexpected non primitive descriptor "+primitiveDescriptor);, +		}	, +	}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +	public static String toBoxedDescriptor(String primitiveDescriptor) {, +		switch (primitiveDescriptor.charAt(0)) {, +			case 'I': return "Ljava/lang/Integer";, +			case 'J': return "Ljava/lang/Long";, +			case 'F': return "Ljava/lang/Float";, +			case 'D': return "Ljava/lang/Double";, +			case 'B': return "Ljava/lang/Byte";, +			case 'C': return "Ljava/lang/Character";, +			case 'S': return "Ljava/lang/Short";, +			case 'Z': return "Ljava/lang/Boolean";, +			default:, +				throw new IllegalArgumentException("Unexpected non primitive descriptor "+primitiveDescriptor);, +		}	, +	}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java, +import org.springframework.asm.Label;, +	private String originalPrimitiveExitTypeDescriptor = null;, +, +			String descriptor = CodeFlow.toDescriptor(method.getReturnType());, +			if (this.nullSafe && CodeFlow.isPrimitive(descriptor)) {, +				originalPrimitiveExitTypeDescriptor = descriptor;, +				this.exitTypeDescriptor = CodeFlow.toBoxedDescriptor(descriptor);, +			}, +			else {, +				this.exitTypeDescriptor = descriptor;, +			}, +		Label skipIfNull = null;, +		if (descriptor == null && !isStaticMethod) {, +		if ((descriptor != null || !isStaticMethod) && nullSafe) {, +			mv.visitInsn(DUP);, +			skipIfNull = new Label();, +			Label continueLabel = new Label();, +			mv.visitJumpInsn(IFNONNULL,continueLabel);, +			CodeFlow.insertCheckCast(mv, this.exitTypeDescriptor);, +			mv.visitJumpInsn(GOTO, skipIfNull);, +			mv.visitLabel(continueLabel);, +		if (descriptor != null && isStaticMethod) {, +		if (originalPrimitiveExitTypeDescriptor != null) {, +			// The output of the accessor will be a primitive but from the block above it might be null,, +			// so to have a 'common stack' element at skipIfNull target we need to box the primitive, +			CodeFlow.insertBoxIfNecessary(mv, originalPrimitiveExitTypeDescriptor);, +		}, +		if (skipIfNull != null) {, +			mv.visitLabel(skipIfNull);, +		}, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +	public static String toBoxedDescriptor(String primitiveDescriptor) {, +		switch (primitiveDescriptor.charAt(0)) {, +			case 'I': return "Ljava/lang/Integer";, +			case 'J': return "Ljava/lang/Long";, +			case 'F': return "Ljava/lang/Float";, +			case 'D': return "Ljava/lang/Double";, +			case 'B': return "Ljava/lang/Byte";, +			case 'C': return "Ljava/lang/Character";, +			case 'S': return "Ljava/lang/Short";, +			case 'Z': return "Ljava/lang/Boolean";, +			default:, +				throw new IllegalArgumentException("Unexpected non primitive descriptor "+primitiveDescriptor);, +		}	, +	}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java, +import org.springframework.asm.Label;, +	private String originalPrimitiveExitTypeDescriptor = null;, +, +			String descriptor = CodeFlow.toDescriptor(method.getReturnType());, +			if (this.nullSafe && CodeFlow.isPrimitive(descriptor)) {, +				originalPrimitiveExitTypeDescriptor = descriptor;, +				this.exitTypeDescriptor = CodeFlow.toBoxedDescriptor(descriptor);, +			}, +			else {, +				this.exitTypeDescriptor = descriptor;, +			}, +		Label skipIfNull = null;, +		if (descriptor == null && !isStaticMethod) {, +		if ((descriptor != null || !isStaticMethod) && nullSafe) {, +			mv.visitInsn(DUP);, +			skipIfNull = new Label();, +			Label continueLabel = new Label();, +			mv.visitJumpInsn(IFNONNULL,continueLabel);, +			CodeFlow.insertCheckCast(mv, this.exitTypeDescriptor);, +			mv.visitJumpInsn(GOTO, skipIfNull);]