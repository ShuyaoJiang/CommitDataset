[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataContext.java, + * Copyright 2002-2014 the original author or authors., +	private String actualFunctionReturnName;, +	/** Indicates whether this is a procedure or a function **/, +	private boolean function = false;, +, +	/** Indicates whether this procedure's return value should be included  **/, +	private boolean returnValueRequired = false;, +, +	/** Should we access call parameter meta data info or not */, +	/** The provider of call meta data */, +		return (this.actualFunctionReturnName != null ? this.actualFunctionReturnName : "return");, +			schemaNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName());, +			catalogNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName());, +			catalogNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName());, +			schemaNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName());, +		String procedureNameToUse = this.metaDataProvider.procedureNameToUse(getProcedureName());, +		if (isFunction() || isReturnValueRequired()) {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataContext.java, + * Copyright 2002-2014 the original author or authors., +	private String actualFunctionReturnName;, +	/** Indicates whether this is a procedure or a function **/, +	private boolean function = false;, +, +	/** Indicates whether this procedure's return value should be included  **/, +	private boolean returnValueRequired = false;, +, +	/** Should we access call parameter meta data info or not */, +	/** The provider of call meta data */, +		return (this.actualFunctionReturnName != null ? this.actualFunctionReturnName : "return");, +			schemaNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName());, +			catalogNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName());, +			catalogNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName());, +			schemaNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName());, +		String procedureNameToUse = this.metaDataProvider.procedureNameToUse(getProcedureName());, +		if (isFunction() || isReturnValueRequired()) {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/TableMetaDataContext.java, +import java.util.LinkedHashMap;, +import java.util.LinkedHashSet;, + * @author Juergen Hoeller, +		Set<String> keys = new LinkedHashSet<String>(generatedKeyNames.length);, +	public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters) {, +		Map<String, Object> source = new LinkedHashMap<String, Object>(inParameters.size());, +		Set<String> keys = new LinkedHashSet<String>(generatedKeyNames.length);, +		Map<String, TableParameterMetaData> parameterMap =, +				new LinkedHashMap<String, TableParameterMetaData>(parameters.size());, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataContext.java, + * Copyright 2002-2014 the original author or authors., +	private String actualFunctionReturnName;, +	/** Indicates whether this is a procedure or a function **/, +	private boolean function = false;, +, +	/** Indicates whether this procedure's return value should be included  **/, +	private boolean returnValueRequired = false;, +, +	/** Should we access call parameter meta data info or not */, +	/** The provider of call meta data */, +		return (this.actualFunctionReturnName != null ? this.actualFunctionReturnName : "return");, +			schemaNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName());, +			catalogNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName());, +			catalogNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName());, +			schemaNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName());, +		String procedureNameToUse = this.metaDataProvider.procedureNameToUse(getProcedureName());, +		if (isFunction() || isReturnValueRequired()) {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/TableMetaDataContext.java, +import java.util.LinkedHashMap;, +import java.util.LinkedHashSet;, + * @author Juergen Hoeller, +		Set<String> keys = new LinkedHashSet<String>(generatedKeyNames.length);, +	public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters) {, +		Map<String, Object> source = new LinkedHashMap<String, Object>(inParameters.size());, +		Set<String> keys = new LinkedHashSet<String>(generatedKeyNames.length);, +		Map<String, TableParameterMetaData> parameterMap =, +				new LinkedHashMap<String, TableParameterMetaData>(parameters.size());, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/MapSqlParameterSource.java, + * Copyright 2002-2014 the original author or authors., +import java.util.LinkedHashMap;, + * <p>The {@code addValue} methods on this class will make adding several values, + * easier. The methods return a reference to the {@link MapSqlParameterSource}, +	private final Map<String, Object> values = new LinkedHashMap<String, Object>();, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataContext.java, + * Copyright 2002-2014 the original author or authors., +	private String actualFunctionReturnName;, +	/** Indicates whether this is a procedure or a function **/, +	private boolean function = false;, +, +	/** Indicates whether this procedure's return value should be included  **/, +	private boolean returnValueRequired = false;, +, +	/** Should we access call parameter meta data info or not */, +	/** The provider of call meta data */, +		return (this.actualFunctionReturnName != null ? this.actualFunctionReturnName : "return");, +			schemaNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName());, +			catalogNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName());, +			catalogNameToUse = this.metaDataProvider.catalogNameToUse(getCatalogName());, +			schemaNameToUse = this.metaDataProvider.schemaNameToUse(getSchemaName());, +		String procedureNameToUse = this.metaDataProvider.procedureNameToUse(getProcedureName());, +		if (isFunction() || isReturnValueRequired()) {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/TableMetaDataContext.java, +import java.util.LinkedHashMap;]