[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, +import org.springframework.web.server.adapter.WebHttpHandlerBuilder;, + * Central dispatcher for HTTP request handlers/controllers. Dispatches to, + * registered handlers for processing a request, providing convenient mapping, + * facilities., + * <p>{@code DispatcherHandler} discovers the delegate components it needs from, + * Spring configuration. It detects the following in the application context:, + * <ul>, + * <li>{@link HandlerMapping} -- map requests to handler objects, + * <li>{@link HandlerAdapter} -- for using any handler interface, + * <li>{@link HandlerResultHandler} -- process handler return values, + * </ul>, + * <p>{@code DispatcherHandler} s also designed to be a Spring bean itself and, + * implements {@link ApplicationContextAware} for access to the context it runs, + * in. If {@code DispatcherHandler} is declared with the bean name "webHandler", + * it is discovered by {@link WebHttpHandlerBuilder#applicationContext} which, + * creates a processing chain together with {@code WebFilter},, + * {@code WebExceptionHandler} and others., + * <p>A {@code DispatcherHandler} bean declaration is included in, + * {@link org.springframework.web.reactive.config.EnableWebFlux @EnableWebFlux}, + * configuration., + * @see WebHttpHandlerBuilder#applicationContext(ApplicationContext), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, +import org.springframework.web.server.adapter.WebHttpHandlerBuilder;, + * Central dispatcher for HTTP request handlers/controllers. Dispatches to, + * registered handlers for processing a request, providing convenient mapping, + * facilities., + * <p>{@code DispatcherHandler} discovers the delegate components it needs from, + * Spring configuration. It detects the following in the application context:, + * <ul>, + * <li>{@link HandlerMapping} -- map requests to handler objects, + * <li>{@link HandlerAdapter} -- for using any handler interface, + * <li>{@link HandlerResultHandler} -- process handler return values, + * </ul>, + * <p>{@code DispatcherHandler} s also designed to be a Spring bean itself and, + * implements {@link ApplicationContextAware} for access to the context it runs, + * in. If {@code DispatcherHandler} is declared with the bean name "webHandler", + * it is discovered by {@link WebHttpHandlerBuilder#applicationContext} which, + * creates a processing chain together with {@code WebFilter},, + * {@code WebExceptionHandler} and others., + * <p>A {@code DispatcherHandler} bean declaration is included in, + * {@link org.springframework.web.reactive.config.EnableWebFlux @EnableWebFlux}, + * configuration., + * @see WebHttpHandlerBuilder#applicationContext(ApplicationContext), +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/ContextPathIntegrationTests.java, +import org.springframework.web.server.adapter.WebHttpHandlerBuilder;, +import static org.junit.Assert.assertEquals;, +		HttpHandler webApp1Handler = WebHttpHandlerBuilder.applicationContext(context1).build();, +		HttpHandler webApp2Handler = WebHttpHandlerBuilder.applicationContext(context2).build();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, +import org.springframework.web.server.adapter.WebHttpHandlerBuilder;, + * Central dispatcher for HTTP request handlers/controllers. Dispatches to, + * registered handlers for processing a request, providing convenient mapping, + * facilities., + * <p>{@code DispatcherHandler} discovers the delegate components it needs from, + * Spring configuration. It detects the following in the application context:, + * <ul>, + * <li>{@link HandlerMapping} -- map requests to handler objects, + * <li>{@link HandlerAdapter} -- for using any handler interface, + * <li>{@link HandlerResultHandler} -- process handler return values, + * </ul>, + * <p>{@code DispatcherHandler} s also designed to be a Spring bean itself and, + * implements {@link ApplicationContextAware} for access to the context it runs, + * in. If {@code DispatcherHandler} is declared with the bean name "webHandler", + * it is discovered by {@link WebHttpHandlerBuilder#applicationContext} which, + * creates a processing chain together with {@code WebFilter},, + * {@code WebExceptionHandler} and others., + * <p>A {@code DispatcherHandler} bean declaration is included in, + * {@link org.springframework.web.reactive.config.EnableWebFlux @EnableWebFlux}, + * configuration., + * @see WebHttpHandlerBuilder#applicationContext(ApplicationContext), +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/ContextPathIntegrationTests.java, +import org.springframework.web.server.adapter.WebHttpHandlerBuilder;, +import static org.junit.Assert.assertEquals;, +		HttpHandler webApp1Handler = WebHttpHandlerBuilder.applicationContext(context1).build();, +		HttpHandler webApp2Handler = WebHttpHandlerBuilder.applicationContext(context2).build();, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/socket/AbstractWebSocketIntegrationTests.java, +import org.springframework.web.server.adapter.WebHttpHandlerBuilder;, +		return WebHttpHandlerBuilder.applicationContext(context).build();]