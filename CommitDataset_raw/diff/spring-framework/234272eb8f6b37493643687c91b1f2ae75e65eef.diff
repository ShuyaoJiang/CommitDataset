[+++ b/spring-core/src/main/java/org/springframework/core/convert/ConversionService.java, + * Copyright 2002-2013 the original author or authors., +	 * Return {@code true} if objects of {@code sourceType} can be converted to the {@code targetType}., +	 * <p>If this method returns {@code true}, it means {@link #convert(Object, Class)} is capable, +	 * of converting an instance of {@code sourceType} to {@code targetType}., +	 * <p>Special note on collections, arrays, and maps types:, +	 * For conversion between collection, array, and map types, this method will return {@code true}, +	 * even though a convert invocation may still generate a {@link ConversionException} if the, +	 * underlying elements are not convertible. Callers are expected to handle this exceptional case, +	 * when working with collections and maps., +	 * @param sourceType the source type to convert from (may be {@code null} if source is {@code null}), +	 * @return {@code true} if a conversion can be performed, {@code false} if not, +	 * @throws IllegalArgumentException if {@code targetType} is {@code null}, +	 * Return {@code true} if objects of {@code sourceType} can be converted to the {@code targetType}., +	 * The TypeDescriptors provide additional context about the source and target locations, +	 * where conversion would occur, often object fields or property locations., +	 * <p>If this method returns {@code true}, it means {@link #convert(Object, TypeDescriptor, TypeDescriptor)}, +	 * is capable of converting an instance of {@code sourceType} to {@code targetType}., +	 * <p>Special note on collections, arrays, and maps types:, +	 * For conversion between collection, array, and map types, this method will return {@code true}, +	 * even though a convert invocation may still generate a {@link ConversionException} if the, +	 * underlying elements are not convertible. Callers are expected to handle this exceptional case, +	 * when working with collections and maps., +	 * @param sourceType context about the source type to convert from, +	 * (may be {@code null} if source is {@code null}), +	 * @return {@code true} if a conversion can be performed between the source and target types,, +	 * {@code false} if not, +	 * @throws IllegalArgumentException if {@code targetType} is {@code null}, +	 * Convert the given {@code source} to the specified {@code targetType}., +	 * Convert the given {@code source} to the specified {@code targetType}., +	 * The TypeDescriptors provide additional context about the source and target locations, +	 * where conversion will occur, often object fields or property locations., +	 * @param sourceType context about the source type to convert from, +	 * (may be {@code null} if source is {@code null}), +	 * @return the converted object, an instance of {@link TypeDescriptor#getObjectType() targetType}, +	 * @throws IllegalArgumentException if targetType is {@code null},, +	 * or {@code sourceType} is {@code null} but source is not {@code null}, +++ b/spring-core/src/main/java/org/springframework/core/convert/ConversionService.java, + * Copyright 2002-2013 the original author or authors., +	 * Return {@code true} if objects of {@code sourceType} can be converted to the {@code targetType}., +	 * <p>If this method returns {@code true}, it means {@link #convert(Object, Class)} is capable, +	 * of converting an instance of {@code sourceType} to {@code targetType}., +	 * <p>Special note on collections, arrays, and maps types:, +	 * For conversion between collection, array, and map types, this method will return {@code true}, +	 * even though a convert invocation may still generate a {@link ConversionException} if the, +	 * underlying elements are not convertible. Callers are expected to handle this exceptional case, +	 * when working with collections and maps., +	 * @param sourceType the source type to convert from (may be {@code null} if source is {@code null}), +	 * @return {@code true} if a conversion can be performed, {@code false} if not, +	 * @throws IllegalArgumentException if {@code targetType} is {@code null}, +	 * Return {@code true} if objects of {@code sourceType} can be converted to the {@code targetType}., +	 * The TypeDescriptors provide additional context about the source and target locations, +	 * where conversion would occur, often object fields or property locations., +	 * <p>If this method returns {@code true}, it means {@link #convert(Object, TypeDescriptor, TypeDescriptor)}, +	 * is capable of converting an instance of {@code sourceType} to {@code targetType}., +	 * <p>Special note on collections, arrays, and maps types:, +	 * For conversion between collection, array, and map types, this method will return {@code true}, +	 * even though a convert invocation may still generate a {@link ConversionException} if the, +	 * underlying elements are not convertible. Callers are expected to handle this exceptional case, +	 * when working with collections and maps., +	 * @param sourceType context about the source type to convert from, +	 * (may be {@code null} if source is {@code null}), +	 * @return {@code true} if a conversion can be performed between the source and target types,, +	 * {@code false} if not, +	 * @throws IllegalArgumentException if {@code targetType} is {@code null}, +	 * Convert the given {@code source} to the specified {@code targetType}., +	 * Convert the given {@code source} to the specified {@code targetType}., +	 * The TypeDescriptors provide additional context about the source and target locations, +	 * where conversion will occur, often object fields or property locations., +	 * @param sourceType context about the source type to convert from, +	 * (may be {@code null} if source is {@code null}), +	 * @return the converted object, an instance of {@link TypeDescriptor#getObjectType() targetType}, +	 * @throws IllegalArgumentException if targetType is {@code null},, +	 * or {@code sourceType} is {@code null} but source is not {@code null}, +++ b/spring-expression/src/main/java/org/springframework/expression/TypeConverter.java, + * {@link org.springframework.core.convert.ConversionService} for the primary, + * user API to Spring's conversion facilities., +	 * Return {@code true} if the type converter can convert the specified type, +	 * to the desired target type., +++ b/spring-core/src/main/java/org/springframework/core/convert/ConversionService.java, + * Copyright 2002-2013 the original author or authors., +	 * Return {@code true} if objects of {@code sourceType} can be converted to the {@code targetType}., +	 * <p>If this method returns {@code true}, it means {@link #convert(Object, Class)} is capable, +	 * of converting an instance of {@code sourceType} to {@code targetType}., +	 * <p>Special note on collections, arrays, and maps types:, +	 * For conversion between collection, array, and map types, this method will return {@code true}, +	 * even though a convert invocation may still generate a {@link ConversionException} if the, +	 * underlying elements are not convertible. Callers are expected to handle this exceptional case, +	 * when working with collections and maps., +	 * @param sourceType the source type to convert from (may be {@code null} if source is {@code null}), +	 * @return {@code true} if a conversion can be performed, {@code false} if not, +	 * @throws IllegalArgumentException if {@code targetType} is {@code null}, +	 * Return {@code true} if objects of {@code sourceType} can be converted to the {@code targetType}., +	 * The TypeDescriptors provide additional context about the source and target locations, +	 * where conversion would occur, often object fields or property locations., +	 * <p>If this method returns {@code true}, it means {@link #convert(Object, TypeDescriptor, TypeDescriptor)}, +	 * is capable of converting an instance of {@code sourceType} to {@code targetType}., +	 * <p>Special note on collections, arrays, and maps types:, +	 * For conversion between collection, array, and map types, this method will return {@code true}, +	 * even though a convert invocation may still generate a {@link ConversionException} if the]