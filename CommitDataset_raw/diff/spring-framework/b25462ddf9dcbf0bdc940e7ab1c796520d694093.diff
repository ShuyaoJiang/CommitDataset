[+++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriUtils.java, +		byte[] bytes = encode(source.getBytes(encoding), notEncoded);, +		return new String(bytes, "US-ASCII");, +	}, +, +	private static byte[] encode(byte[] source, BitSet notEncoded) {, +		Assert.notNull(source, "'source' must not be null");, +, +		ByteArrayOutputStream bos = new ByteArrayOutputStream(source.length * 2);, +, +		for (int i = 0; i < source.length; i++) {, +			int b = source[i];, +			if (b < 0) {, +				b += 256;, +			}, +			if (notEncoded.get(b)) {, +				bos.write(b);, +				char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16));, +				char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16));, +		return bos.toByteArray();, +++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriUtils.java, +		byte[] bytes = encode(source.getBytes(encoding), notEncoded);, +		return new String(bytes, "US-ASCII");, +	}, +, +	private static byte[] encode(byte[] source, BitSet notEncoded) {, +		Assert.notNull(source, "'source' must not be null");, +, +		ByteArrayOutputStream bos = new ByteArrayOutputStream(source.length * 2);, +, +		for (int i = 0; i < source.length; i++) {, +			int b = source[i];, +			if (b < 0) {, +				b += 256;, +			}, +			if (notEncoded.get(b)) {, +				bos.write(b);, +				char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16));, +				char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16));, +		return bos.toByteArray();, +++ b/org.springframework.web/src/test/java/org/springframework/web/client/RestTemplateIntegrationTests.java, +		assertEquals("Invalid request URI", "/uri/Z%C3%BCrich", result);, +++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriUtils.java, +		byte[] bytes = encode(source.getBytes(encoding), notEncoded);, +		return new String(bytes, "US-ASCII");, +	}, +, +	private static byte[] encode(byte[] source, BitSet notEncoded) {, +		Assert.notNull(source, "'source' must not be null");, +, +		ByteArrayOutputStream bos = new ByteArrayOutputStream(source.length * 2);, +, +		for (int i = 0; i < source.length; i++) {, +			int b = source[i];, +			if (b < 0) {, +				b += 256;, +			}, +			if (notEncoded.get(b)) {, +				bos.write(b);, +				char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16));, +				char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16));, +		return bos.toByteArray();, +++ b/org.springframework.web/src/test/java/org/springframework/web/client/RestTemplateIntegrationTests.java, +		assertEquals("Invalid request URI", "/uri/Z%C3%BCrich", result);, +++ b/org.springframework.web/src/test/java/org/springframework/web/util/UriTemplateTests.java, +		UriTemplate template = new UriTemplate("http://example.com/hotel list/{hotel}");, +		assertEquals("Invalid expanded template", new URI("http://example.com/hotel%20list/Z%C3%BCrich"), result);, +++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriUtils.java, +		byte[] bytes = encode(source.getBytes(encoding), notEncoded);, +		return new String(bytes, "US-ASCII");, +	}, +, +	private static byte[] encode(byte[] source, BitSet notEncoded) {, +		Assert.notNull(source, "'source' must not be null");, +, +		ByteArrayOutputStream bos = new ByteArrayOutputStream(source.length * 2);, +, +		for (int i = 0; i < source.length; i++) {, +			int b = source[i];, +			if (b < 0) {, +				b += 256;, +			}, +			if (notEncoded.get(b)) {, +				bos.write(b);, +				char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16));, +				char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16));, +		return bos.toByteArray();, +++ b/org.springframework.web/src/test/java/org/springframework/web/client/RestTemplateIntegrationTests.java, +		assertEquals("Invalid request URI", "/uri/Z%C3%BCrich", result);, +++ b/org.springframework.web/src/test/java/org/springframework/web/util/UriTemplateTests.java, +		UriTemplate template = new UriTemplate("http://example.com/hotel list/{hotel}");, +		assertEquals("Invalid expanded template", new URI("http://example.com/hotel%20list/Z%C3%BCrich"), result);, +++ b/org.springframework.web/src/test/java/org/springframework/web/util/UriUtilsTest.java, +		assertEquals("Invalid encoded result", "/Z%C3%BCrich", UriUtils.encodePath("/Z\u00fcrich", ENC));, +		assertEquals("Invalid encoded result", "T%C5%8Dky%C5%8D", UriUtils.encodeQuery("T\u014dky\u014d", ENC));, +		assertEquals("Invalid encoded URI", "http://www.google.com/?q=Z%C3%BCrich",, +				UriUtils.encodeUri("http://www.google.com/?q=Z\u00fcrich", ENC));, +		assertEquals("Invalid encoded HTTP URL", "http://www.google.com/?q=Z%C3%BCrich",, +				UriUtils.encodeHttpUrl("http://www.google.com/?q=Z\u00fcrich", ENC));]