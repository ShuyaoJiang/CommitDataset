[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebMvcStompEndpointRegistry.java, +		WebSocketHandler actual = WebSocketHandlerDecorator.unwrap(webSocketHandler);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebMvcStompEndpointRegistry.java, +		WebSocketHandler actual = WebSocketHandlerDecorator.unwrap(webSocketHandler);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/handler/WebSocketHandlerDecorator.java, +	public static WebSocketHandler unwrap(WebSocketHandler handler) {, +		if (handler instanceof WebSocketHandlerDecorator) {, +			return ((WebSocketHandlerDecorator) handler).getLastHandler();, +		}, +		else {, +			return handler;, +		}, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebMvcStompEndpointRegistry.java, +		WebSocketHandler actual = WebSocketHandlerDecorator.unwrap(webSocketHandler);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/handler/WebSocketHandlerDecorator.java, +	public static WebSocketHandler unwrap(WebSocketHandler handler) {, +		if (handler instanceof WebSocketHandlerDecorator) {, +			return ((WebSocketHandlerDecorator) handler).getLastHandler();, +		}, +		else {, +			return handler;, +		}, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/handler/WebSocketSessionDecorator.java, +	public WebSocketSession getDelegate() {, +		return this.delegate;, +	}, +, +	public WebSocketSession getLastSession() {, +		WebSocketSession result = this.delegate;, +		while (result instanceof WebSocketSessionDecorator) {, +			result = ((WebSocketSessionDecorator) result).getDelegate();, +		}, +		return result;, +	}, +, +	public static WebSocketSession unwrap(WebSocketSession session) {, +		if (session instanceof WebSocketSessionDecorator) {, +			return ((WebSocketSessionDecorator) session).getLastSession();, +		}, +		else {, +			return session;, +		}, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebMvcStompEndpointRegistry.java, +		WebSocketHandler actual = WebSocketHandlerDecorator.unwrap(webSocketHandler);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/handler/WebSocketHandlerDecorator.java, +	public static WebSocketHandler unwrap(WebSocketHandler handler) {, +		if (handler instanceof WebSocketHandlerDecorator) {, +			return ((WebSocketHandlerDecorator) handler).getLastHandler();, +		}, +		else {, +			return handler;, +		}, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/handler/WebSocketSessionDecorator.java, +	public WebSocketSession getDelegate() {, +		return this.delegate;, +	}, +, +	public WebSocketSession getLastSession() {, +		WebSocketSession result = this.delegate;, +		while (result instanceof WebSocketSessionDecorator) {, +			result = ((WebSocketSessionDecorator) result).getDelegate();, +		}, +		return result;, +	}, +, +	public static WebSocketSession unwrap(WebSocketSession session) {, +		if (session instanceof WebSocketSessionDecorator) {, +			return ((WebSocketSessionDecorator) session).getLastSession();, +		}, +		else {, +			return session;, +		}, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java, +import org.springframework.web.socket.handler.WebSocketSessionDecorator;, +import org.springframework.web.socket.sockjs.transport.SockJsSession;, +		long[] heartbeat = headers.getHeartbeat();, +		if (heartbeat[1] > 0) {, +			session = WebSocketSessionDecorator.unwrap(session);, +			if (session instanceof SockJsSession) {, +				logger.debug("STOMP heartbeats negotiated, disabling SockJS heartbeats.");, +				((SockJsSession) session).disableHeartbeat();, +			}, +		}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebMvcStompEndpointRegistry.java, +		WebSocketHandler actual = WebSocketHandlerDecorator.unwrap(webSocketHandler);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/handler/WebSocketHandlerDecorator.java, +	public static WebSocketHandler unwrap(WebSocketHandler handler) {, +		if (handler instanceof WebSocketHandlerDecorator) {, +			return ((WebSocketHandlerDecorator) handler).getLastHandler();, +		}]