[+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/PersistenceUnitReader.java, +		URL rootUrl = determinePersistenceUnitRootUrl(resource);, +, +			infos.add(parsePersistenceUnitInfo(unit, version, rootUrl));, +		String urlToString = originalURL.toExternalForm();, +		if (persistenceUnitRoot.endsWith("/")) {, +			persistenceUnitRoot = persistenceUnitRoot.substring(0, persistenceUnitRoot.length() - 1);, +		return new URL(persistenceUnitRoot);, +	protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl), +			throws IOException {, +, +		// set persistence unit root URL, +		unitInfo.setPersistenceUnitRootUrl(rootUrl);, +, +		parseProperties(persistenceUnit, unitInfo);, +		parseManagedClasses(persistenceUnit, unitInfo);, +	protected void parseProperties(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {, +	protected void parseManagedClasses(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {, +	/**, +	 * Parse the <code>jar-file</code> XML elements., +	 */, +	@SuppressWarnings("unchecked"), +	protected void parseJarFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) throws IOException {, +		List<Element> jars = DomUtils.getChildElementsByTagName(persistenceUnit, JAR_FILE_URL);, +		for (Element element : jars) {, +			String value = DomUtils.getTextValue(element).trim();, +			if (StringUtils.hasText(value)) {, +				Resource[] resources = this.resourcePatternResolver.getResources(value);, +				boolean found = false;, +				for (Resource resource : resources) {, +					if (resource.exists()) {, +						found = true;, +						unitInfo.addJarFileUrl(resource.getURL());, +					}, +				}, +				if (!found) {, +					// relative to the persistence unit root, according to the JPA spec, +					URL rootUrl = unitInfo.getPersistenceUnitRootUrl();, +					if (rootUrl != null) {, +						unitInfo.addJarFileUrl(new URL(rootUrl, value));, +					}, +					else {, +						logger.warn("Cannot resolve jar-file entry [" + value + "] in persistence unit '" +, +								unitInfo.getPersistenceUnitName() + "' without root URL");, +					}, +				}, +			}, +		}, +	}, +, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/PersistenceUnitReader.java, +		URL rootUrl = determinePersistenceUnitRootUrl(resource);, +, +			infos.add(parsePersistenceUnitInfo(unit, version, rootUrl));, +		String urlToString = originalURL.toExternalForm();, +		if (persistenceUnitRoot.endsWith("/")) {, +			persistenceUnitRoot = persistenceUnitRoot.substring(0, persistenceUnitRoot.length() - 1);, +		return new URL(persistenceUnitRoot);, +	protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl), +			throws IOException {, +, +		// set persistence unit root URL, +		unitInfo.setPersistenceUnitRootUrl(rootUrl);, +, +		parseProperties(persistenceUnit, unitInfo);, +		parseManagedClasses(persistenceUnit, unitInfo);, +	protected void parseProperties(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {, +	protected void parseManagedClasses(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {, +	/**, +	 * Parse the <code>jar-file</code> XML elements., +	 */, +	@SuppressWarnings("unchecked"), +	protected void parseJarFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) throws IOException {, +		List<Element> jars = DomUtils.getChildElementsByTagName(persistenceUnit, JAR_FILE_URL);, +		for (Element element : jars) {, +			String value = DomUtils.getTextValue(element).trim();, +			if (StringUtils.hasText(value)) {, +				Resource[] resources = this.resourcePatternResolver.getResources(value);, +				boolean found = false;, +				for (Resource resource : resources) {, +					if (resource.exists()) {, +						found = true;, +						unitInfo.addJarFileUrl(resource.getURL());, +					}, +				}, +				if (!found) {, +					// relative to the persistence unit root, according to the JPA spec, +					URL rootUrl = unitInfo.getPersistenceUnitRootUrl();, +					if (rootUrl != null) {, +						unitInfo.addJarFileUrl(new URL(rootUrl, value));, +					}, +					else {, +						logger.warn("Cannot resolve jar-file entry [" + value + "] in persistence unit '" +, +								unitInfo.getPersistenceUnitName() + "' without root URL");, +					}, +				}, +			}, +		}, +	}, +]