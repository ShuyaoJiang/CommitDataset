[+++ b/spring-aop/src/main/java/org/springframework/aop/Advisor.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-aop/src/main/java/org/springframework/aop/Advisor.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-aop/src/main/java/org/springframework/aop/TargetSource.java, + * Copyright 2002-2017 the original author or authors., + * @author Juergen Hoeller, +	 * <p>Can return {@code null}, although certain usages of a {@code TargetSource}, +	 * might just work with a predetermined target class., +	 * <p>In that case, there will be no need to invoke {@link #releaseTarget(Object)},, +	 * and the AOP framework can cache the return value of {@link #getTarget()}., +++ b/spring-aop/src/main/java/org/springframework/aop/Advisor.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-aop/src/main/java/org/springframework/aop/TargetSource.java, + * Copyright 2002-2017 the original author or authors., + * @author Juergen Hoeller, +	 * <p>Can return {@code null}, although certain usages of a {@code TargetSource}, +	 * might just work with a predetermined target class., +	 * <p>In that case, there will be no need to invoke {@link #releaseTarget(Object)},, +	 * and the AOP framework can cache the return value of {@link #getTarget()}., +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, + * Copyright 2002-2017 the original author or authors., +	@Nullable, +						"' is neither a valid argument name nor the fully-qualified " +, +						"name of a Java type on the classpath. Root cause: " + ex);, +	@Nullable, +						"' is neither a valid argument name nor the fully-qualified " +, +						"name of a Java type on the classpath. Root cause: " + ex);, +	protected Object[] argBinding(JoinPoint jp, @Nullable JoinPointMatch jpMatch,, +			@Nullable Object returnValue, @Nullable Throwable ex) {, +, +	protected Object invokeAdviceMethod(, +			@Nullable JoinPointMatch jpMatch, @Nullable Object returnValue, @Nullable Throwable ex), +			throws Throwable {, +, +	protected Object invokeAdviceMethod(JoinPoint jp, @Nullable JoinPointMatch jpMatch,, +			@Nullable Object returnValue, @Nullable Throwable t) throws Throwable {, +	@Nullable, +	@Nullable, +		String expression = this.pointcut.getExpression();, +		return (expression != null ? (JoinPointMatch) pmi.getUserAttribute(expression) : null);, +++ b/spring-aop/src/main/java/org/springframework/aop/Advisor.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-aop/src/main/java/org/springframework/aop/TargetSource.java, + * Copyright 2002-2017 the original author or authors., + * @author Juergen Hoeller, +	 * <p>Can return {@code null}, although certain usages of a {@code TargetSource}, +	 * might just work with a predetermined target class., +	 * <p>In that case, there will be no need to invoke {@link #releaseTarget(Object)},, +	 * and the AOP framework can cache the return value of {@link #getTarget()}., +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, + * Copyright 2002-2017 the original author or authors., +	@Nullable, +						"' is neither a valid argument name nor the fully-qualified " +, +						"name of a Java type on the classpath. Root cause: " + ex);, +	@Nullable, +						"' is neither a valid argument name nor the fully-qualified " +, +						"name of a Java type on the classpath. Root cause: " + ex);, +	protected Object[] argBinding(JoinPoint jp, @Nullable JoinPointMatch jpMatch,, +			@Nullable Object returnValue, @Nullable Throwable ex) {, +, +	protected Object invokeAdviceMethod(, +			@Nullable JoinPointMatch jpMatch, @Nullable Object returnValue, @Nullable Throwable ex), +			throws Throwable {, +, +	protected Object invokeAdviceMethod(JoinPoint jp, @Nullable JoinPointMatch jpMatch,, +			@Nullable Object returnValue, @Nullable Throwable t) throws Throwable {, +	@Nullable, +	@Nullable, +		String expression = this.pointcut.getExpression();, +		return (expression != null ? (JoinPointMatch) pmi.getUserAttribute(expression) : null);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectInstanceFactory.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.lang.Nullable;, +	 * @return the aspect class loader (or {@code null} for the bootstrap loader), +	 * @see org.springframework.util.ClassUtils#getDefaultClassLoader(), +	@Nullable, +++ b/spring-aop/src/main/java/org/springframework/aop/Advisor.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-aop/src/main/java/org/springframework/aop/TargetSource.java, + * Copyright 2002-2017 the original author or authors., + * @author Juergen Hoeller, +	 * <p>Can return {@code null}, although certain usages of a {@code TargetSource}, +	 * might just work with a predetermined target class., +	 * <p>In that case, there will be no need to invoke {@link #releaseTarget(Object)},, +	 * and the AOP framework can cache the return value of {@link #getTarget()}., +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, + * Copyright 2002-2017 the original author or authors., +	@Nullable, +						"' is neither a valid argument name nor the fully-qualified " +, +						"name of a Java type on the classpath. Root cause: " + ex);, +	@Nullable, +						"' is neither a valid argument name nor the fully-qualified " +, +						"name of a Java type on the classpath. Root cause: " + ex);, +	protected Object[] argBinding(JoinPoint jp, @Nullable JoinPointMatch jpMatch,, +			@Nullable Object returnValue, @Nullable Throwable ex) {, +, +	protected Object invokeAdviceMethod(, +			@Nullable JoinPointMatch jpMatch, @Nullable Object returnValue, @Nullable Throwable ex), +			throws Throwable {]