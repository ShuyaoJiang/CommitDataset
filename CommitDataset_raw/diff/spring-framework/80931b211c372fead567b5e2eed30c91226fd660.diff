[+++ b/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java, + * A specialization of {@link GenericConversionService} configured by default, + * with converters appropriate for most environments., + * {@link #addDefaultConverters(ConverterRegistry)} utility method for ad-hoc, + * use against any {@code ConverterRegistry} instance., +	private static volatile DefaultConversionService sharedInstance;, +, +, +	/**, +	 * Return a shared default {@code ConversionService} instance,, +	 * lazily building it once needed., +	 * <p><b>NOTE:</b> We highly recommend constructing individual, +	 * {@code ConversionService} instances for customization purposes., +	 * This accessor is only meant as a fallback for code paths which, +	 * need simple type coercion but cannot access a longer-lived, +	 * {@code ConversionService} instance any other way., +	 * @return the shared {@code ConversionService} instance (never {@code null}), +	 * @since 4.3.5, +	 */, +	public static ConversionService getSharedInstance() {, +		if (sharedInstance == null) {, +			synchronized (DefaultConversionService.class) {, +				if (sharedInstance == null) {, +					sharedInstance = new DefaultConversionService();, +				}, +			}, +		}, +		return sharedInstance;, +	}, +, +, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java, + * A specialization of {@link GenericConversionService} configured by default, + * with converters appropriate for most environments., + * {@link #addDefaultConverters(ConverterRegistry)} utility method for ad-hoc, + * use against any {@code ConverterRegistry} instance., +	private static volatile DefaultConversionService sharedInstance;, +, +, +	/**, +	 * Return a shared default {@code ConversionService} instance,, +	 * lazily building it once needed., +	 * <p><b>NOTE:</b> We highly recommend constructing individual, +	 * {@code ConversionService} instances for customization purposes., +	 * This accessor is only meant as a fallback for code paths which, +	 * need simple type coercion but cannot access a longer-lived, +	 * {@code ConversionService} instance any other way., +	 * @return the shared {@code ConversionService} instance (never {@code null}), +	 * @since 4.3.5, +	 */, +	public static ConversionService getSharedInstance() {, +		if (sharedInstance == null) {, +			synchronized (DefaultConversionService.class) {, +				if (sharedInstance == null) {, +					sharedInstance = new DefaultConversionService();, +				}, +			}, +		}, +		return sharedInstance;, +	}, +, +, +++ b/spring-core/src/main/java/org/springframework/core/env/AbstractPropertyResolver.java, +import org.springframework.core.convert.ConversionService;, +import org.springframework.util.Assert;, +import org.springframework.util.ClassUtils;, +	private volatile ConfigurableConversionService conversionService;, +		// Need to provide an independent DefaultConversionService, not the, +		// shared DefaultConversionService used by PropertySourcesPropertyResolver., +		if (this.conversionService == null) {, +			synchronized (this) {, +				if (this.conversionService == null) {, +					this.conversionService = new DefaultConversionService();, +				}, +			}, +		}, +		return conversionService;, +		Assert.notNull(conversionService, "ConversionService must not be null");, +		Assert.notNull(placeholderPrefix, "'placeholderPrefix' must not be null");, +		Assert.notNull(placeholderSuffix, "'placeholderSuffix' must not be null");, +		if (requiredProperties != null) {, +	}, +	/**, +	 * Convert the given value to the specified target type, if necessary., +	 * @param value the original property value, +	 * @param targetType the specified target type for property retrieval, +	 * @return the converted value, or the original value if no conversion, +	 * is necessary, +	 * @since 4.3.5, +	 */, +	@SuppressWarnings("unchecked"), +	protected <T> T convertValueIfNecessary(Object value, Class<T> targetType) {, +		if (targetType == null) {, +			return (T) value;, +		}, +		ConversionService csToUse = this.conversionService;, +		if (csToUse == null) {, +			// Avoid initialization of shared DefaultConversionService if, +			// no standard type conversion is needed in the first place..., +			if (ClassUtils.isAssignableValue(targetType, value)) {]