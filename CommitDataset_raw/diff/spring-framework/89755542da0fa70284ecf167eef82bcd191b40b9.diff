[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +			if (result == null) {, +				return result;, +			}, +			if (result == null) {, +				return result;, +			}, +		if (bean != null && !mbd.isSynthetic() && hasInstantiationAwareBeanPostProcessors()) {, +					if (exposedObject == null) {, +						return exposedObject;, +					}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +			if (result == null) {, +				return result;, +			}, +			if (result == null) {, +				return result;, +			}, +		if (bean != null && !mbd.isSynthetic() && hasInstantiationAwareBeanPostProcessors()) {, +					if (exposedObject == null) {, +						return exposedObject;, +					}, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/AnnotationConfigApplicationContextTests.java, +import org.springframework.beans.factory.config.BeanPostProcessor;, +	@Test, +	public void nullReturningBeanPostProcessor() {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		context.register(AutowiredConfig.class);, +		context.getBeanFactory().addBeanPostProcessor(new BeanPostProcessor() {, +			public Object postProcessBeforeInitialization(Object bean, String beanName) {, +				return (bean instanceof TestBean ? null : bean);, +			}, +			public Object postProcessAfterInitialization(Object bean, String beanName) {, +				return bean;, +			}, +		});, +		context.getBeanFactory().addBeanPostProcessor(new BeanPostProcessor() {, +			public Object postProcessBeforeInitialization(Object bean, String beanName) {, +				bean.getClass().getName();, +				return bean;, +			}, +			public Object postProcessAfterInitialization(Object bean, String beanName) {, +				bean.getClass().getName();, +				return bean;, +			}, +		});, +		context.refresh();, +	}, +]