[+++ b/build.gradle, +++ b/build.gradle, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/ReplyTo.java, +	 * The destination for a message created from the return value of a method., +	String[] value() default {};, +++ b/build.gradle, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/ReplyTo.java, +	 * The destination for a message created from the return value of a method., +	String[] value() default {};, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/ExceptionHandlerMethodResolver.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.messaging.handler.annotation.support;, +, +import java.lang.reflect.Method;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +import java.util.Map;, +import java.util.concurrent.ConcurrentHashMap;, +, +import org.springframework.core.ExceptionDepthComparator;, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.messaging.handler.annotation.MessageExceptionHandler;, +import org.springframework.messaging.handler.method.HandlerMethodSelector;, +import org.springframework.util.Assert;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.ReflectionUtils.MethodFilter;, +, +, +/**, + * Discovers annotated exception handling methods in a given class type, including all, + * super types, and helps to resolve an Exception to a method that can handle it. The, + * exception types supported by a given method can also be discovered from the method, + * signature., + *, + * @author Rossen Stoyanchev, + * @since 4.0, + */, +public class ExceptionHandlerMethodResolver {, +, +	private static final Method NO_METHOD_FOUND = ClassUtils.getMethodIfAvailable(System.class, "currentTimeMillis");, +, +	private final Map<Class<? extends Throwable>, Method> mappedMethods =, +			new ConcurrentHashMap<Class<? extends Throwable>, Method>(16);, +, +	private final Map<Class<? extends Throwable>, Method> exceptionLookupCache =, +			new ConcurrentHashMap<Class<? extends Throwable>, Method>(16);, +, +, +	/**, +	 * A constructor that finds {@link MessageExceptionHandler} methods in the given type., +	 * @param handlerType the type to introspect, +	 */, +	public ExceptionHandlerMethodResolver(Class<?> handlerType) {, +		for (Method method : HandlerMethodSelector.selectMethods(handlerType, EXCEPTION_HANDLER_METHOD_FILTER)) {, +			for (Class<? extends Throwable> exceptionType : detectExceptionMappings(method)) {, +				addExceptionMapping(exceptionType, method);, +			}, +		}, +	}, +, +	/**, +	 * Extract exception mappings from the {@code @ExceptionHandler} annotation, +	 * first and as a fall-back from the method signature., +	 */, +	@SuppressWarnings("unchecked"), +	private List<Class<? extends Throwable>> detectExceptionMappings(Method method) {, +		List<Class<? extends Throwable>> result = new ArrayList<Class<? extends Throwable>>();, +, +		detectAnnotationExceptionMappings(method, result);, +, +		if (result.isEmpty()) {, +			for (Class<?> paramType : method.getParameterTypes()) {, +				if (Throwable.class.isAssignableFrom(paramType)) {, +					result.add((Class<? extends Throwable>) paramType);, +				}, +			}, +		}, +, +		Assert.notEmpty(result, "No exception types mapped to {" + method + "}");, +, +		return result;, +	}, +]