[+++ b/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java, +	protected class HandlerMethodParameter extends MethodParameter {, +++ b/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java, +	protected class HandlerMethodParameter extends MethodParameter {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethod.java, + * Copyright 2002-2014 the original author or authors., +import java.lang.reflect.Type;, +import org.springframework.core.MethodParameter;, +import org.springframework.core.ResolvableType;, +	private static final Method CALLABLE_METHOD = ClassUtils.getMethod(Callable.class, "call");, +, +, +	 * Create a nested ServletInvocableHandlerMethod sub-class that returns the, +	 * the given value (or raises an Exception if the value is one) rather than, +	 * actually invoking the controller method. This is useful when processing, +	 * async return values (e.g. Callable, DeferredResult, ListenableFuture)., +	ServletInvocableHandlerMethod wrapConcurrentResult(Object result) {, +		return new ConcurrentResultHandlerMethod(result, new ConcurrentResultMethodParameter(result));, +	}, +	/**, +	 * A nested sub-class of {@code ServletInvocableHandlerMethod} that uses a, +	 * simple {@link Callable} instead of the original controller as the handler in, +	 * order to return the fixed (concurrent) result value given to it. Effectively, +	 * "resumes" processing with the asynchronously produced return value., +	 */, +	private class ConcurrentResultHandlerMethod extends ServletInvocableHandlerMethod {, +, +		private final MethodParameter returnType;, +, +, +		public ConcurrentResultHandlerMethod(final Object result, ConcurrentResultMethodParameter returnType) {, +			super(new Callable<Object>() {, +			}, CALLABLE_METHOD);, +			setHandlerMethodReturnValueHandlers(ServletInvocableHandlerMethod.this.returnValueHandlers);, +			this.returnType = returnType;, +		 * Bridge to actual controller type-level annotations., +		 * Bridge to actual return value or generic type within the declared, +		 * async return type, e.g. Foo instead of {@code DeferredResult<Foo>}., +		 */, +		@Override, +		public MethodParameter getReturnValueType(Object returnValue) {, +			return this.returnType;, +		}, +, +		/**, +		 * Bridge to controller method-level annotations., +	/**, +	 * MethodParameter sub-class based on the actual return value type or if, +	 * that's null falling back on the generic type within the declared async, +	 * return type, e.g. Foo instead of {@code DeferredResult<Foo>}., +	 */, +	private class ConcurrentResultMethodParameter extends HandlerMethodParameter {, +, +		private final Object returnValue;, +, +		private final ResolvableType returnType;, +, +, +		public ConcurrentResultMethodParameter(Object returnValue) {, +			super(-1);, +			this.returnValue = returnValue;, +			this.returnType = ResolvableType.forType(super.getGenericParameterType()).getGeneric(0);, +		}, +, +		@Override, +		public Class<?> getParameterType() {, +			return (returnValue != null ? returnValue.getClass() : this.returnType.getRawClass());, +		}, +, +		@Override, +		public Type getGenericParameterType() {, +			return this.returnType.getType();, +		}, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java, +	protected class HandlerMethodParameter extends MethodParameter {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethod.java, + * Copyright 2002-2014 the original author or authors., +import java.lang.reflect.Type;, +import org.springframework.core.MethodParameter;, +import org.springframework.core.ResolvableType;, +	private static final Method CALLABLE_METHOD = ClassUtils.getMethod(Callable.class, "call");, +, +, +	 * Create a nested ServletInvocableHandlerMethod sub-class that returns the, +	 * the given value (or raises an Exception if the value is one) rather than, +	 * actually invoking the controller method. This is useful when processing, +	 * async return values (e.g. Callable, DeferredResult, ListenableFuture)., +	ServletInvocableHandlerMethod wrapConcurrentResult(Object result) {, +		return new ConcurrentResultHandlerMethod(result, new ConcurrentResultMethodParameter(result));, +	}, +	/**, +	 * A nested sub-class of {@code ServletInvocableHandlerMethod} that uses a, +	 * simple {@link Callable} instead of the original controller as the handler in, +	 * order to return the fixed (concurrent) result value given to it. Effectively, +	 * "resumes" processing with the asynchronously produced return value., +	 */, +	private class ConcurrentResultHandlerMethod extends ServletInvocableHandlerMethod {, +]