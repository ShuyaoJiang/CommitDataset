[+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/ContentNegotiatingResultHandlerSupportTests.java, +	private TestResultHandler resultHandler;, +		this.resultHandler = new TestResultHandler();, +		TestResultHandler resultHandler = new TestResultHandler(new FixedContentTypeResolver(IMAGE_GIF));, +		MediaType actual = resultHandler.selectMediaType(this.exchange, mediaTypes);, +		MediaType actual = resultHandler.selectMediaType(this.exchange, mediaTypes);, +		MediaType actual = this.resultHandler.selectMediaType(this.exchange, mediaTypes);, +		MediaType actual = this.resultHandler.selectMediaType(this.exchange, Collections.singletonList(textUtf8));, +		MediaType actual = this.resultHandler.selectMediaType(this.exchange, producible);, +	@SuppressWarnings("WeakerAccess"), +	private static class TestResultHandler extends ContentNegotiatingResultHandlerSupport {, +		protected TestResultHandler() {, +		public TestResultHandler(RequestedContentTypeResolver contentTypeResolver) {, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/ContentNegotiatingResultHandlerSupportTests.java, +	private TestResultHandler resultHandler;, +		this.resultHandler = new TestResultHandler();, +		TestResultHandler resultHandler = new TestResultHandler(new FixedContentTypeResolver(IMAGE_GIF));, +		MediaType actual = resultHandler.selectMediaType(this.exchange, mediaTypes);, +		MediaType actual = resultHandler.selectMediaType(this.exchange, mediaTypes);, +		MediaType actual = this.resultHandler.selectMediaType(this.exchange, mediaTypes);, +		MediaType actual = this.resultHandler.selectMediaType(this.exchange, Collections.singletonList(textUtf8));, +		MediaType actual = this.resultHandler.selectMediaType(this.exchange, producible);, +	@SuppressWarnings("WeakerAccess"), +	private static class TestResultHandler extends ContentNegotiatingResultHandlerSupport {, +		protected TestResultHandler() {, +		public TestResultHandler(RequestedContentTypeResolver contentTypeResolver) {, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/ResolvableMethod.java, +import org.bouncycastle.util.Arrays;, +, +import org.springframework.util.ObjectUtils;, +	private Class<?>[] argumentTypes;, +, +	public ResolvableMethod argumentTypes(Class<?>... argumentTypes) {, +		this.argumentTypes = argumentTypes;, +		return this;, +	}, +, +		String expectedReturnType = getReturnType();, +					if (getReturnType() != null) {, +						String actual = ResolvableType.forMethodReturnType(method).toString();, +						if (!actual.equals(getReturnType()) && !Object.class.equals(method.getDeclaringClass())) {, +							return false;, +						}, +					}, +					if (!ObjectUtils.isEmpty(this.argumentTypes)) {, +						if (!Arrays.areEqual(this.argumentTypes, method.getParameterTypes())) {, +	private String getReturnType() {, +		return this.returnType != null ? this.returnType.toString() : null;, +	}, +, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/ContentNegotiatingResultHandlerSupportTests.java, +	private TestResultHandler resultHandler;, +		this.resultHandler = new TestResultHandler();, +		TestResultHandler resultHandler = new TestResultHandler(new FixedContentTypeResolver(IMAGE_GIF));, +		MediaType actual = resultHandler.selectMediaType(this.exchange, mediaTypes);, +		MediaType actual = resultHandler.selectMediaType(this.exchange, mediaTypes);, +		MediaType actual = this.resultHandler.selectMediaType(this.exchange, mediaTypes);, +		MediaType actual = this.resultHandler.selectMediaType(this.exchange, Collections.singletonList(textUtf8));, +		MediaType actual = this.resultHandler.selectMediaType(this.exchange, producible);, +	@SuppressWarnings("WeakerAccess"), +	private static class TestResultHandler extends ContentNegotiatingResultHandlerSupport {, +		protected TestResultHandler() {, +		public TestResultHandler(RequestedContentTypeResolver contentTypeResolver) {, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/ResolvableMethod.java, +import org.bouncycastle.util.Arrays;, +, +import org.springframework.util.ObjectUtils;, +	private Class<?>[] argumentTypes;, +, +	public ResolvableMethod argumentTypes(Class<?>... argumentTypes) {, +		this.argumentTypes = argumentTypes;, +		return this;, +	}, +, +		String expectedReturnType = getReturnType();, +					if (getReturnType() != null) {, +						String actual = ResolvableType.forMethodReturnType(method).toString();, +						if (!actual.equals(getReturnType()) && !Object.class.equals(method.getDeclaringClass())) {, +							return false;, +						}, +					}, +					if (!ObjectUtils.isEmpty(this.argumentTypes)) {, +						if (!Arrays.areEqual(this.argumentTypes, method.getParameterTypes())) {, +	private String getReturnType() {, +		return this.returnType != null ? this.returnType.toString() : null;, +	}, +, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/HandlerMethodMappingTests.java, +, +		TestSubscriber.subscribe(result).assertError(IllegalStateException.class);, +, +, +, +, +, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/ContentNegotiatingResultHandlerSupportTests.java, +	private TestResultHandler resultHandler;, +		this.resultHandler = new TestResultHandler();, +		TestResultHandler resultHandler = new TestResultHandler(new FixedContentTypeResolver(IMAGE_GIF));, +		MediaType actual = resultHandler.selectMediaType(this.exchange, mediaTypes);]