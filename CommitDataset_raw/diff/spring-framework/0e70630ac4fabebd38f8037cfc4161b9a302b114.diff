[+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/AsyncTests.java, +, +import java.io.StringWriter;, +import org.springframework.web.bind.annotation.RestController;, +import static org.junit.Assert.*;, +, +import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;, +import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;, +import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;, +import static org.springframework.test.web.servlet.setup.MockMvcBuilders.*;, +, + * @author Sam Brannen, +	private final AsyncController asyncController = new AsyncController();, +	private final MockMvc mockMvc = standaloneSetup(this.asyncController).build();, +	public void callable() throws Exception {, +	public void deferredResult() throws Exception {, +	public void deferredResultWithSetValue() throws Exception {, +	public void listenableFuture() throws Exception {, +	public void completableFuture() throws Exception {, +	public void printAsyncResult() throws Exception {, +		StringWriter writer = new StringWriter();, +, +				.andDo(print(writer)), +		assertTrue(writer.toString().contains("Async started = true"));, +		writer = new StringWriter();, +, +				.andDo(print(writer)), +, +		assertTrue(writer.toString().contains("Async started = false"));, +	@RestController, +	@RequestMapping(path = "/{id}", produces = "application/json"), +		private final Collection<DeferredResult<Person>> deferredResults =, +		private final Collection<ListenableFutureTask<Person>> futureTasks =, +		@RequestMapping(params = "callable"), +			return () -> new Person("Joe");, +		@RequestMapping(params = "deferredResult"), +		@RequestMapping(params = "deferredResultWithSetValue"), +		@RequestMapping(params = "listenableFuture"), +			ListenableFutureTask<Person> futureTask = new ListenableFutureTask<Person>(() -> new Person("Joe"));, +		@RequestMapping(params = "completableFuture")]