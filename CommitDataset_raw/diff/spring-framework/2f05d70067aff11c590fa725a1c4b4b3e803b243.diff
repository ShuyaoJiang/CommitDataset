[+++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/AllTests.java, +		suite.addTestSuite(VariableAndFunctionTests.class);, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/AllTests.java, +		suite.addTestSuite(VariableAndFunctionTests.class);, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/ExpressionTestCase.java, +	protected final static boolean SHOULD_BE_WRITABLE = true;, +	protected final static boolean SHOULD_NOT_BE_WRITABLE = false;, +	, +			if (expectedValue instanceof String) {, +			} else {, +				assertEquals("Did not get expected value for expression '" + expression + "'.", expectedValue, value);, +			}, +//			assertEquals("Did not get expected value for expression '" + expression + "'.", expectedValue,, +//					ExpressionTestCase.stringValueOf(value));, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/AllTests.java, +		suite.addTestSuite(VariableAndFunctionTests.class);, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/ExpressionTestCase.java, +	protected final static boolean SHOULD_BE_WRITABLE = true;, +	protected final static boolean SHOULD_NOT_BE_WRITABLE = false;, +	, +			if (expectedValue instanceof String) {, +			} else {, +				assertEquals("Did not get expected value for expression '" + expression + "'.", expectedValue, value);, +			}, +//			assertEquals("Did not get expected value for expression '" + expression + "'.", expectedValue,, +//					ExpressionTestCase.stringValueOf(value));, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/TestScenarioCreator.java, +			testContext.registerFunction("varargsFunctionReverseStringsAndMerge", TestScenarioCreator.class.getDeclaredMethod("varargsFunctionReverseStringsAndMerge",, +					new Class[] { String[].class }));, +			testContext.registerFunction("varargsFunctionReverseStringsAndMerge2", TestScenarioCreator.class.getDeclaredMethod("varargsFunctionReverseStringsAndMerge2",, +					new Class[] { Integer.TYPE,String[].class }));, +, +	public static String varargsFunctionReverseStringsAndMerge(String...strings) {, +		StringBuilder sb = new StringBuilder();, +		if (strings!=null) {, +			for (int i=strings.length-1;i>=0;i--) {, +				sb.append(strings[i]);, +			}, +		}, +		return sb.toString();, +	}, +	, +	public static String varargsFunctionReverseStringsAndMerge2(int j, String...strings) {, +		StringBuilder sb = new StringBuilder();, +		sb.append(j);, +		if (strings!=null) {, +			for (int i=strings.length-1;i>=0;i--) {, +				sb.append(strings[i]);, +			}, +		}, +		return sb.toString();, +	}, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/AllTests.java, +		suite.addTestSuite(VariableAndFunctionTests.class);, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/ExpressionTestCase.java, +	protected final static boolean SHOULD_BE_WRITABLE = true;, +	protected final static boolean SHOULD_NOT_BE_WRITABLE = false;, +	, +			if (expectedValue instanceof String) {, +			} else {, +				assertEquals("Did not get expected value for expression '" + expression + "'.", expectedValue, value);, +			}, +//			assertEquals("Did not get expected value for expression '" + expression + "'.", expectedValue,, +//					ExpressionTestCase.stringValueOf(value));, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/TestScenarioCreator.java, +			testContext.registerFunction("varargsFunctionReverseStringsAndMerge", TestScenarioCreator.class.getDeclaredMethod("varargsFunctionReverseStringsAndMerge",, +					new Class[] { String[].class }));, +			testContext.registerFunction("varargsFunctionReverseStringsAndMerge2", TestScenarioCreator.class.getDeclaredMethod("varargsFunctionReverseStringsAndMerge2",, +					new Class[] { Integer.TYPE,String[].class }));, +, +	public static String varargsFunctionReverseStringsAndMerge(String...strings) {, +		StringBuilder sb = new StringBuilder();, +		if (strings!=null) {, +			for (int i=strings.length-1;i>=0;i--) {, +				sb.append(strings[i]);, +			}, +		}, +		return sb.toString();, +	}, +	, +	public static String varargsFunctionReverseStringsAndMerge2(int j, String...strings) {, +		StringBuilder sb = new StringBuilder();, +		sb.append(j);, +		if (strings!=null) {, +			for (int i=strings.length-1;i>=0;i--) {, +				sb.append(strings[i]);, +			}, +		}, +		return sb.toString();, +	}, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/VariableAndFunctionTests.java, +/*, + * Copyright 2004-2008 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *]