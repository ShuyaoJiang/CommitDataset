[+++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, + * Copyright 2002-2019 the original author or authors., +	private static final Map<Class<?>, Object> DEFAULT_TYPE_VALUES;, +, +	static {, +		Map<Class<?>, Object> values = new HashMap<>();, +		values.put(boolean.class, false);, +		values.put(byte.class, (byte) 0);, +		values.put(short.class, (short) 0);, +		values.put(int.class, 0);, +		values.put(long.class, (long) 0);, +		DEFAULT_TYPE_VALUES = Collections.unmodifiableMap(values);, +	}, +, +	 * parameter, Kotlin optional parameters and Java primitive types are supported), +			if (KotlinDetector.isKotlinReflectPresent() && KotlinDetector.isKotlinType(ctor.getDeclaringClass())) {, +				return KotlinDelegate.instantiateClass(ctor, args);, +			}, +			else {, +				Class<?>[] parameterTypes = ctor.getParameterTypes();, +				Assert.isTrue(args.length <= parameterTypes.length, "Can't specify more arguments than constructor parameters");, +				Object[] argsWithDefaultValues = new Object[args.length];, +				for (int i = 0 ; i < args.length; i++) {, +					if (args[i] == null) {, +						Class<?> parameterType = parameterTypes[i];, +						argsWithDefaultValues[i] = (parameterType.isPrimitive() ? DEFAULT_TYPE_VALUES.get(parameterType) : null);, +					}, +					else {, +						argsWithDefaultValues[i] = args[i];, +					}, +				}, +				return ctor.newInstance(argsWithDefaultValues);, +			}, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, + * Copyright 2002-2019 the original author or authors., +	private static final Map<Class<?>, Object> DEFAULT_TYPE_VALUES;, +, +	static {, +		Map<Class<?>, Object> values = new HashMap<>();, +		values.put(boolean.class, false);, +		values.put(byte.class, (byte) 0);, +		values.put(short.class, (short) 0);, +		values.put(int.class, 0);, +		values.put(long.class, (long) 0);, +		DEFAULT_TYPE_VALUES = Collections.unmodifiableMap(values);, +	}, +, +	 * parameter, Kotlin optional parameters and Java primitive types are supported), +			if (KotlinDetector.isKotlinReflectPresent() && KotlinDetector.isKotlinType(ctor.getDeclaringClass())) {, +				return KotlinDelegate.instantiateClass(ctor, args);, +			}, +			else {, +				Class<?>[] parameterTypes = ctor.getParameterTypes();, +				Assert.isTrue(args.length <= parameterTypes.length, "Can't specify more arguments than constructor parameters");, +				Object[] argsWithDefaultValues = new Object[args.length];, +				for (int i = 0 ; i < args.length; i++) {, +					if (args[i] == null) {, +						Class<?> parameterType = parameterTypes[i];, +						argsWithDefaultValues[i] = (parameterType.isPrimitive() ? DEFAULT_TYPE_VALUES.get(parameterType) : null);, +					}, +					else {, +						argsWithDefaultValues[i] = args[i];, +					}, +				}, +				return ctor.newInstance(argsWithDefaultValues);, +			}, +++ b/spring-beans/src/test/java/org/springframework/beans/BeanUtilsTests.java, + * Copyright 2002-2019 the original author or authors., +import java.lang.reflect.Constructor;, +import org.springframework.lang.Nullable;, + * @author Sebastien Deleuze, +	@Test  // gh-22531, +	public void testInstantiateClassWithOptionalNullableType() throws NoSuchMethodException {, +		Constructor<BeanWithNullableTypes> ctor = BeanWithNullableTypes.class.getDeclaredConstructor(, +				Integer.class, Boolean.class, String.class);, +		BeanWithNullableTypes bean = BeanUtils.instantiateClass(ctor, null, null, "foo");, +		assertNull(bean.getCounter());, +		assertNull(bean.isFlag());, +		assertEquals("foo", bean.getValue());, +	}, +, +	@Test  // gh-22531, +	public void testInstantiateClassWithOptionalPrimitiveType() throws NoSuchMethodException {, +		Constructor<BeanWithPrimitiveTypes> ctor = BeanWithPrimitiveTypes.class.getDeclaredConstructor(int.class, boolean.class, String.class);, +		BeanWithPrimitiveTypes bean = BeanUtils.instantiateClass(ctor, null, null, "foo");, +		assertEquals(0, bean.getCounter());, +		assertEquals(false, bean.isFlag());, +		assertEquals("foo", bean.getValue());, +	}, +, +	@Test(expected = BeanInstantiationException.class)  // gh-22531, +	public void testInstantiateClassWithMoreArgsThanParameters() throws NoSuchMethodException {, +		Constructor<BeanWithPrimitiveTypes> ctor = BeanWithPrimitiveTypes.class.getDeclaredConstructor(int.class, boolean.class, String.class);, +		BeanUtils.instantiateClass(ctor, null, null, "foo", null);, +	}, +, +	private static class BeanWithNullableTypes {, +, +		private Integer counter;, +]