[+++ b/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFutureCallbackRegistry.java, +	 * Add the given callback to this registry., +	 * Add the given success callback to this registry., +	 * Add the given failure callback to this registry., +	 * Trigger a {@link ListenableFutureCallback#onSuccess(Object)} call on all, +	 * added callbacks with the given result., +	 * Trigger a {@link ListenableFutureCallback#onFailure(Throwable)} call on all, +++ b/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFutureCallbackRegistry.java, +	 * Add the given callback to this registry., +	 * Add the given success callback to this registry., +	 * Add the given failure callback to this registry., +	 * Trigger a {@link ListenableFutureCallback#onSuccess(Object)} call on all, +	 * added callbacks with the given result., +	 * Trigger a {@link ListenableFutureCallback#onFailure(Throwable)} call on all, +++ b/spring-core/src/test/java/org/springframework/util/concurrent/ListenableFutureTaskTests.java, +import static org.junit.Assert.*;, +import static org.mockito.Mockito.*;, +	public void success() throws Exception {, +	public void failure() throws Exception {, +	public void successWithLambdas() throws Exception {, +	public void failureWithLambdas() throws Exception {, +++ b/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFutureCallbackRegistry.java, +	 * Add the given callback to this registry., +	 * Add the given success callback to this registry., +	 * Add the given failure callback to this registry., +	 * Trigger a {@link ListenableFutureCallback#onSuccess(Object)} call on all, +	 * added callbacks with the given result., +	 * Trigger a {@link ListenableFutureCallback#onFailure(Throwable)} call on all, +++ b/spring-core/src/test/java/org/springframework/util/concurrent/ListenableFutureTaskTests.java, +import static org.junit.Assert.*;, +import static org.mockito.Mockito.*;, +	public void success() throws Exception {, +	public void failure() throws Exception {, +	public void successWithLambdas() throws Exception {, +	public void failureWithLambdas() throws Exception {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +	 * Return the STOMP message broker host., +	 * Return the STOMP message broker port., +	 * Return the interval, in milliseconds, at which the "system" connection will, +	 * Return the interval, in milliseconds, at which the "system" connection expects, +	 * Set the client passcode to use to create connections to the STOMP broker on, +	 * Return the configured passcode to use for connections to the STOMP broker on, +	 * Return the login used for the shared "system" connection to the STOMP broker., +	 * Return the passcode used for the shared "system" connection to the STOMP broker., +	 * Return the configured virtual host value., +			if (logger.isErrorEnabled() && SimpMessageType.CONNECT.equals(messageType)) {, +		if (command != null && command.requiresDestination() && !checkDestinationPrefix(destination)) {, +		public void handleFailure(Throwable ex) {, +				handleTcpConnectionFailure("transport failure.", ex);, +				logger.error("Transport failure: " + ex);, +				catch (Throwable ex) {, +							accessor.getShortLogMessage(message.getPayload()));, +		protected void handleTcpConnectionFailure(String errorMessage, Throwable ex) {, +			super.handleTcpConnectionFailure(errorMessage, ex);, +++ b/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFutureCallbackRegistry.java, +	 * Add the given callback to this registry., +	 * Add the given success callback to this registry., +	 * Add the given failure callback to this registry., +	 * Trigger a {@link ListenableFutureCallback#onSuccess(Object)} call on all, +	 * added callbacks with the given result., +	 * Trigger a {@link ListenableFutureCallback#onFailure(Throwable)} call on all, +++ b/spring-core/src/test/java/org/springframework/util/concurrent/ListenableFutureTaskTests.java, +import static org.junit.Assert.*;, +import static org.mockito.Mockito.*;, +	public void success() throws Exception {, +	public void failure() throws Exception {, +	public void successWithLambdas() throws Exception {, +	public void failureWithLambdas() throws Exception {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +	 * Return the STOMP message broker host., +	 * Return the STOMP message broker port., +	 * Return the interval, in milliseconds, at which the "system" connection will, +	 * Return the interval, in milliseconds, at which the "system" connection expects, +	 * Set the client passcode to use to create connections to the STOMP broker on, +	 * Return the configured passcode to use for connections to the STOMP broker on, +	 * Return the login used for the shared "system" connection to the STOMP broker., +	 * Return the passcode used for the shared "system" connection to the STOMP broker., +	 * Return the configured virtual host value., +			if (logger.isErrorEnabled() && SimpMessageType.CONNECT.equals(messageType)) {, +		if (command != null && command.requiresDestination() && !checkDestinationPrefix(destination)) {, +		public void handleFailure(Throwable ex) {, +				handleTcpConnectionFailure("transport failure.", ex);, +				logger.error("Transport failure: " + ex);, +				catch (Throwable ex) {, +							accessor.getShortLogMessage(message.getPayload()));, +		protected void handleTcpConnectionFailure(String errorMessage, Throwable ex) {, +			super.handleTcpConnectionFailure(errorMessage, ex);, +++ b/spring-web/src/main/java/org/springframework/http/HttpEntity.java, + * Copyright 2002-2014 the original author or authors., +		return (ObjectUtils.nullSafeHashCode(this.headers) * 29 + ObjectUtils.nullSafeHashCode(this.body));, +		if (this.body != null) {, +			builder.append(this.body);, +			if (this.headers != null) {, +		if (this.headers != null) {, +			builder.append(this.headers);, +++ b/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFutureCallbackRegistry.java, +	 * Add the given callback to this registry., +	 * Add the given success callback to this registry., +	 * Add the given failure callback to this registry., +	 * Trigger a {@link ListenableFutureCallback#onSuccess(Object)} call on all]