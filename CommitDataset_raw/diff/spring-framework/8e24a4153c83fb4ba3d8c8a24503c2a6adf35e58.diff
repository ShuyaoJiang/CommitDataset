[+++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +				eventType = ((PayloadApplicationEvent)applicationEvent).getResolvableType();, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +				eventType = ((PayloadApplicationEvent)applicationEvent).getResolvableType();, +++ b/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.context.event.test.GenericEventPojo;, +	public void listenerWithResolvableTypeEvent() {, +		load(ResolvableTypeEventListener.class);, +		ResolvableTypeEventListener listener = this.context.getBean(ResolvableTypeEventListener.class);, +, +		this.eventCollector.assertNoEventReceived(listener);, +		GenericEventPojo<String> event = new GenericEventPojo<>("TEST");, +		this.context.publishEvent(event);, +		this.eventCollector.assertEvent(listener, event);, +		this.eventCollector.assertTotalEventsCount(1);, +	}, +, +	@Test, +	public void listenerWithResolvableTypeEventWrongGeneric() {, +		load(ResolvableTypeEventListener.class);, +		ResolvableTypeEventListener listener = this.context.getBean(ResolvableTypeEventListener.class);, +, +		this.eventCollector.assertNoEventReceived(listener);, +		GenericEventPojo<Long> event = new GenericEventPojo<>(123L);, +		this.context.publishEvent(event);, +		this.eventCollector.assertNoEventReceived(listener);, +		this.eventCollector.assertTotalEventsCount(0);, +	}, +, +	@Test, +	static class ResolvableTypeEventListener extends AbstractTestEventListener {, +, +		@EventListener, +		public void handleString(GenericEventPojo<String> value) {, +			collectEvent(value);, +		}, +	}, +, +, +	@Component, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +				eventType = ((PayloadApplicationEvent)applicationEvent).getResolvableType();, +++ b/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.context.event.test.GenericEventPojo;, +	public void listenerWithResolvableTypeEvent() {, +		load(ResolvableTypeEventListener.class);, +		ResolvableTypeEventListener listener = this.context.getBean(ResolvableTypeEventListener.class);, +, +		this.eventCollector.assertNoEventReceived(listener);, +		GenericEventPojo<String> event = new GenericEventPojo<>("TEST");, +		this.context.publishEvent(event);, +		this.eventCollector.assertEvent(listener, event);, +		this.eventCollector.assertTotalEventsCount(1);, +	}, +, +	@Test, +	public void listenerWithResolvableTypeEventWrongGeneric() {, +		load(ResolvableTypeEventListener.class);, +		ResolvableTypeEventListener listener = this.context.getBean(ResolvableTypeEventListener.class);, +, +		this.eventCollector.assertNoEventReceived(listener);, +		GenericEventPojo<Long> event = new GenericEventPojo<>(123L);, +		this.context.publishEvent(event);, +		this.eventCollector.assertNoEventReceived(listener);, +		this.eventCollector.assertTotalEventsCount(0);, +	}, +, +	@Test, +	static class ResolvableTypeEventListener extends AbstractTestEventListener {, +, +		@EventListener, +		public void handleString(GenericEventPojo<String> value) {, +			collectEvent(value);, +		}, +	}, +, +, +	@Component, +++ b/spring-context/src/test/java/org/springframework/context/event/test/GenericEventPojo.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.context.event.test;, +, +import org.springframework.core.ResolvableType;]