[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandler.java, +		if (HttpStatus.INTERNAL_SERVER_ERROR.equals(status)) {, +			request.setAttribute("javax.servlet.error.exception", ex, WebRequest.SCOPE_REQUEST);, +		}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandler.java, +		if (HttpStatus.INTERNAL_SERVER_ERROR.equals(status)) {, +			request.setAttribute("javax.servlet.error.exception", ex, WebRequest.SCOPE_REQUEST);, +		}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java, +		sendServerError(ex, request, response);, +	 * Invoked to send a server error. Sets the status to 500 and also sets the, +	 * request attribute "javax.servlet.error.exception" to the Exception., +	 */, +	protected void sendServerError(Exception ex,, +			HttpServletRequest request, HttpServletResponse response) throws IOException {, +, +		request.setAttribute("javax.servlet.error.exception", ex);, +		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);, +	}, +, +	/**, +		sendServerError(ex, request, response);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandler.java, +		if (HttpStatus.INTERNAL_SERVER_ERROR.equals(status)) {, +			request.setAttribute("javax.servlet.error.exception", ex, WebRequest.SCOPE_REQUEST);, +		}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java, +		sendServerError(ex, request, response);, +	 * Invoked to send a server error. Sets the status to 500 and also sets the, +	 * request attribute "javax.servlet.error.exception" to the Exception., +	 */, +	protected void sendServerError(Exception ex,, +			HttpServletRequest request, HttpServletResponse response) throws IOException {, +, +		request.setAttribute("javax.servlet.error.exception", ex);, +		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);, +	}, +, +	/**, +		sendServerError(ex, request, response);, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandlerTests.java, +import static org.junit.Assert.assertSame;, +, +		// SPR-9653, +		if (HttpStatus.INTERNAL_SERVER_ERROR.equals(responseEntity.getStatusCode())) {, +			assertSame(ex, this.servletRequest.getAttribute("javax.servlet.error.exception"));, +		}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandler.java, +		if (HttpStatus.INTERNAL_SERVER_ERROR.equals(status)) {, +			request.setAttribute("javax.servlet.error.exception", ex, WebRequest.SCOPE_REQUEST);, +		}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java, +		sendServerError(ex, request, response);, +	 * Invoked to send a server error. Sets the status to 500 and also sets the, +	 * request attribute "javax.servlet.error.exception" to the Exception., +	 */, +	protected void sendServerError(Exception ex,, +			HttpServletRequest request, HttpServletResponse response) throws IOException {, +, +		request.setAttribute("javax.servlet.error.exception", ex);, +		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);, +	}, +, +	/**, +		sendServerError(ex, request, response);, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ResponseEntityExceptionHandlerTests.java, +import static org.junit.Assert.assertSame;, +, +		// SPR-9653, +		if (HttpStatus.INTERNAL_SERVER_ERROR.equals(responseEntity.getStatusCode())) {, +			assertSame(ex, this.servletRequest.getAttribute("javax.servlet.error.exception"));, +		}, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolverTests.java, +import static org.junit.Assert.assertSame;, +import org.springframework.beans.ConversionNotSupportedException;, +	@Test, +	public void handleConversionNotSupportedException() throws Exception {, +		ConversionNotSupportedException ex =, +				new ConversionNotSupportedException(new Object(), String.class, new Exception());, +		ModelAndView mav = exceptionResolver.resolveException(request, response, null, ex);, +		assertNotNull("No ModelAndView returned", mav);, +		assertTrue("No Empty ModelAndView returned", mav.isEmpty());, +		assertEquals("Invalid status code", 500, response.getStatus());, +, +		// SPR-9653, +		assertSame(ex, request.getAttribute("javax.servlet.error.exception"));, +	}, +]