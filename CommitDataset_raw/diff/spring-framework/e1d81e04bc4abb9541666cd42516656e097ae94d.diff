[+++ b/org.springframework.context/src/test/java/org/springframework/jndi/SimpleNamingContextTests.java, + * Copyright 2002-2011 the original author or authors., +import java.util.logging.Logger;, +, +import static org.junit.Assert.*;, +, +	public Logger getParentLogger() {, +		return null;, +	}, +++ b/org.springframework.context/src/test/java/org/springframework/jndi/SimpleNamingContextTests.java, + * Copyright 2002-2011 the original author or authors., +import java.util.logging.Logger;, +, +import static org.junit.Assert.*;, +, +	public Logger getParentLogger() {, +		return null;, +	}, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/SqlRowSetResultSetExtractor.java, + * Copyright 2002-2011 the original author or authors., +import java.lang.reflect.Method;, +import org.springframework.util.ReflectionUtils;, + * by default, Sun's <code>com.sun.rowset.CachedRowSetImpl</code> class on Java 5 and 6,, + * or the <code>javax.sql.rowset.RowSetProvider</code> mechanism on Java 7 / JDBC 4.1., +	private static Object rowSetFactory = null;, +, +	private static Method createCachedRowSet = null;, +, +	static {, +		ClassLoader cl = SqlRowSetResultSetExtractor.class.getClassLoader();, +		try {, +			Class rowSetProviderClass = cl.loadClass("javax.sql.rowset.RowSetProvider");, +			Method newFactory = rowSetProviderClass.getMethod("newFactory");, +			rowSetFactory = ReflectionUtils.invokeMethod(newFactory, null);, +			createCachedRowSet = rowSetFactory.getClass().getMethod("createCachedRowSet");, +		}, +		catch (Exception ex) {, +			// JDBC 4.1 API not available - fall back to Sun CachedRowSetImpl, +		}, +	}, +, +, +		if (createCachedRowSet != null) {, +			// RowSetProvider.newFactory().createCachedRowSet();, +			return (CachedRowSet) ReflectionUtils.invokeJdbcMethod(createCachedRowSet, rowSetFactory);, +		}, +		else {, +	}, +++ b/org.springframework.context/src/test/java/org/springframework/jndi/SimpleNamingContextTests.java, + * Copyright 2002-2011 the original author or authors., +import java.util.logging.Logger;, +, +import static org.junit.Assert.*;, +, +	public Logger getParentLogger() {, +		return null;, +	}, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/SqlRowSetResultSetExtractor.java, + * Copyright 2002-2011 the original author or authors., +import java.lang.reflect.Method;, +import org.springframework.util.ReflectionUtils;, + * by default, Sun's <code>com.sun.rowset.CachedRowSetImpl</code> class on Java 5 and 6,, + * or the <code>javax.sql.rowset.RowSetProvider</code> mechanism on Java 7 / JDBC 4.1., +	private static Object rowSetFactory = null;, +, +	private static Method createCachedRowSet = null;, +, +	static {, +		ClassLoader cl = SqlRowSetResultSetExtractor.class.getClassLoader();, +		try {, +			Class rowSetProviderClass = cl.loadClass("javax.sql.rowset.RowSetProvider");, +			Method newFactory = rowSetProviderClass.getMethod("newFactory");, +			rowSetFactory = ReflectionUtils.invokeMethod(newFactory, null);, +			createCachedRowSet = rowSetFactory.getClass().getMethod("createCachedRowSet");, +		}, +		catch (Exception ex) {, +			// JDBC 4.1 API not available - fall back to Sun CachedRowSetImpl, +		}, +	}, +, +, +		if (createCachedRowSet != null) {, +			// RowSetProvider.newFactory().createCachedRowSet();, +			return (CachedRowSet) ReflectionUtils.invokeJdbcMethod(createCachedRowSet, rowSetFactory);, +		}, +		else {, +	}, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/AbstractDataSource.java, + * Copyright 2002-2011 the original author or authors., +import java.util.logging.Logger;, +, +	//---------------------------------------------------------------------, +	// Implementation of JDBC 4.1's getParentLogger method, +	//---------------------------------------------------------------------, +, +	public Logger getParentLogger() {, +		return Logger.getGlobal();, +	}, +, +++ b/org.springframework.context/src/test/java/org/springframework/jndi/SimpleNamingContextTests.java]