[+++ b/org.springframework.oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java, +		return xstream;, +		this.getXStream().setMode(mode);, +				this.getXStream().registerConverter((Converter) converters[i], i);, +				this.getXStream().registerConverter((SingleValueConverter) converters[i], i);, +			this.getXStream().alias(entry.getKey(), entry.getValue());, +			this.getXStream().useAttributeFor(type);, +				this.getXStream().useAttributeFor((String) entry.getKey(), (Class) entry.getValue());, +				this.getXStream().useAttributeFor((Class) entry.getKey(), (String) entry.getValue());, +	 * Specify implicit collection fields, as a Map consisting of <code>Class</code> instances, +	 * mapped to comma separated collection field names., +	public void setImplicitCollections(Map<Class<?>, String> implicitCollections) {, +		for (Map.Entry<Class<?>, String> entry : implicitCollections.entrySet()) {, +			String[] collectionFields = StringUtils.commaDelimitedListToStringArray(entry.getValue());, +			for (String collectionField : collectionFields) {, +				this.getXStream().addImplicitCollection(entry.getKey(), collectionField);, +	public void setOmittedFields(Map<Class<?>, String> omittedFields) {, +		for (Map.Entry<Class<?>, String> entry : omittedFields.entrySet()) {, +				this.getXStream().omitField(entry.getKey(), field);, +		this.getXStream().processAnnotations(annotatedClass);, +		this.getXStream().processAnnotations(annotatedClasses);, +			this.getXStream().marshal(graph, streamWriter);, +			return this.getXStream().unmarshal(streamReader);, +++ b/org.springframework.oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java, +		return xstream;, +		this.getXStream().setMode(mode);, +				this.getXStream().registerConverter((Converter) converters[i], i);, +				this.getXStream().registerConverter((SingleValueConverter) converters[i], i);, +			this.getXStream().alias(entry.getKey(), entry.getValue());, +			this.getXStream().useAttributeFor(type);, +				this.getXStream().useAttributeFor((String) entry.getKey(), (Class) entry.getValue());, +				this.getXStream().useAttributeFor((Class) entry.getKey(), (String) entry.getValue());, +	 * Specify implicit collection fields, as a Map consisting of <code>Class</code> instances, +	 * mapped to comma separated collection field names., +	public void setImplicitCollections(Map<Class<?>, String> implicitCollections) {, +		for (Map.Entry<Class<?>, String> entry : implicitCollections.entrySet()) {, +			String[] collectionFields = StringUtils.commaDelimitedListToStringArray(entry.getValue());, +			for (String collectionField : collectionFields) {, +				this.getXStream().addImplicitCollection(entry.getKey(), collectionField);, +	public void setOmittedFields(Map<Class<?>, String> omittedFields) {, +		for (Map.Entry<Class<?>, String> entry : omittedFields.entrySet()) {, +				this.getXStream().omitField(entry.getKey(), field);, +		this.getXStream().processAnnotations(annotatedClass);, +		this.getXStream().processAnnotations(annotatedClasses);, +			this.getXStream().marshal(graph, streamWriter);, +			return this.getXStream().unmarshal(streamReader);, +++ /dev/null, +++ b/org.springframework.oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java, +		return xstream;, +		this.getXStream().setMode(mode);, +				this.getXStream().registerConverter((Converter) converters[i], i);, +				this.getXStream().registerConverter((SingleValueConverter) converters[i], i);, +			this.getXStream().alias(entry.getKey(), entry.getValue());, +			this.getXStream().useAttributeFor(type);, +				this.getXStream().useAttributeFor((String) entry.getKey(), (Class) entry.getValue());, +				this.getXStream().useAttributeFor((Class) entry.getKey(), (String) entry.getValue());, +	 * Specify implicit collection fields, as a Map consisting of <code>Class</code> instances, +	 * mapped to comma separated collection field names., +	public void setImplicitCollections(Map<Class<?>, String> implicitCollections) {, +		for (Map.Entry<Class<?>, String> entry : implicitCollections.entrySet()) {, +			String[] collectionFields = StringUtils.commaDelimitedListToStringArray(entry.getValue());, +			for (String collectionField : collectionFields) {, +				this.getXStream().addImplicitCollection(entry.getKey(), collectionField);, +	public void setOmittedFields(Map<Class<?>, String> omittedFields) {, +		for (Map.Entry<Class<?>, String> entry : omittedFields.entrySet()) {, +				this.getXStream().omitField(entry.getKey(), field);, +		this.getXStream().processAnnotations(annotatedClass);, +		this.getXStream().processAnnotations(annotatedClasses);, +			this.getXStream().marshal(graph, streamWriter);, +			return this.getXStream().unmarshal(streamReader);, +++ /dev/null, +++ b/org.springframework.oxm/src/test/java/org/springframework/oxm/xstream/Flights.java, +package org.springframework.oxm.xstream;, +, +import java.util.ArrayList;, +import java.util.List;, +, +public class Flights {, +, +	private List<Flight> flights = new ArrayList<Flight>();, +, +	private List<String> strings = new ArrayList<String>();, +, +	public List<Flight> getFlights() {, +		return flights;, +	}, +, +	public void setFlights(List<Flight> flights) {, +		this.flights = flights;, +	}, +, +	public List<String> getStrings() {, +		return strings;, +	}, +, +	public void setStrings(List<String> strings) {, +		this.strings = strings;, +	}, +}, +++ b/org.springframework.oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java]