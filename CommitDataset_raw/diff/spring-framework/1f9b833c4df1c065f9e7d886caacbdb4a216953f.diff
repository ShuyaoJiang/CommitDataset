[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/WebSocketSession.java, + * A WebSocket session abstraction. Allows sending messages over a WebSocket, + * connection and closing it., +++ b/spring-websocket/src/main/java/org/springframework/web/socket/WebSocketSession.java, + * A WebSocket session abstraction. Allows sending messages over a WebSocket, + * connection and closing it., +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/HandlersBeanDefinitionParser.java, +import org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/WebSocketSession.java, + * A WebSocket session abstraction. Allows sending messages over a WebSocket, + * connection and closing it., +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/HandlersBeanDefinitionParser.java, +import org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +import org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/WebSocketSession.java, + * A WebSocket session abstraction. Allows sending messages over a WebSocket, + * connection and closing it., +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/HandlersBeanDefinitionParser.java, +import org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +import org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketNamespaceUtils.java, +import org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService;, +			RootBeanDefinition sockJsServiceDef = new RootBeanDefinition(DefaultSockJsService.class);, +			sockJsServiceDef.setSource(source);, +			Object scheduler;, +				scheduler = new RuntimeBeanReference(customTaskSchedulerName);, +				scheduler = registerSockJsTaskScheduler(sockJsSchedulerName, parserContext, source);, +			sockJsServiceDef.getConstructorArgumentValues().addIndexedArgumentValue(0, scheduler);, +				if (registerDefaultsAttribute.equals("false")) {, +					sockJsServiceDef.setBeanClass(TransportHandlingSockJsService.class);, +				sockJsServiceDef.getConstructorArgumentValues().addIndexedArgumentValue(1, transportHandlersList);, +				sockJsServiceDef.getPropertyValues().add("webSocketEnabled", Boolean.valueOf(attrValue));, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/WebSocketSession.java, + * A WebSocket session abstraction. Allows sending messages over a WebSocket, + * connection and closing it., +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/HandlersBeanDefinitionParser.java, +import org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +import org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketNamespaceUtils.java, +import org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService;, +			RootBeanDefinition sockJsServiceDef = new RootBeanDefinition(DefaultSockJsService.class);, +			sockJsServiceDef.setSource(source);, +			Object scheduler;, +				scheduler = new RuntimeBeanReference(customTaskSchedulerName);, +				scheduler = registerSockJsTaskScheduler(sockJsSchedulerName, parserContext, source);, +			sockJsServiceDef.getConstructorArgumentValues().addIndexedArgumentValue(0, scheduler);, +				if (registerDefaultsAttribute.equals("false")) {, +					sockJsServiceDef.setBeanClass(TransportHandlingSockJsService.class);, +				sockJsServiceDef.getConstructorArgumentValues().addIndexedArgumentValue(1, transportHandlersList);, +				sockJsServiceDef.getPropertyValues().add("webSocketEnabled", Boolean.valueOf(attrValue));, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/ServletWebSocketHandlerRegistration.java, +import org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/WebSocketSession.java, + * A WebSocket session abstraction. Allows sending messages over a WebSocket, + * connection and closing it., +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/HandlersBeanDefinitionParser.java, +import org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +import org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketNamespaceUtils.java, +import org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService;, +			RootBeanDefinition sockJsServiceDef = new RootBeanDefinition(DefaultSockJsService.class);, +			sockJsServiceDef.setSource(source);, +			Object scheduler;, +				scheduler = new RuntimeBeanReference(customTaskSchedulerName);, +				scheduler = registerSockJsTaskScheduler(sockJsSchedulerName, parserContext, source);, +			sockJsServiceDef.getConstructorArgumentValues().addIndexedArgumentValue(0, scheduler);, +				if (registerDefaultsAttribute.equals("false")) {, +					sockJsServiceDef.setBeanClass(TransportHandlingSockJsService.class);, +				sockJsServiceDef.getConstructorArgumentValues().addIndexedArgumentValue(1, transportHandlersList);, +				sockJsServiceDef.getPropertyValues().add("webSocketEnabled", Boolean.valueOf(attrValue));, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/ServletWebSocketHandlerRegistration.java, +import org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/SockJsServiceRegistration.java, +import org.springframework.util.Assert;, +import org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService;, +		TransportHandlingSockJsService service = createSockJsService();, +		service.setHandshakeInterceptors(this.interceptors);, +			service.setDisconnectDelay(this.disconnectDelay);, +			service.setWebSocketEnabled(this.webSocketEnabled);, +	private TransportHandlingSockJsService createSockJsService() {, +		if (!this.transportHandlers.isEmpty()) {, +			Assert.state(this.transportHandlerOverrides.isEmpty(),, +					"Specify either TransportHandlers or TransportHandler overrides, not both");, +			return new TransportHandlingSockJsService(this.taskScheduler, this.transportHandlers);, +		}, +		else {, +			return new DefaultSockJsService(this.taskScheduler, this.transportHandlerOverrides);, +		}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/WebSocketSession.java, + * A WebSocket session abstraction. Allows sending messages over a WebSocket, + * connection and closing it., +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/HandlersBeanDefinitionParser.java, +import org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +import org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketNamespaceUtils.java]