[+++ b/org.springframework.context/src/main/java/org/springframework/ui/format/FormatterRegistry.java, +	 * Adds a Formatter to this registry indexed by &lt;T&gt;., +	 * Adds a Formatter to this registry indexed by type., +	 * Use this add method when type differs from &lt;T&gt;., +	 * Calling getFormatter(type) returns a decorator that wraps the targetFormatter., +	 * On format, the decorator first coerses the instance of tType to &lt;T&gt;, then delegates to <code>targetFormatter</code> to format the value., +	 * @param type the object type, +	<T> void add(Class<?> type, Formatter<T> targetFormatter);, +	 * Get the Formatter for the type descriptor., +++ b/org.springframework.context/src/main/java/org/springframework/ui/format/FormatterRegistry.java, +	 * Adds a Formatter to this registry indexed by &lt;T&gt;., +	 * Adds a Formatter to this registry indexed by type., +	 * Use this add method when type differs from &lt;T&gt;., +	 * Calling getFormatter(type) returns a decorator that wraps the targetFormatter., +	 * On format, the decorator first coerses the instance of tType to &lt;T&gt;, then delegates to <code>targetFormatter</code> to format the value., +	 * @param type the object type, +	<T> void add(Class<?> type, Formatter<T> targetFormatter);, +	 * Get the Formatter for the type descriptor., +++ b/org.springframework.context/src/main/java/org/springframework/ui/format/GenericFormatterRegistry.java, +import java.util.LinkedList;, +import java.util.Set;, + * A generic implementation of {@link FormatterRegistry} suitable for use in most environments., + * @see #setConversionService(ConversionService), +	 * Sets the type conversion service that will be used to coerse objects to the types required for formatting., +	 * Defaults to a {@link DefaultConversionService}., +	/**, +	 * Registers the formatters in the map provided by type., +	 * JavaBean-friendly alternative to calling {@link #add(Class, Formatter)}., +	 * @param formatters the formatters map, +	 * @see #add(Class, Formatter), +	 */, +	public void setFormatters(Map<Class<?>, Formatter<?>> formatters) {, +		for (Map.Entry<Class<?>, Formatter<?>> entry : formatters.entrySet()) {, +			add(entry.getKey(), entry.getValue());, +		}, +	}, +, +	/**, +	 * Registers the annotation formatter factories in the set provided., +	 * JavaBean-friendly alternative to calling {@link #add(AnnotationFormatterFactory)}., +	 * @see #add(AnnotationFormatterFactory), +	 */, +	public void setAnnotationFormatterFactories(Set<AnnotationFormatterFactory> factories) {, +		for (AnnotationFormatterFactory factory : factories) {, +			add(factory);, +		}, +	}, +, +	public <T> void add(Class<?> type, Formatter<T> formatter) {, +		Class<?> formattedObjectType = getFormattedObjectType(formatter.getClass());, +		if (!conversionService.canConvert(formattedObjectType, type)) {, +			throw new IllegalArgumentException("Unable to register formatter " + formatter + " for type [" + type.getName() + "]; not able to convert from [" + formattedObjectType.getName() + "] to parse");, +		if (!conversionService.canConvert(type, formattedObjectType)) {, +			throw new IllegalArgumentException("Unable to register formatter " + formatter + " for type [" + type.getName() + "]; not able to convert to [" + formattedObjectType.getName() + "] to format");, +		}		, +		typeFormatters.put(type, formatter);, +		Formatter formatter = findFormatter(type);, +	private Formatter<?> findFormatter(Class<?> type) {, +		LinkedList<Class> classQueue = new LinkedList<Class>();, +		classQueue.addFirst(type);, +		while (!classQueue.isEmpty()) {, +			Class currentClass = classQueue.removeLast();, +			Formatter<?> formatter = typeFormatters.get(currentClass);, +			if (formatter != null) {, +				return formatter;, +			}, +			if (currentClass.getSuperclass() != null) {, +				classQueue.addFirst(currentClass.getSuperclass());, +			}, +			Class[] interfaces = currentClass.getInterfaces();, +			for (Class ifc : interfaces) {, +				classQueue.addFirst(ifc);, +			}, +		}, +		return null;, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/ui/format/FormatterRegistry.java, +	 * Adds a Formatter to this registry indexed by &lt;T&gt;., +	 * Adds a Formatter to this registry indexed by type., +	 * Use this add method when type differs from &lt;T&gt;., +	 * Calling getFormatter(type) returns a decorator that wraps the targetFormatter., +	 * On format, the decorator first coerses the instance of tType to &lt;T&gt;, then delegates to <code>targetFormatter</code> to format the value., +	 * @param type the object type, +	<T> void add(Class<?> type, Formatter<T> targetFormatter);, +	 * Get the Formatter for the type descriptor., +++ b/org.springframework.context/src/main/java/org/springframework/ui/format/GenericFormatterRegistry.java, +import java.util.LinkedList;, +import java.util.Set;, + * A generic implementation of {@link FormatterRegistry} suitable for use in most environments., + * @see #setConversionService(ConversionService), +	 * Sets the type conversion service that will be used to coerse objects to the types required for formatting., +	 * Defaults to a {@link DefaultConversionService}., +	/**, +	 * Registers the formatters in the map provided by type., +	 * JavaBean-friendly alternative to calling {@link #add(Class, Formatter)}., +	 * @param formatters the formatters map, +	 * @see #add(Class, Formatter), +	 */, +	public void setFormatters(Map<Class<?>, Formatter<?>> formatters) {]