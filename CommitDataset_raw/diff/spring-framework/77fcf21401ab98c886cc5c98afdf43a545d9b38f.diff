[+++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, +import org.springframework.util.StringUtils;, +	private boolean createXmlMapper = false;, +	private boolean findModulesViaServiceLoader = false;, +	 * Override the default {@link Locale} to use for formatting., +	 * Default value used is {@link Locale#getDefault()}., +	 * @param localeString the locale ID as a String representation, +	 * @since 4.1.5, +	 */, +	public Jackson2ObjectMapperBuilder locale(String localeString) {, +		this.locale = StringUtils.parseLocaleString(localeString);, +		return this;, +	}, +, +	/**, +	 * @param timeZoneString the zone ID as a String representation, +	public Jackson2ObjectMapperBuilder timeZone(String timeZoneString) {, +		this.timeZone = StringUtils.parseTimeZoneString(timeZoneString);, +, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, +import org.springframework.util.StringUtils;, +	private boolean createXmlMapper = false;, +	private boolean findModulesViaServiceLoader = false;, +	 * Override the default {@link Locale} to use for formatting., +	 * Default value used is {@link Locale#getDefault()}., +	 * @param localeString the locale ID as a String representation, +	 * @since 4.1.5, +	 */, +	public Jackson2ObjectMapperBuilder locale(String localeString) {, +		this.locale = StringUtils.parseLocaleString(localeString);, +		return this;, +	}, +, +	/**, +	 * @param timeZoneString the zone ID as a String representation, +	public Jackson2ObjectMapperBuilder timeZone(String timeZoneString) {, +		this.timeZone = StringUtils.parseTimeZoneString(timeZoneString);, +, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperFactoryBean.java, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, +import org.springframework.util.StringUtils;, +	private boolean createXmlMapper = false;, +	private boolean findModulesViaServiceLoader = false;, +	 * Override the default {@link Locale} to use for formatting., +	 * Default value used is {@link Locale#getDefault()}., +	 * @param localeString the locale ID as a String representation, +	 * @since 4.1.5, +	 */, +	public Jackson2ObjectMapperBuilder locale(String localeString) {, +		this.locale = StringUtils.parseLocaleString(localeString);, +		return this;, +	}, +, +	/**, +	 * @param timeZoneString the zone ID as a String representation, +	public Jackson2ObjectMapperBuilder timeZone(String timeZoneString) {, +		this.timeZone = StringUtils.parseTimeZoneString(timeZoneString);, +, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperFactoryBean.java, +++ b/spring-web/src/test/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilderTests.java, +import static org.hamcrest.Matchers.*;, +	@Test(expected = IllegalArgumentException.class), +		Jackson2ObjectMapperBuilder.json().timeZone(zoneId).build();, +, +		public void serialize(Integer value, JsonGenerator gen, SerializerProvider serializers) throws IOException {, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, +import org.springframework.util.StringUtils;, +	private boolean createXmlMapper = false;, +	private boolean findModulesViaServiceLoader = false;, +	 * Override the default {@link Locale} to use for formatting., +	 * Default value used is {@link Locale#getDefault()}., +	 * @param localeString the locale ID as a String representation, +	 * @since 4.1.5, +	 */, +	public Jackson2ObjectMapperBuilder locale(String localeString) {, +		this.locale = StringUtils.parseLocaleString(localeString);, +		return this;, +	}, +, +	/**, +	 * @param timeZoneString the zone ID as a String representation, +	public Jackson2ObjectMapperBuilder timeZone(String timeZoneString) {, +		this.timeZone = StringUtils.parseTimeZoneString(timeZoneString);, +, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperFactoryBean.java, +++ b/spring-web/src/test/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilderTests.java, +import static org.hamcrest.Matchers.*;, +	@Test(expected = IllegalArgumentException.class), +		Jackson2ObjectMapperBuilder.json().timeZone(zoneId).build();, +, +		public void serialize(Integer value, JsonGenerator gen, SerializerProvider serializers) throws IOException {, +++ b/spring-web/src/test/java/org/springframework/http/converter/json/Jackson2ObjectMapperFactoryBeanTests.java, +import static org.hamcrest.Matchers.*;, +		this.factory.setTimeZone(TimeZone.getTimeZone(zoneId));, +		this.factory.setTimeZone(TimeZone.getTimeZone(zoneId));, +, +, +		public void serialize(Integer value, JsonGenerator gen, SerializerProvider serializers) throws IOException {]