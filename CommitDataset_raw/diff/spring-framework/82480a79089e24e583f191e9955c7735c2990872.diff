[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java, +	 * Return a builder for a new {@code WebClient} with properties replicated, +	 * from the current {@code WebClient} instance, but without affecting it., +	 * @see #builder(), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java, +	 * Return a builder for a new {@code WebClient} with properties replicated, +	 * from the current {@code WebClient} instance, but without affecting it., +	 * @see #builder(), +++ b/src/docs/asciidoc/web/webflux-webclient.adoc, +== Client Filters, +You can register an `ExchangeFilterFunction` in the `WebClient.Builder` to intercept and, +possibly modify requests performed through the client:, +, +, +This can be used for cross-cutting concerns such as authentication. The example below uses, +a filter for basic authentication through a static factory method:, +		.filter(basicAuthentication("user", "password")), +Filters apply globally to every request. To change how a filter's behavior for a specific, +request, you can add request attributes to the `ClientRequest` that can then be accessed, +by all filters in the chain:, +WebClient client = WebClient.builder(), +		.filter((request, next) -> {, +			Optional<Object> usr = request.attribute("myAttribute");, +			// ..., +		}), +		.build();, +, +client.get().uri("http://example.org/"), +		.attribute("myAttribute", "..."), +		.retrieve(), +		.bodyToMono(Void.class);, +, +	}, +----, +, +You can also replicate an existing `WebClient`, and insert new filters or remove already, +registered filters. In the example below, a basic authentication filter is inserted at, +index 0:, +, +[source,java,intent=0], +[subs="verbatim,quotes"], +----, +, +// static import of ExchangeFilterFunctions.basicAuthentication, +, +WebClient client = webClient.mutate(), +		.filters(filterList -> {, +			filterList.add(0, basicAuthentication("user", "password"));, +		})]