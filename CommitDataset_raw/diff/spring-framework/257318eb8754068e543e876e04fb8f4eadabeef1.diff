[+++ /dev/null, +++ /dev/null, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java, + * event-listener read APIs and Reactive Streams., + *, + * <p>Specifically a base class for reading from the HTTP request body with, + * Servlet 3.1 non-blocking I/O and Undertow XNIO as well as handling incoming, + * WebSocket messages with standard Java WebSocket (JSR-356), Jetty, and, + * Undertow., + * @author Rossen Stoyanchev, +	// Publisher implementation..., +, +, +	// Listener delegation methods..., +, +	 * Listeners can call this to notify when reading is possible., +	 * Listeners can call this to notify when all data has been read., +	 * Listeners can call this to notify when a read error has occurred., +, +	protected abstract void checkOnDataAvailable();, +, +	 * Reads a data from the input, if possible., +	 * @return the data that was read; or {@code null}, +	 */, +	protected abstract T read() throws IOException;, +, +, +	/**, +	 * Read and publish data from the input. Continue till there is no more, +	 * demand or there is no more data to be read., +	 * Concurrent subscription bound to 0 and Long.MAX_VALUE., +, +++ /dev/null, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java, + * event-listener read APIs and Reactive Streams., + *, + * <p>Specifically a base class for reading from the HTTP request body with, + * Servlet 3.1 non-blocking I/O and Undertow XNIO as well as handling incoming, + * WebSocket messages with standard Java WebSocket (JSR-356), Jetty, and, + * Undertow., + * @author Rossen Stoyanchev, +	// Publisher implementation..., +, +, +	// Listener delegation methods..., +, +	 * Listeners can call this to notify when reading is possible., +	 * Listeners can call this to notify when all data has been read., +	 * Listeners can call this to notify when a read error has occurred., +, +	protected abstract void checkOnDataAvailable();, +, +	 * Reads a data from the input, if possible., +	 * @return the data that was read; or {@code null}, +	 */, +	protected abstract T read() throws IOException;, +, +, +	/**, +	 * Read and publish data from the input. Continue till there is no more, +	 * demand or there is no more data to be read., +	 * Concurrent subscription bound to 0 and Long.MAX_VALUE., +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerServerHttpResponse.java, +	protected final Mono<Void> writeAndFlushWithInternal(, +			Publisher<? extends Publisher<? extends DataBuffer>> body) {, +, +			Processor<? super Publisher<? extends DataBuffer>, Void> processor = createBodyFlushProcessor();, +				body.subscribe(processor);, +				processor.subscribe(subscriber);, +++ /dev/null, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java, + * event-listener read APIs and Reactive Streams., + *, + * <p>Specifically a base class for reading from the HTTP request body with, + * Servlet 3.1 non-blocking I/O and Undertow XNIO as well as handling incoming, + * WebSocket messages with standard Java WebSocket (JSR-356), Jetty, and, + * Undertow., + * @author Rossen Stoyanchev, +	// Publisher implementation..., +, +, +	// Listener delegation methods..., +, +	 * Listeners can call this to notify when reading is possible., +	 * Listeners can call this to notify when all data has been read., +	 * Listeners can call this to notify when a read error has occurred., +, +	protected abstract void checkOnDataAvailable();, +, +	 * Reads a data from the input, if possible., +	 * @return the data that was read; or {@code null}, +	 */, +	protected abstract T read() throws IOException;, +, +, +	/**, +	 * Read and publish data from the input. Continue till there is no more, +	 * demand or there is no more data to be read., +	 * Concurrent subscription bound to 0 and Long.MAX_VALUE.]