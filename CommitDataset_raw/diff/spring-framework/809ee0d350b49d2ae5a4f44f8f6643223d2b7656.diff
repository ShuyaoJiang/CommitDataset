[+++ b/spring-beans/src/main/java/org/springframework/beans/MutablePropertyValues.java, + * Copyright 2002-2014 the original author or authors., +	 * Clear the "processed" registration of the given property, if any., +	 * @since 3.2.13, +	 */, +	public void clearProcessedProperty(String propertyName) {, +		if (this.processedProperties != null) {, +			this.processedProperties.remove(propertyName);, +		}, +	}, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/MutablePropertyValues.java, + * Copyright 2002-2014 the original author or authors., +	 * Clear the "processed" registration of the given property, if any., +	 * @since 3.2.13, +	 */, +	public void clearProcessedProperty(String propertyName) {, +		if (this.processedProperties != null) {, +			this.processedProperties.remove(propertyName);, +		}, +	}, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +			InjectionMetadata metadata = findAutowiringMetadata(beanName, beanType, null);, +		InjectionMetadata metadata = findAutowiringMetadata(beanName, bean.getClass(), pvs);, +		InjectionMetadata metadata = findAutowiringMetadata(clazz.getName(), clazz, null);, +	private InjectionMetadata findAutowiringMetadata(String beanName, Class<?> clazz, PropertyValues pvs) {, +					if (metadata != null) {, +						metadata.clear(pvs);, +					}, +++ b/spring-beans/src/main/java/org/springframework/beans/MutablePropertyValues.java, + * Copyright 2002-2014 the original author or authors., +	 * Clear the "processed" registration of the given property, if any., +	 * @since 3.2.13, +	 */, +	public void clearProcessedProperty(String propertyName) {, +		if (this.processedProperties != null) {, +			this.processedProperties.remove(propertyName);, +		}, +	}, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +			InjectionMetadata metadata = findAutowiringMetadata(beanName, beanType, null);, +		InjectionMetadata metadata = findAutowiringMetadata(beanName, bean.getClass(), pvs);, +		InjectionMetadata metadata = findAutowiringMetadata(clazz.getName(), clazz, null);, +	private InjectionMetadata findAutowiringMetadata(String beanName, Class<?> clazz, PropertyValues pvs) {, +					if (metadata != null) {, +						metadata.clear(pvs);, +					}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InjectionMetadata.java, + * Copyright 2002-2014 the original author or authors., +	private static final Log logger = LogFactory.getLog(InjectionMetadata.class);, +, +					logger.debug("Processing injected element of bean '" + beanName + "': " + element);, +	/**, +	 * @since 3.2.13, +	 */, +	public void clear(PropertyValues pvs) {, +		Collection<InjectedElement> elementsToIterate =, +				(this.checkedElements != null ? this.checkedElements : this.injectedElements);, +		if (!elementsToIterate.isEmpty()) {, +			for (InjectedElement element : elementsToIterate) {, +				element.clearPropertySkipping(pvs);, +			}, +		}, +	}, +, +		 * Check whether this injector's property needs to be skipped due to, +		 * @since 3.2.13, +		 */, +		protected void clearPropertySkipping(PropertyValues pvs) {, +			if (pvs == null) {, +				return;, +			}, +			synchronized (pvs) {, +				if (Boolean.FALSE.equals(this.skip) && this.pd != null && pvs instanceof MutablePropertyValues) {, +					((MutablePropertyValues) pvs).clearProcessedProperty(this.pd.getName());, +				}, +			}, +		}, +, +		/**, +++ b/spring-beans/src/main/java/org/springframework/beans/MutablePropertyValues.java, + * Copyright 2002-2014 the original author or authors., +	 * Clear the "processed" registration of the given property, if any., +	 * @since 3.2.13, +	 */, +	public void clearProcessedProperty(String propertyName) {, +		if (this.processedProperties != null) {, +			this.processedProperties.remove(propertyName);, +		}, +	}, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +			InjectionMetadata metadata = findAutowiringMetadata(beanName, beanType, null);, +		InjectionMetadata metadata = findAutowiringMetadata(beanName, bean.getClass(), pvs);]