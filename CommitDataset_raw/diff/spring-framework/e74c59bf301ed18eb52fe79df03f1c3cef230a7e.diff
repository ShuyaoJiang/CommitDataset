[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java, +import java.util.Map;, +import org.springframework.http.codec.ServerHttpMessageReader;, +		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParameter);, +		ReactiveAdapter adapter = getAdapterRegistry().getAdapterTo(bodyType.resolve());, +, +			Map<String, Object> hints = (reader instanceof ServerHttpMessageReader ?, +						((ServerHttpMessageReader<?>)reader).resolveReadHints(bodyType, elementType,, +								mediaType, exchange.getRequest()) : Collections.emptyMap());, +, +			if (reader.canRead(elementType, mediaType, hints)) {, +, +					Flux<?> flux = reader.read(elementType, request, hints), +					Mono<?> mono = reader.readMono(elementType, request, hints), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java, +import java.util.Map;, +import org.springframework.http.codec.ServerHttpMessageReader;, +		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParameter);, +		ReactiveAdapter adapter = getAdapterRegistry().getAdapterTo(bodyType.resolve());, +, +			Map<String, Object> hints = (reader instanceof ServerHttpMessageReader ?, +						((ServerHttpMessageReader<?>)reader).resolveReadHints(bodyType, elementType,, +								mediaType, exchange.getRequest()) : Collections.emptyMap());, +, +			if (reader.canRead(elementType, mediaType, hints)) {, +, +					Flux<?> flux = reader.read(elementType, request, hints), +					Mono<?> mono = reader.readMono(elementType, request, hints), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +import java.util.Map;, +import org.springframework.http.codec.ServerHttpMessageWriter;, +	protected Mono<Void> writeBody(Object body, MethodParameter bodyParameter, ServerWebExchange exchange) {, +		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParameter);, +		ReactiveAdapter adapter = getAdapterRegistry().getAdapterFrom(bodyType.resolve(), body);, +					bodyType.getGeneric(0);, +			elementType = bodyType;, +				Map<String, Object> hints = (messageWriter instanceof ServerHttpMessageWriter ?, +						((ServerHttpMessageWriter<?>)messageWriter).resolveWriteHints(bodyType, elementType,, +								bestMediaType, exchange.getRequest()) : Collections.emptyMap());, +				if (messageWriter.canWrite(elementType, bestMediaType, hints)) {, +, +							bestMediaType, response, hints);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java, +import java.util.Map;, +import org.springframework.http.codec.ServerHttpMessageReader;, +		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParameter);, +		ReactiveAdapter adapter = getAdapterRegistry().getAdapterTo(bodyType.resolve());, +, +			Map<String, Object> hints = (reader instanceof ServerHttpMessageReader ?, +						((ServerHttpMessageReader<?>)reader).resolveReadHints(bodyType, elementType,, +								mediaType, exchange.getRequest()) : Collections.emptyMap());, +, +			if (reader.canRead(elementType, mediaType, hints)) {, +, +					Flux<?> flux = reader.read(elementType, request, hints), +					Mono<?> mono = reader.readMono(elementType, request, hints), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +import java.util.Map;, +import org.springframework.http.codec.ServerHttpMessageWriter;, +	protected Mono<Void> writeBody(Object body, MethodParameter bodyParameter, ServerWebExchange exchange) {, +		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParameter);, +		ReactiveAdapter adapter = getAdapterRegistry().getAdapterFrom(bodyType.resolve(), body);, +					bodyType.getGeneric(0);, +			elementType = bodyType;, +				Map<String, Object> hints = (messageWriter instanceof ServerHttpMessageWriter ?, +						((ServerHttpMessageWriter<?>)messageWriter).resolveWriteHints(bodyType, elementType,, +								bestMediaType, exchange.getRequest()) : Collections.emptyMap());, +				if (messageWriter.canWrite(elementType, bestMediaType, hints)) {, +, +							bestMediaType, response, hints);, +++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractServerHttpMessageReader.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.http.codec;, +, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +, +import reactor.core.publisher.Flux;, +import reactor.core.publisher.Mono;, +, +import org.springframework.core.MethodParameter;, +import org.springframework.core.ResolvableType;, +import org.springframework.http.MediaType;, +import org.springframework.http.ReactiveHttpInputMessage;]