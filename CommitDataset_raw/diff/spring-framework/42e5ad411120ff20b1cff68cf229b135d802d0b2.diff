[+++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, + * Factory to create a {@code ContentNegotiationManager} and configure it with, + * one or more {@link ContentNegotiationStrategy} instances via simple setters., + * The following table shows setters, resulting strategy instances, and if in, + * use by default:, + * <table>, + * <tr>, + *     <td>{@link #setFavorPathExtension favorPathExtension}</td>, + *     <td>{@link PathExtensionContentNegotiationStrategy}</td>, + *     <td>Yes</td>, + * </tr>, + * <tr>, + *     <td>{@link #setFavorParameter favorParameter}</td>, + *     <td>{@link ParameterContentNegotiationStrategy}</td>, + *     <td>-</td>, + * </tr>, + * <tr>, + *     <td>{@link #setIgnoreAcceptHeader ignoreAcceptHeader}</td>, + *     <td>{@link HeaderContentNegotiationStrategy}</td>, + *     <td>Yes</td>, + * </tr>, + * <tr>, + *     <td>{@link #setDefaultContentType defaultContentType}</td>, + *     <td>{@link FixedContentNegotiationStrategy}</td>, + *     <td>-</td>, + * </tr>, + * <tr>, + *     <td>{@link #setDefaultContentTypeStrategy defaultContentTypeStrategy}</td>, + *     <td>{@link ContentNegotiationStrategy}</td>, + *     <td>-</td>, + * </tr>, + * </table>, + *, + * <p>The order in which strategies are configured is fixed. Setters may only, + * turn individual strategies on or off. If you need a custom order for any, + * reason simply instantiate {@code ContentNegotiationManager} directly., + *, + * <p>For the path extension and parameter strategies you may explicitly add, + * {@link #setMediaTypes MediaType mappings}. This will be used to resolve path, + * extensions or a parameter value such as "json" to a media type such as, + * "application/json"., + *, + * <p>The path extension strategy will also use {@link ServletContext#getMimeType}, + * and the Java Activation framework (JAF), if available, to resolve a path, + * extension to a MediaType. You may {@link #setUseJaf suppress} the use of JAF., +	 * Whether the path extension in the URL path should be used to determine, +	 * the requested media type., +	 * <p>By default this is set to {@code true} in which case a request, +	 * {@code "application/pdf"} regardless of the 'Accept' header., +	 * Add mappings from keys, extracted from a path extension or a query, +	 * parameter, to a MediaType. This is required in order for the parameter, +	 * strategy to work. The path extension strategy will also try, +	 * {@link ServletContext#getMimeType} and JAF if it is present and is not, +	 * suppressed via {@link #setUseJaf}., +	 * @param mediaTypes media type mappings, +				MediaType mediaType = MediaType.valueOf((String) entry.getValue());, +				this.mediaTypes.put(extension, mediaType);, +	 * An alternative to {@link #setMediaTypes} for use in Java code., +	 * @see #setMediaTypes, +	 * @see #addMediaTypes, +	 * An alternative to {@link #setMediaTypes} for use in Java code., +	 * @see #setMediaTypes, +	 * @see #addMediaType, +	 * Whether to ignore requests with path extension that cannot be resolved, +	 * to any media type. Setting this to {@code false} will result in an, +	 * {@code HttpMediaTypeNotAcceptableException} if there is no match., +	public void setIgnoreUnknownPathExtensions(boolean ignore) {, +		this.ignoreUnknownPathExtensions = ignore;, +	 * When {@link #setFavorPathExtension favorPathExtension} is set, this, +	 * property determines whether to allow use of JAF (Java Activation Framework), +	 * to resolve a path extension to a specific MediaType., +	 * <p>By default this is not set in which case, +	 * {@code PathExtensionContentNegotiationStrategy} will use JAF if available., +	 * Whether a request parameter ("format" by default) should be used to, +	 * determine the requested media type. For this option to work you must, +	 * register {@link #setMediaTypes media type mappings}., +	 * <p>By default this is set to {@code false}., +	 * Set the query parameter name to use when {@link #setFavorParameter} is on., +	 * Whether to disable checking the 'Accept' request header., +	 * Set the default content type to use when no content type is requested., +	 * <p>By default this is not set., +	 * @see #setDefaultContentTypeStrategy, +	 * Set a custom {@link ContentNegotiationStrategy} to use to determine, +	 * the content type to use when no content type is requested., +	 * @see #setDefaultContentType, +	/**, +	 * Invoked by Spring to inject the ServletContext., +	 */, +			strategies.add(this.defaultNegotiationStrategy);, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, + * Factory to create a {@code ContentNegotiationManager} and configure it with, + * one or more {@link ContentNegotiationStrategy} instances via simple setters., + * The following table shows setters, resulting strategy instances, and if in, + * use by default:, + * <table>, + * <tr>, + *     <td>{@link #setFavorPathExtension favorPathExtension}</td>, + *     <td>{@link PathExtensionContentNegotiationStrategy}</td>, + *     <td>Yes</td>, + * </tr>]