[+++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractCodecConfigurer.java, +import java.util.Collections;, +import org.springframework.core.codec.StringDecoder;, +, +	public void registerDefaults(boolean shouldRegister) {, +		this.defaultCodecs.setRegisterDefaults(shouldRegister);, +		result.addAll(this.defaultCodecs.getTypedReaders());, +		result.addAll(this.customCodecs.getTypedReaders());, +		result.addAll(this.defaultCodecs.getObjectReaders());, +		result.addAll(this.customCodecs.getObjectReaders());, +		result.addAll(this.defaultCodecs.getCatchAllReaders());, +		result.addAll(this.defaultCodecs.getTypedWriters());, +		result.addAll(this.customCodecs.getTypedWriters());, +		result.addAll(this.defaultCodecs.getObjectWriters());, +		result.addAll(this.customCodecs.getObjectWriters());, +		result.addAll(this.defaultCodecs.getCatchAllWriters());, +		private boolean registerDefaults = true;, +		private Jackson2JsonDecoder jackson2Decoder;, +		private Jackson2JsonEncoder jackson2Encoder;, +, +, +		public void setRegisterDefaults(boolean registerDefaults) {, +			this.registerDefaults = registerDefaults;, +		}, +, +		public boolean shouldRegisterDefaults() {, +			return this.registerDefaults;, +		}, +			this.jackson2Decoder = decoder;, +		}, +, +		protected Jackson2JsonDecoder jackson2Decoder() {, +			return this.jackson2Decoder != null ? this.jackson2Decoder : new Jackson2JsonDecoder();, +			this.jackson2Encoder = encoder;, +		protected Jackson2JsonEncoder jackson2Encoder() {, +			return this.jackson2Encoder != null ? this.jackson2Encoder : new Jackson2JsonEncoder();, +		// Readers..., +, +		public List<HttpMessageReader<?>> getTypedReaders() {, +			if (!this.registerDefaults) {, +				return Collections.emptyList();, +			}, +			List<HttpMessageReader<?>> result = new ArrayList<>();, +			result.add(new DecoderHttpMessageReader<>(new ByteArrayDecoder()));, +			result.add(new DecoderHttpMessageReader<>(new ByteBufferDecoder()));, +			result.add(new DecoderHttpMessageReader<>(new DataBufferDecoder()));, +			result.add(new DecoderHttpMessageReader<>(new ResourceDecoder()));, +			result.add(new DecoderHttpMessageReader<>(StringDecoder.textPlainOnly(splitTextOnNewLine())));, +			return result;, +		protected abstract boolean splitTextOnNewLine();, +		public List<HttpMessageReader<?>> getObjectReaders() {, +			if (!this.registerDefaults) {, +				return Collections.emptyList();, +			}, +			List<HttpMessageReader<?>> result = new ArrayList<>();, +				result.add(new DecoderHttpMessageReader<>(new Jaxb2XmlDecoder()));, +				result.add(new DecoderHttpMessageReader<>(jackson2Decoder()));, +			return result;, +		public List<HttpMessageReader<?>> getCatchAllReaders() {, +			if (!this.registerDefaults) {, +				return Collections.emptyList();, +			}, +			List<HttpMessageReader<?>> result = new ArrayList<>();, +			result.add(new DecoderHttpMessageReader<>(StringDecoder.allMimeTypes(splitTextOnNewLine())));, +			return result;, +		}, +, +		// Writers..., +, +		public List<HttpMessageWriter<?>> getTypedWriters() {, +			if (!this.registerDefaults) {, +				return Collections.emptyList();, +			}, +			List<HttpMessageWriter<?>> result = new ArrayList<>();, +			result.add(new EncoderHttpMessageWriter<>(new ByteArrayEncoder()));, +			result.add(new EncoderHttpMessageWriter<>(new ByteBufferEncoder()));, +			result.add(new EncoderHttpMessageWriter<>(new DataBufferEncoder()));, +			result.add(new ResourceHttpMessageWriter());, +			result.add(new EncoderHttpMessageWriter<>(CharSequenceEncoder.textPlainOnly()));, +			return result;, +		}, +, +		public List<HttpMessageWriter<?>> getObjectWriters() {, +			if (!this.registerDefaults) {, +				return Collections.emptyList();, +			}, +			List<HttpMessageWriter<?>> result = new ArrayList<>();, +				result.add(new EncoderHttpMessageWriter<>(new Jaxb2XmlEncoder()));, +				result.add(new EncoderHttpMessageWriter<>(jackson2Encoder()));, +			}, +			return result;, +		}, +, +		public List<HttpMessageWriter<?>> getCatchAllWriters() {, +			if (!this.registerDefaults) {, +				return Collections.emptyList();, +			}, +			List<HttpMessageWriter<?>> result = new ArrayList<>();, +			result.add(new EncoderHttpMessageWriter<>(CharSequenceEncoder.allMimeTypes()));, +			return result;]