[+++ b/org.springframework.context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java, +	 * on refresh if the context is not active yet, or on the fly with the, +	 * current event multicaster in case of a context that is already active., +++ b/org.springframework.context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java, +	 * on refresh if the context is not active yet, or on the fly with the, +	 * current event multicaster in case of a context that is already active., +++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +import java.util.Collection;, +import java.util.LinkedHashSet;, +import java.util.Set;, +	private Set<ApplicationListener> applicationListeners = new LinkedHashSet<ApplicationListener>();, +		if (isActive()) {, +			addListener(listener);, +		}, +		else {, +	}, +	public Collection<ApplicationListener> getApplicationListeners() {, +		for (String lisName : listenerBeanNames) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java, +	 * on refresh if the context is not active yet, or on the fly with the, +	 * current event multicaster in case of a context that is already active., +++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +import java.util.Collection;, +import java.util.LinkedHashSet;, +import java.util.Set;, +	private Set<ApplicationListener> applicationListeners = new LinkedHashSet<ApplicationListener>();, +		if (isActive()) {, +			addListener(listener);, +		}, +		else {, +	}, +	public Collection<ApplicationListener> getApplicationListeners() {, +		for (String lisName : listenerBeanNames) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/support/ApplicationContextAwareProcessor.java, +import java.util.Map;, +import java.util.concurrent.ConcurrentHashMap;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.beans.factory.support.MergedBeanDefinitionPostProcessor;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +import org.springframework.context.ApplicationListener;, +class ApplicationContextAwareProcessor implements MergedBeanDefinitionPostProcessor {, +, +	private final Log logger = LogFactory.getLog(getClass());, +	private final Map<String, Boolean> singletonNames = new ConcurrentHashMap<String, Boolean>();, +, +	public void postProcessMergedBeanDefinition(RootBeanDefinition beanDefinition, Class beanType, String beanName) {, +		if (!this.applicationContext.containsBean(beanName) && beanDefinition.isSingleton()) {, +			this.singletonNames.put(beanName, Boolean.TRUE);, +		}, +	}, +, +	public Object postProcessBeforeInitialization(final Object bean, final String beanName) throws BeansException {, +					doProcess(bean, beanName);, +			doProcess(bean, beanName);, +	private void doProcess(Object bean, String beanName) {, +, +		if (bean instanceof ApplicationListener) {, +			if (!this.applicationContext.containsBean(beanName)) {, +				// not a top-level bean - not detected as a listener by getBeanNamesForType retrieval, +				Boolean flag = this.singletonNames.get(beanName);, +				if (Boolean.TRUE.equals(flag)) {, +					// inner singleton bean: register on the fly, +					this.applicationContext.addApplicationListener((ApplicationListener) bean);, +				}, +				else if (flag == null) {, +					// inner bean with other scope - can't reliably process events, +					if (logger.isWarnEnabled()) {, +						logger.warn("Inner bean '" + beanName + "' implements ApplicationListener interface " +, +								"but is not reachable for event multicasting by its containing ApplicationContext " +, +								"because it does not have singleton scope. Only top-level listener beans are allowed " +, +								"to be of non-singleton scope.");, +					}, +					this.singletonNames.put(beanName, Boolean.FALSE);, +				}, +			}, +		}, +++ b/org.springframework.context/src/main/java/org/springframework/context/ConfigurableApplicationContext.java, +	 * on refresh if the context is not active yet, or on the fly with the, +	 * current event multicaster in case of a context that is already active., +++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +import java.util.Collection;, +import java.util.LinkedHashSet;, +import java.util.Set;, +	private Set<ApplicationListener> applicationListeners = new LinkedHashSet<ApplicationListener>();, +		if (isActive()) {, +			addListener(listener);, +		}, +		else {, +	}, +	public Collection<ApplicationListener> getApplicationListeners() {, +		for (String lisName : listenerBeanNames) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/support/ApplicationContextAwareProcessor.java, +import java.util.Map;, +import java.util.concurrent.ConcurrentHashMap;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.beans.factory.support.MergedBeanDefinitionPostProcessor;]