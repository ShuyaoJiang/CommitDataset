[+++ b/src/asciidoc/index.adoc, +* New application context events `SessionSubscribeEvent` and `SessionUnsubscribeEvent` published, +* Close STOMP/WebSocket connections that have no activity within 60 seconds after the, +  WebSocket session is established. See https://jira.spring.io/browse/SPR-11884[SPR-11884]., +<<websocket-server>> reviews the Spring WebSocket API on the server-side, while, +<<websocket-fallback>> explains the SockJS protocol and shows how to configure, +and use it., +techniques to make the web more interactive including Java Applets, XMLHttpRequest,, +A proper introduction to the WebSocket protocol is beyond the scope of this, +Furthermore, some restrictive proxies may be configured in ways that either, +preclude the attempt to do an HTTP upgrade or otherwise break connection after, +some time because it has remained opened for too long. A good overview on this, +topic from Peter Lubbers is available in the InfoQ article, +Therefore to build a WebSocket application today, fallback options are required in, +order to simulate the WebSocket API where necessary. The Spring Framework provides, +such transparent fallback options based on the https://github.com/sockjs/sockjs-protocol[SockJS protocol]., +These options can be enabled through configuration and do not require modifying the, +application otherwise., +such as `Message`, `MessageChannel`, `MessageHandler`, and others that can serve as, +During the handshake, the client and server can use the header, +format that both the client and server can understand. That format can be custom,, +The Spring Framework provides support for using, +reasonable to ask, "When is it appropriate to use?"., +The best fit for WebSocket is in web applications where the client and, +server need to exchange events at high frequency and with low latency. Prime, +candidates include, but are not limited to, applications in finance, games,, +delays and also need to exchange a wide variety of messages at a high, +For example, a news or social feed that shows breaking news as it becomes, +works reliably and is comparable in terms of efficiency (again assuming the volume of, +HTTP and REST. The answer is going to vary by application; however, it is likely, +The Spring Framework allows `@Controller` and `@RestController` classes to have both, +WebSocket handler to a specific URL:, +Neither of these mechanism makes it possible to use a single "front controller", +A secondary consideration is that Servlet containers with JSR-356 support are expected, +to perform a `ServletContainerInitializer` (SCI) scan that can slow down application, +startup, in some cases dramatically. If a significant impact is observed after an, +through the use of the `<absolute-ordering />` element in `web.xml`:, +For Tomcat, WildFly, and GlassFish add a `ServletServerContainerFactoryBean` to your, +As of Spring Framework 4.1.5, the default behavior for WebSocket and SockJS is to accept, +only _same origin_ requests. It is also possible to allow _all_ or a specified list of origins., +of clients from modifying the `Origin` header value (see, + * Allow a specified list of origins: each provided _allowed origin_ must start with `http://`, +   transports are disabled. As a consequence, IE6 through IE9 are not supported when this, + * Allow all origins: to enable this mode, you should provide `*` as the allowed origin, +   value. In this mode, all transports are available., +WebSocket and SockJS allowed origins can be configured as shown bellow:, +To learn more, run an example in a browser and watch the HTTP requests., +`TRACE` logging for `org.springframework.web.socket`., +SockJS is easy to enable through Java configuration:, +The SockJS client supports Ajax/XHR streaming in IE 8 and 9 via Microsoft's, +types (not just Java ones), it needs to know whether cookies matter., +that browsers can be instructed to block the use of IFrames on a given page by, +of the Spring Security documentation for details on how to configure the, +similar option via the `<websocket:sockjs>` element:, +from concluding a connection is hung. The Spring SockJS configuration has a property, +A specific issue is that the Servlet API does not provide notifications for a client, +However, Servlet containers raise an exception on subsequent attempts to write, +to the response. Since Spring's SockJS Service supports sever-sent heartbeats (every, +time period or earlier if messages are sent more frequently., +a minimal message using the dedicated log category `DISCONNECTED_CLIENT_LOG_CATEGORY`, +It is also possible to disable the addition of these CORS headers via the, +SockJS endpoint prefix thus letting Spring's `SockJsService` handle it., +using a browser. This can be especially useful when there is a need for bidirectional, +for testing purposes, for example to simulate a large number of concurrent users., +* `RestTemplateXhrTransport` uses Spring's `RestTemplate` for HTTP requests., +* `JettyXhrTransport` uses Jetty's `HttpClient` for HTTP requests., +`SockJsMessageCodec` and configure it on the `SockJsClient`., +but leaves their content undefined. Instead it's expected that the client and, +the message content. Using a sub-protocol is optional but either way the client, +text-oriented messaging protocol that was originally created for scripting languages, +(such as Ruby, Python, and Perl) to connect to enterprise message brokers. It is, +designed to address a subset of commonly used patterns in messaging protocols. STOMP, +can be used over any reliable 2-way streaming network protocol such as TCP and WebSocket., +STOMP is a frame based protocol with frames modeled on HTTP. This is the, +require a +"destination"+ header that indicates where to send a message, or likewise, +be any string, and it's entirely up to STOMP servers to define the semantics and, +the syntax of the destinations that they support. It is very common, however, for, +(__one-to-many__) and `"/queue/"` implies point-to-point (__one-to-one__) message, +It is important to know that a server cannot send unsolicited messages. All messages, +from a server must be in response to a specific client subscription, and the, ++"subscription-id"+ header of the server message must match the +"id"+ header of the, +client subscription., +The following summarizes the benefits for an application of using STOMP over WebSocket:, +* The ability to interpret, route, and process messages on both the client and server-side, +* The option to plug in a message broker -- RabbitMQ, ActiveMQ, many others -- to broadcast messages (explained later), +options. The endpoint is available for clients to connect to a URL path `/app/portfolio`:, +Note that the `stompClient` above does not need to specify `login` and `passcode` headers., +a message with headers and a payload., +asynchronously via a thread pool., +value is sent as the payload of a Spring `Message` to the `"brokerChannel"`., +the help of a messaging template. For example, an HTTP POST handling method, +can broadcast a message to connected clients, or a service component may, +The following explains the message flow for the above example:, +time, and the return value is passed through the "brokerChannel" as a message, +* The broker in turn broadcasts messages to subscribers, and they pass through, +Payload method arguments annotated with validation annotations (like `@Validated`) will, +the same destination as the client message but using the prefix `"/topic"` by, +What if you want to send messages to connected clients from any part of the, +The built-in, simple message broker handles subscription requests from clients,, +STOMP commands (e.g. no acks, receipts, etc.), relies on a simple message]