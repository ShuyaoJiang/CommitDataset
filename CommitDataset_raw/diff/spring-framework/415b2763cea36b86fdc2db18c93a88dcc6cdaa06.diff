[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java, +import java.io.ByteArrayInputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import org.springframework.http.HttpInputMessage;, +import org.springframework.http.converter.FormHttpMessageConverter;, +		addRequestParams(request, UriComponentsBuilder.fromUri(this.url).build().getQueryParams());, +		if (this.content != null && this.contentType != null) {, +			MediaType mediaType = MediaType.parseMediaType(this.contentType);, +			if (MediaType.APPLICATION_FORM_URLENCODED.includes(mediaType)) {, +				addRequestParams(request, parseFormData(mediaType));, +			}, +		}, +, +	private void addRequestParams(MockHttpServletRequest request, MultiValueMap<String, String> map) {, +		try {, +			for (Entry<String, List<String>> entry : map.entrySet()) {, +				for (String value : entry.getValue()) {, +					value = (value != null) ? UriUtils.decode(value, "UTF-8") : null;, +					request.addParameter(UriUtils.decode(entry.getKey(), "UTF-8"), value);, +				}, +			}, +		}, +		catch (UnsupportedEncodingException ex) {, +			// shouldn't happen, +		}, +	}, +, +	private MultiValueMap<String, String> parseFormData(final MediaType mediaType) {, +		MultiValueMap<String, String> map;HttpInputMessage message = new HttpInputMessage() {, +			@Override, +			public InputStream getBody() throws IOException {, +				return new ByteArrayInputStream(content);, +			}, +, +			@Override, +			public HttpHeaders getHeaders() {, +				HttpHeaders headers = new HttpHeaders();, +				headers.setContentType(mediaType);, +				return headers;, +			}, +		};, +		try {, +			map = new FormHttpMessageConverter().read(null, message);, +		}, +		catch (IOException ex) {, +			throw new IllegalStateException("Failed to parse form data in request body: ", ex);, +		}, +		return map;, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java, +import java.io.ByteArrayInputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import org.springframework.http.HttpInputMessage;, +import org.springframework.http.converter.FormHttpMessageConverter;, +		addRequestParams(request, UriComponentsBuilder.fromUri(this.url).build().getQueryParams());, +		if (this.content != null && this.contentType != null) {, +			MediaType mediaType = MediaType.parseMediaType(this.contentType);, +			if (MediaType.APPLICATION_FORM_URLENCODED.includes(mediaType)) {, +				addRequestParams(request, parseFormData(mediaType));, +			}, +		}, +, +	private void addRequestParams(MockHttpServletRequest request, MultiValueMap<String, String> map) {, +		try {, +			for (Entry<String, List<String>> entry : map.entrySet()) {, +				for (String value : entry.getValue()) {, +					value = (value != null) ? UriUtils.decode(value, "UTF-8") : null;, +					request.addParameter(UriUtils.decode(entry.getKey(), "UTF-8"), value);, +				}, +			}, +		}, +		catch (UnsupportedEncodingException ex) {, +			// shouldn't happen, +		}, +	}, +, +	private MultiValueMap<String, String> parseFormData(final MediaType mediaType) {, +		MultiValueMap<String, String> map;HttpInputMessage message = new HttpInputMessage() {, +			@Override, +			public InputStream getBody() throws IOException {, +				return new ByteArrayInputStream(content);, +			}, +, +			@Override, +			public HttpHeaders getHeaders() {, +				HttpHeaders headers = new HttpHeaders();, +				headers.setContentType(mediaType);, +				return headers;, +			}, +		};, +		try {, +			map = new FormHttpMessageConverter().read(null, message);, +		}, +		catch (IOException ex) {, +			throw new IllegalStateException("Failed to parse form data in request body: ", ex);, +		}, +		return map;]