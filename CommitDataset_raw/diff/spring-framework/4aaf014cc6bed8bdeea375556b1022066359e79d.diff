[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/CannotReadScriptException.java, + * Copyright 2002-2012 the original author or authors., + * Thrown by {@link ResourceDatabasePopulator} if one of its SQL scripts cannot, + * be read during population., +@SuppressWarnings("serial"), +	 * Construct a new {@code CannotReadScriptException}., +	 * @param resource the resource that cannot be read from, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/CannotReadScriptException.java, + * Copyright 2002-2012 the original author or authors., + * Thrown by {@link ResourceDatabasePopulator} if one of its SQL scripts cannot, + * be read during population., +@SuppressWarnings("serial"), +	 * Construct a new {@code CannotReadScriptException}., +	 * @param resource the resource that cannot be read from, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptStatementFailedException.java, + * Copyright 2002-2012 the original author or authors., + * @author Sam Brannen, +@SuppressWarnings("serial"), +	 * Construct a new {@code ScriptStatementFailedException}., +	 * @param resource the resource from which the SQL statement was read, +	 * @param cause the underlying cause of the failure, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/CannotReadScriptException.java, + * Copyright 2002-2012 the original author or authors., + * Thrown by {@link ResourceDatabasePopulator} if one of its SQL scripts cannot, + * be read during population., +@SuppressWarnings("serial"), +	 * Construct a new {@code CannotReadScriptException}., +	 * @param resource the resource that cannot be read from, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptStatementFailedException.java, + * Copyright 2002-2012 the original author or authors., + * @author Sam Brannen, +@SuppressWarnings("serial"), +	 * Construct a new {@code ScriptStatementFailedException}., +	 * @param resource the resource from which the SQL statement was read, +	 * @param cause the underlying cause of the failure, +++ b/spring-test/src/main/java/org/springframework/test/jdbc/JdbcTestUtils.java, +import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;, +	private static final String DEFAULT_COMMENT_PREFIX = "--";, +, +	private static final char DEFAULT_STATEMENT_SEPARATOR = ';';, +, +	 * @see ResourceDatabasePopulator, +	 * @see ResourceDatabasePopulator, +	 * @see ResourceDatabasePopulator, +			char delimiter = DEFAULT_STATEMENT_SEPARATOR;, +			int lineNumber = 0;, +				lineNumber++;, +							logger.warn("Failed to execute SQL script statement at line " + lineNumber, +									+ " of resource " + resource + ": " + statement, ex);, +			}, +			catch (IOException ex) {, +	 * Read a script from the provided {@code LineNumberReader}, using , +	 * "{@code --}" as the comment prefix, and build a {@code String} containing, +	 * the lines., +	 * @see #readScript(LineNumberReader, String), +		return readScript(lineNumberReader, DEFAULT_COMMENT_PREFIX);, +	}, +, +	/**, +	 * Read a script from the provided {@code LineNumberReader}, using the supplied, +	 * comment prefix, and build a {@code String} containing the lines., +	 * @param lineNumberReader the {@code LineNumberReader} containing the script, +	 * to be processed, +	 * @param commentPrefix the line prefix that identifies comments in the SQL script, +	 * @return a {@code String} containing the script lines, +	 */, +	public static String readScript(LineNumberReader lineNumberReader, String commentPrefix) throws IOException {, +			if (StringUtils.hasText(currentStatement), +					&& (commentPrefix != null && !currentStatement.startsWith(commentPrefix))) {, +		splitSqlScript(script, "" + delim, statements);, +	}, +, +	/**, +	 * Split an SQL script into separate statements delimited with the provided delimiter, +	 * character. Each individual statement will be added to the provided {@code List}., +	 * @param script the SQL script, +	 * @param delim character delimiting each statement &mdash; typically a ';' character, +	 * @param statements the List that will contain the individual statements, +	 */, +	private static void splitSqlScript(String script, String delim, List<String> statements) {, +		boolean inEscape = false;, +			char c = content[i];, +			if (inEscape) {, +				inEscape = false;, +				sb.append(c);, +				continue;, +			}, +			// MySQL style escapes, +			if (c == '\\') {, +				inEscape = true;, +				sb.append(c);, +				continue;, +			}, +			if (c == '\'') {, +			if (!inLiteral) {, +				if (startsWithDelimiter(script, i, delim)) {, +					i += delim.length() - 1;, +					continue;, +				else if (c == '\n' || c == '\t') {, +					c = ' ';]