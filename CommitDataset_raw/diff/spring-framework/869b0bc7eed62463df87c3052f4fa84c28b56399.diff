[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +import org.springframework.cglib.proxy.Factory;, +import org.springframework.objenesis.Objenesis;, +import org.springframework.objenesis.ObjenesisException;, +import org.springframework.objenesis.ObjenesisStd;, +import org.springframework.objenesis.SpringObjenesis;, +	private static final Objenesis cachedObjenesis = new SpringObjenesis();, +, +	private static final Objenesis nonCachedObjenesis = new ObjenesisStd(false);, +, +			enhancer.setCallbackType(MethodInterceptor.class);, +, +			// Ideally create enhanced FactoryBean proxy without constructor side effects,, +			// analogous to AOP proxy creation in ObjenesisCglibAopProxy..., +			Class<?> fbClass = enhancer.createClass();, +			Objenesis objenesis = (enhancer.getUseCache() ? cachedObjenesis : nonCachedObjenesis);, +			Factory factory;, +			try {, +				factory = (Factory) objenesis.newInstance(fbClass);, +			}, +			catch (ObjenesisException ex) {, +				// Fallback to regular proxy construction on unsupported JVMs, +				logger.debug("Unable to instantiate enhanced FactoryBean using Objenesis, " +, +						"falling back to regular construction", ex);, +				factory = (Factory) fbClass.newInstance();, +			}, +, +			factory.setCallback(0, new MethodInterceptor() {, +, +			return factory;, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +import org.springframework.cglib.proxy.Factory;, +import org.springframework.objenesis.Objenesis;, +import org.springframework.objenesis.ObjenesisException;, +import org.springframework.objenesis.ObjenesisStd;, +import org.springframework.objenesis.SpringObjenesis;, +	private static final Objenesis cachedObjenesis = new SpringObjenesis();, +, +	private static final Objenesis nonCachedObjenesis = new ObjenesisStd(false);, +, +			enhancer.setCallbackType(MethodInterceptor.class);, +, +			// Ideally create enhanced FactoryBean proxy without constructor side effects,, +			// analogous to AOP proxy creation in ObjenesisCglibAopProxy..., +			Class<?> fbClass = enhancer.createClass();, +			Objenesis objenesis = (enhancer.getUseCache() ? cachedObjenesis : nonCachedObjenesis);, +			Factory factory;, +			try {, +				factory = (Factory) objenesis.newInstance(fbClass);, +			}, +			catch (ObjenesisException ex) {, +				// Fallback to regular proxy construction on unsupported JVMs, +				logger.debug("Unable to instantiate enhanced FactoryBean using Objenesis, " +, +						"falling back to regular construction", ex);, +				factory = (Factory) fbClass.newInstance();, +			}, +, +			factory.setCallback(0, new MethodInterceptor() {, +, +			return factory;, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ThreadPoolExecutorFactoryBean.java, + * Copyright 2002-2015 the original author or authors., +	public ExecutorService getObject() {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +import org.springframework.cglib.proxy.Factory;, +import org.springframework.objenesis.Objenesis;, +import org.springframework.objenesis.ObjenesisException;, +import org.springframework.objenesis.ObjenesisStd;, +import org.springframework.objenesis.SpringObjenesis;, +	private static final Objenesis cachedObjenesis = new SpringObjenesis();, +, +	private static final Objenesis nonCachedObjenesis = new ObjenesisStd(false);, +, +			enhancer.setCallbackType(MethodInterceptor.class);, +, +			// Ideally create enhanced FactoryBean proxy without constructor side effects,, +			// analogous to AOP proxy creation in ObjenesisCglibAopProxy..., +			Class<?> fbClass = enhancer.createClass();, +			Objenesis objenesis = (enhancer.getUseCache() ? cachedObjenesis : nonCachedObjenesis);, +			Factory factory;, +			try {, +				factory = (Factory) objenesis.newInstance(fbClass);, +			}, +			catch (ObjenesisException ex) {, +				// Fallback to regular proxy construction on unsupported JVMs, +				logger.debug("Unable to instantiate enhanced FactoryBean using Objenesis, " +, +						"falling back to regular construction", ex);, +				factory = (Factory) fbClass.newInstance();, +			}, +, +			factory.setCallback(0, new MethodInterceptor() {, +, +			return factory;, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ThreadPoolExecutorFactoryBean.java, + * Copyright 2002-2015 the original author or authors., +	public ExecutorService getObject() {, +++ b/spring-context/src/test/java/org/springframework/scheduling/concurrent/ThreadPoolExecutorFactoryBeanTests.java, +/*, + * Copyright 2002-2015 the original author or authors., + *]