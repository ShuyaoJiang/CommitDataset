[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java, +, +		// Externally configured prefix via PathConfigurer.., +		String prefix = getPathPrefix(controllerType);, +		builder.path(prefix);, +, +		builder.path(mapping);, +, +		return builder;, +	private static UriComponentsBuilder fromMethodInternal(@Nullable UriComponentsBuilder builder,, +		builder = getBaseUrlToUse(builder);, +, +		// Externally configured prefix via PathConfigurer.., +		String prefix = getPathPrefix(controllerType);, +		builder.path(prefix);, +, +		builder.path(path);, +, +		UriComponents uriComponents = applyContributors(builder, method, args);, +	private static String getPathPrefix(Class<?> controllerType) {, +		WebApplicationContext wac = getWebApplicationContext();, +		if (wac != null) {, +			Map<String, RequestMappingHandlerMapping> map = wac.getBeansOfType(RequestMappingHandlerMapping.class);, +			for (RequestMappingHandlerMapping mapping : map.values()) {, +				if (mapping.isHandler(controllerType)) {, +					String prefix = mapping.getPathPrefix(controllerType);, +					if (prefix != null) {, +						return prefix;, +					}, +				}, +			}, +		}, +		return "";, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java, +, +		// Externally configured prefix via PathConfigurer.., +		String prefix = getPathPrefix(controllerType);, +		builder.path(prefix);, +, +		builder.path(mapping);, +, +		return builder;, +	private static UriComponentsBuilder fromMethodInternal(@Nullable UriComponentsBuilder builder,, +		builder = getBaseUrlToUse(builder);, +, +		// Externally configured prefix via PathConfigurer.., +		String prefix = getPathPrefix(controllerType);, +		builder.path(prefix);, +, +		builder.path(path);, +, +		UriComponents uriComponents = applyContributors(builder, method, args);, +	private static String getPathPrefix(Class<?> controllerType) {, +		WebApplicationContext wac = getWebApplicationContext();, +		if (wac != null) {, +			Map<String, RequestMappingHandlerMapping> map = wac.getBeansOfType(RequestMappingHandlerMapping.class);, +			for (RequestMappingHandlerMapping mapping : map.values()) {, +				if (mapping.isHandler(controllerType)) {, +					String prefix = mapping.getPathPrefix(controllerType);, +					if (prefix != null) {, +						return prefix;, +					}, +				}, +			}, +		}, +		return "";, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +	private Map<String, Predicate<Class<?>>> pathPrefixes = new LinkedHashMap<>();, +		this.pathPrefixes = Collections.unmodifiableMap(new LinkedHashMap<>(prefixes));, +		return this.pathPrefixes;, +			String prefix = getPathPrefix(handlerType);, +			if (prefix != null) {, +				info = RequestMappingInfo.paths(prefix).build().combine(info);, +			}, +		}, +		return info;, +	}, +, +	@Nullable, +	String getPathPrefix(Class<?> handlerType) {, +				return prefix;, +		return null;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java, +, +		// Externally configured prefix via PathConfigurer.., +		String prefix = getPathPrefix(controllerType);, +		builder.path(prefix);, +, +		builder.path(mapping);, +, +		return builder;, +	private static UriComponentsBuilder fromMethodInternal(@Nullable UriComponentsBuilder builder,, +		builder = getBaseUrlToUse(builder);, +, +		// Externally configured prefix via PathConfigurer.., +		String prefix = getPathPrefix(controllerType);]