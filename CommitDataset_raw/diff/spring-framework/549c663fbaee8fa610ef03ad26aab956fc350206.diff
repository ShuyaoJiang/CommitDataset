[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +	private final Map<Class<?>, Class<? extends PropertyEditor>> customEditors =, +			new HashMap<Class<?>, Class<? extends PropertyEditor>>(4);, +				sharedInstance = getSingleton(beanName, new ObjectFactory<Object>() {, +					Object scopedInstance = scope.get(beanName, new ObjectFactory<Object>() {, +				return (BeanFactoryUtils.isFactoryDereference(name) || ((FactoryBean<?>) beanInstance).isSingleton());, +					FactoryBean<?> factoryBean = (FactoryBean<?>) getBean(FACTORY_BEAN_PREFIX + beanName);, +				final FactoryBean<?> factoryBean = (FactoryBean<?>) getBean(FACTORY_BEAN_PREFIX + beanName);, +							return ((factoryBean instanceof SmartFactoryBean && ((SmartFactoryBean<?>) factoryBean).isPrototype()) ||, +					return ((factoryBean instanceof SmartFactoryBean && ((SmartFactoryBean<?>) factoryBean).isPrototype()) ||, +	public boolean isTypeMatch(String name, Class<?> targetType) throws NoSuchBeanDefinitionException {, +		Class<?> typeToMatch = (targetType != null ? targetType : Object.class);, +					Class<?> type = getTypeForFactoryBean((FactoryBean<?>) beanInstance);, +				Class<?> targetClass = predictBeanType(dbd.getBeanName(), tbd, FactoryBean.class, typeToMatch);, +			Class<?> beanClass = predictBeanType(beanName, mbd, FactoryBean.class, typeToMatch);, +					Class<?> type = getTypeForFactoryBean(beanName, mbd);, +				return getTypeForFactoryBean((FactoryBean<?>) beanInstance);, +				Class<?> targetClass = predictBeanType(dbd.getBeanName(), tbd);, +			Class<?> beanClass = predictBeanType(beanName, mbd);, +	public Map<Class<?>, Class<? extends PropertyEditor>> getCustomEditors() {, +				(curVal.equals(beanName) || (curVal instanceof Set && ((Set<?>) curVal).contains(beanName))));, +			for (Map.Entry<Class<?>, Class<? extends PropertyEditor>> entry : this.customEditors.entrySet()) {, +				Class<?> requiredType = entry.getKey();, +	protected Class<?> resolveBeanClass(final RootBeanDefinition mbd, String beanName, final Class<?>... typesToMatch), +				return AccessController.doPrivileged(new PrivilegedExceptionAction<Class<?>>() {, +					public Class<?> run() throws Exception {, +	private Class<?> doResolveBeanClass(RootBeanDefinition mbd, Class<?>... typesToMatch) throws ClassNotFoundException {, +	protected Class<?> predictBeanType(String beanName, RootBeanDefinition mbd, Class<?>... typesToMatch) {, +		Class<?> beanClass = predictBeanType(beanName, mbd, FactoryBean.class);, +	protected Class<?> getTypeForFactoryBean(String beanName, RootBeanDefinition mbd) {, +			FactoryBean<?> factoryBean = doGetBean(FACTORY_BEAN_PREFIX + beanName, FactoryBean.class, null, true);, +			FactoryBean<?> factory = (FactoryBean<?>) beanInstance;]