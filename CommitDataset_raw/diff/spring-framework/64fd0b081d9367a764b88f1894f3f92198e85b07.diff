[+++ b/org.springframework.context/src/main/java/org/springframework/scripting/config/ScriptBeanDefinitionParser.java, +	private static final String PROXY_TARGET_CLASS_ATTRIBUTE = "proxy-target-class";, +	private static final String CUSTOMIZER_REF_ATTRIBUTE = "customizer-ref";, +		bd.setAttribute(ScriptFactoryPostProcessor.LANGUAGE_ATTRIBUTE, element.getLocalName());, +		} else if (autowireMode == GenericBeanDefinition.AUTOWIRE_CONSTRUCTOR) {, +		BeanDefinitionDefaults beanDefinitionDefaults = parserContext.getDelegate().getBeanDefinitionDefaults();, +		} else if (beanDefinitionDefaults.getInitMethodName() != null) {, +		} else if (beanDefinitionDefaults.getDestroyMethodName() != null) {, +			bd.setAttribute(ScriptFactoryPostProcessor.REFRESH_CHECK_DELAY_ATTRIBUTE, new Long(refreshCheckDelay));, +		}, +, +		// Attach any proxy target class metadata., +		String proxyTargetClass = element.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE);, +		if (StringUtils.hasText(proxyTargetClass)) {, +			Boolean flag = new Boolean(proxyTargetClass);, +			bd.setAttribute(ScriptFactoryPostProcessor.PROXY_TARGET_CLASS_ATTRIBUTE, flag);, +			} else {, +		} else if (hasScriptSource) {, +		} else if (!elements.isEmpty()) {, +		} else {, +++ b/org.springframework.context/src/main/java/org/springframework/scripting/config/ScriptBeanDefinitionParser.java, +	private static final String PROXY_TARGET_CLASS_ATTRIBUTE = "proxy-target-class";, +	private static final String CUSTOMIZER_REF_ATTRIBUTE = "customizer-ref";, +		bd.setAttribute(ScriptFactoryPostProcessor.LANGUAGE_ATTRIBUTE, element.getLocalName());, +		} else if (autowireMode == GenericBeanDefinition.AUTOWIRE_CONSTRUCTOR) {, +		BeanDefinitionDefaults beanDefinitionDefaults = parserContext.getDelegate().getBeanDefinitionDefaults();, +		} else if (beanDefinitionDefaults.getInitMethodName() != null) {, +		} else if (beanDefinitionDefaults.getDestroyMethodName() != null) {, +			bd.setAttribute(ScriptFactoryPostProcessor.REFRESH_CHECK_DELAY_ATTRIBUTE, new Long(refreshCheckDelay));, +		}, +, +		// Attach any proxy target class metadata., +		String proxyTargetClass = element.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE);, +		if (StringUtils.hasText(proxyTargetClass)) {, +			Boolean flag = new Boolean(proxyTargetClass);, +			bd.setAttribute(ScriptFactoryPostProcessor.PROXY_TARGET_CLASS_ATTRIBUTE, flag);, +			} else {, +		} else if (hasScriptSource) {, +		} else if (!elements.isEmpty()) {, +		} else {, +++ b/org.springframework.context/src/main/java/org/springframework/scripting/config/ScriptingDefaultsParser.java, +import org.springframework.beans.factory.config.TypedStringValue;, +	private static final String PROXY_TARGET_CLASS_ATTRIBUTE = "proxy-target-class";, +, +		String proxyTargetClass = element.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE);, +		if (StringUtils.hasText(proxyTargetClass)) {, +			bd.getPropertyValues().add("defaultProxyTargetClass", new TypedStringValue(proxyTargetClass, Boolean.class));, +		}, +++ b/org.springframework.context/src/main/java/org/springframework/scripting/config/ScriptBeanDefinitionParser.java, +	private static final String PROXY_TARGET_CLASS_ATTRIBUTE = "proxy-target-class";, +	private static final String CUSTOMIZER_REF_ATTRIBUTE = "customizer-ref";, +		bd.setAttribute(ScriptFactoryPostProcessor.LANGUAGE_ATTRIBUTE, element.getLocalName());, +		} else if (autowireMode == GenericBeanDefinition.AUTOWIRE_CONSTRUCTOR) {, +		BeanDefinitionDefaults beanDefinitionDefaults = parserContext.getDelegate().getBeanDefinitionDefaults();, +		} else if (beanDefinitionDefaults.getInitMethodName() != null) {, +		} else if (beanDefinitionDefaults.getDestroyMethodName() != null) {, +			bd.setAttribute(ScriptFactoryPostProcessor.REFRESH_CHECK_DELAY_ATTRIBUTE, new Long(refreshCheckDelay));, +		}, +, +		// Attach any proxy target class metadata., +		String proxyTargetClass = element.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE);, +		if (StringUtils.hasText(proxyTargetClass)) {, +			Boolean flag = new Boolean(proxyTargetClass);, +			bd.setAttribute(ScriptFactoryPostProcessor.PROXY_TARGET_CLASS_ATTRIBUTE, flag);, +			} else {, +		} else if (hasScriptSource) {, +		} else if (!elements.isEmpty()) {, +		} else {, +++ b/org.springframework.context/src/main/java/org/springframework/scripting/config/ScriptingDefaultsParser.java, +import org.springframework.beans.factory.config.TypedStringValue;, +	private static final String PROXY_TARGET_CLASS_ATTRIBUTE = "proxy-target-class";, +, +		String proxyTargetClass = element.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE);, +		if (StringUtils.hasText(proxyTargetClass)) {, +			bd.getPropertyValues().add("defaultProxyTargetClass", new TypedStringValue(proxyTargetClass, Boolean.class));, +		}, +++ b/org.springframework.context/src/main/java/org/springframework/scripting/support/ScriptFactoryPostProcessor.java, +import org.springframework.beans.factory.support.BeanDefinitionValidationException;, +public class ScriptFactoryPostProcessor extends InstantiationAwareBeanPostProcessorAdapter implements, +		BeanClassLoaderAware, BeanFactoryAware, ResourceLoaderAware, DisposableBean, Ordered {, +	public static final String REFRESH_CHECK_DELAY_ATTRIBUTE = Conventions.getQualifiedAttributeName(, +			ScriptFactoryPostProcessor.class, "refreshCheckDelay");, +, +	public static final String PROXY_TARGET_CLASS_ATTRIBUTE = Conventions.getQualifiedAttributeName(, +			ScriptFactoryPostProcessor.class, "proxyTargetClass");, +, +	public static final String LANGUAGE_ATTRIBUTE = Conventions.getQualifiedAttributeName(, +			ScriptFactoryPostProcessor.class, "language");, +	private boolean defaultProxyTargetClass = false;, +, +	/**, +	 * Flag to signal that refreshable proxies should be created to proxy the target class not its interfaces. , +	 * @param defaultProxyTargetClass the flag value to set, +	 */, +	public void setDefaultProxyTargetClass(boolean defaultProxyTargetClass) {, +		this.defaultProxyTargetClass = defaultProxyTargetClass;, +	}, +, +			throw new IllegalStateException("ScriptFactoryPostProcessor doesn't work with a BeanFactory ", +					+ "which does not implement ConfigurableBeanFactory: " + beanFactory.getClass());]