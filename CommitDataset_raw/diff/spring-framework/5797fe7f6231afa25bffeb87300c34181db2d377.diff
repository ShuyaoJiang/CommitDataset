[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/json/MappingJacksonJsonView.java, +import java.util.Collections;, +, + * encoded as JSON. If the model contains only one key, you can have it extracted encoded as JSON alone via , + * {@link #setExtractValueFromSingleKeyModel(boolean)}. Or you can select specific model attributes to be encoded, + * as JSON via ... TODO , +	private Set<String> modelKeys;, +	 * Indicates whether the JSON output by this view should be prefixed with <tt>"{} && "</tt>. Default is false., +	 * Sets the attribute in the model that should be rendered by this view. , +	 * When set, all other model attributes will be ignored., +	public void setModelKey(String modelKey) {, +		this.modelKeys = Collections.singleton(modelKey);, +	 * Sets the attributes in the model that should be rendered by this view. , +	 * When set, all other model attributes will be ignored., +	 */, +	public void setModelKeys(Set<String> modelKeys) {, +		this.modelKeys = modelKeys;, +	}, +, +	/**, +	 * Returns the attributes in the model that should be rendered by this view., +	 */, +	public Set<String> getModelKeys() {, +		return modelKeys;, +	}, +, +	/**, +	 * Sets the attributes in the model that should be rendered by this view. , +	 * When set, all other model attributes will be ignored., +	 * @deprecated use {@link #setModelKeys(Set)} instead, +		this.modelKeys = renderedAttributes;, +	}, +, +	/**, +	 * Returns the attributes in the model that should be rendered by this view., +	 * @deprecated use {@link #getModelKeys()} instead, +	 */, +	public Set<String> getRenderedAttributes() {, +		return modelKeys;, +				!CollectionUtils.isEmpty(this.modelKeys) ? this.modelKeys : model.keySet();, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/json/MappingJacksonJsonView.java, +import java.util.Collections;, +, + * encoded as JSON. If the model contains only one key, you can have it extracted encoded as JSON alone via , + * {@link #setExtractValueFromSingleKeyModel(boolean)}. Or you can select specific model attributes to be encoded, + * as JSON via ... TODO , +	private Set<String> modelKeys;, +	 * Indicates whether the JSON output by this view should be prefixed with <tt>"{} && "</tt>. Default is false., +	 * Sets the attribute in the model that should be rendered by this view. , +	 * When set, all other model attributes will be ignored., +	public void setModelKey(String modelKey) {, +		this.modelKeys = Collections.singleton(modelKey);, +	 * Sets the attributes in the model that should be rendered by this view. , +	 * When set, all other model attributes will be ignored., +	 */, +	public void setModelKeys(Set<String> modelKeys) {, +		this.modelKeys = modelKeys;, +	}, +, +	/**, +	 * Returns the attributes in the model that should be rendered by this view., +	 */, +	public Set<String> getModelKeys() {, +		return modelKeys;, +	}, +, +	/**, +	 * Sets the attributes in the model that should be rendered by this view. , +	 * When set, all other model attributes will be ignored., +	 * @deprecated use {@link #setModelKeys(Set)} instead, +		this.modelKeys = renderedAttributes;, +	}, +, +	/**, +	 * Returns the attributes in the model that should be rendered by this view., +	 * @deprecated use {@link #getModelKeys()} instead, +	 */, +	public Set<String> getRenderedAttributes() {, +		return modelKeys;, +				!CollectionUtils.isEmpty(this.modelKeys) ? this.modelKeys : model.keySet();, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/view/json/MappingJacksonJsonViewTest.java, +import static org.easymock.EasyMock.createMock;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +, +		ObjectMapper mapper = new ObjectMapper();, +		mapper.setSerializerFactory(factory);, +		view.setModelKeys(attrs);, +	@SuppressWarnings("rawtypes")]