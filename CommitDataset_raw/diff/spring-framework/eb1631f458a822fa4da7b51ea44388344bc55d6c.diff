[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/BeanDefinitionVisitor.java, + * Copyright 2002-2009 the original author or authors., +		String resolvedValue = this.valueResolver.resolveStringValue(strVal);, +		// Return original String if not modified., +		return (strVal.equals(resolvedValue) ? strVal : resolvedValue);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/BeanDefinitionVisitor.java, + * Copyright 2002-2009 the original author or authors., +		String resolvedValue = this.valueResolver.resolveStringValue(strVal);, +		// Return original String if not modified., +		return (strVal.equals(resolvedValue) ? strVal : resolvedValue);, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/config/PropertyResourceConfigurerTests.java, + * Copyright 2002-2009 the original author or authors., +import java.util.Collections;, +import static org.junit.Assert.*;, +import test.beans.IndexedTestBean;, +import test.beans.TestBean;, +import static test.util.TestResourceUtils.*;, +, +import static org.springframework.beans.factory.support.BeanDefinitionBuilder.*;, +				assertTrue(ex.getMessage().toLowerCase().contains("argh"));, +		Map singletonMap = Collections.singletonMap("myKey", "myValue");, +			pvs2.addPropertyValue("someMap", singletonMap);, +			pvs.addPropertyValue("someMap", singletonMap);, +		assertEquals(1, tb1.getSomeMap().size());, +		assertEquals("myValue", tb1.getSomeMap().get("myKey"));, +			assertTrue(ex.getMessage().contains("user.dir"));, +			assertTrue(ex.getMessage().contains("ref"));, +	public void testPropertyPlaceholderConfigurerWithPlaceholderInAlias() {, +		factory.registerBeanDefinition("tb",, +			genericBeanDefinition(TestBean.class).getBeanDefinition());, +		factory.registerAlias("tb", "${alias}");, +, +		PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer();, +		Properties props = new Properties();, +		props.put("alias", "tb2");, +		ppc.setProperties(props);, +		ppc.postProcessBeanFactory(factory);, +, +		TestBean tb = (TestBean) factory.getBean("tb");, +		TestBean tb2 = (TestBean) factory.getBean("tb2");, +		assertSame(tb, tb2);, +	}, +, +	@Test, +	public void testPropertyPlaceholderConfigurerWithSelfReferencingPlaceholderInAlias() {, +		factory.registerBeanDefinition("tb",, +			genericBeanDefinition(TestBean.class).getBeanDefinition());, +		factory.registerAlias("tb", "${alias}");, +, +		PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer();, +		Properties props = new Properties();, +		props.put("alias", "tb");, +		ppc.setProperties(props);, +		ppc.postProcessBeanFactory(factory);, +, +		TestBean tb = (TestBean) factory.getBean("tb");, +		assertEquals(0, factory.getAliases("tb").length);, +	}, +, +	@Test, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/BeanDefinitionVisitor.java, + * Copyright 2002-2009 the original author or authors., +		String resolvedValue = this.valueResolver.resolveStringValue(strVal);, +		// Return original String if not modified., +		return (strVal.equals(resolvedValue) ? strVal : resolvedValue);, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/config/PropertyResourceConfigurerTests.java, + * Copyright 2002-2009 the original author or authors., +import java.util.Collections;, +import static org.junit.Assert.*;, +import test.beans.IndexedTestBean;, +import test.beans.TestBean;, +import static test.util.TestResourceUtils.*;, +, +import static org.springframework.beans.factory.support.BeanDefinitionBuilder.*;, +				assertTrue(ex.getMessage().toLowerCase().contains("argh"));, +		Map singletonMap = Collections.singletonMap("myKey", "myValue");, +			pvs2.addPropertyValue("someMap", singletonMap);, +			pvs.addPropertyValue("someMap", singletonMap);, +		assertEquals(1, tb1.getSomeMap().size());, +		assertEquals("myValue", tb1.getSomeMap().get("myKey"));, +			assertTrue(ex.getMessage().contains("user.dir"));, +			assertTrue(ex.getMessage().contains("ref"));, +	public void testPropertyPlaceholderConfigurerWithPlaceholderInAlias() {, +		factory.registerBeanDefinition("tb",, +			genericBeanDefinition(TestBean.class).getBeanDefinition());, +		factory.registerAlias("tb", "${alias}");, +, +		PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer();, +		Properties props = new Properties();, +		props.put("alias", "tb2");, +		ppc.setProperties(props);, +		ppc.postProcessBeanFactory(factory);, +, +		TestBean tb = (TestBean) factory.getBean("tb");, +		TestBean tb2 = (TestBean) factory.getBean("tb2");, +		assertSame(tb, tb2);, +	}, +, +	@Test]