[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/SingletonBeanRegistry.java, + * Copyright 2002-2015 the original author or authors., +	/**, +	 * Return the singleton mutex used by this registry (for external collaborators)., +	 * @return the mutex object (never {@code null}), +	 * @since 4.2, +	 */, +	Object getSingletonMutex();, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/SingletonBeanRegistry.java, + * Copyright 2002-2015 the original author or authors., +	/**, +	 * Return the singleton mutex used by this registry (for external collaborators)., +	 * @return the mutex object (never {@code null}), +	 * @since 4.2, +	 */, +	Object getSingletonMutex();, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java, + * Copyright 2002-2015 the original author or authors., +	 * Exposes the singleton mutex to subclasses and external collaborators., +	public final Object getSingletonMutex() {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/SingletonBeanRegistry.java, + * Copyright 2002-2015 the original author or authors., +	/**, +	 * Return the singleton mutex used by this registry (for external collaborators)., +	 * @return the mutex object (never {@code null}), +	 * @since 4.2, +	 */, +	Object getSingletonMutex();, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java, + * Copyright 2002-2015 the original author or authors., +	 * Exposes the singleton mutex to subclasses and external collaborators., +	public final Object getSingletonMutex() {, +++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, +	private Object retrievalMutex = this.defaultRetriever;, +		if (beanFactory instanceof ConfigurableBeanFactory) {, +			ConfigurableBeanFactory cbf = (ConfigurableBeanFactory) beanFactory;, +			if (this.beanClassLoader == null) {, +				this.beanClassLoader = cbf.getBeanClassLoader();, +			}, +			this.retrievalMutex = cbf.getSingletonMutex();, +	@Override, +	public void addApplicationListener(ApplicationListener<?> listener) {, +		synchronized (this.retrievalMutex) {, +			this.defaultRetriever.applicationListeners.add(listener);, +			this.retrieverCache.clear();, +		}, +	}, +, +	@Override, +	public void addApplicationListenerBean(String listenerBeanName) {, +		synchronized (this.retrievalMutex) {, +			this.defaultRetriever.applicationListenerBeans.add(listenerBeanName);, +			this.retrieverCache.clear();, +		}, +	}, +, +	@Override, +	public void removeApplicationListener(ApplicationListener<?> listener) {, +		synchronized (this.retrievalMutex) {, +			this.defaultRetriever.applicationListeners.remove(listener);, +			this.retrieverCache.clear();, +		}, +	}, +, +	@Override, +	public void removeApplicationListenerBean(String listenerBeanName) {, +		synchronized (this.retrievalMutex) {, +			this.defaultRetriever.applicationListenerBeans.remove(listenerBeanName);, +			this.retrieverCache.clear();, +		}, +	}, +, +	@Override, +	public void removeAllListeners() {, +		synchronized (this.retrievalMutex) {, +			this.defaultRetriever.applicationListeners.clear();, +			this.defaultRetriever.applicationListenerBeans.clear();, +			this.retrieverCache.clear();, +		}, +	}, +, +, +		synchronized (this.retrievalMutex) {, +			synchronized (this.retrievalMutex) {, +						retrieveApplicationListeners(eventType, sourceType, retriever);, +			return retrieveApplicationListeners(eventType, sourceType, null);, +			ResolvableType eventType, Class<?> sourceType, ListenerRetriever retriever) {, +		synchronized (this.retrievalMutex) {, +	protected boolean supportsEvent(ApplicationListener<?> listener, ResolvableType eventType, Class<?> sourceType) {]