[+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +import javax.xml.bind.annotation.XmlRootElement;, +import org.springframework.beans.factory.BeanCreationException;, +import org.springframework.http.converter.xml.MarshallingHttpMessageConverter;, +import org.springframework.oxm.jaxb.Jaxb2Marshaller;, +	@Test, +	public void responseBodyArgMismatch() throws ServletException, IOException {, +		@SuppressWarnings("serial") DispatcherServlet servlet = new DispatcherServlet() {, +			@Override, +			protected WebApplicationContext createWebApplicationContext(WebApplicationContext parent) {, +				GenericWebApplicationContext wac = new GenericWebApplicationContext();, +				wac.registerBeanDefinition("controller", new RootBeanDefinition(RequestBodyArgMismatchController.class));, +, +				Jaxb2Marshaller marshaller = new Jaxb2Marshaller();, +				marshaller.setClassesToBeBound(A.class, B.class);, +				try {, +					marshaller.afterPropertiesSet();, +				}, +				catch (Exception ex) {, +					throw new BeanCreationException(ex.getMessage(), ex);, +				}, +, +				MarshallingHttpMessageConverter messageConverter = new MarshallingHttpMessageConverter(marshaller);, +, +				RootBeanDefinition adapterDef = new RootBeanDefinition(AnnotationMethodHandlerAdapter.class);, +				adapterDef.getPropertyValues().add("messageConverters", messageConverter);, +				wac.registerBeanDefinition("handlerAdapter", adapterDef);, +				wac.refresh();, +				return wac;, +			}, +		};, +		servlet.init(new MockServletConfig());, +, +, +		MockHttpServletRequest request = new MockHttpServletRequest("PUT", "/something");, +		String requestBody = "<b/>";, +		request.setContent(requestBody.getBytes("UTF-8"));, +		request.addHeader("Content-Type", "application/xml; charset=utf-8");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals(400, response.getStatus());, +	}, +, +	@Controller, +	public static class RequestBodyArgMismatchController {, +, +		@RequestMapping(value = "/something", method = RequestMethod.PUT), +		public void handle(@RequestBody A a) throws IOException {, +		}, +	}, +, +	@XmlRootElement, +	public static class A {, +		, +	}, +, +	@XmlRootElement, +	public static class B {, +, +	}, +, +]