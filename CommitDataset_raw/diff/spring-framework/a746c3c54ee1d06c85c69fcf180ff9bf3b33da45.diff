[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java, +	 * @param model Map with name Strings as keys and corresponding model, +	 * objects as values (Map can also be {@code null} in case of empty model), +	public Mono<Void> render(Map<String, ?> model, MediaType contentType,, +			logger.trace("Rendering view with model " + model);, +		Map<String, Object> mergedModel = getModelAttributes(model, exchange);, +	protected Map<String, Object> getModelAttributes(Map<String, ?> model, ServerWebExchange exchange) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java, +	 * @param model Map with name Strings as keys and corresponding model, +	 * objects as values (Map can also be {@code null} in case of empty model), +	public Mono<Void> render(Map<String, ?> model, MediaType contentType,, +			logger.trace("Rendering view with model " + model);, +		Map<String, Object> mergedModel = getModelAttributes(model, exchange);, +	protected Map<String, Object> getModelAttributes(Map<String, ?> model, ServerWebExchange exchange) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/HttpMessageWriterView.java, +, +	public Mono<Void> render(Map<String, ?> model, MediaType contentType,, +			ServerWebExchange exchange) {, +		Object value = extractObjectToRender(model);, +	protected Object extractObjectToRender(Map<String, ?> model) {, +		for (Map.Entry<String, ?> entry : model.entrySet()) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java, +	 * @param model Map with name Strings as keys and corresponding model, +	 * objects as values (Map can also be {@code null} in case of empty model), +	public Mono<Void> render(Map<String, ?> model, MediaType contentType,, +			logger.trace("Rendering view with model " + model);, +		Map<String, Object> mergedModel = getModelAttributes(model, exchange);, +	protected Map<String, Object> getModelAttributes(Map<String, ?> model, ServerWebExchange exchange) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/HttpMessageWriterView.java, +, +	public Mono<Void> render(Map<String, ?> model, MediaType contentType,, +			ServerWebExchange exchange) {, +		Object value = extractObjectToRender(model);, +	protected Object extractObjectToRender(Map<String, ?> model) {, +		for (Map.Entry<String, ?> entry : model.entrySet()) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/View.java, +, +import java.util.Map;, +	 * @param model Map with name Strings as keys and corresponding model, +	 * objects as values (Map can also be {@code null} in case of empty model), +	Mono<Void> render(Map<String, ?> model, MediaType contentType, ServerWebExchange exchange);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java, +	 * @param model Map with name Strings as keys and corresponding model, +	 * objects as values (Map can also be {@code null} in case of empty model), +	public Mono<Void> render(Map<String, ?> model, MediaType contentType,, +			logger.trace("Rendering view with model " + model);, +		Map<String, Object> mergedModel = getModelAttributes(model, exchange);, +	protected Map<String, Object> getModelAttributes(Map<String, ?> model, ServerWebExchange exchange) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/HttpMessageWriterView.java, +, +	public Mono<Void> render(Map<String, ?> model, MediaType contentType,, +			ServerWebExchange exchange) {, +		Object value = extractObjectToRender(model);, +	protected Object extractObjectToRender(Map<String, ?> model) {, +		for (Map.Entry<String, ?> entry : model.entrySet()) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/View.java, +, +import java.util.Map;, +	 * @param model Map with name Strings as keys and corresponding model, +	 * objects as values (Map can also be {@code null} in case of empty model), +	Mono<Void> render(Map<String, ?> model, MediaType contentType, ServerWebExchange exchange);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, +, +		Map<String, ?> model = result.getModel();, +				return ((View) view).render(model, null, exchange);, +				return resolveAndRender(viewName, locale, model, exchange);, +			Map<String, ?> model, ServerWebExchange exchange) {, +									return view.render(model, bestMediaType, exchange);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java, +	 * @param model Map with name Strings as keys and corresponding model, +	 * objects as values (Map can also be {@code null} in case of empty model), +	public Mono<Void> render(Map<String, ?> model, MediaType contentType,, +			logger.trace("Rendering view with model " + model);, +		Map<String, Object> mergedModel = getModelAttributes(model, exchange);, +	protected Map<String, Object> getModelAttributes(Map<String, ?> model, ServerWebExchange exchange) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/HttpMessageWriterView.java, +, +	public Mono<Void> render(Map<String, ?> model, MediaType contentType,, +			ServerWebExchange exchange) {, +		Object value = extractObjectToRender(model);, +	protected Object extractObjectToRender(Map<String, ?> model) {, +		for (Map.Entry<String, ?> entry : model.entrySet()) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/View.java, +, +import java.util.Map;, +	 * @param model Map with name Strings as keys and corresponding model, +	 * objects as values (Map can also be {@code null} in case of empty model), +	Mono<Void> render(Map<String, ?> model, MediaType contentType, ServerWebExchange exchange);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, +, +		Map<String, ?> model = result.getModel();, +				return ((View) view).render(model, null, exchange);, +				return resolveAndRender(viewName, locale, model, exchange);, +			Map<String, ?> model, ServerWebExchange exchange) {, +									return view.render(model, bestMediaType, exchange);, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/view/HttpMessageWriterViewTests.java, +import static org.junit.Assert.*;, +		assertEquals("bar2", this.view.extractObjectToRender(this.model));, +		assertNull(this.view.extractObjectToRender(this.model));, +		Object value = this.view.extractObjectToRender(this.model);]