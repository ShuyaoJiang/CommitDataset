[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +		}, +		else {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +		}, +		else {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/DirectFieldAccessor.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.core.convert.ConversionException;, +import org.springframework.core.convert.ConverterNotFoundException;, +		catch (ConverterNotFoundException ex) {, +			PropertyChangeEvent pce = new PropertyChangeEvent(this.target, propertyName, oldValue, newValue);, +			throw new ConversionNotSupportedException(pce, field.getType(), ex);, +		catch (ConversionException ex) {, +		catch (IllegalArgumentException ex) {, +			PropertyChangeEvent pce = new PropertyChangeEvent(this.target, propertyName, oldValue, newValue);, +			throw new TypeMismatchException(pce, field.getType(), ex);, +		}, +		catch (IllegalAccessException ex) {, +			throw new InvalidPropertyException(this.target.getClass(), propertyName, "Field is not accessible", ex);, +		}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +		}, +		else {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/DirectFieldAccessor.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.core.convert.ConversionException;, +import org.springframework.core.convert.ConverterNotFoundException;, +		catch (ConverterNotFoundException ex) {, +			PropertyChangeEvent pce = new PropertyChangeEvent(this.target, propertyName, oldValue, newValue);, +			throw new ConversionNotSupportedException(pce, field.getType(), ex);, +		catch (ConversionException ex) {, +		catch (IllegalArgumentException ex) {, +			PropertyChangeEvent pce = new PropertyChangeEvent(this.target, propertyName, oldValue, newValue);, +			throw new TypeMismatchException(pce, field.getType(), ex);, +		}, +		catch (IllegalAccessException ex) {, +			throw new InvalidPropertyException(this.target.getClass(), propertyName, "Field is not accessible", ex);, +		}, +++ b/org.springframework.context/src/main/java/org/springframework/validation/DataBinder.java, +		Assert.state(this.conversionService == null, "DataBinder is already initialized with ConversionService");, +		if (this.bindingResult != null && conversionService != null) {, +			this.bindingResult.initConversion(conversionService);, +		}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +		}, +		else {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/DirectFieldAccessor.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.core.convert.ConversionException;, +import org.springframework.core.convert.ConverterNotFoundException;, +		catch (ConverterNotFoundException ex) {, +			PropertyChangeEvent pce = new PropertyChangeEvent(this.target, propertyName, oldValue, newValue);, +			throw new ConversionNotSupportedException(pce, field.getType(), ex);, +		catch (ConversionException ex) {, +		catch (IllegalArgumentException ex) {, +			PropertyChangeEvent pce = new PropertyChangeEvent(this.target, propertyName, oldValue, newValue);, +			throw new TypeMismatchException(pce, field.getType(), ex);, +		}, +		catch (IllegalAccessException ex) {, +			throw new InvalidPropertyException(this.target.getClass(), propertyName, "Field is not accessible", ex);, +		}, +++ b/org.springframework.context/src/main/java/org/springframework/validation/DataBinder.java, +		Assert.state(this.conversionService == null, "DataBinder is already initialized with ConversionService");, +		if (this.bindingResult != null && conversionService != null) {, +			this.bindingResult.initConversion(conversionService);, +		}, +++ b/org.springframework.context/src/test/java/org/springframework/validation/DataBinderTests.java, + * Copyright 2002-2010 the original author or authors., +	public void testBindingErrorWithFormatter() {, +		TestBean tb = new TestBean();, +		DataBinder binder = new DataBinder(tb);, +		FormattingConversionService conversionService = new FormattingConversionService();, +		ConversionServiceFactory.addDefaultConverters(conversionService);, +		conversionService.addFormatterForFieldType(Float.class, new NumberFormatter());, +		binder.setConversionService(conversionService);, +		MutablePropertyValues pvs = new MutablePropertyValues();, +		pvs.add("myFloat", "1x2");, +, +		LocaleContextHolder.setLocale(Locale.GERMAN);, +		try {, +			binder.bind(pvs);, +			assertEquals(new Float(0.0), tb.getMyFloat());, +			assertEquals("1x2", binder.getBindingResult().getFieldValue("myFloat"));, +			assertTrue(binder.getBindingResult().hasFieldErrors("myFloat"));, +		}, +		finally {, +			LocaleContextHolder.resetLocaleContext();, +		}, +	}, +, +	public void testBindingWithFormatterAgainstFields() {, +		TestBean tb = new TestBean();, +		DataBinder binder = new DataBinder(tb);, +		FormattingConversionService conversionService = new FormattingConversionService();, +		ConversionServiceFactory.addDefaultConverters(conversionService);, +		conversionService.addFormatterForFieldType(Float.class, new NumberFormatter());, +		binder.setConversionService(conversionService);, +		binder.initDirectFieldAccess();, +		MutablePropertyValues pvs = new MutablePropertyValues();]