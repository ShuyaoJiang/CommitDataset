[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/TypedStringValue.java, + * Copyright 2002-2010 the original author or authors., +	private volatile Object targetType;, +		Object targetTypeValue = this.targetType;, +		if (!(targetTypeValue instanceof Class)) {, +		return (Class) targetTypeValue;, +		Object targetTypeValue = this.targetType;, +		if (targetTypeValue instanceof Class) {, +			return ((Class) targetTypeValue).getName();, +			return (String) targetTypeValue;, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/TypedStringValue.java, + * Copyright 2002-2010 the original author or authors., +	private volatile Object targetType;, +		Object targetTypeValue = this.targetType;, +		if (!(targetTypeValue instanceof Class)) {, +		return (Class) targetTypeValue;, +		Object targetTypeValue = this.targetType;, +		if (targetTypeValue instanceof Class) {, +			return ((Class) targetTypeValue).getName();, +			return (String) targetTypeValue;, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionValueResolver.java, + * Copyright 2002-2010 the original author or authors., +			    resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)));, +			    resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)));, +			resolved.add(resolveValueIfNecessary(new KeyedArgName(argName, i), m));, +					new KeyedArgName(argName, entry.getKey()), entry.getValue());, +, +	/**, +	 * Holder class used for delayed toString building., +	 */, +	private static class KeyedArgName {, +, +		private final Object argName;, +, +		private final Object key;, +, +		public KeyedArgName(Object argName, Object key) {, +			this.argName = argName;, +			this.key = key;, +		}, +, +		@Override, +		public String toString() {, +			return this.argName + " with key " + BeanWrapper.PROPERTY_KEY_PREFIX +, +					this.key + BeanWrapper.PROPERTY_KEY_SUFFIX;, +		}, +	}, +]