[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +import java.util.Optional;, +	private static Class<?> javaUtilOptionalClass = null;, +, +		try {, +			javaUtilOptionalClass =, +					ClassUtils.forName("java.util.Optional", DefaultListableBeanFactory.class.getClassLoader());, +		}, +		catch (ClassNotFoundException ex) {, +			// Java 8 not available - Optional references simply not supported then., +		}, +		else if (descriptor.getDependencyType().equals(javaUtilOptionalClass)) {, +			return new OptionalDependencyFactory().createOptionalDependency(descriptor, beanName);, +		}, +, +	/**, +	 * Separate inner class for avoiding a hard dependency on the {@code javax.inject} API., +	 */, +	private class OptionalDependencyFactory {, +, +		public Object createOptionalDependency(DependencyDescriptor descriptor, String beanName) {, +			DependencyDescriptor descriptorToUse = new DependencyDescriptor(descriptor) {, +				@Override, +				public boolean isRequired() {, +					return false;, +				}, +			};, +			descriptorToUse.increaseNestingLevel();, +			return Optional.ofNullable(doResolveDependency(descriptorToUse, beanName, null, null));, +		}, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +import java.util.Optional;, +	private static Class<?> javaUtilOptionalClass = null;, +, +		try {, +			javaUtilOptionalClass =, +					ClassUtils.forName("java.util.Optional", DefaultListableBeanFactory.class.getClassLoader());, +		}, +		catch (ClassNotFoundException ex) {, +			// Java 8 not available - Optional references simply not supported then., +		}, +		else if (descriptor.getDependencyType().equals(javaUtilOptionalClass)) {, +			return new OptionalDependencyFactory().createOptionalDependency(descriptor, beanName);, +		}, +, +	/**, +	 * Separate inner class for avoiding a hard dependency on the {@code javax.inject} API., +	 */, +	private class OptionalDependencyFactory {, +, +		public Object createOptionalDependency(DependencyDescriptor descriptor, String beanName) {, +			DependencyDescriptor descriptorToUse = new DependencyDescriptor(descriptor) {, +				@Override, +				public boolean isRequired() {, +					return false;, +				}, +			};, +			descriptorToUse.increaseNestingLevel();, +			return Optional.ofNullable(doResolveDependency(descriptorToUse, beanName, null, null));, +		}, +	}, +, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/InjectAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2014 the original author or authors., +import java.util.Optional;, +	@Test, +	public void testOptionalFieldInjectionWithBeanAvailable() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(OptionalFieldInjectionBean.class));, +		bf.registerBeanDefinition("testBean", new RootBeanDefinition(TestBean.class));, +, +		OptionalFieldInjectionBean bean = (OptionalFieldInjectionBean) bf.getBean("annotatedBean");, +		assertTrue(bean.getTestBean().isPresent());, +		assertSame(bf.getBean("testBean"), bean.getTestBean().get());, +		bf.destroySingletons();, +	}, +, +	@Test, +	public void testOptionalFieldInjectionWithBeanNotAvailable() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(OptionalFieldInjectionBean.class));, +, +		OptionalFieldInjectionBean bean = (OptionalFieldInjectionBean) bf.getBean("annotatedBean");, +		assertFalse(bean.getTestBean().isPresent());, +		bf.destroySingletons();, +	}, +, +	@Test, +	public void testOptionalMethodInjectionWithBeanAvailable() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);]