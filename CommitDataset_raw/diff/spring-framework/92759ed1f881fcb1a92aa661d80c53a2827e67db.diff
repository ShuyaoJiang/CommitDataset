[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/InterceptorsBeanDefinitionParser.java, + * Copyright 2002-2012 the original author or authors., +			String[] includePatterns = null;, +			String[] excludePatterns = null;, +				includePatterns = getIncludePatterns(interceptor, "mapping");, +				excludePatterns = getIncludePatterns(interceptor, "exclude-mapping");, +			mappedInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0, includePatterns);, +			mappedInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(1, excludePatterns);, +			mappedInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(2, interceptorBean);, +	private String[] getIncludePatterns(Element interceptor, String elementName) {, +		List<Element> paths = DomUtils.getChildElementsByTagName(interceptor, elementName);, +		String[] patterns = new String[paths.size()];, +		for (int i = 0; i < paths.size(); i++) {, +			patterns[i] = paths.get(i).getAttribute("path");, +		}, +		return patterns;, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/InterceptorsBeanDefinitionParser.java, + * Copyright 2002-2012 the original author or authors., +			String[] includePatterns = null;, +			String[] excludePatterns = null;, +				includePatterns = getIncludePatterns(interceptor, "mapping");, +				excludePatterns = getIncludePatterns(interceptor, "exclude-mapping");, +			mappedInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0, includePatterns);, +			mappedInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(1, excludePatterns);, +			mappedInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(2, interceptorBean);, +	private String[] getIncludePatterns(Element interceptor, String elementName) {, +		List<Element> paths = DomUtils.getChildElementsByTagName(interceptor, elementName);, +		String[] patterns = new String[paths.size()];, +		for (int i = 0; i < paths.size(); i++) {, +			patterns[i] = paths.get(i).getAttribute("path");, +		}, +		return patterns;, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorRegistration.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.util.CollectionUtils;, + * Assists with the creation of a {@link MappedInterceptor}., +	private final List<String> includePatterns = new ArrayList<String>();, +, +	private final List<String> excludePatterns = new ArrayList<String>();, +	 * Add URL patterns to which the registered interceptor should apply to., +	public InterceptorRegistration addPathPatterns(String... patterns) {, +		this.includePatterns.addAll(Arrays.asList(patterns));, +		return this;, +	}, +, +	/**, +	 * Add URL patterns to which the registered interceptor should not apply to., +	 */, +	public InterceptorRegistration excludePathPatterns(String... patterns) {, +		this.excludePatterns.addAll(Arrays.asList(patterns));, +		return this;, +		if (this.includePatterns.isEmpty()) {, +			return this.interceptor;, +		return new MappedInterceptor(toArray(this.includePatterns), toArray(this.excludePatterns), interceptor);, +	}, +, +	private static String[] toArray(List<String> list) {, +		if (CollectionUtils.isEmpty(list)) {, +			return null;, +		}, +		else {, +			return list.toArray(new String[list.size()]);, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/InterceptorsBeanDefinitionParser.java, + * Copyright 2002-2012 the original author or authors., +			String[] includePatterns = null;, +			String[] excludePatterns = null;, +				includePatterns = getIncludePatterns(interceptor, "mapping");, +				excludePatterns = getIncludePatterns(interceptor, "exclude-mapping");, +			mappedInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0, includePatterns);, +			mappedInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(1, excludePatterns);, +			mappedInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(2, interceptorBean);, +	private String[] getIncludePatterns(Element interceptor, String elementName) {, +		List<Element> paths = DomUtils.getChildElementsByTagName(interceptor, elementName);, +		String[] patterns = new String[paths.size()];, +		for (int i = 0; i < paths.size(); i++) {, +			patterns[i] = paths.get(i).getAttribute("path");, +		}, +		return patterns;, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorRegistration.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.util.CollectionUtils;, + * Assists with the creation of a {@link MappedInterceptor}., +	private final List<String> includePatterns = new ArrayList<String>();, +, +	private final List<String> excludePatterns = new ArrayList<String>();, +	 * Add URL patterns to which the registered interceptor should apply to., +	public InterceptorRegistration addPathPatterns(String... patterns) {, +		this.includePatterns.addAll(Arrays.asList(patterns));, +		return this;, +	}, +, +	/**, +	 * Add URL patterns to which the registered interceptor should not apply to.]