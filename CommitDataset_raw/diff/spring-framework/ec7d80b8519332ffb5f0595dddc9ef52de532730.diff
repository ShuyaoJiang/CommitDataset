[+++ b/spring-web/src/main/java/org/springframework/web/filter/OncePerRequestFilter.java, + * Copyright 2002-2014 the original author or authors., + * {@link javax.servlet.DispatcherType#REQUEST REQUEST} or, + * {@link javax.servlet.DispatcherType#ASYNC ASYNC} dispatches that occur in, + * {@link javax.servlet.DispatcherType#ERROR ERROR}. Sub-classes can override, +	 * <p>The default implementation takes the configured name of the concrete filter, +++ b/spring-web/src/main/java/org/springframework/web/filter/OncePerRequestFilter.java, + * Copyright 2002-2014 the original author or authors., + * {@link javax.servlet.DispatcherType#REQUEST REQUEST} or, + * {@link javax.servlet.DispatcherType#ASYNC ASYNC} dispatches that occur in, + * {@link javax.servlet.DispatcherType#ERROR ERROR}. Sub-classes can override, +	 * <p>The default implementation takes the configured name of the concrete filter, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, + * Copyright 2002-2014 the original author or authors., + * Extends {@link AbstractMessageConverterMethodArgumentResolver} with the ability to handle, + * method return values by writing to the response with {@link HttpMessageConverter}s., +, +		this.contentNegotiationManager = (manager != null ? manager : new ContentNegotiationManager());, +, +	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest), +, +	protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType,, +			ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage), +		for (MediaType requestedType : requestedMediaTypes) {, +			for (MediaType producibleType : producibleMediaTypes) {, +				if (requestedType.isCompatibleWith(producibleType)) {, +					compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType));, +			for (HttpMessageConverter<?> messageConverter : this.messageConverters) {, +		throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes);, +		else if (!this.allSupportedMediaTypes.isEmpty()) {, +			for (HttpMessageConverter<?> converter : this.messageConverters) {, +		return (mediaTypes.isEmpty() ? Collections.singletonList(MediaType.ALL) : mediaTypes);, +		MediaType produceTypeToUse = produceType.copyQualityValue(acceptType);, +		return (MediaType.SPECIFICITY_COMPARATOR.compare(acceptType, produceTypeToUse) <= 0 ? acceptType : produceTypeToUse);]