[+++ b/org.springframework.test/src/main/java/org/springframework/mock/web/MockExpressionEvaluator.java, + * Mock implementation of the JSP 2.0, + * {@link javax.servlet.jsp.el.ExpressionEvaluator} interface, delegating to the, + * Jakarta JSTL ExpressionEvaluatorManager., + * <p>, + * Used for testing the web framework; only necessary for testing applications, + * when testing custom JSP tags., + * <p>, + * Note that the Jakarta JSTL implementation (jstl.jar, standard.jar) has to be, + * available on the class path to use this expression evaluator., +@SuppressWarnings("deprecation"), +	 * , +	@SuppressWarnings("rawtypes"), +	public Expression parseExpression(final String expression, final Class expectedType,, +			final FunctionMapper functionMapper) throws ELException {, +, +	@SuppressWarnings("rawtypes"), +	public Object evaluate(String expression, Class expectedType, VariableResolver variableResolver,, +			FunctionMapper functionMapper) throws ELException {, +	@SuppressWarnings("rawtypes"), +	protected Object doEvaluate(String expression, Class expectedType, FunctionMapper functionMapper), +++ b/org.springframework.test/src/main/java/org/springframework/mock/web/MockExpressionEvaluator.java, + * Mock implementation of the JSP 2.0, + * {@link javax.servlet.jsp.el.ExpressionEvaluator} interface, delegating to the, + * Jakarta JSTL ExpressionEvaluatorManager., + * <p>, + * Used for testing the web framework; only necessary for testing applications, + * when testing custom JSP tags., + * <p>, + * Note that the Jakarta JSTL implementation (jstl.jar, standard.jar) has to be, + * available on the class path to use this expression evaluator., +@SuppressWarnings("deprecation"), +	 * , +	@SuppressWarnings("rawtypes"), +	public Expression parseExpression(final String expression, final Class expectedType,, +			final FunctionMapper functionMapper) throws ELException {, +, +	@SuppressWarnings("rawtypes"), +	public Object evaluate(String expression, Class expectedType, VariableResolver variableResolver,, +			FunctionMapper functionMapper) throws ELException {, +	@SuppressWarnings("rawtypes"), +	protected Object doEvaluate(String expression, Class expectedType, FunctionMapper functionMapper), +++ b/org.springframework.test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +, + * <p>, + * Used for testing the web framework; also useful for testing application, + * controllers., +	 * , +	 * , +	 * , +	 * @param servletContext the ServletContext that the request runs in (may be, +	 * <code>null</code> to use a default MockServletContext), +	 * , +	 * @param servletContext the ServletContext that the request runs in (may be, +	 * <code>null</code> to use a default MockServletContext), +	 * Return the ServletContext that this request is associated with. (Not, +	 * available in the standard HttpServletRequest interface for some reason.), +	 * <p>, +	 * If there are already one or more values registered for the given, +	 * <p>, +	 * If there are already one or more values registered for the given, +	 * Sets all provided parameters <emphasis>replacing</emphasis> any existing, +	 * values for the provided parameter names. To add without replacing, +	 * existing values, use {@link #addParameters(java.util.Map)}., +	@SuppressWarnings("rawtypes"), +			Assert.isInstanceOf(String.class, key, "Parameter map key must be of type [" + String.class.getName() + "]");, +				throw new IllegalArgumentException("Parameter map value must be single value " + " or array of type [", +						+ String.class.getName() + "]");, +	 * <p>, +	 * If there are already one or more values registered for the given, +	 * <p>, +	 * If there are already one or more values registered for the given, +	 * Adds all provided parameters <emphasis>without</emphasis> replacing any, +	 * existing values. To replace existing values, use, +	@SuppressWarnings("rawtypes"), +			Assert.isInstanceOf(String.class, key, "Parameter map key must be of type [" + String.class.getName() + "]");, +				throw new IllegalArgumentException("Parameter map value must be single value " + " or array of type [", +						+ String.class.getName() + "]");, +	 * Remove already registered values for the specified HTTP parameter, if, +	 * any., +			Reader sourceReader = (this.characterEncoding != null) ? new InputStreamReader(sourceStream,, +				this.characterEncoding) : new InputStreamReader(sourceStream);, +	 * <p>, +	 * If there was no entry for that header name before, the value will be used, +	 * as-is. In case of an existing entry, a String array will be created,, +	 * adding the given value (more specifically, its toString representation), +	 * as further element., +	 * <p>, +	 * Multiple values can only be stored as list of Strings, following the, +	 * Servlet spec (see <code>getHeaders</code> accessor). As alternative to, +	 * repeated <code>addHeader</code> calls for individual elements, you can, +	 * use a single call with an entire array or Collection of values as, +	 * parameter., +	 * , +	@SuppressWarnings("rawtypes"), +			throw new IllegalArgumentException("Value for header '" + name + "' is neither a Date nor a Number: ", +					+ value);, +++ b/org.springframework.test/src/main/java/org/springframework/mock/web/MockExpressionEvaluator.java, + * Mock implementation of the JSP 2.0, + * {@link javax.servlet.jsp.el.ExpressionEvaluator} interface, delegating to the]