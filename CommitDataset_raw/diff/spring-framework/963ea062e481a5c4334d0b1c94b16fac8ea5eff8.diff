[+++ b/src/asciidoc/images/web-reactive-overview.png, +++ b/src/asciidoc/images/web-reactive-overview.png, +++ b/src/asciidoc/web-reactive.adoc, +Spring Framework 5 adds a new `spring-web-reactive` module that provides both reactive, +client and server., +[[web-reactive-server]], +=== Reactive Web Server, +The reactive web server is available in 2 flavors:, +* With the same `@Controller` annotation-based programming model than Spring MVC, +* With a new functional programming model using Java 8 lambdas, +, +When using Spring Web Reactive, regardless of the programming model you choose, your, +application is executed on a reactive non-blocking engine. The diagram below shows how, +Spring MVC and Spring Web Reactive compare side by side:, +JSON or XML REST webservices are supported, as well as view rendering, server-sent events, +and Websocket., +[[web-reactive-server-annotation]], +==== Annotation-based programming model, +, +The `@Controller` programming model supported by Spring Web Reactive re-defines many of, +the Spring MVC contracts such as `HandlerMapping` and `HandlerAdapter` to be asynchronous, +and non-blocking and to operate on the reactive HTTP request and response. For this reason, +Here is an example of a reactive controller declared with annotations:, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +@RestController, +public class PersonController {, +	private final PersonRepository repository;, +	public PersonController(PersonRepository repository) {, +		this.repository = repository;, +	}, +, +	@PostMapping("/person"), +	Mono<Void> create(@RequestBody Publisher<Person> personStream) {, +		return this.repository.save(personStream).then();, +	}, +, +	@GetMapping("/person"), +	Flux<Person> list() {, +		return this.repository.findAll();, +	}, +, +	@GetMapping("/person/{id}"), +	Mono<Person> findById(@PathVariable String id) {, +		return this.repository.findOne(id);, +	}, +}, +----, +, +[[web-reactive-server-functional]], +==== Functional programming model, +, +The functional programming model uses Java 8 lambdas instead of annotations to allow you, +to create a web application. It is built on top of simple but powerful building blocks like, +`RouterFunction` and `HandlerFunction`. For more details, see this, +https://spring.io/blog/2016/09/22/new-in-spring-5-functional-web-framework[blog post]., +, +Here is an example of a Spring web functional controller:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +PersonRepository repository = ..., +, +RouterFunctions, +	.route(GET("/person/{id}").and(accept(APPLICATION_JSON)), request -> {, +		int personId = Integer.valueOf(request.pathVariable("id"));, +		Mono<ServerResponse> notFound = ServerResponse.notFound().build();, +		return repository.findOne(personId), +				.then(person -> ServerResponse.ok().body(Mono.just(person), Person.class)), +				.otherwiseIfEmpty(notFound);, +	}), +, +	.andRoute(GET("/person").and(accept(APPLICATION_JSON)), request ->, +			ServerResponse.ok().body(repository.findAll(), Person.class)), +, +	.andRoute(POST("/person").and(contentType(APPLICATION_JSON)), request ->, +			ServerResponse.ok().build(repository.save(request.bodyToMono(Person.class))));, +----, +Spring Framework 5 adds a new reactive `WebClient` in addition to the existing `RestTemplate`, +and `AsyncRestTemplate`. In addition to a revised API, a big difference between, +`AsyncRestTemplate` and the reactive `WebClient` is that the later allows to consume, +streaming APIs like https://dev.twitter.com/streaming/overview[Twitter one] for example., +				.then(response -> response.bodyToMono(Account.class));, +A `WebSocketClient` is also available., +, +[[web-reactive-http-body]], +=== Reading and writing HTTP body, +, +The `spring-core` module provides reactive `Encoder` and `Decoder` contracts, +that enable the serialization of a `Flux` of bytes to and from typed objects., +The `spring-web` module adds JSON (Jackson) and XML (JAXB) implementations for use in, +web applications as well as others for SSE streaming and zero-copy file transfer., +, +Whether you use the annotation-based or functional programming model, the request body, +provided can be for example one of the following ways:, +, +* `Account account` -- the account is deserialized without, +blocking before the controller is invoked.]