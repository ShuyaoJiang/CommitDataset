[+++ b/org.springframework.web/src/main/java/org/springframework/http/converter/json/MappingJacksonHttpMessageConverter.java, +import javax.xml.bind.Marshaller;, +import javax.xml.bind.PropertyException;, +, +import org.codehaus.jackson.type.JavaType;, +import org.codehaus.jackson.map.type.TypeFactory;, + * #setSupportedMediaTypes(List) supportedMediaTypes} property., +public class MappingJacksonHttpMessageConverter extends AbstractHttpMessageConverter<Object> {, +, +	public static final Charset DEFAULT_CHARSET = Charset.forName("UTF-8");, +		super(new MediaType("application", "json", DEFAULT_CHARSET));, +	public boolean canRead(Class<?> clazz, MediaType mediaType) {, +		JavaType javaType = TypeFactory.fromClass(clazz);, +		return objectMapper.canDeserialize(javaType) && isSupported(mediaType);, +	public boolean canWrite(Class<?> clazz, MediaType mediaType) {, +		return objectMapper.canSerialize(clazz) && isSupported(mediaType);, +	}, +, +	@Override, +	protected boolean supports(Class<?> clazz) {, +		// should not be called, since we override canRead/Write, +		throw new UnsupportedOperationException();, +	}, +, +	@Override, +	protected Object readInternal(Class<Object> clazz, HttpInputMessage inputMessage), +	protected void writeInternal(Object o, HttpOutputMessage outputMessage), +		JsonEncoding encoding = getEncoding(outputMessage.getHeaders().getContentType());, +		objectMapper.writeValue(jsonGenerator, o);, +, +	private JsonEncoding getEncoding(MediaType contentType) {, +		if (contentType != null && contentType.getCharSet() != null) {, +			Charset charset = contentType.getCharSet();, +			for (JsonEncoding encoding : JsonEncoding.values()) {, +				if (charset.name().equals(encoding.getJavaName())) {, +					return encoding;, +				}, +			}, +		}, +		return JsonEncoding.UTF8;, +	}, +, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/json/MappingJacksonHttpMessageConverter.java, +import javax.xml.bind.Marshaller;, +import javax.xml.bind.PropertyException;, +, +import org.codehaus.jackson.type.JavaType;, +import org.codehaus.jackson.map.type.TypeFactory;, + * #setSupportedMediaTypes(List) supportedMediaTypes} property., +public class MappingJacksonHttpMessageConverter extends AbstractHttpMessageConverter<Object> {, +, +	public static final Charset DEFAULT_CHARSET = Charset.forName("UTF-8");, +		super(new MediaType("application", "json", DEFAULT_CHARSET));, +	public boolean canRead(Class<?> clazz, MediaType mediaType) {, +		JavaType javaType = TypeFactory.fromClass(clazz);, +		return objectMapper.canDeserialize(javaType) && isSupported(mediaType);, +	public boolean canWrite(Class<?> clazz, MediaType mediaType) {, +		return objectMapper.canSerialize(clazz) && isSupported(mediaType);, +	}, +, +	@Override, +	protected boolean supports(Class<?> clazz) {, +		// should not be called, since we override canRead/Write, +		throw new UnsupportedOperationException();, +	}, +, +	@Override, +	protected Object readInternal(Class<Object> clazz, HttpInputMessage inputMessage), +	protected void writeInternal(Object o, HttpOutputMessage outputMessage), +		JsonEncoding encoding = getEncoding(outputMessage.getHeaders().getContentType());, +		objectMapper.writeValue(jsonGenerator, o);, +, +	private JsonEncoding getEncoding(MediaType contentType) {, +		if (contentType != null && contentType.getCharSet() != null) {, +			Charset charset = contentType.getCharSet();, +			for (JsonEncoding encoding : JsonEncoding.values()) {, +				if (charset.name().equals(encoding.getJavaName())) {, +					return encoding;, +				}, +			}, +		}, +		return JsonEncoding.UTF8;, +	}, +, +++ b/org.springframework.web/src/test/java/org/springframework/http/converter/json/MappingJacksonHttpMessageConverterTests.java, +import java.util.Map;, +	private MappingJacksonHttpMessageConverter converter;, +		converter = new MappingJacksonHttpMessageConverter();, +	public void canRead() {, +		assertTrue(converter.canRead(MyBean.class, new MediaType("application", "json")));, +		assertTrue(converter.canRead(Map.class, new MediaType("application", "json")));, +	public void canWrite() {, +		assertTrue(converter.canWrite(MyBean.class, new MediaType("application", "json")));, +		assertTrue(converter.canWrite(Map.class, new MediaType("application", "json")));, +	}, +, +	@Test, +	@SuppressWarnings("unchecked"), +		MyBean result = (MyBean) converter.read((Class) MyBean.class, inputMessage);, +	@SuppressWarnings("unchecked")]