[+++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +, +		this.scopeMetadataResolver =, +				(scopeMetadataResolver != null ? scopeMetadataResolver : new AnnotationScopeMetadataResolver());, +				}, +				else if (Lazy.class.equals(qualifier)) {, +				}, +				else {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +, +		this.scopeMetadataResolver =, +				(scopeMetadataResolver != null ? scopeMetadataResolver : new AnnotationScopeMetadataResolver());, +				}, +				else if (Lazy.class.equals(qualifier)) {, +				}, +				else {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java, +	 * <p>The default implementation delegates to {@link #buildDefaultBeanName(BeanDefinition)}., +		return buildDefaultBeanName(definition);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +, +		this.scopeMetadataResolver =, +				(scopeMetadataResolver != null ? scopeMetadataResolver : new AnnotationScopeMetadataResolver());, +				}, +				else if (Lazy.class.equals(qualifier)) {, +				}, +				else {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java, +	 * <p>The default implementation delegates to {@link #buildDefaultBeanName(BeanDefinition)}., +		return buildDefaultBeanName(definition);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +	private final BeanNameGenerator importBeanNameGenerator;, +			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator) {, +		this.importBeanNameGenerator = importBeanNameGenerator;, +		if (configClass.isImported()) {, +			registerBeanDefinitionForImportedConfigurationClass(configClass);, +		}, +	private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {, +			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +, +		this.scopeMetadataResolver =, +				(scopeMetadataResolver != null ? scopeMetadataResolver : new AnnotationScopeMetadataResolver());, +				}, +				else if (Lazy.class.equals(qualifier)) {, +				}, +				else {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java, +	 * <p>The default implementation delegates to {@link #buildDefaultBeanName(BeanDefinition)}., +		return buildDefaultBeanName(definition);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +	private final BeanNameGenerator importBeanNameGenerator;, +			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator) {, +		this.importBeanNameGenerator = importBeanNameGenerator;, +		if (configClass.isImported()) {, +			registerBeanDefinitionForImportedConfigurationClass(configClass);, +		}, +	private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {, +			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +			ProblemReporter problemReporter, Environment environment, ResourceLoader resourceLoader,, +			BeanNameGenerator componentScanBeanNameGenerator, BeanDefinitionRegistry registry) {, +				resourceLoader, environment, componentScanBeanNameGenerator, registry);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +, +		this.scopeMetadataResolver =, +				(scopeMetadataResolver != null ? scopeMetadataResolver : new AnnotationScopeMetadataResolver());, +				}, +				else if (Lazy.class.equals(qualifier)) {, +				}, +				else {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java, +	 * <p>The default implementation delegates to {@link #buildDefaultBeanName(BeanDefinition)}., +		return buildDefaultBeanName(definition);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +	private final BeanNameGenerator importBeanNameGenerator;, +			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator) {, +		this.importBeanNameGenerator = importBeanNameGenerator;, +		if (configClass.isImported()) {, +			registerBeanDefinitionForImportedConfigurationClass(configClass);, +		}, +	private void registerBeanDefinitionForImportedConfigurationClass(ConfigurationClass configClass) {, +			String configBeanName = this.importBeanNameGenerator.generateBeanName(configBeanDef, this.registry);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +			ProblemReporter problemReporter, Environment environment, ResourceLoader resourceLoader,, +			BeanNameGenerator componentScanBeanNameGenerator, BeanDefinitionRegistry registry) {, +				resourceLoader, environment, componentScanBeanNameGenerator, registry);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +	private static final String IMPORT_AWARE_PROCESSOR_BEAN_NAME =, +			ConfigurationClassPostProcessor.class.getName() + ".importAwareProcessor";, +, +	private static final String IMPORT_REGISTRY_BEAN_NAME =, +			ConfigurationClassPostProcessor.class.getName() + ".importRegistry";, +, +, +	private boolean localBeanNameGeneratorSet = false;, +, +	/* using short class names as default bean names */, +	private BeanNameGenerator componentScanBeanNameGenerator = new AnnotationBeanNameGenerator();, +]