[+++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationScopeMetadataResolver.java, + * Copyright 2002-2016 the original author or authors., +			AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(, +					annDef.getMetadata(), this.scopeAnnotationType);, +				metadata.setScopeName(attributes.getString("value"));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationScopeMetadataResolver.java, + * Copyright 2002-2016 the original author or authors., +			AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(, +					annDef.getMetadata(), this.scopeAnnotationType);, +				metadata.setScopeName(attributes.getString("value"));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, +		String[] basePackagesArray = componentScan.getStringArray("basePackages");, +		for (Class<?> filterClass : filterAttributes.getClassArray("classes")) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationScopeMetadataResolver.java, + * Copyright 2002-2016 the original author or authors., +			AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(, +					annDef.getMetadata(), this.scopeAnnotationType);, +				metadata.setScopeName(attributes.getString("value"));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, +		String[] basePackagesArray = componentScan.getStringArray("basePackages");, +		for (Class<?> filterClass : filterAttributes.getClassArray("classes")) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +			beanDef.setScope(attributes.getString("value"));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationScopeMetadataResolver.java, + * Copyright 2002-2016 the original author or authors., +			AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(, +					annDef.getMetadata(), this.scopeAnnotationType);, +				metadata.setScopeName(attributes.getString("value"));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, +		String[] basePackagesArray = componentScan.getStringArray("basePackages");, +		for (Class<?> filterClass : filterAttributes.getClassArray("classes")) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +			beanDef.setScope(attributes.getString("value"));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +			AnnotationAttributes importResource =, +					AnnotationConfigUtils.attributesFor(sourceClass.getMetadata(), ImportResource.class);, +			String[] resources = importResource.getStringArray("locations");, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationScopeMetadataResolver.java, + * Copyright 2002-2016 the original author or authors., +			AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(, +					annDef.getMetadata(), this.scopeAnnotationType);, +				metadata.setScopeName(attributes.getString("value"));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, +		String[] basePackagesArray = componentScan.getStringArray("basePackages");, +		for (Class<?> filterClass : filterAttributes.getClassArray("classes")) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +			beanDef.setScope(attributes.getString("value"));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +			AnnotationAttributes importResource =, +					AnnotationConfigUtils.attributesFor(sourceClass.getMetadata(), ImportResource.class);, +			String[] resources = importResource.getStringArray("locations");, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, +	public @interface ComposedConfiguration {, +	public @interface ComposedConfigurationWithAttributeOverrides {, +	public @interface ComposedComposedConfigurationWithAttributeOverrides {, +	public @interface MetaComponentScan {, +	public @interface MetaComponentScanConfigurationWithAttributeOverrides {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationScopeMetadataResolver.java, + * Copyright 2002-2016 the original author or authors., +			AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(, +					annDef.getMetadata(), this.scopeAnnotationType);, +				metadata.setScopeName(attributes.getString("value"));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, +		String[] basePackagesArray = componentScan.getStringArray("basePackages");, +		for (Class<?> filterClass : filterAttributes.getClassArray("classes")) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +			beanDef.setScope(attributes.getString("value"));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +			AnnotationAttributes importResource =, +					AnnotationConfigUtils.attributesFor(sourceClass.getMetadata(), ImportResource.class);, +			String[] resources = importResource.getStringArray("locations");, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, +	public @interface ComposedConfiguration {, +	public @interface ComposedConfigurationWithAttributeOverrides {, +	public @interface ComposedComposedConfigurationWithAttributeOverrides {, +	public @interface MetaComponentScan {, +	public @interface MetaComponentScanConfigurationWithAttributeOverrides {, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AbstractAliasAwareAnnotationAttributeExtractor.java, + * Copyright 2002-2016 the original author or authors., + * @see AnnotationUtils#synthesizeAnnotation(Annotation, Object), +	private final Object annotatedElement;, +			Class<? extends Annotation> annotationType, Object annotatedElement, S source) {, +	public final Object getAnnotatedElement() {, +			Object defaultValue = AnnotationUtils.getDefaultValue(this.annotationType, attributeName);, +					String elementName = (this.annotatedElement != null ? this.annotatedElement.toString() : "unknown element");, +							this.annotationType.getName(), elementName, this.source, attributeName, aliasName,, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationScopeMetadataResolver.java, + * Copyright 2002-2016 the original author or authors., +			AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(, +					annDef.getMetadata(), this.scopeAnnotationType);, +				metadata.setScopeName(attributes.getString("value"));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, +		String[] basePackagesArray = componentScan.getStringArray("basePackages");, +		for (Class<?> filterClass : filterAttributes.getClassArray("classes")) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +			beanDef.setScope(attributes.getString("value"));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +			AnnotationAttributes importResource =, +					AnnotationConfigUtils.attributesFor(sourceClass.getMetadata(), ImportResource.class);, +			String[] resources = importResource.getStringArray("locations");]