[+++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/LocalDataSourceJobStore.java, + * Copyright 2002-2013 the original author or authors., +					/* Quartz 2.2 initialize method */, +					public void initialize() {, +						// Do nothing - a Spring-managed DataSource has its own lifecycle., +					}, +		final DataSource nonTxDataSourceToUse = (nonTxDataSource != null ? nonTxDataSource : this.dataSource);, +					/* Quartz 2.2 initialize method */, +					public void initialize() {, +						// Do nothing - a Spring-managed DataSource has its own lifecycle., +					}, +		// No, if HSQL is the platform, we really don't want to use locks..., +			String productName = JdbcUtils.extractDatabaseMetaData(this.dataSource, "getDatabaseProductName").toString();, +			if (productName != null && productName.toLowerCase().contains("hsql")) {, +		}, +		catch (MetaDataAccessException ex) {, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/LocalDataSourceJobStore.java, + * Copyright 2002-2013 the original author or authors., +					/* Quartz 2.2 initialize method */, +					public void initialize() {, +						// Do nothing - a Spring-managed DataSource has its own lifecycle., +					}, +		final DataSource nonTxDataSourceToUse = (nonTxDataSource != null ? nonTxDataSource : this.dataSource);, +					/* Quartz 2.2 initialize method */, +					public void initialize() {, +						// Do nothing - a Spring-managed DataSource has its own lifecycle., +					}, +		// No, if HSQL is the platform, we really don't want to use locks..., +			String productName = JdbcUtils.extractDatabaseMetaData(this.dataSource, "getDatabaseProductName").toString();, +			if (productName != null && productName.toLowerCase().contains("hsql")) {, +		}, +		catch (MetaDataAccessException ex) {, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java, +import org.springframework.util.Assert;, +	private Class<? extends SchedulerFactory> schedulerFactoryClass = StdSchedulerFactory.class;, +    private Map<String, ?> schedulerContextMap;, +	 * <p>Default is {@link StdSchedulerFactory}, reading in the standard, +	public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass) {, +		Assert.isAssignable(SchedulerFactory.class, schedulerFactoryClass);, +	public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap) {]