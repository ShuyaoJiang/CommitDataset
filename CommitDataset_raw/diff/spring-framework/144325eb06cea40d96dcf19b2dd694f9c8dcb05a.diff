[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/reflection/ReflectionPropertyResolver.java, + * if it is accessible as a field on the object or through a getter (if being read) or a setter (if being written). This, + * implementation currently follows the Resolver/Executor model (it extends CacheablePropertyAccessor) - the code that, + * would be used if it were a simple property accessor is shown at the end., +	/**, +	 * @return null which means this is a general purpose accessor, +	 */, +	public Class<?>[] getSpecificTargetClasses() {, +		return null;, +	/**, +	 * Use reflection to discover if a named property is accessible on an target type and if it is return an executor, +	 * object that can be called repeatedly to retrieve that property. A property is accessible either as a field or, +	 * through a getter., +	 * , +	 * @param context the context in which the access is being attempted, +	 * @param target the target object on which the property is being accessed, +	 * @param name the name of the property, +	 */, +	@Override, +	public PropertyReaderExecutor getReaderAccessor(EvaluationContext context, Object target, Object name) {, +			// A property not found exception will occur if the reflection finder was supposed to find it, +			return null;, +	/**, +	 * Use reflection to discover if a named property is accessible on an target type and if it is return an executor, +	 * object that can be called repeatedly to set that property. A property is writable either as a field or through a, +	 * setter., +	 * , +	 * @param context the context in which the set is being attempted, +	 * @param target the target object on which the property is being set, +	 * @param name the name of the property, +	 */, +	@Override, +			// A property not found exception will occur if the reflection finder was supposed to find it, +	// /**, +	// * Return true if the resolver is able to read the specified property from the specified target., +	// */, +	// return false;, +	//, +	// /**, +	// * Read the specified property from the specified target. //, +	// return null;, +	// public void write(EvaluationContext context, Object target, Object name, Object newValue) throws AccessException, +	// {, +	//, +	//]