[+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/AsyncTests.java, +import java.util.concurrent.CompletableFuture;, + * @author Sebastien Deleuze, +	@Test  // SPR-12597, +	public void testCompletableFuture() throws Exception {, +		MvcResult mvcResult = this.mockMvc.perform(get("/1").param("completableFuture", "true")), +				.andExpect(request().asyncStarted()), +				.andReturn();, +		this.asyncController.onMessage("Joe");, +, +		this.mockMvc.perform(asyncDispatch(mvcResult)), +				.andExpect(status().isOk()), +				.andExpect(content().contentType(MediaType.APPLICATION_JSON)), +				.andExpect(content().string("{\"name\":\"Joe\",\"someDouble\":0.0,\"someBoolean\":false}"));, +	}, +, +	@Test  // SPR-12735, +		@RequestMapping(value="/{id}", params="completableFuture", produces="application/json"), +		@ResponseBody, +		public CompletableFuture<Person> getCompletableFuture() {, +			CompletableFuture<Person> future = new CompletableFuture<Person>();, +			future.complete(new Person("Joe"));, +			return future;, +		}, +, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/AsyncTests.java, +import java.util.concurrent.CompletableFuture;, + * @author Sebastien Deleuze, +	@Test  // SPR-12597, +	public void testCompletableFuture() throws Exception {, +		MvcResult mvcResult = this.mockMvc.perform(get("/1").param("completableFuture", "true")), +				.andExpect(request().asyncStarted()), +				.andReturn();, +		this.asyncController.onMessage("Joe");, +, +		this.mockMvc.perform(asyncDispatch(mvcResult)), +				.andExpect(status().isOk()), +				.andExpect(content().contentType(MediaType.APPLICATION_JSON)), +				.andExpect(content().string("{\"name\":\"Joe\",\"someDouble\":0.0,\"someBoolean\":false}"));, +	}, +, +	@Test  // SPR-12735, +		@RequestMapping(value="/{id}", params="completableFuture", produces="application/json"), +		@ResponseBody, +		public CompletableFuture<Person> getCompletableFuture() {, +			CompletableFuture<Person> future = new CompletableFuture<Person>();, +			future.complete(new Person("Joe"));, +			return future;, +		}, +, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java, + * <li>A {@link java.util.concurrent.CompletionStage} (implemented by, + * {@link java.util.concurrent.CompletableFuture} for example), + * which the application uses to produce a return value in a separate, + * thread of its own choosing, as an alternative to returning a Callable., +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/AsyncTests.java, +import java.util.concurrent.CompletableFuture;, + * @author Sebastien Deleuze, +	@Test  // SPR-12597, +	public void testCompletableFuture() throws Exception {, +		MvcResult mvcResult = this.mockMvc.perform(get("/1").param("completableFuture", "true")), +				.andExpect(request().asyncStarted()), +				.andReturn();, +		this.asyncController.onMessage("Joe");, +, +		this.mockMvc.perform(asyncDispatch(mvcResult)), +				.andExpect(status().isOk()), +				.andExpect(content().contentType(MediaType.APPLICATION_JSON)), +				.andExpect(content().string("{\"name\":\"Joe\",\"someDouble\":0.0,\"someBoolean\":false}"));, +	}, +, +	@Test  // SPR-12735, +		@RequestMapping(value="/{id}", params="completableFuture", produces="application/json"), +		@ResponseBody, +		public CompletableFuture<Person> getCompletableFuture() {, +			CompletableFuture<Person> future = new CompletableFuture<Person>();, +			future.complete(new Person("Joe"));, +			return future;, +		}, +, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java, + * <li>A {@link java.util.concurrent.CompletionStage} (implemented by, + * {@link java.util.concurrent.CompletableFuture} for example), + * which the application uses to produce a return value in a separate, + * thread of its own choosing, as an alternative to returning a Callable., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/CompletionStageReturnValueHandler.java, +/*, + * Copyright 2002-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License.]