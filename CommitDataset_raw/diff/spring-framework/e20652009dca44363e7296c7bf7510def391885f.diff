[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitter.java, +	/** Store send data before handler is initialized */, +	private final Set<DataWithMediaType> earlySendAttempts = new LinkedHashSet<>(8);, +, +	/** Store complete invocation before handler is initialized */, +	/** Store completeWithError invocation before handler is initialized */, +	 * <p><strong>Note:</strong> if the send fails with an IOException, you do, +	 * not need to call {@link #completeWithError(Throwable)} in order to clean, +	 * up. Instead the Servlet container creates a notification that results in a, +	 * dispatch where Spring MVC invokes exception resolvers and completes, +	 * processing., +	 * Overloaded variant of {@link #send(Object)} that also accepts a MediaType, +	 * hint for how to serialize the given Object., +	 * Complete request processing by performing a dispatch into the servlet, +	 * container, where Spring MVC is invoked once more, and completes the, +	 * request processing lifecycle., +	 * <p><strong>Note:</strong> this method should be called by the application, +	 * to complete request processing. It should not be used after container, +	 * related events such as an error while {@link #send(Object) sending}., +	 * exception through its exception handling mechanism. Note however that, +	 * at this stage of request processing, the response is committed and the, +	 * response status can no longer be changed., +	 * <p><strong>Note:</strong> this method should be called by the application, +	 * to complete request processing with an error. It should not be used after, +	 * container related events such as an error while, +	 * {@link #send(Object) sending}., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitter.java, +	/** Store send data before handler is initialized */, +	private final Set<DataWithMediaType> earlySendAttempts = new LinkedHashSet<>(8);, +, +	/** Store complete invocation before handler is initialized */, +	/** Store completeWithError invocation before handler is initialized */, +	 * <p><strong>Note:</strong> if the send fails with an IOException, you do, +	 * not need to call {@link #completeWithError(Throwable)} in order to clean, +	 * up. Instead the Servlet container creates a notification that results in a, +	 * dispatch where Spring MVC invokes exception resolvers and completes, +	 * processing., +	 * Overloaded variant of {@link #send(Object)} that also accepts a MediaType, +	 * hint for how to serialize the given Object., +	 * Complete request processing by performing a dispatch into the servlet, +	 * container, where Spring MVC is invoked once more, and completes the, +	 * request processing lifecycle., +	 * <p><strong>Note:</strong> this method should be called by the application, +	 * to complete request processing. It should not be used after container, +	 * related events such as an error while {@link #send(Object) sending}., +	 * exception through its exception handling mechanism. Note however that, +	 * at this stage of request processing, the response is committed and the, +	 * response status can no longer be changed., +	 * <p><strong>Note:</strong> this method should be called by the application, +	 * to complete request processing with an error. It should not be used after, +	 * container related events such as an error while, +	 * {@link #send(Object) sending}., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/SseEmitter.java, +	 *, +	 * <p>Please, see {@link ResponseBodyEmitter#send(Object) parent Javadoc}, +	 * for important notes on exception handling., +	 *, +	 *, +	 * <p>Please, see {@link ResponseBodyEmitter#send(Object) parent Javadoc}, +	 * for important notes on exception handling., +	 *, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitter.java, +	/** Store send data before handler is initialized */, +	private final Set<DataWithMediaType> earlySendAttempts = new LinkedHashSet<>(8);, +, +	/** Store complete invocation before handler is initialized */, +	/** Store completeWithError invocation before handler is initialized */, +	 * <p><strong>Note:</strong> if the send fails with an IOException, you do, +	 * not need to call {@link #completeWithError(Throwable)} in order to clean, +	 * up. Instead the Servlet container creates a notification that results in a, +	 * dispatch where Spring MVC invokes exception resolvers and completes, +	 * processing., +	 * Overloaded variant of {@link #send(Object)} that also accepts a MediaType, +	 * hint for how to serialize the given Object., +	 * Complete request processing by performing a dispatch into the servlet, +	 * container, where Spring MVC is invoked once more, and completes the, +	 * request processing lifecycle., +	 * <p><strong>Note:</strong> this method should be called by the application, +	 * to complete request processing. It should not be used after container, +	 * related events such as an error while {@link #send(Object) sending}., +	 * exception through its exception handling mechanism. Note however that, +	 * at this stage of request processing, the response is committed and the, +	 * response status can no longer be changed., +	 * <p><strong>Note:</strong> this method should be called by the application, +	 * to complete request processing with an error. It should not be used after, +	 * container related events such as an error while, +	 * {@link #send(Object) sending}., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/SseEmitter.java, +	 *, +	 * <p>Please, see {@link ResponseBodyEmitter#send(Object) parent Javadoc}, +	 * for important notes on exception handling., +	 *, +	 *, +	 * <p>Please, see {@link ResponseBodyEmitter#send(Object) parent Javadoc}, +	 * for important notes on exception handling., +	 *, +++ b/src/docs/asciidoc/web/webmvc.adoc, +When an `emitter` throws an `IOException` (e.g. if the remote client went away) applications, +are not responsible for cleaning up the connection, and should not invoke `emitter.complete`, +or `emitter.completeWithError`. Instead the servlet container automatically initiates an]