[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +		if (AnnotationUtils.hasPlainJavaAnnotationsOnly(currentAnnotationType)) {, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +		if (AnnotationUtils.hasPlainJavaAnnotationsOnly(currentAnnotationType)) {, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +import java.lang.reflect.Member;, +	 * Determine if the {@link Annotation} with the supplied name is defined in the, +	 * {@code java.lang.annotation} or {@code org.springframework.lang} package., +	 * @param annotatedElement the potential annotation type to check, +	 * @return {@code true} if the annotation is in the {@code java.lang.annotation}, +	 * or {@code org.springframework.lang} package, +	 * @since 5.1, +	 */, +	static boolean hasPlainJavaAnnotationsOnly(@Nullable Object annotatedElement) {, +		Class<?> clazz;, +		if (annotatedElement instanceof Class) {, +			clazz = (Class<?>) annotatedElement;, +		}, +		else if (annotatedElement instanceof Member) {, +			clazz = ((Member) annotatedElement).getDeclaringClass();, +		}, +		else {, +			return false;, +		}, +		String name = clazz.getName();, +		return (name.startsWith("java") || name.startsWith("org.springframework.lang."));, +	}, +, +	/**, +		if (annotation instanceof SynthesizedAnnotation || hasPlainJavaAnnotationsOnly(annotatedElement)) {, +		return synthesizeAnnotation(Collections.emptyMap(), annotationType, null);, +	static Annotation[] synthesizeAnnotationArray(Annotation[] annotations, @Nullable Object annotatedElement) {, +		if (hasPlainJavaAnnotationsOnly(annotatedElement)) {, +			return annotations;, +		}, +	static <A extends Annotation> A[] synthesizeAnnotationArray(, +			@Nullable Map<String, Object>[] maps, Class<A> annotationType) {, +, +		if (hasPlainJavaAnnotationsOnly(annotationType)) {, +			return false;, +		}, +, +		return (descriptor != null ? descriptor.getAttributeAliasNames() : Collections.emptyList());, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +		if (AnnotationUtils.hasPlainJavaAnnotationsOnly(currentAnnotationType)) {, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +import java.lang.reflect.Member;, +	 * Determine if the {@link Annotation} with the supplied name is defined in the, +	 * {@code java.lang.annotation} or {@code org.springframework.lang} package., +	 * @param annotatedElement the potential annotation type to check, +	 * @return {@code true} if the annotation is in the {@code java.lang.annotation}, +	 * or {@code org.springframework.lang} package, +	 * @since 5.1, +	 */, +	static boolean hasPlainJavaAnnotationsOnly(@Nullable Object annotatedElement) {, +		Class<?> clazz;, +		if (annotatedElement instanceof Class) {, +			clazz = (Class<?>) annotatedElement;, +		}, +		else if (annotatedElement instanceof Member) {, +			clazz = ((Member) annotatedElement).getDeclaringClass();, +		}, +		else {, +			return false;, +		}, +		String name = clazz.getName();, +		return (name.startsWith("java") || name.startsWith("org.springframework.lang."));, +	}, +, +	/**, +		if (annotation instanceof SynthesizedAnnotation || hasPlainJavaAnnotationsOnly(annotatedElement)) {, +		return synthesizeAnnotation(Collections.emptyMap(), annotationType, null);, +	static Annotation[] synthesizeAnnotationArray(Annotation[] annotations, @Nullable Object annotatedElement) {, +		if (hasPlainJavaAnnotationsOnly(annotatedElement)) {, +			return annotations;, +		}, +	static <A extends Annotation> A[] synthesizeAnnotationArray(, +			@Nullable Map<String, Object>[] maps, Class<A> annotationType) {, +, +		if (hasPlainJavaAnnotationsOnly(annotationType)) {, +			return false;, +		}, +, +		return (descriptor != null ? descriptor.getAttributeAliasNames() : Collections.emptyList());, +++ b/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationAttributesReadingVisitor.java, + * Copyright 2002-2018 the original author or authors., +		Class<? extends Annotation> annotationClass = this.attributes.annotationType();, +			if (!AnnotationUtils.isInJavaLangAnnotationPackage(annotationClass.getName())) {, +	}]