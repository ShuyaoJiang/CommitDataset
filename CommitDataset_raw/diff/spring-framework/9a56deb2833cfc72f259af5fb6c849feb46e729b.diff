[+++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextConfigurationAttributes.java, +	private String[] locations;, +	private Class<?>[] classes;, +	private final Class<? extends ContextLoader> contextLoaderClass;, +			boolean inheritLocations, Class<? extends ContextLoader> contextLoaderClass) {, +		this.contextLoaderClass = contextLoaderClass;, +	 * TODO Document setLocations()., +	 */, +	public void setLocations(String[] locations) {, +		this.locations = locations;, +	}, +, +	/**, +	 * TODO Document setClasses()., +	 */, +	public void setClasses(Class<?>[] classes) {, +		this.classes = classes;, +	}, +, +	/**, +	 * TODO Document getContextLoaderClass()., +	public Class<? extends ContextLoader> getContextLoaderClass() {, +		return this.contextLoaderClass;, +		.append("contextLoaderClass", this.contextLoaderClass)//, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextConfigurationAttributes.java, +	private String[] locations;, +	private Class<?>[] classes;, +	private final Class<? extends ContextLoader> contextLoaderClass;, +			boolean inheritLocations, Class<? extends ContextLoader> contextLoaderClass) {, +		this.contextLoaderClass = contextLoaderClass;, +	 * TODO Document setLocations()., +	 */, +	public void setLocations(String[] locations) {, +		this.locations = locations;, +	}, +, +	/**, +	 * TODO Document setClasses()., +	 */, +	public void setClasses(Class<?>[] classes) {, +		this.classes = classes;, +	}, +, +	/**, +	 * TODO Document getContextLoaderClass()., +	public Class<? extends ContextLoader> getContextLoaderClass() {, +		return this.contextLoaderClass;, +		.append("contextLoaderClass", this.contextLoaderClass)//, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java, +import org.springframework.util.ClassUtils;, + * @see ContextConfigurationAttributes, +	/**, +	 * TODO Document resolveContextConfigurationAttributes()., +	 */, +	static List<ContextConfigurationAttributes> resolveContextConfigurationAttributes(Class<?> clazz) {, +		Assert.notNull(clazz, "Class must not be null");, +, +		final List<ContextConfigurationAttributes> attributesList = new ArrayList<ContextConfigurationAttributes>();, +, +		Class<ContextConfiguration> annotationType = ContextConfiguration.class;, +		Class<?> declaringClass = AnnotationUtils.findAnnotationDeclaringClass(annotationType, clazz);, +		Assert.notNull(declaringClass, String.format(, +			"Could not find an 'annotation declaring class' for annotation type [%s] and class [%s]", annotationType,, +			clazz));, +, +		while (declaringClass != null) {, +			ContextConfiguration contextConfiguration = declaringClass.getAnnotation(annotationType);, +, +			if (logger.isTraceEnabled()) {, +				logger.trace(String.format("Retrieved @ContextConfiguration [%s] for declaring class [%s].",, +					contextConfiguration, declaringClass));, +			}, +, +			ContextConfigurationAttributes attributes = new ContextConfigurationAttributes(declaringClass,, +				contextConfiguration);, +			if (logger.isTraceEnabled()) {, +				logger.trace("Resolved context configuration attributes: " + attributes);, +			}, +, +			attributesList.add(0, attributes);, +, +			declaringClass = contextConfiguration.inheritLocations() ? AnnotationUtils.findAnnotationDeclaringClass(, +				annotationType, declaringClass.getSuperclass()) : null;, +		}, +, +		return attributesList;, +	}, +	 * , +	 * @param configAttributesList TODO Document parameter, +	 * , +	static ContextLoader resolveContextLoader(Class<?> testClass,, +			List<ContextConfigurationAttributes> configAttributesList, String defaultContextLoaderClassName) {, +		Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be null or empty");, +		Class<? extends ContextLoader> contextLoaderClass = resolveContextLoaderClass(testClass, configAttributesList,, +	 * @param testClass the class for which to resolve the <code>ContextLoader</code>, +	 * @param configAttributesList TODO Document parameter, +	 * , +	static Class<? extends ContextLoader> resolveContextLoaderClass(Class<?> testClass,, +			List<ContextConfigurationAttributes> configAttributesList, String defaultContextLoaderClassName) {, +		Assert.notNull(testClass, "Class must not be null");]