[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/bind/annotation/RequestParam.java, + * Annotation which indicates that a method parameter should be bound to a web request parameter. Supported for {@link, + * RequestMapping} annotated handler methods in Servlet and Portlet environments., + * @since 2.5, +	/** The request parameter to bind to. */, +	 * Whether the parameter is required. <p>Default is <code>true</code>, leading to an exception thrown in case of the, +	 * parameter missing in the request. Switch this to <code>false</code> if you prefer a <code>null</value> in case of, +	 * the parameter missing. <p>Alternatively, provide a {@link #defaultValue() defaultValue}, which implicitely sets this, +	 * flag to <code>false</code>., +	/** The default value to use as a fallback. Supplying a default value implicitely sets {@link #required()} to false. */, +	String defaultValue() default "";, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/bind/annotation/RequestParam.java, + * Annotation which indicates that a method parameter should be bound to a web request parameter. Supported for {@link, + * RequestMapping} annotated handler methods in Servlet and Portlet environments., + * @since 2.5, +	/** The request parameter to bind to. */, +	 * Whether the parameter is required. <p>Default is <code>true</code>, leading to an exception thrown in case of the, +	 * parameter missing in the request. Switch this to <code>false</code> if you prefer a <code>null</value> in case of, +	 * the parameter missing. <p>Alternatively, provide a {@link #defaultValue() defaultValue}, which implicitely sets this, +	 * flag to <code>false</code>., +	/** The default value to use as a fallback. Supplying a default value implicitely sets {@link #required()} to false. */, +	String defaultValue() default "";, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodInvoker.java, +import org.springframework.util.StringUtils;, + * Support class for invoking an annotated handler method. Operates on the introspection results of a {@link, + * HandlerMethodResolver} for a specific handler type., + * <p>Used by {@link org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter} and {@link, + * org.springframework.web.portlet.mvc.annotation.AnnotationMethodHandlerAdapter}., + * @author Arjen Poutsma, + * @since 2.5.2, +	/** We'll create a lot of these objects, so we don't want a new logger every time. */, +	public HandlerMethodInvoker(HandlerMethodResolver methodResolver,, +								WebBindingInitializer bindingInitializer,, +								SessionAttributeStore sessionAttributeStore,, +								ParameterNameDiscoverer parameterNameDiscoverer,, +	public final Object invokeHandlerMethod(Method handlerMethod,, +											Object handler,, +											NativeWebRequest webRequest,, +											ExtendedModelMap implicitModel) throws Exception {, +					Class resolvedType =, +							GenericTypeResolver.resolveReturnType(attributeMethodToInvoke, handler.getClass());, +					attrName =, +							Conventions.getVariableNameForReturnType(attributeMethodToInvoke, resolvedType, attrValue);, +	private Object[] resolveHandlerArguments(Method handlerMethod,, +											 Object handler,, +											 NativeWebRequest webRequest,, +											 ExtendedModelMap implicitModel) throws Exception {, +			String paramDefaultValue = null;, +					paramDefaultValue = requestParam.defaultValue();, +				args[i] = resolveRequestParam(paramName, paramRequired, paramDefaultValue, methodParam, webRequest,, +						handler);, +						Object[] initBinderArgs =, +								resolveInitBinderArguments(handler, methodToInvoke, binder, webRequest);, +	private Object[] resolveInitBinderArguments(Object handler,, +												Method initBinderMethod,, +												WebDataBinder binder,, +												NativeWebRequest webRequest) throws Exception {, +			String paramDefaultValue = null;, +					paramDefaultValue = requestParam.defaultValue();, +				initBinderArgs[i] =, +						resolveRequestParam(paramName, paramRequired, paramDefaultValue, methodParam, webRequest, null);, +	private Object resolveRequestParam(String paramName,, +									   boolean paramRequired,, +									   String paramDefaultValue,, +									   MethodParameter methodParam,, +									   NativeWebRequest webRequest,, +									   Object handlerForInitBinderCall) throws Exception {, +			if (StringUtils.hasText(paramDefaultValue)) {, +				paramValue = paramDefaultValue;, +			}, +			else if (paramRequired) {, +			if (paramValue == null && paramType.isPrimitive()) {, +	private WebDataBinder resolveModelAttribute(String attrName,, +												MethodParameter methodParam,, +												ExtendedModelMap implicitModel,, +												NativeWebRequest webRequest,, +												Object handler) throws Exception {, +	public final void updateModelAttributes(Object handler,, +											Map mavModel,, +											ExtendedModelMap implicitModel,, +											NativeWebRequest webRequest) throws Exception {, +	 * Determine whether the given value qualifies as a "binding candidate", i.e. might potentially be subject to, +	 * bean-style data binding later on., +	protected void doBind(NativeWebRequest webRequest, WebDataBinder binder, boolean failOnErrors) throws Exception {, +	protected Object resolveStandardArgument(Class parameterType, NativeWebRequest webRequest) throws Exception {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/bind/annotation/RequestParam.java, + * Annotation which indicates that a method parameter should be bound to a web request parameter. Supported for {@link, + * RequestMapping} annotated handler methods in Servlet and Portlet environments., + * @since 2.5, +	/** The request parameter to bind to. */, +	 * Whether the parameter is required. <p>Default is <code>true</code>, leading to an exception thrown in case of the, +	 * parameter missing in the request. Switch this to <code>false</code> if you prefer a <code>null</value> in case of, +	 * the parameter missing. <p>Alternatively, provide a {@link #defaultValue() defaultValue}, which implicitely sets this, +	 * flag to <code>false</code>., +	/** The default value to use as a fallback. Supplying a default value implicitely sets {@link #required()} to false. */, +	String defaultValue() default "";, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodInvoker.java]