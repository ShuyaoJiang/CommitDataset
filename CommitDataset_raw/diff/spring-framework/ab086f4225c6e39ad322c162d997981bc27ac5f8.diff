[+++ b/spring-context/spring-context.gradle, +	testCompile("org.awaitility:awaitility:3.1.2"), +++ b/spring-context/spring-context.gradle, +	testCompile("org.awaitility:awaitility:3.1.2"), +++ b/spring-context/src/test/java/org/springframework/context/support/SimpleThreadScopeTests.java, +import java.util.concurrent.TimeUnit;, +, +import org.awaitility.Awaitility;, +		// Arrange, +		Thread thread1 = new Thread(() -> beans[0] = applicationContext.getBean("threadScopedObject", TestBean.class));, +		Thread thread2 = new Thread(() -> beans[1] = applicationContext.getBean("threadScopedObject", TestBean.class));, +		// Act, +		// Assert, +		Awaitility.await(), +				  .pollInterval(10, TimeUnit.MILLISECONDS), +				  .atMost(500, TimeUnit.MILLISECONDS), +				  .until(() -> beans[0] != null & beans[1] != null);, +++ b/spring-context/spring-context.gradle, +	testCompile("org.awaitility:awaitility:3.1.2"), +++ b/spring-context/src/test/java/org/springframework/context/support/SimpleThreadScopeTests.java, +import java.util.concurrent.TimeUnit;, +, +import org.awaitility.Awaitility;, +		// Arrange, +		Thread thread1 = new Thread(() -> beans[0] = applicationContext.getBean("threadScopedObject", TestBean.class));, +		Thread thread2 = new Thread(() -> beans[1] = applicationContext.getBean("threadScopedObject", TestBean.class));, +		// Act, +		// Assert, +		Awaitility.await(), +				  .pollInterval(10, TimeUnit.MILLISECONDS), +				  .atMost(500, TimeUnit.MILLISECONDS), +				  .until(() -> beans[0] != null & beans[1] != null);, +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncExecutionTests.java, +import java.util.concurrent.TimeUnit;, +import org.awaitility.Awaitility;, +		// Arrange, +		// Act, +		// Assert, +		Awaitility.await(), +				  .atMost(1, TimeUnit.SECONDS), +				  .pollInterval(10, TimeUnit.MILLISECONDS), +				  .until(() -> listenerCalled == 1);, +		assertEquals(listenerCalled, 1);, +		// Arrange, +		// Act, +		// Assert, +		Awaitility.await(), +				  .atMost(1, TimeUnit.SECONDS), +				  .pollInterval(10, TimeUnit.MILLISECONDS), +				  .until(() -> listenerCalled == 2);, +		// Arrange, +		// Act, +		// Assert, +		Awaitility.await(), +				  .atMost(1, TimeUnit.SECONDS), +				  .pollInterval(10, TimeUnit.MILLISECONDS), +				  .until(() -> listenerCalled == 2);, +++ b/spring-context/spring-context.gradle, +	testCompile("org.awaitility:awaitility:3.1.2"), +++ b/spring-context/src/test/java/org/springframework/context/support/SimpleThreadScopeTests.java, +import java.util.concurrent.TimeUnit;, +, +import org.awaitility.Awaitility;, +		// Arrange, +		Thread thread1 = new Thread(() -> beans[0] = applicationContext.getBean("threadScopedObject", TestBean.class));, +		Thread thread2 = new Thread(() -> beans[1] = applicationContext.getBean("threadScopedObject", TestBean.class));, +		// Act, +		// Assert, +		Awaitility.await(), +				  .pollInterval(10, TimeUnit.MILLISECONDS), +				  .atMost(500, TimeUnit.MILLISECONDS), +				  .until(() -> beans[0] != null & beans[1] != null);, +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/AsyncExecutionTests.java, +import java.util.concurrent.TimeUnit;, +import org.awaitility.Awaitility;, +		// Arrange, +		// Act, +		// Assert, +		Awaitility.await(), +				  .atMost(1, TimeUnit.SECONDS), +				  .pollInterval(10, TimeUnit.MILLISECONDS), +				  .until(() -> listenerCalled == 1);, +		assertEquals(listenerCalled, 1);, +		// Arrange, +		// Act, +		// Assert, +		Awaitility.await(), +				  .atMost(1, TimeUnit.SECONDS), +				  .pollInterval(10, TimeUnit.MILLISECONDS), +				  .until(() -> listenerCalled == 2);, +		// Arrange, +		// Act, +		// Assert, +		Awaitility.await(), +				  .atMost(1, TimeUnit.SECONDS), +				  .pollInterval(10, TimeUnit.MILLISECONDS), +				  .until(() -> listenerCalled == 2);, +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/EnableAsyncTests.java, +import java.util.concurrent.TimeUnit;, +import org.awaitility.Awaitility;]