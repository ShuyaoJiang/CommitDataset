[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, + * Copyright 2002-2016 the original author or authors., +	private static final Object NOT_MULTIPLE_BEANS = new Object();, +, +, +		Assert.notNull(dependencyType, "Dependency type must not be null");, +			if (!(autowiredValue instanceof ObjectFactory || dependencyType.isInstance(autowiredValue))) {, +				throw new IllegalArgumentException("Value [" + autowiredValue +, +						"] does not implement specified dependency type [" + dependencyType.getName() + "]");, +			}, +		Object multipleBeans = resolveMultipleBeans(descriptor, beanName, autowiredBeanNames, typeConverter);, +		if (multipleBeans != null && multipleBeans != NOT_MULTIPLE_BEANS) {, +			return multipleBeans;, +		}, +, +		Map<String, Object> matchingBeans = findAutowireCandidates(beanName, type, descriptor);, +		if (matchingBeans.isEmpty()) {, +			if (descriptor.isRequired()) {, +				raiseNoSuchBeanDefinitionException(type, descriptor.getResolvableType().toString(), descriptor);, +			}, +			return null;, +		}, +		if (matchingBeans.size() > 1) {, +			String primaryBeanName = determineAutowireCandidate(matchingBeans, descriptor);, +			if (primaryBeanName == null) {, +				if (multipleBeans == NOT_MULTIPLE_BEANS || descriptor.isRequired()) {, +					throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet());, +				}, +				else {, +					// In case of an optional Collection/Map, silently ignore a non-unique case:, +					// possibly it was meant to be an empty collection of multiple regular beans, +					// (before 4.3 in particular when we didn't even look for collection beans)., +					return null;, +				}, +			}, +			if (autowiredBeanNames != null) {, +				autowiredBeanNames.add(primaryBeanName);, +			}, +			return matchingBeans.get(primaryBeanName);, +		}, +		// We have exactly one match., +		Map.Entry<String, Object> entry = matchingBeans.entrySet().iterator().next();, +		if (autowiredBeanNames != null) {, +			autowiredBeanNames.add(entry.getKey());, +		}, +		return entry.getValue();, +	}, +, +	private Object resolveMultipleBeans(DependencyDescriptor descriptor, String beanName,, +			Set<String> autowiredBeanNames, TypeConverter typeConverter) {, +, +		Class<?> type = descriptor.getDependencyType();, +			return NOT_MULTIPLE_BEANS;, +			// Consider fallback matches if the first pass failed to find anything..., +				if (!isSelfReference(beanName, candidateName) && isAutowireCandidate(candidateName, fallbackDescriptor)) {, +			if (result.isEmpty()) {, +				// Consider self references before as a final pass, +				for (String candidateName : candidateNames) {, +					if (isSelfReference(beanName, candidateName) && isAutowireCandidate(candidateName, fallbackDescriptor)) {, +						result.put(candidateName, getBean(candidateName));, +					}, +				}, +			}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, + * Copyright 2002-2016 the original author or authors., +	private static final Object NOT_MULTIPLE_BEANS = new Object();, +, +, +		Assert.notNull(dependencyType, "Dependency type must not be null");, +			if (!(autowiredValue instanceof ObjectFactory || dependencyType.isInstance(autowiredValue))) {, +				throw new IllegalArgumentException("Value [" + autowiredValue +, +						"] does not implement specified dependency type [" + dependencyType.getName() + "]");, +			}, +		Object multipleBeans = resolveMultipleBeans(descriptor, beanName, autowiredBeanNames, typeConverter);, +		if (multipleBeans != null && multipleBeans != NOT_MULTIPLE_BEANS) {, +			return multipleBeans;, +		}, +, +		Map<String, Object> matchingBeans = findAutowireCandidates(beanName, type, descriptor);, +		if (matchingBeans.isEmpty()) {, +			if (descriptor.isRequired()) {, +				raiseNoSuchBeanDefinitionException(type, descriptor.getResolvableType().toString(), descriptor);, +			}, +			return null;, +		}, +		if (matchingBeans.size() > 1) {, +			String primaryBeanName = determineAutowireCandidate(matchingBeans, descriptor);, +			if (primaryBeanName == null) {, +				if (multipleBeans == NOT_MULTIPLE_BEANS || descriptor.isRequired()) {, +					throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet());, +				}, +				else {, +					// In case of an optional Collection/Map, silently ignore a non-unique case:, +					// possibly it was meant to be an empty collection of multiple regular beans, +					// (before 4.3 in particular when we didn't even look for collection beans)., +					return null;, +				}, +			}, +			if (autowiredBeanNames != null) {, +				autowiredBeanNames.add(primaryBeanName);]