[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultResponseBuilder.java, +		return DefaultResponses.empty(this.statusCode, this.headers);, +		return DefaultResponses.empty(this.statusCode, this.headers, voidPublisher);, +		return DefaultResponses.body(this.statusCode, this.headers, body);, +		return DefaultResponses.stream(this.statusCode, this.headers, publisher, elementClass);, +		return DefaultResponses.resource(this.statusCode, this.headers, resource);, +		return DefaultResponses.sse(this.statusCode, this.headers, eventsPublisher);, +		return DefaultResponses.sse(this.statusCode, this.headers, eventsPublisher, eventClass);, +		return DefaultResponses.render(this.statusCode, this.headers, name, modelMap);, +	}, +, +	private static boolean isEmptyCollection(Object o) {, +		return o instanceof Collection && ((Collection<?>) o).isEmpty();, +		return DefaultResponses.render(this.statusCode, this.headers, name, modelMap);, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultResponseBuilder.java, +		return DefaultResponses.empty(this.statusCode, this.headers);, +		return DefaultResponses.empty(this.statusCode, this.headers, voidPublisher);, +		return DefaultResponses.body(this.statusCode, this.headers, body);, +		return DefaultResponses.stream(this.statusCode, this.headers, publisher, elementClass);, +		return DefaultResponses.resource(this.statusCode, this.headers, resource);, +		return DefaultResponses.sse(this.statusCode, this.headers, eventsPublisher);, +		return DefaultResponses.sse(this.statusCode, this.headers, eventsPublisher, eventClass);, +		return DefaultResponses.render(this.statusCode, this.headers, name, modelMap);, +	}, +, +	private static boolean isEmptyCollection(Object o) {, +		return o instanceof Collection && ((Collection<?>) o).isEmpty();, +		return DefaultResponses.render(this.statusCode, this.headers, name, modelMap);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultResponses.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.reactive.function;, +, +import java.util.Collections;, +import java.util.Locale;, +import java.util.Map;, +import java.util.function.Function;, +import java.util.function.Supplier;, +import java.util.stream.Stream;, +, +import org.reactivestreams.Publisher;, +import reactor.core.publisher.Flux;, +import reactor.core.publisher.Mono;, +, +import org.springframework.core.ResolvableType;, +import org.springframework.core.io.Resource;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpStatus;, +import org.springframework.http.MediaType;, +import org.springframework.http.codec.HttpMessageWriter;, +import org.springframework.http.codec.ResourceHttpMessageWriter;, +import org.springframework.http.codec.ServerSentEvent;, +import org.springframework.http.codec.ServerSentEventHttpMessageWriter;, +import org.springframework.http.codec.json.Jackson2JsonEncoder;, +import org.springframework.http.server.reactive.ServerHttpResponse;, +import org.springframework.util.ClassUtils;, +import org.springframework.web.reactive.result.view.ViewResolver;, +import org.springframework.web.server.ServerWebExchange;, +, +/**, + * @author Arjen Poutsma, + * @since 5.0, + */, +abstract class DefaultResponses {, +, +	private static final ResolvableType RESOURCE_TYPE = ResolvableType.forClass(Resource.class);, +, +	private static final ResolvableType SERVER_SIDE_EVENT_TYPE =, +			ResolvableType.forClass(ServerSentEvent.class);, +, +	private static final boolean jackson2Present =, +			ClassUtils.isPresent("com.fasterxml.jackson.databind.ObjectMapper",, +					DefaultConfiguration.class.getClassLoader()) &&, +					ClassUtils.isPresent("com.fasterxml.jackson.core.JsonGenerator",]