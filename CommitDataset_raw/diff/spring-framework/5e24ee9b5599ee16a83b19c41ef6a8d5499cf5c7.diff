[+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/spr/RequestContextHolderTests.java, + * Copyright 2002-2015 the original author or authors., +import javax.servlet.http.HttpServletRequest;, +, +import org.springframework.aop.support.AopUtils;, +import org.springframework.context.annotation.Scope;, +import org.springframework.context.annotation.ScopedProxyMode;, +import org.springframework.test.annotation.DirtiesContext;, +import org.springframework.web.bind.annotation.RestController;, +import static org.hamcrest.CoreMatchers.*;, +import static org.springframework.web.context.request.RequestAttributes.*;, + * @author Sam Brannen, +@DirtiesContext, +	private static final String FOO = "foo";, +	private static final String BAR = "bar";, +	private static final String BAZ = "baz";, +	private static final String QUUX = "quux";, +	private static final String ENIGMA = "enigma";, +	private static final String PUZZLE = "puzzle";, +, +	private MockHttpServletRequest mockRequest;, +, +	@Autowired, +	private MyScopedController myScopedController;, +		this.mockRequest.setAttribute(FOO, BAR);, +, +		this.mockMvc = webAppContextSetup(this.wac), +				.defaultRequest(get("/").requestAttr(ENIGMA, PUZZLE)), +				.alwaysExpect(status().isOk()), +				.build();, +	public void singletonController() throws Exception {, +		this.mockMvc.perform(get("/singleton").requestAttr(BAZ, QUUX));, +	}, +, +	@Test, +	public void requestScopedController() throws Exception {, +		assertTrue("request-scoped controller must be a CGLIB proxy", AopUtils.isCglibProxy(this.myScopedController));, +		this.mockMvc.perform(get("/requestScoped").requestAttr(BAZ, QUUX));, +, +		@Bean, +		@Scope(name = "request", proxyMode = ScopedProxyMode.TARGET_CLASS), +		public MyScopedController myScopedController() {, +			return new MyScopedController();, +		}, +, +	private static void assertRequestAttributes() {, +		RequestAttributes attributes = RequestContextHolder.getRequestAttributes();, +		// TODO [SPR-13211] Assert that FOO is BAR, instead of NULL., +		// assertThat(attributes.getAttribute(FOO, SCOPE_REQUEST), is(BAR));, +		assertThat(attributes.getAttribute(FOO, SCOPE_REQUEST), is(nullValue()));, +		assertThat(attributes.getAttribute(ENIGMA, SCOPE_REQUEST), is(PUZZLE));, +		assertThat(attributes.getAttribute(BAZ, SCOPE_REQUEST), is(QUUX));, +	}, +, +, +	@RestController, +		@RequestMapping("/singleton"), +			assertRequestAttributes();, +		}, +	}, +, +	@RestController, +	private static class MyScopedController {, +, +		@Autowired, +		private HttpServletRequest request;, +, +, +		@RequestMapping("/requestScoped"), +		public void handle() {, +			// TODO [SPR-13211] Assert that FOO is BAR, instead of NULL., +			// assertThat(this.request.getAttribute(FOO), is(BAR));, +			assertThat(this.request.getAttribute(FOO), is(nullValue()));, +			assertRequestAttributes();]