[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length);, +		boolean isStatic;, +			isStatic = false;, +			isStatic = true;, +, +		Method[] candidates = getCandidateMethods(factoryClass, mbd);, +			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {, +	 * Retrieve all candidate methods for the given class, considering, +	 * the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag., +	 * Called as the starting point for factory method determination., +	 */, +	private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {, +		if (System.getSecurityManager() != null) {, +			return AccessController.doPrivileged(new PrivilegedAction<Method[]>() {, +				@Override, +				public Method[] run() {, +					return (mbd.isNonPublicAccessAllowed() ?, +							ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods());, +				}, +			});, +		}, +		else {, +			return (mbd.isNonPublicAccessAllowed() ?, +					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods());, +		}, +	}, +, +	/**, +	public BeanWrapper instantiateUsingFactoryMethod(, +			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) {, +, +			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd);, +				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {, +	 * Delegate for checking Java 6's {@link ConstructorProperties} annotation., +		public static String[] evaluate(Constructor<?> candidate, int paramCount) {]