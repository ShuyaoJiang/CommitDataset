[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMapping.java, +import org.springframework.util.CollectionUtils;, +import org.springframework.web.bind.UnsatisfiedServletRequestParameterException;, +import org.springframework.web.servlet.mvc.condition.NameValueExpression;, +import org.springframework.web.servlet.mvc.condition.ParamsRequestCondition;, +		Set<String> paramConditions;, +			paramConditions = getRequestParams(request, patternMatches);, +			paramConditions = getRequestParams(request, patternAndMethodMatches);, +		else if (!CollectionUtils.isEmpty(paramConditions)) {, +			String[] params = paramConditions.toArray(new String[paramConditions.size()]);, +			throw new UnsatisfiedServletRequestParameterException(params, request.getParameterMap());, +		}, +	private Set<String> getRequestParams(HttpServletRequest request, Set<RequestMappingInfo> partialMatches) {, +		for (RequestMappingInfo partialMatch : partialMatches) {, +			ParamsRequestCondition condition = partialMatch.getParamsCondition();, +			if (!CollectionUtils.isEmpty(condition.getExpressions()) && (condition.getMatchingCondition(request) == null)) {, +				Set<String> expressions = new HashSet<String>();, +				for (NameValueExpression expr : condition.getExpressions()) {, +					expressions.add(expr.toString());, +				}, +				return expressions;, +			}, +		}, +		return null;, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMapping.java, +import org.springframework.util.CollectionUtils;, +import org.springframework.web.bind.UnsatisfiedServletRequestParameterException;, +import org.springframework.web.servlet.mvc.condition.NameValueExpression;, +import org.springframework.web.servlet.mvc.condition.ParamsRequestCondition;, +		Set<String> paramConditions;, +			paramConditions = getRequestParams(request, patternMatches);, +			paramConditions = getRequestParams(request, patternAndMethodMatches);, +		else if (!CollectionUtils.isEmpty(paramConditions)) {, +			String[] params = paramConditions.toArray(new String[paramConditions.size()]);, +			throw new UnsatisfiedServletRequestParameterException(params, request.getParameterMap());, +		}, +	private Set<String> getRequestParams(HttpServletRequest request, Set<RequestMappingInfo> partialMatches) {, +		for (RequestMappingInfo partialMatch : partialMatches) {, +			ParamsRequestCondition condition = partialMatch.getParamsCondition();, +			if (!CollectionUtils.isEmpty(condition.getExpressions()) && (condition.getMatchingCondition(request) == null)) {, +				Set<String> expressions = new HashSet<String>();, +				for (NameValueExpression expr : condition.getExpressions()) {, +					expressions.add(expr.toString());, +				}, +				return expressions;, +			}, +		}, +		return null;, +	}, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMappingTests.java, +import org.springframework.web.bind.UnsatisfiedServletRequestParameterException;, +	public void testUnsatisfiedServletRequestParameterException() throws Exception {, +		try {, +			MockHttpServletRequest request = new MockHttpServletRequest("GET", "/params");, +			this.handlerMapping.getHandler(request);, +			fail("UnsatisfiedServletRequestParameterException expected");, +		}, +		catch (UnsatisfiedServletRequestParameterException ex) {, +			assertArrayEquals("Invalid request parameter conditions",, +					new String[] { "foo=bar" }, ex.getParamConditions());, +		}, +	}, +, +	@Test, +		@RequestMapping(value = "/params", params="foo=bar"), +		public String param() {, +			return "";, +		}, +]