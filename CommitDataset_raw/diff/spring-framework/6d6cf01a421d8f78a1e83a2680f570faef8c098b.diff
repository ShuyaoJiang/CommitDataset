[+++ b/spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java, + * Copyright 2002-2017 the original author or authors., +					logger.info("Bean '" + beanName + "' of type [" + bean.getClass().getName() +, +				return (bd.getRole() == RootBeanDefinition.ROLE_INFRASTRUCTURE);, +++ b/spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java, + * Copyright 2002-2017 the original author or authors., +					logger.info("Bean '" + beanName + "' of type [" + bean.getClass().getName() +, +				return (bd.getRole() == RootBeanDefinition.ROLE_INFRASTRUCTURE);, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/AsyncAnnotationAdvisor.java, + * Copyright 2002-2017 the original author or authors., +				result = new ComposablePointcut(cpc);, +				result.union(cpc);, +			result = result.union(mpc);, +++ b/spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java, + * Copyright 2002-2017 the original author or authors., +					logger.info("Bean '" + beanName + "' of type [" + bean.getClass().getName() +, +				return (bd.getRole() == RootBeanDefinition.ROLE_INFRASTRUCTURE);, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/AsyncAnnotationAdvisor.java, + * Copyright 2002-2017 the original author or authors., +				result = new ComposablePointcut(cpc);, +				result.union(cpc);, +			result = result.union(mpc);, +++ b/spring-context/src/test/java/org/springframework/cache/config/CacheableService.java, + * Copyright 2002-2017 the original author or authors., + * Basic service interface for caching tests., +, +++ b/spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java, + * Copyright 2002-2017 the original author or authors., +					logger.info("Bean '" + beanName + "' of type [" + bean.getClass().getName() +, +				return (bd.getRole() == RootBeanDefinition.ROLE_INFRASTRUCTURE);, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/AsyncAnnotationAdvisor.java, + * Copyright 2002-2017 the original author or authors., +				result = new ComposablePointcut(cpc);, +				result.union(cpc);, +			result = result.union(mpc);, +++ b/spring-context/src/test/java/org/springframework/cache/config/CacheableService.java, + * Copyright 2002-2017 the original author or authors., + * Basic service interface for caching tests., +, +++ b/spring-context/src/test/java/org/springframework/cache/config/DefaultCacheableService.java, + * Copyright 2002-2017 the original author or authors., + * Simple cacheable service., +, +, +++ b/spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java, + * Copyright 2002-2017 the original author or authors., +					logger.info("Bean '" + beanName + "' of type [" + bean.getClass().getName() +, +				return (bd.getRole() == RootBeanDefinition.ROLE_INFRASTRUCTURE);, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/AsyncAnnotationAdvisor.java, + * Copyright 2002-2017 the original author or authors., +				result = new ComposablePointcut(cpc);, +				result.union(cpc);, +			result = result.union(mpc);, +++ b/spring-context/src/test/java/org/springframework/cache/config/CacheableService.java, + * Copyright 2002-2017 the original author or authors., + * Basic service interface for caching tests., +, +++ b/spring-context/src/test/java/org/springframework/cache/config/DefaultCacheableService.java, + * Copyright 2002-2017 the original author or authors., + * Simple cacheable service., +, +, +++ b/spring-context/src/test/java/org/springframework/cache/config/EnableCachingTests.java, + * Copyright 2002-2017 the original author or authors., +		ctx.refresh();  // does not throw an exception, +		ConfigurableApplicationContext context = new AnnotationConfigApplicationContext(EmptyConfigSupportConfig.class);, +		assertSame(context.getBean(CacheManager.class), ((SimpleCacheResolver)ci.getCacheResolver()).getCacheManager());, +		ConfigurableApplicationContext context = new AnnotationConfigApplicationContext(FullCachingConfig.class);]