[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +							PropertyTypeDescriptor.forNestedType(requiredType, new MethodParameter(pd.getReadMethod(), -1, tokens.keys.length), pd));, +						PropertyTypeDescriptor.forNestedType(requiredType, new MethodParameter(pd.getReadMethod(), -1, tokens.keys.length), pd));, +						PropertyTypeDescriptor.forNestedType(mapValueType, new MethodParameter(pd.getReadMethod(), -1, tokens.keys.length), pd));, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +							PropertyTypeDescriptor.forNestedType(requiredType, new MethodParameter(pd.getReadMethod(), -1, tokens.keys.length), pd));, +						PropertyTypeDescriptor.forNestedType(requiredType, new MethodParameter(pd.getReadMethod(), -1, tokens.keys.length), pd));, +						PropertyTypeDescriptor.forNestedType(mapValueType, new MethodParameter(pd.getReadMethod(), -1, tokens.keys.length), pd));, +++ b/org.springframework.context/src/test/java/org/springframework/format/number/NumberFormattingTests.java, +	@Test, +	@Ignore, +	public void testPatternList2Formatting() {, +		MutablePropertyValues propertyValues = new MutablePropertyValues();, +		propertyValues.add("patternList2[0]", "1,25.00");, +		propertyValues.add("patternList2[1]", "2,35.00");, +		binder.bind(propertyValues);, +		assertEquals(0, binder.getBindingResult().getErrorCount());, +		assertEquals("1,25.00", binder.getBindingResult().getFieldValue("patternList[0]"));, +		assertEquals("2,35.00", binder.getBindingResult().getFieldValue("patternList[1]"));, +	}, +, +		private List<BigDecimal>[] patternList;, +, +		@NumberFormat(pattern="#,##.00"), +		private List<BigDecimal> patternList2;, +		public List<BigDecimal>[] getPatternList() {, +		public void setPatternList(List<BigDecimal>[] patternList) {, +, +		public List<BigDecimal> getPatternList2() {, +			return patternList2;, +		}, +, +		public void setPatternList2(List<BigDecimal> patternList2) {, +			this.patternList2 = patternList2;, +		}, +		, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +							PropertyTypeDescriptor.forNestedType(requiredType, new MethodParameter(pd.getReadMethod(), -1, tokens.keys.length), pd));, +						PropertyTypeDescriptor.forNestedType(requiredType, new MethodParameter(pd.getReadMethod(), -1, tokens.keys.length), pd));, +						PropertyTypeDescriptor.forNestedType(mapValueType, new MethodParameter(pd.getReadMethod(), -1, tokens.keys.length), pd));, +++ b/org.springframework.context/src/test/java/org/springframework/format/number/NumberFormattingTests.java, +	@Test, +	@Ignore, +	public void testPatternList2Formatting() {, +		MutablePropertyValues propertyValues = new MutablePropertyValues();, +		propertyValues.add("patternList2[0]", "1,25.00");, +		propertyValues.add("patternList2[1]", "2,35.00");, +		binder.bind(propertyValues);, +		assertEquals(0, binder.getBindingResult().getErrorCount());, +		assertEquals("1,25.00", binder.getBindingResult().getFieldValue("patternList[0]"));, +		assertEquals("2,35.00", binder.getBindingResult().getFieldValue("patternList[1]"));, +	}, +, +		private List<BigDecimal>[] patternList;, +, +		@NumberFormat(pattern="#,##.00"), +		private List<BigDecimal> patternList2;, +		public List<BigDecimal>[] getPatternList() {, +		public void setPatternList(List<BigDecimal>[] patternList) {, +, +		public List<BigDecimal> getPatternList2() {, +			return patternList2;, +		}, +, +		public void setPatternList2(List<BigDecimal> patternList2) {, +			this.patternList2 = patternList2;, +		}, +		, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * @param methodParameter the method parameter declaring the collection or map, +	public static TypeDescriptor forNestedType(Class<?> nestedType, MethodParameter methodParameter) {, +		return new TypeDescriptor(nestedType, methodParameter);, +	protected TypeDescriptor(Class<?> nestedType, MethodParameter methodParameter) {, +		this.methodParameter = createNestedMethodParameter(methodParameter);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +							PropertyTypeDescriptor.forNestedType(requiredType, new MethodParameter(pd.getReadMethod(), -1, tokens.keys.length), pd));, +						PropertyTypeDescriptor.forNestedType(requiredType, new MethodParameter(pd.getReadMethod(), -1, tokens.keys.length), pd));, +						PropertyTypeDescriptor.forNestedType(mapValueType, new MethodParameter(pd.getReadMethod(), -1, tokens.keys.length), pd));, +++ b/org.springframework.context/src/test/java/org/springframework/format/number/NumberFormattingTests.java, +	@Test, +	@Ignore, +	public void testPatternList2Formatting() {, +		MutablePropertyValues propertyValues = new MutablePropertyValues();, +		propertyValues.add("patternList2[0]", "1,25.00");, +		propertyValues.add("patternList2[1]", "2,35.00");, +		binder.bind(propertyValues);, +		assertEquals(0, binder.getBindingResult().getErrorCount());, +		assertEquals("1,25.00", binder.getBindingResult().getFieldValue("patternList[0]"));, +		assertEquals("2,35.00", binder.getBindingResult().getFieldValue("patternList[1]"));, +	}, +, +		private List<BigDecimal>[] patternList;, +, +		@NumberFormat(pattern="#,##.00"), +		private List<BigDecimal> patternList2;, +		public List<BigDecimal>[] getPatternList() {, +		public void setPatternList(List<BigDecimal>[] patternList) {, +, +		public List<BigDecimal> getPatternList2() {, +			return patternList2;]