[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/jetty/JettyRequestUpgradeStrategy.java, + * A {@link RequestUpgradeStrategy} for use with Jetty 9.0-9.3. Based on Jetty's, + * internal {@code org.eclipse.jetty.websocket.server.WebSocketHandler} class., +	 * Default constructor that creates {@link WebSocketServerFactory} through, +	 * its default constructor thus using a default {@link WebSocketPolicy}., +	 * A constructor accepting a {@link WebSocketServerFactory}., +	 * This may be useful for modifying the factory's {@link WebSocketPolicy}, +	 * via {@link WebSocketServerFactory#getPolicy()}., +					"Response update failed during upgrade to WebSocket: " + request.getURI(), ex);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/jetty/JettyRequestUpgradeStrategy.java, + * A {@link RequestUpgradeStrategy} for use with Jetty 9.0-9.3. Based on Jetty's, + * internal {@code org.eclipse.jetty.websocket.server.WebSocketHandler} class., +	 * Default constructor that creates {@link WebSocketServerFactory} through, +	 * its default constructor thus using a default {@link WebSocketPolicy}., +	 * A constructor accepting a {@link WebSocketServerFactory}., +	 * This may be useful for modifying the factory's {@link WebSocketPolicy}, +	 * via {@link WebSocketServerFactory#getPolicy()}., +					"Response update failed during upgrade to WebSocket: " + request.getURI(), ex);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy.java, + * A base class for {@code RequestUpgradeStrategy} implementations on top of, + * JSR-356 based servers which include Tyrus as their WebSocket engine., + * <p>Works with Tyrus 1.3.5 (WebLogic 12.1.3) and Tyrus 1.7+ (GlassFish 4.1.x)., +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/jetty/JettyRequestUpgradeStrategy.java, + * A {@link RequestUpgradeStrategy} for use with Jetty 9.0-9.3. Based on Jetty's, + * internal {@code org.eclipse.jetty.websocket.server.WebSocketHandler} class., +	 * Default constructor that creates {@link WebSocketServerFactory} through, +	 * its default constructor thus using a default {@link WebSocketPolicy}., +	 * A constructor accepting a {@link WebSocketServerFactory}., +	 * This may be useful for modifying the factory's {@link WebSocketPolicy}, +	 * via {@link WebSocketServerFactory#getPolicy()}., +					"Response update failed during upgrade to WebSocket: " + request.getURI(), ex);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy.java, + * A base class for {@code RequestUpgradeStrategy} implementations on top of, + * JSR-356 based servers which include Tyrus as their WebSocket engine., + * <p>Works with Tyrus 1.3.5 (WebLogic 12.1.3) and Tyrus 1.7+ (GlassFish 4.1.x)., +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/GlassFishRequestUpgradeStrategy.java, + * Copyright 2002-2015 the original author or authors., + * A WebSocket {@code RequestUpgradeStrategy} for Oracle's GlassFish 4.1 and higher., +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/jetty/JettyRequestUpgradeStrategy.java, + * A {@link RequestUpgradeStrategy} for use with Jetty 9.0-9.3. Based on Jetty's, + * internal {@code org.eclipse.jetty.websocket.server.WebSocketHandler} class., +	 * Default constructor that creates {@link WebSocketServerFactory} through, +	 * its default constructor thus using a default {@link WebSocketPolicy}., +	 * A constructor accepting a {@link WebSocketServerFactory}., +	 * This may be useful for modifying the factory's {@link WebSocketPolicy}, +	 * via {@link WebSocketServerFactory#getPolicy()}., +					"Response update failed during upgrade to WebSocket: " + request.getURI(), ex);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy.java, + * A base class for {@code RequestUpgradeStrategy} implementations on top of, + * JSR-356 based servers which include Tyrus as their WebSocket engine., + * <p>Works with Tyrus 1.3.5 (WebLogic 12.1.3) and Tyrus 1.7+ (GlassFish 4.1.x)., +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/GlassFishRequestUpgradeStrategy.java, + * Copyright 2002-2015 the original author or authors., + * A WebSocket {@code RequestUpgradeStrategy} for Oracle's GlassFish 4.1 and higher., +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/TomcatRequestUpgradeStrategy.java, + * Copyright 2002-2015 the original author or authors., + * A WebSocket {@code RequestUpgradeStrategy} for Apache Tomcat. Compatible with, + * all versions of Tomcat that support JSR-356, i.e. Tomcat 7.0.47+ and higher., + *, + * <p>To modify properties of the underlying {@link javax.websocket.server.ServerContainer}, +					"Servlet request failed to upgrade to WebSocket: " + requestUrl, ex);, +					"Response update failed during upgrade to WebSocket: " + requestUrl, ex);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/jetty/JettyRequestUpgradeStrategy.java, + * A {@link RequestUpgradeStrategy} for use with Jetty 9.0-9.3. Based on Jetty's, + * internal {@code org.eclipse.jetty.websocket.server.WebSocketHandler} class., +	 * Default constructor that creates {@link WebSocketServerFactory} through, +	 * its default constructor thus using a default {@link WebSocketPolicy}., +	 * A constructor accepting a {@link WebSocketServerFactory}., +	 * This may be useful for modifying the factory's {@link WebSocketPolicy}, +	 * via {@link WebSocketServerFactory#getPolicy()}., +					"Response update failed during upgrade to WebSocket: " + request.getURI(), ex);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy.java, + * A base class for {@code RequestUpgradeStrategy} implementations on top of, + * JSR-356 based servers which include Tyrus as their WebSocket engine., + * <p>Works with Tyrus 1.3.5 (WebLogic 12.1.3) and Tyrus 1.7+ (GlassFish 4.1.x)., +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/GlassFishRequestUpgradeStrategy.java, + * Copyright 2002-2015 the original author or authors., + * A WebSocket {@code RequestUpgradeStrategy} for Oracle's GlassFish 4.1 and higher., +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/TomcatRequestUpgradeStrategy.java, + * Copyright 2002-2015 the original author or authors., + * A WebSocket {@code RequestUpgradeStrategy} for Apache Tomcat. Compatible with, + * all versions of Tomcat that support JSR-356, i.e. Tomcat 7.0.47+ and higher., + *, + * <p>To modify properties of the underlying {@link javax.websocket.server.ServerContainer}, +					"Servlet request failed to upgrade to WebSocket: " + requestUrl, ex);, +					"Response update failed during upgrade to WebSocket: " + requestUrl, ex);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/UndertowRequestUpgradeStrategy.java, + * A WebSocket {@code RequestUpgradeStrategy} for use with WildFly and its, + * underlying Undertow web server. Also compatible with embedded Undertow usage., +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/jetty/JettyRequestUpgradeStrategy.java, + * A {@link RequestUpgradeStrategy} for use with Jetty 9.0-9.3. Based on Jetty's, + * internal {@code org.eclipse.jetty.websocket.server.WebSocketHandler} class., +	 * Default constructor that creates {@link WebSocketServerFactory} through, +	 * its default constructor thus using a default {@link WebSocketPolicy}., +	 * A constructor accepting a {@link WebSocketServerFactory}., +	 * This may be useful for modifying the factory's {@link WebSocketPolicy}, +	 * via {@link WebSocketServerFactory#getPolicy()}., +					"Response update failed during upgrade to WebSocket: " + request.getURI(), ex);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy.java, + * A base class for {@code RequestUpgradeStrategy} implementations on top of]