[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||, +					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {, +				if (logger.isDebugEnabled()) {, +					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef);, +				}, +			}, +			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||, +					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {, +				if (logger.isDebugEnabled()) {, +					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef);, +				}, +			}, +			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassUtils.java, +	/**, +	 * Determine whether the given bean definition indicates a lite {@code @Configuration}, +	 * class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker., +	 */, +	public static boolean isLiteConfigurationClass(BeanDefinition beanDef) {, +		return CONFIGURATION_CLASS_LITE.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE));, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +			if (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||, +					ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {, +				if (logger.isDebugEnabled()) {, +					logger.debug("Bean definition has already been processed as a configuration class: " + beanDef);, +				}, +			}, +			else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassUtils.java, +	/**, +	 * Determine whether the given bean definition indicates a lite {@code @Configuration}, +	 * class, through checking {@link #checkConfigurationClassCandidate}'s metadata marker., +	 */, +	public static boolean isLiteConfigurationClass(BeanDefinition beanDef) {, +		return CONFIGURATION_CLASS_LITE.equals(beanDef.getAttribute(CONFIGURATION_CLASS_ATTRIBUTE));, +	}, +, +++ b/spring-context/src/test/java/org/springframework/context/annotation/configuration/ImportXmlConfig-context.xml, +	<!-- should not cause infinite loop (SPR-11858) but rather simply be ignored -->, +	<bean class="org.springframework.context.annotation.ConfigurationClassPostProcessor"/>, +]