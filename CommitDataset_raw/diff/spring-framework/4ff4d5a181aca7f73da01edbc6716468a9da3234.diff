[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java, +	 * <p>As of 5.1 this method can also be used on the client side to read form, +	 * data from a server response (e.g. OAuth)., +	public static BodyExtractor<Mono<MultiValueMap<String, String>>, ReactiveHttpInputMessage> toFormData() {, +		return (message, context) -> {, +			Optional<ServerHttpResponse> response = context.serverResponse();, +			if (response.isPresent() && message instanceof ServerHttpRequest) {, +				return reader.readMono(type, type, (ServerHttpRequest) message, response.get(), context.hints());, +			}, +			else {, +				return reader.readMono(type, message, context.hints());, +			}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java, +	 * <p>As of 5.1 this method can also be used on the client side to read form, +	 * data from a server response (e.g. OAuth)., +	public static BodyExtractor<Mono<MultiValueMap<String, String>>, ReactiveHttpInputMessage> toFormData() {, +		return (message, context) -> {, +			Optional<ServerHttpResponse> response = context.serverResponse();, +			if (response.isPresent() && message instanceof ServerHttpRequest) {, +				return reader.readMono(type, type, (ServerHttpRequest) message, response.get(), context.hints());, +			}, +			else {, +				return reader.readMono(type, message, context.hints());, +			}, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/BodyExtractorsTests.java, +	public void toMono() {, +	public void toMonoParameterizedTypeReference() {, +	public void toMonoWithHints() {, +	public void toMonoWithEmptyBodyAndNoContentType() {, +	public void toFlux() {, +	public void toFluxWithHints() {, +	public void toFluxUnacceptable() {, +	public void toFormData() {, +		Mono<MultiValueMap<String, String>> result = BodyExtractors.toFormData().extract(request, this.context);, +	public void toParts() {, +	public void toDataBuffers() {]