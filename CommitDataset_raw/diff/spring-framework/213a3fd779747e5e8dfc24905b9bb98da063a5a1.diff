[+++ b/spring-core/src/main/java/org/springframework/util/DigestUtils.java, + * Copyright 2002-2015 the original author or authors., +import java.io.IOException;, +import java.io.InputStream;, +	 * Calculate the MD5 digest of the given InputStream., +	 * @param inputStream the inputStream to calculate the digest over, +	 * @return the digest, +	 * @since 4.2, +	 */, +	public static byte[] md5Digest(InputStream inputStream) throws IOException{, +		return digest(MD5_ALGORITHM_NAME, inputStream);, +	}, +, +	/**, +	 * Return a hexadecimal string representation of the MD5 digest of the given, +	 * inputStream., +	 * @param inputStream the inputStream to calculate the digest over, +	 * @return a hexadecimal digest string, +	 * @since 4.2, +	 */, +	public static String md5DigestAsHex(InputStream inputStream) throws IOException{, +		return digestAsHexString(MD5_ALGORITHM_NAME, inputStream);, +	}, +, +	/**, +	 * Append a hexadecimal string representation of the MD5 digest of the given, +	 * inputStream to the given {@link StringBuilder}., +	 * @param inputStream the inputStream to calculate the digest over, +	 * @param builder the string builder to append the digest to, +	 * @return the given string builder, +	 * @since 4.2, +	 */, +	public static StringBuilder appendMd5DigestAsHex(InputStream inputStream, StringBuilder builder) throws IOException{, +		return appendDigestAsHex(MD5_ALGORITHM_NAME, inputStream, builder);, +	}, +, +	/**, +	private static byte[] digest(String algorithm, InputStream inputStream) throws IOException{, +		MessageDigest messageDigest = getDigest(algorithm);, +		if(inputStream instanceof UpdateMessageDigestInputStream){, +			((UpdateMessageDigestInputStream) inputStream).updateMessageDigest(messageDigest);, +			return messageDigest.digest();, +		}else{, +			return messageDigest.digest(StreamUtils.copyToByteArray(inputStream));, +		}, +	}, +, +	private static String digestAsHexString(String algorithm, InputStream inputStream) throws IOException{, +		char[] hexDigest = digestAsHexChars(algorithm, inputStream);, +		return new String(hexDigest);, +	}, +, +	private static StringBuilder appendDigestAsHex(String algorithm, InputStream inputStream, StringBuilder builder) throws IOException{, +		char[] hexDigest = digestAsHexChars(algorithm, inputStream);, +		return builder.append(hexDigest);, +	}, +, +	private static char[] digestAsHexChars(String algorithm, InputStream inputStream) throws IOException{, +		byte[] digest = digest(algorithm, inputStream);, +		return encodeHex(digest);, +	}, +, +++ b/spring-core/src/main/java/org/springframework/util/DigestUtils.java, + * Copyright 2002-2015 the original author or authors., +import java.io.IOException;, +import java.io.InputStream;, +	 * Calculate the MD5 digest of the given InputStream., +	 * @param inputStream the inputStream to calculate the digest over, +	 * @return the digest, +	 * @since 4.2, +	 */, +	public static byte[] md5Digest(InputStream inputStream) throws IOException{, +		return digest(MD5_ALGORITHM_NAME, inputStream);, +	}, +, +	/**, +	 * Return a hexadecimal string representation of the MD5 digest of the given, +	 * inputStream., +	 * @param inputStream the inputStream to calculate the digest over, +	 * @return a hexadecimal digest string, +	 * @since 4.2, +	 */, +	public static String md5DigestAsHex(InputStream inputStream) throws IOException{, +		return digestAsHexString(MD5_ALGORITHM_NAME, inputStream);, +	}, +, +	/**, +	 * Append a hexadecimal string representation of the MD5 digest of the given, +	 * inputStream to the given {@link StringBuilder}., +	 * @param inputStream the inputStream to calculate the digest over, +	 * @param builder the string builder to append the digest to, +	 * @return the given string builder, +	 * @since 4.2, +	 */, +	public static StringBuilder appendMd5DigestAsHex(InputStream inputStream, StringBuilder builder) throws IOException{, +		return appendDigestAsHex(MD5_ALGORITHM_NAME, inputStream, builder);, +	}, +, +	/**, +	private static byte[] digest(String algorithm, InputStream inputStream) throws IOException{]