[+++ b/spring-core/src/main/java/org/springframework/asm/Item.java, +        case ClassWriter.CLASS:, +            this.intVal = 0;     // intVal of a class must be zero, see visitInnerClass, +			hashCode = 0x7FFFFFFF & (type + strVal1.hashCode());, +			return;, +++ b/spring-core/src/main/java/org/springframework/asm/Item.java, +        case ClassWriter.CLASS:, +            this.intVal = 0;     // intVal of a class must be zero, see visitInnerClass, +			hashCode = 0x7FFFFFFF & (type + strVal1.hashCode());, +			return;, +++ b/spring-core/src/main/java/org/springframework/asm/Label.java, +            srcAndRefPositions = new int[nbSubroutines / 32 + 1];, +++ b/spring-core/src/main/java/org/springframework/asm/Item.java, +        case ClassWriter.CLASS:, +            this.intVal = 0;     // intVal of a class must be zero, see visitInnerClass, +			hashCode = 0x7FFFFFFF & (type + strVal1.hashCode());, +			return;, +++ b/spring-core/src/main/java/org/springframework/asm/Label.java, +            srcAndRefPositions = new int[nbSubroutines / 32 + 1];, +++ b/spring-core/src/main/java/org/springframework/asm/MethodWriter.java, +                StringBuilder sb = new StringBuilder();, +                    sb.append('[');, +                    sb.append('L');, +                    sb.append(cw.typeTable[t & Frame.BASE_VALUE].strVal1);, +                    sb.append(';');, +                        sb.append('I');, +                        sb.append('F');, +                        sb.append('D');, +                        sb.append('Z');, +                        sb.append('B');, +                        sb.append('C');, +                        sb.append('S');, +                        sb.append('J');, +                stackMap.putByte(7).putShort(cw.newClass(sb.toString()));, +++ b/spring-core/src/main/java/org/springframework/asm/Item.java, +        case ClassWriter.CLASS:, +            this.intVal = 0;     // intVal of a class must be zero, see visitInnerClass, +			hashCode = 0x7FFFFFFF & (type + strVal1.hashCode());, +			return;, +++ b/spring-core/src/main/java/org/springframework/asm/Label.java, +            srcAndRefPositions = new int[nbSubroutines / 32 + 1];, +++ b/spring-core/src/main/java/org/springframework/asm/MethodWriter.java, +                StringBuilder sb = new StringBuilder();, +                    sb.append('[');, +                    sb.append('L');, +                    sb.append(cw.typeTable[t & Frame.BASE_VALUE].strVal1);, +                    sb.append(';');, +                        sb.append('I');, +                        sb.append('F');, +                        sb.append('D');, +                        sb.append('Z');, +                        sb.append('B');, +                        sb.append('C');, +                        sb.append('S');, +                        sb.append('J');, +                stackMap.putByte(7).putShort(cw.newClass(sb.toString()));, +++ b/spring-core/src/main/java/org/springframework/asm/Type.java, +     *         <tt>(argSize &lt;&lt; 2) | retSize</tt> (argSize is therefore equal to, +     *         <tt>i &gt;&gt; 2</tt>, and retSize to <tt>i &amp; 0x03</tt>)., +            StringBuilder sb = new StringBuilder(getElementType().getClassName());, +                sb.append("[]");, +            return sb.toString();, +     *         packed into a single, +     *         int i = <tt>(argSize &lt;&lt; 2) | retSize</tt>, +     *         (argSize is therefore equal to <tt>i &gt;&gt; 2</tt>,, +     *         and retSize to <tt>i &amp; 0x03</tt>)., +        StringBuilder sb = new StringBuilder();, +        getDescriptor(sb);, +        return sb.toString();, +		StringBuilder sb = new StringBuilder();, +        sb.append('(');, +            argumentTypes[i].getDescriptor(sb);, +        sb.append(')');, +        returnType.getDescriptor(sb);, +        return sb.toString();, +     * string builder., +     *            the string builder to which the descriptor must be appended., +    private void getDescriptor(final StringBuilder buf) {, +		StringBuilder sb = new StringBuilder();, +        getDescriptor(sb, c);, +        return sb.toString();, +		StringBuilder sb = new StringBuilder();, +        sb.append('(');, +            getDescriptor(sb, parameters[i]);, +        return sb.append(")V").toString();, +		StringBuilder sb = new StringBuilder();, +        sb.append('(');, +            getDescriptor(sb, parameters[i]);, +        sb.append(')');, +        getDescriptor(sb, m.getReturnType());, +        return sb.toString();, +     * Appends the descriptor of the given class to the given string builder., +     * @param sb, +    private static void getDescriptor(final StringBuilder sb, final Class<?> c) {, +                sb.append(car);, +                sb.append('[');, +                sb.append('L');, +                    sb.append(car == '.' ? '/' : car);, +                sb.append(';');]