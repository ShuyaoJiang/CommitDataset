[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +					if (pv.isOptional()) {, +						logger.debug("Ignoring optional value for property '" + actualName +, +								"' - property not found on bean class [" + getRootClass().getName() + "]");, +						return;, +					}, +					else {, +				}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +					if (pv.isOptional()) {, +						logger.debug("Ignoring optional value for property '" + actualName +, +								"' - property not found on bean class [" + getRootClass().getName() + "]");, +						return;, +					}, +					else {, +				}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/PropertyValue.java, +	private boolean optional = false;, +, +		this.optional = original.isOptional();, +		this.optional = original.isOptional();, +	public void setOptional(boolean optional) {, +		this.optional = optional;, +	}, +, +	public boolean isOptional() {, +		return this.optional;, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +					if (pv.isOptional()) {, +						logger.debug("Ignoring optional value for property '" + actualName +, +								"' - property not found on bean class [" + getRootClass().getName() + "]");, +						return;, +					}, +					else {, +				}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/PropertyValue.java, +	private boolean optional = false;, +, +		this.optional = original.isOptional();, +		this.optional = original.isOptional();, +	public void setOptional(boolean optional) {, +		this.optional = optional;, +	}, +, +	public boolean isOptional() {, +		return this.optional;, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/PropertyOverrideConfigurer.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.beans.PropertyValue;, +	 * <p>If you ignore invalid keys, keys that do not follow the 'beanName.property' format, +	 * (or refer to invalid bean names or properties) will just be logged at debug level., +	 * This allows one to have arbitrary other keys in a properties file., +		PropertyValue pv = new PropertyValue(property, value);, +		pv.setOptional(this.ignoreInvalidKeys);, +		bd.getPropertyValues().addPropertyValue(pv);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +					if (pv.isOptional()) {, +						logger.debug("Ignoring optional value for property '" + actualName +, +								"' - property not found on bean class [" + getRootClass().getName() + "]");, +						return;, +					}, +					else {, +				}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/PropertyValue.java, +	private boolean optional = false;, +, +		this.optional = original.isOptional();, +		this.optional = original.isOptional();, +	public void setOptional(boolean optional) {, +		this.optional = optional;, +	}, +, +	public boolean isOptional() {, +		return this.optional;, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/PropertyOverrideConfigurer.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.beans.PropertyValue;, +	 * <p>If you ignore invalid keys, keys that do not follow the 'beanName.property' format, +	 * (or refer to invalid bean names or properties) will just be logged at debug level., +	 * This allows one to have arbitrary other keys in a properties file., +		PropertyValue pv = new PropertyValue(property, value);, +		pv.setOptional(this.ignoreInvalidKeys);, +		bd.getPropertyValues().addPropertyValue(pv);, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/config/PropertyResourceConfigurerTests.java, +			props.setProperty("tb2.nam", "test");, +			props.setProperty("tb3.name", "test");, +			assertEquals("test", factory.getBean("tb2", TestBean.class).getName());, +			}, +			catch (BeanInitializationException ex) {]