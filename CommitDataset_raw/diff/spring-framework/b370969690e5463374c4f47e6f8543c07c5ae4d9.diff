[+++ b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate3/LocalSessionFactoryBean.java, + * Copyright 2002-2010 the original author or authors., +	 * Execute schema update script, determined by the Configuration object, +	 * used for creating the SessionFactory. A replacement for Hibernate's, +	 * SchemaUpdate class, for automatically executing schema update scripts, +	 * on application startup. Can also be invoked manually., +	 * <p>Fetch the LocalSessionFactoryBean itself rather than the exposed, +	 * SessionFactory to be able to invoke this method, e.g. via, +	 * <code>LocalSessionFactoryBean lsfb = (LocalSessionFactoryBean) ctx.getBean("&mySessionFactory");</code>., +	 * <p>Uses the SessionFactory that this bean generates for accessing a, +	 * JDBC connection to perform the script., +	 * @throws DataAccessException in case of script execution errors, +	 * @see #setSchemaUpdate, +	 * @see org.hibernate.cfg.Configuration#generateSchemaUpdateScript, +	 * @see org.hibernate.tool.hbm2ddl.SchemaUpdate, +	 */, +	public void updateDatabaseSchema() throws DataAccessException {, +		logger.info("Updating database schema for Hibernate SessionFactory");, +		DataSource dataSource = getDataSource();, +		if (dataSource != null) {, +			// Make given DataSource available for the schema update., +			configTimeDataSourceHolder.set(dataSource);, +		}, +		try {, +			HibernateTemplate hibernateTemplate = new HibernateTemplate(getSessionFactory());, +			hibernateTemplate.setFlushMode(HibernateTemplate.FLUSH_NEVER);, +			hibernateTemplate.execute(, +				new HibernateCallback<Object>() {, +					public Object doInHibernate(Session session) throws HibernateException, SQLException {, +						Connection con = session.connection();, +						Dialect dialect = Dialect.getDialect(getConfiguration().getProperties());, +						DatabaseMetadata metadata = new DatabaseMetadata(con, dialect);, +						String[] sql = getConfiguration().generateSchemaUpdateScript(dialect, metadata);, +						executeSchemaScript(con, sql);, +						return null;, +					}, +				}, +			);, +		}, +		finally {, +			if (dataSource != null) {, +				configTimeDataSourceHolder.set(null);, +			}, +		}, +	}, +, +	/**, +	 * Execute schema creation script, determined by the Configuration object, +	 * used for creating the SessionFactory. A replacement for Hibernate's, +	 * SchemaValidator class, to be invoked after application startup., +	 * <p>Fetch the LocalSessionFactoryBean itself rather than the exposed, +	 * SessionFactory to be able to invoke this method, e.g. via, +	 * <code>LocalSessionFactoryBean lsfb = (LocalSessionFactoryBean) ctx.getBean("&mySessionFactory");</code>., +	 * <p>Uses the SessionFactory that this bean generates for accessing a, +	 * JDBC connection to perform the script., +	 * @throws DataAccessException in case of script execution errors, +	 * @see org.hibernate.cfg.Configuration#validateSchema, +	 * @see org.hibernate.tool.hbm2ddl.SchemaValidator, +	 */, +	public void validateDatabaseSchema() throws DataAccessException {, +		logger.info("Validating database schema for Hibernate SessionFactory");, +		DataSource dataSource = getDataSource();, +		if (dataSource != null) {, +			// Make given DataSource available for the schema update., +			configTimeDataSourceHolder.set(dataSource);, +		}, +		try {, +			HibernateTemplate hibernateTemplate = new HibernateTemplate(getSessionFactory());, +			hibernateTemplate.setFlushMode(HibernateTemplate.FLUSH_NEVER);, +			hibernateTemplate.execute(, +				new HibernateCallback<Object>() {, +					public Object doInHibernate(Session session) throws HibernateException, SQLException {, +						Connection con = session.connection();, +						Dialect dialect = Dialect.getDialect(getConfiguration().getProperties());, +						DatabaseMetadata metadata = new DatabaseMetadata(con, dialect, false);, +						getConfiguration().validateSchema(dialect, metadata);, +						return null;, +					}, +				}, +			);, +		}, +		finally {, +			if (dataSource != null) {, +				configTimeDataSourceHolder.set(null);, +			}, +		}, +	}, +, +	/**, +	 * <p>Uses the SessionFactory that this bean generates for accessing a, +	 * JDBC connection to perform the script., +	 * <p>Uses the SessionFactory that this bean generates for accessing a, +	 * JDBC connection to perform the script., +		DataSource dataSource = getDataSource();, +		if (dataSource != null) {, +			// Make given DataSource available for the schema update., +			configTimeDataSourceHolder.set(dataSource);, +		}, +		try {, +		finally {]