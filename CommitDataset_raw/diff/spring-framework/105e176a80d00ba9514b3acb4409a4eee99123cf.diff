[+++ b/spring-context/src/test/java/org/springframework/context/annotation/configuration/BeanMethodQualificationTests.java, +import org.springframework.beans.factory.support.RootBeanDefinition;, +	public void testCustomWithAsm() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.registerBeanDefinition("customConfig", new RootBeanDefinition(CustomConfig.class.getName()));, +		RootBeanDefinition customPojo = new RootBeanDefinition(CustomPojo.class.getName());, +		customPojo.setLazyInit(true);, +		ctx.registerBeanDefinition("customPojo", customPojo);, +		ctx.refresh();, +		assertFalse(ctx.getBeanFactory().containsSingleton("testBean1"));, +		CustomPojo pojo = ctx.getBean(CustomPojo.class);, +		assertThat(pojo.testBean.getName(), equalTo("interesting"));, +	}, +, +	@Test, +++ b/spring-context/src/test/java/org/springframework/context/annotation/configuration/BeanMethodQualificationTests.java, +import org.springframework.beans.factory.support.RootBeanDefinition;, +	public void testCustomWithAsm() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.registerBeanDefinition("customConfig", new RootBeanDefinition(CustomConfig.class.getName()));, +		RootBeanDefinition customPojo = new RootBeanDefinition(CustomPojo.class.getName());, +		customPojo.setLazyInit(true);, +		ctx.registerBeanDefinition("customPojo", customPojo);, +		ctx.refresh();, +		assertFalse(ctx.getBeanFactory().containsSingleton("testBean1"));, +		CustomPojo pojo = ctx.getBean(CustomPojo.class);, +		assertThat(pojo.testBean.getName(), equalTo("interesting"));, +	}, +, +	@Test, +++ b/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationMetadataReadingVisitor.java, +	protected final Set<String> annotationSet = new LinkedHashSet<String>(4);, +	protected final Set<MethodMetadata> methodMetadataSet = new LinkedHashSet<MethodMetadata>(4);, +		return new MethodMetadataReadingVisitor(name, access, getClassName(), this.classLoader, this.methodMetadataSet);, +		for (MethodMetadata methodMetadata : this.methodMetadataSet) {, +			if (methodMetadata.isAnnotated(annotationType)) {, +				return true;, +			}, +		}, +		return false;, +		Set<MethodMetadata> annotatedMethods = new LinkedHashSet<MethodMetadata>(4);, +		for (MethodMetadata methodMetadata : this.methodMetadataSet) {, +			if (methodMetadata.isAnnotated(annotationType)) {, +				annotatedMethods.add(methodMetadata);, +		}, +++ b/spring-context/src/test/java/org/springframework/context/annotation/configuration/BeanMethodQualificationTests.java, +import org.springframework.beans.factory.support.RootBeanDefinition;, +	public void testCustomWithAsm() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.registerBeanDefinition("customConfig", new RootBeanDefinition(CustomConfig.class.getName()));, +		RootBeanDefinition customPojo = new RootBeanDefinition(CustomPojo.class.getName());, +		customPojo.setLazyInit(true);, +		ctx.registerBeanDefinition("customPojo", customPojo);, +		ctx.refresh();, +		assertFalse(ctx.getBeanFactory().containsSingleton("testBean1"));, +		CustomPojo pojo = ctx.getBean(CustomPojo.class);, +		assertThat(pojo.testBean.getName(), equalTo("interesting"));, +	}, +, +	@Test, +++ b/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationMetadataReadingVisitor.java, +	protected final Set<String> annotationSet = new LinkedHashSet<String>(4);, +	protected final Set<MethodMetadata> methodMetadataSet = new LinkedHashSet<MethodMetadata>(4);, +		return new MethodMetadataReadingVisitor(name, access, getClassName(), this.classLoader, this.methodMetadataSet);, +		for (MethodMetadata methodMetadata : this.methodMetadataSet) {, +			if (methodMetadata.isAnnotated(annotationType)) {, +				return true;, +			}, +		}, +		return false;, +		Set<MethodMetadata> annotatedMethods = new LinkedHashSet<MethodMetadata>(4);, +		for (MethodMetadata methodMetadata : this.methodMetadataSet) {, +			if (methodMetadata.isAnnotated(annotationType)) {, +				annotatedMethods.add(methodMetadata);, +		}, +++ b/spring-core/src/main/java/org/springframework/core/type/classreading/MethodMetadataReadingVisitor.java, +import java.util.Set;, +	protected final Set<MethodMetadata> methodMetadataSet;, +	protected final MultiValueMap<String, AnnotationAttributes> attributeMap =, +			new LinkedMultiValueMap<String, AnnotationAttributes>(4);, +	public MethodMetadataReadingVisitor(String name, int access, String declaringClassName,, +			ClassLoader classLoader, Set<MethodMetadata> methodMetadataSet) {, +		this.methodMetadataSet = methodMetadataSet;, +		this.methodMetadataSet.add(this);, +	public Map<String, Object> getAnnotationAttributes(String annotationType, boolean classValuesAsString) {, +	public MultiValueMap<String, Object> getAllAnnotationAttributes(String annotationType, boolean classValuesAsString) {]