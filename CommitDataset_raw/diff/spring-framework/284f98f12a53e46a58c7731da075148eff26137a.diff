[+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +		assertEquals("handle null", response.getContentAsString());, +		request = new MockHttpServletRequest("GET", "/handle");, +		request.addParameter("p", "value");, +		response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("handle value", response.getContentAsString());, +	}, +, +	@Test, +	public void requestMappingInterfaceWithProxy() throws Exception {, +		DispatcherServlet servlet = new DispatcherServlet() {, +			@Override, +			protected WebApplicationContext createWebApplicationContext(WebApplicationContext parent) {, +				GenericWebApplicationContext wac = new GenericWebApplicationContext();, +				wac.registerBeanDefinition("controller", new RootBeanDefinition(IMyControllerImpl.class));, +				DefaultAdvisorAutoProxyCreator autoProxyCreator = new DefaultAdvisorAutoProxyCreator();, +				autoProxyCreator.setBeanFactory(wac.getBeanFactory());, +				wac.getBeanFactory().addBeanPostProcessor(autoProxyCreator);, +				wac.getBeanFactory().registerSingleton("advisor", new DefaultPointcutAdvisor(new SimpleTraceInterceptor()));, +				wac.refresh();, +				return wac;, +			}, +		};, +		servlet.init(new MockServletConfig());, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/handle");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("handle null", response.getContentAsString());, +, +		request = new MockHttpServletRequest("GET", "/handle");, +		request.addParameter("p", "value");, +		response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("handle value", response.getContentAsString());, +	@Controller, +		void handle(Writer writer, @RequestParam(value="p", required=false) String param) throws IOException;, +		public void handle(Writer writer, @RequestParam(value="p", required=false) String param) throws IOException {, +			writer.write("handle " + param);, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +		assertEquals("handle null", response.getContentAsString());, +		request = new MockHttpServletRequest("GET", "/handle");, +		request.addParameter("p", "value");, +		response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("handle value", response.getContentAsString());, +	}, +, +	@Test, +	public void requestMappingInterfaceWithProxy() throws Exception {, +		DispatcherServlet servlet = new DispatcherServlet() {, +			@Override, +			protected WebApplicationContext createWebApplicationContext(WebApplicationContext parent) {, +				GenericWebApplicationContext wac = new GenericWebApplicationContext();, +				wac.registerBeanDefinition("controller", new RootBeanDefinition(IMyControllerImpl.class));, +				DefaultAdvisorAutoProxyCreator autoProxyCreator = new DefaultAdvisorAutoProxyCreator();, +				autoProxyCreator.setBeanFactory(wac.getBeanFactory());, +				wac.getBeanFactory().addBeanPostProcessor(autoProxyCreator);, +				wac.getBeanFactory().registerSingleton("advisor", new DefaultPointcutAdvisor(new SimpleTraceInterceptor()));, +				wac.refresh();, +				return wac;, +			}, +		};, +		servlet.init(new MockServletConfig());, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/handle");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("handle null", response.getContentAsString());, +, +		request = new MockHttpServletRequest("GET", "/handle");, +		request.addParameter("p", "value");, +		response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("handle value", response.getContentAsString());, +	@Controller, +		void handle(Writer writer, @RequestParam(value="p", required=false) String param) throws IOException;, +		public void handle(Writer writer, @RequestParam(value="p", required=false) String param) throws IOException {, +			writer.write("handle " + param);, +++ b/org.springframework.web/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodResolver.java, +import java.lang.reflect.Proxy;, +		Class<?> specificHandlerType = null;, +		if (!Proxy.isProxyClass(handlerType)) {, +			specificHandlerType = handlerType;, +		}, +			final Class<?> targetClass = (specificHandlerType != null ? specificHandlerType : currentHandlerType);, +					Method specificMethod = ClassUtils.getMostSpecificMethod(method, targetClass);]