[+++ b/spring-core/src/main/java/org/springframework/core/io/support/SpringFactoriesLoader.java, + * <p>{@code SpringFactoriesLoader} {@linkplain #loadFactories loads} and instantiates, + * factories of a given type from {@value #FACTORIES_RESOURCE_LOCATION} files which, + * may be present in multiple JAR files in the classpath. The {@code spring.factories}, + * file must be in {@link Properties} format, where the key is the fully qualified, + * name of the interface or abstract class, and the value is a comma-separated list of, + * implementation class names. For example:, + * where {@code example.MyService} is the name of the interface, and {@code MyServiceImpl1}, + * and {@code MyServiceImpl2} are two implementations., +	/**, +	 * The location to look for factories., +	 * <p>Can be present in multiple JAR files., +	 */, +	public static final String FACTORIES_RESOURCE_LOCATION = "META-INF/spring.factories";, +, +	 * Load and instantiate the factory implementations of the given type from, +	 * {@value #FACTORIES_RESOURCE_LOCATION}, using the given class loader., +	 * <p>The returned factories are sorted in accordance with the {@link AnnotationAwareOrderComparator}., +	 * <p>If a custom instantiation strategy is required, use {@link #loadFactoryNames}, +	 * to obtain all registered factory names., +	 * @see #loadFactoryNames, +	 * @throws IllegalArgumentException if any factory implementation class cannot, +	 * be loaded or if an error occurs while instantiating any factory, +	/**, +	 * Load the fully qualified class names of factory implementations of the, +	 * given type from {@value #FACTORIES_RESOURCE_LOCATION}, using the given, +	 * class loader., +	 * @param factoryClass the interface or abstract class representing the factory, +	 * @param classLoader the ClassLoader to use for loading resources; can be, +	 * {@code null} to use the default, +	 * @see #loadFactories, +	 * @throws IllegalArgumentException if an error occurs while loading factory names, +	 */]