[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, + * Copyright 2002-2018 the original author or authors., +	/**, +	 * Set the name of the aspect (bean) in which the advice was declared., +	 */, +	 * Set the declaration order of this advice within the aspect., +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, + * Copyright 2002-2018 the original author or authors., +	/**, +	 * Set the name of the aspect (bean) in which the advice was declared., +	 */, +	 * Set the declaration order of this advice within the aspect., +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJPointcutAdvisor.java, +	public int getOrder() {, +		if (this.order != null) {, +			return this.order;, +		}, +		else {, +			return this.advice.getOrder();, +		}, +	}, +, +	@Override, +	/**, +	 * Return the name of the aspect (bean) in which the advice was declared., +	 * @since 4.3.15, +	 * @see AbstractAspectJAdvice#getAspectName(), +	 */, +	public String getAspectName() {, +		return this.advice.getAspectName();, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, + * Copyright 2002-2018 the original author or authors., +	/**, +	 * Set the name of the aspect (bean) in which the advice was declared., +	 */, +	 * Set the declaration order of this advice within the aspect., +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJPointcutAdvisor.java, +	public int getOrder() {, +		if (this.order != null) {, +			return this.order;, +		}, +		else {, +			return this.advice.getOrder();, +		}, +	}, +, +	@Override, +	/**, +	 * Return the name of the aspect (bean) in which the advice was declared., +	 * @since 4.3.15, +	 * @see AbstractAspectJAdvice#getAspectName(), +	 */, +	public String getAspectName() {, +		return this.advice.getAspectName();, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJPrecedenceInformation.java, + * Copyright 2002-2018 the original author or authors., +	 * Return the name of the aspect (bean) in which the advice was declared., +	 * Return the declaration order of the advice member within the aspect., +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, + * Copyright 2002-2018 the original author or authors., +	/**, +	 * Set the name of the aspect (bean) in which the advice was declared., +	 */, +	 * Set the declaration order of this advice within the aspect., +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJPointcutAdvisor.java, +	public int getOrder() {, +		if (this.order != null) {, +			return this.order;, +		}, +		else {, +			return this.advice.getOrder();, +		}, +	}, +, +	@Override, +	/**, +	 * Return the name of the aspect (bean) in which the advice was declared., +	 * @since 4.3.15, +	 * @see AbstractAspectJAdvice#getAspectName(), +	 */, +	public String getAspectName() {, +		return this.advice.getAspectName();, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJPrecedenceInformation.java, + * Copyright 2002-2018 the original author or authors., +	 * Return the name of the aspect (bean) in which the advice was declared., +	 * Return the declaration order of the advice member within the aspect., +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/autoproxy/AspectJAwareAdvisorAutoProxyCreator.java, + * Copyright 2002-2018 the original author or authors., +		List<PartiallyComparableAdvisorHolder> partiallyComparableAdvisors = new ArrayList<>(advisors.size());, +		List<PartiallyComparableAdvisorHolder> sorted = PartialOrder.sort(partiallyComparableAdvisors);, +			if (advisor instanceof AspectJPointcutAdvisor &&, +					((AspectJPointcutAdvisor) advisor).getAspectName().equals(beanName)) {, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, + * Copyright 2002-2018 the original author or authors., +	/**, +	 * Set the name of the aspect (bean) in which the advice was declared., +	 */, +	 * Set the declaration order of this advice within the aspect., +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJPointcutAdvisor.java, +	public int getOrder() {]