[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +			bd = (rbd.isPrototype() ? rbd : rbd.cloneBeanDefinition());, +		if (!mbd.isPrototype()) {, +			}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +			bd = (rbd.isPrototype() ? rbd : rbd.cloneBeanDefinition());, +		if (!mbd.isPrototype()) {, +			}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ChildBeanDefinition.java, + * Copyright 2002-2013 the original author or authors., +			String parentName, Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {, +		super(original);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +			bd = (rbd.isPrototype() ? rbd : rbd.cloneBeanDefinition());, +		if (!mbd.isPrototype()) {, +			}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ChildBeanDefinition.java, + * Copyright 2002-2013 the original author or authors., +			String parentName, Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {, +		super(original);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/RootBeanDefinition.java, +		super(original);, +		this.decoratedDefinition = original.decoratedDefinition;, +		this.allowCaching = original.allowCaching;, +		this.targetType = original.targetType;, +		this.isFactoryMethodUnique = original.isFactoryMethodUnique;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +			bd = (rbd.isPrototype() ? rbd : rbd.cloneBeanDefinition());, +		if (!mbd.isPrototype()) {, +			}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ChildBeanDefinition.java, + * Copyright 2002-2013 the original author or authors., +			String parentName, Class<?> beanClass, ConstructorArgumentValues cargs, MutablePropertyValues pvs) {, +		super(original);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/RootBeanDefinition.java, +		super(original);, +		this.decoratedDefinition = original.decoratedDefinition;, +		this.allowCaching = original.allowCaching;, +		this.targetType = original.targetType;, +		this.isFactoryMethodUnique = original.isFactoryMethodUnique;, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java, +	public void testGetTypeWorksAfterParentChildMerging() {, +		RootBeanDefinition parentDefinition = new RootBeanDefinition(TestBean.class);, +		ChildBeanDefinition childDefinition = new ChildBeanDefinition("parent", DerivedTestBean.class, null, null);, +, +		DefaultListableBeanFactory factory = new DefaultListableBeanFactory();, +		factory.registerBeanDefinition("parent", parentDefinition);, +		factory.registerBeanDefinition("child", childDefinition);, +		factory.freezeConfiguration();, +, +		assertEquals(TestBean.class, factory.getType("parent"));, +		assertEquals(DerivedTestBean.class, factory.getType("child"));, +	}, +, +	@Test]