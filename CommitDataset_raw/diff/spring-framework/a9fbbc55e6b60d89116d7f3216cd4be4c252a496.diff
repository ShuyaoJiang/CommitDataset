[+++ b/spring-test/src/main/java/org/springframework/test/context/junit4/rules/SpringClassRule.java, +			logger.debug("Applying SpringClassRule to test class [" + testClass.getName() + "]");, +, +	private static void validateSpringMethodRuleConfiguration(Class<?> testClass) {, +			if (!Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers) &&, +					SpringMethodRule.class.isAssignableFrom(field.getType())) {, +					"Failed to find 'public SpringMethodRule' field in test class [%s]. " +, +					"Consult the javadoc for SpringClassRule for details.", testClass.getName()));, +					"SpringMethodRule field [%s] must be annotated with JUnit's @Rule annotation. " +, +					"Consult the javadoc for SpringClassRule for details.", ruleField));, +	static TestContextManager getTestContextManager(Class<?> testClass) {, +++ b/spring-test/src/main/java/org/springframework/test/context/junit4/rules/SpringClassRule.java, +			logger.debug("Applying SpringClassRule to test class [" + testClass.getName() + "]");, +, +	private static void validateSpringMethodRuleConfiguration(Class<?> testClass) {, +			if (!Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers) &&, +					SpringMethodRule.class.isAssignableFrom(field.getType())) {, +					"Failed to find 'public SpringMethodRule' field in test class [%s]. " +, +					"Consult the javadoc for SpringClassRule for details.", testClass.getName()));, +					"SpringMethodRule field [%s] must be annotated with JUnit's @Rule annotation. " +, +					"Consult the javadoc for SpringClassRule for details.", ruleField));, +	static TestContextManager getTestContextManager(Class<?> testClass) {, +++ b/spring-test/src/main/java/org/springframework/test/context/junit4/rules/SpringMethodRule.java, +			logger.debug("Applying SpringMethodRule to test method [" + frameworkMethod.getMethod() + "]");, +		Class<?> testClass = testInstance.getClass();, +, +		return new RunBeforeTestMethodCallbacks(, +				statement, testInstance, frameworkMethod.getMethod(), testContextManager);, +, +		return new RunAfterTestMethodCallbacks(, +				statement, testInstance, frameworkMethod.getMethod(), testContextManager);, +, +, +	private static SpringClassRule validateSpringClassRuleConfiguration(Class<?> testClass) {, +					"Failed to find 'public static final SpringClassRule' field in test class [%s]. " +, +					"Consult the javadoc for SpringClassRule for details.", testClass.getName()));, +					"SpringClassRule field [%s] must be annotated with JUnit's @ClassRule annotation. " +, +					"Consult the javadoc for SpringClassRule for details.", ruleField));, +++ b/spring-test/src/main/java/org/springframework/test/context/junit4/rules/SpringClassRule.java, +			logger.debug("Applying SpringClassRule to test class [" + testClass.getName() + "]");, +, +	private static void validateSpringMethodRuleConfiguration(Class<?> testClass) {, +			if (!Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers) &&, +					SpringMethodRule.class.isAssignableFrom(field.getType())) {, +					"Failed to find 'public SpringMethodRule' field in test class [%s]. " +, +					"Consult the javadoc for SpringClassRule for details.", testClass.getName()));, +					"SpringMethodRule field [%s] must be annotated with JUnit's @Rule annotation. " +, +					"Consult the javadoc for SpringClassRule for details.", ruleField));, +	static TestContextManager getTestContextManager(Class<?> testClass) {, +++ b/spring-test/src/main/java/org/springframework/test/context/junit4/rules/SpringMethodRule.java, +			logger.debug("Applying SpringMethodRule to test method [" + frameworkMethod.getMethod() + "]");, +		Class<?> testClass = testInstance.getClass();, +, +		return new RunBeforeTestMethodCallbacks(, +				statement, testInstance, frameworkMethod.getMethod(), testContextManager);, +, +		return new RunAfterTestMethodCallbacks(, +				statement, testInstance, frameworkMethod.getMethod(), testContextManager);, +, +, +	private static SpringClassRule validateSpringClassRuleConfiguration(Class<?> testClass) {, +					"Failed to find 'public static final SpringClassRule' field in test class [%s]. " +, +					"Consult the javadoc for SpringClassRule for details.", testClass.getName()));, +					"SpringClassRule field [%s] must be annotated with JUnit's @ClassRule annotation. " +, +					"Consult the javadoc for SpringClassRule for details.", ruleField));, +++ b/spring-test/src/main/java/org/springframework/test/context/junit4/statements/ProfileValueChecker.java, +import java.lang.annotation.Annotation;, +	 * @param next the next {@code Statement} in the execution chain;, +	 * never {@code null}, +			if (!ProfileValueUtils.isTestEnabledInThisEnvironment(this.testClass)) {, +				Annotation ann = AnnotationUtils.findAnnotation(this.testClass, IfProfileValue.class);, +						ann, this.testClass.getName()), false);, +			if (!ProfileValueUtils.isTestEnabledInThisEnvironment(this.testMethod, this.testClass)) {, +						this.testMethod), false);, +++ b/spring-test/src/main/java/org/springframework/test/context/junit4/rules/SpringClassRule.java, +			logger.debug("Applying SpringClassRule to test class [" + testClass.getName() + "]");, +, +	private static void validateSpringMethodRuleConfiguration(Class<?> testClass) {, +			if (!Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers) &&, +					SpringMethodRule.class.isAssignableFrom(field.getType())) {, +					"Failed to find 'public SpringMethodRule' field in test class [%s]. " +, +					"Consult the javadoc for SpringClassRule for details.", testClass.getName()));, +					"SpringMethodRule field [%s] must be annotated with JUnit's @Rule annotation. " +, +					"Consult the javadoc for SpringClassRule for details.", ruleField));, +	static TestContextManager getTestContextManager(Class<?> testClass) {, +++ b/spring-test/src/main/java/org/springframework/test/context/junit4/rules/SpringMethodRule.java, +			logger.debug("Applying SpringMethodRule to test method [" + frameworkMethod.getMethod() + "]");, +		Class<?> testClass = testInstance.getClass();, +, +		return new RunBeforeTestMethodCallbacks(, +				statement, testInstance, frameworkMethod.getMethod(), testContextManager);, +, +		return new RunAfterTestMethodCallbacks(, +				statement, testInstance, frameworkMethod.getMethod(), testContextManager);, +, +, +	private static SpringClassRule validateSpringClassRuleConfiguration(Class<?> testClass) {, +					"Failed to find 'public static final SpringClassRule' field in test class [%s]. " +, +					"Consult the javadoc for SpringClassRule for details.", testClass.getName()));, +					"SpringClassRule field [%s] must be annotated with JUnit's @ClassRule annotation. " +]