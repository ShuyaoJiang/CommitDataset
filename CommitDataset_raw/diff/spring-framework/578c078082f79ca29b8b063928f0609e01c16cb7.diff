[+++ b/spring-aop/src/main/java/org/springframework/aop/support/IntroductionInfoSupport.java, + * Copyright 2002-2018 the original author or authors., +	 * @param ifc the interface to suppress, +	public void suppressInterface(Class<?> ifc) {, +		this.publishedInterfaces.remove(ifc);, +++ b/spring-aop/src/main/java/org/springframework/aop/support/IntroductionInfoSupport.java, + * Copyright 2002-2018 the original author or authors., +	 * @param ifc the interface to suppress, +	public void suppressInterface(Class<?> ifc) {, +		this.publishedInterfaces.remove(ifc);, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/KeyGeneratorAdapter.java, + * Copyright 2002-2018 the original author or authors., + * Spring's {@link KeyGenerator} implementation that either delegates to a standard JSR-107, + * {@link javax.cache.annotation.CacheKeyGenerator}, or wrap a standard {@link KeyGenerator}, + * so that only relevant parameters are handled., +, +		Assert.notNull(cacheOperationSource, "JCacheOperationSource must not be null");, +		Assert.notNull(cacheOperationSource, "JCacheOperationSource must not be null");, +		Assert.notNull(target, "CacheKeyGenerator must not be null");, +, +++ b/spring-aop/src/main/java/org/springframework/aop/support/IntroductionInfoSupport.java, + * Copyright 2002-2018 the original author or authors., +	 * @param ifc the interface to suppress, +	public void suppressInterface(Class<?> ifc) {, +		this.publishedInterfaces.remove(ifc);, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/KeyGeneratorAdapter.java, + * Copyright 2002-2018 the original author or authors., + * Spring's {@link KeyGenerator} implementation that either delegates to a standard JSR-107, + * {@link javax.cache.annotation.CacheKeyGenerator}, or wrap a standard {@link KeyGenerator}, + * so that only relevant parameters are handled., +, +		Assert.notNull(cacheOperationSource, "JCacheOperationSource must not be null");, +		Assert.notNull(cacheOperationSource, "JCacheOperationSource must not be null");, +		Assert.notNull(target, "CacheKeyGenerator must not be null");, +, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/AbstractEntityManagerFactoryBean.java, +	 * Create a proxy for the given {@link EntityManagerFactory}. We do this to be able to, +	 * return a transaction-aware proxy for an application-managed {@link EntityManager}., +	 * @param emf the EntityManagerFactory as returned by the persistence provider,, +	 * @return the EntityManagerFactory proxy, +	 * Dynamic proxy invocation handler for an {@link EntityManagerFactory}, returning a, +	 * proxy {@link EntityManager} (if necessary) from {@code createEntityManager} methods., +++ b/spring-aop/src/main/java/org/springframework/aop/support/IntroductionInfoSupport.java, + * Copyright 2002-2018 the original author or authors., +	 * @param ifc the interface to suppress, +	public void suppressInterface(Class<?> ifc) {, +		this.publishedInterfaces.remove(ifc);, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/KeyGeneratorAdapter.java, + * Copyright 2002-2018 the original author or authors., + * Spring's {@link KeyGenerator} implementation that either delegates to a standard JSR-107, + * {@link javax.cache.annotation.CacheKeyGenerator}, or wrap a standard {@link KeyGenerator}, + * so that only relevant parameters are handled., +, +		Assert.notNull(cacheOperationSource, "JCacheOperationSource must not be null");, +		Assert.notNull(cacheOperationSource, "JCacheOperationSource must not be null");, +		Assert.notNull(target, "CacheKeyGenerator must not be null");, +, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/AbstractEntityManagerFactoryBean.java, +	 * Create a proxy for the given {@link EntityManagerFactory}. We do this to be able to, +	 * return a transaction-aware proxy for an application-managed {@link EntityManager}., +	 * @param emf the EntityManagerFactory as returned by the persistence provider,, +	 * @return the EntityManagerFactory proxy, +	 * Dynamic proxy invocation handler for an {@link EntityManagerFactory}, returning a, +	 * proxy {@link EntityManager} (if necessary) from {@code createEntityManager} methods., +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java, +		Assert.notNull(bufferFactory, "DataBufferFactory must not be null");, +		Assert.notNull(request, "HttpServerRequest must not be null");]