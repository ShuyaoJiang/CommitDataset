[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/endpoint/SpringConfigurator.java, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.stereotype.Component;, +import org.springframework.util.ClassUtils;, +		String beanName = ClassUtils.getShortNameAsProperty(endpointClass);, +		if (wac.containsBean(beanName)) {, +			T endpoint = wac.getBean(beanName, endpointClass);, +			if (logger.isTraceEnabled()) {, +				logger.trace("Using @ServerEndpoint singleton " + endpoint);, +			}, +			return endpoint;, +		}, +, +		Component annot = AnnotationUtils.findAnnotation(endpointClass, Component.class);, +		if ((annot != null) && wac.containsBean(annot.value())) {, +			T endpoint = wac.getBean(annot.value(), endpointClass);, +			if (logger.isTraceEnabled()) {, +				logger.trace("Using @ServerEndpoint singleton " + endpoint);, +			}, +			return endpoint;, +		}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/endpoint/SpringConfigurator.java, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.stereotype.Component;, +import org.springframework.util.ClassUtils;, +		String beanName = ClassUtils.getShortNameAsProperty(endpointClass);, +		if (wac.containsBean(beanName)) {, +			T endpoint = wac.getBean(beanName, endpointClass);, +			if (logger.isTraceEnabled()) {, +				logger.trace("Using @ServerEndpoint singleton " + endpoint);, +			}, +			return endpoint;, +		}, +, +		Component annot = AnnotationUtils.findAnnotation(endpointClass, Component.class);, +		if ((annot != null) && wac.containsBean(annot.value())) {, +			T endpoint = wac.getBean(annot.value(), endpointClass);, +			if (logger.isTraceEnabled()) {, +				logger.trace("Using @ServerEndpoint singleton " + endpoint);, +			}, +			return endpoint;, +		}, +, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/server/endpoint/SpringConfiguratorTests.java, +import org.springframework.context.annotation.ComponentScan;, +import org.springframework.stereotype.Component;, +	private SpringConfigurator configurator;, +, +, +		this.configurator = new SpringConfigurator();, +	public void getEndpointInstancePerConnection() throws Exception {, +		PerConnectionEchoEndpoint endpoint = this.configurator.getEndpointInstance(PerConnectionEchoEndpoint.class);, +	public void getEndpointInstanceSingletonByType() throws Exception {, +		EchoEndpoint expected = this.webAppContext.getBean(EchoEndpoint.class);, +		EchoEndpoint actual = this.configurator.getEndpointInstance(EchoEndpoint.class);, +		assertSame(expected, actual);, +	}, +	@Test, +	public void getEndpointInstanceSingletonByComponentName() throws Exception {, +		AlternativeEchoEndpoint expected = this.webAppContext.getBean(AlternativeEchoEndpoint.class);, +		AlternativeEchoEndpoint actual = this.configurator.getEndpointInstance(AlternativeEchoEndpoint.class);, +	@ComponentScan(basePackageClasses=SpringConfiguratorTests.class), +		public EchoEndpoint echoEndpoint() {, +			return new EchoEndpoint(echoService());, +	private static class EchoEndpoint extends Endpoint {, +		public EchoEndpoint(EchoService service) {, +			this.service = service;, +		}, +, +		@Override, +		public void onOpen(Session session, EndpointConfig config) {, +		}, +	}, +, +	@Component("echoEndpoint"), +	private static class AlternativeEchoEndpoint extends Endpoint {, +, +		@SuppressWarnings("unused"), +		private final EchoService service;, +, +		@Autowired, +		public AlternativeEchoEndpoint(EchoService service) {]