[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +import java.util.concurrent.atomic.AtomicInteger;, +	private final Stats stats = new Stats();, +, +	/**, +	 * Return a String describing internal state and counters., +	 */, +	public String getStatsInfo() {, +		return this.stats.toString();, +	}, +, +		this.stats.incrementConnectCount();, +			this.stats.incrementConnectCount();, +			stats.incrementDisconnectCount();, +			stats.incrementConnectedCount();, +	private class Stats {, +, +		private final AtomicInteger connect = new AtomicInteger();, +, +		private final AtomicInteger connected = new AtomicInteger();, +, +		private final AtomicInteger disconnect = new AtomicInteger();, +, +, +		public void incrementConnectCount() {, +			this.connect.incrementAndGet();, +		}, +, +		public void incrementConnectedCount() {, +			this.connected.incrementAndGet();, +		}, +, +		public void incrementDisconnectCount() {, +			this.disconnect.incrementAndGet();, +		}, +, +		public String toString() {, +			return connectionHandlers.size() + " sessions, " + relayHost + ":" + relayPort +, +					(isBrokerAvailable() ? " (available)" : " (not available)") +, +					", processed CONNECT(" + this.connect.get() + ")-CONNECTED(" +, +					this.connected.get() + ")-DISCONNECT(" + this.disconnect.get() + ")";, +		}, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +import java.util.concurrent.atomic.AtomicInteger;, +	private final Stats stats = new Stats();, +, +	/**, +	 * Return a String describing internal state and counters., +	 */, +	public String getStatsInfo() {, +		return this.stats.toString();, +	}, +, +		this.stats.incrementConnectCount();, +			this.stats.incrementConnectCount();, +			stats.incrementDisconnectCount();, +			stats.incrementConnectedCount();, +	private class Stats {, +, +		private final AtomicInteger connect = new AtomicInteger();, +, +		private final AtomicInteger connected = new AtomicInteger();, +, +		private final AtomicInteger disconnect = new AtomicInteger();, +, +, +		public void incrementConnectCount() {, +			this.connect.incrementAndGet();, +		}, +, +		public void incrementConnectedCount() {, +			this.connected.incrementAndGet();, +		}, +, +		public void incrementDisconnectCount() {, +			this.disconnect.incrementAndGet();, +		}, +, +		public String toString() {, +			return connectionHandlers.size() + " sessions, " + relayHost + ":" + relayPort +, +					(isBrokerAvailable() ? " (available)" : " (not available)") +, +					", processed CONNECT(" + this.connect.get() + ")-CONNECTED(" +, +					this.connected.get() + ")-DISCONNECT(" + this.disconnect.get() + ")";, +		}, +	}, +, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java, +		logger.debug("Setting up before '" + this.testName.getMethodName() + "'");, +			logger.debug("STOMP broker relay stats: " + this.relay.getStatsInfo());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +import java.util.concurrent.atomic.AtomicInteger;, +	private final Stats stats = new Stats();, +, +	/**, +	 * Return a String describing internal state and counters., +	 */, +	public String getStatsInfo() {, +		return this.stats.toString();]