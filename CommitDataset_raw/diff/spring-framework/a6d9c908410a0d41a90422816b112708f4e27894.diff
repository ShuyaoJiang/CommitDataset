[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java, + * Copyright 2002-2010 the original author or authors., +			if (isDefaultElement(node) && nodeNameEquals(node, META_ELEMENT)) {, +			if (isDefaultElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {, +			if (isDefaultElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {, +			if (isDefaultElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {, +			if (isDefaultElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {, +			if (isDefaultElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {, +				if (isDefaultElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {, +		if (!isDefaultNamespace(ele)) {, +, +	 * Get the namespace URI for the supplied node. The default implementation uses {@link Node#getNamespaceURI}., +	 * Ges the local name for the supplied {@link Node}. The default implementation calls {@link Node#getLocalName}., +	 * Subclasses may override the default implementation to provide a different mechanism for getting the local name., +	 * @param node the <code>Node</code>, +	 * @return the local name of the supplied <code>Node</code>., +	 */, +	public String getLocalName(Node node) {, +		return node.getLocalName();, +	}, +, +	/**, +	 * Determine whether the name of the supplied node is equal to the supplied name., +	public boolean isDefaultNamespace(String namespaceUri) {, +		return (!StringUtils.hasLength(namespaceUri) || BEANS_NAMESPACE_URI.equals(namespaceUri));, +, +	public boolean isDefaultNamespace(Node node) {, +		return isDefaultNamespace(getNamespaceURI(node));, +	}, +, +	private boolean isDefaultElement(Node node) {, +		return (node instanceof Element && isDefaultNamespace(node));, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java, + * Copyright 2002-2010 the original author or authors., +			if (isDefaultElement(node) && nodeNameEquals(node, META_ELEMENT)) {, +			if (isDefaultElement(node) && nodeNameEquals(node, CONSTRUCTOR_ARG_ELEMENT)) {, +			if (isDefaultElement(node) && nodeNameEquals(node, PROPERTY_ELEMENT)) {, +			if (isDefaultElement(node) && nodeNameEquals(node, QUALIFIER_ELEMENT)) {, +			if (isDefaultElement(node) && nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) {, +			if (isDefaultElement(node) && nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) {, +				if (isDefaultElement(node) && nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) {, +		if (!isDefaultNamespace(ele)) {, +, +	 * Get the namespace URI for the supplied node. The default implementation uses {@link Node#getNamespaceURI}., +	 * Ges the local name for the supplied {@link Node}. The default implementation calls {@link Node#getLocalName}., +	 * Subclasses may override the default implementation to provide a different mechanism for getting the local name., +	 * @param node the <code>Node</code>, +	 * @return the local name of the supplied <code>Node</code>., +	 */, +	public String getLocalName(Node node) {, +		return node.getLocalName();, +	}, +, +	/**, +	 * Determine whether the name of the supplied node is equal to the supplied name., +	public boolean isDefaultNamespace(String namespaceUri) {, +		return (!StringUtils.hasLength(namespaceUri) || BEANS_NAMESPACE_URI.equals(namespaceUri));, +, +	public boolean isDefaultNamespace(Node node) {, +		return isDefaultNamespace(getNamespaceURI(node));, +	}, +, +	private boolean isDefaultElement(Node node) {, +		return (node instanceof Element && isDefaultNamespace(node));, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.java, + * Copyright 2002-2010 the original author or authors., +		if (delegate.isDefaultNamespace(root)) {, +					if (delegate.isDefaultNamespace(ele)) {]