[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterReturnValueHandler.java, +			returnType = returnType.nested();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterReturnValueHandler.java, +			returnType = returnType.nested();, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterReturnValueHandlerTests.java, +import reactor.core.publisher.EmitterProcessor;, +import reactor.core.publisher.Flux;, +import org.springframework.core.ResolvableType;, +, +		assertTrue(this.handler.supportsReturnType(, +				on(TestController.class).resolveReturnType(Flux.class, String.class)));, +, +		assertTrue(this.handler.supportsReturnType(, +				on(TestController.class).resolveReturnType(forClassWithGenerics(ResponseEntity.class,, +								forClassWithGenerics(Flux.class, String.class)))));, +		assertFalse(this.handler.supportsReturnType(, +				on(TestController.class).resolveReturnType(forClassWithGenerics(ResponseEntity.class,, +	public void responseBodyFlux() throws Exception {, +, +		this.request.addHeader("Accept", "text/event-stream");, +, +		MethodParameter type = on(TestController.class).resolveReturnType(Flux.class, String.class);, +		EmitterProcessor<String> processor = EmitterProcessor.create();, +		this.handler.handleReturnValue(processor, type, this.mavContainer, this.webRequest);, +, +		assertTrue(this.request.isAsyncStarted());, +		assertEquals(200, this.response.getStatus());, +		assertEquals("text/event-stream;charset=UTF-8", this.response.getContentType());, +, +		processor.onNext("foo");, +		processor.onNext("bar");, +		processor.onNext("baz");, +		processor.onComplete();, +, +		assertEquals("data:foo\n\ndata:bar\n\ndata:baz\n\n", this.response.getContentAsString());, +	}, +, +	@Test, +	@Test, +	public void responseEntityFlux() throws Exception {, +, +		EmitterProcessor<String> processor = EmitterProcessor.create();, +		ResponseEntity<Flux<String>> entity = ResponseEntity.ok().body(processor);, +		ResolvableType bodyType = forClassWithGenerics(Flux.class, String.class);, +		MethodParameter type = on(TestController.class).resolveReturnType(ResponseEntity.class, bodyType);, +		this.handler.handleReturnValue(entity, type, this.mavContainer, this.webRequest);, +, +		assertTrue(this.request.isAsyncStarted());, +		assertEquals(200, this.response.getStatus());, +		assertEquals("text/plain", this.response.getContentType());, +, +		processor.onNext("foo");, +		processor.onNext("bar");, +		processor.onNext("baz");, +		processor.onComplete();, +, +		assertEquals("foobarbaz", this.response.getContentAsString());, +	}, +, +		private Flux<String> h8() { return null; }, +, +		private ResponseEntity<Flux<String>> h9() { return null; }, +]