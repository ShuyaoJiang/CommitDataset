[+++ b/.gitignore, +*.java.hsp, +*.sonarj, +*.sw*, +.DS_Store, +.settings, +.springBeans, +build.sh, +org.springframework.jdbc/derby.log, +org.springframework.test/test-output/, +target, +++ b/.gitignore, +*.java.hsp, +*.sonarj, +*.sw*, +.DS_Store, +.settings, +.springBeans, +build.sh, +org.springframework.jdbc/derby.log, +org.springframework.test/test-output/, +target, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, +	 * {@code null} is disallowed., +++ b/.gitignore, +*.java.hsp, +*.sonarj, +*.sw*, +.DS_Store, +.settings, +.springBeans, +build.sh, +org.springframework.jdbc/derby.log, +org.springframework.test/test-output/, +target, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, +	 * {@code null} is disallowed., +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/access/SingletonBeanFactoryLocator.java, +++ b/.gitignore, +*.java.hsp, +*.sonarj, +*.sw*, +.DS_Store, +.settings, +.springBeans, +build.sh, +org.springframework.jdbc/derby.log, +org.springframework.test/test-output/, +target, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, +	 * {@code null} is disallowed., +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/access/SingletonBeanFactoryLocator.java, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/AbstractPropertyPlaceholderConfigurer.java, + * Abstract base class for property resource configurers that resolve placeholders, + * in bean definition property values. Implementations <em>pull</em> values from a, + * properties file or other {@linkplain org.springframework.core.env.PropertySource, + * property source} into bean definitions., + *, + * <p>The default placeholder syntax follows the Ant / Log4J / JSP EL style:, + *, + *<pre class="code">${...}</pre>, + *, + * Example XML bean definition:, + *, + *<pre class="code">{@code, + *<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"/>, + *    <property name="driverClassName" value="}${driver}{@code"/>, + *    <property name="url" value="jdbc:}${dbname}{@code"/>, + *</bean>, + *}</pre>, + *, + * Example properties file:, + *, + * <pre class="code"> driver=com.mysql.jdbc.Driver, + * dbname=mysql:mydb</pre>, + *, + * Annotated bean definitions may take advantage of property replacement using, + * the {@link org.springframework.beans.factory.annotation.Value @Value} annotation:, + *, + *<pre class="code">@Value("${person.age}")</pre>, + *, + * Implementations check simple property values, lists, maps, props, and bean names, + * in bean references. Furthermore, placeholder values can also cross-reference, + * other placeholders, like:, + *, + *<pre class="code">rootPath=myrootdir, + *subPath=${rootPath}/subdir</pre>, + *, + * In contrast to {@link PropertyOverrideConfigurer}, subclasses of this type allow, + * filling in of explicit placeholders in bean definitions., + *, + * <p>If a configurer cannot resolve a placeholder, a {@link BeanDefinitionStoreException}, + * will be thrown. If you want to check against multiple properties files, specify multiple, + * resources via the {@link #setLocations locations} property. You can also define multiple, + * configurers, each with its <em>own</em> placeholder syntax. Use {@link, + * #ignoreUnresolvablePlaceholders} to intentionally suppress throwing an exception if a, + * placeholder cannot be resolved., + *, + * <p>Default property values can be defined globally for each configurer instance, + * via the {@link #setProperties properties} property, or on a property-by-property basis]