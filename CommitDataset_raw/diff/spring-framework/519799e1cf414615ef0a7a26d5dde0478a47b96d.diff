[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java, +		return new MethodValueRef(state, arguments);, +		public MethodValueRef(ExpressionState state, Object[] arguments) {, +			this.arguments = arguments;, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java, +		return new MethodValueRef(state, arguments);, +		public MethodValueRef(ExpressionState state, Object[] arguments) {, +			this.arguments = arguments;, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java, +import java.util.concurrent.atomic.AtomicInteger;, +	public void SPR11445_simple() {, +		StandardEvaluationContext context = new StandardEvaluationContext(new Spr11445Class());, +		Expression expr = new SpelExpressionParser().parseRaw("echo(parameter())");, +		assertEquals(1, expr.getValue(context));, +	}, +, +	@Test, +	public void SPR11445_beanReference() {, +		StandardEvaluationContext context = new StandardEvaluationContext();, +		context.setBeanResolver(new Spr11445Class());, +		Expression expr = new SpelExpressionParser().parseRaw("@bean.echo(@bean.parameter())");, +		assertEquals(1, expr.getValue(context));, +	}, +, +	static class Spr11445Class implements BeanResolver {, +, +		private final AtomicInteger counter = new AtomicInteger();, +, +		public int echo(int invocation) {, +			return invocation;, +		}, +, +		public int parameter() {, +			return counter.incrementAndGet();, +		}, +, +		@Override, +		public Object resolve(EvaluationContext context, String beanName) throws AccessException {, +			return beanName.equals("bean") ? this : null;, +		}, +	}, +, +	@Test]