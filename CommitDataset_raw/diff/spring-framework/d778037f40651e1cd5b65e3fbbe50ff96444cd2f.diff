[+++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, + * <p>It customizes Jackson's default properties with the following ones:, + * @author Juergen Hoeller, + * @see #build(), + * @see #configure(ObjectMapper), + * @see Jackson2ObjectMapperFactoryBean, +	private PropertyNamingStrategy propertyNamingStrategy;, +	private JsonInclude.Include serializationInclusion;, +, +	private final Map<Class<?>, JsonSerializer<?>> serializers = new LinkedHashMap<Class<?>, JsonSerializer<?>>();, +, +	private final Map<Class<?>, JsonDeserializer<?>> deserializers = new LinkedHashMap<Class<?>, JsonDeserializer<?>>();, +	private ClassLoader moduleClassLoader = getClass().getClassLoader();, +	 * Obtain a {@link Jackson2ObjectMapperBuilder} instance in order to, +	 * build an {@link ObjectMapper} instance., +	 * Obtain a {@link Jackson2ObjectMapperBuilder} instance in order to, +	 * build a {@link XmlMapper} instance., +	 * If set to {@code true}, an {@link XmlMapper} will be created using its, +	 * default constructor. This is only applicable to {@link #build()} calls,, +	 * not to {@link #configure} calls., +	 * Specify a {@link com.fasterxml.jackson.databind.PropertyNamingStrategy} to, +	 * configure the {@link ObjectMapper} with., +	 */, +	public Jackson2ObjectMapperBuilder propertyNamingStrategy(PropertyNamingStrategy propertyNamingStrategy) {, +		this.propertyNamingStrategy = propertyNamingStrategy;, +		return this;, +	}, +, +	/**, +				if (handledType == null || handledType == Object.class) {, +					throw new IllegalArgumentException("Unknown handled type in " + serializer.getClass().getName());, +				}, +	 * Shortcut for {@link DeserializationFeature#FAIL_ON_UNKNOWN_PROPERTIES} option., +	 */, +	public Jackson2ObjectMapperBuilder failOnUnknownProperties(boolean failOnUnknownProperties) {, +		this.features.put(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, failOnUnknownProperties);, +		return this;, +	}, +, +	/**, +	 * Set the ClassLoader to use for loading Jackson extension modules., +	public Jackson2ObjectMapperBuilder moduleClassLoader(ClassLoader moduleClassLoader) {, +		this.moduleClassLoader = moduleClassLoader;, +, +	 * Build a new {@link ObjectMapper} instance., +	 * <p>Each build operation produces an independent {@link ObjectMapper} instance., +	 * The builder's settings can get modified, with a subsequent build operation, +	 * then producing a new {@link ObjectMapper} based on the most recent settings., +	 * @return the newly built ObjectMapper, +		ObjectMapper objectMapper;, +						ClassUtils.forName("com.fasterxml.jackson.dataformat.xml.XmlMapper", this.moduleClassLoader);, +				objectMapper = BeanUtils.instantiate(xmlMapper);, +				throw new IllegalStateException("Could not instantiate XmlMapper - not found on classpath");, +			objectMapper = new ObjectMapper();, +		configure(objectMapper);, +		return (T) objectMapper;, +	/**, +	 * Configure an existing {@link ObjectMapper} instance with this builder's, +	 * settings. This can be applied to any number of {@code ObjectMappers}., +	 * @param objectMapper the ObjectMapper to configure, +	 */, +	public void configure(ObjectMapper objectMapper) {, +		Assert.notNull(objectMapper, "ObjectMapper must not be null");, +, +			objectMapper.setDateFormat(this.dateFormat);, +			objectMapper.setAnnotationIntrospector(this.annotationIntrospector);, +			objectMapper.setSerializationInclusion(this.serializationInclusion);, +			objectMapper.registerModule(module);, +		if (!this.features.containsKey(MapperFeature.DEFAULT_VIEW_INCLUSION)) {, +			configureFeature(objectMapper, MapperFeature.DEFAULT_VIEW_INCLUSION, false);, +		if (!this.features.containsKey(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)) {, +			configureFeature(objectMapper, DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);, +			configureFeature(objectMapper, feature, this.features.get(feature));, +				objectMapper.registerModule(module);, +					objectMapper.registerModule(BeanUtils.instantiate(module));, +				objectMapper.registerModules(ObjectMapper.findModules(this.moduleClassLoader));, +				registerWellKnownModulesIfAvailable(objectMapper);, +			objectMapper.setPropertyNamingStrategy(this.propertyNamingStrategy);, +	private void configureFeature(ObjectMapper objectMapper, Object feature, boolean enabled) {, +			objectMapper.configure((JsonParser.Feature) feature, enabled);, +			objectMapper.configure((JsonGenerator.Feature) feature, enabled);, +			objectMapper.configure((SerializationFeature) feature, enabled);, +			objectMapper.configure((DeserializationFeature) feature, enabled);, +			objectMapper.configure((MapperFeature) feature, enabled);, +	private void registerWellKnownModulesIfAvailable(ObjectMapper objectMapper) {, +		if (ClassUtils.isPresent("java.time.LocalDate", this.moduleClassLoader)) {, +						ClassUtils.forName("com.fasterxml.jackson.datatype.jsr310.JSR310Module", this.moduleClassLoader);, +				objectMapper.registerModule(BeanUtils.instantiate(jsr310Module));, +		if (ClassUtils.isPresent("org.joda.time.LocalDate", this.moduleClassLoader)) {, +						ClassUtils.forName("com.fasterxml.jackson.datatype.joda.JodaModule", this.moduleClassLoader);, +				objectMapper.registerModule(BeanUtils.instantiate(jodaModule));, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, + * <p>It customizes Jackson's default properties with the following ones:, + * @author Juergen Hoeller, + * @see #build(), + * @see #configure(ObjectMapper), + * @see Jackson2ObjectMapperFactoryBean, +	private PropertyNamingStrategy propertyNamingStrategy;, +	private JsonInclude.Include serializationInclusion;, +]