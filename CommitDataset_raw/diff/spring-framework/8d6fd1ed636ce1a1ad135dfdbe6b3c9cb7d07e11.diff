[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/ConvertingEncoderDecoderSupport.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.socket.adapter;, +, +import java.nio.ByteBuffer;, +, +import javax.websocket.DecodeException;, +import javax.websocket.Decoder;, +import javax.websocket.EncodeException;, +import javax.websocket.Encoder;, +import javax.websocket.EndpointConfig;, +, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.ConfigurableApplicationContext;, +import org.springframework.core.GenericTypeResolver;, +import org.springframework.core.convert.ConversionException;, +import org.springframework.core.convert.ConversionService;, +import org.springframework.core.convert.TypeDescriptor;, +import org.springframework.util.Assert;, +import org.springframework.web.context.ContextLoader;, +, +/**, + * Base class that can be used to implement a standard {@link javax.websocket.Encoder}, + * and/or {@link javax.websocket.Decoder}. It provides encode and decode method, + * implementations that delegate to a Spring {@link ConversionService}., + *, + * <p>By default, this class looks up a {@link ConversionService} registered in the, + * {@link #getApplicationContext() active ApplicationContext} under, + * the name {@code 'webSocketConversionService'}. This works fine for both client, + * and server endpoints, in a Servlet container environment. If not running in a, + * Servlet container, subclasses will need to override the, + * {@link #getConversionService()} method to provide an alternative lookup strategy., + *, + * <p>Subclasses can extend this class and should also implement one or, + * both of {@link javax.websocket.Encoder} and {@link javax.websocket.Decoder}., + * For convenience {@link ConvertingEncoderDecoderSupport.BinaryEncoder},, + * {@link ConvertingEncoderDecoderSupport.BinaryDecoder},, + * {@link ConvertingEncoderDecoderSupport.TextEncoder} and, + * {@link ConvertingEncoderDecoderSupport.TextDecoder} subclasses are provided., + *, + * <p>Since JSR-356 only allows Encoder/Decoder to be registered by type, instances, + * of this class are therefore managed by the WebSocket runtime, and do not need to, + * be registered as Spring Beans. They can, however, by injected with Spring-managed, + * dependencies via {@link Autowired @Autowire}., + *, + * <p>Converters to convert between the {@link #getType() type} and {@code String} or, + * {@code ByteBuffer} should be registered., + *, + * @author Phillip Webb, + * @since 4.0, + *, + * @param <T> The type being converted to (for Encoder) or from (for Decoder), + * @param <M> The WebSocket message type ({@link String} or {@link ByteBuffer}), + *, + * @see ConvertingEncoderDecoderSupport.BinaryEncoder, + * @see ConvertingEncoderDecoderSupport.BinaryDecoder, + * @see ConvertingEncoderDecoderSupport.TextEncoder, + * @see ConvertingEncoderDecoderSupport.TextDecoder, + */, +public abstract class ConvertingEncoderDecoderSupport<T, M> {, +, +	private static final String CONVERSION_SERVICE_BEAN_NAME = "webSocketConversionService";, +, +, +	/**, +	 * @see javax.websocket.Encoder#init(EndpointConfig), +	 * @see javax.websocket.Decoder#init(EndpointConfig), +	 */, +	public void init(EndpointConfig config) {, +		ApplicationContext applicationContext = getApplicationContext();, +		if (applicationContext != null && applicationContext instanceof ConfigurableApplicationContext) {, +			ConfigurableListableBeanFactory beanFactory =, +					((ConfigurableApplicationContext) applicationContext).getBeanFactory();, +			beanFactory.autowireBean(this);, +		}, +	}, +, +	/**, +	 * @see javax.websocket.Encoder#destroy(), +	 * @see javax.websocket.Decoder#destroy(), +	 */, +	public void destroy() {]