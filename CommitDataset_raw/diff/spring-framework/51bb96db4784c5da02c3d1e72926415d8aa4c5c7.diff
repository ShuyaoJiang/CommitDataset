[+++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceRegionEncoder.java, +			return Mono.from(inputStream), +					.flatMapMany(region -> {, +						if (!region.getResource().isReadable()) {, +							return Flux.error(new EncodingException("Resource " +, +									region.getResource() + " is not readable"));, +						}, +, +						return writeResourceRegion(region, bufferFactory, hints);, +					});, +			return Flux.from(inputStream)., +					concatMap(region -> {, +						if (!region.getResource().isReadable()) {, +							return Flux.error(new EncodingException("Resource " +, +									region.getResource() + " is not readable"));, +						}, +						else {, +							return Flux.concat(, +									writeResourceRegion(region, bufferFactory, hints));, +						}, +					}), +					.concatWith(getRegionSuffix(bufferFactory, boundaryString));, +		return Flux.defer(() -> Flux.just(, +				bufferFactory.wrap(ByteBuffer.wrap(getContentRangeHeader(region)))), +		return Flux.defer(() -> Flux.just(, +				bufferFactory.allocateBuffer(endBoundary.length).write(endBoundary)));, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceRegionEncoder.java, +			return Mono.from(inputStream), +					.flatMapMany(region -> {, +						if (!region.getResource().isReadable()) {, +							return Flux.error(new EncodingException("Resource " +, +									region.getResource() + " is not readable"));, +						}, +, +						return writeResourceRegion(region, bufferFactory, hints);, +					});, +			return Flux.from(inputStream)., +					concatMap(region -> {, +						if (!region.getResource().isReadable()) {, +							return Flux.error(new EncodingException("Resource " +, +									region.getResource() + " is not readable"));, +						}, +						else {, +							return Flux.concat(, +									writeResourceRegion(region, bufferFactory, hints));, +						}, +					}), +					.concatWith(getRegionSuffix(bufferFactory, boundaryString));, +		return Flux.defer(() -> Flux.just(, +				bufferFactory.wrap(ByteBuffer.wrap(getContentRangeHeader(region)))), +		return Flux.defer(() -> Flux.just(, +				bufferFactory.allocateBuffer(endBoundary.length).write(endBoundary)));, +++ b/spring-core/src/test/java/org/springframework/core/codec/ResourceRegionEncoderTests.java, + * Copyright 2002-2018 the original author or authors., +import static org.junit.Assert.*;, +	@Test, +	public void nonExisting() {, +		Resource resource = new ClassPathResource("ResourceRegionEncoderTests.txt", getClass());, +		Resource nonExisting = new ClassPathResource("does not exist", getClass());, +		Flux<ResourceRegion> regions = Flux.just(, +				new ResourceRegion(resource, 0, 6),, +				new ResourceRegion(nonExisting, 0, 6));, +, +		String boundary = MimeTypeUtils.generateMultipartBoundaryString();, +, +		Flux<DataBuffer> result = this.encoder.encode(regions, this.bufferFactory,, +				ResolvableType.forClass(ResourceRegion.class),, +				MimeType.valueOf("text/plain"),, +				Collections.singletonMap(ResourceRegionEncoder.BOUNDARY_STRING_HINT, boundary));, +, +		StepVerifier.create(result), +				.consumeNextWith(stringConsumer("\r\n--" + boundary + "\r\n")), +				.consumeNextWith(stringConsumer("Content-Type: text/plain\r\n")), +				.consumeNextWith(stringConsumer("Content-Range: bytes 0-5/39\r\n\r\n")), +				.consumeNextWith(stringConsumer("Spring")), +				.expectError(EncodingException.class), +				.verify();, +	}, +, +		Flux<DataBuffer> result = this.encoder.encode(regions, super.bufferFactory,, +		StepVerifier.create(result), +				.consumeNextWith(stringConsumer("\r\n--" + boundary + "\r\n")), +				.consumeNextWith(stringConsumer("Content-Type: text/plain\r\n")), +				.consumeNextWith(stringConsumer("Content-Range: bytes 0-5/39\r\n\r\n")), +				.consumeNextWith(stringConsumer("Spring")), +				.consumeNextWith(stringConsumer("\r\n--" + boundary + "\r\n")), +				.consumeNextWith(stringConsumer("Content-Type: text/plain\r\n")), +				.consumeNextWith(stringConsumer("Content-Range: bytes 7-15/39\r\n\r\n")), +				.consumeNextWith(stringConsumer("Framework")), +				.consumeNextWith(stringConsumer("\r\n--" + boundary + "\r\n")), +				.consumeNextWith(stringConsumer("Content-Type: text/plain\r\n")), +				.consumeNextWith(stringConsumer("Content-Range: bytes 17-20/39\r\n\r\n")), +				.consumeNextWith(stringConsumer("test")), +				.consumeNextWith(stringConsumer("\r\n--" + boundary + "\r\n")), +				.consumeNextWith(stringConsumer("Content-Type: text/plain\r\n")), +				.consumeNextWith(stringConsumer("Content-Range: bytes 22-38/39\r\n\r\n")), +				.consumeNextWith(stringConsumer("resource content.")), +				.consumeNextWith(stringConsumer("\r\n--" + boundary + "--"))]