[+++ b/spring-web/src/main/java/org/springframework/web/client/reactive/DefaultWebClientBuilder.java, +		@Override, +		public WebClient filter(ExchangeFilterFunction filter) {, +			Assert.notNull(filter, "'filter' must not be null");, +, +			ExchangeFilterFunction composedFilter = filter.andThen(this.filter);, +, +			return new DefaultWebClient(this.clientHttpConnector, this.strategies, composedFilter);, +		}, +++ b/spring-web/src/main/java/org/springframework/web/client/reactive/DefaultWebClientBuilder.java, +		@Override, +		public WebClient filter(ExchangeFilterFunction filter) {, +			Assert.notNull(filter, "'filter' must not be null");, +, +			ExchangeFilterFunction composedFilter = filter.andThen(this.filter);, +, +			return new DefaultWebClient(this.clientHttpConnector, this.strategies, composedFilter);, +		}, +++ b/spring-web/src/main/java/org/springframework/web/client/reactive/WebClient.java, +	/**, +	 * Filters this client with the given {@code ExchangeFilterFunction}, resulting in a filtered, +	 * {@code WebClient}., +	 * @param filterFunction the filter to apply to this client, +	 * @return the filtered client, +	 * @see ExchangeFilterFunction#apply(ExchangeFunction), +	 */, +	WebClient filter(ExchangeFilterFunction filterFunction);, +, +++ b/spring-web/src/main/java/org/springframework/web/client/reactive/DefaultWebClientBuilder.java, +		@Override, +		public WebClient filter(ExchangeFilterFunction filter) {, +			Assert.notNull(filter, "'filter' must not be null");, +, +			ExchangeFilterFunction composedFilter = filter.andThen(this.filter);, +, +			return new DefaultWebClient(this.clientHttpConnector, this.strategies, composedFilter);, +		}, +++ b/spring-web/src/main/java/org/springframework/web/client/reactive/WebClient.java, +	/**, +	 * Filters this client with the given {@code ExchangeFilterFunction}, resulting in a filtered, +	 * {@code WebClient}., +	 * @param filterFunction the filter to apply to this client, +	 * @return the filtered client, +	 * @see ExchangeFilterFunction#apply(ExchangeFunction), +	 */, +	WebClient filter(ExchangeFilterFunction filterFunction);, +, +++ b/spring-web/src/test/java/org/springframework/web/client/reactive/WebClientIntegrationTests.java, +	public void buildFilter() throws Exception {, +	@Test, +	public void filter() throws Exception {, +		HttpUrl baseUrl = server.url("/greeting?name=Spring");, +		this.server.enqueue(new MockResponse().setHeader("Content-Type", "text/plain").setBody("Hello Spring!"));, +, +		ExchangeFilterFunction filter = (request, next) -> {, +			ClientRequest<?> filteredRequest = ClientRequest.from(request), +					.header("foo", "bar").build();, +			return next.exchange(filteredRequest);, +		};, +		WebClient client = WebClient.create(new ReactorClientHttpConnector());, +		WebClient filteredClient = client.filter(filter);, +, +		ClientRequest<Void> request = ClientRequest.GET(baseUrl.toString()).build();, +, +		Mono<String> result = filteredClient.exchange(request), +				.then(response -> response.body(toMono(String.class)));, +, +		StepVerifier.create(result), +				.expectNext("Hello Spring!"), +				.expectComplete(), +				.verify();, +, +		RecordedRequest recordedRequest = server.takeRequest();, +		assertEquals(1, server.getRequestCount());, +		assertEquals("bar", recordedRequest.getHeader("foo"));, +, +	}, +]