[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/ConfigurableBeanFactory.java, + * Copyright 2002-2009 the original author or authors., +	 * Add a String resolver for embedded values such as annotation attributes., +	 * @param valueResolver the String resolver to apply to embedded values, +	 */, +	void addEmbeddedValueResolver(StringValueResolver valueResolver);, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/ConfigurableBeanFactory.java, + * Copyright 2002-2009 the original author or authors., +	 * Add a String resolver for embedded values such as annotation attributes., +	 * @param valueResolver the String resolver to apply to embedded values, +	 */, +	void addEmbeddedValueResolver(StringValueResolver valueResolver);, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.core.ParameterNameDiscoverer;, +	 * Initialize parameter name discovery for the underlying method parameter, if any., +	 * <p>This method does not actually try to retrieve the parameter name at, +	 * this point; it just allows discovery to happen when the application calls, +	 * {@link #getDependencyName()} (if ever)., +	 */, +	public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer) {, +		if (this.methodParameter != null) {, +			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer);, +		}, +	}, +, +	/**, +	 * Determine the name of the wrapped parameter/field., +	 * @return the declared name (never <code>null</code>), +	 */, +	public String getDependencyName() {, +		return (this.field != null ? this.field.getName() : this.methodParameter.getParameterName());, +	}, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/ConfigurableBeanFactory.java, + * Copyright 2002-2009 the original author or authors., +	 * Add a String resolver for embedded values such as annotation attributes., +	 * @param valueResolver the String resolver to apply to embedded values, +	 */, +	void addEmbeddedValueResolver(StringValueResolver valueResolver);, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.core.ParameterNameDiscoverer;, +	 * Initialize parameter name discovery for the underlying method parameter, if any., +	 * <p>This method does not actually try to retrieve the parameter name at, +	 * this point; it just allows discovery to happen when the application calls, +	 * {@link #getDependencyName()} (if ever)., +	 */, +	public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer) {, +		if (this.methodParameter != null) {, +			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer);, +		}, +	}, +, +	/**, +	 * Determine the name of the wrapped parameter/field., +	 * @return the declared name (never <code>null</code>), +	 */, +	public String getDependencyName() {, +		return (this.field != null ? this.field.getName() : this.methodParameter.getParameterName());, +	}, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.java, + * Copyright 2002-2009 the original author or authors., +, +		// New in Spring 3.0: resolve placeholders in embedded values such as annotation attributes., +		beanFactoryToProcess.addEmbeddedValueResolver(valueResolver);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/ConfigurableBeanFactory.java, + * Copyright 2002-2009 the original author or authors., +	 * Add a String resolver for embedded values such as annotation attributes., +	 * @param valueResolver the String resolver to apply to embedded values, +	 */, +	void addEmbeddedValueResolver(StringValueResolver valueResolver);, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.core.ParameterNameDiscoverer;, +	 * Initialize parameter name discovery for the underlying method parameter, if any., +	 * <p>This method does not actually try to retrieve the parameter name at, +	 * this point; it just allows discovery to happen when the application calls, +	 * {@link #getDependencyName()} (if ever)., +	 */, +	public void initParameterNameDiscovery(ParameterNameDiscoverer parameterNameDiscoverer) {, +		if (this.methodParameter != null) {, +			this.methodParameter.initParameterNameDiscovery(parameterNameDiscoverer);, +		}, +	}, +, +	/**, +	 * Determine the name of the wrapped parameter/field., +	 * @return the declared name (never <code>null</code>)]