[+++ b/spring-context/src/main/java/org/springframework/format/support/FormattingConversionService.java, +++ b/spring-context/src/main/java/org/springframework/format/support/FormattingConversionService.java, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * @param mapType the map type, which must implement {@link Map}, +	 * For example, if the method parameter is a List&lt;?&gt;, the nested type descriptor returned will be <tt>null</tt>., +	 * @param nestingLevel the nesting level of the collection/array element or map key/value declaration within the method parameter, +	 * @return the nested type descriptor at the specified nesting level, or null if it could not be obtained, +	 * @throws IllegalArgumentException if the nesting level of the input {@link MethodParameter} argument is not 1, +	 * @throws IllegalArgumentException if the types up to the specified nesting level are not of collection, array, or map types, +	 * @param nestingLevel the nesting level of the collection/array element or map key/value declaration within the field, +	 * @throws IllegalArgumentException if the types up to the specified nesting level are not of collection, array, or map types, +	 * @param nestingLevel the nesting level of the collection/array element or map key/value declaration within the property, +	 * @throws IllegalArgumentException if the types up to the specified nesting level are not of collection, array, or map types, +	 * @return the annotations, or an empty array if none, +	 * @param annotationType the annotation type, +	 * @return the annotation, or null if no such annotation exists on this type descriptor, +	 * @return true if this type is assignable to the type represented by the provided type descriptor, +	 * @return the array component type or Collection element type, or <code>null</code> if this type is a Collection but its element type is not parameterized, +	 * @return the Map key type, or <code>null</code> if this type is a Map but its key type is not parameterized, +	 * @throws IllegalStateException if this type is not a java.util.Map, +	 * @throws IllegalStateException if this type is not a java.util.Map, +	 * @return the Map value type, or <code>null</code> if this type is a Map but its value type is not parameterized, +	 * @throws IllegalStateException if this type is not a java.util.Map, +	 * @throws IllegalStateException if this type is not a java.util.Map, +	 * @deprecated in Spring 3.1 in favor of {@link #getElementTypeDescriptor()}, +	 * @deprecated in Spring 3.1 in favor of {@link #getMapKeyTypeDescriptor()}, +	 * @throws IllegalStateException if this type is not a java.util.Map, +	 * @deprecated in Spring 3.1 in favor of {@link #getMapValueTypeDescriptor()}, +	 * @throws IllegalStateException if this type is not a java.util.Map, +++ b/spring-context/src/main/java/org/springframework/format/support/FormattingConversionService.java, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * @param mapType the map type, which must implement {@link Map}, +	 * For example, if the method parameter is a List&lt;?&gt;, the nested type descriptor returned will be <tt>null</tt>., +	 * @param nestingLevel the nesting level of the collection/array element or map key/value declaration within the method parameter, +	 * @return the nested type descriptor at the specified nesting level, or null if it could not be obtained, +	 * @throws IllegalArgumentException if the nesting level of the input {@link MethodParameter} argument is not 1, +	 * @throws IllegalArgumentException if the types up to the specified nesting level are not of collection, array, or map types, +	 * @param nestingLevel the nesting level of the collection/array element or map key/value declaration within the field, +	 * @throws IllegalArgumentException if the types up to the specified nesting level are not of collection, array, or map types, +	 * @param nestingLevel the nesting level of the collection/array element or map key/value declaration within the property, +	 * @throws IllegalArgumentException if the types up to the specified nesting level are not of collection, array, or map types, +	 * @return the annotations, or an empty array if none, +	 * @param annotationType the annotation type, +	 * @return the annotation, or null if no such annotation exists on this type descriptor, +	 * @return true if this type is assignable to the type represented by the provided type descriptor, +	 * @return the array component type or Collection element type, or <code>null</code> if this type is a Collection but its element type is not parameterized, +	 * @return the Map key type, or <code>null</code> if this type is a Map but its key type is not parameterized, +	 * @throws IllegalStateException if this type is not a java.util.Map, +	 * @throws IllegalStateException if this type is not a java.util.Map, +	 * @return the Map value type, or <code>null</code> if this type is a Map but its value type is not parameterized, +	 * @throws IllegalStateException if this type is not a java.util.Map, +	 * @throws IllegalStateException if this type is not a java.util.Map, +	 * @deprecated in Spring 3.1 in favor of {@link #getElementTypeDescriptor()}, +	 * @deprecated in Spring 3.1 in favor of {@link #getMapKeyTypeDescriptor()}, +	 * @throws IllegalStateException if this type is not a java.util.Map, +	 * @deprecated in Spring 3.1 in favor of {@link #getMapValueTypeDescriptor()}, +	 * @throws IllegalStateException if this type is not a java.util.Map, +++ b/spring-core/src/test/java/org/springframework/core/convert/TypeDescriptorTests.java]