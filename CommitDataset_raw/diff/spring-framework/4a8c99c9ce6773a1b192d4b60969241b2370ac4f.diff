[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, +	 * Extract the body with the given {@code BodyExtractor}., +	 * Extract the body to a {@code Mono}., +	 * @return a mono containing the body of the given type {@code T}, +	 * Extract the body to a {@code Flux}., +	 * @return a flux containing the body of the given type {@code T}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, +	 * Extract the body with the given {@code BodyExtractor}., +	 * Extract the body to a {@code Mono}., +	 * @return a mono containing the body of the given type {@code T}, +	 * Extract the body to a {@code Flux}., +	 * @return a flux containing the body of the given type {@code T}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientResponse.java, +		return body(BodyExtractors.toMono(elementClass));, +		return body(BodyExtractors.toFlux(elementClass));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, +	 * Extract the body with the given {@code BodyExtractor}., +	 * Extract the body to a {@code Mono}., +	 * @return a mono containing the body of the given type {@code T}, +	 * Extract the body to a {@code Flux}., +	 * @return a flux containing the body of the given type {@code T}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientResponse.java, +		return body(BodyExtractors.toMono(elementClass));, +		return body(BodyExtractors.toFlux(elementClass));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +import org.springframework.http.HttpStatus;, +import org.springframework.http.client.reactive.ClientHttpResponse;, +import org.springframework.web.reactive.function.BodyExtractor;, +import org.springframework.web.reactive.function.BodyExtractors;, +			return this.responseMono.flatMap(, +					response -> bodyToPublisher(response, BodyExtractors.toMono(bodyType),, +							Mono::error));, +			return this.responseMono.flatMapMany(, +					response -> bodyToPublisher(response, BodyExtractors.toFlux(elementType),, +							Flux::error));, +		private <T extends Publisher<?>> T bodyToPublisher(ClientResponse response,, +				BodyExtractor<T, ? super ClientHttpResponse> extractor,, +				Function<WebClientException, T> errorFunction) {, +, +			HttpStatus status = response.statusCode();, +			if (status.is4xxClientError() || status.is5xxServerError()) {, +				WebClientException ex = new WebClientException(, +						"ClientResponse has erroneous status code: " + status.value() +, +								" " + status.getReasonPhrase());, +				return errorFunction.apply(ex);, +			}, +			else {, +				return response.body(extractor);, +			}, +		}, +, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, +	 * Extract the body with the given {@code BodyExtractor}., +	 * Extract the body to a {@code Mono}., +	 * @return a mono containing the body of the given type {@code T}, +	 * Extract the body to a {@code Flux}., +	 * @return a flux containing the body of the given type {@code T}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientResponse.java, +		return body(BodyExtractors.toMono(elementClass));, +		return body(BodyExtractors.toFlux(elementClass));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +import org.springframework.http.HttpStatus;, +import org.springframework.http.client.reactive.ClientHttpResponse;, +import org.springframework.web.reactive.function.BodyExtractor;, +import org.springframework.web.reactive.function.BodyExtractors;, +			return this.responseMono.flatMap(, +					response -> bodyToPublisher(response, BodyExtractors.toMono(bodyType),, +							Mono::error));, +			return this.responseMono.flatMapMany(, +					response -> bodyToPublisher(response, BodyExtractors.toFlux(elementType),, +							Flux::error));, +		private <T extends Publisher<?>> T bodyToPublisher(ClientResponse response,, +				BodyExtractor<T, ? super ClientHttpResponse> extractor,, +				Function<WebClientException, T> errorFunction) {, +, +			HttpStatus status = response.statusCode();, +			if (status.is4xxClientError() || status.is5xxServerError()) {, +				WebClientException ex = new WebClientException(, +						"ClientResponse has erroneous status code: " + status.value() +, +								" " + status.getReasonPhrase());, +				return errorFunction.apply(ex);, +			}, +			else {, +				return response.body(extractor);, +			}, +		}, +, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java, +		 * Extract the body to a {@code Mono}. If the response has status code 4xx or 5xx, the, +		 * {@code Mono} will contain a {@link WebClientException}., +		 * @return a mono containing the body, or a {@link WebClientException} if the status code is, +		 * 4xx or 5xx, +		 * Extract the body to a {@code Flux}. If the response has status code 4xx or 5xx, the, +		 * {@code Flux} will contain a {@link WebClientException}., +		 * @return a flux containing the body, or a {@link WebClientException} if the status code is, +		 * 4xx or 5xx, +		 * Returns the response as a delayed {@code ResponseEntity}. Unlike, +		 * {@link #bodyToMono(Class)} and {@link #bodyToFlux(Class)}, this method does not check]