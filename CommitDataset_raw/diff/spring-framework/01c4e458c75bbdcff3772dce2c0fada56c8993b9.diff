[+++ b/spring-websocket/src/main/java/org/springframework/web/messaging/stomp/support/StompHeaderAccessor.java, +	public static final String LOGIN = "login";, +, +	public static final String PASSCODE = "passcode";, +, +	public void setLogin(String login) {, +		this.headers.put(LOGIN, login);, +	}, +, +	public String getLogin() {, +		return getHeaderValue(LOGIN);, +	}, +, +, +	public void setPasscode(String passcode) {, +		this.headers.put(PASSCODE, passcode);, +	}, +, +	public String getPasscode() {, +		return getHeaderValue(PASSCODE);, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/stomp/support/StompHeaderAccessor.java, +	public static final String LOGIN = "login";, +, +	public static final String PASSCODE = "passcode";, +, +	public void setLogin(String login) {, +		this.headers.put(LOGIN, login);, +	}, +, +	public String getLogin() {, +		return getHeaderValue(LOGIN);, +	}, +, +, +	public void setPasscode(String passcode) {, +		this.headers.put(PASSCODE, passcode);, +	}, +, +	public String getPasscode() {, +		return getHeaderValue(PASSCODE);, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/stomp/support/StompRelayPubSubMessageHandler.java, +import org.springframework.context.SmartLifecycle;, +public class StompRelayPubSubMessageHandler<M extends Message> extends AbstractPubSubMessageHandler<M>, +		implements SmartLifecycle {, +, +	private static final String STOMP_RELAY_SYSTEM_SESSION_ID = "stompRelaySystemSessionId";, +	private TcpClient<String, String> tcpClient;, +	private Object lifecycleMonitor = new Object();, +, +	private boolean running = false;, +, +	public boolean isAutoStartup() {, +		return true;, +	}, +, +	@Override, +	public int getPhase() {, +		return Integer.MAX_VALUE;, +	}, +, +	@Override, +	public boolean isRunning() {, +		synchronized (this.lifecycleMonitor) {, +			return this.running;, +		}, +	}, +, +	@Override, +	public void start() {, +		synchronized (this.lifecycleMonitor) {, +, +			// TODO: make this configurable, +, +			this.tcpClient = new TcpClient.Spec<String, String>(NettyTcpClient.class), +					.using(new Environment()), +					.codec(new DelimitedCodec<String, String>((byte) 0, true, StandardCodecs.STRING_CODEC)), +					.connect("127.0.0.1", 61613), +					.get();, +, +			StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.CONNECT);, +			headers.setAcceptVersion("1.1,1.2");, +			headers.setLogin("guest");, +			headers.setPasscode("guest");, +			headers.setHeartbeat(0, 0);, +			@SuppressWarnings("unchecked"), +			M message = (M) MessageBuilder.withPayload(new byte[0]).copyHeaders(headers.toStompMessageHeaders()).build();, +, +			RelaySession session = new RelaySession(message, headers) {, +				@Override, +				protected void sendMessageToClient(M message) {, +					// TODO: check for ERROR frame (reconnect?), +				}, +			};, +			this.relaySessions.put(STOMP_RELAY_SYSTEM_SESSION_ID, session);, +, +			this.running = true;]