[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AliasFor.java, + * <li>The {@link #annotation} attribute should remain set to the default.</li>, + * must be annotated with {@code @AliasFor}, and the {@link #attribute} must, + * reference the aliased attribute in the meta-annotation.</li>, + * <li>The {@link #annotation} must reference the meta-annotation.</li>, + * <li>The referenced meta-annotation must be <em>meta-present</em> on the, + * annotation class that declares {@code @AliasFor}.</li>, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AliasFor.java, + * <li>The {@link #annotation} attribute should remain set to the default.</li>, + * must be annotated with {@code @AliasFor}, and the {@link #attribute} must, + * reference the aliased attribute in the meta-annotation.</li>, + * <li>The {@link #annotation} must reference the meta-annotation.</li>, + * <li>The referenced meta-annotation must be <em>meta-present</em> on the, + * annotation class that declares {@code @AliasFor}.</li>, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +		String attributeName = attribute.getName();, +		if (!sameTargetDeclared) {, +			// Target annotation is not meta-present?, +			if (findAnnotation(sourceAnnotationType, aliasedAnnotationType) == null) {, +				String msg = String.format("@AliasFor declaration on attribute [%s] in annotation [%s] declares ", +						+ "an alias for attribute [%s] in meta-annotation [%s] which is not meta-present.",, +						attributeName, sourceAnnotationType.getName(), aliasedAttributeName,, +						aliasedAnnotationType.getName());, +				throw new AnnotationConfigurationException(msg);, +			}, +		}, +		else {, +		// Wrong search scope?, +		if (searchWithinSameAnnotation && !sameTargetDeclared) {, +			return null;, +		}, +, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AliasFor.java, + * <li>The {@link #annotation} attribute should remain set to the default.</li>, + * must be annotated with {@code @AliasFor}, and the {@link #attribute} must, + * reference the aliased attribute in the meta-annotation.</li>, + * <li>The {@link #annotation} must reference the meta-annotation.</li>, + * <li>The referenced meta-annotation must be <em>meta-present</em> on the, + * annotation class that declares {@code @AliasFor}.</li>, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +		String attributeName = attribute.getName();, +		if (!sameTargetDeclared) {, +			// Target annotation is not meta-present?, +			if (findAnnotation(sourceAnnotationType, aliasedAnnotationType) == null) {, +				String msg = String.format("@AliasFor declaration on attribute [%s] in annotation [%s] declares ", +						+ "an alias for attribute [%s] in meta-annotation [%s] which is not meta-present.",, +						attributeName, sourceAnnotationType.getName(), aliasedAttributeName,, +						aliasedAnnotationType.getName());, +				throw new AnnotationConfigurationException(msg);, +			}, +		}, +		else {, +		// Wrong search scope?, +		if (searchWithinSameAnnotation && !sameTargetDeclared) {, +			return null;, +		}, +, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java, +	public void synthesizeAnnotationWithAttributeAliasForMetaAnnotationThatIsNotMetaPresent() throws Exception {, +		AliasedComposedContextConfigNotMetaPresent annotation = AliasedComposedContextConfigNotMetaPresentClass.class.getAnnotation(AliasedComposedContextConfigNotMetaPresent.class);, +		exception.expect(AnnotationConfigurationException.class);, +		exception.expectMessage(startsWith("@AliasFor declaration on attribute [xmlConfigFile] in annotation"));, +		exception.expectMessage(containsString(AliasedComposedContextConfigNotMetaPresent.class.getName()));, +		exception.expectMessage(containsString("declares an alias for attribute [locations] in meta-annotation"));, +		exception.expectMessage(containsString(ContextConfig.class.getName()));, +		exception.expectMessage(endsWith("which is not meta-present."));, +		synthesizeAnnotation(annotation);, +	}, +, +	@Test, +	// @ContextConfig --> Intentionally NOT meta-present, +	@Retention(RetentionPolicy.RUNTIME), +	@interface AliasedComposedContextConfigNotMetaPresent {, +, +		@AliasFor(annotation = ContextConfig.class, attribute = "locations"), +		String xmlConfigFile();, +	}, +, +	@AliasedComposedContextConfigNotMetaPresent(xmlConfigFile = "test.xml"), +	static class AliasedComposedContextConfigNotMetaPresentClass {, +	}, +]