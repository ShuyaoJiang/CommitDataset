[+++ b/spring-aop/src/main/java/org/springframework/aop/config/AbstractInterceptorDrivenBeanDefinitionDecorator.java, + * Copyright 2002-2016 the original author or authors., +		String interceptorName = existingBeanName + '.' + getInterceptorNameSuffix(interceptorDefinition);, +++ b/spring-aop/src/main/java/org/springframework/aop/config/AbstractInterceptorDrivenBeanDefinitionDecorator.java, + * Copyright 2002-2016 the original author or authors., +		String interceptorName = existingBeanName + '.' + getInterceptorNameSuffix(interceptorDefinition);, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/CustomizableTraceInterceptor.java, + * Copyright 2002-2016 the original author or authors., +		String name = ClassUtils.getQualifiedMethodName(invocation.getMethod());, +++ b/spring-aop/src/main/java/org/springframework/aop/config/AbstractInterceptorDrivenBeanDefinitionDecorator.java, + * Copyright 2002-2016 the original author or authors., +		String interceptorName = existingBeanName + '.' + getInterceptorNameSuffix(interceptorDefinition);, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/CustomizableTraceInterceptor.java, + * Copyright 2002-2016 the original author or authors., +		String name = ClassUtils.getQualifiedMethodName(invocation.getMethod());, +++ b/spring-aop/src/main/java/org/springframework/aop/support/AbstractRegexpMethodPointcut.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.util.ClassUtils;, +		return ((targetClass != null && matchesPattern(ClassUtils.getQualifiedMethodName(method, targetClass))) ||, +				matchesPattern(ClassUtils.getQualifiedMethodName(method)));, +++ b/spring-aop/src/main/java/org/springframework/aop/config/AbstractInterceptorDrivenBeanDefinitionDecorator.java, + * Copyright 2002-2016 the original author or authors., +		String interceptorName = existingBeanName + '.' + getInterceptorNameSuffix(interceptorDefinition);, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/CustomizableTraceInterceptor.java, + * Copyright 2002-2016 the original author or authors., +		String name = ClassUtils.getQualifiedMethodName(invocation.getMethod());, +++ b/spring-aop/src/main/java/org/springframework/aop/support/AbstractRegexpMethodPointcut.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.util.ClassUtils;, +		return ((targetClass != null && matchesPattern(ClassUtils.getQualifiedMethodName(method, targetClass))) ||, +				matchesPattern(ClassUtils.getQualifiedMethodName(method)));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InitDestroyAnnotationBeanPostProcessor.java, +import org.springframework.util.ClassUtils;, +					ClassUtils.getQualifiedMethodName(method) : method.getName());, +++ b/spring-aop/src/main/java/org/springframework/aop/config/AbstractInterceptorDrivenBeanDefinitionDecorator.java, + * Copyright 2002-2016 the original author or authors., +		String interceptorName = existingBeanName + '.' + getInterceptorNameSuffix(interceptorDefinition);, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/CustomizableTraceInterceptor.java, + * Copyright 2002-2016 the original author or authors., +		String name = ClassUtils.getQualifiedMethodName(invocation.getMethod());, +++ b/spring-aop/src/main/java/org/springframework/aop/support/AbstractRegexpMethodPointcut.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.util.ClassUtils;, +		return ((targetClass != null && matchesPattern(ClassUtils.getQualifiedMethodName(method, targetClass))) ||, +				matchesPattern(ClassUtils.getQualifiedMethodName(method)));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InitDestroyAnnotationBeanPostProcessor.java, +import org.springframework.util.ClassUtils;, +					ClassUtils.getQualifiedMethodName(method) : method.getName());, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java, +					key = path + '.' + key;, +++ b/spring-aop/src/main/java/org/springframework/aop/config/AbstractInterceptorDrivenBeanDefinitionDecorator.java, + * Copyright 2002-2016 the original author or authors., +		String interceptorName = existingBeanName + '.' + getInterceptorNameSuffix(interceptorDefinition);, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/CustomizableTraceInterceptor.java, + * Copyright 2002-2016 the original author or authors., +		String name = ClassUtils.getQualifiedMethodName(invocation.getMethod());, +++ b/spring-aop/src/main/java/org/springframework/aop/support/AbstractRegexpMethodPointcut.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.util.ClassUtils;, +		return ((targetClass != null && matchesPattern(ClassUtils.getQualifiedMethodName(method, targetClass))) ||, +				matchesPattern(ClassUtils.getQualifiedMethodName(method)));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InitDestroyAnnotationBeanPostProcessor.java, +import org.springframework.util.ClassUtils;, +					ClassUtils.getQualifiedMethodName(method) : method.getName());, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java, +					key = path + '.' + key;, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, + * Copyright 2002-2016 the original author or authors., +		catch (Throwable ex) {, +++ b/spring-aop/src/main/java/org/springframework/aop/config/AbstractInterceptorDrivenBeanDefinitionDecorator.java, + * Copyright 2002-2016 the original author or authors., +		String interceptorName = existingBeanName + '.' + getInterceptorNameSuffix(interceptorDefinition);, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/CustomizableTraceInterceptor.java, + * Copyright 2002-2016 the original author or authors., +		String name = ClassUtils.getQualifiedMethodName(invocation.getMethod());, +++ b/spring-aop/src/main/java/org/springframework/aop/support/AbstractRegexpMethodPointcut.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.util.ClassUtils;, +		return ((targetClass != null && matchesPattern(ClassUtils.getQualifiedMethodName(method, targetClass))) ||, +				matchesPattern(ClassUtils.getQualifiedMethodName(method)));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InitDestroyAnnotationBeanPostProcessor.java, +import org.springframework.util.ClassUtils;, +					ClassUtils.getQualifiedMethodName(method) : method.getName());, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java, +					key = path + '.' + key;, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, + * Copyright 2002-2016 the original author or authors., +		catch (Throwable ex) {, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java, +			// Not using the Quartz startDelayed method since we explicitly want a daemon, +			// thread here, not keeping the JVM alive in case of all other threads ending., +++ b/spring-aop/src/main/java/org/springframework/aop/config/AbstractInterceptorDrivenBeanDefinitionDecorator.java, + * Copyright 2002-2016 the original author or authors., +		String interceptorName = existingBeanName + '.' + getInterceptorNameSuffix(interceptorDefinition);, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/CustomizableTraceInterceptor.java, + * Copyright 2002-2016 the original author or authors., +		String name = ClassUtils.getQualifiedMethodName(invocation.getMethod());, +++ b/spring-aop/src/main/java/org/springframework/aop/support/AbstractRegexpMethodPointcut.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.util.ClassUtils;]