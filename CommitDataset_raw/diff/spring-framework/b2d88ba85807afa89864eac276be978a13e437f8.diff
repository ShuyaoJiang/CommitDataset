[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FlashMap.java, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import org.springframework.util.StringUtils;, +public final class FlashMap extends HashMap<String, Object> implements Comparable<FlashMap> {, +	private final MultiValueMap<String, String> targetRequestParams = new LinkedMultiValueMap<String, String>();, +	 * Provide request parameters identifying the request for this FlashMap., +	 * Null or empty keys and values are skipped., +	public FlashMap addTargetRequestParams(MultiValueMap<String, String> params) {, +			for (String key : params.keySet()) {, +				for (String value : params.get(key)) {, +					addTargetRequestParam(key, value);, +	 * Provide a request parameter identifying the request for this FlashMap., +	 * @param name the expected parameter name, skipped if {@code null}, +	 * @param value the expected parameter value, skipped if {@code null}, +		if (StringUtils.hasText(name) && StringUtils.hasText(value)) {, +			this.targetRequestParams.add(name, value);, +		}, +	 * Return the parameters identifying the target request, or an empty map., +	public MultiValueMap<String, String> getTargetRequestParams() {, +		StringBuilder sb = new StringBuilder();, +		sb.append("[Attributes=").append(super.toString());, +		sb.append(", targetRequestPath=").append(this.targetRequestPath);, +		sb.append(", targetRequestParams=").append(this.targetRequestParams).append("]");, +		return sb.toString();, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FlashMap.java, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import org.springframework.util.StringUtils;, +public final class FlashMap extends HashMap<String, Object> implements Comparable<FlashMap> {, +	private final MultiValueMap<String, String> targetRequestParams = new LinkedMultiValueMap<String, String>();, +	 * Provide request parameters identifying the request for this FlashMap., +	 * Null or empty keys and values are skipped., +	public FlashMap addTargetRequestParams(MultiValueMap<String, String> params) {, +			for (String key : params.keySet()) {, +				for (String value : params.get(key)) {, +					addTargetRequestParam(key, value);, +	 * Provide a request parameter identifying the request for this FlashMap., +	 * @param name the expected parameter name, skipped if {@code null}, +	 * @param value the expected parameter value, skipped if {@code null}, +		if (StringUtils.hasText(name) && StringUtils.hasText(value)) {, +			this.targetRequestParams.add(name, value);, +		}, +	 * Return the parameters identifying the target request, or an empty map., +	public MultiValueMap<String, String> getTargetRequestParams() {, +		StringBuilder sb = new StringBuilder();, +		sb.append("[Attributes=").append(super.toString());, +		sb.append(", targetRequestPath=").append(this.targetRequestPath);, +		sb.append(", targetRequestParams=").append(this.targetRequestParams).append("]");, +		return sb.toString();, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FlashMapManager.java, + * <p>Annotated controllers will usually not use this FlashMap directly., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FlashMap.java, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import org.springframework.util.StringUtils;, +public final class FlashMap extends HashMap<String, Object> implements Comparable<FlashMap> {, +	private final MultiValueMap<String, String> targetRequestParams = new LinkedMultiValueMap<String, String>();, +	 * Provide request parameters identifying the request for this FlashMap., +	 * Null or empty keys and values are skipped., +	public FlashMap addTargetRequestParams(MultiValueMap<String, String> params) {, +			for (String key : params.keySet()) {, +				for (String value : params.get(key)) {, +					addTargetRequestParam(key, value);, +	 * Provide a request parameter identifying the request for this FlashMap., +	 * @param name the expected parameter name, skipped if {@code null}, +	 * @param value the expected parameter value, skipped if {@code null}, +		if (StringUtils.hasText(name) && StringUtils.hasText(value)) {, +			this.targetRequestParams.add(name, value);, +		}, +	 * Return the parameters identifying the target request, or an empty map., +	public MultiValueMap<String, String> getTargetRequestParams() {, +		StringBuilder sb = new StringBuilder();, +		sb.append("[Attributes=").append(super.toString());, +		sb.append(", targetRequestPath=").append(this.targetRequestPath);, +		sb.append(", targetRequestParams=").append(this.targetRequestParams).append("]");, +		return sb.toString();, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FlashMapManager.java, + * <p>Annotated controllers will usually not use this FlashMap directly., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +		methodAdapterDef.getPropertyValues().add("ignoreDefaultModelOnRedirect", true);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FlashMap.java, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import org.springframework.util.StringUtils;, +public final class FlashMap extends HashMap<String, Object> implements Comparable<FlashMap> {, +	private final MultiValueMap<String, String> targetRequestParams = new LinkedMultiValueMap<String, String>();, +	 * Provide request parameters identifying the request for this FlashMap., +	 * Null or empty keys and values are skipped., +	public FlashMap addTargetRequestParams(MultiValueMap<String, String> params) {, +			for (String key : params.keySet()) {, +				for (String value : params.get(key)) {, +					addTargetRequestParam(key, value);, +	 * Provide a request parameter identifying the request for this FlashMap., +	 * @param name the expected parameter name, skipped if {@code null}, +	 * @param value the expected parameter value, skipped if {@code null}, +		if (StringUtils.hasText(name) && StringUtils.hasText(value)) {, +			this.targetRequestParams.add(name, value);, +		}, +	 * Return the parameters identifying the target request, or an empty map.]