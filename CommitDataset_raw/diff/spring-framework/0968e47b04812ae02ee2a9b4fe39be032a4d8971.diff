[+++ b/spring-core/src/main/java/org/springframework/util/Base64Utils.java, +	 * @since 4.2.4, +	 * @since 4.2.4, +		private final org.apache.commons.codec.binary.Base64 base64 =, +				new org.apache.commons.codec.binary.Base64();, +		private final org.apache.commons.codec.binary.Base64 base64UrlSafe =, +				new org.apache.commons.codec.binary.Base64(0, null, true);, +++ b/spring-core/src/main/java/org/springframework/util/Base64Utils.java, +	 * @since 4.2.4, +	 * @since 4.2.4, +		private final org.apache.commons.codec.binary.Base64 base64 =, +				new org.apache.commons.codec.binary.Base64();, +		private final org.apache.commons.codec.binary.Base64 base64UrlSafe =, +				new org.apache.commons.codec.binary.Base64(0, null, true);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlEncodingFilter.java, +		private final HttpServletRequest request;, +		/* Cache the index of the path within the DispatcherServlet mapping */, +, +, +			return (ResourceUrlProvider) this.request.getAttribute(, +					ResourceUrlProviderExposingInterceptor.RESOURCE_URL_PROVIDER_ATTR);, +			return (index > 0 ? index : url.length());, +++ b/spring-core/src/main/java/org/springframework/util/Base64Utils.java, +	 * @since 4.2.4, +	 * @since 4.2.4, +		private final org.apache.commons.codec.binary.Base64 base64 =, +				new org.apache.commons.codec.binary.Base64();, +		private final org.apache.commons.codec.binary.Base64 base64UrlSafe =, +				new org.apache.commons.codec.binary.Base64(0, null, true);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlEncodingFilter.java, +		private final HttpServletRequest request;, +		/* Cache the index of the path within the DispatcherServlet mapping */, +, +, +			return (ResourceUrlProvider) this.request.getAttribute(, +					ResourceUrlProviderExposingInterceptor.RESOURCE_URL_PROVIDER_ATTR);, +			return (index > 0 ? index : url.length());, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProviderExposingInterceptor.java, + * Copyright 2002-2015 the original author or authors., +	public static final String RESOURCE_URL_PROVIDER_ATTR = ResourceUrlProvider.class.getName();, +		Assert.notNull(resourceUrlProvider, "ResourceUrlProvider is required");, +	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler), +			throws Exception {]