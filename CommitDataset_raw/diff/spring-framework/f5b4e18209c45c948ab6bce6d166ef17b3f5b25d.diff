[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, + * Copyright 2002-2015 the original author or authors., +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.Comparator;, +import java.util.List;, +		List<BeanDefinitionHolder> configCandidates = new ArrayList<BeanDefinitionHolder>();, +		// Sort by previously determined @Order value, if applicable, +		Collections.sort(configCandidates, new Comparator<BeanDefinitionHolder>() {, +			@Override, +			public int compare(BeanDefinitionHolder bd1, BeanDefinitionHolder bd2) {, +				int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition());, +				int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition());, +				return (i1 < i2) ? -1 : (i1 > i2) ? 1 : 0;, +			}, +		});, +, +		Set<BeanDefinitionHolder> candidates = new LinkedHashSet<BeanDefinitionHolder>(configCandidates);, +			parser.parse(candidates);, +			candidates.clear();, +							candidates.add(new BeanDefinitionHolder(beanDef, candidateName));, +		while (!candidates.isEmpty());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, + * Copyright 2002-2015 the original author or authors., +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.Comparator;, +import java.util.List;, +		List<BeanDefinitionHolder> configCandidates = new ArrayList<BeanDefinitionHolder>();, +		// Sort by previously determined @Order value, if applicable, +		Collections.sort(configCandidates, new Comparator<BeanDefinitionHolder>() {, +			@Override, +			public int compare(BeanDefinitionHolder bd1, BeanDefinitionHolder bd2) {, +				int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition());, +				int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition());, +				return (i1 < i2) ? -1 : (i1 > i2) ? 1 : 0;, +			}, +		});, +, +		Set<BeanDefinitionHolder> candidates = new LinkedHashSet<BeanDefinitionHolder>(configCandidates);, +			parser.parse(candidates);, +			candidates.clear();, +							candidates.add(new BeanDefinitionHolder(beanDef, candidateName));, +		while (!candidates.isEmpty());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassUtils.java, + * Copyright 2002-2015 the original author or authors., +import java.util.Map;, +import org.springframework.core.Ordered;, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.core.annotation.Order;, +	private static final String ORDER_ATTRIBUTE =, +			Conventions.getQualifiedAttributeName(ConfigurationClassPostProcessor.class, "order");, +, +		Map<String, Object> orderAttributes = metadata.getAnnotationAttributes(Order.class.getName());, +		if (orderAttributes != null) {, +			beanDef.setAttribute(ORDER_ATTRIBUTE, orderAttributes.get(AnnotationUtils.VALUE));, +		}, +, +	/**, +	 * Determine the order for the given configuration class bean definition,, +	 * as set by {@link #checkConfigurationClassCandidate}., +	 * @param beanDef the bean definition to check, +	 * @return the {@link @Order} annotation value on the configuration class,, +	 * or {@link Ordered#LOWEST_PRECEDENCE} if none declared, +	 */, +	public static int getOrder(BeanDefinition beanDef) {, +		Integer order = (Integer) beanDef.getAttribute(ORDER_ATTRIBUTE);, +		return (order != null ? order : Ordered.LOWEST_PRECEDENCE);, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, + * Copyright 2002-2015 the original author or authors., +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.Comparator;, +import java.util.List;, +		List<BeanDefinitionHolder> configCandidates = new ArrayList<BeanDefinitionHolder>();, +		// Sort by previously determined @Order value, if applicable, +		Collections.sort(configCandidates, new Comparator<BeanDefinitionHolder>() {, +			@Override, +			public int compare(BeanDefinitionHolder bd1, BeanDefinitionHolder bd2) {, +				int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition());, +				int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition());, +				return (i1 < i2) ? -1 : (i1 > i2) ? 1 : 0;, +			}, +		});, +, +		Set<BeanDefinitionHolder> candidates = new LinkedHashSet<BeanDefinitionHolder>(configCandidates);, +			parser.parse(candidates);, +			candidates.clear();, +							candidates.add(new BeanDefinitionHolder(beanDef, candidateName));, +		while (!candidates.isEmpty());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassUtils.java, + * Copyright 2002-2015 the original author or authors., +import java.util.Map;, +import org.springframework.core.Ordered;, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.core.annotation.Order;, +	private static final String ORDER_ATTRIBUTE =, +			Conventions.getQualifiedAttributeName(ConfigurationClassPostProcessor.class, "order");]