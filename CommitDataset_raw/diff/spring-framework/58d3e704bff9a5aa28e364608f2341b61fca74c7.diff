[+++ b/org.springframework.oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java, +	private boolean lazyInit = false;, +, +	/**, +	 * Set whether to lazily initialize the {@link JAXBContext} for this marshaller., +	 * Default is {@code false} to initialize on startup; can be switched to, +	 * {@code true}., +	 * <p>Early initialization just applies if <code>afterPropertiesSet()</code> is called., +	 * @see #afterPropertiesSet(), +	 */, +	public void setLazyInit(boolean lazyInit) {, +		this.lazyInit = lazyInit;, +	}, +, +, +		if (StringUtils.hasLength(this.contextPath) && !ObjectUtils.isEmpty(this.classesToBeBound)) {, +			throw new IllegalArgumentException("Specify either 'contextPath' or 'classesToBeBound property'; not both");, +		}, +		else if (!StringUtils.hasLength(this.contextPath) && ObjectUtils.isEmpty(this.classesToBeBound)) {, +			throw new IllegalArgumentException("Setting either 'contextPath' or 'classesToBeBound' is required");, +		}, +		if (!lazyInit) {, +			getJaxbContext();, +		}, +	protected synchronized JAXBContext getJaxbContext() {, +		if (this.jaxbContext == null) {, +			try {, +					this.jaxbContext = createJaxbContextFromContextPath();, +					this.jaxbContext = createJaxbContextFromClasses();, +			catch (JAXBException ex) {, +				throw convertJaxbException(ex);, +			}, +		}, +		return jaxbContext;, +			Marshaller marshaller = getJaxbContext().createMarshaller();, +			Unmarshaller unmarshaller = getJaxbContext().createUnmarshaller();, +++ b/org.springframework.oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java, +	private boolean lazyInit = false;, +, +	/**, +	 * Set whether to lazily initialize the {@link JAXBContext} for this marshaller., +	 * Default is {@code false} to initialize on startup; can be switched to, +	 * {@code true}., +	 * <p>Early initialization just applies if <code>afterPropertiesSet()</code> is called., +	 * @see #afterPropertiesSet(), +	 */, +	public void setLazyInit(boolean lazyInit) {, +		this.lazyInit = lazyInit;, +	}, +, +, +		if (StringUtils.hasLength(this.contextPath) && !ObjectUtils.isEmpty(this.classesToBeBound)) {, +			throw new IllegalArgumentException("Specify either 'contextPath' or 'classesToBeBound property'; not both");, +		}, +		else if (!StringUtils.hasLength(this.contextPath) && ObjectUtils.isEmpty(this.classesToBeBound)) {, +			throw new IllegalArgumentException("Setting either 'contextPath' or 'classesToBeBound' is required");, +		}, +		if (!lazyInit) {, +			getJaxbContext();, +		}, +	protected synchronized JAXBContext getJaxbContext() {, +		if (this.jaxbContext == null) {, +			try {, +					this.jaxbContext = createJaxbContextFromContextPath();, +					this.jaxbContext = createJaxbContextFromClasses();, +			catch (JAXBException ex) {, +				throw convertJaxbException(ex);, +			}, +		}, +		return jaxbContext;, +			Marshaller marshaller = getJaxbContext().createMarshaller();, +			Unmarshaller unmarshaller = getJaxbContext().createUnmarshaller();, +++ b/org.springframework.oxm/src/test/java/org/springframework/oxm/jaxb/Jaxb2MarshallerTests.java, +import static org.custommonkey.xmlunit.XMLAssert.*;, +import static org.junit.Assert.assertTrue;, +import org.springframework.oxm.UncategorizedMappingException;, +	public void laxyInit() throws Exception {, +		marshaller = new Jaxb2Marshaller();, +		marshaller.setContextPath(CONTEXT_PATH);, +		marshaller.setLazyInit(true);, +		marshaller.afterPropertiesSet();, +		StringWriter writer = new StringWriter();, +		StreamResult result = new StreamResult(writer);, +		marshaller.marshal(flights, result);, +		assertXMLEqual("Marshaller writes invalid StreamResult", EXPECTED_STRING, writer.toString());, +	}, +, +	@Test, +	@Test(expected = UncategorizedMappingException.class)]