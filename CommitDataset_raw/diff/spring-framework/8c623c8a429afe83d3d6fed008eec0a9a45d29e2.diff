[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/SingleColumnRowMapper.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.convert.ConversionService;, +import org.springframework.core.convert.support.DefaultConversionService;, + * @author Kazuki Shimizu, +	@Nullable, +	private ConversionService conversionService = DefaultConversionService.getSharedInstance();, +	/**, +	 * Set a {@link ConversionService} for converting a fetched value., +	 * <p>Default is the {@link DefaultConversionService}., +	 * @since 5.0.4, +	 * @see DefaultConversionService#getSharedInstance, +	 */, +	public void setConversionService(@Nullable ConversionService conversionService) {, +		this.conversionService = conversionService;, +	}, +	 * String parsing (depending on the value type). Otherwise, the value will, +	 * be converted to a required type using the {@link ConversionService}., +	@Nullable, +		else if (this.conversionService != null && this.conversionService.canConvert(value.getClass(), requiredType)) {, +			return this.conversionService.convert(value, requiredType);, +		}, +	/**, +	 * Static factory method to create a new {@code SingleColumnRowMapper}, +	 * (with the required type specified only once)., +	 * @param requiredType the type that each result object is expected to match, +	 * @param conversionService the {@link ConversionService} for converting a fetched value, +	 * @since 5.0.4, +	 */, +	public static <T> SingleColumnRowMapper<T> newInstance(Class<T> requiredType, @Nullable ConversionService conversionService) {, +		SingleColumnRowMapper<T> rowMapper = newInstance(requiredType);, +		rowMapper.setConversionService(conversionService);, +		return rowMapper;, +	}, +, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/SingleColumnRowMapper.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.convert.ConversionService;, +import org.springframework.core.convert.support.DefaultConversionService;, + * @author Kazuki Shimizu, +	@Nullable, +	private ConversionService conversionService = DefaultConversionService.getSharedInstance();, +	/**, +	 * Set a {@link ConversionService} for converting a fetched value., +	 * <p>Default is the {@link DefaultConversionService}., +	 * @since 5.0.4, +	 * @see DefaultConversionService#getSharedInstance, +	 */, +	public void setConversionService(@Nullable ConversionService conversionService) {, +		this.conversionService = conversionService;, +	}, +	 * String parsing (depending on the value type). Otherwise, the value will, +	 * be converted to a required type using the {@link ConversionService}., +	@Nullable, +		else if (this.conversionService != null && this.conversionService.canConvert(value.getClass(), requiredType)) {, +			return this.conversionService.convert(value, requiredType);, +		}, +	/**, +	 * Static factory method to create a new {@code SingleColumnRowMapper}, +	 * (with the required type specified only once)., +	 * @param requiredType the type that each result object is expected to match, +	 * @param conversionService the {@link ConversionService} for converting a fetched value, +	 * @since 5.0.4, +	 */, +	public static <T> SingleColumnRowMapper<T> newInstance(Class<T> requiredType, @Nullable ConversionService conversionService) {, +		SingleColumnRowMapper<T> rowMapper = newInstance(requiredType);, +		rowMapper.setConversionService(conversionService);, +		return rowMapper;, +	}, +, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/SingleColumnRowMapperTest.java, +/*, + * Copyright 2002-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.jdbc.core;, +, +import java.sql.ResultSet;, +import java.sql.ResultSetMetaData;, +import java.sql.SQLException;, +import java.sql.SQLFeatureNotSupportedException;, +import java.sql.Timestamp;, +import java.time.LocalDateTime;, +, +import org.junit.Test;, +import org.springframework.core.convert.support.DefaultConversionService;, +import org.springframework.dao.TypeMismatchDataAccessException;, +]