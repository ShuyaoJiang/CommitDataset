[+++ b/spring-web/src/main/java/org/springframework/web/util/DefaultUriBuilderFactory.java, +	@Override, +	public UriBuilder builder() {, +		return new DefaultUriBuilder("");, +	}, +, +			UriComponentsBuilder uriComponentsBuilder = UriComponentsBuilder.fromUriString(uriTemplate);, +			UriComponents uriComponents = uriComponentsBuilder.build();, +, +			UriComponentsBuilder result = (uriComponents.getHost() == null ?, +					baseUri.cloneBuilder().uriComponents(uriComponents) : uriComponentsBuilder);, +++ b/spring-web/src/main/java/org/springframework/web/util/DefaultUriBuilderFactory.java, +	@Override, +	public UriBuilder builder() {, +		return new DefaultUriBuilder("");, +	}, +, +			UriComponentsBuilder uriComponentsBuilder = UriComponentsBuilder.fromUriString(uriTemplate);, +			UriComponents uriComponents = uriComponentsBuilder.build();, +, +			UriComponentsBuilder result = (uriComponents.getHost() == null ?, +					baseUri.cloneBuilder().uriComponents(uriComponents) : uriComponentsBuilder);, +++ b/spring-web/src/main/java/org/springframework/web/util/UriBuilderFactory.java, +	 * Return a builder initialized with the given URI string., +	 * <p>Concrete implementations may apply further initializations such as, +	 * combining with a pre-configured base URI., +	 * @param uriTemplate the URI template to initialize the builder with, +	/**, +	 * Return a builder to prepare a new URI., +	 * @return the UriBuilder, +	 */, +	UriBuilder builder();, +, +++ b/spring-web/src/main/java/org/springframework/web/util/DefaultUriBuilderFactory.java, +	@Override, +	public UriBuilder builder() {, +		return new DefaultUriBuilder("");, +	}, +, +			UriComponentsBuilder uriComponentsBuilder = UriComponentsBuilder.fromUriString(uriTemplate);, +			UriComponents uriComponents = uriComponentsBuilder.build();, +, +			UriComponentsBuilder result = (uriComponents.getHost() == null ?, +					baseUri.cloneBuilder().uriComponents(uriComponents) : uriComponentsBuilder);, +++ b/spring-web/src/main/java/org/springframework/web/util/UriBuilderFactory.java, +	 * Return a builder initialized with the given URI string., +	 * <p>Concrete implementations may apply further initializations such as, +	 * combining with a pre-configured base URI., +	 * @param uriTemplate the URI template to initialize the builder with, +	/**, +	 * Return a builder to prepare a new URI., +	 * @return the UriBuilder, +	 */, +	UriBuilder builder();, +, +++ b/spring-web/src/test/java/org/springframework/web/util/DefaultUriBuilderFactoryTests.java, +		DefaultUriBuilderFactory factory = new DefaultUriBuilderFactory("http://foo.com/v1?id=123");, +		URI uri = factory.uriString("/bar").port(8080).build();, +		assertEquals("http://foo.com:8080/v1/bar?id=123", uri.toString());, +	}, +, +	@Test, +	public void baseUriWithFullOverride() throws Exception {, +		DefaultUriBuilderFactory factory = new DefaultUriBuilderFactory("http://foo.com/v1?id=123");, +		URI uri = factory.uriString("http://example.com/1/2").build();, +		assertEquals("Use of host should case baseUri to be completely ignored",, +				"http://example.com/1/2", uri.toString());, +		DefaultUriBuilderFactory factory = new DefaultUriBuilderFactory("http://foo.com/v1");, +		URI uri = factory.builder().replacePath("/baz").build();, +		DefaultUriBuilderFactory factory = new DefaultUriBuilderFactory("http://{host}/v1");, +		assertEquals("http://foo.com/v1/123", uri.toString());, +		DefaultUriBuilderFactory factory = new DefaultUriBuilderFactory("http://{host}/v1");, +		URI uri = factory.uriString("/bar").build(singletonMap("host", "docs.spring.io"));, +		assertEquals("http://docs.spring.io/v1/bar", uri.toString());, +		DefaultUriBuilderFactory factory = new DefaultUriBuilderFactory("http://{host}/v1");, +		URI uri = factory.uriString("/bar").build();, +		assertEquals("Expected delegation to build(Map) method", "http://foo.com/v1/bar", uri.toString());, +++ b/spring-web/src/main/java/org/springframework/web/util/DefaultUriBuilderFactory.java, +	@Override, +	public UriBuilder builder() {, +		return new DefaultUriBuilder("");, +	}, +, +			UriComponentsBuilder uriComponentsBuilder = UriComponentsBuilder.fromUriString(uriTemplate);, +			UriComponents uriComponents = uriComponentsBuilder.build();, +, +			UriComponentsBuilder result = (uriComponents.getHost() == null ?, +					baseUri.cloneBuilder().uriComponents(uriComponents) : uriComponentsBuilder);, +++ b/spring-web/src/main/java/org/springframework/web/util/UriBuilderFactory.java, +	 * Return a builder initialized with the given URI string., +	 * <p>Concrete implementations may apply further initializations such as, +	 * combining with a pre-configured base URI., +	 * @param uriTemplate the URI template to initialize the builder with, +	/**, +	 * Return a builder to prepare a new URI., +	 * @return the UriBuilder, +	 */, +	UriBuilder builder();, +, +++ b/spring-web/src/test/java/org/springframework/web/util/DefaultUriBuilderFactoryTests.java]