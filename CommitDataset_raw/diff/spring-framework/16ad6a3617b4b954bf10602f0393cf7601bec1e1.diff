[+++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java, +package org.springframework.ui.binding;, +, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Array;, +import java.text.ParseException;, +import java.util.Collection;, +import java.util.HashMap;, +import java.util.Locale;, +import java.util.Map;, +, +import org.springframework.context.expression.MapAccessor;, +import org.springframework.context.i18n.LocaleContextHolder;, +import org.springframework.core.convert.TypeConverter;, +import org.springframework.core.convert.TypeDescriptor;, +import org.springframework.core.convert.support.DefaultTypeConverter;, +import org.springframework.expression.EvaluationContext;, +import org.springframework.expression.EvaluationException;, +import org.springframework.expression.Expression;, +import org.springframework.expression.ExpressionException;, +import org.springframework.expression.ExpressionParser;, +import org.springframework.expression.spel.standard.SpelExpressionParser;, +import org.springframework.expression.spel.support.StandardEvaluationContext;, +import org.springframework.expression.spel.support.StandardTypeConverter;, +import org.springframework.ui.format.Formatter;, +, +public class Binder<T> {, +, +	private static final String[] EMPTY_STRING_ARRAY = new String[0];, +, +	private T model;, +, +	private Map<String, Binding> bindings;, +, +	private Map<Class<?>, Formatter<?>> typeFormatters = new HashMap<Class<?>, Formatter<?>>();, +	, +	private Map<Annotation, Formatter<?>> annotationFormatters = new HashMap<Annotation, Formatter<?>>();, +	, +	private ExpressionParser expressionParser;, +, +	private TypeConverter typeConverter;, +	, +	private boolean optimisticBinding = true;, +, +	private static Formatter<?> defaultFormatter = new Formatter<?>() {, +		, +		public Class<?> getFormattedObjectType() {, +			return String.class;, +		}, +, +		public String format(Object object, Locale locale) {, +			if (object == null) {, +				return "";, +			} else {, +				return object.toString();, +			}, +		}, +, +		public Object parse(String formatted, Locale locale), +				throws ParseException {, +			if (formatted == "") {, +				return null;, +			} else {, +				return formatted;, +			}, +		}		, +	};, +	, +	public Binder(T model) {, +		this.model = model;, +		bindings = new HashMap<String, Binding>();, +		expressionParser = new SpelExpressionParser();, +		typeConverter = new DefaultTypeConverter();, +	}, +, +	public Binding add(BindingConfiguration binding) {, +		Binding newBinding;, +		try {, +			newBinding = new BindingImpl(binding);, +		} catch (org.springframework.expression.ParseException e) {, +			throw new IllegalArgumentException(e);, +		}, +		bindings.put(binding.getProperty(), newBinding);, +		return newBinding;, +	}, +, +	public void add(Formatter<?> formatter, Class<?> propertyType) {, +		if (propertyType == null) {, +			propertyType = formatter.getFormattedObjectType();, +		}, +		typeFormatters.put(propertyType, formatter);, +	}, +, +	public void add(Formatter<?> formatter, Annotation propertyAnnotation) {, +		annotationFormatters.put(propertyAnnotation, formatter);, +	}, +, +	public T getModel() {, +		return model;, +	}]