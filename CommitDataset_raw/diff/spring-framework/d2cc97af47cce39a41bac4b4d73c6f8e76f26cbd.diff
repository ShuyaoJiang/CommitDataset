[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/AbstractSubscriptionRegistry.java, + * Copyright 2002-2017 the original author or authors., +			CollectionUtils.unmodifiableMultiValueMap(new LinkedMultiValueMap<>(0));, +			if (logger.isErrorEnabled()) {, +			}, +			if (logger.isErrorEnabled()) {, +			}, +			if (logger.isErrorEnabled()) {, +			}, +			if (logger.isErrorEnabled()) {, +			}, +			if (logger.isErrorEnabled()) {, +			}, +			if (logger.isErrorEnabled()) {, +			}, +	protected abstract void addSubscriptionInternal(, +			String sessionId, String subscriptionId, String destination, Message<?> message);, +, +	protected abstract void removeSubscriptionInternal(, +			String sessionId, String subscriptionId, Message<?> message);, +, +	protected abstract MultiValueMap<String, String> findSubscriptionsInternal(, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/AbstractSubscriptionRegistry.java, + * Copyright 2002-2017 the original author or authors., +			CollectionUtils.unmodifiableMultiValueMap(new LinkedMultiValueMap<>(0));, +			if (logger.isErrorEnabled()) {, +			}, +			if (logger.isErrorEnabled()) {, +			}, +			if (logger.isErrorEnabled()) {, +			}, +			if (logger.isErrorEnabled()) {, +			}, +			if (logger.isErrorEnabled()) {, +			}, +			if (logger.isErrorEnabled()) {, +			}, +	protected abstract void addSubscriptionInternal(, +			String sessionId, String subscriptionId, String destination, Message<?> message);, +, +	protected abstract void removeSubscriptionInternal(, +			String sessionId, String subscriptionId, Message<?> message);, +, +	protected abstract MultiValueMap<String, String> findSubscriptionsInternal(, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java, +	protected void addSubscriptionInternal(, +			String sessionId, String subsId, String destination, Message<?> message) {, +	private static final class Subscription {, +			Assert.notNull(id, "Subscription id must not be null");, +			return (this == other || (other instanceof Subscription && this.id.equals(((Subscription) other).id)));, +			return this.id.hashCode();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/AbstractSubscriptionRegistry.java, + * Copyright 2002-2017 the original author or authors., +			CollectionUtils.unmodifiableMultiValueMap(new LinkedMultiValueMap<>(0));, +			if (logger.isErrorEnabled()) {, +			}, +			if (logger.isErrorEnabled()) {, +			}, +			if (logger.isErrorEnabled()) {, +			}, +			if (logger.isErrorEnabled()) {, +			}, +			if (logger.isErrorEnabled()) {, +			}, +			if (logger.isErrorEnabled()) {, +			}, +	protected abstract void addSubscriptionInternal(, +			String sessionId, String subscriptionId, String destination, Message<?> message);, +, +	protected abstract void removeSubscriptionInternal(, +			String sessionId, String subscriptionId, Message<?> message);, +, +	protected abstract MultiValueMap<String, String> findSubscriptionsInternal(, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java, +	protected void addSubscriptionInternal(, +			String sessionId, String subsId, String destination, Message<?> message) {, +	private static final class Subscription {, +			Assert.notNull(id, "Subscription id must not be null");, +			return (this == other || (other instanceof Subscription && this.id.equals(((Subscription) other).id)));, +			return this.id.hashCode();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/ReconnectStrategy.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/AbstractSubscriptionRegistry.java, + * Copyright 2002-2017 the original author or authors., +			CollectionUtils.unmodifiableMultiValueMap(new LinkedMultiValueMap<>(0));, +			if (logger.isErrorEnabled()) {, +			}, +			if (logger.isErrorEnabled()) {, +			}, +			if (logger.isErrorEnabled()) {, +			}, +			if (logger.isErrorEnabled()) {, +			}, +			if (logger.isErrorEnabled()) {, +			}, +			if (logger.isErrorEnabled()) {, +			}, +	protected abstract void addSubscriptionInternal(, +			String sessionId, String subscriptionId, String destination, Message<?> message);, +]