[+++ b/build.gradle, +		optional("reactor:reactor-core:1.0.0.BUILD-SNAPSHOT"), +		maven { url 'http://repo.springsource.org/libs-snapshot' } // reactor, +++ b/build.gradle, +		optional("reactor:reactor-core:1.0.0.BUILD-SNAPSHOT"), +		maven { url 'http://repo.springsource.org/libs-snapshot' } // reactor, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/BinaryMessage.java, +	@Override, +	protected String toStringPayload() {, +		return (getPayload() != null) ? getPayload().toString() : null;, +	}, +, +++ b/build.gradle, +		optional("reactor:reactor-core:1.0.0.BUILD-SNAPSHOT"), +		maven { url 'http://repo.springsource.org/libs-snapshot' } // reactor, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/BinaryMessage.java, +	@Override, +	protected String toStringPayload() {, +		return (getPayload() != null) ? getPayload().toString() : null;, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/TextMessage.java, +	@Override, +	protected String toStringPayload() {, +		return (getPayloadSize() > 25) ? getPayload().substring(0, 25) + "..." : getPayload();, +	}, +, +++ b/build.gradle, +		optional("reactor:reactor-core:1.0.0.BUILD-SNAPSHOT"), +		maven { url 'http://repo.springsource.org/libs-snapshot' } // reactor, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/BinaryMessage.java, +	@Override, +	protected String toStringPayload() {, +		return (getPayload() != null) ? getPayload().toString() : null;, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/TextMessage.java, +	@Override, +	protected String toStringPayload() {, +		return (getPayloadSize() > 25) ? getPayload().substring(0, 25) + "..." : getPayload();, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/WebSocketMessage.java, +		return getClass().getSimpleName() + " payload= " + toStringPayload(), +				+ ", length=" + getPayloadSize() + ", last=" + isLast() + "]";, +	protected abstract String toStringPayload();, +, +++ b/build.gradle, +		optional("reactor:reactor-core:1.0.0.BUILD-SNAPSHOT"), +		maven { url 'http://repo.springsource.org/libs-snapshot' } // reactor, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/BinaryMessage.java, +	@Override, +	protected String toStringPayload() {, +		return (getPayload() != null) ? getPayload().toString() : null;, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/TextMessage.java, +	@Override, +	protected String toStringPayload() {, +		return (getPayloadSize() > 25) ? getPayload().substring(0, 25) + "..." : getPayload();, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/WebSocketMessage.java, +		return getClass().getSimpleName() + " payload= " + toStringPayload(), +				+ ", length=" + getPayloadSize() + ", last=" + isLast() + "]";, +	protected abstract String toStringPayload();, +, +++ b/spring-websocket/src/main/java/org/springframework/web/stomp/StompCommand.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.stomp;, +, +, +/**, + *, + * @author Rossen Stoyanchev, + * @since 4.0, + */, +public enum StompCommand {, +, +	// client, +	CONNECT,, +	STOMP,, +	SEND,, +	SUBSCRIBE,, +	UNSUBSCRIBE,]