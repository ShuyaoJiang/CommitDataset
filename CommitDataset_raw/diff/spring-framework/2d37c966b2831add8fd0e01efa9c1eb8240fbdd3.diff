[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java, +	 * Return the request headers that were sent to the server., +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java, +	 * Return the request headers that were sent to the server., +++ b/spring-web/src/main/java/org/springframework/http/codec/ClientCodecConfigurer.java, +import org.springframework.core.codec.Encoder;, +		 * Configure encoders or writers for use with, +		 * {@link org.springframework.http.codec.multipart.MultipartHttpMessageWriter, +		 * MultipartHttpMessageWriter}., +		 */, +		MultipartCodecsConfigurer multipartCodecs();, +, +		/**, +	/**, +	 * Registry and container for multipart HTTP message writers., +	 */, +	interface MultipartCodecsConfigurer {, +, +		/**, +		 * Add a Part {@code Encoder}, internally wrapped with, +		 * {@link EncoderHttpMessageWriter}., +		 * @param encoder the encoder to add, +		 */, +		MultipartCodecsConfigurer encoder(Encoder<?> encoder);, +, +		/**, +		 * Add a Part {@link HttpMessageWriter}. For writers of type, +		 * {@link EncoderHttpMessageWriter} consider using the shortcut, +		 * {@link #encoder(Encoder)} instead., +		 * @param writer the writer to add, +		 */, +		MultipartCodecsConfigurer writer(HttpMessageWriter<?> writer);, +	}, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java, +	 * Return the request headers that were sent to the server., +++ b/spring-web/src/main/java/org/springframework/http/codec/ClientCodecConfigurer.java, +import org.springframework.core.codec.Encoder;, +		 * Configure encoders or writers for use with, +		 * {@link org.springframework.http.codec.multipart.MultipartHttpMessageWriter, +		 * MultipartHttpMessageWriter}., +		 */, +		MultipartCodecsConfigurer multipartCodecs();, +, +		/**, +	/**, +	 * Registry and container for multipart HTTP message writers., +	 */, +	interface MultipartCodecsConfigurer {, +, +		/**, +		 * Add a Part {@code Encoder}, internally wrapped with, +		 * {@link EncoderHttpMessageWriter}., +		 * @param encoder the encoder to add, +		 */, +		MultipartCodecsConfigurer encoder(Encoder<?> encoder);, +, +		/**, +		 * Add a Part {@link HttpMessageWriter}. For writers of type, +		 * {@link EncoderHttpMessageWriter} consider using the shortcut, +		 * {@link #encoder(Encoder)} instead., +		 * @param writer the writer to add, +		 */, +		MultipartCodecsConfigurer writer(HttpMessageWriter<?> writer);, +	}, +++ b/spring-web/src/main/java/org/springframework/http/codec/CodecConfigurer.java, +		 * Add a custom {@link HttpMessageWriter}. For writers of type, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java, +	 * Return the request headers that were sent to the server., +++ b/spring-web/src/main/java/org/springframework/http/codec/ClientCodecConfigurer.java, +import org.springframework.core.codec.Encoder;, +		 * Configure encoders or writers for use with, +		 * {@link org.springframework.http.codec.multipart.MultipartHttpMessageWriter, +		 * MultipartHttpMessageWriter}., +		 */, +		MultipartCodecsConfigurer multipartCodecs();, +, +		/**, +	/**, +	 * Registry and container for multipart HTTP message writers., +	 */, +	interface MultipartCodecsConfigurer {, +, +		/**, +		 * Add a Part {@code Encoder}, internally wrapped with, +		 * {@link EncoderHttpMessageWriter}., +		 * @param encoder the encoder to add, +		 */, +		MultipartCodecsConfigurer encoder(Encoder<?> encoder);, +, +		/**, +		 * Add a Part {@link HttpMessageWriter}. For writers of type, +		 * {@link EncoderHttpMessageWriter} consider using the shortcut, +		 * {@link #encoder(Encoder)} instead., +		 * @param writer the writer to add, +		 */, +		MultipartCodecsConfigurer writer(HttpMessageWriter<?> writer);, +	}, +++ b/spring-web/src/main/java/org/springframework/http/codec/CodecConfigurer.java, +		 * Add a custom {@link HttpMessageWriter}. For writers of type, +++ b/spring-web/src/main/java/org/springframework/http/codec/DefaultClientCodecConfigurer.java]