[+++ b/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java, + * <tr><td>any</td><td>{@link #exchange}</td></tr>, + * <tr><td></td><td>{@link #execute}</td></tr> </table>, +	// exchange, +, +	public <Req, Res> HttpEntity<Res> exchange(String url, HttpMethod method,, +			HttpEntity<Req> requestEntity, Class<Res> responseType, Object... uriVariables) throws RestClientException {, +		HttpEntityRequestCallback requestCallback = new HttpEntityRequestCallback(requestEntity, responseType);, +		HttpEntityResponseExtractor<Res> responseExtractor = new HttpEntityResponseExtractor<Res>(responseType);, +		return execute(url, method, requestCallback, responseExtractor, uriVariables);, +	}, +, +	public <Req, Res> HttpEntity<Res> exchange(String url, HttpMethod method,, +			HttpEntity<Req> requestEntity, Class<Res> responseType, Map<String, ?> uriVariables) throws RestClientException {, +		HttpEntityRequestCallback requestCallback = new HttpEntityRequestCallback(requestEntity, responseType);, +		HttpEntityResponseExtractor<Res> responseExtractor = new HttpEntityResponseExtractor<Res>(responseType);, +		return execute(url, method, requestCallback, responseExtractor, uriVariables);, +	}, +, +	public <Req, Res> HttpEntity<Res> exchange(URI url, HttpMethod method, HttpEntity<Req> requestEntity, , +			Class<Res> responseType) throws RestClientException {, +		HttpEntityRequestCallback requestCallback = new HttpEntityRequestCallback(requestEntity, responseType);, +		HttpEntityResponseExtractor<Res> responseExtractor = new HttpEntityResponseExtractor<Res>(responseType);, +		return execute(url, method, requestCallback, responseExtractor);, +	}, +, +++ b/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java, + * <tr><td>any</td><td>{@link #exchange}</td></tr>, + * <tr><td></td><td>{@link #execute}</td></tr> </table>, +	// exchange, +, +	public <Req, Res> HttpEntity<Res> exchange(String url, HttpMethod method,, +			HttpEntity<Req> requestEntity, Class<Res> responseType, Object... uriVariables) throws RestClientException {, +		HttpEntityRequestCallback requestCallback = new HttpEntityRequestCallback(requestEntity, responseType);, +		HttpEntityResponseExtractor<Res> responseExtractor = new HttpEntityResponseExtractor<Res>(responseType);, +		return execute(url, method, requestCallback, responseExtractor, uriVariables);, +	}, +, +	public <Req, Res> HttpEntity<Res> exchange(String url, HttpMethod method,, +			HttpEntity<Req> requestEntity, Class<Res> responseType, Map<String, ?> uriVariables) throws RestClientException {, +		HttpEntityRequestCallback requestCallback = new HttpEntityRequestCallback(requestEntity, responseType);, +		HttpEntityResponseExtractor<Res> responseExtractor = new HttpEntityResponseExtractor<Res>(responseType);, +		return execute(url, method, requestCallback, responseExtractor, uriVariables);, +	}, +, +	public <Req, Res> HttpEntity<Res> exchange(URI url, HttpMethod method, HttpEntity<Req> requestEntity, , +			Class<Res> responseType) throws RestClientException {, +		HttpEntityRequestCallback requestCallback = new HttpEntityRequestCallback(requestEntity, responseType);, +		HttpEntityResponseExtractor<Res> responseExtractor = new HttpEntityResponseExtractor<Res>(responseType);, +		return execute(url, method, requestCallback, responseExtractor);, +	}, +, +++ b/org.springframework.web/src/test/java/org/springframework/web/client/RestTemplateIntegrationTests.java, +import org.springframework.http.HttpHeaders;, +	@Test, +	public void exchange() throws Exception {, +		HttpHeaders requestHeaders = new HttpHeaders();, +		requestHeaders.set("MyHeader", "MyValue");, +		HttpEntity<?> requestEntity = new HttpEntity(requestHeaders);, +		HttpEntity<String> response =, +				template.exchange(URI + "/{method}", HttpMethod.GET, requestEntity, String.class, "get");, +		assertEquals("Invalid content", helloWorld, response.getBody());, +	}, +, +++ b/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java, + * <tr><td>any</td><td>{@link #exchange}</td></tr>, + * <tr><td></td><td>{@link #execute}</td></tr> </table>, +	// exchange, +, +	public <Req, Res> HttpEntity<Res> exchange(String url, HttpMethod method,, +			HttpEntity<Req> requestEntity, Class<Res> responseType, Object... uriVariables) throws RestClientException {, +		HttpEntityRequestCallback requestCallback = new HttpEntityRequestCallback(requestEntity, responseType);, +		HttpEntityResponseExtractor<Res> responseExtractor = new HttpEntityResponseExtractor<Res>(responseType);, +		return execute(url, method, requestCallback, responseExtractor, uriVariables);, +	}, +, +	public <Req, Res> HttpEntity<Res> exchange(String url, HttpMethod method,, +			HttpEntity<Req> requestEntity, Class<Res> responseType, Map<String, ?> uriVariables) throws RestClientException {, +		HttpEntityRequestCallback requestCallback = new HttpEntityRequestCallback(requestEntity, responseType);, +		HttpEntityResponseExtractor<Res> responseExtractor = new HttpEntityResponseExtractor<Res>(responseType);, +		return execute(url, method, requestCallback, responseExtractor, uriVariables);, +	}, +, +	public <Req, Res> HttpEntity<Res> exchange(URI url, HttpMethod method, HttpEntity<Req> requestEntity, , +			Class<Res> responseType) throws RestClientException {, +		HttpEntityRequestCallback requestCallback = new HttpEntityRequestCallback(requestEntity, responseType);, +		HttpEntityResponseExtractor<Res> responseExtractor = new HttpEntityResponseExtractor<Res>(responseType);, +		return execute(url, method, requestCallback, responseExtractor);, +	}, +, +++ b/org.springframework.web/src/test/java/org/springframework/web/client/RestTemplateIntegrationTests.java, +import org.springframework.http.HttpHeaders;, +	@Test, +	public void exchange() throws Exception {, +		HttpHeaders requestHeaders = new HttpHeaders();, +		requestHeaders.set("MyHeader", "MyValue");, +		HttpEntity<?> requestEntity = new HttpEntity(requestHeaders);, +		HttpEntity<String> response =, +				template.exchange(URI + "/{method}", HttpMethod.GET, requestEntity, String.class, "get");, +		assertEquals("Invalid content", helloWorld, response.getBody());]