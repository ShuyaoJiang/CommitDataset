[+++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanAnnotationIntegrationTests.java, +import org.junit.Test;, +import org.springframework.aop.support.AopUtils;, +import org.springframework.beans.factory.annotation.CustomAutowireConfigurer;, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.support.BeanDefinitionRegistry;, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +import org.springframework.context.annotation.ComponentScan.Filter;, +import org.springframework.context.annotation.ComponentScanParserTests.KustomAnnotationAutowiredBean;, +import org.springframework.context.annotation.componentscan.simple.SimpleComponent;, +import org.springframework.context.support.GenericApplicationContext;, +import org.springframework.tests.context.SimpleMapScope;, +import org.springframework.util.SerializationTestUtils;, +, +		KustomAnnotationAutowiredBean testBean = ctx.getBean(KustomAnnotationAutowiredBean.class);, +	public ComponentScanParserTests.KustomAnnotationAutowiredBean testBean() {, +		return new ComponentScanParserTests.KustomAnnotationAutowiredBean();, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanAnnotationIntegrationTests.java, +import org.junit.Test;, +import org.springframework.aop.support.AopUtils;, +import org.springframework.beans.factory.annotation.CustomAutowireConfigurer;, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.support.BeanDefinitionRegistry;, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +import org.springframework.context.annotation.ComponentScan.Filter;, +import org.springframework.context.annotation.ComponentScanParserTests.KustomAnnotationAutowiredBean;, +import org.springframework.context.annotation.componentscan.simple.SimpleComponent;, +import org.springframework.context.support.GenericApplicationContext;, +import org.springframework.tests.context.SimpleMapScope;, +import org.springframework.util.SerializationTestUtils;, +, +		KustomAnnotationAutowiredBean testBean = ctx.getBean(KustomAnnotationAutowiredBean.class);, +	public ComponentScanParserTests.KustomAnnotationAutowiredBean testBean() {, +		return new ComponentScanParserTests.KustomAnnotationAutowiredBean();, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanParserTests.java, + * Copyright 2002-2014 the original author or authors., + * @author Sam Brannen, +		KustomAnnotationAutowiredBean testBean = (KustomAnnotationAutowiredBean) context.getBean("testBean");, +		KustomAnnotationAutowiredBean testBean = (KustomAnnotationAutowiredBean) context.getBean("testBean");, +	/**, +	 * Intentionally spelling "custom" with a "k" since there are numerous, +	 * classes in this package named *Custom*., +	 */, +	public static class KustomAnnotationAutowiredBean {, +		private KustomAnnotationDependencyBean dependency;, +		public KustomAnnotationDependencyBean getDependency() {, +	public static class KustomAnnotationDependencyBean {, +		/**, +		 * Intentionally spelling "custom" with a "k" since there are numerous, +		 * classes in this package named *Custom*., +		 */, +			return metadataReader.getClassMetadata().getClassName().contains("Kustom");, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanAnnotationIntegrationTests.java, +import org.junit.Test;, +import org.springframework.aop.support.AopUtils;, +import org.springframework.beans.factory.annotation.CustomAutowireConfigurer;, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.support.BeanDefinitionRegistry;, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +import org.springframework.context.annotation.ComponentScan.Filter;, +import org.springframework.context.annotation.ComponentScanParserTests.KustomAnnotationAutowiredBean;, +import org.springframework.context.annotation.componentscan.simple.SimpleComponent;, +import org.springframework.context.support.GenericApplicationContext;, +import org.springframework.tests.context.SimpleMapScope;, +import org.springframework.util.SerializationTestUtils;, +, +		KustomAnnotationAutowiredBean testBean = ctx.getBean(KustomAnnotationAutowiredBean.class);, +	public ComponentScanParserTests.KustomAnnotationAutowiredBean testBean() {, +		return new ComponentScanParserTests.KustomAnnotationAutowiredBean();, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanParserTests.java, + * Copyright 2002-2014 the original author or authors., + * @author Sam Brannen, +		KustomAnnotationAutowiredBean testBean = (KustomAnnotationAutowiredBean) context.getBean("testBean");, +		KustomAnnotationAutowiredBean testBean = (KustomAnnotationAutowiredBean) context.getBean("testBean");, +	/**, +	 * Intentionally spelling "custom" with a "k" since there are numerous, +	 * classes in this package named *Custom*., +	 */, +	public static class KustomAnnotationAutowiredBean {, +		private KustomAnnotationDependencyBean dependency;, +		public KustomAnnotationDependencyBean getDependency() {, +	public static class KustomAnnotationDependencyBean {, +		/**, +		 * Intentionally spelling "custom" with a "k" since there are numerous, +		 * classes in this package named *Custom*., +		 */, +			return metadataReader.getClassMetadata().getClassName().contains("Kustom");, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, +		assertSupportForComposedAnnotation(beanDefinition);, +		assertSupportForComposedAnnotation(beanDefinition);, +		assertSupportForComposedAnnotation(beanDefinition);, +	@Test, +		assertSupportForComposedAnnotation(beanDefinition);, +		assertSupportForComposedAnnotation(beanDefinition);, +	@Test, +		assertSupportForComposedAnnotation(beanDefinition);, +		assertSupportForComposedAnnotation(beanDefinition);, +	@Test, +		assertSupportForComposedAnnotation(beanDefinition);, +		assertSupportForComposedAnnotation(beanDefinition);]