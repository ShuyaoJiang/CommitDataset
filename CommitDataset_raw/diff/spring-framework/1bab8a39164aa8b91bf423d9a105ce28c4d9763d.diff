[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java, + * Copyright 2002-2014 the original author or authors., +	public static final String SESSION_ATTRIBUTES = "simpSessionAttributes";, +, +	@SuppressWarnings("unchecked"), +	public Map<String, Object> getSessionAttributes() {, +		return (Map<String, Object>) getHeader(SESSION_ATTRIBUTES);, +	}, +, +	public void setSessionAttributes(Map<String, Object> attributes) {, +		setHeader(SESSION_ATTRIBUTES, attributes);, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java, + * Copyright 2002-2014 the original author or authors., +	public static final String SESSION_ATTRIBUTES = "simpSessionAttributes";, +, +	@SuppressWarnings("unchecked"), +	public Map<String, Object> getSessionAttributes() {, +		return (Map<String, Object>) getHeader(SESSION_ATTRIBUTES);, +	}, +, +	public void setSessionAttributes(Map<String, Object> attributes) {, +		setHeader(SESSION_ATTRIBUTES, attributes);, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/AbstractWebSocketSession.java, +import java.util.concurrent.ConcurrentHashMap;, +	private final Map<String, Object> attributes = new ConcurrentHashMap<String, Object>();, +	 * @param attributes attributes from the HTTP handshake to associate with the WebSocket, +	 * session; the provided attributes are copied, the original map is not used., +		if (attributes != null) {, +			this.attributes.putAll(attributes);, +		}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java, + * Copyright 2002-2014 the original author or authors., +	public static final String SESSION_ATTRIBUTES = "simpSessionAttributes";, +, +	@SuppressWarnings("unchecked"), +	public Map<String, Object> getSessionAttributes() {, +		return (Map<String, Object>) getHeader(SESSION_ATTRIBUTES);, +	}, +, +	public void setSessionAttributes(Map<String, Object> attributes) {, +		setHeader(SESSION_ATTRIBUTES, attributes);, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/AbstractWebSocketSession.java, +import java.util.concurrent.ConcurrentHashMap;, +	private final Map<String, Object> attributes = new ConcurrentHashMap<String, Object>();, +	 * @param attributes attributes from the HTTP handshake to associate with the WebSocket, +	 * session; the provided attributes are copied, the original map is not used., +		if (attributes != null) {, +			this.attributes.putAll(attributes);, +		}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java, +	 * @param attributes attributes from the HTTP handshake to associate with the WebSocket, +	 * session; the provided attributes are copied, the original map is not used., +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java, + * Copyright 2002-2014 the original author or authors., +	public static final String SESSION_ATTRIBUTES = "simpSessionAttributes";, +, +	@SuppressWarnings("unchecked"), +	public Map<String, Object> getSessionAttributes() {, +		return (Map<String, Object>) getHeader(SESSION_ATTRIBUTES);, +	}, +, +	public void setSessionAttributes(Map<String, Object> attributes) {, +		setHeader(SESSION_ATTRIBUTES, attributes);, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/AbstractWebSocketSession.java, +import java.util.concurrent.ConcurrentHashMap;, +	private final Map<String, Object> attributes = new ConcurrentHashMap<String, Object>();, +	 * @param attributes attributes from the HTTP handshake to associate with the WebSocket, +	 * session; the provided attributes are copied, the original map is not used., +		if (attributes != null) {, +			this.attributes.putAll(attributes);, +		}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java, +	 * @param attributes attributes from the HTTP handshake to associate with the WebSocket, +	 * session; the provided attributes are copied, the original map is not used., +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/standard/StandardWebSocketSession.java, +	 * @param attributes attributes from the HTTP handshake to associate with the WebSocket, +	 * session; the provided attributes are copied, the original map is not used., +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageHeaderAccessor.java, + * Copyright 2002-2014 the original author or authors., +	public static final String SESSION_ATTRIBUTES = "simpSessionAttributes";, +, +	@SuppressWarnings("unchecked"), +	public Map<String, Object> getSessionAttributes() {, +		return (Map<String, Object>) getHeader(SESSION_ATTRIBUTES);, +	}, +, +	public void setSessionAttributes(Map<String, Object> attributes) {, +		setHeader(SESSION_ATTRIBUTES, attributes);, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/AbstractWebSocketSession.java, +import java.util.concurrent.ConcurrentHashMap;]