[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/AbstractView.java, +		Map<String, Object> mergedModel = createMergedOutputModel(model, request, response);, +, +		prepareResponse(request, response);, +		renderMergedOutputModel(mergedModel, request, response);, +	}, +, +	/**, +	 * Creates a combined output Map (never <code>null</code>) that includes dynamic values and static attributes. , +	 * Dynamic values take precedence over static attributes., +	 */, +	protected Map<String, Object> createMergedOutputModel(Map<String, ?> model, HttpServletRequest request,, +			HttpServletResponse response) {, +		return mergedModel;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/AbstractView.java, +		Map<String, Object> mergedModel = createMergedOutputModel(model, request, response);, +, +		prepareResponse(request, response);, +		renderMergedOutputModel(mergedModel, request, response);, +	}, +, +	/**, +	 * Creates a combined output Map (never <code>null</code>) that includes dynamic values and static attributes. , +	 * Dynamic values take precedence over static attributes., +	 */, +	protected Map<String, Object> createMergedOutputModel(Map<String, ?> model, HttpServletRequest request,, +			HttpServletResponse response) {, +		return mergedModel;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/RedirectView.java, + * relative URL. The URL may be a URI template in which case the URI template , + * variables will be replaced with values available in the model. By default , + * all primitive model attributes (or collections thereof), not used to fill, + * in URI tempate variables, are exposed as HTTP query parameters, but this , + * behavior can be changed by overriding the , + * {@link #isEligibleProperty(String, Object)} method., +		String targetUrl = createTargetUrl(model, request);, +		sendRedirect(request, response, targetUrl.toString(), this.http10Compatible);, +	}, +, +	/**, +	 * Creates the target URL by checking if the redirect string is a URI template first, , +	 * expanding it with the given model, and then optionally appending simple type model , +	 * attributes as query String parameters., +	 */, +	protected final String createTargetUrl(Map<String, Object> model, HttpServletRequest request), +			throws UnsupportedEncodingException {, +		, +		return targetUrl.toString();, +		Map<String, Object> map = (Map<String, Object>) request.getAttribute(View.PATH_VARIABLES);]