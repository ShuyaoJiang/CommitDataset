[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/ViewResolverRegistry.java, +import org.springframework.web.reactive.result.view.HttpMessageWriterView;, +	 * <p>Use {@link HttpMessageWriterView, +	 * HttpMessageWriterView} to adapt and use any existing, +	 * {@code HttpMessageWriter} (e.g. JSON, XML) as a {@code View}., +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/ViewResolverRegistry.java, +import org.springframework.web.reactive.result.view.HttpMessageWriterView;, +	 * <p>Use {@link HttpMessageWriterView, +	 * HttpMessageWriterView} to adapt and use any existing, +	 * {@code HttpMessageWriter} (e.g. JSON, XML) as a {@code View}., +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +import org.springframework.core.codec.ResourceDecoder;, +import org.springframework.http.converter.reactive.DecoderHttpMessageReader;, +import org.springframework.http.converter.reactive.EncoderHttpMessageWriter;, +import org.springframework.http.converter.reactive.HttpMessageReader;, +import org.springframework.http.converter.reactive.HttpMessageWriter;, +import org.springframework.http.converter.reactive.ResourceHttpMessageWriter;, +	private List<HttpMessageReader<?>> messageReaders;, +, +	private List<HttpMessageWriter<?>> messageWriters;, +		adapter.setMessageReaders(getMessageReaders());, +	 * Main method to access message readers to use for decoding, +	 * controller method arguments with., +	 * <p>Use {@link #configureMessageReaders} to configure the list or, +	 * {@link #extendMessageReaders} to add in addition to the default ones., +	protected final List<HttpMessageReader<?>> getMessageReaders() {, +		if (this.messageReaders == null) {, +			this.messageReaders = new ArrayList<>();, +			configureMessageReaders(this.messageReaders);, +			if (this.messageReaders.isEmpty()) {, +				addDefaultHttpMessageReaders(this.messageReaders);, +			extendMessageReaders(this.messageReaders);, +		return this.messageReaders;, +	 * Override to configure the message readers to use for decoding, +	 * controller method arguments., +	 * <p>If no message readres are specified, default will be added via, +	 * {@link #addDefaultHttpMessageReaders}., +	 * @param messageReaders a list to add message readers to, initially an empty, +	protected void configureMessageReaders(List<HttpMessageReader<?>> messageReaders) {, +	 * {@link #configureMessageReaders(List)}., +	protected final void addDefaultHttpMessageReaders(List<HttpMessageReader<?>> readers) {, +		readers.add(new DecoderHttpMessageReader<>(new ByteBufferDecoder()));, +		readers.add(new DecoderHttpMessageReader<>(new StringDecoder()));, +		readers.add(new DecoderHttpMessageReader<>(new ResourceDecoder()));, +			readers.add(new DecoderHttpMessageReader<>(new Jaxb2Decoder()));, +			readers.add(new DecoderHttpMessageReader<>(new JacksonJsonDecoder()));, +	 * Override this to modify the list of message readers after it has been, +	protected void extendMessageReaders(List<HttpMessageReader<?>> messageReaders) {, +		return new ResponseEntityResultHandler(getMessageWriters(), mvcConversionService(),, +		return new ResponseBodyResultHandler(getMessageWriters(), mvcConversionService(),, +	/**, +	 * Main method to access message writers to use for encoding return values., +	 * <p>Use {@link #configureMessageWriters(List)} to configure the list or, +	 * {@link #extendMessageWriters(List)} to add in addition to the default ones., +	 */, +	protected final List<HttpMessageWriter<?>> getMessageWriters() {, +		if (this.messageWriters == null) {, +			this.messageWriters = new ArrayList<>();, +			configureMessageWriters(this.messageWriters);, +			if (this.messageWriters.isEmpty()) {, +				addDefaultHttpMessageWriters(this.messageWriters);, +			}, +			extendMessageWriters(this.messageWriters);, +		}, +		return this.messageWriters;, +	}, +	/**, +	 * Override to configure the message writers to use for encoding, +	 * return values., +	 * <p>If no message readers are specified, default will be added via, +	 * {@link #addDefaultHttpMessageWriters}., +	 * @param messageWriters a list to add message writers to, initially an empty, +	 */, +	protected void configureMessageWriters(List<HttpMessageWriter<?>> messageWriters) {, +	}, +	/**, +	 * Adds default converters that sub-classes can call from, +	 * {@link #configureMessageWriters(List)}., +	 */, +	protected final void addDefaultHttpMessageWriters(List<HttpMessageWriter<?>> writers) {, +		List<Encoder<?>> sseDataEncoders = new ArrayList<>();, +		writers.add(new EncoderHttpMessageWriter<>(new ByteBufferEncoder()));, +		writers.add(new EncoderHttpMessageWriter<>(new StringEncoder()));, +		writers.add(new ResourceHttpMessageWriter());, +		if (jaxb2Present) {, +			writers.add(new EncoderHttpMessageWriter<>(new Jaxb2Encoder()));, +		}, +		if (jackson2Present) {, +			JacksonJsonEncoder jacksonEncoder = new JacksonJsonEncoder();, +			writers.add(new EncoderHttpMessageWriter<>(jacksonEncoder));, +			sseDataEncoders.add(jacksonEncoder);, +		}, +		writers.add(new EncoderHttpMessageWriter<>(new SseEventEncoder(sseDataEncoders)));, +	}, +	/**, +	 * Override this to modify the list of message writers after it has been, +	 * configured, for example to add some in addition to the default ones., +	 */, +	protected void extendMessageWriters(List<HttpMessageWriter<?>> messageWriters) {, +	}]