[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyProcessorSupport.java, + * Copyright 2002-2016 the original author or authors., +		return (ifc.getName().equals("groovy.lang.GroovyObject") ||, +				ifc.getName().endsWith(".cglib.proxy.Factory"));, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyProcessorSupport.java, + * Copyright 2002-2016 the original author or authors., +		return (ifc.getName().equals("groovy.lang.GroovyObject") ||, +				ifc.getName().endsWith(".cglib.proxy.Factory"));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +										this.cachedFieldValue = new ShortcutDependencyDescriptor(, +												desc, autowiredBeanName, field.getType());, +											this.cachedMethodArguments[i] = new ShortcutDependencyDescriptor(, +													descriptors[i], autowiredBeanName, paramTypes[i]);, +		private final String shortcutName;, +		private final Class<?> requiredType;, +, +		public ShortcutDependencyDescriptor(DependencyDescriptor original, String shortcutName, Class<?> requiredType) {, +			this.shortcutName = shortcutName;, +			this.requiredType = requiredType;, +			return resolveCandidate(this.shortcutName, this.requiredType, beanFactory);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyProcessorSupport.java, + * Copyright 2002-2016 the original author or authors., +		return (ifc.getName().equals("groovy.lang.GroovyObject") ||, +				ifc.getName().endsWith(".cglib.proxy.Factory"));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +										this.cachedFieldValue = new ShortcutDependencyDescriptor(, +												desc, autowiredBeanName, field.getType());, +											this.cachedMethodArguments[i] = new ShortcutDependencyDescriptor(, +													descriptors[i], autowiredBeanName, paramTypes[i]);, +		private final String shortcutName;, +		private final Class<?> requiredType;, +, +		public ShortcutDependencyDescriptor(DependencyDescriptor original, String shortcutName, Class<?> requiredType) {, +			this.shortcutName = shortcutName;, +			this.requiredType = requiredType;, +			return resolveCandidate(this.shortcutName, this.requiredType, beanFactory);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, +	 * @throws BeansException if the shortcut could not be obtained, +	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException {, +	/**, +	 * Resolve the specified bean name, as a candidate result of the matching, +	 * algorithm for this dependency, to a bean instance from the given factory., +	 * <p>The default implementation calls {@link BeanFactory#getBean(String)}., +	 * Subclasses may provide additional arguments or other customizations., +	 * @param beanName the bean name, as a candidate result for this dependency, +	 * @param requiredType the expected type of the bean (as an assertion), +	 * @param beanFactory the associated factory, +	 * @return the bean instance (never {@code null}), +	 * @throws BeansException if the bean could not be obtained, +	 * @since 4.3.2, +	 * @see BeanFactory#getBean(String), +	 */, +	public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory), +			throws BeansException {, +, +		return beanFactory.getBean(beanName, requiredType);, +	}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyProcessorSupport.java, + * Copyright 2002-2016 the original author or authors., +		return (ifc.getName().equals("groovy.lang.GroovyObject") ||, +				ifc.getName().endsWith(".cglib.proxy.Factory"));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +										this.cachedFieldValue = new ShortcutDependencyDescriptor(, +												desc, autowiredBeanName, field.getType());, +											this.cachedMethodArguments[i] = new ShortcutDependencyDescriptor(, +													descriptors[i], autowiredBeanName, paramTypes[i]);, +		private final String shortcutName;, +		private final Class<?> requiredType;, +, +		public ShortcutDependencyDescriptor(DependencyDescriptor original, String shortcutName, Class<?> requiredType) {, +			this.shortcutName = shortcutName;, +			this.requiredType = requiredType;, +			return resolveCandidate(this.shortcutName, this.requiredType, beanFactory);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, +	 * @throws BeansException if the shortcut could not be obtained, +	public Object resolveShortcut(BeanFactory beanFactory) throws BeansException {, +	/**, +	 * Resolve the specified bean name, as a candidate result of the matching, +	 * algorithm for this dependency, to a bean instance from the given factory., +	 * <p>The default implementation calls {@link BeanFactory#getBean(String)}., +	 * Subclasses may provide additional arguments or other customizations., +	 * @param beanName the bean name, as a candidate result for this dependency, +	 * @param requiredType the expected type of the bean (as an assertion), +	 * @param beanFactory the associated factory, +	 * @return the bean instance (never {@code null}), +	 * @throws BeansException if the bean could not be obtained, +	 * @since 4.3.2, +	 * @see BeanFactory#getBean(String), +	 */, +	public Object resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory), +			throws BeansException {, +, +		return beanFactory.getBean(beanName, requiredType);, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +				result.put(candidateName, descriptor.resolveCandidate(candidateName, requiredType, this));, +					result.put(candidateName, descriptor.resolveCandidate(candidateName, requiredType, this));, +						result.put(candidateName, descriptor.resolveCandidate(candidateName, requiredType, this));]