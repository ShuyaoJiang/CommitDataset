[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageTypeMessageCondition.java, + * Copyright 2002-2017 the original author or authors., +		SimpMessageType actual = SimpMessageHeaderAccessor.getMessageType(message.getHeaders());, +		return (actual != null && actual.equals(this.messageType) ? this : null);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessageTypeMessageCondition.java, + * Copyright 2002-2017 the original author or authors., +		SimpMessageType actual = SimpMessageHeaderAccessor.getMessageType(message.getHeaders());, +		return (actual != null && actual.equals(this.messageType) ? this : null);, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandlerTests.java, +import org.springframework.messaging.simp.SimpMessageType;, +		Message<?> message = createMessage(SimpMessageType.SUBSCRIBE, "/pre/sub/bar/value", null);, +		return createMessage(SimpMessageType.MESSAGE, destination, headers);, +	}, +, +	private Message<?> createMessage(SimpMessageType messageType, String destination, Map<String, Object> headers) {, +		SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create(messageType);]