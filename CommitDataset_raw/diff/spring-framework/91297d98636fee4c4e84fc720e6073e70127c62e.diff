[+++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java, +import org.springframework.beans.factory.BeanInitializationException;, +import org.springframework.context.ApplicationEvent;, +import org.springframework.context.ApplicationListener;, +import org.springframework.context.event.ContextRefreshedEvent;, +		implements FactoryBean<Scheduler>, BeanNameAware, ApplicationContextAware,, +		ApplicationListener<ApplicationEvent>, InitializingBean, DisposableBean, Lifecycle {, +	// Implementation of ApplicationListener interface, +	//---------------------------------------------------------------------, +, +	public void onApplicationEvent(ApplicationEvent event) {, +		// auto-start Scheduler if demanded, +		if (event instanceof ContextRefreshedEvent && this.autoStartup) {, +			try {, +				startScheduler(this.scheduler, this.startupDelay);, +			}, +			catch (SchedulerException e) {, +				throw new BeanInitializationException("failed to auto-start scheduler", e);, +			}, +		}, +	}, +, +, +	//---------------------------------------------------------------------, +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java, +import org.springframework.beans.factory.BeanInitializationException;, +import org.springframework.context.ApplicationEvent;, +import org.springframework.context.ApplicationListener;, +import org.springframework.context.event.ContextRefreshedEvent;, +		implements FactoryBean<Scheduler>, BeanNameAware, ApplicationContextAware,, +		ApplicationListener<ApplicationEvent>, InitializingBean, DisposableBean, Lifecycle {, +	// Implementation of ApplicationListener interface, +	//---------------------------------------------------------------------, +, +	public void onApplicationEvent(ApplicationEvent event) {, +		// auto-start Scheduler if demanded, +		if (event instanceof ContextRefreshedEvent && this.autoStartup) {, +			try {, +				startScheduler(this.scheduler, this.startupDelay);, +			}, +			catch (SchedulerException e) {, +				throw new BeanInitializationException("failed to auto-start scheduler", e);, +			}, +		}, +	}, +, +, +	//---------------------------------------------------------------------, +++ b/org.springframework.context.support/src/test/java/org/springframework/scheduling/quartz/QuartzSupportTests.java, + * Copyright 2002-2009 the original author or authors., +import static org.junit.Assert.assertFalse;, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.support.BeanDefinitionBuilder;, +import org.springframework.beans.factory.support.RootBeanDefinition;, + * @author Mark Fisher, +			schedulerFactoryBean.start();, +			schedulerFactoryBean.start();, +			schedulerFactoryBean.start();, +			schedulerFactoryBean.start();, +			schedulerFactoryBean.start();, +			schedulerFactoryBean.start();, +		bean.start();, +		bean.start();, +		bean.start();, +		bean.start();, +		bean.start();, +		bean.start();, +		bean.start();, +	public void testSchedulerAutoStartsOnContextRefreshedEventByDefault() throws Exception {, +		StaticApplicationContext context = new StaticApplicationContext();, +		context.registerBeanDefinition("scheduler", new RootBeanDefinition(SchedulerFactoryBean.class));, +		Scheduler bean = context.getBean("scheduler", Scheduler.class);, +		assertFalse(bean.isStarted());, +		context.refresh();, +		assertTrue(bean.isStarted());, +	}, +, +	@Test, +	public void testSchedulerAutoStartupFalse() throws Exception {, +		StaticApplicationContext context = new StaticApplicationContext();, +		BeanDefinition beanDefinition = BeanDefinitionBuilder.genericBeanDefinition(, +				SchedulerFactoryBean.class).addPropertyValue("autoStartup", false).getBeanDefinition();, +		context.registerBeanDefinition("scheduler", beanDefinition);, +		Scheduler bean = context.getBean("scheduler", Scheduler.class);, +		assertFalse(bean.isStarted());, +		context.refresh();, +		assertFalse(bean.isStarted());, +	}, +, +	@Test]