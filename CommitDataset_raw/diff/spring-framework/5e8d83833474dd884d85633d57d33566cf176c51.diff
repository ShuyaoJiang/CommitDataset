[+++ b/spring-web/src/main/java/org/springframework/web/cors/CorsProcessor.java, + * A strategy that takes a request and a {@link CorsConfiguration} and updates, + * the response., + *, + * <p>This component is not concerned with how a {@code CorsConfiguration} is, + * selected but rather takes follow-up actions such as applying CORS validation, + * checks and either rejecting the response or adding CORS headers to the, + * response., + * @author Rossen Stoyanchev, + * @see org.springframework.web.servlet.handler.AbstractHandlerMapping#setCorsProcessor, +	 * Process a request given a {@code CorsConfiguration}., +	 *, +	 * @param configuration the applicable CORS configuration, possibly {@code null}, +	 * @param request the current request, +	 * @param response the current response, +	boolean processRequest(CorsConfiguration configuration, HttpServletRequest request,, +++ b/spring-web/src/main/java/org/springframework/web/cors/CorsProcessor.java, + * A strategy that takes a request and a {@link CorsConfiguration} and updates, + * the response., + *, + * <p>This component is not concerned with how a {@code CorsConfiguration} is, + * selected but rather takes follow-up actions such as applying CORS validation, + * checks and either rejecting the response or adding CORS headers to the, + * response., + * @author Rossen Stoyanchev, + * @see org.springframework.web.servlet.handler.AbstractHandlerMapping#setCorsProcessor, +	 * Process a request given a {@code CorsConfiguration}., +	 *, +	 * @param configuration the applicable CORS configuration, possibly {@code null}, +	 * @param request the current request, +	 * @param response the current response, +	boolean processRequest(CorsConfiguration configuration, HttpServletRequest request,, +++ b/spring-web/src/main/java/org/springframework/web/cors/CorsUtils.java, +		return (request.getHeader(HttpHeaders.ORIGIN) != null);, +		return (isCorsRequest(request) && request.getMethod().equals(HttpMethod.OPTIONS.name()));, +++ b/spring-web/src/main/java/org/springframework/web/cors/CorsProcessor.java, + * A strategy that takes a request and a {@link CorsConfiguration} and updates, + * the response., + *, + * <p>This component is not concerned with how a {@code CorsConfiguration} is, + * selected but rather takes follow-up actions such as applying CORS validation, + * checks and either rejecting the response or adding CORS headers to the, + * response., + * @author Rossen Stoyanchev, + * @see org.springframework.web.servlet.handler.AbstractHandlerMapping#setCorsProcessor, +	 * Process a request given a {@code CorsConfiguration}., +	 *, +	 * @param configuration the applicable CORS configuration, possibly {@code null}, +	 * @param request the current request, +	 * @param response the current response, +	boolean processRequest(CorsConfiguration configuration, HttpServletRequest request,, +++ b/spring-web/src/main/java/org/springframework/web/cors/CorsUtils.java, +		return (request.getHeader(HttpHeaders.ORIGIN) != null);, +		return (isCorsRequest(request) && request.getMethod().equals(HttpMethod.OPTIONS.name()));, +++ b/spring-web/src/main/java/org/springframework/web/cors/DefaultCorsProcessor.java, + * <a href="http://www.w3.org/TR/cors/">CORS W3C recommendation</a>., + *, + * <p>Note that when input {@link CorsConfiguration} is {@code null}, this, + * implementation does not reject simple or actual requests outright but simply, + * avoid adding CORS headers to the response., +	private static final Log logger = LogFactory.getLog(DefaultCorsProcessor.class);, +	public boolean processRequest(CorsConfiguration config, HttpServletRequest request,, +		if (!CorsUtils.isCorsRequest(request)) {, +		ServletServerHttpRequest serverRequest = new ServletServerHttpRequest(request);, +, +		boolean preFlightRequest = CorsUtils.isPreFlightRequest(request);, +, +		if (config == null) {, +			if (preFlightRequest) {, +				rejectRequest(serverResponse);, +				return false;, +			}, +			else {, +		}, +		return handleInternal(serverRequest, serverResponse, config, preFlightRequest);, +	/**, +	 * Invoked when one of the CORS checks failed., +	 * The default implementation sets the response status to 403 and writes, +	 * "Invalid CORS request" to the response., +	 */, +	protected void rejectRequest(ServerHttpResponse response) throws IOException {, +		response.setStatusCode(HttpStatus.FORBIDDEN);, +		response.getBody().write("Invalid CORS request".getBytes(UTF8_CHARSET));, +	}, +, +	/**, +	 * Handle the given request., +	 */, +			CorsConfiguration config, boolean preFlightRequest) throws IOException {, +		HttpMethod requestMethod = getMethodToUse(request, preFlightRequest);, +		List<String> requestHeaders = getHeadersToUse(request, preFlightRequest);, +		if (allowOrigin == null || allowMethods == null || (preFlightRequest && allowHeaders == null)) {, +			rejectRequest(response);, +		if (preFlightRequest) {, +		if (preFlightRequest && !allowHeaders.isEmpty()) {, +		if (preFlightRequest && config.getMaxAge() != null) {, +		response.flush();, +++ b/spring-web/src/main/java/org/springframework/web/cors/CorsProcessor.java, + * A strategy that takes a request and a {@link CorsConfiguration} and updates, + * the response.]