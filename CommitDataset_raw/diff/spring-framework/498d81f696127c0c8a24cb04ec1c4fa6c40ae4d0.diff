[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/RedirectView.java, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +import org.springframework.util.Assert;, +import org.springframework.web.util.UriUtils;, +	private static final Pattern URI_TEMPLATE_VARIABLE_PATTERN = Pattern.compile("\\{([^/]+?)\\}");, +, +, +, +		FlashMap flashMap = RequestContextUtils.getOutputFlashMap(request);, +		if (!CollectionUtils.isEmpty(flashMap)) {, +			String targetPath = WebUtils.extractUrlPath(targetUrl.toString());, +			flashMap.setTargetRequestPath(targetPath);, +			if (this.exposeModelAttributes) {, +				flashMap.addTargetRequestParams(model);, +			}				, +		}, +		, +			Map<String, String> variables = getCurrentRequestUriVariables(request);, +			targetUrl = replaceUriTemplateVariables(targetUrl.toString(), model, variables, enc);, +	 * Replace URI template variables in the target URL with encoded model , +	 * attributes or URI variables from the current request. Model attributes, +	 * referenced in the URL are removed from the model. , +	 * @param targetUrl the redirect URL, +	 * @param model Map that contains model attributes, +	 * @param currentUriVariables current request URI variables to use, +	 * @param encodingScheme the encoding scheme to use, +	 * @throws UnsupportedEncodingException if string encoding failed, +	protected StringBuilder replaceUriTemplateVariables(, +			String targetUrl, Map<String, Object> model, Map<String, String> currentUriVariables, String encodingScheme), +			throws UnsupportedEncodingException {, +		StringBuilder result = new StringBuilder();, +		Matcher m = URI_TEMPLATE_VARIABLE_PATTERN.matcher(targetUrl);, +		int endLastMatch = 0;, +		while (m.find()) {, +			String name = m.group(1);, +			Object value = model.containsKey(name) ? model.remove(name) : currentUriVariables.get(name);, +			Assert.notNull(value, "Model has no value for '" + name + "'");, +			result.append(targetUrl.substring(endLastMatch, m.start()));, +			result.append(UriUtils.encodePathSegment(value.toString(), encodingScheme));, +			endLastMatch = m.end();, +		result.append(targetUrl.substring(endLastMatch, targetUrl.length()));, +	@SuppressWarnings("unchecked"), +	private Map<String, String> getCurrentRequestUriVariables(HttpServletRequest request) {, +		Map<String, String> uriVars = , +			(Map<String, String>) request.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE);, +		return (uriVars != null) ? uriVars : Collections.<String, String> emptyMap();, +	}, +	, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/RedirectView.java, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +import org.springframework.util.Assert;, +import org.springframework.web.util.UriUtils;, +	private static final Pattern URI_TEMPLATE_VARIABLE_PATTERN = Pattern.compile("\\{([^/]+?)\\}");, +, +, +, +		FlashMap flashMap = RequestContextUtils.getOutputFlashMap(request);, +		if (!CollectionUtils.isEmpty(flashMap)) {, +			String targetPath = WebUtils.extractUrlPath(targetUrl.toString());, +			flashMap.setTargetRequestPath(targetPath);, +			if (this.exposeModelAttributes) {, +				flashMap.addTargetRequestParams(model);, +			}				, +		}, +		, +			Map<String, String> variables = getCurrentRequestUriVariables(request);, +			targetUrl = replaceUriTemplateVariables(targetUrl.toString(), model, variables, enc);, +	 * Replace URI template variables in the target URL with encoded model , +	 * attributes or URI variables from the current request. Model attributes, +	 * referenced in the URL are removed from the model. , +	 * @param targetUrl the redirect URL, +	 * @param model Map that contains model attributes, +	 * @param currentUriVariables current request URI variables to use, +	 * @param encodingScheme the encoding scheme to use, +	 * @throws UnsupportedEncodingException if string encoding failed, +	protected StringBuilder replaceUriTemplateVariables(, +			String targetUrl, Map<String, Object> model, Map<String, String> currentUriVariables, String encodingScheme), +			throws UnsupportedEncodingException {, +		StringBuilder result = new StringBuilder();, +		Matcher m = URI_TEMPLATE_VARIABLE_PATTERN.matcher(targetUrl);, +		int endLastMatch = 0;, +		while (m.find()) {, +			String name = m.group(1);, +			Object value = model.containsKey(name) ? model.remove(name) : currentUriVariables.get(name);, +			Assert.notNull(value, "Model has no value for '" + name + "'");, +			result.append(targetUrl.substring(endLastMatch, m.start()));, +			result.append(UriUtils.encodePathSegment(value.toString(), encodingScheme));, +			endLastMatch = m.end();, +		result.append(targetUrl.substring(endLastMatch, targetUrl.length()));, +	@SuppressWarnings("unchecked"), +	private Map<String, String> getCurrentRequestUriVariables(HttpServletRequest request) {, +		Map<String, String> uriVars = , +			(Map<String, String>) request.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE);, +		return (uriVars != null) ? uriVars : Collections.<String, String> emptyMap();, +	}, +	, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/view/RedirectViewUriTemplateTests.java, +import org.springframework.ui.ModelMap;]