[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, +import javax.servlet.http.HttpServletResponse;, +	private boolean useNotAcceptableStatusCode = false;, +, +	 * Indicates whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable} status code should be, +	 * returned if no suitable view can be found., +	 *, +	 * <p>Default is {@code false}, meaning that this view resolver returns {@code null} for, +	 * {@link #resolveViewName(String, Locale)} when an acceptable view cannot be found. This will allow for view, +	 * resolvers chaining. When this property is set to {@code true}, , +	 * {@link #resolveViewName(String, Locale)} will respond with a view that sets the response status to, +	 * {@code 406 Not Acceptable} instead., +	 */, +	public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {, +		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode;, +	}, +, +	/**, +		SortedMap<MediaType, View> views = new TreeMap<MediaType, View>();, +			return useNotAcceptableStatusCode ? new NotAcceptableView() : null;, +	private static class NotAcceptableView implements View {, +, +		public String getContentType() {, +			return null;, +		}, +, +		public void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response), +				throws Exception {, +			response.setStatus(HttpServletResponse.SC_NOT_ACCEPTABLE);, +		}, +	}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, +import javax.servlet.http.HttpServletResponse;, +	private boolean useNotAcceptableStatusCode = false;, +, +	 * Indicates whether a {@link HttpServletResponse#SC_NOT_ACCEPTABLE 406 Not Acceptable} status code should be, +	 * returned if no suitable view can be found., +	 *, +	 * <p>Default is {@code false}, meaning that this view resolver returns {@code null} for, +	 * {@link #resolveViewName(String, Locale)} when an acceptable view cannot be found. This will allow for view, +	 * resolvers chaining. When this property is set to {@code true}, , +	 * {@link #resolveViewName(String, Locale)} will respond with a view that sets the response status to, +	 * {@code 406 Not Acceptable} instead., +	 */, +	public void setUseNotAcceptableStatusCode(boolean useNotAcceptableStatusCode) {, +		this.useNotAcceptableStatusCode = useNotAcceptableStatusCode;, +	}, +, +	/**, +		SortedMap<MediaType, View> views = new TreeMap<MediaType, View>();, +			return useNotAcceptableStatusCode ? new NotAcceptableView() : null;, +	private static class NotAcceptableView implements View {, +, +		public String getContentType() {, +			return null;, +		}, +, +		public void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response), +				throws Exception {, +			response.setStatus(HttpServletResponse.SC_NOT_ACCEPTABLE);, +		}, +	}, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolverTests.java, +import org.springframework.mock.web.MockHttpServletResponse;, +	@Test, +	public void resolveViewNoMatch() throws Exception {, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/test");, +		request.addHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9");, +		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request));, +, +		ViewResolver viewResolverMock = createMock(ViewResolver.class);, +		viewResolver.setViewResolvers(Collections.singletonList(viewResolverMock));, +, +		View viewMock = createMock("application_xml", View.class);, +, +		String viewName = "view";, +		Locale locale = Locale.ENGLISH;, +, +		expect(viewResolverMock.resolveViewName(viewName, locale)).andReturn(viewMock);, +		expect(viewMock.getContentType()).andReturn("application/pdf");, +, +		replay(viewResolverMock, viewMock);, +, +		View result = viewResolver.resolveViewName(viewName, locale);, +		assertNull("Invalid view", result);, +, +		verify(viewResolverMock, viewMock);, +	}, +, +	@Test, +	public void resolveViewNoMatchUseUnacceptableStatus() throws Exception {, +		viewResolver.setUseNotAcceptableStatusCode(true);, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/test");, +		request.addHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9");, +		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request));, +, +		ViewResolver viewResolverMock = createMock(ViewResolver.class);, +		viewResolver.setViewResolvers(Collections.singletonList(viewResolverMock));, +, +		View viewMock = createMock("application_xml", View.class);]