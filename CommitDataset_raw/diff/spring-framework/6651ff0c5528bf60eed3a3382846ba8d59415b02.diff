[+++ b/org.springframework.context/src/main/java/org/springframework/ui/format/support/FormattingConversionServiceAdapter.java, +import org.springframework.core.convert.TypeDescriptor;, +	protected Converter findConverter(Class<?> sourceType, TypeDescriptor targetType) {, +			Formatter formatter = this.formatterRegistry.getFormatter(targetType);, +				return new FormattingConverter(formatter);, +		return super.findConverter(sourceType, targetType);, +	private static class FormattingConverter implements Converter<String, Object> {, +		private final Formatter formatter;, +		public FormattingConverter(Formatter formatter) {, +		public Object convert(String source) throws Exception {, +++ b/org.springframework.context/src/main/java/org/springframework/ui/format/support/FormattingConversionServiceAdapter.java, +import org.springframework.core.convert.TypeDescriptor;, +	protected Converter findConverter(Class<?> sourceType, TypeDescriptor targetType) {, +			Formatter formatter = this.formatterRegistry.getFormatter(targetType);, +				return new FormattingConverter(formatter);, +		return super.findConverter(sourceType, targetType);, +	private static class FormattingConverter implements Converter<String, Object> {, +		private final Formatter formatter;, +		public FormattingConverter(Formatter formatter) {, +		public Object convert(String source) throws Exception {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +		Assert.notNull(sourceClass, "Source type to convert from is required");, +		Assert.notNull(targetType, "Target type to convert to is required");, +		Converter converter = findConverter(sourceClass, targetType);, +	protected Converter findConverter(Class<?> sourceType, TypeDescriptor targetType) {, +		return findRegisteredConverter(, +				ClassUtils.resolvePrimitiveIfNecessary(sourceType),, +				ClassUtils.resolvePrimitiveIfNecessary(targetType.getType()));, +	}, +, +	private Converter findRegisteredConverter(Class<?> sourceType, Class<?> targetType) {]