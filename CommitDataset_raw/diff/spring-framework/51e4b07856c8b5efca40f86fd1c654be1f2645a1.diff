[+++ b/build.gradle, +		optional("com.jamonapi:jamon:2.78"), +++ b/build.gradle, +		optional("com.jamonapi:jamon:2.78"), +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/JamonPerformanceMonitorInterceptor.java, + * Copyright 2002-2014 the original author or authors., +import com.jamonapi.MonKey;, +import com.jamonapi.MonKeyImp;, +import com.jamonapi.utils.Misc;, + * Performance monitor interceptor that uses <b>JAMon</b> library to perform the, + * performance measurement on the intercepted method and output the stats., + * In addition, it tracks/counts exceptions thrown by the intercepted method., + * The stack traces can be viewed in the JAMon web application., + * @author Steve Souza, +		MonKey key = new MonKeyImp(name, name, "ms.");, +, +		Monitor monitor = MonitorFactory.start(key);, +		catch (Throwable ex) {, +			trackException(key, ex);, +			throw ex;, +		}, +	/**, +	 * Count the thrown exception and put the stack trace in the details portion of the key., +	 * This will allow the stack trace to be viewed in the JAMon web application., +	 */, +	protected void trackException(MonKey key, Throwable ex) {, +		String stackTrace = "stackTrace=" + Misc.getExceptionTrace(ex);, +		key.setDetails(stackTrace);, +, +		// Specific exception counter. Example: java.lang.RuntimeException, +		MonitorFactory.add(new MonKeyImp(ex.getClass().getName(), stackTrace, "Exception"), 1);, +, +		// General exception counter which is a total for all exceptions thrown, +		MonitorFactory.add(new MonKeyImp(MonitorFactory.EXCEPTIONS_LABEL, stackTrace, "Exception"), 1);, +	}, +, +++ b/build.gradle, +		optional("com.jamonapi:jamon:2.78"), +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/JamonPerformanceMonitorInterceptor.java, + * Copyright 2002-2014 the original author or authors., +import com.jamonapi.MonKey;, +import com.jamonapi.MonKeyImp;, +import com.jamonapi.utils.Misc;, + * Performance monitor interceptor that uses <b>JAMon</b> library to perform the, + * performance measurement on the intercepted method and output the stats., + * In addition, it tracks/counts exceptions thrown by the intercepted method., + * The stack traces can be viewed in the JAMon web application., + * @author Steve Souza, +		MonKey key = new MonKeyImp(name, name, "ms.");, +, +		Monitor monitor = MonitorFactory.start(key);, +		catch (Throwable ex) {, +			trackException(key, ex);, +			throw ex;, +		}, +	/**, +	 * Count the thrown exception and put the stack trace in the details portion of the key., +	 * This will allow the stack trace to be viewed in the JAMon web application., +	 */, +	protected void trackException(MonKey key, Throwable ex) {, +		String stackTrace = "stackTrace=" + Misc.getExceptionTrace(ex);, +		key.setDetails(stackTrace);, +, +		// Specific exception counter. Example: java.lang.RuntimeException, +		MonitorFactory.add(new MonKeyImp(ex.getClass().getName(), stackTrace, "Exception"), 1);, +, +		// General exception counter which is a total for all exceptions thrown, +		MonitorFactory.add(new MonKeyImp(MonitorFactory.EXCEPTIONS_LABEL, stackTrace, "Exception"), 1);, +	}, +, +++ b/spring-aop/src/test/java/org/springframework/aop/interceptor/JamonPerformanceMonitorInterceptorTests.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.aop.interceptor;, +, +import com.jamonapi.MonitorFactory;, +import org.aopalliance.intercept.MethodInvocation;, +import org.apache.commons.logging.Log;, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Test;, +, +import static org.junit.Assert.*;, +import static org.mockito.BDDMockito.*;, +, +/**]