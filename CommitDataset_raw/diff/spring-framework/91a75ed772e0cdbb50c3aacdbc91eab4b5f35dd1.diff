[+++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, +	private final MediaType defaultMediaType;, +, +		this.defaultMediaType = initDefaultMediaType(this.mediaTypes);, +	}, +, +	private static MediaType initDefaultMediaType(List<MediaType> mediaTypes) {, +		return mediaTypes.stream().filter(MediaType::isConcrete).findFirst().orElse(null);, +, +			MediaType fallback = this.defaultMediaType;, +			MediaType selected = useFallback(mediaType, fallback) ? fallback : mediaType;, +			if (selected != null) {, +				selected = addDefaultCharset(selected, fallback);, +				headers.setContentType(selected);, +, +	private static boolean useFallback(MediaType main, MediaType fallback) {, +		return main == null || !main.isConcrete() ||, +				main.equals(MediaType.APPLICATION_OCTET_STREAM) && fallback != null;, +	}, +, +	private static MediaType addDefaultCharset(MediaType main, MediaType defaultType) {, +		if (main.getCharset() == null && defaultType != null && defaultType.getCharset() != null) {, +			return new MediaType(main, defaultType.getCharset());, +		}, +		return main;, +++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, +	private final MediaType defaultMediaType;, +, +		this.defaultMediaType = initDefaultMediaType(this.mediaTypes);, +	}, +, +	private static MediaType initDefaultMediaType(List<MediaType> mediaTypes) {, +		return mediaTypes.stream().filter(MediaType::isConcrete).findFirst().orElse(null);, +, +			MediaType fallback = this.defaultMediaType;, +			MediaType selected = useFallback(mediaType, fallback) ? fallback : mediaType;, +			if (selected != null) {, +				selected = addDefaultCharset(selected, fallback);, +				headers.setContentType(selected);, +, +	private static boolean useFallback(MediaType main, MediaType fallback) {, +		return main == null || !main.isConcrete() ||, +				main.equals(MediaType.APPLICATION_OCTET_STREAM) && fallback != null;, +	}, +, +	private static MediaType addDefaultCharset(MediaType main, MediaType defaultType) {, +		if (main.getCharset() == null && defaultType != null && defaultType.getCharset() != null) {, +			return new MediaType(main, defaultType.getCharset());, +		}, +		return main;, +++ b/spring-web/src/test/java/org/springframework/http/codec/ResourceRegionHttpMessageWriterTests.java]