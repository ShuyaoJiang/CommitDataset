[+++ b/spring-context/src/main/java/org/springframework/instrument/classloading/ReflectiveLoadTimeWeaver.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.DecoratingClassLoader;, +import org.springframework.core.OverridingClassLoader;, +				this.classLoader.getClass(), ADD_TRANSFORMER_METHOD_NAME, ClassFileTransformer.class);, +				this.classLoader.getClass(), GET_THROWAWAY_CLASS_LOADER_METHOD_NAME);, +			ClassLoader target = (ClassLoader), +					ReflectionUtils.invokeMethod(this.getThrowawayClassLoaderMethod, this.classLoader);, +			return (target instanceof DecoratingClassLoader ? target :, +					new OverridingClassLoader(this.classLoader, target));, +++ b/spring-context/src/main/java/org/springframework/instrument/classloading/ReflectiveLoadTimeWeaver.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.DecoratingClassLoader;, +import org.springframework.core.OverridingClassLoader;, +				this.classLoader.getClass(), ADD_TRANSFORMER_METHOD_NAME, ClassFileTransformer.class);, +				this.classLoader.getClass(), GET_THROWAWAY_CLASS_LOADER_METHOD_NAME);, +			ClassLoader target = (ClassLoader), +					ReflectionUtils.invokeMethod(this.getThrowawayClassLoaderMethod, this.classLoader);, +			return (target instanceof DecoratingClassLoader ? target :, +					new OverridingClassLoader(this.classLoader, target));, +++ b/spring-context/src/main/java/org/springframework/instrument/classloading/glassfish/GlassFishLoadTimeWeaver.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.OverridingClassLoader;, +			return new OverridingClassLoader(this.classLoader, (ClassLoader) this.copyMethod.invoke(this.classLoader));, +++ b/spring-context/src/main/java/org/springframework/instrument/classloading/ReflectiveLoadTimeWeaver.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.DecoratingClassLoader;, +import org.springframework.core.OverridingClassLoader;, +				this.classLoader.getClass(), ADD_TRANSFORMER_METHOD_NAME, ClassFileTransformer.class);, +				this.classLoader.getClass(), GET_THROWAWAY_CLASS_LOADER_METHOD_NAME);, +			ClassLoader target = (ClassLoader), +					ReflectionUtils.invokeMethod(this.getThrowawayClassLoaderMethod, this.classLoader);, +			return (target instanceof DecoratingClassLoader ? target :, +					new OverridingClassLoader(this.classLoader, target));, +++ b/spring-context/src/main/java/org/springframework/instrument/classloading/glassfish/GlassFishLoadTimeWeaver.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.OverridingClassLoader;, +			return new OverridingClassLoader(this.classLoader, (ClassLoader) this.copyMethod.invoke(this.classLoader));, +++ b/spring-context/src/main/java/org/springframework/instrument/classloading/tomcat/TomcatLoadTimeWeaver.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.OverridingClassLoader;, +			return new OverridingClassLoader(this.classLoader, (ClassLoader) this.copyMethod.invoke(this.classLoader));, +++ b/spring-context/src/main/java/org/springframework/instrument/classloading/ReflectiveLoadTimeWeaver.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.DecoratingClassLoader;, +import org.springframework.core.OverridingClassLoader;, +				this.classLoader.getClass(), ADD_TRANSFORMER_METHOD_NAME, ClassFileTransformer.class);, +				this.classLoader.getClass(), GET_THROWAWAY_CLASS_LOADER_METHOD_NAME);, +			ClassLoader target = (ClassLoader), +					ReflectionUtils.invokeMethod(this.getThrowawayClassLoaderMethod, this.classLoader);, +			return (target instanceof DecoratingClassLoader ? target :, +					new OverridingClassLoader(this.classLoader, target));, +++ b/spring-context/src/main/java/org/springframework/instrument/classloading/glassfish/GlassFishLoadTimeWeaver.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.OverridingClassLoader;, +			return new OverridingClassLoader(this.classLoader, (ClassLoader) this.copyMethod.invoke(this.classLoader));, +++ b/spring-context/src/main/java/org/springframework/instrument/classloading/tomcat/TomcatLoadTimeWeaver.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.OverridingClassLoader;, +			return new OverridingClassLoader(this.classLoader, (ClassLoader) this.copyMethod.invoke(this.classLoader));, +++ b/spring-context/src/main/java/org/springframework/instrument/classloading/weblogic/WebLogicLoadTimeWeaver.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.OverridingClassLoader;, +		return new OverridingClassLoader(this.classLoader.getClassLoader(),, +				this.classLoader.getThrowawayClassLoader());, +, +++ b/spring-context/src/main/java/org/springframework/instrument/classloading/ReflectiveLoadTimeWeaver.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.DecoratingClassLoader;, +import org.springframework.core.OverridingClassLoader;, +				this.classLoader.getClass(), ADD_TRANSFORMER_METHOD_NAME, ClassFileTransformer.class);, +				this.classLoader.getClass(), GET_THROWAWAY_CLASS_LOADER_METHOD_NAME);, +			ClassLoader target = (ClassLoader), +					ReflectionUtils.invokeMethod(this.getThrowawayClassLoaderMethod, this.classLoader);, +			return (target instanceof DecoratingClassLoader ? target :, +					new OverridingClassLoader(this.classLoader, target));, +++ b/spring-context/src/main/java/org/springframework/instrument/classloading/glassfish/GlassFishLoadTimeWeaver.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.OverridingClassLoader;, +			return new OverridingClassLoader(this.classLoader, (ClassLoader) this.copyMethod.invoke(this.classLoader));, +++ b/spring-context/src/main/java/org/springframework/instrument/classloading/tomcat/TomcatLoadTimeWeaver.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.OverridingClassLoader;, +			return new OverridingClassLoader(this.classLoader, (ClassLoader) this.copyMethod.invoke(this.classLoader));, +++ b/spring-context/src/main/java/org/springframework/instrument/classloading/weblogic/WebLogicLoadTimeWeaver.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.core.OverridingClassLoader;, +		return new OverridingClassLoader(this.classLoader.getClassLoader(),, +				this.classLoader.getThrowawayClassLoader());, +, +++ b/spring-context/src/main/java/org/springframework/instrument/classloading/websphere/WebSphereClassLoaderAdapter.java, + * Copyright 2002-2016 the original author or authors., + * Reflective wrapper around a WebSphere 7+ class loader. Used to, + * @author Juergen Hoeller, +, +, +, +, +, +]