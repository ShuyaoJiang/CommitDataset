[+++ b/spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java, +		CacheableOperation.Builder opBuilder = new CacheableOperation.Builder();, +		opBuilder.setCacheNames(cacheable.cacheNames());, +		opBuilder.setCondition(cacheable.condition());, +		opBuilder.setUnless(cacheable.unless());, +		opBuilder.setKey(cacheable.key());, +		opBuilder.setKeyGenerator(cacheable.keyGenerator());, +		opBuilder.setCacheManager(cacheable.cacheManager());, +		opBuilder.setCacheResolver(cacheable.cacheResolver());, +		opBuilder.setSync(cacheable.sync());, +		opBuilder.setName(ae.toString());, +		defaultConfig.applyDefault(opBuilder);, +		CacheableOperation op = opBuilder.build();, +		CacheEvictOperation.Builder opBuilder = new CacheEvictOperation.Builder();, +		opBuilder.setCacheNames(cacheEvict.cacheNames());, +		opBuilder.setCondition(cacheEvict.condition());, +		opBuilder.setKey(cacheEvict.key());, +		opBuilder.setKeyGenerator(cacheEvict.keyGenerator());, +		opBuilder.setCacheManager(cacheEvict.cacheManager());, +		opBuilder.setCacheResolver(cacheEvict.cacheResolver());, +		opBuilder.setCacheWide(cacheEvict.allEntries());, +		opBuilder.setBeforeInvocation(cacheEvict.beforeInvocation());, +		opBuilder.setName(ae.toString());, +		defaultConfig.applyDefault(opBuilder);, +		CacheEvictOperation op = opBuilder.build();, +		CachePutOperation.Builder opBuilder = new CachePutOperation.Builder();, +		opBuilder.setCacheNames(cachePut.cacheNames());, +		opBuilder.setCondition(cachePut.condition());, +		opBuilder.setUnless(cachePut.unless());, +		opBuilder.setKey(cachePut.key());, +		opBuilder.setKeyGenerator(cachePut.keyGenerator());, +		opBuilder.setCacheManager(cachePut.cacheManager());, +		opBuilder.setCacheResolver(cachePut.cacheResolver());, +		opBuilder.setName(ae.toString());, +		defaultConfig.applyDefault(opBuilder);, +		CachePutOperation op = opBuilder.build();, +		public void applyDefault(CacheOperation.Builder operation) {, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java, +		CacheableOperation.Builder opBuilder = new CacheableOperation.Builder();, +		opBuilder.setCacheNames(cacheable.cacheNames());, +		opBuilder.setCondition(cacheable.condition());, +		opBuilder.setUnless(cacheable.unless());, +		opBuilder.setKey(cacheable.key());, +		opBuilder.setKeyGenerator(cacheable.keyGenerator());, +		opBuilder.setCacheManager(cacheable.cacheManager());, +		opBuilder.setCacheResolver(cacheable.cacheResolver());, +		opBuilder.setSync(cacheable.sync());, +		opBuilder.setName(ae.toString());, +		defaultConfig.applyDefault(opBuilder);, +		CacheableOperation op = opBuilder.build();, +		CacheEvictOperation.Builder opBuilder = new CacheEvictOperation.Builder();, +		opBuilder.setCacheNames(cacheEvict.cacheNames());, +		opBuilder.setCondition(cacheEvict.condition());, +		opBuilder.setKey(cacheEvict.key());, +		opBuilder.setKeyGenerator(cacheEvict.keyGenerator());, +		opBuilder.setCacheManager(cacheEvict.cacheManager());, +		opBuilder.setCacheResolver(cacheEvict.cacheResolver());, +		opBuilder.setCacheWide(cacheEvict.allEntries());, +		opBuilder.setBeforeInvocation(cacheEvict.beforeInvocation());, +		opBuilder.setName(ae.toString());, +		defaultConfig.applyDefault(opBuilder);, +		CacheEvictOperation op = opBuilder.build();, +		CachePutOperation.Builder opBuilder = new CachePutOperation.Builder();, +		opBuilder.setCacheNames(cachePut.cacheNames());, +		opBuilder.setCondition(cachePut.condition());, +		opBuilder.setUnless(cachePut.unless());, +		opBuilder.setKey(cachePut.key());, +		opBuilder.setKeyGenerator(cachePut.keyGenerator());, +		opBuilder.setCacheManager(cachePut.cacheManager());, +		opBuilder.setCacheResolver(cachePut.cacheResolver());, +		opBuilder.setName(ae.toString());, +		defaultConfig.applyDefault(opBuilder);, +		CachePutOperation op = opBuilder.build();, +		public void applyDefault(CacheOperation.Builder operation) {, +++ b/spring-context/src/main/java/org/springframework/cache/config/CacheAdviceParser.java, +			CacheableOperation.Builder op = prop.merge(opElement, parserContext.getReaderContext(), new CacheableOperation.Builder());, +			col.add(op.build());, +			CacheEvictOperation.Builder op = prop.merge(opElement, parserContext.getReaderContext(), new CacheEvictOperation.Builder());, +			col.add(op.build());, +			CachePutOperation.Builder op = prop.merge(opElement, parserContext.getReaderContext(), new CachePutOperation.Builder());, +			col.add(op.build());, +		<T extends CacheOperation.Builder> T merge(Element element, ReaderContext readerCtx, T op) {, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java, +		CacheableOperation.Builder opBuilder = new CacheableOperation.Builder();, +		opBuilder.setCacheNames(cacheable.cacheNames());, +		opBuilder.setCondition(cacheable.condition());, +		opBuilder.setUnless(cacheable.unless());, +		opBuilder.setKey(cacheable.key());, +		opBuilder.setKeyGenerator(cacheable.keyGenerator());, +		opBuilder.setCacheManager(cacheable.cacheManager());, +		opBuilder.setCacheResolver(cacheable.cacheResolver());, +		opBuilder.setSync(cacheable.sync());, +		opBuilder.setName(ae.toString());, +		defaultConfig.applyDefault(opBuilder);, +		CacheableOperation op = opBuilder.build();, +		CacheEvictOperation.Builder opBuilder = new CacheEvictOperation.Builder();, +		opBuilder.setCacheNames(cacheEvict.cacheNames());, +		opBuilder.setCondition(cacheEvict.condition());, +		opBuilder.setKey(cacheEvict.key());, +		opBuilder.setKeyGenerator(cacheEvict.keyGenerator());]