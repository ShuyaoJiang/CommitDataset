[+++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBean.java, + * As of Spring 4.0, it is compatible with (the quite refactored) Hibernate 4.3 as well., +	private Object jtaTransactionManager;, +, +	private Object multiTenantConnectionProvider;, +, +	private Object currentTenantIdentifierResolver;, +, +	public void setConfigLocations(Resource... configLocations) {, +	public void setMappingResources(String... mappingResources) {, +	public void setMappingLocations(Resource... mappingLocations) {, +	public void setCacheableMappingLocations(Resource... cacheableMappingLocations) {, +	public void setMappingJarLocations(Resource... mappingJarLocations) {, +	public void setMappingDirectoryLocations(Resource... mappingDirectoryLocations) {, +	 * Set the Spring {@link org.springframework.transaction.jta.JtaTransactionManager}, +	 * or the JTA {@link javax.transaction.TransactionManager} to be used with Hibernate,, +	 * if any. Implicitly sets up {@code JtaPlatform} and {@code CMTTransactionStrategy}., +	 * @see LocalSessionFactoryBuilder#setJtaTransactionManager, +	 */, +	public void setJtaTransactionManager(Object jtaTransactionManager) {, +		this.jtaTransactionManager = jtaTransactionManager;, +	}, +, +	/**, +	 * Set a Hibernate 4.1/4.2/4.3 {@code MultiTenantConnectionProvider} to be passed, +	 * on to the SessionFactory: as an instance, a Class, or a String class name., +	 * <p>Note that the package location of the {@code MultiTenantConnectionProvider}, +	 * interface changed between Hibernate 4.2 and 4.3. This method accepts both variants., +	 * @see LocalSessionFactoryBuilder#setMultiTenantConnectionProvider, +	 */, +	public void setMultiTenantConnectionProvider(Object multiTenantConnectionProvider) {, +		this.multiTenantConnectionProvider = multiTenantConnectionProvider;, +	}, +, +	/**, +	 * Set a Hibernate 4.1/4.2/4.3 {@code CurrentTenantIdentifierResolver} to be passed, +	 * on to the SessionFactory: as an instance, a Class, or a String class name., +	 * @see LocalSessionFactoryBuilder#setCurrentTenantIdentifierResolver, +	 */, +	public void setCurrentTenantIdentifierResolver(Object currentTenantIdentifierResolver) {, +		this.currentTenantIdentifierResolver = currentTenantIdentifierResolver;, +	}, +, +	/**, +	public void setAnnotatedClasses(Class<?>... annotatedClasses) {, +	public void setAnnotatedPackages(String... annotatedPackages) {, +		if (this.jtaTransactionManager != null) {, +			sfb.setJtaTransactionManager(this.jtaTransactionManager);, +		}, +, +		if (this.multiTenantConnectionProvider != null) {, +			sfb.setMultiTenantConnectionProvider(this.multiTenantConnectionProvider);, +		}, +, +		if (this.currentTenantIdentifierResolver != null) {, +			sfb.setCurrentTenantIdentifierResolver(this.currentTenantIdentifierResolver);, +		}, +, +++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBean.java, + * As of Spring 4.0, it is compatible with (the quite refactored) Hibernate 4.3 as well., +	private Object jtaTransactionManager;, +, +	private Object multiTenantConnectionProvider;, +, +	private Object currentTenantIdentifierResolver;, +, +	public void setConfigLocations(Resource... configLocations) {, +	public void setMappingResources(String... mappingResources) {, +	public void setMappingLocations(Resource... mappingLocations) {, +	public void setCacheableMappingLocations(Resource... cacheableMappingLocations) {, +	public void setMappingJarLocations(Resource... mappingJarLocations) {, +	public void setMappingDirectoryLocations(Resource... mappingDirectoryLocations) {, +	 * Set the Spring {@link org.springframework.transaction.jta.JtaTransactionManager}, +	 * or the JTA {@link javax.transaction.TransactionManager} to be used with Hibernate,, +	 * if any. Implicitly sets up {@code JtaPlatform} and {@code CMTTransactionStrategy}., +	 * @see LocalSessionFactoryBuilder#setJtaTransactionManager, +	 */, +	public void setJtaTransactionManager(Object jtaTransactionManager) {, +		this.jtaTransactionManager = jtaTransactionManager;, +	}, +, +	/**, +	 * Set a Hibernate 4.1/4.2/4.3 {@code MultiTenantConnectionProvider} to be passed, +	 * on to the SessionFactory: as an instance, a Class, or a String class name., +	 * <p>Note that the package location of the {@code MultiTenantConnectionProvider}, +	 * interface changed between Hibernate 4.2 and 4.3. This method accepts both variants., +	 * @see LocalSessionFactoryBuilder#setMultiTenantConnectionProvider, +	 */, +	public void setMultiTenantConnectionProvider(Object multiTenantConnectionProvider) {, +		this.multiTenantConnectionProvider = multiTenantConnectionProvider;, +	}, +, +	/**, +	 * Set a Hibernate 4.1/4.2/4.3 {@code CurrentTenantIdentifierResolver} to be passed, +	 * on to the SessionFactory: as an instance, a Class, or a String class name., +	 * @see LocalSessionFactoryBuilder#setCurrentTenantIdentifierResolver, +	 */, +	public void setCurrentTenantIdentifierResolver(Object currentTenantIdentifierResolver) {, +		this.currentTenantIdentifierResolver = currentTenantIdentifierResolver;, +	}]