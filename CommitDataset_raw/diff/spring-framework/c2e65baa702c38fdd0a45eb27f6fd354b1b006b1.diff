[+++ b/org.springframework.oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java, +import org.springframework.beans.factory.BeanClassLoaderAware;, +import org.springframework.util.ClassUtils;, +public class XStreamMarshaller extends AbstractMarshaller implements InitializingBean, BeanClassLoaderAware {, +	private ClassLoader classLoader;, +, +	 * Sets an alias/type map, consisting of string aliases mapped to classes. Keys are aliases; values are either, +	 * {@code Class} instances, or String class names., +	 *, +	 * @see XStream#alias(String, Class), +	public void setAliases(Map<String, ?> aliases) throws ClassNotFoundException {, +		for (Map.Entry<String, ?> entry : aliases.entrySet()) {, +			String alias = entry.getKey();, +			Object value = entry.getValue();, +			Class type;, +			if (value instanceof Class) {, +				type = (Class) value;, +			} else if (value instanceof String) {, +				String s = (String) value;, +				type = ClassUtils.forName(s, classLoader);, +			} else {, +				throw new IllegalArgumentException("Unknown value [" + value + "], expected String or Class");, +			}, +			this.getXStream().alias(alias, type);, +		}, +	}, +, +	/**, +	 * Sets a field alias/type map, consiting of field names, +	 * @param aliases, +	 * @throws ClassNotFoundException, +	 * @throws NoSuchFieldException, +	 * @see XStream#aliasField(String, Class, String) , +	 */, +	public void setFieldAliases(Map<String, String> aliases) throws ClassNotFoundException, NoSuchFieldException {, +		for (Map.Entry<String, String> entry : aliases.entrySet()) {, +			String alias = entry.getValue();, +			String field = entry.getKey();, +			int idx = field.lastIndexOf('.');, +			if (idx != -1) {, +				String className = field.substring(0, idx);, +				Class clazz = ClassUtils.forName(className, classLoader);, +				String fieldName = field.substring(idx + 1);, +				this.getXStream().aliasField(alias, clazz, fieldName);, +			} else {, +				throw new IllegalArgumentException("Field name [" + field + "] does not contain '.'");, +			}, +	 * @see XStream#processAnnotations(Class), +	 * @see XStream#processAnnotations(Class[]), +	public void setBeanClassLoader(ClassLoader classLoader) {, +		this.classLoader = classLoader;, +	}, +, +++ b/org.springframework.oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java, +import org.springframework.beans.factory.BeanClassLoaderAware;, +import org.springframework.util.ClassUtils;, +public class XStreamMarshaller extends AbstractMarshaller implements InitializingBean, BeanClassLoaderAware {, +	private ClassLoader classLoader;, +, +	 * Sets an alias/type map, consisting of string aliases mapped to classes. Keys are aliases; values are either, +	 * {@code Class} instances, or String class names., +	 *, +	 * @see XStream#alias(String, Class), +	public void setAliases(Map<String, ?> aliases) throws ClassNotFoundException {, +		for (Map.Entry<String, ?> entry : aliases.entrySet()) {, +			String alias = entry.getKey();, +			Object value = entry.getValue();, +			Class type;, +			if (value instanceof Class) {, +				type = (Class) value;, +			} else if (value instanceof String) {, +				String s = (String) value;, +				type = ClassUtils.forName(s, classLoader);, +			} else {, +				throw new IllegalArgumentException("Unknown value [" + value + "], expected String or Class");, +			}, +			this.getXStream().alias(alias, type);, +		}, +	}, +, +	/**, +	 * Sets a field alias/type map, consiting of field names, +	 * @param aliases, +	 * @throws ClassNotFoundException, +	 * @throws NoSuchFieldException, +	 * @see XStream#aliasField(String, Class, String) , +	 */, +	public void setFieldAliases(Map<String, String> aliases) throws ClassNotFoundException, NoSuchFieldException {, +		for (Map.Entry<String, String> entry : aliases.entrySet()) {, +			String alias = entry.getValue();, +			String field = entry.getKey();, +			int idx = field.lastIndexOf('.');, +			if (idx != -1) {, +				String className = field.substring(0, idx);, +				Class clazz = ClassUtils.forName(className, classLoader);, +				String fieldName = field.substring(idx + 1);, +				this.getXStream().aliasField(alias, clazz, fieldName);, +			} else {, +				throw new IllegalArgumentException("Field name [" + field + "] does not contain '.'");, +			}]