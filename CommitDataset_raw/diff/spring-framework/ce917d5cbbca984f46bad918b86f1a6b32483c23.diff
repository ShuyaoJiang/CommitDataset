[+++ b/spring-context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, +		Class<?> annoType = GenericTypeResolver.resolveTypeArgument(getClass(), AdviceModeImportSelector.class);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, +		Class<?> annoType = GenericTypeResolver.resolveTypeArgument(getClass(), AdviceModeImportSelector.class);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AutoProxyRegistrar.java, +, + * @see EnableAspectJAutoProxy, +			if (mode != null && proxyTargetClass != null && mode.getClass().equals(AdviceMode.class) &&, +					proxyTargetClass.getClass().equals(Boolean.class)) {, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, +		Class<?> annoType = GenericTypeResolver.resolveTypeArgument(getClass(), AdviceModeImportSelector.class);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AutoProxyRegistrar.java, +, + * @see EnableAspectJAutoProxy, +			if (mode != null && proxyTargetClass != null && mode.getClass().equals(AdviceMode.class) &&, +					proxyTargetClass.getClass().equals(Boolean.class)) {, +, +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/EnableTransactionManagement.java, + * Copyright 2002-2013 the original author or authors., +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, +		Class<?> annoType = GenericTypeResolver.resolveTypeArgument(getClass(), AdviceModeImportSelector.class);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AutoProxyRegistrar.java, +, + * @see EnableAspectJAutoProxy, +			if (mode != null && proxyTargetClass != null && mode.getClass().equals(AdviceMode.class) &&, +					proxyTargetClass.getClass().equals(Boolean.class)) {, +, +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/EnableTransactionManagement.java, + * Copyright 2002-2013 the original author or authors., +, +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/ProxyTransactionManagementConfiguration.java, + * Copyright 2002-2013 the original author or authors., +		BeanFactoryTransactionAttributeSourceAdvisor advisor = new BeanFactoryTransactionAttributeSourceAdvisor();, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, +		Class<?> annoType = GenericTypeResolver.resolveTypeArgument(getClass(), AdviceModeImportSelector.class);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AutoProxyRegistrar.java, +, + * @see EnableAspectJAutoProxy, +			if (mode != null && proxyTargetClass != null && mode.getClass().equals(AdviceMode.class) &&, +					proxyTargetClass.getClass().equals(Boolean.class)) {, +, +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/EnableTransactionManagement.java, + * Copyright 2002-2013 the original author or authors., +, +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/ProxyTransactionManagementConfiguration.java, + * Copyright 2002-2013 the original author or authors., +		BeanFactoryTransactionAttributeSourceAdvisor advisor = new BeanFactoryTransactionAttributeSourceAdvisor();, +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/TransactionManagementConfigurationSelector.java, +public class TransactionManagementConfigurationSelector extends AdviceModeImportSelector<EnableTransactionManagement> {]