[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +	 * Push the bytecode to load the EvaluationContext (the second parameter passed to, +	 * the compiled expression method)., +	 * @param mv the visitor into which the load instruction should be inserted, +	 */, +	public void loadEvaluationContext(MethodVisitor mv) {, +		mv.visitVarInsn(ALOAD, 2);, +	}, +, +	/**, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +	 * Push the bytecode to load the EvaluationContext (the second parameter passed to, +	 * the compiled expression method)., +	 * @param mv the visitor into which the load instruction should be inserted, +	 */, +	public void loadEvaluationContext(MethodVisitor mv) {, +		mv.visitVarInsn(ALOAD, 2);, +	}, +, +	/**, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpEQ.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.expression.EvaluationContext;, +	public BooleanTypedValue getValueInternal(ExpressionState state), +			throws EvaluationException {, +		return BooleanTypedValue.forValue(, +				equalityCheck(state.getEvaluationContext(), left, right));, +		DescriptorComparison dc = DescriptorComparison.checkNumericCompatibility(leftDesc,, +				rightDesc, this.leftActualDescriptor, this.rightActualDescriptor);, +		cf.loadEvaluationContext(mv);, +		cf.enterCompilationScope();, +		cf.exitCompilationScope();, +		if (leftPrim) {, +			CodeFlow.insertBoxIfNecessary(mv, leftDesc.charAt(0));, +, +		String operatorClassName = Operator.class.getName().replace('.', '/');, +		String evaluationContextClassName = EvaluationContext.class.getName().replace('.',, +				'/');, +		mv.visitMethodInsn(INVOKESTATIC, operatorClassName, "equalityCheck", "(L", +				+ evaluationContextClassName + ";Ljava/lang/Object;Ljava/lang/Object;)Z",, +				false);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +	 * Push the bytecode to load the EvaluationContext (the second parameter passed to, +	 * the compiled expression method)., +	 * @param mv the visitor into which the load instruction should be inserted, +	 */, +	public void loadEvaluationContext(MethodVisitor mv) {, +		mv.visitVarInsn(ALOAD, 2);, +	}, +, +	/**, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpEQ.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.expression.EvaluationContext;, +	public BooleanTypedValue getValueInternal(ExpressionState state), +			throws EvaluationException {, +		return BooleanTypedValue.forValue(, +				equalityCheck(state.getEvaluationContext(), left, right));, +		DescriptorComparison dc = DescriptorComparison.checkNumericCompatibility(leftDesc,, +				rightDesc, this.leftActualDescriptor, this.rightActualDescriptor);, +		cf.loadEvaluationContext(mv);, +		cf.enterCompilationScope();, +		cf.exitCompilationScope();, +		if (leftPrim) {, +			CodeFlow.insertBoxIfNecessary(mv, leftDesc.charAt(0));, +, +		String operatorClassName = Operator.class.getName().replace('.', '/');, +		String evaluationContextClassName = EvaluationContext.class.getName().replace('.',, +				'/');, +		mv.visitMethodInsn(INVOKESTATIC, operatorClassName, "equalityCheck", "(L", +				+ evaluationContextClassName + ";Ljava/lang/Object;Ljava/lang/Object;)Z",, +				false);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpNE.java, +import org.springframework.expression.EvaluationContext;, +	public BooleanTypedValue getValueInternal(ExpressionState state), +			throws EvaluationException {, +		return BooleanTypedValue.forValue(, +				!equalityCheck(state.getEvaluationContext(), left, right));, +		DescriptorComparison dc = DescriptorComparison.checkNumericCompatibility(leftDesc,, +				rightDesc, this.leftActualDescriptor, this.rightActualDescriptor);, +		cf.loadEvaluationContext(mv);, +		cf.enterCompilationScope();, +		cf.exitCompilationScope();, +		if (leftPrim) {, +			CodeFlow.insertBoxIfNecessary(mv, leftDesc.charAt(0));, +		if (rightPrim) {, +			CodeFlow.insertBoxIfNecessary(mv, rightDesc.charAt(0));, +, +		String operatorClassName = Operator.class.getName().replace('.', '/');, +		String evaluationContextClassName = EvaluationContext.class.getName().replace('.',, +				'/');, +		mv.visitMethodInsn(INVOKESTATIC, operatorClassName, "equalityCheck", "(L", +				+ evaluationContextClassName + ";Ljava/lang/Object;Ljava/lang/Object;)Z",, +				false);, +, +		// Invert the boolean, +		Label notZero = new Label();, +		Label end = new Label();, +		mv.visitJumpInsn(IFNE, notZero);, +		mv.visitJumpInsn(GOTO, end);]