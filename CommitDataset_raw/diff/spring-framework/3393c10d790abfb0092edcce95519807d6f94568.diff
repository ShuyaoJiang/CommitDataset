[+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * Return the language ranges from the {@literal "Accept-Language"} header., +	 * <p>If you only need sorted, preferred locales only use, +	 * {@link #getAcceptLanguageAsLocales()} or if you need to filter based on, +	 * a list of supported locales you can pass the returned list to, +		return value != null ? Locale.LanguageRange.parse(value) : Collections.emptyList();, +	 * Variant of {@link #setAcceptLanguage(List)} using {@link Locale}'s., +	public void setAcceptLanguageAsLocales(List<Locale> locales) {, +		setAcceptLanguage(locales.stream(), +				.map(locale -> new Locale.LanguageRange(locale.toLanguageTag())), +				.collect(Collectors.toList()));, +	 * {@link java.util.Locale.LanguageRange} to a {@link Locale}., +	 * @return the locales or an empty list, +	public List<Locale> getAcceptLanguageAsLocales() {, +			return Collections.emptyList();, +				.collect(Collectors.toList());, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * Return the language ranges from the {@literal "Accept-Language"} header., +	 * <p>If you only need sorted, preferred locales only use, +	 * {@link #getAcceptLanguageAsLocales()} or if you need to filter based on, +	 * a list of supported locales you can pass the returned list to, +		return value != null ? Locale.LanguageRange.parse(value) : Collections.emptyList();, +	 * Variant of {@link #setAcceptLanguage(List)} using {@link Locale}'s., +	public void setAcceptLanguageAsLocales(List<Locale> locales) {, +		setAcceptLanguage(locales.stream(), +				.map(locale -> new Locale.LanguageRange(locale.toLanguageTag())), +				.collect(Collectors.toList()));, +	 * {@link java.util.Locale.LanguageRange} to a {@link Locale}., +	 * @return the locales or an empty list, +	public List<Locale> getAcceptLanguageAsLocales() {, +			return Collections.emptyList();, +				.collect(Collectors.toList());, +++ b/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java, +import static org.hamcrest.Matchers.is;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.assertTrue;, +		assertEquals(Locale.forLanguageTag("fr-ch"), headers.getAcceptLanguageAsLocales().get(0));, +		headers.setAcceptLanguageAsLocales(Collections.singletonList(Locale.FRANCE));, +		assertEquals(Locale.FRANCE, headers.getAcceptLanguageAsLocales().get(0));, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * Return the language ranges from the {@literal "Accept-Language"} header., +	 * <p>If you only need sorted, preferred locales only use, +	 * {@link #getAcceptLanguageAsLocales()} or if you need to filter based on, +	 * a list of supported locales you can pass the returned list to, +		return value != null ? Locale.LanguageRange.parse(value) : Collections.emptyList();, +	 * Variant of {@link #setAcceptLanguage(List)} using {@link Locale}'s., +	public void setAcceptLanguageAsLocales(List<Locale> locales) {, +		setAcceptLanguage(locales.stream(), +				.map(locale -> new Locale.LanguageRange(locale.toLanguageTag())), +				.collect(Collectors.toList()));, +	 * {@link java.util.Locale.LanguageRange} to a {@link Locale}., +	 * @return the locales or an empty list, +	public List<Locale> getAcceptLanguageAsLocales() {, +			return Collections.emptyList();, +				.collect(Collectors.toList());, +++ b/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java, +import static org.hamcrest.Matchers.is;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.assertTrue;, +		assertEquals(Locale.forLanguageTag("fr-ch"), headers.getAcceptLanguageAsLocales().get(0));, +		headers.setAcceptLanguageAsLocales(Collections.singletonList(Locale.FRANCE));, +		assertEquals(Locale.FRANCE, headers.getAcceptLanguageAsLocales().get(0));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/RequestContext.java, +		List<Locale> locales = exchange.getRequest().getHeaders().getAcceptLanguageAsLocales();, +		this.locale = locales.isEmpty() ? Locale.getDefault() : locales.get(0);, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * Return the language ranges from the {@literal "Accept-Language"} header., +	 * <p>If you only need sorted, preferred locales only use, +	 * {@link #getAcceptLanguageAsLocales()} or if you need to filter based on, +	 * a list of supported locales you can pass the returned list to, +		return value != null ? Locale.LanguageRange.parse(value) : Collections.emptyList();, +	 * Variant of {@link #setAcceptLanguage(List)} using {@link Locale}'s., +	public void setAcceptLanguageAsLocales(List<Locale> locales) {, +		setAcceptLanguage(locales.stream(), +				.map(locale -> new Locale.LanguageRange(locale.toLanguageTag())), +				.collect(Collectors.toList()));, +	 * {@link java.util.Locale.LanguageRange} to a {@link Locale}., +	 * @return the locales or an empty list, +	public List<Locale> getAcceptLanguageAsLocales() {, +			return Collections.emptyList();, +				.collect(Collectors.toList());, +++ b/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java, +import static org.hamcrest.Matchers.is;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.assertTrue;, +		assertEquals(Locale.forLanguageTag("fr-ch"), headers.getAcceptLanguageAsLocales().get(0));, +		headers.setAcceptLanguageAsLocales(Collections.singletonList(Locale.FRANCE));, +		assertEquals(Locale.FRANCE, headers.getAcceptLanguageAsLocales().get(0));]