[+++ b/spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java, +++ b/spring-context/src/test/java/org/springframework/cache/CacheReproTests.java, +import java.util.Collection;, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +import org.springframework.cache.annotation.CachingConfigurerSupport;, +import org.springframework.cache.interceptor.AbstractCacheResolver;, +import org.springframework.cache.interceptor.CacheOperationInvocationContext;, +import org.springframework.cache.interceptor.CacheResolver;, +	@Rule, +	public final ExpectedException thrown = ExpectedException.none();, +, +	@Test, +	public void spr13081ConfigNoCacheNameIsRequired() {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Spr13081Config.class);, +		MyCacheResolver cacheResolver = context.getBean(MyCacheResolver.class);, +		Spr13081Service bean = context.getBean(Spr13081Service.class);, +		assertNull(cacheResolver.getCache("foo").get("foo"));, +		Object result = bean.getSimple("foo"); // cache name = id, +		assertEquals(result, cacheResolver.getCache("foo").get("foo").get());, +	}, +, +	@Test, +	public void spr13081ConfigFailIfCacheResolverReturnsNullCacheName() {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Spr13081Config.class);, +		Spr13081Service bean = context.getBean(Spr13081Service.class);, +, +, +		thrown.expect(IllegalStateException.class);, +		thrown.expectMessage(MyCacheResolver.class.getName());, +		bean.getSimple(null);, +	}, +, +		List<String> single(int id);, +		List<String> multiple(int id);, +	@Configuration, +	@EnableCaching, +	public static class Spr13081Config extends CachingConfigurerSupport {, +, +		@Bean, +		@Override, +		public CacheResolver cacheResolver() {, +			return new MyCacheResolver();, +		}, +, +		@Bean, +		public Spr13081Service service() {, +			return new Spr13081Service();, +		}, +, +	}, +, +	public static class MyCacheResolver extends AbstractCacheResolver {, +, +		public MyCacheResolver() {, +			super(new ConcurrentMapCacheManager());, +		}, +, +		@Override, +		protected Collection<String> getCacheNames(CacheOperationInvocationContext<?> context) {, +			String cacheName = (String) context.getArgs()[0];, +			if (cacheName != null) {, +				return Collections.singleton(cacheName);, +			}, +			return null;, +		}, +, +		public Cache getCache(String name) {, +			return getCacheManager().getCache(name);, +		}, +	}, +, +	public static class Spr13081Service {, +, +		@Cacheable, +		public Object getSimple(String cacheName) {, +			return new Object();, +		}, +	}, +, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java, +++ b/spring-context/src/test/java/org/springframework/cache/CacheReproTests.java, +import java.util.Collection;, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +import org.springframework.cache.annotation.CachingConfigurerSupport;, +import org.springframework.cache.interceptor.AbstractCacheResolver;, +import org.springframework.cache.interceptor.CacheOperationInvocationContext;, +import org.springframework.cache.interceptor.CacheResolver;, +	@Rule, +	public final ExpectedException thrown = ExpectedException.none();, +, +	@Test, +	public void spr13081ConfigNoCacheNameIsRequired() {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Spr13081Config.class);, +		MyCacheResolver cacheResolver = context.getBean(MyCacheResolver.class);, +		Spr13081Service bean = context.getBean(Spr13081Service.class);, +		assertNull(cacheResolver.getCache("foo").get("foo"));, +		Object result = bean.getSimple("foo"); // cache name = id]