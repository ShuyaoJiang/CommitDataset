[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultPathSegmentContainer.java, +import java.util.stream.Collectors;, +	private DefaultPathSegmentContainer(String path, List<PathSegment> segments) {, +	static PathSegmentContainer subPath(PathSegmentContainer container, int fromIndex, int toIndex) {, +		List<PathSegment> segments = container.pathSegments();, +		if (fromIndex == 0 && toIndex == segments.size()) {, +			return container;, +		}, +		Assert.isTrue(fromIndex < toIndex, "fromIndex: " + fromIndex + " should be < toIndex " + toIndex);, +		Assert.isTrue(fromIndex >= 0 && fromIndex < segments.size(), "Invalid fromIndex: " + fromIndex);, +		Assert.isTrue(toIndex >= 0 && toIndex <= segments.size(), "Invalid toIndex: " + toIndex);, +, +		List<PathSegment> subList = segments.subList(fromIndex, toIndex);, +		String prefix = fromIndex > 0 || container.isAbsolute() ? "/" : "";, +		String suffix = toIndex == segments.size() && container.hasTrailingSlash() ? "/" : "";, +		String path = subList.stream().map(PathSegment::value).collect(Collectors.joining(prefix, "/", suffix));, +		return new DefaultPathSegmentContainer(path, subList);, +	}, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultPathSegmentContainer.java, +import java.util.stream.Collectors;, +	private DefaultPathSegmentContainer(String path, List<PathSegment> segments) {, +	static PathSegmentContainer subPath(PathSegmentContainer container, int fromIndex, int toIndex) {, +		List<PathSegment> segments = container.pathSegments();, +		if (fromIndex == 0 && toIndex == segments.size()) {, +			return container;, +		}, +		Assert.isTrue(fromIndex < toIndex, "fromIndex: " + fromIndex + " should be < toIndex " + toIndex);, +		Assert.isTrue(fromIndex >= 0 && fromIndex < segments.size(), "Invalid fromIndex: " + fromIndex);, +		Assert.isTrue(toIndex >= 0 && toIndex <= segments.size(), "Invalid toIndex: " + toIndex);, +, +		List<PathSegment> subList = segments.subList(fromIndex, toIndex);, +		String prefix = fromIndex > 0 || container.isAbsolute() ? "/" : "";, +		String suffix = toIndex == segments.size() && container.hasTrailingSlash() ? "/" : "";, +		String path = subList.stream().map(PathSegment::value).collect(Collectors.joining(prefix, "/", suffix));, +		return new DefaultPathSegmentContainer(path, subList);, +	}, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultRequestPath.java, +		this.pathWithinApplication = extractPathWithinApplication(this.fullPath, this.contextPath);, +		this.pathWithinApplication = extractPathWithinApplication(this.fullPath, this.contextPath);, +		for (int i=0; i < path.pathSegments().size(); i++) {, +			PathSegment pathSegment = path.pathSegments().get(i);, +			counter += 1; // for slash separators, +				return DefaultPathSegmentContainer.subPath(path, 0, i + 1);, +	private static PathSegmentContainer extractPathWithinApplication(PathSegmentContainer fullPath,, +		return PathSegmentContainer.subPath(fullPath, contextPath.pathSegments().size());, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultPathSegmentContainer.java, +import java.util.stream.Collectors;, +	private DefaultPathSegmentContainer(String path, List<PathSegment> segments) {, +	static PathSegmentContainer subPath(PathSegmentContainer container, int fromIndex, int toIndex) {, +		List<PathSegment> segments = container.pathSegments();, +		if (fromIndex == 0 && toIndex == segments.size()) {, +			return container;, +		}, +		Assert.isTrue(fromIndex < toIndex, "fromIndex: " + fromIndex + " should be < toIndex " + toIndex);, +		Assert.isTrue(fromIndex >= 0 && fromIndex < segments.size(), "Invalid fromIndex: " + fromIndex);, +		Assert.isTrue(toIndex >= 0 && toIndex <= segments.size(), "Invalid toIndex: " + toIndex);, +, +		List<PathSegment> subList = segments.subList(fromIndex, toIndex);, +		String prefix = fromIndex > 0 || container.isAbsolute() ? "/" : "";, +		String suffix = toIndex == segments.size() && container.hasTrailingSlash() ? "/" : "";, +		String path = subList.stream().map(PathSegment::value).collect(Collectors.joining(prefix, "/", suffix));, +		return new DefaultPathSegmentContainer(path, subList);, +	}, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultRequestPath.java, +		this.pathWithinApplication = extractPathWithinApplication(this.fullPath, this.contextPath);, +		this.pathWithinApplication = extractPathWithinApplication(this.fullPath, this.contextPath);, +		for (int i=0; i < path.pathSegments().size(); i++) {, +			PathSegment pathSegment = path.pathSegments().get(i);, +			counter += 1; // for slash separators, +				return DefaultPathSegmentContainer.subPath(path, 0, i + 1);, +	private static PathSegmentContainer extractPathWithinApplication(PathSegmentContainer fullPath,, +		return PathSegmentContainer.subPath(fullPath, contextPath.pathSegments().size());, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/PathSegmentContainer.java, +	/**, +	 * Extract a sub-path starting at the given offset into the path segment list., +	 * @param path the path to extract from, +	 * @param pathSegmentIndex the start index (inclusive), +	 * @return the sub-path, +	 */, +	static PathSegmentContainer subPath(PathSegmentContainer path, int pathSegmentIndex) {, +		return DefaultPathSegmentContainer.subPath(path, pathSegmentIndex, path.pathSegments().size());, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultPathSegmentContainer.java, +import java.util.stream.Collectors;, +	private DefaultPathSegmentContainer(String path, List<PathSegment> segments) {, +	static PathSegmentContainer subPath(PathSegmentContainer container, int fromIndex, int toIndex) {, +		List<PathSegment> segments = container.pathSegments();, +		if (fromIndex == 0 && toIndex == segments.size()) {, +			return container;, +		}, +		Assert.isTrue(fromIndex < toIndex, "fromIndex: " + fromIndex + " should be < toIndex " + toIndex);, +		Assert.isTrue(fromIndex >= 0 && fromIndex < segments.size(), "Invalid fromIndex: " + fromIndex);, +		Assert.isTrue(toIndex >= 0 && toIndex <= segments.size(), "Invalid toIndex: " + toIndex);, +, +		List<PathSegment> subList = segments.subList(fromIndex, toIndex);, +		String prefix = fromIndex > 0 || container.isAbsolute() ? "/" : "";, +		String suffix = toIndex == segments.size() && container.hasTrailingSlash() ? "/" : "";, +		String path = subList.stream().map(PathSegment::value).collect(Collectors.joining(prefix, "/", suffix));, +		return new DefaultPathSegmentContainer(path, subList);]