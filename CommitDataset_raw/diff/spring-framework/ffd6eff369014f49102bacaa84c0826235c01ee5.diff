[+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +import org.springframework.scheduling.config.FixedDelayTask;, +import org.springframework.scheduling.config.FixedRateTask;, +import org.springframework.scheduling.config.ScheduledTaskHolder;, +		implements ScheduledTaskHolder, MergedBeanDefinitionPostProcessor, DestructionAwareBeanPostProcessor,, +				tasks.add(this.registrar.scheduleFixedDelayTask(new FixedDelayTask(runnable, fixedDelay, initialDelay)));, +					tasks.add(this.registrar.scheduleFixedDelayTask(new FixedDelayTask(runnable, fixedDelay, initialDelay)));, +				tasks.add(this.registrar.scheduleFixedRateTask(new FixedRateTask(runnable, fixedRate, initialDelay)));, +					tasks.add(this.registrar.scheduleFixedRateTask(new FixedRateTask(runnable, fixedRate, initialDelay)));, +	/**, +	 * Return all currently scheduled tasks, from {@link Scheduled} methods, +	 * as well as from programmatic {@link SchedulingConfigurer} interaction., +	 * @since 5.0.2, +	 */, +	@Override, +	public Set<ScheduledTask> getScheduledTasks() {, +		Set<ScheduledTask> result = new LinkedHashSet<>();, +		synchronized (this.scheduledTasks) {, +			Collection<Set<ScheduledTask>> allTasks = this.scheduledTasks.values();, +			for (Set<ScheduledTask> tasks : allTasks) {, +				result.addAll(tasks);, +			}, +		}, +		result.addAll(this.registrar.getScheduledTasks());, +		return result;, +	}, +, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +import org.springframework.scheduling.config.FixedDelayTask;, +import org.springframework.scheduling.config.FixedRateTask;, +import org.springframework.scheduling.config.ScheduledTaskHolder;, +		implements ScheduledTaskHolder, MergedBeanDefinitionPostProcessor, DestructionAwareBeanPostProcessor,, +				tasks.add(this.registrar.scheduleFixedDelayTask(new FixedDelayTask(runnable, fixedDelay, initialDelay)));, +					tasks.add(this.registrar.scheduleFixedDelayTask(new FixedDelayTask(runnable, fixedDelay, initialDelay)));, +				tasks.add(this.registrar.scheduleFixedRateTask(new FixedRateTask(runnable, fixedRate, initialDelay)));, +					tasks.add(this.registrar.scheduleFixedRateTask(new FixedRateTask(runnable, fixedRate, initialDelay)));, +	/**, +	 * Return all currently scheduled tasks, from {@link Scheduled} methods, +	 * as well as from programmatic {@link SchedulingConfigurer} interaction., +	 * @since 5.0.2, +	 */, +	@Override, +	public Set<ScheduledTask> getScheduledTasks() {, +		Set<ScheduledTask> result = new LinkedHashSet<>();, +		synchronized (this.scheduledTasks) {, +			Collection<Set<ScheduledTask>> allTasks = this.scheduledTasks.values();, +			for (Set<ScheduledTask> tasks : allTasks) {, +				result.addAll(tasks);, +			}, +		}, +		result.addAll(this.registrar.getScheduledTasks());, +		return result;, +	}, +, +++ b/spring-context/src/main/java/org/springframework/scheduling/config/CronTask.java, + * Copyright 2002-2017 the original author or authors., + * @see ScheduledTaskRegistrar#addCronTask(CronTask), +	 * @param expression the cron expression defining when the task should be executed, +	/**, +	 * Return the cron expression defining when the task should be executed., +	 */, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +import org.springframework.scheduling.config.FixedDelayTask;, +import org.springframework.scheduling.config.FixedRateTask;, +import org.springframework.scheduling.config.ScheduledTaskHolder;, +		implements ScheduledTaskHolder, MergedBeanDefinitionPostProcessor, DestructionAwareBeanPostProcessor,, +				tasks.add(this.registrar.scheduleFixedDelayTask(new FixedDelayTask(runnable, fixedDelay, initialDelay)));, +					tasks.add(this.registrar.scheduleFixedDelayTask(new FixedDelayTask(runnable, fixedDelay, initialDelay)));, +				tasks.add(this.registrar.scheduleFixedRateTask(new FixedRateTask(runnable, fixedRate, initialDelay)));, +					tasks.add(this.registrar.scheduleFixedRateTask(new FixedRateTask(runnable, fixedRate, initialDelay)));, +	/**, +	 * Return all currently scheduled tasks, from {@link Scheduled} methods, +	 * as well as from programmatic {@link SchedulingConfigurer} interaction., +	 * @since 5.0.2, +	 */, +	@Override, +	public Set<ScheduledTask> getScheduledTasks() {, +		Set<ScheduledTask> result = new LinkedHashSet<>();, +		synchronized (this.scheduledTasks) {, +			Collection<Set<ScheduledTask>> allTasks = this.scheduledTasks.values();, +			for (Set<ScheduledTask> tasks : allTasks) {, +				result.addAll(tasks);, +			}, +		}, +		result.addAll(this.registrar.getScheduledTasks());, +		return result;, +	}, +, +++ b/spring-context/src/main/java/org/springframework/scheduling/config/CronTask.java, + * Copyright 2002-2017 the original author or authors., + * @see ScheduledTaskRegistrar#addCronTask(CronTask), +	 * @param expression the cron expression defining when the task should be executed, +	/**, +	 * Return the cron expression defining when the task should be executed., +	 */, +++ b/spring-context/src/main/java/org/springframework/scheduling/config/FixedDelayTask.java, +/*, + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");]