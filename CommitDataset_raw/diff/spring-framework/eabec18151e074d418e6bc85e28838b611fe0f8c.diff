[+++ /dev/null, +++ /dev/null, +++ b/org.springframework.testsuite/src/test/java/org/springframework/aop/aspectj/AdviceBindingTestAspect.java, + * Aspect used as part of before before advice binding tests and, + * serves as base class for a number of more specialized test aspects., + * @author Chris Beams, +class AdviceBindingTestAspect {, +++ /dev/null, +++ b/org.springframework.testsuite/src/test/java/org/springframework/aop/aspectj/AdviceBindingTestAspect.java, + * Aspect used as part of before before advice binding tests and, + * serves as base class for a number of more specialized test aspects., + * @author Chris Beams, +class AdviceBindingTestAspect {, +++ b/org.springframework.testsuite/src/test/java/org/springframework/aop/aspectj/AfterAdviceBindingTests.java, +import static org.easymock.EasyMock.*;, +import static org.junit.Assert.assertTrue;, +import org.junit.Before;, +import org.junit.Test;, +import org.springframework.aop.framework.Advised;, +import org.springframework.aop.support.AopUtils;, +import org.springframework.beans.ITestBean;, +import org.springframework.beans.TestBean;, +import org.springframework.context.support.ClassPathXmlApplicationContext;, + * @author Chris Beams, +public final class AfterAdviceBindingTests {, +	private ITestBean testBeanProxy;, +	private TestBean testBeanTarget;, +	@Before, +	public void setUp() throws Exception {, +		ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext("after-advice-tests.xml", getClass());, +		AdviceBindingTestAspect afterAdviceAspect = (AdviceBindingTestAspect) ctx.getBean("testAspect");, +		testBeanProxy = (ITestBean) ctx.getBean("testBean");, +		assertTrue(AopUtils.isAopProxy(testBeanProxy));, +		, +		// we need the real target too, not just the proxy..., +		testBeanTarget = (TestBean) ((Advised) testBeanProxy).getTargetSource().getTarget();, +		, +		mockCollaborator = createNiceMock(AdviceBindingCollaborator.class);, +	@Test, +		replay(mockCollaborator);, +		verify(mockCollaborator);, +	@Test, +		replay(mockCollaborator);, +		verify(mockCollaborator);, +	@Test, +		replay(mockCollaborator);, +		verify(mockCollaborator);, +	@Test, +		replay(mockCollaborator);, +		verify(mockCollaborator);, +	@Test, +		replay(mockCollaborator);, +		verify(mockCollaborator);, +	@Test, +		replay(mockCollaborator);, +		verify(mockCollaborator);, +++ /dev/null, +++ b/org.springframework.testsuite/src/test/java/org/springframework/aop/aspectj/AdviceBindingTestAspect.java, + * Aspect used as part of before before advice binding tests and, + * serves as base class for a number of more specialized test aspects., + * @author Chris Beams, +class AdviceBindingTestAspect {, +++ b/org.springframework.testsuite/src/test/java/org/springframework/aop/aspectj/AfterAdviceBindingTests.java, +import static org.easymock.EasyMock.*;, +import static org.junit.Assert.assertTrue;, +import org.junit.Before;, +import org.junit.Test;, +import org.springframework.aop.framework.Advised;, +import org.springframework.aop.support.AopUtils;, +import org.springframework.beans.ITestBean;, +import org.springframework.beans.TestBean;, +import org.springframework.context.support.ClassPathXmlApplicationContext;, + * @author Chris Beams, +public final class AfterAdviceBindingTests {, +	private ITestBean testBeanProxy;, +	private TestBean testBeanTarget;, +	@Before, +	public void setUp() throws Exception {, +		ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext("after-advice-tests.xml", getClass());, +		AdviceBindingTestAspect afterAdviceAspect = (AdviceBindingTestAspect) ctx.getBean("testAspect");, +		testBeanProxy = (ITestBean) ctx.getBean("testBean");, +		assertTrue(AopUtils.isAopProxy(testBeanProxy));, +		, +		// we need the real target too, not just the proxy..., +		testBeanTarget = (TestBean) ((Advised) testBeanProxy).getTargetSource().getTarget();, +		, +		mockCollaborator = createNiceMock(AdviceBindingCollaborator.class);, +	@Test, +		replay(mockCollaborator);, +		verify(mockCollaborator);, +	@Test, +		replay(mockCollaborator);, +		verify(mockCollaborator);, +	@Test, +		replay(mockCollaborator);, +		verify(mockCollaborator);, +	@Test, +		replay(mockCollaborator);, +		verify(mockCollaborator);, +	@Test]