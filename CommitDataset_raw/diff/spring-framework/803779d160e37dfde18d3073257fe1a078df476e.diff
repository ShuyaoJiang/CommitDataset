[+++ b/spring-web/src/main/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolver.java, + * Copyright 2002-2013 the original author or authors., +import java.util.ArrayList;, +		else if (isPartCollection(parameter)) {, +			assertIsMultipartRequest(servletRequest);, +			arg = new ArrayList(servletRequest.getParts());, +		}, +		Class<?> collectionType = getCollectionParameterType(parameter);, +		return ((collectionType != null) && collectionType.equals(MultipartFile.class));, +	}, +, +	private boolean isPartCollection(MethodParameter parameter) {, +		Class<?> collectionType = getCollectionParameterType(parameter);, +		return ((collectionType != null) && "javax.servlet.http.Part".equals(collectionType.getName()));, +	}, +, +	private Class<?> getCollectionParameterType(MethodParameter parameter) {, +			if (valueType != null) {, +				return valueType;, +		return null;, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolver.java, + * Copyright 2002-2013 the original author or authors., +import java.util.ArrayList;, +		else if (isPartCollection(parameter)) {, +			assertIsMultipartRequest(servletRequest);, +			arg = new ArrayList(servletRequest.getParts());, +		}, +		Class<?> collectionType = getCollectionParameterType(parameter);, +		return ((collectionType != null) && collectionType.equals(MultipartFile.class));, +	}, +, +	private boolean isPartCollection(MethodParameter parameter) {, +		Class<?> collectionType = getCollectionParameterType(parameter);, +		return ((collectionType != null) && "javax.servlet.http.Part".equals(collectionType.getName()));, +	}, +, +	private Class<?> getCollectionParameterType(MethodParameter parameter) {, +			if (valueType != null) {, +				return valueType;, +		return null;, +++ b/spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java, +	private MethodParameter paramPart;, +		paramPart = new MethodParameter(method, 8);, +		paramPart.initParameterNameDiscovery(paramNameDiscoverer);, +		assertTrue("Part parameter not supported", resolver.supportsParameter(paramPart));, +	public void resolvePart() throws Exception {, +		MockPart expected = new MockPart("part", "Hello World".getBytes());, +		Object result = resolver.resolveArgument(paramPart, null, webRequest, null);, +			Part part,, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolver.java, + * Copyright 2002-2013 the original author or authors., +import java.util.ArrayList;, +		else if (isPartCollection(parameter)) {, +			assertIsMultipartRequest(servletRequest);, +			arg = new ArrayList(servletRequest.getParts());, +		}, +		Class<?> collectionType = getCollectionParameterType(parameter);, +		return ((collectionType != null) && collectionType.equals(MultipartFile.class));, +	}, +, +	private boolean isPartCollection(MethodParameter parameter) {, +		Class<?> collectionType = getCollectionParameterType(parameter);, +		return ((collectionType != null) && "javax.servlet.http.Part".equals(collectionType.getName()));, +	}, +, +	private Class<?> getCollectionParameterType(MethodParameter parameter) {, +			if (valueType != null) {, +				return valueType;, +		return null;, +++ b/spring-web/src/test/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolverTests.java, +	private MethodParameter paramPart;, +		paramPart = new MethodParameter(method, 8);, +		paramPart.initParameterNameDiscovery(paramNameDiscoverer);, +		assertTrue("Part parameter not supported", resolver.supportsParameter(paramPart));, +	public void resolvePart() throws Exception {, +		MockPart expected = new MockPart("part", "Hello World".getBytes());, +		Object result = resolver.resolveArgument(paramPart, null, webRequest, null);, +			Part part,, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestPartMethodArgumentResolver.java, + * Copyright 2002-2013 the original author or authors., +import java.util.ArrayList;, +, +			assertIsMultipartRequest(servletRequest);, +		else if (isPartCollection(parameter)) {, +			assertIsMultipartRequest(servletRequest);, +			arg = new ArrayList(servletRequest.getParts());, +		}, +		Class<?> collectionType = getCollectionParameterType(parameter);, +		return ((collectionType != null) && collectionType.equals(MultipartFile.class));, +	}, +, +	private boolean isPartCollection(MethodParameter parameter) {, +		Class<?> collectionType = getCollectionParameterType(parameter);, +		return ((collectionType != null) && "javax.servlet.http.Part".equals(collectionType.getName()));, +	}, +, +	private Class<?> getCollectionParameterType(MethodParameter parameter) {, +			if (valueType != null) {, +				return valueType;, +		return null;]