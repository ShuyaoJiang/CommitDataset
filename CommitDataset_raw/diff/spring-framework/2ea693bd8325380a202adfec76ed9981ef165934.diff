[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, +import java.util.Optional;, +	 * Return the request attribute value if present., +	 * @param name the attribute name, +	 * @return the attribute value, +	 */, +	default Optional<Object> attribute(String name) {, +		Map<String, Object> attributes = attributes();, +		if (attributes.containsKey(name)) {, +			return Optional.of(attributes.get(name));, +		}, +		else {, +			return Optional.empty();, +		}, +	}, +, +, +	/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, +import java.util.Optional;, +	 * Return the request attribute value if present., +	 * @param name the attribute name, +	 * @return the attribute value, +	 */, +	default Optional<Object> attribute(String name) {, +		Map<String, Object> attributes = attributes();, +		if (attributes.containsKey(name)) {, +			return Optional.of(attributes.get(name));, +		}, +		else {, +			return Optional.empty();, +		}, +	}, +, +, +	/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ExchangeFilterFunctions.java, +import java.nio.charset.Charset;, +import java.util.Optional;, +		return basicAuthenticationInternal(r -> Optional.of(new Credentials(username, password)));, +	 * {@linkplain ClientRequest#attributes() request attributes}. If the attributes are not found,, +	 * no authorization header, +		return basicAuthenticationInternal(, +				request -> {, +					Optional<String> username = request.attribute(USERNAME_ATTRIBUTE).map(o -> (String)o);, +					Optional<String> password = request.attribute(PASSWORD_ATTRIBUTE).map(o -> (String)o);, +					if (username.isPresent() && password.isPresent()) {, +						return Optional.of(new Credentials(username.get(), password.get()));, +						return Optional.empty();, +	private static ExchangeFilterFunction basicAuthenticationInternal(, +			Function<ClientRequest, Optional<Credentials>> credentialsFunction) {, +, +		return ExchangeFilterFunction.ofRequestProcessor(, +				clientRequest -> credentialsFunction.apply(clientRequest).map(, +						credentials -> {, +							ClientRequest authorizedRequest = ClientRequest.from(clientRequest), +									.headers(headers -> {, +										headers.set(HttpHeaders.AUTHORIZATION,, +												authorization(credentials));, +									}), +									.build();, +							return Mono.just(authorizedRequest);, +						}), +						.orElse(Mono.just(clientRequest)));, +	}, +, +	private static String authorization(Credentials credentials) {, +		byte[] credentialBytes = credentials.toByteArray(StandardCharsets.ISO_8859_1);, +	private static class Credentials {, +, +		private String username;, +, +		private String password;, +, +		public Credentials(String username, String password) {, +			this.username = username;, +			this.password = password;, +		}, +, +		public byte[] toByteArray(Charset charset) {, +			String credentials = this.username + ":" + this.password;, +			return credentials.getBytes(charset);, +		}, +, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, +import java.util.Optional;, +	 * Return the request attribute value if present., +	 * @param name the attribute name, +	 * @return the attribute value, +	 */, +	default Optional<Object> attribute(String name) {, +		Map<String, Object> attributes = attributes();, +		if (attributes.containsKey(name)) {, +			return Optional.of(attributes.get(name));, +		}, +		else {, +			return Optional.empty();, +		}]