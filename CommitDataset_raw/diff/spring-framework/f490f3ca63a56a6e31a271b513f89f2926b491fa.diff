[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/HandlerMethodArgumentResolver.java, + * Strategy to resolve the argument value for a method parameter in the context, + * of the current HTTP request., +	/**, +	 * Whether this resolver supports the given method parameter., +	 * @param parameter the method parameter, +	 */, +	 * Resolve the value for the method parameter., +	 * @return {@code Mono} for the argument value, possibly empty, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/HandlerMethodArgumentResolver.java, + * Strategy to resolve the argument value for a method parameter in the context, + * of the current HTTP request., +	/**, +	 * Whether this resolver supports the given method parameter., +	 * @param parameter the method parameter, +	 */, +	 * Resolve the value for the method parameter., +	 * @return {@code Mono} for the argument value, possibly empty, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java, +	 * Return the conifgured argument resolvers., +	 */, +	public List<HandlerMethodArgumentResolver> getResolvers() {, +		return this.resolvers;, +	}, +, +	/**, +	/**, +	 * Return the configured parameter name discoverer., +	 */, +	public ParameterNameDiscoverer getParameterNameDiscoverer() {, +		return this.parameterNameDiscoverer;, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/HandlerMethodArgumentResolver.java, + * Strategy to resolve the argument value for a method parameter in the context, + * of the current HTTP request., +	/**, +	 * Whether this resolver supports the given method parameter., +	 * @param parameter the method parameter, +	 */, +	 * Resolve the value for the method parameter., +	 * @return {@code Mono} for the argument value, possibly empty, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java, +	 * Return the conifgured argument resolvers., +	 */, +	public List<HandlerMethodArgumentResolver> getResolvers() {, +		return this.resolvers;, +	}, +, +	/**, +	/**, +	 * Return the configured parameter name discoverer., +	 */, +	public ParameterNameDiscoverer getParameterNameDiscoverer() {, +		return this.parameterNameDiscoverer;, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncHandlerMethodArgumentResolver.java, +, +	/**, +	 * {@inheritDoc}, +	 * <p>By default this simply delegates to {@link #resolveArgumentValue} for, +	 * synchronous resolution., +	 */, +	default Mono<Object> resolveArgument(MethodParameter parameter, BindingContext bindingContext,, +		return Mono.justOrEmpty(resolveArgumentValue(parameter, bindingContext, exchange));, +	 * Resolve the value for the method parameter synchronously., +	 * @return an {@code Optional} with the resolved value, possibly empty, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/HandlerMethodArgumentResolver.java, + * Strategy to resolve the argument value for a method parameter in the context, + * of the current HTTP request., +	/**, +	 * Whether this resolver supports the given method parameter., +	 * @param parameter the method parameter, +	 */, +	 * Resolve the value for the method parameter., +	 * @return {@code Mono} for the argument value, possibly empty, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java, +	 * Return the conifgured argument resolvers., +	 */, +	public List<HandlerMethodArgumentResolver> getResolvers() {, +		return this.resolvers;, +	}, +, +	/**, +	/**, +	 * Return the configured parameter name discoverer., +	 */, +	public ParameterNameDiscoverer getParameterNameDiscoverer() {, +		return this.parameterNameDiscoverer;, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncHandlerMethodArgumentResolver.java, +, +	/**, +	 * {@inheritDoc}, +	 * <p>By default this simply delegates to {@link #resolveArgumentValue} for, +	 * synchronous resolution., +	 */, +	default Mono<Object> resolveArgument(MethodParameter parameter, BindingContext bindingContext,]