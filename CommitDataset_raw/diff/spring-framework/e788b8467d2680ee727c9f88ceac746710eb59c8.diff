[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/BeanDefinitionCustomizer.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.beans.factory.config;, +, +/**, + * Callback for customizing a given bean definition., + * Designed for use with a lambda expression or method reference., + *, + * @author Juergen Hoeller, + * @since 5.0, + * @see org.springframework.beans.factory.support.BeanDefinitionBuilder#applyCustomizers, + */, +@FunctionalInterface, +public interface BeanDefinitionCustomizer {, +, +	/**, +	 * Customize the given bean definition., +	 */, +	void customize(BeanDefinition bd);, +, +}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/BeanDefinitionCustomizer.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.beans.factory.config;, +, +/**, + * Callback for customizing a given bean definition., + * Designed for use with a lambda expression or method reference., + *, + * @author Juergen Hoeller, + * @since 5.0, + * @see org.springframework.beans.factory.support.BeanDefinitionBuilder#applyCustomizers, + */, +@FunctionalInterface, +public interface BeanDefinitionCustomizer {, +, +	/**, +	 * Customize the given bean definition., +	 */, +	void customize(BeanDefinition bd);, +, +}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionBuilder.java, +import java.util.function.Supplier;, +, +import org.springframework.beans.factory.config.BeanDefinitionCustomizer;, +	 * @param beanClassName the class name for the bean that the definition is being created for, +	 */, +	public static BeanDefinitionBuilder genericBeanDefinition(String beanClassName) {, +		BeanDefinitionBuilder builder = new BeanDefinitionBuilder();, +		builder.beanDefinition = new GenericBeanDefinition();, +		builder.beanDefinition.setBeanClassName(beanClassName);, +		return builder;, +	}, +, +	/**, +	 * Create a new {@code BeanDefinitionBuilder} used to construct a {@link GenericBeanDefinition}., +	 * @param beanClass the {@code Class} of the bean that the definition is being created for, +	 * @param instanceSupplier a callback for creating an instance of the bean, +	 * @since 5.0, +	public static <T> BeanDefinitionBuilder genericBeanDefinition(Class<T> beanClass, Supplier<T> instanceSupplier) {, +		builder.beanDefinition.setInstanceSupplier(instanceSupplier);, +	 * Create a new {@code BeanDefinitionBuilder} used to construct a {@link RootBeanDefinition}., +	 * @param beanClass the {@code Class} of the bean that the definition is being created for, +	 */, +	public static BeanDefinitionBuilder rootBeanDefinition(Class<?> beanClass) {, +		return rootBeanDefinition(beanClass, null);, +	}, +, +	/**]