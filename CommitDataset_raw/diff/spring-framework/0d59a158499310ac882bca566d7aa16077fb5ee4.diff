[+++ b/spring-context/src/main/java/org/springframework/cache/annotation/CacheEvict.java, +	 * can only be used if {@link #beforeInvocation()} is {@code false}. For supported, +	 * wrappers such as {@code Optional}, {@code #result} refers to the actual object,, +	 * not the wrapper</li>, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/CacheEvict.java, +	 * can only be used if {@link #beforeInvocation()} is {@code false}. For supported, +	 * wrappers such as {@code Optional}, {@code #result} refers to the actual object,, +	 * not the wrapper</li>, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/CachePut.java, + * method to be invoked and its result to be stored in the associated cache. Note, + * that Java8's {@code Optional} return types are automatically handled and its, + * content is stored in the cache if present., +	 * <li>{@code #result} for a reference to the result of the method invocation. For, +	 * supported wrappers such as {@code Optional}, {@code #result} refers to the actual, +	 * object, not the wrapper</li>, +	 * <li>{@code #result} for a reference to the result of the method invocation. For, +	 * supported wrappers such as {@code Optional}, {@code #result} refers to the actual, +	 * object, not the wrapper</li>, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/CacheEvict.java, +	 * can only be used if {@link #beforeInvocation()} is {@code false}. For supported, +	 * wrappers such as {@code Optional}, {@code #result} refers to the actual object,, +	 * not the wrapper</li>, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/CachePut.java, + * method to be invoked and its result to be stored in the associated cache. Note, + * that Java8's {@code Optional} return types are automatically handled and its, + * content is stored in the cache if present., +	 * <li>{@code #result} for a reference to the result of the method invocation. For, +	 * supported wrappers such as {@code Optional}, {@code #result} refers to the actual, +	 * object, not the wrapper</li>, +	 * <li>{@code #result} for a reference to the result of the method invocation. For, +	 * supported wrappers such as {@code Optional}, {@code #result} refers to the actual, +	 * object, not the wrapper</li>, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/Cacheable.java, + * will be invoked and the returned value stored in the associated cache. Note, + * that Java8's {@code Optional} return types are automatically handled and its, + * content is stored in the cache if present., +	 * <li>{@code #result} for a reference to the result of the method invocation. For, +	 * supported wrappers such as {@code Optional}, {@code #result} refers to the actual, +	 * object, not the wrapper</li>, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/CacheEvict.java, +	 * can only be used if {@link #beforeInvocation()} is {@code false}. For supported, +	 * wrappers such as {@code Optional}, {@code #result} refers to the actual object,, +	 * not the wrapper</li>, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/CachePut.java, + * method to be invoked and its result to be stored in the associated cache. Note, + * that Java8's {@code Optional} return types are automatically handled and its, + * content is stored in the cache if present., +	 * <li>{@code #result} for a reference to the result of the method invocation. For, +	 * supported wrappers such as {@code Optional}, {@code #result} refers to the actual, +	 * object, not the wrapper</li>, +	 * <li>{@code #result} for a reference to the result of the method invocation. For, +	 * supported wrappers such as {@code Optional}, {@code #result} refers to the actual, +	 * object, not the wrapper</li>, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/Cacheable.java, + * will be invoked and the returned value stored in the associated cache. Note, + * that Java8's {@code Optional} return types are automatically handled and its, + * content is stored in the cache if present., +	 * <li>{@code #result} for a reference to the result of the method invocation. For, +	 * supported wrappers such as {@code Optional}, {@code #result} refers to the actual, +	 * object, not the wrapper</li>, +++ b/src/asciidoc/integration.adoc, +The cache abstraction supports `java.util.Optional`, using its content as cached value, +only if it present. `#result` always refers to the business entity and never on a, +supported wrapper so the previous example can be rewritten as follows:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Cacheable(cacheNames="book", condition="#name.length < 32", **unless="#result.hardback"**), +	public Optional<Book> findBook(String name), +----, +, +Note that `result` still refers to `Book` and not `Optional`., +  expressions (when `beforeInvocation` is `false`). For supported wrappers such as, +  `Optional`, `#result` refers to the actual object, not the wrapper.]