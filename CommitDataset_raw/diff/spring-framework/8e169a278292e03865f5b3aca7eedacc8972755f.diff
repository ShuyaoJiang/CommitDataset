[+++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/LocalTaskExecutorThreadPool.java, + * Copyright 2002-2011 the original author or authors., +	public void setInstanceId(String schedInstId) {, +	}, +, +	public void setInstanceName(String schedName) {, +	}, +, +, +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/LocalTaskExecutorThreadPool.java, + * Copyright 2002-2011 the original author or authors., +	public void setInstanceId(String schedInstId) {, +	}, +, +	public void setInstanceName(String schedName) {, +	}, +, +, +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/SchedulerAccessor.java, + * Copyright 2002-2011 the original author or authors., +import java.lang.reflect.Method;, +				try {, +					// Quartz 1.8 or higher?, +					Class dataProcessorClass = getClass().getClassLoader().loadClass("import org.quartz.xml.XMLSchedulingDataProcessor");, +					logger.debug("Using Quartz 1.8 XMLSchedulingDataProcessor");, +					Object dataProcessor = dataProcessorClass.getConstructor(ClassLoadHelper.class).newInstance(clh);, +					Method processFileAndScheduleJobs = dataProcessorClass.getMethod("processFileAndScheduleJobs", String.class, Scheduler.class);, +						processFileAndScheduleJobs.invoke(dataProcessor, location, getScheduler());, +					}, +				}, +				catch (ClassNotFoundException ex) {, +					// Quartz 1.6, +					Class dataProcessorClass = getClass().getClassLoader().loadClass("import org.quartz.xml.JobSchedulingDataProcessor");, +					logger.debug("Using Quartz 1.6 JobSchedulingDataProcessor");, +					Object dataProcessor = dataProcessorClass.getConstructor(ClassLoadHelper.class, boolean.class, boolean.class).newInstance(clh, true, true);, +					Method processFileAndScheduleJobs = dataProcessorClass.getMethod("processFileAndScheduleJobs", String.class, Scheduler.class, boolean.class);, +					for (String location : this.jobSchedulingDataLocations) {, +						processFileAndScheduleJobs.invoke(dataProcessor, location, getScheduler(), this.overwriteExistingJobs);, +					}, +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/LocalTaskExecutorThreadPool.java, + * Copyright 2002-2011 the original author or authors., +	public void setInstanceId(String schedInstId) {, +	}, +, +	public void setInstanceName(String schedName) {, +	}, +, +, +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/SchedulerAccessor.java, + * Copyright 2002-2011 the original author or authors., +import java.lang.reflect.Method;, +				try {, +					// Quartz 1.8 or higher?, +					Class dataProcessorClass = getClass().getClassLoader().loadClass("import org.quartz.xml.XMLSchedulingDataProcessor");, +					logger.debug("Using Quartz 1.8 XMLSchedulingDataProcessor");, +					Object dataProcessor = dataProcessorClass.getConstructor(ClassLoadHelper.class).newInstance(clh);, +					Method processFileAndScheduleJobs = dataProcessorClass.getMethod("processFileAndScheduleJobs", String.class, Scheduler.class);, +						processFileAndScheduleJobs.invoke(dataProcessor, location, getScheduler());, +					}, +				}, +				catch (ClassNotFoundException ex) {, +					// Quartz 1.6, +					Class dataProcessorClass = getClass().getClassLoader().loadClass("import org.quartz.xml.JobSchedulingDataProcessor");, +					logger.debug("Using Quartz 1.6 JobSchedulingDataProcessor");, +					Object dataProcessor = dataProcessorClass.getConstructor(ClassLoadHelper.class, boolean.class, boolean.class).newInstance(clh, true, true);, +					Method processFileAndScheduleJobs = dataProcessorClass.getMethod("processFileAndScheduleJobs", String.class, Scheduler.class, boolean.class);, +					for (String location : this.jobSchedulingDataLocations) {, +						processFileAndScheduleJobs.invoke(dataProcessor, location, getScheduler(), this.overwriteExistingJobs);, +					}, +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java, + * Copyright 2002-2011 the original author or authors., + * <p><b>Note:</b> This version of Spring's SchedulerFactoryBean supports Quartz 1.x,, + * more specifically Quartz 1.5 or higher. The "jobSchedulingDataLocation" feature, + * requires Quartz 1.6.1 or higher (as of Spring 2.5.5).]