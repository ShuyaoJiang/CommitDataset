[+++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletResponse.java, +	/**, +	 * Return whether the character encoding has been set., +	 * <p>If {@code false}, {@link #getCharacterEncoding()} will return a default encoding value., +	 */, +	public boolean isCharset() {, +		return charset;, +	}, +, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletResponse.java, +	/**, +	 * Return whether the character encoding has been set., +	 * <p>If {@code false}, {@link #getCharacterEncoding()} will return a default encoding value., +	 */, +	public boolean isCharset() {, +		return charset;, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/util/XpathExpectationsHelper.java, +import static org.hamcrest.MatcherAssert.*;, +import static org.springframework.test.util.AssertionErrors.*;, +, +import java.io.ByteArrayInputStream;, +, +import org.springframework.util.StringUtils;, +	public void assertNode(byte[] content, String encoding, final Matcher<? super Node> matcher) throws Exception {, +		Document document = parseXmlByteArray(content, encoding);, +	 * @param encoding optional content encoding, if provided as metadata (e.g. in HTTP headers), +	 * @throws Exception, +	protected Document parseXmlByteArray(byte[] xml, String encoding) throws Exception {, +		InputSource inputSource = new InputSource(new ByteArrayInputStream(xml));, +		if(StringUtils.hasText(encoding)) {, +			inputSource.setEncoding(encoding);, +		}, +	public void exists(byte[] content, String encoding) throws Exception {, +		Document document = parseXmlByteArray(content, encoding);, +	public void doesNotExist(byte[] content, String encoding) throws Exception {, +		Document document = parseXmlByteArray(content, encoding);, +	public void assertNodeCount(byte[] content, String encoding, Matcher<Integer> matcher) throws Exception {, +		Document document = parseXmlByteArray(content, encoding);, +	public void assertNodeCount(byte[] content, String encoding, int expectedCount) throws Exception {, +		Document document = parseXmlByteArray(content, encoding);, +	public void assertString(byte[] content, String encoding, Matcher<? super String> matcher) throws Exception {, +		Document document = parseXmlByteArray(content, encoding);, +	public void assertString(byte[] content, String encoding, String expectedValue) throws Exception {, +		Document document = parseXmlByteArray(content, encoding);, +	public void assertNumber(byte[] content, String encoding, Matcher<? super Double> matcher) throws Exception {, +		Document document = parseXmlByteArray(content, encoding);, +	public void assertNumber(byte[] content, String encoding, Double expectedValue) throws Exception {, +		Document document = parseXmlByteArray(content, encoding);, +	public void assertBoolean(byte[] content, String encoding, boolean expectedValue) throws Exception {, +		Document document = parseXmlByteArray(content, encoding);, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletResponse.java, +	/**, +	 * Return whether the character encoding has been set., +	 * <p>If {@code false}, {@link #getCharacterEncoding()} will return a default encoding value., +	 */, +	public boolean isCharset() {, +		return charset;, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/util/XpathExpectationsHelper.java, +import static org.hamcrest.MatcherAssert.*;, +import static org.springframework.test.util.AssertionErrors.*;, +, +import java.io.ByteArrayInputStream;, +, +import org.springframework.util.StringUtils;, +	public void assertNode(byte[] content, String encoding, final Matcher<? super Node> matcher) throws Exception {, +		Document document = parseXmlByteArray(content, encoding);, +	 * @param encoding optional content encoding, if provided as metadata (e.g. in HTTP headers), +	 * @throws Exception, +	protected Document parseXmlByteArray(byte[] xml, String encoding) throws Exception {, +		InputSource inputSource = new InputSource(new ByteArrayInputStream(xml));, +		if(StringUtils.hasText(encoding)) {, +			inputSource.setEncoding(encoding);, +		}, +	public void exists(byte[] content, String encoding) throws Exception {, +		Document document = parseXmlByteArray(content, encoding);, +	public void doesNotExist(byte[] content, String encoding) throws Exception {, +		Document document = parseXmlByteArray(content, encoding);, +	public void assertNodeCount(byte[] content, String encoding, Matcher<Integer> matcher) throws Exception {, +		Document document = parseXmlByteArray(content, encoding);, +	public void assertNodeCount(byte[] content, String encoding, int expectedCount) throws Exception {, +		Document document = parseXmlByteArray(content, encoding);, +	public void assertString(byte[] content, String encoding, Matcher<? super String> matcher) throws Exception {, +		Document document = parseXmlByteArray(content, encoding);, +	public void assertString(byte[] content, String encoding, String expectedValue) throws Exception {, +		Document document = parseXmlByteArray(content, encoding);, +	public void assertNumber(byte[] content, String encoding, Matcher<? super Double> matcher) throws Exception {, +		Document document = parseXmlByteArray(content, encoding);, +	public void assertNumber(byte[] content, String encoding, Double expectedValue) throws Exception {, +		Document document = parseXmlByteArray(content, encoding);, +	public void assertBoolean(byte[] content, String encoding, boolean expectedValue) throws Exception {, +		Document document = parseXmlByteArray(content, encoding);, +++ b/spring-test/src/main/java/org/springframework/test/web/client/match/XpathRequestMatchers.java, + * Copyright 2002-2015 the original author or authors., +	private static final String DEFAULT_ENCODING = "UTF-8";, +, +				xpathHelper.assertNode(request.getBodyAsBytes(), DEFAULT_ENCODING, matcher);]