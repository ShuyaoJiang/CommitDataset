[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java, +import java.util.function.Function;, +	private final Map<Class<?>, Set<Method>> binderMethodCache = new ConcurrentHashMap<>(64);, +	private final Map<Class<?>, Set<Method>> attributeMethodCache = new ConcurrentHashMap<>(64);, +				getWebBindingInitializer(), getBinderMethods(handlerMethod));, +		Function<Throwable, Mono<HandlerResult>> exceptionHandler =, +				ex -> handleException(ex, handlerMethod, bindingContext, exchange);, +, +		return modelCompletion.then(() -> {, +, +			InvocableHandlerMethod invocable = new InvocableHandlerMethod(handlerMethod);, +			invocable.setArgumentResolvers(getArgumentResolvers());, +, +			return invocable.invoke(exchange, bindingContext), +					.doOnNext(result -> result.setExceptionHandler(exceptionHandler)), +					.otherwise(exceptionHandler);, +		});, +	private List<SyncInvocableHandlerMethod> getBinderMethods(HandlerMethod handlerMethod) {, +		Set<Method> methods = this.binderMethodCache.computeIfAbsent(handlerType, aClass ->, +				MethodIntrospector.selectMethods(handlerType, BINDER_METHODS));, +		Set<Method> methods = this.attributeMethodCache.computeIfAbsent(handlerType, aClass ->, +				MethodIntrospector.selectMethods(handlerType, ATTRIBUTE_METHODS));, +		ExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache, +				.computeIfAbsent(handlerMethod.getBeanType(), ExceptionHandlerMethodResolver::new);, +, +		Method method = resolver.resolveMethodByExceptionType(ex.getClass());, +, +		if (method != null) {, +			Object bean = handlerMethod.getBean();, +			InvocableHandlerMethod invocable = new InvocableHandlerMethod(bean, method);, +			invocable.setArgumentResolvers(getArgumentResolvers());, +					logger.warn("Failed to invoke: " + invocable.getMethod(), invocationEx);, +		return Mono.error(ex);, +	public static final ReflectionUtils.MethodFilter BINDER_METHODS = method ->, +	public static final ReflectionUtils.MethodFilter ATTRIBUTE_METHODS = method ->, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java, +import java.util.function.Function;, +	private final Map<Class<?>, Set<Method>> binderMethodCache = new ConcurrentHashMap<>(64);, +	private final Map<Class<?>, Set<Method>> attributeMethodCache = new ConcurrentHashMap<>(64);, +				getWebBindingInitializer(), getBinderMethods(handlerMethod));, +		Function<Throwable, Mono<HandlerResult>> exceptionHandler =, +				ex -> handleException(ex, handlerMethod, bindingContext, exchange);, +, +		return modelCompletion.then(() -> {, +, +			InvocableHandlerMethod invocable = new InvocableHandlerMethod(handlerMethod);, +			invocable.setArgumentResolvers(getArgumentResolvers());, +, +			return invocable.invoke(exchange, bindingContext), +					.doOnNext(result -> result.setExceptionHandler(exceptionHandler)), +					.otherwise(exceptionHandler);, +		});, +	private List<SyncInvocableHandlerMethod> getBinderMethods(HandlerMethod handlerMethod) {, +		Set<Method> methods = this.binderMethodCache.computeIfAbsent(handlerType, aClass ->, +				MethodIntrospector.selectMethods(handlerType, BINDER_METHODS));, +		Set<Method> methods = this.attributeMethodCache.computeIfAbsent(handlerType, aClass ->, +				MethodIntrospector.selectMethods(handlerType, ATTRIBUTE_METHODS));, +		ExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache, +				.computeIfAbsent(handlerMethod.getBeanType(), ExceptionHandlerMethodResolver::new);, +, +		Method method = resolver.resolveMethodByExceptionType(ex.getClass());, +, +		if (method != null) {, +			Object bean = handlerMethod.getBean();, +			InvocableHandlerMethod invocable = new InvocableHandlerMethod(bean, method);, +			invocable.setArgumentResolvers(getArgumentResolvers());, +					logger.warn("Failed to invoke: " + invocable.getMethod(), invocationEx);, +		return Mono.error(ex);, +	public static final ReflectionUtils.MethodFilter BINDER_METHODS = method ->, +	public static final ReflectionUtils.MethodFilter ATTRIBUTE_METHODS = method ->, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/ModelInitializerTests.java, +import static org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.BINDER_METHODS;, +import static org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.ATTRIBUTE_METHODS;, +				.selectMethods(controller.getClass(), BINDER_METHODS).stream(), +				.selectMethods(controller.getClass(), ATTRIBUTE_METHODS).stream()]