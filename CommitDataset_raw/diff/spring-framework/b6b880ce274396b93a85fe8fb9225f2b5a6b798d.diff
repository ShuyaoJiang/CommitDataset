[+++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +	 * Retrieve the JavaBeans {@code PropertyDescriptor}s of a given class., +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +	 * Retrieve the JavaBeans {@code PropertyDescriptor}s of a given class., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java, +					throw new BeanDefinitionValidationException("Could not find a destroy method named '" +, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +	 * Retrieve the JavaBeans {@code PropertyDescriptor}s of a given class., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java, +					throw new BeanDefinitionValidationException("Could not find a destroy method named '" +, +++ b/spring-context/src/main/java/org/springframework/context/support/GenericApplicationContext.java, +	 * @param customizers one or more callbacks for customizing the factory's, +	 * {@link BeanDefinition}, e.g. setting a lazy-init or primary flag, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +	 * Retrieve the JavaBeans {@code PropertyDescriptor}s of a given class., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java, +					throw new BeanDefinitionValidationException("Could not find a destroy method named '" +, +++ b/spring-context/src/main/java/org/springframework/context/support/GenericApplicationContext.java, +	 * @param customizers one or more callbacks for customizing the factory's, +	 * {@link BeanDefinition}, e.g. setting a lazy-init or primary flag, +++ b/spring-context/src/test/java/org/springframework/context/annotation/AnnotationConfigApplicationContextTests.java, +	@Test, +	public void getBeanByTypeAmbiguityRaisesException() {, +		ApplicationContext context = new AnnotationConfigApplicationContext(TwoTestBeanConfig.class);, +, +		try {, +			context.getBean(TestBean.class);, +		}, +		catch (NoSuchBeanDefinitionException ex) {, +			assertThat(ex.getMessage(),, +					allOf(, +							containsString("No qualifying bean of type '" + TestBean.class.getName() + "'"),, +							containsString("tb1"),, +							containsString("tb2"), +					), +			);, +		}, +	}, +]