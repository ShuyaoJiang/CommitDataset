[+++ b/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java, + * Copyright 2002-2014 the original author or authors., + * Implementation of {@link HttpMessageConverter} to read and write 'normal' HTML, + * forms and also to write (but not read) multipart data (e.g. file uploads)., + * <p>In other words this converter can read and write the, + * {@code "application/x-www-form-urlencoded"} media type as, + * {@link MultiValueMap MultiValueMap&lt;String, String&gt;} and it can also, + * write (but not read) the {@code "multipart/form-data"} media type as, + * {@link MultiValueMap MultiValueMap&lt;String, Object&gt;}., + * <p>When writing multipart data this converter uses other, + * {@link HttpMessageConverter HttpMessageConverters} to write the respective, + * MIME parts. By default basic converters are registered (for {@code Strings}, + * and {@code Resources}). These can be overridden through the, + * {@link #setPartConverters(java.util.List) partConverters} property., + * <p>For example the following snippet shows how to submit an HTML form:, + * <pre class="code">, + * RestTemplate template = new RestTemplate(); // FormHttpMessageConverter is configured by default, + * MultiValueMap&lt;String, String&gt; form = new LinkedMultiValueMap&lt;String, String&gt;();, + * form.add("field 1", "value 1"); form.add("field 2", "value 2");, + * form.add("field 2", "value 3");, + * template.postForLocation("http://example.com/myForm", form);, + * </pre>, + *, + * <p>The following snippet shows how to do a file upload:, + * <pre class="code">, + * MultiValueMap&lt;String, Object&gt; parts = new LinkedMultiValueMap&lt;String, Object&gt;();, + * parts.add("field 1", "value 1");, + * parts.add("file", new ClassPathResource("myFile.jpg"));, + * template.postForLocation("http://example.com/myFileUpload", parts);, + * </pre>, +	private final Random random = new Random();, +	 * Set the default character set to use for reading and writing form data when, +	 * the request or response Content-Type header does not explicitly specify it., +	 * <p>By default this is set to "UTF-8"., +	 */, +	public void setCharset(Charset charset) {, +		this.charset = charset;, +	}, +, +	/**, +	 * Set the list of {@link MediaType} objects supported by this converter., +	 */, +	public void setSupportedMediaTypes(List<MediaType> supportedMediaTypes) {, +		this.supportedMediaTypes = supportedMediaTypes;, +	}, +, +	@Override, +	public List<MediaType> getSupportedMediaTypes() {, +		return Collections.unmodifiableList(this.supportedMediaTypes);, +	}, +, +	/**, +	 * Set the message body converters to use. These converters are used to, +	 * convert objects to MIME parts., +	 * Add a message body converter. Such a converters is used to convert objects, +	 * to MIME parts., +, +, +, +				HttpOutputMessage multipartMessage = new MultipartHttpOutputMessage(os);, +				multipartMessage.getHeaders().setContentDispositionFormData(name, getFilename(partBody));, +					multipartMessage.getHeaders().putAll(partHeaders);, +				((HttpMessageConverter<Object>) messageConverter).write(partBody, partContentType, multipartMessage);, +		byte[] boundary = new byte[random.nextInt(11) + 30];, +			boundary[i] = BOUNDARY_CHARS[random.nextInt(BOUNDARY_CHARS.length)];, +	 * Implementation of {@link org.springframework.http.HttpOutputMessage} used, +	 * to write a MIME multipart., +		private byte[] getAsciiBytes(String name) {]