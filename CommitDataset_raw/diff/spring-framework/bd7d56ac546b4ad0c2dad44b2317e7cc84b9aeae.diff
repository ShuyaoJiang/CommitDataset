[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +				if (!descriptor.equals("Ljava/lang/Object")) {, +	}, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +				if (!descriptor.equals("Ljava/lang/Object")) {, +	}, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Ternary.java, +		if (!CodeFlow.isPrimitive(codeflow.lastDescriptor())) {, +			CodeFlow.insertUnboxInsns(mv, 'Z', codeflow.lastDescriptor());, +		}, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +				if (!descriptor.equals("Ljava/lang/Object")) {, +	}, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Ternary.java, +		if (!CodeFlow.isPrimitive(codeflow.lastDescriptor())) {, +			CodeFlow.insertUnboxInsns(mv, 'Z', codeflow.lastDescriptor());, +		}, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/VariableReference.java, +import java.lang.reflect.Modifier;, +, +		Object value = result.getValue();, +		if (value == null || !Modifier.isPublic(value.getClass().getModifiers())) {, +			// If the type is not public then when generateCode produces a checkcast to it, +			// then an IllegalAccessError will occur., +			// If resorting to Object isn't sufficient, the hierarchy could be traversed for , +			// the first public type., +			this.exitTypeDescriptor ="Ljava/lang/Object";, +		}, +		else {, +			this.exitTypeDescriptor = CodeFlow.toDescriptorFromObject(value);, +		}, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +				if (!descriptor.equals("Ljava/lang/Object")) {, +	}, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Ternary.java, +		if (!CodeFlow.isPrimitive(codeflow.lastDescriptor())) {, +			CodeFlow.insertUnboxInsns(mv, 'Z', codeflow.lastDescriptor());, +		}, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/VariableReference.java, +import java.lang.reflect.Modifier;, +, +		Object value = result.getValue();, +		if (value == null || !Modifier.isPublic(value.getClass().getModifiers())) {, +			// If the type is not public then when generateCode produces a checkcast to it, +			// then an IllegalAccessError will occur., +			// If resorting to Object isn't sufficient, the hierarchy could be traversed for , +			// the first public type., +			this.exitTypeDescriptor ="Ljava/lang/Object";, +		}, +		else {, +			this.exitTypeDescriptor = CodeFlow.toDescriptorFromObject(value);, +		}, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelCompilationCoverageTests.java, +	public void ternaryWithBooleanReturn() { // SPR-12271, +		expression = parser.parseExpression("T(Boolean).TRUE?'abc':'def'");, +		assertEquals("abc",expression.getValue());, +		assertCanCompile(expression);, +		assertEquals("abc",expression.getValue());, +, +		expression = parser.parseExpression("T(Boolean).FALSE?'abc':'def'");, +		assertEquals("def",expression.getValue());, +		assertCanCompile(expression);, +		assertEquals("def",expression.getValue());, +	}, +	, +	@Test, +	@Test, +	public void propertyReferenceVisibility() { // SPR-12771, +		StandardEvaluationContext ctx = new StandardEvaluationContext();, +		ctx.setVariable("httpServletRequest", HttpServlet3RequestFactory.getOne());, +		// Without a fix compilation was inserting a checkcast to a private type, +		expression = parser.parseExpression("#httpServletRequest.servletPath");, +		assertEquals("wibble",expression.getValue(ctx));, +		assertCanCompile(expression);, +		assertEquals("wibble",expression.getValue(ctx));, +	}, +		, +	// These test classes simulate a pattern of public/private classes seen in Spring Security, +	, +	// final class HttpServlet3RequestFactory implements HttpServletRequestFactory , +	static class HttpServlet3RequestFactory {, +	, +	  static Servlet3SecurityContextHolderAwareRequestWrapper getOne() {, +		  HttpServlet3RequestFactory outer = new HttpServlet3RequestFactory();, +		  return outer.new Servlet3SecurityContextHolderAwareRequestWrapper();, +	  }, +	  // private class Servlet3SecurityContextHolderAwareRequestWrapper extends SecurityContextHolderAwareRequestWrapper, +	  private class Servlet3SecurityContextHolderAwareRequestWrapper extends SecurityContextHolderAwareRequestWrapper {, +	  }, +	}, +	, +	// public class SecurityContextHolderAwareRequestWrapper extends HttpServletRequestWrapper , +	static class SecurityContextHolderAwareRequestWrapper extends HttpServletRequestWrapper {, +	}, +	, +	public static class HttpServletRequestWrapper {, +		public String getServletPath() {, +			return "wibble";, +		}, +	}]