[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/ColumnMapRowMapper.java, + * Copyright 2002-2018 the original author or authors., +		Map<String, Object> mapOfColumnValues = createColumnMap(columnCount);, +			String column = JdbcUtils.lookupColumnName(rsmd, i);, +			mapOfColumnValues.putIfAbsent(getColumnKey(column), getColumnValue(rs, i));, +		return mapOfColumnValues;, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/ColumnMapRowMapper.java, + * Copyright 2002-2018 the original author or authors., +		Map<String, Object> mapOfColumnValues = createColumnMap(columnCount);, +			String column = JdbcUtils.lookupColumnName(rsmd, i);, +			mapOfColumnValues.putIfAbsent(getColumnKey(column), getColumnValue(rs, i));, +		return mapOfColumnValues;, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/TableMetaDataContext.java, +							break;, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/ColumnMapRowMapper.java, + * Copyright 2002-2018 the original author or authors., +		Map<String, Object> mapOfColumnValues = createColumnMap(columnCount);, +			String column = JdbcUtils.lookupColumnName(rsmd, i);, +			mapOfColumnValues.putIfAbsent(getColumnKey(column), getColumnValue(rs, i));, +		return mapOfColumnValues;, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/TableMetaDataContext.java, +							break;, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/JdbcTemplateTests.java, +import java.sql.ResultSetMetaData;, +import java.util.Collections;, +		final List<Object[]> ids = new ArrayList<>(2);, +		final List<Object[]> ids = new ArrayList<>(2);, +		SqlParameter param = new SqlReturnResultSet("", (RowCallbackHandler) rs -> {, +		});, +			this.template.call(conn -> conn.prepareCall("my query"), Collections.singletonList(param));, +		Map<String, Object> out = this.template.call(, +				conn -> conn.prepareCall("my query"), Collections.singletonList(new SqlOutParameter("a", 12)));, +	@Test  // SPR-16578, +	public void testEquallyNamedColumn() throws SQLException {, +		given(this.connection.createStatement()).willReturn(this.statement);, +, +		ResultSetMetaData metaData = mock(ResultSetMetaData.class);, +		given(metaData.getColumnCount()).willReturn(2);, +		given(metaData.getColumnLabel(1)).willReturn("x");, +		given(metaData.getColumnLabel(2)).willReturn("X");, +		given(this.resultSet.getMetaData()).willReturn(metaData);, +, +		given(this.resultSet.next()).willReturn(true, false);, +		given(this.resultSet.getObject(1)).willReturn("first value");, +		given(this.resultSet.getObject(2)).willReturn("second value");, +, +		Map<String, Object> map = this.template.queryForMap("my query");, +		assertEquals(1, map.size());, +		assertEquals("first value", map.get("x"));, +	}, +]