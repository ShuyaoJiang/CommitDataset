[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java, +import org.springframework.http.server.reactive.ServerHttpRequest;, +import org.springframework.util.MultiValueMap;, +	private static final ResolvableType FORM_TYPE =, +			ResolvableType.forClassWithGenerics(MultiValueMap.class, String.class, String.class);, +, +, +	 * Return a {@code BodyExtractor} that reads form data into a {@link MultiValueMap}., +	 * @return a {@code BodyExtractor} that reads form data, +	 */, +	public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData() {, +		return (serverRequest, context) -> {, +					HttpMessageReader<MultiValueMap<String, String>> messageReader = formMessageReader(context);, +					return messageReader.readMono(FORM_TYPE, serverRequest, context.hints());, +				};, +	}, +, +	private static HttpMessageReader<MultiValueMap<String, String>> formMessageReader(BodyExtractor.Context context) {, +		return context.messageReaders().get(), +				.filter(messageReader -> messageReader, +						.canRead(FORM_TYPE, MediaType.APPLICATION_FORM_URLENCODED)), +				.findFirst(), +				.map(BodyExtractors::<MultiValueMap<String, String>>cast), +				.orElseThrow(() -> new IllegalStateException(, +						"Could not find HttpMessageReader that supports " +, +								MediaType.APPLICATION_FORM_URLENCODED_VALUE));, +	}, +, +, +	/**, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java, +import org.springframework.http.server.reactive.ServerHttpRequest;, +import org.springframework.util.MultiValueMap;, +	private static final ResolvableType FORM_TYPE =, +			ResolvableType.forClassWithGenerics(MultiValueMap.class, String.class, String.class);, +, +, +	 * Return a {@code BodyExtractor} that reads form data into a {@link MultiValueMap}., +	 * @return a {@code BodyExtractor} that reads form data, +	 */, +	public static BodyExtractor<Mono<MultiValueMap<String, String>>, ServerHttpRequest> toFormData() {, +		return (serverRequest, context) -> {, +					HttpMessageReader<MultiValueMap<String, String>> messageReader = formMessageReader(context);, +					return messageReader.readMono(FORM_TYPE, serverRequest, context.hints());, +				};, +	}, +, +	private static HttpMessageReader<MultiValueMap<String, String>> formMessageReader(BodyExtractor.Context context) {, +		return context.messageReaders().get(), +				.filter(messageReader -> messageReader, +						.canRead(FORM_TYPE, MediaType.APPLICATION_FORM_URLENCODED)), +				.findFirst(), +				.map(BodyExtractors::<MultiValueMap<String, String>>cast), +				.orElseThrow(() -> new IllegalStateException(, +						"Could not find HttpMessageReader that supports " +, +								MediaType.APPLICATION_FORM_URLENCODED_VALUE));, +	}, +, +, +	/**, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/BodyInserters.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.http.client.reactive.ClientHttpRequest;, +import org.springframework.util.MultiValueMap;, +	private static final ResolvableType FORM_TYPE =, +			ResolvableType.forClassWithGenerics(MultiValueMap.class, String.class, String.class);, +, +, +	 * @param resource the resource to write to the output message, +		return (outputMessage, context) -> {, +							outputMessage, context.hints());, +			HttpMessageWriter<ServerSentEvent<T>> messageWriter =, +					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM);, +			HttpMessageWriter<T> messageWriter =, +					findMessageWriter(context, SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM);, +	 * Return a {@code BodyInserter} that writes the given {@code MultiValueMap} as URL-encoded, +	 * form data., +	 * @param formData the form data to write to the output message, +	 * @return a {@code BodyInserter} that writes form data, +	 */, +	public static BodyInserter<MultiValueMap<String, String>, ClientHttpRequest> fromFormData(MultiValueMap<String, String> formData) {, +		Assert.notNull(formData, "'formData' must not be null");, +, +		return (outputMessage, context) -> {, +			HttpMessageWriter<MultiValueMap<String, String>> messageWriter =, +					findMessageWriter(context, FORM_TYPE, MediaType.APPLICATION_FORM_URLENCODED);, +			return messageWriter.write(Mono.just(formData), FORM_TYPE,, +					MediaType.APPLICATION_FORM_URLENCODED, outputMessage, context.hints());, +		};, +	}, +, +	private static <T> HttpMessageWriter<T> findMessageWriter(BodyInserter.Context context,, +			ResolvableType type,, +			MediaType mediaType) {, +, +		return context.messageWriters().get(), +				.filter(messageWriter -> messageWriter.canWrite(type, mediaType)), +				.findFirst(), +				.map(BodyInserters::<T>cast), +				.orElseThrow(() -> new IllegalStateException(]