[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionWrapper.java, + * Copyright 2002-2018 the original author or authors., +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionWrapper.java, + * Copyright 2002-2018 the original author or authors., +, +++ b/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java, +	private final ThreadLocal<TestContext> testContextHolder =, +			ThreadLocal.withInitial(() -> copyTestContext(TestContextManager.this.testContext));, +	public void afterTestExecution(Object testInstance, Method testMethod, @Nullable Throwable exception), +			throws Exception {, +, +, +, +	 * @param exception the exception that was thrown during execution of the test, +	 * method or by a TestExecutionListener, or {@code null} if none was thrown, +	public void afterTestMethod(Object testInstance, Method testMethod, @Nullable Throwable exception), +			throws Exception {, +, +, +, +			logger.trace(String.format("%s(): instance [%s], method [%s], exception [%s]",, +					callbackName, testInstance, testMethod, exception));, +, +	private void logException(, +			Throwable ex, String callbackName, TestExecutionListener testExecutionListener, Class<?> testClass) {, +, +, +		Constructor<? extends TestContext> constructor =, +				ClassUtils.getConstructorIfAvailable(testContext.getClass(), testContext.getClass());, +		// Fallback to original instance, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionWrapper.java, + * Copyright 2002-2018 the original author or authors., +, +++ b/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java, +	private final ThreadLocal<TestContext> testContextHolder =, +			ThreadLocal.withInitial(() -> copyTestContext(TestContextManager.this.testContext));, +	public void afterTestExecution(Object testInstance, Method testMethod, @Nullable Throwable exception), +			throws Exception {, +, +, +, +	 * @param exception the exception that was thrown during execution of the test, +	 * method or by a TestExecutionListener, or {@code null} if none was thrown, +	public void afterTestMethod(Object testInstance, Method testMethod, @Nullable Throwable exception), +			throws Exception {, +, +, +, +			logger.trace(String.format("%s(): instance [%s], method [%s], exception [%s]",, +					callbackName, testInstance, testMethod, exception));, +, +	private void logException(, +			Throwable ex, String callbackName, TestExecutionListener testExecutionListener, Class<?> testClass) {, +, +, +		Constructor<? extends TestContext> constructor =, +				ClassUtils.getConstructorIfAvailable(testContext.getClass(), testContext.getClass());, +		// Fallback to original instance, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/CompositeRequestCondition.java, + * Copyright 2002-2018 the original author or authors., +	 * Return the underlying conditions (possibly empty but never {@code null})., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionWrapper.java, + * Copyright 2002-2018 the original author or authors., +, +++ b/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java, +	private final ThreadLocal<TestContext> testContextHolder =, +			ThreadLocal.withInitial(() -> copyTestContext(TestContextManager.this.testContext));, +	public void afterTestExecution(Object testInstance, Method testMethod, @Nullable Throwable exception), +			throws Exception {, +, +, +, +	 * @param exception the exception that was thrown during execution of the test, +	 * method or by a TestExecutionListener, or {@code null} if none was thrown, +	public void afterTestMethod(Object testInstance, Method testMethod, @Nullable Throwable exception), +			throws Exception {, +, +, +, +			logger.trace(String.format("%s(): instance [%s], method [%s], exception [%s]",, +					callbackName, testInstance, testMethod, exception));, +, +	private void logException(, +			Throwable ex, String callbackName, TestExecutionListener testExecutionListener, Class<?> testClass) {, +, +, +		Constructor<? extends TestContext> constructor =, +				ClassUtils.getConstructorIfAvailable(testContext.getClass(), testContext.getClass());, +		// Fallback to original instance, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/CompositeRequestCondition.java, + * Copyright 2002-2018 the original author or authors., +	 * Return the underlying conditions (possibly empty but never {@code null})., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ConsumesRequestCondition.java, + * Copyright 2002-2018 the original author or authors., +	 * or {@code null} if no expressions match, +, +			contentType = (StringUtils.hasLength(request.getContentType()) ?, +					MediaType.APPLICATION_OCTET_STREAM);, +]