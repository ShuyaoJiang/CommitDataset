[+++ b/build.gradle, +		optional("javax.mail:javax.mail-api:1.5.2"), +++ b/build.gradle, +		optional("javax.mail:javax.mail-api:1.5.2"), +++ b/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java, +import javax.mail.internet.MimeUtility;, +, +	private Charset multipartCharset;, +, +	 * Set the character set to use when writing multipart data to encode file, +	 * names. Encoding is based on the encoded-word syntax defined in RFC 2047, +	 * and relies on the MimeUtility class from "javax.mail-api"., +	 * <p>If not set file names will be encoded as US-ASCII., +	 * @param multipartCharset the charset to use, +	 * @see <a href="http://en.wikipedia.org/wiki/MIME#Encoded-Word">Encoded-Word</a>, +	 */, +	public void setMultipartCharset(Charset multipartCharset) {, +		this.multipartCharset = multipartCharset;, +	}, +, +	/**, +			String filename = resource.getFilename();, +			if (multipartCharset != null) {, +				try {, +					filename = MimeUtility.encodeText(filename, multipartCharset.name(), null);, +				}, +				catch (UnsupportedEncodingException e) {, +					// should not happen, +					throw new IllegalStateException(e);, +				}, +			}, +			return filename;, +++ b/build.gradle, +		optional("javax.mail:javax.mail-api:1.5.2"), +++ b/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java, +import javax.mail.internet.MimeUtility;, +, +	private Charset multipartCharset;, +, +	 * Set the character set to use when writing multipart data to encode file, +	 * names. Encoding is based on the encoded-word syntax defined in RFC 2047, +	 * and relies on the MimeUtility class from "javax.mail-api"., +	 * <p>If not set file names will be encoded as US-ASCII., +	 * @param multipartCharset the charset to use, +	 * @see <a href="http://en.wikipedia.org/wiki/MIME#Encoded-Word">Encoded-Word</a>, +	 */, +	public void setMultipartCharset(Charset multipartCharset) {, +		this.multipartCharset = multipartCharset;, +	}, +, +	/**, +			String filename = resource.getFilename();, +			if (multipartCharset != null) {, +				try {, +					filename = MimeUtility.encodeText(filename, multipartCharset.name(), null);, +				}, +				catch (UnsupportedEncodingException e) {, +					// should not happen, +					throw new IllegalStateException(e);, +				}, +			}, +			return filename;, +++ b/spring-web/src/test/java/org/springframework/http/converter/FormHttpMessageConverterTests.java, +, +		// SPR-12108, +, +		Resource utf8 = new ClassPathResource("/org/springframework/http/converter/logo.jpg") {, +			@Override, +			public String getFilename() {, +				return "Hall\u00F6le.jpg";, +			}, +		};, +		parts.add("utf8", utf8);, +, +		converter.setMultipartCharset(Charset.forName("UTF-8"));, +		assertEquals(6, items.size());, +		assertFalse(item.isFormField());, +		assertEquals("utf8", item.getFieldName());, +		assertEquals("Hall\u00F6le.jpg", item.getName());, +		assertEquals("image/jpeg", item.getContentType());, +		assertEquals(logo.getFile().length(), item.getSize());, +, +		item = items.get(5);]