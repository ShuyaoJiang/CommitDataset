[+++ b/spring-web/src/main/java/org/springframework/web/util/pattern/PathPattern.java, +	/**, +	 * Comparator that sorts patterns by specificity as follows:, +	 * <ol>, +	 * <li>Null instances are last., +	 * <li>Catch-all patterns are last., +	 * <li>If both patterns are catch-all, consider the length (longer wins)., +	 * <li>Compare wildcard and captured variable count (lower wins)., +	 * <li>Consider length (longer wins), +	 * </ol>, +	 */, +	public static final Comparator<PathPattern> SPECIFICITY_COMPARATOR =, +			Comparator.nullsLast(, +					Comparator.<PathPattern>, +							comparingInt(p -> p.isCatchAll() ? 1 : 0), +							.thenComparingInt(p -> p.isCatchAll() ? -1 * p.getNormalizedLength() : 0), +							.thenComparing(PathPattern::getScore), +							.thenComparingInt(p -> -1 * p.getNormalizedLength()), +			);, +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/PathPattern.java, +	/**, +	 * Comparator that sorts patterns by specificity as follows:, +	 * <ol>, +	 * <li>Null instances are last., +	 * <li>Catch-all patterns are last., +	 * <li>If both patterns are catch-all, consider the length (longer wins)., +	 * <li>Compare wildcard and captured variable count (lower wins)., +	 * <li>Consider length (longer wins), +	 * </ol>, +	 */, +	public static final Comparator<PathPattern> SPECIFICITY_COMPARATOR =, +			Comparator.nullsLast(, +					Comparator.<PathPattern>, +							comparingInt(p -> p.isCatchAll() ? 1 : 0), +							.thenComparingInt(p -> p.isCatchAll() ? -1 * p.getNormalizedLength() : 0), +							.thenComparing(PathPattern::getScore), +							.thenComparingInt(p -> -1 * p.getNormalizedLength()), +			);, +++ b/spring-web/src/test/java/org/springframework/web/util/pattern/PathPatternTests.java, +	public void patternCompareWithNull() {, +		assertTrue(PathPattern.SPECIFICITY_COMPARATOR.compare(null, null) == 0);, +		assertTrue(PathPattern.SPECIFICITY_COMPARATOR.compare(parse("/abc"), null) < 0);, +		assertTrue(PathPattern.SPECIFICITY_COMPARATOR.compare(null, parse("/abc")) > 0);]