[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockMultipartHttpServletRequestBuilder.java, + * Copyright 2002-2017 the original author or authors., +import java.util.Collection;, +import javax.servlet.http.Part;, +import org.springframework.util.Assert;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import org.springframework.web.multipart.support.StandardMultipartHttpServletRequest;, +	private final MultiValueMap<String, Part> parts = new LinkedMultiValueMap<>();, +, +	/**, +	 * Add {@link Part} components to the request., +	 * @param parts one or more parts to add, +	 * @since 5.0, +	 */, +	public MockMultipartHttpServletRequestBuilder part(Part... parts) {, +		Assert.notEmpty(parts, "'parts' must not be empty");, +		for (Part part : parts) {, +			this.parts.add(part.getName(), part);, +		}, +		return this;, +	}, +, +				parentBuilder.parts.keySet().stream().forEach(name ->, +						this.parts.putIfAbsent(name, parentBuilder.parts.get(name)));, +, +, +		this.files.stream().forEach(request::addFile);, +		this.parts.values().stream().flatMap(Collection::stream).forEach(request::addPart);, +, +		if (!this.parts.isEmpty()) {, +			new StandardMultipartHttpServletRequest(request), +					.getMultiFileMap().values().stream().flatMap(Collection::stream), +					.forEach(request::addFile);, +, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockMultipartHttpServletRequestBuilder.java, + * Copyright 2002-2017 the original author or authors., +import java.util.Collection;, +import javax.servlet.http.Part;, +import org.springframework.util.Assert;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import org.springframework.web.multipart.support.StandardMultipartHttpServletRequest;, +	private final MultiValueMap<String, Part> parts = new LinkedMultiValueMap<>();, +, +	/**, +	 * Add {@link Part} components to the request., +	 * @param parts one or more parts to add, +	 * @since 5.0, +	 */, +	public MockMultipartHttpServletRequestBuilder part(Part... parts) {, +		Assert.notEmpty(parts, "'parts' must not be empty");, +		for (Part part : parts) {, +			this.parts.add(part.getName(), part);, +		}, +		return this;, +	}, +, +				parentBuilder.parts.keySet().stream().forEach(name ->, +						this.parts.putIfAbsent(name, parentBuilder.parts.get(name)));, +, +, +		this.files.stream().forEach(request::addFile);, +		this.parts.values().stream().flatMap(Collection::stream).forEach(request::addPart);, +, +		if (!this.parts.isEmpty()) {, +			new StandardMultipartHttpServletRequest(request), +					.getMultiFileMap().values().stream().flatMap(Collection::stream), +					.forEach(request::addFile);, +, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.java, + * Copyright 2002-2017 the original author or authors., +	 * @since 5.0, +	public static MockMultipartHttpServletRequestBuilder multipart(String urlTemplate, Object... uriVars) {, +		return new MockMultipartHttpServletRequestBuilder(urlTemplate, uriVars);, +	}, +, +	/**, +	 * Create a {@link MockMultipartHttpServletRequestBuilder} for a multipart request., +	 * @param uri the URL, +	 * @since 5.0, +	 */, +	public static MockMultipartHttpServletRequestBuilder multipart(URI uri) {, +		return new MockMultipartHttpServletRequestBuilder(uri);, +	}, +, +	/**, +	 * Create a {@link MockMultipartHttpServletRequestBuilder} for a multipart request., +	 * @param urlTemplate a URL template; the resulting URL will be encoded, +	 * @param uriVars zero or more URI variables, +	 * @deprecated in favor of {@link #multipart(String, Object...)}, +	 */, +	@Deprecated, +	 * @deprecated in favor of {@link #multipart(URI)}, +	@Deprecated, +, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockMultipartHttpServletRequestBuilder.java, + * Copyright 2002-2017 the original author or authors., +import java.util.Collection;, +import javax.servlet.http.Part;]