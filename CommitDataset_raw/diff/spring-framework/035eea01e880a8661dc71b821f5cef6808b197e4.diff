[+++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import org.springframework.http.converter.HttpMessageConverter;, +					parameterNameDiscoverer, customArgumentResolvers, new HttpMessageConverter[0]);, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import org.springframework.http.converter.HttpMessageConverter;, +					parameterNameDiscoverer, customArgumentResolvers, new HttpMessageConverter[0]);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/bind/annotation/RequestBody.java, +package org.springframework.web.bind.annotation;, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +/**, + * Annotation which indicates that a method parameter should be bound to the web request body. Supported for annotated, + * handler methods in Servlet environments., + *, + * @author Arjen Poutsma, + * @see RequestHeader, + * @see org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter, + * @since 3.0, + */, +@Target(ElementType.PARAMETER), +@Retention(RetentionPolicy.RUNTIME), +@Documented, +public @interface RequestBody {, +, +}, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import org.springframework.http.converter.HttpMessageConverter;, +					parameterNameDiscoverer, customArgumentResolvers, new HttpMessageConverter[0]);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/bind/annotation/RequestBody.java, +package org.springframework.web.bind.annotation;, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +/**, + * Annotation which indicates that a method parameter should be bound to the web request body. Supported for annotated, + * handler methods in Servlet environments., + *, + * @author Arjen Poutsma, + * @see RequestHeader, + * @see org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter, + * @since 3.0, + */, +@Target(ElementType.PARAMETER), +@Retention(RetentionPolicy.RUNTIME), +@Documented, +public @interface RequestBody {, +, +}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodInvoker.java, +import java.util.ArrayList;, +import java.util.List;, +import org.springframework.http.HttpInputMessage;, +import org.springframework.http.MediaType;, +import org.springframework.http.converter.HttpMessageConverter;, +import org.springframework.web.HttpMediaTypeNotSupportedException;, +import org.springframework.web.bind.annotation.RequestBody;, +	private final HttpMessageConverter[] messageConverters;, +, +		this(methodResolver, bindingInitializer, new DefaultSessionAttributeStore(), null, new WebArgumentResolver[0],, +				new HttpMessageConverter[0]);, +			WebArgumentResolver[] customArgumentResolvers, HttpMessageConverter[] messageConverters) {, +		this.messageConverters = messageConverters;, +			boolean requestBodyFound = false;, +				else if (RequestBody.class.isInstance(paramAnn)) {, +					requestBodyFound = true;, +					found++;, +				}, +			else if (requestBodyFound) {, +				args[i] = resolveRequestBody(methodParam, webRequest, handler);, +			}, +	/**, +	 * Resolves the given {@link RequestBody @RequestBody} annotation., +	 * Throws an UnsupportedOperationException by default., +	 */, +	@SuppressWarnings("unchecked"), +	protected Object resolveRequestBody(MethodParameter methodParam, NativeWebRequest webRequest, Object handler), +			throws Exception {, +, +		HttpInputMessage inputMessage = createHttpInputMessage(webRequest);, +, +		Class paramType = methodParam.getParameterType();, +		MediaType contentType = inputMessage.getHeaders().getContentType();, +		if (contentType == null) {, +			throw new IllegalStateException("Cannot extract response: no Content-Type found");, +		}, +		List<MediaType> allSupportedMediaTypes = new ArrayList<MediaType>();, +		for (HttpMessageConverter<?> messageConverter : messageConverters) {, +			allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes());, +			if (messageConverter.supports(paramType)) {, +				for (MediaType supportedMediaType : messageConverter.getSupportedMediaTypes()) {, +					if (supportedMediaType.includes(contentType)) {]