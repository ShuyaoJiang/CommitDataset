[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +import org.springframework.core.NamedThreadLocal;, +	private static final NamedThreadLocal<InjectionPoint> currentInjectionPoint =, +			new NamedThreadLocal<InjectionPoint>("Current injection point");, +, +		if (InjectionPoint.class.isAssignableFrom(param.getParameterType())) {, +			InjectionPoint injectionPoint = currentInjectionPoint.get();, +			if (injectionPoint == null) {, +				throw new IllegalStateException("No current InjectionPoint available for " + param);, +			}, +			return injectionPoint;, +		}, +, +	static InjectionPoint setCurrentInjectionPoint(InjectionPoint injectionPoint) {, +		InjectionPoint old = currentInjectionPoint.get();, +		if (injectionPoint != null) {, +			currentInjectionPoint.set(injectionPoint);, +		}, +		else {, +			currentInjectionPoint.remove();, +		}, +		return old;, +	}, +, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +import org.springframework.core.NamedThreadLocal;, +	private static final NamedThreadLocal<InjectionPoint> currentInjectionPoint =, +			new NamedThreadLocal<InjectionPoint>("Current injection point");, +, +		if (InjectionPoint.class.isAssignableFrom(param.getParameterType())) {, +			InjectionPoint injectionPoint = currentInjectionPoint.get();, +			if (injectionPoint == null) {, +				throw new IllegalStateException("No current InjectionPoint available for " + param);, +			}, +			return injectionPoint;, +		}, +, +	static InjectionPoint setCurrentInjectionPoint(InjectionPoint injectionPoint) {, +		InjectionPoint old = currentInjectionPoint.get();, +		if (injectionPoint != null) {, +			currentInjectionPoint.set(injectionPoint);, +		}, +		else {, +			currentInjectionPoint.remove();, +		}, +		return old;, +	}, +, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +import org.springframework.beans.factory.InjectionPoint;, +		InjectionPoint previousInjectionPoint = ConstructorResolver.setCurrentInjectionPoint(descriptor);, +		try {, +		finally {, +			ConstructorResolver.setCurrentInjectionPoint(previousInjectionPoint);, +		}, +	}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +import org.springframework.core.NamedThreadLocal;, +	private static final NamedThreadLocal<InjectionPoint> currentInjectionPoint =, +			new NamedThreadLocal<InjectionPoint>("Current injection point");, +, +		if (InjectionPoint.class.isAssignableFrom(param.getParameterType())) {, +			InjectionPoint injectionPoint = currentInjectionPoint.get();, +			if (injectionPoint == null) {, +				throw new IllegalStateException("No current InjectionPoint available for " + param);, +			}, +			return injectionPoint;, +		}, +, +	static InjectionPoint setCurrentInjectionPoint(InjectionPoint injectionPoint) {, +		InjectionPoint old = currentInjectionPoint.get();, +		if (injectionPoint != null) {, +			currentInjectionPoint.set(injectionPoint);, +		}, +		else {, +			currentInjectionPoint.remove();, +		}, +		return old;, +	}, +, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +import org.springframework.beans.factory.InjectionPoint;, +		InjectionPoint previousInjectionPoint = ConstructorResolver.setCurrentInjectionPoint(descriptor);, +		try {, +		finally {, +			ConstructorResolver.setCurrentInjectionPoint(previousInjectionPoint);, +		}, +	}, +++ b/spring-context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassProcessingTests.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.beans.factory.InjectionPoint;, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor;, +import org.springframework.beans.factory.annotation.Qualifier;, +import org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver;, +import org.springframework.beans.factory.config.DependencyDescriptor;, +	private DefaultListableBeanFactory initBeanFactory(Class<?>... configClasses) {]