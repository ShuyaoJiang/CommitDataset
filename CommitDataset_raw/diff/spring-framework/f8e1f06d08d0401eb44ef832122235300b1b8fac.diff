[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistration.java, + * Copyright 2002-2013 the original author or authors., +		return this.pathPatterns;, +	}, +, +	protected List<ResourceResolver> getResourceResolvers() {, +		return this.resourceResolvers;, +	}, +, +	protected List<ResourceTransformer> getResourceTransformers() {, +		return this.resourceTransformers;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistration.java, + * Copyright 2002-2013 the original author or authors., +		return this.pathPatterns;, +	}, +, +	protected List<ResourceResolver> getResourceResolvers() {, +		return this.resourceResolvers;, +	}, +, +	protected List<ResourceTransformer> getResourceTransformers() {, +		return this.resourceTransformers;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistry.java, + * Copyright 2002-2013 the original author or authors., +import java.util.Arrays;, +import org.springframework.web.servlet.resource.ResourceResolver;, +import org.springframework.web.servlet.resource.ResourceTransformer;, +	private List<ResourceResolver> resourceResolvers;, +, +	private List<ResourceTransformer> resourceTransformers;, +, +, +	 * Whether a resource handler has already been registered for the given pathPattern., +	 */, +	public boolean hasMappingForPattern(String pathPattern) {, +		for (ResourceHandlerRegistration registration : registrations) {, +			if (Arrays.asList(registration.getPathPatterns()).contains(pathPattern)) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +	/**, +	 * Configure the {@link ResourceResolver}s to use by default in resource handlers that, +	 * don't have them set., +	 */, +	public void setResourceResolvers(List<ResourceResolver> resourceResolvers) {, +		this.resourceResolvers = resourceResolvers;, +	}, +, +	/**, +	 * Configure the {@link ResourceTransformer}s to use by default in resource handlers, +	 * that don't have them set., +	 */, +	public void setResourceTransformers(List<ResourceTransformer> transformers) {, +		this.resourceTransformers = transformers;, +	}, +, +	/**, +				ResourceHttpRequestHandler handler = registration.getRequestHandler();, +				handler.setServletContext(servletContext);, +				handler.setApplicationContext(applicationContext);, +				if ((this.resourceResolvers != null) && (registration.getResourceResolvers() == null)) {, +					handler.setResourceResolvers(this.resourceResolvers);, +				}, +				if ((this.resourceTransformers != null) && (registration.getResourceTransformers() == null)) {, +					handler.setResourceTransformers(this.resourceTransformers);, +				}, +					handler.afterPropertiesSet();, +				urlMap.put(pathPattern, handler);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistration.java, + * Copyright 2002-2013 the original author or authors., +		return this.pathPatterns;, +	}, +, +	protected List<ResourceResolver> getResourceResolvers() {, +		return this.resourceResolvers;, +	}, +, +	protected List<ResourceTransformer> getResourceTransformers() {, +		return this.resourceTransformers;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ResourceHandlerRegistry.java, + * Copyright 2002-2013 the original author or authors., +import java.util.Arrays;, +import org.springframework.web.servlet.resource.ResourceResolver;, +import org.springframework.web.servlet.resource.ResourceTransformer;, +	private List<ResourceResolver> resourceResolvers;, +, +	private List<ResourceTransformer> resourceTransformers;, +, +, +	 * Whether a resource handler has already been registered for the given pathPattern., +	 */, +	public boolean hasMappingForPattern(String pathPattern) {, +		for (ResourceHandlerRegistration registration : registrations) {, +			if (Arrays.asList(registration.getPathPatterns()).contains(pathPattern)) {, +				return true;, +			}, +		}]