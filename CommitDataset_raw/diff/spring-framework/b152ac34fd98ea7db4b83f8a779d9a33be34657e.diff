[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java, +	 * @deprecated as of Spring 3.0, in favor of PropertyEditorRegistrars or ConversionService usage, +	@Deprecated, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java, +	 * @deprecated as of Spring 3.0, in favor of PropertyEditorRegistrars or ConversionService usage, +	@Deprecated, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/CustomEditorConfigurer.java, +import org.springframework.beans.PropertyEditorRegistry;, +import org.springframework.beans.PropertyEditorRegistrySupport;, +	private Map<String, ?> customEditors;, +	 * <p>Also supports {@link PropertyEditor} instances as values; however,, +	 * this is deprecated since Spring 2.0.7!, +	public void setCustomEditors(Map<String, ?> customEditors) {, +			for (Map.Entry<String, ?> entry : this.customEditors.entrySet()) {, +				Object value = entry.getValue();, +					if (value instanceof PropertyEditor) {, +						if (logger.isWarnEnabled()) {, +							logger.warn("Passing PropertyEditor instances into CustomEditorConfigurer is deprecated: " +, +									"use PropertyEditorRegistrars or PropertyEditor class names instead. " +, +									"Offending key [" + key + "; offending editor instance: " + value);, +						}, +						beanFactory.addPropertyEditorRegistrar(, +								new SharedPropertyEditorRegistrar(requiredType, (PropertyEditor) value));, +					}, +					else if (value instanceof Class) {, +						beanFactory.registerCustomEditor(requiredType, (Class) value);, +					}, +					else if (value instanceof String) {, +						Class editorClass = ClassUtils.forName((String) value, this.beanClassLoader);, +					else {, +						throw new IllegalArgumentException("Mapped value [" + value + "] for custom editor key [" +, +								key + "] is not of required type [" + PropertyEditor.class.getName() +, +								"] or a corresponding Class or String value indicating a PropertyEditor implementation");, +					}, +				}, +, +	/**, +	 * PropertyEditorRegistrar that registers a (deprecated) shared editor., +	 */, +	private static class SharedPropertyEditorRegistrar implements PropertyEditorRegistrar {, +, +		private final Class requiredType;, +, +		private final PropertyEditor sharedEditor;, +, +		public SharedPropertyEditorRegistrar(Class requiredType, PropertyEditor sharedEditor) {, +			this.requiredType = requiredType;, +			this.sharedEditor = sharedEditor;, +		}, +, +		public void registerCustomEditors(PropertyEditorRegistry registry) {, +			if (!(registry instanceof PropertyEditorRegistrySupport)) {, +				throw new IllegalArgumentException("Cannot registered shared editor " +, +						"on non-PropertyEditorRegistrySupport registry: " + registry);, +			}, +			((PropertyEditorRegistrySupport) registry).registerSharedEditor(this.requiredType, this.sharedEditor);, +		}, +	}, +, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java, +	 * @deprecated as of Spring 3.0, in favor of PropertyEditorRegistrars or ConversionService usage, +	@Deprecated, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/CustomEditorConfigurer.java, +import org.springframework.beans.PropertyEditorRegistry;, +import org.springframework.beans.PropertyEditorRegistrySupport;, +	private Map<String, ?> customEditors;, +	 * <p>Also supports {@link PropertyEditor} instances as values; however,, +	 * this is deprecated since Spring 2.0.7!, +	public void setCustomEditors(Map<String, ?> customEditors) {, +			for (Map.Entry<String, ?> entry : this.customEditors.entrySet()) {, +				Object value = entry.getValue();, +					if (value instanceof PropertyEditor) {, +						if (logger.isWarnEnabled()) {, +							logger.warn("Passing PropertyEditor instances into CustomEditorConfigurer is deprecated: " +, +									"use PropertyEditorRegistrars or PropertyEditor class names instead. " +, +									"Offending key [" + key + "; offending editor instance: " + value);, +						}, +						beanFactory.addPropertyEditorRegistrar(, +								new SharedPropertyEditorRegistrar(requiredType, (PropertyEditor) value));, +					}, +					else if (value instanceof Class) {, +						beanFactory.registerCustomEditor(requiredType, (Class) value);, +					}, +					else if (value instanceof String) {, +						Class editorClass = ClassUtils.forName((String) value, this.beanClassLoader);, +					else {, +						throw new IllegalArgumentException("Mapped value [" + value + "] for custom editor key [" +, +								key + "] is not of required type [" + PropertyEditor.class.getName() +, +								"] or a corresponding Class or String value indicating a PropertyEditor implementation");, +					}, +				}, +, +	/**, +	 * PropertyEditorRegistrar that registers a (deprecated) shared editor., +	 */, +	private static class SharedPropertyEditorRegistrar implements PropertyEditorRegistrar {, +, +		private final Class requiredType;, +]