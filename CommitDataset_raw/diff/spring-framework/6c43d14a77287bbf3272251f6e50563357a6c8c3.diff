[+++ b/spring-aop/src/main/java/org/springframework/aop/support/annotation/AnnotationClassFilter.java, + * Copyright 2002-2017 the original author or authors., +	 * @param checkInherited whether to also check the superclasses and, +	 * interfaces as well as meta-annotations for the annotation type, +	 * (i.e. whether to use {@link AnnotationUtils#findAnnotation(Class, Class)}, +	 * semantics instead of standard Java {@link Class#isAnnotationPresent}), +++ b/spring-aop/src/main/java/org/springframework/aop/support/annotation/AnnotationClassFilter.java, + * Copyright 2002-2017 the original author or authors., +	 * @param checkInherited whether to also check the superclasses and, +	 * interfaces as well as meta-annotations for the annotation type, +	 * (i.e. whether to use {@link AnnotationUtils#findAnnotation(Class, Class)}, +	 * semantics instead of standard Java {@link Class#isAnnotationPresent}), +++ b/spring-aop/src/main/java/org/springframework/aop/support/annotation/AnnotationMatchingPointcut.java, + * Copyright 2002-2017 the original author or authors., +		this(classAnnotationType, false);, +	 * @param checkInherited whether to also check the superclasses and interfaces, +	 * as well as meta-annotations for the annotation type, +	 * @see AnnotationClassFilter#AnnotationClassFilter(Class, boolean), +		this(classAnnotationType, methodAnnotationType, false);, +	}, +, +	/**, +	 * Create a new AnnotationMatchingPointcut for the given annotation type., +	 * @param classAnnotationType the annotation type to look for at the class level, +	 * (can be {@code null}), +	 * @param methodAnnotationType the annotation type to look for at the method level, +	 * (can be {@code null}), +	 * @param checkInherited whether to also check the superclasses and interfaces, +	 * as well as meta-annotations for the annotation type, +	 * @since 5.0, +	 * @see AnnotationClassFilter#AnnotationClassFilter(Class, boolean), +	 * @see AnnotationMethodMatcher#AnnotationMethodMatcher(Class, boolean), +	 */, +	public AnnotationMatchingPointcut(Class<? extends Annotation> classAnnotationType,, +			Class<? extends Annotation> methodAnnotationType, boolean checkInherited) {, +, +			this.classFilter = new AnnotationClassFilter(classAnnotationType, checkInherited);, +			this.methodMatcher = new AnnotationMethodMatcher(methodAnnotationType, checkInherited);, +++ b/spring-aop/src/main/java/org/springframework/aop/support/annotation/AnnotationClassFilter.java, + * Copyright 2002-2017 the original author or authors., +	 * @param checkInherited whether to also check the superclasses and, +	 * interfaces as well as meta-annotations for the annotation type, +	 * (i.e. whether to use {@link AnnotationUtils#findAnnotation(Class, Class)}, +	 * semantics instead of standard Java {@link Class#isAnnotationPresent}), +++ b/spring-aop/src/main/java/org/springframework/aop/support/annotation/AnnotationMatchingPointcut.java, + * Copyright 2002-2017 the original author or authors., +		this(classAnnotationType, false);, +	 * @param checkInherited whether to also check the superclasses and interfaces, +	 * as well as meta-annotations for the annotation type, +	 * @see AnnotationClassFilter#AnnotationClassFilter(Class, boolean), +		this(classAnnotationType, methodAnnotationType, false);, +	}, +, +	/**, +	 * Create a new AnnotationMatchingPointcut for the given annotation type., +	 * @param classAnnotationType the annotation type to look for at the class level, +	 * (can be {@code null}), +	 * @param methodAnnotationType the annotation type to look for at the method level, +	 * (can be {@code null}), +	 * @param checkInherited whether to also check the superclasses and interfaces, +	 * as well as meta-annotations for the annotation type, +	 * @since 5.0, +	 * @see AnnotationClassFilter#AnnotationClassFilter(Class, boolean), +	 * @see AnnotationMethodMatcher#AnnotationMethodMatcher(Class, boolean), +	 */, +	public AnnotationMatchingPointcut(Class<? extends Annotation> classAnnotationType,, +			Class<? extends Annotation> methodAnnotationType, boolean checkInherited) {, +, +			this.classFilter = new AnnotationClassFilter(classAnnotationType, checkInherited);, +			this.methodMatcher = new AnnotationMethodMatcher(methodAnnotationType, checkInherited);, +++ b/spring-aop/src/main/java/org/springframework/aop/support/annotation/AnnotationMethodMatcher.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.core.annotation.AnnotationUtils;, +	private final boolean checkInherited;, +, +		this(annotationType, false);, +	}, +, +	/**, +	 * Create a new AnnotationClassFilter for the given annotation type., +	 * @param annotationType the annotation type to look for, +	 * @param checkInherited whether to also check the superclasses and, +	 * interfaces as well as meta-annotations for the annotation type, +	 * (i.e. whether to use {@link AnnotationUtils#findAnnotation(Method, Class)}, +	 * semantics instead of standard Java {@link Method#isAnnotationPresent}), +	 * @since 5.0, +	 */, +	public AnnotationMethodMatcher(Class<? extends Annotation> annotationType, boolean checkInherited) {, +		this.checkInherited = checkInherited;, +, +		if (matchesMethod(method)) {, +		return (specificMethod != method && matchesMethod(specificMethod));, +	}, +, +	private boolean matchesMethod(Method method) {, +		return (this.checkInherited ?, +				(AnnotationUtils.findAnnotation(method, this.annotationType) != null) :, +				method.isAnnotationPresent(this.annotationType));, +++ b/spring-aop/src/main/java/org/springframework/aop/support/annotation/AnnotationClassFilter.java, + * Copyright 2002-2017 the original author or authors.]