[+++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, +	 * Configure a custom serializer for the given type., +	 * @see #serializers(JsonSerializer...), +	 * @since 4.1.2, +	 */, +	public Jackson2ObjectMapperBuilder serializerByType(Class<?> type, JsonSerializer<?> serializer) {, +		if (serializers != null) {, +			this.serializers.put(type, serializer);, +		}, +		return this;, +	}, +, +	/**, +	 * Configure a custom deserializer for the given type., +	 * @since 4.1.2, +	 */, +	public Jackson2ObjectMapperBuilder deserializerByType(Class<?> type, JsonDeserializer<?> deserializer) {, +		if (deserializers != null) {, +			this.deserializers.put(type, deserializer);, +		}, +		return this;, +	}, +, +	/**, +	 * @param target class (or interface) whose annotations to effectively override, +	 * @param mixinSource class (or interface) whose annotations are to be "added", +	 * to target's annotations as value, +	 * @since 4.1.2, +	 * @see com.fasterxml.jackson.databind.ObjectMapper#addMixInAnnotations(Class, Class), +	 */, +	public Jackson2ObjectMapperBuilder mixIn(Class<?> target, Class<?> mixinSource) {, +		if (mixIns != null) {, +			this.mixIns.put(target, mixinSource);, +		}, +		return this;, +	}, +, +	/**, +	 * Add mix-in annotations to use for augmenting specified class or interface., +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, +	 * Configure a custom serializer for the given type., +	 * @see #serializers(JsonSerializer...), +	 * @since 4.1.2, +	 */, +	public Jackson2ObjectMapperBuilder serializerByType(Class<?> type, JsonSerializer<?> serializer) {, +		if (serializers != null) {, +			this.serializers.put(type, serializer);, +		}, +		return this;, +	}, +, +	/**, +	 * Configure a custom deserializer for the given type., +	 * @since 4.1.2, +	 */, +	public Jackson2ObjectMapperBuilder deserializerByType(Class<?> type, JsonDeserializer<?> deserializer) {, +		if (deserializers != null) {, +			this.deserializers.put(type, deserializer);, +		}, +		return this;, +	}, +, +	/**, +	 * @param target class (or interface) whose annotations to effectively override, +	 * @param mixinSource class (or interface) whose annotations are to be "added", +	 * to target's annotations as value, +	 * @since 4.1.2, +	 * @see com.fasterxml.jackson.databind.ObjectMapper#addMixInAnnotations(Class, Class), +	 */, +	public Jackson2ObjectMapperBuilder mixIn(Class<?> target, Class<?> mixinSource) {, +		if (mixIns != null) {, +			this.mixIns.put(target, mixinSource);, +		}, +		return this;, +	}, +, +	/**, +	 * Add mix-in annotations to use for augmenting specified class or interface., +++ b/spring-web/src/test/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilderTests.java, +import com.fasterxml.jackson.databind.JsonMappingException;, +import com.fasterxml.jackson.databind.deser.Deserializers;, +	public void serializerByType() {, +		JsonSerializer<Number> serializer = new NumberSerializer();, +		ObjectMapper objectMapper = Jackson2ObjectMapperBuilder.json(), +				.serializerByType(Boolean.class, serializer).build();, +		assertTrue(getSerializerFactoryConfig(objectMapper).hasSerializers());, +		Serializers serializers = getSerializerFactoryConfig(objectMapper).serializers().iterator().next();, +		assertTrue(serializers.findSerializer(null, SimpleType.construct(Boolean.class), null) == serializer);, +	}, +, +	@Test, +	public void deserializerByType() throws JsonMappingException {, +		JsonDeserializer<Date> deserializer = new DateDeserializers.DateDeserializer();, +		ObjectMapper objectMapper = Jackson2ObjectMapperBuilder.json(), +				.deserializerByType(Date.class, deserializer).build();, +		assertTrue(getDeserializerFactoryConfig(objectMapper).hasDeserializers());, +		Deserializers deserializers = getDeserializerFactoryConfig(objectMapper).deserializers().iterator().next();, +		assertTrue(deserializers.findBeanDeserializer(SimpleType.construct(Date.class), null, null) == deserializer);, +	}, +]