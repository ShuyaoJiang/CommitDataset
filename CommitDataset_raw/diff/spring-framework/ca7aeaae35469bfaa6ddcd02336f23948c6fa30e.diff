[+++ b/spring-web-reactive/src/main/java/org/springframework/web/server/session/CookieWebSessionIdResolver.java, +import java.util.stream.Collectors;, +	public List<String> resolveSessionId(ServerWebExchange exchange) {, +		List<HttpCookie> cookies = cookieMap.get(getCookieName());, +		if (cookies == null) {, +			return Collections.emptyList();, +		}, +		return cookies.stream().map(HttpCookie::getValue).collect(Collectors.toList());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/server/session/CookieWebSessionIdResolver.java, +import java.util.stream.Collectors;, +	public List<String> resolveSessionId(ServerWebExchange exchange) {, +		List<HttpCookie> cookies = cookieMap.get(getCookieName());, +		if (cookies == null) {, +			return Collections.emptyList();, +		}, +		return cookies.stream().map(HttpCookie::getValue).collect(Collectors.toList());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java, +import java.util.List;, +import reactor.core.publisher.Flux;, +		return Flux.fromIterable(getSessionIdResolver().resolveSessionId(exchange)), +				.next(), +		List<String> requestedIds = getSessionIdResolver().resolveSessionId(exchange);, +		if (requestedIds.isEmpty() || !session.getId().equals(requestedIds.get(0))) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/server/session/CookieWebSessionIdResolver.java, +import java.util.stream.Collectors;, +	public List<String> resolveSessionId(ServerWebExchange exchange) {, +		List<HttpCookie> cookies = cookieMap.get(getCookieName());, +		if (cookies == null) {, +			return Collections.emptyList();, +		}, +		return cookies.stream().map(HttpCookie::getValue).collect(Collectors.toList());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java, +import java.util.List;, +import reactor.core.publisher.Flux;, +		return Flux.fromIterable(getSessionIdResolver().resolveSessionId(exchange)), +				.next(), +		List<String> requestedIds = getSessionIdResolver().resolveSessionId(exchange);, +		if (requestedIds.isEmpty() || !session.getId().equals(requestedIds.get(0))) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/server/session/WebSessionIdResolver.java, +import java.util.List;, +	 * Resolve the session id's associated with the request., +	 * @return the session id's or an empty list, +	List<String> resolveSessionId(ServerWebExchange exchange);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/server/session/CookieWebSessionIdResolver.java, +import java.util.stream.Collectors;, +	public List<String> resolveSessionId(ServerWebExchange exchange) {, +		List<HttpCookie> cookies = cookieMap.get(getCookieName());, +		if (cookies == null) {, +			return Collections.emptyList();, +		}, +		return cookies.stream().map(HttpCookie::getValue).collect(Collectors.toList());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java, +import java.util.List;, +import reactor.core.publisher.Flux;, +		return Flux.fromIterable(getSessionIdResolver().resolveSessionId(exchange)), +				.next(), +		List<String> requestedIds = getSessionIdResolver().resolveSessionId(exchange);, +		if (requestedIds.isEmpty() || !session.getId().equals(requestedIds.get(0))) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/server/session/WebSessionIdResolver.java, +import java.util.List;, +	 * Resolve the session id's associated with the request., +	 * @return the session id's or an empty list, +	List<String> resolveSessionId(ServerWebExchange exchange);, +++ b/spring-web-reactive/src/test/java/org/springframework/web/server/session/DefaultWebSessionManagerTests.java, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +import org.springframework.web.server.adapter.DefaultServerWebExchange;, +		this.idResolver.setIdsToResolve(Collections.emptyList());, +		this.idResolver.setIdsToResolve(Collections.emptyList());, +		this.idResolver.setIdsToResolve(Collections.emptyList());, +		this.idResolver.setIdsToResolve(Collections.singletonList("1"));, +		this.idResolver.setIdsToResolve(Collections.singletonList("1"));, +		private List<String> idsToResolve = new ArrayList<>();, +		public void setIdsToResolve(List<String> idsToResolve) {, +			this.idsToResolve = idsToResolve;, +		public List<String> resolveSessionId(ServerWebExchange exchange) {, +			return this.idsToResolve;]