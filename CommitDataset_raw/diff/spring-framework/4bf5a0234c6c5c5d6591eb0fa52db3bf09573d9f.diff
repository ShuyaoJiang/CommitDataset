[+++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/result/HeaderResultMatchers.java, +import static org.springframework.test.util.AssertionErrors.*;, +import static org.springframework.test.util.MatcherAssertionErrors.*;, +, +	 * Assert that the named response header does not exist., +	 * @since 4.0, +	 */, +	public ResultMatcher doesNotExist(final String name) {, +		return new ResultMatcher() {, +, +			@Override, +			public void match(MvcResult result) {, +				assertTrue("Response should not contain header " + name, !result.getResponse().containsHeader(name));, +			}, +		};, +	}, +, +	/**, +++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/result/HeaderResultMatchers.java, +import static org.springframework.test.util.AssertionErrors.*;, +import static org.springframework.test.util.MatcherAssertionErrors.*;, +, +	 * Assert that the named response header does not exist., +	 * @since 4.0, +	 */, +	public ResultMatcher doesNotExist(final String name) {, +		return new ResultMatcher() {, +, +			@Override, +			public void match(MvcResult result) {, +				assertTrue("Response should not contain header " + name, !result.getResponse().containsHeader(name));, +			}, +		};, +	}, +, +	/**, +++ b/spring-test-mvc/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/HeaderAssertionTests.java, +	}, +, +	// SPR-10771, +, +	@Test, +	public void doesNotExist() throws Exception {, +		this.mockMvc.perform(get("/persons/1")), +				.andExpect(header().doesNotExist("X-Custom-Header"));, +	}, +, +	// SPR-10771, +, +	@Test(expected = AssertionError.class), +	public void doesNotExistFail() throws Exception {, +		this.mockMvc.perform(get("/persons/1")), +				.andExpect(header().doesNotExist(LAST_MODIFIED));]