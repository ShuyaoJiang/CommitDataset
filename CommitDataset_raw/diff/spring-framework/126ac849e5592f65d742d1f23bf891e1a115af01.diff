[+++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpResponse.java, +++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpResponse.java, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponse.java, +public interface ClientHttpResponse extends ReactiveHttpInputMessage {, +++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpResponse.java, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponse.java, +public interface ClientHttpResponse extends ReactiveHttpInputMessage {, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponseDecorator.java, +++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpResponse.java, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponse.java, +public interface ClientHttpResponse extends ReactiveHttpInputMessage {, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponseDecorator.java, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpResponse.java, +++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpResponse.java, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponse.java, +public interface ClientHttpResponse extends ReactiveHttpInputMessage {, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponseDecorator.java, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpResponse.java, +++ b/spring-web/src/test/java/org/springframework/mock/http/client/reactive/test/MockClientHttpResponse.java, +++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpResponse.java, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponse.java, +public interface ClientHttpResponse extends ReactiveHttpInputMessage {, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponseDecorator.java, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpResponse.java, +++ b/spring-web/src/test/java/org/springframework/mock/http/client/reactive/test/MockClientHttpResponse.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, +public interface ClientResponse {, +++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpResponse.java, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponse.java, +public interface ClientHttpResponse extends ReactiveHttpInputMessage {, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponseDecorator.java, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpResponse.java, +++ b/spring-web/src/test/java/org/springframework/mock/http/client/reactive/test/MockClientHttpResponse.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, +public interface ClientResponse {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientResponse.java, +import org.springframework.core.io.buffer.DataBufferUtils;, +		if (Void.class.isAssignableFrom(elementClass)) {, +			return consumeAndCancel();, +		}, +		else {, +	}, +, +	@SuppressWarnings("unchecked"), +	private <T> Mono<T> consumeAndCancel() {, +		return (Mono<T>) this.response.getBody(), +				.map(buffer -> {, +					DataBufferUtils.release(buffer);, +					throw new ReadCancellationException();, +				}), +				.onErrorResume(ReadCancellationException.class, ex -> Mono.empty()), +				.then();, +	}, +		if (Void.class.isAssignableFrom(typeReference.getType().getClass())) {, +			return consumeAndCancel();, +		}, +		else {, +	}, +		if (Void.class.isAssignableFrom(elementClass)) {, +			return Flux.from(consumeAndCancel());, +		}, +		else {, +	}, +		if (Void.class.isAssignableFrom(typeReference.getType().getClass())) {, +			return Flux.from(consumeAndCancel());, +		}, +		else {, +	}, +		if (Void.class.isAssignableFrom(bodyType)) {, +			return toEntityInternal(consumeAndCancel());, +		}, +		else {, +	}, +		if (Void.class.isAssignableFrom(typeReference.getType().getClass())) {, +			return toEntityInternal(consumeAndCancel());, +		}, +		else {, +	}, +, +	@SuppressWarnings("serial"), +	private class ReadCancellationException extends RuntimeException {, +	}, +++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpResponse.java, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponse.java, +public interface ClientHttpResponse extends ReactiveHttpInputMessage {, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponseDecorator.java, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpResponse.java, +++ b/spring-web/src/test/java/org/springframework/mock/http/client/reactive/test/MockClientHttpResponse.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, +public interface ClientResponse {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientResponse.java, +import org.springframework.core.io.buffer.DataBufferUtils;, +		if (Void.class.isAssignableFrom(elementClass)) {, +			return consumeAndCancel();, +		}, +		else {, +	}, +, +	@SuppressWarnings("unchecked"), +	private <T> Mono<T> consumeAndCancel() {]