[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/RedirectView.java, +import java.net.URI;, +import java.net.URISyntaxException;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Set;, +, +import org.springframework.ui.Model;, +import org.springframework.web.util.UriTemplate;, +import org.springframework.web.util.UriUtils;, +, +, +		UriTemplate uriTemplate = createUriTemplate(targetUrl, enc);, +		if (uriTemplate.getVariableNames().size() > 0) {, +			targetUrl = new StringBuilder(uriTemplate.expand(model).toString());, +			model = removeKeys(model, uriTemplate.getVariableNames());, +		}, +		if (this.exposeModelAttributes) {, +	private UriTemplate createUriTemplate(StringBuilder targetUrl, final String encoding) {, +		return new UriTemplate(targetUrl.toString()) {, +			@Override, +			protected URI encodeUri(String uri) {, +				try {, +					String encoded = UriUtils.encodeUri(uri, encoding);, +					return new URI(encoded);, +				} catch (UnsupportedEncodingException ex) {, +					throw new IllegalStateException(ex);, +				} catch (URISyntaxException ex) {, +					throw new IllegalArgumentException("Could not create URI from [" + uri + "]: " + ex, ex);, +				}, +			}, +		};, +	}, +	, +	private static Map<String, Object> removeKeys(Map<String, Object> map, List<String> keysToRemove) {, +		Map<String, Object> result = new HashMap<String, Object>(map);, +		for (String key : keysToRemove) {, +			result.remove(key);, +		}, +		return result;, +	}, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/RedirectView.java, +import java.net.URI;, +import java.net.URISyntaxException;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Set;, +, +import org.springframework.ui.Model;, +import org.springframework.web.util.UriTemplate;, +import org.springframework.web.util.UriUtils;, +, +, +		UriTemplate uriTemplate = createUriTemplate(targetUrl, enc);, +		if (uriTemplate.getVariableNames().size() > 0) {, +			targetUrl = new StringBuilder(uriTemplate.expand(model).toString());, +			model = removeKeys(model, uriTemplate.getVariableNames());, +		}, +		if (this.exposeModelAttributes) {, +	private UriTemplate createUriTemplate(StringBuilder targetUrl, final String encoding) {, +		return new UriTemplate(targetUrl.toString()) {, +			@Override, +			protected URI encodeUri(String uri) {, +				try {, +					String encoded = UriUtils.encodeUri(uri, encoding);, +					return new URI(encoded);, +				} catch (UnsupportedEncodingException ex) {, +					throw new IllegalStateException(ex);, +				} catch (URISyntaxException ex) {, +					throw new IllegalArgumentException("Could not create URI from [" + uri + "]: " + ex, ex);, +				}, +			}, +		};, +	}, +	, +	private static Map<String, Object> removeKeys(Map<String, Object> map, List<String> keysToRemove) {, +		Map<String, Object> result = new HashMap<String, Object>(map);, +		for (String key : keysToRemove) {, +			result.remove(key);, +		}, +		return result;, +	}, +, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/view/RedirectViewUriTemplateTests.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */]