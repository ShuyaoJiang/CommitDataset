[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +		public <T extends S> T consumeWith(Consumer<EntityExchangeResult<B>> consumer) {, +			this.result.assertWithDiagnostics(() -> consumer.accept(this.result));, +			return new JsonPathAssertions(this, getBodyAsString(), expression, args);, +		public BodyContentSpec consumeWith(Consumer<EntityExchangeResult<byte[]>> consumer) {, +			this.result.assertWithDiagnostics(() -> consumer.accept(this.result));, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +		public <T extends S> T consumeWith(Consumer<EntityExchangeResult<B>> consumer) {, +			this.result.assertWithDiagnostics(() -> consumer.accept(this.result));, +			return new JsonPathAssertions(this, getBodyAsString(), expression, args);, +		public BodyContentSpec consumeWith(Consumer<EntityExchangeResult<byte[]>> consumer) {, +			this.result.assertWithDiagnostics(() -> consumer.accept(this.result));, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/JsonPathAssertions.java, +	private final String content;, +, +	JsonPathAssertions(WebTestClient.BodyContentSpec spec, String content, String expression, Object... args) {, +		this.content = content;, +		this.pathHelper.assertValue(this.content, expectedValue);, +		this.pathHelper.exists(this.content);, +		this.pathHelper.doesNotExist(this.content);, +		this.pathHelper.assertValueIsEmpty(this.content);, +		this.pathHelper.assertValueIsNotEmpty(this.content);, +		this.pathHelper.assertValueIsBoolean(this.content);, +		this.pathHelper.assertValueIsNumber(this.content);, +		this.pathHelper.assertValueIsArray(this.content);, +		this.pathHelper.assertValueIsMap(this.content);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +		public <T extends S> T consumeWith(Consumer<EntityExchangeResult<B>> consumer) {, +			this.result.assertWithDiagnostics(() -> consumer.accept(this.result));, +			return new JsonPathAssertions(this, getBodyAsString(), expression, args);, +		public BodyContentSpec consumeWith(Consumer<EntityExchangeResult<byte[]>> consumer) {, +			this.result.assertWithDiagnostics(() -> consumer.accept(this.result));, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/JsonPathAssertions.java, +	private final String content;, +, +	JsonPathAssertions(WebTestClient.BodyContentSpec spec, String content, String expression, Object... args) {, +		this.content = content;, +		this.pathHelper.assertValue(this.content, expectedValue);, +		this.pathHelper.exists(this.content);, +		this.pathHelper.doesNotExist(this.content);, +		this.pathHelper.assertValueIsEmpty(this.content);, +		this.pathHelper.assertValueIsNotEmpty(this.content);, +		this.pathHelper.assertValueIsBoolean(this.content);, +		this.pathHelper.assertValueIsNumber(this.content);, +		this.pathHelper.assertValueIsArray(this.content);, +		this.pathHelper.assertValueIsMap(this.content);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/WebTestClient.java, +		 * Assert the exchange result with the given {@link Consumer}., +		<T extends S> T consumeWith(Consumer<EntityExchangeResult<B>> consumer);, +		BodyContentSpec consumeWith(Consumer<EntityExchangeResult<byte[]>> consumer);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +		public <T extends S> T consumeWith(Consumer<EntityExchangeResult<B>> consumer) {, +			this.result.assertWithDiagnostics(() -> consumer.accept(this.result));, +			return new JsonPathAssertions(this, getBodyAsString(), expression, args);, +		public BodyContentSpec consumeWith(Consumer<EntityExchangeResult<byte[]>> consumer) {, +			this.result.assertWithDiagnostics(() -> consumer.accept(this.result));, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/JsonPathAssertions.java, +	private final String content;, +, +	JsonPathAssertions(WebTestClient.BodyContentSpec spec, String content, String expression, Object... args) {, +		this.content = content;, +		this.pathHelper.assertValue(this.content, expectedValue);, +		this.pathHelper.exists(this.content);, +		this.pathHelper.doesNotExist(this.content);, +		this.pathHelper.assertValueIsEmpty(this.content);, +		this.pathHelper.assertValueIsNotEmpty(this.content);, +		this.pathHelper.assertValueIsBoolean(this.content);, +		this.pathHelper.assertValueIsNumber(this.content);, +		this.pathHelper.assertValueIsArray(this.content);, +		this.pathHelper.assertValueIsMap(this.content);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/WebTestClient.java, +		 * Assert the exchange result with the given {@link Consumer}., +		<T extends S> T consumeWith(Consumer<EntityExchangeResult<B>> consumer);, +		BodyContentSpec consumeWith(Consumer<EntityExchangeResult<byte[]>> consumer);, +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/ResponseEntityTests.java, +				.expectBody(Person.class), +				.consumeWith(result -> assertEquals(new Person("John"), result.getResponseBody()));, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +		public <T extends S> T consumeWith(Consumer<EntityExchangeResult<B>> consumer) {, +			this.result.assertWithDiagnostics(() -> consumer.accept(this.result));, +			return new JsonPathAssertions(this, getBodyAsString(), expression, args);, +		public BodyContentSpec consumeWith(Consumer<EntityExchangeResult<byte[]>> consumer) {, +			this.result.assertWithDiagnostics(() -> consumer.accept(this.result));, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/JsonPathAssertions.java, +	private final String content;, +, +	JsonPathAssertions(WebTestClient.BodyContentSpec spec, String content, String expression, Object... args) {, +		this.content = content;, +		this.pathHelper.assertValue(this.content, expectedValue);, +		this.pathHelper.exists(this.content);, +		this.pathHelper.doesNotExist(this.content);, +		this.pathHelper.assertValueIsEmpty(this.content);, +		this.pathHelper.assertValueIsNotEmpty(this.content);, +		this.pathHelper.assertValueIsBoolean(this.content);, +		this.pathHelper.assertValueIsNumber(this.content);, +		this.pathHelper.assertValueIsArray(this.content);, +		this.pathHelper.assertValueIsMap(this.content);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/WebTestClient.java, +		 * Assert the exchange result with the given {@link Consumer}., +		<T extends S> T consumeWith(Consumer<EntityExchangeResult<B>> consumer);]