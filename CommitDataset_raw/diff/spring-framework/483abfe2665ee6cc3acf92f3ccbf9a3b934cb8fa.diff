[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/jetty/JettyRequestUpgradeStrategy.java, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/jetty/JettyRequestUpgradeStrategy.java, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/AbstractWebSocketIntegrationTests.java, +		this.server.start();, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/jetty/JettyRequestUpgradeStrategy.java, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/AbstractWebSocketIntegrationTests.java, +		this.server.start();, +, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/JettyWebSocketTestServer.java, + * Copyright 2002-2016 the original author or authors., +		this.contextHandler.start();, +		try {, +			if (this.contextHandler.isRunning()) {, +				this.contextHandler.stop();, +			}, +		}, +		finally {, +	}, +, +	@Override, +	public int getPort() {, +		return this.port;, +	}, +, +	@Override, +	public ServletContext getServletContext() {, +		return this.contextHandler.getServletContext();, +	}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/jetty/JettyRequestUpgradeStrategy.java, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/AbstractWebSocketIntegrationTests.java, +		this.server.start();, +, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/JettyWebSocketTestServer.java, + * Copyright 2002-2016 the original author or authors., +		this.contextHandler.start();, +		try {, +			if (this.contextHandler.isRunning()) {, +				this.contextHandler.stop();, +			}, +		}, +		finally {, +	}, +, +	@Override, +	public int getPort() {, +		return this.port;, +	}, +, +	@Override, +	public ServletContext getServletContext() {, +		return this.contextHandler.getServletContext();, +	}, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/TomcatWebSocketTestServer.java, +			throw new IllegalStateException("Unable to create temp directory", ex);, +	@Override, +	public int getPort() {, +		return this.port;, +	}, +, +	@Override, +	public ServletContext getServletContext() {, +		return this.context.getServletContext();, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/jetty/JettyRequestUpgradeStrategy.java, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/AbstractWebSocketIntegrationTests.java, +		this.server.start();, +, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/JettyWebSocketTestServer.java, + * Copyright 2002-2016 the original author or authors., +		this.contextHandler.start();, +		try {, +			if (this.contextHandler.isRunning()) {, +				this.contextHandler.stop();, +			}, +		}, +		finally {, +	}, +, +	@Override, +	public int getPort() {, +		return this.port;, +	}, +, +	@Override, +	public ServletContext getServletContext() {, +		return this.contextHandler.getServletContext();, +	}, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/TomcatWebSocketTestServer.java, +			throw new IllegalStateException("Unable to create temp directory", ex);, +	@Override, +	public int getPort() {, +		return this.port;, +	}, +, +	@Override, +	public ServletContext getServletContext() {, +		return this.context.getServletContext();, +	}]