[+++ b/org.springframework.aspects/src/main/java/org/springframework/scheduling/aspectj/AspectJAsyncConfiguration.java, + * {@code @Configuration} class that registers the Spring infrastructure beans necessary, + * to enable AspectJ-based asynchronous method execution., + * @see AsyncConfigurationSelector, +++ b/org.springframework.aspects/src/main/java/org/springframework/scheduling/aspectj/AspectJAsyncConfiguration.java, + * {@code @Configuration} class that registers the Spring infrastructure beans necessary, + * to enable AspectJ-based asynchronous method execution., + * @see AsyncConfigurationSelector, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/AbstractAsyncConfiguration.java, + * Abstract base {@code Configuration} class providing common structure for enabling, + * Spring's asynchronous method execution capability., +++ b/org.springframework.aspects/src/main/java/org/springframework/scheduling/aspectj/AspectJAsyncConfiguration.java, + * {@code @Configuration} class that registers the Spring infrastructure beans necessary, + * to enable AspectJ-based asynchronous method execution., + * @see AsyncConfigurationSelector, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/AbstractAsyncConfiguration.java, + * Abstract base {@code Configuration} class providing common structure for enabling, + * Spring's asynchronous method execution capability., +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/AsyncConfigurationSelector.java, + * Selects which implementation of {@link AbstractAsyncConfiguration}, +++ b/org.springframework.aspects/src/main/java/org/springframework/scheduling/aspectj/AspectJAsyncConfiguration.java, + * {@code @Configuration} class that registers the Spring infrastructure beans necessary, + * to enable AspectJ-based asynchronous method execution., + * @see AsyncConfigurationSelector, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/AbstractAsyncConfiguration.java, + * Abstract base {@code Configuration} class providing common structure for enabling, + * Spring's asynchronous method execution capability., +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/AsyncConfigurationSelector.java, + * Selects which implementation of {@link AbstractAsyncConfiguration}, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/AsyncConfigurer.java, + * Interface to be implemented by @{@link org.springframework.context.annotation.Configuration, + * Configuration} classes annotated with @{@link EnableAsync} that wish to customize the, + * <p>See @{@link EnableAsync} for usage examples., +++ b/org.springframework.aspects/src/main/java/org/springframework/scheduling/aspectj/AspectJAsyncConfiguration.java, + * {@code @Configuration} class that registers the Spring infrastructure beans necessary, + * to enable AspectJ-based asynchronous method execution., + * @see AsyncConfigurationSelector, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/AbstractAsyncConfiguration.java, + * Abstract base {@code Configuration} class providing common structure for enabling, + * Spring's asynchronous method execution capability., +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/AsyncConfigurationSelector.java, + * Selects which implementation of {@link AbstractAsyncConfiguration}, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/AsyncConfigurer.java, + * Interface to be implemented by @{@link org.springframework.context.annotation.Configuration, + * Configuration} classes annotated with @{@link EnableAsync} that wish to customize the, + * <p>See @{@link EnableAsync} for usage examples., +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/EnableAsync.java, + * Enables Spring's asynchronous method execution capability, similar to functionality, + * found in Spring's {@code <task:*>} XML namespace. To be used on @{@link Configuration}, + * classes as follows:, + * where {@code MyAsyncBean} is a user-defined type with one or methods annotated, + * with @{@link Async} (or any custom annotation specified by the {@link #annotation()}, + * attribute)., + * <p>The {@link #mode()} attribute controls how advice is applied; if the mode is, + * {@link AdviceMode#PROXY} (the default), then the other attributes control the behavior, + * of the proxying., + *, + * <p>Note that if the {@linkplain #mode} is set to {@link AdviceMode#ASPECTJ}, then, + * the {@link #proxyTargetClass()} attribute is obsolete. Note also that in this case the, + * {@code spring-aspects} module JAR must be present on the classpath., + *         executor.setCorePoolSize(7);, + *         executor.setMaxPoolSize(42);, + *         executor.setQueueCapacity(11);, + *         executor.setThreadNamePrefix("MyExecutor-");, + * <p>For reference, the example above can be compared to the following Spring XML, + * configuration:, + * <pre class="code">, + * {@code, + * <beans>, + *     <task:annotation-config executor="myExecutor"/>, + *     <task:executor id="myExecutor" pool-size="7-42" queue-capacity="11"/>, + *     <bean id="asyncBean" class="com.foo.MyAsyncBean"/>, + * </beans>, + * }</pre>, + * the examples are equivalent save the setting of the <em>thread name prefix</em> of the, + * Executor; this is because the the {@code task:} namespace {@code executor} element does, + * not expose such an attribute. This demonstrates how the code-based approach allows for, + * maximum configurability through direct access to actual componentry.<p>, + *, +	 * Indicate whether subclass-based (CGLIB) proxies are to be created as opposed, +	 * to standard Java interface-based proxies. The default is {@code false}. <strong>, +	 * Applicable only if {@link #mode()} is set to {@link AdviceMode#PROXY}</strong>., +	 * <p>Note that subclass-based proxies require the async {@link #annotation()}, +	 * should be applied. The default is {@link Ordered#LOWEST_PRECEDENCE} in order to run, +++ b/org.springframework.aspects/src/main/java/org/springframework/scheduling/aspectj/AspectJAsyncConfiguration.java, + * {@code @Configuration} class that registers the Spring infrastructure beans necessary, + * to enable AspectJ-based asynchronous method execution., + * @see AsyncConfigurationSelector, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/AbstractAsyncConfiguration.java, + * Abstract base {@code Configuration} class providing common structure for enabling, + * Spring's asynchronous method execution capability., +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/AsyncConfigurationSelector.java, + * Selects which implementation of {@link AbstractAsyncConfiguration}, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/AsyncConfigurer.java, + * Interface to be implemented by @{@link org.springframework.context.annotation.Configuration, + * Configuration} classes annotated with @{@link EnableAsync} that wish to customize the, + * <p>See @{@link EnableAsync} for usage examples., +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/annotation/EnableAsync.java, + * Enables Spring's asynchronous method execution capability, similar to functionality, + * found in Spring's {@code <task:*>} XML namespace. To be used on @{@link Configuration}]