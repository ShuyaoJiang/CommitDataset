[+++ b/spring-core/src/main/java/org/springframework/util/MimeType.java, +			Map<String, String> map = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH);, +				map.put(attribute, value);, +			this.parameters = Collections.unmodifiableMap(map);, +	 * @return the character set, or {@code null} if not available, +	 * @return the parameter value, or {@code null} if not present, +	 * @return a read-only map (possibly empty, never {@code null}), +		return this.parameters;, +++ b/spring-core/src/main/java/org/springframework/util/MimeType.java, +			Map<String, String> map = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH);, +				map.put(attribute, value);, +			this.parameters = Collections.unmodifiableMap(map);, +	 * @return the character set, or {@code null} if not available, +	 * @return the parameter value, or {@code null} if not present, +	 * @return a read-only map (possibly empty, never {@code null}), +		return this.parameters;, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * Set the list of acceptable {@linkplain MediaType media types},, +	 * as specified by the {@code Accept} header., +	 * Return the list of acceptable {@linkplain MediaType media types},, +	 * as specified by the {@code Accept} header., +	 * Set the list of acceptable {@linkplain Charset charsets},, +	 * as specified by the {@code Accept-Charset} header., +	 * Return the list of acceptable {@linkplain Charset charsets},, +	 * as specified by the {@code Accept-Charset} header., +	 * Set the set of allowed {@link HttpMethod HTTP methods},, +	 * as specified by the {@code Allow} header., +	 * Return the set of allowed {@link HttpMethod HTTP methods},, +	 * as specified by the {@code Allow} header., +	 * Set the (new) value of the {@code Cache-Control} header., +	 * Set the (new) value of the {@code Connection} header., +	 * Set the (new) value of the {@code Connection} header., +	 * Set the (new) value of the {@code Content-Disposition} header for {@code form-data}., +	 * @param filename the filename (may be {@code null}), +	 * Set the length of the body in bytes,, +	 * as specified by the {@code Content-Length} header., +	 * Return the length of the body in bytes,, +	 * as specified by the {@code Content-Length} header., +	 * Set the {@linkplain MediaType media type} of the body,, +	 * as specified by the {@code Content-Type} header., +	 * Set the date and time at which the message was created,, +	 * as specified by the {@code Date} header., +	 * <p>The date should be specified as the number of milliseconds, +	 * since January 1, 1970 GMT., +	 * Returns the date and time at which the message was created,, +	 * as specified by the {@code Date} header., +	 * <p>The date is returned as the number of milliseconds, +	 * since January 1, 1970 GMT. Returns -1 when the date is unknown., +	 * Set the (new) entity tag of the body, as specified by the {@code ETag} header., +			Assert.isTrue(eTag.startsWith("\"") || eTag.startsWith("W/"),, +					"Invalid eTag, does not start with W/ or \"");, +	 * Set the date and time at which the message is no longer valid,, +	 * as specified by the {@code Expires} header., +	 * <p>The date should be specified as the number of milliseconds, +	 * since January 1, 1970 GMT., +	 * Returns the date and time at which the message is no longer valid,, +	 * as specified by the {@code Expires} header., +	 * <p>The date is returned as the number of milliseconds, +	 * since January 1, 1970 GMT., +	 * Set the (new) value of the {@code If-Modified-Since} header., +	 * <p>The date should be specified as the number of milliseconds, +	 * since January 1, 1970 GMT., +	 * <p>The date is returned as the number of milliseconds, +	 * since January 1, 1970 GMT. Returns -1 when the date is unknown., +	 * <p>The date is returned as the number of milliseconds, +	 * since January 1, 1970 GMT. Returns -1 when the date is unknown., +	 * Set the (new) value of the {@code If-None-Match} header., +	 * Set the (new) values of the {@code If-None-Match} header., +	 * Return the value of the {@code If-None-Match} header., +	 * Set the time the resource was last changed,, +	 * as specified by the {@code Last-Modified} header., +	 * <p>The date should be specified as the number of milliseconds, +	 * since January 1, 1970 GMT., +	 * Return the time the resource was last changed,, +	 * as specified by the {@code Last-Modified} header., +	 * <p>The date is returned as the number of milliseconds, +	 * since January 1, 1970 GMT. Returns -1 when the date is unknown., +	 * Set the (new) location of a resource,, +	 * as specified by the {@code Location} header., +	 * Return the (new) location of a resource, +	 * as specified by the {@code Location} header., +	 * Set the (new) value of the {@code Origin} header., +	 * Return the value of the {@code Origin} header., +	 * Set the (new) value of the {@code Pragma} header., +	 * Return the value of the {@code Pragma} header., +	 * Set the (new) value of the {@code Upgrade} header., +	 * @return the first header value, or {@code null} if none, +	public void putAll(Map<? extends String, ? extends List<String>> map) {, +		this.headers.putAll(map);, +++ b/spring-core/src/main/java/org/springframework/util/MimeType.java, +			Map<String, String> map = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH);, +				map.put(attribute, value);, +			this.parameters = Collections.unmodifiableMap(map);, +	 * @return the character set, or {@code null} if not available, +	 * @return the parameter value, or {@code null} if not present, +	 * @return a read-only map (possibly empty, never {@code null}), +		return this.parameters;, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * Set the list of acceptable {@linkplain MediaType media types},, +	 * as specified by the {@code Accept} header.]