[+++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java, + * Copyright 2002-2015 the original author or authors., +	/** Checking for Servlet 3.0+ HttpServletResponse.getHeader(String) */, +		Assert.notNull(servletResponse, "HttpServletResponse must not be null");, +++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java, + * Copyright 2002-2015 the original author or authors., +	/** Checking for Servlet 3.0+ HttpServletResponse.getHeader(String) */, +		Assert.notNull(servletResponse, "HttpServletResponse must not be null");, +++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java, +	/** Checking for Servlet 3.0+ HttpServletResponse.getHeader(String) */, +	private static final boolean servlet3Present =, +			ClassUtils.hasMethod(HttpServletResponse.class, "getHeader", String.class);, +, +, +					if (isHeaderAbsent(response, HEADER_LAST_MODIFIED)) {, +	@Override, +	public boolean checkNotModified(String etag) {, +		HttpServletResponse response = getResponse();, +		if (StringUtils.hasLength(etag) && !this.notModified) {, +			if (isCompatibleWithConditionalRequests(response)) {, +				etag = addEtagPadding(etag);, +				this.notModified = isEtagNotModified(etag);, +				if (response != null) {, +					if (this.notModified && supportsNotModifiedStatus()) {, +						response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);, +					}, +					if (isHeaderAbsent(response, HEADER_ETAG)) {, +						response.setHeader(HEADER_ETAG, etag);, +					}, +				}, +			}, +		}, +		return this.notModified;, +	}, +, +	@Override, +	public boolean checkNotModified(String etag, long lastModifiedTimestamp) {, +		HttpServletResponse response = getResponse();, +		if (StringUtils.hasLength(etag) && !this.notModified) {, +			if (isCompatibleWithConditionalRequests(response)) {, +				etag = addEtagPadding(etag);, +				this.notModified = isEtagNotModified(etag) && isTimestampNotModified(lastModifiedTimestamp);, +				if (response != null) {, +					if (this.notModified && supportsNotModifiedStatus()) {, +						response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);, +					}, +					if (isHeaderAbsent(response, HEADER_ETAG)) {, +						response.setHeader(HEADER_ETAG, etag);, +					}, +					if (isHeaderAbsent(response, HEADER_LAST_MODIFIED)) {, +						response.setDateHeader(HEADER_LAST_MODIFIED, lastModifiedTimestamp);, +					}, +				}, +			}, +		}, +		return this.notModified;, +	}, +, +	public boolean isNotModified() {, +		return this.notModified;, +	}, +, +, +	private boolean isCompatibleWithConditionalRequests(HttpServletResponse response) {, +		if (response == null || !servlet3Present) {, +			// Can't check response.getStatus() - let's assume we're good, +			return true;, +		}, +		return HttpStatus.valueOf(response.getStatus()).is2xxSuccessful();, +	}, +, +	private boolean isHeaderAbsent(HttpServletResponse response, String header) {, +		if (response == null || !servlet3Present) {, +			// Can't check response.getHeader(header) - let's assume it's not set, +			return true;, +		}, +		return (response.getHeader(header) == null);, +	}, +, +	private boolean supportsNotModifiedStatus() {, +		String method = getRequest().getMethod();, +		return (METHOD_GET.equals(method) || METHOD_HEAD.equals(method));, +	}, +, +	private boolean isEtagNotModified(String etag) {, +		if (StringUtils.hasLength(etag)) {, +			String ifNoneMatch = getRequest().getHeader(HEADER_IF_NONE_MATCH);, +			if (StringUtils.hasLength(ifNoneMatch)) {, +				String[] clientEtags = StringUtils.delimitedListToStringArray(ifNoneMatch, ",", " ");, +				for (String clientEtag : clientEtags) {, +					// compare weak/strong ETag as per https://tools.ietf.org/html/rfc7232#section-2.3, +					if (StringUtils.hasLength(clientEtag) &&, +							(clientEtag.replaceFirst("^W/", "").equals(etag.replaceFirst("^W/", "")) ||, +									clientEtag.equals("*"))) {, +				}, +			}, +		}, +		return false;, +++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java, + * Copyright 2002-2015 the original author or authors.]