[+++ b/spring-framework-reference/src/mvc.xml, +      client. If a compatible view cannot be supplied by the , +      <classname>ViewResolver</classname> chain, then the list of views specified , +      through the <literal>DefaultViews</literal> property will be consulted. This , +      latter option is appropriate for singleton <classname>Views</classname> that , +      can render an appropriate representation of the current resource regardless , +      of the logical view name. The <literal>Accept</literal> header may include , +      wildcards, for example text/*, in which case a <classname>View</classname> whose, +      &lt;entry key="json" value="application/json"/&gt;, +  &lt;property name="defaultViews">, +    &lt;list>, +      &lt;bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" />, +    &lt;/list>, +  &lt;/property&gt;, +      is <classname>content</classname>. If the request is made with the file extension , +      <literal>.json</literal>, the <classname>MappingJacksonJsonView</classname> instance from , +      the <literal>DefaultViews</literal> list will be selected regardless of the view name. , +      Alternatively, client requests can be made without a file extension but with the , +      <literal>Accept</literal> header set to the preferred media-type, and the same resolution , +      of request to views would occur.<!--Can you reword preceding sentence? I don't follow it.--></para>, +++ b/spring-framework-reference/src/mvc.xml, +      client. If a compatible view cannot be supplied by the , +      <classname>ViewResolver</classname> chain, then the list of views specified , +      through the <literal>DefaultViews</literal> property will be consulted. This , +      latter option is appropriate for singleton <classname>Views</classname> that , +      can render an appropriate representation of the current resource regardless , +      of the logical view name. The <literal>Accept</literal> header may include , +      wildcards, for example text/*, in which case a <classname>View</classname> whose, +      &lt;entry key="json" value="application/json"/&gt;, +  &lt;property name="defaultViews">, +    &lt;list>, +      &lt;bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" />, +    &lt;/list>, +  &lt;/property&gt;, +      is <classname>content</classname>. If the request is made with the file extension , +      <literal>.json</literal>, the <classname>MappingJacksonJsonView</classname> instance from , +      the <literal>DefaultViews</literal> list will be selected regardless of the view name. , +      Alternatively, client requests can be made without a file extension but with the , +      <literal>Accept</literal> header set to the preferred media-type, and the same resolution , +      of request to views would occur.<!--Can you reword preceding sentence? I don't follow it.--></para>, +++ b/spring-framework-reference/src/remoting.xml, +      <classname>MarshallingHttpMessageConverter</classname> or , +      <classname>MappingJacksonHttpMessageConverter</classname>.</para>, +      <section id="rest-mapping-json-converter">, +        <title>MappingJacksonHttpMessageConverter</title>, +        , +        <para>An <interfacename>HttpMessageConverter</interfacename> , +        implementation that can read and write JSON using Jackson's , +        <interfacename>ObjectMapper</interfacename>. JSON mapping can be , +        customized as needed through the use of Jackson's provided annotations. When , +        further control is needed, a custom , +        <interfacename>ObjectMapper</interfacename> can be injected through , +        the <literal>ObjectMapper</literal> property for cases where custom , +        JSON serializers/deserializers need to be provided for specific types. , +        By default this converter supports (<literal>application/json</literal>).</para>, +      </section>, +, +++ b/spring-framework-reference/src/mvc.xml, +      client. If a compatible view cannot be supplied by the , +      <classname>ViewResolver</classname> chain, then the list of views specified , +      through the <literal>DefaultViews</literal> property will be consulted. This , +      latter option is appropriate for singleton <classname>Views</classname> that , +      can render an appropriate representation of the current resource regardless , +      of the logical view name. The <literal>Accept</literal> header may include , +      wildcards, for example text/*, in which case a <classname>View</classname> whose, +      &lt;entry key="json" value="application/json"/&gt;, +  &lt;property name="defaultViews">, +    &lt;list>, +      &lt;bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" />, +    &lt;/list>, +  &lt;/property&gt;, +      is <classname>content</classname>. If the request is made with the file extension , +      <literal>.json</literal>, the <classname>MappingJacksonJsonView</classname> instance from , +      the <literal>DefaultViews</literal> list will be selected regardless of the view name. , +      Alternatively, client requests can be made without a file extension but with the , +      <literal>Accept</literal> header set to the preferred media-type, and the same resolution , +      of request to views would occur.<!--Can you reword preceding sentence? I don't follow it.--></para>, +++ b/spring-framework-reference/src/remoting.xml, +      <classname>MarshallingHttpMessageConverter</classname> or , +      <classname>MappingJacksonHttpMessageConverter</classname>.</para>, +      <section id="rest-mapping-json-converter">, +        <title>MappingJacksonHttpMessageConverter</title>, +        , +        <para>An <interfacename>HttpMessageConverter</interfacename> , +        implementation that can read and write JSON using Jackson's , +        <interfacename>ObjectMapper</interfacename>. JSON mapping can be , +        customized as needed through the use of Jackson's provided annotations. When , +        further control is needed, a custom , +        <interfacename>ObjectMapper</interfacename> can be injected through , +        the <literal>ObjectMapper</literal> property for cases where custom , +        JSON serializers/deserializers need to be provided for specific types. , +        By default this converter supports (<literal>application/json</literal>).</para>, +      </section>, +, +++ b/spring-framework-reference/src/view.xml, +  , +  <section id="view-json-mapping">, +  	<title>JSON Mapping View</title>, +  	, +  	<para>The <classname>MappingJacksonJsonView</classname> uses the Jackson ]