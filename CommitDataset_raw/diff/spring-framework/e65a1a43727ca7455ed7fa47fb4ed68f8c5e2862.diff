[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/PrintingResultHandler.java, +import java.util.Arrays;, +import java.util.List;, +import org.springframework.util.MimeType;, +import org.springframework.util.MimeTypeUtils;, +	private static final String NOT_PRINTABLE = "<content type is not printable text>";, +, +	private static final List<MimeType> printableMimeTypes = Arrays.asList(, +			MimeTypeUtils.APPLICATION_JSON, MimeTypeUtils.APPLICATION_XML,, +			new MimeType("text", "*"), new MimeType("application", "*+json"),, +			new MimeType("application", "*+xml"));, +, +, +		String body = (isPrintableContentType(request.getContentType()) ?, +				request.getContentAsString() : NOT_PRINTABLE);, +, +		this.printer.printValue("Body", body);, +		String body = (isPrintableContentType(response.getContentType()) ?, +				response.getContentAsString() : NOT_PRINTABLE);, +, +		this.printer.printValue("Body", body);, +	 * Determine if the supplied content type is <em>printable</em> (i.e., text-based)., +	 * <p>If the supplied content type is {@code null} (i.e., unknown), this method, +	 * assumes that the content is printable by default and returns {@code true}., +	 * @param contentType the content type to check; {@code null} if unknown, +	 * @return {@code true} if the content type is known to be or assumed to be printable, +	 * @since 5.0, +	 */, +	private static boolean isPrintableContentType(String contentType) {, +		if (contentType == null) {, +			return true;, +		}, +		MimeType mimeType = MimeType.valueOf(contentType);, +		return printableMimeTypes.stream().anyMatch(printable -> printable.includes(mimeType));, +	}, +, +, +	/**, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/PrintingResultHandler.java, +import java.util.Arrays;, +import java.util.List;, +import org.springframework.util.MimeType;, +import org.springframework.util.MimeTypeUtils;, +	private static final String NOT_PRINTABLE = "<content type is not printable text>";, +, +	private static final List<MimeType> printableMimeTypes = Arrays.asList(, +			MimeTypeUtils.APPLICATION_JSON, MimeTypeUtils.APPLICATION_XML,, +			new MimeType("text", "*"), new MimeType("application", "*+json"),, +			new MimeType("application", "*+xml"));, +, +, +		String body = (isPrintableContentType(request.getContentType()) ?, +				request.getContentAsString() : NOT_PRINTABLE);, +, +		this.printer.printValue("Body", body);, +		String body = (isPrintableContentType(response.getContentType()) ?, +				response.getContentAsString() : NOT_PRINTABLE);, +, +		this.printer.printValue("Body", body);, +	 * Determine if the supplied content type is <em>printable</em> (i.e., text-based)., +	 * <p>If the supplied content type is {@code null} (i.e., unknown), this method, +	 * assumes that the content is printable by default and returns {@code true}., +	 * @param contentType the content type to check; {@code null} if unknown, +	 * @return {@code true} if the content type is known to be or assumed to be printable, +	 * @since 5.0, +	 */, +	private static boolean isPrintableContentType(String contentType) {, +		if (contentType == null) {, +			return true;, +		}, +		MimeType mimeType = MimeType.valueOf(contentType);, +		return printableMimeTypes.stream().anyMatch(printable -> printable.includes(mimeType));, +	}, +, +, +	/**, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/result/PrintingResultHandlerTests.java, +import java.util.Arrays;, +import java.util.List;, +import org.springframework.util.MimeTypeUtils;, +	private static final List<String> textContentTypes = Arrays.asList(MimeTypeUtils.APPLICATION_JSON_VALUE,, +		MimeTypeUtils.APPLICATION_XML_VALUE, MimeTypeUtils.APPLICATION_XHTML_XML_VALUE,, +		MimeTypeUtils.TEXT_HTML_VALUE, MimeTypeUtils.TEXT_PLAIN_VALUE);, +, +, +	public void printRequestWithTextContentTypes() throws Exception {, +		this.request.setContent("text".getBytes());, +, +		for (String contentType: textContentTypes) {, +			this.request.setContentType(contentType);, +			this.handler.handle(this.mvcResult);, +			assertValue("MockHttpServletRequest", "Body", "text");, +		}, +	}, +, +	@Test, +	public void printResponseWithTextContentTypes() throws Exception {, +		this.response.getWriter().print("text");, +, +		for (String contentType: textContentTypes) {]