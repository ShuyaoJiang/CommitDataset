[+++ b/spring-context/src/main/java/org/springframework/validation/AbstractErrors.java, + * Copyright 2002-2014 the original author or authors., +		return (value != null ? value.getClass() : null);, +		// Optimization: use charAt and regionMatches instead of endsWith and startsWith (SPR-11304), +		return (endIndex >= 0 && field.charAt(endIndex) == '*' &&, +				(endIndex == 0 || field.regionMatches(0, fieldError.getField(), 0, endIndex)));, +++ b/spring-context/src/main/java/org/springframework/validation/AbstractErrors.java, + * Copyright 2002-2014 the original author or authors., +		return (value != null ? value.getClass() : null);, +		// Optimization: use charAt and regionMatches instead of endsWith and startsWith (SPR-11304), +		return (endIndex >= 0 && field.charAt(endIndex) == '*' &&, +				(endIndex == 0 || field.regionMatches(0, fieldError.getField(), 0, endIndex)));, +++ b/spring-context/src/test/java/org/springframework/validation/DataBinderTests.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.tests.sample.beans.BeanWithObjectProperty;, +import org.springframework.tests.sample.beans.DerivedTestBean;, +import org.springframework.tests.sample.beans.ITestBean;, +import org.springframework.tests.sample.beans.IndexedTestBean;, +import org.springframework.tests.sample.beans.SerializablePerson;, +import org.springframework.tests.sample.beans.TestBean;, +		pvs.add("age", 32);, +		pvs.add("spouse.age", 32);, +		pvs.add("spouse.age", 32);, +		binder.setAllowedFields("name", "myparam");, +		binder.setDisallowedFields("age");, +		binder.setAllowedFields("name", "myparam");, +		binder.setDisallowedFields("age");, +		binder.setAllowedFields("name", "age");, +		binder.setDisallowedFields("age");, +		binder.setAllowedFields("nam*", "*ouchy");, +		binder.setAllowedFields("someMap[key1]", "someMap[key2]");, +		binder.setDisallowedFields("someMap['key3']", "someMap[key4]");, +		binder.setRequiredFields("touchy", "name", "age", "date", "spouse.name");, +		binder.setRequiredFields("someMap[key1]", "someMap[key2]", "someMap['key3']", "someMap[key4]");, +		binder.setAllowedFields("name", "age");, +	public void testFieldErrorAccessVariations() throws Exception {, +		TestBean testBean = new TestBean();, +		DataBinder binder = new DataBinder(testBean, "testBean");, +		assertNull(binder.getBindingResult().getGlobalError());, +		assertNull(binder.getBindingResult().getFieldError());, +		assertNull(binder.getBindingResult().getFieldError(""));, +, +		MutablePropertyValues mpv = new MutablePropertyValues();, +		mpv.add("age", "invalid");, +		binder.bind(mpv);, +		assertNull(binder.getBindingResult().getGlobalError());, +		assertNull(binder.getBindingResult().getFieldError(""));, +		assertNull(binder.getBindingResult().getFieldError("b*"));, +		assertEquals("age", binder.getBindingResult().getFieldError().getField());, +		assertEquals("age", binder.getBindingResult().getFieldError("*").getField());, +		assertEquals("age", binder.getBindingResult().getFieldError("a*").getField());, +		assertEquals("age", binder.getBindingResult().getFieldError("ag*").getField());, +		assertEquals("age", binder.getBindingResult().getFieldError("age").getField());, +	}, +]