[+++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +import org.springframework.core.KotlinDetector;, +			Constructor<T> ctor = (KotlinDetector.isKotlinType(clazz) ?, +			return (KotlinDetector.isKotlinType(ctor.getDeclaringClass()) ?, +	 * Return the primary constructor of the provided class. For Kotlin classes, this, +	 * returns the Java constructor corresponding to the Kotlin primary constructor, +	 * (as defined in the Kotlin specification). Otherwise, in particular for non-Kotlin, +	 * classes, this simply returns {@code null}., +	 * @param clazz the class to check, +	 * @since 5.0, +	 * @see <a href="http://kotlinlang.org/docs/reference/classes.html#constructors">Kotlin docs</a>, +	 */, +	@SuppressWarnings("unchecked"), +	@Nullable, +	public static <T> Constructor<T> findPrimaryConstructor(Class<T> clazz) {, +		Assert.notNull(clazz, "Class must not be null");, +		if (KotlinDetector.isKotlinType(clazz)) {, +			Constructor<T> kotlinPrimaryConstructor = KotlinDelegate.findPrimaryConstructor(clazz);, +			if (kotlinPrimaryConstructor != null) {, +				return kotlinPrimaryConstructor;, +			}, +		}, +		return null;, +	}, +, +	/**, +				KFunction<T> primaryCtor = KClasses.getPrimaryConstructor(JvmClassMappingKt.getKotlinClass(clazz));, +				if (primaryCtor == null) {, +				Constructor<T> constructor = ReflectJvmMapping.getJavaConstructor(primaryCtor);, +						() -> "Failed to find Java constructor for Kotlin primary constructor: " + clazz.getName());, +					"Number of provided arguments should be less of equals than number of constructor parameters");, +				if (!(parameters.get(i).isOptional() && args[i] == null)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +import org.springframework.core.KotlinDetector;, +			Constructor<T> ctor = (KotlinDetector.isKotlinType(clazz) ?, +			return (KotlinDetector.isKotlinType(ctor.getDeclaringClass()) ?, +	 * Return the primary constructor of the provided class. For Kotlin classes, this, +	 * returns the Java constructor corresponding to the Kotlin primary constructor, +	 * (as defined in the Kotlin specification). Otherwise, in particular for non-Kotlin, +	 * classes, this simply returns {@code null}., +	 * @param clazz the class to check, +	 * @since 5.0, +	 * @see <a href="http://kotlinlang.org/docs/reference/classes.html#constructors">Kotlin docs</a>, +	 */, +	@SuppressWarnings("unchecked"), +	@Nullable, +	public static <T> Constructor<T> findPrimaryConstructor(Class<T> clazz) {, +		Assert.notNull(clazz, "Class must not be null");, +		if (KotlinDetector.isKotlinType(clazz)) {, +			Constructor<T> kotlinPrimaryConstructor = KotlinDelegate.findPrimaryConstructor(clazz);, +			if (kotlinPrimaryConstructor != null) {, +				return kotlinPrimaryConstructor;, +			}, +		}, +		return null;, +	}, +, +	/**, +				KFunction<T> primaryCtor = KClasses.getPrimaryConstructor(JvmClassMappingKt.getKotlinClass(clazz));, +				if (primaryCtor == null) {, +				Constructor<T> constructor = ReflectJvmMapping.getJavaConstructor(primaryCtor);, +						() -> "Failed to find Java constructor for Kotlin primary constructor: " + clazz.getName());, +					"Number of provided arguments should be less of equals than number of constructor parameters");, +				if (!(parameters.get(i).isOptional() && args[i] == null)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +					Constructor<?> primaryConstructor = BeanUtils.findPrimaryConstructor(beanClass);, +						if (primaryConstructor != null && candidate.isSynthetic()) {, +					else if (primaryConstructor != null) {, +								new Constructor<?>[] {primaryConstructor, defaultConstructor} :, +								new Constructor<?>[] {primaryConstructor});, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +import org.springframework.core.KotlinDetector;, +			Constructor<T> ctor = (KotlinDetector.isKotlinType(clazz) ?, +			return (KotlinDetector.isKotlinType(ctor.getDeclaringClass()) ?, +	 * Return the primary constructor of the provided class. For Kotlin classes, this, +	 * returns the Java constructor corresponding to the Kotlin primary constructor, +	 * (as defined in the Kotlin specification). Otherwise, in particular for non-Kotlin, +	 * classes, this simply returns {@code null}., +	 * @param clazz the class to check, +	 * @since 5.0, +	 * @see <a href="http://kotlinlang.org/docs/reference/classes.html#constructors">Kotlin docs</a>, +	 */, +	@SuppressWarnings("unchecked"), +	@Nullable, +	public static <T> Constructor<T> findPrimaryConstructor(Class<T> clazz) {, +		Assert.notNull(clazz, "Class must not be null");, +		if (KotlinDetector.isKotlinType(clazz)) {, +			Constructor<T> kotlinPrimaryConstructor = KotlinDelegate.findPrimaryConstructor(clazz);, +			if (kotlinPrimaryConstructor != null) {, +				return kotlinPrimaryConstructor;, +			}, +		}, +		return null;, +	}, +, +	/**, +				KFunction<T> primaryCtor = KClasses.getPrimaryConstructor(JvmClassMappingKt.getKotlinClass(clazz));, +				if (primaryCtor == null) {, +				Constructor<T> constructor = ReflectJvmMapping.getJavaConstructor(primaryCtor);, +						() -> "Failed to find Java constructor for Kotlin primary constructor: " + clazz.getName());]