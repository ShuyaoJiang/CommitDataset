[+++ b/spring-web-reactive/src/main/java/org/springframework/core/convert/support/ReactiveStreamsToCompletableFutureConverter.java, +			return Mono.fromFuture((CompletableFuture) source);, +			return Mono.from((Publisher) source).toFuture();, +++ b/spring-web-reactive/src/main/java/org/springframework/core/convert/support/ReactiveStreamsToCompletableFutureConverter.java, +			return Mono.fromFuture((CompletableFuture) source);, +			return Mono.from((Publisher) source).toFuture();, +++ b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/ChannelSendOperatorTests.java, +		Signal<Void> signal = completion.materialize().block();, +		Signal<Void> signal = completion.materialize().block();, +		Signal<Void> signal = completion.materialize().block();, +		Signal<Void> signal = completion.materialize().block();, +		Signal<Void> signal = completion.materialize().block();, +++ b/spring-web-reactive/src/main/java/org/springframework/core/convert/support/ReactiveStreamsToCompletableFutureConverter.java, +			return Mono.fromFuture((CompletableFuture) source);, +			return Mono.from((Publisher) source).toFuture();, +++ b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/ChannelSendOperatorTests.java, +		Signal<Void> signal = completion.materialize().block();, +		Signal<Void> signal = completion.materialize().block();, +		Signal<Void> signal = completion.materialize().block();, +		Signal<Void> signal = completion.materialize().block();, +		Signal<Void> signal = completion.materialize().block();, +++ b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/ServerHttpResponseTests.java, +		response.writeWith(Flux.just(wrap("a"), wrap("b"), wrap("c"))).block();, +		response.writeWith(Flux.error(error)).otherwise(ex -> Mono.empty()).block();, +		response.setComplete().block();, +		response.writeWith(Flux.just(wrap("a"), wrap("b"), wrap("c"))).block();, +		response.writeWith(Flux.just(wrap("a"), wrap("b"), wrap("c"))).block();, +		response.setComplete().block();, +++ b/spring-web-reactive/src/main/java/org/springframework/core/convert/support/ReactiveStreamsToCompletableFutureConverter.java, +			return Mono.fromFuture((CompletableFuture) source);, +			return Mono.from((Publisher) source).toFuture();, +++ b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/ChannelSendOperatorTests.java, +		Signal<Void> signal = completion.materialize().block();, +		Signal<Void> signal = completion.materialize().block();, +		Signal<Void> signal = completion.materialize().block();, +		Signal<Void> signal = completion.materialize().block();, +		Signal<Void> signal = completion.materialize().block();, +++ b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/ServerHttpResponseTests.java, +		response.writeWith(Flux.just(wrap("a"), wrap("b"), wrap("c"))).block();, +		response.writeWith(Flux.error(error)).otherwise(ex -> Mono.empty()).block();, +		response.setComplete().block();, +		response.writeWith(Flux.just(wrap("a"), wrap("b"), wrap("c"))).block();, +		response.writeWith(Flux.just(wrap("a"), wrap("b"), wrap("c"))).block();, +		response.setComplete().block();, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/DispatcherHandlerErrorTests.java, +		publisher.block();, +		publisher.block();, +		Signal<?> signal = mono.materialize().block();, +++ b/spring-web-reactive/src/main/java/org/springframework/core/convert/support/ReactiveStreamsToCompletableFutureConverter.java, +			return Mono.fromFuture((CompletableFuture) source);, +			return Mono.from((Publisher) source).toFuture();, +++ b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/ChannelSendOperatorTests.java, +		Signal<Void> signal = completion.materialize().block();, +		Signal<Void> signal = completion.materialize().block();, +		Signal<Void> signal = completion.materialize().block();, +		Signal<Void> signal = completion.materialize().block();, +		Signal<Void> signal = completion.materialize().block();, +++ b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/ServerHttpResponseTests.java, +		response.writeWith(Flux.just(wrap("a"), wrap("b"), wrap("c"))).block();, +		response.writeWith(Flux.error(error)).otherwise(ex -> Mono.empty()).block();, +		response.setComplete().block();, +		response.writeWith(Flux.just(wrap("a"), wrap("b"), wrap("c"))).block();, +		response.writeWith(Flux.just(wrap("a"), wrap("b"), wrap("c"))).block();, +		response.setComplete().block();, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/DispatcherHandlerErrorTests.java, +		publisher.block();, +		publisher.block();, +		Signal<?> signal = mono.materialize().block();, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/ResponseStatusExceptionHandlerTests.java, +		publisher.block();, +		Signal<Void> signal = publisher.materialize().block();, +++ b/spring-web-reactive/src/main/java/org/springframework/core/convert/support/ReactiveStreamsToCompletableFutureConverter.java, +			return Mono.fromFuture((CompletableFuture) source);, +			return Mono.from((Publisher) source).toFuture();, +++ b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/ChannelSendOperatorTests.java, +		Signal<Void> signal = completion.materialize().block();, +		Signal<Void> signal = completion.materialize().block();, +		Signal<Void> signal = completion.materialize().block();, +		Signal<Void> signal = completion.materialize().block();, +		Signal<Void> signal = completion.materialize().block();, +++ b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/ServerHttpResponseTests.java, +		response.writeWith(Flux.just(wrap("a"), wrap("b"), wrap("c"))).block();, +		response.writeWith(Flux.error(error)).otherwise(ex -> Mono.empty()).block();, +		response.setComplete().block();, +		response.writeWith(Flux.just(wrap("a"), wrap("b"), wrap("c"))).block();, +		response.writeWith(Flux.just(wrap("a"), wrap("b"), wrap("c"))).block();, +		response.setComplete().block();, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/DispatcherHandlerErrorTests.java, +		publisher.block();, +		publisher.block();, +		Signal<?> signal = mono.materialize().block();, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/ResponseStatusExceptionHandlerTests.java, +		publisher.block();, +		Signal<Void> signal = publisher.materialize().block();, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/handler/SimpleUrlHandlerMappingTests.java, +		Object actual = handlerMapping.getHandler(exchange).block();, +++ b/spring-web-reactive/src/main/java/org/springframework/core/convert/support/ReactiveStreamsToCompletableFutureConverter.java, +			return Mono.fromFuture((CompletableFuture) source);, +			return Mono.from((Publisher) source).toFuture();, +++ b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/ChannelSendOperatorTests.java]