[+++ b/org.springframework.context/src/main/java/org/springframework/validation/DefaultBindingErrorProcessor.java, +	 * Invoked for each missing required field and each type mismatch., +	 * <p>The default implementation returns a single argument of type, +	 * DefaultMessageSourceResolvable, with "objectName.field" and "field" as codes., +	 * @param objectName the name of the target object, +++ b/org.springframework.context/src/main/java/org/springframework/validation/DefaultBindingErrorProcessor.java, +	 * Invoked for each missing required field and each type mismatch., +	 * <p>The default implementation returns a single argument of type, +	 * DefaultMessageSourceResolvable, with "objectName.field" and "field" as codes., +	 * @param objectName the name of the target object, +++ b/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/SpringValidatorAdapter.java, +import java.util.LinkedList;, +import java.util.List;, +import javax.validation.metadata.ConstraintDescriptor;, +import org.springframework.context.support.DefaultMessageSourceResolvable;, +						getArgumentsForConstraint(errors.getObjectName(), field, violation.getConstraintDescriptor()),, +	/**, +	 * Return FieldError arguments for a validation error on the given field., +	 * Invoked for each violated constraint., +	 * <p>The default implementation returns a single argument of type, +	 * DefaultMessageSourceResolvable, with "objectName.field" and "field" as codes., +	 * @param objectName the name of the target object, +	 * @param field the field that caused the binding error, +	 * @param descriptor the JSR-303 constraint descriptor, +	 * @return the Object array that represents the FieldError arguments, +	 * @see org.springframework.validation.FieldError#getArguments, +	 * @see org.springframework.context.support.DefaultMessageSourceResolvable, +	 * @see org.springframework.validation.DefaultBindingErrorProcessor#getArgumentsForBindError, +	 */, +	protected Object[] getArgumentsForConstraint(String objectName, String field, ConstraintDescriptor<?> descriptor) {, +		List<Object> arguments = new LinkedList<Object>();, +		String[] codes = new String[] {objectName + Errors.NESTED_PATH_SEPARATOR + field, field};, +		arguments.add(new DefaultMessageSourceResolvable(codes, field));, +		arguments.addAll(descriptor.getAttributes().values());, +		return arguments.toArray(new Object[arguments.size()]);, +	}, +]