[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/AbstractMappingContentTypeResolver.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.web.reactive.accept;, +, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.HashSet;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +import java.util.Set;, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.concurrent.ConcurrentMap;, +, +import org.springframework.http.MediaType;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import org.springframework.util.StringUtils;, +import org.springframework.web.HttpMediaTypeNotAcceptableException;, +import org.springframework.web.server.ServerWebExchange;, +, +/**, + * Abstract base class for {@link MappingContentTypeResolver} implementations., + * Maintains the actual mappings and pre-implements the overall algorithm with, + * sub-classes left to provide a way to extract the lookup key (e.g. file, + * extension, query parameter, etc) for a given exchange., + *, + * @author Rossen Stoyanchev, + */, +public abstract class AbstractMappingContentTypeResolver implements MappingContentTypeResolver {, +, +	/** Primary lookup for media types by key (e.g. "json" -> "application/json") */, +	private final ConcurrentMap<String, MediaType> mediaTypeLookup = new ConcurrentHashMap<>(64);, +, +	/** Reverse lookup for keys associated with a media type */, +	private final MultiValueMap<MediaType, String> keyLookup = new LinkedMultiValueMap<>(64);, +, +, +	/**, +	 * Create an instance with the given map of file extensions and media types., +	 */, +	public AbstractMappingContentTypeResolver(Map<String, MediaType> mediaTypes) {, +		if (mediaTypes != null) {, +			for (Map.Entry<String, MediaType> entry : mediaTypes.entrySet()) {, +				String extension = entry.getKey().toLowerCase(Locale.ENGLISH);, +				MediaType mediaType = entry.getValue();, +				this.mediaTypeLookup.put(extension, mediaType);, +				this.keyLookup.add(mediaType, extension);, +			}, +		}, +	}, +, +, +	/**, +	 * Sub-classes can use this method to look up a MediaType by key., +	 * @param key the key converted to lower case, +	 * @return a MediaType or {@code null}, +	 */, +	protected MediaType getMediaType(String key) {, +		return this.mediaTypeLookup.get(key.toLowerCase(Locale.ENGLISH));, +	}, +, +	/**, +	 * Sub-classes can use this method get all mapped media types., +	 */, +	protected List<MediaType> getMediaTypes() {, +		return new ArrayList<>(this.mediaTypeLookup.values());, +	}, +, +, +	// ContentTypeResolver implementation, +, +	@Override, +	public List<MediaType> resolveMediaTypes(ServerWebExchange exchange), +			throws HttpMediaTypeNotAcceptableException {, +, +		String key = extractKey(exchange);, +		return resolveMediaTypes(key);, +	}, +, +	/**, +	 * An overloaded resolve method with a pre-resolved lookup key., +	 * @param key the key for looking up media types, +	 * @return a list of resolved media types or an empty list, +	 * @throws HttpMediaTypeNotAcceptableException, +	 */]