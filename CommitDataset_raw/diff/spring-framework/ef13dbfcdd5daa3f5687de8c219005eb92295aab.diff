[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java, +		Message<?> message = null;, +		Throwable decodeFailure = null;, +, +			if (message == null) {, +				decodeFailure = new IllegalStateException("Not a valid STOMP frame: " + payload);, +			}, +			decodeFailure = ex;, +		}, +, +		if (decodeFailure != null) {, +			logger.error("Failed to parse WebSocket message as STOMP frame", decodeFailure);, +			sendErrorMessage(session, decodeFailure);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java, +		Message<?> message = null;, +		Throwable decodeFailure = null;, +, +			if (message == null) {, +				decodeFailure = new IllegalStateException("Not a valid STOMP frame: " + payload);, +			}, +			decodeFailure = ex;, +		}, +, +		if (decodeFailure != null) {, +			logger.error("Failed to parse WebSocket message as STOMP frame", decodeFailure);, +			sendErrorMessage(session, decodeFailure);, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/messaging/StompSubProtocolHandlerTests.java, +import org.springframework.web.socket.WebSocketMessage;, +	@Test, +	public void invalidStompCommand() {, +, +		TextMessage textMessage = new TextMessage("FOO");, +, +		this.stompHandler.handleMessageFromClient(this.session, textMessage, this.channel);, +, +		verifyZeroInteractions(this.channel);, +		assertEquals(1, this.session.getSentMessages().size());, +		TextMessage actual = (TextMessage) this.session.getSentMessages().get(0);, +		assertTrue(actual.getPayload().startsWith("ERROR"));, +	}, +]