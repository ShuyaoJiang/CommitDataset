[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, +import org.springframework.http.ResponseEntity;, +	/**, +	 * Return this response as a delayed {@code ResponseEntity}., +	 * @param bodyType the expected response body type, +	 * @param <T> response body type, +	 * @return {@code Mono} with the {@code ResponseEntity}, +	 */, +	<T> Mono<ResponseEntity<T>> toEntity(Class<T> bodyType);, +, +	/**, +	 * Return this response as a delayed list of {@code ResponseEntity}s., +	 * @param elementType the expected response body list element type, +	 * @param <T> the type of elements in the list, +	 * @return {@code Mono} with the list of {@code ResponseEntity}s, +	 */, +	<T> Mono<ResponseEntity<List<T>>> toEntityList(Class<T> elementType);, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, +import org.springframework.http.ResponseEntity;, +	/**, +	 * Return this response as a delayed {@code ResponseEntity}., +	 * @param bodyType the expected response body type, +	 * @param <T> response body type, +	 * @return {@code Mono} with the {@code ResponseEntity}, +	 */, +	<T> Mono<ResponseEntity<T>> toEntity(Class<T> bodyType);, +, +	/**, +	 * Return this response as a delayed list of {@code ResponseEntity}s., +	 * @param elementType the expected response body list element type, +	 * @param <T> the type of elements in the list, +	 * @return {@code Mono} with the list of {@code ResponseEntity}s, +	 */, +	<T> Mono<ResponseEntity<List<T>>> toEntityList(Class<T> elementType);, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientResponse.java, +import org.springframework.http.ResponseEntity;, +	@Override, +	public <T> Mono<ResponseEntity<T>> toEntity(Class<T> bodyType) {, +		HttpHeaders headers = headers().asHttpHeaders();, +		HttpStatus statusCode = statusCode();, +		return bodyToMono(bodyType), +				.map(body -> new ResponseEntity<>(body, headers, statusCode)), +				.switchIfEmpty(Mono.defer(, +						() -> Mono.just(new ResponseEntity<>(headers, statusCode))));, +	}, +, +	@Override, +	public <T> Mono<ResponseEntity<List<T>>> toEntityList(Class<T> responseType) {, +		HttpHeaders headers = headers().asHttpHeaders();, +		HttpStatus statusCode = statusCode();, +		return bodyToFlux(responseType), +				.collectList(), +				.map(body -> new ResponseEntity<>(body, headers, statusCode));, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, +import org.springframework.http.ResponseEntity;, +	/**, +	 * Return this response as a delayed {@code ResponseEntity}., +	 * @param bodyType the expected response body type, +	 * @param <T> response body type, +	 * @return {@code Mono} with the {@code ResponseEntity}, +	 */, +	<T> Mono<ResponseEntity<T>> toEntity(Class<T> bodyType);, +, +	/**, +	 * Return this response as a delayed list of {@code ResponseEntity}s., +	 * @param elementType the expected response body list element type, +	 * @param <T> the type of elements in the list, +	 * @return {@code Mono} with the list of {@code ResponseEntity}s, +	 */, +	<T> Mono<ResponseEntity<List<T>>> toEntityList(Class<T> elementType);, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientResponse.java, +import org.springframework.http.ResponseEntity;, +	@Override, +	public <T> Mono<ResponseEntity<T>> toEntity(Class<T> bodyType) {, +		HttpHeaders headers = headers().asHttpHeaders();, +		HttpStatus statusCode = statusCode();, +		return bodyToMono(bodyType), +				.map(body -> new ResponseEntity<>(body, headers, statusCode)), +				.switchIfEmpty(Mono.defer(, +						() -> Mono.just(new ResponseEntity<>(headers, statusCode))));, +	}, +, +	@Override, +	public <T> Mono<ResponseEntity<List<T>>> toEntityList(Class<T> responseType) {, +		HttpHeaders headers = headers().asHttpHeaders();, +		HttpStatus statusCode = statusCode();, +		return bodyToFlux(responseType), +				.collectList(), +				.map(body -> new ResponseEntity<>(body, headers, statusCode));, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, +import org.springframework.http.ResponseEntity;, +	/**]