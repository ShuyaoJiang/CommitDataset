[+++ b/src/docs/asciidoc/core/core-beans.adoc, +provide your own (or override the container's default) instantiation logic, dependency, +resolution logic, and so forth. If you want to implement some custom logic after the, +Spring container finishes instantiating, configuring, and initializing a bean, you can, +plug in one or more custom `BeanPostProcessor` implementations., +`BeanPostProcessor` instances operate on bean (or object) instances. That is,, +the Spring IoC container instantiates a bean instance and then `BeanPostProcessor`, +instances do their work., +use container hierarchies. If you define a `BeanPostProcessor` in one container,, +it post-processes only the beans in that container. In other words, beans that are, +initialization methods (such as `InitializingBean.afterPropertiesSet()` or any, +callback completely. A bean post-processor typically checks for callback interfaces,, +or it may wrap a bean with a proxy. Some Spring AOP infrastructure classes are, +implemented as bean post-processors in order to provide proxy-wrapping logic., +`ApplicationContext` auto-detection (as described earlier), you can register them, +programmatically against a `ConfigurableBeanFactory` by using the `addBeanPostProcessor`, +method. This can be useful when you need to evaluate conditional logic before, +registration or even for copying bean post processors across contexts in a hierarchy., +Note, however, that `BeanPostProcessor` instances added programmatically do not respect, +the `Ordered` interface. Here, it is the order of registration that dictates the order, +of execution. Note also that `BeanPostProcessor` instances registered programmatically, +are always processed before those registered through auto-detection, regardless of any, +explicit ordering., +differently by the container. All `BeanPostProcessor` instances and beans that they, +directly reference are instantiated on startup, as part of the special startup phase, +of the `ApplicationContext`. Next, all `BeanPostProcessor` instances are registere, +in a sorted fashion and applied to all further beans in the container. Because AOP, +auto-proxying is implemented as a `BeanPostProcessor` itself, neither `BeanPostProcessor`, +instances nor the beans they directly reference are eligible for auto-proxying and,, +thus, do not have aspects woven into them.]