[+++ b/spring-framework-reference/src/validation.xml, +			The system defines an API to implement type conversion logic, as well as an API to execute type conversions at runtime., +		<section id="core-convert-Converter-API">, +			<title>Converter API</title>, +				The API to implement type conversion logic is simple and strongly typed:, +    T convert(S source);   , +				An IllegalArgumentException should be thrown to report an invalid source value., +        public T convert(String source) {, +				Converters are often executed behind this facade interface:, +	<section id="org.springframework.mapping">, +		<title>Spring 3 Object Mapping</title>, +		<para>, +			There are scenarios, particularly in large message-oriented business applications, where data and object transformation is required., +			For example, consider a complex Web Service where there a separation exists between the data exchange model and the internal domain model used to structure business logic., +			In cases like this, a general-purpose data mapping facility can be useful for automating the mapping between these disparate models., +			Spring 3 introduces such a facility built on the <link linkend="expressions-intro">Spring Expression Language</link> (SpEl)., +			This facility is described in this section., +		</para>, +		<section id="mapping-Mapping-API">, +			<title>Mapper API</title>, +			<para>, +				The API to implement data mapping logic is simple and strongly typed:, +			</para>, +			<programlisting language="java"><![CDATA[, +package org.springframework.mapping;, +    , +public interface Mapper<S, T> {, +, +    T map(S source, T target);   , +        , +}]]></programlisting>, +			<para>, +				To create your own Mapper, simply implement the interface above., +				Parameterize S as the type you are mapping from, and T as the type you are mapping to., +				The source and target arguments provided to you should never be null., +				Your Mapper may throw any RuntimeException if mapping fails., +				Take care to ensure your Mapper implementation is thread-safe., +			</para>, +			<para>, +				Consider the following hand-coded Mapper example:, +			</para>, +			<programlisting language="java">, +public class PersonDtoPersonMapper implements Mapper&lt;PersonDto, Person&gt; {, +, +    public Person map(PersonDto source, Person target) {, +        String[] names = source.getName().split(" ");, +        target.setFirstName(names[0]);, +        target.setLastName(names[1]);, +        return target;, +    }, +    , +}</programlisting>, +			<para>, +				In this trivial example, the Mapper simply maps the PersonDto's <literal>name</literal> property to the Person's <literal>firstName</literal> and <literal>lastName</literal> properties., +				The fully mapped Person object is then returned., +			</para>, +		</section>, +		<section id="mapping.SpelMapper">, +			<title>General-purpose SpelMapper Implementation</title>, +			<para>, +				A general purpose object Mapper implementation exists in the <classname>org.springframework.mapping.support</classname> package named <classname>SpelMapper</classname>., +				Built on the flexible Spring Expression Language (SpEL), this Mapper is capable of mapping between objects of all types, including JavaBeans, Arrays, Collections, and Maps., +				It is also extensible and allows additional MappableTypes to be configured., +			</para>, +			<section id="mapping.SpelMapper-usage">, +				<title>Usage</title>, +				<para>, +					To use a SpelMapper with its default configuration, simply construct one and call map:, +				</para>, +				<programlisting language="java"><![CDATA[, +SpelMapper mapper = new SpelMapper();, +mapper.map(aSource, aTarget);, +]]>, +				</programlisting>, +				<para>, +					By default, SpelMapper will map the fields on the source and target that have the same names., +					If the field types differ, the mapping system will attempt a type coersion using Spring 3's <link linkend="core.convert">type conversion system</link>., +					Nested bean properties are mapped recursively using the same algorithm., +					Any mapping failures will trigger a MappingException to be thrown., +					If there are multiple failures, they will be collected and returned in the MappingException thrown to the caller., +				</para>, +				<para>, +					To illustrate this default behavior, consider the following source object type:, +				</para>, +				<programlisting language="java"><![CDATA[, +public class CreateAccountDto {, +    private String number;, +    private String name;, +    private AddressDto address;, +       , +    public static class AddressDto {, +        private String street;, +        private String zip;    , +    }, +}, +]]>, +				</programlisting>				, +				<para>, +					And the following target object type:, +				</para>]