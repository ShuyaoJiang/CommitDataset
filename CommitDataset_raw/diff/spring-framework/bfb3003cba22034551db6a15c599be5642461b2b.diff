[+++ b/spring-framework-reference/src/cache.xml, +public Book findBook(ISBN isbn, boolean checkWarehouse, boolean includeUsed)</programlisting>, +		<section id="cache-annotations-cacheable-condition">, +			<title>Conditional caching</title>, +			, +			<para>Sometimes, a method might not be suitable for caching all the time (for example, it might depend on the given arguments). The cache annotations support such functionality, +			through the <literal>conditional</literal> parameter which takes a <literal>SpEL</literal> expression that is evaluated to either <literal>true</literal> or <literal>false</literal>., +			If <literal>true</literal>, the method is cached - if not, it behaves as if the method is not cached, that is executed every since time no matter what values are in the cache or what, +			arguments are used. A quick example - the following method will be cached, only if the argument <literal>name</literal> has a length shorter then 32:</para>, +			, +			<programlisting language="java"><![CDATA[@Cacheable(value="book", condition="name.length < 32"), +public Book findBook(String name)]]></programlisting>, +		</section>, +		, +		<section id="cache-spel-context">, +		<title><literal>@CacheEvict</literal> annotation</title>, +		<para>The cache abstraction allows not just population of a cache store but also eviction. This process is useful for removing stale or unused data from the cache. Opposed to , +		<literal>@Cacheable</literal>, annotation <literal>@CacheEvict</literal> demarcates methods that perform cache <emphasis>eviction</emphasis>, that is methods that act as triggers, +		for removing data from the cache. Just like its sibling, <literal>@CacheEvict</literal> requires one to specify one (or multiple) caches that are affected by the action, allows a, +		key or a condition to be specified but in addition, features an extra parameter <literal>allEntries</literal> which indicates whether a cache-wide eviction needs to be performed, +		rather then just an entry one (based on the key):</para>, +		, +		<programlisting language="java"><![CDATA[@CacheEvict(value = "books", allEntries=true), +public void loadBooks(InputStream batch)]]></programlisting>, +		, +		<para>This option comes in handy when an entire cache region needs to be cleared out - rather then evicting each entry (which would take a long time since it is inefficient), , +		all the entires are removed in one operation as shown above. Note that the framework will ignore any key specified in this scenario as it does not apply (the entire cache is evicted not just, +		one entry).</para>, +		, +		<para>It is important to note that void methods can be used with <literal>@CacheEvict</literal> - as the methods act as triggers, the return values are ignored (as they don't interact with, +		the cache) - this is not the case with <literal>@Cacheable</literal> which adds/update data into the cache and thus requires a result.</para>, +	</section>, +	, +	<section id="cache-annotation-enable">, +		<title>Enable caching annotations</title>, +		, +		<para>It is important to note that even though declaring the cache annotations does not automatically triggers their actions - like many things in Spring, the feature has to be declaratively, +		enabled (which means if you ever suspect caching is to blame, you can disable it by removing only one configuration line rather then all the annotations in your code). In practice, this, +		translates to one line that informs Spring that it should process the cache annotations, namely:</para>, +		, +		<programlisting language="xml"><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"]]>, +  <emphasis role="bold">xmlns:cache="http://www.springframework.org/schema/cache"</emphasis><![CDATA[, +   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd]]><emphasis role="bold">http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd</emphasis><![CDATA[">]]>, +  <emphasis role="bold"><![CDATA[<cache:annotation-driven />]]></emphasis></programlisting>, +	, +		<para>The namespace allows various options to be specified that influence the way the caching behaviour is added to the application through AOP. The configuration is similar (on purpose), +		with that of <literal><ulink url="tx-annotation-driven-settings">tx:annotation-driven</ulink></literal>:, +		</para>, +		, +      <para><table id="cache-annotation-driven-settings">, +          <title><literal>&lt;cache:annotation-driven/&gt;</literal>, +          settings</title>, +, +          <tgroup cols="3">, +            <thead>, +              <row>, +                <entry>Attribute</entry>, +, +                <entry>Default</entry>, +, +                <entry>Description</entry>, +              </row>, +            </thead>, +, +            <tbody>, +              <row>, +                <entry><literal>cache-manager</literal></entry>, +, +                <entry>cacheManager</entry>, +, +                <entry><para>Name of cache manager to use. Only required, +                if the name of the cache manager is not, +                <literal>cacheManager</literal>, as in the example, +                above.</para></entry>, +              </row>, +, +              <row>, +                <entry><literal>mode</literal></entry>, +, +                <entry>proxy</entry>, +, +                <entry><para>The default mode "proxy" processes annotated, +                beans to be proxied using Spring's AOP framework (following, +                proxy semantics, as discussed above, applying to method calls, +                coming in through the proxy only). The alternative mode, +                "aspectj" instead weaves the affected classes with Spring's, +                AspectJ transaction aspect, modifying the target class byte, +                code to apply to any kind of method call. AspectJ weaving, +                requires spring-aspects.jar in the classpath as well as, +                load-time weaving (or compile-time weaving) enabled. (See, +                <xref linkend="aop-aj-ltw-spring" /> for details on how to set, +                up load-time weaving.)</para></entry>, +              </row>, +, +              <row>, +                <entry><literal>proxy-target-class</literal></entry>, +, +                <entry>false</entry>, +, +                <entry><para>Applies to proxy mode only. Controls what type of]