[+++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/config/AbstractJCacheConfiguration.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.cache.annotation.CachingConfigurer;, +public class AbstractJCacheConfiguration extends AbstractCachingConfiguration {, +	protected void useCachingConfigurer(CachingConfigurer config) {, +		if (config instanceof JCacheConfigurer) {, +			this.exceptionCacheResolver = ((JCacheConfigurer) config).exceptionCacheResolver();, +		}, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/config/AbstractJCacheConfiguration.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.cache.annotation.CachingConfigurer;, +public class AbstractJCacheConfiguration extends AbstractCachingConfiguration {, +	protected void useCachingConfigurer(CachingConfigurer config) {, +		if (config instanceof JCacheConfigurer) {, +			this.exceptionCacheResolver = ((JCacheConfigurer) config).exceptionCacheResolver();, +		}, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/DefaultJCacheOperationSource.java, + * Copyright 2002-2015 the original author or authors., +		// Make sure that the cache resolver is initialized. An exception cache resolver is only, +		// required if the exceptionCacheName attribute is set on an operation, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/config/AbstractJCacheConfiguration.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.cache.annotation.CachingConfigurer;, +public class AbstractJCacheConfiguration extends AbstractCachingConfiguration {, +	protected void useCachingConfigurer(CachingConfigurer config) {, +		if (config instanceof JCacheConfigurer) {, +			this.exceptionCacheResolver = ((JCacheConfigurer) config).exceptionCacheResolver();, +		}, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/DefaultJCacheOperationSource.java, + * Copyright 2002-2015 the original author or authors., +		// Make sure that the cache resolver is initialized. An exception cache resolver is only, +		// required if the exceptionCacheName attribute is set on an operation, +++ b/spring-context-support/src/test/java/org/springframework/cache/jcache/config/JCacheJavaConfigTests.java, + * Copyright 2002-2015 the original author or authors., +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +import org.springframework.cache.concurrent.ConcurrentMapCacheManager;, +	@Rule, +	public final ExpectedException thrown = ExpectedException.none();, +, +		assertNull(cos.getExceptionCacheResolver());, +	@Test, +	public void exceptionCacheResolverFallbacksToMainOne() {, +		ConfigurableApplicationContext context = new AnnotationConfigApplicationContext(, +				NoExceptionCacheResolverConfig.class);, +		try {, +			DefaultJCacheOperationSource cos = context.getBean(DefaultJCacheOperationSource.class);, +			assertSame(context.getBean("cacheResolver"), cos.getCacheResolver());, +			assertNull(cos.getExceptionCacheResolver());, +, +			JCacheableService<?> service = context.getBean(JCacheableService.class);, +, +			service.cache("id");, +, +			// This call requires the cache manager to be set, +			thrown.expect(IllegalStateException.class);, +			service.cacheWithException("test", false);, +		}, +		finally {, +			context.close();, +		}, +	}, +, +	@Configuration, +	@EnableCaching, +	static class NoExceptionCacheResolverConfig extends JCacheConfigurerSupport {, +, +		@Override, +		@Bean, +		public CacheResolver cacheResolver() {, +			return new NamedCacheResolver(new ConcurrentMapCacheManager(), "default");, +		}, +, +		@Bean, +		public JCacheableService<?> cacheableService() {, +			return new AnnotatedJCacheableService(new ConcurrentMapCache("default"));, +		}, +	}, +, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/config/AbstractJCacheConfiguration.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.cache.annotation.CachingConfigurer;, +public class AbstractJCacheConfiguration extends AbstractCachingConfiguration {, +	protected void useCachingConfigurer(CachingConfigurer config) {, +		if (config instanceof JCacheConfigurer) {, +			this.exceptionCacheResolver = ((JCacheConfigurer) config).exceptionCacheResolver();, +		}, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/DefaultJCacheOperationSource.java, + * Copyright 2002-2015 the original author or authors., +		// Make sure that the cache resolver is initialized. An exception cache resolver is only, +		// required if the exceptionCacheName attribute is set on an operation, +++ b/spring-context-support/src/test/java/org/springframework/cache/jcache/config/JCacheJavaConfigTests.java, + * Copyright 2002-2015 the original author or authors., +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +import org.springframework.cache.concurrent.ConcurrentMapCacheManager;, +	@Rule, +	public final ExpectedException thrown = ExpectedException.none();, +, +		assertNull(cos.getExceptionCacheResolver());]