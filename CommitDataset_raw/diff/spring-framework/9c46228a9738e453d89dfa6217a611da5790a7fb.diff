[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/MockMvc.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.web.context.request.RequestContextHolder;, +import org.springframework.web.context.request.ServletRequestAttributes;, + * @author Sam Brannen, +		// [SPR-13217] Simulate RequestContextFilter to ensure that RequestAttributes are, +		// populated before filters are invoked., +		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request, response));, +, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/MockMvc.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.web.context.request.RequestContextHolder;, +import org.springframework.web.context.request.ServletRequestAttributes;, + * @author Sam Brannen, +		// [SPR-13217] Simulate RequestContextFilter to ensure that RequestAttributes are, +		// populated before filters are invoked., +		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request, response));, +, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/spr/RequestContextHolderTests.java, + * Tests for SPR-10025 (access to request attributes via RequestContextHolder),, + * SPR-13217 (Populate RequestAttributes before invoking Filters in MockMvc),, +	private static final String FROM_REQUEST_FILTER = "fromRequestFilter";, +	private static final String FROM_REQUEST_ATTRIBUTES_FILTER = "fromRequestAttributesFilter";, +	@Autowired, +	private FilterWithSessionScopedService filterWithSessionScopedService;, +, +		this.mockRequest.setAttribute(FROM_TCF_MOCK, FROM_TCF_MOCK);, +				.addFilters(new RequestFilter(), new RequestAttributesFilter(), this.filterWithSessionScopedService), +				.defaultRequest(get("/").requestAttr(FROM_MVC_TEST_DEFAULT, FROM_MVC_TEST_DEFAULT)), +		this.mockMvc.perform(get("/singletonController").requestAttr(FROM_MVC_TEST_MOCK, FROM_MVC_TEST_MOCK));, +		this.mockMvc.perform(get("/requestScopedController").requestAttr(FROM_MVC_TEST_MOCK, FROM_MVC_TEST_MOCK));, +		this.mockMvc.perform(get("/requestScopedService").requestAttr(FROM_MVC_TEST_MOCK, FROM_MVC_TEST_MOCK));, +		this.mockMvc.perform(get("/sessionScopedService").requestAttr(FROM_MVC_TEST_MOCK, FROM_MVC_TEST_MOCK));, +, +		@Bean, +		public FilterWithSessionScopedService filterWithSessionScopedService() {, +			return new FilterWithSessionScopedService();, +		}, +		private ServletRequest request;, +		private ServletRequest request;, +		private ServletRequest request;, +	private static class FilterWithSessionScopedService extends GenericFilterBean {, +, +		@Autowired, +		private SessionScopedService service;, +, +			this.service.process();, +			assertRequestAttributes(request);, +			assertRequestAttributes();, +			chain.doFilter(request, response);, +		}, +	}, +, +	private static class RequestFilter extends GenericFilterBean {, +, +		@Override, +		public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {, +			request.setAttribute(FROM_REQUEST_FILTER, FROM_REQUEST_FILTER);, +			chain.doFilter(request, response);, +		}, +	}, +, +	private static class RequestAttributesFilter extends GenericFilterBean {, +, +		@Override, +		public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {, +			RequestContextHolder.getRequestAttributes().setAttribute(FROM_REQUEST_ATTRIBUTES_FILTER, FROM_REQUEST_ATTRIBUTES_FILTER, RequestAttributes.SCOPE_REQUEST);, +	private static void assertRequestAttributes(ServletRequest request) {, +		// TODO [SPR-13211] Assert that FROM_TCF_MOCK is FROM_TCF_MOCK, instead of NULL., +		assertThat(request.getAttribute(FROM_MVC_TEST_DEFAULT), is(FROM_MVC_TEST_DEFAULT));, +		assertThat(request.getAttribute(FROM_MVC_TEST_MOCK), is(FROM_MVC_TEST_MOCK));, +		assertThat(request.getAttribute(FROM_REQUEST_FILTER), is(FROM_REQUEST_FILTER));, +		assertThat(request.getAttribute(FROM_REQUEST_ATTRIBUTES_FILTER), is(FROM_REQUEST_ATTRIBUTES_FILTER));]