[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +				else if (convertedValue instanceof Collection) {, +					convertedValue = convertToTypedCollection(, +							(Collection) convertedValue, propertyName, requiredType, methodParam);, +				else if (convertedValue instanceof Map) {, +					convertedValue = convertToTypedMap(, +							(Map) convertedValue, propertyName, requiredType, methodParam);, +					if (!requiredType.isInterface() && !requiredType.isEnum()) {, +							if (logger.isDebugEnabled()) {, +								logger.debug("Construction via String failed for type [" + requiredType.getName() + "]", ex);, +							}, +			Collection original, String propertyName, Class requiredType, MethodParameter methodParam) {, +, +		Collection convertedCopy;, +		try {, +			if (CollectionFactory.isApproximableCollectionType(requiredType)) {, +				convertedCopy = CollectionFactory.createApproximateCollection(original, original.size());, +			}, +			else {, +				convertedCopy = (Collection) requiredType.newInstance();, +			}, +		}, +		catch (Throwable ex) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("Cannot create copy of Collection type [" + original.getClass().getName() +, +						"] - injecting original Collection as-is", ex);, +			}, +			return original;, +		}, +, +		boolean originalAllowed = requiredType.isInstance(original);, +		Class elementType = null;, +		if (methodParam != null) {, +			elementType = GenericCollectionTypeResolver.getCollectionParameterType(methodParam);, +		}, +		if (elementType == null && originalAllowed &&, +				!this.propertyEditorRegistry.hasCustomEditorForElement(null, propertyName)) {, +			return original;, +		}, +, +			originalAllowed = originalAllowed && (element == convertedElement);, +		return (originalAllowed ? original : convertedCopy);, +	protected Map convertToTypedMap(Map original, String propertyName, Class requiredType, MethodParameter methodParam) {, +, +		Map convertedCopy;, +		try {, +			if (CollectionFactory.isApproximableMapType(requiredType)) {, +				convertedCopy = CollectionFactory.createApproximateMap(original, original.size());, +			}, +			else {, +				convertedCopy = (Map) requiredType.newInstance();, +			}, +		}, +		catch (Throwable ex) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("Cannot create copy of Map type [" + original.getClass().getName() +, +						"] - injecting original Map as-is", ex);, +			}, +			return original;, +		}, +, +		boolean originalAllowed = requiredType.isInstance(original);, +		Class keyType = null;, +		Class valueType = null;, +		if (methodParam != null) {, +			keyType = GenericCollectionTypeResolver.getMapKeyParameterType(methodParam);, +			valueType = GenericCollectionTypeResolver.getMapValueParameterType(methodParam);, +		}, +		if (keyType == null && valueType == null && originalAllowed &&, +				!this.propertyEditorRegistry.hasCustomEditorForElement(null, propertyName)) {, +			return original;, +		}, +, +			originalAllowed = originalAllowed && (key == convertedKey) && (value == convertedValue);, +		return (originalAllowed ? original : convertedCopy);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +				else if (convertedValue instanceof Collection) {, +					convertedValue = convertToTypedCollection(, +							(Collection) convertedValue, propertyName, requiredType, methodParam);, +				else if (convertedValue instanceof Map) {, +					convertedValue = convertToTypedMap(, +							(Map) convertedValue, propertyName, requiredType, methodParam);, +					if (!requiredType.isInterface() && !requiredType.isEnum()) {, +							if (logger.isDebugEnabled()) {, +								logger.debug("Construction via String failed for type [" + requiredType.getName() + "]", ex);, +							}, +			Collection original, String propertyName, Class requiredType, MethodParameter methodParam) {, +, +		Collection convertedCopy;, +		try {, +			if (CollectionFactory.isApproximableCollectionType(requiredType)) {, +				convertedCopy = CollectionFactory.createApproximateCollection(original, original.size());, +			}, +			else {, +				convertedCopy = (Collection) requiredType.newInstance();, +			}, +		}, +		catch (Throwable ex) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("Cannot create copy of Collection type [" + original.getClass().getName() +]