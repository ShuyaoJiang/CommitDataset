[+++ b/org.springframework.core/src/main/java/org/springframework/core/serializer/DefaultDeserializer.java, +import org.springframework.core.NestedIOException;, +, +		ObjectInputStream objectInputStream = new ObjectInputStream(inputStream);, +		catch (ClassNotFoundException ex) {, +			throw new NestedIOException("Failed to deserialize object type", ex);, +++ b/org.springframework.core/src/main/java/org/springframework/core/serializer/DefaultDeserializer.java, +import org.springframework.core.NestedIOException;, +, +		ObjectInputStream objectInputStream = new ObjectInputStream(inputStream);, +		catch (ClassNotFoundException ex) {, +			throw new NestedIOException("Failed to deserialize object type", ex);, +++ b/org.springframework.core/src/main/java/org/springframework/core/serializer/DefaultSerializer.java, +	 * The source object must implement {@link Serializable}., +		if (!(object instanceof Serializable)) {, +			throw new IllegalArgumentException(getClass().getSimpleName() + " requires a Serializable payload " +, +					"but received an object of type [" + object.getClass().getName() + "]");, +		}, +++ b/org.springframework.core/src/main/java/org/springframework/core/serializer/DefaultDeserializer.java, +import org.springframework.core.NestedIOException;, +, +		ObjectInputStream objectInputStream = new ObjectInputStream(inputStream);, +		catch (ClassNotFoundException ex) {, +			throw new NestedIOException("Failed to deserialize object type", ex);, +++ b/org.springframework.core/src/main/java/org/springframework/core/serializer/DefaultSerializer.java, +	 * The source object must implement {@link Serializable}., +		if (!(object instanceof Serializable)) {, +			throw new IllegalArgumentException(getClass().getSimpleName() + " requires a Serializable payload " +, +					"but received an object of type [" + object.getClass().getName() + "]");, +		}, +++ /dev/null, +++ b/org.springframework.core/src/main/java/org/springframework/core/serializer/DefaultDeserializer.java, +import org.springframework.core.NestedIOException;, +, +		ObjectInputStream objectInputStream = new ObjectInputStream(inputStream);, +		catch (ClassNotFoundException ex) {, +			throw new NestedIOException("Failed to deserialize object type", ex);, +++ b/org.springframework.core/src/main/java/org/springframework/core/serializer/DefaultSerializer.java, +	 * The source object must implement {@link Serializable}., +		if (!(object instanceof Serializable)) {, +			throw new IllegalArgumentException(getClass().getSimpleName() + " requires a Serializable payload " +, +					"but received an object of type [" + object.getClass().getName() + "]");, +		}, +++ /dev/null, +++ b/org.springframework.core/src/main/java/org/springframework/core/serializer/Deserializer.java, +	 * Read (assemble) an object of type T from the given InputStream., +	 * <p>Note: Implementations should not close the given InputStream, +	 * (or any decorators of that InputStream) but rather leave this up, +	 * to the caller., +	 * @param inputStream the input stream, +	 * @throws IOException in case of errors reading from the stream, +	T deserialize(InputStream inputStream) throws IOException;, +++ b/org.springframework.core/src/main/java/org/springframework/core/serializer/DefaultDeserializer.java, +import org.springframework.core.NestedIOException;, +, +		ObjectInputStream objectInputStream = new ObjectInputStream(inputStream);, +		catch (ClassNotFoundException ex) {, +			throw new NestedIOException("Failed to deserialize object type", ex);, +++ b/org.springframework.core/src/main/java/org/springframework/core/serializer/DefaultSerializer.java, +	 * The source object must implement {@link Serializable}., +		if (!(object instanceof Serializable)) {, +			throw new IllegalArgumentException(getClass().getSimpleName() + " requires a Serializable payload " +, +					"but received an object of type [" + object.getClass().getName() + "]");, +		}, +++ /dev/null, +++ b/org.springframework.core/src/main/java/org/springframework/core/serializer/Deserializer.java, +	 * Read (assemble) an object of type T from the given InputStream., +	 * <p>Note: Implementations should not close the given InputStream, +	 * (or any decorators of that InputStream) but rather leave this up, +	 * to the caller., +	 * @param inputStream the input stream, +	 * @throws IOException in case of errors reading from the stream, +	T deserialize(InputStream inputStream) throws IOException;, +++ /dev/null, +++ b/org.springframework.core/src/main/java/org/springframework/core/serializer/DefaultDeserializer.java, +import org.springframework.core.NestedIOException;, +, +		ObjectInputStream objectInputStream = new ObjectInputStream(inputStream);, +		catch (ClassNotFoundException ex) {, +			throw new NestedIOException("Failed to deserialize object type", ex);, +++ b/org.springframework.core/src/main/java/org/springframework/core/serializer/DefaultSerializer.java, +	 * The source object must implement {@link Serializable}., +		if (!(object instanceof Serializable)) {, +			throw new IllegalArgumentException(getClass().getSimpleName() + " requires a Serializable payload " +, +					"but received an object of type [" + object.getClass().getName() + "]");, +		}, +++ /dev/null, +++ b/org.springframework.core/src/main/java/org/springframework/core/serializer/Deserializer.java, +	 * Read (assemble) an object of type T from the given InputStream., +	 * <p>Note: Implementations should not close the given InputStream, +	 * (or any decorators of that InputStream) but rather leave this up, +	 * to the caller., +	 * @param inputStream the input stream, +	 * @throws IOException in case of errors reading from the stream, +	T deserialize(InputStream inputStream) throws IOException;, +++ /dev/null, +++ /dev/null, +++ b/org.springframework.core/src/main/java/org/springframework/core/serializer/DefaultDeserializer.java, +import org.springframework.core.NestedIOException;, +]