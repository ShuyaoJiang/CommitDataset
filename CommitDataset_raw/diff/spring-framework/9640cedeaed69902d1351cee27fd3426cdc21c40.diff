[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/PathContainer.java, +		return subPath(path, index, path.elements().size());, +	}, +, +	/**, +	 * Extract a sub-path from the given start offset (inclusive) into the path, +	 * element list and to the end offset (exclusive)., +	 * @param path the path to extract from, +	 * @param startIndex the start element index (inclusive), +	 * @param endIndex the end element index (exclusive), +	 * @return the sub-path, +	 */, +	static PathContainer subPath(PathContainer path, int startIndex, int endIndex) {, +		return DefaultPathContainer.subPath(path, startIndex, endIndex);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/PathContainer.java, +		return subPath(path, index, path.elements().size());, +	}, +, +	/**, +	 * Extract a sub-path from the given start offset (inclusive) into the path, +	 * element list and to the end offset (exclusive)., +	 * @param path the path to extract from, +	 * @param startIndex the start element index (inclusive), +	 * @param endIndex the end element index (exclusive), +	 * @return the sub-path, +	 */, +	static PathContainer subPath(PathContainer path, int startIndex, int endIndex) {, +		return DefaultPathContainer.subPath(path, startIndex, endIndex);, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java, +import org.springframework.http.server.reactive.PathContainer;, +		PathContainer lookupPath = exchange.getRequest().getPath().pathWithinApplication();, +				.map(Map.Entry::getValue), +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/PathContainer.java, +		return subPath(path, index, path.elements().size());, +	}, +, +	/**, +	 * Extract a sub-path from the given start offset (inclusive) into the path, +	 * element list and to the end offset (exclusive)., +	 * @param path the path to extract from, +	 * @param startIndex the start element index (inclusive), +	 * @param endIndex the end element index (exclusive), +	 * @return the sub-path, +	 */, +	static PathContainer subPath(PathContainer path, int startIndex, int endIndex) {, +		return DefaultPathContainer.subPath(path, startIndex, endIndex);, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java, +import org.springframework.http.server.reactive.PathContainer;, +		PathContainer lookupPath = exchange.getRequest().getPath().pathWithinApplication();, +				.map(Map.Entry::getValue), +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/ParsingPathMatcher.java, +		PathContainer pathContainer = PathContainer.parse(path, StandardCharsets.UTF_8);, +		return pathPattern.extractPathWithinPattern(pathContainer).value();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/PathContainer.java, +		return subPath(path, index, path.elements().size());, +	}, +, +	/**, +	 * Extract a sub-path from the given start offset (inclusive) into the path, +	 * element list and to the end offset (exclusive)., +	 * @param path the path to extract from, +	 * @param startIndex the start element index (inclusive), +	 * @param endIndex the end element index (exclusive), +	 * @return the sub-path, +	 */, +	static PathContainer subPath(PathContainer path, int startIndex, int endIndex) {, +		return DefaultPathContainer.subPath(path, startIndex, endIndex);, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java, +import org.springframework.http.server.reactive.PathContainer;, +		PathContainer lookupPath = exchange.getRequest().getPath().pathWithinApplication();, +				.map(Map.Entry::getValue), +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/ParsingPathMatcher.java, +		PathContainer pathContainer = PathContainer.parse(path, StandardCharsets.UTF_8);, +		return pathPattern.extractPathWithinPattern(pathContainer).value();, +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/PathPattern.java, +	public PathContainer extractPathWithinPattern(PathContainer path) {, +		String result = extractPathWithinPattern(path.value());, +		return PathContainer.parse(result, StandardCharsets.UTF_8);, +	}, +, +	// TODO: implement extractPathWithinPattern natively for PathContainer, +, +	private String extractPathWithinPattern(String path) {, +	 * A holder for the result of a {@link PathPattern#getPathRemaining} call.Holds, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/PathContainer.java, +		return subPath(path, index, path.elements().size());, +	}, +, +	/**, +	 * Extract a sub-path from the given start offset (inclusive) into the path, +	 * element list and to the end offset (exclusive)., +	 * @param path the path to extract from, +	 * @param startIndex the start element index (inclusive), +	 * @param endIndex the end element index (exclusive), +	 * @return the sub-path, +	 */, +	static PathContainer subPath(PathContainer path, int startIndex, int endIndex) {, +		return DefaultPathContainer.subPath(path, startIndex, endIndex);, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/UrlBasedCorsConfigurationSource.java, +import org.springframework.http.server.reactive.PathContainer;]