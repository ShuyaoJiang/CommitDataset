[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java, +import java.util.Comparator;, +	 * <p>If several handler mappings match, the handler used will be the one, +	 * configured with the most specific pattern., +		List<String> matchingPatterns = new ArrayList<String>();, +			if (getPathMatcher().match(pattern, lookupPath)) {, +				matchingPatterns.add(pattern);, +		}, +		if (!matchingPatterns.isEmpty()) {, +			Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath);, +			Collections.sort(matchingPatterns, patternComparator);, +			for(String pattern : matchingPatterns) {, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java, +import java.util.Comparator;, +	 * <p>If several handler mappings match, the handler used will be the one, +	 * configured with the most specific pattern., +		List<String> matchingPatterns = new ArrayList<String>();, +			if (getPathMatcher().match(pattern, lookupPath)) {, +				matchingPatterns.add(pattern);, +		}, +		if (!matchingPatterns.isEmpty()) {, +			Comparator<String> patternComparator = getPathMatcher().getPatternComparator(lookupPath);, +			Collections.sort(matchingPatterns, patternComparator);, +			for(String pattern : matchingPatterns) {, +		}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/ResourceUrlProviderTests.java, +	private List<Resource> locations;, +, +		this.locations = new ArrayList<Resource>();, +		this.locations.add(new ClassPathResource("test/", getClass()));, +		this.locations.add(new ClassPathResource("testalternatepath/", getClass()));, +	// SPR-12647, +	@Test, +	public void bestPatternMatch() throws Exception {, +		ResourceHttpRequestHandler otherHandler = new ResourceHttpRequestHandler();, +		otherHandler.setLocations(this.locations);, +		Map<String, VersionStrategy> versionStrategyMap = new HashMap<>();, +		versionStrategyMap.put("/**", new ContentVersionStrategy());, +		VersionResourceResolver versionResolver = new VersionResourceResolver();, +		versionResolver.setStrategyMap(versionStrategyMap);, +, +		List<ResourceResolver> resolvers = new ArrayList<ResourceResolver>();, +		resolvers.add(versionResolver);, +		resolvers.add(new PathResourceResolver());, +		otherHandler.setResourceResolvers(resolvers);, +, +		this.handlerMap.put("/resources/*.css", otherHandler);, +		initTranslator();, +, +		String url = this.translator.getForLookupPath("/resources/foo.css");, +		assertEquals("/resources/foo-e36d2e05253c6c7085a91522ce43a0b4.css", url);, +	}, +]