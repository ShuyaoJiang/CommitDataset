[+++ b/spring-jms/src/main/java/org/springframework/jms/remoting/JmsInvokerClientInterceptor.java, +	 * <p>The specified name will be dynamically resolved via the, +	 * <p>The default resolver is a {@code DynamicDestinationResolver}. Specify a, +	 * {@code JndiDestinationResolver} for resolving destination names as JNDI locations., +	 * Set the {@link RemoteInvocationFactory} to use for this accessor., +	 * <p>Default is a {@link DefaultRemoteInvocationFactory}., +	 * Specify the {@link MessageConverter} to use for turning, +	 * <p>Default is a {@link SimpleMessageConverter}, using a standard JMS, +	 * {@link javax.jms.ObjectMessage} for each invocation / invocation result, +	 * object., +	 * <p>Custom implementations may generally adapt {@link java.io.Serializable}, +	 * objects into special kinds of messages, or might be specifically tailored for, +	 * translating {@code RemoteInvocation(Result)s} into specific kinds of messages., +	 * Create a new {@code RemoteInvocation} object for the given AOP method invocation., +	 * <p>The default implementation delegates to the {@link RemoteInvocationFactory}., +	 * <p>Can be overridden in subclasses to provide custom {@code RemoteInvocation}, +	 * Note that it is preferable to use a custom {@code RemoteInvocationFactory} which, +	 * <p>The default implementation creates a JMS {@link javax.jms.ObjectMessage}, +	 * <p>The default implementation expects a JMS {@link javax.jms.ObjectMessage}, +	 * carrying a {@link RemoteInvocationResult} object. If an invalid response, +	 * message is encountered, the {@code onInvalidResponse} callback gets invoked., +	 * Callback that is invoked by {@link #executeRequest} when the receive, +	 * timeout has expired for the specified {@link RemoteInvocation}., +	 * can choose to either throw a more dedicated exception or even return, +	 * Callback that is invoked by {@link #extractInvocationResult} when, +	 * it encounters an invalid response message., +	 * <p>The default implementation throws a {@link MessageFormatException}., +	 * @return an alternative invocation result that should be returned to, +	 * the caller (if desired), +	 * @throws JMSException if the invalid response should lead to an, +	 * infrastructure exception propagated to the caller, +	 * Recreate the invocation result contained in the given {@link RemoteInvocationResult}, +	 * object., +	 * <p>The default implementation calls the default {@code recreate()} method., +	 * <p>Can be overridden in subclasses to provide custom recreation, potentially, +	 * Spring {@link RemoteAccessException}.]