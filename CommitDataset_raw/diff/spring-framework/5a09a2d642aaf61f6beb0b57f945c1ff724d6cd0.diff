[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/GenericTypeAwarePropertyDescriptor.java, + * Copyright 2002-2009 the original author or authors., +					"set" + StringUtils.capitalize(getName()), readMethodToUse.getReturnType());, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/GenericTypeAwarePropertyDescriptor.java, + * Copyright 2002-2009 the original author or authors., +					"set" + StringUtils.capitalize(getName()), readMethodToUse.getReturnType());, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/MBeanExporter.java, + * Copyright 2002-2009 the original author or authors., +	 * runtime-registered MBeans ({@link #registerManagedResource}) should get, +	 * modified: to ensure uniqueness for every instance of a managed <code>Class</code>., +	 * @see #registerManagedResource, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/GenericTypeAwarePropertyDescriptor.java, + * Copyright 2002-2009 the original author or authors., +					"set" + StringUtils.capitalize(getName()), readMethodToUse.getReturnType());, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/MBeanExporter.java, + * Copyright 2002-2009 the original author or authors., +	 * runtime-registered MBeans ({@link #registerManagedResource}) should get, +	 * modified: to ensure uniqueness for every instance of a managed <code>Class</code>., +	 * @see #registerManagedResource, +++ b/org.springframework.context/src/main/resources/org/springframework/ejb/config/spring-jee-2.5.xsd, +	Defines configuration elements for access to traditional Java EE components, +	such as JNDI resources and EJB session beans., +	or a local Java EE environment naming context path in which case the, +	Controls whether the lookup occurs in a Java EE container, i.e. if the, +	Set whether to expose the JNDI environment context for all access to the target, +	EJB, i.e. for all method invocations on the exposed object reference., +	Default is "false", i.e. to only expose the JNDI context for object lookup., +, +	Switch this flag to "true" in order to expose the JNDI environment (including, +	the authorization context) for each EJB invocation, as needed by WebLogic, +	for EJBs with authorization requirements., +++ b/org.springframework.beans/src/main/java/org/springframework/beans/GenericTypeAwarePropertyDescriptor.java, + * Copyright 2002-2009 the original author or authors., +					"set" + StringUtils.capitalize(getName()), readMethodToUse.getReturnType());, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/MBeanExporter.java, + * Copyright 2002-2009 the original author or authors., +	 * runtime-registered MBeans ({@link #registerManagedResource}) should get, +	 * modified: to ensure uniqueness for every instance of a managed <code>Class</code>., +	 * @see #registerManagedResource, +++ b/org.springframework.context/src/main/resources/org/springframework/ejb/config/spring-jee-2.5.xsd, +	Defines configuration elements for access to traditional Java EE components, +	such as JNDI resources and EJB session beans., +	or a local Java EE environment naming context path in which case the, +	Controls whether the lookup occurs in a Java EE container, i.e. if the, +	Set whether to expose the JNDI environment context for all access to the target, +	EJB, i.e. for all method invocations on the exposed object reference., +	Default is "false", i.e. to only expose the JNDI context for object lookup., +, +	Switch this flag to "true" in order to expose the JNDI environment (including, +	the authorization context) for each EJB invocation, as needed by WebLogic, +	for EJBs with authorization requirements., +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyResolver.java, +import org.springframework.util.StringUtils;, +		String getterName = "get" + StringUtils.capitalize(propertyName);, +			if (method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&, +		getterName = "is" + StringUtils.capitalize(propertyName);, +			if (method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&, +		Method[] methods = clazz.getMethods();, +		String setterName = "set" + StringUtils.capitalize(propertyName);, +		for (Method method : methods) {, +			if (method.getName().equals(setterName) && method.getParameterTypes().length == 1 &&, +					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {, +		Field[] fields = clazz.getFields();, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/GenericTypeAwarePropertyDescriptor.java, + * Copyright 2002-2009 the original author or authors., +					"set" + StringUtils.capitalize(getName()), readMethodToUse.getReturnType());, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/export/MBeanExporter.java, + * Copyright 2002-2009 the original author or authors., +	 * runtime-registered MBeans ({@link #registerManagedResource}) should get, +	 * modified: to ensure uniqueness for every instance of a managed <code>Class</code>., +	 * @see #registerManagedResource, +++ b/org.springframework.context/src/main/resources/org/springframework/ejb/config/spring-jee-2.5.xsd, +	Defines configuration elements for access to traditional Java EE components, +	such as JNDI resources and EJB session beans., +	or a local Java EE environment naming context path in which case the, +	Controls whether the lookup occurs in a Java EE container, i.e. if the, +	Set whether to expose the JNDI environment context for all access to the target, +	EJB, i.e. for all method invocations on the exposed object reference., +	Default is "false", i.e. to only expose the JNDI context for object lookup., +, +	Switch this flag to "true" in order to expose the JNDI environment (including, +	the authorization context) for each EJB invocation, as needed by WebLogic, +	for EJBs with authorization requirements., +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyResolver.java, +import org.springframework.util.StringUtils;, +		String getterName = "get" + StringUtils.capitalize(propertyName);, +			if (method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&, +		getterName = "is" + StringUtils.capitalize(propertyName);, +			if (method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&, +		Method[] methods = clazz.getMethods();, +		String setterName = "set" + StringUtils.capitalize(propertyName);, +		for (Method method : methods) {, +			if (method.getName().equals(setterName) && method.getParameterTypes().length == 1 &&, +					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {, +		Field[] fields = clazz.getFields();, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/InternalResourceViewResolver.java, + * Copyright 2002-2009 the original author or authors., +		this.exposeContextBeansAsAttributes = exposeContextBeansAsAttributes;, +			view.setAlwaysInclude(this.alwaysInclude);, +			view.setExposeContextBeansAsAttributes(this.exposeContextBeansAsAttributes);]