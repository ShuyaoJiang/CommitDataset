[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/MockMvcWebClientBuilder.java, +		webClient.setWebConnection(createConnection(webClient));, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/MockMvcWebClientBuilder.java, +		webClient.setWebConnection(createConnection(webClient));, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/MockMvcWebConnection.java, +	/**, +	 * Create a new instance that assumes the context path of the application, +	 * is {@code ""} (i.e., the root context)., +	 * <p>For example, the URL {@code http://localhost/test/this} would use, +	 * {@code ""} as the context path., +	 * @param mockMvc the {@code MockMvc} instance to use; never {@code null}, +	 * @param webClient the {@link WebClient} to use. never {@code null}, +	 */, +	public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient) {, +		this(mockMvc, webClient, "");, +	}, +, +	/**, +	 * Create a new instance with the specified context path., +	 * <p>The path may be {@code null} in which case the first path segment, +	 * of the URL is turned into the contextPath. Otherwise it must conform, +	 * to {@link javax.servlet.http.HttpServletRequest#getContextPath()}, +	 * which states that it can be an empty string and otherwise must start, +	 * with a "/" character and not end with a "/" character., +	 * @param mockMvc the {@code MockMvc} instance to use; never {@code null}, +	 * @param webClient  the {@link WebClient} to use. never {@code null}, +	 * @param contextPath the contextPath to use, +	 */, +	public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient, String contextPath) {, +		Assert.notNull(mockMvc, "MockMvc must not be null");, +		Assert.notNull(webClient, "WebClient must not be null");, +		validateContextPath(contextPath);, +, +		this.webClient = webClient;, +		this.mockMvc = mockMvc;, +		this.contextPath = contextPath;, +	}, +	 * @deprecated Use {@link #MockMvcWebConnection(MockMvc, WebClient)}, +	@Deprecated, +	 * @deprecated use {@link #MockMvcWebConnection(MockMvc, WebClient, String)}, +	@Deprecated, +		this(mockMvc, new WebClient(), contextPath);, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/MockMvcWebClientBuilder.java, +		webClient.setWebConnection(createConnection(webClient));, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/MockMvcWebConnection.java, +	/**, +	 * Create a new instance that assumes the context path of the application, +	 * is {@code ""} (i.e., the root context)., +	 * <p>For example, the URL {@code http://localhost/test/this} would use, +	 * {@code ""} as the context path., +	 * @param mockMvc the {@code MockMvc} instance to use; never {@code null}, +	 * @param webClient the {@link WebClient} to use. never {@code null}, +	 */, +	public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient) {, +		this(mockMvc, webClient, "");, +	}, +, +	/**, +	 * Create a new instance with the specified context path., +	 * <p>The path may be {@code null} in which case the first path segment, +	 * of the URL is turned into the contextPath. Otherwise it must conform, +	 * to {@link javax.servlet.http.HttpServletRequest#getContextPath()}, +	 * which states that it can be an empty string and otherwise must start, +	 * with a "/" character and not end with a "/" character., +	 * @param mockMvc the {@code MockMvc} instance to use; never {@code null}, +	 * @param webClient  the {@link WebClient} to use. never {@code null}, +	 * @param contextPath the contextPath to use, +	 */, +	public MockMvcWebConnection(MockMvc mockMvc, WebClient webClient, String contextPath) {, +		Assert.notNull(mockMvc, "MockMvc must not be null");, +		Assert.notNull(webClient, "WebClient must not be null");, +		validateContextPath(contextPath);, +, +		this.webClient = webClient;, +		this.mockMvc = mockMvc;, +		this.contextPath = contextPath;, +	}, +	 * @deprecated Use {@link #MockMvcWebConnection(MockMvc, WebClient)}, +	@Deprecated, +	 * @deprecated use {@link #MockMvcWebConnection(MockMvc, WebClient, String)}, +	@Deprecated, +		this(mockMvc, new WebClient(), contextPath);, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/MockMvcWebConnectionBuilderSupport.java, +import com.gargoylesoftware.htmlunit.WebClient;, +	 * @deprecated Use {@link #createConnection(WebClient)} instead, +	@Deprecated, +		return createConnection(new WebClient(), defaultConnection);, +	}, +, +	/**, +	 * Create a new {@link WebConnection} that will use a {@link MockMvc}, +	 * instance if one of the specified {@link WebRequestMatcher} instances, +	 * matches., +	 * @param webClient the WebClient to use if none of, +	 * the specified {@code WebRequestMatcher} instances matches; never {@code null}, +	 * @return a new {@code WebConnection} that will use a {@code MockMvc}, +	 * instance if one of the specified {@code WebRequestMatcher} matches, +	 * @see #alwaysUseMockMvc(), +	 * @see #useMockMvc(WebRequestMatcher...), +	 * @see #useMockMvcForHosts(String...)]