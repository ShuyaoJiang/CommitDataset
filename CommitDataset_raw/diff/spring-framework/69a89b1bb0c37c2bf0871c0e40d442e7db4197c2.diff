[+++ b/spring-aspects/src/main/java/org/springframework/mock/staticmock/AbstractMethodMockingControl.aj, + * Copyright 2002-2014 the original author or authors., +, +import org.springframework.util.ObjectUtils;, + *, + * <p>Sub-aspects must define:, + * <ul>, + * <li>the {@link #mockStaticsTestMethod()} pointcut to indicate call stacks, + * when mocking should be triggered, + * <li>the {@link #methodToMock()} pointcut to pick out method invocations to mock, + * </ul>, + * @author Sam Brannen, +, +	static enum CallResponse {, +		nothing, return_, throw_, +	};, +, +	/**, +	 * Represents a list of expected calls to methods., +	 */, +		/**, +		 * Represents an expected call to a method., +		 */, +, +, +			public Call(String signature, Object[] args) {, +				this.signature = signature;, +, +			@Override, +			public String toString() {, +				return String.format("Call with signature [%s] and arguments %s", this.signature,, +					ObjectUtils.nullSafeToString(args));, +			}, +		/**, +		 * The list of recorded calls., +		 */, +		private final LinkedList<Call> calls = new LinkedList<Call>();, +, +		/**, +		 * The number of calls already verified., +		 */, +, +				throw new IllegalStateException("Expected " + calls.size() + " calls, but received " + verified);, +			Call c = nextCall();, +, +			switch (c.responseType) {, +				case return_: {, +					return c.returnValue(lastSig, args);, +				case throw_: {, +					return c.throwException(lastSig, args);, +				default: {, +					throw new IllegalStateException("Behavior of " + c + " not specified");, +			}, +				throw new IllegalStateException("Expected " + calls.size() + " calls, but received " + verified);, +			// The 'verified' count is 1-based; whereas, 'calls' is 0-based., +			return calls.get(verified - 1);, +		public void expectCall(String lastSig, Object[] lastArgs) {, +			calls.add(new Call(lastSig, lastArgs));, +			Call c = calls.getLast();, +			if (c.hasResponseSpecified()) {, +				throw new IllegalStateException("No method invoked before setting return value");, +			c.setReturnVal(retVal);, +			Call c = calls.getLast();, +			if (c.hasResponseSpecified()) {, +				throw new IllegalStateException("No method invoked before setting throwable");, +			c.setThrow(throwable);, +		}, +, +	private final Expectations expectations = new Expectations();, +, +++ b/spring-aspects/src/main/java/org/springframework/mock/staticmock/AbstractMethodMockingControl.aj, + * Copyright 2002-2014 the original author or authors., +, +import org.springframework.util.ObjectUtils;, + *, + * <p>Sub-aspects must define:, + * <ul>, + * <li>the {@link #mockStaticsTestMethod()} pointcut to indicate call stacks, + * when mocking should be triggered, + * <li>the {@link #methodToMock()} pointcut to pick out method invocations to mock, + * </ul>, + * @author Sam Brannen, +, +	static enum CallResponse {, +		nothing, return_, throw_, +	};, +, +	/**, +	 * Represents a list of expected calls to methods., +	 */, +		/**, +		 * Represents an expected call to a method., +		 */, +, +, +			public Call(String signature, Object[] args) {, +				this.signature = signature;, +, +			@Override, +			public String toString() {]