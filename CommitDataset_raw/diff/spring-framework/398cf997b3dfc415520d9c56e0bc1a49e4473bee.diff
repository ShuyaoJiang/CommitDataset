[+++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.java, +	 * <a href="http://www.quartz-scheduler.org/documentation/quartz-2.1.x/tutorials/tutorial-lesson-03">here</a>., +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.java, +	 * <a href="http://www.quartz-scheduler.org/documentation/quartz-2.1.x/tutorials/tutorial-lesson-03">here</a>., +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/package-info.java, + * <a href="http://quartz-scheduler.org">Quartz</a>,, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.java, +	 * <a href="http://www.quartz-scheduler.org/documentation/quartz-2.1.x/tutorials/tutorial-lesson-03">here</a>., +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/package-info.java, + * <a href="http://quartz-scheduler.org">Quartz</a>,, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.java, +	protected void addInterceptors(InterceptorRegistry registry) {, +	protected void addViewControllers(ViewControllerRegistry registry) {, +	protected void addResourceHandlers(ResourceHandlerRegistry registry) {, +	protected void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {, +	protected void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {, +	protected void addReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {, +	protected void configureMessageConverters(List<HttpMessageConverter<?>> converters) {, +	protected void addFormatters(FormatterRegistry registry) {, +	protected Validator getValidator() {, +	protected void configureHandlerExceptionResolvers(List<HandlerExceptionResolver> exceptionResolvers) {, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.java, +	 * <a href="http://www.quartz-scheduler.org/documentation/quartz-2.1.x/tutorials/tutorial-lesson-03">here</a>., +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/package-info.java, + * <a href="http://quartz-scheduler.org">Quartz</a>,, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.java, +	protected void addInterceptors(InterceptorRegistry registry) {, +	protected void addViewControllers(ViewControllerRegistry registry) {, +	protected void addResourceHandlers(ResourceHandlerRegistry registry) {, +	protected void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {, +	protected void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {, +	protected void addReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {, +	protected void configureMessageConverters(List<HttpMessageConverter<?>> converters) {, +	protected void addFormatters(FormatterRegistry registry) {, +	protected Validator getValidator() {, +	protected void configureHandlerExceptionResolvers(List<HandlerExceptionResolver> exceptionResolvers) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +import java.util.Collection;, +, +		List<T> directPathMatches = this.urlMap.get(lookupPath);, +		if (directPathMatches != null) {, +			addMatchingMappings(directPathMatches, matches, request);, +, +		if (matches.isEmpty()) {, +			// No choice but to go through all mappings, +			addMatchingMappings(this.handlerMethods.keySet(), matches, request);, +	private void addMatchingMappings(Collection<T> mappings, List<Match> matches, HttpServletRequest request) {, +		for (T mapping : mappings) {, +			T match = getMatchingMapping(mapping, request);, +			if (match != null) {, +				matches.add(new Match(match, handlerMethods.get(mapping)));, +			}, +		}, +	}, +, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.java, +	 * <a href="http://www.quartz-scheduler.org/documentation/quartz-2.1.x/tutorials/tutorial-lesson-03">here</a>., +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/package-info.java, + * <a href="http://quartz-scheduler.org">Quartz</a>,, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.java, +	protected void addInterceptors(InterceptorRegistry registry) {, +	protected void addViewControllers(ViewControllerRegistry registry) {, +	protected void addResourceHandlers(ResourceHandlerRegistry registry) {, +	protected void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {, +	protected void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {, +	protected void addReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {, +	protected void configureMessageConverters(List<HttpMessageConverter<?>> converters) {, +	protected void addFormatters(FormatterRegistry registry) {, +	protected Validator getValidator() {, +	protected void configureHandlerExceptionResolvers(List<HandlerExceptionResolver> exceptionResolvers) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +import java.util.Collection;, +, +		List<T> directPathMatches = this.urlMap.get(lookupPath);, +		if (directPathMatches != null) {, +			addMatchingMappings(directPathMatches, matches, request);, +, +		if (matches.isEmpty()) {, +			// No choice but to go through all mappings, +			addMatchingMappings(this.handlerMethods.keySet(), matches, request);, +	private void addMatchingMappings(Collection<T> mappings, List<Match> matches, HttpServletRequest request) {, +		for (T mapping : mappings) {, +			T match = getMatchingMapping(mapping, request);, +			if (match != null) {, +				matches.add(new Match(match, handlerMethods.get(mapping)));, +			}, +		}, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/RedirectView.java, +	private boolean expandUriTemplateVariables = true;, +	 * Whether to treat the redirect URL as a URI template., +	 * Set this flag to <code>false</code> if the redirect URL contains open, +	 * and close curly braces "{", "}" and you don't want them interpreted, +	 * as URI variables., +	 * <p>Defaults to <code>true</code>., +	 * @param expandUriTemplateVariables, +	 */, +	public void setExpandUriTemplateVariables(boolean expandUriTemplateVariables) {, +		this.expandUriTemplateVariables = expandUriTemplateVariables;]