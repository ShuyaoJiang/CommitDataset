[+++ b/spring-core/src/test/java/org/springframework/core/io/buffer/AbstractDataBufferAllocatingTestCase.java, + * Copyright 2002-2018 the original author or authors., +		return byteBuffer(value.getBytes(StandardCharsets.UTF_8));, +	}, +, +	protected DataBuffer byteBuffer(byte[] value) {, +		DataBuffer buffer = this.bufferFactory.allocateBuffer(value.length);, +		buffer.write(value);, +++ b/spring-core/src/test/java/org/springframework/core/io/buffer/AbstractDataBufferAllocatingTestCase.java, + * Copyright 2002-2018 the original author or authors., +		return byteBuffer(value.getBytes(StandardCharsets.UTF_8));, +	}, +, +	protected DataBuffer byteBuffer(byte[] value) {, +		DataBuffer buffer = this.bufferFactory.allocateBuffer(value.length);, +		buffer.write(value);, +++ b/spring-web/src/main/java/org/springframework/http/codec/protobuf/ProtobufDecoder.java, +			catch (DecodingException ex) {, +				throw ex;, +			}, +			finally {, +				DataBufferUtils.release(input);, +			}, +++ b/spring-core/src/test/java/org/springframework/core/io/buffer/AbstractDataBufferAllocatingTestCase.java, + * Copyright 2002-2018 the original author or authors., +		return byteBuffer(value.getBytes(StandardCharsets.UTF_8));, +	}, +, +	protected DataBuffer byteBuffer(byte[] value) {, +		DataBuffer buffer = this.bufferFactory.allocateBuffer(value.length);, +		buffer.write(value);, +++ b/spring-web/src/main/java/org/springframework/http/codec/protobuf/ProtobufDecoder.java, +			catch (DecodingException ex) {, +				throw ex;, +			}, +			finally {, +				DataBufferUtils.release(input);, +			}, +++ b/spring-web/src/test/java/org/springframework/http/codec/protobuf/ProtobufDecoderTests.java, +import static org.junit.Assert.*;, +		DataBuffer data = byteBuffer(testMsg.toByteArray());, +		DataBuffer buffer = byteBuffer(testMsg.toByteArray());, +				DataBufferUtils.retain(buffer.slice(0, 4)),, +				DataBufferUtils.retain(buffer.slice(4, buffer.readableByteCount() - 4)));, +		release(buffer);, +		DataBuffer buffer = this.bufferFactory.allocateBuffer();, +		DataBuffer buffer2 = this.bufferFactory.allocateBuffer();, +, +		DataBuffer buffer = this.bufferFactory.allocateBuffer();, +		DataBuffer buffer2 = this.bufferFactory.allocateBuffer();, +, +				DataBufferUtils.retain(buffer.slice(0, 4)),, +				DataBufferUtils.retain(buffer.slice(4, buffer.readableByteCount() - 4)),, +				DataBufferUtils.retain(buffer2.slice(0, 2)),, +				DataBufferUtils.retain(buffer2, +						.slice(2, buffer2.readableByteCount() - 2)));, +		release(buffer, buffer2);, +		Flux<DataBuffer> source = Flux.just(byteBuffer(testMsg.toByteArray()));]