[+++ b/src/asciidoc/index.adoc, +testing scenarios. Specifically, `JdbcTestUtils` provides the following static utility, +methods., +, +* `countRowsInTable(..)`: counts the number of rows in the given table, +* `countRowsInTableWhere(..)`: counts the number of rows in the given table, using, +the provided `WHERE` clause, +* `deleteFromTables(..)`: deletes all rows from the specified tables, +* `deleteFromTableWhere(..)`: deletes rows from the given table, using the provided, +`WHERE` clause, +* `dropTables(..)`: drops the specified tables, +, +__Note that <<testcontext-support-classes-junit4,, +provide convenience methods which delegate to the aforementioned methods in, +`JdbcTestUtils`.__, +* `@Sql`, +, ++, +, +Used to annotate a test class or test method to configure SQL scripts to be executed, +against a given database during integration tests., +, ++, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Test, +	**@Sql**({"/test-schema.sql", "/test-user-data.sql"}), +	public void userTest {, +		// execute code that relies on the test schema and test data, +	}, +----, +, ++, +, +See <<testcontext-executing-sql-declaratively>> for further details., +, +* `@SqlConfig`, +, ++, +, +Defines metadata that is used to determine how to parse and execute SQL scripts, +configured via the `@Sql` annotation., +, ++, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Test, +	@Sql(, +		scripts = "/test-user-data.sql",, +		config = **@SqlConfig**(commentPrefix = "`", separator = "@@"), +	), +	public void userTest {, +		// execute code that relies on the test data, +	}, +----, +, +* `@SqlGroup`, +, ++, +, +A container annotation that aggregates several `@Sql` annotations. Can be used natively,, +declaring several nested `@Sql` annotations. Can also be used in conjunction with Java, +8's support for repeatable annotations, where `@Sql` can simply be declared several times, +on the same class or method, implicitly generating this container annotation., +, ++, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Test, +	**@SqlGroup**({, +		@Sql(scripts = "/test-schema.sql", config = @SqlConfig(commentPrefix = "`")),, +		@Sql("/test-user-data.sql"), +	)}, +	public void userTest {, +		// execute code that uses the test schema and test data, +	}, +----, +, +As of Spring Framework 4.0, it is possible to use test-related annotations as, +<<beans-meta-annotations,meta-annotations>> in order to create custom _composed annotations_, +and reduce configuration duplication across a test suite., +* `@Sql`, +* `@SqlConfig`, +* `@SqlGroup`, +Spring provides five `TestExecutionListener` implementations that are configured by, +`DirtiesContextTestExecutionListener`, `TransactionalTestExecutionListener`, and, +`SqlScriptsTestExecutionListener`. Respectively, they support Servlet API mocks for, +a `WebApplicationContext`, dependency injection of the test instance, handling of, +the `@DirtiesContext` annotation, transactional test execution with default rollback, +semantics, and execution of SQL scripts configured via the `@Sql` annotation., +and configuration examples. <<testcontext-executing-sql-declaratively-tx,, +Transaction management for `@Sql`>> contains an additional example using `@Sql` for, +declarative SQL script execution with default transaction rollback semantics., +]