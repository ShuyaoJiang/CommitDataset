[+++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java, +		return Mono.defer(() -> retrieveSession(exchange), +			return Mono.error(new IllegalStateException("Session='" + session.getId() + "' expired."));, +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java, +		return Mono.defer(() -> retrieveSession(exchange), +			return Mono.error(new IllegalStateException("Session='" + session.getId() + "' expired."));, +++ b/spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java, +	private final Map<String, InMemoryWebSession> sessions = new ConcurrentHashMap<>();, +		InMemoryWebSession session = this.sessions.get(id);, +			session.updateLastAccessTime();, +			Assert.isInstanceOf(InMemoryWebSession.class, webSession);, +			session.updateLastAccessTime();, +			return session;, +		private volatile Instant lastAccessTime;, +, +			String currentId = this.id.get();, +			if (InMemoryWebSessionStore.this.sessions.remove(currentId) == null) {, +				return Mono.error(new IllegalStateException(, +						"Failed to change session id: " + currentId +, +								" because the Session is no longer present in the store."));, +			}, +			InMemoryWebSessionStore.this.sessions.put(this.getId(), this);, +			return Mono.empty();, +			InMemoryWebSessionStore.this.sessions.put(this.getId(), this);, +			return Mono.empty();, +, +		private void updateLastAccessTime() {, +			this.lastAccessTime = Instant.now(getClock());, +		}, +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java, +		return Mono.defer(() -> retrieveSession(exchange), +			return Mono.error(new IllegalStateException("Session='" + session.getId() + "' expired."));, +++ b/spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java, +	private final Map<String, InMemoryWebSession> sessions = new ConcurrentHashMap<>();, +		InMemoryWebSession session = this.sessions.get(id);, +			session.updateLastAccessTime();, +			Assert.isInstanceOf(InMemoryWebSession.class, webSession);, +			session.updateLastAccessTime();, +			return session;, +		private volatile Instant lastAccessTime;, +, +			String currentId = this.id.get();, +			if (InMemoryWebSessionStore.this.sessions.remove(currentId) == null) {, +				return Mono.error(new IllegalStateException(, +						"Failed to change session id: " + currentId +, +								" because the Session is no longer present in the store."));, +			}, +			InMemoryWebSessionStore.this.sessions.put(this.getId(), this);, +			return Mono.empty();, +			InMemoryWebSessionStore.this.sessions.put(this.getId(), this);, +			return Mono.empty();, +, +		private void updateLastAccessTime() {, +			this.lastAccessTime = Instant.now(getClock());, +		}, +++ b/spring-web/src/main/java/org/springframework/web/server/session/WebSessionStore.java, +	 * and if it has expired remove the session and return empty. This method, +	 * should also update the lastAccessTime of retrieved sessions., +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java, +		return Mono.defer(() -> retrieveSession(exchange), +			return Mono.error(new IllegalStateException("Session='" + session.getId() + "' expired."));, +++ b/spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java, +	private final Map<String, InMemoryWebSession> sessions = new ConcurrentHashMap<>();, +		InMemoryWebSession session = this.sessions.get(id);, +			session.updateLastAccessTime();, +			Assert.isInstanceOf(InMemoryWebSession.class, webSession);, +			session.updateLastAccessTime();, +			return session;, +		private volatile Instant lastAccessTime;, +, +			String currentId = this.id.get();, +			if (InMemoryWebSessionStore.this.sessions.remove(currentId) == null) {, +				return Mono.error(new IllegalStateException(, +						"Failed to change session id: " + currentId +, +								" because the Session is no longer present in the store."));, +			}, +			InMemoryWebSessionStore.this.sessions.put(this.getId(), this);, +			return Mono.empty();, +			InMemoryWebSessionStore.this.sessions.put(this.getId(), this);, +			return Mono.empty();, +, +		private void updateLastAccessTime() {, +			this.lastAccessTime = Instant.now(getClock());, +		}, +++ b/spring-web/src/main/java/org/springframework/web/server/session/WebSessionStore.java, +	 * and if it has expired remove the session and return empty. This method, +	 * should also update the lastAccessTime of retrieved sessions., +++ b/spring-web/src/test/java/org/springframework/web/server/session/InMemoryWebSessionStoreTests.java, +import java.time.Instant;, + * Unit tests for {@link InMemoryWebSessionStore}., +		// Fast-forward 31 minutes, +, +	@Test, +	public void lastAccessTimeIsUpdatedOnRetrieve() throws Exception {, +		WebSession session1 = this.store.createWebSession().block();, +		assertNotNull(session1);, +		String id = session1.getId();, +		Instant time1 = session1.getLastAccessTime();, +		session1.save();, +]