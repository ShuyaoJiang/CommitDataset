[+++ b/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java, + * Copyright 2002-2016 the original author or authors., +	public enum ReferenceType {, +	protected interface Reference<K, V> {, +	private enum TaskOption {, +	protected enum Restructure {, +++ b/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java, + * Copyright 2002-2016 the original author or authors., +	public enum ReferenceType {, +	protected interface Reference<K, V> {, +	private enum TaskOption {, +	protected enum Restructure {, +++ b/spring-jms/src/main/java/org/springframework/jms/config/JmsListenerEndpointRegistry.java, +, +	public void setApplicationContext(ApplicationContext applicationContext) {, +	@Override, +	public void onApplicationEvent(ContextRefreshedEvent event) {, +		if (event.getApplicationContext() == this.applicationContext) {, +			this.contextRefreshed = true;, +		}, +	}, +, +			if (this.listenerContainers.containsKey(id)) {, +				throw new IllegalStateException("Another endpoint is already registered with id '" + id + "'");, +			}, +	@Override, +	public void destroy() {, +		for (MessageListenerContainer listenerContainer : getListenerContainers()) {, +			if (listenerContainer instanceof DisposableBean) {, +				try {, +					((DisposableBean) listenerContainer).destroy();, +				}, +				catch (Throwable ex) {, +					logger.warn("Failed to destroy message listener container", ex);, +				}, +			}, +		}, +	}, +, +++ b/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java, + * Copyright 2002-2016 the original author or authors., +	public enum ReferenceType {, +	protected interface Reference<K, V> {, +	private enum TaskOption {, +	protected enum Restructure {, +++ b/spring-jms/src/main/java/org/springframework/jms/config/JmsListenerEndpointRegistry.java, +, +	public void setApplicationContext(ApplicationContext applicationContext) {, +	@Override, +	public void onApplicationEvent(ContextRefreshedEvent event) {, +		if (event.getApplicationContext() == this.applicationContext) {, +			this.contextRefreshed = true;, +		}, +	}, +, +			if (this.listenerContainers.containsKey(id)) {, +				throw new IllegalStateException("Another endpoint is already registered with id '" + id + "'");, +			}, +	@Override, +	public void destroy() {, +		for (MessageListenerContainer listenerContainer : getListenerContainers()) {, +			if (listenerContainer instanceof DisposableBean) {, +				try {, +					((DisposableBean) listenerContainer).destroy();, +				}, +				catch (Throwable ex) {, +					logger.warn("Failed to destroy message listener container", ex);, +				}, +			}, +		}, +	}, +, +++ b/spring-jms/src/test/java/org/springframework/jms/annotation/EnableJmsTests.java, +		thrown.expectMessage("customFactory");  // not found, +		context.close();  // close and stop the listeners, +, +, +, +++ b/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java, + * Copyright 2002-2016 the original author or authors., +	public enum ReferenceType {, +	protected interface Reference<K, V> {, +	private enum TaskOption {, +	protected enum Restructure {, +++ b/spring-jms/src/main/java/org/springframework/jms/config/JmsListenerEndpointRegistry.java, +, +	public void setApplicationContext(ApplicationContext applicationContext) {, +	@Override, +	public void onApplicationEvent(ContextRefreshedEvent event) {, +		if (event.getApplicationContext() == this.applicationContext) {, +			this.contextRefreshed = true;, +		}, +	}, +, +			if (this.listenerContainers.containsKey(id)) {, +				throw new IllegalStateException("Another endpoint is already registered with id '" + id + "'");, +			}, +	@Override, +	public void destroy() {, +		for (MessageListenerContainer listenerContainer : getListenerContainers()) {]