[+++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/WebTestClientConnectorTests.java, + * Copyright 2002-2018 the original author or authors., +import static org.junit.Assert.*;, +	public void captureAndClaim() {, +		ClientRequest clientRequest = ClientRequest.create(HttpMethod.GET, URI.create("/test")), +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/WebTestClientConnectorTests.java, + * Copyright 2002-2018 the original author or authors., +import static org.junit.Assert.*;, +	public void captureAndClaim() {, +		ClientRequest clientRequest = ClientRequest.create(HttpMethod.GET, URI.create("/test")), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, + * Copyright 2002-2018 the original author or authors., +		return new DefaultClientRequestBuilder(other);, +	 * @deprecated in favor of {@link #create(HttpMethod, URI)}, +	@Deprecated, +	/**, +	 * Create a request builder with the given method and url., +	 * @param method the HTTP method (GET, POST, etc), +	 * @param url the URL, +	 * @return the created builder, +	 */, +	static Builder create(HttpMethod method, URI url) {, +		return new DefaultClientRequestBuilder(method, url);, +	}, +, +		 * Builds the request., +		 * @return the request, +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/WebTestClientConnectorTests.java, + * Copyright 2002-2018 the original author or authors., +import static org.junit.Assert.*;, +	public void captureAndClaim() {, +		ClientRequest clientRequest = ClientRequest.create(HttpMethod.GET, URI.create("/test")), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, + * Copyright 2002-2018 the original author or authors., +		return new DefaultClientRequestBuilder(other);, +	 * @deprecated in favor of {@link #create(HttpMethod, URI)}, +	@Deprecated, +	/**, +	 * Create a request builder with the given method and url., +	 * @param method the HTTP method (GET, POST, etc), +	 * @param url the URL, +	 * @return the created builder, +	 */, +	static Builder create(HttpMethod method, URI url) {, +		return new DefaultClientRequestBuilder(method, url);, +	}, +, +		 * Builds the request., +		 * @return the request, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientRequestBuilder.java, + * Copyright 2002-2018 the original author or authors., +	public DefaultClientRequestBuilder(ClientRequest other) {, +		this(other.method(), other.url());, +		headers(headers -> headers.addAll(other.headers()));, +		cookies(cookies -> cookies.addAll(other.cookies()));, +		attributes(attributes -> attributes.putAll(other.attributes()));, +		body(other.body());, +	}, +, +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/WebTestClientConnectorTests.java, + * Copyright 2002-2018 the original author or authors., +import static org.junit.Assert.*;, +	public void captureAndClaim() {, +		ClientRequest clientRequest = ClientRequest.create(HttpMethod.GET, URI.create("/test")), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, + * Copyright 2002-2018 the original author or authors., +		return new DefaultClientRequestBuilder(other);, +	 * @deprecated in favor of {@link #create(HttpMethod, URI)}, +	@Deprecated, +	/**, +	 * Create a request builder with the given method and url., +	 * @param method the HTTP method (GET, POST, etc), +	 * @param url the URL, +	 * @return the created builder, +	 */, +	static Builder create(HttpMethod method, URI url) {, +		return new DefaultClientRequestBuilder(method, url);, +	}, +, +		 * Builds the request., +		 * @return the request, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientRequestBuilder.java, + * Copyright 2002-2018 the original author or authors., +	public DefaultClientRequestBuilder(ClientRequest other) {, +		this(other.method(), other.url());, +		headers(headers -> headers.addAll(other.headers()));, +		cookies(cookies -> cookies.addAll(other.cookies()));, +		attributes(attributes -> attributes.putAll(other.attributes()));, +		body(other.body());, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +			return ClientRequest.create(this.httpMethod, uri), +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/WebTestClientConnectorTests.java, + * Copyright 2002-2018 the original author or authors., +import static org.junit.Assert.*;, +	public void captureAndClaim() {, +		ClientRequest clientRequest = ClientRequest.create(HttpMethod.GET, URI.create("/test")), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, + * Copyright 2002-2018 the original author or authors.]