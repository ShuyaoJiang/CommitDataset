[+++ b/build-spring-framework/resources/changelog.txt, +* Fix issue with cache ignoring prototype-scoped controllers in RequestMappingHandlerAdapter, +++ b/build-spring-framework/resources/changelog.txt, +* Fix issue with cache ignoring prototype-scoped controllers in RequestMappingHandlerAdapter, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java, +import java.util.Set;, +	private final Map<Class<?>, Set<Method>> dataBinderFactoryCache = new ConcurrentHashMap<Class<?>, Set<Method>>();, +	private final Map<Class<?>, Set<Method>> modelFactoryCache = new ConcurrentHashMap<Class<?>, Set<Method>>();, +		Set<Method> methods = this.modelFactoryCache.get(handlerType);, +		if (methods == null) {, +			methods = HandlerMethodSelector.selectMethods(handlerType, MODEL_ATTRIBUTE_METHODS);, +			this.modelFactoryCache.put(handlerType, methods);, +		}, +		for (Method method : methods) {, +		return new ModelFactory(attrMethods, binderFactory, sessionAttrHandler);, +		Set<Method> methods = this.dataBinderFactoryCache.get(handlerType);, +		if (methods == null) {, +			methods = HandlerMethodSelector.selectMethods(handlerType, INIT_BINDER_METHODS);, +			this.dataBinderFactoryCache.put(handlerType, methods);, +		}, +		for (Method method : methods) {, +		return createDataBinderFactory(binderMethods);, +++ b/build-spring-framework/resources/changelog.txt, +* Fix issue with cache ignoring prototype-scoped controllers in RequestMappingHandlerAdapter, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java, +import java.util.Set;, +	private final Map<Class<?>, Set<Method>> dataBinderFactoryCache = new ConcurrentHashMap<Class<?>, Set<Method>>();, +	private final Map<Class<?>, Set<Method>> modelFactoryCache = new ConcurrentHashMap<Class<?>, Set<Method>>();, +		Set<Method> methods = this.modelFactoryCache.get(handlerType);, +		if (methods == null) {, +			methods = HandlerMethodSelector.selectMethods(handlerType, MODEL_ATTRIBUTE_METHODS);, +			this.modelFactoryCache.put(handlerType, methods);, +		}, +		for (Method method : methods) {, +		return new ModelFactory(attrMethods, binderFactory, sessionAttrHandler);, +		Set<Method> methods = this.dataBinderFactoryCache.get(handlerType);, +		if (methods == null) {, +			methods = HandlerMethodSelector.selectMethods(handlerType, INIT_BINDER_METHODS);, +			this.dataBinderFactoryCache.put(handlerType, methods);, +		}, +		for (Method method : methods) {, +		return createDataBinderFactory(binderMethods);, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapterIntegrationTests.java, + * A test fixture with a controller with all supported method signature styles, + * and arguments. A convenient place to test or confirm a problem with a , + * specific argument or return value type. , + * , + * @see HandlerMethodAnnotationDetectionTests, + * @see ServletAnnotationControllerHandlerMethodTests, +		handlerAdapter.handle(request, response, handlerMethod);, +++ b/build-spring-framework/resources/changelog.txt, +* Fix issue with cache ignoring prototype-scoped controllers in RequestMappingHandlerAdapter, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java, +import java.util.Set;, +	private final Map<Class<?>, Set<Method>> dataBinderFactoryCache = new ConcurrentHashMap<Class<?>, Set<Method>>();, +	private final Map<Class<?>, Set<Method>> modelFactoryCache = new ConcurrentHashMap<Class<?>, Set<Method>>();, +		Set<Method> methods = this.modelFactoryCache.get(handlerType);, +		if (methods == null) {, +			methods = HandlerMethodSelector.selectMethods(handlerType, MODEL_ATTRIBUTE_METHODS);, +			this.modelFactoryCache.put(handlerType, methods);, +		}, +		for (Method method : methods) {, +		return new ModelFactory(attrMethods, binderFactory, sessionAttrHandler);, +		Set<Method> methods = this.dataBinderFactoryCache.get(handlerType);, +		if (methods == null) {, +			methods = HandlerMethodSelector.selectMethods(handlerType, INIT_BINDER_METHODS);, +			this.dataBinderFactoryCache.put(handlerType, methods);, +		}, +		for (Method method : methods) {, +		return createDataBinderFactory(binderMethods);, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapterIntegrationTests.java, + * A test fixture with a controller with all supported method signature styles, + * and arguments. A convenient place to test or confirm a problem with a , + * specific argument or return value type. , + * , + * @see HandlerMethodAnnotationDetectionTests, + * @see ServletAnnotationControllerHandlerMethodTests, +		handlerAdapter.handle(request, response, handlerMethod);, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletAnnotationControllerHandlerMethodTests.java, +import org.springframework.beans.factory.config.BeanDefinition;, +	@Test, +	public void prototypeController() throws Exception {, +		initServlet(new ApplicationContextInitializer<GenericWebApplicationContext>() {, +			public void initialize(GenericWebApplicationContext context) {, +				RootBeanDefinition beanDef = new RootBeanDefinition(PrototypeController.class);, +				beanDef.setScope(BeanDefinition.SCOPE_PROTOTYPE);, +				context.registerBeanDefinition("controller", beanDef);, +			}, +		});, +		, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/");, +		request.addParameter("param", "1");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		getServlet().service(request, response);, +	, +		assertEquals("count:3", response.getContentAsString());, +, +		response = new MockHttpServletResponse();, +		getServlet().service(request, response);, +	]