[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractor.java, +import java.util.Optional;, +import org.springframework.http.server.reactive.ServerHttpResponse;, +		 * Optionally return the {@link ServerHttpResponse}, if present., +		 */, +		Optional<ServerHttpResponse> serverResponse();, +, +		/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractor.java, +import java.util.Optional;, +import org.springframework.http.server.reactive.ServerHttpResponse;, +		 * Optionally return the {@link ServerHttpResponse}, if present., +		 */, +		Optional<ServerHttpResponse> serverResponse();, +, +		/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java, +import java.util.Optional;, +import org.springframework.http.server.reactive.ServerHttpResponse;, +		return (inputMessage, context) -> readWithMessageReaders(inputMessage, context,, +				reader -> {, +					Optional<ServerHttpResponse> serverResponse = context.serverResponse();, +					if (serverResponse.isPresent() && inputMessage instanceof ServerHttpRequest) {, +						return reader.readMono(elementType, elementType, (ServerHttpRequest) inputMessage,, +								serverResponse.get(), context.hints());, +					}, +					else {, +						return reader.readMono(elementType, inputMessage, context.hints());, +					}, +				},, +				reader -> {, +					Optional<ServerHttpResponse> serverResponse = context.serverResponse();, +					if (serverResponse.isPresent() && inputMessage instanceof ServerHttpRequest) {, +						return reader.read(elementType, elementType, (ServerHttpRequest) inputMessage,, +								serverResponse.get(), context.hints());, +					}, +					else {, +						return reader.read(elementType, inputMessage, context.hints());, +					}, +				},, +			HttpMessageReader<MultiValueMap<String, String>> messageReader =, +					formMessageReader(context);, +			return context.serverResponse(), +					.map(serverResponse -> messageReader.readMono(FORM_TYPE, FORM_TYPE, serverRequest, serverResponse, context.hints())), +					.orElseGet(() -> messageReader.readMono(FORM_TYPE, serverRequest, context.hints()));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractor.java, +import java.util.Optional;, +import org.springframework.http.server.reactive.ServerHttpResponse;, +		 * Optionally return the {@link ServerHttpResponse}, if present., +		 */, +		Optional<ServerHttpResponse> serverResponse();, +, +		/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java, +import java.util.Optional;, +import org.springframework.http.server.reactive.ServerHttpResponse;, +		return (inputMessage, context) -> readWithMessageReaders(inputMessage, context,, +				reader -> {, +					Optional<ServerHttpResponse> serverResponse = context.serverResponse();, +					if (serverResponse.isPresent() && inputMessage instanceof ServerHttpRequest) {, +						return reader.readMono(elementType, elementType, (ServerHttpRequest) inputMessage,, +								serverResponse.get(), context.hints());, +					}, +					else {, +						return reader.readMono(elementType, inputMessage, context.hints());, +					}, +				},, +				reader -> {, +					Optional<ServerHttpResponse> serverResponse = context.serverResponse();, +					if (serverResponse.isPresent() && inputMessage instanceof ServerHttpRequest) {, +						return reader.read(elementType, elementType, (ServerHttpRequest) inputMessage,, +								serverResponse.get(), context.hints());, +					}, +					else {, +						return reader.read(elementType, inputMessage, context.hints());, +					}, +				},, +			HttpMessageReader<MultiValueMap<String, String>> messageReader =, +					formMessageReader(context);, +			return context.serverResponse(), +					.map(serverResponse -> messageReader.readMono(FORM_TYPE, FORM_TYPE, serverRequest, serverResponse, context.hints())), +					.orElseGet(() -> messageReader.readMono(FORM_TYPE, serverRequest, context.hints()));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyInserter.java, +import java.util.Optional;, +import org.springframework.http.server.reactive.ServerHttpRequest;, +		 * Optionally return the {@link ServerHttpRequest}, if present., +		 */, +		Optional<ServerHttpRequest> serverRequest();, +, +		/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractor.java, +import java.util.Optional;, +import org.springframework.http.server.reactive.ServerHttpResponse;, +		 * Optionally return the {@link ServerHttpResponse}, if present., +		 */, +		Optional<ServerHttpResponse> serverResponse();, +, +		/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java, +import java.util.Optional;]