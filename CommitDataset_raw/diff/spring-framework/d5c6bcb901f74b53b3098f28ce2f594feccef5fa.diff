[+++ b/spring-test/src/main/java/org/springframework/mock/web/MockServletContext.java, + * Copyright 2002-2014 the original author or authors., +, +	 * Create a new {@code MockServletContext}, using no base path and a, +	 * {@link DefaultResourceLoader} (i.e. the classpath root as WAR root)., +	 * Create a new {@code MockServletContext}, using a {@link DefaultResourceLoader}., +	 * Create a new {@code MockServletContext}, using the specified {@link ResourceLoader}, +	 * Create a new {@code MockServletContext} using the supplied resource base, +	 * path and resource loader., +	 * Build a full resource location for the given path, prepending the resource, +	 * base path of this {@code MockServletContext}., +	 * This method uses the default, +	 * {@link javax.activation.FileTypeMap#getDefaultFileTypeMap() FileTypeMap}, +	 * from the Java Activation Framework to resolve MIME types., +	 * <p>The Java Activation Framework returns {@code "application/octet-stream"}, +	 * if the MIME type is unknown (i.e., it never returns {@code null}). Thus, in, +	 * order to honor the {@link ServletContext#getMimeType(String)} contract,, +	 * this method returns {@code null} if the MIME type is, +	 * {@code "application/octet-stream"}., +	 * <p>{@code MockServletContext} does not provide a direct mechanism for, +	 * setting a custom MIME type; however, if the default {@code FileTypeMap}, +	 * is an instance of {@code javax.activation.MimetypesFileTypeMap}, a custom, +	 * MIME type named {@code text/enigma} can be registered for a custom, +	 * {@code .puzzle} file extension in the following manner:, +	 * <pre style="code">, +	 * MimetypesFileTypeMap mimetypesFileTypeMap = (MimetypesFileTypeMap) FileTypeMap.getDefaultFileTypeMap();, +	 * mimetypesFileTypeMap.addMimeTypes("text/enigma    puzzle");, +	 * </pre>, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockServletContext.java, + * Copyright 2002-2014 the original author or authors., +, +	 * Create a new {@code MockServletContext}, using no base path and a, +	 * {@link DefaultResourceLoader} (i.e. the classpath root as WAR root)., +	 * Create a new {@code MockServletContext}, using a {@link DefaultResourceLoader}., +	 * Create a new {@code MockServletContext}, using the specified {@link ResourceLoader}, +	 * Create a new {@code MockServletContext} using the supplied resource base, +	 * path and resource loader., +	 * Build a full resource location for the given path, prepending the resource, +	 * base path of this {@code MockServletContext}., +	 * This method uses the default, +	 * {@link javax.activation.FileTypeMap#getDefaultFileTypeMap() FileTypeMap}, +	 * from the Java Activation Framework to resolve MIME types., +	 * <p>The Java Activation Framework returns {@code "application/octet-stream"}, +	 * if the MIME type is unknown (i.e., it never returns {@code null}). Thus, in, +	 * order to honor the {@link ServletContext#getMimeType(String)} contract,, +	 * this method returns {@code null} if the MIME type is, +	 * {@code "application/octet-stream"}., +	 * <p>{@code MockServletContext} does not provide a direct mechanism for, +	 * setting a custom MIME type; however, if the default {@code FileTypeMap}, +	 * is an instance of {@code javax.activation.MimetypesFileTypeMap}, a custom, +	 * MIME type named {@code text/enigma} can be registered for a custom, +	 * {@code .puzzle} file extension in the following manner:, +	 * <pre style="code">, +	 * MimetypesFileTypeMap mimetypesFileTypeMap = (MimetypesFileTypeMap) FileTypeMap.getDefaultFileTypeMap();, +	 * mimetypesFileTypeMap.addMimeTypes("text/enigma    puzzle");, +	 * </pre>, +++ b/spring-test/src/test/java/org/springframework/mock/web/MockServletContextTests.java, +		FileTypeMap defaultFileTypeMap = FileTypeMap.getDefaultFileTypeMap();]