[+++ b/spring-core/src/main/java/org/springframework/util/MimeType.java, +	protected static final String WILDCARD_TYPE = "*";, +	private static final BitSet TOKEN;, +	private final String type;, +, +	private final String subtype;, +, +	private final Map<String, String> parameters;, +, +, +	 * @since 4.3, +	 * @since 4.3, +	public Charset getCharset() {, +	 * Return the character set, as indicated by a {@code charset} parameter, if any., +	 * @return the character set, or {@code null} if not available, +	 * @deprecated as of Spring 4.3, in favor of {@link #getCharset()} with its name, +	 * aligned with the Java return type name, +	 */, +	@Deprecated, +	public Charset getCharSet() {, +		return getCharset();, +	}, +, +	/**, +, +	@Override, +	public boolean equals(Object other) {, +		if (this == other) {, +			return true;, +		}, +		if (!(other instanceof MimeType)) {, +			return false;, +		}, +		MimeType otherType = (MimeType) other;, +		return (this.type.equalsIgnoreCase(otherType.type) &&, +				this.subtype.equalsIgnoreCase(otherType.subtype) &&, +				parametersAreEqual(otherType));, +	}, +, +	/**, +	 * Determine if the parameters in this {@code MimeType} and the supplied, +	 * {@code MimeType} are equal, performing case-insensitive comparisons, +	 * for {@link Charset}s., +	 * @since 4.2, +	 */, +	private boolean parametersAreEqual(MimeType other) {, +		if (this.parameters.size() != other.parameters.size()) {, +			return false;, +		}, +, +		for (String key : this.parameters.keySet()) {, +			if (!other.parameters.containsKey(key)) {, +				return false;, +			}, +, +			if (PARAM_CHARSET.equals(key)) {, +				if (!ObjectUtils.nullSafeEquals(getCharset(), other.getCharset())) {, +					return false;, +				}, +			}, +			else if (!ObjectUtils.nullSafeEquals(this.parameters.get(key), other.parameters.get(key))) {, +				return false;, +			}, +		}, +, +		return true;, +	}, +, +	@Override, +	public int hashCode() {, +		int result = this.type.hashCode();, +		result = 31 * result + this.subtype.hashCode();, +		result = 31 * result + this.parameters.hashCode();, +		return result;, +	}, +, +	@Override, +	public String toString() {, +		StringBuilder builder = new StringBuilder();, +		appendTo(builder);, +		return builder.toString();, +	}, +, +	protected void appendTo(StringBuilder builder) {, +		builder.append(this.type);, +		builder.append('/');, +		builder.append(this.subtype);, +		appendTo(this.parameters, builder);, +	}, +, +	private void appendTo(Map<String, String> map, StringBuilder builder) {, +		for (Map.Entry<String, String> entry : map.entrySet()) {, +			builder.append(';');, +			builder.append(entry.getKey());, +			builder.append('=');, +			builder.append(entry.getValue());, +		}, +	}, +, +	private static Map<String, String> addCharsetParameter(Charset charset, Map<String, String> parameters) {]