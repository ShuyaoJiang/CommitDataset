[+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/HibernateOptimisticLockingFailureException.java, + * Copyright 2002-2013 the original author or authors., +import org.hibernate.OptimisticLockException;, + * Converts Hibernate's StaleObjectStateException, StaleStateException, + * and OptimisticLockException., +	public HibernateOptimisticLockingFailureException(OptimisticLockException ex) {, +		super(ex.getMessage(), ex);, +	}, +, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/HibernateOptimisticLockingFailureException.java, + * Copyright 2002-2013 the original author or authors., +import org.hibernate.OptimisticLockException;, + * Converts Hibernate's StaleObjectStateException, StaleStateException, + * and OptimisticLockException., +	public HibernateOptimisticLockingFailureException(OptimisticLockException ex) {, +		super(ex.getMessage(), ex);, +	}, +, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate3/SessionFactoryUtils.java, +import org.hibernate.OptimisticLockException;, +import org.hibernate.PessimisticLockException;, +import org.hibernate.QueryTimeoutException;, +import org.springframework.dao.PessimisticLockingFailureException;, + * <p>Requires Hibernate 3.6 or later, as of Spring 4.0., + *, +		if (ex instanceof QueryTimeoutException) {, +			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex;, +			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "; SQL [" + jdbcEx.getSQL() + "]", ex);, +		}, +		if (ex instanceof PessimisticLockException) {, +			PessimisticLockException jdbcEx = (PessimisticLockException) ex;, +			return new PessimisticLockingFailureException(ex.getMessage() + "; SQL [" + jdbcEx.getSQL() + "]", ex);, +		}, +		if (ex instanceof OptimisticLockException) {, +			return new HibernateOptimisticLockingFailureException((OptimisticLockException) ex);, +		}]