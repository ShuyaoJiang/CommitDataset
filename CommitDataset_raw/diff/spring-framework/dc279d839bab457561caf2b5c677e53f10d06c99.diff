[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java, +	static final boolean jackson2Present =, +			ClassUtils.isPresent("com.fasterxml.jackson.databind.ObjectMapper",, +					WebFluxConfigurationSupport.class.getClassLoader()) &&, +					ClassUtils.isPresent("com.fasterxml.jackson.core.JsonGenerator",, +							WebFluxConfigurationSupport.class.getClassLoader());, +, +, +		if (jackson2Present) {, +			this.messageCodecsConfigurer = ServerCodecConfigurer.create();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java, +	static final boolean jackson2Present =, +			ClassUtils.isPresent("com.fasterxml.jackson.databind.ObjectMapper",, +					WebFluxConfigurationSupport.class.getClassLoader()) &&, +					ClassUtils.isPresent("com.fasterxml.jackson.core.JsonGenerator",, +							WebFluxConfigurationSupport.class.getClassLoader());, +, +, +		if (jackson2Present) {, +			this.messageCodecsConfigurer = ServerCodecConfigurer.create();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultExchangeStrategiesBuilder.java, +import java.util.function.Consumer;, +	private final ClientCodecConfigurer codecConfigurer = ClientCodecConfigurer.create();, +	public DefaultExchangeStrategiesBuilder() {, +		this.codecConfigurer.registerDefaults(false);, +	}, +		this.codecConfigurer.registerDefaults(true);, +	public ExchangeStrategies.Builder defaultCodecs(, +			Consumer<ClientCodecConfigurer.ClientDefaultCodecsConfigurer> consumer) {, +		Assert.notNull(consumer, "'consumer' must not be null");, +		consumer.accept(this.codecConfigurer.defaultCodecs());, +	public ExchangeStrategies.Builder customCodecs(, +			Consumer<ClientCodecConfigurer.CustomCodecsConfigurer> consumer) {, +		Assert.notNull(consumer, "'consumer' must not be null");, +		consumer.accept(this.codecConfigurer.customCodecs());, +		return new DefaultExchangeStrategies(this.codecConfigurer.getReaders(),, +				this.codecConfigurer.getWriters());, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java, +	static final boolean jackson2Present =, +			ClassUtils.isPresent("com.fasterxml.jackson.databind.ObjectMapper",, +					WebFluxConfigurationSupport.class.getClassLoader()) &&, +					ClassUtils.isPresent("com.fasterxml.jackson.core.JsonGenerator",, +							WebFluxConfigurationSupport.class.getClassLoader());, +, +, +		if (jackson2Present) {, +			this.messageCodecsConfigurer = ServerCodecConfigurer.create();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultExchangeStrategiesBuilder.java, +import java.util.function.Consumer;, +	private final ClientCodecConfigurer codecConfigurer = ClientCodecConfigurer.create();, +	public DefaultExchangeStrategiesBuilder() {, +		this.codecConfigurer.registerDefaults(false);, +	}, +		this.codecConfigurer.registerDefaults(true);, +	public ExchangeStrategies.Builder defaultCodecs(, +			Consumer<ClientCodecConfigurer.ClientDefaultCodecsConfigurer> consumer) {, +		Assert.notNull(consumer, "'consumer' must not be null");, +		consumer.accept(this.codecConfigurer.defaultCodecs());, +	public ExchangeStrategies.Builder customCodecs(, +			Consumer<ClientCodecConfigurer.CustomCodecsConfigurer> consumer) {, +		Assert.notNull(consumer, "'consumer' must not be null");, +		consumer.accept(this.codecConfigurer.customCodecs());, +		return new DefaultExchangeStrategies(this.codecConfigurer.getReaders(),, +				this.codecConfigurer.getWriters());, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ExchangeStrategies.java, +import java.util.function.Consumer;, +import org.springframework.http.codec.ClientCodecConfigurer;, +		 * Customize the list of default client-side HTTP message readers and writers., +		 * @param consumer the consumer to customize the default codecs, +		 * @see #customCodecs(Consumer), +		Builder defaultCodecs(Consumer<ClientCodecConfigurer.ClientDefaultCodecsConfigurer> consumer);, +		 * Customize the list of custom client-side HTTP message readers and writers., +		 * @param consumer the consumer to customize the custom codecs, +		 * @see #defaultCodecs(Consumer), +		Builder customCodecs(Consumer<ClientCodecConfigurer.CustomCodecsConfigurer> consumer);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java, +	static final boolean jackson2Present =, +			ClassUtils.isPresent("com.fasterxml.jackson.databind.ObjectMapper",, +					WebFluxConfigurationSupport.class.getClassLoader()) &&, +					ClassUtils.isPresent("com.fasterxml.jackson.core.JsonGenerator",, +							WebFluxConfigurationSupport.class.getClassLoader());, +, +, +		if (jackson2Present) {, +			this.messageCodecsConfigurer = ServerCodecConfigurer.create();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultExchangeStrategiesBuilder.java, +import java.util.function.Consumer;, +	private final ClientCodecConfigurer codecConfigurer = ClientCodecConfigurer.create();, +	public DefaultExchangeStrategiesBuilder() {, +		this.codecConfigurer.registerDefaults(false);, +	}, +		this.codecConfigurer.registerDefaults(true);, +	public ExchangeStrategies.Builder defaultCodecs(, +			Consumer<ClientCodecConfigurer.ClientDefaultCodecsConfigurer> consumer) {, +		Assert.notNull(consumer, "'consumer' must not be null");, +		consumer.accept(this.codecConfigurer.defaultCodecs());, +	public ExchangeStrategies.Builder customCodecs(, +			Consumer<ClientCodecConfigurer.CustomCodecsConfigurer> consumer) {, +		Assert.notNull(consumer, "'consumer' must not be null");, +		consumer.accept(this.codecConfigurer.customCodecs());]