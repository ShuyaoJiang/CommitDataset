[+++ b/spring-jms/src/main/java/org/springframework/jms/support/converter/MappingJackson2MessageConverter.java, +import com.fasterxml.jackson.databind.DeserializationFeature;, +import com.fasterxml.jackson.databind.MapperFeature;, + * <p>It customizes Jackson's default properties with the following ones:, + * <ul>, + * <li>{@link MapperFeature#DEFAULT_VIEW_INCLUSION} is disabled</li>, + * <li>{@link DeserializationFeature#FAIL_ON_UNKNOWN_PROPERTIES} is disabled</li>, + * </ul>, + *, +	private ObjectMapper objectMapper;, +	public MappingJackson2MessageConverter() {, +		this.objectMapper = new ObjectMapper();, +		this.objectMapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false);, +		this.objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);, +	}, +, +++ b/spring-jms/src/main/java/org/springframework/jms/support/converter/MappingJackson2MessageConverter.java, +import com.fasterxml.jackson.databind.DeserializationFeature;, +import com.fasterxml.jackson.databind.MapperFeature;, + * <p>It customizes Jackson's default properties with the following ones:, + * <ul>, + * <li>{@link MapperFeature#DEFAULT_VIEW_INCLUSION} is disabled</li>, + * <li>{@link DeserializationFeature#FAIL_ON_UNKNOWN_PROPERTIES} is disabled</li>, + * </ul>, + *, +	private ObjectMapper objectMapper;, +	public MappingJackson2MessageConverter() {, +		this.objectMapper = new ObjectMapper();, +		this.objectMapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false);, +		this.objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);, +	}, +, +++ b/spring-jms/src/test/java/org/springframework/jms/support/converter/MappingJackson2MessageConverterTests.java, +	public void fromTextMessage() throws Exception {, +		TextMessage textMessageMock = mock(TextMessage.class);, +		MyBean unmarshalled = new MyBean("bar");, +, +		String text = "{\"foo\":\"bar\"}";, +		given(textMessageMock.getStringProperty("__typeid__")).willReturn(MyBean.class.getName());, +		given(textMessageMock.getText()).willReturn(text);, +, +		MyBean result = (MyBean)converter.fromMessage(textMessageMock);, +		assertEquals("Invalid result", result, unmarshalled);, +	}, +, +	@Test, +	public void fromTextMessageWithUnknownProperty() throws Exception {, +		TextMessage textMessageMock = mock(TextMessage.class);, +		MyBean unmarshalled = new MyBean("bar");, +, +		String text = "{\"foo\":\"bar\", \"unknownProperty\":\"value\"}";, +		given(textMessageMock.getStringProperty("__typeid__")).willReturn(MyBean.class.getName());, +		given(textMessageMock.getText()).willReturn(text);, +, +		MyBean result = (MyBean)converter.fromMessage(textMessageMock);, +		assertEquals("Invalid result", result, unmarshalled);, +	}, +, +	@Test, +	public static class MyBean {, +, +		public MyBean() {, +		}, +, +		public MyBean(String foo) {, +			this.foo = foo;, +		}, +, +		private String foo;, +, +		public String getFoo() {, +			return foo;, +		}, +, +		public void setFoo(String foo) {, +			this.foo = foo;, +		}, +, +		@Override, +		public boolean equals(Object o) {, +			if (this == o) {, +				return true;, +			}, +			if (o == null || getClass() != o.getClass()) {, +				return false;, +			}, +, +			MyBean bean = (MyBean) o;, +, +			if (foo != null ? !foo.equals(bean.foo) : bean.foo != null) {, +				return false;, +			}, +, +			return true;, +		}, +, +		@Override, +		public int hashCode() {, +			return foo != null ? foo.hashCode() : 0;, +		}]