[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/InterceptorsBeanDefinitionParser.java, +		List<Element> interceptors = DomUtils.getChildElementsByTagName(element, new String[] { "bean", "ref", "interceptor" });, +			, +			Object interceptorBean;, +				Element beanElem = DomUtils.getChildElementsByTagName(interceptor, new String[] { "bean", "ref"}).get(0);, +				interceptorBean = parserContext.getDelegate().parsePropertySubElement(beanElem, null);, +			}, +			else {, +				interceptorBean = parserContext.getDelegate().parsePropertySubElement(interceptor, null);, +			mappedInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(1, interceptorBean);, +, +			String beanName = parserContext.getReaderContext().registerWithGeneratedName(mappedInterceptorDef);, +			parserContext.registerComponent(new BeanComponentDefinition(mappedInterceptorDef, beanName));, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/InterceptorsBeanDefinitionParser.java, +		List<Element> interceptors = DomUtils.getChildElementsByTagName(element, new String[] { "bean", "ref", "interceptor" });, +			, +			Object interceptorBean;, +				Element beanElem = DomUtils.getChildElementsByTagName(interceptor, new String[] { "bean", "ref"}).get(0);, +				interceptorBean = parserContext.getDelegate().parsePropertySubElement(beanElem, null);, +			}, +			else {, +				interceptorBean = parserContext.getDelegate().parsePropertySubElement(interceptor, null);, +			mappedInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(1, interceptorBean);, +, +			String beanName = parserContext.getReaderContext().registerWithGeneratedName(mappedInterceptorDef);, +			parserContext.registerComponent(new BeanComponentDefinition(mappedInterceptorDef, beanName));, +++ b/org.springframework.web.servlet/src/main/resources/org/springframework/web/servlet/config/spring-mvc-3.1.xsd, +				<xsd:choice>, +							<xsd:documentation><![CDATA[, +	Registers an interceptor that intercepts every request regardless of its URI path.., +					<xsd:element ref="beans:ref">, +						<xsd:annotation>, +							<xsd:documentation><![CDATA[, +	Registers an interceptor that intercepts every request regardless of its URI path.., +								]]></xsd:documentation>, +						</xsd:annotation>, +					</xsd:element>, +				</xsd:choice>, +							<xsd:choice>, +								<xsd:element ref="beans:ref">, +									<xsd:annotation>, +										<xsd:documentation><![CDATA[, +		A reference to an interceptor bean., +										]]></xsd:documentation>, +									</xsd:annotation>, +								</xsd:element>, +							</xsd:choice>, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/InterceptorsBeanDefinitionParser.java, +		List<Element> interceptors = DomUtils.getChildElementsByTagName(element, new String[] { "bean", "ref", "interceptor" });, +			, +			Object interceptorBean;, +				Element beanElem = DomUtils.getChildElementsByTagName(interceptor, new String[] { "bean", "ref"}).get(0);, +				interceptorBean = parserContext.getDelegate().parsePropertySubElement(beanElem, null);, +			}, +			else {, +				interceptorBean = parserContext.getDelegate().parsePropertySubElement(interceptor, null);, +			mappedInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(1, interceptorBean);, +, +			String beanName = parserContext.getReaderContext().registerWithGeneratedName(mappedInterceptorDef);, +			parserContext.registerComponent(new BeanComponentDefinition(mappedInterceptorDef, beanName));, +++ b/org.springframework.web.servlet/src/main/resources/org/springframework/web/servlet/config/spring-mvc-3.1.xsd, +				<xsd:choice>, +							<xsd:documentation><![CDATA[, +	Registers an interceptor that intercepts every request regardless of its URI path.., +					<xsd:element ref="beans:ref">, +						<xsd:annotation>, +							<xsd:documentation><![CDATA[, +	Registers an interceptor that intercepts every request regardless of its URI path.., +								]]></xsd:documentation>, +						</xsd:annotation>, +					</xsd:element>, +				</xsd:choice>, +							<xsd:choice>, +								<xsd:element ref="beans:ref">, +									<xsd:annotation>, +										<xsd:documentation><![CDATA[, +		A reference to an interceptor bean., +										]]></xsd:documentation>, +									</xsd:annotation>, +								</xsd:element>, +							</xsd:choice>, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java, +		loadBeanDefinitions("mvc-config-interceptors.xml", 16);, +		assertEquals(4, chain.getInterceptors().length);, +		assertTrue(chain.getInterceptors()[2] instanceof WebRequestHandlerInterceptorAdapter);, +		assertTrue(chain.getInterceptors()[3] instanceof ThemeChangeInterceptor);, +		assertEquals(5, chain.getInterceptors().length);, +		assertTrue(chain.getInterceptors()[4] instanceof WebRequestHandlerInterceptorAdapter);, +		assertEquals(5, chain.getInterceptors().length);, +		assertTrue(chain.getInterceptors()[4] instanceof WebRequestHandlerInterceptorAdapter);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/InterceptorsBeanDefinitionParser.java, +		List<Element> interceptors = DomUtils.getChildElementsByTagName(element, new String[] { "bean", "ref", "interceptor" });, +			, +			Object interceptorBean;, +				Element beanElem = DomUtils.getChildElementsByTagName(interceptor, new String[] { "bean", "ref"}).get(0);, +				interceptorBean = parserContext.getDelegate().parsePropertySubElement(beanElem, null);, +			}, +			else {, +				interceptorBean = parserContext.getDelegate().parsePropertySubElement(interceptor, null);, +			mappedInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(1, interceptorBean);]