[+++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpRequest.java, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +import org.springframework.util.CollectionUtils;, +import org.springframework.util.StringUtils;, +	private static final Pattern QUERY_PATTERN = Pattern.compile("([^&=]+)(=?)([^&]+)?");, +, +, +	private MultiValueMap<String, String> queryParams;, +, +	public MultiValueMap<String, String> getQueryParams() {, +		if (this.queryParams == null) {, +			this.queryParams = CollectionUtils.unmodifiableMultiValueMap(initQueryParams());, +		}, +		return this.queryParams;, +	}, +, +	protected MultiValueMap<String, String> initQueryParams() {, +		MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();, +		String query = getURI().getRawQuery();, +		if (query != null) {, +			Matcher matcher = QUERY_PATTERN.matcher(query);, +			while (matcher.find()) {, +				String name = matcher.group(1);, +				String eq = matcher.group(2);, +				String value = matcher.group(3);, +				value = (value != null ? value : (StringUtils.hasLength(eq) ? "" : null));, +				queryParams.add(name, value);, +			}, +		}, +		return queryParams;, +	}, +, +	@Override, +			this.cookies = new LinkedMultiValueMap<>();, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpRequest.java, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +import org.springframework.util.CollectionUtils;, +import org.springframework.util.StringUtils;, +	private static final Pattern QUERY_PATTERN = Pattern.compile("([^&=]+)(=?)([^&]+)?");, +, +, +	private MultiValueMap<String, String> queryParams;, +, +	public MultiValueMap<String, String> getQueryParams() {, +		if (this.queryParams == null) {, +			this.queryParams = CollectionUtils.unmodifiableMultiValueMap(initQueryParams());, +		}, +		return this.queryParams;, +	}, +, +	protected MultiValueMap<String, String> initQueryParams() {, +		MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();, +		String query = getURI().getRawQuery();, +		if (query != null) {, +			Matcher matcher = QUERY_PATTERN.matcher(query);, +			while (matcher.find()) {, +				String name = matcher.group(1);, +				String eq = matcher.group(2);, +				String value = matcher.group(3);, +				value = (value != null ? value : (StringUtils.hasLength(eq) ? "" : null));, +				queryParams.add(name, value);, +			}, +		}, +		return queryParams;, +	}, +, +	@Override, +			this.cookies = new LinkedMultiValueMap<>();, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServerHttpRequest.java, +	 * Return a read-only map with parsed and decoded query parameter values., +	 */, +	MultiValueMap<String, String> getQueryParams();, +, +	/**, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpRequest.java, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +import org.springframework.util.CollectionUtils;, +import org.springframework.util.StringUtils;, +	private static final Pattern QUERY_PATTERN = Pattern.compile("([^&=]+)(=?)([^&]+)?");, +, +, +	private MultiValueMap<String, String> queryParams;, +, +	public MultiValueMap<String, String> getQueryParams() {, +		if (this.queryParams == null) {, +			this.queryParams = CollectionUtils.unmodifiableMultiValueMap(initQueryParams());, +		}, +		return this.queryParams;, +	}, +, +	protected MultiValueMap<String, String> initQueryParams() {, +		MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();, +		String query = getURI().getRawQuery();, +		if (query != null) {, +			Matcher matcher = QUERY_PATTERN.matcher(query);, +			while (matcher.find()) {, +				String name = matcher.group(1);]