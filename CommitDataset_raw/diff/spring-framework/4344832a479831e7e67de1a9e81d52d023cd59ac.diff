[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.beans.TypeConverter;, +import org.springframework.core.MethodParameter;, +	 * Determine whether the provided bean definition is an autowire candidate., +	 * @see Qualifier, +		if (descriptor == null) {, +		boolean match = checkQualifiers(bdHolder, descriptor.getAnnotations());, +		if (match && descriptor.getMethodParameter() != null) {, +			match = checkQualifiers(bdHolder, descriptor.getMethodParameter().getAnnotations());, +		}, +		return match;, +	}, +, +	/**, +	 * Match the given qualifier annotations against the candidate bean definition., +	 */, +	protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch) {, +		if (ObjectUtils.isEmpty(annotationsToSearch)) {, +			return true;, +		}, +		for (Annotation annotation : annotationsToSearch) {, +				if (!checkQualifier(bdHolder, annotation, typeConverter)) {, +					return false;, +				}, +			}, +		}, +		return true;, +	}, +, +	/**, +	 * Checks whether the given annotation type is a recognized qualifier type., +	 */, +	protected boolean isQualifier(Class<? extends Annotation> annotationType) {, +		for (Class<? extends Annotation> qualifierType : this.qualifierTypes) {, +			if (annotationType.equals(qualifierType) || annotationType.isAnnotationPresent(qualifierType)) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +	/**, +	 * Match the given qualifier annotation against the candidate bean definition., +	 */, +	protected boolean checkQualifier(, +			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) {, +, +		Class<? extends Annotation> type = annotation.annotationType();, +		AbstractBeanDefinition bd = (AbstractBeanDefinition) bdHolder.getBeanDefinition();, +, +	/**, +	 * Determine whether the given dependency carries a value annotation., +	 * @see Value, +	 */, +	public Object getSuggestedValue(DependencyDescriptor descriptor) {, +		Object value = findValue(descriptor.getAnnotations());, +		if (value == null) {, +			MethodParameter methodParam = descriptor.getMethodParameter();, +			if (methodParam != null) {, +				value = findValue(methodParam.getAnnotations());, +			}, +		}, +		return value;, +	}, +, +	 * Determine a suggested value from any of the given candidate annotations., +	protected Object findValue(Annotation[] annotationsToSearch) {, +		for (Annotation annotation : annotationsToSearch) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.beans.TypeConverter;, +import org.springframework.core.MethodParameter;, +	 * Determine whether the provided bean definition is an autowire candidate., +	 * @see Qualifier, +		if (descriptor == null) {, +		boolean match = checkQualifiers(bdHolder, descriptor.getAnnotations());, +		if (match && descriptor.getMethodParameter() != null) {, +			match = checkQualifiers(bdHolder, descriptor.getMethodParameter().getAnnotations());, +		}, +		return match;, +	}, +, +	/**, +	 * Match the given qualifier annotations against the candidate bean definition., +	 */, +	protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch) {, +		if (ObjectUtils.isEmpty(annotationsToSearch)) {, +			return true;, +		}, +		for (Annotation annotation : annotationsToSearch) {, +				if (!checkQualifier(bdHolder, annotation, typeConverter)) {, +					return false;, +				}, +			}, +		}, +		return true;, +	}, +, +	/**]