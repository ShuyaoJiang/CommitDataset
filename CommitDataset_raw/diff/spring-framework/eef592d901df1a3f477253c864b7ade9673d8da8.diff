[+++ b/spring-test/src/main/java/org/springframework/mock/web/server/MockServerWebExchange.java, + * Copyright 2002-2018 the original author or authors., +import reactor.core.publisher.Mono;, +, +import org.springframework.lang.Nullable;, +import org.springframework.web.server.WebSession;, +import org.springframework.web.server.session.WebSessionManager;, + * Extension of {@link DefaultServerWebExchange} for use in tests, along with, +	private MockServerWebExchange(MockServerHttpRequest request, WebSessionManager sessionManager) {, +		super(request, new MockServerHttpResponse(), sessionManager,, +	 * Create a {@link MockServerWebExchange} from the given mock request., +		return builder(request).build();, +	 * Variant of {@link #from(MockServerHttpRequest)} with a mock request builder., +	 * @param requestBuilder the builder for the mock request., +		return builder(requestBuilder).build();, +	}, +, +	/**, +	 * Create a {@link Builder} starting with the given mock request., +	 * @param request the request to use., +	 * @return the exchange builder, +	 * @since 5.1, +	 */, +	public static MockServerWebExchange.Builder builder(MockServerHttpRequest request) {, +		return new MockServerWebExchange.Builder(request);, +	}, +, +	/**, +	 * Variant of {@link #builder(MockServerHttpRequest)} with a mock request builder., +	 * @param requestBuilder the builder for the mock request., +	 * @return the exchange builder, +	 * @since 5.1, +	 */, +	public static MockServerWebExchange.Builder builder(MockServerHttpRequest.BaseBuilder<?> requestBuilder) {, +		return new MockServerWebExchange.Builder(requestBuilder.build());, +	}, +, +, +	/**, +	 * Builder for a {@link MockServerWebExchange}., +	 * @since 5.1, +	 */, +	public static class Builder {, +, +		private final MockServerHttpRequest request;, +, +		@Nullable, +		private WebSessionManager sessionManager;, +, +, +		public Builder(MockServerHttpRequest request) {, +			this.request = request;, +		}, +, +, +		/**, +		 * Set the session to use for the exchange., +		 * <p>This is mutually exclusive with {@link #sessionManager(WebSessionManager)}., +		 * @param session the session to use, +		 */, +		public Builder session(WebSession session) {, +			this.sessionManager = exchange -> Mono.just(session);, +			return this;, +		}, +, +		/**, +		 * Provide a {@code WebSessionManager} instance to use with the exchange., +		 * <p>This is mutually exclusive with {@link #session(WebSession)}., +		 * @param sessionManager the session manager to use, +		 */, +		public Builder sessionManager(WebSessionManager sessionManager) {, +			this.sessionManager = sessionManager;, +			return this;, +		}, +, +		/**, +		 * Build the {@code MockServerWebExchange} instance., +		 */, +		public MockServerWebExchange build() {, +			return new MockServerWebExchange(this.request,, +					this.sessionManager != null ? this.sessionManager : new DefaultWebSessionManager());, +		}, +++ b/spring-test/src/main/java/org/springframework/mock/web/server/MockServerWebExchange.java, + * Copyright 2002-2018 the original author or authors., +import reactor.core.publisher.Mono;, +, +import org.springframework.lang.Nullable;, +import org.springframework.web.server.WebSession;, +import org.springframework.web.server.session.WebSessionManager;, + * Extension of {@link DefaultServerWebExchange} for use in tests, along with, +	private MockServerWebExchange(MockServerHttpRequest request, WebSessionManager sessionManager) {, +		super(request, new MockServerHttpResponse(), sessionManager,, +	 * Create a {@link MockServerWebExchange} from the given mock request., +		return builder(request).build();, +	 * Variant of {@link #from(MockServerHttpRequest)} with a mock request builder., +	 * @param requestBuilder the builder for the mock request., +		return builder(requestBuilder).build();, +	}, +, +	/**]