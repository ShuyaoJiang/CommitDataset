[+++ b/org.springframework.integration-tests/src/test/java/org/springframework/orm/hibernate3/HibernateSessionFactoryConfigurationTests.java, +import static org.hamcrest.Matchers.startsWith;, +import static org.junit.Assert.assertTrue;, +import org.springframework.beans.factory.DisposableBean;, +	@Test, +	public void builtSessionFactoryIsDisposableBeanProxy() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(AnnotationSessionFactoryConfig.class);, +		SessionFactory sessionFactory = ctx.getBean(SessionFactory.class);, +		assertThat(sessionFactory, instanceOf(DisposableBean.class));, +		assertThat(sessionFactory.toString(), startsWith("DisposableBean proxy for SessionFactory"));, +		ctx.close();, +		assertTrue("SessionFactory was not closed as expected", sessionFactory.isClosed());, +	}, +, +++ b/org.springframework.integration-tests/src/test/java/org/springframework/orm/hibernate3/HibernateSessionFactoryConfigurationTests.java, +import static org.hamcrest.Matchers.startsWith;, +import static org.junit.Assert.assertTrue;, +import org.springframework.beans.factory.DisposableBean;, +	@Test, +	public void builtSessionFactoryIsDisposableBeanProxy() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(AnnotationSessionFactoryConfig.class);, +		SessionFactory sessionFactory = ctx.getBean(SessionFactory.class);, +		assertThat(sessionFactory, instanceOf(DisposableBean.class));, +		assertThat(sessionFactory.toString(), startsWith("DisposableBean proxy for SessionFactory"));, +		ctx.close();, +		assertTrue("SessionFactory was not closed as expected", sessionFactory.isClosed());, +	}, +, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate3/LocalSessionFactoryBean.java, +, +	@Override, +	public SessionFactory wrapSessionFactoryIfNecessary(SessionFactory rawSf) {, +		return delegate.wrapSessionFactoryIfNecessary(rawSf);, +	}, +, +++ b/org.springframework.integration-tests/src/test/java/org/springframework/orm/hibernate3/HibernateSessionFactoryConfigurationTests.java, +import static org.hamcrest.Matchers.startsWith;, +import static org.junit.Assert.assertTrue;, +import org.springframework.beans.factory.DisposableBean;, +	@Test, +	public void builtSessionFactoryIsDisposableBeanProxy() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(AnnotationSessionFactoryConfig.class);, +		SessionFactory sessionFactory = ctx.getBean(SessionFactory.class);, +		assertThat(sessionFactory, instanceOf(DisposableBean.class));, +		assertThat(sessionFactory.toString(), startsWith("DisposableBean proxy for SessionFactory"));, +		ctx.close();, +		assertTrue("SessionFactory was not closed as expected", sessionFactory.isClosed());, +	}, +, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate3/LocalSessionFactoryBean.java, +, +	@Override, +	public SessionFactory wrapSessionFactoryIfNecessary(SessionFactory rawSf) {, +		return delegate.wrapSessionFactoryIfNecessary(rawSf);, +	}, +, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate3/SessionFactoryBeanDelegate.java, +		SessionFactoryBuilderSupport.closeHibernateSessionFactory(this.builder, this.sessionFactory);, +	public SessionFactory wrapSessionFactoryIfNecessary(SessionFactory rawSf) {, +		return rawSf;, +	}, +, +, +++ b/org.springframework.integration-tests/src/test/java/org/springframework/orm/hibernate3/HibernateSessionFactoryConfigurationTests.java, +import static org.hamcrest.Matchers.startsWith;, +import static org.junit.Assert.assertTrue;, +import org.springframework.beans.factory.DisposableBean;, +	@Test, +	public void builtSessionFactoryIsDisposableBeanProxy() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(AnnotationSessionFactoryConfig.class);, +		SessionFactory sessionFactory = ctx.getBean(SessionFactory.class);, +		assertThat(sessionFactory, instanceOf(DisposableBean.class));, +		assertThat(sessionFactory.toString(), startsWith("DisposableBean proxy for SessionFactory"));, +		ctx.close();, +		assertTrue("SessionFactory was not closed as expected", sessionFactory.isClosed());, +	}, +, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate3/LocalSessionFactoryBean.java, +, +	@Override, +	public SessionFactory wrapSessionFactoryIfNecessary(SessionFactory rawSf) {, +		return delegate.wrapSessionFactoryIfNecessary(rawSf);, +	}, +, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate3/SessionFactoryBeanDelegate.java, +		SessionFactoryBuilderSupport.closeHibernateSessionFactory(this.builder, this.sessionFactory);, +	public SessionFactory wrapSessionFactoryIfNecessary(SessionFactory rawSf) {, +		return rawSf;, +	}, +, +, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate3/SessionFactoryBeanOperations.java, +	/**, +	 * Override the default {@link DisposableBean} proxying behavior in, +	 * {@link SessionFactoryBuilderSupport#wrapSessionFactoryIfNecessary(SessionFactory)}, +	 * and return the raw {@code SessionFactory} instance, as {@link SessionFactory#close()}, +	 * will be called during this FactoryBean's normal {@linkplain #destroy() destruction lifecycle}., +	 */, +	SessionFactory wrapSessionFactoryIfNecessary(SessionFactory rawSf);, +]