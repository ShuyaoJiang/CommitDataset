[+++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscovererTests.java, + * Copyright 2002-2017 the original author or authors., + * <p>See also {@link TigerAspectJAdviceParameterNameDiscovererTests} for tests relating to annotations., +		assertException(getMethod("twoJoinPoints"), "foo()", IllegalStateException.class,, +				"Failed to bind all argument names: 1 argument(s) could not be bound");, +		for (Method candidate : candidates) {, +			if (candidate.getName().equals(name)) {, +				return candidate;, +	protected void assertParameterNames(Method method, String pointcut, String[] parameterNames) {, +		assertParameterNames(method, pointcut, null, null, parameterNames);, +	protected void assertParameterNames(Method method, String pointcut, String returning, String throwing,, +			String[] parameterNames) {, +, +				method.getParameterCount(), parameterNames.length);, +		String[] discoveredNames = discoverer.getParameterNames(method);, +	protected void assertException(Method method, String pointcut, Class<?> exceptionType, String message) {, +		assertException(method, pointcut, null, null, exceptionType, message);, +	protected void assertException(Method method, String pointcut, String returning, String throwing,, +			Class<?> exceptionType, String message) {, +, +			discoverer.getParameterNames(method);, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscovererTests.java, + * Copyright 2002-2017 the original author or authors., + * <p>See also {@link TigerAspectJAdviceParameterNameDiscovererTests} for tests relating to annotations., +		assertException(getMethod("twoJoinPoints"), "foo()", IllegalStateException.class,, +				"Failed to bind all argument names: 1 argument(s) could not be bound");, +		for (Method candidate : candidates) {, +			if (candidate.getName().equals(name)) {, +				return candidate;, +	protected void assertParameterNames(Method method, String pointcut, String[] parameterNames) {, +		assertParameterNames(method, pointcut, null, null, parameterNames);, +	protected void assertParameterNames(Method method, String pointcut, String returning, String throwing,, +			String[] parameterNames) {, +, +				method.getParameterCount(), parameterNames.length);, +		String[] discoveredNames = discoverer.getParameterNames(method);, +	protected void assertException(Method method, String pointcut, Class<?> exceptionType, String message) {, +		assertException(method, pointcut, null, null, exceptionType, message);, +	protected void assertException(Method method, String pointcut, String returning, String throwing,, +			Class<?> exceptionType, String message) {, +, +			discoverer.getParameterNames(method);, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/TigerAspectJAdviceParameterNameDiscovererTests.java, + * Copyright 2002-2017 the original author or authors., +public class TigerAspectJAdviceParameterNameDiscovererTests extends AspectJAdviceParameterNameDiscovererTests {, +		assertParameterNames(getMethod("annotationMedley"),"@annotation(a) && args(count) && this(foo)",, +				null, "ex", new String[] {"ex", "foo", "count", "a"});, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscovererTests.java, + * Copyright 2002-2017 the original author or authors., + * <p>See also {@link TigerAspectJAdviceParameterNameDiscovererTests} for tests relating to annotations., +		assertException(getMethod("twoJoinPoints"), "foo()", IllegalStateException.class,, +				"Failed to bind all argument names: 1 argument(s) could not be bound");, +		for (Method candidate : candidates) {, +			if (candidate.getName().equals(name)) {, +				return candidate;, +	protected void assertParameterNames(Method method, String pointcut, String[] parameterNames) {, +		assertParameterNames(method, pointcut, null, null, parameterNames);, +	protected void assertParameterNames(Method method, String pointcut, String returning, String throwing,, +			String[] parameterNames) {, +, +				method.getParameterCount(), parameterNames.length);, +		String[] discoveredNames = discoverer.getParameterNames(method);, +	protected void assertException(Method method, String pointcut, Class<?> exceptionType, String message) {, +		assertException(method, pointcut, null, null, exceptionType, message);, +	protected void assertException(Method method, String pointcut, String returning, String throwing,, +			Class<?> exceptionType, String message) {, +, +			discoverer.getParameterNames(method);, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/TigerAspectJAdviceParameterNameDiscovererTests.java, + * Copyright 2002-2017 the original author or authors., +public class TigerAspectJAdviceParameterNameDiscovererTests extends AspectJAdviceParameterNameDiscovererTests {, +		assertParameterNames(getMethod("annotationMedley"),"@annotation(a) && args(count) && this(foo)",, +				null, "ex", new String[] {"ex", "foo", "count", "a"});, +++ b/spring-web/src/main/java/org/springframework/http/converter/protobuf/ExtensionRegistryInitializer.java, + * Copyright 2002-2017 the original author or authors., + * <p>This interface provides a facility to populate the {@code ExtensionRegistry}., +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscovererTests.java, + * Copyright 2002-2017 the original author or authors., + * <p>See also {@link TigerAspectJAdviceParameterNameDiscovererTests} for tests relating to annotations., +		assertException(getMethod("twoJoinPoints"), "foo()", IllegalStateException.class,, +				"Failed to bind all argument names: 1 argument(s) could not be bound");, +		for (Method candidate : candidates) {, +			if (candidate.getName().equals(name)) {, +				return candidate;, +	protected void assertParameterNames(Method method, String pointcut, String[] parameterNames) {, +		assertParameterNames(method, pointcut, null, null, parameterNames);, +	protected void assertParameterNames(Method method, String pointcut, String returning, String throwing,, +			String[] parameterNames) {, +, +				method.getParameterCount(), parameterNames.length);, +		String[] discoveredNames = discoverer.getParameterNames(method);, +	protected void assertException(Method method, String pointcut, Class<?> exceptionType, String message) {, +		assertException(method, pointcut, null, null, exceptionType, message);, +	protected void assertException(Method method, String pointcut, String returning, String throwing,, +			Class<?> exceptionType, String message) {, +, +			discoverer.getParameterNames(method);, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/TigerAspectJAdviceParameterNameDiscovererTests.java, + * Copyright 2002-2017 the original author or authors., +public class TigerAspectJAdviceParameterNameDiscovererTests extends AspectJAdviceParameterNameDiscovererTests {]