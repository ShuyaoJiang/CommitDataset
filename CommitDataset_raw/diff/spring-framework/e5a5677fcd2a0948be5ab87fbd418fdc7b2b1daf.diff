[+++ /dev/null, +++ /dev/null, +++ b/src/docs/asciidoc/core.adoc, +include::core/core-appendix.adoc[leveloffset=+1], +++ /dev/null, +++ b/src/docs/asciidoc/core.adoc, +include::core/core-appendix.adoc[leveloffset=+1], +++ b/src/docs/asciidoc/core/core-aop.adoc, +This assumes that you are using schema support as described in, +<<core.adoc#xsd-schemas, XML Schema-based configuration>>. See, +<<core.adoc#xsd-schemas-aop, the AOP schema>> for how to import the tags in the `aop`, +namespace., +`spring-aop` schema as described in <<core.adoc#xsd-schemas,, +See <<core.adoc#xsd-schemas-aop, the AOP schema>>, +If you prefer XML based configuration, the Spring, +<<core.adoc#xsd-schemas-context, `context` namespace>>, +defines a convenient `context:spring-configured` element:, +++ /dev/null, +++ b/src/docs/asciidoc/core.adoc, +include::core/core-appendix.adoc[leveloffset=+1], +++ b/src/docs/asciidoc/core/core-aop.adoc, +This assumes that you are using schema support as described in, +<<core.adoc#xsd-schemas, XML Schema-based configuration>>. See, +<<core.adoc#xsd-schemas-aop, the AOP schema>> for how to import the tags in the `aop`, +namespace., +`spring-aop` schema as described in <<core.adoc#xsd-schemas,, +See <<core.adoc#xsd-schemas-aop, the AOP schema>>, +If you prefer XML based configuration, the Spring, +<<core.adoc#xsd-schemas-context, `context` namespace>>, +defines a convenient `context:spring-configured` element:, +++ b/src/docs/asciidoc/core/core-appendix.adoc, +:doc-root: https://docs.spring.io, +:api-spring-framework: {doc-root}/spring-framework/docs/{spring-version}/javadoc-api/org/springframework, +, += Appendix, +, +, +[[xsd-schemas]], +== XML Schemas, +, +This part of the appendix lists XML schemas related to the core container., +, +, +[[xsd-schemas-util]], +=== The util schema, +, +As the name implies, the `util` tags deal with common, __utility__ configuration, +issues, such as configuring collections, referencing constants, and suchlike., +To use the tags in the `util` schema, you need to have the following preamble at the top, +of your Spring XML configuration file; the text in the snippet below references the, +correct schema so that the tags in the `util` namespace are available to you., +, +[source,xml,indent=0], +[subs="verbatim,quotes"], +----, +	<?xml version="1.0" encoding="UTF-8"?>, +	<beans xmlns="http://www.springframework.org/schema/beans", +		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +		__xmlns:util="http://www.springframework.org/schema/util"__ xsi:schemaLocation=", +			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd, +			__http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"__> <!-- bean definitions here -->, +, +	</beans>, +----, +, +, +[[xsd-schemas-util-constant]], +==== <util:constant/>, +, +Before..., +, +[source,xml,indent=0], +[subs="verbatim,quotes"], +----, +	<bean id="..." class="...">, +		<property name="isolation">, +			<bean id="java.sql.Connection.TRANSACTION_SERIALIZABLE", +					class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />, +		</property>, +	</bean>, +----, +, +The above configuration uses a Spring `FactoryBean` implementation, the, +`FieldRetrievingFactoryBean`, to set the value of the `isolation` property on a bean, +to the value of the `java.sql.Connection.TRANSACTION_SERIALIZABLE` constant. This is, +all well and good, but it is a tad verbose and (unnecessarily) exposes Spring's internal, +plumbing to the end user., +, +The following XML Schema-based version is more concise and clearly expresses the, +developer's intent (__'inject this constant value'__), and it just reads better., +, +[source,xml,indent=0], +[subs="verbatim,quotes"], +----, +	<bean id="..." class="...">, +		<property name="isolation">, +			<util:constant static-field="java.sql.Connection.TRANSACTION_SERIALIZABLE"/>, +		</property>, +	</bean>, +----]