[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + * Copyright 2002-2018 the original author or authors., +					List<Constructor<?>> candidates = new ArrayList<>(rawCandidates.length);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + * Copyright 2002-2018 the original author or authors., +					List<Constructor<?>> candidates = new ArrayList<>(rawCandidates.length);, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.beans.factory.DisposableBean;, +	public void testExtendedResourceInjectionWithDestruction() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.registerResolvableDependency(BeanFactory.class, bf);, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(TypedExtendedResourceInjectionBean.class));, +		bf.registerBeanDefinition("testBean", new RootBeanDefinition(TestBean.class));, +		NestedTestBean ntb = new NestedTestBean();, +		bf.registerSingleton("nestedTestBean", ntb);, +, +		TestBean tb = bf.getBean("testBean", TestBean.class);, +		TypedExtendedResourceInjectionBean bean = (TypedExtendedResourceInjectionBean) bf.getBean("annotatedBean");, +		assertSame(tb, bean.getTestBean());, +		assertSame(tb, bean.getTestBean2());, +		assertSame(tb, bean.getTestBean3());, +		assertSame(tb, bean.getTestBean4());, +		assertSame(ntb, bean.getNestedTestBean());, +		assertSame(bf, bean.getBeanFactory());, +, +		assertArrayEquals(new String[] {"testBean", "nestedTestBean"}, bf.getDependenciesForBean("annotatedBean"));, +		bf.destroySingleton("testBean");, +		assertFalse(bf.containsSingleton("testBean"));, +		assertFalse(bf.containsSingleton("annotatedBean"));, +		assertTrue(bean.destroyed);, +		assertSame(0, bf.getDependenciesForBean("annotatedBean").length);, +	}, +, +	@Test, +	@Qualifier("testBean"), +	private void testBeanQualifierProvider() {}, +, +	public static class TypedExtendedResourceInjectionBean extends NonPublicResourceInjectionBean<NestedTestBean>, +			implements DisposableBean {, +, +		public boolean destroyed = false;, +, +		@Override, +		public void destroy() {, +			this.destroyed = true;, +		}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + * Copyright 2002-2018 the original author or authors., +					List<Constructor<?>> candidates = new ArrayList<>(rawCandidates.length);, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.beans.factory.DisposableBean;, +	public void testExtendedResourceInjectionWithDestruction() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.registerResolvableDependency(BeanFactory.class, bf);, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(TypedExtendedResourceInjectionBean.class));, +		bf.registerBeanDefinition("testBean", new RootBeanDefinition(TestBean.class));, +		NestedTestBean ntb = new NestedTestBean();, +		bf.registerSingleton("nestedTestBean", ntb);, +, +		TestBean tb = bf.getBean("testBean", TestBean.class);, +		TypedExtendedResourceInjectionBean bean = (TypedExtendedResourceInjectionBean) bf.getBean("annotatedBean");, +		assertSame(tb, bean.getTestBean());, +		assertSame(tb, bean.getTestBean2());, +		assertSame(tb, bean.getTestBean3());, +		assertSame(tb, bean.getTestBean4());, +		assertSame(ntb, bean.getNestedTestBean());, +		assertSame(bf, bean.getBeanFactory());, +, +		assertArrayEquals(new String[] {"testBean", "nestedTestBean"}, bf.getDependenciesForBean("annotatedBean"));, +		bf.destroySingleton("testBean");, +		assertFalse(bf.containsSingleton("testBean"));, +		assertFalse(bf.containsSingleton("annotatedBean"));, +		assertTrue(bean.destroyed);, +		assertSame(0, bf.getDependenciesForBean("annotatedBean").length);, +	}, +, +	@Test, +	@Qualifier("testBean"), +	private void testBeanQualifierProvider() {}, +, +	public static class TypedExtendedResourceInjectionBean extends NonPublicResourceInjectionBean<NestedTestBean>, +			implements DisposableBean {, +, +		public boolean destroyed = false;, +, +		@Override, +		public void destroy() {, +			this.destroyed = true;, +		}, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/xml/XmlBeanDefinitionReaderTests.java, + * Copyright 2002-2018 the original author or authors., +		Resource resource = new InputStreamResource(getClass().getResourceAsStream("test.xml"));]