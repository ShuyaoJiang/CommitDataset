[+++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/jta/WebLogicJtaTransactionManager.java, + * Copyright 2002-2009 the original author or authors., + * Special {@link JtaTransactionManager} variant for BEA WebLogic (8.1 and higher)., + * fetched directly from WebLogic's <code>TransactionHelper</code>. This can be, + * overridden by specifying "userTransaction"/"userTransactionName" and, + * "transactionManager"/"transactionManagerName", passing in existing handles, + * or specifying corresponding JNDI locations to look up., +		loadWebLogicTransactionHelper();, +			logger.debug("Retrieving JTA UserTransaction from WebLogic TransactionHelper");, +			Method getUserTransactionMethod = this.transactionHelper.getClass().getMethod("getUserTransaction");, +					"WebLogic's TransactionHelper.getUserTransaction() method failed", ex.getTargetException());, +					"Could not invoke WebLogic's TransactionHelper.getUserTransaction() method", ex);, +		loadWebLogicTransactionHelper();, +			logger.debug("Retrieving JTA TransactionManager from WebLogic TransactionHelper");, +			Method getTransactionManagerMethod = this.transactionHelper.getClass().getMethod("getTransactionManager");, +					"WebLogic's TransactionHelper.getTransactionManager() method failed", ex.getTargetException());, +					"Could not invoke WebLogic's TransactionHelper.getTransactionManager() method", ex);, +	private void loadWebLogicTransactionHelper() throws TransactionSystemException {, +		if (this.transactionHelper == null) {, +				Class transactionHelperClass = getClass().getClassLoader().loadClass(TRANSACTION_HELPER_CLASS_NAME);, +				Method getTransactionHelperMethod = transactionHelperClass.getMethod("getTransactionHelper");, +				logger.debug("WebLogic TransactionHelper found");, +			Class userTransactionClass = getClass().getClassLoader().loadClass(USER_TRANSACTION_CLASS_NAME);, +			this.weblogicUserTransactionAvailable = userTransactionClass.isInstance(getUserTransaction());, +				this.beginWithNameMethod = userTransactionClass.getMethod("begin", String.class);, +				this.beginWithNameAndTimeoutMethod = userTransactionClass.getMethod("begin", String.class, int.class);, +			// Obtain WebLogic ClientTransactionManager interface., +			Class transactionManagerClass =, +			logger.debug("WebLogic ClientTransactionManager found");, +			this.weblogicTransactionManagerAvailable = transactionManagerClass.isInstance(getTransactionManager());, +				this.forceResumeMethod = transactionManagerClass.getMethod("forceResume", Transaction.class);, +				this.setPropertyMethod = transactionClass.getMethod("setProperty", String.class, Serializable.class);]