[+++ b/org.springframework.beans/src/test/java/org/springframework/beans/BeanWrapperEnumTests.java, + * Copyright 2002-2012 the original author or authors., +import static org.junit.Assert.*;, +, +	@Test, +	public void testCustomEnumSetWithGetterSetterMismatch() {, +		GenericBean<?> gb = new GenericBean<Object>();, +		BeanWrapper bw = new BeanWrapperImpl(gb);, +		bw.setPropertyValue("customEnumSetMismatch", new String[] {"VALUE_1", "VALUE_2"});, +		assertEquals(2, gb.getCustomEnumSet().size());, +		assertTrue(gb.getCustomEnumSet().contains(CustomEnum.VALUE_1));, +		assertTrue(gb.getCustomEnumSet().contains(CustomEnum.VALUE_2));, +	}, +, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/BeanWrapperEnumTests.java, + * Copyright 2002-2012 the original author or authors., +import static org.junit.Assert.*;, +, +	@Test, +	public void testCustomEnumSetWithGetterSetterMismatch() {, +		GenericBean<?> gb = new GenericBean<Object>();, +		BeanWrapper bw = new BeanWrapperImpl(gb);, +		bw.setPropertyValue("customEnumSetMismatch", new String[] {"VALUE_1", "VALUE_2"});, +		assertEquals(2, gb.getCustomEnumSet().size());, +		assertTrue(gb.getCustomEnumSet().contains(CustomEnum.VALUE_1));, +		assertTrue(gb.getCustomEnumSet().contains(CustomEnum.VALUE_2));, +	}, +, +++ b/org.springframework.beans/src/test/java/test/beans/GenericBean.java, + * Copyright 2002-2012 the original author or authors., +import java.util.Iterator;, +	public Set<CustomEnum> getCustomEnumSetMismatch() {, +		return customEnumSet;, +	}, +, +	public void setCustomEnumSetMismatch(Set<String> customEnumSet) {, +		this.customEnumSet = new HashSet<CustomEnum>(customEnumSet.size());, +		for (Iterator<String> iterator = customEnumSet.iterator(); iterator.hasNext(); ) {, +			this.customEnumSet.add(CustomEnum.valueOf(iterator.next()));, +		}, +	}, +, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/BeanWrapperEnumTests.java, + * Copyright 2002-2012 the original author or authors., +import static org.junit.Assert.*;, +, +	@Test, +	public void testCustomEnumSetWithGetterSetterMismatch() {, +		GenericBean<?> gb = new GenericBean<Object>();, +		BeanWrapper bw = new BeanWrapperImpl(gb);, +		bw.setPropertyValue("customEnumSetMismatch", new String[] {"VALUE_1", "VALUE_2"});, +		assertEquals(2, gb.getCustomEnumSet().size());, +		assertTrue(gb.getCustomEnumSet().contains(CustomEnum.VALUE_1));, +		assertTrue(gb.getCustomEnumSet().contains(CustomEnum.VALUE_2));, +	}, +, +++ b/org.springframework.beans/src/test/java/test/beans/GenericBean.java, + * Copyright 2002-2012 the original author or authors., +import java.util.Iterator;, +	public Set<CustomEnum> getCustomEnumSetMismatch() {, +		return customEnumSet;, +	}, +, +	public void setCustomEnumSetMismatch(Set<String> customEnumSet) {, +		this.customEnumSet = new HashSet<CustomEnum>(customEnumSet.size());, +		for (Iterator<String> iterator = customEnumSet.iterator(); iterator.hasNext(); ) {, +			this.customEnumSet.add(CustomEnum.valueOf(iterator.next()));, +		}, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/Property.java, + * Copyright 2002-2012 the original author or authors., +, +		return (write != null ? write : read);]