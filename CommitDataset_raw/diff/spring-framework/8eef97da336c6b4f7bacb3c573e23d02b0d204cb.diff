[+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +		return formatHeaders(this.headers);, +	}, +, +	/**, +	 * Helps to format HTTP header values, as HTTP header values themselves can, +	 * contain comma-separated values, can become confusing with regular, +	 * {@link Map} formatting that also uses commas between entries., +	 * @param headers the headers to format, +	 * @return the headers to a String, +	 * @since 5.1.4, +	 */, +	public static String formatHeaders(MultiValueMap<String, String> headers) {, +		return headers.entrySet().stream(), +				.map(entry -> {, +					List<String> values = entry.getValue();, +					return entry.getKey() + ":" + (values.size() == 1 ?, +							"\"" + values.get(0) + "\"" :, +							values.stream().map(s -> "\"" + s + "\"").collect(Collectors.joining(", ")));, +				}), +				.collect(Collectors.joining(", ", "[", "]"));, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +		return formatHeaders(this.headers);, +	}, +, +	/**, +	 * Helps to format HTTP header values, as HTTP header values themselves can, +	 * contain comma-separated values, can become confusing with regular, +	 * {@link Map} formatting that also uses commas between entries., +	 * @param headers the headers to format, +	 * @return the headers to a String, +	 * @since 5.1.4, +	 */, +	public static String formatHeaders(MultiValueMap<String, String> headers) {, +		return headers.entrySet().stream(), +				.map(entry -> {, +					List<String> values = entry.getValue();, +					return entry.getKey() + ":" + (values.size() == 1 ?, +							"\"" + values.get(0) + "\"" :, +							values.stream().map(s -> "\"" + s + "\"").collect(Collectors.joining(", ")));, +				}), +				.collect(Collectors.joining(", ", "[", "]"));, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/JettyHeadersAdapter.java, +import org.springframework.http.HttpHeaders;, +	@Override, +	public String toString() {, +		return HttpHeaders.formatHeaders(this);, +	}, +, +, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +		return formatHeaders(this.headers);, +	}, +, +	/**, +	 * Helps to format HTTP header values, as HTTP header values themselves can, +	 * contain comma-separated values, can become confusing with regular, +	 * {@link Map} formatting that also uses commas between entries., +	 * @param headers the headers to format, +	 * @return the headers to a String, +	 * @since 5.1.4, +	 */, +	public static String formatHeaders(MultiValueMap<String, String> headers) {, +		return headers.entrySet().stream(), +				.map(entry -> {, +					List<String> values = entry.getValue();, +					return entry.getKey() + ":" + (values.size() == 1 ?, +							"\"" + values.get(0) + "\"" :, +							values.stream().map(s -> "\"" + s + "\"").collect(Collectors.joining(", ")));, +				}), +				.collect(Collectors.joining(", ", "[", "]"));, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/JettyHeadersAdapter.java, +import org.springframework.http.HttpHeaders;, +	@Override, +	public String toString() {, +		return HttpHeaders.formatHeaders(this);, +	}, +, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/NettyHeadersAdapter.java, +	@Override, +	public String toString() {, +		return org.springframework.http.HttpHeaders.formatHeaders(this);, +	}, +, +, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +		return formatHeaders(this.headers);, +	}, +, +	/**, +	 * Helps to format HTTP header values, as HTTP header values themselves can, +	 * contain comma-separated values, can become confusing with regular, +	 * {@link Map} formatting that also uses commas between entries., +	 * @param headers the headers to format, +	 * @return the headers to a String, +	 * @since 5.1.4, +	 */, +	public static String formatHeaders(MultiValueMap<String, String> headers) {, +		return headers.entrySet().stream()]