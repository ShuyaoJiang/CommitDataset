[+++ b/org.springframework.web/src/main/java/org/springframework/remoting/jaxws/AbstractJaxWsServiceExporter.java, + * Copyright 2002-2010 the original author or authors., +import java.lang.reflect.Method;, +import javax.xml.ws.WebServiceFeature;, +import org.springframework.beans.BeanUtils;, +import org.springframework.util.Assert;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.ReflectionUtils;, + * (through the JAX-WS {@link javax.jws.WebService} annotation)., + * Compatible with JAX-WS 2.0, 2.1 and 2.2., + *, + * <p>Subclasses need to implement the {@link #publishEndpoint} template methods, + * for actual endpoint exposure., +	private String bindingType;, +, +	private Object[] webServiceFeatures;, +, +	 * Specify the binding type to use, overriding the value of, +	 * the JAX-WS {@link javax.xml.ws.BindingType} annotation., +	 */, +	public void setBindingType(String bindingType) {, +		this.bindingType = bindingType;, +	}, +, +	/**, +	 * Allows for providing JAX-WS 2.2 WebServiceFeature specifications:, +	 * in the form of actual {@link javax.xml.ws.WebServiceFeature} objects,, +	 * WebServiceFeature Class references, or WebServiceFeature class names., +	 */, +	public void setWebServiceFeatures(Object[] webServiceFeatures) {, +		this.webServiceFeatures = webServiceFeatures;, +	}, +, +	/**, +						Endpoint endpoint = createEndpoint(this.beanFactory.getBean(beanName));, +	 * Create the actual Endpoint instance., +	 * @param bean the service object to wrap, +	 * @return the Endpoint instance, +	 * @see Endpoint#create(Object), +	 * @see Endpoint#create(String, Object), +	 */, +	protected Endpoint createEndpoint(Object bean) {, +		if (this.webServiceFeatures != null) {, +			return new FeatureEndpointProvider().createEndpoint(this.bindingType, bean, this.webServiceFeatures);, +		}, +		else {, +			return Endpoint.create(this.bindingType, bean);, +		}, +	}, +, +, +	/**, +, +	/**, +	 * Inner class in order to avoid a hard-coded JAX-WS 2.2 dependency., +	 * JAX-WS 2.0 and 2.1 didn't have WebServiceFeatures for endpoints yet..., +	 */, +	private class FeatureEndpointProvider {, +, +		public Endpoint createEndpoint(String bindingType, Object implementor, Object[] features) {, +			WebServiceFeature[] wsFeatures = new WebServiceFeature[features.length];, +			for (int i = 0; i < features.length; i++) {, +				wsFeatures[i] = convertWebServiceFeature(features[i]);, +			}, +			try {, +				Method create = Endpoint.class.getMethod("create", String.class, Object.class, WebServiceFeature[].class);, +				return (Endpoint) ReflectionUtils.invokeMethod(create, null, bindingType, implementor, wsFeatures);, +			}, +			catch (NoSuchMethodException ex) {, +				throw new IllegalStateException("JAX-WS 2.2 not available - cannot create feature endpoints", ex);, +			}, +		}, +, +		private WebServiceFeature convertWebServiceFeature(Object feature) {, +			Assert.notNull(feature, "WebServiceFeature specification object must not be null");, +			if (feature instanceof WebServiceFeature) {, +				return (WebServiceFeature) feature;, +			}, +			else if (feature instanceof Class) {, +				return (WebServiceFeature) BeanUtils.instantiate((Class<?>) feature);, +			}, +			else if (feature instanceof String) {, +				try {, +					Class<?> featureClass = getBeanClassLoader().loadClass((String) feature);, +					return (WebServiceFeature) BeanUtils.instantiate(featureClass);, +				}, +				catch (ClassNotFoundException ex) {, +					throw new IllegalArgumentException("Could not load WebServiceFeature class [" + feature + "]");, +				}, +			}, +			else {, +				throw new IllegalArgumentException("Unknown WebServiceFeature specification type: " + feature.getClass());, +			}, +		}, +, +		private ClassLoader getBeanClassLoader() {, +			return (beanFactory instanceof ConfigurableBeanFactory ?, +					((ConfigurableBeanFactory) beanFactory).getBeanClassLoader() : ClassUtils.getDefaultClassLoader());, +		}, +	}]