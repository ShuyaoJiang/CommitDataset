[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, +				.concatMap(mapping -> mapping.getHandler(request)), +				.then(handler -> invokeHandler(request, response, handler)), +				.then(result -> handleResult(request, response, result)), +	private Mono<HandlerResult> invokeHandler(ServerHttpRequest request, ServerHttpResponse response, Object handler) {, +				return handlerAdapter.handle(request, response, handler);, +		return Mono.error(new IllegalStateException("No HandlerAdapter: " + handler));, +	private Mono<Void> handleResult(ServerHttpRequest request, ServerHttpResponse response, HandlerResult result) {, +		return getResultHandler(result).handleResult(request, response, result), +				.otherwise(ex -> result.applyExceptionHandler(ex).then(exceptionResult ->, +						getResultHandler(result).handleResult(request, response, exceptionResult)));, +	private HandlerResultHandler getResultHandler(HandlerResult handlerResult) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, +				.concatMap(mapping -> mapping.getHandler(request)), +				.then(handler -> invokeHandler(request, response, handler)), +				.then(result -> handleResult(request, response, result)), +	private Mono<HandlerResult> invokeHandler(ServerHttpRequest request, ServerHttpResponse response, Object handler) {, +				return handlerAdapter.handle(request, response, handler);, +		return Mono.error(new IllegalStateException("No HandlerAdapter: " + handler));, +	private Mono<Void> handleResult(ServerHttpRequest request, ServerHttpResponse response, HandlerResult result) {, +		return getResultHandler(result).handleResult(request, response, result), +				.otherwise(ex -> result.applyExceptionHandler(ex).then(exceptionResult ->, +						getResultHandler(result).handleResult(request, response, exceptionResult)));, +	private HandlerResultHandler getResultHandler(HandlerResult handlerResult) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/HandlerAdapter.java, +import java.util.function.Function;, +, + * Contract that decouples the {@link DispatcherHandler} from the details of, + * invoking a handler and makes it possible to support any handler type., +	 * Whether this {@code HandlerAdapter} supports the given {@code handler}., +	 *, +	 * @return whether or not the handler is supported, +	 * Handle the request with the given handler., +	 *, +	 * <p>Implementations are encouraged to handle exceptions resulting from the, +	 * invocation of a handler in order and if necessary to return an alternate, +	 * result that represents an error response., +	 *, +	 * <p>Furthermore since an async {@code HandlerResult} may produce an error, +	 * later during result handling implementations are also encouraged to, +	 * {@link HandlerResult#setExceptionHandler(Function) set an exception, +	 * handler} on the {@code HandlerResult} so that may also be applied later, +	 * after result handling., +	 *, +	 * @param request current request, +	 * @param response current response, +	 * @param handler the selected handler which must have been previously, +	 * checked via {@link #supports(Object)}, +	 * @return {@link Mono} that emits a single {@code HandlerResult} or none if, +	 * the request has been fully handled and doesn't require further handling., +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, +				.concatMap(mapping -> mapping.getHandler(request)), +				.then(handler -> invokeHandler(request, response, handler)), +				.then(result -> handleResult(request, response, result)), +	private Mono<HandlerResult> invokeHandler(ServerHttpRequest request, ServerHttpResponse response, Object handler) {, +				return handlerAdapter.handle(request, response, handler);, +		return Mono.error(new IllegalStateException("No HandlerAdapter: " + handler));, +	private Mono<Void> handleResult(ServerHttpRequest request, ServerHttpResponse response, HandlerResult result) {, +		return getResultHandler(result).handleResult(request, response, result), +				.otherwise(ex -> result.applyExceptionHandler(ex).then(exceptionResult ->, +						getResultHandler(result).handleResult(request, response, exceptionResult)));, +	private HandlerResultHandler getResultHandler(HandlerResult handlerResult) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/HandlerAdapter.java, +import java.util.function.Function;, +, + * Contract that decouples the {@link DispatcherHandler} from the details of, + * invoking a handler and makes it possible to support any handler type., +	 * Whether this {@code HandlerAdapter} supports the given {@code handler}., +	 *, +	 * @return whether or not the handler is supported, +	 * Handle the request with the given handler., +	 *, +	 * <p>Implementations are encouraged to handle exceptions resulting from the, +	 * invocation of a handler in order and if necessary to return an alternate, +	 * result that represents an error response., +	 *, +	 * <p>Furthermore since an async {@code HandlerResult} may produce an error, +	 * later during result handling implementations are also encouraged to, +	 * {@link HandlerResult#setExceptionHandler(Function) set an exception, +	 * handler} on the {@code HandlerResult} so that may also be applied later, +	 * after result handling., +	 *, +	 * @param request current request, +	 * @param response current response, +	 * @param handler the selected handler which must have been previously, +	 * checked via {@link #supports(Object)}, +	 * @return {@link Mono} that emits a single {@code HandlerResult} or none if, +	 * the request has been fully handled and doesn't require further handling., +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/HandlerResult.java, +	private Function<Throwable, Mono<HandlerResult>> exceptionHandler;, +	 * For an async result, failures may occur later during result handling., +	 * Use this property to configure an exception handler to be invoked if, +	 * result handling fails., +	 *, +	 * @param function a function to map the the error to an alternative result., +	 * @return the current instance, +	public HandlerResult setExceptionHandler(Function<Throwable, Mono<HandlerResult>> function) {, +		this.exceptionHandler = function;, +	public boolean hasExceptionHandler() {, +		return (this.exceptionHandler != null);]