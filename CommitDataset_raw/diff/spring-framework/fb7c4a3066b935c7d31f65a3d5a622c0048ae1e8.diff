[+++ b/spring-context/src/test/java/org/springframework/context/annotation/ImportBeanDefinitionRegistrarTests.java, + * Copyright 2002-2018 the original author or authors., +		assertThat(SampleRegistrar.beanFactory, is(context.getBeanFactory()));, +		assertThat(SampleRegistrar.environment, is(context.getEnvironment()));, +	public @interface Sample {, +	private static class SampleRegistrar implements ImportBeanDefinitionRegistrar,, +			BeanClassLoaderAware, ResourceLoaderAware, BeanFactoryAware, EnvironmentAware {, +		public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,, +				BeanDefinitionRegistry registry) {, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ImportBeanDefinitionRegistrarTests.java, + * Copyright 2002-2018 the original author or authors., +		assertThat(SampleRegistrar.beanFactory, is(context.getBeanFactory()));, +		assertThat(SampleRegistrar.environment, is(context.getEnvironment()));, +	public @interface Sample {, +	private static class SampleRegistrar implements ImportBeanDefinitionRegistrar,, +			BeanClassLoaderAware, ResourceLoaderAware, BeanFactoryAware, EnvironmentAware {, +		public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,, +				BeanDefinitionRegistry registry) {, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ImportSelectorTests.java, + * Copyright 2002-2018 the original author or authors., +		assertThat(SampleImportSelector.beanFactory, is(context.getBeanFactory()));, +		assertThat(SampleImportSelector.classLoader, is(context.getBeanFactory().getBeanClassLoader()));, +		assertThat(SampleImportSelector.resourceLoader, is(notNullValue()));, +		assertThat(SampleImportSelector.environment, is(context.getEnvironment()));, +	public void correctMetaDataOnIndirectImports() {, +	private static class SampleImportSelector implements ImportSelector,, +			BeanClassLoaderAware, ResourceLoaderAware, BeanFactoryAware, EnvironmentAware {, +			SampleImportSelector.classLoader = classLoader;, +			SampleImportSelector.beanFactory = beanFactory;, +			SampleImportSelector.resourceLoader = resourceLoader;, +			SampleImportSelector.environment = environment;, +	@Import({DeferredImportSelector1.class, DeferredImportSelector2.class,, +			ImportSelector1.class, ImportSelector2.class}), +	public @interface Sample {]