[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScan.java, + * <p>See @{@link Configuration}'s javadoc for usage examples., + * @author Juergen Hoeller, +, +		 * {@link FilterType#ANNOTATION}, the class will be the annotation itself., +		 * In the case of {@link FilterType#ASSIGNABLE_TYPE}, the class will be the, +		 * type that detected components should be assignable to. And in the case, +		 * of {@link FilterType#CUSTOM}, the class will be an implementation of, +		Class<?>[] value() default {};, +, +		/**, +		 * The String pattern (or patterns) to use for the filter, as an alternative to, +		 * specifying a Class {@link #value()}. In the case of {@link FilterType#ASPECTJ},, +		 * this is an AspectJ type pattern expression; in case of {@link FilterType#REGEX},, +		 * a regex pattern for the fully-qualified class names to match., +		 */, +		String[] pattern() default {};, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScan.java, + * <p>See @{@link Configuration}'s javadoc for usage examples., + * @author Juergen Hoeller, +, +		 * {@link FilterType#ANNOTATION}, the class will be the annotation itself., +		 * In the case of {@link FilterType#ASSIGNABLE_TYPE}, the class will be the, +		 * type that detected components should be assignable to. And in the case, +		 * of {@link FilterType#CUSTOM}, the class will be an implementation of, +		Class<?>[] value() default {};, +, +		/**, +		 * The String pattern (or patterns) to use for the filter, as an alternative to, +		 * specifying a Class {@link #value()}. In the case of {@link FilterType#ASPECTJ},, +		 * this is an AspectJ type pattern expression; in case of {@link FilterType#REGEX},, +		 * a regex pattern for the fully-qualified class names to match., +		 */, +		String[] pattern() default {};, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, +import java.util.regex.Pattern;, +import org.springframework.core.type.filter.AspectJTypeFilter;, +import org.springframework.core.type.filter.RegexPatternTypeFilter;, + * @author Juergen Hoeller, +							"An error occured while processing a @ComponentScan ANNOTATION type filter: ");, +					Class<Annotation> annotationType = (Class<Annotation>) filterClass;, +					typeFilters.add(new AnnotationTypeFilter(annotationType));, +							"An error occured while processing a @ComponentScan CUSTOM type filter: ");, +					throw new IllegalArgumentException("Filter type not supported with Class value: " + filterType);, +, +		for (String expression : filterAttributes.getStringArray("pattern")) {, +			switch (filterType) {, +				case ASPECTJ:, +					typeFilters.add(new AspectJTypeFilter(expression, this.resourceLoader.getClassLoader()));, +					break;, +				case REGEX:, +					typeFilters.add(new RegexPatternTypeFilter(Pattern.compile(expression)));, +					break;, +				default:, +					throw new IllegalArgumentException("Filter type not supported with String pattern: " + filterType);, +			}, +		}, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScan.java, + * <p>See @{@link Configuration}'s javadoc for usage examples., + * @author Juergen Hoeller, +, +		 * {@link FilterType#ANNOTATION}, the class will be the annotation itself., +		 * In the case of {@link FilterType#ASSIGNABLE_TYPE}, the class will be the, +		 * type that detected components should be assignable to. And in the case, +		 * of {@link FilterType#CUSTOM}, the class will be an implementation of, +		Class<?>[] value() default {};, +, +		/**, +		 * The String pattern (or patterns) to use for the filter, as an alternative to, +		 * specifying a Class {@link #value()}. In the case of {@link FilterType#ASPECTJ},, +		 * this is an AspectJ type pattern expression; in case of {@link FilterType#REGEX},, +		 * a regex pattern for the fully-qualified class names to match., +		 */, +		String[] pattern() default {};, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, +import java.util.regex.Pattern;, +import org.springframework.core.type.filter.AspectJTypeFilter;, +import org.springframework.core.type.filter.RegexPatternTypeFilter;, + * @author Juergen Hoeller, +							"An error occured while processing a @ComponentScan ANNOTATION type filter: ");, +					Class<Annotation> annotationType = (Class<Annotation>) filterClass;, +					typeFilters.add(new AnnotationTypeFilter(annotationType));, +							"An error occured while processing a @ComponentScan CUSTOM type filter: ");, +					throw new IllegalArgumentException("Filter type not supported with Class value: " + filterType);, +, +		for (String expression : filterAttributes.getStringArray("pattern")) {, +			switch (filterType) {, +				case ASPECTJ:, +					typeFilters.add(new AspectJTypeFilter(expression, this.resourceLoader.getClassLoader()));, +					break;, +				case REGEX:, +					typeFilters.add(new RegexPatternTypeFilter(Pattern.compile(expression)));, +					break;, +				default:, +					throw new IllegalArgumentException("Filter type not supported with String pattern: " + filterType);, +			}, +		}, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/FilterType.java]