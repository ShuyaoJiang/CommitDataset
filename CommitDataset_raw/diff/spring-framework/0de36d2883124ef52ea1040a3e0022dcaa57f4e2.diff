[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/HttpHandlerConnector.java, + * Copyright 2002-2018 the original author or authors., +		return (request.getMethod() == HttpMethod.HEAD ? new HttpHeadResponseDecorator(response) : response);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/HttpHandlerConnector.java, + * Copyright 2002-2018 the original author or authors., +		return (request.getMethod() == HttpMethod.HEAD ? new HttpHeadResponseDecorator(response) : response);, +++ b/spring-web/src/main/java/org/springframework/http/client/SimpleBufferingAsyncClientHttpRequest.java, + * Copyright 2002-2018 the original author or authors., +				if (getMethod() == HttpMethod.DELETE && bufferedOutput.length == 0) {, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/HttpHandlerConnector.java, + * Copyright 2002-2018 the original author or authors., +		return (request.getMethod() == HttpMethod.HEAD ? new HttpHeadResponseDecorator(response) : response);, +++ b/spring-web/src/main/java/org/springframework/http/client/SimpleBufferingAsyncClientHttpRequest.java, + * Copyright 2002-2018 the original author or authors., +				if (getMethod() == HttpMethod.DELETE && bufferedOutput.length == 0) {, +++ b/spring-web/src/main/java/org/springframework/http/client/SimpleBufferingClientHttpRequest.java, + * Copyright 2002-2018 the original author or authors., +		if (getMethod() == HttpMethod.DELETE && bufferedOutput.length == 0) {, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/HttpHandlerConnector.java, + * Copyright 2002-2018 the original author or authors., +		return (request.getMethod() == HttpMethod.HEAD ? new HttpHeadResponseDecorator(response) : response);, +++ b/spring-web/src/main/java/org/springframework/http/client/SimpleBufferingAsyncClientHttpRequest.java, + * Copyright 2002-2018 the original author or authors., +				if (getMethod() == HttpMethod.DELETE && bufferedOutput.length == 0) {, +++ b/spring-web/src/main/java/org/springframework/http/client/SimpleBufferingClientHttpRequest.java, + * Copyright 2002-2018 the original author or authors., +		if (getMethod() == HttpMethod.DELETE && bufferedOutput.length == 0) {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java, + * Copyright 2002-2018 the original author or authors., +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +		if (adaptedRequest.getMethod() == HttpMethod.HEAD) {, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/HttpHandlerConnector.java, + * Copyright 2002-2018 the original author or authors., +		return (request.getMethod() == HttpMethod.HEAD ? new HttpHeadResponseDecorator(response) : response);, +++ b/spring-web/src/main/java/org/springframework/http/client/SimpleBufferingAsyncClientHttpRequest.java, + * Copyright 2002-2018 the original author or authors., +				if (getMethod() == HttpMethod.DELETE && bufferedOutput.length == 0) {, +++ b/spring-web/src/main/java/org/springframework/http/client/SimpleBufferingClientHttpRequest.java, + * Copyright 2002-2018 the original author or authors., +		if (getMethod() == HttpMethod.DELETE && bufferedOutput.length == 0) {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java, + * Copyright 2002-2018 the original author or authors., +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +		if (adaptedRequest.getMethod() == HttpMethod.HEAD) {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java, +		if (httpRequest.getMethod() == HttpMethod.HEAD) {, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/HttpHandlerConnector.java, + * Copyright 2002-2018 the original author or authors., +		return (request.getMethod() == HttpMethod.HEAD ? new HttpHeadResponseDecorator(response) : response);, +++ b/spring-web/src/main/java/org/springframework/http/client/SimpleBufferingAsyncClientHttpRequest.java, + * Copyright 2002-2018 the original author or authors., +				if (getMethod() == HttpMethod.DELETE && bufferedOutput.length == 0) {, +++ b/spring-web/src/main/java/org/springframework/http/client/SimpleBufferingClientHttpRequest.java, + * Copyright 2002-2018 the original author or authors., +		if (getMethod() == HttpMethod.DELETE && bufferedOutput.length == 0) {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java, + * Copyright 2002-2018 the original author or authors., +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +		if (adaptedRequest.getMethod() == HttpMethod.HEAD) {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java, +		if (httpRequest.getMethod() == HttpMethod.HEAD) {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowHttpHandlerAdapter.java, + * Copyright 2002-2018 the original author or authors., +		if (request.getMethod() == HttpMethod.HEAD) {, +			// no-op, +				catch (IOException ex2) {, +					// ignore, +, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/HttpHandlerConnector.java, + * Copyright 2002-2018 the original author or authors., +		return (request.getMethod() == HttpMethod.HEAD ? new HttpHeadResponseDecorator(response) : response);, +++ b/spring-web/src/main/java/org/springframework/http/client/SimpleBufferingAsyncClientHttpRequest.java, + * Copyright 2002-2018 the original author or authors., +				if (getMethod() == HttpMethod.DELETE && bufferedOutput.length == 0) {, +++ b/spring-web/src/main/java/org/springframework/http/client/SimpleBufferingClientHttpRequest.java, + * Copyright 2002-2018 the original author or authors., +		if (getMethod() == HttpMethod.DELETE && bufferedOutput.length == 0) {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java, + * Copyright 2002-2018 the original author or authors., +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +		if (adaptedRequest.getMethod() == HttpMethod.HEAD) {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java, +		if (httpRequest.getMethod() == HttpMethod.HEAD) {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowHttpHandlerAdapter.java, + * Copyright 2002-2018 the original author or authors., +		if (request.getMethod() == HttpMethod.HEAD) {, +			// no-op, +				catch (IOException ex2) {, +					// ignore, +, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/CorsUtils.java, +		return (request.getMethod() == HttpMethod.OPTIONS && isCorsRequest(request) &&, +	 * of a cross-origin request, +		return (actualHost.equals(originUrl.getHost()) &&, +				actualPort == getPort(originUrl.getScheme(), originUrl.getPort()));, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/HttpHandlerConnector.java]