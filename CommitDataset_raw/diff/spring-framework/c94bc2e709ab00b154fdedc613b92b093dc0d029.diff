[+++ b/spring-context/src/test/java/org/springframework/context/support/EnvironmentIntegrationTests.java, +++ b/spring-context/src/test/java/org/springframework/context/support/EnvironmentIntegrationTests.java, +++ b/spring-core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, +			validateProfile(profile);, +			this.activeProfiles.add(profile);, +		doGetActiveProfiles();, +, +++ b/spring-context/src/test/java/org/springframework/context/support/EnvironmentIntegrationTests.java, +++ b/spring-core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, +			validateProfile(profile);, +			this.activeProfiles.add(profile);, +		doGetActiveProfiles();, +, +++ b/spring-core/src/test/java/org/springframework/core/env/StandardEnvironmentTests.java, +	public void addActiveProfile_whenActiveProfilesPropertyIsAlreadySet() {, +		ConfigurableEnvironment env = new StandardEnvironment();, +		assertThat(env.getProperty(ACTIVE_PROFILES_PROPERTY_NAME), nullValue());, +		env.getPropertySources().addFirst(new MockPropertySource().withProperty(ACTIVE_PROFILES_PROPERTY_NAME, "p1"));, +		assertThat(env.getProperty(ACTIVE_PROFILES_PROPERTY_NAME), equalTo("p1"));, +		env.addActiveProfile("p2");, +		assertThat(env.getActiveProfiles(), arrayContaining("p1", "p2"));, +	}, +, +	@Test]