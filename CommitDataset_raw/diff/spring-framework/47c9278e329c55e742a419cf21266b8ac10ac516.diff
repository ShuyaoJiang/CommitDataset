[+++ /dev/null, +++ /dev/null, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/PlaceholderConfigurerSupport.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.beans.factory.config;, +, +import org.springframework.beans.factory.BeanDefinitionStoreException;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.BeanNameAware;, +import org.springframework.util.StringValueResolver;, +, +/**, + * Abstract base class for property resource configurers that resolve placeholders, + * in bean definition property values. Implementations <em>pull</em> values from a, + * properties file or other {@linkplain org.springframework.core.env.PropertySource, + * property source} into bean definitions., + *, + * <p>The default placeholder syntax follows the Ant / Log4J / JSP EL style:, + *, + *<pre class="code">${...}</pre>, + *, + * Example XML bean definition:, + *, + *<pre class="code">{@code, + *<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"/>, + *    <property name="driverClassName" value="}${driver}{@code"/>, + *    <property name="url" value="jdbc:}${dbname}{@code"/>, + *</bean>, + *}</pre>, + *, + * Example properties file:, + *, + * <pre class="code"> driver=com.mysql.jdbc.Driver, + * dbname=mysql:mydb</pre>, + *, + * Annotated bean definitions may take advantage of property replacement using, + * the {@link org.springframework.beans.factory.annotation.Value @Value} annotation:, + *, + *<pre class="code">@Value("${person.age}")</pre>, + *, + * Implementations check simple property values, lists, maps, props, and bean names, + * in bean references. Furthermore, placeholder values can also cross-reference, + * other placeholders, like:, + *, + *<pre class="code">rootPath=myrootdir, + *subPath=${rootPath}/subdir</pre>, + *, + * In contrast to {@link PropertyOverrideConfigurer}, subclasses of this type allow, + * filling in of explicit placeholders in bean definitions., + *, + * <p>If a configurer cannot resolve a placeholder, a {@link BeanDefinitionStoreException}, + * will be thrown. If you want to check against multiple properties files, specify multiple, + * resources via the {@link #setLocations locations} property. You can also define multiple, + * configurers, each with its <em>own</em> placeholder syntax. Use {@link, + * #ignoreUnresolvablePlaceholders} to intentionally suppress throwing an exception if a, + * placeholder cannot be resolved., + *, + * <p>Default property values can be defined globally for each configurer instance, + * via the {@link #setProperties properties} property, or on a property-by-property basis, + * using the default value separator which is {@code ":"} by default and, + * customizable via {@link #setValueSeparator(String)}., + *, + * <p>Example XML property with default value:, + *, + *<pre class="code">{@code, + *  <property name="url" value="jdbc:}${dbname:defaultdb}{@code"/>, + *}</pre>, + *, + * @author Chris Beams, + * @author Juergen Hoeller, + * @since 3.1, + * @see PropertyPlaceholderConfigurer, + * @see org.springframework.context.support.PropertySourcesPlaceholderConfigurer, + */, +public abstract class PlaceholderConfigurerSupport extends PropertyResourceConfigurer, +		implements BeanNameAware, BeanFactoryAware {, +, +	/** Default placeholder prefix: {@value} */, +	public static final String DEFAULT_PLACEHOLDER_PREFIX = "${";, +, +	/** Default placeholder suffix: {@value} */, +	public static final String DEFAULT_PLACEHOLDER_SUFFIX = "}";, +, +	/** Default value separator: {@value} */]