[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/HandlerResultMatchers.java, +import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodInvocationInfo;, +import static org.springframework.test.util.AssertionErrors.fail;, + * @author Sam Brannen, +	 * Assert the controller method used to process the request., +	 * <p>The expected method is specified through a "mock" controller method, +	 * invocation similar to {@link MvcUriComponentsBuilder#fromMethodCall(Object)}., +	 * <p>For example, given this controller:, +	 * public class SimpleController {, +	 * <p>A test that has statically imported {@link MvcUriComponentsBuilder#on}, +	 * can be performed as follows:, +	 *, +	 * @param obj either the value returned from a "mock" controller invocation, +	 * or the "mock" controller itself after an invocation, +	public ResultMatcher methodCall(final Object obj) {, +				if (!MethodInvocationInfo.class.isInstance(obj)) {, +					fail(String.format("The supplied object [%s] is not an instance of %s. ", +							+ "Ensure that you invoke the handler method via MvcUriComponentsBuilder.on().",, +							obj, MethodInvocationInfo.class.getName()));, +				}, +				MethodInvocationInfo invocationInfo = (MethodInvocationInfo) obj;, +				Method expected = invocationInfo.getControllerMethod();, +				Method actual = getHandlerMethod(result).getMethod();, +				assertEquals("Handler method", expected, actual);, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/HandlerResultMatchers.java, +import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodInvocationInfo;, +import static org.springframework.test.util.AssertionErrors.fail;, + * @author Sam Brannen, +	 * Assert the controller method used to process the request., +	 * <p>The expected method is specified through a "mock" controller method, +	 * invocation similar to {@link MvcUriComponentsBuilder#fromMethodCall(Object)}., +	 * <p>For example, given this controller:, +	 * public class SimpleController {, +	 * <p>A test that has statically imported {@link MvcUriComponentsBuilder#on}, +	 * can be performed as follows:, +	 *, +	 * @param obj either the value returned from a "mock" controller invocation, +	 * or the "mock" controller itself after an invocation, +	public ResultMatcher methodCall(final Object obj) {, +				if (!MethodInvocationInfo.class.isInstance(obj)) {, +					fail(String.format("The supplied object [%s] is not an instance of %s. ", +							+ "Ensure that you invoke the handler method via MvcUriComponentsBuilder.on().",, +							obj, MethodInvocationInfo.class.getName()));, +				}, +				MethodInvocationInfo invocationInfo = (MethodInvocationInfo) obj;, +				Method expected = invocationInfo.getControllerMethod();, +				Method actual = getHandlerMethod(result).getMethod();, +				assertEquals("Handler method", expected, actual);, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/HandlerAssertionTests.java, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, + * @author Sam Brannen, +	@Rule, +	public final ExpectedException exception = ExpectedException.none();, +	public void methodCallOnNonMock() throws Exception {, +		exception.expect(AssertionError.class);, +		exception.expectMessage("The supplied object [bogus] is not an instance of");, +		exception.expectMessage(MvcUriComponentsBuilder.MethodInvocationInfo.class.getName());, +		exception.expectMessage("Ensure that you invoke the handler method via MvcUriComponentsBuilder.on()");, +, +		this.mockMvc.perform(get("/")).andExpect(handler().methodCall("bogus"));, +	}, +]