[+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/Scheduled.java, +import java.lang.annotation.Repeatable;, +@Repeatable(Schedules.class), +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/Scheduled.java, +import java.lang.annotation.Repeatable;, +@Repeatable(Schedules.class), +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +		Class<?> targetClass = AopUtils.getTargetClass(bean);, +				Schedules schedules = AnnotationUtils.getAnnotation(method, Schedules.class);, +				if (schedules != null) {, +					for (Scheduled scheduled : schedules.value()) {, +						processScheduled(scheduled, method, bean);, +					}, +				}, +				else {, +					Scheduled scheduled = AnnotationUtils.getAnnotation(method, Scheduled.class);, +					if (scheduled != null) {, +						processScheduled(scheduled, method, bean);, +					}, +				}, +			}, +		});, +		return bean;, +	}, +, +	protected void processScheduled(Scheduled scheduled, Method method, Object bean) {, +, +							"attribute to 'true'", method.getName(), method.getDeclaringClass().getSimpleName()));, +, +, +			long initialDelay = scheduled.initialDelay();, +			String initialDelayString = scheduled.initialDelayString();, +				if (this.embeddedValueResolver != null) {, +					initialDelayString = this.embeddedValueResolver.resolveStringValue(initialDelayString);, +, +			String cron = scheduled.cron();, +				if (this.embeddedValueResolver != null) {, +					cron = this.embeddedValueResolver.resolveStringValue(cron);, +				this.registrar.addCronTask(new CronTask(runnable, cron));, +, +, +			long fixedDelay = scheduled.fixedDelay();, +				this.registrar.addFixedDelayTask(new IntervalTask(runnable, fixedDelay, initialDelay));, +			String fixedDelayString = scheduled.fixedDelayString();, +				if (this.embeddedValueResolver != null) {, +					fixedDelayString = this.embeddedValueResolver.resolveStringValue(fixedDelayString);, +				this.registrar.addFixedDelayTask(new IntervalTask(runnable, fixedDelay, initialDelay));, +, +			long fixedRate = scheduled.fixedRate();, +				this.registrar.addFixedRateTask(new IntervalTask(runnable, fixedRate, initialDelay));, +			String fixedRateString = scheduled.fixedRateString();, +				if (this.embeddedValueResolver != null) {, +					fixedRateString = this.embeddedValueResolver.resolveStringValue(fixedRateString);, +				this.registrar.addFixedRateTask(new IntervalTask(runnable, fixedRate, initialDelay));, +, +, +, +		Map<String, SchedulingConfigurer> configurers =, +				this.applicationContext.getBeansOfType(SchedulingConfigurer.class);, +, +			schedulers.putAll(this.applicationContext.getBeansOfType(TaskScheduler.class));, +			schedulers.putAll(this.applicationContext.getBeansOfType(ScheduledExecutorService.class));, +, +	public void destroy() {, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/Scheduled.java, +import java.lang.annotation.Repeatable;, +@Repeatable(Schedules.class), +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +		Class<?> targetClass = AopUtils.getTargetClass(bean);, +				Schedules schedules = AnnotationUtils.getAnnotation(method, Schedules.class);, +				if (schedules != null) {, +					for (Scheduled scheduled : schedules.value()) {, +						processScheduled(scheduled, method, bean);, +					}, +				}, +				else {, +					Scheduled scheduled = AnnotationUtils.getAnnotation(method, Scheduled.class);, +					if (scheduled != null) {, +						processScheduled(scheduled, method, bean);, +					}, +				}, +			}, +		});, +		return bean;, +	}, +, +	protected void processScheduled(Scheduled scheduled, Method method, Object bean) {, +, +							"attribute to 'true'", method.getName(), method.getDeclaringClass().getSimpleName()));, +, +, +			long initialDelay = scheduled.initialDelay();, +			String initialDelayString = scheduled.initialDelayString();, +				if (this.embeddedValueResolver != null) {, +					initialDelayString = this.embeddedValueResolver.resolveStringValue(initialDelayString);, +, +			String cron = scheduled.cron();, +				if (this.embeddedValueResolver != null) {, +					cron = this.embeddedValueResolver.resolveStringValue(cron);, +				this.registrar.addCronTask(new CronTask(runnable, cron));]