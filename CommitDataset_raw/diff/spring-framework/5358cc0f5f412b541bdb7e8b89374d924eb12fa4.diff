[+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +		if (this == NONE || type == NONE) {, +		boolean rtn = resolve(Object.class).isAssignableFrom(type.resolve(Object.class));, +		rtn &= (!checkingGeneric || resolve(Object.class).equals(type.resolve(Object.class)));, +			rtn &= getGeneric(i).isAssignableFrom(, +					type.as(resolve(Object.class)).getGeneric(i), true);, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +		if (this == NONE || type == NONE) {, +		boolean rtn = resolve(Object.class).isAssignableFrom(type.resolve(Object.class));, +		rtn &= (!checkingGeneric || resolve(Object.class).equals(type.resolve(Object.class)));, +			rtn &= getGeneric(i).isAssignableFrom(, +					type.as(resolve(Object.class)).getGeneric(i), true);, +++ b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java, +		assertAssignable(objectType, unresolvableVariable).equalTo(true);, +		assertAssignable(unresolvableVariable, objectType).equalTo(true);, +		ResolvableType extendsAnon = ResolvableType.forField(AssignmentBase.class.getField("listAnon"), Assignment.class).getGeneric();, +		assertAssignable(extendsAnon, object, charSequence, string)., +				equalTo(true, true, true);, +		public List<?> listAnon;, +]