[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterReturnValueHandler.java, +				// Not streaming: write headers without committing response.., +				outputMessage.getHeaders().forEach((headerName, headerValues) -> {, +					for (String headerValue : headerValues) {, +						response.addHeader(headerName, headerValue);, +					}, +				});, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterReturnValueHandler.java, +				// Not streaming: write headers without committing response.., +				outputMessage.getHeaders().forEach((headerName, headerValues) -> {, +					for (String headerValue : headerValues) {, +						response.addHeader(headerName, headerValue);, +					}, +				});, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyEmitterReturnValueHandlerTests.java, +import static org.junit.Assert.*;, +import static org.mockito.Mockito.*;, +import static org.springframework.core.ResolvableType.*;, +import static org.springframework.web.method.ResolvableMethod.*;, +	@Test // SPR-17076, +	public void responseEntityFluxWithCustomHeader() throws Exception {, +, +		EmitterProcessor<SimpleBean> processor = EmitterProcessor.create();, +		ResponseEntity<Flux<SimpleBean>> entity = ResponseEntity.ok().header("x-foo", "bar").body(processor);, +		ResolvableType bodyType = forClassWithGenerics(Flux.class, SimpleBean.class);, +		MethodParameter type = on(TestController.class).resolveReturnType(ResponseEntity.class, bodyType);, +		this.handler.handleReturnValue(entity, type, this.mavContainer, this.webRequest);, +, +		assertTrue(this.request.isAsyncStarted());, +		assertEquals(200, this.response.getStatus());, +		assertEquals("bar", this.response.getHeader("x-foo"));, +		assertFalse(this.response.isCommitted());, +	}, +, +		private ResponseEntity<Flux<SimpleBean>> h10() { return null; }]