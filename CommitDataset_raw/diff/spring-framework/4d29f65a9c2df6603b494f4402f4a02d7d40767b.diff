[+++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/bind/annotation/EventMapping.java, +@Mapping(), +	 * This name uniquely identifies an event within a portlet mode., +	 * <p>If not specified, the handler method will be invoked for any, +	String value() default "";, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/bind/annotation/EventMapping.java, +@Mapping(), +	 * This name uniquely identifies an event within a portlet mode., +	 * <p>If not specified, the handler method will be invoked for any, +	String value() default "";, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/bind/annotation/ResourceMapping.java, +@Mapping(), +	 * This id uniquely identifies a resource within a portlet mode., +	 * <p>If not specified, the handler method will be invoked for any, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/bind/annotation/EventMapping.java, +@Mapping(), +	 * This name uniquely identifies an event within a portlet mode., +	 * <p>If not specified, the handler method will be invoked for any, +	String value() default "";, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/bind/annotation/ResourceMapping.java, +@Mapping(), +	 * This id uniquely identifies a resource within a portlet mode., +	 * <p>If not specified, the handler method will be invoked for any, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +				mappingInfo.initPhaseMapping(PortletRequest.RESOURCE_PHASE, resourceMapping.value(), new String[0]);, +				mappingInfo.initPhaseMapping(PortletRequest.EVENT_PHASE, eventMapping.value(), new String[0]);, +				mappingInfo.initStandardMapping(requestMapping.value(), requestMapping.method(),, +						requestMapping.params(), requestMapping.headers());, +		public final Set<PortletMode> modes = new HashSet<PortletMode>();, +		public final Set<String> methods = new HashSet<String>();, +		public String[] headers = new String[0];, +, +		public void initStandardMapping(String[] modes, RequestMethod[] methods, String[] params, String[] headers) {, +			this.headers = StringUtils.mergeStringArrays(this.headers, headers);, +					PortletAnnotationMappingUtils.checkParameters(this.params, request) &&, +					PortletAnnotationMappingUtils.checkHeaders(this.headers, request);, +					Arrays.equals(this.params, other.params) &&, +					Arrays.equals(this.headers, other.headers));, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/bind/annotation/EventMapping.java, +@Mapping(), +	 * This name uniquely identifies an event within a portlet mode., +	 * <p>If not specified, the handler method will be invoked for any, +	String value() default "";, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/bind/annotation/ResourceMapping.java, +@Mapping(), +	 * This id uniquely identifies a resource within a portlet mode., +	 * <p>If not specified, the handler method will be invoked for any, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +				mappingInfo.initPhaseMapping(PortletRequest.RESOURCE_PHASE, resourceMapping.value(), new String[0]);, +				mappingInfo.initPhaseMapping(PortletRequest.EVENT_PHASE, eventMapping.value(), new String[0]);, +				mappingInfo.initStandardMapping(requestMapping.value(), requestMapping.method(),, +						requestMapping.params(), requestMapping.headers());, +		public final Set<PortletMode> modes = new HashSet<PortletMode>();, +		public final Set<String> methods = new HashSet<String>();, +		public String[] headers = new String[0];, +, +		public void initStandardMapping(String[] modes, RequestMethod[] methods, String[] params, String[] headers) {, +			this.headers = StringUtils.mergeStringArrays(this.headers, headers);, +					PortletAnnotationMappingUtils.checkParameters(this.params, request) &&, +					PortletAnnotationMappingUtils.checkHeaders(this.headers, request);, +					Arrays.equals(this.params, other.params) &&, +					Arrays.equals(this.headers, other.headers));, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/DefaultAnnotationHandlerMapping.java, +import java.util.Arrays;, +import java.util.HashMap;, +import java.util.Map;, +import javax.portlet.Event;, +import javax.portlet.EventRequest;, +import javax.portlet.ResourceRequest;, +import org.springframework.web.portlet.bind.PortletRequestBindingException;, +import org.springframework.web.portlet.bind.annotation.EventMapping;, +import org.springframework.web.portlet.bind.annotation.ResourceMapping;, + * expressed at the class level (if any). A portlet mode in combination with specific, + * parameter conditions needs to uniquely map onto one specific handler bean,, + * not spread across multiple handler beans. It is strongly recommended to, + * co-locate related handler methods into the same bean., +	private final Map<Class, RequestMapping> cachedMappings = new HashMap<Class, RequestMapping>();, +, +, +				// @RequestMapping found at type level, +				this.cachedMappings.put(handlerType, mapping);, +					ParameterMappingPredicate predicate = new ParameterMappingPredicate(, +							params, mapping.headers(), mapping.method());, +				String resourceId = null;, +				String eventName = null;, +							RequestMapping rm = (RequestMapping) ann;, +							modeKeys = rm.value();, +							params = StringUtils.mergeStringArrays(params, rm.params());, +						else if (ann instanceof ResourceMapping) {, +							ResourceMapping rm = (ResourceMapping) ann;, +							resourceId = rm.value();, +						}, +						else if (ann instanceof EventMapping) {, +							EventMapping em = (EventMapping) ann;, +							eventName = em.value();, +						}, +						else {, +				}, +									"No portlet mode mappings specified - neither at type nor at method level");, +						if (!PortletAnnotationMappingUtils.validateModeMapping(modeKeys, typeMapping.value())) {]