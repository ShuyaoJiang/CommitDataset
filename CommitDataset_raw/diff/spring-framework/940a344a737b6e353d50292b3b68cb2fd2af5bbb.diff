[+++ b/src/docs/asciidoc/web/web-cors.adoc, += Spring MVC CORS Support, +++ b/src/docs/asciidoc/web/web-cors.adoc, += Spring MVC CORS Support, +++ b/src/docs/asciidoc/web/web-mvc.adoc, +== Introduction, +web framework that does not depend on the Servlet API but can run on Servlet containers, +(via Servlet 3.1 non-blocking I/O) or on other non-blocking runtimes such as, +Netty or Undertow., +appropriate delegate components., +it needs to perform handler mapping, view resolution, and much more, +(see <<mvc-servlet-special-bean-types,Special Bean Types>>). As an actual, +`Servlet` it also needs to be declared and mapped according to the Servlet specification., +This can be done through code-based configuration or in `web.xml`., +Below is an example of code-based configuration. Note that `WebApplicationInitializer` is, +an interface provided by Spring MVC that ensures it is auto-detected by the Servlet, +container (see <<mvc-container-config,Code-based, Servlet container initialization>>, +for more details):, +override specific methods to customize it. An example of that is shown in the next, +section <<mvc-servlet-context-hierarchy,WebApplicationContext Hierarchy>>., +For many applications, a single `WebApplicationContext` is simple and sufficient., +However it is also possible to set up a context hierarchy where one root `WebApplicationContext`, +is shared across multiple `DispatcherServlet` instances, or other `Servlet`, each with, +its own `WebApplicationContext` configuration --, +see <<core.adoc#context-introduction,Additional Capabilities of the ApplicationContext>>, +for more on the context hierarchy feature of Spring., +, +The root `WebApplicationContext` should contain infrastructure beans, e.g. data repositories or, +business services, that need to be shared across multiple `Servlet` instances. These beans, +are effectively inherited and could be overridden, or rather re-declared, in the Servlet-specific, +`WebApplicationContext` which for the most part contains beans local to the given `Servlet`, +as shown in the below diagram:, +, +image::images/mvc-context-hierarchy.png[], +, +Below is example configuration of how to set up a `WebApplicationContext` hierarchy:, +And the `web.xml` equivalent:, +== Multipart (file upload) support, +++ b/src/docs/asciidoc/web/web-cors.adoc, += Spring MVC CORS Support, +++ b/src/docs/asciidoc/web/web-mvc.adoc, +== Introduction, +web framework that does not depend on the Servlet API but can run on Servlet containers, +(via Servlet 3.1 non-blocking I/O) or on other non-blocking runtimes such as, +Netty or Undertow., +appropriate delegate components., +it needs to perform handler mapping, view resolution, and much more, +(see <<mvc-servlet-special-bean-types,Special Bean Types>>). As an actual, +`Servlet` it also needs to be declared and mapped according to the Servlet specification., +This can be done through code-based configuration or in `web.xml`., +Below is an example of code-based configuration. Note that `WebApplicationInitializer` is, +an interface provided by Spring MVC that ensures it is auto-detected by the Servlet, +container (see <<mvc-container-config,Code-based, Servlet container initialization>>, +for more details):, +override specific methods to customize it. An example of that is shown in the next, +section <<mvc-servlet-context-hierarchy,WebApplicationContext Hierarchy>>., +For many applications, a single `WebApplicationContext` is simple and sufficient., +However it is also possible to set up a context hierarchy where one root `WebApplicationContext`, +is shared across multiple `DispatcherServlet` instances, or other `Servlet`, each with, +its own `WebApplicationContext` configuration --, +see <<core.adoc#context-introduction,Additional Capabilities of the ApplicationContext>>, +for more on the context hierarchy feature of Spring., +, +The root `WebApplicationContext` should contain infrastructure beans, e.g. data repositories or, +business services, that need to be shared across multiple `Servlet` instances. These beans, +are effectively inherited and could be overridden, or rather re-declared, in the Servlet-specific, +`WebApplicationContext` which for the most part contains beans local to the given `Servlet`, +as shown in the below diagram:, +, +image::images/mvc-context-hierarchy.png[], +, +Below is example configuration of how to set up a `WebApplicationContext` hierarchy:, +And the `web.xml` equivalent:, +== Multipart (file upload) support, +++ b/src/docs/asciidoc/web/web-view.adoc, += Spring MVC View Technologies]