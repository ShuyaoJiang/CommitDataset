[+++ b/spring-aop/src/main/java/org/springframework/aop/ProxyMethodInvocation.java, + * Copyright 2002-2015 the original author or authors., +	MethodInvocation invocableClone(Object... arguments);, +	void setArguments(Object... arguments);, +++ b/spring-aop/src/main/java/org/springframework/aop/ProxyMethodInvocation.java, + * Copyright 2002-2015 the original author or authors., +	MethodInvocation invocableClone(Object... arguments);, +	void setArguments(Object... arguments);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/AopProxyUtils.java, +import java.lang.reflect.Array;, +import java.lang.reflect.Method;, +import org.springframework.util.ObjectUtils;, +, +	/**, +	 * Adapt the given arguments to the target signature in the given method,, +	 * if necessary: in particular, if a given vararg argument array does not, +	 * match the array type of the declared vararg parameter in the method., +	 * @param method the target method, +	 * @param arguments the given arguments, +	 * @return a cloned argument array, or the original if no adaptation is needed, +	 * @since 4.2.3, +	 */, +	static Object[] adaptArgumentsIfNecessary(Method method, Object... arguments) {, +		if (method.isVarArgs() && !ObjectUtils.isEmpty(arguments)) {, +			Class<?>[] paramTypes = method.getParameterTypes();, +			if (paramTypes.length == arguments.length) {, +				int varargIndex = paramTypes.length - 1;, +				Class<?> varargType = paramTypes[varargIndex];, +				if (varargType.isArray()) {, +					Object varargArray = arguments[varargIndex];, +					if (varargArray instanceof Object[] && !varargType.isInstance(varargArray)) {, +						Object[] newArguments = new Object[arguments.length];, +						System.arraycopy(arguments, 0, newArguments, 0, varargIndex);, +						Class<?> targetElementType = varargType.getComponentType();, +						int varargLength = Array.getLength(varargArray);, +						Object newVarargArray = Array.newInstance(targetElementType, varargLength);, +						System.arraycopy(varargArray, 0, newVarargArray, 0, varargLength);, +						newArguments[varargIndex] = newVarargArray;, +						return newArguments;, +					}, +				}, +			}, +		}, +		return arguments;, +	}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/ProxyMethodInvocation.java, + * Copyright 2002-2015 the original author or authors., +	MethodInvocation invocableClone(Object... arguments);, +	void setArguments(Object... arguments);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/AopProxyUtils.java, +import java.lang.reflect.Array;, +import java.lang.reflect.Method;, +import org.springframework.util.ObjectUtils;, +, +	/**, +	 * Adapt the given arguments to the target signature in the given method,, +	 * if necessary: in particular, if a given vararg argument array does not, +	 * match the array type of the declared vararg parameter in the method., +	 * @param method the target method, +	 * @param arguments the given arguments, +	 * @return a cloned argument array, or the original if no adaptation is needed, +	 * @since 4.2.3, +	 */, +	static Object[] adaptArgumentsIfNecessary(Method method, Object... arguments) {, +		if (method.isVarArgs() && !ObjectUtils.isEmpty(arguments)) {, +			Class<?>[] paramTypes = method.getParameterTypes();, +			if (paramTypes.length == arguments.length) {, +				int varargIndex = paramTypes.length - 1;, +				Class<?> varargType = paramTypes[varargIndex];, +				if (varargType.isArray()) {, +					Object varargArray = arguments[varargIndex];, +					if (varargArray instanceof Object[] && !varargType.isInstance(varargArray)) {, +						Object[] newArguments = new Object[arguments.length];, +						System.arraycopy(arguments, 0, newArguments, 0, varargIndex);, +						Class<?> targetElementType = varargType.getComponentType();, +						int varargLength = Array.getLength(varargArray);, +						Object newVarargArray = Array.newInstance(targetElementType, varargLength);, +						System.arraycopy(varargArray, 0, newVarargArray, 0, varargLength);, +						newArguments[varargIndex] = newVarargArray;, +						return newArguments;, +					}, +				}, +			}, +		}, +		return arguments;, +	}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +					Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);, +					retVal = methodProxy.invoke(target, argsToUse);, +++ b/spring-aop/src/main/java/org/springframework/aop/ProxyMethodInvocation.java, + * Copyright 2002-2015 the original author or authors., +	MethodInvocation invocableClone(Object... arguments);, +	void setArguments(Object... arguments);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/AopProxyUtils.java, +import java.lang.reflect.Array;, +import java.lang.reflect.Method;, +import org.springframework.util.ObjectUtils;, +]