[+++ /dev/null, +++ /dev/null, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, + * A service interface for type conversion. This is the entry point into the convert system., + * <p>, + * Call {@link #executeConversion(Object, TypeDescriptor)} to perform a thread-safe type conversion using, + * this system., +	 * @param targetType context about the target type to convert to, +	 * @param targetType context about the target type to convert to, +	 * @return the converted object, an instance of {@link TypeDescriptor#getType()}</code>, or <code>null</code> if a null source, +	 * @throws ConverterNotFoundException if no suitable conversion executor could be found to convert the, +	public Object executeConversion(Object source, TypeDescriptor targetType);, +++ /dev/null, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, + * A service interface for type conversion. This is the entry point into the convert system., + * <p>, + * Call {@link #executeConversion(Object, TypeDescriptor)} to perform a thread-safe type conversion using, + * this system., +	 * @param targetType context about the target type to convert to, +	 * @param targetType context about the target type to convert to, +	 * @return the converted object, an instance of {@link TypeDescriptor#getType()}</code>, or <code>null</code> if a null source, +	 * @throws ConverterNotFoundException if no suitable conversion executor could be found to convert the, +	public Object executeConversion(Object source, TypeDescriptor targetType);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConverterNotFoundException.java, +/*, + * Copyright 2004-2009 the original author or authors., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + *      http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.core.convert;, +, +/**, + * Thrown when a conversion executor could not be found in a conversion service., + * , + * @author Keith Donald, + */, +public class ConverterNotFoundException extends ConversionException {, +, +	private Class<?> sourceType;, +, +	private TypeDescriptor targetType;, +, +	/**, +	 * Creates a new conversion executor not found exception., +	 * @param sourceType the source type requested to convert from, +	 * @param targetType the target type requested to convert to, +	 * @param message a descriptive message, +	 */, +	public ConverterNotFoundException(Class<?> sourceType, TypeDescriptor targetType, String message) {, +		super(message);, +		this.sourceType = sourceType;, +		this.targetType = targetType;, +	}, +, +	/**, +	 * Returns the source type that was requested to convert from., +	 */, +	public Class<?> getSourceType() {, +		return sourceType;, +	}, +, +	/**, +	 * Returns the target type that was requested to convert to., +	 */, +	public TypeDescriptor getTargetType() {, +		return targetType;, +	}, +}, +++ /dev/null, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, + * A service interface for type conversion. This is the entry point into the convert system., + * <p>, + * Call {@link #executeConversion(Object, TypeDescriptor)} to perform a thread-safe type conversion using, + * this system., +	 * @param targetType context about the target type to convert to, +	 * @param targetType context about the target type to convert to, +	 * @return the converted object, an instance of {@link TypeDescriptor#getType()}</code>, or <code>null</code> if a null source, +	 * @throws ConverterNotFoundException if no suitable conversion executor could be found to convert the, +	public Object executeConversion(Object source, TypeDescriptor targetType);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConverterNotFoundException.java, +/*, + * Copyright 2004-2009 the original author or authors., + * , + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + * , + *      http://www.apache.org/licenses/LICENSE-2.0, + * , + * Unless required by applicable law or agreed to in writing, software]