[+++ b/spring-context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, + * Copyright 2002-2013 the original author or authors., +	@Test, +	public void testRegisterDefaultValueViaFormatter() {, +		registerDefaultValue(Date.class, new Date());, +	}, +, +	private <T> void registerDefaultValue(Class<T> clazz, final T defaultValue) {, +		formattingService.addFormatterForFieldType(clazz, new Formatter<T>() {, +			@Override, +			public T parse(String text, Locale locale) throws ParseException {, +				return defaultValue;, +			}, +			@Override, +			public String print(T t, Locale locale) {, +				return defaultValue.toString();, +			}, +			@Override, +			public String toString() {, +				return defaultValue.toString();, +			}, +		});, +	}, +, +++ b/spring-context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, + * Copyright 2002-2013 the original author or authors., +	@Test, +	public void testRegisterDefaultValueViaFormatter() {, +		registerDefaultValue(Date.class, new Date());, +	}, +, +	private <T> void registerDefaultValue(Class<T> clazz, final T defaultValue) {, +		formattingService.addFormatterForFieldType(clazz, new Formatter<T>() {, +			@Override, +			public T parse(String text, Locale locale) throws ParseException {, +				return defaultValue;, +			}, +			@Override, +			public String print(T t, Locale locale) {, +				return defaultValue.toString();, +			}, +			@Override, +			public String toString() {, +				return defaultValue.toString();, +			}, +		});, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	private static final Class<?>[] CACHED_COMMON_TYPES = {, +			boolean.class, Boolean.class, byte.class, Byte.class, char.class, Character.class,, +			double.class, Double.class, int.class, Integer.class, long.class, Long.class,, +			float.class, Float.class, short.class, Short.class, String.class, Object.class};, +		return (annotations != null ? annotations : EMPTY_ANNOTATION_ARRAY);, +	 * @param type the class (may be {@code null} to indicate {@code Object.class}), +	 * @return the corresponding type descriptor, +		if (type == null) {, +			type = Object.class;, +		}, +		Assert.notNull(collectionType, "collectionType must not be null");, +		ResolvableType element = (elementTypeDescriptor != null ? elementTypeDescriptor.resolvableType : null);, +		ResolvableType key = (keyTypeDescriptor != null ? keyTypeDescriptor.resolvableType : null);, +		ResolvableType value = (valueTypeDescriptor != null ? valueTypeDescriptor.resolvableType : null);, +	 * <p>If the provided object is {@code null}, returns {@code null}, else calls, +	 * {@link #valueOf(Class)} to build a TypeDescriptor from the object's class., +++ b/spring-context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, + * Copyright 2002-2013 the original author or authors., +	@Test, +	public void testRegisterDefaultValueViaFormatter() {, +		registerDefaultValue(Date.class, new Date());, +	}, +, +	private <T> void registerDefaultValue(Class<T> clazz, final T defaultValue) {, +		formattingService.addFormatterForFieldType(clazz, new Formatter<T>() {, +			@Override, +			public T parse(String text, Locale locale) throws ParseException {, +				return defaultValue;, +			}, +			@Override, +			public String print(T t, Locale locale) {, +				return defaultValue.toString();, +			}, +			@Override, +			public String toString() {, +				return defaultValue.toString();, +			}, +		});, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	private static final Class<?>[] CACHED_COMMON_TYPES = {, +			boolean.class, Boolean.class, byte.class, Byte.class, char.class, Character.class,, +			double.class, Double.class, int.class, Integer.class, long.class, Long.class,, +			float.class, Float.class, short.class, Short.class, String.class, Object.class};, +		return (annotations != null ? annotations : EMPTY_ANNOTATION_ARRAY);, +	 * @param type the class (may be {@code null} to indicate {@code Object.class}), +	 * @return the corresponding type descriptor, +		if (type == null) {, +			type = Object.class;, +		}]