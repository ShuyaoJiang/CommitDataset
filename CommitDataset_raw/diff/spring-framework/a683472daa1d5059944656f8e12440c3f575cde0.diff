[+++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpResponse.java, + * Copyright 2002-2018 the original author or authors., + *, +	public int getRawStatusCode() {, +		return this.status.value();, +	}, +, +	@Override, +++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpResponse.java, + * Copyright 2002-2018 the original author or authors., + *, +	public int getRawStatusCode() {, +		return this.status.value();, +	}, +, +	@Override, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponse.java, + * Copyright 2002-2018 the original author or authors., +	 * Return the HTTP status code of the response., +	 * @return the HTTP status as an HttpStatus enum value, +	 * @throws IllegalArgumentException in case of an unknown HTTP status code, +	 * @see HttpStatus#valueOf(int), +	 * Return the HTTP status code (potentially non-standard and not, +	 * resolvable through the {@link HttpStatus} enum) as an integer., +	 * @return the HTTP status as an integer, +	 * @since 5.0.6, +	 * @see #getStatusCode(), +	 * @see HttpStatus#resolve(int), +	 */, +	int getRawStatusCode();, +, +	/**, +++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpResponse.java, + * Copyright 2002-2018 the original author or authors., + *, +	public int getRawStatusCode() {, +		return this.status.value();, +	}, +, +	@Override, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponse.java, + * Copyright 2002-2018 the original author or authors., +	 * Return the HTTP status code of the response., +	 * @return the HTTP status as an HttpStatus enum value, +	 * @throws IllegalArgumentException in case of an unknown HTTP status code, +	 * @see HttpStatus#valueOf(int), +	 * Return the HTTP status code (potentially non-standard and not, +	 * resolvable through the {@link HttpStatus} enum) as an integer., +	 * @return the HTTP status as an integer, +	 * @since 5.0.6, +	 * @see #getStatusCode(), +	 * @see HttpStatus#resolve(int), +	 */, +	int getRawStatusCode();, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponseDecorator.java, + * Copyright 2002-2018 the original author or authors., +	public int getRawStatusCode() {, +		return this.delegate.getRawStatusCode();, +	}, +, +	@Override, +++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpResponse.java, + * Copyright 2002-2018 the original author or authors., + *, +	public int getRawStatusCode() {, +		return this.status.value();, +	}, +, +	@Override, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponse.java, + * Copyright 2002-2018 the original author or authors., +	 * Return the HTTP status code of the response., +	 * @return the HTTP status as an HttpStatus enum value, +	 * @throws IllegalArgumentException in case of an unknown HTTP status code, +	 * @see HttpStatus#valueOf(int), +	 * Return the HTTP status code (potentially non-standard and not, +	 * resolvable through the {@link HttpStatus} enum) as an integer., +	 * @return the HTTP status as an integer, +	 * @since 5.0.6, +	 * @see #getStatusCode(), +	 * @see HttpStatus#resolve(int), +	 */, +	int getRawStatusCode();, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ClientHttpResponseDecorator.java, + * Copyright 2002-2018 the original author or authors., +	public int getRawStatusCode() {, +		return this.delegate.getRawStatusCode();, +	}, +, +	@Override, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpResponse.java, + * Copyright 2002-2018 the original author or authors., +		this.response.responseHeaders().entries().forEach(e -> headers.add(e.getKey(), e.getValue()));, +		return HttpStatus.valueOf(getRawStatusCode());, +	}, +]