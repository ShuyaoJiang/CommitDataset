[+++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSession.java, +	String getId();, +, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSession.java, +	String getId();, +, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionSupport.java, +	public void connectionClosed() {, +		this.state = State.CLOSED;, +		this.sockJsHandler.sessionClosed(this);, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSession.java, +	String getId();, +, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionSupport.java, +	public void connectionClosed() {, +		this.state = State.CLOSED;, +		this.sockJsHandler.sessionClosed(this);, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractServerSession.java, +, +	@Override, +	public void connectionClosed() {, +		logger.debug("Session closed");, +		super.close();, +		cancelHeartbeat();, +	}, +, +	@Override, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSession.java, +	String getId();, +, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionSupport.java, +	public void connectionClosed() {, +		this.state = State.CLOSED;, +		this.sockJsHandler.sessionClosed(this);, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractServerSession.java, +, +	@Override, +	public void connectionClosed() {, +		logger.debug("Session closed");, +		super.close();, +		cancelHeartbeat();, +	}, +, +	@Override, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractSockJsService.java, +	private String name = getClass().getSimpleName() + "@" + Integer.toHexString(hashCode());, +, +	public AbstractSockJsService() {, +	public AbstractSockJsService(TaskScheduler heartbeatScheduler) {, +	 * A unique name for the service mainly for logging purposes., +	public void setName(String name) {, +		this.name = name;, +	}, +, +	public String getName() {, +		return this.name;, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSession.java, +	String getId();, +, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionSupport.java, +	public void connectionClosed() {, +		this.state = State.CLOSED;, +		this.sockJsHandler.sessionClosed(this);, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractServerSession.java, +, +	@Override, +	public void connectionClosed() {, +		logger.debug("Session closed");, +		super.close();, +		cancelHeartbeat();, +	}, +, +	@Override, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractSockJsService.java, +	private String name = getClass().getSimpleName() + "@" + Integer.toHexString(hashCode());, +, +	public AbstractSockJsService() {, +	public AbstractSockJsService(TaskScheduler heartbeatScheduler) {, +	 * A unique name for the service mainly for logging purposes., +	public void setName(String name) {, +		this.name = name;, +	}, +, +	public String getName() {, +		return this.name;, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/SockJsService.java, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSession.java, +	String getId();, +, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionSupport.java, +	public void connectionClosed() {, +		this.state = State.CLOSED;]