[+++ b/org.springframework.context/src/main/java/org/springframework/ui/format/support/FormattingConversionServiceAdapter.java, +import org.springframework.core.convert.support.GenericConverter;, +		} else {, +	protected GenericConverter getConverter(Class sourceType, TypeDescriptor targetType) {, +		return super.getConverter(sourceType, targetType);, +	private static class FormattingConverter implements GenericConverter {, +		public Object convert(Object source, TypeDescriptor targetType) {, +				return this.formatter.parse((String) source, LocaleContextHolder.getLocale());, +			} catch (ParseException ex) {, +++ b/org.springframework.context/src/main/java/org/springframework/ui/format/support/FormattingConversionServiceAdapter.java, +import org.springframework.core.convert.support.GenericConverter;, +		} else {, +	protected GenericConverter getConverter(Class sourceType, TypeDescriptor targetType) {, +		return super.getConverter(sourceType, targetType);, +	private static class FormattingConverter implements GenericConverter {, +		public Object convert(Object source, TypeDescriptor targetType) {, +				return this.formatter.parse((String) source, LocaleContextHolder.getLocale());, +			} catch (ParseException ex) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionToCollectionGenericConverter.java, +		GenericConverter elementConverter = conversionService.getConverter(firstNotNullElement.getClass(),, +				TypeDescriptor.valueOf(targetElementType));, +++ b/org.springframework.context/src/main/java/org/springframework/ui/format/support/FormattingConversionServiceAdapter.java, +import org.springframework.core.convert.support.GenericConverter;, +		} else {, +	protected GenericConverter getConverter(Class sourceType, TypeDescriptor targetType) {, +		return super.getConverter(sourceType, targetType);, +	private static class FormattingConverter implements GenericConverter {, +		public Object convert(Object source, TypeDescriptor targetType) {, +				return this.formatter.parse((String) source, LocaleContextHolder.getLocale());, +			} catch (ParseException ex) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionToCollectionGenericConverter.java, +		GenericConverter elementConverter = conversionService.getConverter(firstNotNullElement.getClass(),, +				TypeDescriptor.valueOf(targetElementType));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +		return getConverter(sourceClass, targetType) != null || this.parent != null, +		GenericConverter converter = getConverter(sourceType, targetType);, +	protected GenericConverter getConverter(Class sourceType, TypeDescriptor targetType) {, +	private void addGenericConverter(Class sourceType, Class targetType, GenericConverter converter) {, +	private Map<Class, GenericConverter> getConvertersForSource(Class sourceType) {, +	private GenericConverter getConverter(Map<Class, GenericConverter> converters, TypeDescriptor targetType) {, +		Class targetClass = targetType.getObjectType();, +		if (targetClass.isInterface()) {, +			classQueue.addFirst(targetClass);, +			classQueue.addFirst(targetClass);, +++ b/org.springframework.context/src/main/java/org/springframework/ui/format/support/FormattingConversionServiceAdapter.java, +import org.springframework.core.convert.support.GenericConverter;, +		} else {, +	protected GenericConverter getConverter(Class sourceType, TypeDescriptor targetType) {, +		return super.getConverter(sourceType, targetType);, +	private static class FormattingConverter implements GenericConverter {, +		public Object convert(Object source, TypeDescriptor targetType) {, +				return this.formatter.parse((String) source, LocaleContextHolder.getLocale());, +			} catch (ParseException ex) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionToCollectionGenericConverter.java, +		GenericConverter elementConverter = conversionService.getConverter(firstNotNullElement.getClass(),, +				TypeDescriptor.valueOf(targetElementType));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +		return getConverter(sourceClass, targetType) != null || this.parent != null, +		GenericConverter converter = getConverter(sourceType, targetType);, +	protected GenericConverter getConverter(Class sourceType, TypeDescriptor targetType) {, +	private void addGenericConverter(Class sourceType, Class targetType, GenericConverter converter) {, +	private Map<Class, GenericConverter> getConvertersForSource(Class sourceType) {, +	private GenericConverter getConverter(Map<Class, GenericConverter> converters, TypeDescriptor targetType) {, +		Class targetClass = targetType.getObjectType();, +		if (targetClass.isInterface()) {, +			classQueue.addFirst(targetClass);, +			classQueue.addFirst(targetClass);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConverter.java, +public interface GenericConverter {]