[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, + * Copyright 2002-2018 the original author or authors., +			"Property or field ''{0}'' cannot be found on object of type ''{1}'' - maybe not public or not valid?"),, +			"Property or field ''{0}'' cannot be set on object of type ''{1}'' - maybe not public or not writable?"),, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, + * Copyright 2002-2018 the original author or authors., +			"Property or field ''{0}'' cannot be found on object of type ''{1}'' - maybe not public or not valid?"),, +			"Property or field ''{0}'' cannot be set on object of type ''{1}'' - maybe not public or not writable?"),, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/DataBindingPropertyAccessor.java, + * <p>A property can be referenced through a public getter method (when being read), + * <p>This accessor is explicitly designed for user-declared properties and does not, + * resolve technical properties on {@code java.lang.Object} or {@code java.lang.Class}., + * For unrestricted resolution, choose {@link ReflectivePropertyAccessor} instead., +	protected boolean isCandidateForProperty(Method method, Class<?> targetClass) {, +		Class<?> clazz = method.getDeclaringClass();, +		return (clazz != Object.class && clazz != Class.class && !ClassLoader.class.isAssignableFrom(targetClass));, +	 * Create a new data-binding property accessor for read-only operations., +	 * Create a new data-binding property accessor for read-write operations., +++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, + * Copyright 2002-2018 the original author or authors., +			"Property or field ''{0}'' cannot be found on object of type ''{1}'' - maybe not public or not valid?"),, +			"Property or field ''{0}'' cannot be set on object of type ''{1}'' - maybe not public or not writable?"),, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/DataBindingPropertyAccessor.java, + * <p>A property can be referenced through a public getter method (when being read), + * <p>This accessor is explicitly designed for user-declared properties and does not, + * resolve technical properties on {@code java.lang.Object} or {@code java.lang.Class}., + * For unrestricted resolution, choose {@link ReflectivePropertyAccessor} instead., +	protected boolean isCandidateForProperty(Method method, Class<?> targetClass) {, +		Class<?> clazz = method.getDeclaringClass();, +		return (clazz != Object.class && clazz != Class.class && !ClassLoader.class.isAssignableFrom(targetClass));, +	 * Create a new data-binding property accessor for read-only operations., +	 * Create a new data-binding property accessor for read-write operations., +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java, + * <p>A property can be referenced through a public getter method (when being read), +				if (isCandidateForProperty(method, clazz) && method.getName().equals(prefix + methodSuffix) &&, +	 * @param targetClass the concrete target class that is being introspected, +	protected boolean isCandidateForProperty(Method method, Class<?> targetClass) {, +		Class<?> clazz = (target instanceof Class ? (Class<?>) target : target.getClass());, +		if (clazz.isArray()) {, +		PropertyCacheKey cacheKey = new PropertyCacheKey(clazz, name, target instanceof Class);, +				method = findGetterForProperty(name, clazz, target);, +			if (method != null) {, +				field = findField(name, clazz, target instanceof Class);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, + * Copyright 2002-2018 the original author or authors., +			"Property or field ''{0}'' cannot be found on object of type ''{1}'' - maybe not public or not valid?"),, +			"Property or field ''{0}'' cannot be set on object of type ''{1}'' - maybe not public or not writable?"),, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/DataBindingPropertyAccessor.java, + * <p>A property can be referenced through a public getter method (when being read), + * <p>This accessor is explicitly designed for user-declared properties and does not, + * resolve technical properties on {@code java.lang.Object} or {@code java.lang.Class}., + * For unrestricted resolution, choose {@link ReflectivePropertyAccessor} instead., +	protected boolean isCandidateForProperty(Method method, Class<?> targetClass) {, +		Class<?> clazz = method.getDeclaringClass();, +		return (clazz != Object.class && clazz != Class.class && !ClassLoader.class.isAssignableFrom(targetClass));, +	 * Create a new data-binding property accessor for read-only operations., +	 * Create a new data-binding property accessor for read-write operations., +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java, + * <p>A property can be referenced through a public getter method (when being read), +				if (isCandidateForProperty(method, clazz) && method.getName().equals(prefix + methodSuffix) &&, +	 * @param targetClass the concrete target class that is being introspected, +	protected boolean isCandidateForProperty(Method method, Class<?> targetClass) {, +		Class<?> clazz = (target instanceof Class ? (Class<?>) target : target.getClass());, +		if (clazz.isArray()) {, +		PropertyCacheKey cacheKey = new PropertyCacheKey(clazz, name, target instanceof Class);, +				method = findGetterForProperty(name, clazz, target);, +			if (method != null) {, +				field = findField(name, clazz, target instanceof Class);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/SimpleEvaluationContext.java, +import org.springframework.core.convert.ConversionService;, + * <p>In many cases, the full extent of the SpEL language is not required and, + * should be meaningfully restricted. Examples include but are not limited to, + * data binding expressions, property-based filters, and others. To that effect,, + * {@code SimpleEvaluationContext} is tailored to support only a subset of the, + * SpEL language syntax, e.g. excluding references to Java types, constructors,, + * and bean references., + * of support you need to deal with properties and methods in SpEL expressions:, + * <li>Custom {@code PropertyAccessor} only (no reflection)</li>, + * <li>Data binding properties for read-only access</li>, + * <li>Data binding properties for read and write</li>, + * <p>Conveniently, {@link SimpleEvaluationContext#forReadOnlyDataBinding()}, + * enables read access to properties via {@link DataBindingPropertyAccessor};, + * same for {@link SimpleEvaluationContext#forReadWriteDataBinding()} when, + * write access is needed as well. Alternatively, configure custom accessors, + * via {@link SimpleEvaluationContext#forPropertyAccessors}., + *, + * <p>Note that {@code SimpleEvaluationContext} cannot be configured with, + * a default root object. Instead it is meant to be created once and used, + * repeatedly through {@code getValue} calls on a pre-compiled, + * {@link org.springframework.expression.Expression} with both an, + * {@code EvaluationContext} and a root object as arguments, + *, + * <p>For more flexibility, consider {@link StandardEvaluationContext} instead., + * @author Juergen Hoeller, + * @see #forReadOnlyDataBinding(), + * @see #forReadWriteDataBinding(), + * @see StandardTypeConverter, +		this.propertyAccessors = accessors;, +		this.typeConverter = (converter != null ? converter : new StandardTypeConverter());, +		return Collections.emptyList();]