[+++ /dev/null, +++ /dev/null, +++ b/spring-test/src/test/java/org/springframework/test/context/transaction/TransactionalTestExecutionListenerTests.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.test.context.transaction;, +, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +, +import org.junit.Test;, +import org.mockito.Mockito;, +import org.springframework.test.context.TestContext;, +import org.springframework.transaction.PlatformTransactionManager;, +import org.springframework.transaction.TransactionDefinition;, +import org.springframework.transaction.annotation.Transactional;, +import org.springframework.transaction.support.SimpleTransactionStatus;, +, +import static org.junit.Assert.*;, +import static org.mockito.Mockito.*;, +, +/**, + * Unit tests for {@link TransactionalTestExecutionListener}., + *, + * @author Sam Brannen, + * @since 4.0, + */, +public class TransactionalTestExecutionListenerTests {, +, +	private final PlatformTransactionManager tm = mock(PlatformTransactionManager.class);, +, +	private final TransactionalTestExecutionListener listener = new TransactionalTestExecutionListener() {, +, +		protected PlatformTransactionManager getTransactionManager(TestContext testContext, String qualifier) {, +			return tm;, +		}, +	};, +, +	private final TestContext testContext = mock(TestContext.class);, +, +, +	private void assertBeforeTestMethod(Class<? extends Invocable> clazz) throws Exception {, +		assertBeforeTestMethodWithTransactionalTestMethod(clazz);, +		assertBeforeTestMethodWithNonTransactionalTestMethod(clazz);, +	}, +, +	private void assertBeforeTestMethodWithTransactionalTestMethod(Class<? extends Invocable> clazz) throws Exception {, +		Mockito.<Class<?>> when(testContext.getTestClass()).thenReturn(clazz);, +		Invocable instance = clazz.newInstance();, +		when(testContext.getTestInstance()).thenReturn(instance);, +		when(testContext.getTestMethod()).thenReturn(clazz.getDeclaredMethod("transactionalTest"));, +, +		assertFalse(instance.invoked);, +		listener.beforeTestMethod(testContext);, +		assertTrue(instance.invoked);, +	}, +, +	private void assertBeforeTestMethodWithNonTransactionalTestMethod(Class<? extends Invocable> clazz), +			throws Exception {, +		Mockito.<Class<?>> when(testContext.getTestClass()).thenReturn(clazz);, +		Invocable instance = clazz.newInstance();, +		when(testContext.getTestInstance()).thenReturn(instance);, +		when(testContext.getTestMethod()).thenReturn(clazz.getDeclaredMethod("nonTransactionalTest"));, +, +		assertFalse(instance.invoked);, +		listener.beforeTestMethod(testContext);, +		assertFalse(instance.invoked);, +	}, +, +	private void assertAfterTestMethod(Class<? extends Invocable> clazz) throws Exception {, +		assertAfterTestMethodWithTransactionalTestMethod(clazz);, +		assertAfterTestMethodWithNonTransactionalTestMethod(clazz);, +	}, +, +	private void assertAfterTestMethodWithTransactionalTestMethod(Class<? extends Invocable> clazz) throws Exception {, +		Mockito.<Class<?>> when(testContext.getTestClass()).thenReturn(clazz);, +		Invocable instance = clazz.newInstance();, +		when(testContext.getTestInstance()).thenReturn(instance);, +		when(testContext.getTestMethod()).thenReturn(clazz.getDeclaredMethod("transactionalTest"));, +, +		when(tm.getTransaction(Mockito.any(TransactionDefinition.class))).thenReturn(new SimpleTransactionStatus());, +, +		assertFalse(instance.invoked);, +		listener.beforeTestMethod(testContext);, +		listener.afterTestMethod(testContext);, +		assertTrue(instance.invoked);]