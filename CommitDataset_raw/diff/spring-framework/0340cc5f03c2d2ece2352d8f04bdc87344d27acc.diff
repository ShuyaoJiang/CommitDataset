[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/MessageBrokerConfigurer.java, +	private String userDestinationPrefix;, +, +	/**, +	 * Configure the prefix used to identify user destinations. User destinations, +	 * provide the ability for a user to subscribe to queue names unique to their, +	 * session as well as for others to send messages to those unique,, +	 * user-specific queues., +	 * <p>, +	 * For example when a user attempts to subscribe to "/user/queue/position-updates",, +	 * the destination may be translated to "/queue/position-updatesi9oqdfzo" yielding a, +	 * unique queue name that does not collide with any other user attempting to do the same., +	 * Subsequently when messages are sent to "/user/{username}/queue/position-updates",, +	 * the destination is translated to "/queue/position-updatesi9oqdfzo"., +	 * <p>, +	 * The default prefix used to identify such destinations is "/user/"., +	 */, +	public MessageBrokerConfigurer setUserDestinationPrefix(String destinationPrefix) {, +		this.userDestinationPrefix = destinationPrefix;, +		return this;, +	}, +, +, +, +	protected String getUserDestinationPrefix() {, +		return this.userDestinationPrefix;, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/MessageBrokerConfigurer.java, +	private String userDestinationPrefix;, +, +	/**, +	 * Configure the prefix used to identify user destinations. User destinations, +	 * provide the ability for a user to subscribe to queue names unique to their, +	 * session as well as for others to send messages to those unique,, +	 * user-specific queues., +	 * <p>, +	 * For example when a user attempts to subscribe to "/user/queue/position-updates",, +	 * the destination may be translated to "/queue/position-updatesi9oqdfzo" yielding a, +	 * unique queue name that does not collide with any other user attempting to do the same., +	 * Subsequently when messages are sent to "/user/{username}/queue/position-updates",, +	 * the destination is translated to "/queue/position-updatesi9oqdfzo"., +	 * <p>, +	 * The default prefix used to identify such destinations is "/user/"., +	 */, +	public MessageBrokerConfigurer setUserDestinationPrefix(String destinationPrefix) {, +		this.userDestinationPrefix = destinationPrefix;, +		return this;, +	}, +, +, +, +	protected String getUserDestinationPrefix() {, +		return this.userDestinationPrefix;, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/ServletStompEndpointRegistry.java, +import org.springframework.messaging.simp.handler.UserSessionRegistry;, +			UserSessionRegistry userSessionRegistry, TaskScheduler defaultSockJsTaskScheduler) {, +		Assert.notNull(userSessionRegistry);, +		this.stompHandler.setUserSessionRegistry(userSessionRegistry);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/MessageBrokerConfigurer.java, +	private String userDestinationPrefix;, +, +	/**, +	 * Configure the prefix used to identify user destinations. User destinations, +	 * provide the ability for a user to subscribe to queue names unique to their, +	 * session as well as for others to send messages to those unique,, +	 * user-specific queues., +	 * <p>, +	 * For example when a user attempts to subscribe to "/user/queue/position-updates",, +	 * the destination may be translated to "/queue/position-updatesi9oqdfzo" yielding a, +	 * unique queue name that does not collide with any other user attempting to do the same., +	 * Subsequently when messages are sent to "/user/{username}/queue/position-updates",, +	 * the destination is translated to "/queue/position-updatesi9oqdfzo"., +	 * <p>, +	 * The default prefix used to identify such destinations is "/user/"., +	 */, +	public MessageBrokerConfigurer setUserDestinationPrefix(String destinationPrefix) {, +		this.userDestinationPrefix = destinationPrefix;, +		return this;, +	}, +, +, +, +	protected String getUserDestinationPrefix() {, +		return this.userDestinationPrefix;, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/ServletStompEndpointRegistry.java, +import org.springframework.messaging.simp.handler.UserSessionRegistry;, +			UserSessionRegistry userSessionRegistry, TaskScheduler defaultSockJsTaskScheduler) {, +		Assert.notNull(userSessionRegistry);, +		this.stompHandler.setUserSessionRegistry(userSessionRegistry);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/WebSocketMessageBrokerConfigurationSupport.java, +, +		ServletStompEndpointRegistry registry = new ServletStompEndpointRegistry(, +				subProtocolWebSocketHandler(), userSessionRegistry(), brokerDefaultSockJsTaskScheduler());, +	public UserSessionRegistry userSessionRegistry() {, +		return new DefaultUserSessionRegistry();, +	 * {@link SockJsServiceRegistration#setTaskScheduler(org.springframework.scheduling.TaskScheduler)}, i.e., +, +]