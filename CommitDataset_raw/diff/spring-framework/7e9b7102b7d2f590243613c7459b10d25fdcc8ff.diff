[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/handler/AbstractHandlerMapping.java, +	private CorsConfigurationSource corsConfigurationSource;, +		this.corsConfigurationSource = new UrlBasedCorsConfigurationSource(this.patternParser);, +	 * Set the "global" CORS configurations based on URL patterns. By default the, +	 * first matching URL pattern is combined with handler-level CORS configuration if any., +	 * @see #setCorsConfigurationSource(CorsConfigurationSource), +		Assert.notNull(corsConfigurations, "corsConfigurations must not be null");, +		this.corsConfigurationSource = new UrlBasedCorsConfigurationSource(this.patternParser);, +		((UrlBasedCorsConfigurationSource) this.corsConfigurationSource).setCorsConfigurations(corsConfigurations);, +	}, +, +	/**, +	 * Set the "global" CORS configuration source. By default the first matching URL, +	 * pattern is combined with the CORS configuration for the handler, if any., +	 * @since 5.1, +	 * @see #setCorsConfigurations(Map), +	 */, +	public void setCorsConfigurationSource(CorsConfigurationSource corsConfigurationSource) {, +		Assert.notNull(corsConfigurationSource, "corsConfigurationSource must not be null");, +		this.corsConfigurationSource = corsConfigurationSource;, +				CorsConfiguration configA = this.corsConfigurationSource.getCorsConfiguration(exchange);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/handler/AbstractHandlerMapping.java, +	private CorsConfigurationSource corsConfigurationSource;, +		this.corsConfigurationSource = new UrlBasedCorsConfigurationSource(this.patternParser);, +	 * Set the "global" CORS configurations based on URL patterns. By default the, +	 * first matching URL pattern is combined with handler-level CORS configuration if any., +	 * @see #setCorsConfigurationSource(CorsConfigurationSource), +		Assert.notNull(corsConfigurations, "corsConfigurations must not be null");, +		this.corsConfigurationSource = new UrlBasedCorsConfigurationSource(this.patternParser);, +		((UrlBasedCorsConfigurationSource) this.corsConfigurationSource).setCorsConfigurations(corsConfigurations);, +	}, +, +	/**, +	 * Set the "global" CORS configuration source. By default the first matching URL, +	 * pattern is combined with the CORS configuration for the handler, if any., +	 * @since 5.1, +	 * @see #setCorsConfigurations(Map), +	 */, +	public void setCorsConfigurationSource(CorsConfigurationSource corsConfigurationSource) {, +		Assert.notNull(corsConfigurationSource, "corsConfigurationSource must not be null");, +		this.corsConfigurationSource = corsConfigurationSource;, +				CorsConfiguration configA = this.corsConfigurationSource.getCorsConfiguration(exchange);, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/handler/CorsUrlHandlerMappingTests.java, + * Copyright 2002-2018 the original author or authors., +	@Test, +	public void actualRequestWithCorsConfigurationSource() throws Exception {, +		this.handlerMapping.setCorsConfigurationSource(new CustomCorsConfigurationSource());, +, +		String origin = "http://domain2.com";, +		ServerWebExchange exchange = createExchange(HttpMethod.GET, "/welcome.html", origin);, +		Object actual = this.handlerMapping.getHandler(exchange).block();, +, +		assertNotNull(actual);, +		assertSame(this.welcomeController, actual);, +		assertEquals("http://domain2.com", exchange.getResponse().getHeaders(), +				.getFirst(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN));, +		assertEquals("true", exchange.getResponse().getHeaders(), +				.getFirst(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS));, +	}, +, +	@Test, +	public void preFlightRequestWithCorsConfigurationSource() throws Exception {, +		this.handlerMapping.setCorsConfigurationSource(new CustomCorsConfigurationSource());, +, +		String origin = "http://domain2.com";, +		ServerWebExchange exchange = createExchange(HttpMethod.OPTIONS, "/welcome.html", origin);, +		Object actual = this.handlerMapping.getHandler(exchange).block();, +, +		assertNotNull(actual);, +		assertNotSame(this.welcomeController, actual);, +		assertEquals("http://domain2.com", exchange.getResponse().getHeaders(), +				.getFirst(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN));, +		assertEquals("true", exchange.getResponse().getHeaders(), +				.getFirst(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS));, +	}, +, +	public class CustomCorsConfigurationSource implements CorsConfigurationSource {, +, +		@Override, +		public CorsConfiguration getCorsConfiguration(ServerWebExchange exchange) {, +			CorsConfiguration config = new CorsConfiguration();, +			config.addAllowedOrigin("*");, +			config.setAllowCredentials(true);, +			return config;, +		}, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/handler/AbstractHandlerMapping.java, +	private CorsConfigurationSource corsConfigurationSource;, +		this.corsConfigurationSource = new UrlBasedCorsConfigurationSource(this.patternParser);, +	 * Set the "global" CORS configurations based on URL patterns. By default the, +	 * first matching URL pattern is combined with handler-level CORS configuration if any., +	 * @see #setCorsConfigurationSource(CorsConfigurationSource), +		Assert.notNull(corsConfigurations, "corsConfigurations must not be null");, +		this.corsConfigurationSource = new UrlBasedCorsConfigurationSource(this.patternParser);, +		((UrlBasedCorsConfigurationSource) this.corsConfigurationSource).setCorsConfigurations(corsConfigurations);, +	}, +, +	/**, +	 * Set the "global" CORS configuration source. By default the first matching URL]