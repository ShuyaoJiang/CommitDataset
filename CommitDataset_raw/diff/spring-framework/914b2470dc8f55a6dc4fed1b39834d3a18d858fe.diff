[+++ b/spring-context/src/main/java/org/springframework/context/annotation/Scope.java, + * Copyright 2002-2018 the original author or authors., + * <p><b>NOTE:</b> {@code @Scope} annotations are only introspected on the, + * concrete bean class (for annotated components) or the factory method, + * (for {@code @Bean} methods). In contrast to XML bean definitions,, + * there is no notion of bean definition inheritance, and inheritance, + * hierarchies at the class level are irrelevant for metadata purposes., + *, +++ b/spring-context/src/main/java/org/springframework/context/annotation/Scope.java, + * Copyright 2002-2018 the original author or authors., + * <p><b>NOTE:</b> {@code @Scope} annotations are only introspected on the, + * concrete bean class (for annotated components) or the factory method, + * (for {@code @Bean} methods). In contrast to XML bean definitions,, + * there is no notion of bean definition inheritance, and inheritance, + * hierarchies at the class level are irrelevant for metadata purposes., + *, +++ b/spring-context/src/test/java/org/springframework/beans/factory/xml/XmlBeanFactoryTests.java, + * Copyright 2002-2018 the original author or authors., +, +		TestBean jenny1 = (TestBean) xbf.getBean("jennyChild");, +		assertEquals(1, jenny1.getFriends().size());, +		Object friend1 = jenny1.getFriends().iterator().next();, +		assertTrue(friend1 instanceof TestBean);, +, +		TestBean jenny2 = (TestBean) xbf.getBean("jennyChild");, +		assertEquals(1, jenny2.getFriends().size());, +		Object friend2 = jenny2.getFriends().iterator().next();, +		assertTrue(friend2 instanceof TestBean);, +, +		assertNotSame(jenny1, jenny2);, +		assertNotSame(friend1, friend2);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/Scope.java, + * Copyright 2002-2018 the original author or authors., + * <p><b>NOTE:</b> {@code @Scope} annotations are only introspected on the, + * concrete bean class (for annotated components) or the factory method, + * (for {@code @Bean} methods). In contrast to XML bean definitions,, + * there is no notion of bean definition inheritance, and inheritance, + * hierarchies at the class level are irrelevant for metadata purposes., + *, +++ b/spring-context/src/test/java/org/springframework/beans/factory/xml/XmlBeanFactoryTests.java, + * Copyright 2002-2018 the original author or authors., +, +		TestBean jenny1 = (TestBean) xbf.getBean("jennyChild");, +		assertEquals(1, jenny1.getFriends().size());, +		Object friend1 = jenny1.getFriends().iterator().next();, +		assertTrue(friend1 instanceof TestBean);, +, +		TestBean jenny2 = (TestBean) xbf.getBean("jennyChild");, +		assertEquals(1, jenny2.getFriends().size());, +		Object friend2 = jenny2.getFriends().iterator().next();, +		assertTrue(friend2 instanceof TestBean);, +, +		assertNotSame(jenny1, jenny2);, +		assertNotSame(friend1, friend2);, +++ b/src/docs/asciidoc/core/core-beans.adoc, +If such an annotation contains no _name_ `value` or for any other detected component, +(such as those discovered by custom filters), the default bean name generator returns, +the uncapitalized non-qualified class name. For example, if the following component, +classes were detected, the names would be `myMovieLister` and `movieFinderImpl`:, +which can be specified via the `@Scope` annotation. Simply provide the name of the, +scope within the annotation:, +[NOTE], +====, +`@Scope` annotations are only introspected on the concrete bean class (for annotated, +components) or the factory method (for `@Bean` methods). In contrast to XML bean, +definitions, there is no notion of bean definition inheritance, and inheritance, +hierarchies at the class level are irrelevant for metadata purposes., +====, +For details on web-specific scopes such as "request"/"session" in a Spring context,, +see <<beans-factory-scopes-other>>. Like the pre-built annotations for those scopes,, +you may also compose your own scoping annotations using Spring's meta-annotation, +approach: e.g. a custom annotation meta-annotated with `@Scope("prototype")`,, +possibly also declaring a custom scoped-proxy mode., +		<context:component-scan base-package="org.example" scope-resolver="org.example.MyScopeResolver"/>, +		<context:component-scan base-package="org.example" scoped-proxy="interfaces"/>]