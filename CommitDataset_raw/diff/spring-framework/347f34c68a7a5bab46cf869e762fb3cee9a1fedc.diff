[+++ b/org.springframework.aop/aop.iml, +++ b/org.springframework.aop/aop.iml, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, + * Copyright 2002-2008 the original author or authors., +	private Map<String, Integer> argumentBindings = null;, +		this.argumentBindings = new HashMap<String, Integer>();, +			this.argumentBindings.put(this.argumentNames[i], i);, +				Integer index = this.argumentBindings.get(this.returningName);, +				this.discoveredReturningType = this.aspectJAdviceMethod.getParameterTypes()[index];, +				this.discoveredReturningGenericType = this.aspectJAdviceMethod.getGenericParameterTypes()[index];, +				Integer index = this.argumentBindings.get(this.throwingName);, +				this.discoveredThrowingType = this.aspectJAdviceMethod.getParameterTypes()[index];, +				for (PointcutParameter parameter : parameterBindings) {, +					Integer index = this.argumentBindings.get(name);, +					adviceInvocationArgs[index] = parameter.getBinding();, +				Integer index = this.argumentBindings.get(this.returningName);, +				adviceInvocationArgs[index] = returnValue;, +				Integer index = this.argumentBindings.get(this.throwingName);, +				adviceInvocationArgs[index] = ex;, +++ b/org.springframework.aop/aop.iml, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, + * Copyright 2002-2008 the original author or authors., +	private Map<String, Integer> argumentBindings = null;, +		this.argumentBindings = new HashMap<String, Integer>();, +			this.argumentBindings.put(this.argumentNames[i], i);, +				Integer index = this.argumentBindings.get(this.returningName);, +				this.discoveredReturningType = this.aspectJAdviceMethod.getParameterTypes()[index];, +				this.discoveredReturningGenericType = this.aspectJAdviceMethod.getGenericParameterTypes()[index];, +				Integer index = this.argumentBindings.get(this.throwingName);, +				this.discoveredThrowingType = this.aspectJAdviceMethod.getParameterTypes()[index];, +				for (PointcutParameter parameter : parameterBindings) {, +					Integer index = this.argumentBindings.get(name);, +					adviceInvocationArgs[index] = parameter.getBinding();, +				Integer index = this.argumentBindings.get(this.returningName);, +				adviceInvocationArgs[index] = returnValue;, +				Integer index = this.argumentBindings.get(this.throwingName);, +				adviceInvocationArgs[index] = ex;, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscoverer.java, +			StringBuilder sb = new StringBuilder();, +++ b/org.springframework.aop/aop.iml, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, + * Copyright 2002-2008 the original author or authors., +	private Map<String, Integer> argumentBindings = null;, +		this.argumentBindings = new HashMap<String, Integer>();, +			this.argumentBindings.put(this.argumentNames[i], i);, +				Integer index = this.argumentBindings.get(this.returningName);, +				this.discoveredReturningType = this.aspectJAdviceMethod.getParameterTypes()[index];, +				this.discoveredReturningGenericType = this.aspectJAdviceMethod.getGenericParameterTypes()[index];, +				Integer index = this.argumentBindings.get(this.throwingName);, +				this.discoveredThrowingType = this.aspectJAdviceMethod.getParameterTypes()[index];, +				for (PointcutParameter parameter : parameterBindings) {, +					Integer index = this.argumentBindings.get(name);, +					adviceInvocationArgs[index] = parameter.getBinding();, +				Integer index = this.argumentBindings.get(this.returningName);, +				adviceInvocationArgs[index] = returnValue;, +				Integer index = this.argumentBindings.get(this.throwingName);, +				adviceInvocationArgs[index] = ex;, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscoverer.java, +			StringBuilder sb = new StringBuilder();, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java, +		StringBuilder sb = new StringBuilder();, +++ b/org.springframework.aop/aop.iml, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, + * Copyright 2002-2008 the original author or authors., +	private Map<String, Integer> argumentBindings = null;, +		this.argumentBindings = new HashMap<String, Integer>();, +			this.argumentBindings.put(this.argumentNames[i], i);, +				Integer index = this.argumentBindings.get(this.returningName);, +				this.discoveredReturningType = this.aspectJAdviceMethod.getParameterTypes()[index];, +				this.discoveredReturningGenericType = this.aspectJAdviceMethod.getGenericParameterTypes()[index];, +				Integer index = this.argumentBindings.get(this.throwingName);, +				this.discoveredThrowingType = this.aspectJAdviceMethod.getParameterTypes()[index];, +				for (PointcutParameter parameter : parameterBindings) {, +					Integer index = this.argumentBindings.get(name);, +					adviceInvocationArgs[index] = parameter.getBinding();, +				Integer index = this.argumentBindings.get(this.returningName);, +				adviceInvocationArgs[index] = returnValue;, +				Integer index = this.argumentBindings.get(this.throwingName);, +				adviceInvocationArgs[index] = ex;, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscoverer.java, +			StringBuilder sb = new StringBuilder();, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java, +		StringBuilder sb = new StringBuilder();, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/autoproxy/AspectJAwareAdvisorAutoProxyCreator.java, +			StringBuilder sb = new StringBuilder();, +++ b/org.springframework.aop/aop.iml, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, + * Copyright 2002-2008 the original author or authors., +	private Map<String, Integer> argumentBindings = null;, +		this.argumentBindings = new HashMap<String, Integer>();, +			this.argumentBindings.put(this.argumentNames[i], i);, +				Integer index = this.argumentBindings.get(this.returningName);, +				this.discoveredReturningType = this.aspectJAdviceMethod.getParameterTypes()[index];, +				this.discoveredReturningGenericType = this.aspectJAdviceMethod.getGenericParameterTypes()[index];, +				Integer index = this.argumentBindings.get(this.throwingName);, +				this.discoveredThrowingType = this.aspectJAdviceMethod.getParameterTypes()[index];, +				for (PointcutParameter parameter : parameterBindings) {, +					Integer index = this.argumentBindings.get(name);, +					adviceInvocationArgs[index] = parameter.getBinding();, +				Integer index = this.argumentBindings.get(this.returningName);]