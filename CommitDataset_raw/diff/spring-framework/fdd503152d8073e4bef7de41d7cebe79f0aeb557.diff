[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/VersionResourceResolver.java, + * Copyright 2002-2017 the original author or authors., +							return Mono.just(baseUrl);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/VersionResourceResolver.java, + * Copyright 2002-2017 the original author or authors., +							return Mono.just(baseUrl);, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/resource/VersionResourceResolverTests.java, + * Copyright 2002-2017 the original author or authors., +	@Test // SPR-15372, +	public void resolveUrlPathNoVersionStrategy() throws Exception {, +		given(this.chain.resolveUrlPath("/foo.css", this.locations)).willReturn(Mono.just("/foo.css"));, +		String resolved = this.resolver.resolveUrlPathInternal("/foo.css", this.locations, this.chain), +				.block(Duration.ofMillis(1000));, +		assertThat(resolved, is("/foo.css"));, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/VersionResourceResolver.java, + * Copyright 2002-2017 the original author or authors., +							return Mono.just(baseUrl);, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/resource/VersionResourceResolverTests.java, + * Copyright 2002-2017 the original author or authors., +	@Test // SPR-15372, +	public void resolveUrlPathNoVersionStrategy() throws Exception {, +		given(this.chain.resolveUrlPath("/foo.css", this.locations)).willReturn(Mono.just("/foo.css"));, +		String resolved = this.resolver.resolveUrlPathInternal("/foo.css", this.locations, this.chain), +				.block(Duration.ofMillis(1000));, +		assertThat(resolved, is("/foo.css"));, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/VersionResourceResolver.java, + * Copyright 2002-2017 the original author or authors., +				return baseUrl;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/VersionResourceResolver.java, + * Copyright 2002-2017 the original author or authors., +							return Mono.just(baseUrl);, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/resource/VersionResourceResolverTests.java, + * Copyright 2002-2017 the original author or authors., +	@Test // SPR-15372, +	public void resolveUrlPathNoVersionStrategy() throws Exception {, +		given(this.chain.resolveUrlPath("/foo.css", this.locations)).willReturn(Mono.just("/foo.css"));, +		String resolved = this.resolver.resolveUrlPathInternal("/foo.css", this.locations, this.chain), +				.block(Duration.ofMillis(1000));, +		assertThat(resolved, is("/foo.css"));, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/VersionResourceResolver.java, + * Copyright 2002-2017 the original author or authors., +				return baseUrl;, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/VersionResourceResolverTests.java, + * Copyright 2002-2017 the original author or authors., +	@Test // SPR-15372, +	public void resolveUrlPathNoVersionStrategy() throws Exception {, +		given(this.chain.resolveUrlPath("/foo.css", this.locations)).willReturn("/foo.css");, +		String resolved = this.resolver.resolveUrlPathInternal("/foo.css", this.locations, this.chain);, +		assertThat(resolved, is("/foo.css"));, +	}, +]