[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/AccessException.java, +/*, + * Copyright 2004-2008 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.expression;, +, +/**, + * An AccessException is thrown by an accessor if it has an unexpected problem., + * , + * @author Andy Clement, + */, +public class AccessException extends Exception {, +, +	/**, +	 * Create an AccessException with a specific message and cause., +	 * , +	 * @param message the message, +	 * @param cause the cause, +	 */, +	public AccessException(String message, Exception cause) {, +		super(message, cause);, +	}, +, +	/**, +	 * Create an AccessException with a specific message., +	 * , +	 * @param message the message, +	 */, +	public AccessException(String message) {, +		super(message);, +	}, +, +}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/AccessException.java, +/*, + * Copyright 2004-2008 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.expression;, +, +/**, + * An AccessException is thrown by an accessor if it has an unexpected problem., + * , + * @author Andy Clement, + */, +public class AccessException extends Exception {, +, +	/**, +	 * Create an AccessException with a specific message and cause., +	 * , +	 * @param message the message, +	 * @param cause the cause, +	 */, +	public AccessException(String message, Exception cause) {, +		super(message, cause);, +	}, +, +	/**, +	 * Create an AccessException with a specific message., +	 * , +	 * @param message the message, +	 */, +	public AccessException(String message) {, +		super(message);, +	}, +, +}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/CacheablePropertyAccessor.java, +package org.springframework.expression;, +, +// TODO (asc) Do we need a 'caching is allowed' option to be configurable at parse time?, +/**, + * A CacheablePropertyAccessor is an optimized PropertyAccessor where the two parts of accessing the, + * property are separated: (1) resolving the property and (2) retrieving its value.  In some cases there is , + * a large cost to discovering which property an expression refers to and once discovered it will , + * always resolve to the same property.  In these situations a CacheablePropertyAccessor enables the , + * resolution to be done once and a reusable object (an executor) returned that can be called over and ]