[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +	/**, +	 * Create an array of descriptors from an array of classes., +	 * @param types the input array of classes, +	 * @return an array of descriptors, +	 */, +	public static String[] toDescriptors(Class<?>[] types) {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +	/**, +	 * Create an array of descriptors from an array of classes., +	 * @param types the input array of classes, +	 * @return an array of descriptors, +	 */, +	public static String[] toDescriptors(Class<?>[] types) {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/ConstructorReference.java, +		generateCodeForArguments(mv, cf, constructor, arguments);	, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +	/**, +	 * Create an array of descriptors from an array of classes., +	 * @param types the input array of classes, +	 * @return an array of descriptors, +	 */, +	public static String[] toDescriptors(Class<?>[] types) {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/ConstructorReference.java, +		generateCodeForArguments(mv, cf, constructor, arguments);	, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/FunctionReference.java, +		generateCodeForArguments(mv, cf, method, this.children);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +	/**, +	 * Create an array of descriptors from an array of classes., +	 * @param types the input array of classes, +	 * @return an array of descriptors, +	 */, +	public static String[] toDescriptors(Class<?>[] types) {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/ConstructorReference.java, +		generateCodeForArguments(mv, cf, constructor, arguments);	, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/FunctionReference.java, +		generateCodeForArguments(mv, cf, method, this.children);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java, +		generateCodeForArguments(mv, cf, method, children);		, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +	/**, +	 * Create an array of descriptors from an array of classes., +	 * @param types the input array of classes, +	 * @return an array of descriptors, +	 */, +	public static String[] toDescriptors(Class<?>[] types) {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/ConstructorReference.java, +		generateCodeForArguments(mv, cf, constructor, arguments);	, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/FunctionReference.java, +		generateCodeForArguments(mv, cf, method, this.children);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java, +		generateCodeForArguments(mv, cf, method, children);		, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/SpelNodeImpl.java, +import java.lang.reflect.Constructor;, +import java.lang.reflect.Member;, +import java.lang.reflect.Method;, +, +	, +	/**, +	 * Generate code that handles building the argument values for the specified method. This method will take account, +	 * of whether the invoked method is a varargs method and if it is then the argument values will be appropriately, +	 * packaged into an array., +	 * @param mv the method visitor where code should be generated, +	 * @param cf the current codeflow, +	 * @param member the method or constructor for which arguments are being setup, +	 * @param arguments the expression nodes for the expression supplied argument values, +	 */, +	protected static void generateCodeForArguments(MethodVisitor mv, CodeFlow cf, Member member, SpelNodeImpl[] arguments) {, +		String[] paramDescriptors = null;, +		boolean isVarargs = false;, +		if (member instanceof Constructor) {, +			Constructor<?> ctor = (Constructor<?>)member;, +			paramDescriptors = CodeFlow.toDescriptors(ctor.getParameterTypes());, +			isVarargs = ctor.isVarArgs();, +		}, +		else { // Method, +			Method method = (Method)member;, +			paramDescriptors = CodeFlow.toDescriptors(method.getParameterTypes());, +			isVarargs = method.isVarArgs();, +		}, +		if (isVarargs) {, +			// The final parameter may or may not need packaging into an array, or nothing may, +			// have been passed to satisfy the varargs and so something needs to be built., +			int p = 0; // Current supplied argument being processed, +			int childcount = arguments.length;, +						, +			// Fulfill all the parameter requirements except the last one, +			for (p = 0; p < paramDescriptors.length-1;p++) {, +				generateCodeForArgument(mv, cf, arguments[p], paramDescriptors[p]);, +			}, +			, +			SpelNodeImpl lastchild = (childcount == 0 ? null : arguments[childcount-1]);			, +			String arraytype = paramDescriptors[paramDescriptors.length-1];, +			// Determine if the final passed argument is already suitably packaged in array, +			// form to be passed to the method, +			if (lastchild != null && lastchild.getExitDescriptor().equals(arraytype)) {, +				generateCodeForArgument(mv, cf, lastchild, paramDescriptors[p]);, +			}, +			else {]