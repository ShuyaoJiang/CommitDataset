[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java, + * Copyright 2002-2017 the original author or authors., +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +import org.springframework.ui.ModelMap;, +import org.springframework.util.CollectionUtils;, +import org.springframework.web.servlet.mvc.support.RedirectAttributes;, +import org.springframework.web.servlet.support.RequestContextUtils;, +			else if (returnStatus / 100 == 3) {, +				String location = outputHeaders.getFirst("location");, +				if (location != null) {, +					saveFlashAttributes(mavContainer, webRequest, location);, +				}, +			}, +	private void saveFlashAttributes(ModelAndViewContainer mav, NativeWebRequest request, String location) {, +		mav.setRedirectModelScenario(true);, +		ModelMap model = mav.getModel();, +		if (model instanceof RedirectAttributes) {, +			Map<String, ?> flashAttributes = ((RedirectAttributes) model).getFlashAttributes();, +			if (!CollectionUtils.isEmpty(flashAttributes)) {, +				HttpServletRequest req = request.getNativeRequest(HttpServletRequest.class);, +				HttpServletResponse res = request.getNativeRequest(HttpServletResponse.class);, +				RequestContextUtils.getOutputFlashMap(req).putAll(flashAttributes);, +				RequestContextUtils.saveOutputFlashMap(location, req, res);, +			}, +		}, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java, + * Copyright 2002-2017 the original author or authors., +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +import org.springframework.ui.ModelMap;, +import org.springframework.util.CollectionUtils;, +import org.springframework.web.servlet.mvc.support.RedirectAttributes;, +import org.springframework.web.servlet.support.RequestContextUtils;, +			else if (returnStatus / 100 == 3) {, +				String location = outputHeaders.getFirst("location");, +				if (location != null) {, +					saveFlashAttributes(mavContainer, webRequest, location);, +				}, +			}, +	private void saveFlashAttributes(ModelAndViewContainer mav, NativeWebRequest request, String location) {, +		mav.setRedirectModelScenario(true);, +		ModelMap model = mav.getModel();, +		if (model instanceof RedirectAttributes) {, +			Map<String, ?> flashAttributes = ((RedirectAttributes) model).getFlashAttributes();, +			if (!CollectionUtils.isEmpty(flashAttributes)) {, +				HttpServletRequest req = request.getNativeRequest(HttpServletRequest.class);, +				HttpServletResponse res = request.getNativeRequest(HttpServletResponse.class);, +				RequestContextUtils.getOutputFlashMap(req).putAll(flashAttributes);, +				RequestContextUtils.saveOutputFlashMap(location, req, res);, +			}, +		}, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/RequestContextUtils.java, + * Copyright 2002-2017 the original author or authors., +import javax.servlet.http.HttpServletResponse;, +import org.springframework.util.Assert;, +import org.springframework.util.CollectionUtils;, +import org.springframework.web.util.UriComponents;, +import org.springframework.web.util.UriComponentsBuilder;, +	 * Return read-only "input" flash attributes from request before redirect., +	 * @param request current request, +	 * Return "output" FlashMap to save attributes for request after redirect., +	 * @param request current request, +	 * @return a {@link FlashMap} instance, never {@code null} within a, +	 * {@code DispatcherServlet}-handled request, +	 * Return the {@code FlashMapManager} instance to save flash attributes., +	 * <p>As of 5.0 the convenience method {@link #saveOutputFlashMap} may be, +	 * used to save the "output" FlashMap., +	 * @return a {@link FlashMapManager} instance, never {@code null} within a, +	 * {@code DispatcherServlet}-handled request, +	/**, +	 * Convenience method that retrieves the {@link #getOutputFlashMap "output", +	 * FlashMap}, updates it with the path and query params of the target URL,, +	 * and then saves it using the {@link #getFlashMapManager FlashMapManager}., +	 *, +	 * @param location the target URL for the redirect, +	 * @param request the current request, +	 * @param response the current response, +	 * @since 5.0, +	 */, +	public static void saveOutputFlashMap(String location, HttpServletRequest request,, +			HttpServletResponse response) {, +, +		FlashMap flashMap = getOutputFlashMap(request);, +		if (CollectionUtils.isEmpty(flashMap)) {, +			return;, +		}, +, +		UriComponents uriComponents = UriComponentsBuilder.fromUriString(location).build();, +		flashMap.setTargetRequestPath(uriComponents.getPath());, +		flashMap.addTargetRequestParams(uriComponents.getQueryParams());, +, +		FlashMapManager manager = getFlashMapManager(request);, +		Assert.state(manager != null, "No FlashMapManager. Is this a DispatcherServlet handled request?");, +		manager.saveOutputFlashMap(flashMap, request, response);, +	}]