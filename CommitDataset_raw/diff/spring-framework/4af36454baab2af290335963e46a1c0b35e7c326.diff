[+++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/PortletWrappingController.java, + * Copyright 2002-2010 the original author or authors., +import javax.portlet.EventPortlet;, +import javax.portlet.EventRequest;, +import javax.portlet.EventResponse;, +import javax.portlet.PortletSession;, +import javax.portlet.ResourceRequest;, +import javax.portlet.ResourceResponse;, +import javax.portlet.ResourceServingPortlet;, +import javax.portlet.UnavailableException;, +import org.springframework.web.portlet.util.PortletUtils;, +		implements ResourceAwareController, EventAwareController,, +		BeanNameAware, InitializingBean, DisposableBean, PortletContextAware, PortletConfigAware {, +	public ModelAndView handleResourceRequest(, +			ResourceRequest request, ResourceResponse response) throws Exception {, +, +		if (!(this.portletInstance instanceof ResourceServingPortlet)) {, +			throw new UnavailableException("Cannot handle resource request - target portlet [" +, +					this.portletInstance.getClass() + " does not implement ResourceServingPortlet");, +		}, +		ResourceServingPortlet resourcePortlet = (ResourceServingPortlet) this.portletInstance;, +, +		// Delegate to PortletContentGenerator for checking and preparing., +		checkAndPrepare(request, response);, +, +		// Execute in synchronized block if required., +		if (isSynchronizeOnSession()) {, +			PortletSession session = request.getPortletSession(false);, +			if (session != null) {, +				Object mutex = PortletUtils.getSessionMutex(session);, +				synchronized (mutex) {, +					resourcePortlet.serveResource(request, response);, +					return null;, +				}, +			}, +		}, +, +		resourcePortlet.serveResource(request, response);, +		return null;, +	}, +, +	public void handleEventRequest(, +			EventRequest request, EventResponse response) throws Exception {, +, +		if (!(this.portletInstance instanceof EventPortlet)) {, +			logger.debug("Ignoring event request for non-event target portlet: " + this.portletInstance.getClass());, +			return;, +		}, +		EventPortlet eventPortlet = (EventPortlet) this.portletInstance;, +, +		// Delegate to PortletContentGenerator for checking and preparing., +		check(request, response);, +, +		// Execute in synchronized block if required., +		if (isSynchronizeOnSession()) {, +			PortletSession session = request.getPortletSession(false);, +			if (session != null) {, +				Object mutex = PortletUtils.getSessionMutex(session);, +				synchronized (mutex) {, +					eventPortlet.processEvent(request, response);, +					return;, +				}, +			}, +		}, +, +		eventPortlet.processEvent(request, response);, +	}, +]