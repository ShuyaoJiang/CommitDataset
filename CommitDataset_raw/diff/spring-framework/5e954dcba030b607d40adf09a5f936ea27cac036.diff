[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +import org.springframework.core.ParameterizedTypeReference;, +import org.springframework.http.client.reactive.ClientHttpResponse;, +import org.springframework.web.reactive.function.BodyExtractor;, +		public <T> EntityExchangeResult<T> decode(BodyExtractor<Mono<T>, ? super ClientHttpResponse> extractor) {, +			T body = this.response.body(extractor).block(this.timeout);, +		public <T> EntityExchangeResult<List<T>> decodeToList(BodyExtractor<Flux<T>, ? super ClientHttpResponse> extractor) {, +			Flux<T> flux = this.response.body(extractor);, +		public <T> FluxExchangeResult<T> decodeToFlux(BodyExtractor<Flux<T>, ? super ClientHttpResponse> extractor) {, +			Flux<T> body = this.response.body(extractor);, +			return new DefaultBodySpec<>(this.result.decode(toMono(bodyType)));, +		public <B> BodySpec<B, ?> expectBody(ParameterizedTypeReference<B> bodyType) {, +			return new DefaultBodySpec<>(this.result.decode(toMono(bodyType)));, +			return new DefaultListBodySpec<>(this.result.decodeToList(toFlux(elementType)));, +		public <E> ListBodySpec<E> expectBodyList(ParameterizedTypeReference<E> elementType) {, +			return new DefaultListBodySpec<>(this.result.decodeToList(toFlux(elementType)));, +			return this.result.decodeToFlux(toFlux(elementType));, +		public <T> FluxExchangeResult<T> returnResult(ParameterizedTypeReference<T> elementType) {, +			return this.result.decodeToFlux(toFlux(elementType));, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +import org.springframework.core.ParameterizedTypeReference;, +import org.springframework.http.client.reactive.ClientHttpResponse;, +import org.springframework.web.reactive.function.BodyExtractor;, +		public <T> EntityExchangeResult<T> decode(BodyExtractor<Mono<T>, ? super ClientHttpResponse> extractor) {, +			T body = this.response.body(extractor).block(this.timeout);, +		public <T> EntityExchangeResult<List<T>> decodeToList(BodyExtractor<Flux<T>, ? super ClientHttpResponse> extractor) {, +			Flux<T> flux = this.response.body(extractor);, +		public <T> FluxExchangeResult<T> decodeToFlux(BodyExtractor<Flux<T>, ? super ClientHttpResponse> extractor) {, +			Flux<T> body = this.response.body(extractor);, +			return new DefaultBodySpec<>(this.result.decode(toMono(bodyType)));, +		public <B> BodySpec<B, ?> expectBody(ParameterizedTypeReference<B> bodyType) {, +			return new DefaultBodySpec<>(this.result.decode(toMono(bodyType)));, +			return new DefaultListBodySpec<>(this.result.decodeToList(toFlux(elementType)));, +		public <E> ListBodySpec<E> expectBodyList(ParameterizedTypeReference<E> elementType) {, +			return new DefaultListBodySpec<>(this.result.decodeToList(toFlux(elementType)));, +			return this.result.decodeToFlux(toFlux(elementType));, +		public <T> FluxExchangeResult<T> returnResult(ParameterizedTypeReference<T> elementType) {, +			return this.result.decodeToFlux(toFlux(elementType));, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/WebTestClient.java, +import org.springframework.core.ParameterizedTypeReference;, +		<B> BodySpec<B, ?> expectBody(ParameterizedTypeReference<B> bodyType);, +		<E> ListBodySpec<E> expectBodyList(ParameterizedTypeReference<E> elementType);, +		<T> FluxExchangeResult<T> returnResult(ParameterizedTypeReference<T> elementType);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +import org.springframework.core.ParameterizedTypeReference;, +import org.springframework.http.client.reactive.ClientHttpResponse;, +import org.springframework.web.reactive.function.BodyExtractor;, +		public <T> EntityExchangeResult<T> decode(BodyExtractor<Mono<T>, ? super ClientHttpResponse> extractor) {, +			T body = this.response.body(extractor).block(this.timeout);, +		public <T> EntityExchangeResult<List<T>> decodeToList(BodyExtractor<Flux<T>, ? super ClientHttpResponse> extractor) {, +			Flux<T> flux = this.response.body(extractor);, +		public <T> FluxExchangeResult<T> decodeToFlux(BodyExtractor<Flux<T>, ? super ClientHttpResponse> extractor) {, +			Flux<T> body = this.response.body(extractor);, +			return new DefaultBodySpec<>(this.result.decode(toMono(bodyType)));, +		public <B> BodySpec<B, ?> expectBody(ParameterizedTypeReference<B> bodyType) {, +			return new DefaultBodySpec<>(this.result.decode(toMono(bodyType)));, +			return new DefaultListBodySpec<>(this.result.decodeToList(toFlux(elementType)));, +		public <E> ListBodySpec<E> expectBodyList(ParameterizedTypeReference<E> elementType) {, +			return new DefaultListBodySpec<>(this.result.decodeToList(toFlux(elementType)));, +			return this.result.decodeToFlux(toFlux(elementType));, +		public <T> FluxExchangeResult<T> returnResult(ParameterizedTypeReference<T> elementType) {, +			return this.result.decodeToFlux(toFlux(elementType));, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/WebTestClient.java, +import org.springframework.core.ParameterizedTypeReference;, +		<B> BodySpec<B, ?> expectBody(ParameterizedTypeReference<B> bodyType);, +		<E> ListBodySpec<E> expectBodyList(ParameterizedTypeReference<E> elementType);, +		<T> FluxExchangeResult<T> returnResult(ParameterizedTypeReference<T> elementType);, +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/ResponseEntityTests.java, +import org.springframework.core.ParameterizedTypeReference;, +import static org.junit.Assert.*;, +				.expectBody(new ParameterizedTypeReference<Map<String, Person>>() {}).isEqualTo(map);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +import org.springframework.core.ParameterizedTypeReference;, +import org.springframework.http.client.reactive.ClientHttpResponse;, +import org.springframework.web.reactive.function.BodyExtractor;, +		public <T> EntityExchangeResult<T> decode(BodyExtractor<Mono<T>, ? super ClientHttpResponse> extractor) {, +			T body = this.response.body(extractor).block(this.timeout);, +		public <T> EntityExchangeResult<List<T>> decodeToList(BodyExtractor<Flux<T>, ? super ClientHttpResponse> extractor) {, +			Flux<T> flux = this.response.body(extractor);, +		public <T> FluxExchangeResult<T> decodeToFlux(BodyExtractor<Flux<T>, ? super ClientHttpResponse> extractor) {, +			Flux<T> body = this.response.body(extractor);, +			return new DefaultBodySpec<>(this.result.decode(toMono(bodyType)));, +		public <B> BodySpec<B, ?> expectBody(ParameterizedTypeReference<B> bodyType) {, +			return new DefaultBodySpec<>(this.result.decode(toMono(bodyType)));, +			return new DefaultListBodySpec<>(this.result.decodeToList(toFlux(elementType)));, +		public <E> ListBodySpec<E> expectBodyList(ParameterizedTypeReference<E> elementType) {, +			return new DefaultListBodySpec<>(this.result.decodeToList(toFlux(elementType)));, +			return this.result.decodeToFlux(toFlux(elementType));, +		public <T> FluxExchangeResult<T> returnResult(ParameterizedTypeReference<T> elementType) {, +			return this.result.decodeToFlux(toFlux(elementType));, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/WebTestClient.java, +import org.springframework.core.ParameterizedTypeReference;, +		<B> BodySpec<B, ?> expectBody(ParameterizedTypeReference<B> bodyType);, +		<E> ListBodySpec<E> expectBodyList(ParameterizedTypeReference<E> elementType);, +		<T> FluxExchangeResult<T> returnResult(ParameterizedTypeReference<T> elementType);, +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/samples/ResponseEntityTests.java, +import org.springframework.core.ParameterizedTypeReference;, +import static org.junit.Assert.*;, +				.expectBody(new ParameterizedTypeReference<Map<String, Person>>() {}).isEqualTo(map);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java]