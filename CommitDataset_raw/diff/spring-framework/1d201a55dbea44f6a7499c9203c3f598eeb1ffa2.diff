[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultPathContainer.java, +			String valueToMatch = StringUtils.uriDecode(input, charset);, +			return new DefaultPathSegment(input, valueToMatch, EMPTY_MAP);, +		else {, +			String valueToMatch = StringUtils.uriDecode(input.substring(0, index), charset);, +			String pathParameterContent = input.substring(index);, +			MultiValueMap<String, String> parameters = parseParams(pathParameterContent, charset);, +			return new DefaultPathSegment(input, valueToMatch, parameters);, +		}, +		private final String valueToMatch;, +		private final char[] valueToMatchAsChars;, +		DefaultPathSegment(String value, String valueToMatch, MultiValueMap<String, String> params) {, +			this.valueToMatch = valueToMatch;, +			this.valueToMatchAsChars = valueToMatch.toCharArray();, +		public String valueToMatch() {, +			return this.valueToMatch;, +		public char[] valueToMatchAsChars() {, +			return this.valueToMatchAsChars;, +			return this.value.equals(((DefaultPathSegment) other).value);, +			return this.value.hashCode();, +			return "[value='" + this.value + "', parameters=" + this.parameters + "']"; }, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultPathContainer.java, +			String valueToMatch = StringUtils.uriDecode(input, charset);, +			return new DefaultPathSegment(input, valueToMatch, EMPTY_MAP);, +		else {, +			String valueToMatch = StringUtils.uriDecode(input.substring(0, index), charset);, +			String pathParameterContent = input.substring(index);, +			MultiValueMap<String, String> parameters = parseParams(pathParameterContent, charset);, +			return new DefaultPathSegment(input, valueToMatch, parameters);, +		}, +		private final String valueToMatch;, +		private final char[] valueToMatchAsChars;, +		DefaultPathSegment(String value, String valueToMatch, MultiValueMap<String, String> params) {, +			this.valueToMatch = valueToMatch;, +			this.valueToMatchAsChars = valueToMatch.toCharArray();, +		public String valueToMatch() {, +			return this.valueToMatch;, +		public char[] valueToMatchAsChars() {, +			return this.valueToMatchAsChars;, +			return this.value.equals(((DefaultPathSegment) other).value);, +			return this.value.hashCode();, +			return "[value='" + this.value + "', parameters=" + this.parameters + "']"; }, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultRequestPath.java, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultPathContainer.java, +			String valueToMatch = StringUtils.uriDecode(input, charset);, +			return new DefaultPathSegment(input, valueToMatch, EMPTY_MAP);, +		else {, +			String valueToMatch = StringUtils.uriDecode(input.substring(0, index), charset);, +			String pathParameterContent = input.substring(index);, +			MultiValueMap<String, String> parameters = parseParams(pathParameterContent, charset);, +			return new DefaultPathSegment(input, valueToMatch, parameters);, +		}, +		private final String valueToMatch;, +		private final char[] valueToMatchAsChars;, +		DefaultPathSegment(String value, String valueToMatch, MultiValueMap<String, String> params) {, +			this.valueToMatch = valueToMatch;, +			this.valueToMatchAsChars = valueToMatch.toCharArray();, +		public String valueToMatch() {, +			return this.valueToMatch;, +		public char[] valueToMatchAsChars() {, +			return this.valueToMatchAsChars;, +			return this.value.equals(((DefaultPathSegment) other).value);, +			return this.value.hashCode();, +			return "[value='" + this.value + "', parameters=" + this.parameters + "']"; }, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultRequestPath.java, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/PathContainer.java, +		 * Return the path segment value to use for pattern matching purposes., +		 * This may differ from {@link #value()} such as being decoded, without, +		 * path parameters, etc., +		String valueToMatch();, +		 * Variant of {@link #valueToMatch()} as a {@code char[]}., +		char[] valueToMatchAsChars();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultPathContainer.java, +			String valueToMatch = StringUtils.uriDecode(input, charset);, +			return new DefaultPathSegment(input, valueToMatch, EMPTY_MAP);, +		else {, +			String valueToMatch = StringUtils.uriDecode(input.substring(0, index), charset);, +			String pathParameterContent = input.substring(index);, +			MultiValueMap<String, String> parameters = parseParams(pathParameterContent, charset);, +			return new DefaultPathSegment(input, valueToMatch, parameters);, +		}, +		private final String valueToMatch;, +		private final char[] valueToMatchAsChars;, +		DefaultPathSegment(String value, String valueToMatch, MultiValueMap<String, String> params) {, +			this.valueToMatch = valueToMatch;, +			this.valueToMatchAsChars = valueToMatch.toCharArray();, +		public String valueToMatch() {, +			return this.valueToMatch;, +		public char[] valueToMatchAsChars() {, +			return this.valueToMatchAsChars;, +			return this.value.equals(((DefaultPathSegment) other).value);, +			return this.value.hashCode();, +			return "[value='" + this.value + "', parameters=" + this.parameters + "']"; }, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultRequestPath.java, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/PathContainer.java, +		 * Return the path segment value to use for pattern matching purposes., +		 * This may differ from {@link #value()} such as being decoded, without, +		 * path parameters, etc., +		String valueToMatch();, +		 * Variant of {@link #valueToMatch()} as a {@code char[]}.]