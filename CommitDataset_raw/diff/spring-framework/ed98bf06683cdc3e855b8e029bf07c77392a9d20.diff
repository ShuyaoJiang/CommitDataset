[+++ b/org.springframework.core/src/main/java/org/springframework/util/AntPatchStringMatcher.java, + * Package-protected helper class for {@link AntPathMatcher}. Tests whether or not a string matches against a pattern, + * using a regular expression., + * <p>The pattern may contain special characters: '*' means zero or more characters; '?' means one and only one, + * character; '{' and '}' indicate a URI template pattern., +	private static final String DEFAULT_VARIABLE_PATTERN = "(.*)";, +, +				int colonIdx = match.indexOf(':');, +				if (colonIdx == -1) {, +					patternBuilder.append(DEFAULT_VARIABLE_PATTERN);, +				else {, +					String variablePattern = match.substring(colonIdx + 1, match.length() - 1);, +					patternBuilder.append('(');, +					patternBuilder.append(variablePattern);, +					patternBuilder.append(')');, +					String variableName = match.substring(1, colonIdx);, +					variableNames.add(variableName);, +				}, +			}, +++ b/org.springframework.core/src/main/java/org/springframework/util/AntPatchStringMatcher.java, + * Package-protected helper class for {@link AntPathMatcher}. Tests whether or not a string matches against a pattern, + * using a regular expression., + * <p>The pattern may contain special characters: '*' means zero or more characters; '?' means one and only one, + * character; '{' and '}' indicate a URI template pattern., +	private static final String DEFAULT_VARIABLE_PATTERN = "(.*)";, +, +				int colonIdx = match.indexOf(':');, +				if (colonIdx == -1) {, +					patternBuilder.append(DEFAULT_VARIABLE_PATTERN);, +				else {, +					String variablePattern = match.substring(colonIdx + 1, match.length() - 1);, +					patternBuilder.append('(');, +					patternBuilder.append(variablePattern);, +					patternBuilder.append(')');, +					String variableName = match.substring(1, colonIdx);, +					variableNames.add(variableName);, +				}, +			}, +++ b/org.springframework.core/src/test/java/org/springframework/util/AntPathMatcherTests.java, +	public void extractUriTemplateVariablesCustomRegex() {, +		Map<String, String> result = pathMatcher, +				.extractUriTemplateVariables("{symbolicName:[\\w\\.]+}-{version:[\\w\\.]+}.jar",, +						"com.example-1.0.0.jar");, +		assertEquals("com.example", result.get("symbolicName"));, +		assertEquals("1.0.0", result.get("version"));, +, +		result = pathMatcher.extractUriTemplateVariables("{symbolicName:[\\w\\.]+}-sources-{version:[\\w\\.]+}.jar",, +				"com.example-sources-1.0.0.jar");, +		assertEquals("com.example", result.get("symbolicName"));, +		assertEquals("1.0.0", result.get("version"));, +	}, +, +	@Test]