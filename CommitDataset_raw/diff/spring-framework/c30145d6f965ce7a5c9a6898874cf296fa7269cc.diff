[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java, +import java.lang.reflect.Proxy;, +		if (executorToCheck == null || executorToCheck.hasProxyTarget() ||, +				!(executorToCheck.get() instanceof ReflectiveMethodExecutor)) {, +		Class<?> clazz = executor.getMethod().getDeclaringClass();, +		public boolean hasProxyTarget() {, +			return (this.target != null && Proxy.isProxyClass(this.target.getType()));, +		}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java, +import java.lang.reflect.Proxy;, +		if (executorToCheck == null || executorToCheck.hasProxyTarget() ||, +				!(executorToCheck.get() instanceof ReflectiveMethodExecutor)) {, +		Class<?> clazz = executor.getMethod().getDeclaringClass();, +		public boolean hasProxyTarget() {, +			return (this.target != null && Proxy.isProxyClass(this.target.getType()));, +		}, +, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java, +	}, +, +	@Test, +	public void testCompiledExpressionForProxy_SPR16191() {, +		SpelExpressionParser expressionParser =, +				new SpelExpressionParser(new SpelParserConfiguration(SpelCompilerMode.IMMEDIATE, null));, +		Expression expression = expressionParser.parseExpression("#target.process(#root)");, +, +		VarargsReceiver receiver = new VarargsReceiver();, +		VarargsInterface proxy = (VarargsInterface) Proxy.newProxyInstance(, +				getClass().getClassLoader(), new Class<?>[] {VarargsInterface.class},, +				(proxy1, method, args) -> method.invoke(receiver, args));, +, +		StandardEvaluationContext evaluationContext = new StandardEvaluationContext();, +		evaluationContext.setVariable("target", proxy);, +, +		String result = expression.getValue(evaluationContext, "foo", String.class);, +		result = expression.getValue(evaluationContext, "foo", String.class);, +		assertEquals("OK", result);]