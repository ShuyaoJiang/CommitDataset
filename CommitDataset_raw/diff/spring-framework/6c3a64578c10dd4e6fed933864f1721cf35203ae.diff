[+++ b/spring-web/src/main/java/org/springframework/http/HttpEntity.java, +++ b/spring-web/src/main/java/org/springframework/http/HttpEntity.java, +++ b/spring-web/src/main/java/org/springframework/http/client/MultipartBodyBuilder.java, +		PublisherPartBuilder<T, P> builder =, +				new PublisherPartBuilder<>(publisher, elementClass, partHeaders);, +	 * @param typeReference the type of elements contained in the publisher, +			ParameterizedTypeReference<T> typeReference) {, +		Assert.notNull(typeReference, "'typeReference' must not be null");, +		ResolvableType elementType1 = ResolvableType.forType(typeReference);, +		Assert.notNull(elementType1, "'typeReference' must not be null");, +		PublisherPartBuilder<T, P> builder =, +				new PublisherPartBuilder<>(publisher, typeReference, partHeaders);, +	private static class PublisherPartBuilder<S, P extends Publisher<S>>, +		private final ResolvableType resolvableType;, +		public PublisherPartBuilder(P body, Class<S> elementClass, HttpHeaders headers) {, +			this.resolvableType = ResolvableType.forClass(elementClass);, +		public PublisherPartBuilder(P body, ParameterizedTypeReference<S> typeReference,, +			this.resolvableType = ResolvableType.forType(typeReference);, +			P publisher = (P) this.body;, +			Assert.state(publisher != null, "'publisher' must not be null");, +			return new PublisherEntity<>(publisher, this.resolvableType, this.headers);, +		}, +	}, +, +, +	/**, +	 * Specific subtype of {@link HttpEntity} for containing {@link Publisher}s as body., +	 * Exposes the type contained in the publisher through {@link #getResolvableType()}., +	 * @param <T> The type contained in the publisher, +	 * @param <P> The publisher, +	 */, +	public static final class PublisherEntity<T, P extends Publisher<T>> extends HttpEntity<P> {, +, +		private final ResolvableType resolvableType;, +, +, +		PublisherEntity(P publisher, ResolvableType resolvableType,, +				@Nullable MultiValueMap<String, String> headers) {, +			super(publisher, headers);, +			Assert.notNull(publisher, "'publisher' must not be null");, +			Assert.notNull(resolvableType, "'resolvableType' must not be null");, +			this.resolvableType = resolvableType;, +		}, +, +		/**, +		 * Return the resolvable type for this entry., +		 */, +		public ResolvableType getResolvableType() {, +			return this.resolvableType;, +++ b/spring-web/src/main/java/org/springframework/http/HttpEntity.java, +++ b/spring-web/src/main/java/org/springframework/http/client/MultipartBodyBuilder.java, +		PublisherPartBuilder<T, P> builder =, +				new PublisherPartBuilder<>(publisher, elementClass, partHeaders);, +	 * @param typeReference the type of elements contained in the publisher, +			ParameterizedTypeReference<T> typeReference) {, +		Assert.notNull(typeReference, "'typeReference' must not be null");, +		ResolvableType elementType1 = ResolvableType.forType(typeReference);, +		Assert.notNull(elementType1, "'typeReference' must not be null");, +		PublisherPartBuilder<T, P> builder =, +				new PublisherPartBuilder<>(publisher, typeReference, partHeaders);, +	private static class PublisherPartBuilder<S, P extends Publisher<S>>, +		private final ResolvableType resolvableType;, +		public PublisherPartBuilder(P body, Class<S> elementClass, HttpHeaders headers) {, +			this.resolvableType = ResolvableType.forClass(elementClass);, +		public PublisherPartBuilder(P body, ParameterizedTypeReference<S> typeReference,, +			this.resolvableType = ResolvableType.forType(typeReference);, +			P publisher = (P) this.body;, +			Assert.state(publisher != null, "'publisher' must not be null");, +			return new PublisherEntity<>(publisher, this.resolvableType, this.headers);, +		}, +	}, +, +, +	/**, +	 * Specific subtype of {@link HttpEntity} for containing {@link Publisher}s as body., +	 * Exposes the type contained in the publisher through {@link #getResolvableType()}., +	 * @param <T> The type contained in the publisher, +	 * @param <P> The publisher, +	 */, +	public static final class PublisherEntity<T, P extends Publisher<T>> extends HttpEntity<P> {, +, +		private final ResolvableType resolvableType;, +, +, +		PublisherEntity(P publisher, ResolvableType resolvableType,, +				@Nullable MultiValueMap<String, String> headers) {, +			super(publisher, headers);, +			Assert.notNull(publisher, "'publisher' must not be null");, +			Assert.notNull(resolvableType, "'resolvableType' must not be null");, +			this.resolvableType = resolvableType;, +		}, +, +		/**, +		 * Return the resolvable type for this entry., +		 */, +		public ResolvableType getResolvableType() {, +			return this.resolvableType;, +++ b/spring-web/src/main/java/org/springframework/http/codec/multipart/MultipartHttpMessageWriter.java, +import org.springframework.http.client.MultipartBodyBuilder;, +		ResolvableType resolvableType = null;]