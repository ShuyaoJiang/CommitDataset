[+++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/handler/AbstractMapBasedHandlerMapping.java, + * Copyright 2002-2012 the original author or authors., +			List<PortletRequestMappingPredicate> filtered = new LinkedList<PortletRequestMappingPredicate>();, +			for (PortletRequestMappingPredicate predicate : predicateMap.keySet()) {, +					filtered.add(predicate);, +				}, +			}, +			if (filtered.isEmpty()) {, +				return null;, +			}, +			Collections.sort(filtered);, +			PortletRequestMappingPredicate predicate = filtered.get(0);, +++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/handler/AbstractMapBasedHandlerMapping.java, + * Copyright 2002-2012 the original author or authors., +			List<PortletRequestMappingPredicate> filtered = new LinkedList<PortletRequestMappingPredicate>();, +			for (PortletRequestMappingPredicate predicate : predicateMap.keySet()) {, +					filtered.add(predicate);, +				}, +			}, +			if (filtered.isEmpty()) {, +				return null;, +			}, +			Collections.sort(filtered);, +			PortletRequestMappingPredicate predicate = filtered.get(0);, +++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/DefaultAnnotationHandlerMapping.java, +		private final String[] params;, +, +		protected int compareParams(AbstractParameterMappingPredicate other) {, +			return new Integer(other.params.length).compareTo(this.params.length);, +		}, +, +		protected int compareParams(Object other) {, +			if (other instanceof AbstractParameterMappingPredicate) {, +				return compareParams((AbstractParameterMappingPredicate) other);, +			}, +			return 0;, +		}, +			return (other instanceof SpecialRequestTypePredicate ? -1 : compareParams(other));, +			return (other instanceof SpecialRequestTypePredicate ? 1 : compareParams(other));, +					return compareParams(otherAction);, +			return (other instanceof SpecialRequestTypePredicate ? compareParams(other) : -1);, +					return compareParams(otherRender);, +			return (other instanceof SpecialRequestTypePredicate ? compareParams(other) : -1);, +				boolean hasResourceId = !"".equals(this.resourceId);, +				boolean otherHasResourceId = !"".equals(((ResourceMappingPredicate) other).resourceId);, +				boolean hasEventName = !"".equals(this.eventName);, +				boolean otherHasEventName = !"".equals(((EventMappingPredicate) other).eventName);, +++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/handler/AbstractMapBasedHandlerMapping.java, + * Copyright 2002-2012 the original author or authors., +			List<PortletRequestMappingPredicate> filtered = new LinkedList<PortletRequestMappingPredicate>();, +			for (PortletRequestMappingPredicate predicate : predicateMap.keySet()) {, +					filtered.add(predicate);, +				}, +			}, +			if (filtered.isEmpty()) {, +				return null;, +			}, +			Collections.sort(filtered);, +			PortletRequestMappingPredicate predicate = filtered.get(0);, +++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/DefaultAnnotationHandlerMapping.java, +		private final String[] params;, +, +		protected int compareParams(AbstractParameterMappingPredicate other) {, +			return new Integer(other.params.length).compareTo(this.params.length);, +		}, +, +		protected int compareParams(Object other) {, +			if (other instanceof AbstractParameterMappingPredicate) {, +				return compareParams((AbstractParameterMappingPredicate) other);, +			}, +			return 0;, +		}, +			return (other instanceof SpecialRequestTypePredicate ? -1 : compareParams(other));, +			return (other instanceof SpecialRequestTypePredicate ? 1 : compareParams(other));, +					return compareParams(otherAction);, +			return (other instanceof SpecialRequestTypePredicate ? compareParams(other) : -1);, +					return compareParams(otherRender);, +			return (other instanceof SpecialRequestTypePredicate ? compareParams(other) : -1);, +				boolean hasResourceId = !"".equals(this.resourceId);, +				boolean otherHasResourceId = !"".equals(((ResourceMappingPredicate) other).resourceId);, +				boolean hasEventName = !"".equals(this.eventName);, +				boolean otherHasEventName = !"".equals(((EventMappingPredicate) other).eventName);, +++ b/spring-webmvc-portlet/src/test/java/org/springframework/web/portlet/mvc/annotation/Portlet20AnnotationControllerTests.java, + * Copyright 2002-2012 the original author or authors., +import javax.portlet.ResourceRequest;, +	@Test, +	public void testPredicatePriorityComparisonAcrossControllers() throws Exception {, +		DispatcherPortlet portlet = new DispatcherPortlet() {, +			protected ApplicationContext createPortletApplicationContext(ApplicationContext parent) throws BeansException {, +				StaticPortletApplicationContext wac = new StaticPortletApplicationContext();, +				// The order of handler registration is important to get, +				// the collection with [Render,Action,Render] predicates, +				wac.registerSingleton("firstController", FirstController.class);, +				wac.registerSingleton("secondController", SecondController.class);, +				wac.registerSingleton("handlerMapping", DefaultAnnotationHandlerMapping.class);, +				wac.registerSingleton("handlerAdapter", AnnotationMethodHandlerAdapter.class);, +				wac.setPortletContext(new MockPortletContext());, +				AnnotationConfigUtils.registerAnnotationConfigProcessors(wac);, +				wac.refresh();, +				return wac;]