[+++ b/spring-web/src/main/java/org/springframework/http/converter/BufferedImageHttpMessageConverter.java, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.StreamingHttpOutputMessage;, +	public void write(final BufferedImage image, final MediaType contentType,, +			final HttpOutputMessage outputMessage), +			throws IOException, HttpMessageNotWritableException {, +, +		if (outputMessage instanceof StreamingHttpOutputMessage) {, +			StreamingHttpOutputMessage streamingOutputMessage =, +					(StreamingHttpOutputMessage) outputMessage;, +			streamingOutputMessage.setBody(new StreamingHttpOutputMessage.Body() {, +				@Override, +				public void writeTo(OutputStream outputStream) throws IOException {, +					writeInternal(image, contentType, outputMessage.getHeaders(),, +							outputStream);, +				}, +			});, +, +		}, +		else {, +			writeInternal(image, contentType, outputMessage.getHeaders(),, +					outputMessage.getBody());, +		}, +	}, +, +	private void writeInternal(BufferedImage image, MediaType contentType,, +			HttpHeaders headers, OutputStream body), +		headers.setContentType(contentType);, +				imageOutputStream = createImageOutputStream(body);, +++ b/spring-web/src/main/java/org/springframework/http/converter/BufferedImageHttpMessageConverter.java, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.StreamingHttpOutputMessage;, +	public void write(final BufferedImage image, final MediaType contentType,, +			final HttpOutputMessage outputMessage), +			throws IOException, HttpMessageNotWritableException {, +, +		if (outputMessage instanceof StreamingHttpOutputMessage) {, +			StreamingHttpOutputMessage streamingOutputMessage =, +					(StreamingHttpOutputMessage) outputMessage;, +			streamingOutputMessage.setBody(new StreamingHttpOutputMessage.Body() {, +				@Override, +				public void writeTo(OutputStream outputStream) throws IOException {, +					writeInternal(image, contentType, outputMessage.getHeaders(),, +							outputStream);, +				}, +			});, +, +		}, +		else {, +			writeInternal(image, contentType, outputMessage.getHeaders(),, +					outputMessage.getBody());, +		}, +	}, +, +	private void writeInternal(BufferedImage image, MediaType contentType,, +			HttpHeaders headers, OutputStream body), +		headers.setContentType(contentType);, +				imageOutputStream = createImageOutputStream(body);, +++ b/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java, +import org.springframework.http.StreamingHttpOutputMessage;, +		final byte[] bytes = builder.toString().getBytes(charset.name());, +, +		if (outputMessage instanceof StreamingHttpOutputMessage) {, +			StreamingHttpOutputMessage streamingOutputMessage =, +					(StreamingHttpOutputMessage) outputMessage;, +			streamingOutputMessage.setBody(new StreamingHttpOutputMessage.Body() {, +				@Override, +				public void writeTo(OutputStream outputStream) throws IOException {, +					StreamUtils.copy(bytes, outputStream);, +				}, +			});, +		}, +		else {, +	}, +	private void writeMultipart(final MultiValueMap<String, Object> parts, HttpOutputMessage outputMessage) throws IOException {, +		final byte[] boundary = generateMultipartBoundary();, +		HttpHeaders headers = outputMessage.getHeaders();, +		headers.setContentType(contentType);, +		if (outputMessage instanceof StreamingHttpOutputMessage) {, +			StreamingHttpOutputMessage streamingOutputMessage =, +					(StreamingHttpOutputMessage) outputMessage;, +			streamingOutputMessage.setBody(new StreamingHttpOutputMessage.Body() {, +				@Override, +				public void writeTo(OutputStream outputStream) throws IOException {, +					writeParts(outputStream, parts, boundary);, +					writeEnd(outputStream, boundary);, +				}, +			});, +		}, +		else {, +	}, +++ b/spring-web/src/main/java/org/springframework/http/converter/BufferedImageHttpMessageConverter.java, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.StreamingHttpOutputMessage;, +	public void write(final BufferedImage image, final MediaType contentType,, +			final HttpOutputMessage outputMessage), +			throws IOException, HttpMessageNotWritableException {, +, +		if (outputMessage instanceof StreamingHttpOutputMessage) {, +			StreamingHttpOutputMessage streamingOutputMessage =]