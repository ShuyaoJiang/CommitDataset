[+++ b/spring-framework-reference/src/testing.xml, +    development. The POJOs that make up your application should be testable, +      JUnit 4.5, TestNG, etc. <emphasis>Note that the Spring TestContext, +      linkend="testcontext-support-classes-junit45"><classname>AbstractTransactionalJUnit4SpringContextTests</classname></link>,, +          linkend="testcontext-support-classes-junit45">JUnit 4.5</link> base, +      <para>Spring's JUnit 3.8 legacy support consists of the classes, +      4.5, TestNG 5.8, etc. The TestContext framework also places a great deal, +      framework provides explicit support for JUnit 3.8, JUnit 4.5, and TestNG, +      5.8 in the form of <literal>abstract</literal> support classes. For, +      JUnit 4.5, the framework also provides a custom, +            implementations which are configured by default:, +        <tip>, +        	<title>@Autowired ApplicationContext</title>, +			<para>, +				As an alternative to implementing the, +				<interfacename>ApplicationContextAware</interfacename> interface,, +				your test class can have its application context injected via the, +				<interfacename>@Autowired</interfacename> annotation on either a, +				field or setter method, for example:, +			</para>, +        <programlisting language="java">@RunWith(SpringJUnit4ClassRunner.class), +@ContextConfiguration, +public class MyTest {, +	<emphasis role="bold">@Autowired</emphasis>, +	private ApplicationContext applicationContext;, +, +    <lineannotation>// class body...</lineannotation>, +}</programlisting>, +        </tip>, +, +        consistency with the annotation support introduced in Spring 2.5, you, +        may choose either Spring's <interfacename>@Autowired</interfacename>, +        annotation or the <interfacename>@Resource</interfacename> annotation, +        from JSR 250. The semantics for both are consistent throughout the Spring, +        name</emphasis>. Alternatively, if your test class has access to its, +        <classname>ApplicationContext</classname>, you can perform an explicit, +        lookup using (for example) a call to, +        <methodname>applicationContext.getBean("titleDao")</methodname>. A, +        third option is to use <interfacename>@Autowired</interfacename>, +        in conjunction with <interfacename>@Qualifier</interfacename>., +        </para>, +        let's look at a JUnit 4.5 based implementation of the test class, +        JUnit 4.5. The same DI techniques can be used in conjunction with any, +        linkend="testcontext-support-classes-junit45"><classname>AbstractTransactionalJUnit4SpringContextTests</classname></link>,, +        <section id="testcontext-support-classes-junit45">, +          <title>JUnit 4.5 support classes</title>, +          package provides support classes for JUnit 4.5 based test, +              JUnit 4.5 environment.</para>, +          <title>Custom JUnit 4.5 Runner</title>, +          full integration with JUnit 4.5 via a custom runner. By annotating, +          developers can implement standard JUnit 4.5 unit and integration, +        linkend="testcontext-support-classes-junit45">JUnit 4.5</link> support, +      TestContext Framework</emphasis> in a JUnit 4.5 environment. Most test, +    <para>This section contains links to further resources about testing in general.</para>, +        <para><ulink url="http://www.junit.org/">JUnit</ulink>:, +        the Spring Framework's unit and integration test suite is written using, +        JUnit 3.8 and JUnit 4.5 as the testing framework.</para>, +        <para><ulink url="http://testng.org/">TestNG</ulink>:, +        a testing framework inspired by JUnit 3.8 with added support, +        <para><ulink url="http://www.mockobjects.com/">MockObjects.com</ulink>:, +        a website dedicated to mock objects, a technique for improving the design, +        of code within Test-Driven Development.</para>, +        <para><ulink url="http://en.wikipedia.org/wiki/Mock_Object">"Mock Objects"</ulink>:, +        article at Wikipedia.</para>, +        <para><ulink url="http://www.easymock.org/">EasyMock</ulink>:, +        the Spring Framework uses EasyMock extensively in its test suite.</para>, +        <para><ulink url="http://www.jmock.org/">JMock</ulink>:, +        a library that supports test-driven development of Java code, +        <para><ulink url="http://dbunit.sourceforge.net/">DbUnit</ulink>:, +        a JUnit extension (also usable with Ant and Maven) targeted for database-driven, +        projects that, among other things, puts your database into a known state, +        between test runs.</para>, +        <para><ulink url="http://grinder.sourceforge.net/">Grinder</ulink>:, +        a Java load testing framework.</para>, +]