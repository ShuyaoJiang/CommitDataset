[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/AbstractHandlerResultHandler.java, +import org.springframework.core.ReactiveAdapter;, +import org.springframework.web.reactive.HandlerResult;, +	 * Shortcut to get a ReactiveAdapter for the top-level return value type., +	 */, +	protected ReactiveAdapter getAdapter(HandlerResult result) {, +		Class<?> returnType = result.getReturnType().getRawClass();, +		return getAdapterRegistry().getAdapter(returnType, result.getReturnValue());, +	}, +, +	/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/AbstractHandlerResultHandler.java, +import org.springframework.core.ReactiveAdapter;, +import org.springframework.web.reactive.HandlerResult;, +	 * Shortcut to get a ReactiveAdapter for the top-level return value type., +	 */, +	protected ReactiveAdapter getAdapter(HandlerResult result) {, +		Class<?> returnType = result.getReturnType().getRawClass();, +		return getAdapterRegistry().getAdapter(returnType, result.getReturnValue());, +	}, +, +	/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java, +		ResolvableType elementType = (adapter != null ? bodyType.getGeneric(0) : bodyType);, +					flux = flux.onErrorResumeWith(ex -> Flux.error(getReadError(bodyParameter, ex)));, +					if (isBodyRequired || !adapter.supportsEmpty()) {, +					mono = mono.otherwise(ex -> Mono.error(getReadError(bodyParameter, ex)));, +					if (isBodyRequired || (adapter != null && !adapter.supportsEmpty())) {, +	private ServerWebInputException getReadError(MethodParameter parameter, Throwable ex) {, +	private ServerWebInputException getRequiredBodyError(MethodParameter parameter) {, +	private Object[] extractValidationHints(MethodParameter parameter) {, +	private void validate(Object target, Object[] validationHints, MethodParameter param,, +			BindingContext binding, ServerWebExchange exchange) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/AbstractHandlerResultHandler.java, +import org.springframework.core.ReactiveAdapter;, +import org.springframework.web.reactive.HandlerResult;, +	 * Shortcut to get a ReactiveAdapter for the top-level return value type., +	 */, +	protected ReactiveAdapter getAdapter(HandlerResult result) {, +		Class<?> returnType = result.getReturnType().getRawClass();, +		return getAdapterRegistry().getAdapter(returnType, result.getReturnValue());, +	}, +, +	/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java, +		ResolvableType elementType = (adapter != null ? bodyType.getGeneric(0) : bodyType);, +					flux = flux.onErrorResumeWith(ex -> Flux.error(getReadError(bodyParameter, ex)));, +					if (isBodyRequired || !adapter.supportsEmpty()) {, +					mono = mono.otherwise(ex -> Mono.error(getReadError(bodyParameter, ex)));, +					if (isBodyRequired || (adapter != null && !adapter.supportsEmpty())) {, +	private ServerWebInputException getReadError(MethodParameter parameter, Throwable ex) {, +	private ServerWebInputException getRequiredBodyError(MethodParameter parameter) {, +	private Object[] extractValidationHints(MethodParameter parameter) {, +	private void validate(Object target, Object[] validationHints, MethodParameter param,, +			BindingContext binding, ServerWebExchange exchange) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParameter);, +		Class<?> bodyClass = bodyType.resolve();, +		ReactiveAdapter adapter = getAdapterRegistry().getAdapter(bodyClass, body);, +			elementType = adapter.isNoValue() ? ResolvableType.forClass(Void.class) : bodyType.getGeneric(0);, +			elementType = (bodyClass == null && body != null ? ResolvableType.forInstance(body) : bodyType);, +									bodyType, elementType, bestMediaType, request, response, Collections.emptyMap()) :, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/AbstractHandlerResultHandler.java, +import org.springframework.core.ReactiveAdapter;, +import org.springframework.web.reactive.HandlerResult;, +	 * Shortcut to get a ReactiveAdapter for the top-level return value type., +	 */, +	protected ReactiveAdapter getAdapter(HandlerResult result) {, +		Class<?> returnType = result.getReturnType().getRawClass();, +		return getAdapterRegistry().getAdapter(returnType, result.getReturnValue());, +	}, +, +	/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java, +		ResolvableType elementType = (adapter != null ? bodyType.getGeneric(0) : bodyType);, +					flux = flux.onErrorResumeWith(ex -> Flux.error(getReadError(bodyParameter, ex)));, +					if (isBodyRequired || !adapter.supportsEmpty()) {, +					mono = mono.otherwise(ex -> Mono.error(getReadError(bodyParameter, ex)));, +					if (isBodyRequired || (adapter != null && !adapter.supportsEmpty())) {, +	private ServerWebInputException getReadError(MethodParameter parameter, Throwable ex) {, +	private ServerWebInputException getRequiredBodyError(MethodParameter parameter) {, +	private Object[] extractValidationHints(MethodParameter parameter) {, +	private void validate(Object target, Object[] validationHints, MethodParameter param,, +			BindingContext binding, ServerWebExchange exchange) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +		ResolvableType bodyType = ResolvableType.forMethodParameter(bodyParameter);, +		Class<?> bodyClass = bodyType.resolve();, +		ReactiveAdapter adapter = getAdapterRegistry().getAdapter(bodyClass, body);, +			elementType = adapter.isNoValue() ? ResolvableType.forClass(Void.class) : bodyType.getGeneric(0);, +			elementType = (bodyClass == null && body != null ? ResolvableType.forInstance(body) : bodyType);, +									bodyType, elementType, bestMediaType, request, response, Collections.emptyMap()) :, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/HttpEntityArgumentResolver.java, +	public Mono<Object> resolveArgument(MethodParameter parameter, BindingContext bindingContext,, +		Class<?> entityType = parameter.getParameterType();, +		return readBody(parameter.nested(), false, bindingContext, exchange), +				.map(body -> createEntity(body, entityType, exchange.getRequest())), +				.defaultIfEmpty(createEntity(null, entityType, exchange.getRequest()));, +	private Object createEntity(Object body, Class<?> entityType, ServerHttpRequest request) {, +		return RequestEntity.class.equals(entityType) ?, +				new RequestEntity<>(body, request.getHeaders(), request.getMethod(), request.getURI()) :]