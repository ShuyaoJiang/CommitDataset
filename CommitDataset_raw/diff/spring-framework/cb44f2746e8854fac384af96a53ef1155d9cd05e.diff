[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/resource/CssLinkResourceTransformer.java, +					if (!"css".equals(StringUtils.getFilenameExtension(filename)) ||, +							resource instanceof GzipResourceResolver.GzippedResource) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/resource/CssLinkResourceTransformer.java, +					if (!"css".equals(StringUtils.getFilenameExtension(filename)) ||, +							resource instanceof GzipResourceResolver.GzippedResource) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/resource/GzipResourceResolver.java, +	static final class GzippedResource extends AbstractResource implements HttpResource {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/resource/CssLinkResourceTransformer.java, +					if (!"css".equals(StringUtils.getFilenameExtension(filename)) ||, +							resource instanceof GzipResourceResolver.GzippedResource) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/resource/GzipResourceResolver.java, +	static final class GzippedResource extends AbstractResource implements HttpResource {, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/resource/CssLinkResourceTransformerTests.java, +import java.io.IOException;, +import java.nio.charset.StandardCharsets;, +import java.nio.file.Files;, +import java.nio.file.Path;, +import java.nio.file.Paths;, +import reactor.test.StepVerifier;, +		StepVerifier.create(this.transformerChain.transform(this.exchange, css).cast(TransformedResource.class)), +				.consumeNextWith(resource -> {, +					String result = new String(resource.getByteArray(), StandardCharsets.UTF_8);, +				}), +				.expectComplete().verify();, +		StepVerifier.create(this.transformerChain.transform(this.exchange, expected)), +				.consumeNextWith(resource -> {, +					assertSame(expected, resource);, +				}), +				.expectComplete().verify();, +		StepVerifier.create(transformerChain.transform(this.exchange, externalCss).cast(TransformedResource.class)), +				.consumeNextWith(resource -> {, +					String result = new String(resource.getByteArray(), StandardCharsets.UTF_8);, +				}).expectComplete().verify();, +		StepVerifier.create(this.transformerChain.transform(this.exchange, expected)), +				.expectNext(expected), +				.expectComplete().verify();, +	}, +, +	@Test, +	public void transformWithGzippedResource() throws Exception {, +		initExchange(HttpMethod.GET, "/static/main.css");, +		Resource original = new ClassPathResource("test/main.css", getClass());, +		createTempCopy("main.css", "main.css.gz");, +		GzipResourceResolver.GzippedResource expected = new GzipResourceResolver.GzippedResource(original);, +		StepVerifier.create(this.transformerChain.transform(this.exchange, expected)), +				.expectNext(expected), +				.expectComplete().verify();, +	}, +, +	private void createTempCopy(String filePath, String copyFilePath) throws IOException {, +		Resource location = new ClassPathResource("test/", CssLinkResourceTransformerTests.class);, +		Path original = Paths.get(location.getFile().getAbsolutePath(), filePath);, +		Path copy = Paths.get(location.getFile().getAbsolutePath(), copyFilePath);, +		Files.deleteIfExists(copy);, +		Files.copy(original, copy);, +		copy.toFile().deleteOnExit();, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/resource/CssLinkResourceTransformer.java, +					if (!"css".equals(StringUtils.getFilenameExtension(filename)) ||, +							resource instanceof GzipResourceResolver.GzippedResource) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/resource/GzipResourceResolver.java, +	static final class GzippedResource extends AbstractResource implements HttpResource {, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/resource/CssLinkResourceTransformerTests.java, +import java.io.IOException;, +import java.nio.charset.StandardCharsets;, +import java.nio.file.Files;, +import java.nio.file.Path;, +import java.nio.file.Paths;, +import reactor.test.StepVerifier;, +		StepVerifier.create(this.transformerChain.transform(this.exchange, css).cast(TransformedResource.class)), +				.consumeNextWith(resource -> {, +					String result = new String(resource.getByteArray(), StandardCharsets.UTF_8);, +				}), +				.expectComplete().verify();, +		StepVerifier.create(this.transformerChain.transform(this.exchange, expected)), +				.consumeNextWith(resource -> {, +					assertSame(expected, resource);, +				}), +				.expectComplete().verify();, +		StepVerifier.create(transformerChain.transform(this.exchange, externalCss).cast(TransformedResource.class)), +				.consumeNextWith(resource -> {, +					String result = new String(resource.getByteArray(), StandardCharsets.UTF_8);, +				}).expectComplete().verify();, +		StepVerifier.create(this.transformerChain.transform(this.exchange, expected)), +				.expectNext(expected), +				.expectComplete().verify();, +	}, +, +	@Test, +	public void transformWithGzippedResource() throws Exception {, +		initExchange(HttpMethod.GET, "/static/main.css");, +		Resource original = new ClassPathResource("test/main.css", getClass());, +		createTempCopy("main.css", "main.css.gz");, +		GzipResourceResolver.GzippedResource expected = new GzipResourceResolver.GzippedResource(original);, +		StepVerifier.create(this.transformerChain.transform(this.exchange, expected)), +				.expectNext(expected), +				.expectComplete().verify();, +	}, +, +	private void createTempCopy(String filePath, String copyFilePath) throws IOException {]