[+++ b/src/docs/asciidoc/web/websocket.adoc, +=== Annotated Controllers, +Applications can use annotated `@Controller` classes to handle messages from clients., +Such classes can declare `@MessageMapping`, `@SubscribeMapping`, and `@ExceptionHandler`, +methods as described next., +[[websocket-stomp-message-mapping]], +==== `@MessageMapping`, +, +The `@MessageMapping` annotation can be used on methods to route messages based on their, +destination. It is supported at the method level as well as at the type level. At type, +level `@MessageMapping` is used to express shared mappings across all methods in a, +controller., +, +By default destination mappings are expected to be Ant-style, path patterns, e.g. "/foo*",, +"/foo/**". The patterns include support for template variables, e.g. "/foo/{id}", that can, +be referenced with `@DestinationVariable` method arguments., +, +[TIP], +Applications can choose to switch to a dot-separated destination convention., +`@MessageMapping` methods can have flexible signatures with the following arguments:, +[cols="1,2", options="header"], +|===, +| Method argument | Description, +| `Message`, +| For access to the complete message., +, +| `MessageHeaders`, +| For access to the headers within the `Message`., +, +| `MessageHeaderAccessor`, `SimpMessageHeaderAccessor`, `StompHeaderAccessor`, +| For access to the headers via typed accessor methods., +, +| `@Payload`, +| For access to the payload of the message, converted (e.g. from JSON) via a configured, +`MessageConverter`., +, +The presence of this annotation is not required since it is assumed by default if no, +other argument is matched., +, +Payload arguments may be annotated with `@javax.validation.Valid` or Spring's `@Validated`, +in order to be automatically validated., +, +| `@Header`, +| For access to a specific header value along with type conversion using an, +`org.springframework.core.convert.converter.Converter` if necessary., +, +| `@Headers`, +| For access to all headers in the message. This argument must be assignable to, +`java.util.Map`., +, +| `@DestinationVariable`, +| For access to template variables extracted from the message destination., +Values will be converted to the declared method argument type as necessary., +, +| `java.security.Principal`, +| Reflects the user logged in at the time of the WebSocket HTTP handshake., +, +|===, +, +When an `@MessageMapping` method returns a value, by default the value is serialized to, +a payload through a configured `MessageConverter`, and then sent as a `Message` to the, +`"brokerChannel"` from where it is broadcast to subscribers. The destination of the, +outbound message is the same as that of the inbound message but prefixed with `"/topic"`., +, +You can use the `@SendTo` method annotation to customize the destination to send, +the payload to. `@SendTo` can also be used at the class level to share a default target, +destination to send messages to. `@SendToUser` is an variant for sending messages only to, +the user associated with a message. See <<websocket-stomp-user-destination>> for details., +, +The return value from an `@MessageMapping` method may be wrapped with `ListenableFuture`,, +`CompletableFuture`, or `CompletionStage` in order to produce the payload asynchronously., +, +As an alternative to returning a payload from an `@MessageMapping` method you can also, +send messages using the `SimpMessagingTemplate`, which is also how return values are, +handled under the covers. See <<websocket-stomp-handle-send>>., +, +, +[[websocket-stomp-subscribe-mapping]], +==== `@SubscribeMapping`, +, +The `@SubscribeMapping` annotation is used in combination with `@MessageMapping` in order, +to narrow the mapping to subscription messages. In such scenarios, the `@MessageMapping`, +annotation specifies the destination while `@SubscribeMapping` indicates interest in, +subscription messages only., +, +An `@SubscribeMapping` method is generally no different from any `@MessageMapping`, +method with respect to mapping and input arguments. For example you can combine it with a, +type-level `@MessageMapping` to express a shared destination prefix, and you can use the, +same <<websocket-stomp-message-mapping,method arguments>> as on any @MessageMapping` method., +, +The key difference with `@SubscribeMapping` is that the return value of the method is, +serialized as a payload and sent, not to the "brokerChannel" but to the, +"clientOutboundChannel", effectively replying directly to the client rather than, +broadcasting through the broker. This is useful for implementing one-off, request-reply, +message exchanges, and never holding on to the subscription. A common scenario for this, +pattern is application initialization when data must be loaded and presented., +, +A `@SubscribeMapping` method can also be annotated with `@SendTo` in which case the, +return value is sent to the `"brokerChannel"` with the explicitly specified target, +[[websocket-stomp-exception-handler]]]