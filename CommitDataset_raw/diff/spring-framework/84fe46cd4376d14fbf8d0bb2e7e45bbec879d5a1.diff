[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/VersionResourceResolver.java, +import java.util.Arrays;, +, +	 * <p>If not done already, variants of the given {@code pathPatterns}, prefixed with, +	 * the {@code version} will be also configured. For example, adding a {@code "/js/**"} path pattern, +	 * will also cofigure automatically a {@code "/v1.0.0/js/**"} with {@code "v1.0.0"} the, +	 * {@code version} String given as an argument., +		List<String> patternsList = Arrays.asList(pathPatterns);, +		List<String> prefixedPatterns = new ArrayList<String>(pathPatterns.length);, +		String versionPrefix = "/" + version;, +		for(String pattern : patternsList) {, +			prefixedPatterns.add(pattern);, +			if(!pattern.startsWith(versionPrefix) && !patternsList.contains(versionPrefix + pattern)) {, +				prefixedPatterns.add(versionPrefix + pattern);, +			}, +		}, +		return addVersionStrategy(new FixedVersionStrategy(version), prefixedPatterns.toArray(new String[0]));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/VersionResourceResolver.java, +import java.util.Arrays;, +, +	 * <p>If not done already, variants of the given {@code pathPatterns}, prefixed with, +	 * the {@code version} will be also configured. For example, adding a {@code "/js/**"} path pattern, +	 * will also cofigure automatically a {@code "/v1.0.0/js/**"} with {@code "v1.0.0"} the, +	 * {@code version} String given as an argument., +		List<String> patternsList = Arrays.asList(pathPatterns);, +		List<String> prefixedPatterns = new ArrayList<String>(pathPatterns.length);, +		String versionPrefix = "/" + version;, +		for(String pattern : patternsList) {, +			prefixedPatterns.add(pattern);, +			if(!pattern.startsWith(versionPrefix) && !patternsList.contains(versionPrefix + pattern)) {, +				prefixedPatterns.add(versionPrefix + pattern);, +			}, +		}, +		return addVersionStrategy(new FixedVersionStrategy(version), prefixedPatterns.toArray(new String[0]));, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/VersionResourceResolverTests.java, +import org.hamcrest.Matchers;, +import static org.hamcrest.Matchers.*;, +	// SPR-13883, +	@Test, +	public void shouldConfigureFixedPrefixAutomatically() throws Exception {, +, +		this.resolver.addFixedVersionStrategy("fixedversion", "/js/**", "/css/**", "/fixedversion/css/**");, +, +		assertThat(this.resolver.getStrategyMap().size(), is(4));, +		assertThat(this.resolver.getStrategyForPath("/js/something.js"), Matchers.instanceOf(FixedVersionStrategy.class));, +		assertThat(this.resolver.getStrategyForPath("/fixedversion/js/something.js"), Matchers.instanceOf(FixedVersionStrategy.class));, +		assertThat(this.resolver.getStrategyForPath("/css/something.css"), Matchers.instanceOf(FixedVersionStrategy.class));, +		assertThat(this.resolver.getStrategyForPath("/fixedversion/css/something.css"), Matchers.instanceOf(FixedVersionStrategy.class));, +	}, +, +]