[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, +	 * The name of the aspect (ref bean) in which this advice was defined, +	 * (used when determining advice precedence so that we can determine, +	private String aspectName = "";, +	@Nullable, +	private String[] argumentNames;, +	@Nullable, +	private String throwingName;, +	@Nullable, +	private String returningName;, +	@Nullable, +	@Nullable, +		Assert.state(this.argumentNames != null, "No argument names available");, +		configurePointcutParameters(this.argumentNames, argumentIndexOffset);, +	private void configurePointcutParameters(String[] argumentNames, int argumentIndexOffset) {, +		String[] pointcutParameterNames = new String[argumentNames.length - numParametersToRemove];, +		for (int i = 0; i < argumentNames.length; i++) {, +			if (argumentNames[i].equals(this.returningName) ||, +				argumentNames[i].equals(this.throwingName)) {, +			pointcutParameterNames[index] = argumentNames[i];, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, +	 * The name of the aspect (ref bean) in which this advice was defined, +	 * (used when determining advice precedence so that we can determine, +	private String aspectName = "";, +	@Nullable, +	private String[] argumentNames;, +	@Nullable, +	private String throwingName;, +	@Nullable, +	private String returningName;, +	@Nullable, +	@Nullable, +		Assert.state(this.argumentNames != null, "No argument names available");, +		configurePointcutParameters(this.argumentNames, argumentIndexOffset);, +	private void configurePointcutParameters(String[] argumentNames, int argumentIndexOffset) {, +		String[] pointcutParameterNames = new String[argumentNames.length - numParametersToRemove];, +		for (int i = 0; i < argumentNames.length; i++) {, +			if (argumentNames[i].equals(this.returningName) ||, +				argumentNames[i].equals(this.throwingName)) {, +			pointcutParameterNames[index] = argumentNames[i];, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscoverer.java, + * @author Juergen Hoeller, +	/** The pointcut expression associated with the advice, as a simple String */, +	@Nullable, +	private boolean raiseExceptions;, +	/** If the advice is afterReturning, and binds the return value, this is the parameter name used */, +	@Nullable, +	private String returningName;, +, +	/** If the advice is afterThrowing, and binds the thrown value, this is the parameter name used */, +	@Nullable, +	private String throwingName;, +, +	private Class<?>[] argumentTypes = new Class<?>[0];, +, +	private String[] parameterNameBindings = new String[0];, +	public void setReturningName(@Nullable String returningName) {, +	public void setThrowingName(@Nullable String throwingName) {, +		@Nullable, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java, +	 * The name of the aspect (ref bean) in which this advice was defined, +	 * (used when determining advice precedence so that we can determine, +	private String aspectName = "";, +	@Nullable, +	private String[] argumentNames;, +	@Nullable, +	private String throwingName;, +	@Nullable, +	private String returningName;, +	@Nullable, +	@Nullable, +		Assert.state(this.argumentNames != null, "No argument names available");, +		configurePointcutParameters(this.argumentNames, argumentIndexOffset);, +	private void configurePointcutParameters(String[] argumentNames, int argumentIndexOffset) {, +		String[] pointcutParameterNames = new String[argumentNames.length - numParametersToRemove];, +		for (int i = 0; i < argumentNames.length; i++) {, +			if (argumentNames[i].equals(this.returningName) ||, +				argumentNames[i].equals(this.throwingName)) {, +			pointcutParameterNames[index] = argumentNames[i];, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscoverer.java, + * @author Juergen Hoeller, +	/** The pointcut expression associated with the advice, as a simple String */, +	@Nullable, +	private boolean raiseExceptions;, +	/** If the advice is afterReturning, and binds the return value, this is the parameter name used */, +	@Nullable, +	private String returningName;, +, +	/** If the advice is afterThrowing, and binds the thrown value, this is the parameter name used */, +	@Nullable, +	private String throwingName;, +, +	private Class<?>[] argumentTypes = new Class<?>[0];, +, +	private String[] parameterNameBindings = new String[0];, +	public void setReturningName(@Nullable String returningName) {, +	public void setThrowingName(@Nullable String throwingName) {, +		@Nullable, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java, +	@Nullable]