[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +							isEagerInit = AccessController.doPrivileged((PrivilegedAction<Boolean>), +											((SmartFactoryBean<?>) factory)::isEagerInit,, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +							isEagerInit = AccessController.doPrivileged((PrivilegedAction<Boolean>), +											((SmartFactoryBean<?>) factory)::isEagerInit,, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/FactoryBeanRegistrySupport.java, +				return AccessController.doPrivileged((PrivilegedAction<Class<?>>), +						factoryBean::getObjectType, getAccessControlContext());, +					object = AccessController.doPrivileged((PrivilegedExceptionAction<Object>) factory::getObject, acc);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +							isEagerInit = AccessController.doPrivileged((PrivilegedAction<Boolean>), +											((SmartFactoryBean<?>) factory)::isEagerInit,, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/FactoryBeanRegistrySupport.java, +				return AccessController.doPrivileged((PrivilegedAction<Class<?>>), +						factoryBean::getObjectType, getAccessControlContext());, +					object = AccessController.doPrivileged((PrivilegedExceptionAction<Object>) factory::getObject, acc);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/SimpleInstantiationStrategy.java, +									(PrivilegedExceptionAction<Constructor<?>>) clazz::getDeclaredConstructor);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +							isEagerInit = AccessController.doPrivileged((PrivilegedAction<Boolean>), +											((SmartFactoryBean<?>) factory)::isEagerInit,, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/FactoryBeanRegistrySupport.java, +				return AccessController.doPrivileged((PrivilegedAction<Class<?>>), +						factoryBean::getObjectType, getAccessControlContext());, +					object = AccessController.doPrivileged((PrivilegedExceptionAction<Object>) factory::getObject, acc);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/SimpleInstantiationStrategy.java, +									(PrivilegedExceptionAction<Constructor<?>>) clazz::getDeclaredConstructor);, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +import io.reactivex.Flowable;, +					Flowable::fromPublisher, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +							isEagerInit = AccessController.doPrivileged((PrivilegedAction<Boolean>), +											((SmartFactoryBean<?>) factory)::isEagerInit,, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/FactoryBeanRegistrySupport.java, +				return AccessController.doPrivileged((PrivilegedAction<Class<?>>), +						factoryBean::getObjectType, getAccessControlContext());, +					object = AccessController.doPrivileged((PrivilegedExceptionAction<Object>) factory::getObject, acc);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/SimpleInstantiationStrategy.java, +									(PrivilegedExceptionAction<Constructor<?>>) clazz::getDeclaredConstructor);, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +import io.reactivex.Flowable;, +					Flowable::fromPublisher, +++ b/spring-core/src/main/java/org/springframework/core/convert/converter/ConvertingComparator.java, +		return new ConvertingComparator<>(comparator, Map.Entry::getKey);, +		return new ConvertingComparator<>(comparator, Map.Entry::getValue);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +							isEagerInit = AccessController.doPrivileged((PrivilegedAction<Boolean>), +											((SmartFactoryBean<?>) factory)::isEagerInit,, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/FactoryBeanRegistrySupport.java, +				return AccessController.doPrivileged((PrivilegedAction<Class<?>>), +						factoryBean::getObjectType, getAccessControlContext());, +					object = AccessController.doPrivileged((PrivilegedExceptionAction<Object>) factory::getObject, acc);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/SimpleInstantiationStrategy.java, +									(PrivilegedExceptionAction<Constructor<?>>) clazz::getDeclaredConstructor);, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +import io.reactivex.Flowable;, +					Flowable::fromPublisher, +++ b/spring-core/src/main/java/org/springframework/core/convert/converter/ConvertingComparator.java, +		return new ConvertingComparator<>(comparator, Map.Entry::getKey);, +		return new ConvertingComparator<>(comparator, Map.Entry::getValue);, +++ b/spring-core/src/main/java/org/springframework/util/PropertyPlaceholderHelper.java, +		return replacePlaceholders(value, properties::getProperty);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +							isEagerInit = AccessController.doPrivileged((PrivilegedAction<Boolean>), +											((SmartFactoryBean<?>) factory)::isEagerInit,, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/FactoryBeanRegistrySupport.java, +				return AccessController.doPrivileged((PrivilegedAction<Class<?>>), +						factoryBean::getObjectType, getAccessControlContext());, +					object = AccessController.doPrivileged((PrivilegedExceptionAction<Object>) factory::getObject, acc);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/SimpleInstantiationStrategy.java, +									(PrivilegedExceptionAction<Constructor<?>>) clazz::getDeclaredConstructor);, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +import io.reactivex.Flowable;, +					Flowable::fromPublisher, +++ b/spring-core/src/main/java/org/springframework/core/convert/converter/ConvertingComparator.java, +		return new ConvertingComparator<>(comparator, Map.Entry::getKey);, +		return new ConvertingComparator<>(comparator, Map.Entry::getValue);, +++ b/spring-core/src/main/java/org/springframework/util/PropertyPlaceholderHelper.java, +		return replacePlaceholders(value, properties::getProperty);, +++ b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java, +		doWithMethods(leafClass, methods::add);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +							isEagerInit = AccessController.doPrivileged((PrivilegedAction<Boolean>), +											((SmartFactoryBean<?>) factory)::isEagerInit,, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/FactoryBeanRegistrySupport.java, +				return AccessController.doPrivileged((PrivilegedAction<Class<?>>), +						factoryBean::getObjectType, getAccessControlContext());, +					object = AccessController.doPrivileged((PrivilegedExceptionAction<Object>) factory::getObject, acc);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/SimpleInstantiationStrategy.java, +									(PrivilegedExceptionAction<Constructor<?>>) clazz::getDeclaredConstructor);, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +import io.reactivex.Flowable;, +					Flowable::fromPublisher, +++ b/spring-core/src/main/java/org/springframework/core/convert/converter/ConvertingComparator.java, +		return new ConvertingComparator<>(comparator, Map.Entry::getKey);, +		return new ConvertingComparator<>(comparator, Map.Entry::getValue);, +++ b/spring-core/src/main/java/org/springframework/util/PropertyPlaceholderHelper.java, +		return replacePlaceholders(value, properties::getProperty);, +++ b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java]