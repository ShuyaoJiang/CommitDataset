[+++ b/spring-context/src/main/java/org/springframework/context/annotation/Configuration.java, + * like any regular {@code @Component}. In particular, if a single constructor is present, + * autowiring semantics will be applied transparently:, + *, + * <pre class="code">, + * &#064;Configuration, + * public class AppConfig {, + *     private final SomeBean someBean;, + *, + *     public AppConfig(SomeBean someBean) {, + *         this.someBean = someBean;, + *     }, + *, + *     // &#064;Bean definition using "SomeBean", + *, + * }</pre>, + *, + * class the usual (e.g. using the {@code @Autowired} annotation):, + *     &#064Autowired Environment env;, + * imported configurations may be injected the usual way (e.g. via constructor injection):, + *     private final DatabaseConfig dataConfig;, + *, + *     public AppConfig(DatabaseConfig dataConfig) {, + *         this.dataConfig = dataConfig;, + *     }, + * the {@link ImportResource @ImportResource} annotation. Bean definitions imported from, + * XML can be injected the usual way (e.g. using the {@code Inject} annotation):, + * <li>Any nested configuration classes must be {@code static}.]