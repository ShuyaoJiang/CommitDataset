[+++ b/spring-web-reactive/src/main/java/org/springframework/web/client/reactive/DefaultHttpRequestBuilder.java, +import org.springframework.web.util.DefaultUriTemplateHandler;, +import org.springframework.web.util.UriTemplateHandler;, +	private final UriTemplateHandler uriTemplateHandler = new DefaultUriTemplateHandler();, +, +		this.url = this.uriTemplateHandler.expand(urlTemplate, urlVariables);, +	public DefaultHttpRequestBuilder contentStream(Publisher<?> content) {, +	public ClientHttpRequest build(ClientHttpRequestFactory factory, List<Encoder<?>> messageEncoders) {, +			Optional<Encoder<?>> messageEncoder = messageEncoders, +					.stream(), +					.filter(e -> e.canEncode(requestBodyType, mediaType)), +					.findFirst();, +++ b/spring-web-reactive/src/main/java/org/springframework/web/client/reactive/DefaultHttpRequestBuilder.java, +import org.springframework.web.util.DefaultUriTemplateHandler;, +import org.springframework.web.util.UriTemplateHandler;, +	private final UriTemplateHandler uriTemplateHandler = new DefaultUriTemplateHandler();, +, +		this.url = this.uriTemplateHandler.expand(urlTemplate, urlVariables);, +	public DefaultHttpRequestBuilder contentStream(Publisher<?> content) {, +	public ClientHttpRequest build(ClientHttpRequestFactory factory, List<Encoder<?>> messageEncoders) {, +			Optional<Encoder<?>> messageEncoder = messageEncoders, +					.stream(), +					.filter(e -> e.canEncode(requestBodyType, mediaType)), +					.findFirst();, +++ b/spring-web-reactive/src/main/java/org/springframework/web/client/reactive/HttpRequestBuilder.java, +import java.util.List;, +, +import org.springframework.core.codec.Encoder;, +	 *, +	 * @param factory the factory that creates the actual {@link ClientHttpRequest}, +	 * @param messageEncoders the {@link Encoder}s to use for encoding the request body, +	ClientHttpRequest build(ClientHttpRequestFactory factory, List<Encoder<?>> messageEncoders);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/client/reactive/DefaultHttpRequestBuilder.java, +import org.springframework.web.util.DefaultUriTemplateHandler;, +import org.springframework.web.util.UriTemplateHandler;, +	private final UriTemplateHandler uriTemplateHandler = new DefaultUriTemplateHandler();, +, +		this.url = this.uriTemplateHandler.expand(urlTemplate, urlVariables);, +	public DefaultHttpRequestBuilder contentStream(Publisher<?> content) {, +	public ClientHttpRequest build(ClientHttpRequestFactory factory, List<Encoder<?>> messageEncoders) {, +			Optional<Encoder<?>> messageEncoder = messageEncoders, +					.stream(), +					.filter(e -> e.canEncode(requestBodyType, mediaType)), +					.findFirst();, +++ b/spring-web-reactive/src/main/java/org/springframework/web/client/reactive/HttpRequestBuilder.java, +import java.util.List;, +, +import org.springframework.core.codec.Encoder;, +	 *, +	 * @param factory the factory that creates the actual {@link ClientHttpRequest}, +	 * @param messageEncoders the {@link Encoder}s to use for encoding the request body, +	ClientHttpRequest build(ClientHttpRequestFactory factory, List<Encoder<?>> messageEncoders);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/client/reactive/WebClient.java, +	public WebResponseActions perform(HttpRequestBuilder builder) {, +		ClientHttpRequest request = builder.build(this.requestFactory, this.messageEncoders);]