[+++ b/org.springframework.aop/src/test/java/org/springframework/aop/framework/ProxyFactoryTests.java, +/*, + * Copyright 2002-2007 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.aop.framework;, +, +, +import static org.hamcrest.CoreMatchers.instanceOf;, +import static org.junit.Assert.*;, +, +import org.aopalliance.intercept.MethodInterceptor;, +import org.aopalliance.intercept.MethodInvocation;, +import org.junit.Test;, +import org.springframework.aop.Advisor;, +import org.springframework.aop.interceptor.DebugInterceptor;, +import org.springframework.aop.interceptor.NopInterceptor;, +import org.springframework.aop.support.AopUtils;, +import org.springframework.aop.support.DefaultIntroductionAdvisor;, +import org.springframework.aop.support.DefaultPointcutAdvisor;, +import org.springframework.beans.IOther;, +import org.springframework.beans.ITestBean;, +import org.springframework.beans.TestBean;, +, +/**, + * Also tests AdvisedSupport and ProxyCreatorSupport superclasses., + *, + * @author Rod Johnson, + * @author Juergen Hoeller, + * @author Chris Beams, + * @since 14.05.2003, + */, +public class ProxyFactoryTests {, +, +	@Test, +	public void testIndexOfMethods() {, +		TestBean target = new TestBean();, +		ProxyFactory pf = new ProxyFactory(target);, +		NopInterceptor nop = new NopInterceptor();, +		Advisor advisor = new DefaultPointcutAdvisor(new CountingBeforeAdvice());, +		Advised advised = (Advised) pf.getProxy();, +		// Can use advised and ProxyFactory interchangeably, +		advised.addAdvice(nop);, +		pf.addAdvisor(advisor);, +		assertEquals(-1, pf.indexOf(new NopInterceptor()));, +		assertEquals(0, pf.indexOf(nop));, +		assertEquals(1, pf.indexOf(advisor));, +		assertEquals(-1, advised.indexOf(new DefaultPointcutAdvisor(null)));, +	}, +	, +	@Test, +	public void testRemoveAdvisorByReference() {, +		TestBean target = new TestBean();, +		ProxyFactory pf = new ProxyFactory(target);, +		NopInterceptor nop = new NopInterceptor();, +		CountingBeforeAdvice cba = new CountingBeforeAdvice();, +		Advisor advisor = new DefaultPointcutAdvisor(cba);, +		pf.addAdvice(nop);, +		pf.addAdvisor(advisor);, +		ITestBean proxied = (ITestBean) pf.getProxy();, +		proxied.setAge(5);, +		assertEquals(1, cba.getCalls());, +		assertEquals(1, nop.getCount());, +		assertTrue(pf.removeAdvisor(advisor));, +		assertEquals(5, proxied.getAge());, +		assertEquals(1, cba.getCalls());, +		assertEquals(2, nop.getCount());, +		assertFalse(pf.removeAdvisor(new DefaultPointcutAdvisor(null)));, +	}, +	, +	@Test, +	public void testRemoveAdvisorByIndex() {, +		TestBean target = new TestBean();, +		ProxyFactory pf = new ProxyFactory(target);, +		NopInterceptor nop = new NopInterceptor();, +		CountingBeforeAdvice cba = new CountingBeforeAdvice();, +		Advisor advisor = new DefaultPointcutAdvisor(cba);, +		pf.addAdvice(nop);, +		pf.addAdvisor(advisor);, +		NopInterceptor nop2 = new NopInterceptor();, +		pf.addAdvice(nop2);, +		ITestBean proxied = (ITestBean) pf.getProxy();, +		proxied.setAge(5);, +		assertEquals(1, cba.getCalls());, +		assertEquals(1, nop.getCount());, +		assertEquals(1, nop2.getCount());, +		// Removes counting before advisor, +		pf.removeAdvisor(1);]