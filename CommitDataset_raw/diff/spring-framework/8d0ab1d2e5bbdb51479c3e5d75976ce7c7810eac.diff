[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +	 * Return the map with all {@link HandlerMethod}s. The key of the map is the generic type , +	 * <strong>{@code <T>}</strong> containing request mapping conditions., +	 */, +	public Map<T, HandlerMethod> getHandlerMethods() {, +		return Collections.unmodifiableMap(handlerMethods);, +	}, +, +	/**, +			if (isHandler(getApplicationContext().getType(beanName))){, +	 * Determines if the given type could contain handler methods., +	 * @param beanType the type to check, +	 * @return true if this a type that could contain handler methods, false otherwise., +	protected abstract boolean isHandler(Class<?> beanType);, +	 * @param handler the bean name of a handler or a handler instance, +	protected void detectHandlerMethods(final Object handler) {, +		final Class<?> handlerType = (handler instanceof String) ? , +				getApplicationContext().getType((String) handler) : handler.getClass();, +				return getMappingForMethod(method, handlerType) != null;, +		, +			T mapping = getMappingForMethod(method, handlerType);, +			registerHandlerMethod(handler, method, mapping);, +	 * @param handlerType the actual handler type (possibly a subtype of {@code method.getDeclaringClass()}), +	protected abstract T getMappingForMethod(Method method, Class<?> handlerType);, +	 * @param handler the bean name of the handler or the actual handler instance, +	 * @param method the method to register, +	 * @param mapping the mapping conditions associated with the handler method, +	protected void registerHandlerMethod(Object handler, Method method, T mapping) {, +		HandlerMethod handlerMethod;, +		if (handler instanceof String) {, +			String beanName = (String) handler;, +			handlerMethod = new HandlerMethod(beanName, getApplicationContext(), method);, +		}, +		else {, +			handlerMethod = new HandlerMethod(handler, method);, +		}, +		, +		HandlerMethod oldHandlerMethod = handlerMethods.get(mapping);, +		if (oldHandlerMethod != null && !oldHandlerMethod.equals(handlerMethod)) {, +					+ oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.");, +		, +		, +		Set<String> paths = getMappingPaths(mapping);, +	 * Get the URL paths associated with the given mapping. , +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +	 * Return the map with all {@link HandlerMethod}s. The key of the map is the generic type , +	 * <strong>{@code <T>}</strong> containing request mapping conditions., +	 */, +	public Map<T, HandlerMethod> getHandlerMethods() {, +		return Collections.unmodifiableMap(handlerMethods);, +	}, +, +	/**, +			if (isHandler(getApplicationContext().getType(beanName))){, +	 * Determines if the given type could contain handler methods., +	 * @param beanType the type to check, +	 * @return true if this a type that could contain handler methods, false otherwise., +	protected abstract boolean isHandler(Class<?> beanType);, +	 * @param handler the bean name of a handler or a handler instance, +	protected void detectHandlerMethods(final Object handler) {, +		final Class<?> handlerType = (handler instanceof String) ? , +				getApplicationContext().getType((String) handler) : handler.getClass();, +				return getMappingForMethod(method, handlerType) != null;, +		, +			T mapping = getMappingForMethod(method, handlerType);, +			registerHandlerMethod(handler, method, mapping);, +	 * @param handlerType the actual handler type (possibly a subtype of {@code method.getDeclaringClass()}), +	protected abstract T getMappingForMethod(Method method, Class<?> handlerType);, +	 * @param handler the bean name of the handler or the actual handler instance, +	 * @param method the method to register, +	 * @param mapping the mapping conditions associated with the handler method, +	protected void registerHandlerMethod(Object handler, Method method, T mapping) {, +		HandlerMethod handlerMethod;, +		if (handler instanceof String) {, +			String beanName = (String) handler;, +			handlerMethod = new HandlerMethod(beanName, getApplicationContext(), method);, +		}, +		else {, +			handlerMethod = new HandlerMethod(handler, method);, +		}, +		, +		HandlerMethod oldHandlerMethod = handlerMethods.get(mapping);, +		if (oldHandlerMethod != null && !oldHandlerMethod.equals(handlerMethod)) {, +					+ oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.");, +		, +		, +		Set<String> paths = getMappingPaths(mapping);, +	 * Get the URL paths associated with the given mapping. , +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, + * @since 3.1.0, +	 * The handler determination in this method is made based on the presence of a type-level {@link Controller} annotation., +	protected boolean isHandler(Class<?> beanType) {, +		return AnnotationUtils.findAnnotation(beanType, Controller.class) != null;, +	 * @param handlerType the actual handler type, possibly a sub-type of {@code method.getDeclaringClass()}, +	protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {, +			RequestMapping typeAnnot = AnnotationUtils.findAnnotation(handlerType, RequestMapping.class);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +	 * Return the map with all {@link HandlerMethod}s. The key of the map is the generic type , +	 * <strong>{@code <T>}</strong> containing request mapping conditions., +	 */]