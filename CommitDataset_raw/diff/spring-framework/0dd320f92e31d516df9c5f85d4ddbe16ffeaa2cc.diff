[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/CookieLocaleResolver.java, + * Copyright 2002-2015 the original author or authors., +	private boolean languageTagCompliant = false;, +, +, +	/**, +	 * Specify whether this resolver's cookies should be compliant with BCP 47, +	 * language tags instead of Java's legacy locale specification format., +	 * The default is {@code false}., +	 * <p>Note: This mode requires JDK 7 or higher. Set this flag to {@code true}, +	 * for BCP 47 compliance on JDK 7+ only., +	 * @since 4.3, +	 * @see Locale#forLanguageTag(String), +	 * @see Locale#toLanguageTag(), +	 */, +	public void setLanguageTagCompliant(boolean languageTagCompliant) {, +		this.languageTagCompliant = languageTagCompliant;, +	}, +, +	/**, +	 * Return whether this resolver's cookies should be compliant with BCP 47, +	 * language tags instead of Java's legacy locale specification format., +	 * @since 4.3, +	 */, +	public boolean isLanguageTagCompliant() {, +		return this.languageTagCompliant;, +	}, +, +	 * @since 4.0, +	 * @since 4.0, +				locale = (!"-".equals(localePart) ? parseLocaleValue(localePart) : null);, +			addCookie(response,, +					(locale != null ? toLocaleValue(locale) : "-") + (timeZone != null ? ' ' + timeZone.getID() : ""));, +	 * Parse the given locale value coming from an incoming cookie., +	 * <p>The default implementation calls {@link StringUtils#parseLocaleString(String)}, +	 * or JDK 7's {@link Locale#forLanguageTag(String)}, depending on the, +	 * {@link #setLanguageTagCompliant "languageTagCompliant"} configuration property., +	 * @param locale the locale value to parse, +	 * @return the corresponding {@code Locale} instance, +	 * @since 4.3, +	 */, +	protected Locale parseLocaleValue(String locale) {, +		return (isLanguageTagCompliant() ? Locale.forLanguageTag(locale) : StringUtils.parseLocaleString(locale));, +	}, +, +	/**, +	 * Render the given locale as a text value for inclusion in a cookie., +	 * <p>The default implementation calls {@link Locale#toString()}, +	 * or JDK 7's {@link Locale#toLanguageTag()}, depending on the, +	 * {@link #setLanguageTagCompliant "languageTagCompliant"} configuration property., +	 * @param locale the locale to stringify, +	 * @return a String representation for the given locale, +	 * @since 4.3, +	 */, +	protected String toLocaleValue(Locale locale) {, +		return (isLanguageTagCompliant() ? locale.toLanguageTag() : locale.toString());, +	}, +, +	/**, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/CookieLocaleResolver.java, + * Copyright 2002-2015 the original author or authors., +	private boolean languageTagCompliant = false;, +, +, +	/**, +	 * Specify whether this resolver's cookies should be compliant with BCP 47, +	 * language tags instead of Java's legacy locale specification format., +	 * The default is {@code false}., +	 * <p>Note: This mode requires JDK 7 or higher. Set this flag to {@code true}, +	 * for BCP 47 compliance on JDK 7+ only., +	 * @since 4.3, +	 * @see Locale#forLanguageTag(String), +	 * @see Locale#toLanguageTag(), +	 */, +	public void setLanguageTagCompliant(boolean languageTagCompliant) {, +		this.languageTagCompliant = languageTagCompliant;, +	}, +, +	/**, +	 * Return whether this resolver's cookies should be compliant with BCP 47, +	 * language tags instead of Java's legacy locale specification format., +	 * @since 4.3, +	 */, +	public boolean isLanguageTagCompliant() {, +		return this.languageTagCompliant;, +	}, +, +	 * @since 4.0, +	 * @since 4.0, +				locale = (!"-".equals(localePart) ? parseLocaleValue(localePart) : null);, +			addCookie(response,, +					(locale != null ? toLocaleValue(locale) : "-") + (timeZone != null ? ' ' + timeZone.getID() : ""));, +	 * Parse the given locale value coming from an incoming cookie., +	 * <p>The default implementation calls {@link StringUtils#parseLocaleString(String)}, +	 * or JDK 7's {@link Locale#forLanguageTag(String)}, depending on the, +	 * {@link #setLanguageTagCompliant "languageTagCompliant"} configuration property., +	 * @param locale the locale value to parse, +	 * @return the corresponding {@code Locale} instance, +	 * @since 4.3, +	 */]