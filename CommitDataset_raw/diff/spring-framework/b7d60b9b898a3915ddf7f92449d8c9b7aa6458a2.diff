[+++ b/spring-context/src/main/java/org/springframework/context/event/EventListener.java, + * Copyright 2002-2019 the original author or authors., + * <p>This annotation may be used as a <em>meta-annotation</em> to create custom, + * <em>composed annotations</em>., + *, + * <h3>Exception Handling</h3>, + * <p>While it is possible for an event listener to declare that it, + * throws arbitrary exception types, any checked exceptions thrown, + * from an event listener will be wrapped in an, + * {@link java.lang.reflect.UndeclaredThrowableException UndeclaredThrowableException}, + * since the event publisher can only handle runtime exceptions., + *, + * <h3>Asynchronous Listeners</h3>, + * <p>If you want a particular listener to process events asynchronously, you, + * can use Spring's {@link org.springframework.scheduling.annotation.Async @Async}, + * support, but be aware of the following limitations when using asynchronous events., + *, + * <ul>, + * <li>If an asynchronous event listener throws an exception, it is not propagated, + * to the caller. See {@link org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler, + * AsyncUncaughtExceptionHandler} for more details.</li>, + * <li>Asynchronous event listener methods cannot publish a subsequent event by returning a, + * value. If you need to publish another event as the result of the processing, inject an, + * {@link org.springframework.context.ApplicationEventPublisher ApplicationEventPublisher}, + * to publish the event manually.</li>, + * </ul>, + *, + * <h3>Ordering Listeners</h3>, + * @author Sam Brannen, +	 * <li>{@code #root.event} or {@code event} for references to the, +	 * {@link ApplicationEvent}</li>, +	 * <li>{@code #root.args} or {@code args} for references to the method, +	 * arguments array</li>, +	 * first argument can be accessed via {@code #root.args[0]}, {@code args[0]},, +	 * {@code #a0}, or {@code #p0}. Arguments can also be accessed by name (with, +	 * a preceding hash tag) if that information is available in the compiled, +	 * byte code.</li>, +++ b/spring-context/src/main/java/org/springframework/context/event/EventListener.java, + * Copyright 2002-2019 the original author or authors., + * <p>This annotation may be used as a <em>meta-annotation</em> to create custom, + * <em>composed annotations</em>., + *, + * <h3>Exception Handling</h3>, + * <p>While it is possible for an event listener to declare that it, + * throws arbitrary exception types, any checked exceptions thrown, + * from an event listener will be wrapped in an, + * {@link java.lang.reflect.UndeclaredThrowableException UndeclaredThrowableException}, + * since the event publisher can only handle runtime exceptions., + *, + * <h3>Asynchronous Listeners</h3>, + * <p>If you want a particular listener to process events asynchronously, you, + * can use Spring's {@link org.springframework.scheduling.annotation.Async @Async}, + * support, but be aware of the following limitations when using asynchronous events., + *, + * <ul>, + * <li>If an asynchronous event listener throws an exception, it is not propagated, + * to the caller. See {@link org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler, + * AsyncUncaughtExceptionHandler} for more details.</li>, + * <li>Asynchronous event listener methods cannot publish a subsequent event by returning a, + * value. If you need to publish another event as the result of the processing, inject an, + * {@link org.springframework.context.ApplicationEventPublisher ApplicationEventPublisher}, + * to publish the event manually.</li>, + * </ul>, + *, + * <h3>Ordering Listeners</h3>, + * @author Sam Brannen, +	 * <li>{@code #root.event} or {@code event} for references to the, +	 * {@link ApplicationEvent}</li>, +	 * <li>{@code #root.args} or {@code args} for references to the method, +	 * arguments array</li>, +	 * first argument can be accessed via {@code #root.args[0]}, {@code args[0]},, +	 * {@code #a0}, or {@code #p0}. Arguments can also be accessed by name (with, +	 * a preceding hash tag) if that information is available in the compiled, +	 * byte code.</li>, +++ b/src/docs/asciidoc/core/core-beans.adoc, +, +| `ServletRequestHandledEvent`, +| A subclass of `RequestHandledEvent` that adds Servlet-specific context information., +, +event publication becomes necessary, see the javadoc for Spring's, +{api-spring-framework}/context/event/ApplicationEventMulticaster.html[`ApplicationEventMulticaster`] interface, +and {api-spring-framework}/context/event/SimpleApplicationEventMulticaster.html[`SimpleApplicationEventMulticaster`], +implementation for configuration options., +bean by using the `@EventListener` annotation. The `BlackListNotifier` can be rewritten as, +| `#root.event` or `event`, +| The arguments (as an object array) used to invoke the method., +| `#root.args` or `args`; `args[0]` to access the first argument, etc., +  (for example, because there is no debug information in the compiled byte code), individual, +  arguments are also available using the `#a<#arg>` syntax where `<#arg>` stands for the, +  argument index (starting from 0)., +| `#blEvent` or `#a0` (you can also use `#p0` or `#p<#arg>` parameter notation as an alias), +* If an asynchronous event listener throws an `Exception`, it is not propagated to the, +  caller. See `AsyncUncaughtExceptionHandler` for more details., +* Asynchronous event listener methods cannot publish a subsequent event by returning a, +  value. If you need to publish another event as the result of the processing, inject an, +  {api-spring-framework}/aop/interceptor/AsyncUncaughtExceptionHandler.html[`ApplicationEventPublisher`], +  to publish the event manually.]