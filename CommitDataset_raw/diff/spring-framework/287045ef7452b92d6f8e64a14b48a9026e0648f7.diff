[+++ b/build.gradle, +		compile(files(objenesisRepackJar)), +++ b/build.gradle, +		compile(files(objenesisRepackJar)), +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ObjenesisCglibAopProxy.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.objenesis.Objenesis;, +import org.springframework.objenesis.SpringObjenesis;, + * Objenesis-based extension of {@link CglibAopProxy} to create proxy instances, + * without invoking the constructor of the class., + * @author Juergen Hoeller, +	private static final Objenesis cachedObjenesis = new SpringObjenesis();, +, +	private static final Objenesis nonCachedObjenesis = new ObjenesisStd(false);, +	 * Create a new ObjenesisCglibAopProxy for the given AOP configuration., +	 * @param config the AOP configuration as AdvisedSupport object, +			Objenesis objenesis = (enhancer.getUseCache() ? cachedObjenesis : nonCachedObjenesis);, +			Factory factory = (Factory) objenesis.newInstance(enhancer.createClass());, +++ b/build.gradle, +		compile(files(objenesisRepackJar)), +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ObjenesisCglibAopProxy.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.objenesis.Objenesis;, +import org.springframework.objenesis.SpringObjenesis;, + * Objenesis-based extension of {@link CglibAopProxy} to create proxy instances, + * without invoking the constructor of the class., + * @author Juergen Hoeller, +	private static final Objenesis cachedObjenesis = new SpringObjenesis();, +, +	private static final Objenesis nonCachedObjenesis = new ObjenesisStd(false);, +	 * Create a new ObjenesisCglibAopProxy for the given AOP configuration., +	 * @param config the AOP configuration as AdvisedSupport object, +			Objenesis objenesis = (enhancer.getUseCache() ? cachedObjenesis : nonCachedObjenesis);, +			Factory factory = (Factory) objenesis.newInstance(enhancer.createClass());, +++ b/spring-core/src/main/java/org/springframework/objenesis/SpringObjenesis.java, +/*, + * Copyright 2002-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.objenesis;, +, +import org.springframework.objenesis.instantiator.ObjectInstantiator;, +import org.springframework.objenesis.strategy.InstantiatorStrategy;, +import org.springframework.objenesis.strategy.StdInstantiatorStrategy;, +import org.springframework.util.ConcurrentReferenceHashMap;, +, +/**, + * Spring-specific variant of {@link ObjenesisStd} / {@link ObjenesisBase},, + * providing a cache based on {@code Class} keys instead of class names., + *, + * @author Juergen Hoeller, + * @since 4.2, + */, +public class SpringObjenesis implements Objenesis {, +, +	private final InstantiatorStrategy strategy = new StdInstantiatorStrategy();, +, +	private final ConcurrentReferenceHashMap<Class<?>, ObjectInstantiator<?>> cache =, +			new ConcurrentReferenceHashMap<Class<?>, ObjectInstantiator<?>>();, +, +, +	public <T> T newInstance(Class<T> clazz) {, +		return getInstantiatorOf(clazz).newInstance();, +	}, +, +	@SuppressWarnings("unchecked"), +	public <T> ObjectInstantiator<T> getInstantiatorOf(Class<T> clazz) {, +		ObjectInstantiator<?> instantiator = this.cache.get(clazz);, +		if (instantiator == null) {, +			ObjectInstantiator<?> newInstantiator = this.strategy.newInstantiatorOf(clazz);, +			instantiator = this.cache.putIfAbsent(clazz, newInstantiator);, +			if (instantiator == null) {, +				instantiator = newInstantiator;, +			}, +		}, +		return (ObjectInstantiator<T>) instantiator;, +	}, +, +}, +++ b/build.gradle, +		compile(files(objenesisRepackJar)), +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ObjenesisCglibAopProxy.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.objenesis.Objenesis;, +import org.springframework.objenesis.SpringObjenesis;, + * Objenesis-based extension of {@link CglibAopProxy} to create proxy instances, + * without invoking the constructor of the class., + * @author Juergen Hoeller]