[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +	 * Returns a {@link HandlerExceptionResolverComposite} containing a list, +	 * of exception resolvers obtained either through , +	 * {@link #configureHandlerExceptionResolvers(List)} or through, +	 * {@link #addDefaultHandlerExceptionResolvers(List)}., +	 * <p><strong>Note:</strong> This method cannot be made final due to CGLib, +	 * constraints. Rather than overriding it, consider overriding, +	 * {@link #configureHandlerExceptionResolvers(List)}, which allows , +	 * providing a list of resolvers., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +	 * Returns a {@link HandlerExceptionResolverComposite} containing a list, +	 * of exception resolvers obtained either through , +	 * {@link #configureHandlerExceptionResolvers(List)} or through, +	 * {@link #addDefaultHandlerExceptionResolvers(List)}., +	 * <p><strong>Note:</strong> This method cannot be made final due to CGLib, +	 * constraints. Rather than overriding it, consider overriding, +	 * {@link #configureHandlerExceptionResolvers(List)}, which allows , +	 * providing a list of resolvers., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/support/RequestContext.java, +	 * Return the path to URL mappings within the current servlet including the , +	 * context path and the servlet path of the original request. This is useful, +	 * for building links to other resources within the application where a , +	 * servlet mapping of the style {@code "/main/*"} is used., +	 * <p>Delegates to the UrlPathHelper for decoding the context path., +	 * @see javax.servlet.http.HttpServletRequest#getContextPath, +	 * @see javax.servlet.http.HttpServletRequest#getServletPath(), +	 * @see #getUrlPathHelper, +	 */, +	public String getPathToServlet() {, +		return this.urlPathHelper.getOriginatingContextPath(this.request), +				+ this.urlPathHelper.getOriginatingServletPath(this.request);, +	}, +, +	/**, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +	 * Returns a {@link HandlerExceptionResolverComposite} containing a list, +	 * of exception resolvers obtained either through , +	 * {@link #configureHandlerExceptionResolvers(List)} or through, +	 * {@link #addDefaultHandlerExceptionResolvers(List)}., +	 * <p><strong>Note:</strong> This method cannot be made final due to CGLib, +	 * constraints. Rather than overriding it, consider overriding, +	 * {@link #configureHandlerExceptionResolvers(List)}, which allows , +	 * providing a list of resolvers., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/support/RequestContext.java, +	 * Return the path to URL mappings within the current servlet including the , +	 * context path and the servlet path of the original request. This is useful, +	 * for building links to other resources within the application where a , +	 * servlet mapping of the style {@code "/main/*"} is used., +	 * <p>Delegates to the UrlPathHelper for decoding the context path., +	 * @see javax.servlet.http.HttpServletRequest#getContextPath, +	 * @see javax.servlet.http.HttpServletRequest#getServletPath(), +	 * @see #getUrlPathHelper, +	 */, +	public String getPathToServlet() {, +		return this.urlPathHelper.getOriginatingContextPath(this.request), +				+ this.urlPathHelper.getOriginatingServletPath(this.request);, +	}, +, +	/**, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/support/RequestContextTests.java, +import org.springframework.web.util.WebUtils;, + * @author Rossen Stoyanchev, +	public void testGetContextUrl() throws Exception {, +	public void testGetContextUrlWithMap() throws Exception {, +	@Test, +	public void testGetContextUrlWithMapEscaping() throws Exception {, +		request.setContextPath("foo/");, +		RequestContext context = new RequestContext(request, response, servletContext, model);, +		Map<String, Object> map = new HashMap<String, Object>();, +		map.put("foo", "bar baz");, +		map.put("spam", "&bucket=");, +		assertEquals("foo/bar%20baz?spam=%26bucket%3D", context.getContextUrl("{foo}?spam={spam}", map));, +	}, +, +	@Test, +	public void testPathToServlet() throws Exception {, +		request.setContextPath("/app");, +		request.setServletPath("/servlet");, +		RequestContext context = new RequestContext(request, response, servletContext, model);, +		, +		assertEquals("/app/servlet", context.getPathToServlet());, +, +		request.setAttribute(WebUtils.FORWARD_CONTEXT_PATH_ATTRIBUTE, "/origApp");, +		request.setAttribute(WebUtils.FORWARD_SERVLET_PATH_ATTRIBUTE, "/origServlet");, +		, +		assertEquals("/origApp/origServlet", context.getPathToServlet());, +	}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +	 * Returns a {@link HandlerExceptionResolverComposite} containing a list, +	 * of exception resolvers obtained either through , +	 * {@link #configureHandlerExceptionResolvers(List)} or through, +	 * {@link #addDefaultHandlerExceptionResolvers(List)}., +	 * <p><strong>Note:</strong> This method cannot be made final due to CGLib, +	 * constraints. Rather than overriding it, consider overriding, +	 * {@link #configureHandlerExceptionResolvers(List)}, which allows , +	 * providing a list of resolvers., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/support/RequestContext.java, +	 * Return the path to URL mappings within the current servlet including the , +	 * context path and the servlet path of the original request. This is useful, +	 * for building links to other resources within the application where a ]