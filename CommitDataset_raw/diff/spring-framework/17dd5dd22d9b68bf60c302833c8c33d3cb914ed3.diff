[+++ b/spring-core/src/main/java/org/springframework/util/Assert.java, +import java.util.function.Supplier;, +	 * Assert a boolean expression, throwing an {@code IllegalArgumentException}, +	 * if the expression evaluates to {@code false}., +	 * <pre class="code">, +	 * Assert.isTrue(i &gt; 0, () -&gt; "The value '" + i + "' must be greater than zero");, +	 * </pre>, +	 * @param expression a boolean expression, +	 * @param messageSupplier a supplier for the exception message to use if the, +	 * assertion fails, +	 * @throws IllegalArgumentException if {@code expression} is {@code false}, +	 */, +	public static void isTrue(boolean expression, Supplier<String> messageSupplier) {, +		if (!expression) {, +			throw new IllegalArgumentException(nullSafeGet(messageSupplier));, +		}, +	}, +, +	/**, +	 * Assert a boolean expression, throwing an {@code IllegalArgumentException}, +	 * if the expression evaluates to {@code false}., +	 * @throws IllegalArgumentException if {@code expression} is {@code false}, +	 * Assert a boolean expression, throwing an {@code IllegalArgumentException}, +	 * if the expression evaluates to {@code false}., +	 * @throws IllegalArgumentException if {@code expression} is {@code false}, +	 * <pre class="code">, +	 * Assert.isNull(value, () -&gt; "The value '" + value + "' must be null");, +	 * </pre>, +	 * @param object the object to check, +	 * @param messageSupplier a supplier for the exception message to use if the, +	 * assertion fails, +	 * @throws IllegalArgumentException if the object is not {@code null}, +	 */, +	public static void isNull(Object object, Supplier<String> messageSupplier) {, +		if (object != null) {, +			throw new IllegalArgumentException(nullSafeGet(messageSupplier));, +		}, +	}, +, +	/**, +	 * Assert that an object is {@code null}., +	 * <pre class="code">, +	 * Assert.notNull(clazz, () -&gt; "The class '" + clazz.getName() + "' must not be null");, +	 * </pre>, +	 * @param object the object to check, +	 * @param messageSupplier a supplier for the exception message to use if the, +	 * assertion fails, +	 * @throws IllegalArgumentException if the object is {@code null}, +	 */, +	public static void notNull(Object object, Supplier<String> messageSupplier) {, +		if (object == null) {, +			throw new IllegalArgumentException(nullSafeGet(messageSupplier));, +		}, +	}, +, +	/**, +	 * Assert that an object is not {@code null}., +	 * <pre class="code">, +	 * Assert.hasLength(name, () -&gt; "Name for account '" + account.getId() + "' must not be empty");, +	 * </pre>, +	 * @param text the String to check, +	 * @param messageSupplier a supplier for the exception message to use if the, +	 * assertion fails, +	 * @see StringUtils#hasLength, +	 * @throws IllegalArgumentException if the text is empty, +	 */, +	public static void hasLength(String text, Supplier<String> messageSupplier) {, +		if (!StringUtils.hasLength(text)) {, +			throw new IllegalArgumentException(nullSafeGet(messageSupplier));, +		}, +	}, +, +	/**, +	 * Assert that the given String is not empty; that is,, +	 * it must not be {@code null} and not the empty String., +	 * Assert that the given String contains valid text content; that is, it must not, +	 * be {@code null} and must contain at least one non-whitespace character., +	 * <pre class="code">, +	 * Assert.hasText(name, () -&gt; "Name for account '" + account.getId() + "' must not be empty");, +	 * </pre>, +	 * @param text the String to check, +	 * @param messageSupplier a supplier for the exception message to use if the, +	 * assertion fails, +	 * @see StringUtils#hasText, +	 * @throws IllegalArgumentException if the text does not contain valid text content, +	 */, +	public static void hasText(String text, Supplier<String> messageSupplier) {, +		if (!StringUtils.hasText(text)) {, +			throw new IllegalArgumentException(nullSafeGet(messageSupplier));, +		}, +	}, +, +	/**, +	 * Assert that the given String contains valid text content; that is, it must not, +	 * Assert that the given String contains valid text content; that is, it must not, +	 * <pre class="code">, +	 * Assert.doesNotContain(name, forbidden, () -&gt; "Name must not contain '" + forbidden + "'");, +	 * </pre>, +	 * @param textToSearch the text to search, +	 * @param substring the substring to find within the text]