[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java, + * Copyright 2002-2018 the original author or authors., +	private enum State {, +, +		/** No emissions from the upstream source yet */, +		NEW,, +, +		/**, +		 * At least one signal of any kind has been received; we're ready to, +		 * call the write function and proceed with actual writing., +		 */, +		FIRST_SIGNAL_RECEIVED,, +, +		/**, +		 * The write subscriber has subscribed and requested; we're going to, +		 * emit the cached signals., +		 */, +		EMITTING_CACHED_SIGNALS,, +, +		/**, +		 * The write subscriber has subscribed, and cached signals have been, +		 * emitted to it; we're ready to switch to a simple pass-through mode, +		 * for all remaining signals., +		 **/, +		READY_TO_WRITE, +, +	}, +, +, +		/** Cached data item before readyToWrite */, +		/** Cached error signal before readyToWrite */, +		/** Cached onComplete signal before readyToWrite */, +		/** Recursive demand while emitting cached signals */, +		private long demandBeforeReadyToWrite;, +, +		/** Current state */, +		private State state = State.NEW;, +, +			if (this.state == State.READY_TO_WRITE) {, +				if (this.state == State.READY_TO_WRITE) {, +				else if (this.state == State.NEW) {, +					this.state = State.FIRST_SIGNAL_RECEIVED;, +			if (this.state == State.READY_TO_WRITE) {, +				if (this.state == State.READY_TO_WRITE) {, +				else if (this.state == State.NEW) {, +					this.state = State.FIRST_SIGNAL_RECEIVED;, +			if (this.state == State.READY_TO_WRITE) {, +				if (this.state == State.READY_TO_WRITE) {, +				else if (this.state == State.NEW) {, +					this.state = State.FIRST_SIGNAL_RECEIVED;, +			if (this.state == State.READY_TO_WRITE) {, +					if (this.state == State.EMITTING_CACHED_SIGNALS) {, +						this.demandBeforeReadyToWrite = n;, +						return;, +					}, +					try {, +						this.state = State.EMITTING_CACHED_SIGNALS;, +						n = n + this.demandBeforeReadyToWrite - 1;, +					finally {, +						this.state = State.READY_TO_WRITE;, +					}, +				}]