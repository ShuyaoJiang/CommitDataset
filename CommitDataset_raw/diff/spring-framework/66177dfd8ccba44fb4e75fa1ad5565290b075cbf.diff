[+++ b/spring-context/src/test/java/org/springframework/scripting/support/ResourceScriptSourceTests.java, +import org.springframework.util.StreamUtils;, +		given(resource.getInputStream()).willReturn(StreamUtils.emptyInput());, +++ b/spring-context/src/test/java/org/springframework/scripting/support/ResourceScriptSourceTests.java, +import org.springframework.util.StreamUtils;, +		given(resource.getInputStream()).willReturn(StreamUtils.emptyInput());, +++ b/spring-core/src/main/java/org/springframework/util/StreamUtils.java, + * Copyright 2002-2015 the original author or authors., +import java.io.ByteArrayInputStream;, +	private static final byte[] EMPTY_CONTENT = new byte[0];, +, +	 * Return an efficient empty {@link InputStream}., +	 * @return a {@link ByteArrayInputStream} based on an empty byte array, +	 * @since 4.2.2, +	 */, +	public static InputStream emptyInput() {, +		return new ByteArrayInputStream(EMPTY_CONTENT);, +	}, +, +	/**, +	 * Return a variant of the given {@link InputStream} where calling, +	 * Return a variant of the given {@link OutputStream} where calling, +++ b/spring-context/src/test/java/org/springframework/scripting/support/ResourceScriptSourceTests.java, +import org.springframework.util.StreamUtils;, +		given(resource.getInputStream()).willReturn(StreamUtils.emptyInput());, +++ b/spring-core/src/main/java/org/springframework/util/StreamUtils.java, + * Copyright 2002-2015 the original author or authors., +import java.io.ByteArrayInputStream;, +	private static final byte[] EMPTY_CONTENT = new byte[0];, +, +	 * Return an efficient empty {@link InputStream}., +	 * @return a {@link ByteArrayInputStream} based on an empty byte array, +	 * @since 4.2.2, +	 */, +	public static InputStream emptyInput() {, +		return new ByteArrayInputStream(EMPTY_CONTENT);, +	}, +, +	/**, +	 * Return a variant of the given {@link InputStream} where calling, +	 * Return a variant of the given {@link OutputStream} where calling, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +import org.springframework.util.StreamUtils;, +			new DelegatingServletInputStream(StreamUtils.emptyInput());, +++ b/spring-context/src/test/java/org/springframework/scripting/support/ResourceScriptSourceTests.java, +import org.springframework.util.StreamUtils;, +		given(resource.getInputStream()).willReturn(StreamUtils.emptyInput());, +++ b/spring-core/src/main/java/org/springframework/util/StreamUtils.java, + * Copyright 2002-2015 the original author or authors., +import java.io.ByteArrayInputStream;, +	private static final byte[] EMPTY_CONTENT = new byte[0];, +, +	 * Return an efficient empty {@link InputStream}., +	 * @return a {@link ByteArrayInputStream} based on an empty byte array, +	 * @since 4.2.2, +	 */, +	public static InputStream emptyInput() {, +		return new ByteArrayInputStream(EMPTY_CONTENT);, +	}, +, +	/**, +	 * Return a variant of the given {@link InputStream} where calling, +	 * Return a variant of the given {@link OutputStream} where calling, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +import org.springframework.util.StreamUtils;, +			new DelegatingServletInputStream(StreamUtils.emptyInput());, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, +import org.springframework.util.StreamUtils;, +				return StreamUtils.emptyInput();, +++ b/spring-context/src/test/java/org/springframework/scripting/support/ResourceScriptSourceTests.java, +import org.springframework.util.StreamUtils;, +		given(resource.getInputStream()).willReturn(StreamUtils.emptyInput());, +++ b/spring-core/src/main/java/org/springframework/util/StreamUtils.java, + * Copyright 2002-2015 the original author or authors., +import java.io.ByteArrayInputStream;, +	private static final byte[] EMPTY_CONTENT = new byte[0];, +, +	 * Return an efficient empty {@link InputStream}., +	 * @return a {@link ByteArrayInputStream} based on an empty byte array, +	 * @since 4.2.2, +	 */, +	public static InputStream emptyInput() {, +		return new ByteArrayInputStream(EMPTY_CONTENT);, +	}, +, +	/**, +	 * Return a variant of the given {@link InputStream} where calling, +	 * Return a variant of the given {@link OutputStream} where calling, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +import org.springframework.util.StreamUtils;, +			new DelegatingServletInputStream(StreamUtils.emptyInput());, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, +import org.springframework.util.StreamUtils;, +				return StreamUtils.emptyInput();, +++ b/spring-web/src/main/java/org/springframework/http/converter/xml/Jaxb2CollectionHttpMessageConverter.java, +import org.springframework.util.StreamUtils;, +			return StreamUtils.emptyInput();, +++ b/spring-context/src/test/java/org/springframework/scripting/support/ResourceScriptSourceTests.java, +import org.springframework.util.StreamUtils;, +		given(resource.getInputStream()).willReturn(StreamUtils.emptyInput());]