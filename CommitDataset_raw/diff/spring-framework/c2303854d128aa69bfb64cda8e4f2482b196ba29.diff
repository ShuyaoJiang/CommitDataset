[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseFactory.java, + * Copyright 2002-2014 the original author or authors., + * Creates a {@link EmbeddedDatabase} instance. Callers are guaranteed that, + * the returned database has been fully initialized and populated., +	 * <p>After calling, {@link #getDataSource()} returns {@code null}., +	 * Does nothing if no embedded database has been initialized., +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseFactory.java, + * Copyright 2002-2014 the original author or authors., + * Creates a {@link EmbeddedDatabase} instance. Callers are guaranteed that, + * the returned database has been fully initialized and populated., +	 * <p>After calling, {@link #getDataSource()} returns {@code null}., +	 * Does nothing if no embedded database has been initialized., +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseFactoryBean.java, + * Copyright 2002-2014 the original author or authors., + * A subclass of {@link EmbeddedDatabaseFactory} that implements {@link FactoryBean}, + * for registration as a Spring bean. Returns the actual {@link DataSource} that, + * provides connectivity to the embedded database to Spring., + * <p>The target {@link DataSource} is returned instead of an {@link EmbeddedDatabase}, + * proxy since the {@link FactoryBean} will manage the initialization and destruction, + * lifecycle of the embedded database instance., + * <p>Implements {@link DisposableBean} to shutdown the embedded database when the, + * managing Spring container is being closed., +, +	@Override, +	public void destroy() {, +		if (this.databaseCleaner != null) {, +			DatabasePopulatorUtils.execute(this.databaseCleaner, getDataSource());, +		}, +		shutdownDatabase();, +	}, +]