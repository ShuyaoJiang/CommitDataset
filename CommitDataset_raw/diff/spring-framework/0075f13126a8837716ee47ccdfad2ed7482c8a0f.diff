[+++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/CrossOrigin.java, + * <p>The rules for combining global and local configuration are generally, + * additive -- e.g. all global and all local origins. For those attributes, + * where only a single value can be accepted such as {@code allowCredentials}, + * and {@code maxAge}, the local overrides the global value., + * See {@link CorsConfiguration#combine(CorsConfiguration)} for more details., + *, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/CrossOrigin.java, + * <p>The rules for combining global and local configuration are generally, + * additive -- e.g. all global and all local origins. For those attributes, + * where only a single value can be accepted such as {@code allowCredentials}, + * and {@code maxAge}, the local overrides the global value., + * See {@link CorsConfiguration#combine(CorsConfiguration)} for more details., + *, +++ b/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java, +import java.util.stream.Collectors;, +	private static final List<HttpMethod> DEFAULT_METHODS =, +			Collections.unmodifiableList(Arrays.asList(HttpMethod.GET, HttpMethod.HEAD));, +	private static final List<String> DEFAULT_PERMIT_ALL =, +			Collections.unmodifiableList(Arrays.asList(ALL));, +, +	private static final List<String> DEFAULT_PERMIT_METHODS =, +			Collections.unmodifiableList(Arrays.asList(HttpMethod.GET.name(), HttpMethod.HEAD.name(), HttpMethod.POST.name()));, +		else if (this.allowedOrigins == DEFAULT_PERMIT_ALL) {, +			setAllowedOrigins(DEFAULT_PERMIT_ALL);, +		}, +			else if (this.allowedMethods == DEFAULT_PERMIT_METHODS) {, +				setAllowedMethods(DEFAULT_PERMIT_METHODS);, +			}, +		else if (this.allowedHeaders == DEFAULT_PERMIT_ALL) {, +			setAllowedHeaders(DEFAULT_PERMIT_ALL);, +		}, +			this.allowedOrigins = DEFAULT_PERMIT_ALL;, +			this.allowedMethods = DEFAULT_PERMIT_METHODS;, +			this.resolvedMethods = DEFAULT_PERMIT_METHODS, +					.stream().map(HttpMethod::resolve).collect(Collectors.toList());, +			this.allowedHeaders = DEFAULT_PERMIT_ALL;, +			this.maxAge = 1800L;, +	 * Combine the non-null properties of the supplied, +	 * {@code CorsConfiguration} with this one., +	 *, +	 * <p>When combining single values like {@code allowCredentials} or, +	 * {@code maxAge}, {@code this} properties are overridden by non-null, +	 * {@code other} properties if any., +	 *, +	 * <p>Combining lists like {@code allowedOrigins}, {@code allowedMethods},, +	 * {@code allowedHeaders} or {@code exposedHeaders} is done in an additive, +	 * way. For example, combining {@code ["GET", "POST"]} with, +	 * {@code ["PATCH"]} results in {@code ["GET", "POST", "PATCH"]}, but keep, +	 * in mind that combining {@code ["GET", "POST"]} with {@code ["*"]}, +	 * results in {@code ["*"]}., +	 *, +	 * <p>Notice that default permit values set by, +	 * {@link CorsConfiguration#applyPermitDefaultValues()} are overridden by, +	 * any value explicitly defined., +	 *, +		if (other == null) {, +		if (source == null) {, +		if (source == DEFAULT_PERMIT_ALL || source == DEFAULT_PERMIT_METHODS) {, +			return other;, +		}, +		if (other == DEFAULT_PERMIT_ALL || other == DEFAULT_PERMIT_METHODS) {, +			return source;, +		}, +		if (source.contains(ALL) || other.contains(ALL)) {, +			return new ArrayList<>(Collections.singletonList(ALL));, +		}, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/CrossOrigin.java, + * <p>The rules for combining global and local configuration are generally, + * additive -- e.g. all global and all local origins. For those attributes, + * where only a single value can be accepted such as {@code allowCredentials}, + * and {@code maxAge}, the local overrides the global value., + * See {@link CorsConfiguration#combine(CorsConfiguration)} for more details., + *, +++ b/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java, +import java.util.stream.Collectors;, +	private static final List<HttpMethod> DEFAULT_METHODS =, +			Collections.unmodifiableList(Arrays.asList(HttpMethod.GET, HttpMethod.HEAD));, +	private static final List<String> DEFAULT_PERMIT_ALL =, +			Collections.unmodifiableList(Arrays.asList(ALL));, +, +	private static final List<String> DEFAULT_PERMIT_METHODS =, +			Collections.unmodifiableList(Arrays.asList(HttpMethod.GET.name(), HttpMethod.HEAD.name(), HttpMethod.POST.name()));, +		else if (this.allowedOrigins == DEFAULT_PERMIT_ALL) {, +			setAllowedOrigins(DEFAULT_PERMIT_ALL);, +		}, +			else if (this.allowedMethods == DEFAULT_PERMIT_METHODS) {, +				setAllowedMethods(DEFAULT_PERMIT_METHODS);, +			}, +		else if (this.allowedHeaders == DEFAULT_PERMIT_ALL) {, +			setAllowedHeaders(DEFAULT_PERMIT_ALL);, +		}, +			this.allowedOrigins = DEFAULT_PERMIT_ALL;, +			this.allowedMethods = DEFAULT_PERMIT_METHODS;, +			this.resolvedMethods = DEFAULT_PERMIT_METHODS, +					.stream().map(HttpMethod::resolve).collect(Collectors.toList());, +			this.allowedHeaders = DEFAULT_PERMIT_ALL;, +			this.maxAge = 1800L;, +	 * Combine the non-null properties of the supplied, +	 * {@code CorsConfiguration} with this one.]