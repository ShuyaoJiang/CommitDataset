[+++ b/spring-aop/src/main/java/org/springframework/aop/TargetClassAware.java, + * Copyright 2002-2015 the original author or authors., + * (via {@link org.springframework.aop.framework.Advised}), +++ b/spring-aop/src/main/java/org/springframework/aop/TargetClassAware.java, + * Copyright 2002-2015 the original author or authors., + * (via {@link org.springframework.aop.framework.Advised}), +++ b/spring-aop/src/main/java/org/springframework/aop/framework/Advised.java, + * Copyright 2002-2015 the original author or authors., + * Interceptors and other advice, Advisors, and the proxied interfaces., +	 * Return the interfaces proxied by the AOP proxy., +	 * <p>Will not include the target class, which may also be proxied., +	 * Change the {@code TargetSource} used by this {@code Advised} object., +	 * <p>Only works if the configuration isn't {@linkplain #isFrozen frozen}., +	 * Return the {@code TargetSource} used by this {@code Advised} object., +	 * {@link ThreadLocal} for retrieval via the {@link AopContext} class., +	 * <p>It can be necessary to expose the proxy if an advised object needs, +	 * to invoke a method on itself with advice applied. Otherwise, if an, +	 * advised object invokes a method on {@code this}, no advice will be applied., +	 * <p>Default is {@code false}, for optimal performance., +	 * Return whether the factory should expose the proxy as a {@link ThreadLocal}., +	 * <p>It can be necessary to expose the proxy if an advised object needs, +	 * to invoke a method on itself with advice applied. Otherwise, if an, +	 * advised object invokes a method on {@code this}, no advice will be applied., +	 * <p>Getting the proxy is analogous to an EJB calling {@code getEJBObject()}., +++ b/spring-aop/src/main/java/org/springframework/aop/TargetClassAware.java, + * Copyright 2002-2015 the original author or authors., + * (via {@link org.springframework.aop.framework.Advised}), +++ b/spring-aop/src/main/java/org/springframework/aop/framework/Advised.java, + * Copyright 2002-2015 the original author or authors., + * Interceptors and other advice, Advisors, and the proxied interfaces., +	 * Return the interfaces proxied by the AOP proxy., +	 * <p>Will not include the target class, which may also be proxied., +	 * Change the {@code TargetSource} used by this {@code Advised} object., +	 * <p>Only works if the configuration isn't {@linkplain #isFrozen frozen}., +	 * Return the {@code TargetSource} used by this {@code Advised} object., +	 * {@link ThreadLocal} for retrieval via the {@link AopContext} class., +	 * <p>It can be necessary to expose the proxy if an advised object needs, +	 * to invoke a method on itself with advice applied. Otherwise, if an, +	 * advised object invokes a method on {@code this}, no advice will be applied., +	 * <p>Default is {@code false}, for optimal performance., +	 * Return whether the factory should expose the proxy as a {@link ThreadLocal}., +	 * <p>It can be necessary to expose the proxy if an advised object needs, +	 * to invoke a method on itself with advice applied. Otherwise, if an, +	 * advised object invokes a method on {@code this}, no advice will be applied., +	 * <p>Getting the proxy is analogous to an EJB calling {@code getEJBObject()}., +++ b/spring-aop/src/main/java/org/springframework/aop/framework/AopProxyUtils.java, +	 * not only a top-level proxy but any number of nested proxies as well &mdash;, +	 * @return the ultimate target class (or the plain class of the given, +	 * object as fallback; never {@code null}), +++ b/spring-aop/src/main/java/org/springframework/aop/TargetClassAware.java, + * Copyright 2002-2015 the original author or authors., + * (via {@link org.springframework.aop.framework.Advised}), +++ b/spring-aop/src/main/java/org/springframework/aop/framework/Advised.java, + * Copyright 2002-2015 the original author or authors., + * Interceptors and other advice, Advisors, and the proxied interfaces., +	 * Return the interfaces proxied by the AOP proxy., +	 * <p>Will not include the target class, which may also be proxied., +	 * Change the {@code TargetSource} used by this {@code Advised} object., +	 * <p>Only works if the configuration isn't {@linkplain #isFrozen frozen}., +	 * Return the {@code TargetSource} used by this {@code Advised} object., +	 * {@link ThreadLocal} for retrieval via the {@link AopContext} class., +	 * <p>It can be necessary to expose the proxy if an advised object needs, +	 * to invoke a method on itself with advice applied. Otherwise, if an, +	 * advised object invokes a method on {@code this}, no advice will be applied., +	 * <p>Default is {@code false}, for optimal performance., +	 * Return whether the factory should expose the proxy as a {@link ThreadLocal}., +	 * <p>It can be necessary to expose the proxy if an advised object needs, +	 * to invoke a method on itself with advice applied. Otherwise, if an, +	 * advised object invokes a method on {@code this}, no advice will be applied., +	 * <p>Getting the proxy is analogous to an EJB calling {@code getEJBObject()}., +++ b/spring-aop/src/main/java/org/springframework/aop/framework/AopProxyUtils.java, +	 * not only a top-level proxy but any number of nested proxies as well &mdash;, +	 * @return the ultimate target class (or the plain class of the given, +	 * object as fallback; never {@code null}), +++ b/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java, + * Copyright 2002-2015 the original author or authors., + *, + * <p>Mainly for internal use within Spring's AOP support., +	 * <p>This method additionally checks if the given object is an instance, +	 * of {@link SpringProxy}., +	 * <p>This method goes beyond the implementation of, +	 * {@link Proxy#isProxyClass(Class)} by additionally checking if the, +	 * given object is an instance of {@link SpringProxy}., +	 * Check whether the given object is a CGLIB proxy., +	 * <p>This method goes beyond the implementation of, +	 * {@link ClassUtils#isCglibProxy(Object)} by additionally checking if, +	 * the given object is an instance of {@link SpringProxy}., +	 * <p>Returns the target class for an AOP proxy or the plain class otherwise.]