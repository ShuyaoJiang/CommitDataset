[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Configuration.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Configuration.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +import org.springframework.core.io.DescriptiveResource;, +import org.springframework.core.io.Resource;, +import org.springframework.core.type.AnnotationMetadata;, +import org.springframework.core.type.StandardAnnotationMetadata;, +import org.springframework.core.type.classreading.MetadataReader;, +final class ConfigurationClass {, +	private final AnnotationMetadata metadata;, +	private final Resource resource;, +	public ConfigurationClass(MetadataReader metadataReader, String beanName) {, +		this.metadata = metadataReader.getAnnotationMetadata();, +		this.resource = metadataReader.getResource();, +		this.beanName = beanName;, +	public ConfigurationClass(Class clazz, String beanName) {, +		this.metadata = new StandardAnnotationMetadata(clazz);, +		this.resource = new DescriptiveResource(clazz.toString());, +		this.beanName = beanName;, +, +	public AnnotationMetadata getMetadata() {, +		return this.metadata;, +	}, +, +	public Resource getResource() {, +		return this.resource;, +	}, +, +		return ClassUtils.getShortName(getMetadata().getClassName());, +		return this.beanName;, +		this.methods.add(method);, +		String name = method.getMetadata().getMethodName();, +		Integer count = this.overloadedMethodMap.get(name);, +			this.overloadedMethodMap.put(name, count + 1);, +			this.overloadedMethodMap.put(name, 1);, +	public Set<ConfigurationClassMethod> getConfigurationMethods() {, +		return this.methods;, +		for (Map.Entry<String, Integer> entry : this.overloadedMethodMap.entrySet()) {, +		if (getMetadata().hasAnnotation(Configuration.class.getName())) {, +			if (getMetadata().isFinal()) {, +			for (ConfigurationClassMethod method : this.methods) {, +					getSimpleName()), new Location(getResource()));, +					getSimpleName(), count, methodName), new Location(getResource()));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Configuration.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +import org.springframework.core.io.DescriptiveResource;, +import org.springframework.core.io.Resource;, +import org.springframework.core.type.AnnotationMetadata;, +import org.springframework.core.type.StandardAnnotationMetadata;, +import org.springframework.core.type.classreading.MetadataReader;, +final class ConfigurationClass {, +	private final AnnotationMetadata metadata;, +	private final Resource resource;, +	public ConfigurationClass(MetadataReader metadataReader, String beanName) {, +		this.metadata = metadataReader.getAnnotationMetadata();, +		this.resource = metadataReader.getResource();, +		this.beanName = beanName;, +	public ConfigurationClass(Class clazz, String beanName) {, +		this.metadata = new StandardAnnotationMetadata(clazz);, +		this.resource = new DescriptiveResource(clazz.toString());, +		this.beanName = beanName;, +, +	public AnnotationMetadata getMetadata() {, +		return this.metadata;, +	}, +, +	public Resource getResource() {, +		return this.resource;, +	}, +, +		return ClassUtils.getShortName(getMetadata().getClassName());, +		return this.beanName;, +		this.methods.add(method);, +		String name = method.getMetadata().getMethodName();, +		Integer count = this.overloadedMethodMap.get(name);, +			this.overloadedMethodMap.put(name, count + 1);, +			this.overloadedMethodMap.put(name, 1);, +	public Set<ConfigurationClassMethod> getConfigurationMethods() {, +		return this.methods;, +		for (Map.Entry<String, Integer> entry : this.overloadedMethodMap.entrySet()) {, +		if (getMetadata().hasAnnotation(Configuration.class.getName())) {, +			if (getMetadata().isFinal()) {, +			for (ConfigurationClassMethod method : this.methods) {, +					getSimpleName()), new Location(getResource()));, +					getSimpleName(), count, methodName), new Location(getResource()));, +++ /dev/null, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Configuration.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +import org.springframework.core.io.DescriptiveResource;, +import org.springframework.core.io.Resource;, +import org.springframework.core.type.AnnotationMetadata;, +import org.springframework.core.type.StandardAnnotationMetadata;, +import org.springframework.core.type.classreading.MetadataReader;, +final class ConfigurationClass {, +	private final AnnotationMetadata metadata;, +	private final Resource resource;, +	public ConfigurationClass(MetadataReader metadataReader, String beanName) {, +		this.metadata = metadataReader.getAnnotationMetadata();, +		this.resource = metadataReader.getResource();, +		this.beanName = beanName;]