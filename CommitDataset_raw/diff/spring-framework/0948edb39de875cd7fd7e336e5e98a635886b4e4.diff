[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +		if (configClass.getMetadata().isAnnotated(Component.class.getName())) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +		if (configClass.getMetadata().isAnnotated(Component.class.getName())) {, +++ b/spring-context/src/test/java/org/springframework/context/annotation/NestedConfigurationClassTests.java, + * Copyright 2002-2018 the original author or authors., +	@Test, +	public void twoLevelsOnNonAnnotatedBaseClass() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(L0ConfigConcrete.class);, +		ctx.refresh();, +, +		assertFalse(ctx.getBeanFactory().containsSingleton("l0ConfigConcrete"));, +		Object l0i1 = ctx.getBean(L0ConfigConcrete.class);, +		Object l0i2 = ctx.getBean(L0ConfigConcrete.class);, +		assertTrue(l0i1 == l0i2);, +, +		Object l1i1 = ctx.getBean(L0ConfigConcrete.L1ConfigEmpty.class);, +		Object l1i2 = ctx.getBean(L0ConfigConcrete.L1ConfigEmpty.class);, +		assertTrue(l1i1 != l1i2);, +, +		Object l2i1 = ctx.getBean(L0ConfigConcrete.L1ConfigEmpty.L2ConfigEmpty.class);, +		Object l2i2 = ctx.getBean(L0ConfigConcrete.L1ConfigEmpty.L2ConfigEmpty.class);, +		assertTrue(l2i1 == l2i2);, +		assertNotEquals(l2i1.toString(), l2i2.toString());, +	}, +, +, +	static class L0ConfigBase {, +, +		@Component, +		@Scope("prototype"), +		static class L1ConfigEmpty {, +, +			@Component, +			@Scope(value = "prototype", proxyMode = ScopedProxyMode.TARGET_CLASS), +			protected static class L2ConfigEmpty {, +			}, +		}, +	}, +, +, +	@Component, +	@Lazy, +	static class L0ConfigConcrete extends L0ConfigBase {, +	}, +]