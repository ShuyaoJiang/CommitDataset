[+++ b/spring-aspects/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, + * Copyright 2002-2015 the original author or authors., +	@CacheEvict(cacheNames = "testCache", allEntries = true), +	@CacheEvict(cacheNames = "testCache", beforeInvocation = true), +	@CacheEvict(cacheNames = "testCache", key = "#p0"), +	@CacheEvict(cacheNames = "testCache", key = "#p0", beforeInvocation = true), +	@Cacheable(cacheNames = "testCache", key = "#p0"), +	@Cacheable("testCache"), +	@Cacheable(cacheNames = "testCache", key = "#root.methodName + #root.caches[0].name"), +	@Cacheable(cacheNames = "testCache", key = "#root.methodName + #root.method.name + #root.targetClass + #root.target"), +	@Cacheable(cacheNames = "testCache", keyGenerator = "customKyeGenerator"), +	@Cacheable(cacheNames = "testCache", keyGenerator = "unknownBeanName"), +	@Cacheable(cacheNames = "testCache", cacheManager = "customCacheManager"), +	@Cacheable(cacheNames = "testCache", cacheManager = "unknownBeanName"), +	@CachePut(cacheNames = "testCache", condition = "#arg.equals(3)"), +	@Caching(evict = { @CacheEvict("primary"), @CacheEvict(cacheNames = "secondary", key = "#p0") }), +	@Caching(cacheable = { @Cacheable(cacheNames = "primary", key = "#root.methodName") }, evict = { @CacheEvict("secondary") }), +	@Caching(cacheable = { @Cacheable(cacheNames = "primary", condition = "#p0 == 3") }, evict = { @CacheEvict("secondary") }), +	@CachePut(cacheNames = "primary", key = "#result.id"), +++ b/spring-aspects/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, + * Copyright 2002-2015 the original author or authors., +	@CacheEvict(cacheNames = "testCache", allEntries = true), +	@CacheEvict(cacheNames = "testCache", beforeInvocation = true), +	@CacheEvict(cacheNames = "testCache", key = "#p0"), +	@CacheEvict(cacheNames = "testCache", key = "#p0", beforeInvocation = true), +	@Cacheable(cacheNames = "testCache", key = "#p0"), +	@Cacheable("testCache"), +	@Cacheable(cacheNames = "testCache", key = "#root.methodName + #root.caches[0].name"), +	@Cacheable(cacheNames = "testCache", key = "#root.methodName + #root.method.name + #root.targetClass + #root.target"), +	@Cacheable(cacheNames = "testCache", keyGenerator = "customKyeGenerator"), +	@Cacheable(cacheNames = "testCache", keyGenerator = "unknownBeanName"), +	@Cacheable(cacheNames = "testCache", cacheManager = "customCacheManager"), +	@Cacheable(cacheNames = "testCache", cacheManager = "unknownBeanName"), +	@CachePut(cacheNames = "testCache", condition = "#arg.equals(3)"), +	@Caching(evict = { @CacheEvict("primary"), @CacheEvict(cacheNames = "secondary", key = "#p0") }), +	@Caching(cacheable = { @Cacheable(cacheNames = "primary", key = "#root.methodName") }, evict = { @CacheEvict("secondary") }), +	@Caching(cacheable = { @Cacheable(cacheNames = "primary", condition = "#p0 == 3") }, evict = { @CacheEvict("secondary") }), +	@CachePut(cacheNames = "primary", key = "#result.id"), +++ b/spring-aspects/src/test/java/org/springframework/cache/config/DefaultCacheableService.java, + * Copyright 2002-2015 the original author or authors., +	@CacheEvict(cacheNames = "testCache", allEntries = true), +	@CacheEvict(cacheNames = "testCache", beforeInvocation = true), +	@CacheEvict(cacheNames = "testCache", key = "#p0"), +	@CacheEvict(cacheNames = "testCache", key = "#p0", beforeInvocation = true), +	@Cacheable(cacheNames = "testCache", condition = "#classField == 3"), +	@Cacheable(cacheNames = "testCache", unless = "#result > 10"), +	@Cacheable(cacheNames = "testCache", key = "#p0"), +	@Cacheable("testCache"), +	@Cacheable(cacheNames = "testCache", key = "#root.methodName"), +	@Cacheable(cacheNames = "testCache", key = "#root.methodName + #root.method.name + #root.targetClass + #root.target"), +	@Cacheable(cacheNames = "testCache", keyGenerator = "customKeyGenerator"), +	@Cacheable(cacheNames = "testCache", keyGenerator = "unknownBeanName"), +	@Cacheable(cacheNames = "testCache", cacheManager = "customCacheManager"), +	@Cacheable(cacheNames = "testCache", cacheManager = "unknownBeanName"), +	@CachePut(cacheNames = "testCache", condition = "#arg.equals(3)"), +//FIXME	@Caching(evict = { @CacheEvict("primary"), @CacheEvict(cacheNames = "secondary", key = "#p0"), @CacheEvict(cacheNames = "primary", key = "#p0 + 'A'") }), +	@Caching(evict = { @CacheEvict("primary"), @CacheEvict(cacheNames = "secondary", key = "#p0") }), +	@Caching(cacheable = { @Cacheable(cacheNames = "primary", key = "#root.methodName") }, evict = { @CacheEvict("secondary") }), +	@Caching(cacheable = { @Cacheable(cacheNames = "primary", condition = "#p0 == 3") }, evict = { @CacheEvict("secondary") }), +	@CachePut(cacheNames = "primary", key = "#result.id"), +++ b/spring-aspects/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, + * Copyright 2002-2015 the original author or authors., +	@CacheEvict(cacheNames = "testCache", allEntries = true), +	@CacheEvict(cacheNames = "testCache", beforeInvocation = true), +	@CacheEvict(cacheNames = "testCache", key = "#p0"), +	@CacheEvict(cacheNames = "testCache", key = "#p0", beforeInvocation = true), +	@Cacheable(cacheNames = "testCache", key = "#p0"), +	@Cacheable("testCache"), +	@Cacheable(cacheNames = "testCache", key = "#root.methodName + #root.caches[0].name"), +	@Cacheable(cacheNames = "testCache", key = "#root.methodName + #root.method.name + #root.targetClass + #root.target"), +	@Cacheable(cacheNames = "testCache", keyGenerator = "customKyeGenerator"), +	@Cacheable(cacheNames = "testCache", keyGenerator = "unknownBeanName"), +	@Cacheable(cacheNames = "testCache", cacheManager = "customCacheManager"), +	@Cacheable(cacheNames = "testCache", cacheManager = "unknownBeanName"), +	@CachePut(cacheNames = "testCache", condition = "#arg.equals(3)"), +	@Caching(evict = { @CacheEvict("primary"), @CacheEvict(cacheNames = "secondary", key = "#p0") }), +	@Caching(cacheable = { @Cacheable(cacheNames = "primary", key = "#root.methodName") }, evict = { @CacheEvict("secondary") }), +	@Caching(cacheable = { @Cacheable(cacheNames = "primary", condition = "#p0 == 3") }, evict = { @CacheEvict("secondary") }), +	@CachePut(cacheNames = "primary", key = "#result.id"), +++ b/spring-aspects/src/test/java/org/springframework/cache/config/DefaultCacheableService.java, + * Copyright 2002-2015 the original author or authors., +	@CacheEvict(cacheNames = "testCache", allEntries = true), +	@CacheEvict(cacheNames = "testCache", beforeInvocation = true), +	@CacheEvict(cacheNames = "testCache", key = "#p0"), +	@CacheEvict(cacheNames = "testCache", key = "#p0", beforeInvocation = true), +	@Cacheable(cacheNames = "testCache", condition = "#classField == 3"), +	@Cacheable(cacheNames = "testCache", unless = "#result > 10"), +	@Cacheable(cacheNames = "testCache", key = "#p0"), +	@Cacheable("testCache"), +	@Cacheable(cacheNames = "testCache", key = "#root.methodName"), +	@Cacheable(cacheNames = "testCache", key = "#root.methodName + #root.method.name + #root.targetClass + #root.target"), +	@Cacheable(cacheNames = "testCache", keyGenerator = "customKeyGenerator"), +	@Cacheable(cacheNames = "testCache", keyGenerator = "unknownBeanName"), +	@Cacheable(cacheNames = "testCache", cacheManager = "customCacheManager"), +	@Cacheable(cacheNames = "testCache", cacheManager = "unknownBeanName"), +	@CachePut(cacheNames = "testCache", condition = "#arg.equals(3)"), +//FIXME	@Caching(evict = { @CacheEvict("primary"), @CacheEvict(cacheNames = "secondary", key = "#p0"), @CacheEvict(cacheNames = "primary", key = "#p0 + 'A'") }), +	@Caching(evict = { @CacheEvict("primary"), @CacheEvict(cacheNames = "secondary", key = "#p0") }), +	@Caching(cacheable = { @Cacheable(cacheNames = "primary", key = "#root.methodName") }, evict = { @CacheEvict("secondary") }), +	@Caching(cacheable = { @Cacheable(cacheNames = "primary", condition = "#p0 == 3") }, evict = { @CacheEvict("secondary") })]