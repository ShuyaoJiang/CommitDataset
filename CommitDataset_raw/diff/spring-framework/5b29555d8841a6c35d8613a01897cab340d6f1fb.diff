[+++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2CodecSupport.java, +		this.mimeTypes = Collections.unmodifiableList(, +				!ObjectUtils.isEmpty(mimeTypes) ? Arrays.asList(mimeTypes) : JSON_MIME_TYPES );, +	protected List<MimeType> getMimeTypes() {, +		return mimeTypes;, +	}, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2CodecSupport.java, +		this.mimeTypes = Collections.unmodifiableList(, +				!ObjectUtils.isEmpty(mimeTypes) ? Arrays.asList(mimeTypes) : JSON_MIME_TYPES );, +	protected List<MimeType> getMimeTypes() {, +		return mimeTypes;, +	}, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +		return getMimeTypes();, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2CodecSupport.java, +		this.mimeTypes = Collections.unmodifiableList(, +				!ObjectUtils.isEmpty(mimeTypes) ? Arrays.asList(mimeTypes) : JSON_MIME_TYPES );, +	protected List<MimeType> getMimeTypes() {, +		return mimeTypes;, +	}, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +		return getMimeTypes();, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonEncoder.java, +		return getMimeTypes();, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2CodecSupport.java, +		this.mimeTypes = Collections.unmodifiableList(, +				!ObjectUtils.isEmpty(mimeTypes) ? Arrays.asList(mimeTypes) : JSON_MIME_TYPES );, +	protected List<MimeType> getMimeTypes() {, +		return mimeTypes;, +	}, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +		return getMimeTypes();, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonEncoder.java, +		return getMimeTypes();, +++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonDecoderTests.java, +import java.nio.charset.StandardCharsets;, +import org.springframework.util.MimeType;, +	@Test(expected = UnsupportedOperationException.class), +	public void canDecodeWithProvidedMimeType() {, +		MimeType textJavascript = new MimeType("text", "javascript", StandardCharsets.UTF_8);, +		Jackson2JsonDecoder decoder = new Jackson2JsonDecoder(new ObjectMapper(), textJavascript);, +		assertEquals(1, decoder.getDecodableMimeTypes().size());, +		assertTrue(decoder.getDecodableMimeTypes().contains(textJavascript));, +, +		assertTrue(decoder.canDecode(forClass(Pojo.class), textJavascript));, +		assertFalse(decoder.canDecode(forClass(Pojo.class), APPLICATION_JSON));, +, +		// Validate immutability of mime types list, +		decoder.getMimeTypes().add(new MimeType("text", "ecmascript"));, +		assertEquals(1, decoder.getDecodableMimeTypes().size());, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2CodecSupport.java, +		this.mimeTypes = Collections.unmodifiableList(, +				!ObjectUtils.isEmpty(mimeTypes) ? Arrays.asList(mimeTypes) : JSON_MIME_TYPES );, +	protected List<MimeType> getMimeTypes() {, +		return mimeTypes;, +	}, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +		return getMimeTypes();, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonEncoder.java, +		return getMimeTypes();, +++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonDecoderTests.java, +import java.nio.charset.StandardCharsets;, +import org.springframework.util.MimeType;, +	@Test(expected = UnsupportedOperationException.class), +	public void canDecodeWithProvidedMimeType() {, +		MimeType textJavascript = new MimeType("text", "javascript", StandardCharsets.UTF_8);, +		Jackson2JsonDecoder decoder = new Jackson2JsonDecoder(new ObjectMapper(), textJavascript);, +		assertEquals(1, decoder.getDecodableMimeTypes().size());, +		assertTrue(decoder.getDecodableMimeTypes().contains(textJavascript));, +, +		assertTrue(decoder.canDecode(forClass(Pojo.class), textJavascript));, +		assertFalse(decoder.canDecode(forClass(Pojo.class), APPLICATION_JSON));, +, +		// Validate immutability of mime types list, +		decoder.getMimeTypes().add(new MimeType("text", "ecmascript"));, +		assertEquals(1, decoder.getDecodableMimeTypes().size());, +	}, +, +++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonEncoderTests.java, +import java.nio.charset.StandardCharsets;, +import com.fasterxml.jackson.databind.ObjectMapper;, +import static org.junit.Assert.assertEquals;, +import org.springframework.util.MimeType;, +	@Test(expected = UnsupportedOperationException.class), +	public void canEncodeWithCustomMimeType() {, +		ResolvableType pojoType = ResolvableType.forClass(Pojo.class);, +		MimeType textJavascript = new MimeType("text", "javascript", StandardCharsets.UTF_8);, +		Jackson2JsonEncoder encoder = new Jackson2JsonEncoder(new ObjectMapper(), textJavascript);, +		assertEquals(1, encoder.getEncodableMimeTypes().size());, +		assertTrue(encoder.getEncodableMimeTypes().contains(textJavascript));, +, +		assertTrue(encoder.canEncode(pojoType, textJavascript));, +, +		// Validate immutability of mime types list, +		encoder.getMimeTypes().add(new MimeType("text", "ecmascript"));, +		assertEquals(1, encoder.getEncodableMimeTypes().size());, +	}, +]