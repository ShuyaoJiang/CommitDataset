[+++ b/org.springframework.orm/src/main/java/org/springframework/orm/jdo/JdoTransactionManager.java, +import org.springframework.transaction.support.DelegatingTransactionDefinition;, +		PersistenceManager pm;, +			final int timeoutToUse = determineTimeout(definition);, +			Object transactionData = getJdoDialect().beginTransaction(pm.currentTransaction(),, +					new DelegatingTransactionDefinition(definition) {, +						@Override, +						public int getTimeout() {, +							return timeoutToUse;, +						}, +					});, +			if (timeoutToUse != TransactionDefinition.TIMEOUT_DEFAULT) {, +				txObject.getPersistenceManagerHolder().setTimeoutInSeconds(timeoutToUse);, +					if (timeoutToUse != TransactionDefinition.TIMEOUT_DEFAULT) {, +						conHolder.setTimeoutInSeconds(timeoutToUse);, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/jdo/JdoTransactionManager.java, +import org.springframework.transaction.support.DelegatingTransactionDefinition;, +		PersistenceManager pm;, +			final int timeoutToUse = determineTimeout(definition);, +			Object transactionData = getJdoDialect().beginTransaction(pm.currentTransaction(),, +					new DelegatingTransactionDefinition(definition) {, +						@Override, +						public int getTimeout() {, +							return timeoutToUse;, +						}, +					});, +			if (timeoutToUse != TransactionDefinition.TIMEOUT_DEFAULT) {, +				txObject.getPersistenceManagerHolder().setTimeoutInSeconds(timeoutToUse);, +					if (timeoutToUse != TransactionDefinition.TIMEOUT_DEFAULT) {, +						conHolder.setTimeoutInSeconds(timeoutToUse);, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java, +import org.springframework.transaction.support.DelegatingTransactionDefinition;, +			final int timeoutToUse = determineTimeout(definition);, +			Object transactionData = getJpaDialect().beginTransaction(em,, +					new DelegatingTransactionDefinition(definition) {, +						@Override, +						public int getTimeout() {, +							return timeoutToUse;, +						}, +					});, +			if (timeoutToUse != TransactionDefinition.TIMEOUT_DEFAULT) {, +				txObject.getEntityManagerHolder().setTimeoutInSeconds(timeoutToUse);, +					if (timeoutToUse != TransactionDefinition.TIMEOUT_DEFAULT) {, +						conHolder.setTimeoutInSeconds(timeoutToUse);, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/jdo/JdoTransactionManager.java, +import org.springframework.transaction.support.DelegatingTransactionDefinition;, +		PersistenceManager pm;, +			final int timeoutToUse = determineTimeout(definition);, +			Object transactionData = getJdoDialect().beginTransaction(pm.currentTransaction(),, +					new DelegatingTransactionDefinition(definition) {, +						@Override, +						public int getTimeout() {, +							return timeoutToUse;, +						}, +					});, +			if (timeoutToUse != TransactionDefinition.TIMEOUT_DEFAULT) {, +				txObject.getPersistenceManagerHolder().setTimeoutInSeconds(timeoutToUse);, +					if (timeoutToUse != TransactionDefinition.TIMEOUT_DEFAULT) {, +						conHolder.setTimeoutInSeconds(timeoutToUse);, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java, +import org.springframework.transaction.support.DelegatingTransactionDefinition;, +			final int timeoutToUse = determineTimeout(definition);, +			Object transactionData = getJpaDialect().beginTransaction(em,, +					new DelegatingTransactionDefinition(definition) {, +						@Override, +						public int getTimeout() {, +							return timeoutToUse;, +						}, +					});, +			if (timeoutToUse != TransactionDefinition.TIMEOUT_DEFAULT) {, +				txObject.getEntityManagerHolder().setTimeoutInSeconds(timeoutToUse);, +					if (timeoutToUse != TransactionDefinition.TIMEOUT_DEFAULT) {, +						conHolder.setTimeoutInSeconds(timeoutToUse);, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaDialect.java, + * Copyright 2002-2009 the original author or authors., + * Hibernate EntityManager. Developed and tested against Hibernate 3.3., +		if (definition.getTimeout() != TransactionDefinition.TIMEOUT_DEFAULT) {, +			getSession(entityManager).getTransaction().setTimeout(definition.getTimeout());, +		}, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/jdo/JdoTransactionManager.java, +import org.springframework.transaction.support.DelegatingTransactionDefinition;, +		PersistenceManager pm;, +			final int timeoutToUse = determineTimeout(definition);, +			Object transactionData = getJdoDialect().beginTransaction(pm.currentTransaction(),, +					new DelegatingTransactionDefinition(definition) {, +						@Override, +						public int getTimeout() {, +							return timeoutToUse;, +						}, +					});, +			if (timeoutToUse != TransactionDefinition.TIMEOUT_DEFAULT) {, +				txObject.getPersistenceManagerHolder().setTimeoutInSeconds(timeoutToUse);, +					if (timeoutToUse != TransactionDefinition.TIMEOUT_DEFAULT) {, +						conHolder.setTimeoutInSeconds(timeoutToUse);, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java, +import org.springframework.transaction.support.DelegatingTransactionDefinition;, +			final int timeoutToUse = determineTimeout(definition);, +			Object transactionData = getJpaDialect().beginTransaction(em,, +					new DelegatingTransactionDefinition(definition) {, +						@Override]