[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/JettyWebSocketClient.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +public class JettyWebSocketClient implements WebSocketClient, Lifecycle {, +, +	private static final Log logger = LogFactory.getLog(JettyWebSocketClient.class);, +, +		if (!this.externallyManaged) {, +		if (!this.externallyManaged) {, +		return this.jettyClient.isRunning();, +					if (logger.isDebugEnabled()) {, +						logger.debug("Connecting to " + url);, +					}, +					Object jettyHandler = createHandler(url, handler, completionMono);, +					ClientUpgradeRequest request = new ClientUpgradeRequest();, +					request.setSubProtocols(handler.getSubProtocols());, +					return this.jettyClient.connect(jettyHandler, url, request, upgradeListener);, +	private Object createHandler(URI url, WebSocketHandler handler, MonoProcessor<Void> completion) {, +					if (logger.isDebugEnabled()) {, +						logger.debug("Connected to " + url);, +					}, +					session.getUpgradeResponse().getHeaders().forEach(responseHeaders::put);, +					String protocol = responseHeaders.getFirst("Sec-WebSocket-Protocol");, +					HandshakeInfo info = new HandshakeInfo(url, responseHeaders, Mono.empty(), protocol);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/JettyWebSocketClient.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +public class JettyWebSocketClient implements WebSocketClient, Lifecycle {, +, +	private static final Log logger = LogFactory.getLog(JettyWebSocketClient.class);, +, +		if (!this.externallyManaged) {, +		if (!this.externallyManaged) {, +		return this.jettyClient.isRunning();, +					if (logger.isDebugEnabled()) {, +						logger.debug("Connecting to " + url);, +					}, +					Object jettyHandler = createHandler(url, handler, completionMono);, +					ClientUpgradeRequest request = new ClientUpgradeRequest();, +					request.setSubProtocols(handler.getSubProtocols());, +					return this.jettyClient.connect(jettyHandler, url, request, upgradeListener);, +	private Object createHandler(URI url, WebSocketHandler handler, MonoProcessor<Void> completion) {, +					if (logger.isDebugEnabled()) {, +						logger.debug("Connected to " + url);, +					}, +					session.getUpgradeResponse().getHeaders().forEach(responseHeaders::put);, +					String protocol = responseHeaders.getFirst("Sec-WebSocket-Protocol");, +					HandshakeInfo info = new HandshakeInfo(url, responseHeaders, Mono.empty(), protocol);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNettyWebSocketClient.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +public class ReactorNettyWebSocketClient implements WebSocketClient {, +, +	private static final Log logger = LogFactory.getLog(ReactorNettyWebSocketClient.class);, +, +	public Mono<Void> execute(URI url, HttpHeaders requestHeaders, WebSocketHandler handler) {, +		if (logger.isDebugEnabled()) {, +			logger.debug("Connecting to " + url);, +		}, +				.headers(nettyHeaders -> setNettyHeaders(requestHeaders, nettyHeaders)), +				.websocket(StringUtils.collectionToCommaDelimitedString(handler.getSubProtocols())), +					if (logger.isDebugEnabled()) {, +						logger.debug("Connected to " + url);, +					}, +					HttpHeaders responseHeaders = toHttpHeaders(inbound);, +					String protocol = responseHeaders.getFirst("Sec-WebSocket-Protocol");, +					HandshakeInfo info = new HandshakeInfo(url, responseHeaders, Mono.empty(), protocol);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/JettyWebSocketClient.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +public class JettyWebSocketClient implements WebSocketClient, Lifecycle {, +, +	private static final Log logger = LogFactory.getLog(JettyWebSocketClient.class);, +, +		if (!this.externallyManaged) {, +		if (!this.externallyManaged) {, +		return this.jettyClient.isRunning();, +					if (logger.isDebugEnabled()) {, +						logger.debug("Connecting to " + url);, +					}, +					Object jettyHandler = createHandler(url, handler, completionMono);, +					ClientUpgradeRequest request = new ClientUpgradeRequest();, +					request.setSubProtocols(handler.getSubProtocols());, +					return this.jettyClient.connect(jettyHandler, url, request, upgradeListener);, +	private Object createHandler(URI url, WebSocketHandler handler, MonoProcessor<Void> completion) {, +					if (logger.isDebugEnabled()) {, +						logger.debug("Connected to " + url);, +					}, +					session.getUpgradeResponse().getHeaders().forEach(responseHeaders::put);, +					String protocol = responseHeaders.getFirst("Sec-WebSocket-Protocol");, +					HandshakeInfo info = new HandshakeInfo(url, responseHeaders, Mono.empty(), protocol);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/client/ReactorNettyWebSocketClient.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +public class ReactorNettyWebSocketClient implements WebSocketClient {, +, +	private static final Log logger = LogFactory.getLog(ReactorNettyWebSocketClient.class);, +, +	public Mono<Void> execute(URI url, HttpHeaders requestHeaders, WebSocketHandler handler) {, +		if (logger.isDebugEnabled()) {]