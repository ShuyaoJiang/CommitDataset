[+++ b/spring-jdbc/src/test/java/org/springframework/jdbc/datasource/lookup/MapDataSourceLookupTests.java, + * Copyright 2002-2015 the original author or authors., +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +	@Rule, +	public final ExpectedException exception = ExpectedException.none();, +, +	@Test, +	@SuppressWarnings({ "unchecked", "rawtypes" }), +	public void getDataSourcesReturnsUnmodifiableMap() throws Exception {, +		MapDataSourceLookup lookup = new MapDataSourceLookup();, +, +		exception.expect(UnsupportedOperationException.class);, +	public void lookupSunnyDay() throws Exception {, +	public void setDataSourcesIsAnIdempotentOperation() throws Exception {, +	public void addingDataSourcePermitsOverride() throws Exception {, +	@Test, +	@SuppressWarnings({ "unchecked", "rawtypes" }), +	public void getDataSourceWhereSuppliedMapHasNonDataSourceTypeUnderSpecifiedKey() throws Exception {, +		Map dataSources = new HashMap();, +		MapDataSourceLookup lookup = new MapDataSourceLookup(dataSources);, +, +		exception.expect(ClassCastException.class);, +	@Test, +	public void getDataSourceWhereSuppliedMapHasNoEntryForSpecifiedKey() throws Exception {, +, +		exception.expect(DataSourceLookupFailureException.class);, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/datasource/lookup/MapDataSourceLookupTests.java, + * Copyright 2002-2015 the original author or authors., +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +	@Rule, +	public final ExpectedException exception = ExpectedException.none();, +, +	@Test, +	@SuppressWarnings({ "unchecked", "rawtypes" }), +	public void getDataSourcesReturnsUnmodifiableMap() throws Exception {, +		MapDataSourceLookup lookup = new MapDataSourceLookup();, +, +		exception.expect(UnsupportedOperationException.class);, +	public void lookupSunnyDay() throws Exception {, +	public void setDataSourcesIsAnIdempotentOperation() throws Exception {, +	public void addingDataSourcePermitsOverride() throws Exception {, +	@Test, +	@SuppressWarnings({ "unchecked", "rawtypes" }), +	public void getDataSourceWhereSuppliedMapHasNonDataSourceTypeUnderSpecifiedKey() throws Exception {, +		Map dataSources = new HashMap();, +		MapDataSourceLookup lookup = new MapDataSourceLookup(dataSources);, +, +		exception.expect(ClassCastException.class);, +	@Test, +	public void getDataSourceWhereSuppliedMapHasNoEntryForSpecifiedKey() throws Exception {, +, +		exception.expect(DataSourceLookupFailureException.class);, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/support/CustomSQLExceptionTranslatorRegistrarTests.java, + * Copyright 2002-2015 the original author or authors., + * Tests for custom {@link SQLExceptionTranslator}., +	public void customErrorCodeTranslation() {, +		try (ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(, +			"test-custom-translators-context.xml", CustomSQLExceptionTranslatorRegistrarTests.class)) {, +	}]