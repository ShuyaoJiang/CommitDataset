[+++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/method/HandlerMethodArgumentResolver.java, +import org.reactivestreams.Publisher;, +, +	/**, +	 * The returned Publisher must produce a single value. As Reactive Streams, +	 * does not allow publishing null values, if the value may be {@code null}, +	 * use {@link java.util.Optional#ofNullable(Object)} to wrap it., +	 */, +	Publisher<Object> resolveArgument(MethodParameter parameter, ReactiveServerHttpRequest request);, +, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/method/HandlerMethodArgumentResolver.java, +import org.reactivestreams.Publisher;, +, +	/**, +	 * The returned Publisher must produce a single value. As Reactive Streams, +	 * does not allow publishing null values, if the value may be {@code null}, +	 * use {@link java.util.Optional#ofNullable(Object)} to wrap it., +	 */, +	Publisher<Object> resolveArgument(MethodParameter parameter, ReactiveServerHttpRequest request);, +, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/method/InvocableHandlerMethod.java, +import java.util.Collections;, +import java.util.Optional;, +, +import org.reactivestreams.Publisher;, +import reactor.Publishers;, +import reactor.fn.tuple.Tuple;, +import reactor.rx.Streams;, +	public Publisher<Object> invokeForRequest(ReactiveServerHttpRequest request,, +			Object... providedArgs) {, +, +		List<Publisher<Object>> argPublishers = getMethodArguments(request, providedArgs);, +, +		Publisher<Object[]> argValues = (!argPublishers.isEmpty() ?, +				Streams.zip(argPublishers, this::unwrapOptionalArgValues) : Publishers.just(new Object[0]));, +, +		return Publishers.map(argValues, args -> {, +						getMethod().getName() + "] method with arguments " +, +						Collections.singletonList(argPublishers));, +			Object returnValue = null;, +			try {, +				returnValue = doInvoke(args);, +			}, +			catch (Exception ex) {, +				// TODO: how to best handle error inside map? (also wrapping hides original ex), +				throw new IllegalStateException(ex);, +			}, +		});, +	private List<Publisher<Object>> getMethodArguments(ReactiveServerHttpRequest request,, +			Object... providedArgs) {, +, +		List<Publisher<Object>> valuePublishers = new ArrayList<>(parameters.length);, +			Object value = resolveProvidedArgument(parameter, providedArgs);, +			if (value != null) {, +				valuePublishers.add(Publishers.just(value));, +			boolean resolved = false;, +						valuePublishers.add(resolver.resolveArgument(parameter, request));, +						resolved = true;, +						String msg = buildArgErrorMessage("Error resolving argument", i);, +						valuePublishers.add(Publishers.error(new IllegalStateException(msg, ex)));, +						break;, +			if (!resolved) {, +				String msg = buildArgErrorMessage("No suitable resolver for argument", i);, +				valuePublishers.add(Publishers.error(new IllegalStateException(msg)));, +				break;, +		return valuePublishers;, +	private String buildArgErrorMessage(String message, int index) {, +	private void unwrapOptionalArgValues(Object[] args) {, +		for (int i = 0; i < args.length; i++) {, +			if (args[i] instanceof Optional) {, +				Optional optional = (Optional) args[i];, +				args[i] = optional.isPresent() ? optional.get() : null;, +			}, +		}, +	}, +, +	private Object[] unwrapOptionalArgValues(Tuple tuple) {, +		Object[] args = new Object[tuple.size()];, +		for (int i = 0; i < tuple.size(); i++) {, +			args[i] = tuple.get(i);, +			if (args[i] instanceof Optional) {, +				Optional optional = (Optional) args[i];, +				args[i] = optional.isPresent() ? optional.get() : null;, +			}, +		}, +		return args;, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/method/HandlerMethodArgumentResolver.java, +import org.reactivestreams.Publisher;, +, +	/**, +	 * The returned Publisher must produce a single value. As Reactive Streams, +	 * does not allow publishing null values, if the value may be {@code null}, +	 * use {@link java.util.Optional#ofNullable(Object)} to wrap it., +	 */, +	Publisher<Object> resolveArgument(MethodParameter parameter, ReactiveServerHttpRequest request);, +, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/method/InvocableHandlerMethod.java, +import java.util.Collections;]