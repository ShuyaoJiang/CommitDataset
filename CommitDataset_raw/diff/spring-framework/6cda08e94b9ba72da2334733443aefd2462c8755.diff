[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +import org.springframework.http.codec.Jackson2ServerHttpMessageReader;, +import org.springframework.http.codec.Jackson2ServerHttpMessageWriter;, +			readers.add(new Jackson2ServerHttpMessageReader(new  DecoderHttpMessageReader<>(new Jackson2JsonDecoder())));, +			writers.add(new Jackson2ServerHttpMessageWriter(new EncoderHttpMessageWriter<>(jacksonEncoder)));, +		writers.add(new Jackson2ServerHttpMessageWriter(new ServerSentEventHttpMessageWriter(sseDataEncoders)));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +import org.springframework.http.codec.Jackson2ServerHttpMessageReader;, +import org.springframework.http.codec.Jackson2ServerHttpMessageWriter;, +			readers.add(new Jackson2ServerHttpMessageReader(new  DecoderHttpMessageReader<>(new Jackson2JsonDecoder())));, +			writers.add(new Jackson2ServerHttpMessageWriter(new EncoderHttpMessageWriter<>(jacksonEncoder)));, +		writers.add(new Jackson2ServerHttpMessageWriter(new ServerSentEventHttpMessageWriter(sseDataEncoders)));, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/JacksonHintsIntegrationTests.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.reactive.result.method.annotation;, +, +import java.util.Arrays;, +import java.util.List;, +, +import com.fasterxml.jackson.annotation.JsonView;, +import static org.junit.Assert.assertEquals;, +import org.junit.Test;, +import reactor.core.publisher.Flux;, +import reactor.core.publisher.Mono;, +, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.context.annotation.ComponentScan;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.http.MediaType;, +import org.springframework.web.bind.annotation.GetMapping;, +import org.springframework.web.bind.annotation.PostMapping;, +import org.springframework.web.bind.annotation.RequestBody;, +import org.springframework.web.bind.annotation.RestController;, +import org.springframework.web.reactive.config.WebReactiveConfiguration;, +, +/**, + * @author Sebastien Deleuze, + */, +public class JacksonHintsIntegrationTests extends AbstractRequestMappingIntegrationTests {, +, +	@Override, +	protected ApplicationContext initApplicationContext() {, +		AnnotationConfigApplicationContext wac = new AnnotationConfigApplicationContext();, +		wac.register(WebConfig.class);, +		wac.refresh();, +		return wac;, +	}, +, +	@Test, +	public void jsonViewResponse() throws Exception {, +		String expected = "{\"withView1\":\"with\"}";, +		assertEquals(expected, performGet("/response/raw", MediaType.APPLICATION_JSON_UTF8, String.class).getBody());, +	}, +, +	@Test, +	public void jsonViewWithMonoResponse() throws Exception {, +		String expected = "{\"withView1\":\"with\"}";, +		assertEquals(expected, performGet("/response/mono", MediaType.APPLICATION_JSON_UTF8, String.class).getBody());, +	}, +, +	@Test, +	public void jsonViewWithFluxResponse() throws Exception {, +		String expected = "[{\"withView1\":\"with\"},{\"withView1\":\"with\"}]";, +		assertEquals(expected, performGet("/response/flux", MediaType.APPLICATION_JSON_UTF8, String.class).getBody());, +	}, +, +	@Test, +	public void jsonViewWithRequest() throws Exception {, +		String expected = "{\"withView1\":\"with\",\"withView2\":null,\"withoutView\":null}";, +		assertEquals(expected, performPost("/request/raw", MediaType.APPLICATION_JSON,, +				new JacksonViewBean("with", "with", "without"), MediaType.APPLICATION_JSON_UTF8, String.class).getBody());, +	}, +, +	@Test, +	public void jsonViewWithMonoRequest() throws Exception {, +		String expected = "{\"withView1\":\"with\",\"withView2\":null,\"withoutView\":null}";, +		assertEquals(expected, performPost("/request/mono", MediaType.APPLICATION_JSON,, +				new JacksonViewBean("with", "with", "without"), MediaType.APPLICATION_JSON_UTF8, String.class).getBody());, +	}, +, +	@Test, +	public void jsonViewWithFluxRequest() throws Exception {, +		String expected = "[{\"withView1\":\"with\",\"withView2\":null,\"withoutView\":null}," +, +				"{\"withView1\":\"with\",\"withView2\":null,\"withoutView\":null}]";]