[+++ b/spring-web/src/main/java/org/springframework/web/method/annotation/RequestParamMapMethodArgumentResolver.java, +import java.util.Collection;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.Part;, +import org.springframework.core.ResolvableType;, +import org.springframework.web.multipart.MultipartFile;, +import org.springframework.web.multipart.MultipartRequest;, +import org.springframework.web.multipart.support.MultipartResolutionDelegate;, + * <p>The created {@link Map} contains all request parameter name/value pairs,, + * or all multipart files for a given parameter name if specifically declared, + * with {@link MultipartFile} as the value type. If the method parameter type is, + * {@link MultiValueMap} instead, the created map contains all request parameters, + * and all their values for cases where request parameters have multiple values, + * (or multiple multipart files of the same name)., + * @author Juergen Hoeller, + * @see HttpServletRequest#getParameterMap(), + * @see MultipartRequest#getMultiFileMap(), + * @see MultipartRequest#getFileMap(), +		ResolvableType resolvableType = ResolvableType.forMethodParameter(parameter);, +		if (MultiValueMap.class.isAssignableFrom(parameter.getParameterType())) {, +			// MultiValueMap, +			Class<?> valueType = resolvableType.as(MultiValueMap.class).getGeneric(1).resolve();, +			if (valueType == MultipartFile.class) {, +				MultipartRequest multipartRequest = MultipartResolutionDelegate.resolveMultipartRequest(webRequest);, +				return (multipartRequest != null ? multipartRequest.getMultiFileMap() : new LinkedMultiValueMap<>(0));, +			}, +			else if (valueType == Part.class) {, +				HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class);, +				if (servletRequest != null && MultipartResolutionDelegate.isMultipartRequest(servletRequest)) {, +					Collection<Part> parts = servletRequest.getParts();, +					LinkedMultiValueMap<String, Part> result = new LinkedMultiValueMap<>(parts.size());, +					for (Part part : parts) {, +						result.add(part.getName(), part);, +					}, +					return result;, +				}, +				return new LinkedMultiValueMap<>(0);, +			}, +			else {, +		}, +, +			// Regular Map, +			Class<?> valueType = resolvableType.asMap().getGeneric(1).resolve();, +			if (valueType == MultipartFile.class) {, +				MultipartRequest multipartRequest = MultipartResolutionDelegate.resolveMultipartRequest(webRequest);, +				return (multipartRequest != null ? multipartRequest.getFileMap() : new LinkedHashMap<>(0));, +			}, +			else if (valueType == Part.class) {, +				HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class);, +				if (servletRequest != null && MultipartResolutionDelegate.isMultipartRequest(servletRequest)) {, +					Collection<Part> parts = servletRequest.getParts();, +					LinkedHashMap<String, Part> result = new LinkedHashMap<>(parts.size());, +					for (Part part : parts) {, +						if (!result.containsKey(part.getName())) {, +							result.put(part.getName(), part);, +						}, +					}, +					return result;, +				}, +				return new LinkedHashMap<>(0);, +			}, +			else {, +				Map<String, String[]> parameterMap = webRequest.getParameterMap();, +, +}, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/RequestParamMapMethodArgumentResolver.java, +import java.util.Collection;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.Part;, +import org.springframework.core.ResolvableType;, +import org.springframework.web.multipart.MultipartFile;, +import org.springframework.web.multipart.MultipartRequest;, +import org.springframework.web.multipart.support.MultipartResolutionDelegate;, + * <p>The created {@link Map} contains all request parameter name/value pairs,, + * or all multipart files for a given parameter name if specifically declared, + * with {@link MultipartFile} as the value type. If the method parameter type is, + * {@link MultiValueMap} instead, the created map contains all request parameters, + * and all their values for cases where request parameters have multiple values, + * (or multiple multipart files of the same name)., + * @author Juergen Hoeller, + * @see HttpServletRequest#getParameterMap(), + * @see MultipartRequest#getMultiFileMap(), + * @see MultipartRequest#getFileMap(), +		ResolvableType resolvableType = ResolvableType.forMethodParameter(parameter);, +		if (MultiValueMap.class.isAssignableFrom(parameter.getParameterType())) {, +			// MultiValueMap, +			Class<?> valueType = resolvableType.as(MultiValueMap.class).getGeneric(1).resolve();, +			if (valueType == MultipartFile.class) {, +				MultipartRequest multipartRequest = MultipartResolutionDelegate.resolveMultipartRequest(webRequest);, +				return (multipartRequest != null ? multipartRequest.getMultiFileMap() : new LinkedMultiValueMap<>(0));, +			}, +			else if (valueType == Part.class) {, +				HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class);, +				if (servletRequest != null && MultipartResolutionDelegate.isMultipartRequest(servletRequest)) {, +					Collection<Part> parts = servletRequest.getParts();, +					LinkedMultiValueMap<String, Part> result = new LinkedMultiValueMap<>(parts.size());, +					for (Part part : parts) {, +						result.add(part.getName(), part);, +					}, +					return result;]