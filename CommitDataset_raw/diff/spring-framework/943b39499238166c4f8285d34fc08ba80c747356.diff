[+++ b/spring-web/src/main/java/org/springframework/web/client/DefaultResponseErrorHandler.java, + * Copyright 2002-2018 the original author or authors., +	private void handleClientError(, +			HttpStatus statusCode, String statusText, HttpHeaders headers, byte[] body, @Nullable Charset charset) {, +	private void handleServerError(, +			HttpStatus statusCode, String statusText, HttpHeaders headers, byte[] body, @Nullable Charset charset) {, +++ b/spring-web/src/main/java/org/springframework/web/client/DefaultResponseErrorHandler.java, + * Copyright 2002-2018 the original author or authors., +	private void handleClientError(, +			HttpStatus statusCode, String statusText, HttpHeaders headers, byte[] body, @Nullable Charset charset) {, +	private void handleServerError(, +			HttpStatus statusCode, String statusText, HttpHeaders headers, byte[] body, @Nullable Charset charset) {, +++ b/spring-web/src/main/java/org/springframework/web/client/HttpClientErrorException.java, +	// Subclasses for specific HTTP status codes, +++ b/spring-web/src/main/java/org/springframework/web/client/DefaultResponseErrorHandler.java, + * Copyright 2002-2018 the original author or authors., +	private void handleClientError(, +			HttpStatus statusCode, String statusText, HttpHeaders headers, byte[] body, @Nullable Charset charset) {, +	private void handleServerError(, +			HttpStatus statusCode, String statusText, HttpHeaders headers, byte[] body, @Nullable Charset charset) {, +++ b/spring-web/src/main/java/org/springframework/web/client/HttpClientErrorException.java, +	// Subclasses for specific HTTP status codes, +++ b/spring-web/src/main/java/org/springframework/web/client/HttpServerErrorException.java, + * Copyright 2002-2018 the original author or authors., +	// Subclasses for specific HTTP status codes, +++ b/spring-web/src/main/java/org/springframework/web/client/DefaultResponseErrorHandler.java, + * Copyright 2002-2018 the original author or authors., +	private void handleClientError(, +			HttpStatus statusCode, String statusText, HttpHeaders headers, byte[] body, @Nullable Charset charset) {, +	private void handleServerError(, +			HttpStatus statusCode, String statusText, HttpHeaders headers, byte[] body, @Nullable Charset charset) {, +++ b/spring-web/src/main/java/org/springframework/web/client/HttpClientErrorException.java, +	// Subclasses for specific HTTP status codes, +++ b/spring-web/src/main/java/org/springframework/web/client/HttpServerErrorException.java, + * Copyright 2002-2018 the original author or authors., +	// Subclasses for specific HTTP status codes, +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/ForwardedHeaderTransformer.java, +, + * Extract values from "Forwarded" and "X-Forwarded-*" headers to override, + * the request URI (i.e. {@link ServerHttpRequest#getURI()}) so it reflects, + * the client-originated protocol and address., + * <p>Alternatively if {@link #setRemoveOnly removeOnly} is set to "true",, + * then "Forwarded" and "X-Forwarded-*" headers are only removed, and not used., +			Collections.newSetFromMap(new LinkedCaseInsensitiveMap<>(8, Locale.ENGLISH));, +	 * Enable mode in which any "Forwarded" or "X-Forwarded-*" headers are, +	 * @see #setRemoveOnly, +, +++ b/spring-web/src/main/java/org/springframework/web/client/DefaultResponseErrorHandler.java, + * Copyright 2002-2018 the original author or authors., +	private void handleClientError(, +			HttpStatus statusCode, String statusText, HttpHeaders headers, byte[] body, @Nullable Charset charset) {, +	private void handleServerError(, +			HttpStatus statusCode, String statusText, HttpHeaders headers, byte[] body, @Nullable Charset charset) {, +++ b/spring-web/src/main/java/org/springframework/web/client/HttpClientErrorException.java, +	// Subclasses for specific HTTP status codes, +++ b/spring-web/src/main/java/org/springframework/web/client/HttpServerErrorException.java, + * Copyright 2002-2018 the original author or authors., +	// Subclasses for specific HTTP status codes, +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/ForwardedHeaderTransformer.java, +, + * Extract values from "Forwarded" and "X-Forwarded-*" headers to override, + * the request URI (i.e. {@link ServerHttpRequest#getURI()}) so it reflects, + * the client-originated protocol and address., + * <p>Alternatively if {@link #setRemoveOnly removeOnly} is set to "true",, + * then "Forwarded" and "X-Forwarded-*" headers are only removed, and not used., +			Collections.newSetFromMap(new LinkedCaseInsensitiveMap<>(8, Locale.ENGLISH));, +	 * Enable mode in which any "Forwarded" or "X-Forwarded-*" headers are, +	 * @see #setRemoveOnly, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ExchangeFilterFunctions.java, +, +	 * cancel if any more data arrives., +	 * <p>Internally delegates to {@link DataBufferUtils#takeUntilByteCount}., +	 * @param maxByteCount the limit as number of bytes, +	@Deprecated]