[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +			LinkedList<UnsatisfiedDependencyException> causes = null;, +							causes = new LinkedList<UnsatisfiedDependencyException>();, +				if (causes != null) {, +					UnsatisfiedDependencyException ex = causes.removeLast();, +					for (Exception cause : causes) {, +						this.beanFactory.onSuppressedException(cause);, +					}, +					throw ex;, +				}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +			LinkedList<UnsatisfiedDependencyException> causes = null;, +							causes = new LinkedList<UnsatisfiedDependencyException>();, +				if (causes != null) {, +					UnsatisfiedDependencyException ex = causes.removeLast();, +					for (Exception cause : causes) {, +						this.beanFactory.onSuppressedException(cause);, +					}, +					throw ex;, +				}, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java, +	public void testConstructorDependencyWithClassResolution() {, +		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory();, +		RootBeanDefinition bd = new RootBeanDefinition(ConstructorDependencyWithClassResolution.class);, +		bd.getConstructorArgumentValues().addGenericArgumentValue("java.lang.String");, +		lbf.registerBeanDefinition("test", bd);, +		lbf.preInstantiateSingletons();, +	}, +, +	@Test, +	public void testConstructorDependencyWithUnresolvableClass() {, +		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory();, +		RootBeanDefinition bd = new RootBeanDefinition(ConstructorDependencyWithClassResolution.class);, +		bd.getConstructorArgumentValues().addGenericArgumentValue("java.lang.Strin");, +		lbf.registerBeanDefinition("test", bd);, +		try {, +			lbf.preInstantiateSingletons();, +			fail("Should have thrown UnsatisfiedDependencyException");, +		}, +		catch (UnsatisfiedDependencyException expected) {, +			assertTrue(expected.toString().contains("java.lang.Strin"));, +		}, +	}, +, +	@Test, +			assertTrue(ex.getMessage().toLowerCase().contains("interface"));, +			assertTrue(ex.getMessage().toLowerCase().contains("abstract"));, +	public static class ConstructorDependencyWithClassResolution {, +, +		public ConstructorDependencyWithClassResolution(Class<?> clazz) {, +		}, +, +		public ConstructorDependencyWithClassResolution() {, +		}, +	}, +, +]