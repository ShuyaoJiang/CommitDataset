[+++ b/spring-core/src/main/java/org/springframework/core/type/ClassMetadata.java, + * Copyright 2002-2014 the original author or authors., +	 * Return whether the underlying class represents an annotation., +	 * @since 4.1, +	 */, +	boolean isAnnotation();, +, +	/**, +	 * @since 3.1, +++ b/spring-core/src/main/java/org/springframework/core/type/ClassMetadata.java, + * Copyright 2002-2014 the original author or authors., +	 * Return whether the underlying class represents an annotation., +	 * @since 4.1, +	 */, +	boolean isAnnotation();, +, +	/**, +	 * @since 3.1, +++ b/spring-core/src/main/java/org/springframework/core/type/StandardClassMetadata.java, + * Copyright 2002-2014 the original author or authors., +	public boolean isAnnotation() {, +		return this.introspectedClass.isAnnotation();, +	}, +, +	@Override, +++ b/spring-core/src/main/java/org/springframework/core/type/ClassMetadata.java, + * Copyright 2002-2014 the original author or authors., +	 * Return whether the underlying class represents an annotation., +	 * @since 4.1, +	 */, +	boolean isAnnotation();, +, +	/**, +	 * @since 3.1, +++ b/spring-core/src/main/java/org/springframework/core/type/StandardClassMetadata.java, + * Copyright 2002-2014 the original author or authors., +	public boolean isAnnotation() {, +		return this.introspectedClass.isAnnotation();, +	}, +, +	@Override, +++ b/spring-core/src/main/java/org/springframework/core/type/classreading/ClassMetadataReadingVisitor.java, + * Copyright 2002-2014 the original author or authors., +	private boolean isAnnotation;, +, +		this.isAnnotation = ((access & Opcodes.ACC_ANNOTATION) != 0);, +		if (supername != null && !this.isInterface) {, +	public boolean isAnnotation() {, +		return this.isAnnotation;, +	}, +, +	@Override, +++ b/spring-core/src/main/java/org/springframework/core/type/ClassMetadata.java, + * Copyright 2002-2014 the original author or authors., +	 * Return whether the underlying class represents an annotation., +	 * @since 4.1, +	 */, +	boolean isAnnotation();, +, +	/**, +	 * @since 3.1, +++ b/spring-core/src/main/java/org/springframework/core/type/StandardClassMetadata.java, + * Copyright 2002-2014 the original author or authors., +	public boolean isAnnotation() {, +		return this.introspectedClass.isAnnotation();, +	}, +, +	@Override, +++ b/spring-core/src/main/java/org/springframework/core/type/classreading/ClassMetadataReadingVisitor.java, + * Copyright 2002-2014 the original author or authors., +	private boolean isAnnotation;, +, +		this.isAnnotation = ((access & Opcodes.ACC_ANNOTATION) != 0);, +		if (supername != null && !this.isInterface) {, +	public boolean isAnnotation() {, +		return this.isAnnotation;, +	}, +, +	@Override, +++ b/spring-core/src/test/java/org/springframework/core/type/AnnotationMetadataTests.java, +import java.lang.annotation.Documented;, +	private void doTestSubClassAnnotationInfo(AnnotationMetadata metadata) {, +		assertThat(metadata.getClassName(), is(AnnotatedComponentSubClass.class.getName()));, +		assertThat(metadata.isInterface(), is(false));, +		assertThat(metadata.isAnnotation(), is(false));, +		assertThat(metadata.isAbstract(), is(false));, +		assertThat(metadata.isConcrete(), is(true));, +		assertThat(metadata.hasSuperClass(), is(true));, +		assertThat(metadata.getSuperClassName(), is(AnnotatedComponent.class.getName()));, +		assertThat(metadata.getInterfaceNames().length, is(0));, +		assertThat(metadata.isAnnotated(Component.class.getName()), is(false));, +		assertThat(metadata.isAnnotated(Scope.class.getName()), is(false));, +		assertThat(metadata.isAnnotated(SpecialAttr.class.getName()), is(false));, +		assertThat(metadata.hasAnnotation(Component.class.getName()), is(false));, +		assertThat(metadata.hasAnnotation(Scope.class.getName()), is(false));, +		assertThat(metadata.hasAnnotation(SpecialAttr.class.getName()), is(false));, +		assertThat(metadata.getAnnotationTypes().size(), is(0));, +		assertThat(metadata.getAnnotationAttributes(Component.class.getName()), nullValue());, +		assertThat(metadata.getAnnotatedMethods(DirectAnnotation.class.getName()).size(), equalTo(0));, +		assertThat(metadata.isAnnotated(IsAnnotatedAnnotation.class.getName()), equalTo(false));]