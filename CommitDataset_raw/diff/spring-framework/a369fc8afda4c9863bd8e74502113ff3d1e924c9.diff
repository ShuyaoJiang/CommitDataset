[+++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/AbstractMessageConverter.java, + * Abstract base class for {@link SmartMessageConverter} implementations including, + * support for common properties and a partial implementation of the conversion methods,, +public abstract class AbstractMessageConverter implements SmartMessageConverter {, +	@Override, +	@Override, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/AbstractMessageConverter.java, + * Abstract base class for {@link SmartMessageConverter} implementations including, + * support for common properties and a partial implementation of the conversion methods,, +public abstract class AbstractMessageConverter implements SmartMessageConverter {, +	@Override, +	@Override, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/CompositeMessageConverter.java, + * Copyright 2002-2015 the original  author or authors., + * A {@link MessageConverter} that delegates to a list of registered converters, + * <p>As of 4.2.1, this composite converter implements {@link SmartMessageConverter}, + * in order to support the delegation of conversion hints., + *, + * @author Juergen Hoeller, +public class CompositeMessageConverter implements SmartMessageConverter {, +		for (MessageConverter converter : getConverters()) {, +	public Object fromMessage(Message<?> message, Class<?> targetClass, Object conversionHint) {, +		for (MessageConverter converter : getConverters()) {, +			Object result = (converter instanceof SmartMessageConverter ?, +					((SmartMessageConverter) converter).fromMessage(message, targetClass, conversionHint) :, +					converter.fromMessage(message, targetClass));, +			if (result != null) {, +				return result;, +			}, +		}, +		return null;, +	}, +, +	@Override, +		for (MessageConverter converter : getConverters()) {, +	public Message<?> toMessage(Object payload, MessageHeaders headers, Object conversionHint) {, +		for (MessageConverter converter : getConverters()) {, +			Message<?> result = (converter instanceof SmartMessageConverter ?, +					((SmartMessageConverter) converter).toMessage(payload, headers, conversionHint) :, +					converter.toMessage(payload, headers));, +			if (result != null) {, +				return result;, +			}, +		}, +		return null;, +	}, +, +, +	/**, +	 * Return the underlying list of delegate converters., +	 */, +	public List<MessageConverter> getConverters() {, +		return this.converters;, +	}, +, +	@Override, +		return "CompositeMessageConverter[converters=" + getConverters() + "]";, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/AbstractMessageConverter.java, + * Abstract base class for {@link SmartMessageConverter} implementations including, + * support for common properties and a partial implementation of the conversion methods,, +public abstract class AbstractMessageConverter implements SmartMessageConverter {, +	@Override, +	@Override, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/CompositeMessageConverter.java, + * Copyright 2002-2015 the original  author or authors., + * A {@link MessageConverter} that delegates to a list of registered converters, + * <p>As of 4.2.1, this composite converter implements {@link SmartMessageConverter}, + * in order to support the delegation of conversion hints., + *, + * @author Juergen Hoeller, +public class CompositeMessageConverter implements SmartMessageConverter {, +		for (MessageConverter converter : getConverters()) {, +	public Object fromMessage(Message<?> message, Class<?> targetClass, Object conversionHint) {, +		for (MessageConverter converter : getConverters()) {, +			Object result = (converter instanceof SmartMessageConverter ?, +					((SmartMessageConverter) converter).fromMessage(message, targetClass, conversionHint) :, +					converter.fromMessage(message, targetClass));, +			if (result != null) {, +				return result;, +			}, +		}, +		return null;, +	}, +, +	@Override, +		for (MessageConverter converter : getConverters()) {, +	public Message<?> toMessage(Object payload, MessageHeaders headers, Object conversionHint) {, +		for (MessageConverter converter : getConverters()) {, +			Message<?> result = (converter instanceof SmartMessageConverter ?, +					((SmartMessageConverter) converter).toMessage(payload, headers, conversionHint) :, +					converter.toMessage(payload, headers));, +			if (result != null) {, +				return result;, +			}, +		}, +		return null;, +	}, +, +, +	/**]