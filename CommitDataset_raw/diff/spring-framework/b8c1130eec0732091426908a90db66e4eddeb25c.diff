[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +			else if (metadata.isAnnotated(Component.class.getName()) ||, +					metadata.hasAnnotatedMethods(Bean.class.getName())) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +			else if (metadata.isAnnotated(Component.class.getName()) ||, +					metadata.hasAnnotatedMethods(Bean.class.getName())) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/type/AnnotationMetadata.java, +	 * Determine whether the underlying class has any methods that are, +	 * annotated (or meta-annotated) with the given annotation type., +	 */, +	boolean hasAnnotatedMethods(String annotationType);, +, +	/**, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +			else if (metadata.isAnnotated(Component.class.getName()) ||, +					metadata.hasAnnotatedMethods(Bean.class.getName())) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/type/AnnotationMetadata.java, +	 * Determine whether the underlying class has any methods that are, +	 * annotated (or meta-annotated) with the given annotation type., +	 */, +	boolean hasAnnotatedMethods(String annotationType);, +, +	/**, +++ b/org.springframework.core/src/main/java/org/springframework/core/type/StandardAnnotationMetadata.java, +	public boolean hasAnnotatedMethods(String annotationType) {, +		Method[] methods = getIntrospectedClass().getDeclaredMethods();, +		for (Method method : methods) {, +			for (Annotation ann : method.getAnnotations()) {, +				if (ann.annotationType().getName().equals(annotationType)) {, +					return true;, +				}, +				else {, +					for (Annotation metaAnn : ann.annotationType().getAnnotations()) {, +						if (metaAnn.annotationType().getName().equals(annotationType)) {, +							return true;, +						}, +					}, +				}, +			}, +		}, +		return false;, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +			else if (metadata.isAnnotated(Component.class.getName()) ||, +					metadata.hasAnnotatedMethods(Bean.class.getName())) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/type/AnnotationMetadata.java, +	 * Determine whether the underlying class has any methods that are, +	 * annotated (or meta-annotated) with the given annotation type., +	 */, +	boolean hasAnnotatedMethods(String annotationType);, +, +	/**, +++ b/org.springframework.core/src/main/java/org/springframework/core/type/StandardAnnotationMetadata.java, +	public boolean hasAnnotatedMethods(String annotationType) {, +		Method[] methods = getIntrospectedClass().getDeclaredMethods();, +		for (Method method : methods) {, +			for (Annotation ann : method.getAnnotations()) {, +				if (ann.annotationType().getName().equals(annotationType)) {, +					return true;, +				}, +				else {, +					for (Annotation metaAnn : ann.annotationType().getAnnotations()) {, +						if (metaAnn.annotationType().getName().equals(annotationType)) {, +							return true;, +						}, +					}, +				}, +			}, +		}, +		return false;, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/type/classreading/AnnotationMetadataReadingVisitor.java, +	public boolean hasAnnotatedMethods(String annotationType) {, +		for (MethodMetadata method : this.methodMetadataSet) {, +			if (method.isAnnotated(annotationType)) {, +				return true;, +			}, +		}, +		return false;, +	}, +]