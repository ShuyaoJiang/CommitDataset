[+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +, +, +	/**, +	 * The empty {@code HttpHeaders} instance (immutable)., +	 */, +	public static final HttpHeaders EMPTY = new ReadOnlyHttpHeaders(new HttpHeaders(new LinkedMultiValueMap<>(0)));, +, +		this(CollectionUtils.toMultiValueMap(new LinkedCaseInsensitiveMap<>(8, Locale.ENGLISH)));, +	 * @since 5.1, +		Assert.notNull(headers, "MultiValueMap must not be null");, +		Assert.notNull(languages, "LanguageRange List must not be null");, +		setOrRemove(ACCESS_CONTROL_ALLOW_ORIGIN, allowedOrigin);, +		setOrRemove(ACCESS_CONTROL_REQUEST_METHOD, (requestMethod != null ? requestMethod.name() : null));, +		setOrRemove(CACHE_CONTROL, cacheControl.getHeaderValue());, +		setOrRemove(CACHE_CONTROL, cacheControl);, +		Assert.notNull(name, "Name must not be null");, +		setOrRemove(CONTENT_LANGUAGE, (locale != null ? locale.toLanguageTag() : null));, +			Assert.isTrue(!mediaType.isWildcardType(), "Content-Type cannot contain wildcard type '*'");, +			Assert.isTrue(!mediaType.isWildcardSubtype(), "Content-Type cannot contain wildcard subtype '*'");, +			remove(CONTENT_TYPE);, +		else {, +			remove(ETAG);, +		}, +	}, +			remove(HOST, null);, +		setZonedDateTime(LAST_MODIFIED, lastModified.withZoneSameInstant(GMT));, +		setOrRemove(LOCATION, (location != null ? location.toASCIIString() : null));, +		setOrRemove(ORIGIN, origin);, +		setOrRemove(PRAGMA, pragma);, +		setOrRemove(UPGRADE, upgrade);, +					Collections.addAll(result, StringUtils.tokenizeToStringArray(value, ","));, +			if (val != null) {, +		}, +	/**, +	 * Set the given header value, or remove the header if {@code null}., +	 * @param headerName the header name, +	 * @param headerValue the header value, or {@code null} for none, +	 */, +	private void setOrRemove(String headerName, @Nullable String headerValue) {, +		if (headerValue != null) {, +			set(headerName, headerValue);, +		}, +		else {, +			remove(headerName);, +		}, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +, +, +	/**, +	 * The empty {@code HttpHeaders} instance (immutable)., +	 */, +	public static final HttpHeaders EMPTY = new ReadOnlyHttpHeaders(new HttpHeaders(new LinkedMultiValueMap<>(0)));, +, +		this(CollectionUtils.toMultiValueMap(new LinkedCaseInsensitiveMap<>(8, Locale.ENGLISH)));, +	 * @since 5.1, +		Assert.notNull(headers, "MultiValueMap must not be null");, +		Assert.notNull(languages, "LanguageRange List must not be null");, +		setOrRemove(ACCESS_CONTROL_ALLOW_ORIGIN, allowedOrigin);, +		setOrRemove(ACCESS_CONTROL_REQUEST_METHOD, (requestMethod != null ? requestMethod.name() : null));, +		setOrRemove(CACHE_CONTROL, cacheControl.getHeaderValue());, +		setOrRemove(CACHE_CONTROL, cacheControl);, +		Assert.notNull(name, "Name must not be null");, +		setOrRemove(CONTENT_LANGUAGE, (locale != null ? locale.toLanguageTag() : null));, +			Assert.isTrue(!mediaType.isWildcardType(), "Content-Type cannot contain wildcard type '*'");, +			Assert.isTrue(!mediaType.isWildcardSubtype(), "Content-Type cannot contain wildcard subtype '*'");, +			remove(CONTENT_TYPE);, +		else {, +			remove(ETAG);, +		}, +	}, +			remove(HOST, null);, +		setZonedDateTime(LAST_MODIFIED, lastModified.withZoneSameInstant(GMT));, +		setOrRemove(LOCATION, (location != null ? location.toASCIIString() : null));, +		setOrRemove(ORIGIN, origin);, +		setOrRemove(PRAGMA, pragma);, +		setOrRemove(UPGRADE, upgrade);, +					Collections.addAll(result, StringUtils.tokenizeToStringArray(value, ","));, +			if (val != null) {, +		}, +	/**, +	 * Set the given header value, or remove the header if {@code null}., +	 * @param headerName the header name, +	 * @param headerValue the header value, or {@code null} for none, +	 */, +	private void setOrRemove(String headerName, @Nullable String headerValue) {, +		if (headerValue != null) {, +			set(headerName, headerValue);, +		}, +		else {, +			remove(headerName);, +		}, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/ResponseEntity.java, +			this.headers.setCacheControl(cacheControl);, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +]