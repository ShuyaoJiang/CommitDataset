[+++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +import io.reactivex.Maybe;, + * @author Sebastien Deleuze, +			registry.registerMonoAdapter(Maybe.class,, +					source -> Mono.from(((Maybe<?>) source).toFlowable()),, +					source -> Flowable.fromPublisher(source).toObservable().singleElement(),, +					new ReactiveAdapter.Descriptor(false, true, false), +			);, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +import io.reactivex.Maybe;, + * @author Sebastien Deleuze, +			registry.registerMonoAdapter(Maybe.class,, +					source -> Mono.from(((Maybe<?>) source).toFlowable()),, +					source -> Flowable.fromPublisher(source).toObservable().singleElement(),, +					new ReactiveAdapter.Descriptor(false, true, false), +			);, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/ReactiveAdapterRegistryTests.java, +import io.reactivex.Maybe;, +		testMonoAdapter(Maybe.class);, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +import io.reactivex.Maybe;, + * @author Sebastien Deleuze, +			registry.registerMonoAdapter(Maybe.class,, +					source -> Mono.from(((Maybe<?>) source).toFlowable()),, +					source -> Flowable.fromPublisher(source).toObservable().singleElement(),, +					new ReactiveAdapter.Descriptor(false, true, false), +			);, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/ReactiveAdapterRegistryTests.java, +import io.reactivex.Maybe;, +		testMonoAdapter(Maybe.class);, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/HttpEntityArgumentResolverTests.java, +import io.reactivex.Maybe;, +		testSupports(httpEntityType(forClassWithGenerics(Maybe.class, String.class)));, +	public void emptyBodyWithRxJava2Maybe() throws Exception {, +		ResolvableType type = httpEntityType(forClassWithGenerics(Maybe.class, String.class));, +		HttpEntity<Maybe<String>> entity = resolveValueWithEmptyBody(type);, +, +		ScriptedSubscriber, +				.create().expectNextCount(0), +				.expectComplete(), +				.verify(entity.getBody().toFlowable());, +	}, +, +	@Test, +	public void httpEntityWithRxJava2MaybeBody() throws Exception {, +		String body = "line1";, +		ResolvableType type = httpEntityType(forClassWithGenerics(Maybe.class, String.class));, +		HttpEntity<Maybe<String>> httpEntity = resolveValue(type, body);, +, +		assertEquals(this.request.getHeaders(), httpEntity.getHeaders());, +		assertEquals("line1", httpEntity.getBody().blockingGet());, +	}, +, +	@Test, +			HttpEntity<io.reactivex.Single<String>> rxJava2SingleBody,, +			HttpEntity<Maybe<String>> rxJava2MaybeBody,, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +import io.reactivex.Maybe;, + * @author Sebastien Deleuze, +			registry.registerMonoAdapter(Maybe.class,, +					source -> Mono.from(((Maybe<?>) source).toFlowable()),, +					source -> Flowable.fromPublisher(source).toObservable().singleElement(),, +					new ReactiveAdapter.Descriptor(false, true, false), +			);, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/ReactiveAdapterRegistryTests.java, +import io.reactivex.Maybe;, +		testMonoAdapter(Maybe.class);, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/HttpEntityArgumentResolverTests.java, +import io.reactivex.Maybe;, +		testSupports(httpEntityType(forClassWithGenerics(Maybe.class, String.class)));, +	public void emptyBodyWithRxJava2Maybe() throws Exception {, +		ResolvableType type = httpEntityType(forClassWithGenerics(Maybe.class, String.class));, +		HttpEntity<Maybe<String>> entity = resolveValueWithEmptyBody(type);, +, +		ScriptedSubscriber, +				.create().expectNextCount(0), +				.expectComplete(), +				.verify(entity.getBody().toFlowable());, +	}, +, +	@Test, +	public void httpEntityWithRxJava2MaybeBody() throws Exception {, +		String body = "line1";, +		ResolvableType type = httpEntityType(forClassWithGenerics(Maybe.class, String.class));, +		HttpEntity<Maybe<String>> httpEntity = resolveValue(type, body);, +, +		assertEquals(this.request.getHeaders(), httpEntity.getHeaders());, +		assertEquals("line1", httpEntity.getBody().blockingGet());, +	}, +, +	@Test, +			HttpEntity<io.reactivex.Single<String>> rxJava2SingleBody,, +			HttpEntity<Maybe<String>> rxJava2MaybeBody,, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/MessageReaderArgumentResolverTests.java, +import io.reactivex.Maybe;, +	public void rxJava2MaybeTestBean() throws Exception {, +		String body = "{\"bar\":\"b1\",\"foo\":\"f1\"}";, +		ResolvableType type = forClassWithGenerics(Maybe.class, TestBean.class);, +		MethodParameter param = this.testMethod.resolveParam(type);, +		Maybe<TestBean> maybe = resolveValue(param, body);]