[+++ b/spring-messaging/src/test/java/org/springframework/messaging/handler/invocation/InvocableHandlerMethodTests.java, +import static org.mockito.Mockito.*;, +	private final Message<?> message = mock(Message.class);, +	public void resolveNoArgValue() throws Exception {, +		Throwable expected = null;, +			expected = new RuntimeException("error");, +			expected = new Error("error");, +			expected = new Exception("error");, +			expected = new Throwable("error");, +++ b/spring-messaging/src/test/java/org/springframework/messaging/handler/invocation/InvocableHandlerMethodTests.java, +import static org.mockito.Mockito.*;, +	private final Message<?> message = mock(Message.class);, +	public void resolveNoArgValue() throws Exception {, +		Throwable expected = null;, +			expected = new RuntimeException("error");, +			expected = new Error("error");, +			expected = new Exception("error");, +			expected = new Throwable("error");, +++ b/spring-web/src/test/java/org/springframework/web/method/support/InvocableHandlerMethodTests.java, +	public void resolveNoArgValue() throws Exception {, +++ b/spring-messaging/src/test/java/org/springframework/messaging/handler/invocation/InvocableHandlerMethodTests.java, +import static org.mockito.Mockito.*;, +	private final Message<?> message = mock(Message.class);, +	public void resolveNoArgValue() throws Exception {, +		Throwable expected = null;, +			expected = new RuntimeException("error");, +			expected = new Error("error");, +			expected = new Exception("error");, +			expected = new Throwable("error");, +++ b/spring-web/src/test/java/org/springframework/web/method/support/InvocableHandlerMethodTests.java, +	public void resolveNoArgValue() throws Exception {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/HandlerMethodArgumentResolverComposite.java, +++ b/spring-messaging/src/test/java/org/springframework/messaging/handler/invocation/InvocableHandlerMethodTests.java, +import static org.mockito.Mockito.*;, +	private final Message<?> message = mock(Message.class);, +	public void resolveNoArgValue() throws Exception {, +		Throwable expected = null;, +			expected = new RuntimeException("error");, +			expected = new Error("error");, +			expected = new Exception("error");, +			expected = new Throwable("error");, +++ b/spring-web/src/test/java/org/springframework/web/method/support/InvocableHandlerMethodTests.java, +	public void resolveNoArgValue() throws Exception {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/HandlerMethodArgumentResolverComposite.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java, +				return Mono.error(new IllegalStateException(formatInvokeError(text, args), ex));, +	private static boolean isAsyncVoidReturnType(MethodParameter returnType, @Nullable ReactiveAdapter adapter) {, +		if (adapter != null && adapter.supportsEmpty()) {, +			if (adapter.isNoValue()) {, +++ b/spring-messaging/src/test/java/org/springframework/messaging/handler/invocation/InvocableHandlerMethodTests.java, +import static org.mockito.Mockito.*;, +	private final Message<?> message = mock(Message.class);, +	public void resolveNoArgValue() throws Exception {, +		Throwable expected = null;, +			expected = new RuntimeException("error");, +			expected = new Error("error");, +			expected = new Exception("error");, +			expected = new Throwable("error");, +++ b/spring-web/src/test/java/org/springframework/web/method/support/InvocableHandlerMethodTests.java, +	public void resolveNoArgValue() throws Exception {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/HandlerMethodArgumentResolverComposite.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java, +				return Mono.error(new IllegalStateException(formatInvokeError(text, args), ex));, +	private static boolean isAsyncVoidReturnType(MethodParameter returnType, @Nullable ReactiveAdapter adapter) {, +		if (adapter != null && adapter.supportsEmpty()) {, +			if (adapter.isNoValue()) {, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/InvocableHandlerMethodTests.java, +import java.nio.charset.StandardCharsets;, +import java.util.ArrayList;, +import java.util.List;, +	private final List<HandlerMethodArgumentResolver> resolvers = new ArrayList<>();, +, +	public void resolveArg() {, +		this.resolvers.add(stubResolver("value1"));, +		Method method = ResolvableMethod.on(TestController.class).mockCall(o -> o.singleArg(null)).method();, +		Mono<HandlerResult> mono = invoke(new TestController(), method);, +		assertHandlerResultValue(mono, "success:value1");, +	public void resolveNoArgValue() {, +		this.resolvers.add(stubResolver(Mono.empty()));, +		Method method = ResolvableMethod.on(TestController.class).mockCall(o -> o.singleArg(null)).method();, +		Mono<HandlerResult> mono = invoke(new TestController(), method);, +		assertHandlerResultValue(mono, "success:null");, +	public void resolveNoArgs() {, +	public void cannotResolveArg() {, +	public void resolveProvidedArg() {, +		Mono<HandlerResult> mono = invoke(new TestController(), method, "value1");, +, +		assertHandlerResultValue(mono, "success:value1");, +	}, +, +	@Test, +	public void resolveProvidedArgFirst() {, +		this.resolvers.add(stubResolver("value1"));, +		Method method = ResolvableMethod.on(TestController.class).mockCall(o -> o.singleArg(null)).method();, +		Mono<HandlerResult> mono = invoke(new TestController(), method, "value2");, +, +		assertHandlerResultValue(mono, "success:value2");, +	}, +, +	@Test]