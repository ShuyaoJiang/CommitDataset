[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java, +	 * Suspend reading, if the underlying API provides such a mechanism., +	protected abstract void suspendReading();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java, +	 * Suspend reading, if the underlying API provides such a mechanism., +	protected abstract void suspendReading();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java, +		@Override, +		protected void suspendReading() {, +			// no-op, +		}, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java, +	 * Suspend reading, if the underlying API provides such a mechanism., +	protected abstract void suspendReading();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java, +		@Override, +		protected void suspendReading() {, +			// no-op, +		}, +, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/ListenerReadPublisherTests.java, +		@Override, +		protected void suspendReading() {, +			// No-op, +		}, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java, +	 * Suspend reading, if the underlying API provides such a mechanism., +	protected abstract void suspendReading();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java, +		@Override, +		protected void suspendReading() {, +			// no-op, +		}, +, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/ListenerReadPublisherTests.java, +		@Override, +		protected void suspendReading() {, +			// No-op, +		}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java, +	 * Whether receiving new message(s) is suspended., +	 * flow control for receiving messages, then this method as well as, +	 * {@link #canSuspendReceiving()} should both return {@code false}., +	 * @return returns {@code true} if receiving new message(s) is suspended,, +	 * or otherwise {@code false}., +	 * @since 5.0.2, +		private volatile Queue<Object> pendingMessages = Queues.unbounded(Queues.SMALL_BUFFER_SIZE).get();, +, +			if (!this.pendingMessages.isEmpty()) {, +			return (WebSocketMessage) this.pendingMessages.poll();, +			this.pendingMessages.offer(webSocketMessage);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java, +	 * Suspend reading, if the underlying API provides such a mechanism., +	protected abstract void suspendReading();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java, +		@Override, +		protected void suspendReading() {, +			// no-op, +		}, +, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/ListenerReadPublisherTests.java, +		@Override, +		protected void suspendReading() {, +			// No-op, +		}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java, +	 * Whether receiving new message(s) is suspended., +	 * flow control for receiving messages, then this method as well as, +	 * {@link #canSuspendReceiving()} should both return {@code false}., +	 * @return returns {@code true} if receiving new message(s) is suspended,, +	 * or otherwise {@code false}., +	 * @since 5.0.2, +		private volatile Queue<Object> pendingMessages = Queues.unbounded(Queues.SMALL_BUFFER_SIZE).get();, +, +			if (!this.pendingMessages.isEmpty()) {, +			return (WebSocketMessage) this.pendingMessages.poll();, +			this.pendingMessages.offer(webSocketMessage);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/TomcatWebSocketSession.java, +import reactor.core.publisher.MonoProcessor;, +, +, +]