[+++ b/spring-test/src/main/java/org/springframework/test/context/support/AbstractDelegatingSmartContextLoader.java, +	// ContextLoader, +, +	/**, +	 * {@code AbstractDelegatingSmartContextLoader} does not support the, +	 * {@link ContextLoader#processLocations(Class, String...)} method. Call, +	 * {@link #processContextConfiguration(ContextConfigurationAttributes)} instead., +	 * @throws UnsupportedOperationException in this implementation, +	 */, +	@Override, +	public final String[] processLocations(Class<?> clazz, @Nullable String... locations) {, +		throw new UnsupportedOperationException(, +				"DelegatingSmartContextLoaders do not support the ContextLoader SPI. " +, +						"Call processContextConfiguration(ContextConfigurationAttributes) instead.");, +	}, +, +	/**, +	 * {@code AbstractDelegatingSmartContextLoader} does not support the, +	 * {@link ContextLoader#loadContext(String...) } method. Call, +	 * {@link #loadContext(MergedContextConfiguration)} instead., +	 * @throws UnsupportedOperationException in this implementation, +	 */, +	@Override, +	public final ApplicationContext loadContext(String... locations) throws Exception {, +		throw new UnsupportedOperationException(, +				"DelegatingSmartContextLoaders do not support the ContextLoader SPI. " +, +						"Call loadContext(MergedContextConfiguration) instead.");, +	}, +, +, +		Assert.notNull(mergedConfig, "MergedContextConfiguration must not be null");, +				"Neither %s nor %s was able to load an ApplicationContext from %s.",, +				name(getXmlLoader()), name(getAnnotationConfigLoader()), mergedConfig));, +	}, +, +, +	private static void delegateProcessing(SmartContextLoader loader, ContextConfigurationAttributes configAttributes) {, +		if (logger.isDebugEnabled()) {, +			logger.debug(String.format("Delegating to %s to process context configuration %s.",, +					name(loader), configAttributes));, +		}, +		loader.processContextConfiguration(configAttributes);, +	}, +, +	private static ApplicationContext delegateLoading(SmartContextLoader loader, MergedContextConfiguration mergedConfig), +			throws Exception {, +, +		if (logger.isDebugEnabled()) {, +			logger.debug(String.format("Delegating to %s to load context from %s.", name(loader), mergedConfig));, +		}, +		return loader.loadContext(mergedConfig);, +	}, +, +	private boolean supports(SmartContextLoader loader, MergedContextConfiguration mergedConfig) {, +		if (loader == getAnnotationConfigLoader()) {, +			return (mergedConfig.hasClasses() && !mergedConfig.hasLocations());, +		}, +		else {, +			return (mergedConfig.hasLocations() && !mergedConfig.hasClasses());, +		}, +++ b/spring-test/src/main/java/org/springframework/test/context/support/AbstractDelegatingSmartContextLoader.java, +	// ContextLoader, +, +	/**, +	 * {@code AbstractDelegatingSmartContextLoader} does not support the, +	 * {@link ContextLoader#processLocations(Class, String...)} method. Call, +	 * {@link #processContextConfiguration(ContextConfigurationAttributes)} instead., +	 * @throws UnsupportedOperationException in this implementation, +	 */, +	@Override, +	public final String[] processLocations(Class<?> clazz, @Nullable String... locations) {, +		throw new UnsupportedOperationException(, +				"DelegatingSmartContextLoaders do not support the ContextLoader SPI. " +, +						"Call processContextConfiguration(ContextConfigurationAttributes) instead.");, +	}, +, +	/**, +	 * {@code AbstractDelegatingSmartContextLoader} does not support the, +	 * {@link ContextLoader#loadContext(String...) } method. Call, +	 * {@link #loadContext(MergedContextConfiguration)} instead., +	 * @throws UnsupportedOperationException in this implementation, +	 */, +	@Override, +	public final ApplicationContext loadContext(String... locations) throws Exception {, +		throw new UnsupportedOperationException(, +				"DelegatingSmartContextLoaders do not support the ContextLoader SPI. " +, +						"Call loadContext(MergedContextConfiguration) instead.");, +	}, +, +, +		Assert.notNull(mergedConfig, "MergedContextConfiguration must not be null");, +				"Neither %s nor %s was able to load an ApplicationContext from %s.",, +				name(getXmlLoader()), name(getAnnotationConfigLoader()), mergedConfig));, +	}, +, +, +	private static void delegateProcessing(SmartContextLoader loader, ContextConfigurationAttributes configAttributes) {, +		if (logger.isDebugEnabled()) {, +			logger.debug(String.format("Delegating to %s to process context configuration %s.",, +					name(loader), configAttributes));]