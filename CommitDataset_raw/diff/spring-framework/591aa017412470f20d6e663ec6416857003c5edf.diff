[+++ b/spring-orm/src/test/java/org/springframework/mock/web/MockHttpServletRequest.java, + * Copyright 2002-2012 the original author or authors., +, + * @author Sam Brannen, +	 * Create a new {@code MockHttpServletRequest} with a default, +	 * {@link MockServletContext}., +	 * @see #MockHttpServletRequest(ServletContext, String, String), +	 * Create a new {@code MockHttpServletRequest} with a default, +	 * {@link MockServletContext}., +	 * @see #MockHttpServletRequest(ServletContext, String, String), +	 * Create a new {@code MockHttpServletRequest} with the supplied {@link ServletContext}., +	 * <code>null</code> to use a default {@link MockServletContext}), +	 * @see #MockHttpServletRequest(ServletContext, String, String), +	 * Create a new {@code MockHttpServletRequest} with the supplied {@link ServletContext},, +	 * {@code method}, and {@code requestURI}., +	 * <p>The preferred locale will be set to {@link Locale#ENGLISH}., +	 * <code>null</code> to use a default {@link MockServletContext}), +	 * @see #setPreferredLocales, +	 * @see MockServletContext, +		return Collections.enumeration(this.attributes.keySet());, +			if (!this.contentType.toLowerCase().contains(CHARSET_PREFIX) && this.characterEncoding != null) {, +	 * <p>If there are already one or more values registered for the given, +	 * <p>If there are already one or more values registered for the given, +	 * Sets all provided parameters <strong>replacing</strong> any existing, +	 * <p>If there are already one or more values registered for the given, +	 * <p>If there are already one or more values registered for the given, +	 * Adds all provided parameters <strong>without</strong> replacing any, +	 * @see #setPreferredLocales, +	/**, +	 * Set the list of preferred locales, in descending order, effectively replacing, +	 * any existing locales., +	 * @see #addPreferredLocale, +	 * @since 3.2, +	 */, +	public void setPreferredLocales(List<Locale> locales) {, +		Assert.notEmpty(locales, "preferred locales list must not be empty");, +		this.locales.clear();, +		this.locales.addAll(locales);, +	}, +, +	public String getHeader(String name) {, +		HeaderValueHolder header = HeaderValueHolder.getByName(this.headers, name);, +		return (header != null ? header.getStringValue() : null);, +	}, +, +	public Enumeration<String> getHeaders(String name) {, +		HeaderValueHolder header = HeaderValueHolder.getByName(this.headers, name);, +		return Collections.enumeration(header != null ? header.getStringValues() : new LinkedList<String>());, +	}, +, +	public Enumeration<String> getHeaderNames() {, +		return Collections.enumeration(this.headers.keySet());, +	}, +, +		return (this.userRoles.contains(role) || (this.servletContext instanceof MockServletContext && ((MockServletContext) this.servletContext).getDeclaredRoles().contains(, +			role)));, +++ b/spring-orm/src/test/java/org/springframework/mock/web/MockHttpServletRequest.java, + * Copyright 2002-2012 the original author or authors., +, + * @author Sam Brannen, +	 * Create a new {@code MockHttpServletRequest} with a default, +	 * {@link MockServletContext}., +	 * @see #MockHttpServletRequest(ServletContext, String, String), +	 * Create a new {@code MockHttpServletRequest} with a default, +	 * {@link MockServletContext}., +	 * @see #MockHttpServletRequest(ServletContext, String, String), +	 * Create a new {@code MockHttpServletRequest} with the supplied {@link ServletContext}., +	 * <code>null</code> to use a default {@link MockServletContext}), +	 * @see #MockHttpServletRequest(ServletContext, String, String), +	 * Create a new {@code MockHttpServletRequest} with the supplied {@link ServletContext},, +	 * {@code method}, and {@code requestURI}., +	 * <p>The preferred locale will be set to {@link Locale#ENGLISH}., +	 * <code>null</code> to use a default {@link MockServletContext}), +	 * @see #setPreferredLocales, +	 * @see MockServletContext, +		return Collections.enumeration(this.attributes.keySet());, +			if (!this.contentType.toLowerCase().contains(CHARSET_PREFIX) && this.characterEncoding != null) {, +	 * <p>If there are already one or more values registered for the given, +	 * <p>If there are already one or more values registered for the given, +	 * Sets all provided parameters <strong>replacing</strong> any existing, +	 * <p>If there are already one or more values registered for the given, +	 * <p>If there are already one or more values registered for the given, +	 * Adds all provided parameters <strong>without</strong> replacing any, +	 * @see #setPreferredLocales, +	/**, +	 * Set the list of preferred locales, in descending order, effectively replacing, +	 * any existing locales., +	 * @see #addPreferredLocale, +	 * @since 3.2, +	 */, +	public void setPreferredLocales(List<Locale> locales) {, +		Assert.notEmpty(locales, "preferred locales list must not be empty");, +		this.locales.clear();, +		this.locales.addAll(locales);, +	}, +, +	public String getHeader(String name) {, +		HeaderValueHolder header = HeaderValueHolder.getByName(this.headers, name);, +		return (header != null ? header.getStringValue() : null);, +	}]