[+++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/AbstractMessageConverter.java, + * Copyright 2002-2015 the original author or authors., + * Abstract base class for {@link MessageConverter} implementations including support, + * for common properties and a partial implementation of the conversion methods,, + * mainly to check if the converter supports the conversion based on the payload class, + * and MIME type., +		Assert.notNull(supportedMimeTypes, "supportedMimeTypes must not be null");, +	 * <p>Note that if no resolver is configured, then, +	 * <p>By default, a {@code DefaultContentTypeResolver} instance is used., +	 * <p>A converter can configured to be strict only when a, +	 * {@link #setContentTypeResolver contentTypeResolver} is configured and the, +	 * list of {@link #getSupportedMimeTypes() supportedMimeTypes} is not be empty., +	 * <p>When this flag is set to {@code true}, {@link #supportsMimeType(MessageHeaders)}, +	 * will return {@code false} if the {@link #setContentTypeResolver contentTypeResolver}, +	 * is not defined or if no content-type header is present., +			Assert.notEmpty(getSupportedMimeTypes(), "Strict match requires non-empty list of supported mime types");, +			Assert.notNull(getContentTypeResolver(), "Strict match requires ContentTypeResolver");, +		Class<?> clazz = (payload != null ? payload.getClass() : null);, +		return (this.contentTypeResolver != null ? this.contentTypeResolver.resolve(headers) : null);, +, +	/**, +	 * Whether the given class is supported by this converter., +	 * @param clazz the class to test for support, +	 * @return {@code true} if supported; {@code false} otherwise, +	 */, +	protected abstract boolean supports(Class<?> clazz);, +, +	/**, +	 * Convert the message payload from serialized form to an Object., +	 */, +	public abstract Object convertFromInternal(Message<?> message, Class<?> targetClass);, +, +, +	/**, +	 * Convert the payload object to serialized form., +	 */, +	public abstract Object convertToInternal(Object payload, MessageHeaders headers);, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/AbstractMessageConverter.java, + * Copyright 2002-2015 the original author or authors., + * Abstract base class for {@link MessageConverter} implementations including support, + * for common properties and a partial implementation of the conversion methods,, + * mainly to check if the converter supports the conversion based on the payload class, + * and MIME type., +		Assert.notNull(supportedMimeTypes, "supportedMimeTypes must not be null");, +	 * <p>Note that if no resolver is configured, then, +	 * <p>By default, a {@code DefaultContentTypeResolver} instance is used., +	 * <p>A converter can configured to be strict only when a, +	 * {@link #setContentTypeResolver contentTypeResolver} is configured and the, +	 * list of {@link #getSupportedMimeTypes() supportedMimeTypes} is not be empty., +	 * <p>When this flag is set to {@code true}, {@link #supportsMimeType(MessageHeaders)}, +	 * will return {@code false} if the {@link #setContentTypeResolver contentTypeResolver}, +	 * is not defined or if no content-type header is present., +			Assert.notEmpty(getSupportedMimeTypes(), "Strict match requires non-empty list of supported mime types");, +			Assert.notNull(getContentTypeResolver(), "Strict match requires ContentTypeResolver");, +		Class<?> clazz = (payload != null ? payload.getClass() : null);, +		return (this.contentTypeResolver != null ? this.contentTypeResolver.resolve(headers) : null);, +, +	/**, +	 * Whether the given class is supported by this converter., +	 * @param clazz the class to test for support, +	 * @return {@code true} if supported; {@code false} otherwise, +	 */, +	protected abstract boolean supports(Class<?> clazz);, +, +	/**, +	 * Convert the message payload from serialized form to an Object., +	 */, +	public abstract Object convertFromInternal(Message<?> message, Class<?> targetClass);, +, +, +	/**, +	 * Convert the payload object to serialized form., +	 */, +	public abstract Object convertToInternal(Object payload, MessageHeaders headers);, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MappingJackson2MessageConverter.java, +import java.util.Arrays;, +	 * Construct a {@code MappingJackson2MessageConverter} supporting, +	 * the {@code application/json} MIME type., +		super(new MimeType("application", "json", Charset.forName("UTF-8")));, +		initObjectMapper();, +	 * Construct a {@code MappingJackson2MessageConverter} supporting, +	 * one or more custom MIME types., +	public MappingJackson2MessageConverter(MimeType... supportedMimeTypes) {, +		super(Arrays.asList(supportedMimeTypes));, +		initObjectMapper();, +, +	private void initObjectMapper() {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/AbstractMessageConverter.java, + * Copyright 2002-2015 the original author or authors., + * Abstract base class for {@link MessageConverter} implementations including support, + * for common properties and a partial implementation of the conversion methods,, + * mainly to check if the converter supports the conversion based on the payload class, + * and MIME type., +		Assert.notNull(supportedMimeTypes, "supportedMimeTypes must not be null");, +	 * <p>Note that if no resolver is configured, then, +	 * <p>By default, a {@code DefaultContentTypeResolver} instance is used., +	 * <p>A converter can configured to be strict only when a, +	 * {@link #setContentTypeResolver contentTypeResolver} is configured and the]