[+++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, + * of a request by delegating to a list of ContentNegotiationStrategy instances., + * The strategies must be provided at instantiation or alternatively if using, + * the default constructor, an instance of {@link HeaderContentNegotiationStrategy}, + * will be configured by default., + * <p>This class may also be used to look up file extensions associated with a, + * MediaType. This is done by consulting the list of configured, + * {@link MediaTypeFileExtensionResolver} instances. Note that some, + * ContentNegotiationStrategy implementations also implement, + * MediaTypeFileExtensionResolver and the class constructor accepting the former, + * will also detect if they implement the latter. If you need to register additional, + * resolvers, you can use the method, + * {@link #addFileExtensionResolvers(MediaTypeFileExtensionResolver...)}., +	 * @param strategies one more more ContentNegotiationStrategy instances, +	 * <p>Note that some {@link ContentNegotiationStrategy} implementations also, +	 * implement {@link MediaTypeFileExtensionResolver} and the class constructor, +	 * accepting the former will also detect implementations of the latter. Therefore, +	 * you only need to use this method to register additional instances., +	 * @param one more resolvers, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, + * of a request by delegating to a list of ContentNegotiationStrategy instances., + * The strategies must be provided at instantiation or alternatively if using, + * the default constructor, an instance of {@link HeaderContentNegotiationStrategy}, + * will be configured by default., + * <p>This class may also be used to look up file extensions associated with a, + * MediaType. This is done by consulting the list of configured, + * {@link MediaTypeFileExtensionResolver} instances. Note that some, + * ContentNegotiationStrategy implementations also implement, + * MediaTypeFileExtensionResolver and the class constructor accepting the former, + * will also detect if they implement the latter. If you need to register additional, + * resolvers, you can use the method, + * {@link #addFileExtensionResolvers(MediaTypeFileExtensionResolver...)}., +	 * @param strategies one more more ContentNegotiationStrategy instances, +	 * <p>Note that some {@link ContentNegotiationStrategy} implementations also, +	 * implement {@link MediaTypeFileExtensionResolver} and the class constructor, +	 * accepting the former will also detect implementations of the latter. Therefore, +	 * you only need to use this method to register additional instances., +	 * @param one more resolvers, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +import java.util.Arrays;, +import java.util.HashMap;, +import java.util.Map;, +import org.springframework.http.MediaType;, +import org.springframework.web.accept.ContentNegotiationManager;, +import org.springframework.web.accept.HeaderContentNegotiationStrategy;, +import org.springframework.web.accept.PathExtensionContentNegotiationStrategy;, + * {@link ExceptionHandlerExceptionResolver} are configured with instances of, + * the following by default:, + * 	<li>A {@link ContentNegotiationManager}, +		RuntimeBeanReference contentNegotiationManager = getContentNegotiationManager(element, source, parserContext);, +, +		RootBeanDefinition handlerMappingDef = new RootBeanDefinition(RequestMappingHandlerMapping.class);, +		handlerMappingDef.setSource(source);, +		handlerMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +		handlerMappingDef.getPropertyValues().add("order", 0);, +		handlerMappingDef.getPropertyValues().add("contentNegotiationManager", contentNegotiationManager);, +		String methodMappingName = parserContext.getReaderContext().registerWithGeneratedName(handlerMappingDef);, +		RootBeanDefinition handlerAdapterDef = new RootBeanDefinition(RequestMappingHandlerAdapter.class);, +		handlerAdapterDef.setSource(source);, +		handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +		handlerAdapterDef.getPropertyValues().add("contentNegotiationManager", contentNegotiationManager);, +		handlerAdapterDef.getPropertyValues().add("webBindingInitializer", bindingDef);, +		handlerAdapterDef.getPropertyValues().add("messageConverters", messageConverters);, +			handlerAdapterDef.getPropertyValues().add("ignoreDefaultModelOnRedirect", ignoreDefaultModel);, +			handlerAdapterDef.getPropertyValues().add("customArgumentResolvers", argumentResolvers);, +			handlerAdapterDef.getPropertyValues().add("customReturnValueHandlers", returnValueHandlers);, +		String handlerAdapterName = parserContext.getReaderContext().registerWithGeneratedName(handlerAdapterDef);, +		RootBeanDefinition exceptionHandlerExceptionResolver = new RootBeanDefinition(ExceptionHandlerExceptionResolver.class);, +		exceptionHandlerExceptionResolver.setSource(source);, +		exceptionHandlerExceptionResolver.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +		exceptionHandlerExceptionResolver.getPropertyValues().add("contentNegotiationManager", contentNegotiationManager);, +		exceptionHandlerExceptionResolver.getPropertyValues().add("messageConverters", messageConverters);, +		exceptionHandlerExceptionResolver.getPropertyValues().add("order", 0);, +				parserContext.getReaderContext().registerWithGeneratedName(exceptionHandlerExceptionResolver);, +		parserContext.registerComponent(new BeanComponentDefinition(handlerMappingDef, methodMappingName));, +		parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, handlerAdapterName));, +		parserContext.registerComponent(new BeanComponentDefinition(exceptionHandlerExceptionResolver, methodExceptionResolverName));, +	private RuntimeBeanReference getContentNegotiationManager(Element element, Object source, ParserContext parserContext) {, +		RuntimeBeanReference contentNegotiationManagerRef;, +		if (element.hasAttribute("content-negotiation-manager")) {, +			contentNegotiationManagerRef = new RuntimeBeanReference(element.getAttribute("content-negotiation-manager"));, +		}, +		else {, +			RootBeanDefinition managerDef = new RootBeanDefinition(ContentNegotiationManager.class);, +			managerDef.setSource(source);, +			managerDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +			PathExtensionContentNegotiationStrategy strategy1 = new PathExtensionContentNegotiationStrategy(getDefaultMediaTypes());, +			HeaderContentNegotiationStrategy strategy2 = new HeaderContentNegotiationStrategy();, +			managerDef.getConstructorArgumentValues().addIndexedArgumentValue(0, Arrays.asList(strategy1,strategy2));, +, +			String beanName = "mvcContentNegotiationManager";, +			parserContext.getReaderContext().getRegistry().registerBeanDefinition(beanName , managerDef);, +			parserContext.registerComponent(new BeanComponentDefinition(managerDef, beanName));, +			contentNegotiationManagerRef = new RuntimeBeanReference(beanName);, +		}, +		return contentNegotiationManagerRef;, +	}, +, +	private Map<String, MediaType> getDefaultMediaTypes() {, +		Map<String, MediaType> map = new HashMap<String, MediaType>();]