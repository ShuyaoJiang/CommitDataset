[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +		@Override, +		public ResponseSpec exchange() {, +			ClientResponse clientResponse = this.bodySpec.exchange().block(getTimeout());, +	private static class DefaultResponseSpec implements ResponseSpec {, +, +		private final ExchangeResult result;, +, +		DefaultResponseSpec(ExchangeResult result, ClientResponse response,, +			this.result = new ExchangeResult(result, uriTemplate);, +			B body = this.response.bodyToMono(bodyType).block(this.timeout);, +			EntityExchangeResult<B> entityResult = new EntityExchangeResult<>(this.result, body);, +			return new DefaultBodySpec<>(entityResult);, +			B body = this.response.bodyToMono(bodyType).block(this.timeout);, +			EntityExchangeResult<B> entityResult = new EntityExchangeResult<>(this.result, body);, +			return new DefaultBodySpec<>(entityResult);, +			return getListBodySpec(this.response.bodyToFlux(elementType));, +			Flux<E> flux = this.response.bodyToFlux(elementType);, +			return getListBodySpec(flux);, +		}, +, +		private <E> ListBodySpec<E> getListBodySpec(Flux<E> flux) {, +			List<E> body = flux.collectList().block(this.timeout);, +			EntityExchangeResult<List<E>> entityResult = new EntityExchangeResult<>(this.result, body);, +			return new DefaultListBodySpec<>(entityResult);, +			ByteArrayResource resource = this.response.bodyToMono(ByteArrayResource.class).block(this.timeout);, +			byte[] body = (resource != null ? resource.getByteArray() : null);, +			EntityExchangeResult<byte[]> entityResult = new EntityExchangeResult<>(this.result, body);, +			return new DefaultBodyContentSpec(entityResult);, +			Flux<DataBuffer> body = this.response.bodyToFlux(DataBuffer.class);, +			return new FluxExchangeResult<>(this.result, body, this.timeout);, +			Flux<T> body = this.response.bodyToFlux(elementType);, +			return new FluxExchangeResult<>(this.result, body, this.timeout);, +			Flux<T> body = this.response.bodyToFlux(elementType);, +			return new FluxExchangeResult<>(this.result, body, this.timeout);]