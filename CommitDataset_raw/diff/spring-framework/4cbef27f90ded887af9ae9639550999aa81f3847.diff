[+++ b/spring-web/src/main/java/org/springframework/http/HttpStatus.java, +import org.springframework.lang.Nullable;, +, +		HttpStatus status = resolve(statusCode);, +		if (status == null) {, +			throw new IllegalArgumentException("No matching constant for [" + statusCode + "]");, +		}, +		return status;, +	}, +, +, +	/**, +	 * Resolve the given status code to an {@code HttpStatus}, if possible., +	 * @param statusCode the HTTP status code (potentially non-standard), +	 * @return the corresponding {@code HttpStatus}, or {@code null} if not found, +	 * @since 5.0, +	 */, +	@Nullable, +	public static HttpStatus resolve(int statusCode) {, +		return null;, +++ b/spring-web/src/main/java/org/springframework/http/HttpStatus.java, +import org.springframework.lang.Nullable;, +, +		HttpStatus status = resolve(statusCode);, +		if (status == null) {, +			throw new IllegalArgumentException("No matching constant for [" + statusCode + "]");, +		}, +		return status;, +	}, +, +, +	/**, +	 * Resolve the given status code to an {@code HttpStatus}, if possible., +	 * @param statusCode the HTTP status code (potentially non-standard), +	 * @return the corresponding {@code HttpStatus}, or {@code null} if not found, +	 * @since 5.0, +	 */, +	@Nullable, +	public static HttpStatus resolve(int statusCode) {, +		return null;, +++ b/spring-web/src/main/java/org/springframework/http/client/ClientHttpResponse.java, + * Copyright 2002-2017 the original author or authors., +	 * @throws IllegalArgumentException in case of an unknown HTTP status code, +	 * @see HttpStatus#valueOf(int), +	 * Return the HTTP status code (potentially non-standard and not, +	 * resolvable through the {@link HttpStatus} enum) as an integer., +	 * @since 3.1.1, +	 * @see #getStatusCode(), +	 * @see HttpStatus#resolve(int), +++ b/spring-web/src/main/java/org/springframework/http/HttpStatus.java, +import org.springframework.lang.Nullable;, +, +		HttpStatus status = resolve(statusCode);, +		if (status == null) {, +			throw new IllegalArgumentException("No matching constant for [" + statusCode + "]");, +		}, +		return status;, +	}, +, +, +	/**, +	 * Resolve the given status code to an {@code HttpStatus}, if possible., +	 * @param statusCode the HTTP status code (potentially non-standard), +	 * @return the corresponding {@code HttpStatus}, or {@code null} if not found, +	 * @since 5.0, +	 */, +	@Nullable, +	public static HttpStatus resolve(int statusCode) {, +		return null;, +++ b/spring-web/src/main/java/org/springframework/http/client/ClientHttpResponse.java, + * Copyright 2002-2017 the original author or authors., +	 * @throws IllegalArgumentException in case of an unknown HTTP status code, +	 * @see HttpStatus#valueOf(int), +	 * Return the HTTP status code (potentially non-standard and not, +	 * resolvable through the {@link HttpStatus} enum) as an integer., +	 * @since 3.1.1, +	 * @see #getStatusCode(), +	 * @see HttpStatus#resolve(int), +++ b/spring-web/src/main/java/org/springframework/web/client/AsyncRestTemplate.java, +						response.getRawStatusCode() + " (" + response.getStatusText() + ")");, +						response.getRawStatusCode() + " (" + response.getStatusText() + "); invoking error handler");, +++ b/spring-web/src/main/java/org/springframework/http/HttpStatus.java, +import org.springframework.lang.Nullable;, +, +		HttpStatus status = resolve(statusCode);, +		if (status == null) {, +			throw new IllegalArgumentException("No matching constant for [" + statusCode + "]");, +		}, +		return status;, +	}, +, +, +	/**, +	 * Resolve the given status code to an {@code HttpStatus}, if possible., +	 * @param statusCode the HTTP status code (potentially non-standard), +	 * @return the corresponding {@code HttpStatus}, or {@code null} if not found, +	 * @since 5.0, +	 */, +	@Nullable, +	public static HttpStatus resolve(int statusCode) {]