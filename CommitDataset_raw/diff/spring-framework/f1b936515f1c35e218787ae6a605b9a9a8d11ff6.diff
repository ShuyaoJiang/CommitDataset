[+++ b/org.springframework.context/src/main/java/org/springframework/ui/alert/support/DefaultAlertContext.java, +	private Map<String, List<Alert>> alerts = new CachingMapDecorator<String, List<Alert>>(new LinkedHashMap<String, List<Alert>>()) {, +		return Collections.unmodifiableMap(alerts);, +		List<Alert> messages = alerts.get(element);, +		List<Alert> alerts = this.alerts.get(alert.getElement());, +		return new ToStringCreator(this).append("alerts", alerts).toString();, +++ b/org.springframework.context/src/main/java/org/springframework/ui/alert/support/DefaultAlertContext.java, +	private Map<String, List<Alert>> alerts = new CachingMapDecorator<String, List<Alert>>(new LinkedHashMap<String, List<Alert>>()) {, +		return Collections.unmodifiableMap(alerts);, +		List<Alert> messages = alerts.get(element);, +		List<Alert> alerts = this.alerts.get(alert.getElement());, +		return new ToStringCreator(this).append("alerts", alerts).toString();, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Bound.java, +@Target({ElementType.METHOD, ElementType.FIELD}), +++ b/org.springframework.context/src/main/java/org/springframework/ui/alert/support/DefaultAlertContext.java, +	private Map<String, List<Alert>> alerts = new CachingMapDecorator<String, List<Alert>>(new LinkedHashMap<String, List<Alert>>()) {, +		return Collections.unmodifiableMap(alerts);, +		List<Alert> messages = alerts.get(element);, +		List<Alert> alerts = this.alerts.get(alert.getElement());, +		return new ToStringCreator(this).append("alerts", alerts).toString();, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Bound.java, +@Target({ElementType.METHOD, ElementType.FIELD}), +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Model.java, +	boolean strictBinding() default false;, +++ b/org.springframework.context/src/main/java/org/springframework/ui/alert/support/DefaultAlertContext.java, +	private Map<String, List<Alert>> alerts = new CachingMapDecorator<String, List<Alert>>(new LinkedHashMap<String, List<Alert>>()) {, +		return Collections.unmodifiableMap(alerts);, +		List<Alert> messages = alerts.get(element);, +		List<Alert> alerts = this.alerts.get(alert.getElement());, +		return new ToStringCreator(this).append("alerts", alerts).toString();, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Bound.java, +@Target({ElementType.METHOD, ElementType.FIELD}), +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Model.java, +	boolean strictBinding() default false;, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/GenericBinder.java, +	public boolean isStrict() {, +		return strict;, +	}, +, +			if (binding != null) {, +			} else {, +				results.add(new NoSuchBindingResult(value));, +			}, +	static class NoSuchBindingResult implements BindingResult {, +		private UserValue userValue;, +		, +		public NoSuchBindingResult(UserValue userValue) {, +			this.userValue = userValue;, +		}, +		, +		public String getProperty() {, +			return userValue.getProperty();, +		}, +, +		public Object getUserValue() {, +			return userValue.getValue();, +		}, +, +		public boolean isFailure() {, +			return true;, +		}, +, +		public Alert getAlert() {, +			return new AbstractAlert() {, +				public String getElement() {, +					// TODO append model first? e.g. model.property, +					return getProperty();, +				}, +, +				public String getCode() {, +					return "noSuchBinding";, +				}, +, +				public Severity getSeverity() {, +					return Severity.WARNING;, +				}, +, +				public String getMessage() {, +					return "Failed to bind to property '" + userValue.getProperty() + "'; no binding has been added for the property";, +				}, +			};, +		}		, +	}, +	, +			return new AbstractAlert() {, +			return new AbstractAlert() {, +			return new AbstractAlert() {, +	, +	static abstract class AbstractAlert implements Alert {, +		public String toString() {, +			return getElement() + ":" + getCode() + " - " + getMessage();, +		}, +	}, +++ b/org.springframework.context/src/main/java/org/springframework/ui/alert/support/DefaultAlertContext.java, +	private Map<String, List<Alert>> alerts = new CachingMapDecorator<String, List<Alert>>(new LinkedHashMap<String, List<Alert>>()) {, +		return Collections.unmodifiableMap(alerts);, +		List<Alert> messages = alerts.get(element);, +		List<Alert> alerts = this.alerts.get(alert.getElement());, +		return new ToStringCreator(this).append("alerts", alerts).toString();, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Bound.java]