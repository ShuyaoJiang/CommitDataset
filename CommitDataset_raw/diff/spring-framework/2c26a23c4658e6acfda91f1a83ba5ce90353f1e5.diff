[+++ /dev/null, +++ /dev/null, +++ b/org.springframework.core/src/test/java/org/springframework/core/env/StandardEnvironmentTests.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.core.env;, +, +import static java.lang.String.format;, +import static org.hamcrest.CoreMatchers.equalTo;, +import static org.hamcrest.CoreMatchers.instanceOf;, +import static org.hamcrest.CoreMatchers.is;, +import static org.hamcrest.CoreMatchers.not;, +import static org.hamcrest.CoreMatchers.notNullValue;, +import static org.hamcrest.CoreMatchers.nullValue;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.fail;, +import static org.junit.matchers.JUnitMatchers.hasItem;, +import static org.junit.matchers.JUnitMatchers.hasItems;, +import static org.springframework.core.env.AbstractEnvironment.ACTIVE_PROFILES_PROPERTY_NAME;, +import static org.springframework.core.env.AbstractEnvironment.DEFAULT_PROFILES_PROPERTY_NAME;, +import static org.springframework.core.env.AbstractEnvironment.RESERVED_DEFAULT_PROFILE_NAME;, +, +import java.lang.reflect.Field;, +import java.security.AccessControlException;, +import java.security.Permission;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.Map;, +, +import org.junit.Test;, +import org.springframework.mock.env.MockPropertySource;, +, +/**, + * Unit tests for {@link StandardEnvironment}., + *, + * @author Chris Beams, + */, +public class StandardEnvironmentTests {, +, +	private static final String ALLOWED_PROPERTY_NAME = "theanswer";, +	private static final String ALLOWED_PROPERTY_VALUE = "42";, +, +	private static final String DISALLOWED_PROPERTY_NAME = "verboten";, +	private static final String DISALLOWED_PROPERTY_VALUE = "secret";, +, +	private static final String STRING_PROPERTY_NAME = "stringPropName";, +	private static final String STRING_PROPERTY_VALUE = "stringPropValue";, +	private static final Object NON_STRING_PROPERTY_NAME = new Object();, +	private static final Object NON_STRING_PROPERTY_VALUE = new Object();, +, +	private ConfigurableEnvironment environment = new StandardEnvironment();, +, +	@Test, +	public void propertySourceOrder() {, +		ConfigurableEnvironment env = new StandardEnvironment();, +		MutablePropertySources sources = env.getPropertySources();, +		assertThat(sources.precedenceOf(PropertySource.named(StandardEnvironment.SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME)), equalTo(0));, +		assertThat(sources.precedenceOf(PropertySource.named(StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME)), equalTo(1));, +		assertThat(sources.size(), is(2));, +	}, +, +	@Test, +	public void activeProfilesIsEmptyByDefault() {, +		assertThat(environment.getActiveProfiles().length, is(0));, +	}, +, +	@Test, +	public void defaultProfilesContainsDefaultProfileByDefault() {, +		assertThat(environment.getDefaultProfiles().length, is(1));, +		assertThat(environment.getDefaultProfiles()[0], equalTo("default"));, +	}, +, +	@Test, +	public void setActiveProfiles() {, +		environment.setActiveProfiles("local", "embedded");, +		String[] activeProfiles = environment.getActiveProfiles();, +		assertThat(Arrays.asList(activeProfiles), hasItems("local", "embedded"));, +		assertThat(activeProfiles.length, is(2));, +	}, +, +	@Test(expected=IllegalArgumentException.class), +	public void setActiveProfiles_withNullProfileArray() {, +		environment.setActiveProfiles((String[])null);, +	}, +]