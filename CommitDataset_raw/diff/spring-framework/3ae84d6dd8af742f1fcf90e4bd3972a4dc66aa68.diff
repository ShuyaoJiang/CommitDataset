[+++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +			ResolvableType type, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +			ResolvableType type, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/lob/DefaultLobHandler.java, + * Copyright 2002-2017 the original author or authors., +import java.nio.charset.StandardCharsets;, +					Reader reader = new InputStreamReader(asciiStream, StandardCharsets.US_ASCII);, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +			ResolvableType type, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/lob/DefaultLobHandler.java, + * Copyright 2002-2017 the original author or authors., +import java.nio.charset.StandardCharsets;, +					Reader reader = new InputStreamReader(asciiStream, StandardCharsets.US_ASCII);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/lob/PassThroughClob.java, + * Copyright 2002-2017 the original author or authors., +			return new InputStreamReader(this.asciiStream, StandardCharsets.US_ASCII);, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +			ResolvableType type, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/lob/DefaultLobHandler.java, + * Copyright 2002-2017 the original author or authors., +import java.nio.charset.StandardCharsets;, +					Reader reader = new InputStreamReader(asciiStream, StandardCharsets.US_ASCII);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/lob/PassThroughClob.java, + * Copyright 2002-2017 the original author or authors., +			return new InputStreamReader(this.asciiStream, StandardCharsets.US_ASCII);, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java, +				value = (value != null ? UriUtils.decode(value, StandardCharsets.UTF_8) : null);, +				request.addParameter(UriUtils.decode(entry.getKey(), StandardCharsets.UTF_8), value);, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +			ResolvableType type, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/lob/DefaultLobHandler.java, + * Copyright 2002-2017 the original author or authors., +import java.nio.charset.StandardCharsets;, +					Reader reader = new InputStreamReader(asciiStream, StandardCharsets.US_ASCII);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/lob/PassThroughClob.java, + * Copyright 2002-2017 the original author or authors., +			return new InputStreamReader(this.asciiStream, StandardCharsets.US_ASCII);, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java, +				value = (value != null ? UriUtils.decode(value, StandardCharsets.UTF_8) : null);, +				request.addParameter(UriUtils.decode(entry.getKey(), StandardCharsets.UTF_8), value);, +++ b/spring-web/src/main/java/org/springframework/http/codec/xml/Jaxb2XmlEncoder.java, +			ResolvableType type, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +			ResolvableType type, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/lob/DefaultLobHandler.java, + * Copyright 2002-2017 the original author or authors., +import java.nio.charset.StandardCharsets;, +					Reader reader = new InputStreamReader(asciiStream, StandardCharsets.US_ASCII);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/lob/PassThroughClob.java, + * Copyright 2002-2017 the original author or authors., +			return new InputStreamReader(this.asciiStream, StandardCharsets.US_ASCII);, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java, +				value = (value != null ? UriUtils.decode(value, StandardCharsets.UTF_8) : null);, +				request.addParameter(UriUtils.decode(entry.getKey(), StandardCharsets.UTF_8), value);, +++ b/spring-web/src/main/java/org/springframework/http/codec/xml/Jaxb2XmlEncoder.java, +			ResolvableType type, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {, +++ b/spring-web/src/main/java/org/springframework/http/converter/feed/AbstractWireFeedHttpMessageConverter.java, + * Copyright 2002-2017 the original author or authors., +		Charset charset = (contentType != null && contentType.getCharset() != null ?, +				contentType.getCharset() : DEFAULT_CHARSET);, +		Charset charset = (StringUtils.hasLength(wireFeed.getEncoding()) ?, +				Charset.forName(wireFeed.getEncoding()) : DEFAULT_CHARSET);, +			contentType = new MediaType(contentType.getType(), contentType.getSubtype(), charset);, +			Writer writer = new OutputStreamWriter(outputMessage.getBody(), charset);, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +			ResolvableType type, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/lob/DefaultLobHandler.java, + * Copyright 2002-2017 the original author or authors., +import java.nio.charset.StandardCharsets;, +					Reader reader = new InputStreamReader(asciiStream, StandardCharsets.US_ASCII);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/lob/PassThroughClob.java, + * Copyright 2002-2017 the original author or authors., +			return new InputStreamReader(this.asciiStream, StandardCharsets.US_ASCII);, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java, +				value = (value != null ? UriUtils.decode(value, StandardCharsets.UTF_8) : null);, +				request.addParameter(UriUtils.decode(entry.getKey(), StandardCharsets.UTF_8), value);, +++ b/spring-web/src/main/java/org/springframework/http/codec/xml/Jaxb2XmlEncoder.java, +			ResolvableType type, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {, +++ b/spring-web/src/main/java/org/springframework/http/converter/feed/AbstractWireFeedHttpMessageConverter.java, + * Copyright 2002-2017 the original author or authors., +		Charset charset = (contentType != null && contentType.getCharset() != null ?, +				contentType.getCharset() : DEFAULT_CHARSET);, +		Charset charset = (StringUtils.hasLength(wireFeed.getEncoding()) ?, +				Charset.forName(wireFeed.getEncoding()) : DEFAULT_CHARSET);, +			contentType = new MediaType(contentType.getType(), contentType.getSubtype(), charset);, +			Writer writer = new OutputStreamWriter(outputMessage.getBody(), charset);, +++ b/spring-web/src/main/java/org/springframework/web/client/RestClientResponseException.java, + * Copyright 2002-2017 the original author or authors., +import java.nio.charset.StandardCharsets;, +	private static final Charset DEFAULT_CHARSET = StandardCharsets.ISO_8859_1;, +		this.responseCharset = (responseCharset != null ? responseCharset.name() : null);, +		if (this.responseCharset == null) {, +			return new String(this.responseBody, DEFAULT_CHARSET);, +		}, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +			ResolvableType type, @Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/lob/DefaultLobHandler.java, + * Copyright 2002-2017 the original author or authors., +import java.nio.charset.StandardCharsets;]