[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunctions.java, +import org.springframework.web.server.ResponseStatusException;, +	 * RoutingFunction&lt;ServerResponse&gt; resources = RouterFunctions.resources("/resources/**", location);, +					.then(handlerFunction -> invokeHandler(handlerFunction, request)), +					.otherwise(ResponseStatusException.class, RouterFunctions::responseStatusFallback), +	private static <T extends ServerResponse> Mono<T> invokeHandler(HandlerFunction<T> handlerFunction,, +			ServerRequest request) {, +		try {, +			return handlerFunction.handle(request);, +		}, +		catch (Throwable t) {, +			return Mono.error(t);, +		}, +	}, +, +, +	private static <T extends ServerResponse> Mono<T> responseStatusFallback(ResponseStatusException ex) {, +		return (Mono<T>) ServerResponse.status(ex.getStatus()).build();, +	}, +, +	@SuppressWarnings("unchecked"), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RouterFunctions.java, +import org.springframework.web.server.ResponseStatusException;, +	 * RoutingFunction&lt;ServerResponse&gt; resources = RouterFunctions.resources("/resources/**", location);, +					.then(handlerFunction -> invokeHandler(handlerFunction, request)), +					.otherwise(ResponseStatusException.class, RouterFunctions::responseStatusFallback), +	private static <T extends ServerResponse> Mono<T> invokeHandler(HandlerFunction<T> handlerFunction,, +			ServerRequest request) {, +		try {, +			return handlerFunction.handle(request);, +		}, +		catch (Throwable t) {, +			return Mono.error(t);, +		}, +	}, +, +, +	private static <T extends ServerResponse> Mono<T> responseStatusFallback(ResponseStatusException ex) {, +		return (Mono<T>) ServerResponse.status(ex.getStatus()).build();, +	}, +, +	@SuppressWarnings("unchecked"), +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/server/PublisherHandlerFunctionIntegrationTests.java, +import java.io.IOException;, +import org.junit.Before;, +import org.springframework.http.client.ClientHttpResponse;, +import org.springframework.web.client.ResponseErrorHandler;, +import org.springframework.web.server.ResponseStatusException;, +import static org.junit.Assert.assertEquals;, +import static org.springframework.web.reactive.function.BodyExtractors.toMono;, +import static org.springframework.web.reactive.function.BodyInserters.fromPublisher;, +import static org.springframework.web.reactive.function.server.RequestPredicates.GET;, +import static org.springframework.web.reactive.function.server.RequestPredicates.POST;, +import static org.springframework.web.reactive.function.server.RouterFunctions.route;, +	private RestTemplate restTemplate;, +, +	@Before, +	public void createRestTemplate() {, +		restTemplate = new RestTemplate();, +		restTemplate.setErrorHandler(new ResponseErrorHandler() {, +			@Override, +			public boolean hasError(ClientHttpResponse response) throws IOException {, +				return false;, +			}, +, +			@Override, +			public void handleError(ClientHttpResponse response) throws IOException {, +, +			}, +		});, +, +	}, +				.and(route(GET("/flux"), personHandler::flux)), +				.and(route(GET("/throwRSE"), personHandler::throwResponseStatusException)), +				.and(route(GET("/returnRSE"), personHandler::returnResponseStatusException));, +	@Test, +	public void responseStatusException() {, +		ResponseEntity<String> result =, +				restTemplate.getForEntity("http://localhost:" + port + "/throwRSE", String.class);, +, +		assertEquals(HttpStatus.BAD_REQUEST, result.getStatusCode());, +, +		result = restTemplate.getForEntity("http://localhost:" + port + "/returnRSE", String.class);, +, +		assertEquals(HttpStatus.BAD_REQUEST, result.getStatusCode());, +	}, +, +, +, +		public Mono<ServerResponse> throwResponseStatusException(ServerRequest request) {, +			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Bad Request");, +		}, +, +		public Mono<ServerResponse> returnResponseStatusException(ServerRequest request) {, +			return Mono.error(new ResponseStatusException(HttpStatus.BAD_REQUEST, "Bad Request"));, +		}]