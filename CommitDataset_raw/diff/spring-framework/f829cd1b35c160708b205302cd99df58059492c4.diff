[+++ b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java, + * Copyright 2002-2014 the original author or authors., +	 * <p>In order, the most "generic" pattern is determined by the following:, +	 * <ul>, +	 *     <li>if it's null or a capture all pattern (i.e. it is equal to "/**")</li>, +	 *     <li>if the other pattern is an actual match</li>, +	 *     <li>if it's a catch-all pattern (i.e. it ends with "**"</li>, +	 *     <li>if it's got more "*" than the other pattern</li>, +	 *     <li>if it's got more "{foo}" than the other pattern</li>, +	 *     <li>if it's shorter than the other pattern</li>, +	 * </ul>, +	 * </p>, +		/**, +		 * Compare two patterns to determine which should match first, i.e. which is the most specific, +		 * regarding the current path., +		 *, +		 * @return a negative integer, zero, or a positive integer as pattern1 is, +		 * more specific, equally specific, or less specific than pattern2., +		 */, +, +			boolean pattern1NullCaptureAll = isNullOrCaptureAllPattern(pattern1);, +			boolean pattern2NullCaptureAll = isNullOrCaptureAllPattern(pattern2);, +			if (pattern1NullCaptureAll && pattern2NullCaptureAll) {, +			else if (pattern1NullCaptureAll) {, +			else if (pattern2NullCaptureAll) {, +			PatternElements pattern1Elements = new PatternElements(pattern1);, +			PatternElements pattern2Elements = new PatternElements(pattern2);, +			if(pattern1Elements.endsWithCatchAll && pattern2Elements.catchAllCount == 0) {, +				return 1;, +			}, +			else if(pattern2Elements.endsWithCatchAll && pattern1Elements.catchAllCount == 0) {, +				return -1;, +			}, +			int totalCount1 = pattern1Elements.bracketCount + pattern1Elements.wildcardsCount;, +			int totalCount2 = pattern2Elements.bracketCount + pattern2Elements.wildcardsCount;, +			if (pattern1Elements.wildcardsCount < pattern2Elements.wildcardsCount) {, +			else if (pattern2Elements.wildcardsCount < pattern1Elements.wildcardsCount) {, +			if (pattern1Elements.bracketCount < pattern2Elements.bracketCount) {, +			else if (pattern2Elements.bracketCount < pattern1Elements.bracketCount) {, +, +		/**, +		 * Value class that holds the number of occurrences for "*", "**", and "{" pattern elements, +		 */, +		private class PatternElements {, +			int bracketCount = 0;, +			int wildcardsCount = 0;, +			int catchAllCount = 0;, +			boolean endsWithCatchAll;, +, +			public PatternElements(String pattern) {, +, +				if(pattern == null || pattern.length() == 0) {, +					return;, +				}, +				int pos = 0;, +, +				while(pos < pattern.length()) {, +					if(pattern.charAt(pos) == '{') {, +						bracketCount++;, +						pos++;, +					} else if(pattern.charAt(pos) == '*') {, +						if(pos + 1 < pattern.length() && pattern.charAt(pos + 1) == '*') {, +							catchAllCount++;, +							pos += 2;, +						} else {, +							wildcardsCount++;, +							pos++;, +						}, +					} else {, +						pos++;, +					}, +				}, +				endsWithCatchAll = pattern.endsWith("**");, +			}, +, +		}, +++ b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java, + * Copyright 2002-2014 the original author or authors., +	 * <p>In order, the most "generic" pattern is determined by the following:, +	 * <ul>, +	 *     <li>if it's null or a capture all pattern (i.e. it is equal to "/**")</li>, +	 *     <li>if the other pattern is an actual match</li>, +	 *     <li>if it's a catch-all pattern (i.e. it ends with "**"</li>, +	 *     <li>if it's got more "*" than the other pattern</li>, +	 *     <li>if it's got more "{foo}" than the other pattern</li>, +	 *     <li>if it's shorter than the other pattern</li>, +	 * </ul>, +	 * </p>, +		/**, +		 * Compare two patterns to determine which should match first, i.e. which is the most specific, +		 * regarding the current path., +		 *, +		 * @return a negative integer, zero, or a positive integer as pattern1 is, +		 * more specific, equally specific, or less specific than pattern2., +		 */, +, +			boolean pattern1NullCaptureAll = isNullOrCaptureAllPattern(pattern1);, +			boolean pattern2NullCaptureAll = isNullOrCaptureAllPattern(pattern2);, +			if (pattern1NullCaptureAll && pattern2NullCaptureAll) {, +			else if (pattern1NullCaptureAll) {]