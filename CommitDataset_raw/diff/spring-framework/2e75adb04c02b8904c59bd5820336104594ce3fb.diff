[+++ b/spring-test/src/main/java/org/springframework/test/context/jdbc/Sql.java, + * {@link org.springframework.jdbc.datasource.init.ScriptUtils ScriptUtils} and, + * {@link org.springframework.jdbc.datasource.init.ResourceDatabasePopulator ResourceDatabasePopulator}, +	 * {@link org.springframework.util.ResourceUtils#CLASSPATH_URL_PREFIX classpath:},, +	 * {@link org.springframework.util.ResourceUtils#FILE_URL_PREFIX file:},, +	 * {@code http:}, etc.) will be loaded using the specified resource protocol., +++ b/spring-test/src/main/java/org/springframework/test/context/jdbc/Sql.java, + * {@link org.springframework.jdbc.datasource.init.ScriptUtils ScriptUtils} and, + * {@link org.springframework.jdbc.datasource.init.ResourceDatabasePopulator ResourceDatabasePopulator}, +	 * {@link org.springframework.util.ResourceUtils#CLASSPATH_URL_PREFIX classpath:},, +	 * {@link org.springframework.util.ResourceUtils#FILE_URL_PREFIX file:},, +	 * {@code http:}, etc.) will be loaded using the specified resource protocol., +++ b/spring-test/src/main/java/org/springframework/test/context/jdbc/SqlConfig.java, + * Enums. This approach allows local declarations of {@code @SqlConfig} to, +		 * Indicates that the transaction mode to use when executing SQL, +		 * scripts should be <em>inferred</em> using the rules listed below., +		 * In the context of these rules, the term "<em>available</em>", +		 * means that the bean for the data source or transaction manager, +		 * is either explicitly specified via a corresponding annotation, +		 * attribute in {@code @SqlConfig} or discoverable via conventions. See, +		 * {@link org.springframework.test.context.transaction.TestContextTransactionUtils TestContextTransactionUtils}, +		 * for details on the conventions used to discover such beans in, +		 * the {@code ApplicationContext}., +		 *, +		 * <h4>Inference Rules</h4>, +		 * <ol>, +		 * <li>If neither a transaction manager nor a data source is, +		 * available, an exception will be thrown., +		 * <li>If a transaction manager is not available but a data source, +		 * is available, SQL scripts will be executed directly against the, +		 * data source without a transaction., +		 * <li>If a transaction manager is available:, +		 * <ul>, +		 * <li>If a data source is not available, an attempt will be made, +		 * to retrieve it from the transaction manager by using reflection, +		 * to invoke a public method named {@code getDataSource()} on the, +		 * transaction manager. If the attempt fails, an exception will be, +		 * thrown., +		 * <li>Using the resolved transaction manager and data source, SQL, +		 * scripts will be executed within an existing transaction if, +		 * present; otherwise, scripts will be executed in a new transaction, +		 * that will be immediately committed. An <em>existing</em>, +		 * transaction will typically be managed by the, +		 * {@link org.springframework.test.context.transaction.TransactionalTestExecutionListener TransactionalTestExecutionListener}., +		 * </ul>, +		 * </ol>, +		 * @see org.springframework.test.context.transaction.TestContextTransactionUtils#retrieveDataSource, +		 * @see org.springframework.test.context.transaction.TestContextTransactionUtils#retrieveTransactionManager, +		 * <p>In contrast to {@link #INFERRED}, this mode requires the, +		 * presence of a transaction manager <strong>and</strong> a data, +		 * source., +	 * The bean name of the {@link javax.sql.DataSource} against which the, +	 * scripts should be executed., +	 * <p>The name is only required if there is more than one bean of type, +	 * {@code DataSource} in the test's {@code ApplicationContext}. If there, +	 * is only one such bean, it is not necessary to specify a bean name., +	 * <li>An explicit bean name is defined in a global declaration of, +	 * {@code @SqlConfig}., +	 * <li>The data source can be retrieved from the transaction manager, +	 * by using reflection to invoke a public method named, +	 * {@code getDataSource()} on the transaction manager., +	 * @see org.springframework.test.context.transaction.TestContextTransactionUtils#retrieveDataSource, +	 * <li>An explicit bean name is defined in a global declaration of, +	 * {@code @SqlConfig}., +	 * @see org.springframework.test.context.transaction.TestContextTransactionUtils#retrieveTransactionManager, +	 * <p>May be set to, +	 * {@link org.springframework.jdbc.datasource.init.ScriptUtils#EOF_STATEMENT_SEPARATOR}, +	 * to signal that each script contains a single statement without a, +	 * separator., +	 * @see org.springframework.jdbc.datasource.init.ScriptUtils#DEFAULT_STATEMENT_SEPARATOR, +	 * @see org.springframework.jdbc.datasource.init.ScriptUtils#EOF_STATEMENT_SEPARATOR, +	 * @see org.springframework.jdbc.datasource.init.ScriptUtils#DEFAULT_COMMENT_PREFIX, +	 * @see org.springframework.jdbc.datasource.init.ScriptUtils#DEFAULT_BLOCK_COMMENT_START_DELIMITER, +	 * @see org.springframework.jdbc.datasource.init.ScriptUtils#DEFAULT_BLOCK_COMMENT_END_DELIMITER, +++ b/spring-test/src/main/java/org/springframework/test/context/jdbc/Sql.java, + * {@link org.springframework.jdbc.datasource.init.ScriptUtils ScriptUtils} and, + * {@link org.springframework.jdbc.datasource.init.ResourceDatabasePopulator ResourceDatabasePopulator}, +	 * {@link org.springframework.util.ResourceUtils#CLASSPATH_URL_PREFIX classpath:},, +	 * {@link org.springframework.util.ResourceUtils#FILE_URL_PREFIX file:},, +	 * {@code http:}, etc.) will be loaded using the specified resource protocol., +++ b/spring-test/src/main/java/org/springframework/test/context/jdbc/SqlConfig.java, + * Enums. This approach allows local declarations of {@code @SqlConfig} to, +		 * Indicates that the transaction mode to use when executing SQL, +		 * scripts should be <em>inferred</em> using the rules listed below., +		 * In the context of these rules, the term "<em>available</em>", +		 * means that the bean for the data source or transaction manager, +		 * is either explicitly specified via a corresponding annotation, +		 * attribute in {@code @SqlConfig} or discoverable via conventions. See, +		 * {@link org.springframework.test.context.transaction.TestContextTransactionUtils TestContextTransactionUtils}, +		 * for details on the conventions used to discover such beans in, +		 * the {@code ApplicationContext}., +		 *, +		 * <h4>Inference Rules</h4>, +		 * <ol>, +		 * <li>If neither a transaction manager nor a data source is, +		 * available, an exception will be thrown., +		 * <li>If a transaction manager is not available but a data source, +		 * is available, SQL scripts will be executed directly against the, +		 * data source without a transaction., +		 * <li>If a transaction manager is available:]