[+++ b/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java, + * Encapsulates information about a handler method consisting of a {@linkplain #getMethod() method}, + * and a {@linkplain #getBean() bean}. Provides convenient access to method parameters,, + * <p>The class may be created with a bean instance or with a bean name (e.g. lazy-init bean,, + * prototype bean). Use {@link #createWithResolvedBean()} to obtain a {@link HandlerMethod}, + * instance with a bean instance resolved through the associated {@link BeanFactory}., +			return (this.bean.equals(other.bean) && this.method.equals(other.method));, +++ b/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java, + * Encapsulates information about a handler method consisting of a {@linkplain #getMethod() method}, + * and a {@linkplain #getBean() bean}. Provides convenient access to method parameters,, + * <p>The class may be created with a bean instance or with a bean name (e.g. lazy-init bean,, + * prototype bean). Use {@link #createWithResolvedBean()} to obtain a {@link HandlerMethod}, + * instance with a bean instance resolved through the associated {@link BeanFactory}., +			return (this.bean.equals(other.bean) && this.method.equals(other.method));, +++ b/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java, +, +			if (!this.urlDecode) {, +				// If decoding pathWithinApp yields a match just use pathWithinApp., +			// Otherwise, use the full servlet path., +		return (index1 != -1 ? requestUri.substring(index1) : "");, +		if (servletPath.length() > 1 && servletPath.endsWith("/") && shouldRemoveTrailingServletPathSlash(request)) {, +++ b/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java, + * Encapsulates information about a handler method consisting of a {@linkplain #getMethod() method}, + * and a {@linkplain #getBean() bean}. Provides convenient access to method parameters,, + * <p>The class may be created with a bean instance or with a bean name (e.g. lazy-init bean,, + * prototype bean). Use {@link #createWithResolvedBean()} to obtain a {@link HandlerMethod}, + * instance with a bean instance resolved through the associated {@link BeanFactory}., +			return (this.bean.equals(other.bean) && this.method.equals(other.method));, +++ b/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java, +, +			if (!this.urlDecode) {, +				// If decoding pathWithinApp yields a match just use pathWithinApp., +			// Otherwise, use the full servlet path., +		return (index1 != -1 ? requestUri.substring(index1) : "");, +		if (servletPath.length() > 1 && servletPath.endsWith("/") && shouldRemoveTrailingServletPathSlash(request)) {, +++ b/spring-web/src/test/java/org/springframework/web/method/support/InvocableHandlerMethodTests.java, +, +, +			// expected -  allow HandlerMethodArgumentResolver exceptions to propagate, +, +, +, +++ b/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java, + * Encapsulates information about a handler method consisting of a {@linkplain #getMethod() method}, + * and a {@linkplain #getBean() bean}. Provides convenient access to method parameters,, + * <p>The class may be created with a bean instance or with a bean name (e.g. lazy-init bean,, + * prototype bean). Use {@link #createWithResolvedBean()} to obtain a {@link HandlerMethod}, + * instance with a bean instance resolved through the associated {@link BeanFactory}., +			return (this.bean.equals(other.bean) && this.method.equals(other.method));, +++ b/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java, +, +			if (!this.urlDecode) {, +				// If decoding pathWithinApp yields a match just use pathWithinApp., +			// Otherwise, use the full servlet path., +		return (index1 != -1 ? requestUri.substring(index1) : "");, +		if (servletPath.length() > 1 && servletPath.endsWith("/") && shouldRemoveTrailingServletPathSlash(request)) {, +++ b/spring-web/src/test/java/org/springframework/web/method/support/InvocableHandlerMethodTests.java, +, +, +			// expected -  allow HandlerMethodArgumentResolver exceptions to propagate, +, +, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/AbstractView.java, + * Copyright 2002-2014 the original author or authors., +, +		return this.exposePathVariables;, +, +, +		Map<String, Object> pathVars = (this.exposePathVariables ?, +			(Map<String, Object>) request.getAttribute(View.PATH_VARIABLES) : null);]