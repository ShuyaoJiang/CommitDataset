[+++ b/spring-context/src/main/java/org/springframework/cache/annotation/CachingConfigurationSelector.java, + * Selects which implementation of {@link AbstractCachingConfiguration} should, + * be used based on the value of {@link EnableCaching#mode} on the importing, + * {@code @Configuration} class., +	 * Returns {@link ProxyCachingConfiguration} or {@code AspectJCachingConfiguration}, +	 * for {@code PROXY} and {@code ASPECTJ} values of {@link EnableCaching#mode()},, +	 * respectively. Potentially includes corresponding JCache configuration as well., +		List<String> result = new ArrayList<>(3);, +		List<String> result = new ArrayList<>(2);, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/CachingConfigurationSelector.java, + * Selects which implementation of {@link AbstractCachingConfiguration} should, + * be used based on the value of {@link EnableCaching#mode} on the importing, + * {@code @Configuration} class., +	 * Returns {@link ProxyCachingConfiguration} or {@code AspectJCachingConfiguration}, +	 * for {@code PROXY} and {@code ASPECTJ} values of {@link EnableCaching#mode()},, +	 * respectively. Potentially includes corresponding JCache configuration as well., +		List<String> result = new ArrayList<>(3);, +		List<String> result = new ArrayList<>(2);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, +	 * <p>Returning {@code null} from this method indicates that the {@code AdviceMode}, +	 * could not be handled or was unknown and that an {@code IllegalArgumentException}, +	 * should be thrown., +	 * @return array containing classes to import (empty array if none;, +	 * {@code null} if the given {@code AdviceMode} is unknown), +++ b/spring-context/src/main/java/org/springframework/cache/annotation/CachingConfigurationSelector.java, + * Selects which implementation of {@link AbstractCachingConfiguration} should, + * be used based on the value of {@link EnableCaching#mode} on the importing, + * {@code @Configuration} class., +	 * Returns {@link ProxyCachingConfiguration} or {@code AspectJCachingConfiguration}, +	 * for {@code PROXY} and {@code ASPECTJ} values of {@link EnableCaching#mode()},, +	 * respectively. Potentially includes corresponding JCache configuration as well., +		List<String> result = new ArrayList<>(3);, +		List<String> result = new ArrayList<>(2);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, +	 * <p>Returning {@code null} from this method indicates that the {@code AdviceMode}, +	 * could not be handled or was unknown and that an {@code IllegalArgumentException}, +	 * should be thrown., +	 * @return array containing classes to import (empty array if none;, +	 * {@code null} if the given {@code AdviceMode} is unknown), +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, + * Copyright 2002-2018 the original author or authors., +	 * Propagates the given custom {@code Environment} to the underlying, +	 * {@link AnnotatedBeanDefinitionReader} and {@link ClassPathBeanDefinitionScanner}., +++ b/spring-context/src/main/java/org/springframework/cache/annotation/CachingConfigurationSelector.java, + * Selects which implementation of {@link AbstractCachingConfiguration} should, + * be used based on the value of {@link EnableCaching#mode} on the importing, + * {@code @Configuration} class., +	 * Returns {@link ProxyCachingConfiguration} or {@code AspectJCachingConfiguration}, +	 * for {@code PROXY} and {@code ASPECTJ} values of {@link EnableCaching#mode()},, +	 * respectively. Potentially includes corresponding JCache configuration as well., +		List<String> result = new ArrayList<>(3);, +		List<String> result = new ArrayList<>(2);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, +	 * <p>Returning {@code null} from this method indicates that the {@code AdviceMode}, +	 * could not be handled or was unknown and that an {@code IllegalArgumentException}, +	 * should be thrown., +	 * @return array containing classes to import (empty array if none;, +	 * {@code null} if the given {@code AdviceMode} is unknown), +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, + * Copyright 2002-2018 the original author or authors., +	 * Propagates the given custom {@code Environment} to the underlying, +	 * {@link AnnotatedBeanDefinitionReader} and {@link ClassPathBeanDefinitionScanner}., +++ b/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java, + * introduced in Spring 3.1. It is used by default to support the {@code property-placeholder}, + * element in working against the spring-context-3.1 or higher XSD, whereas spring-context, + * versions &lt;= 3.0 default to {@code PropertyPlaceholderConfigurer} to ensure backward, + * compatibility. See the spring-context XSD documentation for complete details., + * <p>See {@link org.springframework.core.env.ConfigurableEnvironment} and related javadocs, + * for details on manipulating environment property sources., + * @author Juergen Hoeller, +	 * <p>Setting this property indicates that environment property sources and, +	 * local properties should be ignored., +	 * {@code PropertySources} from the given {@link Environment}, +	 * will be searched when replacing ${...} placeholders., +	 * Processing occurs by replacing ${...} placeholders in bean definitions by resolving each, +	 * Implemented for compatibility with, +	 * {@link org.springframework.beans.factory.config.PlaceholderConfigurerSupport}., +	 * @deprecated in favor of, +	 * {@link #processProperties(ConfigurableListableBeanFactory, ConfigurablePropertyResolver)}, +	 * Return the property sources that were actually applied during, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/CachingConfigurationSelector.java, + * Selects which implementation of {@link AbstractCachingConfiguration} should, + * be used based on the value of {@link EnableCaching#mode} on the importing, + * {@code @Configuration} class., +	 * Returns {@link ProxyCachingConfiguration} or {@code AspectJCachingConfiguration}, +	 * for {@code PROXY} and {@code ASPECTJ} values of {@link EnableCaching#mode()},, +	 * respectively. Potentially includes corresponding JCache configuration as well., +		List<String> result = new ArrayList<>(3);, +		List<String> result = new ArrayList<>(2);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, +	 * <p>Returning {@code null} from this method indicates that the {@code AdviceMode}, +	 * could not be handled or was unknown and that an {@code IllegalArgumentException}, +	 * should be thrown., +	 * @return array containing classes to import (empty array if none;, +	 * {@code null} if the given {@code AdviceMode} is unknown), +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, + * Copyright 2002-2018 the original author or authors., +	 * Propagates the given custom {@code Environment} to the underlying, +	 * {@link AnnotatedBeanDefinitionReader} and {@link ClassPathBeanDefinitionScanner}., +++ b/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java]