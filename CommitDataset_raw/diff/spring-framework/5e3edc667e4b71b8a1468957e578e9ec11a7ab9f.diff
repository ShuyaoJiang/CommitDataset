[+++ b/spring-context/src/main/java/org/springframework/validation/annotation/Validated.java, + * Copyright 2002-2014 the original author or authors., + * Applying this annotation at the method level allows for overriding the, + * validation groups for a specific method but does not serve as a pointcut;, + * a class-level annotation is nevertheless necessary to trigger method validation, + * for a specific bean to begin with. Can also be used as a meta-annotation on a, + * custom stereotype annotation or a custom group-specific validated annotation., +@Target({ElementType.TYPE, ElementType.METHOD, ElementType.PARAMETER}), +++ b/spring-context/src/main/java/org/springframework/validation/annotation/Validated.java, + * Copyright 2002-2014 the original author or authors., + * Applying this annotation at the method level allows for overriding the, + * validation groups for a specific method but does not serve as a pointcut;, + * a class-level annotation is nevertheless necessary to trigger method validation, + * for a specific bean to begin with. Can also be used as a meta-annotation on a, + * custom stereotype annotation or a custom group-specific validated annotation., +@Target({ElementType.TYPE, ElementType.METHOD, ElementType.PARAMETER}), +++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/MethodValidationInterceptor.java, +		Validated validatedAnn = AnnotationUtils.findAnnotation(invocation.getMethod(), Validated.class);, +		if (validatedAnn == null) {, +			validatedAnn = AnnotationUtils.findAnnotation(invocation.getThis().getClass(), Validated.class);, +		}, +		return (validatedAnn != null ? validatedAnn.value() : new Class<?>[0]);, +++ b/spring-context/src/main/java/org/springframework/validation/annotation/Validated.java, + * Copyright 2002-2014 the original author or authors., + * Applying this annotation at the method level allows for overriding the, + * validation groups for a specific method but does not serve as a pointcut;, + * a class-level annotation is nevertheless necessary to trigger method validation, + * for a specific bean to begin with. Can also be used as a meta-annotation on a, + * custom stereotype annotation or a custom group-specific validated annotation., +@Target({ElementType.TYPE, ElementType.METHOD, ElementType.PARAMETER}), +++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/MethodValidationInterceptor.java, +		Validated validatedAnn = AnnotationUtils.findAnnotation(invocation.getMethod(), Validated.class);, +		if (validatedAnn == null) {, +			validatedAnn = AnnotationUtils.findAnnotation(invocation.getThis().getClass(), Validated.class);, +		}, +		return (validatedAnn != null ? validatedAnn.value() : new Class<?>[0]);, +++ b/spring-context/src/test/java/org/springframework/validation/beanvalidation/MethodValidationTests.java, +		@MyValid, +		@Async void myValidAsyncMethod(@NotNull(groups = OtherGroup.class) String arg1, @Max(10) int arg2);, +	public interface OtherGroup {, +	}, +, +, +, +	@Validated({OtherGroup.class, Default.class}), +	@Retention(RetentionPolicy.RUNTIME), +	public @interface MyValid {, +	}, +]