[+++ b/org.springframework.context.support/src/main/java/org/springframework/cache/Cache.java, + * , + * <b>Note:</b> Due to the generic use of caching, it is recommended that , + * implementations allow storage of <tt>null</tt> values (for example to , + * cache methods that return null)., +++ b/org.springframework.context.support/src/main/java/org/springframework/cache/Cache.java, + * , + * <b>Note:</b> Due to the generic use of caching, it is recommended that , + * implementations allow storage of <tt>null</tt> values (for example to , + * cache methods that return null)., +++ b/org.springframework.context.support/src/main/java/org/springframework/cache/concurrent/ConcurrentCache.java, + * Simple {@link Cache} implementation based on the JDK 1.5+, + * java.util.concurrent package. Useful for testing or simple caching scenarios., +		super(delegate, true);, +	@SuppressWarnings("unchecked"), +		if (getAllowNullValues()) {, +			if (value == null) {, +				ConcurrentMap raw = store;, +				return filterNull((V) raw.putIfAbsent(key, NULL_HOLDER));, +			}, +		}, +		return filterNull(store.putIfAbsent(key, value));, +	@SuppressWarnings("unchecked"), +		if (getAllowNullValues()) {, +			if (value == null) {, +				ConcurrentMap raw = store;, +				return raw.remove(key, NULL_HOLDER);, +			}, +		}, +, +	@SuppressWarnings("unchecked"), +		if (getAllowNullValues()) {, +			Object rawOldValue = (oldValue == null ? NULL_HOLDER : oldValue);, +			Object rawNewValue = (newValue == null ? NULL_HOLDER : newValue);, +, +			ConcurrentMap raw = store;, +			return raw.replace(key, rawOldValue, rawNewValue);, +		}, +, +	@SuppressWarnings("unchecked"), +		if (getAllowNullValues()) {, +			if (value == null) {, +				ConcurrentMap raw = store;, +				return filterNull((V) raw.replace(key, NULL_HOLDER));, +			}, +		}, +, +		return filterNull(store.replace(key, value));, +++ b/org.springframework.context.support/src/main/java/org/springframework/cache/Cache.java, + * , + * <b>Note:</b> Due to the generic use of caching, it is recommended that , + * implementations allow storage of <tt>null</tt> values (for example to , + * cache methods that return null)., +++ b/org.springframework.context.support/src/main/java/org/springframework/cache/concurrent/ConcurrentCache.java, + * Simple {@link Cache} implementation based on the JDK 1.5+, + * java.util.concurrent package. Useful for testing or simple caching scenarios., +		super(delegate, true);, +	@SuppressWarnings("unchecked"), +		if (getAllowNullValues()) {, +			if (value == null) {, +				ConcurrentMap raw = store;, +				return filterNull((V) raw.putIfAbsent(key, NULL_HOLDER));, +			}, +		}, +		return filterNull(store.putIfAbsent(key, value));, +	@SuppressWarnings("unchecked"), +		if (getAllowNullValues()) {, +			if (value == null) {, +				ConcurrentMap raw = store;, +				return raw.remove(key, NULL_HOLDER);, +			}, +		}, +, +	@SuppressWarnings("unchecked"), +		if (getAllowNullValues()) {, +			Object rawOldValue = (oldValue == null ? NULL_HOLDER : oldValue);, +			Object rawNewValue = (newValue == null ? NULL_HOLDER : newValue);, +, +			ConcurrentMap raw = store;, +			return raw.replace(key, rawOldValue, rawNewValue);, +		}, +, +	@SuppressWarnings("unchecked"), +		if (getAllowNullValues()) {, +			if (value == null) {, +				ConcurrentMap raw = store;, +				return filterNull((V) raw.replace(key, NULL_HOLDER));, +			}, +		}, +, +		return filterNull(store.replace(key, value));, +++ b/org.springframework.context.support/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +++ b/org.springframework.context.support/src/main/java/org/springframework/cache/Cache.java, + * , + * <b>Note:</b> Due to the generic use of caching, it is recommended that , + * implementations allow storage of <tt>null</tt> values (for example to , + * cache methods that return null)., +++ b/org.springframework.context.support/src/main/java/org/springframework/cache/concurrent/ConcurrentCache.java, + * Simple {@link Cache} implementation based on the JDK 1.5+, + * java.util.concurrent package. Useful for testing or simple caching scenarios.]