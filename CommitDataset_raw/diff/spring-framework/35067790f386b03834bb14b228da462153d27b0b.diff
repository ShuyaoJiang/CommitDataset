[+++ b/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java, +import org.springframework.beans.factory.DisposableBean;, + * <p>This exporter is compatible with MBeans and MXBeans on Java 6 and above., +public class MBeanExporter extends MBeanRegistrationSupport implements MBeanExportOperations,, +		BeanClassLoaderAware, BeanFactoryAware, InitializingBean, DisposableBean, SmartLifecycle {, +	/** Stores the MBeanInfoAssembler to use for this exporter */, +	private MBeanInfoAssembler assembler = new SimpleReflectiveMBeanInfoAssembler();, +	/** The strategy to use for creating ObjectNames for an object */, +	private ObjectNamingStrategy namingStrategy = new KeyNamingStrategy();, +	/** Indicates whether Spring should modify generated ObjectNames */, +	private boolean ensureUniqueRuntimeObjectNames = true;, +	/** Indicates whether Spring should expose the managed resource ClassLoader in the MBean */, +	private boolean exposeManagedResourceClassLoader = true;, +, +	/** Indicate whether to auto-startup within the container-managed lifecycle */, +	private boolean autoStartup = true;, +, +	/** Indicate the phase to use within the container-managed lifecycle */, +	private int phase = Integer.MAX_VALUE;, +	private boolean running = false;, +	public void setExcludedBeans(String... excludedBeans) {, +	 * Set the {@code MBeanExporterListener}s that should be notified, +	 * of MBean registration and unregistration events., +	 * @see MBeanExporterListener, +	public void setListeners(MBeanExporterListener... listeners) {, +		this.listeners = listeners;, +	public void setNotificationListeners(NotificationListenerBean... notificationListeners) {, +	/**, +	 * Indicates whether Spring should ensure that {@link ObjectName ObjectNames}, +	 * generated by the configured {@link ObjectNamingStrategy} for, +	 * runtime-registered MBeans ({@link #registerManagedResource}) should get, +	 * modified: to ensure uniqueness for every instance of a managed {@code Class}., +	 * <p>The default value is {@code true}., +	 * @see #registerManagedResource, +	 * @see JmxUtils#appendIdentityToObjectName(javax.management.ObjectName, Object), +	 */, +	public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {, +		this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames;, +	}, +, +	/**, +	 * Indicates whether or not the managed resource should be exposed on the, +	 * {@link Thread#getContextClassLoader() thread context ClassLoader} before, +	 * allowing any invocations on the MBean to occur., +	 * <p>The default value is {@code true}, exposing a {@link SpringModelMBean}, +	 * which performs thread context ClassLoader management. Switch this flag off to, +	 * expose a standard JMX {@link javax.management.modelmbean.RequiredModelMBean}., +	 */, +	public void setExposeManagedResourceClassLoader(boolean exposeManagedResourceClassLoader) {, +		this.exposeManagedResourceClassLoader = exposeManagedResourceClassLoader;, +	}, +, +	/**, +	 * Set whether to automatically export MBeans after initialization., +	 * <p>Default is "true"; set this to "false" to allow for manual startup, +	 * through the {@link #start()} method., +	 */, +	public void setAutoStartup(boolean autoStartup) {, +		this.autoStartup = autoStartup;, +	}, +, +	@Override, +	public boolean isAutoStartup() {, +		return this.autoStartup;, +	}, +, +	/**, +	 * Specify the phase in which the MBeans should be exported to the, +	 * JMX domain. The startup order proceeds from lowest to highest, and, +	 * the shutdown order is the reverse of that. By default this value, +	 * is {@code Integer.MAX_VALUE} meaning that MBeans are exported, +	 * as late as possible and removed from the domain as soon as possible., +	 */, +	public void setPhase(int phase) {, +		this.phase = phase;, +	}, +, +	@Override, +	public int getPhase() {, +		return this.phase;, +	}, +, +		// where there is already an MBeanServer loaded., +, +	//---------------------------------------------------------------------, +	// Implementation of SmartLifecycle interface, +	//---------------------------------------------------------------------, +, +			}, +			catch (RuntimeException ex) {, +				doStop();, +			this.running = true;, +			doStop();, +			doStop();, +	public void destroy() {, +		synchronized (this.lifecycleMonitor) {, +			doStop();, +		}, +	private void doStop() {, +		unregisterNotificationListeners();]