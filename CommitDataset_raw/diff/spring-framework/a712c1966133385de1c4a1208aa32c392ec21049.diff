[+++ b/build.gradle, +	ext.nioMultipartVersion    = "1.0.2", +		optional("org.synchronoss.cloud:nio-multipart-parser:${nioMultipartVersion}"), +		testRuntime("org.synchronoss.cloud:nio-multipart-parser:${nioMultipartVersion}"), +		testRuntime("com.sun.mail:javax.mail:${javamailVersion}"), +		testRuntime("com.sun.xml.bind:jaxb-core:${jaxbVersion}"), +		testRuntime("com.sun.xml.bind:jaxb-impl:${jaxbVersion}"), +++ b/build.gradle, +	ext.nioMultipartVersion    = "1.0.2", +		optional("org.synchronoss.cloud:nio-multipart-parser:${nioMultipartVersion}"), +		testRuntime("org.synchronoss.cloud:nio-multipart-parser:${nioMultipartVersion}"), +		testRuntime("com.sun.mail:javax.mail:${javamailVersion}"), +		testRuntime("com.sun.xml.bind:jaxb-core:${jaxbVersion}"), +		testRuntime("com.sun.xml.bind:jaxb-impl:${jaxbVersion}"), +++ b/spring-web/src/main/java/org/springframework/http/codec/DefaultClientCodecConfigurer.java, +import org.springframework.http.codec.multipart.MultipartHttpMessageWriter;, +			addWriterTo(result, MultipartHttpMessageWriter::new);, +++ b/build.gradle, +	ext.nioMultipartVersion    = "1.0.2", +		optional("org.synchronoss.cloud:nio-multipart-parser:${nioMultipartVersion}"), +		testRuntime("org.synchronoss.cloud:nio-multipart-parser:${nioMultipartVersion}"), +		testRuntime("com.sun.mail:javax.mail:${javamailVersion}"), +		testRuntime("com.sun.xml.bind:jaxb-core:${jaxbVersion}"), +		testRuntime("com.sun.xml.bind:jaxb-impl:${jaxbVersion}"), +++ b/spring-web/src/main/java/org/springframework/http/codec/DefaultClientCodecConfigurer.java, +import org.springframework.http.codec.multipart.MultipartHttpMessageWriter;, +			addWriterTo(result, MultipartHttpMessageWriter::new);, +++ b/spring-web/src/main/java/org/springframework/http/codec/DefaultServerCodecConfigurer.java, +import org.springframework.http.codec.multipart.SynchronossMultipartHttpMessageReader;, +import org.springframework.util.ClassUtils;, +	static final boolean synchronossMultipartPresent =, +			ClassUtils.isPresent("org.synchronoss.cloud.nio.multipart.NioMultipartParser",, +					org.springframework.http.codec.DefaultCodecConfigurer.class.getClassLoader());, +, +, +			if (synchronossMultipartPresent) {, +				addReaderTo(result, SynchronossMultipartHttpMessageReader::new);, +			}, +++ b/build.gradle, +	ext.nioMultipartVersion    = "1.0.2", +		optional("org.synchronoss.cloud:nio-multipart-parser:${nioMultipartVersion}"), +		testRuntime("org.synchronoss.cloud:nio-multipart-parser:${nioMultipartVersion}"), +		testRuntime("com.sun.mail:javax.mail:${javamailVersion}"), +		testRuntime("com.sun.xml.bind:jaxb-core:${jaxbVersion}"), +		testRuntime("com.sun.xml.bind:jaxb-impl:${jaxbVersion}"), +++ b/spring-web/src/main/java/org/springframework/http/codec/DefaultClientCodecConfigurer.java, +import org.springframework.http.codec.multipart.MultipartHttpMessageWriter;, +			addWriterTo(result, MultipartHttpMessageWriter::new);, +++ b/spring-web/src/main/java/org/springframework/http/codec/DefaultServerCodecConfigurer.java, +import org.springframework.http.codec.multipart.SynchronossMultipartHttpMessageReader;, +import org.springframework.util.ClassUtils;, +	static final boolean synchronossMultipartPresent =, +			ClassUtils.isPresent("org.synchronoss.cloud.nio.multipart.NioMultipartParser",, +					org.springframework.http.codec.DefaultCodecConfigurer.class.getClassLoader());, +, +, +			if (synchronossMultipartPresent) {, +				addReaderTo(result, SynchronossMultipartHttpMessageReader::new);, +			}, +++ b/spring-web/src/test/java/org/springframework/http/codec/ClientCodecConfigurerTests.java, +import org.springframework.http.codec.multipart.MultipartHttpMessageWriter;, +		assertEquals(10, writers.size());, +		assertEquals(MultipartHttpMessageWriter.class, writers.get(this.index.getAndIncrement()).getClass());, +++ b/build.gradle, +	ext.nioMultipartVersion    = "1.0.2", +		optional("org.synchronoss.cloud:nio-multipart-parser:${nioMultipartVersion}"), +		testRuntime("org.synchronoss.cloud:nio-multipart-parser:${nioMultipartVersion}"), +		testRuntime("com.sun.mail:javax.mail:${javamailVersion}"), +		testRuntime("com.sun.xml.bind:jaxb-core:${jaxbVersion}"), +		testRuntime("com.sun.xml.bind:jaxb-impl:${jaxbVersion}"), +++ b/spring-web/src/main/java/org/springframework/http/codec/DefaultClientCodecConfigurer.java, +import org.springframework.http.codec.multipart.MultipartHttpMessageWriter;, +			addWriterTo(result, MultipartHttpMessageWriter::new);, +++ b/spring-web/src/main/java/org/springframework/http/codec/DefaultServerCodecConfigurer.java, +import org.springframework.http.codec.multipart.SynchronossMultipartHttpMessageReader;, +import org.springframework.util.ClassUtils;, +	static final boolean synchronossMultipartPresent =, +			ClassUtils.isPresent("org.synchronoss.cloud.nio.multipart.NioMultipartParser",, +					org.springframework.http.codec.DefaultCodecConfigurer.class.getClassLoader());, +, +, +			if (synchronossMultipartPresent) {, +				addReaderTo(result, SynchronossMultipartHttpMessageReader::new);, +			}, +++ b/spring-web/src/test/java/org/springframework/http/codec/ClientCodecConfigurerTests.java, +import org.springframework.http.codec.multipart.MultipartHttpMessageWriter;, +		assertEquals(10, writers.size());, +		assertEquals(MultipartHttpMessageWriter.class, writers.get(this.index.getAndIncrement()).getClass());, +++ b/spring-web/src/test/java/org/springframework/http/codec/ServerCodecConfigurerTests.java, +import org.springframework.http.codec.multipart.SynchronossMultipartHttpMessageReader;, +		assertEquals(10, readers.size());, +		assertEquals(SynchronossMultipartHttpMessageReader.class, readers.get(this.index.getAndIncrement()).getClass());, +++ b/build.gradle, +	ext.nioMultipartVersion    = "1.0.2", +		optional("org.synchronoss.cloud:nio-multipart-parser:${nioMultipartVersion}"), +		testRuntime("org.synchronoss.cloud:nio-multipart-parser:${nioMultipartVersion}"), +		testRuntime("com.sun.mail:javax.mail:${javamailVersion}"), +		testRuntime("com.sun.xml.bind:jaxb-core:${jaxbVersion}"), +		testRuntime("com.sun.xml.bind:jaxb-impl:${jaxbVersion}"), +++ b/spring-web/src/main/java/org/springframework/http/codec/DefaultClientCodecConfigurer.java]