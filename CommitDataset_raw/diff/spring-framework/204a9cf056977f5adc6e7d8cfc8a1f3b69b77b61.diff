[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +			this.bodySpec.header(WebTestClient.WEBTESTCLIENT_REQUEST_ID, this.requestId);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +			this.bodySpec.header(WebTestClient.WEBTESTCLIENT_REQUEST_ID, this.requestId);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/MockServerExchangeMutator.java, +import org.springframework.http.HttpHeaders;, +		String id = getRequestId(exchange.getRequest().getHeaders());, +		Function<ServerWebExchange, ServerWebExchange> clientMutator = this.perRequestMutators.remove(id);, +		return (clientMutator != null ? this.mutator.andThen(clientMutator) : this.mutator);, +	}, +, +	private String getRequestId(HttpHeaders headers) {, +		String id = headers.getFirst(WebTestClient.WEBTESTCLIENT_REQUEST_ID);, +		Assert.notNull(id, "No \"" + WebTestClient.WEBTESTCLIENT_REQUEST_ID + "\" header");, +		return id;, +			String id = getRequestId(request.headers());, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +			this.bodySpec.header(WebTestClient.WEBTESTCLIENT_REQUEST_ID, this.requestId);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/MockServerExchangeMutator.java, +import org.springframework.http.HttpHeaders;, +		String id = getRequestId(exchange.getRequest().getHeaders());, +		Function<ServerWebExchange, ServerWebExchange> clientMutator = this.perRequestMutators.remove(id);, +		return (clientMutator != null ? this.mutator.andThen(clientMutator) : this.mutator);, +	}, +, +	private String getRequestId(HttpHeaders headers) {, +		String id = headers.getFirst(WebTestClient.WEBTESTCLIENT_REQUEST_ID);, +		Assert.notNull(id, "No \"" + WebTestClient.WEBTESTCLIENT_REQUEST_ID + "\" header");, +		return id;, +			String id = getRequestId(request.headers());, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/WebTestClient.java, +	 * The name of a request header used to assign a unique id to every request, +	 * performed through the {@code WebTestClient}. This can be useful for, +	 * storing contextual information at all phases of request processing (e.g., +	 * from a server-side component) under that id and later to look up, +	 * that information once an {@link ExchangeResult} is available., +	 */, +	String WEBTESTCLIENT_REQUEST_ID = "WebTestClient-Request-Id";, +, +, +	/**, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +			this.bodySpec.header(WebTestClient.WEBTESTCLIENT_REQUEST_ID, this.requestId);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/MockServerExchangeMutator.java, +import org.springframework.http.HttpHeaders;, +		String id = getRequestId(exchange.getRequest().getHeaders());, +		Function<ServerWebExchange, ServerWebExchange> clientMutator = this.perRequestMutators.remove(id);, +		return (clientMutator != null ? this.mutator.andThen(clientMutator) : this.mutator);, +	}, +, +	private String getRequestId(HttpHeaders headers) {, +		String id = headers.getFirst(WebTestClient.WEBTESTCLIENT_REQUEST_ID);, +		Assert.notNull(id, "No \"" + WebTestClient.WEBTESTCLIENT_REQUEST_ID + "\" header");, +		return id;, +			String id = getRequestId(request.headers());, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/WebTestClient.java, +	 * The name of a request header used to assign a unique id to every request, +	 * performed through the {@code WebTestClient}. This can be useful for, +	 * storing contextual information at all phases of request processing (e.g., +	 * from a server-side component) under that id and later to look up, +	 * that information once an {@link ExchangeResult} is available., +	 */, +	String WEBTESTCLIENT_REQUEST_ID = "WebTestClient-Request-Id";, +, +, +	/**, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/WiretapConnector.java, +	WiretapConnector(ClientHttpConnector delegate) {, +					String requestId = wrappedRequest.getHeaders().getFirst(WebTestClient.WEBTESTCLIENT_REQUEST_ID);, +					Assert.notNull(requestId, "No \"" + WebTestClient.WEBTESTCLIENT_REQUEST_ID + "\" header");, +		Assert.notNull(result, "No match for " + WebTestClient.WEBTESTCLIENT_REQUEST_ID + "=" + requestId);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +			this.bodySpec.header(WebTestClient.WEBTESTCLIENT_REQUEST_ID, this.requestId);, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/MockServerExchangeMutator.java, +import org.springframework.http.HttpHeaders;, +		String id = getRequestId(exchange.getRequest().getHeaders());, +		Function<ServerWebExchange, ServerWebExchange> clientMutator = this.perRequestMutators.remove(id);, +		return (clientMutator != null ? this.mutator.andThen(clientMutator) : this.mutator);, +	}, +, +	private String getRequestId(HttpHeaders headers) {, +		String id = headers.getFirst(WebTestClient.WEBTESTCLIENT_REQUEST_ID);, +		Assert.notNull(id, "No \"" + WebTestClient.WEBTESTCLIENT_REQUEST_ID + "\" header");, +		return id;, +			String id = getRequestId(request.headers());, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/WebTestClient.java, +	 * The name of a request header used to assign a unique id to every request, +	 * performed through the {@code WebTestClient}. This can be useful for, +	 * storing contextual information at all phases of request processing (e.g., +	 * from a server-side component) under that id and later to look up, +	 * that information once an {@link ExchangeResult} is available., +	 */, +	String WEBTESTCLIENT_REQUEST_ID = "WebTestClient-Request-Id";, +, +, +	/**, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/WiretapConnector.java, +	WiretapConnector(ClientHttpConnector delegate) {, +					String requestId = wrappedRequest.getHeaders().getFirst(WebTestClient.WEBTESTCLIENT_REQUEST_ID);, +					Assert.notNull(requestId, "No \"" + WebTestClient.WEBTESTCLIENT_REQUEST_ID + "\" header");]