[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +import static java.util.stream.Collectors.toList;, +	private final WebTestClientConnector webTestClientConnector;, +	private final Duration timeout;, +, +	private final AtomicLong requestIndex = new AtomicLong();, +		this.webTestClientConnector = new WebTestClientConnector(connector);, +		this.webClient = webClientBuilder.clientConnector(this.webTestClientConnector).build();, +		this.timeout = (timeout != null ? timeout : Duration.ofSeconds(5));, +		this.timeout = webTestClient.timeout;, +		this.webTestClientConnector = webTestClient.webTestClientConnector;, +		return this.timeout;, +			this.requestId = String.valueOf(requestIndex.incrementAndGet());, +			this.headerSpec.header(WebTestClientConnector.REQUEST_ID_HEADER_NAME, this.requestId);, +			return toResponseSpec(this.headerSpec.exchange());, +			return toResponseSpec(this.headerSpec.exchange(inserter));, +			return toResponseSpec(this.headerSpec.exchange(publisher, elementClass));, +		private DefaultResponseSpec toResponseSpec(Mono<ClientResponse> responseMono) {, +			ClientHttpRequest request = webTestClientConnector.claimRequest(this.requestId);, +			ExchangeResult<Flux<DataBuffer>> result = ExchangeResult.create(request, response);, +		public DefaultResponseSpec(ExchangeResult<Flux<DataBuffer>> exchangeResult, ClientResponse response) {, +			super(exchangeResult, response);, +			return new StatusAssertions(getExchangeResult(), this);, +			return new HeaderAssertions(getExchangeResult(), this);, +		}, +, +		@Override, +		public TypeBodySpec expectBody(Class<?> elementType) {, +			return expectBody(ResolvableType.forClass(elementType));, +		}, +, +		@Override, +		public TypeBodySpec expectBody(ResolvableType elementType) {, +			return new DefaultTypeBodySpec(this, elementType);, +	private class DefaultTypeBodySpec extends ResponseSpecSupport implements TypeBodySpec {, +		public DefaultTypeBodySpec(DefaultResponseSpec spec, ResolvableType elementType) {, +			super(spec.getExchangeResult(), spec.getResponse());, +			return list(-1);, +	private class DefaultSingleValueBodySpec extends ResponseSpecSupport implements SingleValueBodySpec {, +		public DefaultSingleValueBodySpec(DefaultTypeBodySpec spec, ResolvableType elementType) {, +			super(spec.getExchangeResult(), spec.getResponse());, +	private class DefaultListBodySpec extends ResponseSpecSupport implements ListBodySpec {, +		public DefaultListBodySpec(DefaultTypeBodySpec spec, ResolvableType elementType, int elementCount) {, +			super(spec.getExchangeResult(), spec.getResponse());, +	private class DefaultBodySpec extends ResponseSpecSupport implements BodySpec {, +		public DefaultBodySpec(DefaultResponseSpec spec) {, +			super(spec.getExchangeResult(), spec.getResponse());, +		}, +		@Override, +		public ExchangeResult<Void> isEmpty() {, +			DataBuffer buffer = getResponse().body(toDataBuffers()).blockFirst(getTimeout());, +			assertTrue("Expected empty body", buffer == null);, +			return createResultWithDecodedBody(null);, +		public MapBodySpec map(Class<?> keyType, Class<?> valueType) {, +			return map(ResolvableType.forClass(keyType), ResolvableType.forClass(valueType));, +		@Override, +		public MapBodySpec map(ResolvableType keyType, ResolvableType valueType) {, +			return new DefaultMapBodySpec(this, keyType, valueType);, +		}, +	}, +, +	private class DefaultMapBodySpec extends ResponseSpecSupport implements MapBodySpec {, +, +		private final Map<?, ?> body;, +, +, +		public DefaultMapBodySpec(DefaultBodySpec spec, ResolvableType keyType, ResolvableType valueType) {, +			super(spec.getExchangeResult(), spec.getResponse());, +			ResolvableType mapType = ResolvableType.forClassWithGenerics(Map.class, keyType, valueType);, +			this.body = (Map<?, ?>) spec.getResponse().body(toMono(mapType)).block(getTimeout());, +		}, +, +, +		@Override, +		public <K, V> ExchangeResult<Map<K, V>> isEqualTo(Map<K, V> expected) {, +			return returnResult();, +		}, +, +		@Override, +		public MapBodySpec hasSize(int size) {, +			assertEquals("Response body map size", size, this.body.size());, +			return this;, +		}, +, +		@Override, +		public MapBodySpec contains(Object key, Object value) {, +			assertEquals("Response body map value for key " + key, value, this.body.get(key));, +			return this;, +		}, +, +		@Override, +		public MapBodySpec containsKeys(Object... keys) {, +			List<?> missing = Arrays.stream(keys).filter(k -> !this.body.containsKey(k)).collect(toList());, +			assertTrue("Response body map does not contain keys " + missing, missing.isEmpty());, +			return this;, +		}, +, +		@Override, +		public MapBodySpec containsValues(Object... values) {, +			List<?> missing = Arrays.stream(values).filter(v -> !this.body.containsValue(v)).collect(toList());]