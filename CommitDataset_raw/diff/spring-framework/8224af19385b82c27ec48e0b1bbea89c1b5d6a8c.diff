[+++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextCache.java, + * Copyright 2002-2011 the original author or authors., + * <p>Maintains a cache of {@link ApplicationContext contexts} keyed by, + * {@link MergedContextConfiguration} instances. This has significant performance, +	private final Map<MergedContextConfiguration, ApplicationContext> contextMap = new ConcurrentHashMap<MergedContextConfiguration, ApplicationContext>();, +		this.contextMap.clear();, +	boolean contains(MergedContextConfiguration key) {, +		return this.contextMap.containsKey(key);, +	ApplicationContext get(MergedContextConfiguration key) {, +		ApplicationContext context = this.contextMap.get(key);, +	void put(MergedContextConfiguration key, ApplicationContext context) {, +		this.contextMap.put(key, context);, +	ApplicationContext remove(MergedContextConfiguration key) {, +		return this.contextMap.remove(key);, +	void setDirty(MergedContextConfiguration key) {, +		return this.contextMap.size();, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextCache.java, + * Copyright 2002-2011 the original author or authors., + * <p>Maintains a cache of {@link ApplicationContext contexts} keyed by, + * {@link MergedContextConfiguration} instances. This has significant performance, +	private final Map<MergedContextConfiguration, ApplicationContext> contextMap = new ConcurrentHashMap<MergedContextConfiguration, ApplicationContext>();, +		this.contextMap.clear();, +	boolean contains(MergedContextConfiguration key) {, +		return this.contextMap.containsKey(key);, +	ApplicationContext get(MergedContextConfiguration key) {, +		ApplicationContext context = this.contextMap.get(key);, +	void put(MergedContextConfiguration key, ApplicationContext context) {, +		this.contextMap.put(key, context);, +	ApplicationContext remove(MergedContextConfiguration key) {, +		return this.contextMap.remove(key);, +	void setDirty(MergedContextConfiguration key) {, +		return this.contextMap.size();, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/MergedContextConfiguration.java, +import java.io.Serializable;, + * {@code MergedContextConfiguration} encapsulates the <em>merged</em>, + * <p>A {@link SmartContextLoader} uses {@code MergedContextConfiguration}, + * <p>{@code MergedContextConfiguration} is also used by the {@link TestContext}, + * as the context cache key for caching an, + * {@link org.springframework.context.ApplicationContext ApplicationContext}, + * that was loaded using properties of this {@code MergedContextConfiguration}., + * , +public class MergedContextConfiguration implements Serializable {, +, +	private static final long serialVersionUID = -3290560718464957422L;, +	 * Generate a null-safe {@link String} representation of the supplied, +	 * {@link ContextLoader} based solely on the fully qualified name of the, +	 * loader or &quot;null&quot; if the supplied loaded is <code>null</code>., +	 * Create a new {@code MergedContextConfiguration} instance for the, +	 * {@code MergedContextConfiguration}., +	 * Generate a unique hash code for all properties of this, +	 * {@code MergedContextConfiguration} excluding the, +	@Override, +	public int hashCode() {, +		final int prime = 31;, +		int result = 1;, +		result = prime * result + Arrays.hashCode(locations);, +		result = prime * result + Arrays.hashCode(classes);, +		result = prime * result + Arrays.hashCode(activeProfiles);, +		result = prime * result + nullSafeToString(contextLoader).hashCode();, +		return result;, +	 * TODO Document equals() implementation., +	 *, +	 * @see java.lang.Object#equals(java.lang.Object), +	 */, +	@Override, +	public boolean equals(Object obj) {, +, +		if (this == obj) {, +			return true;, +		}, +		if (!(obj instanceof MergedContextConfiguration)) {, +			return false;, +		}, +, +		final MergedContextConfiguration that = (MergedContextConfiguration) obj;, +, +		if (!Arrays.equals(this.locations, that.locations)) {, +			return false;, +		}, +		if (!Arrays.equals(this.classes, that.classes)) {, +			return false;, +		}, +		if (!Arrays.equals(this.activeProfiles, that.activeProfiles)) {, +			return false;, +		}, +		if (!nullSafeToString(this.contextLoader).equals(nullSafeToString(that.contextLoader))) {, +			return false;, +		}, +, +		return true;, +	}, +, +	/**, +	 * Provide a String representation of the {@link #getTestClass() test class},, +	 * {@link #getLocations() locations}, {@link #getClasses() configuration classes},, +	 * {@link #getActiveProfiles() active profiles}, and the name of the, +	 * {@link #getContextLoader() ContextLoader}., +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextCache.java, + * Copyright 2002-2011 the original author or authors., + * <p>Maintains a cache of {@link ApplicationContext contexts} keyed by]