[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/ObjenesisCglibAopProxy.java, + * Copyright 2002-2019 the original author or authors., + * without invoking the constructor of the class. Used by default as of Spring 4., +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ObjenesisCglibAopProxy.java, + * Copyright 2002-2019 the original author or authors., + * without invoking the constructor of the class. Used by default as of Spring 4., +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/AbstractJCacheOperation.java, + * Copyright 2002-2019 the original author or authors., +	private static List<CacheParameterDetail> initializeAllParameterDetails(Method method) {, +		int parameterCount = method.getParameterCount();, +		List<CacheParameterDetail> result = new ArrayList<>(parameterCount);, +		for (int i = 0; i < parameterCount; i++) {, +			CacheParameterDetail detail = new CacheParameterDetail(method, i);, +			result.add(detail);, +		}, +		return result;, +	}, +, +	/**, +	 * Return the {@link ExceptionTypeFilter} to use to filter exceptions thrown while, +	 * invoking the method., +	 * @see #createExceptionTypeFilter, +	 */, +	public abstract ExceptionTypeFilter getExceptionTypeFilter();, +, +	/**, +	 * Convenience method for subclasses to create a specific {@code ExceptionTypeFilter}., +	 * @see #getExceptionTypeFilter(), +	 */, +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ObjenesisCglibAopProxy.java, + * Copyright 2002-2019 the original author or authors., + * without invoking the constructor of the class. Used by default as of Spring 4., +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/AbstractJCacheOperation.java, + * Copyright 2002-2019 the original author or authors., +	private static List<CacheParameterDetail> initializeAllParameterDetails(Method method) {, +		int parameterCount = method.getParameterCount();, +		List<CacheParameterDetail> result = new ArrayList<>(parameterCount);, +		for (int i = 0; i < parameterCount; i++) {, +			CacheParameterDetail detail = new CacheParameterDetail(method, i);, +			result.add(detail);, +		}, +		return result;, +	}, +, +	/**, +	 * Return the {@link ExceptionTypeFilter} to use to filter exceptions thrown while, +	 * invoking the method., +	 * @see #createExceptionTypeFilter, +	 */, +	public abstract ExceptionTypeFilter getExceptionTypeFilter();, +, +	/**, +	 * Convenience method for subclasses to create a specific {@code ExceptionTypeFilter}., +	 * @see #getExceptionTypeFilter(), +	 */, +, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/JCacheOperation.java, + * Copyright 2002-2019 the original author or authors., + * Model the base of JSR-107 cache operation through an interface contract., + *, + * <p>A cache operation can be statically cached as it does not contain any, + * runtime operation of a specific cache invocation., +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ObjenesisCglibAopProxy.java, + * Copyright 2002-2019 the original author or authors., + * without invoking the constructor of the class. Used by default as of Spring 4., +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/AbstractJCacheOperation.java, + * Copyright 2002-2019 the original author or authors., +	private static List<CacheParameterDetail> initializeAllParameterDetails(Method method) {, +		int parameterCount = method.getParameterCount();, +		List<CacheParameterDetail> result = new ArrayList<>(parameterCount);, +		for (int i = 0; i < parameterCount; i++) {, +			CacheParameterDetail detail = new CacheParameterDetail(method, i);, +			result.add(detail);, +		}, +		return result;, +	}, +, +	/**, +	 * Return the {@link ExceptionTypeFilter} to use to filter exceptions thrown while, +	 * invoking the method., +	 * @see #createExceptionTypeFilter, +	 */, +	public abstract ExceptionTypeFilter getExceptionTypeFilter();, +, +	/**, +	 * Convenience method for subclasses to create a specific {@code ExceptionTypeFilter}., +	 * @see #getExceptionTypeFilter(), +	 */, +, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/JCacheOperation.java, + * Copyright 2002-2019 the original author or authors., + * Model the base of JSR-107 cache operation through an interface contract., + *, + * <p>A cache operation can be statically cached as it does not contain any, + * runtime operation of a specific cache invocation., +++ b/spring-context/src/main/java/org/springframework/context/ResourceLoaderAware.java, + * Copyright 2002-2019 the original author or authors., + * Interface to be implemented by any object that wishes to be notified of the, + * {@link ResourceLoader} (typically the ApplicationContext) that it runs in.]