[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, + * Note that those beans can be configured by using the {@code path-matching}, + * MVC namespace element., + * <li>A range of {@link HttpMessageConverter}s depending on which third-party, +, +			ClassUtils.isPresent("com.google.gson.Gson",, +					AnnotationDrivenBeanDefinitionParser.class.getClassLoader());, +		RootBeanDefinition uriContributorDef =, +				new RootBeanDefinition(CompositeUriComponentsContributorFactoryBean.class);, +		uriContributorDef.setSource(source);, +		uriContributorDef.getPropertyValues().addPropertyValue("handlerAdapter", handlerAdapterDef);, +		uriContributorDef.getPropertyValues().addPropertyValue("conversionService", conversionService);, +		String uriContributorName = MvcUriComponentsBuilder.MVC_URI_COMPONENTS_CONTRIBUTOR_BEAN_NAME;, +		readerContext.getRegistry().registerBeanDefinition(uriContributorName, uriContributorDef);, +		RootBeanDefinition mappedInterceptorDef = new RootBeanDefinition(MappedInterceptor.class);, +		mappedInterceptorDef.setSource(source);, +		mappedInterceptorDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +		mappedInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0, (Object) null);, +		mappedInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(1, csInterceptorDef);, +		String mappedInterceptorName = readerContext.registerWithGeneratedName(mappedInterceptorDef);, +		RootBeanDefinition methodExceptionResolver = new RootBeanDefinition(ExceptionHandlerExceptionResolver.class);, +		methodExceptionResolver.setSource(source);, +		methodExceptionResolver.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +		methodExceptionResolver.getPropertyValues().add("contentNegotiationManager", contentNegotiationManager);, +		methodExceptionResolver.getPropertyValues().add("messageConverters", messageConverters);, +		methodExceptionResolver.getPropertyValues().add("order", 0);, +		addResponseBodyAdvice(methodExceptionResolver);, +			methodExceptionResolver.getPropertyValues().add("customArgumentResolvers", argumentResolvers);, +			methodExceptionResolver.getPropertyValues().add("customReturnValueHandlers", returnValueHandlers);, +		String methodExResolverName = readerContext.registerWithGeneratedName(methodExceptionResolver);, +		parserContext.registerComponent(new BeanComponentDefinition(uriContributorDef, uriContributorName));, +		parserContext.registerComponent(new BeanComponentDefinition(mappedInterceptorDef, mappedInterceptorName));, +		parserContext.registerComponent(new BeanComponentDefinition(methodExceptionResolver, methodExResolverName));, +	private RuntimeBeanReference getContentNegotiationManager(, +			Element element, @Nullable Object source, ParserContext parserContext) {, +	private void configurePathMatchingProperties(, +			RootBeanDefinition handlerMappingDef, Element element, ParserContext parserContext) {, +, +, +		Properties defaultMediaTypes = new Properties();, +			defaultMediaTypes.put("atom", MediaType.APPLICATION_ATOM_XML_VALUE);, +			defaultMediaTypes.put("rss", MediaType.APPLICATION_RSS_XML_VALUE);, +			defaultMediaTypes.put("xml", MediaType.APPLICATION_XML_VALUE);, +			defaultMediaTypes.put("json", MediaType.APPLICATION_JSON_VALUE);, +			defaultMediaTypes.put("smile", "application/x-jackson-smile");, +			defaultMediaTypes.put("cbor", "application/cbor");, +		return defaultMediaTypes;, +		return (asyncElement != null ? asyncElement.getAttribute("default-timeout") : null);, +		public CompositeUriComponentsContributor getObject() {]