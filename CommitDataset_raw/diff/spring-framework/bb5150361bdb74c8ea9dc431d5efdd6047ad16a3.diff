[+++ b/org.springframework.core/src/main/java/org/springframework/util/AntPatchStringMatcher.java, +	/** Constructs a new instance of the <code>AntPatchStringMatcher</code>. */, +	/**, +	 * Main entry point., +	 *, +	 * @return <code>true</code> if the string matches against the pattern, or <code>false</code> otherwise., +	 */, +			int patIdxTmp;, +			if (patArr[patIdxStart] == '{') {, +				patIdxTmp = findClosingCurly();, +				addTemplateVariable(patIdxStart, patIdxTmp, strIdxStart, strIdxEnd);, +				patIdxStart = patIdxTmp + 1;, +				strIdxStart = strIdxEnd + 1;, +				continue;, +			}, +			patIdxTmp = findNextStarOrCurly();, +			if (consecutiveStars(patIdxTmp)) {, +	private boolean consecutiveStars(int patIdxTmp) {, +		if (patIdxTmp == patIdxStart + 1 && patArr[patIdxStart] == '*' && patArr[patIdxTmp] == '*') {, +			// Two stars next to each other, skip the first one., +			patIdxStart++;, +			return true;, +		}, +		return false;, +	}, +, +	private int findNextStarOrCurly() {, +			if (patArr[i] == '*' || patArr[i] == '{') {, +				return i;, +			}, +		}, +		return -1;, +	}, +, +	private int findClosingCurly() {, +		for (int i = patIdxStart + 1; i <= patIdxEnd; i++) {, +			if (patArr[i] == '}') {, +++ b/org.springframework.core/src/main/java/org/springframework/util/AntPatchStringMatcher.java, +	/** Constructs a new instance of the <code>AntPatchStringMatcher</code>. */, +	/**, +	 * Main entry point., +	 *, +	 * @return <code>true</code> if the string matches against the pattern, or <code>false</code> otherwise., +	 */, +			int patIdxTmp;, +			if (patArr[patIdxStart] == '{') {, +				patIdxTmp = findClosingCurly();, +				addTemplateVariable(patIdxStart, patIdxTmp, strIdxStart, strIdxEnd);, +				patIdxStart = patIdxTmp + 1;, +				strIdxStart = strIdxEnd + 1;, +				continue;, +			}, +			patIdxTmp = findNextStarOrCurly();, +			if (consecutiveStars(patIdxTmp)) {, +	private boolean consecutiveStars(int patIdxTmp) {, +		if (patIdxTmp == patIdxStart + 1 && patArr[patIdxStart] == '*' && patArr[patIdxTmp] == '*') {, +			// Two stars next to each other, skip the first one., +			patIdxStart++;, +			return true;, +		}, +		return false;, +	}, +, +	private int findNextStarOrCurly() {, +			if (patArr[i] == '*' || patArr[i] == '{') {, +				return i;, +			}, +		}, +		return -1;, +	}, +, +	private int findClosingCurly() {, +		for (int i = patIdxStart + 1; i <= patIdxEnd; i++) {, +			if (patArr[i] == '}') {, +++ b/org.springframework.core/src/test/java/org/springframework/util/AntPathMatcherTests.java, +		Map<String,String> result;, +		result = pathMatcher.extractUriTemplateVariables("/hotels/{hotel}", "/hotels/1");, +		assertEquals(Collections.singletonMap("hotel", "1"), result);, +, +		result = pathMatcher.extractUriTemplateVariables("/h?tels/{hotel}", "/hotels/1");, +, +		result = pathMatcher.extractUriTemplateVariables("/{page}.html", "/42.html");, +		assertEquals(Collections.singletonMap("page", "42"), result);, +, +		result = pathMatcher.extractUriTemplateVariables("/A-{B}-C", "/A-b-C");, +		assertEquals(Collections.singletonMap("B", "b"), result);]