[+++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonDecoderTests.java, +import static org.junit.Assert.*;, +	public void error() throws Exception {, +		Flux<DataBuffer> source = Flux.just(stringBuffer("{\"foofoo\": \"foofoo\", \"barbar\":")), +				.concatWith(Flux.error(new RuntimeException()));, +		ResolvableType elementType = forClass(Pojo.class);, +		Flux<Object> flux = new Jackson2JsonDecoder(new ObjectMapper()).decode(source, elementType, null, emptyMap());, +, +		StepVerifier.create(flux), +				.expectError(RuntimeException.class), +				.verify();, +	}, +, +	@Test, +++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonDecoderTests.java, +import static org.junit.Assert.*;, +	public void error() throws Exception {, +		Flux<DataBuffer> source = Flux.just(stringBuffer("{\"foofoo\": \"foofoo\", \"barbar\":")), +				.concatWith(Flux.error(new RuntimeException()));, +		ResolvableType elementType = forClass(Pojo.class);, +		Flux<Object> flux = new Jackson2JsonDecoder(new ObjectMapper()).decode(source, elementType, null, emptyMap());, +, +		StepVerifier.create(flux), +				.expectError(RuntimeException.class), +				.verify();, +	}, +, +	@Test, +++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2TokenizerTests.java, +import static java.util.Arrays.asList;, +import static java.util.Collections.singletonList;, +	@Test, +	public void errorInStream() {, +		DataBuffer buffer = stringBuffer("{\"id\":1,\"name\":");, +		Flux<DataBuffer> source = Flux.just(buffer), +				.concatWith(Flux.error(new RuntimeException()));, +, +		Flux<TokenBuffer> result = Jackson2Tokenizer.tokenize(source, this.jsonFactory, true);, +, +		StepVerifier.create(result), +				.expectError(RuntimeException.class), +				.verify();, +	}, +]