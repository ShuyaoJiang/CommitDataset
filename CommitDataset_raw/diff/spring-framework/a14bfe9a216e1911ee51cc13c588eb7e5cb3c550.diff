[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AbstractAliasAwareAnnotationAttributeExtractor.java, + * @see AnnotationUtils#synthesizeAnnotation(Annotation, java.lang.reflect.AnnotatedElement), +++ b/spring-core/src/main/java/org/springframework/core/annotation/AbstractAliasAwareAnnotationAttributeExtractor.java, + * @see AnnotationUtils#synthesizeAnnotation(Annotation, java.lang.reflect.AnnotatedElement), +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +import java.util.Collections;, +import java.util.Comparator;, +import java.util.LinkedHashSet;, +import java.util.stream.Collectors;, +import org.springframework.core.annotation.MergedAnnotation.MapValues;, +import org.springframework.core.annotation.MergedAnnotations.SearchStrategy;, +	public static Set<String> getMetaAnnotationTypes(AnnotatedElement element,, +			Class<? extends Annotation> annotationType) {, +, +		return MigrateMethod.from(() ->, +			InternalAnnotatedElementUtils.getMetaAnnotationTypes(element, annotationType), +		).withDescription(() -> element + " " + annotationType, +		).to(() ->, +			getMetaAnnotationTypes(element, element.getAnnotation(annotationType)), +		);, +	public static Set<String> getMetaAnnotationTypes(AnnotatedElement element,, +			String annotationName) {, +, +		return MigrateMethod.from(() ->, +			InternalAnnotatedElementUtils.getMetaAnnotationTypes(element, annotationName), +		).withDescription(() -> element + " " + annotationName, +		).to(() -> {, +			for (Annotation annotation : element.getAnnotations()) {, +				if (annotation.annotationType().getName().equals(annotationName)) {, +					return getMetaAnnotationTypes(element, annotation);, +				}, +			}, +			return Collections.emptySet();, +		});, +	}, +, +	private static Set<String> getMetaAnnotationTypes(AnnotatedElement element,, +			@Nullable Annotation annotation) {, +, +		if (annotation == null) {, +			return Collections.emptySet();, +		}, +		return getAnnotations(annotation.annotationType()).stream(), +				.map(MergedAnnotation::getType), +				.collect(Collectors.toCollection(LinkedHashSet::new));, +	public static boolean hasMetaAnnotationTypes(AnnotatedElement element,, +			Class<? extends Annotation> annotationType) {, +, +		return MigrateMethod.from(() ->, +			InternalAnnotatedElementUtils.hasMetaAnnotationTypes(element, annotationType), +		).to(() ->, +			getAnnotations(element).stream(annotationType), +					.anyMatch(MergedAnnotation::isMetaPresent), +		);, +	public static boolean hasMetaAnnotationTypes(AnnotatedElement element,, +			String annotationName) {, +, +		return MigrateMethod.from(() ->, +			InternalAnnotatedElementUtils.hasMetaAnnotationTypes(element, annotationName), +		).to(() ->, +			getAnnotations(element).stream(annotationName), +					.anyMatch(MergedAnnotation::isMetaPresent), +		);, +	public static boolean isAnnotated(AnnotatedElement element,, +			Class<? extends Annotation> annotationType) {, +, +		return MigrateMethod.from(() ->, +			InternalAnnotatedElementUtils.isAnnotated(element, annotationType), +		).to(() ->, +			getAnnotations(element).isPresent(annotationType), +		);, +		return MigrateMethod.from(() ->, +			InternalAnnotatedElementUtils.isAnnotated(element, annotationName)), +		.to(() ->, +			getAnnotations(element).isPresent(annotationName), +		);, +, +		return MigrateMethod.from(() ->, +			InternalAnnotatedElementUtils.getMergedAnnotationAttributes(element,, +				annotationType)), +		.toNullable(() -> {, +			MergedAnnotation<?> mergedAnnotation = getAnnotations(element), +					.get(annotationType, null, MergedAnnotationSelectors.firstDirectlyDeclared());, +			return getAnnotationAttributes(mergedAnnotation, false, false);, +		});, +	public static AnnotationAttributes getMergedAnnotationAttributes(, +			AnnotatedElement element, String annotationName) {, +, +		return getMergedAnnotationAttributes(element, annotationName, false, false);, +	public static AnnotationAttributes getMergedAnnotationAttributes(, +			AnnotatedElement element, String annotationName, boolean classValuesAsString,, +			boolean nestedAnnotationsAsMap) {, +, +		return MigrateMethod.from(() ->, +			InternalAnnotatedElementUtils.getMergedAnnotationAttributes(element,, +				annotationName, classValuesAsString, nestedAnnotationsAsMap), +		).toNullable(() -> {, +			MergedAnnotation<?> mergedAnnotation = getAnnotations(element), +					.get(annotationName, null, MergedAnnotationSelectors.firstDirectlyDeclared());, +			return getAnnotationAttributes(mergedAnnotation, classValuesAsString, nestedAnnotationsAsMap);]