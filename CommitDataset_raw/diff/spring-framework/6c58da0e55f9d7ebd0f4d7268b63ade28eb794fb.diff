[+++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriComponents.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.util;, +, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.EnumMap;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +, +import org.springframework.util.Assert;, +import org.springframework.util.CollectionUtils;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +import org.springframework.util.StringUtils;, +, +/**, + * Represents the components that make up a URI, mapping component type to string values. Contains convenience getters, + * and setters for all components, as well as the regular {@link Map} implementation., + *, + * <p>This mapping does not contain mappings for {@link UriComponent#PATH_SEGMENT} or nor {@link, + * UriComponent#QUERY_PARAM}, since those components can occur multiple times in the URI. Instead, one can use {@link, + * #getPathSegments()} or {@link #getQueryParams()} respectively., + *, + * @author Arjen Poutsma, + * @since 3.1, + */, +public class UriComponents implements Map<UriComponent, String> {, +, +	private static final String PATH_DELIMITER = "/";, +, +	private static final Pattern QUERY_PARAM_PATTERN = Pattern.compile("([^&=]+)=?([^&=]+)?");, +, +	private final Map<UriComponent, String> uriComponents;, +, +	/** Constructs a new, empty instance of the {@code UriComponents} object. */, +	public UriComponents() {, +		this.uriComponents = new EnumMap<UriComponent, String>(UriComponent.class);, +	}, +, +	/**, +	 * Creates an instance of the {@code UriComponents} object that contains the given component., +	 *, +	 * @param uriComponents the component to initialize with, +	 */, +	public UriComponents(Map<UriComponent, String> uriComponents) {, +		Assert.notNull(uriComponents, "'uriComponents' must not be null");, +		this.uriComponents = new EnumMap<UriComponent, String>(uriComponents);, +	}, +, +	// convenience properties, +, +	/**, +	 * Returns the scheme., +	 *, +	 * @return the scheme. Can be {@code null}., +	 */, +	public String getScheme() {, +		return get(UriComponent.SCHEME);, +	}, +, +	/**, +	 * Sets the scheme., +	 *, +	 * @param scheme the scheme. Can be {@code null}., +	 */, +	public void setScheme(String scheme) {, +		put(UriComponent.SCHEME, scheme);, +	}, +, +	/**, +	 * Returns the authority., +	 *, +	 * @return the authority. Can be {@code null}., +	 */, +	public String getAuthority() {, +		return get(UriComponent.AUTHORITY);, +	}, +, +	/**]