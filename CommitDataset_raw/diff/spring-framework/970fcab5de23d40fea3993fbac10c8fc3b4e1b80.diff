[+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/concurrent/ConcurrentTaskScheduler.java, +import org.springframework.scheduling.support.ErrorHandler;, +import org.springframework.util.Assert;, + * @author Mark Fisher, +	private volatile ScheduledExecutorService scheduledExecutor;, +, +	private volatile ErrorHandler errorHandler;, +	/**, +	 * Provide an {@link ErrorHandler} strategy., +	 */, +	public void setErrorHandler(ErrorHandler errorHandler) {, +		Assert.notNull(errorHandler, "'errorHandler' must not be null");, +		this.errorHandler = errorHandler;, +	}, +, +			ErrorHandler errorHandler = this.errorHandler != null ?, +					this.errorHandler : TaskUtils.getDefaultErrorHandler(true);, +			return new ReschedulingRunnable(task, trigger, this.scheduledExecutor, errorHandler).schedule();, +			return this.scheduledExecutor.schedule(, +					errorHandlingTask(task, false), initialDelay, TimeUnit.MILLISECONDS);, +			return this.scheduledExecutor.scheduleAtFixedRate(, +					errorHandlingTask(task, true), initialDelay, period, TimeUnit.MILLISECONDS);, +			return this.scheduledExecutor.scheduleAtFixedRate(, +					errorHandlingTask(task, true), 0, period, TimeUnit.MILLISECONDS);, +			return this.scheduledExecutor.scheduleWithFixedDelay(, +					errorHandlingTask(task, true), initialDelay, delay, TimeUnit.MILLISECONDS);, +			return this.scheduledExecutor.scheduleWithFixedDelay(, +					errorHandlingTask(task, true), 0, delay, TimeUnit.MILLISECONDS);, +	private Runnable errorHandlingTask(Runnable task, boolean isRepeatingTask) {, +		return TaskUtils.errorHandlingTask(task, this.errorHandler, isRepeatingTask);, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/concurrent/ConcurrentTaskScheduler.java, +import org.springframework.scheduling.support.ErrorHandler;, +import org.springframework.util.Assert;, + * @author Mark Fisher, +	private volatile ScheduledExecutorService scheduledExecutor;, +, +	private volatile ErrorHandler errorHandler;, +	/**, +	 * Provide an {@link ErrorHandler} strategy., +	 */, +	public void setErrorHandler(ErrorHandler errorHandler) {, +		Assert.notNull(errorHandler, "'errorHandler' must not be null");, +		this.errorHandler = errorHandler;, +	}, +, +			ErrorHandler errorHandler = this.errorHandler != null ?, +					this.errorHandler : TaskUtils.getDefaultErrorHandler(true);, +			return new ReschedulingRunnable(task, trigger, this.scheduledExecutor, errorHandler).schedule();, +			return this.scheduledExecutor.schedule(, +					errorHandlingTask(task, false), initialDelay, TimeUnit.MILLISECONDS);, +			return this.scheduledExecutor.scheduleAtFixedRate(, +					errorHandlingTask(task, true), initialDelay, period, TimeUnit.MILLISECONDS);, +			return this.scheduledExecutor.scheduleAtFixedRate(, +					errorHandlingTask(task, true), 0, period, TimeUnit.MILLISECONDS);, +			return this.scheduledExecutor.scheduleWithFixedDelay(, +					errorHandlingTask(task, true), initialDelay, delay, TimeUnit.MILLISECONDS);, +			return this.scheduledExecutor.scheduleWithFixedDelay(, +					errorHandlingTask(task, true), 0, delay, TimeUnit.MILLISECONDS);, +	private Runnable errorHandlingTask(Runnable task, boolean isRepeatingTask) {, +		return TaskUtils.errorHandlingTask(task, this.errorHandler, isRepeatingTask);, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/concurrent/ReschedulingRunnable.java, +import org.springframework.scheduling.support.DelegatingErrorHandlingRunnable;, +import org.springframework.scheduling.support.ErrorHandler;, + * @author Mark Fisher, +class ReschedulingRunnable extends DelegatingErrorHandlingRunnable implements ScheduledFuture<Object> {, +	private final Object triggerContextMonitor = new Object();, +, +	public ReschedulingRunnable(Runnable delegate, Trigger trigger, ScheduledExecutorService executor, ErrorHandler errorHandler) {, +		super(delegate, errorHandler);, +		synchronized (this.triggerContextMonitor) {, +	}, +	@Override, +		super.run();, +		synchronized (this.triggerContextMonitor) {, +		}, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/concurrent/ConcurrentTaskScheduler.java, +import org.springframework.scheduling.support.ErrorHandler;, +import org.springframework.util.Assert;, + * @author Mark Fisher, +	private volatile ScheduledExecutorService scheduledExecutor;, +, +	private volatile ErrorHandler errorHandler;, +	/**, +	 * Provide an {@link ErrorHandler} strategy., +	 */, +	public void setErrorHandler(ErrorHandler errorHandler) {, +		Assert.notNull(errorHandler, "'errorHandler' must not be null");, +		this.errorHandler = errorHandler;, +	}, +, +			ErrorHandler errorHandler = this.errorHandler != null ?, +					this.errorHandler : TaskUtils.getDefaultErrorHandler(true);, +			return new ReschedulingRunnable(task, trigger, this.scheduledExecutor, errorHandler).schedule();, +			return this.scheduledExecutor.schedule(, +					errorHandlingTask(task, false), initialDelay, TimeUnit.MILLISECONDS);, +			return this.scheduledExecutor.scheduleAtFixedRate(]