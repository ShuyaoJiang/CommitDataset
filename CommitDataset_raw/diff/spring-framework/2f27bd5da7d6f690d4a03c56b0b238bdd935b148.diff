[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Projection.java, +		return sb.append("![").append(getChild(0).toStringAST()).append("]").toString();, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Projection.java, +		return sb.append("![").append(getChild(0).toStringAST()).append("]").toString();, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Selection.java, +	public final static int ALL = 0; // ?[], +	public final static int FIRST = 1; // ^[], +	public final static int LAST = 2; // $[], +			sb.append("?[");, +			sb.append("^[");, +			sb.append("$[");, +		return sb.append(getChild(0).toStringAST()).append("]").toString();, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Projection.java, +		return sb.append("![").append(getChild(0).toStringAST()).append("]").toString();, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Selection.java, +	public final static int ALL = 0; // ?[], +	public final static int FIRST = 1; // ^[], +	public final static int LAST = 2; // $[], +			sb.append("?[");, +			sb.append("^[");, +			sb.append("$[");, +		return sb.append(getChild(0).toStringAST()).append("]").toString();, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/generated/SpringExpressions.g, +projection: PROJECT^ expression RBRACKET!;, +selection: SELECT^ expression RBRACKET!;, +firstSelection:	SELECT_FIRST^ expression RBRACKET!;, +lastSelection: SELECT_LAST^ expression RBRACKET!;, +PROJECT: '![';, +SELECT: '?[';, +SELECT_FIRST: '^[';, +SELECT_LAST: '$[';, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Projection.java, +		return sb.append("![").append(getChild(0).toStringAST()).append("]").toString();, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Selection.java, +	public final static int ALL = 0; // ?[], +	public final static int FIRST = 1; // ^[], +	public final static int LAST = 2; // $[], +			sb.append("?[");, +			sb.append("^[");, +			sb.append("$[");, +		return sb.append(getChild(0).toStringAST()).append("]").toString();, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/generated/SpringExpressions.g, +projection: PROJECT^ expression RBRACKET!;, +selection: SELECT^ expression RBRACKET!;, +firstSelection:	SELECT_FIRST^ expression RBRACKET!;, +lastSelection: SELECT_LAST^ expression RBRACKET!;, +PROJECT: '![';, +SELECT: '?[';, +SELECT_FIRST: '^[';, +SELECT_LAST: '$[';, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/generated/SpringExpressions.tokens, +DECIMAL_DIGIT=52, +APOS=68, +TYPEREF=13, +HEXADECIMAL_INTEGER_LITERAL=48, +MOD=31, +AND=26, +ID=36, +SUBTRACT=17, +UPTO=73, +LPAREN=23, +TYPE=44, +HOLDER=10, +AT=72, +LBRACKET=38, +QUALIFIED_IDENTIFIER=6, +RPAREN=24, +STRING_LITERAL=45, +MATCHES=63, +REAL_LITERAL=49, +NOT_EQUAL=56, +COMMA=37, +FUNCTIONREF=12, +EQUAL=55, +PIPE=67, +PLUS=27, +RBRACKET=39, +DOT=34, +SELECT=41, +EXPRESSION=5, +LESS_THAN_OR_EQUAL=58, +GREATER_THAN=59, +PROJECT=40, +SELECT_LAST=43, +DEFAULT=20, +NUMBER=18, +REAL_TYPE_SUFFIX=75, +HEX_DIGIT=54, +POWER=32, +LCURLY=65, +NULL_LITERAL=47, +PROPERTY_OR_FIELD=7, +BANG=33, +INSTANCEOF=61, +MINUS=28, +SEMI=64, +TRUE=50, +COLON=22, +GREATER_THAN_OR_EQUAL=60, +WS=70]