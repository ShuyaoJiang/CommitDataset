[+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.http.HttpRequest;, +	/**, +	 * Create a new {@code UriComponents} object from the URI associated with, +	 * the given HttpRequest while also overlaying with values from the headers, +	 * "X-Forwarded-Host", "X-Forwarded-Port", and "X-Forwarded-Proto" if present., +	 *, +	 * @param request the source request, +	 * @return the URI components of the UR, +	 */, +	public static UriComponentsBuilder fromHttpRequest(HttpRequest request) {, +		URI uri = request.getURI();, +		UriComponentsBuilder builder = UriComponentsBuilder.fromUri(uri);, +, +		String scheme = uri.getScheme();, +		String host = uri.getHost();, +		int port = uri.getPort();, +, +		String hostHeader = request.getHeaders().getFirst("X-Forwarded-Host");, +		if (StringUtils.hasText(hostHeader)) {, +			String[] hosts = StringUtils.commaDelimitedListToStringArray(hostHeader);, +			String hostToUse = hosts[0];, +			if (hostToUse.contains(":")) {, +				String[] hostAndPort = StringUtils.split(hostToUse, ":");, +				host  = hostAndPort[0];, +				port = Integer.parseInt(hostAndPort[1]);, +			}, +			else {, +				host = hostToUse;, +				port = -1;, +			}, +		}, +, +		String portHeader = request.getHeaders().getFirst("X-Forwarded-Port");, +		if (StringUtils.hasText(portHeader)) {, +			port = Integer.parseInt(portHeader);, +		}, +, +		String protocolHeader = request.getHeaders().getFirst("X-Forwarded-Proto");, +		if (StringUtils.hasText(protocolHeader)) {, +			scheme = protocolHeader;, +		}, +, +		builder.scheme(scheme);, +		builder.host(host);, +		if (scheme.equals("http") && port != 80 || scheme.equals("https") && port != 443) {, +			builder.port(port);, +		}, +		return builder;, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.http.HttpRequest;, +	/**, +	 * Create a new {@code UriComponents} object from the URI associated with, +	 * the given HttpRequest while also overlaying with values from the headers, +	 * "X-Forwarded-Host", "X-Forwarded-Port", and "X-Forwarded-Proto" if present., +	 *, +	 * @param request the source request, +	 * @return the URI components of the UR, +	 */, +	public static UriComponentsBuilder fromHttpRequest(HttpRequest request) {, +		URI uri = request.getURI();, +		UriComponentsBuilder builder = UriComponentsBuilder.fromUri(uri);, +, +		String scheme = uri.getScheme();, +		String host = uri.getHost();, +		int port = uri.getPort();, +, +		String hostHeader = request.getHeaders().getFirst("X-Forwarded-Host");, +		if (StringUtils.hasText(hostHeader)) {, +			String[] hosts = StringUtils.commaDelimitedListToStringArray(hostHeader);, +			String hostToUse = hosts[0];, +			if (hostToUse.contains(":")) {, +				String[] hostAndPort = StringUtils.split(hostToUse, ":");, +				host  = hostAndPort[0];, +				port = Integer.parseInt(hostAndPort[1]);, +			}, +			else {, +				host = hostToUse;, +				port = -1;, +			}, +		}, +, +		String portHeader = request.getHeaders().getFirst("X-Forwarded-Port");, +		if (StringUtils.hasText(portHeader)) {, +			port = Integer.parseInt(portHeader);, +		}, +, +		String protocolHeader = request.getHeaders().getFirst("X-Forwarded-Proto");, +		if (StringUtils.hasText(protocolHeader)) {, +			scheme = protocolHeader;, +		}, +, +		builder.scheme(scheme);, +		builder.host(host);, +		if (scheme.equals("http") && port != 80 || scheme.equals("https") && port != 443) {, +			builder.port(port);]