[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +	 * @param stackDescriptor the descriptor of the type on top of the stack, +	public static void insertUnboxInsns(MethodVisitor mv, char ch, String stackDescriptor) {, +			if (!stackDescriptor.equals("Ljava/lang/Integer")) {, +			if (!stackDescriptor.equals("Ljava/lang/Boolean")) {, +			if (!stackDescriptor.equals("Ljava/lang/Byte")) {, +			if (!stackDescriptor.equals("Ljava/lang/Character")) {, +			if (!stackDescriptor.equals("Ljava/lang/Double")) {, +			if (!stackDescriptor.equals("Ljava/lang/Short")) {, +			if (!stackDescriptor.equals("Ljava/lang/Float")) {, +			if (!stackDescriptor.equals("Ljava/lang/Long")) {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +	 * @param stackDescriptor the descriptor of the type on top of the stack, +	public static void insertUnboxInsns(MethodVisitor mv, char ch, String stackDescriptor) {, +			if (!stackDescriptor.equals("Ljava/lang/Integer")) {, +			if (!stackDescriptor.equals("Ljava/lang/Boolean")) {, +			if (!stackDescriptor.equals("Ljava/lang/Byte")) {, +			if (!stackDescriptor.equals("Ljava/lang/Character")) {, +			if (!stackDescriptor.equals("Ljava/lang/Double")) {, +			if (!stackDescriptor.equals("Ljava/lang/Short")) {, +			if (!stackDescriptor.equals("Ljava/lang/Float")) {, +			if (!stackDescriptor.equals("Ljava/lang/Long")) {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpDivide.java, +			CodeFlow.insertUnboxInsns(mv, this.exitTypeDescriptor.charAt(0), leftdesc);, +			codeflow.enterCompilationScope();, +			codeflow.exitCompilationScope();, +				CodeFlow.insertUnboxInsns(mv, this.exitTypeDescriptor.charAt(0), rightdesc);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +	 * @param stackDescriptor the descriptor of the type on top of the stack, +	public static void insertUnboxInsns(MethodVisitor mv, char ch, String stackDescriptor) {, +			if (!stackDescriptor.equals("Ljava/lang/Integer")) {, +			if (!stackDescriptor.equals("Ljava/lang/Boolean")) {, +			if (!stackDescriptor.equals("Ljava/lang/Byte")) {, +			if (!stackDescriptor.equals("Ljava/lang/Character")) {, +			if (!stackDescriptor.equals("Ljava/lang/Double")) {, +			if (!stackDescriptor.equals("Ljava/lang/Short")) {, +			if (!stackDescriptor.equals("Ljava/lang/Float")) {, +			if (!stackDescriptor.equals("Ljava/lang/Long")) {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpDivide.java, +			CodeFlow.insertUnboxInsns(mv, this.exitTypeDescriptor.charAt(0), leftdesc);, +			codeflow.enterCompilationScope();, +			codeflow.exitCompilationScope();, +				CodeFlow.insertUnboxInsns(mv, this.exitTypeDescriptor.charAt(0), rightdesc);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpEQ.java, +		leftActualDescriptor = CodeFlow.toDescriptorFromObject(left);, +		rightActualDescriptor = CodeFlow.toDescriptorFromObject(right);, +		DescriptorComparison dc = DescriptorComparison.checkNumericCompatibility(leftdesc, rightdesc, leftActualDescriptor, rightActualDescriptor);, +		if (dc.areNumbers) {, +			return dc.areCompatible;, +	, +		DescriptorComparison dc = DescriptorComparison.checkNumericCompatibility(leftDesc, rightDesc, leftActualDescriptor, rightActualDescriptor);, +		, +		if (dc.areNumbers && dc.areCompatible) {, +			char targetType = dc.compatibleType;, +				CodeFlow.insertUnboxInsns(mv, targetType, leftDesc);, +			codeflow.enterCompilationScope();, +			codeflow.exitCompilationScope();, +				CodeFlow.insertUnboxInsns(mv, targetType, rightDesc);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +	 * @param stackDescriptor the descriptor of the type on top of the stack, +	public static void insertUnboxInsns(MethodVisitor mv, char ch, String stackDescriptor) {, +			if (!stackDescriptor.equals("Ljava/lang/Integer")) {, +			if (!stackDescriptor.equals("Ljava/lang/Boolean")) {, +			if (!stackDescriptor.equals("Ljava/lang/Byte")) {, +			if (!stackDescriptor.equals("Ljava/lang/Character")) {, +			if (!stackDescriptor.equals("Ljava/lang/Double")) {, +			if (!stackDescriptor.equals("Ljava/lang/Short")) {, +			if (!stackDescriptor.equals("Ljava/lang/Float")) {, +			if (!stackDescriptor.equals("Ljava/lang/Long")) {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpDivide.java, +			CodeFlow.insertUnboxInsns(mv, this.exitTypeDescriptor.charAt(0), leftdesc);, +			codeflow.enterCompilationScope();, +			codeflow.exitCompilationScope();, +				CodeFlow.insertUnboxInsns(mv, this.exitTypeDescriptor.charAt(0), rightdesc);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpEQ.java, +		leftActualDescriptor = CodeFlow.toDescriptorFromObject(left);, +		rightActualDescriptor = CodeFlow.toDescriptorFromObject(right);, +		DescriptorComparison dc = DescriptorComparison.checkNumericCompatibility(leftdesc, rightdesc, leftActualDescriptor, rightActualDescriptor);, +		if (dc.areNumbers) {, +			return dc.areCompatible;, +	, +		DescriptorComparison dc = DescriptorComparison.checkNumericCompatibility(leftDesc, rightDesc, leftActualDescriptor, rightActualDescriptor);, +		, +		if (dc.areNumbers && dc.areCompatible) {, +			char targetType = dc.compatibleType;, +				CodeFlow.insertUnboxInsns(mv, targetType, leftDesc);, +			codeflow.enterCompilationScope();, +			codeflow.exitCompilationScope();, +				CodeFlow.insertUnboxInsns(mv, targetType, rightDesc);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpGE.java, +, +		leftActualDescriptor = CodeFlow.toDescriptorFromObject(left);, +		rightActualDescriptor = CodeFlow.toDescriptorFromObject(right);, +		, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +	 * @param stackDescriptor the descriptor of the type on top of the stack, +	public static void insertUnboxInsns(MethodVisitor mv, char ch, String stackDescriptor) {, +			if (!stackDescriptor.equals("Ljava/lang/Integer")) {, +			if (!stackDescriptor.equals("Ljava/lang/Boolean")) {, +			if (!stackDescriptor.equals("Ljava/lang/Byte")) {]