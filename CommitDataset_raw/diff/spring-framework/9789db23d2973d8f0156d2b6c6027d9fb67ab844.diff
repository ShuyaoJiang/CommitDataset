[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, +		throw new IllegalStateException("No HandlerResultHandler for " + handlerResult.getResult());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, +		throw new IllegalStateException("No HandlerResultHandler for " + handlerResult.getResult());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/HandlerResult.java, +	private final Object result;, +	private final ResolvableType resultType;, +	public HandlerResult(Object handler, Object result, ResolvableType resultType) {, +		Assert.notNull(handler, "'resultType' is required");, +		this.result = result;, +		this.resultType = resultType;, +	public Object getResult() {, +		return this.result;, +	public ResolvableType getResultType() {, +		return this.resultType;, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, +		throw new IllegalStateException("No HandlerResultHandler for " + handlerResult.getResult());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/HandlerResult.java, +	private final Object result;, +	private final ResolvableType resultType;, +	public HandlerResult(Object handler, Object result, ResolvableType resultType) {, +		Assert.notNull(handler, "'resultType' is required");, +		this.result = result;, +		this.resultType = resultType;, +	public Object getResult() {, +		return this.result;, +	public ResolvableType getResultType() {, +		return this.resultType;, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/handler/SimpleHandlerResultHandler.java, +		ResolvableType type = result.getResultType();, +		Object value = result.getResult();, +		if (Void.TYPE.equals(result.getResultType().getRawClass())) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, +		throw new IllegalStateException("No HandlerResultHandler for " + handlerResult.getResult());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/HandlerResult.java, +	private final Object result;, +	private final ResolvableType resultType;, +	public HandlerResult(Object handler, Object result, ResolvableType resultType) {, +		Assert.notNull(handler, "'resultType' is required");, +		this.result = result;, +		this.resultType = resultType;, +	public Object getResult() {, +		return this.result;, +	public ResolvableType getResultType() {, +		return this.resultType;, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/handler/SimpleHandlerResultHandler.java, +		ResolvableType type = result.getResultType();, +		Object value = result.getResult();, +		if (Void.TYPE.equals(result.getResultType().getRawClass())) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/annotation/ResponseBodyResultHandler.java, +		Object value = result.getResult();, +		ResolvableType returnType = result.getResultType();, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, +		throw new IllegalStateException("No HandlerResultHandler for " + handlerResult.getResult());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/HandlerResult.java, +	private final Object result;, +	private final ResolvableType resultType;, +	public HandlerResult(Object handler, Object result, ResolvableType resultType) {, +		Assert.notNull(handler, "'resultType' is required");, +		this.result = result;, +		this.resultType = resultType;, +	public Object getResult() {, +		return this.result;, +	public ResolvableType getResultType() {, +		return this.resultType;, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/handler/SimpleHandlerResultHandler.java, +		ResolvableType type = result.getResultType();, +		Object value = result.getResult();, +		if (Void.TYPE.equals(result.getResultType().getRawClass())) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/method/annotation/ResponseBodyResultHandler.java, +		Object value = result.getResult();, +		ResolvableType returnType = result.getResultType();, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/method/InvocableHandlerMethodTests.java, +		assertEquals("success", values.get(0).getResult());, +		assertEquals("success:null", values.get(0).getResult());, +		assertEquals("success:value1", values.get(0).getResult());, +		assertEquals("success:value1", values.get(0).getResult());]