[+++ b/spring-tx/src/test/java/org/springframework/transaction/event/TransactionalEventListenerTests.java, +import org.junit.Ignore;, +import org.springframework.transaction.annotation.EnableTransactionManagement;, +import org.springframework.transaction.annotation.Transactional;, +	// TODO [SPR-12738] Enable test., +	@Ignore("Disabled until SPR-12738 is resolved"), +	@Test, +	public void afterCommitWithTransactionalComponentListenerProxiedViaDynamicProxy() {, +		load(TransactionalConfiguration.class, TransactionalComponentAfterCommitTestListener.class);, +		this.transactionTemplate.execute(status -> {, +			getContext().publishEvent("SKIP");, +			getEventCollector().assertNoEventReceived();, +			return null;, +, +		});, +		getEventCollector().assertNoEventReceived();, +	}, +, +	@EnableTransactionManagement, +	@Configuration, +	static class TransactionalConfiguration {, +, +		@Bean, +		public CallCountingTransactionManager transactionManager() {, +			return new CallCountingTransactionManager();, +		}, +	}, +, +				assertEquals("Expected no events for phase '" + phase + "' " +, +						"but got " + eventsForPhase + ":", 0, eventsForPhase.size());, +	@Transactional, +	@Component, +	static interface TransactionalComponentAfterCommitTestListenerInterface {, +, +		@TransactionalEventListener(phase = AFTER_COMMIT, condition = "!'SKIP'.equals(#data)"), +		void handleAfterCommit(String data);, +	}, +, +	static class TransactionalComponentAfterCommitTestListener extends BaseTransactionalTestListener implements, +			TransactionalComponentAfterCommitTestListenerInterface {, +, +		@Override, +		public void handleAfterCommit(String data) {, +			handleEvent(EventCollector.AFTER_COMMIT, data);, +		}, +	}, +]