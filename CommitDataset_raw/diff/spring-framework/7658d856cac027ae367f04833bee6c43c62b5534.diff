[+++ b/spring-test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java, +	 * <em>present</em> on the supplied class; or if a given class in the class hierarchy, +	 * top-level annotations., +	 * @throws IllegalArgumentException if the lists of context configuration, +	 * attributes for each level in the {@code @ContextHierarchy} do not define, +	 * unique context configuration within the overall hierarchy., +		// Check for uniqueness, +		Set<List<ContextConfigurationAttributes>> set = new HashSet<List<ContextConfigurationAttributes>>(map.values());, +		if (set.size() != map.size()) {, +			String msg = String.format("The @ContextConfiguration elements configured via ", +					+ "@ContextHierarchy in test class [%s] and its superclasses must ", +					+ "define unique contexts per hierarchy level.", testClass.getName());, +			logger.error(msg);, +			throw new IllegalStateException(msg);, +		}, +, +++ b/spring-test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java, +	 * <em>present</em> on the supplied class; or if a given class in the class hierarchy, +	 * top-level annotations., +	 * @throws IllegalArgumentException if the lists of context configuration, +	 * attributes for each level in the {@code @ContextHierarchy} do not define, +	 * unique context configuration within the overall hierarchy., +		// Check for uniqueness, +		Set<List<ContextConfigurationAttributes>> set = new HashSet<List<ContextConfigurationAttributes>>(map.values());, +		if (set.size() != map.size()) {, +			String msg = String.format("The @ContextConfiguration elements configured via ", +					+ "@ContextHierarchy in test class [%s] and its superclasses must ", +					+ "define unique contexts per hierarchy level.", testClass.getName());, +			logger.error(msg);, +			throw new IllegalStateException(msg);, +		}, +, +++ b/spring-test/src/test/java/org/springframework/test/context/ContextLoaderUtilsContextHierarchyTests.java, +import org.springframework.context.ApplicationContextInitializer;, +import org.springframework.context.ConfigurableApplicationContext;, +	private void assertContextConfigEntriesAreNotUnique(Class<?> testClass) {, +		try {, +			buildContextHierarchyMap(testClass);, +			fail("Should throw an IllegalStateException");, +		}, +		catch (IllegalStateException e) {, +			String msg = String.format(, +				"The @ContextConfiguration elements configured via @ContextHierarchy in test class [%s] and its superclasses must define unique contexts per hierarchy level.",, +				testClass.getName());, +			assertEquals(msg, e.getMessage());, +		}, +	}, +, +	@Test, +	public void buildContextHierarchyMapForSingleTestClassWithMultiLevelContextHierarchyWithEmptyContextConfig() {, +		assertContextConfigEntriesAreNotUnique(SingleTestClassWithMultiLevelContextHierarchyWithEmptyContextConfig.class);, +	}, +, +	@Test, +	public void buildContextHierarchyMapForSingleTestClassWithMultiLevelContextHierarchyWithDuplicatedContextConfig() {, +		assertContextConfigEntriesAreNotUnique(SingleTestClassWithMultiLevelContextHierarchyWithDuplicatedContextConfig.class);, +	}, +, +	/**, +	 * Used to reproduce bug reported in https://jira.springsource.org/browse/SPR-10997, +	 */, +	@Test, +	public void buildContextHierarchyMapForTestClassHierarchyWithMultiLevelContextHierarchiesAndOverriddenInitializers() {, +		Map<String, List<ContextConfigurationAttributes>> map = buildContextHierarchyMap(TestClass2WithMultiLevelContextHierarchyWithOverriddenInitializers.class);, +, +		assertThat(map.size(), is(2));, +		assertThat(map.keySet(), hasItems("alpha", "beta"));, +, +		List<ContextConfigurationAttributes> alphaConfig = map.get("alpha");, +		assertThat(alphaConfig.size(), is(2));, +		assertThat(alphaConfig.get(0).getLocations().length, is(1));, +		assertThat(alphaConfig.get(0).getLocations()[0], is("1-A.xml"));, +		assertThat(alphaConfig.get(0).getInitializers().length, is(0));, +		assertThat(alphaConfig.get(1).getLocations().length, is(0));, +		assertThat(alphaConfig.get(1).getInitializers().length, is(1));, +		assertEquals(DummyApplicationContextInitializer.class, alphaConfig.get(1).getInitializers()[0]);, +, +		List<ContextConfigurationAttributes> betaConfig = map.get("beta");, +		assertThat(betaConfig.size(), is(2));, +		assertThat(betaConfig.get(0).getLocations().length, is(1));, +		assertThat(betaConfig.get(0).getLocations()[0], is("1-B.xml"));, +		assertThat(betaConfig.get(0).getInitializers().length, is(0));, +		assertThat(betaConfig.get(1).getLocations().length, is(0));, +		assertThat(betaConfig.get(1).getInitializers().length, is(1));, +		assertEquals(DummyApplicationContextInitializer.class, betaConfig.get(1).getInitializers()[0]);, +	}, +, +	/**, +	 * Used to reproduce bug reported in https://jira.springsource.org/browse/SPR-10997, +	 */, +	@ContextHierarchy({//, +	//, +		@ContextConfiguration(name = "alpha", locations = "1-A.xml"),//, +		@ContextConfiguration(name = "beta", locations = "1-B.xml") //, +	}), +	private static class TestClass1WithMultiLevelContextHierarchyWithUniqueContextConfig {, +	}, +, +	/**, +	 * Used to reproduce bug reported in https://jira.springsource.org/browse/SPR-10997]