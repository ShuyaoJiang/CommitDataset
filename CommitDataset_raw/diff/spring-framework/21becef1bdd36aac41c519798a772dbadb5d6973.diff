[+++ b/spring-context/src/main/java/org/springframework/format/datetime/DateFormatterRegistrar.java, + * Copyright 2002-2013 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/format/datetime/DateFormatterRegistrar.java, + * Copyright 2002-2013 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/format/datetime/joda/JodaTimeConverters.java, + * Copyright 2002-2013 the original author or authors., + * @author Phillip Webb, +		registry.addConverter(new DateToReadableInstantConverter());, +	/**, +	 * Used when printing a java.util.Date field with a ReadableInstantPrinter., +	 * @see MillisecondInstantPrinter, +	 * @see JodaDateTimeFormatAnnotationFormatterFactory, +	 */, +	private static class DateToReadableInstantConverter implements Converter<Date, ReadableInstant> {, +		public ReadableInstant convert(Date source) {, +			return new DateTime(source);, +		}, +	}, +++ b/spring-context/src/main/java/org/springframework/format/datetime/DateFormatterRegistrar.java, + * Copyright 2002-2013 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/format/datetime/joda/JodaTimeConverters.java, + * Copyright 2002-2013 the original author or authors., + * @author Phillip Webb, +		registry.addConverter(new DateToReadableInstantConverter());, +	/**, +	 * Used when printing a java.util.Date field with a ReadableInstantPrinter., +	 * @see MillisecondInstantPrinter, +	 * @see JodaDateTimeFormatAnnotationFormatterFactory, +	 */, +	private static class DateToReadableInstantConverter implements Converter<Date, ReadableInstant> {, +		public ReadableInstant convert(Date source) {, +			return new DateTime(source);, +		}, +	}, +++ b/spring-context/src/test/java/org/springframework/format/datetime/DateFormattingTests.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.convert.TypeDescriptor;, +	@Test, +	public void dateToString() throws Exception {, +		Date date = new Date();, +		Object actual = this.conversionService.convert(date, TypeDescriptor.valueOf(Date.class), TypeDescriptor.valueOf(String.class));, +		String expected = new DateFormatter().print(date, Locale.US);, +		assertEquals(expected, actual);, +	}, +, +++ b/spring-context/src/main/java/org/springframework/format/datetime/DateFormatterRegistrar.java, + * Copyright 2002-2013 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/format/datetime/joda/JodaTimeConverters.java, + * Copyright 2002-2013 the original author or authors., + * @author Phillip Webb, +		registry.addConverter(new DateToReadableInstantConverter());, +	/**, +	 * Used when printing a java.util.Date field with a ReadableInstantPrinter., +	 * @see MillisecondInstantPrinter, +	 * @see JodaDateTimeFormatAnnotationFormatterFactory, +	 */, +	private static class DateToReadableInstantConverter implements Converter<Date, ReadableInstant> {, +		public ReadableInstant convert(Date source) {, +			return new DateTime(source);, +		}, +	}, +++ b/spring-context/src/test/java/org/springframework/format/datetime/DateFormattingTests.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.convert.TypeDescriptor;, +	@Test, +	public void dateToString() throws Exception {, +		Date date = new Date();, +		Object actual = this.conversionService.convert(date, TypeDescriptor.valueOf(Date.class), TypeDescriptor.valueOf(String.class));, +		String expected = new DateFormatter().print(date, Locale.US);, +		assertEquals(expected, actual);, +	}, +, +++ b/spring-context/src/test/java/org/springframework/format/datetime/joda/JodaTimeFormattingTests.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.convert.TypeDescriptor;, + * @author Phillip Webb, +	@Test, +	public void dateToString() throws Exception {, +		Date date = new Date();, +		Object actual = this.conversionService.convert(date, TypeDescriptor.valueOf(Date.class), TypeDescriptor.valueOf(String.class));, +		String expected = JodaTimeContextHolder.getFormatter(org.joda.time.format.DateTimeFormat.shortDateTime(), Locale.US).print(new DateTime(date));, +		assertEquals(expected, actual);, +	}, +]