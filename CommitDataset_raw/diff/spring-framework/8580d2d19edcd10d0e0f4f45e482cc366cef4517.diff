[+++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java, +		String targetBeanName = getTargetBeanName(originalBeanName);, +		proxyDefinition.setDecoratedDefinition(new BeanDefinitionHolder(targetDefinition, targetBeanName));, +++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java, +		String targetBeanName = getTargetBeanName(originalBeanName);, +		proxyDefinition.setDecoratedDefinition(new BeanDefinitionHolder(targetDefinition, targetBeanName));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, +, +			// First, check annotation on factory method, if applicable, +			Annotation targetAnnotation = getFactoryMethodAnnotation(bd, type);, +			if (targetAnnotation == null) {, +				RootBeanDefinition dbd = getResolvedDecoratedDefinition(bd);, +				if (dbd != null) {, +					targetAnnotation = getFactoryMethodAnnotation(dbd, type);, +				}, +				// Look for matching annotation on the target class, +, +			// If no attributes, the qualifier must be present, +			// Check qualifier first, +				// Fall back on bean definition attribute, +				// Fall back on bean name (or alias) match, +				// Fall back on default, but only if the qualifier is present, +	protected Annotation getFactoryMethodAnnotation(RootBeanDefinition bd, Class<? extends Annotation> type) {, +		Method resolvedFactoryMethod = bd.getResolvedFactoryMethod();, +		return (resolvedFactoryMethod != null ? AnnotationUtils.getAnnotation(resolvedFactoryMethod, type) : null);, +	}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java, +		String targetBeanName = getTargetBeanName(originalBeanName);, +		proxyDefinition.setDecoratedDefinition(new BeanDefinitionHolder(targetDefinition, targetBeanName));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, +, +			// First, check annotation on factory method, if applicable, +			Annotation targetAnnotation = getFactoryMethodAnnotation(bd, type);, +			if (targetAnnotation == null) {, +				RootBeanDefinition dbd = getResolvedDecoratedDefinition(bd);, +				if (dbd != null) {, +					targetAnnotation = getFactoryMethodAnnotation(dbd, type);, +				}, +				// Look for matching annotation on the target class, +, +			// If no attributes, the qualifier must be present, +			// Check qualifier first, +				// Fall back on bean definition attribute, +				// Fall back on bean name (or alias) match, +				// Fall back on default, but only if the qualifier is present, +	protected Annotation getFactoryMethodAnnotation(RootBeanDefinition bd, Class<? extends Annotation> type) {, +		Method resolvedFactoryMethod = bd.getResolvedFactoryMethod();, +		return (resolvedFactoryMethod != null ? AnnotationUtils.getAnnotation(resolvedFactoryMethod, type) : null);, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/GenericTypeAwareAutowireCandidateResolver.java, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +		if (rbd != null) {, +			// First, check factory method return type, if applicable, +			targetType = getReturnTypeForFactoryMethod(rbd, descriptor);, +			if (targetType == null) {, +				RootBeanDefinition dbd = getResolvedDecoratedDefinition(rbd);, +				if (dbd != null) {, +					targetType = getReturnTypeForFactoryMethod(dbd, descriptor);, +	protected RootBeanDefinition getResolvedDecoratedDefinition(RootBeanDefinition rbd) {, +		BeanDefinitionHolder decDef = rbd.getDecoratedDefinition();, +		if (decDef != null && this.beanFactory instanceof ConfigurableListableBeanFactory) {, +			ConfigurableListableBeanFactory clbf = (ConfigurableListableBeanFactory) this.beanFactory;, +			if (clbf.containsBeanDefinition(decDef.getBeanName())) {, +				BeanDefinition dbd = clbf.getMergedBeanDefinition(decDef.getBeanName());, +				if (dbd instanceof RootBeanDefinition) {, +					return (RootBeanDefinition) dbd;, +				}, +			}, +		}, +		return null;, +	}, +, +	protected ResolvableType getReturnTypeForFactoryMethod(RootBeanDefinition rbd, DependencyDescriptor descriptor) {, +		// Should typically be set for any kind of factory method, since the BeanFactory, +		// pre-resolves them before reaching out to the AutowireCandidateResolver..., +		Class<?> preResolved = rbd.resolvedFactoryMethodReturnType;, +		if (preResolved != null) {, +			return ResolvableType.forClass(preResolved);, +		}, +		else {, +			Method resolvedFactoryMethod = rbd.getResolvedFactoryMethod();, +			if (resolvedFactoryMethod != null) {, +				if (descriptor.getDependencyType().isAssignableFrom(resolvedFactoryMethod.getReturnType())) {, +					// Only use factory method metadata if the return type is actually expressive enough, +					// for our dependency. Otherwise, the returned instance type may have matched instead, +					// in case of a singleton instance having been registered with the container already., +					return ResolvableType.forMethodReturnType(resolvedFactoryMethod);, +				}, +			}, +			return null;, +		}, +	}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java, +		String targetBeanName = getTargetBeanName(originalBeanName);, +		proxyDefinition.setDecoratedDefinition(new BeanDefinitionHolder(targetDefinition, targetBeanName));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java]