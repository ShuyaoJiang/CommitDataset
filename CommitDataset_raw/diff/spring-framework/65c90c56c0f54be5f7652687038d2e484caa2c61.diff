[+++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java, +import java.lang.reflect.ParameterizedType;, +import java.lang.reflect.Type;, +import java.lang.reflect.TypeVariable;, +import org.springframework.core.GenericTypeResolver;, +import org.springframework.core.convert.converter.Converter;, +import org.springframework.core.convert.converter.ConverterFactory;, +import org.springframework.ui.format.AnnotationFormatterFactory;, +	private Map<Class, Formatter> typeFormatters = new HashMap<Class, Formatter>();, +	private Map<Class, AnnotationFormatterFactory> annotationFormatters = new HashMap<Class, AnnotationFormatterFactory>();, +			annotationFormatters.put(propertyType, new SimpleAnnotationFormatterFactory(formatter));, +	// TODO determine Annotation type from factory using reflection, +	public void add(AnnotationFormatterFactory<?, ?> factory) {, +		annotationFormatters.put(getAnnotationType(factory), factory);, +	}, +, +			setValue(parse(formatted, getFormatter()));, +			Class<?> formattedType = getFormattedObjectType(formatter);, +			selectableValue = typeConverter.convert(selectableValue, formattedType);, +			Formatter formatter = getFormatter();, +			Class parsedType = getFormattedObjectType(formatter);, +			if (parsedType == null) {, +				parsedType = String.class;, +			}, +			Object values = Array.newInstance(parsedType, formattedValues.length);, +				Array.set(values, i, parse(formattedValues[i], formatter));, +		private Object parse(String formatted, Formatter formatter) {, +				return formatter.parse(formatted, LocaleContextHolder.getLocale());, +		@SuppressWarnings("unchecked"), +						AnnotationFormatterFactory factory = annotationFormatters.get(a.annotationType());, +						if (factory != null) {, +							return factory.getFormatter(a);, +	, +	private Class getAnnotationType(AnnotationFormatterFactory factory) {, +		Class classToIntrospect = factory.getClass();, +		while (classToIntrospect != null) {, +			Type[] genericInterfaces = classToIntrospect.getGenericInterfaces();, +			for (Type genericInterface : genericInterfaces) {, +				if (genericInterface instanceof ParameterizedType) {, +					ParameterizedType pInterface = (ParameterizedType) genericInterface;, +					if (AnnotationFormatterFactory.class.isAssignableFrom((Class) pInterface.getRawType())) {, +						return getParameterClass(pInterface.getActualTypeArguments()[0], factory.getClass());, +					}, +				}, +			}, +			classToIntrospect = classToIntrospect.getSuperclass();, +		}, +		throw new IllegalArgumentException("Unable to extract Annotation type A argument from AnnotationFormatterFactory [", +				+ factory.getClass().getName() + "]; does the factory parameterize the <A> generic type?");, +	}, +	, +	private Class getFormattedObjectType(Formatter formatter) {, +		// TODO consider caching this info, +		Class classToIntrospect = formatter.getClass();, +		while (classToIntrospect != null) {, +			Type[] genericInterfaces = classToIntrospect.getGenericInterfaces();, +			for (Type genericInterface : genericInterfaces) {, +				if (genericInterface instanceof ParameterizedType) {, +					ParameterizedType pInterface = (ParameterizedType) genericInterface;, +					if (Formatter.class.isAssignableFrom((Class) pInterface.getRawType())) {, +						return getParameterClass(pInterface.getActualTypeArguments()[0], formatter.getClass());, +					}, +				}, +			}, +			classToIntrospect = classToIntrospect.getSuperclass();, +		}, +		return null;, +	}, +	, +	private Class getParameterClass(Type parameterType, Class converterClass) {, +		if (parameterType instanceof TypeVariable) {, +			parameterType = GenericTypeResolver.resolveTypeVariable((TypeVariable) parameterType, converterClass);, +		}, +		if (parameterType instanceof Class) {, +			return (Class) parameterType;, +		}, +		throw new IllegalArgumentException("Unable to obtain the java.lang.Class for parameterType [" + parameterType, +				+ "] on Formatter [" + converterClass.getName() + "]");, +	}, +, +	@SuppressWarnings("unchecked"), +	static class SimpleAnnotationFormatterFactory implements AnnotationFormatterFactory {, +, +		private Formatter formatter;, +		, +		public SimpleAnnotationFormatterFactory(Formatter formatter) {, +			this.formatter = formatter;, +		}, +, +		public Formatter getFormatter(Annotation annotation) {, +			return formatter;, +		}, +		, +	}, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binder.java, +import java.lang.reflect.ParameterizedType;, +import java.lang.reflect.Type;, +import java.lang.reflect.TypeVariable;, +import org.springframework.core.GenericTypeResolver;, +import org.springframework.core.convert.converter.Converter;]