[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/PreparedStatementCreatorFactory.java, +	/** List of SqlParameter objects (may not be {@code null}) */, +	public PreparedStatementCreatorFactory(String sql, int... types) {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/PreparedStatementCreatorFactory.java, +	/** List of SqlParameter objects (may not be {@code null}) */, +	public PreparedStatementCreatorFactory(String sql, int... types) {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/SqlParameter.java, + * Copyright 2002-2014 the original author or authors., +	public static List<SqlParameter> sqlTypesToAnonymousParameterList(int... types) {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/PreparedStatementCreatorFactory.java, +	/** List of SqlParameter objects (may not be {@code null}) */, +	public PreparedStatementCreatorFactory(String sql, int... types) {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/SqlParameter.java, + * Copyright 2002-2014 the original author or authors., +	public static List<SqlParameter> sqlTypesToAnonymousParameterList(int... types) {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcCall.java, + * Copyright 2002-2014 the original author or authors., +	/** Context used to retrieve and manage database metadata */, +	private final CallMetaDataContext callMetaDataContext = new CallMetaDataContext();, +, +	/** The generated string used for call statement */, +	 * Set the schema name to use., +	public void setReturnValueRequired(boolean returnValueRequired) {, +		this.callMetaDataContext.setReturnValueRequired(returnValueRequired);, +	 * Specify whether the parameter metadata for the call should be used. The default is true., +	 */, +	public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData) {, +		this.callMetaDataContext.setAccessCallParameterMetaData(accessCallParameterMetaData);, +	}, +, +	/**, +	 * Get the call string that should be used based on parameters and meta data., +	 */, +	public String getCallString() {, +		return this.callString;, +	}, +, +	/**, +	 * Get the {@link CallableStatementCreatorFactory} being used, +	 */, +	protected CallableStatementCreatorFactory getCallableStatementFactory() {, +		return this.callableStatementFactory;, +	}, +, +, +	/**, +	private Map<String, Object> executeCallInternal(Map<String, ?> args) {, +		CallableStatementCreator csc = getCallableStatementFactory().newCallableStatementCreator(args);, +			logger.debug("The following parameters are used for call " + getCallString() + " with " + args);, +			for (SqlParameter param : getCallParameters()) {, +				logger.debug(i + ": " +  param.getName() + ", SQL type "+ param.getSqlType() + ", type name " +, +						param.getTypeName() + ", parameter class [" + param.getClass().getName() + "]");, +				i++;, +, +	 * Get a List of all the call parameters to be used for call. This includes any parameters added, +	 * based on meta data processing., +	 */, +	protected List<SqlParameter> getCallParameters() {, +		return this.callMetaDataContext.getCallParameters();, +	}, +, +	/**, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/PreparedStatementCreatorFactory.java, +	/** List of SqlParameter objects (may not be {@code null}) */, +	public PreparedStatementCreatorFactory(String sql, int... types) {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/SqlParameter.java, + * Copyright 2002-2014 the original author or authors., +	public static List<SqlParameter> sqlTypesToAnonymousParameterList(int... types) {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/simple/AbstractJdbcCall.java, + * Copyright 2002-2014 the original author or authors., +	/** Context used to retrieve and manage database metadata */, +	private final CallMetaDataContext callMetaDataContext = new CallMetaDataContext();, +, +	/** The generated string used for call statement */, +	 * Set the schema name to use., +	public void setReturnValueRequired(boolean returnValueRequired) {, +		this.callMetaDataContext.setReturnValueRequired(returnValueRequired);, +	 * Specify whether the parameter metadata for the call should be used. The default is true., +	 */, +	public void setAccessCallParameterMetaData(boolean accessCallParameterMetaData) {, +		this.callMetaDataContext.setAccessCallParameterMetaData(accessCallParameterMetaData);, +	}, +, +	/**, +	 * Get the call string that should be used based on parameters and meta data., +	 */, +	public String getCallString() {, +		return this.callString;, +	}, +, +	/**, +	 * Get the {@link CallableStatementCreatorFactory} being used, +	 */, +	protected CallableStatementCreatorFactory getCallableStatementFactory() {, +		return this.callableStatementFactory;, +	}, +, +, +	/**, +	private Map<String, Object> executeCallInternal(Map<String, ?> args) {]