[+++ b/src/asciidoc/core-aop.adoc, +AspectJ defines and therefore not available for aspects declared in the `@Aspect` model., +transaction semantics given by the class annotation (if present). Methods of any, +visibility may be annotated, including private methods. Annotating non-public methods, +directly is the only way to get transaction demarcation for the execution of such methods., +++ b/src/asciidoc/core-aop.adoc, +AspectJ defines and therefore not available for aspects declared in the `@Aspect` model., +transaction semantics given by the class annotation (if present). Methods of any, +visibility may be annotated, including private methods. Annotating non-public methods, +directly is the only way to get transaction demarcation for the execution of such methods., +++ b/src/asciidoc/core-beans.adoc, +[NOTE], +====, +With component scanning in the classpath, Spring generates bean names for unnamed, +components, following the rules above: essentially, taking the simple class name, +and turning its initial character to lower-case. However, in the (unusual) special, +case when there is more than one character and both the first and second characters, +are upper case, the original casing gets preserved. These are the same rules as, +defined by `java.beans.Introspector.decapitalize` (which Spring is using here)., +====, +, +When using `@Named`, it is possible to use component scanning in the exact same way, +as when using Spring annotations:, +[NOTE], +====, +In contrast to `@Component`, the JSR-330 `@Named` annotation is not composable., +Please use Spring's stereotype model for building custom component annotations., +====, +, +++ b/src/asciidoc/core-aop.adoc, +AspectJ defines and therefore not available for aspects declared in the `@Aspect` model., +transaction semantics given by the class annotation (if present). Methods of any, +visibility may be annotated, including private methods. Annotating non-public methods, +directly is the only way to get transaction demarcation for the execution of such methods., +++ b/src/asciidoc/core-beans.adoc, +[NOTE], +====, +With component scanning in the classpath, Spring generates bean names for unnamed, +components, following the rules above: essentially, taking the simple class name, +and turning its initial character to lower-case. However, in the (unusual) special, +case when there is more than one character and both the first and second characters, +are upper case, the original casing gets preserved. These are the same rules as, +defined by `java.beans.Introspector.decapitalize` (which Spring is using here)., +====, +, +When using `@Named`, it is possible to use component scanning in the exact same way, +as when using Spring annotations:, +[NOTE], +====, +In contrast to `@Component`, the JSR-330 `@Named` annotation is not composable., +Please use Spring's stereotype model for building custom component annotations., +====, +, +++ b/src/asciidoc/integration.adoc, +The `@Scheduled` annotation can be added to a method along with trigger metadata. For, +As of Spring Framework 4.3, `@Scheduled` methods are supported on beans of any scope., +, +Make sure that you are not initializing multiple instances of the same `@Scheduled`, +instance. Related to this, make sure that you do not use `@Configurable` on bean, +classes which are annotated with `@Scheduled` and registered as regular Spring beans, +with the container: You would get double initialization otherwise, once through the, +container and once through the `@Configurable` aspect, with the consequence of each, +`@Scheduled` method being invoked twice., +`@PostConstruct`. To asynchronously initialize Spring beans you currently have to use, +a separate initializing Spring bean that invokes the `@Async` annotated method on the, +	public class SampleBeanInitializer {, +[NOTE], +====, +There is no direct XML equivalent for `@Async` since such methods should be designed, +for asynchronous execution in the first place, not externally re-declared to be async., +However, you may manually set up Spring's `AsyncExecutionInterceptor` with Spring AOP,, +in combination with a custom pointcut., +====, +]