[+++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +		Jackson2Tokenizer tokenizer = new Jackson2Tokenizer(nonBlockingParser(), true);, +				.flatMap(tokenizer), +				.doFinally(t -> tokenizer.endOfInput());, +		Jackson2Tokenizer tokenizer = new Jackson2Tokenizer(nonBlockingParser(), false);, +				.flatMap(tokenizer), +				.doFinally(t -> tokenizer.endOfInput());, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +		Jackson2Tokenizer tokenizer = new Jackson2Tokenizer(nonBlockingParser(), true);, +				.flatMap(tokenizer), +				.doFinally(t -> tokenizer.endOfInput());, +		Jackson2Tokenizer tokenizer = new Jackson2Tokenizer(nonBlockingParser(), false);, +				.flatMap(tokenizer), +				.doFinally(t -> tokenizer.endOfInput());, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2Tokenizer.java, +	public void endOfInput() {, +		this.inputFeeder.endOfInput();, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +		Jackson2Tokenizer tokenizer = new Jackson2Tokenizer(nonBlockingParser(), true);, +				.flatMap(tokenizer), +				.doFinally(t -> tokenizer.endOfInput());, +		Jackson2Tokenizer tokenizer = new Jackson2Tokenizer(nonBlockingParser(), false);, +				.flatMap(tokenizer), +				.doFinally(t -> tokenizer.endOfInput());, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2Tokenizer.java, +	public void endOfInput() {, +		this.inputFeeder.endOfInput();, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/xml/XmlEventDecoder.java, +			AaltoDataBufferToXmlEvent aaltoMapper = new AaltoDataBufferToXmlEvent();, +			return flux.flatMap(aaltoMapper), +					.doFinally(signalType -> aaltoMapper.endOfInput());, +, +		public void endOfInput() {, +			this.streamReader.getInputFeeder().endOfInput();, +		}]