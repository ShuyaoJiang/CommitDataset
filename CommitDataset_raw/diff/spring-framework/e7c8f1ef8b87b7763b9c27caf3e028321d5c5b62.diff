[+++ b/org.springframework.context/src/main/java/org/springframework/mapping/Mapper.java, +	 * @return the mapped target object, +	Object map(S source, T target);, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/Mapper.java, +	 * @return the mapped target object, +	Object map(S source, T target);, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/MappingException.java, +			ps.println();, +			ps.println("Mapping Failure Traces:");, +				ps.println("- MappingFailure #" + i + ":");, +			pw.println();, +			pw.println("Mapping Failure Traces:");, +				pw.println("- MappingFailure #" + i + ":");, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/Mapper.java, +	 * @return the mapped target object, +	Object map(S source, T target);, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/MappingException.java, +			ps.println();, +			ps.println("Mapping Failure Traces:");, +				ps.println("- MappingFailure #" + i + ":");, +			pw.println();, +			pw.println("Mapping Failure Traces:");, +				pw.println("- MappingFailure #" + i + ":");, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/SpelMapper.java, +import org.springframework.expression.EvaluationException;, +	public MappingConfiguration addMapping(String fieldExpression) {, +		return addMapping(fieldExpression, fieldExpression);, +	public MappingConfiguration addMapping(String sourceFieldExpression, String targetFieldExpression) {, +			sourceExp = sourceExpressionParser.parseExpression(sourceFieldExpression);, +			throw new IllegalArgumentException("The mapping source '" + sourceFieldExpression, +			targetExp = targetExpressionParser.parseExpression(targetFieldExpression);, +			throw new IllegalArgumentException("The mapping target '" + targetFieldExpression, +	public Object map(Object source, Object target) {, +		Set<Mapping> autoMappings = getAutoMappings(sourceContext, targetContext);, +		return target;, +	private Set<Mapping> getAutoMappings(EvaluationContext sourceContext, EvaluationContext targetContext) {, +			Set<String> sourceFields = getMappableFields(sourceContext.getRootObject().getValue());, +				if (!explicitlyMapped(field)) {, +					try {, +						if (targetExpression.isWritable(targetContext)) {, +							autoMappings.add(new Mapping(sourceExpression, targetExpression));, +						}, +					} catch (EvaluationException e) {, +, +					}, +			if (mapping.getSourceExpressionString().startsWith(field)) {, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/Mapper.java, +	 * @return the mapped target object, +	Object map(S source, T target);, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/MappingException.java, +			ps.println();, +			ps.println("Mapping Failure Traces:");, +				ps.println("- MappingFailure #" + i + ":");, +			pw.println();, +			pw.println("Mapping Failure Traces:");, +				pw.println("- MappingFailure #" + i + ":");, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/SpelMapper.java, +import org.springframework.expression.EvaluationException;, +	public MappingConfiguration addMapping(String fieldExpression) {, +		return addMapping(fieldExpression, fieldExpression);, +	public MappingConfiguration addMapping(String sourceFieldExpression, String targetFieldExpression) {, +			sourceExp = sourceExpressionParser.parseExpression(sourceFieldExpression);, +			throw new IllegalArgumentException("The mapping source '" + sourceFieldExpression, +			targetExp = targetExpressionParser.parseExpression(targetFieldExpression);, +			throw new IllegalArgumentException("The mapping target '" + targetFieldExpression, +	public Object map(Object source, Object target) {, +		Set<Mapping> autoMappings = getAutoMappings(sourceContext, targetContext);, +		return target;, +	private Set<Mapping> getAutoMappings(EvaluationContext sourceContext, EvaluationContext targetContext) {, +			Set<String> sourceFields = getMappableFields(sourceContext.getRootObject().getValue());, +				if (!explicitlyMapped(field)) {, +					try {, +						if (targetExpression.isWritable(targetContext)) {, +							autoMappings.add(new Mapping(sourceExpression, targetExpression));, +						}, +					} catch (EvaluationException e) {, +, +					}, +			if (mapping.getSourceExpressionString().startsWith(field)) {, +++ b/org.springframework.context/src/test/java/org/springframework/mapping/support/SpelMapperTests.java, +import static org.junit.Assert.assertNull;, +		mapper.setAutoMappingEnabled(false);, +		mapper.addMapping("name");, +		mapper.addMapping("test", "age");, +	public void mapAutomaticIgnoreUnknownField() {, +		Map<String, Object> source = new HashMap<String, Object>();, +		source.put("name", "Keith");, +		source.put("age", 31);, +		source.put("unknown", "foo");, +		Person target = new Person();, +, +		mapper.map(source, target);, +, +		assertEquals("Keith", target.name);, +		assertEquals(31, target.age);, +	}, +, +	@Test, +	public void mapSameSourceFieldToMultipleTargets() {, +		mapper.addMapping("test", "name");]