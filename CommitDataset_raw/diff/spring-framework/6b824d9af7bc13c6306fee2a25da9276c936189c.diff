[+++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/FrameworkPortlet.java, +		Class<?> contextClass = getContextClass();, +					contextClass.getName() + "'" + ", using parent context [" + parent + "]");, +		if (!ConfigurablePortletApplicationContext.class.isAssignableFrom(contextClass)) {, +					"': custom ApplicationContext class [" + contextClass.getName() +, +				(ConfigurablePortletApplicationContext) BeanUtils.instantiateClass(contextClass);, +, +		// Assign the best possible id value., +		String portletContextName = getPortletContext().getPortletContextName();, +		if (portletContextName != null) {, +			pac.setId(ConfigurablePortletApplicationContext.APPLICATION_CONTEXT_ID_PREFIX + portletContextName + "." + getPortletName());, +		}, +		else {, +			pac.setId(ConfigurablePortletApplicationContext.APPLICATION_CONTEXT_ID_PREFIX + getPortletName());, +		}, +, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/FrameworkPortlet.java, +		Class<?> contextClass = getContextClass();, +					contextClass.getName() + "'" + ", using parent context [" + parent + "]");, +		if (!ConfigurablePortletApplicationContext.class.isAssignableFrom(contextClass)) {, +					"': custom ApplicationContext class [" + contextClass.getName() +, +				(ConfigurablePortletApplicationContext) BeanUtils.instantiateClass(contextClass);, +, +		// Assign the best possible id value., +		String portletContextName = getPortletContext().getPortletContextName();, +		if (portletContextName != null) {, +			pac.setId(ConfigurablePortletApplicationContext.APPLICATION_CONTEXT_ID_PREFIX + portletContextName + "." + getPortletName());, +		}, +		else {, +			pac.setId(ConfigurablePortletApplicationContext.APPLICATION_CONTEXT_ID_PREFIX + getPortletName());, +		}, +, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/context/ConfigurablePortletApplicationContext.java, +	 * Prefix for ApplicationContext ids that refer to portlet name., +	 */, +	String APPLICATION_CONTEXT_ID_PREFIX = WebApplicationContext.class.getName() + ":";, +, +	/**, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/FrameworkPortlet.java, +		Class<?> contextClass = getContextClass();, +					contextClass.getName() + "'" + ", using parent context [" + parent + "]");, +		if (!ConfigurablePortletApplicationContext.class.isAssignableFrom(contextClass)) {, +					"': custom ApplicationContext class [" + contextClass.getName() +, +				(ConfigurablePortletApplicationContext) BeanUtils.instantiateClass(contextClass);, +, +		// Assign the best possible id value., +		String portletContextName = getPortletContext().getPortletContextName();, +		if (portletContextName != null) {, +			pac.setId(ConfigurablePortletApplicationContext.APPLICATION_CONTEXT_ID_PREFIX + portletContextName + "." + getPortletName());, +		}, +		else {, +			pac.setId(ConfigurablePortletApplicationContext.APPLICATION_CONTEXT_ID_PREFIX + getPortletName());, +		}, +, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/context/ConfigurablePortletApplicationContext.java, +	 * Prefix for ApplicationContext ids that refer to portlet name., +	 */, +	String APPLICATION_CONTEXT_ID_PREFIX = WebApplicationContext.class.getName() + ":";, +, +	/**, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FrameworkServlet.java, +import javax.servlet.ServletContext;, +		Class<?> contextClass = getContextClass();, +					contextClass.getName() + "'" + ", using parent context [" + parent + "]");, +		if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {, +					"': custom WebApplicationContext class [" + contextClass.getName() +, +				(ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);, +, +		// Assign the best possible id value., +		ServletContext servletContext = getServletContext();, +		if (servletContext.getMajorVersion() > 2 || servletContext.getMinorVersion() >= 5) {, +			// Servlet 2.5's getContextPath available!, +			wac.setId(ConfigurableWebApplicationContext.APPLICATION_CONTEXT_ID_PREFIX + servletContext.getContextPath() + "/" + getServletName());, +		}, +		else {, +			// Servlet <= 2.4: resort to name specified in web.xml, if any., +			String servletContextName = servletContext.getServletContextName();, +			if (servletContextName != null) {, +				wac.setId(ConfigurableWebApplicationContext.APPLICATION_CONTEXT_ID_PREFIX + servletContextName + "." + getServletName());, +			}, +			else {, +				wac.setId(ConfigurableWebApplicationContext.APPLICATION_CONTEXT_ID_PREFIX + getServletName());, +			}, +		}, +, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/FrameworkPortlet.java, +		Class<?> contextClass = getContextClass();, +					contextClass.getName() + "'" + ", using parent context [" + parent + "]");, +		if (!ConfigurablePortletApplicationContext.class.isAssignableFrom(contextClass)) {, +					"': custom ApplicationContext class [" + contextClass.getName() +, +				(ConfigurablePortletApplicationContext) BeanUtils.instantiateClass(contextClass);, +, +		// Assign the best possible id value., +		String portletContextName = getPortletContext().getPortletContextName();, +		if (portletContextName != null) {, +			pac.setId(ConfigurablePortletApplicationContext.APPLICATION_CONTEXT_ID_PREFIX + portletContextName + "." + getPortletName());, +		}, +		else {, +			pac.setId(ConfigurablePortletApplicationContext.APPLICATION_CONTEXT_ID_PREFIX + getPortletName());, +		}]