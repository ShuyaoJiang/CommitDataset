[+++ b/src/asciidoc/testing.adoc, +mock objects, which are useful for testing web contexts, controllers, and filters. These, +mock objects are targeted at usage with Spring's Web MVC framework and are generally more, +convenient to use than dynamic mock objects such as http://www.easymock.org[EasyMock] or, +alternative Servlet API mock objects such as http://www.mockobjects.com[MockObjects]. As of, +Spring Framework 4.0, the set of mocks in the `org.springframework.mock.web` package is, +based on the Servlet 3.0 API., +, +For thorough integration testing of your Spring MVC and REST ++Controller++s in, +conjunction with your `WebApplicationContext` configuration for Spring MVC, see the, +<<spring-mvc-test-framework,_Spring MVC Test Framework_>>., +To unit test your Spring MVC ++Controller++s as POJOs, use `ModelAndViewAssert` combined, +with `MockHttpServletRequest`, `MockHttpSession`, and so on from Spring's, +<<mock-objects-servlet, Servlet API mocks>>. For thorough integration testing of your, +Spring MVC and REST ++Controller++s in conjunction with your `WebApplicationContext`, +configuration for Spring MVC, use the <<spring-mvc-test-framework,_Spring MVC Test, +Framework_>> instead., +__Spring MVC Test__ builds on the familiar <<mock-objects-servlet,"mock" implementations, +of the Servlet API>> available in the `spring-test` module. This allows performing, +requests and generating responses without the need for running in a Servlet container., +For the most part everything should work as it does at runtime with a few notable, +exceptions as explained in <<spring-mvc-test-vs-end-to-end-integration-tests>>. Here is, +an example of using Spring MVC Test:]