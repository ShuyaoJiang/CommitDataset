[+++ b/spring-framework-reference/src/expressions.xml, +        <para>Relational operators</para>, +        <para>Ternary operator</para>, +      </listitem>, +, +      <listitem>, +      <programlisting language="java">ExpressionParser parser = new SpelAntlrExpressionParser();, +, +// Inventions Array, +StandardEvaluationContext teslaContext = new StandardEvaluationContext();, +teslaContext.setRootObject(tesla);, +, +// evaluates to "Induction motor", +String invention = parser.parseExpression("inventions[3]").getValue(teslaContext, String.class); , +, +, +// Members List, +StandardEvaluationContext societyContext = new StandardEvaluationContext();, +societyContext.setRootObject(ieee);, +, +// evaluates to "Nikola Tesla", +String name = parser.parseExpression("Members[0].Name").getValue(societyContext, String.class);, +, +// List and Array navigation, +// evaluates to "Wireless communication", +String invention = parser.parseExpression("Members[0].Inventions[6]").getValue(societyContext, String.class);, +</programlisting>, +, +      <para>The contents of dictionaries are obtained by specifying the, +      literal key value within the brackets. In this case, because keys for, +      the Officers dictionary are strings, we can specify string, +      literal.</para>, +, +      <programlisting lang="" language="java">// Officer's Dictionary, +, +Inventor pupin = parser.parseExpression("Officers['president']").getValue(societyContext, Inventor.class);, +, +// evaluates to "Idvor", +String city = parser.parseExpression("Officers['president'].PlaceOfBirth.City").getValue(societyContext, String.class);, +, +// setting values, +parser.parseExpression("Officers['advisors'][0].PlaceOfBirth.Country").setValue(societyContext, "Croatia");, +, +</programlisting>, +      <para>Methods are invoked using typical Java programming syntax. You may, +      also invoke methods on literals. Varargs are also supported.</para>, +, +      <programlisting language="java">// string literal, evaluates to "bc", +String c = parser.parseExpression("'abc'.substring(2, 3)").getValue(String.class);, +, +// evaluates to true, +boolean isMember = parser.parseExpression("isMember('Mihajlo Pupin')").getValue(societyContext, Boolean.class);</programlisting>, +        <para>The relational operators; equal, not equal, less than, less than, +        or equal, greater than, and greater than or equal are supported using, +        standard operator notation. Support is not yet implemented for objects, +        that implement the Comparable interface.</para>, +        <para><programlisting language="java">// evaluats to true, +boolean isEqual = parser.parseExpression("2 == 2").getValue(Boolean.class);, +, +// evaluates to false, +boolean isEqual = parser.parseExpression("2 &lt; -5.0").getValue(Boolean.class);, +, +// evaluates to true, +boolean isEqual = parser.parseExpression("'black' &lt; 'block'").getValue(Boolean.class);</programlisting>In, +        addition to standard relational operators SpEL supports the, +        'instanceof' and regular expression based 'matches' operator.</para>, +, +        <programlisting language="java">// evaluates to false, +boolean falseValue = parser.parseExpression("'xyz' instanceof T(int)").getValue(Boolean.class);, +, +// evaluates to true, +boolean trueValue = parser.parseExpression("'5.00' matches '^-?\\d+(\\.\\d{2})?$'").getValue(Boolean.class);, +, +//evaluates to false, +boolean falseValue = parser.parseExpression("'5.0067' matches '^-?\\d+(\\.\\d{2})?$'").getValue(Boolean.class);, +, +</programlisting>, +        <para>The logical operators that are supported are and, or, and not., +        Their use is demonstrated below</para>, +        <para><programlisting language="java">// -- AND --, +, +// evaluates to false, +boolean falseValue = parser.parseExpression("true and false").getValue(Boolean.class);, +, +// evaluates to true, +String expression =  "isMember('Nikola Tesla') and isMember('Mihajlo Pupin')";, +boolean trueValue = parser.parseExpression(expression).getValue(societyContext, Boolean.class);, +, +// -- OR --, +, +// evaluates to false, +boolean falseValue = parser.parseExpression("true or false").getValue(Boolean.class);, +, +// evaluates to true, +String expression =  "isMember('Nikola Tesla') or isMember('Albert Einstien')";, +boolean trueValue = parser.parseExpression(expression).getValue(societyContext, Boolean.class);, +, +// -- NOT --, +, +// evaluates to false]