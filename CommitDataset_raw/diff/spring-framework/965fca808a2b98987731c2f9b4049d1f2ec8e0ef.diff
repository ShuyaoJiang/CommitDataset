[+++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +	 * @return the parameter index (-1 in case of the return type), +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +	 * @return the parameter index (-1 in case of the return type), +++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/AbstractAdaptableMessageListener.java, + * An abstract JMS {@link MessageListener} adapter providing the necessary, + * infrastructure to extract the payload of a JMS {@link Message}., +			throw new MessageConversionException("Could not convert JMS message", ex);, +				throw new ReplyFailureException("Failed to send reply with payload [" + result + "]", ex);, +, +			// No JMS Session available, +		Object content = (result instanceof JmsResponse ? ((JmsResponse<?>) result).getResponse() : result);, +, +		MessageConverter converter = getMessageConverter();, +		if (converter != null) {, +, +, +			throw new IllegalStateException("No message converter - cannot handle [" + payload + "]");, +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +	 * @return the parameter index (-1 in case of the return type), +++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/AbstractAdaptableMessageListener.java, + * An abstract JMS {@link MessageListener} adapter providing the necessary, + * infrastructure to extract the payload of a JMS {@link Message}., +			throw new MessageConversionException("Could not convert JMS message", ex);, +				throw new ReplyFailureException("Failed to send reply with payload [" + result + "]", ex);, +, +			// No JMS Session available, +		Object content = (result instanceof JmsResponse ? ((JmsResponse<?>) result).getResponse() : result);, +, +		MessageConverter converter = getMessageConverter();, +		if (converter != null) {, +, +, +			throw new IllegalStateException("No message converter - cannot handle [" + payload + "]");, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/MessagingMessageListenerAdapter.java, + * Copyright 2002-2015 the original author or authors., +			throw new MessageConversionException("Could not convert JMS message", ex);, +			throw new ListenerExecutionFailedException(, +					createMessagingErrorMessage("Listener method could not be invoked with incoming message"), ex);, +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +	 * @return the parameter index (-1 in case of the return type), +++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/AbstractAdaptableMessageListener.java, + * An abstract JMS {@link MessageListener} adapter providing the necessary, + * infrastructure to extract the payload of a JMS {@link Message}., +			throw new MessageConversionException("Could not convert JMS message", ex);, +				throw new ReplyFailureException("Failed to send reply with payload [" + result + "]", ex);, +, +			// No JMS Session available, +		Object content = (result instanceof JmsResponse ? ((JmsResponse<?>) result).getResponse() : result);, +, +		MessageConverter converter = getMessageConverter();, +		if (converter != null) {, +, +, +			throw new IllegalStateException("No message converter - cannot handle [" + payload + "]");, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/MessagingMessageListenerAdapter.java, + * Copyright 2002-2015 the original author or authors., +			throw new MessageConversionException("Could not convert JMS message", ex);, +			throw new ListenerExecutionFailedException(, +					createMessagingErrorMessage("Listener method could not be invoked with incoming message"), ex);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/JsonViewRequestBodyAdvice.java, + * A {@link RequestBodyAdvice} implementation that adds support for Jackson's, + * {@code @JsonView} annotation declared on a Spring MVC {@code @HttpEntity}, + * or {@code @RequestBody} method parameter., + * <p>The deserialization view specified in the annotation will be passed in to the, + * {@link org.springframework.http.converter.json.MappingJackson2HttpMessageConverter}, + * which will then use it to deserialize the request body with., + * <p>Jackson 2.5 or later is required for parameter-level use of {@code @JsonView}., + * @see com.fasterxml.jackson.annotation.JsonView, +, +, +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +	 * @return the parameter index (-1 in case of the return type), +++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/AbstractAdaptableMessageListener.java, + * An abstract JMS {@link MessageListener} adapter providing the necessary, + * infrastructure to extract the payload of a JMS {@link Message}., +			throw new MessageConversionException("Could not convert JMS message", ex);, +				throw new ReplyFailureException("Failed to send reply with payload [" + result + "]", ex);, +, +			// No JMS Session available, +		Object content = (result instanceof JmsResponse ? ((JmsResponse<?>) result).getResponse() : result);, +, +		MessageConverter converter = getMessageConverter();, +		if (converter != null) {, +, +, +			throw new IllegalStateException("No message converter - cannot handle [" + payload + "]");, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/adapter/MessagingMessageListenerAdapter.java, + * Copyright 2002-2015 the original author or authors., +			throw new MessageConversionException("Could not convert JMS message", ex);, +			throw new ListenerExecutionFailedException(, +					createMessagingErrorMessage("Listener method could not be invoked with incoming message"), ex);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/JsonViewRequestBodyAdvice.java, + * A {@link RequestBodyAdvice} implementation that adds support for Jackson's, + * {@code @JsonView} annotation declared on a Spring MVC {@code @HttpEntity}, + * or {@code @RequestBody} method parameter., + * <p>The deserialization view specified in the annotation will be passed in to the, + * {@link org.springframework.http.converter.json.MappingJackson2HttpMessageConverter}, + * which will then use it to deserialize the request body with., + * <p>Jackson 2.5 or later is required for parameter-level use of {@code @JsonView}.]