[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelParserConfiguration.java, + * Copyright 2002-2013 the original author or authors., + * @author Phillip Webb, +	private int maximumAutoGrowSize;, +, +	/**, +	 * Create a new {@link SpelParserConfiguration} instance., +	 * @param autoGrowNullReferences if null references should automatically grow, +	 * @param autoGrowCollections if collections should automatically grow, +	 * @see #SpelParserConfiguration(boolean, boolean, int), +	 */, +		this(autoGrowNullReferences, autoGrowCollections, Integer.MAX_VALUE);, +	}, +, +	/**, +	 * Create a new {@link SpelParserConfiguration} instance., +	 * @param autoGrowNullReferences if null references should automatically grow, +	 * @param autoGrowCollections if collections should automatically grow, +	 * @param maximumAutoGrowSize the maximum size that the collection can auto grow, +	 */, +	public SpelParserConfiguration(boolean autoGrowNullReferences,, +			boolean autoGrowCollections, int maximumAutoGrowSize) {, +		this.maximumAutoGrowSize = maximumAutoGrowSize;, +	/**, +	 * @return {@code true} if {@code null} references should be automatically grown, +	 */, +	/**, +	 * @return {@code true} if collections should be automatically grown, +	 */, +	/**, +	 * @return the maximum size that a collection can auto grow, +	 */, +	public int getMaximumAutoGrowSize() {, +		return this.maximumAutoGrowSize;, +	}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelParserConfiguration.java, + * Copyright 2002-2013 the original author or authors., + * @author Phillip Webb, +	private int maximumAutoGrowSize;, +, +	/**, +	 * Create a new {@link SpelParserConfiguration} instance., +	 * @param autoGrowNullReferences if null references should automatically grow, +	 * @param autoGrowCollections if collections should automatically grow, +	 * @see #SpelParserConfiguration(boolean, boolean, int), +	 */, +		this(autoGrowNullReferences, autoGrowCollections, Integer.MAX_VALUE);, +	}, +, +	/**, +	 * Create a new {@link SpelParserConfiguration} instance., +	 * @param autoGrowNullReferences if null references should automatically grow, +	 * @param autoGrowCollections if collections should automatically grow, +	 * @param maximumAutoGrowSize the maximum size that the collection can auto grow, +	 */, +	public SpelParserConfiguration(boolean autoGrowNullReferences,, +			boolean autoGrowCollections, int maximumAutoGrowSize) {, +		this.maximumAutoGrowSize = maximumAutoGrowSize;, +	/**, +	 * @return {@code true} if {@code null} references should be automatically grown, +	 */, +	/**, +	 * @return {@code true} if collections should be automatically grown, +	 */, +	/**, +	 * @return the maximum size that a collection can auto grow, +	 */, +	public int getMaximumAutoGrowSize() {, +		return this.maximumAutoGrowSize;, +	}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java, + * Copyright 2002-2013 the original author or authors., + * @author Phillip Webb, +		private int maximumSize;, +, +				TypeConverter typeConverter, boolean growCollection, int maximumSize) {, +			this.maximumSize = maximumSize;, +			growCollectionIfNecessary();, +			growCollectionIfNecessary();, +		private void growCollectionIfNecessary() {, +			if (this.index >= this.collection.size()) {, +, +				if (!this.growCollection) {, +					throw new SpelEvaluationException(getStartPosition(), SpelMessage.COLLECTION_INDEX_OUT_OF_BOUNDS,, +							this.collection.size(), this.index);, +				}, +, +				if(this.index >= this.maximumSize) {, +					throw new SpelEvaluationException(getStartPosition(), SpelMessage.UNABLE_TO_GROW_COLLECTION);, +				}, +, +				if (this.collectionEntryTypeDescriptor.getElementTypeDescriptor() == null) {, +					throw new SpelEvaluationException(getStartPosition(), SpelMessage.UNABLE_TO_GROW_COLLECTION_UNKNOWN_ELEMENT_TYPE);, +				}, +, +				TypeDescriptor elementType = this.collectionEntryTypeDescriptor.getElementTypeDescriptor();, +				try {, +					int newElements = this.index - this.collection.size();]