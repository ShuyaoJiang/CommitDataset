[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/SQLExceptionSubclassTranslator.java, + * Copyright 2002-2014 the original author or authors., + * <p>Falls back to a standard {@link SQLStateSQLExceptionTranslator} if the JDBC, + * driver does not actually expose JDBC 4 compliant {@code SQLException} subclasses., +			else if (ex instanceof SQLTransactionRollbackException) {, +				return new ConcurrencyFailureException(buildMessage(task, sql, ex), ex);, +			}, +			else if (ex instanceof SQLTimeoutException) {, +			if (ex instanceof SQLNonTransientConnectionException) {, +				return new DataAccessResourceFailureException(buildMessage(task, sql, ex), ex);, +			else if (ex instanceof SQLDataException) {, +				return new DataIntegrityViolationException(buildMessage(task, sql, ex), ex);, +			else if (ex instanceof SQLFeatureNotSupportedException) {, +				return new InvalidDataAccessApiUsageException(buildMessage(task, sql, ex), ex);, +			}, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/SQLExceptionSubclassTranslator.java, + * Copyright 2002-2014 the original author or authors., + * <p>Falls back to a standard {@link SQLStateSQLExceptionTranslator} if the JDBC, + * driver does not actually expose JDBC 4 compliant {@code SQLException} subclasses., +			else if (ex instanceof SQLTransactionRollbackException) {, +				return new ConcurrencyFailureException(buildMessage(task, sql, ex), ex);, +			}, +			else if (ex instanceof SQLTimeoutException) {, +			if (ex instanceof SQLNonTransientConnectionException) {, +				return new DataAccessResourceFailureException(buildMessage(task, sql, ex), ex);, +			else if (ex instanceof SQLDataException) {, +				return new DataIntegrityViolationException(buildMessage(task, sql, ex), ex);, +			else if (ex instanceof SQLFeatureNotSupportedException) {, +				return new InvalidDataAccessApiUsageException(buildMessage(task, sql, ex), ex);, +			}, +++ b/spring-jms/src/main/java/org/springframework/jms/config/AbstractJmsListenerEndpoint.java, +	@Override, +	public String getId() {, +		return this.id;, +	 * Return the name of the destination for this endpoint., +	public String getDestination() {, +		return this.destination;, +	 * Return the name for the durable subscription, if any., +	public String getSubscription() {, +		return this.subscription;, +	 * <p>See the JMS specification for a detailed definition of selector expressions., +	/**, +	 * Return the JMS message selector expression, if any., +	 */, +	public String getSelector() {, +		return this.selector;, +	}, +, +, +			throw new IllegalArgumentException("Could not configure endpoint with the specified container '" +, +					container + "' Only JMS (" + AbstractMessageListenerContainer.class.getName() +, +					" subclass) or JCA (" + JmsMessageEndpointManager.class.getName() + ") are supported.");, +		return result.append(getClass().getSimpleName()).append("[").append(this.id).append("] destination=")., +				append(this.destination).append("' | subscription='").append(this.subscription)., +				append(" | selector='").append(this.selector).append("'");]