[+++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/CorsUtils.java, +	 * {@code Forwarded}, {@code X-Forwarded-Proto}, {@code X-Forwarded-Host} and, +	 * @code X-Forwarded-Port} headers., +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/CorsUtils.java, +	 * {@code Forwarded}, {@code X-Forwarded-Proto}, {@code X-Forwarded-Host} and, +	 * @code X-Forwarded-Port} headers., +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, + * @author Sebastien Deleuze, +			Matcher matcher = FORWARDED_PROTO_PATTERN.matcher(forwardedToUse);, +			if (matcher.find()) {, +				scheme(matcher.group(1).trim());, +				port(null);, +			}, +			matcher = FORWARDED_HOST_PATTERN.matcher(forwardedToUse);, +			String protocolHeader = headers.getFirst("X-Forwarded-Proto");, +			if (StringUtils.hasText(protocolHeader)) {, +				scheme(StringUtils.tokenizeToStringArray(protocolHeader, ",")[0]);, +				port(null);, +			}, +, +			port(null);, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/CorsUtils.java, +	 * {@code Forwarded}, {@code X-Forwarded-Proto}, {@code X-Forwarded-Host} and, +	 * @code X-Forwarded-Port} headers., +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, + * @author Sebastien Deleuze, +			Matcher matcher = FORWARDED_PROTO_PATTERN.matcher(forwardedToUse);, +			if (matcher.find()) {, +				scheme(matcher.group(1).trim());, +				port(null);, +			}, +			matcher = FORWARDED_HOST_PATTERN.matcher(forwardedToUse);, +			String protocolHeader = headers.getFirst("X-Forwarded-Proto");, +			if (StringUtils.hasText(protocolHeader)) {, +				scheme(StringUtils.tokenizeToStringArray(protocolHeader, ",")[0]);, +				port(null);, +			}, +, +			port(null);, +++ b/spring-web/src/main/java/org/springframework/web/util/WebUtils.java, +	 * {@code Forwarded}, {@code X-Forwarded-Proto}, {@code X-Forwarded-Host} and, +	 * @code X-Forwarded-Port} headers., +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/CorsUtils.java, +	 * {@code Forwarded}, {@code X-Forwarded-Proto}, {@code X-Forwarded-Host} and, +	 * @code X-Forwarded-Port} headers., +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, + * @author Sebastien Deleuze, +			Matcher matcher = FORWARDED_PROTO_PATTERN.matcher(forwardedToUse);, +			if (matcher.find()) {, +				scheme(matcher.group(1).trim());, +				port(null);, +			}, +			matcher = FORWARDED_HOST_PATTERN.matcher(forwardedToUse);, +			String protocolHeader = headers.getFirst("X-Forwarded-Proto");, +			if (StringUtils.hasText(protocolHeader)) {, +				scheme(StringUtils.tokenizeToStringArray(protocolHeader, ",")[0]);, +				port(null);, +			}, +, +			port(null);, +++ b/spring-web/src/main/java/org/springframework/web/util/WebUtils.java, +	 * {@code Forwarded}, {@code X-Forwarded-Proto}, {@code X-Forwarded-Host} and, +	 * @code X-Forwarded-Port} headers., +++ b/spring-web/src/test/java/org/springframework/web/cors/reactive/CorsUtilsTests.java, +	@Test  // SPR-16262, +	public void isSameOriginWithXForwardedHeaders() {, +		assertTrue(checkSameOriginWithXForwardedHeaders("mydomain1.com", -1, "https", null, -1, "https://mydomain1.com"));, +		assertTrue(checkSameOriginWithXForwardedHeaders("mydomain1.com", 123, "https", null, -1, "https://mydomain1.com"));, +		assertTrue(checkSameOriginWithXForwardedHeaders("mydomain1.com", -1, "https", "mydomain2.com", -1, "https://mydomain2.com"));, +		assertTrue(checkSameOriginWithXForwardedHeaders("mydomain1.com", 123, "https", "mydomain2.com", -1, "https://mydomain2.com"));, +		assertTrue(checkSameOriginWithXForwardedHeaders("mydomain1.com", -1, "https", "mydomain2.com", 456, "https://mydomain2.com:456"));, +		assertTrue(checkSameOriginWithXForwardedHeaders("mydomain1.com", 123, "https", "mydomain2.com", 456, "https://mydomain2.com:456"));, +	}, +, +	@Test  // SPR-16262, +	public void isSameOriginWithForwardedHeader() {, +		assertTrue(checkSameOriginWithForwardedHeader("mydomain1.com", -1, "proto=https", "https://mydomain1.com"));, +		assertTrue(checkSameOriginWithForwardedHeader("mydomain1.com", 123, "proto=https", "https://mydomain1.com"));, +		assertTrue(checkSameOriginWithForwardedHeader("mydomain1.com", -1, "proto=https; host=mydomain2.com", "https://mydomain2.com"));, +		assertTrue(checkSameOriginWithForwardedHeader("mydomain1.com", 123, "proto=https; host=mydomain2.com", "https://mydomain2.com"));, +		assertTrue(checkSameOriginWithForwardedHeader("mydomain1.com", -1, "proto=https; host=mydomain2.com:456", "https://mydomain2.com:456"));, +		assertTrue(checkSameOriginWithForwardedHeader("mydomain1.com", 123, "proto=https; host=mydomain2.com:456", "https://mydomain2.com:456"));, +	}, +, +	private boolean checkSameOriginWithXForwardedHeaders(String serverName, int port, String forwardedProto, String forwardedHost, int forwardedPort, String originHeader) {, +		String url = "http://" + serverName;, +		if (port != -1) {, +			url = url + ":" + port;, +		}, +		MockServerHttpRequest.BaseBuilder<?> builder = get(url), +				.header(HttpHeaders.ORIGIN, originHeader);, +		if (forwardedProto != null) {, +			builder.header("X-Forwarded-Proto", forwardedProto);, +		}, +		if (forwardedHost != null) {, +			builder.header("X-Forwarded-Host", forwardedHost);, +		}, +		if (forwardedPort != -1) {, +			builder.header("X-Forwarded-Port", String.valueOf(forwardedPort));, +		}]