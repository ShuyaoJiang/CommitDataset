[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +import org.springframework.core.annotation.AnnotationAwareOrderComparator;, +			Object value = this.beanFactory.resolveDependency(descriptor, beanName, null, typeConverter);, +			AnnotationAwareOrderComparator.sortIfNecessary(value);, +			return value;, +					AnnotationAwareOrderComparator.sortIfNecessary(value);, +						Object arg = beanFactory.resolveDependency(, +						if (arg == null && !this.required) {, +						AnnotationAwareOrderComparator.sortIfNecessary(arg);, +						arguments[i] = arg;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +import org.springframework.core.annotation.AnnotationAwareOrderComparator;, +			Object value = this.beanFactory.resolveDependency(descriptor, beanName, null, typeConverter);, +			AnnotationAwareOrderComparator.sortIfNecessary(value);, +			return value;, +					AnnotationAwareOrderComparator.sortIfNecessary(value);, +						Object arg = beanFactory.resolveDependency(, +						if (arg == null && !this.required) {, +						AnnotationAwareOrderComparator.sortIfNecessary(arg);, +						arguments[i] = arg;, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java, +, +import org.springframework.core.Ordered;, +import org.springframework.core.annotation.Order;, +import static org.junit.Assert.*;, +, +	public void testOrderedResourceInjection() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(OptionalResourceInjectionBean.class));, +		TestBean tb = new TestBean();, +		bf.registerSingleton("testBean", tb);, +		IndexedTestBean itb = new IndexedTestBean();, +		bf.registerSingleton("indexedTestBean", itb);, +		OrderedNestedTestBean ntb1 = new OrderedNestedTestBean();, +		ntb1.setOrder(2);, +		bf.registerSingleton("nestedTestBean1", ntb1);, +		OrderedNestedTestBean ntb2 = new OrderedNestedTestBean();, +		ntb2.setOrder(1);, +		bf.registerSingleton("nestedTestBean2", ntb2);, +, +		OptionalResourceInjectionBean bean = (OptionalResourceInjectionBean) bf.getBean("annotatedBean");, +		assertSame(tb, bean.getTestBean());, +		assertSame(tb, bean.getTestBean2());, +		assertSame(tb, bean.getTestBean3());, +		assertSame(tb, bean.getTestBean4());, +		assertSame(itb, bean.getIndexedTestBean());, +		assertEquals(2, bean.getNestedTestBeans().length);, +		assertSame(ntb2, bean.getNestedTestBeans()[0]);, +		assertSame(ntb1, bean.getNestedTestBeans()[1]);, +		assertEquals(2, bean.nestedTestBeansField.length);, +		assertSame(ntb2, bean.nestedTestBeansField[0]);, +		assertSame(ntb1, bean.nestedTestBeansField[1]);, +		bf.destroySingletons();, +	}, +, +	@Test, +	public void testAnnotationOrderedResourceInjection() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(OptionalResourceInjectionBean.class));, +		TestBean tb = new TestBean();, +		bf.registerSingleton("testBean", tb);, +		IndexedTestBean itb = new IndexedTestBean();, +		bf.registerSingleton("indexedTestBean", itb);, +		FixedOrder2NestedTestBean ntb1 = new FixedOrder2NestedTestBean();, +		bf.registerSingleton("nestedTestBean1", ntb1);, +		FixedOrder1NestedTestBean ntb2 = new FixedOrder1NestedTestBean();, +		bf.registerSingleton("nestedTestBean2", ntb2);, +, +		OptionalResourceInjectionBean bean = (OptionalResourceInjectionBean) bf.getBean("annotatedBean");, +		assertSame(tb, bean.getTestBean());, +		assertSame(tb, bean.getTestBean2());, +		assertSame(tb, bean.getTestBean3());, +		assertSame(tb, bean.getTestBean4());, +		assertSame(itb, bean.getIndexedTestBean());, +		assertEquals(2, bean.getNestedTestBeans().length);, +		assertSame(ntb2, bean.getNestedTestBeans()[0]);, +		assertSame(ntb1, bean.getNestedTestBeans()[1]);, +		assertEquals(2, bean.nestedTestBeansField.length);, +		assertSame(ntb2, bean.nestedTestBeansField[0]);, +		assertSame(ntb1, bean.nestedTestBeansField[1]);, +		bf.destroySingletons();, +	}, +, +	@Test, +	public void testOrderedCollectionResourceInjection() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		RootBeanDefinition rbd = new RootBeanDefinition(OptionalCollectionResourceInjectionBean.class);, +		rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE);, +		bf.registerBeanDefinition("annotatedBean", rbd);, +		TestBean tb = new TestBean();, +		bf.registerSingleton("testBean", tb);]