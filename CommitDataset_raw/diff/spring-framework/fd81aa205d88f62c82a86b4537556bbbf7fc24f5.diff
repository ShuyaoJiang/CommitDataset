[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/InjectionMetadata.java, + * Copyright 2002-2009 the original author or authors., +import java.util.Collection;, +	private void doRegisterConfigMembers(RootBeanDefinition beanDefinition, Collection<InjectedElement> members) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/InjectionMetadata.java, + * Copyright 2002-2009 the original author or authors., +import java.util.Collection;, +	private void doRegisterConfigMembers(RootBeanDefinition beanDefinition, Collection<InjectedElement> members) {, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2009 the original author or authors., +	public void testExtendedResourceInjectionWithSkippedOverriddenMethods() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.registerResolvableDependency(BeanFactory.class, bf);, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		RootBeanDefinition annotatedBd = new RootBeanDefinition(OverriddenExtendedResourceInjectionBean.class);, +		bf.registerBeanDefinition("annotatedBean", annotatedBd);, +		TestBean tb = new TestBean();, +		bf.registerSingleton("testBean", tb);, +		NestedTestBean ntb = new NestedTestBean();, +		bf.registerSingleton("nestedTestBean", ntb);, +, +		OverriddenExtendedResourceInjectionBean bean = (OverriddenExtendedResourceInjectionBean) bf.getBean("annotatedBean");, +		assertSame(tb, bean.getTestBean());, +		assertNull(bean.getTestBean2());, +		assertSame(tb, bean.getTestBean3());, +		assertSame(tb, bean.getTestBean4());, +		assertSame(ntb, bean.getNestedTestBean());, +		assertNull(bean.getBeanFactory());, +		assertTrue(bean.baseInjected);, +		assertTrue(bean.subInjected);, +		bf.destroySingletons();, +	}, +, +	@Test, +		protected BeanFactory beanFactory;, +, +		public boolean baseInjected = false;, +		private void inject(ITestBean testBean4) {, +			this.baseInjected = true;, +		}, +, +		@Autowired, +	public static class OverriddenExtendedResourceInjectionBean extends ExtendedResourceInjectionBean<NestedTestBean> {, +, +		public boolean subInjected = false;, +, +		@Override, +		public void setTestBean2(TestBean testBean2) {, +			super.setTestBean2(testBean2);, +		}, +, +		@Override, +		protected void initBeanFactory(BeanFactory beanFactory) {, +			this.beanFactory = beanFactory;, +		}, +, +		@Autowired, +		private void inject(ITestBean testBean4) {, +			this.subInjected = true;, +		}, +	}, +, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/InjectionMetadata.java, + * Copyright 2002-2009 the original author or authors., +import java.util.Collection;, +	private void doRegisterConfigMembers(RootBeanDefinition beanDefinition, Collection<InjectedElement> members) {, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2009 the original author or authors., +	public void testExtendedResourceInjectionWithSkippedOverriddenMethods() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.registerResolvableDependency(BeanFactory.class, bf);, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		RootBeanDefinition annotatedBd = new RootBeanDefinition(OverriddenExtendedResourceInjectionBean.class);, +		bf.registerBeanDefinition("annotatedBean", annotatedBd);, +		TestBean tb = new TestBean();, +		bf.registerSingleton("testBean", tb);, +		NestedTestBean ntb = new NestedTestBean();, +		bf.registerSingleton("nestedTestBean", ntb);, +, +		OverriddenExtendedResourceInjectionBean bean = (OverriddenExtendedResourceInjectionBean) bf.getBean("annotatedBean");, +		assertSame(tb, bean.getTestBean());, +		assertNull(bean.getTestBean2());, +		assertSame(tb, bean.getTestBean3());, +		assertSame(tb, bean.getTestBean4());, +		assertSame(ntb, bean.getNestedTestBean());, +		assertNull(bean.getBeanFactory());, +		assertTrue(bean.baseInjected);, +		assertTrue(bean.subInjected);, +		bf.destroySingletons();, +	}, +, +	@Test, +		protected BeanFactory beanFactory;, +, +		public boolean baseInjected = false;]