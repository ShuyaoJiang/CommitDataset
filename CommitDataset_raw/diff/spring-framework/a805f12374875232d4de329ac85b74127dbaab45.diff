[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/standard/StandardWebSocketSession.java, +	private Principal user;, +, +	private String acceptedProtocol;, +		return this.acceptedProtocol;, +	public void initializeNativeSession(Session session) {, +		super.initializeNativeSession(session);, +		if(this.user == null) {, +			this.user = session.getUserPrincipal();, +		}, +		this.acceptedProtocol = session.getNegotiatedSubprotocol();, +	}, +, +	@Override, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/standard/StandardWebSocketSession.java, +	private Principal user;, +, +	private String acceptedProtocol;, +		return this.acceptedProtocol;, +	public void initializeNativeSession(Session session) {, +		super.initializeNativeSession(session);, +		if(this.user == null) {, +			this.user = session.getUserPrincipal();, +		}, +		this.acceptedProtocol = session.getNegotiatedSubprotocol();, +	}, +, +	@Override, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/messaging/StompSubProtocolHandlerTests.java, +import java.io.IOException;, +import javax.websocket.Session;, +import org.springframework.web.socket.adapter.standard.StandardWebSocketSession;, +	// SPR-11621, +, +	@Test, +	public void availableSessionFieldsAfterSessionEnded() throws IOException {, +		Session nativeSession = Mockito.mock(Session.class);, +		when(nativeSession.getId()).thenReturn("1");, +		when(nativeSession.getUserPrincipal()).thenReturn(new org.springframework.web.socket.handler.TestPrincipal("test"));, +		when(nativeSession.getNegotiatedSubprotocol()).thenReturn("v12.sToMp");, +		StandardWebSocketSession standardWebsocketSession = new StandardWebSocketSession(null, null, null, null);, +		standardWebsocketSession.initializeNativeSession(nativeSession);, +		this.protocolHandler.afterSessionStarted(standardWebsocketSession, this.channel);, +		standardWebsocketSession.close(CloseStatus.NORMAL);, +		this.protocolHandler.afterSessionEnded(standardWebsocketSession, CloseStatus.NORMAL, this.channel);, +		assertEquals("v12.sToMp", standardWebsocketSession.getAcceptedProtocol());, +		assertNotNull(standardWebsocketSession.getPrincipal());, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/standard/StandardWebSocketSession.java, +	private Principal user;, +, +	private String acceptedProtocol;, +		return this.acceptedProtocol;, +	public void initializeNativeSession(Session session) {, +		super.initializeNativeSession(session);, +		if(this.user == null) {, +			this.user = session.getUserPrincipal();, +		}, +		this.acceptedProtocol = session.getNegotiatedSubprotocol();, +	}, +, +	@Override, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/messaging/StompSubProtocolHandlerTests.java, +import java.io.IOException;, +import javax.websocket.Session;, +import org.springframework.web.socket.adapter.standard.StandardWebSocketSession;, +	// SPR-11621, +, +	@Test, +	public void availableSessionFieldsAfterSessionEnded() throws IOException {, +		Session nativeSession = Mockito.mock(Session.class);, +		when(nativeSession.getId()).thenReturn("1");, +		when(nativeSession.getUserPrincipal()).thenReturn(new org.springframework.web.socket.handler.TestPrincipal("test"));, +		when(nativeSession.getNegotiatedSubprotocol()).thenReturn("v12.sToMp");, +		StandardWebSocketSession standardWebsocketSession = new StandardWebSocketSession(null, null, null, null);, +		standardWebsocketSession.initializeNativeSession(nativeSession);, +		this.protocolHandler.afterSessionStarted(standardWebsocketSession, this.channel);, +		standardWebsocketSession.close(CloseStatus.NORMAL);, +		this.protocolHandler.afterSessionEnded(standardWebsocketSession, CloseStatus.NORMAL, this.channel);, +		assertEquals("v12.sToMp", standardWebsocketSession.getAcceptedProtocol());, +		assertNotNull(standardWebsocketSession.getPrincipal());, +	}, +, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandlerTests.java, +import org.springframework.web.socket.CloseStatus;, +import org.springframework.web.socket.adapter.standard.StandardWebSocketSession;, +import org.springframework.web.socket.handler.TestPrincipal;, +import javax.websocket.Session;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +	@Mock, +	private Session nativeSession;, +, +	// SPR-11621, +, +	@Test, +	public void availableSessionFieldsafterConnectionClosed() throws Exception {, +		this.webSocketHandler.setDefaultProtocolHandler(stompHandler);]