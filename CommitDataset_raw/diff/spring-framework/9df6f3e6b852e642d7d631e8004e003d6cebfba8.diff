[+++ b/spring-web/src/main/java/org/springframework/http/codec/FormHttpMessageReader.java, +		return ((MULTIVALUE_TYPE.isAssignableFrom(elementType) ||, +				(elementType.hasUnresolvableGenerics() &&, +						MultiValueMap.class.isAssignableFrom(elementType.resolve(Object.class)))) &&, +				(mediaType == null || MediaType.APPLICATION_FORM_URLENCODED.isCompatibleWith(mediaType)));, +++ b/spring-web/src/main/java/org/springframework/http/codec/FormHttpMessageReader.java, +		return ((MULTIVALUE_TYPE.isAssignableFrom(elementType) ||, +				(elementType.hasUnresolvableGenerics() &&, +						MultiValueMap.class.isAssignableFrom(elementType.resolve(Object.class)))) &&, +				(mediaType == null || MediaType.APPLICATION_FORM_URLENCODED.isCompatibleWith(mediaType)));, +++ b/spring-web/src/main/java/org/springframework/http/codec/FormHttpMessageWriter.java, +				(elementType.hasUnresolvableGenerics() &&, +						MultiValueMap.class.isAssignableFrom(elementType.resolve(Object.class)))) &&, +++ b/spring-web/src/main/java/org/springframework/http/codec/FormHttpMessageReader.java, +		return ((MULTIVALUE_TYPE.isAssignableFrom(elementType) ||, +				(elementType.hasUnresolvableGenerics() &&, +						MultiValueMap.class.isAssignableFrom(elementType.resolve(Object.class)))) &&, +				(mediaType == null || MediaType.APPLICATION_FORM_URLENCODED.isCompatibleWith(mediaType)));, +++ b/spring-web/src/main/java/org/springframework/http/codec/FormHttpMessageWriter.java, +				(elementType.hasUnresolvableGenerics() &&, +						MultiValueMap.class.isAssignableFrom(elementType.resolve(Object.class)))) &&, +++ b/spring-web/src/test/java/org/springframework/http/codec/FormHttpMessageReaderTests.java, + * Copyright 2002-2017 the original author or authors., +import static org.junit.Assert.*;, +, +, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/FormHttpMessageReader.java, +		return ((MULTIVALUE_TYPE.isAssignableFrom(elementType) ||, +				(elementType.hasUnresolvableGenerics() &&, +						MultiValueMap.class.isAssignableFrom(elementType.resolve(Object.class)))) &&, +				(mediaType == null || MediaType.APPLICATION_FORM_URLENCODED.isCompatibleWith(mediaType)));, +++ b/spring-web/src/main/java/org/springframework/http/codec/FormHttpMessageWriter.java, +				(elementType.hasUnresolvableGenerics() &&, +						MultiValueMap.class.isAssignableFrom(elementType.resolve(Object.class)))) &&, +++ b/spring-web/src/test/java/org/springframework/http/codec/FormHttpMessageReaderTests.java, + * Copyright 2002-2017 the original author or authors., +import static org.junit.Assert.*;, +, +, +, +++ b/spring-web/src/test/java/org/springframework/http/codec/FormHttpMessageWriterTests.java, + * Copyright 2002-2017 the original author or authors., +import static org.junit.Assert.*;, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/FormHttpMessageReader.java, +		return ((MULTIVALUE_TYPE.isAssignableFrom(elementType) ||, +				(elementType.hasUnresolvableGenerics() &&, +						MultiValueMap.class.isAssignableFrom(elementType.resolve(Object.class)))) &&, +				(mediaType == null || MediaType.APPLICATION_FORM_URLENCODED.isCompatibleWith(mediaType)));, +++ b/spring-web/src/main/java/org/springframework/http/codec/FormHttpMessageWriter.java, +				(elementType.hasUnresolvableGenerics() &&, +						MultiValueMap.class.isAssignableFrom(elementType.resolve(Object.class)))) &&, +++ b/spring-web/src/test/java/org/springframework/http/codec/FormHttpMessageReaderTests.java, + * Copyright 2002-2017 the original author or authors., +import static org.junit.Assert.*;, +, +, +, +++ b/spring-web/src/test/java/org/springframework/http/codec/FormHttpMessageWriterTests.java, + * Copyright 2002-2017 the original author or authors., +import static org.junit.Assert.*;, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletModelAttributeMethodProcessor.java]