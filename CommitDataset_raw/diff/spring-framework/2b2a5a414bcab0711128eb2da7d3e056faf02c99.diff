[+++ b/spring-core/src/main/java/org/springframework/util/unit/DataSize.java, + *, + * <p>This class models a size in terms of bytes and is immutable and thread-safe., +, +	 * @param amount the amount of the size, measured in terms of the unit,, +	 * positive or negative, +	 * @return a corresponding {@link DataSize}, +		return new DataSize(Math.multiplyExact(amount, unit.size().toBytes()));, +			long amount = Long.parseLong(matcher.group(1));, +			throw new IllegalArgumentException("'" + text + "' is not a valid data size", ex);, +	private static DataUnit determineDataUnit(String suffix, @Nullable DataUnit defaultUnit) {, +		DataUnit defaultUnitToUse = (defaultUnit != null ? defaultUnit : DataUnit.BYTES);, +		return (StringUtils.hasLength(suffix) ? DataUnit.fromSuffix(suffix) : defaultUnitToUse);, +, +	public boolean equals(Object other) {, +		if (this == other) {, +		if (other == null || getClass() != other.getClass()) {, +		DataSize otherSize = (DataSize) other;, +		return (this.bytes == otherSize.bytes);, +++ b/spring-core/src/main/java/org/springframework/util/unit/DataSize.java, + *, + * <p>This class models a size in terms of bytes and is immutable and thread-safe., +, +	 * @param amount the amount of the size, measured in terms of the unit,, +	 * positive or negative, +	 * @return a corresponding {@link DataSize}, +		return new DataSize(Math.multiplyExact(amount, unit.size().toBytes()));, +			long amount = Long.parseLong(matcher.group(1));, +			throw new IllegalArgumentException("'" + text + "' is not a valid data size", ex);, +	private static DataUnit determineDataUnit(String suffix, @Nullable DataUnit defaultUnit) {, +		DataUnit defaultUnitToUse = (defaultUnit != null ? defaultUnit : DataUnit.BYTES);, +		return (StringUtils.hasLength(suffix) ? DataUnit.fromSuffix(suffix) : defaultUnitToUse);, +, +	public boolean equals(Object other) {, +		if (this == other) {, +		if (other == null || getClass() != other.getClass()) {, +		DataSize otherSize = (DataSize) other;, +		return (this.bytes == otherSize.bytes);, +++ b/spring-core/src/main/java/org/springframework/util/unit/DataUnit.java, +	 * KiloBytes., +	 * MegaBytes., +	 * GigaBytes., +	 * TeraBytes., +, +, +	DataSize size() {, +	 * @throws IllegalArgumentException if the suffix does not match any, +	 * of this enum's constants, +++ b/spring-core/src/main/java/org/springframework/util/unit/DataSize.java, + *, + * <p>This class models a size in terms of bytes and is immutable and thread-safe., +, +	 * @param amount the amount of the size, measured in terms of the unit,, +	 * positive or negative, +	 * @return a corresponding {@link DataSize}, +		return new DataSize(Math.multiplyExact(amount, unit.size().toBytes()));, +			long amount = Long.parseLong(matcher.group(1));, +			throw new IllegalArgumentException("'" + text + "' is not a valid data size", ex);, +	private static DataUnit determineDataUnit(String suffix, @Nullable DataUnit defaultUnit) {, +		DataUnit defaultUnitToUse = (defaultUnit != null ? defaultUnit : DataUnit.BYTES);, +		return (StringUtils.hasLength(suffix) ? DataUnit.fromSuffix(suffix) : defaultUnitToUse);, +, +	public boolean equals(Object other) {, +		if (this == other) {, +		if (other == null || getClass() != other.getClass()) {, +		DataSize otherSize = (DataSize) other;, +		return (this.bytes == otherSize.bytes);, +++ b/spring-core/src/main/java/org/springframework/util/unit/DataUnit.java, +	 * KiloBytes., +	 * MegaBytes., +	 * GigaBytes., +	 * TeraBytes., +, +, +	DataSize size() {, +	 * @throws IllegalArgumentException if the suffix does not match any, +	 * of this enum's constants, +++ b/spring-tx/src/main/java/org/springframework/transaction/TransactionStatus.java, + * Copyright 2002-2018 the original author or authors., + * <p>Includes the {@link SavepointManager} interface to provide access, +	 * Return whether the present transaction is new; otherwise participating, +	 * in an existing transaction, or potentially not running in an actual, +	 * transaction in the first place., +	 * savepoints, use the operations provided by {@link SavepointManager}., +	 * @see #createSavepoint(), +++ b/spring-core/src/main/java/org/springframework/util/unit/DataSize.java, + *, + * <p>This class models a size in terms of bytes and is immutable and thread-safe., +, +	 * @param amount the amount of the size, measured in terms of the unit,, +	 * positive or negative, +	 * @return a corresponding {@link DataSize}, +		return new DataSize(Math.multiplyExact(amount, unit.size().toBytes()));, +			long amount = Long.parseLong(matcher.group(1));, +			throw new IllegalArgumentException("'" + text + "' is not a valid data size", ex);, +	private static DataUnit determineDataUnit(String suffix, @Nullable DataUnit defaultUnit) {, +		DataUnit defaultUnitToUse = (defaultUnit != null ? defaultUnit : DataUnit.BYTES);, +		return (StringUtils.hasLength(suffix) ? DataUnit.fromSuffix(suffix) : defaultUnitToUse);, +, +	public boolean equals(Object other) {]