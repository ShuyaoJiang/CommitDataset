[+++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, +import java.util.LinkedList;, +					for (Map.Entry<String, List<String>> entry : requestHeaders.entrySet()) {, +						httpHeaders.put(entry.getKey(), new LinkedList<>(entry.getValue()));, +					}, +++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, +import java.util.LinkedList;, +					for (Map.Entry<String, List<String>> entry : requestHeaders.entrySet()) {, +						httpHeaders.put(entry.getKey(), new LinkedList<>(entry.getValue()));, +					}, +++ b/spring-web/src/test/java/org/springframework/web/client/RestTemplateTests.java, +import org.springframework.http.client.ClientHttpRequestInterceptor;, +import static org.hamcrest.MatcherAssert.assertThat;, +import static org.hamcrest.collection.IsIterableContainingInOrder.contains;, +	@Test // SPR-15066, +	public void requestInterceptorCanAddExistingHeaderValue() throws Exception {, +		ClientHttpRequestInterceptor interceptor = (request, body, execution) -> {, +			request.getHeaders().add("MyHeader", "MyInterceptorValue");, +			return execution.execute(request, body);, +		};, +		template.setInterceptors(Collections.singletonList(interceptor));, +, +		given(requestFactory.createRequest(new URI("http://example.com"), HttpMethod.POST)).willReturn(request);, +		HttpHeaders requestHeaders = new HttpHeaders();, +		given(request.getHeaders()).willReturn(requestHeaders);, +		given(request.execute()).willReturn(response);, +		given(errorHandler.hasError(response)).willReturn(false);, +		HttpStatus status = HttpStatus.OK;, +		given(response.getStatusCode()).willReturn(status);, +		given(response.getStatusText()).willReturn(status.getReasonPhrase());, +, +		HttpHeaders entityHeaders = new HttpHeaders();, +		entityHeaders.add("MyHeader", "MyEntityValue");, +		HttpEntity<Void> entity = new HttpEntity<>(null, entityHeaders);, +		template.exchange("http://example.com", HttpMethod.POST, entity, Void.class);, +		assertThat(requestHeaders.get("MyHeader"), contains("MyEntityValue", "MyInterceptorValue"));, +, +		verify(response).close();, +	}, +]