[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AbstractAliasAwareAnnotationAttributeExtractor.java, +import java.util.List;, +	private final Map<String, List<String>> attributeAliasMap;, +		final String attributeName = attributeMethod.getName();, +		List<String> aliasNames = this.attributeAliasMap.get(attributeName);, +		if (aliasNames != null) {, +			final Object defaultValue = AnnotationUtils.getDefaultValue(getAnnotationType(), attributeName);, +			for (String aliasName : aliasNames) {, +					// use the value of the alias instead., +			}, +		}, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AbstractAliasAwareAnnotationAttributeExtractor.java, +import java.util.List;, +	private final Map<String, List<String>> attributeAliasMap;, +		final String attributeName = attributeMethod.getName();, +		List<String> aliasNames = this.attributeAliasMap.get(attributeName);, +		if (aliasNames != null) {, +			final Object defaultValue = AnnotationUtils.getDefaultValue(getAnnotationType(), attributeName);, +			for (String aliasName : aliasNames) {, +					// use the value of the alias instead., +			}, +		}, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AliasFor.java, + * <li><strong>Explicit aliases within an annotation</strong>: within a single, + * <li><strong>Explicit alias for attribute in meta-annotation</strong>: if the, + * <li><strong>Implicit aliases within an annotation</strong>: if one or, + * more attributes within an annotation are declared as explicit, + * meta-annotation attribute overrides for the same attribute in the, + * meta-annotation, those attributes will be treated as a set of <em>implicit</em>, + * aliases for each other, analogous to explicit aliases within an annotation.</li>, + * <li><strong>Explicit aliases within an annotation</strong>:, + * {@code @AliasFor}, and either {@link #attribute} or {@link #value} must, + * reference the <em>other</em> attribute in the pair.</li>, + * <li>{@link #annotation} should not be declared.</li>, + * <li><strong>Explicit alias for attribute in meta-annotation</strong>:, + * must be annotated with {@code @AliasFor}, and {@link #attribute} must, + * reference the attribute in the meta-annotation.</li>, + * <li>{@link #annotation} must reference the meta-annotation.</li>, + * <li>The referenced meta-annotation must be <em>meta-present</em> on the, + * annotation class that declares {@code @AliasFor}.</li>, + * </ol>, + * </li>, + * <li><strong>Implicit aliases within an annotation</strong>:, + * <ol>, + * <li>Each attribute that belongs to the set of implicit aliases must be, + * annotated with {@code @AliasFor}, and {@link #attribute} must reference, + * the same attribute in the same meta-annotation.</li>, + * <li>Aliased attributes must declare the same return type.</li>, + * <li>Aliased attributes must declare a default value.</li>, + * <li>Aliased attributes must declare the same default value.</li>, + * <li>{@link #annotation} must reference the meta-annotation.</li>, + * <h3>Example: Explicit Aliases within an Annotation</h3>, + * <h3>Example: Explicit Alias for Attribute in Meta-annotation</h3>, + * <h3>Example: Implicit Aliases within an Annotation</h3>, + * <pre class="code"> &#064;ContextConfiguration, + * public &#064;interface MyTestConfig {, + *, + *    &#064;AliasFor(annotation = ContextConfiguration.class, attribute = "locations"), + *    String[] value() default {};, + *, + *    &#064;AliasFor(annotation = ContextConfiguration.class, attribute = "locations"), + *    String[] groovyScripts() default {};, + *, + *    &#064;AliasFor(annotation = ContextConfiguration.class, attribute = "locations"), + *    String[] xmlFiles() default {};, + * }</pre>, + *, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AbstractAliasAwareAnnotationAttributeExtractor.java, +import java.util.List;, +	private final Map<String, List<String>> attributeAliasMap;, +		final String attributeName = attributeMethod.getName();, +		List<String> aliasNames = this.attributeAliasMap.get(attributeName);, +		if (aliasNames != null) {, +			final Object defaultValue = AnnotationUtils.getDefaultValue(getAnnotationType(), attributeName);, +			for (String aliasName : aliasNames) {, +					// use the value of the alias instead., +			}, +		}, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AliasFor.java, + * <li><strong>Explicit aliases within an annotation</strong>: within a single, + * <li><strong>Explicit alias for attribute in meta-annotation</strong>: if the, + * <li><strong>Implicit aliases within an annotation</strong>: if one or, + * more attributes within an annotation are declared as explicit, + * meta-annotation attribute overrides for the same attribute in the, + * meta-annotation, those attributes will be treated as a set of <em>implicit</em>, + * aliases for each other, analogous to explicit aliases within an annotation.</li>, + * <li><strong>Explicit aliases within an annotation</strong>:, + * {@code @AliasFor}, and either {@link #attribute} or {@link #value} must, + * reference the <em>other</em> attribute in the pair.</li>, + * <li>{@link #annotation} should not be declared.</li>, + * <li><strong>Explicit alias for attribute in meta-annotation</strong>:, + * must be annotated with {@code @AliasFor}, and {@link #attribute} must, + * reference the attribute in the meta-annotation.</li>, + * <li>{@link #annotation} must reference the meta-annotation.</li>, + * <li>The referenced meta-annotation must be <em>meta-present</em> on the, + * annotation class that declares {@code @AliasFor}.</li>, + * </ol>, + * </li>, + * <li><strong>Implicit aliases within an annotation</strong>:, + * <ol>]