[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +						String matchedPattern = getMatchedPattern(methodLevelPattern, lookupPath);, +						if (matchedPattern != null) {, +								matchedPaths.add(matchedPattern);, +					mappingInfo.matchedPaths = matchedPaths;, +				String bestMatchedPath = bestMappingMatch.bestMatchedPath();, +				if (bestMatchedPath != null) {, +					extractHandlerMethodUriTemplates(bestMatchedPath, lookupPath, request);, +		private String getMatchedPattern(String methodLevelPattern, String lookupPath) {, +				return methodLevelPattern;, +						return combinedPattern;, +			return null;, +		List<String> matchedPaths = Collections.emptyList();, +			return matchedPaths.isEmpty() ? null : matchedPaths.get(0);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +						String matchedPattern = getMatchedPattern(methodLevelPattern, lookupPath);, +						if (matchedPattern != null) {, +								matchedPaths.add(matchedPattern);, +					mappingInfo.matchedPaths = matchedPaths;, +				String bestMatchedPath = bestMappingMatch.bestMatchedPath();, +				if (bestMatchedPath != null) {, +					extractHandlerMethodUriTemplates(bestMatchedPath, lookupPath, request);, +		private String getMatchedPattern(String methodLevelPattern, String lookupPath) {, +				return methodLevelPattern;, +						return combinedPattern;, +			return null;, +		List<String> matchedPaths = Collections.emptyList();, +			return matchedPaths.isEmpty() ? null : matchedPaths.get(0);, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/UriTemplateServletAnnotationControllerTests.java, +	@RequestMapping("/hotels"), +		@RequestMapping("/{hotel}"), +		@RequestMapping("/new"), +		public void handleSpecific(Writer writer) throws IOException {, +			writer.write("specific");, +		}, +, +		@RequestMapping("/*")]