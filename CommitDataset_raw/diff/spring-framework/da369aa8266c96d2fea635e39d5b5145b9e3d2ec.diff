[+++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/CompositeMessageConverter.java, + * Copyright 2002-2014 the original  author or authors., +	@Override, +	public String toString() {, +		return "CompositeMessageConverter[contentTypeResolver=" + this.contentTypeResolver +, +				", converters=" + this.converters + "]";, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/CompositeMessageConverter.java, + * Copyright 2002-2014 the original  author or authors., +	@Override, +	public String toString() {, +		return "CompositeMessageConverter[contentTypeResolver=" + this.contentTypeResolver +, +				", converters=" + this.converters + "]";, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/DefaultContentTypeResolver.java, + * Copyright 2002-2014 the original author or authors., +	@Override, +	public String toString() {, +		return "DefaultContentTypeResolver[" + "defaultMimeType=" + this.defaultMimeType + "]";, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/CompositeMessageConverter.java, + * Copyright 2002-2014 the original  author or authors., +	@Override, +	public String toString() {, +		return "CompositeMessageConverter[contentTypeResolver=" + this.contentTypeResolver +, +				", converters=" + this.converters + "]";, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/DefaultContentTypeResolver.java, + * Copyright 2002-2014 the original author or authors., +	@Override, +	public String toString() {, +		return "DefaultContentTypeResolver[" + "defaultMimeType=" + this.defaultMimeType + "]";, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/AbstractMessageSendingTemplate.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.messaging.converter.MessageConversionException;, +, +		if (message == null) {, +			String payloadType = (payload != null) ? payload.getClass().getName() : null;, +			throw new MessageConversionException("Unable to convert payload type '", +					+ payloadType + "', Content-Type=" + messageHeaders.get(MessageHeaders.CONTENT_TYPE), +					+ ", converter=" + this.converter, null);, +		}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/CompositeMessageConverter.java, + * Copyright 2002-2014 the original  author or authors., +	@Override, +	public String toString() {, +		return "CompositeMessageConverter[contentTypeResolver=" + this.contentTypeResolver +, +				", converters=" + this.converters + "]";, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/DefaultContentTypeResolver.java, + * Copyright 2002-2014 the original author or authors., +	@Override, +	public String toString() {, +		return "DefaultContentTypeResolver[" + "defaultMimeType=" + this.defaultMimeType + "]";, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/AbstractMessageSendingTemplate.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.messaging.converter.MessageConversionException;, +, +		if (message == null) {, +			String payloadType = (payload != null) ? payload.getClass().getName() : null;, +			throw new MessageConversionException("Unable to convert payload type '", +					+ payloadType + "', Content-Type=" + messageHeaders.get(MessageHeaders.CONTENT_TYPE), +					+ ", converter=" + this.converter, null);, +		}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/AbstractMessagingTemplate.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.messaging.converter.MessageConversionException;, +, +		if (requestMessage == null) {, +			String payloadType = (request != null) ? request.getClass().getName() : null;, +			throw new MessageConversionException("Unable to convert payload type '", +					+ payloadType + "', Content-Type=" + messageHeaders.get(MessageHeaders.CONTENT_TYPE), +					+ ", converter=" + getMessageConverter(), null);, +		}, +, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/CompositeMessageConverter.java, + * Copyright 2002-2014 the original  author or authors., +	@Override, +	public String toString() {, +		return "CompositeMessageConverter[contentTypeResolver=" + this.contentTypeResolver +, +				", converters=" + this.converters + "]";, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/DefaultContentTypeResolver.java, + * Copyright 2002-2014 the original author or authors., +	@Override, +	public String toString() {, +		return "DefaultContentTypeResolver[" + "defaultMimeType=" + this.defaultMimeType + "]";, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/AbstractMessageSendingTemplate.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.messaging.converter.MessageConversionException;, +, +		if (message == null) {, +			String payloadType = (payload != null) ? payload.getClass().getName() : null;, +			throw new MessageConversionException("Unable to convert payload type '"]