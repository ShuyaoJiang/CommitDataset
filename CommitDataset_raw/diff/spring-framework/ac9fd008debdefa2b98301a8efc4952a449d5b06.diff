[+++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/SpringEL300Tests.java, +import java.util.ArrayList;, +import java.util.List;, +, +import org.springframework.core.convert.TypeDescriptor;, +import org.springframework.expression.spel.standard.SpelExpression;, +	@Test, +	public void testProjectionTypeDescriptors_1() throws Exception {, +        StandardEvaluationContext ctx = new StandardEvaluationContext(new C());, +        SpelExpressionParser parser = new SpelExpressionParser();, +        String el1 = "ls.![#this.equals('abc')]";, +        SpelExpression exp = parser.parseRaw(el1);, +        List value = (List)exp.getValue(ctx);, +        // value is list containing [true,false], +        Assert.assertEquals(Boolean.class,value.get(0).getClass());, +        TypeDescriptor evaluated = exp.getValueTypeDescriptor(ctx);, +        Assert.assertEquals(Boolean.class,evaluated.getElementType());, +	}, +	, +	@Test, +	public void testProjectionTypeDescriptors_2() throws Exception {, +        StandardEvaluationContext ctx = new StandardEvaluationContext(new C());, +        SpelExpressionParser parser = new SpelExpressionParser();, +        String el1 = "as.![#this.equals('abc')]";, +        SpelExpression exp = parser.parseRaw(el1);, +        Object[] value = (Object[])exp.getValue(ctx);, +        // value is array containing [true,false], +        Assert.assertEquals(Boolean.class,value[0].getClass());, +        TypeDescriptor evaluated = exp.getValueTypeDescriptor(ctx);, +        Assert.assertEquals(Boolean.class,evaluated.getElementType());, +	}, +	, +	@Test, +	public void testProjectionTypeDescriptors_3() throws Exception {, +        StandardEvaluationContext ctx = new StandardEvaluationContext(new C());, +        SpelExpressionParser parser = new SpelExpressionParser();, +        String el1 = "ms.![key.equals('abc')]";, +        SpelExpression exp = parser.parseRaw(el1);, +        List value = (List)exp.getValue(ctx);, +        // value is list containing [true,false], +        Assert.assertEquals(Boolean.class,value.get(0).getClass());, +        TypeDescriptor evaluated = exp.getValueTypeDescriptor(ctx);, +        Assert.assertEquals(Boolean.class,evaluated.getElementType());, +	}, +	, +	static class C {, +		public List<String> ls;, +		public String[] as;, +		public Map<String,String> ms;, +		C() {, +			ls = new ArrayList<String>();, +			ls.add("abc");, +			ls.add("def");, +			as = new String[]{"abc","def"};, +			ms = new HashMap<String,String>();, +			ms.put("abc","xyz");, +			ms.put("def","pqr");, +		}, +	}, +]