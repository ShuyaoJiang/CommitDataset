[+++ /dev/null, +++ /dev/null, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/StreamConverterTests.java, +/*, + * Copyright 2002-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.core.convert.support;, +, +import java.util.Arrays;, +import java.util.List;, +import java.util.stream.Stream;, +, +import org.junit.Before;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.rules.ExpectedException;, +, +import org.springframework.core.convert.ConversionFailedException;, +import org.springframework.core.convert.ConverterNotFoundException;, +import org.springframework.core.convert.TypeDescriptor;, +import org.springframework.core.convert.converter.Converter;, +, +import static org.hamcrest.CoreMatchers.*;, +import static org.hamcrest.core.Is.is;, +import static org.junit.Assert.*;, +, +public class StreamConverterTests {, +, +	@Rule, +	public final ExpectedException thrown = ExpectedException.none();, +, +	private GenericConversionService conversionService;, +, +	private StreamConverter streamConverter;, +, +	@Before, +	public void setup() {, +		this.conversionService = new GenericConversionService();, +		this.streamConverter = new StreamConverter(this.conversionService);, +, +		this.conversionService.addConverter(new CollectionToCollectionConverter(this.conversionService));, +		this.conversionService.addConverter(new ArrayToCollectionConverter(this.conversionService));, +		this.conversionService.addConverter(new CollectionToArrayConverter(this.conversionService));, +		this.conversionService.addConverter(this.streamConverter);, +	}, +, +	@Test, +	public void convertFromStreamToList() throws NoSuchFieldException {, +		this.conversionService.addConverter(Number.class, String.class, new ObjectToStringConverter());, +		Stream<Integer> stream = Arrays.asList(1, 2, 3).stream();, +		TypeDescriptor listOfStrings = new TypeDescriptor(Types.class.getField("listOfStrings")); ;, +		Object result = this.conversionService.convert(stream, listOfStrings);, +		assertNotNull("converted object must not be null", result);, +		assertTrue("Converted object must be a list", result instanceof List);, +		@SuppressWarnings("unchecked"), +		List<String> content = (List<String>) result;, +		assertEquals("1", content.get(0));, +		assertEquals("2", content.get(1));, +		assertEquals("3", content.get(2));, +		assertEquals("Wrong number of elements", 3, content.size());, +	}, +, +	@Test, +	public void convertFromStreamToArray() throws NoSuchFieldException {, +		this.conversionService.addConverterFactory(new NumberToNumberConverterFactory());, +		Stream<Integer> stream = Arrays.asList(1, 2, 3).stream();, +		TypeDescriptor arrayOfLongs = new TypeDescriptor(Types.class.getField("arrayOfLongs")); ;, +		Object result = this.conversionService.convert(stream, arrayOfLongs);, +		assertNotNull("converted object must not be null", result);, +		assertTrue("Converted object must be an array", result.getClass().isArray());, +		Long[] content = (Long[]) result;, +		assertEquals(Long.valueOf(1L), content[0]);, +		assertEquals(Long.valueOf(2L), content[1]);, +		assertEquals(Long.valueOf(3L), content[2]);, +		assertEquals("Wrong number of elements", 3, content.length);, +	}, +, +	@Test, +	public void convertFromStreamToRawList() throws NoSuchFieldException {, +		Stream<Integer> stream = Arrays.asList(1, 2, 3).stream();, +		TypeDescriptor listOfStrings = new TypeDescriptor(Types.class.getField("rawList")); ;, +		Object result = this.conversionService.convert(stream, listOfStrings);, +		assertNotNull("converted object must not be null", result);, +		assertTrue("Converted object must be a list", result instanceof List);, +		@SuppressWarnings("unchecked"), +		List<Object> content = (List<Object>) result;, +		assertEquals(1, content.get(0));]