[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/ListableBeanFactory.java, +	 * Find all beans whose {@code Class} has the supplied {@link Annotation} type,, +	 * without creating any bean instances yet., +	 * @param annotationType the type of annotation to look for, +	 * @return the names of all matching beans, +	 * @since 4.0, +	 */, +	String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType);, +, +	/**, +	 * Find all beans whose {@code Class} has the supplied {@link Annotation} type,, +	 * returning a Map of bean names with corresponding bean instances., +	 * @since 3.0, +	Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException;, +	 * Find an {@link Annotation} of {@code annotationType} on the specified, +	 * @throws NoSuchBeanDefinitionException if there is no bean with the given name, +	 * @since 3.0, +	<A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType), +			throws NoSuchBeanDefinitionException;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/ListableBeanFactory.java, +	 * Find all beans whose {@code Class} has the supplied {@link Annotation} type,, +	 * without creating any bean instances yet., +	 * @param annotationType the type of annotation to look for, +	 * @return the names of all matching beans, +	 * @since 4.0, +	 */, +	String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType);, +, +	/**, +	 * Find all beans whose {@code Class} has the supplied {@link Annotation} type,, +	 * returning a Map of bean names with corresponding bean instances., +	 * @since 3.0, +	Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException;, +	 * Find an {@link Annotation} of {@code annotationType} on the specified, +	 * @throws NoSuchBeanDefinitionException if there is no bean with the given name, +	 * @since 3.0, +	<A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType), +			throws NoSuchBeanDefinitionException;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +	public String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType) {, +		List<String> results = new ArrayList<String>();, +		for (String beanName : getBeanDefinitionNames()) {, +			BeanDefinition beanDefinition = getBeanDefinition(beanName);, +			if (!beanDefinition.isAbstract() && findAnnotationOnBean(beanName, annotationType) != null) {, +				results.add(beanName);, +			}, +		}, +		for (String beanName : getSingletonNames()) {, +			if (!results.contains(beanName) && findAnnotationOnBean(beanName, annotationType) != null) {, +				results.add(beanName);, +			}, +		}, +		return results.toArray(new String[results.size()]);, +	}, +, +	@Override, +	public <A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType), +			throws NoSuchBeanDefinitionException{, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/ListableBeanFactory.java, +	 * Find all beans whose {@code Class} has the supplied {@link Annotation} type,, +	 * without creating any bean instances yet., +	 * @param annotationType the type of annotation to look for, +	 * @return the names of all matching beans, +	 * @since 4.0, +	 */, +	String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType);, +, +	/**, +	 * Find all beans whose {@code Class} has the supplied {@link Annotation} type,, +	 * returning a Map of bean names with corresponding bean instances., +	 * @since 3.0, +	Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException;, +	 * Find an {@link Annotation} of {@code annotationType} on the specified, +	 * @throws NoSuchBeanDefinitionException if there is no bean with the given name, +	 * @since 3.0, +	<A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType), +			throws NoSuchBeanDefinitionException;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +	public String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType) {, +		List<String> results = new ArrayList<String>();, +		for (String beanName : getBeanDefinitionNames()) {, +			BeanDefinition beanDefinition = getBeanDefinition(beanName);, +			if (!beanDefinition.isAbstract() && findAnnotationOnBean(beanName, annotationType) != null) {, +				results.add(beanName);, +			}, +		}, +		for (String beanName : getSingletonNames()) {, +			if (!results.contains(beanName) && findAnnotationOnBean(beanName, annotationType) != null) {, +				results.add(beanName);, +			}, +		}, +		return results.toArray(new String[results.size()]);, +	}, +, +	@Override, +	public <A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType), +			throws NoSuchBeanDefinitionException{, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/StaticListableBeanFactory.java]