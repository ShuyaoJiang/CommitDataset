[+++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyCodec.java, +	 * Decode the input {@link ByteBuf} into one or more {@link Message Messages}., +	 * @param message the message to encode, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyCodec.java, +	 * Decode the input {@link ByteBuf} into one or more {@link Message Messages}., +	 * @param message the message to encode, +++ b/spring-web/src/main/java/org/springframework/web/server/session/CookieWebSessionIdResolver.java, +	 * Add a {@link Consumer} for a {@code ResponseCookieBuilder} that will be invoked, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyCodec.java, +	 * Decode the input {@link ByteBuf} into one or more {@link Message Messages}., +	 * @param message the message to encode, +++ b/spring-web/src/main/java/org/springframework/web/server/session/CookieWebSessionIdResolver.java, +	 * Add a {@link Consumer} for a {@code ResponseCookieBuilder} that will be invoked, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerRequest.java, + *, + * <p>Access to headers and body is offered by {@link Headers} and, +	 * Get the HTTP method., +	 * Get the name of the HTTP method., +	 * Get the request URI., +	 * Get a {@code UriBuilderComponents} from the URI associated with this, +	 * <p><strong>Note:</strong> as of 5.1 this method ignores {@code "Forwarded"}, +	 * and {@code "X-Forwarded-*"} headers that specify the, +	 * Get the request path., +	 * Get the request path as a {@code PathContainer}., +	 * Get the headers of this request., +	 * Get the cookies of this request., +	 * Get the remote address to which this request is connected, if available., +	 * Get the readers used to convert the body of this request., +	 * Get the request attribute value if present., +	 * Get a mutable map of request attributes., +	 * Get the first query parameter with the given name, if present., +	 * Get all query parameters for this request., +	 * Get the path variable with the given name, if present., +	 * Get all path variables for this request., +	 * Get the web session for this request., +	 * <p>Always guaranteed to return an instance either matching the session id, +	 * requested by the client, or with a new session id either because the client, +	 * did not specify one or because the underlying session had expired., +	 * <p>Use of this method does not automatically create a session., +	 * Get the authenticated user for the request, if any., +	 * Get the form data from the body of the request if the Content-Type is, +	 * be read and parsed in full, and the resulting {@code MultiValueMap} is, +	 * Get the parts of a multipart request if the Content-Type is, +	 * be read and parsed in full, and the resulting {@code MultiValueMap} is, +	 * Get the web exchange that this request is based on., +		 * Get the list of acceptable media types, as specified by the {@code Accept}, +		 * header., +		 * <p>Returns an empty list if the acceptable media types are unspecified., +		 * Get the list of acceptable charsets, as specified by the, +		 * {@code Accept-Charset} header., +		 * Get the list of acceptable languages, as specified by the, +		 * {@code Accept-Language} header., +		 * Get the length of the body in bytes, as specified by the, +		 * Get the media type of the body, as specified by the, +		 * {@code Content-Type} header., +		 * Get the value of the required {@code Host} header., +		 * <p>If the header value does not contain a port, the, +		 * {@linkplain InetSocketAddress#getPort() port} in the returned address will, +		 * be {@code 0}., +		 * Get the value of the {@code Range} header., +		 * Get the header value(s), if any, for the header of the given name., +		 * <p>Returns an empty list if no header values are found., +		 * Get the headers as an instance of {@link HttpHeaders}., +		 * Set the URI of the request., +		 * @param uri the new URI, +		 * Manipulate this request's headers with the given consumer., +		 * <p>The headers provided to the consumer are "live", so that the consumer can be used to, +		 * <p>The map provided to the consumer is "live", so that the consumer can be used to, +		 * {@linkplain MultiValueMap#set(Object, Object) overwrite} existing cookies,, +		 * {@linkplain MultiValueMap#remove(Object) remove} cookies, or use any of the other, +		 * Set the body of the request., +		 * <p>Calling this methods will, +		 * @param body the new body, +		 * Set the body of the request to the UTF-8 encoded bytes of the given string., +		 * <p>Calling this methods will, +		 * @param body the new body, +		 * Add an attribute with the given name and value., +		 * <p>The map provided to the consumer is "live", so that the consumer can be used, +		 * to {@linkplain Map#put(Object, Object) overwrite} existing attributes,, +		 * {@linkplain Map#remove(Object) remove} attributes, or use any of the other, +		 * Build the request., +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyCodec.java, +	 * Decode the input {@link ByteBuf} into one or more {@link Message Messages}., +	 * @param message the message to encode, +++ b/spring-web/src/main/java/org/springframework/web/server/session/CookieWebSessionIdResolver.java, +	 * Add a {@link Consumer} for a {@code ResponseCookieBuilder} that will be invoked, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/ServerRequest.java, + *, + * <p>Access to headers and body is offered by {@link Headers} and, +	 * Get the HTTP method., +	 * Get the name of the HTTP method., +	 * Get the request URI., +	 * Get a {@code UriBuilderComponents} from the URI associated with this, +	 * <p><strong>Note:</strong> as of 5.1 this method ignores {@code "Forwarded"}, +	 * and {@code "X-Forwarded-*"} headers that specify the, +	 * Get the request path., +	 * Get the request path as a {@code PathContainer}., +	 * Get the headers of this request., +	 * Get the cookies of this request., +	 * Get the remote address to which this request is connected, if available.]