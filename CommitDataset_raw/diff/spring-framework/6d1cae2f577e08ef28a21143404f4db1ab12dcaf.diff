[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +		if (retVal != null && retVal == target &&, +				!RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) {, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +		if (retVal != null && retVal == target &&, +				!RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) {, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/JdkDynamicAopProxy.java, +			if (retVal != null && retVal == target &&, +					returnType != Object.class && returnType.isInstance(proxy) &&, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +		if (retVal != null && retVal == target &&, +				!RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) {, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/JdkDynamicAopProxy.java, +			if (retVal != null && retVal == target &&, +					returnType != Object.class && returnType.isInstance(proxy) &&, +++ b/spring-orm/src/test/java/org/springframework/orm/jpa/hibernate/HibernateEntityManagerFactoryIntegrationTests.java, +import javax.persistence.EntityManager;, +, +import org.hibernate.jpa.HibernateEntityManager;, +import org.hibernate.jpa.HibernateEntityManagerFactory;, +import org.springframework.aop.framework.ProxyFactory;, +import org.springframework.aop.target.SingletonTargetSource;, +@SuppressWarnings("deprecation"), +		assertTrue(emfi.getNativeEntityManagerFactory() instanceof HibernateEntityManagerFactory);, +		assertTrue(sharedEntityManager instanceof HibernateEntityManager);, +	@Test, +	public void testCanUnwrapAopProxy() {, +		EntityManager em = entityManagerFactory.createEntityManager();, +		EntityManager proxy = ProxyFactory.getProxy(EntityManager.class, new SingletonTargetSource(em));, +		assertTrue(em instanceof HibernateEntityManager);, +		assertFalse(proxy instanceof HibernateEntityManager);, +		assertTrue(proxy.unwrap(HibernateEntityManager.class) instanceof HibernateEntityManager);, +		assertSame(em, proxy.unwrap(HibernateEntityManager.class));, +		assertSame(em.getDelegate(), proxy.getDelegate());, +	}, +]