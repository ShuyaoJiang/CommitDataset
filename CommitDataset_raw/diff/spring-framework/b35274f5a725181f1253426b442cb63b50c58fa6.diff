[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/standard/StandardWebSocketHandlerAdapter.java, +		// The following inner classes need to remain since lambdas would not retain their, +		// declared generic types (which need to be seen by the underlying WebSocket engine), +, +			session.addMessageHandler(new MessageHandler.Partial<String>() {, +				@Override, +				public void onMessage(String message, boolean isLast) {, +					handleTextMessage(session, message, isLast);, +				}, +			});, +			session.addMessageHandler(new MessageHandler.Partial<ByteBuffer>() {, +				@Override, +				public void onMessage(ByteBuffer message, boolean isLast) {, +					handleBinaryMessage(session, message, isLast);, +				}, +			});, +			session.addMessageHandler(new MessageHandler.Whole<String>() {, +				@Override, +				public void onMessage(String message) {, +					handleTextMessage(session, message, true);, +				}, +			});, +			session.addMessageHandler(new MessageHandler.Whole<ByteBuffer>() {, +				@Override, +				public void onMessage(ByteBuffer message) {, +					handleBinaryMessage(session, message, true);, +				}, +			});, +		session.addMessageHandler(new MessageHandler.Whole<javax.websocket.PongMessage>() {, +			@Override, +			public void onMessage(javax.websocket.PongMessage message) {, +				handlePongMessage(session, message.getApplicationData());, +			}, +		});, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/standard/StandardWebSocketHandlerAdapter.java, +		// The following inner classes need to remain since lambdas would not retain their, +		// declared generic types (which need to be seen by the underlying WebSocket engine), +, +			session.addMessageHandler(new MessageHandler.Partial<String>() {, +				@Override, +				public void onMessage(String message, boolean isLast) {, +					handleTextMessage(session, message, isLast);, +				}, +			});, +			session.addMessageHandler(new MessageHandler.Partial<ByteBuffer>() {, +				@Override, +				public void onMessage(ByteBuffer message, boolean isLast) {, +					handleBinaryMessage(session, message, isLast);, +				}, +			});, +			session.addMessageHandler(new MessageHandler.Whole<String>() {, +				@Override, +				public void onMessage(String message) {, +					handleTextMessage(session, message, true);, +				}, +			});, +			session.addMessageHandler(new MessageHandler.Whole<ByteBuffer>() {, +				@Override, +				public void onMessage(ByteBuffer message) {, +					handleBinaryMessage(session, message, true);, +				}, +			});, +		session.addMessageHandler(new MessageHandler.Whole<javax.websocket.PongMessage>() {, +			@Override, +			public void onMessage(javax.websocket.PongMessage message) {, +				handlePongMessage(session, message.getApplicationData());, +			}, +		});, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/WebLogicRequestUpgradeStrategy.java, + * Copyright 2002-2018 the original author or authors., +	private static final Connection.CloseListener noOpCloseListener = (reason -> {});]