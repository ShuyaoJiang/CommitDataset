[+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/map");, +		assertEquals("Content-Type=text/html,Custom-Header=value21", response.getContentAsString());, +, +		request.setRequestURI("/multiValueMap");, +		response = new MockHttpServletResponse();, +, +		servlet.service(request, response);, +		assertEquals("Content-Type=[text/html],Custom-Header=[value21,value22]", response.getContentAsString());, +, +		request.setRequestURI("/httpHeaders");, +		response = new MockHttpServletResponse();, +, +		servlet.service(request, response);, +		@RequestMapping("/map"), +		public void map(@RequestHeader Map<String, String> headers, Writer writer) throws IOException {, +			for (Iterator<Map.Entry<String, String>> it = headers.entrySet().iterator(); it.hasNext();) {, +				Map.Entry<String, String> entry = it.next();, +				writer.write(entry.getKey() + "=" + entry.getValue());, +				if (it.hasNext()) {, +					writer.write(',');, +				}, +, +			}, +		}, +, +		@RequestMapping("/multiValueMap"), +		public void multiValueMap(@RequestHeader MultiValueMap<String, String> headers, Writer writer), +				throws IOException {, +		@RequestMapping("/httpHeaders"), +		public void httpHeaders(@RequestHeader HttpHeaders headers, Writer writer) throws IOException {, +			assertEquals("Invalid Content-Type", new MediaType("text", "html"), headers.getContentType());, +			multiValueMap(headers, writer);, +		}, +, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/map");, +		assertEquals("Content-Type=text/html,Custom-Header=value21", response.getContentAsString());, +, +		request.setRequestURI("/multiValueMap");, +		response = new MockHttpServletResponse();, +, +		servlet.service(request, response);, +		assertEquals("Content-Type=[text/html],Custom-Header=[value21,value22]", response.getContentAsString());, +, +		request.setRequestURI("/httpHeaders");, +		response = new MockHttpServletResponse();, +, +		servlet.service(request, response);, +		@RequestMapping("/map"), +		public void map(@RequestHeader Map<String, String> headers, Writer writer) throws IOException {, +			for (Iterator<Map.Entry<String, String>> it = headers.entrySet().iterator(); it.hasNext();) {, +				Map.Entry<String, String> entry = it.next();, +				writer.write(entry.getKey() + "=" + entry.getValue());, +				if (it.hasNext()) {, +					writer.write(',');, +				}, +, +			}, +		}, +, +		@RequestMapping("/multiValueMap"), +		public void multiValueMap(@RequestHeader MultiValueMap<String, String> headers, Writer writer), +				throws IOException {, +		@RequestMapping("/httpHeaders"), +		public void httpHeaders(@RequestHeader HttpHeaders headers, Writer writer) throws IOException {, +			assertEquals("Invalid Content-Type", new MediaType("text", "html"), headers.getContentType());, +			multiValueMap(headers, writer);, +		}, +, +++ b/org.springframework.web/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodInvoker.java, +import java.util.Iterator;, +					if (Model.class.isAssignableFrom(paramType) || Map.class.isAssignableFrom(paramType)) {, +		if (Map.class.isAssignableFrom(paramType)) {, +			return resolveRequestHeaderMap((Class<? extends Map>) paramType, webRequest);, +	private Map resolveRequestHeaderMap(Class<? extends Map> mapType, NativeWebRequest webRequest) {, +		if (MultiValueMap.class.isAssignableFrom(mapType)) {, +			MultiValueMap<String, String> result;, +			if (HttpHeaders.class.isAssignableFrom(mapType)) {, +				result = new HttpHeaders();, +			}, +			else {, +				result = new LinkedMultiValueMap<String, String>();, +			}, +			for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext();) {, +				String headerName = iterator.next();, +				for (String headerValue : webRequest.getHeaderValues(headerName)) {, +					result.add(headerName, headerValue);, +				}, +			}, +			return result;, +		}, +		else {, +			Map<String, String> result = new LinkedHashMap<String, String>();, +			for (Iterator<String> iterator = webRequest.getHeaderNames(); iterator.hasNext();) {, +				String headerName = iterator.next();, +				String headerValue = webRequest.getHeader(headerName);, +				result.put(headerName, headerValue);, +			}, +			return result;]