[+++ b/build.gradle, +	ext.protobufVersion        = "3.0.0-beta-4", +		optional("com.google.protobuf:protobuf-java:${protobufVersion}"), +		optional("com.google.protobuf:protobuf-java-util:${protobufVersion}"), +++ b/build.gradle, +	ext.protobufVersion        = "3.0.0-beta-4", +		optional("com.google.protobuf:protobuf-java:${protobufVersion}"), +		optional("com.google.protobuf:protobuf-java-util:${protobufVersion}"), +++ b/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverter.java, +import java.io.InputStream;, +import java.io.OutputStream;, +import com.google.protobuf.CodedOutputStream;, +import com.googlecode.protobuf.format.FormatFactory;, +import org.springframework.util.ClassUtils;, + * <p>This converter supports by default {@code "application/x-protobuf"} and {@code "text/plain"}, + * with the official {@code "com.google.protobuf:protobuf-java"} library., + *, + * <p>Other formats can be supported with additional libraries:, + * <ul>, + *     <li>{@code "application/json"} with the official library, + *     {@code "com.google.protobuf:protobuf-java-util"}, + *     <li>{@code "application/json"}, {@code "application/xml"} and {@code "text/html"} (write only), + *     can be supported with the 3rd party library, + *     {@code "com.googlecode.protobuf-java-format:protobuf-java-format"}, + * </ul>, + * Supports up to Protobuf 3.0.0., +	private static final boolean isProtobufJavaUtilPresent =, +			ClassUtils.isPresent("com.google.protobuf.util.JsonFormat", ProtobufHttpMessageConverter.class.getClassLoader());, +	private static final boolean isProtobufJavaFormatPresent =, +			ClassUtils.isPresent("com.googlecode.protobuf.format.JsonFormat", ProtobufHttpMessageConverter.class.getClassLoader());, +	private static final MediaType[] SUPPORTED_MEDIATYPES;, +	private final ProtobufFormatsSupport protobufFormatsSupport;, +	static {, +		if (isProtobufJavaFormatPresent) {, +			SUPPORTED_MEDIATYPES = new MediaType[] {PROTOBUF, MediaType.TEXT_PLAIN, MediaType.APPLICATION_XML,, +					MediaType.APPLICATION_JSON};, +		}, +		else if (isProtobufJavaUtilPresent) {, +			SUPPORTED_MEDIATYPES = new MediaType[] {PROTOBUF, MediaType.TEXT_PLAIN, MediaType.APPLICATION_JSON};, +		}, +		else {, +			SUPPORTED_MEDIATYPES = new MediaType[] {PROTOBUF, MediaType.TEXT_PLAIN};, +		}, +	}, +		super(SUPPORTED_MEDIATYPES);, +		if (isProtobufJavaFormatPresent) {, +			this.protobufFormatsSupport = new ProtobufJavaFormatSupport();, +		}, +		else if (isProtobufJavaUtilPresent) {, +			this.protobufFormatsSupport = new ProtobufJavaUtilSupport();, +		}, +		else {, +			this.protobufFormatsSupport = null;, +		}, +			if (PROTOBUF.isCompatibleWith(contentType)) {, +				builder.mergeFrom(inputMessage.getBody(), this.extensionRegistry);, +			}, +			else if (MediaType.TEXT_PLAIN.isCompatibleWith(contentType)) {, +			else if (isProtobufJavaUtilPresent || isProtobufJavaFormatPresent) {, +				this.protobufFormatsSupport.merge(inputMessage.getBody(), charset, contentType,, +						this.extensionRegistry, builder);, +		return (super.canWrite(mediaType) ||, +				(isProtobufJavaFormatPresent && MediaType.TEXT_HTML.isCompatibleWith(mediaType)));, +		if (PROTOBUF.isCompatibleWith(contentType)) {, +			setProtoHeader(outputMessage, message);, +			CodedOutputStream codedOutputStream = CodedOutputStream.newInstance(outputMessage.getBody());, +			message.writeTo(codedOutputStream);, +			codedOutputStream.flush();, +		}, +		else if (MediaType.TEXT_PLAIN.isCompatibleWith(contentType)) {, +			final OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputMessage.getBody(), charset);, +			outputMessage.getBody().flush();, +		else if (isProtobufJavaUtilPresent || isProtobufJavaFormatPresent) {, +			this.protobufFormatsSupport.print(message, outputMessage.getBody(), contentType, charset);, +			outputMessage.getBody().flush();, +	private interface ProtobufFormatsSupport {, +, +		void merge(InputStream input, Charset cs, MediaType contentType, ExtensionRegistry extensionRegistry,, +				Message.Builder builder) throws IOException;, +, +		void print(Message message, OutputStream output, MediaType contentType, Charset cs) throws IOException;, +	}, +, +	private class ProtobufJavaUtilSupport implements ProtobufFormatsSupport {, +, +		private final com.google.protobuf.util.JsonFormat.Parser parser;, +, +		private final com.google.protobuf.util.JsonFormat.Printer printer;, +, +		public ProtobufJavaUtilSupport() {, +			this.parser = com.google.protobuf.util.JsonFormat.parser();, +			this.printer = com.google.protobuf.util.JsonFormat.printer();, +		}, +, +		@Override, +		public void merge(InputStream input, Charset cs, MediaType contentType,, +				ExtensionRegistry extensionRegistry, Message.Builder builder) throws IOException {, +, +			if (contentType.isCompatibleWith(MediaType.APPLICATION_JSON)) {, +				InputStreamReader reader = new InputStreamReader(input, cs);]