[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +		Set<MethodMetadata> beanMethods = retrieveBeanMethodMetadata(sourceClass);, +			Set<MethodMetadata> beanMethods = retrieveBeanMethodMetadata(ifc);, +	 * Retrieve the metadata for all <code>@Bean</code> methods., +	 */, +	private Set<MethodMetadata> retrieveBeanMethodMetadata(SourceClass sourceClass) {, +		AnnotationMetadata original = sourceClass.getMetadata();, +		Set<MethodMetadata> beanMethods = original.getAnnotatedMethods(Bean.class.getName());, +		if (beanMethods.size() > 1 && original instanceof StandardAnnotationMetadata) {, +			// Try reading the class file via ASM for deterministic declaration order..., +			// Unfortunately, the JVM's standard reflection returns methods in arbitrary, +			// order, even between different runs of the same application on the same JVM., +			try {, +				AnnotationMetadata asm =, +						this.metadataReaderFactory.getMetadataReader(original.getClassName()).getAnnotationMetadata();, +				beanMethods = asm.getAnnotatedMethods(Bean.class.getName());, +			}, +			catch (IOException ex) {, +				logger.debug("Failed to read class file via ASM for determining @Bean method order", ex);, +				// No worries, let's continue with the reflection metadata we started with..., +			}, +		}, +		return beanMethods;, +	}, +, +	/**, +		return asSourceClass(metadata.getClassName());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +		Set<MethodMetadata> beanMethods = retrieveBeanMethodMetadata(sourceClass);, +			Set<MethodMetadata> beanMethods = retrieveBeanMethodMetadata(ifc);, +	 * Retrieve the metadata for all <code>@Bean</code> methods., +	 */, +	private Set<MethodMetadata> retrieveBeanMethodMetadata(SourceClass sourceClass) {, +		AnnotationMetadata original = sourceClass.getMetadata();, +		Set<MethodMetadata> beanMethods = original.getAnnotatedMethods(Bean.class.getName());, +		if (beanMethods.size() > 1 && original instanceof StandardAnnotationMetadata) {, +			// Try reading the class file via ASM for deterministic declaration order..., +			// Unfortunately, the JVM's standard reflection returns methods in arbitrary, +			// order, even between different runs of the same application on the same JVM., +			try {, +				AnnotationMetadata asm =, +						this.metadataReaderFactory.getMetadataReader(original.getClassName()).getAnnotationMetadata();, +				beanMethods = asm.getAnnotatedMethods(Bean.class.getName());, +			}, +			catch (IOException ex) {, +				logger.debug("Failed to read class file via ASM for determining @Bean method order", ex);, +				// No worries, let's continue with the reflection metadata we started with..., +			}, +		}, +		return beanMethods;, +	}, +, +	/**, +		return asSourceClass(metadata.getClassName());, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, +, +		@Bean, +		public FooImpl foo() {, +			return new FooImpl();, +		}]