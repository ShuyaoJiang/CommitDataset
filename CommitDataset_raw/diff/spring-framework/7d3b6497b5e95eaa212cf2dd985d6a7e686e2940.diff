[+++ b/spring-messaging/src/main/java/org/springframework/messaging/core/AbstractDestinationResolvingMessagingTemplate.java, +import java.util.Map;, +, + * Base class for a messaging template that can resolve String-based destinations., + *, + * @author Rossen Stoyanchev, +public abstract class AbstractDestinationResolvingMessagingTemplate<D> extends, +		AbstractMessagingTemplate<D> implements, +		DestinationResolvingMessageSendingOperations<D>,, +	public <T> void convertAndSend(String destinationName, T payload) {, +		Map<String, Object> headers = null;, +		this.convertAndSend(destinationName, payload, headers);, +	public <T> void convertAndSend(String destinationName, T payload, Map<String, Object> headers) {, +		MessagePostProcessor postProcessor = null;, +		this.convertAndSend(destinationName, payload, headers, postProcessor);, +	}, +, +	@Override, +	public <T> void convertAndSend(String destinationName, T payload, MessagePostProcessor postProcessor) {, +		Map<String, Object> headers = null;, +		this.convertAndSend(destinationName, payload, headers, postProcessor);, +	}, +, +	@Override, +	public <T> void convertAndSend(String destinationName, T payload, Map<String, Object> headers,, +			MessagePostProcessor postProcessor) {, +, +		super.convertAndSend(destination, payload, headers, postProcessor);, +	public <T> T receiveAndConvert(String destinationName, Class<T> targetClass) {, +		return super.receiveAndConvert(destination, targetClass);, +	public <T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass) {, +		return super.convertSendAndReceive(destination, request, targetClass);, +	public <T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers,, +			Class<T> targetClass) {, +, +		return super.convertSendAndReceive(destination, request, headers, targetClass);, +	}, +, +	@Override, +	public <T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass,, +			MessagePostProcessor postProcessor) {, +, +		D destination = resolveDestination(destinationName);, +		return super.convertSendAndReceive(destination, request, targetClass, postProcessor);, +	}, +, +	@Override, +	public <T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers,, +			Class<T> targetClass, MessagePostProcessor postProcessor) {, +, +		D destination = resolveDestination(destinationName);, +		return super.convertSendAndReceive(destination, request, headers, targetClass, postProcessor);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/AbstractDestinationResolvingMessagingTemplate.java, +import java.util.Map;, +, + * Base class for a messaging template that can resolve String-based destinations., + *, + * @author Rossen Stoyanchev, +public abstract class AbstractDestinationResolvingMessagingTemplate<D> extends, +		AbstractMessagingTemplate<D> implements, +		DestinationResolvingMessageSendingOperations<D>,, +	public <T> void convertAndSend(String destinationName, T payload) {, +		Map<String, Object> headers = null;, +		this.convertAndSend(destinationName, payload, headers);, +	public <T> void convertAndSend(String destinationName, T payload, Map<String, Object> headers) {, +		MessagePostProcessor postProcessor = null;, +		this.convertAndSend(destinationName, payload, headers, postProcessor);, +	}, +, +	@Override, +	public <T> void convertAndSend(String destinationName, T payload, MessagePostProcessor postProcessor) {, +		Map<String, Object> headers = null;, +		this.convertAndSend(destinationName, payload, headers, postProcessor);, +	}, +, +	@Override, +	public <T> void convertAndSend(String destinationName, T payload, Map<String, Object> headers,, +			MessagePostProcessor postProcessor) {, +, +		super.convertAndSend(destination, payload, headers, postProcessor);, +	public <T> T receiveAndConvert(String destinationName, Class<T> targetClass) {, +		return super.receiveAndConvert(destination, targetClass);, +	public <T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass) {, +		return super.convertSendAndReceive(destination, request, targetClass);, +	public <T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers,, +			Class<T> targetClass) {, +, +		return super.convertSendAndReceive(destination, request, headers, targetClass);, +	}, +, +	@Override, +	public <T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass,, +			MessagePostProcessor postProcessor) {, +, +		D destination = resolveDestination(destinationName);, +		return super.convertSendAndReceive(destination, request, targetClass, postProcessor);, +	}, +, +	@Override, +	public <T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers,]