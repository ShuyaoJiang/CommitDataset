[+++ b/org.springframework.aop/src/main/java/org/springframework/aop/support/AopUtils.java, +		return (clazz != null && isCglibProxyClassName(clazz.getName()));, +	}, +, +	/**, +	 * Check whether the specified class name is a CGLIB-generated class., +	 * @param className the class name to check, +	 */, +	public static boolean isCglibProxyClassName(String className) {, +		return (className != null && className.contains(ClassUtils.CGLIB_CLASS_SEPARATOR));, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/support/AopUtils.java, +		return (clazz != null && isCglibProxyClassName(clazz.getName()));, +	}, +, +	/**, +	 * Check whether the specified class name is a CGLIB-generated class., +	 * @param className the class name to check, +	 */, +	public static boolean isCglibProxyClassName(String className) {, +		return (className != null && className.contains(ClassUtils.CGLIB_CLASS_SEPARATOR));, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/AbstractConfigurationClassProcessor.java, + * @see Configuration, +		configModel.validate(problemReporter);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/support/AopUtils.java, +		return (clazz != null && isCglibProxyClassName(clazz.getName()));, +	}, +, +	/**, +	 * Check whether the specified class name is a CGLIB-generated class., +	 * @param className the class name to check, +	 */, +	public static boolean isCglibProxyClassName(String className) {, +		return (className != null && className.contains(ClassUtils.CGLIB_CLASS_SEPARATOR));, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/AbstractConfigurationClassProcessor.java, + * @see Configuration, +		configModel.validate(problemReporter);, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/BeanMethodInterceptor.java, + * @see ConfigurationEnhancer, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/support/AopUtils.java, +		return (clazz != null && isCglibProxyClassName(clazz.getName()));, +	}, +, +	/**, +	 * Check whether the specified class name is a CGLIB-generated class., +	 * @param className the class name to check, +	 */, +	public static boolean isCglibProxyClassName(String className) {, +		return (className != null && className.contains(ClassUtils.CGLIB_CLASS_SEPARATOR));, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/AbstractConfigurationClassProcessor.java, + * @see Configuration, +		configModel.validate(problemReporter);, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/BeanMethodInterceptor.java, + * @see ConfigurationEnhancer, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/ConfigurationClassPostProcessor.java, +import org.springframework.core.type.ClassMetadata;, +			if (isConfigurationClassBeanDefinition(beanDef)), +	 * @throws IllegalStateException if CGLIB is not present., +			throw new IllegalStateException("CGLIB is required to process @Configuration classes. " +, +	 * @return whether the BeanDefinition's beanClass (or its ancestry) is, +	 * {@link Configuration}-annotated, false if no beanClass is specified., +	private static boolean isConfigurationClassBeanDefinition(BeanDefinition beanDef) {, +		while (className != null && !(className.equals(Object.class.getName()))) {, +				MetadataReader metadataReader =, +					new SimpleMetadataReaderFactory().getMetadataReader(className);, +				ClassMetadata classMetadata = metadataReader.getClassMetadata();, +, +				if (annotationMetadata.hasAnnotation(Configuration.class.getName())), +					return true;, +, +				className = classMetadata.getSuperClassName();, +		return false;, +	}, +, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/support/AopUtils.java, +		return (clazz != null && isCglibProxyClassName(clazz.getName()));, +	}, +, +	/**, +	 * Check whether the specified class name is a CGLIB-generated class., +	 * @param className the class name to check, +	 */, +	public static boolean isCglibProxyClassName(String className) {, +		return (className != null && className.contains(ClassUtils.CGLIB_CLASS_SEPARATOR));, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/AbstractConfigurationClassProcessor.java, + * @see Configuration, +		configModel.validate(problemReporter);, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/BeanMethodInterceptor.java, + * @see ConfigurationEnhancer, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/ConfigurationClassPostProcessor.java, +import org.springframework.core.type.ClassMetadata;, +			if (isConfigurationClassBeanDefinition(beanDef)), +	 * @throws IllegalStateException if CGLIB is not present., +			throw new IllegalStateException("CGLIB is required to process @Configuration classes. " +, +	 * @return whether the BeanDefinition's beanClass (or its ancestry) is, +	 * {@link Configuration}-annotated, false if no beanClass is specified., +	private static boolean isConfigurationClassBeanDefinition(BeanDefinition beanDef) {, +		while (className != null && !(className.equals(Object.class.getName()))) {, +				MetadataReader metadataReader =, +					new SimpleMetadataReaderFactory().getMetadataReader(className);, +				ClassMetadata classMetadata = metadataReader.getClassMetadata();]