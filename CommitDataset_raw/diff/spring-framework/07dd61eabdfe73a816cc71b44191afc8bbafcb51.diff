[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/CallableStatementCreatorFactory.java, + * Copyright 2002-2017 the original author or authors., +								StatementCreatorUtils.setParameterValue(cs, sqlColIndx, declaredParam, inValue);, +						StatementCreatorUtils.setParameterValue(cs, sqlColIndx, declaredParam, inValue);, +			return "CallableStatementCreator: sql=[" + callString + "]; parameters=" + this.inParameters;, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/CallableStatementCreatorFactory.java, + * Copyright 2002-2017 the original author or authors., +								StatementCreatorUtils.setParameterValue(cs, sqlColIndx, declaredParam, inValue);, +						StatementCreatorUtils.setParameterValue(cs, sqlColIndx, declaredParam, inValue);, +			return "CallableStatementCreator: sql=[" + callString + "]; parameters=" + this.inParameters;, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java, +			Connection conToUse = createConnectionProxy(con);, +			stmt = con.createStatement();, +			T result = action.doInStatement(stmt);, +					return rse.extractData(rs);, +			ps = psc.createPreparedStatement(con);, +			T result = action.doInPreparedStatement(ps);, +					return rse.extractData(rs);, +			cs = csc.createCallableStatement(con);, +			T result = action.doInCallableStatement(cs);, +				Object result = (new RowMapperResultSetExtractor(rowMapper)).extractData(rs);, +				(new RowCallbackHandlerResultSetExtractor(rch)).extractData(rs);, +				Object result = param.getResultSetExtractor().extractData(rs);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/CallableStatementCreatorFactory.java, + * Copyright 2002-2017 the original author or authors., +								StatementCreatorUtils.setParameterValue(cs, sqlColIndx, declaredParam, inValue);, +						StatementCreatorUtils.setParameterValue(cs, sqlColIndx, declaredParam, inValue);, +			return "CallableStatementCreator: sql=[" + callString + "]; parameters=" + this.inParameters;, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java, +			Connection conToUse = createConnectionProxy(con);, +			stmt = con.createStatement();, +			T result = action.doInStatement(stmt);, +					return rse.extractData(rs);, +			ps = psc.createPreparedStatement(con);, +			T result = action.doInPreparedStatement(ps);, +					return rse.extractData(rs);, +			cs = csc.createCallableStatement(con);, +			T result = action.doInCallableStatement(cs);, +				Object result = (new RowMapperResultSetExtractor(rowMapper)).extractData(rs);, +				(new RowCallbackHandlerResultSetExtractor(rch)).extractData(rs);, +				Object result = param.getResultSetExtractor().extractData(rs);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/PreparedStatementCreatorFactory.java, + * Copyright 2002-2017 the original author or authors., +								StatementCreatorUtils.setParameterValue(ps, sqlColIndx++, declaredParameter, argValue);, +							StatementCreatorUtils.setParameterValue(ps, sqlColIndx++, declaredParameter, entry);, +					StatementCreatorUtils.setParameterValue(ps, sqlColIndx++, declaredParameter, in);, +			return "PreparedStatementCreator: sql=[" + sql + "]; parameters=" + this.parameters;, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/CallableStatementCreatorFactory.java, + * Copyright 2002-2017 the original author or authors., +								StatementCreatorUtils.setParameterValue(cs, sqlColIndx, declaredParam, inValue);, +						StatementCreatorUtils.setParameterValue(cs, sqlColIndx, declaredParam, inValue);, +			return "CallableStatementCreator: sql=[" + callString + "]; parameters=" + this.inParameters;, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java, +			Connection conToUse = createConnectionProxy(con);, +			stmt = con.createStatement();, +			T result = action.doInStatement(stmt);, +					return rse.extractData(rs);, +			ps = psc.createPreparedStatement(con);, +			T result = action.doInPreparedStatement(ps);, +					return rse.extractData(rs);, +			cs = csc.createCallableStatement(con);, +			T result = action.doInCallableStatement(cs);, +				Object result = (new RowMapperResultSetExtractor(rowMapper)).extractData(rs);, +				(new RowCallbackHandlerResultSetExtractor(rch)).extractData(rs);, +				Object result = param.getResultSetExtractor().extractData(rs);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/PreparedStatementCreatorFactory.java, + * Copyright 2002-2017 the original author or authors., +								StatementCreatorUtils.setParameterValue(ps, sqlColIndx++, declaredParameter, argValue);, +							StatementCreatorUtils.setParameterValue(ps, sqlColIndx++, declaredParameter, entry);, +					StatementCreatorUtils.setParameterValue(ps, sqlColIndx++, declaredParameter, in);, +			return "PreparedStatementCreator: sql=[" + sql + "]; parameters=" + this.parameters;, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProvider.java, +	 * @param catalogName name of catalog to use (or {@code null} if none), +	 * @param schemaName name of schema name to use (or {@code null} if none), +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/CallableStatementCreatorFactory.java, + * Copyright 2002-2017 the original author or authors., +								StatementCreatorUtils.setParameterValue(cs, sqlColIndx, declaredParam, inValue);, +						StatementCreatorUtils.setParameterValue(cs, sqlColIndx, declaredParam, inValue);, +			return "CallableStatementCreator: sql=[" + callString + "]; parameters=" + this.inParameters;, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java, +			Connection conToUse = createConnectionProxy(con);, +			stmt = con.createStatement();, +			T result = action.doInStatement(stmt);, +					return rse.extractData(rs);, +			ps = psc.createPreparedStatement(con);, +			T result = action.doInPreparedStatement(ps);, +					return rse.extractData(rs);, +			cs = csc.createCallableStatement(con);, +			T result = action.doInCallableStatement(cs);, +				Object result = (new RowMapperResultSetExtractor(rowMapper)).extractData(rs);, +				(new RowCallbackHandlerResultSetExtractor(rch)).extractData(rs);, +				Object result = param.getResultSetExtractor().extractData(rs);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/PreparedStatementCreatorFactory.java, + * Copyright 2002-2017 the original author or authors., +								StatementCreatorUtils.setParameterValue(ps, sqlColIndx++, declaredParameter, argValue);, +							StatementCreatorUtils.setParameterValue(ps, sqlColIndx++, declaredParameter, entry);, +					StatementCreatorUtils.setParameterValue(ps, sqlColIndx++, declaredParameter, in);, +			return "PreparedStatementCreator: sql=[" + sql + "]; parameters=" + this.parameters;, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProvider.java, +	 * @param catalogName name of catalog to use (or {@code null} if none)]