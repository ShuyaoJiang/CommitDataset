[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/NoSuchBeanDefinitionException.java, +		return (this.resolvableType != null ? this.resolvableType.resolve() : null);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/NoSuchBeanDefinitionException.java, +		return (this.resolvableType != null ? this.resolvableType.resolve() : null);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +import org.springframework.core.ResolvableType;, +		ResolvableType cachedReturnType = mbd.factoryMethodReturnType;, +		if (cachedReturnType != null) {, +			return cachedReturnType.resolve();, +		factoryClass = ClassUtils.getUserClass(factoryClass);, +		Method uniqueCandidate = null;, +							uniqueCandidate = (commonType == null ? factoryMethod : null);, +							if (commonType == null) {, +								// Ambiguous return types found: return null to indicate "not determinable"., +								return null;, +							}, +					uniqueCandidate = (commonType == null ? factoryMethod : null);, +					if (commonType == null) {, +						// Ambiguous return types found: return null to indicate "not determinable"., +						return null;, +					}, +			mbd.factoryMethodReturnType = (uniqueCandidate != null ?, +					ResolvableType.forMethodReturnType(uniqueCandidate) : ResolvableType.forClass(commonType));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/NoSuchBeanDefinitionException.java, +		return (this.resolvableType != null ? this.resolvableType.resolve() : null);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +import org.springframework.core.ResolvableType;, +		ResolvableType cachedReturnType = mbd.factoryMethodReturnType;, +		if (cachedReturnType != null) {, +			return cachedReturnType.resolve();, +		factoryClass = ClassUtils.getUserClass(factoryClass);, +		Method uniqueCandidate = null;, +							uniqueCandidate = (commonType == null ? factoryMethod : null);, +							if (commonType == null) {, +								// Ambiguous return types found: return null to indicate "not determinable"., +								return null;, +							}, +					uniqueCandidate = (commonType == null ? factoryMethod : null);, +					if (commonType == null) {, +						// Ambiguous return types found: return null to indicate "not determinable"., +						return null;, +					}, +			mbd.factoryMethodReturnType = (uniqueCandidate != null ?, +					ResolvableType.forMethodReturnType(uniqueCandidate) : ResolvableType.forClass(commonType));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +			Class<?> classToMatch = typeToMatch.resolve();, +			if (classToMatch == null) {, +				classToMatch = FactoryBean.class;, +			}, +			ResolvableType resolvableType = mbd.targetType;, +			if (resolvableType == null) {, +				resolvableType = mbd.factoryMethodReturnType;, +			}, +			if (resolvableType != null && resolvableType.resolve() == beanType) {, +				return typeToMatch.isAssignableFrom(resolvableType);, +			}, +		Class<?> targetType = mbd.getTargetType();, +		if (targetType != null) {, +			return targetType;, +		}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/NoSuchBeanDefinitionException.java, +		return (this.resolvableType != null ? this.resolvableType.resolve() : null);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +import org.springframework.core.ResolvableType;, +		ResolvableType cachedReturnType = mbd.factoryMethodReturnType;, +		if (cachedReturnType != null) {, +			return cachedReturnType.resolve();, +		factoryClass = ClassUtils.getUserClass(factoryClass);, +		Method uniqueCandidate = null;, +							uniqueCandidate = (commonType == null ? factoryMethod : null);, +							if (commonType == null) {, +								// Ambiguous return types found: return null to indicate "not determinable"., +								return null;, +							}, +					uniqueCandidate = (commonType == null ? factoryMethod : null);, +					if (commonType == null) {, +						// Ambiguous return types found: return null to indicate "not determinable"., +						return null;, +					}, +			mbd.factoryMethodReturnType = (uniqueCandidate != null ?, +					ResolvableType.forMethodReturnType(uniqueCandidate) : ResolvableType.forClass(commonType));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +			Class<?> classToMatch = typeToMatch.resolve();, +			if (classToMatch == null) {, +				classToMatch = FactoryBean.class;, +			}, +			ResolvableType resolvableType = mbd.targetType;, +			if (resolvableType == null) {, +				resolvableType = mbd.factoryMethodReturnType;, +			}, +			if (resolvableType != null && resolvableType.resolve() == beanType) {, +				return typeToMatch.isAssignableFrom(resolvableType);, +			}, +		Class<?> targetType = mbd.getTargetType();, +		if (targetType != null) {, +			return targetType;, +		}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, + * Copyright 2002-2016 the original author or authors., +	 * <p>For example, given a factory method with the following signature, if]