[+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/tags/form/CheckboxesTagTests.java, + * Copyright 2002-2010 the original author or authors., +import java.text.ParseException;, +import java.util.Locale;, +import org.springframework.format.Formatter;, +import org.springframework.format.support.FormattingConversionService;, +	public void testWithMultiValueWithFormatter() throws Exception {, +		this.tag.setPath("stringArray");, +		this.tag.setItems(new Object[] {"   foo", "   bar", "   baz"});, +		BeanPropertyBindingResult bindingResult = new BeanPropertyBindingResult(this.bean, COMMAND_NAME);, +		FormattingConversionService cs = new FormattingConversionService();, +		cs.addFormatterForFieldType(String.class, new Formatter<String>() {, +			public String print(String object, Locale locale) {, +				return object;, +			}, +			public String parse(String text, Locale locale) throws ParseException {, +				return text.trim();, +			}, +		});, +		bindingResult.initConversion(cs);, +		getPageContext().getRequest().setAttribute(BindingResult.MODEL_KEY_PREFIX + COMMAND_NAME, bindingResult);, +, +		int result = this.tag.doStartTag();, +		assertEquals(Tag.SKIP_BODY, result);, +, +		String output = getOutput();, +, +		// wrap the output so it is valid XML, +		output = "<doc>" + output + "</doc>";, +, +		SAXReader reader = new SAXReader();, +		Document document = reader.read(new StringReader(output));, +		Element spanElement1 = (Element) document.getRootElement().elements().get(0);, +		Element checkboxElement1 = (Element) spanElement1.elements().get(0);, +		assertEquals("input", checkboxElement1.getName());, +		assertEquals("checkbox", checkboxElement1.attribute("type").getValue());, +		assertEquals("stringArray", checkboxElement1.attribute("name").getValue());, +		assertEquals("checked", checkboxElement1.attribute("checked").getValue());, +		assertEquals("   foo", checkboxElement1.attribute("value").getValue());, +		Element spanElement2 = (Element) document.getRootElement().elements().get(1);, +		Element checkboxElement2 = (Element) spanElement2.elements().get(0);, +		assertEquals("input", checkboxElement2.getName());, +		assertEquals("checkbox", checkboxElement2.attribute("type").getValue());, +		assertEquals("stringArray", checkboxElement2.attribute("name").getValue());, +		assertEquals("checked", checkboxElement2.attribute("checked").getValue());, +		assertEquals("   bar", checkboxElement2.attribute("value").getValue());, +		Element spanElement3 = (Element) document.getRootElement().elements().get(2);, +		Element checkboxElement3 = (Element) spanElement3.elements().get(0);, +		assertEquals("input", checkboxElement3.getName());, +		assertEquals("checkbox", checkboxElement3.attribute("type").getValue());, +		assertEquals("stringArray", checkboxElement3.attribute("name").getValue());, +		assertNull("not checked", checkboxElement3.attribute("checked"));, +		assertEquals("   baz", checkboxElement3.attribute("value").getValue());, +	}, +, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/tags/form/CheckboxesTagTests.java, + * Copyright 2002-2010 the original author or authors., +import java.text.ParseException;, +import java.util.Locale;, +import org.springframework.format.Formatter;, +import org.springframework.format.support.FormattingConversionService;, +	public void testWithMultiValueWithFormatter() throws Exception {, +		this.tag.setPath("stringArray");, +		this.tag.setItems(new Object[] {"   foo", "   bar", "   baz"});, +		BeanPropertyBindingResult bindingResult = new BeanPropertyBindingResult(this.bean, COMMAND_NAME);, +		FormattingConversionService cs = new FormattingConversionService();, +		cs.addFormatterForFieldType(String.class, new Formatter<String>() {, +			public String print(String object, Locale locale) {, +				return object;, +			}, +			public String parse(String text, Locale locale) throws ParseException {, +				return text.trim();, +			}, +		});, +		bindingResult.initConversion(cs);, +		getPageContext().getRequest().setAttribute(BindingResult.MODEL_KEY_PREFIX + COMMAND_NAME, bindingResult);, +, +		int result = this.tag.doStartTag();, +		assertEquals(Tag.SKIP_BODY, result);, +, +		String output = getOutput();, +, +		// wrap the output so it is valid XML, +		output = "<doc>" + output + "</doc>";, +, +		SAXReader reader = new SAXReader();, +		Document document = reader.read(new StringReader(output));, +		Element spanElement1 = (Element) document.getRootElement().elements().get(0);, +		Element checkboxElement1 = (Element) spanElement1.elements().get(0);, +		assertEquals("input", checkboxElement1.getName());, +		assertEquals("checkbox", checkboxElement1.attribute("type").getValue());, +		assertEquals("stringArray", checkboxElement1.attribute("name").getValue());, +		assertEquals("checked", checkboxElement1.attribute("checked").getValue());, +		assertEquals("   foo", checkboxElement1.attribute("value").getValue());, +		Element spanElement2 = (Element) document.getRootElement().elements().get(1);, +		Element checkboxElement2 = (Element) spanElement2.elements().get(0);, +		assertEquals("input", checkboxElement2.getName());, +		assertEquals("checkbox", checkboxElement2.attribute("type").getValue());, +		assertEquals("stringArray", checkboxElement2.attribute("name").getValue());, +		assertEquals("checked", checkboxElement2.attribute("checked").getValue());]