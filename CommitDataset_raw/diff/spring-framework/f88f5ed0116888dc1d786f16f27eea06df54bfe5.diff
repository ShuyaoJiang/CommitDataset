[+++ b/spring-context/src/main/java/org/springframework/instrument/classloading/ReflectiveLoadTimeWeaver.java, + * Copyright 2002-2013 the original author or authors., +				this.classLoader.getClass(), GET_THROWAWAY_CLASS_LOADER_METHOD_NAME, new Class[0]);, +		ReflectionUtils.invokeMethod(this.addTransformerMethod, this.classLoader, transformer);, +			return (ClassLoader) ReflectionUtils.invokeMethod(this.getThrowawayClassLoaderMethod, this.classLoader);, +, +++ b/spring-context/src/main/java/org/springframework/instrument/classloading/ReflectiveLoadTimeWeaver.java, + * Copyright 2002-2013 the original author or authors., +				this.classLoader.getClass(), GET_THROWAWAY_CLASS_LOADER_METHOD_NAME, new Class[0]);, +		ReflectionUtils.invokeMethod(this.addTransformerMethod, this.classLoader, transformer);, +			return (ClassLoader) ReflectionUtils.invokeMethod(this.getThrowawayClassLoaderMethod, this.classLoader);, +, +++ b/spring-instrument-tomcat/src/main/java/org/springframework/instrument/classloading/tomcat/TomcatInstrumentableClassLoader.java, + * Copyright 2002-2013 the original author or authors., +, + * definition in the {@code server.xml} file, with the Spring-provided "spring-instrument-tomcat.jar", + * file deployed into Tomcat's "server/lib" (for Tomcat 5.x) or "lib" (for Tomcat 6.x) directory., +, +		// Use reflection to copy all the fields since most of them are private on pre-5.5 Tomcat., +			String className = (name.endsWith(CLASS_SUFFIX) ? name.substring(0, name.length() - CLASS_SUFFIX.length()) : name);, +			entry.binaryContent = this.weavingTransformer.transformIfNecessary(className, entry.binaryContent);, +		sb.append("\r\n").append(super.toString());, +	private static void shallowCopyFieldState(final WebappClassLoader src, final WebappClassLoader dest) {, +		Class<?> targetClass = WebappClassLoader.class;, +			for (Field field : fields) {, +				// Do not copy resourceEntries - it's a cache that holds class entries., +								"Shouldn't be illegal to access field '" + field.getName() + "': " + ex);]