[+++ b/spring-web-reactive/build.gradle, +	springVersion = '4.3.0.BUILD-SNAPSHOT', +++ b/spring-web-reactive/build.gradle, +	springVersion = '4.3.0.BUILD-SNAPSHOT', +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractNamedValueMethodArgumentResolver.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.reactive.result.method.annotation;, +, +import java.util.Map;, +import java.util.concurrent.ConcurrentHashMap;, +, +import reactor.core.publisher.Mono;, +, +import org.springframework.beans.ConversionNotSupportedException;, +import org.springframework.beans.SimpleTypeConverter;, +import org.springframework.beans.TypeMismatchException;, +import org.springframework.beans.factory.config.BeanExpressionContext;, +import org.springframework.beans.factory.config.BeanExpressionResolver;, +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +import org.springframework.core.MethodParameter;, +import org.springframework.core.convert.ConversionService;, +import org.springframework.ui.ModelMap;, +import org.springframework.util.Assert;, +import org.springframework.web.bind.annotation.ValueConstants;, +import org.springframework.web.reactive.result.method.HandlerMethodArgumentResolver;, +import org.springframework.web.server.ServerErrorException;, +import org.springframework.web.server.ServerWebExchange;, +import org.springframework.web.server.ServerWebInputException;, +, +/**, + * Abstract base class for resolving method arguments from a named value., + * Request parameters, request headers, and path variables are examples of named, + * values. Each may have a name, a required flag, and a default value., + * <p>Subclasses define how to do the following:, + * <ul>, + * <li>Obtain named value information for a method parameter, + * <li>Resolve names into argument values, + * <li>Handle missing argument values when argument values are required, + * <li>Optionally handle a resolved value, + * </ul>, + * <p>A default value string can contain ${...} placeholders and Spring Expression, + * Language #{...} expressions. For this to work a, + * {@link ConfigurableBeanFactory} must be supplied to the class constructor., + *, + * @author Rossen Stoyanchev, + */, +public abstract class AbstractNamedValueMethodArgumentResolver implements HandlerMethodArgumentResolver {, +, +	private final ConfigurableBeanFactory configurableBeanFactory;, +, +	private final BeanExpressionContext expressionContext;, +, +	private final Map<MethodParameter, NamedValueInfo> namedValueInfoCache = new ConcurrentHashMap<>(256);, +, +	/** Instead of a WebDataBinder for now */, +	private final SimpleTypeConverter typeConverter;, +, +, +	/**, +	 * @param conversionService for type conversion (to be replaced with WebDataBinder), +	 * @param beanFactory a bean factory to use for resolving ${...} placeholder, +	 * and #{...} SpEL expressions in default values, or {@code null} if default, +	 * values are not expected to contain expressions, +	 */, +	public AbstractNamedValueMethodArgumentResolver(ConversionService conversionService,, +			ConfigurableBeanFactory beanFactory) {, +, +		Assert.notNull(conversionService, "'conversionService' is required.");, +		this.typeConverter = new SimpleTypeConverter();, +		this.typeConverter.setConversionService(conversionService);, +		this.configurableBeanFactory = beanFactory;, +		this.expressionContext = (beanFactory != null ? new BeanExpressionContext(beanFactory, null) : null);, +	}, +, +, +	@Override, +	public Mono<Object> resolveArgument(MethodParameter parameter, ModelMap model, ServerWebExchange exchange) {, +		NamedValueInfo namedValueInfo = getNamedValueInfo(parameter);, +		MethodParameter nestedParameter = parameter.nestedIfOptional();, +, +		Object resolvedName = resolveStringValue(namedValueInfo.name);, +		if (resolvedName == null) {, +			return Mono.error(new IllegalArgumentException(, +					"Specified name must not resolve to null: [" + namedValueInfo.name + "]"));, +		}]