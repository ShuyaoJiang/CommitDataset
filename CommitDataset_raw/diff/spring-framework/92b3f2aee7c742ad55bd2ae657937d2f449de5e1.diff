[+++ b/src/docs/asciidoc/web/webflux-webclient.adoc, +Spring WebFlux includes a reactive, non-blocking `WebClient` for HTTP requests. The client, +has a functional, fluent API with reactive types for declarative composition, see, +<<web-reactive.adoc#webflux-reactive-libraries>>. WebFlux client and server rely on the, +same non-blocking <<web-reactive.adoc#webflux-codecs,codecs>> to encode and decode request, +and response content., +The above methods use the Reactor Netty `HttpClient` with default settings and expect, +`io.projectreactor.netty:reactor-netty` to be on the classpath., +You can also use `WebClient.builder()` with further options:, +* `defaultCookie`: Cookies for every request., +To customize Reactor Netty settings, simple provide a pre-configured `HttpClient`:, +	WebClient webClient = WebClient.builder(), +			.clientConnector(new ReactorClientHttpConnector(httpClient)), +			.build();, +, +[[webflux-client-builder-reactor-resources]], +==== Resources, +, +[[webflux-client-builder-reactor-timeout]], +==== Timeouts, +, +To configure a connection timeout:, +, +====, +[source,java,intent=0], +[subs="verbatim,quotes"], +----, +import io.netty.channel.ChannelOption;, +, +HttpClient httpClient = HttpClient.create(), +		.tcpConfiguration(client ->, +				client.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 10000));, +----, +====, +, +To configure a read and/or write timeout values:, +, +====, +[source,java,intent=0], +[subs="verbatim,quotes"], +----, +import io.netty.handler.timeout.ReadTimeoutHandler;, +import io.netty.handler.timeout.WriteTimeoutHandler;, +, +HttpClient httpClient = HttpClient.create(), +		.tcpConfiguration(client ->, +				client.doOnConnected(conn -> conn, +						.addHandlerLast(new ReadTimeoutHandler(10)), +						.addHandlerLast(new WriteTimeoutHandler(10))));, +----, +====, +, +, +== Using `retrieve()`, +== Using `exchange()`]