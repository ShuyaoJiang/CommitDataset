[+++ b/src/asciidoc/index.adoc, +As from Spring 4.1, the cache abstraction has been significantly improved with the, +support of <<cache-jsr-107,JSR-107 annotations>> and more customization options., +Other cache-related operations are provided by the abstraction such as the ability, +to update the content of the cache or remove one of all entries. These are useful if, +the cache deals with data that can change during the course of the application., +, +Just like other services in the Spring Framework, the caching service is an, +abstraction (not a cache implementation) and requires the use of an actual storage to, +store the cache data - that is, the abstraction frees the developer from having to write, +the caching logic but does not provide the actual stores. This abstraction is, +materialized by the `org.springframework.cache.Cache` and, +`org.springframework.cache.CacheManager` interfaces., +, +There are <<cache-store-configuration,a few implementations>> of that abstraction, +available out of the box: JDK `java.util.concurrent.ConcurrentMap` based caches,, +http://ehcache.org/[EhCache], Gemfire cache,, +https://code.google.com/p/guava-libraries/wiki/CachesExplained[Guava caches] and, +JSR-107 compliant caches. See <<cache-plug>> for more information on plugging in, +other cache stores/providers., +, +For caching declaration, the abstraction provides a set of Java annotations:, +* `@Cacheable` triggers cache population, +* `@CacheEvict` triggers cache eviction, +* `@CachePut` updates the cache without interfering with the method execution, +* `@Caching` regroups multiple cache operations to be applied on a method, +* `@CacheConfig` shares some common cache-related settings at class-level, +Let us take a closer look at each annotation:, +than one cache are being used. In this case, each of the caches will be checked before, +All the other caches that do not contain the value will be updated as well even though, +and implement valid `hashCode()` and `equals()` methods. If that is not the case then the, +`org.springframework.cache.interceptor.KeyGenerator` interface., +<<cache-annotations-cacheable-default-key,default generator>> since methods tend to be, +If the algorithm responsible to generate the key is too specific or if it needs, +to be shared, you may define a custom `keyGenerator` on the operation. To do, +this, specify the name of the `KeyGenerator` bean implementation to use:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Cacheable(value="books", **keyGenerator="myKeyGenerator"**), +	public Book findBook(ISBN isbn, boolean checkWarehouse, boolean includeUsed), +----, +, +, +[NOTE], +====, +The `key` and `keyGenerator` parameters are mutually exclusive and an operation, +specifying both will result in an exception., +====, +, +[[cache-annotations-cacheable-default-cache-resolver]], +===== Default Cache Resolution, +, +Out of the box, the caching abstraction uses a simple `CacheResolver` that, +retrieves the cache(s) defined at the operation level using the configured, +`CacheManager`., +, +To provide a different __default__ cache resolver, one needs to implement the, +`org.springframework.cache.interceptor.CacheResolver` interface., +, +, +[[cache-annotations-cacheable-cache-resolver]], +===== Custom cache resolution, +, +The default cache resolution fits well for applications working with a, +single `CacheManager` and with no complex cache resolution requirements., +, +For applications working with several cache managers, it is possible, +to set the `cacheManager` to use per operation:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Cacheable(value="books", **cacheManager="anotherCacheManager"**), +	public Book findBook(ISBN isbn) {...}, +----, +, +It is also possible to replace the `CacheResolver` entirely in a similar, +fashion as for <<cache-annotations-cacheable-key,key generation>>. The, +resolution is requested for every cache operation, giving a chance to, +the implementation to actually resolve the cache(s) to use based on, +runtime arguments:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Cacheable(**cacheResolver="runtimeCacheResolver"**), +	public Book findBook(ISBN isbn) {...}, +----, +, +[NOTE], +====, +Since Spring 4.1, the `value` attribute of the cache annotations are no longer, +mandatory since this particular information can be provided by the `CacheResolver`, +regardless of the content of the annotation., +, +Similarly to `key` and `keyGenerator`, the `cacheManager` and `cacheResolver`, +parameters are mutually exclusive and an operation specifying both will, +result in an exception as a custom `CacheManager` will be ignored by the]