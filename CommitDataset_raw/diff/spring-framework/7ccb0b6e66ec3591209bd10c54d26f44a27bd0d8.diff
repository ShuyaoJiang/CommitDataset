[+++ b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/object/CustomerMapper.java, +package org.springframework.jdbc.object;, +, +import org.springframework.jdbc.core.RowMapper;, +import org.springframework.jdbc.Customer;, +, +import java.sql.ResultSet;, +import java.sql.SQLException;, +, +public class CustomerMapper implements RowMapper<Customer> {, +, +	private static final String[] COLUMN_NAMES = new String[] {"id", "forename"};, +	, +	public Customer mapRow(ResultSet rs, int rownum) throws SQLException {, +		Customer cust = new Customer();, +		cust.setId(rs.getInt(COLUMN_NAMES[0]));, +		cust.setForename(rs.getString(COLUMN_NAMES[1]));, +		return cust;, +	}, +, +}, +++ b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/object/CustomerMapper.java, +package org.springframework.jdbc.object;, +, +import org.springframework.jdbc.core.RowMapper;, +import org.springframework.jdbc.Customer;, +, +import java.sql.ResultSet;, +import java.sql.SQLException;, +, +public class CustomerMapper implements RowMapper<Customer> {, +, +	private static final String[] COLUMN_NAMES = new String[] {"id", "forename"};, +	, +	public Customer mapRow(ResultSet rs, int rownum) throws SQLException {, +		Customer cust = new Customer();, +		cust.setId(rs.getInt(COLUMN_NAMES[0]));, +		cust.setForename(rs.getString(COLUMN_NAMES[1]));, +		return cust;, +	}, +, +}, +++ b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/object/GenericSqlQueryTests.java, +/*, + * Copyright 2002-2008 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.jdbc.object;, +, +import static org.easymock.EasyMock.createMock;, +import static org.easymock.EasyMock.expect;, +import static org.easymock.EasyMock.expectLastCall;, +, +import java.sql.PreparedStatement;, +import java.sql.ResultSet;, +import java.sql.SQLException;, +import java.sql.Types;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +, +import org.easymock.EasyMock;, +import org.apache.commons.logging.LogFactory;, +, +import org.springframework.jdbc.AbstractJdbcTests;, +import org.springframework.jdbc.Customer;, +import org.springframework.jdbc.datasource.TestDataSourceWrapper;, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.xml.XmlBeanFactory;, +import org.springframework.core.io.ClassPathResource;, +, +/**, + * @author Thomas Risberg, + */, +public class GenericSqlQueryTests extends AbstractJdbcTests {, +, +	private static final String SELECT_ID_FORENAME_NAMED_PARAMETERS_PARSED =, +		"select id, forename from custmr where id = ? and country = ?";, +, +	private final boolean debugEnabled = LogFactory.getLog(JdbcTemplate.class).isDebugEnabled();, +, +	private PreparedStatement mockPreparedStatement;, +	private ResultSet mockResultSet;, +, +	private BeanFactory bf;, +, +	]