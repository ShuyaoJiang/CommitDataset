[+++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +import org.springframework.core.env.Environment;, +	/**, +	 * {@inheritDoc}, +	 * <p>If {@code null}, a new environment will be initialized via, +	 * {@link #createEnvironment()}., +	 */, +		if (this.environment == null) {, +			this.environment = this.createEnvironment();, +		}, +			Environment parentEnvironment = parent.getEnvironment();, +				this.getEnvironment().merge((ConfigurableEnvironment)parentEnvironment);, +		this.getEnvironment().validateRequiredProperties();, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +import org.springframework.core.env.Environment;, +	/**, +	 * {@inheritDoc}, +	 * <p>If {@code null}, a new environment will be initialized via, +	 * {@link #createEnvironment()}., +	 */, +		if (this.environment == null) {, +			this.environment = this.createEnvironment();, +		}, +			Environment parentEnvironment = parent.getEnvironment();, +				this.getEnvironment().merge((ConfigurableEnvironment)parentEnvironment);, +		this.getEnvironment().validateRequiredProperties();, +++ b/spring-web/src/main/java/org/springframework/web/context/support/AbstractRefreshableWebApplicationContext.java, +	 * Create and return a new {@link StandardServletEnvironment}. Subclasses may override, +	 * in order to configure the environment or specialize the environment type returned., +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +import org.springframework.core.env.Environment;, +	/**, +	 * {@inheritDoc}, +	 * <p>If {@code null}, a new environment will be initialized via, +	 * {@link #createEnvironment()}., +	 */, +		if (this.environment == null) {, +			this.environment = this.createEnvironment();, +		}, +			Environment parentEnvironment = parent.getEnvironment();, +				this.getEnvironment().merge((ConfigurableEnvironment)parentEnvironment);, +		this.getEnvironment().validateRequiredProperties();, +++ b/spring-web/src/main/java/org/springframework/web/context/support/AbstractRefreshableWebApplicationContext.java, +	 * Create and return a new {@link StandardServletEnvironment}. Subclasses may override, +	 * in order to configure the environment or specialize the environment type returned., +++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/FrameworkPortlet.java, + * Copyright 2002-2012 the original author or authors., +		pac.setEnvironment(this.getEnvironment());, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +import org.springframework.core.env.Environment;, +	/**, +	 * {@inheritDoc}, +	 * <p>If {@code null}, a new environment will be initialized via, +	 * {@link #createEnvironment()}., +	 */, +		if (this.environment == null) {, +			this.environment = this.createEnvironment();, +		}, +			Environment parentEnvironment = parent.getEnvironment();, +				this.getEnvironment().merge((ConfigurableEnvironment)parentEnvironment);, +		this.getEnvironment().validateRequiredProperties();, +++ b/spring-web/src/main/java/org/springframework/web/context/support/AbstractRefreshableWebApplicationContext.java, +	 * Create and return a new {@link StandardServletEnvironment}. Subclasses may override, +	 * in order to configure the environment or specialize the environment type returned., +++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/FrameworkPortlet.java, + * Copyright 2002-2012 the original author or authors., +		pac.setEnvironment(this.getEnvironment());, +++ b/spring-webmvc-portlet/src/main/java/org/springframework/web/portlet/GenericPortletBean.java, +import org.springframework.core.env.ConfigurableEnvironment;, +import org.springframework.core.env.EnvironmentCapable;, +import org.springframework.util.Assert;, +import org.springframework.web.portlet.context.StandardPortletEnvironment;, +public abstract class GenericPortletBean extends GenericPortlet, +		implements EnvironmentCapable, EnvironmentAware {, +	private ConfigurableEnvironment environment;, +			bw.registerCustomEditor(Resource.class, new ResourceEditor(resourceLoader, this.getEnvironment()));, +	 * @throws IllegalArgumentException if environment is not assignable to, +	 * {@code ConfigurableEnvironment}., +		Assert.isInstanceOf(ConfigurableEnvironment.class, environment);, +		this.environment = (ConfigurableEnvironment)environment;, +	}, +, +	/**, +	 * {@inheritDoc}, +	 * <p>If {@code null}, a new environment will be initialized via, +	 * {@link #createEnvironment()}., +	 */, +	public ConfigurableEnvironment getEnvironment() {, +		if (this.environment == null) {, +			this.environment = this.createEnvironment();, +		}, +		return this.environment;, +	}, +, +	/**, +	 * Create and return a new {@link StandardPortletEnvironment}. Subclasses may override, +	 * in order to configure the environment or specialize the environment type returned., +	 */, +	protected ConfigurableEnvironment createEnvironment() {, +		return new StandardPortletEnvironment();]