[+++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +				msg.append("Cannot convert value of type '").append(ClassUtils.getDescriptiveType(newValue));, +				msg.append("' to required type '").append(ClassUtils.getQualifiedName(requiredType)).append("'");, +							"] returned inappropriate value of type '").append(, +							ClassUtils.getDescriptiveType(convertedValue)).append("'");, +++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +				msg.append("Cannot convert value of type '").append(ClassUtils.getDescriptiveType(newValue));, +				msg.append("' to required type '").append(ClassUtils.getQualifiedName(requiredType)).append("'");, +							"] returned inappropriate value of type '").append(, +							ClassUtils.getDescriptiveType(convertedValue)).append("'");, +++ b/spring-beans/src/main/java/org/springframework/beans/TypeMismatchException.java, + * Copyright 2002-2016 the original author or authors., +				"Failed to convert property value of type '" +, +				ClassUtils.getDescriptiveType(propertyChangeEvent.getNewValue()) + "'" +, +				 " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : "") +, +		super("Failed to convert value of type '" + ClassUtils.getDescriptiveType(value) + "'" +, +				(requiredType != null ? " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : ""),, +++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +				msg.append("Cannot convert value of type '").append(ClassUtils.getDescriptiveType(newValue));, +				msg.append("' to required type '").append(ClassUtils.getQualifiedName(requiredType)).append("'");, +							"] returned inappropriate value of type '").append(, +							ClassUtils.getDescriptiveType(convertedValue)).append("'");, +++ b/spring-beans/src/main/java/org/springframework/beans/TypeMismatchException.java, + * Copyright 2002-2016 the original author or authors., +				"Failed to convert property value of type '" +, +				ClassUtils.getDescriptiveType(propertyChangeEvent.getNewValue()) + "'" +, +				 " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : "") +, +		super("Failed to convert value of type '" + ClassUtils.getDescriptiveType(value) + "'" +, +				(requiredType != null ? " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : ""),, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanNotOfRequiredTypeException.java, +import org.springframework.util.ClassUtils;, +		super("Bean named '" + beanName + "' is expected to be of type '" + ClassUtils.getQualifiedName(requiredType) +, +				"' but was actually of type '" + ClassUtils.getQualifiedName(actualType) + "'");, +++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +				msg.append("Cannot convert value of type '").append(ClassUtils.getDescriptiveType(newValue));, +				msg.append("' to required type '").append(ClassUtils.getQualifiedName(requiredType)).append("'");, +							"] returned inappropriate value of type '").append(, +							ClassUtils.getDescriptiveType(convertedValue)).append("'");, +++ b/spring-beans/src/main/java/org/springframework/beans/TypeMismatchException.java, + * Copyright 2002-2016 the original author or authors., +				"Failed to convert property value of type '" +, +				ClassUtils.getDescriptiveType(propertyChangeEvent.getNewValue()) + "'" +, +				 " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : "") +, +		super("Failed to convert value of type '" + ClassUtils.getDescriptiveType(value) + "'" +, +				(requiredType != null ? " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : ""),, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanNotOfRequiredTypeException.java, +import org.springframework.util.ClassUtils;, +		super("Bean named '" + beanName + "' is expected to be of type '" + ClassUtils.getQualifiedName(requiredType) +, +				"' but was actually of type '" + ClassUtils.getQualifiedName(actualType) + "'");, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/NoSuchBeanDefinitionException.java, +	private ResolvableType resolvableType;, +		super("No bean named '" + name + "' available");, +		super("No bean named '" + name + "' available: " + message);, +		this(ResolvableType.forClass(type));, +		this(ResolvableType.forClass(type), message);, +	 * @param type full type declaration of the missing bean, +	 * @since 4.3.4, +	public NoSuchBeanDefinitionException(ResolvableType type) {, +		super("No qualifying bean of type '" + type + "' available");, +		this.resolvableType = type;, +	 * @param type full type declaration of the missing bean, +	 * @since 4.3.4, +	public NoSuchBeanDefinitionException(ResolvableType type, String message) {, +		super("No qualifying bean of type '" + type + "' available: " + message);, +		this.resolvableType = type;, +	 * Return the required type of the missing bean, if it was a lookup <em>by type</em>, +	 * that failed., +	public Class<?> getBeanType() {, +		return (this.resolvableType != null ? this.resolvableType.getRawClass() : null);, +	 * Return the required {@link ResolvableType} of the missing bean, if it was a lookup, +	 * <em>by type</em> that failed., +	 * @since 4.3.4, +	public ResolvableType getResolvableType() {, +		return this.resolvableType;, +++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +				msg.append("Cannot convert value of type '").append(ClassUtils.getDescriptiveType(newValue));, +				msg.append("' to required type '").append(ClassUtils.getQualifiedName(requiredType)).append("'");, +							"] returned inappropriate value of type '").append(, +							ClassUtils.getDescriptiveType(convertedValue)).append("'");, +++ b/spring-beans/src/main/java/org/springframework/beans/TypeMismatchException.java, + * Copyright 2002-2016 the original author or authors., +				"Failed to convert property value of type '" +, +				ClassUtils.getDescriptiveType(propertyChangeEvent.getNewValue()) + "'" +, +				 " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : "") +, +		super("Failed to convert value of type '" + ClassUtils.getDescriptiveType(value) + "'" +, +				(requiredType != null ? " to required type '" + ClassUtils.getQualifiedName(requiredType) + "'" : ""),, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanNotOfRequiredTypeException.java, +import org.springframework.util.ClassUtils;, +		super("Bean named '" + beanName + "' is expected to be of type '" + ClassUtils.getQualifiedName(requiredType) +, +				"' but was actually of type '" + ClassUtils.getQualifiedName(actualType) + "'");, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/NoSuchBeanDefinitionException.java, +	private ResolvableType resolvableType;, +		super("No bean named '" + name + "' available");, +		super("No bean named '" + name + "' available: " + message);, +		this(ResolvableType.forClass(type));, +		this(ResolvableType.forClass(type), message);, +	 * @param type full type declaration of the missing bean, +	 * @since 4.3.4, +	public NoSuchBeanDefinitionException(ResolvableType type) {, +		super("No qualifying bean of type '" + type + "' available");]