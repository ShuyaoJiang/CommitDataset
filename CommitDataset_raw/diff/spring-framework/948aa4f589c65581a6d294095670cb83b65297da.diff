[+++ b/org.springframework.web/src/main/java/org/springframework/web/filter/DelegatingFilterProxy.java, +import org.springframework.context.ConfigurableApplicationContext;, +import org.springframework.util.Assert;, + * <p>As of Spring 3.1, {@code DelegatingFilterProxy} has been updated to optionally accept, + * constructor parameters when using Servlet 3.0's instance-based filter registration, + * methods, usually in conjunction with Spring 3.1's, + * {@link org.springframework.web.WebApplicationInitializer} SPI. These constructors allow, + * for providing the delegate Filter bean directly, or providing the application context, + * and bean name to fetch, avoiding the need to look up the application context from the, + * ServletContext., + *, + * <p>This class was originally inspired by Spring Security's {@code FilterToBeanProxy}, + * class, written by Ben Alex., + * @author Chris Beams, + * @see #DelegatingFilterProxy(Filter), + * @see #DelegatingFilterProxy(String), + * @see #DelegatingFilterProxy(String, WebApplicationContext), + * @see javax.servlet.ServletContext#addFilter(String, Filter), + * @see org.springframework.web.WebApplicationInitializer, +	private WebApplicationContext webApplicationContext;, +, +	 * Create a new {@code DelegatingFilterProxy}. For traditional (pre-Servlet 3.0) use, +	 * in {@code web.xml}., +	 * @see #setTargetBeanName(String), +	 */, +	public DelegatingFilterProxy() {, +	}, +, +	/**, +	 * Create a new {@code DelegatingFilterProxy} with the given {@link Filter} delegate., +	 * Bypasses entirely the need for interacting with a Spring application context,, +	 * specifying the {@linkplain #setTargetBeanName target bean name}, etc., +	 * <p>For use in Servlet 3.0+ environments where instance-based registration of, +	 * filters is supported., +	 * @param delegate the {@code Filter} instance that this proxy will delegate to and, +	 * manage the lifecycle for (must not be {@code null})., +	 * @see #doFilter(ServletRequest, ServletResponse, FilterChain), +	 * @see #invokeDelegate(Filter, ServletRequest, ServletResponse, FilterChain), +	 * @see #destroy(), +	 * @see #setEnvironment(org.springframework.core.env.Environment), +	 */, +	public DelegatingFilterProxy(Filter delegate) {, +		Assert.notNull(delegate, "delegate Filter object must not be null");, +		this.delegate = delegate;, +	}, +, +	/**, +	 * Create a new {@code DelegatingFilterProxy} that will retrieve the named target, +	 * bean from the Spring {@code WebApplicationContext} found in the {@code ServletContext}, +	 * (either the 'root' application context or the context named by, +	 * {@link #setContextAttribute})., +	 * <p>For use in Servlet 3.0+ environments where instance-based registration of, +	 * filters is supported., +	 * <p>The target bean must implement the standard Servlet Filter., +	 * @param targetBeanName name of the target filter bean to look up in the Spring, +	 * application context (must not be {@code null})., +	 * @see #findWebApplicationContext(), +	 * @see #setEnvironment(org.springframework.core.env.Environment), +	 */, +	public DelegatingFilterProxy(String targetBeanName) {, +		this(targetBeanName, null);, +	}, +, +	/**, +	 * Create a new {@code DelegatingFilterProxy} that will retrieve the named target, +	 * bean from the given Spring {@code WebApplicationContext}., +	 * <p>For use in Servlet 3.0+ environments where instance-based registration of, +	 * filters is supported., +	 * <p>The target bean must implement the standard Servlet Filter interface., +	 * <p>The given {@code WebApplicationContext} may or may not be refreshed when passed, +	 * in. If it has not, and if the context implements {@link ConfigurableApplicationContext},, +	 * a {@link ConfigurableApplicationContext#refresh() refresh()} will be attempted before, +	 * retrieving the named target bean., +	 * <p>This proxy's {@code Environment} will be inherited from the given, +	 * {@code WebApplicationContext}., +	 * @param targetBeanName name of the target filter bean in the Spring application, +	 * context (must not be {@code null})., +	 * @param wac the application context from which the target filter will be retrieved;, +	 * if {@code null}, an application context will be looked up from {@code ServletContext}, +	 * as a fallback., +	 * @see #findWebApplicationContext(), +	 * @see #setEnvironment(org.springframework.core.env.Environment), +	 */, +	public DelegatingFilterProxy(String targetBeanName, WebApplicationContext wac) {, +		Assert.hasText(targetBeanName, "target Filter bean name must not be null or empty");, +		this.setTargetBeanName(targetBeanName);, +		this.webApplicationContext = wac;, +		if (wac != null) {, +			this.setEnvironment(wac.getEnvironment());, +		}, +	}, +, +	/**, +		synchronized (this.delegateMonitor) {, +			if (this.delegate == null) {, +	}, +	 * Return the {@code WebApplicationContext} passed in at construction time, if available., +	 * Otherwise, attempt to retrieve a {@code WebApplicationContext} from the, +	 * {@code ServletContext} attribute with the {@linkplain #setContextAttribute, +	 * configured name} if set. Otherwise look up a {@code WebApplicationContext} under]