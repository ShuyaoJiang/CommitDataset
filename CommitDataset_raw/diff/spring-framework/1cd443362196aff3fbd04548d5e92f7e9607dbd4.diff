[+++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/AbstractTransactionManagementConfiguration.java, + * Copyright 2002-2015 the original author or authors., +	 * Default transaction manager, as configured through a {@link TransactionManagementConfigurer}., +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/AbstractTransactionManagementConfiguration.java, + * Copyright 2002-2015 the original author or authors., +	 * Default transaction manager, as configured through a {@link TransactionManagementConfigurer}., +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/TransactionManagementConfigurer.java, + * Copyright 2002-2015 the original author or authors., + * or need to explicitly specify the default {@link PlatformTransactionManager} bean to be, + * used for annotation-driven transaction management, as opposed to the default approach, + * of a by-type lookup. One reason this might be necessary is if there are two, + * <p>See @{@link EnableTransactionManagement} for general examples and context;, + * see {@link #annotationDrivenTransactionManager()} for detailed instructions., + * implementing this interface is to simply mark one of the offending, + * {@code PlatformTransactionManager} {@code @Bean} methods as, + * @{@link org.springframework.context.annotation.Primary Primary}., + * This is even generally preferred since it doesn't lead to early initialization, + * of the {@code PlatformTransactionManager} bean., +	 * If taking approach #2, be sure that <em>only one</em> of the methods is marked, +	 * with {@code @Bean}!, +	 * container as all {@code PlatformTransactionManager} implementations take advantage, +	 * of Spring lifecycle callbacks such as {@code InitializingBean} and, +	 * {@code BeanFactoryAware}.]