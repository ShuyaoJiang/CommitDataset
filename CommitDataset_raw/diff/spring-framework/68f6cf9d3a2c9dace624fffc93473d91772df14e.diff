[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/MultiServerUserRegistry.java, +	/* Cross-server session lookup (e.g. same user connected to multiple servers) */, +	private final SessionLookup sessionLookup = new SessionLookup();, +, +		// Prefer remote registries due to cross-server SessionLookup, +			SimpUser user = registry.getUserMap().get(userName);, +		return this.localRegistry.getUser(userName);, +		// Prefer remote registries due to cross-server SessionLookup, +		result.addAll(this.localRegistry.getUsers());, +		result.addAll(this.localRegistry.findSubscriptions(matcher));, +			registry.init(expirationPeriod, this.sessionLookup);, +		public void init(long expirationPeriod, SessionLookup sessionLookup) {, +				user.afterDeserialization(sessionLookup);, +		/* User sessions from "this" registry only (i.e. one server) */, +		/* Cross-server session lookup (e.g. user connected to multiple servers) */, +		private SessionLookup sessionLookup;, +, +			if (this.sessionLookup != null) {, +				return !this.sessionLookup.findSessions(getName()).isEmpty();, +			}, +			if (this.sessionLookup != null) {, +				return this.sessionLookup.findSessions(getName()).get(sessionId);, +			}, +			if (this.sessionLookup != null) {, +				Map<String, SimpSession> sessions = this.sessionLookup.findSessions(getName());, +				return new HashSet<SimpSession>(sessions.values());, +			}, +		private void afterDeserialization(SessionLookup sessionLookup) {, +			this.sessionLookup = sessionLookup;, +		private void addSessions(Map<String, SimpSession> map) {, +			for (SimpSession session : this.sessions) {, +				map.put(session.getId(), session);, +			}, +		}, +, +, +, +	/**, +	 * Helper class to find user sessions across all servers., +	 */, +	private class SessionLookup {, +, +		public Map<String, SimpSession> findSessions(String userName) {, +			Map<String, SimpSession> map = new HashMap<String, SimpSession>(1);, +			SimpUser user = localRegistry.getUser(userName);, +			if (user != null) {, +				for (SimpSession session : user.getSessions()) {, +					map.put(session.getId(), session);, +				}, +			}, +			for (UserRegistrySnapshot registry : remoteRegistries.values()) {, +				TransferSimpUser transferUser = registry.getUserMap().get(userName);, +				if (transferUser != null) {, +					transferUser.addSessions(map);, +				}, +			}, +			return map;, +		}, +, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/MultiServerUserRegistry.java, +	/* Cross-server session lookup (e.g. same user connected to multiple servers) */, +	private final SessionLookup sessionLookup = new SessionLookup();, +, +		// Prefer remote registries due to cross-server SessionLookup, +			SimpUser user = registry.getUserMap().get(userName);, +		return this.localRegistry.getUser(userName);, +		// Prefer remote registries due to cross-server SessionLookup, +		result.addAll(this.localRegistry.getUsers());, +		result.addAll(this.localRegistry.findSubscriptions(matcher));, +			registry.init(expirationPeriod, this.sessionLookup);, +		public void init(long expirationPeriod, SessionLookup sessionLookup) {, +				user.afterDeserialization(sessionLookup);, +		/* User sessions from "this" registry only (i.e. one server) */, +		/* Cross-server session lookup (e.g. user connected to multiple servers) */, +		private SessionLookup sessionLookup;, +, +			if (this.sessionLookup != null) {, +				return !this.sessionLookup.findSessions(getName()).isEmpty();, +			}, +			if (this.sessionLookup != null) {, +				return this.sessionLookup.findSessions(getName()).get(sessionId);, +			}, +			if (this.sessionLookup != null) {, +				Map<String, SimpSession> sessions = this.sessionLookup.findSessions(getName());, +				return new HashSet<SimpSession>(sessions.values());, +			}, +		private void afterDeserialization(SessionLookup sessionLookup) {, +			this.sessionLookup = sessionLookup;, +		private void addSessions(Map<String, SimpSession> map) {, +			for (SimpSession session : this.sessions) {, +				map.put(session.getId(), session);, +			}, +		}, +, +, +, +	/**, +	 * Helper class to find user sessions across all servers.]