[+++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, +++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, +++ b/spring-web/src/main/java/org/springframework/http/MediaType.java, +++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, +++ b/spring-web/src/main/java/org/springframework/http/MediaType.java, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +						throw new CodecException("Error while reading the data", ex);, +++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, +++ b/spring-web/src/main/java/org/springframework/http/MediaType.java, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +						throw new CodecException("Error while reading the data", ex);, +++ b/spring-web/src/main/java/org/springframework/http/converter/feed/RssChannelHttpMessageConverter.java, +		super(new MediaType("application", "rss+xml"));, +++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, +++ b/spring-web/src/main/java/org/springframework/http/MediaType.java, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +						throw new CodecException("Error while reading the data", ex);, +++ b/spring-web/src/main/java/org/springframework/http/converter/feed/RssChannelHttpMessageConverter.java, +		super(new MediaType("application", "rss+xml"));, +++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonDecoderTests.java, +import org.springframework.core.codec.CodecException;, +	public void decodePojoWithError() throws Exception {, +		Flux<DataBuffer> source = Flux.just(stringBuffer("{\"foo\":}"));, +		ResolvableType elementType = ResolvableType.forClass(Pojo.class);, +		Flux<Object> flux = new Jackson2JsonDecoder().decode(source, elementType, null,, +				Collections.emptyMap());, +, +		StepVerifier.create(flux).verifyError(CodecException.class);, +	}, +, +	@Test, +++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, +++ b/spring-web/src/main/java/org/springframework/http/MediaType.java, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +						throw new CodecException("Error while reading the data", ex);, +++ b/spring-web/src/main/java/org/springframework/http/converter/feed/RssChannelHttpMessageConverter.java, +		super(new MediaType("application", "rss+xml"));, +++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonDecoderTests.java, +import org.springframework.core.codec.CodecException;, +	public void decodePojoWithError() throws Exception {, +		Flux<DataBuffer> source = Flux.just(stringBuffer("{\"foo\":}"));, +		ResolvableType elementType = ResolvableType.forClass(Pojo.class);, +		Flux<Object> flux = new Jackson2JsonDecoder().decode(source, elementType, null,, +				Collections.emptyMap());, +, +		StepVerifier.create(flux).verifyError(CodecException.class);, +	}, +, +	@Test, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +			props.put("rss", "application/rss+xml");, +++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, +++ b/spring-web/src/main/java/org/springframework/http/MediaType.java, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +						throw new CodecException("Error while reading the data", ex);, +++ b/spring-web/src/main/java/org/springframework/http/converter/feed/RssChannelHttpMessageConverter.java, +		super(new MediaType("application", "rss+xml"));, +++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonDecoderTests.java, +import org.springframework.core.codec.CodecException;, +	public void decodePojoWithError() throws Exception {, +		Flux<DataBuffer> source = Flux.just(stringBuffer("{\"foo\":}"));, +		ResolvableType elementType = ResolvableType.forClass(Pojo.class);, +		Flux<Object> flux = new Jackson2JsonDecoder().decode(source, elementType, null,, +				Collections.emptyMap());, +, +		StepVerifier.create(flux).verifyError(CodecException.class);, +	}, +, +	@Test, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +			props.put("rss", "application/rss+xml");, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +			map.put("rss", MediaType.valueOf("application/rss+xml"));, +++ b/spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java, +++ b/spring-web/src/main/java/org/springframework/http/MediaType.java, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2JsonDecoder.java, +						throw new CodecException("Error while reading the data", ex);, +++ b/spring-web/src/main/java/org/springframework/http/converter/feed/RssChannelHttpMessageConverter.java, +		super(new MediaType("application", "rss+xml"));, +++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonDecoderTests.java, +import org.springframework.core.codec.CodecException;, +	public void decodePojoWithError() throws Exception {, +		Flux<DataBuffer> source = Flux.just(stringBuffer("{\"foo\":}"));, +		ResolvableType elementType = ResolvableType.forClass(Pojo.class);, +		Flux<Object> flux = new Jackson2JsonDecoder().decode(source, elementType, null,, +				Collections.emptyMap());, +, +		StepVerifier.create(flux).verifyError(CodecException.class);, +	}, +, +	@Test, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +			props.put("rss", "application/rss+xml");, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +			map.put("rss", MediaType.valueOf("application/rss+xml"));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/feed/AbstractRssFeedView.java, +		setContentType("application/rss+xml");]