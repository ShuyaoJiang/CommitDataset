[+++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import java.util.Optional;, +import org.springframework.lang.UsesJava8;, +import org.springframework.util.ClassUtils;, +	private static Class<?> javaUtilOptionalClass = null;, +, +	static {, +		try {, +			javaUtilOptionalClass =, +					ClassUtils.forName("java.util.Optional", BeanWrapperImpl.class.getClassLoader());, +		}, +		catch (ClassNotFoundException ex) {, +			// Java 8 not available - Optional references simply not supported then., +		}, +	}, +, +		if (object.getClass().equals(javaUtilOptionalClass)) {, +			this.object = OptionalUnwrapper.unwrap(object);, +		}, +		else {, +		}, +		this.rootObject = (!"".equals(this.nestedPath) ? rootObject : this.object);, +		this.typeConverterDelegate = new TypeConverterDelegate(this, this.object);, +		setIntrospectionClass(this.object.getClass());, +		if (propertyValue == null ||, +				(propertyValue.getClass().equals(javaUtilOptionalClass) && OptionalUnwrapper.isEmpty(propertyValue))) {, +, +	/**, +	 * Inner class to avoid a hard dependency on Java 8., +	 */, +	@UsesJava8, +	private static class OptionalUnwrapper {, +, +		public static Object unwrap(Object optionalObject) {, +			Optional<?> optional = (Optional<?>) optionalObject;, +			Assert.isTrue(optional.isPresent(), "Optional value must be present");, +			return optional.get();, +		}, +, +		public static boolean isEmpty(Object optionalObject) {, +			return !((Optional<?>) optionalObject).isPresent();, +		}, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import java.util.Optional;, +import org.springframework.lang.UsesJava8;, +import org.springframework.util.ClassUtils;, +	private static Class<?> javaUtilOptionalClass = null;, +, +	static {, +		try {, +			javaUtilOptionalClass =, +					ClassUtils.forName("java.util.Optional", BeanWrapperImpl.class.getClassLoader());, +		}, +		catch (ClassNotFoundException ex) {, +			// Java 8 not available - Optional references simply not supported then., +		}, +	}, +, +		if (object.getClass().equals(javaUtilOptionalClass)) {, +			this.object = OptionalUnwrapper.unwrap(object);, +		}, +		else {, +		}, +		this.rootObject = (!"".equals(this.nestedPath) ? rootObject : this.object);, +		this.typeConverterDelegate = new TypeConverterDelegate(this, this.object);, +		setIntrospectionClass(this.object.getClass());, +		if (propertyValue == null ||, +				(propertyValue.getClass().equals(javaUtilOptionalClass) && OptionalUnwrapper.isEmpty(propertyValue))) {, +, +	/**, +	 * Inner class to avoid a hard dependency on Java 8., +	 */, +	@UsesJava8, +	private static class OptionalUnwrapper {, +, +		public static Object unwrap(Object optionalObject) {, +			Optional<?> optional = (Optional<?>) optionalObject;, +			Assert.isTrue(optional.isPresent(), "Optional value must be present");, +			return optional.get();, +		}, +, +		public static boolean isEmpty(Object optionalObject) {, +			return !((Optional<?>) optionalObject).isPresent();, +		}, +	}, +, +++ b/spring-beans/src/test/java/org/springframework/beans/BeanWrapperTests.java, +import java.util.Optional;, +		assertTrue(foo.getObject() == 8);, +	public void testGetterWithOptional() {, +		GetterWithOptional foo = new GetterWithOptional();, +		TestBean tb = new TestBean("x");, +		BeanWrapperImpl bwi = new BeanWrapperImpl(foo);, +, +		bwi.setPropertyValue("object", tb);, +		assertSame(tb, foo.value);, +		assertSame(tb, foo.getObject().get());, +		assertSame(tb, ((Optional<String>) bwi.getPropertyValue("object")).get());]