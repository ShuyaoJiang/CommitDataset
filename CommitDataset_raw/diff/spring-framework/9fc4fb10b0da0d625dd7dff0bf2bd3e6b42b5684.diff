[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/FieldRetrievingFactoryBean.java, +		this.targetField = (targetField != null ? StringUtils.trimAllWhitespace(targetField) : null);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/FieldRetrievingFactoryBean.java, +		this.targetField = (targetField != null ? StringUtils.trimAllWhitespace(targetField) : null);, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +	private final Map<CacheOperationCacheKey, CacheOperationMetadata> metadataCache = new ConcurrentHashMap<>(1024);, +			Assert.state(this.beanFactory != null, "CacheResolver or BeanFactory must be set on cache aspect");, +		if (this.beanFactory == null) {, +			throw new IllegalStateException(, +					"BeanFactory must be set on cache aspect for " + expectedType.getSimpleName() + " retrieval");, +		}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/FieldRetrievingFactoryBean.java, +		this.targetField = (targetField != null ? StringUtils.trimAllWhitespace(targetField) : null);, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +	private final Map<CacheOperationCacheKey, CacheOperationMetadata> metadataCache = new ConcurrentHashMap<>(1024);, +			Assert.state(this.beanFactory != null, "CacheResolver or BeanFactory must be set on cache aspect");, +		if (this.beanFactory == null) {, +			throw new IllegalStateException(, +					"BeanFactory must be set on cache aspect for " + expectedType.getSimpleName() + " retrieval");, +		}, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractResourceBasedMessageSource.java, + * Copyright 2002-2017 the original author or authors., +	@Nullable, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/FieldRetrievingFactoryBean.java, +		this.targetField = (targetField != null ? StringUtils.trimAllWhitespace(targetField) : null);, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +	private final Map<CacheOperationCacheKey, CacheOperationMetadata> metadataCache = new ConcurrentHashMap<>(1024);, +			Assert.state(this.beanFactory != null, "CacheResolver or BeanFactory must be set on cache aspect");, +		if (this.beanFactory == null) {, +			throw new IllegalStateException(, +					"BeanFactory must be set on cache aspect for " + expectedType.getSimpleName() + " retrieval");, +		}, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractResourceBasedMessageSource.java, + * Copyright 2002-2017 the original author or authors., +	@Nullable, +++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/FieldRetrievingFactoryBean.java, +		this.targetField = (targetField != null ? StringUtils.trimAllWhitespace(targetField) : null);, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +	private final Map<CacheOperationCacheKey, CacheOperationMetadata> metadataCache = new ConcurrentHashMap<>(1024);, +			Assert.state(this.beanFactory != null, "CacheResolver or BeanFactory must be set on cache aspect");, +		if (this.beanFactory == null) {, +			throw new IllegalStateException(, +					"BeanFactory must be set on cache aspect for " + expectedType.getSimpleName() + " retrieval");, +		}, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractResourceBasedMessageSource.java, + * Copyright 2002-2017 the original author or authors., +	@Nullable, +++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java, +++ b/spring-core/src/main/java/org/springframework/util/CustomizableThreadCreator.java, +	@Nullable, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/FieldRetrievingFactoryBean.java, +		this.targetField = (targetField != null ? StringUtils.trimAllWhitespace(targetField) : null);, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +	private final Map<CacheOperationCacheKey, CacheOperationMetadata> metadataCache = new ConcurrentHashMap<>(1024);, +			Assert.state(this.beanFactory != null, "CacheResolver or BeanFactory must be set on cache aspect");, +		if (this.beanFactory == null) {, +			throw new IllegalStateException(, +					"BeanFactory must be set on cache aspect for " + expectedType.getSimpleName() + " retrieval");, +		}, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractResourceBasedMessageSource.java, + * Copyright 2002-2017 the original author or authors., +	@Nullable, +++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java, +++ b/spring-core/src/main/java/org/springframework/util/CustomizableThreadCreator.java, +	@Nullable, +++ b/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFutureCallbackRegistry.java, +	public void success(@Nullable T result) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/FieldRetrievingFactoryBean.java, +		this.targetField = (targetField != null ? StringUtils.trimAllWhitespace(targetField) : null);, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +	private final Map<CacheOperationCacheKey, CacheOperationMetadata> metadataCache = new ConcurrentHashMap<>(1024);, +			Assert.state(this.beanFactory != null, "CacheResolver or BeanFactory must be set on cache aspect");, +		if (this.beanFactory == null) {, +			throw new IllegalStateException(, +					"BeanFactory must be set on cache aspect for " + expectedType.getSimpleName() + " retrieval");, +		}, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractResourceBasedMessageSource.java, + * Copyright 2002-2017 the original author or authors., +	@Nullable, +++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java, +++ b/spring-core/src/main/java/org/springframework/util/CustomizableThreadCreator.java, +	@Nullable, +++ b/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFutureCallbackRegistry.java, +	public void success(@Nullable T result) {, +++ b/spring-core/src/main/java/org/springframework/util/xml/AbstractXMLReader.java, +	@Nullable, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/FieldRetrievingFactoryBean.java, +		this.targetField = (targetField != null ? StringUtils.trimAllWhitespace(targetField) : null);, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +	private final Map<CacheOperationCacheKey, CacheOperationMetadata> metadataCache = new ConcurrentHashMap<>(1024);, +			Assert.state(this.beanFactory != null, "CacheResolver or BeanFactory must be set on cache aspect");, +		if (this.beanFactory == null) {, +			throw new IllegalStateException(, +					"BeanFactory must be set on cache aspect for " + expectedType.getSimpleName() + " retrieval");, +		}, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractResourceBasedMessageSource.java, + * Copyright 2002-2017 the original author or authors., +	@Nullable, +++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java]