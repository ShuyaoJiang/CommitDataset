[+++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/JodaTimeContextHolder.java, +	public static void setJodaTimeContext(JodaTimeContext context) {, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/JodaTimeContextHolder.java, +	public static void setJodaTimeContext(JodaTimeContext context) {, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/JodaTimeFormattingConfigurer.java, +		formatterRegistry.addFormatterForFieldAnnotation(new ISODateTimeFormatAnnotationFormatterFactory());, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/JodaTimeContextHolder.java, +	public static void setJodaTimeContext(JodaTimeContext context) {, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/JodaTimeFormattingConfigurer.java, +		formatterRegistry.addFormatterForFieldAnnotation(new ISODateTimeFormatAnnotationFormatterFactory());, +++ b/org.springframework.context/src/test/java/org/springframework/format/datetime/joda/JodaTimeFormattingTests.java, +import org.joda.time.DateTimeZone;, +import org.springframework.format.annotation.ISODateTimeFormat;, +		JodaTimeContext context = new JodaTimeContext();, +		context.setTimeZone(DateTimeZone.forID("-05:00"));, +		JodaTimeContextHolder.setJodaTimeContext(context);, +		JodaTimeContextHolder.setJodaTimeContext(null);, +	@Test, +	public void testBindISODate() {, +		MutablePropertyValues propertyValues = new MutablePropertyValues();, +		propertyValues.addPropertyValue("isoDate", "2009-10-31");, +		binder.bind(propertyValues);, +		assertEquals(0, binder.getBindingResult().getErrorCount());, +		assertEquals("2009-10-31", binder.getBindingResult().getFieldValue("isoDate"));, +	}, +, +	@Test, +	public void testBindISOTime() {, +		MutablePropertyValues propertyValues = new MutablePropertyValues();, +		propertyValues.addPropertyValue("isoTime", "12:00:00.000-05:00");, +		binder.bind(propertyValues);, +		assertEquals(0, binder.getBindingResult().getErrorCount());, +		assertEquals("12:00:00.000", binder.getBindingResult().getFieldValue("isoTime"));, +	}, +, +	@Test, +	public void testBindISODateTime() {, +		MutablePropertyValues propertyValues = new MutablePropertyValues();, +		propertyValues.addPropertyValue("isoDateTime", "2009-10-31T12:00:00.000Z");, +		binder.bind(propertyValues);, +		assertEquals(0, binder.getBindingResult().getErrorCount());, +		assertEquals("2009-10-31T07:00:00.000-05:00", binder.getBindingResult().getFieldValue("isoDateTime"));, +	}, +, +		@ISODateTimeFormat(org.springframework.format.annotation.ISODateTimeFormat.Style.DATE), +		private LocalDate isoDate;, +, +		@ISODateTimeFormat(org.springframework.format.annotation.ISODateTimeFormat.Style.TIME), +		private LocalTime isoTime;, +, +		@ISODateTimeFormat(org.springframework.format.annotation.ISODateTimeFormat.Style.DATE_TIME), +		private DateTime isoDateTime;, +, +		public LocalDate getIsoDate() {, +			return isoDate;, +		}, +, +		public void setIsoDate(LocalDate isoDate) {, +			this.isoDate = isoDate;, +		}, +, +		public LocalTime getIsoTime() {, +			return isoTime;, +		}, +, +		public void setIsoTime(LocalTime isoTime) {, +			this.isoTime = isoTime;, +		}, +, +		public DateTime getIsoDateTime() {, +			return isoDateTime;, +		}, +, +		public void setIsoDateTime(DateTime isoDateTime) {, +			this.isoDateTime = isoDateTime;, +		}, +, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/JodaTimeContextHolder.java, +	public static void setJodaTimeContext(JodaTimeContext context) {, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/JodaTimeFormattingConfigurer.java, +		formatterRegistry.addFormatterForFieldAnnotation(new ISODateTimeFormatAnnotationFormatterFactory());, +++ b/org.springframework.context/src/test/java/org/springframework/format/datetime/joda/JodaTimeFormattingTests.java, +import org.joda.time.DateTimeZone;, +import org.springframework.format.annotation.ISODateTimeFormat;, +		JodaTimeContext context = new JodaTimeContext();, +		context.setTimeZone(DateTimeZone.forID("-05:00"));, +		JodaTimeContextHolder.setJodaTimeContext(context);, +		JodaTimeContextHolder.setJodaTimeContext(null);, +	@Test, +	public void testBindISODate() {, +		MutablePropertyValues propertyValues = new MutablePropertyValues();, +		propertyValues.addPropertyValue("isoDate", "2009-10-31");, +		binder.bind(propertyValues);, +		assertEquals(0, binder.getBindingResult().getErrorCount());, +		assertEquals("2009-10-31", binder.getBindingResult().getFieldValue("isoDate"));, +	}, +, +	@Test, +	public void testBindISOTime() {, +		MutablePropertyValues propertyValues = new MutablePropertyValues();]