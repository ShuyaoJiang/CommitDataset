[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java, +	// Async I/O notification methods..., +	/**, +	 * Invoked when reading is possible, either in the same thread after a check, +	 * via {@link #checkOnDataAvailable()}, or as a callback from the underlying, +	 * container., +	 */, +	/**, +	 * Sub-classes can call this method to delegate a contain notification when, +	 * all data has been read., +	 */, +	/**, +	 * Sub-classes can call this to delegate container error notifications., +	 */, +	// Read API methods to be implemented or template methods to override..., +	 * Check if data is available and either call {@link #onDataAvailable()}, +	 * immediately or schedule a notification., +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java, +	// Async I/O notification methods..., +	/**, +	 * Invoked when reading is possible, either in the same thread after a check, +	 * via {@link #checkOnDataAvailable()}, or as a callback from the underlying, +	 * container., +	 */, +	/**, +	 * Sub-classes can call this method to delegate a contain notification when, +	 * all data has been read., +	 */, +	/**, +	 * Sub-classes can call this to delegate container error notifications., +	 */, +	// Read API methods to be implemented or template methods to override..., +	 * Check if data is available and either call {@link #onDataAvailable()}, +	 * immediately or schedule a notification., +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor.java, +	// Subscriber methods and async I/O notification methods..., +	 * Error signal from the upstream, write Publisher. This is also used by, +	 * sub-classes to delegate error notifications from the container., +	 * Completion signal from the upstream, write Publisher. This is also used, +	 * by sub-classes to delegate completion notifications from the container., +	/**, +	 * Invoked when flusing is possible, either in the same thread after a check, +	 * via {@link #isWritePossible()}, or as a callback from the underlying, +	 * container., +	 */, +	protected final void onFlushPossible() {, +		this.state.get().onFlushPossible(this);, +	}, +, +	/**, +	 * Invoked during an error or completion callback from the underlying, +	 * container to cancel the upstream subscription., +	 */, +, +	// Publisher implementation for result notifications..., +	// Write API methods to be implemented or template methods to override..., +	 * Create a new processor for the current flush boundary., +	 * Whether writing/flushing is possible., +	protected abstract boolean isWritePossible();, +	 * Flush the output if ready, or otherwise {@link #isFlushPending()} should, +	 * return true after., +	protected abstract void flush() throws IOException;, +	 * Invoked when an error happens while flushing. Sub-classes may choose, +	 * to ignore this if they know the underlying API will provide an error, +	 * notification in a container thread., +	 * <p>Defaults to no-op., +	protected void flushingFailed(Throwable t) {, +	 *        REQUESTED <---> RECEIVED ------+, +	 *            |           FLUSHING       |, +	 *            |              |           |, +	 *            |              v           |, +	 *            +--------> COMPLETED <-----+, +			public <T> void onNext(AbstractListenerWriteFlushProcessor<T> proc, Publisher<? extends T> pub) {, +			public <T> void onNext(AbstractListenerWriteFlushProcessor<T> proc, Publisher<? extends T> pub) {, +		public <T> void onSubscribe(AbstractListenerWriteFlushProcessor<T> proc, Subscription subscription) {, +		public <T> void onNext(AbstractListenerWriteFlushProcessor<T> proc, Publisher<? extends T> pub) {, +		 * the current Publisher, i.e. for the current flush boundary., +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java, +	// Async I/O notification methods..., +	/**, +	 * Invoked when reading is possible, either in the same thread after a check, +	 * via {@link #checkOnDataAvailable()}, or as a callback from the underlying, +	 * container., +	 */, +	/**, +	 * Sub-classes can call this method to delegate a contain notification when, +	 * all data has been read., +	 */, +	/**, +	 * Sub-classes can call this to delegate container error notifications., +	 */, +	// Read API methods to be implemented or template methods to override..., +	 * Check if data is available and either call {@link #onDataAvailable()}, +	 * immediately or schedule a notification., +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerWriteFlushProcessor.java, +	// Subscriber methods and async I/O notification methods..., +	 * Error signal from the upstream, write Publisher. This is also used by, +	 * sub-classes to delegate error notifications from the container., +	 * Completion signal from the upstream, write Publisher. This is also used, +	 * by sub-classes to delegate completion notifications from the container.]