[+++ b/spring-jms/src/test/java/org/springframework/jms/core/JmsTemplateTests.java, +		this.jndiContext = mock(Context.class);, +		this.connectionFactory = mock(ConnectionFactory.class);, +		this.connection = mock(Connection.class);, +		this.session = mock(Session.class);, +		this.queue = mock(Queue.class);, +		given(this.connectionFactory.createConnection()).willReturn(this.connection);, +		given(this.connection.createSession(useTransactedTemplate(), Session.AUTO_ACKNOWLEDGE)).willReturn(this.session);, +		given(this.session.getTransacted()).willReturn(useTransactedSession());, +		given(this.jndiContext.lookup("testDestination")).willReturn(this.queue);, +				return JmsTemplateTests.this.jndiContext;, +		return this.session;, +		template.setConnectionFactory(this.connectionFactory);, +		given(this.session.createProducer(null)).willReturn(messageProducer);, +		verify(this.session).close();, +		verify(this.connection).close();, +		template.setConnectionFactory(this.connectionFactory);, +		given(this.session.createProducer(null)).willReturn(messageProducer);, +		verify(this.session).close();, +		verify(this.connection).close();, +		template.setConnectionFactory(this.connectionFactory);, +		verify(this.session).close();, +		verify(this.connection).close();, +		SingleConnectionFactory scf = new SingleConnectionFactory(this.connectionFactory);, +			assertSame(this.session, ConnectionFactoryUtils.getTransactionalSession(scf, null, false));, +			assertSame(this.session, ConnectionFactoryUtils.getTransactionalSession(scf, scf.createConnection(), false));, +		verify(this.connection).start();, +			verify(this.session).commit();, +		verify(this.session).close();, +		verify(this.connection).stop();, +		verify(this.connection).close();, +		template.setConnectionFactory(this.connectionFactory);, +				template.setDefaultDestination(this.queue);, +		given(this.session.createProducer(this.queue)).willReturn(messageProducer);, +		given(this.session.createTextMessage("just testing")).willReturn(textMessage);, +			template.setQosSettings(this.qosSettings);, +				template.send(this.queue, new MessageCreator() {, +			verify(this.session).commit();, +			verify(messageProducer).send(textMessage, this.qosSettings.getDeliveryMode(),, +					this.qosSettings.getPriority(), this.qosSettings.getTimeToLive());, +		verify(this.session).close();, +		verify(this.connection).close();, +		template.setConnectionFactory(this.connectionFactory);, +		given(this.session.createProducer(this.queue)).willReturn(messageProducer);, +		given(this.session.createTextMessage("Hello world")).willReturn(textMessage);, +		template.convertAndSend(this.queue, s);, +			verify(this.session).commit();, +		verify(this.session).close();, +		verify(this.connection).close();, +		template.setConnectionFactory(this.connectionFactory);, +				template.setDefaultDestination(this.queue);, +		given(this.session.createConsumer(this.queue,, +			given(this.session.getAcknowledgeMode()).willReturn(, +						(messageSelector ? template.receiveSelectedAndConvert(this.queue, selectorString) :, +						template.receiveAndConvert(this.queue));, +				message = (messageSelector ? template.receiveSelected(this.queue, selectorString) :, +						template.receive(this.queue));, +		verify(this.connection).start();, +		verify(this.connection).close();, +			verify(this.session).commit();, +		verify(this.session).close();, +		template.setConnectionFactory(this.connectionFactory);, +				template.setDefaultDestination(this.queue);, +		given(localSession.createProducer(this.queue)).willReturn(messageProducer);, +			message = template.sendAndReceive(this.queue, messageCreator);, +		verify(this.connection).start();, +		verify(this.connection).close();, +		template.setConnectionFactory(this.connectionFactory);, +		reset(this.session);, +		given(this.session.createProducer(this.queue)).willReturn(messageProducer);, +		given(this.session.createTextMessage("Hello world")).willReturn(textMessage);, +			template.convertAndSend(this.queue, s);, +		verify(this.session).close();, +		verify(this.connection).close();]