[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, + * Represents an HTTP response, as returned by {@link WebClient} and also, + * {@link ExchangeFunction}. Provides access to the response status and headers,, + * and also methods to consume the response body., + *, + * <p><strong>NOTE:</strong> When given access to a {@link ClientResponse} you, + * must always use the response body or entity methods to ensure resources are, + * released and to avoid potential issues with HTTP connection pooling. If not, + * interested in the response body, use {@code "bodyToMono(Void.class)"}., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, + * Represents an HTTP response, as returned by {@link WebClient} and also, + * {@link ExchangeFunction}. Provides access to the response status and headers,, + * and also methods to consume the response body., + *, + * <p><strong>NOTE:</strong> When given access to a {@link ClientResponse} you, + * must always use the response body or entity methods to ensure resources are, + * released and to avoid potential issues with HTTP connection pooling. If not, + * interested in the response body, use {@code "bodyToMono(Void.class)"}., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java, +		 * Perform the HTTP request and retrieve the response body:, +		 * <p><pre>, +		 * Mono&lt;Person&gt; bodyMono = client.get(), +		 *     .uri("/persons/1"), +		 *     .accept(MediaType.APPLICATION_JSON), +		 *     .retrieve(), +		 *     .bodyToMono(Person.class);, +		 * </pre>, +		 * <p>This method is a shortcut to using {@link #exchange()} and, +		 * decoding the response body through {@link ClientResponse}., +		 * @return {@code ResponseSpec} to specify how to decode the body, +		 * @see #exchange(), +		 */, +		ResponseSpec retrieve();, +, +		/**, +		 * Perform the HTTP request and return a {@link ClientResponse} with the, +		 * response status and headers. You can then use methods of the response, +		 * to consume the body:, +		 * <p><pre>, +		 * Mono&lt;Person&gt; mono = client.get(), +		 *     .uri("/persons/1"), +		 *     .flatMap(response -> response.bodyToMono(Person.class));, +		 * Flux&lt;Person&gt; flux = client.get(), +		 *     .uri("/persons"), +		 *     .flatMapMany(response -> response.bodyToFlux(Person.class));, +		 * <p><strong>NOTE:</strong> You must always use of the body or entity, +		 * methods on {@link ClientResponse} to ensure resources are released and, +		 * avoid potential issues with HTTP connection pooling. If not interested, +		 * in the response body, use {@code "bodyToMono(Void.class)"} to complete., +		 * @return a {@code Mono} for the response, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, + * Represents an HTTP response, as returned by {@link WebClient} and also, + * {@link ExchangeFunction}. Provides access to the response status and headers,, + * and also methods to consume the response body., + *, + * <p><strong>NOTE:</strong> When given access to a {@link ClientResponse} you, + * must always use the response body or entity methods to ensure resources are, + * released and to avoid potential issues with HTTP connection pooling. If not, + * interested in the response body, use {@code "bodyToMono(Void.class)"}., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java, +		 * Perform the HTTP request and retrieve the response body:, +		 * <p><pre>, +		 * Mono&lt;Person&gt; bodyMono = client.get(), +		 *     .uri("/persons/1"), +		 *     .accept(MediaType.APPLICATION_JSON), +		 *     .retrieve(), +		 *     .bodyToMono(Person.class);, +		 * </pre>, +		 * <p>This method is a shortcut to using {@link #exchange()} and, +		 * decoding the response body through {@link ClientResponse}., +		 * @return {@code ResponseSpec} to specify how to decode the body, +		 * @see #exchange(), +		 */, +		ResponseSpec retrieve();, +, +		/**, +		 * Perform the HTTP request and return a {@link ClientResponse} with the, +		 * response status and headers. You can then use methods of the response, +		 * to consume the body:, +		 * <p><pre>, +		 * Mono&lt;Person&gt; mono = client.get(), +		 *     .uri("/persons/1"), +		 *     .flatMap(response -> response.bodyToMono(Person.class));, +		 * Flux&lt;Person&gt; flux = client.get(), +		 *     .uri("/persons"), +		 *     .flatMapMany(response -> response.bodyToFlux(Person.class));, +		 * <p><strong>NOTE:</strong> You must always use of the body or entity, +		 * methods on {@link ClientResponse} to ensure resources are released and, +		 * avoid potential issues with HTTP connection pooling. If not interested, +		 * in the response body, use {@code "bodyToMono(Void.class)"} to complete., +		 * @return a {@code Mono} for the response, +++ b/src/docs/asciidoc/web/webflux-webclient.adoc, +            .flatMap(response -> response.toEntity(Person.class));, +When using `exchange()` you must always use any of the body or entity methods of, +`ClientResponse` to ensure resources are released and to avoid potential issues with HTTP, +connection pooling. If not interested in the response body use `bodyToMono(Void.class)`, +to complete.]