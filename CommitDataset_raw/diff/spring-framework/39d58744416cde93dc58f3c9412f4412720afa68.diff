[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpRequest.java, +	/**, +	 * Return an id for the underlying connection, if available., +	 * @since 5.1, +	 */, +	@Nullable, +	public String getConnectionId() {, +		return null;, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpRequest.java, +	/**, +	 * Return an id for the underlying connection, if available., +	 * @since 5.1, +	 */, +	@Nullable, +	public String getConnectionId() {, +		return null;, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultServerHttpRequestBuilder.java, +		@Nullable, +		private final String requestId;, +, +			this.requestId = originalRequest instanceof AbstractServerHttpRequest ?, +					((AbstractServerHttpRequest) originalRequest).getConnectionId() : null;, +, +		@Override, +		public String getConnectionId() {, +			return this.requestId;, +		}, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpRequest.java, +	/**, +	 * Return an id for the underlying connection, if available., +	 * @since 5.1, +	 */, +	@Nullable, +	public String getConnectionId() {, +		return null;, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultServerHttpRequestBuilder.java, +		@Nullable, +		private final String requestId;, +, +			this.requestId = originalRequest instanceof AbstractServerHttpRequest ?, +					((AbstractServerHttpRequest) originalRequest).getConnectionId() : null;, +, +		@Override, +		public String getConnectionId() {, +			return this.requestId;, +		}, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java, +	@Override, +	public String getConnectionId() {, +		return this.request instanceof Connection ?, +				((Connection) this.request).channel().id().asShortText() : null;, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpRequest.java, +	/**, +	 * Return an id for the underlying connection, if available., +	 * @since 5.1, +	 */, +	@Nullable, +	public String getConnectionId() {, +		return null;, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultServerHttpRequestBuilder.java, +		@Nullable, +		private final String requestId;, +, +			this.requestId = originalRequest instanceof AbstractServerHttpRequest ?, +					((AbstractServerHttpRequest) originalRequest).getConnectionId() : null;, +, +		@Override, +		public String getConnectionId() {, +			return this.requestId;, +		}, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java, +	@Override, +	public String getConnectionId() {, +		return this.request instanceof Connection ?, +				((Connection) this.request).channel().id().asShortText() : null;, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/UndertowServerHttpRequest.java, +import org.springframework.util.ObjectUtils;, +	private final String connectionId;, +, +		this.connectionId = ObjectUtils.getIdentityHexString(this.exchange.getConnection());, +	@Override, +	public String getConnectionId() {, +		return this.connectionId;, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpRequest.java, +	/**, +	 * Return an id for the underlying connection, if available.]