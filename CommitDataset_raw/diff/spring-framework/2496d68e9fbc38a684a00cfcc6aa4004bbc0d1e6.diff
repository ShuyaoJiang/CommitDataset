[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/InvocableHandlerMethod.java, + * Invokes the handler method for a given message after resolving its method argument, + * values through registered {@link HandlerMethodArgumentResolver}s., + * @author Juergen Hoeller, +	public InvocableHandlerMethod(Object bean, String methodName, Class<?>... parameterTypes), +			throws NoSuchMethodException {, +, +	public Object invoke(Message<?> message, Object... providedArgs) throws Exception {, +		Object returnValue = doInvoke(args);, +, +	protected Object doInvoke(Object... args) throws Exception {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/InvocableHandlerMethod.java, + * Invokes the handler method for a given message after resolving its method argument, + * values through registered {@link HandlerMethodArgumentResolver}s., + * @author Juergen Hoeller, +	public InvocableHandlerMethod(Object bean, String methodName, Class<?>... parameterTypes), +			throws NoSuchMethodException {, +, +	public Object invoke(Message<?> message, Object... providedArgs) throws Exception {, +		Object returnValue = doInvoke(args);, +, +	protected Object doInvoke(Object... args) throws Exception {, +++ b/spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java, + * Provides a method for invoking the handler method for a given request after resolving its, + * method argument values through registered {@link HandlerMethodArgumentResolver}s., + * <p>Argument resolution often requires a {@link WebDataBinder} for data binding or for type, + * conversion. Use the {@link #setDataBinderFactory(WebDataBinderFactory)} property to supply, + * a binder factory to pass to argument resolvers., + * <p>Use {@link #setHandlerMethodArgumentResolvers(HandlerMethodArgumentResolverComposite)}, + * to customize the list of argument resolvers., + * @author Juergen Hoeller, +	public InvocableHandlerMethod(Object bean, String methodName, Class<?>... parameterTypes), +			throws NoSuchMethodException {, +, +	 * Invoke the method after resolving its argument values in the context of the given request., +	 * <p>Argument values are commonly resolved through {@link HandlerMethodArgumentResolver}s., +	 * The {@code provideArgs} parameter however may supply argument values to be used directly,, +	 * i.e. without argument resolution. Examples of provided argument values include a, +	 * {@link WebDataBinder}, a {@link SessionStatus}, or a thrown exception instance., +	 * Provided argument values are checked before argument resolvers., +	 * @exception Exception raised if no suitable argument resolver can be found,, +	 * or if the method raised an exception, +	public Object invokeForRequest(NativeWebRequest request, ModelAndViewContainer mavContainer,, +		Object returnValue = doInvoke(args);, +, +	protected Object doInvoke(Object... args) throws Exception {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/InvocableHandlerMethod.java, + * Invokes the handler method for a given message after resolving its method argument, + * values through registered {@link HandlerMethodArgumentResolver}s., + * @author Juergen Hoeller, +	public InvocableHandlerMethod(Object bean, String methodName, Class<?>... parameterTypes), +			throws NoSuchMethodException {, +, +	public Object invoke(Message<?> message, Object... providedArgs) throws Exception {, +		Object returnValue = doInvoke(args);, +, +	protected Object doInvoke(Object... args) throws Exception {, +++ b/spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java, + * Provides a method for invoking the handler method for a given request after resolving its, + * method argument values through registered {@link HandlerMethodArgumentResolver}s., + * <p>Argument resolution often requires a {@link WebDataBinder} for data binding or for type, + * conversion. Use the {@link #setDataBinderFactory(WebDataBinderFactory)} property to supply, + * a binder factory to pass to argument resolvers., + * <p>Use {@link #setHandlerMethodArgumentResolvers(HandlerMethodArgumentResolverComposite)}, + * to customize the list of argument resolvers., + * @author Juergen Hoeller, +	public InvocableHandlerMethod(Object bean, String methodName, Class<?>... parameterTypes), +			throws NoSuchMethodException {, +, +	 * Invoke the method after resolving its argument values in the context of the given request., +	 * <p>Argument values are commonly resolved through {@link HandlerMethodArgumentResolver}s., +	 * The {@code provideArgs} parameter however may supply argument values to be used directly,, +	 * i.e. without argument resolution. Examples of provided argument values include a, +	 * {@link WebDataBinder}, a {@link SessionStatus}, or a thrown exception instance., +	 * Provided argument values are checked before argument resolvers., +	 * @exception Exception raised if no suitable argument resolver can be found,, +	 * or if the method raised an exception, +	public Object invokeForRequest(NativeWebRequest request, ModelAndViewContainer mavContainer,, +		Object returnValue = doInvoke(args);, +, +	protected Object doInvoke(Object... args) throws Exception {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethod.java, +, +	 * @param providedArgs "given" arguments matched by type (not resolved), +	public void invokeAndHandle(ServletWebRequest webRequest,, +			this.returnValueHandlers.handleReturnValue(, +					returnValue, getReturnValueType(returnValue), mavContainer, webRequest);, +		return (this.responseStatus != null);, +			sb.append(" [type=").append(returnValue.getClass().getName()).append("]");, +		sb.append(" [value=").append(returnValue).append("]");, +	 * Create a nested ServletInvocableHandlerMethod subclass that returns the, +	 * A nested subclass of {@code ServletInvocableHandlerMethod} that uses a, +, +	 * MethodParameter subclass based on the actual return value type or if, +			return (this.returnValue != null ? this.returnValue.getClass() : this.returnType.getRawClass());]