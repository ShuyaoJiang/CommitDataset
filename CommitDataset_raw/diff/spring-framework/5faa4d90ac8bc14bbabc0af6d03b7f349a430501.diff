[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, + * {@code true}, the {@link #setMediaTypes(Map) mediaTypes} property is inspected for a matching media type.</li>, + * property is <code>true</code>, the {@link #setMediaTypes(Map) mediaTypes} property is inspected for a matching, + * media type. The default name of the parameter is <code>format</code> and it can be configured using the, + * <li>If there is no match in the {@link #setMediaTypes(Map) mediaTypes} property and if the Java Activation, + * Framework (JAF) is present on the class path, {@link FileTypeMap#getContentType(String)} is used instead.</li>, + * <li>If the previous steps did not result in a media type, and, + * {@link #setIgnoreAcceptHeader(boolean) ignoreAcceptHeader} is {@code false}, the request {@code Accept} header is, + * used.</li>, + *, + * <p>Additionally, this view resolver exposes the {@link #setDefaultViews(List) defaultViews} property, allowing you to, + * override the views provided by the view resolvers. Note that these default views are offered as candicates, and, + * still need have the content type requested (via file extension, parameter, or {@code Accept} header, described above)., + * You can also set the {@linkplain #setDefaultContentType(MediaType) default content type} directly, which will be, + * returned when the other mechanisms ({@code Accept} header, file extension or parameter) do not result in a match., + *, +	private boolean ignoreAcceptHeader = false;, +, +	private MediaType defaultContentType;, +, +	 * Indicates whether a request parameter should be used to determine the requested media type, in favor of looking at, +	 * the {@code Accept} header. The default value is {@code false}., +	 * <p>For instance, when this flag is <code>true</code>, a request for {@code /hotels?format=pdf} will result in an, +	 * {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the browser-defined {@code, +	 * Sets the parameter name that can be used to determine the requested media type if the {@link, +	 * #setFavorParameter(boolean)} property is {@code true}. The default parameter name is {@code format}., +	 * Indicates whether the HTTP {@code Accept} header should be ignored. Default is {@code false}., +	 *, +	 * If set to {@code true}, this view resolver will only refer to the file extension and/or paramter, as indicated by, +	 * the {@link #setFavorPathExtension(boolean) favorPathExtension} and {@link #setFavorParameter(boolean), +	 * favorParameter} properties., +	 */, +	public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {, +		this.ignoreAcceptHeader = ignoreAcceptHeader;, +	}, +, +	/**, +	/** Sets the default views to use when a more specific view can not be obtained from the {@link ViewResolver} chain. */, +	 * Sets the default content type. This content type will be used when file extension, parameter, nor {@code Accept}, +	 * header define a content-type, either through being disabled or empty., +	 */, +	public void setDefaultContentType(MediaType defaultContentType) {, +		this.defaultContentType = defaultContentType;, +	}, +, +	/**, +						logger.debug(, +								"Requested media type is '" + mediaType + "' (based on parameter '" + parameterName +, +										"'='" + parameterValue + "')");, +		if (!ignoreAcceptHeader) {, +		}, +		if (defaultContentType != null) {, +			return Collections.singletonList(defaultContentType);, +		}, +	 * <p>The default implementation will check the {@linkplain #setMediaTypes(Map) media types} property for a defined, +	 * mapping., +	/** Inner class to avoid hard-coded JAF dependency. */, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, + * {@code true}, the {@link #setMediaTypes(Map) mediaTypes} property is inspected for a matching media type.</li>, + * property is <code>true</code>, the {@link #setMediaTypes(Map) mediaTypes} property is inspected for a matching, + * media type. The default name of the parameter is <code>format</code> and it can be configured using the, + * <li>If there is no match in the {@link #setMediaTypes(Map) mediaTypes} property and if the Java Activation, + * Framework (JAF) is present on the class path, {@link FileTypeMap#getContentType(String)} is used instead.</li>, + * <li>If the previous steps did not result in a media type, and, + * {@link #setIgnoreAcceptHeader(boolean) ignoreAcceptHeader} is {@code false}, the request {@code Accept} header is, + * used.</li>, + *, + * <p>Additionally, this view resolver exposes the {@link #setDefaultViews(List) defaultViews} property, allowing you to, + * override the views provided by the view resolvers. Note that these default views are offered as candicates, and, + * still need have the content type requested (via file extension, parameter, or {@code Accept} header, described above)., + * You can also set the {@linkplain #setDefaultContentType(MediaType) default content type} directly, which will be, + * returned when the other mechanisms ({@code Accept} header, file extension or parameter) do not result in a match., + *, +	private boolean ignoreAcceptHeader = false;, +, +	private MediaType defaultContentType;, +, +	 * Indicates whether a request parameter should be used to determine the requested media type, in favor of looking at, +	 * the {@code Accept} header. The default value is {@code false}., +	 * <p>For instance, when this flag is <code>true</code>, a request for {@code /hotels?format=pdf} will result in an, +	 * {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the browser-defined {@code, +	 * Sets the parameter name that can be used to determine the requested media type if the {@link, +	 * #setFavorParameter(boolean)} property is {@code true}. The default parameter name is {@code format}., +	 * Indicates whether the HTTP {@code Accept} header should be ignored. Default is {@code false}., +	 *, +	 * If set to {@code true}, this view resolver will only refer to the file extension and/or paramter, as indicated by, +	 * the {@link #setFavorPathExtension(boolean) favorPathExtension} and {@link #setFavorParameter(boolean), +	 * favorParameter} properties., +	 */, +	public void setIgnoreAcceptHeader(boolean ignoreAcceptHeader) {, +		this.ignoreAcceptHeader = ignoreAcceptHeader;, +	}, +, +	/**, +	/** Sets the default views to use when a more specific view can not be obtained from the {@link ViewResolver} chain. */, +	 * Sets the default content type. This content type will be used when file extension, parameter, nor {@code Accept}, +	 * header define a content-type, either through being disabled or empty., +	 */, +	public void setDefaultContentType(MediaType defaultContentType) {, +		this.defaultContentType = defaultContentType;]