[+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +	 * Obtain a {@link InputStream} from the given supplier, and read it into a, +	 * {@code Flux} of {@code DataBuffer}s. Closes the input stream when the, +	 * Flux is terminated., +	 * @param bufferFactory the factory to create data buffers with, +	 * @return a Flux of data buffers read from the given channel, +			Callable<InputStream> inputStreamSupplier, DataBufferFactory bufferFactory, int bufferSize) {, +		return readByteChannel(() -> Channels.newChannel(inputStreamSupplier.call()), bufferFactory, bufferSize);, +	 * Obtain a {@link ReadableByteChannel} from the given supplier, and read, +	 * it into a {@code Flux} of {@code DataBuffer}s. Closes the channel when, +	 * the Flux is terminated., +	 * @return a Flux of data buffers read from the given channel, +	 * Obtain a {@code AsynchronousFileChannel} from the given supplier, and read, +	 * it into a {@code Flux} of {@code DataBuffer}s. Closes the channel when, +	 * the Flux is terminated., +	 * @return a Flux of data buffers read from the given channel, +	 * Obtain a {@code AsynchronousFileChannel} from the given supplier, and, +	 * read it into a {@code Flux} of {@code DataBuffer}s, starting at the given, +	 * position. Closes the channel when the Flux is terminated., +	 * @return a Flux of data buffers read from the given channel, +	public static Flux<DataBuffer> readAsynchronousFileChannel(, +			Callable<AsynchronousFileChannel> channelSupplier, long position,, +			DataBufferFactory bufferFactory, int bufferSize) {, +	 * @param bufferFactory the factory to create data buffers with, +	 * @return a Flux of data buffers read from the given channel, +	public static Flux<DataBuffer> read(Resource resource, DataBufferFactory bufferFactory, int bufferSize) {, +		return read(resource, 0, bufferFactory, bufferSize);, +	 * @param bufferFactory the factory to create data buffers with, +	 * @return a Flux of data buffers read from the given channel, +			Resource resource, long position, DataBufferFactory bufferFactory, int bufferSize) {, +						position, bufferFactory, bufferSize);, +		Flux<DataBuffer> result = readByteChannel(resource::readableChannel, bufferFactory, bufferSize);, +	 * Write the given stream of {@link DataBuffer DataBuffers} to the given, +	 * {@code OutputStream}. Does <strong>not</strong> close the output stream, +	 * when the flux is terminated, and does <strong>not</strong>, +	 * {@linkplain #release(DataBuffer) release} the data buffers in the source., +	 * If releasing is required, then subscribe to the returned {@code Flux}, +	 * with a {@link #releaseConsumer()}., +	 * <p>Note that the writing process does not start until the returned, +	 * {@code Flux} is subscribed to., +	 * @return a Flux containing the same buffers as in {@code source}, that, +	 * starts the writing process when subscribed to, and that publishes any, +	 * writing errors and the completion signal, +	 * Write the given stream of {@link DataBuffer DataBuffers} to the given, +	 * {@code WritableByteChannel}. Does <strong>not</strong> close the channel, +	 * when the flux is terminated, and does <strong>not</strong>, +	 * {@linkplain #release(DataBuffer) release} the data buffers in the source., +	 * If releasing is required, then subscribe to the returned {@code Flux}, +	 * with a {@link #releaseConsumer()}., +	 * <p>Note that the writing process does not start until the returned, +	 * {@code Flux} is subscribed to., +	 * @return a Flux containing the same buffers as in {@code source}, that, +	 * starts the writing process when subscribed to, and that publishes any, +	 * writing errors and the completion signal, +	 * Write the given stream of {@link DataBuffer DataBuffers} to the given, +	 * {@code AsynchronousFileChannel}. Does <strong>not</strong> close the, +	 * channel when the flux is terminated, and does <strong>not</strong>, +	 * {@linkplain #release(DataBuffer) release} the data buffers in the source., +	 * If releasing is required, then subscribe to the returned {@code Flux}, +	 * with a {@link #releaseConsumer()}., +	 * <p>Note that the writing process does not start until the returned, +	 * {@code Flux} is subscribed to., +	 * @return a Flux containing the same buffers as in {@code source}, that, +	 * starts the writing process when subscribed to, and that publishes any, +	 * writing errors and the completion signal, +	 * Write the given stream of {@link DataBuffer DataBuffers} to the given, +	 * {@code AsynchronousFileChannel}. Does <strong>not</strong> close the channel, +	 * when the flux is terminated, and does <strong>not</strong>, +	 * {@linkplain #release(DataBuffer) release} the data buffers in the source., +	 * If releasing is required, then subscribe to the returned {@code Flux} with a, +	 * <p>Note that the writing process does not start until the returned, +	 * {@code Flux} is subscribed to., +	 * @param position file position write write is to begin; must be non-negative, +	 * @return a flux containing the same buffers as in {@code source}, that, +	 * starts the writing process when subscribed to, and that publishes any, +	 * writing errors and the completion signal]