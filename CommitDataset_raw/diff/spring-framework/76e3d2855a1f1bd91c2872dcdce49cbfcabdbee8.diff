[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, + * {@link Configuration @Configuration}-annotated classes, but also plain, + * {@link org.springframework.stereotype.Component @Component} types and JSR-330 compliant, + * classes using {@code javax.inject} annotations. Allows for registering classes one by, + * one using {@link #register(Class...)} as well as for classpath scanning using, + * {@link #scan(String...)}., + * <p>In case of multiple {@code @Configuration} classes, @{@link Bean} methods defined in, + * later classes will override those defined in earlier classes. This can be leveraged to, + * deliberately override certain bean definitions via an extra {@code @Configuration}, + * class., + *, + * <p>See @{@link Configuration} Javadoc for usage examples., +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, + * {@link Configuration @Configuration}-annotated classes, but also plain, + * {@link org.springframework.stereotype.Component @Component} types and JSR-330 compliant, + * classes using {@code javax.inject} annotations. Allows for registering classes one by, + * one using {@link #register(Class...)} as well as for classpath scanning using, + * {@link #scan(String...)}., + * <p>In case of multiple {@code @Configuration} classes, @{@link Bean} methods defined in, + * later classes will override those defined in earlier classes. This can be leveraged to, + * deliberately override certain bean definitions via an extra {@code @Configuration}, + * class., + *, + * <p>See @{@link Configuration} Javadoc for usage examples., +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Bean.java, + *     }</pre>, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, + * {@link Configuration @Configuration}-annotated classes, but also plain, + * {@link org.springframework.stereotype.Component @Component} types and JSR-330 compliant, + * classes using {@code javax.inject} annotations. Allows for registering classes one by, + * one using {@link #register(Class...)} as well as for classpath scanning using, + * {@link #scan(String...)}., + * <p>In case of multiple {@code @Configuration} classes, @{@link Bean} methods defined in, + * later classes will override those defined in earlier classes. This can be leveraged to, + * deliberately override certain bean definitions via an extra {@code @Configuration}, + * class., + *, + * <p>See @{@link Configuration} Javadoc for usage examples., +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Bean.java, + *     }</pre>, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Configuration.java, + * Copyright 2002-2011 the original author or authors., + * Indicates that a class declares one or more @{@link Bean} methods and may be processed, + * by the Spring container to generate bean definitions and service requests for those, + * beans at runtime, for example:, + * <pre class="code">, + * &#064;Configuration, + * public class AppConfig {, + *     &#064;Bean, + *     public MyBean myBean() {, + *         // instantiate, configure and return bean ..., + *     }, + * }</pre>, + * <h2>Bootstrapping {@code @Configuration} classes</h2>, + * <h3>Via {@code AnnotationConfigApplicationContext}</h3>, + * {@code @Configuration} classes are typically bootstrapped using either, + * {@link AnnotationConfigApplicationContext} or its web-capable variant,, + * {@link org.springframework.web.context.support.AnnotationConfigWebApplicationContext, + * AnnotationConfigWebApplicationContext}., + * A simple example with the former follows:, + * <pre class="code">, + * AnnotationConfigApplicationContext ctx =, + *     new AnnotationConfigApplicationContext();, + * ctx.register(AppConfig.class);, + * ctx.refresh();, + * MyBean myBean = ctx.getBean(MyBean.class);, + * // use myBean ...</pre>, + * See {@link AnnotationConfigApplicationContext} Javadoc for further details and see, + * {@link org.springframework.web.context.support.AnnotationConfigWebApplicationContext, + * AnnotationConfigWebApplicationContext} for {@code web.xml} configuration instructions., + * <h3>Via Spring {@code <beans>} XML</h3>, + * <p>As an alternative to registering {@code @Configuration} classes directly against an, + * {@code AnnotationConfigApplicationContext}, {@code @Configuration} classes may be, + * declared as normal {@code <bean>} definitions within Spring XML files:, + * <pre class="code">, + * {@code, + * <beans>, + *    <context:annotation-config/>, + *    <bean class="com.acme.AppConfig"/>, + * </beans>, + * }</pre>, + *, + * In the example above, {@code <context:annotation-config/>} is required in order to, + * enable {@link ConfigurationClassPostProcessor} and other annotation-related, + * post processors that facilitate handling {@code @Configuration} classes., + *, + * <h3>Via component scanning</h3>, + * <p>{@code @Configuration} is meta-annotated with @{@link Component}, therefore, + * {@code @Configuration} classes are candidates for component scanning (typically using, + * Spring XML's {@code <context:component-scan/>} element) and therefore may also take, + * advantage of @{@link Autowired}/@{@link Inject} at the field and method level (but not, + * at the constructor level)., + * <p>{@code @Configuration} classes may not only be bootstrapped using, + * component scanning, but may also themselves <em>configure</em> component scanning using, + * the @{@link ComponentScan} annotation:, + * <pre class="code">, + * &#064;Configuration, + * &#064;ComponentScan("com.acme.app.services"), + * public class AppConfig {, + *     // various &#064;Bean definitions ...]