[+++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractServerHttpMessageReader.java, + * example, by implementing {@link #resolveReadHints(ResolvableType, ResolvableType, ServerHttpRequest)}., +		mergedHints.putAll(resolveReadHints(streamType, elementType, request));, +		mergedHints.putAll(resolveReadHints(streamType, elementType, request));, +	 * Invoked before reading the request to resolve hints by, +	protected abstract Map<String, Object> resolveReadHints(ResolvableType streamType,, +			ResolvableType elementType, ServerHttpRequest request);, +++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractServerHttpMessageReader.java, + * example, by implementing {@link #resolveReadHints(ResolvableType, ResolvableType, ServerHttpRequest)}., +		mergedHints.putAll(resolveReadHints(streamType, elementType, request));, +		mergedHints.putAll(resolveReadHints(streamType, elementType, request));, +	 * Invoked before reading the request to resolve hints by, +	protected abstract Map<String, Object> resolveReadHints(ResolvableType streamType,, +			ResolvableType elementType, ServerHttpRequest request);, +++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractServerHttpMessageWriter.java, + * example, by implementing {@link #resolveWriteHints(ResolvableType, ResolvableType, MediaType, ServerHttpRequest)}., +		mergedHints.putAll(resolveWriteHints(streamType, elementType, mediaType, request));, +	 * Invoked before writing the response to resolve hints by, +	protected abstract Map<String, Object> resolveWriteHints(ResolvableType streamType, ResolvableType elementType,, +			MediaType mediaType, ServerHttpRequest request);, +++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractServerHttpMessageReader.java, + * example, by implementing {@link #resolveReadHints(ResolvableType, ResolvableType, ServerHttpRequest)}., +		mergedHints.putAll(resolveReadHints(streamType, elementType, request));, +		mergedHints.putAll(resolveReadHints(streamType, elementType, request));, +	 * Invoked before reading the request to resolve hints by, +	protected abstract Map<String, Object> resolveReadHints(ResolvableType streamType,, +			ResolvableType elementType, ServerHttpRequest request);, +++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractServerHttpMessageWriter.java, + * example, by implementing {@link #resolveWriteHints(ResolvableType, ResolvableType, MediaType, ServerHttpRequest)}., +		mergedHints.putAll(resolveWriteHints(streamType, elementType, mediaType, request));, +	 * Invoked before writing the response to resolve hints by, +	protected abstract Map<String, Object> resolveWriteHints(ResolvableType streamType, ResolvableType elementType,, +			MediaType mediaType, ServerHttpRequest request);, +++ b/spring-web/src/main/java/org/springframework/http/codec/Jackson2ServerHttpMessageReader.java, +	protected Map<String, Object> resolveReadHints(ResolvableType streamType,, +			ResolvableType elementType, ServerHttpRequest request) {, +++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractServerHttpMessageReader.java, + * example, by implementing {@link #resolveReadHints(ResolvableType, ResolvableType, ServerHttpRequest)}., +		mergedHints.putAll(resolveReadHints(streamType, elementType, request));, +		mergedHints.putAll(resolveReadHints(streamType, elementType, request));, +	 * Invoked before reading the request to resolve hints by, +	protected abstract Map<String, Object> resolveReadHints(ResolvableType streamType,, +			ResolvableType elementType, ServerHttpRequest request);, +++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractServerHttpMessageWriter.java, + * example, by implementing {@link #resolveWriteHints(ResolvableType, ResolvableType, MediaType, ServerHttpRequest)}., +		mergedHints.putAll(resolveWriteHints(streamType, elementType, mediaType, request));, +	 * Invoked before writing the response to resolve hints by, +	protected abstract Map<String, Object> resolveWriteHints(ResolvableType streamType, ResolvableType elementType,, +			MediaType mediaType, ServerHttpRequest request);, +++ b/spring-web/src/main/java/org/springframework/http/codec/Jackson2ServerHttpMessageReader.java, +	protected Map<String, Object> resolveReadHints(ResolvableType streamType,, +			ResolvableType elementType, ServerHttpRequest request) {, +++ b/spring-web/src/main/java/org/springframework/http/codec/Jackson2ServerHttpMessageWriter.java, +	protected Map<String, Object> resolveWriteHints(ResolvableType streamType,, +			ResolvableType elementType, MediaType mediaType, ServerHttpRequest request) {, +++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractServerHttpMessageReader.java, + * example, by implementing {@link #resolveReadHints(ResolvableType, ResolvableType, ServerHttpRequest)}., +		mergedHints.putAll(resolveReadHints(streamType, elementType, request));, +		mergedHints.putAll(resolveReadHints(streamType, elementType, request));, +	 * Invoked before reading the request to resolve hints by, +	protected abstract Map<String, Object> resolveReadHints(ResolvableType streamType,, +			ResolvableType elementType, ServerHttpRequest request);, +++ b/spring-web/src/main/java/org/springframework/http/codec/AbstractServerHttpMessageWriter.java, + * example, by implementing {@link #resolveWriteHints(ResolvableType, ResolvableType, MediaType, ServerHttpRequest)}., +		mergedHints.putAll(resolveWriteHints(streamType, elementType, mediaType, request));, +	 * Invoked before writing the response to resolve hints by, +	protected abstract Map<String, Object> resolveWriteHints(ResolvableType streamType, ResolvableType elementType,, +			MediaType mediaType, ServerHttpRequest request);, +++ b/spring-web/src/main/java/org/springframework/http/codec/Jackson2ServerHttpMessageReader.java, +	protected Map<String, Object> resolveReadHints(ResolvableType streamType,, +			ResolvableType elementType, ServerHttpRequest request) {, +++ b/spring-web/src/main/java/org/springframework/http/codec/Jackson2ServerHttpMessageWriter.java, +	protected Map<String, Object> resolveWriteHints(ResolvableType streamType,, +			ResolvableType elementType, MediaType mediaType, ServerHttpRequest request) {, +++ b/spring-web/src/main/java/org/springframework/http/codec/ResourceHttpMessageWriter.java, +	protected Map<String, Object> resolveWriteHints(ResolvableType streamType, ResolvableType elementType,, +			MediaType mediaType, ServerHttpRequest request) {, +		mergedHints.putAll(resolveWriteHints(streamType, elementType, mediaType, request));, +			response.setStatusCode(HttpStatus.PARTIAL_CONTENT);]