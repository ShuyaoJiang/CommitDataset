[+++ b/spring-web/src/test/java/org/springframework/web/client/AsyncRestTemplateIntegrationTests.java, +import org.junit.Assert;, +	private final AsyncRestTemplate template = new AsyncRestTemplate(, +			new HttpComponentsAsyncClientHttpRequestFactory());, +		Future<ResponseEntity<String>> future = template.getForEntity(baseUrl + "/{method}", String.class, "get");, +		ResponseEntity<String> entity = future.get();, +		Future<ResponseEntity<String>> future = template.getForEntity(baseUrl + "/{method}", String.class, "get");, +		future.get();, +		future.get();, +		waitTillDone(futureEntity);, +		waitTillDone(futureEntity);, +		waitTillDone(headersFuture);, +		waitTillDone(headersFuture);, +		HttpEntity<String> entity = new HttpEntity<>(helloWorld, entityHeaders);, +		HttpEntity<String> entity = new HttpEntity<>(helloWorld, entityHeaders);, +		waitTillDone(locationFuture);, +		HttpEntity<String> entity = new HttpEntity<>(helloWorld, entityHeaders);, +		waitTillDone(locationFuture);, +		waitTillDone(responseEntityFuture);, +		responseEntityFuture.addCallback(, +				result -> assertEquals("Invalid content", helloWorld, result.getBody()),, +		waitTillDone(responseEntityFuture);, +		waitTillDone(responseEntityFuture);, +		waitTillDone(deletedFuture);, +		deletedFuture.addCallback(Assert::assertNull, ex -> fail(ex.getMessage()));, +		waitTillDone(deletedFuture);, +		waitTillDone(future);, +		waitTillDone(future);, +		waitTillDone(future);, +		waitTillDone(future);, +		waitTillDone(allowedFuture);, +		waitTillDone(allowedFuture);, +		waitTillDone(responseFuture);, +		waitTillDone(responseFuture);, +		HttpEntity<String> requestEntity = new HttpEntity<>(helloWorld, requestHeaders);, +		HttpEntity<String> requestEntity = new HttpEntity<>(helloWorld, requestHeaders);, +		waitTillDone(resultFuture);, +		HttpEntity<String> requestEntity = new HttpEntity<>(helloWorld, requestHeaders);, +		waitTillDone(resultFuture);, +		MultiValueMap<String, Object> parts = new LinkedMultiValueMap<>();, +	@SuppressWarnings("StatementWithEmptyBody"), +	private void waitTillDone(ListenableFuture<?> future) {, +		while (!future.isDone()) {, +		}, +	}, +, +++ b/spring-web/src/test/java/org/springframework/web/client/AsyncRestTemplateIntegrationTests.java, +import org.junit.Assert;, +	private final AsyncRestTemplate template = new AsyncRestTemplate(, +			new HttpComponentsAsyncClientHttpRequestFactory());, +		Future<ResponseEntity<String>> future = template.getForEntity(baseUrl + "/{method}", String.class, "get");, +		ResponseEntity<String> entity = future.get();, +		Future<ResponseEntity<String>> future = template.getForEntity(baseUrl + "/{method}", String.class, "get");, +		future.get();, +		future.get();, +		waitTillDone(futureEntity);, +		waitTillDone(futureEntity);, +		waitTillDone(headersFuture);, +		waitTillDone(headersFuture);, +		HttpEntity<String> entity = new HttpEntity<>(helloWorld, entityHeaders);, +		HttpEntity<String> entity = new HttpEntity<>(helloWorld, entityHeaders);, +		waitTillDone(locationFuture);, +		HttpEntity<String> entity = new HttpEntity<>(helloWorld, entityHeaders);, +		waitTillDone(locationFuture);, +		waitTillDone(responseEntityFuture);, +		responseEntityFuture.addCallback(, +				result -> assertEquals("Invalid content", helloWorld, result.getBody()),, +		waitTillDone(responseEntityFuture);, +		waitTillDone(responseEntityFuture);, +		waitTillDone(deletedFuture);, +		deletedFuture.addCallback(Assert::assertNull, ex -> fail(ex.getMessage()));, +		waitTillDone(deletedFuture);, +		waitTillDone(future);, +		waitTillDone(future);, +		waitTillDone(future);, +		waitTillDone(future);, +		waitTillDone(allowedFuture);, +		waitTillDone(allowedFuture);, +		waitTillDone(responseFuture);, +		waitTillDone(responseFuture);, +		HttpEntity<String> requestEntity = new HttpEntity<>(helloWorld, requestHeaders);, +		HttpEntity<String> requestEntity = new HttpEntity<>(helloWorld, requestHeaders);, +		waitTillDone(resultFuture);, +		HttpEntity<String> requestEntity = new HttpEntity<>(helloWorld, requestHeaders);, +		waitTillDone(resultFuture);, +		MultiValueMap<String, Object> parts = new LinkedMultiValueMap<>();, +	@SuppressWarnings("StatementWithEmptyBody"), +	private void waitTillDone(ListenableFuture<?> future) {, +		while (!future.isDone()) {, +		}, +	}, +, +++ b/src/asciidoc/whats-new.adoc, +* `AsyncRestTemplate` supports request interception.]