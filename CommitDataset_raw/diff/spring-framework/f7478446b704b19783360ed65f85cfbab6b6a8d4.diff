[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +			ResolvableType genericType = bodyType.getGeneric(0);, +			elementType = getElementType(adapter, genericType);, +	private ResolvableType getElementType(ReactiveAdapter adapter, ResolvableType genericType) {, +		if (adapter.isNoValue()) {, +			return ResolvableType.forClass(Void.class);, +		}, +		else if (genericType != ResolvableType.NONE) {, +			return genericType;, +		}, +		else {, +			return ResolvableType.forClass(Object.class);, +		}, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +			ResolvableType genericType = bodyType.getGeneric(0);, +			elementType = getElementType(adapter, genericType);, +	private ResolvableType getElementType(ReactiveAdapter adapter, ResolvableType genericType) {, +		if (adapter.isNoValue()) {, +			return ResolvableType.forClass(Void.class);, +		}, +		else if (genericType != ResolvableType.NONE) {, +			return genericType;, +		}, +		else {, +			return ResolvableType.forClass(Object.class);, +		}, +	}, +, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingMessageConversionIntegrationTests.java, +	public void personResponseBodyWithMonoDeclaredAsObject() throws Exception {, +		Person expected = new Person("Robert");, +		assertEquals(expected, performGet("/person-response/mono-declared-as-object", JSON, Person.class).getBody());, +	}, +, +	@Test, +		@GetMapping("/mono-declared-as-object"), +		public Object getMonoDeclaredAsObject() {, +			return Mono.just(new Person("Robert"));, +		}, +]