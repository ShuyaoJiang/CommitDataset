[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/NettyWebSocketSessionSupport.java, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/NettyWebSocketSessionSupport.java, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/client/JettyWebSocketClient.java, + * Jetty based implementation of {@link WebSocketClient}., +	private final org.eclipse.jetty.websocket.client.WebSocketClient jettyClient;, +	private final DataBufferFactory bufferFactory = new DefaultDataBufferFactory();, +	 * @param jettyClient a web socket client, +	public JettyWebSocketClient(org.eclipse.jetty.websocket.client.WebSocketClient jettyClient) {, +		this.jettyClient = jettyClient;, +	}, +, +, +	@Override, +	public void start() {, +		synchronized (this.lifecycleMonitor) {, +			if (!isRunning()) {, +				try {, +					this.jettyClient.start();, +				}, +				catch (Exception ex) {, +					throw new IllegalStateException("Failed to start Jetty WebSocketClient", ex);, +				}, +			}, +		}, +	}, +, +	@Override, +	public void stop() {, +		synchronized (this.lifecycleMonitor) {, +			if (isRunning()) {, +				try {, +					this.jettyClient.stop();, +				}, +				catch (Exception ex) {, +					throw new IllegalStateException("Error stopping Jetty WebSocketClient", ex);, +				}, +			}, +		}, +	}, +, +	@Override, +	public boolean isRunning() {, +		synchronized (this.lifecycleMonitor) {, +			return this.jettyClient.isStarted();, +		}, +					return this.jettyClient.connect(jettyHandler, url, upgradeRequest);, +		return new JettyWebSocketHandlerAdapter(handler,, +				session -> createJettySession(url, completion, session));, +	private JettyWebSocketSession createJettySession(URI url, MonoProcessor<Void> completion, Session session) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/NettyWebSocketSessionSupport.java, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/client/JettyWebSocketClient.java, + * Jetty based implementation of {@link WebSocketClient}., +	private final org.eclipse.jetty.websocket.client.WebSocketClient jettyClient;, +	private final DataBufferFactory bufferFactory = new DefaultDataBufferFactory();, +	 * @param jettyClient a web socket client, +	public JettyWebSocketClient(org.eclipse.jetty.websocket.client.WebSocketClient jettyClient) {, +		this.jettyClient = jettyClient;, +	}, +, +, +	@Override, +	public void start() {, +		synchronized (this.lifecycleMonitor) {, +			if (!isRunning()) {, +				try {, +					this.jettyClient.start();, +				}, +				catch (Exception ex) {, +					throw new IllegalStateException("Failed to start Jetty WebSocketClient", ex);, +				}, +			}, +		}, +	}, +, +	@Override, +	public void stop() {, +		synchronized (this.lifecycleMonitor) {, +			if (isRunning()) {, +				try {, +					this.jettyClient.stop();, +				}, +				catch (Exception ex) {, +					throw new IllegalStateException("Error stopping Jetty WebSocketClient", ex);, +				}, +			}, +		}, +	}, +, +	@Override, +	public boolean isRunning() {, +		synchronized (this.lifecycleMonitor) {, +			return this.jettyClient.isStarted();, +		}, +					return this.jettyClient.connect(jettyHandler, url, upgradeRequest);, +		return new JettyWebSocketHandlerAdapter(handler,, +				session -> createJettySession(url, completion, session));, +	private JettyWebSocketSession createJettySession(URI url, MonoProcessor<Void> completion, Session session) {]