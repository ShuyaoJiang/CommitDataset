[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +		if (ao.getAnnotations().length > 0) {, +		}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +		if (ao.getAnnotations().length > 0) {, +		}, +++ b/spring-core/src/main/java/org/springframework/core/type/StandardAnnotationMetadata.java, +	private final Annotation[] annotations;, +, +		this.annotations = introspectedClass.getAnnotations();, +		for (Annotation ann : this.annotations) {, +		return (this.annotations.length > 0 ?, +				AnnotatedElementUtils.getMetaAnnotationTypes(getIntrospectedClass(), annotationName) : null);, +		for (Annotation ann : this.annotations) {, +		return (this.annotations.length > 0 &&, +				AnnotatedElementUtils.hasMetaAnnotationTypes(getIntrospectedClass(), annotationName));, +		return (this.annotations.length > 0 &&, +				AnnotatedElementUtils.isAnnotated(getIntrospectedClass(), annotationName));, +		return getAnnotationAttributes(annotationName, false);, +		return (this.annotations.length > 0 ? AnnotatedElementUtils.getMergedAnnotationAttributes(, +				getIntrospectedClass(), annotationName, classValuesAsString, this.nestedAnnotationsAsMap) : null);, +		return (this.annotations.length > 0 ? AnnotatedElementUtils.getAllAnnotationAttributes(, +				getIntrospectedClass(), annotationName, classValuesAsString, this.nestedAnnotationsAsMap) : null);, +			if (!method.isBridge() && method.getAnnotations().length > 0 &&, +					AnnotatedElementUtils.isAnnotated(method, annotationName)) {, +			if (!method.isBridge() && method.getAnnotations().length > 0 &&, +					AnnotatedElementUtils.isAnnotated(method, annotationName)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +		if (ao.getAnnotations().length > 0) {, +		}, +++ b/spring-core/src/main/java/org/springframework/core/type/StandardAnnotationMetadata.java, +	private final Annotation[] annotations;, +, +		this.annotations = introspectedClass.getAnnotations();, +		for (Annotation ann : this.annotations) {, +		return (this.annotations.length > 0 ?, +				AnnotatedElementUtils.getMetaAnnotationTypes(getIntrospectedClass(), annotationName) : null);, +		for (Annotation ann : this.annotations) {, +		return (this.annotations.length > 0 &&, +				AnnotatedElementUtils.hasMetaAnnotationTypes(getIntrospectedClass(), annotationName));, +		return (this.annotations.length > 0 &&, +				AnnotatedElementUtils.isAnnotated(getIntrospectedClass(), annotationName));, +		return getAnnotationAttributes(annotationName, false);, +		return (this.annotations.length > 0 ? AnnotatedElementUtils.getMergedAnnotationAttributes(, +				getIntrospectedClass(), annotationName, classValuesAsString, this.nestedAnnotationsAsMap) : null);, +		return (this.annotations.length > 0 ? AnnotatedElementUtils.getAllAnnotationAttributes(, +				getIntrospectedClass(), annotationName, classValuesAsString, this.nestedAnnotationsAsMap) : null);, +			if (!method.isBridge() && method.getAnnotations().length > 0 &&, +					AnnotatedElementUtils.isAnnotated(method, annotationName)) {, +			if (!method.isBridge() && method.getAnnotations().length > 0 &&, +					AnnotatedElementUtils.isAnnotated(method, annotationName)) {, +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/AnnotationTransactionAttributeSource.java, + * Copyright 2002-2015 the original author or authors., +		if (ae.getAnnotations().length > 0) {, +		}]