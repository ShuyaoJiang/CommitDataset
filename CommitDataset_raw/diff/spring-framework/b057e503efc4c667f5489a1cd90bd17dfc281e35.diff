[+++ b/spring-test/src/test/java/org/springframework/test/context/support/AbstractContextConfigurationUtilsTests.java, +, +, +	static final Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>>, +			EMPTY_INITIALIZER_CLASSES = Collections.<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> emptySet();, +		BootstrapContext bootstrapContext = BootstrapTestUtils.buildBootstrapContext(testClass, cacheAwareContextLoaderDelegate);, +, +, +, +++ b/spring-test/src/test/java/org/springframework/test/context/support/AbstractContextConfigurationUtilsTests.java, +, +, +	static final Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>>, +			EMPTY_INITIALIZER_CLASSES = Collections.<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> emptySet();, +		BootstrapContext bootstrapContext = BootstrapTestUtils.buildBootstrapContext(testClass, cacheAwareContextLoaderDelegate);, +, +, +, +++ b/spring-test/src/test/java/org/springframework/test/context/support/ContextLoaderUtilsConfigurationAttributesTests.java, +				containsString("attribute 'value' and its alias 'locations'")).or(, +				containsString("attribute 'locations' and its alias 'value'")));, +		exception.expectMessage(containsString("but only one is permitted"));, +		assertAttributes(attributesList.get(0),, +				testClass, EMPTY_STRING_ARRAY, EMPTY_CLASS_ARRAY, ContextLoader.class, true);, +		assertAttributes(attributesList.get(0),, +				testClass, new String[] {"/foo.xml"}, EMPTY_CLASS_ARRAY, ContextLoader.class, true);, +		assertAttributes(attributesList.get(0),, +				testClass, new String[] {"/foo.xml"}, EMPTY_CLASS_ARRAY, ContextLoader.class, true);, +		assertAttributes(attributesList.get(0),, +				testClass, new String[] {"foo1.xml", "foo2.xml"}, EMPTY_CLASS_ARRAY, ContextLoader.class, true);, +		assertAttributes(attributesList.get(0),, +				testClass, new String[] {"/bar.xml"}, EMPTY_CLASS_ARRAY, ContextLoader.class, true);, +		assertAttributes(attributesList.get(1),, +				MetaLocationsFoo.class, new String[] {"/foo.xml"}, EMPTY_CLASS_ARRAY, ContextLoader.class, true);]