[+++ b/spring-web/src/main/java/org/springframework/http/MediaType.java, +import org.springframework.util.comparator.CompoundComparator;, + * @author Rossen Stoyanchev, +	 * Return a replica of this instance with the quality value of the given MediaType., +	 * @return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise, +	 */, +	public MediaType copyQualityValue(MediaType mediaType) {, +		if (!mediaType.parameters.containsKey(PARAM_QUALITY_FACTOR)) {, +			return this;, +		}, +		Map<String, String> params = new LinkedHashMap<String, String>(this.parameters);, +		params.put(PARAM_QUALITY_FACTOR, mediaType.parameters.get(PARAM_QUALITY_FACTOR));, +		return new MediaType(this, params);, +	}, +, +	/**, +	 * Return a replica of this instance with its quality value removed., +	 * @return the same instance if the media type doesn't contain a quality value, or a new one otherwise, +	 */, +	public MediaType removeQualityValue() {, +		if (!this.parameters.containsKey(PARAM_QUALITY_FACTOR)) {, +			return this;, +		}, +		Map<String, String> params = new LinkedHashMap<String, String>(this.parameters);, +		params.remove(PARAM_QUALITY_FACTOR);, +		return new MediaType(this, params);, +	}, +, +	/**, +	/**, +	 * Sorts the given list of {@code MediaType} objects by specificity as the, +	 * primary criteria and quality value the secondary., +	 * @see MediaType#sortBySpecificity(List), +	 * @see MediaType#sortByQualityValue(List), +	 */, +	public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {, +		Assert.notNull(mediaTypes, "'mediaTypes' must not be null");, +		if (mediaTypes.size() > 1) {, +			Comparator<?>[] comparators = new Comparator[2];, +			comparators[0] = MediaType.SPECIFICITY_COMPARATOR;, +			comparators[1] = MediaType.QUALITY_VALUE_COMPARATOR;, +			Collections.sort(mediaTypes, new CompoundComparator<MediaType>(comparators));, +		}, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/MediaType.java, +import org.springframework.util.comparator.CompoundComparator;, + * @author Rossen Stoyanchev, +	 * Return a replica of this instance with the quality value of the given MediaType., +	 * @return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise, +	 */, +	public MediaType copyQualityValue(MediaType mediaType) {, +		if (!mediaType.parameters.containsKey(PARAM_QUALITY_FACTOR)) {, +			return this;, +		}, +		Map<String, String> params = new LinkedHashMap<String, String>(this.parameters);, +		params.put(PARAM_QUALITY_FACTOR, mediaType.parameters.get(PARAM_QUALITY_FACTOR));, +		return new MediaType(this, params);, +	}, +, +	/**, +	 * Return a replica of this instance with its quality value removed., +	 * @return the same instance if the media type doesn't contain a quality value, or a new one otherwise, +	 */, +	public MediaType removeQualityValue() {, +		if (!this.parameters.containsKey(PARAM_QUALITY_FACTOR)) {, +			return this;, +		}, +		Map<String, String> params = new LinkedHashMap<String, String>(this.parameters);, +		params.remove(PARAM_QUALITY_FACTOR);, +		return new MediaType(this, params);, +	}, +, +	/**, +	/**, +	 * Sorts the given list of {@code MediaType} objects by specificity as the, +	 * primary criteria and quality value the secondary., +	 * @see MediaType#sortBySpecificity(List), +	 * @see MediaType#sortByQualityValue(List), +	 */, +	public static void sortBySpecificityAndQuality(List<MediaType> mediaTypes) {, +		Assert.notNull(mediaTypes, "'mediaTypes' must not be null");, +		if (mediaTypes.size() > 1) {, +			Comparator<?>[] comparators = new Comparator[2];, +			comparators[0] = MediaType.SPECIFICITY_COMPARATOR;, +			comparators[1] = MediaType.QUALITY_VALUE_COMPARATOR;, +			Collections.sort(mediaTypes, new CompoundComparator<MediaType>(comparators));, +		}, +	}, +, +++ b/spring-web/src/test/java/org/springframework/http/MediaTypeTests.java, + * Copyright 2002-2012 the original author or authors., +++ b/spring-web/src/main/java/org/springframework/http/MediaType.java, +import org.springframework.util.comparator.CompoundComparator;, + * @author Rossen Stoyanchev, +	 * Return a replica of this instance with the quality value of the given MediaType., +	 * @return the same instance if the given MediaType doesn't have a quality value, or a new one otherwise, +	 */, +	public MediaType copyQualityValue(MediaType mediaType) {, +		if (!mediaType.parameters.containsKey(PARAM_QUALITY_FACTOR)) {]