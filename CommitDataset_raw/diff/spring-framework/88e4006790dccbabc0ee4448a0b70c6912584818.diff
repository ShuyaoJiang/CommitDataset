[+++ b/spring-core/src/main/java/org/springframework/core/convert/support/StringToLocaleConverter.java, +import org.springframework.lang.Nullable;, +	@Nullable, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/StringToLocaleConverter.java, +import org.springframework.lang.Nullable;, +	@Nullable, +++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, +			validateLocalePart(localeValue);, +			Locale resolved = Locale.forLanguageTag(localeValue);, +			return (resolved.getLanguage().length() > 0 ? resolved : null);, +			if (ch != ' ' && ch != '_' && ch != '-' && ch != '#' && !Character.isLetterOrDigit(ch)) {, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/StringToLocaleConverter.java, +import org.springframework.lang.Nullable;, +	@Nullable, +++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, +			validateLocalePart(localeValue);, +			Locale resolved = Locale.forLanguageTag(localeValue);, +			return (resolved.getLanguage().length() > 0 ? resolved : null);, +			if (ch != ' ' && ch != '_' && ch != '-' && ch != '#' && !Character.isLetterOrDigit(ch)) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/CookieLocaleResolver.java, + * Copyright 2002-2018 the original author or authors., +	private boolean languageTagCompliant = true;, +	 * <p>The default is {@code true}, as of 5.1. Switch this to {@code false}, +	 * for rendering Java's legacy locale specification format. For parsing,, +	 * this resolver leniently accepts the legacy {@link Locale#toString}, +	 * format as well as BCP 47 language tags in any case., +	 * @see #parseLocaleValue(String), +	 * @see #toLocaleValue(Locale), +					int separatorIndex = localePart.indexOf('/');, +					if (separatorIndex == -1) {, +						// Leniently accept older cookies separated by a space..., +						separatorIndex = localePart.indexOf(' ');, +					}, +					if (separatorIndex >= 0) {, +						localePart = value.substring(0, separatorIndex);, +						timeZonePart = value.substring(separatorIndex + 1);, +						String cookieDescription = "invalid locale cookie '" + cookieName +, +								"': [" + value + "] due to: " + ex.getMessage();, +								logger.debug("Ignoring " + cookieDescription);, +							throw new IllegalStateException("Encountered " + cookieDescription);, +					(locale != null ? toLocaleValue(locale) : "-") + (timeZone != null ? '/' + timeZone.getID() : ""));, +	 * <p>The default implementation calls {@link StringUtils#parseLocale(String)},, +	 * accepting the {@link Locale#toString} format as well as BCP 47 language tags., +	 * @param localeValue the locale value to parse, +	 * @see StringUtils#parseLocale(String), +	protected Locale parseLocaleValue(String localeValue) {, +		return StringUtils.parseLocale(localeValue);, +	 * @see #isLanguageTagCompliant(), +++ b/spring-core/src/main/java/org/springframework/core/convert/support/StringToLocaleConverter.java, +import org.springframework.lang.Nullable;, +	@Nullable, +++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, +			validateLocalePart(localeValue);, +			Locale resolved = Locale.forLanguageTag(localeValue);, +			return (resolved.getLanguage().length() > 0 ? resolved : null);, +			if (ch != ' ' && ch != '_' && ch != '-' && ch != '#' && !Character.isLetterOrDigit(ch)) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/CookieLocaleResolver.java, + * Copyright 2002-2018 the original author or authors., +	private boolean languageTagCompliant = true;, +	 * <p>The default is {@code true}, as of 5.1. Switch this to {@code false}, +	 * for rendering Java's legacy locale specification format. For parsing,, +	 * this resolver leniently accepts the legacy {@link Locale#toString}, +	 * format as well as BCP 47 language tags in any case., +	 * @see #parseLocaleValue(String), +	 * @see #toLocaleValue(Locale), +					int separatorIndex = localePart.indexOf('/');, +					if (separatorIndex == -1) {, +						// Leniently accept older cookies separated by a space..., +						separatorIndex = localePart.indexOf(' ');, +					}, +					if (separatorIndex >= 0) {, +						localePart = value.substring(0, separatorIndex);, +						timeZonePart = value.substring(separatorIndex + 1);, +						String cookieDescription = "invalid locale cookie '" + cookieName +, +								"': [" + value + "] due to: " + ex.getMessage();, +								logger.debug("Ignoring " + cookieDescription);, +							throw new IllegalStateException("Encountered " + cookieDescription);, +					(locale != null ? toLocaleValue(locale) : "-") + (timeZone != null ? '/' + timeZone.getID() : ""));, +	 * <p>The default implementation calls {@link StringUtils#parseLocale(String)},, +	 * accepting the {@link Locale#toString} format as well as BCP 47 language tags., +	 * @param localeValue the locale value to parse, +	 * @see StringUtils#parseLocale(String), +	protected Locale parseLocaleValue(String localeValue) {, +		return StringUtils.parseLocale(localeValue);, +	 * @see #isLanguageTagCompliant(), +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/LocaleChangeInterceptor.java, + * Copyright 2002-2018 the original author or authors., +	 * <p><b>NOTE: As of 5.1, this resolver leniently accepts the legacy, +	 * {@link Locale#toString} format as well as BCP 47 language tags.</b>, +	 * @deprecated as of 5.1 since it only accepts {@code true} now, +	@Deprecated, +		if (!languageTagCompliant) {, +			throw new IllegalArgumentException("LocaleChangeInterceptor always accepts BCP 47 language tags");, +		}, +	 * @deprecated as of 5.1 since it always returns {@code true} now, +	@Deprecated, +		return true;, +	 * <p>The default implementation calls {@link StringUtils#parseLocale(String)},, +	 * accepting the {@link Locale#toString} format as well as BCP 47 language tags., +	 * @param localeValue the locale value to parse]