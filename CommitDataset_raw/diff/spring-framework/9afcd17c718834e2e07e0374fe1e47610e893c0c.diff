[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +			AnnotationAttributes attributes = AnnotatedElementUtils.getAnnotationAttributes(ao, type);, +			if (attributes != null) {, +				return attributes;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +			AnnotationAttributes attributes = AnnotatedElementUtils.getAnnotationAttributes(ao, type);, +			if (attributes != null) {, +				return attributes;, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +	 * <p>This method delegates to {@link #getAnnotationAttributes(AnnotatedElement, String)}., +	 *, +	 * @param element the annotated element; never {@code null}, +	 * @param annotationType the annotation type to find; never {@code null}, +	 * @return the merged {@code AnnotationAttributes}, or {@code null} if not found, +	 * @see #getAnnotationAttributes(AnnotatedElement, String, boolean, boolean), +	 * @see #getAllAnnotationAttributes(AnnotatedElement, String), +	 * @see #findAnnotationAttributes(AnnotatedElement, String, boolean, boolean), +	 * @see #findAnnotation(AnnotatedElement, Class), +	 */, +	public static AnnotationAttributes getAnnotationAttributes(AnnotatedElement element,, +			Class<? extends Annotation> annotationType) {, +		Assert.notNull(annotationType, "annotationType must not be null");, +		return getAnnotationAttributes(element, annotationType.getName());, +	}, +, +	/**, +	 * Get the first annotation of the specified {@code annotationType} within, +	 * the annotation hierarchy <em>above</em> the supplied {@code element} and, +	 * merge that annotation's attributes with <em>matching</em> attributes from, +	 * annotations in lower levels of the annotation hierarchy., +	 *, +	 * <p>{@link AliasFor @AliasFor} semantics are fully supported, both, +	 * within a single annotation and within the annotation hierarchy., +	 *, +	 * <p>This method delegates to {@link #findAnnotation(AnnotatedElement, String)}., +	 * @see #getAnnotationAttributes(AnnotatedElement, Class), +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +			AnnotationAttributes attributes = AnnotatedElementUtils.getAnnotationAttributes(ao, type);, +			if (attributes != null) {, +				return attributes;, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +	 * <p>This method delegates to {@link #getAnnotationAttributes(AnnotatedElement, String)}., +	 *, +	 * @param element the annotated element; never {@code null}, +	 * @param annotationType the annotation type to find; never {@code null}, +	 * @return the merged {@code AnnotationAttributes}, or {@code null} if not found, +	 * @see #getAnnotationAttributes(AnnotatedElement, String, boolean, boolean), +	 * @see #getAllAnnotationAttributes(AnnotatedElement, String), +	 * @see #findAnnotationAttributes(AnnotatedElement, String, boolean, boolean), +	 * @see #findAnnotation(AnnotatedElement, Class), +	 */, +	public static AnnotationAttributes getAnnotationAttributes(AnnotatedElement element,, +			Class<? extends Annotation> annotationType) {, +		Assert.notNull(annotationType, "annotationType must not be null");, +		return getAnnotationAttributes(element, annotationType.getName());, +	}, +, +	/**, +	 * Get the first annotation of the specified {@code annotationType} within, +	 * the annotation hierarchy <em>above</em> the supplied {@code element} and, +	 * merge that annotation's attributes with <em>matching</em> attributes from, +	 * annotations in lower levels of the annotation hierarchy., +	 *, +	 * <p>{@link AliasFor @AliasFor} semantics are fully supported, both, +	 * within a single annotation and within the annotation hierarchy., +	 *, +	 * <p>This method delegates to {@link #findAnnotation(AnnotatedElement, String)}., +	 * @see #getAnnotationAttributes(AnnotatedElement, Class), +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java, +		getAnnotationAttributes(element, ContextConfig.class);, +		getAnnotationAttributes(element, ContextConfig.class);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +			AnnotationAttributes attributes = AnnotatedElementUtils.getAnnotationAttributes(ao, type);, +			if (attributes != null) {, +				return attributes;, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +	 * <p>This method delegates to {@link #getAnnotationAttributes(AnnotatedElement, String)}., +	 *, +	 * @param element the annotated element; never {@code null}, +	 * @param annotationType the annotation type to find; never {@code null}, +	 * @return the merged {@code AnnotationAttributes}, or {@code null} if not found, +	 * @see #getAnnotationAttributes(AnnotatedElement, String, boolean, boolean), +	 * @see #getAllAnnotationAttributes(AnnotatedElement, String), +	 * @see #findAnnotationAttributes(AnnotatedElement, String, boolean, boolean), +	 * @see #findAnnotation(AnnotatedElement, Class), +	 */, +	public static AnnotationAttributes getAnnotationAttributes(AnnotatedElement element,, +			Class<? extends Annotation> annotationType) {, +		Assert.notNull(annotationType, "annotationType must not be null");, +		return getAnnotationAttributes(element, annotationType.getName());, +	}, +, +	/**, +	 * Get the first annotation of the specified {@code annotationType} within, +	 * the annotation hierarchy <em>above</em> the supplied {@code element} and, +	 * merge that annotation's attributes with <em>matching</em> attributes from, +	 * annotations in lower levels of the annotation hierarchy., +	 *, +	 * <p>{@link AliasFor @AliasFor} semantics are fully supported, both, +	 * within a single annotation and within the annotation hierarchy.]