[+++ b/spring-core/src/main/java/org/springframework/core/CollectionFactory.java, + * Copyright 2002-2014 the original author or authors., +import java.util.EnumMap;, +import java.util.EnumSet;, +import org.springframework.util.Assert;, +		approximableCollectionTypes.add(EnumSet.class);, +		approximableMapTypes.add(EnumMap.class);, +	 * @param capacity the initial capacity, +	 * @see java.util.TreeSet, +	 * @see java.util.EnumSet, +	 * @see java.util.ArrayList, +	 * @see java.util.LinkedList, +	public static <E> Collection<E> createApproximateCollection(Object collection, int capacity) {, +			return new ArrayList<E>(capacity);, +		}, +		else if (collection instanceof EnumSet) {, +			return EnumSet.copyOf((Collection) collection);, +			return new LinkedHashSet<E>(capacity);, +	 * <p>Delegates to {@link #createCollection(Class, Class, int)} with a, +	 * {@code null} element type., +	 * @param collectionClass the desired type of the target Collection, +	 * @param capacity the initial capacity, +	 */, +	public static <E> Collection<E> createCollection(Class<?> collectionClass, int capacity) {, +		return createCollection(collectionClass, null, capacity);, +	}, +, +	/**, +	 * Create the most appropriate collection for the given collection type., +	 * @param collectionClass the desired type of the target Collection, +	 * @param elementType the collection's element type, or {@code null} if not known, +	 * @param capacity the initial capacity, +	 * @return the new Collection instance, +	 * @see java.util.TreeSet, +	 * @see java.util.EnumSet, +	 * @see java.util.ArrayList, +	public static <E> Collection<E> createCollection(Class<?> collectionClass, Class<?> elementType, int capacity) {, +		if (collectionClass.isInterface()) {, +			if (Set.class.equals(collectionClass) || Collection.class.equals(collectionClass)) {, +				return new LinkedHashSet<E>(capacity);, +			else if (List.class.equals(collectionClass)) {, +				return new ArrayList<E>(capacity);, +			}, +			else if (SortedSet.class.equals(collectionClass) || NavigableSet.class.equals(collectionClass)) {, +			else {, +				throw new IllegalArgumentException("Unsupported Collection interface: " + collectionClass.getName());, +			}, +		}, +		else if (EnumSet.class.equals(collectionClass)) {, +			Assert.notNull(elementType, "Cannot create EnumSet for unknown element type");, +			return EnumSet.noneOf((Class) elementType);, +			if (!Collection.class.isAssignableFrom(collectionClass)) {, +				throw new IllegalArgumentException("Unsupported Collection type: " + collectionClass.getName());, +				return (Collection<E>) collectionClass.newInstance();, +				throw new IllegalArgumentException(, +						"Could not instantiate Collection type: " + collectionClass.getName(), ex);, +	 * @param capacity the initial capacity, +	public static <K, V> Map<K, V> createApproximateMap(Object map, int capacity) {, +		if (map instanceof EnumMap) {, +			return new EnumMap((Map) map);, +		else if (map instanceof SortedMap) {, +			return new TreeMap<K, V>(((SortedMap<K, V>) map).comparator());, +		}, +		else {, +			return new LinkedHashMap<K, V>(capacity);, +		}, +	}, +, +	/**, +	 * Create the most approximate map for the given map., +	 * <p>Delegates to {@link #createMap(Class, Class, int)} with a, +	 * {@code null} key type., +	 * @param mapClass the desired type of the target Map, +	 * @param capacity the initial capacity, +	 * @return the new Map instance, +	 */, +	public static <K, V> Map<K, V> createMap(Class<?> mapClass, int capacity) {, +		return createMap(mapClass, null, capacity);, +	}, +, +	/**, +	 * Create the most approximate map for the given map., +	 * @param mapClass the desired type of the target Map, +	 * @param keyType the map's key type, or {@code null} if not known, +	 * @param capacity the initial capacity, +	 * @return the new Map instance, +	 * @see java.util.LinkedHashMap, +	 * @see java.util.TreeMap, +	 * @see java.util.EnumMap, +	 * @see org.springframework.util.LinkedMultiValueMap, +	 */, +	@SuppressWarnings({"unchecked", "rawtypes"}), +	public static <K, V> Map<K, V> createMap(Class<?> mapClass, Class<?> keyType, int capacity) {, +		if (mapClass.isInterface()) {, +			if (Map.class.equals(mapClass)) {, +				return new LinkedHashMap<K, V>(capacity);, +			}, +			else if (SortedMap.class.equals(mapClass) || NavigableMap.class.equals(mapClass)) {, +			else if (MultiValueMap.class.equals(mapClass)) {, +				throw new IllegalArgumentException("Unsupported Map interface: " + mapClass.getName());]