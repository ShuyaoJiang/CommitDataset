[+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/config/WebReactiveConfigurationTests.java, +import javax.xml.bind.annotation.XmlRootElement;, +, +		assertHasConverter(converters, TestBean.class, MediaType.APPLICATION_XML);, +		assertHasConverter(converters, TestBean.class, MediaType.APPLICATION_JSON);, +		assertHasConverter(converters, TestBean.class, MediaType.APPLICATION_XML);, +		assertHasConverter(converters, TestBean.class, MediaType.APPLICATION_XML);, +		assertHasConverter(converters, TestBean.class, MediaType.APPLICATION_JSON);, +, +	@XmlRootElement, +	static class TestBean {, +	}, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/config/WebReactiveConfigurationTests.java, +import javax.xml.bind.annotation.XmlRootElement;, +, +		assertHasConverter(converters, TestBean.class, MediaType.APPLICATION_XML);, +		assertHasConverter(converters, TestBean.class, MediaType.APPLICATION_JSON);, +		assertHasConverter(converters, TestBean.class, MediaType.APPLICATION_XML);, +		assertHasConverter(converters, TestBean.class, MediaType.APPLICATION_XML);, +		assertHasConverter(converters, TestBean.class, MediaType.APPLICATION_JSON);, +, +	@XmlRootElement, +	static class TestBean {, +	}, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestBodyArgumentResolverTests.java, +import javax.xml.bind.annotation.XmlRootElement;, +, +		assertTrue(resolver.supportsParameter(parameter("monoTestBean")));, +		Mono<Object> result = this.resolver.resolveArgument(parameter("monoTestBean"), this.model, this.exchange);, +	public void monoTestBean() throws Exception {, +		Mono<TestBean> mono = (Mono<TestBean>) resolve("monoTestBean", Mono.class, body);, +		assertEquals(new TestBean("f1", "b1"), mono.block());, +	public void fluxTestBean() throws Exception {, +		Flux<TestBean> flux = (Flux<TestBean>) resolve("fluxTestBean", Flux.class, body);, +		assertEquals(Arrays.asList(new TestBean("f1", "b1"), new TestBean("f2", "b2")), flux.collectList().block());, +	public void singleTestBean() throws Exception {, +		Single<TestBean> single = (Single<TestBean>) resolve("singleTestBean", Single.class, body);, +		assertEquals(new TestBean("f1", "b1"), single.toBlocking().value());, +	public void observableTestBean() throws Exception {, +		Observable<?> observable = (Observable<?>) resolve("observableTestBean", Observable.class, body);, +		assertEquals(Arrays.asList(new TestBean("f1", "b1"), new TestBean("f2", "b2")),, +	public void futureTestBean() throws Exception {, +		assertEquals(new TestBean("f1", "b1"), resolve("futureTestBean", CompletableFuture.class, body).get());, +	public void testBean() throws Exception {, +		assertEquals(new TestBean("f1", "b1"), resolve("testBean", TestBean.class, body));, +		assertEquals(Arrays.asList(new TestBean("f1", "b1"), new TestBean("f2", "b2")),, +		assertArrayEquals(new TestBean[] {new TestBean("f1", "b1"), new TestBean("f2", "b2")},, +				resolve("array", TestBean[].class, body));, +			@RequestBody Mono<TestBean> monoTestBean,, +			@RequestBody Flux<TestBean> fluxTestBean,, +			@RequestBody Single<TestBean> singleTestBean,, +			@RequestBody Observable<TestBean> observableTestBean,, +			@RequestBody CompletableFuture<TestBean> futureTestBean,, +			@RequestBody TestBean testBean,, +			@RequestBody List<TestBean> list,, +			@RequestBody Set<TestBean> set,, +			@RequestBody TestBean[] array,, +			TestBean paramWithoutAnnotation) {, +, +	@XmlRootElement, +	static class TestBean {, +, +		private String foo;, +, +		private String bar;, +, +		public TestBean() {, +		}, +, +		public TestBean(String foo, String bar) {, +			this.foo = foo;, +			this.bar = bar;, +		}, +, +		public String getFoo() {, +			return this.foo;, +		}, +, +		public void setFoo(String foo) {, +			this.foo = foo;, +		}, +, +		public String getBar() {, +			return this.bar;, +		}, +, +		public void setBar(String bar) {, +			this.bar = bar;, +		}, +, +		@Override, +		public boolean equals(Object o) {, +			if (this == o) {, +				return true;, +			}, +			if (o instanceof TestBean) {, +				TestBean other = (TestBean) o;, +				return this.foo.equals(other.foo) && this.bar.equals(other.bar);, +			}, +			return false;]