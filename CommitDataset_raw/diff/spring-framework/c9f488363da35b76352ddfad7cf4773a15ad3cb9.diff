[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java, +						throw new IllegalStateException("Cannot handle (" + (int) ch + ") '" + ch + "'");, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java, +						throw new IllegalStateException("Cannot handle (" + (int) ch + ") '" + ch + "'");, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +		Assert.notNull(headers, "HttpHeaders must not be null");, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java, +						throw new IllegalStateException("Cannot handle (" + (int) ch + ") '" + ch + "'");, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +		Assert.notNull(headers, "HttpHeaders must not be null");, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, +	 * @param url the url (as a URI instance), +	 * @param url the url (as a URI instance), +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java, +						throw new IllegalStateException("Cannot handle (" + (int) ch + ") '" + ch + "'");, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +		Assert.notNull(headers, "HttpHeaders must not be null");, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, +	 * @param url the url (as a URI instance), +	 * @param url the url (as a URI instance), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientRequestBuilder.java, +	private HttpMethod method;, +, +	private URI url;, +, +	private BodyInserter<?, ? super ClientHttpRequest> body = BodyInserters.empty();, +		Assert.notNull(method, "HttpMethod must not be null");, +		Assert.notNull(url, "URI must not be null");, +		this.method = method;, +		this.url = url;, +		this.method = other.method();, +		this.url = other.url();, +		this.body = BodyInserters.fromPublisher(publisher, elementClass);, +		this.body = BodyInserters.fromPublisher(publisher, typeReference);, +		this.body = inserter;, +		return new BodyInserterRequest(this.method, this.url, this.headers, this.cookies, this.body, this.attributes);, +		private final BodyInserter<?, ? super ClientHttpRequest> body;, +				MultiValueMap<String, String> cookies, BodyInserter<?, ? super ClientHttpRequest> body,, +			this.body = body;, +			return this.body;, +			return this.body.insert(request, new BodyInserter.Context() {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java, +						throw new IllegalStateException("Cannot handle (" + (int) ch + ") '" + ch + "'");, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +		Assert.notNull(headers, "HttpHeaders must not be null");, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, +	 * @param url the url (as a URI instance), +	 * @param url the url (as a URI instance), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientRequestBuilder.java, +	private HttpMethod method;, +, +	private URI url;, +, +	private BodyInserter<?, ? super ClientHttpRequest> body = BodyInserters.empty();, +		Assert.notNull(method, "HttpMethod must not be null");, +		Assert.notNull(url, "URI must not be null");, +		this.method = method;, +		this.url = url;, +		this.method = other.method();, +		this.url = other.url();, +		this.body = BodyInserters.fromPublisher(publisher, elementClass);, +		this.body = BodyInserters.fromPublisher(publisher, typeReference);, +		this.body = inserter;, +		return new BodyInserterRequest(this.method, this.url, this.headers, this.cookies, this.body, this.attributes);, +		private final BodyInserter<?, ? super ClientHttpRequest> body;, +				MultiValueMap<String, String> cookies, BodyInserter<?, ? super ClientHttpRequest> body,, +			this.body = body;, +			return this.body;, +			return this.body.insert(request, new BodyInserter.Context() {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientResponseBuilder.java, +	private ExchangeStrategies strategies;, +, +	private HttpStatus statusCode = HttpStatus.OK;, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java, +						throw new IllegalStateException("Cannot handle (" + (int) ch + ") '" + ch + "'");, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +		Assert.notNull(headers, "HttpHeaders must not be null");, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, +	 * @param url the url (as a URI instance), +	 * @param url the url (as a URI instance), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientRequestBuilder.java, +	private HttpMethod method;, +, +	private URI url;, +, +	private BodyInserter<?, ? super ClientHttpRequest> body = BodyInserters.empty();, +		Assert.notNull(method, "HttpMethod must not be null");, +		Assert.notNull(url, "URI must not be null");, +		this.method = method;, +		this.url = url;, +		this.method = other.method();, +		this.url = other.url();, +		this.body = BodyInserters.fromPublisher(publisher, elementClass);, +		this.body = BodyInserters.fromPublisher(publisher, typeReference);, +		this.body = inserter;, +		return new BodyInserterRequest(this.method, this.url, this.headers, this.cookies, this.body, this.attributes);, +		private final BodyInserter<?, ? super ClientHttpRequest> body;, +				MultiValueMap<String, String> cookies, BodyInserter<?, ? super ClientHttpRequest> body,, +			this.body = body;]