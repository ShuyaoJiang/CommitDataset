[+++ b/src/asciidoc/index.adoc, +==== Interceptors, +==== Content Negotiation, +==== View Controllers, +[[mvc-config-view-resolvers]], +==== View Resolvers, +The MVC config simplifies the registration of view resolvers., +The following is a Java config example that configures content negotiation view, +resolution using FreeMarker HTML templates and Jackson as a default `View` for, +JSON rendering:, +			registry.enableContentNegotiation(new MappingJackson2JsonView());, +And the same in XML:, +		<mvc:content-negotiation>, +Note however that FreeMarker, Velocity, Tiles, and Groovy Markup also require, +configuration of the underlying view technology., +, +The MVC namespace provides dedicated elements. For example with FreeMarker:, +, +[source,xml,indent=0], +[subs="verbatim,quotes"], +----, +, +	<mvc:view-resolvers>, +		<mvc:content-negotiation>, +			<mvc:default-views>, +				<bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" />, +			</mvc:default-views>, +		</mvc:content-negotiation>, +		<mvc:freemarker cache="false" />, +	</mvc:view-resolvers>, +, +	<mvc:freemarker-configurer>, +		<mvc:template-loader-path location="/freemarker" />, +	</mvc:freemarker-configurer>, +, +----, +, +In Java config simply add the respective "Configurer" bean:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Configuration, +	@EnableWebMvc, +	public class WebConfig extends WebMvcConfigurerAdapter {, +, +		@Override, +		public void configureViewResolvers(ViewResolverRegistry registry) {, +			registry.enableContentNegotiation(new MappingJackson2JsonView());, +			registry.freeMarker().cache(false);, +		}, +, +		@Bean, +		public FreeMarkerConfigurer freeMarkerConfigurer() {, +			FreeMarkerConfigurer configurer = new FreeMarkerConfigurer();, +			configurer.setTemplateLoaderPath("/WEB-INF/");, +			return configurer;, +		}, +, +	}, +----, +, +, +==== Serving of Resources, +==== Falling Back On the "Default" Servlet To Serve Resources, +This allows for mapping the `DispatcherServlet` to "/" (thus overriding the mapping, +[[mvc-config-path-matching]], +==== Path Matching, +This allows customizing various settings related to URL mapping and path matching., +For details on the individual options check out the, +{javadoc-baseurl}/org/springframework/web/servlet/config/annotation/PathMatchConfigurer.html[PathMatchConfigurer] API., +Below is an example in Java config:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Configuration, +	@EnableWebMvc, +	public class WebConfig extends WebMvcConfigurerAdapter {, +, +		@Override, +		public void configurePathMatch(PathMatchConfigurer configurer) {, +			configurer, +			    .setUseSuffixPatternMatch(true), +			    .setUseTrailingSlashMatch(false), +			    .setUseRegisteredSuffixPatternMatch(true), +			    .setPathMatcher(antPathMatcher()), +			    .setUrlPathHelper(urlPathHelper());, +		}, +, +		@Bean, +		public UrlPathHelper urlPathHelper() {, +		    //..., +		}, +, +		@Bean, +		public PathMatcher antPathMatcher() {, +		    //..., +		}, +]