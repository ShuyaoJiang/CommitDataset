[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpEQ.java, +		DescriptorComparison dc = DescriptorComparison.checkNumericCompatibility(, +				leftDesc, rightDesc, this.leftActualDescriptor, this.rightActualDescriptor);, +		DescriptorComparison dc = DescriptorComparison.checkNumericCompatibility(, +				leftDesc, rightDesc, this.leftActualDescriptor, this.rightActualDescriptor);, +			mv.visitInsn(DUP_X1);  // dup right on the top of the stack, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpEQ.java, +		DescriptorComparison dc = DescriptorComparison.checkNumericCompatibility(, +				leftDesc, rightDesc, this.leftActualDescriptor, this.rightActualDescriptor);, +		DescriptorComparison dc = DescriptorComparison.checkNumericCompatibility(, +				leftDesc, rightDesc, this.leftActualDescriptor, this.rightActualDescriptor);, +			mv.visitInsn(DUP_X1);  // dup right on the top of the stack, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpNE.java, + * Copyright 2002-2016 the original author or authors., +, +		this.leftActualDescriptor = CodeFlow.toDescriptorFromObject(left);, +		this.rightActualDescriptor = CodeFlow.toDescriptorFromObject(right);, +		DescriptorComparison dc =  DescriptorComparison.checkNumericCompatibility(, +				leftDesc, rightDesc, this.leftActualDescriptor, this.rightActualDescriptor);, +		DescriptorComparison dc = DescriptorComparison.checkNumericCompatibility(, +				leftDesc, rightDesc, this.leftActualDescriptor, this.rightActualDescriptor);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpEQ.java, +		DescriptorComparison dc = DescriptorComparison.checkNumericCompatibility(, +				leftDesc, rightDesc, this.leftActualDescriptor, this.rightActualDescriptor);, +		DescriptorComparison dc = DescriptorComparison.checkNumericCompatibility(, +				leftDesc, rightDesc, this.leftActualDescriptor, this.rightActualDescriptor);, +			mv.visitInsn(DUP_X1);  // dup right on the top of the stack, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpNE.java, + * Copyright 2002-2016 the original author or authors., +, +		this.leftActualDescriptor = CodeFlow.toDescriptorFromObject(left);, +		this.rightActualDescriptor = CodeFlow.toDescriptorFromObject(right);, +		DescriptorComparison dc =  DescriptorComparison.checkNumericCompatibility(, +				leftDesc, rightDesc, this.leftActualDescriptor, this.rightActualDescriptor);, +		DescriptorComparison dc = DescriptorComparison.checkNumericCompatibility(, +				leftDesc, rightDesc, this.leftActualDescriptor, this.rightActualDescriptor);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Operator.java, + * Copyright 2002-2016 the original author or authors., +, +		DescriptorComparison dc = DescriptorComparison.checkNumericCompatibility(, +				leftDesc, rightDesc, this.leftActualDescriptor, this.rightActualDescriptor);, +		DescriptorComparison dc = DescriptorComparison.checkNumericCompatibility(, +				leftDesc, rightDesc, this.leftActualDescriptor, this.rightActualDescriptor);, +	 * A descriptor comparison encapsulates the result of comparing descriptor, +	 * for two operands and describes at what level they are compatible., +		 * Return an object that indicates whether the input descriptors are compatible., +		 * <p>A declared descriptor is what could statically be determined (e.g. from looking, +		 * at the return value of a property accessor method) whilst an actual descriptor, +		 * is the type of an actual object that was returned, which may differ., +		 * <p>For generic types with unbound type variables, the declared descriptor, +		 * discovered may be 'Object' but from the actual descriptor it is possible to, +		 * observe that the objects are really numeric values (e.g. ints).]