[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +			annotation = AnnotationUtils.synthesizeAnnotation(annotation, element);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +			annotation = AnnotationUtils.synthesizeAnnotation(annotation, element);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +			return synthesizeAnnotation(annotatedElement.getAnnotation(annotationType), annotatedElement);, +			A annotation = annotatedElement.getAnnotation(annotationType);, +			if (annotation == null) {, +					annotation = metaAnn.annotationType().getAnnotation(annotationType);, +					if (annotation != null) {, +			return synthesizeAnnotation(annotation, annotatedElement);, +		return synthesizeAnnotation(findAnnotation(annotatedElement, annotationType, new HashSet<Annotation>()),, +			annotatedElement);, +		return synthesizeAnnotation(result, method);, +		return synthesizeAnnotation(result, clazz);, +			annotation = synthesizeAnnotation(annotation, annotatedElement);, +	 * {@linkplain #synthesizeAnnotation(Annotation, AnnotatedElement) synthesized}., +				return synthesizeAnnotation(annotation, annotatedElement);, +					synthesizedAnnotations[i] = synthesizeAnnotation(annotations[i], annotatedElement);, +	 * <em>Synthesize</em> the supplied {@code annotation} by wrapping it in, +	 * a dynamic proxy that transparently enforces <em>attribute alias</em>, +	 * semantics for annotation attributes that are annotated with, +	 * {@link AliasFor @AliasFor}., +	 * @return the synthesized annotation, if the supplied annotation is, +	 * <em>synthesizable</em>; {@code null} if the supplied annotation is, +	 * {@code null}; otherwise, the supplied annotation unmodified, +	 * @throws AnnotationConfigurationException if invalid configuration of, +	 * {@code @AliasFor} is detected, +	 * @see #synthesizeAnnotation(Annotation, AnnotatedElement), +	static <A extends Annotation> A synthesizeAnnotation(A annotation) {, +		return synthesizeAnnotation(annotation, null);, +	 * <em>Synthesize</em> the supplied {@code annotation} by wrapping it in, +	 * a dynamic proxy that transparently enforces <em>attribute alias</em>, +	 * semantics for annotation attributes that are annotated with, +	 * {@link AliasFor @AliasFor}., +	 * @param annotatedElement the element that is annotated with the supplied, +	 * annotation; may be {@code null} if unknown, +	 * @return the synthesized annotation, if the supplied annotation is, +	 * <em>synthesizable</em>; {@code null} if the supplied annotation is, +	 * {@code null}; otherwise, the supplied annotation unmodified, +	 * @throws AnnotationConfigurationException if invalid configuration of, +	 * {@code @AliasFor} is detected, +	public static <A extends Annotation> A synthesizeAnnotation(A annotation, AnnotatedElement annotatedElement) {, +							this.result.add(synthesizeAnnotation((A) ann, element));, +					synthesizedAnnotations.add(synthesizeAnnotation(anno, element));, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +			annotation = AnnotationUtils.synthesizeAnnotation(annotation, element);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +			return synthesizeAnnotation(annotatedElement.getAnnotation(annotationType), annotatedElement);, +			A annotation = annotatedElement.getAnnotation(annotationType);, +			if (annotation == null) {, +					annotation = metaAnn.annotationType().getAnnotation(annotationType);, +					if (annotation != null) {, +			return synthesizeAnnotation(annotation, annotatedElement);, +		return synthesizeAnnotation(findAnnotation(annotatedElement, annotationType, new HashSet<Annotation>()),, +			annotatedElement);, +		return synthesizeAnnotation(result, method);, +		return synthesizeAnnotation(result, clazz);, +			annotation = synthesizeAnnotation(annotation, annotatedElement);, +	 * {@linkplain #synthesizeAnnotation(Annotation, AnnotatedElement) synthesized}., +				return synthesizeAnnotation(annotation, annotatedElement);, +					synthesizedAnnotations[i] = synthesizeAnnotation(annotations[i], annotatedElement);, +	 * <em>Synthesize</em> the supplied {@code annotation} by wrapping it in, +	 * a dynamic proxy that transparently enforces <em>attribute alias</em>, +	 * semantics for annotation attributes that are annotated with, +	 * {@link AliasFor @AliasFor}., +	 * @return the synthesized annotation, if the supplied annotation is, +	 * <em>synthesizable</em>; {@code null} if the supplied annotation is, +	 * {@code null}; otherwise, the supplied annotation unmodified, +	 * @throws AnnotationConfigurationException if invalid configuration of, +	 * {@code @AliasFor} is detected, +	 * @see #synthesizeAnnotation(Annotation, AnnotatedElement), +	static <A extends Annotation> A synthesizeAnnotation(A annotation) {, +		return synthesizeAnnotation(annotation, null);, +	 * <em>Synthesize</em> the supplied {@code annotation} by wrapping it in, +	 * a dynamic proxy that transparently enforces <em>attribute alias</em>, +	 * semantics for annotation attributes that are annotated with, +	 * {@link AliasFor @AliasFor}., +	 * @param annotatedElement the element that is annotated with the supplied, +	 * annotation; may be {@code null} if unknown, +	 * @return the synthesized annotation, if the supplied annotation is, +	 * <em>synthesizable</em>; {@code null} if the supplied annotation is, +	 * {@code null}; otherwise, the supplied annotation unmodified, +	 * @throws AnnotationConfigurationException if invalid configuration of, +	 * {@code @AliasFor} is detected, +	public static <A extends Annotation> A synthesizeAnnotation(A annotation, AnnotatedElement annotatedElement) {, +							this.result.add(synthesizeAnnotation((A) ann, element));, +					synthesizedAnnotations.add(synthesizeAnnotation(anno, element));, +++ b/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedAnnotationInvocationHandler.java, + * {@link InvocationHandler} for an {@link Annotation} that Spring has, + * <em>synthesized</em> (i.e., wrapped in a dynamic proxy) with additional, + * functionality., + *, + * <p>{@code SynthesizedAnnotationInvocationHandler} transparently enforces, + * attribute alias semantics for annotation attributes that are annotated, + * with {@link AliasFor @AliasFor}. In addition, nested annotations and, + * arrays of nested annotations will be synthesized upon first access (i.e.,, + * <em>lazily</em>)., + * @see AliasFor, + * @see AnnotationUtils#synthesizeAnnotation(Annotation, AnnotatedElement)]