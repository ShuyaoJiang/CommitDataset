[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/JettyXhrTransport.java, +import org.springframework.context.Lifecycle;, +public class JettyXhrTransport extends AbstractXhrTransport implements XhrTransport, Lifecycle {, +	public void start() {, +		try {, +			if (!this.httpClient.isRunning()) {, +				this.httpClient.start();, +			}, +		}, +		catch (Exception e) {, +			throw new SockJsException("Failed to start " + this, e);, +		}, +	}, +, +	@Override, +	public void stop() {, +		try {, +			if (this.httpClient.isRunning()) {, +				this.httpClient.stop();, +			}, +		}, +		catch (Exception e) {, +			throw new SockJsException("Failed to stop " + this, e);, +		}, +	}, +, +	@Override, +	public boolean isRunning() {, +		return this.httpClient.isRunning();, +	}, +, +	@Override, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/JettyXhrTransport.java, +import org.springframework.context.Lifecycle;, +public class JettyXhrTransport extends AbstractXhrTransport implements XhrTransport, Lifecycle {, +	public void start() {, +		try {, +			if (!this.httpClient.isRunning()) {, +				this.httpClient.start();, +			}, +		}, +		catch (Exception e) {, +			throw new SockJsException("Failed to start " + this, e);, +		}, +	}, +, +	@Override, +	public void stop() {, +		try {, +			if (this.httpClient.isRunning()) {, +				this.httpClient.stop();, +			}, +		}, +		catch (Exception e) {, +			throw new SockJsException("Failed to stop " + this, e);, +		}, +	}, +, +	@Override, +	public boolean isRunning() {, +		return this.httpClient.isRunning();, +	}, +, +	@Override, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/SockJsClient.java, +import org.springframework.context.Lifecycle;, +public class SockJsClient extends AbstractWebSocketClient implements Lifecycle {, +	private volatile boolean running = false;, +, +	@Override, +	public void start() {, +		if (!isRunning()) {, +			for (Transport transport : this.transports) {, +				if (transport instanceof Lifecycle) {, +					if (!((Lifecycle) transport).isRunning()) {, +						((Lifecycle) transport).start();, +					}, +				}, +			}, +		}, +	}, +, +	@Override, +	public void stop() {, +		if (!isRunning()) {, +			for (Transport transport : this.transports) {, +				if (transport instanceof Lifecycle) {, +					if (((Lifecycle) transport).isRunning()) {, +						((Lifecycle) transport).stop();, +					}, +				}, +			}, +		}, +	}, +, +	@Override, +	public boolean isRunning() {, +		return this.running;, +	}, +]