[+++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/BeanMethod.java, +		Assert.notNull(anno, format("annotation %s not found on %s", annoType.getSimpleName(), this));, +		if (declaringClass == null), +			throw new IllegalStateException(, +					"declaringClass property is null. Call setDeclaringClass() before calling getLocation()");, +	class PrivateMethodError extends Problem {, +		PrivateMethodError() {, +			super(format("Method '%s' may not be private; increase the method's visibility to continue", getName()),, +	class FinalMethodError extends Problem {, +		FinalMethodError() {, +			super(format("Method '%s' may not be final; remove the final modifier to continue", getName()),, +	class InvalidScopedProxyDeclarationError extends Problem {, +		InvalidScopedProxyDeclarationError(BeanMethod method) {, +			super(format("Method %s contains an invalid annotation declaration: scoped proxies ", +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/BeanMethod.java, +		Assert.notNull(anno, format("annotation %s not found on %s", annoType.getSimpleName(), this));, +		if (declaringClass == null), +			throw new IllegalStateException(, +					"declaringClass property is null. Call setDeclaringClass() before calling getLocation()");, +	class PrivateMethodError extends Problem {, +		PrivateMethodError() {, +			super(format("Method '%s' may not be private; increase the method's visibility to continue", getName()),, +	class FinalMethodError extends Problem {, +		FinalMethodError() {, +			super(format("Method '%s' may not be final; remove the final modifier to continue", getName()),, +	class InvalidScopedProxyDeclarationError extends Problem {, +		InvalidScopedProxyDeclarationError(BeanMethod method) {, +			super(format("Method %s contains an invalid annotation declaration: scoped proxies ", +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/ModelClass.java, +		if(getName() == null), +			throw new IllegalStateException("'name' property is null. Call setName() before calling getLocation()");, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/BeanMethod.java, +		Assert.notNull(anno, format("annotation %s not found on %s", annoType.getSimpleName(), this));, +		if (declaringClass == null), +			throw new IllegalStateException(, +					"declaringClass property is null. Call setDeclaringClass() before calling getLocation()");, +	class PrivateMethodError extends Problem {, +		PrivateMethodError() {, +			super(format("Method '%s' may not be private; increase the method's visibility to continue", getName()),, +	class FinalMethodError extends Problem {, +		FinalMethodError() {, +			super(format("Method '%s' may not be final; remove the final modifier to continue", getName()),, +	class InvalidScopedProxyDeclarationError extends Problem {, +		InvalidScopedProxyDeclarationError(BeanMethod method) {, +			super(format("Method %s contains an invalid annotation declaration: scoped proxies ", +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/support/ModelClass.java, +		if(getName() == null), +			throw new IllegalStateException("'name' property is null. Call setName() before calling getLocation()");, +++ b/org.springframework.config.java/src/test/java/org/springframework/config/java/support/BeanMethodTests.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.config.java.support;, +, +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +import static org.springframework.config.java.StandardScopes.*;, +import static org.springframework.config.java.support.MutableAnnotationUtils.*;, +import static org.springframework.context.annotation.ScopedProxyMode.*;, +, +import java.lang.reflect.Modifier;, +, +import org.junit.Test;, +import org.springframework.beans.factory.parsing.BeanDefinitionParsingException;, +import org.springframework.beans.factory.parsing.FailFastProblemReporter;, +import org.springframework.beans.factory.parsing.Location;, +import org.springframework.beans.factory.parsing.ProblemReporter;, +import org.springframework.config.java.Bean;, +import org.springframework.context.annotation.Scope;, +import org.springframework.core.io.ClassPathResource;, +, +, +/**, + * Unit tests for {@link BeanMethod}., + *, + * @author Chris Beams, + */, +public class BeanMethodTests {, +	, +	private ProblemReporter problemReporter = new FailFastProblemReporter();, +	private String beanName = "foo";, +	private Bean beanAnno = createMutableAnnotation(Bean.class);, +	private ModelClass returnType = new ModelClass("FooType");, +	private ConfigurationClass declaringClass = new ConfigurationClass();, +	{ declaringClass.setName("test.Config"); }, +, +	@Test, +	public void testWellFormedMethod() {]