[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.java, +import java.util.Collection;, +import java.util.Optional;, + * @author Juergen Hoeller, +	 * @param parameter the method parameter descriptor (may be {@code null}), +	protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter,, +		return readWithMessageConverters(inputMessage, parameter, paramType);, +	 * @param parameter the method parameter descriptor (may be {@code null}), +	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter parameter,, +		Class<?> contextClass = (parameter != null ? parameter.getContainingClass() : null);, +			ResolvableType resolvableType = (parameter != null ?, +					ResolvableType.forMethodParameter(parameter) : ResolvableType.forType(targetType));, +							inputMessage = getAdvice().beforeBodyRead(inputMessage, parameter, targetType, converterType);, +							body = getAdvice().afterBodyRead(body, inputMessage, parameter, targetType, converterType);, +							body = getAdvice().handleEmptyBody(null, inputMessage, parameter, targetType, converterType);, +							inputMessage = getAdvice().beforeBodyRead(inputMessage, parameter, targetType, converterType);, +							body = getAdvice().afterBodyRead(body, inputMessage, parameter, targetType, converterType);, +							body = getAdvice().handleEmptyBody(null, inputMessage, parameter, targetType, converterType);, +	 * @param parameter the method parameter descriptor, +	 * @see #isBindExceptionRequired, +	protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {, +		Annotation[] annotations = parameter.getParameterAnnotations();, +	 * @param parameter the method parameter descriptor, +	protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {, +		int i = parameter.getParameterIndex();, +		Class<?>[] paramTypes = parameter.getMethod().getParameterTypes();, +	/**, +	 * Adapt the given argument against the method parameter, if necessary., +	 * @param arg the resolved argument, +	 * @param parameter the method parameter descriptor, +	 * @return the adapted argument, or the original resolved argument as-is, +	 * @since 4.3.5, +	 */, +	protected Object adaptArgumentIfNecessary(Object arg, MethodParameter parameter) {, +		if (parameter.getParameterType() == Optional.class) {, +			if (arg == null || (arg instanceof Collection && ((Collection) arg).isEmpty()) ||, +					(arg instanceof Object[] && ((Object[]) arg).length == 0)) {, +				return Optional.empty();, +			}, +			else {, +				return Optional.of(arg);, +			}, +		}, +		return arg;, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.java, +import java.util.Collection;, +import java.util.Optional;, + * @author Juergen Hoeller, +	 * @param parameter the method parameter descriptor (may be {@code null}), +	protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter,, +		return readWithMessageConverters(inputMessage, parameter, paramType);, +	 * @param parameter the method parameter descriptor (may be {@code null}), +	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage, MethodParameter parameter,, +		Class<?> contextClass = (parameter != null ? parameter.getContainingClass() : null);, +			ResolvableType resolvableType = (parameter != null ?, +					ResolvableType.forMethodParameter(parameter) : ResolvableType.forType(targetType));, +							inputMessage = getAdvice().beforeBodyRead(inputMessage, parameter, targetType, converterType);, +							body = getAdvice().afterBodyRead(body, inputMessage, parameter, targetType, converterType);, +							body = getAdvice().handleEmptyBody(null, inputMessage, parameter, targetType, converterType);, +							inputMessage = getAdvice().beforeBodyRead(inputMessage, parameter, targetType, converterType);, +							body = getAdvice().afterBodyRead(body, inputMessage, parameter, targetType, converterType);, +							body = getAdvice().handleEmptyBody(null, inputMessage, parameter, targetType, converterType);, +	 * @param parameter the method parameter descriptor, +	 * @see #isBindExceptionRequired, +	protected void validateIfApplicable(WebDataBinder binder, MethodParameter parameter) {, +		Annotation[] annotations = parameter.getParameterAnnotations();, +	 * @param parameter the method parameter descriptor, +	protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter parameter) {, +		int i = parameter.getParameterIndex();, +		Class<?>[] paramTypes = parameter.getMethod().getParameterTypes();, +	/**, +	 * Adapt the given argument against the method parameter, if necessary., +	 * @param arg the resolved argument, +	 * @param parameter the method parameter descriptor, +	 * @return the adapted argument, or the original resolved argument as-is, +	 * @since 4.3.5, +	 */, +	protected Object adaptArgumentIfNecessary(Object arg, MethodParameter parameter) {, +		if (parameter.getParameterType() == Optional.class) {, +			if (arg == null || (arg instanceof Collection && ((Collection) arg).isEmpty()) ||, +					(arg instanceof Object[] && ((Object[]) arg).length == 0)) {, +				return Optional.empty();, +			}, +			else {, +				return Optional.of(arg);, +			}, +		}, +		return arg;, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestPartMethodArgumentResolver.java, +		return adaptArgumentIfNecessary(arg, parameter);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.java, +import java.util.Collection;, +import java.util.Optional;, + * @author Juergen Hoeller, +	 * @param parameter the method parameter descriptor (may be {@code null}), +	protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter parameter,]