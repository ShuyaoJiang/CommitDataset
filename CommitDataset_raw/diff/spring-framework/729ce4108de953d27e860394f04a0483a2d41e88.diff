[+++ b/spring-aop/src/main/java/org/aopalliance/intercept/ConstructorInvocation.java, + * Description of an invocation to a constructor, given to an, +++ b/spring-aop/src/main/java/org/aopalliance/intercept/ConstructorInvocation.java, + * Description of an invocation to a constructor, given to an, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +		 * invoke the advice chain. Otherwise a DynamicAdvisedInterceptor is, +++ b/spring-aop/src/main/java/org/aopalliance/intercept/ConstructorInvocation.java, + * Description of an invocation to a constructor, given to an, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +		 * invoke the advice chain. Otherwise a DynamicAdvisedInterceptor is, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/CustomizableTraceInterceptor.java, +	 * Replaced with the fully-qualified name of the {@code Class}, +++ b/spring-aop/src/main/java/org/aopalliance/intercept/ConstructorInvocation.java, + * Description of an invocation to a constructor, given to an, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +		 * invoke the advice chain. Otherwise a DynamicAdvisedInterceptor is, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/CustomizableTraceInterceptor.java, +	 * Replaced with the fully-qualified name of the {@code Class}, +++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, +			recalculatePathsIfNecessary();, +			recalculatePathsIfNecessary();, +		private void recalculatePathsIfNecessary() {, +++ b/spring-aop/src/main/java/org/aopalliance/intercept/ConstructorInvocation.java, + * Description of an invocation to a constructor, given to an, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +		 * invoke the advice chain. Otherwise a DynamicAdvisedInterceptor is, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/CustomizableTraceInterceptor.java, +	 * Replaced with the fully-qualified name of the {@code Class}, +++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, +			recalculatePathsIfNecessary();, +			recalculatePathsIfNecessary();, +		private void recalculatePathsIfNecessary() {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/CssLinkResourceTransformer.java, +				.flatMap(outputResource -> {, +					String filename = outputResource.getFilename();, +						return Mono.just(outputResource);, +							.read(outputResource, bufferFactory, StreamUtils.BUFFER_SIZE);, +								return transformContent(cssContent, outputResource, transformerChain, exchange);, +++ b/spring-aop/src/main/java/org/aopalliance/intercept/ConstructorInvocation.java, + * Description of an invocation to a constructor, given to an, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +		 * invoke the advice chain. Otherwise a DynamicAdvisedInterceptor is, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/CustomizableTraceInterceptor.java, +	 * Replaced with the fully-qualified name of the {@code Class}, +++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, +			recalculatePathsIfNecessary();, +			recalculatePathsIfNecessary();, +		private void recalculatePathsIfNecessary() {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/CssLinkResourceTransformer.java, +				.flatMap(outputResource -> {, +					String filename = outputResource.getFilename();, +						return Mono.just(outputResource);, +							.read(outputResource, bufferFactory, StreamUtils.BUFFER_SIZE);, +								return transformContent(cssContent, outputResource, transformerChain, exchange);, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/CrossOriginAnnotationIntegrationTests.java, +		public void ambiguousHeader1a() {, +		public void ambiguousHeader1b() {, +		public String ambiguousProducesXml() {, +		public String ambiguousProducesJson() {, +++ b/spring-aop/src/main/java/org/aopalliance/intercept/ConstructorInvocation.java, + * Description of an invocation to a constructor, given to an, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +		 * invoke the advice chain. Otherwise a DynamicAdvisedInterceptor is, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/CustomizableTraceInterceptor.java, +	 * Replaced with the fully-qualified name of the {@code Class}, +++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, +			recalculatePathsIfNecessary();, +			recalculatePathsIfNecessary();, +		private void recalculatePathsIfNecessary() {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/CssLinkResourceTransformer.java, +				.flatMap(outputResource -> {, +					String filename = outputResource.getFilename();, +						return Mono.just(outputResource);, +							.read(outputResource, bufferFactory, StreamUtils.BUFFER_SIZE);, +								return transformContent(cssContent, outputResource, transformerChain, exchange);, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/CrossOriginAnnotationIntegrationTests.java, +		public void ambiguousHeader1a() {, +		public void ambiguousHeader1b() {, +		public String ambiguousProducesXml() {, +		public String ambiguousProducesJson() {, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/CrossOriginTests.java, +		public void ambiguousHeader1a() {, +		public void ambiguousHeader1b() {, +		public String ambiguousProducesXml() {, +		public String ambiguousProducesJson() {, +++ b/spring-aop/src/main/java/org/aopalliance/intercept/ConstructorInvocation.java, + * Description of an invocation to a constructor, given to an, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +		 * invoke the advice chain. Otherwise a DynamicAdvisedInterceptor is, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/CustomizableTraceInterceptor.java, +	 * Replaced with the fully-qualified name of the {@code Class}, +++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, +			recalculatePathsIfNecessary();, +			recalculatePathsIfNecessary();, +		private void recalculatePathsIfNecessary() {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/CssLinkResourceTransformer.java, +				.flatMap(outputResource -> {, +					String filename = outputResource.getFilename();, +						return Mono.just(outputResource);, +							.read(outputResource, bufferFactory, StreamUtils.BUFFER_SIZE);]