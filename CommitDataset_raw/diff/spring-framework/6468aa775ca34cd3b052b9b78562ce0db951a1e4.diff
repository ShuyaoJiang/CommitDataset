[+++ b/spring-web/src/main/java/org/springframework/http/client/OkHttpClientHttpRequest.java, +import java.net.URL;, +import org.springframework.util.StringUtils;, +		return this.method;, +		return this.uri;, +			byte[] content) throws IOException {, +		MediaType contentType = getContentType(headers);, +		RequestBody body = (content.length > 0 ? RequestBody.create(contentType, content) : null);, +, +		URL url = this.uri.toURL();, +		String methodName = this.method.name();, +		Request.Builder builder = new Request.Builder().url(url).method(methodName, body);, +		return new OkHttpListenableFuture(this.client.newCall(request));, +		String rawContentType = headers.getFirst("Content-Type");, +		return (StringUtils.hasText(rawContentType) ? MediaType.parse(rawContentType) : null);, +			Throwable cause = ex.getCause();, +			if (cause instanceof IOException) {, +				throw (IOException) cause;, +			throw new IOException(cause.getMessage(), cause);, +	private static class OkHttpListenableFuture extends SettableListenableFuture<ClientHttpResponse> {, +	    public OkHttpListenableFuture(Call call) {, +, +		        public void onResponse(Response response) {, +	        this.call.cancel();, +++ b/spring-web/src/main/java/org/springframework/http/client/OkHttpClientHttpRequest.java, +import java.net.URL;, +import org.springframework.util.StringUtils;, +		return this.method;, +		return this.uri;, +			byte[] content) throws IOException {, +		MediaType contentType = getContentType(headers);, +		RequestBody body = (content.length > 0 ? RequestBody.create(contentType, content) : null);, +, +		URL url = this.uri.toURL();, +		String methodName = this.method.name();, +		Request.Builder builder = new Request.Builder().url(url).method(methodName, body);, +		return new OkHttpListenableFuture(this.client.newCall(request));, +		String rawContentType = headers.getFirst("Content-Type");, +		return (StringUtils.hasText(rawContentType) ? MediaType.parse(rawContentType) : null);, +			Throwable cause = ex.getCause();, +			if (cause instanceof IOException) {, +				throw (IOException) cause;, +			throw new IOException(cause.getMessage(), cause);, +	private static class OkHttpListenableFuture extends SettableListenableFuture<ClientHttpResponse> {, +	    public OkHttpListenableFuture(Call call) {, +, +		        public void onResponse(Response response) {, +	        this.call.cancel();, +++ b/spring-web/src/main/java/org/springframework/http/client/OkHttpClientHttpRequestFactory.java, +		implements ClientHttpRequestFactory, AsyncClientHttpRequestFactory, DisposableBean {, +	 * Create a factory with a default {@link OkHttpClient} instance., +		this.client = new OkHttpClient();, +		this.defaultClient = true;, +	 * Create a factory with the given {@link OkHttpClient} instance., +	 * @param client the client to use, +	public OkHttpClientHttpRequestFactory(OkHttpClient client) {, +		Assert.notNull(client, "'client' must not be null");, +		this.client = client;, +		this.defaultClient = false;, +	 * Sets the underlying read timeout in milliseconds., +	 * A value of 0 specifies an infinite timeout., +	 * Sets the underlying write timeout in milliseconds., +	 * A value of 0 specifies an infinite timeout., +	 * Sets the underlying connect timeout in milliseconds., +	 * A value of 0 specifies an infinite timeout., +		if (this.defaultClient) {, +++ b/spring-web/src/main/java/org/springframework/http/client/OkHttpClientHttpRequest.java, +import java.net.URL;, +import org.springframework.util.StringUtils;, +		return this.method;, +		return this.uri;, +			byte[] content) throws IOException {, +		MediaType contentType = getContentType(headers);, +		RequestBody body = (content.length > 0 ? RequestBody.create(contentType, content) : null);, +, +		URL url = this.uri.toURL();, +		String methodName = this.method.name();, +		Request.Builder builder = new Request.Builder().url(url).method(methodName, body);, +		return new OkHttpListenableFuture(this.client.newCall(request));, +		String rawContentType = headers.getFirst("Content-Type");, +		return (StringUtils.hasText(rawContentType) ? MediaType.parse(rawContentType) : null);, +			Throwable cause = ex.getCause();, +			if (cause instanceof IOException) {, +				throw (IOException) cause;, +			throw new IOException(cause.getMessage(), cause);, +	private static class OkHttpListenableFuture extends SettableListenableFuture<ClientHttpResponse> {, +	    public OkHttpListenableFuture(Call call) {, +, +		        public void onResponse(Response response) {, +	        this.call.cancel();, +++ b/spring-web/src/main/java/org/springframework/http/client/OkHttpClientHttpRequestFactory.java, +		implements ClientHttpRequestFactory, AsyncClientHttpRequestFactory, DisposableBean {, +	 * Create a factory with a default {@link OkHttpClient} instance., +		this.client = new OkHttpClient();, +		this.defaultClient = true;, +	 * Create a factory with the given {@link OkHttpClient} instance., +	 * @param client the client to use, +	public OkHttpClientHttpRequestFactory(OkHttpClient client) {, +		Assert.notNull(client, "'client' must not be null");, +		this.client = client;]