[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/View.java, +	 * <p>Note: This attribute is not required to be supported by all View implementations., +	/**, +	 * Name of the {@link HttpServletRequest} attribute that contains a Map with path variables., +	 * The map consists of String-based URI template variable names as keys and their corresponding , +	 * Object-based values -- extracted from segments of the URL and type converted.  , +	 * , +	 * <p>Note: This attribute is not required to be supported by all View implementations., +	 */, +	String PATH_VARIABLES = View.class.getName() + ".pathVariables";, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/View.java, +	 * <p>Note: This attribute is not required to be supported by all View implementations., +	/**, +	 * Name of the {@link HttpServletRequest} attribute that contains a Map with path variables., +	 * The map consists of String-based URI template variable names as keys and their corresponding , +	 * Object-based values -- extracted from segments of the URL and type converted.  , +	 * , +	 * <p>Note: This attribute is not required to be supported by all View implementations., +	 */, +	String PATH_VARIABLES = View.class.getName() + ".pathVariables";, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/PathVariableMethodArgumentResolver.java, +import java.util.HashMap;, +import org.springframework.web.servlet.View;, +	@SuppressWarnings("unchecked"), +									   NativeWebRequest request) {, +		String key = View.PATH_VARIABLES;, +		int scope = RequestAttributes.SCOPE_REQUEST;, +		Map<String, Object> pathVars = (Map<String, Object>) request.getAttribute(key, scope);, +		if (pathVars == null) {, +			pathVars = new HashMap<String, Object>();, +			request.setAttribute(key, pathVars, scope);, +		pathVars.put(name, arg);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/View.java, +	 * <p>Note: This attribute is not required to be supported by all View implementations., +	/**, +	 * Name of the {@link HttpServletRequest} attribute that contains a Map with path variables., +	 * The map consists of String-based URI template variable names as keys and their corresponding , +	 * Object-based values -- extracted from segments of the URL and type converted.  , +	 * , +	 * <p>Note: This attribute is not required to be supported by all View implementations., +	 */, +	String PATH_VARIABLES = View.class.getName() + ".pathVariables";, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/PathVariableMethodArgumentResolver.java, +import java.util.HashMap;, +import org.springframework.web.servlet.View;, +	@SuppressWarnings("unchecked"), +									   NativeWebRequest request) {, +		String key = View.PATH_VARIABLES;, +		int scope = RequestAttributes.SCOPE_REQUEST;, +		Map<String, Object> pathVars = (Map<String, Object>) request.getAttribute(key, scope);, +		if (pathVars == null) {, +			pathVars = new HashMap<String, Object>();, +			request.setAttribute(key, pathVars, scope);, +		pathVars.put(name, arg);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/AbstractView.java, +	/** Whether or not the view should add path variables in the model */, +	private boolean exposePathVariables = true;, +	public Map<String, Object> getStaticAttributes() {, +	/**, +	 * Whether to add path variables in the model or not. , +	 * <p>Path variables are commonly bound to URI template variables through the {@code @PathVariable} , +	 * annotation. They're are effectively URI template variables with type conversion applied to , +	 * them to derive typed Object values. Such values are frequently needed in views for , +	 * constructing links to the same and other URLs. , +	 * <p>Path variables added to the model override static attributes (see {@link #setAttributes(Properties)}) , +	 * but not attributes already present in the model. , +	 * <p>By default this flag is set to {@code true}. Concrete view types can override this. , +	 * @param exposePathVariables {@code true} to expose path variables, and {@code false} otherwise. , +	 */, +	public void setExposePathVariables(boolean exposePathVariables) {, +		this.exposePathVariables = exposePathVariables;, +	}, +, +	/**, +	 * Returns the value of the flag indicating whether path variables should be added to the model or not., +	 */, +	public boolean isExposePathVariables() {, +		return exposePathVariables;, +	}, +		@SuppressWarnings("unchecked"), +		Map<String, Object> pathVars = this.exposePathVariables ?, +			(Map<String, Object>) request.getAttribute(View.PATH_VARIABLES) : null;, +, +		int size = this.staticAttributes.size();, +		size += (model != null) ? model.size() : 0;, +		size += (pathVars != null) ? pathVars.size() : 0;, +		Map<String, Object> mergedModel = new HashMap<String, Object>(size);, +		if (pathVars != null) {, +			mergedModel.putAll(pathVars);, +		}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/View.java, +	 * <p>Note: This attribute is not required to be supported by all View implementations., +	/**, +	 * Name of the {@link HttpServletRequest} attribute that contains a Map with path variables., +	 * The map consists of String-based URI template variable names as keys and their corresponding , +	 * Object-based values -- extracted from segments of the URL and type converted.  , +	 * , +	 * <p>Note: This attribute is not required to be supported by all View implementations., +	 */, +	String PATH_VARIABLES = View.class.getName() + ".pathVariables";]