[+++ b/spring-web/src/main/java/org/springframework/web/client/DefaultResponseErrorHandler.java, +, +		String statusText = response.getStatusText();, +		HttpHeaders headers = response.getHeaders();, +		byte[] body = getResponseBody(response);, +		Charset charset = getCharset(response);, +, +				handleClientError(statusCode, statusText, headers, body, charset);, +				handleServerError(statusCode, statusText, headers, body, charset);, +				throw new UnknownHttpStatusCodeException(statusCode.value(), statusText, headers, body, charset);, +	private void handleClientError(HttpStatus statusCode,, +			String statusText, HttpHeaders headers, byte[] body, @Nullable Charset charset) {, +, +				throw new HttpClientErrorException.BadRequest(statusText, headers, body, charset);, +				throw new HttpClientErrorException.Unauthorized(statusText, headers, body, charset);, +				throw new HttpClientErrorException.Forbidden(statusText, headers, body, charset);, +				throw new HttpClientErrorException.NotFound(statusText, headers, body, charset);, +				throw new HttpClientErrorException.MethodNotAllowed(statusText, headers, body, charset);, +				throw new HttpClientErrorException.NotAcceptable(statusText, headers, body, charset);, +				throw new HttpClientErrorException.Conflict(statusText, headers, body, charset);, +				throw new HttpClientErrorException.Gone(statusText, headers, body, charset);, +				throw new HttpClientErrorException.UnsupportedMediaType(statusText, headers, body, charset);, +				throw new HttpClientErrorException.TooManyRequests(statusText, headers, body, charset);, +				throw new HttpClientErrorException.UnprocessableEntity(statusText, headers, body, charset);, +				throw new HttpClientErrorException(statusCode, statusText, headers, body, charset);, +	private void handleServerError(HttpStatus statusCode,, +			String statusText, HttpHeaders headers, byte[] body, @Nullable Charset charset) {, +, +					throw new HttpServerErrorException.InternalServerError(statusText, headers, body, charset);, +				throw new HttpServerErrorException.NotImplemented(statusText, headers, body, charset);, +				throw new HttpServerErrorException.BadGateway(statusText, headers, body, charset);, +				throw new HttpServerErrorException.ServiceUnavailable(statusText, headers, body, charset);, +				throw new HttpServerErrorException.GatewayTimeout(statusText, headers, body, charset);, +				throw new HttpServerErrorException(statusCode, statusText, headers, body, charset);, +++ b/spring-web/src/main/java/org/springframework/web/client/DefaultResponseErrorHandler.java, +, +		String statusText = response.getStatusText();, +		HttpHeaders headers = response.getHeaders();, +		byte[] body = getResponseBody(response);, +		Charset charset = getCharset(response);, +, +				handleClientError(statusCode, statusText, headers, body, charset);, +				handleServerError(statusCode, statusText, headers, body, charset);, +				throw new UnknownHttpStatusCodeException(statusCode.value(), statusText, headers, body, charset);, +	private void handleClientError(HttpStatus statusCode,, +			String statusText, HttpHeaders headers, byte[] body, @Nullable Charset charset) {, +, +				throw new HttpClientErrorException.BadRequest(statusText, headers, body, charset);, +				throw new HttpClientErrorException.Unauthorized(statusText, headers, body, charset);, +				throw new HttpClientErrorException.Forbidden(statusText, headers, body, charset);, +				throw new HttpClientErrorException.NotFound(statusText, headers, body, charset);, +				throw new HttpClientErrorException.MethodNotAllowed(statusText, headers, body, charset);, +				throw new HttpClientErrorException.NotAcceptable(statusText, headers, body, charset);, +				throw new HttpClientErrorException.Conflict(statusText, headers, body, charset);, +				throw new HttpClientErrorException.Gone(statusText, headers, body, charset);, +				throw new HttpClientErrorException.UnsupportedMediaType(statusText, headers, body, charset);, +				throw new HttpClientErrorException.TooManyRequests(statusText, headers, body, charset);, +				throw new HttpClientErrorException.UnprocessableEntity(statusText, headers, body, charset);, +				throw new HttpClientErrorException(statusCode, statusText, headers, body, charset);, +	private void handleServerError(HttpStatus statusCode,, +			String statusText, HttpHeaders headers, byte[] body, @Nullable Charset charset) {, +, +					throw new HttpServerErrorException.InternalServerError(statusText, headers, body, charset);, +				throw new HttpServerErrorException.NotImplemented(statusText, headers, body, charset);, +				throw new HttpServerErrorException.BadGateway(statusText, headers, body, charset);, +				throw new HttpServerErrorException.ServiceUnavailable(statusText, headers, body, charset);, +				throw new HttpServerErrorException.GatewayTimeout(statusText, headers, body, charset);, +				throw new HttpServerErrorException(statusCode, statusText, headers, body, charset);, +++ b/spring-web/src/main/java/org/springframework/web/client/HttpClientErrorException.java, + * Copyright 2002-2018 the original author or authors., +	 * Constructor with a status code only., +	 * Constructor with a status code and status text., +	 * Constructor with a status code and status text, and content., +	public HttpClientErrorException(, +			HttpStatus statusCode, String statusText, @Nullable byte[] body, @Nullable Charset responseCharset) {, +		super(statusCode, statusText, body, responseCharset);, +	 * Constructor with a status code and status text, headers, and content., +			@Nullable HttpHeaders headers, @Nullable byte[] body, @Nullable Charset responseCharset) {, +		super(statusCode, statusText, headers, body, responseCharset);, +, +	// Sub-classes for specific HTTP status codes.., +, +, +	 * {@link HttpClientErrorException} for status HTTP 400 Bad Request., +	@SuppressWarnings("serial"), +		BadRequest(String statusText, HttpHeaders headers, byte[] body, @Nullable Charset charset) {, +			super(HttpStatus.BAD_REQUEST, statusText, headers, body, charset);, +		}, +	 * {@link HttpClientErrorException} for status HTTP 401 Unauthorized., +	@SuppressWarnings("serial"), +		Unauthorized(String statusText, HttpHeaders headers, byte[] body, @Nullable Charset charset) {, +			super(HttpStatus.UNAUTHORIZED, statusText, headers, body, charset);, +		}, +	 * {@link HttpClientErrorException} for status HTTP 403 Forbidden., +	@SuppressWarnings("serial"), +		Forbidden(String statusText, HttpHeaders headers, byte[] body, @Nullable Charset charset) {, +			super(HttpStatus.FORBIDDEN, statusText, headers, body, charset);, +		}, +	 * {@link HttpClientErrorException} for status HTTP 404 Not Found., +	@SuppressWarnings("serial")]