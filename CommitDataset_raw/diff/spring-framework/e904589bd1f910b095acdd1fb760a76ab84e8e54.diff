[+++ b/spring-beans/src/main/java/org/springframework/beans/AbstractPropertyAccessor.java, + * Copyright 2002-2012 the original author or authors., +public abstract class AbstractPropertyAccessor extends TypeConverterSupport implements ConfigurablePropertyAccessor {, +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractPropertyAccessor.java, + * Copyright 2002-2012 the original author or authors., +public abstract class AbstractPropertyAccessor extends TypeConverterSupport implements ConfigurablePropertyAccessor {, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import java.lang.reflect.Field;, +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractPropertyAccessor.java, + * Copyright 2002-2012 the original author or authors., +public abstract class AbstractPropertyAccessor extends TypeConverterSupport implements ConfigurablePropertyAccessor {, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import java.lang.reflect.Field;, +++ b/spring-beans/src/main/java/org/springframework/beans/DirectFieldAccessor.java, + * Copyright 2002-2012 the original author or authors., +import java.beans.PropertyChangeEvent;, +import java.lang.reflect.Field;, +import java.util.HashMap;, +import java.util.Map;, +, +				}, +                else {, +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractPropertyAccessor.java, + * Copyright 2002-2012 the original author or authors., +public abstract class AbstractPropertyAccessor extends TypeConverterSupport implements ConfigurablePropertyAccessor {, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import java.lang.reflect.Field;, +++ b/spring-beans/src/main/java/org/springframework/beans/DirectFieldAccessor.java, + * Copyright 2002-2012 the original author or authors., +import java.beans.PropertyChangeEvent;, +import java.lang.reflect.Field;, +import java.util.HashMap;, +import java.util.Map;, +, +				}, +                else {, +++ b/spring-beans/src/main/java/org/springframework/beans/SimpleTypeConverter.java, + * Copyright 2002-2012 the original author or authors., + * Simple implementation of the {@link TypeConverter} interface that does not operate on, + * a specific target object. This is an alternative to using a full-blown BeanWrapperImpl, + * instance for arbitrary type conversion needs, while using the very same conversion, + * algorithm (including delegation to {@link java.beans.PropertyEditor} and, + * {@link org.springframework.core.convert.ConversionService}) underneath., +public class SimpleTypeConverter extends TypeConverterSupport {, +		this.typeConverterDelegate = new TypeConverterDelegate(this);, +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractPropertyAccessor.java, + * Copyright 2002-2012 the original author or authors., +public abstract class AbstractPropertyAccessor extends TypeConverterSupport implements ConfigurablePropertyAccessor {, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +import java.lang.reflect.Field;, +++ b/spring-beans/src/main/java/org/springframework/beans/DirectFieldAccessor.java, + * Copyright 2002-2012 the original author or authors., +import java.beans.PropertyChangeEvent;, +import java.lang.reflect.Field;, +import java.util.HashMap;, +import java.util.Map;, +, +				}, +                else {, +++ b/spring-beans/src/main/java/org/springframework/beans/SimpleTypeConverter.java, + * Copyright 2002-2012 the original author or authors., + * Simple implementation of the {@link TypeConverter} interface that does not operate on, + * a specific target object. This is an alternative to using a full-blown BeanWrapperImpl, + * instance for arbitrary type conversion needs, while using the very same conversion, + * algorithm (including delegation to {@link java.beans.PropertyEditor} and, + * {@link org.springframework.core.convert.ConversionService}) underneath., +public class SimpleTypeConverter extends TypeConverterSupport {, +		this.typeConverterDelegate = new TypeConverterDelegate(this);, +++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverter.java, + * Copyright 2002-2012 the original author or authors., +import java.lang.reflect.Field;, +, + * implemented in conjunction with the {@link PropertyEditorRegistry} interface., +	 * method of the PropertyEditor class, or a Spring Converter in a ConversionService., +	 * @see org.springframework.core.convert.ConversionService, +	 * @see org.springframework.core.convert.converter.Converter, +	 * method of the PropertyEditor class, or a Spring Converter in a ConversionService., +	 * @see org.springframework.core.convert.ConversionService, +	 * @see org.springframework.core.convert.converter.Converter, +	/**, +	 * Convert the value to the required type (if necessary from a String)., +	 * <p>Conversions from String to any type will typically use the <code>setAsText</code>, +	 * method of the PropertyEditor class, or a Spring Converter in a ConversionService., +	 * @param value the value to convert, +	 * @param requiredType the type we must convert to, +	 * (or <code>null</code> if not known, for example in case of a collection element), +	 * @param field the reflective field that is the target of the conversion, +	 * (for analysis of generic types; may be <code>null</code>), +	 * @return the new value, possibly the result of type conversion, +	 * @throws TypeMismatchException if type conversion failed, +	 * @see java.beans.PropertyEditor#setAsText(String), +	 * @see java.beans.PropertyEditor#getValue(), +	 * @see org.springframework.core.convert.ConversionService, +	 * @see org.springframework.core.convert.converter.Converter, +	 */, +	<T> T convertIfNecessary(Object value, Class<T> requiredType, Field field), +			throws TypeMismatchException;, +, +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractPropertyAccessor.java, + * Copyright 2002-2012 the original author or authors.]