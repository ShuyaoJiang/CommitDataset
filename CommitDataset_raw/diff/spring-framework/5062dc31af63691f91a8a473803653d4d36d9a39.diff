[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.java, +		if (StringUtils.hasText(profileSpec)) {, +			String[] specifiedProfiles = commaDelimitedListToStringArray(trimAllWhitespace(profileSpec));, +			if (!this.environment.acceptsProfiles(specifiedProfiles)) {, +				// TODO SPR-7508: log that this bean is being rejected on profile mismatch, +		}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.java, +		if (StringUtils.hasText(profileSpec)) {, +			String[] specifiedProfiles = commaDelimitedListToStringArray(trimAllWhitespace(profileSpec));, +			if (!this.environment.acceptsProfiles(specifiedProfiles)) {, +				// TODO SPR-7508: log that this bean is being rejected on profile mismatch, +		}, +++ b/org.springframework.beans/src/main/resources/org/springframework/beans/factory/xml/spring-beans-3.1.xsd, +	TODO:SPR-7508: Document profile annotation:, +	* may be comma-delimited, +	* empty profile means beans will always be registered, +	* profile="default" means that beans will be registered unless other profile(s) are active, +	* profile="xyz,default" means that beans will be registered if 'xyz' is active or if no profile is active, +	* ConfigurableEnvironment.setDefaultProfileName(String) customizes the name of the default profile, +	* 'defaultSpringProfile' property customizes the name of the default profile (usually for use as a, +	  servlet context/init param), +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.java, +		if (StringUtils.hasText(profileSpec)) {, +			String[] specifiedProfiles = commaDelimitedListToStringArray(trimAllWhitespace(profileSpec));, +			if (!this.environment.acceptsProfiles(specifiedProfiles)) {, +				// TODO SPR-7508: log that this bean is being rejected on profile mismatch, +		}, +++ b/org.springframework.beans/src/main/resources/org/springframework/beans/factory/xml/spring-beans-3.1.xsd, +	TODO:SPR-7508: Document profile annotation:, +	* may be comma-delimited, +	* empty profile means beans will always be registered, +	* profile="default" means that beans will be registered unless other profile(s) are active, +	* profile="xyz,default" means that beans will be registered if 'xyz' is active or if no profile is active, +	* ConfigurableEnvironment.setDefaultProfileName(String) customizes the name of the default profile, +	* 'defaultSpringProfile' property customizes the name of the default profile (usually for use as a, +	  servlet context/init param), +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/xml/ProfileXmlBeanDefinitionTests.java, +import org.springframework.core.env.ConfigurableEnvironment;, +	private static final String DEFAULT_ELIGIBLE_XML = "ProfileXmlBeanDefinitionTests-defaultProfile.xml";, +	private static final String CUSTOM_DEFAULT_ELIGIBLE_XML = "ProfileXmlBeanDefinitionTests-customDefaultProfile.xml";, +	private static final String DEFAULT_AND_DEV_ELIGIBLE_XML = "ProfileXmlBeanDefinitionTests-defaultAndDevProfile.xml";, +	@Test, +	public void testDefaultProfile() {, +		assertThat(beanFactoryFor(DEFAULT_ELIGIBLE_XML, NONE_ACTIVE), containsTargetBean());, +		assertThat(beanFactoryFor(DEFAULT_ELIGIBLE_XML, "other"), not(containsTargetBean()));, +, +		assertThat(beanFactoryFor(DEFAULT_AND_DEV_ELIGIBLE_XML, DEV_ACTIVE), containsTargetBean());, +		assertThat(beanFactoryFor(DEFAULT_AND_DEV_ELIGIBLE_XML, NONE_ACTIVE), containsTargetBean());, +		assertThat(beanFactoryFor(DEFAULT_AND_DEV_ELIGIBLE_XML, PROD_ACTIVE), not(containsTargetBean()));, +	}, +, +	@Test, +	public void testCustomDefaultProfile() {, +		{, +			DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();, +			XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory);, +			ConfigurableEnvironment env = new DefaultEnvironment();, +			env.setDefaultProfile("custom-default");, +			reader.setEnvironment(env);, +			reader.loadBeanDefinitions(new ClassPathResource(DEFAULT_ELIGIBLE_XML, getClass()));, +, +			assertThat(beanFactory, not(containsTargetBean()));, +		}, +		{, +			DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();, +			XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory);, +			ConfigurableEnvironment env = new DefaultEnvironment();, +			env.setDefaultProfile("custom-default");, +			reader.setEnvironment(env);, +			reader.loadBeanDefinitions(new ClassPathResource(CUSTOM_DEFAULT_ELIGIBLE_XML, getClass()));, +, +			assertThat(beanFactory, containsTargetBean());, +		}, +	}, +, +	private BeanDefinitionRegistry beanFactoryFor(String xmlName, String... activeProfiles) {, +		env.setActiveProfiles(activeProfiles);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.java, +		if (StringUtils.hasText(profileSpec)) {, +			String[] specifiedProfiles = commaDelimitedListToStringArray(trimAllWhitespace(profileSpec));, +			if (!this.environment.acceptsProfiles(specifiedProfiles)) {, +				// TODO SPR-7508: log that this bean is being rejected on profile mismatch, +		}, +++ b/org.springframework.beans/src/main/resources/org/springframework/beans/factory/xml/spring-beans-3.1.xsd, +	TODO:SPR-7508: Document profile annotation:, +	* may be comma-delimited, +	* empty profile means beans will always be registered, +	* profile="default" means that beans will be registered unless other profile(s) are active, +	* profile="xyz,default" means that beans will be registered if 'xyz' is active or if no profile is active, +	* ConfigurableEnvironment.setDefaultProfileName(String) customizes the name of the default profile, +	* 'defaultSpringProfile' property customizes the name of the default profile (usually for use as a, +	  servlet context/init param), +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/xml/ProfileXmlBeanDefinitionTests.java, +import org.springframework.core.env.ConfigurableEnvironment;, +	private static final String DEFAULT_ELIGIBLE_XML = "ProfileXmlBeanDefinitionTests-defaultProfile.xml";, +	private static final String CUSTOM_DEFAULT_ELIGIBLE_XML = "ProfileXmlBeanDefinitionTests-customDefaultProfile.xml";, +	private static final String DEFAULT_AND_DEV_ELIGIBLE_XML = "ProfileXmlBeanDefinitionTests-defaultAndDevProfile.xml";, +	@Test, +	public void testDefaultProfile() {, +		assertThat(beanFactoryFor(DEFAULT_ELIGIBLE_XML, NONE_ACTIVE), containsTargetBean());]