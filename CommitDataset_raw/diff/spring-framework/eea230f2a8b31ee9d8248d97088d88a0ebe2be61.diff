[+++ b/spring-aspects/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, +, +	@Override, +	@CachePut(value="primary", key="#result.id"), +	public TestEntity putRefersToResult(TestEntity arg1) {, +		arg1.setId(Long.MIN_VALUE);, +		return arg1;, +	}, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, +, +	@Override, +	@CachePut(value="primary", key="#result.id"), +	public TestEntity putRefersToResult(TestEntity arg1) {, +		arg1.setId(Long.MIN_VALUE);, +		return arg1;, +	}, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/CacheableService.java, +, +	TestEntity putRefersToResult(TestEntity arg1);, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, +, +	@Override, +	@CachePut(value="primary", key="#result.id"), +	public TestEntity putRefersToResult(TestEntity arg1) {, +		arg1.setId(Long.MIN_VALUE);, +		return arg1;, +	}, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/CacheableService.java, +, +	TestEntity putRefersToResult(TestEntity arg1);, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/DefaultCacheableService.java, +, +	@Override, +	@CachePut(value="primary", key="#result.id"), +	public TestEntity putRefersToResult(TestEntity arg1) {, +		arg1.setId(Long.MIN_VALUE);, +		return arg1;, +	}, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/AnnotatedClassCacheableService.java, +, +	@Override, +	@CachePut(value="primary", key="#result.id"), +	public TestEntity putRefersToResult(TestEntity arg1) {, +		arg1.setId(Long.MIN_VALUE);, +		return arg1;, +	}, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/CacheableService.java, +, +	TestEntity putRefersToResult(TestEntity arg1);, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/DefaultCacheableService.java, +, +	@Override, +	@CachePut(value="primary", key="#result.id"), +	public TestEntity putRefersToResult(TestEntity arg1) {, +		arg1.setId(Long.MIN_VALUE);, +		return arg1;, +	}, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/TestEntity.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.cache.config;, +, +import org.springframework.util.ObjectUtils;, +, +/**, + * Simple test entity for use with caching tests., + *, + * @author Michael Plï¿½d, + */, +public class TestEntity {, +, +	private Long id;, +, +	public Long getId() {, +		return this.id;, +	}, +, +	public void setId(Long id) {, +		this.id = id;, +	}, +, +	@Override, +	public int hashCode() {, +		return ObjectUtils.nullSafeHashCode(this.id);, +	}, +]