[+++ b/build.gradle, +	ext.freemarkerVersion    = "2.3.27-incubating", +		testCompile("org.mockito:mockito-core:2.11.0") {, +++ b/build.gradle, +	ext.freemarkerVersion    = "2.3.27-incubating", +		testCompile("org.mockito:mockito-core:2.11.0") {, +++ b/spring-aop/spring-aop.gradle, +	optional("org.apache.commons:commons-pool2:2.4.3"), +++ b/build.gradle, +	ext.freemarkerVersion    = "2.3.27-incubating", +		testCompile("org.mockito:mockito-core:2.11.0") {, +++ b/spring-aop/spring-aop.gradle, +	optional("org.apache.commons:commons-pool2:2.4.3"), +++ b/spring-context/spring-context.gradle, +	testCompile("org.apache.commons:commons-pool2:2.4.3"), +++ b/build.gradle, +	ext.freemarkerVersion    = "2.3.27-incubating", +		testCompile("org.mockito:mockito-core:2.11.0") {, +++ b/spring-aop/spring-aop.gradle, +	optional("org.apache.commons:commons-pool2:2.4.3"), +++ b/spring-context/spring-context.gradle, +	testCompile("org.apache.commons:commons-pool2:2.4.3"), +++ b/spring-core/src/main/java/org/springframework/core/io/ByteArrayResource.java, +	 * Create a new {@code ByteArrayResource}., +	 * Create a new {@code ByteArrayResource} with a description., +, +++ b/build.gradle, +	ext.freemarkerVersion    = "2.3.27-incubating", +		testCompile("org.mockito:mockito-core:2.11.0") {, +++ b/spring-aop/spring-aop.gradle, +	optional("org.apache.commons:commons-pool2:2.4.3"), +++ b/spring-context/spring-context.gradle, +	testCompile("org.apache.commons:commons-pool2:2.4.3"), +++ b/spring-core/src/main/java/org/springframework/core/io/ByteArrayResource.java, +	 * Create a new {@code ByteArrayResource}., +	 * Create a new {@code ByteArrayResource} with a description., +, +++ b/spring-core/src/test/java/org/springframework/tests/MockitoUtils.java, + * Copyright 2002-2017 the original author or authors., +import org.mockito.internal.stubbing.InvocationContainerImpl;, +		List<Invocation> expectedInvocations =, +				((InvocationContainerImpl) MockUtil.getMockHandler(expected).getInvocationContainer()).getInvocations();, +		List<Invocation> actualInvocations =, +				((InvocationContainerImpl) MockUtil.getMockHandler(actual).getInvocationContainer()).getInvocations();, +++ b/build.gradle, +	ext.freemarkerVersion    = "2.3.27-incubating", +		testCompile("org.mockito:mockito-core:2.11.0") {, +++ b/spring-aop/spring-aop.gradle, +	optional("org.apache.commons:commons-pool2:2.4.3"), +++ b/spring-context/spring-context.gradle, +	testCompile("org.apache.commons:commons-pool2:2.4.3"), +++ b/spring-core/src/main/java/org/springframework/core/io/ByteArrayResource.java, +	 * Create a new {@code ByteArrayResource}., +	 * Create a new {@code ByteArrayResource} with a description., +, +++ b/spring-core/src/test/java/org/springframework/tests/MockitoUtils.java, + * Copyright 2002-2017 the original author or authors., +import org.mockito.internal.stubbing.InvocationContainerImpl;, +		List<Invocation> expectedInvocations =, +				((InvocationContainerImpl) MockUtil.getMockHandler(expected).getInvocationContainer()).getInvocations();, +		List<Invocation> actualInvocations =, +				((InvocationContainerImpl) MockUtil.getMockHandler(actual).getInvocationContainer()).getInvocations();, +++ b/spring-web/spring-web.gradle, +	testRuntime("javax.json:javax.json-api:1.1.2"), +++ b/build.gradle, +	ext.freemarkerVersion    = "2.3.27-incubating", +		testCompile("org.mockito:mockito-core:2.11.0") {, +++ b/spring-aop/spring-aop.gradle, +	optional("org.apache.commons:commons-pool2:2.4.3"), +++ b/spring-context/spring-context.gradle, +	testCompile("org.apache.commons:commons-pool2:2.4.3"), +++ b/spring-core/src/main/java/org/springframework/core/io/ByteArrayResource.java, +	 * Create a new {@code ByteArrayResource}., +	 * Create a new {@code ByteArrayResource} with a description., +, +++ b/spring-core/src/test/java/org/springframework/tests/MockitoUtils.java, + * Copyright 2002-2017 the original author or authors., +import org.mockito.internal.stubbing.InvocationContainerImpl;, +		List<Invocation> expectedInvocations =, +				((InvocationContainerImpl) MockUtil.getMockHandler(expected).getInvocationContainer()).getInvocations();, +		List<Invocation> actualInvocations =, +				((InvocationContainerImpl) MockUtil.getMockHandler(actual).getInvocationContainer()).getInvocations();, +++ b/spring-web/spring-web.gradle, +	testRuntime("javax.json:javax.json-api:1.1.2"), +++ b/spring-web/src/test/java/org/springframework/http/HttpRangeTests.java, +	public void invalidFirstPosition() {, +	public void invalidLastLessThanFirst() {, +	public void invalidSuffixLength() {, +	public void byteRange() {, +	public void byteRangeWithoutLastPosition() {, +	public void byteRangeOfZeroLength() {, +	public void suffixRange() {, +	public void suffixRangeShorterThanRepresentation() {, +	public void parseRanges() {, +	public void toResourceRegionExceptionLength() throws IOException {, +		InputStreamResource resource = mock(InputStreamResource.class);, +++ b/build.gradle, +	ext.freemarkerVersion    = "2.3.27-incubating", +		testCompile("org.mockito:mockito-core:2.11.0") {, +++ b/spring-aop/spring-aop.gradle]