[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +						if (isDependent(beanName, dependsOnBean)) {, +							throw new BeanCreationException("Circular depends-on relationship between '" +, +									beanName + "' and '" + dependsOnBean + "'");, +						}, +						getBean(dependsOnBean);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +						if (isDependent(beanName, dependsOnBean)) {, +							throw new BeanCreationException("Circular depends-on relationship between '" +, +									beanName + "' and '" + dependsOnBean + "'");, +						}, +						getBean(dependsOnBean);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java, +	 * Determine whether the specified dependent bean has been registered as, +	 * dependent on the given bean or on any of its transitive dependencies., +	 * @param beanName the name of the bean to check, +	 * @param dependentBeanName the name of the dependent bean, +	 */, +	protected boolean isDependent(String beanName, String dependentBeanName) {, +		Set<String> dependentBeans = this.dependentBeanMap.get(beanName);, +		if (dependentBeans == null) {, +			return false;, +		}, +		if (dependentBeans.contains(dependentBeanName)) {, +			return true;, +		}, +		for (String transitiveDependency : dependentBeans) {, +			if (isDependent(transitiveDependency, dependentBeanName)) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +						if (isDependent(beanName, dependsOnBean)) {, +							throw new BeanCreationException("Circular depends-on relationship between '" +, +									beanName + "' and '" + dependsOnBean + "'");, +						}, +						getBean(dependsOnBean);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java, +	 * Determine whether the specified dependent bean has been registered as, +	 * dependent on the given bean or on any of its transitive dependencies., +	 * @param beanName the name of the bean to check, +	 * @param dependentBeanName the name of the dependent bean, +	 */, +	protected boolean isDependent(String beanName, String dependentBeanName) {, +		Set<String> dependentBeans = this.dependentBeanMap.get(beanName);, +		if (dependentBeans == null) {, +			return false;, +		}, +		if (dependentBeans.contains(dependentBeanName)) {, +			return true;, +		}, +		for (String transitiveDependency : dependentBeans) {, +			if (isDependent(transitiveDependency, dependentBeanName)) {, +				return true;, +			}, +		}, +		return false;, +	}, +, +	/**, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java, +			assertTrue(ex.getMessage().contains("rod"));, +			assertTrue(ex.getMessage().contains("rod2"));, +	@Test, +	public void testDependsOnCycle() {, +		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory();, +		RootBeanDefinition bd1 = new RootBeanDefinition(TestBean.class);, +		bd1.setDependsOn(new String[] {"tb2"});, +		lbf.registerBeanDefinition("tb1", bd1);, +		RootBeanDefinition bd2 = new RootBeanDefinition(TestBean.class);, +		bd2.setDependsOn(new String[] {"tb1"});, +		lbf.registerBeanDefinition("tb2", bd2);, +		try {, +			lbf.preInstantiateSingletons();, +			fail("Should have thrown BeanCreationException");, +		}, +		catch (BeanCreationException ex) {, +			// expected, +			assertTrue(ex.getMessage().contains("Circular"));, +			assertTrue(ex.getMessage().contains("'tb2'"));, +			assertTrue(ex.getMessage().contains("'tb1'"));, +		}, +	}, +, +	@Test, +	public void testImplicitDependsOnCycle() {, +		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory();, +		RootBeanDefinition bd1 = new RootBeanDefinition(TestBean.class);, +		bd1.setDependsOn(new String[] {"tb2"});, +		lbf.registerBeanDefinition("tb1", bd1);, +		RootBeanDefinition bd2 = new RootBeanDefinition(TestBean.class);, +		bd2.setDependsOn(new String[] {"tb3"});, +		lbf.registerBeanDefinition("tb2", bd2);, +		RootBeanDefinition bd3 = new RootBeanDefinition(TestBean.class);, +		bd3.setDependsOn(new String[] {"tb1"});, +		lbf.registerBeanDefinition("tb3", bd3);]