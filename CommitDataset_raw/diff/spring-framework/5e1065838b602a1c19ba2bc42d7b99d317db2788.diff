[+++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AbstractInterceptorDrivenBeanDefinitionDecorator.java, + * Copyright 2002-2010 the original author or authors., + * Base implementation for, + * {@link org.springframework.beans.factory.xml.BeanDefinitionDecorator BeanDefinitionDecorators}, + * wishing to add an {@link org.aopalliance.intercept.MethodInterceptor interceptor}, + * to the resulting bean., + * and wraps the original as an inner-bean definition for the <code>target</code> property, + * of {@link ProxyFactoryBean}., + * is created. If a previous {@link org.springframework.beans.factory.xml.BeanDefinitionDecorator}, + * already created the {@link org.springframework.aop.framework.ProxyFactoryBean} then the, + * interceptor is simply added to the existing definition., + * <p>Subclasses have only to create the <code>BeanDefinition</code> to the interceptor that, + * they wish to add., + * @author Juergen Hoeller, +	@SuppressWarnings("unchecked"), +		List<String> list = (List<String>) beanDefinition.getPropertyValues().getPropertyValue("interceptorNames").getValue();, +		return ProxyFactoryBean.class.getName().equals(existingDefinition.getBeanClassName());]