[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/ConstructorReference.java, +					if (rootCause instanceof RuntimeException) {, +						throw (RuntimeException)rootCause;, +					} else {, +				}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/ConstructorReference.java, +					if (rootCause instanceof RuntimeException) {, +						throw (RuntimeException)rootCause;, +					} else {, +				}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java, +					if (rootCause instanceof RuntimeException) {, +						throw (RuntimeException)rootCause;, +					} else {, +				}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/ConstructorReference.java, +					if (rootCause instanceof RuntimeException) {, +						throw (RuntimeException)rootCause;, +					} else {, +				}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java, +					if (rootCause instanceof RuntimeException) {, +						throw (RuntimeException)rootCause;, +					} else {, +				}, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/ConstructorInvocationTests.java, +	static class TestException extends Exception {, +		, +	}, +	, +		public Tester(int i) throws Exception {, +			if (i==4) {, +				throw new TestException();, +			}, +		// 4 will make it throw a checked exception - this will be wrapped by spel on the way out, +		eContext.setVariable("bar",4);, +			Assert.fail("Should have failed");, +		, +		, +		// 1 will make it throw a RuntimeException - SpEL will let this through, +		eContext.setVariable("bar",1);, +		try {, +			o = expr.getValue(eContext);, +			Assert.fail("Should have failed");, +		} catch (Exception e) {, +			// A problem occurred whilst attempting to construct an object of type 'org.springframework.expression.spel.ConstructorInvocationTests$Tester' using arguments '(java.lang.Integer)', +			if (e instanceof SpelEvaluationException) {, +				e.printStackTrace();, +				Assert.fail("Should not have been wrapped");, +			}, +		}, +		// If counter is 5 then the method got called twice!, +		Assert.assertEquals(4,parser.parseExpression("counter").getValue(eContext));, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/ConstructorReference.java, +					if (rootCause instanceof RuntimeException) {, +						throw (RuntimeException)rootCause;, +					} else {, +				}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java, +					if (rootCause instanceof RuntimeException) {, +						throw (RuntimeException)rootCause;, +					} else {, +				}, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/ConstructorInvocationTests.java, +	static class TestException extends Exception {, +		, +	}, +	, +		public Tester(int i) throws Exception {, +			if (i==4) {, +				throw new TestException();, +			}, +		// 4 will make it throw a checked exception - this will be wrapped by spel on the way out, +		eContext.setVariable("bar",4);, +			Assert.fail("Should have failed");, +		, +		, +		// 1 will make it throw a RuntimeException - SpEL will let this through, +		eContext.setVariable("bar",1);, +		try {, +			o = expr.getValue(eContext);, +			Assert.fail("Should have failed");, +		} catch (Exception e) {, +			// A problem occurred whilst attempting to construct an object of type 'org.springframework.expression.spel.ConstructorInvocationTests$Tester' using arguments '(java.lang.Integer)', +			if (e instanceof SpelEvaluationException) {, +				e.printStackTrace();, +				Assert.fail("Should not have been wrapped");, +			}, +		}, +		// If counter is 5 then the method got called twice!, +		Assert.assertEquals(4,parser.parseExpression("counter").getValue(eContext));, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/MethodInvocationTests.java, +			Assert.fail();, +			if (e instanceof SpelEvaluationException) {, +				Assert.fail("Should not be a SpelEvaluationException");, +			}, +, +		eContext.setVariable("bar",4);, +		try {, +			o = expr.getValue(eContext);]