[+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +import org.springframework.util.CollectionUtils;, +import org.springframework.util.LinkedMultiValueMap;, +	public static final HttpHeaders EMPTY =, +			new ReadOnlyHttpHeaders(new HttpHeaders(new LinkedMultiValueMap<>(0)));, +	final MultiValueMap<String, String> headers;, +	 * Construct a new, empty instance of the {@code HttpHeaders} object., +		this(CollectionUtils.toMultiValueMap(, +				new LinkedCaseInsensitiveMap<>(8, Locale.ENGLISH)));, +	 * Construct a new {@code HttpHeaders} instance backed by an existing map., +	public HttpHeaders(MultiValueMap<String, String> headers) {, +		Assert.notNull(headers, "headers must not be null");, +		return this.headers.getFirst(headerName);, +		this.headers.add(headerName, headerValue);, +		this.headers.addAll(key, values);, +		this.headers.addAll(values);, +		this.headers.set(headerName, headerValue);, +		this.headers.setAll(values);, +		return this.headers.toSingleValueMap();, +		if (headers instanceof ReadOnlyHttpHeaders) {, +			return headers;, +		}, +		else {, +			return new ReadOnlyHttpHeaders(headers);, +		}, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +import org.springframework.util.CollectionUtils;, +import org.springframework.util.LinkedMultiValueMap;, +	public static final HttpHeaders EMPTY =, +			new ReadOnlyHttpHeaders(new HttpHeaders(new LinkedMultiValueMap<>(0)));, +	final MultiValueMap<String, String> headers;, +	 * Construct a new, empty instance of the {@code HttpHeaders} object., +		this(CollectionUtils.toMultiValueMap(, +				new LinkedCaseInsensitiveMap<>(8, Locale.ENGLISH)));, +	 * Construct a new {@code HttpHeaders} instance backed by an existing map., +	public HttpHeaders(MultiValueMap<String, String> headers) {, +		Assert.notNull(headers, "headers must not be null");, +		return this.headers.getFirst(headerName);, +		this.headers.add(headerName, headerValue);, +		this.headers.addAll(key, values);, +		this.headers.addAll(values);, +		this.headers.set(headerName, headerValue);, +		this.headers.setAll(values);, +		return this.headers.toSingleValueMap();, +		if (headers instanceof ReadOnlyHttpHeaders) {, +			return headers;, +		}, +		else {, +			return new ReadOnlyHttpHeaders(headers);, +		}, +++ b/spring-web/src/main/java/org/springframework/http/ReadOnlyHttpHeaders.java, +/*, + * Copyright 2002-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.http;, +, +import java.util.AbstractMap;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +import java.util.stream.Collectors;, +, +import org.springframework.lang.Nullable;, +import org.springframework.util.MultiValueMap;, +, +/**, + * {@code HttpHeaders} object that can only be read, not written to., + *, + * @author Brian Clozel, + * @since 5.1, + */, +class ReadOnlyHttpHeaders extends HttpHeaders {, +, +	private static final long serialVersionUID = -8578554704772377436L;, +, +	@Nullable, +	private MediaType cachedContentType;, +, +	ReadOnlyHttpHeaders(HttpHeaders headers) {, +		super(headers.headers);, +	}, +, +	@Override, +	public MediaType getContentType() {, +		if (this.cachedContentType != null) {]