[+++ b/spring-web/src/main/java/org/springframework/web/server/ServerErrorException.java, +import java.lang.reflect.Method;, +, +	private final Method handlerMethod;, +	 * Constructor for a 500 error with a reason and an optional cause., +	public ServerErrorException(String reason, @Nullable Throwable cause) {, +	 * Constructor for a 500 error with a handler {@link Method} and an optional cause., +	 * @since 5.0.5, +	public ServerErrorException(String reason, Method handlerMethod, @Nullable Throwable cause) {, +	 * Constructor for a 500 error with a {@link MethodParameter} and an optional cause., +	 */, +	public ServerErrorException(String reason, MethodParameter parameter, @Nullable Throwable cause) {, +		super(HttpStatus.INTERNAL_SERVER_ERROR, reason, cause);, +		this.handlerMethod = parameter.getMethod();, +		this.parameter = parameter;, +	}, +, +	/**, +	/**, +	 * Constructor for a 500 error with a reason only., +	 * @deprecated in favor of {@link #ServerErrorException(String, Throwable)}, +	 */, +	@Deprecated, +	public ServerErrorException(String reason) {, +		super(HttpStatus.INTERNAL_SERVER_ERROR, reason, null);, +		this.handlerMethod = null;, +		this.parameter = null;, +	}, +, +	 * Return the handler method associated with the error, if any., +	public Method getHandlerMethod() {, +	 * Return the specific method parameter associated with the error, if any., +++ b/spring-web/src/main/java/org/springframework/web/server/ServerErrorException.java, +import java.lang.reflect.Method;, +, +	private final Method handlerMethod;, +	 * Constructor for a 500 error with a reason and an optional cause., +	public ServerErrorException(String reason, @Nullable Throwable cause) {, +	 * Constructor for a 500 error with a handler {@link Method} and an optional cause., +	 * @since 5.0.5, +	public ServerErrorException(String reason, Method handlerMethod, @Nullable Throwable cause) {, +	 * Constructor for a 500 error with a {@link MethodParameter} and an optional cause., +	 */, +	public ServerErrorException(String reason, MethodParameter parameter, @Nullable Throwable cause) {, +		super(HttpStatus.INTERNAL_SERVER_ERROR, reason, cause);, +		this.handlerMethod = parameter.getMethod();, +		this.parameter = parameter;, +	}, +, +	/**, +	/**, +	 * Constructor for a 500 error with a reason only., +	 * @deprecated in favor of {@link #ServerErrorException(String, Throwable)}, +	 */, +	@Deprecated, +	public ServerErrorException(String reason) {, +		super(HttpStatus.INTERNAL_SERVER_ERROR, reason, null);, +		this.handlerMethod = null;, +		this.parameter = null;, +	}, +, +	 * Return the handler method associated with the error, if any., +	public Method getHandlerMethod() {, +	 * Return the specific method parameter associated with the error, if any., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncInvocableHandlerMethod.java, +						new ServerErrorException("Failed to invoke: " + getShortLogMessage(), getMethod(), ex));, +++ b/spring-web/src/main/java/org/springframework/web/server/ServerErrorException.java, +import java.lang.reflect.Method;, +, +	private final Method handlerMethod;, +	 * Constructor for a 500 error with a reason and an optional cause., +	public ServerErrorException(String reason, @Nullable Throwable cause) {, +	 * Constructor for a 500 error with a handler {@link Method} and an optional cause., +	 * @since 5.0.5, +	public ServerErrorException(String reason, Method handlerMethod, @Nullable Throwable cause) {, +	 * Constructor for a 500 error with a {@link MethodParameter} and an optional cause., +	 */, +	public ServerErrorException(String reason, MethodParameter parameter, @Nullable Throwable cause) {, +		super(HttpStatus.INTERNAL_SERVER_ERROR, reason, cause);, +		this.handlerMethod = parameter.getMethod();, +		this.parameter = parameter;, +	}, +, +	/**, +	/**, +	 * Constructor for a 500 error with a reason only., +	 * @deprecated in favor of {@link #ServerErrorException(String, Throwable)}, +	 */, +	@Deprecated, +	public ServerErrorException(String reason) {, +		super(HttpStatus.INTERNAL_SERVER_ERROR, reason, null);, +		this.handlerMethod = null;, +		this.parameter = null;, +	}, +, +	 * Return the handler method associated with the error, if any., +	public Method getHandlerMethod() {, +	 * Return the specific method parameter associated with the error, if any., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncInvocableHandlerMethod.java, +						new ServerErrorException("Failed to invoke: " + getShortLogMessage(), getMethod(), ex));]