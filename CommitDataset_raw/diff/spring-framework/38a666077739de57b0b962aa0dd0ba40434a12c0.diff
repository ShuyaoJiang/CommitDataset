[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import java.util.HashMap;, +import org.springframework.web.util.UriTemplate;, +						if (getMatchingPattern(typeLevelPattern, lookupPath) != null) {, +					String matchingPattern = getMatchingPattern(combinedPattern, lookupPath);, +					if (matchingPattern != null) {, +						return matchingPattern;, +				String matchingPattern = getMatchingPattern(combinedPattern, lookupPath);, +				if ((matchingPattern != null) && !matchingPattern.equals(bestMatchingPattern)) {, +					return matchingPattern;, +			return getMatchingPattern(methodLevelPattern, lookupPath);, +		private String getMatchingPattern(String pattern, String lookupPath) {, +			if (pattern.equals(lookupPath)) {, +				return pattern;, +				return pattern + ".*";, +			}, +			if (pathMatcher.match(pattern, lookupPath)) {, +				return pattern;, +				return pattern + "/";, +			return null;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import java.util.HashMap;, +import org.springframework.web.util.UriTemplate;, +						if (getMatchingPattern(typeLevelPattern, lookupPath) != null) {, +					String matchingPattern = getMatchingPattern(combinedPattern, lookupPath);, +					if (matchingPattern != null) {, +						return matchingPattern;, +				String matchingPattern = getMatchingPattern(combinedPattern, lookupPath);, +				if ((matchingPattern != null) && !matchingPattern.equals(bestMatchingPattern)) {, +					return matchingPattern;, +			return getMatchingPattern(methodLevelPattern, lookupPath);, +		private String getMatchingPattern(String pattern, String lookupPath) {, +			if (pattern.equals(lookupPath)) {, +				return pattern;, +				return pattern + ".*";, +			}, +			if (pathMatcher.match(pattern, lookupPath)) {, +				return pattern;, +				return pattern + "/";, +			return null;, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/UriTemplateServletAnnotationControllerTests.java, +	 * See SPR-8543, +	 */, +	@Test, +	public void variableNamesWithUrlExtension() throws Exception {, +		initServlet(VariableNamesController.class);, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/test/foo.json");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("foo-foo", response.getContentAsString());, +	}, +, +	/*, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import java.util.HashMap;, +import org.springframework.web.util.UriTemplate;, +						if (getMatchingPattern(typeLevelPattern, lookupPath) != null) {, +					String matchingPattern = getMatchingPattern(combinedPattern, lookupPath);, +					if (matchingPattern != null) {, +						return matchingPattern;, +				String matchingPattern = getMatchingPattern(combinedPattern, lookupPath);, +				if ((matchingPattern != null) && !matchingPattern.equals(bestMatchingPattern)) {, +					return matchingPattern;, +			return getMatchingPattern(methodLevelPattern, lookupPath);, +		private String getMatchingPattern(String pattern, String lookupPath) {, +			if (pattern.equals(lookupPath)) {, +				return pattern;, +				return pattern + ".*";, +			}, +			if (pathMatcher.match(pattern, lookupPath)) {, +				return pattern;, +				return pattern + "/";, +			return null;, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/UriTemplateServletAnnotationControllerTests.java, +	 * See SPR-8543, +	 */, +	@Test, +	public void variableNamesWithUrlExtension() throws Exception {, +		initServlet(VariableNamesController.class);, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/test/foo.json");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("foo-foo", response.getContentAsString());, +	}, +, +	/*, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/UriTemplateServletHandlerMethodTests.java, +import org.springframework.web.servlet.mvc.annotation.UriTemplateServletAnnotationControllerTests.VariableNamesController;, +	 * See SPR-8543, +	 */, +	@Test, +	public void variableNamesWithUrlExtension() throws Exception {, +		initDispatcherServlet(VariableNamesController.class, null);, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/test/foo.json");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("foo-foo", response.getContentAsString());]