[+++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +		if (this.port == null) {, +			return -1;, +		}, +		else if (this.port.contains("{")) {, +			throw new IllegalStateException(, +					"The port contains a URI variable but has not been expanded yet: " + this.port);, +		}, +			if (getPort() != -1) {, +++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +		if (this.port == null) {, +			return -1;, +		}, +		else if (this.port.contains("{")) {, +			throw new IllegalStateException(, +					"The port contains a URI variable but has not been expanded yet: " + this.port);, +		}, +			if (getPort() != -1) {, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +	private String port;, +			return new HierarchicalUriComponents(this.scheme, this.userInfo, this.host, this.port,, +		this.port = null;, +	 * Set the URI port. Use this method only when the port needs to be, +	 * parameterized with a URI variable. Otherwise use {@link #port(int)}., +	 * Passing {@code null} will clear the port of this builder., +++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +		if (this.port == null) {, +			return -1;, +		}, +		else if (this.port.contains("{")) {, +			throw new IllegalStateException(, +					"The port contains a URI variable but has not been expanded yet: " + this.port);, +		}, +			if (getPort() != -1) {, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +	private String port;, +			return new HierarchicalUriComponents(this.scheme, this.userInfo, this.host, this.port,, +		this.port = null;, +	 * Set the URI port. Use this method only when the port needs to be, +	 * parameterized with a URI variable. Otherwise use {@link #port(int)}., +	 * Passing {@code null} will clear the port of this builder., +++ b/spring-web/src/test/java/org/springframework/web/util/UriComponentsTests.java, + * Copyright 2002-2014 the original author or authors., +import org.junit.Test;, +, +import static org.hamcrest.Matchers.equalTo;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.hamcrest.Matchers.not;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertThat;, +import static org.springframework.web.util.UriComponentsBuilder.fromUriString;, +		UriComponents uri1 = fromUriString("http://example.com:8080/bar").build();, +		UriComponents uri2 = fromUriString("http://example.com/bar").port(8080).build();, +		UriComponents uri3 = fromUriString("http://example.com/bar").port("{port}").build().expand(8080);, +		UriComponents uri4 = fromUriString("http://example.com/bar").port("808{digit}").build().expand(0);, +		assertEquals(8080, uri1.getPort());, +		assertEquals("http://example.com:8080/bar", uri1.toUriString());, +		assertEquals(8080, uri2.getPort());, +		assertEquals("http://example.com:8080/bar", uri2.toUriString());, +		assertEquals(8080, uri3.getPort());, +		assertEquals("http://example.com:8080/bar", uri3.toUriString());, +		assertEquals(8080, uri4.getPort());, +		assertEquals("http://example.com:8080/bar", uri4.toUriString());]