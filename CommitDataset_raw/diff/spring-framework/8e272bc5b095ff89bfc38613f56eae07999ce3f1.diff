[+++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerWebExchange.java, +import org.springframework.http.codec.ServerCodecConfigurer;, +				request, new MockServerHttpResponse(), new DefaultWebSessionManager(),, +				ServerCodecConfigurer.create()));, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerWebExchange.java, +import org.springframework.http.codec.ServerCodecConfigurer;, +				request, new MockServerHttpResponse(), new DefaultWebSessionManager(),, +				ServerCodecConfigurer.create()));, +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/DefaultServerWebExchange.java, +import org.springframework.http.codec.HttpMessageReader;, +import org.springframework.http.codec.ServerCodecConfigurer;, +import static org.springframework.http.MediaType.*;, +, +			WebSessionManager sessionManager, ServerCodecConfigurer codecConfigurer) {, +		Assert.notNull(sessionManager, "'sessionManager' is required");, +		Assert.notNull(codecConfigurer, "'codecConfigurer' is required");, +		this.formDataMono = initFormData(request, codecConfigurer);, +, +	@SuppressWarnings("unchecked"), +	private static Mono<MultiValueMap<String, String>> initFormData(, +			ServerHttpRequest request, ServerCodecConfigurer codecConfigurer) {, +, +			if (APPLICATION_FORM_URLENCODED.isCompatibleWith(contentType)) {, +				return ((HttpMessageReader<MultiValueMap<String, String>>)codecConfigurer, +						.getReaders(), +						.stream(), +						.filter(messageReader -> messageReader.canRead(FORM_DATA_VALUE_TYPE, APPLICATION_FORM_URLENCODED)), +						.findFirst(), +						.orElseThrow(() -> new IllegalStateException("Could not find HttpMessageReader that supports " + APPLICATION_FORM_URLENCODED))), +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerWebExchange.java, +import org.springframework.http.codec.ServerCodecConfigurer;, +				request, new MockServerHttpResponse(), new DefaultWebSessionManager(),, +				ServerCodecConfigurer.create()));, +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/DefaultServerWebExchange.java, +import org.springframework.http.codec.HttpMessageReader;, +import org.springframework.http.codec.ServerCodecConfigurer;, +import static org.springframework.http.MediaType.*;, +, +			WebSessionManager sessionManager, ServerCodecConfigurer codecConfigurer) {, +		Assert.notNull(sessionManager, "'sessionManager' is required");, +		Assert.notNull(codecConfigurer, "'codecConfigurer' is required");, +		this.formDataMono = initFormData(request, codecConfigurer);, +, +	@SuppressWarnings("unchecked"), +	private static Mono<MultiValueMap<String, String>> initFormData(, +			ServerHttpRequest request, ServerCodecConfigurer codecConfigurer) {, +, +			if (APPLICATION_FORM_URLENCODED.isCompatibleWith(contentType)) {, +				return ((HttpMessageReader<MultiValueMap<String, String>>)codecConfigurer, +						.getReaders(), +						.stream(), +						.filter(messageReader -> messageReader.canRead(FORM_DATA_VALUE_TYPE, APPLICATION_FORM_URLENCODED)), +						.findFirst(), +						.orElseThrow(() -> new IllegalStateException("Could not find HttpMessageReader that supports " + APPLICATION_FORM_URLENCODED))), +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java, +import org.springframework.http.codec.ServerCodecConfigurer;, + * @author Sebastien Deleuze, +	private ServerCodecConfigurer codecConfigurer;, +, +	/**, +	 * Configure a custom {@link ServerCodecConfigurer}. The provided instance is set on, +	 * each created {@link DefaultServerWebExchange}., +	 * <p>By default this is set to {@link ServerCodecConfigurer#create()}., +	 * @param codecConfigurer the codec configurer to use, +	 */, +	public void setCodecConfigurer(ServerCodecConfigurer codecConfigurer) {, +		Assert.notNull(codecConfigurer, "ServerCodecConfigurer must not be null");, +		this.codecConfigurer = codecConfigurer;, +	}, +, +	/**, +	 * Return the configured {@link ServerCodecConfigurer}., +	 */, +	public ServerCodecConfigurer getCodecConfigurer() {, +		return this.codecConfigurer != null ? this.codecConfigurer : ServerCodecConfigurer.create();, +	}, +, +		return new DefaultServerWebExchange(request, response, this.sessionManager, getCodecConfigurer());, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerWebExchange.java, +import org.springframework.http.codec.ServerCodecConfigurer;, +				request, new MockServerHttpResponse(), new DefaultWebSessionManager(),, +				ServerCodecConfigurer.create()));, +++ b/spring-web/src/main/java/org/springframework/web/server/adapter/DefaultServerWebExchange.java, +import org.springframework.http.codec.HttpMessageReader;, +import org.springframework.http.codec.ServerCodecConfigurer;, +import static org.springframework.http.MediaType.*;, +, +			WebSessionManager sessionManager, ServerCodecConfigurer codecConfigurer) {, +		Assert.notNull(sessionManager, "'sessionManager' is required");, +		Assert.notNull(codecConfigurer, "'codecConfigurer' is required");, +		this.formDataMono = initFormData(request, codecConfigurer);, +, +	@SuppressWarnings("unchecked"), +	private static Mono<MultiValueMap<String, String>> initFormData(, +			ServerHttpRequest request, ServerCodecConfigurer codecConfigurer) {, +, +			if (APPLICATION_FORM_URLENCODED.isCompatibleWith(contentType)) {, +				return ((HttpMessageReader<MultiValueMap<String, String>>)codecConfigurer, +						.getReaders(), +						.stream()]