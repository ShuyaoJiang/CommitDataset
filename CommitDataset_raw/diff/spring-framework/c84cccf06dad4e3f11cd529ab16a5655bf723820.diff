[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +				TypeDescriptor elementType = typeDescriptor.getElementType();, +				if (elementType != null && Enum.class.isAssignableFrom(elementType.getType())) {, +		TypeDescriptor elementType = typeDescriptor.getElementType();, +		if (elementType == null && originalAllowed &&, +					indexedPropertyName, null, element, elementType != null ? elementType.getType() : null , typeDescriptor.getElementType());, +		TypeDescriptor keyType = typeDescriptor.getMapKeyType();, +		TypeDescriptor valueType = typeDescriptor.getMapValueType();, +		if (keyType == null && valueType == null && originalAllowed &&, +			Object convertedKey = convertIfNecessary(keyedPropertyName, null, key, keyType != null ? keyType.getType() : null, typeDescriptor.getMapKeyType());, +			Object convertedValue = convertIfNecessary(keyedPropertyName, null, value, valueType!= null ? valueType.getType() : null, typeDescriptor.getMapValueType());, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +				TypeDescriptor elementType = typeDescriptor.getElementType();, +				if (elementType != null && Enum.class.isAssignableFrom(elementType.getType())) {, +		TypeDescriptor elementType = typeDescriptor.getElementType();, +		if (elementType == null && originalAllowed &&, +					indexedPropertyName, null, element, elementType != null ? elementType.getType() : null , typeDescriptor.getElementType());, +		TypeDescriptor keyType = typeDescriptor.getMapKeyType();, +		TypeDescriptor valueType = typeDescriptor.getMapValueType();, +		if (keyType == null && valueType == null && originalAllowed &&, +			Object convertedKey = convertIfNecessary(keyedPropertyName, null, key, keyType != null ? keyType.getType() : null, typeDescriptor.getMapKeyType());, +			Object convertedValue = convertIfNecessary(keyedPropertyName, null, value, valueType!= null ? valueType.getType() : null, typeDescriptor.getMapValueType());, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/AbstractDescriptor.java, +		//if (type == null) {, +	//		throw new IllegalArgumentException("type cannot be null");, +		//}, +			Class<?> elementType = resolveCollectionElementType();, +			return elementType != null ? new TypeDescriptor(nested(elementType, 0)) : null;, +			return null;, +			Class<?> keyType = resolveMapKeyType();, +			return keyType != null ? new TypeDescriptor(nested(keyType, 0)) : null;, +			return null;, +			Class<?> valueType = resolveMapValueType();, +			return valueType != null ? new TypeDescriptor(nested(valueType, 1)) : null;, +			return null;, +			return nested(resolveCollectionElementType(), 0);, +			return nested(resolveMapValueType(), 1);, +	protected abstract Class<?> resolveCollectionElementType();, +	protected abstract Class<?> resolveMapKeyType();, +	protected abstract Class<?> resolveMapValueType();, +		return getType() != null && Collection.class.isAssignableFrom(getType());, +		return getType() != null && getType().isArray();, +		return getType() != null && Map.class.isAssignableFrom(getType());, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +				TypeDescriptor elementType = typeDescriptor.getElementType();, +				if (elementType != null && Enum.class.isAssignableFrom(elementType.getType())) {, +		TypeDescriptor elementType = typeDescriptor.getElementType();, +		if (elementType == null && originalAllowed &&, +					indexedPropertyName, null, element, elementType != null ? elementType.getType() : null , typeDescriptor.getElementType());, +		TypeDescriptor keyType = typeDescriptor.getMapKeyType();, +		TypeDescriptor valueType = typeDescriptor.getMapValueType();, +		if (keyType == null && valueType == null && originalAllowed &&, +			Object convertedKey = convertIfNecessary(keyedPropertyName, null, key, keyType != null ? keyType.getType() : null, typeDescriptor.getMapKeyType());, +			Object convertedValue = convertIfNecessary(keyedPropertyName, null, value, valueType!= null ? valueType.getType() : null, typeDescriptor.getMapValueType());, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/AbstractDescriptor.java, +		//if (type == null) {, +	//		throw new IllegalArgumentException("type cannot be null");, +		//}, +			Class<?> elementType = resolveCollectionElementType();, +			return elementType != null ? new TypeDescriptor(nested(elementType, 0)) : null;, +			return null;, +			Class<?> keyType = resolveMapKeyType();, +			return keyType != null ? new TypeDescriptor(nested(keyType, 0)) : null;, +			return null;, +			Class<?> valueType = resolveMapValueType();, +			return valueType != null ? new TypeDescriptor(nested(valueType, 1)) : null;, +			return null;, +			return nested(resolveCollectionElementType(), 0);, +			return nested(resolveMapValueType(), 1);, +	protected abstract Class<?> resolveCollectionElementType();, +	protected abstract Class<?> resolveMapKeyType();, +	protected abstract Class<?> resolveMapValueType();, +		return getType() != null && Collection.class.isAssignableFrom(getType());, +		return getType() != null && getType().isArray();, +		return getType() != null && Map.class.isAssignableFrom(getType());, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/BeanPropertyDescriptor.java, +	protected Class<?> resolveCollectionElementType() {, +	protected Class<?> resolveMapKeyType() {, +	protected Class<?> resolveMapValueType() {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +				TypeDescriptor elementType = typeDescriptor.getElementType();, +				if (elementType != null && Enum.class.isAssignableFrom(elementType.getType())) {, +		TypeDescriptor elementType = typeDescriptor.getElementType();, +		if (elementType == null && originalAllowed &&, +					indexedPropertyName, null, element, elementType != null ? elementType.getType() : null , typeDescriptor.getElementType());, +		TypeDescriptor keyType = typeDescriptor.getMapKeyType();, +		TypeDescriptor valueType = typeDescriptor.getMapValueType();, +		if (keyType == null && valueType == null && originalAllowed &&, +			Object convertedKey = convertIfNecessary(keyedPropertyName, null, key, keyType != null ? keyType.getType() : null, typeDescriptor.getMapKeyType());, +			Object convertedValue = convertIfNecessary(keyedPropertyName, null, value, valueType!= null ? valueType.getType() : null, typeDescriptor.getMapValueType());, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/AbstractDescriptor.java, +		//if (type == null) {, +	//		throw new IllegalArgumentException("type cannot be null");, +		//}, +			Class<?> elementType = resolveCollectionElementType();, +			return elementType != null ? new TypeDescriptor(nested(elementType, 0)) : null;, +			return null;, +			Class<?> keyType = resolveMapKeyType();, +			return keyType != null ? new TypeDescriptor(nested(keyType, 0)) : null;, +			return null;]