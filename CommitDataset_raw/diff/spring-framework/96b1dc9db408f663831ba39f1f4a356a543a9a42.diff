[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionFailedException.java, +		super("Unable to convert value \"" + value + "\" from type '" + sourceType.getName() +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionFailedException.java, +		super("Unable to convert value \"" + value + "\" from type '" + sourceType.getName() +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ObjectToObjectConverter.java, + * Copyright 2002-2010 the original author or authors., +		try {, +				return method.invoke(null, source);, +					return constructor.newInstance(source);, +			throw new ConversionFailedException(sourceType, targetType, source, ex.getTargetException());, +		}, +		catch (Throwable ex) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionFailedException.java, +		super("Unable to convert value \"" + value + "\" from type '" + sourceType.getName() +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ObjectToObjectConverter.java, + * Copyright 2002-2010 the original author or authors., +		try {, +				return method.invoke(null, source);, +					return constructor.newInstance(source);, +			throw new ConversionFailedException(sourceType, targetType, source, ex.getTargetException());, +		}, +		catch (Throwable ex) {, +++ b/org.springframework.web/src/main/java/org/springframework/http/MediaType.java, + * <p>Consists of a {@linkplain #getType() type} and a {@linkplain #getSubtype() subtype}., + * Also has functionality to parse media types from a string using {@link #parseMediaType(String)},, + * or multiple comma-separated media types using {@link #parseMediaTypes(String)}., + * @see <a href="http://tools.ietf.org/html/rfc2616#section-3.7">HTTP 1.1, section 3.7</a>, +, +, +	 * Create a new {@link MediaType} for the given primary type and subtype., +	 * <p>The parameters are empty., +	 * Copy-constructor that copies the type and subtype of the given {@link MediaType},, +	 * and allows for different parameter., +			Assert.isTrue(d >= 0D && d <= 1D,, +					"Invalid quality value \"" + value + "\": should be between 0.0 and 1.0");, +	/**, +	 * Return the primary type., +	 */, +	/**, +	 * Indicate whether the {@linkplain #getType() type} is the wildcard character <code>&#42;</code> or not., +	 */, +	/**, +	 * Return the subtype., +	 */, +	 * Return the quality value, as indicated by a <code>q</code> parameter, if any., +	 * Defaults to <code>1.0</code>., +	 * <p>For instance, {@code text/*} is compatible with {@code text/plain}, {@code text/html}, and vice versa., +	 * In effect, this method is similar to {@link #includes(MediaType)}, except that it's symmetric., +	private void appendTo(Map<String, String> map, StringBuilder builder) {, +, +	/**, +	 * Parse the given String value into a {@link MediaType} object,, +	 * with this method name following the 'valueOf' naming convention, +	 * (as supported by {@link org.springframework.core.convert.ConversionService}., +	 * @see #parseMediaType(String), +	 */, +	public static MediaType valueOf(String value) {, +		return parseMediaType(value);, +	}, +, +	 * Parse the given, comma-seperated string into a list of {@link MediaType} objects., +	 * <p>This method can be used to parse an Accept or Content-Type header., +, +					}, +					else {, +, +				}, +				else {, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionFailedException.java, +		super("Unable to convert value \"" + value + "\" from type '" + sourceType.getName() +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ObjectToObjectConverter.java, + * Copyright 2002-2010 the original author or authors., +		try {, +				return method.invoke(null, source);, +					return constructor.newInstance(source);, +			throw new ConversionFailedException(sourceType, targetType, source, ex.getTargetException());, +		}, +		catch (Throwable ex) {, +++ b/org.springframework.web/src/main/java/org/springframework/http/MediaType.java, + * <p>Consists of a {@linkplain #getType() type} and a {@linkplain #getSubtype() subtype}., + * Also has functionality to parse media types from a string using {@link #parseMediaType(String)},, + * or multiple comma-separated media types using {@link #parseMediaTypes(String)}., + * @see <a href="http://tools.ietf.org/html/rfc2616#section-3.7">HTTP 1.1, section 3.7</a>, +, +, +	 * Create a new {@link MediaType} for the given primary type and subtype., +	 * <p>The parameters are empty., +	 * Copy-constructor that copies the type and subtype of the given {@link MediaType},, +	 * and allows for different parameter., +			Assert.isTrue(d >= 0D && d <= 1D,, +					"Invalid quality value \"" + value + "\": should be between 0.0 and 1.0");, +	/**, +	 * Return the primary type., +	 */, +	/**, +	 * Indicate whether the {@linkplain #getType() type} is the wildcard character <code>&#42;</code> or not., +	 */, +	/**, +	 * Return the subtype.]