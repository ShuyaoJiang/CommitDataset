[+++ b/src/docs/asciidoc/testing.adoc, +`@DirtiesContext` in <<spring-testing-annotation-dirtiescontext>>). This instructs Spring, +the next test that requires the same application context. Note that support for the, +`@DirtiesContext` annotation is provided by the, +<<spring-testing-annotation-dirtiescontext,Spring Testing Annotations>> and the, +Furthermore, thanks to the rich extension API in JUnit Jupiter, Spring provides the, +Since you can also use annotations in JUnit 5 as meta-annotations, Spring provides the, +[WARNING], +====, +Constructor injection for test classes must not be used in conjunction with JUnit, +Jupiter's `@TestInstance(PER_CLASS)` support if `@DirtiesContext` is used to close the, +test's `ApplicationContext` before or after test methods., +, +The reason is that `@TestInstance(PER_CLASS)` instructs JUnit Jupiter to cache the test, +instance between test method invocations. Consequently, the test instance will retain, +references to beans that were originally injected from an `ApplicationContext` that has, +been subsequently closed. Since the constructor for the test class will only be invoked, +once in such scenarios, dependency injection will not occur again, and subsequent tests, +will interact with beans from the closed `ApplicationContext` which may result in errors., +, +To use `@DirtiesContext` with "before test method" or "after test method" modes in, +conjunction with `@TestInstance(PER_CLASS)`, one must configure dependencies from Spring, +to be supplied via field or setter injection so that they can be re-injected between test, +method invocations., +====, +]