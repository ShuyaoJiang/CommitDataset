[+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/config/ExecutorBeanDefinitionParser.java, +		return "org.springframework.scheduling.config.TaskExecutorFactoryBean";, +		if (StringUtils.hasText(poolSize)) {, +			builder.addPropertyValue("poolSize", poolSize);, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/config/ExecutorBeanDefinitionParser.java, +		return "org.springframework.scheduling.config.TaskExecutorFactoryBean";, +		if (StringUtils.hasText(poolSize)) {, +			builder.addPropertyValue("poolSize", poolSize);, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/config/TaskExecutorFactoryBean.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.scheduling.config;, +, +import org.springframework.beans.BeanWrapper;, +import org.springframework.beans.BeanWrapperImpl;, +import org.springframework.beans.factory.BeanCreationException;, +import org.springframework.beans.factory.BeanNameAware;, +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.core.JdkVersion;, +import org.springframework.core.task.TaskExecutor;, +import org.springframework.util.Assert;, +import org.springframework.util.StringUtils;, +, +/**, + * FactoryBean for creating TaskExecutor instances., + *, + * @author Mark Fisher, + * @since 3.0, + */, +public class TaskExecutorFactoryBean implements FactoryBean<TaskExecutor>, BeanNameAware {, +, +	private volatile TaskExecutor target;, +, +	private volatile BeanWrapper beanWrapper;, +, +	private volatile String poolSize;, +, +	private volatile Integer queueCapacity;, +, +	private volatile Object rejectedExecutionHandler;, +, +	private volatile Integer keepAliveSeconds;, +, +	private volatile String beanName;, +, +	private final Object initializationMonitor = new Object();, +, +, +	public void setPoolSize(String poolSize) {, +		this.poolSize = poolSize;, +	}, +, +	public void setQueueCapacity(int queueCapacity) {, +		this.queueCapacity = queueCapacity;, +	}, +, +	public void setRejectedExecutionHandler(Object rejectedExecutionHandler) {, +		this.rejectedExecutionHandler = rejectedExecutionHandler;, +	}, +, +	public void setKeepAliveSeconds(int keepAliveSeconds) {, +		this.keepAliveSeconds = keepAliveSeconds;, +	}, +, +	public void setBeanName(String beanName) {, +		this.beanName = beanName;, +	}, +, +	public Class<? extends TaskExecutor> getObjectType() {, +		if (this.target != null) {, +			return this.target.getClass();, +		}, +		return TaskExecutor.class;, +	}, +, +	public TaskExecutor getObject() throws Exception {, +		if (this.target == null) {, +			this.initializeExecutor();, +		}, +		return this.target;, +	}, +, +	public boolean isSingleton() {, +		return true;, +	}, +]