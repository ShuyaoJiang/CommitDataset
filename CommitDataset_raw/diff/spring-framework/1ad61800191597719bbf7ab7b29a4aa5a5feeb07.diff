[+++ b/spring-expression/src/main/java/org/springframework/expression/Expression.java, + * An expression capable of evaluating itself against context objects., + * Encapsulates the details of a previously parsed expression string., + * Provides a common abstraction for expression evaluation., + * @author Juergen Hoeller, +	 * Return the original string used to create this expression (unmodified)., +	 * Evaluate the expression in the default context. If the result, +	 * of the evaluation does not match (and cannot be converted to), +	 * the expected result type then an exception will be returned., +	 * Evaluate this expression against the specified root object., +	 * @param rootObject the root object against which to evaluate the expression, +	 * Evaluate the expression in the default context against the specified root, +	 * object. If the result of the evaluation does not match (and cannot be, +	 * converted to) the expected result type then an exception will be returned., +	 * @param rootObject the root object against which to evaluate the expression, +	 * Evaluate this expression in the provided context and return the result, +	 * of evaluation., +	 * Evaluate this expression in the provided context and return the result, +	 * of evaluation, but use the supplied root context as an override for any, +	 * default root object specified in the context., +	 * @param rootObject the root object against which to evaluate the expression, +	 * Evaluate the expression in a specified context which can resolve references, +	 * to properties, methods, types, etc. The type of the evaluation result is, +	 * expected to be of a particular class and an exception will be thrown if it, +	 * Evaluate the expression in a specified context which can resolve references, +	 * to properties, methods, types, etc. The type of the evaluation result is, +	 * expected to be of a particular class and an exception will be thrown if it, +	 * is not and cannot be converted to that type. The supplied root object, +	 * overrides any default specified on the supplied context., +	 * @param rootObject the root object against which to evaluate the expression, +	 * Return the most general type that can be passed to a {@link #setValue}, +	 * Return the most general type that can be passed to the, +	 * {@link #setValue(Object, Object)} method using the default context., +	 * Return the most general type that can be passed to the, +	 * {@link #setValue(EvaluationContext, Object)} method for the given context., +	 * Return the most general type that can be passed to the, +	 * {@link #setValue(EvaluationContext, Object, Object)} method for the given, +	 * context. The supplied root object overrides any specified in the context., +	 * Return the most general type that can be passed to a {@link #setValue}, +	 * @return a type descriptor for values that can be set on this context, +	 * Return the most general type that can be passed to the, +	 * {@link #setValue(Object, Object)} method using the default context., +	 * @return a type descriptor for values that can be set on this context, +	 * Return the most general type that can be passed to the, +	 * {@link #setValue(EvaluationContext, Object)} method for the given context., +	 * @return a type descriptor for values that can be set on this context, +	 * Return the most general type that can be passed to the, +	 * {@link #setValue(EvaluationContext, Object, Object)} method for the given, +	 * context. The supplied root object overrides any specified in the context., +	 * @return a type descriptor for values that can be set on this context, +	 * @return {@code true} if the expression is writable; {@code false} otherwise, +	 * @return {@code true} if the expression is writable; {@code false} otherwise, +	 * @return {@code true} if the expression is writable; {@code false} otherwise, +++ b/spring-expression/src/main/java/org/springframework/expression/Expression.java, + * An expression capable of evaluating itself against context objects., + * Encapsulates the details of a previously parsed expression string., + * Provides a common abstraction for expression evaluation., + * @author Juergen Hoeller, +	 * Return the original string used to create this expression (unmodified)., +	 * Evaluate the expression in the default context. If the result, +	 * of the evaluation does not match (and cannot be converted to), +	 * the expected result type then an exception will be returned., +	 * Evaluate this expression against the specified root object., +	 * @param rootObject the root object against which to evaluate the expression, +	 * Evaluate the expression in the default context against the specified root, +	 * object. If the result of the evaluation does not match (and cannot be, +	 * converted to) the expected result type then an exception will be returned., +	 * @param rootObject the root object against which to evaluate the expression, +	 * Evaluate this expression in the provided context and return the result, +	 * of evaluation., +	 * Evaluate this expression in the provided context and return the result, +	 * of evaluation, but use the supplied root context as an override for any, +	 * default root object specified in the context., +	 * @param rootObject the root object against which to evaluate the expression, +	 * Evaluate the expression in a specified context which can resolve references, +	 * to properties, methods, types, etc. The type of the evaluation result is, +	 * expected to be of a particular class and an exception will be thrown if it, +	 * Evaluate the expression in a specified context which can resolve references, +	 * to properties, methods, types, etc. The type of the evaluation result is, +	 * expected to be of a particular class and an exception will be thrown if it, +	 * is not and cannot be converted to that type. The supplied root object, +	 * overrides any default specified on the supplied context., +	 * @param rootObject the root object against which to evaluate the expression, +	 * Return the most general type that can be passed to a {@link #setValue}, +	 * Return the most general type that can be passed to the, +	 * {@link #setValue(Object, Object)} method using the default context., +	 * Return the most general type that can be passed to the, +	 * {@link #setValue(EvaluationContext, Object)} method for the given context., +	 * Return the most general type that can be passed to the, +	 * {@link #setValue(EvaluationContext, Object, Object)} method for the given, +	 * context. The supplied root object overrides any specified in the context., +	 * Return the most general type that can be passed to a {@link #setValue}, +	 * @return a type descriptor for values that can be set on this context, +	 * Return the most general type that can be passed to the, +	 * {@link #setValue(Object, Object)} method using the default context., +	 * @return a type descriptor for values that can be set on this context, +	 * Return the most general type that can be passed to the, +	 * {@link #setValue(EvaluationContext, Object)} method for the given context., +	 * @return a type descriptor for values that can be set on this context, +	 * Return the most general type that can be passed to the]