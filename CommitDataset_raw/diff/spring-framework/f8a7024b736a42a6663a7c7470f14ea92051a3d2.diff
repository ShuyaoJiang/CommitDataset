[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/SimpleResultHandler.java, +		if (Void.TYPE.equals(type.getRawClass())) {, +			return true;, +		if (this.conversionService.canConvert(type.getRawClass(), Publisher.class)) {, +			Class<?> clazz = result.getReturnValueType().getGeneric(0).getRawClass();, +			return Void.class.equals(clazz);, +		return false;, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/SimpleResultHandler.java, +		if (Void.TYPE.equals(type.getRawClass())) {, +			return true;, +		if (this.conversionService.canConvert(type.getRawClass(), Publisher.class)) {, +			Class<?> clazz = result.getReturnValueType().getGeneric(0).getRawClass();, +			return Void.class.equals(clazz);, +		return false;, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/SimpleResultHandlerTests.java, +import org.springframework.core.convert.support.DefaultConversionService;, + * Unit tests for {@link SimpleResultHandler}., + * @author Rossen Stoyanchev, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/SimpleResultHandler.java, +		if (Void.TYPE.equals(type.getRawClass())) {, +			return true;, +		if (this.conversionService.canConvert(type.getRawClass(), Publisher.class)) {, +			Class<?> clazz = result.getReturnValueType().getGeneric(0).getRawClass();, +			return Void.class.equals(clazz);, +		return false;, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/SimpleResultHandlerTests.java, +import org.springframework.core.convert.support.DefaultConversionService;, + * Unit tests for {@link SimpleResultHandler}., + * @author Rossen Stoyanchev, +, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/WebHandlerIntegrationTests.java, +import org.springframework.beans.MutablePropertyValues;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.core.convert.support.DefaultConversionService;, +		AnnotationConfigApplicationContext wac = new AnnotationConfigApplicationContext();, +		wac.register(WebConfig.class);, +	@Configuration, +	static class WebConfig {, +, +		@Bean, +		public TestSimpleUrlHandlerMapping handlerMapping() {, +			return new TestSimpleUrlHandlerMapping();, +		}, +, +		@Bean, +		public SimpleHandlerAdapter handlerAdapter() {, +			return new SimpleHandlerAdapter();, +		}, +, +		@Bean, +		public SimpleResultHandler resultHandler() {, +			return new SimpleResultHandler(new DefaultConversionService());, +		}, +, +	}, +]