[+++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextConfiguration.java, +	 * <p>This attribute may <strong>not</strong> be used in conjunction with, +	 * {@link #locations} or {@link #value}., +	 * &#064;ContextConfiguration(classes=BaseConfig.class), +	 * &#064;ContextConfiguration(classes=ExtendedConfig.class), +	 * {@link org.springframework.test.context.support.DelegatingSmartContextLoader, +	 * DelegatingSmartContextLoader}. For further details on the default behavior, +	 * of various concrete {@code ContextLoaders}, check out the Javadoc for, +	 * AbstractContextLoader},, +	 * {@link org.springframework.test.context.support.GenericXmlContextLoader, +	 * GenericXmlContextLoader}, and, +	 * {@link org.springframework.test.context.support.AnnotationConfigContextLoader, +	 * AnnotationConfigContextLoader}., +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextConfiguration.java, +	 * <p>This attribute may <strong>not</strong> be used in conjunction with, +	 * {@link #locations} or {@link #value}., +	 * &#064;ContextConfiguration(classes=BaseConfig.class), +	 * &#064;ContextConfiguration(classes=ExtendedConfig.class), +	 * {@link org.springframework.test.context.support.DelegatingSmartContextLoader, +	 * DelegatingSmartContextLoader}. For further details on the default behavior, +	 * of various concrete {@code ContextLoaders}, check out the Javadoc for, +	 * AbstractContextLoader},, +	 * {@link org.springframework.test.context.support.GenericXmlContextLoader, +	 * GenericXmlContextLoader}, and, +	 * {@link org.springframework.test.context.support.AnnotationConfigContextLoader, +	 * AnnotationConfigContextLoader}., +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextConfigurationAttributes.java, +	 * @throws IllegalArgumentException if the {@code declaringClass} or {@code contextLoaderClass} is, +	 * <code>null</code>, or if the {@code locations} and {@code classes} are both non-empty , +		if (!ObjectUtils.isEmpty(locations) && !ObjectUtils.isEmpty(classes)) {, +			String msg = String.format(, +				"Test class [%s] has been configured with @ContextConfiguration's 'locations' (or 'value') %s ", +						+ "and 'classes' %s attributes. Only one declaration of resources ", +						+ "is permitted per @ContextConfiguration annotation.", declaringClass.getName(),, +				ObjectUtils.nullSafeToString(locations), ObjectUtils.nullSafeToString(classes));, +			logger.error(msg);, +			throw new IllegalArgumentException(msg);, +		}, +, +	 * path-based resource locations., +	 * @return <code>true</code> if the {@link #getLocations() locations} array is not empty, +	 * @see #hasResources(), +	 * @see #hasClasses(), +	 */, +	public boolean hasLocations() {, +		return !ObjectUtils.isEmpty(getLocations());, +	}, +, +	/**, +	 * Determine if this {@code ContextConfigurationAttributes} instance has , +	 * class-based resources., +	 * @return <code>true</code> if the {@link #getClasses() classes} array is not empty, +	 * @see #hasResources(), +	 * @see #hasLocations(), +	 */, +	public boolean hasClasses() {, +		return !ObjectUtils.isEmpty(getClasses());, +	}, +, +	/**, +	 * Determine if this {@code ContextConfigurationAttributes} instance has , +	 * @see #hasLocations(), +	 * @see #hasClasses(), +		return hasLocations() || hasClasses();, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextConfiguration.java, +	 * <p>This attribute may <strong>not</strong> be used in conjunction with, +	 * {@link #locations} or {@link #value}., +	 * &#064;ContextConfiguration(classes=BaseConfig.class), +	 * &#064;ContextConfiguration(classes=ExtendedConfig.class), +	 * {@link org.springframework.test.context.support.DelegatingSmartContextLoader, +	 * DelegatingSmartContextLoader}. For further details on the default behavior, +	 * of various concrete {@code ContextLoaders}, check out the Javadoc for, +	 * AbstractContextLoader},, +	 * {@link org.springframework.test.context.support.GenericXmlContextLoader, +	 * GenericXmlContextLoader}, and, +	 * {@link org.springframework.test.context.support.AnnotationConfigContextLoader, +	 * AnnotationConfigContextLoader}., +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextConfigurationAttributes.java, +	 * @throws IllegalArgumentException if the {@code declaringClass} or {@code contextLoaderClass} is, +	 * <code>null</code>, or if the {@code locations} and {@code classes} are both non-empty , +		if (!ObjectUtils.isEmpty(locations) && !ObjectUtils.isEmpty(classes)) {, +			String msg = String.format(, +				"Test class [%s] has been configured with @ContextConfiguration's 'locations' (or 'value') %s ", +						+ "and 'classes' %s attributes. Only one declaration of resources ", +						+ "is permitted per @ContextConfiguration annotation.", declaringClass.getName(),, +				ObjectUtils.nullSafeToString(locations), ObjectUtils.nullSafeToString(classes));, +			logger.error(msg);, +			throw new IllegalArgumentException(msg);, +		}, +, +	 * path-based resource locations., +	 * @return <code>true</code> if the {@link #getLocations() locations} array is not empty, +	 * @see #hasResources(), +	 * @see #hasClasses(), +	 */, +	public boolean hasLocations() {, +		return !ObjectUtils.isEmpty(getLocations());, +	}, +, +	/**]