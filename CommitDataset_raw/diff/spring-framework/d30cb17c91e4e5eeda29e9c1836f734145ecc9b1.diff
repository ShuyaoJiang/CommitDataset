[+++ b/src/asciidoc/index.adoc, +[[websocket-fallback-sockjs-servlet3-async]], +==== SockJS and Servlet 3 Async Support, +, +HTTP streaming and HTTP long polling SockJS transports require a connection to remain, +open longer than usual. For an overview of these techniques see, +https://spring.io/blog/2012/05/08/spring-mvc-3-2-preview-techniques-for-real-time-updates/[this blog post]., +, +In Servlet containers this is done through Servlet 3 async support that, +allows exiting the Servlet container thread processing a request and continuing, +to write to the response from another thread., +, +A specific issue is the Servlet API does not provide notifications for a client, +that has gone away, see https://java.net/jira/browse/SERVLET_SPEC-44[SERVLET_SPEC-44]., +However, Servlet containers raise an exception on subseqeunt attempts to write, +to the response. Since Spring's SockJS Service support sever-sent heartbeats (every, +25 seconds by default), that means a client disconnect is usually detected within that, +time period or earlier if a message are sent more frequently., +, +[NOTE], +====, +As a result network IO failures may occur simply because a client has disconnected, which, +can fill the log with unnecessary stack traces. Spring makes a best effort to identify, +such network failures that represent client disconnects (specific to each server) and log, +a more minimal message using the dedicated log category `DISCONNECTED_CLIENT_LOG_CATEGORY`, +defined in `AbstractSockJsSession`. If you need to see the stack traces, set that, +log category to TRACE., +====, +, +This is a question beyond the scope of this document. The SockJS protocol, +is defined in the form of a Python, +with narrative in comments. There is an, +http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html[HTML formatted version], +of the test showing narrative on the right and client code on the left., +The SockJS client begins with an initial `"/info"` request to obtain basic, +information from the server. Then the client selects a transport and sends, +a series of session requests:, +http://host:port/{sockjs-endpoint}/{server-id}/{session-id}/{transport}, +The WebSocket transport type only needs a single HTTP connection for the handshake., +HTTP-based transports use one connection for sending messages from server to client, +and separate requests for sending messages from client to server., +The session id is used to correlate HTTP requests belonging to the same SockJS, +session. The server id is not used in the protocol but is added to help in, +clustered environments., +The SockJS protocol requires minimal message framing. The server for examples sends]