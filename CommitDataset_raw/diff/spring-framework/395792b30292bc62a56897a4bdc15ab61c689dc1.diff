[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.web.reactive.HandlerMapping;, +		// Success and error responses may use different content types, +		exchange.getAttributes().remove(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.web.reactive.HandlerMapping;, +		// Success and error responses may use different content types, +		exchange.getAttributes().remove(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);, +, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingExceptionHandlingIntegrationTests.java, +import java.util.Collections;, +import java.util.Map;, +import org.springframework.web.client.HttpStatusCodeException;, +	public void exceptionAfterSeveralItems() {, +	@Test // SPR-16318, +	public void exceptionFromMethodWithProducesCondition() throws Exception {, +		try {, +			HttpHeaders headers = new HttpHeaders();, +			headers.add("Accept", "text/csv, application/problem+json");, +			performGet("/SPR-16318", headers, String.class).getBody();, +			fail();, +		}, +		catch (HttpStatusCodeException ex) {, +			assertEquals(500, ex.getRawStatusCode());, +			assertEquals("application/problem+json;charset=UTF-8", ex.getResponseHeaders().getContentType().toString());, +			assertEquals("{\"reason\":\"error\"}", ex.getResponseBodyAsString());, +		}, +	}, +, +		@GetMapping(path = "/mono-error"), +		@GetMapping(path = "/SPR-16318", produces = "text/csv"), +		public String handleCsv() throws Exception {, +			throw new Spr16318Exception();, +		}, +, +		@ExceptionHandler, +		public ResponseEntity<Map<String, String>> handle(Spr16318Exception ex) {, +			return ResponseEntity.status(500).body(Collections.singletonMap("reason", "error"));, +	}, +, +	@SuppressWarnings("serial"), +	private static class Spr16318Exception extends Exception {}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.web.reactive.HandlerMapping;, +		// Success and error responses may use different content types, +		exchange.getAttributes().remove(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);, +, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingExceptionHandlingIntegrationTests.java, +import java.util.Collections;, +import java.util.Map;, +import org.springframework.web.client.HttpStatusCodeException;, +	public void exceptionAfterSeveralItems() {, +	@Test // SPR-16318, +	public void exceptionFromMethodWithProducesCondition() throws Exception {, +		try {, +			HttpHeaders headers = new HttpHeaders();, +			headers.add("Accept", "text/csv, application/problem+json");, +			performGet("/SPR-16318", headers, String.class).getBody();, +			fail();, +		}, +		catch (HttpStatusCodeException ex) {, +			assertEquals(500, ex.getRawStatusCode());, +			assertEquals("application/problem+json;charset=UTF-8", ex.getResponseHeaders().getContentType().toString());, +			assertEquals("{\"reason\":\"error\"}", ex.getResponseBodyAsString());, +		}, +	}, +, +		@GetMapping(path = "/mono-error"), +		@GetMapping(path = "/SPR-16318", produces = "text/csv"), +		public String handleCsv() throws Exception {, +			throw new Spr16318Exception();, +		}, +, +		@ExceptionHandler, +		public ResponseEntity<Map<String, String>> handle(Spr16318Exception ex) {, +			return ResponseEntity.status(500).body(Collections.singletonMap("reason", "error"));, +	}, +, +	@SuppressWarnings("serial"), +	private static class Spr16318Exception extends Exception {}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +		// Success and error responses may use different content types, +		request.removeAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.web.reactive.HandlerMapping;, +		// Success and error responses may use different content types, +		exchange.getAttributes().remove(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);, +, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingExceptionHandlingIntegrationTests.java, +import java.util.Collections;, +import java.util.Map;, +import org.springframework.web.client.HttpStatusCodeException;, +	public void exceptionAfterSeveralItems() {, +	@Test // SPR-16318]