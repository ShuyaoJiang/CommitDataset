[+++ b/spring-framework-reference/src/classic-spring.xml, +    usage patterns, please refer to the <xref linkend="orm" /> chapter.</para>, +    <section id="classic-spring-jpa">, +      <title>JPA</title>, +      <para>For the currently recommended usage patterns for JPA see <xref, +      linkend="orm-jpa" /></para>, +      <section id="orm-jpa-template">, +        <title><classname>JpaTemplate</classname> and, +        <classname>JpaDaoSupport</classname></title>, +        <para>Each JPA-based DAO will then receive a, +        <interfacename>EntityManagerFactory</interfacename> via dependency, +        injection. Such a DAO can be coded against plain JPA and work with the, +        given <interfacename>EntityManagerFactory</interfacename> or through, +        Spring's <classname>JpaTemplate</classname>:</para>, +  &lt;bean id="myProductDao" class="product.ProductDaoImpl"&gt;, +    &lt;property name="entityManagerFactory" ref="myEmf"/&gt;, +        <programlisting language="java">public class JpaProductDao implements ProductDao {, +    private JpaTemplate jpaTemplate;, +    public void setEntityManagerFactory(EntityManagerFactory emf) {, +        this.jpaTemplate = new JpaTemplate(emf);, +    }, +    public Collection loadProductsByCategory(final String category) throws DataAccessException {, +        return (Collection) this.jpaTemplate.execute(new JpaCallback() {, +            public Object doInJpa(EntityManager em) throws PersistenceException {, +                Query query = em.createQuery("from Product as p where p.category = :category");, +                query.setParameter("category", category);, +                List result = query.getResultList(); , +                <lineannotation>// do some further processing with the result list</lineannotation>, +                return result;, +        <para>The <interfacename>JpaCallback</interfacename> implementation, +        allows any type of JPA data access. The, +        <classname>JpaTemplate</classname> will ensure that, +        <interfacename>EntityManager</interfacename>s are properly opened and, +        closed and automatically participate in transactions. Moreover, the, +        <classname>JpaTemplate</classname> properly handles exceptions, making, +        sure resources are cleaned up and the appropriate transactions rolled, +        back. The template instances are thread-safe and reusable and they can, +        be kept as instance variable of the enclosing class. Note that, +        <classname>JpaTemplate</classname> offers single-step actions such as, +        find, load, merge, etc along with alternative convenience methods that, +        can replace one line callback implementations.</para>, +, +        <para>Furthermore, Spring provides a convenient, +        <classname>JpaDaoSupport</classname> base class that provides the, +        <literal>get/setEntityManagerFactory</literal> and, +        <methodname>getJpaTemplate()</methodname> to be used by, +        subclasses:</para>, +, +        <programlisting language="java">public class ProductDaoImpl extends JpaDaoSupport implements ProductDao {, +  , +    public Collection loadProductsByCategory(String category) throws DataAccessException {, +        Map&lt;String, String&gt; params = new HashMap&lt;String, String&gt;();, +        params.put("category", category);, +        return getJpaTemplate().findByNamedParams("from Product as p where p.category = :category", params);, +    }, +}</programlisting>, +, +        <para>Besides working with Spring's, +        <classname>JpaTemplate</classname>, one can also code Spring-based, +        DAOs against the JPA, doing one's own explicit, +        <interfacename>EntityManager</interfacename> handling. As also, +        elaborated in the corresponding Hibernate section, the main advantage, +        of this approach is that your data access code is able to throw, +        checked exceptions. <classname>JpaDaoSupport</classname> offers a, +        variety of support methods for this scenario, for retrieving and, +        releasing a transaction <interfacename>EntityManager</interfacename>,, +        as well as for converting exceptions.</para>, +, +        <para><emphasis>JpaTemplate mainly exists as a sibling of JdoTemplate, +        and HibernateTemplate, offering the same style for people used to, +        it.</emphasis></para>, +++ b/spring-framework-reference/src/classic-spring.xml, +    usage patterns, please refer to the <xref linkend="orm" /> chapter.</para>, +    <section id="classic-spring-jpa">, +      <title>JPA</title>, +      <para>For the currently recommended usage patterns for JPA see <xref, +      linkend="orm-jpa" /></para>, +      <section id="orm-jpa-template">, +        <title><classname>JpaTemplate</classname> and, +        <classname>JpaDaoSupport</classname></title>, +        <para>Each JPA-based DAO will then receive a, +        <interfacename>EntityManagerFactory</interfacename> via dependency, +        injection. Such a DAO can be coded against plain JPA and work with the, +        given <interfacename>EntityManagerFactory</interfacename> or through, +        Spring's <classname>JpaTemplate</classname>:</para>, +  &lt;bean id="myProductDao" class="product.ProductDaoImpl"&gt;, +    &lt;property name="entityManagerFactory" ref="myEmf"/&gt;, +        <programlisting language="java">public class JpaProductDao implements ProductDao {, +    private JpaTemplate jpaTemplate;, +    public void setEntityManagerFactory(EntityManagerFactory emf) {, +        this.jpaTemplate = new JpaTemplate(emf);, +    }, +    public Collection loadProductsByCategory(final String category) throws DataAccessException {, +        return (Collection) this.jpaTemplate.execute(new JpaCallback() {, +            public Object doInJpa(EntityManager em) throws PersistenceException {, +                Query query = em.createQuery("from Product as p where p.category = :category");, +                query.setParameter("category", category);, +                List result = query.getResultList(); , +                <lineannotation>// do some further processing with the result list</lineannotation>, +                return result;]