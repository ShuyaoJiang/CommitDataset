[+++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriTemplate.java, + * @since 3.0, +		return encodeUri(buffer.toString());, +	private static URI encodeUri(String uri) {, +		try {, +			int idx = uri.indexOf(':');, +			URI result;, +			if (idx != -1) {, +				String scheme = uri.substring(0, idx);, +				String ssp = uri.substring(idx + 1);, +				result = new URI(scheme, ssp, null);, +			}, +			else {, +				result = new URI(null, null, uri, null);, +			}, +			return result;, +		}, +		catch (URISyntaxException e) {, +			throw new IllegalArgumentException("Could not create URI from [" + uri + "]");, +		}, +	}, +, +, +			String result = encodeUri(fullPath.substring(start, end)).toASCIIString();, +, +++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriTemplate.java, + * @since 3.0, +		return encodeUri(buffer.toString());, +	private static URI encodeUri(String uri) {, +		try {, +			int idx = uri.indexOf(':');, +			URI result;, +			if (idx != -1) {, +				String scheme = uri.substring(0, idx);, +				String ssp = uri.substring(idx + 1);, +				result = new URI(scheme, ssp, null);, +			}, +			else {, +				result = new URI(null, null, uri, null);, +			}, +			return result;, +		}, +		catch (URISyntaxException e) {, +			throw new IllegalArgumentException("Could not create URI from [" + uri + "]");, +		}, +	}, +, +, +			String result = encodeUri(fullPath.substring(start, end)).toASCIIString();, +, +++ b/org.springframework.web/src/test/java/org/springframework/web/util/UriTemplateTests.java, +	public void expandEncoded() throws Exception {, +		template = new UriTemplate("http://example.com/hotel list/{hotel}");, +		URI result = template.expand(Collections.singletonMap("hotel", "foo bar \u20AC"));, +		assertEquals("Invalid expanded template", new URI("http", "//example.com/hotel list/foo bar \u20AC", null),, +				result);, +		assertEquals("Invalid expanded template", "http://example.com/hotel%20list/foo%20bar%20%E2%82%AC",, +				result.toASCIIString());, +	}, +, +	@Test]