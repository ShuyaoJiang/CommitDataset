[+++ b/org.springframework.aspects/src/test/java/org/springframework/cache/config/annotation-cache-aspectj.xml, +				<bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="default"/>, +++ b/org.springframework.aspects/src/test/java/org/springframework/cache/config/annotation-cache-aspectj.xml, +				<bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="default"/>, +++ b/org.springframework.context/src/main/java/org/springframework/cache/Cache.java, +public interface Cache {, +	interface ValueWrapper {, +		Object get();, +	ValueWrapper get(Object key);, +	void put(Object key, Object value);, +++ b/org.springframework.aspects/src/test/java/org/springframework/cache/config/annotation-cache-aspectj.xml, +				<bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="default"/>, +++ b/org.springframework.context/src/main/java/org/springframework/cache/Cache.java, +public interface Cache {, +	interface ValueWrapper {, +		Object get();, +	ValueWrapper get(Object key);, +	void put(Object key, Object value);, +++ b/org.springframework.context/src/main/java/org/springframework/cache/CacheManager.java, +	Cache getCache(String name);, +++ b/org.springframework.aspects/src/test/java/org/springframework/cache/config/annotation-cache-aspectj.xml, +				<bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="default"/>, +++ b/org.springframework.context/src/main/java/org/springframework/cache/Cache.java, +public interface Cache {, +	interface ValueWrapper {, +		Object get();, +	ValueWrapper get(Object key);, +	void put(Object key, Object value);, +++ b/org.springframework.context/src/main/java/org/springframework/cache/CacheManager.java, +	Cache getCache(String name);, +++ /dev/null, +++ b/org.springframework.aspects/src/test/java/org/springframework/cache/config/annotation-cache-aspectj.xml, +				<bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="default"/>, +++ b/org.springframework.context/src/main/java/org/springframework/cache/Cache.java, +public interface Cache {, +	interface ValueWrapper {, +		Object get();, +	ValueWrapper get(Object key);, +	void put(Object key, Object value);, +++ b/org.springframework.context/src/main/java/org/springframework/cache/CacheManager.java, +	Cache getCache(String name);, +++ /dev/null, +++ b/org.springframework.context/src/main/java/org/springframework/cache/concurrent/ConcurrentMapCache.java, +public class ConcurrentMapCache implements Cache {, +	private final ConcurrentMap store;, +		this(new ConcurrentHashMap(), name, true);, +	public ConcurrentMapCache(ConcurrentMap delegate, String name, boolean allowNullValues) {, +	public ConcurrentMap getNativeCache() {, +	public ValueWrapper get(Object key) {, +		Object v = store.get(key);, +		return (v != null ? new DefaultValueWrapper(filterNull(v)) : null);, +	public void put(Object key, Object value) {, +	protected Object filterNull(Object val) {, +++ b/org.springframework.aspects/src/test/java/org/springframework/cache/config/annotation-cache-aspectj.xml, +				<bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="default"/>, +++ b/org.springframework.context/src/main/java/org/springframework/cache/Cache.java, +public interface Cache {, +	interface ValueWrapper {, +		Object get();, +	ValueWrapper get(Object key);, +	void put(Object key, Object value);, +++ b/org.springframework.context/src/main/java/org/springframework/cache/CacheManager.java, +	Cache getCache(String name);, +++ /dev/null, +++ b/org.springframework.context/src/main/java/org/springframework/cache/concurrent/ConcurrentMapCache.java, +public class ConcurrentMapCache implements Cache {, +	private final ConcurrentMap store;, +		this(new ConcurrentHashMap(), name, true);, +	public ConcurrentMapCache(ConcurrentMap delegate, String name, boolean allowNullValues) {, +	public ConcurrentMap getNativeCache() {, +	public ValueWrapper get(Object key) {, +		Object v = store.get(key);, +		return (v != null ? new DefaultValueWrapper(filterNull(v)) : null);, +	public void put(Object key, Object value) {, +	protected Object filterNull(Object val) {, +++ b/org.springframework.context/src/main/java/org/springframework/cache/concurrent/ConcurrentMapCacheFactoryBean.java, +/*, + * Copyright 2010-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.cache.concurrent;, +, +import java.util.concurrent.ConcurrentMap;, +, +import org.springframework.beans.factory.BeanNameAware;, +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.beans.factory.InitializingBean;, +import org.springframework.util.StringUtils;]