[+++ b/spring-web/src/main/java/org/springframework/web/util/pattern/ParsingPathMatcher.java, + * <p>Calls this {@link PathMatcher} implementation can lead to, + * {@link PatternParseException} if the provided patterns are, + * illegal., + *, +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/ParsingPathMatcher.java, + * <p>Calls this {@link PathMatcher} implementation can lead to, + * {@link PatternParseException} if the provided patterns are, + * illegal., + *, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/PathMatchConfigurer.java, +import org.springframework.web.util.pattern.ParsingPathMatcher;, +	public PathMatcher getPathMatcher() {, +		if(this.pathMatcher != null, +				&& this.pathMatcher.getClass().isAssignableFrom(ParsingPathMatcher.class), +				&& (this.trailingSlashMatch || this.suffixPatternMatch)) {, +			throw new IllegalStateException("When using a ParsingPathMatcher, useTrailingSlashMatch" +, +					" and useSuffixPatternMatch should be set to 'false'.");, +		}, +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/ParsingPathMatcher.java, + * <p>Calls this {@link PathMatcher} implementation can lead to, + * {@link PatternParseException} if the provided patterns are, + * illegal., + *, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/PathMatchConfigurer.java, +import org.springframework.web.util.pattern.ParsingPathMatcher;, +	public PathMatcher getPathMatcher() {, +		if(this.pathMatcher != null, +				&& this.pathMatcher.getClass().isAssignableFrom(ParsingPathMatcher.class), +				&& (this.trailingSlashMatch || this.suffixPatternMatch)) {, +			throw new IllegalStateException("When using a ParsingPathMatcher, useTrailingSlashMatch" +, +					" and useSuffixPatternMatch should be set to 'false'.");, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurer.java, +	 * , +	 * <p>Note that if a {@link org.springframework.web.util.pattern.ParsingPathMatcher}, +	 * is configured here,, +	 * the {@link PathMatchConfigurer#setUseTrailingSlashMatch(Boolean)} and, +	 * {@link PathMatchConfigurer#setUseSuffixPatternMatch(Boolean)} options must be set, +	 * to {@literal false}as they can lead to illegal patterns,, +	 * see {@link org.springframework.web.util.pattern.ParsingPathMatcher}., +	 * , +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/ParsingPathMatcher.java, + * <p>Calls this {@link PathMatcher} implementation can lead to, + * {@link PatternParseException} if the provided patterns are, + * illegal., + *, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/PathMatchConfigurer.java, +import org.springframework.web.util.pattern.ParsingPathMatcher;, +	public PathMatcher getPathMatcher() {, +		if(this.pathMatcher != null, +				&& this.pathMatcher.getClass().isAssignableFrom(ParsingPathMatcher.class), +				&& (this.trailingSlashMatch || this.suffixPatternMatch)) {, +			throw new IllegalStateException("When using a ParsingPathMatcher, useTrailingSlashMatch" +, +					" and useSuffixPatternMatch should be set to 'false'.");, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurer.java, +	 * , +	 * <p>Note that if a {@link org.springframework.web.util.pattern.ParsingPathMatcher}, +	 * is configured here,, +	 * the {@link PathMatchConfigurer#setUseTrailingSlashMatch(Boolean)} and, +	 * {@link PathMatchConfigurer#setUseSuffixPatternMatch(Boolean)} options must be set, +	 * to {@literal false}as they can lead to illegal patterns,, +	 * see {@link org.springframework.web.util.pattern.ParsingPathMatcher}., +	 * , +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/config/PathMatchConfigurerTests.java, +/*, + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.reactive.config;, +, +import org.hamcrest.Matchers;, +import org.junit.Rule;, +import org.junit.Test;, +import org.junit.rules.ExpectedException;, +, +import org.springframework.web.util.pattern.ParsingPathMatcher;, +, +/**, + * Unit tests for {@link PathMatchConfigurer}, + * @author Brian Clozel, + */, +public class PathMatchConfigurerTests {, +, +	@Rule, +	public ExpectedException thrown = ExpectedException.none();, +]