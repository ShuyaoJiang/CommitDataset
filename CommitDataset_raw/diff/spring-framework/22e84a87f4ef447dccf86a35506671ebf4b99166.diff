[+++ b/spring-context/src/test/java/org/springframework/aop/framework/AbstractAopProxyTests.java, + * Copyright 2002-2015 the original author or authors., +, +import test.mixin.LockMixin;, +import test.mixin.LockMixinAdvisor;, +import test.mixin.Lockable;, +import test.mixin.LockedException;, +, +	@Test(expected = AopConfigException.class), +			/* expected */, +	@Test(expected = IllegalStateException.class), +	// Should fail to get proxy as exposeProxy wasn't set to true, +					assertNotNull("have context", ExposeInvocationInterceptor.currentInvocation());, +		assertSame("correct return value", s, tb.getName());, +		assertSame("this return is wrapped in proxy", tb, tb.getSpouse());, +		assertEquals(newAge, itb.getAge());, +		assertEquals(newAge, itb.getAge());, +		assertEquals(newAge, itb.getAge());, +		assertEquals(1, itb.getAge());, +		assertEquals(newAge, t.getAge());, +		assertEquals("", t.getName());, +		assertEquals(a, b);, +		assertEquals(i1, i2);, +		assertEquals(proxyA, proxyB);, +			assertEquals(proxy, AopContext.currentProxy());, +	 * So we trap only the target., +			assertSame(this, invocation.getThis());, +			assertTrue("Invocation should be on ITestBean: " + invocation.getMethod(),, +++ b/spring-context/src/test/java/org/springframework/aop/framework/AbstractAopProxyTests.java, + * Copyright 2002-2015 the original author or authors., +, +import test.mixin.LockMixin;, +import test.mixin.LockMixinAdvisor;, +import test.mixin.Lockable;, +import test.mixin.LockedException;, +, +	@Test(expected = AopConfigException.class), +			/* expected */, +	@Test(expected = IllegalStateException.class), +	// Should fail to get proxy as exposeProxy wasn't set to true, +					assertNotNull("have context", ExposeInvocationInterceptor.currentInvocation());, +		assertSame("correct return value", s, tb.getName());, +		assertSame("this return is wrapped in proxy", tb, tb.getSpouse());, +		assertEquals(newAge, itb.getAge());, +		assertEquals(newAge, itb.getAge());, +		assertEquals(newAge, itb.getAge());, +		assertEquals(1, itb.getAge());, +		assertEquals(newAge, t.getAge());, +		assertEquals("", t.getName());, +		assertEquals(a, b);, +		assertEquals(i1, i2);, +		assertEquals(proxyA, proxyB);, +			assertEquals(proxy, AopContext.currentProxy());, +	 * So we trap only the target., +			assertSame(this, invocation.getThis());, +			assertTrue("Invocation should be on ITestBean: " + invocation.getMethod(),, +++ b/spring-context/src/test/java/org/springframework/aop/framework/CglibProxyTests.java, +, +	@Test(expected = IllegalArgumentException.class), +	@Test(expected = AopConfigException.class), +		assertSame(proxy1.getClass(), proxy2.getClass());, +		assertSame("Incorrect duplicate creation of proxy classes", proxy1.getClass(), proxy2.getClass());, +		@SuppressWarnings("unchecked"), +++ b/spring-context/src/test/java/org/springframework/aop/framework/AbstractAopProxyTests.java, + * Copyright 2002-2015 the original author or authors., +, +import test.mixin.LockMixin;, +import test.mixin.LockMixinAdvisor;, +import test.mixin.Lockable;, +import test.mixin.LockedException;, +, +	@Test(expected = AopConfigException.class), +			/* expected */, +	@Test(expected = IllegalStateException.class), +	// Should fail to get proxy as exposeProxy wasn't set to true, +					assertNotNull("have context", ExposeInvocationInterceptor.currentInvocation());, +		assertSame("correct return value", s, tb.getName());, +		assertSame("this return is wrapped in proxy", tb, tb.getSpouse());, +		assertEquals(newAge, itb.getAge());, +		assertEquals(newAge, itb.getAge());, +		assertEquals(newAge, itb.getAge());, +		assertEquals(1, itb.getAge());, +		assertEquals(newAge, t.getAge());, +		assertEquals("", t.getName());, +		assertEquals(a, b);, +		assertEquals(i1, i2);, +		assertEquals(proxyA, proxyB);, +			assertEquals(proxy, AopContext.currentProxy());, +	 * So we trap only the target., +			assertSame(this, invocation.getThis());, +			assertTrue("Invocation should be on ITestBean: " + invocation.getMethod(),, +++ b/spring-context/src/test/java/org/springframework/aop/framework/CglibProxyTests.java, +, +	@Test(expected = IllegalArgumentException.class), +	@Test(expected = AopConfigException.class), +		assertSame(proxy1.getClass(), proxy2.getClass());, +		assertSame("Incorrect duplicate creation of proxy classes", proxy1.getClass(), proxy2.getClass());, +		@SuppressWarnings("unchecked"), +++ b/spring-context/src/test/java/org/springframework/aop/framework/JdkDynamicProxyTests.java, +]