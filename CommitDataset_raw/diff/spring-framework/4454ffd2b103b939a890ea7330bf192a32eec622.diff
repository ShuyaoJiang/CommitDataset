[+++ b/spring-web/src/test/java/org/springframework/http/server/reactive/MultipartIntegrationTests.java, +import reactor.test.StepVerifier;, +, +			StepVerifier.create(DataBufferUtils.join(part.content())), +					.consumeNextWith(buffer -> {, +					}), +					.verifyComplete();, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/MultipartIntegrationTests.java, +import reactor.test.StepVerifier;, +, +			StepVerifier.create(DataBufferUtils.join(part.content())), +					.consumeNextWith(buffer -> {, +					}), +					.verifyComplete();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncInvocableHandlerMethod.java, + * Copyright 2002-2018 the original author or authors., +import reactor.core.publisher.MonoProcessor;, +, +		MonoProcessor<HandlerResult> processor = MonoProcessor.create();, +		this.delegate.invoke(exchange, bindingContext, providedArgs).subscribeWith(processor);, +, +		if (processor.isTerminated()) {, +			Throwable error = processor.getError();, +			if (error != null) {, +				throw (RuntimeException) error;, +			}, +			return processor.peek();, +		}, +		else {, +			// Should never happen..., +			throw new IllegalStateException(, +					"SyncInvocableHandlerMethod should have completed synchronously.");, +		}, +++ b/spring-web/src/test/java/org/springframework/http/server/reactive/MultipartIntegrationTests.java, +import reactor.test.StepVerifier;, +, +			StepVerifier.create(DataBufferUtils.join(part.content())), +					.consumeNextWith(buffer -> {, +					}), +					.verifyComplete();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/SyncInvocableHandlerMethod.java, + * Copyright 2002-2018 the original author or authors., +import reactor.core.publisher.MonoProcessor;, +, +		MonoProcessor<HandlerResult> processor = MonoProcessor.create();, +		this.delegate.invoke(exchange, bindingContext, providedArgs).subscribeWith(processor);, +, +		if (processor.isTerminated()) {, +			Throwable error = processor.getError();, +			if (error != null) {, +				throw (RuntimeException) error;, +			}, +			return processor.peek();, +		}, +		else {, +			// Should never happen..., +			throw new IllegalStateException(, +					"SyncInvocableHandlerMethod should have completed synchronously.");, +		}, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/MultipartIntegrationTests.java, + * Copyright 2002-2018 the original author or authors., +import static org.junit.Assert.*;, +, +			StepVerifier.create(partFluxDescription(filePartsFlux)), +					.consumeNextWith(content -> assertEquals("[fileParts:foo.txt,fileParts:logo.png]", content)), +					.verifyComplete();, +, +			StepVerifier.create(filePartsMono), +					.consumeNextWith(filePart -> assertEquals("fileParts:foo.txt", partDescription(filePart))), +					.verifyComplete();, +, +			StepVerifier.create(personMono), +					.consumeNextWith(p -> assertEquals("Jason", p.getName())), +					.verifyComplete();]