[+++ b/spring-test/src/test/java/org/springframework/test/context/junit4/AbstractTransactionalSpringRunnerTests.java, + * Copyright 2002-2015 the original author or authors., +import org.junit.runner.RunWith;, +, +@RunWith(SpringJUnit4ClassRunner.class), +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/AbstractTransactionalSpringRunnerTests.java, + * Copyright 2002-2015 the original author or authors., +import org.junit.runner.RunWith;, +, +@RunWith(SpringJUnit4ClassRunner.class), +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/BeforeAndAfterTransactionAnnotationTests.java, +import org.springframework.beans.factory.annotation.Autowired;, +	@Autowired, +	public void setDataSource(DataSource dataSource) {, +		jdbcTemplate = new JdbcTemplate(dataSource);, +	}, +, +, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/AbstractTransactionalSpringRunnerTests.java, + * Copyright 2002-2015 the original author or authors., +import org.junit.runner.RunWith;, +, +@RunWith(SpringJUnit4ClassRunner.class), +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/BeforeAndAfterTransactionAnnotationTests.java, +import org.springframework.beans.factory.annotation.Autowired;, +	@Autowired, +	public void setDataSource(DataSource dataSource) {, +		jdbcTemplate = new JdbcTemplate(dataSource);, +	}, +, +, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/ClassLevelTransactionalSpringRunnerTests.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.beans.factory.annotation.Autowired;, + *, + *, + * <p>This class specifically tests usage of {@code @Transactional} defined, + * at the <strong>class level</strong>., +	@Autowired, +	public void setDataSource(DataSource dataSource) {, +		jdbcTemplate = new JdbcTemplate(dataSource);, +	}, +, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/AbstractTransactionalSpringRunnerTests.java, + * Copyright 2002-2015 the original author or authors., +import org.junit.runner.RunWith;, +, +@RunWith(SpringJUnit4ClassRunner.class), +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/BeforeAndAfterTransactionAnnotationTests.java, +import org.springframework.beans.factory.annotation.Autowired;, +	@Autowired, +	public void setDataSource(DataSource dataSource) {, +		jdbcTemplate = new JdbcTemplate(dataSource);, +	}, +, +, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/ClassLevelTransactionalSpringRunnerTests.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.beans.factory.annotation.Autowired;, + *, + *, + * <p>This class specifically tests usage of {@code @Transactional} defined, + * at the <strong>class level</strong>., +	@Autowired, +	public void setDataSource(DataSource dataSource) {, +		jdbcTemplate = new JdbcTemplate(dataSource);, +	}, +, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/ConcreteTransactionalJUnit4SpringContextTests.java, + * Copyright 2002-2015 the original author or authors., +	private static final String JANE = "jane";, +	private static final String SUE = "sue";, +	private static final String YODA = "yoda";, +	private Long nonrequiredLong;, +	private String foo;, +	private String bar;, +	private final void setEmployee(final Employee employee) {, +	private final void setBar(final String bar) {, +			countRowsInPersonTable());, +		assertEquals("Adding yoda", 1, addPerson(YODA));, +			(inTransaction() ? 2 : 1), countRowsInPersonTable());, +		assertEquals("Adding jane", 1, addPerson(JANE));, +		assertEquals("Adding sue", 1, addPerson(SUE));, +			countRowsInPersonTable());, +			(inTransaction() ? 4 : 1), countRowsInPersonTable());, +		assertEquals("Deleting yoda", 1, deletePerson(YODA));, +			countRowsInPersonTable());, +	private int addPerson(final String name) {, +		return super.jdbcTemplate.update("INSERT INTO person VALUES(?)", name);, +, +	private int deletePerson(final String name) {, +		return super.jdbcTemplate.update("DELETE FROM person WHERE name=?", name);, +	}, +, +	private int countRowsInPersonTable() {, +		return countRowsInTable("person");, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/AbstractTransactionalSpringRunnerTests.java, + * Copyright 2002-2015 the original author or authors., +import org.junit.runner.RunWith;, +]