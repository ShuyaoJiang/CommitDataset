[+++ b/spring-jms/src/main/java/org/springframework/jms/listener/AbstractMessageListenerContainer.java, +	 * <p>This setting primarily indicates what type of destination to resolve if dynamic, +	 * destinations are enabled., +	 * @param replyPubSubDomain "true" for the Publish/Subscribe domain ({@link Topic Topics}),, +	 * "false" for the Point-to-Point domain ({@link Queue Queues}), +	 * @since 4.2, +	 * for replies. Otherwise, the Point-to-Point domain ({@link javax.jms.Queue Queues}), +	 * is used., +	 * @since 4.2, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/AbstractMessageListenerContainer.java, +	 * <p>This setting primarily indicates what type of destination to resolve if dynamic, +	 * destinations are enabled., +	 * @param replyPubSubDomain "true" for the Publish/Subscribe domain ({@link Topic Topics}),, +	 * "false" for the Point-to-Point domain ({@link Queue Queues}), +	 * @since 4.2, +	 * for replies. Otherwise, the Point-to-Point domain ({@link javax.jms.Queue Queues}), +	 * is used., +	 * @since 4.2, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/UserSessionRegistry.java, + * <p>As of 4.2, this interface is replaced by {@link SimpUserRegistry},, + * exposing methods to return all registered users as well as to provide, + * more extensive information for each user., +++ b/spring-jms/src/main/java/org/springframework/jms/listener/AbstractMessageListenerContainer.java, +	 * <p>This setting primarily indicates what type of destination to resolve if dynamic, +	 * destinations are enabled., +	 * @param replyPubSubDomain "true" for the Publish/Subscribe domain ({@link Topic Topics}),, +	 * "false" for the Point-to-Point domain ({@link Queue Queues}), +	 * @since 4.2, +	 * for replies. Otherwise, the Point-to-Point domain ({@link javax.jms.Queue Queues}), +	 * is used., +	 * @since 4.2, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/UserSessionRegistry.java, + * <p>As of 4.2, this interface is replaced by {@link SimpUserRegistry},, + * exposing methods to return all registered users as well as to provide, + * more extensive information for each user., +++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/AbstractMessageListenerContainer.java, +	 * <p>This setting primarily indicates what type of destination to resolve if dynamic, +	 * destinations are enabled., +	 * @param replyPubSubDomain "true" for the Publish/Subscribe domain ({@link Topic Topics}),, +	 * "false" for the Point-to-Point domain ({@link Queue Queues}), +	 * @since 4.2, +	 * for replies. Otherwise, the Point-to-Point domain ({@link javax.jms.Queue Queues}), +	 * is used., +	 * @since 4.2, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/UserSessionRegistry.java, + * <p>As of 4.2, this interface is replaced by {@link SimpUserRegistry},, + * exposing methods to return all registered users as well as to provide, + * more extensive information for each user., +++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolver.java, +		return (MultipartFile.class == getCollectionParameterType(parameter));, +	}, +, +	private boolean isMultipartFileArray(MethodParameter parameter) {, +		return (MultipartFile.class == parameter.getParameterType().getComponentType());, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/AbstractMessageListenerContainer.java, +	 * <p>This setting primarily indicates what type of destination to resolve if dynamic, +	 * destinations are enabled., +	 * @param replyPubSubDomain "true" for the Publish/Subscribe domain ({@link Topic Topics}),, +	 * "false" for the Point-to-Point domain ({@link Queue Queues}), +	 * @since 4.2, +	 * for replies. Otherwise, the Point-to-Point domain ({@link javax.jms.Queue Queues}), +	 * is used., +	 * @since 4.2, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/UserSessionRegistry.java, + * <p>As of 4.2, this interface is replaced by {@link SimpUserRegistry},, + * exposing methods to return all registered users as well as to provide, + * more extensive information for each user., +++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolver.java, +		return (MultipartFile.class == getCollectionParameterType(parameter));, +	}, +, +	private boolean isMultipartFileArray(MethodParameter parameter) {, +		return (MultipartFile.class == parameter.getParameterType().getComponentType());, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java, +	 * Return the configured header initializer., +, +, +		Assert.notNull(accessor, "Expected STOMP headers");, +	 * {@link #setErrorHandler(StompSubProtocolErrorHandler) errorHandler}, +	 * is configured to send an ERROR frame to the client., +	 * @deprecated as of Spring 4.2, in favor of, +	 * {@link #setErrorHandler(StompSubProtocolErrorHandler) configuring}, +	 * a {@code StompSubProtocolErrorHandler}, +, +			logger.debug("Failed to send STOMP ERROR to client", ex);, +, +			logger.error("Error publishing " + event, ex);, +, +, +			Assert.notNull(stompAccessor, "Expected STOMP headers");, +			logger.debug("Failed to send WebSocket message to client in session " + session.getId(), ex);, +			throw new IllegalStateException("No header accessor in " + message);, +					"Unexpected header accessor type: " + accessor.getClass() + " in " + message);, +		}, +		else {, +, +]