[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java, +import org.springframework.web.servlet.handler.MappedInterceptor;, +import org.springframework.web.servlet.resource.ResourceUrlProvider;, +import org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor;, +	private static final String RESOURCE_URL_PROVIDER = "mvcResourceUrlProvider";, +, +		registerUrlProvider(parserContext, source);, +, +	private void registerUrlProvider(ParserContext parserContext, Object source) {, +		if (!parserContext.getRegistry().containsBeanDefinition(RESOURCE_URL_PROVIDER)) {, +			RootBeanDefinition urlProvider = new RootBeanDefinition(ResourceUrlProvider.class);, +			urlProvider.setSource(source);, +			urlProvider.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +			parserContext.getRegistry().registerBeanDefinition(RESOURCE_URL_PROVIDER, urlProvider);, +			parserContext.registerComponent(new BeanComponentDefinition(urlProvider, RESOURCE_URL_PROVIDER));, +, +			RootBeanDefinition interceptor = new RootBeanDefinition(ResourceUrlProviderExposingInterceptor.class);, +			interceptor.setSource(source);, +			interceptor.getConstructorArgumentValues().addIndexedArgumentValue(0, urlProvider);, +, +			RootBeanDefinition mappedInterceptor = new RootBeanDefinition(MappedInterceptor.class);, +			mappedInterceptor.setSource(source);, +			mappedInterceptor.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +			mappedInterceptor.getConstructorArgumentValues().addIndexedArgumentValue(0, (Object) null);, +			mappedInterceptor.getConstructorArgumentValues().addIndexedArgumentValue(1, interceptor);, +			String mappedInterceptorName = parserContext.getReaderContext().registerWithGeneratedName(mappedInterceptor);, +			parserContext.registerComponent(new BeanComponentDefinition(mappedInterceptor, mappedInterceptorName));, +		}, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java, +import org.springframework.web.servlet.handler.MappedInterceptor;, +import org.springframework.web.servlet.resource.ResourceUrlProvider;, +import org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor;, +	private static final String RESOURCE_URL_PROVIDER = "mvcResourceUrlProvider";, +, +		registerUrlProvider(parserContext, source);, +, +	private void registerUrlProvider(ParserContext parserContext, Object source) {, +		if (!parserContext.getRegistry().containsBeanDefinition(RESOURCE_URL_PROVIDER)) {, +			RootBeanDefinition urlProvider = new RootBeanDefinition(ResourceUrlProvider.class);, +			urlProvider.setSource(source);, +			urlProvider.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +			parserContext.getRegistry().registerBeanDefinition(RESOURCE_URL_PROVIDER, urlProvider);, +			parserContext.registerComponent(new BeanComponentDefinition(urlProvider, RESOURCE_URL_PROVIDER));, +, +			RootBeanDefinition interceptor = new RootBeanDefinition(ResourceUrlProviderExposingInterceptor.class);, +			interceptor.setSource(source);, +			interceptor.getConstructorArgumentValues().addIndexedArgumentValue(0, urlProvider);, +, +			RootBeanDefinition mappedInterceptor = new RootBeanDefinition(MappedInterceptor.class);, +			mappedInterceptor.setSource(source);, +			mappedInterceptor.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +			mappedInterceptor.getConstructorArgumentValues().addIndexedArgumentValue(0, (Object) null);, +			mappedInterceptor.getConstructorArgumentValues().addIndexedArgumentValue(1, interceptor);, +			String mappedInterceptorName = parserContext.getReaderContext().registerWithGeneratedName(mappedInterceptor);, +			parserContext.registerComponent(new BeanComponentDefinition(mappedInterceptor, mappedInterceptorName));, +		}, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +			registry.addInterceptor(new ResourceUrlProviderExposingInterceptor(mvcResourceUrlProvider()));, +	public ResourceUrlProvider mvcResourceUrlProvider() {, +		ResourceUrlProvider urlProvider = new ResourceUrlProvider();, +			urlProvider.setUrlPathHelper(pathHelper);, +			urlProvider.setPathMatcher(pathMatcher);, +		return urlProvider;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java, +import org.springframework.web.servlet.handler.MappedInterceptor;, +import org.springframework.web.servlet.resource.ResourceUrlProvider;, +import org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor;, +	private static final String RESOURCE_URL_PROVIDER = "mvcResourceUrlProvider";, +, +		registerUrlProvider(parserContext, source);, +, +	private void registerUrlProvider(ParserContext parserContext, Object source) {, +		if (!parserContext.getRegistry().containsBeanDefinition(RESOURCE_URL_PROVIDER)) {, +			RootBeanDefinition urlProvider = new RootBeanDefinition(ResourceUrlProvider.class);, +			urlProvider.setSource(source);, +			urlProvider.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +			parserContext.getRegistry().registerBeanDefinition(RESOURCE_URL_PROVIDER, urlProvider);, +			parserContext.registerComponent(new BeanComponentDefinition(urlProvider, RESOURCE_URL_PROVIDER));, +, +			RootBeanDefinition interceptor = new RootBeanDefinition(ResourceUrlProviderExposingInterceptor.class);, +			interceptor.setSource(source);, +			interceptor.getConstructorArgumentValues().addIndexedArgumentValue(0, urlProvider);, +, +			RootBeanDefinition mappedInterceptor = new RootBeanDefinition(MappedInterceptor.class);, +			mappedInterceptor.setSource(source);, +			mappedInterceptor.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +			mappedInterceptor.getConstructorArgumentValues().addIndexedArgumentValue(0, (Object) null);, +			mappedInterceptor.getConstructorArgumentValues().addIndexedArgumentValue(1, interceptor);, +			String mappedInterceptorName = parserContext.getReaderContext().registerWithGeneratedName(mappedInterceptor);, +			parserContext.registerComponent(new BeanComponentDefinition(mappedInterceptor, mappedInterceptorName));, +		}, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +			registry.addInterceptor(new ResourceUrlProviderExposingInterceptor(mvcResourceUrlProvider()));, +	public ResourceUrlProvider mvcResourceUrlProvider() {]