[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassApplicationContext.java, +import org.springframework.context.support.AbstractApplicationContext;, + * Standalone application context, accepting {@link Configuration @Configuration}, + * -annotated class literals as input. Useful for test harnesses or any other scenario, +	private final ConfigurationClassApplicationContext.Delegate delegate =, +			new ConfigurationClassApplicationContext.Delegate();, +			this.addConfigurationClass(configClass);, +		this.delegate.addConfigurationClass(configClass);, +	 * <p>Configuration class bean definitions are registered with generated bean definition, +	 * names unless the {@literal value} attribute is provided to the Configuration annotation., +	 * @see DefaultBeanNameGenerator, +	 * @see Configuration#value(), +		this.delegate.loadBeanDefinitions(beanFactory);, +		return this.delegate.getBean(requiredType, this);, +	}, +, +	/**, +	 * Encapsulates behavior common to {@link ConfigurationClassApplicationContext}, +	 * and its {@link org.springframework.web.context.support.ConfigurationClassWebApplicationContext}, +	 * variant.  Both classes already participate in mutually exclusive superclass, +	 * hierarchies, and this class allows for avoiding what would otherwise be a multiple, +	 * inheritance problem through composition., +	 *, +	 * <p><strong>This class is public by necessity but should be considered private and, +	 * subject to change without notice.</strong>, +	 */, +	public static class Delegate {, +, +		private final Set<Class<?>> configClasses = new LinkedHashSet<Class<?>>();, +, +		/**, +		 * @see ConfigurationClassApplicationContext#addConfigurationClass(Class), +		 */, +		public void addConfigurationClass(Class<?> configClass) {, +			Assert.notNull(, +					AnnotationUtils.findAnnotation(configClass, Configuration.class),, +					"Class [" + configClass.getName() + "] is not annotated with @Configuration");, +			this.configClasses.add(configClass);, +		}, +, +		/**, +		 * @see ConfigurationClassApplicationContext#loadBeanDefinitions(DefaultListableBeanFactory), +		 */, +		public void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) {, +			// @Autowired and friends must be enabled by default when processing @Configuration classes, +			AnnotationConfigUtils.registerAnnotationConfigProcessors(beanFactory);, +, +			for (Class<?> configClass : this.configClasses) {, +				AbstractBeanDefinition def = BeanDefinitionBuilder.rootBeanDefinition(configClass).getBeanDefinition();, +, +				String name = AnnotationUtils.findAnnotation(configClass, Configuration.class).value();, +				if (!StringUtils.hasLength(name)) {, +					name = new DefaultBeanNameGenerator().generateBeanName(def, beanFactory);, +				}, +, +				beanFactory.registerBeanDefinition(name, def);, +			}, +, +			new ConfigurationClassPostProcessor().postProcessBeanFactory(beanFactory);, +		}, +, +		/**, +		 * @see ConfigurationClassApplicationContext#getBean(Class), +		 */, +		@SuppressWarnings("unchecked"), +		public <T> T getBean(Class<T> requiredType, AbstractApplicationContext context) {, +			Assert.notNull(requiredType, "requiredType may not be null");, +			Assert.notNull(context, "context may not be null");, +, +			Map<String, ?> beansOfType = context.getBeansOfType(requiredType);, +	}, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassApplicationContext.java, +import org.springframework.context.support.AbstractApplicationContext;, + * Standalone application context, accepting {@link Configuration @Configuration}, + * -annotated class literals as input. Useful for test harnesses or any other scenario, +	private final ConfigurationClassApplicationContext.Delegate delegate =, +			new ConfigurationClassApplicationContext.Delegate();, +			this.addConfigurationClass(configClass);, +		this.delegate.addConfigurationClass(configClass);, +	 * <p>Configuration class bean definitions are registered with generated bean definition, +	 * names unless the {@literal value} attribute is provided to the Configuration annotation., +	 * @see DefaultBeanNameGenerator, +	 * @see Configuration#value(), +		this.delegate.loadBeanDefinitions(beanFactory);, +		return this.delegate.getBean(requiredType, this);, +	}, +, +	/**, +	 * Encapsulates behavior common to {@link ConfigurationClassApplicationContext}, +	 * and its {@link org.springframework.web.context.support.ConfigurationClassWebApplicationContext}, +	 * variant.  Both classes already participate in mutually exclusive superclass, +	 * hierarchies, and this class allows for avoiding what would otherwise be a multiple, +	 * inheritance problem through composition., +	 *, +	 * <p><strong>This class is public by necessity but should be considered private and, +	 * subject to change without notice.</strong>, +	 */, +	public static class Delegate {, +, +		private final Set<Class<?>> configClasses = new LinkedHashSet<Class<?>>();]