[+++ b/spring-framework-reference/src/rest.xml, +  <section id="rest-introduction">, +  <section id="rest-creating-services">, +    <section id="rest-uritemplate">, +      <section id="rest-path-variable">, +    <section id="rest-multiple-representations">, +      and the same resolution of request to views would occur.</para>, +    <section id="rest-views">, +    <section id="rest-method-conversion">, +      <para>A key principle of REST is the use of the Uniform Interface. This, +      means that all resources (URLs) can be manipulated using the same four, +      HTTP method: GET, PUT, POST, and DELETE. For each methods, the HTTP, +      specification defines the exact semantics. For instance, a GET should, +      field in an HTML form). This latter trick is what Spring's, +      <classname>HiddenHttpMethodFilter</classname> does. This filter is a, +      plain Servlet Filter and therefore it can be used in combination with, +      any web framework (not just Spring MVC). Simply add this filter to your, +      web.xml, and a POST with a hidden _method parameter will be converted, +      into the corresponding HTTP method request.</para>, +      <section id="rest-form-tags">, +    <section id="rest-etag">, +    <section id="rest-exception">, +  <section id="rest-client-access">, +    <section id="rest-resttemplate">, +    <section id="rest-message-conversion">, +      <section id="rest-string-converter">, +      <section id="rest-form-converter">, +      <section id="rest-byte-converter">, +      <section label="rest-marhsalling-converter">, +      <section id="rest-source-converter">]