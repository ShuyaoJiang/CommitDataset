[+++ b/spring-test/src/main/java/org/springframework/test/context/BootstrapContext.java, +	 * interaction with the {@code ContextCache}., +	 * @return the context loader delegate (never {@code null}), +++ b/spring-test/src/main/java/org/springframework/test/context/BootstrapContext.java, +	 * interaction with the {@code ContextCache}., +	 * @return the context loader delegate (never {@code null}), +++ b/spring-test/src/main/java/org/springframework/test/context/BootstrapUtils.java, + * Copyright 2002-2015 the original author or authors., +import java.lang.reflect.Constructor;, +, +	private static final String DEFAULT_BOOTSTRAP_CONTEXT_CLASS_NAME = "org.springframework.test.context.support.DefaultBootstrapContext";, +, +	private static final String DEFAULT_CACHE_AWARE_CONTEXT_LOADER_DELEGATE_CLASS_NAME = "org.springframework.test.context.support.DefaultCacheAwareContextLoaderDelegate";, +, +	 * Create the {@code BootstrapContext} for the specified {@linkplain Class test class}., +	 *, +	 * <p>Uses reflection to create a {@link org.springframework.test.context.support.DefaultBootstrapContext}, +	 * that uses a {@link org.springframework.test.context.support.DefaultCacheAwareContextLoaderDelegate}., +	 *, +	 * @param testClass the test class for which the bootstrap context should be created, +	 * @return a new {@code BootstrapContext}; never {@code null}, +	 */, +	@SuppressWarnings("unchecked"), +	static BootstrapContext createBootstrapContext(Class<?> testClass) {, +		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = createCacheAwareContextLoaderDelegate();, +, +		Class<? extends BootstrapContext> clazz = null;, +		try {, +			clazz = (Class<? extends BootstrapContext>) ClassUtils.forName(DEFAULT_BOOTSTRAP_CONTEXT_CLASS_NAME,, +				BootstrapUtils.class.getClassLoader());, +, +			Constructor<? extends BootstrapContext> constructor = clazz.getConstructor(Class.class,, +				CacheAwareContextLoaderDelegate.class);, +, +			if (logger.isDebugEnabled()) {, +				logger.debug(String.format("Instantiating BootstrapContext using constructor [%s]", constructor));, +			}, +			return instantiateClass(constructor, testClass, cacheAwareContextLoaderDelegate);, +		}, +		catch (Throwable t) {, +			throw new IllegalStateException("Could not load BootstrapContext [" + clazz + "]", t);, +		}, +	}, +, +	@SuppressWarnings("unchecked"), +	private static CacheAwareContextLoaderDelegate createCacheAwareContextLoaderDelegate() {, +		Class<? extends CacheAwareContextLoaderDelegate> clazz = null;, +		try {, +			clazz = (Class<? extends CacheAwareContextLoaderDelegate>) ClassUtils.forName(, +				DEFAULT_CACHE_AWARE_CONTEXT_LOADER_DELEGATE_CLASS_NAME, BootstrapUtils.class.getClassLoader());, +, +			if (logger.isDebugEnabled()) {, +				logger.debug(String.format("Instantiating CacheAwareContextLoaderDelegate from class [%s]",, +					clazz.getName()));, +			}, +			return instantiateClass(clazz, CacheAwareContextLoaderDelegate.class);, +		}, +		catch (Throwable t) {, +			throw new IllegalStateException("Could not load CacheAwareContextLoaderDelegate [" + clazz + "]", t);, +		}, +	}, +, +	/**, +++ b/spring-test/src/main/java/org/springframework/test/context/BootstrapContext.java, +	 * interaction with the {@code ContextCache}., +	 * @return the context loader delegate (never {@code null}), +++ b/spring-test/src/main/java/org/springframework/test/context/BootstrapUtils.java, + * Copyright 2002-2015 the original author or authors., +import java.lang.reflect.Constructor;, +, +	private static final String DEFAULT_BOOTSTRAP_CONTEXT_CLASS_NAME = "org.springframework.test.context.support.DefaultBootstrapContext";, +, +	private static final String DEFAULT_CACHE_AWARE_CONTEXT_LOADER_DELEGATE_CLASS_NAME = "org.springframework.test.context.support.DefaultCacheAwareContextLoaderDelegate";, +, +	 * Create the {@code BootstrapContext} for the specified {@linkplain Class test class}., +	 *, +	 * <p>Uses reflection to create a {@link org.springframework.test.context.support.DefaultBootstrapContext}, +	 * that uses a {@link org.springframework.test.context.support.DefaultCacheAwareContextLoaderDelegate}., +	 *, +	 * @param testClass the test class for which the bootstrap context should be created, +	 * @return a new {@code BootstrapContext}; never {@code null}, +	 */, +	@SuppressWarnings("unchecked"), +	static BootstrapContext createBootstrapContext(Class<?> testClass) {, +		CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate = createCacheAwareContextLoaderDelegate();, +, +		Class<? extends BootstrapContext> clazz = null;, +		try {, +			clazz = (Class<? extends BootstrapContext>) ClassUtils.forName(DEFAULT_BOOTSTRAP_CONTEXT_CLASS_NAME,, +				BootstrapUtils.class.getClassLoader());, +, +			Constructor<? extends BootstrapContext> constructor = clazz.getConstructor(Class.class,, +				CacheAwareContextLoaderDelegate.class);, +, +			if (logger.isDebugEnabled()) {, +				logger.debug(String.format("Instantiating BootstrapContext using constructor [%s]", constructor));, +			}, +			return instantiateClass(constructor, testClass, cacheAwareContextLoaderDelegate);, +		}, +		catch (Throwable t) {]