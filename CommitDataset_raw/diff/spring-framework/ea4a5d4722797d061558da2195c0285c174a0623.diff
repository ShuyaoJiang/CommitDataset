[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java, +import org.springframework.util.xml.DomUtils;, +		ManagedList<? super Object> resourceResolvers = parseResourceResolvers(parserContext, element, source);, +		if(!resourceResolvers.isEmpty()) {, +			resourceHandlerDef.getPropertyValues().add("resourceResolvers", resourceResolvers);, +		}, +, +		ManagedList<? super Object> resourceTransformers = parseResourceTransformers(parserContext, element, source);, +		if(!resourceTransformers.isEmpty()) {, +			resourceHandlerDef.getPropertyValues().add("resourceTransformers", resourceTransformers);, +		}, +, +	private ManagedList<? super Object> parseResourceResolvers(ParserContext parserContext, Element element, Object source) {, +		Element resolversElement = DomUtils.getChildElementByTagName(element, "resolvers");, +		ManagedList<? super Object> resourceResolvers = new ManagedList<Object>();, +		if (resolversElement != null) {, +			resourceResolvers.setSource(source);, +			for (Element beanElement : DomUtils.getChildElementsByTagName(resolversElement, "bean", "ref")) {, +				Object object = parserContext.getDelegate().parsePropertySubElement(beanElement, null);, +				resourceResolvers.add(object);, +			}, +		}, +		return resourceResolvers;, +	}, +, +	private ManagedList<? super Object> parseResourceTransformers(ParserContext parserContext, Element element, Object source) {, +		Element transformersElement = DomUtils.getChildElementByTagName(element, "transformers");, +		ManagedList<? super Object> resourceTransformers = new ManagedList<Object>();, +		if (transformersElement != null) {, +			resourceTransformers.setSource(source);, +			for (Element beanElement : DomUtils.getChildElementsByTagName(transformersElement, "bean", "ref")) {, +				Object object = parserContext.getDelegate().parsePropertySubElement(beanElement, null);, +				resourceTransformers.add(object);, +			}, +		}, +		return resourceTransformers;, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java, +import org.springframework.util.xml.DomUtils;, +		ManagedList<? super Object> resourceResolvers = parseResourceResolvers(parserContext, element, source);, +		if(!resourceResolvers.isEmpty()) {, +			resourceHandlerDef.getPropertyValues().add("resourceResolvers", resourceResolvers);, +		}, +, +		ManagedList<? super Object> resourceTransformers = parseResourceTransformers(parserContext, element, source);, +		if(!resourceTransformers.isEmpty()) {, +			resourceHandlerDef.getPropertyValues().add("resourceTransformers", resourceTransformers);, +		}, +, +	private ManagedList<? super Object> parseResourceResolvers(ParserContext parserContext, Element element, Object source) {, +		Element resolversElement = DomUtils.getChildElementByTagName(element, "resolvers");, +		ManagedList<? super Object> resourceResolvers = new ManagedList<Object>();, +		if (resolversElement != null) {, +			resourceResolvers.setSource(source);, +			for (Element beanElement : DomUtils.getChildElementsByTagName(resolversElement, "bean", "ref")) {, +				Object object = parserContext.getDelegate().parsePropertySubElement(beanElement, null);, +				resourceResolvers.add(object);, +			}, +		}, +		return resourceResolvers;, +	}, +, +	private ManagedList<? super Object> parseResourceTransformers(ParserContext parserContext, Element element, Object source) {, +		Element transformersElement = DomUtils.getChildElementByTagName(element, "transformers");, +		ManagedList<? super Object> resourceTransformers = new ManagedList<Object>();, +		if (transformersElement != null) {, +			resourceTransformers.setSource(source);, +			for (Element beanElement : DomUtils.getChildElementsByTagName(transformersElement, "bean", "ref")) {, +				Object object = parserContext.getDelegate().parsePropertySubElement(beanElement, null);, +				resourceTransformers.add(object);, +			}, +		}, +		return resourceTransformers;, +	}, +, +++ b/spring-webmvc/src/main/resources/META-INF/spring.schemas, +http\://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd=org/springframework/web/servlet/config/spring-mvc-4.1.xsd, +http\://www.springframework.org/schema/mvc/spring-mvc.xsd=org/springframework/web/servlet/config/spring-mvc-4.1.xsd, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java, +import org.springframework.util.xml.DomUtils;, +		ManagedList<? super Object> resourceResolvers = parseResourceResolvers(parserContext, element, source);, +		if(!resourceResolvers.isEmpty()) {, +			resourceHandlerDef.getPropertyValues().add("resourceResolvers", resourceResolvers);, +		}, +, +		ManagedList<? super Object> resourceTransformers = parseResourceTransformers(parserContext, element, source);, +		if(!resourceTransformers.isEmpty()) {, +			resourceHandlerDef.getPropertyValues().add("resourceTransformers", resourceTransformers);, +		}, +, +	private ManagedList<? super Object> parseResourceResolvers(ParserContext parserContext, Element element, Object source) {, +		Element resolversElement = DomUtils.getChildElementByTagName(element, "resolvers");, +		ManagedList<? super Object> resourceResolvers = new ManagedList<Object>();, +		if (resolversElement != null) {, +			resourceResolvers.setSource(source);, +			for (Element beanElement : DomUtils.getChildElementsByTagName(resolversElement, "bean", "ref")) {, +				Object object = parserContext.getDelegate().parsePropertySubElement(beanElement, null);, +				resourceResolvers.add(object);, +			}]