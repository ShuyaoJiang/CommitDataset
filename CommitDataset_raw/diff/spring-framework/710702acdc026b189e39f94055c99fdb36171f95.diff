[+++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/RouterFunctionExtensions.kt, +import org.springframework.web.reactive.function.server.RequestPredicates.pathPrefix, + * 			accept(TEXT_HTML).apply {, + * 			accept(APPLICATION_JSON).apply {, +typealias Routes = RouterDsl.() -> Unit, +, +fun RouterFunction<*>.route(request: ServerRequest, configure: Routes) =, +		RouterDsl().apply(configure).invoke(request), +, +class RouterDsl {, +	infix fun RequestPredicate.and(other: String): RequestPredicate = this.and(pathPrefix(other)), +, +	infix fun RequestPredicate.or(other: String): RequestPredicate = this.or(pathPrefix(other)), +, +	infix fun String.and(other: RequestPredicate): RequestPredicate = pathPrefix(this).and(other), +, +	infix fun String.or(other: RequestPredicate): RequestPredicate = pathPrefix(this).or(other), +, +	fun RequestPredicate.route(r: Routes) {, +		routes += RouterFunctions.nest(this, RouterDsl().apply(r).router()), +	}, +, +	fun String.route(r: Routes) {, +		routes += RouterFunctions.nest(pathPrefix(this), RouterDsl().apply(r).router()), +	fun GET(pattern: String) = RequestPredicates.GET(pattern), +, +	fun HEAD(pattern: String) = RequestPredicates.HEAD(pattern), +, +	fun POST(pattern: String) = RequestPredicates.POST(pattern), +, +	fun PUT(pattern: String) = RequestPredicates.PUT(pattern), +, +	fun PATCH(pattern: String) = RequestPredicates.PATCH(pattern), +, +	fun DELETE(pattern: String) = RequestPredicates.DELETE(pattern), +, +, +	fun OPTIONS(pattern: String) = RequestPredicates.OPTIONS(pattern), +, +	fun accept(mediaType: MediaType) = RequestPredicates.accept(mediaType), +, +	fun contentType(mediaType: MediaType) = RequestPredicates.contentType(mediaType), +, +	fun headers(headerPredicate: (ServerRequest.Headers) -> Boolean) = RequestPredicates.headers(headerPredicate), +, +	fun method(httpMethod: HttpMethod) = RequestPredicates.method(httpMethod), +, +	fun path(pattern: String) = RequestPredicates.path(pattern), +, +	fun pathExtension(extension: String) = RequestPredicates.pathExtension(extension), +, +	fun pathExtension(predicate: (String) -> Boolean) = RequestPredicates.pathExtension(predicate), +, +, +	fun queryParam(name: String, predicate: (String) -> Boolean) = RequestPredicates.queryParam(name, predicate), +, +	operator fun String.invoke(f: (ServerRequest) -> Mono<ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.path(this),  HandlerFunction { f(it) }), +	}, +, +++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/RouterFunctionExtensions.kt, +import org.springframework.web.reactive.function.server.RequestPredicates.pathPrefix, + * 			accept(TEXT_HTML).apply {, + * 			accept(APPLICATION_JSON).apply {, +typealias Routes = RouterDsl.() -> Unit, +, +fun RouterFunction<*>.route(request: ServerRequest, configure: Routes) =, +		RouterDsl().apply(configure).invoke(request), +, +class RouterDsl {, +	infix fun RequestPredicate.and(other: String): RequestPredicate = this.and(pathPrefix(other)), +, +	infix fun RequestPredicate.or(other: String): RequestPredicate = this.or(pathPrefix(other)), +, +	infix fun String.and(other: RequestPredicate): RequestPredicate = pathPrefix(this).and(other), +, +	infix fun String.or(other: RequestPredicate): RequestPredicate = pathPrefix(this).or(other), +, +	fun RequestPredicate.route(r: Routes) {, +		routes += RouterFunctions.nest(this, RouterDsl().apply(r).router()), +	}, +, +	fun String.route(r: Routes) {, +		routes += RouterFunctions.nest(pathPrefix(this), RouterDsl().apply(r).router()), +	fun GET(pattern: String) = RequestPredicates.GET(pattern), +, +	fun HEAD(pattern: String) = RequestPredicates.HEAD(pattern), +, +	fun POST(pattern: String) = RequestPredicates.POST(pattern), +, +	fun PUT(pattern: String) = RequestPredicates.PUT(pattern), +, +	fun PATCH(pattern: String) = RequestPredicates.PATCH(pattern), +, +	fun DELETE(pattern: String) = RequestPredicates.DELETE(pattern), +, +, +	fun OPTIONS(pattern: String) = RequestPredicates.OPTIONS(pattern), +, +	fun accept(mediaType: MediaType) = RequestPredicates.accept(mediaType)]