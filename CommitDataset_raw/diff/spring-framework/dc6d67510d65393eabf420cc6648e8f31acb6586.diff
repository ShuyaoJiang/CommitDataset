[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilder.java, +import javax.sql.DataSource;, +, +import org.springframework.util.Assert;, + * EmbeddedDatabase db = new EmbeddedDatabaseBuilder(), + *     .setType(H2), + *     .setScriptEncoding("UTF-8"), + *     .ignoreFailedDrops(true), + *     .addScript("schema.sql"), + *     .addScripts("user_data.sql", "country_data.sql"), + *     .build();, + *, + * // ..., + *, + * @see org.springframework.jdbc.datasource.init.ScriptUtils, + * @see org.springframework.jdbc.datasource.init.ResourceDatabasePopulator, + * @see org.springframework.jdbc.datasource.init.DatabasePopulatorUtils, +	 * Create a new embedded database builder with a {@link DefaultResourceLoader}., +	 * Create a new embedded database builder with the given {@link ResourceLoader}., +	 * @param resourceLoader the {@code ResourceLoader} to delegate to, +	 * @param databaseName the name of the embedded database to build, +	 * @param databaseType the type of embedded database to build, +	 * Set the factory to use to create the {@link DataSource} instance that, +	 * connects to the embedded database., +	 * <p>Defaults to {@link SimpleDriverDataSourceFactory} but can be overridden,, +	 * for example to introduce connection pooling., +	 * @since 4.0.3, +	public EmbeddedDatabaseBuilder setDataSourceFactory(DataSourceFactory dataSourceFactory) {, +		Assert.notNull(dataSourceFactory, "DataSourceFactory is required");, +		this.databaseFactory.setDataSourceFactory(dataSourceFactory);, +	 * Add default SQL scripts to execute to populate the database., +		return addScripts("schema.sql", "data.sql");, +	}, +, +	/**, +	 * Add an SQL script to execute to initialize or populate the database., +	 * @param script the script to execute, +	 * @return {@code this}, to facilitate method chaining, +	 */, +	public EmbeddedDatabaseBuilder addScript(String script) {, +		this.databasePopulator.addScript(this.resourceLoader.getResource(script));, +		return this;, +	}, +, +	/**, +	 * Add multiple SQL scripts to execute to initialize or populate the database., +	 * @param scripts the scripts to execute, +	 * @return {@code this}, to facilitate method chaining, +	 * @since 4.0.3, +	 */, +	public EmbeddedDatabaseBuilder addScripts(String... scripts) {, +		for (String script : scripts) {, +			addScript(script);, +		}, +		return this;, +	}, +, +	/**, +	 * Specify the character encoding used in all SQL scripts, if different from, +	 * the platform encoding., +	 * @param scriptEncoding the encoding used in scripts, +	 * @return {@code this}, to facilitate method chaining, +	 * @since 4.0.3, +	 */, +	public EmbeddedDatabaseBuilder setScriptEncoding(String scriptEncoding) {, +		this.databasePopulator.setSqlScriptEncoding(scriptEncoding);, +		return this;, +	}, +, +	/**, +	 * Specify the statement separator used in all SQL scripts, if a custom one., +	 * <p>Default is ";"., +	 * @param separator the statement separator, +	 * @return {@code this}, to facilitate method chaining, +	 * @since 4.0.3, +	 */, +	public EmbeddedDatabaseBuilder setSeparator(String separator) {, +		this.databasePopulator.setSeparator(separator);, +		return this;, +	}, +, +	/**, +	 * Specify the single-line comment prefix used in all SQL scripts., +	 * <p>Default is "--"., +	 * @param commentPrefix the prefix for single-line comments, +	 * @return {@code this}, to facilitate method chaining, +	 * @since 4.0.3, +	 */, +	public EmbeddedDatabaseBuilder setCommentPrefix(String commentPrefix) {, +		this.databasePopulator.setCommentPrefix(commentPrefix);, +		return this;, +	}, +, +	/**, +	 * Specify the start delimiter for block comments in all SQL scripts., +	 * <p>Default is "/*"., +	 * @param blockCommentStartDelimiter the start delimiter for block comments, +	 * @return {@code this}, to facilitate method chaining, +	 * @since 4.0.3, +	 * @see #setBlockCommentEndDelimiter]