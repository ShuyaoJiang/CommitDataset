[+++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/jta/JtaAfterCompletionSynchronization.java, + * Copyright 2002-2009 the original author or authors., + * Adapter for a JTA Synchronization, invoking the <code>afterCommit</code> /, + * <code>afterCompletion</code> callbacks of Spring {@link TransactionSynchronization}, + * objects callbacks after the outer JTA transaction has completed., + * @see TransactionSynchronization#afterCommit, + * @see TransactionSynchronization#afterCompletion, +	private final List<TransactionSynchronization> synchronizations;, +	public JtaAfterCompletionSynchronization(List<TransactionSynchronization> synchronizations) {, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/jta/JtaAfterCompletionSynchronization.java, + * Copyright 2002-2009 the original author or authors., + * Adapter for a JTA Synchronization, invoking the <code>afterCommit</code> /, + * <code>afterCompletion</code> callbacks of Spring {@link TransactionSynchronization}, + * objects callbacks after the outer JTA transaction has completed., + * @see TransactionSynchronization#afterCommit, + * @see TransactionSynchronization#afterCompletion, +	private final List<TransactionSynchronization> synchronizations;, +	public JtaAfterCompletionSynchronization(List<TransactionSynchronization> synchronizations) {, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/jta/JtaTransactionManager.java, +		Assert.notNull(jndiTemplate, "JndiTemplate must not be null");, +			return getJndiTemplate().lookup(userTransactionName, UserTransaction.class);, +			return getJndiTemplate().lookup(transactionManagerName, TransactionManager.class);, +			Class<?> registryClass = ClassUtils.forName(TRANSACTION_SYNCHRONIZATION_REGISTRY_CLASS_NAME,, +			UserTransaction ut = getJndiTemplate().lookup(jndiName, UserTransaction.class);, +		for (String jndiName : FALLBACK_TRANSACTION_MANAGER_NAMES) {, +				TransactionManager tm = getJndiTemplate().lookup(jndiName, TransactionManager.class);, +			Class<?> registryClass = ClassUtils.forName(TRANSACTION_SYNCHRONIZATION_REGISTRY_CLASS_NAME,, +	protected void registerAfterCompletionWithExistingTransaction(, +			Object transaction, List<TransactionSynchronization> synchronizations) {, +, +	protected void doRegisterAfterCompletionWithJtaTransaction(, +			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations), +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/jta/JtaAfterCompletionSynchronization.java, + * Copyright 2002-2009 the original author or authors., + * Adapter for a JTA Synchronization, invoking the <code>afterCommit</code> /, + * <code>afterCompletion</code> callbacks of Spring {@link TransactionSynchronization}, + * objects callbacks after the outer JTA transaction has completed., + * @see TransactionSynchronization#afterCommit, + * @see TransactionSynchronization#afterCompletion, +	private final List<TransactionSynchronization> synchronizations;, +	public JtaAfterCompletionSynchronization(List<TransactionSynchronization> synchronizations) {, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/jta/JtaTransactionManager.java, +		Assert.notNull(jndiTemplate, "JndiTemplate must not be null");, +			return getJndiTemplate().lookup(userTransactionName, UserTransaction.class);, +			return getJndiTemplate().lookup(transactionManagerName, TransactionManager.class);, +			Class<?> registryClass = ClassUtils.forName(TRANSACTION_SYNCHRONIZATION_REGISTRY_CLASS_NAME,, +			UserTransaction ut = getJndiTemplate().lookup(jndiName, UserTransaction.class);, +		for (String jndiName : FALLBACK_TRANSACTION_MANAGER_NAMES) {, +				TransactionManager tm = getJndiTemplate().lookup(jndiName, TransactionManager.class);, +			Class<?> registryClass = ClassUtils.forName(TRANSACTION_SYNCHRONIZATION_REGISTRY_CLASS_NAME,, +	protected void registerAfterCompletionWithExistingTransaction(, +			Object transaction, List<TransactionSynchronization> synchronizations) {, +, +	protected void doRegisterAfterCompletionWithJtaTransaction(, +			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations), +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/jta/WebSphereUowTransactionManager.java, +import org.springframework.transaction.support.TransactionSynchronization;, +	protected void doRegisterAfterCompletionWithJtaTransaction(, +			JtaTransactionObject txObject, List<TransactionSynchronization> synchronizations) {, +, +					List<TransactionSynchronization> synchronizations = TransactionSynchronizationManager.getSynchronizations();]