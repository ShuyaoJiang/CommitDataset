[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConditionEvaluator.java, +			ApplicationContext applicationContext, ClassLoader classLoader, ResourceLoader resourceLoader) {, +, +		this.context = new ConditionContextImpl(registry, environment, applicationContext, classLoader, resourceLoader);, +		if (metadata == null || !metadata.isAnnotated(Conditional.class.getName())) {, +		MultiValueMap<String, Object> attributes = metadata.getAllAnnotationAttributes(Conditional.class.getName(), true);, +		Object values = (attributes != null ? attributes.get("value") : null);, +		return (List<String[]>) (values != null ? values : Collections.emptyList());, +	private Condition getCondition(String conditionClassName, ClassLoader classloader) {, +		Class<?> conditionClass = ClassUtils.resolveClassName(conditionClassName, classloader);, +			if (getBeanFactory() instanceof BeanDefinitionRegistry) {, +			if (getRegistry() instanceof EnvironmentCapable) {, +			if (this.registry instanceof ResourceLoader) {, +			if (getRegistry() instanceof ApplicationContext) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConditionEvaluator.java, +			ApplicationContext applicationContext, ClassLoader classLoader, ResourceLoader resourceLoader) {, +, +		this.context = new ConditionContextImpl(registry, environment, applicationContext, classLoader, resourceLoader);, +		if (metadata == null || !metadata.isAnnotated(Conditional.class.getName())) {, +		MultiValueMap<String, Object> attributes = metadata.getAllAnnotationAttributes(Conditional.class.getName(), true);, +		Object values = (attributes != null ? attributes.get("value") : null);, +		return (List<String[]>) (values != null ? values : Collections.emptyList());, +	private Condition getCondition(String conditionClassName, ClassLoader classloader) {, +		Class<?> conditionClass = ClassUtils.resolveClassName(conditionClassName, classloader);, +			if (getBeanFactory() instanceof BeanDefinitionRegistry) {, +			if (getRegistry() instanceof EnvironmentCapable) {, +			if (this.registry instanceof ResourceLoader) {, +			if (getRegistry() instanceof ApplicationContext) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/Profile.java, + * will be bypassed unless one or more of the specified profiles are active. This is very, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConditionEvaluator.java, +			ApplicationContext applicationContext, ClassLoader classLoader, ResourceLoader resourceLoader) {, +, +		this.context = new ConditionContextImpl(registry, environment, applicationContext, classLoader, resourceLoader);, +		if (metadata == null || !metadata.isAnnotated(Conditional.class.getName())) {, +		MultiValueMap<String, Object> attributes = metadata.getAllAnnotationAttributes(Conditional.class.getName(), true);, +		Object values = (attributes != null ? attributes.get("value") : null);, +		return (List<String[]>) (values != null ? values : Collections.emptyList());, +	private Condition getCondition(String conditionClassName, ClassLoader classloader) {, +		Class<?> conditionClass = ClassUtils.resolveClassName(conditionClassName, classloader);, +			if (getBeanFactory() instanceof BeanDefinitionRegistry) {, +			if (getRegistry() instanceof EnvironmentCapable) {, +			if (this.registry instanceof ResourceLoader) {, +			if (getRegistry() instanceof ApplicationContext) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/Profile.java, + * will be bypassed unless one or more of the specified profiles are active. This is very, +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, + * Copyright 2002-2013 the original author or authors.]