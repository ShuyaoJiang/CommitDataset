[+++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceRegionHttpMessageConverter.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.http.MediaTypeFactory;, +import org.springframework.util.ClassUtils;, +	private static final boolean jafPresent = ClassUtils.isPresent(, +			"javax.activation.FileTypeMap", ResourceHttpMessageConverter.class.getClassLoader());, +, +	@SuppressWarnings("unchecked"), +	protected MediaType getDefaultContentType(Object object) {, +		if (jafPresent) {, +			if(object instanceof ResourceRegion) {, +				return MediaTypeFactory.getMediaType(((ResourceRegion) object).getResource());, +			}, +			else {, +				Collection<ResourceRegion> regions = (Collection<ResourceRegion>) object;, +				if(regions.size() > 0) {, +					return MediaTypeFactory.getMediaType(regions.iterator().next().getResource());, +				}, +			}, +		}, +		return MediaType.APPLICATION_OCTET_STREAM;, +	}, +, +	@Override, +++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceRegionHttpMessageConverter.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.http.MediaTypeFactory;, +import org.springframework.util.ClassUtils;, +	private static final boolean jafPresent = ClassUtils.isPresent(, +			"javax.activation.FileTypeMap", ResourceHttpMessageConverter.class.getClassLoader());, +, +	@SuppressWarnings("unchecked"), +	protected MediaType getDefaultContentType(Object object) {, +		if (jafPresent) {, +			if(object instanceof ResourceRegion) {, +				return MediaTypeFactory.getMediaType(((ResourceRegion) object).getResource());, +			}, +			else {, +				Collection<ResourceRegion> regions = (Collection<ResourceRegion>) object;, +				if(regions.size() > 0) {, +					return MediaTypeFactory.getMediaType(regions.iterator().next().getResource());, +				}, +			}, +		}, +		return MediaType.APPLICATION_OCTET_STREAM;, +	}, +, +	@Override, +++ b/spring-web/src/test/java/org/springframework/http/converter/ResourceRegionHttpMessageConverterTests.java, + * Copyright 2002-2017 the original author or authors., +import java.io.ByteArrayInputStream;, +import java.util.Collections;, +import org.mockito.BDDMockito;, +import org.mockito.Mockito;, +import static org.hamcrest.Matchers.is;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.assertTrue;, +	@Test // SPR-15041, +	public void applicationOctetStreamDefaultContentType() throws Exception {, +		MockHttpOutputMessage outputMessage = new MockHttpOutputMessage();, +		ClassPathResource body = Mockito.mock(ClassPathResource.class);, +		BDDMockito.given(body.getFilename()).willReturn("spring.dat");, +		BDDMockito.given(body.contentLength()).willReturn(12L);, +		BDDMockito.given(body.getInputStream()).willReturn(new ByteArrayInputStream("Spring Framework".getBytes()));, +		HttpRange range = HttpRange.createByteRange(0, 5);, +		ResourceRegion resourceRegion = range.toResourceRegion(body);, +, +		converter.write(Collections.singletonList(resourceRegion), null, outputMessage);, +, +		assertThat(outputMessage.getHeaders().getContentType(), is(MediaType.APPLICATION_OCTET_STREAM));, +		assertThat(outputMessage.getHeaders().getFirst(HttpHeaders.CONTENT_RANGE), is("bytes 0-5/12"));, +		assertThat(outputMessage.getBodyAsString(StandardCharsets.UTF_8), is("Spring"));, +	}, +]