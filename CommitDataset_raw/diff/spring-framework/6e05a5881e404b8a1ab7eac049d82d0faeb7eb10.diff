[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java, +import org.springframework.web.reactive.function.BodyInserters;, + * A non-blocking, reactive client for performing HTTP requests with Reactive, + * Streams back pressure. Provides a higher level, common API over HTTP client, + * libraries. Reactor Netty is used by default but other clients may be plugged, + * in with a {@link ClientHttpConnector}., + * <p>Use one of the static factory methods {@link #create()} or, + * {@link #create(String)} or obtain a {@link WebClient#builder()} to create an, + * instance., + * <p>For examples with a response body see, + * {@link RequestHeadersSpec#retrieve() retrieve()} and, + * {@link RequestHeadersSpec#exchange() exchange()}., + * For examples with a request body see, + * {@link RequestBodySpec#body(Publisher, Class) body(Publisher,Class)},, + * {@link RequestBodySpec#syncBody(Object) syncBody(Object)}, and, + * {@link RequestBodySpec#body(BodyInserter) body(BodyInserter)}., +	 * Create a new {@code WebClient} with a Reactor Netty connector., +	 * @see #builder(), +	 * A variant of {@link #create()} that accepts a default base URL. For more, +	 * details see {@link Builder#baseUrl(String) Builder.baseUrl(String)}., +	 * A mutable builder for creating a {@link WebClient}., +		 * Configure a base URL for requests performed through the client., +		 *, +		 * <p>For example given base URL "http://abc.com/v1":, +		 * <p><pre class="code">, +		 * Mono&#060;Account&#062; result = client.get(), +		 *         .uri("/accounts/{id}", 43), +		 *         .exchange(), +		 *         .then(response -> response.bodyToMono(Account.class));, +		 *, +		 * // Result: http://abc.com/v1/accounts/43, +		 *, +		 * Flux&#060;Account&#062; result = client.get(), +		 *         .uri(builder -> builder.path("/accounts").queryParam("q", "12").build()), +		 *         .exchange(), +		 *         .then(response -> response.bodyToFlux(Account.class));, +		 *, +		 * // Result: http://abc.com/v1/accounts?q=12, +		 * </pre>, +		 *, +		 * <p>The base URL can be overridden with an absolute URI:, +		 * <pre class="code">, +		 * Mono&#060;Account&#062; result = client.get(), +		 *         .uri("http://xyz.com/path"), +		 *         .exchange(), +		 *         .then(response -> response.bodyToMono(Account.class));, +		 *, +		 * // Result: http://xyz.com/path, +		 * </pre>, +		 *, +		 * <p>Or partially overridden with a {@code UriBuilder}:, +		 * <pre class="code">, +		 * Flux&#060;Account&#062; result = client.get(), +		 *         .uri(builder -> builder.replacePath("/v2/accounts").queryParam("q", "12").build()), +		 *         .exchange(), +		 *         .then(response -> response.bodyToFlux(Account.class));, +		 *, +		 * // Result: http://abc.com/v2/accounts?q=12, +		 * </pre>, +		 *, +		 * Set the body of the request using the given body inserter., +		 * {@link BodyInserters} provides access to built-in implementations of, +		 * {@link BodyInserter}., +		 * @param inserter the body inserter to use for the request body, +		 * @see org.springframework.web.reactive.function.BodyInserters, +		 * A shortcut for {@link #body(BodyInserter)} with a, +		 * {@linkplain BodyInserters#fromPublisher Publisher inserter}., +		 * For example:, +		 * <p><pre>, +		 * Mono<Person> personMono = ... ;, +		 *, +		 * Mono<Void> result = client.post(), +		 *     .uri("/persons/{id}", id), +		 *     .contentType(MediaType.APPLICATION_JSON), +		 *     .body(personMono, Person.class), +		 *     .retrieve(), +		 *     .bodyToMono(Void.class);, +		 * </pre>, +		 * A variant of {@link #body(Publisher, Class)} that allows providing, +		 * element type information that includes generics via a, +		 * {@link ParameterizedTypeReference}., +		 * @param publisher the {@code Publisher} to write to the request, +		 * @param typeReference the type reference of elements contained in the publisher, +		 * @param <T> the type of the elements contained in the publisher, +		 * @param <P> the type of the {@code Publisher}, +		 * @return this builder, +		 */, +		<T, P extends Publisher<T>> RequestHeadersSpec<?> body(P publisher,, +				ParameterizedTypeReference<T> typeReference);, +, +		/**, +		 * A shortcut for {@link #body(BodyInserter)} with an, +		 * {@linkplain BodyInserters#fromObject Object inserter}., +		 * For example:, +		 * <p><pre class="code">, +		 * Person person = ... ;, +		 *, +		 * Mono<Void> result = client.post(), +		 *     .uri("/persons/{id}", id), +		 *     .contentType(MediaType.APPLICATION_JSON)]