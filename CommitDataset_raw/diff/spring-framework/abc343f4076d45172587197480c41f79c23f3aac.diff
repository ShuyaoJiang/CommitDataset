[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +import org.springframework.context.annotation.ConfigurationClassParser.ImportRegistry;, +	private final ImportRegistry importRegistry;, +, +			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,, +			ImportRegistry importRegistry) {, +		this.importRegistry = importRegistry;, +			importRegistry.removeImportingClassFor(configClass.getMetadata().getClassName());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +import org.springframework.context.annotation.ConfigurationClassParser.ImportRegistry;, +	private final ImportRegistry importRegistry;, +, +			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,, +			ImportRegistry importRegistry) {, +		this.importRegistry = importRegistry;, +			importRegistry.removeImportingClassFor(configClass.getMetadata().getClassName());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +, +		void removeImportingClassFor(String importedClass);, +		private final MultiValueMap<String, AnnotationMetadata> imports = new LinkedMultiValueMap<String, AnnotationMetadata>();, +			this.imports.add(importedClass, importingClass);, +		}, +, +		@Override, +		public void removeImportingClassFor(String importedClass) {, +			for (List<AnnotationMetadata> list : this.imports.values()) {, +				for (Iterator<AnnotationMetadata> iterator = list.iterator(); iterator.hasNext();) {, +					if (iterator.next().getClassName().equals(importedClass)) {, +						iterator.remove();, +					}, +				}, +			}, +			List<AnnotationMetadata> list = this.imports.get(importedClass);, +			return (list == null || list.isEmpty() ? null : list.get(list.size() - 1));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +import org.springframework.context.annotation.ConfigurationClassParser.ImportRegistry;, +	private final ImportRegistry importRegistry;, +, +			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,, +			ImportRegistry importRegistry) {, +		this.importRegistry = importRegistry;, +			importRegistry.removeImportingClassFor(configClass.getMetadata().getClassName());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +, +		void removeImportingClassFor(String importedClass);, +		private final MultiValueMap<String, AnnotationMetadata> imports = new LinkedMultiValueMap<String, AnnotationMetadata>();, +			this.imports.add(importedClass, importingClass);, +		}, +, +		@Override, +		public void removeImportingClassFor(String importedClass) {, +			for (List<AnnotationMetadata> list : this.imports.values()) {, +				for (Iterator<AnnotationMetadata> iterator = list.iterator(); iterator.hasNext();) {, +					if (iterator.next().getClassName().equals(importedClass)) {, +						iterator.remove();, +					}, +				}, +			}, +			List<AnnotationMetadata> list = this.imports.get(importedClass);, +			return (list == null || list.isEmpty() ? null : list.get(list.size() - 1));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +						this.importBeanNameGenerator, parser.getImportRegistry());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +import org.springframework.context.annotation.ConfigurationClassParser.ImportRegistry;, +	private final ImportRegistry importRegistry;, +, +			ResourceLoader resourceLoader, Environment environment, BeanNameGenerator importBeanNameGenerator,, +			ImportRegistry importRegistry) {, +		this.importRegistry = importRegistry;, +			importRegistry.removeImportingClassFor(configClass.getMetadata().getClassName());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, +, +		void removeImportingClassFor(String importedClass);, +		private final MultiValueMap<String, AnnotationMetadata> imports = new LinkedMultiValueMap<String, AnnotationMetadata>();, +			this.imports.add(importedClass, importingClass);, +		}, +, +		@Override, +		public void removeImportingClassFor(String importedClass) {, +			for (List<AnnotationMetadata> list : this.imports.values()) {, +				for (Iterator<AnnotationMetadata> iterator = list.iterator(); iterator.hasNext();) {, +					if (iterator.next().getClassName().equals(importedClass)) {, +						iterator.remove();, +					}, +				}, +			}, +			List<AnnotationMetadata> list = this.imports.get(importedClass);, +			return (list == null || list.isEmpty() ? null : list.get(list.size() - 1));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +						this.importBeanNameGenerator, parser.getImportRegistry());, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ImportAwareTests.java, +	@Conditional(OnMissingBeanCondition.class), +	private static final class OnMissingBeanCondition implements ConfigurationCondition {, +			return context.getBeanFactory().getBeanNamesForType(MetadataHolder.class,]