[+++ b/build.gradle, +		optional("org.glassfish.tyrus:tyrus-spi:1.7"), +		optional("org.glassfish.tyrus:tyrus-core:1.7"), +		optional("org.glassfish.tyrus:tyrus-server:1.7"), +		optional("org.glassfish.tyrus:tyrus-container-servlet:1.7"), +++ b/build.gradle, +		optional("org.glassfish.tyrus:tyrus-spi:1.7"), +		optional("org.glassfish.tyrus:tyrus-core:1.7"), +		optional("org.glassfish.tyrus:tyrus-server:1.7"), +		optional("org.glassfish.tyrus:tyrus-container-servlet:1.7"), +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/GlassFishRequestUpgradeStrategy.java, +import java.lang.reflect.Method;, +import java.util.Map;, +import org.glassfish.tyrus.core.TyrusEndpointWrapper;, +import org.glassfish.tyrus.core.TyrusUpgradeResponse;, +import org.glassfish.tyrus.core.TyrusWebSocketEngine;, +import org.glassfish.tyrus.core.Utils;, +import org.glassfish.tyrus.core.Version;, +import org.glassfish.tyrus.core.cluster.ClusterContext;, +import org.glassfish.tyrus.core.monitoring.EndpointEventListener;, +import org.glassfish.tyrus.server.TyrusServerContainer;, +import org.glassfish.tyrus.spi.WebSocketEngine.UpgradeInfo;, +import org.glassfish.tyrus.spi.Writer;, + * A WebSocket request upgrade strategy for GlassFish 4.0.1 and beyond., +	private static final Random random = new Random();, +	private static final Constructor<?> tyrusServletWriterConstructor;, +	private static final Method endpointRegistrationMethod;, +			ClassLoader classLoader = GlassFishRequestUpgradeStrategy.class.getClassLoader();, +			Class<?> type = classLoader.loadClass("org.glassfish.tyrus.servlet.TyrusServletWriter");, +			tyrusServletWriterConstructor = type.getDeclaredConstructor(TyrusHttpUpgradeHandler.class);, +			ReflectionUtils.makeAccessible(tyrusServletWriterConstructor);, +			Class<?> endpointType = TyrusEndpointWrapper.class;, +			endpointRegistrationMethod = TyrusWebSocketEngine.class.getDeclaredMethod("register", endpointType);, +			ReflectionUtils.makeAccessible(endpointRegistrationMethod);, +	private final ComponentProviderService componentProviderService = ComponentProviderService.create();, +, +, +			String subProtocol, List<Extension> extensions, Endpoint endpoint) throws HandshakeFailureException {, +		TyrusServerContainer serverContainer = (TyrusServerContainer) getContainer(servletRequest);, +		TyrusWebSocketEngine engine = (TyrusWebSocketEngine) serverContainer.getWebSocketEngine();, +		TyrusEndpointWrapper tyrusEndpoint = null;, +			tyrusEndpoint = createTyrusEndpoint(endpoint, subProtocol, extensions, serverContainer);, +			endpointRegistrationMethod.invoke(engine, tyrusEndpoint);, +			String endpointPath = tyrusEndpoint.getEndpointPath();, +			HttpHeaders headers = request.getHeaders();, +, +			RequestContext requestContext = createRequestContext(servletRequest, endpointPath, headers);, +			TyrusUpgradeResponse upgradeResponse = new TyrusUpgradeResponse();, +			UpgradeInfo upgradeInfo = engine.upgrade(requestContext, upgradeResponse);, +, +			switch (upgradeInfo.getStatus()) {, +				case SUCCESS:, +					TyrusHttpUpgradeHandler handler = servletRequest.upgrade(TyrusHttpUpgradeHandler.class);, +					Writer servletWriter = createTyrusServletWriter(handler);, +					handler.preInit(upgradeInfo, servletWriter, servletRequest.getUserPrincipal() != null);, +					servletResponse.setStatus(upgradeResponse.getStatus());, +					for (Map.Entry<String, List<String>> entry : upgradeResponse.getHeaders().entrySet()) {, +						servletResponse.addHeader(entry.getKey(), Utils.getHeaderFromList(entry.getValue()));, +					servletResponse.flushBuffer();, +					if (logger.isTraceEnabled()) {, +						logger.trace("Successful upgrade uri=" + servletRequest.getRequestURI() +, +								", response headers=" + upgradeResponse.getHeaders());, +					}, +					break;, +				case HANDSHAKE_FAILED:, +					// Should never happen, +					throw new HandshakeFailureException("Unexpected handshake failure: " + request.getURI());, +				case NOT_APPLICABLE:, +					// Should never happen, +					throw new HandshakeFailureException("Unexpected handshake mapping failure: " + request.getURI());, +			}, +		}, +		catch (Exception ex) {, +			throw new HandshakeFailureException("Error during handshake: " + request.getURI(), ex);, +			if (tyrusEndpoint != null) {, +				engine.unregister(tyrusEndpoint);, +			}, +	private TyrusEndpointWrapper createTyrusEndpoint(Endpoint endpoint, String protocol,, +			List<Extension> extensions, WebSocketContainer container) throws DeploymentException {, +, +		endpointConfig.setSubprotocols(Arrays.asList(protocol));, +		endpointConfig.setExtensions(extensions);, +, +		TyrusEndpointWrapper.SessionListener sessionListener = new TyrusEndpointWrapper.SessionListener() {};, +		ClusterContext clusterContext = null;, +		EndpointEventListener eventListener = EndpointEventListener.NO_OP;, +, +		return new TyrusEndpointWrapper(endpoint, endpointConfig, this.componentProviderService,, +				container, "/",  endpointConfig.getConfigurator(), sessionListener, clusterContext, eventListener);, +	private RequestContext createRequestContext(HttpServletRequest request, String endpointPath, HttpHeaders headers) {, +		RequestContext context =, +				RequestContext.Builder.create(), +						.requestURI(URI.create(endpointPath)), +						.userPrincipal(request.getUserPrincipal()), +						.secure(request.isSecure()), +						.remoteAddr(request.getRemoteAddr()), +						.build();, +		for (String header : headers.keySet()) {, +			context.getHeaders().put(header, headers.get(header));, +		return context;]