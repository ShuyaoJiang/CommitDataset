[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorRegistration.java, + * Copyright 2002-2014 the original author or authors., +		if (this.includePatterns.isEmpty() && this.excludePatterns.isEmpty()) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/InterceptorRegistration.java, + * Copyright 2002-2014 the original author or authors., +		if (this.includePatterns.isEmpty() && this.excludePatterns.isEmpty()) {, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/InterceptorRegistryTests.java, +	/**, +	 * Test for SPR-11130, +	 */, +	@Test, +	public void addInterceptorWithExcludePathPatternOnly() {, +		registry.addInterceptor(interceptor1).excludePathPatterns("/path1/secret");, +		registry.addInterceptor(interceptor2).addPathPatterns("/path2");, +, +		assertEquals(Arrays.asList(interceptor1), getInterceptorsForPath("/path1"));, +		assertEquals(Arrays.asList(interceptor1, interceptor2), getInterceptorsForPath("/path2"));, +		assertEquals(Collections.emptyList(), getInterceptorsForPath("/path1/secret"));, +	}, +, +, +		for (Object interceptor : registry.getInterceptors()) {, +			if (interceptor instanceof MappedInterceptor) {, +				MappedInterceptor mappedInterceptor = (MappedInterceptor) interceptor;, +			else if (interceptor instanceof HandlerInterceptor) {, +				result.add((HandlerInterceptor) interceptor);, +				fail("Unexpected interceptor type: " + interceptor.getClass().getName());]