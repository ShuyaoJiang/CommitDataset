[+++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * @param type the backing type (or {@code null} if it should get resolved), +		if (streamAvailable && StreamDelegate.isStream(this.type)) {, +			return StreamDelegate.getStreamElementType(this);, +, +	private static class StreamDelegate {, +		public static boolean isStream(Class<?> type) {, +		public static TypeDescriptor getStreamElementType(TypeDescriptor source) {, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * @param type the backing type (or {@code null} if it should get resolved), +		if (streamAvailable && StreamDelegate.isStream(this.type)) {, +			return StreamDelegate.getStreamElementType(this);, +, +	private static class StreamDelegate {, +		public static boolean isStream(Class<?> type) {, +		public static TypeDescriptor getStreamElementType(TypeDescriptor source) {, +++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java, + * Copyright 2002-2015 the original author or authors., +	private static final boolean jafPresent = ClassUtils.isPresent(, +			"javax.activation.FileTypeMap", ResourceHttpMessageConverter.class.getClassLoader());, +	 * Inner class to avoid a hard-coded JAF dependency., +			// See if we can find the extended mime.types from the context-support module..., +			String filename = resource.getFilename();, +			if (filename != null) {, +				String mediaType = fileTypeMap.getContentType(filename);, +				if (StringUtils.hasText(mediaType)) {, +					return MediaType.parseMediaType(mediaType);, +			}, +			return null;, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * @param type the backing type (or {@code null} if it should get resolved), +		if (streamAvailable && StreamDelegate.isStream(this.type)) {, +			return StreamDelegate.getStreamElementType(this);, +, +	private static class StreamDelegate {, +		public static boolean isStream(Class<?> type) {, +		public static TypeDescriptor getStreamElementType(TypeDescriptor source) {, +++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java, + * Copyright 2002-2015 the original author or authors., +	private static final boolean jafPresent = ClassUtils.isPresent(, +			"javax.activation.FileTypeMap", ResourceHttpMessageConverter.class.getClassLoader());, +	 * Inner class to avoid a hard-coded JAF dependency., +			// See if we can find the extended mime.types from the context-support module..., +			String filename = resource.getFilename();, +			if (filename != null) {, +				String mediaType = fileTypeMap.getContentType(filename);, +				if (StringUtils.hasText(mediaType)) {, +					return MediaType.parseMediaType(mediaType);, +			}, +			return null;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java, + * Copyright 2002-2015 the original author or authors., +	private static final Log logger = LogFactory.getLog(ResourceHttpRequestHandler.class);, +, +	private static final boolean jafPresent = ClassUtils.isPresent(, +			"javax.activation.FileTypeMap", ResourceHttpRequestHandler.class.getClassLoader());, +, +, +, +	 * Inner class to avoid a hard-coded JAF dependency., +			// See if we can find the extended mime.types from the context-support module...]