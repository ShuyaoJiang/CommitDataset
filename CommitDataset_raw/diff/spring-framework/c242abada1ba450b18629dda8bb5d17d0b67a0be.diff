[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, +import org.springframework.util.StringUtils;, +						if ((fallbackToMeta && StringUtils.isEmpty(AnnotationUtils.getValue(metaAnn))) ||, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, +import org.springframework.util.StringUtils;, +						if ((fallbackToMeta && StringUtils.isEmpty(AnnotationUtils.getValue(metaAnn))) ||, +++ b/spring-context/src/test/java/org/springframework/beans/factory/support/QualifierAnnotationAutowireContextTests.java, +		RootBeanDefinition person2 = new RootBeanDefinition(DefaultValueQualifiedPerson.class, cavs2, null);, +	@TestQualifierWithDefaultValue, +	private static class DefaultValueQualifiedPerson extends Person {, +, +		public DefaultValueQualifiedPerson() {, +			super(null);, +		}, +, +		public DefaultValueQualifiedPerson(String name) {, +			super(name);, +		}, +	}, +, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, +import org.springframework.util.StringUtils;, +						if ((fallbackToMeta && StringUtils.isEmpty(AnnotationUtils.getValue(metaAnn))) ||, +++ b/spring-context/src/test/java/org/springframework/beans/factory/support/QualifierAnnotationAutowireContextTests.java, +		RootBeanDefinition person2 = new RootBeanDefinition(DefaultValueQualifiedPerson.class, cavs2, null);, +	@TestQualifierWithDefaultValue, +	private static class DefaultValueQualifiedPerson extends Person {, +, +		public DefaultValueQualifiedPerson() {, +			super(null);, +		}, +, +		public DefaultValueQualifiedPerson(String name) {, +			super(name);, +		}, +	}, +, +, +++ b/spring-core/src/main/java/org/springframework/util/StringUtils.java, +	 * Check whether the given String is empty., +	 * <p>This method accepts any Object as an argument, comparing it to, +	 * <code>null</code> and the empty String. As a consequence, this method, +	 * will never return <code>true</code> for a non-null non-String object., +	 * <p>The Object signature is useful for general attribute handling code, +	 * that commonly deals with Strings but generally has to iterate over, +	 * Objects since attributes may e.g. be primitive value objects as well., +	 * @param str the candidate String, +	 * @since 3.2.1, +	 */, +	public static boolean isEmpty(Object str) {, +		return (str == null || "".equals(str));, +	}, +, +	/**]