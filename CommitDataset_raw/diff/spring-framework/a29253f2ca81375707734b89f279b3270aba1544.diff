[+++ b/org.springframework.context/src/main/java/org/springframework/context/config/AbstractPropertyLoadingBeanDefinitionParser.java, + * @author Dave Syer, +, +, +		String fileEncoding = element.getAttribute("file-encoding");, +		if (StringUtils.hasLength(fileEncoding)) {, +			builder.addPropertyReference("fileEncoding", fileEncoding);, +		}, +, +		String order = element.getAttribute("order");, +		if (StringUtils.hasLength(order)) {, +			builder.addPropertyValue("order", Integer.valueOf(order));, +		}, +, +		builder.addPropertyValue("ignoreResourceNotFound",, +				Boolean.valueOf(element.getAttribute("ignore-resource-not-found")));, +, +		builder.addPropertyValue("localOverride",, +				Boolean.valueOf(element.getAttribute("local-override")));, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/config/AbstractPropertyLoadingBeanDefinitionParser.java, + * @author Dave Syer, +, +, +		String fileEncoding = element.getAttribute("file-encoding");, +		if (StringUtils.hasLength(fileEncoding)) {, +			builder.addPropertyReference("fileEncoding", fileEncoding);, +		}, +, +		String order = element.getAttribute("order");, +		if (StringUtils.hasLength(order)) {, +			builder.addPropertyValue("order", Integer.valueOf(order));, +		}, +, +		builder.addPropertyValue("ignoreResourceNotFound",, +				Boolean.valueOf(element.getAttribute("ignore-resource-not-found")));, +, +		builder.addPropertyValue("localOverride",, +				Boolean.valueOf(element.getAttribute("local-override")));, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/config/PropertyOverrideBeanDefinitionParser.java, +import org.springframework.beans.factory.support.BeanDefinitionBuilder;, + * @author Dave Syer, +	@Override, +	protected void doParse(Element element, BeanDefinitionBuilder builder) {, +, +		super.doParse(element, builder);, +		builder.addPropertyValue("ignoreInvalidKeys",, +				Boolean.valueOf(element.getAttribute("ignore-unresolvable")));, +, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/config/AbstractPropertyLoadingBeanDefinitionParser.java, + * @author Dave Syer, +, +, +		String fileEncoding = element.getAttribute("file-encoding");, +		if (StringUtils.hasLength(fileEncoding)) {, +			builder.addPropertyReference("fileEncoding", fileEncoding);, +		}, +, +		String order = element.getAttribute("order");, +		if (StringUtils.hasLength(order)) {, +			builder.addPropertyValue("order", Integer.valueOf(order));, +		}, +, +		builder.addPropertyValue("ignoreResourceNotFound",, +				Boolean.valueOf(element.getAttribute("ignore-resource-not-found")));, +, +		builder.addPropertyValue("localOverride",, +				Boolean.valueOf(element.getAttribute("local-override")));, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/config/PropertyOverrideBeanDefinitionParser.java, +import org.springframework.beans.factory.support.BeanDefinitionBuilder;, + * @author Dave Syer, +	@Override, +	protected void doParse(Element element, BeanDefinitionBuilder builder) {, +, +		super.doParse(element, builder);, +		builder.addPropertyValue("ignoreInvalidKeys",, +				Boolean.valueOf(element.getAttribute("ignore-unresolvable")));, +, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/config/PropertyPlaceholderBeanDefinitionParser.java, +import org.springframework.beans.factory.support.BeanDefinitionBuilder;, +import org.springframework.util.StringUtils;, + * @author Dave Syer, +	@Override, +	protected void doParse(Element element, BeanDefinitionBuilder builder) {, +	, +		super.doParse(element, builder);, +, +		builder.addPropertyValue("ignoreUnresolvablePlaceholders",, +				Boolean.valueOf(element.getAttribute("ignore-unresolvable")));, +, +		String systemPropertiesModeName = element.getAttribute("system-properties-mode");, +		if (StringUtils.hasLength(systemPropertiesModeName)) {, +			builder.addPropertyValue("systemPropertiesModeName", "SYSTEM_PROPERTIES_MODE_"+systemPropertiesModeName);, +		}]