[+++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, +import org.springframework.util.Assert;, +import org.springframework.web.util.UrlPathHelper;, +	private ContextPathHelper contextPathHelper;, +, +, +, +	/**, +	 * Configure a contextPath value that will replace the contextPath of, +	 * proxy-forwarded requests., +	 *, +	 * <p>This is useful when external clients are not aware of the application, +	 * context path. However a proxy forwards the request to a URL that includes, +	 * a contextPath., +	 *, +	 * @param contextPath the context path; the given value will be sanitized to, +	 * ensure it starts with a '/' but does not end with one, or if the context, +	 * path is empty (default, root context) it is left as-is., +	 */, +	public void setContextPath(String contextPath) {, +		Assert.notNull(contextPath, "'contextPath' must not be null");, +		this.contextPathHelper = new ContextPathHelper(contextPath);, +	}, +, +, +		filterChain.doFilter(new ForwardedHeaderRequestWrapper(request, this.contextPathHelper), response);, +		private final String contextPath;, +, +		private final String requestUri;, +, +		public ForwardedHeaderRequestWrapper(HttpServletRequest request, ContextPathHelper pathHelper) {, +, +			this.contextPath = (pathHelper != null ? pathHelper.getContextPath(request) : request.getContextPath());, +			this.requestUri = (pathHelper != null ? pathHelper.getRequestUri(request) : request.getRequestURI());, +			this.requestUrl = initRequestUrl(this.scheme, this.host, port, this.requestUri);, +, +		public String getContextPath() {, +			return this.contextPath;, +		}, +, +		@Override, +		public String getRequestURI() {, +			return this.requestUri;, +		}, +, +		@Override, +, +	private static class ContextPathHelper {, +, +		private final String contextPath;, +, +		private final UrlPathHelper urlPathHelper;, +, +, +		public ContextPathHelper(String contextPath) {, +			Assert.notNull(contextPath);, +			this.contextPath = sanitizeContextPath(contextPath);, +			this.urlPathHelper = new UrlPathHelper();, +			this.urlPathHelper.setUrlDecode(false);, +			this.urlPathHelper.setRemoveSemicolonContent(false);, +		}, +, +		private static String sanitizeContextPath(String contextPath) {, +			contextPath = contextPath.trim();, +			if (contextPath.isEmpty()) {, +				return contextPath;, +			}, +			if (contextPath.equals("/")) {, +				return "/";, +			}, +			if (contextPath.charAt(0) != '/') {, +				contextPath = "/"  + contextPath;, +			}, +			while (contextPath.endsWith("/")) {, +				contextPath = contextPath.substring(0, contextPath.length() -1);, +			}, +			return contextPath;, +		}, +, +		public String getContextPath(HttpServletRequest request) {, +			return this.contextPath;, +		}, +, +		public String getRequestUri(HttpServletRequest request) {, +			String pathWithinApplication = this.urlPathHelper.getPathWithinApplication(request);, +			if (this.contextPath.equals("/") && pathWithinApplication.startsWith("/")) {, +				return pathWithinApplication;, +			}, +			return this.contextPath + pathWithinApplication;, +		}, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, +import org.springframework.util.Assert;, +import org.springframework.web.util.UrlPathHelper;, +	private ContextPathHelper contextPathHelper;, +, +, +, +	/**]