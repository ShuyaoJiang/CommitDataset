[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java, +	private String requestContextAttribute;, +, +	/**, +	 * Set the name of the RequestContext attribute for this view., +	 * Default is none., +	 */, +	public void setRequestContextAttribute(String requestContextAttribute) {, +		this.requestContextAttribute = requestContextAttribute;, +	}, +, +	/**, +	 * Return the name of the RequestContext attribute, if any., +	 */, +	public String getRequestContextAttribute() {, +		return this.requestContextAttribute;, +	}, +, +, +		// Expose RequestContext?, +		if (this.requestContextAttribute != null) {, +			mergedModel.put(this.requestContextAttribute, createRequestContext(exchange, mergedModel));, +		}, +, +	 * Create a RequestContext to expose under the specified attribute name., +	 * <p>The default implementation creates a standard RequestContext instance for the, +	 * given request and model. Can be overridden in subclasses for custom instances., +	 * @param exchange current exchange, +	 * @param model combined output Map (never {@code null}),, +	 * with dynamic values taking precedence over static attributes, +	 * @return the RequestContext instance, +	 * @see #setRequestContextAttribute, +	 */, +	protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model) {, +		return new RequestContext(exchange, model, this.applicationContext);, +	}, +, +	/**, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/AbstractView.java, +	private String requestContextAttribute;, +, +	/**, +	 * Set the name of the RequestContext attribute for this view., +	 * Default is none., +	 */, +	public void setRequestContextAttribute(String requestContextAttribute) {, +		this.requestContextAttribute = requestContextAttribute;, +	}, +, +	/**, +	 * Return the name of the RequestContext attribute, if any., +	 */, +	public String getRequestContextAttribute() {, +		return this.requestContextAttribute;, +	}, +, +, +		// Expose RequestContext?, +		if (this.requestContextAttribute != null) {, +			mergedModel.put(this.requestContextAttribute, createRequestContext(exchange, mergedModel));, +		}, +, +	 * Create a RequestContext to expose under the specified attribute name., +	 * <p>The default implementation creates a standard RequestContext instance for the, +	 * given request and model. Can be overridden in subclasses for custom instances., +	 * @param exchange current exchange, +	 * @param model combined output Map (never {@code null}),, +	 * with dynamic values taking precedence over static attributes, +	 * @return the RequestContext instance, +	 * @see #setRequestContextAttribute, +	 */, +	protected RequestContext createRequestContext(ServerWebExchange exchange, Map<String, Object> model) {, +		return new RequestContext(exchange, model, this.applicationContext);, +	}, +, +	/**, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/BindStatus.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.web.reactive.result.view;, +, +import java.beans.PropertyEditor;, +import java.util.Arrays;, +import java.util.List;, +, +import org.springframework.beans.BeanWrapper;, +import org.springframework.beans.PropertyAccessorFactory;]