[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/LazyInitTargetSourceCreator.java, + * Copyright 2002-2014 the original author or authors., + * without actually initializing the target bean instance., +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/LazyInitTargetSourceCreator.java, + * Copyright 2002-2014 the original author or authors., + * without actually initializing the target bean instance., +++ b/spring-aop/src/main/java/org/springframework/aop/target/AbstractBeanFactoryBasedTargetSource.java, + * Copyright 2002-2014 the original author or authors., +public abstract class AbstractBeanFactoryBasedTargetSource implements TargetSource, BeanFactoryAware, Serializable {, +		StringBuilder sb = new StringBuilder(getClass().getSimpleName());, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/LazyInitTargetSourceCreator.java, + * Copyright 2002-2014 the original author or authors., + * without actually initializing the target bean instance., +++ b/spring-aop/src/main/java/org/springframework/aop/target/AbstractBeanFactoryBasedTargetSource.java, + * Copyright 2002-2014 the original author or authors., +public abstract class AbstractBeanFactoryBasedTargetSource implements TargetSource, BeanFactoryAware, Serializable {, +		StringBuilder sb = new StringBuilder(getClass().getSimpleName());, +++ /dev/null, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/LazyInitTargetSourceCreator.java, + * Copyright 2002-2014 the original author or authors., + * without actually initializing the target bean instance., +++ b/spring-aop/src/main/java/org/springframework/aop/target/AbstractBeanFactoryBasedTargetSource.java, + * Copyright 2002-2014 the original author or authors., +public abstract class AbstractBeanFactoryBasedTargetSource implements TargetSource, BeanFactoryAware, Serializable {, +		StringBuilder sb = new StringBuilder(getClass().getSimpleName());, +++ /dev/null, +++ b/spring-context/src/test/java/org/springframework/cache/interceptor/CacheResolverCustomizationTests.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.cache.interceptor;, +, +import java.lang.reflect.Method;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.concurrent.atomic.AtomicLong;, +, +import org.junit.Before;, +import org.junit.Test;, +, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.cache.Cache;, +import org.springframework.cache.CacheManager;, +import org.springframework.cache.CacheTestUtils;, +import org.springframework.cache.annotation.CacheConfig;, +import org.springframework.cache.annotation.Cacheable;, +import org.springframework.cache.annotation.CachingConfigurerSupport;, +import org.springframework.cache.annotation.EnableCaching;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.util.ReflectionUtils;, +, +import static org.junit.Assert.*;, +import static org.springframework.cache.CacheTestUtils.*;, +, +/**, + * Provides various {@link CacheResolver} customisations scenario, + *, + * @author Stephane Nicoll, + * @since 4.1, + */, +public class CacheResolverCustomizationTests {, +, +	private CacheManager cacheManager;, +, +	private CacheManager anotherCacheManager;, +, +	private SimpleService simpleService;, +, +, +	@Before, +	public void setUp() {, +		ApplicationContext context = new AnnotationConfigApplicationContext(Config.class);, +		this.cacheManager = context.getBean("cacheManager", CacheManager.class);, +		this.anotherCacheManager = context.getBean("anotherCacheManager", CacheManager.class);, +, +		this.simpleService = context.getBean(SimpleService.class);, +	}, +, +	@Test, +	public void noCustomization() {, +		Cache cache = cacheManager.getCache("default");, +, +		Object key = new Object();, +		assertCacheMiss(key, cache);]