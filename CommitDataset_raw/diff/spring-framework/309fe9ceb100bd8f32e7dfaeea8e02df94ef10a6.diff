[+++ b/src/asciidoc/index.adoc, +{javadoc-baseurl}/org/springframework/beans/factory/BeanFactory.html[`BeanFactory`], +{javadoc-baseurl}/org/springframework/context/ApplicationContext.html[`ApplicationContext`], +{javadoc-baseurl}/org/springframework/context/support/SimpleThreadScope.html[`SimpleThreadScope`]., +{javadoc-baseurl}/org/springframework/beans/factory/config/Scope.html[`Scope`, +`@Conditional` Javadoc] for more detail., +{javadoc-baseurl}/org/springframework/core/env/PropertySource.html[`PropertySource` class], +and the {javadoc-baseurl}org/springframework/context/annotation/PropertySource.html[`@PropertySource`, +{javadoc-baseurl}/org/springframework/jca/context/SpringContextResourceAdapter.html[`SpringContextResourceAdapter`], +{javadoc-baseurl}/org/springframework/validation/MessageCodesResolver.html[`MessageCodesResolver`], +{javadoc-baseurl}/org/springframework/validation/DefaultMessageCodesResolver.html[`DefaultMessageCodesResolver`], +[[mvc-ann-restcontroller]], +===== Creating REST Controllers with the @RestController annotation, +, +It's a very common use case to have Controllers implement a REST API, thus serving only, +JSON, XML or custom MediaType content. For convenience, instead of annotating all your, +`@RequestMapping` methods with `@ResponseBody`, you can annotate your Controller Class, +with `@RestController`., +, +{javadoc-baseurl}org/springframework/web/bind/annotation/RestController.html[`@RestController`], +is a stereotype annotation that combines `@ResponseBody` and `@Controller`. More than, +that, it gives more meaning to your Controller and also may carry additional semantics, +in future releases of the framework., +, +As with regular `@Controllers`, a `@RestController` may be assisted by a, +`@ControllerAdvice` Bean. See the <<mvc-ann-controller-advice>> section for more details., +and such methods apply to many controllers. See the <<mvc-ann-controller-advice>> section, +for more details., +`WebBindingInitializer`. See the <<mvc-ann-controller-advice>> section for more details., +which case they apply to matching controllers. This provides an alternative to using a, +`WebBindingInitializer`. See the <<mvc-ann-controller-advice>> section for more details., +[[mvc-ann-controller-advice]], +===== Assisting Controllers with the @ControllerAdvice annotation, +The `@ControllerAdvice` annotation is a component annotation allowing implementation, +classes to be autodetected through classpath scanning. It is automatically enabled when, +using the MVC namespace or the MVC Java config., +, +Classes annotated with `@ControllerAdvice` can contain `@ExceptionHandler`,, +`@InitBinder`, and `@ModelAttribute` annotated methods and those will apply to, +`@RequestMapping` methods across controller hierarchies as opposed to the controller, +hierarchy within which they are declared., +, +The `@ControllerAdvice` annotation can also target a subset of controllers with its, +attributes:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	// Target all Controllers annotated with @RestController, +	@ControllerAdvice(annotations = RestController.class), +	public class AnnotationAdvice {}, +, +	// Target all Controllers within specific packages, +	@ControllerAdvice("org.example.controllers"), +	public class BasePackageAdvice {}, +, +	// Target all Controllers assignable to specific classes, +	@ControllerAdvice(assignableTypes = {ControllerInterface.class, AbstractController.class}), +	public class AssignableTypesAdvice {}, +----, +, +Check out the, +{javadoc-baseurl}/org/springframework/web/bind/annotation/ControllerAdvice.html[`@ControllerAdvice`, +documentation] for more details., +[[mvc-construct-uri-controllers]], +=== Building URIs to Controllers and methods, +Spring MVC provides another mechanism for building and encoding URIs that link to, +Controllers and methods defined within an application., +{javadoc-baseurl}/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.html[`MvcUriComponentsBuilder`], +extends `UriComponentsBuilder` and provides such possibilities., +, +Given this Controller:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Controller, +	@RequestMapping("/hotels/{hotel}"), +	public class BookingController {, +, +		@RequestMapping("/bookings/{booking}"), +		public String getBooking(@PathVariable Long booking) {, +, +		// ..., +, +	}, +----, +, +and using the `MvcUriComponentsBuilder`, the previous example is now:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	UriComponents uriComponents = MvcUriComponentsBuilder, +		.fromMethodName(BookingController.class, "getBooking",21).buildAndExpand(42);, +, +	URI uri = uriComponents.encode().toUri();, +----, +, +The `MvcUriComponentsBuilder` can also create "mock Controllers", thus enabling to create]