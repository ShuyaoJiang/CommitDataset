[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +			boolean broadcast = sendToUser.broadcast();, +			if (user == null) {, +				if (sessionId == null) {, +					throw new MissingSessionUserException(message);, +				}, +				user = sessionId;, +				broadcast = false;, +			}, +				if (broadcast) {, +		if (principal != null) {, +			return (principal instanceof DestinationUserNameProvider ?, +					((DestinationUserNameProvider) principal).getDestinationUserName() : principal.getName());, +		return null;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +			boolean broadcast = sendToUser.broadcast();, +			if (user == null) {, +				if (sessionId == null) {, +					throw new MissingSessionUserException(message);, +				}, +				user = sessionId;, +				broadcast = false;, +			}, +				if (broadcast) {, +		if (principal != null) {, +			return (principal instanceof DestinationUserNameProvider ?, +					((DestinationUserNameProvider) principal).getDestinationUserName() : principal.getName());, +		return null;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolver.java, +		Set<String> resolved = new HashSet<String>();, +			String d = getTargetDestination(destination, info.getDestinationWithoutPrefix(), sessionId, info.getUser());, +			if (d != null) {, +				resolved.add(d);, +			}, +		return new UserDestinationResult(destination, resolved, info.getSubscribeDestination(), info.getUser());, +			user = (principal != null ? principal.getName() : null);, +			Assert.isTrue(endIndex > 0, "Expected destination pattern \"/user/{userId}/**\"");, +			user = user.equals(sessionId) ? null : user;, +	 * This methods determines the translated destination to use based on the source, +	 * destination, the source destination with the user prefix removed, a session, +	 * id, and the user for the session (if known)., +	 * @param sourceDestination the source destination of the input message, +	 * @param sourceDestinationWithoutPrefix the source destination without the user prefix, +	 * @param sessionId the id of the session for the target message, +	 * @param user the user associated with the session, or {@code null}, +	 *, +	 * @return a target destination, or {@code null}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +			boolean broadcast = sendToUser.broadcast();, +			if (user == null) {, +				if (sessionId == null) {, +					throw new MissingSessionUserException(message);, +				}, +				user = sessionId;, +				broadcast = false;, +			}, +				if (broadcast) {, +		if (principal != null) {, +			return (principal instanceof DestinationUserNameProvider ?, +					((DestinationUserNameProvider) principal).getDestinationUserName() : principal.getName());, +		return null;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolver.java, +		Set<String> resolved = new HashSet<String>();, +			String d = getTargetDestination(destination, info.getDestinationWithoutPrefix(), sessionId, info.getUser());, +			if (d != null) {, +				resolved.add(d);, +			}, +		return new UserDestinationResult(destination, resolved, info.getSubscribeDestination(), info.getUser());, +			user = (principal != null ? principal.getName() : null);, +			Assert.isTrue(endIndex > 0, "Expected destination pattern \"/user/{userId}/**\"");, +			user = user.equals(sessionId) ? null : user;, +	 * This methods determines the translated destination to use based on the source, +	 * destination, the source destination with the user prefix removed, a session, +	 * id, and the user for the session (if known)., +	 * @param sourceDestination the source destination of the input message, +	 * @param sourceDestinationWithoutPrefix the source destination without the user prefix, +	 * @param sessionId the id of the session for the target message, +	 * @param user the user associated with the session, or {@code null}, +	 *, +	 * @return a target destination, or {@code null}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/UserDestinationMessageHandler.java, +			if (logger.isTraceEnabled()) {, +				logger.trace("No target destinations, message=" + message);, +			}, +			String header = SimpMessageHeaderAccessor.ORIGINAL_DESTINATION;, +			headerAccessor.setNativeHeader(header, result.getSubscribeDestination());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +			boolean broadcast = sendToUser.broadcast();, +			if (user == null) {, +				if (sessionId == null) {, +					throw new MissingSessionUserException(message);, +				}, +				user = sessionId;, +				broadcast = false;, +			}, +				if (broadcast) {, +		if (principal != null) {, +			return (principal instanceof DestinationUserNameProvider ?, +					((DestinationUserNameProvider) principal).getDestinationUserName() : principal.getName());, +		return null;]