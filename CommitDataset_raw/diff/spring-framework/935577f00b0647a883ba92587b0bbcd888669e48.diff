[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/HandshakeInfo.java, +	private final HttpHeaders headers;, +	private final Optional<String> protocol;, +	/**, +	 * Constructor with information about the handshake., +	 * @param uri the endpoint URL, +	 * @param headers request headers for server or response headers or client, +	 * @param principal the principal for the session, +	 * @param protocol the negotiated sub-protocol, +	 */, +	public HandshakeInfo(URI uri, HttpHeaders headers, Mono<Principal> principal, Optional<String> protocol) {, +		Assert.notNull(protocol, "Sub-protocol is required.");, +		this.protocol = protocol;, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/HandshakeInfo.java, +	private final HttpHeaders headers;, +	private final Optional<String> protocol;, +	/**, +	 * Constructor with information about the handshake., +	 * @param uri the endpoint URL, +	 * @param headers request headers for server or response headers or client, +	 * @param principal the principal for the session, +	 * @param protocol the negotiated sub-protocol, +	 */, +	public HandshakeInfo(URI uri, HttpHeaders headers, Mono<Principal> principal, Optional<String> protocol) {, +		Assert.notNull(protocol, "Sub-protocol is required.");, +		this.protocol = protocol;, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/JettyWebSocketHandlerAdapter.java, +import java.util.function.Function;, +import org.springframework.util.Assert;, +import org.springframework.web.reactive.socket.WebSocketSession;, +public class JettyWebSocketHandlerAdapter {, +, +	private final WebSocketHandler delegateHandler;, +	private final Function<Session, JettyWebSocketSession> sessionFactory;, +	private JettyWebSocketSession delegateSession;, +, +	public JettyWebSocketHandlerAdapter(WebSocketHandler handler,, +			Function<Session, JettyWebSocketSession> sessionFactory) {, +, +		this(handler, null, sessionFactory);, +	public JettyWebSocketHandlerAdapter(WebSocketHandler handler, MonoProcessor<Void> completionMono,, +			Function<Session, JettyWebSocketSession> sessionFactory) {, +		Assert.notNull("WebSocketHandler is required");, +		Assert.notNull("'sessionFactory' is required");, +		this.delegateHandler = handler;, +		this.sessionFactory = sessionFactory;, +		this.delegateSession = sessionFactory.apply(session);, +		this.delegateHandler.handle(this.delegateSession).subscribe(subscriber);, +		WebSocketSession session = this.delegateSession;, +		Assert.state(session != null, "Cannot create message without a session");, +			DataBuffer buffer = session.bufferFactory().wrap(bytes);, +			DataBuffer buffer = session.bufferFactory().wrap((ByteBuffer) message);, +			DataBuffer buffer = session.bufferFactory().wrap((ByteBuffer) message);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/HandshakeInfo.java, +	private final HttpHeaders headers;, +	private final Optional<String> protocol;, +	/**, +	 * Constructor with information about the handshake., +	 * @param uri the endpoint URL, +	 * @param headers request headers for server or response headers or client, +	 * @param principal the principal for the session, +	 * @param protocol the negotiated sub-protocol, +	 */, +	public HandshakeInfo(URI uri, HttpHeaders headers, Mono<Principal> principal, Optional<String> protocol) {, +		Assert.notNull(protocol, "Sub-protocol is required.");, +		this.protocol = protocol;, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/JettyWebSocketHandlerAdapter.java, +import java.util.function.Function;, +import org.springframework.util.Assert;, +import org.springframework.web.reactive.socket.WebSocketSession;, +public class JettyWebSocketHandlerAdapter {, +, +	private final WebSocketHandler delegateHandler;, +	private final Function<Session, JettyWebSocketSession> sessionFactory;, +	private JettyWebSocketSession delegateSession;, +, +	public JettyWebSocketHandlerAdapter(WebSocketHandler handler,, +			Function<Session, JettyWebSocketSession> sessionFactory) {, +, +		this(handler, null, sessionFactory);, +	public JettyWebSocketHandlerAdapter(WebSocketHandler handler, MonoProcessor<Void> completionMono,, +			Function<Session, JettyWebSocketSession> sessionFactory) {, +		Assert.notNull("WebSocketHandler is required");, +		Assert.notNull("'sessionFactory' is required");, +		this.delegateHandler = handler;, +		this.sessionFactory = sessionFactory;, +		this.delegateSession = sessionFactory.apply(session);, +		this.delegateHandler.handle(this.delegateSession).subscribe(subscriber);, +		WebSocketSession session = this.delegateSession;, +		Assert.state(session != null, "Cannot create message without a session");, +			DataBuffer buffer = session.bufferFactory().wrap(bytes);, +			DataBuffer buffer = session.bufferFactory().wrap((ByteBuffer) message);, +			DataBuffer buffer = session.bufferFactory().wrap((ByteBuffer) message);, +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/HandshakeInfo.java, +	private final HttpHeaders headers;, +	private final Optional<String> protocol;, +	/**, +	 * Constructor with information about the handshake., +	 * @param uri the endpoint URL]