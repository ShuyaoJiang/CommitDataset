[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/reactive/HandlerMethodReturnValueHandler.java, +	/** Header containing a DataBufferFactory for use in return value handling. */, +	String DATA_BUFFER_FACTORY_HEADER = "dataBufferFactory";, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/reactive/HandlerMethodReturnValueHandler.java, +	/** Header containing a DataBufferFactory for use in return value handling. */, +	String DATA_BUFFER_FACTORY_HEADER = "dataBufferFactory";, +++ b/spring-messaging/src/main/java/org/springframework/messaging/rsocket/DefaultRSocketRequester.java, +/*, + * Copyright 2002-2019 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.messaging.rsocket;, +, +import java.nio.charset.StandardCharsets;, +import java.util.Collections;, +import java.util.Map;, +, +import io.rsocket.Payload;, +import io.rsocket.RSocket;, +import org.reactivestreams.Publisher;, +import reactor.core.publisher.Flux;, +import reactor.core.publisher.Mono;, +, +import org.springframework.core.ParameterizedTypeReference;, +import org.springframework.core.ReactiveAdapter;, +import org.springframework.core.ResolvableType;, +import org.springframework.core.codec.Decoder;, +import org.springframework.core.codec.Encoder;, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.core.io.buffer.DataBufferUtils;, +import org.springframework.lang.Nullable;, +import org.springframework.util.Assert;, +import org.springframework.util.MimeType;, +, +/**, + * Default, package-private {@link RSocketRequester} implementation., + *, + * @author Rossen Stoyanchev, + * @since 5.2, + */, +final class DefaultRSocketRequester implements RSocketRequester {, +, +	private static final Map<String, Object> EMPTY_HINTS = Collections.emptyMap();, +, +, +	private final RSocket rsocket;, +, +	@Nullable, +	private final MimeType dataMimeType;, +, +	private final RSocketStrategies strategies;, +, +	private DataBuffer emptyDataBuffer;, +, +, +	DefaultRSocketRequester(RSocket rsocket, @Nullable MimeType dataMimeType, RSocketStrategies strategies) {, +		Assert.notNull(rsocket, "RSocket is required");, +		Assert.notNull(strategies, "RSocketStrategies is required");, +		this.rsocket = rsocket;, +		this.dataMimeType = dataMimeType;, +		this.strategies = strategies;, +		this.emptyDataBuffer = this.strategies.dataBufferFactory().wrap(new byte[0]);, +	}, +, +, +	@Override, +	public RSocket rsocket() {, +		return this.rsocket;, +	}, +, +	@Override, +	public RequestSpec route(String route) {, +		return new DefaultRequestSpec(route);, +	}, +, +, +	private static boolean isVoid(ResolvableType elementType) {, +		return Void.class.equals(elementType.resolve()) || void.class.equals(elementType.resolve());, +	}, +, +, +	private class DefaultRequestSpec implements RequestSpec {, +, +		private final String route;, +, +, +		DefaultRequestSpec(String route) {, +			this.route = route;, +		}]