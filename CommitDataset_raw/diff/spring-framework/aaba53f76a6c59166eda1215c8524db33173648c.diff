[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/AbstractHttpMessageWriterResponse.java, +import java.util.Collections;, +				.filter(messageWriter -> messageWriter.canWrite(bodyType, contentType, Collections.emptyMap())), +				.map(messageWriter -> messageWriter.write(body, bodyType, contentType, response, Collections.emptyMap())), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/AbstractHttpMessageWriterResponse.java, +import java.util.Collections;, +				.filter(messageWriter -> messageWriter.canWrite(bodyType, contentType, Collections.emptyMap())), +				.map(messageWriter -> messageWriter.write(body, bodyType, contentType, response, Collections.emptyMap())), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultRequest.java, +			return convertTo(aClass, reader -> reader.read(elementType, request(), Collections.emptyMap()));, +			return convertTo(aClass, reader -> reader.readMono(elementType, request(), Collections.emptyMap()));, +					.filter(r -> r.canRead(elementType, contentType, Collections.emptyMap())), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/AbstractHttpMessageWriterResponse.java, +import java.util.Collections;, +				.filter(messageWriter -> messageWriter.canWrite(bodyType, contentType, Collections.emptyMap())), +				.map(messageWriter -> messageWriter.write(body, bodyType, contentType, response, Collections.emptyMap())), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultRequest.java, +			return convertTo(aClass, reader -> reader.read(elementType, request(), Collections.emptyMap()));, +			return convertTo(aClass, reader -> reader.readMono(elementType, request(), Collections.emptyMap()));, +					.filter(r -> r.canRead(elementType, contentType, Collections.emptyMap())), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/ResourceResponse.java, +import java.util.Collections;, +, +		return this.messageWriter.write(Mono.just(this.resource), RESOURCE_TYPE, null,, +				exchange.getResponse(), Collections.emptyMap());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/AbstractHttpMessageWriterResponse.java, +import java.util.Collections;, +				.filter(messageWriter -> messageWriter.canWrite(bodyType, contentType, Collections.emptyMap())), +				.map(messageWriter -> messageWriter.write(body, bodyType, contentType, response, Collections.emptyMap())), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultRequest.java, +			return convertTo(aClass, reader -> reader.read(elementType, request(), Collections.emptyMap()));, +			return convertTo(aClass, reader -> reader.readMono(elementType, request(), Collections.emptyMap()));, +					.filter(r -> r.canRead(elementType, contentType, Collections.emptyMap())), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/ResourceResponse.java, +import java.util.Collections;, +, +		return this.messageWriter.write(Mono.just(this.resource), RESOURCE_TYPE, null,, +				exchange.getResponse(), Collections.emptyMap());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/ServerSentEventResponse.java, +		return this.messageWriter.write(this.eventsPublisher, this.eventType, null,, +				exchange.getResponse(), Collections.emptyMap());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/AbstractHttpMessageWriterResponse.java, +import java.util.Collections;, +				.filter(messageWriter -> messageWriter.canWrite(bodyType, contentType, Collections.emptyMap())), +				.map(messageWriter -> messageWriter.write(body, bodyType, contentType, response, Collections.emptyMap())), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultRequest.java, +			return convertTo(aClass, reader -> reader.read(elementType, request(), Collections.emptyMap()));, +			return convertTo(aClass, reader -> reader.readMono(elementType, request(), Collections.emptyMap()));, +					.filter(r -> r.canRead(elementType, contentType, Collections.emptyMap())), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/ResourceResponse.java, +import java.util.Collections;, +, +		return this.messageWriter.write(Mono.just(this.resource), RESOURCE_TYPE, null,, +				exchange.getResponse(), Collections.emptyMap());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/ServerSentEventResponse.java, +		return this.messageWriter.write(this.eventsPublisher, this.eventType, null,, +				exchange.getResponse(), Collections.emptyMap());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/resource/ResourceWebHandler.java, +import java.util.Collections;, +					ResolvableType.forClass(Resource.class), mediaType, exchange.getResponse(), Collections.emptyMap());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/AbstractHttpMessageWriterResponse.java, +import java.util.Collections;, +				.filter(messageWriter -> messageWriter.canWrite(bodyType, contentType, Collections.emptyMap())), +				.map(messageWriter -> messageWriter.write(body, bodyType, contentType, response, Collections.emptyMap())), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultRequest.java, +			return convertTo(aClass, reader -> reader.read(elementType, request(), Collections.emptyMap()));, +			return convertTo(aClass, reader -> reader.readMono(elementType, request(), Collections.emptyMap()));, +					.filter(r -> r.canRead(elementType, contentType, Collections.emptyMap())), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/ResourceResponse.java, +import java.util.Collections;, +, +		return this.messageWriter.write(Mono.just(this.resource), RESOURCE_TYPE, null,, +				exchange.getResponse(), Collections.emptyMap());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/ServerSentEventResponse.java, +		return this.messageWriter.write(this.eventsPublisher, this.eventType, null,, +				exchange.getResponse(), Collections.emptyMap());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/resource/ResourceWebHandler.java, +import java.util.Collections;, +					ResolvableType.forClass(Resource.class), mediaType, exchange.getResponse(), Collections.emptyMap());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java, +import java.util.Collections;, +			if (reader.canRead(elementType, mediaType, Collections.emptyMap())) {, +					Flux<?> flux = reader.read(elementType, request, Collections.emptyMap()), +					Mono<?> mono = reader.readMono(elementType, request, Collections.emptyMap()), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/AbstractHttpMessageWriterResponse.java, +import java.util.Collections;, +				.filter(messageWriter -> messageWriter.canWrite(bodyType, contentType, Collections.emptyMap())), +				.map(messageWriter -> messageWriter.write(body, bodyType, contentType, response, Collections.emptyMap())), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultRequest.java, +			return convertTo(aClass, reader -> reader.read(elementType, request(), Collections.emptyMap()));, +			return convertTo(aClass, reader -> reader.readMono(elementType, request(), Collections.emptyMap()));, +					.filter(r -> r.canRead(elementType, contentType, Collections.emptyMap())), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/ResourceResponse.java, +import java.util.Collections;, +, +		return this.messageWriter.write(Mono.just(this.resource), RESOURCE_TYPE, null,, +				exchange.getResponse(), Collections.emptyMap());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/ServerSentEventResponse.java, +		return this.messageWriter.write(this.eventsPublisher, this.eventType, null,, +				exchange.getResponse(), Collections.emptyMap());]