[+++ b/spring-core/src/test/java/org/springframework/core/BridgeMethodResolverTests.java, +	@SuppressWarnings({"serial", "unchecked"}), +++ b/spring-core/src/test/java/org/springframework/core/BridgeMethodResolverTests.java, +	@SuppressWarnings({"serial", "unchecked"}), +++ b/spring-jms/src/main/java/org/springframework/jms/config/MethodJmsListenerEndpoint.java, + * Copyright 2002-2018 the original author or authors., +			Class<?> targetClass = AopProxyUtils.ultimateTargetClass(this.bean);, +			return AopUtils.getMostSpecificMethod(method, targetClass);, +++ b/spring-core/src/test/java/org/springframework/core/BridgeMethodResolverTests.java, +	@SuppressWarnings({"serial", "unchecked"}), +++ b/spring-jms/src/main/java/org/springframework/jms/config/MethodJmsListenerEndpoint.java, + * Copyright 2002-2018 the original author or authors., +			Class<?> targetClass = AopProxyUtils.ultimateTargetClass(this.bean);, +			return AopUtils.getMostSpecificMethod(method, targetClass);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ErrorsMethodArgumentResolver.java, + * Copyright 2002-2018 the original author or authors., +			throw new IllegalStateException("Unexpected Errors/BindingResult type: " + errors.getClass().getName());, +				"Errors argument must be declared immediately after a model attribute argument");, +		Assert.state(adapter == null, "An @ModelAttribute and an Errors/BindingResult argument " +, +		ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class);, +		String name = (ann != null && StringUtils.hasText(ann.value()) ?, +				ann.value() : Conventions.getVariableNameForParameter(attributeParam));, +		Assert.state(errors != null, () -> "An Errors/BindingResult argument is expected " +, +				"For @RequestBody and @RequestPart arguments, please declare them with a reactive " +, +				"type wrapper and use its onError operators to handle WebExchangeBindException: " +, +++ b/spring-core/src/test/java/org/springframework/core/BridgeMethodResolverTests.java, +	@SuppressWarnings({"serial", "unchecked"}), +++ b/spring-jms/src/main/java/org/springframework/jms/config/MethodJmsListenerEndpoint.java, + * Copyright 2002-2018 the original author or authors., +			Class<?> targetClass = AopProxyUtils.ultimateTargetClass(this.bean);, +			return AopUtils.getMostSpecificMethod(method, targetClass);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ErrorsMethodArgumentResolver.java, + * Copyright 2002-2018 the original author or authors., +			throw new IllegalStateException("Unexpected Errors/BindingResult type: " + errors.getClass().getName());, +				"Errors argument must be declared immediately after a model attribute argument");, +		Assert.state(adapter == null, "An @ModelAttribute and an Errors/BindingResult argument " +, +		ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class);, +		String name = (ann != null && StringUtils.hasText(ann.value()) ?, +				ann.value() : Conventions.getVariableNameForParameter(attributeParam));, +		Assert.state(errors != null, () -> "An Errors/BindingResult argument is expected " +, +				"For @RequestBody and @RequestPart arguments, please declare them with a reactive " +, +				"type wrapper and use its onError operators to handle WebExchangeBindException: " +, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/ErrorsMethodArgumentResolverTests.java, + * Copyright 2002-2018 the original author or authors., +import static org.junit.Assert.*;, + *, +	public void supports() {, +	public void resolve() {, +	public void resolveWithMono() {, +	public void resolveWithMonoOnBindingResultAndModelAttribute() {, +		this.expectedException.expectMessage("An @ModelAttribute and an Errors/BindingResult argument " +, +	public void resolveWithBindingResultNotFound() {, +			String string) {, +	}]