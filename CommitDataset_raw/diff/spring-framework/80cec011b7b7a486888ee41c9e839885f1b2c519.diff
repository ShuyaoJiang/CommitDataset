[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +						if (requiredConstructor == null) {, +							if (defaultConstructor != null) {, +							else if (candidates.size() == 1 && logger.isWarnEnabled()) {, +								logger.warn("Inconsistent constructor declaration on bean with name '" + beanName +, +										"': single autowire-marked constructor flagged as optional - this constructor " +, +										"is effectively required since there is no default constructor to fall back to: " +, +										candidates.get(0));, +							}, +						}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +						if (requiredConstructor == null) {, +							if (defaultConstructor != null) {, +							else if (candidates.size() == 1 && logger.isWarnEnabled()) {, +								logger.warn("Inconsistent constructor declaration on bean with name '" + beanName +, +										"': single autowire-marked constructor flagged as optional - this constructor " +, +										"is effectively required since there is no default constructor to fall back to: " +, +										candidates.get(0));, +							}, +						}, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java, +import org.springframework.beans.factory.UnsatisfiedDependencyException;, +	public void testConstructorResourceInjectionWithNoCandidatesAndNoFallback() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(ConstructorWithoutFallbackBean.class));, +, +		try {, +			bf.getBean("annotatedBean");, +			fail("Should have thrown UnsatisfiedDependencyException");, +		}, +		catch (UnsatisfiedDependencyException ex) {, +			// expected, +		}, +	}, +, +	@Test, +	public static class ConstructorWithoutFallbackBean {, +, +		protected ITestBean testBean3;, +, +		@Autowired(required = false), +		public ConstructorWithoutFallbackBean(ITestBean testBean3) {, +			this.testBean3 = testBean3;, +		}, +, +		public ITestBean getTestBean3() {, +			return this.testBean3;, +		}, +	}, +, +]