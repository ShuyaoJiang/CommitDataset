[+++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java, +	private final Object bodyPublisherMonitor = new Object();, +, +	private volatile RequestBodyPublisher bodyPublisher;, +, +	private final DataBufferFactory dataBufferFactory;, +, +	private final int bufferSize;, +			DataBufferFactory dataBufferFactory, int bufferSize) {, +		Assert.isTrue(bufferSize > 0);, +, +		this.dataBufferFactory = dataBufferFactory;, +		this.bufferSize = bufferSize;, +		try {, +			RequestBodyPublisher bodyPublisher = this.bodyPublisher;, +			if (bodyPublisher == null) {, +				synchronized (this.bodyPublisherMonitor) {, +					bodyPublisher = this.bodyPublisher;, +					if (bodyPublisher == null) {, +						this.bodyPublisher = bodyPublisher = createBodyPublisher();, +					}, +				}, +			}, +			return Flux.from(bodyPublisher);, +		}, +		catch (IOException ex) {, +			return Flux.error(ex);, +		}, +	private RequestBodyPublisher createBodyPublisher() throws IOException {, +		RequestBodyPublisher bodyPublisher =, +				new RequestBodyPublisher(request.getInputStream(), this.dataBufferFactory,, +						this.bufferSize);, +		bodyPublisher.registerListener();, +		return bodyPublisher;, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java, +	private final Object bodyPublisherMonitor = new Object();, +, +	private volatile RequestBodyPublisher bodyPublisher;, +, +	private final DataBufferFactory dataBufferFactory;, +, +	private final int bufferSize;, +			DataBufferFactory dataBufferFactory, int bufferSize) {, +		Assert.isTrue(bufferSize > 0);, +, +		this.dataBufferFactory = dataBufferFactory;, +		this.bufferSize = bufferSize;, +		try {, +			RequestBodyPublisher bodyPublisher = this.bodyPublisher;, +			if (bodyPublisher == null) {, +				synchronized (this.bodyPublisherMonitor) {, +					bodyPublisher = this.bodyPublisher;, +					if (bodyPublisher == null) {, +						this.bodyPublisher = bodyPublisher = createBodyPublisher();, +					}, +				}, +			}, +			return Flux.from(bodyPublisher);, +		}, +		catch (IOException ex) {, +			return Flux.error(ex);, +		}, +	private RequestBodyPublisher createBodyPublisher() throws IOException {, +		RequestBodyPublisher bodyPublisher =, +				new RequestBodyPublisher(request.getInputStream(), this.dataBufferFactory,, +						this.bufferSize);, +		bodyPublisher.registerListener();, +		return bodyPublisher;, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/ServletServerHttpResponse.java, +	private final Object bodyProcessorMonitor = new Object();, +, +	private volatile ResponseBodyProcessor bodyProcessor;, +, +	private final int bufferSize;, +		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null");, +		Assert.isTrue(bufferSize > 0);, +, +		this.bufferSize = bufferSize;, +		Assert.state(this.bodyProcessor == null,, +				"Response body publisher is already provided");, +		try {, +			synchronized (this.bodyProcessorMonitor) {, +				if (this.bodyProcessor == null) {, +					this.bodyProcessor = createBodyProcessor();, +				}, +				else {, +					throw new IllegalStateException(, +							"Response body publisher is already provided");, +				}, +			}, +		catch (IOException ex) {, +			return Mono.error(ex);, +		}, +	}, +, +	private ResponseBodyProcessor createBodyProcessor() throws IOException {, +		ResponseBodyProcessor bodyProcessor =]