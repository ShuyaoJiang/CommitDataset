[+++ b/org.springframework.web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java, +import java.io.BufferedReader;, +import java.io.ByteArrayOutputStream;, +import java.io.InputStreamReader;, +import java.io.UnsupportedEncodingException;, +import javax.servlet.ServletInputStream;, +import javax.servlet.http.HttpServletRequestWrapper;, +import org.springframework.util.Assert;, +import org.springframework.web.util.WebUtils;, + * Base class for <code>Filter</code>s that perform logging operations before and after a request is processed., + * <p>Subclasses should override the <code>beforeRequest(HttpServletRequest, String)</code> and, + * <code>afterRequest(HttpServletRequest, String)</code> methods to perform the actual logging around the request., + * <p>Subclasses are passed the message to write to the log in the <code>beforeRequest</code> and, + * <code>afterRequest</code> methods. By default, only the URI of the request is logged. However, setting the, + * <code>includeQueryString</code> property to <code>true</code> will cause the query string of the request to be, + * included also. The payload (body) of the request can be logged via the <code>includePayload</code> flag. Note that, + * this will only log that which is read, which might not be the entire payload., + * <p>Prefixes and suffixes for the before and after messages can be configured using the, + * <code>beforeMessagePrefix</code>, <code>afterMessagePrefix</code>, <code>beforeMessageSuffix</code> and, + * <code>afterMessageSuffix</code> properties,, + * @since 1.2.5, +	private static final int DEFAULT_MAX_PAYLOAD_LENGTH = 50;, +	private boolean includePayload = false;, +, +	private int maxPayloadLength = DEFAULT_MAX_PAYLOAD_LENGTH;, +, +	 * Set whether or not the query string should be included in the log message. <p>Should be configured using an, +	 * <code>&lt;init-param&gt;</code> for parameter name "includeQueryString" in the filter definition in, +	 * <code>web.xml</code>., +	 * Set whether or not the client address and session id should be included in the log message. <p>Should be configured, +	 * using an <code>&lt;init-param&gt;</code> for parameter name "includeClientInfo" in the filter definition in, +	 * <code>web.xml</code>., +	 * Return whether or not the client address and session id should be included in the log message., +	 * Set whether or not the request payload (body) should be included in the log message. <p>Should be configured using, +	 * an <code>&lt;init-param&gt;</code> for parameter name "includePayload" in the filter definition in, +	 * <code>web.xml</code>., +	 */, +, +	public void setIncludePayload(boolean includePayload) {, +		this.includePayload = includePayload;, +	}, +, +	/**, +	 * Return whether or not the request payload (body) should be included in the log message., +	 */, +	protected boolean isIncludePayload() {, +		return includePayload;, +	}, +, +	/**, +	 * Sets the maximum length of the payload body to be included in the log message. Default is 50 characters., +	 */, +	public void setMaxPayloadLength(int maxPayloadLength) {, +		Assert.isTrue(maxPayloadLength >= 0, "'maxPayloadLength' should be larger than or equal to 0");, +		this.maxPayloadLength = maxPayloadLength;, +	}, +, +	/**, +	 * Return the maximum length of the payload body to be included in the log message., +	 */, +	protected int getMaxPayloadLength() {, +		return maxPayloadLength;, +	}, +, +	/**, +	 * Set the value that should be prepended to the log message written <i>before</i> a request is processed., +	 * Set the value that should be apppended to the log message written <i>before</i> a request is processed., +	 * Set the value that should be prepended to the log message written <i>after</i> a request is processed., +	 * Set the value that should be appended to the log message written <i>after</i> a request is processed., +	 * Forwards the request to the next filter in the chain and delegates down to the subclasses to perform the actual, +	 * request logging both before and after the request is processed., +	 *, +	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain), +		if (isIncludePayload()) {, +			request = new RequestCachingRequestWrapper(request);, +		}, +	 *, +	 *, +	 * Create a log message for the given request, prefix and suffix. <p>If <code>includeQueryString</code> is, +	 * <code>true</code> then the inner part of the log message will take the form <code>request_uri?query_string</code>, +	 * otherwise the message will simply be of the form <code>request_uri</code>. <p>The final message is composed of the, +	 * inner part as described and the supplied prefix and suffix., +		if (isIncludePayload() && request instanceof RequestCachingRequestWrapper) {, +			RequestCachingRequestWrapper wrapper = (RequestCachingRequestWrapper) request;, +			byte[] buf = wrapper.toByteArray();, +			if (buf.length > 0) {, +				int length = Math.min(buf.length, getMaxPayloadLength());, +				String payload;, +				try {, +					payload = new String(buf, 0, length, wrapper.getCharacterEncoding());, +				}, +				catch (UnsupportedEncodingException e) {, +					payload = "[unknown]";, +				}, +				msg.append(";payload=").append(payload);, +			}, +, +		}, +	 * Concrete subclasses should implement this method to write a log message <i>before</i> the request is processed., +	 *]