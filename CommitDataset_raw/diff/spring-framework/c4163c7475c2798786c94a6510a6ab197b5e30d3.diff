[+++ b/spring-messaging/src/main/java/org/springframework/messaging/Message.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/Message.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageChannel.java, +	 * <p>This method may block indefinitely, depending on the implementation., +	 * @return {@code true} if the message is sent, {@code false} if not, +	 * including a timeout of an interrupt of the send, +++ b/spring-messaging/src/main/java/org/springframework/messaging/Message.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageChannel.java, +	 * <p>This method may block indefinitely, depending on the implementation., +	 * @return {@code true} if the message is sent, {@code false} if not, +	 * including a timeout of an interrupt of the send, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageDeliveryException.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/Message.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageChannel.java, +	 * <p>This method may block indefinitely, depending on the implementation., +	 * @return {@code true} if the message is sent, {@code false} if not, +	 * including a timeout of an interrupt of the send, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageDeliveryException.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHandler.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/Message.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageChannel.java, +	 * <p>This method may block indefinitely, depending on the implementation., +	 * @return {@code true} if the message is sent, {@code false} if not, +	 * including a timeout of an interrupt of the send, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageDeliveryException.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHandler.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHandlingException.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/Message.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageChannel.java, +	 * <p>This method may block indefinitely, depending on the implementation., +	 * @return {@code true} if the message is sent, {@code false} if not, +	 * including a timeout of an interrupt of the send, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageDeliveryException.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHandler.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHandlingException.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHeaders.java, +, +		this.headers.put(TIMESTAMP, System.currentTimeMillis());, +	 * Since MessageHeaders are immutable, the call to this method will result in {@link UnsupportedOperationException}., +		throw new UnsupportedOperationException("MessageHeaders is immutable");, +	 * Since MessageHeaders are immutable, the call to this method will result in {@link UnsupportedOperationException}., +		throw new UnsupportedOperationException("MessageHeaders is immutable");, +	 * Since MessageHeaders are immutable, the call to this method will result in {@link UnsupportedOperationException}., +		throw new UnsupportedOperationException("MessageHeaders is immutable");, +	 * Since MessageHeaders are immutable, the call to this method will result in {@link UnsupportedOperationException}., +		throw new UnsupportedOperationException("MessageHeaders is immutable");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/Message.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageChannel.java, +	 * <p>This method may block indefinitely, depending on the implementation., +	 * @return {@code true} if the message is sent, {@code false} if not, +	 * including a timeout of an interrupt of the send, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageDeliveryException.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHandler.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHandlingException.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHeaders.java, +, +		this.headers.put(TIMESTAMP, System.currentTimeMillis());, +	 * Since MessageHeaders are immutable, the call to this method will result in {@link UnsupportedOperationException}., +		throw new UnsupportedOperationException("MessageHeaders is immutable");, +	 * Since MessageHeaders are immutable, the call to this method will result in {@link UnsupportedOperationException}., +		throw new UnsupportedOperationException("MessageHeaders is immutable");, +	 * Since MessageHeaders are immutable, the call to this method will result in {@link UnsupportedOperationException}., +		throw new UnsupportedOperationException("MessageHeaders is immutable");, +	 * Since MessageHeaders are immutable, the call to this method will result in {@link UnsupportedOperationException}., +		throw new UnsupportedOperationException("MessageHeaders is immutable");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessagingException.java, +	private final Message<?> failedMessage;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/Message.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageChannel.java, +	 * <p>This method may block indefinitely, depending on the implementation., +	 * @return {@code true} if the message is sent, {@code false} if not, +	 * including a timeout of an interrupt of the send, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageDeliveryException.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHandler.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHandlingException.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHeaders.java, +, +		this.headers.put(TIMESTAMP, System.currentTimeMillis());, +	 * Since MessageHeaders are immutable, the call to this method will result in {@link UnsupportedOperationException}., +		throw new UnsupportedOperationException("MessageHeaders is immutable");, +	 * Since MessageHeaders are immutable, the call to this method will result in {@link UnsupportedOperationException}., +		throw new UnsupportedOperationException("MessageHeaders is immutable");, +	 * Since MessageHeaders are immutable, the call to this method will result in {@link UnsupportedOperationException}., +		throw new UnsupportedOperationException("MessageHeaders is immutable");, +	 * Since MessageHeaders are immutable, the call to this method will result in {@link UnsupportedOperationException}., +		throw new UnsupportedOperationException("MessageHeaders is immutable");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessagingException.java, +	private final Message<?> failedMessage;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/PollableChannel.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/Message.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageChannel.java, +	 * <p>This method may block indefinitely, depending on the implementation., +	 * @return {@code true} if the message is sent, {@code false} if not, +	 * including a timeout of an interrupt of the send, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageDeliveryException.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHandler.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHandlingException.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHeaders.java, +, +		this.headers.put(TIMESTAMP, System.currentTimeMillis());]