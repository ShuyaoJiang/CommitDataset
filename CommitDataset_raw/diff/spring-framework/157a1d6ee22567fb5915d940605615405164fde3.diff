[+++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/result/RequestResultMatchers.java, +import org.springframework.web.context.request.async.WebAsyncTask;, +	 * or {@link WebAsyncTask}. The value matched is the value returned from the, +++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/result/RequestResultMatchers.java, +import org.springframework.web.context.request.async.WebAsyncTask;, +	 * or {@link WebAsyncTask}. The value matched is the value returned from the, +++ /dev/null, +++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/result/RequestResultMatchers.java, +import org.springframework.web.context.request.async.WebAsyncTask;, +	 * or {@link WebAsyncTask}. The value matched is the value returned from the, +++ /dev/null, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java, +		startCallableProcessing(new WebAsyncTask(callable), processingContext);, +	 * Use the given {@link WebAsyncTask} to configure the task executor as well as, +	 * @param webAsyncTask an WebAsyncTask containing the target {@code Callable}, +	public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) {, +		Assert.notNull(webAsyncTask, "WebAsyncTask must not be null");, +		Long timeout = webAsyncTask.getTimeout();, +		AsyncTaskExecutor executor = webAsyncTask.getExecutor();, +		interceptors.add(webAsyncTask.getInterceptor());, +		final Callable<?> callable = webAsyncTask.getCallable();, +++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/result/RequestResultMatchers.java, +import org.springframework.web.context.request.async.WebAsyncTask;, +	 * or {@link WebAsyncTask}. The value matched is the value returned from the, +++ /dev/null, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncManager.java, +		startCallableProcessing(new WebAsyncTask(callable), processingContext);, +	 * Use the given {@link WebAsyncTask} to configure the task executor as well as, +	 * @param webAsyncTask an WebAsyncTask containing the target {@code Callable}, +	public void startCallableProcessing(final WebAsyncTask<?> webAsyncTask, Object... processingContext) {, +		Assert.notNull(webAsyncTask, "WebAsyncTask must not be null");, +		Long timeout = webAsyncTask.getTimeout();, +		AsyncTaskExecutor executor = webAsyncTask.getExecutor();, +		interceptors.add(webAsyncTask.getInterceptor());, +		final Callable<?> callable = webAsyncTask.getCallable();, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/WebAsyncTask.java, +/*, + * Copyright 2002-2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.web.context.request.async;, +, +import java.util.concurrent.Callable;, +, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.core.task.AsyncTaskExecutor;, +import org.springframework.util.Assert;, +import org.springframework.web.context.request.NativeWebRequest;, +, +/**, + * Holder for a {@link Callable}, a timeout value, and a task executor., + *, + * @author Rossen Stoyanchev, + * @since 3.2, + */, +public class WebAsyncTask<V> {, +, +	private final Callable<V> callable;, +, +	private final Long timeout;, +, +	private final String executorName;, +, +	private final AsyncTaskExecutor executor;, +, +	private Callable<V> timeoutCallback;, +, +	private Runnable completionCallback;, +, +	private BeanFactory beanFactory;, +, +, +	/**, +	 * Create an {@code WebAsyncTask} wrapping the given {@link Callable}., +	 * @param callable the callable for concurrent handling, +	 */, +	public WebAsyncTask(Callable<V> callable) {, +		this(null, null, null, callable);, +	}, +, +	/**, +	 * Create an {@code WebAsyncTask} with a timeout value and a {@link Callable}., +	 * @param timeout timeout value in milliseconds, +	 * @param callable the callable for concurrent handling, +	 */, +	public WebAsyncTask(long timeout, Callable<V> callable) {, +		this(timeout, null, null, callable);, +	}, +]