[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver;, +import org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver;, +import org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver;, +		ManagedList<RootBeanDefinition> messageConverters = getMessageConverters(source);, +, +		annAdapterDef.getPropertyValues().add("messageConverters", messageConverters);, +		RootBeanDefinition annExceptionResolver = new RootBeanDefinition(AnnotationMethodHandlerExceptionResolver.class);, +		annExceptionResolver.setSource(source);, +		annExceptionResolver.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +		annExceptionResolver.getPropertyValues().add("messageConverters", messageConverters);, +		annExceptionResolver.getPropertyValues().add("order", 0);, +		String annExceptionResolverName =, +				parserContext.getReaderContext().registerWithGeneratedName(annExceptionResolver);, +, +		RootBeanDefinition responseStatusExceptionResolver = new RootBeanDefinition(ResponseStatusExceptionResolver.class);, +		responseStatusExceptionResolver.setSource(source);, +		responseStatusExceptionResolver.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +		responseStatusExceptionResolver.getPropertyValues().add("order", 1);, +		String responseStatusExceptionResolverName =, +				parserContext.getReaderContext().registerWithGeneratedName(responseStatusExceptionResolver);, +, +		RootBeanDefinition defaultExceptionResolver = new RootBeanDefinition(DefaultHandlerExceptionResolver.class);, +		defaultExceptionResolver.setSource(source);, +		defaultExceptionResolver.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +		defaultExceptionResolver.getPropertyValues().add("order", 2);, +		String defaultExceptionResolverName =, +				parserContext.getReaderContext().registerWithGeneratedName(defaultExceptionResolver);, +		, +		parserContext.registerComponent(new BeanComponentDefinition(annExceptionResolver, annExceptionResolverName));, +		parserContext.registerComponent(new BeanComponentDefinition(responseStatusExceptionResolver, responseStatusExceptionResolverName));, +		parserContext.registerComponent(new BeanComponentDefinition(defaultExceptionResolver, defaultExceptionResolverName));, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver;, +import org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver;, +import org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver;, +		ManagedList<RootBeanDefinition> messageConverters = getMessageConverters(source);, +, +		annAdapterDef.getPropertyValues().add("messageConverters", messageConverters);, +		RootBeanDefinition annExceptionResolver = new RootBeanDefinition(AnnotationMethodHandlerExceptionResolver.class);, +		annExceptionResolver.setSource(source);, +		annExceptionResolver.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +		annExceptionResolver.getPropertyValues().add("messageConverters", messageConverters);, +		annExceptionResolver.getPropertyValues().add("order", 0);, +		String annExceptionResolverName =, +				parserContext.getReaderContext().registerWithGeneratedName(annExceptionResolver);, +, +		RootBeanDefinition responseStatusExceptionResolver = new RootBeanDefinition(ResponseStatusExceptionResolver.class);, +		responseStatusExceptionResolver.setSource(source);, +		responseStatusExceptionResolver.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +		responseStatusExceptionResolver.getPropertyValues().add("order", 1);, +		String responseStatusExceptionResolverName =, +				parserContext.getReaderContext().registerWithGeneratedName(responseStatusExceptionResolver);, +, +		RootBeanDefinition defaultExceptionResolver = new RootBeanDefinition(DefaultHandlerExceptionResolver.class);, +		defaultExceptionResolver.setSource(source);, +		defaultExceptionResolver.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +		defaultExceptionResolver.getPropertyValues().add("order", 2);, +		String defaultExceptionResolverName =, +				parserContext.getReaderContext().registerWithGeneratedName(defaultExceptionResolver);, +		, +		parserContext.registerComponent(new BeanComponentDefinition(annExceptionResolver, annExceptionResolverName));, +		parserContext.registerComponent(new BeanComponentDefinition(responseStatusExceptionResolver, responseStatusExceptionResolverName));, +		parserContext.registerComponent(new BeanComponentDefinition(defaultExceptionResolver, defaultExceptionResolverName));, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java, + * Copyright 2002-2011 the original author or authors., +import static org.junit.Assert.*;, +, +		assertEquals(8, appContext.getBeanDefinitionCount());, +		assertEquals(8, appContext.getBeanDefinitionCount());, +		assertEquals(8, appContext.getBeanDefinitionCount());, +		assertEquals(11, appContext.getBeanDefinitionCount());, +	public void testDefaultServletHandlerWithOptionalAttributes() throws Exception {, +		assertEquals(10, appContext.getBeanDefinitionCount());, +		assertEquals(12, appContext.getBeanDefinitionCount());, +		assertEquals(12, appContext.getBeanDefinitionCount());]