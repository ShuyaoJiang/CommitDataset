[+++ b/spring-core/src/main/java/org/springframework/core/CollectionFactory.java, + * Factory for collections that is aware of Java 5 and Java 6 collection types., + * <p>Mainly for internal use within the framework., + * @author Oliver Gierke, + * @author Sam Brannen, +	 * @return {@code true} if the type is approximable, +	 * @param collectionType the desired type of the target Collection, +	public static <E> Collection<E> createCollection(Class<?> collectionType, int capacity) {, +		return createCollection(collectionType, null, capacity);, +	 * @param collectionType the desired type of the target Collection; never {@code null}, +	@SuppressWarnings({ "unchecked", "cast" }), +	public static <E> Collection<E> createCollection(Class<?> collectionType, Class<?> elementType, int capacity) {, +		Assert.notNull(collectionType, "Collection type must not be null");, +		if (collectionType.isInterface()) {, +			if (Set.class.equals(collectionType) || Collection.class.equals(collectionType)) {, +			else if (List.class.equals(collectionType)) {, +			else if (SortedSet.class.equals(collectionType) || NavigableSet.class.equals(collectionType)) {, +				throw new IllegalArgumentException("Unsupported Collection interface: " + collectionType.getName());, +		else if (EnumSet.class.equals(collectionType)) {, +			return (Collection<E>) EnumSet.noneOf(asEnumType(elementType));, +			if (!Collection.class.isAssignableFrom(collectionType)) {, +				throw new IllegalArgumentException("Unsupported Collection type: " + collectionType.getName());, +				return (Collection<E>) collectionType.newInstance();, +					"Could not instantiate Collection type: " + collectionType.getName(), ex);, +	 * @param mapType the desired type of the target Map, +	public static <K, V> Map<K, V> createMap(Class<?> mapType, int capacity) {, +		return createMap(mapType, null, capacity);, +	 * @param mapType the desired type of the target Map, +	public static <K, V> Map<K, V> createMap(Class<?> mapType, Class<?> keyType, int capacity) {, +		Assert.notNull(mapType, "Map type must not be null");, +		if (mapType.isInterface()) {, +			if (Map.class.equals(mapType)) {, +			else if (SortedMap.class.equals(mapType) || NavigableMap.class.equals(mapType)) {, +			else if (MultiValueMap.class.equals(mapType)) {, +				throw new IllegalArgumentException("Unsupported Map interface: " + mapType.getName());, +		else if (EnumMap.class.equals(mapType)) {, +			return new EnumMap(asEnumType(keyType));, +			if (!Map.class.isAssignableFrom(mapType)) {, +				throw new IllegalArgumentException("Unsupported Map type: " + mapType.getName());, +				return (Map<K, V>) mapType.newInstance();, +				throw new IllegalArgumentException("Could not instantiate Map type: " + mapType.getName(), ex);, +	/**, +	 * Cast the given type to a subtype of {@link Enum}., +	 * @param enumType the enum type, never {@code null}, +	 * @return the given type as subtype of {@link Enum}, +	 * @throws IllegalArgumentException if the given type is not a subtype of {@link Enum}, +	 */, +	@SuppressWarnings("rawtypes"), +	private static Class<? extends Enum> asEnumType(Class<?> enumType) {, +		Assert.notNull(enumType, "Enum type must not be null");, +		if (!Enum.class.isAssignableFrom(enumType)) {, +			throw new IllegalArgumentException(String.format("The supplied type '%s' is not an enum.", enumType.getName()));, +		}, +		return enumType.asSubclass(Enum.class);, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/CollectionFactory.java, + * Factory for collections that is aware of Java 5 and Java 6 collection types., + * <p>Mainly for internal use within the framework., + * @author Oliver Gierke, + * @author Sam Brannen, +	 * @return {@code true} if the type is approximable, +	 * @param collectionType the desired type of the target Collection, +	public static <E> Collection<E> createCollection(Class<?> collectionType, int capacity) {, +		return createCollection(collectionType, null, capacity);, +	 * @param collectionType the desired type of the target Collection; never {@code null}, +	@SuppressWarnings({ "unchecked", "cast" }), +	public static <E> Collection<E> createCollection(Class<?> collectionType, Class<?> elementType, int capacity) {, +		Assert.notNull(collectionType, "Collection type must not be null");, +		if (collectionType.isInterface()) {, +			if (Set.class.equals(collectionType) || Collection.class.equals(collectionType)) {, +			else if (List.class.equals(collectionType)) {, +			else if (SortedSet.class.equals(collectionType) || NavigableSet.class.equals(collectionType)) {, +				throw new IllegalArgumentException("Unsupported Collection interface: " + collectionType.getName());, +		else if (EnumSet.class.equals(collectionType)) {, +			return (Collection<E>) EnumSet.noneOf(asEnumType(elementType));, +			if (!Collection.class.isAssignableFrom(collectionType)) {, +				throw new IllegalArgumentException("Unsupported Collection type: " + collectionType.getName());, +				return (Collection<E>) collectionType.newInstance();, +					"Could not instantiate Collection type: " + collectionType.getName(), ex);, +	 * @param mapType the desired type of the target Map, +	public static <K, V> Map<K, V> createMap(Class<?> mapType, int capacity) {, +		return createMap(mapType, null, capacity);, +	 * @param mapType the desired type of the target Map, +	public static <K, V> Map<K, V> createMap(Class<?> mapType, Class<?> keyType, int capacity) {, +		Assert.notNull(mapType, "Map type must not be null");, +		if (mapType.isInterface()) {, +			if (Map.class.equals(mapType)) {, +			else if (SortedMap.class.equals(mapType) || NavigableMap.class.equals(mapType)) {, +			else if (MultiValueMap.class.equals(mapType)) {, +				throw new IllegalArgumentException("Unsupported Map interface: " + mapType.getName());, +		else if (EnumMap.class.equals(mapType)) {, +			return new EnumMap(asEnumType(keyType));, +			if (!Map.class.isAssignableFrom(mapType)) {, +				throw new IllegalArgumentException("Unsupported Map type: " + mapType.getName());, +				return (Map<K, V>) mapType.newInstance();, +				throw new IllegalArgumentException("Could not instantiate Map type: " + mapType.getName(), ex);, +	/**, +	 * Cast the given type to a subtype of {@link Enum}., +	 * @param enumType the enum type, never {@code null}]