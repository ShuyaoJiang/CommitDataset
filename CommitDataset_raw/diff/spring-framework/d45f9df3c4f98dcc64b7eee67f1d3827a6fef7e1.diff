[+++ b/spring-framework-reference/src/validation.xml, +			To directly address this, Spring 3 introduces a convenient <emphasis>format</emphasis> SPI that provides a simple and robust alternative to PropertyEditors for client environments., +			Use Formatters when you're working in a client environment, such as a web application, and need to parse and print localized field values., +package org.springframework.format;, +, +public interface Formatter<T> extends Printer<T>, Parser<T> {, +}]]>, +			</programlisting>, +			<para>, +				Where Formatter extends from the Printer and Parser building-block interfaces:, +			</para>, +			<programlisting language="java"><![CDATA[, +				Parameterize T to be the type of object you wish to format, for example, <classname>java.util.Date</classname>., +				The <filename>datetime</filename> package provides a DateFormatter to format java.util.Date objects with a java.text.DateFormat., +			<title>Annotation-driven Formatting</title>, +				Field formatting can be triggered by field type or annotation., +				To bind an annotation to a formatter, implement AnnotationFormatterFactory:, +				The example AnnotationFormatterFactory implementation below binds a @NumberFormat Annotation to a formatter., +				This annotation allows a number style or pattern to be specified:, +        return new HashSet<Class<?>>(asList(new Class<?>[] { , +            Short.class, Integer.class, Long.class, Float.class, Double.class, BigDecimal.class, BigInteger.class }));, +				Then, to trigger formatting, annotate fields with @NumberFormat:, +			<section id="format.annotations.api">, +				<title>Format Annotation API</title>, +					A portable format annotation API exists in the <filename>org.springframework.format.annotation</filename> package., +					Use the @NumberFormat to apply formatting to java.lang.Number fields., +					Use the @DateTimeFormat to apply formatting to java.util.Date, java.util.Calendar, java.util.Long, or Joda Time fields. , +		</section>, +				At runtime, Formatters are registered in a FormatterRegistry., +				If not configured explicitly, Spring MVC will automatically register default formatters for common types such as numbers and dates., +				To rely on default formatting rules, no custom configuration is required in your Spring MVC config XML:, +				Full support for the Joda Time formatting library is also installed if Joda Time is present on the classpath.]