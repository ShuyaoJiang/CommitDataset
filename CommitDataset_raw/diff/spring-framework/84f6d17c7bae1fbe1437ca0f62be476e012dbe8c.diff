[+++ b/spring-expression/src/test/java/org/springframework/expression/spel/ExpressionWithConversionTests.java, + * Copyright 2002-2014 the original author or authors., +		List<?> l = (List<?>) tcs.convertValue(listOfInteger, TypeDescriptor.forObject(listOfInteger), typeDescriptorForListOfString);, +		l = (List<?>) tcs.convertValue(listOfString, TypeDescriptor.forObject(listOfString), typeDescriptorForListOfString);, +		Class<?> clazz = parser.parseExpression("listOfInteger[1].getClass()").getValue(context, Class.class); // element type correctly Integer, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/ExpressionWithConversionTests.java, + * Copyright 2002-2014 the original author or authors., +		List<?> l = (List<?>) tcs.convertValue(listOfInteger, TypeDescriptor.forObject(listOfInteger), typeDescriptorForListOfString);, +		l = (List<?>) tcs.convertValue(listOfString, TypeDescriptor.forObject(listOfString), typeDescriptorForListOfString);, +		Class<?> clazz = parser.parseExpression("listOfInteger[1].getClass()").getValue(context, Class.class); // element type correctly Integer, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/IndexingTests.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +			return (((Map<?, ?>) target).containsKey(name));, +			return new TypedValue(((Map<?, ?>) target).get(name));, +		listNotGeneric = new ArrayList(2);, +		listOfScalarNotGeneric = new ArrayList(1);, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/ExpressionWithConversionTests.java, + * Copyright 2002-2014 the original author or authors., +		List<?> l = (List<?>) tcs.convertValue(listOfInteger, TypeDescriptor.forObject(listOfInteger), typeDescriptorForListOfString);, +		l = (List<?>) tcs.convertValue(listOfString, TypeDescriptor.forObject(listOfString), typeDescriptorForListOfString);, +		Class<?> clazz = parser.parseExpression("listOfInteger[1].getClass()").getValue(context, Class.class); // element type correctly Integer, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/IndexingTests.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +			return (((Map<?, ?>) target).containsKey(name));, +			return new TypedValue(((Map<?, ?>) target).get(name));, +		listNotGeneric = new ArrayList(2);, +		listOfScalarNotGeneric = new ArrayList(1);, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/MapAccessTests.java, +			return (((Map<?, ?>) target).containsKey(name));, +			return new TypedValue(((Map<? ,?>) target).get(name));, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/ExpressionWithConversionTests.java, + * Copyright 2002-2014 the original author or authors., +		List<?> l = (List<?>) tcs.convertValue(listOfInteger, TypeDescriptor.forObject(listOfInteger), typeDescriptorForListOfString);, +		l = (List<?>) tcs.convertValue(listOfString, TypeDescriptor.forObject(listOfString), typeDescriptorForListOfString);, +		Class<?> clazz = parser.parseExpression("listOfInteger[1].getClass()").getValue(context, Class.class); // element type correctly Integer, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/IndexingTests.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +			return (((Map<?, ?>) target).containsKey(name));, +			return new TypedValue(((Map<?, ?>) target).get(name));, +		listNotGeneric = new ArrayList(2);, +		listOfScalarNotGeneric = new ArrayList(1);, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/MapAccessTests.java, +			return (((Map<?, ?>) target).containsKey(name));, +			return new TypedValue(((Map<? ,?>) target).get(name));, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SelectionAndProjectionTests.java, + * Copyright 2002-2014 the original author or authors., +		List<?> list = (List<?>) value;, +		List<?> list = (List<?>) value;, +		List<?> list = (List<?>) value;, +		List<?> list = (List<?>) value;, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/ExpressionWithConversionTests.java, + * Copyright 2002-2014 the original author or authors., +		List<?> l = (List<?>) tcs.convertValue(listOfInteger, TypeDescriptor.forObject(listOfInteger), typeDescriptorForListOfString);, +		l = (List<?>) tcs.convertValue(listOfString, TypeDescriptor.forObject(listOfString), typeDescriptorForListOfString);, +		Class<?> clazz = parser.parseExpression("listOfInteger[1].getClass()").getValue(context, Class.class); // element type correctly Integer]