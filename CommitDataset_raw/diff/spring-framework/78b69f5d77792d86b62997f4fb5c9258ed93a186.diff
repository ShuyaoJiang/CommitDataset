[+++ b/spring-test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java, +	 * <em>present</em> on the supplied class; or if a test class or composed annotation, +	 * in the class hierarchy declares both {@code @ContextConfiguration} and, +	 * {@code @ContextHierarchy} as top-level annotations., +						+ "or composed annotation.", declaringClass.getName());, +					rootDeclaringClass, configAttributesList);, +					convertContextConfigToConfigAttributesAndAddToList(contextConfiguration, rootDeclaringClass,, +				descriptor.getRootDeclaringClass(), attributesList);, +++ b/spring-test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java, +	 * <em>present</em> on the supplied class; or if a test class or composed annotation, +	 * in the class hierarchy declares both {@code @ContextConfiguration} and, +	 * {@code @ContextHierarchy} as top-level annotations., +						+ "or composed annotation.", declaringClass.getName());, +					rootDeclaringClass, configAttributesList);, +					convertContextConfigToConfigAttributesAndAddToList(contextConfiguration, rootDeclaringClass,, +				descriptor.getRootDeclaringClass(), attributesList);, +++ b/spring-test/src/test/java/org/springframework/test/context/AbstractContextLoaderUtilsTests.java, + * Copyright 2002-2014 the original author or authors., +		assertEquals("declaring class", expectedDeclaringClass, attributes.getDeclaringClass());, +		assertArrayEquals("locations", expectedLocations, attributes.getLocations());, +		assertArrayEquals("classes", expectedClasses, attributes.getClasses());, +		assertEquals("inherit locations", expectedInheritLocations, attributes.isInheritLocations());, +		assertEquals("context loader", expectedContextLoaderClass, attributes.getContextLoaderClass());, +++ b/spring-test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java, +	 * <em>present</em> on the supplied class; or if a test class or composed annotation, +	 * in the class hierarchy declares both {@code @ContextConfiguration} and, +	 * {@code @ContextHierarchy} as top-level annotations., +						+ "or composed annotation.", declaringClass.getName());, +					rootDeclaringClass, configAttributesList);, +					convertContextConfigToConfigAttributesAndAddToList(contextConfiguration, rootDeclaringClass,, +				descriptor.getRootDeclaringClass(), attributesList);, +++ b/spring-test/src/test/java/org/springframework/test/context/AbstractContextLoaderUtilsTests.java, + * Copyright 2002-2014 the original author or authors., +		assertEquals("declaring class", expectedDeclaringClass, attributes.getDeclaringClass());, +		assertArrayEquals("locations", expectedLocations, attributes.getLocations());, +		assertArrayEquals("classes", expectedClasses, attributes.getClasses());, +		assertEquals("inherit locations", expectedInheritLocations, attributes.isInheritLocations());, +		assertEquals("context loader", expectedContextLoaderClass, attributes.getContextLoaderClass());, +++ b/spring-test/src/test/java/org/springframework/test/context/ContextLoaderUtilsConfigurationAttributesTests.java, + * Copyright 2002-2014 the original author or authors., +		Class<BareAnnotations> testClass = BareAnnotations.class;, +		List<ContextConfigurationAttributes> attributesList = resolveContextConfigurationAttributes(testClass);, +		assertAttributes(attributesList.get(0), testClass, EMPTY_STRING_ARRAY, EMPTY_CLASS_ARRAY, ContextLoader.class,, +			true);, +		Class<MetaLocationsFoo> testClass = MetaLocationsFoo.class;, +		List<ContextConfigurationAttributes> attributesList = resolveContextConfigurationAttributes(testClass);, +		assertAttributes(attributesList.get(0), testClass, new String[] { "/foo.xml" }, EMPTY_CLASS_ARRAY,, +			ContextLoader.class, true);, +		Class<MetaLocationsFooWithOverrides> testClass = MetaLocationsFooWithOverrides.class;, +		List<ContextConfigurationAttributes> attributesList = resolveContextConfigurationAttributes(testClass);, +		assertAttributes(attributesList.get(0), testClass, new String[] { "/foo.xml" }, EMPTY_CLASS_ARRAY,, +			ContextLoader.class, true);, +		Class<MetaLocationsFooWithOverriddenAttributes> testClass = MetaLocationsFooWithOverriddenAttributes.class;, +		List<ContextConfigurationAttributes> attributesList = resolveContextConfigurationAttributes(testClass);, +		assertAttributes(attributesList.get(0), testClass, new String[] { "foo1.xml", "foo2.xml" }, EMPTY_CLASS_ARRAY,, +			ContextLoader.class, true);, +		Class<MetaLocationsBar> testClass = MetaLocationsBar.class;, +		List<ContextConfigurationAttributes> attributesList = resolveContextConfigurationAttributes(testClass);, +		assertAttributes(attributesList.get(0), testClass, new String[] { "/bar.xml" }, EMPTY_CLASS_ARRAY,, +			ContextLoader.class, true);, +		assertAttributes(attributesList.get(1), MetaLocationsFoo.class, new String[] { "/foo.xml" },, +++ b/spring-test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java, +	 * <em>present</em> on the supplied class; or if a test class or composed annotation, +	 * in the class hierarchy declares both {@code @ContextConfiguration} and, +	 * {@code @ContextHierarchy} as top-level annotations., +						+ "or composed annotation.", declaringClass.getName());, +					rootDeclaringClass, configAttributesList);, +					convertContextConfigToConfigAttributesAndAddToList(contextConfiguration, rootDeclaringClass,, +				descriptor.getRootDeclaringClass(), attributesList);, +++ b/spring-test/src/test/java/org/springframework/test/context/AbstractContextLoaderUtilsTests.java, + * Copyright 2002-2014 the original author or authors., +		assertEquals("declaring class", expectedDeclaringClass, attributes.getDeclaringClass());, +		assertArrayEquals("locations", expectedLocations, attributes.getLocations());, +		assertArrayEquals("classes", expectedClasses, attributes.getClasses());, +		assertEquals("inherit locations", expectedInheritLocations, attributes.isInheritLocations());, +		assertEquals("context loader", expectedContextLoaderClass, attributes.getContextLoaderClass());, +++ b/spring-test/src/test/java/org/springframework/test/context/ContextLoaderUtilsConfigurationAttributesTests.java, + * Copyright 2002-2014 the original author or authors., +		Class<BareAnnotations> testClass = BareAnnotations.class;, +		List<ContextConfigurationAttributes> attributesList = resolveContextConfigurationAttributes(testClass);, +		assertAttributes(attributesList.get(0), testClass, EMPTY_STRING_ARRAY, EMPTY_CLASS_ARRAY, ContextLoader.class,, +			true);, +		Class<MetaLocationsFoo> testClass = MetaLocationsFoo.class;, +		List<ContextConfigurationAttributes> attributesList = resolveContextConfigurationAttributes(testClass);, +		assertAttributes(attributesList.get(0), testClass, new String[] { "/foo.xml" }, EMPTY_CLASS_ARRAY,, +			ContextLoader.class, true);, +		Class<MetaLocationsFooWithOverrides> testClass = MetaLocationsFooWithOverrides.class;, +		List<ContextConfigurationAttributes> attributesList = resolveContextConfigurationAttributes(testClass);, +		assertAttributes(attributesList.get(0), testClass, new String[] { "/foo.xml" }, EMPTY_CLASS_ARRAY,, +			ContextLoader.class, true);, +		Class<MetaLocationsFooWithOverriddenAttributes> testClass = MetaLocationsFooWithOverriddenAttributes.class;, +		List<ContextConfigurationAttributes> attributesList = resolveContextConfigurationAttributes(testClass);, +		assertAttributes(attributesList.get(0), testClass, new String[] { "foo1.xml", "foo2.xml" }, EMPTY_CLASS_ARRAY,, +			ContextLoader.class, true);, +		Class<MetaLocationsBar> testClass = MetaLocationsBar.class;, +		List<ContextConfigurationAttributes> attributesList = resolveContextConfigurationAttributes(testClass);, +		assertAttributes(attributesList.get(0), testClass, new String[] { "/bar.xml" }, EMPTY_CLASS_ARRAY,, +			ContextLoader.class, true);, +		assertAttributes(attributesList.get(1), MetaLocationsFoo.class, new String[] { "/foo.xml" },, +++ b/spring-test/src/test/java/org/springframework/test/context/ContextLoaderUtilsContextHierarchyTests.java]