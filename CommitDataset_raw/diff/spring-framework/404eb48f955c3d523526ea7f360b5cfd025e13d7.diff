[+++ b/spring-jms/src/test/java/org/springframework/jms/annotation/AnnotationDrivenNamespaceTests.java, +		private JmsListenerContainerFactory<?> containerFactory;, +		public void setContainerFactory(JmsListenerContainerFactory<?> containerFactory) {, +++ b/spring-jms/src/test/java/org/springframework/jms/annotation/AnnotationDrivenNamespaceTests.java, +		private JmsListenerContainerFactory<?> containerFactory;, +		public void setContainerFactory(JmsListenerContainerFactory<?> containerFactory) {, +++ b/spring-jms/src/test/java/org/springframework/jms/config/JmsListenerContainerFactoryTests.java, +	private void setDefaultJmsConfig(AbstractJmsListenerContainerFactory<?> factory) {, +++ b/spring-jms/src/test/java/org/springframework/jms/annotation/AnnotationDrivenNamespaceTests.java, +		private JmsListenerContainerFactory<?> containerFactory;, +		public void setContainerFactory(JmsListenerContainerFactory<?> containerFactory) {, +++ b/spring-jms/src/test/java/org/springframework/jms/config/JmsListenerContainerFactoryTests.java, +	private void setDefaultJmsConfig(AbstractJmsListenerContainerFactory<?> factory) {, +++ b/spring-jms/src/test/java/org/springframework/jms/config/JmsNamespaceHandlerTests.java, +		Map<String, ?> containers = context.getBeansOfType(DefaultMessageListenerContainer.class);, +		Iterator<ComponentDefinition> iterator = context.getRegisteredComponents();, +			ComponentDefinition compDef = iterator.next();, +		public ToolingTestApplicationContext(String path, Class<?> clazz) {, +++ b/spring-jms/src/test/java/org/springframework/jms/annotation/AnnotationDrivenNamespaceTests.java, +		private JmsListenerContainerFactory<?> containerFactory;, +		public void setContainerFactory(JmsListenerContainerFactory<?> containerFactory) {, +++ b/spring-jms/src/test/java/org/springframework/jms/config/JmsListenerContainerFactoryTests.java, +	private void setDefaultJmsConfig(AbstractJmsListenerContainerFactory<?> factory) {, +++ b/spring-jms/src/test/java/org/springframework/jms/config/JmsNamespaceHandlerTests.java, +		Map<String, ?> containers = context.getBeansOfType(DefaultMessageListenerContainer.class);, +		Iterator<ComponentDefinition> iterator = context.getRegisteredComponents();, +			ComponentDefinition compDef = iterator.next();, +		public ToolingTestApplicationContext(String path, Class<?> clazz) {, +++ b/spring-jms/src/test/java/org/springframework/jms/connection/JmsTransactionManagerTests.java, + * Copyright 2002-2014 the original author or authors., +		jt.execute(new SessionCallback<Void>() {, +			public Void doInJms(Session sess) {, +		jt.execute(new SessionCallback<Void>() {, +			public Void doInJms(Session sess) {, +		jt.execute(new SessionCallback<Void>() {, +			public Void doInJms(Session sess) {, +				jt.execute(new SessionCallback<Void>() {, +					public Void doInJms(Session sess) {, +		jt.execute(new SessionCallback<Void>() {, +			public Void doInJms(Session sess) {, +				jt.execute(new SessionCallback<Void>() {, +					public Void doInJms(Session sess) {, +		jt.execute(new SessionCallback<Void>() {, +			public Void doInJms(Session sess) {, +				jt.execute(new SessionCallback<Void>() {, +					public Void doInJms(Session sess) {, +		jt.execute(new SessionCallback<Void>() {, +			public Void doInJms(Session sess) {, +		jt.execute(new SessionCallback<Void>() {, +			public Void doInJms(Session sess) {, +				jt.execute(new SessionCallback<Void>() {, +					public Void doInJms(Session sess) {, +		jt.execute(new SessionCallback<Void>() {, +			public Void doInJms(Session sess) {, +++ b/spring-jms/src/test/java/org/springframework/jms/annotation/AnnotationDrivenNamespaceTests.java, +		private JmsListenerContainerFactory<?> containerFactory;, +		public void setContainerFactory(JmsListenerContainerFactory<?> containerFactory) {, +++ b/spring-jms/src/test/java/org/springframework/jms/config/JmsListenerContainerFactoryTests.java, +	private void setDefaultJmsConfig(AbstractJmsListenerContainerFactory<?> factory) {, +++ b/spring-jms/src/test/java/org/springframework/jms/config/JmsNamespaceHandlerTests.java, +		Map<String, ?> containers = context.getBeansOfType(DefaultMessageListenerContainer.class);, +		Iterator<ComponentDefinition> iterator = context.getRegisteredComponents();, +			ComponentDefinition compDef = iterator.next();, +		public ToolingTestApplicationContext(String path, Class<?> clazz) {, +++ b/spring-jms/src/test/java/org/springframework/jms/connection/JmsTransactionManagerTests.java, + * Copyright 2002-2014 the original author or authors., +		jt.execute(new SessionCallback<Void>() {, +			public Void doInJms(Session sess) {, +		jt.execute(new SessionCallback<Void>() {, +			public Void doInJms(Session sess) {, +		jt.execute(new SessionCallback<Void>() {, +			public Void doInJms(Session sess) {, +				jt.execute(new SessionCallback<Void>() {, +					public Void doInJms(Session sess) {, +		jt.execute(new SessionCallback<Void>() {, +			public Void doInJms(Session sess) {, +				jt.execute(new SessionCallback<Void>() {, +					public Void doInJms(Session sess) {, +		jt.execute(new SessionCallback<Void>() {, +			public Void doInJms(Session sess) {, +				jt.execute(new SessionCallback<Void>() {, +					public Void doInJms(Session sess) {, +		jt.execute(new SessionCallback<Void>() {, +			public Void doInJms(Session sess) {, +		jt.execute(new SessionCallback<Void>() {, +			public Void doInJms(Session sess) {, +				jt.execute(new SessionCallback<Void>() {, +					public Void doInJms(Session sess) {, +		jt.execute(new SessionCallback<Void>() {, +			public Void doInJms(Session sess) {, +++ b/spring-jms/src/test/java/org/springframework/jms/core/JmsTemplateTests.java, + * Copyright 2002-2014 the original author or authors., +		template.execute(new ProducerCallback<Void>() {, +			public Void doInJms(Session session, MessageProducer producer) throws JMSException {, +		template.execute(new ProducerCallback<Void>() {, +			public Void doInJms(Session session, MessageProducer producer) throws JMSException {, +		template.execute(new SessionCallback<Void>() {, +			public Void doInJms(Session session) throws JMSException {, +			template.execute(new SessionCallback<Void>() {, +				public Void doInJms(Session session) throws JMSException {]