[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java, +import javax.servlet.AsyncEvent;, +import javax.servlet.AsyncListener;, +		asyncContext.addListener(TIMEOUT_LISTENER);, +, +	private final static AsyncListener TIMEOUT_LISTENER = new AsyncListener() {, +, +		@Override, +		public void onTimeout(AsyncEvent event) throws IOException {, +			event.getAsyncContext().complete();, +		}, +, +		@Override, +		public void onError(AsyncEvent event) throws IOException {, +			event.getAsyncContext().complete();, +		}, +, +		@Override, +		public void onStartAsync(AsyncEvent event) throws IOException {, +			// no-op, +		}, +, +		@Override, +		public void onComplete(AsyncEvent event) throws IOException {, +			// no-op, +		}, +	};, +, +, +, +, +			runIfAsyncNotComplete(() -> {, +			});, +			runIfAsyncNotComplete(() -> {, +			});, +		private void runIfAsyncNotComplete(Runnable task) {, +				if (this.asyncContext.getRequest().isAsyncStarted()) {, +					task.run();, +			}, +			catch (IllegalStateException ex) {, +				// Ignore:, +				// AsyncContext recycled and should not be used, +				// e.g. TIMEOUT_LISTENER (above) may have completed the AsyncContext, +			}, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java, +import javax.servlet.AsyncEvent;, +import javax.servlet.AsyncListener;, +		asyncContext.addListener(TIMEOUT_LISTENER);, +, +	private final static AsyncListener TIMEOUT_LISTENER = new AsyncListener() {, +, +		@Override, +		public void onTimeout(AsyncEvent event) throws IOException {, +			event.getAsyncContext().complete();, +		}, +, +		@Override, +		public void onError(AsyncEvent event) throws IOException {, +			event.getAsyncContext().complete();, +		}, +, +		@Override, +		public void onStartAsync(AsyncEvent event) throws IOException {, +			// no-op, +		}, +, +		@Override, +		public void onComplete(AsyncEvent event) throws IOException {, +			// no-op, +		}, +	};, +, +, +, +, +			runIfAsyncNotComplete(() -> {, +			});, +			runIfAsyncNotComplete(() -> {, +			});, +		private void runIfAsyncNotComplete(Runnable task) {, +				if (this.asyncContext.getRequest().isAsyncStarted()) {, +					task.run();, +			}, +			catch (IllegalStateException ex) {, +				// Ignore:, +				// AsyncContext recycled and should not be used, +				// e.g. TIMEOUT_LISTENER (above) may have completed the AsyncContext, +			}, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpResponse.java]