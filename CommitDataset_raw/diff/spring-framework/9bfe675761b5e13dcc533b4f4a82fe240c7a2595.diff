[+++ b/spring-core/src/test/java/org/springframework/core/convert/support/GenericConversionServiceTests.java, + * Copyright 2002-2012 the original author or authors., +import static org.junit.Assert.assertTrue;, + * @author Phillip Webb, +	@Test, +	public void convertPrimitiveArray() throws Exception {, +		GenericConversionService conversionService = new DefaultConversionService();, +		byte[] byteArray = new byte[] { 1, 2, 3 };, +		Byte[] converted = conversionService.convert(byteArray, Byte[].class);, +		assertTrue(Arrays.equals(converted, new Byte[] { 1, 2, 3 }));, +	}, +, +	@Test, +	public void canConvertIllegalArgumentNullTargetTypeFromClass() {, +		try {, +			conversionService.canConvert(String.class, null);, +			fail("Did not thow IllegalArgumentException");, +		} catch(IllegalArgumentException e) {, +		}, +	}, +, +	@Test, +	public void canConvertIllegalArgumentNullTargetTypeFromTypeDescriptor() {, +		try {, +			conversionService.canConvert(TypeDescriptor.valueOf(String.class), null);, +			fail("Did not thow IllegalArgumentException");, +		} catch(IllegalArgumentException e) {, +		}, +	}, +, +	@Test, +	@SuppressWarnings({ "rawtypes" }), +	public void convertHashMapValuesToList() throws Exception {, +		GenericConversionService conversionService = new DefaultConversionService();, +		Map<String, Integer> hashMap = new LinkedHashMap<String, Integer>();, +		hashMap.put("1", 1);, +		hashMap.put("2", 2);, +		List converted = conversionService.convert(hashMap.values(), List.class);, +		assertEquals(Arrays.asList(1, 2), converted);, +	}, +, +	@Test, +	public void removeConvertible() throws Exception {, +		conversionService.addConverter(new ColorConverter());, +		assertTrue(conversionService.canConvert(String.class, Color.class));, +		conversionService.removeConvertible(String.class, Color.class);, +		assertFalse(conversionService.canConvert(String.class, Color.class));, +	}]