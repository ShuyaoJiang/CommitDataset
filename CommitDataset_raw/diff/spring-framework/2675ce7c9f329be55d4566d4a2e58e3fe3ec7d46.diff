[+++ b/spring-context-support/src/main/java/org/springframework/ui/freemarker/FreeMarkerTemplateUtils.java, + * Copyright 2002-2014 the original author or authors., +, +++ b/spring-context-support/src/main/java/org/springframework/ui/freemarker/FreeMarkerTemplateUtils.java, + * Copyright 2002-2014 the original author or authors., +, +++ b/spring-context-support/src/main/java/org/springframework/ui/freemarker/SpringTemplateLoader.java, + * Copyright 2002-2014 the original author or authors., +, +++ b/spring-context-support/src/main/java/org/springframework/ui/freemarker/FreeMarkerTemplateUtils.java, + * Copyright 2002-2014 the original author or authors., +, +++ b/spring-context-support/src/main/java/org/springframework/ui/freemarker/SpringTemplateLoader.java, + * Copyright 2002-2014 the original author or authors., +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolver.java, + *, + * <p>When a user attempts to subscribe to "/user/queue/position-updates", the, + *, + * <p>When a message is sent to a user with a destination such as, + * @author Brian Clozel, +, +			String targetDestination = getTargetDestination(, +					destination, info.getDestinationWithoutPrefix(), sessionId, info.getUser());, +			if (targetDestination != null) {, +				resolved.add(targetDestination);, +	 * @return a target destination, or {@code null} if none, +, +		public DestinationInfo(String destinationWithoutPrefix, String subscribeDestination, String user,, +++ b/spring-context-support/src/main/java/org/springframework/ui/freemarker/FreeMarkerTemplateUtils.java, + * Copyright 2002-2014 the original author or authors., +, +++ b/spring-context-support/src/main/java/org/springframework/ui/freemarker/SpringTemplateLoader.java, + * Copyright 2002-2014 the original author or authors., +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolver.java, + *, + * <p>When a user attempts to subscribe to "/user/queue/position-updates", the, + *, + * <p>When a message is sent to a user with a destination such as, + * @author Brian Clozel, +, +			String targetDestination = getTargetDestination(, +					destination, info.getDestinationWithoutPrefix(), sessionId, info.getUser());, +			if (targetDestination != null) {, +				resolved.add(targetDestination);, +	 * @return a target destination, or {@code null} if none, +, +		public DestinationInfo(String destinationWithoutPrefix, String subscribeDestination, String user,, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/AbstractHandlerMethodAdapter.java, + * Copyright 2002-2014 the original author or authors., +, +, +, +	 * This implementation expects the handler to be an {@link HandlerMethod}., +		return (handler instanceof HandlerMethod && supportsInternal((HandlerMethod) handler));, +	 * This implementation expects the handler to be an {@link HandlerMethod}., +, +	 * @return ModelAndView object with the name of the view and the required model data,, +	 * or {@code null} if the request has been handled directly, +			HttpServletResponse response, HandlerMethod handlerMethod) throws Exception;, +	 * This implementation expects the handler to be an {@link HandlerMethod}., +]