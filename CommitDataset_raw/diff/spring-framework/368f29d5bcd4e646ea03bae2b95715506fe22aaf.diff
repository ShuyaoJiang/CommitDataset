[+++ b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java, +			int skipped = skipSeparator(path, pos, this.pathSeparator);, +			pos += skipped;, +			skipped = skipSegment(pathChars, pos, pattDir);, +			if (skipped < pattDir.length()) {, +				if (skipped > 0) {, +			pos += skipped;, +	private int skipSegment(char[] chars, int pos, String prefix) {, +		int skipped = 0;, +			if (isWildcardChar(c)) {, +				return skipped;, +			else if (pos + skipped >= chars.length) {, +			else if (chars[pos + skipped] == c) {, +				skipped++;, +		return skipped;, +	}, +, +	private int skipSeparator(String path, int pos, String separator) {, +		int skipped = 0;, +		while (path.startsWith(separator, pos + skipped)) {, +			skipped += separator.length();, +		}, +		return skipped;, +++ b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java, +			int skipped = skipSeparator(path, pos, this.pathSeparator);, +			pos += skipped;, +			skipped = skipSegment(pathChars, pos, pattDir);, +			if (skipped < pattDir.length()) {, +				if (skipped > 0) {, +			pos += skipped;, +	private int skipSegment(char[] chars, int pos, String prefix) {, +		int skipped = 0;, +			if (isWildcardChar(c)) {, +				return skipped;, +			else if (pos + skipped >= chars.length) {, +			else if (chars[pos + skipped] == c) {, +				skipped++;, +		return skipped;, +	}, +, +	private int skipSeparator(String path, int pos, String separator) {, +		int skipped = 0;, +		while (path.startsWith(separator, pos + skipped)) {, +			skipped += separator.length();, +		}, +		return skipped;, +++ b/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java, +		assertTrue(pathMatcher.match("http://example.org", "http://example.org")); // SPR-14141]