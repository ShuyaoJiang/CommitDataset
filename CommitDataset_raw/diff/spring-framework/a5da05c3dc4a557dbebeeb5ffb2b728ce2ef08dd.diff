[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/Autowired.java, + * Copyright 2002-2017 the original author or authors., + * dependency type, the container can autowire all beans matching the, + * declared value type. For such purposes, the map keys must be declared, + * as type String and will be resolved to the corresponding bean names., + * Alternatively, a target bean may also be of type {@code Collection} or, + * {@code Map} itself, getting injected as such., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/Autowired.java, + * Copyright 2002-2017 the original author or authors., + * dependency type, the container can autowire all beans matching the, + * declared value type. For such purposes, the map keys must be declared, + * as type String and will be resolved to the corresponding bean names., + * Alternatively, a target bean may also be of type {@code Collection} or, + * {@code Map} itself, getting injected as such., +++ b/src/docs/asciidoc/core/core-beans.adoc, +, +, +Alternatively, you may express the non-required nature of a particular dependency, +through Java 8's `java.util.Optional`:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	public class SimpleMovieLister {, +, +		@Autowired, +		public void setMovieFinder(Optional<MovieFinder> movieFinder) {, +			..., +		}, +	}, +----, +, +As of Spring Framework 5.0, you may also use an `@Nullable` annotation (of any kind, +in any package, e.g. `javax.annotation.Nullable` from JSR-305):, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	public class SimpleMovieLister {, +, +		@Autowired, +		public void setMovieFinder(@Nullable MovieFinder movieFinder) {, +			..., +		}, +	}, +----, +, +, +Letting qualifier values select against target bean names, within the type-matching, +candidates, doesn't even require a `@Qualifier` annotation at the injection point., +If there is no other resolution indicator (e.g. a qualifier or a primary marker),, +for a non-unique dependency situation, Spring will match the injection point name, +(i.e. field name or parameter name) against the target bean names and choose the, +same-named candidate, if any., +, +That said, if you intend to express annotation-driven injection by name, do not, +primarily use `@Autowired`, even if is capable of selecting by bean name among, +type-matching candidates. Instead, use the JSR-250 `@Resource` annotation, which is, +Like `@Autowired`, `@Inject` can also be used with `java.util.Optional` or, +`@Nullable`. This is even more applicable here since `@Inject` does not have, +a `required` attribute., +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	public class SimpleMovieLister {, +, +		@Inject, +		public void setMovieFinder(Optional<MovieFinder> movieFinder) {, +			..., +		}, +	}, +----, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	public class SimpleMovieLister {, +, +		@Inject, +		public void setMovieFinder(@Nullable MovieFinder movieFinder) {, +			..., +		}, +	}, +----, +]