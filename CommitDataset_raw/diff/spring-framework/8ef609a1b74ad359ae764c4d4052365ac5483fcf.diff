[+++ b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java, +			Method[] methods = searchType.isInterface() ?, +					searchType.getMethods() :, +					getDeclaredMethods(searchType, false);, +		Method[] methods = getDeclaredMethods(clazz, false);, +		Method[] methods = getDeclaredMethods(clazz, false);, +	 * Variant of {@link Class#getDeclaredMethods()} that uses a local cache in, +	 * order to avoid the JVM's SecurityManager check and new Method instances., +	 * In addition, it also includes Java 8 default methods from locally, +	 * implemented interfaces, since those are effectively to be treated just, +	 * like declared methods., +	 * @since 5.2, +	public static Method[] getDeclaredMethods(Class<?> clazz) {, +		return getDeclaredMethods(clazz, true);, +	}, +, +	private static Method[] getDeclaredMethods(Class<?> clazz, boolean defensive) {, +		return (result.length == 0 || !defensive) ? result : result.clone();, +++ b/spring-core/src/main/java/org/springframework/util/ReflectionUtils.java, +			Method[] methods = searchType.isInterface() ?, +					searchType.getMethods() :, +					getDeclaredMethods(searchType, false);, +		Method[] methods = getDeclaredMethods(clazz, false);, +		Method[] methods = getDeclaredMethods(clazz, false);, +	 * Variant of {@link Class#getDeclaredMethods()} that uses a local cache in, +	 * order to avoid the JVM's SecurityManager check and new Method instances., +	 * In addition, it also includes Java 8 default methods from locally, +	 * implemented interfaces, since those are effectively to be treated just, +	 * like declared methods., +	 * @since 5.2, +	public static Method[] getDeclaredMethods(Class<?> clazz) {, +		return getDeclaredMethods(clazz, true);, +	}, +, +	private static Method[] getDeclaredMethods(Class<?> clazz, boolean defensive) {, +		return (result.length == 0 || !defensive) ? result : result.clone();, +++ b/spring-core/src/test/java/org/springframework/util/ReflectionUtilsTests.java, + * Copyright 2002-2019 the original author or authors., +	@Test, +	public void getDecalredMethodsReturnsCopy() {, +		Method[] m1 = ReflectionUtils.getDeclaredMethods(A.class);, +		Method[] m2 = ReflectionUtils.getDeclaredMethods(A.class);, +		assertThat(m1, not(sameInstance(m2)));, +	}, +]