[+++ b/spring-web/src/main/java/org/springframework/web/client/HttpMessageConverterExtractor.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.http.converter.HttpMessageNotReadableException;, +		try {, +					GenericHttpMessageConverter<?> genericMessageConverter =, +							(GenericHttpMessageConverter<?>) messageConverter;, +		}, +		catch(IOException | HttpMessageNotReadableException exc) {, +			throw new RestClientException("Error while extracting response for type [", +					+ this.responseType + "] and content type [" + contentType + "]", exc);, +		}, +++ b/spring-web/src/main/java/org/springframework/web/client/HttpMessageConverterExtractor.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.http.converter.HttpMessageNotReadableException;, +		try {, +					GenericHttpMessageConverter<?> genericMessageConverter =, +							(GenericHttpMessageConverter<?>) messageConverter;, +		}, +		catch(IOException | HttpMessageNotReadableException exc) {, +			throw new RestClientException("Error while extracting response for type [", +					+ this.responseType + "] and content type [" + contentType + "]", exc);, +		}, +++ b/spring-web/src/test/java/org/springframework/web/client/HttpMessageConverterExtractorTests.java, +import org.hamcrest.Matchers;, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +import org.springframework.http.converter.HttpMessageNotReadableException;, + * @author Brian Clozel, +	@Rule, +	public final ExpectedException exception = ExpectedException.none();, +, +		extractor = new HttpMessageConverterExtractor<>(String.class, createConverterList(converter));, +	@Test, +		extractor = new HttpMessageConverterExtractor<>(String.class, createConverterList(converter));, +		exception.expect(RestClientException.class);, +		extractor = new HttpMessageConverterExtractor<List<String>>(type, createConverterList(converter));, +	@Test // SPR-13592, +	@SuppressWarnings("unchecked"), +	public void converterThrowsIOException() throws IOException {, +		HttpMessageConverter<String> converter = mock(HttpMessageConverter.class);, +		HttpHeaders responseHeaders = new HttpHeaders();, +		MediaType contentType = MediaType.TEXT_PLAIN;, +		responseHeaders.setContentType(contentType);, +		extractor = new HttpMessageConverterExtractor<>(String.class, createConverterList(converter));, +		given(response.getStatusCode()).willReturn(HttpStatus.OK);, +		given(response.getHeaders()).willReturn(responseHeaders);, +		given(response.getBody()).willReturn(new ByteArrayInputStream("Foobar".getBytes()));, +		given(converter.canRead(String.class, contentType)).willThrow(IOException.class);, +		exception.expect(RestClientException.class);, +		exception.expectMessage("Error while extracting response for type " +, +				"[class java.lang.String] and content type [text/plain]");, +		exception.expectCause(Matchers.instanceOf(IOException.class));, +, +		extractor.extractData(response);, +	}, +, +	@Test // SPR-13592, +	@SuppressWarnings("unchecked"), +	public void converterThrowsHttpMessageNotReadableException() throws IOException {, +		HttpMessageConverter<String> converter = mock(HttpMessageConverter.class);, +		HttpHeaders responseHeaders = new HttpHeaders();, +		MediaType contentType = MediaType.TEXT_PLAIN;, +		responseHeaders.setContentType(contentType);, +		extractor = new HttpMessageConverterExtractor<>(String.class, createConverterList(converter));, +		given(response.getStatusCode()).willReturn(HttpStatus.OK);, +		given(response.getHeaders()).willReturn(responseHeaders);, +		given(response.getBody()).willReturn(new ByteArrayInputStream("Foobar".getBytes()));, +		given(converter.canRead(String.class, contentType)).willThrow(HttpMessageNotReadableException.class);, +		exception.expect(RestClientException.class);, +		exception.expectMessage("Error while extracting response for type " +, +				"[class java.lang.String] and content type [text/plain]");, +		exception.expectCause(Matchers.instanceOf(HttpMessageNotReadableException.class));, +, +		extractor.extractData(response);, +	}, +]