[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +	private InjectionMetadata findAutowiringMetadata(Class clazz) {, +					metadata = buildAutowiringMetadata(clazz);, +					this.injectionMetadataCache.put(clazz, metadata);, +				}, +			}, +		}, +		return metadata;, +	}, +, +	private InjectionMetadata buildAutowiringMetadata(Class clazz) {, +		return new InjectionMetadata(clazz, elements);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +	private InjectionMetadata findAutowiringMetadata(Class clazz) {, +					metadata = buildAutowiringMetadata(clazz);, +					this.injectionMetadataCache.put(clazz, metadata);, +				}, +			}, +		}, +		return metadata;, +	}, +, +	private InjectionMetadata buildAutowiringMetadata(Class clazz) {, +		return new InjectionMetadata(clazz, elements);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/InitDestroyAnnotationBeanPostProcessor.java, +import java.util.LinkedHashSet;, +import java.util.Set;, +			metadata.checkConfigMembers(beanDefinition);, +	private LifecycleMetadata buildLifecycleMetadata(Class clazz) {, +		LinkedList<LifecycleElement> initMethods = new LinkedList<LifecycleElement>();, +		LinkedList<LifecycleElement> destroyMethods = new LinkedList<LifecycleElement>();, +		Class<?> targetClass = clazz;, +, +		do {, +			LinkedList<LifecycleElement> currInitMethods = new LinkedList<LifecycleElement>();, +			LinkedList<LifecycleElement> currDestroyMethods = new LinkedList<LifecycleElement>();, +			for (Method method : targetClass.getDeclaredMethods()) {, +				if (this.initAnnotationType != null) {, +					if (method.getAnnotation(this.initAnnotationType) != null) {, +						LifecycleElement element = new LifecycleElement(method);, +						currInitMethods.add(element);, +				if (this.destroyAnnotationType != null) {, +					if (method.getAnnotation(this.destroyAnnotationType) != null) {, +						currDestroyMethods.add(new LifecycleElement(method));, +			initMethods.addAll(0, currInitMethods);, +			destroyMethods.addAll(currDestroyMethods);, +			targetClass = targetClass.getSuperclass();, +		}, +		while (targetClass != null && targetClass != Object.class);, +, +		return new LifecycleMetadata(clazz, initMethods, destroyMethods);, +		private final Set<LifecycleElement> initMethods;, +		private final Set<LifecycleElement> destroyMethods;, +		public LifecycleMetadata(Class targetClass, Collection<LifecycleElement> initMethods,, +				Collection<LifecycleElement> destroyMethods) {, +, +			this.initMethods = new LinkedHashSet<LifecycleElement>();, +			for (LifecycleElement element : initMethods) {, +				if (logger.isDebugEnabled()) {, +					logger.debug("Found init method on class [" + targetClass.getName() + "]: " + element);, +				}, +				this.initMethods.add(element);, +			}, +, +			this.destroyMethods = new LinkedHashSet<LifecycleElement>();, +			for (LifecycleElement element : destroyMethods) {, +				if (logger.isDebugEnabled()) {, +					logger.debug("Found destroy method on class [" + targetClass.getName() + "]: " + element);, +				}, +				this.destroyMethods.add(element);, +		public void checkConfigMembers(RootBeanDefinition beanDefinition) {, +			for (Iterator<LifecycleElement> it = this.initMethods.iterator(); it.hasNext();) {, +				String methodIdentifier = it.next().getIdentifier();, +				if (!beanDefinition.isExternallyManagedInitMethod(methodIdentifier)) {, +					beanDefinition.registerExternallyManagedInitMethod(methodIdentifier);, +				}, +				else {, +					it.remove();, +				}, +			}, +			for (Iterator<LifecycleElement> it = this.destroyMethods.iterator(); it.hasNext();) {, +				String methodIdentifier = it.next().getIdentifier();, +				if (!beanDefinition.isExternallyManagedDestroyMethod(methodIdentifier)) {, +					beanDefinition.registerExternallyManagedDestroyMethod(methodIdentifier);, +				}, +				else {, +					it.remove();, +				}, +			}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +	private InjectionMetadata findAutowiringMetadata(Class clazz) {, +					metadata = buildAutowiringMetadata(clazz);, +					this.injectionMetadataCache.put(clazz, metadata);, +				}, +			}, +		}, +		return metadata;, +	}, +, +	private InjectionMetadata buildAutowiringMetadata(Class clazz) {]