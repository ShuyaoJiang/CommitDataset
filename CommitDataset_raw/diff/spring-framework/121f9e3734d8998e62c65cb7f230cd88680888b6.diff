[+++ b/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java, + * Copyright 2002-2018 the original author or authors., +				method = searchInterfaces(ifc.getInterfaces(), bridgeMethod);, +				if (method != null) {, +					return method;, +				}, +++ b/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java, + * Copyright 2002-2018 the original author or authors., +				method = searchInterfaces(ifc.getInterfaces(), bridgeMethod);, +				if (method != null) {, +					return method;, +				}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletAnnotationControllerHandlerMethodTests.java, + * Copyright 2002-2018 the original author or authors., +import java.time.Instant;, +import java.util.Collection;, +import java.util.UUID;, +	public void bridgeMethodsWithMultipleInterfaces() throws Exception {, +		initServletWithControllers(ArticleController.class);, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/method");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		getServlet().service(request, response);, +	}, +, +	@Test, +	@RestController, +	@RequestMapping(path = ApiConstants.ARTICLES_PATH), +	public static class ArticleController implements ApiConstants, ResourceEndpoint<Article, ArticlePredicate> {, +, +		@GetMapping(params = "page"), +		public Collection<Article> find(String pageable, ArticlePredicate predicate) {, +			throw new UnsupportedOperationException("not implemented");, +		}, +, +		@GetMapping, +		public List<Article> find(boolean sort, ArticlePredicate predicate) {, +			throw new UnsupportedOperationException("not implemented");, +		}, +	}, +, +	interface ApiConstants {, +, +		String API_V1 = "/v1";, +, +		String ARTICLES_PATH = API_V1 + "/articles";, +	}, +, +	public interface ResourceEndpoint<E extends Entity, P extends EntityPredicate> {, +, +		Collection<E> find(String pageable, P predicate) throws IOException;, +, +		List<E> find(boolean sort, P predicate) throws IOException;, +	}, +, +	public static abstract class Entity {, +, +		public UUID id;, +, +		public String createdBy;, +, +		public Instant createdDate;, +	}, +, +	public static class Article extends Entity {, +, +		public String slug;, +, +		public String title;, +, +		public String content;, +	}, +, +	public static abstract class EntityPredicate<E extends Entity> {, +, +		public String createdBy;, +, +		public Instant createdBefore;, +, +		public Instant createdAfter;, +, +		public boolean accept(E entity) {, +			return (createdBy == null || createdBy.equals(entity.createdBy)) &&, +					(createdBefore == null || createdBefore.compareTo(entity.createdDate) >= 0) &&, +					(createdAfter == null || createdAfter.compareTo(entity.createdDate) >= 0);, +		}, +	}, +, +	public static class ArticlePredicate extends EntityPredicate<Article> {, +, +		public String query;, +, +		@Override, +		public boolean accept(Article entity) {, +			return super.accept(entity) && (query == null || (entity.title.contains(query) || entity.content.contains(query)));, +		}, +	}, +, +		public void processMultipart(@RequestParam("content") String content, HttpServletResponse response), +				throws IOException {]