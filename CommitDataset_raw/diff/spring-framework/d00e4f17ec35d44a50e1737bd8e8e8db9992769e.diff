[+++ b/spring-core/src/main/java/org/springframework/core/io/ClassPathResource.java, +	 * @deprecated as of 4.3.13, in favor of selective use of, +	 * {@link #ClassPathResource(String, ClassLoader)} vs {@link #ClassPathResource(String, Class)}, +	@Deprecated, +		return (this.clazz != null ? new ClassPathResource(pathToUse, this.clazz) :, +				new ClassPathResource(pathToUse, this.classLoader));, +++ b/spring-core/src/main/java/org/springframework/core/io/ClassPathResource.java, +	 * @deprecated as of 4.3.13, in favor of selective use of, +	 * {@link #ClassPathResource(String, ClassLoader)} vs {@link #ClassPathResource(String, Class)}, +	@Deprecated, +		return (this.clazz != null ? new ClassPathResource(pathToUse, this.clazz) :, +				new ClassPathResource(pathToUse, this.classLoader));, +++ b/spring-core/src/test/java/org/springframework/core/io/ClassPathResourceTests.java, + * Copyright 2002-2017 the original author or authors., +	@Test, +	public void stringConstructorRaisesExceptionWithFullyQualifiedPath() {, +		assertExceptionContainsFullyQualifiedPath(new ClassPathResource(FQ_RESOURCE_PATH));, +	}, +, +	@Test, +	public void classLiteralConstructorRaisesExceptionWithFullyQualifiedPath() {, +		assertExceptionContainsFullyQualifiedPath(new ClassPathResource(NONEXISTENT_RESOURCE_NAME, getClass()));, +	}, +, +	@Test, +	public void classLoaderConstructorRaisesExceptionWithFullyQualifiedPath() {, +		assertExceptionContainsFullyQualifiedPath(new ClassPathResource(FQ_RESOURCE_PATH, getClass().getClassLoader()));, +	}, +, +	@Test, +	public void getDescriptionWithStringConstructor() {, +		assertDescriptionContainsExpectedPath(new ClassPathResource(FQ_RESOURCE_PATH), FQ_RESOURCE_PATH);, +	}, +, +	@Test, +	public void getDescriptionWithStringConstructorAndLeadingSlash() {, +		assertDescriptionContainsExpectedPath(new ClassPathResource(FQ_RESOURCE_PATH_WITH_LEADING_SLASH),, +				FQ_RESOURCE_PATH);, +	}, +, +	@Test, +	public void getDescriptionWithClassLiteralConstructor() {, +		assertDescriptionContainsExpectedPath(new ClassPathResource(NONEXISTENT_RESOURCE_NAME, getClass()),, +				FQ_RESOURCE_PATH);, +	}, +, +	@Test, +	public void getDescriptionWithClassLiteralConstructorAndLeadingSlash() {, +		assertDescriptionContainsExpectedPath(, +				new ClassPathResource(FQ_RESOURCE_PATH_WITH_LEADING_SLASH, getClass()), FQ_RESOURCE_PATH);, +	}, +, +	@Test, +	public void getDescriptionWithClassLoaderConstructor() {, +		assertDescriptionContainsExpectedPath(, +				new ClassPathResource(FQ_RESOURCE_PATH, getClass().getClassLoader()), FQ_RESOURCE_PATH);, +	}, +, +	@Test, +	public void getDescriptionWithClassLoaderConstructorAndLeadingSlash() {, +		assertDescriptionContainsExpectedPath(, +				new ClassPathResource(FQ_RESOURCE_PATH_WITH_LEADING_SLASH, getClass().getClassLoader()), FQ_RESOURCE_PATH);, +	}, +, +	@Test, +	public void dropLeadingSlashForClassLoaderAccess() {, +		assertEquals("test.html", new ClassPathResource("/test.html").getPath());, +		assertEquals("test.html", ((ClassPathResource) new ClassPathResource("").createRelative("/test.html")).getPath());, +	}, +, +	@Test, +	public void preserveLeadingSlashForClassRelativeAccess() {, +		assertEquals("/test.html", new ClassPathResource("/test.html", getClass()).getPath());, +		assertEquals("/test.html", ((ClassPathResource) new ClassPathResource("", getClass()).createRelative("/test.html")).getPath());, +	}, +, +]