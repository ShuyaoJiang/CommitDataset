[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/WebSocketSession.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +, +	 * Return a {@link DataBufferFactory} that can be used for creating message payloads., +	 * @return a buffer factory, +	 */, +	DataBufferFactory bufferFactory();, +, +	/**, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/WebSocketSession.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +, +	 * Return a {@link DataBufferFactory} that can be used for creating message payloads., +	 * @return a buffer factory, +	 */, +	DataBufferFactory bufferFactory();, +, +	/**, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +	public AbstractListenerWebSocketSession(T delegate, String id, URI uri, DataBufferFactory bufferFactory) {, +		super(delegate, id, uri, bufferFactory);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/WebSocketSession.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +, +	 * Return a {@link DataBufferFactory} that can be used for creating message payloads., +	 * @return a buffer factory, +	 */, +	DataBufferFactory bufferFactory();, +, +	/**, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +	public AbstractListenerWebSocketSession(T delegate, String id, URI uri, DataBufferFactory bufferFactory) {, +		super(delegate, id, uri, bufferFactory);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/JettyWebSocketHandlerAdapter.java, +		this.session = new JettyWebSocketSession(session, getUri(), getBufferFactory());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/WebSocketSession.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +, +	 * Return a {@link DataBufferFactory} that can be used for creating message payloads., +	 * @return a buffer factory, +	 */, +	DataBufferFactory bufferFactory();, +, +	/**, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +	public AbstractListenerWebSocketSession(T delegate, String id, URI uri, DataBufferFactory bufferFactory) {, +		super(delegate, id, uri, bufferFactory);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/JettyWebSocketHandlerAdapter.java, +		this.session = new JettyWebSocketSession(session, getUri(), getBufferFactory());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/JettyWebSocketSession.java, +import java.net.URI;, +import org.springframework.core.io.buffer.DataBufferFactory;, +, +	public JettyWebSocketSession(Session session, URI uri, DataBufferFactory bufferFactory) {, +		super(session, ObjectUtils.getIdentityHexString(session), uri, bufferFactory);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/WebSocketSession.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +, +	 * Return a {@link DataBufferFactory} that can be used for creating message payloads., +	 * @return a buffer factory, +	 */, +	DataBufferFactory bufferFactory();, +, +	/**, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +	public AbstractListenerWebSocketSession(T delegate, String id, URI uri, DataBufferFactory bufferFactory) {, +		super(delegate, id, uri, bufferFactory);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/JettyWebSocketHandlerAdapter.java, +		this.session = new JettyWebSocketSession(session, getUri(), getBufferFactory());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/JettyWebSocketSession.java, +import java.net.URI;, +import org.springframework.core.io.buffer.DataBufferFactory;, +, +	public JettyWebSocketSession(Session session, URI uri, DataBufferFactory bufferFactory) {, +		super(session, ObjectUtils.getIdentityHexString(session), uri, bufferFactory);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/NettyWebSocketSessionSupport.java, +	protected NettyWebSocketSessionSupport(T delegate, URI uri, NettyDataBufferFactory bufferFactory) {, +		super(delegate, ObjectUtils.getIdentityHexString(delegate), uri, bufferFactory);, +	public NettyDataBufferFactory bufferFactory() {, +		return (NettyDataBufferFactory) super.bufferFactory();, +			NettyDataBuffer buffer = bufferFactory().wrap(frames.get(0).content());, +				.map(socketFrame -> bufferFactory().wrap(socketFrame.content())), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/WebSocketSession.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +, +	 * Return a {@link DataBufferFactory} that can be used for creating message payloads., +	 * @return a buffer factory, +	 */, +	DataBufferFactory bufferFactory();, +, +	/**, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java, +import org.springframework.core.io.buffer.DataBufferFactory;, +	public AbstractListenerWebSocketSession(T delegate, String id, URI uri, DataBufferFactory bufferFactory) {, +		super(delegate, id, uri, bufferFactory);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/JettyWebSocketHandlerAdapter.java]