[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/DefaultHandshakeHandler.java, +	private static final boolean glassFish40WsPresent = ClassUtils.isPresent(, +			"org.glassfish.tyrus.server.TyrusEndpoint", HandshakeHandler.class.getClassLoader());, +, +			if (glassFish40WsPresent) {, +				className = "org.springframework.web.socket.server.support.GlassFish40RequestUpgradeStrategy";, +			}, +			else {, +		}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/DefaultHandshakeHandler.java, +	private static final boolean glassFish40WsPresent = ClassUtils.isPresent(, +			"org.glassfish.tyrus.server.TyrusEndpoint", HandshakeHandler.class.getClassLoader());, +, +			if (glassFish40WsPresent) {, +				className = "org.springframework.web.socket.server.support.GlassFish40RequestUpgradeStrategy";, +			}, +			else {, +		}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/AbstractGlassFishRequestUpgradeStrategy.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.socket.server.support;, +, +import java.io.IOException;, +import java.lang.reflect.Constructor;, +import java.net.URI;, +import java.util.Arrays;, +import java.util.Random;, +, +import javax.servlet.ServletException;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +import javax.websocket.DeploymentException;, +import javax.websocket.Endpoint;, +, +import org.glassfish.tyrus.core.ComponentProviderService;, +import org.glassfish.tyrus.core.EndpointWrapper;, +import org.glassfish.tyrus.core.ErrorCollector;, +import org.glassfish.tyrus.core.RequestContext;, +import org.glassfish.tyrus.servlet.TyrusHttpUpgradeHandler;, +import org.glassfish.tyrus.websockets.Connection;, +import org.glassfish.tyrus.websockets.Version;, +import org.glassfish.tyrus.websockets.WebSocketApplication;, +import org.glassfish.tyrus.websockets.WebSocketEngine;, +import org.glassfish.tyrus.websockets.WebSocketEngine.WebSocketHolderListener;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.server.ServerHttpRequest;, +import org.springframework.http.server.ServerHttpResponse;, +import org.springframework.http.server.ServletServerHttpRequest;, +import org.springframework.http.server.ServletServerHttpResponse;, +import org.springframework.util.Assert;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.ReflectionUtils;, +import org.springframework.util.StringUtils;, +import org.springframework.web.socket.server.HandshakeFailureException;, +import org.springframework.web.socket.server.endpoint.ServerEndpointRegistration;, +import org.springframework.web.socket.server.endpoint.ServletServerContainerFactoryBean;, +, +, +/**, + * GlassFish support for upgrading a request during a WebSocket handshake. To modify, + * properties of the underlying {@link javax.websocket.server.ServerContainer} you can use, + * {@link ServletServerContainerFactoryBean} in XML configuration or if using Java, + * configuration, access the container instance through the, + * "javax.websocket.server.ServerContainer" ServletContext attribute., + *, + * @author Rossen Stoyanchev, + * @since 4.0, + */, +public abstract class AbstractGlassFishRequestUpgradeStrategy extends AbstractStandardUpgradeStrategy {, +, +	private final static Random random = new Random();, +, +	@Override, +	public String[] getSupportedVersions() {, +		return StringUtils.commaDelimitedListToStringArray(Version.getSupportedWireProtocolVersions());, +	}, +, +	@Override, +	public void upgradeInternal(ServerHttpRequest request, ServerHttpResponse response,, +			String selectedProtocol, Endpoint endpoint) throws HandshakeFailureException {, +, +		Assert.isTrue(request instanceof ServletServerHttpRequest);, +		HttpServletRequest servletRequest = ((ServletServerHttpRequest) request).getServletRequest();, +, +		Assert.isTrue(response instanceof ServletServerHttpResponse);]