[+++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/AnnotationTransactionAttributeSource.java, + * Copyright 2002-2010 the original author or authors., +	protected TransactionAttribute findTransactionAttribute(Class<?> clazz) {, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/AnnotationTransactionAttributeSource.java, + * Copyright 2002-2010 the original author or authors., +	protected TransactionAttribute findTransactionAttribute(Class<?> clazz) {, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/interceptor/AbstractFallbackTransactionAttributeSource.java, +	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass) {, +	protected Object getCacheKey(Method method, Class<?> targetClass) {, +	private TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass) {, +		// Ignore CGLIB subclasses - introspect the actual user class., +		Class<?> userClass = ClassUtils.getUserClass(targetClass);, +		Method specificMethod = ClassUtils.getMostSpecificMethod(method, userClass);, +	protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz);, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/AnnotationTransactionAttributeSource.java, + * Copyright 2002-2010 the original author or authors., +	protected TransactionAttribute findTransactionAttribute(Class<?> clazz) {, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/interceptor/AbstractFallbackTransactionAttributeSource.java, +	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass) {, +	protected Object getCacheKey(Method method, Class<?> targetClass) {, +	private TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass) {, +		// Ignore CGLIB subclasses - introspect the actual user class., +		Class<?> userClass = ClassUtils.getUserClass(targetClass);, +		Method specificMethod = ClassUtils.getMostSpecificMethod(method, userClass);, +	protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz);, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/interceptor/TransactionAttributeSource.java, + * Copyright 2002-2010 the original author or authors., +	TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass);, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/AnnotationTransactionAttributeSource.java, + * Copyright 2002-2010 the original author or authors., +	protected TransactionAttribute findTransactionAttribute(Class<?> clazz) {, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/interceptor/AbstractFallbackTransactionAttributeSource.java, +	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass) {, +	protected Object getCacheKey(Method method, Class<?> targetClass) {, +	private TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass) {, +		// Ignore CGLIB subclasses - introspect the actual user class., +		Class<?> userClass = ClassUtils.getUserClass(targetClass);, +		Method specificMethod = ClassUtils.getMostSpecificMethod(method, userClass);, +	protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz);, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/interceptor/TransactionAttributeSource.java, + * Copyright 2002-2010 the original author or authors., +	TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass);, +++ b/org.springframework.transaction/src/test/java/org/springframework/transaction/annotation/AnnotationTransactionAttributeSourceTests.java, + * Copyright 2002-2010 the original author or authors., +	 * Test the important case where the invocation is on a proxied interface method, +	 * but the attribute is defined on the target class., +	 */, +	@Test, +	public void testTransactionAttributeDeclaredOnCglibClassMethod() throws Exception {, +		Method classMethod = ITestBean.class.getMethod("getAge", (Class[]) null);, +		TestBean1 tb = new TestBean1();, +		ProxyFactory pf = new ProxyFactory(tb);, +		pf.setProxyTargetClass(true);, +		Object proxy = pf.getProxy();, +, +		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource();, +		TransactionAttribute actual = atas.getTransactionAttribute(classMethod, proxy.getClass());, +, +		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute();, +		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class));, +		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules());, +	}, +, +	/**, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/AnnotationTransactionAttributeSource.java, + * Copyright 2002-2010 the original author or authors., +	protected TransactionAttribute findTransactionAttribute(Class<?> clazz) {, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/interceptor/AbstractFallbackTransactionAttributeSource.java, +	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass) {, +	protected Object getCacheKey(Method method, Class<?> targetClass) {, +	private TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass) {, +		// Ignore CGLIB subclasses - introspect the actual user class., +		Class<?> userClass = ClassUtils.getUserClass(targetClass);, +		Method specificMethod = ClassUtils.getMostSpecificMethod(method, userClass);, +	protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz);, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/interceptor/TransactionAttributeSource.java, + * Copyright 2002-2010 the original author or authors., +	TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass);, +++ b/org.springframework.transaction/src/test/java/org/springframework/transaction/annotation/AnnotationTransactionAttributeSourceTests.java, + * Copyright 2002-2010 the original author or authors., +	 * Test the important case where the invocation is on a proxied interface method, +	 * but the attribute is defined on the target class., +	 */, +	@Test, +	public void testTransactionAttributeDeclaredOnCglibClassMethod() throws Exception {, +		Method classMethod = ITestBean.class.getMethod("getAge", (Class[]) null);, +		TestBean1 tb = new TestBean1();, +		ProxyFactory pf = new ProxyFactory(tb);, +		pf.setProxyTargetClass(true);, +		Object proxy = pf.getProxy();, +, +		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource();, +		TransactionAttribute actual = atas.getTransactionAttribute(classMethod, proxy.getClass());, +, +		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute();, +		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class));, +		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules());, +	}, +, +	/**]