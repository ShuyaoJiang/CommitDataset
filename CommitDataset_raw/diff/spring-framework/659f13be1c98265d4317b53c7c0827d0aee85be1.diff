[+++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/CacheResolverAdapter.java, +		Assert.notNull(cache, () -> "Cannot resolve cache for '" + context + "' using '" + target + "'");, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/CacheResolverAdapter.java, +		Assert.notNull(cache, () -> "Cannot resolve cache for '" + context + "' using '" + target + "'");, +++ b/spring-core/src/main/java/org/springframework/core/ParameterizedTypeReference.java, +		Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();, +		Assert.isTrue(actualTypeArguments.length == 1, "Number of type arguments must be 1");, +		this.type = actualTypeArguments[0];, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/CacheResolverAdapter.java, +		Assert.notNull(cache, () -> "Cannot resolve cache for '" + context + "' using '" + target + "'");, +++ b/spring-core/src/main/java/org/springframework/core/ParameterizedTypeReference.java, +		Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();, +		Assert.isTrue(actualTypeArguments.length == 1, "Number of type arguments must be 1");, +		this.type = actualTypeArguments[0];, +++ b/spring-core/src/main/java/org/springframework/util/xml/TransformerUtils.java, +		Assert.isTrue(indentAmount > -1, () -> "The indent amount cannot be less than zero : got " + indentAmount);, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/CacheResolverAdapter.java, +		Assert.notNull(cache, () -> "Cannot resolve cache for '" + context + "' using '" + target + "'");, +++ b/spring-core/src/main/java/org/springframework/core/ParameterizedTypeReference.java, +		Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();, +		Assert.isTrue(actualTypeArguments.length == 1, "Number of type arguments must be 1");, +		this.type = actualTypeArguments[0];, +++ b/spring-core/src/main/java/org/springframework/util/xml/TransformerUtils.java, +		Assert.isTrue(indentAmount > -1, () -> "The indent amount cannot be less than zero : got " + indentAmount);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/AbstractMessageConverter.java, +				() -> "Payload class must be byte[] or String: " + payloadClass);, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/CacheResolverAdapter.java, +		Assert.notNull(cache, () -> "Cannot resolve cache for '" + context + "' using '" + target + "'");, +++ b/spring-core/src/main/java/org/springframework/core/ParameterizedTypeReference.java, +		Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();, +		Assert.isTrue(actualTypeArguments.length == 1, "Number of type arguments must be 1");, +		this.type = actualTypeArguments[0];, +++ b/spring-core/src/main/java/org/springframework/util/xml/TransformerUtils.java, +		Assert.isTrue(indentAmount > -1, () -> "The indent amount cannot be less than zero : got " + indentAmount);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/AbstractMessageConverter.java, +				() -> "Payload class must be byte[] or String: " + payloadClass);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/HeadersMethodArgumentResolver.java, +				Assert.notNull(method, () -> "Cannot create accessor of type " + paramType + " for message " +  message);, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/CacheResolverAdapter.java, +		Assert.notNull(cache, () -> "Cannot resolve cache for '" + context + "' using '" + target + "'");, +++ b/spring-core/src/main/java/org/springframework/core/ParameterizedTypeReference.java, +		Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();, +		Assert.isTrue(actualTypeArguments.length == 1, "Number of type arguments must be 1");, +		this.type = actualTypeArguments[0];, +++ b/spring-core/src/main/java/org/springframework/util/xml/TransformerUtils.java, +		Assert.isTrue(indentAmount > -1, () -> "The indent amount cannot be less than zero : got " + indentAmount);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/AbstractMessageConverter.java, +				() -> "Payload class must be byte[] or String: " + payloadClass);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/HeadersMethodArgumentResolver.java, +				Assert.notNull(method, () -> "Cannot create accessor of type " + paramType + " for message " +  message);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/HandlerMethodArgumentResolverComposite.java, +		Assert.notNull(resolver, () -> "Unknown parameter type [" + parameter.getParameterType().getName() + "]");, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/CacheResolverAdapter.java, +		Assert.notNull(cache, () -> "Cannot resolve cache for '" + context + "' using '" + target + "'");, +++ b/spring-core/src/main/java/org/springframework/core/ParameterizedTypeReference.java, +		Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();, +		Assert.isTrue(actualTypeArguments.length == 1, "Number of type arguments must be 1");, +		this.type = actualTypeArguments[0];, +++ b/spring-core/src/main/java/org/springframework/util/xml/TransformerUtils.java, +		Assert.isTrue(indentAmount > -1, () -> "The indent amount cannot be less than zero : got " + indentAmount);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/AbstractMessageConverter.java, +				() -> "Payload class must be byte[] or String: " + payloadClass);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/HeadersMethodArgumentResolver.java, +				Assert.notNull(method, () -> "Cannot create accessor of type " + paramType + " for message " +  message);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/HandlerMethodArgumentResolverComposite.java, +		Assert.notNull(resolver, () -> "Unknown parameter type [" + parameter.getParameterType().getName() + "]");, +++ b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java, +			Assert.isTrue(resources[i].exists(), () -> "Resource " + resources[i] + " does not exist");, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/CacheResolverAdapter.java, +		Assert.notNull(cache, () -> "Cannot resolve cache for '" + context + "' using '" + target + "'");, +++ b/spring-core/src/main/java/org/springframework/core/ParameterizedTypeReference.java, +		Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();, +		Assert.isTrue(actualTypeArguments.length == 1, "Number of type arguments must be 1");, +		this.type = actualTypeArguments[0];, +++ b/spring-core/src/main/java/org/springframework/util/xml/TransformerUtils.java, +		Assert.isTrue(indentAmount > -1, () -> "The indent amount cannot be less than zero : got " + indentAmount);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/AbstractMessageConverter.java, +				() -> "Payload class must be byte[] or String: " + payloadClass);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/HeadersMethodArgumentResolver.java, +				Assert.notNull(method, () -> "Cannot create accessor of type " + paramType + " for message " +  message);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/HandlerMethodArgumentResolverComposite.java, +		Assert.notNull(resolver, () -> "Unknown parameter type [" + parameter.getParameterType().getName() + "]");, +++ b/spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java, +			Assert.isTrue(resources[i].exists(), () -> "Resource " + resources[i] + " does not exist");, +++ b/spring-web/src/main/java/org/springframework/web/util/HtmlCharacterEntityReferences.java, +					() -> "Invalid reference to special HTML entity: " + referredChar);]