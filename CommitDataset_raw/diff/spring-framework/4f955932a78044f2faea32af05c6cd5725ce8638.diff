[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.core.annotation.AnnotatedElementUtils;, +import org.springframework.core.annotation.AnnotationAttributes;, +		AnnotationAttributes attr = AnnotatedElementUtils.getMergedAnnotationAttributes(, +				AnnotatedElementUtils.forAnnotations(annotationsToSearch), this.valueAnnotationType);, +		if (attr != null) {, +			return extractValue(attr);, +	 * @since 4.3, +	protected Object extractValue(AnnotationAttributes attr) {, +		Object value = attr.get(AnnotationUtils.VALUE);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.core.annotation.AnnotatedElementUtils;, +import org.springframework.core.annotation.AnnotationAttributes;, +		AnnotationAttributes attr = AnnotatedElementUtils.getMergedAnnotationAttributes(, +				AnnotatedElementUtils.forAnnotations(annotationsToSearch), this.valueAnnotationType);, +		if (attr != null) {, +			return extractValue(attr);, +	 * @since 4.3, +	protected Object extractValue(AnnotationAttributes attr) {, +		Object value = attr.get(AnnotationUtils.VALUE);, +++ b/spring-context/src/test/java/org/springframework/context/annotation/configuration/AutowiredConfigurationTests.java, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import org.springframework.core.annotation.AliasFor;, +	public void testValueInjectionWithMetaAnnotation() {, +		AnnotationConfigApplicationContext context =, +				new AnnotationConfigApplicationContext(ValueConfigWithMetaAnnotation.class);, +		doTestValueInjection(context);, +	}, +, +	@Test, +	public void testValueInjectionWithAliasedMetaAnnotation() {, +		AnnotationConfigApplicationContext context =, +				new AnnotationConfigApplicationContext(ValueConfigWithAliasedMetaAnnotation.class);, +		doTestValueInjection(context);, +	}, +, +	@Test, +	@Value("#{systemProperties[myProp]}"), +	@Retention(RetentionPolicy.RUNTIME), +	public @interface MyProp {, +	}, +, +, +	@Configuration, +	@Scope("prototype"), +	static class ValueConfigWithMetaAnnotation {, +, +		@MyProp, +		private String name;, +, +		private String name2;, +, +		@MyProp, +		public void setName2(String name) {, +			this.name2 = name;, +		}, +, +		@Bean @Scope("prototype"), +		public TestBean testBean() {, +			return new TestBean(name);, +		}, +, +		@Bean @Scope("prototype"), +		public TestBean testBean2() {, +			return new TestBean(name2);, +		}, +	}, +, +, +	@Value(""), +	@Retention(RetentionPolicy.RUNTIME), +	public @interface AliasedProp {, +, +		@AliasFor(annotation = Value.class), +		String value();, +	}, +, +, +	@Configuration, +	@Scope("prototype"), +	static class ValueConfigWithAliasedMetaAnnotation {, +, +		@AliasedProp("#{systemProperties[myProp]}"), +		private String name;, +, +		private String name2;, +, +		@AliasedProp("#{systemProperties[myProp]}"), +		public void setName2(String name) {, +			this.name2 = name;, +		}, +, +		@Bean @Scope("prototype"), +		public TestBean testBean() {, +			return new TestBean(name);, +		}, +]