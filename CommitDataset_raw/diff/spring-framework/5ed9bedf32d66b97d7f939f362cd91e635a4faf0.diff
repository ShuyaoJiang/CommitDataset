[+++ b/build.gradle, +	ext.groovyVersion        = "2.3.2", +	ext.jasperReportsVersion = "5.6.0", +	ext.jettyVersion         = "9.2.0.v20140526", +	ext.openJpaVersion       = "2.2.2"  // 2.3.0 not Java 8 compatible (based on ASM 4), +	ext.tomcatVersion        = "8.0.8", +	apply plugin: "groovy", +		optional("org.codehaus.groovy:groovy-all:${groovyVersion}"), +++ b/build.gradle, +	ext.groovyVersion        = "2.3.2", +	ext.jasperReportsVersion = "5.6.0", +	ext.jettyVersion         = "9.2.0.v20140526", +	ext.openJpaVersion       = "2.2.2"  // 2.3.0 not Java 8 compatible (based on ASM 4), +	ext.tomcatVersion        = "8.0.8", +	apply plugin: "groovy", +		optional("org.codehaus.groovy:groovy-all:${groovyVersion}"), +++ b/spring-context/src/main/java/org/springframework/context/support/GenericGroovyApplicationContext.java, + * Copyright 2002-2014 the original author or authors., +	// Implementation of the GroovyObject interface, +++ b/build.gradle, +	ext.groovyVersion        = "2.3.2", +	ext.jasperReportsVersion = "5.6.0", +	ext.jettyVersion         = "9.2.0.v20140526", +	ext.openJpaVersion       = "2.2.2"  // 2.3.0 not Java 8 compatible (based on ASM 4), +	ext.tomcatVersion        = "8.0.8", +	apply plugin: "groovy", +		optional("org.codehaus.groovy:groovy-all:${groovyVersion}"), +++ b/spring-context/src/main/java/org/springframework/context/support/GenericGroovyApplicationContext.java, + * Copyright 2002-2014 the original author or authors., +	// Implementation of the GroovyObject interface, +++ b/spring-web/src/main/java/org/springframework/web/context/support/GroovyWebApplicationContext.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.context.support;, +, +import java.io.IOException;, +, +import groovy.lang.GroovyObject;, +import groovy.lang.GroovySystem;, +import groovy.lang.MetaClass;, +, +import org.springframework.beans.BeanWrapper;, +import org.springframework.beans.BeanWrapperImpl;, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader;, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +, +/**, + * {@link org.springframework.web.context.WebApplicationContext} implementation, + * which takes its configuration from Groovy bean definition scripts, understood by, + * an {@link org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader}., + * This is essentially the equivalent of, + * {@link org.springframework.context.support.GenericGroovyApplicationContext}, + * for a web environment., + *, + * <p>By default, the configuration will be taken from "/WEB-INF/applicationContext.groovy", + * for the root context, and "/WEB-INF/test-servlet.groovy" for a context with the namespace, + * "test-servlet" (like for a DispatcherServlet instance with the servlet-name "test")., + *, + * <p>The config location defaults can be overridden via the "contextConfigLocation", + * context-param of {@link org.springframework.web.context.ContextLoader} and servlet, + * init-param of {@link org.springframework.web.servlet.FrameworkServlet}. Config locations, + * can either denote concrete files like "/WEB-INF/context.groovy" or Ant-style patterns, + * like "/WEB-INF/*-context.groovy" (see {@link org.springframework.util.PathMatcher}, + * javadoc for pattern details)., + *, + * <p>Note: In case of multiple config locations, later bean definitions will, + * override ones defined in earlier loaded files. This can be leveraged to, + * deliberately override certain bean definitions via an extra Groovy script., + *, + * <p><b>For a WebApplicationContext that reads in a different bean definition format,, + * create an analogous subclass of {@link AbstractRefreshableWebApplicationContext}.</b>, + * Such a context implementation can be specified as "contextClass" context-param, + * for ContextLoader or "contextClass" init-param for FrameworkServlet., + *, + * @author Juergen Hoeller, + * @since 4.1, + * @see #setNamespace, + * @see #setConfigLocations, + * @see org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader, + * @see org.springframework.web.context.ContextLoader#initWebApplicationContext, + * @see org.springframework.web.servlet.FrameworkServlet#initWebApplicationContext, + */, +public class GroovyWebApplicationContext extends AbstractRefreshableWebApplicationContext implements GroovyObject {, +]