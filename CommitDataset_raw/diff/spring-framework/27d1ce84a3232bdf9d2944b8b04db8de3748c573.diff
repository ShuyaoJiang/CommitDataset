[+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +							AnnotationUtils.getRepeatableAnnotations(method, Scheduled.class, Schedules.class)) {, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +							AnnotationUtils.getRepeatableAnnotations(method, Scheduled.class, Schedules.class)) {, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +		return getRepeatableAnnotations(method, annotationType, containerAnnotationType);, +		return getRepeatableAnnotations(annotatedElement, annotationType, containerAnnotationType);, +	 * @param annotationType the annotation type to look for; never {@code null}, +			Class<A> annotationType, Class<? extends Annotation> containerAnnotationType) {, +		Set<A> annotations = getDeclaredRepeatableAnnotations(annotatedElement, annotationType, containerAnnotationType);, +		return getRepeatableAnnotations(annotatedElement, annotationType, containerAnnotationType, false);, +	 * @param annotationType the annotation type to look for; never {@code null}, +			Class<A> annotationType, Class<? extends Annotation> containerAnnotationType) {, +		return getRepeatableAnnotations(annotatedElement, annotationType, containerAnnotationType, true);, +	 * @param annotationType the annotation type to look for; never {@code null}, +			Class<A> annotationType, Class<? extends Annotation> containerAnnotationType, boolean declaredMode) {, +			return new AnnotationCollector<A>(annotationType, containerAnnotationType, declaredMode).getResult(annotatedElement);, +		private final Class<? extends Annotation> containerAnnotationType;, +, +		AnnotationCollector(Class<A> annotationType, Class<? extends Annotation> containerAnnotationType, boolean declaredMode) {, +			this.containerAnnotationType = containerAnnotationType;, +					Annotation[] annotations = (this.declaredMode ? element.getDeclaredAnnotations() : element.getAnnotations());, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +							AnnotationUtils.getRepeatableAnnotations(method, Scheduled.class, Schedules.class)) {, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +		return getRepeatableAnnotations(method, annotationType, containerAnnotationType);, +		return getRepeatableAnnotations(annotatedElement, annotationType, containerAnnotationType);, +	 * @param annotationType the annotation type to look for; never {@code null}, +			Class<A> annotationType, Class<? extends Annotation> containerAnnotationType) {, +		Set<A> annotations = getDeclaredRepeatableAnnotations(annotatedElement, annotationType, containerAnnotationType);, +		return getRepeatableAnnotations(annotatedElement, annotationType, containerAnnotationType, false);, +	 * @param annotationType the annotation type to look for; never {@code null}, +			Class<A> annotationType, Class<? extends Annotation> containerAnnotationType) {, +		return getRepeatableAnnotations(annotatedElement, annotationType, containerAnnotationType, true);, +	 * @param annotationType the annotation type to look for; never {@code null}, +			Class<A> annotationType, Class<? extends Annotation> containerAnnotationType, boolean declaredMode) {, +			return new AnnotationCollector<A>(annotationType, containerAnnotationType, declaredMode).getResult(annotatedElement);, +		private final Class<? extends Annotation> containerAnnotationType;, +, +		AnnotationCollector(Class<A> annotationType, Class<? extends Annotation> containerAnnotationType, boolean declaredMode) {, +			this.containerAnnotationType = containerAnnotationType;, +					Annotation[] annotations = (this.declaredMode ? element.getDeclaredAnnotations() : element.getAnnotations());, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java, +		Set<MyRepeatable> annotations = getRepeatableAnnotations(method, MyRepeatable.class, MyRepeatableContainer.class);, +		getRepeatableAnnotations(BrokenConfigHierarchyTestCase.class, BrokenContextConfig.class, BrokenHierarchy.class);, +		Set<ContextConfig> annotations = getRepeatableAnnotations(ConfigHierarchyTestCase.class, ContextConfig.class, Hierarchy.class);, +		Set<MyRepeatable> set = getRepeatableAnnotations(MyRepeatableClass.class, MyRepeatable.class, MyRepeatableContainer.class);, +		Set<MyRepeatable> set = getRepeatableAnnotations(clazz, MyRepeatable.class, MyRepeatableContainer.class);, +		Set<MyRepeatable> set = getRepeatableAnnotations(clazz, MyRepeatable.class, MyRepeatableContainer.class);, +		Set<MyRepeatable> set = getDeclaredRepeatableAnnotations(MyRepeatableClass.class, MyRepeatable.class, MyRepeatableContainer.class);, +		Set<MyRepeatable> set = getDeclaredRepeatableAnnotations(clazz, MyRepeatable.class, MyRepeatableContainer.class);, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +							AnnotationUtils.getRepeatableAnnotations(method, Scheduled.class, Schedules.class)) {, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +		return getRepeatableAnnotations(method, annotationType, containerAnnotationType);, +		return getRepeatableAnnotations(annotatedElement, annotationType, containerAnnotationType);, +	 * @param annotationType the annotation type to look for; never {@code null}, +			Class<A> annotationType, Class<? extends Annotation> containerAnnotationType) {, +		Set<A> annotations = getDeclaredRepeatableAnnotations(annotatedElement, annotationType, containerAnnotationType);, +		return getRepeatableAnnotations(annotatedElement, annotationType, containerAnnotationType, false);, +	 * @param annotationType the annotation type to look for; never {@code null}, +			Class<A> annotationType, Class<? extends Annotation> containerAnnotationType) {, +		return getRepeatableAnnotations(annotatedElement, annotationType, containerAnnotationType, true);, +	 * @param annotationType the annotation type to look for; never {@code null}, +			Class<A> annotationType, Class<? extends Annotation> containerAnnotationType, boolean declaredMode) {, +			return new AnnotationCollector<A>(annotationType, containerAnnotationType, declaredMode).getResult(annotatedElement);, +		private final Class<? extends Annotation> containerAnnotationType;, +, +		AnnotationCollector(Class<A> annotationType, Class<? extends Annotation> containerAnnotationType, boolean declaredMode) {, +			this.containerAnnotationType = containerAnnotationType;, +					Annotation[] annotations = (this.declaredMode ? element.getDeclaredAnnotations() : element.getAnnotations());, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java, +		Set<MyRepeatable> annotations = getRepeatableAnnotations(method, MyRepeatable.class, MyRepeatableContainer.class);, +		getRepeatableAnnotations(BrokenConfigHierarchyTestCase.class, BrokenContextConfig.class, BrokenHierarchy.class);, +		Set<ContextConfig> annotations = getRepeatableAnnotations(ConfigHierarchyTestCase.class, ContextConfig.class, Hierarchy.class);, +		Set<MyRepeatable> set = getRepeatableAnnotations(MyRepeatableClass.class, MyRepeatable.class, MyRepeatableContainer.class);, +		Set<MyRepeatable> set = getRepeatableAnnotations(clazz, MyRepeatable.class, MyRepeatableContainer.class);, +		Set<MyRepeatable> set = getRepeatableAnnotations(clazz, MyRepeatable.class, MyRepeatableContainer.class);, +		Set<MyRepeatable> set = getDeclaredRepeatableAnnotations(MyRepeatableClass.class, MyRepeatable.class, MyRepeatableContainer.class);, +		Set<MyRepeatable> set = getDeclaredRepeatableAnnotations(clazz, MyRepeatable.class, MyRepeatableContainer.class);, +++ b/spring-test/src/main/java/org/springframework/test/context/jdbc/SqlScriptsTestExecutionListener.java, +		Set<Sql> sqlAnnotations = AnnotationUtils.getRepeatableAnnotations(testContext.getTestMethod(), Sql.class,, +			SqlGroup.class);, +			sqlAnnotations = AnnotationUtils.getRepeatableAnnotations(testContext.getTestClass(), Sql.class,, +				SqlGroup.class);]