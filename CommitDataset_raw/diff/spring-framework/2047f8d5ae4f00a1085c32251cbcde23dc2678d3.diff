[+++ b/spring-beans-groovy/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.java, + * Copyright 2002-2017 the original author or authors., +		boolean hasClosureArgument = (args[args.length - 1] instanceof Closure);, +			Class<?> beanClass = (Class<?>) args[0];, +++ b/spring-beans-groovy/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.java, + * Copyright 2002-2017 the original author or authors., +		boolean hasClosureArgument = (args[args.length - 1] instanceof Closure);, +			Class<?> beanClass = (Class<?>) args[0];, +++ b/src/asciidoc/core-beans.adoc, +, +, +The import directive is a feature provided by the beans namespace itself. Further, +configuration features beyond plain bean definitions are available in a selection, +of XML namespaces provided by Spring, e.g. the "context" and the "util" namespace., +, +, +[[groovy-bean-definition-dsl]], +==== The Groovy Bean Definition DSL, +, +As a further example for externalized configuration metadata, bean definitions can also, +be expressed in Spring's Groovy Bean Definition DSL, as known from the Grails framework., +Typically, such configuration will live in a ".groovy" file with a structure as follows:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +    beans {, +        dataSource(BasicDataSource) {, +            driverClassName = "org.hsqldb.jdbcDriver", +            url = "jdbc:hsqldb:mem:grailsDB", +            username = "sa", +            password = "", +            settings = [mynew:"setting"], +        }, +        sessionFactory(SessionFactory) {, +            dataSource = dataSource, +        }, +        myService(MyService) {, +            nestedBean = { AnotherBean bean ->, +                dataSource = dataSource, +            }, +        }, +    }, +----, +, +This configuration style is largely equivalent to XML bean definitions and even, +supports Spring's XML configuration namespaces. It also allows for importing XML, +bean definition files through an "importBeans" directive., +, +	ApplicationContext context = new ClassPathXmlApplicationContext("services.xml", "daos.xml");, +With Groovy configuration, bootstrapping looks very similar, just a different context, +implementation class which is Groovy-aware (but also understands XML bean definitions):, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	ApplicationContext context = new GenericGroovyApplicationContext("services.groovy", "daos.groovy");, +----, +, +The most flexible variant is `GenericApplicationContext` in combination with reader, +delegates, e.g. with `XmlBeanDefinitionReader` for XML files:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	GenericApplicationContext context = new GenericApplicationContext();, +	new XmlBeanDefinitionReader(ctx).loadBeanDefinitions("services.xml", "daos.xml");, +    context.refresh();, +----, +, +Or with `GroovyBeanDefinitionReader` for Groovy files:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	GenericApplicationContext context = new GenericApplicationContext();, +	new GroovyBeanDefinitionReader(ctx).loadBeanDefinitions("services.groovy", "daos.groovy");, +    context.refresh();, +----, +, +Such reader delegates can be mixed and matched on the same `ApplicationContext`,, +reading bean definitions from diverse configuration sources, if desired., +, +You can then use `getBean` to retrieve instances of your beans. The `ApplicationContext`, +Spring's integration with web frameworks provides dependency injection for various web, +framework components such as controllers and JSF-managed beans, allowing you to declare, +a dependency on a specific bean through metadata (e.g. an autowiring annotation)., +, +, +, +, +, +, +, +, +, +, +, +, +]