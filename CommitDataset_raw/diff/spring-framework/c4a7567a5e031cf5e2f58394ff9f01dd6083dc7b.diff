[+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +					logger.trace("No @Scheduled annotations found on bean class: " + targetClass);, +		Assert.isTrue(method.getParameterCount() == 0, "Only no-arg methods may be annotated with @Scheduled");, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +					logger.trace("No @Scheduled annotations found on bean class: " + targetClass);, +		Assert.isTrue(method.getParameterCount() == 0, "Only no-arg methods may be annotated with @Scheduled");, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java, +import org.springframework.aop.framework.AopInfrastructureBean;, +	private String containerFactoryBeanName = DEFAULT_JMS_LISTENER_CONTAINER_FACTORY_BEAN_NAME;, +	private JmsListenerEndpointRegistry endpointRegistry;, +	 * Set the {@link JmsListenerEndpointRegistry} that will hold the created, +	 * endpoint and manage the lifecycle of the related listener container., +	 */, +	public void setEndpointRegistry(JmsListenerEndpointRegistry endpointRegistry) {, +		this.endpointRegistry = endpointRegistry;, +	}, +, +	/**, +		if (this.containerFactoryBeanName != null) {, +			this.registrar.setContainerFactoryBeanName(this.containerFactoryBeanName);, +		}, +, +	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {, +		if (bean instanceof AopInfrastructureBean || bean instanceof JmsListenerContainerFactory ||, +				bean instanceof JmsListenerEndpointRegistry) {, +			// Ignore AOP infrastructure such as scoped proxies., +			return bean;, +		}, +, +		if (!this.nonAnnotatedClasses.contains(targetClass)) {, +				this.nonAnnotatedClasses.add(targetClass);, +					logger.trace("No @JmsListener annotations found on bean type: " + targetClass);, +						listeners.forEach(listener -> processJmsListener(listener, method, bean)));, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, +					logger.trace("No @Scheduled annotations found on bean class: " + targetClass);, +		Assert.isTrue(method.getParameterCount() == 0, "Only no-arg methods may be annotated with @Scheduled");, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java, +import org.springframework.aop.framework.AopInfrastructureBean;, +	private String containerFactoryBeanName = DEFAULT_JMS_LISTENER_CONTAINER_FACTORY_BEAN_NAME;, +	private JmsListenerEndpointRegistry endpointRegistry;, +	 * Set the {@link JmsListenerEndpointRegistry} that will hold the created, +	 * endpoint and manage the lifecycle of the related listener container., +	 */, +	public void setEndpointRegistry(JmsListenerEndpointRegistry endpointRegistry) {, +		this.endpointRegistry = endpointRegistry;, +	}, +, +	/**, +		if (this.containerFactoryBeanName != null) {, +			this.registrar.setContainerFactoryBeanName(this.containerFactoryBeanName);, +		}, +, +	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {, +		if (bean instanceof AopInfrastructureBean || bean instanceof JmsListenerContainerFactory ||, +				bean instanceof JmsListenerEndpointRegistry) {, +			// Ignore AOP infrastructure such as scoped proxies., +			return bean;, +		}, +, +		if (!this.nonAnnotatedClasses.contains(targetClass)) {, +				this.nonAnnotatedClasses.add(targetClass);, +					logger.trace("No @JmsListener annotations found on bean type: " + targetClass);, +						listeners.forEach(listener -> processJmsListener(listener, method, bean)));, +++ b/spring-jms/src/test/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessorTests.java, +		assertEquals(SimpleMessageListenerTestBean.class.getMethod("handleIt", String.class),, +				methodEndpoint.getMethod());, +		assertEquals(SimpleMessageListenerTestBean.class.getMethod("handleIt", String.class),, +				methodEndpoint.getMostSpecificMethod());, +			assertEquals(MetaAnnotationTestBean.class.getMethod("handleIt", String.class),, +					methodEndpoint.getMethod());, +			assertEquals(MetaAnnotationTestBean.class.getMethod("handleIt", String.class),, +					methodEndpoint.getMostSpecificMethod());, +			assertEquals(SimpleService.class.getMethod("handleIt", String.class, String.class),, +					methodEndpoint.getMethod());, +			assertEquals(InterfaceProxyTestBean.class.getMethod("handleIt", String.class, String.class),, +					methodEndpoint.getMostSpecificMethod());, +			Method method = ReflectionUtils.findMethod(endpoint.getClass(), "getDefaultResponseDestination");, +			ReflectionUtils.makeAccessible(method);, +			Object destination = ReflectionUtils.invokeMethod(method, endpoint);, +			assertEquals(ClassProxyTestBean.class.getMethod("handleIt", String.class, String.class),, +					methodEndpoint.getMethod());, +			assertEquals(ClassProxyTestBean.class.getMethod("handleIt", String.class, String.class),, +					methodEndpoint.getMostSpecificMethod());, +			Method method = ReflectionUtils.findMethod(endpoint.getClass(), "getDefaultResponseDestination");, +			ReflectionUtils.makeAccessible(method);, +			Object destination = ReflectionUtils.invokeMethod(method, endpoint);, +			postProcessor.setEndpointRegistry(jmsListenerEndpointRegistry());]