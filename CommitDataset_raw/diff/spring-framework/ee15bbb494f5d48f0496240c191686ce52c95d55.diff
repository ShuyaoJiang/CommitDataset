[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotatedControllersBeanDefinitionParser.java, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.config.BeanDefinitionHolder;, +import org.springframework.beans.factory.parsing.BeanComponentDefinition;, +import org.springframework.beans.factory.parsing.CompositeComponentDefinition;, +import org.springframework.beans.factory.support.BeanDefinitionBuilder;, +import org.springframework.beans.factory.xml.BeanDefinitionParser;, +import org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter;, +import org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping;, +public class AnnotatedControllersBeanDefinitionParser implements BeanDefinitionParser {, +	public BeanDefinition parse(Element element, ParserContext parserContext) {, +		Object source = parserContext.extractSource(element);, +		BeanDefinitionHolder handlerMappingHolder = registerDefaultAnnotationHandlerMapping(element, source, parserContext);, +		BeanDefinitionHolder handlerAdapterHolder = registerAnnotationMethodHandlerAdapter(element, source, parserContext);, +, +		CompositeComponentDefinition compDefinition = new CompositeComponentDefinition(element.getTagName(), source);, +		parserContext.pushContainingComponent(compDefinition);, +		parserContext.registerComponent(new BeanComponentDefinition(handlerMappingHolder));, +		parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterHolder));, +		parserContext.popAndRegisterContainingComponent();, +		, +		return null;, +	}, +	, +	private BeanDefinitionHolder registerDefaultAnnotationHandlerMapping(Element element, Object source, ParserContext context) {, +		BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(DefaultAnnotationHandlerMapping.class);, +		builder.addPropertyValue("order", 0);, +		builder.getRawBeanDefinition().setSource(source);, +		return registerBeanDefinition(new BeanDefinitionHolder(builder.getBeanDefinition(), "defaultAnnotationHandlerMapping"), context);, +	}, +, +	private BeanDefinitionHolder registerAnnotationMethodHandlerAdapter(Element element, Object source, ParserContext context) {, +		BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(AnnotationMethodHandlerAdapter.class);, +		builder.getRawBeanDefinition().setSource(source);, +		return registerBeanDefinition(new BeanDefinitionHolder(builder.getBeanDefinition(), "annotationMethodHandlerAdapter"), context);	, +	}, +, +	private BeanDefinitionHolder registerBeanDefinition(BeanDefinitionHolder holder, ParserContext context) {, +		context.getRegistry().registerBeanDefinition(holder.getBeanName(), holder.getBeanDefinition());, +		return holder;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotatedControllersBeanDefinitionParser.java, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.config.BeanDefinitionHolder;, +import org.springframework.beans.factory.parsing.BeanComponentDefinition;, +import org.springframework.beans.factory.parsing.CompositeComponentDefinition;, +import org.springframework.beans.factory.support.BeanDefinitionBuilder;, +import org.springframework.beans.factory.xml.BeanDefinitionParser;, +import org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter;, +import org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping;, +public class AnnotatedControllersBeanDefinitionParser implements BeanDefinitionParser {, +	public BeanDefinition parse(Element element, ParserContext parserContext) {, +		Object source = parserContext.extractSource(element);, +		BeanDefinitionHolder handlerMappingHolder = registerDefaultAnnotationHandlerMapping(element, source, parserContext);, +		BeanDefinitionHolder handlerAdapterHolder = registerAnnotationMethodHandlerAdapter(element, source, parserContext);, +, +		CompositeComponentDefinition compDefinition = new CompositeComponentDefinition(element.getTagName(), source);, +		parserContext.pushContainingComponent(compDefinition);, +		parserContext.registerComponent(new BeanComponentDefinition(handlerMappingHolder));, +		parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterHolder));, +		parserContext.popAndRegisterContainingComponent();, +		, +		return null;, +	}, +	, +	private BeanDefinitionHolder registerDefaultAnnotationHandlerMapping(Element element, Object source, ParserContext context) {, +		BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(DefaultAnnotationHandlerMapping.class);, +		builder.addPropertyValue("order", 0);, +		builder.getRawBeanDefinition().setSource(source);, +		return registerBeanDefinition(new BeanDefinitionHolder(builder.getBeanDefinition(), "defaultAnnotationHandlerMapping"), context);, +	}, +, +	private BeanDefinitionHolder registerAnnotationMethodHandlerAdapter(Element element, Object source, ParserContext context) {, +		BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(AnnotationMethodHandlerAdapter.class);, +		builder.getRawBeanDefinition().setSource(source);, +		return registerBeanDefinition(new BeanDefinitionHolder(builder.getBeanDefinition(), "annotationMethodHandlerAdapter"), context);	, +	}, +, +	private BeanDefinitionHolder registerBeanDefinition(BeanDefinitionHolder holder, ParserContext context) {, +		context.getRegistry().registerBeanDefinition(holder.getBeanName(), holder.getBeanDefinition());, +		return holder;, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java, +package org.springframework.web.servlet.config;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNotNull;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.springframework.beans.factory.xml.XmlBeanDefinitionReader;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.mock.web.MockServletContext;, +import org.springframework.web.context.support.GenericWebApplicationContext;, +import org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter;, +import org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping;, +, +public class MvcNamespaceTests {, +, +	private GenericWebApplicationContext container;, +	, +	@Before]