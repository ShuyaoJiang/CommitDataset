[+++ b/spring-web/src/main/java/org/springframework/http/MediaTypeFactory.java, + * Copyright 2002-2017 the original author or authors., +import java.io.BufferedReader;, +import java.io.InputStreamReader;, +import java.nio.charset.StandardCharsets;, +import java.util.Collections;, +import java.util.List;, +import java.util.Locale;, +import java.util.Optional;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, + * @author Arjen Poutsma, +	private static final String MIME_TYPES_FILE_NAME = "/org/springframework/http/mime.types";, +, +	private static final MultiValueMap<String, MediaType> fileExtensionToMediaTypes;, +		fileExtensionToMediaTypes = parseMimeTypes();, +	/**, +	 * Parse the {@code mime.types} file found in the resources. Format is:, +	 * <code>, +	 * # comments begin with a '#'<br>, +	 * # the format is &lt;mime type> &lt;space separated file extensions><br>, +	 * # for example:<br>, +	 * text/plain    txt text<br>, +	 * # this would map file.txt and file.text to<br>, +	 * # the mime type "text/plain"<br>, +	 * </code>, +	 * @return a multi-value map, mapping media types to file extensions., +	 */, +	private static MultiValueMap<String, MediaType> parseMimeTypes() {, +		InputStream is = null;, +			is = MediaTypeFactory.class.getResourceAsStream(MIME_TYPES_FILE_NAME);, +			BufferedReader reader =, +					new BufferedReader(new InputStreamReader(is, StandardCharsets.US_ASCII));, +, +			MultiValueMap<String, MediaType> result = new LinkedMultiValueMap<>();, +			String line;, +			while ((line = reader.readLine()) != null) {, +				if (line.isEmpty() || line.charAt(0) == '#') {, +					continue;, +				}, +				String[] tokens = StringUtils.tokenizeToStringArray(line, " \t\n\r\f");, +				MediaType mediaType = MediaType.parseMediaType(tokens[0]);, +, +				for (int i = 1; i < tokens.length; i++) {, +					String fileExtension = tokens[i].toLowerCase(Locale.ENGLISH);, +					result.add(fileExtension, mediaType);, +				}, +			}, +			return result;, +			throw new IllegalStateException("Could not load '" + MIME_TYPES_FILE_NAME + "'", ex);, +			if (is != null) {, +					is.close();, +				catch (IOException ignore) {, +		List<MediaType> mediaTypes = getMediaTypes(filename);, +		return (!mediaTypes.isEmpty() ? mediaTypes.get(0) : null);, +	}, +, +	/**, +	 * Determine the media types for the given file name, if possible., +	 * @param filename the file name plus extension, +	 * @return the corresponding media types, or an empty list if none found, +	 */, +	public static List<MediaType> getMediaTypes(String filename) {, +		return Optional.ofNullable(StringUtils.getFilenameExtension(filename)), +				.map(s -> s.toLowerCase(Locale.ENGLISH)), +				.map(fileExtensionToMediaTypes::get), +				.orElse(Collections.emptyList());, +++ b/spring-web/src/main/java/org/springframework/http/MediaTypeFactory.java, + * Copyright 2002-2017 the original author or authors., +import java.io.BufferedReader;, +import java.io.InputStreamReader;, +import java.nio.charset.StandardCharsets;, +import java.util.Collections;, +import java.util.List;, +import java.util.Locale;, +import java.util.Optional;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.MultiValueMap;, + * @author Arjen Poutsma, +	private static final String MIME_TYPES_FILE_NAME = "/org/springframework/http/mime.types";, +, +	private static final MultiValueMap<String, MediaType> fileExtensionToMediaTypes;, +		fileExtensionToMediaTypes = parseMimeTypes();, +	/**, +	 * Parse the {@code mime.types} file found in the resources. Format is:, +	 * <code>, +	 * # comments begin with a '#'<br>, +	 * # the format is &lt;mime type> &lt;space separated file extensions><br>, +	 * # for example:<br>, +	 * text/plain    txt text<br>, +	 * # this would map file.txt and file.text to<br>, +	 * # the mime type "text/plain"<br>, +	 * </code>, +	 * @return a multi-value map, mapping media types to file extensions., +	 */, +	private static MultiValueMap<String, MediaType> parseMimeTypes() {, +		InputStream is = null;, +			is = MediaTypeFactory.class.getResourceAsStream(MIME_TYPES_FILE_NAME);, +			BufferedReader reader =, +					new BufferedReader(new InputStreamReader(is, StandardCharsets.US_ASCII));]