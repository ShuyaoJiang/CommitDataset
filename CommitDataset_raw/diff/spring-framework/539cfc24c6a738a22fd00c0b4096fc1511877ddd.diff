[+++ b/spring-core/src/test/java/org/springframework/core/codec/AbstractEncoderTestCase.java, +import static org.springframework.core.io.buffer.DataBufferUtils.release;, + * {@link #canEncode()} and {@link #encode()}, possibly using the wide, + *  * variety of helper methods like {@link #testEncodeAll}., + * @since 5.1.3, +public abstract class AbstractEncoderTestCase<E extends Encoder<?>>, +		extends	AbstractLeakCheckingTestCase {, +	protected AbstractEncoderTestCase(E encoder) {, +	}, +, +, +	/**, +	 * Subclasses should implement this method to test {@link Encoder#canEncode}., +	 */, +	@Test, +	public abstract void canEncode() throws Exception;, +, +	/**, +	 * Subclasses should implement this method to test {@link Encoder#encode}, possibly using, +	 * {@link #testEncodeAll} or other helper methods., +	 */, +	@Test, +	public abstract void encode() throws Exception;, +, +, +	/**, +	 * Helper methods that tests for a variety of encoding scenarios. This methods, +	 * invokes:, +	 * <ul>, +	 *     <li>{@link #testEncode(Publisher, ResolvableType, Consumer, MimeType, Map)}</li>, +	 *     <li>{@link #testEncodeError(Publisher, ResolvableType, MimeType, Map)}</li>, +	 *     <li>{@link #testEncodeCancel(Publisher, ResolvableType, MimeType, Map)}</li>, +	 *     <li>{@link #testEncodeEmpty(ResolvableType, MimeType, Map)}</li>, +	 * </ul>, +	 *, +	 * @param input the input to be provided to the encoder, +	 * @param inputClass the input class, +	 * @param stepConsumer a consumer to {@linkplain StepVerifier verify} the output, +	 * @param <T> the output type, +	 */, +	protected <T> void testEncodeAll(Publisher<? extends T> input, Class<? extends T> inputClass,, +			Consumer<StepVerifier.FirstStep<DataBuffer>> stepConsumer) {, +		testEncodeAll(input, ResolvableType.forClass(inputClass), stepConsumer, null, null);, +	 * Helper methods that tests for a variety of decoding scenarios. This methods, +	 * invokes:, +	 * <ul>, +	 *     <li>{@link #testEncode(Publisher, ResolvableType, Consumer, MimeType, Map)}</li>, +	 *     <li>{@link #testEncodeError(Publisher, ResolvableType, MimeType, Map)}</li>, +	 *     <li>{@link #testEncodeCancel(Publisher, ResolvableType, MimeType, Map)}</li>, +	 *     <li>{@link #testEncodeEmpty(ResolvableType, MimeType, Map)}</li>, +	 * </ul>, +	 *, +	 * @param input the input to be provided to the encoder, +	 * @param inputType the input type, +	 * @param stepConsumer a consumer to {@linkplain StepVerifier verify} the output, +	 * @param mimeType the mime type to use for decoding. May be {@code null}., +	 * @param hints the hints used for decoding. May be {@code null}., +	 * @param <T> the output type, +	protected <T> void testEncodeAll(Publisher<? extends T> input, ResolvableType inputType,, +			Consumer<StepVerifier.FirstStep<DataBuffer>> stepConsumer,, +			@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {, +		testEncode(input, inputType, stepConsumer, mimeType, hints);, +		testEncodeError(input, inputType, mimeType, hints);, +		testEncodeCancel(input, inputType, mimeType, hints);, +		testEncodeEmpty(inputType, mimeType, hints);, +	 * Test a standard {@link Encoder#encode encode} scenario., +	 *, +	 * @param input the input to be provided to the encoder, +	 * @param inputClass the input class, +	 * @param stepConsumer a consumer to {@linkplain StepVerifier verify} the output, +	 * @param <T> the output type, +	 */, +	protected <T> void testEncode(Publisher<? extends T> input, Class<? extends T> inputClass,, +			Consumer<StepVerifier.FirstStep<DataBuffer>> stepConsumer) {, +		testEncode(input, ResolvableType.forClass(inputClass), stepConsumer, null, null);, +	}, +, +	/**, +	 * Test a standard {@link Encoder#encode encode} scenario., +	 *, +	 * @param input the input to be provided to the encoder, +	 * @param inputType the input type, +	 * @param stepConsumer a consumer to {@linkplain StepVerifier verify} the output, +	 * @param mimeType the mime type to use for decoding. May be {@code null}., +	 * @param hints the hints used for decoding. May be {@code null}., +	 * @param <T> the output type, +	 */, +	@SuppressWarnings("unchecked"), +	protected <T> void testEncode(Publisher<? extends T> input, ResolvableType inputType,, +			Consumer<StepVerifier.FirstStep<DataBuffer>> stepConsumer,, +			@Nullable MimeType mimeType, @Nullable Map<String, Object> hints) {, +, +		Flux<DataBuffer> result = encoder().encode(input, this.bufferFactory, inputType,, +				mimeType, hints);, +		StepVerifier.FirstStep<DataBuffer> step = StepVerifier.create(result);, +		stepConsumer.accept(step);, +	}, +, +	/**, +	 * Test a {@link Encoder#encode encode} scenario where the input stream contains an error.]