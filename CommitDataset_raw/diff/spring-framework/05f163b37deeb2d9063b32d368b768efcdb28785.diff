[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +				factoryBean.getConstructorArgumentValues().addIndexedArgumentValue(0, result);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +				factoryBean.getConstructorArgumentValues().addIndexedArgumentValue(0, result);, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParserTests.java, +import org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator;, +import org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator;, +import static org.hamcrest.Matchers.contains;, +import static org.hamcrest.Matchers.instanceOf;, +import static org.junit.Assert.assertArrayEquals;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +, +		WebSocketHandler wsHandler = wsHttpRequestHandler.getWebSocketHandler();, +		assertThat(wsHandler, Matchers.instanceOf(ExceptionWebSocketHandlerDecorator.class));, +		wsHandler = ((ExceptionWebSocketHandlerDecorator) wsHandler).getDelegate();, +		assertThat(wsHandler, Matchers.instanceOf(LoggingWebSocketHandlerDecorator.class));, +		wsHandler = ((LoggingWebSocketHandlerDecorator) wsHandler).getDelegate();, +		assertThat(wsHandler, Matchers.instanceOf(TestWebSocketHandlerDecorator.class));, +		wsHandler = ((TestWebSocketHandlerDecorator) wsHandler).getDelegate();, +		assertSame(wsHandler, this.appContext.getBean(MessageBrokerBeanDefinitionParser.WEB_SOCKET_HANDLER_BEAN_NAME));, +		return new TestWebSocketHandlerDecorator(handler);, +	}, +}, +, +class TestWebSocketHandlerDecorator extends WebSocketHandlerDecorator {, +, +	public TestWebSocketHandlerDecorator(WebSocketHandler delegate) {, +		super(delegate);, +	}, +]