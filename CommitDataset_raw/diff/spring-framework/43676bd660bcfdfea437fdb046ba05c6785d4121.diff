[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +import org.springframework.beans.factory.DisposableBean;, +		this.callbackInstances.add(new DisposableBeanMethodInterceptor());, +				if (BeanAnnotationHelper.isBeanAnnotated(candidateMethod)) {, +					return 0;, +				}, +				if (DisposableBeanMethodInterceptor.isDestroyMethod(candidateMethod)) {, +					return 1;, +				}, +				return 2;, +		enhancer.setInterfaces(new Class[] {DisposableBean.class});, +	 * Intercepts the invocation of any {@link DisposableBean#destroy()} on @Configuration, +	 * class instances for the purpose of de-registering CGLIB callbacks. This helps avoid, +	 * garbage collection issues See SPR-7901., +	 */, +	private static class DisposableBeanMethodInterceptor implements MethodInterceptor {, +, +		public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {, +			Enhancer.registerStaticCallbacks(obj.getClass(), null);, +			if (DisposableBean.class.isAssignableFrom(obj.getClass().getSuperclass())) {, +				return proxy.invokeSuper(obj, args);, +			}, +			return null;, +		}, +, +		public static boolean isDestroyMethod(Method candidateMethod) {, +			return candidateMethod.getName().equals("destroy") &&, +				candidateMethod.getParameterTypes().length == 0 &&, +				DisposableBean.class.isAssignableFrom(candidateMethod.getDeclaringClass());, +		}, +	}, +, +, +	/**, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +import org.springframework.beans.factory.DisposableBean;, +		this.callbackInstances.add(new DisposableBeanMethodInterceptor());, +				if (BeanAnnotationHelper.isBeanAnnotated(candidateMethod)) {, +					return 0;, +				}, +				if (DisposableBeanMethodInterceptor.isDestroyMethod(candidateMethod)) {, +					return 1;, +				}, +				return 2;, +		enhancer.setInterfaces(new Class[] {DisposableBean.class});, +	 * Intercepts the invocation of any {@link DisposableBean#destroy()} on @Configuration, +	 * class instances for the purpose of de-registering CGLIB callbacks. This helps avoid, +	 * garbage collection issues See SPR-7901., +	 */, +	private static class DisposableBeanMethodInterceptor implements MethodInterceptor {, +, +		public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {, +			Enhancer.registerStaticCallbacks(obj.getClass(), null);, +			if (DisposableBean.class.isAssignableFrom(obj.getClass().getSuperclass())) {, +				return proxy.invokeSuper(obj, args);, +			}, +			return null;, +		}, +, +		public static boolean isDestroyMethod(Method candidateMethod) {, +			return candidateMethod.getName().equals("destroy") &&, +				candidateMethod.getParameterTypes().length == 0 &&, +				DisposableBean.class.isAssignableFrom(candidateMethod.getDeclaringClass());, +		}, +	}, +, +, +	/**, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassCglibCallbackDeregistrationTests.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.context.annotation.configuration;, +, +import static org.hamcrest.CoreMatchers.instanceOf;, +import static org.hamcrest.CoreMatchers.is;, +import static org.junit.Assert.assertThat;, +, +import org.junit.Test;, +import org.springframework.beans.factory.DisposableBean;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.context.annotation.Configuration;, +, +/**, + * Tests ensuring that @Configuration-related CGLIB callbacks are de-registered, + * at container shutdown time, allowing for proper garbage collection. See SPR-7901., + *]