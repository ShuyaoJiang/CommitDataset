[+++ b/build-spring-framework/resources/changelog.txt, +* introduced @EnableWebMvc to provide default configuration for Spring MVC applications, +* introduced HandlerMethod abstraction representing a Spring MVC controller method, +* added HandlerMapping/HandlerAdapter/HandlerExceptionResolver HandlerMethod-based implementations, +* enabled HandlerMethod-based infrastructure through the mvc namespace and Java-based configuration, +* support for automatically adding @PathVariables to the model, +* support for including @PathVariables in data binding, +* support for URI template variables in view names with the "redirect:" prefix, +* a flag for extracting the value from single-key models in MappingJacksonJsonView, +* allow bean references in mvc:interceptor namespace elements, +++ b/build-spring-framework/resources/changelog.txt, +* introduced @EnableWebMvc to provide default configuration for Spring MVC applications, +* introduced HandlerMethod abstraction representing a Spring MVC controller method, +* added HandlerMapping/HandlerAdapter/HandlerExceptionResolver HandlerMethod-based implementations, +* enabled HandlerMethod-based infrastructure through the mvc namespace and Java-based configuration, +* support for automatically adding @PathVariables to the model, +* support for including @PathVariables in data binding, +* support for URI template variables in view names with the "redirect:" prefix, +* a flag for extracting the value from single-key models in MappingJacksonJsonView, +* allow bean references in mvc:interceptor namespace elements, +++ b/spring-framework-reference/src/mvc.xml, +    <interfacename>Controller</interfacename> is typically responsible for preparing, +    a model <classname>Map</classname> with data and selecting a view name but it , +    can also write directly to the response stream and complete the request. , +    View name resolution is highly configurable through file extension or Accept header , +    content type negotiation, through bean names, a properties file,, +    or even a custom <interfacename>ViewResolver</interfacename>, +    implementation. The model (the M in MVC) is a, +    JSP, Velocity, or render content types such as XML, JSON, Atom, and others. , +    The model <interfacename>Map</interfacename> is simply transformed into an, +    appropriate format, such as JSP request attributes, a Velocity template, +        &lt;url-pattern&gt;/example/*&lt;/url-pattern&gt;, +    <para>In the preceding example, all requests startig with, +    <literal>/example</literal> will be handled by the <classname>DispatcherServlet</classname>, +    instance named <literal>example</literal>. This is only the first step in, +      a number of web applications leverage the annotation support described in this section , +      including <emphasis>MvcShowcase</emphasis>, <emphasis>MvcAjax</emphasis>,, +      <emphasis>MvcBasic</emphasis>, <emphasis>PetClinic</emphasis>, , +      <emphasis>PetCare</emphasis>, and others.</para>, +      <para>The following example from the <emphasis>Petcare</emphasis> sample shows , +      a controller in a Spring MVC application that uses this annotation:</para>, +      not relative. The following example from the <emphasis>PetClinic</emphasis> sample, +        <title>Using <interfacename>@RequestMapping</interfacename> On Interface Methods</title>, +		<para>, +		  A common pitfall when working with annotated controller classes, +		  for the controller object (e.g., +		  interface as well as the mapping mechanism can only "see" the interface, +		  exposed by the proxy. Alternatively, you could activate, +		  mechanisms see <xref linkend="aop-proxying"/>., +		</para>, +        <title>URI Templates In <interfacename>@RequestMapping</interfacename></title>, +        <para><emphasis>URI templates</emphasis> can be used for convenient access to selected, +        segments of a URL in a <interfacename>@RequestMapping</interfacename> method.</para>, +		url="http://bitworking.org/projects/URI-Templates/">proposed RFC</ulink> for URI Templates, +		defines how a URI is parameterized. For example, the URI Template , +		<code>http://www.example.com/users/{userId}</code> contains the variable , +		<emphasis>userId</emphasis>. Assigning the value <emphasis>fred</emphasis> to the variable , +		yields <code>http://www.example.com/users/fred</code>.</para>, +        <para>In Spring MVC you can apply the <interfacename>@PathVariable</interfacename> annotation, +        to a method argument to indicate that it is bound to the value of a URI template variable:</para>, +        specifies the variable name <literal>ownerId</literal>. When the, +        controller handles this request, the value of <literal>ownerId</literal> , +        is set to the value found in the appropriate segment of the URI., +        For example, when a request comes in for <code>/owners/fred</code>, the value , +        <literal>fred</literal> is bound to the <literal>ownerId</literal> method argument.</para>, +        <tip>, +	        enabled. This is normally the case, however, if you do not have debugging enabled, , +	        you will need to specify the name of the URI Template variable as follows:</para>, +			<para>You can do the same if you want the names of URI template variable and the method argument to differ:</para>, +		</tip>, +        <para>A method can have multiple <interfacename>@PathVariable</interfacename> annotations:</para>, +        <para>A URI template can be assembled from type and path level <emphasis>@RequestMapping</emphasis> , +        annotations. As a result the <methodname>findPet()</methodname> method can be invoked with a URL , +        such as <filename>/owners/42/pets/21</filename>.</para>, +		<para><interfacename>@PathVariable</interfacename> method arguments can be of, +          <emphasis role="bold">any simple type</emphasis> such as int, long, Date, etc. , +          Spring automatically converts to the appropriate type or throws a , +          <classname>TypeMismatchException</classname> if it fails to do so. , +          This type conversion process can be customized through a data binder. , +          See <xref linkend="mvc-ann-typeconversion"/> and <xref linkend="mvc-ann-webdatabinder" />., +		</para>, +, +      <section id="mvc-ann-requestmapping-patterns">, +        <title>Path Patterns In <interfacename>@RequestMapping</interfacename></title>, +      </section>		, +      <section id="mvc-ann-requestmapping-consumes">, +        <title>Consumable Media Types In <interfacename>@RequestMapping</interfacename></title>, +        <para>, +        	You can narrow the primary mapping by specifying a list of consumable media types. , +        	The request will be matched only if the <emphasis>Content-Type</emphasis> request header , +        	matches the specified media type. For example:, +        </para>, +        <programlisting language="java">@Controller, +@RequestMapping(value = "/pets", method = RequestMethod.POST, <emphasis role="bold">consumes="application/json"</emphasis>), +public void addPet(@RequestBody Pet pet, Model model) {    , +</programlisting>, +		<para>, +			Consumable media type expressions can also be negated as in <emphasis>!text/plain</emphasis> , +			to match to all requests other than those with <emphasis>Content-Type</emphasis> of , +			<emphasis>text/plain</emphasis>. ]