[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, + * Copyright 2002-2010 the original author or authors., +			// Same lenient fallback checking as in PropertyTypeDescriptor..., +++ b/org.springframework.beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, + * Copyright 2002-2010 the original author or authors., +			// Same lenient fallback checking as in PropertyTypeDescriptor..., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/PropertyTypeDescriptor.java, +import org.springframework.util.StringUtils;, + * @since 3.0.2, +			String name = this.propertyDescriptor.getName();, +			if (StringUtils.hasLength(name)) {, +				Class clazz = getMethodParameter().getMethod().getDeclaringClass();, +				Field field = ReflectionUtils.findField(clazz, name);, +				if (field == null) {, +					// Same lenient fallback checking as in CachedIntrospectionResults..., +					field = ReflectionUtils.findField(clazz, name.substring(0, 1).toLowerCase() + name.substring(1));, +					if (field == null) {, +						field = ReflectionUtils.findField(clazz, name.substring(0, 1).toUpperCase() + name.substring(1));, +					}, +				}, +				if (field != null) {, +					for (Annotation ann : field.getAnnotations()) {, +			}]