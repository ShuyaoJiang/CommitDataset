[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AppCacheManifestTransformer.java, +import java.util.Arrays;, +import java.util.Collection;, +	private static final Collection<String> MANIFEST_SECTION_HEADERS =, +			Arrays.asList("CACHE MANIFEST", "NETWORK:", "FALLBACK:", "CACHE:");, +, +	private static final String CACHE_HEADER = "CACHE:";, +, +	public Resource transform(HttpServletRequest request, Resource resource,, +			ResourceTransformerChain chain) throws IOException {, +		resource = chain.transform(request, resource);, +				logger.trace("Manifest should start with 'CACHE MANIFEST', skip: " + resource);, +		LineInfo previous = null;, +		LineAggregator aggregator = new LineAggregator(resource, content);, +, +		while (scanner.hasNext()) {, +			LineInfo current = new LineInfo(line, previous);, +			LineOutput lineOutput = processLine(current, request, resource, chain);, +			aggregator.add(lineOutput);, +			previous = current;, +		return aggregator.createResource();, +	}, +, +	private static byte[] getResourceBytes(Resource resource) throws IOException {, +		return FileCopyUtils.copyToByteArray(resource.getInputStream());, +	}, +, +	private LineOutput processLine(LineInfo info, HttpServletRequest request,, +			Resource resource, ResourceTransformerChain transformerChain) {, +, +		if (!info.isLink()) {, +			return new LineOutput(info.getLine(), null);, +		}, +, +		Resource appCacheResource = transformerChain.getResolverChain(), +				.resolveResource(null, info.getLine(), Collections.singletonList(resource));, +, +		String path = resolveUrlPath(info.getLine(), request, resource, transformerChain);, +			logger.trace("Link modified: " + path + " (original: " + info.getLine() + ")");, +		return new LineOutput(path, appCacheResource);, +	private static class LineInfo {, +		private final String line;, +, +		private final boolean cacheSection;, +, +		private final boolean link;, +, +, +		public LineInfo(String line, LineInfo previous) {, +			this.line = line;, +			this.cacheSection = initCacheSectionFlag(line, previous);, +			this.link = iniLinkFlag(line, this.cacheSection);, +		}, +, +		private static boolean initCacheSectionFlag(String line, LineInfo previousLine) {, +			if (MANIFEST_SECTION_HEADERS.contains(line.trim())) {, +				return line.trim().equals(CACHE_HEADER);, +			}, +			else if (previousLine != null) {, +				return previousLine.isCacheSection();, +			}, +			throw new IllegalStateException(, +					"Manifest does not start with " + MANIFEST_HEADER + ": " + line);, +		}, +, +		private static boolean iniLinkFlag(String line, boolean isCacheSection) {, +			return (isCacheSection && StringUtils.hasText(line) && !line.startsWith("#"), +					&& !line.startsWith("//") && !hasScheme(line));, +		}, +, +		private static boolean hasScheme(String line) {, +			int index = line.indexOf(":");, +			return (line.startsWith("//") || (index > 0 && !line.substring(0, index).contains("/")));, +		public String getLine() {, +			return this.line;, +		}, +		public boolean isCacheSection() {, +			return this.cacheSection;, +		}, +		public boolean isLink() {, +			return this.link;, +	private static class LineOutput {, +		private final String line;, +		private final Resource resource;, +		public LineOutput(String line, Resource resource) {, +			this.line = line;, +			this.resource = resource;, +		public String getLine() {, +			return this.line;, +		public Resource getResource() {, +			return this.resource;, +	private static class LineAggregator {, +		private final StringWriter writer = new StringWriter();, +		private final Resource resource;, +, +, +		public LineAggregator(Resource resource, String content) {, +			this.resource = resource;, +			this.baos = new ByteArrayOutputStream(content.length());, +		public void add(LineOutput lineOutput) throws IOException {]