[+++ b/org.springframework.core/src/main/java/org/springframework/util/CachingMapDecorator.java, +import java.util.Iterator;, + * <p>This class is an abstract template. Caching Map implementations, +public abstract class CachingMapDecorator<K, V> implements Map<K, V>, Serializable {, +	private static Object NULL_VALUE = new Object();, +		return unwrapReturnValue(this.targetMap.remove(key));, +	}, +, +	@SuppressWarnings("unchecked"), +	private V unwrapReturnValue(Object value) {, +		Object returnValue = value;, +		if (returnValue instanceof Reference) {, +			returnValue = ((Reference) returnValue).get();, +		}, +		return (returnValue == NULL_VALUE ? null : (V) returnValue);, +		for (Iterator<Object> it = this.targetMap.values().iterator(); it.hasNext();) {, +			Object value = it.next();, +			if (value instanceof Reference) {, +				value = ((Reference) value).get();, +				if (value == null) {, +					it.remove();, +					continue;, +				}, +			}, +			values.add(value == NULL_VALUE ? null : (V) value);, +	@SuppressWarnings("unchecked"), +		for (Iterator<Entry<K, Object>> it = this.targetMap.entrySet().iterator(); it.hasNext();) {, +			Entry<K, Object> entry = it.next();, +			Object value = entry.getValue();, +			if (value instanceof Reference) {, +				value = ((Reference) value).get();, +				if (value == null) {, +					it.remove();, +					continue;, +				}, +			}, +			entries.put(entry.getKey(), value == NULL_VALUE ? null : (V) value);, +			newValue = new WeakReference<Object>(newValue);, +		return unwrapReturnValue(this.targetMap.put(key, newValue));, +	 * Decide whether to use a weak reference for the value of, +			value = ((Reference) value).get();, +		if (value == null) {, +			V newValue = create((K) key);, +			put((K) key, newValue);, +			return newValue;, +		return (value == NULL_VALUE ? null : (V) value);, +	protected abstract V create(K key);, +++ b/org.springframework.core/src/main/java/org/springframework/util/CachingMapDecorator.java, +import java.util.Iterator;, + * <p>This class is an abstract template. Caching Map implementations, +public abstract class CachingMapDecorator<K, V> implements Map<K, V>, Serializable {, +	private static Object NULL_VALUE = new Object();, +		return unwrapReturnValue(this.targetMap.remove(key));, +	}, +, +	@SuppressWarnings("unchecked"), +	private V unwrapReturnValue(Object value) {, +		Object returnValue = value;, +		if (returnValue instanceof Reference) {, +			returnValue = ((Reference) returnValue).get();, +		}, +		return (returnValue == NULL_VALUE ? null : (V) returnValue);, +		for (Iterator<Object> it = this.targetMap.values().iterator(); it.hasNext();) {, +			Object value = it.next();, +			if (value instanceof Reference) {, +				value = ((Reference) value).get();, +				if (value == null) {, +					it.remove();, +					continue;, +				}, +			}, +			values.add(value == NULL_VALUE ? null : (V) value);, +	@SuppressWarnings("unchecked"), +		for (Iterator<Entry<K, Object>> it = this.targetMap.entrySet().iterator(); it.hasNext();) {, +			Entry<K, Object> entry = it.next();, +			Object value = entry.getValue();, +			if (value instanceof Reference) {, +				value = ((Reference) value).get();, +				if (value == null) {, +					it.remove();, +					continue;, +				}, +			}, +			entries.put(entry.getKey(), value == NULL_VALUE ? null : (V) value);, +			newValue = new WeakReference<Object>(newValue);, +		return unwrapReturnValue(this.targetMap.put(key, newValue));, +	 * Decide whether to use a weak reference for the value of, +			value = ((Reference) value).get();, +		if (value == null) {, +			V newValue = create((K) key);, +			put((K) key, newValue);, +			return newValue;, +		return (value == NULL_VALUE ? null : (V) value);, +	protected abstract V create(K key);, +++ b/org.springframework.core/src/test/java/org/springframework/util/CachingMapDecoratorTests.java, + * Copyright 2002-2009 the original author or authors., +import java.util.Collection;, +import java.util.HashSet;, +import java.util.Map;, +import java.util.Set;]