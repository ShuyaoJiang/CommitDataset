[+++ b/org.springframework.web/src/main/java/org/springframework/web/client/RestOperations.java, +	<T> T getForObject(String uri, Class<T> responseType, String... uriVariables) throws RestClientException;, +	<T> T getForObject(String uri, Class<T> responseType, Map<String, String> uriVariables) throws RestClientException;, +	 * Create a new resource by POSTing the given object to the URI template. The value of the <code>Location</code>, +	 * header, indicating where the new resource is stored, is returned., +	 * @param request the Object to be POSTed, may be <code>null</code>, +	URI postForLocation(String uri, Object request, String... uriVariables) throws RestClientException;, +	 * Create a new resource by POSTing the given object to URI template. The value of the <code>Location</code> header,, +	 * @param request	  the Object to be POSTed, may be <code>null</code>, +	URI postForLocation(String uri, Object request, Map<String, String> uriVariables) throws RestClientException;, +	 * @param request	  the Object to be PUT, may be <code>null</code>, +	 * @param request	  the Object to be PUT, may be <code>null</code>, +	Set<HttpMethod> optionsForAllow(String uri, String... uriVariables) throws RestClientException;, +	Set<HttpMethod> optionsForAllow(String uri, Map<String, String> uriVariables) throws RestClientException;, +	<T> T execute(String uri,, +			HttpMethod method,, +			RequestCallback requestCallback,, +			ResponseExtractor<T> responseExtractor,, +			String... uriVariables) throws RestClientException;, +	<T> T execute(String uri,, +			HttpMethod method,, +			RequestCallback requestCallback,, +			ResponseExtractor<T> responseExtractor,, +			Map<String, String> uriVariables) throws RestClientException;, +++ b/org.springframework.web/src/main/java/org/springframework/web/client/RestOperations.java, +	<T> T getForObject(String uri, Class<T> responseType, String... uriVariables) throws RestClientException;, +	<T> T getForObject(String uri, Class<T> responseType, Map<String, String> uriVariables) throws RestClientException;, +	 * Create a new resource by POSTing the given object to the URI template. The value of the <code>Location</code>, +	 * header, indicating where the new resource is stored, is returned., +	 * @param request the Object to be POSTed, may be <code>null</code>, +	URI postForLocation(String uri, Object request, String... uriVariables) throws RestClientException;, +	 * Create a new resource by POSTing the given object to URI template. The value of the <code>Location</code> header,, +	 * @param request	  the Object to be POSTed, may be <code>null</code>, +	URI postForLocation(String uri, Object request, Map<String, String> uriVariables) throws RestClientException;, +	 * @param request	  the Object to be PUT, may be <code>null</code>, +	 * @param request	  the Object to be PUT, may be <code>null</code>, +	Set<HttpMethod> optionsForAllow(String uri, String... uriVariables) throws RestClientException;, +	Set<HttpMethod> optionsForAllow(String uri, Map<String, String> uriVariables) throws RestClientException;, +	<T> T execute(String uri,, +			HttpMethod method,, +			RequestCallback requestCallback,, +			ResponseExtractor<T> responseExtractor,, +			String... uriVariables) throws RestClientException;, +	<T> T execute(String uri,, +			HttpMethod method,, +			RequestCallback requestCallback,, +			ResponseExtractor<T> responseExtractor,, +			Map<String, String> uriVariables) throws RestClientException;, +++ b/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java, +	public <T> T getForObject(String url, Class<T> responseType, String... urlVariables) throws RestClientException {, +	public URI postForLocation(String url, Object request, String... urlVariables) throws RestClientException {, +		if (request != null) {, +		}, +		if (request != null) {, +		}, +		if (request != null) {, +		}, +		if (request != null) {, +		}, +	public Set<HttpMethod> optionsForAllow(String url, String... urlVariables) throws RestClientException {, +	public Set<HttpMethod> optionsForAllow(String url, Map<String, String> urlVariables) throws RestClientException {, +	public <T> T execute(String url,, +			HttpMethod method,, +			RequestCallback requestCallback,, +			ResponseExtractor<T> responseExtractor,, +			String... urlVariables) throws RestClientException {, +	public <T> T execute(String url,, +			HttpMethod method,, +			RequestCallback requestCallback,, +			ResponseExtractor<T> responseExtractor,, +			Map<String, String> urlVariables) throws RestClientException {, +	protected <T> T doExecute(URI url,, +			HttpMethod method,, +			RequestCallback requestCallback,, +			if (request != null) {, +			else {, +				httpRequest.getHeaders().setContentLength(0L);, +		}, +	}, +++ b/org.springframework.web/src/main/java/org/springframework/web/client/RestOperations.java, +	<T> T getForObject(String uri, Class<T> responseType, String... uriVariables) throws RestClientException;, +	<T> T getForObject(String uri, Class<T> responseType, Map<String, String> uriVariables) throws RestClientException;, +	 * Create a new resource by POSTing the given object to the URI template. The value of the <code>Location</code>, +	 * header, indicating where the new resource is stored, is returned., +	 * @param request the Object to be POSTed, may be <code>null</code>, +	URI postForLocation(String uri, Object request, String... uriVariables) throws RestClientException;, +	 * Create a new resource by POSTing the given object to URI template. The value of the <code>Location</code> header,, +	 * @param request	  the Object to be POSTed, may be <code>null</code>, +	URI postForLocation(String uri, Object request, Map<String, String> uriVariables) throws RestClientException;, +	 * @param request	  the Object to be PUT, may be <code>null</code>, +	 * @param request	  the Object to be PUT, may be <code>null</code>, +	Set<HttpMethod> optionsForAllow(String uri, String... uriVariables) throws RestClientException;, +	Set<HttpMethod> optionsForAllow(String uri, Map<String, String> uriVariables) throws RestClientException;, +	<T> T execute(String uri,, +			HttpMethod method,, +			RequestCallback requestCallback,, +			ResponseExtractor<T> responseExtractor,, +			String... uriVariables) throws RestClientException;, +	<T> T execute(String uri,, +			HttpMethod method,]