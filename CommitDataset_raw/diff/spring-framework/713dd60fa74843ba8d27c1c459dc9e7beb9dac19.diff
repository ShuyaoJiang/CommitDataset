[+++ b/build.gradle, +		compile(project(":spring-messaging")), +++ b/build.gradle, +		compile(project(":spring-messaging")), +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, +	 * The bean name of the internally managed jms listener annotation processor., +	 */, +	public static final String JMS_LISTENER_ANNOTATION_PROCESSOR_BEAN_NAME =, +			"org.springframework.jms.config.internalJmsListenerAnnotationProcessor";, +, +	/**, +	 * The bean name of the internally managed jms listener endpoint registry., +	 */, +	public static final String JMS_LISTENER_ENDPOINT_REGISTRY_BEAN_NAME =, +			"org.springframework.jms.config.internalJmsListenerEndpointRegistry";, +, +	/**, +++ b/build.gradle, +		compile(project(":spring-messaging")), +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, +	 * The bean name of the internally managed jms listener annotation processor., +	 */, +	public static final String JMS_LISTENER_ANNOTATION_PROCESSOR_BEAN_NAME =, +			"org.springframework.jms.config.internalJmsListenerAnnotationProcessor";, +, +	/**, +	 * The bean name of the internally managed jms listener endpoint registry., +	 */, +	public static final String JMS_LISTENER_ENDPOINT_REGISTRY_BEAN_NAME =, +			"org.springframework.jms.config.internalJmsListenerEndpointRegistry";, +, +	/**, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/EnableJms.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.jms.annotation;, +, +import java.lang.annotation.Documented;, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +import org.springframework.context.annotation.Import;, +, +/**, + * Enable JMS listener annotated endpoints that are created under the cover, + * by a {@link org.springframework.jms.config.JmsListenerContainerFactory, + * JmsListenerContainerFactory}. To be used on, + * @{@link org.springframework.context.annotation.Configuration Configuration} classes, + * as follows:, + *, + * <pre class="code">, + * &#064;Configuration, + * &#064;EnableJms, + * public class AppConfig {, + *     &#064;Bean, + *     public DefaultJmsListenerContainerFactory myJmsListenerContainerFactory() {, + *       DefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory();, + *       factory.setConnectionFactory(connectionFactory());, + *       factory.setDestinationResolver(destinationResolver());, + *       factory.setConcurrency("5");, + *       return factory;, + *     }, + *     // other &#064;Bean definitions, + * }</pre>, + *, + * The {@code JmsListenerContainerFactory} is responsible to create the listener container, + * responsible for a particular endpoint. Typical implementations, as the, + * {@link org.springframework.jms.config.DefaultJmsListenerContainerFactory DefaultJmsListenerContainerFactory}, + * used in the sample above, provides the necessary configuration options that are supported by, + * the underlying {@link org.springframework.jms.listener.MessageListenerContainer MessageListenerContainer}., + *, + * <p>{@code @EnableJms} enables detection of @{@link JmsListener} annotations on, + * any Spring-managed bean in the container. For example, given a class {@code MyService}, + *, + * <pre class="code">, + * package com.acme.foo;, + *, + * public class MyService {, + *     &#064;JmsListener(containerFactory = "myJmsListenerContainerFactory", destination="myQueue"), + *     public void process(String msg) {, + *         // process incoming message, + *     }, + * }</pre>, + *]