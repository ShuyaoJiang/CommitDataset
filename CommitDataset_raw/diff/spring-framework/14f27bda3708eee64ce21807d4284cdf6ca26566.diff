[+++ b/spring-jms/src/main/java/org/springframework/jms/connection/TransactionAwareConnectionFactoryProxy.java, + * Copyright 2002-2015 the original author or authors., + * as provided by a Java EE application server., +++ b/spring-jms/src/main/java/org/springframework/jms/connection/TransactionAwareConnectionFactoryProxy.java, + * Copyright 2002-2015 the original author or authors., + * as provided by a Java EE application server., +++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsTemplate.java, + * As defined by the Java EE specification, the transaction and acknowledgement, + * purpose of sending messages via this template. In a Java EE environment,, +++ b/spring-jms/src/main/java/org/springframework/jms/connection/TransactionAwareConnectionFactoryProxy.java, + * Copyright 2002-2015 the original author or authors., + * as provided by a Java EE application server., +++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsTemplate.java, + * As defined by the Java EE specification, the transaction and acknowledgement, + * purpose of sending messages via this template. In a Java EE environment,, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/AbstractPollingMessageListenerContainer.java, + * which is perfectly compatible with both native JMS and JMS in a Java EE environment., + * Neither the JMS {@code MessageConsumer.setMessageListener} facility  nor the JMS, + * ServerSessionPool facility is required. A further advantage of this approach is, + * full control over the listening process, allowing for custom scaling and throttling, + * and of concurrent message processing (which is up to concrete subclasses)., + * Java EE enviroment, in combination with a JTA-aware JMS ConnectionFactory, + * obtained from JNDI (check your application server's documentation)., +++ b/spring-jms/src/main/java/org/springframework/jms/connection/TransactionAwareConnectionFactoryProxy.java, + * Copyright 2002-2015 the original author or authors., + * as provided by a Java EE application server., +++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsTemplate.java, + * As defined by the Java EE specification, the transaction and acknowledgement, + * purpose of sending messages via this template. In a Java EE environment,, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/AbstractPollingMessageListenerContainer.java, + * which is perfectly compatible with both native JMS and JMS in a Java EE environment., + * Neither the JMS {@code MessageConsumer.setMessageListener} facility  nor the JMS, + * ServerSessionPool facility is required. A further advantage of this approach is, + * full control over the listening process, allowing for custom scaling and throttling, + * and of concurrent message processing (which is up to concrete subclasses)., + * Java EE enviroment, in combination with a JTA-aware JMS ConnectionFactory, + * obtained from JNDI (check your application server's documentation)., +++ b/spring-jms/src/main/java/org/springframework/jms/support/JmsAccessor.java, + * Copyright 2002-2015 the original author or authors., +	 * method are not taken into account. Depending on the Java EE transaction context,, +++ b/spring-jms/src/main/java/org/springframework/jms/connection/TransactionAwareConnectionFactoryProxy.java, + * Copyright 2002-2015 the original author or authors., + * as provided by a Java EE application server., +++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsTemplate.java, + * As defined by the Java EE specification, the transaction and acknowledgement, + * purpose of sending messages via this template. In a Java EE environment,, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/AbstractPollingMessageListenerContainer.java, + * which is perfectly compatible with both native JMS and JMS in a Java EE environment., + * Neither the JMS {@code MessageConsumer.setMessageListener} facility  nor the JMS, + * ServerSessionPool facility is required. A further advantage of this approach is, + * full control over the listening process, allowing for custom scaling and throttling, + * and of concurrent message processing (which is up to concrete subclasses)., + * Java EE enviroment, in combination with a JTA-aware JMS ConnectionFactory, + * obtained from JNDI (check your application server's documentation)., +++ b/spring-jms/src/main/java/org/springframework/jms/support/JmsAccessor.java, + * Copyright 2002-2015 the original author or authors., +	 * method are not taken into account. Depending on the Java EE transaction context,, +++ b/spring-tx/src/main/java/org/springframework/transaction/TransactionDefinition.java, + * Copyright 2002-2015 the original author or authors., +	 * which requires the {@code javax.transaction.TransactionManager} to be, +	 * made available it to it (which is server-specific in standard Java EE)., +	 * which requires the {@code javax.transaction.TransactionManager} to be, +	 * made available it to it (which is server-specific in standard Java EE)., +++ b/spring-jms/src/main/java/org/springframework/jms/connection/TransactionAwareConnectionFactoryProxy.java, + * Copyright 2002-2015 the original author or authors., + * as provided by a Java EE application server., +++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsTemplate.java, + * As defined by the Java EE specification, the transaction and acknowledgement, + * purpose of sending messages via this template. In a Java EE environment,, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/AbstractPollingMessageListenerContainer.java, + * which is perfectly compatible with both native JMS and JMS in a Java EE environment., + * Neither the JMS {@code MessageConsumer.setMessageListener} facility  nor the JMS, + * ServerSessionPool facility is required. A further advantage of this approach is, + * full control over the listening process, allowing for custom scaling and throttling, + * and of concurrent message processing (which is up to concrete subclasses)., + * Java EE enviroment, in combination with a JTA-aware JMS ConnectionFactory, + * obtained from JNDI (check your application server's documentation)., +++ b/spring-jms/src/main/java/org/springframework/jms/support/JmsAccessor.java, + * Copyright 2002-2015 the original author or authors., +	 * method are not taken into account. Depending on the Java EE transaction context,, +++ b/spring-tx/src/main/java/org/springframework/transaction/TransactionDefinition.java, + * Copyright 2002-2015 the original author or authors., +	 * which requires the {@code javax.transaction.TransactionManager} to be, +	 * made available it to it (which is server-specific in standard Java EE)., +	 * which requires the {@code javax.transaction.TransactionManager} to be, +	 * made available it to it (which is server-specific in standard Java EE)., +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/Propagation.java, + * Copyright 2002-2015 the original author or authors., +	 * <p><b>NOTE:</b> Actual transaction suspension will not work out-of-the-box, +	 * on all transaction managers. This in particular applies to, +	 * {@link org.springframework.transaction.jta.JtaTransactionManager},, +	 * made available it to it (which is server-specific in standard Java EE)., +	 * <p><b>NOTE:</b> Actual transaction suspension will not work out-of-the-box, +	 * on all transaction managers. This in particular applies to, +	 * {@link org.springframework.transaction.jta.JtaTransactionManager},, +	 * made available it to it (which is server-specific in standard Java EE)., +++ b/spring-jms/src/main/java/org/springframework/jms/connection/TransactionAwareConnectionFactoryProxy.java, + * Copyright 2002-2015 the original author or authors., + * as provided by a Java EE application server., +++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsTemplate.java]