[+++ b/src/reference/docbook/mvc.xml, +, +    <section xml:id="mvc-ann-tests">, +      <title>Testing Controllers</title>, +, +      <para>The <filename>spring-test</filename> module offers first class support, +      for testing annotated controllers., +      See <xref linkend="spring-mvc-test-framework"/>.</para>, +    </section>, +, +++ b/src/reference/docbook/mvc.xml, +, +    <section xml:id="mvc-ann-tests">, +      <title>Testing Controllers</title>, +, +      <para>The <filename>spring-test</filename> module offers first class support, +      for testing annotated controllers., +      See <xref linkend="spring-mvc-test-framework"/>.</para>, +    </section>, +, +++ b/src/reference/docbook/new-in-3.2.xml, +      See <xref linkend="spring-mvc-test-framework"/>., +++ b/src/reference/docbook/mvc.xml, +, +    <section xml:id="mvc-ann-tests">, +      <title>Testing Controllers</title>, +, +      <para>The <filename>spring-test</filename> module offers first class support, +      for testing annotated controllers., +      See <xref linkend="spring-mvc-test-framework"/>.</para>, +    </section>, +, +++ b/src/reference/docbook/new-in-3.2.xml, +      See <xref linkend="spring-mvc-test-framework"/>., +++ b/src/reference/docbook/testing.xml, +    <section xml:id="spring-mvc-test-framework">, +      <title>Spring MVC Test Framework</title>, +, +      <sidebar xml:id="spring-mvc-test-origins">, +        <title>Standalone project</title>, +, +        <para>Before inclusion in Spring Framework 3.2, the Spring MVC Test, +        framework had already existed as a separate project on Github where, +        it grew and evolved through actual use, feedback, and the contribution of, +        many.</para>, +        <para>The standalone, +        <link xl:href="https://github.com/SpringSource/spring-test-mvc">spring-test-mvc project</link>, +        is still available on Github and can be used in conjunction with, +        Spring Framework 3.1.x. Applications upgrading to 3.2 should replace, +        the <filename>spring-test-mvc</filename> dependency with a dependency on, +        <filename>spring-test</filename>.</para>, +, +        <para>The <filename>spring-test</filename> module uses a, +        different package <classname>org.springframework.test.web</classname>, +        but otherwise is nearly identical with two exceptions., +        One is support for features new in 3.2 (e.g. async web requests)., +        The other relates to the options, +        for creating a <classname>MockMvc</classname> instance. In Spring, +        Framework 3.2, this can only be done through the TestContext framework,, +        which provides caching benefits for the loaded configuration.</para>, +      </sidebar>, +, +      <para>The <emphasis>Spring MVC Test framework</emphasis> provides, +      first class JUnit support for testing client and server-side, +      Spring MVC code through a fluent API. Typically it loads, +      the actual Spring configuration through the, +      <emphasis>TestContext framework</emphasis> and always uses the, +      <classname>DispatcherServlet</classname> to process requests, +      thus approximating full integration tests without requiring, +      a running servlet container.</para>, +, +      <para>Client-side tests are, +      <classname>RestTemplate</classname>-based and allow tests for code, +      that relies on the <code>RestTemplate</code> without requiring a, +      running server to respond to the requests., +      </para>, +, +      <section xml:id="spring-mvc-test-server">, +        <title>Server-Side Tests</title>, +, +        <para>Before Spring Framework 3.2, the most likely way to test a Spring MVC, +        controller was to write a unit test that instantiates the controller,, +        injects it with mock or stub dependencies, and then calls its methods, +        directly, using a <classname>MockHttpServletRequest</classname> and, +        <classname>MockHttpServletResponse</classname> where necessary.</para>, +        <para>Although this is pretty easy to do, controllers have many annotations,, +        and much remains not tested. Request mappings, data binding,, +        type conversion, and validation are just a few examples of what isn't tested., +        Furthermore, there are other types of annotated methods, +        such as <interfacename>@InitBinder</interfacename>,, +        <interfacename>@ModelAttribute</interfacename>, and, +        <interfacename>@ExceptionHandler</interfacename> that get invoked as part, +        of request processing.</para>, +, +        <para>The idea behind Spring MVC Test is to be able to, +        re-write those controller tests by performing actual requests, and generating, +        responses, as they would be at runtime, along the way invoking controllers, +        through the Spring MVC <classname>DispatcherServlet</classname>. Controllers, +        can still be injected with mock dependencies, so tests can remain focused, +        on the web layer.</para>]