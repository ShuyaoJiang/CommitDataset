[+++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MappingJackson2MessageConverter.java, + * Copyright 2002-2016 the original author or authors., +import java.lang.reflect.Type;, +import com.fasterxml.jackson.databind.JsonMappingException;, +		if (targetClass == null || !supportsMimeType(message.getHeaders())) {, +			return this.objectMapper.canDeserialize(javaType);, +		if (this.objectMapper.canDeserialize(javaType, causeRef)) {, +		logWarningIfNecessary(javaType, causeRef.get());, +		if (payload == null || !supportsMimeType(headers)) {, +			return false;, +		}, +			return this.objectMapper.canSerialize(payload.getClass());, +		if (this.objectMapper.canSerialize(payload.getClass(), causeRef)) {, +		logWarningIfNecessary(payload.getClass(), causeRef.get());, +		return false;, +	}, +, +	/**, +	 * Determine whether to log the given exception coming from a, +	 * {@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check., +	 * @param type the class that Jackson tested for (de-)serializability, +	 * @param cause the Jackson-thrown exception to evaluate, +	 * (typically a {@link JsonMappingException}), +	 * @since 4.3, +	 */, +	protected void logWarningIfNecessary(Type type, Throwable cause) {, +		if (cause != null && !(cause instanceof JsonMappingException && cause.getMessage().startsWith("Can not find"))) {, +			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +, +					"serialization for type [" + type + "]";, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MappingJackson2MessageConverter.java, + * Copyright 2002-2016 the original author or authors., +import java.lang.reflect.Type;, +import com.fasterxml.jackson.databind.JsonMappingException;, +		if (targetClass == null || !supportsMimeType(message.getHeaders())) {, +			return this.objectMapper.canDeserialize(javaType);, +		if (this.objectMapper.canDeserialize(javaType, causeRef)) {, +		logWarningIfNecessary(javaType, causeRef.get());, +		if (payload == null || !supportsMimeType(headers)) {, +			return false;, +		}, +			return this.objectMapper.canSerialize(payload.getClass());, +		if (this.objectMapper.canSerialize(payload.getClass(), causeRef)) {, +		logWarningIfNecessary(payload.getClass(), causeRef.get());, +		return false;, +	}, +, +	/**, +	 * Determine whether to log the given exception coming from a, +	 * {@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check., +	 * @param type the class that Jackson tested for (de-)serializability, +	 * @param cause the Jackson-thrown exception to evaluate, +	 * (typically a {@link JsonMappingException}), +	 * @since 4.3, +	 */, +	protected void logWarningIfNecessary(Type type, Throwable cause) {, +		if (cause != null && !(cause instanceof JsonMappingException && cause.getMessage().startsWith("Can not find"))) {, +			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +, +					"serialization for type [" + type + "]";, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java, +import com.fasterxml.jackson.databind.JsonMappingException;, +		logWarningIfNecessary(javaType, causeRef.get());, +		logWarningIfNecessary(clazz, causeRef.get());, +		return false;, +	}, +, +	/**, +	 * Determine whether to log the given exception coming from a, +	 * {@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check., +	 * @param type the class that Jackson tested for (de-)serializability, +	 * @param cause the Jackson-thrown exception to evaluate, +	 * (typically a {@link JsonMappingException}), +	 * @since 4.3, +	 */, +	protected void logWarningIfNecessary(Type type, Throwable cause) {, +		if (cause != null && !(cause instanceof JsonMappingException && cause.getMessage().startsWith("Can not find"))) {, +			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +, +					"serialization for type [" + type + "]";, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MappingJackson2MessageConverter.java, + * Copyright 2002-2016 the original author or authors., +import java.lang.reflect.Type;, +import com.fasterxml.jackson.databind.JsonMappingException;, +		if (targetClass == null || !supportsMimeType(message.getHeaders())) {, +			return this.objectMapper.canDeserialize(javaType);, +		if (this.objectMapper.canDeserialize(javaType, causeRef)) {, +		logWarningIfNecessary(javaType, causeRef.get());, +		if (payload == null || !supportsMimeType(headers)) {, +			return false;, +		}, +			return this.objectMapper.canSerialize(payload.getClass());, +		if (this.objectMapper.canSerialize(payload.getClass(), causeRef)) {, +		logWarningIfNecessary(payload.getClass(), causeRef.get());, +		return false;, +	}, +, +	/**, +	 * Determine whether to log the given exception coming from a, +	 * {@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check., +	 * @param type the class that Jackson tested for (de-)serializability, +	 * @param cause the Jackson-thrown exception to evaluate, +	 * (typically a {@link JsonMappingException})]