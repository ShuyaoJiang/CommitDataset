[+++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractMessageSource.java, + * Copyright 2002-2009 the original author or authors., +	 * to delegate to the internal {@link #getMessageInternal} method if available., +	 * <p>Alternatively, consider overriding the {@link #getDefaultMessage}, +	 * <p>Default is to return the code itself if "useCodeAsDefaultMessage" is activated,, +	 * or return no fallback else. In case of no fallback, the caller will usually, +	 * receive a NoSuchMessageException from <code>getMessage</code>., +	 * Render the given default message String. The default message is passed in, +	 * as specified by the caller and can be rendered into a fully formatted, +	 * default message shown to the user., +	 * <p>The default implementation passes the String to {@link #formatMessage},, +	 * Searches through the given array of objects, finds any MessageSourceResolvable, +	 * objects and resolves them., +	 * Subclasses can override this method to resolve a message without arguments, +	 * in an optimized fashion, i.e. to resolve without involving a MessageFormat., +	 * <p>The default implementation <i>does</i> use MessageFormat, through, +	 * delegating to the {@link #resolveCode} method. Subclasses are encouraged, +	 * to replace this with optimized resolution., +	 * <p>Unfortunately, <code>java.text.MessageFormat</code> is not implemented, +	 * in an efficient fashion. In particular, it does not detect that a message, +	 * pattern doesn't contain argument placeholders in the first place. Therefore,, +	 * it is advisable to circumvent MessageFormat for messages without arguments., +	 * See the {@link #resolveCodeWithoutArguments} javadoc for details., +++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractMessageSource.java, + * Copyright 2002-2009 the original author or authors., +	 * to delegate to the internal {@link #getMessageInternal} method if available., +	 * <p>Alternatively, consider overriding the {@link #getDefaultMessage}, +	 * <p>Default is to return the code itself if "useCodeAsDefaultMessage" is activated,, +	 * or return no fallback else. In case of no fallback, the caller will usually, +	 * receive a NoSuchMessageException from <code>getMessage</code>., +	 * Render the given default message String. The default message is passed in, +	 * as specified by the caller and can be rendered into a fully formatted, +	 * default message shown to the user., +	 * <p>The default implementation passes the String to {@link #formatMessage},, +	 * Searches through the given array of objects, finds any MessageSourceResolvable, +	 * objects and resolves them., +	 * Subclasses can override this method to resolve a message without arguments, +	 * in an optimized fashion, i.e. to resolve without involving a MessageFormat., +	 * <p>The default implementation <i>does</i> use MessageFormat, through, +	 * delegating to the {@link #resolveCode} method. Subclasses are encouraged, +	 * to replace this with optimized resolution., +	 * <p>Unfortunately, <code>java.text.MessageFormat</code> is not implemented, +	 * in an efficient fashion. In particular, it does not detect that a message, +	 * pattern doesn't contain argument placeholders in the first place. Therefore,, +	 * it is advisable to circumvent MessageFormat for messages without arguments., +	 * See the {@link #resolveCodeWithoutArguments} javadoc for details., +++ b/org.springframework.context/src/main/java/org/springframework/context/support/MessageSourceSupport.java, + * Copyright 2002-2009 the original author or authors., +		MessageFormat messageFormat;]