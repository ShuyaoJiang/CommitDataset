[+++ b/org.springframework.context/src/main/java/org/springframework/format/FormatterRegistry.java, +, + * @author Juergen Hoeller, +public interface FormatterRegistry extends ConverterRegistry {, +++ b/org.springframework.context/src/main/java/org/springframework/format/FormatterRegistry.java, +, + * @author Juergen Hoeller, +public interface FormatterRegistry extends ConverterRegistry {, +++ b/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionService.java, +, +import org.springframework.core.convert.ConversionException;, +import org.springframework.core.convert.support.GenericConversionService;, + * A {@link org.springframework.core.convert.ConversionService} implementation, + * designed to be configured as a {@link FormatterRegistry}., + *, + * @author Juergen Hoeller, +public class FormattingConversionService extends GenericConversionService, +		implements FormatterRegistry {, +		addGenericConverter(new PrinterConverter(fieldType, printer, this));, +		addGenericConverter(new ParserConverter(fieldType, parser, this));, +		addGenericConverter(new PrinterConverter(fieldType, formatter, this));, +		addGenericConverter(new ParserConverter(fieldType, formatter, this));, +		final Class<? extends Annotation> annotationType = (Class<? extends Annotation>), +				GenericTypeResolver.resolveTypeArgument(annotationFormatterFactory.getClass(), AnnotationFormatterFactory.class);, +, +			addGenericConverter(new ConditionalGenericConverter() {, +					return (sourceFieldType.getAnnotation(annotationType) != null);, +					return new PrinterConverter(fieldType, printer, FormattingConversionService.this).convert(source, sourceType, targetType);, +					return "@" + annotationType.getName() + " " + fieldType.getName() + " -> " +, +							String.class.getName() + ": " + annotationFormatterFactory;, +			addGenericConverter(new ConditionalGenericConverter() {, +					return (targetFieldType.getAnnotation(annotationType) != null);, +					return new ParserConverter(fieldType, parser, FormattingConversionService.this).convert(source, sourceType, targetType);, +					return String.class.getName() + " -> @" + annotationType.getName() + " " +, +							fieldType.getName() + ": " + annotationFormatterFactory;, +, +			}, +			catch (ParseException ex) {, +				throw new ConversionFailedException(sourceType, targetType, source, ex);, +				}, +				catch (ConversionException ex) {, +					throw new ConversionFailedException(sourceType, targetType, source, ex);, +++ b/org.springframework.context/src/main/java/org/springframework/format/FormatterRegistry.java, +, + * @author Juergen Hoeller, +public interface FormatterRegistry extends ConverterRegistry {, +++ b/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionService.java, +, +import org.springframework.core.convert.ConversionException;, +import org.springframework.core.convert.support.GenericConversionService;, + * A {@link org.springframework.core.convert.ConversionService} implementation, + * designed to be configured as a {@link FormatterRegistry}., + *, + * @author Juergen Hoeller, +public class FormattingConversionService extends GenericConversionService, +		implements FormatterRegistry {, +		addGenericConverter(new PrinterConverter(fieldType, printer, this));, +		addGenericConverter(new ParserConverter(fieldType, parser, this));, +		addGenericConverter(new PrinterConverter(fieldType, formatter, this));, +		addGenericConverter(new ParserConverter(fieldType, formatter, this));, +		final Class<? extends Annotation> annotationType = (Class<? extends Annotation>), +				GenericTypeResolver.resolveTypeArgument(annotationFormatterFactory.getClass(), AnnotationFormatterFactory.class);, +, +			addGenericConverter(new ConditionalGenericConverter() {, +					return (sourceFieldType.getAnnotation(annotationType) != null);, +					return new PrinterConverter(fieldType, printer, FormattingConversionService.this).convert(source, sourceType, targetType);, +					return "@" + annotationType.getName() + " " + fieldType.getName() + " -> " +, +							String.class.getName() + ": " + annotationFormatterFactory;, +			addGenericConverter(new ConditionalGenericConverter() {, +					return (targetFieldType.getAnnotation(annotationType) != null);, +					return new ParserConverter(fieldType, parser, FormattingConversionService.this).convert(source, sourceType, targetType);, +					return String.class.getName() + " -> @" + annotationType.getName() + " " +, +							fieldType.getName() + ": " + annotationFormatterFactory;, +, +			}, +			catch (ParseException ex) {, +				throw new ConversionFailedException(sourceType, targetType, source, ex);, +				}, +				catch (ConversionException ex) {, +					throw new ConversionFailedException(sourceType, targetType, source, ex);, +++ b/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionServiceFactoryBean.java, +, +import org.springframework.core.convert.support.ConversionServiceFactory;, + * A factory for a {@link FormattingConversionService} that installs default, + * formatters for common types such as numbers and datetimes., + *, + * <p>Subclasses may override {@link #installFormatters(FormatterRegistry)}, + * to register custom formatters., + *, + * @author Juergen Hoeller, +public class FormattingConversionServiceFactoryBean, +		implements FactoryBean<FormattingConversionService>, InitializingBean {, +		ConversionServiceFactory.addDefaultConverters(this.conversionService);, +	public FormattingConversionService getObject() {, +	public Class<? extends FormattingConversionService> getObjectType() {, +		return FormattingConversionService.class;, +, +++ b/org.springframework.context/src/main/java/org/springframework/format/FormatterRegistry.java, +, + * @author Juergen Hoeller]