[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +	 * The {@code ExchangeResult} with live, undecoded {@link ClientResponse}., +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +	 * The {@code ExchangeResult} with live, undecoded {@link ClientResponse}., +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/EntityExchangeResult.java, + * {@code ExchangeResult} sub-class that exposes the response body fully, + * extracted to a representation of type {@code <T>}., + * @see FluxExchangeResult, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +	 * The {@code ExchangeResult} with live, undecoded {@link ClientResponse}., +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/EntityExchangeResult.java, + * {@code ExchangeResult} sub-class that exposes the response body fully, + * extracted to a representation of type {@code <T>}., + * @see FluxExchangeResult, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java, +import org.springframework.http.ResponseCookie;, +import org.springframework.util.MultiValueMap;, + * Simple container for request and response details from an exchange performed, + * through the {@link WebTestClient}., + * <p>An {@code ExchangeResult} only exposes the status and the headers from, + * the response which is all that's available when a {@link ClientResponse} is, + * first created., + * <p>Sub-types {@link EntityExchangeResult} and {@link FluxExchangeResult}, + * further expose the response body either as a fully extracted representation, + * or as a {@code Flux} of representations to be consumed., + * @see EntityExchangeResult, + * @see FluxExchangeResult, +	private final MultiValueMap<String, ResponseCookie> responseCookies;, +, +	/**, +	 * Constructor used when a {@code ClientResponse} is first created., +	 */, +	protected ExchangeResult(ClientHttpRequest request, ClientResponse response) {, +		this.responseCookies = response.cookies();, +	/**, +	 * Copy constructor used when the body is decoded or consumed., +	 */, +	protected ExchangeResult(ExchangeResult other) {, +		this.method = other.getMethod();, +		this.url = other.getUrl();, +		this.requestHeaders = other.getRequestHeaders();, +		this.status = other.getStatus();, +		this.responseHeaders = other.getResponseHeaders();, +		this.responseCookies = other.getResponseCookies();, +	/**, +	 * Return response cookies received from the server., +	 */, +	public MultiValueMap<String, ResponseCookie> getResponseCookies() {, +		return this.responseCookies;, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultWebTestClient.java, +	 * The {@code ExchangeResult} with live, undecoded {@link ClientResponse}., +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/EntityExchangeResult.java, + * {@code ExchangeResult} sub-class that exposes the response body fully, + * extracted to a representation of type {@code <T>}., + * @see FluxExchangeResult, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/ExchangeResult.java, +import org.springframework.http.ResponseCookie;, +import org.springframework.util.MultiValueMap;, + * Simple container for request and response details from an exchange performed, + * through the {@link WebTestClient}., + * <p>An {@code ExchangeResult} only exposes the status and the headers from, + * the response which is all that's available when a {@link ClientResponse} is, + * first created., + * <p>Sub-types {@link EntityExchangeResult} and {@link FluxExchangeResult}, + * further expose the response body either as a fully extracted representation, + * or as a {@code Flux} of representations to be consumed., + * @see EntityExchangeResult, + * @see FluxExchangeResult, +	private final MultiValueMap<String, ResponseCookie> responseCookies;, +, +	/**, +	 * Constructor used when a {@code ClientResponse} is first created., +	 */, +	protected ExchangeResult(ClientHttpRequest request, ClientResponse response) {, +		this.responseCookies = response.cookies();, +	/**, +	 * Copy constructor used when the body is decoded or consumed., +	 */, +	protected ExchangeResult(ExchangeResult other) {, +		this.method = other.getMethod();, +		this.url = other.getUrl();, +		this.requestHeaders = other.getRequestHeaders();, +		this.status = other.getStatus();, +		this.responseHeaders = other.getResponseHeaders();, +		this.responseCookies = other.getResponseCookies();, +	/**, +	 * Return response cookies received from the server., +	 */, +	public MultiValueMap<String, ResponseCookie> getResponseCookies() {, +		return this.responseCookies;, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/FluxExchangeResult.java, + * @see EntityExchangeResult]