[+++ b/spring-jms/src/main/java/org/springframework/jms/config/MethodJmsListenerEndpoint.java, + * Copyright 2002-2016 the original author or authors., +		SendTo ann = getSendTo(specificMethod);, +	private SendTo getSendTo(Method specificMethod) {, +		SendTo ann = AnnotationUtils.getAnnotation(specificMethod, SendTo.class);, +		if (ann != null) {, +			return ann;, +		}, +		else {, +			return AnnotationUtils.getAnnotation(specificMethod.getDeclaringClass(), SendTo.class);, +		}, +	}, +, +++ b/spring-jms/src/main/java/org/springframework/jms/config/MethodJmsListenerEndpoint.java, + * Copyright 2002-2016 the original author or authors., +		SendTo ann = getSendTo(specificMethod);, +	private SendTo getSendTo(Method specificMethod) {, +		SendTo ann = AnnotationUtils.getAnnotation(specificMethod, SendTo.class);, +		if (ann != null) {, +			return ann;, +		}, +		else {, +			return AnnotationUtils.getAnnotation(specificMethod.getDeclaringClass(), SendTo.class);, +		}, +	}, +, +++ b/spring-jms/src/test/java/org/springframework/jms/config/MethodJmsListenerEndpointTests.java, + * Copyright 2002-2016 the original author or authors., +		processAndReplyWithSendTo(listener, "replyDestination", false);, +		processAndReplyWithSendTo(listener, "replyDestination", false);, +		processAndReplyWithSendTo(listener, "replyDestination", true);, +		processAndReplyWithSendTo(listener, "replyDestination", true);, +	@Test, +	public void processAndReplyWithDefaultSendTo() throws JMSException {, +		MessagingMessageListenerAdapter listener = createDefaultInstance(String.class);, +		processAndReplyWithSendTo(listener, "defaultReply", false);, +		assertDefaultListenerMethodInvocation();, +	}, +, +	private void processAndReplyWithSendTo(MessagingMessageListenerAdapter listener,, +			String replyDestinationName, boolean pubSubDomain) throws JMSException {, +		given(destinationResolver.resolveDestinationName(session, replyDestinationName, pubSubDomain)), +		verify(destinationResolver).resolveDestinationName(session, replyDestinationName, pubSubDomain);, +	@SendTo("defaultReply"), +		public String processAndReplyWithDefaultSendTo(String content) {, +			invocations.put("processAndReplyWithDefaultSendTo", true);, +			return content;, +		}, +, +++ b/spring-jms/src/main/java/org/springframework/jms/config/MethodJmsListenerEndpoint.java, + * Copyright 2002-2016 the original author or authors., +		SendTo ann = getSendTo(specificMethod);, +	private SendTo getSendTo(Method specificMethod) {, +		SendTo ann = AnnotationUtils.getAnnotation(specificMethod, SendTo.class);, +		if (ann != null) {, +			return ann;, +		}, +		else {, +			return AnnotationUtils.getAnnotation(specificMethod.getDeclaringClass(), SendTo.class);, +		}, +	}, +, +++ b/spring-jms/src/test/java/org/springframework/jms/config/MethodJmsListenerEndpointTests.java, + * Copyright 2002-2016 the original author or authors., +		processAndReplyWithSendTo(listener, "replyDestination", false);, +		processAndReplyWithSendTo(listener, "replyDestination", false);, +		processAndReplyWithSendTo(listener, "replyDestination", true);, +		processAndReplyWithSendTo(listener, "replyDestination", true);, +	@Test, +	public void processAndReplyWithDefaultSendTo() throws JMSException {, +		MessagingMessageListenerAdapter listener = createDefaultInstance(String.class);, +		processAndReplyWithSendTo(listener, "defaultReply", false);, +		assertDefaultListenerMethodInvocation();, +	}, +, +	private void processAndReplyWithSendTo(MessagingMessageListenerAdapter listener,, +			String replyDestinationName, boolean pubSubDomain) throws JMSException {, +		given(destinationResolver.resolveDestinationName(session, replyDestinationName, pubSubDomain)), +		verify(destinationResolver).resolveDestinationName(session, replyDestinationName, pubSubDomain);, +	@SendTo("defaultReply"), +		public String processAndReplyWithDefaultSendTo(String content) {, +			invocations.put("processAndReplyWithDefaultSendTo", true);, +			return content;, +		}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/SendTo.java, + * Copyright 2002-2016 the original author or authors., + * <p>The annotation may also be placed at class-level if the provider supports, + * it to indicate that all related methods should use this destination if none, + * is specified otherwise., + *, + * @author Stephane Nicoll, +@Target({ElementType.METHOD, ElementType.TYPE}), +++ b/spring-jms/src/main/java/org/springframework/jms/config/MethodJmsListenerEndpoint.java, + * Copyright 2002-2016 the original author or authors., +		SendTo ann = getSendTo(specificMethod);, +	private SendTo getSendTo(Method specificMethod) {, +		SendTo ann = AnnotationUtils.getAnnotation(specificMethod, SendTo.class);, +		if (ann != null) {, +			return ann;]