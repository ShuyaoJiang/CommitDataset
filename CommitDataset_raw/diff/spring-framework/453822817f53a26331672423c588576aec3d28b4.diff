[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.java, +	protected void configurePathMatch(PathMatchConfigurer configurer) {, +		this.configurers.configurePathMatch(configurer);, +	protected void configureAsyncSupport(AsyncSupportConfigurer configurer) {, +	protected void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {, +		this.configurers.configureDefaultServletHandling(configurer);, +	}, +, +	@Override, +	protected void addFormatters(FormatterRegistry registry) {, +		this.configurers.addFormatters(registry);, +	}, +, +	@Override, +	protected void addInterceptors(InterceptorRegistry registry) {, +		this.configurers.addInterceptors(registry);, +	}, +, +	@Override, +	protected void addResourceHandlers(ResourceHandlerRegistry registry) {, +		this.configurers.addResourceHandlers(registry);, +	}, +, +	@Override, +	protected void addCorsMappings(CorsRegistry registry) {, +		this.configurers.addCorsMappings(registry);, +	protected Validator getValidator() {, +		return this.configurers.getValidator();, +	}, +, +	@Override, +	protected MessageCodesResolver getMessageCodesResolver() {, +		return this.configurers.getMessageCodesResolver();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.java, +	protected void configurePathMatch(PathMatchConfigurer configurer) {, +		this.configurers.configurePathMatch(configurer);, +	protected void configureAsyncSupport(AsyncSupportConfigurer configurer) {, +	protected void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {, +		this.configurers.configureDefaultServletHandling(configurer);, +	}, +, +	@Override, +	protected void addFormatters(FormatterRegistry registry) {, +		this.configurers.addFormatters(registry);, +	}, +, +	@Override, +	protected void addInterceptors(InterceptorRegistry registry) {, +		this.configurers.addInterceptors(registry);, +	}, +, +	@Override, +	protected void addResourceHandlers(ResourceHandlerRegistry registry) {, +		this.configurers.addResourceHandlers(registry);, +	}, +, +	@Override, +	protected void addCorsMappings(CorsRegistry registry) {, +		this.configurers.addCorsMappings(registry);, +	protected Validator getValidator() {, +		return this.configurers.getValidator();, +	}, +, +	@Override, +	protected MessageCodesResolver getMessageCodesResolver() {, +		return this.configurers.getMessageCodesResolver();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +import java.util.Collections;, +, +		UrlPathHelper pathHelper = configurer.getUrlPathHelper();, +		if (pathHelper != null) {, +			handlerMapping.setUrlPathHelper(pathHelper);, +		PathMatcher pathMatcher = configurer.getPathMatcher();, +		if (pathMatcher != null) {, +			handlerMapping.setPathMatcher(pathMatcher);, +	protected void configurePathMatch(PathMatchConfigurer configurer) {, +		Map<String, MediaType> map = new HashMap<>(4);, +			adapter.setRequestBodyAdvice(Collections.singletonList(new JsonViewRequestBodyAdvice()));, +			adapter.setResponseBodyAdvice(Collections.singletonList(new JsonViewResponseBodyAdvice()));, +	 * Override this method to provide a custom {@link MessageCodesResolver}., +	 */, +	protected MessageCodesResolver getMessageCodesResolver() {, +		return null;, +	}, +, +	/**, +	 * Override this method to configure asynchronous request processing options., +	 * @see AsyncSupportConfigurer, +	 */, +	protected void configureAsyncSupport(AsyncSupportConfigurer configurer) {, +	}, +, +	/**, +	 * Override this method to add custom {@link Converter}s and {@link Formatter}s., +	 */, +	protected void addFormatters(FormatterRegistry registry) {, +	}, +, +	/**, +	 * Override this method to provide a custom {@link Validator}.]