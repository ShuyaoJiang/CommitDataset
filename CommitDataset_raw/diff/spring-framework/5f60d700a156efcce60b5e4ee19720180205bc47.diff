[+++ b/spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java, + * <p>Tested against Jackson 2.2, 2.3, 2.4, 2.5, 2.6; compatible with Jackson 2.0 and higher., +	private FilterProvider filters;, +, +	private final Map<Class<?>, Class<?>> mixIns = new HashMap<Class<?>, Class<?>>();, +, +	 * Set the global filters to use in order to support {@link JsonFilter @JsonFilter} annotated POJO., +	 * @since 4.2, +	 * @see MappingJacksonValue#setFilters(FilterProvider), +	public Jackson2ObjectMapperBuilder filters(FilterProvider filters) {, +		this.filters = filters;, +	 * Configure custom serializers. Each serializer is registered for the type, +	 * returned by {@link JsonSerializer#handledType()}, which must not be, +	 * {@code null}., +	 * @see #serializersByType(Map), +	 */, +	public Jackson2ObjectMapperBuilder serializers(JsonSerializer<?>... serializers) {, +		if (serializers != null) {, +			for (JsonSerializer<?> serializer : serializers) {, +				Class<?> handledType = serializer.handledType();, +				if (handledType == null || handledType == Object.class) {, +					throw new IllegalArgumentException("Unknown handled type in " + serializer.getClass().getName());, +				}, +				this.serializers.put(serializer.handledType(), serializer);, +			}, +		}, +		return this;, +	}, +, +	/**, +	 * Configure a custom serializer for the given type., +	 * @see #serializers(JsonSerializer...), +	 * @since 4.1.2, +	 */, +	public Jackson2ObjectMapperBuilder serializerByType(Class<?> type, JsonSerializer<?> serializer) {, +		if (serializer != null) {, +			this.serializers.put(type, serializer);, +		}, +		return this;, +	}, +, +	/**, +	 * Configure custom serializers for the given types., +	 * @see #serializers(JsonSerializer...), +	 */, +	public Jackson2ObjectMapperBuilder serializersByType(Map<Class<?>, JsonSerializer<?>> serializers) {, +		if (serializers != null) {, +			this.serializers.putAll(serializers);, +		}, +		return this;, +	}, +, +	/**, +	 * Configure a custom deserializer for the given type., +	 * @since 4.1.2, +	 */, +	public Jackson2ObjectMapperBuilder deserializerByType(Class<?> type, JsonDeserializer<?> deserializer) {, +		if (deserializer != null) {, +			this.deserializers.put(type, deserializer);, +		}, +		return this;, +	}, +, +	/**, +	 * Configure custom deserializers for the given types., +	 */, +	public Jackson2ObjectMapperBuilder deserializersByType(Map<Class<?>, JsonDeserializer<?>> deserializers) {, +		if (deserializers != null) {, +			this.deserializers.putAll(deserializers);, +		}, +		return this;, +	}, +, +	/**, +		if (this.propertyNamingStrategy != null) {, +			objectMapper.setPropertyNamingStrategy(this.propertyNamingStrategy);, +		}, +		if (this.filters != null) {, +			// Deprecated as of Jackson 2.6, but just in favor of a fluent variant., +			objectMapper.setFilters(this.filters);, +		}, +, +		for (Class<?> target : this.mixIns.keySet()) {, +			// Deprecated as of Jackson 2.5, but just in favor of a fluent variant., +			objectMapper.addMixInAnnotations(target, this.mixIns.get(target));, +		}, +]