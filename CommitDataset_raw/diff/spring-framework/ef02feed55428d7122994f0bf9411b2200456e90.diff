[+++ b/spring-framework-reference/src/jmx.xml, +      <title>Using source-Level metadata (JDK 5.0 annotations)</title>, +      interface. Spring JMX provides a default implementation which uses JDK 5.0 annotations, namely, +      <classname>org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource</classname>. The, +      function correctly (there is <emphasis>no</emphasis> default).</para>, +      class with the <classname>ManagedResource</classname> annotation. Each, +      <classname>ManagedOperation</classname> annotation and each property you, +      <classname>ManagedAttribute</classname> annotation. When marking, +      <para>The example below shows the annotated version of the , +        <classname>JmxTestBean</classname> class that you saw earlier:</para>, +      <para>Here you can see that the <classname>JmxTestBean</classname> class, +      is marked with the <classname>ManagedResource</classname> annotation and, +        that this <classname>ManagedResource</classname> annotation is configured, +      with a set of properties. These properties can be used to configure, +      various aspects of the MBean that is generated by the, +      <classname>MBeanExporter</classname>, and are explained in greater, +      detail later in section entitled <xref, +      linkend="jmx-interface-metadata-types" />.</para>, +      <para>You will also notice that both the <literal>age</literal> and, +      <literal>name</literal> properties are annotated with the, +      <classname>ManagedAttribute</classname> annotation, but in the case of, +      the <literal>age</literal> property, only the getter is marked. This, +      will cause both of these properties to be included in the management, +      interface as attributes, but the <literal>age</literal> attribute will, +      be read-only.</para>, +, +      <para>Finally, you will notice that the <literal>add(int, int)</literal>, +      method is marked with the <classname>ManagedOperation</classname>, +      attribute whereas the <literal>dontExposeMe()</literal> method is not., +      This will cause the management interface to contain only one operation,, +      <literal>add(int, int)</literal>, when using the, +      <classname>MetadataMBeanInfoAssembler</classname>.</para>, +, +      <para>The configuration below shouws how you configure the, +      <classname>MBeanExporter</classname> to use the, +      <classname>MetadataMBeanInfoAssembler</classname>:</para>, +      , +, +      <para>Here you can see that an, +      <classname>MetadataMBeanInfoAssembler</classname> bean has been, +      configured with an instance of the, +        <classname>AnnotationJmxAttributeSource</classname> class and passed to, +      the <classname>MBeanExporter</classname> through the assembler property., +      This is all that is required to take advantage of metadata-driven, +      management interfaces for your Spring-exposed MBeans.</para>, +                <entry align="center">Annotation</entry>, +                <entry align="center">Annotation Type</entry>, +    <property name="attributeSource">, +        <bean class="org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource"/>, +    </property>, +      an even simpler syntax is supported by Spring's, +      '<literal>context</literal>' namespace.. Rather than defining an, +      <classname>MBeanExporter</classname> bean, just provide this single element:</para>]