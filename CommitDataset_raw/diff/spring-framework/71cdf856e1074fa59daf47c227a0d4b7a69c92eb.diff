[+++ b/spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java, + * Copyright 2002-2015 the original author or authors., +	/**, +	 * Template method for creating a plain new {@link Properties} instance., +	 * The default implementation simply calls {@link Properties#Properties()}., +	 * <p>Allows for returning a custom {@link Properties} extension in subclasses., +	 * Overriding methods should just instantiate a custom {@link Properties} subclass,, +	 * with no further initialization or population to be performed at that point., +	 * @return a plain Properties instance, +	 * @since 4.2, +	 */, +	protected Properties newProperties() {, +		return new Properties();, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java, + * Copyright 2002-2015 the original author or authors., +	/**, +	 * Template method for creating a plain new {@link Properties} instance., +	 * The default implementation simply calls {@link Properties#Properties()}., +	 * <p>Allows for returning a custom {@link Properties} extension in subclasses., +	 * Overriding methods should just instantiate a custom {@link Properties} subclass,, +	 * with no further initialization or population to be performed at that point., +	 * @return a plain Properties instance, +	 * @since 4.2, +	 */, +	protected Properties newProperties() {, +		return new Properties();, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java, +import java.io.Reader;, +	private String defaultEncoding = "ISO-8859-1";, +	 * <p>Default is the {@code java.util.ResourceBundle} default encoding:, +	 * ISO-8859-1., +	 * @since 3.1.3, +	 * @since 3.1.3, +	 * @since 3.1.3, +	 * @see java.util.ResourceBundle#getBundle(String, Locale, ClassLoader), +, +	/**, +	 * Load a property-based resource bundle from the given reader., +	 * <p>The default implementation returns a {@link PropertyResourceBundle}., +	 * @param reader the reader for the target resource, +	 * @return the fully loaded bundle, +	 * @throws IOException in case of I/O failure, +	 * @since 4.2, +	 * @see PropertyResourceBundle#PropertyResourceBundle(Reader), +	 */, +	protected ResourceBundle loadBundle(Reader reader) throws IOException {, +		return new PropertyResourceBundle(reader);, +						return loadBundle(new InputStreamReader(stream, defaultEncoding));]