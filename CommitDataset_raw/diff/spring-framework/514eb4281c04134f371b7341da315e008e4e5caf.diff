[+++ b/spring-core/src/main/java/org/springframework/core/io/support/EncodedResource.java, +	public boolean equals(Object other) {, +		if (this == other) {, +		if (!(other instanceof EncodedResource)) {, +		EncodedResource otherResource = (EncodedResource) other;, +		return (this.resource.equals(otherResource.resource) &&, +				ObjectUtils.nullSafeEquals(this.charset, otherResource.charset) &&, +				ObjectUtils.nullSafeEquals(this.encoding, otherResource.encoding));, +	}, +++ b/spring-core/src/main/java/org/springframework/core/io/support/EncodedResource.java, +	public boolean equals(Object other) {, +		if (this == other) {, +		if (!(other instanceof EncodedResource)) {, +		EncodedResource otherResource = (EncodedResource) other;, +		return (this.resource.equals(otherResource.resource) &&, +				ObjectUtils.nullSafeEquals(this.charset, otherResource.charset) &&, +				ObjectUtils.nullSafeEquals(this.encoding, otherResource.encoding));, +	}, +++ b/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequest.java, +++ b/spring-core/src/main/java/org/springframework/core/io/support/EncodedResource.java, +	public boolean equals(Object other) {, +		if (this == other) {, +		if (!(other instanceof EncodedResource)) {, +		EncodedResource otherResource = (EncodedResource) other;, +		return (this.resource.equals(otherResource.resource) &&, +				ObjectUtils.nullSafeEquals(this.charset, otherResource.charset) &&, +				ObjectUtils.nullSafeEquals(this.encoding, otherResource.encoding));, +	}, +++ b/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequest.java, +++ b/spring-web/src/test/java/org/springframework/http/client/AbstractHttpRequestFactoryTestCase.java, + * Copyright 2002-2015 the original author or authors., +import static org.junit.Assert.*;, +, +/**, + * @author Arjen Poutsma, + */, +public abstract class AbstractHttpRequestFactoryTestCase extends AbstractJettyServerTestCase {, +, +, +++ b/spring-core/src/main/java/org/springframework/core/io/support/EncodedResource.java, +	public boolean equals(Object other) {, +		if (this == other) {, +		if (!(other instanceof EncodedResource)) {, +		EncodedResource otherResource = (EncodedResource) other;, +		return (this.resource.equals(otherResource.resource) &&, +				ObjectUtils.nullSafeEquals(this.charset, otherResource.charset) &&, +				ObjectUtils.nullSafeEquals(this.encoding, otherResource.encoding));, +	}, +++ b/spring-web/src/main/java/org/springframework/http/client/Netty4ClientHttpRequest.java, +++ b/spring-web/src/test/java/org/springframework/http/client/AbstractHttpRequestFactoryTestCase.java, + * Copyright 2002-2015 the original author or authors., +import static org.junit.Assert.*;, +, +/**, + * @author Arjen Poutsma, + */, +public abstract class AbstractHttpRequestFactoryTestCase extends AbstractJettyServerTestCase {, +, +, +++ b/spring-web/src/test/java/org/springframework/http/client/AbstractJettyServerTestCase.java, +/**, + * @author Arjen Poutsma, + */, +, +, +, +, +, +, +		protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {]