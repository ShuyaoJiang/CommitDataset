[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java, +import org.springframework.core.style.ToStringCreator;, +		CacheKey cacheKey = new CacheKey(type, name, target instanceof Class);, +		CacheKey cacheKey = new CacheKey(type, name, target instanceof Class);, +		CacheKey cacheKey = new CacheKey(type, name, target instanceof Class);, +		CacheKey cacheKey = new CacheKey(type, name, target instanceof Class);, +		CacheKey cacheKey = new CacheKey(type, name, target instanceof Class);, +		CacheKey cacheKey = new CacheKey(type, name, target instanceof Class);, +		private boolean targetIsClass;, +, +		public CacheKey(Class clazz, String name, boolean targetIsClass) {, +			this.targetIsClass = targetIsClass;, +			boolean rtn = true;, +			rtn &= this.clazz.equals(otherKey.clazz);, +			rtn &= this.name.equals(otherKey.name);, +			rtn &= this.targetIsClass == otherKey.targetIsClass;, +			return rtn;, +, +		@Override, +		public String toString() {, +			return new ToStringCreator(this).append("clazz", this.clazz).append("name",, +					this.name).append("targetIsClass", this.targetIsClass).toString();, +		}, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java, +import org.springframework.core.style.ToStringCreator;, +		CacheKey cacheKey = new CacheKey(type, name, target instanceof Class);, +		CacheKey cacheKey = new CacheKey(type, name, target instanceof Class);, +		CacheKey cacheKey = new CacheKey(type, name, target instanceof Class);, +		CacheKey cacheKey = new CacheKey(type, name, target instanceof Class);, +		CacheKey cacheKey = new CacheKey(type, name, target instanceof Class);, +		CacheKey cacheKey = new CacheKey(type, name, target instanceof Class);, +		private boolean targetIsClass;, +, +		public CacheKey(Class clazz, String name, boolean targetIsClass) {, +			this.targetIsClass = targetIsClass;, +			boolean rtn = true;, +			rtn &= this.clazz.equals(otherKey.clazz);, +			rtn &= this.name.equals(otherKey.name);, +			rtn &= this.targetIsClass == otherKey.targetIsClass;, +			return rtn;, +, +		@Override, +		public String toString() {, +			return new ToStringCreator(this).append("clazz", this.clazz).append("name",, +					this.name).append("targetIsClass", this.targetIsClass).toString();, +		}, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java, +	@Test, +	public void SPR_10486() throws Exception {, +		SpelExpressionParser parser = new SpelExpressionParser();, +		StandardEvaluationContext context = new StandardEvaluationContext();, +		SPR10486 rootObject = new SPR10486();, +		Expression classNameExpression = parser.parseExpression("class.name");, +		Expression nameExpression = parser.parseExpression("name");, +		assertThat(classNameExpression.getValue(context, rootObject),, +				equalTo((Object) SPR10486.class.getName()));, +		assertThat(nameExpression.getValue(context, rootObject),, +				equalTo((Object) "name"));, +	}, +, +	/**, +	 * The Class TestObject., +	 */, +	public static class SPR10486 {, +, +		private String name = "name";, +, +		public String getName() {, +			return name;, +		}, +, +		public void setName(String name) {, +			this.name = name;, +		}, +, +	}]