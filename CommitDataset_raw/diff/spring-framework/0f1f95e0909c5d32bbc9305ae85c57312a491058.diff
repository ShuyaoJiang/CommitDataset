[+++ b/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java, +	 * and assert that a non-null value, possibly an empty array or map, exists, +	 * at the given path., +	 * <p>Note that if the JSON path expression is not, +	 * that the list of values at the given path is not <em>empty</em>., +	 * and assert that a non-null value does not exist at the given path., +	 * <p>Note that if the JSON path expression is not, +	 * that the list of values at the given path is <em>empty</em>., +	/**, +	 * Evaluate the JSON path expression against the supplied {@code content}, +	 * and assert that a value, possibly {@code null}, exists., +	 * <p>If the JSON path expression is not, +	 * {@linkplain JsonPath#isDefinite() definite}, this method asserts, +	 * that the list of values at the given path is not <em>empty</em>., +	 * @param content the JSON content, +	 * @since 5.0.3, +	 */, +	public void hasJsonPath(String content) {, +		Object value = evaluateJsonPath(content);, +		if (pathIsIndefinite() && value instanceof List) {, +			assertTrue("No values for JSON path \"" + this.expression + "\"", !((List<?>) value).isEmpty());, +		}, +	}, +, +	/**, +	 * Evaluate the JSON path expression against the supplied {@code content}, +	 * and assert that a value, including {@code null} values, does not exist, +	 * at the given path., +	 * <p>If the JSON path expression is not, +	 * {@linkplain JsonPath#isDefinite() definite}, this method asserts, +	 * that the list of values at the given path is <em>empty</em>., +	 * @param content the JSON content, +	 * @since 5.0.3, +	 */, +	public void doesNotHaveJsonPath(String content) {, +		Object value;, +		try {, +			value = evaluateJsonPath(content);, +		}, +		catch (AssertionError ex) {, +			return;, +		}, +		if (pathIsIndefinite() && value instanceof List) {, +			assertTrue(failureReason("no values", value), ((List<?>) value).isEmpty());, +		}, +		else {, +			fail(failureReason("no value", value));, +		}, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java, +	 * and assert that a non-null value, possibly an empty array or map, exists, +	 * at the given path., +	 * <p>Note that if the JSON path expression is not, +	 * that the list of values at the given path is not <em>empty</em>., +	 * and assert that a non-null value does not exist at the given path., +	 * <p>Note that if the JSON path expression is not, +	 * that the list of values at the given path is <em>empty</em>., +	/**, +	 * Evaluate the JSON path expression against the supplied {@code content}, +	 * and assert that a value, possibly {@code null}, exists., +	 * <p>If the JSON path expression is not, +	 * {@linkplain JsonPath#isDefinite() definite}, this method asserts, +	 * that the list of values at the given path is not <em>empty</em>., +	 * @param content the JSON content, +	 * @since 5.0.3, +	 */, +	public void hasJsonPath(String content) {, +		Object value = evaluateJsonPath(content);, +		if (pathIsIndefinite() && value instanceof List) {, +			assertTrue("No values for JSON path \"" + this.expression + "\"", !((List<?>) value).isEmpty());, +		}, +	}, +, +	/**, +	 * Evaluate the JSON path expression against the supplied {@code content}, +	 * and assert that a value, including {@code null} values, does not exist, +	 * at the given path., +	 * <p>If the JSON path expression is not, +	 * {@linkplain JsonPath#isDefinite() definite}, this method asserts, +	 * that the list of values at the given path is <em>empty</em>., +	 * @param content the JSON content, +	 * @since 5.0.3, +	 */, +	public void doesNotHaveJsonPath(String content) {, +		Object value;, +		try {, +			value = evaluateJsonPath(content);, +		}, +		catch (AssertionError ex) {, +			return;, +		}, +		if (pathIsIndefinite() && value instanceof List) {, +			assertTrue(failureReason("no values", value), ((List<?>) value).isEmpty());, +		}, +		else {, +			fail(failureReason("no value", value));, +		}, +	}, +]