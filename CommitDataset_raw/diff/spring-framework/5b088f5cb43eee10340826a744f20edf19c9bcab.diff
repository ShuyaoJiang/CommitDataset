[+++ b/org.springframework.context/src/main/java/org/springframework/context/LifecycleProcessor.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.context;, +, +/**, + * @author Mark Fisher, + * @since 3.0, + */, +public interface LifecycleProcessor extends Lifecycle {, +, +}, +++ b/org.springframework.context/src/main/java/org/springframework/context/LifecycleProcessor.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.context;, +, +/**, + * @author Mark Fisher, + * @since 3.0, + */, +public interface LifecycleProcessor extends Lifecycle {, +, +}, +++ b/org.springframework.context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +import org.springframework.context.LifecycleProcessor;, +	 * Name of the LifecycleProcessor bean in the factory., +	 * If none is supplied, a DefaultLifecycleProcessor is used., +	 * @see org.springframework.context.LifecycleProcessor, +	 * @see org.springframework.context.support.DefaultLifecycleProcessor, +	 */, +	public static final String LIFECYCLE_PROCESSOR_BEAN_NAME = "lifecycleProcessor";, +, +	/**, +	/** LifecycleProcessor for managing the lifecycle of beans within this context */, +	private LifecycleProcessor lifecycleProcessor;, +, +	 * Return the internal LifecycleProcessor used by the context., +	 * @return the internal LifecycleProcessor (never <code>null</code>), +	 * @throws IllegalStateException if the context has not been initialized yet, +	 */, +	private LifecycleProcessor getLifecycleProcessor() {, +		if (this.lifecycleProcessor == null) {, +			throw new IllegalStateException("LifecycleProcessor not initialized - " +, +					"call 'refresh' before invoking lifecycle methods via the context: " + this);, +		}, +		return this.lifecycleProcessor;, +	}, +, +	/**, +	 * Return the internal ApplicationEventMulticaster used by the context., +	 * @return the internal ApplicationEventMulticaster (never <code>null</code>), +				// Initialize lifecycle processor for this context., +				initLifecycleProcessor();, +, +	 * Initialize the LifecycleProcessor., +	 * Uses DefaultLifecycleProcessor if none defined in the context., +	 * @see org.springframework.context.support.DefaultLifecycleProcessor, +	 */, +	protected void initLifecycleProcessor() {, +		ConfigurableListableBeanFactory beanFactory = getBeanFactory();, +		if (beanFactory.containsLocalBean(LIFECYCLE_PROCESSOR_BEAN_NAME)) {, +			this.lifecycleProcessor =, +					beanFactory.getBean(LIFECYCLE_PROCESSOR_BEAN_NAME, LifecycleProcessor.class);, +			if (logger.isDebugEnabled()) {, +				logger.debug("Using LifecycleProcessor [" + this.lifecycleProcessor + "]");, +			}, +		}, +		else {, +			DefaultLifecycleProcessor defaultProcessor = new DefaultLifecycleProcessor();, +			defaultProcessor.setBeanFactory(beanFactory);, +			this.lifecycleProcessor = defaultProcessor;]