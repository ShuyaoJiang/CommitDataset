[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, + * Copyright 2002-2017 the original author or authors., +		else if (Map.class == type) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, + * Copyright 2002-2017 the original author or authors., +		else if (Map.class == type) {, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2017 the original author or authors., +	public void testConstructorInjectionWithCustomMapAsBean() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver());, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		RootBeanDefinition bd = new RootBeanDefinition(CustomMapConstructorInjectionBean.class);, +		bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE);, +		bf.registerBeanDefinition("annotatedBean", bd);, +		RootBeanDefinition tbm = new RootBeanDefinition(CustomCollectionFactoryMethods.class);, +		tbm.setUniqueFactoryMethodName("testBeanMap");, +		bf.registerBeanDefinition("myTestBeanMap", tbm);, +		bf.registerSingleton("testBean1", new TestBean());, +		bf.registerSingleton("testBean2", new TestBean());, +, +		CustomMapConstructorInjectionBean bean = (CustomMapConstructorInjectionBean) bf.getBean("annotatedBean");, +		assertSame(bf.getBean("myTestBeanMap"), bean.getTestBeanMap());, +		bean = (CustomMapConstructorInjectionBean) bf.getBean("annotatedBean");, +		assertSame(bf.getBean("myTestBeanMap"), bean.getTestBeanMap());, +	}, +, +	@Test, +	public void testConstructorInjectionWithCustomSetAsBean() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver());, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		RootBeanDefinition bd = new RootBeanDefinition(CustomSetConstructorInjectionBean.class);, +		bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE);, +		bf.registerBeanDefinition("annotatedBean", bd);, +		RootBeanDefinition tbs = new RootBeanDefinition(CustomCollectionFactoryMethods.class);, +		tbs.setUniqueFactoryMethodName("testBeanSet");, +		bf.registerBeanDefinition("myTestBeanSet", tbs);, +, +		CustomSetConstructorInjectionBean bean = (CustomSetConstructorInjectionBean) bf.getBean("annotatedBean");, +		assertSame(bf.getBean("myTestBeanSet"), bean.getTestBeanSet());, +		bean = (CustomSetConstructorInjectionBean) bf.getBean("annotatedBean");, +		assertSame(bf.getBean("myTestBeanSet"), bean.getTestBeanSet());, +	}, +, +	@Test, +	@Test @Ignore  // SPR-15125, +	public void testFactoryBeanSelfInjection() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(SelfInjectingFactoryBean.class));, +, +		SelfInjectingFactoryBean bean = bf.getBean(SelfInjectingFactoryBean.class);, +		assertSame(bf.getBean("annotatedBean"), bean.testBean);, +	}, +, +		String doSomethingMoreGeneric(K o);, +	public static class CustomCollectionFactoryMethods {, +, +		public static CustomMap<String, TestBean> testBeanMap() {, +			CustomMap<String, TestBean> tbm = new CustomHashMap<>();, +			tbm.put("testBean1", new TestBean("tb1"));, +			tbm.put("testBean2", new TestBean("tb2"));, +			return tbm;, +		}, +, +		public static CustomSet<TestBean> testBeanSet() {, +			CustomSet<TestBean> tbs = new CustomHashSet<>();, +			tbs.add(new TestBean("tb1"));, +			tbs.add(new TestBean("tb2"));, +			return tbs;, +		}, +	}, +, +, +	public static class CustomMapConstructorInjectionBean {, +, +		private CustomMap<String, TestBean> testBeanMap;, +, +		@Autowired, +		public CustomMapConstructorInjectionBean(CustomMap<String, TestBean> testBeanMap) {, +			this.testBeanMap = testBeanMap;, +		}, +, +		public CustomMap<String, TestBean> getTestBeanMap() {, +			return this.testBeanMap;, +		}, +	}, +, +, +	public static class CustomSetConstructorInjectionBean {, +, +		private CustomSet<TestBean> testBeanSet;, +]