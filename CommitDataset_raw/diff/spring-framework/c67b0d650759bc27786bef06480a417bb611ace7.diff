[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java, +import java.util.List;, +import org.springframework.core.ResolvableType;, +		ResolvableType elementType = ResolvableType.forMethodParameter(returnType).getGeneric(0);, +		Class<?> elementClass = elementType.resolve(Object.class);, +					ServerSentEvent.class.isAssignableFrom(elementClass)) {, +			if (CharSequence.class.isAssignableFrom(elementClass) && !isJsonStringArray(elementClass, mediaType)) {, +		new DeferredResultSubscriber(result, adapter, elementType).connect(adapter, returnValue);, +		private final CollectedValuesList values;, +		DeferredResultSubscriber(DeferredResult<Object> result, ReactiveAdapter adapter,, +				ResolvableType elementType) {, +, +			this.values = new CollectedValuesList(elementType);, +, +		private final ResolvableType elementType;, +, +		CollectedValuesList(ResolvableType elementType) {, +			this.elementType = elementType;, +		}, +, +		public ResolvableType getReturnType() {, +			return ResolvableType.forClassWithGenerics(List.class, this.elementType);, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java, +import java.util.List;, +import org.springframework.core.ResolvableType;, +		ResolvableType elementType = ResolvableType.forMethodParameter(returnType).getGeneric(0);, +		Class<?> elementClass = elementType.resolve(Object.class);, +					ServerSentEvent.class.isAssignableFrom(elementClass)) {, +			if (CharSequence.class.isAssignableFrom(elementClass) && !isJsonStringArray(elementClass, mediaType)) {, +		new DeferredResultSubscriber(result, adapter, elementType).connect(adapter, returnValue);, +		private final CollectedValuesList values;, +		DeferredResultSubscriber(DeferredResult<Object> result, ReactiveAdapter adapter,, +				ResolvableType elementType) {, +, +			this.values = new CollectedValuesList(elementType);, +, +		private final ResolvableType elementType;, +, +		CollectedValuesList(ResolvableType elementType) {, +			this.elementType = elementType;, +		}, +, +		public ResolvableType getReturnType() {, +			return ResolvableType.forClassWithGenerics(List.class, this.elementType);, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethod.java, +import org.springframework.web.bind.annotation.ResponseBody;, +					((ReactiveTypeHandler.CollectedValuesList) returnValue).getReturnType() :, +					ResolvableType.forType(super.getGenericParameterType()).getGeneric(0));, +		public <T extends Annotation> boolean hasMethodAnnotation(Class<T> annotationType) {, +, +			// Ensure @ResponseBody-style handling for values collected from a reactive type, +			// even if actual return type is ResponseEntity<Flux<T>>, +, +			return ResponseBody.class.equals(annotationType) &&, +					this.returnValue instanceof ReactiveTypeHandler.CollectedValuesList ||, +					super.hasMethodAnnotation(annotationType);, +		}, +, +		@Override, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java, +import java.util.List;, +import org.springframework.core.ResolvableType;, +		ResolvableType elementType = ResolvableType.forMethodParameter(returnType).getGeneric(0);, +		Class<?> elementClass = elementType.resolve(Object.class);, +					ServerSentEvent.class.isAssignableFrom(elementClass)) {, +			if (CharSequence.class.isAssignableFrom(elementClass) && !isJsonStringArray(elementClass, mediaType)) {, +		new DeferredResultSubscriber(result, adapter, elementType).connect(adapter, returnValue);, +		private final CollectedValuesList values;, +		DeferredResultSubscriber(DeferredResult<Object> result, ReactiveAdapter adapter,, +				ResolvableType elementType) {, +, +			this.values = new CollectedValuesList(elementType);, +, +		private final ResolvableType elementType;, +, +		CollectedValuesList(ResolvableType elementType) {, +			this.elementType = elementType;, +		}, +, +		public ResolvableType getReturnType() {, +			return ResolvableType.forClassWithGenerics(List.class, this.elementType);, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethod.java, +import org.springframework.web.bind.annotation.ResponseBody;, +					((ReactiveTypeHandler.CollectedValuesList) returnValue).getReturnType() :, +					ResolvableType.forType(super.getGenericParameterType()).getGeneric(0));, +		public <T extends Annotation> boolean hasMethodAnnotation(Class<T> annotationType) {, +, +			// Ensure @ResponseBody-style handling for values collected from a reactive type, +			// even if actual return type is ResponseEntity<Flux<T>>, +, +			return ResponseBody.class.equals(annotationType) &&, +					this.returnValue instanceof ReactiveTypeHandler.CollectedValuesList ||, +					super.hasMethodAnnotation(annotationType);, +		}, +, +		@Override, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethodTests.java]