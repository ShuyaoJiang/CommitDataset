[+++ b/build.gradle, +        compile("org.apache.httpcomponents:httpclient:4.2", optional), +++ b/build.gradle, +        compile("org.apache.httpcomponents:httpclient:4.2", optional), +++ b/spring-web/src/main/java/org/springframework/http/HttpMethod.java, + * Copyright 2002-2012 the original author or authors., +	GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE, +++ b/build.gradle, +        compile("org.apache.httpcomponents:httpclient:4.2", optional), +++ b/spring-web/src/main/java/org/springframework/http/HttpMethod.java, + * Copyright 2002-2012 the original author or authors., +	GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE, +++ b/spring-web/src/main/java/org/springframework/http/client/CommonsClientHttpRequestFactory.java, + * Copyright 2002-2012 the original author or authors., +			case PATCH:, +				throw new IllegalArgumentException(, +						"HTTP method PATCH not available before Apache HttpComponents HttpClient 4.2");, +++ b/build.gradle, +        compile("org.apache.httpcomponents:httpclient:4.2", optional), +++ b/spring-web/src/main/java/org/springframework/http/HttpMethod.java, + * Copyright 2002-2012 the original author or authors., +	GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE, +++ b/spring-web/src/main/java/org/springframework/http/client/CommonsClientHttpRequestFactory.java, + * Copyright 2002-2012 the original author or authors., +			case PATCH:, +				throw new IllegalArgumentException(, +						"HTTP method PATCH not available before Apache HttpComponents HttpClient 4.2");, +++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java, + * Copyright 2002-2012 the original author or authors., +import java.lang.reflect.Constructor;, +import org.springframework.beans.factory.DisposableBean;, +import org.springframework.http.HttpMethod;, +import org.springframework.util.Assert;, +import org.springframework.util.ClassUtils;, +			case PATCH:, +				return createHttpPatch(uri);, +	private HttpUriRequest createHttpPatch(URI uri) {, +		String className = "org.apache.http.client.methods.HttpPatch";, +		ClassLoader classloader = this.getClass().getClassLoader();, +		if (!ClassUtils.isPresent(className, classloader)) {, +			throw new IllegalArgumentException(, +					"HTTP method PATCH not available before Apache HttpComponents HttpClient 4.2");, +		}, +		try {, +			Class<?> clazz = classloader.loadClass(className);, +			Constructor<?> constructor = clazz.getConstructor(URI.class);, +			return (HttpUriRequest) constructor.newInstance(uri);, +		}, +		catch (Throwable ex) {, +			throw new IllegalStateException("Unable to instantiate " + className, ex);, +		}, +	}, +, +++ b/build.gradle, +        compile("org.apache.httpcomponents:httpclient:4.2", optional), +++ b/spring-web/src/main/java/org/springframework/http/HttpMethod.java, + * Copyright 2002-2012 the original author or authors., +	GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE, +++ b/spring-web/src/main/java/org/springframework/http/client/CommonsClientHttpRequestFactory.java, + * Copyright 2002-2012 the original author or authors., +			case PATCH:, +				throw new IllegalArgumentException(, +						"HTTP method PATCH not available before Apache HttpComponents HttpClient 4.2");, +++ b/spring-web/src/main/java/org/springframework/http/client/HttpComponentsClientHttpRequestFactory.java, + * Copyright 2002-2012 the original author or authors., +import java.lang.reflect.Constructor;, +import org.springframework.beans.factory.DisposableBean;, +import org.springframework.http.HttpMethod;, +import org.springframework.util.Assert;, +import org.springframework.util.ClassUtils;, +			case PATCH:, +				return createHttpPatch(uri);, +	private HttpUriRequest createHttpPatch(URI uri) {, +		String className = "org.apache.http.client.methods.HttpPatch";, +		ClassLoader classloader = this.getClass().getClassLoader();, +		if (!ClassUtils.isPresent(className, classloader)) {, +			throw new IllegalArgumentException(, +					"HTTP method PATCH not available before Apache HttpComponents HttpClient 4.2");, +		}, +		try {, +			Class<?> clazz = classloader.loadClass(className);, +			Constructor<?> constructor = clazz.getConstructor(URI.class);, +			return (HttpUriRequest) constructor.newInstance(uri);, +		}, +		catch (Throwable ex) {, +			throw new IllegalStateException("Unable to instantiate " + className, ex);, +		}, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/client/SimpleClientHttpRequestFactory.java, + * Copyright 2002-2012 the original author or authors., +		if ("PUT".equals(httpMethod) || "POST".equals(httpMethod) || "PATCH".equals(httpMethod)) {, +++ b/build.gradle, +        compile("org.apache.httpcomponents:httpclient:4.2", optional), +++ b/spring-web/src/main/java/org/springframework/http/HttpMethod.java, + * Copyright 2002-2012 the original author or authors., +	GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE, +++ b/spring-web/src/main/java/org/springframework/http/client/CommonsClientHttpRequestFactory.java, + * Copyright 2002-2012 the original author or authors., +			case PATCH:]