[+++ b/spring-messaging/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java, + * Copyright 2002-2017 the original author or authors., +		this(null);, +	 * @param message a message to copy the headers from, or {@code null} if none, +		this.headers = new MutableMessageHeaders(message != null ? message.getHeaders() : null);, +			MessageHeaderAccessor headerAccessor = mutableHeaders.getAccessor();, +			MessageHeaderAccessor accessor = mutableHeaders.getAccessor();, +		private boolean mutable = true;, +			Assert.state(this.mutable, "Already immutable");, +			if (!this.mutable) {, +, +, +, +			this.mutable = false;, +		}, +, +		public boolean isMutable() {, +			return this.mutable;, +		}, +, +		public MessageHeaderAccessor getAccessor() {, +			return MessageHeaderAccessor.this;, +		}, +, +		protected Object writeReplace() {, +			// Serialize as regular MessageHeaders (without MessageHeaderAccessor reference), +			return new MessageHeaders(this);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java, + * Copyright 2002-2017 the original author or authors., +		this(null);, +	 * @param message a message to copy the headers from, or {@code null} if none, +		this.headers = new MutableMessageHeaders(message != null ? message.getHeaders() : null);, +			MessageHeaderAccessor headerAccessor = mutableHeaders.getAccessor();, +			MessageHeaderAccessor accessor = mutableHeaders.getAccessor();, +		private boolean mutable = true;, +			Assert.state(this.mutable, "Already immutable");, +			if (!this.mutable) {, +, +, +, +			this.mutable = false;, +		}, +, +		public boolean isMutable() {, +			return this.mutable;, +		}, +, +		public MessageHeaderAccessor getAccessor() {, +			return MessageHeaderAccessor.this;, +		}, +, +		protected Object writeReplace() {, +			// Serialize as regular MessageHeaders (without MessageHeaderAccessor reference), +			return new MessageHeaders(this);, +++ b/spring-messaging/src/test/java/org/springframework/messaging/support/MessageHeaderAccessorTests.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.util.SerializationTestUtils;, +		assertEquals(Collections.singleton("id"), headers.getMessageHeaders().keySet());, +		accessor.setIdGenerator(() -> id);, +		accessor.setIdGenerator(() -> MessageHeaders.ID_VALUE_NONE);, +		accessor.setIdGenerator(() -> id);, +	@Test, +	public void serializeMutableHeaders() throws Exception {, +		Map<String, Object> headers = new HashMap<>();, +		headers.put("foo", "bar");, +		Message<String> message = new GenericMessage<>("test", headers);, +		MessageHeaderAccessor mutableAccessor = MessageHeaderAccessor.getMutableAccessor(message);, +		mutableAccessor.setContentType(MimeTypeUtils.TEXT_PLAIN);, +, +		message = new GenericMessage<>(message.getPayload(), mutableAccessor.getMessageHeaders());, +		Message<?> output = (Message<?>) SerializationTestUtils.serializeAndDeserialize(message);, +		assertEquals("test", output.getPayload());, +		assertEquals("bar", output.getHeaders().get("foo"));, +		assertNotNull(output.getHeaders().get(MessageHeaders.CONTENT_TYPE));, +	}, +, +		public TestMessageHeaderAccessor() {]