[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +			targetType = (mbd.getFactoryMethodName() != null ?, +					getTypeForFactoryMethod(beanName, mbd, typesToMatch) :, +				mbd.resolvedTargetType = targetType;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +			targetType = (mbd.getFactoryMethodName() != null ?, +					getTypeForFactoryMethod(beanName, mbd, typesToMatch) :, +				mbd.resolvedTargetType = targetType;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/GenericTypeAwareAutowireCandidateResolver.java, + * Copyright 2002-2016 the original author or authors., +, +		boolean cacheType = false;, +			targetType = rbd.targetType;, +			if (targetType == null) {, +				cacheType = true;, +						targetType = dbd.targetType;, +						if (targetType == null) {, +			}, +		}, +, +, +		if (targetType == null) {, +			return true;, +		}, +		if (cacheType) {, +			rbd.targetType = targetType;, +		}, +		if (descriptor.fallbackMatchAllowed() && targetType.hasUnresolvableGenerics()) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +			targetType = (mbd.getFactoryMethodName() != null ?, +					getTypeForFactoryMethod(beanName, mbd, typesToMatch) :, +				mbd.resolvedTargetType = targetType;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/GenericTypeAwareAutowireCandidateResolver.java, + * Copyright 2002-2016 the original author or authors., +, +		boolean cacheType = false;, +			targetType = rbd.targetType;, +			if (targetType == null) {, +				cacheType = true;, +						targetType = dbd.targetType;, +						if (targetType == null) {, +			}, +		}, +, +, +		if (targetType == null) {, +			return true;, +		}, +		if (cacheType) {, +			rbd.targetType = targetType;, +		}, +		if (descriptor.fallbackMatchAllowed() && targetType.hasUnresolvableGenerics()) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/RootBeanDefinition.java, +import org.springframework.core.ResolvableType;, +	boolean allowCaching = true;, +, +	volatile ResolvableType targetType;, +	/** Package-visible field for caching the determined Class of a given bean definition */, +	volatile Class<?> resolvedTargetType;, +, +	/** Package-visible field for caching the return type of a generically typed factory method */, +	volatile Class<?> resolvedFactoryMethodReturnType;, +, +	/** Common lock for the four constructor fields below */, +	/** Common lock for the two post-processing fields below */, +		this.allowCaching = original.allowCaching;, +	 * Specify a generics-containing target type of this bean definition, if known in advance., +	 * @since 4.3.3, +	 */, +	public void setTargetType(ResolvableType targetType) {, +		this.targetType = targetType;, +	}, +, +	/**, +	 * @since 3.2.2, +		this.targetType = (targetType != null ? ResolvableType.forClass(targetType) : null);, +	 * @since 3.2.2, +		if (this.resolvedTargetType != null) {, +			return this.resolvedTargetType;, +		}, +		return (this.targetType != null ? this.targetType.resolve() : null);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +			targetType = (mbd.getFactoryMethodName() != null ?, +					getTypeForFactoryMethod(beanName, mbd, typesToMatch) :, +				mbd.resolvedTargetType = targetType;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/GenericTypeAwareAutowireCandidateResolver.java, + * Copyright 2002-2016 the original author or authors., +, +		boolean cacheType = false;, +			targetType = rbd.targetType;, +			if (targetType == null) {, +				cacheType = true;, +						targetType = dbd.targetType;, +						if (targetType == null) {, +			}, +		}, +, +, +		if (targetType == null) {, +			return true;]