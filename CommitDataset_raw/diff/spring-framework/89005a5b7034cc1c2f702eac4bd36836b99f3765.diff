[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import java.util.List;, +import java.util.Map;, +import org.springframework.core.annotation.AnnotationUtils;, +		List<Map<String, Object>> allImportAttribs =, +			AnnotationUtils.findAllAnnotationAttributes(Import.class, metadata.getClassName(), true);, +		for (Map<String, Object> importAttribs : allImportAttribs) {, +			processImport(configClass, (String[]) importAttribs.get("value"));, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import java.util.List;, +import java.util.Map;, +import org.springframework.core.annotation.AnnotationUtils;, +		List<Map<String, Object>> allImportAttribs =, +			AnnotationUtils.findAllAnnotationAttributes(Import.class, metadata.getClassName(), true);, +		for (Map<String, Object> importAttribs : allImportAttribs) {, +			processImport(configClass, (String[]) importAttribs.get("value"));, +, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/ImportAnnotationDetectionTests.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.context.annotation.configuration;, +, +import static org.hamcrest.CoreMatchers.is;, +import static org.junit.Assert.assertThat;, +, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +, +import org.junit.Test;, +import org.springframework.beans.TestBean;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.context.annotation.Import;, +, +/**, + * Tests that @Import may be used both as a locally declared and meta-declared, + * annotation, that all declarations are processed, and that any local declaration, + * is processed last., + *, + * @author Chris Beams, + * @since 3.1, + */, +public class ImportAnnotationDetectionTests {, +, +	@Test, +	public void multipleMetaImportsAreProcessed() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(MultiMetaImportConfig.class);, +		ctx.refresh();, +		assertThat(ctx.containsBean("testBean1"), is(true));, +		assertThat(ctx.containsBean("testBean2"), is(true));, +	}, +, +	@Test, +	public void localAndMetaImportsAreProcessed() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(MultiMetaImportConfigWithLocalImport.class);, +		ctx.refresh();, +		assertThat(ctx.containsBean("testBean1"), is(true));, +		assertThat(ctx.containsBean("testBean2"), is(true));, +		assertThat(ctx.containsBean("testBean3"), is(true));, +	}, +, +	@Test, +	public void localImportIsProcessedLast() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.register(MultiMetaImportConfigWithLocalImportWithBeanOverride.class);, +		ctx.refresh();, +		assertThat(ctx.containsBean("testBean1"), is(true));, +		assertThat(ctx.containsBean("testBean2"), is(true));, +		assertThat(ctx.getBean("testBean2", TestBean.class).getName(), is("2a"));, +	}, +, +	@Configuration, +	@MetaImport1, +	@MetaImport2, +	static class MultiMetaImportConfig {, +	}, +, +	@Configuration, +	@MetaImport1, +	@MetaImport2]