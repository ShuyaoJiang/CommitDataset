[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.java, +, +	private ScheduledFuture<?> heartbeatFuture;, +	private HeartbeatTask heartbeatTask;, +, +	private final Object heartbeatLock = new Object();, +	protected void sendHeartbeat() throws SockJsTransportFailureException {, +		synchronized (this.heartbeatLock) {, +			if (isActive() && !this.heartbeatDisabled) {, +		synchronized (this.heartbeatLock) {, +			this.heartbeatTask = new HeartbeatTask();, +			this.heartbeatFuture = this.config.getTaskScheduler().schedule(this.heartbeatTask, time);, +	protected void cancelHeartbeat() {, +		synchronized (this.heartbeatLock) {, +			if (this.heartbeatFuture != null) {, +				this.heartbeatFuture.cancel(false);, +				this.heartbeatFuture = null;, +			if (this.heartbeatTask != null) {, +				this.heartbeatTask.cancel();, +				this.heartbeatTask = null;, +, +	private class HeartbeatTask implements Runnable {, +, +		private boolean expired;, +, +		@Override, +		public void run() {, +			synchronized (heartbeatLock) {, +				if (!this.expired) {, +					try {, +						sendHeartbeat();, +					}, +					finally {, +						this.expired = true;, +					}, +				}, +			}, +		}, +, +		void cancel() {, +			this.expired = true;, +		}, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.java, +, +	private ScheduledFuture<?> heartbeatFuture;, +	private HeartbeatTask heartbeatTask;, +, +	private final Object heartbeatLock = new Object();, +	protected void sendHeartbeat() throws SockJsTransportFailureException {, +		synchronized (this.heartbeatLock) {, +			if (isActive() && !this.heartbeatDisabled) {, +		synchronized (this.heartbeatLock) {, +			this.heartbeatTask = new HeartbeatTask();, +			this.heartbeatFuture = this.config.getTaskScheduler().schedule(this.heartbeatTask, time);, +	protected void cancelHeartbeat() {, +		synchronized (this.heartbeatLock) {, +			if (this.heartbeatFuture != null) {, +				this.heartbeatFuture.cancel(false);, +				this.heartbeatFuture = null;, +			if (this.heartbeatTask != null) {, +				this.heartbeatTask.cancel();, +				this.heartbeatTask = null;, +, +	private class HeartbeatTask implements Runnable {, +, +		private boolean expired;, +, +		@Override, +		public void run() {, +			synchronized (heartbeatLock) {, +				if (!this.expired) {, +					try {, +						sendHeartbeat();, +					}, +					finally {, +						this.expired = true;, +					}, +				}, +			}, +		}, +, +		void cancel() {, +			this.expired = true;, +		}, +	}, +, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/transport/session/SockJsSessionTests.java, +		this.session.setActive(true);]