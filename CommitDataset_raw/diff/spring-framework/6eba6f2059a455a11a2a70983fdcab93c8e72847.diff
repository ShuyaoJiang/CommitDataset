[+++ b/build-spring-framework/resources/changelog.txt, +* update Spring MVC configuration section to include MVC Java config and the MVC namespace, +++ b/build-spring-framework/resources/changelog.txt, +* update Spring MVC configuration section to include MVC Java config and the MVC namespace, +++ b/spring-framework-reference/src/mvc.xml, +    file. This is standard Java EE Servlet configuration; the following example, +    Spring MVC looks for a file named <emphasis>, +	<section id="mvc-servlet-special-bean-types">, +		<title>Special Bean Types In the <interfacename>WebApplicationContext</interfacename></title>, +, +	    are part of Spring MVC. You can choose which special beans to use, +	    by simply configuring one or more of them in the , +	    <interfacename>WebApplicationContext</interfacename>. , +	    However, you don't need to do that initially since Spring MVC, +	    maintains a list of default beans to use if you don't configure any. , +	    More on that in the next section. First see the table below  , +	    listing the special bean types the , +	    <classname>DispatcherServlet</classname> relies on.</para>, +	      <title>Special bean types in the, +	            <entry><link linkend="mvc-handlermapping">HandlerMapping</link></entry>, +	            <entry>Maps incoming requests to handlers and a list of , +	            pre- and post-processors (handler interceptors) based on some , +	            criteria the details of which vary by <interfacename>HandlerMapping</interfacename>, +	            implementation. The most popular implementation supports , +	            annotated controllers but other implementations exists as well.</entry>, +	            <entry>HandlerAdapter</entry>, +	            <entry>Helps the <interfacename>DispatcherServlet</interfacename> to , +	            invoke a handler mapped to a request regardless of the handler, +	            is actually invoked. For example, invoking an annotated controller, +	            requires resolving various annotations. Thus the main purpose, +	            of a <interfacename>HandlerAdapter</interfacename> is to shield the , +	            <classname>DispatcherServlet</classname> from such details.</entry>, +	            <entry><link linkend="mvc-exceptionhandlers">HandlerExceptionResolver</link></entry>, +	            <entry>Maps exceptions to views also allowing for more , +	            complex exception handling code.</entry>, +	            <entry><link linkend="mvc-viewresolver">ViewResolver</link></entry>, +	            <entry>Resolves logical String-based view names to actual , +	            <interface>View</interface> types.</entry>, +	          </row>, +	, +	          <row>, +	            <entry><link linkend="mvc-localeresolver">LocaleResolver</link></entry>, +	, +	            <entry>Resolves the locale a client is using,, +	            <entry><link linkend="mvc-themeresolver">ThemeResolver</link></entry>, +	            <entry>Resolves themes your web application can use, for, +	            <entry><link linkend="mvc-multipart">MultipartResolver</link></entry>, +	            <entry>Parses multi-part requests for example to support processing , +	            file uploads from HTML forms.</entry>, +	            <entry><link linkend="mvc-flash-attributes">FlashMapManager</link></entry>, +	            <entry>Stores and retrieves the "input" and the "output" , +	            <classname>FlashMap</classname> that can be used to pass attributes, +	            from one request to another, usually across a redirect.</entry>, +	</section>, +, +	<section id="mvc-servlet-config">, +		<title>Default DispatcherServlet Configuration</title>, +		, +		<para>As mentioned in the previous section for each special bean, +		the <classname>DispatcherServlet</classname> maintains a list , +		of implementations to use by default. This information is, +		kept in the file <filename>DispatcherServlet.properties</filename>, +		in the package <classname>org.springframework.web.servlet</classname>., +		</para>, +		, +		<para>All special beans have  some reasonable defaults of , +		their own. Sooner or later though you'll need to customize, +		one or more of the properties these beans provide., +		For example it's quite common to configure , +		an <classname>InternalResourceViewResolver</classname> , +		settings its <literal>prefix</literal> property to, +		the parent location of view files.</para>, +		, +		<para>Regardless of the details, the important concept , +		to understand here is that once, +		you	configure a special bean such as an, +		<classname>InternalResourceViewResolver</classname>, +		in your <classname>WebApplicationContext</classname>, you, +		effectively override the list of default implementations, +		that would have been used otherwise for that special bean , +		type. For example if you configure an , +		<classname>InternalResourceViewResolver</classname>, , +		the default list of <interfacename>ViewResolver</interfacename>, +		implementations is ignored., +		</para>, +		, +		<para>In <xref linkend="mvc-config"/> you'll learn about, +		other options for configuring Spring MVC including , +		MVC Java config and the MVC XML namespace both of which provide, +		a simple starting point and assume little knowledge of, +		how Spring MVC works. Regardless of how you choose to , +		configure your application, the concepts explained in this, +		section are fundamental should be of help to you. , +		</para>, +		, +	</section>, +, +	<section id="mvc-servlet-sequence">, +		<title>DispatcherServlet Processing Sequence</title>, +]