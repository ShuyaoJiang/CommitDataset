[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/Lookup.java, + * Copyright 2002-2015 the original author or authors., + * regular constructors: i.e. lookup methods cannot get replaced on beans returned, + * from factory methods where we cannot dynamically provide a subclass for them., + * <p><b>Concrete limitations in typical Spring configuration scenarios:</b>, + * When used with component scanning or any other mechanism that filters out abstract, + * beans, provide stub implementations of your lookup methods to be able to declare, + * them as concrete classes. And please remember that lookup methods won't work on, + * beans returned from {@code @Bean} methods in configuration classes; you'll have, + * to resort to {@code @Inject Provider&lt;TargetBean&gt;} or the like instead., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/Lookup.java, + * Copyright 2002-2015 the original author or authors., + * regular constructors: i.e. lookup methods cannot get replaced on beans returned, + * from factory methods where we cannot dynamically provide a subclass for them., + * <p><b>Concrete limitations in typical Spring configuration scenarios:</b>, + * When used with component scanning or any other mechanism that filters out abstract, + * beans, provide stub implementations of your lookup methods to be able to declare, + * them as concrete classes. And please remember that lookup methods won't work on, + * beans returned from {@code @Bean} methods in configuration classes; you'll have, + * to resort to {@code @Inject Provider&lt;TargetBean&gt;} or the like instead., +++ b/src/asciidoc/core-beans.adoc, +* For this dynamic subclassing to work, the class that the Spring bean container will, +  subclass cannot be `final`, and the method to be overridden cannot be `final` either., +* Unit-testing a class that has an `abstract` method requires you to subclass the class, +  yourself and to supply a stub implementation of the `abstract` method., +* Concrete methods are also necessary for component scanning which requires concrete, +  classes to pick up., +* A further key limitation is that lookup methods won't work with factory methods and, +  in particular not with `@Bean` methods in configuration classes, since the container, +  is not in charge of creating the instance in that case and therefore cannot create, +  a runtime-generated subclass on the fly., +* Finally, objects that have been the target of method injection cannot be serialized., +A less useful form of method injection than lookup method injection is the ability to]