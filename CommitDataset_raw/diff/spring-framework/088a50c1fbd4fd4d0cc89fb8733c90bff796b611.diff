[+++ b/spring-web/src/test/java/org/springframework/mock/web/test/MockHttpServletResponse.java, +import java.text.SimpleDateFormat;, +import java.util.Date;, +import java.util.TimeZone;, +, +	private static final String DATE_FORMAT = "EEE, dd MMM yyyy HH:mm:ss zzz";, +, +	private static TimeZone GMT = TimeZone.getTimeZone("GMT");, +, +		SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT, Locale.US);, +		dateFormat.setTimeZone(GMT);, +		setHeaderValue(name, dateFormat.format(new Date(value)));, +		SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT, Locale.US);, +		dateFormat.setTimeZone(GMT);, +		setHeaderValue(name, dateFormat.format(new Date(value)));, +++ b/spring-web/src/test/java/org/springframework/mock/web/test/MockHttpServletResponse.java, +import java.text.SimpleDateFormat;, +import java.util.Date;, +import java.util.TimeZone;, +, +	private static final String DATE_FORMAT = "EEE, dd MMM yyyy HH:mm:ss zzz";, +, +	private static TimeZone GMT = TimeZone.getTimeZone("GMT");, +, +		SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT, Locale.US);, +		dateFormat.setTimeZone(GMT);, +		setHeaderValue(name, dateFormat.format(new Date(value)));, +		SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT, Locale.US);, +		dateFormat.setTimeZone(GMT);, +		setHeaderValue(name, dateFormat.format(new Date(value)));, +++ b/spring-web/src/test/java/org/springframework/web/context/request/ServletWebRequestHttpMethodsTests.java, +		assertEquals(dateFormat.format(epochTime), servletResponse.getHeader("Last-Modified"));, +		assertEquals(dateFormat.format(currentDate.getTime()), servletResponse.getHeader("Last-Modified"));, +		assertEquals(dateFormat.format(currentDate.getTime()), servletResponse.getHeader("Last-Modified"));, +		assertEquals(dateFormat.format(currentEpoch), servletResponse.getHeader("Last-Modified"));, +		assertEquals(dateFormat.format(epochTime), servletResponse.getHeader("Last-Modified"));, +		assertEquals(dateFormat.format(epochTime), servletResponse.getHeader("Last-Modified"));, +		assertEquals(dateFormat.format(epochTime), servletResponse.getHeader("Last-Modified"));, +++ b/spring-web/src/test/java/org/springframework/mock/web/test/MockHttpServletResponse.java, +import java.text.SimpleDateFormat;, +import java.util.Date;, +import java.util.TimeZone;, +, +	private static final String DATE_FORMAT = "EEE, dd MMM yyyy HH:mm:ss zzz";, +, +	private static TimeZone GMT = TimeZone.getTimeZone("GMT");, +, +		SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT, Locale.US);, +		dateFormat.setTimeZone(GMT);, +		setHeaderValue(name, dateFormat.format(new Date(value)));, +		SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT, Locale.US);, +		dateFormat.setTimeZone(GMT);, +		setHeaderValue(name, dateFormat.format(new Date(value)));, +++ b/spring-web/src/test/java/org/springframework/web/context/request/ServletWebRequestHttpMethodsTests.java, +		assertEquals(dateFormat.format(epochTime), servletResponse.getHeader("Last-Modified"));, +		assertEquals(dateFormat.format(currentDate.getTime()), servletResponse.getHeader("Last-Modified"));, +		assertEquals(dateFormat.format(currentDate.getTime()), servletResponse.getHeader("Last-Modified"));, +		assertEquals(dateFormat.format(currentEpoch), servletResponse.getHeader("Last-Modified"));, +		assertEquals(dateFormat.format(epochTime), servletResponse.getHeader("Last-Modified"));, +		assertEquals(dateFormat.format(epochTime), servletResponse.getHeader("Last-Modified"));, +		assertEquals(dateFormat.format(epochTime), servletResponse.getHeader("Last-Modified"));, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/DispatcherServletTests.java, +		assertEquals("Wed, 01 Apr 2015 00:00:00 GMT", response.getHeader("Last-Modified"));, +		assertEquals("Wed, 01 Apr 2015 00:00:01 GMT", response.getHeader("Last-Modified"));, +++ b/spring-web/src/test/java/org/springframework/mock/web/test/MockHttpServletResponse.java, +import java.text.SimpleDateFormat;, +import java.util.Date;, +import java.util.TimeZone;, +, +	private static final String DATE_FORMAT = "EEE, dd MMM yyyy HH:mm:ss zzz";, +, +	private static TimeZone GMT = TimeZone.getTimeZone("GMT");, +, +		SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT, Locale.US);, +		dateFormat.setTimeZone(GMT);, +		setHeaderValue(name, dateFormat.format(new Date(value)));, +		SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT, Locale.US);, +		dateFormat.setTimeZone(GMT);, +		setHeaderValue(name, dateFormat.format(new Date(value)));, +++ b/spring-web/src/test/java/org/springframework/web/context/request/ServletWebRequestHttpMethodsTests.java, +		assertEquals(dateFormat.format(epochTime), servletResponse.getHeader("Last-Modified"));, +		assertEquals(dateFormat.format(currentDate.getTime()), servletResponse.getHeader("Last-Modified"));, +		assertEquals(dateFormat.format(currentDate.getTime()), servletResponse.getHeader("Last-Modified"));, +		assertEquals(dateFormat.format(currentEpoch), servletResponse.getHeader("Last-Modified"));, +		assertEquals(dateFormat.format(epochTime), servletResponse.getHeader("Last-Modified"));, +		assertEquals(dateFormat.format(epochTime), servletResponse.getHeader("Last-Modified"));, +		assertEquals(dateFormat.format(epochTime), servletResponse.getHeader("Last-Modified"));, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/DispatcherServletTests.java, +		assertEquals("Wed, 01 Apr 2015 00:00:00 GMT", response.getHeader("Last-Modified"));, +		assertEquals("Wed, 01 Apr 2015 00:00:01 GMT", response.getHeader("Last-Modified"));, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.java, +	private SimpleDateFormat dateFormat;, +, +		dateFormat = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z", Locale.US);, +		dateFormat.setTimeZone(TimeZone.getTimeZone("GMT"));, +, +		assertEquals(this.response.getHeader("Last-Modified"), resourceLastModifiedDate("test/foo.css"));, +		assertEquals(this.response.getHeader("Last-Modified"), resourceLastModifiedDate("test/foo.css"));, +		assertTrue(dateHeaderAsLong("Expires") >= System.currentTimeMillis() - 1000 + (3600 * 1000));, +		assertEquals(this.response.getHeader("Last-Modified"), resourceLastModifiedDate("test/foo.css"));]