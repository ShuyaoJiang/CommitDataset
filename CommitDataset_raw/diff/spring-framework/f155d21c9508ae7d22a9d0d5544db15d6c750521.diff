[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/DisposableBean.java, + * Copyright 2002-2018 the original author or authors., + * Interface to be implemented by beans that want to release resources on destruction., + * A {@link BeanFactory} will invoke the destroy method on individual destruction of a, + * scoped bean. An {@link org.springframework.context.ApplicationContext} is supposed, + * to dispose all of its singletons on shutdown, driven by the application lifecycle., + * <p>A Spring-managed bean may also implement Java's {@link AutoCloseable} interface, + * for the same purpose. An alternative to implementing an interface is specifying a, + * custom destroy method, for example in an XML bean definition. For a list of all, + * bean lifecycle methods, see the {@link BeanFactory BeanFactory javadocs}., + * @see InitializingBean, + * @see org.springframework.beans.factory.support.RootBeanDefinition#getDestroyMethodName(), + * @see org.springframework.beans.factory.config.ConfigurableBeanFactory#destroySingletons(), + * @see org.springframework.context.ConfigurableApplicationContext#close(), +	 * Invoked by the containing {@code BeanFactory} on destruction of a bean., +	 * @throws Exception in case of shutdown errors. Exceptions will get logged, +	 * but not rethrown to allow other beans to release their resources as well., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/DisposableBean.java, + * Copyright 2002-2018 the original author or authors., + * Interface to be implemented by beans that want to release resources on destruction., + * A {@link BeanFactory} will invoke the destroy method on individual destruction of a, + * scoped bean. An {@link org.springframework.context.ApplicationContext} is supposed, + * to dispose all of its singletons on shutdown, driven by the application lifecycle., + * <p>A Spring-managed bean may also implement Java's {@link AutoCloseable} interface, + * for the same purpose. An alternative to implementing an interface is specifying a, + * custom destroy method, for example in an XML bean definition. For a list of all, + * bean lifecycle methods, see the {@link BeanFactory BeanFactory javadocs}., + * @see InitializingBean, + * @see org.springframework.beans.factory.support.RootBeanDefinition#getDestroyMethodName(), + * @see org.springframework.beans.factory.config.ConfigurableBeanFactory#destroySingletons(), + * @see org.springframework.context.ConfigurableApplicationContext#close(), +	 * Invoked by the containing {@code BeanFactory} on destruction of a bean., +	 * @throws Exception in case of shutdown errors. Exceptions will get logged, +	 * but not rethrown to allow other beans to release their resources as well., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/InitializingBean.java, + * Copyright 2002-2018 the original author or authors., + * Interface to be implemented by beans that need to react once all their properties, + * have been set by a {@link BeanFactory}: e.g. to perform custom initialization,, + * or merely to check that all mandatory properties have been set., + * <p>An alternative to implementing {@code InitializingBean} is specifying a custom, + * init method, for example in an XML bean definition. For a list of all bean, + * lifecycle methods, see the {@link BeanFactory BeanFactory javadocs}., + * @author Juergen Hoeller, + * @see DisposableBean, + * @see org.springframework.beans.factory.config.BeanDefinition#getPropertyValues(), + * @see org.springframework.beans.factory.support.AbstractBeanDefinition#getInitMethodName(), +	 * Invoked by the containing {@code BeanFactory} after it has set all bean properties, +	 * and satisfied {@link BeanFactoryAware}, {@code ApplicationContextAware} etc., +	 * <p>This method allows the bean instance to perform validation of its overall, +	 * configuration and final initialization when all bean properties have been set., +	 * @throws Exception in the event of misconfiguration (such as failure to set an, +	 * essential property) or if initialization fails for any other reason, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/DisposableBean.java, + * Copyright 2002-2018 the original author or authors., + * Interface to be implemented by beans that want to release resources on destruction., + * A {@link BeanFactory} will invoke the destroy method on individual destruction of a, + * scoped bean. An {@link org.springframework.context.ApplicationContext} is supposed, + * to dispose all of its singletons on shutdown, driven by the application lifecycle., + * <p>A Spring-managed bean may also implement Java's {@link AutoCloseable} interface, + * for the same purpose. An alternative to implementing an interface is specifying a, + * custom destroy method, for example in an XML bean definition. For a list of all, + * bean lifecycle methods, see the {@link BeanFactory BeanFactory javadocs}., + * @see InitializingBean, + * @see org.springframework.beans.factory.support.RootBeanDefinition#getDestroyMethodName(), + * @see org.springframework.beans.factory.config.ConfigurableBeanFactory#destroySingletons(), + * @see org.springframework.context.ConfigurableApplicationContext#close(), +	 * Invoked by the containing {@code BeanFactory} on destruction of a bean., +	 * @throws Exception in case of shutdown errors. Exceptions will get logged, +	 * but not rethrown to allow other beans to release their resources as well., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/InitializingBean.java, + * Copyright 2002-2018 the original author or authors., + * Interface to be implemented by beans that need to react once all their properties, + * have been set by a {@link BeanFactory}: e.g. to perform custom initialization,, + * or merely to check that all mandatory properties have been set., + * <p>An alternative to implementing {@code InitializingBean} is specifying a custom, + * init method, for example in an XML bean definition. For a list of all bean, + * lifecycle methods, see the {@link BeanFactory BeanFactory javadocs}., + * @author Juergen Hoeller, + * @see DisposableBean, + * @see org.springframework.beans.factory.config.BeanDefinition#getPropertyValues(), + * @see org.springframework.beans.factory.support.AbstractBeanDefinition#getInitMethodName(), +	 * Invoked by the containing {@code BeanFactory} after it has set all bean properties, +	 * and satisfied {@link BeanFactoryAware}, {@code ApplicationContextAware} etc., +	 * <p>This method allows the bean instance to perform validation of its overall, +	 * configuration and final initialization when all bean properties have been set., +	 * @throws Exception in the event of misconfiguration (such as failure to set an, +	 * essential property) or if initialization fails for any other reason, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DestructionAwareBeanPostProcessor.java, + * Copyright 2002-2018 the original author or authors., +	 * Apply this BeanPostProcessor to the given bean instance before its, +	 * destruction, e.g. invoking custom destruction callbacks., +	 * <p>Like DisposableBean's {@code destroy} and a custom destroy method, this, +	 * callback will only apply to beans which the container fully manages the, +	 * lifecycle for. This is usually the case for singletons and scoped beans., +	 * @see org.springframework.beans.factory.DisposableBean#destroy(), +	 * @see org.springframework.beans.factory.support.AbstractBeanDefinition#setDestroyMethodName(String), +	 * <p>The default implementation returns {@code true}. If a pre-5 implementation, +	 * of {@code DestructionAwareBeanPostProcessor} does not provide a concrete, +	 * implementation of this method, Spring silently assumes {@code true} as well.]