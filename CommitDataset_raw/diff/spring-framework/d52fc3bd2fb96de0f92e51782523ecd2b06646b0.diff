[+++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/ResponseStatus.java, + * Copyright 2002-2012 the original author or authors., +	 * message for the status code. Note that due to the use of {@code HttpServletResponse.sendError(int, String)},, +	 * the response will be considered complete and should not be written to any further., +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/ResponseStatus.java, + * Copyright 2002-2012 the original author or authors., +	 * message for the status code. Note that due to the use of {@code HttpServletResponse.sendError(int, String)},, +	 * the response will be considered complete and should not be written to any further., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethod.java, +		else if (StringUtils.hasText(this.responseReason)) {, +			mavContainer.setRequestHandled(true);, +			return;, +		}, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/ResponseStatus.java, + * Copyright 2002-2012 the original author or authors., +	 * message for the status code. Note that due to the use of {@code HttpServletResponse.sendError(int, String)},, +	 * the response will be considered complete and should not be written to any further., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethod.java, +		else if (StringUtils.hasText(this.responseReason)) {, +			mavContainer.setRequestHandled(true);, +			return;, +		}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethodTests.java, +	public void invokeAndHandle_VoidWithResponseStatus() throws Exception {, +	public void invokeAndHandle_VoidWithHttpServletResponseArgument() throws Exception {, +	public void invokeAndHandle_VoidRequestNotModified() throws Exception {, +	// SPR-9159, +, +	@Test, +	public void invokeAndHandle_NotVoidWithResponseStatusAndReason() throws Exception {, +		ServletInvocableHandlerMethod handlerMethod = getHandlerMethod("responseStatusWithReason");, +		handlerMethod.invokeAndHandle(webRequest, mavContainer);, +, +		assertTrue("When a phrase is used, the response should not be used any more", mavContainer.isRequestHandled());, +		assertEquals(HttpStatus.BAD_REQUEST.value(), response.getStatus());, +		assertEquals("400 Bad Request", response.getErrorMessage());, +	}, +, +	public void invokeAndHandle_Exception() throws Exception {, +	public void invokeAndHandle_DynamicReturnValue() throws Exception {, +		@ResponseStatus(value = HttpStatus.BAD_REQUEST), +		@ResponseStatus(value = HttpStatus.BAD_REQUEST, reason = "400 Bad Request"), +		public String responseStatusWithReason() {, +			return "foo";, +		}, +, +++ b/spring-web/src/main/java/org/springframework/web/bind/annotation/ResponseStatus.java, + * Copyright 2002-2012 the original author or authors., +	 * message for the status code. Note that due to the use of {@code HttpServletResponse.sendError(int, String)},, +	 * the response will be considered complete and should not be written to any further., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethod.java, +		else if (StringUtils.hasText(this.responseReason)) {, +			mavContainer.setRequestHandled(true);, +			return;, +		}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethodTests.java, +	public void invokeAndHandle_VoidWithResponseStatus() throws Exception {, +	public void invokeAndHandle_VoidWithHttpServletResponseArgument() throws Exception {, +	public void invokeAndHandle_VoidRequestNotModified() throws Exception {, +	// SPR-9159, +, +	@Test, +	public void invokeAndHandle_NotVoidWithResponseStatusAndReason() throws Exception {, +		ServletInvocableHandlerMethod handlerMethod = getHandlerMethod("responseStatusWithReason");, +		handlerMethod.invokeAndHandle(webRequest, mavContainer);, +, +		assertTrue("When a phrase is used, the response should not be used any more", mavContainer.isRequestHandled());, +		assertEquals(HttpStatus.BAD_REQUEST.value(), response.getStatus());, +		assertEquals("400 Bad Request", response.getErrorMessage());, +	}, +, +	public void invokeAndHandle_Exception() throws Exception {, +	public void invokeAndHandle_DynamicReturnValue() throws Exception {, +		@ResponseStatus(value = HttpStatus.BAD_REQUEST), +		@ResponseStatus(value = HttpStatus.BAD_REQUEST, reason = "400 Bad Request"), +		public String responseStatusWithReason() {, +			return "foo";, +		}, +, +++ b/src/dist/changelog.txt, +* add HttpMessageConverter and View types compatible with Jackson 2.0, +* Prevent further writing to the response when @ResponseStatus contains a reason]