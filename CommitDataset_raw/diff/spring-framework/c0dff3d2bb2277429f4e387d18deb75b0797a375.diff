[+++ b/spring-web-reactive/src/main/java/org/springframework/core/convert/support/ReactiveStreamsToCompletableFutureConverter.java, +		Set<GenericConverter.ConvertiblePair> pairs = new LinkedHashSet<>();, +		pairs.add(new GenericConverter.ConvertiblePair(Publisher.class, CompletableFuture.class));, +		pairs.add(new GenericConverter.ConvertiblePair(CompletableFuture.class, Publisher.class));, +		return pairs;, +		if (source == null) {, +			return null;, +		else if (CompletableFuture.class.isAssignableFrom(source.getClass())) {, +			return reactor.core.publisher.convert.CompletableFutureConverter.from((CompletableFuture) source);, +		}, +		else if (CompletableFuture.class.isAssignableFrom(targetType.getResolvableType().getRawClass())) {, +			return reactor.core.publisher.convert.CompletableFutureConverter.fromSingle((Publisher) source);, +++ b/spring-web-reactive/src/main/java/org/springframework/core/convert/support/ReactiveStreamsToCompletableFutureConverter.java, +		Set<GenericConverter.ConvertiblePair> pairs = new LinkedHashSet<>();, +		pairs.add(new GenericConverter.ConvertiblePair(Publisher.class, CompletableFuture.class));, +		pairs.add(new GenericConverter.ConvertiblePair(CompletableFuture.class, Publisher.class));, +		return pairs;, +		if (source == null) {, +			return null;, +		else if (CompletableFuture.class.isAssignableFrom(source.getClass())) {, +			return reactor.core.publisher.convert.CompletableFutureConverter.from((CompletableFuture) source);, +		}, +		else if (CompletableFuture.class.isAssignableFrom(targetType.getResolvableType().getRawClass())) {, +			return reactor.core.publisher.convert.CompletableFutureConverter.fromSingle((Publisher) source);, +++ b/spring-web-reactive/src/main/java/org/springframework/core/convert/support/ReactiveStreamsToReactorConverter.java, +		Set<GenericConverter.ConvertiblePair> pairs = new LinkedHashSet<>();, +		pairs.add(new GenericConverter.ConvertiblePair(Publisher.class, Stream.class));, +		pairs.add(new GenericConverter.ConvertiblePair(Stream.class, Publisher.class));, +		pairs.add(new GenericConverter.ConvertiblePair(Publisher.class, Promise.class));, +		pairs.add(new GenericConverter.ConvertiblePair(Promise.class, Publisher.class));, +		return pairs;, +		if (source == null) {, +			return null;, +		}, +		else if (Stream.class.isAssignableFrom(targetType.getResolvableType().getRawClass())) {, +			return Streams.wrap((Publisher)source);, +		}, +		else if (Promise.class.isAssignableFrom(source.getClass())) {, +			return source;, +		}, +		else if (Promise.class.isAssignableFrom(targetType.getResolvableType().getRawClass())) {, +			return Streams.wrap((Publisher)source).next();, +++ b/spring-web-reactive/src/main/java/org/springframework/core/convert/support/ReactiveStreamsToCompletableFutureConverter.java, +		Set<GenericConverter.ConvertiblePair> pairs = new LinkedHashSet<>();, +		pairs.add(new GenericConverter.ConvertiblePair(Publisher.class, CompletableFuture.class));, +		pairs.add(new GenericConverter.ConvertiblePair(CompletableFuture.class, Publisher.class));, +		return pairs;, +		if (source == null) {, +			return null;, +		else if (CompletableFuture.class.isAssignableFrom(source.getClass())) {, +			return reactor.core.publisher.convert.CompletableFutureConverter.from((CompletableFuture) source);, +		}, +		else if (CompletableFuture.class.isAssignableFrom(targetType.getResolvableType().getRawClass())) {, +			return reactor.core.publisher.convert.CompletableFutureConverter.fromSingle((Publisher) source);, +++ b/spring-web-reactive/src/main/java/org/springframework/core/convert/support/ReactiveStreamsToReactorConverter.java, +		Set<GenericConverter.ConvertiblePair> pairs = new LinkedHashSet<>();, +		pairs.add(new GenericConverter.ConvertiblePair(Publisher.class, Stream.class));, +		pairs.add(new GenericConverter.ConvertiblePair(Stream.class, Publisher.class));, +		pairs.add(new GenericConverter.ConvertiblePair(Publisher.class, Promise.class));, +		pairs.add(new GenericConverter.ConvertiblePair(Promise.class, Publisher.class));, +		return pairs;, +		if (source == null) {, +			return null;, +		}, +		else if (Stream.class.isAssignableFrom(targetType.getResolvableType().getRawClass())) {, +			return Streams.wrap((Publisher)source);, +		}, +		else if (Promise.class.isAssignableFrom(source.getClass())) {, +			return source;, +		}, +		else if (Promise.class.isAssignableFrom(targetType.getResolvableType().getRawClass())) {, +			return Streams.wrap((Publisher)source).next();, +++ b/spring-web-reactive/src/main/java/org/springframework/core/convert/support/ReactiveStreamsToRxJava1Converter.java, +		Set<GenericConverter.ConvertiblePair> pairs = new LinkedHashSet<>();, +		pairs.add(new GenericConverter.ConvertiblePair(Publisher.class, Observable.class));, +		pairs.add(new GenericConverter.ConvertiblePair(Observable.class, Publisher.class));, +		pairs.add(new GenericConverter.ConvertiblePair(Publisher.class, Single.class));, +		pairs.add(new GenericConverter.ConvertiblePair(Single.class, Publisher.class));, +		return pairs;, +		if (source == null) {, +			return null;, +		}, +		else if (Single.class.isAssignableFrom(targetType.getResolvableType().getRawClass())) {, +			return reactor.core.publisher.convert.RxJava1SingleConverter.from((Publisher) source);, +++ b/spring-web-reactive/src/main/java/org/springframework/core/convert/support/ReactiveStreamsToCompletableFutureConverter.java, +		Set<GenericConverter.ConvertiblePair> pairs = new LinkedHashSet<>();, +		pairs.add(new GenericConverter.ConvertiblePair(Publisher.class, CompletableFuture.class));, +		pairs.add(new GenericConverter.ConvertiblePair(CompletableFuture.class, Publisher.class));, +		return pairs;, +		if (source == null) {, +			return null;, +		else if (CompletableFuture.class.isAssignableFrom(source.getClass())) {, +			return reactor.core.publisher.convert.CompletableFutureConverter.from((CompletableFuture) source);, +		}, +		else if (CompletableFuture.class.isAssignableFrom(targetType.getResolvableType().getRawClass())) {, +			return reactor.core.publisher.convert.CompletableFutureConverter.fromSingle((Publisher) source);, +++ b/spring-web-reactive/src/main/java/org/springframework/core/convert/support/ReactiveStreamsToReactorConverter.java, +		Set<GenericConverter.ConvertiblePair> pairs = new LinkedHashSet<>();, +		pairs.add(new GenericConverter.ConvertiblePair(Publisher.class, Stream.class));, +		pairs.add(new GenericConverter.ConvertiblePair(Stream.class, Publisher.class));]