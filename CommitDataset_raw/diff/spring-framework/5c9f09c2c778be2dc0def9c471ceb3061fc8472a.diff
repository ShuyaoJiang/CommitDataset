[+++ b/spring-jms/src/main/java/org/springframework/jms/config/JmsListenerEndpointRegistrar.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +	private boolean startImmediately;, +, +	private Object mutex = endpointDescriptors;, +, +		if (beanFactory instanceof ConfigurableBeanFactory) {, +			ConfigurableBeanFactory cbf = (ConfigurableBeanFactory) beanFactory;, +			this.mutex = cbf.getSingletonMutex();, +		}, +		synchronized (this.mutex) {, +				this.endpointRegistry.registerListenerContainer(, +						descriptor.endpoint, resolveContainerFactory(descriptor));, +			}, +			startImmediately = true;  // trigger immediate startup, +		JmsListenerEndpointDescriptor descriptor = new JmsListenerEndpointDescriptor(endpoint, factory);, +		synchronized (this.mutex) {, +			if (startImmediately) { // Register and start immediately, +				this.endpointRegistry.registerListenerContainer(descriptor.endpoint,, +						resolveContainerFactory(descriptor), true);, +			}, +			else {, +				this.endpointDescriptors.add(descriptor);, +			}, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/config/JmsListenerEndpointRegistrar.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +	private boolean startImmediately;, +, +	private Object mutex = endpointDescriptors;, +, +		if (beanFactory instanceof ConfigurableBeanFactory) {, +			ConfigurableBeanFactory cbf = (ConfigurableBeanFactory) beanFactory;, +			this.mutex = cbf.getSingletonMutex();, +		}, +		synchronized (this.mutex) {, +				this.endpointRegistry.registerListenerContainer(, +						descriptor.endpoint, resolveContainerFactory(descriptor));, +			}, +			startImmediately = true;  // trigger immediate startup, +		JmsListenerEndpointDescriptor descriptor = new JmsListenerEndpointDescriptor(endpoint, factory);, +		synchronized (this.mutex) {, +			if (startImmediately) { // Register and start immediately, +				this.endpointRegistry.registerListenerContainer(descriptor.endpoint,, +						resolveContainerFactory(descriptor), true);, +			}, +			else {, +				this.endpointDescriptors.add(descriptor);, +			}, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/config/JmsListenerEndpointRegistry.java, + * Copyright 2002-2015 the original author or authors., +import java.util.concurrent.ConcurrentHashMap;, +			new ConcurrentHashMap<String, MessageListenerContainer>();, +	 * <p>The {@code startImmediately} flag determines if the container should be, +	 * started immediately., +	 * @param factory the listener factory to use, +	 * @param startImmediately start the container immediately if necessary, +	public void registerListenerContainer(JmsListenerEndpoint endpoint, JmsListenerContainerFactory<?> factory,, +			boolean startImmediately) {, +, +		synchronized (this.listenerContainers) {, +			if (startImmediately) {, +				startIfNecessary(container);, +			}, +		}, +	}, +, +	/**, +	 * Create a message listener container for the given {@link JmsListenerEndpoint}., +	 * <p>This create the necessary infrastructure to honor that endpoint, +	 * with regards to its configuration., +	 * @param endpoint the endpoint to add, +	 * @param factory the listener factory to use, +	 * @see #registerListenerContainer(JmsListenerEndpoint, JmsListenerContainerFactory, boolean), +	 */, +	public void registerListenerContainer(JmsListenerEndpoint endpoint, JmsListenerContainerFactory<?> factory) {, +		registerListenerContainer(endpoint, factory, false);, +			startIfNecessary(listenerContainer);, +	/**, +	 * Start the specified {@link MessageListenerContainer} if it should be started, +	 * on startup., +	 * @see MessageListenerContainer#isAutoStartup(), +	 */, +	private static void startIfNecessary(MessageListenerContainer listenerContainer) {, +		if (listenerContainer.isAutoStartup()) {, +			listenerContainer.start();, +		}, +	}, +, +++ b/spring-jms/src/main/java/org/springframework/jms/config/JmsListenerEndpointRegistrar.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +	private boolean startImmediately;, +, +	private Object mutex = endpointDescriptors;, +, +		if (beanFactory instanceof ConfigurableBeanFactory) {]