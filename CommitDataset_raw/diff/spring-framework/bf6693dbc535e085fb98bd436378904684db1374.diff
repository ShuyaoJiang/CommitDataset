[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestKey.java, +import org.springframework.web.servlet.mvc.method.condition.RequestCondition;, +import org.springframework.web.servlet.mvc.method.condition.RequestConditionFactory;, +	private final RequestCondition paramsCondition;, +	private final RequestCondition headersCondition;, +, +	private final RequestCondition consumesCondition;, +	RequestKey(Collection<String> patterns, Collection<RequestMethod> methods) {, +		this(patterns, methods, null, null, null);, +	}, +, +			   RequestCondition paramsCondition,, +			   RequestCondition headersCondition,, +			   RequestCondition consumesCondition) {, +		this.paramsCondition = paramsCondition != null ? paramsCondition : RequestConditionFactory.trueCondition();, +		this.headersCondition = headersCondition != null ? headersCondition : RequestConditionFactory.trueCondition();, +		this.consumesCondition = consumesCondition != null ? consumesCondition : RequestConditionFactory.trueCondition();, +						RequestConditionFactory.parseHeaders(annotation.headers()),, +						RequestConditionFactory.parseConsumes(annotation.consumes()), +				);, +		return new RequestKey(Collections.singleton(lookupPath), Collections.singleton(method));, +	public RequestCondition getParams() {, +		return paramsCondition;, +	public RequestCondition getHeaders() {, +		return headersCondition;, +	 * Combines this {@code RequestKey} with another. The typical use case for this is combining type, +	 * @param other the method-level RequestKey, +	public RequestKey combine(RequestKey other, PathMatcher pathMatcher) {, +		Set<String> patterns = combinePatterns(this.patterns, other.patterns, pathMatcher);, +		Set<RequestMethod> methods = union(this.methods, other.methods);, +		RequestCondition params = RequestConditionFactory.and(this.paramsCondition, other.paramsCondition);, +		RequestCondition headers = RequestConditionFactory.and(this.headersCondition, other.headersCondition);, +		return new RequestKey(patterns, methods, params, headers, null);, +				return new RequestKey(matchingPatterns, matchingMethods, this.paramsCondition, this.headersCondition, null);, +		return paramsCondition.match(request);, +		return headersCondition.match(request);, +					this.paramsCondition.equals(other.paramsCondition) &&, +					this.headersCondition.equals(other.headersCondition));, +			result = 31 * result + paramsCondition.hashCode();, +			result = 31 * result + headersCondition.hashCode();, +		builder.append(",params=").append(paramsCondition.toString());, +		builder.append(",headers=").append(headersCondition.toString());, +		builder.append(",consumes=").append(consumesCondition.toString());, +++ /dev/null, +++ /dev/null, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestKey.java, +import org.springframework.web.servlet.mvc.method.condition.RequestCondition;, +import org.springframework.web.servlet.mvc.method.condition.RequestConditionFactory;, +	private final RequestCondition paramsCondition;, +	private final RequestCondition headersCondition;, +, +	private final RequestCondition consumesCondition;, +	RequestKey(Collection<String> patterns, Collection<RequestMethod> methods) {, +		this(patterns, methods, null, null, null);, +	}, +, +			   RequestCondition paramsCondition,, +			   RequestCondition headersCondition,, +			   RequestCondition consumesCondition) {, +		this.paramsCondition = paramsCondition != null ? paramsCondition : RequestConditionFactory.trueCondition();, +		this.headersCondition = headersCondition != null ? headersCondition : RequestConditionFactory.trueCondition();, +		this.consumesCondition = consumesCondition != null ? consumesCondition : RequestConditionFactory.trueCondition();, +						RequestConditionFactory.parseHeaders(annotation.headers()),, +						RequestConditionFactory.parseConsumes(annotation.consumes()), +				);, +		return new RequestKey(Collections.singleton(lookupPath), Collections.singleton(method));, +	public RequestCondition getParams() {, +		return paramsCondition;, +	public RequestCondition getHeaders() {, +		return headersCondition;, +	 * Combines this {@code RequestKey} with another. The typical use case for this is combining type, +	 * @param other the method-level RequestKey, +	public RequestKey combine(RequestKey other, PathMatcher pathMatcher) {, +		Set<String> patterns = combinePatterns(this.patterns, other.patterns, pathMatcher);, +		Set<RequestMethod> methods = union(this.methods, other.methods);, +		RequestCondition params = RequestConditionFactory.and(this.paramsCondition, other.paramsCondition);, +		RequestCondition headers = RequestConditionFactory.and(this.headersCondition, other.headersCondition);, +		return new RequestKey(patterns, methods, params, headers, null);, +				return new RequestKey(matchingPatterns, matchingMethods, this.paramsCondition, this.headersCondition, null);, +		return paramsCondition.match(request);, +		return headersCondition.match(request);, +					this.paramsCondition.equals(other.paramsCondition) &&, +					this.headersCondition.equals(other.headersCondition));, +			result = 31 * result + paramsCondition.hashCode();, +			result = 31 * result + headersCondition.hashCode();, +		builder.append(",params=").append(paramsCondition.toString());, +		builder.append(",headers=").append(headersCondition.toString());, +		builder.append(",consumes=").append(consumesCondition.toString());, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMethodMapping.java, +			result = otherKey.getParams().weight() - key.getParams().weight();, +			result = otherKey.getHeaders().weight() - key.getHeaders().weight();, +++ /dev/null, +++ /dev/null, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestKey.java, +import org.springframework.web.servlet.mvc.method.condition.RequestCondition;]