[+++ b/src/docs/asciidoc/core/core-beans.adoc, +=== `PropertySource` Abstraction, +++ b/src/docs/asciidoc/core/core-beans.adoc, +=== `PropertySource` Abstraction, +++ b/src/docs/asciidoc/testing-webtestclient.adoc, +`WebTestClient` binds to a WebFlux application by using a, +TIP: Kotlin users: See <<languages.adoc#kotlin-webtestclient-issue,this section>>, +=== Bind to Controller, +The following example shows how to create a server setup to test one `@Controller` at a time:, +====, +====, +The preceding example loads the <<web-reactive.adoc#webflux-config,WebFlux Java configuration>> and, +registers the given controller. The resulting WebFlux application is tested, +without an HTTP server by using mock request and response objects. There are more methods, +on the builder to customize the default WebFlux Java configuration., +The folloiwng example shows how to set up a server from a, +====, +====, +Internally, the configuration is passed to `RouterFunctions.toWebHandler`., +The resulting WebFlux application is tested without an HTTP server by using mock, +=== Bind to `ApplicationContext`, +The following example shows how to setup a server from the Spring configuration of your application or, +====, +====, +Internally, the configuration is passed to `WebHttpHandlerBuilder` to set up, +the request processing chain. See, +resulting WebFlux application is tested without an HTTP server by using mock request, +=== Bind to Server, +The following server setup option lets you connect to a running server:, +====, +====, +, +=== Client Builder, +In addition to the server setup options described earlier, you can also configure client, +options, including base URL, default headers, client filters, and others. These options, +`configureClient()` to transition from server to client configuration, as follows:, +====, +====, +== Writing Tests, +It provides an identical API up to the point of performing a request by using `exchange()`., +Typically, you start by asserting the response status and headers, as follows:, +====, +====, +* `expectBody(Class<T>)`: Decode to single object., +* `expectBodyList(Class<T>)`: Decode and collect objects to `List<T>`., +* `expectBody()`: Decode to `byte[]` for <<webtestclient-json>> or an empty body., +Then you can use built-in assertions for the body. The following example shows one way to do so:, +====, +====, +You can also go beyond the built-in assertions and create your own, as the following example shows:, +====, +====, +You can also exit the workflow and get a result, as follows:, +====, +====, +TIP: When you need to decode to a target type with generics, look for the overloaded methods, +{api-spring-framework}/core/ParameterizedTypeReference.html[`ParameterizedTypeReference`], +, +=== No Content, +If the response has no content (or you do not care if it does) use `Void.class`, which ensures, +that resources are released. The following example shows how to do so:, +====, +====, +Alternatively, if you want to assert there is no response content, you can use code similar to the following:, +====, +====, +=== JSON Content, +When you use `expectBody()`, the response is consumed as a `byte[]`. This is useful for, +raw content assertions. For example, you can use, +http://jsonassert.skyscreamer.org[JSONAssert] to verify JSON content, as follows:, +====, +====, +You can also use https://github.com/jayway/JsonPath[JSONPath] expressions, as follows:, +====, +====, +, +=== Streaming Responses, +To test infinite streams (for example, `"text/event-stream"` or `"application/stream+json"`),, +you need to exit the chained API (by using `returnResult`), immediately after the response status, +and header assertions, as the following example shows:, +====, +====, +cancel at some point when test objectives are met. We recommend using the `StepVerifier`, +from the `reactor-test` module to do that, as the following example shows:, +====, +====, +, +=== Request Body, +When it comes to building requests, the `WebTestClient` offers an API  identical to the, +`WebClient`, and the implementation is mostly a simple pass-through. See, +the <<web-reactive.adoc#webflux-client-body,WebClient documentation>> for examples on, +how to prepare a request with a body, including submitting form data, multipart requests,, +++ b/src/docs/asciidoc/core/core-beans.adoc, +=== `PropertySource` Abstraction, +++ b/src/docs/asciidoc/testing-webtestclient.adoc, +`WebTestClient` binds to a WebFlux application by using a, +TIP: Kotlin users: See <<languages.adoc#kotlin-webtestclient-issue,this section>>, +=== Bind to Controller, +The following example shows how to create a server setup to test one `@Controller` at a time:, +====]