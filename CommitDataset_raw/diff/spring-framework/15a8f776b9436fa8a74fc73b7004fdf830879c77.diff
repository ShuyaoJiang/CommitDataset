[+++ b/org.springframework.context/src/main/java/org/springframework/stereotype/Repository.java, + * Copyright 2002-2011 the original author or authors., + * Indicates that an annotated class is a "Repository", originally defined by, + * Domain-Driven Design (Evans, 2003) as "a mechanism for encapsulating storage,, + * retrieval, and search behavior which emulates a collection of objects"., + *, + * <p>Teams implementing traditional J2EE patterns such as "Data Access Object", + * may also apply this stereotype to DAO classes, though care should be taken to, + * understand the distinction between Data Access Object and DDD-style repositories, + * before doing so. This annotation is a general-purpose stereotype and individual teams, + * may narrow their semantics and use as appropriate., + * {@link org.springframework.dao.DataAccessException DataAccessException} translation, + * when used in conjunction with a {@link, + * org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor, + * PersistenceExceptionTranslationPostProcessor}. The annotated class is also clarified as, + * to its role in the overall application architecture for the purpose of tooling,, + * aspects, etc., + * <p>As of Spring 2.5, this annotation also serves as a specialization of, + * {@link Component @Component}, allowing for implementation classes to be autodetected, + * through classpath scanning., + * @see Service, + * @see org.springframework.dao.DataAccessException, + * @see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor, +++ b/org.springframework.context/src/main/java/org/springframework/stereotype/Repository.java, + * Copyright 2002-2011 the original author or authors., + * Indicates that an annotated class is a "Repository", originally defined by, + * Domain-Driven Design (Evans, 2003) as "a mechanism for encapsulating storage,, + * retrieval, and search behavior which emulates a collection of objects"., + *, + * <p>Teams implementing traditional J2EE patterns such as "Data Access Object", + * may also apply this stereotype to DAO classes, though care should be taken to, + * understand the distinction between Data Access Object and DDD-style repositories, + * before doing so. This annotation is a general-purpose stereotype and individual teams, + * may narrow their semantics and use as appropriate., + * {@link org.springframework.dao.DataAccessException DataAccessException} translation, + * when used in conjunction with a {@link, + * org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor, + * PersistenceExceptionTranslationPostProcessor}. The annotated class is also clarified as, + * to its role in the overall application architecture for the purpose of tooling,, + * aspects, etc., + * <p>As of Spring 2.5, this annotation also serves as a specialization of, + * {@link Component @Component}, allowing for implementation classes to be autodetected, + * through classpath scanning., + * @see Service, + * @see org.springframework.dao.DataAccessException, + * @see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor, +++ b/org.springframework.context/src/main/java/org/springframework/stereotype/Service.java, + * Copyright 2002-2011 the original author or authors., + * Indicates that an annotated class is a "Service", originally defined by Domain-Driven, + * Design (Evans, 2003) as "an operation offered as an interface that stands alone in the, + * model, with no encapsulated state.", + *, + * <p>May also indicate that a class is a "Business Service Facade" (in the Core J2EE, + * patterns sense), or something similar. This annotation is a general-purpose stereotype, + * and individual teams may narrow their semantics and use as appropriate., + * @see Repository, +++ b/org.springframework.context/src/main/java/org/springframework/stereotype/Repository.java, + * Copyright 2002-2011 the original author or authors., + * Indicates that an annotated class is a "Repository", originally defined by, + * Domain-Driven Design (Evans, 2003) as "a mechanism for encapsulating storage,, + * retrieval, and search behavior which emulates a collection of objects"., + *, + * <p>Teams implementing traditional J2EE patterns such as "Data Access Object", + * may also apply this stereotype to DAO classes, though care should be taken to, + * understand the distinction between Data Access Object and DDD-style repositories, + * before doing so. This annotation is a general-purpose stereotype and individual teams, + * may narrow their semantics and use as appropriate., + * {@link org.springframework.dao.DataAccessException DataAccessException} translation, + * when used in conjunction with a {@link, + * org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor, + * PersistenceExceptionTranslationPostProcessor}. The annotated class is also clarified as, + * to its role in the overall application architecture for the purpose of tooling,, + * aspects, etc., + * <p>As of Spring 2.5, this annotation also serves as a specialization of, + * {@link Component @Component}, allowing for implementation classes to be autodetected, + * through classpath scanning., + * @see Service, + * @see org.springframework.dao.DataAccessException, + * @see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor, +++ b/org.springframework.context/src/main/java/org/springframework/stereotype/Service.java, + * Copyright 2002-2011 the original author or authors., + * Indicates that an annotated class is a "Service", originally defined by Domain-Driven, + * Design (Evans, 2003) as "an operation offered as an interface that stands alone in the, + * model, with no encapsulated state.", + *, + * <p>May also indicate that a class is a "Business Service Facade" (in the Core J2EE, + * patterns sense), or something similar. This annotation is a general-purpose stereotype, + * and individual teams may narrow their semantics and use as appropriate., + * @see Repository, +++ b/org.springframework.transaction/src/main/java/org/springframework/dao/annotation/PersistenceExceptionTranslationPostProcessor.java, + * Copyright 2002-2011 the original author or authors., + * Bean post-processor that automatically applies persistence exception translation to any, + * bean marked with Spring's @{@link org.springframework.stereotype.Repository Repository}, + * annotation, adding a corresponding {@link PersistenceExceptionTranslationAdvisor} to, + * the exposed proxy (either an existing AOP proxy or a newly generated proxy that, + * implements all of the target's interfaces)., + * {@link org.springframework.dao.DataAccessException DataAccessException} hierarchy., + * {@link org.springframework.dao.support.PersistenceExceptionTranslator, + * PersistenceExceptionTranslator} interface, which are subsequently asked to translate, + * candidate exceptions.]