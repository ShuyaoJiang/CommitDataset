[+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/spr/RequestContextHolderTests.java, +import java.io.IOException;, +, +import javax.servlet.FilterChain;, +import javax.servlet.ServletException;, +import javax.servlet.ServletRequest;, +import javax.servlet.ServletResponse;, +import org.springframework.web.context.request.ServletRequestAttributes;, +import org.springframework.web.filter.GenericFilterBean;, + * Tests for SPR-10025 (access to request attributes via RequestContextHolder), + * and SPR-13211 (re-use of mock request from the TestContext framework)., +	private static final String FROM_TCF_MOCK = "fromTestContextFrameworkMock";, +	private static final String FROM_MVC_TEST_DEFAULT = "fromSpringMvcTestDefault";, +	private static final String FROM_MVC_TEST_MOCK = "fromSpringMvcTestMock";, +	private static final String FROM_FILTER = "fromFilter";, +, +	private static final String ENIGMA = "puzzle";, +	private RequestScopedController requestScopedController;, +, +	@Autowired, +	private RequestScopedService requestScopedService;, +, +	@Autowired, +	private SessionScopedService sessionScopedService;, +		this.mockRequest.setAttribute(FROM_TCF_MOCK, ENIGMA);, +				.addFilter(new AbcFilter()), +				.defaultRequest(get("/").requestAttr(FROM_MVC_TEST_DEFAULT, ENIGMA)), +		this.mockMvc.perform(get("/singletonController").requestAttr(FROM_MVC_TEST_MOCK, ENIGMA));, +		assertTrue("request-scoped controller must be a CGLIB proxy", AopUtils.isCglibProxy(this.requestScopedController));, +		this.mockMvc.perform(get("/requestScopedController").requestAttr(FROM_MVC_TEST_MOCK, ENIGMA));, +	@Test, +	public void requestScopedService() throws Exception {, +		assertTrue("request-scoped service must be a CGLIB proxy", AopUtils.isCglibProxy(this.requestScopedService));, +		this.mockMvc.perform(get("/requestScopedService").requestAttr(FROM_MVC_TEST_MOCK, ENIGMA));, +	}, +, +	@Test, +	public void sessionScopedService() throws Exception {, +		assertTrue("session-scoped service must be a CGLIB proxy", AopUtils.isCglibProxy(this.sessionScopedService));, +		this.mockMvc.perform(get("/sessionScopedService").requestAttr(FROM_MVC_TEST_MOCK, ENIGMA));, +	}, +, +, +	// -------------------------------------------------------------------, +		public SingletonController singletonController() {, +			return new SingletonController();, +		public RequestScopedController requestScopedController() {, +			return new RequestScopedController();, +		@Bean, +		@Scope(name = "request", proxyMode = ScopedProxyMode.TARGET_CLASS), +		public RequestScopedService requestScopedService() {, +			return new RequestScopedService();, +		@Bean, +		public ControllerWithRequestScopedService controllerWithRequestScopedService() {, +			return new ControllerWithRequestScopedService();, +		}, +, +		@Bean, +		@Scope(name = "session", proxyMode = ScopedProxyMode.TARGET_CLASS), +		public SessionScopedService sessionScopedService() {, +			return new SessionScopedService();, +		}, +, +		@Bean, +		public ControllerWithSessionScopedService controllerWithSessionScopedService() {, +			return new ControllerWithSessionScopedService();, +		}, +	}, +	private static class SingletonController {, +		@RequestMapping("/singletonController"), +	private static class RequestScopedController {, +		@RequestMapping("/requestScopedController"), +			assertRequestAttributes(request);, +	private static class RequestScopedService {, +, +		@Autowired, +		private HttpServletRequest request;, +, +, +		void process() {, +			assertRequestAttributes(request);, +		}, +	}, +, +	private static class SessionScopedService {, +, +		@Autowired, +		private HttpServletRequest request;, +, +, +		void process() {, +			assertRequestAttributes(this.request);, +		}, +	}, +, +	@RestController, +	private static class ControllerWithRequestScopedService {, +, +		@Autowired, +		private RequestScopedService service;]