[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +import java.util.HashMap;, +	private final Map<String, Class<?>> importedResources = new LinkedHashMap<String, Class<?>>();, +	public void addMethod(ConfigurationClassMethod method) {, +	public void addImportedResource(String importedResource, Class<?> readerClass) {, +	public Map<String, Class<?>> getImportedResources() {, +		, +		// a @Bean method may only be overloaded through inheritance. No single, +		// @Configuration class may declare two @Bean methods with the same name., +		final char hashDelim = '#';, +		Map<String, Integer> methodNameCounts = new HashMap<String, Integer>();, +		for (ConfigurationClassMethod method : methods) {, +			String dClassName = method.getMetadata().getDeclaringClassName();, +			String methodName = method.getMetadata().getMethodName();, +			String fqMethodName = dClassName + hashDelim + methodName;, +			Integer currentCount = methodNameCounts.get(fqMethodName);, +			int newCount = currentCount != null ? currentCount + 1 : 1;, +			methodNameCounts.put(fqMethodName, newCount);, +		}, +		, +		for (String methodName : methodNameCounts.keySet()) {, +			int count = methodNameCounts.get(methodName);, +				String shortMethodName = methodName.substring(methodName.indexOf(hashDelim)+1);, +				problemReporter.error(new BeanMethodOverloadingProblem(shortMethodName, count));, +	/** Bean methods on configuration classes may only be overloaded through inheritance. */, +	private class BeanMethodOverloadingProblem extends Problem {, +		public BeanMethodOverloadingProblem(String methodName, int count) {, +			super(String.format("@Configuration class '%s' has %s overloaded @Bean methods named '%s'. " +, +					"Only one @Bean method of a given name is allowed within each @Configuration class.",, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +import java.util.HashMap;, +	private final Map<String, Class<?>> importedResources = new LinkedHashMap<String, Class<?>>();, +	public void addMethod(ConfigurationClassMethod method) {, +	public void addImportedResource(String importedResource, Class<?> readerClass) {, +	public Map<String, Class<?>> getImportedResources() {, +		, +		// a @Bean method may only be overloaded through inheritance. No single, +		// @Configuration class may declare two @Bean methods with the same name., +		final char hashDelim = '#';, +		Map<String, Integer> methodNameCounts = new HashMap<String, Integer>();, +		for (ConfigurationClassMethod method : methods) {, +			String dClassName = method.getMetadata().getDeclaringClassName();, +			String methodName = method.getMetadata().getMethodName();, +			String fqMethodName = dClassName + hashDelim + methodName;, +			Integer currentCount = methodNameCounts.get(fqMethodName);, +			int newCount = currentCount != null ? currentCount + 1 : 1;, +			methodNameCounts.put(fqMethodName, newCount);, +		}, +		, +		for (String methodName : methodNameCounts.keySet()) {, +			int count = methodNameCounts.get(methodName);, +				String shortMethodName = methodName.substring(methodName.indexOf(hashDelim)+1);, +				problemReporter.error(new BeanMethodOverloadingProblem(shortMethodName, count));, +	/** Bean methods on configuration classes may only be overloaded through inheritance. */, +	private class BeanMethodOverloadingProblem extends Problem {, +		public BeanMethodOverloadingProblem(String methodName, int count) {, +			super(String.format("@Configuration class '%s' has %s overloaded @Bean methods named '%s'. " +, +					"Only one @Bean method of a given name is allowed within each @Configuration class.",, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +		ConfigurationClass configClass = method.getConfigurationClass();, +	private void loadBeanDefinitionsFromImportedResources(Map<String, Class<?>> importedResources) {, +		Map<Class<?>, BeanDefinitionReader> readerInstanceCache = new HashMap<Class<?>, BeanDefinitionReader>();, +		for (Map.Entry<String, Class<?>> entry : importedResources.entrySet()) {, +			Class<?> readerClass = entry.getValue();, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +import java.util.HashMap;, +	private final Map<String, Class<?>> importedResources = new LinkedHashMap<String, Class<?>>();, +	public void addMethod(ConfigurationClassMethod method) {, +	public void addImportedResource(String importedResource, Class<?> readerClass) {, +	public Map<String, Class<?>> getImportedResources() {, +		, +		// a @Bean method may only be overloaded through inheritance. No single, +		// @Configuration class may declare two @Bean methods with the same name., +		final char hashDelim = '#';, +		Map<String, Integer> methodNameCounts = new HashMap<String, Integer>();, +		for (ConfigurationClassMethod method : methods) {, +			String dClassName = method.getMetadata().getDeclaringClassName();, +			String methodName = method.getMetadata().getMethodName();, +			String fqMethodName = dClassName + hashDelim + methodName;, +			Integer currentCount = methodNameCounts.get(fqMethodName);, +			int newCount = currentCount != null ? currentCount + 1 : 1;, +			methodNameCounts.put(fqMethodName, newCount);, +		}, +		, +		for (String methodName : methodNameCounts.keySet()) {, +			int count = methodNameCounts.get(methodName);, +				String shortMethodName = methodName.substring(methodName.indexOf(hashDelim)+1);, +				problemReporter.error(new BeanMethodOverloadingProblem(shortMethodName, count));, +	/** Bean methods on configuration classes may only be overloaded through inheritance. */, +	private class BeanMethodOverloadingProblem extends Problem {, +		public BeanMethodOverloadingProblem(String methodName, int count) {, +			super(String.format("@Configuration class '%s' has %s overloaded @Bean methods named '%s'. " +, +					"Only one @Bean method of a given name is allowed within each @Configuration class.",, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +		ConfigurationClass configClass = method.getConfigurationClass();, +	private void loadBeanDefinitionsFromImportedResources(Map<String, Class<?>> importedResources) {, +		Map<Class<?>, BeanDefinitionReader> readerInstanceCache = new HashMap<Class<?>, BeanDefinitionReader>();]