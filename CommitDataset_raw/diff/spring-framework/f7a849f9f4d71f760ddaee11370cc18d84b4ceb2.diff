[+++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/AbstractContextLoader.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.core.io.ClassPathResource;, + * implementations of the {@link ContextLoader} SPI. Provides a, + * resource locations., + * , + * <p>As of Spring 3.1, <code>AbstractContextLoader</code> also provides a basis, + * for all concrete implementations of the {@link SmartContextLoader} SPI. For, + * backwards compatibility with the {@code ContextLoader} SPI, , + * {@link #processContextConfiguration()} delegates to, + * {@link #processLocations()}, and {@link #generatesDefaults()} delegates to, + * {@link #isGenerateDefaultLocations()}. , +	private static final Log logger = LogFactory.getLog(AbstractContextLoader.class);, +, +	private static final String[] EMPTY_STRING_ARRAY = new String[] {};, +	 * For backwards compatibility with the {@link ContextLoader} SPI, the, +	 * default implementation simply delegates to, +	 * {@link #isGenerateDefaultLocations()}., +	 * For backwards compatibility with the {@link ContextLoader} SPI, the, +	 * default implementation simply delegates to {@link #processLocations()},, +	 * passing it the {@link ContextConfigurationAttributes#getDeclaringClass(), +	 * declaring class} and {@link ContextConfigurationAttributes#getLocations(), +	 * resource locations} retrieved from the supplied, +	 * {@link ContextConfigurationAttributes configuration attributes}. The, +	 * processed locations are then, +	 * {@link ContextConfigurationAttributes#setLocations(String[]) set} in, +	 * the supplied configuration attributes., +	 * <p>Can be overridden in subclasses &mdash; for example, to process, +	 * configuration classes instead of resource locations., +	 * @see #processLocations(), +	 * <em>empty</em> and {@link #isGenerateDefaultLocations()} returns, +	 * @return a processed array of application context resource locations, +	 * @see #isGenerateDefaultLocations(), +	 * @see #generateDefaultLocations(), +	 * @see #modifyLocations(), +	 * @see org.springframework.test.context.ContextLoader#processLocations(), +	 * @see #processContextConfiguration(), +	 * <p>As of Spring 3.1, the implementation of this method adheres to the, +	 * contract defined in the {@link SmartContextLoader} SPI. Specifically, , +	 * this method will <em>preemptively</em> verify that the generated default, +	 * location actually exists. If it does not exist, this method will log a, +	 * warning and return an empty array., +		String resourcePath = SLASH + ClassUtils.convertClassNameToResourcePath(clazz.getName()) + suffix;, +		if (!new ClassPathResource(resourcePath, clazz).exists()) {, +			logger.warn(String.format(, +				"Cannot generate default resource location for test class [%s]: classpath resource [%s] does not exist.",, +				clazz.getName(), resourcePath));, +			return EMPTY_STRING_ARRAY;, +		}, +, +		// else, +		return new String[] { ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath };, +	 * {@link #processLocations()} are <code>null</code> or empty., +	 * @see #generateDefaultLocations(), +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/AbstractContextLoader.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.core.io.ClassPathResource;, + * implementations of the {@link ContextLoader} SPI. Provides a, + * resource locations., + * , + * <p>As of Spring 3.1, <code>AbstractContextLoader</code> also provides a basis, + * for all concrete implementations of the {@link SmartContextLoader} SPI. For, + * backwards compatibility with the {@code ContextLoader} SPI, , + * {@link #processContextConfiguration()} delegates to, + * {@link #processLocations()}, and {@link #generatesDefaults()} delegates to, + * {@link #isGenerateDefaultLocations()}. , +	private static final Log logger = LogFactory.getLog(AbstractContextLoader.class);, +, +	private static final String[] EMPTY_STRING_ARRAY = new String[] {};, +	 * For backwards compatibility with the {@link ContextLoader} SPI, the, +	 * default implementation simply delegates to, +	 * {@link #isGenerateDefaultLocations()}., +	 * For backwards compatibility with the {@link ContextLoader} SPI, the, +	 * default implementation simply delegates to {@link #processLocations()},, +	 * passing it the {@link ContextConfigurationAttributes#getDeclaringClass(), +	 * declaring class} and {@link ContextConfigurationAttributes#getLocations(), +	 * resource locations} retrieved from the supplied, +	 * {@link ContextConfigurationAttributes configuration attributes}. The, +	 * processed locations are then, +	 * {@link ContextConfigurationAttributes#setLocations(String[]) set} in, +	 * the supplied configuration attributes., +	 * <p>Can be overridden in subclasses &mdash; for example, to process, +	 * configuration classes instead of resource locations., +	 * @see #processLocations(), +	 * <em>empty</em> and {@link #isGenerateDefaultLocations()} returns, +	 * @return a processed array of application context resource locations, +	 * @see #isGenerateDefaultLocations(), +	 * @see #generateDefaultLocations(), +	 * @see #modifyLocations(), +	 * @see org.springframework.test.context.ContextLoader#processLocations(), +	 * @see #processContextConfiguration(), +	 * <p>As of Spring 3.1, the implementation of this method adheres to the, +	 * contract defined in the {@link SmartContextLoader} SPI. Specifically, , +	 * this method will <em>preemptively</em> verify that the generated default, +	 * location actually exists. If it does not exist, this method will log a, +	 * warning and return an empty array., +		String resourcePath = SLASH + ClassUtils.convertClassNameToResourcePath(clazz.getName()) + suffix;, +		if (!new ClassPathResource(resourcePath, clazz).exists()) {]