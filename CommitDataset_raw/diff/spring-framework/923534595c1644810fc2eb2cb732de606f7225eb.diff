[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java, + * Copyright 2002-2016 the original author or authors., +	 * @param scripts the scripts to execute to initialize or clean up the database, +	 * (never {@code null}), +	 * @param scripts the scripts to execute to initialize or clean up the database, +	 * (never {@code null}), +	public ResourceDatabasePopulator(boolean continueOnError, boolean ignoreFailedDrops,, +			String sqlScriptEncoding, Resource... scripts) {, +, +, +	 * @param script the path to an SQL script (never {@code null}), +	 * @param scripts the scripts to execute (never {@code null}), +	 * @param scripts the scripts to execute (never {@code null}), +	 * @param blockCommentStartDelimiter the start delimiter for block comments, +	 * (never {@code null} or empty), +	 * @param blockCommentEndDelimiter the end delimiter for block comments, +	 * (never {@code null} or empty), +	 * @param dataSource the {@code DataSource} to execute against (never {@code null}), +	 * @param script the script to wrap (never {@code null}), +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java, + * Copyright 2002-2016 the original author or authors., +	 * @param scripts the scripts to execute to initialize or clean up the database, +	 * (never {@code null}), +	 * @param scripts the scripts to execute to initialize or clean up the database, +	 * (never {@code null}), +	public ResourceDatabasePopulator(boolean continueOnError, boolean ignoreFailedDrops,, +			String sqlScriptEncoding, Resource... scripts) {, +, +, +	 * @param script the path to an SQL script (never {@code null}), +	 * @param scripts the scripts to execute (never {@code null}), +	 * @param scripts the scripts to execute (never {@code null}), +	 * @param blockCommentStartDelimiter the start delimiter for block comments, +	 * (never {@code null} or empty), +	 * @param blockCommentEndDelimiter the end delimiter for block comments, +	 * (never {@code null} or empty), +	 * @param dataSource the {@code DataSource} to execute against (never {@code null}), +	 * @param script the script to wrap (never {@code null}), +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java, + * Copyright 2002-2016 the original author or authors., +import java.sql.SQLWarning;, +							logger.debug(rowsAffected + " returned as update count for SQL: " + statement);, +							SQLWarning warningToLog = stmt.getWarnings();, +							while (warningToLog != null) {, +								logger.debug("SQLWarning ignored: SQL state '" + warningToLog.getSQLState() +, +										"', error code '" + warningToLog.getErrorCode() +, +										"', message [" + warningToLog.getMessage() + "]");, +								warningToLog = warningToLog.getNextWarning();, +							}]