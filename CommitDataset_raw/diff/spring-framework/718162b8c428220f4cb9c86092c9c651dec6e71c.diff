[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/RedirectView.java, + * Copyright 2002-2017 the original author or authors., +	public boolean isRedirectView() {, +		return true;, +	}, +, +	@Override, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/RedirectView.java, + * Copyright 2002-2017 the original author or authors., +	public boolean isRedirectView() {, +		return true;, +	}, +, +	@Override, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/View.java, + * Copyright 2002-2017 the original author or authors., +	 * Whether this View does rendering by performing a redirect., +	 */, +	default boolean isRedirectView() {, +		return false;, +	}, +, +	/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/RedirectView.java, + * Copyright 2002-2017 the original author or authors., +	public boolean isRedirectView() {, +		return true;, +	}, +, +	@Override, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/View.java, + * Copyright 2002-2017 the original author or authors., +	 * Whether this View does rendering by performing a redirect., +	 */, +	default boolean isRedirectView() {, +		return false;, +	}, +, +	/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, +		for (View view : views) {, +			if (view.isRedirectView()) {, +				return view.render(model, null, exchange);, +			}, +		}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/RedirectView.java, + * Copyright 2002-2017 the original author or authors., +	public boolean isRedirectView() {, +		return true;, +	}, +, +	@Override, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/View.java, + * Copyright 2002-2017 the original author or authors., +	 * Whether this View does rendering by performing a redirect., +	 */, +	default boolean isRedirectView() {, +		return false;, +	}, +, +	/**, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, +		for (View view : views) {, +			if (view.isRedirectView()) {, +				return view.render(model, null, exchange);, +			}, +		}, +, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandlerTests.java, +import org.springframework.context.support.StaticApplicationContext;, +import org.springframework.mock.http.server.reactive.test.MockServerHttpResponse;, +		testHandle("/account",, +				on(Handler.class).annotNotPresent(ModelAttribute.class).resolveReturnType(String.class),, +				"profile", "profile: {id=123}",, +				new TestViewResolver("account"), new TestViewResolver("profile"));, +	@Test // SPR-15291, +	public void contentNegotiationWithRedirect() throws Exception {, +, +		HandlerResult handlerResult = new HandlerResult(new Object(), "redirect:/",, +				on(Handler.class).annotNotPresent(ModelAttribute.class).resolveReturnType(String.class),, +				this.bindingContext);, +, +		UrlBasedViewResolver viewResolver = new UrlBasedViewResolver();, +		viewResolver.setApplicationContext(new StaticApplicationContext());, +		ViewResolutionResultHandler resultHandler = resultHandler(viewResolver);, +, +		MockServerWebExchange exchange = get("/account").accept(APPLICATION_JSON).toExchange();, +		resultHandler.handleResult(exchange, handlerResult).block(Duration.ZERO);, +, +		MockServerHttpResponse response = exchange.getResponse();, +		assertEquals(303, response.getStatusCode().value());, +		assertEquals("/", response.getHeaders().getLocation().toString());, +	}, +]