[+++ b/spring-web/src/main/java/org/springframework/web/util/patterns/InternalPathPatternParser.java, +/*, + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.util.patterns;, +, +import java.util.ArrayList;, +import java.util.List;, +import java.util.regex.PatternSyntaxException;, +, +/**, + * Parser for URI template patterns. It breaks the path pattern into a number of, + * {@link PathElement}s in a linked list. Instances are reusable but are not thread-safe., + *, + * @author Andy Clement, + * @since 5.0, + */, +public class InternalPathPatternParser {, +, +	// The expected path separator to split path elements during parsing, +	char separator = PathPatternParser.DEFAULT_SEPARATOR;, +, +	// Is the parser producing case sensitive PathPattern matchers, +	boolean caseSensitive = true;, +, +	// The input data for parsing, +	private char[] pathPatternData;, +, +	// The length of the input data, +	private int pathPatternLength;, +, +	// Current parsing position, +	int pos;, +, +	// How many ? characters in a particular path element, +	private int singleCharWildcardCount;, +, +	// Is the path pattern using * characters in a particular path element, +	private boolean wildcard = false;, +, +	// Is the construct {*...} being used in a particular path element, +	private boolean isCaptureTheRestVariable = false;, +, +	// Has the parser entered a {...} variable capture block in a particular, +	// path element, +	private boolean insideVariableCapture = false;, +, +	// How many variable captures are occurring in a particular path element, +	private int variableCaptureCount = 0;, +, +	// Start of the most recent path element in a particular path element, +	int pathElementStart;, +, +	// Start of the most recent variable capture in a particular path element, +	int variableCaptureStart;, +, +	// Variables captures in this path pattern, +	List<String> capturedVariableNames;, +, +	// The head of the path element chain currently being built, +	PathElement headPE;, +, +	// The most recently constructed path element in the chain, +	PathElement currentPE;, +, +	/**, +	 * Create a PatternParser that will use the specified separator instead of, +	 * the default., +	 *, +	 * @param separator the path separator to look for when parsing., +	 */, +	public InternalPathPatternParser(char separator, boolean caseSensitive) {, +		this.separator = separator;, +		this.caseSensitive = caseSensitive;, +	}, +, +	/**, +	 * Process the path pattern data, a character at a time, breaking it into, +	 * path elements around separator boundaries and verifying the structure at each, +	 * stage. Produces a PathPattern object that can be used for fast matching, +	 * against paths., +	 *, +	 * @param pathPattern the input path pattern, e.g. /foo/{bar}, +	 * @return a PathPattern for quickly matching paths against the specified path pattern, +	 */, +	public PathPattern parse(String pathPattern) {, +		if (pathPattern == null) {]