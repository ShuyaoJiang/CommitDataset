[+++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MappingJackson2MessageConverter.java, + * Copyright 2002-2015 the original author or authors., +import java.util.Collection;, + * @author Sebastien Deleuze, +	/**, +	 * Construct a {@code MappingJackson2MessageConverter} supporting {@code application/json} MIME type., +	 */, +		this(new MimeType("application", "json", Charset.forName("UTF-8")));, +	}, +, +	/**, +	 * Construct a {@code MappingJackson2MessageConverter} supporting a single MIME type., +	 * @param supportedMimeType the supported MIME type, +	 * @since 4.1.5, +	 */, +	public MappingJackson2MessageConverter(MimeType supportedMimeType) {, +		super(supportedMimeType);, +		init();, +	}, +, +	/**, +	 * Construct a {@code MappingJackson2MessageConverter} supporting multiple MIME types., +	 * @param supportedMimeTypes the supported MIME types, +	 * @since 4.1.5, +	 */, +	public MappingJackson2MessageConverter(Collection<MimeType> supportedMimeTypes) {, +		super(supportedMimeTypes);, +		init();, +	}, +, +	private void init() {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MappingJackson2MessageConverter.java, + * Copyright 2002-2015 the original author or authors., +import java.util.Collection;, + * @author Sebastien Deleuze, +	/**, +	 * Construct a {@code MappingJackson2MessageConverter} supporting {@code application/json} MIME type., +	 */, +		this(new MimeType("application", "json", Charset.forName("UTF-8")));, +	}, +, +	/**, +	 * Construct a {@code MappingJackson2MessageConverter} supporting a single MIME type., +	 * @param supportedMimeType the supported MIME type, +	 * @since 4.1.5, +	 */, +	public MappingJackson2MessageConverter(MimeType supportedMimeType) {, +		super(supportedMimeType);, +		init();, +	}, +, +	/**, +	 * Construct a {@code MappingJackson2MessageConverter} supporting multiple MIME types., +	 * @param supportedMimeTypes the supported MIME types, +	 * @since 4.1.5, +	 */, +	public MappingJackson2MessageConverter(Collection<MimeType> supportedMimeTypes) {, +		super(supportedMimeTypes);, +		init();, +	}, +, +	private void init() {, +++ b/spring-messaging/src/test/java/org/springframework/messaging/converter/MappingJackson2MessageConverterTests.java, +import com.fasterxml.jackson.databind.DeserializationFeature;, +import static org.hamcrest.Matchers.contains;, +	@Test, +	public void defaultConstructor() {, +		MappingJackson2MessageConverter converter = new MappingJackson2MessageConverter();, +		assertThat(converter.getSupportedMimeTypes(), contains(new MimeType("application", "json", UTF_8)));, +		assertFalse(converter.getObjectMapper().getDeserializationConfig().isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES));, +	}, +	@Test // SPR-12724, +	public void mimetypeParametrizedConstructor() {, +		MimeType mimetype = new MimeType("application", "xml", UTF_8);, +		MappingJackson2MessageConverter converter = new MappingJackson2MessageConverter(mimetype);, +		assertThat(converter.getSupportedMimeTypes(), contains(mimetype));, +		assertFalse(converter.getObjectMapper().getDeserializationConfig().isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES));, +	}, +	@Test // SPR-12724, +	public void mimetypesParametrizedConstructor() {, +		MimeType jsonMimetype = new MimeType("application", "json", UTF_8);, +		MimeType xmlMimetype = new MimeType("application", "xml", UTF_8);, +		MappingJackson2MessageConverter converter = new MappingJackson2MessageConverter(Arrays.asList(jsonMimetype, xmlMimetype));, +		assertThat(converter.getSupportedMimeTypes(), contains(jsonMimetype, xmlMimetype));, +		assertFalse(converter.getObjectMapper().getDeserializationConfig().isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES));, +		MappingJackson2MessageConverter converter = new MappingJackson2MessageConverter();, +		MyBean actual = (MyBean) converter.fromMessage(message, MyBean.class);, +		MappingJackson2MessageConverter converter = new MappingJackson2MessageConverter();, +		HashMap<String, Object> actual = (HashMap<String, Object>) converter.fromMessage(message, HashMap.class);, +		MappingJackson2MessageConverter converter = new MappingJackson2MessageConverter();, +		converter.fromMessage(message, MyBean.class);, +		MappingJackson2MessageConverter converter = new MappingJackson2MessageConverter();, +		MyBean myBean = (MyBean)converter.fromMessage(message, MyBean.class);, +		MappingJackson2MessageConverter converter = new MappingJackson2MessageConverter();, +		Message<?> message = converter.toMessage(payload, null);, +		MappingJackson2MessageConverter converter = new MappingJackson2MessageConverter();, +		Message<?> message = converter.toMessage(payload, headers);, +		MappingJackson2MessageConverter converter = new MappingJackson2MessageConverter();, +		converter.setSerializedPayloadClass(String.class);, +		Message<?> message = converter.toMessage(payload, headers);]