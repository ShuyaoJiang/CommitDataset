[+++ b/spring-context/src/main/java/org/springframework/jmx/export/annotation/AnnotationJmxAttributeSource.java, +import java.lang.reflect.Modifier;, + * @author Stephane Nicoll, +		Class<?> declaringClass = AnnotationUtils.findAnnotationDeclaringClass(ManagedResource.class, beanClass);, +		Class<?> target = (declaringClass != null && !declaringClass.isInterface() ? declaringClass : beanClass);, +		if (!Modifier.isPublic(target.getModifiers())) {, +			throw new InvalidMetadataException("@ManagedResource class '" + target.getName() + "' must be public");, +		}, +++ b/spring-context/src/main/java/org/springframework/jmx/export/annotation/AnnotationJmxAttributeSource.java, +import java.lang.reflect.Modifier;, + * @author Stephane Nicoll, +		Class<?> declaringClass = AnnotationUtils.findAnnotationDeclaringClass(ManagedResource.class, beanClass);, +		Class<?> target = (declaringClass != null && !declaringClass.isInterface() ? declaringClass : beanClass);, +		if (!Modifier.isPublic(target.getModifiers())) {, +			throw new InvalidMetadataException("@ManagedResource class '" + target.getName() + "' must be public");, +		}, +++ b/spring-context/src/test/java/org/springframework/jmx/export/annotation/AnotherAnnotationTestBeanImpl.java, +public class AnotherAnnotationTestBeanImpl implements AnotherAnnotationTestBean {, +++ b/spring-context/src/main/java/org/springframework/jmx/export/annotation/AnnotationJmxAttributeSource.java, +import java.lang.reflect.Modifier;, + * @author Stephane Nicoll, +		Class<?> declaringClass = AnnotationUtils.findAnnotationDeclaringClass(ManagedResource.class, beanClass);, +		Class<?> target = (declaringClass != null && !declaringClass.isInterface() ? declaringClass : beanClass);, +		if (!Modifier.isPublic(target.getModifiers())) {, +			throw new InvalidMetadataException("@ManagedResource class '" + target.getName() + "' must be public");, +		}, +++ b/spring-context/src/test/java/org/springframework/jmx/export/annotation/AnotherAnnotationTestBeanImpl.java, +public class AnotherAnnotationTestBeanImpl implements AnotherAnnotationTestBean {, +++ b/spring-context/src/test/java/org/springframework/jmx/export/annotation/EnableMBeanExportConfigurationTests.java, +import org.junit.After;, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +import org.springframework.jmx.export.metadata.InvalidMetadataException;, + * @author Stephane Nicoll, +	@Rule, +	public final ExpectedException thrown = ExpectedException.none();, +, +	private AnnotationConfigApplicationContext ctx;, +, +	@After, +	public void closeContext() {, +		if (this.ctx != null) {, +			this.ctx.close();, +	public void testLazyNaming() throws Exception {, +		load(LazyNamingConfiguration.class);, +		validateAnnotationTestBean();, +	}, +, +	private void load(Class<?>... config) {, +		this.ctx = new AnnotationConfigApplicationContext(config);, +	}, +, +	@Test, +		load(ProxyConfiguration.class);, +		validateAnnotationTestBean();, +, +	@Test, +	public void testPackagePrivateExtensionCantBeExposed() {, +		this.thrown.expect(InvalidMetadataException.class);, +		this.thrown.expectMessage(PackagePrivateTestBean.class.getName());, +		this.thrown.expectMessage("must be public");, +		new AnnotationConfigApplicationContext(PackagePrivateConfiguration.class);, +, +	@Test, +	public void testPackagePrivateImplementationCantBeExposed() {, +		this.thrown.expect(InvalidMetadataException.class);, +		this.thrown.expectMessage(PackagePrivateAnnotationTestBean.class.getName());, +		this.thrown.expectMessage("must be public");, +		new AnnotationConfigApplicationContext(PackagePrivateInterfaceImplementationConfiguration.class);, +	}, +, +	@Test, +	public void testPackagePrivateClassExtensionCanBeExposed() throws Exception {, +		load(PackagePrivateExtensionConfiguration.class);, +		validateAnnotationTestBean();, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		context.setEnvironment(env);, +		context.register(PlaceholderBasedConfiguration.class);, +		context.refresh();, +		this.ctx = context;, +		validateAnnotationTestBean();, +		load(LazyAssemblingConfiguration.class);, +			MBeanServer server = (MBeanServer) this.ctx.getBean("server");, +			validateMBeanAttribute(server, "bean:name=testBean4", "TEST");, +			validateMBeanAttribute(server, "bean:name=testBean5", "FACTORY");, +			validateMBeanAttribute(server, "spring:mbean=true", "Rob Harrop");, +			validateMBeanAttribute(server, "spring:mbean=another", "Juergen Hoeller");, +		load(ComponentScanConfiguration.class);, +		MBeanServer server = (MBeanServer) this.ctx.getBean("server");, +		validateMBeanAttribute(server, "bean:name=testBean4", null);, +	}, +, +	private void validateAnnotationTestBean() throws Exception {, +		MBeanServer server = (MBeanServer) this.ctx.getBean("server");, +		validateMBeanAttribute(server,"bean:name=testBean4", "TEST");, +	}, +, +	private void validateMBeanAttribute(MBeanServer server, String objectName, String expected) throws Exception {, +		ObjectName oname = ObjectNameManager.getInstance(objectName);, +		assertEquals("Invalid name returned", expected, name);]