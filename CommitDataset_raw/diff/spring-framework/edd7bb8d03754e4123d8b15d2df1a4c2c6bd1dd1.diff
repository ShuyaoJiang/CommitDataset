[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/org.springframework.context/src/test/java/org/springframework/model/ui/support/GenericBinderTests.java, +package org.springframework.model.ui.support;, +, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +, +import java.math.BigDecimal;, +import java.text.ParseException;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collections;, +import java.util.Date;, +import java.util.LinkedHashMap;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +, +import junit.framework.Assert;, +, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Test;, +import org.springframework.context.i18n.LocaleContextHolder;, +import org.springframework.core.style.ToStringCreator;, +import org.springframework.model.binder.BindingResults;, +import org.springframework.model.binder.MissingFieldException;, +import org.springframework.model.message.MockMessageSource;, +import org.springframework.model.ui.BindingStatus;, +import org.springframework.model.ui.FieldModel;, +import org.springframework.model.ui.format.AnnotationFormatterFactory;, +import org.springframework.model.ui.format.Formatted;, +import org.springframework.model.ui.format.Formatter;, +import org.springframework.model.ui.format.date.DateFormatter;, +import org.springframework.model.ui.format.number.CurrencyFormat;, +import org.springframework.model.ui.format.number.CurrencyFormatter;, +import org.springframework.model.ui.format.number.IntegerFormatter;, +, +public class GenericBinderTests {, +, +	private PresentationModelBinder binder;, +, +	private DefaultPresentationModel presentationModel;, +, +	private TestBean bean;, +, +	@Before, +	public void setUp() {, +		bean = new TestBean();, +		presentationModel = new DefaultPresentationModel(bean);, +		binder = new PresentationModelBinder(presentationModel);, +		LocaleContextHolder.setLocale(Locale.US);, +	}, +, +	@After, +	public void tearDown() {, +		LocaleContextHolder.setLocale(null);, +	}, +, +	@Test, +	public void bindSingleValuesWithDefaultTypeConverterConversion() {, +		Map<String, String> values = new LinkedHashMap<String, String>();, +		values.put("string", "test");, +		values.put("integer", "3");, +		values.put("foo", "BAR");, +		BindingResults results = binder.bind(values);, +		assertEquals(3, results.size());, +, +		assertEquals("string", results.get(0).getFieldName());, +		assertFalse(results.get(0).isFailure());, +		assertEquals("test", results.get(0).getSubmittedValue());, +, +		assertEquals("integer", results.get(1).getFieldName());, +		assertFalse(results.get(1).isFailure());, +		assertEquals("3", results.get(1).getSubmittedValue());, +, +		assertEquals("foo", results.get(2).getFieldName());, +		assertFalse(results.get(2).isFailure());, +		assertEquals("BAR", results.get(2).getSubmittedValue());, +, +		assertEquals("test", bean.getString());, +		assertEquals(3, bean.getInteger());, +		assertEquals(FooEnum.BAR, bean.getFoo());, +	}, +, +	@Test, +	public void bindSingleValuesWithDefaultTypeConversionFailure() {, +		Map<String, String> values = new LinkedHashMap<String, String>();, +		values.put("string", "test");, +		// bad value, +		values.put("integer", "bogus");, +		values.put("foo", "BAR");, +		BindingResults results = binder.bind(values);, +		assertEquals(3, results.size());, +		assertTrue(results.get(1).isFailure());]