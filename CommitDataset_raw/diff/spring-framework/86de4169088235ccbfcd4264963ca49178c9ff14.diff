[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/UserDestinationMessageHandler.java, +			if (logger.isTraceEnabled()) {, +				logger.trace("No user destinations for " + message);, +				logger.trace("Sending " + message);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/UserDestinationMessageHandler.java, +			if (logger.isTraceEnabled()) {, +				logger.trace("No user destinations for " + message);, +				logger.trace("Sending " + message);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/AbstractWebSocketSession.java, +		if (this.nativeSession != null) {, +			return getClass().getSimpleName() + "[id=" + getId() + ", uri=" + getUri() + "]";, +		}, +		else {, +			return getClass().getSimpleName() + "[nativeSession=null]";, +		}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/UserDestinationMessageHandler.java, +			if (logger.isTraceEnabled()) {, +				logger.trace("No user destinations for " + message);, +				logger.trace("Sending " + message);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/AbstractWebSocketSession.java, +		if (this.nativeSession != null) {, +			return getClass().getSimpleName() + "[id=" + getId() + ", uri=" + getUri() + "]";, +		}, +		else {, +			return getClass().getSimpleName() + "[nativeSession=null]";, +		}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java, +	private String id;, +, +	private URI uri;, +, +	private String acceptedProtocol;, +, +		return this.id;, +		return this.uri;, +	public String getAcceptedProtocol() {, +		return this.acceptedProtocol;, +	}, +, +	@Override, +	public List<WebSocketExtension> getExtensions() {, +		checkNativeSessionInitialized();, +		return this.extensions;, +	}, +, +	@Override, +	public Principal getPrincipal() {, +		return this.user;, +, +		this.id = ObjectUtils.getIdentityHexString(getNativeSession());, +		this.uri = session.getUpgradeRequest().getRequestURI();, +, +		this.headers = new HttpHeaders();, +		this.headers.putAll(getNativeSession().getUpgradeRequest().getHeaders());, +		this.headers = HttpHeaders.readOnlyHttpHeaders(headers);, +, +		this.acceptedProtocol = session.getUpgradeResponse().getAcceptedSubProtocol();, +, +		List<ExtensionConfig> source = getNativeSession().getUpgradeResponse().getExtensions();, +		this.extensions = new ArrayList<WebSocketExtension>(source.size());, +		for(ExtensionConfig e : source) {, +			this.extensions.add(new WebSocketExtension(e.getName(), e.getParameters()));, +		}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/UserDestinationMessageHandler.java, +			if (logger.isTraceEnabled()) {, +				logger.trace("No user destinations for " + message);, +				logger.trace("Sending " + message);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/AbstractWebSocketSession.java, +		if (this.nativeSession != null) {, +			return getClass().getSimpleName() + "[id=" + getId() + ", uri=" + getUri() + "]";, +		}, +		else {, +			return getClass().getSimpleName() + "[nativeSession=null]";, +		}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java, +	private String id;, +, +	private URI uri;, +, +	private String acceptedProtocol;, +, +		return this.id;, +		return this.uri;, +	public String getAcceptedProtocol() {, +		return this.acceptedProtocol;, +	}, +, +	@Override]