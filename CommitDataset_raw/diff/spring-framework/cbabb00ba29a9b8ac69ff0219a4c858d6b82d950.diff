[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java, +		builder = getBaseUrlToUse(builder);, +	 * @param name the mapping name, +	public static MethodArgumentBuilder fromMappingName(UriComponentsBuilder builder, String name) {, +		List<HandlerMethod> handlerMethods = handlerMapping.getHandlerMethodsForMappingName(name);, +			throw new IllegalArgumentException("Mapping mappingName not found: " + name);, +			throw new IllegalArgumentException("No unique match for mapping mappingName " +, +					name + ": " + handlerMethods);, +	 * @param baseUrl the builder for the base URL; the builder will be cloned, +	public static UriComponentsBuilder fromMethod(UriComponentsBuilder baseUrl, Method method, Object... args) {, +		baseUrl = getBaseUrlToUse(baseUrl);, +		baseUrl.path(path);, +		UriComponents uriComponents = applyContributors(baseUrl, method, args);, +	private static UriComponentsBuilder getBaseUrlToUse(UriComponentsBuilder baseUrl) {, +		if (baseUrl != null) {, +			return (UriComponentsBuilder) baseUrl.clone();, +		}, +		else {, +			return ServletUriComponentsBuilder.fromCurrentServletMapping();, +		}, +	}, +, +	private static String getTypeRequestMapping(Class<?> controllerType) {, +		Assert.notNull(controllerType, "'controllerType' must not be null");, +		RequestMapping annot = AnnotationUtils.findAnnotation(controllerType, RequestMapping.class);, +		if (annot == null || ObjectUtils.isEmpty(annot.value()) || StringUtils.isEmpty(annot.value()[0])) {, +			return "/";, +		}, +		if (annot.value().length > 1 && logger.isWarnEnabled()) {, +			logger.warn("Multiple paths on controller " + controllerType.getName() + ", using first one");, +		}, +		return annot.value()[0];, +	}, +, +	private static Method getMethod(Class<?> controllerType, String methodName, Object... args) {, +		Method match = null;, +		for (Method method : controllerType.getDeclaredMethods()) {, +			if (method.getName().equals(methodName) && method.getParameterTypes().length == args.length) {, +				if (match != null) {, +					throw new IllegalArgumentException("Found two methods named '" + methodName + "' having " +, +							Arrays.asList(args) + " arguments, controller " + controllerType.getName());, +				}, +				match = method;, +			}, +		}, +		if (match == null) {, +			throw new IllegalArgumentException("No method '" + methodName + "' with " + args.length +, +					" parameters found in " + controllerType.getName());, +		}, +		return match;, +	}, +]