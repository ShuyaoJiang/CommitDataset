[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/PatternsRequestCondition.java, +				if (!hasSuffix(pattern) && this.pathMatcher.match(pattern + ".*", lookupPath)) {, +	private boolean hasSuffix(String pattern) {, +		boolean uriVarMode = false;, +		for (int i = pattern.length(); i > 0; i--) {, +			char c = pattern.charAt(i-1);, +			if (c == '}') {, +				uriVarMode = true;, +			}, +			else if (c == '{') {, +				uriVarMode = false;, +			}, +			else if (c == '/') {, +				return false;, +			}, +			else {, +				if (!uriVarMode && c == '.') {, +					return true;, +				}, +			}, +		}, +		return false;, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/PatternsRequestCondition.java, +				if (!hasSuffix(pattern) && this.pathMatcher.match(pattern + ".*", lookupPath)) {, +	private boolean hasSuffix(String pattern) {, +		boolean uriVarMode = false;, +		for (int i = pattern.length(); i > 0; i--) {, +			char c = pattern.charAt(i-1);, +			if (c == '}') {, +				uriVarMode = true;, +			}, +			else if (c == '{') {, +				uriVarMode = false;, +			}, +			else if (c == '/') {, +				return false;, +			}, +			else {, +				if (!uriVarMode && c == '.') {, +					return true;, +				}, +			}, +		}, +		return false;, +	}, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/condition/PatternsRequestConditionTests.java, + * Copyright 2002-2014 the original author or authors., +	// SPR-11532, +, +	@Test, +	public void matchSuffixPatternWithUriVariables() {, +		testSuffixPattern("/employees/{areaOfResponsibility.owner.id}", "/employees/976685.json", false);, +		testSuffixPattern("/establishments/{establishmentId}", "/establishments/123456789.json", false);, +		testSuffixPattern("/a.b/c", "/a.b/c.json", false);, +		testSuffixPattern("/a/b.json", "/a/b.json", true);, +		testSuffixPattern("/a/{b}.{c}", "/a/b.c", true);, +	}, +, +	public void testSuffixPattern(String pattern, String url, boolean patternHasSuffix) {, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", url);, +		PatternsRequestCondition condition = new PatternsRequestCondition(pattern);, +		PatternsRequestCondition match = condition.getMatchingCondition(request);, +, +		assertNotNull(match);, +		assertEquals((patternHasSuffix ? pattern : pattern + ".*"), match.getPatterns().iterator().next());, +	}, +]