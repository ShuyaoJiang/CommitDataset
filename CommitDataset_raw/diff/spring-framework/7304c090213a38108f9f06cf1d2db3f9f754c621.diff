[+++ b/org.springframework.context/src/main/java/org/springframework/validation/DefaultBindingErrorProcessor.java, + * Copyright 2002-2010 the original author or authors., +	 * <p>The default implementation returns a single argument indicating the field name, +	 * (of type DefaultMessageSourceResolvable, with "objectName.field" and "field" as codes)., +++ b/org.springframework.context/src/main/java/org/springframework/validation/DefaultBindingErrorProcessor.java, + * Copyright 2002-2010 the original author or authors., +	 * <p>The default implementation returns a single argument indicating the field name, +	 * (of type DefaultMessageSourceResolvable, with "objectName.field" and "field" as codes)., +++ b/org.springframework.context/src/main/java/org/springframework/validation/beanvalidation/SpringValidatorAdapter.java, +import java.util.HashSet;, +import java.util.Map;, +import java.util.TreeMap;, +	private static final Set<String> internalAnnotationAttributes = new HashSet<String>(3);, +, +	static {, +		internalAnnotationAttributes.add("message");, +		internalAnnotationAttributes.add("groups");, +		internalAnnotationAttributes.add("payload");, +	}, +, +	 * <p>The default implementation returns a first argument indicating the field name, +	 * (of type DefaultMessageSourceResolvable, with "objectName.field" and "field" as codes)., +	 * Afterwards, it adds all actual constraint annotation attributes (i.e. excluding, +	 * "message", "groups" and "payload") in alphabetical order of their attribute names., +	 * <p>Can be overridden to e.g. add further attributes from the constraint descriptor., +		// Using a TreeMap for alphabetical ordering of attribute names, +		Map<String, Object> attributesToExpose = new TreeMap<String, Object>();, +		for (Map.Entry<String, Object> entry : descriptor.getAttributes().entrySet()) {, +			String attributeName = entry.getKey();, +			Object attributeValue = entry.getValue();, +			if (!internalAnnotationAttributes.contains(attributeName)) {, +				attributesToExpose.put(attributeName, attributeValue);, +			}, +		}, +		arguments.addAll(attributesToExpose.values());]