[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +, +import org.springframework.core.convert.TypeDescriptor;, +	public TypeDescriptor getPropertyTypeDescriptor(String propertyName) throws BeansException {, +		try {, +			PropertyDescriptor pd = getPropertyDescriptorInternal(propertyName);, +			if (pd != null) {, +				if (pd.getReadMethod() != null) {, +					return new TypeDescriptor(new MethodParameter(pd.getReadMethod(), -1));, +				}, +				else if (pd.getWriteMethod() != null) {, +					return new TypeDescriptor(new MethodParameter(pd.getWriteMethod(), 0));, +				}, +			}, +		}, +		catch (InvalidPropertyException ex) {, +			// Consider as not determinable., +		}, +		return null;, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +, +import org.springframework.core.convert.TypeDescriptor;, +	public TypeDescriptor getPropertyTypeDescriptor(String propertyName) throws BeansException {, +		try {, +			PropertyDescriptor pd = getPropertyDescriptorInternal(propertyName);, +			if (pd != null) {, +				if (pd.getReadMethod() != null) {, +					return new TypeDescriptor(new MethodParameter(pd.getReadMethod(), -1));, +				}, +				else if (pd.getWriteMethod() != null) {, +					return new TypeDescriptor(new MethodParameter(pd.getWriteMethod(), 0));, +				}, +			}, +		}, +		catch (InvalidPropertyException ex) {, +			// Consider as not determinable., +		}, +		return null;, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/DirectFieldAccessor.java, +import org.springframework.core.convert.TypeDescriptor;, +	public TypeDescriptor getPropertyTypeDescriptor(String propertyName) throws BeansException {, +		Field field = this.fieldMap.get(propertyName);, +		if (field != null) {, +			return new TypeDescriptor(field);, +		}, +		return null;, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +, +import org.springframework.core.convert.TypeDescriptor;, +	public TypeDescriptor getPropertyTypeDescriptor(String propertyName) throws BeansException {, +		try {, +			PropertyDescriptor pd = getPropertyDescriptorInternal(propertyName);, +			if (pd != null) {, +				if (pd.getReadMethod() != null) {, +					return new TypeDescriptor(new MethodParameter(pd.getReadMethod(), -1));, +				}, +				else if (pd.getWriteMethod() != null) {, +					return new TypeDescriptor(new MethodParameter(pd.getWriteMethod(), 0));, +				}, +			}, +		}, +		catch (InvalidPropertyException ex) {, +			// Consider as not determinable., +		}, +		return null;, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/DirectFieldAccessor.java, +import org.springframework.core.convert.TypeDescriptor;, +	public TypeDescriptor getPropertyTypeDescriptor(String propertyName) throws BeansException {, +		Field field = this.fieldMap.get(propertyName);, +		if (field != null) {, +			return new TypeDescriptor(field);, +		}, +		return null;, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/PropertyAccessor.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.core.convert.TypeDescriptor;, +, +	 * Return a type descriptor for the specified property., +	 * @param propertyName the property to check, +	 * (may be a nested path and/or an indexed/mapped property), +	 * @return the property type for the particular property,, +	 * or <code>null</code> if not determinable, +	 * @throws InvalidPropertyException if there is no such property or, +	 * if the property isn't readable, +	 */, +	TypeDescriptor getPropertyTypeDescriptor(String propertyName) throws BeansException;, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +]