[+++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/BeanMethod.java, +import org.springframework.context.annotation.ScopedProxyMode;, +		if(scope != null, +			&& scope.proxyMode() != ScopedProxyMode.NO, +			&& (scope.value().equals(SINGLETON) || scope.value().equals(PROTOTYPE))), +	public class InvalidScopedProxyDeclarationError extends Problem {, +		public InvalidScopedProxyDeclarationError(BeanMethod method) {, +			super(, +					String.format("method %s contains an invalid annotation declaration: scoped proxies ", +					        + "cannot be created for singleton/prototype beans", method.getName()),, +			        new Location(new FileSystemResource("/dev/null")), +				);, +		}, +, +	}, +, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/BeanMethod.java, +import org.springframework.context.annotation.ScopedProxyMode;, +		if(scope != null, +			&& scope.proxyMode() != ScopedProxyMode.NO, +			&& (scope.value().equals(SINGLETON) || scope.value().equals(PROTOTYPE))), +	public class InvalidScopedProxyDeclarationError extends Problem {, +		public InvalidScopedProxyDeclarationError(BeanMethod method) {, +			super(, +					String.format("method %s contains an invalid annotation declaration: scoped proxies ", +					        + "cannot be created for singleton/prototype beans", method.getName()),, +			        new Location(new FileSystemResource("/dev/null")), +				);, +		}, +, +	}, +, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/BeanRegistrar.java, +import org.springframework.context.annotation.ScopedProxyMode;, +import org.springframework.util.Assert;, +	/** Prefix used when registering the target object for a scoped proxy. */, +	private static final String TARGET_NAME_PREFIX = "scopedTarget.";, +, +		// is this method annotated with @Scope(scopedProxy=...)?, +		if (scope != null && scope.proxyMode() != ScopedProxyMode.NO) {, +			String targetBeanName = resolveHiddenScopedProxyBeanName(beanName);, +			if (scope.proxyMode() == ScopedProxyMode.TARGET_CLASS), +	/**, +	 * Return the <i>hidden</i> name based on a scoped proxy bean name., +	 *, +	 * @param   originalBeanName  the scope proxy bean name as declared in the, +	 *                            Configuration-annotated class, +	 *, +	 * @return  the internally-used <i>hidden</i> bean name, +	 */, +	public static String resolveHiddenScopedProxyBeanName(String originalBeanName) {, +		Assert.hasText(originalBeanName);, +		return TARGET_NAME_PREFIX.concat(originalBeanName);, +	}, +, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/BeanMethod.java, +import org.springframework.context.annotation.ScopedProxyMode;, +		if(scope != null, +			&& scope.proxyMode() != ScopedProxyMode.NO, +			&& (scope.value().equals(SINGLETON) || scope.value().equals(PROTOTYPE))), +	public class InvalidScopedProxyDeclarationError extends Problem {, +		public InvalidScopedProxyDeclarationError(BeanMethod method) {, +			super(, +					String.format("method %s contains an invalid annotation declaration: scoped proxies ", +					        + "cannot be created for singleton/prototype beans", method.getName()),, +			        new Location(new FileSystemResource("/dev/null")), +				);, +		}, +, +	}, +, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/BeanRegistrar.java, +import org.springframework.context.annotation.ScopedProxyMode;, +import org.springframework.util.Assert;, +	/** Prefix used when registering the target object for a scoped proxy. */, +	private static final String TARGET_NAME_PREFIX = "scopedTarget.";, +, +		// is this method annotated with @Scope(scopedProxy=...)?, +		if (scope != null && scope.proxyMode() != ScopedProxyMode.NO) {, +			String targetBeanName = resolveHiddenScopedProxyBeanName(beanName);, +			if (scope.proxyMode() == ScopedProxyMode.TARGET_CLASS), +	/**, +	 * Return the <i>hidden</i> name based on a scoped proxy bean name., +	 *, +	 * @param   originalBeanName  the scope proxy bean name as declared in the, +	 *                            Configuration-annotated class, +	 *, +	 * @return  the internally-used <i>hidden</i> bean name, +	 */, +	public static String resolveHiddenScopedProxyBeanName(String originalBeanName) {, +		Assert.hasText(originalBeanName);, +		return TARGET_NAME_PREFIX.concat(originalBeanName);, +	}, +, +++ /dev/null, +++ b/org.springframework.config.java/src/main/java/org/springframework/config/java/BeanMethod.java, +import org.springframework.context.annotation.ScopedProxyMode;, +		if(scope != null, +			&& scope.proxyMode() != ScopedProxyMode.NO, +			&& (scope.value().equals(SINGLETON) || scope.value().equals(PROTOTYPE)))]