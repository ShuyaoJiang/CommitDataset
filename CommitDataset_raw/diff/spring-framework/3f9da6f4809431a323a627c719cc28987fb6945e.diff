[+++ b/spring-websocket/src/main/java/org/springframework/web/messaging/PubSubChannelRegistry.java, +@SuppressWarnings("rawtypes"), +public interface PubSubChannelRegistry<M extends Message, H extends MessageHandler<M>> {, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/PubSubChannelRegistry.java, +@SuppressWarnings("rawtypes"), +public interface PubSubChannelRegistry<M extends Message, H extends MessageHandler<M>> {, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/service/AbstractPubSubMessageHandler.java, +@SuppressWarnings("rawtypes"), +public abstract class AbstractPubSubMessageHandler<M extends Message> implements MessageHandler<M> {, +	protected boolean canHandle(M message, MessageType messageType) {, +	protected boolean isDestinationAllowed(M message) {, +	public final void handleMessage(M message) throws MessagingException {, +	protected void handleConnect(M message) {, +	protected void handlePublish(M message) {, +	protected void handleSubscribe(M message) {, +	protected void handleUnsubscribe(M message) {, +	protected void handleDisconnect(M message) {, +	protected void handleOther(M message) {, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/PubSubChannelRegistry.java, +@SuppressWarnings("rawtypes"), +public interface PubSubChannelRegistry<M extends Message, H extends MessageHandler<M>> {, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/service/AbstractPubSubMessageHandler.java, +@SuppressWarnings("rawtypes"), +public abstract class AbstractPubSubMessageHandler<M extends Message> implements MessageHandler<M> {, +	protected boolean canHandle(M message, MessageType messageType) {, +	protected boolean isDestinationAllowed(M message) {, +	public final void handleMessage(M message) throws MessagingException {, +	protected void handleConnect(M message) {, +	protected void handlePublish(M message) {, +	protected void handleSubscribe(M message) {, +	protected void handleUnsubscribe(M message) {, +	protected void handleDisconnect(M message) {, +	protected void handleOther(M message) {, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/service/ReactorPubSubMessageHandler.java, +@SuppressWarnings("rawtypes"), +public class ReactorPubSubMessageHandler<M extends Message> extends AbstractPubSubMessageHandler<M> {, +	private MessageChannel<M> clientChannel;, +	public ReactorPubSubMessageHandler(PubSubChannelRegistry<M, ?> registry, Reactor reactor) {, +	public void handleSubscribe(M message) {, +	public void handlePublish(M message) {, +			@SuppressWarnings("unchecked"), +			M m = (M) MessageBuilder.fromPayloadAndHeaders(payload, message.getHeaders()).build();, +			this.reactor.notify(getPublishKey(headers.getDestination()), Event.wrap(m));, +	public void handleDisconnect(M message) {, +			@SuppressWarnings("unchecked"), +			M clientMessage = (M) MessageBuilder.fromPayloadAndHeaders(sentMessage.getPayload(),, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/PubSubChannelRegistry.java, +@SuppressWarnings("rawtypes"), +public interface PubSubChannelRegistry<M extends Message, H extends MessageHandler<M>> {, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/service/AbstractPubSubMessageHandler.java, +@SuppressWarnings("rawtypes"), +public abstract class AbstractPubSubMessageHandler<M extends Message> implements MessageHandler<M> {, +	protected boolean canHandle(M message, MessageType messageType) {, +	protected boolean isDestinationAllowed(M message) {, +	public final void handleMessage(M message) throws MessagingException {, +	protected void handleConnect(M message) {, +	protected void handlePublish(M message) {, +	protected void handleSubscribe(M message) {, +	protected void handleUnsubscribe(M message) {, +	protected void handleDisconnect(M message) {, +	protected void handleOther(M message) {, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/service/ReactorPubSubMessageHandler.java, +@SuppressWarnings("rawtypes"), +public class ReactorPubSubMessageHandler<M extends Message> extends AbstractPubSubMessageHandler<M> {, +	private MessageChannel<M> clientChannel;, +	public ReactorPubSubMessageHandler(PubSubChannelRegistry<M, ?> registry, Reactor reactor) {, +	public void handleSubscribe(M message) {, +	public void handlePublish(M message) {, +			@SuppressWarnings("unchecked"), +			M m = (M) MessageBuilder.fromPayloadAndHeaders(payload, message.getHeaders()).build();, +			this.reactor.notify(getPublishKey(headers.getDestination()), Event.wrap(m));, +	public void handleDisconnect(M message) {, +			@SuppressWarnings("unchecked"), +			M clientMessage = (M) MessageBuilder.fromPayloadAndHeaders(sentMessage.getPayload(),, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/service/method/AnnotationPubSubMessageHandler.java, +@SuppressWarnings("rawtypes"), +public class AnnotationPubSubMessageHandler<M extends Message> extends AbstractPubSubMessageHandler<M>, +	private PubSubChannelRegistry<M, ?> registry;, +	private ArgumentResolverComposite<M> argumentResolvers = new ArgumentResolverComposite<M>();, +	private ReturnValueHandlerComposite<M> returnValueHandlers = new ReturnValueHandlerComposite<M>();, +	public AnnotationPubSubMessageHandler(PubSubChannelRegistry<M, ?> registry) {, +		this.argumentResolvers.addResolver(new MessageChannelArgumentResolver<M>(this.registry.getMessageBrokerChannel()));, +		this.argumentResolvers.addResolver(new MessageBodyArgumentResolver<M>(this.messageConverters));, +		this.returnValueHandlers.addHandler(new MessageReturnValueHandler<M>(this.registry.getClientOutputChannel()));, +	public void handlePublish(M message) {, +	public void handleSubscribe(M message) {, +	public void handleUnsubscribe(M message) {, +	private void handleMessageInternal(final M message, Map<MappingInfo, HandlerMethod> handlerMethods) {, +		InvocableMessageHandlerMethod<M> invocableHandlerMethod = new InvocableMessageHandlerMethod<M>(handlerMethod);, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/PubSubChannelRegistry.java, +@SuppressWarnings("rawtypes"), +public interface PubSubChannelRegistry<M extends Message, H extends MessageHandler<M>> {, +++ b/spring-websocket/src/main/java/org/springframework/web/messaging/service/AbstractPubSubMessageHandler.java, +@SuppressWarnings("rawtypes"), +public abstract class AbstractPubSubMessageHandler<M extends Message> implements MessageHandler<M> {, +	protected boolean canHandle(M message, MessageType messageType) {, +	protected boolean isDestinationAllowed(M message) {, +	public final void handleMessage(M message) throws MessagingException {, +	protected void handleConnect(M message) {, +	protected void handlePublish(M message) {]