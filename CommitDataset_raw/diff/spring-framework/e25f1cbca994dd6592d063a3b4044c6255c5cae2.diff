[+++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/ProxyCachingConfiguration.java, +		advisor.setOrder(this.enableCaching.<Integer>getNumber("order"));, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/ProxyCachingConfiguration.java, +		advisor.setOrder(this.enableCaching.<Integer>getNumber("order"));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, +		AdviceMode adviceMode = attributes.getEnum(this.getAdviceModeAttributeName());, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/ProxyCachingConfiguration.java, +		advisor.setOrder(this.enableCaching.<Integer>getNumber("order"));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, +		AdviceMode adviceMode = attributes.getEnum(this.getAdviceModeAttributeName());, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, +				int role = attributesFor(metadata, Role.class).getNumber("value");, +				((AbstractBeanDefinition)abd).setRole(role);, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/ProxyCachingConfiguration.java, +		advisor.setOrder(this.enableCaching.<Integer>getNumber("order"));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, +		AdviceMode adviceMode = attributes.getEnum(this.getAdviceModeAttributeName());, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, +				int role = attributesFor(metadata, Role.class).getNumber("value");, +				((AbstractBeanDefinition)abd).setRole(role);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationScopeMetadataResolver.java, +				ScopedProxyMode proxyMode = attributes.getEnum("proxyMode");, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/ProxyCachingConfiguration.java, +		advisor.setOrder(this.enableCaching.<Integer>getNumber("order"));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, +		AdviceMode adviceMode = attributes.getEnum(this.getAdviceModeAttributeName());, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, +				int role = attributesFor(metadata, Role.class).getNumber("value");, +				((AbstractBeanDefinition)abd).setRole(role);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationScopeMetadataResolver.java, +				ScopedProxyMode proxyMode = attributes.getEnum("proxyMode");, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, +		Class<? extends BeanNameGenerator> generatorClass = componentScan.getClass("nameGenerator");, +		scanner.setBeanNameGenerator(BeanUtils.instantiateClass(generatorClass));, +		ScopedProxyMode scopedProxyMode = componentScan.getEnum("scopedProxy");, +			Class<? extends ScopeMetadataResolver> resolverClass = componentScan.getClass("scopeResolver");, +			scanner.setScopeMetadataResolver(BeanUtils.instantiateClass(resolverClass));, +		FilterType filterType = filterAttributes.getEnum("type");, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/ProxyCachingConfiguration.java, +		advisor.setOrder(this.enableCaching.<Integer>getNumber("order"));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, +		AdviceMode adviceMode = attributes.getEnum(this.getAdviceModeAttributeName());, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, +				int role = attributesFor(metadata, Role.class).getNumber("value");, +				((AbstractBeanDefinition)abd).setRole(role);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationScopeMetadataResolver.java, +				ScopedProxyMode proxyMode = attributes.getEnum("proxyMode");, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, +		Class<? extends BeanNameGenerator> generatorClass = componentScan.getClass("nameGenerator");, +		scanner.setBeanNameGenerator(BeanUtils.instantiateClass(generatorClass));, +		ScopedProxyMode scopedProxyMode = componentScan.getEnum("scopedProxy");, +			Class<? extends ScopeMetadataResolver> resolverClass = componentScan.getClass("scopeResolver");, +			scanner.setScopeMetadataResolver(BeanUtils.instantiateClass(resolverClass));, +		FilterType filterType = filterAttributes.getEnum("type");, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +			beanDef.setRole(role.<Integer>getNumber("value"));, +		Autowire autowire = bean.getEnum("autowire");, +			proxyMode = scope.getEnum("proxyMode");, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/ProxyCachingConfiguration.java, +		advisor.setOrder(this.enableCaching.<Integer>getNumber("order"));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, +		AdviceMode adviceMode = attributes.getEnum(this.getAdviceModeAttributeName());, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, +				int role = attributesFor(metadata, Role.class).getNumber("value");, +				((AbstractBeanDefinition)abd).setRole(role);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationScopeMetadataResolver.java, +				ScopedProxyMode proxyMode = attributes.getEnum("proxyMode");, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, +		Class<? extends BeanNameGenerator> generatorClass = componentScan.getClass("nameGenerator");, +		scanner.setBeanNameGenerator(BeanUtils.instantiateClass(generatorClass));, +		ScopedProxyMode scopedProxyMode = componentScan.getEnum("scopedProxy");, +			Class<? extends ScopeMetadataResolver> resolverClass = componentScan.getClass("scopeResolver");, +			scanner.setScopeMetadataResolver(BeanUtils.instantiateClass(resolverClass));, +		FilterType filterType = filterAttributes.getEnum("type");, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +			beanDef.setRole(role.<Integer>getNumber("value"));, +		Autowire autowire = bean.getEnum("autowire");, +			proxyMode = scope.getEnum("proxyMode");, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +			Class<? extends BeanDefinitionReader> readerClass = importResource.getClass("reader");, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/ProxyCachingConfiguration.java, +		advisor.setOrder(this.enableCaching.<Integer>getNumber("order"));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, +		AdviceMode adviceMode = attributes.getEnum(this.getAdviceModeAttributeName());, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, +				int role = attributesFor(metadata, Role.class).getNumber("value");, +				((AbstractBeanDefinition)abd).setRole(role);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationScopeMetadataResolver.java, +				ScopedProxyMode proxyMode = attributes.getEnum("proxyMode");, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, +		Class<? extends BeanNameGenerator> generatorClass = componentScan.getClass("nameGenerator");, +		scanner.setBeanNameGenerator(BeanUtils.instantiateClass(generatorClass));, +		ScopedProxyMode scopedProxyMode = componentScan.getEnum("scopedProxy");, +			Class<? extends ScopeMetadataResolver> resolverClass = componentScan.getClass("scopeResolver");, +			scanner.setScopeMetadataResolver(BeanUtils.instantiateClass(resolverClass));, +		FilterType filterType = filterAttributes.getEnum("type");, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +			beanDef.setRole(role.<Integer>getNumber("value"));, +		Autowire autowire = bean.getEnum("autowire");, +			proxyMode = scope.getEnum("proxyMode");]