[+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/CustomSQLExceptionTranslatorRegistrar.java, + * Registry for registering custom {@link org.springframework.jdbc.support.SQLExceptionTranslator}, + * instances for specific databases., + * @since 3.1.1, +	private final Map<String, SQLExceptionTranslator> translators = new HashMap<String, SQLExceptionTranslator>();, +, +	 * Setter for a Map of {@link SQLExceptionTranslator} references where the key must, +	 * be the database name as defined in the <code>sql-error-codes.xml</code> file., +	 * <p>Note that any existing translators will remain unless there is a match in the, +	 * database name, at which point the new translator will replace the existing one., +	public void setTranslators(Map<String, SQLExceptionTranslator> translators) {, +		this.translators.putAll(translators);, +	public void afterPropertiesSet() {, +		for (String dbName : this.translators.keySet()) {, +			CustomSQLExceptionTranslatorRegistry.getInstance().registerTranslator(dbName, this.translators.get(dbName));, +, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/CustomSQLExceptionTranslatorRegistrar.java, + * Registry for registering custom {@link org.springframework.jdbc.support.SQLExceptionTranslator}, + * instances for specific databases., + * @since 3.1.1, +	private final Map<String, SQLExceptionTranslator> translators = new HashMap<String, SQLExceptionTranslator>();, +, +	 * Setter for a Map of {@link SQLExceptionTranslator} references where the key must, +	 * be the database name as defined in the <code>sql-error-codes.xml</code> file., +	 * <p>Note that any existing translators will remain unless there is a match in the, +	 * database name, at which point the new translator will replace the existing one., +	public void setTranslators(Map<String, SQLExceptionTranslator> translators) {, +		this.translators.putAll(translators);, +	public void afterPropertiesSet() {, +		for (String dbName : this.translators.keySet()) {, +			CustomSQLExceptionTranslatorRegistry.getInstance().registerTranslator(dbName, this.translators.get(dbName));, +, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/CustomSQLExceptionTranslatorRegistry.java, + * @since 3.1.1, +	 * Map registry to hold custom translators specific databases., +	 * Key is the database product name as defined in the, +	 * {@link org.springframework.jdbc.support.SQLErrorCodesFactory}., +	 */, +	private final Map<String, SQLExceptionTranslator> translatorMap = new HashMap<String, SQLExceptionTranslator>();, +, +, +	/**, +	 * Create a new instance of the {@link CustomSQLExceptionTranslatorRegistry} class., +	 * @param translator the custom translator, +	public void registerTranslator(String dbName, SQLExceptionTranslator translator) {, +		SQLExceptionTranslator replaced = translatorMap.put(dbName, translator);, +			logger.warn("Replacing custom translator [" + replaced + "] for database '" + dbName +, +					"' with [" + translator + "]");, +			logger.info("Adding custom translator of type [" + translator.getClass().getName() +, +					"] for database '" + dbName + "'");, +	/**, +	 * Find a custom translator for the specified database., +	 * @param dbName the database name, +	 * @return the custom translator, or <code>null</code> if none found, +	 */, +	public SQLExceptionTranslator findTranslatorForDatabase(String dbName) {, +		return this.translatorMap.get(dbName);, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/CustomSQLExceptionTranslatorRegistrar.java, + * Registry for registering custom {@link org.springframework.jdbc.support.SQLExceptionTranslator}, + * instances for specific databases., + * @since 3.1.1, +	private final Map<String, SQLExceptionTranslator> translators = new HashMap<String, SQLExceptionTranslator>();, +, +	 * Setter for a Map of {@link SQLExceptionTranslator} references where the key must, +	 * be the database name as defined in the <code>sql-error-codes.xml</code> file., +	 * <p>Note that any existing translators will remain unless there is a match in the, +	 * database name, at which point the new translator will replace the existing one., +	public void setTranslators(Map<String, SQLExceptionTranslator> translators) {, +		this.translators.putAll(translators);, +	public void afterPropertiesSet() {, +		for (String dbName : this.translators.keySet()) {, +			CustomSQLExceptionTranslatorRegistry.getInstance().registerTranslator(dbName, this.translators.get(dbName));, +, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/CustomSQLExceptionTranslatorRegistry.java, + * @since 3.1.1, +	 * Map registry to hold custom translators specific databases., +	 * Key is the database product name as defined in the, +	 * {@link org.springframework.jdbc.support.SQLErrorCodesFactory}., +	 */, +	private final Map<String, SQLExceptionTranslator> translatorMap = new HashMap<String, SQLExceptionTranslator>();, +, +, +	/**, +	 * Create a new instance of the {@link CustomSQLExceptionTranslatorRegistry} class., +	 * @param translator the custom translator, +	public void registerTranslator(String dbName, SQLExceptionTranslator translator) {, +		SQLExceptionTranslator replaced = translatorMap.put(dbName, translator);, +			logger.warn("Replacing custom translator [" + replaced + "] for database '" + dbName +, +					"' with [" + translator + "]");, +			logger.info("Adding custom translator of type [" + translator.getClass().getName() +, +					"] for database '" + dbName + "'");, +	/**, +	 * Find a custom translator for the specified database., +	 * @param dbName the database name, +	 * @return the custom translator, or <code>null</code> if none found, +	 */, +	public SQLExceptionTranslator findTranslatorForDatabase(String dbName) {, +		return this.translatorMap.get(dbName);, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/support/SQLErrorCodes.java, +	private SQLExceptionTranslator customSqlExceptionTranslator;]