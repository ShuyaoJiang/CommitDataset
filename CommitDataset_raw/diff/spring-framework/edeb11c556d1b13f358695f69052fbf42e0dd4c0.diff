[+++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/GlassFishRequestUpgradeStrategy.java, +		WebSocketApplication webSocketApplication = createTyrusEndpoint(endpoint, selectedProtocol, selectedExtensions);, +			throw new HandshakeFailureException("Unable to create TyrusHttpUpgradeHandler", ex);, +		// GlassFish bug ?? (see same line in TyrusServletFilter.doFilter), +	private WebSocketApplication createTyrusEndpoint(Endpoint endpoint, String selectedProtocol,, +			List<Extension> selectedExtensions) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/GlassFishRequestUpgradeStrategy.java, +		WebSocketApplication webSocketApplication = createTyrusEndpoint(endpoint, selectedProtocol, selectedExtensions);, +			throw new HandshakeFailureException("Unable to create TyrusHttpUpgradeHandler", ex);, +		// GlassFish bug ?? (see same line in TyrusServletFilter.doFilter), +	private WebSocketApplication createTyrusEndpoint(Endpoint endpoint, String selectedProtocol,, +			List<Extension> selectedExtensions) {, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/DefaultHandshakeHandler.java, +import org.springframework.util.Assert;, +import org.springframework.web.socket.WebSocketHttpHeaders;, +import org.springframework.web.socket.handler.WebSocketHandlerDecorator;, +	 * Default constructor that autodetects and instantiates a, +			return (RequestUpgradeStrategy) clazz.newInstance();, +	 * A constructor that accepts a runtime-specific {@link RequestUpgradeStrategy}., +	 * @param requestUpgradeStrategy the upgrade strategy to use, +	public DefaultHandshakeHandler(RequestUpgradeStrategy requestUpgradeStrategy) {, +		Assert.notNull(requestUpgradeStrategy, "RequestUpgradeStrategy must not be null");, +		this.requestUpgradeStrategy = requestUpgradeStrategy;, +, +		String[] supportedVersions = getSupportedVersions();, +			logger.debug("Version " + version + " is not a supported WebSocket version");, +	protected String[] getSupportedVersions() {, +		if (logger.isDebugEnabled()) {, +			logger.debug("WebSocket version not supported: " + request.getHeaders().get("Sec-WebSocket-Version"));, +		}, +				StringUtils.arrayToCommaDelimitedString(getSupportedVersions())));, +]