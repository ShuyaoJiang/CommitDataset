[+++ b/spring-web/src/main/java/org/springframework/http/converter/BufferedImageHttpMessageConverter.java, +				throw new HttpMessageNotReadableException("No Content-Type header", inputMessage);, +						"Could not find javax.imageio.ImageReader for Content-Type [" + contentType + "]",, +						inputMessage);, +++ b/spring-web/src/main/java/org/springframework/http/converter/BufferedImageHttpMessageConverter.java, +				throw new HttpMessageNotReadableException("No Content-Type header", inputMessage);, +						"Could not find javax.imageio.ImageReader for Content-Type [" + contentType + "]",, +						inputMessage);, +++ b/spring-web/src/main/java/org/springframework/http/converter/HttpMessageNotReadableException.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.http.HttpInputMessage;, +import org.springframework.util.Assert;, + * @author Juergen Hoeller, +	@Nullable, +	private final HttpInputMessage httpInputMessage;, +, +, +	 * @deprecated as of 5.1, in favor of {@link #HttpMessageNotReadableException(String, HttpInputMessage)}, +	@Deprecated, +		this.httpInputMessage = null;, +	 * @deprecated as of 5.1, in favor of {@link #HttpMessageNotReadableException(String, Throwable, HttpInputMessage)}, +	@Deprecated, +		this.httpInputMessage = null;, +	}, +, +	/**, +	 * Create a new HttpMessageNotReadableException., +	 * @param msg the detail message, +	 * @param httpInputMessage the original HTTP message, +	 * @since 5.1, +	 */, +	public HttpMessageNotReadableException(String msg, HttpInputMessage httpInputMessage) {, +		super(msg);, +		this.httpInputMessage = httpInputMessage;, +	}, +, +	/**, +	 * Create a new HttpMessageNotReadableException., +	 * @param msg the detail message, +	 * @param cause the root cause (if any), +	 * @param httpInputMessage the original HTTP message, +	 * @since 5.1, +	 */, +	public HttpMessageNotReadableException(String msg, @Nullable Throwable cause, HttpInputMessage httpInputMessage) {, +		super(msg, cause);, +		this.httpInputMessage = httpInputMessage;, +	}, +, +, +	/**, +	 * Return the original HTTP message., +	 * @since 5.1, +	 */, +	public HttpInputMessage getHttpInputMessage() {, +		Assert.state(this.httpInputMessage != null, "No HttpInputMessage available - use non-deprecated constructors");, +		return this.httpInputMessage;, +++ b/spring-web/src/main/java/org/springframework/http/converter/BufferedImageHttpMessageConverter.java, +				throw new HttpMessageNotReadableException("No Content-Type header", inputMessage);, +						"Could not find javax.imageio.ImageReader for Content-Type [" + contentType + "]",, +						inputMessage);, +++ b/spring-web/src/main/java/org/springframework/http/converter/HttpMessageNotReadableException.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.http.HttpInputMessage;, +import org.springframework.util.Assert;, + * @author Juergen Hoeller, +	@Nullable, +	private final HttpInputMessage httpInputMessage;, +, +, +	 * @deprecated as of 5.1, in favor of {@link #HttpMessageNotReadableException(String, HttpInputMessage)}, +	@Deprecated, +		this.httpInputMessage = null;, +	 * @deprecated as of 5.1, in favor of {@link #HttpMessageNotReadableException(String, Throwable, HttpInputMessage)}, +	@Deprecated, +		this.httpInputMessage = null;, +	}, +, +	/**, +	 * Create a new HttpMessageNotReadableException., +	 * @param msg the detail message, +	 * @param httpInputMessage the original HTTP message, +	 * @since 5.1, +	 */, +	public HttpMessageNotReadableException(String msg, HttpInputMessage httpInputMessage) {, +		super(msg);, +		this.httpInputMessage = httpInputMessage;, +	}, +, +	/**, +	 * Create a new HttpMessageNotReadableException., +	 * @param msg the detail message, +	 * @param cause the root cause (if any), +	 * @param httpInputMessage the original HTTP message, +	 * @since 5.1, +	 */, +	public HttpMessageNotReadableException(String msg, @Nullable Throwable cause, HttpInputMessage httpInputMessage) {, +		super(msg, cause);, +		this.httpInputMessage = httpInputMessage;, +	}, +]