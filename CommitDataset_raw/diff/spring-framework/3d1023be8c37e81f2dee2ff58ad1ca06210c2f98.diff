[+++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +import static org.springframework.core.ReactiveTypeDescriptor.*;, +			// Ignore for the time being..., +		void registerAdapter(ReactiveAdapterRegistry registry) throws Exception {, +			Class<?> type = ClassUtils.forName("java.util.concurrent.Flow.Publisher", getClass().getClassLoader());, +			Method toFlowMethod = getMethod("publisherToFlowPublisher", Publisher.class);, +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, +import static org.springframework.core.ReactiveTypeDescriptor.*;, +			// Ignore for the time being..., +		void registerAdapter(ReactiveAdapterRegistry registry) throws Exception {, +			Class<?> type = ClassUtils.forName("java.util.concurrent.Flow.Publisher", getClass().getClassLoader());, +			Method toFlowMethod = getMethod("publisherToFlowPublisher", Publisher.class);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethod.java, +			return (super.hasMethodAnnotation(annotationType) ||, +					(annotationType == ResponseBody.class &&, +							this.returnValue instanceof ReactiveTypeHandler.CollectedValuesList));]