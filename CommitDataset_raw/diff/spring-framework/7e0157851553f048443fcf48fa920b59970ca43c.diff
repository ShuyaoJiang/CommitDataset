[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinitionReader.java, + * Copyright 2002-2013 the original author or authors., +	private Environment environment;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinitionReader.java, + * Copyright 2002-2013 the original author or authors., +	private Environment environment;, +++ b/spring-beans/src/main/java/org/springframework/beans/support/ResourceEditorRegistrar.java, + * Copyright 2002-2013 the original author or authors., +	 * Create a new ResourceEditorRegistrar for the given {@link ResourceLoader}, +	 * and {@link PropertyResolver}., +	 * @param propertyResolver the PropertyResolver (usually an Environment), +	 * @see org.springframework.core.env.Environment, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinitionReader.java, + * Copyright 2002-2013 the original author or authors., +	private Environment environment;, +++ b/spring-beans/src/main/java/org/springframework/beans/support/ResourceEditorRegistrar.java, + * Copyright 2002-2013 the original author or authors., +	 * Create a new ResourceEditorRegistrar for the given {@link ResourceLoader}, +	 * and {@link PropertyResolver}., +	 * @param propertyResolver the PropertyResolver (usually an Environment), +	 * @see org.springframework.core.env.Environment, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, + * Copyright 2002-2013 the original author or authors., +	 * Create a ClassPathScanningCandidateComponentProvider with a {@link StandardEnvironment}., +	/**, +	 * Create a ClassPathScanningCandidateComponentProvider with the given {@link Environment}., +	 * @param useDefaultFilters whether to register the default filters for the, +	 * {@link Component @Component}, {@link Repository @Repository},, +	 * {@link Service @Service}, and {@link Controller @Controller}, +	 * stereotype annotations, +	 * @param environment the Environment to use, +	 * @see #registerDefaultFilters(), +	 */, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinitionReader.java, + * Copyright 2002-2013 the original author or authors., +	private Environment environment;, +++ b/spring-beans/src/main/java/org/springframework/beans/support/ResourceEditorRegistrar.java, + * Copyright 2002-2013 the original author or authors., +	 * Create a new ResourceEditorRegistrar for the given {@link ResourceLoader}, +	 * and {@link PropertyResolver}., +	 * @param propertyResolver the PropertyResolver (usually an Environment), +	 * @see org.springframework.core.env.Environment, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, + * Copyright 2002-2013 the original author or authors., +	 * Create a ClassPathScanningCandidateComponentProvider with a {@link StandardEnvironment}., +	/**, +	 * Create a ClassPathScanningCandidateComponentProvider with the given {@link Environment}., +	 * @param useDefaultFilters whether to register the default filters for the, +	 * {@link Component @Component}, {@link Repository @Repository},, +	 * {@link Service @Service}, and {@link Controller @Controller}, +	 * stereotype annotations, +	 * @param environment the Environment to use, +	 * @see #registerDefaultFilters(), +	 */, +++ b/spring-core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, + * Copyright 2002-2013 the original author or authors., +	}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinitionReader.java, + * Copyright 2002-2013 the original author or authors., +	private Environment environment;, +++ b/spring-beans/src/main/java/org/springframework/beans/support/ResourceEditorRegistrar.java, + * Copyright 2002-2013 the original author or authors., +	 * Create a new ResourceEditorRegistrar for the given {@link ResourceLoader}, +	 * and {@link PropertyResolver}., +	 * @param propertyResolver the PropertyResolver (usually an Environment), +	 * @see org.springframework.core.env.Environment, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProvider.java, + * Copyright 2002-2013 the original author or authors., +	 * Create a ClassPathScanningCandidateComponentProvider with a {@link StandardEnvironment}., +	/**, +	 * Create a ClassPathScanningCandidateComponentProvider with the given {@link Environment}., +	 * @param useDefaultFilters whether to register the default filters for the, +	 * {@link Component @Component}, {@link Repository @Repository},, +	 * {@link Service @Service}, and {@link Controller @Controller}, +	 * stereotype annotations, +	 * @param environment the Environment to use, +	 * @see #registerDefaultFilters(), +	 */, +++ b/spring-core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, + * Copyright 2002-2013 the original author or authors., +	}, +++ b/spring-core/src/main/java/org/springframework/core/env/PropertySourcesPropertyResolver.java, + * Copyright 2002-2013 the original author or authors., +, +, +		if (this.propertySources != null) {, +		}, +		return getProperty(key, String.class);, +			logger.trace(String.format("getProperty(\"%s\", %s)", key, targetValueType.getSimpleName()));, +		if (this.propertySources != null) {, +					logger.debug(String.format("Searching for key '%s' in [%s]", key, propertySource.getName()));, +						logger.debug(String.format("Found key '%s' in [%s] with type [%s] and value '%s'",, +						throw new IllegalArgumentException(String.format(, +								"Cannot convert value [%s] from source type [%s] to target type [%s]",, +		}, +			logger.debug(String.format("Could not find key '%s' in any property source. Returning [null]", key));, +			logger.trace(String.format("getPropertyAsClass(\"%s\", %s)", key, targetValueType.getSimpleName()));, +		if (this.propertySources != null) {, +					logger.debug(String.format("Searching for key '%s' in [%s]", key, propertySource.getName()));, +				Object value = propertySource.getProperty(key);]