[+++ b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java, +	/**, +	 * Create a new AntPathMatcher with the default Ant path separator "/"., +	 */, +	public AntPathMatcher() {, +, +	}, +, +	/**, +	 * Create a new AntPathMatcher., +	 * @param pathSeparator the path separator to use, +	 * @since 4.1, +	 */, +	public AntPathMatcher(String pathSeparator) {, +		if(pathSeparator != null) {, +			this.pathSeparator = pathSeparator;, +		}, +	}, +		if (pattern1.endsWith(this.pathSeparator + "*")) {, +			return separatorConcat(pattern1.substring(0, pattern1.length() - 2), pattern2);, +		if (pattern1.endsWith(this.pathSeparator + "**")) {, +			return separatorConcat(pattern1, pattern2);, +		if (pattern1ContainsUriVar || starDotPos1 == -1 || this.pathSeparator.equals(".")) {, +			return separatorConcat(pattern1, pattern2);, +	private String separatorConcat(String path1, String path2) {, +		if (path1.endsWith(this.pathSeparator) || path2.startsWith(this.pathSeparator)) {, +		return path1 + this.pathSeparator + path2;, +++ b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java, +	/**, +	 * Create a new AntPathMatcher with the default Ant path separator "/"., +	 */, +	public AntPathMatcher() {, +, +	}, +, +	/**, +	 * Create a new AntPathMatcher., +	 * @param pathSeparator the path separator to use, +	 * @since 4.1, +	 */, +	public AntPathMatcher(String pathSeparator) {, +		if(pathSeparator != null) {, +			this.pathSeparator = pathSeparator;, +		}, +	}, +		if (pattern1.endsWith(this.pathSeparator + "*")) {, +			return separatorConcat(pattern1.substring(0, pattern1.length() - 2), pattern2);, +		if (pattern1.endsWith(this.pathSeparator + "**")) {, +			return separatorConcat(pattern1, pattern2);, +		if (pattern1ContainsUriVar || starDotPos1 == -1 || this.pathSeparator.equals(".")) {, +			return separatorConcat(pattern1, pattern2);, +	private String separatorConcat(String path1, String path2) {, +		if (path1.endsWith(this.pathSeparator) || path2.startsWith(this.pathSeparator)) {, +		return path1 + this.pathSeparator + path2;, +++ b/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java, +	@Test, +	public void noExtensionHandlingWithDotSeparator() {, +		pathMatcher.setPathSeparator(".");, +		assertEquals("/*.html.hotel.*", pathMatcher.combine("/*.html", "hotel.*"));, +	}, +, +++ b/spring-core/src/main/java/org/springframework/util/AntPathMatcher.java, +	/**, +	 * Create a new AntPathMatcher with the default Ant path separator "/"., +	 */, +	public AntPathMatcher() {, +, +	}, +, +	/**, +	 * Create a new AntPathMatcher., +	 * @param pathSeparator the path separator to use, +	 * @since 4.1, +	 */, +	public AntPathMatcher(String pathSeparator) {, +		if(pathSeparator != null) {, +			this.pathSeparator = pathSeparator;, +		}, +	}, +		if (pattern1.endsWith(this.pathSeparator + "*")) {, +			return separatorConcat(pattern1.substring(0, pattern1.length() - 2), pattern2);, +		if (pattern1.endsWith(this.pathSeparator + "**")) {, +			return separatorConcat(pattern1, pattern2);, +		if (pattern1ContainsUriVar || starDotPos1 == -1 || this.pathSeparator.equals(".")) {, +			return separatorConcat(pattern1, pattern2);, +	private String separatorConcat(String path1, String path2) {, +		if (path1.endsWith(this.pathSeparator) || path2.startsWith(this.pathSeparator)) {, +		return path1 + this.pathSeparator + path2;, +++ b/spring-core/src/test/java/org/springframework/util/AntPathMatcherTests.java, +	@Test, +	public void noExtensionHandlingWithDotSeparator() {, +		pathMatcher.setPathSeparator(".");, +		assertEquals("/*.html.hotel.*", pathMatcher.combine("/*.html", "hotel.*"));, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/DestinationPatternsMessageCondition.java, + * Copyright 2002-2014 the original author or authors., +		this(patterns, null, true);, +	 * Additional constructor with a customized path matcher., +	 * @param pathMatcher the customized path matcher to use with patterns]