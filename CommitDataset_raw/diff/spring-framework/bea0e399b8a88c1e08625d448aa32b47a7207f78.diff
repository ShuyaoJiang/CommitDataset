[+++ b/spring-core/src/main/java/org/springframework/core/env/Profiles.java, +	 * Test if this {@code Profiles} instance <em>matches</em> against the given, +	 * active profiles predicate., +	 * Create a new {@link Profiles} instance that checks for matches against, +	 * the given <em>profile strings</em>., +	 * @param profiles the <em>profile strings</em> to include, +++ b/spring-core/src/main/java/org/springframework/core/env/Profiles.java, +	 * Test if this {@code Profiles} instance <em>matches</em> against the given, +	 * active profiles predicate., +	 * Create a new {@link Profiles} instance that checks for matches against, +	 * the given <em>profile strings</em>., +	 * @param profiles the <em>profile strings</em> to include, +++ b/spring-core/src/main/java/org/springframework/core/env/ProfilesParser.java, +	static Profiles parse(String... expressions) {, +		return (operator == Operator.AND ? and(profiles) : or(profiles));, +		return (activeProfile) -> !profiles.matches(activeProfile);, +		ParsedProfiles(String[] expressions, Profiles[] parsed) {, +++ b/spring-core/src/main/java/org/springframework/core/env/Profiles.java, +	 * Test if this {@code Profiles} instance <em>matches</em> against the given, +	 * active profiles predicate., +	 * Create a new {@link Profiles} instance that checks for matches against, +	 * the given <em>profile strings</em>., +	 * @param profiles the <em>profile strings</em> to include, +++ b/spring-core/src/main/java/org/springframework/core/env/ProfilesParser.java, +	static Profiles parse(String... expressions) {, +		return (operator == Operator.AND ? and(profiles) : or(profiles));, +		return (activeProfile) -> !profiles.matches(activeProfile);, +		ParsedProfiles(String[] expressions, Profiles[] parsed) {, +++ b/spring-core/src/test/java/org/springframework/core/env/ProfilesTests.java, +import java.util.List;, + * @author Sam Brannen, +	public void ofEmptyElement() {, +		this.thrown.expect(IllegalArgumentException.class);, +		this.thrown.expectMessage("must contain text");, +		Profiles.of("  ");, +	}, +, +	@Test, +		assertTrue(profiles.matches(activeProfiles("spring")));, +		assertFalse(profiles.matches(activeProfiles("framework")));, +		assertFalse(profiles.matches(activeProfiles("spring")));, +		assertTrue(profiles.matches(activeProfiles("framework")));, +		assertTrue(profiles.matches(activeProfiles("spring")));, +		assertTrue(profiles.matches(activeProfiles("framework")));, +		assertFalse(profiles.matches(activeProfiles("java")));, +		assertFalse(profiles.matches(activeProfiles("spring")));, +		assertTrue(profiles.matches(activeProfiles("spring", "framework")));, +		assertTrue(profiles.matches(activeProfiles("framework")));, +		assertTrue(profiles.matches(activeProfiles("java")));, +		assertTrue(profiles.matches(activeProfiles("spring")));, +		assertTrue(profiles.matches(activeProfiles("framework")));, +		assertTrue(profiles.matches(activeProfiles("java")));, +		assertFalse(profiles.matches(activeProfiles("spring", "framework")));, +		assertFalse(profiles.matches(activeProfiles("spring", "framework", "java")));, +		assertTrue(profiles.matches(activeProfiles("spring")));, +		assertFalse(profiles.matches(activeProfiles("framework")));, +	}, +, +	@Test, +	public void ofSingleExpressionInverted() {, +		Profiles profiles = Profiles.of("!(spring)");, +		assertFalse(profiles.matches(activeProfiles("spring")));, +		assertTrue(profiles.matches(activeProfiles("framework")));, +		assertFalse(profiles.matches(activeProfiles("spring")));, +		assertTrue(profiles.matches(activeProfiles("framework")));, +	public void ofOrExpressionWithoutSpaces() {, +		assertTrue(profiles.matches(activeProfiles("spring")));, +		assertTrue(profiles.matches(activeProfiles("framework")));, +		assertTrue(profiles.matches(activeProfiles("spring", "framework")));, +		assertFalse(profiles.matches(activeProfiles("java")));, +	public void ofAndExpressionWithoutSpaces() {, +	public void ofAndExpressionWithoutParentheses() {, +		assertFalse(profiles.matches(activeProfiles("spring")));, +		assertFalse(profiles.matches(activeProfiles("framework")));, +		assertTrue(profiles.matches(activeProfiles("spring", "framework")));, +		assertFalse(profiles.matches(activeProfiles("java")));, +	public void ofNotAndExpressionWithoutSpaces() {, +		assertTrue(profiles.matches(activeProfiles("spring")));, +		assertTrue(profiles.matches(activeProfiles("framework")));, +		assertFalse(profiles.matches(activeProfiles("spring", "framework")));, +		assertTrue(profiles.matches(activeProfiles("java")));, +	public void ofNotOrExpressionWithoutSpaces() {, +		assertFalse(profiles.matches(activeProfiles("spring")));, +		assertFalse(profiles.matches(activeProfiles("framework")));, +		assertFalse(profiles.matches(activeProfiles("spring", "framework")));, +		assertTrue(profiles.matches(activeProfiles("java")));, +	public void ofComplexExpressionWithoutSpaces() {, +		assertFalse(profiles.matches(activeProfiles("spring")));, +		assertTrue(profiles.matches(activeProfiles("spring", "framework")));, +		assertTrue(profiles.matches(activeProfiles("spring", "java")));, +		assertFalse(profiles.matches(activeProfiles("java", "framework")));, +	private static Predicate<String> activeProfiles(String... profiles) {, +		return new MockActiveProfiles(profiles);, +	}, +, +		private final List<String> activeProfiles;, +		MockActiveProfiles(String[] activeProfiles) {, +			this.activeProfiles = Arrays.asList(activeProfiles);, +			// The following if-condition (which basically mimics, +			// AbstractEnvironment#validateProfile(String)) is necessary in order]