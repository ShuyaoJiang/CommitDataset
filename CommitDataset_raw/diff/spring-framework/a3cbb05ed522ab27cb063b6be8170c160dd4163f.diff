[+++ b/spring-framework-reference/src/aop-api.xml, +      <programlisting language="java"><![CDATA[public interface Pointcut {, +      <programlisting language="java"><![CDATA[public interface ClassFilter {, +      <programlisting language="java"><![CDATA[public interface MethodMatcher {, +          <para><programlisting language="xml">&lt;bean id="settersAndAbsquatulatePointcut" , +          <para><programlisting language="xml">&lt;bean id="settersAndAbsquatulateAdvisor" , +      <para><programlisting language="java">class TestStaticPointcut extends StaticMethodMatcherPointcut {, +        <programlisting language="java">public interface MethodInterceptor extends Interceptor {, +        <programlisting language="java">public class DebugInterceptor implements MethodInterceptor {, +        <programlisting language="java">public interface MethodBeforeAdvice extends BeforeAdvice {, +        <programlisting language="java">public class CountingBeforeAdvice implements MethodBeforeAdvice {, +        <programlisting language="java">afterThrowing([Method, args, target], subclassOfThrowable) </programlisting>, +        <programlisting language="java"><![CDATA[public class RemoteThrowsAdvice implements ThrowsAdvice {, +        <programlisting language="java"><![CDATA[public class ServletThrowsAdviceWithArguments implements ThrowsAdvice {, +        <programlisting language="java">public static class CombinedThrowsAdvice implements ThrowsAdvice {, +        <programlisting language="java">public interface AfterReturningAdvice extends Advice {, +        <programlisting language="java">public class CountingAfterReturningAdvice implements AfterReturningAdvice {, +        <programlisting language="java">public interface IntroductionInterceptor extends MethodInterceptor {, +        <programlisting language="java">public interface IntroductionAdvisor extends Advisor, IntroductionInfo {, +          <programlisting language="java">public interface Lockable {, +          <programlisting language="java">public class LockMixin extends DelegatingIntroductionInterceptor , +          <programlisting language="java">public class LockMixinAdvisor extends DefaultIntroductionAdvisor {, +      <para><programlisting language="xml">&lt;bean id="personTarget" class="com.mycompany.PersonImpl"&gt;, +      <programlisting language="java">Person person = (Person) factory.getBean("person");</programlisting>, +      <para><programlisting language="xml">&lt;bean id="personUser" class="com.mycompany.PersonUser"&gt;, +      <para><programlisting language="xml">&lt;bean id="myAdvisor" class="com.mycompany.MyAdvisor"&gt;, +      of 'global' advisors: <programlisting language="xml">, +    <para><programlisting language="xml">&lt;bean id="txProxyTemplate" abstract="true", +    anyway.<programlisting language="xml">&lt;bean id="myService" parent="txProxyTemplate"&gt;, +    settings:<programlisting language="xml">&lt;bean id="mySpecialService" parent="txProxyTemplate"&gt;, +    <para><programlisting language="java">ProxyFactory factory = new ProxyFactory(myBusinessInterfaceImpl);, +    <programlisting language="java">Advisor[] getAdvisors();, +    <para><programlisting language="java">Advised advised = (Advised) myObject;, +        <para><programlisting language="xml">&lt;bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"&gt;, +        <para><programlisting language="xml">&lt;bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/&gt;, +      <para><programlisting language="xml">&lt;bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/&gt;, +      <para><programlisting language="xml">&lt;bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/&gt;, +      <programlisting language="xml">&lt;bean id="transactionManager" , +      <para><programlisting language="xml">&lt;bean id="lockMixin" class="org.springframework.aop.LockMixin", +      <para><programlisting language="java">HotSwappableTargetSource swapper = , +      <para><programlisting language="xml">&lt;bean id="initialTarget" class="mycompany.OldTarget"/&gt;, +      <para><programlisting language="xml">&lt;bean id="businessObjectTarget" class="com.mycompany.MyBusinessObject" , +      <para><programlisting language="xml">&lt;bean id="poolConfigAdvisor" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean"&gt;, +      <programlisting language="java"><![CDATA[PoolingConfig conf = (PoolingConfig) beanFactory.getBean("businessObject");, +      <programlisting language="xml"><![CDATA[<bean id="prototypeTargetSource" class="org.springframework.aop.target.PrototypeTargetSource">, +      <programlisting language="xml"><![CDATA[<bean id="threadlocalTargetSource" class="org.springframework.aop.target.ThreadLocalTargetSource">, +++ b/spring-framework-reference/src/aop-api.xml, +      <programlisting language="java"><![CDATA[public interface Pointcut {, +      <programlisting language="java"><![CDATA[public interface ClassFilter {, +      <programlisting language="java"><![CDATA[public interface MethodMatcher {, +          <para><programlisting language="xml">&lt;bean id="settersAndAbsquatulatePointcut" , +          <para><programlisting language="xml">&lt;bean id="settersAndAbsquatulateAdvisor" , +      <para><programlisting language="java">class TestStaticPointcut extends StaticMethodMatcherPointcut {, +        <programlisting language="java">public interface MethodInterceptor extends Interceptor {, +        <programlisting language="java">public class DebugInterceptor implements MethodInterceptor {, +        <programlisting language="java">public interface MethodBeforeAdvice extends BeforeAdvice {, +        <programlisting language="java">public class CountingBeforeAdvice implements MethodBeforeAdvice {, +        <programlisting language="java">afterThrowing([Method, args, target], subclassOfThrowable) </programlisting>, +        <programlisting language="java"><![CDATA[public class RemoteThrowsAdvice implements ThrowsAdvice {, +        <programlisting language="java"><![CDATA[public class ServletThrowsAdviceWithArguments implements ThrowsAdvice {, +        <programlisting language="java">public static class CombinedThrowsAdvice implements ThrowsAdvice {, +        <programlisting language="java">public interface AfterReturningAdvice extends Advice {, +        <programlisting language="java">public class CountingAfterReturningAdvice implements AfterReturningAdvice {, +        <programlisting language="java">public interface IntroductionInterceptor extends MethodInterceptor {, +        <programlisting language="java">public interface IntroductionAdvisor extends Advisor, IntroductionInfo {, +          <programlisting language="java">public interface Lockable {, +          <programlisting language="java">public class LockMixin extends DelegatingIntroductionInterceptor , +          <programlisting language="java">public class LockMixinAdvisor extends DefaultIntroductionAdvisor {, +      <para><programlisting language="xml">&lt;bean id="personTarget" class="com.mycompany.PersonImpl"&gt;, +      <programlisting language="java">Person person = (Person) factory.getBean("person");</programlisting>, +      <para><programlisting language="xml">&lt;bean id="personUser" class="com.mycompany.PersonUser"&gt;, +      <para><programlisting language="xml">&lt;bean id="myAdvisor" class="com.mycompany.MyAdvisor"&gt;, +      of 'global' advisors: <programlisting language="xml">, +    <para><programlisting language="xml">&lt;bean id="txProxyTemplate" abstract="true", +    anyway.<programlisting language="xml">&lt;bean id="myService" parent="txProxyTemplate"&gt;, +    settings:<programlisting language="xml">&lt;bean id="mySpecialService" parent="txProxyTemplate"&gt;, +    <para><programlisting language="java">ProxyFactory factory = new ProxyFactory(myBusinessInterfaceImpl);, +    <programlisting language="java">Advisor[] getAdvisors();, +    <para><programlisting language="java">Advised advised = (Advised) myObject;, +        <para><programlisting language="xml">&lt;bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"&gt;, +        <para><programlisting language="xml">&lt;bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/&gt;, +      <para><programlisting language="xml">&lt;bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/&gt;, +      <para><programlisting language="xml">&lt;bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/&gt;, +      <programlisting language="xml">&lt;bean id="transactionManager" , +      <para><programlisting language="xml">&lt;bean id="lockMixin" class="org.springframework.aop.LockMixin", +      <para><programlisting language="java">HotSwappableTargetSource swapper = , +      <para><programlisting language="xml">&lt;bean id="initialTarget" class="mycompany.OldTarget"/&gt;, +      <para><programlisting language="xml">&lt;bean id="businessObjectTarget" class="com.mycompany.MyBusinessObject" , +      <para><programlisting language="xml">&lt;bean id="poolConfigAdvisor" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean"&gt;, +      <programlisting language="java"><![CDATA[PoolingConfig conf = (PoolingConfig) beanFactory.getBean("businessObject");, +      <programlisting language="xml"><![CDATA[<bean id="prototypeTargetSource" class="org.springframework.aop.target.PrototypeTargetSource">, +      <programlisting language="xml"><![CDATA[<bean id="threadlocalTargetSource" class="org.springframework.aop.target.ThreadLocalTargetSource">, +++ b/spring-framework-reference/src/aop.xml, +      <programlisting language="xml">&lt;aop:aspectj-autoproxy/&gt;</programlisting>, +      <programlisting language="xml">&lt;bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator" /&gt;</programlisting>, +      <programlisting language="xml">&lt;bean id="myAspect" class="org.xyz.NotVeryUsefulAspect"&gt;, +      <programlisting language="java">package org.xyz;, +      <programlisting language="java">@Pointcut("execution(* transfer(..))")<lineannotation>// the pointcut expression</lineannotation>, +        <programlisting language="java">bean(idOrNameOfBean)</programlisting>, +        <programlisting language="java">    @Pointcut("execution(public * *(..))")]