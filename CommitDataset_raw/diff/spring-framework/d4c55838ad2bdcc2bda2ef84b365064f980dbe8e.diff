[+++ b/src/reference/docbook/new-in-3.2.xml, +<chapter version="5.0", +         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd", +         xml:id="new-in-3.2" xmlns="http://docbook.org/ns/docbook", +         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +         xmlns:xs="http://www.w3.org/2001/XMLSchema", +         xmlns:ns="http://docbook.org/ns/docbook">, +    <para>The Spring MVC programming model now provides explicit Servlet 3, +    async support. <interfacename>@RequestMapping</interfacename> methods can, +    return one of:</para>, +, +        Spring MVC â€” for example, in response to some external event (JMS,, +        AMQP, etc.)</para>, +, +        to wrap a <interfacename>Callable</interfacename> and customize the, +        timeout value or the task executor to use.</para>, +    Introducing Servlet 3 Async Support</link> (SpringSource team, +    blog).</para>, +    fluent API and without a Servlet container. Server-side tests involve use, +    of the <classname>DispatcherServlet</classname> while client-side REST, +    tests rely on the <classname>RestTemplate</classname>. See <xref, +    linkend="spring-mvc-test-framework" />.</para>, +    available for resolving the requested media types from an incoming, +    request. The available implementations are based on path extension,, +    request parameter, 'Accept' header, and a fixed default content type., +    Equivalent options were previously available only in the, +    ContentNegotiatingViewResolver but are now available throughout.</para>, +    <para><classname>ContentNegotiationManager</classname> is the central, +    class to use when configuring content negotiation options. It accepts one, +    or more ContentNeogtiationStrategy instances and delegates to them. It can, +    be plugged into <classname>RequestMappingHandlerMapping</classname>,, +    <classname>ExceptionHandlerExceptionResolver</classname>, and, +    <classname>ContentNegotiatingViewResolver</classname>. The MVC namespace, +    and the MVC JavaConfig provide convenient options to configure all, +    that.</para>, +    also enables smart suffix pattern matching for incoming requests. See, +    <link, +    xl:href="https://github.com/SpringSource/spring-framework/commit/4fd7645">commit, +    message.</link></para>, +    <para>Classes annotated with, +    <interfacename>@ControllerAdvice</interfacename> can contain, +    <interfacename>@ExceptionHandler</interfacename>,, +    <interfacename>@ModelAttribute</interfacename> methods and those will, +    apply to <interfacename>@RequestMapping</interfacename> methods across, +    controller hierarchies as opposed to the controller hierarchy within which, +    they are declared. <interfacename>@ControllerAdvice</interfacename> is a, +    component annotation allowing implementation classes to be auto-detected, +    <para>A new <interfacename>@MatrixVariable</interfacename> annotation adds, +    support for extracting matrix variables from the request URI. For more, +    details see <xref linkend="mvc-ann-matrix-variables" />.</para>, +    <title>Abstract base class for code-based Servlet 3+ container, +    initialization</title>, +    <interfacename>WebApplicationInitializer</interfacename> interface is, +    provided to simplify code-based registration of a DispatcherServlet and, +    filters mapped to it. The new class is named, +    sub-class, +    <classname>AbstractAnnotationConfigDispatcherServletInitializer</classname>, +    can be used with Java-based Spring configuration. For more details see, +    <xref linkend="mvc-container-config" />.</para>, +    <interfacename>@ExceptionHandler</interfacename> method that handles, +    standard Spring MVC exceptions and returns a, +    <classname>ResponseEntity</classname> that allowing customizing and, +    writing the response with HTTP message converters. This servers as an, +    alternative to the <classname>DefaultHandlerExceptionResolver</classname>,, +    which does the same but returns a <classname>ModelAndView</classname>, +    instead.</para>, +    <para>See the revised <xref linkend="mvc-exceptionhandlers" /> including, +    information on customizing the default Servlet container error, +    page.</para>, +    <title>Support for generic types in the, +    <classname>RestTemplate</classname> and in, +    response to a generic type (e.g. <code>List&lt;Account&gt;</code>). There, +    are three new <code>exchange()</code> methods that accept, +    <classname>ParameterizedTypeReference</classname>, a new class that, +    enables capturing and passing generic type info.</para>, +    <para>In support of this feature, the, +    <interfacename>HttpMessageConverter</interfacename> is extended by, +    <interfacename>GenericHttpMessageConverter</interfacename> adding a method, +    for reading content given a specified parameterized type. The new, +    interface is implemented by the, +    <classname>MappingJacksonHttpMessageConverter</classname> and also by a, +    new <classname>Jaxb2CollectionHttpMessageConverter</classname> that can, +    <para>The Jackson JSON 2 library is now supported. Due to packaging, +    changes in the Jackson library, there are separate classes in Spring MVC, +    as well. Those are, +    <classname>MappingJackson2JsonView</classname>. Other related, +    configuration improvements include support for pretty printing as well as, +    a <classname>JacksonObjectMapperFactoryBean</classname> for convenient, +    customization of an <classname>ObjectMapper</classname> in XML, +    configuration.</para>, +    <interfacename>@RequestPart</interfacename> argument can now be followed, +    by an <interfacename>Errors</interfacename> argument making it possible to, +    handle validation errors (as a result of an, +    <interfacename>@Valid</interfacename> annotation) locally within the, +    <interfacename>@RequestMapping</interfacename> method., +    <interfacename>@RequestBody</interfacename> now also supports a required, +    flag.</para>, +    <interfacename>@RequestMapping</interfacename> methods as well as in the, +    <classname>RestTemplate</classname> in conjunction with Apache, +    HttpComponents HttpClient version 4.2 or later. The JDK]