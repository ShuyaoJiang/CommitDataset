[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-web/src/main/java/org/springframework/http/codec/DecoderHttpMessageReader.java, +import java.util.HashMap;, +import org.springframework.http.server.reactive.ServerHttpRequest;, +import org.springframework.http.server.reactive.ServerHttpResponse;, +public class DecoderHttpMessageReader<T> implements ServerHttpMessageReader<T> {, +, +	// ServerHttpMessageReader..., +, +	@Override, +	public Flux<T> read(ResolvableType streamType, ResolvableType elementType,, +			ServerHttpRequest request, ServerHttpResponse response, Map<String, Object> hints) {, +, +		Map<String, Object> allHints = new HashMap<>(4);, +		allHints.putAll(resolveReadHints(streamType, elementType, request, response));, +		allHints.putAll(hints);, +, +		return read(elementType, request, allHints);, +	}, +, +	@Override, +	public Mono<T> readMono(ResolvableType streamType, ResolvableType elementType,, +			ServerHttpRequest request, ServerHttpResponse response, Map<String, Object> hints) {, +, +		Map<String, Object> allHints = new HashMap<>(4);, +		allHints.putAll(resolveReadHints(streamType, elementType, request, response));, +		allHints.putAll(hints);, +, +		return readMono(elementType, request, allHints);, +	}, +, +	/**, +	 * Resolve hints to pass to the decoder, e.g. by checking for annotations, +	 * on a controller method parameter or checking the server request., +	 */, +	protected Map<String, Object> resolveReadHints(ResolvableType streamType,, +			ResolvableType elementType, ServerHttpRequest request, ServerHttpResponse response) {, +, +		return Collections.emptyMap();, +	}, +, +++ /dev/null, +++ /dev/null, +++ b/spring-web/src/main/java/org/springframework/http/codec/DecoderHttpMessageReader.java, +import java.util.HashMap;, +import org.springframework.http.server.reactive.ServerHttpRequest;, +import org.springframework.http.server.reactive.ServerHttpResponse;, +public class DecoderHttpMessageReader<T> implements ServerHttpMessageReader<T> {, +, +	// ServerHttpMessageReader..., +, +	@Override, +	public Flux<T> read(ResolvableType streamType, ResolvableType elementType,, +			ServerHttpRequest request, ServerHttpResponse response, Map<String, Object> hints) {, +, +		Map<String, Object> allHints = new HashMap<>(4);, +		allHints.putAll(resolveReadHints(streamType, elementType, request, response));, +		allHints.putAll(hints);, +, +		return read(elementType, request, allHints);, +	}, +, +	@Override, +	public Mono<T> readMono(ResolvableType streamType, ResolvableType elementType,, +			ServerHttpRequest request, ServerHttpResponse response, Map<String, Object> hints) {, +, +		Map<String, Object> allHints = new HashMap<>(4);, +		allHints.putAll(resolveReadHints(streamType, elementType, request, response));, +		allHints.putAll(hints);, +, +		return readMono(elementType, request, allHints);, +	}, +, +	/**, +	 * Resolve hints to pass to the decoder, e.g. by checking for annotations, +	 * on a controller method parameter or checking the server request., +	 */, +	protected Map<String, Object> resolveReadHints(ResolvableType streamType,, +			ResolvableType elementType, ServerHttpRequest request, ServerHttpResponse response) {, +, +		return Collections.emptyMap();, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, +import java.util.Collections;, +import java.util.HashMap;, +import org.springframework.http.server.reactive.ServerHttpRequest;, +import org.springframework.http.server.reactive.ServerHttpResponse;, +public class EncoderHttpMessageWriter<T> implements ServerHttpMessageWriter<T> {, +, +	// ServerHttpMessageWriter..., +, +	@Override, +	public Mono<Void> write(Publisher<? extends T> inputStream, ResolvableType streamType,, +			ResolvableType elementType, MediaType mediaType, ServerHttpRequest request,, +			ServerHttpResponse response, Map<String, Object> hints) {]