[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/jetty/JettyWebSocketClient.java, +import org.springframework.util.concurrent.ListenableFutureTask;, +	private AsyncListenableTaskExecutor taskExecutor;, +	 * {@link org.eclipse.jetty.websocket.client.WebSocketClient}., +	 * Constructor that accepts an existing, +	 * {@link org.eclipse.jetty.websocket.client.WebSocketClient} instance., +	 * Set an {@link AsyncListenableTaskExecutor} to use when opening connections., +	 *, +	 * <p>If this property is not configured, calls to  any of the, +	 * {@code doHandshake} methods will block until the connection is established., +		Callable<WebSocketSession> connectTask = new Callable<WebSocketSession>() {, +		};, +, +		if (this.taskExecutor != null) {, +			return this.taskExecutor.submitListenable(connectTask);, +		}, +		else {, +			ListenableFutureTask<WebSocketSession> task = new ListenableFutureTask<WebSocketSession>(connectTask);, +			task.run();, +			return task;, +		}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/jetty/JettyWebSocketClient.java, +import org.springframework.util.concurrent.ListenableFutureTask;, +	private AsyncListenableTaskExecutor taskExecutor;, +	 * {@link org.eclipse.jetty.websocket.client.WebSocketClient}., +	 * Constructor that accepts an existing, +	 * {@link org.eclipse.jetty.websocket.client.WebSocketClient} instance., +	 * Set an {@link AsyncListenableTaskExecutor} to use when opening connections., +	 *, +	 * <p>If this property is not configured, calls to  any of the, +	 * {@code doHandshake} methods will block until the connection is established., +		Callable<WebSocketSession> connectTask = new Callable<WebSocketSession>() {, +		};, +, +		if (this.taskExecutor != null) {, +			return this.taskExecutor.submitListenable(connectTask);, +		}, +		else {, +			ListenableFutureTask<WebSocketSession> task = new ListenableFutureTask<WebSocketSession>(connectTask);, +			task.run();, +			return task;, +		}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/standard/StandardWebSocketClient.java, +import org.springframework.util.concurrent.ListenableFutureTask;, +	private AsyncListenableTaskExecutor taskExecutor;, +	 * to obtain a (new) {@link WebSocketContainer} instance. Also see constructor, +	 * accepting existing {@code WebSocketContainer} instance., +	 * Constructor accepting an existing {@link WebSocketContainer} instance., +	 *, +	 * <p>For XML configuration see {@link WebSocketContainerFactoryBean}. For Java, +	 * the {@code WebSocketContainer} instance., +	 * Set an {@link AsyncListenableTaskExecutor} to use when opening connections., +	 *, +	 * <p>If this property is not configured, calls to  any of the, +	 * {@code doHandshake} methods will block until the connection is established., +		Callable<WebSocketSession> connectTask = new Callable<WebSocketSession>() {, +		};, +, +		if (this.taskExecutor != null) {, +			return this.taskExecutor.submitListenable(connectTask);, +		}, +		else {, +			ListenableFutureTask<WebSocketSession> task = new ListenableFutureTask<WebSocketSession>(connectTask);, +			task.run();, +			return task;, +		}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/jetty/JettyWebSocketClient.java, +import org.springframework.util.concurrent.ListenableFutureTask;, +	private AsyncListenableTaskExecutor taskExecutor;, +	 * {@link org.eclipse.jetty.websocket.client.WebSocketClient}., +	 * Constructor that accepts an existing, +	 * {@link org.eclipse.jetty.websocket.client.WebSocketClient} instance., +	 * Set an {@link AsyncListenableTaskExecutor} to use when opening connections., +	 *, +	 * <p>If this property is not configured, calls to  any of the, +	 * {@code doHandshake} methods will block until the connection is established., +		Callable<WebSocketSession> connectTask = new Callable<WebSocketSession>() {, +		};, +, +		if (this.taskExecutor != null) {, +			return this.taskExecutor.submitListenable(connectTask);, +		}, +		else {, +			ListenableFutureTask<WebSocketSession> task = new ListenableFutureTask<WebSocketSession>(connectTask);, +			task.run();, +			return task;, +		}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/client/standard/StandardWebSocketClient.java, +import org.springframework.util.concurrent.ListenableFutureTask;, +	private AsyncListenableTaskExecutor taskExecutor;, +	 * to obtain a (new) {@link WebSocketContainer} instance. Also see constructor, +	 * accepting existing {@code WebSocketContainer} instance., +	 * Constructor accepting an existing {@link WebSocketContainer} instance., +	 *, +	 * <p>For XML configuration see {@link WebSocketContainerFactoryBean}. For Java, +	 * the {@code WebSocketContainer} instance., +	 * Set an {@link AsyncListenableTaskExecutor} to use when opening connections., +	 *, +	 * <p>If this property is not configured, calls to  any of the, +	 * {@code doHandshake} methods will block until the connection is established.]