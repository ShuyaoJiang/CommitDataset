[+++ b/build.gradle, +		"http://fasterxml.github.com/jackson-core/javadoc/2.3.0/",, +		"http://fasterxml.github.com/jackson-databind/javadoc/2.3.0/",, +		optional("com.fasterxml.jackson.core:jackson-databind:2.3.0"), +		optional("com.fasterxml.jackson.core:jackson-databind:2.3.0"), +		optional("com.fasterxml.jackson.core:jackson-databind:2.3.0"), +		optional("com.fasterxml.jackson.core:jackson-databind:2.3.0"), +		optional("com.fasterxml.jackson.core:jackson-databind:2.3.0"), +		testCompile("com.fasterxml.jackson.core:jackson-databind:2.3.0"), +++ b/build.gradle, +		"http://fasterxml.github.com/jackson-core/javadoc/2.3.0/",, +		"http://fasterxml.github.com/jackson-databind/javadoc/2.3.0/",, +		optional("com.fasterxml.jackson.core:jackson-databind:2.3.0"), +		optional("com.fasterxml.jackson.core:jackson-databind:2.3.0"), +		optional("com.fasterxml.jackson.core:jackson-databind:2.3.0"), +		optional("com.fasterxml.jackson.core:jackson-databind:2.3.0"), +		optional("com.fasterxml.jackson.core:jackson-databind:2.3.0"), +		testCompile("com.fasterxml.jackson.core:jackson-databind:2.3.0"), +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MappingJackson2MessageConverter.java, +import java.util.concurrent.atomic.AtomicReference;, +import org.springframework.messaging.Message;, +import org.springframework.messaging.MessageHeaders;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.MimeType;, +, + * <p>Tested against Jackson 2.2 and 2.3; compatible with Jackson 2.0 and higher., + *, + * @author Juergen Hoeller, +	// Check for Jackson 2.3's overloaded canDeserialize/canSerialize variants with cause reference, +	private static final boolean jackson23Available =, +			ClassUtils.hasMethod(ObjectMapper.class, "canDeserialize", JavaType.class, AtomicReference.class);, +, +, +		JavaType javaType = this.objectMapper.constructType(targetClass);, +		if (!jackson23Available || !logger.isWarnEnabled()) {, +			return (this.objectMapper.canDeserialize(javaType) && supportsMimeType(message.getHeaders()));, +		}, +		AtomicReference<Throwable> causeRef = new AtomicReference<Throwable>();, +		if (this.objectMapper.canDeserialize(javaType, causeRef) && supportsMimeType(message.getHeaders())) {, +			return true;, +		}, +		Throwable cause = causeRef.get();, +		if (cause != null) {, +			logger.warn("Failed to evaluate deserialization for type: " + javaType);, +		}, +		return false;, +		if (!jackson23Available || !logger.isWarnEnabled()) {, +		AtomicReference<Throwable> causeRef = new AtomicReference<Throwable>();, +		if (this.objectMapper.canSerialize(payload.getClass(), causeRef) && supportsMimeType(headers)) {, +			return true;, +		}, +		Throwable cause = causeRef.get();, +		if (cause != null) {, +			logger.warn("Failed to evaluate serialization for type: " + payload.getClass());, +		}, +		return false;, +	}, +++ b/build.gradle, +		"http://fasterxml.github.com/jackson-core/javadoc/2.3.0/",, +		"http://fasterxml.github.com/jackson-databind/javadoc/2.3.0/",, +		optional("com.fasterxml.jackson.core:jackson-databind:2.3.0"), +		optional("com.fasterxml.jackson.core:jackson-databind:2.3.0"), +		optional("com.fasterxml.jackson.core:jackson-databind:2.3.0"), +		optional("com.fasterxml.jackson.core:jackson-databind:2.3.0"), +		optional("com.fasterxml.jackson.core:jackson-databind:2.3.0"), +		testCompile("com.fasterxml.jackson.core:jackson-databind:2.3.0"), +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/MappingJackson2MessageConverter.java, +import java.util.concurrent.atomic.AtomicReference;, +import org.springframework.messaging.Message;, +import org.springframework.messaging.MessageHeaders;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.MimeType;, +, + * <p>Tested against Jackson 2.2 and 2.3; compatible with Jackson 2.0 and higher., + *, + * @author Juergen Hoeller, +	// Check for Jackson 2.3's overloaded canDeserialize/canSerialize variants with cause reference, +	private static final boolean jackson23Available =, +			ClassUtils.hasMethod(ObjectMapper.class, "canDeserialize", JavaType.class, AtomicReference.class);, +, +, +		JavaType javaType = this.objectMapper.constructType(targetClass);, +		if (!jackson23Available || !logger.isWarnEnabled()) {, +			return (this.objectMapper.canDeserialize(javaType) && supportsMimeType(message.getHeaders()));, +		}, +		AtomicReference<Throwable> causeRef = new AtomicReference<Throwable>();, +		if (this.objectMapper.canDeserialize(javaType, causeRef) && supportsMimeType(message.getHeaders())) {, +			return true;, +		}, +		Throwable cause = causeRef.get();, +		if (cause != null) {, +			logger.warn("Failed to evaluate deserialization for type: " + javaType);, +		}, +		return false;, +		if (!jackson23Available || !logger.isWarnEnabled()) {, +		AtomicReference<Throwable> causeRef = new AtomicReference<Throwable>();, +		if (this.objectMapper.canSerialize(payload.getClass(), causeRef) && supportsMimeType(headers)) {, +			return true;, +		}, +		Throwable cause = causeRef.get();]