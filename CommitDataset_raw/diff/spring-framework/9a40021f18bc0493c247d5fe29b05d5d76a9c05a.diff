[+++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/AbstractContextLoader.java, +		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath;, +		ClassPathResource classPathResource = new ClassPathResource(resourcePath, clazz);, +		if (classPathResource.exists()) {, +				logger.info(String.format("Detected default resource location \"%s\" for test class [%s].",, +					prefixedResourcePath, clazz.getName()));, +			return new String[] { prefixedResourcePath };, +		if (logger.isInfoEnabled()) {, +			logger.info(String.format("Could not detect default resource locations for test class [%s]: ", +					+ "%s does not exist.", clazz.getName(), classPathResource));, +		}, +		return EMPTY_STRING_ARRAY;, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/AbstractContextLoader.java, +		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath;, +		ClassPathResource classPathResource = new ClassPathResource(resourcePath, clazz);, +		if (classPathResource.exists()) {, +				logger.info(String.format("Detected default resource location \"%s\" for test class [%s].",, +					prefixedResourcePath, clazz.getName()));, +			return new String[] { prefixedResourcePath };, +		if (logger.isInfoEnabled()) {, +			logger.info(String.format("Could not detect default resource locations for test class [%s]: ", +					+ "%s does not exist.", clazz.getName(), classPathResource));, +		}, +		return EMPTY_STRING_ARRAY;, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/DelegatingSmartContextLoader.java, +			logger.debug(String.format("Delegating to %s to process context configuration %s.", name(loader),, +						+ "configuration %s; configure one or the other, but not both.", configAttributes));, +					logger.info(String.format("%s detected default locations for context configuration %s.",, +					"%s should NOT have detected default configuration classes for context configuration %s.",, +						"%s detected default configuration classes for context configuration %s.",, +					"%s should NOT have detected default locations for context configuration %s.",, +					"Neither %s nor %s was able to detect defaults for context configuration %s.", name(xmlLoader),, +							+ "were detected for context configuration %s; configure one or the other, but not both.",, +					logger.debug(String.format("Delegating to %s to load context from %s.", name(loader), mergedConfig));, +			"Neither %s nor %s was able to load an ApplicationContext from %s.", name(xmlLoader),, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/AbstractContextLoader.java, +		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath;, +		ClassPathResource classPathResource = new ClassPathResource(resourcePath, clazz);, +		if (classPathResource.exists()) {, +				logger.info(String.format("Detected default resource location \"%s\" for test class [%s].",, +					prefixedResourcePath, clazz.getName()));, +			return new String[] { prefixedResourcePath };, +		if (logger.isInfoEnabled()) {, +			logger.info(String.format("Could not detect default resource locations for test class [%s]: ", +					+ "%s does not exist.", clazz.getName(), classPathResource));, +		}, +		return EMPTY_STRING_ARRAY;, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/DelegatingSmartContextLoader.java, +			logger.debug(String.format("Delegating to %s to process context configuration %s.", name(loader),, +						+ "configuration %s; configure one or the other, but not both.", configAttributes));, +					logger.info(String.format("%s detected default locations for context configuration %s.",, +					"%s should NOT have detected default configuration classes for context configuration %s.",, +						"%s detected default configuration classes for context configuration %s.",, +					"%s should NOT have detected default locations for context configuration %s.",, +					"Neither %s nor %s was able to detect defaults for context configuration %s.", name(xmlLoader),, +							+ "were detected for context configuration %s; configure one or the other, but not both.",, +					logger.debug(String.format("Delegating to %s to load context from %s.", name(loader), mergedConfig));, +			"Neither %s nor %s was able to load an ApplicationContext from %s.", name(xmlLoader),, +++ b/org.springframework.test/src/test/java/org/springframework/test/context/support/DelegatingSmartContextLoaderTests.java, +, +		static class NotAConfigClass {, +, +		}, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/AbstractContextLoader.java, +		String prefixedResourcePath = ResourceUtils.CLASSPATH_URL_PREFIX + resourcePath;, +		ClassPathResource classPathResource = new ClassPathResource(resourcePath, clazz);, +		if (classPathResource.exists()) {, +				logger.info(String.format("Detected default resource location \"%s\" for test class [%s].",, +					prefixedResourcePath, clazz.getName()));, +			return new String[] { prefixedResourcePath };, +		if (logger.isInfoEnabled()) {, +			logger.info(String.format("Could not detect default resource locations for test class [%s]: ", +					+ "%s does not exist.", clazz.getName(), classPathResource));, +		}, +		return EMPTY_STRING_ARRAY;, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/DelegatingSmartContextLoader.java, +			logger.debug(String.format("Delegating to %s to process context configuration %s.", name(loader),, +						+ "configuration %s; configure one or the other, but not both.", configAttributes));, +					logger.info(String.format("%s detected default locations for context configuration %s.",, +					"%s should NOT have detected default configuration classes for context configuration %s.",, +						"%s detected default configuration classes for context configuration %s.",, +					"%s should NOT have detected default locations for context configuration %s.",, +					"Neither %s nor %s was able to detect defaults for context configuration %s.", name(xmlLoader),, +							+ "were detected for context configuration %s; configure one or the other, but not both.",, +					logger.debug(String.format("Delegating to %s to load context from %s.", name(loader), mergedConfig));, +			"Neither %s nor %s was able to load an ApplicationContext from %s.", name(xmlLoader),, +++ b/org.springframework.test/src/test/java/org/springframework/test/context/support/DelegatingSmartContextLoaderTests.java, +, +		static class NotAConfigClass {, +, +		}, +++ b/org.springframework.test/src/test/resources/log4j.xml, +<!--, +		<level value="info" />, +		<level value="info" />, +-->, +		<level value="fatal" />]