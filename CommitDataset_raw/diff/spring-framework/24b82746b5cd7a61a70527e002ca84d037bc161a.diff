[+++ b/spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpComponentsHttpInvokerRequestExecutor.java, + * @author Stephane Nicoll, +		RequestConfig requestConfig = createRequestConfig(config);, +		if (requestConfig != null) {, +			httpPost.setConfig(requestConfig);, +		}, +	 * Create a {@link RequestConfig} for the given configuration. Can return {@code null}, +	 * to indicate that no custom request config should be set and the defaults of the, +	 * {@link HttpClient} should be used., +	 * @return the RequestConfig to use, +	protected RequestConfig createRequestConfig(HttpInvokerClientConfiguration config) {, +++ b/spring-web/src/main/java/org/springframework/remoting/httpinvoker/HttpComponentsHttpInvokerRequestExecutor.java, + * @author Stephane Nicoll, +		RequestConfig requestConfig = createRequestConfig(config);, +		if (requestConfig != null) {, +			httpPost.setConfig(requestConfig);, +		}, +	 * Create a {@link RequestConfig} for the given configuration. Can return {@code null}, +	 * to indicate that no custom request config should be set and the defaults of the, +	 * {@link HttpClient} should be used., +	 * @return the RequestConfig to use, +	protected RequestConfig createRequestConfig(HttpInvokerClientConfiguration config) {, +++ b/spring-web/src/test/java/org/springframework/remoting/httpinvoker/HttpComponentsHttpInvokerRequestExecutorTests.java, +import org.apache.http.client.HttpClient;, +import org.apache.http.client.config.RequestConfig;, +import org.apache.http.impl.client.CloseableHttpClient;, +import org.apache.http.impl.client.HttpClientBuilder;, +	@SuppressWarnings("deprecation"), +	@Test, +	public void assertLegacyCustomConfig() {, +		HttpClient httpClient = new org.apache.http.impl.client.DefaultHttpClient(); // Does not support RequestConfig, +		HttpComponentsHttpInvokerRequestExecutor executor = new HttpComponentsHttpInvokerRequestExecutor(httpClient);, +, +		executor.setConnectTimeout(1234);, +		assertEquals(1234, httpClient.getParams().getIntParameter(, +				org.apache.http.params.CoreConnectionPNames.CONNECTION_TIMEOUT, 0));, +, +		executor.setReadTimeout(4567);, +		assertEquals(4567, httpClient.getParams().getIntParameter(, +				org.apache.http.params.CoreConnectionPNames.SO_TIMEOUT, 0));, +	}, +, +	@Test, +	public void ignoreFactorySettings() throws IOException {, +		CloseableHttpClient httpClient = HttpClientBuilder.create().build();, +		HttpComponentsHttpInvokerRequestExecutor executor = new HttpComponentsHttpInvokerRequestExecutor(httpClient) {, +			@Override, +			protected RequestConfig createRequestConfig(HttpInvokerClientConfiguration config) {, +				return null;, +			}, +		};, +, +		HttpInvokerClientConfiguration config = mockHttpInvokerClientConfiguration("http://fake-service");, +		HttpPost httpPost = executor.createHttpPost(config);, +		assertNull("custom request config should not be set", httpPost.getConfig());, +	}, +]