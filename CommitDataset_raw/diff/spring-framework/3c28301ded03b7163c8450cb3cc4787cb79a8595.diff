[+++ b/spring-context/src/main/java/org/springframework/cache/annotation/AnnotationCacheOperationSource.java, + * Copyright 2002-2014 the original author or authors., + * @author Stephane Nicoll, +	protected Collection<CacheOperation> findCacheOperations(final Class<?> clazz) {, +		return determineCacheOperations(new CacheOperationProvider() {, +			@Override, +			public Collection<CacheOperation> getCacheOperations(CacheAnnotationParser parser) {, +				return parser.parseCacheAnnotations(clazz);, +			}, +		});, +, +	protected Collection<CacheOperation> findCacheOperations(final Method method) {, +		return determineCacheOperations(new CacheOperationProvider() {, +			@Override, +			public Collection<CacheOperation> getCacheOperations(CacheAnnotationParser parser) {, +				return parser.parseCacheAnnotations(method);, +			}, +		});, +	 * Determine the cache operation(s) for the given {@link CacheOperationProvider}., +	 * @param provider the cache operation provider to use, +	protected Collection<CacheOperation> determineCacheOperations(CacheOperationProvider provider) {, +			Collection<CacheOperation> annOps = provider.getCacheOperations(annotationParser);, +	/**, +	 * Callback interface providing {@link CacheOperation} instance(s) based on, +	 * a given {@link CacheAnnotationParser}., +	 */, +	protected interface CacheOperationProvider {, +, +		/**, +		 * Returns the {@link CacheOperation} instance(s) provided by the specified parser., +		 *, +		 * @param parser the parser to use, +		 * @return the cache operations or {@code null} if none is found, +		 */, +		Collection<CacheOperation> getCacheOperations(CacheAnnotationParser parser);, +	}, +, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/AnnotationCacheOperationSource.java, + * Copyright 2002-2014 the original author or authors., + * @author Stephane Nicoll, +	protected Collection<CacheOperation> findCacheOperations(final Class<?> clazz) {, +		return determineCacheOperations(new CacheOperationProvider() {, +			@Override, +			public Collection<CacheOperation> getCacheOperations(CacheAnnotationParser parser) {, +				return parser.parseCacheAnnotations(clazz);, +			}, +		});, +, +	protected Collection<CacheOperation> findCacheOperations(final Method method) {, +		return determineCacheOperations(new CacheOperationProvider() {, +			@Override, +			public Collection<CacheOperation> getCacheOperations(CacheAnnotationParser parser) {, +				return parser.parseCacheAnnotations(method);, +			}, +		});, +	 * Determine the cache operation(s) for the given {@link CacheOperationProvider}., +	 * @param provider the cache operation provider to use, +	protected Collection<CacheOperation> determineCacheOperations(CacheOperationProvider provider) {, +			Collection<CacheOperation> annOps = provider.getCacheOperations(annotationParser);, +	/**, +	 * Callback interface providing {@link CacheOperation} instance(s) based on, +	 * a given {@link CacheAnnotationParser}., +	 */, +	protected interface CacheOperationProvider {, +, +		/**, +		 * Returns the {@link CacheOperation} instance(s) provided by the specified parser., +		 *, +		 * @param parser the parser to use, +		 * @return the cache operations or {@code null} if none is found, +		 */, +		Collection<CacheOperation> getCacheOperations(CacheAnnotationParser parser);, +	}, +, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/CacheAnnotationParser.java, + * Copyright 2002-2014 the original author or authors., +import java.lang.reflect.Method;, + * @author Stephane Nicoll, +	 * Parses the cache definition for the given class,, +	 * metadata attribute class. Returns {@code null} if the class, +	 * @param type the annotated class, +	 * @see AnnotationCacheOperationSource#findCacheOperations(Class), +	Collection<CacheOperation> parseCacheAnnotations(Class<?> type);, +, +	/**, +	 * Parses the cache definition for the given method,, +	 * based on a known annotation type., +	 * <p>This essentially parses a known cache annotation into Spring's, +	 * metadata attribute class. Returns {@code null} if the method, +	 * is not cacheable., +	 * @param method the annotated method, +	 * @return CacheOperation the configured caching operation,, +	 * or {@code null} if none was found, +	 * @see AnnotationCacheOperationSource#findCacheOperations(Method), +	 */, +	Collection<CacheOperation> parseCacheAnnotations(Method method);, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/AnnotationCacheOperationSource.java, + * Copyright 2002-2014 the original author or authors., + * @author Stephane Nicoll, +	protected Collection<CacheOperation> findCacheOperations(final Class<?> clazz) {]