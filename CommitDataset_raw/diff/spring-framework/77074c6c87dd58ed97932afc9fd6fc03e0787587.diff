[+++ b/org.springframework.core/src/main/java/org/springframework/util/PropertyPlaceholderHelper.java, + * Copyright 2002-2010 the original author or authors., +import java.util.HashMap;, +import java.util.Map;, +	private static final Map<String, String> wellKnownSimplePrefixes = new HashMap<String, String>(4);, +, +	static {, +		wellKnownSimplePrefixes.put("}", "{");, +		wellKnownSimplePrefixes.put("]", "[");, +		wellKnownSimplePrefixes.put(")", "(");, +	}, +, +, +	private final String simplePrefix;, +, +		String simplePrefixForSuffix = wellKnownSimplePrefixes.get(this.placeholderSuffix);, +		if (simplePrefixForSuffix != null && this.placeholderPrefix.endsWith(simplePrefixForSuffix)) {, +			this.simplePrefix = simplePrefixForSuffix;, +		}, +		else {, +			this.simplePrefix = this.placeholderPrefix;, +		}, +			else if (StringUtils.substringMatch(buf, index, this.simplePrefix)) {, +				index = index + this.simplePrefix.length();, +++ b/org.springframework.core/src/main/java/org/springframework/util/PropertyPlaceholderHelper.java, + * Copyright 2002-2010 the original author or authors., +import java.util.HashMap;, +import java.util.Map;, +	private static final Map<String, String> wellKnownSimplePrefixes = new HashMap<String, String>(4);, +, +	static {, +		wellKnownSimplePrefixes.put("}", "{");, +		wellKnownSimplePrefixes.put("]", "[");, +		wellKnownSimplePrefixes.put(")", "(");, +	}, +, +, +	private final String simplePrefix;, +, +		String simplePrefixForSuffix = wellKnownSimplePrefixes.get(this.placeholderSuffix);, +		if (simplePrefixForSuffix != null && this.placeholderPrefix.endsWith(simplePrefixForSuffix)) {, +			this.simplePrefix = simplePrefixForSuffix;, +		}, +		else {, +			this.simplePrefix = this.placeholderPrefix;, +		}, +			else if (StringUtils.substringMatch(buf, index, this.simplePrefix)) {, +				index = index + this.simplePrefix.length();, +++ b/org.springframework.core/src/test/java/org/springframework/util/SystemPropertyUtilsTests.java, + * Copyright 2002-2010 the original author or authors., +	public void testReplaceFromSystemPropertyWithDefault() {, +		System.setProperty("test.prop", "bar");, +		try {, +			String resolved = SystemPropertyUtils.resolvePlaceholders("${test.prop:foo}");, +			assertEquals("bar", resolved);, +		}, +		finally {, +			System.getProperties().remove("test.prop");, +		}, +	}, +, +	@Test, +	public void testReplaceFromSystemPropertyWithExpressionDefault() {, +		System.setProperty("test.prop", "bar");, +		try {, +			String resolved = SystemPropertyUtils.resolvePlaceholders("${test.prop:#{foo.bar}}");, +			assertEquals("bar", resolved);, +		}, +		finally {, +			System.getProperties().remove("test.prop");, +		}, +	}, +, +	@Test, +	public void testReplaceFromSystemPropertyWithExpressionContainingDefault() {, +		System.setProperty("test.prop", "bar");, +		try {, +			String resolved = SystemPropertyUtils.resolvePlaceholders("${test.prop:Y#{foo.bar}X}");, +			assertEquals("bar", resolved);, +		}, +		finally {, +			System.getProperties().remove("test.prop");, +		}, +	}, +, +	@Test, +	@Test, +	public void testReplaceWithExpressionDefault() {, +		String resolved = SystemPropertyUtils.resolvePlaceholders("${test.prop:#{foo.bar}}");, +		assertEquals("#{foo.bar}", resolved);, +	}, +, +	@Test, +	public void testReplaceWithExpressionContainingDefault() {, +		String resolved = SystemPropertyUtils.resolvePlaceholders("${test.prop:Y#{foo.bar}X}");, +		assertEquals("Y#{foo.bar}X", resolved);, +	}, +]