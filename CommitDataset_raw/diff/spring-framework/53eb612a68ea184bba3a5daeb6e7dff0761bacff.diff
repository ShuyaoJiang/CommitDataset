[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OpAnd.java, +import org.springframework.expression.spel.SpelMessage;, + * @author Mark Fisher, +			TypedValue typedValue = getLeftOperand().getValueInternal(state);, +			this.assertTypedValueNotNull(typedValue);, +			leftValue = (Boolean)state.convertValue(typedValue, BOOLEAN_TYPE_DESCRIPTOR);, +			TypedValue typedValue = getRightOperand().getValueInternal(state);, +			this.assertTypedValueNotNull(typedValue);, +			rightValue = (Boolean)state.convertValue(typedValue, BOOLEAN_TYPE_DESCRIPTOR);, +	private void assertTypedValueNotNull(TypedValue typedValue) {, +		if (TypedValue.NULL_TYPED_VALUE.equals(typedValue)) {, +			throw new SpelEvaluationException(SpelMessage.TYPE_CONVERSION_ERROR, "null", "boolean");, +		}, +	}, +, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OpAnd.java, +import org.springframework.expression.spel.SpelMessage;, + * @author Mark Fisher, +			TypedValue typedValue = getLeftOperand().getValueInternal(state);, +			this.assertTypedValueNotNull(typedValue);, +			leftValue = (Boolean)state.convertValue(typedValue, BOOLEAN_TYPE_DESCRIPTOR);, +			TypedValue typedValue = getRightOperand().getValueInternal(state);, +			this.assertTypedValueNotNull(typedValue);, +			rightValue = (Boolean)state.convertValue(typedValue, BOOLEAN_TYPE_DESCRIPTOR);, +	private void assertTypedValueNotNull(TypedValue typedValue) {, +		if (TypedValue.NULL_TYPED_VALUE.equals(typedValue)) {, +			throw new SpelEvaluationException(SpelMessage.TYPE_CONVERSION_ERROR, "null", "boolean");, +		}, +	}, +, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OpOr.java, +import org.springframework.expression.TypedValue;, +import org.springframework.expression.spel.SpelMessage;, + * @author Mark Fisher, +			TypedValue typedValue = getLeftOperand().getValueInternal(state);, +			this.assertTypedValueNotNull(typedValue);, +			leftValue = (Boolean)state.convertValue(typedValue, BOOLEAN_TYPE_DESCRIPTOR);, +			TypedValue typedValue = getRightOperand().getValueInternal(state);, +			this.assertTypedValueNotNull(typedValue);, +			rightValue = (Boolean)state.convertValue(typedValue, BOOLEAN_TYPE_DESCRIPTOR);, +	private void assertTypedValueNotNull(TypedValue typedValue) {, +		if (TypedValue.NULL_TYPED_VALUE.equals(typedValue)) {, +			throw new SpelEvaluationException(SpelMessage.TYPE_CONVERSION_ERROR, "null", "boolean");, +		}, +	}, +, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OpAnd.java, +import org.springframework.expression.spel.SpelMessage;, + * @author Mark Fisher, +			TypedValue typedValue = getLeftOperand().getValueInternal(state);, +			this.assertTypedValueNotNull(typedValue);, +			leftValue = (Boolean)state.convertValue(typedValue, BOOLEAN_TYPE_DESCRIPTOR);, +			TypedValue typedValue = getRightOperand().getValueInternal(state);, +			this.assertTypedValueNotNull(typedValue);, +			rightValue = (Boolean)state.convertValue(typedValue, BOOLEAN_TYPE_DESCRIPTOR);, +	private void assertTypedValueNotNull(TypedValue typedValue) {, +		if (TypedValue.NULL_TYPED_VALUE.equals(typedValue)) {, +			throw new SpelEvaluationException(SpelMessage.TYPE_CONVERSION_ERROR, "null", "boolean");, +		}, +	}, +, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OpOr.java, +import org.springframework.expression.TypedValue;, +import org.springframework.expression.spel.SpelMessage;, + * @author Mark Fisher, +			TypedValue typedValue = getLeftOperand().getValueInternal(state);, +			this.assertTypedValueNotNull(typedValue);, +			leftValue = (Boolean)state.convertValue(typedValue, BOOLEAN_TYPE_DESCRIPTOR);, +			TypedValue typedValue = getRightOperand().getValueInternal(state);, +			this.assertTypedValueNotNull(typedValue);, +			rightValue = (Boolean)state.convertValue(typedValue, BOOLEAN_TYPE_DESCRIPTOR);, +	private void assertTypedValueNotNull(TypedValue typedValue) {, +		if (TypedValue.NULL_TYPED_VALUE.equals(typedValue)) {, +			throw new SpelEvaluationException(SpelMessage.TYPE_CONVERSION_ERROR, "null", "boolean");, +		}, +	}, +, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorNot.java, +import org.springframework.expression.TypedValue;, +import org.springframework.expression.spel.SpelMessage;, + * @author Mark Fisher, +			TypedValue typedValue = children[0].getValueInternal(state);, +			if (TypedValue.NULL_TYPED_VALUE.equals(typedValue)) {, +				throw new SpelEvaluationException(SpelMessage.TYPE_CONVERSION_ERROR, "null", "boolean");, +			}, +			boolean value = (Boolean) state.convertValue(typedValue, BOOLEAN_TYPE_DESCRIPTOR);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OpAnd.java, +import org.springframework.expression.spel.SpelMessage;, + * @author Mark Fisher, +			TypedValue typedValue = getLeftOperand().getValueInternal(state);, +			this.assertTypedValueNotNull(typedValue);, +			leftValue = (Boolean)state.convertValue(typedValue, BOOLEAN_TYPE_DESCRIPTOR);, +			TypedValue typedValue = getRightOperand().getValueInternal(state);, +			this.assertTypedValueNotNull(typedValue);, +			rightValue = (Boolean)state.convertValue(typedValue, BOOLEAN_TYPE_DESCRIPTOR);, +	private void assertTypedValueNotNull(TypedValue typedValue) {, +		if (TypedValue.NULL_TYPED_VALUE.equals(typedValue)) {, +			throw new SpelEvaluationException(SpelMessage.TYPE_CONVERSION_ERROR, "null", "boolean");, +		}, +	}]