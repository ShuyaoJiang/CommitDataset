[+++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +	 * <p>If the supplied byte array represents text such as XML or JSON, the, +	 * {@link #setCharacterEncoding character encoding} should typically be, +	 * set as well., +	 * @see #setCharacterEncoding(String), +	 * @return the content as a byte array, potentially {@code null}, +	 * {@linkplain #getCharacterEncoding character encoding}., +	 * @return the content as a {@code String}, potentially {@code null}, +	 * @throws IllegalStateException if the character encoding has not been set, +	 * @throws UnsupportedEncodingException if the character encoding is not supported, +	 * @see #getContentAsByteArray(), +	public String getContentAsString() throws IllegalStateException, UnsupportedEncodingException {, +		Assert.state(this.characterEncoding != null,, +				"Cannot get content as a String for a null character encoding. " +, +				"Consider setting the characterEncoding in the request.");, +, +		return new String(this.content, this.characterEncoding);, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +	 * <p>If the supplied byte array represents text such as XML or JSON, the, +	 * {@link #setCharacterEncoding character encoding} should typically be, +	 * set as well., +	 * @see #setCharacterEncoding(String), +	 * @return the content as a byte array, potentially {@code null}, +	 * {@linkplain #getCharacterEncoding character encoding}., +	 * @return the content as a {@code String}, potentially {@code null}, +	 * @throws IllegalStateException if the character encoding has not been set, +	 * @throws UnsupportedEncodingException if the character encoding is not supported, +	 * @see #getContentAsByteArray(), +	public String getContentAsString() throws IllegalStateException, UnsupportedEncodingException {, +		Assert.state(this.characterEncoding != null,, +				"Cannot get content as a String for a null character encoding. " +, +				"Consider setting the characterEncoding in the request.");, +, +		return new String(this.content, this.characterEncoding);, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/PrintingResultHandler.java, +	private static final String MISSING_CHARACTER_ENCODING = "<no character encoding set>";, +		String body = (request.getCharacterEncoding() != null ?, +				request.getContentAsString() : MISSING_CHARACTER_ENCODING);, +		String body = (response.getCharacterEncoding() != null ?, +				response.getContentAsString() : MISSING_CHARACTER_ENCODING);, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +	 * <p>If the supplied byte array represents text such as XML or JSON, the, +	 * {@link #setCharacterEncoding character encoding} should typically be, +	 * set as well., +	 * @see #setCharacterEncoding(String), +	 * @return the content as a byte array, potentially {@code null}, +	 * {@linkplain #getCharacterEncoding character encoding}., +	 * @return the content as a {@code String}, potentially {@code null}, +	 * @throws IllegalStateException if the character encoding has not been set, +	 * @throws UnsupportedEncodingException if the character encoding is not supported, +	 * @see #getContentAsByteArray(), +	public String getContentAsString() throws IllegalStateException, UnsupportedEncodingException {, +		Assert.state(this.characterEncoding != null,, +				"Cannot get content as a String for a null character encoding. " +, +				"Consider setting the characterEncoding in the request.");, +, +		return new String(this.content, this.characterEncoding);, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/PrintingResultHandler.java, +	private static final String MISSING_CHARACTER_ENCODING = "<no character encoding set>";, +		String body = (request.getCharacterEncoding() != null ?, +				request.getContentAsString() : MISSING_CHARACTER_ENCODING);, +		String body = (response.getCharacterEncoding() != null ?, +				response.getContentAsString() : MISSING_CHARACTER_ENCODING);, +++ b/spring-test/src/test/java/org/springframework/mock/web/MockHttpServletRequestTests.java, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +	private final MockHttpServletRequest request = new MockHttpServletRequest();, +, +	@Rule, +	public final ExpectedException exception = ExpectedException.none();, +	public void getContentAsStringWithoutSettingCharacterEncoding() throws IOException {, +		exception.expect(IllegalStateException.class);, +		exception.expectMessage("Cannot get content as a String for a null character encoding");, +		request.getContentAsString();, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +	 * <p>If the supplied byte array represents text such as XML or JSON, the, +	 * {@link #setCharacterEncoding character encoding} should typically be, +	 * set as well., +	 * @see #setCharacterEncoding(String), +	 * @return the content as a byte array, potentially {@code null}, +	 * {@linkplain #getCharacterEncoding character encoding}., +	 * @return the content as a {@code String}, potentially {@code null}, +	 * @throws IllegalStateException if the character encoding has not been set, +	 * @throws UnsupportedEncodingException if the character encoding is not supported, +	 * @see #getContentAsByteArray(), +	public String getContentAsString() throws IllegalStateException, UnsupportedEncodingException {, +		Assert.state(this.characterEncoding != null,, +				"Cannot get content as a String for a null character encoding. " +, +				"Consider setting the characterEncoding in the request.");, +, +		return new String(this.content, this.characterEncoding);, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/PrintingResultHandler.java, +	private static final String MISSING_CHARACTER_ENCODING = "<no character encoding set>";, +		String body = (request.getCharacterEncoding() != null ?, +				request.getContentAsString() : MISSING_CHARACTER_ENCODING);, +		String body = (response.getCharacterEncoding() != null ?, +				response.getContentAsString() : MISSING_CHARACTER_ENCODING);, +++ b/spring-test/src/test/java/org/springframework/mock/web/MockHttpServletRequestTests.java, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;]