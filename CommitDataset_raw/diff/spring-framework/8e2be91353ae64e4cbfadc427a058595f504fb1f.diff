[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapter.java, + * Copyright 2002-2018 the original author or authors., +			if (logger.isWarnEnabled()) {, +				logger.warn("Unhandled exception after connection closed for " + this, ex);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapter.java, + * Copyright 2002-2018 the original author or authors., +			if (logger.isWarnEnabled()) {, +				logger.warn("Unhandled exception after connection closed for " + this, ex);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/standard/StandardWebSocketHandlerAdapter.java, + * Copyright 2002-2018 the original author or authors., +			if (logger.isWarnEnabled()) {, +				logger.warn("Unhandled on-close exception for " + this.wsSession, ex);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapter.java, + * Copyright 2002-2018 the original author or authors., +			if (logger.isWarnEnabled()) {, +				logger.warn("Unhandled exception after connection closed for " + this, ex);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/standard/StandardWebSocketHandlerAdapter.java, + * Copyright 2002-2018 the original author or authors., +			if (logger.isWarnEnabled()) {, +				logger.warn("Unhandled on-close exception for " + this.wsSession, ex);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/handler/ExceptionWebSocketHandlerDecorator.java, + * Copyright 2002-2018 the original author or authors., +			if (logger.isWarnEnabled()) {, +				logger.warn("Unhandled exception after connection closed for " + this, ex);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapter.java, + * Copyright 2002-2018 the original author or authors., +			if (logger.isWarnEnabled()) {, +				logger.warn("Unhandled exception after connection closed for " + this, ex);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/standard/StandardWebSocketHandlerAdapter.java, + * Copyright 2002-2018 the original author or authors., +			if (logger.isWarnEnabled()) {, +				logger.warn("Unhandled on-close exception for " + this.wsSession, ex);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/handler/ExceptionWebSocketHandlerDecorator.java, + * Copyright 2002-2018 the original author or authors., +			if (logger.isWarnEnabled()) {, +				logger.warn("Unhandled exception after connection closed for " + this, ex);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java, + * Copyright 2002-2018 the original author or authors., + * @author Juergen Hoeller, +				throw new IllegalStateException("Cannot map " + handler +, +						" to protocol '" + protocol + "': already mapped to " + replaced + ".");, +					if (logger.isWarnEnabled()) {, +						logger.warn("Failed to close '" + holder.getSession() + "': " + ex);, +				logger.error("Could not find session id in " + message);, +			logger.error("Failed to obtain session.getAcceptedProtocol(): " +, +					"will use the default protocol handler (if configured).", ex);, +					if (logger.isInfoEnabled()) {, +						logger.info("No messages received after " + timeSinceCreated + " ms. " +, +						if (logger.isWarnEnabled()) {, +							logger.warn("Failed to close unreliable " + session, ex);]