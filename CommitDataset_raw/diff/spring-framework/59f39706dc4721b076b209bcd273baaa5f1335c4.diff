[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +import org.springframework.util.StringUtils;, +		String destination = (String)message.getHeaders().get(name);, +		if (StringUtils.hasLength(destination) && !destination.startsWith("/")) {, +			destination = "/" + destination;, +		}, +		return new String[] { defaultPrefix + destination };, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +import org.springframework.util.StringUtils;, +		String destination = (String)message.getHeaders().get(name);, +		if (StringUtils.hasLength(destination) && !destination.startsWith("/")) {, +			destination = "/" + destination;, +		}, +		return new String[] { defaultPrefix + destination };, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandlerTests.java, +	public void sendToDefaultDestinationWithoutLeadingSlash() throws Exception {, +, +		when(this.messageChannel.send(any(Message.class))).thenReturn(true);, +, +		Message<?> inputMessage = createInputMessage("sess1", "sub1", "/app", "dest", null);, +		this.handler.handleReturnValue(PAYLOAD, this.sendToDefaultDestReturnType, inputMessage);, +, +		verify(this.messageChannel, times(1)).send(this.messageCaptor.capture());, +, +		Message<?> message = this.messageCaptor.getAllValues().get(0);, +		SimpMessageHeaderAccessor headers = SimpMessageHeaderAccessor.wrap(message);, +		assertEquals("/topic/dest", headers.getDestination());, +	}, +, +	@Test, +	public void sendToUserDefaultDestinationWithoutLeadingSlash() throws Exception {, +, +		when(this.messageChannel.send(any(Message.class))).thenReturn(true);, +, +		TestUser user = new TestUser();, +		Message<?> inputMessage = createInputMessage("sess1", "sub1", "/app", "dest", user);, +		this.handler.handleReturnValue(PAYLOAD, this.sendToUserDefaultDestReturnType, inputMessage);, +, +		verify(this.messageChannel, times(1)).send(this.messageCaptor.capture());, +, +		Message<?> message = this.messageCaptor.getAllValues().get(0);, +		SimpMessageHeaderAccessor headers = SimpMessageHeaderAccessor.wrap(message);, +		assertEquals("/user/" + user.getName() + "/queue/dest", headers.getDestination());, +	}, +, +	@Test]