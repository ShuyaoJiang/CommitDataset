[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/frame/AbstractSockJsMessageCodec.java, + * Copyright 2002-2014 the original author or authors., +	public String encode(String... messages) {, +		return (ch >= '\u0000' && ch <= '\u001F') || (ch >= '\u200C' && ch <= '\u200F') ||, +				(ch >= '\u2028' && ch <= '\u202F') || (ch >= '\u2060' && ch <= '\u206F') ||, +				(ch >= '\uFFF0' && ch <= '\uFFFF') || (ch >= '\uD800' && ch <= '\uDFFF');, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/frame/AbstractSockJsMessageCodec.java, + * Copyright 2002-2014 the original author or authors., +	public String encode(String... messages) {, +		return (ch >= '\u0000' && ch <= '\u001F') || (ch >= '\u200C' && ch <= '\u200F') ||, +				(ch >= '\u2028' && ch <= '\u202F') || (ch >= '\u2060' && ch <= '\u206F') ||, +				(ch >= '\uFFF0' && ch <= '\uFFFF') || (ch >= '\uD800' && ch <= '\uDFFF');, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/frame/SockJsMessageCodec.java, + * Copyright 2002-2014 the original author or authors., + * Encode and decode messages to and from a SockJS message frame,, + * essentially an array of JSON-encoded messages. For example:, + * <pre class="code">, +	 * @return the content for a SockJS message frame (never {@code null}), +	String encode(String... messages);, +	 * @return an array of messages, or {@code null} if none, +	 * @return an array of messages, or {@code null} if none, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/frame/AbstractSockJsMessageCodec.java, + * Copyright 2002-2014 the original author or authors., +	public String encode(String... messages) {, +		return (ch >= '\u0000' && ch <= '\u001F') || (ch >= '\u200C' && ch <= '\u200F') ||, +				(ch >= '\u2028' && ch <= '\u202F') || (ch >= '\u2060' && ch <= '\u206F') ||, +				(ch >= '\uFFF0' && ch <= '\uFFFF') || (ch >= '\uD800' && ch <= '\uDFFF');, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/frame/SockJsMessageCodec.java, + * Copyright 2002-2014 the original author or authors., + * Encode and decode messages to and from a SockJS message frame,, + * essentially an array of JSON-encoded messages. For example:, + * <pre class="code">, +	 * @return the content for a SockJS message frame (never {@code null}), +	String encode(String... messages);, +	 * @return an array of messages, or {@code null} if none, +	 * @return an array of messages, or {@code null} if none, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/handler/AbstractHttpReceivingTransportHandler.java, + * Copyright 2002-2014 the original author or authors., +				// e.g. Jackson's JsonMappingException, indicating an incomplete payload, +	private void handleReadError(ServerHttpResponse response, String error, String sessionId) {, +			response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);, +			response.getBody().write(error.getBytes("UTF-8"));, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/frame/AbstractSockJsMessageCodec.java, + * Copyright 2002-2014 the original author or authors., +	public String encode(String... messages) {, +		return (ch >= '\u0000' && ch <= '\u001F') || (ch >= '\u200C' && ch <= '\u200F') ||, +				(ch >= '\u2028' && ch <= '\u202F') || (ch >= '\u2060' && ch <= '\u206F') ||, +				(ch >= '\uFFF0' && ch <= '\uFFFF') || (ch >= '\uD800' && ch <= '\uDFFF');, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/frame/SockJsMessageCodec.java, + * Copyright 2002-2014 the original author or authors., + * Encode and decode messages to and from a SockJS message frame,, + * essentially an array of JSON-encoded messages. For example:, + * <pre class="code">, +	 * @return the content for a SockJS message frame (never {@code null}), +	String encode(String... messages);, +	 * @return an array of messages, or {@code null} if none, +	 * @return an array of messages, or {@code null} if none, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/handler/AbstractHttpReceivingTransportHandler.java, + * Copyright 2002-2014 the original author or authors., +				// e.g. Jackson's JsonMappingException, indicating an incomplete payload, +	private void handleReadError(ServerHttpResponse response, String error, String sessionId) {, +			response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);, +			response.getBody().write(error.getBytes("UTF-8"));, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/handler/JsonpReceivingTransportHandler.java, + * Copyright 2002-2014 the original author or authors., +		if (contentType != null && MediaType.APPLICATION_FORM_URLENCODED.isCompatibleWith(contentType)) {, +			return (StringUtils.hasText(d) ? messageCodec.decode(d) : null);]