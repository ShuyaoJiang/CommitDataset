[+++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/DefaultJCacheOperationSource.java, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +		implements BeanFactoryAware, InitializingBean, SmartInitializingSingleton {, +	private KeyGenerator keyGenerator = new SimpleKeyGenerator();, +, +	private KeyGenerator adaptedKeyGenerator;, +, +	private BeanFactory beanFactory;, +	 * Return the specified cache manager to use, if any., +	public CacheManager getCacheManager() {, +		return this.cacheManager;, +	/**, +	 * Return the specified cache resolver to use, if any., +	 */, +		return this.cacheResolver;, +	/**, +	 * Return the specified exception cache resolver to use, if any., +	 */, +		return this.exceptionCacheResolver;, +	}, +, +	/**, +	 * Set the default {@link KeyGenerator}. If none is set, a {@link SimpleKeyGenerator}, +	 * honoringKe the JSR-107 {@link javax.cache.annotation.CacheKey} and, +	 * {@link javax.cache.annotation.CacheValue} will be used., +	 */, +	public void setKeyGenerator(KeyGenerator keyGenerator) {, +		this.keyGenerator = keyGenerator;, +	}, +, +	/**, +	 * Return the specified key generator to use, if any., +	 */, +	public KeyGenerator getKeyGenerator() {, +		return this.keyGenerator;, +	public void setBeanFactory(BeanFactory beanFactory) {, +		this.beanFactory = beanFactory;, +			return this.beanFactory.getBean(type);, +	protected CacheManager getDefaultCacheManager() {, +				this.cacheManager = this.beanFactory.getBean(CacheManager.class);, +	@Override, +	protected CacheResolver getDefaultCacheResolver() {, +		if (this.cacheResolver == null) {, +			this.cacheResolver = new SimpleCacheResolver(getDefaultCacheManager());, +		}, +		return this.cacheResolver;, +	}, +, +	@Override, +	protected CacheResolver getDefaultExceptionCacheResolver() {, +		if (this.exceptionCacheResolver == null) {, +			this.exceptionCacheResolver = new SimpleExceptionCacheResolver(getDefaultCacheManager());, +		}, +		return this.exceptionCacheResolver;, +	}, +, +	@Override, +	protected KeyGenerator getDefaultKeyGenerator() {, +		return this.adaptedKeyGenerator;, +	}, +, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/DefaultJCacheOperationSource.java, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +		implements BeanFactoryAware, InitializingBean, SmartInitializingSingleton {, +	private KeyGenerator keyGenerator = new SimpleKeyGenerator();, +, +	private KeyGenerator adaptedKeyGenerator;, +, +	private BeanFactory beanFactory;, +	 * Return the specified cache manager to use, if any., +	public CacheManager getCacheManager() {, +		return this.cacheManager;, +	/**, +	 * Return the specified cache resolver to use, if any., +	 */, +		return this.cacheResolver;, +	/**, +	 * Return the specified exception cache resolver to use, if any., +	 */, +		return this.exceptionCacheResolver;, +	}, +, +	/**, +	 * Set the default {@link KeyGenerator}. If none is set, a {@link SimpleKeyGenerator}, +	 * honoringKe the JSR-107 {@link javax.cache.annotation.CacheKey} and, +	 * {@link javax.cache.annotation.CacheValue} will be used., +	 */, +	public void setKeyGenerator(KeyGenerator keyGenerator) {, +		this.keyGenerator = keyGenerator;, +	}, +, +	/**, +	 * Return the specified key generator to use, if any., +	 */, +	public KeyGenerator getKeyGenerator() {, +		return this.keyGenerator;, +	public void setBeanFactory(BeanFactory beanFactory) {, +		this.beanFactory = beanFactory;]