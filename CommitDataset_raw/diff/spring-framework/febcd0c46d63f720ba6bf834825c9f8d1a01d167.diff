[+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +	public Object clone() {, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +	public Object clone() {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java, +, +		return fromController(null, controllerType);, +	}, +, +	/**, +	 * An alternative to {@link #fromController(Class)} that accepts a, +	 * {@code UriComponentsBuilder} representing the base URL. This is useful, +	 * when using MvcUriComponentsBuilder outside the context of processing a, +	 * request or to apply a custom baseUrl not matching the current request., +	 * @param builder the builder for the base URL; the builder will be cloned, +	 * and therefore not modified and may be re-used for further calls., +	 * @param controllerType the controller to build a URI for, +	 * @return a UriComponentsBuilder instance (never {@code null}), +	 */, +	public static UriComponentsBuilder fromController(UriComponentsBuilder builder, Class<?> controllerType) {, +		if (builder != null) {, +			builder = (UriComponentsBuilder) builder.clone();, +		}, +		else {, +			builder = ServletUriComponentsBuilder.fromCurrentServletMapping();, +		}, +		return builder.path(mapping);, +	 * @param args the argument values, +	public static UriComponentsBuilder fromMethodName(Class<?> controllerType, String methodName, Object... args) {, +		return fromMethodName(null, controllerType, methodName, args);, +	/**, +	 * An alternative to {@link #fromMethodName(Class, String, Object...)} that, +	 * accepts a {@code UriComponentsBuilder} representing the base URL. This is, +	 * useful when using MvcUriComponentsBuilder outside the context of processing, +	 * a request or to apply a custom baseUrl not matching the current request., +	 * @param builder the builder for the base URL; the builder will be cloned, +	 * and therefore not modified and may be re-used for further calls., +	 * @param controllerType the controller, +	 * @param methodName the method name, +	 * @param args the argument values, +	 * @return a UriComponentsBuilder instance, never {@code null}, +	 * @throws IllegalArgumentException if there is no matching or, +	 * if there is more than one matching method, +	 */, +	public static UriComponentsBuilder fromMethodName(UriComponentsBuilder builder,, +			Class<?> controllerType, String methodName, Object... args) {, +, +		Method method = getMethod(controllerType, methodName, args);, +		return fromMethod(builder, method, args);, +	}, +, +	private static Method getMethod(Class<?> controllerType, String methodName, Object... args) {, +			if (method.getName().equals(methodName) && method.getParameterTypes().length == args.length) {, +							Arrays.asList(args) + " arguments, controller " + controllerType.getName());, +			throw new IllegalArgumentException("No method '" + methodName + "' with " + args.length +, +		return fromMethodCall(null, invocationInfo);, +	}, +, +	/**, +	 * An alternative to {@link #fromMethodCall(Object)} that accepts a, +	 * {@code UriComponentsBuilder} representing the base URL. This is useful, +	 * when using MvcUriComponentsBuilder outside the context of processing a, +	 * request or to apply a custom baseUrl not matching the current request., +	 * @param builder the builder for the base URL; the builder will be cloned, +	 * and therefore not modified and may be re-used for further calls., +	 * @param invocationInfo either the value returned from a "mock" controller, +	 * invocation or the "mock" controller itself after an invocation, +	 * @return a UriComponents instance, +	 */, +	public static UriComponentsBuilder fromMethodCall(UriComponentsBuilder builder, Object invocationInfo) {, +		return fromMethod(builder, info.getControllerMethod(), info.getArgumentValues());, +	 * {@link org.springframework.web.method.support.UriComponentsContributor, +	 * UriComponentsContributor}) while remaining argument values are ignored and, +	 * can be {@code null}., +	 * @param args argument values for the controller method, +	public static UriComponentsBuilder fromMethod(Method method, Object... args) {, +		return fromMethod(null, method, args);, +	}, +, +	/**, +	 * An alternative to {@link #fromMethod(java.lang.reflect.Method, Object...)}, +	 * that accepts a {@code UriComponentsBuilder} representing the base URL., +	 * This is useful when using MvcUriComponentsBuilder outside the context of, +	 * processing a request or to apply a custom baseUrl not matching the, +	 * current request., +	 * @param builder the builder for the base URL; the builder will be cloned, +	 * and therefore not modified and may be re-used for further calls., +	 * @param method the controller method, +	 * @param args argument values for the controller method, +	 * @return a UriComponentsBuilder instance, never {@code null}, +	 */, +	public static UriComponentsBuilder fromMethod(UriComponentsBuilder builder, Method method, Object... args) {, +		if (builder != null) {, +			builder = (UriComponentsBuilder) builder.clone();, +		}, +		else {, +			builder = ServletUriComponentsBuilder.fromCurrentServletMapping();, +		}, +		builder.path(path);, +		UriComponents uriComponents = applyContributors(builder, method, args);]