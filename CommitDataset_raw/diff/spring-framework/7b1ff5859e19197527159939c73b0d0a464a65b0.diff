[+++ b/spring-framework-reference/src/beans.xml, +      linkend="orm-exception-translation" />.</para>, +++ b/spring-framework-reference/src/beans.xml, +      linkend="orm-exception-translation" />.</para>, +++ b/spring-framework-reference/src/dynamic-languages.xml, +          normal JavaBean configuration). However, instead of specifying the, +++ b/spring-framework-reference/src/beans.xml, +      linkend="orm-exception-translation" />.</para>, +++ b/spring-framework-reference/src/dynamic-languages.xml, +          normal JavaBean configuration). However, instead of specifying the, +++ b/spring-framework-reference/src/ejb.xml, +++ b/spring-framework-reference/src/beans.xml, +      linkend="orm-exception-translation" />.</para>, +++ b/spring-framework-reference/src/dynamic-languages.xml, +          normal JavaBean configuration). However, instead of specifying the, +++ b/spring-framework-reference/src/ejb.xml, +++ b/spring-framework-reference/src/metadata.xml, +    <para>Spring uses Java 5 annotations thoughout the framework across a wide, +    range of features such as DI, MVC, and AOP and supports JEE standard, +    annotations such as @PreDestroy and @PostConstruct defined by JSR-250., +    This chapter describes the @Required attribute and provides links to other, +    parts the documentation where the various attributes are described in more, +    detail.</para>, +++ b/spring-framework-reference/src/beans.xml, +      linkend="orm-exception-translation" />.</para>, +++ b/spring-framework-reference/src/dynamic-languages.xml, +          normal JavaBean configuration). However, instead of specifying the, +++ b/spring-framework-reference/src/ejb.xml, +++ b/spring-framework-reference/src/metadata.xml, +    <para>Spring uses Java 5 annotations thoughout the framework across a wide, +    range of features such as DI, MVC, and AOP and supports JEE standard, +    annotations such as @PreDestroy and @PostConstruct defined by JSR-250., +    This chapter describes the @Required attribute and provides links to other, +    parts the documentation where the various attributes are described in more, +    detail.</para>, +++ b/spring-framework-reference/src/orm.xml, +    <para>The major goal of Spring's ORM integration is to allow for clear, +    application layering, with any data access and transaction technology, and, +    for loose coupling of application objects. No more business service, +    dependencies on the data access or transaction strategy, no more, +    hard-coded resource lookups, no more hard-to-replace singletons, no more, +    custom service registries. One simple and consistent approach to wiring up, +    application objects, keeping them as reusable and free from container, +    dependencies as possible. All the individual data access features are, +    usable on their own but integrate nicely with Spring's application context, +    concept, providing XML-based configuration and cross-referencing of plain, +    JavaBean instances that don't need to be Spring-aware. In a typical Spring, +    application, many important objects are JavaBeans: data access templates,, +    data access objects, transaction managers, business services (that use the, +    data access objects and transaction managers), web view resolvers, web, +    controllers (that use the business services),and so on.</para>, +      support, which enables you to replace explicit transaction demarcation, +      API calls in your Java code with an AOP transaction interceptor, +      configured in a Spring container using Java annotations or XML. This, +      allows you to keep business services free of repetitive transaction, +      demarcation code, and allows you to focus on adding business logic which, +      is where the real value of your application lies.</para>, +      implementation class follows the JavaBeans pattern, just like a JDBC, +      <interfacename>DataSource</interfacename> implementation class, which is, +      a natural fit for configuration using Spring. This setup style usually, +      supports a Spring-defined JDBC, +++ b/spring-framework-reference/src/beans.xml, +      linkend="orm-exception-translation" />.</para>, +++ b/spring-framework-reference/src/dynamic-languages.xml, +          normal JavaBean configuration). However, instead of specifying the, +++ b/spring-framework-reference/src/ejb.xml, +++ b/spring-framework-reference/src/metadata.xml, +    <para>Spring uses Java 5 annotations thoughout the framework across a wide, +    range of features such as DI, MVC, and AOP and supports JEE standard, +    annotations such as @PreDestroy and @PostConstruct defined by JSR-250., +    This chapter describes the @Required attribute and provides links to other, +    parts the documentation where the various attributes are described in more, +    detail.</para>, +++ b/spring-framework-reference/src/orm.xml, +    <para>The major goal of Spring's ORM integration is to allow for clear, +    application layering, with any data access and transaction technology, and, +    for loose coupling of application objects. No more business service, +    dependencies on the data access or transaction strategy, no more, +    hard-coded resource lookups, no more hard-to-replace singletons, no more, +    custom service registries. One simple and consistent approach to wiring up, +    application objects, keeping them as reusable and free from container, +    dependencies as possible. All the individual data access features are, +    usable on their own but integrate nicely with Spring's application context, +    concept, providing XML-based configuration and cross-referencing of plain, +    JavaBean instances that don't need to be Spring-aware. In a typical Spring, +    application, many important objects are JavaBeans: data access templates,, +    data access objects, transaction managers, business services (that use the, +    data access objects and transaction managers), web view resolvers, web, +    controllers (that use the business services),and so on.</para>, +      support, which enables you to replace explicit transaction demarcation, +      API calls in your Java code with an AOP transaction interceptor, +      configured in a Spring container using Java annotations or XML. This, +      allows you to keep business services free of repetitive transaction, +      demarcation code, and allows you to focus on adding business logic which, +      is where the real value of your application lies.</para>, +      implementation class follows the JavaBeans pattern, just like a JDBC, +      <interfacename>DataSource</interfacename> implementation class, which is, +      a natural fit for configuration using Spring. This setup style usually, +      supports a Spring-defined JDBC, +++ b/spring-framework-reference/src/overview.xml]