[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/condition/ParamsRequestCondition.java, +import org.springframework.util.Assert;, +import org.springframework.util.MultiValueMap;, +			return getRequestParams(exchange).containsKey(this.name);, +			return this.value.equals(getRequestParams(exchange).getFirst(this.name));, +		}, +, +		private MultiValueMap<String, String> getRequestParams(ServerWebExchange exchange) {, +			MultiValueMap<String, String> params = exchange.getRequestParams().subscribe().peek();, +			Assert.notNull(params, "Expected form data (if any) to be parsed.");, +			return params;, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/condition/ParamsRequestCondition.java, +import org.springframework.util.Assert;, +import org.springframework.util.MultiValueMap;, +			return getRequestParams(exchange).containsKey(this.name);, +			return this.value.equals(getRequestParams(exchange).getFirst(this.name));, +		}, +, +		private MultiValueMap<String, String> getRequestParams(ServerWebExchange exchange) {, +			MultiValueMap<String, String> params = exchange.getRequestParams().subscribe().peek();, +			Assert.notNull(params, "Expected form data (if any) to be parsed.");, +			return params;, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java, +, +			// Ensure form data is parsed for "params" conditions..., +			return exchange.getRequestParams(), +					.then(() -> {, +					});, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/condition/ParamsRequestCondition.java, +import org.springframework.util.Assert;, +import org.springframework.util.MultiValueMap;, +			return getRequestParams(exchange).containsKey(this.name);, +			return this.value.equals(getRequestParams(exchange).getFirst(this.name));, +		}, +, +		private MultiValueMap<String, String> getRequestParams(ServerWebExchange exchange) {, +			MultiValueMap<String, String> params = exchange.getRequestParams().subscribe().peek();, +			Assert.notNull(params, "Expected form data (if any) to be parsed.");, +			return params;, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java, +, +			// Ensure form data is parsed for "params" conditions..., +			return exchange.getRequestParams(), +					.then(() -> {, +					});, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestParamMapMethodArgumentResolver.java, +import org.springframework.util.Assert;, +import org.springframework.util.LinkedMultiValueMap;, +		MultiValueMap<String, String> requestParams = getRequestParams(exchange);, +		Object value = (isMultiValueMap(parameter) ? requestParams : requestParams.toSingleValueMap());, +	private MultiValueMap<String, String> getRequestParams(ServerWebExchange exchange) {, +		MultiValueMap<String, String> params = exchange.getRequestParams().subscribe().peek();, +		Assert.notNull(params, "Expected form data (if any) to be parsed.");, +		return params;, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/condition/ParamsRequestCondition.java, +import org.springframework.util.Assert;, +import org.springframework.util.MultiValueMap;, +			return getRequestParams(exchange).containsKey(this.name);, +			return this.value.equals(getRequestParams(exchange).getFirst(this.name));, +		}, +, +		private MultiValueMap<String, String> getRequestParams(ServerWebExchange exchange) {, +			MultiValueMap<String, String> params = exchange.getRequestParams().subscribe().peek();, +			Assert.notNull(params, "Expected form data (if any) to be parsed.");, +			return params;, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java, +, +			// Ensure form data is parsed for "params" conditions..., +			return exchange.getRequestParams(), +					.then(() -> {, +					});, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestParamMapMethodArgumentResolver.java, +import org.springframework.util.Assert;, +import org.springframework.util.LinkedMultiValueMap;, +		MultiValueMap<String, String> requestParams = getRequestParams(exchange);, +		Object value = (isMultiValueMap(parameter) ? requestParams : requestParams.toSingleValueMap());, +	private MultiValueMap<String, String> getRequestParams(ServerWebExchange exchange) {, +		MultiValueMap<String, String> params = exchange.getRequestParams().subscribe().peek();, +		Assert.notNull(params, "Expected form data (if any) to be parsed.");, +		return params;, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestParamMethodArgumentResolver.java, +import org.springframework.util.Assert;, +import org.springframework.util.MultiValueMap;, +		List<String> paramValues = getRequestParams(exchange).get(name);, +	private MultiValueMap<String, String> getRequestParams(ServerWebExchange exchange) {, +		MultiValueMap<String, String> params = exchange.getRequestParams().subscribe().peek();, +		Assert.notNull(params, "Expected form data (if any) to be parsed.");, +		return params;, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/condition/ParamsRequestCondition.java, +import org.springframework.util.Assert;, +import org.springframework.util.MultiValueMap;, +			return getRequestParams(exchange).containsKey(this.name);, +			return this.value.equals(getRequestParams(exchange).getFirst(this.name));, +		}]