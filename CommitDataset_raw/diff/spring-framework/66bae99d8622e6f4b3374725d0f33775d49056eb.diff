[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpEQ.java, + * Copyright 2002-2014 the original author or authors., + * Implements the equality operator., +	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpEQ.java, + * Copyright 2002-2014 the original author or authors., + * Implements the equality operator., +	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpGT.java, + * Copyright 2002-2014 the original author or authors., + * Implements the greater-than operator., + * @author Juergen Hoeller, +, +		if (left instanceof CharSequence && right instanceof CharSequence) {, +			left = left.toString();, +			right = right.toString();, +		}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpEQ.java, + * Copyright 2002-2014 the original author or authors., + * Implements the equality operator., +	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpGT.java, + * Copyright 2002-2014 the original author or authors., + * Implements the greater-than operator., + * @author Juergen Hoeller, +, +		if (left instanceof CharSequence && right instanceof CharSequence) {, +			left = left.toString();, +			right = right.toString();, +		}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpLT.java, + * Copyright 2002-2014 the original author or authors., + * @author Juergen Hoeller, +	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {, +, +		if (left instanceof CharSequence && right instanceof CharSequence) {, +			left = left.toString();, +			right = right.toString();, +		}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpEQ.java, + * Copyright 2002-2014 the original author or authors., + * Implements the equality operator., +	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpGT.java, + * Copyright 2002-2014 the original author or authors., + * Implements the greater-than operator., + * @author Juergen Hoeller, +, +		if (left instanceof CharSequence && right instanceof CharSequence) {, +			left = left.toString();, +			right = right.toString();, +		}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpLT.java, + * Copyright 2002-2014 the original author or authors., + * @author Juergen Hoeller, +	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {, +, +		if (left instanceof CharSequence && right instanceof CharSequence) {, +			left = left.toString();, +			right = right.toString();, +		}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpNE.java, + * Copyright 2002-2014 the original author or authors., +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpEQ.java, + * Copyright 2002-2014 the original author or authors., + * Implements the equality operator., +	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpGT.java, + * Copyright 2002-2014 the original author or authors., + * Implements the greater-than operator., + * @author Juergen Hoeller, +, +		if (left instanceof CharSequence && right instanceof CharSequence) {, +			left = left.toString();, +			right = right.toString();, +		}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpLT.java, + * Copyright 2002-2014 the original author or authors., + * @author Juergen Hoeller, +	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {, +, +		if (left instanceof CharSequence && right instanceof CharSequence) {, +			left = left.toString();, +			right = right.toString();, +		}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/OpNE.java, + * Copyright 2002-2014 the original author or authors., +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Operator.java, + * Copyright 2002-2014 the original author or authors., +import org.springframework.util.ClassUtils;, + * Common supertype for operators that operate on either one or two operands., + * In the case of multiply or divide there would be two operands, but for, + * unary plus or minus, there is only one.]