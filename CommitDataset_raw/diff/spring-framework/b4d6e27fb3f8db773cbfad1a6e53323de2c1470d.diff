[+++ b/build.gradle, +		optional("org.apache.derby:derby:10.10.1.1"), +		optional("org.apache.derby:derbyclient:10.10.1.1"), +++ b/build.gradle, +		optional("org.apache.derby:derby:10.10.1.1"), +		optional("org.apache.derby:derbyclient:10.10.1.1"), +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/DerbyEmbeddedDatabaseConfigurer.java, + * Copyright 2002-2013 the original author or authors., + * {@link EmbeddedDatabaseConfigurer} for the Apache Derby database 10.6+., + * Call {@link #getInstance()} to get the singleton instance of this class., +	private static DerbyEmbeddedDatabaseConfigurer instance;, +		if (instance == null) {, +			instance = new DerbyEmbeddedDatabaseConfigurer();, +		return instance;, +, +					String.format(URL_TEMPLATE, databaseName, "drop=true"), new Properties());, +			// Error code that indicates successful shutdown, +			if (!"08006".equals(ex.getSQLState())) {, +				LogFactory.getLog(getClass()).warn("Could not shutdown in-memory Derby database", ex);, +++ b/build.gradle, +		optional("org.apache.derby:derby:10.10.1.1"), +		optional("org.apache.derby:derbyclient:10.10.1.1"), +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/DerbyEmbeddedDatabaseConfigurer.java, + * Copyright 2002-2013 the original author or authors., + * {@link EmbeddedDatabaseConfigurer} for the Apache Derby database 10.6+., + * Call {@link #getInstance()} to get the singleton instance of this class., +	private static DerbyEmbeddedDatabaseConfigurer instance;, +		if (instance == null) {, +			instance = new DerbyEmbeddedDatabaseConfigurer();, +		return instance;, +, +					String.format(URL_TEMPLATE, databaseName, "drop=true"), new Properties());, +			// Error code that indicates successful shutdown, +			if (!"08006".equals(ex.getSQLState())) {, +				LogFactory.getLog(getClass()).warn("Could not shutdown in-memory Derby database", ex);, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilderTests.java, + * Copyright 2002-2013 the original author or authors., +, +, +		db = builder.addDefaultScripts().build();, +		assertDatabaseCreatedAndShutdown(db);, +, +		db = builder.addScript("db-schema.sql").addScript("db-test-data.sql").build();, +		assertDatabaseCreatedAndShutdown(db);, +, +		db = builder.addScript("db-schema-comments.sql").addScript("db-test-data.sql").build();, +		assertDatabaseCreatedAndShutdown(db);, +, +		db = builder.setType(EmbeddedDatabaseType.H2).addScript("db-schema.sql").addScript("db-test-data.sql").build();, +		assertDatabaseCreatedAndShutdown(db);, +, +		db = builder.setType(EmbeddedDatabaseType.DERBY).addScript("db-schema-derby-with-drop.sql").addScript("db-test-data.sql").build();, +		assertDatabaseCreatedAndShutdown(db);, +++ b/build.gradle, +		optional("org.apache.derby:derby:10.10.1.1"), +		optional("org.apache.derby:derbyclient:10.10.1.1"), +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/DerbyEmbeddedDatabaseConfigurer.java, + * Copyright 2002-2013 the original author or authors., + * {@link EmbeddedDatabaseConfigurer} for the Apache Derby database 10.6+., + * Call {@link #getInstance()} to get the singleton instance of this class., +	private static DerbyEmbeddedDatabaseConfigurer instance;, +		if (instance == null) {, +			instance = new DerbyEmbeddedDatabaseConfigurer();, +		return instance;, +, +					String.format(URL_TEMPLATE, databaseName, "drop=true"), new Properties());, +			// Error code that indicates successful shutdown, +			if (!"08006".equals(ex.getSQLState())) {, +				LogFactory.getLog(getClass()).warn("Could not shutdown in-memory Derby database", ex);, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilderTests.java, + * Copyright 2002-2013 the original author or authors., +, +, +		db = builder.addDefaultScripts().build();, +		assertDatabaseCreatedAndShutdown(db);, +, +		db = builder.addScript("db-schema.sql").addScript("db-test-data.sql").build();, +		assertDatabaseCreatedAndShutdown(db);, +, +		db = builder.addScript("db-schema-comments.sql").addScript("db-test-data.sql").build();, +		assertDatabaseCreatedAndShutdown(db);, +, +		db = builder.setType(EmbeddedDatabaseType.H2).addScript("db-schema.sql").addScript("db-test-data.sql").build();, +		assertDatabaseCreatedAndShutdown(db);, +, +		db = builder.setType(EmbeddedDatabaseType.DERBY).addScript("db-schema-derby-with-drop.sql").addScript("db-test-data.sql").build();, +		assertDatabaseCreatedAndShutdown(db);, +++ b/spring-jdbc/src/test/resources/org/springframework/jdbc/datasource/embedded/db-schema-derby-with-drop.sql, +drop table T_TEST;, +, +create table T_TEST (NAME varchar(50) not null);]