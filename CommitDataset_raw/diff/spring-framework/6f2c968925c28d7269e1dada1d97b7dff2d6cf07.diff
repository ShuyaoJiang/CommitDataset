[+++ b/spring-web/src/main/java/org/springframework/web/util/DefaultUriTemplateHandler.java, +import java.io.UnsupportedEncodingException;, +import java.util.HashMap;, +	private boolean strictEncoding;, +, +	/**, +	 * Whether to encode characters outside the unreserved set as defined in, +	 * <a href="https://tools.ietf.org/html/rfc3986#section-2">RFC 3986 Section 2</a>., +	 * This ensures a URI variable value will not contain any characters with a, +	 * reserved purpose., +	 * <p>By default this is set to {@code false} in which case only characters, +	 * illegal for the given URI component are encoded. For example when expanding, +	 * a URI variable into a path segment the "/" character is illegal and, +	 * encoded. The ";" character however is legal and not encoded even though, +	 * it has a reserved purpose., +	 * <p><strong>Note:</strong> this property supersedes the need to also set, +	 * the {@link #setParsePath parsePath} property., +	 * @param strictEncoding whether to perform strict encoding, +	 * @since 4.3, +	 */, +	public void setStrictEncoding(boolean strictEncoding) {, +		this.strictEncoding = strictEncoding;, +	}, +, +	/**, +	 * Whether to strictly encode any character outside the unreserved set., +	 */, +	public boolean isStrictEncoding() {, +		return this.strictEncoding;, +	}, +, +		UriComponentsBuilder uriComponentsBuilder = initUriComponentsBuilder(uriTemplate);, +		UriComponents uriComponents = expandAndEncode(uriComponentsBuilder, uriVariables);, +		return insertBaseUrl(uriComponents);, +		UriComponentsBuilder uriComponentsBuilder = initUriComponentsBuilder(uriTemplate);, +		UriComponents uriComponents = expandAndEncode(uriComponentsBuilder, uriVariables);, +		return insertBaseUrl(uriComponents);, +		if (shouldParsePath() && !isStrictEncoding()) {, +	protected UriComponents expandAndEncode(UriComponentsBuilder builder, Map<String, ?> uriVariables) {, +		if (!isStrictEncoding()) {, +			return builder.build().expand(uriVariables).encode();, +		}, +		else {, +			Map<String, Object> encodedUriVars = new HashMap<String, Object>(uriVariables.size());, +			for (Map.Entry<String, ?> entry : uriVariables.entrySet()) {, +				encodedUriVars.put(entry.getKey(), encodeValue(entry.getValue()));, +			}, +			return builder.build().expand(encodedUriVars);, +		}, +	}, +, +	protected UriComponents expandAndEncode(UriComponentsBuilder builder, Object[] uriVariables) {, +		if (!isStrictEncoding()) {, +			return builder.build().expand(uriVariables).encode();, +		}, +		else {, +			Object[] encodedUriVars = new Object[uriVariables.length];, +			for (int i = 0; i < uriVariables.length; i++) {, +				encodedUriVars[i] = encodeValue(uriVariables[i]);, +			}, +			return builder.build().expand(encodedUriVars);, +		}, +	}, +, +	private String encodeValue(Object value) {, +		String stringValue = (value != null ? value.toString() : "");, +		try {, +			return UriUtils.encode(stringValue, "UTF-8");, +		}, +		catch (UnsupportedEncodingException ex) {, +			// Should never happen, +			throw new IllegalStateException("Failed to encode URI variable", ex);, +		}, +	}, +, +		String url = uriComponents.toUriString();, +		if (getBaseUrl() != null && uriComponents.getHost() == null) {, +			url = getBaseUrl() + url;, +++ b/spring-web/src/main/java/org/springframework/web/util/DefaultUriTemplateHandler.java, +import java.io.UnsupportedEncodingException;, +import java.util.HashMap;, +	private boolean strictEncoding;, +, +	/**, +	 * Whether to encode characters outside the unreserved set as defined in, +	 * <a href="https://tools.ietf.org/html/rfc3986#section-2">RFC 3986 Section 2</a>., +	 * This ensures a URI variable value will not contain any characters with a, +	 * reserved purpose., +	 * <p>By default this is set to {@code false} in which case only characters, +	 * illegal for the given URI component are encoded. For example when expanding, +	 * a URI variable into a path segment the "/" character is illegal and, +	 * encoded. The ";" character however is legal and not encoded even though, +	 * it has a reserved purpose., +	 * <p><strong>Note:</strong> this property supersedes the need to also set, +	 * the {@link #setParsePath parsePath} property., +	 * @param strictEncoding whether to perform strict encoding, +	 * @since 4.3, +	 */, +	public void setStrictEncoding(boolean strictEncoding) {, +		this.strictEncoding = strictEncoding;]