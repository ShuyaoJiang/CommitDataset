[+++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/MappingConfiguration.java, +	/**, +	 * Configures that this mapping should be excluded (ignored and not executed)., +	 */, +	void setExclude();, +, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/MappingConfiguration.java, +	/**, +	 * Configures that this mapping should be excluded (ignored and not executed)., +	 */, +	void setExclude();, +, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/SpelMapper.java, +		Class<?>[] typeInfo = getRequiredTypeInfo(nestedMapper);, +	public void addNestedMapper(Class<?> sourceType, Class<?> targetType, Mapper<?, ?> nestedMapper) {, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/MappingConfiguration.java, +	/**, +	 * Configures that this mapping should be excluded (ignored and not executed)., +	 */, +	void setExclude();, +, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/SpelMapper.java, +		Class<?>[] typeInfo = getRequiredTypeInfo(nestedMapper);, +	public void addNestedMapper(Class<?> sourceType, Class<?> targetType, Mapper<?, ?> nestedMapper) {, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/SpelMapping.java, +	private boolean exclude;, +, +	// implementing MappingConfiguration, +	public void setExclude() {, +		this.exclude = true;, +	}, +, +	// public methods, +, +	public String getSourceExpressionString() {, +		return this.source.getExpressionString();, +	}, +, +	public String getTargetExpressionString() {, +		return this.target.getExpressionString();, +	}, +, +		if (exclude) {, +			return;, +		}, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/MappingConfiguration.java, +	/**, +	 * Configures that this mapping should be excluded (ignored and not executed)., +	 */, +	void setExclude();, +, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/SpelMapper.java, +		Class<?>[] typeInfo = getRequiredTypeInfo(nestedMapper);, +	public void addNestedMapper(Class<?> sourceType, Class<?> targetType, Mapper<?, ?> nestedMapper) {, +++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/SpelMapping.java, +	private boolean exclude;, +, +	// implementing MappingConfiguration, +	public void setExclude() {, +		this.exclude = true;, +	}, +, +	// public methods, +, +	public String getSourceExpressionString() {, +		return this.source.getExpressionString();, +	}, +, +	public String getTargetExpressionString() {, +		return this.target.getExpressionString();, +	}, +, +		if (exclude) {, +			return;, +		}, +++ b/org.springframework.context/src/test/java/org/springframework/mapping/support/SpelMapperTests.java, +	public void mapAutomaticWithExclusions() {, +		Map<String, Object> source = new HashMap<String, Object>();, +		source.put("name", "Keith");, +		source.put("test", "3");, +		source.put("favoriteSport", "FOOTBALL");, +, +		Person target = new Person();, +, +		mapper.addMapping("test").setExclude();, +		mapper.map(source, target);, +, +		assertEquals("Keith", target.name);, +		assertEquals(0, target.age);, +		assertEquals(Sport.FOOTBALL, target.favoriteSport);, +	}, +, +	@Test]