[+++ b/spring-core/src/main/java/org/springframework/core/env/ReadOnlySystemAttributesMap.java, +				String.format("Expected key [%s] to be of type String, got %s", key, key.getClass().getName()));, +++ b/spring-core/src/main/java/org/springframework/core/env/ReadOnlySystemAttributesMap.java, +				String.format("Expected key [%s] to be of type String, got %s", key, key.getClass().getName()));, +++ b/spring-test/src/main/java/org/springframework/test/context/support/AbstractContextLoader.java, +, +	private static final Log logger = LogFactory.getLog(AbstractContextLoader.class);, +, +		String[] processedLocations = processLocations(configAttributes.getDeclaringClass(), configAttributes.getLocations());, +	 * @since 3.2, +		List<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerInstances =, +				new ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>>();, +		Class<?> contextClass = context.getClass();, +					"Could not add context initializer [%s] since its generic parameter [%s] " +, +					"is not assignable from the type of application context used by this " +, +					"context loader [%s]: ", initializerClass.getName(), initializerContextClass.getName(),, +		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ?, +				generateDefaultLocations(clazz) : modifyLocations(clazz, locations);, +				logger.info(String.format("Detected default resource location \"%s\" for test class [%s]",, +		else {, +				logger.info(String.format("Could not detect default resource locations for test class [%s]: " +, +						"%s does not exist", clazz.getName(), classPathResource));, +	}, +			}, +			else if (!ResourcePatternUtils.isUrl(path)) {, +				modifiedLocations[i] = ResourceUtils.CLASSPATH_URL_PREFIX + SLASH +, +						StringUtils.cleanPath(ClassUtils.classPackageAsResourcePath(clazz) + SLASH + path);, +			}, +			else {, +++ b/spring-core/src/main/java/org/springframework/core/env/ReadOnlySystemAttributesMap.java, +				String.format("Expected key [%s] to be of type String, got %s", key, key.getClass().getName()));, +++ b/spring-test/src/main/java/org/springframework/test/context/support/AbstractContextLoader.java, +, +	private static final Log logger = LogFactory.getLog(AbstractContextLoader.class);, +, +		String[] processedLocations = processLocations(configAttributes.getDeclaringClass(), configAttributes.getLocations());, +	 * @since 3.2, +		List<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerInstances =, +				new ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>>();, +		Class<?> contextClass = context.getClass();, +					"Could not add context initializer [%s] since its generic parameter [%s] " +, +					"is not assignable from the type of application context used by this " +, +					"context loader [%s]: ", initializerClass.getName(), initializerContextClass.getName(),, +		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ?, +				generateDefaultLocations(clazz) : modifyLocations(clazz, locations);, +				logger.info(String.format("Detected default resource location \"%s\" for test class [%s]",, +		else {, +				logger.info(String.format("Could not detect default resource locations for test class [%s]: " +, +						"%s does not exist", clazz.getName(), classPathResource));, +	}, +			}, +			else if (!ResourcePatternUtils.isUrl(path)) {, +				modifiedLocations[i] = ResourceUtils.CLASSPATH_URL_PREFIX + SLASH +, +						StringUtils.cleanPath(ClassUtils.classPackageAsResourcePath(clazz) + SLASH + path);, +			}, +			else {, +++ b/spring-web/src/main/java/org/springframework/web/context/support/AbstractRefreshableWebApplicationContext.java, +		ConfigurableEnvironment env = getEnvironment();, +			((ConfigurableWebEnvironment) env).initPropertySources(this.servletContext, this.servletConfig);, +++ b/spring-core/src/main/java/org/springframework/core/env/ReadOnlySystemAttributesMap.java, +				String.format("Expected key [%s] to be of type String, got %s", key, key.getClass().getName()));, +++ b/spring-test/src/main/java/org/springframework/test/context/support/AbstractContextLoader.java, +, +	private static final Log logger = LogFactory.getLog(AbstractContextLoader.class);, +, +		String[] processedLocations = processLocations(configAttributes.getDeclaringClass(), configAttributes.getLocations());, +	 * @since 3.2, +		List<ApplicationContextInitializer<ConfigurableApplicationContext>> initializerInstances =, +				new ArrayList<ApplicationContextInitializer<ConfigurableApplicationContext>>();, +		Class<?> contextClass = context.getClass();, +					"Could not add context initializer [%s] since its generic parameter [%s] " +, +					"is not assignable from the type of application context used by this " +, +					"context loader [%s]: ", initializerClass.getName(), initializerContextClass.getName(),, +		return (ObjectUtils.isEmpty(locations) && isGenerateDefaultLocations()) ?, +				generateDefaultLocations(clazz) : modifyLocations(clazz, locations);, +				logger.info(String.format("Detected default resource location \"%s\" for test class [%s]",, +		else {, +				logger.info(String.format("Could not detect default resource locations for test class [%s]: " +, +						"%s does not exist", clazz.getName(), classPathResource));, +	}, +			}, +			else if (!ResourcePatternUtils.isUrl(path)) {, +				modifiedLocations[i] = ResourceUtils.CLASSPATH_URL_PREFIX + SLASH +, +						StringUtils.cleanPath(ClassUtils.classPackageAsResourcePath(clazz) + SLASH + path);, +			}, +			else {, +++ b/spring-web/src/main/java/org/springframework/web/context/support/AbstractRefreshableWebApplicationContext.java, +		ConfigurableEnvironment env = getEnvironment();, +			((ConfigurableWebEnvironment) env).initPropertySources(this.servletContext, this.servletConfig);, +++ b/spring-web/src/main/java/org/springframework/web/context/support/GenericWebApplicationContext.java, +		ConfigurableEnvironment env = getEnvironment();, +			((ConfigurableWebEnvironment) env).initPropertySources(this.servletContext, null);, +++ b/spring-core/src/main/java/org/springframework/core/env/ReadOnlySystemAttributesMap.java, +				String.format("Expected key [%s] to be of type String, got %s", key, key.getClass().getName()));, +++ b/spring-test/src/main/java/org/springframework/test/context/support/AbstractContextLoader.java, +, +	private static final Log logger = LogFactory.getLog(AbstractContextLoader.class);, +, +		String[] processedLocations = processLocations(configAttributes.getDeclaringClass(), configAttributes.getLocations());, +	 * @since 3.2]