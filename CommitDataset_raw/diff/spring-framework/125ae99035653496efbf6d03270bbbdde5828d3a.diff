[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AppCacheManifestTransformer.java, +public class AppCacheManifestTransformer extends ResourceTransformerSupport {, +				contentWriter.write(currentTransformer.transform(line, hashBuilder, resource, transformerChain, request)  + "\n");, +				ResourceTransformerChain transformerChain, HttpServletRequest request) throws IOException;, +		public String transform(String line, HashBuilder builder, Resource resource,, +				ResourceTransformerChain transformerChain, HttpServletRequest request) throws IOException {, +	private class CacheSection implements SectionTransformer {, +		public String transform(String line, HashBuilder builder, Resource resource,, +				ResourceTransformerChain transformerChain, HttpServletRequest request) throws IOException {, +				ResourceResolverChain resolverChain = transformerChain.getResolverChain();, +				Resource appCacheResource = resolverChain.resolveResource(null, line, Arrays.asList(resource));, +				String path = resolveUrlPath(line, request, resource, transformerChain);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AppCacheManifestTransformer.java, +public class AppCacheManifestTransformer extends ResourceTransformerSupport {, +				contentWriter.write(currentTransformer.transform(line, hashBuilder, resource, transformerChain, request)  + "\n");, +				ResourceTransformerChain transformerChain, HttpServletRequest request) throws IOException;, +		public String transform(String line, HashBuilder builder, Resource resource,, +				ResourceTransformerChain transformerChain, HttpServletRequest request) throws IOException {, +	private class CacheSection implements SectionTransformer {, +		public String transform(String line, HashBuilder builder, Resource resource,, +				ResourceTransformerChain transformerChain, HttpServletRequest request) throws IOException {, +				ResourceResolverChain resolverChain = transformerChain.getResolverChain();, +				Resource appCacheResource = resolverChain.resolveResource(null, line, Arrays.asList(resource));, +				String path = resolveUrlPath(line, request, resource, transformerChain);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/CssLinkResourceTransformer.java, +public class CssLinkResourceTransformer extends ResourceTransformerSupport {, +				newLink = resolveUrlPath(link, request, resource, transformerChain);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AppCacheManifestTransformer.java, +public class AppCacheManifestTransformer extends ResourceTransformerSupport {, +				contentWriter.write(currentTransformer.transform(line, hashBuilder, resource, transformerChain, request)  + "\n");, +				ResourceTransformerChain transformerChain, HttpServletRequest request) throws IOException;, +		public String transform(String line, HashBuilder builder, Resource resource,, +				ResourceTransformerChain transformerChain, HttpServletRequest request) throws IOException {, +	private class CacheSection implements SectionTransformer {, +		public String transform(String line, HashBuilder builder, Resource resource,, +				ResourceTransformerChain transformerChain, HttpServletRequest request) throws IOException {, +				ResourceResolverChain resolverChain = transformerChain.getResolverChain();, +				Resource appCacheResource = resolverChain.resolveResource(null, line, Arrays.asList(resource));, +				String path = resolveUrlPath(line, request, resource, transformerChain);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/CssLinkResourceTransformer.java, +public class CssLinkResourceTransformer extends ResourceTransformerSupport {, +				newLink = resolveUrlPath(link, request, resource, transformerChain);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceTransformerSupport.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.web.servlet.resource;, +, +import java.util.Arrays;, +, +import javax.servlet.http.HttpServletRequest;, +, +import org.springframework.core.io.Resource;, +, +/**, + * A base class for a {@code ResourceTransformer} with an optional helper method, + * for resolving public links within a transformed resource., + *, + * @author Brian Clozel, + * @author Rossen Stoyanchev, + * @since 4.1, + */, +public abstract class ResourceTransformerSupport implements ResourceTransformer {, +, +	private ResourceUrlProvider resourceUrlProvider;, +, +, +	/**, +	 * Configure a {@link ResourceUrlProvider} to use when resolving the public, +	 * URL of links in a transformed resource (e.g. import links in a CSS file)., +	 * This is required only for links expressed as full paths, i.e. including, +	 * context and servlet path, and not for relative links., +	 *, +	 * <p>By default this property is not set. In that case if a, +	 * {@code ResourceUrlProvider} is needed an attempt is made to find the, +	 * {@code ResourceUrlProvider} exposed through the, +	 * {@link org.springframework.web.servlet.resource.ResourceUrlProviderExposingInterceptor, +	 * ResourceUrlProviderExposingInterceptor} (configured by default in the MVC, +	 * Java config and XML namespace). Therefore explicitly configuring this, +	 * property should not be needed in most cases., +	 * @param resourceUrlProvider the URL provider to use, +	 */, +	public void setResourceUrlProvider(ResourceUrlProvider resourceUrlProvider) {, +		this.resourceUrlProvider = resourceUrlProvider;, +	}, +, +	/**, +	 * @return the configured {@code ResourceUrlProvider}.]