[+++ b/build.gradle, +		testCompile("org.projectreactor:reactor-core:1.0.0.RELEASE"), +		testCompile("org.projectreactor:reactor-tcp:1.0.0.RELEASE"), +++ b/build.gradle, +		testCompile("org.projectreactor:reactor-core:1.0.0.RELEASE"), +		testCompile("org.projectreactor:reactor-tcp:1.0.0.RELEASE"), +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractBrokerRegistration.java, +import org.springframework.messaging.SubscribableChannel;, +	private final SubscribableChannel clientInboundChannel;, +, +	public AbstractBrokerRegistration(SubscribableChannel clientInboundChannel,, +			MessageChannel clientOutboundChannel, String[] destinationPrefixes) {, +, +		Assert.notNull(clientOutboundChannel, "'clientInboundChannel' must not be null");, +, +		this.clientInboundChannel = clientInboundChannel;, +, +	protected SubscribableChannel getClientInboundChannel() {, +		return this.clientInboundChannel;, +	}, +, +	protected abstract AbstractBrokerMessageHandler getMessageHandler(SubscribableChannel brokerChannel);, +++ b/build.gradle, +		testCompile("org.projectreactor:reactor-core:1.0.0.RELEASE"), +		testCompile("org.projectreactor:reactor-tcp:1.0.0.RELEASE"), +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractBrokerRegistration.java, +import org.springframework.messaging.SubscribableChannel;, +	private final SubscribableChannel clientInboundChannel;, +, +	public AbstractBrokerRegistration(SubscribableChannel clientInboundChannel,, +			MessageChannel clientOutboundChannel, String[] destinationPrefixes) {, +, +		Assert.notNull(clientOutboundChannel, "'clientInboundChannel' must not be null");, +, +		this.clientInboundChannel = clientInboundChannel;, +, +	protected SubscribableChannel getClientInboundChannel() {, +		return this.clientInboundChannel;, +	}, +, +	protected abstract AbstractBrokerMessageHandler getMessageHandler(SubscribableChannel brokerChannel);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, + * to and from the client inbound/outbound channels (e.g. STOMP over WebSocket)., +		executor.setThreadNamePrefix("clientInboundChannel-");, +		executor.setThreadNamePrefix("clientOutboundChannel-");, +		executor.setThreadNamePrefix("brokerChannel-");, +			MessageBrokerRegistry registry = new MessageBrokerRegistry(clientInboundChannel(), clientOutboundChannel());, +		SimpAnnotationMethodMessageHandler handler = new SimpAnnotationMethodMessageHandler(, +				clientInboundChannel(), clientOutboundChannel(), brokerMessagingTemplate());, +		SimpleBrokerMessageHandler handler = getBrokerRegistry().getSimpleBroker(brokerChannel());, +		return (handler != null) ? handler : noopBroker;, +		AbstractBrokerMessageHandler handler = getBrokerRegistry().getStompBrokerRelay(brokerChannel());, +		return (handler != null) ? handler : noopBroker;, +				clientInboundChannel(), clientOutboundChannel(), brokerChannel(), userDestinationResolver());, +++ b/build.gradle, +		testCompile("org.projectreactor:reactor-core:1.0.0.RELEASE"), +		testCompile("org.projectreactor:reactor-tcp:1.0.0.RELEASE"), +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractBrokerRegistration.java, +import org.springframework.messaging.SubscribableChannel;, +	private final SubscribableChannel clientInboundChannel;, +, +	public AbstractBrokerRegistration(SubscribableChannel clientInboundChannel,, +			MessageChannel clientOutboundChannel, String[] destinationPrefixes) {, +, +		Assert.notNull(clientOutboundChannel, "'clientInboundChannel' must not be null");, +, +		this.clientInboundChannel = clientInboundChannel;, +, +	protected SubscribableChannel getClientInboundChannel() {, +		return this.clientInboundChannel;, +	}, +, +	protected abstract AbstractBrokerMessageHandler getMessageHandler(SubscribableChannel brokerChannel);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, + * to and from the client inbound/outbound channels (e.g. STOMP over WebSocket)., +		executor.setThreadNamePrefix("clientInboundChannel-");, +		executor.setThreadNamePrefix("clientOutboundChannel-");, +		executor.setThreadNamePrefix("brokerChannel-");, +			MessageBrokerRegistry registry = new MessageBrokerRegistry(clientInboundChannel(), clientOutboundChannel());, +		SimpAnnotationMethodMessageHandler handler = new SimpAnnotationMethodMessageHandler(, +				clientInboundChannel(), clientOutboundChannel(), brokerMessagingTemplate());, +		SimpleBrokerMessageHandler handler = getBrokerRegistry().getSimpleBroker(brokerChannel());, +		return (handler != null) ? handler : noopBroker;, +		AbstractBrokerMessageHandler handler = getBrokerRegistry().getStompBrokerRelay(brokerChannel());, +		return (handler != null) ? handler : noopBroker;, +				clientInboundChannel(), clientOutboundChannel(), brokerChannel(), userDestinationResolver());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/MessageBrokerRegistry.java, +import org.springframework.messaging.SubscribableChannel;, +	private final SubscribableChannel clientInboundChannel;, +, +	private SimpleBrokerRegistration simpleBrokerRegistration;, +	private StompBrokerRelayRegistration brokerRelayRegistration;, +	public MessageBrokerRegistry(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel) {, +		Assert.notNull(clientInboundChannel);, +		this.clientInboundChannel = clientInboundChannel;, +		this.simpleBrokerRegistration = new SimpleBrokerRegistration(, +				this.clientInboundChannel, this.clientOutboundChannel, destinationPrefixes);, +		return this.simpleBrokerRegistration;, +		this.brokerRelayRegistration = new StompBrokerRelayRegistration(, +				this.clientInboundChannel, this.clientOutboundChannel, destinationPrefixes);]