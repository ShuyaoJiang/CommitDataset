[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/SendToUser.java, +	/**, +     * A flag indicating whether the message is to be sent to a particular user session., +     *, +     */, +    boolean singleSession() default false;, +, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/SendToUser.java, +	/**, +     * A flag indicating whether the message is to be sent to a particular user session., +     *, +     */, +    boolean singleSession() default false;, +, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +				if (sendToUser.singleSession()) {, +					this.messagingTemplate.convertAndSendToUser(userName, destination, returnValue, createHeaders(sessionId));, +				}, +				else } , +					this.messagingTemplate.convertAndSendToUser(userName, destination, returnValue);, +				}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/SendToUser.java, +	/**, +     * A flag indicating whether the message is to be sent to a particular user session., +     *, +     */, +    boolean singleSession() default false;, +, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +				if (sendToUser.singleSession()) {, +					this.messagingTemplate.convertAndSendToUser(userName, destination, returnValue, createHeaders(sessionId));, +				}, +				else } , +					this.messagingTemplate.convertAndSendToUser(userName, destination, returnValue);, +				}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolver.java, +			if (headers.getSessionId() == null){, +			} else {, +				sessionIds = Collections.singleton(headers.getSessionId());, +			}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/SendToUser.java, +	/**, +     * A flag indicating whether the message is to be sent to a particular user session., +     *, +     */, +    boolean singleSession() default false;, +, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +				if (sendToUser.singleSession()) {, +					this.messagingTemplate.convertAndSendToUser(userName, destination, returnValue, createHeaders(sessionId));, +				}, +				else } , +					this.messagingTemplate.convertAndSendToUser(userName, destination, returnValue);, +				}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolver.java, +			if (headers.getSessionId() == null){, +			} else {, +				sessionIds = Collections.singleton(headers.getSessionId());, +			}, +, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandlerTests.java, +	private MethodParameter sendToUserSingleSessionReturnType;, +	private MethodParameter sendToUserSingleSessionDefaultDestReturnType;, +		method = this.getClass().getDeclaredMethod("handleAndSendToUserSingleSession");, +		this.sendToUserSingleSessionReturnType = new MethodParameter(method, -1);, +, +		, +		method = this.getClass().getDeclaredMethod("handleAndSendToUserSingleSessionDefaultDestination");, +		this.sendToUserSingleSessionDefaultDestReturnType = new MethodParameter(method, -1);, +		assertNull(headers.getSessionId());, +		assertNull(headers.getSubscriptionId());, +		assertEquals("/user/" + user.getName() + "/dest1", headers.getDestination());, +, +		message = this.messageCaptor.getAllValues().get(1);, +		headers = SimpMessageHeaderAccessor.wrap(message);, +		assertNull(headers.getSessionId());, +		assertNull(headers.getSubscriptionId());, +		assertEquals("/user/" + user.getName() + "/dest2", headers.getDestination());, +	}, +	, +	@Test, +	public void sendToUserSingleSession() throws Exception {, +, +		when(this.messageChannel.send(any(Message.class))).thenReturn(true);, +, +		String sessionId = "sess1";, +		TestUser user = new TestUser();, +		Message<?> inputMessage = createInputMessage(sessionId, "sub1", null, user);, +		this.handler.handleReturnValue(payloadContent, this.sendToUserSingleSessionReturnType, inputMessage);, +, +		verify(this.messageChannel, times(2)).send(this.messageCaptor.capture());, +, +		Message<?> message = this.messageCaptor.getAllValues().get(0);, +		SimpMessageHeaderAccessor headers = SimpMessageHeaderAccessor.wrap(message);, +		assertNull(headers.getSessionId());]