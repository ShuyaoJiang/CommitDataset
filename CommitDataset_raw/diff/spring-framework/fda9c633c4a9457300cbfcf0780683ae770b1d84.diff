[+++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/AbstractMessageConverter.java, +import org.springframework.messaging.support.MessageHeaderAccessor;, +, +, +		MimeType mimeType = getDefaultContentType(payload);, +, +		if (headers != null) {, +			MessageHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(headers, MessageHeaderAccessor.class);, +			if (accessor != null && accessor.isMutable()) {, +				accessor.setHeaderIfAbsent(MessageHeaders.CONTENT_TYPE, mimeType);, +				return MessageBuilder.createMessage(payload, accessor.getMessageHeaders());, +			}, +		}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/AbstractMessageConverter.java, +import org.springframework.messaging.support.MessageHeaderAccessor;, +, +, +		MimeType mimeType = getDefaultContentType(payload);, +, +		if (headers != null) {, +			MessageHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(headers, MessageHeaderAccessor.class);, +			if (accessor != null && accessor.isMutable()) {, +				accessor.setHeaderIfAbsent(MessageHeaders.CONTENT_TYPE, mimeType);, +				return MessageBuilder.createMessage(payload, accessor.getMessageHeaders());, +			}, +		}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/SimpleMessageConverter.java, +import org.springframework.messaging.support.MessageHeaderAccessor;, +		if (payload == null) {, +			return null;, +		}, +		if (headers != null) {, +			MessageHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(headers, MessageHeaderAccessor.class);, +			if (accessor != null && accessor.isMutable()) {, +				return MessageBuilder.createMessage(payload, accessor.getMessageHeaders());, +			}, +		}, +		return MessageBuilder.withPayload(payload).copyHeaders(headers).build();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/AbstractMessageConverter.java, +import org.springframework.messaging.support.MessageHeaderAccessor;, +, +, +		MimeType mimeType = getDefaultContentType(payload);, +, +		if (headers != null) {, +			MessageHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(headers, MessageHeaderAccessor.class);, +			if (accessor != null && accessor.isMutable()) {, +				accessor.setHeaderIfAbsent(MessageHeaders.CONTENT_TYPE, mimeType);, +				return MessageBuilder.createMessage(payload, accessor.getMessageHeaders());, +			}, +		}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/SimpleMessageConverter.java, +import org.springframework.messaging.support.MessageHeaderAccessor;, +		if (payload == null) {, +			return null;, +		}, +		if (headers != null) {, +			MessageHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(headers, MessageHeaderAccessor.class);, +			if (accessor != null && accessor.isMutable()) {, +				return MessageBuilder.createMessage(payload, accessor.getMessageHeaders());, +			}, +		}, +		return MessageBuilder.withPayload(payload).copyHeaders(headers).build();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/AbstractMessageSendingTemplate.java, +		this.convertAndSend(destination, payload, headers, null);, +		this.convertAndSend(destination, payload, null, postProcessor);, +		MessageHeaders messageHeaders = null;, +, +		if (headers != null) {, +			if (headers instanceof MessageHeaders) {, +				messageHeaders = (MessageHeaders) headers;, +			}, +			else {, +				messageHeaders = new MessageHeaders(headers);, +			}, +			Object contentType = (messageHeaders != null) ? messageHeaders.get(MessageHeaders.CONTENT_TYPE) : null;, +					+ payloadType + "', Content-Type=" + contentType + ", converter=" + this.converter, null);, +, +	 * Provides access to the map of input headers before a send operation. Sub-classes, +	 * can modify the headers and then return the same or a different map., +	 * <p>This default implementation in this class returns the input map., +	 *, +	 * @param headers the headers to send or {@code null}., +	 * @return the actual headers to send or {@code null}., +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/AbstractMessageConverter.java, +import org.springframework.messaging.support.MessageHeaderAccessor;, +, +, +		MimeType mimeType = getDefaultContentType(payload);, +, +		if (headers != null) {, +			MessageHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(headers, MessageHeaderAccessor.class);, +			if (accessor != null && accessor.isMutable()) {, +				accessor.setHeaderIfAbsent(MessageHeaders.CONTENT_TYPE, mimeType);, +				return MessageBuilder.createMessage(payload, accessor.getMessageHeaders());, +			}, +		}]