[+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +import org.springframework.web.servlet.mvc.support.RedirectAttributes;, +	@Test, +	public void redirectAttribute() throws Exception {, +		initServlet(RedirectAttributesController.class);, +		try {, +			servlet.service(new MockHttpServletRequest("GET", "/"), new MockHttpServletResponse());, +		}, +		catch (NestedServletException ex) {, +			assertTrue(ex.getMessage().contains("not assignable from the actual model"));, +		}, +	}, +	, +	@Controller, +	static class RedirectAttributesController {, +, +		@RequestMapping(value = "/"), +		public void handle(RedirectAttributes redirectAttrs) {, +		}, +	}, +	, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +import org.springframework.web.servlet.mvc.support.RedirectAttributes;, +	@Test, +	public void redirectAttribute() throws Exception {, +		initServlet(RedirectAttributesController.class);, +		try {, +			servlet.service(new MockHttpServletRequest("GET", "/"), new MockHttpServletResponse());, +		}, +		catch (NestedServletException ex) {, +			assertTrue(ex.getMessage().contains("not assignable from the actual model"));, +		}, +	}, +	, +	@Controller, +	static class RedirectAttributesController {, +, +		@RequestMapping(value = "/"), +		public void handle(RedirectAttributes redirectAttrs) {, +		}, +	}, +	, +++ b/org.springframework.web/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodInvoker.java, +					Class<?> paramType = methodParam.getParameterType();, +						if (!paramType.isAssignableFrom(implicitModel.getClass())) {, +							throw new IllegalStateException("Argument [" + paramType.getSimpleName() + "] is of type " +, +									"Model or Map but is not assignable from the actual model. You may need to switch " +, +									"newer MVC infrastructure classes to use this argument.");, +						}]