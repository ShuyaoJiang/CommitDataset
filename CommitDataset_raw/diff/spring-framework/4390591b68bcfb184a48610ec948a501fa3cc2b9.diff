[+++ b/spring-messaging/src/main/java/org/springframework/messaging/core/BeanFactoryMessageChannelDestinationResolver.java, +import org.springframework.beans.factory.BeanFactoryAware;, +public class BeanFactoryMessageChannelDestinationResolver implements DestinationResolver<MessageChannel>, BeanFactoryAware {, +	private volatile BeanFactory beanFactory;, +	/**, +	 * Create a new instance of the {@link, +	 * BeanFactoryMessageChannelDestinationResolver} class., +	 * <p>The BeanFactory to access must be set via <code>setBeanFactory</code>., +	 * This will happen automatically if this resolver is defined within an, +	 * ApplicationContext thereby receiving the callback upon initialization., +	 *, +	 * @see #setBeanFactory, +	 */, +	public BeanFactoryMessageChannelDestinationResolver() {, +	}, +, +	/**, +	 * Create a new instance of the {@link, +	 * BeanFactoryMessageChannelDestinationResolver} class., +	 * <p>Use of this constructor is redundant if this object is being created, +	 * by a Spring IoC container as the supplied {@link BeanFactory} will be, +	 * replaced by the {@link BeanFactory} that creates it (c.f. the, +	 * {@link BeanFactoryAware} contract). So only use this constructor if you, +	 * are instantiating this object explicitly rather than defining a bean., +	 *, +	 * @param beanFactory the bean factory to be used to lookup {@link MessageChannel}s., +	 */, +	@Override, +	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {, +		this.beanFactory = beanFactory;, +	}, +]