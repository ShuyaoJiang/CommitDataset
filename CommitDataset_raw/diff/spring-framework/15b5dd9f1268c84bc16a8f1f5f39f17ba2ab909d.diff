[+++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, + * Copyright 2002-2017 the original author or authors., +		if (GenericApplicationListener.class.isAssignableFrom(listenerType) ||, +				SmartApplicationListener.class.isAssignableFrom(listenerType)) {, +++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, + * Copyright 2002-2017 the original author or authors., +		if (GenericApplicationListener.class.isAssignableFrom(listenerType) ||, +				SmartApplicationListener.class.isAssignableFrom(listenerType)) {, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationEventMulticaster.java, + * Copyright 2002-2017 the original author or authors., +	 * @since 4.2, +++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, + * Copyright 2002-2017 the original author or authors., +		if (GenericApplicationListener.class.isAssignableFrom(listenerType) ||, +				SmartApplicationListener.class.isAssignableFrom(listenerType)) {, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationEventMulticaster.java, + * Copyright 2002-2017 the original author or authors., +	 * @since 4.2, +++ b/spring-context/src/main/java/org/springframework/context/event/EventListenerMethodProcessor.java, + * Copyright 2002-2017 the original author or authors., +					logger.trace("No @EventListener annotations found on bean class: " + targetType.getName());, +++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, + * Copyright 2002-2017 the original author or authors., +		if (GenericApplicationListener.class.isAssignableFrom(listenerType) ||, +				SmartApplicationListener.class.isAssignableFrom(listenerType)) {, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationEventMulticaster.java, + * Copyright 2002-2017 the original author or authors., +	 * @since 4.2, +++ b/spring-context/src/main/java/org/springframework/context/event/EventListenerMethodProcessor.java, + * Copyright 2002-2017 the original author or authors., +					logger.trace("No @EventListener annotations found on bean class: " + targetType.getName());, +++ b/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java, + * Copyright 2002-2017 the original author or authors., +import javax.annotation.PostConstruct;, +import org.junit.Ignore;, +import org.springframework.context.ApplicationEventPublisher;, +	@Test @Ignore  // SPR-15122, +	public void listenersReceiveEarlyEvents() {, +		load(EventOnPostConstruct.class, OrderedTestListener.class);, +		OrderedTestListener listener = this.context.getBean(OrderedTestListener.class);, +, +		assertThat(listener.order, contains("first", "second", "third"));, +	}, +, +	static class EventOnPostConstruct {, +, +		@Autowired, +		ApplicationEventPublisher publisher;, +, +		@PostConstruct, +		public void init() {, +			this.publisher.publishEvent("earlyEvent");, +		}, +	}, +, +, +++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, + * Copyright 2002-2017 the original author or authors., +		if (GenericApplicationListener.class.isAssignableFrom(listenerType) ||, +				SmartApplicationListener.class.isAssignableFrom(listenerType)) {, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationEventMulticaster.java, + * Copyright 2002-2017 the original author or authors., +	 * @since 4.2, +++ b/spring-context/src/main/java/org/springframework/context/event/EventListenerMethodProcessor.java, + * Copyright 2002-2017 the original author or authors., +					logger.trace("No @EventListener annotations found on bean class: " + targetType.getName());, +++ b/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java, + * Copyright 2002-2017 the original author or authors., +import javax.annotation.PostConstruct;, +import org.junit.Ignore;, +import org.springframework.context.ApplicationEventPublisher;, +	@Test @Ignore  // SPR-15122, +	public void listenersReceiveEarlyEvents() {, +		load(EventOnPostConstruct.class, OrderedTestListener.class);, +		OrderedTestListener listener = this.context.getBean(OrderedTestListener.class);, +, +		assertThat(listener.order, contains("first", "second", "third"));, +	}, +, +	static class EventOnPostConstruct {, +, +		@Autowired, +		ApplicationEventPublisher publisher;, +, +		@PostConstruct, +		public void init() {, +			this.publisher.publishEvent("earlyEvent");, +		}, +	}, +, +, +++ b/spring-web/src/main/java/org/springframework/http/converter/GenericHttpMessageConverter.java, + * Copyright 2002-2017 the original author or authors., +	 * <p>This method should perform the same checks than, +	 * @param type the (potentially generic) type to test for writability, +	 * (can be {@code null} if not specified), +	 * @param mediaType the media type to write (can be {@code null} if not specified);, +	 * typically the value of an {@code Accept} header., +++ b/spring-context/src/main/java/org/springframework/context/event/AbstractApplicationEventMulticaster.java, + * Copyright 2002-2017 the original author or authors.]