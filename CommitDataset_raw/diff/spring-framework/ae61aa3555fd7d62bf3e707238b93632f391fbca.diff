[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, +public class AnnotationConfigApplicationContext extends GenericApplicationContext {, +	 * Provide a custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}, +	 * and/or {@link ClassPathBeanDefinitionScanner}, if any., +	 * <p>Default is {@link org.springframework.context.annotation.AnnotationBeanNameGenerator}., +	 * @see AnnotatedBeanDefinitionReader#setBeanNameGenerator, +	 * @see ClassPathBeanDefinitionScanner#setBeanNameGenerator, +	 * Set the {@link ScopeMetadataResolver} to use for detected bean classes., +	 * <p>The default is an {@link AnnotationScopeMetadataResolver}., +	/**, +	 * Register one or more annotated classes to be processed., +	 * Note that {@link #refresh()} must be called in order for the context to fully, +	 * process the new class., +	 * <p>Calls to {@link #register} are idempotent; adding the same, +	 * annotated class more than once has no additional effect., +	 * @param annotatedClasses one or more annotated classes,, +	 * e.g. {@link Configuration @Configuration} classes, +	 * @see #scan(String...), +	 * @see #refresh(), +	 */, +	/**, +	 * Perform a scan within the specified base packages., +	 * Note that {@link #refresh()} must be called in order for the context to, +	 * fully process the new class., +	 * @param basePackages the packages to check for annotated classes, +	 * @see #register(Class...), +	 * @see #refresh(), +	 */, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, +public class AnnotationConfigApplicationContext extends GenericApplicationContext {, +	 * Provide a custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}, +	 * and/or {@link ClassPathBeanDefinitionScanner}, if any., +	 * <p>Default is {@link org.springframework.context.annotation.AnnotationBeanNameGenerator}., +	 * @see AnnotatedBeanDefinitionReader#setBeanNameGenerator, +	 * @see ClassPathBeanDefinitionScanner#setBeanNameGenerator, +	 * Set the {@link ScopeMetadataResolver} to use for detected bean classes., +	 * <p>The default is an {@link AnnotationScopeMetadataResolver}., +	/**, +	 * Register one or more annotated classes to be processed., +	 * Note that {@link #refresh()} must be called in order for the context to fully, +	 * process the new class., +	 * <p>Calls to {@link #register} are idempotent; adding the same, +	 * annotated class more than once has no additional effect., +	 * @param annotatedClasses one or more annotated classes,, +	 * e.g. {@link Configuration @Configuration} classes, +	 * @see #scan(String...), +	 * @see #refresh(), +	 */, +	/**, +	 * Perform a scan within the specified base packages., +	 * Note that {@link #refresh()} must be called in order for the context to, +	 * fully process the new class., +	 * @param basePackages the packages to check for annotated classes, +	 * @see #register(Class...), +	 * @see #refresh(), +	 */, +++ /dev/null, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, +public class AnnotationConfigApplicationContext extends GenericApplicationContext {, +	 * Provide a custom {@link BeanNameGenerator} for use with {@link AnnotatedBeanDefinitionReader}, +	 * and/or {@link ClassPathBeanDefinitionScanner}, if any., +	 * <p>Default is {@link org.springframework.context.annotation.AnnotationBeanNameGenerator}., +	 * @see AnnotatedBeanDefinitionReader#setBeanNameGenerator, +	 * @see ClassPathBeanDefinitionScanner#setBeanNameGenerator, +	 * Set the {@link ScopeMetadataResolver} to use for detected bean classes., +	 * <p>The default is an {@link AnnotationScopeMetadataResolver}., +	/**, +	 * Register one or more annotated classes to be processed., +	 * Note that {@link #refresh()} must be called in order for the context to fully, +	 * process the new class., +	 * <p>Calls to {@link #register} are idempotent; adding the same, +	 * annotated class more than once has no additional effect., +	 * @param annotatedClasses one or more annotated classes,, +	 * e.g. {@link Configuration @Configuration} classes, +	 * @see #scan(String...), +	 * @see #refresh(), +	 */, +	/**, +	 * Perform a scan within the specified base packages., +	 * Note that {@link #refresh()} must be called in order for the context to, +	 * fully process the new class., +	 * @param basePackages the packages to check for annotated classes, +	 * @see #register(Class...), +	 * @see #refresh(), +	 */, +++ /dev/null, +++ b/org.springframework.web/src/main/java/org/springframework/web/context/support/AnnotationConfigWebApplicationContext.java, +public class AnnotationConfigWebApplicationContext extends AbstractRefreshableWebApplicationContext {, +	 * Register one or more annotated classes to be processed., +	 * Note that {@link #refresh()} must be called in order for the context to fully, +	 * process the new class., +	 * <p>Calls to {@link #register} are idempotent; adding the same, +	 * annotated class more than once has no additional effect., +	 * @param annotatedClasses one or more annotated classes,, +	 * e.g. {@link Configuration @Configuration} classes, +	 * @see #scan(String...), +	 * Perform a scan within the specified base packages., +	 * Note that {@link #refresh()} must be called in order for the context to, +	 * fully process the new class., +	 * @param basePackages the packages to check for annotated classes]