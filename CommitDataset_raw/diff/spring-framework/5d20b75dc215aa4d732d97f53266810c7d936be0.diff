[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/AnnotationMethodMessageHandler.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.messaging.simp.handler;, +, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Method;, +import java.util.Arrays;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +import java.util.concurrent.ConcurrentHashMap;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.beans.BeansException;, +import org.springframework.beans.factory.InitializingBean;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.ApplicationContextAware;, +import org.springframework.core.MethodParameter;, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.messaging.Message;, +import org.springframework.messaging.MessageChannel;, +import org.springframework.messaging.MessageHandler;, +import org.springframework.messaging.MessagingException;, +import org.springframework.messaging.handler.annotation.MessageMapping;, +import org.springframework.messaging.handler.annotation.support.MessageBodyArgumentResolver;, +import org.springframework.messaging.handler.annotation.support.MessageExceptionHandlerMethodResolver;, +import org.springframework.messaging.handler.method.InvocableMessageHandlerMethod;, +import org.springframework.messaging.handler.method.MessageArgumentResolverComposite;, +import org.springframework.messaging.handler.method.MessageReturnValueHandlerComposite;, +import org.springframework.messaging.simp.MessageHolder;, +import org.springframework.messaging.simp.SimpMessageHeaderAccessor;, +import org.springframework.messaging.simp.SimpMessageType;, +import org.springframework.messaging.simp.annotation.SubscribeEvent;, +import org.springframework.messaging.simp.annotation.UnsubscribeEvent;, +import org.springframework.messaging.simp.annotation.support.MessageSendingReturnValueHandler;, +import org.springframework.messaging.simp.annotation.support.PrincipalMessageArgumentResolver;, +import org.springframework.messaging.support.converter.MessageConverter;, +import org.springframework.stereotype.Controller;, +import org.springframework.util.Assert;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.ReflectionUtils.MethodFilter;, +import org.springframework.web.method.HandlerMethod;, +import org.springframework.web.method.HandlerMethodSelector;, +, +, +/**, + * @author Rossen Stoyanchev, + * @since 4.0, + */, +public class AnnotationMethodMessageHandler implements MessageHandler, ApplicationContextAware, InitializingBean {, +, +	private static final Log logger = LogFactory.getLog(AnnotationMethodMessageHandler.class);, +, +	private final MessageChannel outboundChannel;, +, +	private MessageConverter<?> messageConverter;, +, +	private ApplicationContext applicationContext;, +, +	private Map<MappingInfo, HandlerMethod> messageMethods = new HashMap<MappingInfo, HandlerMethod>();, +, +	private Map<MappingInfo, HandlerMethod> subscribeMethods = new HashMap<MappingInfo, HandlerMethod>();, +, +	private Map<MappingInfo, HandlerMethod> unsubscribeMethods = new HashMap<MappingInfo, HandlerMethod>();, +, +	private final Map<Class<?>, MessageExceptionHandlerMethodResolver> exceptionHandlerCache =, +			new ConcurrentHashMap<Class<?>, MessageExceptionHandlerMethodResolver>(64);, +, +	private MessageArgumentResolverComposite argumentResolvers = new MessageArgumentResolverComposite();, +, +	private MessageReturnValueHandlerComposite returnValueHandlers = new MessageReturnValueHandlerComposite();, +, +, +	/**, +	 * @param inboundChannel a channel for processing incoming messages from clients, +	 * @param outboundChannel a channel for messages going out to clients, +	 */, +	public AnnotationMethodMessageHandler(MessageChannel outboundChannel) {, +		Assert.notNull(outboundChannel, "outboundChannel is required");, +		this.outboundChannel = outboundChannel;, +	}, +, +	/**]