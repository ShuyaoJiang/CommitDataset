[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilder.java, + * Copyright 2002-2014 the original author or authors., +, +, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilder.java, + * Copyright 2002-2014 the original author or authors., +, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/HandlerMethod.java, + * Copyright 2002-2014 the original author or authors., + * Encapsulates information about a bean method consisting of a {@link #getMethod() method}, + * and a {@link #getBean() bean}. Provides convenient access to method parameters,, + * method return value, method annotations., + * <p>The class may be created with a bean instance or with a bean name (e.g. lazy bean,, + * prototype bean). Use {@link #createWithResolvedBean()} to obtain an {@link HandlerMethod}, + * instance with a bean instance initialized through the bean factory., +	private final Method method;, +	private final MethodParameter[] parameters;, +, +		Assert.notNull(bean, "Bean is required");, +		Assert.notNull(method, "Method is required");, +		Assert.notNull(bean, "Bean is required");, +		Assert.notNull(methodName, "Method name is required");, +		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(this.method);, +		Assert.hasText(beanName, "Bean name is required");, +		Assert.notNull(beanFactory, "BeanFactory is required");, +		Assert.notNull(method, "Method is required");, +				"BeanFactory [" + beanFactory + "] does not contain bean [" + beanName + "]");, +		Assert.notNull(handlerMethod, "HandlerMethod is required");, +		Assert.notNull(handlerMethod, "HandlerMethod is required");, +		Assert.notNull(handler, "Handler object is required");, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilder.java, + * Copyright 2002-2014 the original author or authors., +, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/HandlerMethod.java, + * Copyright 2002-2014 the original author or authors., + * Encapsulates information about a bean method consisting of a {@link #getMethod() method}, + * and a {@link #getBean() bean}. Provides convenient access to method parameters,, + * method return value, method annotations., + * <p>The class may be created with a bean instance or with a bean name (e.g. lazy bean,, + * prototype bean). Use {@link #createWithResolvedBean()} to obtain an {@link HandlerMethod}, + * instance with a bean instance initialized through the bean factory., +	private final Method method;, +	private final MethodParameter[] parameters;, +, +		Assert.notNull(bean, "Bean is required");, +		Assert.notNull(method, "Method is required");, +		Assert.notNull(bean, "Bean is required");, +		Assert.notNull(methodName, "Method name is required");, +		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(this.method);, +		Assert.hasText(beanName, "Bean name is required");, +		Assert.notNull(beanFactory, "BeanFactory is required");, +		Assert.notNull(method, "Method is required");, +				"BeanFactory [" + beanFactory + "] does not contain bean [" + beanName + "]");, +		Assert.notNull(handlerMethod, "HandlerMethod is required");, +		Assert.notNull(handlerMethod, "HandlerMethod is required");, +		Assert.notNull(handler, "Handler object is required");, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java, +, +	/**, +	 * A {@code RequestMappingHandlerMapping} that allows registration of controllers., +	 */, +				detectHandlerMethods(handler);, +, +	/**, +	 * A static resolver placeholder for values embedded in request mappings., +	 */, +, +	/**, +	 * A {@link ViewResolver} that always returns same View., +	 */, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseBuilder.java, + * Copyright 2002-2014 the original author or authors., +, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/HandlerMethod.java, + * Copyright 2002-2014 the original author or authors., + * Encapsulates information about a bean method consisting of a {@link #getMethod() method}, + * and a {@link #getBean() bean}. Provides convenient access to method parameters,, + * method return value, method annotations., + * <p>The class may be created with a bean instance or with a bean name (e.g. lazy bean,, + * prototype bean). Use {@link #createWithResolvedBean()} to obtain an {@link HandlerMethod}, + * instance with a bean instance initialized through the bean factory., +	private final Method method;, +	private final MethodParameter[] parameters;, +, +		Assert.notNull(bean, "Bean is required");, +		Assert.notNull(method, "Method is required");, +		Assert.notNull(bean, "Bean is required");, +		Assert.notNull(methodName, "Method name is required");, +		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(this.method);, +		Assert.hasText(beanName, "Bean name is required");, +		Assert.notNull(beanFactory, "BeanFactory is required");, +		Assert.notNull(method, "Method is required");, +				"BeanFactory [" + beanFactory + "] does not contain bean [" + beanName + "]");, +		Assert.notNull(handlerMethod, "HandlerMethod is required");, +		Assert.notNull(handlerMethod, "HandlerMethod is required");, +		Assert.notNull(handler, "Handler object is required");, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java]