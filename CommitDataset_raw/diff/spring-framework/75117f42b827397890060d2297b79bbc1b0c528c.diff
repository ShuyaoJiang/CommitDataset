[+++ b/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java, +import java.util.HashMap;, +	 *, +	 * <p>As of 4.3, this is also used as the default charset for the conversion, +	 * of text bodies in a multipart request., +	 *, +	 * <p>As of 5.0 this is also used for part headers including, +	 * "Content-Disposition" (and its filename parameter) unless (the mutually, +	 * exclusive) {@link #setMultipartCharset} is also set, in which case part, +	 * headers are encoded as ASCII and <i>filename</i> is encoded with the, +	 * "encoded-word" syntax from RFC 2047., +	 *, +	 * <p>By default this is set to "UTF-8"., +	 * names. Encoding is based on the "encoded-word" syntax defined in RFC 2047, +	 *, +	 * <p>As of 5.0 by default part headers, including Content-Disposition (and, +	 * its filename parameter) will be encoded based on the setting of, +	 * {@link #setCharset(Charset)} or {@code UTF-8} by default., +	 *, +		Map<String, String> parameters = new HashMap<>(2);, +		parameters.put("boundary", new String(boundary, "US-ASCII"));, +		if (!isFilenameCharsetSet()) {, +			parameters.put("charset", this.charset.name());, +		}, +	/**, +	 * When {@link #setMultipartCharset(Charset)} is configured (i.e. RFC 2047,, +	 * "encoded-word" syntax) we need to use ASCII for part headers or otherwise, +	 * we encode directly using the configured {@link #setCharset(Charset)}., +	 */, +	private boolean isFilenameCharsetSet() {, +		return this.multipartCharset != null;, +	}, +, +				Charset charset = isFilenameCharsetSet() ? StandardCharsets.US_ASCII : this.charset;, +				HttpOutputMessage multipartMessage = new MultipartHttpOutputMessage(os, charset);, +		private final Charset charset;, +, +		public MultipartHttpOutputMessage(OutputStream outputStream, Charset charset) {, +			this.charset = charset;, +					byte[] headerName = getBytes(entry.getKey());, +						byte[] headerValue = getBytes(headerValueString);, +		private byte[] getBytes(String name) {, +			return name.getBytes(this.charset);, +++ b/spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java, +import java.util.HashMap;, +	 *, +	 * <p>As of 4.3, this is also used as the default charset for the conversion, +	 * of text bodies in a multipart request., +	 *, +	 * <p>As of 5.0 this is also used for part headers including, +	 * "Content-Disposition" (and its filename parameter) unless (the mutually, +	 * exclusive) {@link #setMultipartCharset} is also set, in which case part, +	 * headers are encoded as ASCII and <i>filename</i> is encoded with the, +	 * "encoded-word" syntax from RFC 2047., +	 *, +	 * <p>By default this is set to "UTF-8"., +	 * names. Encoding is based on the "encoded-word" syntax defined in RFC 2047, +	 *, +	 * <p>As of 5.0 by default part headers, including Content-Disposition (and, +	 * its filename parameter) will be encoded based on the setting of, +	 * {@link #setCharset(Charset)} or {@code UTF-8} by default., +	 *, +		Map<String, String> parameters = new HashMap<>(2);, +		parameters.put("boundary", new String(boundary, "US-ASCII"));, +		if (!isFilenameCharsetSet()) {, +			parameters.put("charset", this.charset.name());, +		}, +	/**, +	 * When {@link #setMultipartCharset(Charset)} is configured (i.e. RFC 2047,, +	 * "encoded-word" syntax) we need to use ASCII for part headers or otherwise, +	 * we encode directly using the configured {@link #setCharset(Charset)}., +	 */, +	private boolean isFilenameCharsetSet() {, +		return this.multipartCharset != null;, +	}, +, +				Charset charset = isFilenameCharsetSet() ? StandardCharsets.US_ASCII : this.charset;, +				HttpOutputMessage multipartMessage = new MultipartHttpOutputMessage(os, charset);, +		private final Charset charset;, +, +		public MultipartHttpOutputMessage(OutputStream outputStream, Charset charset) {, +			this.charset = charset;, +					byte[] headerName = getBytes(entry.getKey());, +						byte[] headerValue = getBytes(headerValueString);, +		private byte[] getBytes(String name) {, +			return name.getBytes(this.charset);, +++ b/spring-web/src/test/java/org/springframework/http/converter/FormHttpMessageConverterTests.java, +import static org.hamcrest.CoreMatchers.allOf;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNotNull;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.assertTrue;, +import static org.mockito.BDDMockito.never;, +import static org.mockito.BDDMockito.verify;]