[+++ b/spring-framework-reference/src/view.xml, +      which should meet all your checkbox needs.</para>, +      , +      <itemizedlist>, +        </itemizedlist>, +      </section>, +      </section>, +      your classpath, and for PDF generation, the iText library.</para>, +        <para>First, let's amend the views.properties file (or xml, +        earlier:</para>, +        , +        <programlisting>home.class=xslt.HomePage, +pdf.class=pdf.HomePage</programlisting>, +, +        <para><emphasis>If you want to start with a, +        template spreadsheet or a fillable PDF form to add your model data to, specify the location, +        (for JExcelApi-generated Excel files) and implementing the, +        <literal>buildExcelDocument()</literal> method.</para>, +        first column of a new spreadsheet:</para>, +        , +        <programlisting language="java">package excel;, +}</programlisting>, +        <para>And the following is a view generating the same Excel file, now using, +        JExcelApi:</para>, +        , +        <programlisting language="java">package excel;, +}</programlisting>, +        JExcelApi is somewhat more intuitive, and furthermore, JExcelApi has, +        slightly better image-handling capabilities. There have been memory, +        problems with large Excel files when using JExcelApi however.</para>, +        follows:</para>, +, +        <programlisting language="java">package pdf;, +}</programlisting>, +, +        <para>Once again, amend the controller to return the, +        <literal>pdf</literal> view with <literal>return new, +        ModelAndView("pdf", map);</literal>, and reload the URL in your, +    rendering reports in four different formats: CSV, Excel, HTML and, +        a matter of adding the appropriate entries in the resource bundle, +        of the application. Thus, to make changes to the file you will need to, +        for the report format to be specified at runtime. The actual rendering of, +        mapping key to look up the actual view implementation class, and it uses, +        you add an entry to your model with the format key as the key and the, +      simple name/value pairs and can be added to the, +      cases Spring will wrap instances of <literal>Collection</literal> in a, +      <literal>Collection</literal> into the model you need to use the, +      design files. The drawback of this approach is obvious: the values are, +      configure sub-reports declaratively, and you can include additional data, +        pass it into the JasperReports engine as a sub-report using the, +        corresponds to the name of the sub-report parameter in the report, +        load this report file, compiling it if necessary, and pass it into, +        <para>This step is entirely optional when using Spring to configure your, +        should convert. To do this, configure the list of parameter names using, +        the <literal>subReportDataKeys</literal> property of your chosen, +        view class:</para>, +, +        <programlisting language="xml">&lt;property name="subReportDataKeys" value="SubReportData"/&gt;</programlisting>, +, +        <para>Here, the key you supply <emphasis role="bold">must</emphasis>, +        correspond to both the key used in your <literal>ModelAndView</literal>, +        and the key used in your report design file.</para>, +      <para>If you have special requirements for exporter configuration --, +      perhaps you want a specific page size for your PDF report -- you can, +      property is typed as a <interfacename>Map</interfacename>. In your, +      a static field that contains the exporter parameter definition, and the, +      <classname>JasperReportsHtmlView</classname> is configured with an, +    implement the <methodname>buildFeedEntries()</methodname> method and, +    optionally override the <methodname>buildFeedMetadata()</methodname> method, +    (the default implementation is empty), as shown below.</para>, +      HttpServletRequest request, HttpServletResponse response), +      throws Exception {, +    <classname>AbstractRssFeedView</classname>, as shown below.</para>, +      HttpServletRequest request, HttpServletResponse response), +      throws Exception {, +    <para>The <methodname>buildFeedItems()</methodname> and, +    <methodname>buildFeedEntires()</methodname> methods pass in the HTTP request in case, +    <para>For an example of creating an Atom view please refer to Alef, +  <section id="view-xml-marshalling">, +]