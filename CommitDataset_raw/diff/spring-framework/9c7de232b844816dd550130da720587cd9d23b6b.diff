[+++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/CorsUtils.java, +		int actualPort = getPort(actualUrl.getScheme(), actualUrl.getPort());, +		return (actualHost.equals(originUrl.getHost()) && actualPort == getPort(originUrl.getScheme(), originUrl.getPort()));, +	private static int getPort(String scheme, int port) {, +			if ("http".equals(scheme) || "ws".equals(scheme)) {, +			else if ("https".equals(scheme) || "wss".equals(scheme)) {, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/CorsUtils.java, +		int actualPort = getPort(actualUrl.getScheme(), actualUrl.getPort());, +		return (actualHost.equals(originUrl.getHost()) && actualPort == getPort(originUrl.getScheme(), originUrl.getPort()));, +	private static int getPort(String scheme, int port) {, +			if ("http".equals(scheme) || "ws".equals(scheme)) {, +			else if ("https".equals(scheme) || "wss".equals(scheme)) {, +++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, +		for (String headerName : FORWARDED_HEADER_NAMES) {, +			if (request.getHeader(headerName) != null) {, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/CorsUtils.java, +		int actualPort = getPort(actualUrl.getScheme(), actualUrl.getPort());, +		return (actualHost.equals(originUrl.getHost()) && actualPort == getPort(originUrl.getScheme(), originUrl.getPort()));, +	private static int getPort(String scheme, int port) {, +			if ("http".equals(scheme) || "ws".equals(scheme)) {, +			else if ("https".equals(scheme) || "wss".equals(scheme)) {, +++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, +		for (String headerName : FORWARDED_HEADER_NAMES) {, +			if (request.getHeader(headerName) != null) {, +++ b/spring-web/src/main/java/org/springframework/web/filter/reactive/ForwardedHeaderFilter.java, +import java.util.LinkedHashSet;, +	private static final Set<String> FORWARDED_HEADER_NAMES = new LinkedHashSet<>(5);, +		HttpHeaders headers = request.getHeaders();, +		for (String headerName : FORWARDED_HEADER_NAMES) {, +			if (headers.containsKey(headerName)) {, +				return false;, +			}, +		}, +		return true;, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/CorsUtils.java, +		int actualPort = getPort(actualUrl.getScheme(), actualUrl.getPort());, +		return (actualHost.equals(originUrl.getHost()) && actualPort == getPort(originUrl.getScheme(), originUrl.getPort()));, +	private static int getPort(String scheme, int port) {, +			if ("http".equals(scheme) || "ws".equals(scheme)) {, +			else if ("https".equals(scheme) || "wss".equals(scheme)) {, +++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, +		for (String headerName : FORWARDED_HEADER_NAMES) {, +			if (request.getHeader(headerName) != null) {, +++ b/spring-web/src/main/java/org/springframework/web/filter/reactive/ForwardedHeaderFilter.java, +import java.util.LinkedHashSet;, +	private static final Set<String> FORWARDED_HEADER_NAMES = new LinkedHashSet<>(5);, +		HttpHeaders headers = request.getHeaders();, +		for (String headerName : FORWARDED_HEADER_NAMES) {, +			if (headers.containsKey(headerName)) {, +				return false;, +			}, +		}, +		return true;, +++ b/spring-web/src/main/java/org/springframework/web/util/WebUtils.java, +import java.util.LinkedHashSet;, +import java.util.Set;, +import org.springframework.http.HttpHeaders;, +	private static final Set<String> FORWARDED_HEADER_NAMES = new LinkedHashSet<>(5);, +, +	static {, +		FORWARDED_HEADER_NAMES.add("Forwarded");, +		FORWARDED_HEADER_NAMES.add("X-Forwarded-Host");, +		FORWARDED_HEADER_NAMES.add("X-Forwarded-Port");, +		FORWARDED_HEADER_NAMES.add("X-Forwarded-Proto");, +		FORWARDED_HEADER_NAMES.add("X-Forwarded-Prefix");, +	}, +, +		HttpHeaders headers = request.getHeaders();, +		String origin = headers.getOrigin();, +		String scheme;, +		String host;, +		int port;, +			scheme = servletRequest.getScheme();, +			host = servletRequest.getServerName();, +			port = servletRequest.getServerPort();, +, +			if(containsForwardedHeaders(servletRequest)) {, +				UriComponents actualUrl = new UriComponentsBuilder(), +						.scheme(scheme), +						.host(host), +						.port(port), +						.adaptFromForwardedHeaders(headers), +						.build();, +				scheme = actualUrl.getScheme();, +				host = actualUrl.getHost();, +				port = actualUrl.getPort();, +			}, +			UriComponents actualUrl = UriComponentsBuilder.fromHttpRequest(request).build();, +			scheme = actualUrl.getScheme();, +			host = actualUrl.getHost();, +			port = actualUrl.getPort();, +		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build();, +		return (ObjectUtils.nullSafeEquals(host, originUrl.getHost()) &&, +				getPort(scheme, port) == getPort(originUrl.getScheme(), originUrl.getPort()));, +	}, +, +	private static boolean containsForwardedHeaders(HttpServletRequest request) {, +		for (String headerName : FORWARDED_HEADER_NAMES) {, +			if (request.getHeader(headerName) != null) {, +				return true;]