[+++ b/spring-oxm/src/main/java/org/springframework/oxm/castor/CastorMarshaller.java, + * Copyright 2002-2013 the original author or authors., +import org.exolab.castor.util.ObjectFactory;, +import org.exolab.castor.xml.IDResolver;, +import org.exolab.castor.xml.XMLClassDescriptorResolver;, +import org.xml.sax.EntityResolver;, + * Implementation of the {@code Marshaller} interface for Castor. By default, Castor does, + * not require any further configuration, though setting target classes, target packages or, + * providing a mapping file can be used to have more control over the behavior of Castor., + * <p>If a target class is specified using {@code setTargetClass}, the {@code CastorMarshaller}, + * can only be used to unmarshal XML that represents that specific class. If you want to unmarshal, + * multiple classes, you have to provide a mapping file using {@code setMappingLocations}., + * <p>Due to limitations of Castor's API, it is required to set the encoding used for, + * writing to output streams. It defaults to {@code UTF-8}., + * @author Juergen Hoeller, + * @since 3.0, +, +	private String rootElement;, +, +	private boolean whitespacePreserve = false;, +	private boolean ignoreExtraAttributes = true;, +	private boolean ignoreExtraElements = false;, +	private Object rootObject;, +	private Map<String, String> castorProperties;, +, +	private Map<String, String> doctypes;, +, +	private Map<String, String> processingInstructions;, +, +	private Map<String, String> namespaceMappings;, +, +	private Map<String, String> namespaceToPackageMapping;, +, +	private EntityResolver entityResolver;, +, +	private XMLClassDescriptorResolver classDescriptorResolver;, +, +	private IDResolver idResolver;, +, +	private ObjectFactory objectFactory;, +, +	private ClassLoader beanClassLoader;, +, +	private XMLContext xmlContext;, +, +, +	 * Set the locations of the Castor XML mapping files., +	 * Set whether this marshaller should validate in- and outgoing documents., +	 * <p>Default is {@code false}., +	 * Sets whether this marshaller should output namespaces., +	 * <p>The default is {@code false}, i.e. namespaces are written., +	 * Set whether this marshaller should output the {@code xsi:type} attribute., +	 * <p>The default is {@code false}, i.e. the {@code xsi:type} is written., +	 * Set whether this marshaller should output the xml declaration., +	 * <p>The default is {@code true}, the XML declaration will be written., +	 * Set whether this marshaller should output for given type the {@code xsi:type} attribute., +	 * <p>The default is {@code true}, the {@code xsi:type} attribute will be written., +	 * Set the name of the root element., +	 * @see org.exolab.castor.xml.Marshaller#setRootElement(String), +	 */, +	public void setRootElement(String rootElement) {, +		this.rootElement = rootElement;, +	}, +, +	/**, +	 * Set the value of {@code xsi:noNamespaceSchemaLocation} attribute. When set, the, +	 * {@code xsi:noNamespaceSchemaLocation} attribute will be written for the root element., +	 * Set the value of {@code xsi:schemaLocation} attribute. When set, the, +	 * {@code xsi:schemaLocation} attribute will be written for the root element., +	 * Sets whether this marshaller should output the {@code xsi:type} attribute for the root element., +	 * This can be useful when the type of the element can not be simply determined from the element name., +	 * <p>The default is {@code false}: The {@code xsi:type} attribute for the root element won't be written., +	 * Set whether the Castor {@link Unmarshaller} should preserve "ignorable" whitespace., +	 * <p>Default is {@code false}., +	 * @see org.exolab.castor.xml.Unmarshaller#setWhitespacePreserve(boolean), +	public void setWhitespacePreserve(boolean whitespacePreserve) {, +		this.whitespacePreserve = whitespacePreserve;, +	 * Set whether the Castor {@link Unmarshaller} should ignore attributes that do not match a specific field., +	 * <p>Default is {@code true}: Extra attributes are ignored., +	 * @see org.exolab.castor.xml.Unmarshaller#setIgnoreExtraAttributes(boolean), +	public void setIgnoreExtraAttributes(boolean ignoreExtraAttributes) {, +		this.ignoreExtraAttributes = ignoreExtraAttributes;, +	 * Set whether the Castor {@link Unmarshaller} should ignore elements that do not match a specific field., +	 * <p>Default is {@code false}: Extra elements are flagged as an error., +	 * @see org.exolab.castor.xml.Unmarshaller#setIgnoreExtraElements(boolean), +	 */, +	public void setIgnoreExtraElements(boolean ignoreExtraElements) {, +		this.ignoreExtraElements = ignoreExtraElements;, +	}, +, +	/**, +	 * Set the expected root object for the unmarshaller, into which the source will be unmarshalled., +	 * @see org.exolab.castor.xml.Unmarshaller#setObject(Object), +	 * @deprecated in favor of {@link #setRootObject}, +	 */, +	@Deprecated, +	public void setObject(Object root) {, +		this.rootObject = root;, +	}, +]