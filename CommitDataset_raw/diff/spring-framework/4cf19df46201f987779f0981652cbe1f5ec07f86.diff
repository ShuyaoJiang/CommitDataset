[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/UndertowXhrTransport.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *  http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.socket.sockjs.client;, +, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.net.URI;, +import java.nio.ByteBuffer;, +import java.util.Iterator;, +import java.util.List;, +import java.util.concurrent.CopyOnWriteArrayList;, +import java.util.concurrent.CountDownLatch;, +, +, +import io.undertow.client.ClientCallback;, +import io.undertow.client.ClientConnection;, +import io.undertow.client.ClientExchange;, +import io.undertow.client.ClientRequest;, +import io.undertow.client.ClientResponse;, +import io.undertow.client.UndertowClient;, +import io.undertow.util.AttachmentKey;, +import io.undertow.util.HeaderMap;, +import io.undertow.util.HttpString;, +import io.undertow.util.Methods;, +import io.undertow.util.StringReadChannelListener;, +import org.xnio.ByteBufferSlicePool;, +import org.xnio.ChannelListener;, +import org.xnio.ChannelListeners;, +import org.xnio.IoUtils;, +import org.xnio.OptionMap;, +import org.xnio.Options;, +import org.xnio.Pool;, +import org.xnio.Pooled;, +import org.xnio.Xnio;, +import org.xnio.XnioWorker;, +import org.xnio.channels.StreamSinkChannel;, +import org.xnio.channels.StreamSourceChannel;, +, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpStatus;, +import org.springframework.http.ResponseEntity;, +import org.springframework.util.Assert;, +import org.springframework.util.concurrent.SettableListenableFuture;, +import org.springframework.web.client.HttpServerErrorException;, +import org.springframework.web.socket.CloseStatus;, +import org.springframework.web.socket.TextMessage;, +import org.springframework.web.socket.WebSocketHandler;, +import org.springframework.web.socket.WebSocketSession;, +import org.springframework.web.socket.sockjs.SockJsException;, +import org.springframework.web.socket.sockjs.SockJsTransportFailureException;, +import org.springframework.web.socket.sockjs.frame.SockJsFrame;, +, +/**, + * An XHR transport based on Undertow's {@link io.undertow.client.UndertowClient}., + *, + * <p>When used for testing purposes (e.g. load testing) or for specific use cases, + * (like HTTPS configuration), a custom OptionMap should be provided:, + *, + * <pre class="code">, + * OptionMap optionMap = OptionMap.builder(), + *   .set(Options.WORKER_IO_THREADS, 8), + *   .set(Options.TCP_NODELAY, true), + *   .set(Options.KEEP_ALIVE, true), + *   .set(Options.WORKER_NAME, "SockJSClient"), + *   .getMap();, + *, + * UndertowXhrTransport transport = new UndertowXhrTransport(optionMap);, + * </pre>, + *, + * @author Brian Clozel, + * @since 4.1.2, + * @see org.xnio.Options, + */, +public class UndertowXhrTransport extends AbstractXhrTransport implements XhrTransport {, +, +	private static final AttachmentKey<String> RESPONSE_BODY = AttachmentKey.create(String.class);, +, +	private final Pool<ByteBuffer> bufferPool;, +, +	private final OptionMap optionMap;, +, +	private final XnioWorker worker;, +, +	private final UndertowClient httpClient;, +]