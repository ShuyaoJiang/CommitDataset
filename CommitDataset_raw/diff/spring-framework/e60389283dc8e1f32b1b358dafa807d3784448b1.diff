[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	private TypeDescriptor elementType;, +	, +	private TypeDescriptor mapKeyType;, +	, +	private TypeDescriptor mapValueType;, +	, +		return getElementTypeDescriptor().getType();, +		if (elementType != null) { , +			return elementType;, +		} else {, +			elementType = forElementType(resolveElementType());, +			return elementType;, +		}, +		TypeDescriptor elementType = getElementTypeDescriptor();, +		return elementType != TypeDescriptor.NULL ? elementType : TypeDescriptor.forObject(element); , +		return getMapKeyTypeDescriptor().getType();, +		if (mapKeyType != null) {, +			return mapKeyType;, +		} else {, +			mapKeyType = isMap() ? forElementType(resolveMapKeyType()) : null;, +			return mapKeyType;, +		}, +		TypeDescriptor keyType = getMapKeyTypeDescriptor();, +		return keyType != TypeDescriptor.NULL ? keyType : TypeDescriptor.forObject(key);, +	}, +	, +	/**, +	 * Determine the generic value type of the wrapped Map parameter/field, if any., +	 * @return the generic type, or <code>null</code> if none, +	 */, +	public Class<?> getMapValueType() {, +		return getMapValueTypeDescriptor().getType();, +		if (mapValueType != null) {, +			return mapValueType;, +		} else {, +			mapValueType = isMap() ? forElementType(resolveMapValueType()) : null;, +			return mapValueType;, +		}, +		TypeDescriptor valueType = getMapValueTypeDescriptor();, +		return valueType != TypeDescriptor.NULL ? valueType : TypeDescriptor.forObject(value);, +			// not caching, +				// not caching, +	private Class<?> resolveElementType() {, +		if (isArray()) {, +		else if (isCollection()) {, +			return resolveCollectionElementType();, +		}, +		else {, +			return null;, +		}				, +	}, +	private Class<?> resolveCollectionElementType() {, +		return type != null ? GenericCollectionTypeResolver.getCollectionType((Class<? extends Collection>) this.type) : null;, +	, +	@SuppressWarnings("unchecked"), +	private Class<?> resolveMapKeyType() {, +		if (this.field != null) {, +			return GenericCollectionTypeResolver.getMapKeyFieldType(this.field);, +		else if (this.methodParameter != null) {, +			return GenericCollectionTypeResolver.getMapKeyParameterType(this.methodParameter);, +		}, +		else if (this.value instanceof Map<?, ?>) {, +			Map<?, ?> map = (Map<?, ?>) this.value;, +			if (!map.isEmpty()) {, +				Object key = map.keySet().iterator().next();, +				if (key != null) {, +					return key.getClass();, +				}, +			}, +		}, +		return type != null ? GenericCollectionTypeResolver.getMapKeyType((Class<? extends Map>) this.type) : null;, +	}, +, +	@SuppressWarnings("unchecked"), +	private Class<?> resolveMapValueType() {, +		if (this.field != null) {, +			return GenericCollectionTypeResolver.getMapValueFieldType(this.field);, +		}, +		else if (this.methodParameter != null) {, +			return GenericCollectionTypeResolver.getMapValueParameterType(this.methodParameter);, +		}, +		else if (this.value instanceof Map<?, ?>) {, +			Map<?, ?> map = (Map<?, ?>) this.value;, +			if (!map.isEmpty()) {, +				Object val = map.values().iterator().next();, +				if (val != null) {, +					return val.getClass();, +				}, +			}, +		}, +		return type != null ? GenericCollectionTypeResolver.getMapValueType((Class<? extends Map>) this.type) : null;, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	private TypeDescriptor elementType;, +	, +	private TypeDescriptor mapKeyType;, +	, +	private TypeDescriptor mapValueType;, +	, +		return getElementTypeDescriptor().getType();]