[+++ b/spring-context/src/test/kotlin/org/springframework/context/support/BeanDefinitionDslTests.kt, +			bean { FooFoo(env["name"]!!) }, +			val n = env["number-of-beans"]!!.toInt(), +++ b/spring-context/src/test/kotlin/org/springframework/context/support/BeanDefinitionDslTests.kt, +			bean { FooFoo(env["name"]!!) }, +			val n = env["number-of-beans"]!!.toInt(), +++ b/spring-core/src/main/kotlin/org/springframework/core/env/PropertyResolverExtensions.kt, + * Copyright 2002-2018 the original author or authors., +@file:Suppress("EXTENSION_SHADOWED_BY_MEMBER"), +, + * Extension for [PropertyResolver.getProperty] providing Array like getter returning a, + * nullable [String]., + * val name = env["name"] ?: "Seb", +operator fun PropertyResolver.get(key: String) : String? = getProperty(key), +, +, +/**, + * Extension for [PropertyResolver.getProperty] providing a `getProperty<Foo>(...)`, + * variant returning a nullable [String]., + *, + * @author Sebastien Deleuze, + * @since 5.1, + */, +inline fun <reified T: Any?> PropertyResolver.getProperty(key: String) : T? =, +		getProperty(key, T::class.java), +, +/**, + * Extension for [PropertyResolver.getRequiredProperty] providing a, + * `getRequiredProperty<Foo>(...)` variant., + *, + * @author Sebastien Deleuze, + * @since 5.1, + */, +inline fun <reified T: Any> PropertyResolver.getRequiredProperty(key: String) : T =, +		getRequiredProperty(key, T::class.java), +++ b/spring-context/src/test/kotlin/org/springframework/context/support/BeanDefinitionDslTests.kt, +			bean { FooFoo(env["name"]!!) }, +			val n = env["number-of-beans"]!!.toInt(), +++ b/spring-core/src/main/kotlin/org/springframework/core/env/PropertyResolverExtensions.kt, + * Copyright 2002-2018 the original author or authors., +@file:Suppress("EXTENSION_SHADOWED_BY_MEMBER"), +, + * Extension for [PropertyResolver.getProperty] providing Array like getter returning a, + * nullable [String]., + * val name = env["name"] ?: "Seb", +operator fun PropertyResolver.get(key: String) : String? = getProperty(key), +, +, +/**, + * Extension for [PropertyResolver.getProperty] providing a `getProperty<Foo>(...)`, + * variant returning a nullable [String]., + *, + * @author Sebastien Deleuze, + * @since 5.1, + */, +inline fun <reified T: Any?> PropertyResolver.getProperty(key: String) : T? =, +		getProperty(key, T::class.java), +, +/**, + * Extension for [PropertyResolver.getRequiredProperty] providing a, + * `getRequiredProperty<Foo>(...)` variant., + *, + * @author Sebastien Deleuze, + * @since 5.1, + */, +inline fun <reified T: Any> PropertyResolver.getRequiredProperty(key: String) : T =, +		getRequiredProperty(key, T::class.java), +++ b/spring-core/src/test/kotlin/org/springframework/core/env/PropertyResolverExtensionsTests.kt, + * Copyright 2002-2018 the original author or authors., +import com.nhaarman.mockito_kotlin.any, +import com.nhaarman.mockito_kotlin.whenever, +import org.mockito.ArgumentMatchers.eq, +@Suppress("UNUSED_VARIABLE"), +		val name = propertyResolver["name"] ?: "foo", +		Mockito.verify(propertyResolver, Mockito.times(1)).getProperty("name"), +	}, +, +	@Test, +	fun `getProperty extension`() {, +		whenever(propertyResolver.getProperty(any(), eq(String::class.java))).thenReturn("foo"), +		val name = propertyResolver.getProperty<String>("name") ?: "foo", +		Mockito.verify(propertyResolver, Mockito.times(1)).getProperty("name", String::class.java), +	}, +, +	@Test, +	fun `getRequiredProperty extension`() {, +		whenever(propertyResolver.getRequiredProperty(any(), eq(String::class.java))).thenReturn("foo"), +		val name = propertyResolver.getRequiredProperty<String>("name"), +		Mockito.verify(propertyResolver, Mockito.times(1)).getRequiredProperty("name", String::class.java)]