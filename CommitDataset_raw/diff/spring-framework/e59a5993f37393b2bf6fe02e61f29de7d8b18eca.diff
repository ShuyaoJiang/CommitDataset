[+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +		return MediaType.parseMediaTypes(get(ACCEPT));, +	 * Return the value of the {@code Access-Control-Allow-Credentials} response header., +	 * Return the value of the {@code Access-Control-Allow-Headers} response header., +	 * Return the value of the {@code Access-Control-Expose-Headers} response header., +	 * Return the value of the {@code Access-Control-Max-Age} response header., +	 * Return the value of the {@code Access-Control-Request-Headers} request header., +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +		return MediaType.parseMediaTypes(get(ACCEPT));, +	 * Return the value of the {@code Access-Control-Allow-Credentials} response header., +	 * Return the value of the {@code Access-Control-Allow-Headers} response header., +	 * Return the value of the {@code Access-Control-Expose-Headers} response header., +	 * Return the value of the {@code Access-Control-Max-Age} response header., +	 * Return the value of the {@code Access-Control-Request-Headers} request header., +++ b/spring-web/src/main/java/org/springframework/http/MediaType.java, +import org.springframework.util.CollectionUtils;, +	 * @param value the string to parse, +	 * @throws InvalidMediaTypeException if the media type value cannot be parsed, +	 * @throws InvalidMediaTypeException if the media type value cannot be parsed, +	 * Parse the given comma-separated string into a list of {@code MediaType} objects., +	 * @throws InvalidMediaTypeException if the media type value cannot be parsed, +	 * Parse the given list of (potentially) comma-separated strings into a, +	 * list of {@code MediaType} objects., +	 * <p>This method can be used to parse an Accept or Content-Type header., +	 * @param mediaTypes the string to parse, +	 * @return the list of media types, +	 * @throws InvalidMediaTypeException if the media type value cannot be parsed, +	 * @since 4.3.2, +	 */, +	public static List<MediaType> parseMediaTypes(List<String> mediaTypes) {, +		if (CollectionUtils.isEmpty(mediaTypes)) {, +			return Collections.<MediaType>emptyList();, +		}, +		else if (mediaTypes.size() == 1) {, +			return parseMediaTypes(mediaTypes.get(0));, +		}, +		else {, +			List<MediaType> result = new ArrayList<>(8);, +			for (String mediaType : mediaTypes) {, +				result.addAll(parseMediaTypes(mediaType));, +			}, +			return result;, +		}, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +		return MediaType.parseMediaTypes(get(ACCEPT));, +	 * Return the value of the {@code Access-Control-Allow-Credentials} response header., +	 * Return the value of the {@code Access-Control-Allow-Headers} response header., +	 * Return the value of the {@code Access-Control-Expose-Headers} response header., +	 * Return the value of the {@code Access-Control-Max-Age} response header., +	 * Return the value of the {@code Access-Control-Request-Headers} request header., +++ b/spring-web/src/main/java/org/springframework/http/MediaType.java, +import org.springframework.util.CollectionUtils;, +	 * @param value the string to parse, +	 * @throws InvalidMediaTypeException if the media type value cannot be parsed, +	 * @throws InvalidMediaTypeException if the media type value cannot be parsed, +	 * Parse the given comma-separated string into a list of {@code MediaType} objects., +	 * @throws InvalidMediaTypeException if the media type value cannot be parsed, +	 * Parse the given list of (potentially) comma-separated strings into a, +	 * list of {@code MediaType} objects., +	 * <p>This method can be used to parse an Accept or Content-Type header., +	 * @param mediaTypes the string to parse, +	 * @return the list of media types, +	 * @throws InvalidMediaTypeException if the media type value cannot be parsed, +	 * @since 4.3.2, +	 */, +	public static List<MediaType> parseMediaTypes(List<String> mediaTypes) {, +		if (CollectionUtils.isEmpty(mediaTypes)) {, +			return Collections.<MediaType>emptyList();, +		}, +		else if (mediaTypes.size() == 1) {, +			return parseMediaTypes(mediaTypes.get(0));, +		}, +		else {, +			List<MediaType> result = new ArrayList<>(8);, +			for (String mediaType : mediaTypes) {, +				result.addAll(parseMediaTypes(mediaType));, +			}, +			return result;, +		}, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/web/accept/HeaderContentNegotiationStrategy.java, +import java.util.Arrays;, + * @author Juergen Hoeller, +		String[] headerValueArray = request.getHeaderValues(HttpHeaders.ACCEPT);, +		if (headerValueArray == null) {, +			return Collections.<MediaType>emptyList();, +, +		List<String> headerValues = Arrays.asList(headerValueArray);, +			List<MediaType> mediaTypes = MediaType.parseMediaTypes(headerValues);, +					"Could not parse 'Accept' header " + headerValues + ": " + ex.getMessage());, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +		return MediaType.parseMediaTypes(get(ACCEPT));, +	 * Return the value of the {@code Access-Control-Allow-Credentials} response header., +	 * Return the value of the {@code Access-Control-Allow-Headers} response header., +	 * Return the value of the {@code Access-Control-Expose-Headers} response header.]