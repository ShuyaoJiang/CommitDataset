[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.validation.BindException;, +import org.springframework.validation.BindingResult;, +import org.springframework.web.bind.annotation.ModelAttribute;, + * @see #handleMissingServletRequestParameter, + * @see #handleMissingServletRequestPart, + * @see #handleBindException, +			else if (ex instanceof BindException) {, +				return handleBindException((BindException) ex, request, response, handler);, +			}, +	 * Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},, +	 * or a {@code javax.servlet.http.Part} argument is required but is missing., +	/**, +	 * Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method, +	 * argument has binding or validation errors and is not followed by another, +	 * method argument of type {@link BindingResult}., +	 * By default an HTTP 400 error is sent back to the client., +	 * @param request current HTTP request, +	 * @param response current HTTP response, +	 * @param handler the executed handler, +	 * @return an empty ModelAndView indicating the exception was handled, +	 * @throws IOException potentially thrown from response.sendError(), +	 */, +	protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,, +			HttpServletResponse response, Object handler) throws IOException {, +		response.sendError(HttpServletResponse.SC_BAD_REQUEST);, +		return new ModelAndView();, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.validation.BindException;, +import org.springframework.validation.BindingResult;, +import org.springframework.web.bind.annotation.ModelAttribute;, + * @see #handleMissingServletRequestParameter, + * @see #handleMissingServletRequestPart, + * @see #handleBindException, +			else if (ex instanceof BindException) {, +				return handleBindException((BindException) ex, request, response, handler);, +			}, +	 * Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},, +	 * or a {@code javax.servlet.http.Part} argument is required but is missing., +	/**, +	 * Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method, +	 * argument has binding or validation errors and is not followed by another, +	 * method argument of type {@link BindingResult}., +	 * By default an HTTP 400 error is sent back to the client., +	 * @param request current HTTP request, +	 * @param response current HTTP response, +	 * @param handler the executed handler, +	 * @return an empty ModelAndView indicating the exception was handled, +	 * @throws IOException potentially thrown from response.sendError(), +	 */, +	protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,, +			HttpServletResponse response, Object handler) throws IOException {, +		response.sendError(HttpServletResponse.SC_BAD_REQUEST);, +		return new ModelAndView();, +	}, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolverTests.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.validation.BindException;, +	@Test, +	public void handleBindException() throws Exception {, +		BindException ex = new BindException(new Object(), "name");, +		ModelAndView mav = exceptionResolver.resolveException(request, response, null, ex);, +		assertNotNull("No ModelAndView returned", mav);, +		assertTrue("No Empty ModelAndView returned", mav.isEmpty());, +		assertEquals("Invalid status code", 400, response.getStatus());, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.validation.BindException;, +import org.springframework.validation.BindingResult;, +import org.springframework.web.bind.annotation.ModelAttribute;, + * @see #handleMissingServletRequestParameter, + * @see #handleMissingServletRequestPart, + * @see #handleBindException, +			else if (ex instanceof BindException) {, +				return handleBindException((BindException) ex, request, response, handler);, +			}, +	 * Handle the case where an {@linkplain RequestPart @RequestPart}, a {@link MultipartFile},, +	 * or a {@code javax.servlet.http.Part} argument is required but is missing., +	/**, +	 * Handle the case where an {@linkplain ModelAttribute @ModelAttribute} method, +	 * argument has binding or validation errors and is not followed by another, +	 * method argument of type {@link BindingResult}., +	 * By default an HTTP 400 error is sent back to the client., +	 * @param request current HTTP request, +	 * @param response current HTTP response, +	 * @param handler the executed handler, +	 * @return an empty ModelAndView indicating the exception was handled, +	 * @throws IOException potentially thrown from response.sendError(), +	 */, +	protected ModelAndView handleBindException(BindException ex, HttpServletRequest request,, +			HttpServletResponse response, Object handler) throws IOException {, +		response.sendError(HttpServletResponse.SC_BAD_REQUEST);, +		return new ModelAndView();]