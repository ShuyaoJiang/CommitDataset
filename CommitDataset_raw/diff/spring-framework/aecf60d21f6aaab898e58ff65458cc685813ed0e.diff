[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ProfileCondition.java, +import org.springframework.util.MultiValueMap;, + * @author Juergen Hoeller, +		if (context.getEnvironment() != null) {, +			MultiValueMap<String, Object> attrs = metadata.getAllAnnotationAttributes(Profile.class.getName());, +			if (attrs != null) {, +				for (Object value : attrs.get("value")) {, +					if (context.getEnvironment().acceptsProfiles(((String[]) value))) {, +						return true;, +					}, +				}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ProfileCondition.java, +import org.springframework.util.MultiValueMap;, + * @author Juergen Hoeller, +		if (context.getEnvironment() != null) {, +			MultiValueMap<String, Object> attrs = metadata.getAllAnnotationAttributes(Profile.class.getName());, +			if (attrs != null) {, +				for (Object value : attrs.get("value")) {, +					if (context.getEnvironment().acceptsProfiles(((String[]) value))) {, +						return true;, +					}, +				}, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ClassPathScanningCandidateComponentProviderTests.java, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import org.aspectj.lang.annotation.Aspect;, +import org.junit.Test;, +, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.core.env.ConfigurableEnvironment;, +import org.springframework.core.env.StandardEnvironment;, +import org.springframework.core.type.filter.AnnotationTypeFilter;, +import org.springframework.core.type.filter.AssignableTypeFilter;, +import org.springframework.core.type.filter.RegexPatternTypeFilter;, +import org.springframework.stereotype.Component;, +import org.springframework.stereotype.Controller;, +import org.springframework.stereotype.Repository;, +import org.springframework.stereotype.Service;, +, +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +	@Test, +	public void testIntegrationWithAnnotationConfigApplicationContext_metaProfile() {, +		Class<?> beanClass = MetaProfileAnnotatedComponent.class;, +		String beanName = MetaProfileAnnotatedComponent.BEAN_NAME;, +		{, +			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +			ctx.getEnvironment().setDefaultProfiles(TEST_DEFAULT_PROFILE_NAME);, +			// no active profiles are set, +			ctx.register(beanClass);, +			ctx.refresh();, +			assertThat(ctx.containsBean(beanName), is(true));, +		}, +		{, +			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +			ctx.getEnvironment().setDefaultProfiles(TEST_DEFAULT_PROFILE_NAME);, +			ctx.getEnvironment().setActiveProfiles("dev");, +			ctx.register(beanClass);, +			ctx.refresh();, +			assertThat(ctx.containsBean(beanName), is(true));, +		}, +		{, +			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +			ctx.getEnvironment().setDefaultProfiles(TEST_DEFAULT_PROFILE_NAME);, +			ctx.getEnvironment().setActiveProfiles("other");, +			ctx.register(beanClass);, +			ctx.refresh();, +			assertThat(ctx.containsBean(beanName), is(false));, +		}, +	}, +, +		for (BeanDefinition candidate : candidates) {, +			ScannedGenericBeanDefinition definition = (ScannedGenericBeanDefinition) candidate;, +, +	@DefaultProfile @DevProfile, +	@Component(MetaProfileAnnotatedComponent.BEAN_NAME), +	private static class MetaProfileAnnotatedComponent {, +		static final String BEAN_NAME = "metaProfileAnnotatedComponent";, +	}, +, +	@Profile(TEST_DEFAULT_PROFILE_NAME), +	@Retention(RetentionPolicy.RUNTIME), +	public @interface DefaultProfile {, +	}, +, +	@Profile("dev"), +	@Retention(RetentionPolicy.RUNTIME), +	public @interface DevProfile {, +	}, +]