[+++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextConfiguration.java, + * Copyright 2002-2011 the original author or authors., +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextConfiguration.java, + * Copyright 2002-2011 the original author or authors., +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java, +import org.springframework.test.context.ResourceTypeAwareContextLoader.ResourceType;, +		Assert.notNull(declaringClass, String.format(, +			"Could not find an 'annotation declaring class' for annotation type [%s] and class [%s]", annotationType,, +			clazz));, +				&& ResourceType.CLASSES == ((ResourceTypeAwareContextLoader) contextLoader).getResourceType();, +					"Test class [%s] has been configured with @ContextConfiguration's 'value' [%s] ", +							+ "and 'locations' [%s] attributes. Only one declaration of resource ", +							+ "locations is permitted per @ContextConfiguration annotation.", declaringClass,, +					ObjectUtils.nullSafeToString(valueLocations), ObjectUtils.nullSafeToString(locations));, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextConfiguration.java, + * Copyright 2002-2011 the original author or authors., +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java, +import org.springframework.test.context.ResourceTypeAwareContextLoader.ResourceType;, +		Assert.notNull(declaringClass, String.format(, +			"Could not find an 'annotation declaring class' for annotation type [%s] and class [%s]", annotationType,, +			clazz));, +				&& ResourceType.CLASSES == ((ResourceTypeAwareContextLoader) contextLoader).getResourceType();, +					"Test class [%s] has been configured with @ContextConfiguration's 'value' [%s] ", +							+ "and 'locations' [%s] attributes. Only one declaration of resource ", +							+ "locations is permitted per @ContextConfiguration annotation.", declaringClass,, +					ObjectUtils.nullSafeToString(valueLocations), ObjectUtils.nullSafeToString(locations));, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ResourceTypeAwareContextLoader.java, +	 * TODO Document ResourceType., +	 */, +	public static enum ResourceType {, +, +		/**, +		 * String-based resource locations., +		 * , +		LOCATIONS,, +		 * Configuration classes., +		 * , +		CLASSES;, +, +	};, +, +, +	/**, +	 * Get the application context {@link ResourceType} supported by this, +	 * <code>ContextLoader</code>., +	 *, +	 * @return the context resource type supported by this ContextLoader, +	 */, +	ResourceType getResourceType();, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextConfiguration.java, + * Copyright 2002-2011 the original author or authors., +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java, +import org.springframework.test.context.ResourceTypeAwareContextLoader.ResourceType;, +		Assert.notNull(declaringClass, String.format(, +			"Could not find an 'annotation declaring class' for annotation type [%s] and class [%s]", annotationType,, +			clazz));, +				&& ResourceType.CLASSES == ((ResourceTypeAwareContextLoader) contextLoader).getResourceType();, +					"Test class [%s] has been configured with @ContextConfiguration's 'value' [%s] ", +							+ "and 'locations' [%s] attributes. Only one declaration of resource ", +							+ "locations is permitted per @ContextConfiguration annotation.", declaringClass,, +					ObjectUtils.nullSafeToString(valueLocations), ObjectUtils.nullSafeToString(locations));, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ResourceTypeAwareContextLoader.java, +	 * TODO Document ResourceType., +	 */, +	public static enum ResourceType {, +, +		/**, +		 * String-based resource locations., +		 * , +		LOCATIONS,, +		 * Configuration classes., +		 * , +		CLASSES;, +, +	};, +, +, +	/**, +	 * Get the application context {@link ResourceType} supported by this, +	 * <code>ContextLoader</code>., +	 *, +	 * @return the context resource type supported by this ContextLoader, +	 */, +	ResourceType getResourceType();, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/AbstractContextLoader.java, +	 * Generate the default classpath resource locations array based on the, +	 * The default implementation returns {@link ResourceType#LOCATIONS}., +	 * <p>Can be overridden by subclasses., +	public ResourceType getResourceType() {, +		return ResourceType.LOCATIONS;, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextConfiguration.java, + * Copyright 2002-2011 the original author or authors., +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java, +import org.springframework.test.context.ResourceTypeAwareContextLoader.ResourceType;, +		Assert.notNull(declaringClass, String.format(, +			"Could not find an 'annotation declaring class' for annotation type [%s] and class [%s]", annotationType,, +			clazz));, +				&& ResourceType.CLASSES == ((ResourceTypeAwareContextLoader) contextLoader).getResourceType();, +					"Test class [%s] has been configured with @ContextConfiguration's 'value' [%s] ", +							+ "and 'locations' [%s] attributes. Only one declaration of resource "]