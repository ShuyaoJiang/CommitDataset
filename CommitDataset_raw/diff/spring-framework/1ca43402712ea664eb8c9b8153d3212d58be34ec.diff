[+++ b/spring-core/src/main/java/org/springframework/util/NumberUtils.java, + * Copyright 2002-2016 the original author or authors., +			long value = checkedLongValue(number, targetClass);, +			long value = checkedLongValue(number, targetClass);, +			long value = checkedLongValue(number, targetClass);, +			long value = checkedLongValue(number, targetClass);, +			return (T) Long.valueOf(value);, +	 * Check for a {@code BigInteger}/{@code BigDecimal} long overflow, +	 * before returning the given number as a long value., +	 * @param number the number to convert, +	 * @param targetClass the target class to convert to, +	 * @return the long value, if convertible without overflow, +	 * @throws IllegalArgumentException if there is an overflow, +	 * @see #raiseOverflowException, +	 */, +	private static long checkedLongValue(Number number, Class<? extends Number> targetClass) {, +		BigInteger bigInt = null;, +		if (number instanceof BigInteger) {, +			bigInt = (BigInteger) number;, +		}, +		else if (number instanceof BigDecimal) {, +			bigInt = ((BigDecimal) number).toBigInteger();, +		}, +		// Effectively analogous to JDK 8's BigInteger.longValueExact(), +		if (bigInt != null && (bigInt.compareTo(LONG_MIN) < 0 || bigInt.compareTo(LONG_MAX) > 0)) {, +			raiseOverflowException(number, targetClass);, +		}, +		return number.longValue();, +	}, +, +	/**, +	 * @throws IllegalArgumentException if there is an overflow, +++ b/spring-core/src/main/java/org/springframework/util/NumberUtils.java, + * Copyright 2002-2016 the original author or authors., +			long value = checkedLongValue(number, targetClass);, +			long value = checkedLongValue(number, targetClass);, +			long value = checkedLongValue(number, targetClass);, +			long value = checkedLongValue(number, targetClass);, +			return (T) Long.valueOf(value);, +	 * Check for a {@code BigInteger}/{@code BigDecimal} long overflow, +	 * before returning the given number as a long value., +	 * @param number the number to convert, +	 * @param targetClass the target class to convert to, +	 * @return the long value, if convertible without overflow, +	 * @throws IllegalArgumentException if there is an overflow, +	 * @see #raiseOverflowException, +	 */, +	private static long checkedLongValue(Number number, Class<? extends Number> targetClass) {, +		BigInteger bigInt = null;, +		if (number instanceof BigInteger) {, +			bigInt = (BigInteger) number;, +		}, +		else if (number instanceof BigDecimal) {, +			bigInt = ((BigDecimal) number).toBigInteger();, +		}, +		// Effectively analogous to JDK 8's BigInteger.longValueExact(), +		if (bigInt != null && (bigInt.compareTo(LONG_MIN) < 0 || bigInt.compareTo(LONG_MAX) > 0)) {, +			raiseOverflowException(number, targetClass);, +		}, +		return number.longValue();, +	}, +, +	/**, +	 * @throws IllegalArgumentException if there is an overflow, +++ b/spring-core/src/test/java/org/springframework/util/NumberUtilsTests.java, + * Copyright 2002-2016 the original author or authors., +, +		assertToNumberOverflow(Long.valueOf(Long.MAX_VALUE + 1), Integer.class);, +		assertToNumberOverflow(Long.valueOf(Long.MIN_VALUE - 1), Integer.class);, +		assertToNumberOverflow(BigInteger.valueOf(Integer.MAX_VALUE).add(BigInteger.ONE), Integer.class);, +		assertToNumberOverflow(BigInteger.valueOf(Integer.MIN_VALUE).subtract(BigInteger.ONE), Integer.class);, +		assertToNumberOverflow(new BigDecimal("18446744073709551611"), Integer.class);, +, +		assertToNumberOverflow(BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.ONE), Long.class);, +		assertToNumberOverflow(BigInteger.valueOf(Long.MIN_VALUE).subtract(BigInteger.ONE), Long.class);, +		assertToNumberOverflow(new BigDecimal("18446744073709551611"), Long.class);]