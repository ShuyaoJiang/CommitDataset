[+++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binding.java, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binding.java, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/AbstractBinding.java, +package org.springframework.ui.binding.support;, +, +import java.lang.reflect.Array;, +import java.lang.reflect.ParameterizedType;, +import java.lang.reflect.Type;, +import java.lang.reflect.TypeVariable;, +import java.text.ParseException;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +, +import org.springframework.context.i18n.LocaleContextHolder;, +import org.springframework.core.GenericTypeResolver;, +import org.springframework.core.convert.ConversionFailedException;, +import org.springframework.core.convert.TypeConverter;, +import org.springframework.core.convert.TypeDescriptor;, +import org.springframework.core.style.StylerUtils;, +import org.springframework.ui.alert.Alert;, +import org.springframework.ui.alert.Severity;, +import org.springframework.ui.binding.Binding;, +import org.springframework.ui.binding.support.GenericBinder.BindingContext;, +import org.springframework.ui.format.Formatter;, +import org.springframework.ui.message.MessageBuilder;, +import org.springframework.ui.message.ResolvableArgument;, +, +public abstract class AbstractBinding implements Binding {, +, +	private BindingContext bindingContext;, +, +	private ValueBuffer buffer;, +, +	private BindingStatus status;, +, +	private Object sourceValue;, +	, +	private Exception invalidSourceValueCause;, +	, +	public AbstractBinding(BindingContext bindingContext) {, +		this.bindingContext = bindingContext;, +		buffer = new ValueBuffer(getValueModel());, +		status = BindingStatus.CLEAN;		, +	}, +, +	// implementing Binding, +	, +	public String getRenderValue() {, +		return format(getValue(), bindingContext.getFormatter());, +	}, +, +	public Object getValue() {, +		if (status == BindingStatus.DIRTY || status == BindingStatus.COMMIT_FAILURE) {, +			return buffer.getValue();, +		} else {, +			return getValueModel().getValue();, +		}, +	}, +, +	public Class<?> getValueType() {, +		return getValueModel().getValueType();, +	}, +, +	public boolean isEditable() {, +		return bindingContext.getEditableCondition().isTrue();, +	}, +, +	public boolean isEnabled() {, +		return bindingContext.getEnabledCondition().isTrue();, +	}, +, +	public boolean isVisible() {, +		return bindingContext.getVisibleCondition().isTrue();, +	}, +, +	public void applySourceValue(Object sourceValue) {, +		assertEditable();, +		assertEnabled();, +		if (sourceValue instanceof String) {, +			try {, +				Object parsed = bindingContext.getFormatter().parse((String) sourceValue, getLocale());, +				buffer.setValue(coerseToValueType(parsed));, +				sourceValue = null;, +				status = BindingStatus.DIRTY;, +			} catch (ParseException e) {, +				this.sourceValue = sourceValue;, +				invalidSourceValueCause = e;, +				status = BindingStatus.INVALID_SOURCE_VALUE;, +			} catch (ConversionFailedException e) {, +				this.sourceValue = sourceValue;, +				invalidSourceValueCause = e;, +				status = BindingStatus.INVALID_SOURCE_VALUE;, +			}, +		} else if (sourceValue instanceof String[]) {, +			String[] sourceValues = (String[]) sourceValue;, +			Class<?> parsedType = getFormattedObjectType(bindingContext.getElementFormatter().getClass());, +			if (parsedType == null) {, +				parsedType = String.class;, +			}]