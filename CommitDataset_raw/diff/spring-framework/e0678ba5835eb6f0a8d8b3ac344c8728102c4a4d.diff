[+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/support/AsyncRequestInterceptor.java, + * Copyright 2002-2017 the original author or authors., + * 2) The session is closed if an async request times out or an error occurred, +	private volatile boolean errorInProgress;, +, +		this.errorInProgress = false;, +	public <T> Object handleError(NativeWebRequest request, Callable<T> task, Throwable t) {, +		this.errorInProgress = true;, +		return RESULT_NONE;  // give other interceptors a chance to handle the error, +	@Override, +	public <T> void afterCompletion(NativeWebRequest request, Callable<T> task) throws Exception {, +		closeSession();, +	}, +, +	private void closeSession() {, +		if (this.timeoutInProgress || this.errorInProgress) {, +			logger.debug("Closing Hibernate Session after async request timeout/error");, +	public <T> boolean handleError(NativeWebRequest request, DeferredResult<T> deferredResult, Throwable t) {, +		this.errorInProgress = true;, +		return true;  // give other interceptors a chance to handle the error, +	}, +, +	@Override, +		closeSession();, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/support/AsyncRequestInterceptor.java, + * Copyright 2002-2017 the original author or authors., + * 2) The session is closed if an async request times out or an error occurred, +	private volatile boolean errorInProgress;, +, +		this.errorInProgress = false;, +	public <T> Object handleError(NativeWebRequest request, Callable<T> task, Throwable t) {, +		this.errorInProgress = true;, +		return RESULT_NONE;  // give other interceptors a chance to handle the error, +	@Override, +	public <T> void afterCompletion(NativeWebRequest request, Callable<T> task) throws Exception {, +		closeSession();, +	}, +, +	private void closeSession() {, +		if (this.timeoutInProgress || this.errorInProgress) {, +			logger.debug("Closing Hibernate Session after async request timeout/error");, +	public <T> boolean handleError(NativeWebRequest request, DeferredResult<T> deferredResult, Throwable t) {, +		this.errorInProgress = true;, +		return true;  // give other interceptors a chance to handle the error, +	}, +, +	@Override, +		closeSession();, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/support/AsyncRequestInterceptor.java, + * 2) The session is closed if an async request times out or an error occurred, +	private volatile boolean errorInProgress;, +, +		this.errorInProgress = false;, +	public <T> Object handleError(NativeWebRequest request, Callable<T> task, Throwable t) {, +		this.errorInProgress = true;, +		return RESULT_NONE;  // give other interceptors a chance to handle the error, +	@Override, +	public <T> void afterCompletion(NativeWebRequest request, Callable<T> task) throws Exception {, +		closeEntityManager();, +	}, +, +	private void closeEntityManager() {, +		if (this.timeoutInProgress || this.errorInProgress) {, +			logger.debug("Closing JPA EntityManager after async request timeout/error");, +	public <T> boolean handleError(NativeWebRequest request, DeferredResult<T> deferredResult, Throwable t) {, +		this.errorInProgress = true;, +		return true;  // give other interceptors a chance to handle the error, +	}, +, +	@Override, +		closeEntityManager();, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/support/AsyncRequestInterceptor.java, + * Copyright 2002-2017 the original author or authors., + * 2) The session is closed if an async request times out or an error occurred, +	private volatile boolean errorInProgress;, +, +		this.errorInProgress = false;, +	public <T> Object handleError(NativeWebRequest request, Callable<T> task, Throwable t) {, +		this.errorInProgress = true;, +		return RESULT_NONE;  // give other interceptors a chance to handle the error, +	@Override, +	public <T> void afterCompletion(NativeWebRequest request, Callable<T> task) throws Exception {, +		closeSession();, +	}, +, +	private void closeSession() {, +		if (this.timeoutInProgress || this.errorInProgress) {, +			logger.debug("Closing Hibernate Session after async request timeout/error");, +	public <T> boolean handleError(NativeWebRequest request, DeferredResult<T> deferredResult, Throwable t) {, +		this.errorInProgress = true;, +		return true;  // give other interceptors a chance to handle the error, +	}, +, +	@Override, +		closeSession();, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/support/AsyncRequestInterceptor.java, + * 2) The session is closed if an async request times out or an error occurred, +	private volatile boolean errorInProgress;, +, +		this.errorInProgress = false;]