[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/MessageMethodArgumentResolver.java, + * @author Juergen Hoeller, +	 * Create a default resolver instance without message conversion., +	 */, +	public MessageMethodArgumentResolver() {, +		this(null);, +	}, +, +	/**, +	 * Create a resolver instance with the given {@link MessageConverter}., +	 * @param converter the MessageConverter to use (may be {@code null}), +	 * @since 4.3, +		Object result = null;, +		else if (this.converter != null) {, +			throw new MessageConversionException(message, "No converter found to convert payload type [" +, +					actual + "] to expected payload type [" + expected + "]");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/MessageMethodArgumentResolver.java, + * @author Juergen Hoeller, +	 * Create a default resolver instance without message conversion., +	 */, +	public MessageMethodArgumentResolver() {, +		this(null);, +	}, +, +	/**, +	 * Create a resolver instance with the given {@link MessageConverter}., +	 * @param converter the MessageConverter to use (may be {@code null}), +	 * @since 4.3, +		Object result = null;, +		else if (this.converter != null) {, +			throw new MessageConversionException(message, "No converter found to convert payload type [" +, +					actual + "] to expected payload type [" + expected + "]");, +++ b/spring-messaging/src/test/java/org/springframework/messaging/handler/annotation/support/MessageMethodArgumentResolverTests.java, +import static org.mockito.Mockito.*;, + * Unit tests for {@link MessageMethodArgumentResolver}., + * @author Juergen Hoeller, +				Message.class, Message.class, Message.class, Message.class, ErrorMessage.class);, +	public void resolveWithPayloadTypeSubclass() throws Exception {, +	public void resolveMessageSubclassMatch() throws Exception {, +	public void resolveWithMessageSubclassAndPayloadWildcard() throws Exception {, +	@Test, +	public void resolveWithPayloadTypeAsWildcardAndNoConverter() throws Exception {, +		this.resolver = new MessageMethodArgumentResolver();, +, +		Message<String> message = MessageBuilder.withPayload("test").build();, +		MethodParameter parameter = new MethodParameter(this.method, 0);, +, +		assertTrue(this.resolver.supportsParameter(parameter));, +		assertSame(message, this.resolver.resolveArgument(parameter, message));, +	}, +, +	@Test, +	public void resolveWithConversionNeededButNoConverter() throws Exception {, +		this.resolver = new MessageMethodArgumentResolver();, +, +		Message<String> message = MessageBuilder.withPayload("test").build();, +		MethodParameter parameter = new MethodParameter(this.method, 1);, +, +		assertTrue(this.resolver.supportsParameter(parameter));, +		thrown.expect(MessageConversionException.class);, +		thrown.expectMessage(Integer.class.getName());, +		thrown.expectMessage(String.class.getName());, +		this.resolver.resolveArgument(parameter, message);, +	}, +, +	@Test, +	public void resolveWithConversionEmptyPayloadButNoConverter() throws Exception {, +		this.resolver = new MessageMethodArgumentResolver();, +, +		Message<String> message = MessageBuilder.withPayload("").build();, +		MethodParameter parameter = new MethodParameter(this.method, 1);, +, +		assertTrue(this.resolver.supportsParameter(parameter));, +		thrown.expect(MessageConversionException.class);, +		thrown.expectMessage("the payload is empty");, +		thrown.expectMessage(Integer.class.getName());, +		thrown.expectMessage(String.class.getName());, +		this.resolver.resolveArgument(parameter, message);, +	}, +]