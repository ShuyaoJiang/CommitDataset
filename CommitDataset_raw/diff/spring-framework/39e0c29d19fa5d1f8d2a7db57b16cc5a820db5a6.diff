[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +					return new PropertyTypeDescriptor(type, new MethodParameter(pd.getReadMethod(), -1), pd);, +					return new PropertyTypeDescriptor(type, BeanUtils.getWriteMethodParameter(pd), pd);, +				new PropertyTypeDescriptor(BeanUtils.getWriteMethodParameter(pd), pd));, +								new PropertyTypeDescriptor(mapKeyType, new MethodParameter(pd.getReadMethod(), -1), pd));, +							new PropertyTypeDescriptor(requiredType, new MethodParameter(pd.getReadMethod(), -1), pd));, +						new PropertyTypeDescriptor(requiredType, new MethodParameter(pd.getReadMethod(), -1), pd));, +						new PropertyTypeDescriptor(mapKeyType, new MethodParameter(pd.getReadMethod(), -1), pd));, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +					return new PropertyTypeDescriptor(type, new MethodParameter(pd.getReadMethod(), -1), pd);, +					return new PropertyTypeDescriptor(type, BeanUtils.getWriteMethodParameter(pd), pd);, +				new PropertyTypeDescriptor(BeanUtils.getWriteMethodParameter(pd), pd));, +								new PropertyTypeDescriptor(mapKeyType, new MethodParameter(pd.getReadMethod(), -1), pd));, +							new PropertyTypeDescriptor(requiredType, new MethodParameter(pd.getReadMethod(), -1), pd));, +						new PropertyTypeDescriptor(requiredType, new MethodParameter(pd.getReadMethod(), -1), pd));, +						new PropertyTypeDescriptor(mapKeyType, new MethodParameter(pd.getReadMethod(), -1), pd));, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +			TypeDescriptor targetTypeDesc = typeDescriptor;, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +					return new PropertyTypeDescriptor(type, new MethodParameter(pd.getReadMethod(), -1), pd);, +					return new PropertyTypeDescriptor(type, BeanUtils.getWriteMethodParameter(pd), pd);, +				new PropertyTypeDescriptor(BeanUtils.getWriteMethodParameter(pd), pd));, +								new PropertyTypeDescriptor(mapKeyType, new MethodParameter(pd.getReadMethod(), -1), pd));, +							new PropertyTypeDescriptor(requiredType, new MethodParameter(pd.getReadMethod(), -1), pd));, +						new PropertyTypeDescriptor(requiredType, new MethodParameter(pd.getReadMethod(), -1), pd));, +						new PropertyTypeDescriptor(mapKeyType, new MethodParameter(pd.getReadMethod(), -1), pd));, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +			TypeDescriptor targetTypeDesc = typeDescriptor;, +++ b/org.springframework.context/.classpath, +	<classpathentry kind="var" path="IVY_CACHE/org.slf4j/com.springsource.slf4j.api/1.5.6/com.springsource.slf4j.api-1.5.6.jar"/>, +	<classpathentry kind="var" path="IVY_CACHE/org.slf4j/com.springsource.slf4j.jcl/1.5.6/com.springsource.slf4j.jcl-1.5.6.jar"/>, +	<classpathentry kind="var" path="IVY_CACHE/org.objectweb.asm/com.springsource.org.objectweb.asm/3.2.0/com.springsource.org.objectweb.asm-3.2.0.jar"/>, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +					return new PropertyTypeDescriptor(type, new MethodParameter(pd.getReadMethod(), -1), pd);, +					return new PropertyTypeDescriptor(type, BeanUtils.getWriteMethodParameter(pd), pd);, +				new PropertyTypeDescriptor(BeanUtils.getWriteMethodParameter(pd), pd));, +								new PropertyTypeDescriptor(mapKeyType, new MethodParameter(pd.getReadMethod(), -1), pd));, +							new PropertyTypeDescriptor(requiredType, new MethodParameter(pd.getReadMethod(), -1), pd));, +						new PropertyTypeDescriptor(requiredType, new MethodParameter(pd.getReadMethod(), -1), pd));, +						new PropertyTypeDescriptor(mapKeyType, new MethodParameter(pd.getReadMethod(), -1), pd));, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +			TypeDescriptor targetTypeDesc = typeDescriptor;, +++ b/org.springframework.context/.classpath, +	<classpathentry kind="var" path="IVY_CACHE/org.slf4j/com.springsource.slf4j.api/1.5.6/com.springsource.slf4j.api-1.5.6.jar"/>, +	<classpathentry kind="var" path="IVY_CACHE/org.slf4j/com.springsource.slf4j.jcl/1.5.6/com.springsource.slf4j.jcl-1.5.6.jar"/>, +	<classpathentry kind="var" path="IVY_CACHE/org.objectweb.asm/com.springsource.org.objectweb.asm/3.2.0/com.springsource.org.objectweb.asm-3.2.0.jar"/>, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +		this.type = methodParameter.getParameterType();, +		this.type = field.getType();, +	 * Create a new type descriptor for the given class., +	 * @param type the class, +	 * @return the type descriptor, +	public static TypeDescriptor valueOf(Class<?> type) {, +		if (type == null) {, +			return NULL;, +		}, +		TypeDescriptor desc = typeDescriptorCache.get(type);, +		return (desc != null ? desc : new TypeDescriptor(type));, +	 * Create a new type descriptor for the class of the given object., +	 * @param object the object, +	 * @return the type descriptor, +	public static TypeDescriptor forObject(Object object) {, +		if (object == null) {, +			return NULL;, +		if (object instanceof Collection<?>) {, +			return new TypeDescriptor(object.getClass(), CollectionUtils.findCommonElementType((Collection<?>) object));, +		else if (object instanceof Map<?, ?>) {, +			return new TypeDescriptor(object.getClass(), CollectionUtils.findCommonElementType(((Map<?, ?>) object).keySet()), CollectionUtils.findCommonElementType(((Map<?, ?>) object).values()));, +		else {, +			return valueOf(object.getClass());, +		return type;, +		return ClassUtils.resolvePrimitiveIfNecessary(getType());, +		return ClassUtils.getQualifiedName(getType());, +		return getType().isPrimitive();, +	 * A textual representation of the type descriptor (eg. Map<String,Foo>) for use in messages., +	public String asString() {, +		return toString();, +	, +	// indexable type descriptor operations, +	, +	/**, +	 * Is this type an array type?, +	 */, +	public boolean isArray() {, +		return getType().isArray();, +, +	/**, +	 * Is this type a {@link Collection} type?, +	 */, +	public boolean isCollection() {, +		return Collection.class.isAssignableFrom(getType());, +	}, +, +	/**, +	 * If this type is an array type or {@link Collection} type, returns the underlying element type., +	 * Returns <code>null</code> if the type is neither an array or collection., +	 */, +	public Class<?> getElementType() {, +		return getElementTypeDescriptor().getType();, +	}]