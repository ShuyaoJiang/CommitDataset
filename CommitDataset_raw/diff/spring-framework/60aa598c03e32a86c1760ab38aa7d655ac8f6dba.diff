[+++ b/org.springframework.oxm/src/main/java/org/springframework/oxm/castor/CastorMarshaller.java, +import org.springframework.beans.factory.BeanClassLoaderAware;, +public class CastorMarshaller extends AbstractMarshaller implements InitializingBean, BeanClassLoaderAware {, +	private Map<String, String> namespaceToPackageMapping;, +, +	private ClassLoader classLoader;, +, +	private Object root;, +, +	private boolean reuseObjects = false;, +, +	private boolean clearCollections = false;, +, +	 * Set whether the Castor {@link Unmarshaller} should ignore elements that do not match a specific field. <p>Default, +	 * is, +	 * Sets the processing instructions that will be used by during marshalling. Keys are the processing targets and, +	 * values, +	/**, +	 * Set the namespace to package mappings. Property names are represents the namespaces URI, values are packages., +	 *, +	 * @see org.exolab.castor.xml.Marshaller#setNamespaceMapping(String, String), +	 */, +	public void setNamespaceToPackageMapping(Map<String, String> namespaceToPackageMapping) {, +		this.namespaceToPackageMapping = namespaceToPackageMapping;, +	}, +, +	/**, +	 * Sets the expected object for the unmarshaller, into which the source will be unmarshalled., +	 *, +	 * @see org.exolab.castor.xml.Unmarshaller#setObject(Object), +	 */, +	public void setObject(Object root) {, +		this.root = root;, +	}, +, +	/**, +	 * Sets whether this unmarshaller should re-use objects. This will be only used when unmarshalling to existing, +	 * object. </p> The default is {@link false}, which means that the objects won't be re-used., +	 *, +	 * @see org.exolab.castor.xml.Unmarshaller#setReuseObjects(boolean), +	 */, +	public void setReuseObjects(boolean reuseObjects) {, +		this.reuseObjects = reuseObjects;, +	}, +, +	/**, +	 * Sets whether this unmarshaller should clear collections upon the first use. </p> The default is {@link false},, +	 * which means that marshaller won't clear collections., +	 *, +	 * @see org.exolab.castor.xml.Unmarshaller#setClearCollections(boolean), +	 */, +	public void setClearCollections(boolean clearCollections) {, +		this.clearCollections = clearCollections;, +	}, +, +	public void setBeanClassLoader(ClassLoader classLoader) {, +		this.classLoader = classLoader;, +	}, +, +	 * Template method that allows for customizing of the given Castor {@link Marshaller}., +	 *, +	 * </p>The default implementation invokes, +	 * <ol>, +	 * <li>{@link Marshaller#setValidation(boolean)},</li>, +	 * <li>{@link Marshaller#setSuppressNamespaces(boolean)},</li>, +	 * <li>{@link Marshaller#setSuppressXSIType(boolean)}, </li>, +	 * <li>{@link Marshaller#setMarshalAsDocument(boolean)}, </li>, +	 * <li>{@link Marshaller#setRootElement(String)},</li>, +	 * <li>{@link Marshaller#setMarshalExtendedType(boolean)},</li>, +	 * <li>{@link Marshaller#setNoNamespaceSchemaLocation(String)},</li>, +	 * <li>{@link Marshaller#setSchemaLocation(String)} and</li>, +	 * <li>{@link Marshaller#setUseXSITypeAtRoot(boolean)}.</li>, +	 * </ol>, +	 * with the property set on this marshaller., +	 * It also calls {@link Marshaller#setNamespaceMapping(String, String)}, +	 * with the {@linkplain #setNamespaceMappings(java.util.Map) namespace mappings} and, +	 * {@link Marshaller#addProcessingInstruction(String, String)} with the, +	 * {@linkplain #setProcessingInstructions(java.util.Map) processing instructions}., +	 * Template method that allows for customizing of the given Castor {@link Unmarshaller}., +	 *, +	 * </p> The default implementation invokes, +	 * <ol>, +	 * <li>{@link Unmarshaller#setValidation(boolean)},, +	 * <li>{@link Unmarshaller#setWhitespacePreserve(boolean)},, +	 * <li>{@link Unmarshaller#setIgnoreExtraAttributes(boolean)},, +	 * <li>{@link Unmarshaller#setIgnoreExtraElements(boolean)},, +	 * <li>{@link Unmarshaller#setClassLoader(ClassLoader)},, +	 * <li>{@link Unmarshaller#setObject(Object)},, +	 * <li>{@link Unmarshaller#setReuseObjects(boolean)} and, +	 * <li>{@link Unmarshaller#setClearCollections(boolean)}, +	 * </ol>, +	 * with the properties set on this marshaller., +	 * It also calls {@link Unmarshaller#addNamespaceToPackageMapping(String, String)} with the, +		unmarshaller.setClassLoader(classLoader);, +		unmarshaller.setObject(root);, +		unmarshaller.setReuseObjects(reuseObjects);, +		unmarshaller.setClearCollections(clearCollections);, +		if (namespaceToPackageMapping != null) {, +			for (Map.Entry<String, String> mapping : namespaceToPackageMapping.entrySet()) {, +				unmarshaller.addNamespaceToPackageMapping(mapping.getKey(), mapping.getValue());]