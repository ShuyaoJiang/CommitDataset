[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorNot.java, +import org.springframework.core.convert.TypeDescriptor;, +			boolean value = (Boolean) state.convertValue(children[0].getValueInternal(state), TypeDescriptor.valueOf(boolean.class));, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorNot.java, +import org.springframework.core.convert.TypeDescriptor;, +			boolean value = (Boolean) state.convertValue(children[0].getValueInternal(state), TypeDescriptor.valueOf(boolean.class));, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Ternary.java, +import org.springframework.expression.spel.SpelEvaluationException;, +import org.springframework.expression.spel.SpelMessage;, +		if (value == null) {, +			throw new SpelEvaluationException(getChild(0).getStartPosition(),, +					SpelMessage.TYPE_CONVERSION_ERROR, "null", "boolean");, +		}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorNot.java, +import org.springframework.core.convert.TypeDescriptor;, +			boolean value = (Boolean) state.convertValue(children[0].getValueInternal(state), TypeDescriptor.valueOf(boolean.class));, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Ternary.java, +import org.springframework.expression.spel.SpelEvaluationException;, +import org.springframework.expression.spel.SpelMessage;, +		if (value == null) {, +			throw new SpelEvaluationException(getChild(0).getStartPosition(),, +					SpelMessage.TYPE_CONVERSION_ERROR, "null", "boolean");, +		}, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java, + * @author Mark Fisher, + * @since 3.0, +	@Test, +	public void testUnaryNot02() {, +		evaluate("!false", "true", Boolean.class);, +	}, +, +	@Test(expected = EvaluationException.class), +	public void testUnaryNotWithNullValue() {, +		parser.parseExpression("!null").getValue();, +	}, +, +	@Test(expected = EvaluationException.class), +	public void testTernaryOperatorWithNullValue() {, +		parser.parseExpression("null ? 0 : 1").getValue();, +	}, +]