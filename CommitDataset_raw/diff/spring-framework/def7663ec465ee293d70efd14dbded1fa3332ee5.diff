[+++ b/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedAnnotationInvocationHandler.java, +import java.util.Arrays;, +		if (isHashCodeMethod(method)) {, +			return hashCode(proxy);, +		}, +	/**, +	 * See {@link Annotation#equals(Object)} for a definition of the required algorithm., +	 *, +	 * @param proxy the synthesized annotation, +	 * @param other the other object to compare against, +	 */, +	/**, +	 * See {@link Annotation#hashCode()} for a definition of the required algorithm., +	 *, +	 * @param proxy the synthesized annotation, +	 */, +	private int hashCode(Object proxy) {, +		int result = 0;, +, +		for (Method attributeMethod : getAttributeMethods(this.annotationType)) {, +			Object value = invokeMethod(attributeMethod, proxy);, +			int hashCode;, +			if (value.getClass().isArray()) {, +				hashCode = hashCodeForArray(value);, +			}, +			else {, +				hashCode = value.hashCode();, +			}, +			result += (127 * attributeMethod.getName().hashCode()) ^ hashCode;, +		}, +, +		return result;, +	}, +, +	/**, +	 * WARNING: we can NOT use any of the {@code nullSafeHashCode()} methods, +	 * in Spring's {@link ObjectUtils} because those hash code generation, +	 * algorithms do not comply with the requirements specified in, +	 * {@link Annotation#hashCode()}., +	 *, +	 * @param array the array to compute the hash code for, +	 */, +	private int hashCodeForArray(Object array) {, +		if (array instanceof boolean[]) {, +			return Arrays.hashCode((boolean[]) array);, +		}, +		if (array instanceof byte[]) {, +			return Arrays.hashCode((byte[]) array);, +		}, +		if (array instanceof char[]) {, +			return Arrays.hashCode((char[]) array);, +		}, +		if (array instanceof double[]) {, +			return Arrays.hashCode((double[]) array);, +		}, +		if (array instanceof float[]) {, +			return Arrays.hashCode((float[]) array);, +		}, +		if (array instanceof int[]) {, +			return Arrays.hashCode((int[]) array);, +		}, +		if (array instanceof long[]) {, +			return Arrays.hashCode((long[]) array);, +		}, +		if (array instanceof short[]) {, +			return Arrays.hashCode((short[]) array);, +		}, +, +		// else, +		return Arrays.hashCode((Object[]) array);, +	}, +, +	/**, +	 * See {@link Annotation#toString()} for guidelines on the recommended format., +	 *, +	 * @param proxy the synthesized annotation, +	 */, +++ b/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedAnnotationInvocationHandler.java, +import java.util.Arrays;, +		if (isHashCodeMethod(method)) {, +			return hashCode(proxy);, +		}, +	/**, +	 * See {@link Annotation#equals(Object)} for a definition of the required algorithm., +	 *, +	 * @param proxy the synthesized annotation, +	 * @param other the other object to compare against, +	 */, +	/**, +	 * See {@link Annotation#hashCode()} for a definition of the required algorithm., +	 *, +	 * @param proxy the synthesized annotation, +	 */, +	private int hashCode(Object proxy) {, +		int result = 0;, +, +		for (Method attributeMethod : getAttributeMethods(this.annotationType)) {, +			Object value = invokeMethod(attributeMethod, proxy);, +			int hashCode;, +			if (value.getClass().isArray()) {]