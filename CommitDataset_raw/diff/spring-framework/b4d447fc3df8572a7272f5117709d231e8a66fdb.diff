[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassUtils.java, + * Copyright 2002-2014 the original author or authors., +import java.util.HashSet;, +import java.util.Set;, +, +	private static final Set<String> candidateIndicators = new HashSet<String>(4);, +, +	static {, +		candidateIndicators.add(Component.class.getName());, +		candidateIndicators.add(ComponentScan.class.getName());, +		candidateIndicators.add(Import.class.getName());, +		candidateIndicators.add(ImportResource.class.getName());, +	}, +, +	 * (e.g. a class annotated with {@code @Component} or just having, +		if (metadata.isInterface()) {, +			return false;, +		}, +		for (String indicator : candidateIndicators) {, +			if (metadata.isAnnotated(indicator)) {, +				return true;, +			}, +		}, +		return metadata.hasAnnotatedMethods(Bean.class.getName());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassUtils.java, + * Copyright 2002-2014 the original author or authors., +import java.util.HashSet;, +import java.util.Set;, +, +	private static final Set<String> candidateIndicators = new HashSet<String>(4);, +, +	static {, +		candidateIndicators.add(Component.class.getName());, +		candidateIndicators.add(ComponentScan.class.getName());, +		candidateIndicators.add(Import.class.getName());, +		candidateIndicators.add(ImportResource.class.getName());, +	}, +, +	 * (e.g. a class annotated with {@code @Component} or just having, +		if (metadata.isInterface()) {, +			return false;, +		}, +		for (String indicator : candidateIndicators) {, +			if (metadata.isAnnotated(indicator)) {, +				return true;, +			}, +		}, +		return metadata.hasAnnotatedMethods(Bean.class.getName());, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanAndImportAnnotationInteractionTests.java, +	static final class Config1 {, +	static final class Config2 {, +	static final class Config3 {, +	public static final class ImportedConfig {]