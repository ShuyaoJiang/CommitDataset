[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutionException.java, +	private Class<?> sourceType;, +	public ConversionExecutionException(Object value, Class<?> sourceType, TypeDescriptor targetType, Throwable cause) {, +	public ConversionExecutionException(Object value, Class<?> sourceType, TypeDescriptor targetType, String message) {, +	public Class<?> getSourceType() {, +	private static String defaultMessage(Object value, Class<?> sourceType, TypeDescriptor targetType, Throwable cause) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutionException.java, +	private Class<?> sourceType;, +	public ConversionExecutionException(Object value, Class<?> sourceType, TypeDescriptor targetType, Throwable cause) {, +	public ConversionExecutionException(Object value, Class<?> sourceType, TypeDescriptor targetType, String message) {, +	public Class<?> getSourceType() {, +	private static String defaultMessage(Object value, Class<?> sourceType, TypeDescriptor targetType, Throwable cause) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, +	 * Returns true if objects of sourceType can be converted to targetType., +	 * @param source the source to convert from (may be null), +	 * @param targetType the target type to convert to, +	 * @return true if a conversion can be performed, false if not, +	 */, +	public boolean canConvert(Class<?> sourceType, TypeDescriptor targetType);, +, +	/**, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutionException.java, +	private Class<?> sourceType;, +	public ConversionExecutionException(Object value, Class<?> sourceType, TypeDescriptor targetType, Throwable cause) {, +	public ConversionExecutionException(Object value, Class<?> sourceType, TypeDescriptor targetType, String message) {, +	public Class<?> getSourceType() {, +	private static String defaultMessage(Object value, Class<?> sourceType, TypeDescriptor targetType, Throwable cause) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, +	 * Returns true if objects of sourceType can be converted to targetType., +	 * @param source the source to convert from (may be null), +	 * @param targetType the target type to convert to, +	 * @return true if a conversion can be performed, false if not, +	 */, +	public boolean canConvert(Class<?> sourceType, TypeDescriptor targetType);, +, +	/**, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/service/AbstractCollectionConverter.java, +import org.springframework.core.convert.ConversionService;, +	private ConversionService conversionService;, +, +	private ConversionExecutor elementConverter;, +	, +	public AbstractCollectionConverter(TypeDescriptor sourceCollectionType, TypeDescriptor targetCollectionType, ConversionService conversionService) {, +		this.conversionService = conversionService;, +		Class<?> sourceElementType = sourceCollectionType.getElementType();, +		Class<?> targetElementType = targetCollectionType.getElementType();, +		if (sourceElementType != null && targetElementType != null) {, +			elementConverter = conversionService.getConversionExecutor(sourceElementType, TypeDescriptor.valueOf(targetElementType));, +		} else {, +			elementConverter = NoOpConversionExecutor.INSTANCE;, +		}, +	protected Class<?> getTargetCollectionType() {, +		return targetCollectionType.getType();, +	protected Class<?> getTargetElementType() {, +		return targetCollectionType.getElementType();, +	protected ConversionService getConversionService() {, +			throw new ConversionExecutionException(source, sourceCollectionType.getType(), targetCollectionType, e);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutionException.java, +	private Class<?> sourceType;, +	public ConversionExecutionException(Object value, Class<?> sourceType, TypeDescriptor targetType, Throwable cause) {, +	public ConversionExecutionException(Object value, Class<?> sourceType, TypeDescriptor targetType, String message) {, +	public Class<?> getSourceType() {, +	private static String defaultMessage(Object value, Class<?> sourceType, TypeDescriptor targetType, Throwable cause) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, +	 * Returns true if objects of sourceType can be converted to targetType., +	 * @param source the source to convert from (may be null), +	 * @param targetType the target type to convert to, +	 * @return true if a conversion can be performed, false if not, +	 */, +	public boolean canConvert(Class<?> sourceType, TypeDescriptor targetType);, +, +	/**, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/service/AbstractCollectionConverter.java, +import org.springframework.core.convert.ConversionService;, +	private ConversionService conversionService;, +, +	private ConversionExecutor elementConverter;, +	, +	public AbstractCollectionConverter(TypeDescriptor sourceCollectionType, TypeDescriptor targetCollectionType, ConversionService conversionService) {, +		this.conversionService = conversionService;, +		Class<?> sourceElementType = sourceCollectionType.getElementType();, +		Class<?> targetElementType = targetCollectionType.getElementType();, +		if (sourceElementType != null && targetElementType != null) {, +			elementConverter = conversionService.getConversionExecutor(sourceElementType, TypeDescriptor.valueOf(targetElementType));, +		} else {, +			elementConverter = NoOpConversionExecutor.INSTANCE;, +		}, +	protected Class<?> getTargetCollectionType() {, +		return targetCollectionType.getType();, +	protected Class<?> getTargetElementType() {, +		return targetCollectionType.getElementType();, +	protected ConversionService getConversionService() {, +			throw new ConversionExecutionException(source, sourceCollectionType.getType(), targetCollectionType, e);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/service/ArrayToArray.java, +	@Override, +		Object targetArray = Array.newInstance(getTargetElementType(), length);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutionException.java, +	private Class<?> sourceType;, +	public ConversionExecutionException(Object value, Class<?> sourceType, TypeDescriptor targetType, Throwable cause) {, +	public ConversionExecutionException(Object value, Class<?> sourceType, TypeDescriptor targetType, String message) {]