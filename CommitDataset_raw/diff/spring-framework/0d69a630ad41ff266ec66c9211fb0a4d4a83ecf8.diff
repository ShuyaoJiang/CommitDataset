[+++ b/spring-orm/src/main/java/org/springframework/orm/jdo/DefaultJdoDialect.java, + * Copyright 2002-2013 the original author or authors., +import javax.jdo.Constants;, + * Requires JDO 2.0; explicitly supports JDO API features up until 3.0., + * Translates {@code applyQueryTimeout} to JDO 3.0's {@code setTimeoutMillis}., +	 * This implementation invokes the standard JDO {@link Transaction#begin()}, +	 * method and also {@link Transaction#setIsolationLevel(String)} if necessary., +		String jdoIsolationLevel = getJdoIsolationLevel(definition);, +		if (jdoIsolationLevel != null) {, +			transaction.setIsolationLevel(jdoIsolationLevel);, +	 * Determine the JDO isolation level String to use for the given, +	 * Spring transaction definition., +	 * @param definition the Spring transaction definition, +	 * @return the corresponding JDO isolation level String, or {@code null}, +	 * to indicate that no isolation level should be set explicitly, +	 * @see Transaction#setIsolationLevel(String), +	 * @see Constants#TX_SERIALIZABLE, +	 * @see Constants#TX_REPEATABLE_READ, +	 * @see Constants#TX_READ_COMMITTED, +	 * @see Constants#TX_READ_UNCOMMITTED, +	 */, +	protected String getJdoIsolationLevel(TransactionDefinition definition) {, +		switch (definition.getIsolationLevel()) {, +			case TransactionDefinition.ISOLATION_SERIALIZABLE:, +				return Constants.TX_SERIALIZABLE;, +			case TransactionDefinition.ISOLATION_REPEATABLE_READ:, +				return Constants.TX_REPEATABLE_READ;, +			case TransactionDefinition.ISOLATION_READ_COMMITTED:, +				return Constants.TX_READ_COMMITTED;, +			case TransactionDefinition.ISOLATION_READ_UNCOMMITTED:, +				return Constants.TX_READ_UNCOMMITTED;, +			default:, +				return null;, +		}, +	}, +, +	/**, +++ b/spring-orm/src/main/java/org/springframework/orm/jdo/DefaultJdoDialect.java, + * Copyright 2002-2013 the original author or authors., +import javax.jdo.Constants;, + * Requires JDO 2.0; explicitly supports JDO API features up until 3.0., + * Translates {@code applyQueryTimeout} to JDO 3.0's {@code setTimeoutMillis}., +	 * This implementation invokes the standard JDO {@link Transaction#begin()}, +	 * method and also {@link Transaction#setIsolationLevel(String)} if necessary., +		String jdoIsolationLevel = getJdoIsolationLevel(definition);, +		if (jdoIsolationLevel != null) {, +			transaction.setIsolationLevel(jdoIsolationLevel);, +	 * Determine the JDO isolation level String to use for the given, +	 * Spring transaction definition., +	 * @param definition the Spring transaction definition, +	 * @return the corresponding JDO isolation level String, or {@code null}, +	 * to indicate that no isolation level should be set explicitly, +	 * @see Transaction#setIsolationLevel(String), +	 * @see Constants#TX_SERIALIZABLE, +	 * @see Constants#TX_REPEATABLE_READ, +	 * @see Constants#TX_READ_COMMITTED, +	 * @see Constants#TX_READ_UNCOMMITTED, +	 */, +	protected String getJdoIsolationLevel(TransactionDefinition definition) {, +		switch (definition.getIsolationLevel()) {, +			case TransactionDefinition.ISOLATION_SERIALIZABLE:, +				return Constants.TX_SERIALIZABLE;, +			case TransactionDefinition.ISOLATION_REPEATABLE_READ:, +				return Constants.TX_REPEATABLE_READ;, +			case TransactionDefinition.ISOLATION_READ_COMMITTED:, +				return Constants.TX_READ_COMMITTED;, +			case TransactionDefinition.ISOLATION_READ_UNCOMMITTED:, +				return Constants.TX_READ_UNCOMMITTED;, +			default:, +				return null;, +		}, +	}, +, +	/**, +++ b/spring-orm/src/test/java/org/springframework/orm/jdo/JdoTransactionManagerTests.java, +import javax.jdo.Constants;, +, +import static org.junit.Assert.*;, +import static org.mockito.BDDMockito.*;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.times;, +import static org.mockito.Mockito.verify;, +, +	public void testIsolationLevel() {, +		verify(tx).setIsolationLevel(Constants.TX_SERIALIZABLE);]