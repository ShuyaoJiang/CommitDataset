[+++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsMessageOperations.java, +import org.springframework.messaging.core.MessageRequestReplyOperations;, +public interface JmsMessageOperations extends MessageSendingOperations<Destination>,, +		MessageReceivingOperations<Destination>, MessageRequestReplyOperations<Destination> {, +	/**, +	 * Send a request message and receive the reply from the given destination., +	 * @param destinationName the name of the target destination, +	 * @param requestMessage the message to send, +	 * @return the reply, possibly {@code null} if the message could not be received,, +	 * for example due to a timeout, +	 */, +	Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException;, +, +	/**, +	 * Convert the given request Object to serialized form, possibly using a, +	 * {@link org.springframework.messaging.converter.MessageConverter}, send, +	 * it as a {@link Message} to the given destination, receive the reply and convert, +	 * its body of the specified target class., +	 * @param destinationName the name of the target destination, +	 * @param request payload for the request message to send, +	 * @param targetClass the target type to convert the payload of the reply to, +	 * @return the payload of the reply message, possibly {@code null} if the message, +	 * could not be received, for example due to a timeout, +	 */, +	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass) throws MessagingException;, +, +	/**, +	 * Convert the given request Object to serialized form, possibly using a, +	 * {@link org.springframework.messaging.converter.MessageConverter}, send, +	 * it as a {@link Message} with the given headers, to the specified destination,, +	 * receive the reply and convert its body of the specified target class., +	 * @param destinationName the name of the target destination, +	 * @param request payload for the request message to send, +	 * @param headers headers for the request message to send, +	 * @param targetClass the target type to convert the payload of the reply to, +	 * @return the payload of the reply message, possibly {@code null} if the message, +	 * could not be received, for example due to a timeout, +	 */, +	<T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers, Class<T> targetClass), +			throws MessagingException;, +, +	/**, +	 * Convert the given request Object to serialized form, possibly using a, +	 * {@link org.springframework.messaging.converter.MessageConverter},, +	 * apply the given post processor and send the resulting {@link Message} to the, +	 * given destination, receive the reply and convert its body of the given, +	 * target class., +	 * @param destinationName the name of the target destination, +	 * @param request payload for the request message to send, +	 * @param targetClass the target type to convert the payload of the reply to, +	 * @param requestPostProcessor post process to apply to the request message, +	 * @return the payload of the reply message, possibly {@code null} if the message, +	 * could not be received, for example due to a timeout, +	 */, +	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass,, +			MessagePostProcessor requestPostProcessor) throws MessagingException;, +, +	/**, +	 * Convert the given request Object to serialized form, possibly using a, +	 * {@link org.springframework.messaging.converter.MessageConverter},, +	 * wrap it as a message with the given headers, apply the given post processor, +	 * and send the resulting {@link Message} to the specified destination, receive, +	 * the reply and convert its body of the given target class., +	 * @param destinationName the name of the target destination, +	 * @param request payload for the request message to send, +	 * @param targetClass the target type to convert the payload of the reply to, +	 * @param requestPostProcessor post process to apply to the request message, +	 * @return the payload of the reply message, possibly {@code null} if the message, +	 * could not be received, for example due to a timeout, +	 */, +	<T> T convertSendAndReceive(String destinationName, Object request, Map<String, Object> headers,, +			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException;, +, +++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsMessageOperations.java, +import org.springframework.messaging.core.MessageRequestReplyOperations;, +public interface JmsMessageOperations extends MessageSendingOperations<Destination>,, +		MessageReceivingOperations<Destination>, MessageRequestReplyOperations<Destination> {, +	/**, +	 * Send a request message and receive the reply from the given destination., +	 * @param destinationName the name of the target destination, +	 * @param requestMessage the message to send, +	 * @return the reply, possibly {@code null} if the message could not be received,, +	 * for example due to a timeout, +	 */, +	Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) throws MessagingException;, +, +	/**, +	 * Convert the given request Object to serialized form, possibly using a, +	 * {@link org.springframework.messaging.converter.MessageConverter}, send, +	 * it as a {@link Message} to the given destination, receive the reply and convert, +	 * its body of the specified target class., +	 * @param destinationName the name of the target destination, +	 * @param request payload for the request message to send, +	 * @param targetClass the target type to convert the payload of the reply to, +	 * @return the payload of the reply message, possibly {@code null} if the message, +	 * could not be received, for example due to a timeout, +	 */, +	<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass) throws MessagingException;, +, +	/**]