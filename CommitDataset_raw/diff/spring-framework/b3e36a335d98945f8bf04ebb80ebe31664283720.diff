[+++ b/org.springframework.beans/src/main/resources/org/springframework/beans/factory/xml/spring-beans-3.1.xsd, +	* ConfigurableEnvironment.setDefaultProfiles(String...) or 'spring.profile.default' property specifies one, +	  or more default profiles, e.g., 'default', +	* if 'default' is specified as a default profile, `profile="xyz,default"` means that beans will be, +	  registered if 'xyz' is active or if no profile is active, +++ b/org.springframework.beans/src/main/resources/org/springframework/beans/factory/xml/spring-beans-3.1.xsd, +	* ConfigurableEnvironment.setDefaultProfiles(String...) or 'spring.profile.default' property specifies one, +	  or more default profiles, e.g., 'default', +	* if 'default' is specified as a default profile, `profile="xyz,default"` means that beans will be, +	  registered if 'xyz' is active or if no profile is active, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/xml/ProfileXmlBeanDefinitionTests.java, +			env.setDefaultProfiles("custom-default");, +			env.setDefaultProfiles("custom-default");, +	@Test, +	public void testDefaultAndNonDefaultProfile() {, +		assertThat(beanFactoryFor(DEFAULT_ELIGIBLE_XML, NONE_ACTIVE), not(containsTargetBean()));, +		assertThat(beanFactoryFor(DEFAULT_ELIGIBLE_XML, "other"), not(containsTargetBean()));, +, +		{, +			DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();, +			XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory);, +			ConfigurableEnvironment env = new DefaultEnvironment();, +			env.setActiveProfiles(DEV_ACTIVE);, +			env.setDefaultProfiles("default");, +			reader.setEnvironment(env);, +			reader.loadBeanDefinitions(new ClassPathResource(DEFAULT_AND_DEV_ELIGIBLE_XML, getClass()));, +			assertThat(beanFactory, containsTargetBean());, +		}, +		{, +			DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();, +			XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory);, +			ConfigurableEnvironment env = new DefaultEnvironment();, +			// env.setActiveProfiles(DEV_ACTIVE);, +			env.setDefaultProfiles("default");, +			reader.setEnvironment(env);, +			reader.loadBeanDefinitions(new ClassPathResource(DEFAULT_AND_DEV_ELIGIBLE_XML, getClass()));, +			assertThat(beanFactory, containsTargetBean());, +		}, +		{, +			DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();, +			XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory);, +			ConfigurableEnvironment env = new DefaultEnvironment();, +			// env.setActiveProfiles(DEV_ACTIVE);, +			//env.setDefaultProfiles("default");, +			reader.setEnvironment(env);, +			reader.loadBeanDefinitions(new ClassPathResource(DEFAULT_AND_DEV_ELIGIBLE_XML, getClass()));, +			assertThat(beanFactory, not(containsTargetBean()));, +		}, +	}, +, +, +++ b/org.springframework.beans/src/main/resources/org/springframework/beans/factory/xml/spring-beans-3.1.xsd, +	* ConfigurableEnvironment.setDefaultProfiles(String...) or 'spring.profile.default' property specifies one, +	  or more default profiles, e.g., 'default', +	* if 'default' is specified as a default profile, `profile="xyz,default"` means that beans will be, +	  registered if 'xyz' is active or if no profile is active, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/xml/ProfileXmlBeanDefinitionTests.java, +			env.setDefaultProfiles("custom-default");, +			env.setDefaultProfiles("custom-default");, +	@Test, +	public void testDefaultAndNonDefaultProfile() {, +		assertThat(beanFactoryFor(DEFAULT_ELIGIBLE_XML, NONE_ACTIVE), not(containsTargetBean()));, +		assertThat(beanFactoryFor(DEFAULT_ELIGIBLE_XML, "other"), not(containsTargetBean()));, +, +		{, +			DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();, +			XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory);, +			ConfigurableEnvironment env = new DefaultEnvironment();, +			env.setActiveProfiles(DEV_ACTIVE);, +			env.setDefaultProfiles("default");, +			reader.setEnvironment(env);, +			reader.loadBeanDefinitions(new ClassPathResource(DEFAULT_AND_DEV_ELIGIBLE_XML, getClass()));, +			assertThat(beanFactory, containsTargetBean());, +		}, +		{, +			DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();, +			XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory);, +			ConfigurableEnvironment env = new DefaultEnvironment();, +			// env.setActiveProfiles(DEV_ACTIVE);, +			env.setDefaultProfiles("default");, +			reader.setEnvironment(env);, +			reader.loadBeanDefinitions(new ClassPathResource(DEFAULT_AND_DEV_ELIGIBLE_XML, getClass()));, +			assertThat(beanFactory, containsTargetBean());, +		}, +		{, +			DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();, +			XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory);, +			ConfigurableEnvironment env = new DefaultEnvironment();, +			// env.setActiveProfiles(DEV_ACTIVE);, +			//env.setDefaultProfiles("default");, +			reader.setEnvironment(env);, +			reader.loadBeanDefinitions(new ClassPathResource(DEFAULT_AND_DEV_ELIGIBLE_XML, getClass()));, +			assertThat(beanFactory, not(containsTargetBean()));, +		}, +	}, +, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Profile.java, +   servlet context/init param), + * ConfigurableEnvironment.setDefaultProfiles(String...) or 'spring.profile.default' property specifies one]