[+++ b/build.gradle, +	ext.jackson2Version      = "2.7.0", +++ b/build.gradle, +	ext.jackson2Version      = "2.7.0", +++ b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java, + * Copyright 2002-2016 the original author or authors., +import java.lang.reflect.TypeVariable;, +import com.fasterxml.jackson.databind.type.TypeFactory;, +import org.springframework.core.ResolvableType;, +		TypeFactory typeFactory = this.objectMapper.getTypeFactory();, +		if (type instanceof TypeVariable && contextClass != null) {, +			ResolvableType resolvedType = resolveVariable((TypeVariable<?>)type, ResolvableType.forClass(contextClass));, +			if (resolvedType != ResolvableType.NONE) {, +				return typeFactory.constructType(resolvedType.resolve());, +			}, +		}, +		return typeFactory.constructType(type);, +	}, +, +	private ResolvableType resolveVariable(TypeVariable<?> typeVariable, ResolvableType contextType) {, +		ResolvableType resolvedType;, +		if (contextType.hasGenerics()) {, +			resolvedType = ResolvableType.forType(typeVariable, contextType);, +			if (resolvedType.resolve() != null) {, +				return resolvedType;, +			}, +		}, +		resolvedType = resolveVariable(typeVariable, contextType.getSuperType());, +		if (resolvedType.resolve() != null) {, +			return resolvedType;, +		}, +		for (ResolvableType i : contextType.getInterfaces()) {, +			resolvedType = resolveVariable(typeVariable, i);, +			if (resolvedType.resolve() != null) {, +				return resolvedType;, +			}, +		}, +		return ResolvableType.NONE;, +++ b/build.gradle, +	ext.jackson2Version      = "2.7.0", +++ b/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java, + * Copyright 2002-2016 the original author or authors., +import java.lang.reflect.TypeVariable;, +import com.fasterxml.jackson.databind.type.TypeFactory;, +import org.springframework.core.ResolvableType;, +		TypeFactory typeFactory = this.objectMapper.getTypeFactory();, +		if (type instanceof TypeVariable && contextClass != null) {, +			ResolvableType resolvedType = resolveVariable((TypeVariable<?>)type, ResolvableType.forClass(contextClass));, +			if (resolvedType != ResolvableType.NONE) {, +				return typeFactory.constructType(resolvedType.resolve());, +			}, +		}, +		return typeFactory.constructType(type);, +	}, +, +	private ResolvableType resolveVariable(TypeVariable<?> typeVariable, ResolvableType contextType) {, +		ResolvableType resolvedType;, +		if (contextType.hasGenerics()) {, +			resolvedType = ResolvableType.forType(typeVariable, contextType);, +			if (resolvedType.resolve() != null) {, +				return resolvedType;, +			}, +		}, +		resolvedType = resolveVariable(typeVariable, contextType.getSuperType());, +		if (resolvedType.resolve() != null) {, +			return resolvedType;, +		}, +		for (ResolvableType i : contextType.getInterfaces()) {, +			resolvedType = resolveVariable(typeVariable, i);, +			if (resolvedType.resolve() != null) {, +				return resolvedType;, +			}, +		}, +		return ResolvableType.NONE;, +++ b/spring-web/src/test/java/org/springframework/http/converter/json/SpringHandlerInstantiatorTests.java, + * Copyright 2002-2016 the original author or authors., +		@Override, +, +		// New in Jackson 2.7, +		public String getDescForKnownTypeIds() {, +			return null;, +		}]