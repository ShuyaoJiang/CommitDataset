[+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, + * Copyright 2002-2018 the original author or authors., +	private Class<?> resolved;, +	private volatile ResolvableType superType;, +	private volatile ResolvableType[] interfaces;, +, +	@Nullable, +	private volatile ResolvableType[] generics;, +	private ResolvableType(, +			Type type, @Nullable TypeProvider typeProvider, @Nullable VariableResolver variableResolver) {, +, +		this.resolved = null;, +		this.resolved = resolveClass();, +		this.resolved = resolveClass();, +		ResolvableType superType = this.superType;, +		if (superType == null) {, +			superType = forType(SerializableTypeWrapper.forGenericSuperclass(resolved), asVariableResolver());, +			this.superType = superType;, +		return superType;, +		ResolvableType[] interfaces = this.interfaces;, +		if (interfaces == null) {, +			interfaces = forTypes(SerializableTypeWrapper.forGenericInterfaces(resolved), asVariableResolver());, +			this.interfaces = interfaces;, +		return interfaces;, +		ResolvableType[] generics = this.generics;, +		if (generics == null) {, +				generics = forTypes(SerializableTypeWrapper.forTypeParameters(typeClass), this.variableResolver);, +				generics = new ResolvableType[actualTypeArguments.length];, +				generics = resolveType().getGenerics();, +			this.generics = generics;, +		return generics;, +		return this.resolved;, +	static ResolvableType forType(, +			@Nullable Type type, @Nullable TypeProvider typeProvider, @Nullable VariableResolver variableResolver) {, +, +		ResolvableType resultType = new ResolvableType(type, typeProvider, variableResolver);, +		ResolvableType cachedType = cache.get(resultType);, +		if (cachedType == null) {, +			cachedType = new ResolvableType(type, typeProvider, variableResolver, resultType.hash);, +			cache.put(cachedType, cachedType);, +		resultType.resolved = cachedType.resolved;, +		return resultType;, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, + * Copyright 2002-2018 the original author or authors., +	private Class<?> resolved;, +	private volatile ResolvableType superType;, +	private volatile ResolvableType[] interfaces;, +, +	@Nullable, +	private volatile ResolvableType[] generics;, +	private ResolvableType(, +			Type type, @Nullable TypeProvider typeProvider, @Nullable VariableResolver variableResolver) {, +, +		this.resolved = null;, +		this.resolved = resolveClass();, +		this.resolved = resolveClass();, +		ResolvableType superType = this.superType;, +		if (superType == null) {, +			superType = forType(SerializableTypeWrapper.forGenericSuperclass(resolved), asVariableResolver());, +			this.superType = superType;, +		return superType;, +		ResolvableType[] interfaces = this.interfaces;, +		if (interfaces == null) {, +			interfaces = forTypes(SerializableTypeWrapper.forGenericInterfaces(resolved), asVariableResolver());, +			this.interfaces = interfaces;, +		return interfaces;, +		ResolvableType[] generics = this.generics;, +		if (generics == null) {, +				generics = forTypes(SerializableTypeWrapper.forTypeParameters(typeClass), this.variableResolver);, +				generics = new ResolvableType[actualTypeArguments.length];, +				generics = resolveType().getGenerics();, +			this.generics = generics;, +		return generics;, +		return this.resolved;, +	static ResolvableType forType(, +			@Nullable Type type, @Nullable TypeProvider typeProvider, @Nullable VariableResolver variableResolver) {, +, +		ResolvableType resultType = new ResolvableType(type, typeProvider, variableResolver);, +		ResolvableType cachedType = cache.get(resultType);, +		if (cachedType == null) {, +			cachedType = new ResolvableType(type, typeProvider, variableResolver, resultType.hash);, +			cache.put(cachedType, cachedType);, +		resultType.resolved = cachedType.resolved;, +		return resultType;, +++ b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java, + * Copyright 2002-2018 the original author or authors., +		assertThat(type.getSource(), sameInstance(field));, +		assertThat(type2.getSource(), sameInstance(field2));]