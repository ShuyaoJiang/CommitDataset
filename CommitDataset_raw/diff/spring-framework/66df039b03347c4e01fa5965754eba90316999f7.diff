[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ModelAndViewMethodReturnValueHandler.java, +import org.springframework.web.servlet.SmartView;, +import org.springframework.web.servlet.View;, +		if (returnValue == null) {, +			mavContainer.setRequestHandled(true);, +			return;, +		, +		ModelAndView mav = (ModelAndView) returnValue;, +		if (mav.isReference()) {, +			String viewName = mav.getViewName();, +			mavContainer.setViewName(viewName);, +			if (viewName != null && viewName.startsWith("redirect:")) {, +				mavContainer.setRedirectModelScenario(true);, +			}, +			View view = mav.getView();, +			mavContainer.setView(view);, +			if (view instanceof SmartView) {, +				if (((SmartView) view).isRedirectView()) {, +					mavContainer.setRedirectModelScenario(true);, +		}, +		mavContainer.addAllAttributes(mav.getModel());, +	}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ModelAndViewMethodReturnValueHandler.java, +import org.springframework.web.servlet.SmartView;, +import org.springframework.web.servlet.View;, +		if (returnValue == null) {, +			mavContainer.setRequestHandled(true);, +			return;, +		, +		ModelAndView mav = (ModelAndView) returnValue;, +		if (mav.isReference()) {, +			String viewName = mav.getViewName();, +			mavContainer.setViewName(viewName);, +			if (viewName != null && viewName.startsWith("redirect:")) {, +				mavContainer.setRedirectModelScenario(true);, +			}, +			View view = mav.getView();, +			mavContainer.setView(view);, +			if (view instanceof SmartView) {, +				if (((SmartView) view).isRedirectView()) {, +					mavContainer.setRedirectModelScenario(true);, +		}, +		mavContainer.addAllAttributes(mav.getModel());, +	}, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ModelAndViewMethodReturnValueHandlerTests.java, +import static org.junit.Assert.assertNotSame;, +import static org.junit.Assert.assertSame;, +import org.springframework.ui.ModelMap;, +import org.springframework.web.servlet.mvc.support.RedirectAttributesModelMap;, +	private MethodParameter returnParamModelAndView;, +, +	public void setUp() throws Exception {, +		this.returnParamModelAndView = getReturnValueParam("modelAndView");, +		assertTrue(handler.supportsReturnType(returnParamModelAndView));, +	public void handleViewReference() throws Exception {, +		handler.handleReturnValue(mav, returnParamModelAndView, mavContainer, webRequest);, +	public void handleViewInstance() throws Exception {, +		handler.handleReturnValue(mav, returnParamModelAndView, mavContainer, webRequest);, +	public void handleNull() throws Exception {, +		handler.handleReturnValue(null, returnParamModelAndView, mavContainer, webRequest);, +	@Test, +	public void handleRedirectAttributesWithViewReference() throws Exception {, +		RedirectAttributesModelMap redirectAttributes  = new RedirectAttributesModelMap();, +		mavContainer.setRedirectModel(redirectAttributes);, +		, +		ModelAndView mav = new ModelAndView(new RedirectView(), "attrName", "attrValue");, +		handler.handleReturnValue(mav, returnParamModelAndView, mavContainer, webRequest);, +		, +		assertEquals(RedirectView.class, mavContainer.getView().getClass());, +		assertEquals("attrValue", mavContainer.getModel().get("attrName"));, +		assertSame("RedirectAttributes should be used if controller redirects", redirectAttributes,, +				mavContainer.getModel());, +	}, +, +	@Test, +	public void handleRedirectAttributesWithViewInstance() throws Exception {, +		RedirectAttributesModelMap redirectAttributes  = new RedirectAttributesModelMap();, +		mavContainer.setRedirectModel(redirectAttributes);, +		, +		ModelAndView mav = new ModelAndView("redirect:viewName", "attrName", "attrValue");, +		handler.handleReturnValue(mav, returnParamModelAndView, mavContainer, webRequest);, +		, +		ModelMap model = mavContainer.getModel();, +		assertEquals("redirect:viewName", mavContainer.getViewName());, +		assertEquals("attrValue", model.get("attrName"));, +		assertSame("RedirectAttributes should be used if controller redirects", redirectAttributes, model);, +	}, +	, +	@Test, +	public void handleRedirectAttributesWithoutRedirect() throws Exception {, +		RedirectAttributesModelMap redirectAttributes  = new RedirectAttributesModelMap();, +		mavContainer.setRedirectModel(redirectAttributes);, +		, +		ModelAndView mav = new ModelAndView();, +		handler.handleReturnValue(mav, returnParamModelAndView, mavContainer, webRequest);, +		, +		ModelMap model = mavContainer.getModel();, +		assertEquals(null, mavContainer.getView());, +		assertTrue(mavContainer.getModel().isEmpty());, +		assertNotSame("RedirectAttributes should not be used if controller doesn't redirect", redirectAttributes, model);]