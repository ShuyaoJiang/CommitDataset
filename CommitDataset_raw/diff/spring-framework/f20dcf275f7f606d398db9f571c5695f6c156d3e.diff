[+++ b/spring-framework-reference/src/expressions.xml, +    chapter use SpEL as if it was an independent expression language. This, +    '<literal>exp.getValue</literal>' respectedly.</para>, +Expression exp = parser.parseExpression("<emphasis role="bold">'Hello World'.concat('!')</emphasis>");, +      used when evaluating an expression to resolve properties, methods, , +      fields, and to help perform type conversion. The out-of-the-box, +        <para><programlisting language="java">// evaluates to true, +boolean trueValue = parser.parseExpression("2 == 2").getValue(Boolean.class);, +boolean falseValue = parser.parseExpression("2 &lt; -5.0").getValue(Boolean.class);, +boolean trueValue = parser.parseExpression("'black' &lt; 'block'").getValue(Boolean.class);</programlisting>In, +// evaluates to true, +boolean trueValue = parser.parseExpression("true or false").getValue(Boolean.class);, +      <literal>setValue</literal> but can also be done inside a call to, +      <literal>getValue</literal> </para>, +boolean trueValue = parser.parseExpression("T(java.math.RoundingMode).CEILING &lt; T(java.math.RoundingMode).FLOOR").getValue(Boolean.class);, +        <title>The #this variable</title>, +        <para>The variable #this is always defined and refers to the, +        current evaluation object (the object against which unqualified references will be resolved). </para>, +++ b/spring-framework-reference/src/expressions.xml, +    chapter use SpEL as if it was an independent expression language. This, +    '<literal>exp.getValue</literal>' respectedly.</para>, +Expression exp = parser.parseExpression("<emphasis role="bold">'Hello World'.concat('!')</emphasis>");, +      used when evaluating an expression to resolve properties, methods, , +      fields, and to help perform type conversion. The out-of-the-box, +        <para><programlisting language="java">// evaluates to true, +boolean trueValue = parser.parseExpression("2 == 2").getValue(Boolean.class);, +boolean falseValue = parser.parseExpression("2 &lt; -5.0").getValue(Boolean.class);, +boolean trueValue = parser.parseExpression("'black' &lt; 'block'").getValue(Boolean.class);</programlisting>In, +// evaluates to true, +boolean trueValue = parser.parseExpression("true or false").getValue(Boolean.class);, +      <literal>setValue</literal> but can also be done inside a call to, +      <literal>getValue</literal> </para>, +boolean trueValue = parser.parseExpression("T(java.math.RoundingMode).CEILING &lt; T(java.math.RoundingMode).FLOOR").getValue(Boolean.class);, +        <title>The #this variable</title>, +        <para>The variable #this is always defined and refers to the, +        current evaluation object (the object against which unqualified references will be resolved). </para>, +++ b/spring-framework-reference/src/new-in-3.xml, +    EL in its syntax but offers significantly more features. The expression]