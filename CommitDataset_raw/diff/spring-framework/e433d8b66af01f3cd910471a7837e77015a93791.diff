[+++ b/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Decoder.java, +		JavaType javaType = getObjectMapper().getTypeFactory().constructType(elementType.getType());, +				getObjectMapper().canDeserialize(javaType) && supportsMimeType(mimeType));, +			JsonFactory factory = getObjectMapper().getFactory();, +				getObjectMapper().readerWithView(jsonView).forType(javaType) :, +				getObjectMapper().readerFor(javaType));, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Decoder.java, +		JavaType javaType = getObjectMapper().getTypeFactory().constructType(elementType.getType());, +				getObjectMapper().canDeserialize(javaType) && supportsMimeType(mimeType));, +			JsonFactory factory = getObjectMapper().getFactory();, +				getObjectMapper().readerWithView(jsonView).forType(javaType) :, +				getObjectMapper().readerFor(javaType));, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Encoder.java, +						getObjectMapper().canSerialize(clazz) && supportsMimeType(mimeType);, +				getObjectMapper().writerWithView(jsonView) : getObjectMapper().writer());, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Decoder.java, +		JavaType javaType = getObjectMapper().getTypeFactory().constructType(elementType.getType());, +				getObjectMapper().canDeserialize(javaType) && supportsMimeType(mimeType));, +			JsonFactory factory = getObjectMapper().getFactory();, +				getObjectMapper().readerWithView(jsonView).forType(javaType) :, +				getObjectMapper().readerFor(javaType));, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Encoder.java, +						getObjectMapper().canSerialize(clazz) && supportsMimeType(mimeType);, +				getObjectMapper().writerWithView(jsonView) : getObjectMapper().writer());, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2CodecSupport.java, +	private static final List<MimeType> DEFAULT_MIME_TYPES = Collections.unmodifiableList(, +			Arrays.asList(, +					new MimeType("application", "*+json", StandardCharsets.UTF_8)));, +		this.mimeTypes = !ObjectUtils.isEmpty(mimeTypes) ?, +				Collections.unmodifiableList(Arrays.asList(mimeTypes)) : DEFAULT_MIME_TYPES;, +	public ObjectMapper getObjectMapper() {, +	/**, +	 * Sub-classes should expose this as "decodable" or "encodable" mime types., +	 */, +	protected List<MimeType> getMimeTypes() {, +		return this.mimeTypes;, +	}, +, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Decoder.java, +		JavaType javaType = getObjectMapper().getTypeFactory().constructType(elementType.getType());, +				getObjectMapper().canDeserialize(javaType) && supportsMimeType(mimeType));, +			JsonFactory factory = getObjectMapper().getFactory();, +				getObjectMapper().readerWithView(jsonView).forType(javaType) :, +				getObjectMapper().readerFor(javaType));, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Encoder.java, +						getObjectMapper().canSerialize(clazz) && supportsMimeType(mimeType);, +				getObjectMapper().writerWithView(jsonView) : getObjectMapper().writer());, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2CodecSupport.java, +	private static final List<MimeType> DEFAULT_MIME_TYPES = Collections.unmodifiableList(, +			Arrays.asList(, +					new MimeType("application", "*+json", StandardCharsets.UTF_8)));, +		this.mimeTypes = !ObjectUtils.isEmpty(mimeTypes) ?, +				Collections.unmodifiableList(Arrays.asList(mimeTypes)) : DEFAULT_MIME_TYPES;, +	public ObjectMapper getObjectMapper() {, +	/**, +	 * Sub-classes should expose this as "decodable" or "encodable" mime types., +	 */, +	protected List<MimeType> getMimeTypes() {, +		return this.mimeTypes;, +	}, +, +, +++ b/spring-web/src/test/java/org/springframework/http/codec/json/Jackson2JsonDecoderTests.java, +import java.util.Collections;, +import org.springframework.util.MimeType;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +	@Test // SPR-15866, +		assertEquals(Collections.singletonList(textJavascript), decoder.getDecodableMimeTypes());, +	}, +	@Test(expected = UnsupportedOperationException.class), +	public void decodableMimeTypesIsImmutable() {, +		MimeType textJavascript = new MimeType("text", "javascript", StandardCharsets.UTF_8);, +		Jackson2JsonDecoder decoder = new Jackson2JsonDecoder(new ObjectMapper(), textJavascript);, +, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Decoder.java, +		JavaType javaType = getObjectMapper().getTypeFactory().constructType(elementType.getType());, +				getObjectMapper().canDeserialize(javaType) && supportsMimeType(mimeType));, +			JsonFactory factory = getObjectMapper().getFactory();, +				getObjectMapper().readerWithView(jsonView).forType(javaType) :, +				getObjectMapper().readerFor(javaType));, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Encoder.java, +						getObjectMapper().canSerialize(clazz) && supportsMimeType(mimeType);, +				getObjectMapper().writerWithView(jsonView) : getObjectMapper().writer());, +++ b/spring-web/src/main/java/org/springframework/http/codec/json/Jackson2CodecSupport.java, +	private static final List<MimeType> DEFAULT_MIME_TYPES = Collections.unmodifiableList(, +			Arrays.asList(, +					new MimeType("application", "*+json", StandardCharsets.UTF_8)));, +		this.mimeTypes = !ObjectUtils.isEmpty(mimeTypes) ?, +				Collections.unmodifiableList(Arrays.asList(mimeTypes)) : DEFAULT_MIME_TYPES;, +	public ObjectMapper getObjectMapper() {, +	/**, +	 * Sub-classes should expose this as "decodable" or "encodable" mime types., +	 */, +	protected List<MimeType> getMimeTypes() {, +		return this.mimeTypes;, +	}]