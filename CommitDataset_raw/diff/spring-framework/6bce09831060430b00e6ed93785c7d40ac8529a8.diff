[+++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +				editor = findDefaultEditor(requiredType);, +		boolean standardConversion = false;, +, +					standardConversion = true;, +					standardConversion = true;, +					standardConversion = true;, +					standardConversion = true;, +			if (editor == null && !standardConversion && requiredType != null && !Object.class.equals(requiredType)) {, +	private PropertyEditor findDefaultEditor(Class requiredType) {, +		if (requiredType != null) {, +	private Object doConvertValue(Object oldValue, Object newValue, Class<?> requiredType, PropertyEditor editor) {, +	private Object doConvertTextValue(Object oldValue, String newTextValue, PropertyEditor editor) {, +	private Object convertToTypedArray(Object input, String propertyName, Class<?> componentType) {, +	private Collection convertToTypedCollection(, +	private Map convertToTypedMap(, +++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +				editor = findDefaultEditor(requiredType);, +		boolean standardConversion = false;, +, +					standardConversion = true;, +					standardConversion = true;, +					standardConversion = true;, +					standardConversion = true;, +			if (editor == null && !standardConversion && requiredType != null && !Object.class.equals(requiredType)) {, +	private PropertyEditor findDefaultEditor(Class requiredType) {, +		if (requiredType != null) {, +	private Object doConvertValue(Object oldValue, Object newValue, Class<?> requiredType, PropertyEditor editor) {, +	private Object doConvertTextValue(Object oldValue, String newTextValue, PropertyEditor editor) {, +	private Object convertToTypedArray(Object input, String propertyName, Class<?> componentType) {, +	private Collection convertToTypedCollection(, +	private Map convertToTypedMap(, +++ b/spring-beans/src/test/java/org/springframework/beans/BeanWrapperTests.java, +	@Test, +	public void testNullNestedTypeDescriptorWithNoConversionService() {, +		Foo foo = new Foo();, +		BeanWrapperImpl wrapper = new BeanWrapperImpl(foo);, +		wrapper.setAutoGrowNestedPaths(true);, +		wrapper.setPropertyValue("listOfMaps[0]['luckyNumber']", "9");, +		assertEquals("9", foo.listOfMaps.get(0).get("luckyNumber"));, +	@Test, +	public void testNullNestedTypeDescriptorWithBadConversionService() {, +		Foo foo = new Foo();, +		BeanWrapperImpl wrapper = new BeanWrapperImpl(foo);, +		wrapper.setConversionService(new GenericConversionService() {, +			@Override, +			public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {, +				throw new ConversionFailedException(sourceType, targetType, source, null);, +		});, +		wrapper.setAutoGrowNestedPaths(true);, +		wrapper.setPropertyValue("listOfMaps[0]['luckyNumber']", "9");, +		assertEquals("9", foo.listOfMaps.get(0).get("luckyNumber"));, +, +	private static class Foo {, +, +		private List list;, +, +		private List<Map> listOfMaps;, +, +		public List getList() {, +			return list;, +		}, +, +		public void setList(List list) {, +			this.list = list;, +		}, +, +		public List<Map> getListOfMaps() {, +			return listOfMaps;, +		}, +, +		public void setListOfMaps(List<Map> listOfMaps) {, +			this.listOfMaps = listOfMaps;, +		}, +	}, +, +]