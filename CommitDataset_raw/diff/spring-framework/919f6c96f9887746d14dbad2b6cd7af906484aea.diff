[+++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, +import java.util.Locale;, +import org.springframework.util.LinkedCaseInsensitiveMap;, +	private static final Set<String> FORWARDED_HEADER_NAMES =, +			Collections.newSetFromMap(new LinkedCaseInsensitiveMap<Boolean>(5, Locale.ENGLISH));, +		Enumeration<String> names = request.getHeaderNames();, +		while (names.hasMoreElements()) {, +			String name = names.nextElement();, +			String prefix = null;, +			Enumeration<String> names = request.getHeaderNames();, +			while (names.hasMoreElements()) {, +				String name = names.nextElement();, +				if ("X-Forwarded-Prefix".equalsIgnoreCase(name)) {, +					prefix = request.getHeader(name);, +			if (prefix != null) {, +				while (prefix.endsWith("/")) {, +					prefix = prefix.substring(0, prefix.length() - 1);, +				}, +			}, +			return prefix;, +			Map<String, List<String>> headers = new LinkedCaseInsensitiveMap<List<String>>(Locale.ENGLISH);, +			Enumeration<String> names = request.getHeaderNames();, +			while (names.hasMoreElements()) {, +				String name = names.nextElement();, +				if (!FORWARDED_HEADER_NAMES.contains(name)) {, +++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, +import java.util.Locale;, +import org.springframework.util.LinkedCaseInsensitiveMap;, +	private static final Set<String> FORWARDED_HEADER_NAMES =, +			Collections.newSetFromMap(new LinkedCaseInsensitiveMap<Boolean>(5, Locale.ENGLISH));, +		Enumeration<String> names = request.getHeaderNames();, +		while (names.hasMoreElements()) {, +			String name = names.nextElement();, +			String prefix = null;, +			Enumeration<String> names = request.getHeaderNames();, +			while (names.hasMoreElements()) {, +				String name = names.nextElement();, +				if ("X-Forwarded-Prefix".equalsIgnoreCase(name)) {, +					prefix = request.getHeader(name);, +			if (prefix != null) {, +				while (prefix.endsWith("/")) {, +					prefix = prefix.substring(0, prefix.length() - 1);, +				}, +			}, +			return prefix;, +			Map<String, List<String>> headers = new LinkedCaseInsensitiveMap<List<String>>(Locale.ENGLISH);, +			Enumeration<String> names = request.getHeaderNames();, +			while (names.hasMoreElements()) {, +				String name = names.nextElement();, +				if (!FORWARDED_HEADER_NAMES.contains(name)) {, +++ b/spring-web/src/test/java/org/springframework/web/filter/ForwardedHeaderFilterTests.java, +import java.util.Enumeration;, +	private static final String X_FORWARDED_PROTO = "x-forwarded-proto"; // SPR-14372 (case insensitive), +	private static final String X_FORWARDED_HOST = "x-forwarded-host";, +	private static final String X_FORWARDED_PORT = "x-forwarded-port";, +	private static final String X_FORWARDED_PREFIX = "x-forwarded-prefix";, +, +, +		this.request.addHeader(X_FORWARDED_PREFIX, "");, +		this.request.addHeader(X_FORWARDED_PREFIX, "/foo/bar/");, +		this.request.addHeader(X_FORWARDED_PREFIX, "/foo/bar/baz///");, +		this.request.addHeader(X_FORWARDED_PREFIX, "/");, +		this.request.addHeader(X_FORWARDED_PREFIX, "/");, +		this.request.addHeader(X_FORWARDED_PREFIX, "/");, +		this.request.addHeader(X_FORWARDED_PREFIX, "/");, +	public void caseInsensitiveForwardedPrefix() throws Exception {, +		this.request = new MockHttpServletRequest() {, +, +			// Make it case-sensitive (SPR-14372), +, +			@Override, +			public String getHeader(String header) {, +				Enumeration<String> names = getHeaderNames();, +				while (names.hasMoreElements()) {, +					String name = names.nextElement();, +					if (name.equals(header)) {, +						return super.getHeader(header);, +					}, +				}, +				return null;, +			}, +		};, +		this.request.addHeader(X_FORWARDED_PREFIX, "/prefix");, +		this.request.setRequestURI("/path");, +		HttpServletRequest actual = filterAndGetWrappedRequest();, +, +		assertEquals("/prefix/path", actual.getRequestURI());, +	}, +, +	@Test, +		testShouldFilter(X_FORWARDED_HOST);, +		testShouldFilter(X_FORWARDED_PORT);, +		testShouldFilter(X_FORWARDED_PROTO);, +		this.request.addHeader(X_FORWARDED_PROTO, "https");, +		this.request.addHeader(X_FORWARDED_HOST, "84.198.58.199");, +		this.request.addHeader(X_FORWARDED_PORT, "443");, +		assertNull(actual.getHeader(X_FORWARDED_PROTO));, +		assertNull(actual.getHeader(X_FORWARDED_HOST));, +		assertNull(actual.getHeader(X_FORWARDED_PORT));, +		this.request.addHeader(X_FORWARDED_PREFIX, "/prefix");]