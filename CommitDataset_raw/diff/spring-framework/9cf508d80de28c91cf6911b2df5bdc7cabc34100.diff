[+++ b/org.springframework.context/src/main/java/org/springframework/mapping/support/SpelMapper.java, +import org.springframework.core.convert.converter.Converter;, + * A general-purpose object mapper implementation based on the Spring Expression Language (SpEL)., + * @see #getConverterRegistry(), +	/**, +	 * Sets whether "auto mapping" is enabled., +	 * When enabled, source and target fields with the same name will automatically be mapped unless an explicit mapping override has been registered., +	 * Set to false to require explicit registration of all source-to-target mapping rules., +	 * Default is enabled (true)., +	 * @param autoMappingEnabled auto mapping status, +	 */, +	/**, +	 * Register a field mapping., +	 * The source and target field expressions will be the same value., +	 * For example, calling <code>addMapping("order")</code> will register a mapping that maps between the <code>order</code> field on the source and the <code>order</code> field on the target., +	 * This is a convenience method for calling {@link #addMapping(String, String)} with the same source and target value.., +	 * @param fieldExpression the field mapping expression, +	 * @return this, for configuring additional field mapping options fluently, +	 */, +	/**, +	 * Register a mapping between a source and target field., +	 * For example, calling <code>addMapping("order", "primaryOrder")</code> will register a mapping that maps between the <code>order</code> field on the source and the <code>primaryOrder</code> field on the target., +	 * @param sourceFieldExpression the source field mapping expression, +	 * @param targetFieldExpression the target field mapping expression , +	 * @return this, for configuring additional field mapping options fluently, +	 */, +	/**, +	 * Return this mapper's converter registry., +	 * Allows for registration of simple type converters as well as converters that map nested objects using a Mapper., +	 * @see Converter, +	 * @see MapperConverter, +	 */, +	public ConverterRegistry getConverterRegistry() {, +		return conversionService;, +	}, +, +	// internal helpers, +]