[+++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/BeanMethodPolymorphismTests.java, +import java.lang.annotation.Inherited;, +, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +	/**, +	 * Tests that polymorphic Configuration classes need not explicitly redeclare the, +	 * {@link Configuration} annotation. This respects the {@link Inherited} nature, +	 * of the Configuration annotation, even though it's being detected via ASM., +	 */, +	@Test, +	public void beanMethodsDetectedOnSuperClass() {, +		DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();, +		beanFactory.registerBeanDefinition("config", new RootBeanDefinition(Config.class));, +		ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor();, +		pp.postProcessBeanFactory(beanFactory);, +		beanFactory.getBean("testBean", TestBean.class);, +	}, +, +, +	@Configuration, +	static class BaseConfig {, +, +		@Bean, +		public TestBean testBean() {, +			return new TestBean();, +		}, +	}, +, +, +	@Configuration, +	static class Config extends BaseConfig {, +	}, +, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/BeanMethodPolymorphismTests.java, +import java.lang.annotation.Inherited;, +, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +	/**, +	 * Tests that polymorphic Configuration classes need not explicitly redeclare the, +	 * {@link Configuration} annotation. This respects the {@link Inherited} nature, +	 * of the Configuration annotation, even though it's being detected via ASM., +	 */, +	@Test, +	public void beanMethodsDetectedOnSuperClass() {, +		DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();, +		beanFactory.registerBeanDefinition("config", new RootBeanDefinition(Config.class));, +		ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor();, +		pp.postProcessBeanFactory(beanFactory);, +		beanFactory.getBean("testBean", TestBean.class);, +	}, +, +, +	@Configuration, +	static class BaseConfig {, +, +		@Bean, +		public TestBean testBean() {, +			return new TestBean();, +		}, +	}, +, +, +	@Configuration, +	static class Config extends BaseConfig {, +	}, +, +++ /dev/null]