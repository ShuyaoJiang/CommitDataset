[+++ b/spring-test/src/main/java/org/springframework/test/context/junit4/AbstractTransactionalJUnit4SpringContextTests.java, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.test.jdbc.JdbcTestUtils;, + * <p>This class exposes a {@link JdbcTemplate} and provides an easy way, + * @see org.springframework.test.jdbc.JdbcTestUtils, +	 * The {@code SimpleJdbcTemplate} that this base class manages, available to subclasses., +	 * @deprecated As of Spring 3.2, use {@link #jdbcTemplate} instead., +	@Deprecated, +	/**, +	 * The {@code JdbcTemplate} that this base class manages, available to subclasses., +	 */, +	protected JdbcTemplate jdbcTemplate;, +, +	 * Set the {@code DataSource}, typically provided via Dependency Injection., +	 * <p>This method also instantiates the {@link #simpleJdbcTemplate} and, +	 * {@link #jdbcTemplate} instance variables., +		this.jdbcTemplate = new JdbcTemplate(dataSource);, +		return JdbcTestUtils.countRowsInTable(this.jdbcTemplate, tableName);, +		return JdbcTestUtils.deleteFromTables(this.jdbcTemplate, names);, +		JdbcTestUtils.executeSqlScript(this.jdbcTemplate, new EncodedResource(resource,, +++ b/spring-test/src/main/java/org/springframework/test/context/junit4/AbstractTransactionalJUnit4SpringContextTests.java, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.test.jdbc.JdbcTestUtils;, + * <p>This class exposes a {@link JdbcTemplate} and provides an easy way, + * @see org.springframework.test.jdbc.JdbcTestUtils, +	 * The {@code SimpleJdbcTemplate} that this base class manages, available to subclasses., +	 * @deprecated As of Spring 3.2, use {@link #jdbcTemplate} instead., +	@Deprecated, +	/**, +	 * The {@code JdbcTemplate} that this base class manages, available to subclasses., +	 */, +	protected JdbcTemplate jdbcTemplate;, +, +	 * Set the {@code DataSource}, typically provided via Dependency Injection., +	 * <p>This method also instantiates the {@link #simpleJdbcTemplate} and, +	 * {@link #jdbcTemplate} instance variables., +		this.jdbcTemplate = new JdbcTemplate(dataSource);, +		return JdbcTestUtils.countRowsInTable(this.jdbcTemplate, tableName);, +		return JdbcTestUtils.deleteFromTables(this.jdbcTemplate, names);, +		JdbcTestUtils.executeSqlScript(this.jdbcTemplate, new EncodedResource(resource,, +++ b/spring-test/src/main/java/org/springframework/test/context/testng/AbstractTransactionalTestNGSpringContextTests.java, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.test.jdbc.JdbcTestUtils;, + * <p>This class exposes a {@link JdbcTemplate} and provides an easy way, + * @see org.springframework.test.context.transaction.BeforeTransaction, + * @see org.springframework.test.context.transaction.AfterTransaction, + * @see org.springframework.test.jdbc.JdbcTestUtils, +	 * The {@code SimpleJdbcTemplate} that this base class manages, available to subclasses., +	 * @deprecated As of Spring 3.2, use {@link #jdbcTemplate} instead., +	@Deprecated, +	/**, +	 * The {@code JdbcTemplate} that this base class manages, available to subclasses., +	 */, +	protected JdbcTemplate jdbcTemplate;, +, +	 * Set the {@code DataSource}, typically provided via Dependency Injection., +	 * <p>This method also instantiates the {@link #simpleJdbcTemplate} and, +	 * {@link #jdbcTemplate} instance variables., +	public void setDataSource(DataSource dataSource) {, +		this.jdbcTemplate = new JdbcTemplate(dataSource);, +		return JdbcTestUtils.countRowsInTable(this.jdbcTemplate, tableName);, +	 * Convenience method for deleting all rows from the specified tables. Use, +	 * with caution outside of a transaction!, +		return JdbcTestUtils.deleteFromTables(this.jdbcTemplate, names);, +	 * <p>The script will normally be loaded by classpath. There should be one, +	 * statement per line. Any semicolons will be removed. <b>Do not use this, +	 * method to execute DDL if you expect rollback.</b>, +		JdbcTestUtils.executeSqlScript(this.jdbcTemplate, new EncodedResource(resource,, +++ b/spring-test/src/main/java/org/springframework/test/context/junit4/AbstractTransactionalJUnit4SpringContextTests.java, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.test.jdbc.JdbcTestUtils;, + * <p>This class exposes a {@link JdbcTemplate} and provides an easy way, + * @see org.springframework.test.jdbc.JdbcTestUtils, +	 * The {@code SimpleJdbcTemplate} that this base class manages, available to subclasses., +	 * @deprecated As of Spring 3.2, use {@link #jdbcTemplate} instead., +	@Deprecated, +	/**, +	 * The {@code JdbcTemplate} that this base class manages, available to subclasses., +	 */, +	protected JdbcTemplate jdbcTemplate;, +, +	 * Set the {@code DataSource}, typically provided via Dependency Injection., +	 * <p>This method also instantiates the {@link #simpleJdbcTemplate} and, +	 * {@link #jdbcTemplate} instance variables., +		this.jdbcTemplate = new JdbcTemplate(dataSource);, +		return JdbcTestUtils.countRowsInTable(this.jdbcTemplate, tableName);, +		return JdbcTestUtils.deleteFromTables(this.jdbcTemplate, names);, +		JdbcTestUtils.executeSqlScript(this.jdbcTemplate, new EncodedResource(resource,, +++ b/spring-test/src/main/java/org/springframework/test/context/testng/AbstractTransactionalTestNGSpringContextTests.java, +import org.springframework.jdbc.core.JdbcTemplate;, +import org.springframework.test.jdbc.JdbcTestUtils;, + * <p>This class exposes a {@link JdbcTemplate} and provides an easy way, + * @see org.springframework.test.context.transaction.BeforeTransaction, + * @see org.springframework.test.context.transaction.AfterTransaction, + * @see org.springframework.test.jdbc.JdbcTestUtils, +	 * The {@code SimpleJdbcTemplate} that this base class manages, available to subclasses., +	 * @deprecated As of Spring 3.2, use {@link #jdbcTemplate} instead., +	@Deprecated, +	/**, +	 * The {@code JdbcTemplate} that this base class manages, available to subclasses.]