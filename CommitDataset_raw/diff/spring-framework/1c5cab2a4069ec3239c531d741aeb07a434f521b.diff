[+++ b/spring-web/src/test/java/org/springframework/http/converter/xml/Jaxb2CollectionHttpMessageConverterTests.java, +import javax.xml.stream.XMLInputFactory;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.core.io.Resource;, +import org.springframework.http.converter.HttpMessageConverter;, +	@Test, +	@SuppressWarnings("unchecked"), +	public void readXmlRootElementWithExternalEntity() throws Exception {, +, +		Resource external = new ClassPathResource("external.txt", getClass());, +		String content =  "<!DOCTYPE root [" +, +				"  <!ELEMENT external ANY >\n" +, +				"  <!ENTITY ext SYSTEM \"" + external.getURI() + "\" >]>" +, +				"  <list><rootElement><type s=\"1\"/><external>&ext;</external></rootElement></list>";, +		MockHttpInputMessage inputMessage = new MockHttpInputMessage(content.getBytes("UTF-8"));, +, +		Collection<RootElement> result = converter.read(rootElementListType, null, inputMessage);, +		assertEquals(1, result.size());, +		assertEquals("", result.iterator().next().external);, +	}, +, +	@Test, +	@SuppressWarnings("unchecked"), +	public void readXmlRootElementExternalEntityEnabled() throws Exception {, +, +		Resource external = new ClassPathResource("external.txt", getClass());, +		String content =  "<!DOCTYPE root [" +, +				"  <!ELEMENT external ANY >\n" +, +				"  <!ENTITY ext SYSTEM \"" + external.getURI() + "\" >]>" +, +				"  <list><rootElement><type s=\"1\"/><external>&ext;</external></rootElement></list>";, +		MockHttpInputMessage inputMessage = new MockHttpInputMessage(content.getBytes("UTF-8"));, +, +		// Now read with, +		Jaxb2CollectionHttpMessageConverter<?> c = new Jaxb2CollectionHttpMessageConverter<Collection<Object>>() {, +			@Override, +			protected XMLInputFactory createXmlInputFactory() {, +				XMLInputFactory inputFactory = XMLInputFactory.newInstance();, +				inputFactory.setProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, true);, +				return inputFactory;, +			}, +		};, +, +		Collection<RootElement> result = c.read(rootElementListType, null, inputMessage);, +		assertEquals(1, result.size());, +		assertEquals("Foo Bar", result.iterator().next().external);, +	}, +, +		@XmlElement(required=false), +		public String external;, +]