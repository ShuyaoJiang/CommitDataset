[+++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriTemplate.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.util;, +, +import java.net.URI;, +import java.net.URISyntaxException;, +import java.util.Collections;, +import java.util.LinkedHashMap;, +import java.util.LinkedList;, +import java.util.List;, +import java.util.Map;, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +, +import org.springframework.util.Assert;, +, +/**, + * Represents a URI template. An URI template is a URI-like string that contained variables marked of in braces, + * (<code>{</code>, <code>}</code>), which can be expanded to produce a URI., + * <p/>, + * See {@link #expand(Map)}, {@link #expand(String[])}, and {@link #match(String)} for example usages., + *, + * @author Arjen Poutsma, + * @see <a href="http://bitworking.org/projects/URI-Templates/">URI Templates</a>, + */, +public final class UriTemplate {, +, +	/**, +	 * Captures URI template variable names., +	 */, +	private static final Pattern NAMES_PATTERN = Pattern.compile("\\{([^/]+?)\\}");, +, +	/**, +	 * Replaces template variables in the URI template., +	 */, +	private static final String VALUE_REGEX = "(.*)";, +, +	private final List<String> variableNames;, +, +	private final Pattern matchPattern;, +, +	private final String uriTemplate;, +, +	/**, +	 * Constructs a new {@link UriTemplate} with the given string., +	 *, +	 * @param uriTemplate the uri template string, +	 */, +	public UriTemplate(String uriTemplate) {, +		Parser parser = new Parser(uriTemplate);, +		this.uriTemplate = uriTemplate;, +		this.variableNames = parser.getVariableNames();, +		this.matchPattern = parser.getMatchPattern();, +	}, +, +	/**, +	 * Returns the names of the variables in the template, in order., +	 *, +	 * @return the template variable names, +	 */, +	public List<String> getVariableNames() {, +		return variableNames;, +	}, +, +	/**, +	 * Given the map of variables, expands this template into a URI string. The map keys represent variable names, the, +	 * map values variable values. The order of variables is not significant., +	 * <p/>, +	 * Example:, +	 * <pre>, +	 * UriTemplate template = new UriTemplate("http://example.com/hotels/{hotel}/bookings/{booking}");, +	 * Map&lt;String, String&gt; uriVariables = new HashMap&lt;String, String&gt;();, +	 * uriVariables.put("booking", "42");, +	 * uriVariables.put("hotel", "1");, +	 * System.out.println(template.expand(uriVariables));, +	 * </pre>, +	 * will print: <blockquote><code>http://example.com/hotels/1/bookings/42</code></blockquote>, +	 *, +	 * @param uriVariables the map of uri variables, +	 * @return the expanded uri, +	 * @throws IllegalArgumentException if <code>uriVariables</code> is <code>null</code>; or if it does not contain, +	 *                                  values for all the variable names, +	 */, +	public URI expand(Map<String, String> uriVariables) {, +		Assert.notNull(uriVariables, "'uriVariables' must not be null");]