[+++ b/spring-test/src/main/java/org/springframework/test/context/TestContext.java, + * Copyright 2002-2016 the original author or authors., + * <p>As of Spring Framework 5.0, concrete implementations are highly encouraged, + * to implement a <em>copy constructor</em> in order to allow the immutable state, + * and attributes of a {@code TestContext} to be used as a template for additional, + * contexts created for parallel test execution. The copy constructor must accept a, + * single argument of the type of the concrete implementation. Any implementation, + * that does not provide a copy constructor will likely fail in an environment, + * that executes tests concurrently., + *, +++ b/spring-test/src/main/java/org/springframework/test/context/TestContext.java, + * Copyright 2002-2016 the original author or authors., + * <p>As of Spring Framework 5.0, concrete implementations are highly encouraged, + * to implement a <em>copy constructor</em> in order to allow the immutable state, + * and attributes of a {@code TestContext} to be used as a template for additional, + * contexts created for parallel test execution. The copy constructor must accept a, + * single argument of the type of the concrete implementation. Any implementation, + * that does not provide a copy constructor will likely fail in an environment, + * that executes tests concurrently., + *, +++ b/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java, +import java.lang.reflect.Constructor;, +import org.springframework.util.ClassUtils;, +	private final ThreadLocal<TestContext> testContextHolder = new ThreadLocal<TestContext>() {, +, +		protected TestContext initialValue() {, +			return copyTestContext(TestContextManager.this.testContext);, +		}, +	};, +, +		return this.testContextHolder.get();, +, +		this.testContextHolder.remove();, +, +, +	/**, +	 * Attempt to create a copy of the supplied {@code TestContext} using its, +	 * <em>copy constructor</em>., +	 */, +	private static TestContext copyTestContext(TestContext testContext) {, +		Constructor<? extends TestContext> constructor = ClassUtils.getConstructorIfAvailable(testContext.getClass(),, +			testContext.getClass());, +, +		if (constructor != null) {, +			try {, +				ReflectionUtils.makeAccessible(constructor);, +				return constructor.newInstance(testContext);, +			}, +			catch (Exception ex) {, +				if (logger.isInfoEnabled()) {, +					logger.info(String.format("Failed to invoke copy constructor for [%s]; " +, +							"concurrent test execution is therefore likely not supported.",, +							testContext), ex);, +				}, +			}, +		}, +, +		// fallback to original instance, +		return testContext;, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/context/TestContext.java, + * Copyright 2002-2016 the original author or authors., + * <p>As of Spring Framework 5.0, concrete implementations are highly encouraged, + * to implement a <em>copy constructor</em> in order to allow the immutable state, + * and attributes of a {@code TestContext} to be used as a template for additional, + * contexts created for parallel test execution. The copy constructor must accept a, + * single argument of the type of the concrete implementation. Any implementation, + * that does not provide a copy constructor will likely fail in an environment, + * that executes tests concurrently., + *, +++ b/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java, +import java.lang.reflect.Constructor;, +import org.springframework.util.ClassUtils;, +	private final ThreadLocal<TestContext> testContextHolder = new ThreadLocal<TestContext>() {, +, +		protected TestContext initialValue() {, +			return copyTestContext(TestContextManager.this.testContext);, +		}, +	};, +, +		return this.testContextHolder.get();, +, +		this.testContextHolder.remove();, +, +, +	/**, +	 * Attempt to create a copy of the supplied {@code TestContext} using its, +	 * <em>copy constructor</em>., +	 */, +	private static TestContext copyTestContext(TestContext testContext) {, +		Constructor<? extends TestContext> constructor = ClassUtils.getConstructorIfAvailable(testContext.getClass(),, +			testContext.getClass());, +, +		if (constructor != null) {, +			try {, +				ReflectionUtils.makeAccessible(constructor);, +				return constructor.newInstance(testContext);, +			}, +			catch (Exception ex) {]