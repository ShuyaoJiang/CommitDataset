[+++ b/spring-core/src/main/java/org/springframework/core/GenericTypeResolver.java, +	 * Extract a Class from the given Type., +				if (arg instanceof ParameterizedType) {, +					return extractClass(ownerClass, ((ParameterizedType) arg).getRawType());, +				}, +				return extractClass(ownerClass, arg);, +++ b/spring-core/src/main/java/org/springframework/core/GenericTypeResolver.java, +	 * Extract a Class from the given Type., +				if (arg instanceof ParameterizedType) {, +					return extractClass(ownerClass, ((ParameterizedType) arg).getRawType());, +				}, +				return extractClass(ownerClass, arg);, +++ b/spring-core/src/test/java/org/springframework/core/GenericTypeResolverTests.java, +	@Test, +	public void testBoundParameterizedType() {, +		assertEquals(B.class, resolveTypeArgument(TestImpl.class, ITest.class));, +	}, +, +	class A{}, +, +	class B<T>{}, +, +	class ITest<T>{}, +, +	class TestImpl<I extends A, T extends B<I>> extends ITest<T>{, +	}, +]