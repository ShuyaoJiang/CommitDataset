[+++ b/org.springframework.aspects/src/main/java/org/springframework/cache/aspectj/AbstractCacheAspect.aj, +import org.springframework.cache.interceptor.CacheOperationSource;, +	 * @param cos {@link CacheOperationSource} implementation, retrieving Spring, +	protected AbstractCacheAspect(CacheOperationSource... cos) {, +		setCacheDefinitionSources(cos);, +	 * will be retrieved using Spring's {@link CacheOperationSource} interface., +++ b/org.springframework.aspects/src/main/java/org/springframework/cache/aspectj/AbstractCacheAspect.aj, +import org.springframework.cache.interceptor.CacheOperationSource;, +	 * @param cos {@link CacheOperationSource} implementation, retrieving Spring, +	protected AbstractCacheAspect(CacheOperationSource... cos) {, +		setCacheDefinitionSources(cos);, +	 * will be retrieved using Spring's {@link CacheOperationSource} interface., +++ b/org.springframework.aspects/src/main/java/org/springframework/cache/aspectj/AnnotationCacheAspect.aj, +import org.springframework.cache.annotation.AnnotationCacheOperationSource;, +		super(new AnnotationCacheOperationSource(false));, +++ b/org.springframework.aspects/src/main/java/org/springframework/cache/aspectj/AbstractCacheAspect.aj, +import org.springframework.cache.interceptor.CacheOperationSource;, +	 * @param cos {@link CacheOperationSource} implementation, retrieving Spring, +	protected AbstractCacheAspect(CacheOperationSource... cos) {, +		setCacheDefinitionSources(cos);, +	 * will be retrieved using Spring's {@link CacheOperationSource} interface., +++ b/org.springframework.aspects/src/main/java/org/springframework/cache/aspectj/AnnotationCacheAspect.aj, +import org.springframework.cache.annotation.AnnotationCacheOperationSource;, +		super(new AnnotationCacheOperationSource(false));, +++ b/org.springframework.context/src/main/java/org/springframework/cache/Cache.java, +	 * A (wrapper) object representing a cache value., +	 */, +	interface ValueWrapper<V> {, +		/**, +		 * Returns the actual value in the cache., +		 *  , +		 * @return cache value, +		 */, +		V get();, +	}, +, +	/**, +	 * @return the underlying native cache provider., +	 * <tt>null</tt> if the cache contains no mapping for this key., +	ValueWrapper<V> get(Object key);, +	 * Associates the specified value with the specified key in this cache., +	 * If the cache previously contained a mapping for this key, the old , +	 * value is replaced by the specified value., +	void put(K key, V value);, +	 * Evicts the mapping for this key from this cache if it is present., +	void evict(Object key);, +++ b/org.springframework.aspects/src/main/java/org/springframework/cache/aspectj/AbstractCacheAspect.aj, +import org.springframework.cache.interceptor.CacheOperationSource;, +	 * @param cos {@link CacheOperationSource} implementation, retrieving Spring, +	protected AbstractCacheAspect(CacheOperationSource... cos) {, +		setCacheDefinitionSources(cos);, +	 * will be retrieved using Spring's {@link CacheOperationSource} interface., +++ b/org.springframework.aspects/src/main/java/org/springframework/cache/aspectj/AnnotationCacheAspect.aj, +import org.springframework.cache.annotation.AnnotationCacheOperationSource;, +		super(new AnnotationCacheOperationSource(false));, +++ b/org.springframework.context/src/main/java/org/springframework/cache/Cache.java, +	 * A (wrapper) object representing a cache value., +	 */, +	interface ValueWrapper<V> {, +		/**, +		 * Returns the actual value in the cache., +		 *  , +		 * @return cache value, +		 */, +		V get();, +	}, +, +	/**, +	 * @return the underlying native cache provider., +	 * <tt>null</tt> if the cache contains no mapping for this key., +	ValueWrapper<V> get(Object key);, +	 * Associates the specified value with the specified key in this cache., +	 * If the cache previously contained a mapping for this key, the old , +	 * value is replaced by the specified value., +	void put(K key, V value);, +	 * Evicts the mapping for this key from this cache if it is present., +	void evict(Object key);, +++ /dev/null, +++ b/org.springframework.aspects/src/main/java/org/springframework/cache/aspectj/AbstractCacheAspect.aj, +import org.springframework.cache.interceptor.CacheOperationSource;, +	 * @param cos {@link CacheOperationSource} implementation, retrieving Spring, +	protected AbstractCacheAspect(CacheOperationSource... cos) {, +		setCacheDefinitionSources(cos);, +	 * will be retrieved using Spring's {@link CacheOperationSource} interface., +++ b/org.springframework.aspects/src/main/java/org/springframework/cache/aspectj/AnnotationCacheAspect.aj, +import org.springframework.cache.annotation.AnnotationCacheOperationSource;, +		super(new AnnotationCacheOperationSource(false));, +++ b/org.springframework.context/src/main/java/org/springframework/cache/Cache.java, +	 * A (wrapper) object representing a cache value., +	 */, +	interface ValueWrapper<V> {, +		/**, +		 * Returns the actual value in the cache., +		 *  , +		 * @return cache value, +		 */, +		V get();, +	}, +, +	/**]