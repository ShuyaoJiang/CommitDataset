[+++ b/build.gradle, +	ext.annotationApiVersion   = "1.2", +	ext.jaxwsVersion           = "2.2.11", +		optional("javax.annotation:javax.annotation-api:${annotationApiVersion}"), +		optional("javax.xml.ws:jaxws-api:${jaxwsVersion}"), +		optional("javax.xml.bind:jaxb-api:${jaxbVersion}"), +		optional("javax.activation:activation:${activationApiVersion}"), +		optional("javax.xml.bind:jaxb-api:${jaxbVersion}"), +		optional("javax.activation:activation:${activationApiVersion}"), +		optional("javax.activation:activation:${activationApiVersion}"), +		optional("javax.xml.bind:jaxb-api:${jaxbVersion}"), +		optional("javax.xml.ws:jaxws-api:${jaxwsVersion}"), +		optional("javax.xml.bind:jaxb-api:${jaxbVersion}"), +		optional("javax.xml.bind:jaxb-api:${jaxbVersion}"), +		optional("javax.activation:activation:${activationApiVersion}"), +		optional("javax.xml.bind:jaxb-api:${jaxbVersion}"), +++ b/build.gradle, +	ext.annotationApiVersion   = "1.2", +	ext.jaxwsVersion           = "2.2.11", +		optional("javax.annotation:javax.annotation-api:${annotationApiVersion}"), +		optional("javax.xml.ws:jaxws-api:${jaxwsVersion}"), +		optional("javax.xml.bind:jaxb-api:${jaxbVersion}"), +		optional("javax.activation:activation:${activationApiVersion}"), +		optional("javax.xml.bind:jaxb-api:${jaxbVersion}"), +		optional("javax.activation:activation:${activationApiVersion}"), +		optional("javax.activation:activation:${activationApiVersion}"), +		optional("javax.xml.bind:jaxb-api:${jaxbVersion}"), +		optional("javax.xml.ws:jaxws-api:${jaxwsVersion}"), +		optional("javax.xml.bind:jaxb-api:${jaxbVersion}"), +		optional("javax.xml.bind:jaxb-api:${jaxbVersion}"), +		optional("javax.activation:activation:${activationApiVersion}"), +		optional("javax.xml.bind:jaxb-api:${jaxbVersion}"), +++ b/spring-context/src/main/java/org/springframework/remoting/rmi/JndiRmiClientInterceptor.java, + * Copyright 2002-2016 the original author or authors., + * {@link org.aopalliance.intercept.MethodInterceptor} for accessing RMI services, + * from JNDI. Typically used for RMI-IIOP but can also be used for EJB home objects, +			return lookup();, +++ b/build.gradle, +	ext.annotationApiVersion   = "1.2", +	ext.jaxwsVersion           = "2.2.11", +		optional("javax.annotation:javax.annotation-api:${annotationApiVersion}"), +		optional("javax.xml.ws:jaxws-api:${jaxwsVersion}"), +		optional("javax.xml.bind:jaxb-api:${jaxbVersion}"), +		optional("javax.activation:activation:${activationApiVersion}"), +		optional("javax.xml.bind:jaxb-api:${jaxbVersion}"), +		optional("javax.activation:activation:${activationApiVersion}"), +		optional("javax.activation:activation:${activationApiVersion}"), +		optional("javax.xml.bind:jaxb-api:${jaxbVersion}"), +		optional("javax.xml.ws:jaxws-api:${jaxwsVersion}"), +		optional("javax.xml.bind:jaxb-api:${jaxbVersion}"), +		optional("javax.xml.bind:jaxb-api:${jaxbVersion}"), +		optional("javax.activation:activation:${activationApiVersion}"), +		optional("javax.xml.bind:jaxb-api:${jaxbVersion}"), +++ b/spring-context/src/main/java/org/springframework/remoting/rmi/JndiRmiClientInterceptor.java, + * Copyright 2002-2016 the original author or authors., + * {@link org.aopalliance.intercept.MethodInterceptor} for accessing RMI services, + * from JNDI. Typically used for RMI-IIOP but can also be used for EJB home objects, +			return lookup();, +++ b/spring-context/src/main/java/org/springframework/remoting/rmi/JndiRmiServiceExporter.java, + * Copyright 2002-2016 the original author or authors.]