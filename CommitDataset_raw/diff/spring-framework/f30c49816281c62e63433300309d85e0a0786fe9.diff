[+++ b/spring-web/src/main/java/org/springframework/web/context/request/AbstractRequestAttributesScope.java, + * Copyright 2002-2017 the original author or authors., +			// Retrieve object again, registering it for implicit session attribute updates., +			// As a bonus, we also allow for potential decoration at the getAttribute level., +			Object retrievedObject = attributes.getAttribute(name, getScope());, +			if (retrievedObject != null) {, +				// Only proceed with retrieved object if still present (the expected case)., +				// If it disappeared concurrently, we return our locally created instance., +				scopedObject = retrievedObject;, +			}, +++ b/spring-web/src/main/java/org/springframework/web/context/request/AbstractRequestAttributesScope.java, + * Copyright 2002-2017 the original author or authors., +			// Retrieve object again, registering it for implicit session attribute updates., +			// As a bonus, we also allow for potential decoration at the getAttribute level., +			Object retrievedObject = attributes.getAttribute(name, getScope());, +			if (retrievedObject != null) {, +				// Only proceed with retrieved object if still present (the expected case)., +				// If it disappeared concurrently, we return our locally created instance., +				scopedObject = retrievedObject;, +			}, +++ b/spring-web/src/test/java/org/springframework/web/context/request/SessionScopeTests.java, + * Copyright 2002-2017 the original author or authors., +import java.util.concurrent.atomic.AtomicInteger;, +	public void setup() throws Exception {, +, +		AtomicInteger count = new AtomicInteger();, +		MockHttpSession session = new MockHttpSession() {, +			@Override, +			public void setAttribute(String name, Object value) {, +				super.setAttribute(name, value);, +				count.incrementAndGet();, +			}, +		};, +		assertEquals(1, count.intValue());, +		assertEquals(1, count.intValue());, +, +		// should re-propagate updated attribute, +		requestAttributes.requestCompleted();, +		assertEquals(session.getAttribute(name), bean);, +		assertEquals(2, count.intValue());, +	}, +, +	@Test, +	public void getFromScopeWithSingleAccess() throws Exception {, +		AtomicInteger count = new AtomicInteger();, +		MockHttpSession session = new MockHttpSession() {, +			@Override, +			public void setAttribute(String name, Object value) {, +				super.setAttribute(name, value);, +				count.incrementAndGet();, +			}, +		};, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		request.setSession(session);, +		ServletRequestAttributes requestAttributes = new ServletRequestAttributes(request);, +, +		RequestContextHolder.setRequestAttributes(requestAttributes);, +		String name = "sessionScopedObject";, +		assertNull(session.getAttribute(name));, +		TestBean bean = (TestBean) this.beanFactory.getBean(name);, +		assertEquals(1, count.intValue());, +, +		// should re-propagate updated attribute, +		requestAttributes.requestCompleted();, +		assertEquals(session.getAttribute(name), bean);, +		assertEquals(2, count.intValue());]