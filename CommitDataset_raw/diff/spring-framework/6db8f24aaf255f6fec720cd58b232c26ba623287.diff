[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +	 * @see #findAnnotationAttributes(AnnotatedElement, Class), +	 * @see #findAnnotationAttributes(AnnotatedElement, String), +	 * @see #findAnnotationAttributes(AnnotatedElement, Class), +	 * @see #findAnnotationAttributes(AnnotatedElement, String), +	 * @see #findAnnotationAttributes(AnnotatedElement, String, boolean, boolean), +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +	 * @see #findAnnotationAttributes(AnnotatedElement, Class), +	 * @see #findAnnotationAttributes(AnnotatedElement, String), +	 * @see #findAnnotationAttributes(AnnotatedElement, Class), +	 * @see #findAnnotationAttributes(AnnotatedElement, String), +	 * @see #findAnnotationAttributes(AnnotatedElement, String, boolean, boolean), +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotatedElementUtilsTests.java, +		Class<?> element = TxConfig.class;, +		String name = Transactional.class.getName();, +		AnnotationAttributes attributes = getAnnotationAttributes(element, name);, +		// Verify contracts between utility methods:, +		assertTrue(isAnnotated(element, name));, +		Class<?> element = DerivedTxConfig.class;, +		String name = Transactional.class.getName();, +		AnnotationAttributes attributes = getAnnotationAttributes(element, name);, +		// Verify contracts between utility methods:, +		assertTrue(isAnnotated(element, name));, +		Class<?> element = SubSubClassWithInheritedAnnotation.class;, +		String name = Transactional.class.getName();, +		AnnotationAttributes attributes = getAnnotationAttributes(element, name);, +		// Verify contracts between utility methods:, +		assertTrue(isAnnotated(element, name));, +		Class<?> element = SubSubClassWithInheritedComposedAnnotation.class;, +		String name = Transactional.class.getName();, +		AnnotationAttributes attributes = getAnnotationAttributes(element, name);, +		assertNotNull("AnnotationAttributtes for @Transactional on SubSubClassWithInheritedComposedAnnotation.", attributes);, +		// Verify contracts between utility methods:, +		assertTrue(isAnnotated(element, name));, +		Class<?> element = ConcreteClassWithInheritedAnnotation.class;, +		AnnotationAttributes attributes = getAnnotationAttributes(element, name);, +		// Verify contracts between utility methods:, +		assertTrue(isAnnotated(element, name));, +		Class<?> element = InheritedAnnotationInterface.class;, +		AnnotationAttributes attributes = getAnnotationAttributes(element, name);, +		// Verify contracts between utility methods:, +		assertTrue(isAnnotated(element, name));, +	}, +, +	@Test, +	public void getAnnotationAttributesOnNonInheritedAnnotationInterface() {, +		Class<?> element = NonInheritedAnnotationInterface.class;, +		String name = Order.class.getName();, +		AnnotationAttributes attributes = getAnnotationAttributes(element, name);, +		assertNotNull("Should get @Order on NonInheritedAnnotationInterface", attributes);, +		// Verify contracts between utility methods:, +		assertTrue(isAnnotated(element, name));]