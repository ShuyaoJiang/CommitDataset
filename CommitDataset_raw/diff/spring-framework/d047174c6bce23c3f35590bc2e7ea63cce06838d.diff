[+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	public void setAccessControlRequestMethod(HttpMethod requestMethod) {, +		set(ACCESS_CONTROL_REQUEST_METHOD, requestMethod.name());, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	public void setAccessControlRequestMethod(HttpMethod requestMethod) {, +		set(ACCESS_CONTROL_REQUEST_METHOD, requestMethod.name());, +++ b/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java, +import org.springframework.util.CollectionUtils;, + * @author Juergen Hoeller, +	private static final List<HttpMethod> DEFAULT_METHODS;, +, +	static {, +		List<HttpMethod> rawMethods = new ArrayList<>(2);, +		rawMethods.add(HttpMethod.GET);, +		rawMethods.add(HttpMethod.HEAD);, +		DEFAULT_METHODS = Collections.unmodifiableList(rawMethods);, +	}, +, +, +	private List<HttpMethod> resolvedMethods = DEFAULT_METHODS;, +, +		this.resolvedMethods = other.resolvedMethods;, +		config.setAllowedOrigins(combine(getAllowedOrigins(), other.getAllowedOrigins()));, +		config.setAllowedMethods(combine(getAllowedMethods(), other.getAllowedMethods()));, +		config.setAllowedHeaders(combine(getAllowedHeaders(), other.getAllowedHeaders()));, +		config.setExposedHeaders(combine(getExposedHeaders(), other.getExposedHeaders()));, +			this.allowedOrigins = new ArrayList<>(4);, +	 * <p>If not set, only {@code "GET"} and {@code "HEAD"} are allowed., +		if (!CollectionUtils.isEmpty(allowedMethods)) {, +			this.resolvedMethods = new ArrayList<>(allowedMethods.size());, +			for (String method : allowedMethods) {, +				if (ALL.equals(method)) {, +					this.resolvedMethods = null;, +					break;, +				}, +				this.resolvedMethods.add(HttpMethod.resolve(method));, +			}, +		}, +		else {, +			this.resolvedMethods = DEFAULT_METHODS;, +		}, +	 * only {@code "GET"} and {@code "HEAD"} allowed., +				this.allowedMethods = new ArrayList<>(4);, +				this.resolvedMethods = new ArrayList<>(4);, +			if (ALL.equals(method)) {, +				this.resolvedMethods = null;, +			}, +			else if (this.resolvedMethods != null) {, +				this.resolvedMethods.add(HttpMethod.resolve(method));, +			}, +			this.allowedHeaders = new ArrayList<>(4);, +		this.exposedHeaders = (exposedHeaders != null ? new ArrayList<>(exposedHeaders) : null);, +			this.exposedHeaders = new ArrayList<>(4);, +		if (this.resolvedMethods == null) {, +		return (this.resolvedMethods.contains(requestMethod) ? this.resolvedMethods : null);, +		List<String> result = new ArrayList<>(requestHeaders.size());, +				if (allowAnyHeader) {, +					result.add(requestHeader);, +				}, +				else {, +						if (requestHeader.equalsIgnoreCase(allowedHeader)) {, +		}, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	public void setAccessControlRequestMethod(HttpMethod requestMethod) {, +		set(ACCESS_CONTROL_REQUEST_METHOD, requestMethod.name());, +++ b/spring-web/src/main/java/org/springframework/web/cors/CorsConfiguration.java, +import org.springframework.util.CollectionUtils;, + * @author Juergen Hoeller, +	private static final List<HttpMethod> DEFAULT_METHODS;, +, +	static {, +		List<HttpMethod> rawMethods = new ArrayList<>(2);, +		rawMethods.add(HttpMethod.GET);, +		rawMethods.add(HttpMethod.HEAD);, +		DEFAULT_METHODS = Collections.unmodifiableList(rawMethods);, +	}, +, +, +	private List<HttpMethod> resolvedMethods = DEFAULT_METHODS;, +, +		this.resolvedMethods = other.resolvedMethods;, +		config.setAllowedOrigins(combine(getAllowedOrigins(), other.getAllowedOrigins()));, +		config.setAllowedMethods(combine(getAllowedMethods(), other.getAllowedMethods()));, +		config.setAllowedHeaders(combine(getAllowedHeaders(), other.getAllowedHeaders()));, +		config.setExposedHeaders(combine(getExposedHeaders(), other.getExposedHeaders()));, +			this.allowedOrigins = new ArrayList<>(4);, +	 * <p>If not set, only {@code "GET"} and {@code "HEAD"} are allowed., +		if (!CollectionUtils.isEmpty(allowedMethods)) {, +			this.resolvedMethods = new ArrayList<>(allowedMethods.size());, +			for (String method : allowedMethods) {, +				if (ALL.equals(method)) {, +					this.resolvedMethods = null;, +					break;, +				}, +				this.resolvedMethods.add(HttpMethod.resolve(method));, +			}, +		}, +		else {, +			this.resolvedMethods = DEFAULT_METHODS;, +		}]