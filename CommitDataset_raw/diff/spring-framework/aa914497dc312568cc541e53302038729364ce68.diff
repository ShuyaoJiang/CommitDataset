[+++ b/build.gradle, +		optional("org.codehaus.jackson:jackson-mapper-asl:1.4.2"), +++ b/build.gradle, +		optional("org.codehaus.jackson:jackson-mapper-asl:1.4.2"), +++ b/gradle.properties, +version=3.3.0.BUILD-SNAPSHOT, +++ b/build.gradle, +		optional("org.codehaus.jackson:jackson-mapper-asl:1.4.2"), +++ b/gradle.properties, +version=3.3.0.BUILD-SNAPSHOT, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java, +		if (!this.targetSourcedBeans.containsKey(beanName)) {, +		if (this.targetSourcedBeans.containsKey(beanName)) {, +	 * <p>Default implementation considers Advisors, Advices and, +	 * AbstractAutoProxyCreators as infrastructure classes., +	 * @see org.aopalliance.intercept.MethodInterceptor, +		boolean retVal = Advisor.class.isAssignableFrom(beanClass) ||, +				Advice.class.isAssignableFrom(beanClass) ||, +++ b/build.gradle, +		optional("org.codehaus.jackson:jackson-mapper-asl:1.4.2"), +++ b/gradle.properties, +version=3.3.0.BUILD-SNAPSHOT, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java, +		if (!this.targetSourcedBeans.containsKey(beanName)) {, +		if (this.targetSourcedBeans.containsKey(beanName)) {, +	 * <p>Default implementation considers Advisors, Advices and, +	 * AbstractAutoProxyCreators as infrastructure classes., +	 * @see org.aopalliance.intercept.MethodInterceptor, +		boolean retVal = Advisor.class.isAssignableFrom(beanClass) ||, +				Advice.class.isAssignableFrom(beanClass) ||, +++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, +import java.util.Collections;, +		// sort non-void returning write methods to guard against the ill effects of, +		// non-deterministic sorting of methods returned from Class#getDeclaredMethods, +		// under JDK 7. See http://bugs.sun.com/view_bug.do?bug_id=7023180, +		Collections.sort(matches, new Comparator<Method>() {, +			public int compare(Method m1, Method m2) {, +				return m2.toString().compareTo(m1.toString());, +			}, +		});, +		super(propertyName, null, null);, +		super(propertyName, null, null, null, null);, +			String key = keys.nextElement();, +++ b/build.gradle, +		optional("org.codehaus.jackson:jackson-mapper-asl:1.4.2"), +++ b/gradle.properties, +version=3.3.0.BUILD-SNAPSHOT, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java, +		if (!this.targetSourcedBeans.containsKey(beanName)) {, +		if (this.targetSourcedBeans.containsKey(beanName)) {, +	 * <p>Default implementation considers Advisors, Advices and, +	 * AbstractAutoProxyCreators as infrastructure classes., +	 * @see org.aopalliance.intercept.MethodInterceptor, +		boolean retVal = Advisor.class.isAssignableFrom(beanClass) ||, +				Advice.class.isAssignableFrom(beanClass) ||, +++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, +import java.util.Collections;, +		// sort non-void returning write methods to guard against the ill effects of, +		// non-deterministic sorting of methods returned from Class#getDeclaredMethods, +		// under JDK 7. See http://bugs.sun.com/view_bug.do?bug_id=7023180, +		Collections.sort(matches, new Comparator<Method>() {, +			public int compare(Method m1, Method m2) {, +				return m2.toString().compareTo(m1.toString());, +			}, +		});, +		super(propertyName, null, null);, +		super(propertyName, null, null, null, null);, +			String key = keys.nextElement();, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, +						if ((fallbackToMeta && AnnotationUtils.getValue(metaAnn) == null) ||, +++ b/build.gradle, +		optional("org.codehaus.jackson:jackson-mapper-asl:1.4.2"), +++ b/gradle.properties, +version=3.3.0.BUILD-SNAPSHOT, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java, +		if (!this.targetSourcedBeans.containsKey(beanName)) {, +		if (this.targetSourcedBeans.containsKey(beanName)) {, +	 * <p>Default implementation considers Advisors, Advices and, +	 * AbstractAutoProxyCreators as infrastructure classes., +	 * @see org.aopalliance.intercept.MethodInterceptor, +		boolean retVal = Advisor.class.isAssignableFrom(beanClass) ||, +				Advice.class.isAssignableFrom(beanClass) ||, +++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, +import java.util.Collections;, +		// sort non-void returning write methods to guard against the ill effects of, +		// non-deterministic sorting of methods returned from Class#getDeclaredMethods, +		// under JDK 7. See http://bugs.sun.com/view_bug.do?bug_id=7023180, +		Collections.sort(matches, new Comparator<Method>() {, +			public int compare(Method m1, Method m2) {, +				return m2.toString().compareTo(m1.toString());, +			}, +		});, +		super(propertyName, null, null);, +		super(propertyName, null, null, null, null);, +			String key = keys.nextElement();, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, +						if ((fallbackToMeta && AnnotationUtils.getValue(metaAnn) == null) ||, +++ b/spring-beans/src/test/java/org/springframework/beans/ExtendedBeanInfoTests.java, +import java.math.BigDecimal;, +	/**]