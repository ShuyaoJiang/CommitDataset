[+++ b/build.gradle, +	ext.reactorVersion       = "2.0.1.BUILD-SNAPSHOT", +		mavenLocal(), +		optional("io.projectreactor:reactor-net:${reactorVersion}") {, +		optional "io.netty:netty-all:$nettyVersion", +		testCompile('org.slf4j:slf4j-log4j12:1.7.10'), +		testCompile("io.projectreactor:reactor-net:${reactorVersion}"), +++ b/build.gradle, +	ext.reactorVersion       = "2.0.1.BUILD-SNAPSHOT", +		mavenLocal(), +		optional("io.projectreactor:reactor-net:${reactorVersion}") {, +		optional "io.netty:netty-all:$nettyVersion", +		testCompile('org.slf4j:slf4j-log4j12:1.7.10'), +		testCompile("io.projectreactor:reactor-net:${reactorVersion}"), +++ b/spring-core/src/main/java/org/springframework/core/convert/support/StreamConverter.java, +		List<Object> content = source.collect(Collectors.<Object>toList());, +++ b/build.gradle, +	ext.reactorVersion       = "2.0.1.BUILD-SNAPSHOT", +		mavenLocal(), +		optional("io.projectreactor:reactor-net:${reactorVersion}") {, +		optional "io.netty:netty-all:$nettyVersion", +		testCompile('org.slf4j:slf4j-log4j12:1.7.10'), +		testCompile("io.projectreactor:reactor-net:${reactorVersion}"), +++ b/spring-core/src/main/java/org/springframework/core/convert/support/StreamConverter.java, +		List<Object> content = source.collect(Collectors.<Object>toList());, +++ /dev/null, +++ b/build.gradle, +	ext.reactorVersion       = "2.0.1.BUILD-SNAPSHOT", +		mavenLocal(), +		optional("io.projectreactor:reactor-net:${reactorVersion}") {, +		optional "io.netty:netty-all:$nettyVersion", +		testCompile('org.slf4j:slf4j-log4j12:1.7.10'), +		testCompile("io.projectreactor:reactor-net:${reactorVersion}"), +++ b/spring-core/src/main/java/org/springframework/core/convert/support/StreamConverter.java, +		List<Object> content = source.collect(Collectors.<Object>toList());, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +	ext.reactorVersion       = "2.0.1.BUILD-SNAPSHOT", +		mavenLocal(), +		optional("io.projectreactor:reactor-net:${reactorVersion}") {, +		optional "io.netty:netty-all:$nettyVersion", +		testCompile('org.slf4j:slf4j-log4j12:1.7.10'), +		testCompile("io.projectreactor:reactor-net:${reactorVersion}"), +++ b/spring-core/src/main/java/org/springframework/core/convert/support/StreamConverter.java, +		List<Object> content = source.collect(Collectors.<Object>toList());, +++ /dev/null, +++ /dev/null, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/Reactor2StompCodec.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.messaging.simp.stomp;, +, +import java.nio.ByteBuffer;, +, +, +import org.springframework.messaging.Message;, +import org.springframework.util.Assert;, +import reactor.fn.Consumer;, +import reactor.fn.Function;, +import reactor.io.buffer.Buffer;, +import reactor.io.codec.Codec;, +, +/**, + * A Reactor TCP {@link Codec} for sending and receiving STOMP messages., + *, + * @author Andy Wilkinson, + * @author Rossen Stoyanchev, + * @since 4.0, + */, +public class Reactor2StompCodec extends Codec<Buffer, Message<byte[]>, Message<byte[]>> {, +, +	private final StompDecoder stompDecoder;, +, +	private final StompEncoder stompEncoder;, +, +	private final Function<Message<byte[]>, Buffer> encodingFunction;, +, +, +	public Reactor2StompCodec() {, +		this(new StompEncoder(), new StompDecoder());, +	}, +, +	public Reactor2StompCodec(StompEncoder encoder, StompDecoder decoder) {, +		Assert.notNull(encoder, "'encoder' is required");, +		Assert.notNull(decoder, "'decoder' is required");]