[+++ b/spring-framework-reference/src/dao.xml, +    <programlisting language="java">@Repository, +}</programlisting>, +    <programlisting language="java">@Repository, +}</programlisting>, +    <programlisting language="java">@Repository, +}</programlisting>, +, +    <note>, +      <para>Please see the specific coverage of each persistence technology, +      for details on how to configure the application context to take, +      advantage of these annotations.</para>, +    </note>, +, +    <para></para>, +++ b/spring-framework-reference/src/dao.xml, +    <programlisting language="java">@Repository, +}</programlisting>, +    <programlisting language="java">@Repository, +}</programlisting>, +    <programlisting language="java">@Repository, +}</programlisting>, +, +    <note>, +      <para>Please see the specific coverage of each persistence technology, +      for details on how to configure the application context to take, +      advantage of these annotations.</para>, +    </note>, +, +    <para></para>, +++ b/spring-framework-reference/src/orm.xml, +      case of JDBC and applying AOP interceptors for the ORM, +      technologies.</para>, +    <section id="orm-hibernate-tx-declarative">, +      <title>Declarative transaction demarcation</title>, +, +      <para>We recommended that you use Spring's declarative transaction, +      support, which essentially enables you to replace explicit transaction, +      demarcation API calls in your Java code with an AOP transaction, +      interceptor configured in a Spring container. This allows you to keep, +      business services free of repetitive transaction demarcation code, and, +      allows you to focus on adding business logic which is where the real, +      value of your application lies.</para>, +, +      <note>, +        <para>You are <emphasis>strongly</emphasis> encouraged to read the, +        section entitled <xref linkend="transaction-declarative" /> if you, +        have not done so already prior to continuing.</para>, +      </note>, +, +      <para>Furthermore, transaction semantics like propagation behavior and, +      isolation level can be changed in a configuration file and do not affect, +      the business service implementations.</para>, +, +      <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;, +&lt;beans xmlns="http://www.springframework.org/schema/beans", +       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +       xmlns:aop="http://www.springframework.org/schema/aop", +       xmlns:tx="http://www.springframework.org/schema/tx", +       xsi:schemaLocation=", +       http://www.springframework.org/schema/beans , +       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd, +       http://www.springframework.org/schema/tx , +       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd, +       http://www.springframework.org/schema/aop , +       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"&gt;, +, +  <lineannotation>&lt;!-- <interfacename>SessionFactory</interfacename>, <interfacename>DataSource</interfacename>, etc. omitted --&gt;</lineannotation>, +, +  &lt;bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager"&gt;, +    &lt;property name="sessionFactory" ref="sessionFactory"/&gt;, +  &lt;/bean&gt;, +  , +  &lt;aop:config&gt;, +    &lt;aop:pointcut id="productServiceMethods" expression="execution(* product.ProductService.*(..))"/&gt;, +    &lt;aop:advisor advice-ref="txAdvice" pointcut-ref="productServiceMethods"/&gt;, +  &lt;/aop:config&gt;, +, +  &lt;tx:advice id="txAdvice" transaction-manager="myTxManager"&gt;, +    &lt;tx:attributes&gt;, +      &lt;tx:method name="increasePrice*" propagation="REQUIRED"/&gt;, +      &lt;tx:method name="someOtherBusinessMethod" propagation="REQUIRES_NEW"/&gt;, +      &lt;tx:method name="*" propagation="SUPPORTS" read-only="true"/&gt;, +    &lt;/tx:attributes&gt;, +  &lt;/tx:advice&gt;, +, +  &lt;bean id="myProductService" class="product.SimpleProductService"&gt;, +    &lt;property name="productDao" ref="myProductDao"/&gt;, +  &lt;/bean&gt;, +, +&lt;/beans&gt;</programlisting>, +, +      <programlisting language="java">public class ProductServiceImpl implements ProductService {, +, +    private ProductDao productDao;, +, +    public void setProductDao(ProductDao productDao) {, +        this.productDao = productDao;, +    }, +]