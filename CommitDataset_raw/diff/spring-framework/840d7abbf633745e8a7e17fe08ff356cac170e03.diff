[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientResponse.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientResponse.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +import java.util.List;, +import org.springframework.http.ResponseEntity;, +		public ResponseSpec retrieve() {, +			return new DefaultResponseSpec(exchange());, +		}, +	}, +, +	private static class DefaultResponseSpec implements ResponseSpec {, +, +		private final Mono<ClientResponse> responseMono;, +, +, +		DefaultResponseSpec(Mono<ClientResponse> responseMono) {, +			this.responseMono = responseMono;, +		public <T> Mono<T> bodyToMono(Class<T> bodyType) {, +			return this.responseMono.then(clientResponse -> clientResponse.bodyToMono(bodyType));, +		public <T> Flux<T> bodyToFlux(Class<T> elementType) {, +			return this.responseMono.flatMap(clientResponse -> clientResponse.bodyToFlux(elementType));, +		@Override, +		public <T> Mono<ResponseEntity<T>> bodyToEntity(Class<T> bodyType) {, +			return this.responseMono.then(response ->, +					response.bodyToMono(bodyType).map(body -> {, +						HttpHeaders headers = response.headers().asHttpHeaders();, +						return new ResponseEntity<>(body, headers, response.statusCode());, +					}), +			);, +		}, +, +		@Override, +		public <T> Mono<ResponseEntity<List<T>>> bodyToEntityList(Class<T> responseType) {, +			return this.responseMono.then(response ->, +					response.bodyToFlux(responseType).collectList().map(body -> {, +						HttpHeaders headers = response.headers().asHttpHeaders();, +						return new ResponseEntity<>(body, headers, response.statusCode());, +					}), +			);, +		}, +	}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ClientResponse.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultClientResponse.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java, +import java.util.List;, +import org.springframework.http.ResponseEntity;, +		public ResponseSpec retrieve() {, +			return new DefaultResponseSpec(exchange());, +		}, +	}, +, +	private static class DefaultResponseSpec implements ResponseSpec {, +, +		private final Mono<ClientResponse> responseMono;, +, +, +		DefaultResponseSpec(Mono<ClientResponse> responseMono) {, +			this.responseMono = responseMono;, +		public <T> Mono<T> bodyToMono(Class<T> bodyType) {, +			return this.responseMono.then(clientResponse -> clientResponse.bodyToMono(bodyType));, +		public <T> Flux<T> bodyToFlux(Class<T> elementType) {, +			return this.responseMono.flatMap(clientResponse -> clientResponse.bodyToFlux(elementType));, +		@Override, +		public <T> Mono<ResponseEntity<T>> bodyToEntity(Class<T> bodyType) {, +			return this.responseMono.then(response ->, +					response.bodyToMono(bodyType).map(body -> {, +						HttpHeaders headers = response.headers().asHttpHeaders();, +						return new ResponseEntity<>(body, headers, response.statusCode());, +					}), +			);, +		}, +, +		@Override, +		public <T> Mono<ResponseEntity<List<T>>> bodyToEntityList(Class<T> responseType) {, +			return this.responseMono.then(response ->, +					response.bodyToFlux(responseType).collectList().map(body -> {, +						HttpHeaders headers = response.headers().asHttpHeaders();, +						return new ResponseEntity<>(body, headers, response.statusCode());, +					}), +			);, +		}, +	}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java, +import java.util.List;, +import org.springframework.http.ResponseEntity;, +		 * Exchange the request for a {@code ClientResponse} with full access, +		 * to the response status and headers before extracting the body., +		 *, +		 * <p>Use {@link Mono#then(Function)} or {@link Mono#flatMap(Function)}, +		 * to compose further on the response:, +		 *, +		 * <pre>, +		 *	Mono&lt;Pojo&gt; mono = client.get().uri("/"), +		 *		.accept(MediaType.APPLICATION_JSON), +		 *		.exchange(), +		 *		.then(response -> response.bodyToMono(Pojo.class));, +		 *]