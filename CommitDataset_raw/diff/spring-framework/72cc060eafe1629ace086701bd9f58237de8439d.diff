[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodInvoker.java, +					Class resolvedType = GenericTypeResolver.resolveReturnType(, +							attributeMethodToInvoke, handler.getClass());, +					attrName = Conventions.getVariableNameForReturnType(, +							attributeMethodToInvoke, resolvedType, attrValue);, +	private Object[] resolveHandlerArguments(Method handlerMethod, Object handler,, +			NativeWebRequest webRequest, ExtendedModelMap implicitModel) throws Exception {, +	 * Return a {@link HttpInputMessage} for the given {@link NativeWebRequest}., +	public final void updateModelAttributes(Object handler, Map<String, Object> mavModel,, +			ExtendedModelMap implicitModel, NativeWebRequest webRequest) throws Exception {, +	protected final void addReturnValueAsModelAttribute(, +			Method handlerMethod, Class handlerType, Object returnValue, ExtendedModelMap implicitModel) {, +, +		ModelAttribute attr = AnnotationUtils.findAnnotation(handlerMethod, ModelAttribute.class);, +		String attrName = (attr != null ? attr.value() : "");, +		if ("".equals(attrName)) {, +			Class resolvedType = GenericTypeResolver.resolveReturnType(handlerMethod, handlerType);, +			attrName = Conventions.getVariableNameForReturnType(handlerMethod, resolvedType, returnValue);, +		}, +		implicitModel.addAttribute(attrName, returnValue);, +	}, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodInvoker.java, +					Class resolvedType = GenericTypeResolver.resolveReturnType(, +							attributeMethodToInvoke, handler.getClass());, +					attrName = Conventions.getVariableNameForReturnType(, +							attributeMethodToInvoke, resolvedType, attrValue);, +	private Object[] resolveHandlerArguments(Method handlerMethod, Object handler,, +			NativeWebRequest webRequest, ExtendedModelMap implicitModel) throws Exception {, +	 * Return a {@link HttpInputMessage} for the given {@link NativeWebRequest}., +	public final void updateModelAttributes(Object handler, Map<String, Object> mavModel,, +			ExtendedModelMap implicitModel, NativeWebRequest webRequest) throws Exception {, +	protected final void addReturnValueAsModelAttribute(, +			Method handlerMethod, Class handlerType, Object returnValue, ExtendedModelMap implicitModel) {, +, +		ModelAttribute attr = AnnotationUtils.findAnnotation(handlerMethod, ModelAttribute.class);, +		String attrName = (attr != null ? attr.value() : "");, +		if ("".equals(attrName)) {, +			Class resolvedType = GenericTypeResolver.resolveReturnType(handlerMethod, handlerType);, +			attrName = Conventions.getVariableNameForReturnType(handlerMethod, resolvedType, returnValue);, +		}, +		implicitModel.addAttribute(attrName, returnValue);, +	}, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +			else if (handlerMethod.isAnnotationPresent(ModelAttribute.class)) {, +				addReturnValueAsModelAttribute(handlerMethod, handlerType, returnValue, implicitModel);, +				return new ModelAndView().addAllObjects(implicitModel);, +			}, +			else if (returnValue instanceof Map) {, +				return new ModelAndView().addAllObjects(implicitModel).addAllObjects((Map) returnValue);, +			}, +				addReturnValueAsModelAttribute(handlerMethod, handlerType, returnValue, implicitModel);, +				return new ModelAndView().addAllObjects(implicitModel);, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodInvoker.java, +					Class resolvedType = GenericTypeResolver.resolveReturnType(, +							attributeMethodToInvoke, handler.getClass());, +					attrName = Conventions.getVariableNameForReturnType(, +							attributeMethodToInvoke, resolvedType, attrValue);, +	private Object[] resolveHandlerArguments(Method handlerMethod, Object handler,, +			NativeWebRequest webRequest, ExtendedModelMap implicitModel) throws Exception {, +	 * Return a {@link HttpInputMessage} for the given {@link NativeWebRequest}., +	public final void updateModelAttributes(Object handler, Map<String, Object> mavModel,, +			ExtendedModelMap implicitModel, NativeWebRequest webRequest) throws Exception {, +	protected final void addReturnValueAsModelAttribute(, +			Method handlerMethod, Class handlerType, Object returnValue, ExtendedModelMap implicitModel) {, +, +		ModelAttribute attr = AnnotationUtils.findAnnotation(handlerMethod, ModelAttribute.class);, +		String attrName = (attr != null ? attr.value() : "");, +		if ("".equals(attrName)) {, +			Class resolvedType = GenericTypeResolver.resolveReturnType(handlerMethod, handlerType);, +			attrName = Conventions.getVariableNameForReturnType(handlerMethod, resolvedType, returnValue);, +		}, +		implicitModel.addAttribute(attrName, returnValue);, +	}, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +			else if (handlerMethod.isAnnotationPresent(ModelAttribute.class)) {, +				addReturnValueAsModelAttribute(handlerMethod, handlerType, returnValue, implicitModel);, +				return new ModelAndView().addAllObjects(implicitModel);, +			}, +			else if (returnValue instanceof Map) {, +				return new ModelAndView().addAllObjects(implicitModel).addAllObjects((Map) returnValue);, +			}, +				addReturnValueAsModelAttribute(handlerMethod, handlerType, returnValue, implicitModel);, +				return new ModelAndView().addAllObjects(implicitModel);, +, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +		assertEquals("myPath-name1-typeMismatch-tb1-myValue-yourValue", response.getContentAsString());, +				wac.getBeanFactory().registerSingleton("advisor", new DefaultPointcutAdvisor(new SimpleTraceInterceptor()));, +		@ModelAttribute("yourKey"), +			return "yourValue";, +						response.getWriter().write(viewName + "-" + tb.getName() + "-" +, +								errors.getFieldError("age").getCode() + "-" + testBeans.get(0).getName() + "-" +, +								model.get("myKey") + (model.containsKey("yourKey") ? "-" + model.get("yourKey") : ""));, +, +, +]