[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +		String beanDefinitionName = BeanFactoryUtils.transformedBeanName(beanName);, +		if (containsBeanDefinition(beanDefinitionName)) {, +			return isAutowireCandidate(beanName, getMergedLocalBeanDefinition(beanDefinitionName), descriptor);, +		String beanDefinitionName = BeanFactoryUtils.transformedBeanName(beanName);, +		resolveBeanClass(mbd, beanDefinitionName);, +				new BeanDefinitionHolder(mbd, beanName, getAliases(beanDefinitionName)), descriptor);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +		String beanDefinitionName = BeanFactoryUtils.transformedBeanName(beanName);, +		if (containsBeanDefinition(beanDefinitionName)) {, +			return isAutowireCandidate(beanName, getMergedLocalBeanDefinition(beanDefinitionName), descriptor);, +		String beanDefinitionName = BeanFactoryUtils.transformedBeanName(beanName);, +		resolveBeanClass(mbd, beanDefinitionName);, +				new BeanDefinitionHolder(mbd, beanName, getAliases(beanDefinitionName)), descriptor);, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java, +	public void testGenericsBasedFactoryBeanInjectionWithBeanDefinition() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver());, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		RootBeanDefinition bd = new RootBeanDefinition(RepositoryFactoryBeanInjectionBean.class);, +		bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE);, +		bf.registerBeanDefinition("annotatedBean", bd);, +		bf.registerBeanDefinition("repoFactoryBean", new RootBeanDefinition(RepositoryFactoryBean.class));, +, +		RepositoryFactoryBeanInjectionBean bean = (RepositoryFactoryBeanInjectionBean) bf.getBean("annotatedBean");, +		RepositoryFactoryBean repoFactoryBean = bf.getBean("&repoFactoryBean", RepositoryFactoryBean.class);, +		assertSame(repoFactoryBean, bean.repositoryFactoryBean);, +	}, +, +	@Test, +	public void testGenericsBasedFactoryBeanInjectionWithSingletonBean() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver());, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		RootBeanDefinition bd = new RootBeanDefinition(RepositoryFactoryBeanInjectionBean.class);, +		bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE);, +		bf.registerBeanDefinition("annotatedBean", bd);, +		bf.registerSingleton("repoFactoryBean", new RepositoryFactoryBean<>());, +, +		RepositoryFactoryBeanInjectionBean bean = (RepositoryFactoryBeanInjectionBean) bf.getBean("annotatedBean");, +		RepositoryFactoryBean repoFactoryBean = bf.getBean("&repoFactoryBean", RepositoryFactoryBean.class);, +		assertSame(repoFactoryBean, bean.repositoryFactoryBean);, +	}, +, +	@Test, +	public static class RepositoryFactoryBean<T> implements FactoryBean<T> {, +, +		@Override, +		public T getObject() {, +			throw new IllegalStateException();, +		}, +, +		@Override, +		public Class<?> getObjectType() {, +			return Object.class;, +		}, +, +		@Override, +		public boolean isSingleton() {, +			return false;, +		}, +	}, +, +, +	public static class RepositoryFactoryBeanInjectionBean {, +, +		@Autowired, +		public RepositoryFactoryBean<?> repositoryFactoryBean;, +	}, +, +]