[+++ b/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java, + * Copyright 2002-2018 the original author or authors., +			if (msg == null || matchesClassCastMessage(msg, event.getClass().getName())) {, +				// -> let's suppress the exception and just log a debug message., +	private boolean matchesClassCastMessage(String classCastMessage, String eventClassName) {, +		// On Java 8, the message simply starts with the class name: "java.lang.String cannot be cast...", +		if (classCastMessage.startsWith(eventClassName)) {, +			return true;, +		}, +		// On Java 9, the message contains the module name: "java.base/java.lang.String cannot be cast...", +		int moduleSeparatorIndex = classCastMessage.indexOf('/');, +		if (moduleSeparatorIndex != -1 && classCastMessage.startsWith(eventClassName, moduleSeparatorIndex + 1)) {, +			return true;, +		}, +		// Assuming an unrelated class cast failure..., +		return false;, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java, + * Copyright 2002-2018 the original author or authors., +			if (msg == null || matchesClassCastMessage(msg, event.getClass().getName())) {, +				// -> let's suppress the exception and just log a debug message., +	private boolean matchesClassCastMessage(String classCastMessage, String eventClassName) {, +		// On Java 8, the message simply starts with the class name: "java.lang.String cannot be cast...", +		if (classCastMessage.startsWith(eventClassName)) {, +			return true;, +		}, +		// On Java 9, the message contains the module name: "java.base/java.lang.String cannot be cast...", +		int moduleSeparatorIndex = classCastMessage.indexOf('/');, +		if (moduleSeparatorIndex != -1 && classCastMessage.startsWith(eventClassName, moduleSeparatorIndex + 1)) {, +			return true;, +		}, +		// Assuming an unrelated class cast failure..., +		return false;, +	}, +, +++ b/spring-context/src/test/java/org/springframework/context/event/ApplicationContextEventTests.java, + * Copyright 2002-2018 the original author or authors., +	public void lambdaAsListenerWithJava8StyleClassCastMessage() {, +		StaticApplicationContext context = new StaticApplicationContext();, +		ApplicationListener<ApplicationEvent> listener =, +				event -> { throw new ClassCastException(event.getClass().getName()); };, +		context.addApplicationListener(listener);, +		context.refresh();, +, +		context.publishEvent(new MyEvent(context));, +		context.close();, +	}, +, +	@Test, +	public void lambdaAsListenerWithJava9StyleClassCastMessage() {, +		StaticApplicationContext context = new StaticApplicationContext();, +		ApplicationListener<ApplicationEvent> listener =, +				event -> { throw new ClassCastException("spring.context/" + event.getClass().getName()); };, +		context.addApplicationListener(listener);, +		context.refresh();, +, +		context.publishEvent(new MyEvent(context));, +		context.close();, +	}, +, +	@Test]