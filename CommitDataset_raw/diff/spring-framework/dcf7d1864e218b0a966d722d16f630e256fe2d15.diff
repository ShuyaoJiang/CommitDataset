[+++ b/.gitignore, +.classpath, +.project, +++ b/.gitignore, +.classpath, +.project, +++ b/build.gradle, +		classpath("org.springframework.build.gradle:propdeps-plugin:0.0.1"), +	apply plugin: "propdeps-eclipse", +	apply plugin: "propdeps-idea", +		if (project.name in ["spring", "spring-jms", "spring-orm",, +		testCompile("org.codehaus.woodstox:wstx-asl:3.2.7"), +		testCompile(project(":spring-web").sourceSets.test.output), +		compile(project(":spring-web").sourceSets*.output) // mock request & response, +		useTestNG(), +	// don"t publish the default jar for the root project, +		testCompile(project(":spring-core").sourceSets.test.output), +, +		maxMemory = "1024m", +		destinationDir = new File(buildDir, "api"), +++ b/.gitignore, +.classpath, +.project, +++ b/build.gradle, +		classpath("org.springframework.build.gradle:propdeps-plugin:0.0.1"), +	apply plugin: "propdeps-eclipse", +	apply plugin: "propdeps-idea", +		if (project.name in ["spring", "spring-jms", "spring-orm",, +		testCompile("org.codehaus.woodstox:wstx-asl:3.2.7"), +		testCompile(project(":spring-web").sourceSets.test.output), +		compile(project(":spring-web").sourceSets*.output) // mock request & response, +		useTestNG(), +	// don"t publish the default jar for the root project, +		testCompile(project(":spring-core").sourceSets.test.output), +, +		maxMemory = "1024m", +		destinationDir = new File(buildDir, "api"), +++ /dev/null, +++ b/.gitignore, +.classpath, +.project, +++ b/build.gradle, +		classpath("org.springframework.build.gradle:propdeps-plugin:0.0.1"), +	apply plugin: "propdeps-eclipse", +	apply plugin: "propdeps-idea", +		if (project.name in ["spring", "spring-jms", "spring-orm",, +		testCompile("org.codehaus.woodstox:wstx-asl:3.2.7"), +		testCompile(project(":spring-web").sourceSets.test.output), +		compile(project(":spring-web").sourceSets*.output) // mock request & response, +		useTestNG(), +	// don"t publish the default jar for the root project, +		testCompile(project(":spring-core").sourceSets.test.output), +, +		maxMemory = "1024m", +		destinationDir = new File(buildDir, "api"), +++ /dev/null, +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/TestSourceSetDependenciesPlugin.groovy, +		for(def configurationName in ["compile", "optional", "provided"]) {, +++ b/.gitignore, +.classpath, +.project, +++ b/build.gradle, +		classpath("org.springframework.build.gradle:propdeps-plugin:0.0.1"), +	apply plugin: "propdeps-eclipse", +	apply plugin: "propdeps-idea", +		if (project.name in ["spring", "spring-jms", "spring-orm",, +		testCompile("org.codehaus.woodstox:wstx-asl:3.2.7"), +		testCompile(project(":spring-web").sourceSets.test.output), +		compile(project(":spring-web").sourceSets*.output) // mock request & response, +		useTestNG(), +	// don"t publish the default jar for the root project, +		testCompile(project(":spring-core").sourceSets.test.output), +, +		maxMemory = "1024m", +		destinationDir = new File(buildDir, "api"), +++ /dev/null, +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/TestSourceSetDependenciesPlugin.groovy, +		for(def configurationName in ["compile", "optional", "provided"]) {, +++ /dev/null, +++ b/.gitignore, +.classpath, +.project, +++ b/build.gradle, +		classpath("org.springframework.build.gradle:propdeps-plugin:0.0.1"), +	apply plugin: "propdeps-eclipse", +	apply plugin: "propdeps-idea", +		if (project.name in ["spring", "spring-jms", "spring-orm",, +		testCompile("org.codehaus.woodstox:wstx-asl:3.2.7"), +		testCompile(project(":spring-web").sourceSets.test.output), +		compile(project(":spring-web").sourceSets*.output) // mock request & response, +		useTestNG(), +	// don"t publish the default jar for the root project, +		testCompile(project(":spring-core").sourceSets.test.output), +, +		maxMemory = "1024m", +		destinationDir = new File(buildDir, "api"), +++ /dev/null, +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/TestSourceSetDependenciesPlugin.groovy, +		for(def configurationName in ["compile", "optional", "provided"]) {, +++ /dev/null]