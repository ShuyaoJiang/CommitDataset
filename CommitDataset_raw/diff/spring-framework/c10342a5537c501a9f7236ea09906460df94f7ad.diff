[+++ b/spring-framework-reference/src/scheduling.xml, +    <title>Task Execution and Scheduling</title>, +	<section id="scheduling-annotation-support">, +		<title>Annotation Support for Scheduling and Asynchronous Execution</title>, +, +		<para>Spring 3.0 also adds annotation support for both task scheduling, +		and asynchronous method execution.</para>, +, +		<section id="scheduling-annotation-support-scheduled">, +			<title>The @Scheduled Annotation</title>, +, +			<para>The @Scheduled annotation can be added to a method along with , +			trigger metadata. For example, the following method would be invoked, +			every 5 seconds with a fixed delay, meaning that the period will be, +			measured from the completion time of each preceding invocation.</para>, +			<programlisting language="java"><![CDATA[@Scheduled(fixedDelay=5000), +public void doSomething() {, +    // something that should execute periodically, +}]]></programlisting>, +			<para>If a fixed rate execution is desired, simply change the property, +			name specified within the annotation. The following would be executed, +			every 5 seconds measured between the successive start times of each, +			invocation.</para>, +			<programlisting language="java"><![CDATA[@Scheduled(fixedRate=5000), +public void doSomething() {, +    // something that should execute periodically, +}]]></programlisting>, +			<para>If simple periodic scheduling is not expressive enough, then a, +			cron expression may be provided. For example, the following will only, +			execute on weekdays.</para>, +			<programlisting language="java"><![CDATA[@Scheduled(cron="*/5 * * * * MON-FRI"), +public void doSomething() {, +    // something that should execute on weekdays only, +}]]></programlisting>, +			<para>Notice that the methods to be scheduled must have void returns, +			and must not expect any arguments. If the method needs to interact with, +			other objects from the Application Context, then those would typically, +			have been provided through dependency injection.</para>, +		</section>, +, +		<section id="scheduling-annotation-support-async">, +			<title>The @Async Annotation</title>, +, +			<para>The @Async annotation can be provided on a method so that, +			invocation of that method will occur asynchronously. In other words,, +			the caller will return immediately upon invocation and the actual, +			execution of the method will occur in a task that has been submitted to, +			a Spring TaskExecutor. In the simplest case, the annotation may be, +			applied to a void-returning method.</para>, +, +			<programlisting language="java"><![CDATA[@Async, +void doSomething() {, +    // this will be executed asynchronously, +}]]></programlisting>, +, +			<para>Unlike the methods annotated with the @Scheduled annotation,, +			these methods can expect arguments, because they will be invoked, +			in the "normal" way by callers at runtime rather than from a, +			scheduled task being managed by the container. For example, the, +			following is a legitimate application of the @Async annotation., +			</para>, +			<programlisting language="java"><![CDATA[@Async, +void doSomething(String s) {, +    // this will be executed asynchronously, +}]]></programlisting>, +, +			<para>Even methods that return a value can be invoked asynchronously., +			However, such methods are required to have a Future typed return value., +			This still provides the benefit of asynchronous execution so that the, +			caller can perform other tasks prior to calling 'get()' on that Future., +			</para>, +			<programlisting language="java"><![CDATA[@Async, +Future<String> returnSomething(int i) {, +    // this will be executed asynchronously, +}]]></programlisting>, +		</section>, +, +		<section id="scheduling-annotation-support-namespace">, +			<title>The &lt;annotation-driven&gt; Element</title>, +, +			<para>To enable both @Scheduled and @Async annotations, simply, +			include the 'annotation-driven' element from the task namespace in, +			your configuration.</para>, +			<programlisting language="xml"><![CDATA[<task:annotation-driven executor="myExecutor" scheduler="myScheduler"/>, +, +<task:executor id="myExecutor" size="5"/>, +, +<task:scheduler id="myScheduler" size="10"/>}]]></programlisting>, +, +			<para>Notice that an executor reference is provided for handling, +			those tasks that correspond to methods with the @Async annotation,, +			and the scheduler reference is provided for managing those methods, +			annotated with @Scheduled.</para>, +		</section>, +	</section>, +]