[+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java, +	 * @return {@code true} if the DeferredResult has been set., +	 */, +	public boolean hasResult() {, +		return this.result != RESULT_NONE;, +	}, +, +	/**, +	 * @return the result or {@code null} if the result wasn't set; since the result can, +	 *         also be {@code null}, it is recommended to use {@link #hasResult()} first, +	 *         to check if there is a result prior to calling this method., +	 */, +	public Object getResult() {, +		return hasResult() ? this.result : null;, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java, +	 * @return {@code true} if the DeferredResult has been set., +	 */, +	public boolean hasResult() {, +		return this.result != RESULT_NONE;, +	}, +, +	/**, +	 * @return the result or {@code null} if the result wasn't set; since the result can, +	 *         also be {@code null}, it is recommended to use {@link #hasResult()} first, +	 *         to check if there is a result prior to calling this method., +	 */, +	public Object getResult() {, +		return hasResult() ? this.result : null;, +	}, +, +	/**, +++ b/spring-web/src/test/java/org/springframework/web/context/request/async/DeferredResultTests.java, +import static org.mockito.Mockito.*;, +	public void hasResult() {, +		DeferredResultHandler handler = mock(DeferredResultHandler.class);, +, +		DeferredResult<String> result = new DeferredResult<String>();, +		result.setResultHandler(handler);, +, +		assertFalse(result.hasResult());, +		assertNull(result.getResult());, +, +		result.setResult("hello");, +, +		assertEquals("hello", result.getResult());, +	}, +, +	@Test]