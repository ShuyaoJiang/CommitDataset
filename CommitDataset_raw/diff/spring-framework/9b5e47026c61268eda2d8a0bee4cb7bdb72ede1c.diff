[+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +					this.caches, this.metadata.method, this.args, this.target, this.metadata.targetClass,, +					result, applicationContext);, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +					this.caches, this.metadata.method, this.args, this.target, this.metadata.targetClass,, +					result, applicationContext);, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/ExpressionEvaluator.java, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.context.expression.BeanFactoryResolver;, +	 * @see #createEvaluationContext(Collection, Method, Object[], Object, Class, Object, BeanFactory), +			Method method, Object[] args, Object target, Class<?> targetClass, BeanFactory beanFactory) {, +		return createEvaluationContext(caches, method, args, target, targetClass, NO_RESULT, beanFactory);, +			Method method, Object[] args, Object target, Class<?> targetClass, Object result,, +			BeanFactory beanFactory) {, +		if (beanFactory != null) {, +			evaluationContext.setBeanResolver(new BeanFactoryResolver(beanFactory));, +		}, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +					this.caches, this.metadata.method, this.args, this.target, this.metadata.targetClass,, +					result, applicationContext);, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/ExpressionEvaluator.java, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.context.expression.BeanFactoryResolver;, +	 * @see #createEvaluationContext(Collection, Method, Object[], Object, Class, Object, BeanFactory), +			Method method, Object[] args, Object target, Class<?> targetClass, BeanFactory beanFactory) {, +		return createEvaluationContext(caches, method, args, target, targetClass, NO_RESULT, beanFactory);, +			Method method, Object[] args, Object target, Class<?> targetClass, Object result,, +			BeanFactory beanFactory) {, +		if (beanFactory != null) {, +			evaluationContext.setBeanResolver(new BeanFactoryResolver(beanFactory));, +		}, +++ b/spring-context/src/test/java/org/springframework/cache/config/EnableCachingIntegrationTests.java, +import org.junit.After;, + * Tests that represent real use cases with advanced configuration., + *, +	private ConfigurableApplicationContext context;, +, +	@After, +	public void closeContext() {, +		if (this.context != null) {, +			this.context.close();, +		}, +	}, +, +		this.context = new AnnotationConfigApplicationContext(FooConfig.class);, +		FooService service = this.context.getBean(FooService.class);, +		fooGetSimple(service);, +		this.context = new AnnotationConfigApplicationContext(FooConfigCglib.class);, +		FooService service = this.context.getBean(FooService.class);, +		fooGetSimple(service);, +	private void fooGetSimple(FooService service) {, +		Cache cache = getCache();, +	@Test, +	public void beanCondition() {, +		this.context = new AnnotationConfigApplicationContext(BeanConditionConfig.class);, +		Cache cache = getCache();, +		FooService service = context.getBean(FooService.class);, +, +		Object key = new Object();, +		service.getWithCondition(key);, +		assertCacheMiss(key, cache);, +	}, +, +	private Cache getCache() {, +		return this.context.getBean(CacheManager.class).getCache("testCache");, +	}, +, +	private interface FooService {, +		Object getSimple(Object key);, +, +		Object getWithCondition(Object key);, +, +		@Override, +		@Cacheable(condition = "@bar.enabled"), +		public Object getWithCondition(Object key) {, +			return counter.getAndIncrement();, +		}, +	}, +, +	@Configuration, +	@Import(FooConfig.class), +	@EnableCaching, +	static class BeanConditionConfig {, +, +		@Bean, +		public Bar bar() {, +			return new Bar(false);, +		}, +, +		static class Bar {, +			private final boolean enabled;, +, +			public Bar(boolean enabled) {, +				this.enabled = enabled;, +			}, +, +			public boolean isEnabled() {, +				return enabled;, +			}, +		}]