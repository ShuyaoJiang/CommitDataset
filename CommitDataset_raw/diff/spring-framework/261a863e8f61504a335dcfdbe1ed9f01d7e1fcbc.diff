[+++ b/spring-aspects/src/main/java/org/springframework/mock/staticmock/AbstractMethodMockingControl.aj, +				"Calls recorded, yet playback state never reached: Create expectations then call ", +						+ this.getClass().getSimpleName() + ".playback()");, +++ b/spring-aspects/src/main/java/org/springframework/mock/staticmock/AbstractMethodMockingControl.aj, +				"Calls recorded, yet playback state never reached: Create expectations then call ", +						+ this.getClass().getSimpleName() + ".playback()");, +++ b/spring-aspects/src/main/java/org/springframework/mock/staticmock/AnnotationDrivenStaticEntityMockingControl.aj, + * <p>Usage:, + * <li>In each test method, {@code AnnotationDrivenStaticEntityMockingControl}, + * recording-mode invocation being followed by an invocation of either the static, + * {@link #expectReturn(Object)} method or the static {@link #expectThrow(Throwable)}, + * method on {@code AnnotationDrivenStaticEntityMockingControl}., + * <li>Invoke the static {@link #playback()} method., + * <li>Call the code you wish to test that uses the static methods., + * <li>Verification will occur automatically., +++ b/spring-aspects/src/main/java/org/springframework/mock/staticmock/AbstractMethodMockingControl.aj, +				"Calls recorded, yet playback state never reached: Create expectations then call ", +						+ this.getClass().getSimpleName() + ".playback()");, +++ b/spring-aspects/src/main/java/org/springframework/mock/staticmock/AnnotationDrivenStaticEntityMockingControl.aj, + * <p>Usage:, + * <li>In each test method, {@code AnnotationDrivenStaticEntityMockingControl}, + * recording-mode invocation being followed by an invocation of either the static, + * {@link #expectReturn(Object)} method or the static {@link #expectThrow(Throwable)}, + * method on {@code AnnotationDrivenStaticEntityMockingControl}., + * <li>Invoke the static {@link #playback()} method., + * <li>Call the code you wish to test that uses the static methods., + * <li>Verification will occur automatically., +++ b/spring-aspects/src/test/java/org/springframework/mock/staticmock/AnnotationDrivenStaticEntityMockingControlTests.java, +import java.rmi.RemoteException;, +, +		AnnotationDrivenStaticEntityMockingControl.expectReturn(found);, +		AnnotationDrivenStaticEntityMockingControl.playback();, +		AnnotationDrivenStaticEntityMockingControl.expectThrow(new PersistenceException());, +		AnnotationDrivenStaticEntityMockingControl.playback();, +	public void reentrant() {, +		called(found, id);, +	private void called(Person found, long id) {, +	public void rejectUnexpectedCall() {, +		AnnotationDrivenStaticEntityMockingControl.playback();, +		AnnotationDrivenStaticEntityMockingControl.expectReturn(found);, +		AnnotationDrivenStaticEntityMockingControl.expectReturn(25);, +		AnnotationDrivenStaticEntityMockingControl.playback();, +	public void empty() {, +		// Test that verification check doesn't blow up if no replay() call happened., +		AnnotationDrivenStaticEntityMockingControl.playback();, +	 * Note: this test method currently does NOT actually verify that the mock, +	 * verification fails., +	// TODO Determine if it's possible for a mock verification failure to fail a test in, +	// JUnit 4+ if the test method itself throws an expected exception., +	@Test(expected = RemoteException.class), +	public void verificationFailsEvenWhenTestFailsInExpectedManner() throws Exception {, +		AnnotationDrivenStaticEntityMockingControl.playback();, +		// No calls in order to allow verification failure, +		throw new RemoteException();, +++ b/spring-aspects/src/main/java/org/springframework/mock/staticmock/AbstractMethodMockingControl.aj, +				"Calls recorded, yet playback state never reached: Create expectations then call ", +						+ this.getClass().getSimpleName() + ".playback()");, +++ b/spring-aspects/src/main/java/org/springframework/mock/staticmock/AnnotationDrivenStaticEntityMockingControl.aj, + * <p>Usage:, + * <li>In each test method, {@code AnnotationDrivenStaticEntityMockingControl}, + * recording-mode invocation being followed by an invocation of either the static, + * {@link #expectReturn(Object)} method or the static {@link #expectThrow(Throwable)}, + * method on {@code AnnotationDrivenStaticEntityMockingControl}., + * <li>Invoke the static {@link #playback()} method., + * <li>Call the code you wish to test that uses the static methods., + * <li>Verification will occur automatically., +++ b/spring-aspects/src/test/java/org/springframework/mock/staticmock/AnnotationDrivenStaticEntityMockingControlTests.java, +import java.rmi.RemoteException;, +, +		AnnotationDrivenStaticEntityMockingControl.expectReturn(found);, +		AnnotationDrivenStaticEntityMockingControl.playback();, +		AnnotationDrivenStaticEntityMockingControl.expectThrow(new PersistenceException());, +		AnnotationDrivenStaticEntityMockingControl.playback();, +	public void reentrant() {, +		called(found, id);, +	private void called(Person found, long id) {, +	public void rejectUnexpectedCall() {, +		AnnotationDrivenStaticEntityMockingControl.playback();, +		AnnotationDrivenStaticEntityMockingControl.expectReturn(found);, +		AnnotationDrivenStaticEntityMockingControl.expectReturn(25);, +		AnnotationDrivenStaticEntityMockingControl.playback();, +	public void empty() {, +		// Test that verification check doesn't blow up if no replay() call happened., +		AnnotationDrivenStaticEntityMockingControl.playback();, +	 * Note: this test method currently does NOT actually verify that the mock, +	 * verification fails., +	// TODO Determine if it's possible for a mock verification failure to fail a test in, +	// JUnit 4+ if the test method itself throws an expected exception., +	@Test(expected = RemoteException.class), +	public void verificationFailsEvenWhenTestFailsInExpectedManner() throws Exception {, +		AnnotationDrivenStaticEntityMockingControl.playback();, +		// No calls in order to allow verification failure, +		throw new RemoteException();, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/tags/EvalTagTests.java, +import java.util.Locale;, +import org.springframework.format.number.PercentFormatter;, +		PercentFormatter formatter = new PercentFormatter();, +		assertEquals(formatter.print(new BigDecimal(".25"), Locale.getDefault()),, +				((MockHttpServletResponse) context.getResponse()).getContentAsString());]