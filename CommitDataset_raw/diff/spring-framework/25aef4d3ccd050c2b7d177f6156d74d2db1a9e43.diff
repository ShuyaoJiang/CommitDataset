[+++ b/spring-web/src/main/java/org/springframework/web/server/ResponseStatusException.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.core.NestedExceptionUtils;, + * @author Juergen Hoeller, +	 * Constructor with a response status., +	 * @param status the HTTP status (required), +	 */, +	public ResponseStatusException(HttpStatus status) {, +		this(status, null, null);, +	}, +, +	/**, +	 * Constructor with a response status and a reason to add to the exception, +	 * @param status the HTTP status (required), +	 * @param reason the associated reason (optional), +	 * Constructor with a response status and a reason to add to the exception, +	 * message as explanation, as well as a nested exception., +	 * @param status the HTTP status (required), +	 * @param reason the associated reason (optional), +	 * @param cause a nested exception (optional), +		super(null, cause);, +		Assert.notNull(status, "HttpStatus is required");, +	 * The HTTP status that fits the exception (never {@code null})., +	 * The reason explaining the exception (potentially {@code null} or empty)., +	@Override, +	public String getMessage() {, +		String msg = "Response status " + this.status + (this.reason != null ? " with reason \"" + reason + "\"" : "");, +		return NestedExceptionUtils.buildMessage(msg, getCause());, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/server/ResponseStatusException.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.core.NestedExceptionUtils;, + * @author Juergen Hoeller, +	 * Constructor with a response status., +	 * @param status the HTTP status (required), +	 */, +	public ResponseStatusException(HttpStatus status) {, +		this(status, null, null);, +	}, +, +	/**, +	 * Constructor with a response status and a reason to add to the exception, +	 * @param status the HTTP status (required), +	 * @param reason the associated reason (optional), +	 * Constructor with a response status and a reason to add to the exception, +	 * message as explanation, as well as a nested exception., +	 * @param status the HTTP status (required), +	 * @param reason the associated reason (optional), +	 * @param cause a nested exception (optional), +		super(null, cause);, +		Assert.notNull(status, "HttpStatus is required");, +	 * The HTTP status that fits the exception (never {@code null})., +	 * The reason explaining the exception (potentially {@code null} or empty)., +	@Override, +	public String getMessage() {, +		String msg = "Response status " + this.status + (this.reason != null ? " with reason \"" + reason + "\"" : "");, +		return NestedExceptionUtils.buildMessage(msg, getCause());, +	}, +, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/DispatcherHandlerErrorTests.java, +import static org.junit.Assert.*;, +import static org.springframework.http.MediaType.*;, +					assertThat(error.getMessage(), is("Response status 404 with reason \"No matching handler\""));, +++ b/spring-web/src/main/java/org/springframework/web/server/ResponseStatusException.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.core.NestedExceptionUtils;, + * @author Juergen Hoeller, +	 * Constructor with a response status., +	 * @param status the HTTP status (required), +	 */, +	public ResponseStatusException(HttpStatus status) {, +		this(status, null, null);, +	}, +, +	/**, +	 * Constructor with a response status and a reason to add to the exception, +	 * @param status the HTTP status (required), +	 * @param reason the associated reason (optional), +	 * Constructor with a response status and a reason to add to the exception, +	 * message as explanation, as well as a nested exception., +	 * @param status the HTTP status (required), +	 * @param reason the associated reason (optional), +	 * @param cause a nested exception (optional), +		super(null, cause);, +		Assert.notNull(status, "HttpStatus is required");, +	 * The HTTP status that fits the exception (never {@code null})., +	 * The reason explaining the exception (potentially {@code null} or empty)., +	@Override, +	public String getMessage() {, +		String msg = "Response status " + this.status + (this.reason != null ? " with reason \"" + reason + "\"" : "");, +		return NestedExceptionUtils.buildMessage(msg, getCause());, +	}, +, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/DispatcherHandlerErrorTests.java, +import static org.junit.Assert.*;, +import static org.springframework.http.MediaType.*;, +					assertThat(error.getMessage(), is("Response status 404 with reason \"No matching handler\""));, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/InvocableHandlerMethodTests.java, +import static org.hamcrest.Matchers.*;]