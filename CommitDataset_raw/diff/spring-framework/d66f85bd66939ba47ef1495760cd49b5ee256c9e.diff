[+++ b/spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java, +	private <A extends Annotation> Collection<A> getAnnotations(AnnotatedElement ae, Class<A> annotationType) {, +		Collection<A> anns = new ArrayList<A>(2);, +		A ann = ae.getAnnotation(annotationType);, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/SpringCacheAnnotationParser.java, +	private <A extends Annotation> Collection<A> getAnnotations(AnnotatedElement ae, Class<A> annotationType) {, +		Collection<A> anns = new ArrayList<A>(2);, +		A ann = ae.getAnnotation(annotationType);, +++ b/spring-context/src/test/java/org/springframework/cache/annotation/AnnotationCacheOperationSourceTests.java, +import java.util.Arrays;, +import org.springframework.core.annotation.AliasFor;, +	public final ExpectedException exception = ExpectedException.none();, +, +	private Collection<CacheOperation> getOps(Class<?> target, String name, int expectedNumberOfOperations) {, +		assertEquals("Wrong number of operation(s) for '" + name + "'", expectedNumberOfOperations, result.size());, +	public void singularAnnotation() throws Exception {, +	public void multipleAnnotation() throws Exception {, +	public void caching() throws Exception {, +	public void singularStereotype() throws Exception {, +	public void multipleStereotypes() throws Exception {, +	public void customKeyGenerator() {, +	public void customKeyGeneratorInherited() {, +	public void keyAndKeyGeneratorCannotBeSetTogether() {, +		exception.expect(IllegalStateException.class);, +	public void customCacheManager() {, +	public void customCacheManagerInherited() {, +	public void customCacheResolver() {, +	public void customCacheResolverInherited() {, +	public void cacheResolverAndCacheManagerCannotBeSetTogether() {, +		exception.expect(IllegalStateException.class);, +		assertEquals("Wrong number of cache names", cacheNames.length, actual.getCacheNames().size());, +		Arrays.stream(cacheNames).forEach(, +			cacheName -> assertTrue("Cache '" + cacheName + "' not found in " + actual.getCacheNames(),, +				actual.getCacheNames().contains(cacheName)));, +, +		@Caching(cacheable = @Cacheable("test"), evict = @CacheEvict("test")), +, +	@Retention(RetentionPolicy.RUNTIME), +	@Target({ ElementType.METHOD, ElementType.TYPE }), +	@Cacheable, +	public @interface ComposedCacheable {, +, +		@AliasFor(annotation = Cacheable.class, attribute = "cacheNames"), +		String[] value() default {};, +, +		@AliasFor(annotation = Cacheable.class, attribute = "cacheNames"), +		String[] cacheNames() default {};, +, +		@AliasFor(annotation = Cacheable.class, attribute = "key"), +		String key() default "";, +	}, +]