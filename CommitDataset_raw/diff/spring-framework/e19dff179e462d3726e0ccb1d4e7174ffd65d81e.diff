[+++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/MessageSource.java, + * Copyright 2002-2017 the original author or authors., +	 * @param args an array of arguments that will be filled in for params within, +	 * @param defaultMessage a default message to return if the lookup fails, +	 * @param locale the locale in which to do the lookup, +	 * @param args an array of arguments that will be filled in for params within, +	 * @param locale the locale in which to do the lookup, +	 * {@code defaultMessage} property of the resolvable is {@code null} or not., +	 * @param resolvable the value object storing attributes required to resolve a message, +	 * @param locale the locale in which to do the lookup, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/MessageSource.java, + * Copyright 2002-2017 the original author or authors., +	 * @param args an array of arguments that will be filled in for params within, +	 * @param defaultMessage a default message to return if the lookup fails, +	 * @param locale the locale in which to do the lookup, +	 * @param args an array of arguments that will be filled in for params within, +	 * @param locale the locale in which to do the lookup, +	 * {@code defaultMessage} property of the resolvable is {@code null} or not., +	 * @param resolvable the value object storing attributes required to resolve a message, +	 * @param locale the locale in which to do the lookup, +++ b/spring-context/src/main/java/org/springframework/context/MessageSourceResolvable.java, + * Copyright 2002-2017 the original author or authors., +@FunctionalInterface, +	 * <p>The default implementation simply returns {@code null}., +	default Object[] getArguments() {, +		return null;, +	}, +	 * <p>The default implementation simply returns {@code null}., +	 * Note that the default message may be identical to the primary, +	 * message code ({@link #getCodes()}), which effectively enforces, +	 * {@link org.springframework.context.support.AbstractMessageSource#setUseCodeAsDefaultMessage}, +	 * for this particular message., +	default String getDefaultMessage() {, +		return null;, +	}, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/MessageSource.java, + * Copyright 2002-2017 the original author or authors., +	 * @param args an array of arguments that will be filled in for params within, +	 * @param defaultMessage a default message to return if the lookup fails, +	 * @param locale the locale in which to do the lookup, +	 * @param args an array of arguments that will be filled in for params within, +	 * @param locale the locale in which to do the lookup, +	 * {@code defaultMessage} property of the resolvable is {@code null} or not., +	 * @param resolvable the value object storing attributes required to resolve a message, +	 * @param locale the locale in which to do the lookup, +++ b/spring-context/src/main/java/org/springframework/context/MessageSourceResolvable.java, + * Copyright 2002-2017 the original author or authors., +@FunctionalInterface, +	 * <p>The default implementation simply returns {@code null}., +	default Object[] getArguments() {, +		return null;, +	}, +	 * <p>The default implementation simply returns {@code null}., +	 * Note that the default message may be identical to the primary, +	 * message code ({@link #getCodes()}), which effectively enforces, +	 * {@link org.springframework.context.support.AbstractMessageSource#setUseCodeAsDefaultMessage}, +	 * for this particular message., +	default String getDefaultMessage() {, +		return null;, +	}, +++ b/spring-context/src/main/java/org/springframework/context/support/MessageSourceSupport.java, + * Copyright 2002-2017 the original author or authors., +	private final Map<String, Map<Locale, MessageFormat>> messageFormatsPerMessage = new HashMap<>();, +	 * Set whether to always apply the {@code MessageFormat} rules,, +	 * parsing even messages without arguments., +		if (msg == null || (!isAlwaysUseMessageFormat() && ObjectUtils.isEmpty(args))) {, +					// Invalid message format - probably not intended for formatting,, +					// rather using a message structure with no arguments involved..., +					if (isAlwaysUseMessageFormat()) {, +					// Silently proceed with raw message if format not enforced..., +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheFactoryBean.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/context/MessageSource.java, + * Copyright 2002-2017 the original author or authors., +	 * @param args an array of arguments that will be filled in for params within, +	 * @param defaultMessage a default message to return if the lookup fails, +	 * @param locale the locale in which to do the lookup, +	 * @param args an array of arguments that will be filled in for params within, +	 * @param locale the locale in which to do the lookup, +	 * {@code defaultMessage} property of the resolvable is {@code null} or not., +	 * @param resolvable the value object storing attributes required to resolve a message, +	 * @param locale the locale in which to do the lookup, +++ b/spring-context/src/main/java/org/springframework/context/MessageSourceResolvable.java, + * Copyright 2002-2017 the original author or authors., +@FunctionalInterface, +	 * <p>The default implementation simply returns {@code null}., +	default Object[] getArguments() {, +		return null;, +	}, +	 * <p>The default implementation simply returns {@code null}., +	 * Note that the default message may be identical to the primary, +	 * message code ({@link #getCodes()}), which effectively enforces]