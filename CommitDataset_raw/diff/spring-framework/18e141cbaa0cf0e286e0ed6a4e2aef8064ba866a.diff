[+++ b/org.springframework.context.support/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +import java.util.Iterator;, +, +					//, +					// check usage of single cache, +					// very common case which allows for some optimization, +					// in exchange for code readability, +					//, +, +					if (caches.size() == 1) {, +						Cache cache = caches.iterator().next();, +, +						if (cache.containsKey(key)) {, +						} else {, +							cache.put(key, retVal);, +						}, +					}, +, +					//, +					// multi cache path, +					//, +					else {, +						// for each cache, +						boolean cacheHit = false;, +						, +						for (Iterator<Cache<?,?>> iterator = caches.iterator(); iterator.hasNext() && !cacheHit;) {, +							Cache cache = iterator.next();, +							if (cache.containsKey(key)){, +								retVal = cache.get(key);, +								cacheHit = true;, +							}, +						}, +						, +						if (!cacheHit) {, +							retVal = invocation.call();, +						}, +	, +						// update all caches (if needed), +						for (Cache cache : caches) {, +							cache.putIfAbsent(key, retVal);, +					// lazy key initialization, +					Object key = null;, +							if (key == null) {, +								key = context.generateKey();, +							}]