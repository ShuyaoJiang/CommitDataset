[+++ b/build.gradle, +		optional("org.apache.tiles:tiles-extras:3.0.1") {, +			exclude group: "org.slf4j", module: "jcl-over-slf4j", +		}, +++ b/build.gradle, +		optional("org.apache.tiles:tiles-extras:3.0.1") {, +			exclude group: "org.slf4j", module: "jcl-over-slf4j", +		}, +++ b/spring-webmvc-tiles3/src/main/java/org/springframework/web/servlet/view/tiles3/TilesConfigurer.java, + * Copyright 2002-2013 the original author or authors., +import org.apache.tiles.el.ScopeELResolver;, +import org.apache.tiles.extras.complete.CompleteAutoloadTilesContainerFactory;, +import org.apache.tiles.extras.complete.CompleteAutoloadTilesInitializer;, + * {@code ServletContextListener}, + * (e.g. {@link org.apache.tiles.extras.complete.CompleteAutoloadTilesListener}, + * for usage in {@code web.xml}., +				this.tilesInitializer = new SpringCompleteAutoloadTilesInitializer();, +				throw new IllegalStateException("tiles-extras 3.x not available", ex);, +	 * Default is {@link org.apache.tiles.definition.UnresolvingLocaleDefinitionsFactory},, +	 * Set the {@link org.apache.tiles.preparer.factory.PreparerFactory} implementation to use., +	 * Default is {@link org.apache.tiles.preparer.factory.BasicPreparerFactory}, creating, +	 * @see org.apache.tiles.impl.mgmt.CachingTilesContainer, +		ApplicationContext preliminaryContext = new SpringWildcardServletTilesApplicationContext(this.servletContext);, +					((org.apache.tiles.request.ApplicationContextAware) factory).setApplicationContext(applicationContext);, +	private class SpringCompleteAutoloadTilesInitializer extends CompleteAutoloadTilesInitializer {, +, +		@Override, +		protected AbstractTilesContainerFactory createContainerFactory(ApplicationContext context) {, +			return new SpringCompleteAutoloadTilesContainerFactory();, +		}, +	}, +, +	private class SpringCompleteAutoloadTilesContainerFactory extends CompleteAutoloadTilesContainerFactory {, +, +		@Override, +		protected AttributeEvaluatorFactory createAttributeEvaluatorFactory(, +				ApplicationContext applicationContext, LocaleResolver resolver) {, +			return new BasicAttributeEvaluatorFactory(new DirectAttributeEvaluator());, +		}, +, +		@Override, +		public TilesContainer createContainer(ApplicationContext applicationContext) {, +			CachingTilesContainer cachingContainer = (CachingTilesContainer) super.createContainer(applicationContext);, +			BasicTilesContainer tilesContainer = (BasicTilesContainer) cachingContainer.getWrappedContainer();, +			BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(tilesContainer.getDefinitionsFactory());, +			if (bw.isWritableProperty("localeResolver")) {, +				bw.setPropertyValue("localeResolver", new SpringLocaleResolver());, +			}, +			return tilesContainer;, +		}, +	}, +, +			add(new ScopeELResolver());]