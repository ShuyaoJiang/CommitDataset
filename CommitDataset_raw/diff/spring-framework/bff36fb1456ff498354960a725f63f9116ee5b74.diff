[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, + * Copyright 2002-2013 the original author or authors., +	MISSING_CHARACTER(Kind.ERROR,1069,"missing expected character ''{0}''"),, +	LEFT_OPERAND_PROBLEM(Kind.ERROR,1070, "Problem parsing left operand");, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, + * Copyright 2002-2013 the original author or authors., +	MISSING_CHARACTER(Kind.ERROR,1069,"missing expected character ''{0}''"),, +	LEFT_OPERAND_PROBLEM(Kind.ERROR,1070, "Problem parsing left operand");, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java, + * Copyright 2002-2013 the original author or authors., + * @author Phillip Webb, +			checkOperands(t,expr,rhExpr);, +			checkOperands(t,expr,rhExpr);, +			checkOperands(t,expr,rhExpr);, +			checkOperands(t,expr,rhExpr);, +	private void checkOperands(Token token, SpelNodeImpl left, SpelNodeImpl right) {, +		checkLeftOperand(token, left);, +		checkRightOperand(token, right);, +	}, +, +	private void checkLeftOperand(Token token, SpelNodeImpl operandExpression) {, +		if (operandExpression==null) {, +			raiseInternalException(token.startpos,SpelMessage.LEFT_OPERAND_PROBLEM);, +		}, +	}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, + * Copyright 2002-2013 the original author or authors., +	MISSING_CHARACTER(Kind.ERROR,1069,"missing expected character ''{0}''"),, +	LEFT_OPERAND_PROBLEM(Kind.ERROR,1070, "Problem parsing left operand");, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java, + * Copyright 2002-2013 the original author or authors., + * @author Phillip Webb, +			checkOperands(t,expr,rhExpr);, +			checkOperands(t,expr,rhExpr);, +			checkOperands(t,expr,rhExpr);, +			checkOperands(t,expr,rhExpr);, +	private void checkOperands(Token token, SpelNodeImpl left, SpelNodeImpl right) {, +		checkLeftOperand(token, left);, +		checkRightOperand(token, right);, +	}, +, +	private void checkLeftOperand(Token token, SpelNodeImpl operandExpression) {, +		if (operandExpression==null) {, +			raiseInternalException(token.startpos,SpelMessage.LEFT_OPERAND_PROBLEM);, +		}, +	}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java, + * Copyright 2002-2013 the original author or authors., + * @author Phillip Webb, +					if (!isTwoCharToken(TokenKind.SYMBOLIC_AND)) {, +							throw new InternalParseException(new SpelParseException(, +									expressionString, pos,, +									SpelMessage.MISSING_CHARACTER, "&"));, +					pushPairToken(TokenKind.SYMBOLIC_AND);, +					if (!isTwoCharToken(TokenKind.SYMBOLIC_OR)) {, +						throw new InternalParseException(new SpelParseException(, +								expressionString, pos,, +								SpelMessage.MISSING_CHARACTER, "|"));, +					pushPairToken(TokenKind.SYMBOLIC_OR);, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/SpelMessage.java, + * Copyright 2002-2013 the original author or authors., +	MISSING_CHARACTER(Kind.ERROR,1069,"missing expected character ''{0}''"),, +	LEFT_OPERAND_PROBLEM(Kind.ERROR,1070, "Problem parsing left operand");, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java, + * Copyright 2002-2013 the original author or authors., + * @author Phillip Webb, +			checkOperands(t,expr,rhExpr);, +			checkOperands(t,expr,rhExpr);, +			checkOperands(t,expr,rhExpr);, +			checkOperands(t,expr,rhExpr);, +	private void checkOperands(Token token, SpelNodeImpl left, SpelNodeImpl right) {, +		checkLeftOperand(token, left);, +		checkRightOperand(token, right);, +	}, +, +	private void checkLeftOperand(Token token, SpelNodeImpl operandExpression) {, +		if (operandExpression==null) {, +			raiseInternalException(token.startpos,SpelMessage.LEFT_OPERAND_PROBLEM);, +		}, +	}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/Tokenizer.java, + * Copyright 2002-2013 the original author or authors., + * @author Phillip Webb, +					if (!isTwoCharToken(TokenKind.SYMBOLIC_AND)) {, +							throw new InternalParseException(new SpelParseException(, +									expressionString, pos,, +									SpelMessage.MISSING_CHARACTER, "&"));, +					pushPairToken(TokenKind.SYMBOLIC_AND);, +					if (!isTwoCharToken(TokenKind.SYMBOLIC_OR)) {, +						throw new InternalParseException(new SpelParseException(, +								expressionString, pos,, +								SpelMessage.MISSING_CHARACTER, "|"));, +					pushPairToken(TokenKind.SYMBOLIC_OR);, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;]