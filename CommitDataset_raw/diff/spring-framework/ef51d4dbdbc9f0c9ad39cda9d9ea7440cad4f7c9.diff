[+++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.stereotype.Component;, +	public void postProcessorWorksWithComposedConfigurationWithAttributeOverrideForBasePackageUsingReflection() {, +				ComposedConfigurationWithAttributeOverrideForBasePackage.class);, +	public void postProcessorWorksWithComposedConfigurationWithAttributeOverrideForBasePackageUsingAsm() {, +				ComposedConfigurationWithAttributeOverrideForBasePackage.class.getName());, +	public void postProcessorWorksWithComposedConfigurationWithAttributeOverrideForExcludeFilterUsingReflection() {, +		RootBeanDefinition beanDefinition = new RootBeanDefinition(, +				ComposedConfigurationWithAttributeOverrideForExcludeFilter.class);, +		assertSupportForComposedAnnotationWithExclude(beanDefinition);, +	}, +, +	@Test, +	public void postProcessorWorksWithComposedConfigurationWithAttributeOverrideForExcludeFilterUsingAsm() {, +		RootBeanDefinition beanDefinition = new RootBeanDefinition(, +				ComposedConfigurationWithAttributeOverrideForExcludeFilter.class.getName());, +		assertSupportForComposedAnnotationWithExclude(beanDefinition);, +	}, +, +	@Test, +	private void assertSupportForComposedAnnotation(RootBeanDefinition beanDefinition) {, +		beanFactory.registerBeanDefinition("config", beanDefinition);, +		ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor();, +		pp.setEnvironment(new StandardEnvironment());, +		pp.postProcessBeanFactory(beanFactory);, +		SimpleComponent simpleComponent = beanFactory.getBean(SimpleComponent.class);, +		assertNotNull(simpleComponent);, +	}, +, +	private void assertSupportForComposedAnnotationWithExclude(RootBeanDefinition beanDefinition) {, +		beanFactory.registerBeanDefinition("config", beanDefinition);, +		ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor();, +		pp.setEnvironment(new StandardEnvironment());, +		pp.postProcessBeanFactory(beanFactory);, +		try {, +			beanFactory.getBean(SimpleComponent.class);, +			fail("Should have thrown NoSuchBeanDefinitionException");, +		}, +		catch (NoSuchBeanDefinitionException ex) {, +			// expected, +		}, +	}, +, +, +		ComponentScan.Filter[] excludeFilters() default {};, +	public static class ComposedConfigurationWithAttributeOverrideForBasePackage {, +	}, +, +	@ComposedConfigurationWithAttributeOverrides(basePackages = "org.springframework.context.annotation.componentscan.simple",, +			excludeFilters = @ComponentScan.Filter(Component.class)), +	public static class ComposedConfigurationWithAttributeOverrideForExcludeFilter {, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.stereotype.Component;, +	public void postProcessorWorksWithComposedConfigurationWithAttributeOverrideForBasePackageUsingReflection() {, +				ComposedConfigurationWithAttributeOverrideForBasePackage.class);, +	public void postProcessorWorksWithComposedConfigurationWithAttributeOverrideForBasePackageUsingAsm() {, +				ComposedConfigurationWithAttributeOverrideForBasePackage.class.getName());, +	public void postProcessorWorksWithComposedConfigurationWithAttributeOverrideForExcludeFilterUsingReflection() {, +		RootBeanDefinition beanDefinition = new RootBeanDefinition(, +				ComposedConfigurationWithAttributeOverrideForExcludeFilter.class);, +		assertSupportForComposedAnnotationWithExclude(beanDefinition);, +	}, +, +	@Test, +	public void postProcessorWorksWithComposedConfigurationWithAttributeOverrideForExcludeFilterUsingAsm() {, +		RootBeanDefinition beanDefinition = new RootBeanDefinition(, +				ComposedConfigurationWithAttributeOverrideForExcludeFilter.class.getName());, +		assertSupportForComposedAnnotationWithExclude(beanDefinition);, +	}, +, +	@Test, +	private void assertSupportForComposedAnnotation(RootBeanDefinition beanDefinition) {, +		beanFactory.registerBeanDefinition("config", beanDefinition);, +		ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor();, +		pp.setEnvironment(new StandardEnvironment());, +		pp.postProcessBeanFactory(beanFactory);, +		SimpleComponent simpleComponent = beanFactory.getBean(SimpleComponent.class);, +		assertNotNull(simpleComponent);, +	}, +, +	private void assertSupportForComposedAnnotationWithExclude(RootBeanDefinition beanDefinition) {, +		beanFactory.registerBeanDefinition("config", beanDefinition);, +		ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor();, +		pp.setEnvironment(new StandardEnvironment());, +		pp.postProcessBeanFactory(beanFactory);, +		try {, +			beanFactory.getBean(SimpleComponent.class);, +			fail("Should have thrown NoSuchBeanDefinitionException");, +		}, +		catch (NoSuchBeanDefinitionException ex) {, +			// expected, +		}, +	}, +, +, +		ComponentScan.Filter[] excludeFilters() default {};, +	public static class ComposedConfigurationWithAttributeOverrideForBasePackage {, +	}]