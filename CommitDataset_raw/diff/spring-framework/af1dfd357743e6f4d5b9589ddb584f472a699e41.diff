[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/HandlerMapping.java, +	 * Name of the {@link HttpServletRequest} attribute that contains the set of producible MediaTypes , +	 * applicable to the mapped handler. , +	 * <p>Note: This attribute is not required to be supported by all HandlerMapping implementations. , +	 * Handlers should not necessarily expect this request attribute to be present in all scenarios., +	 */, +	String PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE = HandlerMapping.class.getName() + ".producibleMediaTypes";, +, +	/**, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/HandlerMapping.java, +	 * Name of the {@link HttpServletRequest} attribute that contains the set of producible MediaTypes , +	 * applicable to the mapped handler. , +	 * <p>Note: This attribute is not required to be supported by all HandlerMapping implementations. , +	 * Handlers should not necessarily expect this request attribute to be present in all scenarios., +	 */, +	String PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE = HandlerMapping.class.getName() + ".producibleMediaTypes";, +, +	/**, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +, +	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {, +		super.handleMatch(info, lookupPath, request);, +, +		String pattern = info.getPatterns().iterator().next();, +	, +		Set<MediaType> mediaTypes = info.getProduces().getMediaTypes();, +		if (mediaTypes.size() > 1 || !MediaType.ALL.equals(mediaTypes.iterator().next())) {, +			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes);, +		}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/HandlerMapping.java, +	 * Name of the {@link HttpServletRequest} attribute that contains the set of producible MediaTypes , +	 * applicable to the mapped handler. , +	 * <p>Note: This attribute is not required to be supported by all HandlerMapping implementations. , +	 * Handlers should not necessarily expect this request attribute to be present in all scenarios., +	 */, +	String PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE = HandlerMapping.class.getName() + ".producibleMediaTypes";, +, +	/**, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +, +	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {, +		super.handleMatch(info, lookupPath, request);, +, +		String pattern = info.getPatterns().iterator().next();, +	, +		Set<MediaType> mediaTypes = info.getProduces().getMediaTypes();, +		if (mediaTypes.size() > 1 || !MediaType.ALL.equals(mediaTypes.iterator().next())) {, +			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes);, +		}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/AbstractMessageConverterMethodProcessor.java, +, +import org.springframework.util.CollectionUtils;, +import org.springframework.web.servlet.HandlerMapping;, +		HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class);, +		return new ServletServerHttpResponse(response);, +	}, +, +	/**, +	 * Returns the media types that can be produced:, +	 * <ul>, +	 * 	<li>The set of producible media types specified in the request mappings, or, +	 * 	<li>The set of supported media types by all configured message converters, or, +	 * 	<li>{@link MediaType#ALL}, +	 */, +	@SuppressWarnings("unchecked"), +	protected Set<MediaType> getProducibleMediaTypes(NativeWebRequest webRequest) {, +		HttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class);, +		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);, +		if (!CollectionUtils.isEmpty(mediaTypes)) {, +			return mediaTypes;, +		}, +		else if (!allSupportedMediaTypes.isEmpty()) {, +			return new HashSet<MediaType>(allSupportedMediaTypes);, +		}, +		else {, +			return Collections.singleton(MediaType.ALL);, +		}, +			, +												  HttpOutputMessage outputMessage,, +												  Set<MediaType> producibleMediaTypes), +		for (MediaType acceptableMediaType : getAcceptableMediaTypes(inputMessage)) {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/HandlerMapping.java, +	 * Name of the {@link HttpServletRequest} attribute that contains the set of producible MediaTypes , +	 * applicable to the mapped handler. , +	 * <p>Note: This attribute is not required to be supported by all HandlerMapping implementations. , +	 * Handlers should not necessarily expect this request attribute to be present in all scenarios., +	 */, +	String PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE = HandlerMapping.class.getName() + ".producibleMediaTypes";, +, +	/**, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +, +	protected void handleMatch(RequestMappingInfo info, String lookupPath, HttpServletRequest request) {, +		super.handleMatch(info, lookupPath, request);, +, +		String pattern = info.getPatterns().iterator().next();, +	, +		Set<MediaType> mediaTypes = info.getProduces().getMediaTypes();, +		if (mediaTypes.size() > 1 || !MediaType.ALL.equals(mediaTypes.iterator().next())) {, +			request.setAttribute(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, mediaTypes);]