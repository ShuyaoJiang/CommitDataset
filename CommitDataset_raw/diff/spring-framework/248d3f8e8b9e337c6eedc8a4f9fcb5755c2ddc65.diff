[+++ b/spring-aop/src/main/java/org/springframework/aop/support/ControlFlowPointcut.java, +import java.util.concurrent.atomic.AtomicInteger;, +	private final AtomicInteger evaluations = new AtomicInteger(0);, +		this.evaluations.incrementAndGet();, +		return this.evaluations.get();, +++ b/spring-aop/src/main/java/org/springframework/aop/support/ControlFlowPointcut.java, +import java.util.concurrent.atomic.AtomicInteger;, +	private final AtomicInteger evaluations = new AtomicInteger(0);, +		this.evaluations.incrementAndGet();, +		return this.evaluations.get();, +++ b/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java, +import java.util.concurrent.atomic.AtomicInteger;, +		private final AtomicInteger count = new AtomicInteger(0);, +			if (this.count.get() == 0) {, +			if (task.hasOption(TaskOption.SKIP_IF_EMPTY) && this.count.get() == 0) {, +						Segment.this.count.incrementAndGet();, +			if (this.count.get() == 0) {, +				this.count.set(0);, +			boolean needsResize = (this.count.get() > 0 && this.count.get() >= this.resizeThreshold);, +					int countAfterRestructure = this.count.get();, +					this.count.set(Math.max(countAfterRestructure, 0));, +			return this.count.get();, +++ b/spring-aop/src/main/java/org/springframework/aop/support/ControlFlowPointcut.java, +import java.util.concurrent.atomic.AtomicInteger;, +	private final AtomicInteger evaluations = new AtomicInteger(0);, +		this.evaluations.incrementAndGet();, +		return this.evaluations.get();, +++ b/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java, +import java.util.concurrent.atomic.AtomicInteger;, +		private final AtomicInteger count = new AtomicInteger(0);, +			if (this.count.get() == 0) {, +			if (task.hasOption(TaskOption.SKIP_IF_EMPTY) && this.count.get() == 0) {, +						Segment.this.count.incrementAndGet();, +			if (this.count.get() == 0) {, +				this.count.set(0);, +			boolean needsResize = (this.count.get() > 0 && this.count.get() >= this.resizeThreshold);, +					int countAfterRestructure = this.count.get();, +					this.count.set(Math.max(countAfterRestructure, 0));, +			return this.count.get();, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/SpelExpression.java, +import java.util.concurrent.atomic.AtomicInteger;, +, +	private final AtomicInteger interpretedCount = new AtomicInteger(0);, +					this.interpretedCount.set(0);, +					this.interpretedCount.set(0);, +					this.interpretedCount.set(0);, +					this.interpretedCount.set(0);, +					this.interpretedCount.set(0);, +					this.interpretedCount.set(0);, +					this.interpretedCount.set(0);, +					this.interpretedCount.set(0);, +		this.interpretedCount.incrementAndGet();, +				if (this.interpretedCount.get() > 1) {, +				if (this.interpretedCount.get() > INTERPRETED_COUNT_THRESHOLD) {, +		this.interpretedCount.set(0);]