[+++ b/spring-web/src/main/java/org/springframework/web/filter/reactive/ForwardedHeaderFilter.java, +	static final Set<String> FORWARDED_HEADER_NAMES = new LinkedHashSet<>(5);, +		ServerHttpRequest request = exchange.getRequest();, +		if (!hasForwardedHeaders(request)) {, +			mutatedExchange = exchange.mutate().request(this::removeForwardedHeaders).build();, +			mutatedExchange = exchange.mutate(), +					.request(builder -> {, +						URI uri = UriComponentsBuilder.fromHttpRequest(request).build().toUri();, +						String prefix = getForwardedPrefix(request);, +					}), +					.build();, +	private boolean hasForwardedHeaders(ServerHttpRequest request) {, +		}, +		return false;, +	}, +	private static String getForwardedPrefix(ServerHttpRequest request) {, +		HttpHeaders headers = request.getHeaders();, +			int endIndex = prefix.length();, +			while (endIndex > 1 && prefix.charAt(endIndex - 1) == '/') {, +				endIndex--;, +			};, +			prefix = endIndex != prefix.length() ? prefix.substring(0, endIndex) : prefix;, +	private ServerHttpRequest.Builder removeForwardedHeaders(ServerHttpRequest.Builder builder) {, +		return builder.headers(map -> FORWARDED_HEADER_NAMES.forEach(map::remove));, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/filter/reactive/ForwardedHeaderFilter.java, +	static final Set<String> FORWARDED_HEADER_NAMES = new LinkedHashSet<>(5);, +		ServerHttpRequest request = exchange.getRequest();, +		if (!hasForwardedHeaders(request)) {, +			mutatedExchange = exchange.mutate().request(this::removeForwardedHeaders).build();, +			mutatedExchange = exchange.mutate(), +					.request(builder -> {, +						URI uri = UriComponentsBuilder.fromHttpRequest(request).build().toUri();, +						String prefix = getForwardedPrefix(request);, +					}), +					.build();, +	private boolean hasForwardedHeaders(ServerHttpRequest request) {, +		}, +		return false;, +	}, +	private static String getForwardedPrefix(ServerHttpRequest request) {, +		HttpHeaders headers = request.getHeaders();, +			int endIndex = prefix.length();, +			while (endIndex > 1 && prefix.charAt(endIndex - 1) == '/') {, +				endIndex--;, +			};, +			prefix = endIndex != prefix.length() ? prefix.substring(0, endIndex) : prefix;, +	private ServerHttpRequest.Builder removeForwardedHeaders(ServerHttpRequest.Builder builder) {, +		return builder.headers(map -> FORWARDED_HEADER_NAMES.forEach(map::remove));, +	}, +, +++ b/spring-web/src/test/java/org/springframework/web/filter/reactive/ForwardedHeaderFilterTests.java, +import org.springframework.http.server.reactive.ServerHttpRequest;, +import org.springframework.mock.http.server.reactive.test.MockServerHttpRequest;, + * Unit tests for {@link ForwardedHeaderFilter}., + * @author Rossen Stoyanchev, +		HttpHeaders headers = new HttpHeaders();, +		headers.add("Forwarded", "for=192.0.2.60;proto=http;by=203.0.113.43");, +		headers.add("X-Forwarded-Host", "example.com");, +		headers.add("X-Forwarded-Port", "8080");, +		headers.add("X-Forwarded-Proto", "http");, +		headers.add("X-Forwarded-Prefix", "prefix");, +		headers.add("X-Forwarded-Ssl", "on");, +		this.filter.filter(getExchange(headers), this.filterChain).block(Duration.ZERO);, +, +		this.filterChain.assertForwardedHeadersRemoved();, +	public void xForwardedHeaders() throws Exception {, +		HttpHeaders headers = new HttpHeaders();, +		headers.add("X-Forwarded-Host", "84.198.58.199");, +		headers.add("X-Forwarded-Port", "443");, +		headers.add("X-Forwarded-Proto", "https");, +		headers.add("foo", "bar");, +		this.filter.filter(getExchange(headers), this.filterChain).block(Duration.ZERO);, +		assertEquals(new URI("https://84.198.58.199/path"), this.filterChain.uri);, +	public void forwardedHeader() throws Exception {, +		HttpHeaders headers = new HttpHeaders();, +		headers.add("Forwarded", "host=84.198.58.199;proto=https");, +		this.filter.filter(getExchange(headers), this.filterChain).block(Duration.ZERO);, +		assertEquals(new URI("https://84.198.58.199/path"), this.filterChain.uri);, +	public void xForwardedPrefix() throws Exception {, +		HttpHeaders headers = new HttpHeaders();, +		headers.add("X-Forwarded-Prefix", "/prefix");, +		this.filter.filter(getExchange(headers), this.filterChain).block(Duration.ZERO);, +		assertEquals(new URI("http://example.com/prefix/path"), this.filterChain.uri);, +		assertEquals("/prefix/path", this.filterChain.requestPathValue);, +	public void xForwardedPrefixTrailingSlash() throws Exception {, +		HttpHeaders headers = new HttpHeaders();, +		headers.add("X-Forwarded-Prefix", "/prefix////");, +		this.filter.filter(getExchange(headers), this.filterChain).block(Duration.ZERO);, +		assertEquals(new URI("http://example.com/prefix/path"), this.filterChain.uri);, +		assertEquals("/prefix/path", this.filterChain.requestPathValue);, +	private MockServerWebExchange getExchange(HttpHeaders headers) {, +		MockServerHttpRequest request = MockServerHttpRequest.get(BASE_URL).headers(headers).build();, +		return MockServerWebExchange.from(request);, +		@Nullable String requestPathValue;, +, +		public String getHeader(String name) {, +			assertNotNull(this.headers);, +			return this.headers.getFirst(name);]