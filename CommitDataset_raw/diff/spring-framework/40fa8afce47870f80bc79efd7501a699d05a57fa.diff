[+++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/handler/SimplePortletHandlerAdapter.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.web.portlet.util.PortletUtils;, +			// roughly equivalent to Portlet 2.0 GenericPortlet, +			PortletUtils.serveResource(request, response, this.portletContext);, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/handler/SimplePortletHandlerAdapter.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.web.portlet.util.PortletUtils;, +			// roughly equivalent to Portlet 2.0 GenericPortlet, +			PortletUtils.serveResource(request, response, this.portletContext);, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/SimpleControllerHandlerAdapter.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.web.portlet.util.PortletUtils;, +			PortletUtils.serveResource(request, response, this.portletContext);, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/handler/SimplePortletHandlerAdapter.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.web.portlet.util.PortletUtils;, +			// roughly equivalent to Portlet 2.0 GenericPortlet, +			PortletUtils.serveResource(request, response, this.portletContext);, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/SimpleControllerHandlerAdapter.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.web.portlet.util.PortletUtils;, +			PortletUtils.serveResource(request, response, this.portletContext);, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/util/PortletUtils.java, +import java.io.IOException;, +import javax.portlet.PortletException;, +import javax.portlet.PortletRequestDispatcher;, +import javax.portlet.ResourceRequest;, +import javax.portlet.ResourceResponse;, +import org.springframework.util.StringUtils;, +			response.setRenderParameters(new HashMap<String, String[]>(0));, +	/**, +	 * Serve the resource as specified in the given request to the given response,, +	 * using the PortletContext's request dispatcher., +	 * <p>This is roughly equivalent to Portlet 2.0 GenericPortlet., +	 * @param request the current resource request, +	 * @param response the current resource response, +	 * @param context the current Portlet's PortletContext, +	 * @throws PortletException propagated from Portlet API's forward method, +	 * @throws IOException propagated from Portlet API's forward method, +	 */, +	public static void serveResource(ResourceRequest request, ResourceResponse response, PortletContext context), +			throws PortletException, IOException {, +, +		String id = request.getResourceID();, +		if (id != null) {, +			if (!PortletUtils.isProtectedResource(id)) {, +				PortletRequestDispatcher rd = context.getRequestDispatcher(id);, +				if (rd != null) {, +					rd.forward(request, response);, +					return;, +				}, +			}, +			response.setProperty(ResourceResponse.HTTP_STATUS_CODE, "404");, +		}, +	}, +, +	/**, +	 * Check whether the specified path indicates a resource in the protected, +	 * WEB-INF or META-INF directories., +	 * @param path the path to check, +	 */, +	private static boolean isProtectedResource(String path) {, +		return (StringUtils.startsWithIgnoreCase(path, "/WEB-INF") ||, +				StringUtils.startsWithIgnoreCase(path, "/META-INF"));, +	}, +, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/handler/SimplePortletHandlerAdapter.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.web.portlet.util.PortletUtils;, +			// roughly equivalent to Portlet 2.0 GenericPortlet, +			PortletUtils.serveResource(request, response, this.portletContext);, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/SimpleControllerHandlerAdapter.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.web.portlet.util.PortletUtils;, +			PortletUtils.serveResource(request, response, this.portletContext);, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/util/PortletUtils.java, +import java.io.IOException;, +import javax.portlet.PortletException;, +import javax.portlet.PortletRequestDispatcher;, +import javax.portlet.ResourceRequest;, +import javax.portlet.ResourceResponse;, +import org.springframework.util.StringUtils;, +			response.setRenderParameters(new HashMap<String, String[]>(0));, +	/**, +	 * Serve the resource as specified in the given request to the given response,, +	 * using the PortletContext's request dispatcher., +	 * <p>This is roughly equivalent to Portlet 2.0 GenericPortlet., +	 * @param request the current resource request, +	 * @param response the current resource response, +	 * @param context the current Portlet's PortletContext, +	 * @throws PortletException propagated from Portlet API's forward method, +	 * @throws IOException propagated from Portlet API's forward method, +	 */, +	public static void serveResource(ResourceRequest request, ResourceResponse response, PortletContext context), +			throws PortletException, IOException {, +, +		String id = request.getResourceID();, +		if (id != null) {, +			if (!PortletUtils.isProtectedResource(id)) {]