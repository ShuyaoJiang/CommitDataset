[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +			int patternVariableCount = StringUtils.countOccurrencesOf(mappedPattern, "{");, +			, +			if ( (variables == null || patternVariableCount != variables.size())  , +					&& pathMatcher.match(mappedPattern, lookupPath)) {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +			int patternVariableCount = StringUtils.countOccurrencesOf(mappedPattern, "{");, +			, +			if ( (variables == null || patternVariableCount != variables.size())  , +					&& pathMatcher.match(mappedPattern, lookupPath)) {, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/UriTemplateServletAnnotationControllerTests.java, +	/*, +	 * See SPR-6978, +	 */, +	@Test, +	public void doIt() throws Exception {, +		initServlet(Spr6978Controller.class);, +		, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/foo/100");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("loadEntity:foo:100", response.getContentAsString());, +, +		request = new MockHttpServletRequest("POST", "/foo/100");, +		response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("publish:foo:100", response.getContentAsString());, +, +		request = new MockHttpServletRequest("GET", "/module/100");, +		response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("loadModule:100", response.getContentAsString());, +, +		request = new MockHttpServletRequest("POST", "/module/100");, +		response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("publish:module:100", response.getContentAsString());, +, +	}, +, +, +	@Controller, +	public static class Spr6978Controller {, +, +		@RequestMapping(value = "/{type}/{id}", method = RequestMethod.GET), +		public void loadEntity(@PathVariable final String type, @PathVariable final long id, Writer writer), +				throws IOException {, +			writer.write("loadEntity:" + type + ":" + id);, +		}, +, +		@RequestMapping(value = "/module/{id}", method = RequestMethod.GET), +		public void loadModule(@PathVariable final long id, Writer writer) throws IOException {, +			writer.write("loadModule:" + id);, +		}, +, +		@RequestMapping(value = "/{type}/{id}", method = RequestMethod.POST), +		public void publish(@PathVariable final String type, @PathVariable final long id, Writer writer), +				throws IOException {, +			writer.write("publish:" + type + ":" + id);, +		}, +	}, +]