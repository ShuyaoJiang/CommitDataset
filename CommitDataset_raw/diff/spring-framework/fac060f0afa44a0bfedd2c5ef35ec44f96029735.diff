[+++ b/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java, +/*, + * Copyright 2002-2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.util;, +, +import java.lang.ref.ReferenceQueue;, +import java.lang.ref.SoftReference;, +import java.lang.ref.WeakReference;, +import java.lang.reflect.Array;, +import java.util.AbstractMap;, +import java.util.AbstractSet;, +import java.util.Collections;, +import java.util.EnumSet;, +import java.util.HashSet;, +import java.util.Iterator;, +import java.util.Map;, +import java.util.NoSuchElementException;, +import java.util.Set;, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.concurrent.ConcurrentMap;, +import java.util.concurrent.locks.ReentrantLock;, +, +/**, + * A {@link ConcurrentHashMap} that uses {@link ReferenceType#SOFT soft} or, + * {@link ReferenceType#WEAK weak} references for both {@code keys} and {@code values}., + *, + * <p>This class can be used as an alternative to, + * {@code Collections.synchronizedMap(new WeakHashMap<K, Reference<V>>())} in order to, + * support better performance when accessed concurrently. This implementation follows the, + * same design constraints as {@link ConcurrentHashMap} with the exception that, + * {@code null} values and {@code null} keys are supported., + *, + * <p><b>NOTE:</b> The use of references means that there is no guarantee that items, + * placed into the map will be subsequently available. The garbage collector may discard, + * references at any time, so it may appear that a unknown thread is silently removing, + * entries., + *, + * <p>If not explicitly specified this implementation will use, + * {@link SoftReference soft entry references}., + *, + * @param <K> The key type, + * @param <V> The value type, + * @author Phillip Webb, + * @since 3.2, + */, +public class ConcurrentReferenceHashMap<K, V> extends AbstractMap<K, V> implements, +		ConcurrentMap<K, V> {, +, +	private static final int DEFAULT_INITIAL_CAPACITY = 16;, +, +	private static final int DEFAULT_CONCURRENCY_LEVEL = 16;, +, +	private static final float DEFAULT_LOAD_FACTOR = 0.75f;, +, +	private static final ReferenceType DEFAULT_REFERENCE_TYPE = ReferenceType.SOFT;, +, +	private static final int MAXIMUM_CONCURRENCY_LEVEL = 1 << 16;, +, +	private static final int MAXIMUM_SEGMENT_SIZE = 1 << 30;, +, +, +	/**, +	 * Array of segment indexed using the high order bits from the hash., +	 */, +	private final Segment[] segments;, +, +	/**, +	 * When the average number of references per table exceeds this value resize will be attempted., +	 */, +	private final float loadFactor;, +, +	private final ReferenceType referenceType;, +, +	/**, +	 * The shift value used to calculate the size of the segments array and an index from the hash., +	 */, +	private final int shift;, +, +	/**, +	 * Late binding entry set., +	 */, +	private Set<Map.Entry<K, V>> entrySet;, +, +, +	/**, +	 * Create a new {@link ConcurrentReferenceHashMap} instance.]