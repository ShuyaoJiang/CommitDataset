[+++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +	@Nullable, +	private static Class<?> kotlinMetadata;, +, +	static {, +		try {, +			kotlinMetadata = ClassUtils.forName("kotlin.Metadata", BeanUtils.class.getClassLoader());, +		}, +		catch (ClassNotFoundException ex) {, +			// Kotlin API not available - no special support for Kotlin class instantiation, +			kotlinMetadata = null;, +		}, +	}, +			Constructor<T> ctor = (isKotlinClass(clazz) ?, +	 * @param args the constructor arguments to apply (use {@code null} for an unspecified, +	 * parameter if needed for Kotlin classes with optional parameters and default values), +			return (isKotlinClass(ctor.getDeclaringClass()) ?, +					KotlinDelegate.instantiateClass(ctor, args) : ctor.newInstance(args));, +		if (isKotlinClass(clazz)) {, +	@SuppressWarnings("unchecked"), +		return (kotlinMetadata != null &&, +				clazz.getDeclaredAnnotation((Class<? extends Annotation>) kotlinMetadata) != null);, +		 * @see <a href="http://kotlinlang.org/docs/reference/classes.html#constructors">, +		 *     http://kotlinlang.org/docs/reference/classes.html#constructors</a>, +			Assert.notNull(constructor,, +					() -> "Failed to find Java constructor corresponding to Kotlin primary constructor: " + clazz.getName());, +		public static <T> T instantiateClass(Constructor<T> ctor, Object... args), +				throws IllegalAccessException, InvocationTargetException, InstantiationException {, +, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +	@Nullable, +	private static Class<?> kotlinMetadata;, +, +	static {, +		try {, +			kotlinMetadata = ClassUtils.forName("kotlin.Metadata", BeanUtils.class.getClassLoader());, +		}, +		catch (ClassNotFoundException ex) {, +			// Kotlin API not available - no special support for Kotlin class instantiation, +			kotlinMetadata = null;, +		}, +	}, +			Constructor<T> ctor = (isKotlinClass(clazz) ?, +	 * @param args the constructor arguments to apply (use {@code null} for an unspecified, +	 * parameter if needed for Kotlin classes with optional parameters and default values), +			return (isKotlinClass(ctor.getDeclaringClass()) ?, +					KotlinDelegate.instantiateClass(ctor, args) : ctor.newInstance(args));, +		if (isKotlinClass(clazz)) {, +	@SuppressWarnings("unchecked"), +		return (kotlinMetadata != null &&, +				clazz.getDeclaredAnnotation((Class<? extends Annotation>) kotlinMetadata) != null);, +		 * @see <a href="http://kotlinlang.org/docs/reference/classes.html#constructors">, +		 *     http://kotlinlang.org/docs/reference/classes.html#constructors</a>, +			Assert.notNull(constructor,, +					() -> "Failed to find Java constructor corresponding to Kotlin primary constructor: " + clazz.getName());, +		public static <T> T instantiateClass(Constructor<T> ctor, Object... args), +				throws IllegalAccessException, InvocationTargetException, InstantiationException {, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, +			ClassUtils.isPresent("kotlin.Metadata", DependencyDescriptor.class.getClassLoader());, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +	@Nullable, +	private static Class<?> kotlinMetadata;, +, +	static {, +		try {, +			kotlinMetadata = ClassUtils.forName("kotlin.Metadata", BeanUtils.class.getClassLoader());, +		}, +		catch (ClassNotFoundException ex) {, +			// Kotlin API not available - no special support for Kotlin class instantiation, +			kotlinMetadata = null;, +		}, +	}, +			Constructor<T> ctor = (isKotlinClass(clazz) ?, +	 * @param args the constructor arguments to apply (use {@code null} for an unspecified, +	 * parameter if needed for Kotlin classes with optional parameters and default values), +			return (isKotlinClass(ctor.getDeclaringClass()) ?, +					KotlinDelegate.instantiateClass(ctor, args) : ctor.newInstance(args));, +		if (isKotlinClass(clazz)) {, +	@SuppressWarnings("unchecked"), +		return (kotlinMetadata != null &&, +				clazz.getDeclaredAnnotation((Class<? extends Annotation>) kotlinMetadata) != null);, +		 * @see <a href="http://kotlinlang.org/docs/reference/classes.html#constructors">, +		 *     http://kotlinlang.org/docs/reference/classes.html#constructors</a>, +			Assert.notNull(constructor,, +					() -> "Failed to find Java constructor corresponding to Kotlin primary constructor: " + clazz.getName());, +		public static <T> T instantiateClass(Constructor<T> ctor, Object... args), +				throws IllegalAccessException, InvocationTargetException, InstantiationException {, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, +			ClassUtils.isPresent("kotlin.Metadata", DependencyDescriptor.class.getClassLoader());, +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, +			ClassUtils.isPresent("kotlin.Metadata", MethodParameter.class.getClassLoader());, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +	@Nullable, +	private static Class<?> kotlinMetadata;, +, +	static {, +		try {, +			kotlinMetadata = ClassUtils.forName("kotlin.Metadata", BeanUtils.class.getClassLoader());]