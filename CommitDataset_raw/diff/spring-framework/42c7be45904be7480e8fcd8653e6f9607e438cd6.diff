[+++ b/org.springframework.context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java, +import org.springframework.beans.factory.BeanFactoryUtils;, +	/**, +	 * Retrieve all applicable Lifecycle beans: all singletons that have already been created,, +	 * as well as all SmartLifecycle beans (even if they are marked as lazy-init)., +	 */, +		String[] beanNames = this.beanFactory.getBeanNamesForType(Lifecycle.class, false, false);, +		for (String beanName : beanNames) {, +			String beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName);, +			String beanNameToCheck = (this.beanFactory.isFactoryBean(beanNameToRegister) ?, +					BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName);, +			if (this.beanFactory.containsSingleton(beanNameToRegister) ||, +					SmartLifecycle.class.isAssignableFrom(this.beanFactory.getType(beanNameToCheck))) {, +				Lifecycle bean = this.beanFactory.getBean(beanNameToCheck, Lifecycle.class);, +				if (bean != this) {, +					beans.put(beanNameToRegister, bean);, +++ b/org.springframework.context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java, +import org.springframework.beans.factory.BeanFactoryUtils;, +	/**, +	 * Retrieve all applicable Lifecycle beans: all singletons that have already been created,, +	 * as well as all SmartLifecycle beans (even if they are marked as lazy-init)., +	 */, +		String[] beanNames = this.beanFactory.getBeanNamesForType(Lifecycle.class, false, false);, +		for (String beanName : beanNames) {, +			String beanNameToRegister = BeanFactoryUtils.transformedBeanName(beanName);, +			String beanNameToCheck = (this.beanFactory.isFactoryBean(beanNameToRegister) ?, +					BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName);, +			if (this.beanFactory.containsSingleton(beanNameToRegister) ||, +					SmartLifecycle.class.isAssignableFrom(this.beanFactory.getType(beanNameToCheck))) {, +				Lifecycle bean = this.beanFactory.getBean(beanNameToCheck, Lifecycle.class);, +				if (bean != this) {, +					beans.put(beanNameToRegister, bean);, +++ b/org.springframework.context/src/test/java/org/springframework/context/support/DefaultLifecycleProcessorTests.java, +import org.springframework.beans.factory.FactoryBean;, +	public void singleSmartLifecycleAutoStartupWithLazyInitFactoryBean() throws Exception {, +		StaticApplicationContext context = new StaticApplicationContext();, +		RootBeanDefinition bd = new RootBeanDefinition(DummySmartLifecycleFactoryBean.class);, +		bd.setLazyInit(true);, +		context.registerBeanDefinition("bean", bd);, +		context.refresh();, +		DummySmartLifecycleFactoryBean bean = context.getBean("&bean", DummySmartLifecycleFactoryBean.class);, +		assertTrue(bean.isRunning());, +		context.stop();, +		assertFalse(bean.isRunning());, +	}, +, +	@Test, +, +	public static class DummySmartLifecycleFactoryBean implements FactoryBean, SmartLifecycle {, +, +		public boolean running = false;, +, +		DummySmartLifecycleBean bean = new DummySmartLifecycleBean();, +, +		public Object getObject() throws Exception {, +			return this.bean;, +		}, +, +		public Class getObjectType() {, +			return DummySmartLifecycleBean.class;, +		}, +, +		public boolean isSingleton() {, +			return true;, +		}, +, +		public boolean isAutoStartup() {, +			return true;, +		}, +, +		public void stop(Runnable callback) {, +			this.running = false;, +			callback.run();, +		}, +, +		public void start() {, +			this.running = true;, +		}, +, +		public void stop() {, +			this.running = false;, +		}, +, +		public boolean isRunning() {, +			return this.running;, +		}, +, +		public int getPhase() {, +			return 0;, +		}, +	}, +]