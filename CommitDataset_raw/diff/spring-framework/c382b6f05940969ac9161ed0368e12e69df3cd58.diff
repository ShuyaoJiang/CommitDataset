[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java, + * Copyright 2002-2015 the original author or authors., +			// It looks like a type reference but is T being used as a map key?, +			Token t = nextToken();, +			if (peekToken(TokenKind.RSQUARE)) {, +				// looks like 'T]' (T is map key), +				push(new PropertyOrFieldReference(false,t.data,toPos(t)));, +				return true;, +			}, +			// It looks like a constructor reference but is NEW being used as a map key?, +			if (peekToken(TokenKind.RSQUARE)) {, +				// looks like 'NEW]' (so NEW used as map key), +				push(new PropertyOrFieldReference(false,newToken.data,toPos(newToken)));, +				return true;, +			}, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/standard/InternalSpelExpressionParser.java, + * Copyright 2002-2015 the original author or authors., +			// It looks like a type reference but is T being used as a map key?, +			Token t = nextToken();, +			if (peekToken(TokenKind.RSQUARE)) {, +				// looks like 'T]' (T is map key), +				push(new PropertyOrFieldReference(false,t.data,toPos(t)));, +				return true;, +			}, +			// It looks like a constructor reference but is NEW being used as a map key?, +			if (peekToken(TokenKind.RSQUARE)) {, +				// looks like 'NEW]' (so NEW used as map key), +				push(new PropertyOrFieldReference(false,newToken.data,toPos(newToken)));, +				return true;, +			}, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/MapTests.java, + * Copyright 2014-2015 the original author or authors., +import java.util.Map;, +	, +	@Test, +	public void testMapKeysThatAreAlsoSpELKeywords() {, +		SpelExpressionParser parser = new SpelExpressionParser();, +		SpelExpression expression = null;, +		Object o = null;, +, +		// expression = (SpelExpression) parser.parseExpression("foo['NEW']");, +		// o = expression.getValue(new MapHolder());, +		// assertEquals("VALUE",o);, +, +		expression = (SpelExpression) parser.parseExpression("foo[T]");, +		o = expression.getValue(new MapHolder());, +		assertEquals("TV", o);, +, +		expression = (SpelExpression) parser.parseExpression("foo[t]");, +		o = expression.getValue(new MapHolder());, +		assertEquals("tv", o);, +, +		expression = (SpelExpression) parser.parseExpression("foo[NEW]");, +		o = expression.getValue(new MapHolder());, +		assertEquals("VALUE", o);, +, +		expression = (SpelExpression) parser.parseExpression("foo[new]");, +		o = expression.getValue(new MapHolder());, +		assertEquals("value", o);, +, +		expression = (SpelExpression) parser.parseExpression("foo['abc.def']");, +		o = expression.getValue(new MapHolder());, +		assertEquals("value", o);, +		, +		expression = (SpelExpression)parser.parseExpression("foo[foo[NEW]]");, +		o = expression.getValue(new MapHolder());, +		assertEquals("37",o);, +, +		expression = (SpelExpression)parser.parseExpression("foo[foo[new]]");, +		o = expression.getValue(new MapHolder());, +		assertEquals("38",o);, +		, +		expression = (SpelExpression)parser.parseExpression("foo[foo[foo[T]]]");, +		o = expression.getValue(new MapHolder());, +		assertEquals("value",o);, +	}, +, +	@SuppressWarnings({ "rawtypes", "unchecked" }), +	public static class MapHolder {, +, +		public Map foo;, +, +		public MapHolder() {, +			foo = new HashMap();, +			foo.put("NEW", "VALUE");, +			foo.put("new", "value");, +			foo.put("T", "TV");, +			foo.put("t", "tv");, +			foo.put("abc.def", "value");, +			foo.put("VALUE","37");, +			foo.put("value","38");, +			foo.put("TV","new");, +		}, +	}, +]