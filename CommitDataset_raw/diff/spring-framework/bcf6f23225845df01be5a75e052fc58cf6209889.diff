[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		try {, +		}, +		catch (BeanDefinitionValidationException ex) {, +			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Invalid destruction signature", ex);, +		}, +				throw new BeanDefinitionValidationException("Couldn't find an init method named '" +, +						initMethodName + "' on bean with name '" + beanName + "'");, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		try {, +		}, +		catch (BeanDefinitionValidationException ex) {, +			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Invalid destruction signature", ex);, +		}, +				throw new BeanDefinitionValidationException("Couldn't find an init method named '" +, +						initMethodName + "' on bean with name '" + beanName + "'");, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java, + * Copyright 2002-2009 the original author or authors., +	private String destroyMethodName;, +	private transient Method destroyMethod;, +		this.invokeDisposableBean =, +				(this.bean instanceof DisposableBean && !beanDefinition.isExternallyManagedDestroyMethod("destroy"));, +		String destroyMethodName = beanDefinition.getDestroyMethodName();, +		if (destroyMethodName != null && !(this.invokeDisposableBean && "destroy".equals(destroyMethodName)) &&, +				!beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) {, +			this.destroyMethodName = destroyMethodName;, +			try {, +				this.destroyMethod = BeanUtils.findMethodWithMinimalParameters(bean.getClass(), destroyMethodName);, +			}, +			catch (IllegalArgumentException ex) {, +				throw new BeanDefinitionValidationException("Couldn't find a unique destroy method on bean with name '" +, +						this.beanName + ": " + ex.getMessage());, +			}, +			if (this.destroyMethod == null) {, +				if (beanDefinition.isEnforceDestroyMethod()) {, +					throw new BeanDefinitionValidationException("Couldn't find a destroy method named '" +, +							destroyMethodName + "' on bean with name '" + beanName + "'");, +				}, +			}, +			else {, +				Class[] paramTypes = this.destroyMethod.getParameterTypes();, +				if (paramTypes.length > 1) {, +					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +, +							beanName + "' has more than one parameter - not supported as destroy method");, +				}, +				else if (paramTypes.length == 1 && !paramTypes[0].equals(boolean.class)) {, +					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +, +							beanName + "' has a non-boolean parameter - not supported as destroy method");, +				}, +			}, +		}, +	 * @param invokeDisposableBean whether to actually invoke DisposableBean's destroy method here, +	 * @param destroyMethodName the name of the custom destroy method (<code>null</code> if there is none), +			String destroyMethodName, List<DestructionAwareBeanPostProcessor> postProcessors) {, +		if (this.invokeDisposableBean) {, +		if (this.destroyMethod != null) {, +			invokeCustomDestroyMethod(this.destroyMethod);, +		}, +		else if (this.destroyMethodName != null) {, +			Method destroyMethod =, +					BeanUtils.findMethodWithMinimalParameters(this.bean.getClass(), this.destroyMethodName);, +			invokeCustomDestroyMethod(destroyMethod);, +	private void invokeCustomDestroyMethod(Method destroyMethod) {, +				this.destroyMethodName, serializablePostProcessors);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		try {, +		}, +		catch (BeanDefinitionValidationException ex) {, +			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Invalid destruction signature", ex);, +		}, +				throw new BeanDefinitionValidationException("Couldn't find an init method named '" +, +						initMethodName + "' on bean with name '" + beanName + "'");, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java, + * Copyright 2002-2009 the original author or authors., +	private String destroyMethodName;, +	private transient Method destroyMethod;, +		this.invokeDisposableBean =, +				(this.bean instanceof DisposableBean && !beanDefinition.isExternallyManagedDestroyMethod("destroy"));, +		String destroyMethodName = beanDefinition.getDestroyMethodName();, +		if (destroyMethodName != null && !(this.invokeDisposableBean && "destroy".equals(destroyMethodName)) &&, +				!beanDefinition.isExternallyManagedDestroyMethod(destroyMethodName)) {, +			this.destroyMethodName = destroyMethodName;, +			try {, +				this.destroyMethod = BeanUtils.findMethodWithMinimalParameters(bean.getClass(), destroyMethodName);, +			}, +			catch (IllegalArgumentException ex) {, +				throw new BeanDefinitionValidationException("Couldn't find a unique destroy method on bean with name '" +, +						this.beanName + ": " + ex.getMessage());, +			}, +			if (this.destroyMethod == null) {, +				if (beanDefinition.isEnforceDestroyMethod()) {, +					throw new BeanDefinitionValidationException("Couldn't find a destroy method named '" +, +							destroyMethodName + "' on bean with name '" + beanName + "'");, +				}, +			}, +			else {, +				Class[] paramTypes = this.destroyMethod.getParameterTypes();, +				if (paramTypes.length > 1) {, +					throw new BeanDefinitionValidationException("Method '" + destroyMethodName + "' of bean '" +, +							beanName + "' has more than one parameter - not supported as destroy method");]