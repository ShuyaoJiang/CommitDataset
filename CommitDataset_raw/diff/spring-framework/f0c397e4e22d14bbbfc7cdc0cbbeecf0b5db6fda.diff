[+++ b/build.gradle, +	ext.jspVersion           = "2.3.2-b02", +	ext.servletVersion       = "3.1.0", +	ext.websocketVersion     = "1.1", +		testCompile("javax.servlet:javax.servlet-api:${servletVersion}"), +		provided "javax.servlet:javax.servlet-api:${servletVersion}", +		optional("javax.servlet.jsp:javax.servlet.jsp-api:${jspVersion}"), +		optional("javax.servlet:javax.servlet-api:${servletVersion}"), +		provided("javax.servlet:javax.servlet-api:${servletVersion}"), +		optional("javax.servlet.jsp:javax.servlet.jsp-api:${jspVersion}"), +		provided "javax.servlet:javax.servlet-api:${servletVersion}", +		optional("javax.servlet:javax.servlet-api:${servletVersion}"), +		optional("javax.websocket:javax.websocket-api:${websocketVersion}"), +		optional("javax.servlet:javax.servlet-api:${servletVersion}"), +		optional("javax.servlet.jsp:javax.servlet.jsp-api:${jspVersion}"), +		optional("javax.websocket:javax.websocket-api:${websocketVersion}"), +		testCompile("javax.servlet:javax.servlet-api:${servletVersion}"), +++ b/build.gradle, +	ext.jspVersion           = "2.3.2-b02", +	ext.servletVersion       = "3.1.0", +	ext.websocketVersion     = "1.1", +		testCompile("javax.servlet:javax.servlet-api:${servletVersion}"), +		provided "javax.servlet:javax.servlet-api:${servletVersion}", +		optional("javax.servlet.jsp:javax.servlet.jsp-api:${jspVersion}"), +		optional("javax.servlet:javax.servlet-api:${servletVersion}"), +		provided("javax.servlet:javax.servlet-api:${servletVersion}"), +		optional("javax.servlet.jsp:javax.servlet.jsp-api:${jspVersion}"), +		provided "javax.servlet:javax.servlet-api:${servletVersion}", +		optional("javax.servlet:javax.servlet-api:${servletVersion}"), +		optional("javax.websocket:javax.websocket-api:${websocketVersion}"), +		optional("javax.servlet:javax.servlet-api:${servletVersion}"), +		optional("javax.servlet.jsp:javax.servlet.jsp-api:${jspVersion}"), +		optional("javax.websocket:javax.websocket-api:${websocketVersion}"), +		testCompile("javax.servlet:javax.servlet-api:${servletVersion}"), +++ b/spring-test/src/main/java/org/springframework/mock/web/DelegatingServletInputStream.java, + * Copyright 2002-2016 the original author or authors., +import javax.servlet.ReadListener;, +	private boolean finished = false;, +, +		int data = this.sourceStream.read();, +		if (data == -1) {, +			this.finished = true;, +		}, +		return data;, +	@Override, +	public boolean isFinished() {, +		return this.finished;, +	}, +, +	@Override, +	public boolean isReady() {, +		return true;, +	}, +, +	@Override, +	public void setReadListener(ReadListener readListener) {, +		throw new UnsupportedOperationException();, +	}, +, +++ b/build.gradle, +	ext.jspVersion           = "2.3.2-b02", +	ext.servletVersion       = "3.1.0", +	ext.websocketVersion     = "1.1", +		testCompile("javax.servlet:javax.servlet-api:${servletVersion}"), +		provided "javax.servlet:javax.servlet-api:${servletVersion}", +		optional("javax.servlet.jsp:javax.servlet.jsp-api:${jspVersion}"), +		optional("javax.servlet:javax.servlet-api:${servletVersion}"), +		provided("javax.servlet:javax.servlet-api:${servletVersion}"), +		optional("javax.servlet.jsp:javax.servlet.jsp-api:${jspVersion}"), +		provided "javax.servlet:javax.servlet-api:${servletVersion}", +		optional("javax.servlet:javax.servlet-api:${servletVersion}"), +		optional("javax.websocket:javax.websocket-api:${websocketVersion}"), +		optional("javax.servlet:javax.servlet-api:${servletVersion}"), +		optional("javax.servlet.jsp:javax.servlet.jsp-api:${jspVersion}"), +		optional("javax.websocket:javax.websocket-api:${websocketVersion}"), +		testCompile("javax.servlet:javax.servlet-api:${servletVersion}"), +++ b/spring-test/src/main/java/org/springframework/mock/web/DelegatingServletInputStream.java, + * Copyright 2002-2016 the original author or authors., +import javax.servlet.ReadListener;, +	private boolean finished = false;, +, +		int data = this.sourceStream.read();, +		if (data == -1) {, +			this.finished = true;, +		}, +		return data;, +	@Override, +	public boolean isFinished() {, +		return this.finished;, +	}, +, +	@Override, +	public boolean isReady() {, +		return true;, +	}, +, +	@Override, +	public void setReadListener(ReadListener readListener) {, +		throw new UnsupportedOperationException();, +	}]