[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/RequestPartMethodArgumentResolver.java, +import org.springframework.web.multipart.MultipartException;, +import org.springframework.web.multipart.support.MissingServletRequestPartException;, + * {@link MethodArgumentNotValidException} is thrown and handled automatically by, +		if (!isMultipartRequest(servletRequest)) {, +			throw new MultipartException("The current request is not a multipart request.");, +		}, +		, +		String partName = getPartName(parameter);, +		Object arg;, +, +			Assert.notNull(multipartRequest, "Expected MultipartHttpServletRequest: is a MultipartResolver configured?");, +			Assert.notNull(multipartRequest, "Expected MultipartHttpServletRequest: is a MultipartResolver configured?");, +			try {, +			catch (MissingServletRequestPartException e) {, +				// handled below, +				arg = null;, +			}, +		}, +		RequestPart annot = parameter.getParameterAnnotation(RequestPart.class);, +		boolean isRequired = (annot != null) ? annot.required() : true;, +, +		if (arg == null && isRequired) {, +			throw new MissingServletRequestPartException(partName);, +	private boolean isMultipartRequest(HttpServletRequest request) {, +		if (!"post".equals(request.getMethod().toLowerCase())) {, +			return false;, +		}, +		String contentType = request.getContentType();, +		return (contentType != null && contentType.toLowerCase().startsWith("multipart/"));, +	}, +	, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/RequestPartMethodArgumentResolver.java, +import org.springframework.web.multipart.MultipartException;, +import org.springframework.web.multipart.support.MissingServletRequestPartException;, + * {@link MethodArgumentNotValidException} is thrown and handled automatically by, +		if (!isMultipartRequest(servletRequest)) {, +			throw new MultipartException("The current request is not a multipart request.");, +		}, +		, +		String partName = getPartName(parameter);, +		Object arg;, +, +			Assert.notNull(multipartRequest, "Expected MultipartHttpServletRequest: is a MultipartResolver configured?");, +			Assert.notNull(multipartRequest, "Expected MultipartHttpServletRequest: is a MultipartResolver configured?");, +			try {, +			catch (MissingServletRequestPartException e) {, +				// handled below, +				arg = null;, +			}, +		}, +		RequestPart annot = parameter.getParameterAnnotation(RequestPart.class);, +		boolean isRequired = (annot != null) ? annot.required() : true;, +, +		if (arg == null && isRequired) {, +			throw new MissingServletRequestPartException(partName);, +	private boolean isMultipartRequest(HttpServletRequest request) {, +		if (!"post".equals(request.getMethod().toLowerCase())) {, +			return false;, +		}, +		String contentType = request.getContentType();, +		return (contentType != null && contentType.toLowerCase().startsWith("multipart/"));, +	}, +	, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.java, +import org.springframework.web.multipart.MultipartFile;, +import org.springframework.web.multipart.support.MissingServletRequestPartException;, +			else if (ex instanceof MissingServletRequestPartException) {, +				return handleMissingServletRequestPartException((MissingServletRequestPartException) ex, request, response, handler);, +			}, +	/**, +	 * Handle the case where an @{@link RequestPart}, a {@link MultipartFile}, , +	 * or a {@code javax.servlet.http.Part} argument is required but missing. , +	 * An HTTP 400 error is sent back to the client., +	 * @param request current HTTP request, +	 * @param response current HTTP response, +	 * @param handler the executed handler, +	 * @return an empty ModelAndView indicating the exception was handled, +	 * @throws IOException potentially thrown from response.sendError(), +	 */, +	protected ModelAndView handleMissingServletRequestPartException(MissingServletRequestPartException ex,, +			HttpServletRequest request, HttpServletResponse response, Object handler) throws IOException {, + 		response.sendError(HttpServletResponse.SC_BAD_REQUEST);, +		return new ModelAndView();, +	}, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/RequestPartMethodArgumentResolver.java, +import org.springframework.web.multipart.MultipartException;, +import org.springframework.web.multipart.support.MissingServletRequestPartException;, + * {@link MethodArgumentNotValidException} is thrown and handled automatically by, +		if (!isMultipartRequest(servletRequest)) {, +			throw new MultipartException("The current request is not a multipart request.");, +		}, +		, +		String partName = getPartName(parameter);, +		Object arg;, +, +			Assert.notNull(multipartRequest, "Expected MultipartHttpServletRequest: is a MultipartResolver configured?");, +			Assert.notNull(multipartRequest, "Expected MultipartHttpServletRequest: is a MultipartResolver configured?");, +			try {]