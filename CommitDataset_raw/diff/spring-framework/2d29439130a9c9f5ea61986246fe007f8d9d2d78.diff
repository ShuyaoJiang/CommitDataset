[+++ b/org.springframework.core/src/main/java/org/springframework/util/AntPathStringMatcher.java, + * via a {@link Pattern}., + * character; '{' and '}' indicate a URI template pattern. For example <tt>/users/{user}</tt>., + * @author Rossen Stoyanchev, +	private static final Pattern GLOB_PATTERN = Pattern.compile("\\?|\\*|\\{((?:\\{[^/]+?\\}|[^/{}]|\\\\[{}])+?)\\}");, +				// SPR-8455, +				Assert.isTrue(variableNames.size() == matcher.groupCount(), , +						"The number of capturing groups in the pattern segment " + pattern + , +						" does not match the number of URI template variables it defines, which can occur if " + , +						" capturing groups are used in a URI template regex. Use non-capturing groups instead.");, +++ b/org.springframework.core/src/main/java/org/springframework/util/AntPathStringMatcher.java, + * via a {@link Pattern}., + * character; '{' and '}' indicate a URI template pattern. For example <tt>/users/{user}</tt>., + * @author Rossen Stoyanchev, +	private static final Pattern GLOB_PATTERN = Pattern.compile("\\?|\\*|\\{((?:\\{[^/]+?\\}|[^/{}]|\\\\[{}])+?)\\}");, +				// SPR-8455, +				Assert.isTrue(variableNames.size() == matcher.groupCount(), , +						"The number of capturing groups in the pattern segment " + pattern + , +						" does not match the number of URI template variables it defines, which can occur if " + , +						" capturing groups are used in a URI template regex. Use non-capturing groups instead.");, +++ b/org.springframework.core/src/test/java/org/springframework/util/AntPathMatcherTests.java, + * @author Rossen Stoyanchev, +	public void extractUriTemplateVariablesRegex() {, +	// SPR-7787, +	, +	@Test, +	public void extractUriTemplateVarsRegexQualifiers() {, +		Map<String, String> result = pathMatcher.extractUriTemplateVariables(, +				"{symbolicName:[\\p{L}\\.]+}-sources-{version:[\\p{N}\\.]+}.jar", , +				"com.example-sources-1.0.0.jar");, +		assertEquals("com.example", result.get("symbolicName"));, +		assertEquals("1.0.0", result.get("version"));, +, +		result = pathMatcher.extractUriTemplateVariables(, +				"{symbolicName:[\\w\\.]+}-sources-{version:[\\d\\.]+}-{year:\\d{4}}{month:\\d{2}}{day:\\d{2}}.jar",, +				"com.example-sources-1.0.0-20100220.jar");, +		assertEquals("com.example", result.get("symbolicName"));, +		assertEquals("1.0.0", result.get("version"));, +		assertEquals("2010", result.get("year"));, +		assertEquals("02", result.get("month"));, +		assertEquals("20", result.get("day"));, +, +		result = pathMatcher.extractUriTemplateVariables(, +				"{symbolicName:[\\p{L}\\.]+}-sources-{version:[\\p{N}\\.\\{\\}]+}.jar",, +				"com.example-sources-1.0.0.{12}.jar");, +		assertEquals("com.example", result.get("symbolicName"));, +		assertEquals("1.0.0.{12}", result.get("version"));, +	}, +, +	// SPR-8455, +	, +	@Test, +	public void extractUriTemplateVarsRegexCapturingGroups() {, +		try {, +			pathMatcher.extractUriTemplateVariables("/web/{id:foo(bar)?}", "/web/foobar");, +			fail("Expected exception");, +		} catch (IllegalArgumentException e) {, +			assertTrue("Expected helpful message on the use of capturing groups", , +					e.getMessage().contains("The number of capturing groups in the pattern"));, +		}, +	}, +	]