[+++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java, +import org.springframework.core.MethodIntrospector;, +			Map<Method, Set<JmsListener>> annotatedMethods = MethodIntrospector.selectMethods(targetClass,, +					new MethodIntrospector.MetadataLookup<Set<JmsListener>>() {, +						public Set<JmsListener> inspect(Method method) {, +							Set<JmsListener> listenerMethods =, +									AnnotationUtils.getRepeatableAnnotations(method, JmsListener.class, JmsListeners.class);, +							return (!listenerMethods.isEmpty() ? listenerMethods : null);, +					logger.trace("No @JmsListener annotations found on bean type: " + bean.getClass());, +				for (Map.Entry<Method, Set<JmsListener>> entry : annotatedMethods.entrySet()) {, +					Method method = entry.getKey();, +					for (JmsListener listener : entry.getValue()) {, +						processJmsListener(listener, method, bean);, +					}, +				}, +	protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) {, +		Method invocableMethod = MethodIntrospector.selectInvocableMethod(mostSpecificMethod, bean.getClass());, +		endpoint.setMethod(invocableMethod);, +		endpoint.setMostSpecificMethod(mostSpecificMethod);, +				throw new BeanInitializationException("Could not register JMS listener endpoint on [" +, +						mostSpecificMethod + "], no " + JmsListenerContainerFactory.class.getSimpleName() +, +						" with id '" + containerFactoryBeanName + "' was found in the application context", ex);, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java, +import org.springframework.core.MethodIntrospector;, +			Map<Method, Set<JmsListener>> annotatedMethods = MethodIntrospector.selectMethods(targetClass,, +					new MethodIntrospector.MetadataLookup<Set<JmsListener>>() {, +						public Set<JmsListener> inspect(Method method) {, +							Set<JmsListener> listenerMethods =, +									AnnotationUtils.getRepeatableAnnotations(method, JmsListener.class, JmsListeners.class);, +							return (!listenerMethods.isEmpty() ? listenerMethods : null);, +					logger.trace("No @JmsListener annotations found on bean type: " + bean.getClass());, +				for (Map.Entry<Method, Set<JmsListener>> entry : annotatedMethods.entrySet()) {, +					Method method = entry.getKey();, +					for (JmsListener listener : entry.getValue()) {, +						processJmsListener(listener, method, bean);, +					}, +				}, +	protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) {, +		Method invocableMethod = MethodIntrospector.selectInvocableMethod(mostSpecificMethod, bean.getClass());, +		endpoint.setMethod(invocableMethod);, +		endpoint.setMostSpecificMethod(mostSpecificMethod);, +				throw new BeanInitializationException("Could not register JMS listener endpoint on [" +, +						mostSpecificMethod + "], no " + JmsListenerContainerFactory.class.getSimpleName() +, +						" with id '" + containerFactoryBeanName + "' was found in the application context", ex);, +++ b/spring-jms/src/main/java/org/springframework/jms/config/MethodJmsListenerEndpoint.java, + * @author Juergen Hoeller, +	private Method mostSpecificMethod;, +, +	 * Set the most specific method known for this endpoint's declaration., +	 * <p>In case of a proxy, this will be the method on the target class, +	 * (if annotated itself, that is, if not just annotated in an interface)., +	 * @since 4.2.3, +	 */, +	public void setMostSpecificMethod(Method mostSpecificMethod) {, +		this.mostSpecificMethod = mostSpecificMethod;, +	}, +, +	public Method getMostSpecificMethod() {, +		if (this.mostSpecificMethod != null) {, +			return this.mostSpecificMethod;, +		}, +		else if (AopUtils.isAopProxy(this.bean)) {, +			Class<?> target = AopProxyUtils.ultimateTargetClass(this.bean);, +			return AopUtils.getMostSpecificMethod(getMethod(), target);, +		}, +		else {, +			return getMethod();, +		}, +	}, +, +	/**, +				throw new IllegalStateException("Invalid @" + SendTo.class.getSimpleName() + " annotation on '" +, +						specificMethod + "' one destination must be set (got " + Arrays.toString(destinations) + ")");, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java, +import org.springframework.core.MethodIntrospector;, +			Map<Method, Set<JmsListener>> annotatedMethods = MethodIntrospector.selectMethods(targetClass,, +					new MethodIntrospector.MetadataLookup<Set<JmsListener>>() {, +						public Set<JmsListener> inspect(Method method) {, +							Set<JmsListener> listenerMethods =, +									AnnotationUtils.getRepeatableAnnotations(method, JmsListener.class, JmsListeners.class);, +							return (!listenerMethods.isEmpty() ? listenerMethods : null);, +					logger.trace("No @JmsListener annotations found on bean type: " + bean.getClass());, +				for (Map.Entry<Method, Set<JmsListener>> entry : annotatedMethods.entrySet()) {, +					Method method = entry.getKey();, +					for (JmsListener listener : entry.getValue()) {, +						processJmsListener(listener, method, bean);, +					}, +				}, +	protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) {, +		Method invocableMethod = MethodIntrospector.selectInvocableMethod(mostSpecificMethod, bean.getClass());, +		endpoint.setMethod(invocableMethod);, +		endpoint.setMostSpecificMethod(mostSpecificMethod);, +				throw new BeanInitializationException("Could not register JMS listener endpoint on [" +, +						mostSpecificMethod + "], no " + JmsListenerContainerFactory.class.getSimpleName() +, +						" with id '" + containerFactoryBeanName + "' was found in the application context", ex);, +++ b/spring-jms/src/main/java/org/springframework/jms/config/MethodJmsListenerEndpoint.java, + * @author Juergen Hoeller, +	private Method mostSpecificMethod;, +, +	 * Set the most specific method known for this endpoint's declaration.]