[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/MethodArgumentNotValidException.java, +	private final MethodParameter parameter;, +, +	private final BindingResult bindingResult;, +, +, +	 * Create a new instance with the invalid {@code MethodParameter}., +, +	public MethodArgumentNotValidException(Message<?> message, MethodParameter parameter) {, +		this(message, parameter, null);, +	 * Create a new instance with the invalid {@code MethodParameter} and a, +	 * {@link org.springframework.validation.BindingResult}., +	public MethodArgumentNotValidException(Message<?> message, MethodParameter parameter,, +			BindingResult bindingResult) {, +, +		super(message, generateMessage(parameter, bindingResult));, +		this.parameter = parameter;, +		this.bindingResult = bindingResult;, +, +	/**, +	 * Return the MethodParameter that was rejected., +	 */, +	public MethodParameter getMethodParameter() {, +		return this.parameter;, +	}, +, +	/**, +	 * Return the BindingResult if the failure is validation-related or {@code null}., +	 */, +	public BindingResult getBindingResult() {, +		return this.bindingResult;, +	}, +, +, +, +		StringBuilder sb = new StringBuilder("Invalid parameter at index "), +				.append(parameter.getMethod().toGenericString());, +, +, +		if (bindingResult != null) {, +			sb.append(", with ").append(bindingResult.getErrorCount()).append(" error(s): ");, +		}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/MethodArgumentNotValidException.java, +	private final MethodParameter parameter;, +, +	private final BindingResult bindingResult;, +, +, +	 * Create a new instance with the invalid {@code MethodParameter}., +, +	public MethodArgumentNotValidException(Message<?> message, MethodParameter parameter) {, +		this(message, parameter, null);, +	 * Create a new instance with the invalid {@code MethodParameter} and a, +	 * {@link org.springframework.validation.BindingResult}., +	public MethodArgumentNotValidException(Message<?> message, MethodParameter parameter,, +			BindingResult bindingResult) {, +, +		super(message, generateMessage(parameter, bindingResult));, +		this.parameter = parameter;, +		this.bindingResult = bindingResult;, +, +	/**, +	 * Return the MethodParameter that was rejected., +	 */, +	public MethodParameter getMethodParameter() {, +		return this.parameter;, +	}, +, +	/**, +	 * Return the BindingResult if the failure is validation-related or {@code null}., +	 */, +	public BindingResult getBindingResult() {, +		return this.bindingResult;, +	}, +, +, +, +		StringBuilder sb = new StringBuilder("Invalid parameter at index "), +				.append(parameter.getMethod().toGenericString());, +, +, +		if (bindingResult != null) {, +			sb.append(", with ").append(bindingResult.getErrorCount()).append(" error(s): ");, +		}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolver.java, +import org.springframework.validation.BindingResult;, +import org.springframework.validation.ObjectError;, +	public Object resolveArgument(MethodParameter param, Message<?> message) throws Exception {, +, +		Payload annot = param.getParameterAnnotation(Payload.class);, +		Object target = getTargetPayload(param, message);, +		if (isEmptyPayload(target)) {, +			if (annot == null || annot.required()) {, +				String paramName = param.getParameterName();, +				paramName = (paramName == null ? "Arg" + param.getParameterIndex() : paramName);, +				BindingResult bindingResult = new BeanPropertyBindingResult(target, paramName);, +				bindingResult.addError(new ObjectError(paramName, "@Payload param is required"));, +				throw new MethodArgumentNotValidException(message, param, bindingResult);]