[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +				// annotations like @Inject and @Value don't have a method (attribute) named "required", +				// -> default to required status, +			// an exception was thrown during reflective invocation of the required attribute, +			// -> default to required status, +				if (this.beanFactory.containsBean(autowiredBeanName)) {, +					this.beanFactory.registerDependentBean(autowiredBeanName, beanName);, +				}, +					logger.debug("Autowiring by type from bean name '" + beanName +, +							"' to bean named '" + autowiredBeanName + "'");, +			TypeConverter typeConverter = this.beanFactory.getTypeConverter();, +			return this.beanFactory.resolveDependency(descriptor, beanName, null, typeConverter);, +			return this.beanFactory.getBean(((RuntimeBeanReference) cachedArgument).getBeanName());, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +				// annotations like @Inject and @Value don't have a method (attribute) named "required", +				// -> default to required status, +			// an exception was thrown during reflective invocation of the required attribute, +			// -> default to required status, +				if (this.beanFactory.containsBean(autowiredBeanName)) {, +					this.beanFactory.registerDependentBean(autowiredBeanName, beanName);, +				}, +					logger.debug("Autowiring by type from bean name '" + beanName +, +							"' to bean named '" + autowiredBeanName + "'");, +			TypeConverter typeConverter = this.beanFactory.getTypeConverter();, +			return this.beanFactory.resolveDependency(descriptor, beanName, null, typeConverter);, +			return this.beanFactory.getBean(((RuntimeBeanReference) cachedArgument).getBeanName());, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2012 the original author or authors., +, +		String[] depBeans = bf.getDependenciesForBean("annotatedBean");, +		assertEquals(2, depBeans.length);, +		assertEquals("testBean", depBeans[0]);, +		assertEquals("nestedTestBean", depBeans[1]);]