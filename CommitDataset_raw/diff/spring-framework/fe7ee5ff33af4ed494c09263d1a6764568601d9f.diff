[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSessionSupport.java, +import org.springframework.http.server.reactive.AbstractListenerReadPublisher;, +import org.springframework.http.server.reactive.AbstractListenerWriteProcessor;, +	final class WebSocketMessagePublisher extends AbstractListenerReadPublisher<WebSocketMessage> {, +	final class WebSocketMessageProcessor extends AbstractListenerWriteProcessor<WebSocketMessage> {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSessionSupport.java, +import org.springframework.http.server.reactive.AbstractListenerReadPublisher;, +import org.springframework.http.server.reactive.AbstractListenerWriteProcessor;, +	final class WebSocketMessagePublisher extends AbstractListenerReadPublisher<WebSocketMessage> {, +	final class WebSocketMessageProcessor extends AbstractListenerWriteProcessor<WebSocketMessage> {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.http.server.reactive;, +, +import java.io.IOException;, +import java.nio.channels.Channel;, +import java.util.Objects;, +import java.util.concurrent.atomic.AtomicLong;, +import java.util.concurrent.atomic.AtomicReference;, +import javax.servlet.ReadListener;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.reactivestreams.Publisher;, +import org.reactivestreams.Subscriber;, +import org.reactivestreams.Subscription;, +import reactor.core.publisher.Operators;, +, +/**, + * Abstract base class for {@code Publisher} implementations that bridge between, + * event-listener read APIs and Reactive Streams. Specifically, a base class for, + * reading from the HTTP request body with Servlet 3.1 and Undertow as well as, + * handling incoming WebSocket messages with JSR-356, Jetty, and Undertow., + *, + * @author Arjen Poutsma, + * @author Violeta Georgieva, + * @since 5.0, + * @see ServletServerHttpRequest, + * @see UndertowHttpHandlerAdapter, + */, +public abstract class AbstractListenerReadPublisher<T> implements Publisher<T> {, +, +	protected final Log logger = LogFactory.getLog(getClass());, +, +	private final AtomicReference<State> state = new AtomicReference<>(State.UNSUBSCRIBED);, +, +	private final AtomicLong demand = new AtomicLong();, +, +	private Subscriber<? super T> subscriber;, +, +, +	@Override, +	public void subscribe(Subscriber<? super T> subscriber) {, +		if (this.logger.isTraceEnabled()) {, +			this.logger.trace(this.state + " subscribe: " + subscriber);, +		}, +		this.state.get().subscribe(this, subscriber);, +	}, +, +	/**, +	 * Called via a listener interface to indicate that reading is possible., +	 * @see ReadListener#onDataAvailable(), +	 * @see org.xnio.ChannelListener#handleEvent(Channel), +	 */, +	public final void onDataAvailable() {, +		if (this.logger.isTraceEnabled()) {, +			this.logger.trace(this.state + " onDataAvailable");, +		}, +		this.state.get().onDataAvailable(this);, +	}, +, +	/**, +	 * Called via a listener interface to indicate that all data has been read., +	 * @see ReadListener#onAllDataRead(), +	 * @see org.xnio.ChannelListener#handleEvent(Channel), +	 */, +	public final void onAllDataRead() {, +		if (this.logger.isTraceEnabled()) {, +			this.logger.trace(this.state + " onAllDataRead");, +		}, +		this.state.get().onAllDataRead(this);, +	}, +, +	/**, +	 * Called by a listener interface to indicate that as error has occurred.]