[+++ b/spring-orm/src/test/java/org/springframework/mock/web/MockRequestDispatcher.java, + * Copyright 2002-2012 the original author or authors., + * @author Sam Brannen, +	private final String resource;, +	 * Create a new MockRequestDispatcher for the given resource., +	 * @param resource the server resource to dispatch to, located at a, +	 * particular path or given by a particular name, +	public MockRequestDispatcher(String resource) {, +		Assert.notNull(resource, "resource must not be null");, +		this.resource = resource;, +		getMockHttpServletResponse(response).setForwardedUrl(this.resource);, +			logger.debug("MockRequestDispatcher: forwarding to [" + this.resource + "]");, +		getMockHttpServletResponse(response).addIncludedUrl(this.resource);, +			logger.debug("MockRequestDispatcher: including [" + this.resource + "]");, +	 * Obtain the underlying {@link MockHttpServletResponse}, unwrapping, +	 * {@link HttpServletResponseWrapper} decorators if necessary., +++ b/spring-orm/src/test/java/org/springframework/mock/web/MockRequestDispatcher.java, + * Copyright 2002-2012 the original author or authors., + * @author Sam Brannen, +	private final String resource;, +	 * Create a new MockRequestDispatcher for the given resource., +	 * @param resource the server resource to dispatch to, located at a, +	 * particular path or given by a particular name, +	public MockRequestDispatcher(String resource) {, +		Assert.notNull(resource, "resource must not be null");, +		this.resource = resource;, +		getMockHttpServletResponse(response).setForwardedUrl(this.resource);, +			logger.debug("MockRequestDispatcher: forwarding to [" + this.resource + "]");, +		getMockHttpServletResponse(response).addIncludedUrl(this.resource);, +			logger.debug("MockRequestDispatcher: including [" + this.resource + "]");, +	 * Obtain the underlying {@link MockHttpServletResponse}, unwrapping, +	 * {@link HttpServletResponseWrapper} decorators if necessary., +++ b/spring-orm/src/test/java/org/springframework/mock/web/MockServletContext.java, + * Copyright 2002-2012 the original author or authors., + * access the {@code ServletContext}, {@code ClassPathXmlApplicationContext} or, + * {@code FileSystemXmlApplicationContext} can be used to load the context files, + * for testing, even for {@code DispatcherServlet} context definitions., + * <p>For setting up a full {@code WebApplicationContext} in a test environment,, + * you can use {@code AnnotationConfigWebApplicationContext},, + * {@code XmlWebApplicationContext}, or {@code GenericWebApplicationContext},, + * passing in an appropriate {@code MockServletContext} instance. You might want, + * to configure your {@code MockServletContext} with a {@code FileSystemResourceLoader}, + * in that case to ensure that resource paths are interpreted as relative filesystem, + * locations., + * {@code FileSystemXmlApplicationContext} (which will load straight from the, + * filesystem) and {@code XmlWebApplicationContext} with an underlying, + * {@code MockServletContext} (as long as the {@code MockServletContext} has been, + * configured with a {@code FileSystemResourceLoader})., + * @author Sam Brannen, + * @see org.springframework.web.context.support.AnnotationConfigWebApplicationContext, +	/** Default Servlet name used by Tomcat, Jetty, JBoss, and GlassFish: {@value}. */, +	private static final String COMMON_DEFAULT_SERVLET_NAME = "default";, +, +	private final Map<String, ServletContext> contexts = new HashMap<String, ServletContext>();, +, +	private final Map<String, String> initParameters = new LinkedHashMap<String, String>();, +, +	private final Map<String, Object> attributes = new LinkedHashMap<String, Object>();, +, +	private final Set<String> declaredRoles = new HashSet<String>();, +, +	private final Map<String, RequestDispatcher> namedRequestDispatchers = new HashMap<String, RequestDispatcher>();, +, +	private String defaultServletName = COMMON_DEFAULT_SERVLET_NAME;, +	 * @param resourceBasePath the root directory of the WAR (should not end with a slash), +	 * Create a new MockServletContext using the supplied resource base path and, +	 * resource loader., +	 * <p>Registers a {@link MockRequestDispatcher} for the Servlet named, +	 * {@value #COMMON_DEFAULT_SERVLET_NAME}., +	 * @param resourceBasePath the root directory of the WAR (should not end with a slash), +	 * @see #registerNamedDispatcher, +		registerNamedDispatcher(this.defaultServletName, new MockRequestDispatcher(this.defaultServletName));, +	}, +		return this.namedRequestDispatchers.get(path);, +	}, +, +	/**, +	 * Register a {@link RequestDispatcher} (typically a {@link MockRequestDispatcher}), +	 * that acts as a wrapper for the named Servlet., +	 *, +	 * @param name the name of the wrapped Servlet, +	 * @param requestDispatcher the dispatcher that wraps the named Servlet, +	 * @see #getNamedDispatcher, +	 * @see #unregisterNamedDispatcher, +	 */, +	public void registerNamedDispatcher(String name, RequestDispatcher requestDispatcher) {, +		Assert.notNull(name, "RequestDispatcher name must not be null");, +		Assert.notNull(requestDispatcher, "RequestDispatcher must not be null");, +		this.namedRequestDispatchers.put(name, requestDispatcher);, +	}, +, +	/**, +	 * Unregister the {@link RequestDispatcher} with the given name., +	 *, +	 * @param name the name of the dispatcher to unregister, +	 * @see #getNamedDispatcher, +	 * @see #registerNamedDispatcher, +	 */, +	public void unregisterNamedDispatcher(String name) {, +		Assert.notNull(name, "RequestDispatcher name must not be null");]