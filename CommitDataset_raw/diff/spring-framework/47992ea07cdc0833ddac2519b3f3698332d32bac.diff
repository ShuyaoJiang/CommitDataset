[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/AbstractCachingViewResolver.java, + * Copyright 2002-2009 the original author or authors., +			Object cachedView;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/AbstractCachingViewResolver.java, + * Copyright 2002-2009 the original author or authors., +			Object cachedView;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/AbstractUrlBasedView.java, + * Copyright 2002-2009 the original author or authors., +	/**, +	 * Check whether the underlying resource that the configured URL points to, +	 * actually exists., +	 * @return <code>true</code> if the resource exists (or is assumed to exist);, +	 * <code>false</code> if we know that it does not exist, +	 * @throws Exception if the resource exists but is invalid (e.g. could not be parsed), +	 */, +	public boolean checkResource() throws Exception {, +		return true;, +	}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/AbstractCachingViewResolver.java, + * Copyright 2002-2009 the original author or authors., +			Object cachedView;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/AbstractUrlBasedView.java, + * Copyright 2002-2009 the original author or authors., +	/**, +	 * Check whether the underlying resource that the configured URL points to, +	 * actually exists., +	 * @return <code>true</code> if the resource exists (or is assumed to exist);, +	 * <code>false</code> if we know that it does not exist, +	 * @throws Exception if the resource exists but is invalid (e.g. could not be parsed), +	 */, +	public boolean checkResource() throws Exception {, +		return true;, +	}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/UrlBasedViewResolver.java, + * Copyright 2002-2009 the original author or authors., + * <p><b>Note:</b> When chaining ViewResolvers, a UrlBasedViewResolver will check whether, + * the {@link AbstractUrlBasedView#checkResource specified resource actually exists}., + * However, with {@link InternalResourceView}, it is not generally possible to, + * determine the existence of the target resource upfront. In such a scenario,, + * a UrlBasedViewResolver will always return View for any given view name;, + * as a consequence, it should be configured as the last ViewResolver in the chain., +			return new RedirectView(redirectUrl, isRedirectContextRelative(), isRedirectHttp10Compatible());, +		View result = (View) getApplicationContext().getAutowireCapableBeanFactory().initializeBean(view, viewName);, +		return (view.checkResource() ? result : null);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/AbstractCachingViewResolver.java, + * Copyright 2002-2009 the original author or authors., +			Object cachedView;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/AbstractUrlBasedView.java, + * Copyright 2002-2009 the original author or authors., +	/**, +	 * Check whether the underlying resource that the configured URL points to, +	 * actually exists., +	 * @return <code>true</code> if the resource exists (or is assumed to exist);, +	 * <code>false</code> if we know that it does not exist, +	 * @throws Exception if the resource exists but is invalid (e.g. could not be parsed), +	 */, +	public boolean checkResource() throws Exception {, +		return true;, +	}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/UrlBasedViewResolver.java, + * Copyright 2002-2009 the original author or authors., + * <p><b>Note:</b> When chaining ViewResolvers, a UrlBasedViewResolver will check whether, + * the {@link AbstractUrlBasedView#checkResource specified resource actually exists}., + * However, with {@link InternalResourceView}, it is not generally possible to, + * determine the existence of the target resource upfront. In such a scenario,, + * a UrlBasedViewResolver will always return View for any given view name;, + * as a consequence, it should be configured as the last ViewResolver in the chain., +			return new RedirectView(redirectUrl, isRedirectContextRelative(), isRedirectHttp10Compatible());, +		View result = (View) getApplicationContext().getAutowireCapableBeanFactory().initializeBean(view, viewName);, +		return (view.checkResource() ? result : null);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/freemarker/FreeMarkerConfig.java, + * Copyright 2002-2009 the original author or authors., + * used by {@link FreeMarkerView}., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/AbstractCachingViewResolver.java, + * Copyright 2002-2009 the original author or authors., +			Object cachedView;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/AbstractUrlBasedView.java, + * Copyright 2002-2009 the original author or authors., +	/**, +	 * Check whether the underlying resource that the configured URL points to, +	 * actually exists., +	 * @return <code>true</code> if the resource exists (or is assumed to exist);, +	 * <code>false</code> if we know that it does not exist, +	 * @throws Exception if the resource exists but is invalid (e.g. could not be parsed), +	 */, +	public boolean checkResource() throws Exception {, +		return true;, +	}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/UrlBasedViewResolver.java, + * Copyright 2002-2009 the original author or authors., + * <p><b>Note:</b> When chaining ViewResolvers, a UrlBasedViewResolver will check whether, + * the {@link AbstractUrlBasedView#checkResource specified resource actually exists}., + * However, with {@link InternalResourceView}, it is not generally possible to, + * determine the existence of the target resource upfront. In such a scenario,, + * a UrlBasedViewResolver will always return View for any given view name;, + * as a consequence, it should be configured as the last ViewResolver in the chain., +			return new RedirectView(redirectUrl, isRedirectContextRelative(), isRedirectHttp10Compatible());, +		View result = (View) getApplicationContext().getAutowireCapableBeanFactory().initializeBean(view, viewName);, +		return (view.checkResource() ? result : null);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/freemarker/FreeMarkerConfig.java]