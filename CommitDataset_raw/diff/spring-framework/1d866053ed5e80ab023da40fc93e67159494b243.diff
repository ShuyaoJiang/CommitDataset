[+++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/RouterFunctionDsl.kt, + * Copyright 2002-2019 the original author or authors., +import java.util.function.Supplier, + * @see RouterFunctions.Builder, +	private val builder = RouterFunctions.route(), +		builder.nest(this, Supplier { RouterFunctionDsl(init).invoke() }), +		builder.path(this, Supplier { RouterFunctionDsl(init).invoke() }), +		builder.GET(pattern) { f(it).cast() }, +		builder.HEAD(pattern) { f(it).cast() }, +		builder.POST(pattern) { f(it).cast() }, +		builder.PUT(pattern) { f(it).cast() }, +		builder.PATCH(pattern) { f(it).cast() }, +		builder.DELETE(pattern) { f(it).cast() }, +		builder.OPTIONS(pattern) { f(it).cast() }, +		builder.add(RouterFunctions.route(RequestPredicates.accept(mediaType), HandlerFunction<ServerResponse> { f(it).cast() })), +		builder.add(RouterFunctions.route(RequestPredicates.contentType(mediaType), HandlerFunction<ServerResponse> { f(it).cast() })), +		builder.add(RouterFunctions.route(RequestPredicates.headers(headersPredicate), HandlerFunction<ServerResponse> { f(it).cast() })), +		builder.add(RouterFunctions.route(RequestPredicates.method(httpMethod), HandlerFunction<ServerResponse> { f(it).cast() })), +		builder.add(RouterFunctions.route(RequestPredicates.path(pattern), HandlerFunction<ServerResponse> { f(it).cast() })), +		builder.add(RouterFunctions.route(RequestPredicates.pathExtension(extension), HandlerFunction<ServerResponse> { f(it).cast() })), +		builder.add(RouterFunctions.route(RequestPredicates.pathExtension(predicate), HandlerFunction<ServerResponse> { f(it).cast() })), +		builder.add(RouterFunctions.route(RequestPredicates.queryParam(name, predicate), HandlerFunction<ServerResponse> { f(it).cast() })), +		builder.add(RouterFunctions.route(this, HandlerFunction<ServerResponse> { f(it).cast() })), +		builder.add(RouterFunctions.route(RequestPredicates.path(this),  HandlerFunction<ServerResponse> { f(it).cast() })), +		builder.resources(path, location), +		builder.resources(lookupFunction), +		return builder.build(), +++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/RouterFunctionDsl.kt, + * Copyright 2002-2019 the original author or authors., +import java.util.function.Supplier, + * @see RouterFunctions.Builder, +	private val builder = RouterFunctions.route(), +		builder.nest(this, Supplier { RouterFunctionDsl(init).invoke() }), +		builder.path(this, Supplier { RouterFunctionDsl(init).invoke() }), +		builder.GET(pattern) { f(it).cast() }, +		builder.HEAD(pattern) { f(it).cast() }, +		builder.POST(pattern) { f(it).cast() }, +		builder.PUT(pattern) { f(it).cast() }, +		builder.PATCH(pattern) { f(it).cast() }, +		builder.DELETE(pattern) { f(it).cast() }, +		builder.OPTIONS(pattern) { f(it).cast() }, +		builder.add(RouterFunctions.route(RequestPredicates.accept(mediaType), HandlerFunction<ServerResponse> { f(it).cast() })), +		builder.add(RouterFunctions.route(RequestPredicates.contentType(mediaType), HandlerFunction<ServerResponse> { f(it).cast() })), +		builder.add(RouterFunctions.route(RequestPredicates.headers(headersPredicate), HandlerFunction<ServerResponse> { f(it).cast() })), +		builder.add(RouterFunctions.route(RequestPredicates.method(httpMethod), HandlerFunction<ServerResponse> { f(it).cast() })), +		builder.add(RouterFunctions.route(RequestPredicates.path(pattern), HandlerFunction<ServerResponse> { f(it).cast() })), +		builder.add(RouterFunctions.route(RequestPredicates.pathExtension(extension), HandlerFunction<ServerResponse> { f(it).cast() })), +		builder.add(RouterFunctions.route(RequestPredicates.pathExtension(predicate), HandlerFunction<ServerResponse> { f(it).cast() })), +		builder.add(RouterFunctions.route(RequestPredicates.queryParam(name, predicate), HandlerFunction<ServerResponse> { f(it).cast() })), +		builder.add(RouterFunctions.route(this, HandlerFunction<ServerResponse> { f(it).cast() })), +		builder.add(RouterFunctions.route(RequestPredicates.path(this),  HandlerFunction<ServerResponse> { f(it).cast() })), +		builder.resources(path, location), +		builder.resources(lookupFunction), +		return builder.build(), +++ b/spring-webflux/src/test/kotlin/org/springframework/web/reactive/function/server/RouterFunctionDslTests.kt, + * Copyright 2002-2019 the original author or authors., +	@Test(expected = IllegalStateException::class)]