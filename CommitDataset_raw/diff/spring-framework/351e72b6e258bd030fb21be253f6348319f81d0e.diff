[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +import static org.springframework.util.StringUtils.collectionToCommaDelimitedString;, +, +import org.springframework.beans.factory.config.ConstructorArgumentValues.ValueHolder;, +import org.springframework.util.StringUtils;, +				boolean hasArgs  = resolvedValues.getArgumentCount() > 0;, +				String argDesc = "";, +				if (hasArgs) {, +					List<String> argTypes = new ArrayList<String>();, +					for (ValueHolder value : resolvedValues.getIndexedArgumentValues().values()) {, +						String argType = value.getType() != null ?, +								ClassUtils.getShortName(value.getType()) : value.getValue().getClass().getSimpleName();, +						argTypes.add(argType);, +					}, +					argDesc = StringUtils.collectionToCommaDelimitedString(argTypes);, +				}, +						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +, +						"Check that a method with the specified name " +, +						(hasArgs ? "and arguments " : "") +, +						"exists and that it is " +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java, +import static org.springframework.util.StringUtils.collectionToCommaDelimitedString;, +, +import org.springframework.beans.factory.config.ConstructorArgumentValues.ValueHolder;, +import org.springframework.util.StringUtils;, +				boolean hasArgs  = resolvedValues.getArgumentCount() > 0;, +				String argDesc = "";, +				if (hasArgs) {, +					List<String> argTypes = new ArrayList<String>();, +					for (ValueHolder value : resolvedValues.getIndexedArgumentValues().values()) {, +						String argType = value.getType() != null ?, +								ClassUtils.getShortName(value.getType()) : value.getValue().getClass().getSimpleName();, +						argTypes.add(argType);, +					}, +					argDesc = StringUtils.collectionToCommaDelimitedString(argTypes);, +				}, +						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +, +						"Check that a method with the specified name " +, +						(hasArgs ? "and arguments " : "") +, +						"exists and that it is " +, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/Spr5475Tests.java, +package org.springframework.beans.factory;, +, +import static org.hamcrest.CoreMatchers.equalTo;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.fail;, +import static org.springframework.beans.factory.support.BeanDefinitionBuilder.rootBeanDefinition;, +, +import org.junit.Test;, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.config.ConstructorArgumentValues;, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +, +/**, + * SPR-5475 exposed the fact that the error message displayed when incorrectly, + * invoking a factory method is not instructive to the user and rather misleading., + *, + * @author Chris Beams, + */, +public class Spr5475Tests {, +, +	@Test, +	public void noArgFactoryMethodInvokedWithOneArg() {, +		assertExceptionMessageForMisconfiguredFactoryMethod(, +				rootBeanDefinition(Foo.class), +					.setFactoryMethod("noArgFactory"), +					.addConstructorArgValue("bogusArg").getBeanDefinition(),, +				"Error creating bean with name 'foo': No matching factory method found: factory method 'noArgFactory(String)'. " +, +				"Check that a method with the specified name and arguments exists and that it is static.");, +	}, +, +	@Test, +	public void noArgFactoryMethodInvokedWithTwoArgs() {, +		assertExceptionMessageForMisconfiguredFactoryMethod(, +				rootBeanDefinition(Foo.class), +					.setFactoryMethod("noArgFactory"), +					.addConstructorArgValue("bogusArg1"), +					.addConstructorArgValue("bogusArg2".getBytes()).getBeanDefinition(),, +				"Error creating bean with name 'foo': No matching factory method found: factory method 'noArgFactory(String,byte[])'. " +, +				"Check that a method with the specified name and arguments exists and that it is static.");, +	}, +, +	@Test, +	public void noArgFactoryMethodInvokedWithTwoArgsAndTypesSpecified() {, +		RootBeanDefinition def = new RootBeanDefinition(Foo.class);, +		def.setFactoryMethodName("noArgFactory");, +		ConstructorArgumentValues cav = new ConstructorArgumentValues();, +		cav.addIndexedArgumentValue(0, "bogusArg1", CharSequence.class.getName());, +		cav.addIndexedArgumentValue(1, "bogusArg2".getBytes());, +		def.setConstructorArgumentValues(cav);, +, +		assertExceptionMessageForMisconfiguredFactoryMethod(, +				def,, +				"Error creating bean with name 'foo': No matching factory method found: factory method 'noArgFactory(CharSequence,byte[])'. " +, +				"Check that a method with the specified name and arguments exists and that it is static.");, +	}, +, +	private void assertExceptionMessageForMisconfiguredFactoryMethod(BeanDefinition bd, String expectedMessage) {, +		DefaultListableBeanFactory factory = new DefaultListableBeanFactory();]