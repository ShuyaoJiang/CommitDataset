[+++ b/spring-web/src/main/java/org/springframework/http/converter/json/GsonHttpMessageConverter.java, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/GsonHttpMessageConverter.java, +++ b/spring-web/src/main/java/org/springframework/web/bind/support/WebRequestDataBinder.java, + * Copyright 2002-2014 the original author or authors., +		if (isMultipartRequest(request) && request instanceof NativeWebRequest) {, +	 * Check if the request is a multipart request (by checking its Content-Type header)., +	 * @param request request with parameters to bind, +	 */, +	private boolean isMultipartRequest(WebRequest request) {, +		String contentType = request.getHeader("Content-Type");, +		return (contentType != null && StringUtils.startsWithIgnoreCase(contentType, "multipart"));, +	}, +, +	/**, +			catch (Exception ex) {, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/GsonHttpMessageConverter.java, +++ b/spring-web/src/main/java/org/springframework/web/bind/support/WebRequestDataBinder.java, + * Copyright 2002-2014 the original author or authors., +		if (isMultipartRequest(request) && request instanceof NativeWebRequest) {, +	 * Check if the request is a multipart request (by checking its Content-Type header)., +	 * @param request request with parameters to bind, +	 */, +	private boolean isMultipartRequest(WebRequest request) {, +		String contentType = request.getHeader("Content-Type");, +		return (contentType != null && StringUtils.startsWithIgnoreCase(contentType, "multipart"));, +	}, +, +	/**, +			catch (Exception ex) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java, +		// Use a default of near-lowest precedence, still allowing for even lower precedence in other mappings, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/GsonHttpMessageConverter.java, +++ b/spring-web/src/main/java/org/springframework/web/bind/support/WebRequestDataBinder.java, + * Copyright 2002-2014 the original author or authors., +		if (isMultipartRequest(request) && request instanceof NativeWebRequest) {, +	 * Check if the request is a multipart request (by checking its Content-Type header)., +	 * @param request request with parameters to bind, +	 */, +	private boolean isMultipartRequest(WebRequest request) {, +		String contentType = request.getHeader("Content-Type");, +		return (contentType != null && StringUtils.startsWithIgnoreCase(contentType, "multipart"));, +	}, +, +	/**, +			catch (Exception ex) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java, +		// Use a default of near-lowest precedence, still allowing for even lower precedence in other mappings, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/VersionResourceResolver.java, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.Comparator;, +import java.util.HashMap;, +import java.util.List;, +import java.util.Map;, +	 * Set a Map with URL paths as keys and {@code VersionStrategy} as values., +			if (logger.isTraceEnabled()) {, +				logger.trace("Potential resource found for [" + requestPath + "], but version [" +, +						candidateVersion + "] doesn't match.");, +			}, +	 * Find a {@code VersionStrategy} for the request path of the requested resource.]