[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +		return new TypeDescriptor(value.getClass(), this.elementTypeDescriptor,, +				this.mapKeyTypeDescriptor, this.mapValueTypeDescriptor, this.annotations);, +			return (value != null ? new TypeDescriptor(value.getClass(), null, null, null, this.annotations) : null);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +		return new TypeDescriptor(value.getClass(), this.elementTypeDescriptor,, +				this.mapKeyTypeDescriptor, this.mapValueTypeDescriptor, this.annotations);, +			return (value != null ? new TypeDescriptor(value.getClass(), null, null, null, this.annotations) : null);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ArrayToCollectionConverter.java, +		return ConversionUtils.canConvertElements(, +				sourceType.getElementTypeDescriptor(), targetType.getElementTypeDescriptor(), this.conversionService);, +				Object targetElement = this.conversionService.convert(sourceElement,, +						sourceType.elementTypeDescriptor(sourceElement), targetType.getElementTypeDescriptor());, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +		return new TypeDescriptor(value.getClass(), this.elementTypeDescriptor,, +				this.mapKeyTypeDescriptor, this.mapValueTypeDescriptor, this.annotations);, +			return (value != null ? new TypeDescriptor(value.getClass(), null, null, null, this.annotations) : null);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ArrayToCollectionConverter.java, +		return ConversionUtils.canConvertElements(, +				sourceType.getElementTypeDescriptor(), targetType.getElementTypeDescriptor(), this.conversionService);, +				Object targetElement = this.conversionService.convert(sourceElement,, +						sourceType.elementTypeDescriptor(sourceElement), targetType.getElementTypeDescriptor());, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ArrayToObjectConverter.java, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +		return new TypeDescriptor(value.getClass(), this.elementTypeDescriptor,, +				this.mapKeyTypeDescriptor, this.mapValueTypeDescriptor, this.annotations);, +			return (value != null ? new TypeDescriptor(value.getClass(), null, null, null, this.annotations) : null);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ArrayToCollectionConverter.java, +		return ConversionUtils.canConvertElements(, +				sourceType.getElementTypeDescriptor(), targetType.getElementTypeDescriptor(), this.conversionService);, +				Object targetElement = this.conversionService.convert(sourceElement,, +						sourceType.elementTypeDescriptor(sourceElement), targetType.getElementTypeDescriptor());, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ArrayToObjectConverter.java, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +			throw new IllegalArgumentException("The source to convert from must be an instance of " +, +					sourceType + "; instead it was a " + source.getClass().getName());, +			Object result = ConversionUtils.invokeConverter(converter, source, sourceType, targetType);, +			return handleResult(sourceType, targetType, result);, +		}, +		else {, +			return (converter != NO_MATCH ? converter : null);, +		}, +		else {, +		}, +		else if (targetObjectType.isArray()) {, +		else if (sourceType.isAssignableTo(targetType) && targetType.getObjectType().isInstance(source)) {, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +		return new TypeDescriptor(value.getClass(), this.elementTypeDescriptor,, +				this.mapKeyTypeDescriptor, this.mapValueTypeDescriptor, this.annotations);, +			return (value != null ? new TypeDescriptor(value.getClass(), null, null, null, this.annotations) : null);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ArrayToCollectionConverter.java, +		return ConversionUtils.canConvertElements(, +				sourceType.getElementTypeDescriptor(), targetType.getElementTypeDescriptor(), this.conversionService);, +				Object targetElement = this.conversionService.convert(sourceElement,, +						sourceType.elementTypeDescriptor(sourceElement), targetType.getElementTypeDescriptor());, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ArrayToObjectConverter.java, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +			throw new IllegalArgumentException("The source to convert from must be an instance of " +, +					sourceType + "; instead it was a " + source.getClass().getName());, +			Object result = ConversionUtils.invokeConverter(converter, source, sourceType, targetType);, +			return handleResult(sourceType, targetType, result);, +		}, +		else {, +			return (converter != NO_MATCH ? converter : null);, +		}, +		else {, +		}, +		else if (targetObjectType.isArray()) {, +		else if (sourceType.isAssignableTo(targetType) && targetType.getObjectType().isInstance(source)) {, +, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/CollectionToCollectionConverterTests.java, +		List<String> resources = new ArrayList<String>();, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +		return new TypeDescriptor(value.getClass(), this.elementTypeDescriptor,, +				this.mapKeyTypeDescriptor, this.mapValueTypeDescriptor, this.annotations);, +			return (value != null ? new TypeDescriptor(value.getClass(), null, null, null, this.annotations) : null);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ArrayToCollectionConverter.java, +		return ConversionUtils.canConvertElements(, +				sourceType.getElementTypeDescriptor(), targetType.getElementTypeDescriptor(), this.conversionService);, +				Object targetElement = this.conversionService.convert(sourceElement,, +						sourceType.elementTypeDescriptor(sourceElement), targetType.getElementTypeDescriptor());, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ArrayToObjectConverter.java, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +			throw new IllegalArgumentException("The source to convert from must be an instance of " +, +					sourceType + "; instead it was a " + source.getClass().getName());, +			Object result = ConversionUtils.invokeConverter(converter, source, sourceType, targetType);, +			return handleResult(sourceType, targetType, result);, +		}, +		else {, +			return (converter != NO_MATCH ? converter : null);, +		}, +		else {, +		}, +		else if (targetObjectType.isArray()) {, +		else if (sourceType.isAssignableTo(targetType) && targetType.getObjectType().isInstance(source)) {, +, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/CollectionToCollectionConverterTests.java, +		List<String> resources = new ArrayList<String>();, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/MapToMapConverterTests.java]