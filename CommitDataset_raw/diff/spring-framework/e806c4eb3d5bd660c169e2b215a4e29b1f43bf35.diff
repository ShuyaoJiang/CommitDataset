[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAwareOrderComparator.java, +			Class<?> clazz = (obj instanceof Class ? (Class) obj : obj.getClass());, +			Order order = clazz.getAnnotation(Order.class);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAwareOrderComparator.java, +			Class<?> clazz = (obj instanceof Class ? (Class) obj : obj.getClass());, +			Order order = clazz.getAnnotation(Order.class);, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationAwareOrderComparatorTests.java, + * Copyright 2002-2013 the original author or authors., +, +import java.util.ArrayList;, +import java.util.List;, +, +import org.junit.Test;, +, + * @author Juergen Hoeller, +, +	@Test, +	public void sortInstances() {, +		List<Object> list = new ArrayList<>();, +		list.add(new B());, +		list.add(new A());, +		AnnotationAwareOrderComparator.sort(list);, +		assertTrue(list.get(0) instanceof A);, +		assertTrue(list.get(1) instanceof B);, +	}, +, +	@Test, +	public void sortClasses() {, +		List<Object> list = new ArrayList<>();, +		list.add(B.class);, +		list.add(A.class);, +		AnnotationAwareOrderComparator.sort(list);, +		assertEquals(A.class, list.get(0));, +		assertEquals(B.class, list.get(1));, +	}, +, +, +	@Order(1), +	private static class A {, +	}, +, +	@Order(2), +	private static class B {, +	}, +]