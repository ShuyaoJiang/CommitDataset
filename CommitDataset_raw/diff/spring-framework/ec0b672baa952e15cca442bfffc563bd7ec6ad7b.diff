[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +import org.springframework.messaging.handler.DestinationPatternsMessageCondition;, +		return new String[] { defaultPrefix +, +				inputHeaders.getHeader(DestinationPatternsMessageCondition.LOOKUP_DESTINATION_HEADER) };, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +import org.springframework.messaging.handler.DestinationPatternsMessageCondition;, +		return new String[] { defaultPrefix +, +				inputHeaders.getHeader(DestinationPatternsMessageCondition.LOOKUP_DESTINATION_HEADER) };, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +import org.springframework.messaging.handler.DestinationPatternsMessageCondition;, +		return new String[] { defaultPrefix +, +				inputHeaders.getHeader(DestinationPatternsMessageCondition.LOOKUP_DESTINATION_HEADER) };, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.java, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandlerTests.java, +import org.springframework.messaging.handler.DestinationPatternsMessageCondition;, +		Message<?> inputMessage = createInputMessage("sess1", "sub1", "/app", "/dest", null);, +		Message<?> inputMessage = createInputMessage(sessionId, "sub1", null, null, null);, +		Message<?> inputMessage = createInputMessage(sessionId, "sub1", "/app", "/dest", null);, +		Message<?> inputMessage = createInputMessage(sessionId, "sub1", null, null, user);, +		Message<?> inputMessage = createInputMessage(sessionId, "sub1", null, null, user);, +		Message<?> inputMessage = createInputMessage(sessionId, "sub1", "/app", "/dest", user);, +	private Message<?> createInputMessage(String sessId, String subsId, String destinationPrefix,, +            String destination, Principal principal) {, +		if (destination != null && destinationPrefix != null) {, +			headers.setDestination(destinationPrefix + destination);, +			headers.setHeader(DestinationPatternsMessageCondition.LOOKUP_DESTINATION_HEADER, destination);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +import org.springframework.messaging.handler.DestinationPatternsMessageCondition;, +		return new String[] { defaultPrefix +, +				inputHeaders.getHeader(DestinationPatternsMessageCondition.LOOKUP_DESTINATION_HEADER) };, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.java, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandlerTests.java, +import org.springframework.messaging.handler.DestinationPatternsMessageCondition;, +		Message<?> inputMessage = createInputMessage("sess1", "sub1", "/app", "/dest", null);, +		Message<?> inputMessage = createInputMessage(sessionId, "sub1", null, null, null);, +		Message<?> inputMessage = createInputMessage(sessionId, "sub1", "/app", "/dest", null);, +		Message<?> inputMessage = createInputMessage(sessionId, "sub1", null, null, user);, +		Message<?> inputMessage = createInputMessage(sessionId, "sub1", null, null, user);, +		Message<?> inputMessage = createInputMessage(sessionId, "sub1", "/app", "/dest", user);, +	private Message<?> createInputMessage(String sessId, String subsId, String destinationPrefix,, +            String destination, Principal principal) {, +		if (destination != null && destinationPrefix != null) {, +			headers.setDestination(destinationPrefix + destination);, +			headers.setHeader(DestinationPatternsMessageCondition.LOOKUP_DESTINATION_HEADER, destination);, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/messaging/StompWebSocketIntegrationTests.java, +import org.springframework.messaging.simp.annotation.SubscribeMapping;, +	// SPR-11648, +, +	@Test, +	public void sendSubscribeToControllerAndReceiveReply() throws Exception {, +, +		TextMessage message = create(StompCommand.SUBSCRIBE).headers(, +				"id:subs1", "destination:/app/number").build();, +, +		TestClientWebSocketHandler clientHandler = new TestClientWebSocketHandler(1, message);, +		WebSocketSession session = doHandshake(clientHandler, "/ws").get();, +, +		try {, +			assertTrue(clientHandler.latch.await(2, TimeUnit.SECONDS));, +			String payload = clientHandler.actual.get(0).getPayload();, +			assertTrue("Expected STOMP destination=/app/number, got " + payload, payload.contains("destination:/app/number"));, +			assertTrue("Expected STOMP Payload=42, got " + payload, payload.contains("42"));, +		}, +		finally {, +			session.close();, +		}, +	}, +, +, +		@SubscribeMapping("/number"), +		public int number() {, +			return 42;, +		}]