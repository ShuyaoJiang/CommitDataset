[+++ b/org.springframework.context/src/main/java/org/springframework/validation/AbstractPropertyBindingResult.java, + * Copyright 2002-2010 the original author or authors., +		Class valueTypeForLookup = valueType;, +		if (valueTypeForLookup == null) {, +			valueTypeForLookup = getFieldType(field);, +		PropertyEditor editor = super.findEditor(field, valueTypeForLookup);, +			TypeDescriptor td = null;, +			if (field != null) {, +				TypeDescriptor ptd = getPropertyAccessor().getPropertyTypeDescriptor(fixedField(field));, +				if (valueType == null || valueType.isAssignableFrom(ptd.getType())) {, +					td = ptd;, +				}, +			}, +			if (td == null) {, +				td = TypeDescriptor.valueOf(valueTypeForLookup);, +			}, +++ b/org.springframework.context/src/main/java/org/springframework/validation/AbstractPropertyBindingResult.java, + * Copyright 2002-2010 the original author or authors., +		Class valueTypeForLookup = valueType;, +		if (valueTypeForLookup == null) {, +			valueTypeForLookup = getFieldType(field);, +		PropertyEditor editor = super.findEditor(field, valueTypeForLookup);, +			TypeDescriptor td = null;, +			if (field != null) {, +				TypeDescriptor ptd = getPropertyAccessor().getPropertyTypeDescriptor(fixedField(field));, +				if (valueType == null || valueType.isAssignableFrom(ptd.getType())) {, +					td = ptd;, +				}, +			}, +			if (td == null) {, +				td = TypeDescriptor.valueOf(valueTypeForLookup);, +			}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/OptionWriter.java, +import java.beans.PropertyEditor;, +		Map<?, ?> optionMap = (Map) this.optionSource;, +		for (Map.Entry entry : optionMap.entrySet()) {, +			Object renderValue = (this.valueProperty != null ? mapKeyWrapper.getPropertyValue(this.valueProperty) :, +					mapKey.toString());, +			Object renderLabel = (this.labelProperty != null ? mapValueWrapper.getPropertyValue(this.labelProperty) :, +					mapValue.toString());, +		for (Object item : optionCollection) {, +		PropertyEditor editor = (value != null ? this.bindStatus.findEditor(value.getClass()) : null);, +		return ValueFormatter.getDisplayString(value, editor, this.htmlEscape);, +++ b/org.springframework.context/src/main/java/org/springframework/validation/AbstractPropertyBindingResult.java, + * Copyright 2002-2010 the original author or authors., +		Class valueTypeForLookup = valueType;, +		if (valueTypeForLookup == null) {, +			valueTypeForLookup = getFieldType(field);, +		PropertyEditor editor = super.findEditor(field, valueTypeForLookup);, +			TypeDescriptor td = null;, +			if (field != null) {, +				TypeDescriptor ptd = getPropertyAccessor().getPropertyTypeDescriptor(fixedField(field));, +				if (valueType == null || valueType.isAssignableFrom(ptd.getType())) {, +					td = ptd;, +				}, +			}, +			if (td == null) {, +				td = TypeDescriptor.valueOf(valueTypeForLookup);, +			}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/OptionWriter.java, +import java.beans.PropertyEditor;, +		Map<?, ?> optionMap = (Map) this.optionSource;, +		for (Map.Entry entry : optionMap.entrySet()) {, +			Object renderValue = (this.valueProperty != null ? mapKeyWrapper.getPropertyValue(this.valueProperty) :, +					mapKey.toString());, +			Object renderLabel = (this.labelProperty != null ? mapValueWrapper.getPropertyValue(this.labelProperty) :, +					mapValue.toString());, +		for (Object item : optionCollection) {, +		PropertyEditor editor = (value != null ? this.bindStatus.findEditor(value.getClass()) : null);, +		return ValueFormatter.getDisplayString(value, editor, this.htmlEscape);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/SelectTag.java, +				Object itemsObject = evaluate("items", items);, +++ b/org.springframework.context/src/main/java/org/springframework/validation/AbstractPropertyBindingResult.java, + * Copyright 2002-2010 the original author or authors., +		Class valueTypeForLookup = valueType;, +		if (valueTypeForLookup == null) {, +			valueTypeForLookup = getFieldType(field);, +		PropertyEditor editor = super.findEditor(field, valueTypeForLookup);, +			TypeDescriptor td = null;, +			if (field != null) {, +				TypeDescriptor ptd = getPropertyAccessor().getPropertyTypeDescriptor(fixedField(field));, +				if (valueType == null || valueType.isAssignableFrom(ptd.getType())) {, +					td = ptd;, +				}, +			}, +			if (td == null) {, +				td = TypeDescriptor.valueOf(valueTypeForLookup);, +			}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/OptionWriter.java, +import java.beans.PropertyEditor;, +		Map<?, ?> optionMap = (Map) this.optionSource;, +		for (Map.Entry entry : optionMap.entrySet()) {, +			Object renderValue = (this.valueProperty != null ? mapKeyWrapper.getPropertyValue(this.valueProperty) :, +					mapKey.toString());, +			Object renderLabel = (this.labelProperty != null ? mapValueWrapper.getPropertyValue(this.labelProperty) :, +					mapValue.toString());, +		for (Object item : optionCollection) {, +		PropertyEditor editor = (value != null ? this.bindStatus.findEditor(value.getClass()) : null);, +		return ValueFormatter.getDisplayString(value, editor, this.htmlEscape);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/SelectTag.java]