[+++ b/spring-web/src/main/java/org/springframework/http/codec/xml/Jaxb2XmlEncoder.java, + * Encode from single value to a byte stream containing XML elements., + *, + * <p>{@link javax.xml.bind.annotation.XmlElements @XmlElements} and, + * {@link javax.xml.bind.annotation.XmlElement @XmlElement} can be used to specify how, + * collections should be marshalled., +++ b/spring-web/src/main/java/org/springframework/http/codec/xml/Jaxb2XmlEncoder.java, + * Encode from single value to a byte stream containing XML elements., + *, + * <p>{@link javax.xml.bind.annotation.XmlElements @XmlElements} and, + * {@link javax.xml.bind.annotation.XmlElement @XmlElement} can be used to specify how, + * collections should be marshalled., +++ b/spring-web/src/test/java/org/springframework/http/codec/xml/Jaxb2XmlEncoderTests.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Arrays;, +import java.util.List;, +import reactor.core.publisher.Mono;, +import javax.xml.bind.annotation.XmlElement;, +import javax.xml.bind.annotation.XmlElements;, +import javax.xml.bind.annotation.XmlRootElement;, +, +	public void encode() {, +		Mono<Pojo> source = Mono.just(new Pojo("foofoo", "barbar"));, +				.verifyComplete();, +	}, +, +	@Test, +	public void encodeElementsWithCommonType() {, +		Mono<Container> source = Mono.just(new Container());, +		Flux<DataBuffer> output = this.encoder.encode(source, this.bufferFactory,, +				ResolvableType.forClass(Pojo.class),, +				MediaType.APPLICATION_XML, Collections.emptyMap());, +, +		StepVerifier.create(output), +				.consumeNextWith(dataBuffer -> {, +					try {, +						String s = DataBufferTestUtils, +								.dumpString(dataBuffer, StandardCharsets.UTF_8);, +						assertThat(s, isSimilarTo("<?xml version='1.0' encoding='UTF-8' standalone='yes'?>" +, +								"<container><foo><name>name1</name></foo><bar><title>title1</title></bar></container>"));, +					}, +					finally {, +						DataBufferUtils.release(dataBuffer);, +					}, +				}), +				.verifyComplete();, +	}, +, +, +	public static class Model {}, +, +	public static class Foo extends Model {, +, +		private String name;, +, +		public Foo(String name) {, +			this.name = name;, +		}, +, +		public String getName() {, +			return this.name;, +		}, +, +		public void setName(String name) {, +			this.name = name;, +		}, +	}, +, +	public static class Bar extends Model {, +, +		private String title;, +, +		public Bar(String title) {, +			this.title = title;, +		}, +, +		public String getTitle() {, +			return title;, +		}, +, +		public void setTitle(String title) {, +			this.title = title;, +		}, +	}, +, +	@XmlRootElement, +	public static class Container {, +, +		@XmlElements({, +				@XmlElement(name="foo", type=Foo.class),, +				@XmlElement(name="bar", type=Bar.class), +		}), +		public List<Model> getElements() {, +			return Arrays.asList(new Foo("name1"), new Bar("title1"));, +		}]