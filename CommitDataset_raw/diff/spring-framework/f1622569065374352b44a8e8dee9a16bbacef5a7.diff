[+++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, + * Copyright 2002-2016 the original author or authors., +	 * Find a {@code ContentNegotiationStrategy} of the given type., +	 * @param strategyType the strategy type, +	 * @return the first matching strategy or {@code null}., +	 * @since 4.3, +	 */, +	@SuppressWarnings("unchecked"), +	public <T extends ContentNegotiationStrategy> T getStrategy(Class<T> strategyType) {, +		for (ContentNegotiationStrategy strategy : getStrategies()) {, +			if (strategyType.isInstance(strategy)) {, +				return (T) strategy;, +			}, +		}, +		return null;, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, + * Copyright 2002-2016 the original author or authors., +	 * Find a {@code ContentNegotiationStrategy} of the given type., +	 * @param strategyType the strategy type, +	 * @return the first matching strategy or {@code null}., +	 * @since 4.3, +	 */, +	@SuppressWarnings("unchecked"), +	public <T extends ContentNegotiationStrategy> T getStrategy(Class<T> strategyType) {, +		for (ContentNegotiationStrategy strategy : getStrategies()) {, +			if (strategyType.isInstance(strategy)) {, +				return (T) strategy;, +			}, +		}, +		return null;, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/web/accept/PathExtensionContentNegotiationStrategy.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.util.Assert;, +	/**, +	 * A public method exposing the knowledge of the path extension strategy to, +	 * resolve file extensions to a MediaType in this case for a given, +	 * {@link Resource}. The method first looks up any explicitly registered, +	 * file extensions first and then falls back on JAF if available., +	 * @param resource the resource to look up, +	 * @return the MediaType for the extension or {@code null}., +	 * @since 4.3, +	 */, +	public MediaType getMediaTypeForResource(Resource resource) {, +		Assert.notNull(resource);, +		MediaType mediaType = null;, +		String filename = resource.getFilename();, +		String extension = StringUtils.getFilenameExtension(filename);, +		if (extension != null) {, +			mediaType = lookupMediaType(extension);, +		}, +		if (mediaType == null && JAF_PRESENT) {, +			mediaType = JafMediaTypeFactory.getMediaType(filename);, +		}, +		if (MediaType.APPLICATION_OCTET_STREAM.equals(mediaType)) {, +			mediaType = null;, +		}, +		return mediaType;, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, + * Copyright 2002-2016 the original author or authors., +	 * Find a {@code ContentNegotiationStrategy} of the given type., +	 * @param strategyType the strategy type, +	 * @return the first matching strategy or {@code null}., +	 * @since 4.3, +	 */, +	@SuppressWarnings("unchecked"), +	public <T extends ContentNegotiationStrategy> T getStrategy(Class<T> strategyType) {, +		for (ContentNegotiationStrategy strategy : getStrategies()) {, +			if (strategyType.isInstance(strategy)) {, +				return (T) strategy;, +			}, +		}, +		return null;, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/web/accept/PathExtensionContentNegotiationStrategy.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.util.Assert;, +	/**, +	 * A public method exposing the knowledge of the path extension strategy to, +	 * resolve file extensions to a MediaType in this case for a given, +	 * {@link Resource}. The method first looks up any explicitly registered, +	 * file extensions first and then falls back on JAF if available., +	 * @param resource the resource to look up, +	 * @return the MediaType for the extension or {@code null}., +	 * @since 4.3, +	 */, +	public MediaType getMediaTypeForResource(Resource resource) {, +		Assert.notNull(resource);, +		MediaType mediaType = null;, +		String filename = resource.getFilename();, +		String extension = StringUtils.getFilenameExtension(filename);]