[+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheOperationSourcePointcut.java, +import org.springframework.cache.CacheManager;, + * @author Juergen Hoeller, +		if (CacheManager.class.isAssignableFrom(targetClass)) {, +			return false;, +		}, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheOperationSourcePointcut.java, +import org.springframework.cache.CacheManager;, + * @author Juergen Hoeller, +		if (CacheManager.class.isAssignableFrom(targetClass)) {, +			return false;, +		}, +++ b/spring-context/src/main/java/org/springframework/context/event/EventListenerMethodProcessor.java, +import org.springframework.beans.factory.config.BeanFactoryPostProcessor;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, + * Registers {@link EventListener} methods as individual {@link ApplicationListener} instances., + * Implements {@link BeanFactoryPostProcessor} (as of 5.1) primarily for early retrieval,, + * avoiding AOP checks for this processor bean and its {@link EventListenerFactory} delegates., + * @see EventListenerFactory, + * @see DefaultEventListenerFactory, +public class EventListenerMethodProcessor, +		implements SmartInitializingSingleton, ApplicationContextAware, BeanFactoryPostProcessor {, +	@Nullable, +	private ConfigurableListableBeanFactory beanFactory;, +, +	@Nullable, +	private List<EventListenerFactory> eventListenerFactories;, +, +	@Override, +	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {, +		this.beanFactory = beanFactory;, +, +		Map<String, EventListenerFactory> beans = beanFactory.getBeansOfType(EventListenerFactory.class, false, false);, +		List<EventListenerFactory> factories = new ArrayList<>(beans.values());, +		AnnotationAwareOrderComparator.sort(factories);, +		this.eventListenerFactories = factories;, +		ConfigurableListableBeanFactory beanFactory = this.beanFactory;, +		Assert.state(this.beanFactory != null, "No ConfigurableListableBeanFactory set");, +		String[] beanNames = beanFactory.getBeanNamesForType(Object.class);, +					type = AutoProxyUtils.determineTargetClass(beanFactory, beanName);, +									beanFactory, ScopedProxyUtils.getTargetBeanName(beanName));, +						processBean(beanName, type);, +	private void processBean(final String beanName, final Class<?> targetType) {, +				ConfigurableApplicationContext context = this.applicationContext;, +				Assert.state(context != null, "No ApplicationContext set");, +				List<EventListenerFactory> factories = this.eventListenerFactories;, +				Assert.state(factories != null, "EventListenerFactory List not initialized");, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheOperationSourcePointcut.java, +import org.springframework.cache.CacheManager;, + * @author Juergen Hoeller, +		if (CacheManager.class.isAssignableFrom(targetClass)) {, +			return false;, +		}, +++ b/spring-context/src/main/java/org/springframework/context/event/EventListenerMethodProcessor.java, +import org.springframework.beans.factory.config.BeanFactoryPostProcessor;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, + * Registers {@link EventListener} methods as individual {@link ApplicationListener} instances., + * Implements {@link BeanFactoryPostProcessor} (as of 5.1) primarily for early retrieval,, + * avoiding AOP checks for this processor bean and its {@link EventListenerFactory} delegates., + * @see EventListenerFactory, + * @see DefaultEventListenerFactory, +public class EventListenerMethodProcessor, +		implements SmartInitializingSingleton, ApplicationContextAware, BeanFactoryPostProcessor {, +	@Nullable, +	private ConfigurableListableBeanFactory beanFactory;, +, +	@Nullable, +	private List<EventListenerFactory> eventListenerFactories;, +, +	@Override, +	public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {, +		this.beanFactory = beanFactory;, +, +		Map<String, EventListenerFactory> beans = beanFactory.getBeansOfType(EventListenerFactory.class, false, false);, +		List<EventListenerFactory> factories = new ArrayList<>(beans.values());, +		AnnotationAwareOrderComparator.sort(factories);, +		this.eventListenerFactories = factories;, +		ConfigurableListableBeanFactory beanFactory = this.beanFactory;, +		Assert.state(this.beanFactory != null, "No ConfigurableListableBeanFactory set");, +		String[] beanNames = beanFactory.getBeanNamesForType(Object.class);, +					type = AutoProxyUtils.determineTargetClass(beanFactory, beanName);, +									beanFactory, ScopedProxyUtils.getTargetBeanName(beanName));, +						processBean(beanName, type);, +	private void processBean(final String beanName, final Class<?> targetType) {, +				ConfigurableApplicationContext context = this.applicationContext;, +				Assert.state(context != null, "No ApplicationContext set");, +				List<EventListenerFactory> factories = this.eventListenerFactories;, +				Assert.state(factories != null, "EventListenerFactory List not initialized");, +++ b/spring-tx/src/main/java/org/springframework/transaction/annotation/AbstractTransactionManagementConfiguration.java, + * Copyright 2002-2018 the original author or authors., +	public static TransactionalEventListenerFactory transactionalEventListenerFactory() {, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheOperationSourcePointcut.java, +import org.springframework.cache.CacheManager;, + * @author Juergen Hoeller, +		if (CacheManager.class.isAssignableFrom(targetClass)) {, +			return false;, +		}, +++ b/spring-context/src/main/java/org/springframework/context/event/EventListenerMethodProcessor.java, +import org.springframework.beans.factory.config.BeanFactoryPostProcessor;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;]