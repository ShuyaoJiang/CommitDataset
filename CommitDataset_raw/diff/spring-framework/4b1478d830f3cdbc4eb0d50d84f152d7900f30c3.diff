[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/DeclareParentsAdvisor.java, +		ClassFilter exclusion = clazz -> !(introducedInterface.isAssignableFrom(clazz));, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/DeclareParentsAdvisor.java, +		ClassFilter exclusion = clazz -> !(introducedInterface.isAssignableFrom(clazz));, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java, +				(Converter<Method, Annotation>) method -> {, +		Comparator<Method> methodNameComparator = new ConvertingComparator<>(Method::getName);, +		ReflectionUtils.doWithMethods(aspectClass, method -> {, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/DeclareParentsAdvisor.java, +		ClassFilter exclusion = clazz -> !(introducedInterface.isAssignableFrom(clazz));, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java, +				(Converter<Method, Annotation>) method -> {, +		Comparator<Method> methodNameComparator = new ConvertingComparator<>(Method::getName);, +		ReflectionUtils.doWithMethods(aspectClass, method -> {, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, +			return CompletableFuture.supplyAsync(() -> {, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/DeclareParentsAdvisor.java, +		ClassFilter exclusion = clazz -> !(introducedInterface.isAssignableFrom(clazz));, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java, +				(Converter<Method, Annotation>) method -> {, +		Comparator<Method> methodNameComparator = new ConvertingComparator<>(Method::getName);, +		ReflectionUtils.doWithMethods(aspectClass, method -> {, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, +			return CompletableFuture.supplyAsync(() -> {, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionInterceptor.java, +		Callable<Object> task = () -> {, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/DeclareParentsAdvisor.java, +		ClassFilter exclusion = clazz -> !(introducedInterface.isAssignableFrom(clazz));, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java, +				(Converter<Method, Annotation>) method -> {, +		Comparator<Method> methodNameComparator = new ConvertingComparator<>(Method::getName);, +		ReflectionUtils.doWithMethods(aspectClass, method -> {, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, +			return CompletableFuture.supplyAsync(() -> {, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionInterceptor.java, +		Callable<Object> task = () -> {, +++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, +		Collections.sort(matches, (m1, m2) -> m2.toString().compareTo(m1.toString()));, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/DeclareParentsAdvisor.java, +		ClassFilter exclusion = clazz -> !(introducedInterface.isAssignableFrom(clazz));, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java, +				(Converter<Method, Annotation>) method -> {, +		Comparator<Method> methodNameComparator = new ConvertingComparator<>(Method::getName);, +		ReflectionUtils.doWithMethods(aspectClass, method -> {, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, +			return CompletableFuture.supplyAsync(() -> {, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionInterceptor.java, +		Callable<Object> task = () -> {, +++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, +		Collections.sort(matches, (m1, m2) -> m2.toString().compareTo(m1.toString()));, +++ b/spring-beans/src/main/java/org/springframework/beans/PropertyMatches.java, +			ReflectionUtils.doWithFields(beanClass, field -> {, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/DeclareParentsAdvisor.java, +		ClassFilter exclusion = clazz -> !(introducedInterface.isAssignableFrom(clazz));, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java, +				(Converter<Method, Annotation>) method -> {, +		Comparator<Method> methodNameComparator = new ConvertingComparator<>(Method::getName);, +		ReflectionUtils.doWithMethods(aspectClass, method -> {, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, +			return CompletableFuture.supplyAsync(() -> {, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionInterceptor.java, +		Callable<Object> task = () -> {, +++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, +		Collections.sort(matches, (m1, m2) -> m2.toString().compareTo(m1.toString()));, +++ b/spring-beans/src/main/java/org/springframework/beans/PropertyMatches.java, +			ReflectionUtils.doWithFields(beanClass, field -> {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +				ReflectionUtils.doWithMethods(beanClass, method -> {, +			ReflectionUtils.doWithLocalFields(targetClass, field -> {, +			ReflectionUtils.doWithLocalMethods(targetClass, method -> {, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/DeclareParentsAdvisor.java, +		ClassFilter exclusion = clazz -> !(introducedInterface.isAssignableFrom(clazz));, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java, +				(Converter<Method, Annotation>) method -> {, +		Comparator<Method> methodNameComparator = new ConvertingComparator<>(Method::getName);, +		ReflectionUtils.doWithMethods(aspectClass, method -> {, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, +			return CompletableFuture.supplyAsync(() -> {, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionInterceptor.java, +		Callable<Object> task = () -> {, +++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, +		Collections.sort(matches, (m1, m2) -> m2.toString().compareTo(m1.toString()));, +++ b/spring-beans/src/main/java/org/springframework/beans/PropertyMatches.java, +			ReflectionUtils.doWithFields(beanClass, field -> {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +				ReflectionUtils.doWithMethods(beanClass, method -> {, +			ReflectionUtils.doWithLocalFields(targetClass, field -> {, +			ReflectionUtils.doWithLocalMethods(targetClass, method -> {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InitDestroyAnnotationBeanPostProcessor.java, +			ReflectionUtils.doWithLocalMethods(targetClass, method -> {, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/DeclareParentsAdvisor.java, +		ClassFilter exclusion = clazz -> !(introducedInterface.isAssignableFrom(clazz));, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/ReflectiveAspectJAdvisorFactory.java, +				(Converter<Method, Annotation>) method -> {, +		Comparator<Method> methodNameComparator = new ConvertingComparator<>(Method::getName);, +		ReflectionUtils.doWithMethods(aspectClass, method -> {, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, +			return CompletableFuture.supplyAsync(() -> {, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionInterceptor.java, +		Callable<Object> task = () -> {]