[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +		A ann = null;, +		Class beanType = getType(beanName);, +		if (beanType != null) {, +			ann = AnnotationUtils.findAnnotation(beanType, annotationType);, +		}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +		A ann = null;, +		Class beanType = getType(beanName);, +		if (beanType != null) {, +			ann = AnnotationUtils.findAnnotation(beanType, annotationType);, +		}, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/AnnotationConfigApplicationContextTests.java, +import java.util.Map;, +import org.springframework.beans.factory.FactoryBean;, +import static org.springframework.util.StringUtils.*;, + * @author Juergen Hoeller, +		Map<String, Object> beans = context.getBeansWithAnnotation(Configuration.class);, +		assertEquals(1, beans.size());, +		Map<String, Object> beans = context.getBeansWithAnnotation(Configuration.class);, +		assertEquals(2, beans.size());, +	}, +, +	@Test, +	public void getBeansWithAnnotation() {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		context.register(Config.class, NameConfig.class, UntypedFactoryBean.class);, +		context.refresh();, +		context.getBean("testBean");, +		context.getBean("name");, +		Map<String, Object> beans = context.getBeansWithAnnotation(Configuration.class);, +		assertEquals(2, beans.size());, +	static class UntypedFactoryBean implements FactoryBean {, +, +		public Object getObject() {, +			return null;, +		}, +, +		public Class getObjectType() {, +			return null;, +		}, +, +		public boolean isSingleton() {, +			return false;, +		}, +	}]