[+++ b/org.springframework.aop/src/main/java/org/springframework/aop/support/AbstractRegexpMethodPointcut.java, + * Copyright 2002-2009 the original author or authors., +	/** Regular expressions <strong>not</strong> to match */, +	 * <p>This method will be invoked from the {@link #setPatterns} method,, +	/**, +	 * Subclasses must implement this to initialize regexp pointcuts., +	 * Can be invoked multiple times., +	 * <p>This method will be invoked from the {@link #setExcludedPatterns} method,, +	 * and also on deserialization., +	 * @param patterns the patterns to initialize, +	 * @throws IllegalArgumentException in case of an invalid pattern, +	 */, +	protected abstract void initExcludedPatternRepresentation(String[] patterns) throws IllegalArgumentException;, +		for (String pattern : this.patterns) {, +		for (String excludedPattern : this.excludedPatterns) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/support/AbstractRegexpMethodPointcut.java, + * Copyright 2002-2009 the original author or authors., +	/** Regular expressions <strong>not</strong> to match */, +	 * <p>This method will be invoked from the {@link #setPatterns} method,, +	/**, +	 * Subclasses must implement this to initialize regexp pointcuts., +	 * Can be invoked multiple times., +	 * <p>This method will be invoked from the {@link #setExcludedPatterns} method,, +	 * and also on deserialization., +	 * @param patterns the patterns to initialize, +	 * @throws IllegalArgumentException in case of an invalid pattern, +	 */, +	protected abstract void initExcludedPatternRepresentation(String[] patterns) throws IllegalArgumentException;, +		for (String pattern : this.patterns) {, +		for (String excludedPattern : this.excludedPatterns) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/support/JdkRegexpMethodPointcut.java, + * Copyright 2002-2009 the original author or authors., +	private Pattern[] compiledPatterns = new Pattern[0];, +	private Pattern[] compiledExclusionPatterns = new Pattern[0];, +	 * Initialize exclusion {@link Pattern Patterns} from the supplied <code>String[]</code>., +	 */, +	@Override, +	protected void initExcludedPatternRepresentation(String[] excludedPatterns) throws PatternSyntaxException {, +		this.compiledExclusionPatterns = compilePatterns(excludedPatterns);, +	}, +, +	/**, +, +	private Pattern[] compilePatterns(String[] source) throws PatternSyntaxException {]