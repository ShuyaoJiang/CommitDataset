[+++ b/spring-test/src/main/java/org/springframework/mock/web/MockMultipartFile.java, +, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockMultipartFile.java, +, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockMultipartHttpServletRequest.java, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockMultipartFile.java, +, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockMultipartHttpServletRequest.java, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java, +		if (registration == null) {, +			throw new IllegalStateException("ServletRegistration not found for Servlet '" + name + "'");, +		}, +					logger.info("Found Servlet mapping '" + path + "' for Servlet '" + name + "'");, +		throw new IllegalArgumentException("Expected a single Servlet mapping: " +, +				"Actual mappings: " + mappings + " for Servlet '" + name + "'");, +	protected ServerHttpRequest createRequest(HttpServletRequest request, AsyncContext context) throws IOException {, +		Assert.notNull(this.servletPath, "Servlet path is not initialized");, +	protected ServerHttpResponse createResponse(HttpServletResponse response, AsyncContext context) throws IOException {, +		public void onTimeout(AsyncEvent event) {, +		public void onError(AsyncEvent event) {, +		public void onStartAsync(AsyncEvent event) {, +			// no-op, +		public void onComplete(AsyncEvent event) {, +			// no-op, +		public HandlerResultSubscriber(AsyncContext asyncContext) {, +			// no-op, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockMultipartFile.java, +, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockMultipartHttpServletRequest.java, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java, +		if (registration == null) {, +			throw new IllegalStateException("ServletRegistration not found for Servlet '" + name + "'");, +		}, +					logger.info("Found Servlet mapping '" + path + "' for Servlet '" + name + "'");, +		throw new IllegalArgumentException("Expected a single Servlet mapping: " +, +				"Actual mappings: " + mappings + " for Servlet '" + name + "'");, +	protected ServerHttpRequest createRequest(HttpServletRequest request, AsyncContext context) throws IOException {, +		Assert.notNull(this.servletPath, "Servlet path is not initialized");, +	protected ServerHttpResponse createResponse(HttpServletResponse response, AsyncContext context) throws IOException {, +		public void onTimeout(AsyncEvent event) {, +		public void onError(AsyncEvent event) {, +		public void onStartAsync(AsyncEvent event) {, +			// no-op, +		public void onComplete(AsyncEvent event) {, +			// no-op, +		public HandlerResultSubscriber(AsyncContext asyncContext) {, +			// no-op, +++ b/spring-web/src/test/java/org/springframework/mock/web/test/HeaderValueHolder.java, +		if (value != null) {, +	}, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockMultipartFile.java, +, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockMultipartHttpServletRequest.java, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java, +		if (registration == null) {, +			throw new IllegalStateException("ServletRegistration not found for Servlet '" + name + "'");, +		}, +					logger.info("Found Servlet mapping '" + path + "' for Servlet '" + name + "'");, +		throw new IllegalArgumentException("Expected a single Servlet mapping: " +, +				"Actual mappings: " + mappings + " for Servlet '" + name + "'");, +	protected ServerHttpRequest createRequest(HttpServletRequest request, AsyncContext context) throws IOException {, +		Assert.notNull(this.servletPath, "Servlet path is not initialized");, +	protected ServerHttpResponse createResponse(HttpServletResponse response, AsyncContext context) throws IOException {, +		public void onTimeout(AsyncEvent event) {, +		public void onError(AsyncEvent event) {, +		public void onStartAsync(AsyncEvent event) {, +			// no-op, +		public void onComplete(AsyncEvent event) {, +			// no-op, +		public HandlerResultSubscriber(AsyncContext asyncContext) {, +			// no-op, +++ b/spring-web/src/test/java/org/springframework/mock/web/test/HeaderValueHolder.java, +		if (value != null) {, +	}, +++ b/spring-web/src/test/java/org/springframework/mock/web/test/MockExpressionEvaluator.java, +			public Object evaluate(javax.servlet.jsp.el.VariableResolver variableResolver) throws javax.servlet.jsp.el.ELException {, +	public Object evaluate(String expression, Class expectedType, javax.servlet.jsp.el.VariableResolver variableResolver,, +	protected Object doEvaluate(String expression, Class expectedType, javax.servlet.jsp.el.FunctionMapper functionMapper), +			throws javax.servlet.jsp.el.ELException {, +			return ExpressionEvaluatorManager.evaluate("JSP EL expression", expression, expectedType, this.pageContext);, +			throw new javax.servlet.jsp.el.ELException("Parsing of JSP EL expression \"" + expression + "\" failed", ex);, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockMultipartFile.java, +, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockMultipartHttpServletRequest.java, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java, +		if (registration == null) {, +			throw new IllegalStateException("ServletRegistration not found for Servlet '" + name + "'");, +		}, +					logger.info("Found Servlet mapping '" + path + "' for Servlet '" + name + "'");, +		throw new IllegalArgumentException("Expected a single Servlet mapping: " +, +				"Actual mappings: " + mappings + " for Servlet '" + name + "'");, +	protected ServerHttpRequest createRequest(HttpServletRequest request, AsyncContext context) throws IOException {, +		Assert.notNull(this.servletPath, "Servlet path is not initialized");, +	protected ServerHttpResponse createResponse(HttpServletResponse response, AsyncContext context) throws IOException {, +		public void onTimeout(AsyncEvent event) {, +		public void onError(AsyncEvent event) {, +		public void onStartAsync(AsyncEvent event) {, +			// no-op, +		public void onComplete(AsyncEvent event) {, +			// no-op]