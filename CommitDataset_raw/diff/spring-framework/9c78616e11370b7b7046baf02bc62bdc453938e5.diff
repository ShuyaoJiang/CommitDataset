[+++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binding.java, +	 * If this Binding is editable., +	 * Used to determine if the user can edit the field value., +	 * A Binding that is not editable cannot have source values applied and cannot be committed., +	boolean isEditable();, +	, +	/**, +	 * If this Binding is enabled., +	 * Used to determine if the user can interact with the field., +	 * A Binding that is not enabled cannot have source values applied and cannot be committed., +	 */, +	boolean isEnabled();, +	, +	/**, +	 * If this Binding is visible., +	 * Used to determine if the user can see the field., +	 * A Binding that is not visible cannot have source values applied and cannot be committed. , +	 */, +	boolean isVisible();, +	 * @throws IllegalStateException if {@link #isEditable()}, +	 * An alert that communicates current status to the user., +	 * Returns <code>null</code> if {@link BindingStatus#CLEAN} and {@link ValidationStatus#NOT_VALIDATED}., +	 * Returns a {@link Severity#INFO} Alert with code <code>bindSuccess</code> when {@link BindingStatus#COMMITTED}., +	 * Returns a {@link Severity#ERROR} Alert with code <code>typeMismatch</code> when {@link BindingStatus#INVALID_SOURCE_VALUE} or {@link BindingStatus#COMMIT_FAILURE} due to a value parse / type conversion error., +	 * Returns a {@link Severity#FATAL} Alert with code <code>internalError</code> when {@link BindingStatus#COMMIT_FAILURE} due to a unexpected runtime exception., +	 * Returns a {@link Severity#INFO} Alert describing results of validation if {@link ValidationStatus#VALID} or {@link ValidationStatus#INVALID}., +	 * @throws IllegalStateException if not {@link BindingStatus#DIRTY} or {@link #isEditable()}, +	 * Clear the buffered value without committing., +	 * @throws IllegalStateException if BindingStatus is CLEAN or COMMITTED., +	 */, +	void revert();, +	, +	/**, +	boolean isList();, +	Binding getListElementBinding(int index);, +	Binding getMapValueBinding(Object key);, +	 * If a list binding, expects the model value to be a potential list element & uses the configured element formatter., +	 * Binding states., +	, +	/**, +	 * Validation states., +	 * @author Keith Donald, +	 */, +	public enum ValidationStatus {, +, +		/**, +		 * Initial state: No validation has run., +		 */, +		NOT_VALIDATED,, +		, +		/**, +		 * Validation has succeeded., +		 */, +		VALID,, +		, +		/**, +		 * Validation has failed., +		 */, +		INVALID, +	}, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binding.java, +	 * If this Binding is editable., +	 * Used to determine if the user can edit the field value., +	 * A Binding that is not editable cannot have source values applied and cannot be committed., +	boolean isEditable();, +	, +	/**, +	 * If this Binding is enabled., +	 * Used to determine if the user can interact with the field., +	 * A Binding that is not enabled cannot have source values applied and cannot be committed., +	 */, +	boolean isEnabled();, +	, +	/**, +	 * If this Binding is visible., +	 * Used to determine if the user can see the field., +	 * A Binding that is not visible cannot have source values applied and cannot be committed. , +	 */, +	boolean isVisible();, +	 * @throws IllegalStateException if {@link #isEditable()}, +	 * An alert that communicates current status to the user., +	 * Returns <code>null</code> if {@link BindingStatus#CLEAN} and {@link ValidationStatus#NOT_VALIDATED}., +	 * Returns a {@link Severity#INFO} Alert with code <code>bindSuccess</code> when {@link BindingStatus#COMMITTED}., +	 * Returns a {@link Severity#ERROR} Alert with code <code>typeMismatch</code> when {@link BindingStatus#INVALID_SOURCE_VALUE} or {@link BindingStatus#COMMIT_FAILURE} due to a value parse / type conversion error., +	 * Returns a {@link Severity#FATAL} Alert with code <code>internalError</code> when {@link BindingStatus#COMMIT_FAILURE} due to a unexpected runtime exception., +	 * Returns a {@link Severity#INFO} Alert describing results of validation if {@link ValidationStatus#VALID} or {@link ValidationStatus#INVALID}., +	 * @throws IllegalStateException if not {@link BindingStatus#DIRTY} or {@link #isEditable()}, +	 * Clear the buffered value without committing., +	 * @throws IllegalStateException if BindingStatus is CLEAN or COMMITTED., +	 */, +	void revert();, +	, +	/**, +	boolean isList();, +	Binding getListElementBinding(int index);, +	Binding getMapValueBinding(Object key);, +	 * If a list binding, expects the model value to be a potential list element & uses the configured element formatter., +	 * Binding states., +	, +	/**]