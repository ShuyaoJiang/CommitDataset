[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +		ResourceLoaderAware, BeanClassLoaderAware, EnvironmentAware, PriorityOrdered {, +		return Ordered.LOWEST_PRECEDENCE;  // within PriorityOrdered, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +		ResourceLoaderAware, BeanClassLoaderAware, EnvironmentAware, PriorityOrdered {, +		return Ordered.LOWEST_PRECEDENCE;  // within PriorityOrdered, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +		PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());, +		PostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, this);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +		ResourceLoaderAware, BeanClassLoaderAware, EnvironmentAware, PriorityOrdered {, +		return Ordered.LOWEST_PRECEDENCE;  // within PriorityOrdered, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +		PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());, +		PostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, this);, +++ b/spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.context.support;, +, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.HashSet;, +import java.util.LinkedList;, +import java.util.List;, +import java.util.Map;, +import java.util.Set;, +import java.util.concurrent.ConcurrentHashMap;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +import org.springframework.beans.factory.config.BeanFactoryPostProcessor;, +import org.springframework.beans.factory.config.BeanPostProcessor;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.beans.factory.support.BeanDefinitionRegistry;, +import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;, +import org.springframework.beans.factory.support.MergedBeanDefinitionPostProcessor;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +import org.springframework.context.ApplicationListener;, +import org.springframework.context.ConfigurableApplicationContext;, +import org.springframework.core.OrderComparator;, +import org.springframework.core.Ordered;, +import org.springframework.core.PriorityOrdered;, +, +/**, + * Delegate for AbstractApplicationContext's post-processor handling., + *, + * @author Juergen Hoeller, + * @since 4.0, + */, +class PostProcessorRegistrationDelegate {, +, +	public static void invokeBeanFactoryPostProcessors(, +			ConfigurableListableBeanFactory beanFactory, List<BeanFactoryPostProcessor> beanFactoryPostProcessors) {, +, +		// Invoke BeanDefinitionRegistryPostProcessors first, if any., +		Set<String> processedBeans = new HashSet<String>();, +, +		if (beanFactory instanceof BeanDefinitionRegistry) {, +			BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;, +			List<BeanFactoryPostProcessor> regularPostProcessors = new LinkedList<BeanFactoryPostProcessor>();, +			List<BeanDefinitionRegistryPostProcessor> registryPostProcessors =, +					new LinkedList<BeanDefinitionRegistryPostProcessor>();, +, +			for (BeanFactoryPostProcessor postProcessor : beanFactoryPostProcessors) {, +				if (postProcessor instanceof BeanDefinitionRegistryPostProcessor) {, +					BeanDefinitionRegistryPostProcessor registryPostProcessor =, +							(BeanDefinitionRegistryPostProcessor) postProcessor;, +					registryPostProcessor.postProcessBeanDefinitionRegistry(registry);, +					registryPostProcessors.add(registryPostProcessor);, +				}, +				else {, +					regularPostProcessors.add(postProcessor);, +				}, +			}, +, +			// Do not initialize FactoryBeans here: We need to leave all regular beans, +			// uninitialized to let the bean factory post-processors apply to them!, +			// Separate between BeanDefinitionRegistryPostProcessors that implement, +			// PriorityOrdered, Ordered, and the rest., +			String[] postProcessorNames =, +					beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);, +, +			// First, invoke the BeanDefinitionRegistryPostProcessors that implement PriorityOrdered., +			List<BeanDefinitionRegistryPostProcessor> priorityOrderedPostProcessors = new ArrayList<BeanDefinitionRegistryPostProcessor>();]