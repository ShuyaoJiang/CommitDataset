[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +				this.classValuesAsString, this.nestedAnnotationsAsMap, true) : null);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +				this.classValuesAsString, this.nestedAnnotationsAsMap, true) : null);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +, +	private static final Object DEFAULT_VALUE_PLACEHOLDER = "<SPRING DEFAULT VALUE PLACEHOLDER>";, +	 * @see #getAnnotationAttributes(AnnotatedElement, Annotation), +	 * @param classValuesAsString whether to convert Class references into Strings (for, +	 * @param nestedAnnotationsAsMap whether to convert nested annotations into, +	 * {@code Annotation} instances, +	 * @param annotatedElement the element that is annotated with the supplied annotation;, +	 * may be {@code null} if unknown, +	 * @return the annotation attributes (a specialized Map) with attribute names as keys, +	 * and corresponding attribute values as values; never {@code null}, +	 * @param annotatedElement the element that is annotated with the supplied annotation;, +	 * may be {@code null} if unknown, +	 * @param nestedAnnotationsAsMap whether to convert nested annotations into, +	 * {@code Annotation} instances, +		return getAnnotationAttributes(annotatedElement, annotation, classValuesAsString, nestedAnnotationsAsMap, false);, +	 * <p><strong>NOTE</strong>: this variant of {@code getAnnotationAttributes()} is, +	 * only intended for use within the framework. Specifically, the, +	 * {@code defaultValuesAsPlaceholder} flag can be set to {@code true} in order to, +	 * support processing of attribute aliases while merging attributes within an annotation, +	 * hierarchy. If this method is invoked with {@code defaultValuesAsPlaceholder} set to, +	 * {@code true}:, +	 * <ol>, +	 * <li>The supplied annotation will <strong>not</strong> be, +	 * {@linkplain #synthesizeAnnotation synthesized} before retrieving its attributes.</li>, +	 * <li>The resulting, merged annotation attributes should eventually be, +	 * {@linkplain #postProcessAnnotationAttributes post-processed} in order to, +	 * ensure that placeholders have been replaced by actual default values and, +	 * in order to enforce {@code @AliasFor} semantics.</li>, +	 * </ol>, +	 *, +	 * @param annotatedElement the element that is annotated with the supplied annotation;, +	 * may be {@code null} if unknown, +	 * @param nestedAnnotationsAsMap whether to convert nested annotations into, +	 * {@code Annotation} instances, +	 * @see #postProcessAnnotationAttributes, +	static AnnotationAttributes getAnnotationAttributes(AnnotatedElement annotatedElement, Annotation annotation,, +			boolean classValuesAsString, boolean nestedAnnotationsAsMap, boolean defaultValuesAsPlaceholder) {, +		if (!defaultValuesAsPlaceholder) {, +	 * @param classValuesAsString whether to convert Class references into Strings (for, +	 * @param nestedAnnotationsAsMap whether to convert nested annotations into, +	 * {@code Annotation} instances, +	 * Post-process the supplied {@link AnnotationAttributes}., +	 * <p>Specifically, this method enforces <em>attribute alias</em> semantics, +	 * for annotation attributes that are annotated with {@link AliasFor @AliasFor}, +	 * and replaces {@linkplain #DEFAULT_VALUE_PLACEHOLDER placeholders} with their, +	 * original default values., +	 *, +	 * @param element the element that is annotated with an annotation or, +	 * annotation hierarchy from which the supplied attributes were created;, +	 * may be {@code null} if unknown, +	 * @param classValuesAsString whether to convert Class references into Strings (for, +	 * compatibility with {@link org.springframework.core.type.AnnotationMetadata}), +	 * or to preserve them as Class references, +	 * @param nestedAnnotationsAsMap whether to convert nested annotations into, +	 * {@link AnnotationAttributes} maps (for compatibility with, +	 * {@link org.springframework.core.type.AnnotationMetadata}) or to preserve them as, +	 * {@code Annotation} instances, +	 * @see #getAnnotationAttributes(AnnotatedElement, Annotation, boolean, boolean, boolean), +	 * @see #DEFAULT_VALUE_PLACEHOLDER, +	 * @see #getDefaultValue(Class, String)]