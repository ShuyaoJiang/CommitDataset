[+++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/GenericBinder.java, +			nestedBindingRules = new HashMap<String, GenericBindingRule>();, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/GenericBinder.java, +			nestedBindingRules = new HashMap<String, GenericBindingRule>();, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/PropertyBinding.java, +import java.util.ArrayList;, +			getModel().setValue(newValue(getValueType()));, +		if (index < 0) {, +			throw new IllegalArgumentException("Invalid index " + index);, +		}, +		growListIfNecessary(index);, +	// subclassing hooks, +, +	protected Formatter getFormatter() {, +		return bindingContext.getFormatter();, +	}, +, +	// internal helpers, +	, +	private void growListIfNecessary(int index) {, +		List list = (List) getValue();, +		if (list == null) {, +			getModel().setValue(newListValue(getValueType()));, +			list = (List) getValue();, +		}, +		if (index >= list.size()) {, +			for (int i = list.size(); i <= index; i++) {, +				list.add(newValue(elementType));, +			}, +		}, +	}, +, +	private Object newListValue(Class<?> type) {, +		if (type.isInterface()) {, +			return newValue(ArrayList.class);, +		} else {, +			return newValue(type);, +		}, +	}, +	, +	private Object newValue(Class<?> type) {, +		try {, +			return type.newInstance();, +		} catch (InstantiationException e) {, +			throw new IllegalStateException("Could not instantiate element of type [" + type.getName() + "]", e);, +		} catch (IllegalAccessException e) {, +			throw new IllegalStateException("Could not instantiate element of type [" + type.getName() + "]", e);, +		}		, +	}, +	, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/GenericBinder.java, +			nestedBindingRules = new HashMap<String, GenericBindingRule>();, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/PropertyBinding.java, +import java.util.ArrayList;, +			getModel().setValue(newValue(getValueType()));, +		if (index < 0) {, +			throw new IllegalArgumentException("Invalid index " + index);, +		}, +		growListIfNecessary(index);, +	// subclassing hooks, +, +	protected Formatter getFormatter() {, +		return bindingContext.getFormatter();, +	}, +, +	// internal helpers, +	, +	private void growListIfNecessary(int index) {, +		List list = (List) getValue();, +		if (list == null) {, +			getModel().setValue(newListValue(getValueType()));, +			list = (List) getValue();, +		}, +		if (index >= list.size()) {, +			for (int i = list.size(); i <= index; i++) {, +				list.add(newValue(elementType));, +			}, +		}, +	}, +, +	private Object newListValue(Class<?> type) {, +		if (type.isInterface()) {, +			return newValue(ArrayList.class);, +		} else {, +			return newValue(type);, +		}, +	}, +	, +	private Object newValue(Class<?> type) {, +		try {, +			return type.newInstance();, +		} catch (InstantiationException e) {, +			throw new IllegalStateException("Could not instantiate element of type [" + type.getName() + "]", e);, +		} catch (IllegalAccessException e) {, +			throw new IllegalStateException("Could not instantiate element of type [" + type.getName() + "]", e);, +		}		, +	}, +	, +++ b/org.springframework.context/src/test/java/org/springframework/ui/binding/support/GenericBinderTests.java, +import junit.framework.Assert;]