[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/htmlunit/HtmlUnitRequestBuilder.java, +import org.springframework.util.ObjectUtils;, +		MockHttpServletRequest request = new HtmlUnitMockHttpServletRequest(servletContext, httpMethod,, +		parent(request, this.parentBuilder);, +		request.setServerName(uriComponents.getHost()); // needs to be first for additional headers, +		authType(request);, +		request.setCharacterEncoding(charset);, +		content(request, charset);, +		contextPath(request, uriComponents);, +		contentType(request);, +		cookies(request);, +		headers(request);, +		locales(request);, +		servletPath(uriComponents, request);, +		params(request, uriComponents);, +		ports(uriComponents, request);, +		request.setProtocol("HTTP/1.1");, +		request.setQueryString(uriComponents.getQuery());, +		request.setScheme(uriComponents.getScheme());, +		pathInfo(uriComponents,request);, +		return postProcess(request);, +	private void parent(MockHttpServletRequest request, RequestBuilder parent) {, +		MockHttpServletRequest parentRequest = parent.buildRequest(request.getServletContext());, +				request.getSession().setAttribute(attrName, attrValue);, +				request.addHeader(attrName, attrValue);, +			request.addParameter(paramName, paramValues);, +		if (!ObjectUtils.isEmpty(parentCookies)) {, +			request.setCookies(parentCookies);, +			request.setAttribute(parentAttrName, parentRequest.getAttribute(parentAttrName));, +	private void content(MockHttpServletRequest request, String charset) {, +			request.setContent(requestBody.getBytes(charset));, +	private void contentType(MockHttpServletRequest request) {, +		request.setContentType(contentType == null ? MediaType.ALL_VALUE.toString() : contentType);, +	private void contextPath(MockHttpServletRequest request, UriComponents uriComponents) {, +				request.setContextPath("");, +				request.setContextPath("/" + pathSegments.get(0));, +			request.setContextPath(this.contextPath);, +	private void cookies(MockHttpServletRequest request) {, +, +		String cookieHeaderValue = header("Cookie");, +				processCookie(request, cookies, new Cookie(cookieName, cookieValue));, +			processCookie(request, cookies, new Cookie(cookie.getName(), cookie.getValue()));, +, +		Cookie[] parentCookies = request.getCookies();, +, +		if (!ObjectUtils.isEmpty(cookies)) {, +			request.setCookies(cookies.toArray(new Cookie[cookies.size()]));, +	private void processCookie(MockHttpServletRequest request, List<Cookie> cookies, Cookie cookie) {, +			request.setRequestedSessionId(cookie.getValue());, +			request.setSession(httpSession(request, cookie.getValue()));, +	private void headers(MockHttpServletRequest request) {, +			request.addHeader(header.getKey(), header.getValue());, +	private void locales(MockHttpServletRequest request) {, +			request.addPreferredLocale(Locale.getDefault());, +				request.addPreferredLocale(parseLocale(locales[i]));, +	private void params(MockHttpServletRequest request, UriComponents uriComponents) {, +					request.addParameter(name, URLDecoder.decode(value, "UTF-8"));, +			request.addParameter(param.getName(), param.getValue());, +	private void pathInfo(UriComponents uriComponents, MockHttpServletRequest request) {, +		request.setPathInfo(null);, +	private void servletPath(MockHttpServletRequest request, String requestPath) {, +		String servletPath = requestPath.substring(request.getContextPath().length());, +		request.setServletPath(servletPath);, +	private void servletPath(UriComponents uriComponents, MockHttpServletRequest request) {, +		if ("".equals(request.getPathInfo())) {, +			request.setPathInfo(null);, +		servletPath(request, uriComponents.getPath());, +	private void ports(UriComponents uriComponents, MockHttpServletRequest request) {, +		request.setServerPort(serverPort);, +			request.setLocalPort(serverPort);, +			request.setRemotePort(portConnection);, +			request.setRemotePort(serverPort);, +			HttpSession session = super.getSession(false);, +			if (session == null && create) {, +				session = newSession;, +			return session;]