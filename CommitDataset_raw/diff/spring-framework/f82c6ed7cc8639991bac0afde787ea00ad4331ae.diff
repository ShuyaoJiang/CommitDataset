[+++ b/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java, +		ConversionService conversionService = (ConversionService) converterRegistry;, +		converterRegistry.addConverter(Enum.class, String.class, new EnumToStringConverter(conversionService));, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java, +		ConversionService conversionService = (ConversionService) converterRegistry;, +		converterRegistry.addConverter(Enum.class, String.class, new EnumToStringConverter(conversionService));, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/EnumToStringConverter.java, +import org.springframework.core.convert.ConversionService;, +import org.springframework.core.convert.TypeDescriptor;, +import org.springframework.core.convert.converter.ConditionalConversion;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.ReflectionUtils;, + * Calls {@link Enum#name()} to convert a source Enum to a String.  This converter will, + * not match enums with interfaces that can be converterd., + * @author Phillip Webb, +final class EnumToStringConverter implements Converter<Enum<?>, String>, ConditionalConversion {, +, +	private final ConversionService conversionService;, +, +	public EnumToStringConverter(ConversionService conversionService) {, +		this.conversionService = conversionService;, +	}, +, +	public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {, +		for (Class<?> interfaceType : ClassUtils.getAllInterfacesForClass(sourceType.getType())) {, +			if (conversionService.canConvert(TypeDescriptor.valueOf(interfaceType),, +					targetType)) {, +				return false;, +			}, +		}, +		return true;, +	}, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/DefaultConversionService.java, +		ConversionService conversionService = (ConversionService) converterRegistry;, +		converterRegistry.addConverter(Enum.class, String.class, new EnumToStringConverter(conversionService));, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/EnumToStringConverter.java, +import org.springframework.core.convert.ConversionService;, +import org.springframework.core.convert.TypeDescriptor;, +import org.springframework.core.convert.converter.ConditionalConversion;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.ReflectionUtils;, + * Calls {@link Enum#name()} to convert a source Enum to a String.  This converter will, + * not match enums with interfaces that can be converterd., + * @author Phillip Webb, +final class EnumToStringConverter implements Converter<Enum<?>, String>, ConditionalConversion {, +, +	private final ConversionService conversionService;, +, +	public EnumToStringConverter(ConversionService conversionService) {, +		this.conversionService = conversionService;, +	}, +, +	public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {, +		for (Class<?> interfaceType : ClassUtils.getAllInterfacesForClass(sourceType.getType())) {, +			if (conversionService.canConvert(TypeDescriptor.valueOf(interfaceType),, +					targetType)) {, +				return false;, +			}, +		}, +		return true;, +	}, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/GenericConversionServiceTests.java, +	@Test, +	public void testEnumToStringConversion() {, +		conversionService.addConverter(new EnumToStringConverter(conversionService));, +		String result = conversionService.convert(MyEnum.A, String.class);, +		assertEquals("A", result);, +	}, +, +	@Test, +	public void testEnumWithInterfaceToStringConversion() {, +		// SPR-9692, +		conversionService.addConverter(new EnumToStringConverter(conversionService));, +		conversionService.addConverter(new MyEnumInterfaceToStringConverter<MyEnum>());, +		String result = conversionService.convert(MyEnum.A, String.class);, +		assertEquals("1", result);, +	}, +, +	interface MyEnumInterface {, +		String getCode();, +	}, +, +	public static enum MyEnum implements MyEnumInterface {, +		A {, +			public String getCode() {, +				return "1";, +			}, +		};, +	}, +, +	private static class MyEnumInterfaceToStringConverter<T extends MyEnumInterface>, +			implements Converter<T, String> {, +		public String convert(T source) {, +			return source.getCode();, +		}, +	}]