[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java, + * <p>As of 4.2, this class supports a {@link #setSelectorHeaderName selector}, +	private volatile int cacheLimit = DEFAULT_CACHE_LIMIT;, +, +	 * Specify the {@link PathMatcher} to use., +	 */, +	public void setPathMatcher(PathMatcher pathMatcher) {, +		this.pathMatcher = pathMatcher;, +	}, +, +	/**, +	 * Return the configured {@link PathMatcher}., +	 */, +	public PathMatcher getPathMatcher() {, +		return this.pathMatcher;, +	}, +, +	/**, +		Assert.notNull(selectorHeaderName, "'selectorHeaderName' must not be null");, +	 * @since 4.2, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java, + * <p>As of 4.2, this class supports a {@link #setSelectorHeaderName selector}, +	private volatile int cacheLimit = DEFAULT_CACHE_LIMIT;, +, +	 * Specify the {@link PathMatcher} to use., +	 */, +	public void setPathMatcher(PathMatcher pathMatcher) {, +		this.pathMatcher = pathMatcher;, +	}, +, +	/**, +	 * Return the configured {@link PathMatcher}., +	 */, +	public PathMatcher getPathMatcher() {, +		return this.pathMatcher;, +	}, +, +	/**, +		Assert.notNull(selectorHeaderName, "'selectorHeaderName' must not be null");, +	 * @since 4.2, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java, + * @author Juergen Hoeller, +	private Integer cacheLimit;, +, +		initCacheLimitToUse();, +	 * When configured, the given PathMatcher is passed down to the underlying, +	 * <p>Default is a standard {@link org.springframework.util.AntPathMatcher}., +	 * @since 4.1, +	 * @see #setSubscriptionRegistry, +	 * @see DefaultSubscriptionRegistry#setPathMatcher, +	 * @see org.springframework.util.AntPathMatcher, +	private void initPathMatcherToUse() {, +		if (this.pathMatcher != null && this.subscriptionRegistry instanceof DefaultSubscriptionRegistry) {, +			((DefaultSubscriptionRegistry) this.subscriptionRegistry).setPathMatcher(this.pathMatcher);, +		}, +	}, +, +	/**, +	 * When configured, the specified cache limit is passed down to the, +	 * underlying SubscriptionRegistry, overriding any default there., +	 * <p>With a standard {@link DefaultSubscriptionRegistry}, the default, +	 * cache limit is 1024., +	 * @since 4.3.2, +	 * @see #setSubscriptionRegistry, +	 * @see DefaultSubscriptionRegistry#setCacheLimit, +	 * @see DefaultSubscriptionRegistry#DEFAULT_CACHE_LIMIT, +	 */, +	public void setCacheLimit(Integer cacheLimit) {, +		this.cacheLimit = cacheLimit;, +		initCacheLimitToUse();, +	}, +, +	private void initCacheLimitToUse() {, +		if (this.cacheLimit != null && this.subscriptionRegistry instanceof DefaultSubscriptionRegistry) {, +			((DefaultSubscriptionRegistry) this.subscriptionRegistry).setCacheLimit(this.cacheLimit);, +		}, +	}, +, +	 * @since 4.2, +	 * @since 4.2, +	 * @since 4.1, +	 * @since 4.1, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java, + * <p>As of 4.2, this class supports a {@link #setSelectorHeaderName selector}, +	private volatile int cacheLimit = DEFAULT_CACHE_LIMIT;, +, +	 * Specify the {@link PathMatcher} to use., +	 */, +	public void setPathMatcher(PathMatcher pathMatcher) {, +		this.pathMatcher = pathMatcher;, +	}, +, +	/**, +	 * Return the configured {@link PathMatcher}., +	 */, +	public PathMatcher getPathMatcher() {, +		return this.pathMatcher;, +	}, +, +	/**]