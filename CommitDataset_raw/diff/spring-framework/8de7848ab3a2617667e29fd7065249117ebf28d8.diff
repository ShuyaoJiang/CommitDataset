[+++ b/src/asciidoc/testing.adoc, +http://htmlunit.sourceforge.net/[HtmlUnit]. This simplifies performing end-to-end testing, +* Easily test HTML pages using tools such as http://htmlunit.sourceforge.net/[HtmlUnit],, +http://www.gebish.org/manual/current/testing.html#spock_junit__testng[Geb] without the, +need to deploy to a Servlet container, +* Test JavaScript within pages, +* Optionally test using mock services to speed up testing, +* Share logic between in-container end-to-end tests and out-of-container integration tests, +`MockMvc` works with templating technologies that do not rely on a Servlet Container (e.g.,, +Thymeleaf, Freemarker, Velocity, etc.), but it does not work with JSPs since they rely on, +The most obvious question that comes to mind is, "Why do I need this?". The answer is best, +application that supports CRUD operations on a `Message` object. The application also supports, +This test has some obvious drawbacks. If we update our controller to use the parameter, +`message` instead of `text`, our form test would continue to pass even though the HTML, +form is out of synch with the controller. To resolve this we can combine our two tests., +problems., +* What if we have multiple forms on our page? Admittedly we could update our xpath, +  expressions, but they get more complicated the more factors we take into account (Are the, +  fields the correct type? Are the fields enabled? etc.)., +  We must first verify the view, and then we submit the view with the same parameters we just, +  verified. Ideally this could be done all at once., +* Finally, there are some things that we still cannot account for. For example, what if the, +  form has JavaScript validation that we wish to test as well?, +The overall problem is that testing a web page does not involve a single interaction., +Instead, it is a combination of how the user interacts with a web page and how that web, +page interacts with other resources. For example, the result of a form view is used as, +the input to a user for creating a message. In addition, our form view may potentially, +utilize additional resources which impact the behavior of the page, such as JavaScript, +validation., +To resolve the issues above we could perform end-to-end integration testing, but this has, +some obvious drawbacks. Consider testing the view that allows us to page through the messages., +We might need the following tests., +* Does our page display a notification to the user indicating that no results are available, +To set up these tests, we would need to ensure our database contained the proper messages, +in it. This leads to a number of additional challenges., +* Ensuring the proper messages are in the database can be tedious; consider foreign key, +  constraints., +* Testing can become slow since each test would need to ensure that the database is in the, +* Since our database needs to be in a specific state, we cannot run tests in parallel., +* Performing assertions on things like auto-generated ids, timestamps, etc. can be difficult., +These challenges do not mean that we should abandon end-to-end integration testing, +altogether. Instead, we can reduce the number of end-to-end integration tests by, +refactoring our detailed tests to use mock services which will execute much faster, more, +reliably, and without side effects. We can then implement a small number of _true_, +end-to-end integration tests that validate simple workflows to ensure that everything, +works together properly., +So how can we achieve a balance between testing the interactions of our pages and still, +retain good performance within our test suite? The answer is: "By integrating MockMvc, +with HtmlUnit.", +There are a number of ways to integrate `MockMvc` with HtmlUnit., +* <<spring-mvc-test-server-htmlunit-mah,MockMvc and HtmlUnit>>: Use this option if you, +want to use the raw HtmlUnit libraries., +* <<spring-mvc-test-server-htmlunit-webdriver,MockMvc and WebDriver>>: Use this option to, +ease development and reuse code between integration and end-to-end testing., +* <<spring-mvc-test-server-htmlunit-geb,MockMvc and Geb>>: Use this option if you would, +like to use Groovy for testing, ease development, and reuse code between integration and, +end-to-end testing., +`MockMvcWebClientBuilder` as follows., +This will ensure that any URL referencing `localhost` as the server will be directed to, +our `MockMvc` instance without the need for a real HTTP connection. Any other URL will be, +requested using a network connection as normal. This allows us to easily test the use of, +CDNs., +application to a Servlet container. For example, we can request the view to create, +a message with the following., +The default context path is `""`. Alternatively, we can specify the context path as, +illustrated in <<Advanced MockMvcWebClientBuilder>>., +Once we have a reference to the `HtmlPage`, we can then fill out the form and submit, +it to create a message., +Finally, we can verify that a new message was created successfully. The following, +assertions use the https://code.google.com/p/fest/[FEST assertion library]., +it, thereby significantly reducing the overhead., +Another important factor is that http://htmlunit.sourceforge.net/javascript.html[HtmlUnit, +uses the Mozilla Rhino engine] to evaluate JavaScript. This means that we can test the, +behavior of JavaScript within our pages as well!, +In the examples so far, we have used `MockMvcWebClientBuilder` in the simplest way possible,, +by building a `WebClient` based on the `WebApplicationContext` loaded for us by the Spring, +TestContext Framework. This approach is repeated here., +We can also specify additional configuration options., +WebClient webClient;, +, +		// the following will use MockMvc for example.com and example.org as well, +As an alternative, we can perform the exact same setup by configuring the `MockMvc`, +instance separately and supplying it to the `MockMvcWebClientBuilder` as follows., +		// the following will use MockMvc for example.com and example.org as well, +In the previous sections, we have seen how to use `MockMvc` in conjunction with the raw, +HtmlUnit APIs. In this section, we will leverage additional abstractions within the Selenium, +We can already use HtmlUnit and `MockMvc`, so why would we want to use `WebDriver`? The, +Selenium `WebDriver` provides a very elegant API that allows us to easily organize our code., +To better understand, let's explore an example., +the HTML form input elements, filling them out, and making various assertions., +This approach results in numerous, separate tests because we want to test error, +conditions as well. For example, we want to ensure that we get an error if we fill out, +only part of the form. If we fill out the entire form, the newly created message should, +be displayed afterwards., +If one of the fields were named "summary", then we might have something like the, +following repeated in multiple places within our tests., +So what happens if we change the `id` to "smmry"? Doing so would force us to update all, +of our tests to incorporate this change! Of course, this violates the _DRY Principle_; so, +we should ideally extract this code into its own method as follows., +	// ...]