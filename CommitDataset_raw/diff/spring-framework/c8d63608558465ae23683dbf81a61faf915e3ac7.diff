[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/InterceptorsBeanDefinitionParser.java, +		List<Element> interceptors = DomUtils.getChildElementsByTagName(element, new String[] { "bean", "interceptor" });, +			mappedInterceptorDef.setSource(parserContext.extractSource(interceptor));, +			String[] pathPatterns;, +			BeanDefinitionHolder interceptorDef;, +			if ("interceptor".equals(interceptor.getLocalName())) {, +				List<Element> paths = DomUtils.getChildElementsByTagName(interceptor, "path");, +				pathPatterns = new String[paths.size()];, +				for (int i = 0; i < paths.size(); i++) {, +					pathPatterns[i] = paths.get(i).getAttribute("value");, +				}, +				Element interceptorBean = DomUtils.getChildElementByTagName(interceptor, "bean");, +				interceptorDef = parserContext.getDelegate().parseBeanDefinitionElement(interceptorBean);, +				interceptorDef = parserContext.getDelegate().decorateBeanDefinitionIfRequired(interceptorBean, interceptorDef);, +			} else {, +				pathPatterns = null;, +				interceptorDef = parserContext.getDelegate().parseBeanDefinitionElement(interceptor);, +				interceptorDef = parserContext.getDelegate().decorateBeanDefinitionIfRequired(interceptor, interceptorDef);				, +			}, +			mappedInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0, pathPatterns);, +			mappedInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(1, interceptorDef);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/InterceptorsBeanDefinitionParser.java, +		List<Element> interceptors = DomUtils.getChildElementsByTagName(element, new String[] { "bean", "interceptor" });, +			mappedInterceptorDef.setSource(parserContext.extractSource(interceptor));, +			String[] pathPatterns;, +			BeanDefinitionHolder interceptorDef;, +			if ("interceptor".equals(interceptor.getLocalName())) {, +				List<Element> paths = DomUtils.getChildElementsByTagName(interceptor, "path");, +				pathPatterns = new String[paths.size()];, +				for (int i = 0; i < paths.size(); i++) {, +					pathPatterns[i] = paths.get(i).getAttribute("value");, +				}, +				Element interceptorBean = DomUtils.getChildElementByTagName(interceptor, "bean");, +				interceptorDef = parserContext.getDelegate().parseBeanDefinitionElement(interceptorBean);, +				interceptorDef = parserContext.getDelegate().decorateBeanDefinitionIfRequired(interceptorBean, interceptorDef);, +			} else {, +				pathPatterns = null;, +				interceptorDef = parserContext.getDelegate().parseBeanDefinitionElement(interceptor);, +				interceptorDef = parserContext.getDelegate().decorateBeanDefinitionIfRequired(interceptor, interceptorDef);				, +			}, +			mappedInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0, pathPatterns);, +			mappedInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(1, interceptorDef);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/MappedInterceptor.java, +	private final String[] pathPatterns;, +	public MappedInterceptor(String[] pathPatterns, HandlerInterceptor interceptor) {, +		this.pathPatterns = pathPatterns;, +	public MappedInterceptor(String[] pathPatterns, WebRequestInterceptor interceptor) {, +		this.pathPatterns = pathPatterns;, +	public String[] getPathPatterns() {, +		return pathPatterns;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/InterceptorsBeanDefinitionParser.java, +		List<Element> interceptors = DomUtils.getChildElementsByTagName(element, new String[] { "bean", "interceptor" });, +			mappedInterceptorDef.setSource(parserContext.extractSource(interceptor));, +			String[] pathPatterns;, +			BeanDefinitionHolder interceptorDef;, +			if ("interceptor".equals(interceptor.getLocalName())) {, +				List<Element> paths = DomUtils.getChildElementsByTagName(interceptor, "path");, +				pathPatterns = new String[paths.size()];, +				for (int i = 0; i < paths.size(); i++) {, +					pathPatterns[i] = paths.get(i).getAttribute("value");, +				}, +				Element interceptorBean = DomUtils.getChildElementByTagName(interceptor, "bean");, +				interceptorDef = parserContext.getDelegate().parseBeanDefinitionElement(interceptorBean);, +				interceptorDef = parserContext.getDelegate().decorateBeanDefinitionIfRequired(interceptorBean, interceptorDef);, +			} else {, +				pathPatterns = null;, +				interceptorDef = parserContext.getDelegate().parseBeanDefinitionElement(interceptor);, +				interceptorDef = parserContext.getDelegate().decorateBeanDefinitionIfRequired(interceptor, interceptorDef);				, +			}, +			mappedInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0, pathPatterns);, +			mappedInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(1, interceptorDef);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/MappedInterceptor.java, +	private final String[] pathPatterns;, +	public MappedInterceptor(String[] pathPatterns, HandlerInterceptor interceptor) {, +		this.pathPatterns = pathPatterns;, +	public MappedInterceptor(String[] pathPatterns, WebRequestInterceptor interceptor) {, +		this.pathPatterns = pathPatterns;, +	public String[] getPathPatterns() {, +		return pathPatterns;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/MappedInterceptors.java, +		String[] pathPatterns = interceptor.getPathPatterns();, +		if (pathPatterns != null) {, +			for (String pattern : pathPatterns) {, +				if (pathMatcher.match(pattern, lookupPath)) {, +					return true;, +				}, +			}, +			return false;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/InterceptorsBeanDefinitionParser.java, +		List<Element> interceptors = DomUtils.getChildElementsByTagName(element, new String[] { "bean", "interceptor" });, +			mappedInterceptorDef.setSource(parserContext.extractSource(interceptor));, +			String[] pathPatterns;, +			BeanDefinitionHolder interceptorDef;, +			if ("interceptor".equals(interceptor.getLocalName())) {, +				List<Element> paths = DomUtils.getChildElementsByTagName(interceptor, "path");, +				pathPatterns = new String[paths.size()];, +				for (int i = 0; i < paths.size(); i++) {, +					pathPatterns[i] = paths.get(i).getAttribute("value");, +				}, +				Element interceptorBean = DomUtils.getChildElementByTagName(interceptor, "bean");]