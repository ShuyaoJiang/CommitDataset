[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.java, + * Copyright 2002-2016 the original author or authors., +import java.util.concurrent.locks.Lock;, +import java.util.concurrent.locks.ReentrantLock;, +	private final Lock heartbeatLock = new ReentrantLock();, +, +			if (heartbeatLock.tryLock()) {, +				try {, +				finally {, +					heartbeatLock.unlock();, +				}, +			}, +		}, +			if (task == null || task.isCancelled()) {, +				return;, +			}, +			if (task.cancel(false)) {, +				return;, +, +			if (logger.isTraceEnabled()) {, +				logger.trace("Failed to cancel heartbeat, acquiring heartbeat write lock.");, +			}, +			this.heartbeatLock.lock();, +, +			if (logger.isTraceEnabled()) {, +				logger.trace("Releasing heartbeat lock.");, +			}, +			this.heartbeatLock.unlock();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.java, + * Copyright 2002-2016 the original author or authors., +import java.util.concurrent.locks.Lock;, +import java.util.concurrent.locks.ReentrantLock;, +	private final Lock heartbeatLock = new ReentrantLock();, +, +			if (heartbeatLock.tryLock()) {, +				try {, +				finally {, +					heartbeatLock.unlock();, +				}, +			}, +		}, +			if (task == null || task.isCancelled()) {, +				return;, +			}, +			if (task.cancel(false)) {, +				return;, +, +			if (logger.isTraceEnabled()) {, +				logger.trace("Failed to cancel heartbeat, acquiring heartbeat write lock.");, +			}, +			this.heartbeatLock.lock();, +, +			if (logger.isTraceEnabled()) {, +				logger.trace("Releasing heartbeat lock.");, +			}, +			this.heartbeatLock.unlock();, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/transport/session/SockJsSessionTests.java, + * Copyright 2002-2016 the original author or authors., +		given(task.isCancelled()).willReturn(false);, +		given(task.cancel(false)).willReturn(true);, +		verify(task).isCancelled();]