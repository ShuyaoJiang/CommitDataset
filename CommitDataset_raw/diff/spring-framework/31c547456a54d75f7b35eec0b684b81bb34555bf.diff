[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java, + * <em>key-value</em> pairs as read by {@link AnnotationUtils},, + * {@link AnnotatedElementUtils}, and Spring's reflection- and ASM-based, + * {@link org.springframework.core.type.AnnotationMetadata} implementations., + * in a type-safe fashion, including support for attribute aliases configured, + * via {@link AliasFor @AliasFor}., + * @see AnnotationUtils#getAnnotationAttributes, + * @see AnnotatedElementUtils, + * @see AliasFor, +	 * Get the value stored under the specified {@code attributeName} as a, +	 * string, taking into account alias semantics defined via, +	 * {@link AliasFor @AliasFor}., +	 * <p>If there is no value stored under the specified {@code attributeName}, +	 * but the attribute has an alias declared via {@code @AliasFor}, the, +	 * value of the alias will be returned., +	 *, +	 * @param attributeName the name of the attribute to get; never, +	 * {@code null} or empty, +	 * @param annotationType the type of annotation represented by this, +	 * {@code AnnotationAttributes} instance; never {@code null}, +	 * @param annotationSource the source of the annotation represented by, +	 * this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement});, +	 * or {@code null} if unknown, +	 * @return the string value, +	 * @throws IllegalArgumentException if the attribute and its alias do, +	 * not exist or are not of type {@code String}, +	 * @throws AnnotationConfigurationException if the attribute and its, +	 * alias are both present with different non-empty values, +	 * @since 4.2, +	 * @see ObjectUtils#isEmpty(Object), +	 */, +	public String getAliasedString(String attributeName, Class<? extends Annotation> annotationType,, +			Object annotationSource) {, +		return getRequiredAttributeWithAlias(attributeName, annotationType, annotationSource, String.class);, +	}, +, +	/**, +		return getRequiredAttributeWithAlias(attributeName, annotationType, annotationSource, String[].class);, +		return getRequiredAttributeWithAlias(attributeName, annotationType, annotationSource, Class[].class);, +	 * Get the value stored under the specified {@code attributeName},, +	 * ensuring that the value is of the {@code expectedType}., +	 * <p>If the {@code expectedType} is an array and the value stored, +	 * under the specified {@code attributeName} is a single element of the, +	 * component type of the expected array type, the single element will be, +	 * wrapped in a single-element array of the appropriate type before, +	 * returning it., +	 * @param attributeName the name of the attribute to get; never, +	 * {@code null} or empty, +	 * @param expectedType the expected type; never {@code null}, +	 * @return the value, +	 * @throws IllegalArgumentException if the attribute does not exist or, +	 * if it is not of the expected type, +	 */, +	@SuppressWarnings("unchecked"), +	private <T> T getRequiredAttribute(String attributeName, Class<T> expectedType) {, +		Assert.hasText(attributeName, "attributeName must not be null or empty");, +		Object value = get(attributeName);, +		assertAttributePresence(attributeName, value);, +		if (!expectedType.isInstance(value) && expectedType.isArray(), +				&& expectedType.getComponentType().isInstance(value)) {, +			Object array = Array.newInstance(expectedType.getComponentType(), 1);, +			Array.set(array, 0, value);, +			value = array;, +		}, +		assertAttributeType(attributeName, value, expectedType);, +		return (T) value;, +	}, +, +	/**, +	 * object of the {@code expectedType}, taking into account alias semantics, +	 * @param expectedType the expected type; never {@code null}, +	 * @return the value, +	 * not exist or are not of the {@code expectedType}, +	 * @see ObjectUtils#isEmpty(Object), +	private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType,, +		boolean attributeDeclared = !ObjectUtils.isEmpty(attributeValue);, +		boolean aliasDeclared = !ObjectUtils.isEmpty(aliasValue);, +					+ "but only one is permitted.", annotationType.getName(), elementName, attributeName, aliasName,, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java, + * <em>key-value</em> pairs as read by {@link AnnotationUtils},, + * {@link AnnotatedElementUtils}, and Spring's reflection- and ASM-based, + * {@link org.springframework.core.type.AnnotationMetadata} implementations., + * in a type-safe fashion, including support for attribute aliases configured, + * via {@link AliasFor @AliasFor}., + * @see AnnotationUtils#getAnnotationAttributes, + * @see AnnotatedElementUtils, + * @see AliasFor, +	 * Get the value stored under the specified {@code attributeName} as a, +	 * string, taking into account alias semantics defined via, +	 * {@link AliasFor @AliasFor}., +	 * <p>If there is no value stored under the specified {@code attributeName}, +	 * but the attribute has an alias declared via {@code @AliasFor}, the, +	 * value of the alias will be returned., +	 *, +	 * @param attributeName the name of the attribute to get; never, +	 * {@code null} or empty, +	 * @param annotationType the type of annotation represented by this, +	 * {@code AnnotationAttributes} instance; never {@code null}, +	 * @param annotationSource the source of the annotation represented by, +	 * this {@code AnnotationAttributes} (e.g., the {@link AnnotatedElement});]