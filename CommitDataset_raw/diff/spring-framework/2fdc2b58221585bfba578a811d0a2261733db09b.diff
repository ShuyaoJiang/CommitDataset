[+++ b/org.springframework.context/src/main/java/org/springframework/jndi/JndiLocatorDelegate.java, + * Copyright 2002-2011 the original author or authors., +import javax.naming.InitialContext;, +, +	/**, +	 * Configure a {@code JndiLocatorDelegate} with its "resourceRef" property set to, +	 * <code>true</code>, meaning that all names will be prefixed with "java:comp/env/"., +	 * @see #setResourceRef, +	 */, +	public static JndiLocatorDelegate createDefaultResourceRefLocator() {, +		JndiLocatorDelegate jndiLocator = new JndiLocatorDelegate();, +		jndiLocator.setResourceRef(true);, +		return jndiLocator;, +	}, +, +	/**, +	 * Check whether a default JNDI environment, as in a J2EE environment,, +	 * is available on this JVM., +	 * @return <code>true</code> if a default InitialContext can be used,, +	 * <code>false</code> if not, +	 */, +	public static boolean isDefaultJndiEnvironmentAvailable() {, +		try {, +			new InitialContext();, +			return true;, +		}, +		catch (Throwable ex) {, +			return false;, +		}, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/jndi/JndiLocatorDelegate.java, + * Copyright 2002-2011 the original author or authors., +import javax.naming.InitialContext;, +, +	/**, +	 * Configure a {@code JndiLocatorDelegate} with its "resourceRef" property set to, +	 * <code>true</code>, meaning that all names will be prefixed with "java:comp/env/"., +	 * @see #setResourceRef, +	 */, +	public static JndiLocatorDelegate createDefaultResourceRefLocator() {, +		JndiLocatorDelegate jndiLocator = new JndiLocatorDelegate();, +		jndiLocator.setResourceRef(true);, +		return jndiLocator;, +	}, +, +	/**, +	 * Check whether a default JNDI environment, as in a J2EE environment,, +	 * is available on this JVM., +	 * @return <code>true</code> if a default InitialContext can be used,, +	 * <code>false</code> if not, +	 */, +	public static boolean isDefaultJndiEnvironmentAvailable() {, +		try {, +			new InitialContext();, +			return true;, +		}, +		catch (Throwable ex) {, +			return false;, +		}, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/jndi/JndiPropertySource.java, +		this(name, JndiLocatorDelegate.createDefaultResourceRefLocator());, +		}, +		catch (NamingException ex) {, +++ b/org.springframework.context/src/main/java/org/springframework/jndi/JndiLocatorDelegate.java, + * Copyright 2002-2011 the original author or authors., +import javax.naming.InitialContext;, +, +	/**, +	 * Configure a {@code JndiLocatorDelegate} with its "resourceRef" property set to, +	 * <code>true</code>, meaning that all names will be prefixed with "java:comp/env/"., +	 * @see #setResourceRef, +	 */, +	public static JndiLocatorDelegate createDefaultResourceRefLocator() {, +		JndiLocatorDelegate jndiLocator = new JndiLocatorDelegate();, +		jndiLocator.setResourceRef(true);, +		return jndiLocator;, +	}, +, +	/**, +	 * Check whether a default JNDI environment, as in a J2EE environment,, +	 * is available on this JVM., +	 * @return <code>true</code> if a default InitialContext can be used,, +	 * <code>false</code> if not, +	 */, +	public static boolean isDefaultJndiEnvironmentAvailable() {, +		try {, +			new InitialContext();, +			return true;, +		}, +		catch (Throwable ex) {, +			return false;, +		}, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/jndi/JndiPropertySource.java, +		this(name, JndiLocatorDelegate.createDefaultResourceRefLocator());, +		}]