[+++ b/build.gradle, +		"http://quartz-scheduler.org/api/2.2.1/",, +                // ensure Servlet 3.x has precedence on the javadoc classpath, +                project(":spring-webmvc").sourceSets.main.compileClasspath.files.find { it =~ "servlet-api" },, +++ b/build.gradle, +		"http://quartz-scheduler.org/api/2.2.1/",, +                // ensure Servlet 3.x has precedence on the javadoc classpath, +                project(":spring-webmvc").sourceSets.main.compileClasspath.files.find { it =~ "servlet-api" },, +++ b/spring-aop/src/main/java/org/aopalliance/intercept/MethodInterceptor.java, +	 * @return the result of the call to {@link Joinpoint#proceed()};, +++ b/build.gradle, +		"http://quartz-scheduler.org/api/2.2.1/",, +                // ensure Servlet 3.x has precedence on the javadoc classpath, +                project(":spring-webmvc").sourceSets.main.compileClasspath.files.find { it =~ "servlet-api" },, +++ b/spring-aop/src/main/java/org/aopalliance/intercept/MethodInterceptor.java, +	 * @return the result of the call to {@link Joinpoint#proceed()};, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, +		if (CompletableFuture.class.isAssignableFrom(returnType)) {, +			return CompletableFuture.supplyAsync(new Supplier<Object>() {, +				@Override, +				public Object get() {, +					try {, +						return task.call();, +					}, +					catch (Throwable ex) {, +						throw new CompletionException(ex);, +			}, executor);, +		}, +		else if (ListenableFuture.class.isAssignableFrom(returnType)) {, +++ b/build.gradle, +		"http://quartz-scheduler.org/api/2.2.1/",, +                // ensure Servlet 3.x has precedence on the javadoc classpath, +                project(":spring-webmvc").sourceSets.main.compileClasspath.files.find { it =~ "servlet-api" },, +++ b/spring-aop/src/main/java/org/aopalliance/intercept/MethodInterceptor.java, +	 * @return the result of the call to {@link Joinpoint#proceed()};, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, +		if (CompletableFuture.class.isAssignableFrom(returnType)) {, +			return CompletableFuture.supplyAsync(new Supplier<Object>() {, +				@Override, +				public Object get() {, +					try {, +						return task.call();, +					}, +					catch (Throwable ex) {, +						throw new CompletionException(ex);, +			}, executor);, +		}, +		else if (ListenableFuture.class.isAssignableFrom(returnType)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, +		this.wrappedObject = ObjectUtils.unwrapOptional(object);, +		Assert.notNull(this.wrappedObject, "Target object must not be null");, +		if (value == null || (value instanceof Optional && !((Optional) value).isPresent())) {, +		if (nestedPa == null || nestedPa.getWrappedInstance() != ObjectUtils.unwrapOptional(value)) {, +++ b/build.gradle, +		"http://quartz-scheduler.org/api/2.2.1/",, +                // ensure Servlet 3.x has precedence on the javadoc classpath, +                project(":spring-webmvc").sourceSets.main.compileClasspath.files.find { it =~ "servlet-api" },, +++ b/spring-aop/src/main/java/org/aopalliance/intercept/MethodInterceptor.java, +	 * @return the result of the call to {@link Joinpoint#proceed()};, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, +		if (CompletableFuture.class.isAssignableFrom(returnType)) {, +			return CompletableFuture.supplyAsync(new Supplier<Object>() {, +				@Override, +				public Object get() {, +					try {, +						return task.call();, +					}, +					catch (Throwable ex) {, +						throw new CompletionException(ex);, +			}, executor);, +		}, +		else if (ListenableFuture.class.isAssignableFrom(returnType)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, +		this.wrappedObject = ObjectUtils.unwrapOptional(object);, +		Assert.notNull(this.wrappedObject, "Target object must not be null");, +		if (value == null || (value instanceof Optional && !((Optional) value).isPresent())) {, +		if (nestedPa == null || nestedPa.getWrappedInstance() != ObjectUtils.unwrapOptional(value)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +import java.util.Optional;, +				if (requiredType == Optional.class) {, +					convertedValue = Optional.empty();, +++ b/build.gradle, +		"http://quartz-scheduler.org/api/2.2.1/",, +                // ensure Servlet 3.x has precedence on the javadoc classpath, +                project(":spring-webmvc").sourceSets.main.compileClasspath.files.find { it =~ "servlet-api" },, +++ b/spring-aop/src/main/java/org/aopalliance/intercept/MethodInterceptor.java, +	 * @return the result of the call to {@link Joinpoint#proceed()};, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, +		if (CompletableFuture.class.isAssignableFrom(returnType)) {, +			return CompletableFuture.supplyAsync(new Supplier<Object>() {, +				@Override, +				public Object get() {, +					try {, +						return task.call();, +					}, +					catch (Throwable ex) {, +						throw new CompletionException(ex);, +			}, executor);, +		}, +		else if (ListenableFuture.class.isAssignableFrom(returnType)) {]