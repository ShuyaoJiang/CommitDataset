[+++ b/spring-framework-reference/src/validation.xml, +			The public API may also be used anywhere in your application where type conversion is needed., +				To create your own Converter, simply implement the interface above., +				Take care to ensure your Converter implementation is thread safe., +		<section id="core-convert-ConverterFactory-SPI">, +			<title>ConverterFactory</title>, +			<para>, +				When you need to centralize the conversion logic for an entire class hierarchy, for example, when converting from String to java.lang.Enum objects, implement a ConverterFactory:, +			</para>, +			<programlisting language="java"><![CDATA[, +package org.springframework.core.converter;, +    , +public interface ConverterFactory<S, R> {, +    <T extends R> Converter<S, T> getConverter(Class<T> targetType);        , +}]]>, +			</programlisting>, +			<para>, +				Parameterize S to be type you are converting from, and R to be base type defining the <emphasis>range</emphasis> of classes you can convert to., +				Then implement getConverter(Class&lt;T&gt;T), where T is a subclass of R., +			</para>, +			<para>, +				Note the StringToEnum ConverterFactory as an example:, +			</para>, +			<programlisting language="java"><![CDATA[, +public class StringToEnumFactory implements ConverterFactory<String, Enum> {, +, +    public <T extends Enum> Converter<String, T> getConverter(Class<T> targetType) {, +        return new StringToEnum(targetType);, +    }, +, +    private final class StringToEnum<T extends Enum> implements Converter<String, T> {, +, +        private Class<T> enumType;, +		, +        public StringToEnum(Class<T> enumType) {, +            this.enumType = enumType;, +        }, +        , +        public T convert(String source) throws Exception {, +            return (T) Enum.valueOf(this.enumType, source.trim());, +        }, +    }, +}]]>, +			</programlisting>, +		</section>		, +				Internally, a ConversionService implementation delegates to its registered Converters and ConverterFactories to carry out type conversion logic., +			<filename>core.convert</filename> is a simple, general-purpose type conversion system., +				In particular, the team hopes to integrate support for Joda Time and Money Formatters in the future., +    void add(Formatter<?> formatter);, +    @Controller, +    public class MyController {, +    , +        ]