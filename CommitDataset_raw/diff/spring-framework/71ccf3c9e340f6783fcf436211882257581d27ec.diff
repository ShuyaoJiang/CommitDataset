[+++ b/src/docs/asciidoc/web/webflux.adoc, +Spring WebFlux, was added later in version 5.0. It is fully non-blocking, supports, +http://www.reactive-streams.org/[Reactive Streams] back pressure, and runs on servers such as, +Netty, Undertow, and Servlet 3.1+ containers., +an API for non-blocking I/O. However, using it leads away from the rest of the Servlet API, +where contracts are synchronous (`Filter`, `Servlet`) or blocking (`getParameter`,, +`getPart`). This was the motivation for a new common API to serve as a foundation across, +any non-blocking runtime. That is important because of servers such as Netty that are well, +established in the async, non-blocking space., +Reactor has a strong focus on server-side Java. It is developed in close collaboration, +with Spring., +persistence APIs (JPA, JDBC), or networking APIs to use, then Spring MVC is the best choice, +for common architectures at least. It is technically feasible with both Reactor and, +RxJava to perform blocking calls on a separate thread but you wouldn't be making the, +most of a non-blocking web stack.]