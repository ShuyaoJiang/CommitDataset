[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/JdbcTransactionObjectSupport.java, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/JdbcTransactionObjectSupport.java, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/OpenJpaDialect.java, + * Copyright 2002-2014 the original author or authors., +import org.apache.commons.logging.LogFactory;, +			try {, +			catch (Throwable ex) {, +				LogFactory.getLog(OpenJpaTransactionData.class).debug(, +						"Could not explicitly release OpenJPA savepoint", ex);, +			}, +		}, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/JdbcTransactionObjectSupport.java, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/OpenJpaDialect.java, + * Copyright 2002-2014 the original author or authors., +import org.apache.commons.logging.LogFactory;, +			try {, +			catch (Throwable ex) {, +				LogFactory.getLog(OpenJpaTransactionData.class).debug(, +						"Could not explicitly release OpenJPA savepoint", ex);, +			}, +		}, +++ b/spring-tx/src/main/java/org/springframework/transaction/SavepointManager.java, + * Copyright 2002-2014 the original author or authors., +	 * via {@code rollbackToSavepoint}, and explicitly release a savepoint, +	 * that you don't need anymore via {@code releaseSavepoint}., +	 * @return a savepoint object, to be passed into, +	 * {@link #rollbackToSavepoint} or {@link #releaseSavepoint}, +	 * Roll back to the given savepoint., +	 * <p>The savepoint will <i>not</i> be automatically released afterwards., +	 * You may explicitly call {@link #releaseSavepoint(Object)} or rely on, +	 * automatic release on transaction completion., +	 * savepoints on transaction completion., +	 * <p>Implementations should fail as silently as possible if proper, +	 * resource cleanup will eventually happen at transaction completion., +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/JdbcTransactionObjectSupport.java, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/OpenJpaDialect.java, + * Copyright 2002-2014 the original author or authors., +import org.apache.commons.logging.LogFactory;, +			try {, +			catch (Throwable ex) {, +				LogFactory.getLog(OpenJpaTransactionData.class).debug(, +						"Could not explicitly release OpenJPA savepoint", ex);, +			}, +		}, +++ b/spring-tx/src/main/java/org/springframework/transaction/SavepointManager.java, + * Copyright 2002-2014 the original author or authors., +	 * via {@code rollbackToSavepoint}, and explicitly release a savepoint, +	 * that you don't need anymore via {@code releaseSavepoint}., +	 * @return a savepoint object, to be passed into, +	 * {@link #rollbackToSavepoint} or {@link #releaseSavepoint}, +	 * Roll back to the given savepoint., +	 * <p>The savepoint will <i>not</i> be automatically released afterwards., +	 * You may explicitly call {@link #releaseSavepoint(Object)} or rely on, +	 * automatic release on transaction completion., +	 * savepoints on transaction completion., +	 * <p>Implementations should fail as silently as possible if proper, +	 * resource cleanup will eventually happen at transaction completion., +++ b/spring-tx/src/main/java/org/springframework/transaction/support/AbstractTransactionStatus.java, + * Copyright 2002-2014 the original author or authors., +	 * Roll back to the savepoint that is held for the transaction, +	 * and release the savepoint right afterwards., +			throw new TransactionUsageException(, +					"Cannot roll back to savepoint - no savepoint associated with current transaction");, +		getSavepointManager().releaseSavepoint(getSavepoint());, +			throw new TransactionUsageException(, +					"Cannot release savepoint - no savepoint associated with current transaction");]