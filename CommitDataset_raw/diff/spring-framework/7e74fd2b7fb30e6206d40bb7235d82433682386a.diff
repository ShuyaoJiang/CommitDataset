[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, + * @author Phillip Webb, +			T primaryBean = null;, +			for (String beanName : beanNames) {, +				T beanInstance = getBean(beanName, requiredType);, +				if (isPrimary(beanName, beanInstance)) {, +					if(primaryBean != null) {, +						throw new NoUniqueBeanDefinitionException(requiredType, beanNames.length,, +								"more than one 'primary' bean found of required type: " + Arrays.asList(beanNames));, +					}, +					primaryBean = beanInstance;, +				}, +			}, +			if(primaryBean != null) {, +				return primaryBean;, +			}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, + * @author Phillip Webb, +			T primaryBean = null;, +			for (String beanName : beanNames) {, +				T beanInstance = getBean(beanName, requiredType);, +				if (isPrimary(beanName, beanInstance)) {, +					if(primaryBean != null) {, +						throw new NoUniqueBeanDefinitionException(requiredType, beanNames.length,, +								"more than one 'primary' bean found of required type: " + Arrays.asList(beanNames));, +					}, +					primaryBean = beanInstance;, +				}, +			}, +			if(primaryBean != null) {, +				return primaryBean;, +			}, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java, +import static org.hamcrest.Matchers.containsString;, +import static org.hamcrest.Matchers.equalTo;, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, + * @author Phillip Webb, +	@Rule, +	public ExpectedException thrown = ExpectedException.none();, +	public void testGetBeanByTypeWithPrimary() throws Exception {, +		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory();, +		RootBeanDefinition bd1 = new RootBeanDefinition(TestBean.class);, +		RootBeanDefinition bd2 = new RootBeanDefinition(TestBean.class);, +		bd2.setPrimary(true);, +		lbf.registerBeanDefinition("bd1", bd1);, +		lbf.registerBeanDefinition("bd2", bd2);, +		TestBean bean = lbf.getBean(TestBean.class);, +		assertThat(bean.getBeanName(), equalTo("bd2"));, +	}, +, +	@Test, +	public void testGetBeanByTypeWithMultiplePrimary() throws Exception {, +		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory();, +		RootBeanDefinition bd1 = new RootBeanDefinition(TestBean.class);, +		bd1.setPrimary(true);, +		RootBeanDefinition bd2 = new RootBeanDefinition(TestBean.class);, +		bd2.setPrimary(true);, +		lbf.registerBeanDefinition("bd1", bd1);, +		lbf.registerBeanDefinition("bd2", bd2);, +		thrown.expect(NoUniqueBeanDefinitionException.class);, +		thrown.expectMessage(containsString("more than one 'primary'"));, +		lbf.getBean(TestBean.class);, +	}, +, +	@Test]