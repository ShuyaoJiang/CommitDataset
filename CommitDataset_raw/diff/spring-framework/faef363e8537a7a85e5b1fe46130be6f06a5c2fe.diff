[+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +		@Nullable, +		private Boolean conditionPassing;, +, +			if (this.conditionPassing == null) {, +					this.conditionPassing = evaluator.condition(this.metadata.operation.getCondition(),, +				else {, +					this.conditionPassing = true;, +				}, +			}, +			return this.conditionPassing;, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +		@Nullable, +		private Boolean conditionPassing;, +, +			if (this.conditionPassing == null) {, +					this.conditionPassing = evaluator.condition(this.metadata.operation.getCondition(),, +				else {, +					this.conditionPassing = true;, +				}, +			}, +			return this.conditionPassing;, +++ b/spring-context/src/test/java/org/springframework/cache/config/EnableCachingIntegrationTests.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.core.env.Environment;, +import org.springframework.mock.env.MockEnvironment;, +import static org.junit.Assert.*;, +, +, +	public void beanConditionOff() {, +		Cache cache = getCache();, +		service.getWithCondition(key);, +		assertCacheMiss(key, cache);, +, +		assertEquals(2, this.context.getBean(BeanConditionConfig.Bar.class).count);, +	}, +, +	@Test, +	public void beanConditionOn() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();, +		ctx.setEnvironment(new MockEnvironment().withProperty("bar.enabled", "true"));, +		ctx.register(BeanConditionConfig.class);, +		ctx.refresh();, +		this.context = ctx;, +, +		FooService service = this.context.getBean(FooService.class);, +		Cache cache = getCache();, +, +		Object key = new Object();, +		Object value = service.getWithCondition(key);, +		assertCacheHit(key, value, cache);, +		value = service.getWithCondition(key);, +		assertCacheHit(key, value, cache);, +, +		assertEquals(2, this.context.getBean(BeanConditionConfig.Bar.class).count);, +, +, +, +, +, +, +, +, +, +, +, +		@Autowired, +		Environment env;, +, +			return new Bar(Boolean.valueOf(env.getProperty("bar.enabled")));, +, +, +			public int count;, +, +				this.count++;]