[+++ b/spring-beans/src/test/java/org/springframework/beans/factory/BeanFactoryUtilsTests.java, +		Map<String, ?> beans = BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf, ITestBean.class, true, false);, +		Map<String, ?> beans =, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/BeanFactoryUtilsTests.java, +		Map<String, ?> beans = BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf, ITestBean.class, true, false);, +		Map<String, ?> beans =, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +	public static ResolvableType forClassWithGenerics(Class<?> sourceClass, ResolvableType... generics) {, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/BeanFactoryUtilsTests.java, +		Map<String, ?> beans = BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf, ITestBean.class, true, false);, +		Map<String, ?> beans =, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +	public static ResolvableType forClassWithGenerics(Class<?> sourceClass, ResolvableType... generics) {, +++ b/spring-web/src/main/java/org/springframework/http/HttpRange.java, + * @author Juergen Hoeller, + * @since 4.2, +		Assert.hasLength(range, "Range String must not be empty");, +		Assert.notEmpty(ranges, "Ranges Collection must not be empty");, +			builder.append(range);, +		public ByteRange(long firstPos, Long lastPos) {, +				throw new IllegalArgumentException("Invalid first byte position: " + firstBytePos);, +				throw new IllegalArgumentException("firstBytePosition=" + firstBytePos +, +		public boolean equals(Object other) {, +			if (this == other) {, +				return true;, +			}, +			if (!(other instanceof ByteRange)) {, +				return false;, +			}, +			ByteRange otherRange = (ByteRange) other;, +			return (this.firstPos == otherRange.firstPos &&, +					ObjectUtils.nullSafeEquals(this.lastPos, otherRange.lastPos));, +		}, +, +		@Override, +		public int hashCode() {, +			return (ObjectUtils.nullSafeHashCode(this.firstPos) * 31 +, +					ObjectUtils.nullSafeHashCode(this.lastPos));, +		}, +, +		@Override, +		public String toString() {, +			StringBuilder builder = new StringBuilder();, +			return builder.toString();, +		}, +		public SuffixByteRange(long suffixLength) {, +				throw new IllegalArgumentException("Invalid suffix length: " + suffixLength);, +		public boolean equals(Object other) {, +			if (this == other) {, +			if (!(other instanceof SuffixByteRange)) {, +			SuffixByteRange otherRange = (SuffixByteRange) other;, +			return (this.suffixLength == otherRange.suffixLength);, +, +		@Override, +		public String toString() {, +			return "-" + this.suffixLength;, +, +}, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/BeanFactoryUtilsTests.java, +		Map<String, ?> beans = BeanFactoryUtils.beansOfTypeIncludingAncestors(lbf, ITestBean.class, true, false);, +		Map<String, ?> beans =, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +	public static ResolvableType forClassWithGenerics(Class<?> sourceClass, ResolvableType... generics) {, +++ b/spring-web/src/main/java/org/springframework/http/HttpRange.java, + * @author Juergen Hoeller, + * @since 4.2, +		Assert.hasLength(range, "Range String must not be empty");, +		Assert.notEmpty(ranges, "Ranges Collection must not be empty");, +			builder.append(range);, +		public ByteRange(long firstPos, Long lastPos) {, +				throw new IllegalArgumentException("Invalid first byte position: " + firstBytePos);, +				throw new IllegalArgumentException("firstBytePosition=" + firstBytePos +, +		public boolean equals(Object other) {, +			if (this == other) {, +				return true;, +			}, +			if (!(other instanceof ByteRange)) {, +				return false;, +			}, +			ByteRange otherRange = (ByteRange) other;, +			return (this.firstPos == otherRange.firstPos &&, +					ObjectUtils.nullSafeEquals(this.lastPos, otherRange.lastPos));, +		}, +, +		@Override, +		public int hashCode() {, +			return (ObjectUtils.nullSafeHashCode(this.firstPos) * 31 +, +					ObjectUtils.nullSafeHashCode(this.lastPos));, +		}, +, +		@Override, +		public String toString() {, +			StringBuilder builder = new StringBuilder();, +			return builder.toString();, +		}, +		public SuffixByteRange(long suffixLength) {, +				throw new IllegalArgumentException("Invalid suffix length: " + suffixLength);, +		public boolean equals(Object other) {, +			if (this == other) {, +			if (!(other instanceof SuffixByteRange)) {]