[+++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionInterceptor.java, + * Copyright 2002-2012 the original author or authors., +	 * Create a new {@code AsyncExecutionInterceptor}., +	 * @param executor the {@link Executor} (typically a Spring {@link AsyncTaskExecutor}, +	 * or {@link java.util.concurrent.ExecutorService}) to delegate to., +, +		Future<?> result = this.asyncExecutor.submit(, +				new Callable<Object>() {, +								return ((Future<?>) result).get();, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionInterceptor.java, + * Copyright 2002-2012 the original author or authors., +	 * Create a new {@code AsyncExecutionInterceptor}., +	 * @param executor the {@link Executor} (typically a Spring {@link AsyncTaskExecutor}, +	 * or {@link java.util.concurrent.ExecutorService}) to delegate to., +, +		Future<?> result = this.asyncExecutor.submit(, +				new Callable<Object>() {, +								return ((Future<?>) result).get();, +++ b/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java, +		Assert.notNull(pc, "Pointcut must not be null");, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionInterceptor.java, + * Copyright 2002-2012 the original author or authors., +	 * Create a new {@code AsyncExecutionInterceptor}., +	 * @param executor the {@link Executor} (typically a Spring {@link AsyncTaskExecutor}, +	 * or {@link java.util.concurrent.ExecutorService}) to delegate to., +, +		Future<?> result = this.asyncExecutor.submit(, +				new Callable<Object>() {, +								return ((Future<?>) result).get();, +++ b/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java, +		Assert.notNull(pc, "Pointcut must not be null");, +++ b/spring-aspects/src/main/java/org/springframework/scheduling/aspectj/AbstractAsyncExecutionAspect.aj, + * Copyright 2002-2012 the original author or authors., +	/**, +	 * Apply around advice to methods matching the {@link #asyncMethod()} pointcut,, +	 * submit the actual calling of the method to the correct task executor and return, +	 * immediately to the caller., +	 * @return {@link Future} if the original method returns {@code Future}; {@code null}, +	 * otherwise., +	 */, +	/**, +	 * Return the set of joinpoints at which async advice should be applied., +	 */, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionInterceptor.java, + * Copyright 2002-2012 the original author or authors., +	 * Create a new {@code AsyncExecutionInterceptor}., +	 * @param executor the {@link Executor} (typically a Spring {@link AsyncTaskExecutor}, +	 * or {@link java.util.concurrent.ExecutorService}) to delegate to., +, +		Future<?> result = this.asyncExecutor.submit(, +				new Callable<Object>() {, +								return ((Future<?>) result).get();, +++ b/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java, +		Assert.notNull(pc, "Pointcut must not be null");, +++ b/spring-aspects/src/main/java/org/springframework/scheduling/aspectj/AbstractAsyncExecutionAspect.aj, + * Copyright 2002-2012 the original author or authors., +	/**, +	 * Apply around advice to methods matching the {@link #asyncMethod()} pointcut,, +	 * submit the actual calling of the method to the correct task executor and return, +	 * immediately to the caller., +	 * @return {@link Future} if the original method returns {@code Future}; {@code null}, +	 * otherwise., +	 */, +	/**, +	 * Return the set of joinpoints at which async advice should be applied., +	 */, +++ b/spring-aspects/src/main/java/org/springframework/scheduling/aspectj/AnnotationAsyncExecutionAspect.aj, + * Copyright 2002-2012 the original author or authors., + * to be routed asynchronously must return either {@code void}, {@link Future},, + * If, however, a class marked with {@code @Async} contains a method that violates this, + * constraint, it produces only a warning., +		"Methods in a class marked with @Async that do not return void or Future will " +, +		"be routed synchronously";, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionInterceptor.java, + * Copyright 2002-2012 the original author or authors., +	 * Create a new {@code AsyncExecutionInterceptor}., +	 * @param executor the {@link Executor} (typically a Spring {@link AsyncTaskExecutor}, +	 * or {@link java.util.concurrent.ExecutorService}) to delegate to., +, +		Future<?> result = this.asyncExecutor.submit(, +				new Callable<Object>() {, +								return ((Future<?>) result).get();, +++ b/spring-aop/src/main/java/org/springframework/aop/support/AopUtils.java, +		Assert.notNull(pc, "Pointcut must not be null");, +++ b/spring-aspects/src/main/java/org/springframework/scheduling/aspectj/AbstractAsyncExecutionAspect.aj, + * Copyright 2002-2012 the original author or authors., +	/**, +	 * Apply around advice to methods matching the {@link #asyncMethod()} pointcut,, +	 * submit the actual calling of the method to the correct task executor and return, +	 * immediately to the caller., +	 * @return {@link Future} if the original method returns {@code Future}; {@code null}, +	 * otherwise., +	 */, +	/**, +	 * Return the set of joinpoints at which async advice should be applied., +	 */, +++ b/spring-aspects/src/main/java/org/springframework/scheduling/aspectj/AnnotationAsyncExecutionAspect.aj, + * Copyright 2002-2012 the original author or authors., + * to be routed asynchronously must return either {@code void}, {@link Future},, + * If, however, a class marked with {@code @Async} contains a method that violates this]