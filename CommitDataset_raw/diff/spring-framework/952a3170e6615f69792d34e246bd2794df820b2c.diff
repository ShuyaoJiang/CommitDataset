[+++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/HeaderResultMatchers.java, +import java.text.SimpleDateFormat;, +import java.util.Arrays;, +import java.util.Date;, +import java.util.List;, +import java.util.Locale;, +import java.util.TimeZone;, +, +import static org.hamcrest.MatcherAssert.assertThat;, +import static org.springframework.test.util.AssertionErrors.assertEquals;, +import static org.springframework.test.util.AssertionErrors.assertTrue;, +	 * Assert the primary value of the response header with the given Hamcrest, +	 * String {@code Matcher}., +	 * Assert the values of the response header with the given Hamcrest, +	 * Iterable {@link Matcher}., +	 * @since 4.3, +	 */, +	public <T> ResultMatcher stringValues(final String name, final Matcher<Iterable<String>> matcher) {, +		return new ResultMatcher() {, +			@Override, +			public void match(MvcResult result) {, +				List<String> values = result.getResponse().getHeaders(name);, +				assertThat("Response header " + name, values, matcher);, +			}, +		};, +	}, +, +	/**, +	 * Assert the primary value of the response header as a String value., +				assertEquals("Response header " + name, result.getResponse().getHeader(name), value);, +			}, +		};, +	}, +, +	/**, +	 * Assert the values of the response header as String values., +	 * @since 4.3, +	 */, +	public ResultMatcher stringValues(final String name, final String... values) {, +		return new ResultMatcher() {, +			@Override, +			public void match(MvcResult result) {, +				List<Object> actual = result.getResponse().getHeaderValues(name);, +				assertEquals("Response header " + name, Arrays.asList(values), actual);, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/result/HeaderResultMatchers.java, +import java.text.SimpleDateFormat;, +import java.util.Arrays;, +import java.util.Date;, +import java.util.List;, +import java.util.Locale;, +import java.util.TimeZone;, +, +import static org.hamcrest.MatcherAssert.assertThat;, +import static org.springframework.test.util.AssertionErrors.assertEquals;, +import static org.springframework.test.util.AssertionErrors.assertTrue;, +	 * Assert the primary value of the response header with the given Hamcrest, +	 * String {@code Matcher}., +	 * Assert the values of the response header with the given Hamcrest, +	 * Iterable {@link Matcher}., +	 * @since 4.3, +	 */, +	public <T> ResultMatcher stringValues(final String name, final Matcher<Iterable<String>> matcher) {, +		return new ResultMatcher() {, +			@Override, +			public void match(MvcResult result) {, +				List<String> values = result.getResponse().getHeaders(name);, +				assertThat("Response header " + name, values, matcher);, +			}, +		};, +	}, +, +	/**, +	 * Assert the primary value of the response header as a String value., +				assertEquals("Response header " + name, result.getResponse().getHeader(name), value);, +			}, +		};, +	}, +, +	/**, +	 * Assert the values of the response header as String values., +	 * @since 4.3, +	 */, +	public ResultMatcher stringValues(final String name, final String... values) {, +		return new ResultMatcher() {, +			@Override, +			public void match(MvcResult result) {, +				List<Object> actual = result.getResponse().getHeaderValues(name);, +				assertEquals("Response header " + name, Arrays.asList(values), actual);, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/HeaderAssertionTests.java, +import static org.hamcrest.CoreMatchers.containsString;, +import static org.hamcrest.CoreMatchers.hasItems;, +import static org.hamcrest.CoreMatchers.startsWith;, +import static org.springframework.http.HttpHeaders.VARY;, +	public void multiStringHeaderValue() throws Exception {, +		this.mockMvc.perform(get("/persons/1")).andExpect(header().stringValues(VARY, "foo", "bar"));, +	}, +, +	@SuppressWarnings("unchecked"), +	@Test, +	public void multiStringHeaderValueWithMatchers() throws Exception {]