[+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +import java.util.concurrent.Callable;, +	 * Read the given {@code InputStream} into a <strong>read-once</strong> {@code Flux} of, +	 * <p>The resulting {@code Flux} can only be subscribed to once. See, +	 * {@link #readInputStream(Callable, DataBufferFactory, int)} for a variant that supports, +	 * multiple subscriptions., +	 * @deprecated as of Spring 5.0.3, in favor of, +	 * {@link #readInputStream(Callable, DataBufferFactory, int)}, to be removed in Spring 5.1, +	@Deprecated, +		return readInputStream(() -> inputStream, dataBufferFactory, bufferSize);, +	 * Obtain a {@link InputStream} from the given supplier, and read it into a {@code Flux} of, +	 * {@code DataBuffer}s. Closes the input stream when the flux is terminated., +	 * @param inputStreamSupplier the supplier for the input stream to read from, +	public static Flux<DataBuffer> readInputStream(Callable<InputStream> inputStreamSupplier,, +			DataBufferFactory dataBufferFactory, int bufferSize) {, +, +		Assert.notNull(inputStreamSupplier, "'inputStreamSupplier' must not be null");, +, +		return readByteChannel(() -> Channels.newChannel(inputStreamSupplier.call()),, +				dataBufferFactory, bufferSize);, +	}, +, +	/**, +	 * Read the given {@code ReadableByteChannel} into a <strong>read-once</strong> {@code Flux} of, +	 * {@code DataBuffer}s. Closes the channel when the flux is terminated., +	 * <p>The resulting {@code Flux} can only be subscribed to once. See, +	 * {@link #readByteChannel(Callable, DataBufferFactory, int)} for a variant that supports, +	 * multiple subscriptions., +	 * @param channel the channel to read from, +	 * @param dataBufferFactory the factory to create data buffers with, +	 * @param bufferSize the maximum size of the data buffers, +	 * @return a flux of data buffers read from the given channel, +	 * @deprecated as of Spring 5.0.3, in favor of, +	 * {@link #readByteChannel(Callable, DataBufferFactory, int)}, to be removed in Spring 5.1, +	 */, +	@Deprecated, +		return readByteChannel(() -> channel, dataBufferFactory, bufferSize);, +	 * Obtain a {@link ReadableByteChannel} from the given supplier, and read it into a, +	 * {@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated., +	 * @param channelSupplier the supplier for the channel to read from, +	public static Flux<DataBuffer> readByteChannel(Callable<ReadableByteChannel> channelSupplier,, +, +		Assert.notNull(channelSupplier, "'channelSupplier' must not be null");, +		Assert.notNull(dataBufferFactory, "'dataBufferFactory' must not be null");, +		Assert.isTrue(bufferSize > 0, "'bufferSize' must be > 0");, +, +		return Flux.using(channelSupplier,, +				channel -> {, +					ReadableByteChannelGenerator generator =, +							new ReadableByteChannelGenerator(channel, dataBufferFactory,, +									bufferSize);, +					return Flux.generate(generator);, +				},, +				DataBufferUtils::closeChannel, +		);, +	 * Read the given {@code AsynchronousFileChannel} into a <strong>read-once</strong> {@code Flux}, +	 * of {@code DataBuffer}s. Closes the channel when the flux is terminated., +	 * <p>The resulting {@code Flux} can only be subscribed to once. See, +	 * {@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)} for a variant that, +	 * supports multiple subscriptions., +	 * @param channel the channel to read from, +	 * @param dataBufferFactory the factory to create data buffers with, +	 * @param bufferSize the maximum size of the data buffers, +	 * @return a flux of data buffers read from the given channel, +	 * @deprecated as of Spring 5.0.3, in favor of, +	 * {@link #readAsynchronousFileChannel(Callable, DataBufferFactory, int)}, to be removed in, +	 * Spring 5.1, +	 */, +	@Deprecated, +	public static Flux<DataBuffer> read(AsynchronousFileChannel channel,, +			DataBufferFactory dataBufferFactory, int bufferSize) {, +		return readAsynchronousFileChannel(() -> channel, dataBufferFactory, bufferSize);, +	}, +, +	/**, +	 * Read the given {@code AsynchronousFileChannel} into a <strong>read-once</strong> {@code Flux}, +	 * of {@code DataBuffer}s, starting at the given position. Closes the channel when the flux is, +	 * <p>The resulting {@code Flux} can only be subscribed to once. See, +	 * {@link #readAsynchronousFileChannel(Callable, long, DataBufferFactory, int)} for a variant, +	 * that supports multiple subscriptions., +	 * @deprecated as of Spring 5.0.3, in favor of, +	 * {@link #readAsynchronousFileChannel(Callable, long, DataBufferFactory, int)}, to be removed, +	 * in Spring 5.1, +	@Deprecated, +		return readAsynchronousFileChannel(() -> channel, position, dataBufferFactory, bufferSize);, +	}, +	/**, +	 * Obtain a {@code AsynchronousFileChannel} from the given supplier, and read it into a, +	 * {@code Flux} of {@code DataBuffer}s. Closes the channel when the flux is terminated., +	 * @param channelSupplier the supplier for the channel to read from, +	 * @param dataBufferFactory the factory to create data buffers with, +	 * @param bufferSize the maximum size of the data buffers, +	 * @return a flux of data buffers read from the given channel, +	 */, +	public static Flux<DataBuffer> readAsynchronousFileChannel(, +			Callable<AsynchronousFileChannel> channelSupplier,, +			DataBufferFactory dataBufferFactory, int bufferSize) {, +, +		return readAsynchronousFileChannel(channelSupplier, 0, dataBufferFactory, bufferSize);, +	}]