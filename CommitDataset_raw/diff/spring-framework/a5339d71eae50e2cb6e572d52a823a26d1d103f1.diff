[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java, +			// Maybe it's okay there is no content type, if there is no content.., +			result = message.getBody().map(buffer -> {, +				DataBufferUtils.release(buffer);, +			result = message instanceof ClientHttpResponse ?, +					consumeAndCancel(message).thenMany(Flux.error(ex)) : Flux.error(ex);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java, +			// Maybe it's okay there is no content type, if there is no content.., +			result = message.getBody().map(buffer -> {, +				DataBufferUtils.release(buffer);, +			result = message instanceof ClientHttpResponse ?, +					consumeAndCancel(message).thenMany(Flux.error(ex)) : Flux.error(ex);, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientDataBufferAllocatingTests.java, +import java.util.Map;, +import org.springframework.core.ParameterizedTypeReference;, +import org.springframework.web.reactive.function.UnsupportedMediaTypeException;, +	@Test // SPR-17482, +	public void bodyToMonoVoidWithoutContentType() {, +, +		this.server.enqueue(new MockResponse(), +				.setResponseCode(HttpStatus.ACCEPTED.value()), +				.setChunkedBody("{\"foo\" : \"123\",  \"baz\" : \"456\", \"baz\" : \"456\"}", 5));, +, +		Mono<Map<String, String>> mono = this.webClient.get(), +				.uri("/sample").accept(MediaType.APPLICATION_JSON), +				.retrieve(), +				.bodyToMono(new ParameterizedTypeReference<Map<String, String>>() {});, +, +		StepVerifier.create(mono).expectError(UnsupportedMediaTypeException.class).verify(Duration.ofSeconds(3));, +		assertEquals(1, this.server.getRequestCount());, +	}]