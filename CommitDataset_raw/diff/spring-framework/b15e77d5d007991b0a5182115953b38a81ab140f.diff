[+++ b/org.springframework.test/src/main/java/org/springframework/mock/web/portlet/MockPortletContext.java, +import javax.activation.FileTypeMap;, +		return 2;, +		return MimeTypeResolver.getMimeType(filePath);, +, +	/**, +	 * Inner factory class used to just introduce a Java Activation Framework, +	 * dependency when actually asked to resolve a MIME type., +	 */, +	private static class MimeTypeResolver {, +, +		public static String getMimeType(String filePath) {, +			return FileTypeMap.getDefaultFileTypeMap().getContentType(filePath);, +		}, +	}, +, +++ b/org.springframework.test/src/main/java/org/springframework/mock/web/portlet/MockPortletContext.java, +import javax.activation.FileTypeMap;, +		return 2;, +		return MimeTypeResolver.getMimeType(filePath);, +, +	/**, +	 * Inner factory class used to just introduce a Java Activation Framework, +	 * dependency when actually asked to resolve a MIME type., +	 */, +	private static class MimeTypeResolver {, +, +		public static String getMimeType(String filePath) {, +			return FileTypeMap.getDefaultFileTypeMap().getContentType(filePath);, +		}, +	}, +, +++ b/org.springframework.test/src/main/java/org/springframework/mock/web/portlet/MockPortletSession.java, +import java.util.Iterator;, +import javax.servlet.http.HttpSessionBindingEvent;, +import javax.servlet.http.HttpSessionBindingListener;, +, +import org.springframework.mock.web.MockHttpSession;, +	/**, +	 * Clear all of this session's attributes., +	 */, +	public void clearAttributes() {, +		doClearAttributes(this.portletAttributes);, +		doClearAttributes(this.applicationAttributes);, +	}, +, +	protected void doClearAttributes(Map<String, Object> attributes) {, +		for (Iterator<Map.Entry<String, Object>> it = attributes.entrySet().iterator(); it.hasNext();) {, +			Map.Entry<String, Object> entry = it.next();, +			String name = entry.getKey();, +			Object value = entry.getValue();, +			it.remove();, +			if (value instanceof HttpSessionBindingListener) {, +				((HttpSessionBindingListener) value).valueUnbound(, +						new HttpSessionBindingEvent(new MockHttpSession(), name, value));, +			}, +		}, +	}, +, +		clearAttributes();, +		return this.invalid;, +++ b/org.springframework.test/src/main/java/org/springframework/mock/web/portlet/MockPortletContext.java, +import javax.activation.FileTypeMap;, +		return 2;, +		return MimeTypeResolver.getMimeType(filePath);, +, +	/**, +	 * Inner factory class used to just introduce a Java Activation Framework, +	 * dependency when actually asked to resolve a MIME type., +	 */, +	private static class MimeTypeResolver {, +, +		public static String getMimeType(String filePath) {, +			return FileTypeMap.getDefaultFileTypeMap().getContentType(filePath);, +		}, +	}, +, +++ b/org.springframework.test/src/main/java/org/springframework/mock/web/portlet/MockPortletSession.java, +import java.util.Iterator;, +import javax.servlet.http.HttpSessionBindingEvent;, +import javax.servlet.http.HttpSessionBindingListener;, +, +import org.springframework.mock.web.MockHttpSession;, +	/**, +	 * Clear all of this session's attributes., +	 */, +	public void clearAttributes() {, +		doClearAttributes(this.portletAttributes);, +		doClearAttributes(this.applicationAttributes);, +	}, +, +	protected void doClearAttributes(Map<String, Object> attributes) {, +		for (Iterator<Map.Entry<String, Object>> it = attributes.entrySet().iterator(); it.hasNext();) {, +			Map.Entry<String, Object> entry = it.next();, +			String name = entry.getKey();, +			Object value = entry.getValue();, +			it.remove();, +			if (value instanceof HttpSessionBindingListener) {, +				((HttpSessionBindingListener) value).valueUnbound(, +						new HttpSessionBindingEvent(new MockHttpSession(), name, value));]