[+++ b/org.springframework.context/src/main/java/org/springframework/jmx/access/MBeanClientInterceptor.java, +	 * <p>Specifying the empty String indicates the platform MBeanServer., +++ b/org.springframework.context/src/main/java/org/springframework/jmx/access/MBeanClientInterceptor.java, +	 * <p>Specifying the empty String indicates the platform MBeanServer., +++ b/org.springframework.context/src/main/java/org/springframework/jmx/access/NotificationListenerRegistrar.java, + * Copyright 2002-2009 the original author or authors., +	 * <p>Specifying the empty String indicates the platform MBeanServer., +++ b/org.springframework.context/src/main/java/org/springframework/jmx/access/MBeanClientInterceptor.java, +	 * <p>Specifying the empty String indicates the platform MBeanServer., +++ b/org.springframework.context/src/main/java/org/springframework/jmx/access/NotificationListenerRegistrar.java, + * Copyright 2002-2009 the original author or authors., +	 * <p>Specifying the empty String indicates the platform MBeanServer., +++ b/org.springframework.context/src/main/java/org/springframework/jmx/support/JmxUtils.java, +	 * If this parameter is <code>null</code>, all registered MBeanServers are considered., +	 * If the empty String is given, the platform MBeanServer will be returned., +, +		// null means any registered server, but "" specifically means the platform server, +		if (!"".equals(agentId)) {, +			List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(agentId);, +				server = servers.get(0);, +			}, +		if (server == null && !StringUtils.hasLength(agentId)) {, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/access/MBeanClientInterceptor.java, +	 * <p>Specifying the empty String indicates the platform MBeanServer., +++ b/org.springframework.context/src/main/java/org/springframework/jmx/access/NotificationListenerRegistrar.java, + * Copyright 2002-2009 the original author or authors., +	 * <p>Specifying the empty String indicates the platform MBeanServer., +++ b/org.springframework.context/src/main/java/org/springframework/jmx/support/JmxUtils.java, +	 * If this parameter is <code>null</code>, all registered MBeanServers are considered., +	 * If the empty String is given, the platform MBeanServer will be returned., +, +		// null means any registered server, but "" specifically means the platform server, +		if (!"".equals(agentId)) {, +			List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(agentId);, +				server = servers.get(0);, +			}, +		if (server == null && !StringUtils.hasLength(agentId)) {, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/support/MBeanServerFactoryBean.java, +	 * <p>Specifying the empty String indicates the platform MBeanServer., +++ b/org.springframework.context/src/main/java/org/springframework/jmx/access/MBeanClientInterceptor.java, +	 * <p>Specifying the empty String indicates the platform MBeanServer., +++ b/org.springframework.context/src/main/java/org/springframework/jmx/access/NotificationListenerRegistrar.java, + * Copyright 2002-2009 the original author or authors., +	 * <p>Specifying the empty String indicates the platform MBeanServer., +++ b/org.springframework.context/src/main/java/org/springframework/jmx/support/JmxUtils.java, +	 * If this parameter is <code>null</code>, all registered MBeanServers are considered., +	 * If the empty String is given, the platform MBeanServer will be returned., +, +		// null means any registered server, but "" specifically means the platform server, +		if (!"".equals(agentId)) {, +			List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(agentId);, +				server = servers.get(0);, +			}, +		if (server == null && !StringUtils.hasLength(agentId)) {, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/support/MBeanServerFactoryBean.java, +	 * <p>Specifying the empty String indicates the platform MBeanServer., +++ b/org.springframework.context/src/test/java/org/springframework/jmx/support/MBeanServerFactoryBeanTests.java, + * Copyright 2002-2009 the original author or authors., +import java.lang.management.ManagementFactory;, + * @author Juergen Hoeller, +			MBeanServer server = bean.getObject();, +			MBeanServer server = bean.getObject();, +				MBeanServer otherServer = bean.getObject();, +	public void testWithLocateExistingAndFallbackToPlatformServer() {, +			assertSame(ManagementFactory.getPlatformMBeanServer(), bean.getObject());, +		}, +		finally {, +			bean.destroy();, +		}, +	}, +, +	public void testWithEmptyAgentIdAndFallbackToPlatformServer() {, +		MBeanServerFactoryBean bean = new MBeanServerFactoryBean();, +		bean.setAgentId("");, +		bean.afterPropertiesSet();, +		try {, +			assertSame(ManagementFactory.getPlatformMBeanServer(), bean.getObject());, +			MBeanServer server = bean.getObject();, +			List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);, +			for (MBeanServer candidate : servers) {, +				if (candidate == server) {]