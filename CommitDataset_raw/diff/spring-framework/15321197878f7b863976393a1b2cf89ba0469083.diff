[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java, +	private Map<Class, PropertyEditor> overriddenDefaultEditors;, +, +	 * Override the default editor for the specified type with the given property editor., +	 * <p>Note that this is different from registering a custom editor in that the editor, +	 * semantically still is a default editor. A ConversionService will override such a, +	 * default editor, whereas custom editors usually override the ConversionService., +	 * @param requiredType the type of the property, +	 * @param propertyEditor the editor to register, +	 * @see #registerCustomEditor(Class, PropertyEditor), +	 */, +	public void overrideDefaultEditor(Class requiredType, PropertyEditor propertyEditor) {, +		if (this.overriddenDefaultEditors == null) {, +			this.overriddenDefaultEditors = new HashMap<Class, PropertyEditor>();, +		}, +		this.overriddenDefaultEditors.put(requiredType, propertyEditor);, +	}, +, +	/**, +		if (this.overriddenDefaultEditors != null) {, +			PropertyEditor editor = this.overriddenDefaultEditors.get(requiredType);, +			if (editor != null) {, +				return editor;, +			}, +		}, +			createDefaultEditors();, +	private void createDefaultEditors() {, +		target.defaultEditors = this.defaultEditors;, +		target.overriddenDefaultEditors = this.overriddenDefaultEditors;, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java, +	private Map<Class, PropertyEditor> overriddenDefaultEditors;, +, +	 * Override the default editor for the specified type with the given property editor., +	 * <p>Note that this is different from registering a custom editor in that the editor, +	 * semantically still is a default editor. A ConversionService will override such a, +	 * default editor, whereas custom editors usually override the ConversionService., +	 * @param requiredType the type of the property, +	 * @param propertyEditor the editor to register, +	 * @see #registerCustomEditor(Class, PropertyEditor), +	 */, +	public void overrideDefaultEditor(Class requiredType, PropertyEditor propertyEditor) {, +		if (this.overriddenDefaultEditors == null) {, +			this.overriddenDefaultEditors = new HashMap<Class, PropertyEditor>();, +		}, +		this.overriddenDefaultEditors.put(requiredType, propertyEditor);, +	}, +, +	/**, +		if (this.overriddenDefaultEditors != null) {, +			PropertyEditor editor = this.overriddenDefaultEditors.get(requiredType);, +			if (editor != null) {, +				return editor;, +			}, +		}, +			createDefaultEditors();, +	private void createDefaultEditors() {, +		target.defaultEditors = this.defaultEditors;, +		target.overriddenDefaultEditors = this.overriddenDefaultEditors;, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/support/ResourceEditorRegistrar.java, + * Copyright 2002-2010 the original author or authors., +import java.beans.PropertyEditor;, +import org.springframework.beans.PropertyEditorRegistrySupport;, +		doRegisterEditor(registry, Resource.class, baseEditor);, +		doRegisterEditor(registry, InputStream.class, new InputStreamEditor(baseEditor));, +		doRegisterEditor(registry, InputSource.class, new InputSourceEditor(baseEditor));, +		doRegisterEditor(registry, File.class, new FileEditor(baseEditor));, +		doRegisterEditor(registry, URL.class, new URLEditor(baseEditor));, +		doRegisterEditor(registry, Class.class, new ClassEditor(classLoader));, +		doRegisterEditor(registry, URI.class, new URIEditor(classLoader));, +			doRegisterEditor(registry, Resource[].class,, +	/**, +	 * Override default editor, if possible (since that's what we really mean to do here);, +	 * otherwise register as a custom editor., +	 */, +	private void doRegisterEditor(PropertyEditorRegistry registry, Class requiredType, PropertyEditor editor) {, +		if (registry instanceof PropertyEditorRegistrySupport) {, +			((PropertyEditorRegistrySupport) registry).overrideDefaultEditor(requiredType, editor);, +		}, +		else {, +			registry.registerCustomEditor(requiredType, editor);, +		}, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java, +	private Map<Class, PropertyEditor> overriddenDefaultEditors;, +, +	 * Override the default editor for the specified type with the given property editor., +	 * <p>Note that this is different from registering a custom editor in that the editor, +	 * semantically still is a default editor. A ConversionService will override such a, +	 * default editor, whereas custom editors usually override the ConversionService., +	 * @param requiredType the type of the property, +	 * @param propertyEditor the editor to register, +	 * @see #registerCustomEditor(Class, PropertyEditor), +	 */, +	public void overrideDefaultEditor(Class requiredType, PropertyEditor propertyEditor) {, +		if (this.overriddenDefaultEditors == null) {, +			this.overriddenDefaultEditors = new HashMap<Class, PropertyEditor>();, +		}, +		this.overriddenDefaultEditors.put(requiredType, propertyEditor);, +	}]