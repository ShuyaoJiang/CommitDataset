[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +import org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient;, +	// STOMP recommends error of margin for receiving heartbeats, +	private static final Message<byte[]> HEARTBEAT_MESSAGE;, +, +	 * Configure a TCP client for managing TCP connections to the STOMP broker., +	 * By default {@link org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient} is used., +			this.tcpClient = new StompTcpClientFactory().create(this.relayHost, this.relayPort);, +				Message<?> errorMessage = MessageBuilder.withPayload(new byte[0]).setHeaders(headers).build();, +	private static class StompTcpClientFactory {, +, +		public TcpOperations<byte[]> create(String relayHost, int relayPort) {, +			return new ReactorNettyTcpClient<byte[]>(relayHost, relayPort, new StompCodec());, +		}, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +import org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient;, +	// STOMP recommends error of margin for receiving heartbeats, +	private static final Message<byte[]> HEARTBEAT_MESSAGE;, +, +	 * Configure a TCP client for managing TCP connections to the STOMP broker., +	 * By default {@link org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient} is used., +			this.tcpClient = new StompTcpClientFactory().create(this.relayHost, this.relayPort);, +				Message<?> errorMessage = MessageBuilder.withPayload(new byte[0]).setHeaders(headers).build();, +	private static class StompTcpClientFactory {, +, +		public TcpOperations<byte[]> create(String relayHost, int relayPort) {, +			return new ReactorNettyTcpClient<byte[]>(relayHost, relayPort, new StompCodec());, +		}, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java, + * Copyright 2002-2014 the original author or authors., +, + * An implementation of {@link org.springframework.messaging.tcp.TcpOperations}, + * based on the Reactor project., +	public static final Class<NettyTcpClient> REACTOR_TCP_CLIENT_TYPE = NettyTcpClient.class;, +, +	private final static Log logger = LogFactory.getLog(ReactorNettyTcpClient.class);, +	/**, +	 * A constructor that creates a {@link reactor.tcp.netty.NettyTcpClient} with, +	 * a {@link reactor.event.dispatch.SynchronousDispatcher} as a result of which, +	 * network I/O is handled in Netty threads., +	 *, +	 * <p>Also see the constructor accepting a pre-configured Reactor, +	 * {@link reactor.tcp.TcpClient}., +	 *, +	 * @param host the host to connect to, +	 * @param port the port to connect to, +	 * @param codec the codec to use for encoding and decoding the TCP stream, +	 */, +		this.tcpClient = new TcpClientSpec<Message<P>, Message<P>>(REACTOR_TCP_CLIENT_TYPE), +				.env(new Environment()), +				.synchronousDispatcher(), +	/**, +	 * A constructor with a pre-configured {@link reactor.tcp.TcpClient}., +	 *, +	 * <p><strong>NOTE:</strong> if the client is configured with a thread-creating, +	 * dispatcher, you are responsible for shutting down the {@link reactor.core.Environment}, +	 * instance with which the client is configured., +	 *, +	 * @param tcpClient the TcpClient to use, +	 */, +	public ReactorNettyTcpClient(TcpClient<Message<P>, Message<P>> tcpClient) {, +		Assert.notNull(tcpClient, "'tcpClient' must not be null");, +		this.tcpClient = tcpClient;, +	}, +, +				connection.consume(new Consumer<Message<P>>() {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +import org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient;, +	// STOMP recommends error of margin for receiving heartbeats, +	private static final Message<byte[]> HEARTBEAT_MESSAGE;, +, +	 * Configure a TCP client for managing TCP connections to the STOMP broker., +	 * By default {@link org.springframework.messaging.tcp.reactor.ReactorNettyTcpClient} is used., +			this.tcpClient = new StompTcpClientFactory().create(this.relayHost, this.relayPort);, +				Message<?> errorMessage = MessageBuilder.withPayload(new byte[0]).setHeaders(headers).build();, +	private static class StompTcpClientFactory {, +, +		public TcpOperations<byte[]> create(String relayHost, int relayPort) {, +			return new ReactorNettyTcpClient<byte[]>(relayHost, relayPort, new StompCodec());, +		}, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpClient.java, + * Copyright 2002-2014 the original author or authors., +, + * An implementation of {@link org.springframework.messaging.tcp.TcpOperations}, + * based on the Reactor project., +	public static final Class<NettyTcpClient> REACTOR_TCP_CLIENT_TYPE = NettyTcpClient.class;, +, +	private final static Log logger = LogFactory.getLog(ReactorNettyTcpClient.class);, +	/**, +	 * A constructor that creates a {@link reactor.tcp.netty.NettyTcpClient} with, +	 * a {@link reactor.event.dispatch.SynchronousDispatcher} as a result of which, +	 * network I/O is handled in Netty threads., +	 *, +	 * <p>Also see the constructor accepting a pre-configured Reactor]