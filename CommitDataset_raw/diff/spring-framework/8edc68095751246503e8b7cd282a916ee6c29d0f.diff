[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, + * Represents a typed, immutable, client-side HTTP request, as executed by the, + * {@link WebClient}. Instances of this interface can be created via static, + * builder methods in this class., + * <p>Note that applications are more likely to perform requests through, + * {@link WebClientOperations} rather than using this directly., + * :, +, +	static Builder from(ClientRequest<?> other) {, +	static Builder method(HttpMethod method, URI url) {, +	 * Defines a builder for a request., +	interface Builder {, +		Builder header(String headerName, String... headerValues);, +		Builder headers(HttpHeaders headers);, +		Builder cookie(String name, String value);, +		Builder cookies(MultiValueMap<String, String> cookies);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, + * Represents a typed, immutable, client-side HTTP request, as executed by the, + * {@link WebClient}. Instances of this interface can be created via static, + * builder methods in this class., + * <p>Note that applications are more likely to perform requests through, + * {@link WebClientOperations} rather than using this directly., + * :, +, +	static Builder from(ClientRequest<?> other) {, +	static Builder method(HttpMethod method, URI url) {, +	 * Defines a builder for a request., +	interface Builder {, +		Builder header(String headerName, String... headerValues);, +		Builder headers(HttpHeaders headers);, +		Builder cookie(String name, String value);, +		Builder cookies(MultiValueMap<String, String> cookies);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/DefaultClientRequestBuilder.java, + * Default implementation of {@link ClientRequest.Builder}., +class DefaultClientRequestBuilder implements ClientRequest.Builder {, +	public ClientRequest.Builder header(String headerName, String... headerValues) {, +	public ClientRequest.Builder headers(HttpHeaders headers) {, +	public ClientRequest.Builder cookie(String name, String value) {, +	public ClientRequest.Builder cookies(MultiValueMap<String, String> cookies) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, + * Represents a typed, immutable, client-side HTTP request, as executed by the, + * {@link WebClient}. Instances of this interface can be created via static, + * builder methods in this class., + * <p>Note that applications are more likely to perform requests through, + * {@link WebClientOperations} rather than using this directly., + * :, +, +	static Builder from(ClientRequest<?> other) {, +	static Builder method(HttpMethod method, URI url) {, +	 * Defines a builder for a request., +	interface Builder {, +		Builder header(String headerName, String... headerValues);, +		Builder headers(HttpHeaders headers);, +		Builder cookie(String name, String value);, +		Builder cookies(MultiValueMap<String, String> cookies);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/DefaultClientRequestBuilder.java, + * Default implementation of {@link ClientRequest.Builder}., +class DefaultClientRequestBuilder implements ClientRequest.Builder {, +	public ClientRequest.Builder header(String headerName, String... headerValues) {, +	public ClientRequest.Builder headers(HttpHeaders headers) {, +	public ClientRequest.Builder cookie(String name, String value) {, +	public ClientRequest.Builder cookies(MultiValueMap<String, String> cookies) {, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientOperations.java, +import java.time.ZoneId;, +import java.time.format.DateTimeFormatter;, +import java.util.Arrays;, +		private final ClientRequest.Builder requestBuilder;, +, +		private final HttpHeaders headers = new HttpHeaders();, +		DefaultHeaderSpec(ClientRequest.Builder requestBuilder) {, +			for (String headerValue : headerValues) {, +				this.headers.add(headerName, headerValue);, +			}, +			if (headers != null) {, +				this.headers.putAll(headers);, +			}, +			this.headers.setAccept(Arrays.asList(acceptableMediaTypes));, +			this.headers.setAcceptCharset(Arrays.asList(acceptableCharsets));, +			this.headers.setContentType(contentType);, +			this.headers.setContentLength(contentLength);, +			ZonedDateTime gmt = ifModifiedSince.withZoneSameInstant(ZoneId.of("GMT"));, +			String headerValue = DateTimeFormatter.RFC_1123_DATE_TIME.format(gmt);, +			this.headers.set(HttpHeaders.IF_MODIFIED_SINCE, headerValue);, +			this.headers.setIfNoneMatch(Arrays.asList(ifNoneMatches));, +			ClientRequest<Void> request = this.requestBuilder.headers(this.headers).build();, +			ClientRequest<T> request = this.requestBuilder.headers(this.headers).body(inserter);, +			ClientRequest<S> request = this.requestBuilder.headers(this.headers).body(publisher, elementClass);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/client/ClientRequest.java, + * Represents a typed, immutable, client-side HTTP request, as executed by the, + * {@link WebClient}. Instances of this interface can be created via static, + * builder methods in this class., + * <p>Note that applications are more likely to perform requests through, + * {@link WebClientOperations} rather than using this directly., + * :, +, +	static Builder from(ClientRequest<?> other) {, +	static Builder method(HttpMethod method, URI url) {, +	 * Defines a builder for a request., +	interface Builder {, +		Builder header(String headerName, String... headerValues);]