[+++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapter.java, + * Copyright 2002-2018 the original author or authors., + * Adapter for a Reactive Streams {@link Publisher} to and from an async/reactive, + * type such as {@code CompletableFuture}, RxJava {@code Observable}, and others., + * <p>An adapter is typically obtained via {@link ReactiveAdapterRegistry}., +	 * Shortcut for {@code getDescriptor().getReactiveType()}., +	 * Shortcut for {@code getDescriptor().isMultiValue()}., +	 * Shortcut for {@code getDescriptor().supportsEmpty()}., +	 * Shortcut for {@code getDescriptor().isNoValue()}., +	 * Adapt the given instance to a Reactive Streams {@code Publisher}., +	 * @param source the source object to adapt from; if the given object is, +	 * {@code null}, {@link ReactiveTypeDescriptor#getEmptyValue()} is used., +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapter.java, + * Copyright 2002-2018 the original author or authors., + * Adapter for a Reactive Streams {@link Publisher} to and from an async/reactive, + * type such as {@code CompletableFuture}, RxJava {@code Observable}, and others., + * <p>An adapter is typically obtained via {@link ReactiveAdapterRegistry}., +	 * Shortcut for {@code getDescriptor().getReactiveType()}., +	 * Shortcut for {@code getDescriptor().isMultiValue()}., +	 * Shortcut for {@code getDescriptor().supportsEmpty()}., +	 * Shortcut for {@code getDescriptor().isNoValue()}., +	 * Adapt the given instance to a Reactive Streams {@code Publisher}., +	 * @param source the source object to adapt from; if the given object is, +	 * {@code null}, {@link ReactiveTypeDescriptor#getEmptyValue()} is used., +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, + * Copyright 2002-2018 the original author or authors., + * A registry of adapters to adapt Reactive Streams {@link Publisher} to/from, +	 * @see #getSharedInstance(), +	 *, +	 *, +		ReactiveAdapterRegistry registry = sharedInstance;, +		if (registry == null) {, +				registry = sharedInstance;, +				if (registry == null) {, +					registry = new ReactiveAdapterRegistry();, +					sharedInstance = registry;, +		return registry;, +, +			// Register Flux and Mono before Publisher..., +					ReactiveTypeDescriptor.singleOptionalValue(Mono.class, Mono::empty),, +			registry.registerReactiveType(, +					ReactiveTypeDescriptor.multiValue(Flux.class, Flux::empty),, +			registry.registerReactiveType(, +					ReactiveTypeDescriptor.multiValue(Publisher.class, Flux::empty),, +					ReactiveTypeDescriptor.singleOptionalValue(CompletableFuture.class, () -> {, +					ReactiveTypeDescriptor.multiValue(rx.Observable.class, rx.Observable::empty),, +					ReactiveTypeDescriptor.singleRequiredValue(rx.Single.class),, +					ReactiveTypeDescriptor.noValue(rx.Completable.class, rx.Completable::complete),, +					ReactiveTypeDescriptor.multiValue(io.reactivex.Flowable.class, io.reactivex.Flowable::empty),, +					ReactiveTypeDescriptor.multiValue(io.reactivex.Observable.class, io.reactivex.Observable::empty),, +					ReactiveTypeDescriptor.singleRequiredValue(io.reactivex.Single.class),, +					ReactiveTypeDescriptor.singleOptionalValue(io.reactivex.Maybe.class, io.reactivex.Maybe::empty),, +					ReactiveTypeDescriptor.noValue(io.reactivex.Completable.class, io.reactivex.Completable::complete),, +			// TODO: remove reflection when build requires JDK 9+, +					ReactiveTypeDescriptor.multiValue(type, () -> emptyFlow),, +	 * ReactiveAdapter variant that wraps adapted Publishers as {@link Flux} or, +	 * {@link Mono} depending on {@link ReactiveTypeDescriptor#isMultiValue()}., +	 * This is important in places where only the stream and stream element type, +	 * information is available like encoders and decoders., +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapter.java, + * Copyright 2002-2018 the original author or authors., + * Adapter for a Reactive Streams {@link Publisher} to and from an async/reactive, + * type such as {@code CompletableFuture}, RxJava {@code Observable}, and others., + * <p>An adapter is typically obtained via {@link ReactiveAdapterRegistry}., +	 * Shortcut for {@code getDescriptor().getReactiveType()}., +	 * Shortcut for {@code getDescriptor().isMultiValue()}., +	 * Shortcut for {@code getDescriptor().supportsEmpty()}., +	 * Shortcut for {@code getDescriptor().isNoValue()}., +	 * Adapt the given instance to a Reactive Streams {@code Publisher}., +	 * @param source the source object to adapt from; if the given object is, +	 * {@code null}, {@link ReactiveTypeDescriptor#getEmptyValue()} is used., +++ b/spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java, + * Copyright 2002-2018 the original author or authors., + * A registry of adapters to adapt Reactive Streams {@link Publisher} to/from, +	 * @see #getSharedInstance(), +	 *, +	 *, +		ReactiveAdapterRegistry registry = sharedInstance;, +		if (registry == null) {, +				registry = sharedInstance;, +				if (registry == null) {, +					registry = new ReactiveAdapterRegistry();, +					sharedInstance = registry;, +		return registry;, +, +			// Register Flux and Mono before Publisher..., +					ReactiveTypeDescriptor.singleOptionalValue(Mono.class, Mono::empty),, +			registry.registerReactiveType(, +					ReactiveTypeDescriptor.multiValue(Flux.class, Flux::empty),, +			registry.registerReactiveType(, +					ReactiveTypeDescriptor.multiValue(Publisher.class, Flux::empty),, +					ReactiveTypeDescriptor.singleOptionalValue(CompletableFuture.class, () -> {, +					ReactiveTypeDescriptor.multiValue(rx.Observable.class, rx.Observable::empty),, +					ReactiveTypeDescriptor.singleRequiredValue(rx.Single.class),, +					ReactiveTypeDescriptor.noValue(rx.Completable.class, rx.Completable::complete),, +					ReactiveTypeDescriptor.multiValue(io.reactivex.Flowable.class, io.reactivex.Flowable::empty),, +					ReactiveTypeDescriptor.multiValue(io.reactivex.Observable.class, io.reactivex.Observable::empty),, +					ReactiveTypeDescriptor.singleRequiredValue(io.reactivex.Single.class),, +					ReactiveTypeDescriptor.singleOptionalValue(io.reactivex.Maybe.class, io.reactivex.Maybe::empty),, +					ReactiveTypeDescriptor.noValue(io.reactivex.Completable.class, io.reactivex.Completable::complete),]