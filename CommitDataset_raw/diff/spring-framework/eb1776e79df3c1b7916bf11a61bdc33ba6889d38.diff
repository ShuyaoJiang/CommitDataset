[+++ b/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.util.Assert;, +	private PropertySources appliedPropertySources;, +, +		this.appliedPropertySources = this.propertySources;, +	/**, +	 * Returns the property sources that were actually applied during, +	 * {@link #postProcessBeanFactory(ConfigurableListableBeanFactory) post-processing}., +	 * @return the property sources that were applied, +	 * @throws IllegalStateException if the property sources have not yet been applied, +	 * @since 4.0, +	 */, +	public PropertySources getAppliedPropertySources() throws IllegalStateException {, +		Assert.state(this.appliedPropertySources != null, "PropertySources have not get been applied");, +		return this.appliedPropertySources;, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.util.Assert;, +	private PropertySources appliedPropertySources;, +, +		this.appliedPropertySources = this.propertySources;, +	/**, +	 * Returns the property sources that were actually applied during, +	 * {@link #postProcessBeanFactory(ConfigurableListableBeanFactory) post-processing}., +	 * @return the property sources that were applied, +	 * @throws IllegalStateException if the property sources have not yet been applied, +	 * @since 4.0, +	 */, +	public PropertySources getAppliedPropertySources() throws IllegalStateException {, +		Assert.state(this.appliedPropertySources != null, "PropertySources have not get been applied");, +		return this.appliedPropertySources;, +	}, +, +++ b/spring-context/src/test/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurerTests.java, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +import org.springframework.core.env.StandardEnvironment;, +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +import static org.springframework.beans.factory.support.BeanDefinitionBuilder.*;, +, +	@Rule, +	public ExpectedException thrown = ExpectedException.none();, +, +		assertThat(ppc.getAppliedPropertySources(), not(nullValue()));, +		assertEquals(pc.getAppliedPropertySources().iterator().next(), propertySources.iterator().next());, +		assertEquals(pc.getAppliedPropertySources().iterator().next(), propertySources.iterator().next());, +, +	@Test, +	public void getAppliedPropertySourcesTooEarly() throws Exception {, +		PropertySourcesPlaceholderConfigurer ppc = new PropertySourcesPlaceholderConfigurer();, +		thrown.expect(IllegalStateException.class);, +		ppc.getAppliedPropertySources();, +	}]