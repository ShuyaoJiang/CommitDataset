[+++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/JodaTimeContextHolder.java, + * Copyright 2002-2010 the original author or authors., + * @since 3.0, +, +	 * Obtain a DateTimeFormatter with user-specific settings applied to the given base Formatter., +	 * @param formatter the base formatter that establishes default formatting rules, +	 * (generally user independent), +	 * @param locale the current user locale (may be <code>null</code> if not known), +	 * @return the user-specific DateTimeFormatter, +		DateTimeFormatter formatterToUse = (locale != null ? formatter.withLocale(locale) : formatter);, +		return (context != null ? context.getFormatter(formatterToUse) : formatterToUse);, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/JodaTimeContextHolder.java, + * Copyright 2002-2010 the original author or authors., + * @since 3.0, +, +	 * Obtain a DateTimeFormatter with user-specific settings applied to the given base Formatter., +	 * @param formatter the base formatter that establishes default formatting rules, +	 * (generally user independent), +	 * @param locale the current user locale (may be <code>null</code> if not known), +	 * @return the user-specific DateTimeFormatter, +		DateTimeFormatter formatterToUse = (locale != null ? formatter.withLocale(locale) : formatter);, +		return (context != null ? context.getFormatter(formatterToUse) : formatterToUse);, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/support/MBeanServerConnectionFactoryBean.java, + * Copyright 2002-2010 the original author or authors., +		public Class<?> getTargetClass() {, +		public Class<?> getTargetClass() {, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/JodaTimeContextHolder.java, + * Copyright 2002-2010 the original author or authors., + * @since 3.0, +, +	 * Obtain a DateTimeFormatter with user-specific settings applied to the given base Formatter., +	 * @param formatter the base formatter that establishes default formatting rules, +	 * (generally user independent), +	 * @param locale the current user locale (may be <code>null</code> if not known), +	 * @return the user-specific DateTimeFormatter, +		DateTimeFormatter formatterToUse = (locale != null ? formatter.withLocale(locale) : formatter);, +		return (context != null ? context.getFormatter(formatterToUse) : formatterToUse);, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/support/MBeanServerConnectionFactoryBean.java, + * Copyright 2002-2010 the original author or authors., +		public Class<?> getTargetClass() {, +		public Class<?> getTargetClass() {, +++ b/org.springframework.context/src/main/java/org/springframework/jndi/JndiObjectLocator.java, + * Copyright 2002-2010 the original author or authors., +	private Class<?> expectedType;, +	public void setExpectedType(Class<?> expectedType) {, +	public Class<?> getExpectedType() {, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/JodaTimeContextHolder.java, + * Copyright 2002-2010 the original author or authors., + * @since 3.0, +, +	 * Obtain a DateTimeFormatter with user-specific settings applied to the given base Formatter., +	 * @param formatter the base formatter that establishes default formatting rules, +	 * (generally user independent), +	 * @param locale the current user locale (may be <code>null</code> if not known), +	 * @return the user-specific DateTimeFormatter, +		DateTimeFormatter formatterToUse = (locale != null ? formatter.withLocale(locale) : formatter);, +		return (context != null ? context.getFormatter(formatterToUse) : formatterToUse);, +++ b/org.springframework.context/src/main/java/org/springframework/jmx/support/MBeanServerConnectionFactoryBean.java, + * Copyright 2002-2010 the original author or authors., +		public Class<?> getTargetClass() {, +		public Class<?> getTargetClass() {, +++ b/org.springframework.context/src/main/java/org/springframework/jndi/JndiObjectLocator.java, + * Copyright 2002-2010 the original author or authors., +	private Class<?> expectedType;, +	public void setExpectedType(Class<?> expectedType) {, +	public Class<?> getExpectedType() {, +++ b/org.springframework.context/src/main/java/org/springframework/jndi/JndiObjectTargetSource.java, + * Copyright 2002-2010 the original author or authors., +	public Class<?> getTargetClass() {]