[+++ b/.gitignore, +derby.log, +/build, +buildSrc/build, +/spring-*/build, +, +# IDEA artifacts and output dirs, +test-output, +atlassian-ide-plugin.xml, +++ b/.gitignore, +derby.log, +/build, +buildSrc/build, +/spring-*/build, +, +# IDEA artifacts and output dirs, +test-output, +atlassian-ide-plugin.xml, +++ b/CONTRIBUTING.md, +submitting a pull request. We're happy to provide guidance, but please spend an, +Keep track of this; you may be asked for it later!, +Once you've completed the web form, simply add the following in a comment on, +future pull requests as well, simply so that the Spring Framework team knows, +from Spring Framework's `3.2.x` branch. `master` is reserved for work on new features, +1. Unix (LF), not DOS (CRLF) line endings, +   Fix, Introduce, Avoid, etc.", +1. Mention associated JIRA issue(s) at the end of the commit comment, prefixed, +++ b/.gitignore, +derby.log, +/build, +buildSrc/build, +/spring-*/build, +, +# IDEA artifacts and output dirs, +test-output, +atlassian-ide-plugin.xml, +++ b/CONTRIBUTING.md, +submitting a pull request. We're happy to provide guidance, but please spend an, +Keep track of this; you may be asked for it later!, +Once you've completed the web form, simply add the following in a comment on, +future pull requests as well, simply so that the Spring Framework team knows, +from Spring Framework's `3.2.x` branch. `master` is reserved for work on new features, +1. Unix (LF), not DOS (CRLF) line endings, +   Fix, Introduce, Avoid, etc.", +1. Mention associated JIRA issue(s) at the end of the commit comment, prefixed, +++ b/build.gradle, +configure(allprojects) { project ->, +	apply plugin: "test-source-set-dependencies", +	test {, +		systemProperty("java.awt.headless", "true"), +		systemProperty("testGroups", properties.get("testGroups")), +	}, +		testCompile("org.mockito:mockito-core:1.9.5"), +		if (project.name in ["spring", "spring-jms", "spring-orm",, +				"spring-orm-hibernate4", "spring-oxm", "spring-struts",, +				"spring-test", "spring-test-mvc", "spring-tx", "spring-web",, +				"spring-webmvc", "spring-webmvc-portlet", "spring-webmvc-tiles3"]) {, +			testCompile "org.easymock:easymockclassextension:${easymockVersion}", +		}, +configure(subprojects - project(":spring-build-src")) { subproject ->, +project("spring-build-src") {, +	description = "Exposes gradle buildSrc for IDE support", +	apply plugin: "groovy", +, +	dependencies {, +		compile gradleApi(), +		groovy localGroovy(), +	}, +, +	configurations.archives.artifacts.clear(), +}, +		testCompile("xmlunit:xmlunit:1.3"), +		testCompile("javax.inject:javax.inject-tck:1"), +, +	compileTestJava {, +		// necessary to avoid java.lang.VerifyError on jibx compilation, +		// see http://jira.codehaus.org/browse/JIBX-465, +		sourceCompatibility=1.6, +		targetCompatibility=1.6, +	}, +, +		testCompile("xmlunit:xmlunit:1.3"), +		testCompile("xmlunit:xmlunit:1.3"), +, +	compileTestJava {, +		// necessary to avoid java.lang.VerifyError on toplink compilation, +		// TODO: remove this block when we remove toplink, +		sourceCompatibility=1.6, +		targetCompatibility=1.6, +	}, +, +		testCompile("xmlunit:xmlunit:1.3"), +	test {, +		useJUnit(), +		useTestNG(), +	}, +		optional("xmlunit:xmlunit:1.3"), +		testCompile(project(":spring-core").sourceSets.test.output), +++ b/.gitignore, +derby.log]