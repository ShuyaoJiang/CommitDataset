[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +	private interface ConditionalCallback extends Callback {, +				if (logger.isWarnEnabled() &&, +						BeanFactoryPostProcessor.class.isAssignableFrom(beanMethod.getReturnType())) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +	private interface ConditionalCallback extends Callback {, +				if (logger.isWarnEnabled() &&, +						BeanFactoryPostProcessor.class.isAssignableFrom(beanMethod.getReturnType())) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, + * Copyright 2002-2016 the original author or authors., +				else if (logger.isWarnEnabled() && beanFactory.containsSingleton(beanName)) {, +					logger.warn("Cannot enhance @Configuration bean definition '" + beanName +, +							"' since its singleton instance has been created too early. The typical cause " +, +							"is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor " +, +							"return type: Consider declaring such methods as 'static'.");, +				}]