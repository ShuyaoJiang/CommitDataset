[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/client/RxNettyWebSocketClient.java, +		int port = (url.getPort() > 0 ? url.getPort() : secure ? 443 : 80);, +		return HttpClient.newClient(url.getHost(), port);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/client/RxNettyWebSocketClient.java, +		int port = (url.getPort() > 0 ? url.getPort() : secure ? 443 : 80);, +		return HttpClient.newClient(url.getHost(), port);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/client/UndertowWebSocketClient.java, +import java.util.function.Consumer;, +import org.springframework.util.Assert;, +	private static final int DEFAULT_POOL_BUFFER_SIZE = 8192;, +	private final XnioWorker worker;, +, +	private final Consumer<ConnectionBuilder> builderConsumer;, +, +	private int poolBufferSize = DEFAULT_POOL_BUFFER_SIZE;, +	 * Constructor with the {@link XnioWorker} to pass to, +	 * {@link io.undertow.websockets.client.WebSocketClient#connectionBuilder}, +	 * @param worker the Xnio worker, +	public UndertowWebSocketClient(XnioWorker worker) {, +		this(worker, builder -> {});, +	 * Alternate constructor providing additional control over the, +	 * {@link ConnectionBuilder} for each WebSocket connection., +	 * @param worker the Xnio worker to use to create {@code ConnectionBuilder}'s, +	 * @param builderConsumer a consumer to configure {@code ConnectionBuilder}'s, +	public UndertowWebSocketClient(XnioWorker worker, Consumer<ConnectionBuilder> builderConsumer) {, +		Assert.notNull(worker, "XnioWorker is required");, +		this.worker = worker;, +		this.builderConsumer = builderConsumer;, +	/**, +	 * Return the configured {@link XnioWorker}., +	 */, +	public XnioWorker getXnioWorker() {, +		return this.worker;, +	/**, +	 * Return the configured {@code Consumer<ConnectionBuilder}., +	 */, +	public Consumer<ConnectionBuilder> getConnectionBuilderConsumer() {, +		return this.builderConsumer;, +	}, +, +	/**, +	 * Configure the size of the {@link io.undertow.connector.ByteBufferPool, +	 * ByteBufferPool} to pass to, +	 * {@link io.undertow.websockets.client.WebSocketClient#connectionBuilder}., +	 * <p>By default the buffer size is set to 8192., +	 */, +	public void setPoolBufferSize(int poolBufferSize) {, +		this.poolBufferSize = poolBufferSize;, +	}, +, +	/**, +	 * Return the size for Undertow's WebSocketClient {@code ByteBufferPool}., +	 */, +	public int getPoolBufferSize() {, +		return this.poolBufferSize;, +					ConnectionBuilder builder = createConnectionBuilder(url);, +					DefaultNegotiation negotiation = new DefaultNegotiation(protocols, headers, builder);, +					builder.setClientNegotiation(negotiation);, +					return builder.connect().addNotifier(, +							new IoFuture.HandlingNotifier<WebSocketChannel, Object>() {, +	/**, +	 * Create a {@link ConnectionBuilder} for the given URI., +	 * <p>The default implementation creates a builder with the configured, +	 * {@link #getXnioWorker() XnioWorker} and {@link #getPoolBufferSize()} and, +	 * then passes it to the {@link #getConnectionBuilderConsumer() consumer}, +	 * provided at construction time., +	 */, +	protected ConnectionBuilder createConnectionBuilder(URI url) {, +, +		ConnectionBuilder builder = io.undertow.websockets.client.WebSocketClient, +				.connectionBuilder(getXnioWorker(),, +						new DefaultByteBufferPool(false, getPoolBufferSize()), url);, +, +		this.builderConsumer.accept(builder);, +		return builder;, +	}, +, +		private final HttpHeaders responseHeaders = new HttpHeaders();, +, +		private final WebSocketClientNegotiation delegate;, +		public DefaultNegotiation(String[] protocols, HttpHeaders requestHeaders,, +				ConnectionBuilder connectionBuilder) {, +, +			super(Arrays.asList(protocols), Collections.emptyList());, +			this.delegate = connectionBuilder.getClientNegotiation();, +			if (this.delegate != null) {, +				this.delegate.beforeRequest(headers);, +			}, +			headers.forEach(this.responseHeaders::put);, +			if (this.delegate != null) {, +				this.delegate.afterRequest(headers);, +			}, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/client/RxNettyWebSocketClient.java, +		int port = (url.getPort() > 0 ? url.getPort() : secure ? 443 : 80);, +		return HttpClient.newClient(url.getHost(), port);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/client/UndertowWebSocketClient.java, +import java.util.function.Consumer;, +import org.springframework.util.Assert;, +	private static final int DEFAULT_POOL_BUFFER_SIZE = 8192;, +	private final XnioWorker worker;]