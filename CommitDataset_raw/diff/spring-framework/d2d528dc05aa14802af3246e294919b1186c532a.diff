[+++ b/spring-test/src/main/java/org/springframework/test/context/BootstrapUtils.java, +	private static final String DEFAULT_BOOTSTRAP_CONTEXT_CLASS_NAME =, +			"org.springframework.test.context.support.DefaultBootstrapContext";, +	private static final String DEFAULT_CACHE_AWARE_CONTEXT_LOADER_DELEGATE_CLASS_NAME =, +			"org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate";, +	private static final String DEFAULT_TEST_CONTEXT_BOOTSTRAPPER_CLASS_NAME =, +			"org.springframework.test.context.support.DefaultTestContextBootstrapper";, +	private static final String DEFAULT_WEB_TEST_CONTEXT_BOOTSTRAPPER_CLASS_NAME =, +			"org.springframework.test.context.web.WebTestContextBootstrapper";, +	private static final String WEB_APP_CONFIGURATION_ANNOTATION_CLASS_NAME =, +			"org.springframework.test.context.web.WebAppConfiguration";, +			clazz = (Class<? extends BootstrapContext>) ClassUtils.forName(, +					DEFAULT_BOOTSTRAP_CONTEXT_CLASS_NAME, BootstrapUtils.class.getClassLoader());, +			Constructor<? extends BootstrapContext> constructor = clazz.getConstructor(, +					Class.class, CacheAwareContextLoaderDelegate.class);, +		catch (Throwable ex) {, +			throw new IllegalStateException("Could not load BootstrapContext [" + clazz + "]", ex);, +		catch (Throwable ex) {, +			throw new IllegalStateException("Could not load CacheAwareContextLoaderDelegate [" + clazz + "]", ex);, +			throw new IllegalStateException("Could not load TestContextBootstrapper [" + clazz +, +					"]. Specify @BootstrapWith's 'value' attribute or make the default bootstrapper class available.",, +					ex);, +		MultiValueMap<String, Object> attributesMultiMap =, +				AnnotatedElementUtils.getAllAnnotationAttributes(testClass, BootstrapWith.class.getName());, +		List<Object> values = (attributesMultiMap != null ? attributesMultiMap.get(AnnotationUtils.VALUE) : null);, +		if (values.size() != 1) {, +			throw new IllegalStateException(String.format("Configuration error: found multiple declarations of " +, +					"@BootstrapWith on test class [%s] with values %s", testClass.getName(), values));, +		}, +++ b/spring-test/src/main/java/org/springframework/test/context/BootstrapUtils.java, +	private static final String DEFAULT_BOOTSTRAP_CONTEXT_CLASS_NAME =, +			"org.springframework.test.context.support.DefaultBootstrapContext";, +	private static final String DEFAULT_CACHE_AWARE_CONTEXT_LOADER_DELEGATE_CLASS_NAME =, +			"org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate";, +	private static final String DEFAULT_TEST_CONTEXT_BOOTSTRAPPER_CLASS_NAME =, +			"org.springframework.test.context.support.DefaultTestContextBootstrapper";, +	private static final String DEFAULT_WEB_TEST_CONTEXT_BOOTSTRAPPER_CLASS_NAME =, +			"org.springframework.test.context.web.WebTestContextBootstrapper";, +	private static final String WEB_APP_CONFIGURATION_ANNOTATION_CLASS_NAME =, +			"org.springframework.test.context.web.WebAppConfiguration";, +			clazz = (Class<? extends BootstrapContext>) ClassUtils.forName(, +					DEFAULT_BOOTSTRAP_CONTEXT_CLASS_NAME, BootstrapUtils.class.getClassLoader());, +			Constructor<? extends BootstrapContext> constructor = clazz.getConstructor(, +					Class.class, CacheAwareContextLoaderDelegate.class);, +		catch (Throwable ex) {, +			throw new IllegalStateException("Could not load BootstrapContext [" + clazz + "]", ex);, +		catch (Throwable ex) {, +			throw new IllegalStateException("Could not load CacheAwareContextLoaderDelegate [" + clazz + "]", ex);, +			throw new IllegalStateException("Could not load TestContextBootstrapper [" + clazz +, +					"]. Specify @BootstrapWith's 'value' attribute or make the default bootstrapper class available.",, +					ex);, +		MultiValueMap<String, Object> attributesMultiMap =, +				AnnotatedElementUtils.getAllAnnotationAttributes(testClass, BootstrapWith.class.getName());, +		List<Object> values = (attributesMultiMap != null ? attributesMultiMap.get(AnnotationUtils.VALUE) : null);, +		if (values.size() != 1) {, +			throw new IllegalStateException(String.format("Configuration error: found multiple declarations of " +, +					"@BootstrapWith on test class [%s] with values %s", testClass.getName(), values));, +		}, +++ b/spring-test/src/main/java/org/springframework/test/context/TestExecutionListener.java, + * Copyright 2002-2016 the original author or authors., + *, + *, + *, +++ b/spring-test/src/main/java/org/springframework/test/context/BootstrapUtils.java, +	private static final String DEFAULT_BOOTSTRAP_CONTEXT_CLASS_NAME =, +			"org.springframework.test.context.support.DefaultBootstrapContext";, +	private static final String DEFAULT_CACHE_AWARE_CONTEXT_LOADER_DELEGATE_CLASS_NAME =, +			"org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate";, +	private static final String DEFAULT_TEST_CONTEXT_BOOTSTRAPPER_CLASS_NAME =, +			"org.springframework.test.context.support.DefaultTestContextBootstrapper";, +	private static final String DEFAULT_WEB_TEST_CONTEXT_BOOTSTRAPPER_CLASS_NAME =, +			"org.springframework.test.context.web.WebTestContextBootstrapper";, +	private static final String WEB_APP_CONFIGURATION_ANNOTATION_CLASS_NAME =, +			"org.springframework.test.context.web.WebAppConfiguration";, +			clazz = (Class<? extends BootstrapContext>) ClassUtils.forName(, +					DEFAULT_BOOTSTRAP_CONTEXT_CLASS_NAME, BootstrapUtils.class.getClassLoader());, +			Constructor<? extends BootstrapContext> constructor = clazz.getConstructor(, +					Class.class, CacheAwareContextLoaderDelegate.class);, +		catch (Throwable ex) {, +			throw new IllegalStateException("Could not load BootstrapContext [" + clazz + "]", ex);, +		catch (Throwable ex) {, +			throw new IllegalStateException("Could not load CacheAwareContextLoaderDelegate [" + clazz + "]", ex);, +			throw new IllegalStateException("Could not load TestContextBootstrapper [" + clazz +, +					"]. Specify @BootstrapWith's 'value' attribute or make the default bootstrapper class available.",, +					ex);, +		MultiValueMap<String, Object> attributesMultiMap =, +				AnnotatedElementUtils.getAllAnnotationAttributes(testClass, BootstrapWith.class.getName());, +		List<Object> values = (attributesMultiMap != null ? attributesMultiMap.get(AnnotationUtils.VALUE) : null);, +		if (values.size() != 1) {, +			throw new IllegalStateException(String.format("Configuration error: found multiple declarations of " +, +					"@BootstrapWith on test class [%s] with values %s", testClass.getName(), values));, +		}, +++ b/spring-test/src/main/java/org/springframework/test/context/TestExecutionListener.java, + * Copyright 2002-2016 the original author or authors., + *, + *, + *, +++ b/spring-test/src/main/java/org/springframework/test/context/TestExecutionListeners.java, + * Copyright 2002-2016 the original author or authors., + * <p>Typically, {@code @TestExecutionListeners} will be used in conjunction]