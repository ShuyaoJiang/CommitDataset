[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebMvcStompEndpointRegistry.java, +import org.springframework.beans.BeansException;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.ApplicationContextAware;, + * @author Artem Bilan, +public class WebMvcStompEndpointRegistry implements StompEndpointRegistry, ApplicationContextAware {, +	@Override, +	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {, +		this.stompHandler.setApplicationEventPublisher(applicationContext);, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebMvcStompEndpointRegistry.java, +import org.springframework.beans.BeansException;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.ApplicationContextAware;, + * @author Artem Bilan, +public class WebMvcStompEndpointRegistry implements StompEndpointRegistry, ApplicationContextAware {, +	@Override, +	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {, +		this.stompHandler.setApplicationEventPublisher(applicationContext);, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketMessageBrokerConfigurationSupport.java, +import java.util.Collections;, +, + * @author Artem Bilan, +		registry.setApplicationContext(getApplicationContext());, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebMvcStompEndpointRegistry.java, +import org.springframework.beans.BeansException;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.ApplicationContextAware;, + * @author Artem Bilan, +public class WebMvcStompEndpointRegistry implements StompEndpointRegistry, ApplicationContextAware {, +	@Override, +	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {, +		this.stompHandler.setApplicationEventPublisher(applicationContext);, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketMessageBrokerConfigurationSupport.java, +import java.util.Collections;, +, + * @author Artem Bilan, +		registry.setApplicationContext(getApplicationContext());, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java, + * @author Artem Bilan, +		SubProtocolCapable, MessageHandler, SmartLifecycle {, +	private final Object lifecycleMonitor = new Object();, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebMvcStompEndpointRegistry.java, +import org.springframework.beans.BeansException;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.ApplicationContextAware;, + * @author Artem Bilan, +public class WebMvcStompEndpointRegistry implements StompEndpointRegistry, ApplicationContextAware {, +	@Override, +	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {, +		this.stompHandler.setApplicationEventPublisher(applicationContext);, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/WebSocketMessageBrokerConfigurationSupport.java, +import java.util.Collections;, +, + * @author Artem Bilan, +		registry.setApplicationContext(getApplicationContext());, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java, + * @author Artem Bilan, +		SubProtocolCapable, MessageHandler, SmartLifecycle {, +	private final Object lifecycleMonitor = new Object();, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParserTests.java, +import static org.junit.Assert.*;, +, +import org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler;, +import org.springframework.messaging.simp.user.DefaultUserDestinationResolver;, + * @author Artem Bilan, +		assertNotNull(new DirectFieldAccessor(stompHandler).getPropertyValue("eventPublisher"));, +]