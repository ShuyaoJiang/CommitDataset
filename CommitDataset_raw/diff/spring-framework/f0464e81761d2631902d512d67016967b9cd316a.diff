[+++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, +	 * Add a mapping from a key, extracted from a path extension or a query, +	 * strategy to work. Any extensions explicitly registered here are also, +	 * whitelisted for the purpose of Reflected File Download attack detection, +	 * (see Spring Framework reference documentation for more details on RFD, +	 * attack protection)., +	 * <p>The path extension strategy will also try to use, +	 * {@link ServletContext#getMimeType} and JAF (if present) to resolve path, +	 * extensions. To change this behavior see the {@link #useJaf} property., +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, +	 * Add a mapping from a key, extracted from a path extension or a query, +	 * strategy to work. Any extensions explicitly registered here are also, +	 * whitelisted for the purpose of Reflected File Download attack detection, +	 * (see Spring Framework reference documentation for more details on RFD, +	 * attack protection)., +	 * <p>The path extension strategy will also try to use, +	 * {@link ServletContext#getMimeType} and JAF (if present) to resolve path, +	 * extensions. To change this behavior see the {@link #useJaf} property., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ContentNegotiationConfigurer.java, +	 * strategy to work. Any extensions explicitly registered here are also, +	 * whitelisted for the purpose of Reflected File Download attack detection, +	 * (see Spring Framework reference documentation for more details on RFD, +	 * attack protection)., +	 * <p>The path extension strategy will also try to use, +	 * {@link ServletContext#getMimeType} and JAF (if present) to resolve path, +	 * extensions. To change this behavior see the {@link #useJaf} property., +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, +	 * Add a mapping from a key, extracted from a path extension or a query, +	 * strategy to work. Any extensions explicitly registered here are also, +	 * whitelisted for the purpose of Reflected File Download attack detection, +	 * (see Spring Framework reference documentation for more details on RFD, +	 * attack protection)., +	 * <p>The path extension strategy will also try to use, +	 * {@link ServletContext#getMimeType} and JAF (if present) to resolve path, +	 * extensions. To change this behavior see the {@link #useJaf} property., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ContentNegotiationConfigurer.java, +	 * strategy to work. Any extensions explicitly registered here are also, +	 * whitelisted for the purpose of Reflected File Download attack detection, +	 * (see Spring Framework reference documentation for more details on RFD, +	 * attack protection)., +	 * <p>The path extension strategy will also try to use, +	 * {@link ServletContext#getMimeType} and JAF (if present) to resolve path, +	 * extensions. To change this behavior see the {@link #useJaf} property., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +			"txt", "text", "yml", "properties", "csv",, +			"json", "xml", "atom", "rss",, +			"png", "jpe", "jpeg", "jpg", "gif", "wbmp", "bmp"));, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, +	 * Add a mapping from a key, extracted from a path extension or a query, +	 * strategy to work. Any extensions explicitly registered here are also, +	 * whitelisted for the purpose of Reflected File Download attack detection, +	 * (see Spring Framework reference documentation for more details on RFD, +	 * attack protection)., +	 * <p>The path extension strategy will also try to use, +	 * {@link ServletContext#getMimeType} and JAF (if present) to resolve path, +	 * extensions. To change this behavior see the {@link #useJaf} property., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ContentNegotiationConfigurer.java, +	 * strategy to work. Any extensions explicitly registered here are also, +	 * whitelisted for the purpose of Reflected File Download attack detection, +	 * (see Spring Framework reference documentation for more details on RFD, +	 * attack protection)., +	 * <p>The path extension strategy will also try to use, +	 * {@link ServletContext#getMimeType} and JAF (if present) to resolve path, +	 * extensions. To change this behavior see the {@link #useJaf} property., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +			"txt", "text", "yml", "properties", "csv",, +			"json", "xml", "atom", "rss",, +			"png", "jpe", "jpeg", "jpg", "gif", "wbmp", "bmp"));, +++ b/src/asciidoc/web-mvc.adoc, +==== Suffix Pattern Matching, +By default Spring MVC performs `".{asterisk}"` suffix pattern matching so that a, +controller mapped to `/person` is also implicitly mapped to `/person.{asterisk}`., +This makes it easy to request different representations of a resource through the, +URL path (e.g. `/person.pdf`, `/person.xml`)., +Suffix pattern matching can be turned off or restricted to a set of path extensions, +explicitly registered for content negotiation purposes. This is generally, +recommended to minimize ambiguity with common request mappings such as, +`/person/{id}` where a dot might not represent a file extension, e.g., +`/person/joe@email.com` vs `/person/joe@email.com.json`. Furthermore as explained, +in the note below suffix pattern matching as well as content negotiation may be, +used in some circumstances to attempt malicious attacks and there are good, +reasons to restrict them meaningfully., +, +See <<mvc-config-path-matching>> for suffix pattern matching configuration and, +also <<mvc-config-content-negotiation>> for content negotiation configuration., +, +, +, +[[mvc-ann-requestmapping-rfd]], +==== Suffix Suffix Pattern Matching and RFD, +, +Reflected file download (RFD) attack was first described in a, +https://www.trustwave.com/Resources/SpiderLabs-Blog/Reflected-File-Download---A-New-Web-Attack-Vector/[paper by Trustwave], +in 2014. The attack is similar to XSS in that it relies on input, +(e.g. query parameter, URI variable) being reflected in the response., +However instead of inserting JavaScript into HTML, an RFD attack relies on the, +browser switching to perform a download and treating the response as an executable, +script if double-clicked based on the file extension (e.g. .bat, .cmd)., +, +In Spring MVC `@ResponseBody` and `ResponseEntity` methods are at risk because]