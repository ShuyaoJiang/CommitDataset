[+++ b/src/reference/docbook/index.xml, +    <xi:include href="new-in-3.2.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />, +++ b/src/reference/docbook/index.xml, +    <xi:include href="new-in-3.2.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />, +++ b/src/reference/docbook/new-in-3.2.xml, +<?xml version="1.0" encoding="UTF-8"?>, +<chapter xmlns="http://docbook.org/ns/docbook" version="5.0", +    xmlns:xlink="http://www.w3.org/1999/xlink", +    xmlns:xi="http://www.w3.org/2001/XInclude", +    xml:id="new-in-3.2">, +  <title>New Features and Enhancements in Spring 3.2</title>, +, +  <section id="new-in-3.2-features-overview">, +    <title>Overview of new features</title>, +, +    <section id="new-in-3.2-webmvc-async">, +      <title>Support for Servlet 3 based asynchronous request processing</title>, +, +      <para>The Spring MVC programming model now provides explicit Servlet 3 async support., +      <interfacename>@RequestMapping</interfacename> methods can return one of:</para>, +      , +      <itemizedlist>, +        <listitem>, +          <para><interfacename>java.util.concurrent.Callable</interfacename> to, +          complete processing in a separate thread managed by a task executor, +          within Spring MVC.</para>, +        </listitem>, +        <listitem>, +          <para><classname>org.springframework.web.context.request.async.DeferredResult</classname>, +          to complete processing at a later time from a thread not known to, +          Spring MVC, e.g. in response to some external event (JSM, AMQP, etc.)</para>, +        </listitem>, +        <listitem>, +          <para><classname>org.springframework.web.context.request.async.AsyncTask</classname>, +          to wrap a <interfacename>Callable</interfacename> and, +          customize the timeout value or the task executor to use.</para>, +        </listitem>, +      </itemizedlist>, +            , +      <para>See <ulink, +          url="http://blog.springsource.org/2012/05/06/spring-mvc-3-2-preview-introducing-servlet-3-async-support/">, +          Introducing Servlet 3 Async Support</ulink> (SpringSource team blog).</para>, +    , +    </section>, +, +    <section id="new-in-3.2-webmvc-content-negotiation">, +      <title>Content negotiation improvements</title>, +, +      <para>A <interfacename>ContentNeogtiationStrategy</interfacename> is now, +      available for resolving the requested media types from an incoming request., +      The available implementations are based on path extension, request parameter,, +      'Accept' header, and a fixed default content type. Equivalent options were, +      previously available only in the ContentNegotiatingViewResolver but are now, +      available throughout.</para>, +, +      <para><classname>ContentNegotiationManager</classname> is the central class to, +      use when configuring content negotiation options. It accepts one or, +      more ContentNeogtiationStrategy instances and delegates to them. It can be, +      plugged into <classname>RequestMappingHandlerMapping</classname>,, +      <classname>RequestMappingHandlerAdapter</classname>,, +      <classname>ExceptionHandlerExceptionResolver</classname>,, +      and <classname>ContentNegotiatingViewResolver</classname>. The MVC, +      namespace and the MVC Java config provide convenient options to configure, +      all that.</para>, +, +      <para>The introduction of <classname>ContentNegotiationManger</classname>, +      also enables smart suffix pattern matching for incoming requests., +      See <ulink url="https://github.com/SpringSource/spring-framework/commit/4fd7645">, +      commit message</ulink></para>, +, +    </section>, +, +    <section id="new-in-3.2-webmvc-controller-advice">, +      <title><interfacename>@ControllerAdvice</interfacename> annotation</title>, +      , +      <para>Classes annotated with <interfacename>@ControllerAdvice</interfacename>, +      can contain <interfacename>@ExceptionHandler</interfacename>,, +      <interfacename>@InitBinder</interfacename>, and, +      <interfacename>@ModelAttribute</interfacename> methods and those will apply, +      to <interfacename>@RequestMapping</interfacename> methods across controller, +      hierarchies as opposed to the controller hierarchy within which they are declared., +      <interfacename>@ControllerAdvice</interfacename> is, +      a component annotation allowing implementation classes to be auto-detected, +      through classpath scanning.</para>, +       , +    </section>, +, +    <section id="new-in-3.2-webmvc-exception-handler-support">, +      <title><classname>ExceptionHandlerSupport</classname> class</title>, +, +      <para>A convenient base class with an, +      <interfacename>@ExceptionHandler</interfacename>, +      method that handles standard Spring MVC exceptions, just as the, +      <classname>DefaultHandlerExceptionResolver</classname> does, but also, +      allowing you to prepare error content for the body of the response.</para>, +, +    </section>, +, +    <section id="new-in-3.2-webmvc-generic-types-rest-template">, +      <title>Support for generic types in the <classname>RestTemplate</classname> and in]