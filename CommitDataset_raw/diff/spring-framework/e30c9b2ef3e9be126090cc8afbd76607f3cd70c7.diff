[+++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +			EventListener eventListener = AnnotatedElementUtils.findAnnotation(this.method, EventListener.class);, +			if (eventListener != null) {, +				this.condition = eventListener.condition();, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +			EventListener eventListener = AnnotatedElementUtils.findAnnotation(this.method, EventListener.class);, +			if (eventListener != null) {, +				this.condition = eventListener.condition();, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AbstractAliasAwareAnnotationAttributeExtractor.java, +/*, + * Copyright 2002-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.core.annotation;, +, +import java.lang.annotation.Annotation;, +import java.lang.reflect.AnnotatedElement;, +import java.lang.reflect.Method;, +import java.util.Map;, +, +import org.springframework.util.Assert;, +import org.springframework.util.ObjectUtils;, +, +/**, + * Abstract base class for {@link AnnotationAttributeExtractor} implementations, + * that transparently enforce attribute alias semantics for annotation, + * attributes that are annotated with {@link AliasFor @AliasFor}., + *, + * @author Sam Brannen, + * @since 4.2, + * @see Annotation, + * @see AliasFor, + * @see AnnotationUtils#synthesizeAnnotation(Annotation, AnnotatedElement), + */, +abstract class AbstractAliasAwareAnnotationAttributeExtractor implements AnnotationAttributeExtractor {, +, +	private final Class<? extends Annotation> annotationType;, +, +	private final AnnotatedElement annotatedElement;, +, +	private final Object source;, +, +	private final Map<String, String> attributeAliasMap;, +, +, +	/**, +	 * Construct a new {@code AbstractAliasAwareAnnotationAttributeExtractor}., +	 * @param annotationType the annotation type to synthesize; never {@code null}, +	 * @param annotatedElement the element that is annotated with the annotation, +	 * of the supplied type; may be {@code null} if unknown, +	 * @param source the underlying source of annotation attributes; never {@code null}, +	 */, +	AbstractAliasAwareAnnotationAttributeExtractor(Class<? extends Annotation> annotationType,, +			AnnotatedElement annotatedElement, Object source) {, +		Assert.notNull(annotationType, "annotationType must not be null");, +		Assert.notNull(source, "source must not be null");, +		this.annotationType = annotationType;, +		this.annotatedElement = annotatedElement;, +		this.source = source;, +		this.attributeAliasMap = AnnotationUtils.getAttributeAliasMap(annotationType);, +	}, +, +	@Override, +	public final Class<? extends Annotation> getAnnotationType() {, +		return this.annotationType;, +	}, +, +	@Override, +	public final AnnotatedElement getAnnotatedElement() {, +		return this.annotatedElement;, +	}, +, +	@Override, +	public Object getSource() {, +		return this.source;, +	}, +, +	@Override, +	public final Object getAttributeValue(Method attributeMethod) {, +		String attributeName = attributeMethod.getName();, +		Object attributeValue = getRawAttributeValue(attributeMethod);, +, +		String aliasName = this.attributeAliasMap.get(attributeName);, +		if ((aliasName != null)) {, +, +			Object aliasValue = getRawAttributeValue(aliasName);, +			Object defaultValue = AnnotationUtils.getDefaultValue(getAnnotationType(), attributeName);, +]