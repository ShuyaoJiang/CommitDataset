[+++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +, +	public static Flux<DataBuffer> read(, +			InputStream inputStream, DataBufferFactory dataBufferFactory, int bufferSize) {, +, +	 * Obtain a {@link InputStream} from the given supplier, and read it into a {@code Flux}, +	 * of {@code DataBuffer}s. Closes the input stream when the flux is terminated., +	public static Flux<DataBuffer> readInputStream(, +			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {, +		return readByteChannel(() -> Channels.newChannel(inputStreamSupplier.call()), dataBufferFactory, bufferSize);, +	 * Read the given {@code ReadableByteChannel} into a <strong>read-once</strong> {@code Flux}, +	 * of {@code DataBuffer}s. Closes the channel when the flux is terminated., +	public static Flux<DataBuffer> read(, +			ReadableByteChannel channel, DataBufferFactory dataBufferFactory, int bufferSize) {, +, +	public static Flux<DataBuffer> readByteChannel(, +			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {, +	public static Flux<DataBuffer> read(, +			AsynchronousFileChannel channel, DataBufferFactory dataBufferFactory, int bufferSize) {, +, +	public static Flux<DataBuffer> read(, +			AsynchronousFileChannel channel, long position, DataBufferFactory dataBufferFactory, int bufferSize) {, +, +			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {, +	 * {@code Flux} of {@code DataBuffer}s, starting at the given position. Closes the, +	 * channel when the flux is terminated., +	public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier,, +	public static Flux<DataBuffer> read(, +			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize) {, +	public static Flux<DataBuffer> read(, +			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize) {, +	 * <p>Note that the writing process does not start until the returned {@code Flux} is subscribed to., +	public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream) {, +	 * <p>Note that the writing process does not start until the returned {@code Flux} is subscribed to., +	public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel) {, +	 * <p>Note that the writing process does not start until the returned {@code Flux} is subscribed to., +	public static Flux<DataBuffer> write(, +			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position) {, +			flux.subscribe(new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position));, +			try {, +	}, +, +		return (dataBuffer instanceof PooledDataBuffer && ((PooledDataBuffer) dataBuffer).release());, +	private static class ReadableByteChannelGenerator implements Consumer<SynchronousSink<DataBuffer>> {, +		public ReadableByteChannelGenerator(, +				ReadableByteChannel channel, DataBufferFactory dataBufferFactory, int bufferSize) {, +		public AsynchronousFileChannelReadCompletionHandler(AsynchronousFileChannel channel,, +				FluxSink<DataBuffer> sink, long position, DataBufferFactory dataBufferFactory, int bufferSize) {, +					DataBuffer newDataBuffer = this.dataBufferFactory.allocateBuffer(this.bufferSize);, +	private static class AsynchronousFileChannelWriteCompletionHandler extends BaseSubscriber<DataBuffer>, +, +, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java, +, +	public static Flux<DataBuffer> read(, +			InputStream inputStream, DataBufferFactory dataBufferFactory, int bufferSize) {, +, +	 * Obtain a {@link InputStream} from the given supplier, and read it into a {@code Flux}, +	 * of {@code DataBuffer}s. Closes the input stream when the flux is terminated., +	public static Flux<DataBuffer> readInputStream(, +			Callable<InputStream> inputStreamSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {, +		return readByteChannel(() -> Channels.newChannel(inputStreamSupplier.call()), dataBufferFactory, bufferSize);, +	 * Read the given {@code ReadableByteChannel} into a <strong>read-once</strong> {@code Flux}, +	 * of {@code DataBuffer}s. Closes the channel when the flux is terminated., +	public static Flux<DataBuffer> read(, +			ReadableByteChannel channel, DataBufferFactory dataBufferFactory, int bufferSize) {, +, +	public static Flux<DataBuffer> readByteChannel(, +			Callable<ReadableByteChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {, +	public static Flux<DataBuffer> read(, +			AsynchronousFileChannel channel, DataBufferFactory dataBufferFactory, int bufferSize) {, +, +	public static Flux<DataBuffer> read(, +			AsynchronousFileChannel channel, long position, DataBufferFactory dataBufferFactory, int bufferSize) {, +, +			Callable<AsynchronousFileChannel> channelSupplier, DataBufferFactory dataBufferFactory, int bufferSize) {, +	 * {@code Flux} of {@code DataBuffer}s, starting at the given position. Closes the, +	 * channel when the flux is terminated., +	public static Flux<DataBuffer> readAsynchronousFileChannel(Callable<AsynchronousFileChannel> channelSupplier,, +	public static Flux<DataBuffer> read(, +			Resource resource, DataBufferFactory dataBufferFactory, int bufferSize) {, +	public static Flux<DataBuffer> read(, +			Resource resource, long position, DataBufferFactory dataBufferFactory, int bufferSize) {, +	 * <p>Note that the writing process does not start until the returned {@code Flux} is subscribed to., +	public static Flux<DataBuffer> write(Publisher<DataBuffer> source, OutputStream outputStream) {, +	 * <p>Note that the writing process does not start until the returned {@code Flux} is subscribed to., +	public static Flux<DataBuffer> write(Publisher<DataBuffer> source, WritableByteChannel channel) {, +	 * <p>Note that the writing process does not start until the returned {@code Flux} is subscribed to., +	public static Flux<DataBuffer> write(, +			Publisher<DataBuffer> source, AsynchronousFileChannel channel, long position) {, +			flux.subscribe(new AsynchronousFileChannelWriteCompletionHandler(sink, channel, position));, +			try {, +	}, +, +		return (dataBuffer instanceof PooledDataBuffer && ((PooledDataBuffer) dataBuffer).release());, +	private static class ReadableByteChannelGenerator implements Consumer<SynchronousSink<DataBuffer>> {, +		public ReadableByteChannelGenerator(, +				ReadableByteChannel channel, DataBufferFactory dataBufferFactory, int bufferSize) {, +		public AsynchronousFileChannelReadCompletionHandler(AsynchronousFileChannel channel,, +				FluxSink<DataBuffer> sink, long position, DataBufferFactory dataBufferFactory, int bufferSize) {]