[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/ListableBeanFactory.java, + * Copyright 2002-2019 the original author or authors., +	 * (at class, interface or factory method level of the specified bean), +	 * @see #findAnnotationOnBean, +	 * (at class, interface or factory method level of the specified bean), +	 * @see #findAnnotationOnBean, +	 * Find an {@link Annotation} of {@code annotationType} on the specified bean,, +	 * traversing its interfaces and super classes if no annotation can be found on, +	 * the given class itself, as well as checking the bean's factory method (if any)., +	 * @param annotationType the type of annotation to look for, +	 * (at class, interface or factory method level of the specified bean), +	 * @see #getBeanNamesForAnnotation, +	 * @see #getBeansWithAnnotation, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/ListableBeanFactory.java, + * Copyright 2002-2019 the original author or authors., +	 * (at class, interface or factory method level of the specified bean), +	 * @see #findAnnotationOnBean, +	 * (at class, interface or factory method level of the specified bean), +	 * @see #findAnnotationOnBean, +	 * Find an {@link Annotation} of {@code annotationType} on the specified bean,, +	 * traversing its interfaces and super classes if no annotation can be found on, +	 * the given class itself, as well as checking the bean's factory method (if any)., +	 * @param annotationType the type of annotation to look for, +	 * (at class, interface or factory method level of the specified bean), +	 * @see #getBeanNamesForAnnotation, +	 * @see #getBeansWithAnnotation, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +			MergedAnnotation<A> annotation =, +					MergedAnnotations.from(beanType, SearchStrategy.EXHAUSTIVE).get(annotationType);, +			RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);, +			if (bd.hasBeanClass()) {, +				Class<?> beanClass = bd.getBeanClass();, +					MergedAnnotation<A> annotation =, +							MergedAnnotations.from(beanClass, SearchStrategy.EXHAUSTIVE).get(annotationType);, +					if (annotation.isPresent()) {, +						return annotation;, +			Method factoryMethod = bd.getResolvedFactoryMethod();, +			if (factoryMethod != null) {, +				MergedAnnotation<A> annotation =, +						MergedAnnotations.from(factoryMethod, SearchStrategy.EXHAUSTIVE).get(annotationType);, +				if (annotation.isPresent()) {, +					return annotation;, +				}, +			}, +			String beanName = this.instancesToBeanNames.get(obj);, +			if (beanName == null || !containsBeanDefinition(beanName)) {, +			RootBeanDefinition beanDefinition = getMergedLocalBeanDefinition(beanName);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/ListableBeanFactory.java, + * Copyright 2002-2019 the original author or authors., +	 * (at class, interface or factory method level of the specified bean), +	 * @see #findAnnotationOnBean, +	 * (at class, interface or factory method level of the specified bean), +	 * @see #findAnnotationOnBean, +	 * Find an {@link Annotation} of {@code annotationType} on the specified bean,, +	 * traversing its interfaces and super classes if no annotation can be found on, +	 * the given class itself, as well as checking the bean's factory method (if any)., +	 * @param annotationType the type of annotation to look for, +	 * (at class, interface or factory method level of the specified bean), +	 * @see #getBeanNamesForAnnotation, +	 * @see #getBeansWithAnnotation, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +			MergedAnnotation<A> annotation =, +					MergedAnnotations.from(beanType, SearchStrategy.EXHAUSTIVE).get(annotationType);, +			RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);, +			if (bd.hasBeanClass()) {, +				Class<?> beanClass = bd.getBeanClass();, +					MergedAnnotation<A> annotation =, +							MergedAnnotations.from(beanClass, SearchStrategy.EXHAUSTIVE).get(annotationType);, +					if (annotation.isPresent()) {, +						return annotation;, +			Method factoryMethod = bd.getResolvedFactoryMethod();, +			if (factoryMethod != null) {, +				MergedAnnotation<A> annotation =, +						MergedAnnotations.from(factoryMethod, SearchStrategy.EXHAUSTIVE).get(annotationType);, +				if (annotation.isPresent()) {, +					return annotation;, +				}, +			}, +			String beanName = this.instancesToBeanNames.get(obj);, +			if (beanName == null || !containsBeanDefinition(beanName)) {, +			RootBeanDefinition beanDefinition = getMergedLocalBeanDefinition(beanName);, +++ b/spring-context/src/test/java/org/springframework/context/annotation/configuration/BeanMethodQualificationTests.java, + * Copyright 2002-2019 the original author or authors., +	@Test, +	public void testBeanNamesForAnnotation() {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(StandardConfig.class);, +		assertArrayEquals(new String[] {"beanMethodQualificationTests.StandardConfig"},, +				ctx.getBeanNamesForAnnotation(Configuration.class));, +		assertArrayEquals(new String[] {}, ctx.getBeanNamesForAnnotation(Scope.class));, +		assertArrayEquals(new String[] {"testBean1"}, ctx.getBeanNamesForAnnotation(Lazy.class));, +		assertArrayEquals(new String[] {"testBean2"}, ctx.getBeanNamesForAnnotation(Boring.class));, +	}, +]