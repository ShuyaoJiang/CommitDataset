[+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/lookup/AbstractRoutingDataSource.java, + * Copyright 2002-2010 the original author or authors., +	private boolean lenientFallback = true;, +, +	 * <p>The mapped value can either be a corresponding {@link javax.sql.DataSource}, +	 * Specify whether to apply a lenient fallback to the default DataSource, +	 * if no specific DataSource could be found for the current lookup key., +	 * <p>Default is "true", accepting lookup keys without a corresponding entry, +	 * in the target DataSource map - simply falling back to the default DataSource, +	 * in that case., +	 * <p>Switch this flag to "false" if you would prefer the fallback to only apply, +	 * if the lookup key was <code>null</code>. Lookup keys without a DataSource, +	 * entry will then lead to an IllegalStateException., +	 * @see #setTargetDataSources, +	 * @see #setDefaultTargetDataSource, +	 * @see #determineCurrentLookupKey(), +	 */, +	public void setLenientFallback(boolean lenientFallback) {, +		this.lenientFallback = lenientFallback;, +	}, +, +	/**, +		if (dataSource == null && (this.lenientFallback || lookupKey == null)) {, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/lookup/AbstractRoutingDataSource.java, + * Copyright 2002-2010 the original author or authors., +	private boolean lenientFallback = true;, +, +	 * <p>The mapped value can either be a corresponding {@link javax.sql.DataSource}, +	 * Specify whether to apply a lenient fallback to the default DataSource, +	 * if no specific DataSource could be found for the current lookup key., +	 * <p>Default is "true", accepting lookup keys without a corresponding entry, +	 * in the target DataSource map - simply falling back to the default DataSource, +	 * in that case., +	 * <p>Switch this flag to "false" if you would prefer the fallback to only apply, +	 * if the lookup key was <code>null</code>. Lookup keys without a DataSource, +	 * entry will then lead to an IllegalStateException., +	 * @see #setTargetDataSources, +	 * @see #setDefaultTargetDataSource, +	 * @see #determineCurrentLookupKey(), +	 */, +	public void setLenientFallback(boolean lenientFallback) {, +		this.lenientFallback = lenientFallback;, +	}, +, +	/**, +		if (dataSource == null && (this.lenientFallback || lookupKey == null)) {, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/lookup/IsolationLevelDataSourceRouter.java, + * Copyright 2002-2010 the original author or authors., +			return lookupKey;, +			if (!constantName.startsWith(DefaultTransactionDefinition.PREFIX_ISOLATION)) {]