[+++ b/build.gradle, +		optional("com.fasterxml.jackson.core:jackson-databind:2.2.0"), +		optional("org.projectreactor:reactor-core:1.0.0.BUILD-SNAPSHOT"), +		optional("com.lmax:disruptor:3.1.1"), +		optional("org.projectreactor:reactor-core:1.0.0.BUILD-SNAPSHOT"), +		optional("org.projectreactor:reactor-tcp:1.0.0.BUILD-SNAPSHOT"), +		optional("com.lmax:disruptor:3.1.1"), +++ b/build.gradle, +		optional("com.fasterxml.jackson.core:jackson-databind:2.2.0"), +		optional("org.projectreactor:reactor-core:1.0.0.BUILD-SNAPSHOT"), +		optional("com.lmax:disruptor:3.1.1"), +		optional("org.projectreactor:reactor-core:1.0.0.BUILD-SNAPSHOT"), +		optional("org.projectreactor:reactor-tcp:1.0.0.BUILD-SNAPSHOT"), +		optional("com.lmax:disruptor:3.1.1"), +++ b/spring-context/src/main/java/org/springframework/messaging/channel/ReactorMessageChannel.java, +import reactor.event.Event;, +import reactor.event.registry.Registration;, +import reactor.event.selector.ObjectSelector;, +import reactor.function.Consumer;, +++ b/build.gradle, +		optional("com.fasterxml.jackson.core:jackson-databind:2.2.0"), +		optional("org.projectreactor:reactor-core:1.0.0.BUILD-SNAPSHOT"), +		optional("com.lmax:disruptor:3.1.1"), +		optional("org.projectreactor:reactor-core:1.0.0.BUILD-SNAPSHOT"), +		optional("org.projectreactor:reactor-tcp:1.0.0.BUILD-SNAPSHOT"), +		optional("com.lmax:disruptor:3.1.1"), +++ b/spring-context/src/main/java/org/springframework/messaging/channel/ReactorMessageChannel.java, +import reactor.event.Event;, +import reactor.event.registry.Registration;, +import reactor.event.selector.ObjectSelector;, +import reactor.function.Consumer;, +++ /dev/null, +++ b/build.gradle, +		optional("com.fasterxml.jackson.core:jackson-databind:2.2.0"), +		optional("org.projectreactor:reactor-core:1.0.0.BUILD-SNAPSHOT"), +		optional("com.lmax:disruptor:3.1.1"), +		optional("org.projectreactor:reactor-core:1.0.0.BUILD-SNAPSHOT"), +		optional("org.projectreactor:reactor-tcp:1.0.0.BUILD-SNAPSHOT"), +		optional("com.lmax:disruptor:3.1.1"), +++ b/spring-context/src/main/java/org/springframework/messaging/channel/ReactorMessageChannel.java, +import reactor.event.Event;, +import reactor.event.registry.Registration;, +import reactor.event.selector.ObjectSelector;, +import reactor.function.Consumer;, +++ /dev/null, +++ b/spring-context/src/main/java/org/springframework/messaging/converter/MappingJackson2MessageConverter.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.messaging.converter;, +, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.StringWriter;, +import java.io.Writer;, +import java.lang.reflect.Type;, +import java.util.Map;, +, +import org.springframework.messaging.Message;, +import org.springframework.messaging.support.MessageBuilder;, +import org.springframework.util.Assert;, +, +import com.fasterxml.jackson.databind.JavaType;, +import com.fasterxml.jackson.databind.ObjectMapper;, +, +, +/**, + * @author Rossen Stoyanchev, + * @sicne 4.0, + */, +public class MappingJackson2MessageConverter implements MessageConverter<Object> {, +, +	private ObjectMapper objectMapper = new ObjectMapper();, +, +	private Type defaultObjectType = Map.class;, +, +	private Class<?> defaultMessagePayloadClass = byte[].class;, +, +, +	/**, +	 * Set the default target Object class to convert to in, +	 * {@link #fromMessage(Message, Class)}., +	 */, +	public void setDefaultObjectClass(Type defaultObjectType) {, +		Assert.notNull(defaultObjectType, "defaultObjectType is required");, +		this.defaultObjectType = defaultObjectType;, +	}]