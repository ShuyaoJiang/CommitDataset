[+++ b/spring-framework-reference/src/beans.xml, +    in internationalization), event publication, and application-layer, +    of the <interfacename>BeanFactory</interfacename>, and is used exclusively, +    in this chapter when describing Spring's IoC container. For more, +    information on using the <classname>BeanFactory</classname> instead of an, +    <classname>ApplicationContext</classname> refer to the section <xref, +    linkend="beans-beanfactory" />.</para>, +    linkend="beans-basics">first part</link> covering Inversion of Control, +    features and the <link linkend="context-introduction">second part</link>, +    covering additional application framework features such as event, +    publication and internationalization.</para>, +      <para>The interface, +      <classname>org.springframework.context.ApplicationContext</classname>, +      represents the Spring IoC container and is responsible for, +      instantiating, configuring, and assembling the aforementioned beans. The, +      container gets its instructions on what objects to instantiate,, +      configure and assemble by reading configuration metadata. The, +      configuration metadata can be represented in either XML, Java, +      annotations, or Java code and allows you to express the objects that, +      compose your application and the rich interdependencies between such, +      objects.</para>, +      <classname>ApplicationContext</classname> interface that come supplied, +      straight out-of-the-box with Spring. In standalone applications it has, +      traditionally been common to pragmatically create an instance of <ulink, +      url="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/context/support/ClassPathXmlApplicationContext.html"><classname>ClassPathXmlApplicationContext</classname></ulink>, +      or <ulink, +      url="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/context/support/FileSystemXmlApplicationContext.html"><classname>FileSystemXmlApplicationContext</classname></ulink>., +      This is because XML has been the traditional format for defining the, +      configuration metadata. To support the mixing of different configuration, +      metadata formats use the <ulink, +      url="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/context/support/GenericApplicationContext.html"><classname>GenericApplicationContext</classname></ulink>, +      implementation.</para>, +, +      <para>In the vast majority of application scenarios, explicit user code, +      is not required to instantiate one or more instances of a Spring IoC, +      container. For example, in a web application scenario, a simple eight, +      (or so) lines of boilerplate J2EE web descriptor XML in the, +      <literal>web.xml</literal> file of the application will typically, +      suffice (see <xref linkend="context-create" />).</para>, +, +      <para>The high level view of how the Spring works is shown below. Your, +      application classes are combined with configuration metadata so that, +      once the <classname>ApplicationContext</classname> is created and, +      initialized you have a fully configured and executable system or, +      application.</para>, +        your application]</quote>.</emphasis></para>, +, +        <para>This configuration metadata has historically been supplied in a, +        simple and intuitive XML format and so the majority of this chapter, +        will use the XML format to convey key concepts and features of the, +        Spring IoC container.</para>, +          <para>While XML-based metadata has been by far the most commonly, +          used form of configuration metadata. It is <emphasis>not</emphasis>, +          however the only form of configuration metadata that is allowed. The, +          Spring IoC container itself is <emphasis>totally</emphasis>, +          decoupled from the format in which this configuration metadata is, +          actually written.</para>, +        <para>You can find details of other forms of metadata that the Spring, +        container can consume in the following sections</para>, +        <itemizedlist>, +          <listitem>, +            <para><link linkend="beans-annotation-config">Annotation-based, +            configuration</link>: Spring 2.5 introduced support for annotation, +            based configuration metadata.</para>, +          </listitem>, +          <listitem>, +            <para><link linkend="beans-javaconfig">Java-based, +            configuration</link>: Starting with Spring 3.0 many of the, +            features provided by the <ulink, +            url="http://www.springsource.org/javaconfig">Spring JavaConfig, +            project</ulink> have been added to the core Spring Framework. This, +            allows you to define beans external to your application classes, +            using Java rather than XML files. Take a look at the, +            <interfacename>@Configuration</interfacename>,, +            <interfacename>@Bean, @Import</interfacename> and, +            <interfacename>@DependsOn</interfacename> annotations for how to, +            use these new features.</para>, +          </listitem>, +        </itemizedlist>, +        create/load domain objects. However, one can use Spring's integration, +        with AspectJ to configure objects that have been created outside the, +        control of an IoC container. See the section <link, +        linkend="aop-atconfigurable">Using AspectJ to dependency inject domain, +        objects</link> with Spring for more information.</para>, +, +        <para>The <literal>id</literal> attribute is a string that you use to, +        identify the individual bean definition. The <literal>class</literal>, +        attribute defines the type of the bean and uses the fully qualified, +        classname. The value of the id attribute is used as a means to refer, +        to collaborating objects. Note the XML for referring to collaborating, +        objects is not shown in this example, see the section on <link, +        linkend="beans-dependencies">Dependencies</link> for more, +        information.</para>, +      <programlisting language="java">ApplicationContext context = new ClassPathXmlApplicationContext(new String[] {"services.xml", "daos.xml"});</programlisting>, +      <note>, +        <para>The location path or paths supplied to an, +        <interfacename>ApplicationContext</interfacename> constructor are, +        actually resource strings that allow the container to load, +        configuration metadata from a variety of external resources such as, +        the local file system, from the Java <literal>CLASSPATH</literal>,]