[+++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/AbstractMessageConverter.java, + * Copyright 2002-2014 the original author or authors., +			Assert.notEmpty(getSupportedMimeTypes(), "Strict match requires non-empty list of supported mime types.");, +			Assert.notNull(getContentTypeResolver(), "Strict match requires ContentTypeResolver.");, +		for (MimeType current : getSupportedMimeTypes()) {, +			if (current.getType().equals(mimeType.getType()) && current.getSubtype().equals(mimeType.getSubtype())) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/AbstractMessageConverter.java, + * Copyright 2002-2014 the original author or authors., +			Assert.notEmpty(getSupportedMimeTypes(), "Strict match requires non-empty list of supported mime types.");, +			Assert.notNull(getContentTypeResolver(), "Strict match requires ContentTypeResolver.");, +		for (MimeType current : getSupportedMimeTypes()) {, +			if (current.getType().equals(mimeType.getType()) && current.getSubtype().equals(mimeType.getSubtype())) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, +			converters.add(new StringMessageConverter());, +			converters.add(new ByteArrayMessageConverter());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/AbstractMessageConverter.java, + * Copyright 2002-2014 the original author or authors., +			Assert.notEmpty(getSupportedMimeTypes(), "Strict match requires non-empty list of supported mime types.");, +			Assert.notNull(getContentTypeResolver(), "Strict match requires ContentTypeResolver.");, +		for (MimeType current : getSupportedMimeTypes()) {, +			if (current.getType().equals(mimeType.getType()) && current.getSubtype().equals(mimeType.getSubtype())) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, +			converters.add(new StringMessageConverter());, +			converters.add(new ByteArrayMessageConverter());, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/config/MessageBrokerConfigurationTests.java, +		assertEquals("bar", new String((byte[]) message.getPayload()));, +		assertEquals("bar", new String((byte[]) message.getPayload()));, +		assertThat(converters.get(0), Matchers.instanceOf(StringMessageConverter.class));, +		assertThat(converters.get(1), Matchers.instanceOf(ByteArrayMessageConverter.class));, +		assertThat(converters.get(2), Matchers.instanceOf(MappingJackson2MessageConverter.class));, +		ContentTypeResolver resolver = ((MappingJackson2MessageConverter) converters.get(2)).getContentTypeResolver();, +		assertThat(iterator.next(), Matchers.instanceOf(MappingJackson2MessageConverter.class));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/AbstractMessageConverter.java, + * Copyright 2002-2014 the original author or authors., +			Assert.notEmpty(getSupportedMimeTypes(), "Strict match requires non-empty list of supported mime types.");, +			Assert.notNull(getContentTypeResolver(), "Strict match requires ContentTypeResolver.");, +		for (MimeType current : getSupportedMimeTypes()) {, +			if (current.getType().equals(mimeType.getType()) && current.getSubtype().equals(mimeType.getSubtype())) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, +			converters.add(new StringMessageConverter());, +			converters.add(new ByteArrayMessageConverter());, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/config/MessageBrokerConfigurationTests.java, +		assertEquals("bar", new String((byte[]) message.getPayload()));, +		assertEquals("bar", new String((byte[]) message.getPayload()));, +		assertThat(converters.get(0), Matchers.instanceOf(StringMessageConverter.class));, +		assertThat(converters.get(1), Matchers.instanceOf(ByteArrayMessageConverter.class));, +		assertThat(converters.get(2), Matchers.instanceOf(MappingJackson2MessageConverter.class));, +		ContentTypeResolver resolver = ((MappingJackson2MessageConverter) converters.get(2)).getContentTypeResolver();, +		assertThat(iterator.next(), Matchers.instanceOf(MappingJackson2MessageConverter.class));, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +			convertersDef.add(new RootBeanDefinition(StringMessageConverter.class));, +			convertersDef.add(new RootBeanDefinition(ByteArrayMessageConverter.class));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/AbstractMessageConverter.java, + * Copyright 2002-2014 the original author or authors., +			Assert.notEmpty(getSupportedMimeTypes(), "Strict match requires non-empty list of supported mime types.");, +			Assert.notNull(getContentTypeResolver(), "Strict match requires ContentTypeResolver.");, +		for (MimeType current : getSupportedMimeTypes()) {, +			if (current.getType().equals(mimeType.getType()) && current.getSubtype().equals(mimeType.getSubtype())) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, +			converters.add(new StringMessageConverter());, +			converters.add(new ByteArrayMessageConverter());, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/config/MessageBrokerConfigurationTests.java, +		assertEquals("bar", new String((byte[]) message.getPayload()));, +		assertEquals("bar", new String((byte[]) message.getPayload()));, +		assertThat(converters.get(0), Matchers.instanceOf(StringMessageConverter.class));, +		assertThat(converters.get(1), Matchers.instanceOf(ByteArrayMessageConverter.class));, +		assertThat(converters.get(2), Matchers.instanceOf(MappingJackson2MessageConverter.class));, +		ContentTypeResolver resolver = ((MappingJackson2MessageConverter) converters.get(2)).getContentTypeResolver();, +		assertThat(iterator.next(), Matchers.instanceOf(MappingJackson2MessageConverter.class));, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +			convertersDef.add(new RootBeanDefinition(StringMessageConverter.class));, +			convertersDef.add(new RootBeanDefinition(ByteArrayMessageConverter.class));, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParserTests.java, +		assertThat(converters.get(0), Matchers.instanceOf(StringMessageConverter.class));, +		assertThat(converters.get(1), Matchers.instanceOf(ByteArrayMessageConverter.class));, +		assertThat(converters.get(2), Matchers.instanceOf(MappingJackson2MessageConverter.class));, +		ContentTypeResolver resolver = ((MappingJackson2MessageConverter) converters.get(2)).getContentTypeResolver();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/AbstractMessageConverter.java, + * Copyright 2002-2014 the original author or authors., +			Assert.notEmpty(getSupportedMimeTypes(), "Strict match requires non-empty list of supported mime types.");, +			Assert.notNull(getContentTypeResolver(), "Strict match requires ContentTypeResolver.");, +		for (MimeType current : getSupportedMimeTypes()) {, +			if (current.getType().equals(mimeType.getType()) && current.getSubtype().equals(mimeType.getSubtype())) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, +			converters.add(new StringMessageConverter());, +			converters.add(new ByteArrayMessageConverter());, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/config/MessageBrokerConfigurationTests.java, +		assertEquals("bar", new String((byte[]) message.getPayload()));, +		assertEquals("bar", new String((byte[]) message.getPayload()));, +		assertThat(converters.get(0), Matchers.instanceOf(StringMessageConverter.class));, +		assertThat(converters.get(1), Matchers.instanceOf(ByteArrayMessageConverter.class));, +		assertThat(converters.get(2), Matchers.instanceOf(MappingJackson2MessageConverter.class));, +		ContentTypeResolver resolver = ((MappingJackson2MessageConverter) converters.get(2)).getContentTypeResolver();, +		assertThat(iterator.next(), Matchers.instanceOf(MappingJackson2MessageConverter.class));, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +			convertersDef.add(new RootBeanDefinition(StringMessageConverter.class));, +			convertersDef.add(new RootBeanDefinition(ByteArrayMessageConverter.class));, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParserTests.java, +		assertThat(converters.get(0), Matchers.instanceOf(StringMessageConverter.class));, +		assertThat(converters.get(1), Matchers.instanceOf(ByteArrayMessageConverter.class));]