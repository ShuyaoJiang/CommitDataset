[+++ b/spring-context/src/test/java/org/springframework/context/annotation/configuration/Spr10744Tests.java, +		context.getBeanFactory().registerScope("myTestScope", new MyTestScope());, +, +, +		// Should not have invoked constructor for the proxy instance, +		@Scope(value = "myTestScope",  proxyMode = ScopedProxyMode.TARGET_CLASS), +		@Override, +++ b/spring-context/src/test/java/org/springframework/context/annotation/configuration/Spr10744Tests.java, +		context.getBeanFactory().registerScope("myTestScope", new MyTestScope());, +, +, +		// Should not have invoked constructor for the proxy instance, +		@Scope(value = "myTestScope",  proxyMode = ScopedProxyMode.TARGET_CLASS), +		@Override, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +	 * @param annotationType the annotation type to look for, both locally and as a meta-annotation, +	 * @return the matching annotation, or {@code null} if none found, +	 * @param annotationType the annotation type to look for, both locally and as a meta-annotation, +	 * @return the matching annotation, or {@code null} if none found, +	 * @param annotationType the annotation type to look for, +	 * @param annotationType the annotation type to look for, +	 * @param annotationType the annotation type to look for, +	 * @param annotationType the annotation type to look for, +	 * @return the annotation found, or {@code null} if none, +				A annotation = findAnnotation(ann.annotationType(), annotationType, visited);, +	 * @param annotationType the annotation type to look for, both locally and as a meta-annotation, +	 * @param clazz the class on which to check for the annotation (may be {@code null}), +							mappedAnnotations[i] = getAnnotationAttributes(realAnnotations[i], classValuesAsString, true);, +						this.result.addAll(Arrays.asList(getValue(annotation)));, +				throw new IllegalStateException("Unable to read value from repeating annotation container " +, +						this.containerAnnotationType.getName(), ex);, +++ b/spring-context/src/test/java/org/springframework/context/annotation/configuration/Spr10744Tests.java, +		context.getBeanFactory().registerScope("myTestScope", new MyTestScope());, +, +, +		// Should not have invoked constructor for the proxy instance, +		@Scope(value = "myTestScope",  proxyMode = ScopedProxyMode.TARGET_CLASS), +		@Override, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +	 * @param annotationType the annotation type to look for, both locally and as a meta-annotation, +	 * @return the matching annotation, or {@code null} if none found, +	 * @param annotationType the annotation type to look for, both locally and as a meta-annotation, +	 * @return the matching annotation, or {@code null} if none found, +	 * @param annotationType the annotation type to look for, +	 * @param annotationType the annotation type to look for, +	 * @param annotationType the annotation type to look for, +	 * @param annotationType the annotation type to look for, +	 * @return the annotation found, or {@code null} if none, +				A annotation = findAnnotation(ann.annotationType(), annotationType, visited);, +	 * @param annotationType the annotation type to look for, both locally and as a meta-annotation, +	 * @param clazz the class on which to check for the annotation (may be {@code null}), +							mappedAnnotations[i] = getAnnotationAttributes(realAnnotations[i], classValuesAsString, true);, +						this.result.addAll(Arrays.asList(getValue(annotation)));, +				throw new IllegalStateException("Unable to read value from repeating annotation container " +, +						this.containerAnnotationType.getName(), ex);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/OracleTableMetaDataProvider.java, + * Supports a feature for including synonyms in the metadata lookup. Also supports lookup of current schema, + * using the sys_context., +++ b/spring-context/src/test/java/org/springframework/context/annotation/configuration/Spr10744Tests.java, +		context.getBeanFactory().registerScope("myTestScope", new MyTestScope());, +, +, +		// Should not have invoked constructor for the proxy instance, +		@Scope(value = "myTestScope",  proxyMode = ScopedProxyMode.TARGET_CLASS), +		@Override, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +	 * @param annotationType the annotation type to look for, both locally and as a meta-annotation, +	 * @return the matching annotation, or {@code null} if none found, +	 * @param annotationType the annotation type to look for, both locally and as a meta-annotation, +	 * @return the matching annotation, or {@code null} if none found, +	 * @param annotationType the annotation type to look for, +	 * @param annotationType the annotation type to look for, +	 * @param annotationType the annotation type to look for, +	 * @param annotationType the annotation type to look for, +	 * @return the annotation found, or {@code null} if none, +				A annotation = findAnnotation(ann.annotationType(), annotationType, visited);, +	 * @param annotationType the annotation type to look for, both locally and as a meta-annotation, +	 * @param clazz the class on which to check for the annotation (may be {@code null}), +							mappedAnnotations[i] = getAnnotationAttributes(realAnnotations[i], classValuesAsString, true);, +						this.result.addAll(Arrays.asList(getValue(annotation)));, +				throw new IllegalStateException("Unable to read value from repeating annotation container " +, +						this.containerAnnotationType.getName(), ex);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/OracleTableMetaDataProvider.java, + * Supports a feature for including synonyms in the metadata lookup. Also supports lookup of current schema, + * using the sys_context., +++ b/spring-test/src/main/java/org/springframework/test/context/TestContextManager.java, +	 * Construct a new {@code TestContextManager} for the specified {@linkplain Class test class}, +	 * and automatically {@link #registerTestExecutionListeners register} the, +	 * @see #registerTestExecutionListeners, +		this.testContext = new DefaultTestContext(this.testContextBootstrapper);, +		registerTestExecutionListeners(this.testContextBootstrapper.getTestExecutionListeners());, +]