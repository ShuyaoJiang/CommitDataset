[+++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingIntegrationTests.java, +	@Test // SPR-15140, +	public void handleWithEncodedParam() throws Exception {, +		String expected = "Hello  ++\u00e0!";, +		assertEquals(expected, performGet("/param?name=%20%2B+%C3%A0", new HttpHeaders(), String.class).getBody());, +	}, +, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingIntegrationTests.java, +	@Test // SPR-15140, +	public void handleWithEncodedParam() throws Exception {, +		String expected = "Hello  ++\u00e0!";, +		assertEquals(expected, performGet("/param?name=%20%2B+%C3%A0", new HttpHeaders(), String.class).getBody());, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpRequest.java, +import org.springframework.web.util.UriUtils;, +				queryParams.add(decodeQueryParam(name), decodeQueryParam(value));, +	private static String decodeQueryParam(String value) {, +		return (value != null ? UriUtils.decode(value, StandardCharsets.UTF_8) : null);, +	}, +, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingIntegrationTests.java, +	@Test // SPR-15140, +	public void handleWithEncodedParam() throws Exception {, +		String expected = "Hello  ++\u00e0!";, +		assertEquals(expected, performGet("/param?name=%20%2B+%C3%A0", new HttpHeaders(), String.class).getBody());, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpRequest.java, +import org.springframework.web.util.UriUtils;, +				queryParams.add(decodeQueryParam(name), decodeQueryParam(value));, +	private static String decodeQueryParam(String value) {, +		return (value != null ? UriUtils.decode(value, StandardCharsets.UTF_8) : null);, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java, +		InetSocketAddress address = channel.remoteAddress();, +		return (address == null ? URI.create(channel.uri()) : getBaseUrl(address).resolve(channel.uri()));, +	}, +, +	private static URI getBaseUrl(InetSocketAddress address) {, +			return new URI(null, null, address.getHostString(), address.getPort(), null, null, null);, +			// Should not happen..., +			throw new IllegalStateException(ex);, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingIntegrationTests.java, +	@Test // SPR-15140, +	public void handleWithEncodedParam() throws Exception {, +		String expected = "Hello  ++\u00e0!";, +		assertEquals(expected, performGet("/param?name=%20%2B+%C3%A0", new HttpHeaders(), String.class).getBody());, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpRequest.java, +import org.springframework.web.util.UriUtils;, +				queryParams.add(decodeQueryParam(name), decodeQueryParam(value));, +	private static String decodeQueryParam(String value) {, +		return (value != null ? UriUtils.decode(value, StandardCharsets.UTF_8) : null);, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java, +		InetSocketAddress address = channel.remoteAddress();, +		return (address == null ? URI.create(channel.uri()) : getBaseUrl(address).resolve(channel.uri()));, +	}, +, +	private static URI getBaseUrl(InetSocketAddress address) {, +			return new URI(null, null, address.getHostString(), address.getPort(), null, null, null);, +			// Should not happen..., +			throw new IllegalStateException(ex);, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/RxNettyServerHttpRequest.java, +		return StringUtils.isEmpty(request.getHostHeader()) ?, +				URI.create(request.getUri()) : getBaseUrl(request).resolve(request.getUri());, +	}, +, +	private static URI getBaseUrl(HttpServerRequest<ByteBuf> request) {, +		InetSocketAddress address = headers.getHost();, +		try {, +			return new URI(null, null, address.getHostString(), address.getPort(), null, null, null);, +			// Should not happen..., +			throw new IllegalStateException(ex);, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingIntegrationTests.java, +	@Test // SPR-15140, +	public void handleWithEncodedParam() throws Exception {, +		String expected = "Hello  ++\u00e0!";, +		assertEquals(expected, performGet("/param?name=%20%2B+%C3%A0", new HttpHeaders(), String.class).getBody());, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpRequest.java, +import org.springframework.web.util.UriUtils;, +				queryParams.add(decodeQueryParam(name), decodeQueryParam(value));, +	private static String decodeQueryParam(String value) {, +		return (value != null ? UriUtils.decode(value, StandardCharsets.UTF_8) : null);, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java, +		InetSocketAddress address = channel.remoteAddress();, +		return (address == null ? URI.create(channel.uri()) : getBaseUrl(address).resolve(channel.uri()));, +	}, +, +	private static URI getBaseUrl(InetSocketAddress address) {, +			return new URI(null, null, address.getHostString(), address.getPort(), null, null, null);, +			// Should not happen...]