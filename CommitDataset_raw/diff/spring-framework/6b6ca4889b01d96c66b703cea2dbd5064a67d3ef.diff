[+++ b/spring-orm/src/test/java/org/springframework/orm/hibernate3/HibernateTransactionManagerTests.java, +import org.hibernate.engine.SessionFactoryImplementor;, +	public void testTransactionWithPropagationSupportsAndCurrentSession() throws Exception {, +		final SessionFactoryImplementor sf = mock(SessionFactoryImplementor.class);, +		final Session session = mock(Session.class);, +, +		given(sf.openSession()).willReturn(session);, +		given(session.getSessionFactory()).willReturn(sf);, +		given(session.getFlushMode()).willReturn(FlushMode.MANUAL);, +, +		LocalSessionFactoryBean lsfb = new LocalSessionFactoryBean() {, +			@Override, +			protected SessionFactory newSessionFactory(Configuration config) throws HibernateException {, +				return sf;, +			}, +		};, +		lsfb.afterPropertiesSet();, +		final SessionFactory sfProxy = lsfb.getObject();, +, +		PlatformTransactionManager tm = new HibernateTransactionManager(sfProxy);, +		TransactionTemplate tt = new TransactionTemplate(tm);, +		tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_SUPPORTS);, +		assertTrue("Hasn't thread session", !TransactionSynchronizationManager.hasResource(sfProxy));, +, +		tt.execute(new TransactionCallback() {, +			@Override, +			public Object doInTransaction(TransactionStatus status) {, +				assertTrue("Hasn't thread session", !TransactionSynchronizationManager.hasResource(sfProxy));, +				assertTrue("Is not new transaction", !status.isNewTransaction());, +				assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly());, +				assertFalse(TransactionSynchronizationManager.isActualTransactionActive());, +				Session session = new SpringSessionContext(sf).currentSession();, +				assertTrue("Has thread session", TransactionSynchronizationManager.hasResource(sfProxy));, +				session.flush();, +				return null;, +			}, +		});, +, +		assertTrue("Hasn't thread session", !TransactionSynchronizationManager.hasResource(sfProxy));, +		InOrder ordered = inOrder(session);, +		ordered.verify(session).flush();, +		ordered.verify(session).close();, +	}, +, +	@Test, +			assertTrue(ex.getMessage().contains("mymsg"));]