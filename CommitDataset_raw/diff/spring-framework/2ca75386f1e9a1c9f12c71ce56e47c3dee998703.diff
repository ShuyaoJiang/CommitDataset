[+++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +					// Only prefix the path delimiter if something exists before it, +					if(getScheme() != null || getUserInfo() != null || getHost() != null || getPort() != -1) {, +				}, +++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +					// Only prefix the path delimiter if something exists before it, +					if(getScheme() != null || getUserInfo() != null || getHost() != null || getPort() != -1) {, +				}, +++ b/spring-web/src/test/java/org/springframework/web/util/UriComponentsBuilderTests.java, +		assertEquals("Invalid result URI String", "foo?bar#baz", result.toUriString());, +, +		URI expected = new URI("foo?bar#baz");, +	@Test, +	public void relativeUrls() throws Exception {, +		assertThat(UriComponentsBuilder.fromUriString("http://example.com/foo/../bar").build().toString(), equalTo("http://example.com/foo/../bar"));, +		assertThat(UriComponentsBuilder.fromUriString("http://example.com/foo/../bar").build().toUriString(), equalTo("http://example.com/foo/../bar"));, +		assertThat(UriComponentsBuilder.fromUriString("http://example.com/foo/../bar").build().toUri().getPath(), equalTo("/foo/../bar"));, +		assertThat(UriComponentsBuilder.fromUriString("../../").build().toString(), equalTo("../../"));, +		assertThat(UriComponentsBuilder.fromUriString("../../").build().toUriString(), equalTo("../../"));, +		assertThat(UriComponentsBuilder.fromUriString("../../").build().toUri().getPath(), equalTo("../../"));, +		assertThat(UriComponentsBuilder.fromUriString("http://example.com").path("foo/../bar").build().toString(), equalTo("http://example.com/foo/../bar"));, +		assertThat(UriComponentsBuilder.fromUriString("http://example.com").path("foo/../bar").build().toUriString(), equalTo("http://example.com/foo/../bar"));, +		assertThat(UriComponentsBuilder.fromUriString("http://example.com").path("foo/../bar").build().toUri().getPath(), equalTo("/foo/../bar"));, +	}]