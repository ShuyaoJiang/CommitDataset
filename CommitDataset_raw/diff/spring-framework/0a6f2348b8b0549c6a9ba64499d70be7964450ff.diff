[+++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/context/PortletApplicationContextUtils.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.web.context.request.WebRequest;, +		beanFactory.registerResolvableDependency(WebRequest.class, new WebRequestObjectFactory());, +	/**, +	 * Return the current RequestAttributes instance as PortletRequestAttributes., +	 * @see RequestContextHolder#currentRequestAttributes(), +	 */, +	private static PortletRequestAttributes currentRequestAttributes() {, +		RequestAttributes requestAttr = RequestContextHolder.currentRequestAttributes();, +		if (!(requestAttr instanceof PortletRequestAttributes)) {, +			throw new IllegalStateException("Current request is not a portlet request");, +		}, +		return (PortletRequestAttributes) requestAttr;, +	}, +, +			return currentRequestAttributes().getRequest();, +			return currentRequestAttributes().getRequest().getPortletSession();, +, +	/**, +	 * Factory that exposes the current WebRequest object on demand., +	 */, +	private static class WebRequestObjectFactory implements ObjectFactory<WebRequest>, Serializable {, +, +		public WebRequest getObject() {, +			return new PortletWebRequest(currentRequestAttributes().getRequest());, +		}, +, +		@Override, +		public String toString() {, +			return "Current PortletWebRequest";, +		}, +	}, +, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/context/PortletApplicationContextUtils.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.web.context.request.WebRequest;, +		beanFactory.registerResolvableDependency(WebRequest.class, new WebRequestObjectFactory());, +	/**, +	 * Return the current RequestAttributes instance as PortletRequestAttributes., +	 * @see RequestContextHolder#currentRequestAttributes(), +	 */, +	private static PortletRequestAttributes currentRequestAttributes() {, +		RequestAttributes requestAttr = RequestContextHolder.currentRequestAttributes();, +		if (!(requestAttr instanceof PortletRequestAttributes)) {, +			throw new IllegalStateException("Current request is not a portlet request");, +		}, +		return (PortletRequestAttributes) requestAttr;, +	}, +, +			return currentRequestAttributes().getRequest();, +			return currentRequestAttributes().getRequest().getPortletSession();, +, +	/**, +	 * Factory that exposes the current WebRequest object on demand., +	 */, +	private static class WebRequestObjectFactory implements ObjectFactory<WebRequest>, Serializable {, +, +		public WebRequest getObject() {, +			return new PortletWebRequest(currentRequestAttributes().getRequest());, +		}, +, +		@Override, +		public String toString() {, +			return "Current PortletWebRequest";, +		}, +	}, +, +++ b/org.springframework.web.portlet/src/test/java/org/springframework/web/portlet/mvc/annotation/Portlet20AnnotationControllerTests.java, + * Copyright 2002-2010 the original author or authors., +		@Autowired, +		private WebRequest webRequest;, +, +			if (this.portletContext == null || this.session == null || this.request == null || this.webRequest == null) {, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/context/PortletApplicationContextUtils.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.web.context.request.WebRequest;, +		beanFactory.registerResolvableDependency(WebRequest.class, new WebRequestObjectFactory());, +	/**, +	 * Return the current RequestAttributes instance as PortletRequestAttributes., +	 * @see RequestContextHolder#currentRequestAttributes(), +	 */, +	private static PortletRequestAttributes currentRequestAttributes() {, +		RequestAttributes requestAttr = RequestContextHolder.currentRequestAttributes();, +		if (!(requestAttr instanceof PortletRequestAttributes)) {, +			throw new IllegalStateException("Current request is not a portlet request");, +		}, +		return (PortletRequestAttributes) requestAttr;, +	}, +, +			return currentRequestAttributes().getRequest();, +			return currentRequestAttributes().getRequest().getPortletSession();, +, +	/**, +	 * Factory that exposes the current WebRequest object on demand., +	 */, +	private static class WebRequestObjectFactory implements ObjectFactory<WebRequest>, Serializable {, +, +		public WebRequest getObject() {, +			return new PortletWebRequest(currentRequestAttributes().getRequest());]