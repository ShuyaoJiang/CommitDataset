[+++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/Ejb3TransactionAnnotationParser.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.transaction.interceptor.DefaultTransactionAttribute;, +	private static class Ejb3TransactionAttribute extends DefaultTransactionAttribute {, +			return (ann != null ? ann.rollback() : super.rollbackOn(ex));, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/Ejb3TransactionAnnotationParser.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.transaction.interceptor.DefaultTransactionAttribute;, +	private static class Ejb3TransactionAttribute extends DefaultTransactionAttribute {, +			return (ann != null ? ann.rollback() : super.rollbackOn(ex));, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/SpringTransactionAnnotationParser.java, +import java.lang.reflect.AnnotatedElement;, +		rbta.setQualifier(ann.value());, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/Ejb3TransactionAnnotationParser.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.transaction.interceptor.DefaultTransactionAttribute;, +	private static class Ejb3TransactionAttribute extends DefaultTransactionAttribute {, +			return (ann != null ? ann.rollback() : super.rollbackOn(ex));, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/SpringTransactionAnnotationParser.java, +import java.lang.reflect.AnnotatedElement;, +		rbta.setQualifier(ann.value());, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/Transactional.java, + * Copyright 2002-2009 the original author or authors., +	 * A qualifier value for the specified transaction., +	 * <p>May be used to determine the target transaction manager,, +	 * matching the qualifier value (or the bean name) of a specific, +	 * {@link org.springframework.transaction.PlatformTransactionManager}, +	 * bean definition., +	 */, +	String value() default "";, +, +	/**, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/Ejb3TransactionAnnotationParser.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.transaction.interceptor.DefaultTransactionAttribute;, +	private static class Ejb3TransactionAttribute extends DefaultTransactionAttribute {, +			return (ann != null ? ann.rollback() : super.rollbackOn(ex));, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/SpringTransactionAnnotationParser.java, +import java.lang.reflect.AnnotatedElement;, +		rbta.setQualifier(ann.value());, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/Transactional.java, + * Copyright 2002-2009 the original author or authors., +	 * A qualifier value for the specified transaction., +	 * <p>May be used to determine the target transaction manager,, +	 * matching the qualifier value (or the bean name) of a specific, +	 * {@link org.springframework.transaction.PlatformTransactionManager}, +	 * bean definition., +	 */, +	String value() default "";, +, +	/**, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/config/AnnotationDrivenBeanDefinitionParser.java, +		def.getPropertyValues().addPropertyValue("transactionManagerBeanName", transactionManagerName);, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/Ejb3TransactionAnnotationParser.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.transaction.interceptor.DefaultTransactionAttribute;, +	private static class Ejb3TransactionAttribute extends DefaultTransactionAttribute {, +			return (ann != null ? ann.rollback() : super.rollbackOn(ex));, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/SpringTransactionAnnotationParser.java, +import java.lang.reflect.AnnotatedElement;, +		rbta.setQualifier(ann.value());, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/Transactional.java, + * Copyright 2002-2009 the original author or authors., +	 * A qualifier value for the specified transaction., +	 * <p>May be used to determine the target transaction manager,, +	 * matching the qualifier value (or the bean name) of a specific, +	 * {@link org.springframework.transaction.PlatformTransactionManager}, +	 * bean definition., +	 */, +	String value() default "";, +, +	/**, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/config/AnnotationDrivenBeanDefinitionParser.java, +		def.getPropertyValues().addPropertyValue("transactionManagerBeanName", transactionManagerName);, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/interceptor/DefaultTransactionAttribute.java, +	private String qualifier;, +, +, +	public void setQualifier(String qualifier) {, +		this.qualifier = qualifier;, +	}, +, +	public String getQualifier() {, +		return this.qualifier;, +	}, +, +	 * The default behavior is as with EJB: rollback on unchecked exception., +	 * <p>This is consistent with TransactionTemplate's default behavior., +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/Ejb3TransactionAnnotationParser.java, + * Copyright 2002-2009 the original author or authors., +import org.springframework.transaction.interceptor.DefaultTransactionAttribute;, +	private static class Ejb3TransactionAttribute extends DefaultTransactionAttribute {, +			return (ann != null ? ann.rollback() : super.rollbackOn(ex));, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/SpringTransactionAnnotationParser.java, +import java.lang.reflect.AnnotatedElement;, +		rbta.setQualifier(ann.value());, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/Transactional.java, + * Copyright 2002-2009 the original author or authors., +	 * A qualifier value for the specified transaction., +	 * <p>May be used to determine the target transaction manager,]