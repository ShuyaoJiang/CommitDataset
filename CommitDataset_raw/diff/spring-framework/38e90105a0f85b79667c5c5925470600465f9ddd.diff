[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java, +	/**, +	 * Constant that indicates the container should attempt to infer the {@link, +	 * #setDestroyMethodName destroy method name} for a bean as opposed to explicit, +	 * specification of a method name. The value {@value} is specifically designed to, +	 * include characters otherwise illegal in a method name, ensuring no possibility of, +	 * collisions with a legitimately named methods having the same name., +	 */, +	public static final String INFER_METHOD = "(inferred)";, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java, +	/**, +	 * Constant that indicates the container should attempt to infer the {@link, +	 * #setDestroyMethodName destroy method name} for a bean as opposed to explicit, +	 * specification of a method name. The value {@value} is specifically designed to, +	 * include characters otherwise illegal in a method name, ensuring no possibility of, +	 * collisions with a legitimately named methods having the same name., +	 */, +	public static final String INFER_METHOD = "(inferred)";, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java, +import java.lang.reflect.Modifier;, +		inferDestroyMethodIfNecessary(beanDefinition);, +	 * If the current value of the given beanDefinition's destroyMethodName property is, +	 * {@link AbstractBeanDefinition#INFER_METHOD}, then attempt to infer a destroy method., +	 * Candidate methods are currently limited to public, no-arg methods named 'close', +	 * (whether declared locally or inherited). The given beanDefinition's, +	 * destroyMethodName is updated to be null if no such method is found, otherwise set, +	 * to the name of the inferred method. This constant serves as the default for the, +	 * {@code @Bean#destroyMethod} attribute and the value of the constant may also be, +	 * used in XML within the {@code <bean destroy-method="">} or {@code, +	 * <beans default-destroy-method="">} attributes., +	 */, +	private void inferDestroyMethodIfNecessary(RootBeanDefinition beanDefinition) {, +		if ("(inferred)".equals(beanDefinition.getDestroyMethodName())) {, +			try {, +				Method candidate = bean.getClass().getMethod("close");, +				if (Modifier.isPublic(candidate.getModifiers())) {, +					beanDefinition.setDestroyMethodName(candidate.getName());, +				}, +			} catch (NoSuchMethodException ex) {, +				// no candidate destroy method found, +				beanDefinition.setDestroyMethodName(null);, +			}, +		}, +	}, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java, +	/**, +	 * Constant that indicates the container should attempt to infer the {@link, +	 * #setDestroyMethodName destroy method name} for a bean as opposed to explicit, +	 * specification of a method name. The value {@value} is specifically designed to, +	 * include characters otherwise illegal in a method name, ensuring no possibility of, +	 * collisions with a legitimately named methods having the same name., +	 */, +	public static final String INFER_METHOD = "(inferred)";, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java, +import java.lang.reflect.Modifier;, +		inferDestroyMethodIfNecessary(beanDefinition);, +	 * If the current value of the given beanDefinition's destroyMethodName property is, +	 * {@link AbstractBeanDefinition#INFER_METHOD}, then attempt to infer a destroy method., +	 * Candidate methods are currently limited to public, no-arg methods named 'close', +	 * (whether declared locally or inherited). The given beanDefinition's, +	 * destroyMethodName is updated to be null if no such method is found, otherwise set, +	 * to the name of the inferred method. This constant serves as the default for the, +	 * {@code @Bean#destroyMethod} attribute and the value of the constant may also be, +	 * used in XML within the {@code <bean destroy-method="">} or {@code, +	 * <beans default-destroy-method="">} attributes., +	 */, +	private void inferDestroyMethodIfNecessary(RootBeanDefinition beanDefinition) {, +		if ("(inferred)".equals(beanDefinition.getDestroyMethodName())) {, +			try {, +				Method candidate = bean.getClass().getMethod("close");, +				if (Modifier.isPublic(candidate.getModifiers())) {, +					beanDefinition.setDestroyMethodName(candidate.getName());, +				}, +			} catch (NoSuchMethodException ex) {, +				// no candidate destroy method found, +				beanDefinition.setDestroyMethodName(null);, +			}, +		}, +	}, +, +	/**, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Bean.java, +import org.springframework.beans.factory.support.AbstractBeanDefinition;, +	 * application context, for example a {@code close()} method on a JDBC {@code, +	 * DataSource} implementation, or a Hibernate {@code SessionFactory} object., +	 * method against object returned from the {@code @Bean} method. For example, given a, +	 * container will notice the {@code close()} method available on that object and, +	 * automatically register it as the {@code destroyMethod}. This 'destroy method, +	 * inference' is currently limited to detecting only public, no-arg methods named, +	 * 'close'. The method may be declared at any level of the inheritance hierarchy, and, +	 * will be detected regardless of the return type of the {@code @Bean} method, i.e., +	 * detection occurs reflectively against the bean instance itself at creation time., +	String destroyMethod() default AbstractBeanDefinition.INFER_METHOD;, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanDefinition.java, +	/**]