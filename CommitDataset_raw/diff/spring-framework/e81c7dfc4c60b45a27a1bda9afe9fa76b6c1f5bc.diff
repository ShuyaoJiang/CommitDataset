[+++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandlerTests.java, +import static org.springframework.messaging.handler.DestinationPatternsMessageCondition.LOOKUP_DESTINATION_HEADER;, + * @author Stephane Nicoll, +		Message<?> inputMessage = createMessage(sessionId, "sub1", "/app", "/dest", null);, +		Message<?> inputMessage = createMessage(sessionId, "sub1", null, null, null);, +		Message<?> inputMessage = createMessage(sessionId, "sub1", "/app", "/dest", null);, +		Message<?> inputMessage = createMessage(sessionId, "sub1", null, null, null);, +		Message<?> inputMessage = createMessage(sessionId, "sub1", null, null, null);, +		Message<?> inputMessage = createMessage(sessionId, "sub1", null, null, null);, +		Message<?> inputMessage = createMessage(sessionId, "sub1", null, null, null);, +		Message<?> inputMessage = createMessage(sessionId, "sub1", null, null, null);, +		Message<?> inputMessage = createMessage(sessionId, "sub1", null, null, null);, +		Message<?> inputMessage = createMessage("sess1", "sub1", "/app/", "dest.foo.bar", null);, +		Message<?> message = createMessage("sess1", "sub1", "/app", "/dest", null);, +		handler.handleReturnValue(PAYLOAD, this.noAnnotationsReturnType, message);, +		MessageHeaders headers = captor.getValue();, +		SimpMessageHeaderAccessor accessor = getAccessor(headers, SimpMessageHeaderAccessor.class);, +		assertEquals(this.noAnnotationsReturnType,, +				accessor.getHeader(SimpMessagingTemplate.CONVERSION_HINT_HEADER));, +		Message<?> inputMessage = createMessage(sessionId, "sub1", null, null, user);, +		Message<?> inputMessage = createMessage(sessionId, "sub1", null, null, user);, +		assertEquals(this.sendToUserSingleSessionReturnType,, +				accessor.getHeader(SimpMessagingTemplate.CONVERSION_HINT_HEADER));, +		assertEquals(this.sendToUserSingleSessionReturnType,, +				accessor.getHeader(SimpMessagingTemplate.CONVERSION_HINT_HEADER));, +		Message<?> inputMessage = createMessage(sessionId, "sub1", null, null, user);, +		Message<?> inputMessage = createMessage(sessionId, "sub1", "/app", "/dest", user);, +		Message<?> inputMessage = createMessage("sess1", "sub1", "/app/", "dest.foo.bar", user);, +		Message<?> message = createMessage(sessionId, "sub1", "/app", "/dest", user);, +		this.handler.handleReturnValue(PAYLOAD, this.sendToUserSingleSessionDefaultDestReturnType, message);, +		assertEquals(this.sendToUserSingleSessionDefaultDestReturnType,, +				accessor.getHeader(SimpMessagingTemplate.CONVERSION_HINT_HEADER));, +		Message<?> inputMessage = createMessage(sessionId, "sub1", null, null, null);, +		Message<?> inputMessage = createMessage(sessionId, "sub1", "/app", "/dest", null);, +		String bytes = new String((byte[]) message.getPayload(), StandardCharsets.UTF_8);, +		assertEquals("{\"withView1\":\"with\"}", bytes);, +	private Message<?> createMessage(String sessId, String subsId, String destPrefix, String dest, Principal user) {, +		if (dest != null && destPrefix != null) {, +			headerAccessor.setDestination(destPrefix + dest);, +			headerAccessor.setHeader(LOOKUP_DESTINATION_HEADER, dest);, +		if (user != null) {, +			headerAccessor.setUser(user);, +	@SuppressWarnings("unused"), +	@SendTo @SuppressWarnings("unused"), +	@SendTo({"/dest1", "/dest2"}) @SuppressWarnings("unused"), +	@SendTo("/topic/chat.message.filtered.{roomName}") @SuppressWarnings("unused"), +	@SendToUser @SuppressWarnings("unused"), +	@SendToUser(broadcast = false) @SuppressWarnings("unused"), +	@SendToUser({"/dest1", "/dest2"}) @SuppressWarnings("unused"), +	@SendToUser(destinations = { "/dest1", "/dest2" }, broadcast = false) @SuppressWarnings("unused"), +	@JsonView(MyJacksonView1.class) @SuppressWarnings("unused")]