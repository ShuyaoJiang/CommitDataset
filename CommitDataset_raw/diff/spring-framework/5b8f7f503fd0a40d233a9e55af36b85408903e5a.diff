[+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/support/AsyncRequestInterceptor.java, +import org.springframework.web.context.request.async.CallableProcessingInterceptor;, +class AsyncRequestInterceptor implements CallableProcessingInterceptor, DeferredResultProcessingInterceptor {, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/support/AsyncRequestInterceptor.java, +import org.springframework.web.context.request.async.CallableProcessingInterceptor;, +class AsyncRequestInterceptor implements CallableProcessingInterceptor, DeferredResultProcessingInterceptor {, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/support/AsyncRequestInterceptor.java, +import org.springframework.web.context.request.async.CallableProcessingInterceptor;, +class AsyncRequestInterceptor implements CallableProcessingInterceptor, DeferredResultProcessingInterceptor {, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/support/AsyncRequestInterceptor.java, +import org.springframework.web.context.request.async.CallableProcessingInterceptor;, +class AsyncRequestInterceptor implements CallableProcessingInterceptor, DeferredResultProcessingInterceptor {, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/support/AsyncRequestInterceptor.java, +import org.springframework.web.context.request.async.CallableProcessingInterceptor;, +class AsyncRequestInterceptor implements CallableProcessingInterceptor, DeferredResultProcessingInterceptor {, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/TestDispatcherServlet.java, +import org.springframework.web.context.request.async.CallableProcessingInterceptor;, +import org.springframework.web.context.request.async.DeferredResultProcessingInterceptor;, +		asyncManager.registerCallableInterceptor(KEY, new CallableProcessingInterceptor() {, +		asyncManager.registerDeferredResultInterceptor(KEY, new DeferredResultProcessingInterceptor() {, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/support/AsyncRequestInterceptor.java, +import org.springframework.web.context.request.async.CallableProcessingInterceptor;, +class AsyncRequestInterceptor implements CallableProcessingInterceptor, DeferredResultProcessingInterceptor {, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/support/AsyncRequestInterceptor.java, +import org.springframework.web.context.request.async.CallableProcessingInterceptor;, +class AsyncRequestInterceptor implements CallableProcessingInterceptor, DeferredResultProcessingInterceptor {, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/TestDispatcherServlet.java, +import org.springframework.web.context.request.async.CallableProcessingInterceptor;, +import org.springframework.web.context.request.async.DeferredResultProcessingInterceptor;, +		asyncManager.registerCallableInterceptor(KEY, new CallableProcessingInterceptor() {, +		asyncManager.registerDeferredResultInterceptor(KEY, new DeferredResultProcessingInterceptor() {, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableProcessingInterceptor.java, +	Object RESULT_NONE = new Object();, +	Object RESPONSE_HANDLED = new Object();, +	default <T> void beforeConcurrentHandling(NativeWebRequest request, Callable<T> task) throws Exception {, +	}, +	default <T> void preProcess(NativeWebRequest request, Callable<T> task) throws Exception {, +	}, +	default <T> void postProcess(NativeWebRequest request, Callable<T> task,, +			Object concurrentResult) throws Exception {, +	}, +	default <T> Object handleTimeout(NativeWebRequest request, Callable<T> task) throws Exception {, +		return RESULT_NONE;, +	}, +	default <T> Object handleError(NativeWebRequest request, Callable<T> task, Throwable t) throws Exception {, +		return RESULT_NONE;, +	}, +	default <T> void afterCompletion(NativeWebRequest request, Callable<T> task) throws Exception {, +	}, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/support/AsyncRequestInterceptor.java, +import org.springframework.web.context.request.async.CallableProcessingInterceptor;, +class AsyncRequestInterceptor implements CallableProcessingInterceptor, DeferredResultProcessingInterceptor {, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/support/AsyncRequestInterceptor.java, +import org.springframework.web.context.request.async.CallableProcessingInterceptor;, +class AsyncRequestInterceptor implements CallableProcessingInterceptor, DeferredResultProcessingInterceptor {, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/TestDispatcherServlet.java, +import org.springframework.web.context.request.async.CallableProcessingInterceptor;, +import org.springframework.web.context.request.async.DeferredResultProcessingInterceptor;, +		asyncManager.registerCallableInterceptor(KEY, new CallableProcessingInterceptor() {, +		asyncManager.registerDeferredResultInterceptor(KEY, new DeferredResultProcessingInterceptor() {, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableProcessingInterceptor.java, +	Object RESULT_NONE = new Object();, +	Object RESPONSE_HANDLED = new Object();, +	default <T> void beforeConcurrentHandling(NativeWebRequest request, Callable<T> task) throws Exception {, +	}, +	default <T> void preProcess(NativeWebRequest request, Callable<T> task) throws Exception {, +	}, +	default <T> void postProcess(NativeWebRequest request, Callable<T> task,, +			Object concurrentResult) throws Exception {, +	}, +	default <T> Object handleTimeout(NativeWebRequest request, Callable<T> task) throws Exception {, +		return RESULT_NONE;, +	}, +	default <T> Object handleError(NativeWebRequest request, Callable<T> task, Throwable t) throws Exception {, +		return RESULT_NONE;, +	}, +	default <T> void afterCompletion(NativeWebRequest request, Callable<T> task) throws Exception {, +	}, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableProcessingInterceptorAdapter.java, + * @deprecated as of 5.0 where CallableProcessingInterceptor has default methods, +@Deprecated, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/support/AsyncRequestInterceptor.java, +import org.springframework.web.context.request.async.CallableProcessingInterceptor;, +class AsyncRequestInterceptor implements CallableProcessingInterceptor, DeferredResultProcessingInterceptor {, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/support/AsyncRequestInterceptor.java, +import org.springframework.web.context.request.async.CallableProcessingInterceptor;, +class AsyncRequestInterceptor implements CallableProcessingInterceptor, DeferredResultProcessingInterceptor {, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/TestDispatcherServlet.java, +import org.springframework.web.context.request.async.CallableProcessingInterceptor;, +import org.springframework.web.context.request.async.DeferredResultProcessingInterceptor;, +		asyncManager.registerCallableInterceptor(KEY, new CallableProcessingInterceptor() {, +		asyncManager.registerDeferredResultInterceptor(KEY, new DeferredResultProcessingInterceptor() {, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/CallableProcessingInterceptor.java, +	Object RESULT_NONE = new Object();, +	Object RESPONSE_HANDLED = new Object();, +	default <T> void beforeConcurrentHandling(NativeWebRequest request, Callable<T> task) throws Exception {, +	}, +	default <T> void preProcess(NativeWebRequest request, Callable<T> task) throws Exception {, +	}, +	default <T> void postProcess(NativeWebRequest request, Callable<T> task,]