[+++ b/spring-web/src/main/java/org/springframework/http/client/MultipartBodyBuilder.java, + * @author Rossen Stoyanchev, +	 * Add a part from an Object., +	 * @param name the name of the part to add, +	 * @param part the part data, +	 * @return builder that allows for further customization of part headers, +	 * Variant of {@link #part(String, Object)} that also accepts a MediaType, +	 * which is used to determine how to encode the part., +	 * @param name the name of the part to add, +	 * @param part the part data, +	 * @param contentType the media type for the part, +	 * @return builder that allows for further customization of part headers, +, +		DefaultPartBuilder builder = new DefaultPartBuilder(partHeaders, partBody);, +	 * Add an asynchronous part with {@link Publisher}-based content., +	 * @param name the name of the part to add, +	 * @param publisher the part contents, +	 * @param elementClass the type of elements contained in the publisher, +	 * @return builder that allows for further customization of part headers, +		HttpHeaders headers = new HttpHeaders();, +		PublisherPartBuilder<T, P> builder = new PublisherPartBuilder<>(headers, publisher, elementClass);, +	 * Variant of {@link #asyncPart(String, Publisher, Class)} that accepts a, +	 * {@link ParameterizedTypeReference} for the element type, which allows, +	 * specifying generic type information., +	 * @param name the name of the part to add, +	 * @param publisher the part contents, +	 * @return builder that allows for further customization of part headers, +		HttpHeaders headers = new HttpHeaders();, +		PublisherPartBuilder<T, P> builder = new PublisherPartBuilder<>(publisher, typeReference, headers);, +	 * Return a {@code MultiValueMap} with the configured parts., +	 */, +	public MultiValueMap<String, HttpEntity<?>> build() {, +		MultiValueMap<String, HttpEntity<?>> result = new LinkedMultiValueMap<>(this.parts.size());, +		for (Map.Entry<String, List<DefaultPartBuilder>> entry : this.parts.entrySet()) {, +			for (DefaultPartBuilder builder : entry.getValue()) {, +				HttpEntity<?> entity = builder.build();, +				result.add(entry.getKey(), entity);, +			}, +		}, +		return result;, +	}, +, +, +	/**, +	 * Builder that allows for further customization of part headers., +		 * Add part header values., +		 * @see HttpHeaders#addAll(String, List), +		 * Manipulate the part headers through the given consumer., +		 * @param headersConsumer consumer to manipulate the part headers with, +		protected final HttpHeaders headers;, +, +		public DefaultPartBuilder(HttpHeaders headers, @Nullable Object body) {, +			this.body = body;, +, +	private static class PublisherPartBuilder<S, P extends Publisher<S>> extends DefaultPartBuilder {, +, +		public PublisherPartBuilder(HttpHeaders headers, P body, Class<S> elementClass) {, +			super(headers, body);, +		public PublisherPartBuilder(P body, ParameterizedTypeReference<S> typeReference, HttpHeaders headers) {, +			super(headers, body);, +			return new PublisherEntity<>(this.headers, publisher, this.resolvableType);, +	 * Specialization of {@link HttpEntity} for use with a, +	 * {@link Publisher}-based body, for which we also need to keep track of, +	 * the element type., +		private PublisherEntity(@Nullable MultiValueMap<String, String> headers, P publisher,, +				ResolvableType resolvableType) {, +, +		 * Return the element type for the {@code Publisher} body., +++ b/spring-web/src/main/java/org/springframework/http/client/MultipartBodyBuilder.java, + * @author Rossen Stoyanchev, +	 * Add a part from an Object., +	 * @param name the name of the part to add, +	 * @param part the part data, +	 * @return builder that allows for further customization of part headers, +	 * Variant of {@link #part(String, Object)} that also accepts a MediaType, +	 * which is used to determine how to encode the part., +	 * @param name the name of the part to add, +	 * @param part the part data, +	 * @param contentType the media type for the part, +	 * @return builder that allows for further customization of part headers, +, +		DefaultPartBuilder builder = new DefaultPartBuilder(partHeaders, partBody);, +	 * Add an asynchronous part with {@link Publisher}-based content., +	 * @param name the name of the part to add, +	 * @param publisher the part contents, +	 * @param elementClass the type of elements contained in the publisher, +	 * @return builder that allows for further customization of part headers, +		HttpHeaders headers = new HttpHeaders();, +		PublisherPartBuilder<T, P> builder = new PublisherPartBuilder<>(headers, publisher, elementClass);, +	 * Variant of {@link #asyncPart(String, Publisher, Class)} that accepts a, +	 * {@link ParameterizedTypeReference} for the element type, which allows, +	 * specifying generic type information., +	 * @param name the name of the part to add, +	 * @param publisher the part contents, +	 * @return builder that allows for further customization of part headers, +		HttpHeaders headers = new HttpHeaders();, +		PublisherPartBuilder<T, P> builder = new PublisherPartBuilder<>(publisher, typeReference, headers);, +	 * Return a {@code MultiValueMap} with the configured parts., +	 */, +	public MultiValueMap<String, HttpEntity<?>> build() {]