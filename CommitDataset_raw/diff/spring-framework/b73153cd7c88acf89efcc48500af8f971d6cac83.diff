[+++ b/spring-web/src/main/java/org/springframework/web/multipart/MultipartFile.java, + * Copyright 2002-2017 the original author or authors., + * session-level or persistent store as and if desired. The temporary storage, +	 * @see org.apache.commons.fileupload.FileItem#getName(), +	 * @see org.springframework.web.multipart.commons.CommonsMultipartFile#setPreserveFilename, +	 * <p>The user is responsible for closing the returned stream., +	 * filesystem, or save memory-held contents to the destination file. If the, +	 * destination file already exists, it will be deleted first., +	 * <p>If the target file has been moved in the filesystem, this operation, +	 * cannot be invoked again afterwards. Therefore, call this method just once, +	 * in order to work with any storage mechanism., +	 * <p><b>NOTE:</b> Depending on the underlying provider, temporary storage, +	 * may be container-dependent, including the base directory for relative, +	 * destinations specified here (e.g. with Servlet 3.0 multipart handling)., +	 * For absolute destinations, the target file may get renamed/moved from its, +	 * temporary location or newly copied, even if a temporary copy already exists., +	 * @param dest the destination file (typically absolute), +	 * @see org.apache.commons.fileupload.FileItem#write(File), +	 * @see javax.servlet.http.Part#write(String), +++ b/spring-web/src/main/java/org/springframework/web/multipart/MultipartFile.java, + * Copyright 2002-2017 the original author or authors., + * session-level or persistent store as and if desired. The temporary storage, +	 * @see org.apache.commons.fileupload.FileItem#getName(), +	 * @see org.springframework.web.multipart.commons.CommonsMultipartFile#setPreserveFilename, +	 * <p>The user is responsible for closing the returned stream., +	 * filesystem, or save memory-held contents to the destination file. If the, +	 * destination file already exists, it will be deleted first., +	 * <p>If the target file has been moved in the filesystem, this operation, +	 * cannot be invoked again afterwards. Therefore, call this method just once, +	 * in order to work with any storage mechanism., +	 * <p><b>NOTE:</b> Depending on the underlying provider, temporary storage, +	 * may be container-dependent, including the base directory for relative, +	 * destinations specified here (e.g. with Servlet 3.0 multipart handling)., +	 * For absolute destinations, the target file may get renamed/moved from its, +	 * temporary location or newly copied, even if a temporary copy already exists., +	 * @param dest the destination file (typically absolute), +	 * @see org.apache.commons.fileupload.FileItem#write(File), +	 * @see javax.servlet.http.Part#write(String), +++ b/spring-web/src/main/java/org/springframework/web/multipart/commons/CommonsMultipartFile.java, + * Copyright 2002-2017 the original author or authors., +					action = (isAvailable() ? "copied" : "moved");, +			throw new IllegalStateException(ex.getMessage(), ex);, +		}, +		catch (IllegalStateException ex) {, +			// Pass through when coming from FileItem directly, +			throw ex;, +			// From I/O operations within FileItem.write, +			throw new IOException("File transfer failed", ex);, +++ b/spring-web/src/main/java/org/springframework/web/multipart/MultipartFile.java, + * Copyright 2002-2017 the original author or authors., + * session-level or persistent store as and if desired. The temporary storage, +	 * @see org.apache.commons.fileupload.FileItem#getName(), +	 * @see org.springframework.web.multipart.commons.CommonsMultipartFile#setPreserveFilename, +	 * <p>The user is responsible for closing the returned stream., +	 * filesystem, or save memory-held contents to the destination file. If the, +	 * destination file already exists, it will be deleted first., +	 * <p>If the target file has been moved in the filesystem, this operation, +	 * cannot be invoked again afterwards. Therefore, call this method just once, +	 * in order to work with any storage mechanism., +	 * <p><b>NOTE:</b> Depending on the underlying provider, temporary storage, +	 * may be container-dependent, including the base directory for relative, +	 * destinations specified here (e.g. with Servlet 3.0 multipart handling)., +	 * For absolute destinations, the target file may get renamed/moved from its, +	 * temporary location or newly copied, even if a temporary copy already exists., +	 * @param dest the destination file (typically absolute), +	 * @see org.apache.commons.fileupload.FileItem#write(File), +	 * @see javax.servlet.http.Part#write(String), +++ b/spring-web/src/main/java/org/springframework/web/multipart/commons/CommonsMultipartFile.java, + * Copyright 2002-2017 the original author or authors., +					action = (isAvailable() ? "copied" : "moved");, +			throw new IllegalStateException(ex.getMessage(), ex);, +		}, +		catch (IllegalStateException ex) {, +			// Pass through when coming from FileItem directly, +			throw ex;, +			// From I/O operations within FileItem.write, +			throw new IOException("File transfer failed", ex);, +++ b/spring-web/src/main/java/org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.java, +import java.io.FileOutputStream;, +			if (dest.isAbsolute() && !dest.exists()) {, +				// Servlet 3.0 Part.write is not guaranteed to support absolute file paths:, +				// may translate the given path to a relative location within a temp dir, +				// (e.g. on Jetty whereas Tomcat and Undertow detect absolute paths)., +				// At least we offloaded the file from memory storage; it'll get deleted, +				// from the temp dir eventually in any case. And for our user's purposes,, +				// we can manually copy it to the requested location as a fallback., +				FileCopyUtils.copy(this.part.getInputStream(), new FileOutputStream(dest));, +			}]