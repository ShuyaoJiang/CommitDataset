[+++ b/build.gradle, +		provided("javax.servlet:javax.servlet-api:3.0.1"), +		optional("javax.servlet:javax.servlet-api:3.0.1"), +		optional("javax.servlet:javax.servlet-api:3.0.1"), +++ b/build.gradle, +		provided("javax.servlet:javax.servlet-api:3.0.1"), +		optional("javax.servlet:javax.servlet-api:3.0.1"), +		optional("javax.servlet:javax.servlet-api:3.0.1"), +++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java, + * Copyright 2002-2013 the original author or authors., +	 * Create a new {@link MockHttpServletRequest} based on the given, +	 * {@link ServletContext}. Can be overridden in subclasses., +		return new MockHttpServletRequest(servletContext);, +++ b/build.gradle, +		provided("javax.servlet:javax.servlet-api:3.0.1"), +		optional("javax.servlet:javax.servlet-api:3.0.1"), +		optional("javax.servlet:javax.servlet-api:3.0.1"), +++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java, + * Copyright 2002-2013 the original author or authors., +	 * Create a new {@link MockHttpServletRequest} based on the given, +	 * {@link ServletContext}. Can be overridden in subclasses., +		return new MockHttpServletRequest(servletContext);, +++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/request/MockMultipartHttpServletRequestBuilder.java, + * Copyright 2002-2013 the original author or authors., +		MockMultipartHttpServletRequest request = new MockMultipartHttpServletRequest(servletContext);, +++ b/build.gradle, +		provided("javax.servlet:javax.servlet-api:3.0.1"), +		optional("javax.servlet:javax.servlet-api:3.0.1"), +		optional("javax.servlet:javax.servlet-api:3.0.1"), +++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.java, + * Copyright 2002-2013 the original author or authors., +	 * Create a new {@link MockHttpServletRequest} based on the given, +	 * {@link ServletContext}. Can be overridden in subclasses., +		return new MockHttpServletRequest(servletContext);, +++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/request/MockMultipartHttpServletRequestBuilder.java, + * Copyright 2002-2013 the original author or authors., +		MockMultipartHttpServletRequest request = new MockMultipartHttpServletRequest(servletContext);, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockAsyncContext.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.mock.web;, +, +import java.io.IOException;, +import java.util.ArrayList;, +import java.util.List;, +import javax.servlet.AsyncContext;, +import javax.servlet.AsyncEvent;, +import javax.servlet.AsyncListener;, +import javax.servlet.ServletContext;, +import javax.servlet.ServletException;, +import javax.servlet.ServletRequest;, +import javax.servlet.ServletResponse;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +, +import org.springframework.beans.BeanUtils;, +import org.springframework.web.util.WebUtils;, +, +/**, + * Mock implementation of the {@link AsyncContext} interface., + *, + * @author Rossen Stoyanchev, + * @since 3.2, + */, +public class MockAsyncContext implements AsyncContext {, +, +	private final HttpServletRequest request;, +, +	private final HttpServletResponse response;, +, +	private final List<AsyncListener> listeners = new ArrayList<AsyncListener>();, +, +	private String dispatchedPath;, +, +	private long timeout = 10 * 1000L;	// 10 seconds is Tomcat's default, +, +, +	public MockAsyncContext(ServletRequest request, ServletResponse response) {, +		this.request = (HttpServletRequest) request;, +		this.response = (HttpServletResponse) response;, +	}, +, +, +	public ServletRequest getRequest() {, +		return this.request;, +	}, +]