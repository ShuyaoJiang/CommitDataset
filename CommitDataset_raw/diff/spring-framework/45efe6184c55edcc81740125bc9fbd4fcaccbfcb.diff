[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FlashMap.java, +import java.util.HashMap;, +import org.springframework.util.Assert;, +public class FlashMap extends HashMap<String, Object> implements Comparable<FlashMap> {, +	private final Map<String, String> expectedRequestParameters = new LinkedHashMap<String, String>();, +	 * Provide a URL to identify the target request for this FlashMap., +	 * Only the path of the provided URL will be used for matching purposes. , +	 * If the URL is absolute or has a query string, the URL path is , +	 * extracted. Or if the URL is relative, it is appended to the current , +	 * request URI and normalized.  , +	 * @param request the current request, used to normalize relative URLs, +	 * @param url an absolute URL, a URL path, or a relative URL, never {@code null}, +	public FlashMap setExpectedUrl(HttpServletRequest request, String url) {, +		Assert.notNull(url, "Expected URL must not be null");, +		String urlPath = extractUrlPath(url);, +		this.expectedUrlPath = urlPath.startsWith("/") ? urlPath : normalizeRelativeUrl(request, urlPath);, +		return this;, +			index = url.indexOf('/', index + 3);, +		index = url.indexOf('?');, +	private String normalizeRelativeUrl(HttpServletRequest request, String relativeUrl) {, +		relativeUrl = requestUri.substring(0, requestUri.lastIndexOf('/') + 1) + relativeUrl;, +		return StringUtils.cleanPath(relativeUrl);, +, +	/**, +	 * Add a request parameter pair to help identify the request this FlashMap , +	 * should be made available to. If expected parameters are not set, the , +	 * FlashMap instance will match to requests with any parameters., +	 * , +	 * @param name the name of the expected parameter (never {@code null}), +	 * @param value the value for the expected parameter (never {@code null}), +	 */, +	public FlashMap setExpectedRequestParam(String name, String value) {, +		this.expectedRequestParameters.put(name, value.toString());, +		return this;, +	 * should be made available to. If expected parameters are not set, the , +	public FlashMap setExpectedRequestParams(Map<String, ?> params) {, +		return this;, +	 * expectations provided via {@link #setExpectedUrl} and , +	 * {@link #setExpectedRequestParams}., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FlashMap.java, +import java.util.HashMap;, +import org.springframework.util.Assert;, +public class FlashMap extends HashMap<String, Object> implements Comparable<FlashMap> {, +	private final Map<String, String> expectedRequestParameters = new LinkedHashMap<String, String>();, +	 * Provide a URL to identify the target request for this FlashMap., +	 * Only the path of the provided URL will be used for matching purposes. , +	 * If the URL is absolute or has a query string, the URL path is , +	 * extracted. Or if the URL is relative, it is appended to the current , +	 * request URI and normalized.  , +	 * @param request the current request, used to normalize relative URLs, +	 * @param url an absolute URL, a URL path, or a relative URL, never {@code null}, +	public FlashMap setExpectedUrl(HttpServletRequest request, String url) {, +		Assert.notNull(url, "Expected URL must not be null");, +		String urlPath = extractUrlPath(url);, +		this.expectedUrlPath = urlPath.startsWith("/") ? urlPath : normalizeRelativeUrl(request, urlPath);, +		return this;, +			index = url.indexOf('/', index + 3);, +		index = url.indexOf('?');, +	private String normalizeRelativeUrl(HttpServletRequest request, String relativeUrl) {, +		relativeUrl = requestUri.substring(0, requestUri.lastIndexOf('/') + 1) + relativeUrl;, +		return StringUtils.cleanPath(relativeUrl);, +, +	/**, +	 * Add a request parameter pair to help identify the request this FlashMap , +	 * should be made available to. If expected parameters are not set, the , +	 * FlashMap instance will match to requests with any parameters., +	 * , +	 * @param name the name of the expected parameter (never {@code null}), +	 * @param value the value for the expected parameter (never {@code null}), +	 */, +	public FlashMap setExpectedRequestParam(String name, String value) {, +		this.expectedRequestParameters.put(name, value.toString());, +		return this;, +	 * should be made available to. If expected parameters are not set, the , +	public FlashMap setExpectedRequestParams(Map<String, ?> params) {, +		return this;, +	 * expectations provided via {@link #setExpectedUrl} and , +	 * {@link #setExpectedRequestParams}., +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/support/RedirectResponse.java, +import java.util.Collection;, +, +import org.springframework.core.Conventions;, +import org.springframework.util.Assert;, +		getFlashMap().put(name, value);, +	public RedirectResponse flashAttribute(Object attributeValue) {, +		Assert.notNull(attributeValue, "Model object must not be null");, +		if (attributeValue instanceof Collection && ((Collection) attributeValue).isEmpty()) {, +		return flashAttribute(Conventions.getVariableName(attributeValue), attributeValue);, +	}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/FlashMap.java, +import java.util.HashMap;, +import org.springframework.util.Assert;, +public class FlashMap extends HashMap<String, Object> implements Comparable<FlashMap> {, +	private final Map<String, String> expectedRequestParameters = new LinkedHashMap<String, String>();, +	 * Provide a URL to identify the target request for this FlashMap., +	 * Only the path of the provided URL will be used for matching purposes. , +	 * If the URL is absolute or has a query string, the URL path is , +	 * extracted. Or if the URL is relative, it is appended to the current , +	 * request URI and normalized.  , +	 * @param request the current request, used to normalize relative URLs]