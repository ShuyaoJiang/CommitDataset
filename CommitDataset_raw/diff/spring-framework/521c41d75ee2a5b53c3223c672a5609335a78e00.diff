[+++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, + * Copyright 2002-2016 the original author or authors., +public abstract class AbstractMappingContentNegotiationStrategy extends MappingMediaTypeFileExtensionResolver, +, +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, + * Copyright 2002-2016 the original author or authors., +public abstract class AbstractMappingContentNegotiationStrategy extends MappingMediaTypeFileExtensionResolver, +, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, +public class ContentNegotiationManager implements ContentNegotiationStrategy, MediaTypeFileExtensionResolver {, +	private static final List<MediaType> MEDIA_TYPE_ALL = Collections.<MediaType>singletonList(MediaType.ALL);, +	private final List<ContentNegotiationStrategy> strategies = new ArrayList<ContentNegotiationStrategy>();, +	private final Set<MediaTypeFileExtensionResolver> resolvers = new LinkedHashSet<MediaTypeFileExtensionResolver>();, +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, + * Copyright 2002-2016 the original author or authors., +public abstract class AbstractMappingContentNegotiationStrategy extends MappingMediaTypeFileExtensionResolver, +, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, +public class ContentNegotiationManager implements ContentNegotiationStrategy, MediaTypeFileExtensionResolver {, +	private static final List<MediaType> MEDIA_TYPE_ALL = Collections.<MediaType>singletonList(MediaType.ALL);, +	private final List<ContentNegotiationStrategy> strategies = new ArrayList<ContentNegotiationStrategy>();, +	private final Set<MediaTypeFileExtensionResolver> resolvers = new LinkedHashSet<MediaTypeFileExtensionResolver>();, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, + * Copyright 2002-2016 the original author or authors., +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, + * Copyright 2002-2016 the original author or authors., +public abstract class AbstractMappingContentNegotiationStrategy extends MappingMediaTypeFileExtensionResolver, +, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, +public class ContentNegotiationManager implements ContentNegotiationStrategy, MediaTypeFileExtensionResolver {, +	private static final List<MediaType> MEDIA_TYPE_ALL = Collections.<MediaType>singletonList(MediaType.ALL);, +	private final List<ContentNegotiationStrategy> strategies = new ArrayList<ContentNegotiationStrategy>();, +	private final Set<MediaTypeFileExtensionResolver> resolvers = new LinkedHashSet<MediaTypeFileExtensionResolver>();, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, + * Copyright 2002-2016 the original author or authors., +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationStrategy.java, + * Copyright 2002-2016 the original author or authors., +	 * @return the requested media types or an empty list (never {@code null}), +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, + * Copyright 2002-2016 the original author or authors., +public abstract class AbstractMappingContentNegotiationStrategy extends MappingMediaTypeFileExtensionResolver, +, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, +public class ContentNegotiationManager implements ContentNegotiationStrategy, MediaTypeFileExtensionResolver {, +	private static final List<MediaType> MEDIA_TYPE_ALL = Collections.<MediaType>singletonList(MediaType.ALL);, +	private final List<ContentNegotiationStrategy> strategies = new ArrayList<ContentNegotiationStrategy>();, +	private final Set<MediaTypeFileExtensionResolver> resolvers = new LinkedHashSet<MediaTypeFileExtensionResolver>();, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, + * Copyright 2002-2016 the original author or authors., +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationStrategy.java, + * Copyright 2002-2016 the original author or authors., +	 * @return the requested media types or an empty list (never {@code null}), +++ b/spring-web/src/main/java/org/springframework/web/accept/FixedContentNegotiationStrategy.java, +	private static final Log logger = LogFactory.getLog(FixedContentNegotiationStrategy.class);, +			logger.debug("Requested media types: " + this.contentType);, +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, + * Copyright 2002-2016 the original author or authors., +public abstract class AbstractMappingContentNegotiationStrategy extends MappingMediaTypeFileExtensionResolver, +, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, +public class ContentNegotiationManager implements ContentNegotiationStrategy, MediaTypeFileExtensionResolver {, +	private static final List<MediaType> MEDIA_TYPE_ALL = Collections.<MediaType>singletonList(MediaType.ALL);, +	private final List<ContentNegotiationStrategy> strategies = new ArrayList<ContentNegotiationStrategy>();, +	private final Set<MediaTypeFileExtensionResolver> resolvers = new LinkedHashSet<MediaTypeFileExtensionResolver>();, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, + * Copyright 2002-2016 the original author or authors., +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationStrategy.java, + * Copyright 2002-2016 the original author or authors., +	 * @return the requested media types or an empty list (never {@code null}), +++ b/spring-web/src/main/java/org/springframework/web/accept/FixedContentNegotiationStrategy.java, +	private static final Log logger = LogFactory.getLog(FixedContentNegotiationStrategy.class);, +			logger.debug("Requested media types: " + this.contentType);, +++ b/spring-web/src/main/java/org/springframework/web/accept/HeaderContentNegotiationStrategy.java, + * Copyright 2002-2016 the original author or authors., +	 * @throws HttpMediaTypeNotAcceptableException if the 'Accept' header cannot be parsed, +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, + * Copyright 2002-2016 the original author or authors., +public abstract class AbstractMappingContentNegotiationStrategy extends MappingMediaTypeFileExtensionResolver, +, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, +public class ContentNegotiationManager implements ContentNegotiationStrategy, MediaTypeFileExtensionResolver {, +	private static final List<MediaType> MEDIA_TYPE_ALL = Collections.<MediaType>singletonList(MediaType.ALL);, +	private final List<ContentNegotiationStrategy> strategies = new ArrayList<ContentNegotiationStrategy>();, +	private final Set<MediaTypeFileExtensionResolver> resolvers = new LinkedHashSet<MediaTypeFileExtensionResolver>();, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, + * Copyright 2002-2016 the original author or authors., +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationStrategy.java, + * Copyright 2002-2016 the original author or authors., +	 * @return the requested media types or an empty list (never {@code null}), +++ b/spring-web/src/main/java/org/springframework/web/accept/FixedContentNegotiationStrategy.java, +	private static final Log logger = LogFactory.getLog(FixedContentNegotiationStrategy.class);, +			logger.debug("Requested media types: " + this.contentType);, +++ b/spring-web/src/main/java/org/springframework/web/accept/HeaderContentNegotiationStrategy.java, + * Copyright 2002-2016 the original author or authors., +	 * @throws HttpMediaTypeNotAcceptableException if the 'Accept' header cannot be parsed, +++ b/spring-web/src/main/java/org/springframework/web/accept/MappingMediaTypeFileExtensionResolver.java, + * Copyright 2002-2016 the original author or authors., + * Subsequently subclasses can use {@link #addMapping} to add more mappings., +++ b/spring-web/src/main/java/org/springframework/web/accept/AbstractMappingContentNegotiationStrategy.java, + * Copyright 2002-2016 the original author or authors.]