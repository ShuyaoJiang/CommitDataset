[+++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java, +import java.util.HashMap;, +import java.util.Map;, +import org.springframework.beans.BeansException;, +import org.springframework.util.PropertyPlaceholderHelper;, +import org.springframework.util.PropertyPlaceholderHelper.PlaceholderResolver;, +import org.springframework.util.StringValueResolver;, +	private Map<String, String> placeHolderValues = new HashMap<String, String>();, +, +	public StandaloneMockMvcBuilder setRemoveSemicolonContent(boolean removeSemicolonContent) {, +		return this;, +	/**, +	 * In a standalone setup there is no support for placeholder values embedded in, +	 * request mappings. This method allows manually provided placeholder values so they, +	 * can be resolved. Alternatively consider creating a test that initializes a, +	 * {@link WebApplicationContext}., +	 */, +	public StandaloneMockMvcBuilder addPlaceHolderValues(String name, String value) {, +		this.placeHolderValues.put(name, value);, +		return this;, +	}, +, +, +		StandaloneConfiguration config = new StandaloneConfiguration();, +		StaticRequestMappingHandlerMapping hm = config.getHandlerMapping(cxt);, +		hm.registerHandlers(controllers);, +		cxt.addBean("requestMappingHandlerMapping", hm);, +		RequestMappingHandlerAdapter handlerAdapter = config.requestMappingHandlerAdapter();, +		cxt.addBean("handlerExceptionResolver", config.handlerExceptionResolver());, +, +		public StaticRequestMappingHandlerMapping getHandlerMapping(StubWebApplicationContext cxt) {, +			handlerMapping.setServletContext(cxt.getServletContext());, +			handlerMapping.setApplicationContext(cxt);, +			handlerMapping.setEmbeddedValueResolver(new StaticStringValueResolver(placeHolderValues));, +	/** A static resolver placeholder for values embedded in request mappings */, +	private static class StaticStringValueResolver implements StringValueResolver {, +, +		private final PropertyPlaceholderHelper helper;, +, +		private final PlaceholderResolver resolver;, +, +, +		public StaticStringValueResolver(final Map<String, String> values) {, +			this.helper = new PropertyPlaceholderHelper("${", "}", ":", false);, +			this.resolver = new PlaceholderResolver() {, +				@Override, +				public String resolvePlaceholder(String placeholderName) {, +					return values.get(placeholderName);, +				}, +			};, +		}, +, +		@Override, +		public String resolveStringValue(String strVal) throws BeansException {, +			return this.helper.replacePlaceholders(strVal, this.resolver);, +		}, +	}, +, +++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/setup/StandaloneMockMvcBuilder.java, +import java.util.HashMap;, +import java.util.Map;, +import org.springframework.beans.BeansException;, +import org.springframework.util.PropertyPlaceholderHelper;, +import org.springframework.util.PropertyPlaceholderHelper.PlaceholderResolver;, +import org.springframework.util.StringValueResolver;, +	private Map<String, String> placeHolderValues = new HashMap<String, String>();, +, +	public StandaloneMockMvcBuilder setRemoveSemicolonContent(boolean removeSemicolonContent) {, +		return this;, +	/**, +	 * In a standalone setup there is no support for placeholder values embedded in, +	 * request mappings. This method allows manually provided placeholder values so they, +	 * can be resolved. Alternatively consider creating a test that initializes a, +	 * {@link WebApplicationContext}., +	 */, +	public StandaloneMockMvcBuilder addPlaceHolderValues(String name, String value) {, +		this.placeHolderValues.put(name, value);, +		return this;, +	}, +, +, +		StandaloneConfiguration config = new StandaloneConfiguration();, +		StaticRequestMappingHandlerMapping hm = config.getHandlerMapping(cxt);, +		hm.registerHandlers(controllers);, +		cxt.addBean("requestMappingHandlerMapping", hm);, +		RequestMappingHandlerAdapter handlerAdapter = config.requestMappingHandlerAdapter();, +		cxt.addBean("handlerExceptionResolver", config.handlerExceptionResolver());, +, +		public StaticRequestMappingHandlerMapping getHandlerMapping(StubWebApplicationContext cxt) {, +			handlerMapping.setServletContext(cxt.getServletContext());, +			handlerMapping.setApplicationContext(cxt);, +			handlerMapping.setEmbeddedValueResolver(new StaticStringValueResolver(placeHolderValues));, +	/** A static resolver placeholder for values embedded in request mappings */, +	private static class StaticStringValueResolver implements StringValueResolver {, +, +		private final PropertyPlaceholderHelper helper;, +, +		private final PlaceholderResolver resolver;, +, +]