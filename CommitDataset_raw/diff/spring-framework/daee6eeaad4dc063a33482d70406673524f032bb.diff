[+++ b/src/docs/asciidoc/data-access.adoc, +		TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException;, +argument is a `KeyHolder`, which contains the generated key on successful return from the, +update. There is not a standard single way to create an appropriate `PreparedStatement`, +(which explains why the method signature is the way it is). The following example works, +on Oracle but may not work on other platforms:, +, +			return this.jdbcTemplate.batchUpdate(, +					"update t_actor set first_name = ?, last_name = ? where id = ?",, +`SqlParameterSourceUtils.createBatch` convenience methods to create this array, passing, +in an array of bean-style objects (with getter methods corresponding to parameters), +and/or String-keyed Maps (containing the corresponding parameters as values)., +, +		public int[] batchUpdate(List<Actor> actors) {, +			return this.namedParameterJdbcTemplate.batchUpdate(, +					SqlParameterSourceUtils.createBatch(actors));, +						actor.getFirstName(), actor.getLastName(), actor.getId()};, +			return this.jdbcTemplate.batchUpdate(, +[NOTE], +====, +In such a scenario with automatic setting of values on an underlying `PreparedStatement`,, +the corresponding JDBC type for each value needs to be derived from the given Java type., +While this usually works well, there is a potential for issues, e.g. with Map-contained, +`null` values: Spring will by default call `ParameterMetaData.getParameterType` in such a, +case which may be expensive with your JDBC driver. Please make sure to use a recent driver, +version, and consider setting the "spring.jdbc.getParameterType.ignore" property to "true", +(as a JVM system property or in a `spring.properties` file in the root of your classpath), +if you encounter a performance issue, e.g. as reported on Oracle 12c (SPR-16139)., +, +Alternatively, simply consider specifying the corresponding JDBC types explicitly:, +either via a 'BatchPreparedStatementSetter' as shown above, or via an explicit type, +array given to a 'List<Object[]>' based call, or via 'registerSqlType' calls on a, +custom 'MapSqlParameterSource' instance, or via a 'BeanPropertySqlParameterSource', +which derives the SQL type from the Java-declared property type even for a null value., +====, +]