[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, + * Copyright 2002-2015 the original author or authors., +			try {, +			catch (Exception ex) {, +				AnnotationUtils.logIntrospectionFailure(element, ex);, +			}, +		}, +	private interface Processor<T> {, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, + * Copyright 2002-2015 the original author or authors., +			try {, +			catch (Exception ex) {, +				AnnotationUtils.logIntrospectionFailure(element, ex);, +			}, +		}, +	private interface Processor<T> {, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +				Class<?>[] clazzArray = (Class<?>[]) value;, +	/**, +	 * Log an introspection failure (in particular {@code TypeNotPresentExceptions}) -, +	 * before moving on, pretending there were no annotations on this specific element., +	 * @param element the element that we tried to introspect annotations on, +	 * @param ex the exception that we encountered, +	 */, +	static void logIntrospectionFailure(AnnotatedElement element, Exception ex) {, +		if (element instanceof Class && Annotation.class.isAssignableFrom((Class<?>) element)) {, +			// Meta-annotation lookup on an annotation type, +			if (logger.isDebugEnabled()) {, +				logger.debug("Failed to introspect meta-annotations on [" + element + "]: " + ex);, +			}, +		}, +		else {, +			// Direct annotation lookup on regular Class, Method, Field, +				logger.info("Failed to introspect annotations on [" + element + "]: " + ex);, +			}, +, +		private void process(AnnotatedElement element) {, +			if (this.visited.add(element)) {, +				try {, +					for (Annotation ann : element.getAnnotations()) {, +				catch (Exception ex) {, +					logIntrospectionFailure(element, ex);, +				}, +			}]