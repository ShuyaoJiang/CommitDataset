[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultServerHttpRequestBuilder.java, +import java.net.URISyntaxException;, +import org.springframework.util.StringUtils;, +		return new DefaultServerHttpRequest(getUriToUse(), this.contextPath, this.httpHeaders,, +, +		StringBuilder uriBuilder = new StringBuilder();, +		if (this.uri.getScheme() != null) {, +			uriBuilder.append(this.uri.getScheme()).append(':');, +		if (this.uri.getUserInfo() != null || this.uri.getHost() != null) {, +			uriBuilder.append("//");, +			if (this.uri.getUserInfo() != null) {, +				uriBuilder.append(this.uri.getUserInfo()).append('@');, +			}, +			if (this.uri.getHost() != null) {, +				uriBuilder.append(this.uri.getHost());, +			}, +			if (this.uri.getPort() != -1) {, +				uriBuilder.append(':').append(this.uri.getPort());, +			}, +		}, +		if (StringUtils.hasLength(this.uriPath)) {, +			uriBuilder.append(this.uriPath);, +		}, +		if (this.uri.getRawQuery() != null) {, +			uriBuilder.append('?').append(this.uri.getRawQuery());, +		}, +		if (this.uri.getFragment() != null) {, +			uriBuilder.append('#').append(this.uri.getFragment());, +		}, +		try {, +			return new URI(uriBuilder.toString());, +		}, +		catch (URISyntaxException ex) {, +			throw new IllegalStateException("Invalid URI path: \"" + this.uriPath + "\"", ex);, +		}, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/DefaultServerHttpRequestBuilder.java, +import java.net.URISyntaxException;, +import org.springframework.util.StringUtils;, +		return new DefaultServerHttpRequest(getUriToUse(), this.contextPath, this.httpHeaders,, +, +		StringBuilder uriBuilder = new StringBuilder();, +		if (this.uri.getScheme() != null) {, +			uriBuilder.append(this.uri.getScheme()).append(':');, +		if (this.uri.getUserInfo() != null || this.uri.getHost() != null) {, +			uriBuilder.append("//");, +			if (this.uri.getUserInfo() != null) {, +				uriBuilder.append(this.uri.getUserInfo()).append('@');, +			}, +			if (this.uri.getHost() != null) {, +				uriBuilder.append(this.uri.getHost());, +			}, +			if (this.uri.getPort() != -1) {, +				uriBuilder.append(':').append(this.uri.getPort());, +			}, +		}, +		if (StringUtils.hasLength(this.uriPath)) {, +			uriBuilder.append(this.uriPath);, +		}, +		if (this.uri.getRawQuery() != null) {, +			uriBuilder.append('?').append(this.uri.getRawQuery());, +		}, +		if (this.uri.getFragment() != null) {, +			uriBuilder.append('#').append(this.uri.getFragment());, +		}, +		try {, +			return new URI(uriBuilder.toString());, +		}, +		catch (URISyntaxException ex) {, +			throw new IllegalStateException("Invalid URI path: \"" + this.uriPath + "\"", ex);, +		}, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +							queryBuilder.append('=').append(value.toString());, +		return new HierarchicalUriComponents(, +				schemeTo, fragmentTo, userInfoTo, hostTo, this.port, pathTo, paramsTo, true, false);, +		return new HierarchicalUriComponents(, +				schemeTo, fragmentTo, userInfoTo, hostTo, portTo, pathTo, paramsTo, false, false);, +			uriBuilder.append(getScheme()).append(':');, +				uriBuilder.append(this.userInfo).append('@');, +				uriBuilder.append(this.host);, +				uriBuilder.append(':').append(this.port);, +			uriBuilder.append('?').append(query);, +			uriBuilder.append('#').append(getFragment());, +				return new URI(toUriString());]