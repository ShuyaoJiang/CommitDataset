[+++ b/spring-aop/src/main/java/org/springframework/aop/target/AbstractPrototypeBasedTargetSource.java, + * Copyright 2002-2018 the original author or authors., +		if (logger.isDebugEnabled()) {, +			logger.debug("Destroying instance of bean '" + getTargetBeanName() + "'");, +++ b/spring-aop/src/main/java/org/springframework/aop/target/AbstractPrototypeBasedTargetSource.java, + * Copyright 2002-2018 the original author or authors., +		if (logger.isDebugEnabled()) {, +			logger.debug("Destroying instance of bean '" + getTargetBeanName() + "'");, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/parsing/FailFastProblemReporter.java, + * Copyright 2002-2018 the original author or authors., +		logger.warn(problem, problem.getRootCause());, +++ b/spring-aop/src/main/java/org/springframework/aop/target/AbstractPrototypeBasedTargetSource.java, + * Copyright 2002-2018 the original author or authors., +		if (logger.isDebugEnabled()) {, +			logger.debug("Destroying instance of bean '" + getTargetBeanName() + "'");, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/parsing/FailFastProblemReporter.java, + * Copyright 2002-2018 the original author or authors., +		logger.warn(problem, problem.getRootCause());, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +					if (logger.isDebugEnabled()) {, +						logger.debug("Ignoring bean class loading failure for bean '" + beanName + "'", ex);, +					if (logger.isDebugEnabled()) {, +						logger.debug("Ignoring unresolvable metadata in bean definition '" + beanName + "'", ex);, +						if (logger.isDebugEnabled()) {, +							logger.debug("Ignoring match to currently created bean '" + exBeanName + "': " +, +			if (logger.isTraceEnabled()) {, +				logger.trace("No bean named '" + beanName + "' found in " + this);, +		if (logger.isDebugEnabled()) {, +			logger.debug("Pre-instantiating singletons in " + this);, +				if (logger.isWarnEnabled()) {, +					logger.warn("Overriding user-defined bean definition for bean '" + beanName +, +				if (logger.isInfoEnabled()) {, +					logger.info("Overriding bean definition for bean '" + beanName +, +				if (logger.isDebugEnabled()) {, +					logger.debug("Overriding bean definition for bean '" + beanName +, +			if (logger.isTraceEnabled()) {, +				logger.trace("No bean named '" + beanName + "' found in " + this);, +++ b/spring-aop/src/main/java/org/springframework/aop/target/AbstractPrototypeBasedTargetSource.java, + * Copyright 2002-2018 the original author or authors., +		if (logger.isDebugEnabled()) {, +			logger.debug("Destroying instance of bean '" + getTargetBeanName() + "'");, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/parsing/FailFastProblemReporter.java, + * Copyright 2002-2018 the original author or authors., +		logger.warn(problem, problem.getRootCause());, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +					if (logger.isDebugEnabled()) {, +						logger.debug("Ignoring bean class loading failure for bean '" + beanName + "'", ex);, +					if (logger.isDebugEnabled()) {, +						logger.debug("Ignoring unresolvable metadata in bean definition '" + beanName + "'", ex);, +						if (logger.isDebugEnabled()) {, +							logger.debug("Ignoring match to currently created bean '" + exBeanName + "': " +, +			if (logger.isTraceEnabled()) {, +				logger.trace("No bean named '" + beanName + "' found in " + this);, +		if (logger.isDebugEnabled()) {, +			logger.debug("Pre-instantiating singletons in " + this);, +				if (logger.isWarnEnabled()) {, +					logger.warn("Overriding user-defined bean definition for bean '" + beanName +, +				if (logger.isInfoEnabled()) {, +					logger.info("Overriding bean definition for bean '" + beanName +, +				if (logger.isDebugEnabled()) {, +					logger.debug("Overriding bean definition for bean '" + beanName +, +			if (logger.isTraceEnabled()) {, +				logger.trace("No bean named '" + beanName + "' found in " + this);, +++ b/spring-context/src/main/java/org/springframework/remoting/support/SimpleHttpServerFactoryBean.java, + * Copyright 2002-2018 the original author or authors., +		if (logger.isInfoEnabled()) {, +			logger.info("Starting HttpServer at address " + address);, +++ b/spring-aop/src/main/java/org/springframework/aop/target/AbstractPrototypeBasedTargetSource.java, + * Copyright 2002-2018 the original author or authors., +		if (logger.isDebugEnabled()) {, +			logger.debug("Destroying instance of bean '" + getTargetBeanName() + "'");, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/parsing/FailFastProblemReporter.java, + * Copyright 2002-2018 the original author or authors., +		logger.warn(problem, problem.getRootCause());, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +					if (logger.isDebugEnabled()) {, +						logger.debug("Ignoring bean class loading failure for bean '" + beanName + "'", ex);, +					if (logger.isDebugEnabled()) {, +						logger.debug("Ignoring unresolvable metadata in bean definition '" + beanName + "'", ex);, +						if (logger.isDebugEnabled()) {, +							logger.debug("Ignoring match to currently created bean '" + exBeanName + "': " +, +			if (logger.isTraceEnabled()) {, +				logger.trace("No bean named '" + beanName + "' found in " + this);, +		if (logger.isDebugEnabled()) {, +			logger.debug("Pre-instantiating singletons in " + this);, +				if (logger.isWarnEnabled()) {, +					logger.warn("Overriding user-defined bean definition for bean '" + beanName +, +				if (logger.isInfoEnabled()) {, +					logger.info("Overriding bean definition for bean '" + beanName +, +				if (logger.isDebugEnabled()) {, +					logger.debug("Overriding bean definition for bean '" + beanName +, +			if (logger.isTraceEnabled()) {, +				logger.trace("No bean named '" + beanName + "' found in " + this);, +++ b/spring-context/src/main/java/org/springframework/remoting/support/SimpleHttpServerFactoryBean.java, + * Copyright 2002-2018 the original author or authors., +		if (logger.isInfoEnabled()) {, +			logger.info("Starting HttpServer at address " + address);, +++ b/spring-core/src/main/java/org/springframework/core/SimpleAliasRegistry.java, +					if (logger.isInfoEnabled()) {, +++ b/spring-aop/src/main/java/org/springframework/aop/target/AbstractPrototypeBasedTargetSource.java]