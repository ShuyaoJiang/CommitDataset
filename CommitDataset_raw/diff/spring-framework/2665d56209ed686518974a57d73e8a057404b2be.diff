[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java, + * Copyright 2002-2014 the original author or authors., +		return this.singletonObjects.containsKey(beanName);, +		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {, +		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java, + * Copyright 2002-2014 the original author or authors., +		return this.singletonObjects.containsKey(beanName);, +		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {, +		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {, +++ b/spring-context/src/main/java/org/springframework/format/AnnotationFormatterFactory.java, +, + * A factory that creates formatters to format values of fields annotated with a particular, + * {@link Annotation}., +	 * Get the Printer to print the value of a field of {@code fieldType} annotated with, +	 * {@code annotation}., +	 * <p>If the type T the printer accepts is not assignable to {@code fieldType}, a, +	 * coercion from {@code fieldType} to T will be attempted before the Printer is invoked., +	 * Get the Parser to parse a submitted value for a field of {@code fieldType}, +	 * annotated with {@code annotation}., +	 * <p>If the object the parser returns is not assignable to {@code fieldType},, +	 * a coercion to {@code fieldType} will be attempted before the field is set., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java, + * Copyright 2002-2014 the original author or authors., +		return this.singletonObjects.containsKey(beanName);, +		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {, +		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {, +++ b/spring-context/src/main/java/org/springframework/format/AnnotationFormatterFactory.java, +, + * A factory that creates formatters to format values of fields annotated with a particular, + * {@link Annotation}., +	 * Get the Printer to print the value of a field of {@code fieldType} annotated with, +	 * {@code annotation}., +	 * <p>If the type T the printer accepts is not assignable to {@code fieldType}, a, +	 * coercion from {@code fieldType} to T will be attempted before the Printer is invoked., +	 * Get the Parser to parse a submitted value for a field of {@code fieldType}, +	 * annotated with {@code annotation}., +	 * <p>If the object the parser returns is not assignable to {@code fieldType},, +	 * a coercion to {@code fieldType} will be attempted before the field is set., +++ b/spring-context/src/main/java/org/springframework/format/support/FormattingConversionService.java, + * Copyright 2002-2014 the original author or authors., +		Class<? extends Annotation> annotationType = (Class<? extends Annotation>), +		for (Class<?> fieldType : fieldTypes) {, +		private final Class<?> fieldType;, +		private final TypeDescriptor printerObjectType;, +		private final Printer printer;, +		private final ConversionService conversionService;, +		private final Class<?> fieldType;, +		private final Parser<?> parser;, +		private final ConversionService conversionService;, +		private final Class<? extends Annotation> annotationType;, +		private final AnnotationFormatterFactory annotationFormatterFactory;, +		private final Class<?> fieldType;, +			return Collections.singleton(new ConvertiblePair(this.fieldType, String.class));, +			return sourceType.hasAnnotation(this.annotationType);, +			Annotation ann = sourceType.getAnnotation(this.annotationType);, +			if (ann == null) {, +				throw new IllegalStateException(, +						"Expected [" + this.annotationType.getName() + "] to be present on " + sourceType);, +			}, +			AnnotationConverterKey converterKey = new AnnotationConverterKey(ann, sourceType.getObjectType());, +				Printer<?> printer = this.annotationFormatterFactory.getPrinter(, +				converter = new PrinterConverter(this.fieldType, printer, FormattingConversionService.this);, +			return "@" + this.annotationType.getName() + " " + this.fieldType.getName() + " -> " +, +					String.class.getName() + ": " + this.annotationFormatterFactory;, +		private final Class<? extends Annotation> annotationType;, +		private final AnnotationFormatterFactory annotationFormatterFactory;, +		private final Class<?> fieldType;, +			return targetType.hasAnnotation(this.annotationType);, +			Annotation ann = targetType.getAnnotation(this.annotationType);, +			if (ann == null) {, +				throw new IllegalStateException(, +						"Expected [" + this.annotationType.getName() + "] to be present on " + targetType);, +			}, +			AnnotationConverterKey converterKey = new AnnotationConverterKey(ann, targetType.getObjectType());, +				Parser<?> parser = this.annotationFormatterFactory.getParser(, +				converter = new ParserConverter(this.fieldType, parser, FormattingConversionService.this);, +			return String.class.getName() + " -> @" + this.annotationType.getName() + " " +, +					this.fieldType.getName() + ": " + this.annotationFormatterFactory;, +			return this.annotation;, +			return this.fieldType;, +		public boolean equals(Object other) {, +			if (this == other) {, +				return true;, +			}, +			if (!(other instanceof AnnotationConverterKey)) {, +			AnnotationConverterKey otherKey = (AnnotationConverterKey) other;, +			return (this.annotation.equals(otherKey.annotation) && this.fieldType.equals(otherKey.fieldType));, +			return (this.annotation.hashCode() + 29 * this.fieldType.hashCode());, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java, + * Copyright 2002-2014 the original author or authors., +		return this.singletonObjects.containsKey(beanName);, +		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.add(beanName)) {, +		if (!this.inCreationCheckExclusions.contains(beanName) && !this.singletonsCurrentlyInCreation.remove(beanName)) {, +++ b/spring-context/src/main/java/org/springframework/format/AnnotationFormatterFactory.java, +, + * A factory that creates formatters to format values of fields annotated with a particular, + * {@link Annotation}., +	 * Get the Printer to print the value of a field of {@code fieldType} annotated with, +	 * {@code annotation}.]