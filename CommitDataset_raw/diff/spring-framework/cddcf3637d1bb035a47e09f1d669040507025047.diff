[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java, + * Copyright 2002-2015 the original author or authors., + * Factory used to create a {@link CallMetaDataProvider} implementation, + * based on the type of databse being used., +, +	private static final Log logger = LogFactory.getLog(CallMetaDataProviderFactory.class);, +, +, +						provider.initializeWithProcedureColumnMetaData(databaseMetaData,, +								context.getCatalogName(), context.getSchemaName(), context.getProcedureName());, +			throw new DataAccessResourceFailureException("Error retrieving database metadata", ex);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java, + * Copyright 2002-2015 the original author or authors., + * Factory used to create a {@link CallMetaDataProvider} implementation, + * based on the type of databse being used., +, +	private static final Log logger = LogFactory.getLog(CallMetaDataProviderFactory.class);, +, +, +						provider.initializeWithProcedureColumnMetaData(databaseMetaData,, +								context.getCatalogName(), context.getSchemaName(), context.getProcedureName());, +			throw new DataAccessResourceFailureException("Error retrieving database metadata", ex);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.java, + * Copyright 2002-2015 the original author or authors., +	private List<TableParameterMetaData> tableParameterMetaData = new ArrayList<TableParameterMetaData>();, +		return this.tableParameterMetaData;, +					metaDataCatalogName, metaDataSchemaName, metaDataTableName, null);, +					// Override a DECIMAL data type for no-decimal numerics, +				TableParameterMetaData meta = new TableParameterMetaData(columnName, dataType, nullable);, +				this.tableParameterMetaData.add(meta);, +					logger.debug("Retrieved metadata: " + meta.getParameterName() +, +						" " + meta.getSqlType() + " " + meta.isNullable());, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java, + * Copyright 2002-2015 the original author or authors., + * Factory used to create a {@link CallMetaDataProvider} implementation, + * based on the type of databse being used., +, +	private static final Log logger = LogFactory.getLog(CallMetaDataProviderFactory.class);, +, +, +						provider.initializeWithProcedureColumnMetaData(databaseMetaData,, +								context.getCatalogName(), context.getSchemaName(), context.getProcedureName());, +			throw new DataAccessResourceFailureException("Error retrieving database metadata", ex);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.java, + * Copyright 2002-2015 the original author or authors., +	private List<TableParameterMetaData> tableParameterMetaData = new ArrayList<TableParameterMetaData>();, +		return this.tableParameterMetaData;, +					metaDataCatalogName, metaDataSchemaName, metaDataTableName, null);, +					// Override a DECIMAL data type for no-decimal numerics, +				TableParameterMetaData meta = new TableParameterMetaData(columnName, dataType, nullable);, +				this.tableParameterMetaData.add(meta);, +					logger.debug("Retrieved metadata: " + meta.getParameterName() +, +						" " + meta.getSqlType() + " " + meta.isNullable());, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/TableMetaDataContext.java, + * Copyright 2002-2015 the original author or authors., +		this.metaDataProvider =, +				TableMetaDataProviderFactory.createMetaDataProvider(dataSource, this, this.nativeJdbcExtractor);, +		if (getSchemaName() != null) {, +			insertStatement.append(getSchemaName());, +		insertStatement.append(getTableName());, +		for (String columnName : getTableColumns()) {, +						getTableName() + "' so an empty insert statement is generated");, +						getTableName() + "' so an insert statement can't be generated");, +		int[] types = new int[getTableColumns().size()];, +		for (String column : getTableColumns()) {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataProviderFactory.java, + * Copyright 2002-2015 the original author or authors., + * Factory used to create a {@link CallMetaDataProvider} implementation, + * based on the type of databse being used., +, +	private static final Log logger = LogFactory.getLog(CallMetaDataProviderFactory.class);, +, +, +						provider.initializeWithProcedureColumnMetaData(databaseMetaData,, +								context.getCatalogName(), context.getSchemaName(), context.getProcedureName());, +			throw new DataAccessResourceFailureException("Error retrieving database metadata", ex);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.java, + * Copyright 2002-2015 the original author or authors., +	private List<TableParameterMetaData> tableParameterMetaData = new ArrayList<TableParameterMetaData>();, +		return this.tableParameterMetaData;, +					metaDataCatalogName, metaDataSchemaName, metaDataTableName, null);, +					// Override a DECIMAL data type for no-decimal numerics, +				TableParameterMetaData meta = new TableParameterMetaData(columnName, dataType, nullable);, +				this.tableParameterMetaData.add(meta);, +					logger.debug("Retrieved metadata: " + meta.getParameterName() +, +						" " + meta.getSqlType() + " " + meta.isNullable());, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/TableMetaDataContext.java, + * Copyright 2002-2015 the original author or authors., +		this.metaDataProvider =, +				TableMetaDataProviderFactory.createMetaDataProvider(dataSource, this, this.nativeJdbcExtractor);, +		if (getSchemaName() != null) {, +			insertStatement.append(getSchemaName());, +		insertStatement.append(getTableName());, +		for (String columnName : getTableColumns()) {, +						getTableName() + "' so an empty insert statement is generated");, +						getTableName() + "' so an insert statement can't be generated");, +		int[] types = new int[getTableColumns().size()];, +		for (String column : getTableColumns()) {, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/TableMetaDataProviderFactory.java, + * Copyright 2002-2015 the original author or authors.]