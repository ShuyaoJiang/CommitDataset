[+++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java, + * Copyright 2002-2015 the original author or authors., +		// Try Hibernate Validator 5.2's externalClassLoader(ClassLoader) method, +		if (this.applicationContext != null) {, +			try {, +				Method eclMethod = configuration.getClass().getMethod("externalClassLoader", ClassLoader.class);, +				ReflectionUtils.invokeMethod(eclMethod, configuration, this.applicationContext.getClassLoader());, +			}, +			catch (NoSuchMethodException ex) {, +				// Ignore - no Hibernate Validator 5.2+ or similar provider, +			}, +		}, +, +++ b/spring-context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java, + * Copyright 2002-2015 the original author or authors., +		// Try Hibernate Validator 5.2's externalClassLoader(ClassLoader) method, +		if (this.applicationContext != null) {, +			try {, +				Method eclMethod = configuration.getClass().getMethod("externalClassLoader", ClassLoader.class);, +				ReflectionUtils.invokeMethod(eclMethod, configuration, this.applicationContext.getClassLoader());, +			}, +			catch (NoSuchMethodException ex) {, +				// Ignore - no Hibernate Validator 5.2+ or similar provider, +			}, +		}, +, +++ b/spring-orm-hibernate4/src/test/java/org/springframework/validation/hibernatevalidator5/ValidatorFactoryTests.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.context.ApplicationContext;, +import org.springframework.context.annotation.AnnotationConfigApplicationContext;, +import org.springframework.core.env.Environment;, +, +, +, +, +, +	public void testSpringValidationWithAutowiredValidator() throws Exception {, +		ApplicationContext ctx = new AnnotationConfigApplicationContext(LocalValidatorFactoryBean.class);, +		LocalValidatorFactoryBean validator = ctx.getBean(LocalValidatorFactoryBean.class);, +, +		ValidPerson person = new ValidPerson();, +		person.expectsAutowiredValidator = true;, +		person.setName("Juergen");, +		person.getAddress().setStreet("Juergen's Street");, +		BeanPropertyBindingResult result = new BeanPropertyBindingResult(person, "person");, +		validator.validate(person, result);, +		assertEquals(1, result.getErrorCount());, +		ObjectError globalError = result.getGlobalError();, +		List<String> errorCodes = Arrays.asList(globalError.getCodes());, +		assertEquals(2, errorCodes.size());, +		assertTrue(errorCodes.contains("NameAddressValid.person"));, +		assertTrue(errorCodes.contains("NameAddressValid"));, +	}, +, +	@Test, +, +, +		public boolean expectsAutowiredValidator = false;, +, +		@Autowired, +		private Environment environment;, +, +			if (value.expectsAutowiredValidator) {, +				assertNotNull(this.environment);, +			}]