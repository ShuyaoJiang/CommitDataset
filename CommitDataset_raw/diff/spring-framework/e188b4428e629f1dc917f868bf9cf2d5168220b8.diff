[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompClientSupport.java, + * Copyright 2002-2016 the original author or authors., + * <p>Subclasses can connect over WebSocket or TCP using any library. When creating, + * a new connection, a subclass can create an instance of @link DefaultStompSession}, + * which extends {@link org.springframework.messaging.tcp.TcpConnectionHandler}, + * whose lifecycle methods the subclass must then invoke., + * <p>In effect, {@code TcpConnectionHandler} and {@code TcpConnection} are the, + * contracts that any subclass must adapt to while using {@link StompEncoder}, + * and {@link StompDecoder} to encode and decode STOMP messages., +		Assert.notNull(messageConverter, "MessageConverter must not be null");, +	 * <p>By default this is set to "10000,10000" but subclasses may override, +		if (heartbeat == null || heartbeat.length != 2 || heartbeat[0] < 0 || heartbeat[1] < 0) {, +			throw new IllegalArgumentException("Invalid heart-beat: " + Arrays.toString(heartbeat));, +		}, +	 * Return the configured default heart-beat value (never {@code null})., +	 * Determine whether heartbeats are enabled., +	 * <p>Returns {@code false} if {@link #setDefaultHeartbeat defaultHeartbeat}, +	 * is set to "0,0", and {@code true} otherwise., +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompClientSupport.java, + * Copyright 2002-2016 the original author or authors., + * <p>Subclasses can connect over WebSocket or TCP using any library. When creating, + * a new connection, a subclass can create an instance of @link DefaultStompSession}, + * which extends {@link org.springframework.messaging.tcp.TcpConnectionHandler}, + * whose lifecycle methods the subclass must then invoke., + * <p>In effect, {@code TcpConnectionHandler} and {@code TcpConnection} are the, + * contracts that any subclass must adapt to while using {@link StompEncoder}, + * and {@link StompDecoder} to encode and decode STOMP messages., +		Assert.notNull(messageConverter, "MessageConverter must not be null");, +	 * <p>By default this is set to "10000,10000" but subclasses may override, +		if (heartbeat == null || heartbeat.length != 2 || heartbeat[0] < 0 || heartbeat[1] < 0) {, +			throw new IllegalArgumentException("Invalid heart-beat: " + Arrays.toString(heartbeat));, +		}, +	 * Return the configured default heart-beat value (never {@code null})., +	 * Determine whether heartbeats are enabled., +	 * <p>Returns {@code false} if {@link #setDefaultHeartbeat defaultHeartbeat}, +	 * is set to "0,0", and {@code true} otherwise., +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompDecoder.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompClientSupport.java, + * Copyright 2002-2016 the original author or authors., + * <p>Subclasses can connect over WebSocket or TCP using any library. When creating, + * a new connection, a subclass can create an instance of @link DefaultStompSession}, + * which extends {@link org.springframework.messaging.tcp.TcpConnectionHandler}, + * whose lifecycle methods the subclass must then invoke., + * <p>In effect, {@code TcpConnectionHandler} and {@code TcpConnection} are the, + * contracts that any subclass must adapt to while using {@link StompEncoder}, + * and {@link StompDecoder} to encode and decode STOMP messages., +		Assert.notNull(messageConverter, "MessageConverter must not be null");, +	 * <p>By default this is set to "10000,10000" but subclasses may override, +		if (heartbeat == null || heartbeat.length != 2 || heartbeat[0] < 0 || heartbeat[1] < 0) {, +			throw new IllegalArgumentException("Invalid heart-beat: " + Arrays.toString(heartbeat));, +		}, +	 * Return the configured default heart-beat value (never {@code null})., +	 * Determine whether heartbeats are enabled., +	 * <p>Returns {@code false} if {@link #setDefaultHeartbeat defaultHeartbeat}, +	 * is set to "0,0", and {@code true} otherwise., +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompDecoder.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompEncoder.java, +import java.util.Collections;, +	private static final Log logger = LogFactory.getLog(StompEncoder.class);, +, +	private void writeHeaders(StompCommand command, Map<String, Object> headers, byte[] payload,, +			DataOutputStream output) throws IOException {, +				values = Collections.singletonList(StompHeaderAccessor.getPasscode(headers));]