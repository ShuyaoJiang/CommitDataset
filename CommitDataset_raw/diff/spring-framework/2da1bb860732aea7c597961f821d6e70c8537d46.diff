[+++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binding.java, +	 */, +	String getRenderValue();, +, +	/**, +	 * The bound model value., +	 * The bound model value type., +	 */, +	Class<?> getValueType();	, +	, +	/**, +	 * If {@link BindingStatus#INVALID_SOURCE_VALUE}, returns the invalid source value., +	 * Returns null otherwise., +	 * @return the invalid source value, +	 */, +	Object getInvalidSourceValue();, +	, +	/**, +	 * For accessing the raw bound model object., +	 * @author Keith Donald, +	public interface Model {, +		, +		/**, +		 * The model value., +		 */, +		Object getValue();, +		, +		/**, +		 * The model value type., +		 */, +		Class<?> getValueType();		, +, +		/**, +		 * Set the model value., +		 */, +		void setValue(Object value);, +	}, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/Binding.java, +	 */, +	String getRenderValue();, +, +	/**, +	 * The bound model value., +	 * The bound model value type., +	 */, +	Class<?> getValueType();	, +	, +	/**, +	 * If {@link BindingStatus#INVALID_SOURCE_VALUE}, returns the invalid source value., +	 * Returns null otherwise., +	 * @return the invalid source value, +	 */, +	Object getInvalidSourceValue();, +	, +	/**, +	 * For accessing the raw bound model object., +	 * @author Keith Donald, +	public interface Model {, +		, +		/**, +		 * The model value., +		 */, +		Object getValue();, +		, +		/**, +		 * The model value type., +		 */, +		Class<?> getValueType();		, +, +		/**, +		 * Set the model value., +		 */, +		void setValue(Object value);, +	}, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/DefaultFormatter.java, +import java.lang.reflect.Array;, +import java.util.Collection;, +import java.util.Iterator;, +@SuppressWarnings("unchecked"), +class DefaultFormatter implements Formatter {, +	public static final Formatter INSTANCE = new DefaultFormatter();, +, +	public static final Formatter COLLECTION_FORMATTER = new Formatter() {, +		public String format(Object object, Locale locale) {, +			if (object == null) {, +				return "";, +			} else {, +				StringBuffer buffer = new StringBuffer();, +				if (object.getClass().isArray()) {, +					int length = Array.getLength(object);, +					for (int i = 0; i < length; i++) {, +						buffer.append(INSTANCE.format(Array.get(object, i), locale));, +						if (i < length - 1) {, +							buffer.append(",");, +						}, +					}, +				} else if (Collection.class.isAssignableFrom(object.getClass())) {, +					Collection c = (Collection) object;, +					for (Iterator it = c.iterator(); it.hasNext();) {, +						buffer.append(INSTANCE.format(it.next(), locale));]