[+++ b/spring-web-reactive/build.gradle, +	optional("javax.validation:validation-api:1.0.0.GA"), +++ b/spring-web-reactive/build.gradle, +	optional("javax.validation:validation-api:1.0.0.GA"), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +import org.springframework.beans.BeanUtils;, +import org.springframework.beans.factory.BeanInitializationException;, +import org.springframework.validation.Errors;, +import org.springframework.validation.Validator;, +		adapter.setValidator(mvcValidator());, +	/**, +	 * Return a global {@link Validator} instance for example for validating, +	 * {@code @RequestBody} method arguments., +	 * <p>Delegates to {@link #getValidator()} first. If that returns {@code null}, +	 * checks the classpath for the presence of a JSR-303 implementations, +	 * before creating a {@code OptionalValidatorFactoryBean}. If a JSR-303, +	 * implementation is not available, a "no-op" {@link Validator} is returned., +	 */, +	@Bean, +	public Validator mvcValidator() {, +		Validator validator = getValidator();, +		if (validator == null) {, +			if (ClassUtils.isPresent("javax.validation.Validator", getClass().getClassLoader())) {, +				Class<?> clazz;, +				try {, +					String name = "org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean";, +					clazz = ClassUtils.forName(name, classLoader);, +				}, +				catch (ClassNotFoundException ex) {, +					throw new BeanInitializationException("Could not find default validator class", ex);, +				}, +				catch (LinkageError ex) {, +					throw new BeanInitializationException("Could not load default validator class", ex);, +				}, +				validator = (Validator) BeanUtils.instantiate(clazz);, +			}, +			else {, +				validator = new NoOpValidator();, +			}, +		}, +		return validator;, +	}, +, +	/**, +	 * Override this method to provide a custom {@link Validator}., +	 */, +	protected Validator getValidator() {, +		return null;, +	}, +, +, +	private static final class NoOpValidator implements Validator {, +, +		@Override, +		public boolean supports(Class<?> clazz) {, +			return false;, +		}, +, +		@Override, +		public void validate(Object target, Errors errors) {, +		}, +	}, +, +++ b/spring-web-reactive/build.gradle, +	optional("javax.validation:validation-api:1.0.0.GA"), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +import org.springframework.beans.BeanUtils;, +import org.springframework.beans.factory.BeanInitializationException;, +import org.springframework.validation.Errors;, +import org.springframework.validation.Validator;, +		adapter.setValidator(mvcValidator());, +	/**, +	 * Return a global {@link Validator} instance for example for validating, +	 * {@code @RequestBody} method arguments., +	 * <p>Delegates to {@link #getValidator()} first. If that returns {@code null}, +	 * checks the classpath for the presence of a JSR-303 implementations, +	 * before creating a {@code OptionalValidatorFactoryBean}. If a JSR-303, +	 * implementation is not available, a "no-op" {@link Validator} is returned., +	 */, +	@Bean, +	public Validator mvcValidator() {, +		Validator validator = getValidator();, +		if (validator == null) {, +			if (ClassUtils.isPresent("javax.validation.Validator", getClass().getClassLoader())) {, +				Class<?> clazz;, +				try {, +					String name = "org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean";, +					clazz = ClassUtils.forName(name, classLoader);, +				}, +				catch (ClassNotFoundException ex) {, +					throw new BeanInitializationException("Could not find default validator class", ex);, +				}, +				catch (LinkageError ex) {, +					throw new BeanInitializationException("Could not load default validator class", ex);, +				}, +				validator = (Validator) BeanUtils.instantiate(clazz);, +			}, +			else {, +				validator = new NoOpValidator();, +			}]