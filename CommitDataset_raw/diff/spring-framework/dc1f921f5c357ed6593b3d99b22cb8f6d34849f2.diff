[+++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, + * <p>As of 4.2, there is a {@link org.springframework.core.annotation.SynthesizingMethodParameter}, + * subclass available which synthesizes annotations based on overridden annotation attributes., + * That subclass is being used for web and message endpoint processing, in particular., + *, +		return adaptAnnotationArray(getAnnotatedElement().getAnnotations());, +	public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType) {, +		return adaptAnnotation(getAnnotatedElement().getAnnotation(annotationType));, +				this.parameterAnnotations = adaptAnnotationArray(annotationArray[this.parameterIndex]);, +	/**, +	 * A template method to post-process a given annotation instance before, +	 * returning it to the caller., +	 * <p>The default implementation simply returns the given annotation as-is., +	 * @param annotation the annotation about to be returned, +	 * @return the post-processed annotation (or simply the original one), +	 * @since 4.2, +	 */, +	protected <A extends Annotation> A adaptAnnotation(A annotation) {, +		return annotation;, +	}, +, +	/**, +	 * A template method to post-process a given annotation array before, +	 * returning it to the caller., +	 * <p>The default implementation simply returns the given annotation array as-is., +	 * @param annotations the annotation array about to be returned, +	 * @return the post-processed annotation array (or simply the original one), +	 * @since 4.2, +	 */, +	protected Annotation[] adaptAnnotationArray(Annotation[] annotations) {, +		return annotations;, +	}, +, +, +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, + * <p>As of 4.2, there is a {@link org.springframework.core.annotation.SynthesizingMethodParameter}, + * subclass available which synthesizes annotations based on overridden annotation attributes., + * That subclass is being used for web and message endpoint processing, in particular., + *, +		return adaptAnnotationArray(getAnnotatedElement().getAnnotations());, +	public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType) {, +		return adaptAnnotation(getAnnotatedElement().getAnnotation(annotationType));, +				this.parameterAnnotations = adaptAnnotationArray(annotationArray[this.parameterIndex]);, +	/**, +	 * A template method to post-process a given annotation instance before, +	 * returning it to the caller., +	 * <p>The default implementation simply returns the given annotation as-is., +	 * @param annotation the annotation about to be returned, +	 * @return the post-processed annotation (or simply the original one), +	 * @since 4.2, +	 */, +	protected <A extends Annotation> A adaptAnnotation(A annotation) {, +		return annotation;, +	}, +, +	/**, +	 * A template method to post-process a given annotation array before, +	 * returning it to the caller., +	 * <p>The default implementation simply returns the given annotation array as-is., +	 * @param annotations the annotation array about to be returned, +	 * @return the post-processed annotation array (or simply the original one), +	 * @since 4.2, +	 */, +	protected Annotation[] adaptAnnotationArray(Annotation[] annotations) {, +		return annotations;, +	}, +, +, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +		return forMethodParameter(new MethodParameter(method, -1));, +		MethodParameter methodParameter = new MethodParameter(method, -1);, +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, + * <p>As of 4.2, there is a {@link org.springframework.core.annotation.SynthesizingMethodParameter}, + * subclass available which synthesizes annotations based on overridden annotation attributes., + * That subclass is being used for web and message endpoint processing, in particular., + *, +		return adaptAnnotationArray(getAnnotatedElement().getAnnotations());, +	public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType) {, +		return adaptAnnotation(getAnnotatedElement().getAnnotation(annotationType));, +				this.parameterAnnotations = adaptAnnotationArray(annotationArray[this.parameterIndex]);, +	/**, +	 * A template method to post-process a given annotation instance before, +	 * returning it to the caller., +	 * <p>The default implementation simply returns the given annotation as-is., +	 * @param annotation the annotation about to be returned, +	 * @return the post-processed annotation (or simply the original one), +	 * @since 4.2, +	 */, +	protected <A extends Annotation> A adaptAnnotation(A annotation) {, +		return annotation;, +	}, +, +	/**, +	 * A template method to post-process a given annotation array before, +	 * returning it to the caller., +	 * <p>The default implementation simply returns the given annotation array as-is., +	 * @param annotations the annotation array about to be returned, +	 * @return the post-processed annotation array (or simply the original one), +	 * @since 4.2, +	 */]