[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, + * Copyright 2002-2009 the original author or authors., +import java.util.Collection;, +				else if (originalValue instanceof TypedStringValue && convertible &&, +						!(convertedValue instanceof Collection || ObjectUtils.isArray(convertedValue))) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, + * Copyright 2002-2009 the original author or authors., +import java.util.Collection;, +				else if (originalValue instanceof TypedStringValue && convertible &&, +						!(convertedValue instanceof Collection || ObjectUtils.isArray(convertedValue))) {, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/xml/UtilNamespaceHandlerTests.java, +import java.util.Arrays;, +, +		TestBean bean2 = (TestBean) this.beanFactory.getBean("nestedCollectionsBean");, +		assertEquals(list, bean2.getSomeList());, +		assertEquals(set, bean2.getSomeSet());, +		assertEquals(map, bean2.getSomeMap());, +		assertFalse(list == bean2.getSomeList());, +		assertFalse(set == bean2.getSomeSet());, +		assertFalse(map == bean2.getSomeMap());, +	}, +, +	public void testNestedShortcutCollections() throws Exception {, +		TestBean bean = (TestBean) this.beanFactory.getBean("nestedShortcutCollections");, +, +		assertEquals(1, bean.getStringArray().length);, +		assertEquals("fooStr", bean.getStringArray()[0]);, +, +		List list = bean.getSomeList();, +		assertEquals(1, list.size());, +		assertEquals("foo", list.get(0));, +, +		Set set = bean.getSomeSet();, +		assertEquals(1, set.size());, +		assertTrue(set.contains("bar"));, +, +		TestBean bean2 = (TestBean) this.beanFactory.getBean("nestedShortcutCollections");, +		assertTrue(Arrays.equals(bean.getStringArray(), bean2.getStringArray()));, +		assertFalse(bean.getStringArray() == bean2.getStringArray());, +		assertEquals(list, bean2.getSomeList());, +		assertEquals(set, bean2.getSomeSet());, +		assertFalse(list == bean2.getSomeList());, +		assertFalse(set == bean2.getSomeSet());, +, +		TestBean bean2 = (TestBean) this.beanFactory.getBean("nestedCustomTagBean");, +		assertEquals(list, bean2.getSomeList());, +		assertEquals(set, bean2.getSomeSet());, +		assertEquals(map, bean2.getSomeMap());, +		assertFalse(list == bean2.getSomeList());, +		assertFalse(set == bean2.getSomeSet());, +		assertFalse(map == bean2.getSomeMap());, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, + * Copyright 2002-2009 the original author or authors., +import java.util.Collection;, +				else if (originalValue instanceof TypedStringValue && convertible &&, +						!(convertedValue instanceof Collection || ObjectUtils.isArray(convertedValue))) {, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/xml/UtilNamespaceHandlerTests.java, +import java.util.Arrays;, +, +		TestBean bean2 = (TestBean) this.beanFactory.getBean("nestedCollectionsBean");, +		assertEquals(list, bean2.getSomeList());, +		assertEquals(set, bean2.getSomeSet());, +		assertEquals(map, bean2.getSomeMap());, +		assertFalse(list == bean2.getSomeList());, +		assertFalse(set == bean2.getSomeSet());, +		assertFalse(map == bean2.getSomeMap());, +	}, +, +	public void testNestedShortcutCollections() throws Exception {, +		TestBean bean = (TestBean) this.beanFactory.getBean("nestedShortcutCollections");, +, +		assertEquals(1, bean.getStringArray().length);, +		assertEquals("fooStr", bean.getStringArray()[0]);, +, +		List list = bean.getSomeList();, +		assertEquals(1, list.size());, +		assertEquals("foo", list.get(0));, +, +		Set set = bean.getSomeSet();, +		assertEquals(1, set.size());, +		assertTrue(set.contains("bar"));, +, +		TestBean bean2 = (TestBean) this.beanFactory.getBean("nestedShortcutCollections");, +		assertTrue(Arrays.equals(bean.getStringArray(), bean2.getStringArray()));, +		assertFalse(bean.getStringArray() == bean2.getStringArray());, +		assertEquals(list, bean2.getSomeList());, +		assertEquals(set, bean2.getSomeSet());, +		assertFalse(list == bean2.getSomeList());, +		assertFalse(set == bean2.getSomeSet());, +, +		TestBean bean2 = (TestBean) this.beanFactory.getBean("nestedCustomTagBean");, +		assertEquals(list, bean2.getSomeList());, +		assertEquals(set, bean2.getSomeSet());, +		assertEquals(map, bean2.getSomeMap());, +		assertFalse(list == bean2.getSomeList());, +		assertFalse(set == bean2.getSomeSet());, +		assertFalse(map == bean2.getSomeMap());, +++ b/org.springframework.beans/src/test/resources/org/springframework/beans/factory/xml/testUtilNamespace.xml, +	<bean id="nestedCollectionsBean" class="test.beans.TestBean" scope="prototype">, +	<bean id="nestedShortcutCollections" class="test.beans.TestBean" scope="prototype">]