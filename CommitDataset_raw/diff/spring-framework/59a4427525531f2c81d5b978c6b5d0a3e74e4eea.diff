[+++ b/org.springframework.expression/.classpath, +	<classpathentry kind="var" path="IVY_CACHE/org.antlr/com.springsource.org.antlr/3.0.1/com.springsource.org.antlr-3.0.1.jar" sourcepath="/IVY_CACHE/org.antlr/com.springsource.org.antlr/3.0.1/com.springsource.org.antlr-sources-3.0.1.jar"/>, +++ b/org.springframework.expression/.classpath, +	<classpathentry kind="var" path="IVY_CACHE/org.antlr/com.springsource.org.antlr/3.0.1/com.springsource.org.antlr-3.0.1.jar" sourcepath="/IVY_CACHE/org.antlr/com.springsource.org.antlr/3.0.1/com.springsource.org.antlr-sources-3.0.1.jar"/>, +++ b/org.springframework.expression/readme.txt, +- Expression serialization needs supporting, +- expression basic interface and common package.  Should LiteralExpression be settable? should getExpressionString return quoted value?, +- Expression comparison - is it necessary?, +++ b/org.springframework.expression/.classpath, +	<classpathentry kind="var" path="IVY_CACHE/org.antlr/com.springsource.org.antlr/3.0.1/com.springsource.org.antlr-3.0.1.jar" sourcepath="/IVY_CACHE/org.antlr/com.springsource.org.antlr/3.0.1/com.springsource.org.antlr-sources-3.0.1.jar"/>, +++ b/org.springframework.expression/readme.txt, +- Expression serialization needs supporting, +- expression basic interface and common package.  Should LiteralExpression be settable? should getExpressionString return quoted value?, +- Expression comparison - is it necessary?, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/common/LiteralExpression.java, +		return literalValue;, +		// return new StringBuilder().append("'").append(literalValue).append("'").toString();, +	public String getValue() throws EvaluationException {, +	public String getValue(EvaluationContext context) throws EvaluationException {, +++ b/org.springframework.expression/.classpath, +	<classpathentry kind="var" path="IVY_CACHE/org.antlr/com.springsource.org.antlr/3.0.1/com.springsource.org.antlr-3.0.1.jar" sourcepath="/IVY_CACHE/org.antlr/com.springsource.org.antlr/3.0.1/com.springsource.org.antlr-sources-3.0.1.jar"/>, +++ b/org.springframework.expression/readme.txt, +- Expression serialization needs supporting, +- expression basic interface and common package.  Should LiteralExpression be settable? should getExpressionString return quoted value?, +- Expression comparison - is it necessary?, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/common/LiteralExpression.java, +		return literalValue;, +		// return new StringBuilder().append("'").append(literalValue).append("'").toString();, +	public String getValue() throws EvaluationException {, +	public String getValue(EvaluationContext context) throws EvaluationException {, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, +import org.springframework.expression.TypeConverter;, +	private final Stack<VariableScope> variableScopes = new Stack<VariableScope>();, +		relatedContext = context;, +		createVariableScope();, +		createVariableScope();, +	private void createVariableScope() {, +		variableScopes.add(new VariableScope()); // create an empty top level VariableScope, +	// TODO all these methods that grab the type converter will fail badly if there isn't one..., +		return ((Boolean) getTypeConverter().convertValue(value, Boolean.TYPE)).booleanValue();, +		return ((Character) getTypeConverter().convertValue(value, Character.TYPE)).charValue();, +		return ((Short) getTypeConverter().convertValue(value, Short.TYPE)).shortValue();, +		return ((Integer) getTypeConverter().convertValue(value, Integer.TYPE)).intValue();, +		return ((Double) getTypeConverter().convertValue(value, Double.TYPE)).doubleValue();, +		return ((Float) getTypeConverter().convertValue(value, Float.TYPE)).floatValue();, +		return ((Long) getTypeConverter().convertValue(value, Long.TYPE)).longValue();, +		return ((Byte) getTypeConverter().convertValue(value, Byte.TYPE)).byteValue();, +	}, +, +	public TypeConverter getTypeConverter() {, +		// TODO cache TypeConverter when it is set/changed?, +		return getTypeUtilities().getTypeConverter();, +		variableScopes.push(new VariableScope(argMap));, +		variableScopes.push(new VariableScope(name, value));, +		variableScopes.pop();, +		variableScopes.peek().setVariable(name, value);, +		int scopeNumber = variableScopes.size() - 1;, +			if (variableScopes.get(i).definesVariable(name)) {, +				return variableScopes.get(i).lookupVariable(name);, +++ b/org.springframework.expression/.classpath, +	<classpathentry kind="var" path="IVY_CACHE/org.antlr/com.springsource.org.antlr/3.0.1/com.springsource.org.antlr-3.0.1.jar" sourcepath="/IVY_CACHE/org.antlr/com.springsource.org.antlr/3.0.1/com.springsource.org.antlr-sources-3.0.1.jar"/>, +++ b/org.springframework.expression/readme.txt, +- Expression serialization needs supporting, +- expression basic interface and common package.  Should LiteralExpression be settable? should getExpressionString return quoted value?, +- Expression comparison - is it necessary?, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/common/LiteralExpression.java, +		return literalValue;, +		// return new StringBuilder().append("'").append(literalValue).append("'").toString();, +	public String getValue() throws EvaluationException {, +	public String getValue(EvaluationContext context) throws EvaluationException {, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, +import org.springframework.expression.TypeConverter;, +	private final Stack<VariableScope> variableScopes = new Stack<VariableScope>();, +		relatedContext = context;, +		createVariableScope();, +		createVariableScope();, +	private void createVariableScope() {, +		variableScopes.add(new VariableScope()); // create an empty top level VariableScope, +	// TODO all these methods that grab the type converter will fail badly if there isn't one..., +		return ((Boolean) getTypeConverter().convertValue(value, Boolean.TYPE)).booleanValue();, +		return ((Character) getTypeConverter().convertValue(value, Character.TYPE)).charValue();, +		return ((Short) getTypeConverter().convertValue(value, Short.TYPE)).shortValue();, +		return ((Integer) getTypeConverter().convertValue(value, Integer.TYPE)).intValue();, +		return ((Double) getTypeConverter().convertValue(value, Double.TYPE)).doubleValue();, +		return ((Float) getTypeConverter().convertValue(value, Float.TYPE)).floatValue();, +		return ((Long) getTypeConverter().convertValue(value, Long.TYPE)).longValue();, +		return ((Byte) getTypeConverter().convertValue(value, Byte.TYPE)).byteValue();, +	}, +, +	public TypeConverter getTypeConverter() {, +		// TODO cache TypeConverter when it is set/changed?, +		return getTypeUtilities().getTypeConverter();, +		variableScopes.push(new VariableScope(argMap));, +		variableScopes.push(new VariableScope(name, value));, +		variableScopes.pop();, +		variableScopes.peek().setVariable(name, value);, +		int scopeNumber = variableScopes.size() - 1;, +			if (variableScopes.get(i).definesVariable(name)) {, +				return variableScopes.get(i).lookupVariable(name);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/SpelUtilities.java]