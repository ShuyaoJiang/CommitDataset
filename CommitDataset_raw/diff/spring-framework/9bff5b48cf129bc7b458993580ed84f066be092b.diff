[+++ b/spring-web/src/main/java/org/springframework/http/client/MultipartBodyBuilder.java, +	public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher, Class<T> elementClass) {, +		Assert.notNull(elementClass, "'elementClass' must not be null");, +	public <T, P extends Publisher<T>> PartBuilder asyncPart(, +			String name, P publisher, ParameterizedTypeReference<T> typeReference) {, +		Assert.notNull(typeReference, "'typeReference' must not be null");, +			Assert.state(publisher != null, "Publisher must not be null");, +++ b/spring-web/src/main/java/org/springframework/http/client/MultipartBodyBuilder.java, +	public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher, Class<T> elementClass) {, +		Assert.notNull(elementClass, "'elementClass' must not be null");, +	public <T, P extends Publisher<T>> PartBuilder asyncPart(, +			String name, P publisher, ParameterizedTypeReference<T> typeReference) {, +		Assert.notNull(typeReference, "'typeReference' must not be null");, +			Assert.state(publisher != null, "Publisher must not be null");, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/HttpHeadResponseDecorator.java, + * Copyright 2002-2018 the original author or authors., +, +++ b/spring-web/src/main/java/org/springframework/http/client/MultipartBodyBuilder.java, +	public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher, Class<T> elementClass) {, +		Assert.notNull(elementClass, "'elementClass' must not be null");, +	public <T, P extends Publisher<T>> PartBuilder asyncPart(, +			String name, P publisher, ParameterizedTypeReference<T> typeReference) {, +		Assert.notNull(typeReference, "'typeReference' must not be null");, +			Assert.state(publisher != null, "Publisher must not be null");, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/HttpHeadResponseDecorator.java, + * Copyright 2002-2018 the original author or authors., +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServerHttpRequestDecorator.java, + * Copyright 2002-2018 the original author or authors., +		Assert.notNull(delegate, "Delegate is required");, +++ b/spring-web/src/main/java/org/springframework/http/client/MultipartBodyBuilder.java, +	public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher, Class<T> elementClass) {, +		Assert.notNull(elementClass, "'elementClass' must not be null");, +	public <T, P extends Publisher<T>> PartBuilder asyncPart(, +			String name, P publisher, ParameterizedTypeReference<T> typeReference) {, +		Assert.notNull(typeReference, "'typeReference' must not be null");, +			Assert.state(publisher != null, "Publisher must not be null");, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/HttpHeadResponseDecorator.java, + * Copyright 2002-2018 the original author or authors., +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServerHttpRequestDecorator.java, + * Copyright 2002-2018 the original author or authors., +		Assert.notNull(delegate, "Delegate is required");, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServerHttpResponseDecorator.java, + * Copyright 2002-2018 the original author or authors., +		Assert.notNull(delegate, "Delegate is required");, +++ b/spring-web/src/main/java/org/springframework/http/client/MultipartBodyBuilder.java, +	public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher, Class<T> elementClass) {, +		Assert.notNull(elementClass, "'elementClass' must not be null");, +	public <T, P extends Publisher<T>> PartBuilder asyncPart(, +			String name, P publisher, ParameterizedTypeReference<T> typeReference) {, +		Assert.notNull(typeReference, "'typeReference' must not be null");, +			Assert.state(publisher != null, "Publisher must not be null");, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/HttpHeadResponseDecorator.java, + * Copyright 2002-2018 the original author or authors., +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServerHttpRequestDecorator.java, + * Copyright 2002-2018 the original author or authors., +		Assert.notNull(delegate, "Delegate is required");, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServerHttpResponseDecorator.java, + * Copyright 2002-2018 the original author or authors., +		Assert.notNull(delegate, "Delegate is required");, +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/PathPattern.java, +		}, +		else if (startIndex >= endIndex) {, +++ b/spring-web/src/main/java/org/springframework/http/client/MultipartBodyBuilder.java, +	public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher, Class<T> elementClass) {, +		Assert.notNull(elementClass, "'elementClass' must not be null");, +	public <T, P extends Publisher<T>> PartBuilder asyncPart(, +			String name, P publisher, ParameterizedTypeReference<T> typeReference) {, +		Assert.notNull(typeReference, "'typeReference' must not be null");, +			Assert.state(publisher != null, "Publisher must not be null");, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/HttpHeadResponseDecorator.java, + * Copyright 2002-2018 the original author or authors., +, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServerHttpRequestDecorator.java, + * Copyright 2002-2018 the original author or authors., +		Assert.notNull(delegate, "Delegate is required");, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServerHttpResponseDecorator.java, + * Copyright 2002-2018 the original author or authors., +		Assert.notNull(delegate, "Delegate is required");, +++ b/spring-web/src/main/java/org/springframework/web/util/pattern/PathPattern.java, +		}, +		else if (startIndex >= endIndex) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyInserters.java, +		Assert.notNull(name, "'name' must not be null");, +		Assert.notNull(name, "'name' must not be null");, +	public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(, +			String name, P publisher, Class<T> elementClass) {, +	public static <T, P extends Publisher<T>> MultipartInserter fromMultipartAsyncData(, +			String name, P publisher, ParameterizedTypeReference<T> typeReference) {, +		Assert.notNull(publisher, "Publisher must not be null");, +						}, +						else {, +							return messageWriter.write(body, bodyType, contentType, outputMessage, context.hints());, +, +++ b/spring-web/src/main/java/org/springframework/http/client/MultipartBodyBuilder.java, +	public <T, P extends Publisher<T>> PartBuilder asyncPart(String name, P publisher, Class<T> elementClass) {, +		Assert.notNull(elementClass, "'elementClass' must not be null");, +	public <T, P extends Publisher<T>> PartBuilder asyncPart(]