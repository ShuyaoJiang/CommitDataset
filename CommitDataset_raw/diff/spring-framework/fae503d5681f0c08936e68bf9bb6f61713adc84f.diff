[+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheEvaluationContext.java, +import java.util.HashSet;, +import java.util.Set;, + * @author Juergen Hoeller, +	private final Set<String> unavailableVariables = new HashSet<>(1);, +	CacheEvaluationContext(Object rootObject, Method method, Object[] arguments,, +			ParameterNameDiscoverer parameterNameDiscoverer) {, +, +		super(rootObject, method, arguments, parameterNameDiscoverer);, +, +	 * Add the specified variable name as unavailable for that context., +	 * Any expression trying to access this variable should lead to an exception., +	 * <p>This permits the validation of expressions that could potentially a, +	 * variable even when such variable isn't available yet. Any expression, +	 * trying to use that variable should therefore fail to evaluate., +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheEvaluationContext.java, +import java.util.HashSet;, +import java.util.Set;, + * @author Juergen Hoeller, +	private final Set<String> unavailableVariables = new HashSet<>(1);, +	CacheEvaluationContext(Object rootObject, Method method, Object[] arguments,, +			ParameterNameDiscoverer parameterNameDiscoverer) {, +, +		super(rootObject, method, arguments, parameterNameDiscoverer);, +, +	 * Add the specified variable name as unavailable for that context., +	 * Any expression trying to access this variable should lead to an exception., +	 * <p>This permits the validation of expressions that could potentially a, +	 * variable even when such variable isn't available yet. Any expression, +	 * trying to use that variable should therefore fail to evaluate., +++ b/spring-context/src/main/java/org/springframework/context/expression/MethodBasedEvaluationContext.java, +import java.util.Arrays;, + * @author Juergen Hoeller, +	private final Object[] arguments;, +	private final ParameterNameDiscoverer parameterNameDiscoverer;, +	private boolean argumentsLoaded = false;, +	public MethodBasedEvaluationContext(Object rootObject, Method method, Object[] arguments,, +			ParameterNameDiscoverer parameterNameDiscoverer) {, +		this.arguments = arguments;, +		this.parameterNameDiscoverer = parameterNameDiscoverer;, +		if (!this.argumentsLoaded) {, +			this.argumentsLoaded = true;, +		// Shortcut if no args need to be loaded, +		if (ObjectUtils.isEmpty(this.arguments)) {, +		// Expose indexed variables as well as parameter names (if discoverable), +		String[] paramNames = this.parameterNameDiscoverer.getParameterNames(this.method);, +		int paramCount = (paramNames != null ? paramNames.length : this.method.getParameterCount());, +		int argsCount = this.arguments.length;, +		for (int i = 0; i < paramCount; i++) {, +			Object value = null;, +			if (argsCount > paramCount && i == paramCount - 1) {, +				// Expose remaining arguments as vararg array for last parameter, +				value = Arrays.copyOfRange(this.arguments, i, argsCount);, +			}, +			else if (argsCount > i) {, +				// Actual argument found - otherwise left as null, +				value = this.arguments[i];, +			}, +			setVariable("a" + i, value);, +			setVariable("p" + i, value);, +			if (paramNames != null) {, +				setVariable(paramNames[i], value);, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheEvaluationContext.java, +import java.util.HashSet;, +import java.util.Set;, + * @author Juergen Hoeller, +	private final Set<String> unavailableVariables = new HashSet<>(1);, +	CacheEvaluationContext(Object rootObject, Method method, Object[] arguments,, +			ParameterNameDiscoverer parameterNameDiscoverer) {, +, +		super(rootObject, method, arguments, parameterNameDiscoverer);, +, +	 * Add the specified variable name as unavailable for that context., +	 * Any expression trying to access this variable should lead to an exception., +	 * <p>This permits the validation of expressions that could potentially a, +	 * variable even when such variable isn't available yet. Any expression, +	 * trying to use that variable should therefore fail to evaluate., +++ b/spring-context/src/main/java/org/springframework/context/expression/MethodBasedEvaluationContext.java, +import java.util.Arrays;, + * @author Juergen Hoeller, +	private final Object[] arguments;, +	private final ParameterNameDiscoverer parameterNameDiscoverer;, +	private boolean argumentsLoaded = false;, +	public MethodBasedEvaluationContext(Object rootObject, Method method, Object[] arguments,, +			ParameterNameDiscoverer parameterNameDiscoverer) {, +		this.arguments = arguments;, +		this.parameterNameDiscoverer = parameterNameDiscoverer;, +		if (!this.argumentsLoaded) {, +			this.argumentsLoaded = true;, +		// Shortcut if no args need to be loaded, +		if (ObjectUtils.isEmpty(this.arguments)) {, +		// Expose indexed variables as well as parameter names (if discoverable), +		String[] paramNames = this.parameterNameDiscoverer.getParameterNames(this.method);, +		int paramCount = (paramNames != null ? paramNames.length : this.method.getParameterCount());, +		int argsCount = this.arguments.length;, +		for (int i = 0; i < paramCount; i++) {, +			Object value = null;, +			if (argsCount > paramCount && i == paramCount - 1) {, +				// Expose remaining arguments as vararg array for last parameter, +				value = Arrays.copyOfRange(this.arguments, i, argsCount);]