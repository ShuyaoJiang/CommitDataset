[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java, +import org.springframework.web.method.annotation.ExceptionHandlerMethodResolver;, + * <p>{@link ExceptionHandlerMethodResolver} is a key contributing class that stores method-to-exception mappings extracted, + * {@link ExceptionHandlerMethodResolver} assists with actually locating a method for a thrown exception., +	private final Map<Class<?>, ExceptionHandlerMethodResolver> exceptionHandlerMethodResolvers =, +		new ConcurrentHashMap<Class<?>, ExceptionHandlerMethodResolver>();, +	 * Find an @{@link ExceptionHandler} method and invoke it to handle the , +	 * raised exception., +		if (handlerMethod == null) {, +			return null;, +		ServletInvocableHandlerMethod exceptionHandlerMethod = getExceptionHandlerMethod(handlerMethod, exception);, +		if (exceptionHandlerMethod == null) {, +			return null;, +		}, +, +		exceptionHandlerMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers);, +		exceptionHandlerMethod.setHandlerMethodReturnValueHandlers(this.returnValueHandlers);, +, +		ServletWebRequest webRequest = new ServletWebRequest(request, response);, +		try {, +			if (logger.isDebugEnabled()) {, +				logger.debug("Invoking @ExceptionHandler method: " + exceptionHandlerMethod);, +			}, +			exceptionHandlerMethod.invokeAndHandle(webRequest, mavContainer, exception);, +		}, +		catch (Exception invocationEx) {, +			logger.error("Failed to invoke @ExceptionHandler method: " + exceptionHandlerMethod, invocationEx);, +			return null;, +		}, +	 * Find the @{@link ExceptionHandler} method for the given exception., +	 * The default implementation searches @{@link ExceptionHandler} methods , +	 * in the class hierarchy of the method that raised the exception., +	 * @param handlerMethod the method where the exception was raised, +	 * @param exception the raised exception, +	 * @return a method to handle the exception, or {@code null}, +	protected ServletInvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {, +		Method method = getExceptionHandlerMethodResolver(handlerType).resolveMethod(exception);, +		return (method != null) ? new ServletInvocableHandlerMethod(handlerMethod.getBean(), method) : null;, +	 * Return a method resolver for the given handler type, never {@code null}., +	private ExceptionHandlerMethodResolver getExceptionHandlerMethodResolver(Class<?> handlerType) {, +		ExceptionHandlerMethodResolver resolver = this.exceptionHandlerMethodResolvers.get(handlerType);, +		if (resolver == null) {, +			resolver = new ExceptionHandlerMethodResolver(handlerType);, +			this.exceptionHandlerMethodResolvers.put(handlerType, resolver);, +		return resolver;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java, +import org.springframework.web.method.annotation.ExceptionHandlerMethodResolver;, + * <p>{@link ExceptionHandlerMethodResolver} is a key contributing class that stores method-to-exception mappings extracted, + * {@link ExceptionHandlerMethodResolver} assists with actually locating a method for a thrown exception., +	private final Map<Class<?>, ExceptionHandlerMethodResolver> exceptionHandlerMethodResolvers =, +		new ConcurrentHashMap<Class<?>, ExceptionHandlerMethodResolver>();, +	 * Find an @{@link ExceptionHandler} method and invoke it to handle the , +	 * raised exception., +		if (handlerMethod == null) {, +			return null;, +		ServletInvocableHandlerMethod exceptionHandlerMethod = getExceptionHandlerMethod(handlerMethod, exception);, +		if (exceptionHandlerMethod == null) {, +			return null;, +		}, +, +		exceptionHandlerMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers);, +		exceptionHandlerMethod.setHandlerMethodReturnValueHandlers(this.returnValueHandlers);, +, +		ServletWebRequest webRequest = new ServletWebRequest(request, response);, +		try {, +			if (logger.isDebugEnabled()) {, +				logger.debug("Invoking @ExceptionHandler method: " + exceptionHandlerMethod);, +			}, +			exceptionHandlerMethod.invokeAndHandle(webRequest, mavContainer, exception);, +		}, +		catch (Exception invocationEx) {, +			logger.error("Failed to invoke @ExceptionHandler method: " + exceptionHandlerMethod, invocationEx);, +			return null;, +		}, +	 * Find the @{@link ExceptionHandler} method for the given exception., +	 * The default implementation searches @{@link ExceptionHandler} methods , +	 * in the class hierarchy of the method that raised the exception., +	 * @param handlerMethod the method where the exception was raised, +	 * @param exception the raised exception, +	 * @return a method to handle the exception, or {@code null}, +	protected ServletInvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {, +		Method method = getExceptionHandlerMethodResolver(handlerType).resolveMethod(exception);, +		return (method != null) ? new ServletInvocableHandlerMethod(handlerMethod.getBean(), method) : null;, +	 * Return a method resolver for the given handler type, never {@code null}., +	private ExceptionHandlerMethodResolver getExceptionHandlerMethodResolver(Class<?> handlerType) {, +		ExceptionHandlerMethodResolver resolver = this.exceptionHandlerMethodResolvers.get(handlerType);, +		if (resolver == null) {, +			resolver = new ExceptionHandlerMethodResolver(handlerType);, +			this.exceptionHandlerMethodResolvers.put(handlerType, resolver);, +		return resolver;, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolverTests.java, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNull;, +	private ExceptionHandlerExceptionResolver resolver;, +		this.resolver = new ExceptionHandlerExceptionResolver();, +		this.resolver.afterPropertiesSet();, +		this.request = new MockHttpServletRequest("GET", "/");, +		this.response = new MockHttpServletResponse();, +	public void nullHandlerMethod() {, +		ModelAndView mav = this.resolver.resolveException(this.request, this.response, null, null);]