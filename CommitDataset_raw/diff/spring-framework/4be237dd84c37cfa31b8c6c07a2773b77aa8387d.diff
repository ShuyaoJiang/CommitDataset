[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/propertyeditors/StringArrayPropertyEditor.java, + * <p>Strings must be in CSV format, with a customizable separator.  By default values in the result are trimmed, + * of whitespace., + * @author Dave Syer, +	private final boolean trimValues;, +, +	 * @param emptyArrayAsNull <code>true</code> if an empty String array, +	 * is to be transformed into <code>null</code>, +	 * @param trimValues <code>true</code> if the values in the parsed arrays , +	 * are to be be trimmed of whitespace (default is true)., +	 */, +	public StringArrayPropertyEditor(String separator, boolean emptyArrayAsNull, boolean trimValues) {, +		this(separator, null, emptyArrayAsNull, trimValues);, +	}, +, +	/**, +	 * Create a new StringArrayPropertyEditor with the given separator., +	 * @param separator the separator to use for splitting a {@link String}, +		this(separator, charsToDelete, emptyArrayAsNull, true);, +	}, +, +	/**, +	 * Create a new StringArrayPropertyEditor with the given separator., +	 * @param separator the separator to use for splitting a {@link String}, +	 * @param charsToDelete a set of characters to delete, in addition to, +	 * trimming an input String. Useful for deleting unwanted line breaks:, +	 * e.g. "\r\n\f" will delete all new lines and line feeds in a String., +	 * @param emptyArrayAsNull <code>true</code> if an empty String array, +	 * is to be transformed into <code>null</code>, +	 * @param trimValues <code>true</code> if the values in the parsed arrays , +	 * are to be be trimmed of whitespace (default is true)., +	 */, +	public StringArrayPropertyEditor(String separator, String charsToDelete, boolean emptyArrayAsNull, boolean trimValues) {, +		this.trimValues = trimValues;, +		if (trimValues) {, +			array = StringUtils.trimArrayElements(array);, +		}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/propertyeditors/StringArrayPropertyEditor.java, + * <p>Strings must be in CSV format, with a customizable separator.  By default values in the result are trimmed, + * of whitespace., + * @author Dave Syer, +	private final boolean trimValues;, +, +	 * @param emptyArrayAsNull <code>true</code> if an empty String array, +	 * is to be transformed into <code>null</code>, +	 * @param trimValues <code>true</code> if the values in the parsed arrays , +	 * are to be be trimmed of whitespace (default is true)., +	 */, +	public StringArrayPropertyEditor(String separator, boolean emptyArrayAsNull, boolean trimValues) {, +		this(separator, null, emptyArrayAsNull, trimValues);, +	}, +, +	/**, +	 * Create a new StringArrayPropertyEditor with the given separator., +	 * @param separator the separator to use for splitting a {@link String}, +		this(separator, charsToDelete, emptyArrayAsNull, true);, +	}, +, +	/**, +	 * Create a new StringArrayPropertyEditor with the given separator., +	 * @param separator the separator to use for splitting a {@link String}, +	 * @param charsToDelete a set of characters to delete, in addition to, +	 * trimming an input String. Useful for deleting unwanted line breaks:, +	 * e.g. "\r\n\f" will delete all new lines and line feeds in a String., +	 * @param emptyArrayAsNull <code>true</code> if an empty String array, +	 * is to be transformed into <code>null</code>, +	 * @param trimValues <code>true</code> if the values in the parsed arrays , +	 * are to be be trimmed of whitespace (default is true)., +	 */, +	public StringArrayPropertyEditor(String separator, String charsToDelete, boolean emptyArrayAsNull, boolean trimValues) {, +		this.trimValues = trimValues;, +		if (trimValues) {, +			array = StringUtils.trimArrayElements(array);, +		}, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/propertyeditors/StringArrayPropertyEditorTests.java, +	public void testTrimByDefault() throws Exception {, +		StringArrayPropertyEditor editor = new StringArrayPropertyEditor();, +		editor.setAsText(" 0,1 , 2 ");, +		Object value = editor.getValue();, +		String[] array = (String[]) value;, +		for (int i = 0; i < array.length; ++i) {, +			assertEquals("" + i, array[i]);, +		}, +		assertEquals("0,1,2", editor.getAsText());, +	}, +, +	public void testNoTrim() throws Exception {, +		StringArrayPropertyEditor editor = new StringArrayPropertyEditor(",",false,false);, +		editor.setAsText("  0,1  , 2 ");, +		Object value = editor.getValue();, +		String[] array = (String[]) value;, +		for (int i = 0; i < array.length; ++i) {, +			assertEquals(3, array[i].length());, +			assertEquals("" + i, array[i].trim());, +		}, +		assertEquals("  0,1  , 2 ", editor.getAsText());, +	}, +]