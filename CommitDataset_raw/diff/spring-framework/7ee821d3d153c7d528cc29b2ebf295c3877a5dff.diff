[+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/AsyncExecutionChain.java, +		Assert.state(this.callable != null, "The last callable is required to build the async chain");, +	public void startDeferredResultProcessing(final DeferredResult deferredResult) {, +		Assert.notNull(deferredResult, "DeferredResult is required");, +		deferredResult.init(new DeferredResultHandler() {, +			public void handle(Object result) {, +				setCallable(new PassThroughCallable(result));, +		if (deferredResult.canHandleTimeout()) {, +			this.asyncWebRequest.setTimeoutHandler(new Runnable() {, +				public void run() {, +					deferredResult.handleTimeout();, +				}, +			});, +		}, +, +	private static class PassThroughCallable implements Callable<Object> {, +, +		private final Object value;, +, +		public PassThroughCallable(Object value) {, +			this.value = value;, +		}, +, +			return this.value;, +, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/AsyncExecutionChain.java, +		Assert.state(this.callable != null, "The last callable is required to build the async chain");, +	public void startDeferredResultProcessing(final DeferredResult deferredResult) {, +		Assert.notNull(deferredResult, "DeferredResult is required");, +		deferredResult.init(new DeferredResultHandler() {, +			public void handle(Object result) {, +				setCallable(new PassThroughCallable(result));, +		if (deferredResult.canHandleTimeout()) {, +			this.asyncWebRequest.setTimeoutHandler(new Runnable() {, +				public void run() {, +					deferredResult.handleTimeout();, +				}, +			});, +		}, +, +	private static class PassThroughCallable implements Callable<Object> {, +, +		private final Object value;, +, +		public PassThroughCallable(Object value) {, +			this.value = value;, +		}, +, +			return this.value;, +, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/AsyncExecutionChainRunnable.java, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/AsyncExecutionChain.java, +		Assert.state(this.callable != null, "The last callable is required to build the async chain");, +	public void startDeferredResultProcessing(final DeferredResult deferredResult) {, +		Assert.notNull(deferredResult, "DeferredResult is required");, +		deferredResult.init(new DeferredResultHandler() {, +			public void handle(Object result) {, +				setCallable(new PassThroughCallable(result));, +		if (deferredResult.canHandleTimeout()) {, +			this.asyncWebRequest.setTimeoutHandler(new Runnable() {, +				public void run() {, +					deferredResult.handleTimeout();, +				}, +			});, +		}, +, +	private static class PassThroughCallable implements Callable<Object> {, +, +		private final Object value;, +, +		public PassThroughCallable(Object value) {, +			this.value = value;, +		}, +, +			return this.value;, +, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/AsyncExecutionChainRunnable.java, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/AsyncWebRequest.java, +	 * Invoked on a timeout to complete the response instead of the default, +	 * behavior that sets the status to 503 (SERVICE_UNAVAILABLE)., +	 */, +	void setTimeoutHandler(Runnable runnable);, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/web/context/request/async/AsyncExecutionChain.java, +		Assert.state(this.callable != null, "The last callable is required to build the async chain");, +	public void startDeferredResultProcessing(final DeferredResult deferredResult) {, +		Assert.notNull(deferredResult, "DeferredResult is required");, +		deferredResult.init(new DeferredResultHandler() {, +			public void handle(Object result) {, +				setCallable(new PassThroughCallable(result));, +		if (deferredResult.canHandleTimeout()) {, +			this.asyncWebRequest.setTimeoutHandler(new Runnable() {, +				public void run() {, +					deferredResult.handleTimeout();, +				}, +			});, +		}, +, +	private static class PassThroughCallable implements Callable<Object> {]