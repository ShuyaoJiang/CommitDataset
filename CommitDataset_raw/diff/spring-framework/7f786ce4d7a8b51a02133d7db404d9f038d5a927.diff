[+++ b/spring-web-reactive/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, +import org.springframework.core.io.buffer.DataBufferAllocator;, +	/**, +	 * Returns a {@link DataBufferAllocator} that can be used for creating the body., +	 * @return a buffer allocator, +	 * @see #setBody(Publisher), +	 */, +	DataBufferAllocator allocator();, +, +++ b/spring-web-reactive/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, +import org.springframework.core.io.buffer.DataBufferAllocator;, +	/**, +	 * Returns a {@link DataBufferAllocator} that can be used for creating the body., +	 * @return a buffer allocator, +	 * @see #setBody(Publisher), +	 */, +	DataBufferAllocator allocator();, +, +++ b/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java, +	public DataBufferAllocator allocator() {, +		return this.allocator;, +	}, +, +	@Override, +++ b/spring-web-reactive/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, +import org.springframework.core.io.buffer.DataBufferAllocator;, +	/**, +	 * Returns a {@link DataBufferAllocator} that can be used for creating the body., +	 * @return a buffer allocator, +	 * @see #setBody(Publisher), +	 */, +	DataBufferAllocator allocator();, +, +++ b/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java, +	public DataBufferAllocator allocator() {, +		return this.allocator;, +	}, +, +	@Override, +++ b/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/RxNettyClientHttpRequest.java, +import org.springframework.core.io.buffer.DataBufferAllocator;, +	@Override, +	public DataBufferAllocator allocator() {, +		return this.allocator;, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, +import org.springframework.core.io.buffer.DataBufferAllocator;, +	/**, +	 * Returns a {@link DataBufferAllocator} that can be used for creating the body., +	 * @return a buffer allocator, +	 * @see #setBody(Publisher), +	 */, +	DataBufferAllocator allocator();, +, +++ b/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java, +	public DataBufferAllocator allocator() {, +		return this.allocator;, +	}, +, +	@Override, +++ b/spring-web-reactive/src/main/java/org/springframework/http/client/reactive/RxNettyClientHttpRequest.java, +import org.springframework.core.io.buffer.DataBufferAllocator;, +	@Override, +	public DataBufferAllocator allocator() {, +		return this.allocator;, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java, +, +import java.util.concurrent.atomic.AtomicInteger;, +import org.springframework.core.io.buffer.DataBufferAllocator;, +	private static final int STATE_NEW = 1;, +, +	private static final int STATE_COMMITTING = 2;, +, +	private static final int STATE_COMMITTED = 3;, +, +	private final AtomicInteger state = new AtomicInteger(STATE_NEW);, +	private final DataBufferAllocator allocator;, +	public AbstractServerHttpResponse(DataBufferAllocator allocator) {, +		Assert.notNull(allocator, "'allocator' must not be null");, +, +		this.allocator = allocator;, +	@Override, +	public final DataBufferAllocator allocator() {, +		return this.allocator;, +	}, +		if (STATE_COMMITTED == this.state.get()) {, +		else {, +	}, +		if (STATE_COMMITTED == this.state.get()) {, +		if (this.state.compareAndSet(STATE_NEW, STATE_COMMITTING)) {, +				mono = mono.after(action);, +				this.state.set(STATE_COMMITTED);, +++ b/spring-web-reactive/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, +import org.springframework.core.io.buffer.DataBufferAllocator;, +	/**, +	 * Returns a {@link DataBufferAllocator} that can be used for creating the body., +	 * @return a buffer allocator]