[+++ b/org.springframework.core/src/main/java/org/springframework/util/AntPathMatcher.java, +			return pattern2.length() - pattern1.length();, +++ b/org.springframework.core/src/main/java/org/springframework/util/AntPathMatcher.java, +			return pattern2.length() - pattern1.length();, +++ b/org.springframework.core/src/main/java/org/springframework/util/AntPathStringMatcher.java, +	private static final String DEFAULT_VARIABLE_PATTERN = "([^\\.]*)";, +++ b/org.springframework.core/src/main/java/org/springframework/util/AntPathMatcher.java, +			return pattern2.length() - pattern1.length();, +++ b/org.springframework.core/src/main/java/org/springframework/util/AntPathStringMatcher.java, +	private static final String DEFAULT_VARIABLE_PATTERN = "([^\\.]*)";, +++ b/org.springframework.core/src/test/java/org/springframework/util/AntPathMatcherTests.java, +, +		assertEquals(-1, comparator.compare("/hotels/new", "/hotels/new.*"));, +, +		// longer is better, +		assertEquals(1, comparator.compare("/hotels", "/hotels2"));, +, +		paths.add("/hotels/ne*");, +		paths.add("/hotels/n*");, +		Collections.shuffle(paths);, +		Collections.sort(paths, comparator);, +		assertEquals("/hotels/ne*", paths.get(0));, +		assertEquals("/hotels/n*", paths.get(1));, +		paths.clear();, +++ b/org.springframework.core/src/main/java/org/springframework/util/AntPathMatcher.java, +			return pattern2.length() - pattern1.length();, +++ b/org.springframework.core/src/main/java/org/springframework/util/AntPathStringMatcher.java, +	private static final String DEFAULT_VARIABLE_PATTERN = "([^\\.]*)";, +++ b/org.springframework.core/src/test/java/org/springframework/util/AntPathMatcherTests.java, +, +		assertEquals(-1, comparator.compare("/hotels/new", "/hotels/new.*"));, +, +		// longer is better, +		assertEquals(1, comparator.compare("/hotels", "/hotels2"));, +, +		paths.add("/hotels/ne*");, +		paths.add("/hotels/n*");, +		Collections.shuffle(paths);, +		Collections.sort(paths, comparator);, +		assertEquals("/hotels/ne*", paths.get(0));, +		assertEquals("/hotels/n*", paths.get(1));, +		paths.clear();, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractUrlHandlerMapping.java, +import java.util.List;, +import java.util.ArrayList;, +		List<String> matchingPaths = new ArrayList<String>();, +			if (getPathMatcher().match(registeredPath, urlPath)) {, +				matchingPaths.add(registeredPath);, +		String bestPathMatch = null;, +		if (!matchingPaths.isEmpty()) {, +			Collections.sort(matchingPaths, getPathMatcher().getPatternComparator(urlPath));, +			if (logger.isDebugEnabled()) {, +				logger.debug("Matching path for request [" + urlPath + "] are " + matchingPaths);, +			}, +			bestPathMatch = matchingPaths.get(0);, +		}, +++ b/org.springframework.core/src/main/java/org/springframework/util/AntPathMatcher.java, +			return pattern2.length() - pattern1.length();, +++ b/org.springframework.core/src/main/java/org/springframework/util/AntPathStringMatcher.java, +	private static final String DEFAULT_VARIABLE_PATTERN = "([^\\.]*)";, +++ b/org.springframework.core/src/test/java/org/springframework/util/AntPathMatcherTests.java, +, +		assertEquals(-1, comparator.compare("/hotels/new", "/hotels/new.*"));, +, +		// longer is better, +		assertEquals(1, comparator.compare("/hotels", "/hotels2"));, +, +		paths.add("/hotels/ne*");, +		paths.add("/hotels/n*");, +		Collections.shuffle(paths);, +		Collections.sort(paths, comparator);, +		assertEquals("/hotels/ne*", paths.get(0));, +		assertEquals("/hotels/n*", paths.get(1));, +		paths.clear();, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractUrlHandlerMapping.java, +import java.util.List;, +import java.util.ArrayList;, +		List<String> matchingPaths = new ArrayList<String>();, +			if (getPathMatcher().match(registeredPath, urlPath)) {, +				matchingPaths.add(registeredPath);, +		String bestPathMatch = null;, +		if (!matchingPaths.isEmpty()) {, +			Collections.sort(matchingPaths, getPathMatcher().getPatternComparator(urlPath));, +			if (logger.isDebugEnabled()) {, +				logger.debug("Matching path for request [" + urlPath + "] are " + matchingPaths);, +			}, +			bestPathMatch = matchingPaths.get(0);, +		}, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/UriTemplateServletAnnotationControllerTests.java, +	@Test, +	public void multiPaths() throws Exception {, +		initServlet(MultiPathController.class);, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/category/page/5");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("handle4-page-5", response.getContentAsString());, +, +		request = new MockHttpServletRequest("GET", "/category/page/5.html");, +		response = new MockHttpServletResponse();]