[+++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverter.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.core.convert.TypeDescriptor;, +	/**, +	 * Convert the value to the required type (if necessary from a String)., +	 * <p>Conversions from String to any type will typically use the {@code setAsText}, +	 * method of the PropertyEditor class, or a Spring Converter in a ConversionService., +	 * @param value the value to convert, +	 * @param requiredType the type we must convert to, +	 * (or {@code null} if not known, for example in case of a collection element), +	 * @param typeDescriptor the type descriptor to use (may be {@code null})), +	 * @return the new value, possibly the result of type conversion, +	 * @throws TypeMismatchException if type conversion failed, +	 * @since 5.1.4, +	 * @see java.beans.PropertyEditor#setAsText(String), +	 * @see java.beans.PropertyEditor#getValue(), +	 * @see org.springframework.core.convert.ConversionService, +	 * @see org.springframework.core.convert.converter.Converter, +	 */, +	@Nullable, +	default <T> T convertIfNecessary(@Nullable Object value, @Nullable Class<T> requiredType,, +			@Nullable TypeDescriptor typeDescriptor) throws TypeMismatchException {, +, +		throw new UnsupportedOperationException("TypeDescriptor resolution not supported");, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverter.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.core.convert.TypeDescriptor;, +	/**, +	 * Convert the value to the required type (if necessary from a String)., +	 * <p>Conversions from String to any type will typically use the {@code setAsText}, +	 * method of the PropertyEditor class, or a Spring Converter in a ConversionService., +	 * @param value the value to convert, +	 * @param requiredType the type we must convert to, +	 * (or {@code null} if not known, for example in case of a collection element), +	 * @param typeDescriptor the type descriptor to use (may be {@code null})), +	 * @return the new value, possibly the result of type conversion, +	 * @throws TypeMismatchException if type conversion failed, +	 * @since 5.1.4, +	 * @see java.beans.PropertyEditor#setAsText(String), +	 * @see java.beans.PropertyEditor#getValue(), +	 * @see org.springframework.core.convert.ConversionService, +	 * @see org.springframework.core.convert.converter.Converter, +	 */, +	@Nullable, +	default <T> T convertIfNecessary(@Nullable Object value, @Nullable Class<T> requiredType,, +			@Nullable TypeDescriptor typeDescriptor) throws TypeMismatchException {, +, +		throw new UnsupportedOperationException("TypeDescriptor resolution not supported");, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, + * Copyright 2002-2019 the original author or authors., +++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverter.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.core.convert.TypeDescriptor;, +	/**, +	 * Convert the value to the required type (if necessary from a String)., +	 * <p>Conversions from String to any type will typically use the {@code setAsText}, +	 * method of the PropertyEditor class, or a Spring Converter in a ConversionService., +	 * @param value the value to convert, +	 * @param requiredType the type we must convert to, +	 * (or {@code null} if not known, for example in case of a collection element), +	 * @param typeDescriptor the type descriptor to use (may be {@code null})), +	 * @return the new value, possibly the result of type conversion, +	 * @throws TypeMismatchException if type conversion failed, +	 * @since 5.1.4, +	 * @see java.beans.PropertyEditor#setAsText(String), +	 * @see java.beans.PropertyEditor#getValue(), +	 * @see org.springframework.core.convert.ConversionService, +	 * @see org.springframework.core.convert.converter.Converter, +	 */, +	@Nullable, +	default <T> T convertIfNecessary(@Nullable Object value, @Nullable Class<T> requiredType,, +			@Nullable TypeDescriptor typeDescriptor) throws TypeMismatchException {, +, +		throw new UnsupportedOperationException("TypeDescriptor resolution not supported");, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, + * Copyright 2002-2019 the original author or authors., +++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverterSupport.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.core.convert.TypeDescriptor;, +		return convertIfNecessary(value, requiredType, TypeDescriptor.valueOf(requiredType));, +	public <T> T convertIfNecessary(@Nullable Object value, @Nullable Class<T> requiredType,, +			@Nullable MethodParameter methodParam) throws TypeMismatchException {, +		return convertIfNecessary(value, requiredType,, +				(methodParam != null ? new TypeDescriptor(methodParam) : TypeDescriptor.valueOf(requiredType)));, +		return convertIfNecessary(value, requiredType,, +				(field != null ? new TypeDescriptor(field) : TypeDescriptor.valueOf(requiredType)));, +	@Override, +	public <T> T convertIfNecessary(@Nullable Object value, @Nullable Class<T> requiredType,, +			@Nullable TypeDescriptor typeDescriptor) throws TypeMismatchException {, +			return this.typeConverterDelegate.convertIfNecessary(null, null, value, requiredType, typeDescriptor);, +++ b/spring-beans/src/main/java/org/springframework/beans/TypeConverter.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.core.convert.TypeDescriptor;, +	/**]