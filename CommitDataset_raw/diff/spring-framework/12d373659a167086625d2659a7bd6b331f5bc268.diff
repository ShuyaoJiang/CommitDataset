[+++ b/build.gradle, +	ext.jackson2Version      = "2.8.0", +	ext.log4jVersion         = '2.6.1', +	ext.undertowVersion      = "1.4.0.CR3", +		testRuntime("org.apache.logging.log4j:log4j-core:${log4jVersion}"), +		testRuntime("org.apache.logging.log4j:log4j-jcl:${log4jVersion}"), +		optional("org.jboss.xnio:xnio-api:3.3.7.Final"), +		testRuntime("org.jboss.xnio:xnio-nio:3.3.7.Final"), +		testRuntime("org.jboss.logging:jboss-logging:3.3.0.Final"), +++ b/build.gradle, +	ext.jackson2Version      = "2.8.0", +	ext.log4jVersion         = '2.6.1', +	ext.undertowVersion      = "1.4.0.CR3", +		testRuntime("org.apache.logging.log4j:log4j-core:${log4jVersion}"), +		testRuntime("org.apache.logging.log4j:log4j-jcl:${log4jVersion}"), +		optional("org.jboss.xnio:xnio-api:3.3.7.Final"), +		testRuntime("org.jboss.xnio:xnio-nio:3.3.7.Final"), +		testRuntime("org.jboss.logging:jboss-logging:3.3.0.Final"), +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/UndertowXhrTransport.java, + * Requires Undertow 1.3 or 1.4, including XNIO, as of Spring Framework 5.0., +			if (this.connectFuture.setException(failure)) {, +++ b/build.gradle, +	ext.jackson2Version      = "2.8.0", +	ext.log4jVersion         = '2.6.1', +	ext.undertowVersion      = "1.4.0.CR3", +		testRuntime("org.apache.logging.log4j:log4j-core:${log4jVersion}"), +		testRuntime("org.apache.logging.log4j:log4j-jcl:${log4jVersion}"), +		optional("org.jboss.xnio:xnio-api:3.3.7.Final"), +		testRuntime("org.jboss.xnio:xnio-nio:3.3.7.Final"), +		testRuntime("org.jboss.logging:jboss-logging:3.3.0.Final"), +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/UndertowXhrTransport.java, + * Requires Undertow 1.3 or 1.4, including XNIO, as of Spring Framework 5.0., +			if (this.connectFuture.setException(failure)) {, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/AbstractWebSocketIntegrationTests.java, +, +	protected final Log logger = LogFactory.getLog(getClass());, +, +, +, +++ b/build.gradle, +	ext.jackson2Version      = "2.8.0", +	ext.log4jVersion         = '2.6.1', +	ext.undertowVersion      = "1.4.0.CR3", +		testRuntime("org.apache.logging.log4j:log4j-core:${log4jVersion}"), +		testRuntime("org.apache.logging.log4j:log4j-jcl:${log4jVersion}"), +		optional("org.jboss.xnio:xnio-api:3.3.7.Final"), +		testRuntime("org.jboss.xnio:xnio-nio:3.3.7.Final"), +		testRuntime("org.jboss.logging:jboss-logging:3.3.0.Final"), +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/UndertowXhrTransport.java, + * Requires Undertow 1.3 or 1.4, including XNIO, as of Spring Framework 5.0., +			if (this.connectFuture.setException(failure)) {, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/AbstractWebSocketIntegrationTests.java, +, +	protected final Log logger = LogFactory.getLog(getClass());, +, +, +, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/WebSocketHandshakeTests.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.socket;, +, +import java.net.URI;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.List;, +import java.util.concurrent.CountDownLatch;, +import java.util.concurrent.TimeUnit;, +, +import org.junit.Test;, +import org.junit.runner.RunWith;, +import org.junit.runners.Parameterized;, +import org.junit.runners.Parameterized.Parameters;, +, +import org.springframework.beans.factory.annotation.Autowired;, +import org.springframework.context.annotation.Bean;, +import org.springframework.context.annotation.Configuration;, +import org.springframework.web.socket.client.jetty.JettyWebSocketClient;, +import org.springframework.web.socket.client.standard.StandardWebSocketClient;, +import org.springframework.web.socket.config.annotation.EnableWebSocket;, +import org.springframework.web.socket.config.annotation.WebSocketConfigurer;, +import org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;, +import org.springframework.web.socket.handler.AbstractWebSocketHandler;, +import org.springframework.web.socket.handler.TextWebSocketHandler;, +import org.springframework.web.socket.server.support.DefaultHandshakeHandler;, +]