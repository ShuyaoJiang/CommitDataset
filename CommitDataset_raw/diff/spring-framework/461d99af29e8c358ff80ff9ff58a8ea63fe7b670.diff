[+++ b/spring-test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Constructor;, +, +import org.springframework.core.annotation.AnnotationUtils;, +	private static final String WEB_APP_CONFIGURATION_CLASS_NAME = "org.springframework.test.context.web.WebAppConfiguration";, +	private static final String WEB_MERGED_CONTEXT_CONFIGURATION_CLASS_NAME = "org.springframework.test.context.web.WebMergedContextConfiguration";, +, +	 * of {@link org.springframework.test.context.web.WebAppConfiguration @WebAppConfiguration}, +	 * either {@value #DEFAULT_CONTEXT_LOADER_CLASS_NAME}, +			Class<? extends Annotation> webAppConfigClass = loadWebAppConfigurationClass();, +			defaultContextLoaderClassName = webAppConfigClass != null, +					&& testClass.isAnnotationPresent(webAppConfigClass) ? DEFAULT_WEB_CONTEXT_LOADER_CLASS_NAME, +		MergedContextConfiguration mergedConfig = buildWebMergedContextConfiguration(testClass, locations, classes,, +			initializerClasses, activeProfiles, contextLoader);, +, +		if (mergedConfig == null) {, +			mergedConfig = new MergedContextConfiguration(testClass, locations, classes, initializerClasses,, +				activeProfiles, contextLoader);, +		return mergedConfig;, +	}, +, +	/**, +	 * Load the {@link org.springframework.test.context.web.WebAppConfiguration @WebAppConfiguration}, +	 * class using reflection in order to avoid package cycles., +	 * , +	 * @return the {@code @WebAppConfiguration} class or <code>null</code> if it, +	 * cannot be loaded, +	 */, +	@SuppressWarnings("unchecked"), +	private static Class<? extends Annotation> loadWebAppConfigurationClass() {, +		Class<? extends Annotation> webAppConfigClass = null;, +		try {, +			webAppConfigClass = (Class<? extends Annotation>) ClassUtils.forName(WEB_APP_CONFIGURATION_CLASS_NAME,, +				ContextLoaderUtils.class.getClassLoader());, +		}, +		catch (Throwable t) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("Could not load @WebAppConfiguration class [" + WEB_APP_CONFIGURATION_CLASS_NAME + "].", t);, +			}, +		}, +		return webAppConfigClass;, +	}, +, +	/**, +	 * Attempt to build a {@link org.springframework.test.context.web.WebMergedContextConfiguration, +	 * WebMergedContextConfiguration} from the supplied arguments using reflection, +	 * in order to avoid package cycles., +	 *, +	 * @return the {@code WebMergedContextConfiguration} or <code>null</code> if, +	 * it could not be built, +	 */, +	@SuppressWarnings("unchecked"), +	private static MergedContextConfiguration buildWebMergedContextConfiguration(, +			Class<?> testClass,, +			String[] locations,, +			Class<?>[] classes,, +			Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> initializerClasses,, +			String[] activeProfiles, ContextLoader contextLoader) {, +, +		Class<? extends Annotation> webAppConfigClass = loadWebAppConfigurationClass();, +, +		if (webAppConfigClass != null && testClass.isAnnotationPresent(webAppConfigClass)) {, +			Annotation annotation = testClass.getAnnotation(webAppConfigClass);, +			String resourceBasePath = (String) AnnotationUtils.getValue(annotation);, +, +			try {, +				Class<? extends MergedContextConfiguration> webMergedConfigClass = (Class<? extends MergedContextConfiguration>) ClassUtils.forName(, +					WEB_MERGED_CONTEXT_CONFIGURATION_CLASS_NAME, ContextLoaderUtils.class.getClassLoader());, +, +				Constructor<? extends MergedContextConfiguration> constructor = ClassUtils.getConstructorIfAvailable(, +					webMergedConfigClass, Class.class, String[].class, Class[].class, Set.class, String[].class,, +					String.class, ContextLoader.class);, +, +				if (constructor != null) {, +					return instantiateClass(constructor, testClass, locations, classes, initializerClasses,, +						activeProfiles, resourceBasePath, contextLoader);, +				}, +			}, +			catch (Throwable t) {, +				if (logger.isDebugEnabled()) {, +					logger.debug("Could not instantiate [" + WEB_MERGED_CONTEXT_CONFIGURATION_CLASS_NAME + "].", t);, +				}, +			}, +		}, +, +		return null;, +++ b/spring-test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java, +import java.lang.annotation.Annotation;, +import java.lang.reflect.Constructor;, +, +import org.springframework.core.annotation.AnnotationUtils;, +	private static final String WEB_APP_CONFIGURATION_CLASS_NAME = "org.springframework.test.context.web.WebAppConfiguration";, +	private static final String WEB_MERGED_CONTEXT_CONFIGURATION_CLASS_NAME = "org.springframework.test.context.web.WebMergedContextConfiguration";, +, +	 * of {@link org.springframework.test.context.web.WebAppConfiguration @WebAppConfiguration}, +	 * either {@value #DEFAULT_CONTEXT_LOADER_CLASS_NAME}, +			Class<? extends Annotation> webAppConfigClass = loadWebAppConfigurationClass();, +			defaultContextLoaderClassName = webAppConfigClass != null, +					&& testClass.isAnnotationPresent(webAppConfigClass) ? DEFAULT_WEB_CONTEXT_LOADER_CLASS_NAME]