[+++ b/spring-web/src/main/java/org/springframework/web/client/RestOperations.java, +++ b/spring-web/src/main/java/org/springframework/web/client/RestOperations.java, +++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, + * Synchronous client to perform HTTP requests, exposing a simple, template, + * method API over underlying HTTP client libraries such as the JDK, + * {@code HttpURLConnection}, Apache HttpComponents, and others., + * <p>The RestTemplate offers templates for common scenarios by HTTP method, in, + * addition to the generalized {@code exchange} and {@code execute} methods that, + * support of less frequent cases., + * <p><strong>NOTE:</strong> As of 5.0, the non-blocking, reactive, + * {@link org.springframework.web.reactive.client.WebClient WebClient} offers a, + * modern alternative to the {@code RestTemplate} with efficient support for, + * both sync and async, as well as streaming scenarios. The {@code RestTemplate}, + * will be deprecated in a future version and will not have major new features, + * gong forward., +++ b/spring-web/src/main/java/org/springframework/web/client/RestOperations.java, +++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, + * Synchronous client to perform HTTP requests, exposing a simple, template, + * method API over underlying HTTP client libraries such as the JDK, + * {@code HttpURLConnection}, Apache HttpComponents, and others., + * <p>The RestTemplate offers templates for common scenarios by HTTP method, in, + * addition to the generalized {@code exchange} and {@code execute} methods that, + * support of less frequent cases., + * <p><strong>NOTE:</strong> As of 5.0, the non-blocking, reactive, + * {@link org.springframework.web.reactive.client.WebClient WebClient} offers a, + * modern alternative to the {@code RestTemplate} with efficient support for, + * both sync and async, as well as streaming scenarios. The {@code RestTemplate}, + * will be deprecated in a future version and will not have major new features, + * gong forward., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java, + * Non-blocking, reactive client to perform HTTP requests, exposing a fluent,, + * reactive API over underlying HTTP client libraries such as Reactor Netty., + * <p>Use static factory methods {@link #create()} or {@link #create(String)},, + * or {@link WebClient#builder()} to prepare an instance., + * <p>For examples with a response body see:, + * <p>For examples with a request body see:, +++ b/spring-web/src/main/java/org/springframework/web/client/RestOperations.java, +++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, + * Synchronous client to perform HTTP requests, exposing a simple, template, + * method API over underlying HTTP client libraries such as the JDK, + * {@code HttpURLConnection}, Apache HttpComponents, and others., + * <p>The RestTemplate offers templates for common scenarios by HTTP method, in, + * addition to the generalized {@code exchange} and {@code execute} methods that, + * support of less frequent cases., + * <p><strong>NOTE:</strong> As of 5.0, the non-blocking, reactive, + * {@link org.springframework.web.reactive.client.WebClient WebClient} offers a, + * modern alternative to the {@code RestTemplate} with efficient support for, + * both sync and async, as well as streaming scenarios. The {@code RestTemplate}, + * will be deprecated in a future version and will not have major new features, + * gong forward., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java, + * Non-blocking, reactive client to perform HTTP requests, exposing a fluent,, + * reactive API over underlying HTTP client libraries such as Reactor Netty., + * <p>Use static factory methods {@link #create()} or {@link #create(String)},, + * or {@link WebClient#builder()} to prepare an instance., + * <p>For examples with a response body see:, + * <p>For examples with a request body see:, +++ b/src/docs/asciidoc/integration.adoc, +* <<rest-resttemplate>> -- the original Spring REST client with a synchronous, template, +method API., +* <<web-reactive.adoc#webflux-client,WebClient>> -- non-blocking, reactive alternative, +that supports both sync and async, as well as streaming scenarios., +, +[NOTE], +====, +As of 5.0, the non-blocking, reactive `WebClient` offers a modern alternative to the, +`RestTemplate` with efficient support for both sync and async, as well as streaming, +scenarios. The `RestTemplate` will be deprecated in a future version and will not have, +major new features gong forward., +====, +++ b/spring-web/src/main/java/org/springframework/web/client/RestOperations.java, +++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, + * Synchronous client to perform HTTP requests, exposing a simple, template, + * method API over underlying HTTP client libraries such as the JDK, + * {@code HttpURLConnection}, Apache HttpComponents, and others., + * <p>The RestTemplate offers templates for common scenarios by HTTP method, in, + * addition to the generalized {@code exchange} and {@code execute} methods that, + * support of less frequent cases., + * <p><strong>NOTE:</strong> As of 5.0, the non-blocking, reactive, + * {@link org.springframework.web.reactive.client.WebClient WebClient} offers a, + * modern alternative to the {@code RestTemplate} with efficient support for, + * both sync and async, as well as streaming scenarios. The {@code RestTemplate}, + * will be deprecated in a future version and will not have major new features, + * gong forward., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/WebClient.java, + * Non-blocking, reactive client to perform HTTP requests, exposing a fluent,, + * reactive API over underlying HTTP client libraries such as Reactor Netty., + * <p>Use static factory methods {@link #create()} or {@link #create(String)},, + * or {@link WebClient#builder()} to prepare an instance., + * <p>For examples with a response body see:, + * <p>For examples with a request body see:, +++ b/src/docs/asciidoc/integration.adoc, +* <<rest-resttemplate>> -- the original Spring REST client with a synchronous, template, +method API., +* <<web-reactive.adoc#webflux-client,WebClient>> -- non-blocking, reactive alternative, +that supports both sync and async, as well as streaming scenarios., +, +[NOTE], +====, +As of 5.0, the non-blocking, reactive `WebClient` offers a modern alternative to the]