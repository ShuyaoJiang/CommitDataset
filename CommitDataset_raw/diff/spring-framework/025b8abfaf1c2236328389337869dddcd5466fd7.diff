[+++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/context/ContextLoaderTests.java, +import static org.hamcrest.CoreMatchers.is;, +	public void testRegisteredContextInitializerCanAccessServletContextParamsViaEnvironment() {, +		MockServletContext sc = new MockServletContext("");, +		// config file doesn't matter.  just a placeholder, +		sc.addInitParameter(ContextLoader.CONFIG_LOCATION_PARAM,, +				"/org/springframework/web/context/WEB-INF/empty-context.xml");, +, +		sc.addInitParameter("someProperty", "someValue");, +		sc.addInitParameter(ContextLoader.CONTEXT_INITIALIZER_CLASSES_PARAM, EnvApplicationContextInitializer.class.getName());, +		ContextLoaderListener listener = new ContextLoaderListener();, +		listener.contextInitialized(new ServletContextEvent(sc));, +	}, +, +	@Test, +	private static class EnvApplicationContextInitializer implements ApplicationContextInitializer<ConfigurableWebApplicationContext> {, +		public void initialize(ConfigurableWebApplicationContext applicationContext) {, +			// test that ApplicationContextInitializers can access ServletContext properties, +			// via the environment (SPR-8991), +			String value = applicationContext.getEnvironment().getRequiredProperty("someProperty");, +			assertThat(value, is("someValue"));, +		}, +	}, +, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/context/ContextLoaderTests.java, +import static org.hamcrest.CoreMatchers.is;, +	public void testRegisteredContextInitializerCanAccessServletContextParamsViaEnvironment() {, +		MockServletContext sc = new MockServletContext("");, +		// config file doesn't matter.  just a placeholder, +		sc.addInitParameter(ContextLoader.CONFIG_LOCATION_PARAM,, +				"/org/springframework/web/context/WEB-INF/empty-context.xml");, +, +		sc.addInitParameter("someProperty", "someValue");, +		sc.addInitParameter(ContextLoader.CONTEXT_INITIALIZER_CLASSES_PARAM, EnvApplicationContextInitializer.class.getName());, +		ContextLoaderListener listener = new ContextLoaderListener();, +		listener.contextInitialized(new ServletContextEvent(sc));, +	}, +, +	@Test, +	private static class EnvApplicationContextInitializer implements ApplicationContextInitializer<ConfigurableWebApplicationContext> {, +		public void initialize(ConfigurableWebApplicationContext applicationContext) {, +			// test that ApplicationContextInitializers can access ServletContext properties, +			// via the environment (SPR-8991), +			String value = applicationContext.getEnvironment().getRequiredProperty("someProperty");, +			assertThat(value, is("someValue"));, +		}, +	}, +, +++ b/org.springframework.web/src/main/java/org/springframework/web/context/ContextLoader.java, +import org.springframework.web.context.support.WebApplicationContextUtils;, +		// eagerly attempt to initialize servlet property sources in case initializers, +		// below depend on accessing context-params via the Environment API. Note that, +		// depending on application context implementation, this initialization will be, +		// attempted again during context refresh., +		WebApplicationContextUtils.initServletPropertySources(, +				applicationContext.getEnvironment().getPropertySources(), servletContext);, +, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/context/ContextLoaderTests.java, +import static org.hamcrest.CoreMatchers.is;, +	public void testRegisteredContextInitializerCanAccessServletContextParamsViaEnvironment() {, +		MockServletContext sc = new MockServletContext("");, +		// config file doesn't matter.  just a placeholder, +		sc.addInitParameter(ContextLoader.CONFIG_LOCATION_PARAM,, +				"/org/springframework/web/context/WEB-INF/empty-context.xml");, +, +		sc.addInitParameter("someProperty", "someValue");, +		sc.addInitParameter(ContextLoader.CONTEXT_INITIALIZER_CLASSES_PARAM, EnvApplicationContextInitializer.class.getName());, +		ContextLoaderListener listener = new ContextLoaderListener();, +		listener.contextInitialized(new ServletContextEvent(sc));, +	}, +, +	@Test, +	private static class EnvApplicationContextInitializer implements ApplicationContextInitializer<ConfigurableWebApplicationContext> {, +		public void initialize(ConfigurableWebApplicationContext applicationContext) {, +			// test that ApplicationContextInitializers can access ServletContext properties, +			// via the environment (SPR-8991), +			String value = applicationContext.getEnvironment().getRequiredProperty("someProperty");, +			assertThat(value, is("someValue"));, +		}, +	}, +, +++ b/org.springframework.web/src/main/java/org/springframework/web/context/ContextLoader.java, +import org.springframework.web.context.support.WebApplicationContextUtils;, +		// eagerly attempt to initialize servlet property sources in case initializers, +		// below depend on accessing context-params via the Environment API. Note that, +		// depending on application context implementation, this initialization will be, +		// attempted again during context refresh., +		WebApplicationContextUtils.initServletPropertySources(, +				applicationContext.getEnvironment().getPropertySources(), servletContext);, +, +++ b/org.springframework.web/src/main/java/org/springframework/web/context/support/WebApplicationContextUtils.java, +import static org.springframework.web.context.support.StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME;, +import static org.springframework.web.context.support.StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME;, +, +import org.springframework.core.env.PropertySource.StubPropertySource;, +		if(servletContext != null &&, +				propertySources.contains(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) &&, +				propertySources.get(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME) instanceof StubPropertySource) {, +			propertySources.replace(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, new ServletContextPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME, servletContext));, +		if(servletConfig != null &&]