[+++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AbstractInterceptorDrivenBeanDefinitionDecorator.java, +		// delegate to subclass for interceptor definition, +			// create the proxy definition, +			// create proxy factory bean definition, +			mpvs.add("interceptorNames", new ManagedList<String>());, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/config/AbstractInterceptorDrivenBeanDefinitionDecorator.java, +		// delegate to subclass for interceptor definition, +			// create the proxy definition, +			// create proxy factory bean definition, +			mpvs.add("interceptorNames", new ManagedList<String>());, +++ b/org.springframework.core/src/main/java/org/springframework/core/LocalVariableTableParameterNameDiscoverer.java, + * Copyright 2002-2010 the original author or authors., +, + * @author Juergen Hoeller, +	// the cache uses a nested index (value is a map) to keep the top level cache relatively small in size, +	private final Map<Class<?>, Map<Member, String[]>> parameterNamesCache =, +			new ConcurrentHashMap<Class<?>, Map<Member, String[]>>();, +, +, +		Map<Member, String[]> map = this.parameterNamesCache.get(declaringClass);, +			this.parameterNamesCache.put(declaringClass, map);, +		Map<Member, String[]> map = this.parameterNamesCache.get(declaringClass);, +			this.parameterNamesCache.put(declaringClass, map);, +	 * Inspects the target class. Exceptions will be logged and a maker map returned, +	 * to indicate the lack of debug information., +		}, +		catch (IOException ex) {, +		}, +		finally {, +			}, +			catch (IOException ex) {, +, +		private static final String STATIC_CLASS_INIT = "<clinit>";, +, +, +]