[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +					return new PropertyTypeDescriptor(new MethodParameter(pd.getReadMethod(), -1), pd);, +					return new PropertyTypeDescriptor(BeanUtils.getWriteMethodParameter(pd), pd);, +							PropertyTypeDescriptor.forNestedType(requiredType, new MethodParameter(pd.getReadMethod(), -1), pd));, +						PropertyTypeDescriptor.forNestedType(requiredType, new MethodParameter(pd.getReadMethod(), -1), pd));, +						PropertyTypeDescriptor.forNestedType(mapValueType, new MethodParameter(pd.getReadMethod(), -1), pd));, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +					return new PropertyTypeDescriptor(new MethodParameter(pd.getReadMethod(), -1), pd);, +					return new PropertyTypeDescriptor(BeanUtils.getWriteMethodParameter(pd), pd);, +							PropertyTypeDescriptor.forNestedType(requiredType, new MethodParameter(pd.getReadMethod(), -1), pd));, +						PropertyTypeDescriptor.forNestedType(requiredType, new MethodParameter(pd.getReadMethod(), -1), pd));, +						PropertyTypeDescriptor.forNestedType(mapValueType, new MethodParameter(pd.getReadMethod(), -1), pd));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * Use this constructor when a target conversion point originates from a method parameter, such as a setter method argument., +	 * Create a new type descriptor for object., +	 * Use this factory method to introspect a source object's type before asking the conversion system to convert it to some another type., +	 * If the object is null, returns {@link TypeDescriptor#NULL}., +	 * If the object is not a collection, simply calls {@link #valueOf(Class)}., +	 * If the object is a collection, this factory method will derive the element type(s) by introspecting the collection., +	 * @param object the source object, +	 * @see ConversionService#convert(Object, Class), +	 * @see CollectionUtils#findCommonElementType(Collection), +	 * Create a new type descriptor for a nested type declared on an array, collection, or map-based method parameter., +	 * Use this factory method when you've resolved a nested source object such as a collection element or map value and wish to have it converted., +	 * @param nestedType the nested type, +	 * @param parentMethodParameter the parent method parameter declaring the collection or map, +	 * @return the nested type descriptor, +	 */, +	public static TypeDescriptor forNestedType(Class<?> nestedType, MethodParameter parentMethodParameter) {, +		return new TypeDescriptor(nestedType, parentMethodParameter);, +	}, +	, +	/**, +	 * Create a new type descriptor for the given class., +	 * Use this to instruct the conversion system to convert to an object to a specific target type, when no type location such as a method parameter or field is available., +	 * Generally prefer use of {@link #forObject(Object)} for constructing source type descriptors for source objects., +	 * @param type the class, +	 * @return the type descriptor, +	 */, +	public static TypeDescriptor valueOf(Class<?> type) {, +		if (type == null) {, +			return NULL;, +		}, +		TypeDescriptor desc = typeDescriptorCache.get(type);, +		return (desc != null ? desc : new TypeDescriptor(type));, +	}, +	, +	/**, +	protected TypeDescriptor(Class<?> nestedType, MethodParameter parentMethodParameter) {, +		this.type = handleUnknownNestedType(nestedType);, +		this.methodParameter = createNestedMethodParameter(parentMethodParameter);, +	}, +	, +		nestedType = handleUnknownNestedType(nestedType);, +			return newNestedTypeDescriptor(nestedType, createNestedMethodParameter(this.methodParameter));				, +	private Class<?> handleUnknownNestedType(Class<?> nestedType) {, +		return nestedType != null ? nestedType : Object.class;, +	private MethodParameter createNestedMethodParameter(MethodParameter parentMethodParameter) {, +		MethodParameter methodParameter = new MethodParameter(parentMethodParameter);, +		methodParameter.increaseNestingLevel();, +		return methodParameter;, +	}, +	, +	// internal constructors, +, +	private TypeDescriptor(Class<?> nestedType, Field field, int nestingLevel) {, +		this.type = nestedType;, +		this.field = field;, +		this.fieldNestingLevel = nestingLevel;, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +					return new PropertyTypeDescriptor(new MethodParameter(pd.getReadMethod(), -1), pd);, +					return new PropertyTypeDescriptor(BeanUtils.getWriteMethodParameter(pd), pd);, +							PropertyTypeDescriptor.forNestedType(requiredType, new MethodParameter(pd.getReadMethod(), -1), pd));, +						PropertyTypeDescriptor.forNestedType(requiredType, new MethodParameter(pd.getReadMethod(), -1), pd));, +						PropertyTypeDescriptor.forNestedType(mapValueType, new MethodParameter(pd.getReadMethod(), -1), pd));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * Use this constructor when a target conversion point originates from a method parameter, such as a setter method argument., +	 * Create a new type descriptor for object., +	 * Use this factory method to introspect a source object's type before asking the conversion system to convert it to some another type., +	 * If the object is null, returns {@link TypeDescriptor#NULL}., +	 * If the object is not a collection, simply calls {@link #valueOf(Class)}., +	 * If the object is a collection, this factory method will derive the element type(s) by introspecting the collection., +	 * @param object the source object, +	 * @see ConversionService#convert(Object, Class), +	 * @see CollectionUtils#findCommonElementType(Collection), +	 * Create a new type descriptor for a nested type declared on an array, collection, or map-based method parameter., +	 * Use this factory method when you've resolved a nested source object such as a collection element or map value and wish to have it converted., +	 * @param nestedType the nested type, +	 * @param parentMethodParameter the parent method parameter declaring the collection or map, +	 * @return the nested type descriptor, +	 */, +	public static TypeDescriptor forNestedType(Class<?> nestedType, MethodParameter parentMethodParameter) {, +		return new TypeDescriptor(nestedType, parentMethodParameter);, +	}, +	, +	/**, +	 * Create a new type descriptor for the given class., +	 * Use this to instruct the conversion system to convert to an object to a specific target type, when no type location such as a method parameter or field is available.]