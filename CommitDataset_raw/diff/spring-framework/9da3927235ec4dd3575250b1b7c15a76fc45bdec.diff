[+++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/nested/NestedTestsWithSpringAndJUnitJupiterTestCase.java, +	static class TopLevelConfig {, +++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/nested/NestedTestsWithSpringAndJUnitJupiterTestCase.java, +	static class TopLevelConfig {, +++ b/spring-test/src/test/java/org/springframework/test/context/support/AbstractContextConfigurationUtilsTests.java, +	@SafeVarargs, +	static <T> T[] array(T... objects) {, +		return objects;, +	}, +, +++ b/spring-test/src/test/java/org/springframework/test/context/junit/jupiter/nested/NestedTestsWithSpringAndJUnitJupiterTestCase.java, +	static class TopLevelConfig {, +++ b/spring-test/src/test/java/org/springframework/test/context/support/AbstractContextConfigurationUtilsTests.java, +	@SafeVarargs, +	static <T> T[] array(T... objects) {, +		return objects;, +	}, +, +++ b/spring-test/src/test/java/org/springframework/test/context/support/BootstrapTestUtilsMergedConfigTests.java, + * Copyright 2002-2017 the original author or authors., +			array("classpath:org/springframework/test/context/support/AbstractContextConfigurationUtilsTests$BareAnnotations-context.xml"),, +		assertMergedConfig(mergedConfig, testClass, array("classpath:/foo.xml"), EMPTY_CLASS_ARRAY,, +		assertMergedConfig(mergedConfig, testClass, array("classpath:/foo.xml"), EMPTY_CLASS_ARRAY,, +		assertMergedConfig(mergedConfig, testClass, EMPTY_STRING_ARRAY, array(FooConfig.class,, +			BarConfig.class), DelegatingSmartContextLoader.class);, +		assertMergedConfig(mergedConfig, testClass, EMPTY_STRING_ARRAY, array(FooConfig.class),, +		assertMergedConfig(webMergedConfig, webTestClass, EMPTY_STRING_ARRAY, array(FooConfig.class),, +			array(FooConfig.class), DelegatingSmartContextLoader.class);, +		assertMergedConfig(mergedConfig, testClass, array("classpath:/foo.properties"), EMPTY_CLASS_ARRAY,, +		assertMergedConfig(mergedConfig, testClass, EMPTY_STRING_ARRAY, array(FooConfig.class),, +		String[] expectedLocations = array("/foo.xml", "/bar.xml");, +		Class<?>[] expectedClasses = array(FooConfig.class, BarConfig.class);, +		String[] expectedLocations = array("/bar.xml");, +		Class<?>[] expectedClasses = array(BarConfig.class);]