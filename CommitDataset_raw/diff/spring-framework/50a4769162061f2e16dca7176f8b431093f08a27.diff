[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlEncodingFilter.java, + * Copyright 2002-2018 the original author or authors., +import javax.servlet.http.HttpServletRequestWrapper;, +			throw new ServletException("ResourceUrlEncodingFilter only supports HTTP requests");, +		ResourceUrlEncodingRequestWrapper wrappedRequest =, +				new ResourceUrlEncodingRequestWrapper((HttpServletRequest) request);, +		ResourceUrlEncodingResponseWrapper wrappedResponse =, +				new ResourceUrlEncodingResponseWrapper(wrappedRequest, (HttpServletResponse) response);, +		filterChain.doFilter(wrappedRequest, wrappedResponse);, +	private static class ResourceUrlEncodingRequestWrapper extends HttpServletRequestWrapper {, +		@Nullable, +		private ResourceUrlProvider resourceUrlProvider;, +		ResourceUrlEncodingRequestWrapper(HttpServletRequest request) {, +			super(request);, +		public void setAttribute(String name, Object o) {, +			super.setAttribute(name, o);, +			if (ResourceUrlProviderExposingInterceptor.RESOURCE_URL_PROVIDER_ATTR.equals(name)) {, +				if(o instanceof ResourceUrlProvider) {, +					initLookupPath((ResourceUrlProvider) o);, +		private void initLookupPath(ResourceUrlProvider urlProvider) {, +			this.resourceUrlProvider = urlProvider;, +				UrlPathHelper pathHelper = this.resourceUrlProvider.getUrlPathHelper();, +				String requestUri = pathHelper.getRequestUri(this);, +				String lookupPath = pathHelper.getLookupPathForRequest(this);, +					String contextPath = pathHelper.getContextPath(this);, +		}, +, +		@Nullable, +		public String resolveUrlPath(String url) {, +			if (this.resourceUrlProvider == null) {, +				logger.trace("ResourceUrlProvider not available via " +, +						"request attribute ResourceUrlProviderExposingInterceptor.RESOURCE_URL_PROVIDER_ATTR");, +				return null;, +			}, +			if (url.startsWith(this.prefixLookupPath)) {, +				int suffixIndex = getQueryParamsIndex(url);, +				String suffix = url.substring(suffixIndex);, +				String lookupPath = url.substring(this.indexLookupPath, suffixIndex);, +				lookupPath = this.resourceUrlProvider.getForLookupPath(lookupPath);, +				if (lookupPath != null) {, +					return this.prefixLookupPath + lookupPath + suffix;, +				}, +			}, +			return null;, +, +	private static class ResourceUrlEncodingResponseWrapper extends HttpServletResponseWrapper {, +, +		private final ResourceUrlEncodingRequestWrapper request;, +, +		ResourceUrlEncodingResponseWrapper(ResourceUrlEncodingRequestWrapper request, HttpServletResponse wrapped) {, +			super(wrapped);, +			this.request = request;, +		}, +, +		@Override, +		public String encodeURL(String url) {, +			String urlPath = this.request.resolveUrlPath(url);, +			if (urlPath != null) {, +				return super.encodeURL(urlPath);, +			}, +			return super.encodeURL(url);, +		}, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlEncodingFilter.java, + * Copyright 2002-2018 the original author or authors., +import javax.servlet.http.HttpServletRequestWrapper;, +			throw new ServletException("ResourceUrlEncodingFilter only supports HTTP requests");, +		ResourceUrlEncodingRequestWrapper wrappedRequest =, +				new ResourceUrlEncodingRequestWrapper((HttpServletRequest) request);, +		ResourceUrlEncodingResponseWrapper wrappedResponse =, +				new ResourceUrlEncodingResponseWrapper(wrappedRequest, (HttpServletResponse) response);, +		filterChain.doFilter(wrappedRequest, wrappedResponse);, +	private static class ResourceUrlEncodingRequestWrapper extends HttpServletRequestWrapper {, +		@Nullable, +		private ResourceUrlProvider resourceUrlProvider;, +		ResourceUrlEncodingRequestWrapper(HttpServletRequest request) {, +			super(request);, +		public void setAttribute(String name, Object o) {, +			super.setAttribute(name, o);, +			if (ResourceUrlProviderExposingInterceptor.RESOURCE_URL_PROVIDER_ATTR.equals(name)) {, +				if(o instanceof ResourceUrlProvider) {, +					initLookupPath((ResourceUrlProvider) o);, +		private void initLookupPath(ResourceUrlProvider urlProvider) {, +			this.resourceUrlProvider = urlProvider;, +				UrlPathHelper pathHelper = this.resourceUrlProvider.getUrlPathHelper();, +				String requestUri = pathHelper.getRequestUri(this);, +				String lookupPath = pathHelper.getLookupPathForRequest(this);, +					String contextPath = pathHelper.getContextPath(this);, +		}, +, +		@Nullable, +		public String resolveUrlPath(String url) {, +			if (this.resourceUrlProvider == null) {, +				logger.trace("ResourceUrlProvider not available via " +, +						"request attribute ResourceUrlProviderExposingInterceptor.RESOURCE_URL_PROVIDER_ATTR");, +				return null;, +			}, +			if (url.startsWith(this.prefixLookupPath)) {, +				int suffixIndex = getQueryParamsIndex(url);]