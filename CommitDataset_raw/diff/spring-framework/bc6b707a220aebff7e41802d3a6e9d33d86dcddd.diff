[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/GenericConverter.java, +import java.util.Set;, +, +import org.springframework.util.Assert;, + *, + * <p>This is the most flexible of the Converter SPI interfaces, but also the most complex., + * It is flexible in that a GenericConverter may support converting between multiple source/target, + * type pairs (see {@link #getConvertibleTypes()}. In addition, GenericConverter implementations, + * have access to source/target {@link TypeDescriptor field context} during the type conversion process., + * This allows for resolving source and target field metadata such as annotations and generics, + * information, which can be used influence the conversion logic., + *, + * <p>This interface should generally not be used when the simpler {@link Converter} or, + * {@link ConverterFactory} interfaces are sufficient., + * @author Juergen Hoeller, +	 * Return the source and target types which this converter can convert between., +	 * <p>Each entry is a convertible source-to-target type pair., +	Set<ConvertiblePair> getConvertibleTypes();, +, +	/**, +	 * Holder for a source-to-target class pair., +	 */, +	public static final class ConvertiblePair {, +, +		private final Class<?> sourceType;, +, +		private final Class<?> targetType;, +, +		/**, +		 * Create a new source-to-target pair., +		 * @param sourceType the source type, +		 * @param targetType the target type, +		 */, +		public ConvertiblePair(Class<?> sourceType, Class<?> targetType) {, +			Assert.notNull(sourceType, "Source type must not be null");, +			Assert.notNull(targetType, "Target type must not be null");, +			this.sourceType = sourceType;, +			this.targetType = targetType;, +		}, +, +		public Class<?> getSourceType() {, +			return this.sourceType;, +		}, +, +		public Class<?> getTargetType() {, +			return this.targetType;, +		}, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/converter/GenericConverter.java, +import java.util.Set;, +, +import org.springframework.util.Assert;, + *, + * <p>This is the most flexible of the Converter SPI interfaces, but also the most complex., + * It is flexible in that a GenericConverter may support converting between multiple source/target, + * type pairs (see {@link #getConvertibleTypes()}. In addition, GenericConverter implementations, + * have access to source/target {@link TypeDescriptor field context} during the type conversion process., + * This allows for resolving source and target field metadata such as annotations and generics, + * information, which can be used influence the conversion logic., + *, + * <p>This interface should generally not be used when the simpler {@link Converter} or, + * {@link ConverterFactory} interfaces are sufficient., + * @author Juergen Hoeller, +	 * Return the source and target types which this converter can convert between., +	 * <p>Each entry is a convertible source-to-target type pair., +	Set<ConvertiblePair> getConvertibleTypes();, +, +	/**, +	 * Holder for a source-to-target class pair., +	 */, +	public static final class ConvertiblePair {, +, +		private final Class<?> sourceType;, +, +		private final Class<?> targetType;, +, +		/**, +		 * Create a new source-to-target pair., +		 * @param sourceType the source type, +		 * @param targetType the target type, +		 */, +		public ConvertiblePair(Class<?> sourceType, Class<?> targetType) {, +			Assert.notNull(sourceType, "Source type must not be null");, +			Assert.notNull(targetType, "Target type must not be null");, +			this.sourceType = sourceType;, +			this.targetType = targetType;, +		}, +, +		public Class<?> getSourceType() {, +			return this.sourceType;, +		}, +, +		public Class<?> getTargetType() {, +			return this.targetType;, +		}, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ArrayToArrayConverter.java, +import java.util.Collections;]