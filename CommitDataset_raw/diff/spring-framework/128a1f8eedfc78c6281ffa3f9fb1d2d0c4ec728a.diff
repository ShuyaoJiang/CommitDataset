[+++ b/spring-test/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java, +import java.util.Arrays;, +import static org.junit.Assert.assertNotNull;, +	 * Assert the {@link HttpMethod} of the request., +	 * @param method the HTTP method, +	 * @return the request matcher, +	 */, +	public static RequestMatcher method(final HttpMethod method) {, +		Assert.notNull(method, "'method' must not be null");, +		return new RequestMatcher() {, +			@Override, +			public void match(ClientHttpRequest request) throws AssertionError {, +				AssertionErrors.assertEquals("Unexpected HttpMethod", method, request.getMethod());, +			}, +		};, +	}, +, +	/**, +	 * Assert request query parameter values with the given Hamcrest matcher., +	 */, +	@SafeVarargs, +	public static RequestMatcher queryParam(final String name, final Matcher<? super String>... matchers) {, +		return new RequestMatcher() {, +			@Override, +			public void match(ClientHttpRequest request) {, +				MultiValueMap<String, String> params = getQueryParams(request);, +				assertValueCount("query param", name, params, matchers.length);, +				for (int i = 0 ; i < matchers.length; i++) {, +					assertThat("Query param", params.get(name).get(i), matchers[i]);, +				}, +			}, +		};, +	}, +, +	/**, +	 * Assert request query parameter values., +	 */, +	public static RequestMatcher queryParam(final String name, final String... expectedValues) {, +		return new RequestMatcher() {, +			@Override, +			public void match(ClientHttpRequest request) {, +				MultiValueMap<String, String> params = getQueryParams(request);, +				assertValueCount("query param", name, params, expectedValues.length);, +				for (int i = 0 ; i < expectedValues.length; i++) {, +					assertEquals("Query param + [" + name + "]", expectedValues[i], params.get(name).get(i));, +				}, +			}, +		};, +	}, +, +	private static MultiValueMap<String, String> getQueryParams(ClientHttpRequest request) {, +		return UriComponentsBuilder.fromUri(request.getURI()).build().getQueryParams();, +	}, +, +	private static void assertValueCount(String valueType, final String name,, +			MultiValueMap<String, String> map, int count) {, +, +		List<String> values = map.get(name);, +, +		String message = "Expected " + valueType + " <" + name + ">";, +		assertNotNull(message, values);, +, +		assertTrue(message + " to have at least <" + count + "> values but found " + values,, +				count <= values.size());, +	}, +, +	/**, +				assertValueCount("header", name, request.getHeaders(), matchers.length);, +				assertValueCount("header", name, request.getHeaders(), expectedValues.length);, +++ b/spring-test/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java, +import java.util.Arrays;, +import static org.junit.Assert.assertNotNull;, +	 * Assert the {@link HttpMethod} of the request., +	 * @param method the HTTP method, +	 * @return the request matcher, +	 */, +	public static RequestMatcher method(final HttpMethod method) {, +		Assert.notNull(method, "'method' must not be null");, +		return new RequestMatcher() {, +			@Override, +			public void match(ClientHttpRequest request) throws AssertionError {, +				AssertionErrors.assertEquals("Unexpected HttpMethod", method, request.getMethod());, +			}, +		};, +	}, +, +	/**, +	 * Assert request query parameter values with the given Hamcrest matcher., +	 */, +	@SafeVarargs, +	public static RequestMatcher queryParam(final String name, final Matcher<? super String>... matchers) {, +		return new RequestMatcher() {, +			@Override, +			public void match(ClientHttpRequest request) {, +				MultiValueMap<String, String> params = getQueryParams(request);, +				assertValueCount("query param", name, params, matchers.length);, +				for (int i = 0 ; i < matchers.length; i++) {, +					assertThat("Query param", params.get(name).get(i), matchers[i]);, +				}, +			}]