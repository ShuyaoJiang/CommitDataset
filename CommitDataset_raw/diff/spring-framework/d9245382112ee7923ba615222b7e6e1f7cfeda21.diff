[+++ b/spring-web/src/main/java/org/springframework/web/util/patterns/RegexPathElement.java, +				// If pattern is capturing variables there must be some actual data to bind to them, +				matches = (p == matchingContext.candidateLength && , +						   ((this.variableNames.size() == 0) ? true : p > candidateIndex));, +++ b/spring-web/src/main/java/org/springframework/web/util/patterns/RegexPathElement.java, +				// If pattern is capturing variables there must be some actual data to bind to them, +				matches = (p == matchingContext.candidateLength && , +						   ((this.variableNames.size() == 0) ? true : p > candidateIndex));, +++ b/spring-web/src/test/java/org/springframework/web/util/patterns/PathPatternMatcherTests.java, +import org.springframework.util.AntPathMatcher;, +		pp = parse("/{foo}*");, +		assertTrue(pp.matches("/abc"));, +		assertFalse(pp.matches("/"));, +, +		, +		// Two captures mean we use a RegexPathElement, +		pp = new PathPatternParser().parse("/{foo}{bar}");, +		assertTrue(pp.matches("/abcdef"));, +		assertFalse(pp.matches("/"));, +		assertFalse(pp.matches("//"));, +		checkCapture("/{foo:[a-z][a-z]}{bar:[a-z]}", "/abc", "foo", "ab", "bar", "c");, +		, +		// Only patterns not capturing variables cannot match against just /, +		pp = new PathPatternParser().parse("/****");, +		assertTrue(pp.matches("/abcdef"));, +		assertTrue(pp.matches("/"));, +		assertTrue(pp.matches("//"));, +		, +		// Confirming AntPathMatcher behaviour:, +		assertFalse(new AntPathMatcher().match("/{foo}", "/"));, +		assertTrue(new AntPathMatcher().match("/{foo}", "/a"));, +		assertTrue(new AntPathMatcher().match("/{foo}{bar}", "/a"));, +		assertFalse(new AntPathMatcher().match("/{foo}*", "/"));, +		assertTrue(new AntPathMatcher().match("/*", "/"));, +		assertFalse(new AntPathMatcher().match("/*{foo}", "/"));, +		Map<String, String> vars = new AntPathMatcher().extractUriTemplateVariables("/{foo}{bar}", "/a");, +		assertEquals("a",vars.get("foo"));, +		assertEquals("",vars.get("bar"));]