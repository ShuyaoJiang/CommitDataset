[+++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +	private static final Log logger = LogFactory.getLog(ExtendedBeanInfo.class);, +, +			try {, +			catch (IntrospectionException ex) {, +				// Probably simply a method that wasn't meant to follow the JavaBeans pattern..., +				if (logger.isDebugEnabled()) {, +					logger.debug("Ignoring invalid bean property '" + pd.getName() + "': " + ex.getMessage());, +				}, +			}, +		}, +				try {, +				catch (IntrospectionException ex) {, +					// We're only trying to find candidates, can easily ignore extra ones here..., +					if (logger.isDebugEnabled()) {, +						logger.debug("Ignoring candidate write method [" + method + "]: " + ex.getMessage());, +					}, +				}, +			}, +		return (methodName.length() > 3 && methodName.startsWith("set") && Modifier.isPublic(method.getModifiers()) &&, +				(nParams == 1 || (nParams == 2 && parameterTypes[0].equals(int.class))));, +++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +	private static final Log logger = LogFactory.getLog(ExtendedBeanInfo.class);, +, +			try {, +			catch (IntrospectionException ex) {, +				// Probably simply a method that wasn't meant to follow the JavaBeans pattern..., +				if (logger.isDebugEnabled()) {, +					logger.debug("Ignoring invalid bean property '" + pd.getName() + "': " + ex.getMessage());, +				}, +			}, +		}, +				try {, +				catch (IntrospectionException ex) {, +					// We're only trying to find candidates, can easily ignore extra ones here..., +					if (logger.isDebugEnabled()) {, +						logger.debug("Ignoring candidate write method [" + method + "]: " + ex.getMessage());, +					}, +				}, +			}, +		return (methodName.length() > 3 && methodName.startsWith("set") && Modifier.isPublic(method.getModifiers()) &&, +				(nParams == 1 || (nParams == 2 && parameterTypes[0].equals(int.class))));, +++ b/spring-beans/src/test/java/org/springframework/beans/ExtendedBeanInfoTests.java, +	@Test  // SPR-12434, +	public void shouldDetectValidPropertiesAndIgnoreInvalidProperties() throws IntrospectionException {, +		BeanInfo bi = new ExtendedBeanInfo(Introspector.getBeanInfo(java.awt.Window.class));, +		assertThat(hasReadMethodForProperty(bi, "locationByPlatform"), is(true));, +		assertThat(hasWriteMethodForProperty(bi, "locationByPlatform"), is(true));, +		assertThat(hasIndexedReadMethodForProperty(bi, "locationByPlatform"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(bi, "locationByPlatform"), is(false));, +	}, +]