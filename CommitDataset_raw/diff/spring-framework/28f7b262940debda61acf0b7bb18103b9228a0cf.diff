[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		Object instance;, +, +, +		if (instance == null) {, +			instance = new NullBean();, +		}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +		Object instance;, +, +, +		if (instance == null) {, +			instance = new NullBean();, +		}, +++ b/spring-context/src/test/java/org/springframework/context/annotation/AnnotationConfigApplicationContextTests.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.util.ObjectUtils;, +import static java.lang.String.*;, +	public void individualBeanWithNullReturningSupplier() {, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();, +		context.registerBean("a", BeanA.class, () -> null);, +		context.registerBean("b", BeanB.class, BeanB::new);, +		context.registerBean("c", BeanC.class, BeanC::new);, +		context.refresh();, +, +		assertTrue(ObjectUtils.containsElement(context.getBeanNamesForType(BeanA.class), "a"));, +		assertTrue(ObjectUtils.containsElement(context.getBeanNamesForType(BeanB.class), "b"));, +		assertTrue(ObjectUtils.containsElement(context.getBeanNamesForType(BeanC.class), "c"));, +		assertTrue(context.getBeansOfType(BeanA.class).isEmpty());, +		assertSame(context.getBean(BeanB.class), context.getBeansOfType(BeanB.class).values().iterator().next());, +		assertSame(context.getBean(BeanC.class), context.getBeansOfType(BeanC.class).values().iterator().next());, +	}, +, +	@Test]