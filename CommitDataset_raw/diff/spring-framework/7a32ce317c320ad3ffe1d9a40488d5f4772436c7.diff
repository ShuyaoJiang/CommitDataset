[+++ b/spring-core/src/main/java/org/springframework/util/LinkedCaseInsensitiveMap.java, + * Copyright 2002-2016 the original author or authors., +			String caseInsensitiveKey = this.caseInsensitiveKeys.get(convertKey((String) key));, +			if (caseInsensitiveKey != null) {, +				return super.get(caseInsensitiveKey);, +		}, +, +	// Overridden to avoid LinkedHashMap's own hash computation in its getOrDefault impl, +	@Override, +	public V getOrDefault(Object key, V defaultValue) {, +		if (key instanceof String) {, +			String caseInsensitiveKey = this.caseInsensitiveKeys.get(convertKey((String) key));, +			if (caseInsensitiveKey != null) {, +				return super.get(caseInsensitiveKey);, +			}, +		}, +		return defaultValue;, +			String caseInsensitiveKey = this.caseInsensitiveKeys.remove(convertKey((String) key));, +			if (caseInsensitiveKey != null) {, +				return super.remove(caseInsensitiveKey);, +		}, +++ b/spring-core/src/main/java/org/springframework/util/LinkedCaseInsensitiveMap.java, + * Copyright 2002-2016 the original author or authors., +			String caseInsensitiveKey = this.caseInsensitiveKeys.get(convertKey((String) key));, +			if (caseInsensitiveKey != null) {, +				return super.get(caseInsensitiveKey);, +		}, +, +	// Overridden to avoid LinkedHashMap's own hash computation in its getOrDefault impl, +	@Override, +	public V getOrDefault(Object key, V defaultValue) {, +		if (key instanceof String) {, +			String caseInsensitiveKey = this.caseInsensitiveKeys.get(convertKey((String) key));, +			if (caseInsensitiveKey != null) {, +				return super.get(caseInsensitiveKey);, +			}, +		}, +		return defaultValue;, +			String caseInsensitiveKey = this.caseInsensitiveKeys.remove(convertKey((String) key));, +			if (caseInsensitiveKey != null) {, +				return super.remove(caseInsensitiveKey);, +		}, +++ b/spring-core/src/test/java/org/springframework/util/LinkedCaseInsensitiveMapTests.java, + * Copyright 2002-2016 the original author or authors., +	private final LinkedCaseInsensitiveMap<String> map = new LinkedCaseInsensitiveMap<String>();, +	@Test, +	public void getOrDefault() {, +		map.put("key", "value1");, +		map.put("KEY", "value2");, +		map.put("Key", "value3");, +		assertEquals("value3", map.getOrDefault("key", "N"));, +		assertEquals("value3", map.getOrDefault("KEY", "N"));, +		assertEquals("value3", map.getOrDefault("Key", "N"));, +		assertEquals("N", map.getOrDefault("keeeey", "N"));, +		assertEquals("N", map.getOrDefault(new Object(), "N"));, +	}, +, +	@Test, +	public void getOrDefaultWithNullValue() {, +		map.put("key", null);, +		map.put("KEY", null);, +		map.put("Key", null);, +		assertNull(map.getOrDefault("key", "N"));, +		assertNull(map.getOrDefault("KEY", "N"));, +		assertNull(map.getOrDefault("Key", "N"));, +		assertEquals("N", map.getOrDefault("keeeey", "N"));, +		assertEquals("N", map.getOrDefault(new Object(), "N"));, +	}, +]