[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java, +, +			if (CharSequence.class.isAssignableFrom(elementType) && !isJsonStringArray(elementType, mediaType)) {, +		new DeferredResultSubscriber(result, adapter).connect(adapter, returnValue);, +	private boolean isJsonStringArray(Class<?> elementType, Optional<MediaType> mediaType) {, +		private final boolean multiValueSource;, +		DeferredResultSubscriber(DeferredResult<Object> result, ReactiveAdapter adapter) {, +			this.multiValueSource = adapter.isMultiValue();, +			if (this.values.size() > 1 || this.multiValueSource) {, +				this.result.setResult(null);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java, +, +			if (CharSequence.class.isAssignableFrom(elementType) && !isJsonStringArray(elementType, mediaType)) {, +		new DeferredResultSubscriber(result, adapter).connect(adapter, returnValue);, +	private boolean isJsonStringArray(Class<?> elementType, Optional<MediaType> mediaType) {, +		private final boolean multiValueSource;, +		DeferredResultSubscriber(DeferredResult<Object> result, ReactiveAdapter adapter) {, +			this.multiValueSource = adapter.isMultiValue();, +			if (this.values.size() > 1 || this.multiValueSource) {, +				this.result.setResult(null);, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandlerTests.java, +import static org.junit.Assert.assertNotNull;, +		testJsonNotPreferred("text/plain");, +		testJsonNotPreferred("text/plain, application/json");, +		testJsonNotPreferred("text/markdown");, +		testJsonNotPreferred("foo/bar");, +		testJsonPreferred("application/json");, +		testJsonPreferred("application/foo+json");, +		testJsonPreferred("application/json, text/plain");, +		testJsonPreferred("*/*, application/json, text/plain");, +	private void testJsonNotPreferred(String acceptHeaderValue) throws Exception {, +		EmitterProcessor<String> processor = EmitterProcessor.create();, +		ResponseBodyEmitter emitter = handleValue(processor, Flux.class);, +		assertNotNull(emitter);, +	}, +, +	private void testJsonPreferred(String acceptHeaderValue) throws Exception {, +		resetRequest();, +		this.servletRequest.addHeader("Accept", acceptHeaderValue);, +		EmitterProcessor<String> processor = EmitterProcessor.create();, +		testDeferredResultSubscriber(processor, Flux.class, processor::onComplete, Collections.emptyList());, +		testJsonPreferred("text/plain;q=0.8, application/json;q=1.0");, +		testJsonNotPreferred("text/plain, application/json");]