[+++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBean.java, +import org.hibernate.cache.spi.RegionFactory;, +	private RegionFactory cacheRegionFactory;, +, +	 * Set the Hibernate RegionFactory to use for the SessionFactory., +	 * Allows for using a Spring-managed RegionFactory instance., +	 * <p>Note: If this is set, the Hibernate settings should not define a, +	 * cache provider to avoid meaningless double configuration., +	 * @see org.hibernate.cache.spi.RegionFactory, +	 * @see LocalSessionFactoryBuilder#setCacheRegionFactory, +	 */, +	public void setCacheRegionFactory(RegionFactory cacheRegionFactory) {, +		this.cacheRegionFactory = cacheRegionFactory;, +	}, +, +	/**, +		if (this.cacheRegionFactory != null) {, +			sfb.setCacheRegionFactory(this.cacheRegionFactory);, +		}, +, +++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBean.java, +import org.hibernate.cache.spi.RegionFactory;, +	private RegionFactory cacheRegionFactory;, +, +	 * Set the Hibernate RegionFactory to use for the SessionFactory., +	 * Allows for using a Spring-managed RegionFactory instance., +	 * <p>Note: If this is set, the Hibernate settings should not define a, +	 * cache provider to avoid meaningless double configuration., +	 * @see org.hibernate.cache.spi.RegionFactory, +	 * @see LocalSessionFactoryBuilder#setCacheRegionFactory, +	 */, +	public void setCacheRegionFactory(RegionFactory cacheRegionFactory) {, +		this.cacheRegionFactory = cacheRegionFactory;, +	}, +, +	/**, +		if (this.cacheRegionFactory != null) {, +			sfb.setCacheRegionFactory(this.cacheRegionFactory);, +		}, +, +++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBuilder.java, +import java.lang.reflect.Method;, +import java.util.Properties;, +import org.hibernate.cache.spi.RegionFactory;, +import org.hibernate.cfg.Settings;, +import org.hibernate.service.ServiceRegistry;, +	private RegionFactory cacheRegionFactory;, +, +	 * Set the Hibernate RegionFactory to use for the SessionFactory., +	 * Allows for using a Spring-managed RegionFactory instance., +	 * <p>Note: If this is set, the Hibernate settings should not define a, +	 * cache provider to avoid meaningless double configuration., +	 * @see org.hibernate.cache.spi.RegionFactory, +	 */, +	public LocalSessionFactoryBuilder setCacheRegionFactory(RegionFactory cacheRegionFactory) {, +		this.cacheRegionFactory = cacheRegionFactory;, +		return this;, +	}, +, +	/**, +	// Overridden methods from Hibernate's Configuration class, +, +	@Override, +	public Settings buildSettings(Properties props, ServiceRegistry serviceRegistry) throws HibernateException {, +		Settings settings = super.buildSettings(props, serviceRegistry);, +		if (this.cacheRegionFactory != null) {, +			try {, +				Method setRegionFactory = Settings.class.getDeclaredMethod("setRegionFactory", RegionFactory.class);, +				setRegionFactory.setAccessible(true);, +				setRegionFactory.invoke(settings, this.cacheRegionFactory);, +			}, +			catch (Exception ex) {, +				throw new IllegalStateException("Failed to invoke Hibernate's setRegionFactory method", ex);, +			}, +		}, +		return settings;, +	}, +]