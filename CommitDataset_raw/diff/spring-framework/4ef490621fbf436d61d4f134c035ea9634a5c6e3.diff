[+++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +		String encodedHost = encodeUriComponent(this.host, encoding, getHostType());, +, +	private Type getHostType() {, +		return ((this.host != null) && this.host.startsWith("[")) ? Type.HOST_IPV6 : Type.HOST_IPV4;, +	}, +		verifyUriComponent(host, getHostType());, +		HOST_IPV4 {, +		HOST_IPV6 {, +			@Override, +			public boolean isAllowed(int c) {, +				return isUnreserved(c) || isSubDelimiter(c) || '[' == c || ']' == c || ':' == c;, +			}, +		},, +++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +		String encodedHost = encodeUriComponent(this.host, encoding, getHostType());, +, +	private Type getHostType() {, +		return ((this.host != null) && this.host.startsWith("[")) ? Type.HOST_IPV6 : Type.HOST_IPV4;, +	}, +		verifyUriComponent(host, getHostType());, +		HOST_IPV4 {, +		HOST_IPV6 {, +			@Override, +			public boolean isAllowed(int c) {, +				return isUnreserved(c) || isSubDelimiter(c) || '[' == c || ']' == c || ':' == c;, +			}, +		},, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +	private static final String HOST_IPV4_PATTERN = "[^\\[/?#:]*";, +, +	private static final String HOST_IPV6_PATTERN = "\\[[\\p{XDigit}\\:\\.]*[%\\p{Alnum}]*\\]";, +, +	private static final String HOST_PATTERN = "(" + HOST_IPV6_PATTERN + "|" + HOST_IPV4_PATTERN + ")";, +			String host = m.group(5);, +			if(StringUtils.hasLength(scheme) && !StringUtils.hasLength(host)) {, +				throw new IllegalArgumentException("[" + httpUrl + "] is not a valid HTTP URL");, +			}, +			builder.host(host);, +++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +		String encodedHost = encodeUriComponent(this.host, encoding, getHostType());, +, +	private Type getHostType() {, +		return ((this.host != null) && this.host.startsWith("[")) ? Type.HOST_IPV6 : Type.HOST_IPV4;, +	}, +		verifyUriComponent(host, getHostType());, +		HOST_IPV4 {, +		HOST_IPV6 {, +			@Override, +			public boolean isAllowed(int c) {, +				return isUnreserved(c) || isSubDelimiter(c) || '[' == c || ']' == c || ':' == c;, +			}, +		},, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +	private static final String HOST_IPV4_PATTERN = "[^\\[/?#:]*";, +, +	private static final String HOST_IPV6_PATTERN = "\\[[\\p{XDigit}\\:\\.]*[%\\p{Alnum}]*\\]";, +, +	private static final String HOST_PATTERN = "(" + HOST_IPV6_PATTERN + "|" + HOST_IPV4_PATTERN + ")";, +			String host = m.group(5);, +			if(StringUtils.hasLength(scheme) && !StringUtils.hasLength(host)) {, +				throw new IllegalArgumentException("[" + httpUrl + "] is not a valid HTTP URL");, +			}, +			builder.host(host);, +++ b/spring-web/src/main/java/org/springframework/web/util/UriUtils.java, +				.encodeUriComponent(host, encoding, HierarchicalUriComponents.Type.HOST_IPV4);, +++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +		String encodedHost = encodeUriComponent(this.host, encoding, getHostType());, +, +	private Type getHostType() {, +		return ((this.host != null) && this.host.startsWith("[")) ? Type.HOST_IPV6 : Type.HOST_IPV4;, +	}, +		verifyUriComponent(host, getHostType());, +		HOST_IPV4 {, +		HOST_IPV6 {, +			@Override, +			public boolean isAllowed(int c) {, +				return isUnreserved(c) || isSubDelimiter(c) || '[' == c || ']' == c || ':' == c;, +			}, +		},, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +	private static final String HOST_IPV4_PATTERN = "[^\\[/?#:]*";, +, +	private static final String HOST_IPV6_PATTERN = "\\[[\\p{XDigit}\\:\\.]*[%\\p{Alnum}]*\\]";, +, +	private static final String HOST_PATTERN = "(" + HOST_IPV6_PATTERN + "|" + HOST_IPV4_PATTERN + ")";, +			String host = m.group(5);, +			if(StringUtils.hasLength(scheme) && !StringUtils.hasLength(host)) {, +				throw new IllegalArgumentException("[" + httpUrl + "] is not a valid HTTP URL");, +			}, +			builder.host(host);, +++ b/spring-web/src/main/java/org/springframework/web/util/UriUtils.java, +				.encodeUriComponent(host, encoding, HierarchicalUriComponents.Type.HOST_IPV4);, +++ b/spring-web/src/test/java/org/springframework/web/util/UriComponentsBuilderTests.java, +	// SPR-10539, +, +	@Test(expected = IllegalArgumentException.class), +	public void fromHttpUrlStringInvalidIPv6Host() throws URISyntaxException {, +		UriComponentsBuilder.fromHttpUrl("http://[1abc:2abc:3abc::5ABC:6abc:8080/resource").build().encode();, +	}]