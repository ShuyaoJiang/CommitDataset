[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/DefaultMethodReturnValueHandler.java, +			return;, +		else {, +	}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/DefaultMethodReturnValueHandler.java, +			return;, +		else {, +	}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/ServletRequestMethodArgumentResolver.java, +import org.springframework.web.context.request.WebRequest;, +		return WebRequest.class.isAssignableFrom(parameterType) || , +				ServletRequest.class.isAssignableFrom(parameterType) ||, +		if (WebRequest.class.isAssignableFrom(parameterType)) {, +			return webRequest;, +		}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/DefaultMethodReturnValueHandler.java, +			return;, +		else {, +	}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/ServletRequestMethodArgumentResolver.java, +import org.springframework.web.context.request.WebRequest;, +		return WebRequest.class.isAssignableFrom(parameterType) || , +				ServletRequest.class.isAssignableFrom(parameterType) ||, +		if (WebRequest.class.isAssignableFrom(parameterType)) {, +			return webRequest;, +		}, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/support/DefaultMethodReturnValueHandlerTests.java, +import org.springframework.beans.TestBean;, +	@Test, +	public void returnSingleModelAttribute() throws Exception{, +		handler.handleReturnValue(new TestBean(), createMethodParam("singleModelAttribute"), mavContainer, webRequest);, +		assertTrue(mavContainer.containsAttribute("testBean"));, +	}, +, +	@SuppressWarnings("unused"), +	private TestBean singleModelAttribute() {, +		return null;, +	}, +	, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/DefaultMethodReturnValueHandler.java, +			return;, +		else {, +	}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/ServletRequestMethodArgumentResolver.java, +import org.springframework.web.context.request.WebRequest;, +		return WebRequest.class.isAssignableFrom(parameterType) || , +				ServletRequest.class.isAssignableFrom(parameterType) ||, +		if (WebRequest.class.isAssignableFrom(parameterType)) {, +			return webRequest;, +		}, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/support/DefaultMethodReturnValueHandlerTests.java, +import org.springframework.beans.TestBean;, +	@Test, +	public void returnSingleModelAttribute() throws Exception{, +		handler.handleReturnValue(new TestBean(), createMethodParam("singleModelAttribute"), mavContainer, webRequest);, +		assertTrue(mavContainer.containsAttribute("testBean"));, +	}, +, +	@SuppressWarnings("unused"), +	private TestBean singleModelAttribute() {, +		return null;, +	}, +	, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/support/ServletRequestMethodArgumentResolverTests.java, +import org.springframework.web.context.request.WebRequest;, +						Principal.class, Locale.class, InputStream.class, Reader.class, WebRequest.class);, +	@Test, +	public void webRequest() throws Exception {, +		MethodParameter webRequestParameter = new MethodParameter(supportedParams, 7);, +, +		assertTrue("WebRequest not supported", resolver.supportsParameter(webRequestParameter));, +, +		Object result = resolver.resolveArgument(webRequestParameter, null, webRequest, null);, +		assertSame("Invalid result", webRequest, result);, +	}, +, +								Reader p6,, +								WebRequest p7) {]