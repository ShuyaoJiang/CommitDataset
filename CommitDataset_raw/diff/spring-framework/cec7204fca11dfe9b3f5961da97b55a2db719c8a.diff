[+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateTemplate.java, +				if (retVal instanceof Criteria) {, +				else if (retVal instanceof org.hibernate.Query) {, +					prepareQuery(((org.hibernate.Query) retVal));, +				}, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateTemplate.java, +				if (retVal instanceof Criteria) {, +				else if (retVal instanceof org.hibernate.Query) {, +					prepareQuery(((org.hibernate.Query) retVal));, +				}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/ServerEndpointRegistration.java, + * Copyright 2002-2018 the original author or authors., + * Spring-based applications. A {@link ServerEndpointRegistration} bean is detected by, + * {@link javax.websocket.server.ServerEndpointConfig.Configurator} to make it easier, + * to override methods for customizing the handshake process., + * @author Juergen Hoeller, + * @since 4.0, +	private List<String> subprotocols = new ArrayList<>(0);, +	private List<Extension> extensions = new ArrayList<>(0);, +	private List<Class<? extends Encoder>> encoders = new ArrayList<>(0);, +	private List<Class<? extends Decoder>> decoders = new ArrayList<>(0);, +	private final Map<String, Object> userProperties = new HashMap<>(4);, +		Assert.hasText(path, "Path must not be empty");, +		Assert.notNull(endpoint, "Endpoint must not be null");, +		Assert.hasText(path, "Path must not be empty");, +		Assert.notNull(endpointClass, "Endpoint Class must not be null");, +	// ServerEndpointConfig implementation, +, +	public void setSubprotocols(List<String> subprotocols) {, +		this.subprotocols = subprotocols;, +		return this.subprotocols;, +	public void setUserProperties(Map<String, Object> userProperties) {, +		this.userProperties.clear();, +		this.userProperties.putAll(userProperties);, +	}, +, +	@Override, +	public Map<String, Object> getUserProperties() {, +		return this.userProperties;, +	}, +, +	// ServerEndpointConfig.Configurator implementation, +, +	// Remaining methods, +, +	@Override, +	public void setBeanFactory(BeanFactory beanFactory) {, +		if (this.endpointProvider != null) {, +			this.endpointProvider.setBeanFactory(beanFactory);, +		}, +	}, +, +]