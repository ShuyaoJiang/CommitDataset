[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/DefaultAdvisorAutoProxyCreator.java, + * Copyright 2002-2016 the original author or authors., + * {@code BeanPostProcessor} implementation that creates AOP proxies based on all, + * candidate {@code Advisor}s in the current {@code BeanFactory}. This class is, + * completely generic; it contains no special code to handle any particular aspects,, + * such as pooling aspects., + * of this type in the same factory - by setting the {@code usePrefix} property to true,, + * in which case only advisors beginning with the DefaultAdvisorAutoProxyCreator's bean, + * name followed by a dot (like "aapc.") will be used. This default prefix can be changed, + * from the bean name by setting the {@code advisorBeanNamePrefix} property., +	private boolean usePrefix = false;, +	 * Set whether to only include advisors with a certain prefix in the bean name., +	 * <p>Default is {@code false}, including all beans of type {@code Advisor}., +	 * @see #setAdvisorBeanNamePrefix, +	 * Return whether to only include advisors with a certain prefix in the bean name., +	 * Consider {@code Advisor} beans with the specified prefix as eligible, if activated., +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/DefaultAdvisorAutoProxyCreator.java, + * Copyright 2002-2016 the original author or authors., + * {@code BeanPostProcessor} implementation that creates AOP proxies based on all, + * candidate {@code Advisor}s in the current {@code BeanFactory}. This class is, + * completely generic; it contains no special code to handle any particular aspects,, + * such as pooling aspects., + * of this type in the same factory - by setting the {@code usePrefix} property to true,, + * in which case only advisors beginning with the DefaultAdvisorAutoProxyCreator's bean, + * name followed by a dot (like "aapc.") will be used. This default prefix can be changed, + * from the bean name by setting the {@code advisorBeanNamePrefix} property., +	private boolean usePrefix = false;, +	 * Set whether to only include advisors with a certain prefix in the bean name., +	 * <p>Default is {@code false}, including all beans of type {@code Advisor}., +	 * @see #setAdvisorBeanNamePrefix, +	 * Return whether to only include advisors with a certain prefix in the bean name., +	 * Consider {@code Advisor} beans with the specified prefix as eligible, if activated., +++ b/spring-context/src/main/java/org/springframework/format/datetime/DateFormatter.java, +	private static final TimeZone UTC = TimeZone.getTimeZone("UTC");, +, +			format.setTimeZone(UTC);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/DefaultAdvisorAutoProxyCreator.java, + * Copyright 2002-2016 the original author or authors., + * {@code BeanPostProcessor} implementation that creates AOP proxies based on all, + * candidate {@code Advisor}s in the current {@code BeanFactory}. This class is, + * completely generic; it contains no special code to handle any particular aspects,, + * such as pooling aspects., + * of this type in the same factory - by setting the {@code usePrefix} property to true,, + * in which case only advisors beginning with the DefaultAdvisorAutoProxyCreator's bean, + * name followed by a dot (like "aapc.") will be used. This default prefix can be changed, + * from the bean name by setting the {@code advisorBeanNamePrefix} property., +	private boolean usePrefix = false;, +	 * Set whether to only include advisors with a certain prefix in the bean name., +	 * <p>Default is {@code false}, including all beans of type {@code Advisor}., +	 * @see #setAdvisorBeanNamePrefix, +	 * Return whether to only include advisors with a certain prefix in the bean name., +	 * Consider {@code Advisor} beans with the specified prefix as eligible, if activated., +++ b/spring-context/src/main/java/org/springframework/format/datetime/DateFormatter.java, +	private static final TimeZone UTC = TimeZone.getTimeZone("UTC");, +, +			format.setTimeZone(UTC);, +++ b/spring-context/src/main/java/org/springframework/format/datetime/DateFormatterRegistrar.java, + * Copyright 2002-2016 the original author or authors., + * Configures basic date formatting for use with Spring, primarily for, + * {@link org.springframework.format.annotation.DateTimeFormat} declarations., + * Applies to fields of type {@link Date}, {@link Calendar} and {@code long}., + * {@link #addDateConverters(ConverterRegistry)} utility method for, + * ad-hoc use against any {@code ConverterRegistry} instance., + * @see org.springframework.format.datetime.standard.DateTimeFormatterRegistrar, +	 * Set a global date formatter to register., +	 * <p>If not specified, no general formatter for non-annotated, +	 * {@link Date} and {@link Calendar} fields will be registered., +++ b/spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/DefaultAdvisorAutoProxyCreator.java, + * Copyright 2002-2016 the original author or authors., + * {@code BeanPostProcessor} implementation that creates AOP proxies based on all, + * candidate {@code Advisor}s in the current {@code BeanFactory}. This class is, + * completely generic; it contains no special code to handle any particular aspects,, + * such as pooling aspects., + * of this type in the same factory - by setting the {@code usePrefix} property to true,, + * in which case only advisors beginning with the DefaultAdvisorAutoProxyCreator's bean, + * name followed by a dot (like "aapc.") will be used. This default prefix can be changed, + * from the bean name by setting the {@code advisorBeanNamePrefix} property., +	private boolean usePrefix = false;, +	 * Set whether to only include advisors with a certain prefix in the bean name., +	 * <p>Default is {@code false}, including all beans of type {@code Advisor}., +	 * @see #setAdvisorBeanNamePrefix, +	 * Return whether to only include advisors with a certain prefix in the bean name., +	 * Consider {@code Advisor} beans with the specified prefix as eligible, if activated., +++ b/spring-context/src/main/java/org/springframework/format/datetime/DateFormatter.java, +	private static final TimeZone UTC = TimeZone.getTimeZone("UTC");, +, +			format.setTimeZone(UTC);, +++ b/spring-context/src/main/java/org/springframework/format/datetime/DateFormatterRegistrar.java, + * Copyright 2002-2016 the original author or authors., + * Configures basic date formatting for use with Spring, primarily for, + * {@link org.springframework.format.annotation.DateTimeFormat} declarations., + * Applies to fields of type {@link Date}, {@link Calendar} and {@code long}., + * {@link #addDateConverters(ConverterRegistry)} utility method for, + * ad-hoc use against any {@code ConverterRegistry} instance., + * @see org.springframework.format.datetime.standard.DateTimeFormatterRegistrar, +	 * Set a global date formatter to register., +	 * <p>If not specified, no general formatter for non-annotated, +	 * {@link Date} and {@link Calendar} fields will be registered., +++ b/spring-context/src/main/java/org/springframework/format/datetime/DateTimeFormatAnnotationFormatterFactory.java, + * Formats fields annotated with the {@link DateTimeFormat} annotation using a {@link DateFormatter}.]