[+++ b/spring-framework-reference/src/testing.xml, +        <title>Context management</title>, +          does not mean that you cannot use both.</para>, +, +          <para>If you want to use XML <emphasis role="bold">and</emphasis>, +          <interfacename>@Configuration</interfacename> classes via component, +          scanning or define them as normal Spring beans in XML; whereas, in a, +          loaded from, but you still have the freedom to include or import the, +          other type of configuration.</para>, +        <section id="testcontext-ctx-management-env-profiles">, +          <title>Context configuration with environment profiles</title>, +, +          <para>Spring 3.1 introduces first-class support in the framework for, +          the notion of environments and profiles (a.k.a., bean definition, +          profiles), and integration tests can now be configured to activate, +          particular bean definition profiles for various testing scenarios., +          This is achieved by annotating a test class with the new, +          @ActiveProfiles annotation and supplying a list of profiles that, +          should be activated when loading the ApplicationContext for the, +          test.</para>, +, +          <note>, +            <para>@ActiveProfiles may be used with any implementation of the, +            new SmartContextLoader SPI, but @ActiveProfiles is not supported, +            with implementations of the older ContextLoader SPI.</para>, +          </note>, +, +          <para>Let's take a look at some examples with XML configuration and, +          @Configuration classes.</para>, +, +          <programlisting language="xml">&lt;!-- app-config.xml --&gt;, +&lt;beans xmlns="http://www.springframework.org/schema/beans", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xmlns:jdbc="http://www.springframework.org/schema/jdbc", +    xmlns:jee="http://www.springframework.org/schema/jee", +    xsi:schemaLocation="..."&gt;, +, +    &lt;bean id="transferService", +        class="com.bank.service.internal.DefaultTransferService"&gt;, +        &lt;constructor-arg ref="accountRepository"/&gt;, +        &lt;constructor-arg ref="feePolicy"/&gt;, +    &lt;/bean&gt;, +, +    &lt;bean id="accountRepository", +        class="com.bank.repository.internal.JdbcAccountRepository"&gt;, +        &lt;constructor-arg ref="dataSource"/&gt;, +    &lt;/bean&gt;, +, +    &lt;bean id="feePolicy", +        class="com.bank.service.internal.ZeroFeePolicy"/&gt;, +, +    &lt;beans profile="dev"&gt;, +        &lt;jdbc:embedded-database id="dataSource"&gt;, +            &lt;jdbc:script, +                location="classpath:com/bank/config/sql/schema.sql"/&gt;, +            &lt;jdbc:script, +                location="classpath:com/bank/config/sql/test-data.sql"/&gt;, +        &lt;/jdbc:embedded-database&gt;, +    &lt;/beans&gt;, +, +    &lt;beans profile="production"&gt;, +        &lt;jee:jndi-lookup id="dataSource", +            jndi-name="java:comp/env/jdbc/datasource"/&gt;, +    &lt;/beans&gt;, +, +&lt;/beans&gt;</programlisting>, +, +          <programlisting language="java">package com.bank.service;, +, +@RunWith(SpringJUnit4ClassRunner.class), +// ApplicationContext will be loaded from "classpath:/app-config.xml", +@ContextConfiguration("/app-config.xml"), +@ActiveProfiles("dev"), +public class TransferServiceTest {, +, +   @Autowired, +   private TransferService transferService;, +, +   @Test, +   public void testTransferService() {, +       // test the transferService, +   }, +}</programlisting>, +, +          <para>When TransferServiceTest is run, its ApplicationContext will, +          be loaded from the app-config.xml configuration file in the root of, +          the classpath. If you inspect app-config.xml you'll notice that the, +          accountRepository bean has a dependency on a dataSource bean;, +          however, dataSource is not defined as a top-level bean. Instead,, +          dataSource is defined twice: once in the production profile and once, +          in the dev profile.</para>, +, +          <para>By annotating TransferServiceTest with @ActiveProfiles("dev"), +          we instruct the Spring TestContext Framework to load the, +          ApplicationContext with the active profiles set to {"dev"}. As a, +          result, an embedded database will be created, and the, +          accountRepository bean will be wired with a reference to the, +          development DataSource. And that's likely what we want in an, +          integration test.</para>, +]