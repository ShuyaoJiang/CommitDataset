[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, +	 * Return the bean instance that uniquely matches the given object type, if any., +	 * @param requiredType type the bean must match; can be an interface or superclass., +	 * {@literal null} is disallowed., +	 * @return bean matching required type, +	 * @throws NoSuchBeanDefinitionException if there is not exactly one matching bean found, +	 */, +	<T> T getBean(Class<T> requiredType) throws BeansException;, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, +	 * Return the bean instance that uniquely matches the given object type, if any., +	 * @param requiredType type the bean must match; can be an interface or superclass., +	 * {@literal null} is disallowed., +	 * @return bean matching required type, +	 * @throws NoSuchBeanDefinitionException if there is not exactly one matching bean found, +	 */, +	<T> T getBean(Class<T> requiredType) throws BeansException;, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +	public <T> T getBean(Class<T> requiredType) throws BeansException {, +		String[] beanNames = getBeanNamesForType(requiredType);, +		if (beanNames.length == 1) {, +			return getBean(beanNames[0], requiredType);, +		}, +		else if (beanNames.length == 0 && getParentBeanFactory() != null) {, +			return getParentBeanFactory().getBean(requiredType);, +		}, +		else {, +			throw new NoSuchBeanDefinitionException(requiredType, "expected single bean but found " + beanNames.length);, +		}, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, +	 * Return the bean instance that uniquely matches the given object type, if any., +	 * @param requiredType type the bean must match; can be an interface or superclass., +	 * {@literal null} is disallowed., +	 * @return bean matching required type, +	 * @throws NoSuchBeanDefinitionException if there is not exactly one matching bean found, +	 */, +	<T> T getBean(Class<T> requiredType) throws BeansException;, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +	public <T> T getBean(Class<T> requiredType) throws BeansException {, +		String[] beanNames = getBeanNamesForType(requiredType);, +		if (beanNames.length == 1) {, +			return getBean(beanNames[0], requiredType);, +		}, +		else if (beanNames.length == 0 && getParentBeanFactory() != null) {, +			return getParentBeanFactory().getBean(requiredType);, +		}, +		else {, +			throw new NoSuchBeanDefinitionException(requiredType, "expected single bean but found " + beanNames.length);, +		}, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/StaticListableBeanFactory.java, +	public <T> T getBean(Class<T> requiredType) throws BeansException {, +		String[] beanNames = getBeanNamesForType(requiredType);, +		if (beanNames.length == 1) {, +			return getBean(beanNames[0], requiredType);, +		}, +		else {, +			throw new NoSuchBeanDefinitionException(requiredType, "expected single bean but found " + beanNames.length);, +		}, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, +	 * Return the bean instance that uniquely matches the given object type, if any., +	 * @param requiredType type the bean must match; can be an interface or superclass., +	 * {@literal null} is disallowed., +	 * @return bean matching required type, +	 * @throws NoSuchBeanDefinitionException if there is not exactly one matching bean found, +	 */, +	<T> T getBean(Class<T> requiredType) throws BeansException;, +, +	/**, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +	public <T> T getBean(Class<T> requiredType) throws BeansException {, +		String[] beanNames = getBeanNamesForType(requiredType);, +		if (beanNames.length == 1) {, +			return getBean(beanNames[0], requiredType);, +		}, +		else if (beanNames.length == 0 && getParentBeanFactory() != null) {, +			return getParentBeanFactory().getBean(requiredType);, +		}, +		else {, +			throw new NoSuchBeanDefinitionException(requiredType, "expected single bean but found " + beanNames.length);, +		}, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/StaticListableBeanFactory.java, +	public <T> T getBean(Class<T> requiredType) throws BeansException {, +		String[] beanNames = getBeanNamesForType(requiredType);, +		if (beanNames.length == 1) {, +			return getBean(beanNames[0], requiredType);, +		}, +		else {]