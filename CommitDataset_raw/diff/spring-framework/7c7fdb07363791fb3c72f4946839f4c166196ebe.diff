[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import java.util.LinkedList;, +import java.util.List;, +import org.springframework.beans.factory.BeanDefinitionStoreException;, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.support.AbstractBeanDefinition;, +import org.springframework.core.annotation.AnnotationAwareOrderComparator;, +	private static final Comparator<DeferredImportSelectorHolder> DEFERRED_IMPORT_COMPARATOR =, +			new Comparator<ConfigurationClassParser.DeferredImportSelectorHolder>() {, +		public int compare(DeferredImportSelectorHolder o1,, +				DeferredImportSelectorHolder o2) {, +			return AnnotationAwareOrderComparator.INSTANCE.compare(, +					o1.getImportSelector(), o2.getImportSelector());, +		}, +	};, +, +	private final List<DeferredImportSelectorHolder> deferredImportSelectors =, +			new LinkedList<DeferredImportSelectorHolder>();, +	public void parse(Set<BeanDefinitionHolder> configCandidates) {, +		for (BeanDefinitionHolder holder : configCandidates) {, +			BeanDefinition bd = holder.getBeanDefinition();, +			try {, +				if (bd instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) bd).hasBeanClass()) {, +					parse(((AbstractBeanDefinition) bd).getBeanClass(), holder.getBeanName());, +				}, +				else {, +					parse(bd.getBeanClassName(), holder.getBeanName());, +				}, +			}, +			catch (IOException ex) {, +				throw new BeanDefinitionStoreException("Failed to load bean class: " + bd.getBeanClassName(), ex);, +			}, +		}, +		processDeferredImportSelectors();, +	}, +	protected void parse(Class<?> clazz, String beanName) throws IOException {, +	private void processDeferredImportSelectors() {, +		Collections.sort(this.deferredImportSelectors, DEFERRED_IMPORT_COMPARATOR);, +		for (DeferredImportSelectorHolder deferredImport : this.deferredImportSelectors) {, +			try {, +				ConfigurationClass configClass = deferredImport.getConfigurationClass();, +				String[] imports = deferredImport.getImportSelector().selectImports(configClass.getMetadata());, +				processImport(configClass, Arrays.asList(imports), false);, +			}, +			catch (IOException ex) {, +				throw new BeanDefinitionStoreException("Failed to load bean class: ", ex);, +			}, +		}, +		deferredImportSelectors.clear();, +	}, +, +						if(selector instanceof DeferredImportSelector) {, +							this.deferredImportSelectors.add(new DeferredImportSelectorHolder(, +									configClass, (DeferredImportSelector) selector));, +						} else {, +					}, +, +	private static class DeferredImportSelectorHolder {, +, +		private ConfigurationClass configurationClass;, +, +		private DeferredImportSelector importSelector;, +, +		public DeferredImportSelectorHolder(ConfigurationClass configurationClass, DeferredImportSelector importSelector) {, +			this.configurationClass = configurationClass;, +			this.importSelector = importSelector;, +		}, +, +		public ConfigurationClass getConfigurationClass() {, +			return configurationClass;, +		}, +, +		public DeferredImportSelector getImportSelector() {, +			return importSelector;, +		}, +	}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import java.util.LinkedList;, +import java.util.List;, +import org.springframework.beans.factory.BeanDefinitionStoreException;, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.support.AbstractBeanDefinition;, +import org.springframework.core.annotation.AnnotationAwareOrderComparator;, +	private static final Comparator<DeferredImportSelectorHolder> DEFERRED_IMPORT_COMPARATOR =, +			new Comparator<ConfigurationClassParser.DeferredImportSelectorHolder>() {, +		public int compare(DeferredImportSelectorHolder o1,, +				DeferredImportSelectorHolder o2) {, +			return AnnotationAwareOrderComparator.INSTANCE.compare(, +					o1.getImportSelector(), o2.getImportSelector());, +		}, +	};, +, +	private final List<DeferredImportSelectorHolder> deferredImportSelectors =, +			new LinkedList<DeferredImportSelectorHolder>();, +	public void parse(Set<BeanDefinitionHolder> configCandidates) {, +		for (BeanDefinitionHolder holder : configCandidates) {, +			BeanDefinition bd = holder.getBeanDefinition();, +			try {, +				if (bd instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) bd).hasBeanClass()) {, +					parse(((AbstractBeanDefinition) bd).getBeanClass(), holder.getBeanName());]