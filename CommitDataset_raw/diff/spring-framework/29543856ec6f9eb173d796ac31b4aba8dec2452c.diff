[+++ b/spring-web/src/main/java/org/springframework/http/client/OkHttp3ClientHttpRequestFactory.java, +	 * @see OkHttpClient.Builder#readTimeout(long, TimeUnit), +	 * @see OkHttpClient.Builder#writeTimeout(long, TimeUnit), +	 * @see OkHttpClient.Builder#connectTimeout(long, TimeUnit), +	static Request buildRequest(HttpHeaders headers, byte[] content, URI uri, HttpMethod method), +			throws MalformedURLException {, +		RequestBody body = (content.length > 0 ||, +				okhttp3.internal.http.HttpMethod.requiresRequestBody(method.name()) ?, +				RequestBody.create(contentType, content) : null);, +		Request.Builder builder = new Request.Builder().url(uri.toURL()).method(method.name(), body);, +++ b/spring-web/src/main/java/org/springframework/http/client/OkHttp3ClientHttpRequestFactory.java, +	 * @see OkHttpClient.Builder#readTimeout(long, TimeUnit), +	 * @see OkHttpClient.Builder#writeTimeout(long, TimeUnit), +	 * @see OkHttpClient.Builder#connectTimeout(long, TimeUnit), +	static Request buildRequest(HttpHeaders headers, byte[] content, URI uri, HttpMethod method), +			throws MalformedURLException {, +		RequestBody body = (content.length > 0 ||, +				okhttp3.internal.http.HttpMethod.requiresRequestBody(method.name()) ?, +				RequestBody.create(contentType, content) : null);, +		Request.Builder builder = new Request.Builder().url(uri.toURL()).method(method.name(), body);, +++ b/spring-web/src/main/java/org/springframework/http/client/OkHttpClientHttpRequestFactory.java, +	static Request buildRequest(HttpHeaders headers, byte[] content, URI uri, HttpMethod method), +			throws MalformedURLException {, +		RequestBody body = (content.length > 0 ||, +				com.squareup.okhttp.internal.http.HttpMethod.requiresRequestBody(method.name()) ?, +				RequestBody.create(contentType, content) : null);, +		Request.Builder builder = new Request.Builder().url(uri.toURL()).method(method.name(), body);, +++ b/spring-web/src/main/java/org/springframework/http/client/OkHttp3ClientHttpRequestFactory.java, +	 * @see OkHttpClient.Builder#readTimeout(long, TimeUnit), +	 * @see OkHttpClient.Builder#writeTimeout(long, TimeUnit), +	 * @see OkHttpClient.Builder#connectTimeout(long, TimeUnit), +	static Request buildRequest(HttpHeaders headers, byte[] content, URI uri, HttpMethod method), +			throws MalformedURLException {, +		RequestBody body = (content.length > 0 ||, +				okhttp3.internal.http.HttpMethod.requiresRequestBody(method.name()) ?, +				RequestBody.create(contentType, content) : null);, +		Request.Builder builder = new Request.Builder().url(uri.toURL()).method(method.name(), body);, +++ b/spring-web/src/main/java/org/springframework/http/client/OkHttpClientHttpRequestFactory.java, +	static Request buildRequest(HttpHeaders headers, byte[] content, URI uri, HttpMethod method), +			throws MalformedURLException {, +		RequestBody body = (content.length > 0 ||, +				com.squareup.okhttp.internal.http.HttpMethod.requiresRequestBody(method.name()) ?, +				RequestBody.create(contentType, content) : null);, +		Request.Builder builder = new Request.Builder().url(uri.toURL()).method(method.name(), body);, +++ b/spring-web/src/test/java/org/springframework/web/client/AbstractMockWebServerTestCase.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +import static org.junit.Assert.*;, +	protected static final MediaType textContentType =, +			new MediaType("text", "plain", Collections.singletonMap("charset", "UTF-8"));, +, +, +	private MockResponse getRequest(RecordedRequest request, byte[] body, String contentType) {, +		if (request.getMethod().equals("OPTIONS")) {, +			return new MockResponse().setResponseCode(200).setHeader("Allow", "GET, OPTIONS, HEAD, TRACE");, +		}, +		Buffer buf = new Buffer();, +		buf.write(body);, +		MockResponse response = new MockResponse(), +				.setHeader("Content-Length", body.length), +				.setBody(buf), +				.setResponseCode(200);, +		if (contentType != null) {, +			response = response.setHeader("Content-Type", contentType);, +		}, +		return response;, +	}, +, +	private MockResponse postRequest(RecordedRequest request, String expectedRequestContent,, +			String location, String contentType, byte[] responseBody) {, +, +		assertTrue("Invalid request content-length",, +				Integer.parseInt(request.getHeader("Content-Length")) > 0);, +		String requestContentType = request.getHeader("Content-Type");, +		assertNotNull("No content-type", requestContentType);, +		Charset charset = StandardCharsets.ISO_8859_1;, +		if (requestContentType.contains("charset=")) {, +			String charsetName = requestContentType.split("charset=")[1];, +			charset = Charset.forName(charsetName);, +		}, +		assertEquals("Invalid request body", expectedRequestContent, request.getBody().readString(charset));, +		Buffer buf = new Buffer();, +		buf.write(responseBody);, +		return new MockResponse(), +				.setHeader("Location", baseUrl + location), +				.setHeader("Content-Type", contentType)]