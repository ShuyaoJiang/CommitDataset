[+++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +			Class<?> currClass = beanClass;, +			while (currClass != null && currClass != Object.class) {, +				introspectInterfaces(beanClass, currClass);, +				currClass = currClass.getSuperclass();, +	private void introspectInterfaces(Class<?> beanClass, Class<?> currClass) throws IntrospectionException {, +		for (Class<?> ifc : currClass.getInterfaces()) {, +			if (!ClassUtils.isJavaLanguageInterface(ifc)) {, +				for (PropertyDescriptor pd : getBeanInfo(ifc).getPropertyDescriptors()) {, +					PropertyDescriptor existingPd = this.propertyDescriptorCache.get(pd.getName());, +					if (existingPd == null ||, +							(existingPd.getReadMethod() == null && pd.getReadMethod() != null)) {, +						// GenericTypeAwarePropertyDescriptor leniently resolves a set* write method, +						// against a declared read method, so we prefer read method descriptors here., +						pd = buildGenericTypeAwarePropertyDescriptor(beanClass, pd);, +						this.propertyDescriptorCache.put(pd.getName(), pd);, +					}, +				}, +				introspectInterfaces(ifc, ifc);, +			}, +		}, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +			Class<?> currClass = beanClass;, +			while (currClass != null && currClass != Object.class) {, +				introspectInterfaces(beanClass, currClass);, +				currClass = currClass.getSuperclass();, +	private void introspectInterfaces(Class<?> beanClass, Class<?> currClass) throws IntrospectionException {, +		for (Class<?> ifc : currClass.getInterfaces()) {, +			if (!ClassUtils.isJavaLanguageInterface(ifc)) {, +				for (PropertyDescriptor pd : getBeanInfo(ifc).getPropertyDescriptors()) {, +					PropertyDescriptor existingPd = this.propertyDescriptorCache.get(pd.getName());, +					if (existingPd == null ||, +							(existingPd.getReadMethod() == null && pd.getReadMethod() != null)) {, +						// GenericTypeAwarePropertyDescriptor leniently resolves a set* write method, +						// against a declared read method, so we prefer read method descriptors here., +						pd = buildGenericTypeAwarePropertyDescriptor(beanClass, pd);, +						this.propertyDescriptorCache.put(pd.getName(), pd);, +					}, +				}, +				introspectInterfaces(ifc, ifc);, +			}, +		}, +	}, +, +++ b/spring-beans/src/test/java/org/springframework/beans/BeanWrapperTests.java, + * Copyright 2002-2018 the original author or authors., +		assertEquals("tom", target.getAliasedName());, +		assertEquals("tom", accessor.getPropertyValue("aliasedName"));, +		assertEquals("tom", target.getAliasedName());, +		assertEquals("tom", accessor.getPropertyValue("aliasedName"));, +		assertEquals("tom", target.getAliasedName());, +		assertEquals("tom", accessor.getPropertyValue("aliasedName"));, +	private interface BaseProperty {, +	private interface AliasedProperty extends BaseProperty {, +, +		default void setAliasedName(String name) {, +			setName(name);, +		}, +, +		void setName(String name);, +	}, +, +, +	@SuppressWarnings("unused")]