[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlEncodingFilter.java, +			if(url.length() >= this.indexLookupPath) {, +				if (lookupPath != null) {, +					return super.encodeURL(prefix + lookupPath);, +				}, +			}, +			return super.encodeURL(url);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlEncodingFilter.java, +			if(url.length() >= this.indexLookupPath) {, +				if (lookupPath != null) {, +					return super.encodeURL(prefix + lookupPath);, +				}, +			}, +			return super.encodeURL(url);, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/ResourceUrlEncodingFilterTests.java, +	// SPR-13018, +	@Test, +	public void encodeEmptyURLWithContext() throws Exception {, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/context/foo");, +		request.setContextPath("/context");, +		request.setAttribute(ResourceUrlProviderExposingInterceptor.RESOURCE_URL_PROVIDER_ATTR, this.resourceUrlProvider);, +		MockHttpServletResponse response = new MockHttpServletResponse();, +, +		this.filter.doFilterInternal(request, response, new FilterChain() {, +			@Override, +			public void doFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException {, +				String result = ((HttpServletResponse)response).encodeURL("?foo=1");, +				assertEquals("?foo=1", result);, +			}, +		});, +	}, +]