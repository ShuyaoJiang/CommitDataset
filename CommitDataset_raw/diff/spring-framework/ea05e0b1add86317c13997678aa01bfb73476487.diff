[+++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelFactory.java, +		ModelMap defaultModel = mavContainer.getDefaultModel();, +			this.sessionAttributesHandler.storeAttributes(request, defaultModel);, +		if (!mavContainer.isRequestHandled() && mavContainer.getModel() == defaultModel) {, +			updateBindingResult(request, defaultModel);, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelFactory.java, +		ModelMap defaultModel = mavContainer.getDefaultModel();, +			this.sessionAttributesHandler.storeAttributes(request, defaultModel);, +		if (!mavContainer.isRequestHandled() && mavContainer.getModel() == defaultModel) {, +			updateBindingResult(request, defaultModel);, +++ b/spring-web/src/main/java/org/springframework/web/method/support/ModelAndViewContainer.java, +	 * Return the "default" model created at instantiation., +	 * <p>In general it is recommended to use {@link #getModel()} instead which, +	 * returns either the "default" model (template rendering) or the "redirect", +	 * model (redirect URL preparation). Use of this method may be needed for, +	 * advanced cases when access to the "default" model is needed regardless,, +	 * e.g. to save model attributes specified via {@code @SessionAttributes}., +	 * @return the default model, never {@code null}, +	 */, +	public ModelMap getDefaultModel() {, +		return this.defaultModel;, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelFactory.java, +		ModelMap defaultModel = mavContainer.getDefaultModel();, +			this.sessionAttributesHandler.storeAttributes(request, defaultModel);, +		if (!mavContainer.isRequestHandled() && mavContainer.getModel() == defaultModel) {, +			updateBindingResult(request, defaultModel);, +++ b/spring-web/src/main/java/org/springframework/web/method/support/ModelAndViewContainer.java, +	 * Return the "default" model created at instantiation., +	 * <p>In general it is recommended to use {@link #getModel()} instead which, +	 * returns either the "default" model (template rendering) or the "redirect", +	 * model (redirect URL preparation). Use of this method may be needed for, +	 * advanced cases when access to the "default" model is needed regardless,, +	 * e.g. to save model attributes specified via {@code @SessionAttributes}., +	 * @return the default model, never {@code null}, +	 */, +	public ModelMap getDefaultModel() {, +		return this.defaultModel;, +	}, +, +	/**, +++ b/spring-web/src/test/java/org/springframework/web/method/annotation/ModelFactoryTests.java, +	// SPR-12542, +, +	@Test, +	public void updateModelWhenRedirecting() throws Exception {, +		String attributeName = "sessionAttr";, +		String attribute = "value";, +		ModelAndViewContainer container = new ModelAndViewContainer();, +		container.addAttribute(attributeName, attribute);, +, +		String queryParam = "123";, +		String queryParamName = "q";, +		container.setRedirectModel(new ModelMap(queryParamName, queryParam));, +		container.setRedirectModelScenario(true);, +, +		WebDataBinder dataBinder = new WebDataBinder(attribute, attributeName);, +		WebDataBinderFactory binderFactory = mock(WebDataBinderFactory.class);, +		given(binderFactory.createBinder(this.webRequest, attribute, attributeName)).willReturn(dataBinder);, +, +		ModelFactory modelFactory = new ModelFactory(null, binderFactory, this.sessionAttrsHandler);, +		modelFactory.updateModel(this.webRequest, container);, +, +		assertEquals(queryParam, container.getModel().get(queryParamName));, +		assertEquals(1, container.getModel().size());, +		assertEquals(attribute, this.sessionAttributeStore.retrieveAttribute(this.webRequest, attributeName));, +	}, +]