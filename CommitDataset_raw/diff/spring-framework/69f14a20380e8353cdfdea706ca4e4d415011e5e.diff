[+++ b/spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java, +					// No HTTP OK status, and no content-length header: give up, +					getInputStream().close();, +		catch (Exception ex) {, +				// Try InputStream resolution for jar resources, +				URLConnection con = url.openConnection();, +				customizeConnection(con);, +				if (con instanceof HttpURLConnection) {, +					HttpURLConnection httpCon = (HttpURLConnection) con;, +					int code = httpCon.getResponseCode();, +					if (code != HttpURLConnection.HTTP_OK) {, +						httpCon.disconnect();, +						return false;, +					}, +				}, +				int contentLength = con.getContentLength();, +				if (contentLength > 0) {, +					return true;, +				}, +				else if (contentLength < 0) {, +					return false;, +				}, +				// 0 length: either an empty file or a directory..., +				// On current JDKs, this will trigger an NPE from within the close() call, +				// for directories, only returning true for actual files with 0 length., +				getInputStream().close();, +		catch (Exception ex) {, +			// Usually an IOException but potentially a NullPointerException (see above), +		catch (Exception ex) {, +		catch (Exception ex) {, +++ b/spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java, +					// No HTTP OK status, and no content-length header: give up, +					getInputStream().close();, +		catch (Exception ex) {, +				// Try InputStream resolution for jar resources, +				URLConnection con = url.openConnection();, +				customizeConnection(con);, +				if (con instanceof HttpURLConnection) {, +					HttpURLConnection httpCon = (HttpURLConnection) con;, +					int code = httpCon.getResponseCode();, +					if (code != HttpURLConnection.HTTP_OK) {, +						httpCon.disconnect();, +						return false;, +					}, +				}, +				int contentLength = con.getContentLength();, +				if (contentLength > 0) {, +					return true;, +				}, +				else if (contentLength < 0) {, +					return false;, +				}, +				// 0 length: either an empty file or a directory..., +				// On current JDKs, this will trigger an NPE from within the close() call, +				// for directories, only returning true for actual files with 0 length., +				getInputStream().close();, +		catch (Exception ex) {, +			// Usually an IOException but potentially a NullPointerException (see above), +		catch (Exception ex) {, +		catch (Exception ex) {, +++ b/spring-core/src/main/java/org/springframework/core/io/AbstractResource.java, + * Copyright 2002-2018 the original author or authors., +				getInputStream().close();, +	 * This implementation always returns {@code true} for a resource, +	 * that {@link #exists() exists} (revised as of 5.1)., +		return exists();, +++ b/spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java, +					// No HTTP OK status, and no content-length header: give up, +					getInputStream().close();, +		catch (Exception ex) {, +				// Try InputStream resolution for jar resources, +				URLConnection con = url.openConnection();, +				customizeConnection(con);, +				if (con instanceof HttpURLConnection) {, +					HttpURLConnection httpCon = (HttpURLConnection) con;, +					int code = httpCon.getResponseCode();, +					if (code != HttpURLConnection.HTTP_OK) {, +						httpCon.disconnect();, +						return false;, +					}, +				}, +				int contentLength = con.getContentLength();, +				if (contentLength > 0) {, +					return true;, +				}, +				else if (contentLength < 0) {, +					return false;, +				}, +				// 0 length: either an empty file or a directory..., +				// On current JDKs, this will trigger an NPE from within the close() call, +				// for directories, only returning true for actual files with 0 length., +				getInputStream().close();, +		catch (Exception ex) {, +			// Usually an IOException but potentially a NullPointerException (see above), +		catch (Exception ex) {, +		catch (Exception ex) {, +++ b/spring-core/src/main/java/org/springframework/core/io/AbstractResource.java, + * Copyright 2002-2018 the original author or authors., +				getInputStream().close();, +	 * This implementation always returns {@code true} for a resource]