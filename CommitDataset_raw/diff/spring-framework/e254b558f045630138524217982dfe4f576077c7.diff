[+++ b/spring-messaging/src/main/java/org/springframework/messaging/support/MessageBuilder.java, +	private final Message<T> originalMessage;, +, +		Assert.notNull(originalMessage, "Message must not be null");, +		this.headerAccessor = new MessageHeaderAccessor(originalMessage);, +		Assert.notNull(payload, "Payload must not be null");, +		Assert.notNull(accessor, "MessageHeaderAccessor must not be null");, +		this.headerAccessor = accessor;, +		Assert.notNull(accessor, "MessageHeaderAccessor must not be null");, +	 * @param payload the payload to use (never {@code null}), +	 * @param messageHeaders the headers to use (never {@code null}), +		Assert.notNull(payload, "Payload must not be null");, +		Assert.notNull(messageHeaders, "MessageHeaders must not be null");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/MessageBuilder.java, +	private final Message<T> originalMessage;, +, +		Assert.notNull(originalMessage, "Message must not be null");, +		this.headerAccessor = new MessageHeaderAccessor(originalMessage);, +		Assert.notNull(payload, "Payload must not be null");, +		Assert.notNull(accessor, "MessageHeaderAccessor must not be null");, +		this.headerAccessor = accessor;, +		Assert.notNull(accessor, "MessageHeaderAccessor must not be null");, +	 * @param payload the payload to use (never {@code null}), +	 * @param messageHeaders the headers to use (never {@code null}), +		Assert.notNull(payload, "Payload must not be null");, +		Assert.notNull(messageHeaders, "MessageHeaders must not be null");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java, +	public static final Charset DEFAULT_CHARSET = Charset.forName("UTF-8");, +, +	private static final MimeType[] READABLE_MIME_TYPES = new MimeType[] {, +	protected final Log logger = LogFactory.getLog(getClass());, +	private boolean leaveMutable = false;, +	private boolean modified = false;, +, +	private IdGenerator idGenerator;, +, +	 * {@link MessageHeaderAccessor#getAccessor(Message, Class), +	 * @see IdTimestampMessageHeaderInitializer, +	/**, +	 * A package-private mechanism to configure the IdGenerator strategy to use., +	 * <p>By default this property is not set in which case the default IdGenerator, +	 * in {@link org.springframework.messaging.MessageHeaders} is used., +	 * @see IdTimestampMessageHeaderInitializer, +	 */, +	void setIdGenerator(IdGenerator idGenerator) {, +		this.idGenerator = idGenerator;, +	}, +, +	 * Set the value for the given header name., +	 * <p>If the provided value is {@code null}, the header will be removed., +		if (isReadOnly(name)) {, +			throw new IllegalArgumentException("'" + name + "' header is read-only");, +		}, +				if (!(headerValue instanceof MessageChannel || headerValue instanceof String)) {, +					throw new IllegalArgumentException(, +							"'" + headerName + "' header value must be a MessageChannel or String");, +				}, +	 * Set the value for the given header name only if the header name is not, +	 * already associated with a value., +	 * Removes all headers provided via array of 'headerPatterns'., +	 * <p>As the name suggests, array may contain simple matching patterns for header, +	 * names. Supported pattern styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy"., +	 * Copy the name-value pairs from the provided Map., +	 * <p>This operation will overwrite any existing values. Use, +	 * {@link #copyHeadersIfAbsent(Map)} to avoid overwriting values., +	 * Copy the name-value pairs from the provided Map., +	 * <p>This operation will <em>not</em> overwrite any existing values., +		for (MimeType mimeType : READABLE_MIME_TYPES) {, +	/**, +	 * Return the original {@code MessageHeaderAccessor} used to create the headers, +	 * of the given {@code Message}, or {@code null} if that's not available or if, +	 * its type does not match the required type., +	 * <p>This is for cases where the existence of an accessor is strongly expected, +	 * (to be followed up with an assertion) or will created if not provided., +	 * @return an accessor instance of the specified type, or {@code null} if none, +	 * @since 4.1, +	 */, +	@SuppressWarnings("unchecked"), +	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType) {, +		return getAccessor(message.getHeaders(), requiredType);, +	}, +, +	/**, +	 * A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}, +	 * with a {@code MessageHeaders} instance instead of a {@code Message}., +	 * <p>This is for cases when a full message may not have been created yet., +	 * @return an accessor instance of the specified typem or {@code null} if none, +	 * @since 4.1, +	 */, +	@SuppressWarnings("unchecked"), +	public static <T extends MessageHeaderAccessor> T getAccessor(MessageHeaders messageHeaders, Class<T> requiredType) {, +		if (messageHeaders instanceof MutableMessageHeaders) {, +			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders;, +			MessageHeaderAccessor headerAccessor = mutableHeaders.getMessageHeaderAccessor();, +			if (requiredType.isAssignableFrom(headerAccessor.getClass()))  {, +				return (T) headerAccessor;, +			}, +		}, +		return null;, +	}]