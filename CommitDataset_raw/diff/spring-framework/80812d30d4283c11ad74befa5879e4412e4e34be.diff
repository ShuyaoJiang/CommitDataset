[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java, +	private static final AtomicLong messageIdCounter = new AtomicLong();, +, +	private static final String COMMAND_HEADER = "stompCommand";, +	private static final String CREDENTIALS_HEADER = "stompCredentials";, +		else if (StompCommand.CONNECT.equals(command)) {, +			if (!StringUtils.isEmpty(getPasscode())) {, +				setHeader(CREDENTIALS_HEADER, new StompPasscode(getPasscode()));, +				setPasscode("PROTECTED");, +			}, +		}, +	public Map<String, List<String>> toStompHeaderMap() {, +		if (StompCommand.CONNECT.equals(getCommand())) {, +			StompPasscode credentials = (StompPasscode) getHeader(CREDENTIALS_HEADER);, +			if (credentials != null) {, +				Map<String, List<String>> headers = toNativeHeaderMap();, +				headers.put(STOMP_PASSCODE_HEADER, Arrays.asList(credentials.passcode));, +				return headers;, +			}, +		}, +		return toNativeHeaderMap();, +	}, +, +, +	private static class StompPasscode {, +, +		private final String passcode;, +, +		public StompPasscode(String passcode) {, +			this.passcode = passcode;, +		}, +, +		@Override, +		public String toString() {, +			return "[PROTECTED]";, +		}, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java, +	private static final AtomicLong messageIdCounter = new AtomicLong();, +, +	private static final String COMMAND_HEADER = "stompCommand";, +	private static final String CREDENTIALS_HEADER = "stompCredentials";, +		else if (StompCommand.CONNECT.equals(command)) {, +			if (!StringUtils.isEmpty(getPasscode())) {, +				setHeader(CREDENTIALS_HEADER, new StompPasscode(getPasscode()));, +				setPasscode("PROTECTED");, +			}, +		}, +	public Map<String, List<String>> toStompHeaderMap() {, +		if (StompCommand.CONNECT.equals(getCommand())) {, +			StompPasscode credentials = (StompPasscode) getHeader(CREDENTIALS_HEADER);, +			if (credentials != null) {, +				Map<String, List<String>> headers = toNativeHeaderMap();, +				headers.put(STOMP_PASSCODE_HEADER, Arrays.asList(credentials.passcode));, +				return headers;, +			}, +		}, +		return toNativeHeaderMap();, +	}, +, +, +	private static class StompPasscode {, +, +		private final String passcode;, +, +		public StompPasscode(String passcode) {, +			this.passcode = passcode;, +		}, +, +		@Override, +		public String toString() {, +			return "[PROTECTED]";, +		}, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompMessageConverter.java, +			for (Entry<String, List<String>> entry : stompHeaders.toStompHeaderMap().entrySet()) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java, +	private static final AtomicLong messageIdCounter = new AtomicLong();, +, +	private static final String COMMAND_HEADER = "stompCommand";, +	private static final String CREDENTIALS_HEADER = "stompCredentials";, +		else if (StompCommand.CONNECT.equals(command)) {, +			if (!StringUtils.isEmpty(getPasscode())) {, +				setHeader(CREDENTIALS_HEADER, new StompPasscode(getPasscode()));, +				setPasscode("PROTECTED");, +			}, +		}, +	public Map<String, List<String>> toStompHeaderMap() {, +		if (StompCommand.CONNECT.equals(getCommand())) {, +			StompPasscode credentials = (StompPasscode) getHeader(CREDENTIALS_HEADER);, +			if (credentials != null) {, +				Map<String, List<String>> headers = toNativeHeaderMap();, +				headers.put(STOMP_PASSCODE_HEADER, Arrays.asList(credentials.passcode));, +				return headers;, +			}, +		}, +		return toNativeHeaderMap();, +	}, +, +]