[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationMappingUtils.java, + * Copyright 2002-2010 the original author or authors., + * @author Arjen Poutsma, +	 * @param params  the parameter conditions, following, +	 *                {@link org.springframework.web.bind.annotation.RequestMapping#params() RequestMapping.#params()}, +					boolean negated = separator > 0 && param.charAt(separator - 1) == '!';, +					String key = !negated ? param.substring(0, separator) : param.substring(0, separator - 1);, +						return negated;, +	 * @param headers the header conditions, following, +	 *                {@link org.springframework.web.bind.annotation.RequestMapping#headers() RequestMapping.headers()}, +					boolean negated = separator > 0 && header.charAt(separator - 1) == '!';, +					String key = !negated ? header.substring(0, separator) : header.substring(0, separator - 1);, +							for (Iterator<MediaType> reqIter = requestMediaTypes.iterator();, +									reqIter.hasNext() && !found;) {, +							return negated;, +						return negated;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationMappingUtils.java, + * Copyright 2002-2010 the original author or authors., + * @author Arjen Poutsma, +	 * @param params  the parameter conditions, following, +	 *                {@link org.springframework.web.bind.annotation.RequestMapping#params() RequestMapping.#params()}, +					boolean negated = separator > 0 && param.charAt(separator - 1) == '!';, +					String key = !negated ? param.substring(0, separator) : param.substring(0, separator - 1);, +						return negated;, +	 * @param headers the header conditions, following, +	 *                {@link org.springframework.web.bind.annotation.RequestMapping#headers() RequestMapping.headers()}, +					boolean negated = separator > 0 && header.charAt(separator - 1) == '!';, +					String key = !negated ? header.substring(0, separator) : header.substring(0, separator - 1);, +							for (Iterator<MediaType> reqIter = requestMediaTypes.iterator();, +									reqIter.hasNext() && !found;) {, +							return negated;, +						return negated;, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +	public void negatedContentTypeHeaders() throws ServletException, IOException {, +		initServlet(NegatedContentTypeHeadersController.class);, +, +		MockHttpServletRequest request = new MockHttpServletRequest("POST", "/something");, +		request.addHeader("Content-Type", "application/pdf");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("pdf", response.getContentAsString());, +, +		request = new MockHttpServletRequest("POST", "/something");, +		request.addHeader("Content-Type", "text/html");, +		response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("non-pdf", response.getContentAsString());, +	}, +, +	@Test, +	public static class NegatedContentTypeHeadersController {, +, +		@RequestMapping(value = "/something", headers = "content-type=application/pdf"), +		public void handlePdf(Writer writer) throws IOException {, +			writer.write("pdf");, +		}, +, +		@RequestMapping(value = "/something", headers = "content-type!=application/pdf"), +		public void handleNonPdf(Writer writer) throws IOException {, +			writer.write("non-pdf");, +		}, +, +	}, +, +	@Controller, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationMappingUtils.java, + * Copyright 2002-2010 the original author or authors., + * @author Arjen Poutsma, +	 * @param params  the parameter conditions, following, +	 *                {@link org.springframework.web.bind.annotation.RequestMapping#params() RequestMapping.#params()}, +					boolean negated = separator > 0 && param.charAt(separator - 1) == '!';, +					String key = !negated ? param.substring(0, separator) : param.substring(0, separator - 1);, +						return negated;, +	 * @param headers the header conditions, following, +	 *                {@link org.springframework.web.bind.annotation.RequestMapping#headers() RequestMapping.headers()}, +					boolean negated = separator > 0 && header.charAt(separator - 1) == '!';, +					String key = !negated ? header.substring(0, separator) : header.substring(0, separator - 1);, +							for (Iterator<MediaType> reqIter = requestMediaTypes.iterator();, +									reqIter.hasNext() && !found;) {, +							return negated;, +						return negated;, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +	public void negatedContentTypeHeaders() throws ServletException, IOException {, +		initServlet(NegatedContentTypeHeadersController.class);, +, +		MockHttpServletRequest request = new MockHttpServletRequest("POST", "/something");, +		request.addHeader("Content-Type", "application/pdf");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("pdf", response.getContentAsString());, +, +		request = new MockHttpServletRequest("POST", "/something");, +		request.addHeader("Content-Type", "text/html");, +		response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("non-pdf", response.getContentAsString());, +	}, +, +	@Test, +	public static class NegatedContentTypeHeadersController {]