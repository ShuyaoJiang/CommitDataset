[+++ b/org.springframework.web/src/main/java/org/springframework/http/client/AbstractBufferingClientHttpRequest.java, +abstract class AbstractBufferingClientHttpRequest extends AbstractClientHttpRequest {, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/AbstractBufferingClientHttpRequest.java, +abstract class AbstractBufferingClientHttpRequest extends AbstractClientHttpRequest {, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/AbstractClientHttpRequest.java, +	private boolean executed = false;, +, +, +		return (this.executed ? HttpHeaders.readOnlyHttpHeaders(this.headers) : this.headers);, +, +	/**, +	 * Abstract template method that returns the body., +	 * @param headers the HTTP headers, +	 * @return the body output stream, +	 */, +	protected abstract OutputStream getBodyInternal(HttpHeaders headers) throws IOException;, +, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/AbstractBufferingClientHttpRequest.java, +abstract class AbstractBufferingClientHttpRequest extends AbstractClientHttpRequest {, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/AbstractClientHttpRequest.java, +	private boolean executed = false;, +, +, +		return (this.executed ? HttpHeaders.readOnlyHttpHeaders(this.headers) : this.headers);, +, +	/**, +	 * Abstract template method that returns the body., +	 * @param headers the HTTP headers, +	 * @return the body output stream, +	 */, +	protected abstract OutputStream getBodyInternal(HttpHeaders headers) throws IOException;, +, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/AbstractClientHttpRequestFactoryWrapper.java, +, +, +	 * This implementation simply calls {@link #createRequest(URI, HttpMethod, ClientHttpRequestFactory)}, +	 * with the wrapped request factory provided to the, +	 * {@linkplain #AbstractClientHttpRequestFactoryWrapper(ClientHttpRequestFactory) constructor}., +	 * Create a new {@link ClientHttpRequest} for the specified URI and HTTP method by using the, +	 * passed-on request factory., +	protected abstract ClientHttpRequest createRequest(, +			URI uri, HttpMethod httpMethod, ClientHttpRequestFactory requestFactory) throws IOException;, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/AbstractBufferingClientHttpRequest.java, +abstract class AbstractBufferingClientHttpRequest extends AbstractClientHttpRequest {, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/AbstractClientHttpRequest.java, +	private boolean executed = false;, +, +, +		return (this.executed ? HttpHeaders.readOnlyHttpHeaders(this.headers) : this.headers);, +, +	/**, +	 * Abstract template method that returns the body., +	 * @param headers the HTTP headers, +	 * @return the body output stream, +	 */, +	protected abstract OutputStream getBodyInternal(HttpHeaders headers) throws IOException;, +, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/AbstractClientHttpRequestFactoryWrapper.java, +, +, +	 * This implementation simply calls {@link #createRequest(URI, HttpMethod, ClientHttpRequestFactory)}, +	 * with the wrapped request factory provided to the, +	 * {@linkplain #AbstractClientHttpRequestFactoryWrapper(ClientHttpRequestFactory) constructor}., +	 * Create a new {@link ClientHttpRequest} for the specified URI and HTTP method by using the, +	 * passed-on request factory., +	protected abstract ClientHttpRequest createRequest(, +			URI uri, HttpMethod httpMethod, ClientHttpRequestFactory requestFactory) throws IOException;, +++ /dev/null, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/AbstractBufferingClientHttpRequest.java, +abstract class AbstractBufferingClientHttpRequest extends AbstractClientHttpRequest {, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/AbstractClientHttpRequest.java, +	private boolean executed = false;, +, +, +		return (this.executed ? HttpHeaders.readOnlyHttpHeaders(this.headers) : this.headers);, +, +	/**, +	 * Abstract template method that returns the body., +	 * @param headers the HTTP headers, +	 * @return the body output stream, +	 */, +	protected abstract OutputStream getBodyInternal(HttpHeaders headers) throws IOException;, +, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/AbstractClientHttpRequestFactoryWrapper.java, +, +, +	 * This implementation simply calls {@link #createRequest(URI, HttpMethod, ClientHttpRequestFactory)}, +	 * with the wrapped request factory provided to the, +	 * {@linkplain #AbstractClientHttpRequestFactoryWrapper(ClientHttpRequestFactory) constructor}., +	 * Create a new {@link ClientHttpRequest} for the specified URI and HTTP method by using the, +	 * passed-on request factory., +	protected abstract ClientHttpRequest createRequest(, +			URI uri, HttpMethod httpMethod, ClientHttpRequestFactory requestFactory) throws IOException;, +++ /dev/null, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/BufferingClientHttpRequestFactory.java, +			return new BufferingClientHttpRequestWrapper(request);, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/AbstractBufferingClientHttpRequest.java, +abstract class AbstractBufferingClientHttpRequest extends AbstractClientHttpRequest {, +++ b/org.springframework.web/src/main/java/org/springframework/http/client/AbstractClientHttpRequest.java, +	private boolean executed = false;]