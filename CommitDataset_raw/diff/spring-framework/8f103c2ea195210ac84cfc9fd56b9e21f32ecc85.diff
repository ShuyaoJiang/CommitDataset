[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, + * Copyright 2002-2013 the original author or authors., +	 * @throws NoSuchBeanDefinitionException if there is no such bean definition, +	 * @throws NoSuchBeanDefinitionException if no bean of the given type was found, +	 * @throws NoUniqueBeanDefinitionException if more than one bean of the given type was found, +	 * @throws NoSuchBeanDefinitionException if there is no such bean definition, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, + * Copyright 2002-2013 the original author or authors., +	 * @throws NoSuchBeanDefinitionException if there is no such bean definition, +	 * @throws NoSuchBeanDefinitionException if no bean of the given type was found, +	 * @throws NoUniqueBeanDefinitionException if more than one bean of the given type was found, +	 * @throws NoSuchBeanDefinitionException if there is no such bean definition, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactoryUtils.java, + * Copyright 2002-2013 the original author or authors., +	 * @throws NoSuchBeanDefinitionException if no bean of the given type was found, +	 * @throws NoUniqueBeanDefinitionException if more than one bean of the given type was found, +		return uniqueBean(type, beansOfType);, +	 * @throws NoSuchBeanDefinitionException if no bean of the given type was found, +	 * @throws NoUniqueBeanDefinitionException if more than one bean of the given type was found, +		return uniqueBean(type, beansOfType);, +	 * @throws NoSuchBeanDefinitionException if no bean of the given type was found, +	 * @throws NoUniqueBeanDefinitionException if more than one bean of the given type was found, +		return uniqueBean(type, beansOfType);, +	 * @throws NoSuchBeanDefinitionException if no bean of the given type was found, +	 * @throws NoUniqueBeanDefinitionException if more than one bean of the given type was found, +		return uniqueBean(type, beansOfType);, +	}, +, +	/**, +	 * Extract a unique bean for the given type from the given Map of matching beans., +	 * @param type type of bean to match, +	 * @param matchingBeans all matching beans found, +	 * @return the unique bean instance, +	 * @throws NoSuchBeanDefinitionException if no bean of the given type was found, +	 * @throws NoUniqueBeanDefinitionException if more than one bean of the given type was found, +	 */, +	private static <T> T uniqueBean(Class<T> type, Map<String, T> matchingBeans) {, +		int nrFound = matchingBeans.size();, +		if (nrFound == 1) {, +			return matchingBeans.values().iterator().next();, +		}, +		else if (nrFound > 1) {, +			throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet());, +			throw new NoSuchBeanDefinitionException(type);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, + * Copyright 2002-2013 the original author or authors., +	 * @throws NoSuchBeanDefinitionException if there is no such bean definition, +	 * @throws NoSuchBeanDefinitionException if no bean of the given type was found, +	 * @throws NoUniqueBeanDefinitionException if more than one bean of the given type was found, +	 * @throws NoSuchBeanDefinitionException if there is no such bean definition, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactoryUtils.java, + * Copyright 2002-2013 the original author or authors., +	 * @throws NoSuchBeanDefinitionException if no bean of the given type was found, +	 * @throws NoUniqueBeanDefinitionException if more than one bean of the given type was found, +		return uniqueBean(type, beansOfType);, +	 * @throws NoSuchBeanDefinitionException if no bean of the given type was found, +	 * @throws NoUniqueBeanDefinitionException if more than one bean of the given type was found, +		return uniqueBean(type, beansOfType);, +	 * @throws NoSuchBeanDefinitionException if no bean of the given type was found, +	 * @throws NoUniqueBeanDefinitionException if more than one bean of the given type was found, +		return uniqueBean(type, beansOfType);, +	 * @throws NoSuchBeanDefinitionException if no bean of the given type was found, +	 * @throws NoUniqueBeanDefinitionException if more than one bean of the given type was found, +		return uniqueBean(type, beansOfType);, +	}, +, +	/**, +	 * Extract a unique bean for the given type from the given Map of matching beans., +	 * @param type type of bean to match, +	 * @param matchingBeans all matching beans found, +	 * @return the unique bean instance, +	 * @throws NoSuchBeanDefinitionException if no bean of the given type was found, +	 * @throws NoUniqueBeanDefinitionException if more than one bean of the given type was found, +	 */, +	private static <T> T uniqueBean(Class<T> type, Map<String, T> matchingBeans) {, +		int nrFound = matchingBeans.size();, +		if (nrFound == 1) {, +			return matchingBeans.values().iterator().next();, +		}, +		else if (nrFound > 1) {, +			throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet());, +			throw new NoSuchBeanDefinitionException(type);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/NoSuchBeanDefinitionException.java, + * Copyright 2002-2013 the original author or authors., + * Exception thrown when a {@code BeanFactory} is asked for a bean instance, + * for which it cannot find a definition., + * @see BeanFactory#getBean(String), + * @see BeanFactory#getBean(Class), +		super("No qualifying bean of type [" + type.getName() + "] is defined");, +		super("No qualifying bean of type [" + type.getName() + "] is defined: " + message);, +		super("No qualifying bean of type [" + type.getName() + "] found for dependency" +, +	 * Return the name of the missing bean, if it was a lookup <em>by name</em> that failed., +	 * Return the required type of the missing bean, if it was a lookup <em>by type</em> that failed., +	/**, +	 * Return the number of beans found when only one matching bean was expected., +	 * For a regular NoSuchBeanDefinitionException, this will always be 0., +	 * @see NoUniqueBeanDefinitionException, +	 */, +	public int getNumberOfBeansFound() {, +		return 0;]