[+++ b/build.gradle, +		optional(project(":spring-context")), +++ b/build.gradle, +		optional(project(":spring-context")), +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/MergePlugin.groovy, +				configuration.dependencies.each {, +					def intoCompile = project.merge.into.configurations.getByName("compile"), +					// Protect against changing a compile scope dependency (SPR-10218), +					if(!intoCompile.dependencies.contains(it)) {, +						intoConfiguration.dependencies.add(it), +					}, +				}, +++ b/build.gradle, +		optional(project(":spring-context")), +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/MergePlugin.groovy, +				configuration.dependencies.each {, +					def intoCompile = project.merge.into.configurations.getByName("compile"), +					// Protect against changing a compile scope dependency (SPR-10218), +					if(!intoCompile.dependencies.contains(it)) {, +						intoConfiguration.dependencies.add(it), +					}, +				}, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/AspectJExpressionPointcutTests.java, +	private void assertDoesNotMatchStringClass(ClassFilter classFilter) {, +		assertFalse("Expression should not match String class", classFilter.matches(String.class));, +	}, +, +++ b/build.gradle, +		optional(project(":spring-context")), +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/MergePlugin.groovy, +				configuration.dependencies.each {, +					def intoCompile = project.merge.into.configurations.getByName("compile"), +					// Protect against changing a compile scope dependency (SPR-10218), +					if(!intoCompile.dependencies.contains(it)) {, +						intoConfiguration.dependencies.add(it), +					}, +				}, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/AspectJExpressionPointcutTests.java, +	private void assertDoesNotMatchStringClass(ClassFilter classFilter) {, +		assertFalse("Expression should not match String class", classFilter.matches(String.class));, +	}, +, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/TigerAspectJExpressionPointcutTests.java, +++ b/build.gradle, +		optional(project(":spring-context")), +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/MergePlugin.groovy, +				configuration.dependencies.each {, +					def intoCompile = project.merge.into.configurations.getByName("compile"), +					// Protect against changing a compile scope dependency (SPR-10218), +					if(!intoCompile.dependencies.contains(it)) {, +						intoConfiguration.dependencies.add(it), +					}, +				}, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/AspectJExpressionPointcutTests.java, +	private void assertDoesNotMatchStringClass(ClassFilter classFilter) {, +		assertFalse("Expression should not match String class", classFilter.matches(String.class));, +	}, +, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/TigerAspectJExpressionPointcutTests.java, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java, +import static org.junit.Assert.*;, +, +, +import org.springframework.tests.sample.beans.ITestBean;, +import org.springframework.tests.sample.beans.TestBean;, +		assertTrue(proxy instanceof Lockable);, +		assertTrue(modifiable instanceof Modifiable);, +++ b/build.gradle, +		optional(project(":spring-context")), +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/MergePlugin.groovy, +				configuration.dependencies.each {, +					def intoCompile = project.merge.into.configurations.getByName("compile"), +					// Protect against changing a compile scope dependency (SPR-10218), +					if(!intoCompile.dependencies.contains(it)) {, +						intoConfiguration.dependencies.add(it), +					}, +				}, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/AspectJExpressionPointcutTests.java, +	private void assertDoesNotMatchStringClass(ClassFilter classFilter) {, +		assertFalse("Expression should not match String class", classFilter.matches(String.class));, +	}, +, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/TigerAspectJExpressionPointcutTests.java, +++ b/spring-aop/src/test/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactoryTests.java, +import static org.junit.Assert.*;, +, +, +import org.springframework.tests.sample.beans.ITestBean;, +import org.springframework.tests.sample.beans.TestBean;, +		assertTrue(proxy instanceof Lockable);, +		assertTrue(modifiable instanceof Modifiable);, +++ b/spring-aop/src/test/java/org/springframework/aop/framework/adapter/ThrowsAdviceInterceptorTests.java, +	private static class MyThrowsHandler extends MethodCounter implements ThrowsAdvice {, +++ b/build.gradle, +		optional(project(":spring-context")), +++ b/buildSrc/src/main/groovy/org/springframework/build/gradle/MergePlugin.groovy, +				configuration.dependencies.each {, +					def intoCompile = project.merge.into.configurations.getByName("compile"), +					// Protect against changing a compile scope dependency (SPR-10218), +					if(!intoCompile.dependencies.contains(it)) {]