[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyProcessorSupport.java, + * Copyright 2002-2018 the original author or authors., +	 * Set the ordering which will apply to this processor's implementation, +	 * of {@link Ordered}, used when applying multiple processors., +	 * <p>The default value is {@code Ordered.LOWEST_PRECEDENCE}, meaning non-ordered., +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyProcessorSupport.java, + * Copyright 2002-2018 the original author or authors., +	 * Set the ordering which will apply to this processor's implementation, +	 * of {@link Ordered}, used when applying multiple processors., +	 * <p>The default value is {@code Ordered.LOWEST_PRECEDENCE}, meaning non-ordered., +++ b/spring-aop/src/main/java/org/springframework/aop/support/DefaultIntroductionAdvisor.java, +	private int order = Ordered.LOWEST_PRECEDENCE;, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyProcessorSupport.java, + * Copyright 2002-2018 the original author or authors., +	 * Set the ordering which will apply to this processor's implementation, +	 * of {@link Ordered}, used when applying multiple processors., +	 * <p>The default value is {@code Ordered.LOWEST_PRECEDENCE}, meaning non-ordered., +++ b/spring-aop/src/main/java/org/springframework/aop/support/DefaultIntroductionAdvisor.java, +	private int order = Ordered.LOWEST_PRECEDENCE;, +++ b/spring-aop/src/main/java/org/springframework/aop/support/StaticMethodMatcherPointcutAdvisor.java, + * Copyright 2002-2018 the original author or authors., +	private int order = Ordered.LOWEST_PRECEDENCE;, +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyProcessorSupport.java, + * Copyright 2002-2018 the original author or authors., +	 * Set the ordering which will apply to this processor's implementation, +	 * of {@link Ordered}, used when applying multiple processors., +	 * <p>The default value is {@code Ordered.LOWEST_PRECEDENCE}, meaning non-ordered., +++ b/spring-aop/src/main/java/org/springframework/aop/support/DefaultIntroductionAdvisor.java, +	private int order = Ordered.LOWEST_PRECEDENCE;, +++ b/spring-aop/src/main/java/org/springframework/aop/support/StaticMethodMatcherPointcutAdvisor.java, + * Copyright 2002-2018 the original author or authors., +	private int order = Ordered.LOWEST_PRECEDENCE;, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/ResourceHandlerRegistry.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.Ordered;, +	private int order = Ordered.LOWEST_PRECEDENCE -1;, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyProcessorSupport.java, + * Copyright 2002-2018 the original author or authors., +	 * Set the ordering which will apply to this processor's implementation, +	 * of {@link Ordered}, used when applying multiple processors., +	 * <p>The default value is {@code Ordered.LOWEST_PRECEDENCE}, meaning non-ordered., +++ b/spring-aop/src/main/java/org/springframework/aop/support/DefaultIntroductionAdvisor.java, +	private int order = Ordered.LOWEST_PRECEDENCE;, +++ b/spring-aop/src/main/java/org/springframework/aop/support/StaticMethodMatcherPointcutAdvisor.java, + * Copyright 2002-2018 the original author or authors., +	private int order = Ordered.LOWEST_PRECEDENCE;, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/ResourceHandlerRegistry.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.Ordered;, +	private int order = Ordered.LOWEST_PRECEDENCE -1;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/handler/AbstractHandlerMapping.java, + * Copyright 2002-2018 the original author or authors., +	private int order = Ordered.LOWEST_PRECEDENCE;  // default: same as non-Ordered, +, +	/**, +	 * Specify the order value for this HandlerMapping bean., +	 * <p>The default value is {@code Ordered.LOWEST_PRECEDENCE}, meaning non-ordered., +	 * @see org.springframework.core.Ordered#getOrder(), +	 */, +	public void setOrder(int order) {, +		this.order = order;, +	}, +, +	@Override, +	public int getOrder() {, +		return this.order;, +	}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ProxyProcessorSupport.java, + * Copyright 2002-2018 the original author or authors., +	 * Set the ordering which will apply to this processor's implementation, +	 * of {@link Ordered}, used when applying multiple processors., +	 * <p>The default value is {@code Ordered.LOWEST_PRECEDENCE}, meaning non-ordered., +++ b/spring-aop/src/main/java/org/springframework/aop/support/DefaultIntroductionAdvisor.java, +	private int order = Ordered.LOWEST_PRECEDENCE;, +++ b/spring-aop/src/main/java/org/springframework/aop/support/StaticMethodMatcherPointcutAdvisor.java, + * Copyright 2002-2018 the original author or authors., +	private int order = Ordered.LOWEST_PRECEDENCE;, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/ResourceHandlerRegistry.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.Ordered;, +	private int order = Ordered.LOWEST_PRECEDENCE -1;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/handler/AbstractHandlerMapping.java, + * Copyright 2002-2018 the original author or authors., +	private int order = Ordered.LOWEST_PRECEDENCE;  // default: same as non-Ordered, +, +	/**, +	 * Specify the order value for this HandlerMapping bean., +	 * <p>The default value is {@code Ordered.LOWEST_PRECEDENCE}, meaning non-ordered., +	 * @see org.springframework.core.Ordered#getOrder(), +	 */, +	public void setOrder(int order) {, +		this.order = order;, +	}, +, +	@Override]