[+++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/DelegatingSmartContextLoader.java, +import org.springframework.util.Assert;, +	 * TODO Document emptyResources()., +	 */, +	private boolean emptyResources(ContextConfigurationAttributes configAttributes) {, +		return ObjectUtils.isEmpty(configAttributes.getLocations()), +				&& ObjectUtils.isEmpty(configAttributes.getClasses());, +	}, +, +	/**, +		final boolean emptyResources = emptyResources(configAttributes);, +			// If the original locations and classes were not empty, there's no, +			// Otherwise, if the loader claims to generate defaults, let it, +			// process the configuration., +			else if (loader.generatesDefaults()) {, +				if (!emptyResources(configAttributes) && logger.isInfoEnabled()) {, +					logger.info(String.format("SmartContextLoader candidate %s ", +							+ "generated defaults for context configuration [%s].", loader, configAttributes));, +, +		if (generatesDefaults() && emptyResources(configAttributes)) {, +			throw new IllegalStateException(String.format("None of the SmartContextLoader candidates %s ", +					+ "was able to generate defaults for context configuration [%s].", candidates, configAttributes));, +		}, +		Assert.notNull(mergedConfig, "mergedConfig must not be null");, +, +, +		Assert.notNull(mergedConfig, "mergedConfig must not be null");, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/DelegatingSmartContextLoader.java, +import org.springframework.util.Assert;, +	 * TODO Document emptyResources()., +	 */, +	private boolean emptyResources(ContextConfigurationAttributes configAttributes) {, +		return ObjectUtils.isEmpty(configAttributes.getLocations()), +				&& ObjectUtils.isEmpty(configAttributes.getClasses());, +	}, +, +	/**, +		final boolean emptyResources = emptyResources(configAttributes);, +			// If the original locations and classes were not empty, there's no, +			// Otherwise, if the loader claims to generate defaults, let it, +			// process the configuration., +			else if (loader.generatesDefaults()) {, +				if (!emptyResources(configAttributes) && logger.isInfoEnabled()) {, +					logger.info(String.format("SmartContextLoader candidate %s ", +							+ "generated defaults for context configuration [%s].", loader, configAttributes));, +, +		if (generatesDefaults() && emptyResources(configAttributes)) {, +			throw new IllegalStateException(String.format("None of the SmartContextLoader candidates %s ", +					+ "was able to generate defaults for context configuration [%s].", candidates, configAttributes));, +		}, +		Assert.notNull(mergedConfig, "mergedConfig must not be null");, +, +, +		Assert.notNull(mergedConfig, "mergedConfig must not be null");, +++ b/org.springframework.test/src/test/java/org/springframework/test/context/TestContextManagerTests.java, + * Copyright 2002-2011 the original author or authors., +	private final TestContextManager testContextManager = new TestContextManager(ExampleTestCase.class);, +	private Method getTestMethod() throws NoSuchMethodException {, +		return ExampleTestCase.class.getDeclaredMethod("exampleTestMethod", (Class<?>[]) null);, +	}, +, +		assertEquals("Verifying the number of registered TestExecutionListeners.", 3,, +		this.testContextManager.beforeTestMethod(new ExampleTestCase(), getTestMethod());, +		this.testContextManager.afterTestMethod(new ExampleTestCase(), getTestMethod(), null);, +	@TestExecutionListeners({ FirstTel.class, SecondTel.class, ThirdTel.class }), +		public void afterTestMethod(final TestContext testContext) {, +			afterTestMethodCalls.add(this.name);, +		}, +, +		@Override, +	private static class FirstTel extends NamedTestExecutionListener {, +, +		public FirstTel() {, +			super(FIRST);, +		}, +	}, +, +	private static class SecondTel extends NamedTestExecutionListener {, +, +		public SecondTel() {, +			super(SECOND);, +		}, +	}, +, +	private static class ThirdTel extends NamedTestExecutionListener {, +, +		public ThirdTel() {, +			super(THIRD);, +		}, +	}, +, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/DelegatingSmartContextLoader.java, +import org.springframework.util.Assert;, +	 * TODO Document emptyResources()., +	 */, +	private boolean emptyResources(ContextConfigurationAttributes configAttributes) {, +		return ObjectUtils.isEmpty(configAttributes.getLocations()), +				&& ObjectUtils.isEmpty(configAttributes.getClasses());, +	}, +]