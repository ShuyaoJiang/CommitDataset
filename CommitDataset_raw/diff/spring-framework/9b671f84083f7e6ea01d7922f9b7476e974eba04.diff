[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +	 * is {@code null}, or if the container type cannot be resolved, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +	 * is {@code null}, or if the container type cannot be resolved, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/DefaultMvcResult.java, +				"The asyncDispatch CountDownLatch was not set by the TestDispatcherServlet.");, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +	 * is {@code null}, or if the container type cannot be resolved, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/DefaultMvcResult.java, +				"The asyncDispatch CountDownLatch was not set by the TestDispatcherServlet.");, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java, +	 * @return an emitter for streaming, or {@code null} if handled internally, +	 * with a {@link DeferredResult}, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +	 * is {@code null}, or if the container type cannot be resolved, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/DefaultMvcResult.java, +				"The asyncDispatch CountDownLatch was not set by the TestDispatcherServlet.");, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java, +	 * @return an emitter for streaming, or {@code null} if handled internally, +	 * with a {@link DeferredResult}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, + * <p>Registers the following {@link org.springframework.messaging.MessageChannel MessageChannels}:, +			Assert.hasText(pathAttribute, "Invalid <stomp-endpoint> (no path mapping)");, +			for (String path : StringUtils.tokenizeToStringArray(pathAttribute, ",")) {, +				Assert.hasText(path, () -> "Invalid <stomp-endpoint> path attribute: " + pathAttribute);, +					path = (path.endsWith("/") ? path + "**" : path + "/**");, +	private ManagedMap<String, Object> registerHandlerMapping(, +			Element element, ParserContext context, @Nullable Object source) {, +, +, +	private RuntimeBeanReference registerRequestHandler(, +			Element element, RuntimeBeanReference subProtoHandler, ParserContext ctx, @Nullable Object source) {, +				element, SCHEDULER_BEAN_NAME, ctx, source);, +			ctx.getRegistry().registerAlias(SCHEDULER_BEAN_NAME, SOCKJS_SCHEDULER_BEAN_NAME);, +			RuntimeBeanReference handler = WebSocketNamespaceUtils.registerHandshakeHandler(element, ctx, source);, +			ManagedList<? super Object> interceptors = WebSocketNamespaceUtils.parseBeanSubElements(interceptElem, ctx);, +		return new RuntimeBeanReference(registerBeanDef(beanDef, ctx, source));, +, +		public DecoratingFactoryBean(WebSocketHandler handler, List<WebSocketHandlerDecoratorFactory> factories) {, +		public WebSocketHandler getObject() {]