[+++ b/spring-context/src/main/java/org/springframework/cache/annotation/EnableCaching.java, + * {@link org.springframework.cache.interceptor.SimpleKeyGenerator SimpleKeyGenerator}, + * must be provided explicitly. Return {@code new SimpleKeyGenerator()} from this method, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/EnableCaching.java, + * {@link org.springframework.cache.interceptor.SimpleKeyGenerator SimpleKeyGenerator}, + * must be provided explicitly. Return {@code new SimpleKeyGenerator()} from this method, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +	private KeyGenerator keyGenerator = new SimpleKeyGenerator();, +	 * Default is {@link SimpleKeyGenerator}., +++ b/spring-context/src/main/java/org/springframework/cache/annotation/EnableCaching.java, + * {@link org.springframework.cache.interceptor.SimpleKeyGenerator SimpleKeyGenerator}, + * must be provided explicitly. Return {@code new SimpleKeyGenerator()} from this method, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +	private KeyGenerator keyGenerator = new SimpleKeyGenerator();, +	 * Default is {@link SimpleKeyGenerator}., +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/DefaultKeyGenerator.java, + * <p>NOTE: As this implementation returns only a hash of the parameters, + * it is possible for key collisions to occur. Since Spring 4.0 the, + * {@link SimpleKeyGenerator} is used when no explicit key generator, + * has been defined. This class remains for applications that do not, + * wish to migrate to the {@link SimpleKeyGenerator}., + *, + * @see SimpleKeyGenerator, + * @see org.springframework.cache.annotation.CachingConfigurer, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/EnableCaching.java, + * {@link org.springframework.cache.interceptor.SimpleKeyGenerator SimpleKeyGenerator}, + * must be provided explicitly. Return {@code new SimpleKeyGenerator()} from this method, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +	private KeyGenerator keyGenerator = new SimpleKeyGenerator();, +	 * Default is {@link SimpleKeyGenerator}., +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/DefaultKeyGenerator.java, + * <p>NOTE: As this implementation returns only a hash of the parameters, + * it is possible for key collisions to occur. Since Spring 4.0 the, + * {@link SimpleKeyGenerator} is used when no explicit key generator, + * has been defined. This class remains for applications that do not, + * wish to migrate to the {@link SimpleKeyGenerator}., + *, + * @see SimpleKeyGenerator, + * @see org.springframework.cache.annotation.CachingConfigurer, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/SimpleKey.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.cache.interceptor;, +, +import java.io.Serializable;, +import java.util.Arrays;, +, +import org.springframework.util.Assert;, +import org.springframework.util.StringUtils;, +, +/**, + * A simple key as returned from the {@link SimpleKeyGenerator}., + *, + * @author Phillip Webb, + * @see SimpleKeyGenerator, + */, +public final class SimpleKey implements Serializable {, +, +	private static final long serialVersionUID = 1;, +, +	public static final SimpleKey EMPTY = new SimpleKey(new Object[] {});, +, +, +	private final Object[] params;, +, +, +	/**, +	 * Create a new {@link SimpleKey} instance., +	 * @param elements the elements of the key, +	 */, +	public SimpleKey(Object[] elements) {, +		Assert.notNull(elements, "Elements must not be null");, +		this.params = new Object[elements.length];, +		System.arraycopy(elements, 0, this.params, 0, elements.length);, +	}, +, +, +	@Override, +	public boolean equals(Object obj) {, +		if (obj == this) {, +			return true;, +		}, +		if (obj != null && getClass() == obj.getClass()) {, +			return Arrays.equals(this.params, ((SimpleKey) obj).params);, +		}, +		return false;]