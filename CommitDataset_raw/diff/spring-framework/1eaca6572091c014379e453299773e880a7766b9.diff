[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +		if (!info.getProduces().isEmpty()) {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +		if (!info.getProduces().isEmpty()) {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/AbstractMessageConverterMethodProcessor.java, +, +	protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {, +	protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {, +	 * Writes the given return value to the given web request. Delegates to, +	 * {@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)}, +	protected <T> void writeWithMessageConverters(T returnValue,, +												  MethodParameter returnType,, +												  NativeWebRequest webRequest), +			throws IOException, HttpMediaTypeNotAcceptableException {, +		ServletServerHttpRequest inputMessage = createInputMessage(webRequest);, +		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest);, +		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);, +	/**, +	 * Writes the given return type to the given output message., +	 *, +	 * @param returnValue the value to write to the output message, +	 * @param returnType the type of the value, +	 * @param inputMessage the input messages. Used to inspect the {@code Accept} header., +	 * @param outputMessage the output message to write to, +	 * @throws IOException thrown in case of I/O errors, +	 * @throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on, +	 * the request cannot be met by the message converters, +	 */, +												  ServletServerHttpRequest inputMessage,, +												  ServletServerHttpResponse outputMessage), +, +		Set<MediaType> acceptableMediaTypes = getAcceptableMediaTypes(inputMessage);, +		Set<MediaType> producibleMediaTypes = getProducibleMediaTypes(inputMessage.getServletRequest());, +, +		for (MediaType acceptableMediaType : acceptableMediaTypes) {, +	/**, +	 * Returns the media types that can be produced:, +	 * <ul>, +	 * 	<li>The set of producible media types specified in the request mappings, or, +	 * 	<li>The set of supported media types by all configured message converters, or, +	 * 	<li>{@link MediaType#ALL}, +	 * </ul>, +	 */, +	@SuppressWarnings("unchecked"), +	protected Set<MediaType> getProducibleMediaTypes(HttpServletRequest request) {, +		Set<MediaType> mediaTypes = (Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);, +		if (!CollectionUtils.isEmpty(mediaTypes)) {, +			return mediaTypes;, +		}, +		else if (!allSupportedMediaTypes.isEmpty()) {, +			return new HashSet<MediaType>(allSupportedMediaTypes);, +		}, +		else {, +			return Collections.singleton(MediaType.ALL);, +		}, +, +	}, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +		if (!info.getProduces().isEmpty()) {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/AbstractMessageConverterMethodProcessor.java, +, +	protected ServletServerHttpRequest createInputMessage(NativeWebRequest webRequest) {, +	protected ServletServerHttpResponse createOutputMessage(NativeWebRequest webRequest) {, +	 * Writes the given return value to the given web request. Delegates to, +	 * {@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)}, +	protected <T> void writeWithMessageConverters(T returnValue,, +												  MethodParameter returnType,, +												  NativeWebRequest webRequest), +			throws IOException, HttpMediaTypeNotAcceptableException {, +		ServletServerHttpRequest inputMessage = createInputMessage(webRequest);, +		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest);, +		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);, +	/**, +	 * Writes the given return type to the given output message., +	 *, +	 * @param returnValue the value to write to the output message, +	 * @param returnType the type of the value, +	 * @param inputMessage the input messages. Used to inspect the {@code Accept} header., +	 * @param outputMessage the output message to write to, +	 * @throws IOException thrown in case of I/O errors, +	 * @throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on, +	 * the request cannot be met by the message converters, +	 */, +												  ServletServerHttpRequest inputMessage,, +												  ServletServerHttpResponse outputMessage), +, +		Set<MediaType> acceptableMediaTypes = getAcceptableMediaTypes(inputMessage);, +		Set<MediaType> producibleMediaTypes = getProducibleMediaTypes(inputMessage.getServletRequest());, +, +		for (MediaType acceptableMediaType : acceptableMediaTypes) {, +	/**, +	 * Returns the media types that can be produced:, +	 * <ul>, +	 * 	<li>The set of producible media types specified in the request mappings, or, +	 * 	<li>The set of supported media types by all configured message converters, or, +	 * 	<li>{@link MediaType#ALL}, +	 * </ul>, +	 */, +	@SuppressWarnings("unchecked")]