[+++ b/spring-web/src/main/kotlin/org/springframework/web/client/RestOperationsExtensions.kt, + * Extension for [RestOperations.getForObject] providing a `getForObject<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., + * Extension for [RestOperations.getForObject] providing a `getForObject<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., + * Extension for [RestOperations.getForObject] providing a `getForObject<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., + * Extension for [RestOperations.getForEntity] providing a `getForEntity<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., + * Extension for [RestOperations.getForEntity] providing a `getForEntity<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., + * Extension for [RestOperations.getForEntity] providing a `getForEntity<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., + * Extension for [RestOperations.patchForObject] providing a `patchForObject<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., + * Extension for [RestOperations.patchForObject] providing a `patchForObject<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., + * Extension for [RestOperations.patchForObject] providing a `patchForObject<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., + * Extension for [RestOperations.postForObject] providing a `postForObject<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., + * Extension for [RestOperations.postForObject] providing a `postForObject<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., + * Extension for [RestOperations.postForObject] providing a `postForObject<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., + * Extension for [RestOperations.postForEntity] providing a `postForEntity<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., + * Extension for [RestOperations.postForEntity] providing a `postForEntity<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., + * Extension for [RestOperations.postForEntity] providing a `postForEntity<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., + * Extension for [RestOperations.exchange] providing an `exchange<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. This extension is not subject to, + * type erasure and retains actual generic type arguments., + * Extension for [RestOperations.exchange] providing an `exchange<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. This extension is not subject to, + * type erasure and retains actual generic type arguments., + * Extension for [RestOperations.exchange] providing an `exchange<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. This extension is not subject to, + * type erasure and retains actual generic type arguments., + * Extension for [RestOperations.exchange] providing an `exchange<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. This extension is not subject to, + * type erasure and retains actual generic type arguments., +++ b/spring-web/src/main/kotlin/org/springframework/web/client/RestOperationsExtensions.kt, + * Extension for [RestOperations.getForObject] providing a `getForObject<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., + * Extension for [RestOperations.getForObject] providing a `getForObject<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., + * Extension for [RestOperations.getForObject] providing a `getForObject<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., + * Extension for [RestOperations.getForEntity] providing a `getForEntity<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., + * Extension for [RestOperations.getForEntity] providing a `getForEntity<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., + * Extension for [RestOperations.getForEntity] providing a `getForEntity<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this, + * extension is subject to type erasure. Use [exchange] if you need to retain actual, + * generic type arguments., + * Extension for [RestOperations.patchForObject] providing a `patchForObject<Foo>(...)`, + * variant leveraging Kotlin reified type parameters. Like the original Java method, this]