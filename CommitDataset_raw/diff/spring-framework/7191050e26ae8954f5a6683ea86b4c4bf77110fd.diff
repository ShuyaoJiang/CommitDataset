[+++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java, +			if (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {, +	 * @param methodParam the method parameter, +	protected Object createAttribute(String attributeName, MethodParameter methodParam,, +		return BeanUtils.instantiateClass(methodParam.getParameterType());, +	 * @param methodParam the method parameter, +	protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam) {, +		Annotation[] annotations = methodParam.getParameterAnnotations();, +	 * Whether to raise a fatal bind exception on validation errors., +	 * @param methodParam the method argument, +	 * @return {@code true} if the next method argument is not of type {@link Errors}, +	protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam) {, +		int i = methodParam.getParameterIndex();, +		Class<?>[] paramTypes = methodParam.getMethod().getParameterTypes();, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java, +			if (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {, +	 * @param methodParam the method parameter, +	protected Object createAttribute(String attributeName, MethodParameter methodParam,, +		return BeanUtils.instantiateClass(methodParam.getParameterType());, +	 * @param methodParam the method parameter, +	protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam) {, +		Annotation[] annotations = methodParam.getParameterAnnotations();, +	 * Whether to raise a fatal bind exception on validation errors., +	 * @param methodParam the method argument, +	 * @return {@code true} if the next method argument is not of type {@link Errors}, +	protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam) {, +		int i = methodParam.getParameterIndex();, +		Class<?>[] paramTypes = methodParam.getMethod().getParameterTypes();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.java, +import java.lang.annotation.Annotation;, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.validation.annotation.Validated;, +import org.springframework.web.bind.WebDataBinder;, +	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage,, +			MethodParameter methodParam, Type targetType) throws IOException, HttpMediaTypeNotSupportedException {, +	 * Validate the request part if applicable., +	 * <p>The default implementation checks for {@code @javax.validation.Valid},, +	 * Spring's {@link org.springframework.validation.annotation.Validated},, +	 * and custom annotations whose name starts with "Valid"., +	 * @param binder the DataBinder to be used, +	 * @param methodParam the method parameter, +	 * @see #isBindExceptionRequired, +	 * @since 4.1.5, +	 */, +	protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam) {, +		Annotation[] annotations = methodParam.getParameterAnnotations();, +		for (Annotation ann : annotations) {, +			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class);, +			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {, +				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann));, +				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints});, +				binder.validate(validationHints);, +				break;, +			}, +		}, +	}, +, +	/**, +	 * Whether to raise a fatal bind exception on validation errors., +	 * @param binder the data binder used to perform data binding, +	 * @param methodParam the method argument, +	protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam) {, +		int i = methodParam.getParameterIndex();, +		Class<?>[] paramTypes = methodParam.getMethod().getParameterTypes();, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java, +			if (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {, +	 * @param methodParam the method parameter, +	protected Object createAttribute(String attributeName, MethodParameter methodParam,, +		return BeanUtils.instantiateClass(methodParam.getParameterType());, +	 * @param methodParam the method parameter, +	protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam) {, +		Annotation[] annotations = methodParam.getParameterAnnotations();, +	 * Whether to raise a fatal bind exception on validation errors., +	 * @param methodParam the method argument, +	 * @return {@code true} if the next method argument is not of type {@link Errors}, +	protected boolean isBindExceptionRequired(WebDataBinder binder, MethodParameter methodParam) {, +		int i = methodParam.getParameterIndex();, +		Class<?>[] paramTypes = methodParam.getMethod().getParameterTypes();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.java, +import java.lang.annotation.Annotation;, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.validation.annotation.Validated;, +import org.springframework.web.bind.WebDataBinder;, +	protected <T> Object readWithMessageConverters(HttpInputMessage inputMessage,, +			MethodParameter methodParam, Type targetType) throws IOException, HttpMediaTypeNotSupportedException {, +	 * Validate the request part if applicable., +	 * <p>The default implementation checks for {@code @javax.validation.Valid},, +	 * Spring's {@link org.springframework.validation.annotation.Validated},, +	 * and custom annotations whose name starts with "Valid"., +	 * @param binder the DataBinder to be used, +	 * @param methodParam the method parameter, +	 * @see #isBindExceptionRequired, +	 * @since 4.1.5, +	 */, +	protected void validateIfApplicable(WebDataBinder binder, MethodParameter methodParam) {, +		Annotation[] annotations = methodParam.getParameterAnnotations();, +		for (Annotation ann : annotations) {, +			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class);, +			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {, +				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann));]