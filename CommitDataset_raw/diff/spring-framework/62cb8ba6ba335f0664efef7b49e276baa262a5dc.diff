[+++ b/src/docs/asciidoc/core.adoc, +This part of the reference documentation covers all the technologies that are, +Spring Framework has its own AOP framework, which is conceptually easy to understand, +Coverage of Spring's integration with AspectJ (currently the richest -- in terms of, +features -- and certainly most mature AOP implementation in the Java enterprise space) is, +++ b/src/docs/asciidoc/core.adoc, +This part of the reference documentation covers all the technologies that are, +Spring Framework has its own AOP framework, which is conceptually easy to understand, +Coverage of Spring's integration with AspectJ (currently the richest -- in terms of, +features -- and certainly most mature AOP implementation in the Java enterprise space) is, +++ b/src/docs/asciidoc/core/core-beans.adoc, +== Introduction to the Spring IoC Container and Beans, +(IoC) principle. (See <<overview.adoc#background-ioc,Inversion of Control>>.) IoC, +is also known as dependency injection (DI). It is a process whereby objects define, +their dependencies (that is, the other objects they work with) only through constructor, +injects those dependencies when it creates the bean. This process is fundamentally, +the inverse (hence the name, Inversion of Control) of the bean itself, +construction of classes or a mechanism such as the Service Locator pattern., +is a sub-interface of `BeanFactory`. It adds:, +* Easier integration with Spring's AOP features, +* Message resource handling (for use in internationalization), +* Event publication, +* Application-layer specific contexts such as the `WebApplicationContext`, +The `ApplicationContext` is a complete superset of the `BeanFactory` and is used, +information on using the `BeanFactory` instead of the `ApplicationContext,` see, +by the Spring IoC container are called beans. A bean is an object that is, +bean is simply one of many objects in your application. Beans, and the dependencies, +among them, are reflected in the configuration metadata used by a container., +== Container Overview, +The `org.springframework.context.ApplicationContext` interface represents the Spring IoC, +beans. The container gets its instructions on what objects to, +configuration metadata is represented in XML, Java annotations, or Java code. It lets, +you express the objects that compose your application and the rich interdependencies, +between those objects., +with Spring. In stand-alone applications, it is common to create an, +While XML has been the traditional format for defining configuration metadata, you can, +of the application typically suffices (see <<context-create>>). If you use the, +https://spring.io/tools/sts[Spring Tool Suite] (an Eclipse-powered development, +environment), you can easily create this boilerplate configuration with a few mouse clicks or, +The following diagram shows a high-level view of how Spring works. Your application classes, +are combined with configuration metadata so that, after the `ApplicationContext` is, +=== Configuration Metadata, +configuration metadata. This configuration metadata represents how you, as an, +application developer, tell the Spring container to instantiate, configure, and assemble, +NOTE: XML-based metadata is not the only allowed form of configuration metadata. The, +Spring IoC container itself is totally decoupled from the format in which this, +configuration metadata is actually written. These days, many developers choose, +  Thus, you can define beans external to your application classes by using Java rather, +  than XML files. To use these new features, see the, +  https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html[`@Configuration`],, +  https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Bean.html[`@Bean`],, +  https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Import.html[`@Import`],, +  and https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/DependsOn.html[`@DependsOn`] annotations., +definition that the container must manage. XML-based configuration metadata configures these, +beans as `<bean/>` elements inside a top-level `<beans/>` element. Java, +configuration typically uses `@Bean`-annotated methods within a `@Configuration` class., +Typically, you define service layer objects, data access objects (DAOs), presentation, +`SessionFactories`, JMS `Queues`, and so forth. Typically, one does not configure, +====, +		<bean id="..." class="...">                                       <1> <2>, +<1> The `id` attribute is a string that identifies the individual bean definition., +, +<2> The `class` attribute defines the type of the bean and uses the fully qualified, +classname., +====, +, +The value of the `id` attribute refers to collaborating objects. The XML for, +referring to collaborating objects is not shown in this example. See, +=== Instantiating a Container, +The location path or paths, +supplied to an `ApplicationContext` constructor are resource strings that let, +the container load configuration metadata from a variety of external resources, such, +as the local file system, the Java `CLASSPATH`, and so on., +====, +====, +NOTE:After you learn about Spring's IoC container, you may want to know more about Spring's, +`Resource` abstraction (as described in <<resources>>), which provides a convenient, +particular, `Resource` paths are used to construct applications contexts, as described in, +====, +====, +====, +====, +In the preceding example, the service layer consists of the `PetStoreServiceImpl` class, +and two data access objects of the types `JpaAccountDao` and `JpaItemDao` (based, +on the JPA Object-Relational Mapping standard). The `property name` element refers to the, +[[beans-factory-xml-import]], +==== Composing XML-based Configuration Metadata, +, +It can be useful to have bean definitions span multiple XML files. Often, each individual, +<<beans-factory-instantiation,previous section>>. Alternatively, use one or more, +occurrences of the `<import/>` element to load bean definitions from another file or, +files. The following example shows how to do so:, +====, +====, +location of the importing file. As you can see, a leading slash is ignored. However, given, +be valid XML bean definitions, according to the Spring Schema., +application. In particular, this reference is not recommended for `classpath:` URLs (for, +example, `classpath:../services.xml`), where the runtime resolution process chooses the, +"`nearest`" classpath root and then looks into its parent directory. Classpath, +example, `file:C:/config/services.xml` or `classpath:/config/services.xml`. However, be]