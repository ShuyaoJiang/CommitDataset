[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactoryUtils.java, +	public static String[] beanNamesForTypeIncludingAncestors(ListableBeanFactory lbf, Class<?> type) {, +			ListableBeanFactory lbf, Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactoryUtils.java, +	public static String[] beanNamesForTypeIncludingAncestors(ListableBeanFactory lbf, Class<?> type) {, +			ListableBeanFactory lbf, Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) {, +++ b/spring-core/src/main/java/org/springframework/util/xml/StaxEventXMLReader.java, + * Copyright 2002-2013 the original author or authors., + * @since 3.0, +, +, +		while (this.reader.hasNext() && elementDepth >= 0) {, +			XMLEvent event = this.reader.nextEvent();, +					return (location != null ? location.getColumnNumber() : -1);, +					return (location != null ? location.getLineNumber() : -1);, +					return (location != null ? location.getPublicId() : null);, +					return (location != null ? location.getSystemId() : null);, +			attributes.addAttribute(namespace, qName.getLocalPart(), toQualifiedName(qName), type, attribute.getValue());, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactoryUtils.java, +	public static String[] beanNamesForTypeIncludingAncestors(ListableBeanFactory lbf, Class<?> type) {, +			ListableBeanFactory lbf, Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) {, +++ b/spring-core/src/main/java/org/springframework/util/xml/StaxEventXMLReader.java, + * Copyright 2002-2013 the original author or authors., + * @since 3.0, +, +, +		while (this.reader.hasNext() && elementDepth >= 0) {, +			XMLEvent event = this.reader.nextEvent();, +					return (location != null ? location.getColumnNumber() : -1);, +					return (location != null ? location.getLineNumber() : -1);, +					return (location != null ? location.getPublicId() : null);, +					return (location != null ? location.getSystemId() : null);, +			attributes.addAttribute(namespace, qName.getLocalPart(), toQualifiedName(qName), type, attribute.getValue());, +++ b/spring-core/src/main/java/org/springframework/util/xml/StaxStreamXMLReader.java, + * Copyright 2002-2013 the original author or authors., + * @since 3.0, +, +	 * Construct a new instance of the {@code StaxStreamXmlReader} that reads from the given, +, +		int eventType = this.reader.getEventType();, +			if (this.reader.hasNext() && elementDepth >= 0) {, +				eventType = this.reader.next();, +		if (XMLStreamConstants.START_DOCUMENT == this.reader.getEventType()) {, +			String xmlVersion = this.reader.getVersion();, +			this.encoding = this.reader.getCharacterEncodingScheme();, +			final Location location = this.reader.getLocation();, +					return (location != null ? location.getColumnNumber() : -1);, +					return (location != null ? location.getLineNumber() : -1);, +					return (location != null ? location.getPublicId() : null);, +					return (location != null ? location.getSystemId() : null);, +			if (this.reader.standaloneSet()) {, +				setStandalone(this.reader.isStandalone());, +			QName qName = this.reader.getName();, +				for (int i = 0; i < this.reader.getNamespaceCount(); i++) {, +					startPrefixMapping(this.reader.getNamespacePrefix(i), this.reader.getNamespaceURI(i));, +				for (int i = 0; i < this.reader.getAttributeCount(); i++) {, +					String prefix = this.reader.getAttributePrefix(i);, +					String namespace = this.reader.getAttributeNamespace(i);, +				getContentHandler().startElement(qName.getNamespaceURI(), qName.getLocalPart(),, +						toQualifiedName(qName), getAttributes());, +			QName qName = this.reader.getName();, +				for (int i = 0; i < this.reader.getNamespaceCount(); i++) {, +					String prefix = this.reader.getNamespacePrefix(i);, +		if (getContentHandler() != null && this.reader.isWhiteSpace()) {, +			getContentHandler().ignorableWhitespace(this.reader.getTextCharacters(),, +					this.reader.getTextStart(), this.reader.getTextLength());, +		if (XMLStreamConstants.CDATA == this.reader.getEventType() && getLexicalHandler() != null) {, +			getContentHandler().characters(this.reader.getTextCharacters(),, +					this.reader.getTextStart(), this.reader.getTextLength());, +		if (XMLStreamConstants.CDATA == this.reader.getEventType() && getLexicalHandler() != null) {, +			getLexicalHandler().comment(this.reader.getTextCharacters(),, +					this.reader.getTextStart(), this.reader.getTextLength());, +			javax.xml.stream.Location location = this.reader.getLocation();, +			getLexicalHandler().startEntity(this.reader.getLocalName());, +			getLexicalHandler().endEntity(this.reader.getLocalName());, +			getContentHandler().processingInstruction(this.reader.getPITarget(), this.reader.getPIData());, +		for (int i = 0; i < this.reader.getAttributeCount(); i++) {, +			String namespace = this.reader.getAttributeNamespace(i);, +			String type = this.reader.getAttributeType(i);, +			attributes.addAttribute(namespace, this.reader.getAttributeLocalName(i),, +					toQualifiedName(this.reader.getAttributeName(i)), type, this.reader.getAttributeValue(i));, +			for (int i = 0; i < this.reader.getNamespaceCount(); i++) {, +				String prefix = this.reader.getNamespacePrefix(i);, +				String namespaceUri = this.reader.getNamespaceURI(i);]