[+++ b/spring-websocket/src/main/java/org/springframework/websocket/server/endpoint/EndpointExporter.java, +import java.util.Map;, +, +import javax.websocket.server.ServerEndpoint;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.ListableBeanFactory;, +import org.springframework.util.ObjectUtils;, + * {@link javax.websocket.server.ServerEndpointConfig} and registers the corresponding, + * {@link javax.websocket.Endpoint} with a standard Java WebSocket runtime., +public class EndpointExporter implements InitializingBean, BeanPostProcessor, BeanFactoryAware {, +	private Class<?>[] annotatedEndpointClasses;, +, +	 * TODO, +	 * @param annotatedEndpointClasses, +	 */, +	public void setAnnotatedEndpointClasses(Class<?>... annotatedEndpointClasses) {, +		this.annotatedEndpointClasses = annotatedEndpointClasses;, +	}, +, +	/**, +	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {, +		if (beanFactory instanceof ListableBeanFactory) {, +			ListableBeanFactory lbf = (ListableBeanFactory) beanFactory;, +			Map<String, Object> annotatedEndpoints = lbf.getBeansWithAnnotation(ServerEndpoint.class);, +			for (String beanName : annotatedEndpoints.keySet()) {, +				Class<?> beanType = lbf.getType(beanName);, +				try {, +					if (logger.isInfoEnabled()) {, +						logger.info("Detected @ServerEndpoint bean '" + beanName + "', registering it as an endpoint by type");, +					}, +					ServerContainerProvider.getServerContainer().addEndpoint(beanType);, +				}, +				catch (DeploymentException e) {, +					throw new IllegalStateException("Failed to register @ServerEndpoint bean type " + beanName, e);, +				}, +			}, +		}, +	}, +, +	@Override, +, +, +		if (!ObjectUtils.isEmpty(this.annotatedEndpointClasses)) {, +			for (Class<?> clazz : this.annotatedEndpointClasses) {, +				try {, +					logger.info("Registering @ServerEndpoint type " + clazz);, +					serverContainer.addEndpoint(clazz);, +				}, +				catch (DeploymentException e) {, +					throw new IllegalStateException("Failed to register @ServerEndpoint type " + clazz, e);, +				}, +			}, +		}, +				if (logger.isInfoEnabled()) {, +					logger.info("Registering bean '" + beanName, +							+ "' as javax.websocket.Endpoint under path " + sec.getPath());, +				}, +				ServerContainerProvider.getServerContainer().addEndpoint(sec);, +				throw new IllegalStateException("Failed to deploy Endpoint bean " + bean, e);, +++ b/spring-websocket/src/main/java/org/springframework/websocket/server/endpoint/EndpointExporter.java, +import java.util.Map;, +, +import javax.websocket.server.ServerEndpoint;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +import org.springframework.beans.factory.ListableBeanFactory;, +import org.springframework.util.ObjectUtils;, + * {@link javax.websocket.server.ServerEndpointConfig} and registers the corresponding, + * {@link javax.websocket.Endpoint} with a standard Java WebSocket runtime., +public class EndpointExporter implements InitializingBean, BeanPostProcessor, BeanFactoryAware {, +	private Class<?>[] annotatedEndpointClasses;, +, +	 * TODO, +	 * @param annotatedEndpointClasses, +	 */, +	public void setAnnotatedEndpointClasses(Class<?>... annotatedEndpointClasses) {, +		this.annotatedEndpointClasses = annotatedEndpointClasses;, +	}, +, +	/**, +	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {, +		if (beanFactory instanceof ListableBeanFactory) {, +			ListableBeanFactory lbf = (ListableBeanFactory) beanFactory;, +			Map<String, Object> annotatedEndpoints = lbf.getBeansWithAnnotation(ServerEndpoint.class);, +			for (String beanName : annotatedEndpoints.keySet()) {, +				Class<?> beanType = lbf.getType(beanName);, +				try {, +					if (logger.isInfoEnabled()) {, +						logger.info("Detected @ServerEndpoint bean '" + beanName + "', registering it as an endpoint by type");, +					}, +					ServerContainerProvider.getServerContainer().addEndpoint(beanType);, +				}, +				catch (DeploymentException e) {, +					throw new IllegalStateException("Failed to register @ServerEndpoint bean type " + beanName, e);, +				}, +			}, +		}, +	}, +]