[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, + * Manages the class being generated by the compilation process., + *, + * <p>Records intermediate compilation state as the bytecode is generated., + * Also includes various bytecode generation helper functions., + * @author Juergen Hoeller, +	 * Name of the class being generated. Typically used when generating code, +	 * that accesses freshly generated fields on the generated type., +	 */, +	private final String className;, +, +	/**, +	 * The current class being generated., +	 */, +	private final ClassWriter classWriter;, +, +	/**, +	private List<FieldAdder> fieldAdders;, +	private List<ClinitAdder> clinitAdders;, +, +	/**, +	 * Construct a new {@code CodeFlow} for the given class., +	 * @param className the name of the class, +	 * @param classWriter the corresponding ASM {@code ClassWriter}, +	 */, +	public CodeFlow(String className, ClassWriter classWriter) {, +		this.className = className;, +		this.classWriter = classWriter;, +		this.compilationScopes = new Stack<ArrayList<String>>();, +		this.compilationScopes.add(new ArrayList<String>());, +, +	 * @since 4.3.4, +				fieldAdder.generateField(this.classWriter, this);, +			MethodVisitor mv = this.classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, "<clinit>", "()V", null, null);, +			this.nextFreeVariableId = 0;  // to 0 because there is no 'this' in a clinit, +		return this.className;, +	 * primitive value., +++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, + * Manages the class being generated by the compilation process., + *, + * <p>Records intermediate compilation state as the bytecode is generated., + * Also includes various bytecode generation helper functions., + * @author Juergen Hoeller, +	 * Name of the class being generated. Typically used when generating code, +	 * that accesses freshly generated fields on the generated type., +	 */, +	private final String className;, +, +	/**, +	 * The current class being generated., +	 */, +	private final ClassWriter classWriter;, +, +	/**, +	private List<FieldAdder> fieldAdders;, +	private List<ClinitAdder> clinitAdders;, +, +	/**, +	 * Construct a new {@code CodeFlow} for the given class., +	 * @param className the name of the class, +	 * @param classWriter the corresponding ASM {@code ClassWriter}, +	 */, +	public CodeFlow(String className, ClassWriter classWriter) {, +		this.className = className;, +		this.classWriter = classWriter;, +		this.compilationScopes = new Stack<ArrayList<String>>();, +		this.compilationScopes.add(new ArrayList<String>());, +, +	 * @since 4.3.4, +				fieldAdder.generateField(this.classWriter, this);, +			MethodVisitor mv = this.classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, "<clinit>", "()V", null, null);, +			this.nextFreeVariableId = 0;  // to 0 because there is no 'this' in a clinit, +		return this.className;, +	 * primitive value., +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelCompilationCoverageTests.java, +		SpelParserConfiguration configuration =, +				new SpelParserConfiguration(SpelCompilerMode.MIXED, ClassLoader.getSystemClassLoader());, +		SpelExpressionParser parser = new SpelExpressionParser(configuration);, +		Expression expression = parser.parseExpression("data['my-key'] != 'my-value'");, +, +, +	public static class Apple implements Comparable<Apple> {, +, +		public Object gotComparedTo = null;, +		public int i;, +, +		public Apple(int i) {, +			this.i = i;, +		}, +, +		public void setValue(int i) {, +			this.i = i;, +		}, +, +		@Override, +		public int compareTo(Apple that) {, +			this.gotComparedTo = that;, +			if (this.i < that.i) {, +				return -1;, +			}]