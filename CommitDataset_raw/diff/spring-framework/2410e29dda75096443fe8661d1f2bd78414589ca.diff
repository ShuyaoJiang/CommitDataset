[+++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewFilter.java, + * Copyright 2002-2014 the original author or authors., +import java.io.IOException;, +import javax.servlet.FilterChain;, +import javax.servlet.ServletException;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +, +, + * @see OpenSessionInterceptor, + * @see org.hibernate.SessionFactory#getCurrentSession(), +	 * <p>The default implementation delegates to the {@link SessionFactory#openSession}, +	 * method and sets the {@link Session}'s flush mode to "MANUAL"., +++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewFilter.java, + * Copyright 2002-2014 the original author or authors., +import java.io.IOException;, +import javax.servlet.FilterChain;, +import javax.servlet.ServletException;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +, +, + * @see OpenSessionInterceptor, + * @see org.hibernate.SessionFactory#getCurrentSession(), +	 * <p>The default implementation delegates to the {@link SessionFactory#openSession}, +	 * method and sets the {@link Session}'s flush mode to "MANUAL"., +++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewInterceptor.java, + * Copyright 2002-2014 the original author or authors., + * @see OpenSessionInterceptor, + * @see org.hibernate.SessionFactory#getCurrentSession(), +	 * Set the Hibernate SessionFactory that should be used to create Hibernate Sessions., +	 * Return the Hibernate SessionFactory that should be used to create Hibernate Sessions., +	 * <p>The default implementation delegates to the {@link SessionFactory#openSession}, +	 * method and sets the {@link Session}'s flush mode to "MANUAL"., +++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewFilter.java, + * Copyright 2002-2014 the original author or authors., +import java.io.IOException;, +import javax.servlet.FilterChain;, +import javax.servlet.ServletException;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +, +, + * @see OpenSessionInterceptor, + * @see org.hibernate.SessionFactory#getCurrentSession(), +	 * <p>The default implementation delegates to the {@link SessionFactory#openSession}, +	 * method and sets the {@link Session}'s flush mode to "MANUAL"., +++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInViewInterceptor.java, + * Copyright 2002-2014 the original author or authors., + * @see OpenSessionInterceptor, + * @see org.hibernate.SessionFactory#getCurrentSession(), +	 * Set the Hibernate SessionFactory that should be used to create Hibernate Sessions., +	 * Return the Hibernate SessionFactory that should be used to create Hibernate Sessions., +	 * <p>The default implementation delegates to the {@link SessionFactory#openSession}, +	 * method and sets the {@link Session}'s flush mode to "MANUAL"., +++ b/spring-orm-hibernate4/src/main/java/org/springframework/orm/hibernate4/support/OpenSessionInterceptor.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.orm.hibernate4.support;, +, +import org.aopalliance.intercept.MethodInterceptor;, +import org.aopalliance.intercept.MethodInvocation;, +import org.hibernate.FlushMode;, +import org.hibernate.HibernateException;, +import org.hibernate.Session;, +import org.hibernate.SessionFactory;, +, +import org.springframework.beans.factory.InitializingBean;, +import org.springframework.dao.DataAccessResourceFailureException;, +import org.springframework.orm.hibernate4.SessionFactoryUtils;, +import org.springframework.orm.hibernate4.SessionHolder;, +import org.springframework.transaction.support.TransactionSynchronizationManager;, +, +/**, + * Simple AOP Alliance {@link MethodInterceptor} implementation that binds a new, + * Hibernate {@link Session} for each method invocation, if none bound before., + *, + * <p>This is a simple Hibernate Session scoping interceptor along the lines of, + * {@link OpenSessionInViewInterceptor}, just for use with AOP setup instead of, + * MVC setup. It opens a new {@link Session} with flush mode "MANUAL" since the, + * Session is only meant for reading, except when participating in a transaction., + *, + * @author Juergen Hoeller, + * @since 4.0.2, + * @see OpenSessionInViewInterceptor, + * @see OpenSessionInViewFilter]