[+++ b/spring-web/src/main/java/org/springframework/web/util/DefaultUriBuilderFactory.java, +	 * Enum to represent multiple URI encoding strategies., +		 * Pre-encode the URI template first, then strictly encode URI variables, +		 * when expanded, with the following rules:, +		 * <li>For the URI template replace <em>only</em> non-ASCII and illegal, +		 * (within a given URI component type) characters with escaped octets., +		 * <li>For URI variables do the same and also replace characters with, +		 * reserved meaning., +		 * <p>For most cases, this mode is most likely to give the expected, +		 * result because in treats URI variables as opaque data to be fully, +		 * encoded, while {@link #URI_COMPONENT} by comparison is useful only, +		 * if intentionally expanding URI variables with reserved characters., +		 * Does not encode the URI template and instead applies strict encoding, +		 * to URI variables via {@link UriUtils#encodeUriVariables} prior to, +		 * expanding them into the template., +		 * Expand URI variables first, and then encode the resulting URI, +		 * component values, replacing <em>only</em> non-ASCII and illegal, +		 * (within a given URI component type) characters, but not characters, +		 * with reserved meaning., +	 * Set the encoding mode to use., +	 * <p>By default this is set to {@link EncodingMode#TEMPLATE_AND_VALUES, +	 * EncodingMode.TEMPLATE_AND_VALUES}., +	 * <p><strong>Note:</strong> In 5.1 the default was changed from, +	 * {@link EncodingMode#URI_COMPONENT EncodingMode.URI_COMPONENT}., +	 * Consequently the {@code WebClient}, which relies on the built-in default, +	 * has also been switched to the new default. The {@code RestTemplate}, +	 * however sets this explicitly to {@link EncodingMode#URI_COMPONENT, +	 * EncodingMode.URI_COMPONENT} explicitly for historic and backwards, +	 * compatibility reasons., +++ b/spring-web/src/main/java/org/springframework/web/util/DefaultUriBuilderFactory.java, +	 * Enum to represent multiple URI encoding strategies., +		 * Pre-encode the URI template first, then strictly encode URI variables, +		 * when expanded, with the following rules:, +		 * <li>For the URI template replace <em>only</em> non-ASCII and illegal, +		 * (within a given URI component type) characters with escaped octets., +		 * <li>For URI variables do the same and also replace characters with, +		 * reserved meaning., +		 * <p>For most cases, this mode is most likely to give the expected, +		 * result because in treats URI variables as opaque data to be fully, +		 * encoded, while {@link #URI_COMPONENT} by comparison is useful only, +		 * if intentionally expanding URI variables with reserved characters., +		 * Does not encode the URI template and instead applies strict encoding, +		 * to URI variables via {@link UriUtils#encodeUriVariables} prior to, +		 * expanding them into the template., +		 * Expand URI variables first, and then encode the resulting URI, +		 * component values, replacing <em>only</em> non-ASCII and illegal, +		 * (within a given URI component type) characters, but not characters, +		 * with reserved meaning., +	 * Set the encoding mode to use., +	 * <p>By default this is set to {@link EncodingMode#TEMPLATE_AND_VALUES, +	 * EncodingMode.TEMPLATE_AND_VALUES}., +	 * <p><strong>Note:</strong> In 5.1 the default was changed from, +	 * {@link EncodingMode#URI_COMPONENT EncodingMode.URI_COMPONENT}., +	 * Consequently the {@code WebClient}, which relies on the built-in default, +	 * has also been switched to the new default. The {@code RestTemplate}, +	 * however sets this explicitly to {@link EncodingMode#URI_COMPONENT, +	 * EncodingMode.URI_COMPONENT} explicitly for historic and backwards, +	 * compatibility reasons., +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponents.java, +	 * <em>only</em> replaces non-ASCII and illegal (within a given URI, +	 * component type) characters, but not characters with reserved meaning., +	 * For most cases, {@link UriComponentsBuilder#encode()} is more likely, +	 * to give the expected result., +++ b/spring-web/src/main/java/org/springframework/web/util/DefaultUriBuilderFactory.java, +	 * Enum to represent multiple URI encoding strategies., +		 * Pre-encode the URI template first, then strictly encode URI variables, +		 * when expanded, with the following rules:, +		 * <li>For the URI template replace <em>only</em> non-ASCII and illegal, +		 * (within a given URI component type) characters with escaped octets., +		 * <li>For URI variables do the same and also replace characters with, +		 * reserved meaning., +		 * <p>For most cases, this mode is most likely to give the expected, +		 * result because in treats URI variables as opaque data to be fully, +		 * encoded, while {@link #URI_COMPONENT} by comparison is useful only, +		 * if intentionally expanding URI variables with reserved characters., +		 * Does not encode the URI template and instead applies strict encoding, +		 * to URI variables via {@link UriUtils#encodeUriVariables} prior to, +		 * expanding them into the template., +		 * Expand URI variables first, and then encode the resulting URI, +		 * component values, replacing <em>only</em> non-ASCII and illegal, +		 * (within a given URI component type) characters, but not characters, +		 * with reserved meaning., +	 * Set the encoding mode to use., +	 * <p>By default this is set to {@link EncodingMode#TEMPLATE_AND_VALUES, +	 * EncodingMode.TEMPLATE_AND_VALUES}., +	 * <p><strong>Note:</strong> In 5.1 the default was changed from, +	 * {@link EncodingMode#URI_COMPONENT EncodingMode.URI_COMPONENT}., +	 * Consequently the {@code WebClient}, which relies on the built-in default, +	 * has also been switched to the new default. The {@code RestTemplate}, +	 * however sets this explicitly to {@link EncodingMode#URI_COMPONENT, +	 * EncodingMode.URI_COMPONENT} explicitly for historic and backwards, +	 * compatibility reasons., +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponents.java, +	 * <em>only</em> replaces non-ASCII and illegal (within a given URI, +	 * component type) characters, but not characters with reserved meaning., +	 * For most cases, {@link UriComponentsBuilder#encode()} is more likely, +	 * to give the expected result., +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +	 * Request to have the URI template pre-encoded at build time, and, +	 * URI variables encoded separately when expanded.]