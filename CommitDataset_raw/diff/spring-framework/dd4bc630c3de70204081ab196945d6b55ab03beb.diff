[+++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, +import java.util.concurrent.Callable;, +import java.util.concurrent.CompletableFuture;, +import java.util.concurrent.CompletionException;, +import java.util.function.Supplier;, +import org.springframework.lang.UsesJava8;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.concurrent.ListenableFuture;, +	// Java 8's CompletableFuture type present?, +	private static final boolean completableFuturePresent = ClassUtils.isPresent(, +			"java.util.concurrent.CompletableFuture", AsyncExecutionInterceptor.class.getClassLoader());, +, +, +	 * Delegate for actually executing the given task with the chosen executor., +	 * @param task the task to execute, +	 * @param executor the chosen executor, +	 * @param returnType the declared return type (potentially a {@link Future} variant), +	 * @return the execution result (potentially a corresponding {@link Future} handle), +	 */, +	protected Object doSubmit(Callable<Object> task, AsyncTaskExecutor executor, Class<?> returnType) {, +		if (completableFuturePresent) {, +			Future<Object> result = CompletableFutureDelegate.processCompletableFuture(returnType, task, executor);, +			if (result != null) {, +				return result;, +			}, +		}, +		if (ListenableFuture.class.isAssignableFrom(returnType)) {, +			return ((AsyncListenableTaskExecutor) executor).submitListenable(task);, +		}, +		else if (Future.class.isAssignableFrom(returnType)) {, +			return executor.submit(task);, +		}, +		else {, +			executor.submit(task);, +			return null;, +		}, +	}, +, +	/**, +, +	/**, +	 * Inner class to avoid a hard dependency on Java 8., +	 */, +	@UsesJava8, +	private static class CompletableFutureDelegate {, +, +		public static <T> Future<T> processCompletableFuture(Class<?> returnType, final Callable<T> task, Executor executor) {, +			if (!CompletableFuture.class.isAssignableFrom(returnType)) {, +				return null;, +			}, +			return CompletableFuture.supplyAsync(new Supplier<T>() {, +				@Override, +				public T get() {, +					try {, +						return task.call();, +					}, +					catch (Throwable ex) {, +						throw new CompletionException(ex);, +					}, +				}, +			}, executor);, +		}, +	}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java, +import java.util.concurrent.Callable;, +import java.util.concurrent.CompletableFuture;, +import java.util.concurrent.CompletionException;, +import java.util.function.Supplier;, +import org.springframework.lang.UsesJava8;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.concurrent.ListenableFuture;, +	// Java 8's CompletableFuture type present?, +	private static final boolean completableFuturePresent = ClassUtils.isPresent(, +			"java.util.concurrent.CompletableFuture", AsyncExecutionInterceptor.class.getClassLoader());, +, +, +	 * Delegate for actually executing the given task with the chosen executor., +	 * @param task the task to execute, +	 * @param executor the chosen executor, +	 * @param returnType the declared return type (potentially a {@link Future} variant), +	 * @return the execution result (potentially a corresponding {@link Future} handle), +	 */, +	protected Object doSubmit(Callable<Object> task, AsyncTaskExecutor executor, Class<?> returnType) {, +		if (completableFuturePresent) {, +			Future<Object> result = CompletableFutureDelegate.processCompletableFuture(returnType, task, executor);, +			if (result != null) {, +				return result;, +			}, +		}, +		if (ListenableFuture.class.isAssignableFrom(returnType)) {, +			return ((AsyncListenableTaskExecutor) executor).submitListenable(task);, +		}, +		else if (Future.class.isAssignableFrom(returnType)) {, +			return executor.submit(task);, +		}, +		else {, +			executor.submit(task);, +			return null;, +		}]