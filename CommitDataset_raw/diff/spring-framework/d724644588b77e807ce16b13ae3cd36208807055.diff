[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/incrementer/MySQLMaxValueIncrementer.java, + * Copyright 2002-2008 the original author or authors., + * table that needs an auto-generated key. The table type of the sequence table, + * should be MyISAM so the sequences are allocated without regard to any, + * transactions that might be in progress., + * create table tab_sequence (value int not null) type=MYISAM;, +			* Need to use straight JDBC code because we need to make sure that the insert and select, +			* are performed on the same connection (otherwise we can't be sure that last_insert_id(), +			* returned the correct value), +			Connection con = DataSourceUtils.getConnection(getDataSource());, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/incrementer/MySQLMaxValueIncrementer.java, + * Copyright 2002-2008 the original author or authors., + * table that needs an auto-generated key. The table type of the sequence table, + * should be MyISAM so the sequences are allocated without regard to any, + * transactions that might be in progress., + * create table tab_sequence (value int not null) type=MYISAM;, +			* Need to use straight JDBC code because we need to make sure that the insert and select, +			* are performed on the same connection (otherwise we can't be sure that last_insert_id(), +			* returned the correct value), +			Connection con = DataSourceUtils.getConnection(getDataSource());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/server/DefaultServerRequest.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.web.server.WebSession;, +	@Override, +	public Mono<WebSession> session() {, +		return this.exchange.getSession();, +	}, +, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/incrementer/MySQLMaxValueIncrementer.java, + * Copyright 2002-2008 the original author or authors., + * table that needs an auto-generated key. The table type of the sequence table, + * should be MyISAM so the sequences are allocated without regard to any, + * transactions that might be in progress., + * create table tab_sequence (value int not null) type=MYISAM;, +			* Need to use straight JDBC code because we need to make sure that the insert and select, +			* are performed on the same connection (otherwise we can't be sure that last_insert_id(), +			* returned the correct value), +			Connection con = DataSourceUtils.getConnection(getDataSource());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/server/DefaultServerRequest.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.web.server.WebSession;, +	@Override, +	public Mono<WebSession> session() {, +		return this.exchange.getSession();, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.web.server.WebSession;, +, +		@Override, +		public Mono<WebSession> session() {, +			return this.request.session();, +		}, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/incrementer/MySQLMaxValueIncrementer.java, + * Copyright 2002-2008 the original author or authors., + * table that needs an auto-generated key. The table type of the sequence table, + * should be MyISAM so the sequences are allocated without regard to any, + * transactions that might be in progress., + * create table tab_sequence (value int not null) type=MYISAM;, +			* Need to use straight JDBC code because we need to make sure that the insert and select, +			* are performed on the same connection (otherwise we can't be sure that last_insert_id(), +			* returned the correct value), +			Connection con = DataSourceUtils.getConnection(getDataSource());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/server/DefaultServerRequest.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.web.server.WebSession;, +	@Override, +	public Mono<WebSession> session() {, +		return this.exchange.getSession();, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.web.server.WebSession;, +, +		@Override, +		public Mono<WebSession> session() {, +			return this.request.session();, +		}, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/server/ServerRequest.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.web.server.WebSession;, +	/**, +	 * Return the web session for the current request. Always guaranteed  to, +	 * return an instance either matching to the session id requested by the, +	 * client, or with a new session id either because the client did not, +	 * specify one or because the underlying session had expired. Use of this, +	 * method does not automatically create a session., +	 */, +	Mono<WebSession> session();, +, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/incrementer/MySQLMaxValueIncrementer.java, + * Copyright 2002-2008 the original author or authors., + * table that needs an auto-generated key. The table type of the sequence table, + * should be MyISAM so the sequences are allocated without regard to any, + * transactions that might be in progress., + * create table tab_sequence (value int not null) type=MYISAM;, +			* Need to use straight JDBC code because we need to make sure that the insert and select, +			* are performed on the same connection (otherwise we can't be sure that last_insert_id()]