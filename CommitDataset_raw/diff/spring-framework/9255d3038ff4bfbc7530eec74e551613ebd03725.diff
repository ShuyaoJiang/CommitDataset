[+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/Scheduled.java, + * Copyright 2002-2013 the original author or authors., +	 * Execute the annotated method with a fixed period between the end, +	 * of the last invocation and the start of the next., +	 * @return the delay in milliseconds as a String value, e.g. a placeholder, +	 * @since 3.2.2, +	 */, +	String fixedDelayString() default "";, +, +	/**, +	 * Execute the annotated method with a fixed period between invocations., +	 * @return the period in milliseconds as a String value, e.g. a placeholder, +	 * @since 3.2.2, +	 */, +	String fixedRateString() default "";, +, +	/**, +	long initialDelay() default -1;, +, +	/**, +	 * Number of milliseconds to delay before the first execution of a, +	 * {@link #fixedRate()} or {@link #fixedDelay()} task., +	 * @return the initial delay in milliseconds as a String value, e.g. a placeholder, +	 * @since 3.2.2, +	 */, +	String initialDelayString() default "";, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/Scheduled.java, + * Copyright 2002-2013 the original author or authors., +	 * Execute the annotated method with a fixed period between the end, +	 * of the last invocation and the start of the next., +	 * @return the delay in milliseconds as a String value, e.g. a placeholder, +	 * @since 3.2.2, +	 */, +	String fixedDelayString() default "";, +, +	/**, +	 * Execute the annotated method with a fixed period between invocations., +	 * @return the period in milliseconds as a String value, e.g. a placeholder, +	 * @since 3.2.2, +	 */, +	String fixedRateString() default "";, +, +	/**, +	long initialDelay() default -1;, +, +	/**, +	 * Number of milliseconds to delay before the first execution of a, +	 * {@link #fixedRate()} or {@link #fixedDelay()} task., +	 * @return the initial delay in milliseconds as a String value, e.g. a placeholder, +	 * @since 3.2.2, +	 */, +	String initialDelayString() default "";, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, + * Copyright 2002-2013 the original author or authors., +					try {, +								"Only void-returning methods may be annotated with @Scheduled");, +								"Only no-arg methods may be annotated with @Scheduled");, +						String errorMessage = "Exactly one of the 'cron', 'fixedDelay(String)', or 'fixedRate(String)' attributes is required";, +						// Determine initial delay, +						long initialDelay = annotation.initialDelay();, +						String initialDelayString = annotation.initialDelayString();, +						if (!"".equals(initialDelayString)) {, +							Assert.isTrue(initialDelay < 0, "Specify 'initialDelay' or 'initialDelayString', not both");, +							if (embeddedValueResolver != null) {, +								initialDelayString = embeddedValueResolver.resolveStringValue(initialDelayString);, +							}, +							try {, +								initialDelay = Integer.parseInt(initialDelayString);, +							}, +							catch (NumberFormatException ex) {, +								throw new IllegalArgumentException(, +										"Invalid initialDelayString value \"" + initialDelayString + "\" - cannot parse into integer");, +							}, +						}, +						// Check cron expression, +							Assert.isTrue(initialDelay == -1, "'initialDelay' not supported for cron triggers");, +						// At this point we don't need to differentiate between initial delay set or not anymore, +						if (initialDelay < 0) {, +							initialDelay = 0;, +						}, +						// Check fixed delay, +						String fixedDelayString = annotation.fixedDelayString();, +						if (!"".equals(fixedDelayString)) {, +							Assert.isTrue(!processedSchedule, errorMessage);, +							processedSchedule = true;, +							if (embeddedValueResolver != null) {, +								fixedDelayString = embeddedValueResolver.resolveStringValue(fixedDelayString);, +							}, +							try {, +								fixedDelay = Integer.parseInt(fixedDelayString);, +							}, +							catch (NumberFormatException ex) {, +								throw new IllegalArgumentException(, +										"Invalid fixedDelayString value \"" + fixedDelayString + "\" - cannot parse into integer");, +							}, +							registrar.addFixedDelayTask(new IntervalTask(runnable, fixedDelay, initialDelay));, +						}, +						// Check fixed rate, +						String fixedRateString = annotation.fixedRateString();, +						if (!"".equals(fixedRateString)) {]