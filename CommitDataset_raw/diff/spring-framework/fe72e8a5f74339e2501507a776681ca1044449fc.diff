[+++ b/org.springframework.core/src/main/java/org/springframework/util/AntPathMatcher.java, +import java.util.LinkedHashMap;, +import java.util.Map;, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +, +	/** Captures URI template variable names. */, +	private static final Pattern URI_TEMPLATE_NAMES_PATTERN = Pattern.compile("\\{([\\w-~_\\.]+?)\\}");, +, +, +		pattern = uriTemplateToAntPattern(pattern);, +				return (pattern.endsWith(this.pathSeparator) ? path.endsWith(this.pathSeparator) :, +						!path.endsWith(this.pathSeparator));, +			if (pattIdxStart == pattIdxEnd && pattDirs[pattIdxStart].equals("*") && path.endsWith(this.pathSeparator)) {, +		StringBuilder builder = new StringBuilder();, +					builder.append(this.pathSeparator);, +				builder.append(pathParts[i]);, +				builder.append(this.pathSeparator);, +			builder.append(pathParts[i]);, +		return builder.toString();, +	}, +, +	/**, +	 * Replaces URI template variables with Ant-style pattern patchs. Looks for variables within curly braces, and replaces, +	 * those with <code>*</code>., +	 *, +	 * <p/>For example: <code>/hotels/{hotel}/bookings</code> becomes, +	 * <code>/hotels/&#42;/bookings</code>, +	 *, +	 * @param pattern the pattern, possibly containing URI template variables, +	 * @return the Ant-stlye pattern path, +	 * @see org.springframework.util.AntPathMatcher, +	 */, +	private static String uriTemplateToAntPattern(String pattern) {, +		Matcher matcher = URI_TEMPLATE_NAMES_PATTERN.matcher(pattern);, +		return matcher.replaceAll("*");, +	}, +, +, +	public Map<String, String> extractUriTemplateVariables(String pattern, String path) {, +		if (pattern.contains("**") && pattern.contains("{")) {, +			throw new IllegalArgumentException("Combining '**' and URI templates is not allowed");, +		}, +		String[] patternParts = StringUtils.tokenizeToStringArray(pattern, this.pathSeparator);, +		String[] pathParts = StringUtils.tokenizeToStringArray(path, this.pathSeparator);, +, +		Map<String, String> variables = new LinkedHashMap<String, String>();, +, +		for (int i = 0; i < patternParts.length && i < pathParts.length; i++) {, +			String patternPart = patternParts[i];, +			String pathPart = pathParts[i];, +			int patternEnd = patternPart.length() -1 ;, +			if (patternEnd > 1 && patternPart.charAt(0) == '{' && patternPart.charAt(patternEnd) == '}') {, +				String varName = patternPart.substring(1, patternEnd);, +				variables.put(varName, pathPart);, +			}, +		}, +, +		return variables;, +++ b/org.springframework.core/src/main/java/org/springframework/util/AntPathMatcher.java, +import java.util.LinkedHashMap;, +import java.util.Map;, +import java.util.regex.Matcher;, +import java.util.regex.Pattern;, +, +	/** Captures URI template variable names. */, +	private static final Pattern URI_TEMPLATE_NAMES_PATTERN = Pattern.compile("\\{([\\w-~_\\.]+?)\\}");, +, +, +		pattern = uriTemplateToAntPattern(pattern);, +				return (pattern.endsWith(this.pathSeparator) ? path.endsWith(this.pathSeparator) :, +						!path.endsWith(this.pathSeparator));, +			if (pattIdxStart == pattIdxEnd && pattDirs[pattIdxStart].equals("*") && path.endsWith(this.pathSeparator)) {, +		StringBuilder builder = new StringBuilder();, +					builder.append(this.pathSeparator);, +				builder.append(pathParts[i]);, +				builder.append(this.pathSeparator);, +			builder.append(pathParts[i]);, +		return builder.toString();, +	}, +, +	/**, +	 * Replaces URI template variables with Ant-style pattern patchs. Looks for variables within curly braces, and replaces, +	 * those with <code>*</code>., +	 *, +	 * <p/>For example: <code>/hotels/{hotel}/bookings</code> becomes, +	 * <code>/hotels/&#42;/bookings</code>, +	 *, +	 * @param pattern the pattern, possibly containing URI template variables, +	 * @return the Ant-stlye pattern path, +	 * @see org.springframework.util.AntPathMatcher, +	 */, +	private static String uriTemplateToAntPattern(String pattern) {, +		Matcher matcher = URI_TEMPLATE_NAMES_PATTERN.matcher(pattern);, +		return matcher.replaceAll("*");, +	}, +, +, +	public Map<String, String> extractUriTemplateVariables(String pattern, String path) {, +		if (pattern.contains("**") && pattern.contains("{")) {]