[+++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ScheduledExecutorFactoryBean.java, + * @see #setRemoveOnCancelPolicy, +	// ScheduledThreadPoolExecutor.setRemoveOnCancelPolicy(boolean) only available on JDK 7+, +	private boolean removeOnCancelPolicy = false;, +, +	 * Set the remove-on-cancel mode on {@link ScheduledThreadPoolExecutor} (JDK 7+)., +	 * <p>Default is {@code false}. If set to {@code true}, the target executor will be, +	 * switched into remove-on-cancel mode (if possible, with a soft fallback otherwise)., +	 */, +	public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {, +		this.removeOnCancelPolicy = removeOnCancelPolicy;, +	}, +, +	/**, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ScheduledExecutorFactoryBean.java, + * @see #setRemoveOnCancelPolicy, +	// ScheduledThreadPoolExecutor.setRemoveOnCancelPolicy(boolean) only available on JDK 7+, +	private boolean removeOnCancelPolicy = false;, +, +	 * Set the remove-on-cancel mode on {@link ScheduledThreadPoolExecutor} (JDK 7+)., +	 * <p>Default is {@code false}. If set to {@code true}, the target executor will be, +	 * switched into remove-on-cancel mode (if possible, with a soft fallback otherwise)., +	 */, +	public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {, +		this.removeOnCancelPolicy = removeOnCancelPolicy;, +	}, +, +	/**, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ThreadPoolTaskScheduler.java, +	// ScheduledThreadPoolExecutor.setRemoveOnCancelPolicy(boolean) only available on JDK 7+, +	private volatile boolean removeOnCancelPolicy = false;, +	 * Set the remove-on-cancel mode on {@link ScheduledThreadPoolExecutor} (JDK 7+)., +	 * <p>Default is {@code false}. If set to {@code true}, the target executor will be, +	 * switched into remove-on-cancel mode (if possible, with a soft fallback otherwise)., +	 * Return the current setting for the remove-on-cancel mode., +	 * <p>Requires an underlying {@link ScheduledThreadPoolExecutor}., +		if (!setRemoveOnCancelPolicyAvailable) {, +			return false;, +		}, +			return this.removeOnCancelPolicy;, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ScheduledExecutorFactoryBean.java, + * @see #setRemoveOnCancelPolicy, +	// ScheduledThreadPoolExecutor.setRemoveOnCancelPolicy(boolean) only available on JDK 7+, +	private boolean removeOnCancelPolicy = false;, +, +	 * Set the remove-on-cancel mode on {@link ScheduledThreadPoolExecutor} (JDK 7+)., +	 * <p>Default is {@code false}. If set to {@code true}, the target executor will be, +	 * switched into remove-on-cancel mode (if possible, with a soft fallback otherwise)., +	 */, +	public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {, +		this.removeOnCancelPolicy = removeOnCancelPolicy;, +	}, +, +	/**, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ThreadPoolTaskScheduler.java, +	// ScheduledThreadPoolExecutor.setRemoveOnCancelPolicy(boolean) only available on JDK 7+, +	private volatile boolean removeOnCancelPolicy = false;, +	 * Set the remove-on-cancel mode on {@link ScheduledThreadPoolExecutor} (JDK 7+)., +	 * <p>Default is {@code false}. If set to {@code true}, the target executor will be, +	 * switched into remove-on-cancel mode (if possible, with a soft fallback otherwise)., +	 * Return the current setting for the remove-on-cancel mode., +	 * <p>Requires an underlying {@link ScheduledThreadPoolExecutor}., +		if (!setRemoveOnCancelPolicyAvailable) {, +			return false;, +		}, +			return this.removeOnCancelPolicy;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/SockJsServiceRegistration.java, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ScheduledExecutorFactoryBean.java, + * @see #setRemoveOnCancelPolicy, +	// ScheduledThreadPoolExecutor.setRemoveOnCancelPolicy(boolean) only available on JDK 7+, +	private boolean removeOnCancelPolicy = false;, +, +	 * Set the remove-on-cancel mode on {@link ScheduledThreadPoolExecutor} (JDK 7+)., +	 * <p>Default is {@code false}. If set to {@code true}, the target executor will be, +	 * switched into remove-on-cancel mode (if possible, with a soft fallback otherwise)., +	 */, +	public void setRemoveOnCancelPolicy(boolean removeOnCancelPolicy) {, +		this.removeOnCancelPolicy = removeOnCancelPolicy;, +	}, +, +	/**, +++ b/spring-context/src/main/java/org/springframework/scheduling/concurrent/ThreadPoolTaskScheduler.java, +	// ScheduledThreadPoolExecutor.setRemoveOnCancelPolicy(boolean) only available on JDK 7+, +	private volatile boolean removeOnCancelPolicy = false;, +	 * Set the remove-on-cancel mode on {@link ScheduledThreadPoolExecutor} (JDK 7+)., +	 * <p>Default is {@code false}. If set to {@code true}, the target executor will be, +	 * switched into remove-on-cancel mode (if possible, with a soft fallback otherwise)., +	 * Return the current setting for the remove-on-cancel mode., +	 * <p>Requires an underlying {@link ScheduledThreadPoolExecutor}., +		if (!setRemoveOnCancelPolicyAvailable) {, +			return false;, +		}, +			return this.removeOnCancelPolicy;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/annotation/SockJsServiceRegistration.java, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/sockjs/support/SockJsServiceTests.java, +, +, +	@Test  // SPR-11443, +	@Test  // SPR-11919, +		this.servletRequest.setContentType("");]