[+++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java, +import java.util.Map;, +		Object attribute = (mavContainer.containsAttribute(name)) ?, +		WebDataBinder binder = binderFactory.createBinder(request, attribute, name);, +		// Add resolved attribute and BindingResult at the end of the model, +, +		Map<String, Object> bindingResultModel = binder.getBindingResult().getModel();, +		mavContainer.removeAttributes(bindingResultModel);, +		mavContainer.addAllAttributes(bindingResultModel);, +, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java, +import java.util.Map;, +		Object attribute = (mavContainer.containsAttribute(name)) ?, +		WebDataBinder binder = binderFactory.createBinder(request, attribute, name);, +		// Add resolved attribute and BindingResult at the end of the model, +, +		Map<String, Object> bindingResultModel = binder.getBindingResult().getModel();, +		mavContainer.removeAttributes(bindingResultModel);, +		mavContainer.addAllAttributes(bindingResultModel);, +, +++ b/spring-web/src/main/java/org/springframework/web/method/support/ModelAndViewContainer.java, + * Copyright 2002-2012 the original author or authors., +	 * A shortcut for {@code getModel().addAttribute(String, Object)}., +	 * A shortcut for {@code getModel().addAttribute(Object)}., +	 * A shortcut for {@code getModel().addAllAttributes(Map)}., +	 * A shortcut for {@code getModel().mergeAttributes(Map<String, ?>)}., +	 * Remove the given attributes from the model., +	 */, +	public ModelAndViewContainer removeAttributes(Map<String, ?> attributes) {, +		if (attributes != null) {, +			for (String key : attributes.keySet()) {, +				getModel().remove(key);, +			}, +		}, +		return this;, +	}, +, +	/**, +	 * A shortcut for {@code getModel().containsAttribute(String)}., +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.java, +import java.util.Map;, +		Object attribute = (mavContainer.containsAttribute(name)) ?, +		WebDataBinder binder = binderFactory.createBinder(request, attribute, name);, +		// Add resolved attribute and BindingResult at the end of the model, +, +		Map<String, Object> bindingResultModel = binder.getBindingResult().getModel();, +		mavContainer.removeAttributes(bindingResultModel);, +		mavContainer.addAllAttributes(bindingResultModel);, +, +++ b/spring-web/src/main/java/org/springframework/web/method/support/ModelAndViewContainer.java, + * Copyright 2002-2012 the original author or authors., +	 * A shortcut for {@code getModel().addAttribute(String, Object)}., +	 * A shortcut for {@code getModel().addAttribute(Object)}., +	 * A shortcut for {@code getModel().addAllAttributes(Map)}., +	 * A shortcut for {@code getModel().mergeAttributes(Map<String, ?>)}., +	 * Remove the given attributes from the model., +	 */, +	public ModelAndViewContainer removeAttributes(Map<String, ?> attributes) {, +		if (attributes != null) {, +			for (String key : attributes.keySet()) {, +				getModel().remove(key);, +			}, +		}, +		return this;, +	}, +, +	/**, +	 * A shortcut for {@code getModel().containsAttribute(String)}., +++ b/spring-web/src/test/java/org/springframework/web/method/annotation/ModelAttributeMethodProcessorTests.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.validation.BindingResult;, +	public void resovleArgumentFromModel() throws Exception {, +		getAttributeFromModel("attrName", paramNamedValidModelAttr);, +		getAttributeFromModel("testBean", paramModelAttr);, +		getAttributeFromModel("testBean", paramNonSimpleType);, +	private void getAttributeFromModel(String expectedAttributeName, MethodParameter param) throws Exception {, +	public void resovleArgumentViaDefaultConstructor() throws Exception {, +	public void resovleArgumentValidation() throws Exception {, +		String name = "attrName";, +		mavContainer.addAttribute(name, target);, +		StubRequestDataBinder dataBinder = new StubRequestDataBinder(target, name);, +		expect(binderFactory.createBinder(webRequest, target, name)).andReturn(dataBinder);, +	public void resovleArgumentBindException() throws Exception {, +		String name = "testBean";, +		StubRequestDataBinder dataBinder = new StubRequestDataBinder(target, name);, +		expect(binderFactory.createBinder(webRequest, target, name)).andReturn(dataBinder);, +	// SPR-9378, +, +	@Test, +	public void resolveArgumentOrdering() throws Exception {, +		String name = "testBean";, +		Object testBean = new TestBean(name);, +		mavContainer.addAttribute(name, testBean);, +		mavContainer.addAttribute(BindingResult.MODEL_KEY_PREFIX + name, testBean);, +, +		Object anotherTestBean = new TestBean();, +		mavContainer.addAttribute("anotherTestBean", anotherTestBean);, +, +		StubRequestDataBinder dataBinder = new StubRequestDataBinder(testBean, name);, +		WebDataBinderFactory binderFactory = createMock(WebDataBinderFactory.class);]