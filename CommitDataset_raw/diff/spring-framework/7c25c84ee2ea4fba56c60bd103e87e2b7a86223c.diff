[+++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/Cglib2AopProxy.java, +, +import org.springframework.util.ClassUtils;, +			if (ClassUtils.isCglibProxyClass(rootClass)) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/Cglib2AopProxy.java, +, +import org.springframework.util.ClassUtils;, +			if (ClassUtils.isCglibProxyClass(rootClass)) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/support/AopUtils.java, +				(Proxy.isProxyClass(object.getClass()) || ClassUtils.isCglibProxyClass(object.getClass())));, +	 * Check whether the given object is a CGLIB proxy. Goes beyond the implementation, +	 * in {@link ClassUtils#isCglibProxy(Object)} by checking also to see if the given, +	 * object is an instance of {@link SpringProxy}., +	 * @see ClassUtils#isCglibProxy(Object), +		return (object instanceof SpringProxy && ClassUtils.isCglibProxy(object));, +	 * @deprecated as of Spring 3.1 in favor of {@link ClassUtils#isCglibProxyClass(Class)}, +	@Deprecated, +		return ClassUtils.isCglibProxyClass(clazz);, +	 * @deprecated as of Spring 3.1 in favor of {@link ClassUtils#isCglibProxyClassName(String)}, +	@Deprecated, +		return ClassUtils.isCglibProxyClassName(className);, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/Cglib2AopProxy.java, +, +import org.springframework.util.ClassUtils;, +			if (ClassUtils.isCglibProxyClass(rootClass)) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/support/AopUtils.java, +				(Proxy.isProxyClass(object.getClass()) || ClassUtils.isCglibProxyClass(object.getClass())));, +	 * Check whether the given object is a CGLIB proxy. Goes beyond the implementation, +	 * in {@link ClassUtils#isCglibProxy(Object)} by checking also to see if the given, +	 * object is an instance of {@link SpringProxy}., +	 * @see ClassUtils#isCglibProxy(Object), +		return (object instanceof SpringProxy && ClassUtils.isCglibProxy(object));, +	 * @deprecated as of Spring 3.1 in favor of {@link ClassUtils#isCglibProxyClass(Class)}, +	@Deprecated, +		return ClassUtils.isCglibProxyClass(clazz);, +	 * @deprecated as of Spring 3.1 in favor of {@link ClassUtils#isCglibProxyClassName(String)}, +	@Deprecated, +		return ClassUtils.isCglibProxyClassName(className);, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/ImportedConfigurationClassEnhancementTests.java, +import org.springframework.util.ClassUtils;, +				ClassUtils.isCglibProxy(config.autowiredConfig));, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/Cglib2AopProxy.java, +, +import org.springframework.util.ClassUtils;, +			if (ClassUtils.isCglibProxyClass(rootClass)) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/support/AopUtils.java, +				(Proxy.isProxyClass(object.getClass()) || ClassUtils.isCglibProxyClass(object.getClass())));, +	 * Check whether the given object is a CGLIB proxy. Goes beyond the implementation, +	 * in {@link ClassUtils#isCglibProxy(Object)} by checking also to see if the given, +	 * object is an instance of {@link SpringProxy}., +	 * @see ClassUtils#isCglibProxy(Object), +		return (object instanceof SpringProxy && ClassUtils.isCglibProxy(object));, +	 * @deprecated as of Spring 3.1 in favor of {@link ClassUtils#isCglibProxyClass(Class)}, +	@Deprecated, +		return ClassUtils.isCglibProxyClass(clazz);, +	 * @deprecated as of Spring 3.1 in favor of {@link ClassUtils#isCglibProxyClassName(String)}, +	@Deprecated, +		return ClassUtils.isCglibProxyClassName(className);, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/ImportedConfigurationClassEnhancementTests.java, +import org.springframework.util.ClassUtils;, +				ClassUtils.isCglibProxy(config.autowiredConfig));, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/Spr7167Tests.java, +import static org.hamcrest.CoreMatchers.equalTo;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.assertTrue;, +import org.junit.Test;, +import org.springframework.util.ClassUtils;, +		assertTrue("Config class was not enhanced", ClassUtils.isCglibProxy(config));, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/framework/Cglib2AopProxy.java, +, +import org.springframework.util.ClassUtils;, +			if (ClassUtils.isCglibProxyClass(rootClass)) {, +++ b/org.springframework.aop/src/main/java/org/springframework/aop/support/AopUtils.java, +				(Proxy.isProxyClass(object.getClass()) || ClassUtils.isCglibProxyClass(object.getClass())));, +	 * Check whether the given object is a CGLIB proxy. Goes beyond the implementation, +	 * in {@link ClassUtils#isCglibProxy(Object)} by checking also to see if the given, +	 * object is an instance of {@link SpringProxy}., +	 * @see ClassUtils#isCglibProxy(Object), +		return (object instanceof SpringProxy && ClassUtils.isCglibProxy(object));, +	 * @deprecated as of Spring 3.1 in favor of {@link ClassUtils#isCglibProxyClass(Class)}, +	@Deprecated, +		return ClassUtils.isCglibProxyClass(clazz);, +	 * @deprecated as of Spring 3.1 in favor of {@link ClassUtils#isCglibProxyClassName(String)}, +	@Deprecated, +		return ClassUtils.isCglibProxyClassName(className);, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/ImportedConfigurationClassEnhancementTests.java, +import org.springframework.util.ClassUtils;, +				ClassUtils.isCglibProxy(config.autowiredConfig));, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/Spr7167Tests.java, +import static org.hamcrest.CoreMatchers.equalTo;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.assertTrue;, +import org.junit.Test;, +import org.springframework.util.ClassUtils;, +		assertTrue("Config class was not enhanced", ClassUtils.isCglibProxy(config));, +++ b/org.springframework.core/src/main/java/org/springframework/util/ClassUtils.java, +	/**, +	 * Check whether the given object is a CGLIB proxy., +	 * @param object the object to check, +	 * @see org.springframework.aop.support.AopUtils#isCglibProxy(Object)]