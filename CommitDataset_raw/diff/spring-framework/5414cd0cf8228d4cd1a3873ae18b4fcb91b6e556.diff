[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultControllerSpec.java, +import org.springframework.http.codec.HttpMessageWriter;, +		private Consumer<List<HttpMessageWriter<?>>> writersConsumer;, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultControllerSpec.java, +import org.springframework.http.codec.HttpMessageWriter;, +		private Consumer<List<HttpMessageWriter<?>>> writersConsumer;, +++ b/spring-web/src/main/java/org/springframework/http/codec/DecoderHttpMessageReader.java, + * <p>Also a {@code HttpMessageReader} that pre-resolves decoding hints, +public class DecoderHttpMessageReader<T> implements HttpMessageReader<T> {, +	// Server-side only..., +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultControllerSpec.java, +import org.springframework.http.codec.HttpMessageWriter;, +		private Consumer<List<HttpMessageWriter<?>>> writersConsumer;, +++ b/spring-web/src/main/java/org/springframework/http/codec/DecoderHttpMessageReader.java, + * <p>Also a {@code HttpMessageReader} that pre-resolves decoding hints, +public class DecoderHttpMessageReader<T> implements HttpMessageReader<T> {, +	// Server-side only..., +++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, + * <p>Also a {@code HttpMessageWriter} that pre-resolves encoding hints, +public class EncoderHttpMessageWriter<T> implements HttpMessageWriter<T> {, +	// Server side only..., +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultControllerSpec.java, +import org.springframework.http.codec.HttpMessageWriter;, +		private Consumer<List<HttpMessageWriter<?>>> writersConsumer;, +++ b/spring-web/src/main/java/org/springframework/http/codec/DecoderHttpMessageReader.java, + * <p>Also a {@code HttpMessageReader} that pre-resolves decoding hints, +public class DecoderHttpMessageReader<T> implements HttpMessageReader<T> {, +	// Server-side only..., +++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, + * <p>Also a {@code HttpMessageWriter} that pre-resolves encoding hints, +public class EncoderHttpMessageWriter<T> implements HttpMessageWriter<T> {, +	// Server side only..., +++ b/spring-web/src/main/java/org/springframework/http/codec/HttpMessageReader.java, +import org.springframework.core.MethodParameter;, +import org.springframework.http.server.reactive.ServerHttpRequest;, +import org.springframework.http.server.reactive.ServerHttpResponse;, +	/**, +	 * Server-side only alternative to, +	 * {@link #read(ResolvableType, ReactiveHttpInputMessage, Map)} with, +	 * additional context available., +	 *, +	 * @param actualType the actual type of the target method parameter; for, +	 * annotated controllers, the {@link MethodParameter} can be accessed via, +	 * {@link ResolvableType#getSource()}., +	 * @param elementType the type of Objects in the output stream, +	 * @param request the current request, +	 * @param response the current response, +	 * @param hints additional information about how to read the body, +	 * @return the decoded stream of elements, +	 */, +	default Flux<T> read(ResolvableType actualType, ResolvableType elementType, ServerHttpRequest request,, +			ServerHttpResponse response, Map<String, Object> hints) {, +, +		return read(elementType, request, hints);, +	}, +, +	/**, +	 * Server-side only alternative to, +	 * {@link #readMono(ResolvableType, ReactiveHttpInputMessage, Map)} with, +	 * additional, context available., +	 *, +	 * @param actualType the actual type of the target method parameter; for, +	 * annotated controllers, the {@link MethodParameter} can be accessed via, +	 * {@link ResolvableType#getSource()}., +	 * @param elementType the type of Objects in the output stream, +	 * @param request the current request, +	 * @param response the current response, +	 * @param hints additional information about how to read the body, +	 * @return the decoded stream of elements, +	 */, +	default Mono<T> readMono(ResolvableType actualType, ResolvableType elementType, ServerHttpRequest request,, +			ServerHttpResponse response, Map<String, Object> hints) {, +, +		return readMono(elementType, request, hints);, +	}, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/DefaultControllerSpec.java, +import org.springframework.http.codec.HttpMessageWriter;, +		private Consumer<List<HttpMessageWriter<?>>> writersConsumer;, +++ b/spring-web/src/main/java/org/springframework/http/codec/DecoderHttpMessageReader.java, + * <p>Also a {@code HttpMessageReader} that pre-resolves decoding hints, +public class DecoderHttpMessageReader<T> implements HttpMessageReader<T> {, +	// Server-side only..., +++ b/spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java, + * <p>Also a {@code HttpMessageWriter} that pre-resolves encoding hints, +public class EncoderHttpMessageWriter<T> implements HttpMessageWriter<T> {, +	// Server side only..., +++ b/spring-web/src/main/java/org/springframework/http/codec/HttpMessageReader.java, +import org.springframework.core.MethodParameter;, +import org.springframework.http.server.reactive.ServerHttpRequest;, +import org.springframework.http.server.reactive.ServerHttpResponse;, +	/**, +	 * Server-side only alternative to, +	 * {@link #read(ResolvableType, ReactiveHttpInputMessage, Map)} with, +	 * additional context available., +	 *, +	 * @param actualType the actual type of the target method parameter; for, +	 * annotated controllers, the {@link MethodParameter} can be accessed via, +	 * {@link ResolvableType#getSource()}., +	 * @param elementType the type of Objects in the output stream, +	 * @param request the current request]