[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +	private final Map<String, Class> importedResources = new LinkedHashMap<String, Class>();, +	public void addImportedResource(String importedResource, Class readerClass) {, +		this.importedResources.put(importedResource, readerClass);, +	public Map<String, Class> getImportedResources() {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +	private final Map<String, Class> importedResources = new LinkedHashMap<String, Class>();, +	public void addImportedResource(String importedResource, Class readerClass) {, +		this.importedResources.put(importedResource, readerClass);, +	public Map<String, Class> getImportedResources() {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +, +	private void loadBeanDefinitionsFromImportedResources(Map<String, Class> importedResources) {, +		Map<Class, BeanDefinitionReader> readerInstanceCache = new HashMap<Class, BeanDefinitionReader>();, +		for (Map.Entry<String, Class> entry : importedResources.entrySet()) {, +			String resource = entry.getKey();, +			Class readerClass = entry.getValue();, +			if (!readerInstanceCache.containsKey(readerClass)) {, +					BeanDefinitionReader readerInstance = (BeanDefinitionReader), +							readerClass.getConstructor(BeanDefinitionRegistry.class).newInstance(this.registry);, +					readerInstanceCache.put(readerClass, readerInstance);, +				}, +				catch (Exception ex) {, +					throw new IllegalStateException("Could not instantiate BeanDefinitionReader class [" + readerClass.getName() + "]");, +			BeanDefinitionReader reader = readerInstanceCache.get(readerClass);, +			reader.loadBeanDefinitions(resource);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +	private final Map<String, Class> importedResources = new LinkedHashMap<String, Class>();, +	public void addImportedResource(String importedResource, Class readerClass) {, +		this.importedResources.put(importedResource, readerClass);, +	public Map<String, Class> getImportedResources() {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +, +	private void loadBeanDefinitionsFromImportedResources(Map<String, Class> importedResources) {, +		Map<Class, BeanDefinitionReader> readerInstanceCache = new HashMap<Class, BeanDefinitionReader>();, +		for (Map.Entry<String, Class> entry : importedResources.entrySet()) {, +			String resource = entry.getKey();, +			Class readerClass = entry.getValue();, +			if (!readerInstanceCache.containsKey(readerClass)) {, +					BeanDefinitionReader readerInstance = (BeanDefinitionReader), +							readerClass.getConstructor(BeanDefinitionRegistry.class).newInstance(this.registry);, +					readerInstanceCache.put(readerClass, readerInstance);, +				}, +				catch (Exception ex) {, +					throw new IllegalStateException("Could not instantiate BeanDefinitionReader class [" + readerClass.getName() + "]");, +			BeanDefinitionReader reader = readerInstanceCache.get(readerClass);, +			reader.loadBeanDefinitions(resource);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import org.springframework.util.StringUtils;, +			processImport(configClass, (String[]) metadata.getAnnotationAttributes(Import.class.getName(), true).get("value"));, +			String[] resources = (String[]) metadata.getAnnotationAttributes(ImportResource.class.getName()).get("value");, +			Class readerClass = (Class) metadata.getAnnotationAttributes(ImportResource.class.getName()).get("reader");, +			if (readerClass == null) {, +				throw new IllegalStateException("No reader class associated with imported resources: " +, +						StringUtils.arrayToCommaDelimitedString(resources));, +			}, +			for (String resource : resources) {, +				configClass.addImportedResource(resource, readerClass);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +	private final Map<String, Class> importedResources = new LinkedHashMap<String, Class>();, +	public void addImportedResource(String importedResource, Class readerClass) {, +		this.importedResources.put(importedResource, readerClass);, +	public Map<String, Class> getImportedResources() {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +, +	private void loadBeanDefinitionsFromImportedResources(Map<String, Class> importedResources) {, +		Map<Class, BeanDefinitionReader> readerInstanceCache = new HashMap<Class, BeanDefinitionReader>();, +		for (Map.Entry<String, Class> entry : importedResources.entrySet()) {, +			String resource = entry.getKey();, +			Class readerClass = entry.getValue();, +			if (!readerInstanceCache.containsKey(readerClass)) {, +					BeanDefinitionReader readerInstance = (BeanDefinitionReader), +							readerClass.getConstructor(BeanDefinitionRegistry.class).newInstance(this.registry);, +					readerInstanceCache.put(readerClass, readerInstance);, +				}, +				catch (Exception ex) {, +					throw new IllegalStateException("Could not instantiate BeanDefinitionReader class [" + readerClass.getName() + "]");, +			BeanDefinitionReader reader = readerInstanceCache.get(readerClass);, +			reader.loadBeanDefinitions(resource);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import org.springframework.util.StringUtils;, +			processImport(configClass, (String[]) metadata.getAnnotationAttributes(Import.class.getName(), true).get("value"));, +			String[] resources = (String[]) metadata.getAnnotationAttributes(ImportResource.class.getName()).get("value");, +			Class readerClass = (Class) metadata.getAnnotationAttributes(ImportResource.class.getName()).get("reader");, +			if (readerClass == null) {, +				throw new IllegalStateException("No reader class associated with imported resources: " +, +						StringUtils.arrayToCommaDelimitedString(resources));, +			}, +			for (String resource : resources) {, +				configClass.addImportedResource(resource, readerClass);, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/ImportTests.java, +	public void testProcessImportsWithAsm() {, +		int configClasses = 2;, +		int beansInClasses = 2;, +		DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();, +		beanFactory.registerBeanDefinition("config", new RootBeanDefinition(ConfigurationWithImportAnnotation.class.getName()));, +		ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor();, +		pp.postProcessBeanFactory(beanFactory);, +		assertThat(beanFactory.getBeanDefinitionCount(), equalTo(configClasses + beansInClasses));, +	}]