[+++ b/org.springframework.beans/.classpath, +	<classpathentry kind="var" path="IVY_CACHE/javax.inject/com.springsource.javax.inject/0.9.0.PFD/com.springsource.javax.inject-0.9.0.PFD.jar" sourcepath="/IVY_CACHE/javax.inject/com.springsource.javax.inject/0.9.0.PFD/com.springsource.javax.inject-sources-0.9.0.PFD.jar"/>, +++ b/org.springframework.beans/.classpath, +	<classpathentry kind="var" path="IVY_CACHE/javax.inject/com.springsource.javax.inject/0.9.0.PFD/com.springsource.javax.inject-0.9.0.PFD.jar" sourcepath="/IVY_CACHE/javax.inject/com.springsource.javax.inject/0.9.0.PFD/com.springsource.javax.inject-sources-0.9.0.PFD.jar"/>, +++ b/org.springframework.beans/beans.iml, +    <orderEntry type="library" name="javax.inject" level="project" />, +++ b/org.springframework.beans/.classpath, +	<classpathentry kind="var" path="IVY_CACHE/javax.inject/com.springsource.javax.inject/0.9.0.PFD/com.springsource.javax.inject-0.9.0.PFD.jar" sourcepath="/IVY_CACHE/javax.inject/com.springsource.javax.inject/0.9.0.PFD/com.springsource.javax.inject-sources-0.9.0.PFD.jar"/>, +++ b/org.springframework.beans/beans.iml, +    <orderEntry type="library" name="javax.inject" level="project" />, +++ b/org.springframework.beans/ivy.xml, +		<dependency org="javax.inject" name="com.springsource.javax.inject" rev="0.9.0.PFD" conf="provided->compile"/>, +++ b/org.springframework.beans/.classpath, +	<classpathentry kind="var" path="IVY_CACHE/javax.inject/com.springsource.javax.inject/0.9.0.PFD/com.springsource.javax.inject-0.9.0.PFD.jar" sourcepath="/IVY_CACHE/javax.inject/com.springsource.javax.inject/0.9.0.PFD/com.springsource.javax.inject-sources-0.9.0.PFD.jar"/>, +++ b/org.springframework.beans/beans.iml, +    <orderEntry type="library" name="javax.inject" level="project" />, +++ b/org.springframework.beans/ivy.xml, +		<dependency org="javax.inject" name="com.springsource.javax.inject" rev="0.9.0.PFD" conf="provided->compile"/>, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + * <p>Also supports JSR-330's {@link javax.inject.Inject} annotation, if available., + *, +	private final Set<Class<? extends Annotation>> autowiredAnnotationTypes =, +			new LinkedHashSet<Class<? extends Annotation>>();, +	 * Create a new AutowiredAnnotationBeanPostProcessor, +	 * for Spring's standard {@link Autowired} annotation., +	 * <p>Also supports JSR-330's {@link javax.inject.Inject} annotation, if available., +	@SuppressWarnings("unchecked"), +	public AutowiredAnnotationBeanPostProcessor() {, +		this.autowiredAnnotationTypes.add(Autowired.class);, +		this.autowiredAnnotationTypes.add(Value.class);, +		ClassLoader cl = AutowiredAnnotationBeanPostProcessor.class.getClassLoader();, +		try {, +			this.autowiredAnnotationTypes.add((Class<? extends Annotation>) cl.loadClass("javax.inject.Inject"));, +		catch (ClassNotFoundException ex) {, +			// JSR-330 API not available - simply skip., +		}, +	}, +, +		this.autowiredAnnotationTypes.clear();, +		this.autowiredAnnotationTypes.add(autowiredAnnotationType);, +	}, +, +	/**, +	 * Set the 'autowired' annotation types, to be used on constructors, fields,, +	 * setter methods and arbitrary config methods., +	 * <p>The default autowired annotation type is the Spring-provided, +	 * {@link Autowired} annotation, as well as {@link Value} and raw, +	 * use of the {@link Qualifier} annotation., +	 * <p>This setter property exists so that developers can provide their own, +	 * (non-Spring-specific) annotation types to indicate that a member is, +	 * supposed to be autowired., +	 */, +	public void setAutowiredAnnotationTypes(Set<Class<? extends Annotation>> autowiredAnnotationTypes) {, +		Assert.notEmpty(autowiredAnnotationTypes, "'autowiredAnnotationTypes' must not be empty");, +		this.autowiredAnnotationTypes.clear();, +		this.autowiredAnnotationTypes.addAll(autowiredAnnotationTypes);, +++ b/org.springframework.beans/.classpath, +	<classpathentry kind="var" path="IVY_CACHE/javax.inject/com.springsource.javax.inject/0.9.0.PFD/com.springsource.javax.inject-0.9.0.PFD.jar" sourcepath="/IVY_CACHE/javax.inject/com.springsource.javax.inject/0.9.0.PFD/com.springsource.javax.inject-sources-0.9.0.PFD.jar"/>, +++ b/org.springframework.beans/beans.iml, +    <orderEntry type="library" name="javax.inject" level="project" />, +++ b/org.springframework.beans/ivy.xml, +		<dependency org="javax.inject" name="com.springsource.javax.inject" rev="0.9.0.PFD" conf="provided->compile"/>, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, + * <p>Also supports JSR-330's {@link javax.inject.Inject} annotation, if available., + *, +	private final Set<Class<? extends Annotation>> autowiredAnnotationTypes =, +			new LinkedHashSet<Class<? extends Annotation>>();, +	 * Create a new AutowiredAnnotationBeanPostProcessor, +	 * for Spring's standard {@link Autowired} annotation., +	 * <p>Also supports JSR-330's {@link javax.inject.Inject} annotation, if available., +	@SuppressWarnings("unchecked"), +	public AutowiredAnnotationBeanPostProcessor() {, +		this.autowiredAnnotationTypes.add(Autowired.class);, +		this.autowiredAnnotationTypes.add(Value.class);, +		ClassLoader cl = AutowiredAnnotationBeanPostProcessor.class.getClassLoader();, +		try {, +			this.autowiredAnnotationTypes.add((Class<? extends Annotation>) cl.loadClass("javax.inject.Inject"));, +		catch (ClassNotFoundException ex) {, +			// JSR-330 API not available - simply skip., +		}, +	}, +, +		this.autowiredAnnotationTypes.clear();, +		this.autowiredAnnotationTypes.add(autowiredAnnotationType);, +	}, +, +	/**, +	 * Set the 'autowired' annotation types, to be used on constructors, fields,, +	 * setter methods and arbitrary config methods., +	 * <p>The default autowired annotation type is the Spring-provided, +	 * {@link Autowired} annotation, as well as {@link Value} and raw, +	 * use of the {@link Qualifier} annotation., +	 * <p>This setter property exists so that developers can provide their own, +	 * (non-Spring-specific) annotation types to indicate that a member is, +	 * supposed to be autowired., +	 */, +	public void setAutowiredAnnotationTypes(Set<Class<? extends Annotation>> autowiredAnnotationTypes) {, +		Assert.notEmpty(autowiredAnnotationTypes, "'autowiredAnnotationTypes' must not be empty");, +		this.autowiredAnnotationTypes.clear();, +		this.autowiredAnnotationTypes.addAll(autowiredAnnotationTypes);]