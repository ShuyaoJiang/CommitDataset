[+++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/DefaultJCacheOperationSource.java, +		Assert.state(this.beanFactory != null, () -> "BeanFactory required for resolution of [" + type + "]");, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/DefaultJCacheOperationSource.java, +		Assert.state(this.beanFactory != null, () -> "BeanFactory required for resolution of [" + type + "]");, +++ b/spring-context/src/main/java/org/springframework/cache/support/NoOpCacheManager.java, +			this.caches.computeIfAbsent(name, key -> new NoOpCache(name));, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/DefaultJCacheOperationSource.java, +		Assert.state(this.beanFactory != null, () -> "BeanFactory required for resolution of [" + type + "]");, +++ b/spring-context/src/main/java/org/springframework/cache/support/NoOpCacheManager.java, +			this.caches.computeIfAbsent(name, key -> new NoOpCache(name));, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/DefaultMvcResult.java, +		Assert.state(result != RESULT_NONE, () -> "Async result for handler [" + this.handler + "] was not set");, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/DefaultJCacheOperationSource.java, +		Assert.state(this.beanFactory != null, () -> "BeanFactory required for resolution of [" + type + "]");, +++ b/spring-context/src/main/java/org/springframework/cache/support/NoOpCacheManager.java, +			this.caches.computeIfAbsent(name, key -> new NoOpCache(name));, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/DefaultMvcResult.java, +		Assert.state(result != RESULT_NONE, () -> "Async result for handler [" + this.handler + "] was not set");, +++ b/spring-web/src/main/java/org/springframework/web/server/ServerWebExchange.java, +		Assert.notNull(value, () -> "Required attribute '" + name + "' is missing.");, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/DefaultJCacheOperationSource.java, +		Assert.state(this.beanFactory != null, () -> "BeanFactory required for resolution of [" + type + "]");, +++ b/spring-context/src/main/java/org/springframework/cache/support/NoOpCacheManager.java, +			this.caches.computeIfAbsent(name, key -> new NoOpCache(name));, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/DefaultMvcResult.java, +		Assert.state(result != RESULT_NONE, () -> "Async result for handler [" + this.handler + "] was not set");, +++ b/spring-web/src/main/java/org/springframework/web/server/ServerWebExchange.java, +		Assert.notNull(value, () -> "Required attribute '" + name + "' is missing.");, +++ b/spring-web/src/main/java/org/springframework/web/server/WebSession.java, +		Assert.notNull(value, () -> "Required attribute '" + name + "' is missing.");, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/DefaultJCacheOperationSource.java, +		Assert.state(this.beanFactory != null, () -> "BeanFactory required for resolution of [" + type + "]");, +++ b/spring-context/src/main/java/org/springframework/cache/support/NoOpCacheManager.java, +			this.caches.computeIfAbsent(name, key -> new NoOpCache(name));, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/DefaultMvcResult.java, +		Assert.state(result != RESULT_NONE, () -> "Async result for handler [" + this.handler + "] was not set");, +++ b/spring-web/src/main/java/org/springframework/web/server/ServerWebExchange.java, +		Assert.notNull(value, () -> "Required attribute '" + name + "' is missing.");, +++ b/spring-web/src/main/java/org/springframework/web/server/WebSession.java, +		Assert.notNull(value, () -> "Required attribute '" + name + "' is missing.");, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ExchangeFilterFunctions.java, +						.orElseGet(() -> Mono.just(request)));, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/DefaultJCacheOperationSource.java, +		Assert.state(this.beanFactory != null, () -> "BeanFactory required for resolution of [" + type + "]");, +++ b/spring-context/src/main/java/org/springframework/cache/support/NoOpCacheManager.java, +			this.caches.computeIfAbsent(name, key -> new NoOpCache(name));, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/DefaultMvcResult.java, +		Assert.state(result != RESULT_NONE, () -> "Async result for handler [" + this.handler + "] was not set");, +++ b/spring-web/src/main/java/org/springframework/web/server/ServerWebExchange.java, +		Assert.notNull(value, () -> "Required attribute '" + name + "' is missing.");, +++ b/spring-web/src/main/java/org/springframework/web/server/WebSession.java, +		Assert.notNull(value, () -> "Required attribute '" + name + "' is missing.");, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ExchangeFilterFunctions.java, +						.orElseGet(() -> Mono.just(request)));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ModelInitializer.java, +				.orElseGet(() -> Conventions.getVariableNameForParameter(param));, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/DefaultJCacheOperationSource.java, +		Assert.state(this.beanFactory != null, () -> "BeanFactory required for resolution of [" + type + "]");, +++ b/spring-context/src/main/java/org/springframework/cache/support/NoOpCacheManager.java, +			this.caches.computeIfAbsent(name, key -> new NoOpCache(name));, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/DefaultMvcResult.java, +		Assert.state(result != RESULT_NONE, () -> "Async result for handler [" + this.handler + "] was not set");, +++ b/spring-web/src/main/java/org/springframework/web/server/ServerWebExchange.java, +		Assert.notNull(value, () -> "Required attribute '" + name + "' is missing.");, +++ b/spring-web/src/main/java/org/springframework/web/server/WebSession.java, +		Assert.notNull(value, () -> "Required attribute '" + name + "' is missing.");, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ExchangeFilterFunctions.java, +						.orElseGet(() -> Mono.just(request)));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ModelInitializer.java, +				.orElseGet(() -> Conventions.getVariableNameForParameter(param));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/RedirectView.java, +			Assert.notNull(value, () -> "No value for URI variable '" + name + "'");, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/DefaultJCacheOperationSource.java, +		Assert.state(this.beanFactory != null, () -> "BeanFactory required for resolution of [" + type + "]");, +++ b/spring-context/src/main/java/org/springframework/cache/support/NoOpCacheManager.java, +			this.caches.computeIfAbsent(name, key -> new NoOpCache(name));, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/DefaultMvcResult.java, +		Assert.state(result != RESULT_NONE, () -> "Async result for handler [" + this.handler + "] was not set");, +++ b/spring-web/src/main/java/org/springframework/web/server/ServerWebExchange.java, +		Assert.notNull(value, () -> "Required attribute '" + name + "' is missing.");, +++ b/spring-web/src/main/java/org/springframework/web/server/WebSession.java, +		Assert.notNull(value, () -> "Required attribute '" + name + "' is missing.");, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ExchangeFilterFunctions.java, +						.orElseGet(() -> Mono.just(request)));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ModelInitializer.java, +				.orElseGet(() -> Conventions.getVariableNameForParameter(param));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/RedirectView.java, +			Assert.notNull(value, () -> "No value for URI variable '" + name + "'");, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, +				.orElseGet(() -> Conventions.getVariableNameForParameter(returnType));, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/DefaultJCacheOperationSource.java, +		Assert.state(this.beanFactory != null, () -> "BeanFactory required for resolution of [" + type + "]");, +++ b/spring-context/src/main/java/org/springframework/cache/support/NoOpCacheManager.java, +			this.caches.computeIfAbsent(name, key -> new NoOpCache(name));, +++ b/spring-test/src/main/java/org/springframework/test/web/servlet/DefaultMvcResult.java, +		Assert.state(result != RESULT_NONE, () -> "Async result for handler [" + this.handler + "] was not set");, +++ b/spring-web/src/main/java/org/springframework/web/server/ServerWebExchange.java, +		Assert.notNull(value, () -> "Required attribute '" + name + "' is missing.");, +++ b/spring-web/src/main/java/org/springframework/web/server/WebSession.java, +		Assert.notNull(value, () -> "Required attribute '" + name + "' is missing.");]