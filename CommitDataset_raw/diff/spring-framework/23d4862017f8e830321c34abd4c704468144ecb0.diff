[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +import org.springframework.core.ResolvableType;, +					if (isOverride(method, annotatedMethod)) {, +	private static boolean isOverride(Method method, Method candidate) {, +		if (!candidate.getName().equals(method.getName()) ||, +				candidate.getParameterCount() != method.getParameterCount()) {, +			return false;, +		}, +		Class<?>[] paramTypes = method.getParameterTypes();, +		if (Arrays.equals(candidate.getParameterTypes(), paramTypes)) {, +			return true;, +		}, +		for (int i = 0; i < paramTypes.length; i++) {, +			if (paramTypes[i] != ResolvableType.forMethodParameter(candidate, i, method.getDeclaringClass()).resolve()) {, +				return false;, +			}, +		}, +		return true;, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +import org.springframework.core.ResolvableType;, +					if (isOverride(method, annotatedMethod)) {, +	private static boolean isOverride(Method method, Method candidate) {, +		if (!candidate.getName().equals(method.getName()) ||, +				candidate.getParameterCount() != method.getParameterCount()) {, +			return false;, +		}, +		Class<?>[] paramTypes = method.getParameterTypes();, +		if (Arrays.equals(candidate.getParameterTypes(), paramTypes)) {, +			return true;, +		}, +		for (int i = 0; i < paramTypes.length; i++) {, +			if (paramTypes[i] != ResolvableType.forMethodParameter(candidate, i, method.getDeclaringClass()).resolve()) {, +				return false;, +			}, +		}, +		return true;, +	}, +, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java, +	@Test  // SPR-16060, +	public void findMethodAnnotationFromGenericInterface() throws Exception {, +		Method method = ImplementsInterfaceWithGenericAnnotatedMethod.class.getMethod("foo", String.class);, +		Order order = findAnnotation(method, Order.class);, +		assertNotNull(order);, +	}, +, +	public void findAnnotationDeclaringClassForAllScenarios() {, +	public void isAnnotationInheritedForAllScenarios() {, +	public void getDefaultValueFromNonPublicAnnotation() {, +	public void getDefaultValueFromAnnotationType() {, +	public void getRepeatableAnnotationsDeclaredOnClassWithAttributeAliases() {, +	public interface InterfaceWithGenericAnnotatedMethod<T> {, +, +		@Order, +		void foo(T t);, +	}, +, +	public static class ImplementsInterfaceWithGenericAnnotatedMethod implements InterfaceWithGenericAnnotatedMethod<String> {, +, +		public void foo(String t) {, +		}, +	}, +]