[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, + * Copyright 2002-2011 the original author or authors., +	 * @return the enhanced subclass, +		if (EnhancedConfiguration.class.isAssignableFrom(configClass)) {, +			if (logger.isDebugEnabled()) {, +				logger.debug(String.format("Ignoring request to enhance %s as it has " +, +						"already been enhanced. This usually indicates that more than one " +, +						"ConfigurationClassPostProcessor has been registered (e.g. via " +, +						"<context:annotation-config>). This is harmless, but you may " +, +						"want check your configuration and remove one CCPP if possible",, +						configClass.getName()));, +			}, +			return configClass;, +		}, +	 * Marker interface to be implemented by all @Configuration CGLIB subclasses., +	 * Facilitates idempotent behavior for {@link ConfigurationClassEnhancer#enhance(Class)}, +	 * through checking to see if candidate classes are already assignable to it, e.g., +	 * have already been enhanced., +	 * <p>Also extends {@link DisposableBean}, as all enhanced, +	 * {@code @Configuration} classes must de-register static CGLIB callbacks on, +	 * destruction, which is handled by the (private) {@code DisposableBeanMethodInterceptor}., +	 * <p>Note that this interface is intended for framework-internal use only, however, +	 * must remain public in order to allow access to subclasses generated from other , +	 * packages (i.e. user code)., +	 */, +	public interface EnhancedConfiguration extends DisposableBean {, +	}, +, +	/**, +		enhancer.setInterfaces(new Class[] {EnhancedConfiguration.class});, +	 * @see EnhancedConfiguration, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, + * Copyright 2002-2011 the original author or authors., +	 * @return the enhanced subclass, +		if (EnhancedConfiguration.class.isAssignableFrom(configClass)) {, +			if (logger.isDebugEnabled()) {, +				logger.debug(String.format("Ignoring request to enhance %s as it has " +, +						"already been enhanced. This usually indicates that more than one " +, +						"ConfigurationClassPostProcessor has been registered (e.g. via " +, +						"<context:annotation-config>). This is harmless, but you may " +, +						"want check your configuration and remove one CCPP if possible",, +						configClass.getName()));, +			}, +			return configClass;, +		}, +	 * Marker interface to be implemented by all @Configuration CGLIB subclasses., +	 * Facilitates idempotent behavior for {@link ConfigurationClassEnhancer#enhance(Class)}, +	 * through checking to see if candidate classes are already assignable to it, e.g., +	 * have already been enhanced., +	 * <p>Also extends {@link DisposableBean}, as all enhanced, +	 * {@code @Configuration} classes must de-register static CGLIB callbacks on, +	 * destruction, which is handled by the (private) {@code DisposableBeanMethodInterceptor}., +	 * <p>Note that this interface is intended for framework-internal use only, however, +	 * must remain public in order to allow access to subclasses generated from other , +	 * packages (i.e. user code)., +	 */, +	public interface EnhancedConfiguration extends DisposableBean {, +	}, +, +	/**, +		enhancer.setInterfaces(new Class[] {EnhancedConfiguration.class});, +	 * @see EnhancedConfiguration, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +				if (configClass != enhancedClass) {, +			}, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, + * Copyright 2002-2011 the original author or authors., +	 * @return the enhanced subclass, +		if (EnhancedConfiguration.class.isAssignableFrom(configClass)) {, +			if (logger.isDebugEnabled()) {, +				logger.debug(String.format("Ignoring request to enhance %s as it has " +, +						"already been enhanced. This usually indicates that more than one " +, +						"ConfigurationClassPostProcessor has been registered (e.g. via " +, +						"<context:annotation-config>). This is harmless, but you may " +, +						"want check your configuration and remove one CCPP if possible",, +						configClass.getName()));, +			}, +			return configClass;, +		}, +	 * Marker interface to be implemented by all @Configuration CGLIB subclasses., +	 * Facilitates idempotent behavior for {@link ConfigurationClassEnhancer#enhance(Class)}, +	 * through checking to see if candidate classes are already assignable to it, e.g., +	 * have already been enhanced., +	 * <p>Also extends {@link DisposableBean}, as all enhanced, +	 * {@code @Configuration} classes must de-register static CGLIB callbacks on, +	 * destruction, which is handled by the (private) {@code DisposableBeanMethodInterceptor}., +	 * <p>Note that this interface is intended for framework-internal use only, however, +	 * must remain public in order to allow access to subclasses generated from other , +	 * packages (i.e. user code)., +	 */, +	public interface EnhancedConfiguration extends DisposableBean {, +	}, +, +	/**, +		enhancer.setInterfaces(new Class[] {EnhancedConfiguration.class});, +	 * @see EnhancedConfiguration, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +				if (configClass != enhancedClass) {, +			}, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/DuplicateConfigurationClassPostProcessorTests-context.xml]