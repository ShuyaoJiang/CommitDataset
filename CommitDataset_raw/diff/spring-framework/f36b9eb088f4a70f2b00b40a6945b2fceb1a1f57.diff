[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorEquality.java, +		if (left!=null && (left instanceof Comparable)) {, +		} else {, +			return BooleanTypedValue.forValue(left==right);, +		}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorEquality.java, +		if (left!=null && (left instanceof Comparable)) {, +		} else {, +			return BooleanTypedValue.forValue(left==right);, +		}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorInequality.java, +, +		if (left!=null && (left instanceof Comparable)) {, +		} else {, +			return BooleanTypedValue.forValue(left!=right);, +		}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorEquality.java, +		if (left!=null && (left instanceof Comparable)) {, +		} else {, +			return BooleanTypedValue.forValue(left==right);, +		}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorInequality.java, +, +		if (left!=null && (left instanceof Comparable)) {, +		} else {, +			return BooleanTypedValue.forValue(left!=right);, +		}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/StandardTypeComparator.java, +import org.springframework.expression.spel.SpelMessages;, +				double d1 = leftNumber.doubleValue();, +				double d2 = rightNumber.doubleValue();, +				return Double.compare(d1,d2);, +			} else if (leftNumber instanceof Float || rightNumber instanceof Float) {, +				float f1 = leftNumber.floatValue();, +				float f2 = rightNumber.floatValue();, +				return Float.compare(f1,f2);, +			} else if (leftNumber instanceof Long || rightNumber instanceof Long) {, +			} else {, +		, +		// How do we get to this line...?, +		throw new SpelException(SpelMessages.NOT_COMPARABLE, left.getClass(), right.getClass());, +		if (left instanceof Comparable) {, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorEquality.java, +		if (left!=null && (left instanceof Comparable)) {, +		} else {, +			return BooleanTypedValue.forValue(left==right);, +		}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorInequality.java, +, +		if (left!=null && (left instanceof Comparable)) {, +		} else {, +			return BooleanTypedValue.forValue(left!=right);, +		}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/StandardTypeComparator.java, +import org.springframework.expression.spel.SpelMessages;, +				double d1 = leftNumber.doubleValue();, +				double d2 = rightNumber.doubleValue();, +				return Double.compare(d1,d2);, +			} else if (leftNumber instanceof Float || rightNumber instanceof Float) {, +				float f1 = leftNumber.floatValue();, +				float f2 = rightNumber.floatValue();, +				return Float.compare(f1,f2);, +			} else if (leftNumber instanceof Long || rightNumber instanceof Long) {, +			} else {, +		, +		// How do we get to this line...?, +		throw new SpelException(SpelMessages.NOT_COMPARABLE, left.getClass(), right.getClass());, +		if (left instanceof Comparable) {, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/DefaultComparatorUnitTests.java, +		assertTrue(comparator.canCompare("abc",3));, +		assertFalse(comparator.canCompare(String.class,3));, +	, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorEquality.java, +		if (left!=null && (left instanceof Comparable)) {, +		} else {, +			return BooleanTypedValue.forValue(left==right);, +		}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorInequality.java, +, +		if (left!=null && (left instanceof Comparable)) {, +		} else {, +			return BooleanTypedValue.forValue(left!=right);, +		}, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/StandardTypeComparator.java, +import org.springframework.expression.spel.SpelMessages;, +				double d1 = leftNumber.doubleValue();, +				double d2 = rightNumber.doubleValue();, +				return Double.compare(d1,d2);, +			} else if (leftNumber instanceof Float || rightNumber instanceof Float) {, +				float f1 = leftNumber.floatValue();, +				float f2 = rightNumber.floatValue();, +				return Float.compare(f1,f2);, +			} else if (leftNumber instanceof Long || rightNumber instanceof Long) {, +			} else {, +		, +		// How do we get to this line...?, +		throw new SpelException(SpelMessages.NOT_COMPARABLE, left.getClass(), right.getClass());, +		if (left instanceof Comparable) {, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/DefaultComparatorUnitTests.java, +		assertTrue(comparator.canCompare("abc",3));]