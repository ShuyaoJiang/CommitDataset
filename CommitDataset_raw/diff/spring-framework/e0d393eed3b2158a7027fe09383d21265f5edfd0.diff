[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/UserDestinationMessageHandler.java, +			return (this.targetDestination != null) ? this.targetDestination + sessionId : null;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/UserDestinationMessageHandler.java, +			return (this.targetDestination != null) ? this.targetDestination + sessionId : null;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +				this.tcpClient.close().await();, +			if (session == null) {, +				return;, +			session.forward(message);, +, +			// TODO: detect if send fails and send ERROR downstream (except on DISCONNECT), +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/UserDestinationMessageHandler.java, +			return (this.targetDestination != null) ? this.targetDestination + sessionId : null;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +				this.tcpClient.close().await();, +			if (session == null) {, +				return;, +			session.forward(message);, +, +			// TODO: detect if send fails and send ERROR downstream (except on DISCONNECT), +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompWebSocketHandler.java, +			logger.error("Ignoring message, sessionId not found: " + message);, +		if (StompCommand.MESSAGE.equals(headers.getStompCommand()) && (headers.getSubscriptionId() == null)) {]