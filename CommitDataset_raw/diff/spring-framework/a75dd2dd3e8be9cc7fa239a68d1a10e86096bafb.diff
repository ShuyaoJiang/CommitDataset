[+++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/DispatcherServletTests.java, +		assertEquals("Wed, 01 Apr 2015 00:00:00 GMT", response.getHeader("Last-Modified"));, +		assertEquals("Wed, 01 Apr 2015 00:00:01 GMT", response.getHeader("Last-Modified"));, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/DispatcherServletTests.java, +		assertEquals("Wed, 01 Apr 2015 00:00:00 GMT", response.getHeader("Last-Modified"));, +		assertEquals("Wed, 01 Apr 2015 00:00:01 GMT", response.getHeader("Last-Modified"));, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessorMockTests.java, +import java.io.IOException;, +import static org.springframework.http.MediaType.*;, +	private void assertResponseBody(String body) throws IOException {, +	private void assertConditionalResponse(HttpStatus status, String body, String etag, long lastModified), +			throws IOException {, +			assertEquals(lastModified / 1000, servletResponse.getDateHeader(HttpHeaders.LAST_MODIFIED) / 1000);, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/DispatcherServletTests.java, +		assertEquals("Wed, 01 Apr 2015 00:00:00 GMT", response.getHeader("Last-Modified"));, +		assertEquals("Wed, 01 Apr 2015 00:00:01 GMT", response.getHeader("Last-Modified"));, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessorMockTests.java, +import java.io.IOException;, +import static org.springframework.http.MediaType.*;, +	private void assertResponseBody(String body) throws IOException {, +	private void assertConditionalResponse(HttpStatus status, String body, String etag, long lastModified), +			throws IOException {, +			assertEquals(lastModified / 1000, servletResponse.getDateHeader(HttpHeaders.LAST_MODIFIED) / 1000);, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandlerTests.java, +import static org.junit.Assert.*;, + * Unit tests for {@link ResourceHttpRequestHandler}., +		assertEquals(resourceLastModified("test/foo.css") / 1000, this.response.getDateHeader("Last-Modified") / 1000);, +		assertEquals(resourceLastModified("test/foo.css") / 1000, this.response.getDateHeader("Last-Modified") / 1000);, +		assertEquals(resourceLastModified("test/foo.css") / 1000, this.response.getDateHeader("Last-Modified") / 1000);, +		assertTrue(this.response.getDateHeader("Expires") >= System.currentTimeMillis() - 1000 + (3600 * 1000));, +		assertEquals(resourceLastModified("test/foo.css") / 1000, this.response.getDateHeader("Last-Modified") / 1000);, +		assertTrue(this.response.getDateHeader("Expires") <= System.currentTimeMillis());, +		assertEquals(resourceLastModified("test/foo.css") / 1000, this.response.getDateHeader("Last-Modified") / 1000);, +		assertEquals(resourceLastModified("test/foo.html") / 1000, this.response.getDateHeader("Last-Modified") / 1000);, +		assertEquals(resourceLastModified("testalternatepath/baz.css") / 1000,, +				this.response.getDateHeader("Last-Modified") / 1000);, +				return "";]