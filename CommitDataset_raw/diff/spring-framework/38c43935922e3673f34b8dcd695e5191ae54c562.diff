[+++ b/spring-core/src/main/java/org/springframework/core/convert/support/MapToMapConverter.java, + * Copyright 2002-2012 the original author or authors., +import java.util.ArrayList;, +import java.util.List;, +		List<MapEntry> targetEntries = new ArrayList<MapEntry>(sourceMap.size());, +			targetEntries.add(new MapEntry(targetKey, targetValue));, +		if(!copyRequired) {, +			return sourceMap;, +		}, +		Map<Object, Object> targetMap = CollectionFactory.createMap(targetType.getType(), sourceMap.size());, +		for (MapEntry entry : targetEntries) {, +			entry.addToMap(targetMap);, +		}, +		return targetMap;, +	private static class MapEntry {, +, +		private Object key;, +		private Object value;, +, +		public MapEntry(Object key, Object value) {, +			this.key = key;, +			this.value = value;, +		}, +, +		public void addToMap(Map<Object, Object> map) {, +			map.put(key, value);, +		}, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/MapToMapConverter.java, + * Copyright 2002-2012 the original author or authors., +import java.util.ArrayList;, +import java.util.List;, +		List<MapEntry> targetEntries = new ArrayList<MapEntry>(sourceMap.size());, +			targetEntries.add(new MapEntry(targetKey, targetValue));, +		if(!copyRequired) {, +			return sourceMap;, +		}, +		Map<Object, Object> targetMap = CollectionFactory.createMap(targetType.getType(), sourceMap.size());, +		for (MapEntry entry : targetEntries) {, +			entry.addToMap(targetMap);, +		}, +		return targetMap;, +	private static class MapEntry {, +, +		private Object key;, +		private Object value;, +, +		public MapEntry(Object key, Object value) {, +			this.key = key;, +			this.value = value;, +		}, +, +		public void addToMap(Map<Object, Object> map) {, +			map.put(key, value);, +		}, +	}, +, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/MapToMapConverterTests.java, + * Copyright 2002-2012 the original author or authors., +import java.util.Collections;, +	@Test, +	public void noDefaultConstructorCopyNotRequired() throws Exception {, +		// SPR-9284, +		NoDefaultConstructorMap<String, Integer> map = new NoDefaultConstructorMap<String,Integer>(, +				Collections.<String, Integer> singletonMap("1", 1));, +		TypeDescriptor sourceType = TypeDescriptor.map(NoDefaultConstructorMap.class,, +				TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class));, +		TypeDescriptor targetType = TypeDescriptor.map(NoDefaultConstructorMap.class,, +				TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class));, +		assertTrue(conversionService.canConvert(sourceType, targetType));, +		@SuppressWarnings("unchecked"), +		Map<String, Integer> result = (Map<String, Integer>) conversionService.convert(map, sourceType, targetType);, +		assertEquals(map, result);, +		assertEquals(NoDefaultConstructorMap.class, result.getClass());, +	}, +, +	public static class NoDefaultConstructorMap<K, V> extends HashMap<K, V> {, +		public NoDefaultConstructorMap(Map<? extends K, ? extends V> m) {, +			super(m);, +		}, +	}, +]