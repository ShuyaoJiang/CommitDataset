[+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, + * {@link #getSuperType() supertypes}, {@link #getInterfaces() interfaces}, and, + * {@link #forMethodReturn(Method) method returns}, {@link #forClass(Class) classes}, or, +	 * The {@link TypeVariableResolver} to use or {@code null} if no resolver is available., +	 * implement or extend the specified class., +	 * @return a {@link ResolvableType} representing this object as the specified, +	 * type or {@link #NONE}, +	 * Return a {@link ResolvableType} for the specified nesting level. See, +	 * Return a {@link ResolvableType} for the specified nesting level. The nesting level, +	 * of 1 indicates this type; 2 indicates the first nested generic; 3 the second; and so, +	 * {@code List}, level 2 the {@code Set}, and level 3 the {@code Integer}., +	 * for the given level. For example, an index of 0 would refer to a {@code Map} key;, +	 * whereas, 1 would refer to the value. If the map does not contain a value for a, +	 * <p>Nesting levels may also apply to array types; for example given, +	 * {@code String[]}, a nesting level of 2 refers to {@code String}., +	 * {@link #getSuperType() supertype} hierarchy will be considered., +	 * type, 2 for the first nested generic, 3 for the second and so on, +	 * level (may be {@code null}), +	 * @return a {@link ResolvableType} for the nested level or {@link #NONE}, +	 * indexes. Indexes are zero based; for example given the type, +	 * {@code Integer}. Nested generics can be accessed by specifying multiple indexes;, +	 * @param indexes the indexes that refer to the generic parameter (may be omitted to, +	 * Return an array of {@link ResolvableType}s representing the generic parameters of, +	 * it allows access to nested generics and protects against, +	 * {@code IndexOutOfBoundsExceptions}., +	 * @param indexes the indexes that refer to the generic parameter (may be omitted to, +	 * {@link WildcardType}s if direct resolution fails; however, bounds of Object.class, +	 * of {@link TypeVariable}s and {@link WildcardType}s if direct resolution fails;]