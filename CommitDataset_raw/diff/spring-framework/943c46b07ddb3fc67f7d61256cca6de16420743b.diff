[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	public static final TypeDescriptor OBJECT = new TypeDescriptor(Object.class);, +	public static final TypeDescriptor STRING = new TypeDescriptor(String.class);, +	 * Create a new type descriptor for a field., +	 * Use this constructor when a target conversion point originates from a field., +	 * @param field the field to wrap, +	 */, +	public TypeDescriptor(Field field) {, +		Assert.notNull(field, "Field must not be null");, +		this.field = field;, +	}, +, +	/**, +	 * Create a new descriptor for the type of the given value., +	 * <p>Use this constructor when a conversion point comes from a source such as a Map or, +	 * Collection, where no additional context is available but elements can be introspected., +	 * @param type the actual type to wrap, +	 */, +	public TypeDescriptor(Object value) {, +		Assert.notNull(value, "Value must not be null");, +		this.value = value;, +		this.type = value.getClass();, +	}, +	, +	// protected constructors for subclasses, +	, +	/**, +	 * Returns true if an object this type can be assigned to a reference of given targetType., +		return isTypeAssignableTo(targetType.getType());, +, +	// internal helpers, +		if (type == null) {, +			return TypeDescriptor.NULL;, +		} else if (type.equals(String.class)) {, +			return TypeDescriptor.STRING;, +		} else {, +			return new TypeDescriptor(type);, +		}]