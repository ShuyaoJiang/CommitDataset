[+++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/GenericBinder.java, +import org.springframework.context.ApplicationEvent;, +import org.springframework.context.ApplicationListener;, +			Class<?> formattedType = getFormattedObjectType(formatter.getClass());, +				Formatter formatter = getFormatter();, +				parsed = formatter.parse(formatted, LocaleContextHolder.getLocale());, +			Class parsedType = getFormattedObjectType(formatter.getClass());, +		private Class getFormattedObjectType(Class formatterClass) {, +			Class classToIntrospect = formatterClass;, +				Type[] ifcs = classToIntrospect.getGenericInterfaces();, +				for (Type ifc : ifcs) {, +					if (ifc instanceof ParameterizedType) {, +						ParameterizedType paramIfc = (ParameterizedType) ifc;, +						Type rawType = paramIfc.getRawType();, +						if (Formatter.class.equals(rawType)) {, +							Type arg = paramIfc.getActualTypeArguments()[0];, +							if (arg instanceof TypeVariable) {, +								arg = GenericTypeResolver.resolveTypeVariable((TypeVariable) arg, formatterClass);, +							if (arg instanceof Class) {, +								return (Class) arg;, +							}, +						}, +						else if (ApplicationListener.class.isAssignableFrom((Class) rawType)) {, +							return getFormattedObjectType((Class) rawType);, +						}, +					}, +					else if (ApplicationListener.class.isAssignableFrom((Class) ifc)) {, +						return getFormattedObjectType((Class) ifc);, +								// TODO this could be a ConverterExecutorNotFoundException if no suitable converter was found, +								cause.getCause().printStackTrace();, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/GenericBinder.java, +import org.springframework.context.ApplicationEvent;, +import org.springframework.context.ApplicationListener;, +			Class<?> formattedType = getFormattedObjectType(formatter.getClass());, +				Formatter formatter = getFormatter();, +				parsed = formatter.parse(formatted, LocaleContextHolder.getLocale());, +			Class parsedType = getFormattedObjectType(formatter.getClass());, +		private Class getFormattedObjectType(Class formatterClass) {, +			Class classToIntrospect = formatterClass;, +				Type[] ifcs = classToIntrospect.getGenericInterfaces();, +				for (Type ifc : ifcs) {, +					if (ifc instanceof ParameterizedType) {, +						ParameterizedType paramIfc = (ParameterizedType) ifc;, +						Type rawType = paramIfc.getRawType();, +						if (Formatter.class.equals(rawType)) {, +							Type arg = paramIfc.getActualTypeArguments()[0];, +							if (arg instanceof TypeVariable) {, +								arg = GenericTypeResolver.resolveTypeVariable((TypeVariable) arg, formatterClass);, +							if (arg instanceof Class) {, +								return (Class) arg;, +							}, +						}, +						else if (ApplicationListener.class.isAssignableFrom((Class) rawType)) {, +							return getFormattedObjectType((Class) rawType);, +						}, +					}, +					else if (ApplicationListener.class.isAssignableFrom((Class) ifc)) {, +						return getFormattedObjectType((Class) ifc);, +								// TODO this could be a ConverterExecutorNotFoundException if no suitable converter was found, +								cause.getCause().printStackTrace();, +++ b/org.springframework.context/src/test/java/org/springframework/ui/binding/support/GenericBinderTests.java, +import java.util.ArrayList;, +import org.junit.Ignore;, +	public void bindToListSingleString() {, +		binder.addBinding("addresses").formatWith(new AddressListFormatter());, +		Map<String, String> values = new LinkedHashMap<String, String>();, +		values.put("addresses", "4655 Macy Lane:Melbourne:FL:35452,1234 Rostock Circle:Palm Bay:FL:32901,1977 Bel Aire Estates:Coker:AL:12345");		, +		BindingResults results = binder.bind(values);, +		System.out.println(results);, +		Assert.assertEquals(3, bean.addresses.size());, +		assertEquals("4655 Macy Lane", bean.addresses.get(0).street);, +		assertEquals("Melbourne", bean.addresses.get(0).city);, +		assertEquals("FL", bean.addresses.get(0).state);, +		assertEquals("35452", bean.addresses.get(0).zip);, +		assertEquals("1234 Rostock Circle", bean.addresses.get(1).street);, +		assertEquals("Palm Bay", bean.addresses.get(1).city);, +		assertEquals("FL", bean.addresses.get(1).state);, +		assertEquals("32901", bean.addresses.get(1).zip);, +		assertEquals("1977 Bel Aire Estates", bean.addresses.get(2).street);, +		assertEquals("Coker", bean.addresses.get(2).city);, +		assertEquals("AL", bean.addresses.get(2).state);, +		assertEquals("12345", bean.addresses.get(2).zip);, +	}, +	, +	@Test, +	public void getCollectionAsSingleValue() {, +		binder.addBinding("addresses").formatWith(new AddressListFormatter());, +		Address address1 = new Address();, +		address1.setStreet("s1");, +		address1.setCity("c1");, +		address1.setState("st1");, +		address1.setZip("z1");, +		Address address2 = new Address();, +		address2.setStreet("s2");, +		address2.setCity("c2");, +		address2.setState("st2");, +		address2.setZip("z2");, +		List<Address> addresses = new ArrayList<Address>(2);, +		addresses.add(address1);, +		addresses.add(address2);]