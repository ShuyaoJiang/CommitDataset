[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompCodec.java, +					} else {, +						break;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompCodec.java, +					} else {, +						break;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompDecoder.java, +		Message<byte[]> decodedMessage = null;, +, +		buffer.mark();, +			if (payload != null) {, +			} else {, +				if (logger.isDebugEnabled()) {, +					logger.debug("Received incomplete frame. Resetting buffer");, +				}, +				buffer.reset();, +			}, +					if (buffer.remaining() > 0) {, +								"Illegal header: '" + header + "'. A header must be of the form <name>:<value>");, +					}, +			if (buffer.remaining() > contentLength) {, +				if (buffer.get() != 0) {, +					throw new StompConversionException("Frame must be terminated with a null octet");, +			} else {, +				return null;, +			}, +, +		return null;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompCodec.java, +					} else {, +						break;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompDecoder.java, +		Message<byte[]> decodedMessage = null;, +, +		buffer.mark();, +			if (payload != null) {, +			} else {, +				if (logger.isDebugEnabled()) {, +					logger.debug("Received incomplete frame. Resetting buffer");, +				}, +				buffer.reset();, +			}, +					if (buffer.remaining() > 0) {, +								"Illegal header: '" + header + "'. A header must be of the form <name>:<value>");, +					}, +			if (buffer.remaining() > contentLength) {, +				if (buffer.get() != 0) {, +					throw new StompConversionException("Frame must be terminated with a null octet");, +			} else {, +				return null;, +			}, +, +		return null;, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompCodecTests.java, +	public void decodeFrameWithIncompleteHeader() {, +		assertIncompleteDecode("SEND\ndestination");, +		assertIncompleteDecode("SEND\ndestination:");, +		assertIncompleteDecode("SEND\ndestination:test");, +	}, +, +	@Test, +	public void decodeFrameWithoutNullOctetTerminator() {, +		assertIncompleteDecode("SEND\ndestination:test\n");, +		assertIncompleteDecode("SEND\ndestination:test\n\n");, +		assertIncompleteDecode("SEND\ndestination:test\n\nThe body");, +	}, +, +	@Test, +	public void decodeFrameWithInsufficientContent() {, +		assertIncompleteDecode("SEND\ncontent-length:23\n\nThe body of the mess");, +	}, +, +	@Test(expected=StompConversionException.class), +	public void decodeFrameWithIncorrectTerminator() {, +		decode("SEND\ncontent-length:23\n\nThe body of the message*");, +	}, +, +	@Test, +	private void assertIncompleteDecode(String partialFrame) {, +		Buffer buffer = Buffer.wrap(partialFrame);, +		assertNull(decode(buffer));, +		assertEquals(0, buffer.position());, +	}, +, +		Buffer buffer = Buffer.wrap(stompFrame);, +		return decode(buffer);, +	}, +, +	private Message<byte[]> decode(Buffer buffer) {, +		this.decoder.apply(buffer);, +		if (consumer.arguments.isEmpty()) {, +			return null;, +		} else {, +	}, +, +]