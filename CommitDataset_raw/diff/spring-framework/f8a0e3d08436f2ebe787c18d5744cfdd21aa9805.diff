[+++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/RouterFunctionDsl.kt, +import reactor.core.publisher.cast, +	fun GET(pattern: String, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.GET(pattern), HandlerFunction<ServerResponse> { f(it).cast() }), +	fun HEAD(pattern: String, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.HEAD(pattern), HandlerFunction<ServerResponse> { f(it).cast() }), +	fun POST(pattern: String, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.POST(pattern), HandlerFunction<ServerResponse> { f(it).cast() }), +	fun PUT(pattern: String, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.PUT(pattern), HandlerFunction<ServerResponse> { f(it).cast() }), +	fun PATCH(pattern: String, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.PATCH(pattern), HandlerFunction<ServerResponse> { f(it).cast() }), +	fun DELETE(pattern: String, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.DELETE(pattern), HandlerFunction<ServerResponse> { f(it).cast() }), +	fun OPTIONS(pattern: String, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.OPTIONS(pattern), HandlerFunction<ServerResponse> { f(it).cast() }), +	fun accept(mediaType: MediaType, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.accept(mediaType), HandlerFunction<ServerResponse> { f(it).cast() }), +	fun contentType(mediaType: MediaType, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.contentType(mediaType), HandlerFunction<ServerResponse> { f(it).cast() }), +	fun headers(headersPredicate: (ServerRequest.Headers) -> Boolean, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.headers(headersPredicate), HandlerFunction<ServerResponse> { f(it).cast() }), +	fun method(httpMethod: HttpMethod, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.method(httpMethod), HandlerFunction<ServerResponse> { f(it).cast() }), +	fun path(pattern: String, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.path(pattern), HandlerFunction<ServerResponse> { f(it).cast() }), +	fun pathExtension(extension: String, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.pathExtension(extension), HandlerFunction<ServerResponse> { f(it).cast() }), +	fun pathExtension(predicate: (String) -> Boolean, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.pathExtension(predicate), HandlerFunction<ServerResponse> { f(it).cast() }), +	fun queryParam(name: String, predicate: (String) -> Boolean, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.queryParam(name, predicate), HandlerFunction<ServerResponse> { f(it).cast() }), +	operator fun RequestPredicate.invoke(f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(this, HandlerFunction<ServerResponse> { f(it).cast() }), +	operator fun String.invoke(f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.path(this),  HandlerFunction<ServerResponse> { f(it).cast() }), +++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/RouterFunctionDsl.kt, +import reactor.core.publisher.cast, +	fun GET(pattern: String, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.GET(pattern), HandlerFunction<ServerResponse> { f(it).cast() }), +	fun HEAD(pattern: String, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.HEAD(pattern), HandlerFunction<ServerResponse> { f(it).cast() }), +	fun POST(pattern: String, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.POST(pattern), HandlerFunction<ServerResponse> { f(it).cast() }), +	fun PUT(pattern: String, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.PUT(pattern), HandlerFunction<ServerResponse> { f(it).cast() }), +	fun PATCH(pattern: String, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.PATCH(pattern), HandlerFunction<ServerResponse> { f(it).cast() }), +	fun DELETE(pattern: String, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.DELETE(pattern), HandlerFunction<ServerResponse> { f(it).cast() }), +	fun OPTIONS(pattern: String, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.OPTIONS(pattern), HandlerFunction<ServerResponse> { f(it).cast() }), +	fun accept(mediaType: MediaType, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.accept(mediaType), HandlerFunction<ServerResponse> { f(it).cast() }), +	fun contentType(mediaType: MediaType, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.contentType(mediaType), HandlerFunction<ServerResponse> { f(it).cast() }), +	fun headers(headersPredicate: (ServerRequest.Headers) -> Boolean, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.headers(headersPredicate), HandlerFunction<ServerResponse> { f(it).cast() }), +	fun method(httpMethod: HttpMethod, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.method(httpMethod), HandlerFunction<ServerResponse> { f(it).cast() }), +	fun path(pattern: String, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.path(pattern), HandlerFunction<ServerResponse> { f(it).cast() }), +	fun pathExtension(extension: String, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.pathExtension(extension), HandlerFunction<ServerResponse> { f(it).cast() }), +	fun pathExtension(predicate: (String) -> Boolean, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.pathExtension(predicate), HandlerFunction<ServerResponse> { f(it).cast() }), +	fun queryParam(name: String, predicate: (String) -> Boolean, f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.queryParam(name, predicate), HandlerFunction<ServerResponse> { f(it).cast() }), +	operator fun RequestPredicate.invoke(f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(this, HandlerFunction<ServerResponse> { f(it).cast() }), +	operator fun String.invoke(f: (ServerRequest) -> Mono<out ServerResponse>) {, +		routes += RouterFunctions.route(RequestPredicates.path(this),  HandlerFunction<ServerResponse> { f(it).cast() }), +++ b/spring-webflux/src/test/kotlin/org/springframework/web/reactive/function/server/RouterFunctionDslTests.kt, + * Copyright 2002-2018 the original author or authors., +		val request = builder().uri(URI("/content")).header(ACCEPT, APPLICATION_ATOM_XML_VALUE).build(), +		val request = builder().uri(URI("/content")).header(CONTENT_TYPE, APPLICATION_OCTET_STREAM_VALUE).build(), +	@Test, +	fun rendering() {, +		val request = builder().uri(URI("/rendering")).build(), +		StepVerifier.create(sampleRouter().route(request).flatMap { it.handle(request) }), +				.expectNextMatches { it is RenderingResponse}, +				.verifyComplete(), +	}, +, +		"/content".nest {, +		}, +		GET("/rendering") { RenderingResponse.create("index").build() }]