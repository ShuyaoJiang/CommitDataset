[+++ b/build.gradle, +		optional("org.codehaus.jackson:jackson-mapper-asl:1.4.2"), +		optional("com.fasterxml.jackson.core:jackson-databind:2.0.1"), +++ b/build.gradle, +		optional("org.codehaus.jackson:jackson-mapper-asl:1.4.2"), +		optional("com.fasterxml.jackson.core:jackson-databind:2.0.1"), +++ b/spring-jms/src/main/java/org/springframework/jms/support/converter/MappingJackson2MessageConverter.java, +/*, + * Copyright 2002-2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.jms.support.converter;, +, +import java.io.ByteArrayOutputStream;, +import java.io.IOException;, +import java.io.OutputStreamWriter;, +import java.io.StringWriter;, +import java.io.UnsupportedEncodingException;, +import java.util.HashMap;, +import java.util.Map;, +import javax.jms.BytesMessage;, +import javax.jms.JMSException;, +import javax.jms.Message;, +import javax.jms.Session;, +import javax.jms.TextMessage;, +, +import com.fasterxml.jackson.databind.JavaType;, +import com.fasterxml.jackson.databind.ObjectMapper;, +, +import org.springframework.util.Assert;, +import org.springframework.util.ClassUtils;, +, +/**, + * Message converter that uses the Jackson 2 library to convert messages to and from JSON., + * Maps an object to a {@link javax.jms.BytesMessage}, or to a {@link javax.jms.TextMessage} if the, + * {@link #setTargetType targetType} is set to {@link org.springframework.jms.support.converter.MessageType#TEXT}., + * Converts from a {@link javax.jms.TextMessage} or {@link javax.jms.BytesMessage} to an object., + *, + * @author Mark Pollack, + * @author Dave Syer, + * @author Juergen Hoeller, + * @since 3.1.4, + */, +public class MappingJackson2MessageConverter implements MessageConverter {, +, +	/**, +	 * The default encoding used for writing to text messages: UTF-8., +	 */, +	public static final String DEFAULT_ENCODING = "UTF-8";, +, +, +	private ObjectMapper objectMapper = new ObjectMapper();, +, +	private MessageType targetType = MessageType.BYTES;, +, +	private String encoding = DEFAULT_ENCODING;, +, +	private String encodingPropertyName;, +, +	private String typeIdPropertyName;, +, +	private Map<String, Class<?>> idClassMappings = new HashMap<String, Class<?>>();, +, +	private Map<Class<?>, String> classIdMappings = new HashMap<Class<?>, String>();, +, +, +	/**, +	 * Specify the {@link org.codehaus.jackson.map.ObjectMapper} to use instead of using the default., +	 */, +	public void setObjectMapper(ObjectMapper objectMapper) {, +		Assert.notNull(objectMapper, "ObjectMapper must not be null");, +		this.objectMapper = objectMapper;, +	}, +, +	/**, +	 * Specify whether {@link #toMessage(Object, javax.jms.Session)} should marshal to a, +	 * {@link javax.jms.BytesMessage} or a {@link javax.jms.TextMessage}., +	 * <p>The default is {@link org.springframework.jms.support.converter.MessageType#BYTES}, i.e. this converter marshals to, +	 * a {@link javax.jms.BytesMessage}. Note that the default version of this converter, +	 * supports {@link org.springframework.jms.support.converter.MessageType#BYTES} and {@link org.springframework.jms.support.converter.MessageType#TEXT} only., +	 * @see org.springframework.jms.support.converter.MessageType#BYTES, +	 * @see org.springframework.jms.support.converter.MessageType#TEXT, +	 */, +	public void setTargetType(MessageType targetType) {, +		Assert.notNull(targetType, "MessageType must not be null");, +		this.targetType = targetType;, +	}, +]