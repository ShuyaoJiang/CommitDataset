[+++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/handler/AbstractHandlerExceptionResolver.java, + * Copyright 2002-2010 the original author or authors., + * Abstract base class for {@link HandlerExceptionResolver} implementations., + *, + * <p>Provides a set of mapped handlers that the resolver should map to,, + * and the {@link Ordered} implementation., +, +, +	public ModelAndView resolveException(RenderRequest request, RenderResponse response, Object handler, Exception ex) {, +	public ModelAndView resolveException(ResourceRequest request, ResourceResponse response, Object handler, Exception ex) {, +, +	 * <p>Must be overridden in subclasses, in order to apply specific exception checks., +	 * Note that this template method will be invoked <i>after</i> checking whether this, +	 * resolved applies ("mappedHandlers" etc), so an implementation may simply proceed, +	 * with its actual exception handling., +	protected abstract ModelAndView doResolveException(PortletRequest request, MimeResponse response,, +			Object handler, Exception ex);, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/handler/AbstractHandlerExceptionResolver.java, + * Copyright 2002-2010 the original author or authors., + * Abstract base class for {@link HandlerExceptionResolver} implementations., + *, + * <p>Provides a set of mapped handlers that the resolver should map to,, + * and the {@link Ordered} implementation., +, +, +	public ModelAndView resolveException(RenderRequest request, RenderResponse response, Object handler, Exception ex) {, +	public ModelAndView resolveException(ResourceRequest request, ResourceResponse response, Object handler, Exception ex) {, +, +	 * <p>Must be overridden in subclasses, in order to apply specific exception checks., +	 * Note that this template method will be invoked <i>after</i> checking whether this, +	 * resolved applies ("mappedHandlers" etc), so an implementation may simply proceed, +	 * with its actual exception handling., +	protected abstract ModelAndView doResolveException(PortletRequest request, MimeResponse response,, +			Object handler, Exception ex);, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerExceptionResolver.java, +			throw new IllegalStateException("Standard argument type [" + paramType.getName() +, +					"] resolved to incompatible value of type [" + (value != null ? value.getClass() : null) +, +		if (parameterType.isInstance(thrownException)) {, +			return thrownException;, +		}, +		else if (WebRequest.class.isAssignableFrom(parameterType)) {, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/handler/AbstractHandlerExceptionResolver.java, + * Copyright 2002-2010 the original author or authors., + * Abstract base class for {@link HandlerExceptionResolver} implementations., + *, + * <p>Provides a set of mapped handlers that the resolver should map to,, + * and the {@link Ordered} implementation., +, +, +	public ModelAndView resolveException(RenderRequest request, RenderResponse response, Object handler, Exception ex) {, +	public ModelAndView resolveException(ResourceRequest request, ResourceResponse response, Object handler, Exception ex) {, +, +	 * <p>Must be overridden in subclasses, in order to apply specific exception checks., +	 * Note that this template method will be invoked <i>after</i> checking whether this, +	 * resolved applies ("mappedHandlers" etc), so an implementation may simply proceed, +	 * with its actual exception handling., +	protected abstract ModelAndView doResolveException(PortletRequest request, MimeResponse response,, +			Object handler, Exception ex);, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerExceptionResolver.java, +			throw new IllegalStateException("Standard argument type [" + paramType.getName() +, +					"] resolved to incompatible value of type [" + (value != null ? value.getClass() : null) +, +		if (parameterType.isInstance(thrownException)) {, +			return thrownException;, +		}, +		else if (WebRequest.class.isAssignableFrom(parameterType)) {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerExceptionResolver.java, + * Copyright 2002-2010 the original author or authors., + * Abstract base class for {@link HandlerExceptionResolver} implementations., + *, + * <p>Provides a set of mapped handlers that the resolver should map to,, + * and the {@link Ordered} implementation., +, +, +	 * Checks whether this resolver is supposed to apply (i.e. the handler matches, +	 * in case of "mappedHandlers" having been specified), then delegates to the, +	 * {@link #doResolveException} template method., +	public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response,, +			Object handler, Exception ex) {, +	 * Check whether this resolver is supposed to apply to the given handler., +	 * <p>The default implementation checks against the specified mapped handlers, +	 * and handler classes, if any., +	 * @param handler the executed handler, or <code>null</code> if none chosen, +	 * at the time of the exception (for example, if multipart resolution failed), +	 * @return whether this resolved should proceed with resolving the exception, +	 * for the given request and handler, +	 * Log the given exception at warn level, provided that warn logging has been, +	 * activated through the {@link #setWarnLogCategory "warnLogCategory"} property., +	 * <p>Calls {@link #buildLogMessage} in order to determine the concrete message to log., +	 * Always passes the full exception to the logger., +	 * Actually resolve the given exception that got thrown during on handler execution,, +	 * returning a ModelAndView that represents a specific error page if appropriate., +	 * <p>May be overridden in subclasses, in order to apply specific exception checks., +	 * Note that this template method will be invoked <i>after</i> checking whether this, +	 * resolved applies ("mappedHandlers" etc), so an implementation may simply proceed, +	 * with its actual exception handling., +	 * @param handler the executed handler, or <code>null</code> if none chosen at the time, +	 * of the exception (for example, if multipart resolution failed), +			HttpServletResponse response, Object handler, Exception ex);, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/handler/AbstractHandlerExceptionResolver.java, + * Copyright 2002-2010 the original author or authors.]