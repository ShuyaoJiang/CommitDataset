[+++ b/org.springframework.jms/ivy.xml, +		<conf name="jackson" extends="runtime" description="JARs needed to use the Jackson JSON View"/>, +		<dependency org="org.codehaus.jackson" name="com.springsource.org.codehaus.jackson.mapper" rev="1.4.2", +                    conf="optional, jackson->compile"/>, +++ b/org.springframework.jms/ivy.xml, +		<conf name="jackson" extends="runtime" description="JARs needed to use the Jackson JSON View"/>, +		<dependency org="org.codehaus.jackson" name="com.springsource.org.codehaus.jackson.mapper" rev="1.4.2", +                    conf="optional, jackson->compile"/>, +++ b/org.springframework.jms/pom.xml, +	<dependency>, +		<groupId>org.codehaus.jackson</groupId>, +		<artifactId>jackson-mapper-asl</artifactId>, +		<version>1.4.2</version>, +		<optional>true</optional>, +	</dependency>, +++ b/org.springframework.jms/ivy.xml, +		<conf name="jackson" extends="runtime" description="JARs needed to use the Jackson JSON View"/>, +		<dependency org="org.codehaus.jackson" name="com.springsource.org.codehaus.jackson.mapper" rev="1.4.2", +                    conf="optional, jackson->compile"/>, +++ b/org.springframework.jms/pom.xml, +	<dependency>, +		<groupId>org.codehaus.jackson</groupId>, +		<artifactId>jackson-mapper-asl</artifactId>, +		<version>1.4.2</version>, +		<optional>true</optional>, +	</dependency>, +++ b/org.springframework.jms/src/main/java/org/springframework/jms/support/converter/DefaultJavaTypeMapper.java, +/*, + * Copyright 2002-2010 the original author or authors. Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License. You may obtain a copy of the License at, + * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,, + * either express or implied. See the License for the specific language governing permissions and limitations under the, + * License., + */, +package org.springframework.jms.support.converter;, +, +import static org.codehaus.jackson.map.type.TypeFactory.collectionType;, +import static org.codehaus.jackson.map.type.TypeFactory.mapType;, +import static org.codehaus.jackson.map.type.TypeFactory.type;, +, +import java.util.Collection;, +import java.util.HashMap;, +import java.util.Map;, +import java.util.Map.Entry;, +, +import javax.jms.JMSException;, +import javax.jms.Message;, +, +import org.codehaus.jackson.type.JavaType;, +import org.springframework.beans.factory.InitializingBean;, +import org.springframework.util.ClassUtils;, +, +/**, + * Default implementation of {@link JavaTypeMapper} using hard coded message, + * properties to store and retrieve the content type information., + * , + * @author Mark Pollack, + * @author Sam Nelson, + * @author Dave Syer, + **/, +public class DefaultJavaTypeMapper implements JavaTypeMapper, InitializingBean {, +, +	public static final String CLASSID_PROPERTY_NAME = "__TypeId__";, +	public static final String CONTENT_CLASSID_PROPERTY_NAME = "__ContentTypeId__";, +	public static final String KEY_CLASSID_PROPERTY_NAME = "__KeyTypeId__";, +, +	private Map<String, Class<?>> idClassMapping = new HashMap<String, Class<?>>();, +	private Map<Class<?>, String> classIdMapping = new HashMap<Class<?>, String>();, +, +	@SuppressWarnings({ "unchecked", "rawtypes" }), +	public JavaType toJavaType(Message message) throws JMSException {, +		JavaType classType = getClassIdType(retrieveHeader(message,, +				CLASSID_PROPERTY_NAME));, +		if (!classType.isContainerType()) {, +			return classType;, +		}, +, +		JavaType contentClassType = getClassIdType(retrieveHeader(message,, +				CONTENT_CLASSID_PROPERTY_NAME));, +		if (classType.getKeyType() == null) {, +			return collectionType(, +					(Class<? extends Collection>) classType.getRawClass(),, +					contentClassType);, +		}, +, +		JavaType keyClassType = getClassIdType(retrieveHeader(message,, +				KEY_CLASSID_PROPERTY_NAME));, +		JavaType mapType = mapType(, +				(Class<? extends Map>) classType.getRawClass(), keyClassType,, +				contentClassType);, +		return mapType;, +, +	}, +, +	private JavaType getClassIdType(String classId) {, +		if (this.idClassMapping.containsKey(classId)) {, +			return type(idClassMapping.get(classId));, +		}, +]