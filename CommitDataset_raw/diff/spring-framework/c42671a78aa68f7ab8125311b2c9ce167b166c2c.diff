[+++ b/org.springframework.web/src/main/java/org/springframework/web/client/HttpMessageConverterExtractor.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.http.HttpStatus;, +		if (!hasMessageBody(response)) {, +			return null;, +		}, +			if (logger.isTraceEnabled()) {, +				logger.trace("No Content-Type header found, defaulting to application/octet-stream");, +			}, +			contentType = MediaType.APPLICATION_OCTET_STREAM;, +	/**, +	 * Indicates whether the given response has a message body., +	 * <p>Default implementation returns {@code false} for a response status of {@code 204} or {@code 304}, or a, +	 * {@code Content-Length} of {@code 0}., +	 *, +	 * @param response the response to check for a message body, +	 * @return {@code true} if the response has a body, {@code false} otherwise, +	 * @throws IOException in case of I/O errors, +	 */, +	protected boolean hasMessageBody(ClientHttpResponse response) throws IOException {, +		HttpStatus responseStatus = response.getStatusCode();, +		if (responseStatus == HttpStatus.NO_CONTENT || responseStatus == HttpStatus.NOT_MODIFIED) {, +			return false;, +		}, +		long contentLength = response.getHeaders().getContentLength();, +		return contentLength != 0;, +	}, +, +++ b/org.springframework.web/src/main/java/org/springframework/web/client/HttpMessageConverterExtractor.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.http.HttpStatus;, +		if (!hasMessageBody(response)) {, +			return null;, +		}, +			if (logger.isTraceEnabled()) {, +				logger.trace("No Content-Type header found, defaulting to application/octet-stream");, +			}, +			contentType = MediaType.APPLICATION_OCTET_STREAM;, +	/**, +	 * Indicates whether the given response has a message body., +	 * <p>Default implementation returns {@code false} for a response status of {@code 204} or {@code 304}, or a, +	 * {@code Content-Length} of {@code 0}., +	 *, +	 * @param response the response to check for a message body, +	 * @return {@code true} if the response has a body, {@code false} otherwise, +	 * @throws IOException in case of I/O errors, +	 */, +	protected boolean hasMessageBody(ClientHttpResponse response) throws IOException {, +		HttpStatus responseStatus = response.getStatusCode();, +		if (responseStatus == HttpStatus.NO_CONTENT || responseStatus == HttpStatus.NOT_MODIFIED) {, +			return false;, +		}, +		long contentLength = response.getHeaders().getContentLength();, +		return contentLength != 0;, +	}, +, +++ b/org.springframework.web/src/test/java/org/springframework/web/client/RestTemplateIntegrationTests.java, +		jettyContext.addServlet(new ServletHolder(new GetServlet(bytes, null)), "/get/nocontenttype");, +		jettyContext.addServlet(new ServletHolder(new StatusCodeServlet(204)), "/status/nocontent");, +		jettyContext.addServlet(new ServletHolder(new StatusCodeServlet(304)), "/status/notmodified");, +		jettyContext.addServlet(new ServletHolder(new ErrorServlet(404)), "/status/notfound");, +		jettyContext.addServlet(new ServletHolder(new ErrorServlet(500)), "/status/server");, +		assertNull("Invalid content", s);, +	}, +	, +	@Test, +	public void getNoContentTypeHeader() throws UnsupportedEncodingException {, +		byte[] bytes = template.getForObject(baseUrl + "/get/nocontenttype", byte[].class);, +		assertArrayEquals("Invalid content", helloWorld.getBytes("UTF-8"), bytes);, +	}, +, +	@Test, +	public void getNoContent() {, +		String s = template.getForObject(baseUrl + "/status/nocontent", String.class);, +		assertNull("Invalid content", s);, +		, +		ResponseEntity<String> entity = template.getForEntity(baseUrl + "/status/nocontent", String.class);, +		assertEquals("Invalid response code", HttpStatus.NO_CONTENT, entity.getStatusCode());, +		assertNull("Invalid content", entity.getBody());, +	}, +, +	@Test, +	public void getNotModified() {, +		String s = template.getForObject(baseUrl + "/status/notmodified", String.class);, +		assertNull("Invalid content", s);, +, +		ResponseEntity<String> entity = template.getForEntity(baseUrl + "/status/notmodified", String.class);, +		assertEquals("Invalid response code", HttpStatus.NOT_MODIFIED, entity.getStatusCode());, +		assertNull("Invalid content", entity.getBody());, +			template.execute(baseUrl + "/status/notfound", HttpMethod.GET, null, null);, +			template.execute(baseUrl + "/status/server", HttpMethod.GET, null, null);, +	/** Servlet that sets the given status code. */, +	private static class StatusCodeServlet extends GenericServlet {, +, +		private final int sc;, +, +		private StatusCodeServlet(int sc) {, +			this.sc = sc;, +		}, +]