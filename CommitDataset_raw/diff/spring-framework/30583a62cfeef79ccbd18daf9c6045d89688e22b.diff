[+++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceDecoder.java, +		return clazz != null && Resource.class.isAssignableFrom(clazz) && super.canDecode(elementType, mimeType);, +		else if (Resource.class.isAssignableFrom(clazz)) {, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceDecoder.java, +		return clazz != null && Resource.class.isAssignableFrom(clazz) && super.canDecode(elementType, mimeType);, +		else if (Resource.class.isAssignableFrom(clazz)) {, +++ b/spring-core/src/test/java/org/springframework/core/codec/ResourceDecoderTests.java, + * Copyright 2002-2018 the original author or authors., +import static org.junit.Assert.*;, +import static org.springframework.core.ResolvableType.*;, +	public void canDecode() {, +		assertTrue(this.decoder.canDecode(forClass(InputStreamResource.class), MimeTypeUtils.TEXT_PLAIN));, +		assertTrue(this.decoder.canDecode(forClass(ByteArrayResource.class), MimeTypeUtils.TEXT_PLAIN));, +		assertTrue(this.decoder.canDecode(forClass(Resource.class), MimeTypeUtils.TEXT_PLAIN));, +		assertTrue(this.decoder.canDecode(forClass(InputStreamResource.class), MimeTypeUtils.APPLICATION_JSON));, +		assertFalse(this.decoder.canDecode(forClass(Object.class), MimeTypeUtils.APPLICATION_JSON));, +	public void decode() {, +				.decode(source, forClass(Resource.class), null, Collections.emptyMap());, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceDecoder.java, +		return clazz != null && Resource.class.isAssignableFrom(clazz) && super.canDecode(elementType, mimeType);, +		else if (Resource.class.isAssignableFrom(clazz)) {, +++ b/spring-core/src/test/java/org/springframework/core/codec/ResourceDecoderTests.java, + * Copyright 2002-2018 the original author or authors., +import static org.junit.Assert.*;, +import static org.springframework.core.ResolvableType.*;, +	public void canDecode() {, +		assertTrue(this.decoder.canDecode(forClass(InputStreamResource.class), MimeTypeUtils.TEXT_PLAIN));, +		assertTrue(this.decoder.canDecode(forClass(ByteArrayResource.class), MimeTypeUtils.TEXT_PLAIN));, +		assertTrue(this.decoder.canDecode(forClass(Resource.class), MimeTypeUtils.TEXT_PLAIN));, +		assertTrue(this.decoder.canDecode(forClass(InputStreamResource.class), MimeTypeUtils.APPLICATION_JSON));, +		assertFalse(this.decoder.canDecode(forClass(Object.class), MimeTypeUtils.APPLICATION_JSON));, +	public void decode() {, +				.decode(source, forClass(Resource.class), null, Collections.emptyMap());, +++ b/spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java, + * Copyright 2002-2018 the original author or authors., +		else if (Resource.class == clazz || ByteArrayResource.class.isAssignableFrom(clazz)) {]