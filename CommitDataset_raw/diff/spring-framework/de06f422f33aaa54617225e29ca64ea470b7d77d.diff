[+++ b/spring-context/src/main/java/org/springframework/cache/annotation/CacheConfig.java, + * Copyright 2002-2015 the original author or authors., + * {@code @CacheConfig} provides a mechanism for sharing common cache-related, + * settings at the class level., + *, + * of default settings for any cache operation defined in that class., + * @author Sam Brannen, +@Target(ElementType.TYPE), +	 * Names of the default caches to consider for caching operations defined, +	 * in the annotated class., +	 * <p>If none is set at the operation level, these are used instead of the default., +	 * qualifier value or the bean names of a specific bean definition., +	 * resolver is set via {@link #cacheResolver}, this one is used instead of the default., +, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/CacheConfig.java, + * Copyright 2002-2015 the original author or authors., + * {@code @CacheConfig} provides a mechanism for sharing common cache-related, + * settings at the class level., + *, + * of default settings for any cache operation defined in that class., + * @author Sam Brannen, +@Target(ElementType.TYPE), +	 * Names of the default caches to consider for caching operations defined, +	 * in the annotated class., +	 * <p>If none is set at the operation level, these are used instead of the default., +	 * qualifier value or the bean names of a specific bean definition., +	 * resolver is set via {@link #cacheResolver}, this one is used instead of the default., +, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/CacheEvict.java, + * Annotation indicating that a method (or all methods on a class) triggers, + * @author Sam Brannen, +	 * Names of the caches to use for the cache eviction operation., +	 * <p>Names may be used to determine the target cache (or caches), matching, +	 * the qualifier value or bean name of a specific bean definition., +	 * Spring Expression Language (SpEL) expression for computing the key dynamically., +	 * <p>Default is {@code ""}, meaning all method parameters are considered as a key, unless, +	 * a custom {@link #keyGenerator} has been set., +	 * <p>Mutually exclusive with the {@link #key} attribute., +	 * @see CacheConfig#keyGenerator, +	 * <p>Mutually exclusive with the {@link #cacheResolver} attribute., +	 * @see CacheConfig#cacheManager, +	 * @see CacheConfig#cacheResolver, +	 * Spring Expression Language (SpEL) expression used for making the cache, +	 * <p>Default is {@code ""}, meaning the cache eviction is always performed., +	 * Whether all the entries inside the cache(s) are removed., +	 * <p>By default, only the value under the associated key is removed., +	 * <p>Note that setting this parameter to {@code true} and specifying a, +	 * {@link #key} is not allowed., +	 * Whether the eviction should occur before the method is invoked., +	 * <p>Setting this attribute to {@code true}, causes the eviction to, +	 * occur irrespective of the method outcome (i.e., whether it threw an, +	 * exception or not)., +	 * <p>Defaults to {@code false}, meaning that the cache eviction operation, +	 * will occur <em>after</em> the advised method is invoked successfully (i.e.,, +	 * only if the invocation did not throw an exception)., +, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/CacheConfig.java, + * Copyright 2002-2015 the original author or authors., + * {@code @CacheConfig} provides a mechanism for sharing common cache-related, + * settings at the class level., + *, + * of default settings for any cache operation defined in that class., + * @author Sam Brannen, +@Target(ElementType.TYPE), +	 * Names of the default caches to consider for caching operations defined, +	 * in the annotated class., +	 * <p>If none is set at the operation level, these are used instead of the default., +	 * qualifier value or the bean names of a specific bean definition., +	 * resolver is set via {@link #cacheResolver}, this one is used instead of the default., +, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/CacheEvict.java, + * Annotation indicating that a method (or all methods on a class) triggers, + * @author Sam Brannen, +	 * Names of the caches to use for the cache eviction operation., +	 * <p>Names may be used to determine the target cache (or caches), matching, +	 * the qualifier value or bean name of a specific bean definition., +	 * Spring Expression Language (SpEL) expression for computing the key dynamically., +	 * <p>Default is {@code ""}, meaning all method parameters are considered as a key, unless, +	 * a custom {@link #keyGenerator} has been set., +	 * <p>Mutually exclusive with the {@link #key} attribute., +	 * @see CacheConfig#keyGenerator, +	 * <p>Mutually exclusive with the {@link #cacheResolver} attribute., +	 * @see CacheConfig#cacheManager, +	 * @see CacheConfig#cacheResolver, +	 * Spring Expression Language (SpEL) expression used for making the cache, +	 * <p>Default is {@code ""}, meaning the cache eviction is always performed., +	 * Whether all the entries inside the cache(s) are removed., +	 * <p>By default, only the value under the associated key is removed., +	 * <p>Note that setting this parameter to {@code true} and specifying a, +	 * {@link #key} is not allowed., +	 * Whether the eviction should occur before the method is invoked., +	 * <p>Setting this attribute to {@code true}, causes the eviction to, +	 * occur irrespective of the method outcome (i.e., whether it threw an, +	 * exception or not)., +	 * <p>Defaults to {@code false}, meaning that the cache eviction operation, +	 * will occur <em>after</em> the advised method is invoked successfully (i.e.,, +	 * only if the invocation did not throw an exception)., +, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/CachePut.java, + * Annotation indicating that a method (or all methods on a class) triggers]