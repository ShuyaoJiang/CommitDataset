[+++ b/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +		assertNull(formattingService.convert("", TypeDescriptor.valueOf(Integer.class)));, +		assertNull(formattingService.convert("", TypeDescriptor.valueOf(Integer.class)));, +++ b/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +		assertNull(formattingService.convert("", TypeDescriptor.valueOf(Integer.class)));, +		assertNull(formattingService.convert("", TypeDescriptor.valueOf(Integer.class)));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, +	// 3.1 additions that encapsulate TypeDescriptor.forObject(source), +	, +	boolean canConvert(Object source, TypeDescriptor targetType);, +, +	Object convert(Object source, TypeDescriptor targetType);, +, +++ b/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +		assertNull(formattingService.convert("", TypeDescriptor.valueOf(Integer.class)));, +		assertNull(formattingService.convert("", TypeDescriptor.valueOf(Integer.class)));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, +	// 3.1 additions that encapsulate TypeDescriptor.forObject(source), +	, +	boolean canConvert(Object source, TypeDescriptor targetType);, +, +	Object convert(Object source, TypeDescriptor targetType);, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ConvertingPropertyEditorAdapter.java, +		setValue(this.conversionService.convert(text, this.targetDescriptor));, +++ b/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +		assertNull(formattingService.convert("", TypeDescriptor.valueOf(Integer.class)));, +		assertNull(formattingService.convert("", TypeDescriptor.valueOf(Integer.class)));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, +	// 3.1 additions that encapsulate TypeDescriptor.forObject(source), +	, +	boolean canConvert(Object source, TypeDescriptor targetType);, +, +	Object convert(Object source, TypeDescriptor targetType);, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ConvertingPropertyEditorAdapter.java, +		setValue(this.conversionService.convert(text, this.targetDescriptor));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +	public boolean canConvert(Object source, TypeDescriptor targetType) {, +		return canConvert(TypeDescriptor.forObject(source), targetType);, +	}, +, +	public Object convert(Object source, TypeDescriptor targetType) {, +		return convert(source, TypeDescriptor.forObject(source), targetType);, +	}, +, +++ b/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +		assertNull(formattingService.convert("", TypeDescriptor.valueOf(Integer.class)));, +		assertNull(formattingService.convert("", TypeDescriptor.valueOf(Integer.class)));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, +	// 3.1 additions that encapsulate TypeDescriptor.forObject(source), +	, +	boolean canConvert(Object source, TypeDescriptor targetType);, +, +	Object convert(Object source, TypeDescriptor targetType);, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ConvertingPropertyEditorAdapter.java, +		setValue(this.conversionService.convert(text, this.targetDescriptor));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +	public boolean canConvert(Object source, TypeDescriptor targetType) {, +		return canConvert(TypeDescriptor.forObject(source), targetType);, +	}, +, +	public Object convert(Object source, TypeDescriptor targetType) {, +		return convert(source, TypeDescriptor.forObject(source), targetType);, +	}, +, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java, +		List<Integer> result = (List<Integer>) conversionService.convert(new String[] { "1", "2", "3" }, new TypeDescriptor(getClass().getDeclaredField("genericList")));, +		List<Color> colors = (List<Color>) conversionService.convert(new String[] { "ffffff", "#000000" }, new TypeDescriptor(new MethodParameter(getClass().getMethod("handlerMethod", List.class), 0)));, +		List<Integer> bar = (List<Integer>) conversionService.convert(foo, new TypeDescriptor(getClass().getField("genericList")));, +		List<Integer> bar = (List<Integer>) conversionService.convert(null, new TypeDescriptor(getClass().getField("genericList")));, +		List bar = (List) conversionService.convert(foo, TypeDescriptor.valueOf(List.class));, +		List<Integer> bar = (List<Integer>) conversionService.convert(values, new TypeDescriptor(getClass().getField("genericList")));, +		Map<String, FooEnum> map = (Map<String, FooEnum>) conversionService.convert(foo, new TypeDescriptor(getClass().getField("genericMap")));, +++ b/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +		assertNull(formattingService.convert("", TypeDescriptor.valueOf(Integer.class)));, +		assertNull(formattingService.convert("", TypeDescriptor.valueOf(Integer.class)));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, +	// 3.1 additions that encapsulate TypeDescriptor.forObject(source), +	, +	boolean canConvert(Object source, TypeDescriptor targetType);, +, +	Object convert(Object source, TypeDescriptor targetType);, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ConvertingPropertyEditorAdapter.java, +		setValue(this.conversionService.convert(text, this.targetDescriptor));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +	public boolean canConvert(Object source, TypeDescriptor targetType) {, +		return canConvert(TypeDescriptor.forObject(source), targetType);, +	}, +, +	public Object convert(Object source, TypeDescriptor targetType) {, +		return convert(source, TypeDescriptor.forObject(source), targetType);, +	}, +, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java, +		List<Integer> result = (List<Integer>) conversionService.convert(new String[] { "1", "2", "3" }, new TypeDescriptor(getClass().getDeclaredField("genericList")));, +		List<Color> colors = (List<Color>) conversionService.convert(new String[] { "ffffff", "#000000" }, new TypeDescriptor(new MethodParameter(getClass().getMethod("handlerMethod", List.class), 0)));, +		List<Integer> bar = (List<Integer>) conversionService.convert(foo, new TypeDescriptor(getClass().getField("genericList")));]