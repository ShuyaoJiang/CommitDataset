[+++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java, +	/**, +	 * Specify if the {@code beanName} is the name of a bean that references the target, +	 * bean within a scoped proxy., +	 */, +	public static boolean isScopedTarget(String beanName) {, +		return beanName.startsWith(TARGET_NAME_PREFIX);, +	}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java, +	/**, +	 * Specify if the {@code beanName} is the name of a bean that references the target, +	 * bean within a scoped proxy., +	 */, +	public static boolean isScopedTarget(String beanName) {, +		return beanName.startsWith(TARGET_NAME_PREFIX);, +	}, +, +++ b/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java, +import org.springframework.aop.scope.ScopedProxyUtils;, +						if (!ScopedProxyUtils.isScopedTarget(beanName) && !this.beans.containsValue(beanName) &&, +								(beanInstance == null ||, +++ b/spring-aop/src/main/java/org/springframework/aop/scope/ScopedProxyUtils.java, +	/**, +	 * Specify if the {@code beanName} is the name of a bean that references the target, +	 * bean within a scoped proxy., +	 */, +	public static boolean isScopedTarget(String beanName) {, +		return beanName.startsWith(TARGET_NAME_PREFIX);, +	}, +, +++ b/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java, +import org.springframework.aop.scope.ScopedProxyUtils;, +						if (!ScopedProxyUtils.isScopedTarget(beanName) && !this.beans.containsValue(beanName) &&, +								(beanInstance == null ||, +++ b/spring-context/src/test/java/org/springframework/jmx/export/annotation/EnableMBeanExportConfigurationTests.java, +import org.springframework.context.annotation.Scope;, +import org.springframework.context.annotation.ScopedProxyMode;, +	public void testOnlyTargetClassIsExposed() throws Exception {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(, +				ProxyConfiguration.class);, +		try {, +			MBeanServer server = (MBeanServer) ctx.getBean("server");, +			ObjectName oname = ObjectNameManager.getInstance("bean:name=testBean4");, +			assertNotNull(server.getObjectInstance(oname));, +			assertEquals("TEST", server.getAttribute(oname, "Name"));, +		} finally {, +			ctx.close();, +		}, +	}, +, +	@Test, +	@Configuration, +	@EnableMBeanExport(server = "server"), +	static class ProxyConfiguration {, +, +		@Bean, +		public MBeanServerFactoryBean server() throws Exception {, +			return new MBeanServerFactoryBean();, +		}, +, +		@Bean, +		@Lazy, +		@Scope(proxyMode = ScopedProxyMode.TARGET_CLASS), +		public AnnotationTestBean testBean() {, +			AnnotationTestBean bean = new AnnotationTestBean();, +			bean.setName("TEST");, +			bean.setAge(100);, +			return bean;, +		}, +	}, +]