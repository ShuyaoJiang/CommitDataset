[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java, + * @see DatabasePopulatorUtils, +	 * Construct a new {@code ResourceDatabasePopulator} with default settings., +	 */, +	public ResourceDatabasePopulator() {, +		/* no-op */, +	}, +, +	/**, +	 * Construct a new {@code ResourceDatabasePopulator} with the supplied values., +	 *, +	 * @param continueOnError flag to indicate that all failures in SQL should be, +	 * logged but not cause a failure, +	 * @param ignoreFailedDrops flag to indicate that a failed SQL {@code DROP}, +	 * statement can be ignored, +	 * @param sqlScriptEncoding the encoding for the supplied SQL scripts, if, +	 * different from the platform encoding; may be {@code null}, +	 * @param scripts the scripts to execute to populate the database, +	 */, +	public ResourceDatabasePopulator(boolean continueOnError, boolean ignoreFailedDrops, String sqlScriptEncoding,, +			Resource... scripts) {, +		this.continueOnError = continueOnError;, +		this.ignoreFailedDrops = ignoreFailedDrops;, +		this.sqlScriptEncoding = sqlScriptEncoding;, +		this.scripts = Arrays.asList(scripts);, +	}, +, +	/**, +			ScriptUtils.executeSqlScript(connection, encodeScript(script), this.continueOnError,, +	/**, +	 * {@link EncodedResource} is not a sub-type of {@link Resource}. Thus we, +	 * always need to wrap each script resource in an encoded resource., +	 */, +	private EncodedResource encodeScript(Resource script) {, +, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java, + * @see DatabasePopulatorUtils, +	 * Construct a new {@code ResourceDatabasePopulator} with default settings., +	 */, +	public ResourceDatabasePopulator() {, +		/* no-op */, +	}, +, +	/**, +	 * Construct a new {@code ResourceDatabasePopulator} with the supplied values., +	 *, +	 * @param continueOnError flag to indicate that all failures in SQL should be, +	 * logged but not cause a failure, +	 * @param ignoreFailedDrops flag to indicate that a failed SQL {@code DROP}, +	 * statement can be ignored, +	 * @param sqlScriptEncoding the encoding for the supplied SQL scripts, if, +	 * different from the platform encoding; may be {@code null}, +	 * @param scripts the scripts to execute to populate the database, +	 */, +	public ResourceDatabasePopulator(boolean continueOnError, boolean ignoreFailedDrops, String sqlScriptEncoding,, +			Resource... scripts) {, +		this.continueOnError = continueOnError;, +		this.ignoreFailedDrops = ignoreFailedDrops;, +		this.sqlScriptEncoding = sqlScriptEncoding;, +		this.scripts = Arrays.asList(scripts);, +	}, +, +	/**, +			ScriptUtils.executeSqlScript(connection, encodeScript(script), this.continueOnError,, +	/**, +	 * {@link EncodedResource} is not a sub-type of {@link Resource}. Thus we, +	 * always need to wrap each script resource in an encoded resource., +	 */, +	private EncodedResource encodeScript(Resource script) {, +, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/datasource/embedded/EmbeddedDatabaseFactoryBeanTests.java, + * Copyright 2002-2014 the original author or authors., +, +import static org.junit.Assert.*;, +, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java, + * @see DatabasePopulatorUtils, +	 * Construct a new {@code ResourceDatabasePopulator} with default settings., +	 */, +	public ResourceDatabasePopulator() {, +		/* no-op */, +	}, +, +	/**, +	 * Construct a new {@code ResourceDatabasePopulator} with the supplied values., +	 *, +	 * @param continueOnError flag to indicate that all failures in SQL should be, +	 * logged but not cause a failure, +	 * @param ignoreFailedDrops flag to indicate that a failed SQL {@code DROP}, +	 * statement can be ignored, +	 * @param sqlScriptEncoding the encoding for the supplied SQL scripts, if, +	 * different from the platform encoding; may be {@code null}, +	 * @param scripts the scripts to execute to populate the database, +	 */, +	public ResourceDatabasePopulator(boolean continueOnError, boolean ignoreFailedDrops, String sqlScriptEncoding,, +			Resource... scripts) {, +		this.continueOnError = continueOnError;, +		this.ignoreFailedDrops = ignoreFailedDrops;, +		this.sqlScriptEncoding = sqlScriptEncoding;, +		this.scripts = Arrays.asList(scripts);]