[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/TypedStringValue.java, +	public TypedStringValue(String value, Class<?> targetType) {, +	public void setTargetType(Class<?> targetType) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/TypedStringValue.java, +	public TypedStringValue(String value, Class<?> targetType) {, +	public void setTargetType(Class<?> targetType) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, +import org.springframework.beans.BeanMetadataElement;, +		Type[] methodParameterTypes = method.getGenericParameterTypes();, +		Assert.isTrue(args.length == methodParameterTypes.length, "Argument array does not match parameter count");, +			for (int i = 0; i < methodParameterTypes.length; i++) {, +				Type methodParameterType = methodParameterTypes[i];, +				Object arg = args[i];, +				if (methodParameterType.equals(genericReturnType)) {, +					if (arg instanceof TypedStringValue) {, +						TypedStringValue typedValue = ((TypedStringValue) arg);, +						if (typedValue.hasTargetType()) {, +							return typedValue.getTargetType();, +						try {, +							return typedValue.resolveTargetType(classLoader);, +						}, +						catch (ClassNotFoundException ex) {, +							throw new IllegalStateException("Failed to resolve typed value", ex);, +						}, +					}, +					// Only consider argument type if it is a simple value..., +					if (arg != null && !(arg instanceof BeanMetadataElement)) {, +						return arg.getClass();, +					}, +					return method.getReturnType();, +				}, +				else if (methodParameterType instanceof ParameterizedType) {, +					ParameterizedType parameterizedType = (ParameterizedType) methodParameterType;, +									TypedStringValue typedValue = ((TypedStringValue) arg);, +									String targetTypeName = typedValue.getTargetTypeName();, +									if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) {, +										className = typedValue.getValue();, +									}]