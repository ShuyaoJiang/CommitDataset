[+++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java, +	private String beanName;, +, +	@Nullable, +	private ApplicationContext applicationContext;, +, +	@Nullable, +	 * Set the name of the Scheduler to create via the SchedulerFactory, as an, +	 * alternative to the {@code org.quartz.scheduler.instanceName} property., +	 * <p>If not specified, the name will be taken from Quartz properties, +	 * ({@code org.quartz.scheduler.instanceName}), or from the declared, +	 * {@code SchedulerFactoryBean} bean name as a fallback., +	 * @see StdSchedulerFactory#PROP_SCHED_INSTANCE_NAME, +		this.beanName = name;, +			mergedProps.setProperty(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName());, +, +		// Determine scheduler name across local settings and Quartz properties..., +			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName);, +		}, +		else {, +			String nameProp = mergedProps.getProperty(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME);, +			if (nameProp != null) {, +				this.schedulerName = nameProp;, +			}, +			else if (this.beanName != null) {, +				mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.beanName);, +				this.schedulerName = this.beanName;, +			}, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java, +	private String beanName;, +, +	@Nullable, +	private ApplicationContext applicationContext;, +, +	@Nullable, +	 * Set the name of the Scheduler to create via the SchedulerFactory, as an, +	 * alternative to the {@code org.quartz.scheduler.instanceName} property., +	 * <p>If not specified, the name will be taken from Quartz properties, +	 * ({@code org.quartz.scheduler.instanceName}), or from the declared, +	 * {@code SchedulerFactoryBean} bean name as a fallback., +	 * @see StdSchedulerFactory#PROP_SCHED_INSTANCE_NAME, +		this.beanName = name;, +			mergedProps.setProperty(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName());, +, +		// Determine scheduler name across local settings and Quartz properties..., +			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName);, +		}, +		else {, +			String nameProp = mergedProps.getProperty(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME);, +			if (nameProp != null) {, +				this.schedulerName = nameProp;, +			}, +			else if (this.beanName != null) {, +				mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.beanName);, +				this.schedulerName = this.beanName;, +			}, +++ b/spring-context-support/src/test/java/org/springframework/scheduling/quartz/QuartzSupportTests.java, + * Copyright 2002-2018 the original author or authors., +	@Test  // SPR-772, +	@Test  // SPR-16884, +	public void multipleSchedulersWithQuartzProperties() throws Exception {, +		ClassPathXmlApplicationContext ctx = context("multipleSchedulersWithQuartzProperties.xml");, +		try {, +			Scheduler scheduler1 = (Scheduler) ctx.getBean("scheduler1");, +			Scheduler scheduler2 = (Scheduler) ctx.getBean("scheduler2");, +			assertNotSame(scheduler1, scheduler2);, +			assertEquals("quartz1", scheduler1.getSchedulerName());, +			assertEquals("quartz2", scheduler2.getSchedulerName());, +		}, +		finally {, +			ctx.close();, +		}, +	}, +, +		BeanDefinition beanDefinition = BeanDefinitionBuilder.genericBeanDefinition(SchedulerFactoryBean.class), +				.addPropertyValue("autoStartup", false).getBeanDefinition();, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SchedulerFactoryBean.java, +	private String beanName;, +, +	@Nullable, +	private ApplicationContext applicationContext;, +, +	@Nullable, +	 * Set the name of the Scheduler to create via the SchedulerFactory, as an, +	 * alternative to the {@code org.quartz.scheduler.instanceName} property., +	 * <p>If not specified, the name will be taken from Quartz properties, +	 * ({@code org.quartz.scheduler.instanceName}), or from the declared, +	 * {@code SchedulerFactoryBean} bean name as a fallback., +	 * @see StdSchedulerFactory#PROP_SCHED_INSTANCE_NAME, +		this.beanName = name;, +			mergedProps.setProperty(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName());, +, +		// Determine scheduler name across local settings and Quartz properties..., +			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName);, +		}, +		else {, +			String nameProp = mergedProps.getProperty(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME);, +			if (nameProp != null) {, +				this.schedulerName = nameProp;, +			}]