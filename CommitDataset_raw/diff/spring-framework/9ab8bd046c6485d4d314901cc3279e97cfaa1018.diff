[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerRequest.java, +	public Map<String, Object> attributes() {, +		return this.exchange.getAttributes();, +	}, +, +	@Override, +	@Override, +	public String toString() {, +		return String.format("%s %s", method(), path());, +	}, +, +		@Override, +		public String toString() {, +			return delegate().toString();, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerRequest.java, +	public Map<String, Object> attributes() {, +		return this.exchange.getAttributes();, +	}, +, +	@Override, +	@Override, +	public String toString() {, +		return String.format("%s %s", method(), path());, +	}, +, +		@Override, +		public String toString() {, +			return delegate().toString();, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicate.java, +			public ServerRequest nestRequest(ServerRequest request) {, +				return other.nestRequest(RequestPredicate.this.nestRequest(request));, +			}, +, +			@Override, +			public String toString() {, +				return String.format("(%s && %s)", RequestPredicate.this, other);, +		return new RequestPredicate() {, +			@Override, +			public boolean test(ServerRequest t) {, +				return RequestPredicate.this.test(t) || other.test(t);, +			@Override, +			public ServerRequest nestRequest(ServerRequest request) {, +				if (RequestPredicate.this.test(request)) {, +					return RequestPredicate.this.nestRequest(request);, +				}, +				else if (other.test(request)) {, +					return other.nestRequest(request);, +				}, +				else {, +					throw new IllegalStateException("Neither " + RequestPredicate.this.toString() +, +							" nor " + other + "matches");, +				}, +			}, +, +			@Override, +			public String toString() {, +				return String.format("(%s || %s)", RequestPredicate.this, other);, +			}, +		};, +	}, +, +	/**, +	 * Transforms the given request into a request used for a nested route. For instance, a, +	 * path-based predicate can return a {@code ServerRequest} with a nested path., +	 * <p>Default implementation returns the given path., +	 * @param request the request to be nested, +	 * @return the nested request, +	 * @see RouterFunctions#nest(RequestPredicate, RouterFunction), +	 */, +	default ServerRequest nestRequest(ServerRequest request) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerRequest.java, +	public Map<String, Object> attributes() {, +		return this.exchange.getAttributes();, +	}, +, +	@Override, +	@Override, +	public String toString() {, +		return String.format("%s %s", method(), path());, +	}, +, +		@Override, +		public String toString() {, +			return delegate().toString();, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicate.java, +			public ServerRequest nestRequest(ServerRequest request) {, +				return other.nestRequest(RequestPredicate.this.nestRequest(request));, +			}, +, +			@Override, +			public String toString() {, +				return String.format("(%s && %s)", RequestPredicate.this, other);, +		return new RequestPredicate() {, +			@Override, +			public boolean test(ServerRequest t) {, +				return RequestPredicate.this.test(t) || other.test(t);, +			@Override]