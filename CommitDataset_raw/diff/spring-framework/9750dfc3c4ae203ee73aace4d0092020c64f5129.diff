[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/standard/StandardTypeConverter.java, +			if (targetType == Integer.TYPE) {, +				if (sourceType == Integer.class) {, +					return true;, +				}, +			} else if (targetType == Boolean.TYPE) {, +				if (sourceType == Boolean.class) {, +					return true;, +				}, +			} else if (targetType == Short.TYPE) {, +				if (sourceType == Short.class) {, +					return true;, +				}, +			} else if (targetType == Long.TYPE) {, +				if (sourceType == Long.class) {, +					return true;, +				}, +			} else if (targetType == Character.TYPE) {, +				if (sourceType == Character.class) {, +					return true;, +				}, +			} else if (targetType == Double.TYPE) {, +				if (sourceType == Double.class) {, +					return true;, +				}, +			} else if (targetType == Float.TYPE) {, +				if (sourceType == Float.class) {, +					return true;, +				}, +			} else if (targetType == Byte.TYPE) {, +				if (sourceType == Byte.class) {, +					return true;, +				}, +		}, +		Class sourceType = value.getClass();, +			if (targetType == Integer.TYPE) {, +				if (sourceType == Integer.class) {, +					return value;, +				}, +			} else if (targetType == Boolean.TYPE) {, +				if (sourceType == Boolean.class) {, +					return value;, +				}, +			} else if (targetType == Short.TYPE) {, +				if (sourceType == Short.class) {, +					return value;, +				}, +			} else if (targetType == Long.TYPE) {, +				if (sourceType == Long.class) {, +					return value;, +				}, +			} else if (targetType == Character.TYPE) {, +				if (sourceType == Character.class) {, +					return value;, +				}, +			} else if (targetType == Double.TYPE) {, +				if (sourceType == Double.class) {, +					return value;, +				}, +			} else if (targetType == Float.TYPE) {, +				if (sourceType == Float.class) {, +					return value;, +				}, +			} else if (targetType == Byte.TYPE) {, +				if (sourceType == Byte.class) {, +					return value;, +				}, +		}, +			if (value instanceof Integer) {, +				return ((Integer) value).intValue() != 0;, +			} else {, +				return ((Long) value).longValue() != 0;, +			}, +			return new Class<?>[] { Integer.class, Long.class };, +			return Boolean.class;, +			return new Class<?>[] { Long.class };]