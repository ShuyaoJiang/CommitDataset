[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultEntityResponseBuilder.java, +/*, + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.reactive.function.server;, +, +import java.net.URI;, +import java.time.ZoneId;, +import java.time.ZonedDateTime;, +import java.time.format.DateTimeFormatter;, +import java.util.Arrays;, +import java.util.HashMap;, +import java.util.LinkedHashSet;, +import java.util.Map;, +import java.util.Set;, +import java.util.function.Supplier;, +import java.util.stream.Stream;, +, +import reactor.core.publisher.Mono;, +, +import org.springframework.http.CacheControl;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpMethod;, +import org.springframework.http.HttpStatus;, +import org.springframework.http.MediaType;, +import org.springframework.http.codec.HttpMessageWriter;, +import org.springframework.http.server.reactive.ServerHttpResponse;, +import org.springframework.util.Assert;, +import org.springframework.web.reactive.function.BodyInserter;, +import org.springframework.web.server.ServerWebExchange;, +, +/**, + * Default {@link EntityResponse.Builder} implementation., + *, + * @author Arjen Poutsma, + * @since 5.0, + */, +class DefaultEntityResponseBuilder<T> implements EntityResponse.Builder<T> {, +, +	private final T entity;, +, +	private final BodyInserter<T, ? super ServerHttpResponse> inserter;, +, +	private final HttpHeaders headers = new HttpHeaders();, +, +	private HttpStatus statusCode = HttpStatus.OK;, +, +	private final Map<String, Object> hints = new HashMap<>();, +, +, +, +	public DefaultEntityResponseBuilder(T entity,, +			BodyInserter<T, ? super ServerHttpResponse> inserter) {, +		this.entity = entity;, +		this.inserter = inserter;, +	}, +, +	@Override, +	public EntityResponse.Builder<T> status(HttpStatus status) {, +		Assert.notNull(status, "'status' must not be null");, +		this.statusCode = status;, +		return this;, +	}, +, +	@Override, +	public EntityResponse.Builder<T> header(String headerName, String... headerValues) {, +		for (String headerValue : headerValues) {, +			this.headers.add(headerName, headerValue);, +		}, +		return this;, +	}, +, +	@Override, +	public EntityResponse.Builder<T> headers(HttpHeaders headers) {, +		if (headers != null) {, +			this.headers.putAll(headers);, +		}, +		return this;, +	}, +, +	@Override, +	public EntityResponse.Builder<T> allow(HttpMethod... allowedMethods) {, +		this.headers.setAllow(new LinkedHashSet<>(Arrays.asList(allowedMethods)));, +		return this;, +	}, +, +	@Override]