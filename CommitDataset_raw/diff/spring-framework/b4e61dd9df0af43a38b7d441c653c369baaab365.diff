[+++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessorTests.java, +/*, + * Copyright 2002-2007 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.context.annotation;, +, +import static org.junit.Assert.*;, +, +import javax.annotation.PostConstruct;, +import javax.annotation.PreDestroy;, +import javax.annotation.Resource;, +import javax.ejb.EJB;, +, +import org.junit.Test;, +import org.springframework.beans.INestedTestBean;, +import org.springframework.beans.ITestBean;, +import org.springframework.beans.NestedTestBean;, +import org.springframework.beans.TestBean;, +import org.springframework.beans.factory.BeanCreationException;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.NoSuchBeanDefinitionException;, +import org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor;, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +import org.springframework.jndi.support.SimpleJndiBeanFactory;, +import org.springframework.mock.jndi.ExpectedLookupTemplate;, +import org.springframework.util.SerializationTestUtils;, +, +/**, + * @author Juergen Hoeller, + * @author Chris Beams, + */, +public class CommonAnnotationBeanPostProcessorTests {, +, +	@Test, +	public void testPostConstructAndPreDestroy() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.addBeanPostProcessor(new CommonAnnotationBeanPostProcessor());, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(AnnotatedInitDestroyBean.class));, +, +		AnnotatedInitDestroyBean bean = (AnnotatedInitDestroyBean) bf.getBean("annotatedBean");, +		assertTrue(bean.initCalled);, +		bf.destroySingletons();, +		assertTrue(bean.destroyCalled);, +	}, +, +	@Test, +	public void testPostConstructAndPreDestroyWithManualConfiguration() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		InitDestroyAnnotationBeanPostProcessor bpp = new InitDestroyAnnotationBeanPostProcessor();, +		bpp.setInitAnnotationType(PostConstruct.class);, +		bpp.setDestroyAnnotationType(PreDestroy.class);, +		bf.addBeanPostProcessor(bpp);, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(AnnotatedInitDestroyBean.class));, +, +		AnnotatedInitDestroyBean bean = (AnnotatedInitDestroyBean) bf.getBean("annotatedBean");, +		assertTrue(bean.initCalled);, +		bf.destroySingletons();, +		assertTrue(bean.destroyCalled);, +	}, +, +	@Test, +	public void testSerialization() throws Exception {, +		CommonAnnotationBeanPostProcessor bpp = new CommonAnnotationBeanPostProcessor();, +		CommonAnnotationBeanPostProcessor bpp2 = (CommonAnnotationBeanPostProcessor), +				SerializationTestUtils.serializeAndDeserialize(bpp);, +, +		AnnotatedInitDestroyBean bean = new AnnotatedInitDestroyBean();, +		bpp2.postProcessBeforeDestruction(bean, "annotatedBean");, +		assertTrue(bean.destroyCalled);, +	}, +, +	@Test, +	public void testSerializationWithManualConfiguration() throws Exception {, +		InitDestroyAnnotationBeanPostProcessor bpp = new InitDestroyAnnotationBeanPostProcessor();, +		bpp.setInitAnnotationType(PostConstruct.class);, +		bpp.setDestroyAnnotationType(PreDestroy.class);, +		InitDestroyAnnotationBeanPostProcessor bpp2 = (InitDestroyAnnotationBeanPostProcessor), +				SerializationTestUtils.serializeAndDeserialize(bpp);, +, +		AnnotatedInitDestroyBean bean = new AnnotatedInitDestroyBean();, +		bpp2.postProcessBeforeDestruction(bean, "annotatedBean");, +		assertTrue(bean.destroyCalled);, +	}, +, +	@Test, +	public void testResourceInjection() {]