[+++ b/spring-web/src/main/java/org/springframework/web/server/i18n/AcceptHeaderLocaleContextResolver.java, +		List<Locale> supportedLocales = getSupportedLocales();, +		if (supportedLocales.isEmpty()) {, +			if (supportedLocales.contains(locale)) {, +				if (languageMatch == null || languageMatch.getLanguage().equals(locale.getLanguage())) {, +					// Full match: language + country, possibly narrowed from earlier language-only match, +			}, +				for (Locale candidate : supportedLocales) {, +						break;, +++ b/spring-web/src/main/java/org/springframework/web/server/i18n/AcceptHeaderLocaleContextResolver.java, +		List<Locale> supportedLocales = getSupportedLocales();, +		if (supportedLocales.isEmpty()) {, +			if (supportedLocales.contains(locale)) {, +				if (languageMatch == null || languageMatch.getLanguage().equals(locale.getLanguage())) {, +					// Full match: language + country, possibly narrowed from earlier language-only match, +			}, +				for (Locale candidate : supportedLocales) {, +						break;, +++ b/spring-web/src/test/java/org/springframework/web/server/i18n/AcceptHeaderLocaleContextResolverTests.java, +	public void resolvePreferredAgainstCountryIfPossible() {, +		this.resolver.setSupportedLocales(Arrays.asList(ENGLISH, UK));, +		assertEquals(UK, this.resolver.resolveLocaleContext(exchange(GERMANY, US, UK)).getLocale());, +	}, +, +	@Test, +	public void resolvePreferredAgainstLanguageWithMultipleSupportedLocales() {, +		this.resolver.setSupportedLocales(Arrays.asList(GERMAN, US));, +		assertEquals(GERMAN, this.resolver.resolveLocaleContext(exchange(GERMANY, US, UK)).getLocale());, +	}, +, +	@Test, +++ b/spring-web/src/main/java/org/springframework/web/server/i18n/AcceptHeaderLocaleContextResolver.java, +		List<Locale> supportedLocales = getSupportedLocales();, +		if (supportedLocales.isEmpty()) {, +			if (supportedLocales.contains(locale)) {, +				if (languageMatch == null || languageMatch.getLanguage().equals(locale.getLanguage())) {, +					// Full match: language + country, possibly narrowed from earlier language-only match, +			}, +				for (Locale candidate : supportedLocales) {, +						break;, +++ b/spring-web/src/test/java/org/springframework/web/server/i18n/AcceptHeaderLocaleContextResolverTests.java, +	public void resolvePreferredAgainstCountryIfPossible() {, +		this.resolver.setSupportedLocales(Arrays.asList(ENGLISH, UK));, +		assertEquals(UK, this.resolver.resolveLocaleContext(exchange(GERMANY, US, UK)).getLocale());, +	}, +, +	@Test, +	public void resolvePreferredAgainstLanguageWithMultipleSupportedLocales() {, +		this.resolver.setSupportedLocales(Arrays.asList(GERMAN, US));, +		assertEquals(GERMAN, this.resolver.resolveLocaleContext(exchange(GERMANY, US, UK)).getLocale());, +	}, +, +	@Test, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/AcceptHeaderLocaleResolver.java, +		List<Locale> supportedLocales = getSupportedLocales();, +		if (supportedLocales.isEmpty() || supportedLocales.contains(requestLocale)) {, +		Locale supportedLocale = findSupportedLocale(request, supportedLocales);, +	private Locale findSupportedLocale(HttpServletRequest request, List<Locale> supportedLocales) {, +			if (supportedLocales.contains(locale)) {, +				if (languageMatch == null || languageMatch.getLanguage().equals(locale.getLanguage())) {, +					// Full match: language + country, possibly narrowed from earlier language-only match, +			}, +				for (Locale candidate : supportedLocales) {, +						break;, +++ b/spring-web/src/main/java/org/springframework/web/server/i18n/AcceptHeaderLocaleContextResolver.java, +		List<Locale> supportedLocales = getSupportedLocales();, +		if (supportedLocales.isEmpty()) {, +			if (supportedLocales.contains(locale)) {, +				if (languageMatch == null || languageMatch.getLanguage().equals(locale.getLanguage())) {, +					// Full match: language + country, possibly narrowed from earlier language-only match, +			}, +				for (Locale candidate : supportedLocales) {, +						break;, +++ b/spring-web/src/test/java/org/springframework/web/server/i18n/AcceptHeaderLocaleContextResolverTests.java, +	public void resolvePreferredAgainstCountryIfPossible() {, +		this.resolver.setSupportedLocales(Arrays.asList(ENGLISH, UK));, +		assertEquals(UK, this.resolver.resolveLocaleContext(exchange(GERMANY, US, UK)).getLocale());, +	}, +, +	@Test, +	public void resolvePreferredAgainstLanguageWithMultipleSupportedLocales() {, +		this.resolver.setSupportedLocales(Arrays.asList(GERMAN, US));, +		assertEquals(GERMAN, this.resolver.resolveLocaleContext(exchange(GERMANY, US, UK)).getLocale());, +	}, +, +	@Test, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/i18n/AcceptHeaderLocaleResolver.java, +		List<Locale> supportedLocales = getSupportedLocales();, +		if (supportedLocales.isEmpty() || supportedLocales.contains(requestLocale)) {, +		Locale supportedLocale = findSupportedLocale(request, supportedLocales);, +	private Locale findSupportedLocale(HttpServletRequest request, List<Locale> supportedLocales) {, +			if (supportedLocales.contains(locale)) {, +				if (languageMatch == null || languageMatch.getLanguage().equals(locale.getLanguage())) {, +					// Full match: language + country, possibly narrowed from earlier language-only match, +			}, +				for (Locale candidate : supportedLocales) {, +						break;, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/i18n/AcceptHeaderLocaleResolverTests.java, +	public void resolvePreferredAgainstCountryIfPossible() {, +		this.resolver.setSupportedLocales(Arrays.asList(ENGLISH, UK));]