[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, +		throw new IllegalStateException("No HandlerResultHandler for " + handlerResult.getReturnValue());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, +		throw new IllegalStateException("No HandlerResultHandler for " + handlerResult.getReturnValue());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/HandlerResult.java, +import java.util.Optional;, +	private final Optional<Object> returnValue;, +	private final ResolvableType returnValueType;, +	/**, +	 * Create a new {@code HandlerResult}., +	 * @param handler the handler that handled the request, +	 * @param returnValue the return value from the handler possibly {@code null}, +	 * @param returnValueType the return value type, +	 */, +	public HandlerResult(Object handler, Object returnValue, ResolvableType returnValueType) {, +		Assert.notNull(returnValueType, "'returnValueType' is required");, +		this.returnValue = Optional.ofNullable(returnValue);, +		this.returnValueType = returnValueType;, +	/**, +	 * Return the handler that handled the request., +	 */, +	/**, +	 * Return the value returned from the handler wrapped as {@link Optional}., +	 */, +	public Optional<Object> getReturnValue() {, +		return this.returnValue;, +	 * Return the type of the value returned from the handler., +	 */, +	public ResolvableType getReturnValueType() {, +		return this.returnValueType;, +	}, +, +	/**, +	 * Configure an exception handler that may be used to produce an alternative, +	 * result when result handling fails. Especially for an async return value, +	 * errors may occur after the invocation of the handler., +	 * @param function the error handler, +	/**, +	 * Whether there is an exception handler., +	 */, +	/**, +	 * Apply the exception handler and return the alternative result., +	 * @param failure the exception, +	 * @return the new result or the same error if there is no exception handler, +	 */, +	public Mono<HandlerResult> applyExceptionHandler(Throwable failure) {, +		return (hasExceptionHandler() ? this.exceptionHandler.apply(failure) : Mono.error(failure));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, +		throw new IllegalStateException("No HandlerResultHandler for " + handlerResult.getReturnValue());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/HandlerResult.java, +import java.util.Optional;, +	private final Optional<Object> returnValue;, +	private final ResolvableType returnValueType;, +	/**, +	 * Create a new {@code HandlerResult}., +	 * @param handler the handler that handled the request, +	 * @param returnValue the return value from the handler possibly {@code null}, +	 * @param returnValueType the return value type, +	 */, +	public HandlerResult(Object handler, Object returnValue, ResolvableType returnValueType) {, +		Assert.notNull(returnValueType, "'returnValueType' is required");, +		this.returnValue = Optional.ofNullable(returnValue);, +		this.returnValueType = returnValueType;, +	/**, +	 * Return the handler that handled the request., +	 */, +	/**, +	 * Return the value returned from the handler wrapped as {@link Optional}., +	 */, +	public Optional<Object> getReturnValue() {, +		return this.returnValue;, +	 * Return the type of the value returned from the handler., +	 */, +	public ResolvableType getReturnValueType() {, +		return this.returnValueType;, +	}, +, +	/**, +	 * Configure an exception handler that may be used to produce an alternative, +	 * result when result handling fails. Especially for an async return value, +	 * errors may occur after the invocation of the handler., +	 * @param function the error handler, +	/**, +	 * Whether there is an exception handler., +	 */, +	/**, +	 * Apply the exception handler and return the alternative result., +	 * @param failure the exception, +	 * @return the new result or the same error if there is no exception handler, +	 */, +	public Mono<HandlerResult> applyExceptionHandler(Throwable failure) {, +		return (hasExceptionHandler() ? this.exceptionHandler.apply(failure) : Mono.error(failure));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/handler/SimpleHandlerResultHandler.java, +import java.util.Optional;, +, +		ResolvableType type = result.getReturnValueType();, +		Optional<Object> value = result.getReturnValue();, +		if (!value.isPresent() || Void.TYPE.equals(result.getReturnValueType().getRawClass())) {, +		if (value.get() instanceof Mono) {, +			return (Mono<Void>) value.get();]