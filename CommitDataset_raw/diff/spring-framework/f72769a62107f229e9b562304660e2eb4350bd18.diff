[+++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import org.springframework.core.Ordered;, +public class AnnotationMethodHandlerAdapter extends PortletContentGenerator, +		implements HandlerAdapter, Ordered, BeanFactoryAware {, +	private int order = Ordered.LOWEST_PRECEDENCE;, +, +	/**, +	 * Specify the order value for this HandlerAdapter bean., +	 * <p>Default value is <code>Integer.MAX_VALUE</code>, meaning that it's non-ordered., +	 * @see org.springframework.core.Ordered#getOrder(), +	 */, +	public void setOrder(int order) {, +		this.order = order;, +	}, +, +	public int getOrder() {, +		return this.order;, +	}, +, +	/**, +	 * Portlet-specific subclass of {@link HandlerMethodResolver}., +	 */, +	/**, +	 * Portlet-specific subclass of {@link HandlerMethodInvoker}., +	 */, +, +	/**, +	 * Holder for request mapping metadata. Allows for finding a best matching candidate., +	 */, +	private static class RequestMappingInfo {, +, +		public final Set<PortletMode> modes = new HashSet<PortletMode>();, +, +		public String phase;, +, +		public String value;, +, +		public final Set<String> methods = new HashSet<String>();, +, +		public String[] params = new String[0];, +, +		public String[] headers = new String[0];, +, +		public void initStandardMapping(String[] modes, RequestMethod[] methods, String[] params, String[] headers) {, +			for (String mode : modes) {, +				this.modes.add(new PortletMode(mode));, +			}, +			for (RequestMethod method : methods) {, +				this.methods.add(method.name());, +			}, +			this.params = StringUtils.mergeStringArrays(this.params, params);, +			this.headers = StringUtils.mergeStringArrays(this.headers, headers);, +		}, +, +		public void initPhaseMapping(String phase, String value, String[] params) {, +			if (this.phase != null) {, +				throw new IllegalStateException(, +						"Invalid mapping - more than one phase specified: '" + this.phase + "', '" + phase + "'");, +			}, +			this.phase = phase;, +			this.value = value;, +			this.params = StringUtils.mergeStringArrays(this.params, params);, +		}, +, +		public boolean match(PortletRequest request) {, +			if (!this.modes.isEmpty() && !this.modes.contains(request.getPortletMode())) {, +				return false;, +			}, +			if (StringUtils.hasLength(this.phase) &&, +					!this.phase.equals(request.getAttribute(PortletRequest.LIFECYCLE_PHASE))) {, +				return false;, +			}, +			if (StringUtils.hasLength(this.value)) {, +				if (this.phase.equals(PortletRequest.ACTION_PHASE) &&, +						!this.value.equals(request.getParameter(ActionRequest.ACTION_NAME))) {, +					return false;, +				}, +				else if (this.phase.equals(PortletRequest.RENDER_PHASE) &&, +						!(new WindowState(this.value)).equals(request.getWindowState())) {, +					return false;, +				}, +				else if (this.phase.equals(PortletRequest.RESOURCE_PHASE) &&, +						!this.value.equals(((ResourceRequest) request).getResourceID())) {, +					return false;, +				}, +				else if (this.phase.equals(PortletRequest.EVENT_PHASE)) {, +					Event event = ((EventRequest) request).getEvent();, +					if (!this.value.equals(event.getName()) && !this.value.equals(event.getQName().toString())) {, +						return false;, +					}, +				}, +			}, +			return PortletAnnotationMappingUtils.checkRequestMethod(this.methods, request) &&, +					PortletAnnotationMappingUtils.checkParameters(this.params, request) &&, +					PortletAnnotationMappingUtils.checkHeaders(this.headers, request);, +		}, +, +		public boolean isBetterMatchThan(RequestMappingInfo other) {, +			return ((!this.modes.isEmpty() && other.modes.isEmpty()) ||, +					(StringUtils.hasLength(this.phase) && !StringUtils.hasLength(other.phase)) ||]