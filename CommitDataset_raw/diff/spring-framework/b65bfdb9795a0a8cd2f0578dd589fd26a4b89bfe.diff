[+++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/PathMatchConfigurer.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/PathMatchConfigurer.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/PathMatchConfigurer.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/handler/AbstractHandlerMapping.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/PathMatchConfigurer.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/handler/AbstractHandlerMapping.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/ResourceUrlProvider.java, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/PathMatchConfigurer.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/handler/AbstractHandlerMapping.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/ResourceUrlProvider.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/RequestMappingInfoHandlerMapping.java, +import java.nio.charset.StandardCharsets;, +import java.util.StringTokenizer;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.StringUtils;, +			uriVariables = uriVariables.entrySet().stream().collect(Collectors.toMap(, +					Entry::getKey, e -> StringUtils.uriDecode(e.getValue(), StandardCharsets.UTF_8), +			));, +			result.put(uriVar.getKey(), parseMatrixVariables(exchange, semicolonContent));, +	private static MultiValueMap<String, String> parseMatrixVariables(ServerWebExchange exchange,, +			String semicolonContent) {, +, +		MultiValueMap<String, String> vars = new LinkedMultiValueMap<>();, +		if (!StringUtils.hasText(semicolonContent)) {, +			return vars;, +		}, +		StringTokenizer pairs = new StringTokenizer(semicolonContent, ";");, +		while (pairs.hasMoreTokens()) {, +			String pair = pairs.nextToken();, +			int index = pair.indexOf('=');, +			if (index != -1) {, +				String name = pair.substring(0, index);, +				String rawValue = pair.substring(index + 1);, +				for (String value : StringUtils.commaDelimitedListToStringArray(rawValue)) {, +					vars.add(name, value);, +				}, +			}, +			else {, +				vars.add(pair, "");, +			}, +		}, +		MultiValueMap<String, String> decoded = new LinkedMultiValueMap<>(vars.size());, +		vars.forEach((key, values) -> values.forEach(value -> {, +			String decodedValue = StringUtils.uriDecode(value, StandardCharsets.UTF_8);, +			decoded.add(key, decodedValue);, +		}));, +		return decoded;, +	}, +, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/PathMatchConfigurer.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/config/WebFluxConfigurationSupport.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/handler/AbstractHandlerMapping.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/resource/ResourceUrlProvider.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/RequestMappingInfoHandlerMapping.java, +import java.nio.charset.StandardCharsets;, +import java.util.StringTokenizer;, +import org.springframework.util.LinkedMultiValueMap;, +import org.springframework.util.StringUtils;, +			uriVariables = uriVariables.entrySet().stream().collect(Collectors.toMap(, +					Entry::getKey, e -> StringUtils.uriDecode(e.getValue(), StandardCharsets.UTF_8), +			));, +			result.put(uriVar.getKey(), parseMatrixVariables(exchange, semicolonContent));, +	private static MultiValueMap<String, String> parseMatrixVariables(ServerWebExchange exchange,, +			String semicolonContent) {, +, +		MultiValueMap<String, String> vars = new LinkedMultiValueMap<>();, +		if (!StringUtils.hasText(semicolonContent)) {, +			return vars;, +		}, +		StringTokenizer pairs = new StringTokenizer(semicolonContent, ";");, +		while (pairs.hasMoreTokens()) {, +			String pair = pairs.nextToken();]