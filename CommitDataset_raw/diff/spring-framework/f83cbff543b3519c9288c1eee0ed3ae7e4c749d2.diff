[+++ b/spring-jms/src/main/java/org/springframework/jms/listener/AbstractJmsListeningContainer.java, + * Copyright 2002-2016 the original author or authors., +		stop();, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/AbstractJmsListeningContainer.java, + * Copyright 2002-2016 the original author or authors., +		stop();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.java, +	@Override, +	public final boolean isRunning() {, +		synchronized (this.lifecycleMonitor) {, +			return this.running;, +		}, +	}, +, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/AbstractJmsListeningContainer.java, + * Copyright 2002-2016 the original author or authors., +		stop();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.java, +	@Override, +	public final boolean isRunning() {, +		synchronized (this.lifecycleMonitor) {, +			return this.running;, +		}, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/UserDestinationMessageHandler.java, + * Copyright 2002-2016 the original author or authors., +	@Override, +	public final boolean isRunning() {, +		synchronized (this.lifecycleMonitor) {, +			return this.running;, +		}, +	}, +, +		accessor.setNativeHeader(SimpMessageHeaderAccessor.ORIGINAL_DESTINATION, result.getSubscribeDestination());, +			SimpMessageHeaderAccessor accessor =, +					SimpMessageHeaderAccessor.getAccessor(message, SimpMessageHeaderAccessor.class);, +			destination = accessor.getFirstNativeHeader(SimpMessageHeaderAccessor.ORIGINAL_DESTINATION);, +			if (SimpMessageHeaderAccessor.getFirstNativeHeader(, +					SimpMessageHeaderAccessor.ORIGINAL_DESTINATION, headers) != null) {, +			accessor.setNativeHeader(SimpMessageHeaderAccessor.ORIGINAL_DESTINATION, destination);, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/AbstractJmsListeningContainer.java, + * Copyright 2002-2016 the original author or authors., +		stop();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.java, +	@Override, +	public final boolean isRunning() {, +		synchronized (this.lifecycleMonitor) {, +			return this.running;, +		}, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/UserDestinationMessageHandler.java, + * Copyright 2002-2016 the original author or authors., +	@Override, +	public final boolean isRunning() {, +		synchronized (this.lifecycleMonitor) {, +			return this.running;, +		}, +	}, +, +		accessor.setNativeHeader(SimpMessageHeaderAccessor.ORIGINAL_DESTINATION, result.getSubscribeDestination());, +			SimpMessageHeaderAccessor accessor =, +					SimpMessageHeaderAccessor.getAccessor(message, SimpMessageHeaderAccessor.class);, +			destination = accessor.getFirstNativeHeader(SimpMessageHeaderAccessor.ORIGINAL_DESTINATION);, +			if (SimpMessageHeaderAccessor.getFirstNativeHeader(, +					SimpMessageHeaderAccessor.ORIGINAL_DESTINATION, headers) != null) {, +			accessor.setNativeHeader(SimpMessageHeaderAccessor.ORIGINAL_DESTINATION, destination);, +++ b/spring-tx/src/main/java/org/springframework/jca/endpoint/GenericMessageEndpointManager.java, + * Copyright 2002-2016 the original author or authors., +			stop();, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/AbstractJmsListeningContainer.java, + * Copyright 2002-2016 the original author or authors., +		stop();, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandler.java, +	@Override, +	public final boolean isRunning() {, +		synchronized (this.lifecycleMonitor) {, +			return this.running;, +		}, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/user/UserDestinationMessageHandler.java, + * Copyright 2002-2016 the original author or authors., +	@Override, +	public final boolean isRunning() {, +		synchronized (this.lifecycleMonitor) {, +			return this.running;, +		}, +	}, +, +		accessor.setNativeHeader(SimpMessageHeaderAccessor.ORIGINAL_DESTINATION, result.getSubscribeDestination());, +			SimpMessageHeaderAccessor accessor =, +					SimpMessageHeaderAccessor.getAccessor(message, SimpMessageHeaderAccessor.class);, +			destination = accessor.getFirstNativeHeader(SimpMessageHeaderAccessor.ORIGINAL_DESTINATION);, +			if (SimpMessageHeaderAccessor.getFirstNativeHeader(, +					SimpMessageHeaderAccessor.ORIGINAL_DESTINATION, headers) != null) {, +			accessor.setNativeHeader(SimpMessageHeaderAccessor.ORIGINAL_DESTINATION, destination);, +++ b/spring-tx/src/main/java/org/springframework/jca/endpoint/GenericMessageEndpointManager.java, + * Copyright 2002-2016 the original author or authors.]