[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, + * Copyright 2002-2010 the original author or authors., +		return (type != null && (clazz == null || ClassUtils.isAssignable(clazz, type)));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, + * Copyright 2002-2010 the original author or authors., +		return (type != null && (clazz == null || ClassUtils.isAssignable(clazz, type)));, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/GenericConversionServiceTests.java, + * Copyright 2002-2010 the original author or authors., +import java.util.LinkedHashMap;, +	public void testMapToObjectConversion() {, +	@Test, +	public void testWildcardMap() throws Exception {, +		GenericConversionService conversionService = ConversionServiceFactory.createDefaultConversionService();, +		Map<String, String> input = new LinkedHashMap<String, String>();, +		input.put("key", "value");, +		Object converted = conversionService.convert(input, TypeDescriptor.forObject(input),, +				new TypeDescriptor(getClass().getField("wildcardMap")));, +		assertSame(input, converted);, +	}, +, +	private static class MyBaseInterfaceConverter implements Converter<MyBaseInterface, String> {, +	public static Map<String, ?> wildcardMap;, +]