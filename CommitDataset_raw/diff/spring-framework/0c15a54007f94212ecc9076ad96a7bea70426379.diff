[+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, + * Copyright 2002-2015 the original author or authors., +		return forType(targetType, new MethodParameterTypeProvider(methodParameter), owner.asVariableResolver())., +				getNested(methodParameter.getNestingLevel(), methodParameter.typeIndexesPerLevel);, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, + * Copyright 2002-2015 the original author or authors., +		return forType(targetType, new MethodParameterTypeProvider(methodParameter), owner.asVariableResolver())., +				getNested(methodParameter.getNestingLevel(), methodParameter.typeIndexesPerLevel);, +++ b/spring-web/src/main/java/org/springframework/http/converter/GenericHttpMessageConverter.java, + * Copyright 2002-2015 the original author or authors., +	 * in which the target type appears in a method signature (can be {@code null}), +	 * in which the target type appears in a method signature (can be {@code null}), +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, + * Copyright 2002-2015 the original author or authors., +		return forType(targetType, new MethodParameterTypeProvider(methodParameter), owner.asVariableResolver())., +				getNested(methodParameter.getNestingLevel(), methodParameter.typeIndexesPerLevel);, +++ b/spring-web/src/main/java/org/springframework/http/converter/GenericHttpMessageConverter.java, + * Copyright 2002-2015 the original author or authors., +	 * in which the target type appears in a method signature (can be {@code null}), +	 * in which the target type appears in a method signature (can be {@code null}), +++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, + * Copyright 2002-2015 the original author or authors., +			catch (IOException ex) {, +			catch (IOException ex) {, +			if (this.responseType != null) {, +				if (this.responseType instanceof Class) {, +					responseClass = (Class<?>) this.responseType;, +						if (genericConverter.canRead(this.responseType, null, null)) {, +			if (!this.requestEntity.hasBody()) {, +				HttpHeaders requestHeaders = this.requestEntity.getHeaders();, +				Object requestBody = this.requestEntity.getBody();, +				HttpHeaders requestHeaders = this.requestEntity.getHeaders();, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, + * Copyright 2002-2015 the original author or authors., +		return forType(targetType, new MethodParameterTypeProvider(methodParameter), owner.asVariableResolver())., +				getNested(methodParameter.getNestingLevel(), methodParameter.typeIndexesPerLevel);, +++ b/spring-web/src/main/java/org/springframework/http/converter/GenericHttpMessageConverter.java, + * Copyright 2002-2015 the original author or authors., +	 * in which the target type appears in a method signature (can be {@code null}), +	 * in which the target type appears in a method signature (can be {@code null}), +++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, + * Copyright 2002-2015 the original author or authors., +			catch (IOException ex) {, +			catch (IOException ex) {, +			if (this.responseType != null) {, +				if (this.responseType instanceof Class) {, +					responseClass = (Class<?>) this.responseType;, +						if (genericConverter.canRead(this.responseType, null, null)) {, +			if (!this.requestEntity.hasBody()) {, +				HttpHeaders requestHeaders = this.requestEntity.getHeaders();, +				Object requestBody = this.requestEntity.getBody();, +				HttpHeaders requestHeaders = this.requestEntity.getHeaders();, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +	 * @return the URI components of the URI, +	 * @since 4.1.5, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, + * Copyright 2002-2015 the original author or authors., +		return forType(targetType, new MethodParameterTypeProvider(methodParameter), owner.asVariableResolver())., +				getNested(methodParameter.getNestingLevel(), methodParameter.typeIndexesPerLevel);, +++ b/spring-web/src/main/java/org/springframework/http/converter/GenericHttpMessageConverter.java, + * Copyright 2002-2015 the original author or authors., +	 * in which the target type appears in a method signature (can be {@code null}), +	 * in which the target type appears in a method signature (can be {@code null}), +++ b/spring-web/src/main/java/org/springframework/web/client/RestTemplate.java, + * Copyright 2002-2015 the original author or authors., +			catch (IOException ex) {, +			catch (IOException ex) {, +			if (this.responseType != null) {, +				if (this.responseType instanceof Class) {, +					responseClass = (Class<?>) this.responseType;, +						if (genericConverter.canRead(this.responseType, null, null)) {, +			if (!this.requestEntity.hasBody()) {, +				HttpHeaders requestHeaders = this.requestEntity.getHeaders();, +				Object requestBody = this.requestEntity.getBody();, +				HttpHeaders requestHeaders = this.requestEntity.getHeaders();, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +	 * @return the URI components of the URI, +	 * @since 4.1.5, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java, + * Copyright 2002-2015 the original author or authors., +	 * Throws MethodArgumentNotValidException if validation fails., +	protected <T> Object readWithMessageConverters(NativeWebRequest webRequest, MethodParameter methodParam,, +			Type paramType) throws IOException, HttpMediaTypeNotSupportedException {]