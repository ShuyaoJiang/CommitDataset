[+++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, + * Copyright 2002-2013 the original author or authors., +	@SuppressWarnings("unchecked"), +	public <T> T get(Object key, Class<T> type) {, +		Element element = this.cache.get(key);, +		Object value = (element != null ? element.getObjectValue() : null);, +		if (type != null && !type.isInstance(value)) {, +			throw new IllegalStateException("Cached value is not of required type [" + type.getName() + "]: " + value);, +		}, +		return (T) value;, +	}, +, +	@Override, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, + * Copyright 2002-2013 the original author or authors., +	@SuppressWarnings("unchecked"), +	public <T> T get(Object key, Class<T> type) {, +		Element element = this.cache.get(key);, +		Object value = (element != null ? element.getObjectValue() : null);, +		if (type != null && !type.isInstance(value)) {, +			throw new IllegalStateException("Cached value is not of required type [" + type.getName() + "]: " + value);, +		}, +		return (T) value;, +	}, +, +	@Override, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheCache.java, +	public <T> T get(Object key, Class<T> type) {, +		Object value = fromStoreValue(this.cache.get(key));, +		if (type != null && !type.isInstance(value)) {, +			throw new IllegalStateException("Cached value is not of required type [" + type.getName() + "]: " + value);, +		}, +		return (T) value;, +	}, +, +	@Override, +	@SuppressWarnings("unchecked"), +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, + * Copyright 2002-2013 the original author or authors., +	@SuppressWarnings("unchecked"), +	public <T> T get(Object key, Class<T> type) {, +		Element element = this.cache.get(key);, +		Object value = (element != null ? element.getObjectValue() : null);, +		if (type != null && !type.isInstance(value)) {, +			throw new IllegalStateException("Cached value is not of required type [" + type.getName() + "]: " + value);, +		}, +		return (T) value;, +	}, +, +	@Override, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheCache.java, +	public <T> T get(Object key, Class<T> type) {, +		Object value = fromStoreValue(this.cache.get(key));, +		if (type != null && !type.isInstance(value)) {, +			throw new IllegalStateException("Cached value is not of required type [" + type.getName() + "]: " + value);, +		}, +		return (T) value;, +	}, +, +	@Override, +	@SuppressWarnings("unchecked"), +++ b/spring-context-support/src/main/java/org/springframework/cache/transaction/TransactionAwareCacheDecorator.java, + * Copyright 2002-2013 the original author or authors., +	public <T> T get(Object key, Class<T> type) {, +		return this.targetCache.get(key, type);, +	}, +, +	@Override, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, + * Copyright 2002-2013 the original author or authors., +	@SuppressWarnings("unchecked"), +	public <T> T get(Object key, Class<T> type) {, +		Element element = this.cache.get(key);, +		Object value = (element != null ? element.getObjectValue() : null);, +		if (type != null && !type.isInstance(value)) {, +			throw new IllegalStateException("Cached value is not of required type [" + type.getName() + "]: " + value);, +		}, +		return (T) value;, +	}, +, +	@Override, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheCache.java, +	public <T> T get(Object key, Class<T> type) {, +		Object value = fromStoreValue(this.cache.get(key));, +		if (type != null && !type.isInstance(value)) {, +			throw new IllegalStateException("Cached value is not of required type [" + type.getName() + "]: " + value);, +		}, +		return (T) value;, +	}, +, +	@Override, +	@SuppressWarnings("unchecked"), +++ b/spring-context-support/src/main/java/org/springframework/cache/transaction/TransactionAwareCacheDecorator.java, + * Copyright 2002-2013 the original author or authors., +	public <T> T get(Object key, Class<T> type) {, +		return this.targetCache.get(key, type);, +	}, +, +	@Override, +++ b/spring-context-support/src/test/java/org/springframework/cache/ehcache/EhCacheCacheTests.java]