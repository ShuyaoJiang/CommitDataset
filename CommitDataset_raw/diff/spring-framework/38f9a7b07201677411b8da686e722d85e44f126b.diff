[+++ b/spring-core/src/main/java/org/springframework/core/io/FileSystemResource.java, +import java.nio.file.Path;, +import org.springframework.lang.Nullable;, + * {@link Resource} implementation for {@code java.io.File} and, + * {@code java.nio.file.Path} handles with a file system target., + * <p>Note: As of Spring Framework 5.0, this {@link Resource} implementation uses, + * NIO.2 API for read/write interactions. As of 5.1, it may be constructed with a, + * {@link java.nio.file.Path} handle in which case it will perform all file system, + * interactions via NIO.2, only resorting to {@link File} on {@link #getFile()}., + * @see #FileSystemResource(File), + * @see #FileSystemResource(Path), +	@Nullable, +	private final File file;, +, +	private final Path filePath;, +, +, +	/**, +	 * Create a new {@code FileSystemResource} from a file path., +	 * <p>Note: When building relative resources via {@link #createRelative},, +	 * it makes a difference whether the specified resource base path here, +	 * ends with a slash or not. In the case of "C:/dir1/", relative paths, +	 * will be built underneath that root: e.g. relative path "dir2" ->, +	 * "C:/dir1/dir2". In the case of "C:/dir1", relative paths will apply, +	 * at the same directory level: relative path "dir2" -> "C:/dir2"., +	 * @param path a file path, +	 * @see #FileSystemResource(Path), +	 */, +	public FileSystemResource(String path) {, +		Assert.notNull(path, "Path must not be null");, +		this.path = StringUtils.cleanPath(path);, +		this.file = new File(path);, +		this.filePath = this.file.toPath();, +	}, +	 * @see #FileSystemResource(Path), +	 * @see #getFile(), +		this.file = file;, +		this.filePath = file.toPath();, +	 * Create a new {@code FileSystemResource} from a {@link Path} handle., +	 * <p>In contrast to {@link PathResource}, this variant strictly follows the, +	 * general {@link FileSystemResource} conventions, in particular in terms of, +	 * path cleaning and {@link #createRelative(String)} handling., +	 * @param filePath a Path handle to a file, +	 * @since 5.1, +	 * @see #FileSystemResource(File), +	 * @see PathResource, +	public FileSystemResource(Path filePath) {, +		Assert.notNull(filePath, "Path must not be null");, +		this.filePath = filePath;, +		this.file = null;, +		this.path = StringUtils.cleanPath(filePath.toString());, +		return (this.file != null ? this.file.exists() : Files.exists(this.filePath));, +		return (this.file != null ? this.file.canRead() && !this.file.isDirectory() :, +				Files.isReadable(this.filePath) && !Files.isDirectory(this.filePath));, +			return Files.newInputStream(this.filePath);, +		return (this.file != null ? this.file.canWrite() && !this.file.isDirectory() :, +				Files.isWritable(this.filePath) && !Files.isDirectory(this.filePath));, +		return Files.newOutputStream(this.filePath);, +		return (this.file != null ? this.file.toURI().toURL() : this.filePath.toUri().toURL());, +		return (this.file != null ? this.file.toURI() : this.filePath.toUri());, +		return (this.file != null ? this.file : this.filePath.toFile());, +			return FileChannel.open(this.filePath, StandardOpenOption.READ);, +		return FileChannel.open(this.filePath, StandardOpenOption.WRITE);, +		return (this.file != null ? this.file.length() : Files.size(this.filePath));, +		return (this.file != null ? this.file.getName() : this.filePath.getFileName().toString());, +		return "file [" + (this.file != null ? this.file.getAbsolutePath() : this.filePath.toAbsolutePath()) + "]";, +++ b/spring-core/src/main/java/org/springframework/core/io/FileSystemResource.java, +import java.nio.file.Path;, +import org.springframework.lang.Nullable;, + * {@link Resource} implementation for {@code java.io.File} and, + * {@code java.nio.file.Path} handles with a file system target., + * <p>Note: As of Spring Framework 5.0, this {@link Resource} implementation uses, + * NIO.2 API for read/write interactions. As of 5.1, it may be constructed with a, + * {@link java.nio.file.Path} handle in which case it will perform all file system, + * interactions via NIO.2, only resorting to {@link File} on {@link #getFile()}., + * @see #FileSystemResource(File), + * @see #FileSystemResource(Path), +	@Nullable, +	private final File file;, +, +	private final Path filePath;, +, +, +	/**, +	 * Create a new {@code FileSystemResource} from a file path., +	 * <p>Note: When building relative resources via {@link #createRelative},, +	 * it makes a difference whether the specified resource base path here, +	 * ends with a slash or not. In the case of "C:/dir1/", relative paths, +	 * will be built underneath that root: e.g. relative path "dir2" ->, +	 * "C:/dir1/dir2". In the case of "C:/dir1", relative paths will apply, +	 * at the same directory level: relative path "dir2" -> "C:/dir2"., +	 * @param path a file path, +	 * @see #FileSystemResource(Path), +	 */, +	public FileSystemResource(String path) {, +		Assert.notNull(path, "Path must not be null");, +		this.path = StringUtils.cleanPath(path);, +		this.file = new File(path);, +		this.filePath = this.file.toPath();, +	}]