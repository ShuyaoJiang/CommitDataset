[+++ b/src/asciidoc/core-expressions.adoc, +	Expression exp = parser.parseExpression("**'Hello World'**");, +`EvaluationException` when calling `parser.parseExpression` and `exp.getValue`, +As an example of method invocation, we call the `concat` method on the string literal., +	Expression exp = parser.parseExpression("**'Hello World'.concat('!')**");, +As an example of calling a JavaBean property, the String property `Bytes` can be called, +	Expression exp = parser.parseExpression("**'Hello World'.bytes**");, +SpEL also supports nested properties using standard _dot_ notation, i.e., +	Expression exp = parser.parseExpression("**'Hello World'.bytes.length**");, +	Expression exp = parser.parseExpression("**new String('hello world').toUpperCase()**");, +In the last line, the value of the string variable `name` will be set to "Nikola Tesla"., +	Expression exp = parser.parseExpression("name == 'Nikola Tesla'");, +caching `java.lang.reflect.Method`, `java.lang.reflect.Field`, and, +`java.lang.reflect.Constructor` instances for increased performance., +object controls the behavior of some of the expression components. For example, if, +enum values (`off`, `immediate`, or `mixed`)., +				@Value("#{systemProperties['user.country']}") String defaultLocale) {, +	String helloWorld = (String) parser.parseExpression("'Hello World'").getValue();, +	Inventor pupin = parser.parseExpression("Officers['president']").getValue(, +	String city = parser.parseExpression("Officers['president'].PlaceOfBirth.City").getValue(, +	parser.parseExpression("Officers['advisors'][0].PlaceOfBirth.Country").setValue(, +	List listOfLists = (List) parser.parseExpression("{{'a','b'},{'x','y'}}").getValue(context);, +	Map inventorInfo = (Map) parser.parseExpression("{name:'Nikola',dob:'10-July-1856'}").getValue(context);, +	Map mapOfMaps = (Map) parser.parseExpression("{name:{first:'Nikola',last:'Tesla'},dob:{day:10,month:'July',year:1856}}").getValue(context);, +	String c = parser.parseExpression("'abc'.substring(2, 3)").getValue(String.class);, +	boolean isMember = parser.parseExpression("isMember('Mihajlo Pupin')").getValue(, +	boolean trueValue = parser.parseExpression("'black' < 'block'").getValue(Boolean.class);, +			"'xyz' instanceof T(int)").getValue(Boolean.class);, +			"'5.00' matches '\^-?\\d+(\\.\\d{2})?$'").getValue(Boolean.class);, +			"'5.0067' matches '\^-?\\d+(\\.\\d{2})?$'").getValue(Boolean.class);, +	String expression = "isMember('Nikola Tesla') and isMember('Mihajlo Pupin')";, +	String expression = "isMember('Nikola Tesla') or isMember('Albert Einstein')";, +	String expression = "isMember('Nikola Tesla') and !isMember('Mihajlo Pupin')";, +			"'test' + ' ' + 'string'").getValue(String.class); // 'test string', +			"Name = 'Alexandar Seovic'").getValue(inventorContext, String.class);, +			"new org.spring.samples.spel.inventor.Inventor('Albert Einstein', 'German')"), +				'Albert Einstein', 'German'))").getValue(societyContext);, +		"#reverseString('hello')").getValue(context, String.class);, +			"false ? 'trueExp' : 'falseExp'").getValue(String.class);, +	expression = "isMember(#queryName)? #queryName + ' is a member of the ' " +, +			"+ Name + ' Society' : #queryName + ' is not a member of the ' + Name + ' Society'";, +	String name = parser.parseExpression("null?:'Unknown'").getValue(String.class);, +	String name = parser.parseExpression("Name?:'Elvis Presley'").getValue(context, String.class);, +	name = parser.parseExpression("Name?:'Elvis Presley'").getValue(context, String.class);, +	@Value("#{systemProperties['pop3.port'] ?: 25}"), +			"Members.?[Nationality == 'Serbian']").getValue(societyContext);]