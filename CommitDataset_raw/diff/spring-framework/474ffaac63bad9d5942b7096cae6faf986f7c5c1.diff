[+++ b/spring-framework-reference/src/beans.xml, +    <title>Introduction to the Spring IoC container and beans</title>, +    <para>This chapter covers the Spring Framework implementation of the, +    <literal>org.springframework.context</literal> packages are the basis for, +    Spring Framework's IoC container. The <interfacename><ulink, +    objects of any nature. <literal><ulink, +    is a sub-interface of <interfacename>BeanFactory.</interfacename> It adds, +    easier integration with Spring's AOP features; message resource handling, +    (for use in internationalization, event propagation, and application-layer, +    in internationalization); event publication; and application-layer, +    specific contexts such as the, +    <interfacename>WebApplicationContext</interfacename> for use in web, +    applications.</para>, +    the configuration framework and basic functionality, and the, +    enterprise-specific functionality. The, +    information on using the <classname>BeanFactory</classname> instead of the, +    <classname>ApplicationContext</classname> refer to <xref, +    <para>In Spring, the objects that form the backbone of your application, +    and that are managed by the Spring IoC <firstterm>container</firstterm>, +    are called <firstterm>beans</firstterm>. A bean is an object that is, +    instantiated, assembled, and otherwise managed by a Spring IoC container., +    Otherwise, a bean is simply one of many objects in your application., +    Beans, and the <firstterm>dependencies</firstterm> between them, are, +    reflected in the <firstterm>configuration metadata</firstterm> used by a, +    container.</para>, +, +    <title>The Spring IoC container</title>, +    represents the Spring IoC container and is responsible for instantiating,, +    configuring, and assembling the aforementioned beans. The container gets, +    its instructions on what objects to instantiate, configure, and assemble, +    by reading configuration metadata. The configuration metadata is, +    represented in XML, Java annotations, or Java code. It allows you to, +    express the objects that compose your application and the rich, +    interdependencies between such objects.</para>, +    <para>Some implementations of the, +    <classname>ApplicationContext</classname> interface are supplied, +    out-of-the-box with Spring. In standalone applications it is common to, +    create an instance of <ulink, +    This is because XML is the traditional format for defining configuration, +    metadata. To support the mixing of different configuration metadata, +    formats, use the <ulink, +    <para>In most application scenarios, explicit user code is not required to, +    instantiate one or more instances of a Spring IoC container. For example,, +    in a web application scenario, a simple eight (or so) lines of boilerplate, +    J2EE web descriptor XML in the <literal>web.xml</literal> file of the, +    application will typically suffice (see <xref, +    linkend="context-create" />).</para>, +    <para>The following diagram is a high-level view of how Spring works. Your, +    application classes are combined with configuration metadata so that after, +    the <classname>ApplicationContext</classname> is created and initialized,, +    you have a fully configured and executable system or application.</para>, +      <para>As the preceding diagram shows, the Spring IoC container consumes, +      a form of <emphasis>configuration metadata</emphasis>; this, +      configuration metadata represents how you as an application developer, +      tell the Spring container to instantiate, configure, and assemble the, +      objects in your application<emphasis>.</emphasis></para>, +      <para>Configuration metadata is traditionally supplied in a simple and, +      intuitive XML format, which is what most of this chapter uses to convey, +      key concepts and features of the Spring IoC container.</para>, +        <para>XML-based metadata is <emphasis>not</emphasis> the only allowed, +        form of configuration metadata. The Spring IoC container itself is, +        <emphasis>totally</emphasis> decoupled from the format in which this, +        configuration metadata is actually written.</para>, +      <para>For information about using other forms of metadata with the, +      Spring container, see:</para>, +          configuration</link>: Spring 2.5 introduced support for, +          annotation-based configuration metadata.</para>, +          configuration</link>: Starting with Spring 3.0, many features, +          provided by the <ulink, +          project</ulink> became part of the core Spring Framework. Thus you, +          can define beans external to your application classes by using Java, +          rather than XML files. To use these new features, see the, +          <interfacename>@Configuration</interfacename>, <interfacename>@Bean,, +          @Import</interfacename> and, +          <interfacename>@DependsOn</interfacename> annotations.</para>, +      <para>Spring configuration consists of at least one and typically more, +      than one bean definition that the container must manage. XML-based, +      configuration metadata shows these beans configured as, +      <literal>&lt;bean/&gt;</literal> elements inside a top-level, +      <literal>&lt;beans/&gt;</literal> element.</para>, +      <para>These bean definitions correspond to the actual objects that make, +      up your application. Typically you define service layer objects, data, +      access objects (DAOs), presentation objects such as Struts, +      <interfacename>Action</interfacename> instances, infrastructure objects, +      such as Hibernate <interfacename>SessionFactories</interfacename>, JMS, +      <interfacename>Queues</interfacename>, and so forth. Typically one does, +      not configure fine-grained domain objects in the container, because it, +      is usually the responsibility of DAOs and business logic to create and, +      load domain objects. However, you can use Spring's integration with, +      AspectJ to configure objects that have been created outside the control, +      of an IoC container. See <link linkend="aop-atconfigurable">Using, +      AspectJ to dependency inject domain objects with Spring</link>.</para>, +      <para>The following example shows the basic structure of XML-based, +      configuration metadata:</para>, +      classname. The value of the id attribute refers to collaborating, +      objects. The XML for referring to collaborating objects is not shown in, +      this example; see <link linkend="beans-dependencies">Dependencies</link>, +      for more information.</para>, +      <para>Instantiating a Spring IoC container is straightforward. The, +      location path or paths supplied to an]