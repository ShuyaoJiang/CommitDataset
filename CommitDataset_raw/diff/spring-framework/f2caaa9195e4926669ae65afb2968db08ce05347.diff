[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java, +					.then(exchange.getMultipartData()), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java, +					.then(exchange.getMultipartData()), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolver.java, +		registrar.add(new RequestPartMethodArgumentResolver(beanFactory, reactiveRegistry, false));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java, +					.then(exchange.getMultipartData()), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolver.java, +		registrar.add(new RequestPartMethodArgumentResolver(beanFactory, reactiveRegistry, false));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestParamMapMethodArgumentResolver.java, +import org.springframework.core.ResolvableType;, +import org.springframework.http.codec.multipart.Part;, + * @author Sebastien Deleuze, +		ResolvableType paramType = ResolvableType.forType(methodParameter.getGenericParameterType());, +		boolean isMultiValueMap = MultiValueMap.class.isAssignableFrom(paramType.getRawClass());, +, +		if (paramType.getGeneric(1).getRawClass() == Part.class) {, +			MultiValueMap<String, Part> requestParts = exchange.getMultipartData().subscribe().peek();, +			Assert.notNull(requestParts, "Expected multipart data (if any) to be parsed.");, +			return Optional.of(isMultiValueMap ? requestParts : requestParts.toSingleValueMap());, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java, +					.then(exchange.getMultipartData()), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolver.java, +		registrar.add(new RequestPartMethodArgumentResolver(beanFactory, reactiveRegistry, false));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestParamMapMethodArgumentResolver.java, +import org.springframework.core.ResolvableType;, +import org.springframework.http.codec.multipart.Part;, + * @author Sebastien Deleuze, +		ResolvableType paramType = ResolvableType.forType(methodParameter.getGenericParameterType());, +		boolean isMultiValueMap = MultiValueMap.class.isAssignableFrom(paramType.getRawClass());, +, +		if (paramType.getGeneric(1).getRawClass() == Part.class) {, +			MultiValueMap<String, Part> requestParts = exchange.getMultipartData().subscribe().peek();, +			Assert.notNull(requestParts, "Expected multipart data (if any) to be parsed.");, +			return Optional.of(isMultiValueMap ? requestParts : requestParts.toSingleValueMap());, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestParamMethodArgumentResolver.java, +import org.springframework.http.codec.multipart.Part;, +		List<?> paramValues = parameter.getParameter().getType() == Part.class ? getMultipartData(exchange).get(name) : getRequestParams(exchange).get(name);, +	private MultiValueMap<String, Part> getMultipartData(ServerWebExchange exchange) {, +		MultiValueMap<String, Part> params = exchange.getMultipartData().subscribe().peek();, +		Assert.notNull(params, "Expected multipart data (if any) to be parsed.");, +		return params;, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java, +					.then(exchange.getMultipartData()), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolver.java, +		registrar.add(new RequestPartMethodArgumentResolver(beanFactory, reactiveRegistry, false));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestParamMapMethodArgumentResolver.java, +import org.springframework.core.ResolvableType;, +import org.springframework.http.codec.multipart.Part;, + * @author Sebastien Deleuze, +		ResolvableType paramType = ResolvableType.forType(methodParameter.getGenericParameterType());, +		boolean isMultiValueMap = MultiValueMap.class.isAssignableFrom(paramType.getRawClass());, +, +		if (paramType.getGeneric(1).getRawClass() == Part.class) {, +			MultiValueMap<String, Part> requestParts = exchange.getMultipartData().subscribe().peek();, +			Assert.notNull(requestParts, "Expected multipart data (if any) to be parsed.");, +			return Optional.of(isMultiValueMap ? requestParts : requestParts.toSingleValueMap());, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestParamMethodArgumentResolver.java, +import org.springframework.http.codec.multipart.Part;, +		List<?> paramValues = parameter.getParameter().getType() == Part.class ? getMultipartData(exchange).get(name) : getRequestParams(exchange).get(name);, +	private MultiValueMap<String, Part> getMultipartData(ServerWebExchange exchange) {, +		MultiValueMap<String, Part> params = exchange.getMultipartData().subscribe().peek();, +		Assert.notNull(params, "Expected multipart data (if any) to be parsed.");, +		return params;, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestPartMethodArgumentResolver.java, +/*, + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.reactive.result.method.annotation;, +, +import java.util.List;, +import java.util.Map;, +import java.util.Optional;, +, +import org.springframework.beans.BeanUtils;, +import org.springframework.beans.factory.config.ConfigurableBeanFactory;, +import org.springframework.core.MethodParameter;, +import org.springframework.core.ReactiveAdapterRegistry;, +import org.springframework.core.convert.converter.Converter;]