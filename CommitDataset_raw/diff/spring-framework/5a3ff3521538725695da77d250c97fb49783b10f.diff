[+++ b/spring-web/src/main/java/org/springframework/web/method/annotation/MapMethodProcessor.java, + * Copyright 2002-2019 the original author or authors., + * {@code @ResponseBody}. As of 5.2 this resolver returns false if the, + * parameter is annotated., +		return Map.class.isAssignableFrom(parameter.getParameterType()) &&, +				parameter.getParameterAnnotations().length == 0;, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/MapMethodProcessor.java, + * Copyright 2002-2019 the original author or authors., + * {@code @ResponseBody}. As of 5.2 this resolver returns false if the, + * parameter is annotated., +		return Map.class.isAssignableFrom(parameter.getParameterType()) &&, +				parameter.getParameterAnnotations().length == 0;, +++ b/spring-web/src/test/java/org/springframework/web/method/annotation/MapMethodProcessorTests.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.web.bind.annotation.RequestBody;, +import org.springframework.web.bind.annotation.RequestMapping;, +import org.springframework.web.method.ResolvableMethod;, + * Test fixture with, + * {@link org.springframework.web.method.annotation.MapMethodProcessor}., +	private final ResolvableMethod resolvable =, +			ResolvableMethod.on(getClass()).annotPresent(RequestMapping.class).build();, +, +, +		this.processor = new MapMethodProcessor();, +		this.mavContainer = new ModelAndViewContainer();, +		this.webRequest = new ServletWebRequest(new MockHttpServletRequest());, +, +		assertTrue(this.processor.supportsParameter(, +				this.resolvable.annotNotPresent().arg(Map.class, String.class, Object.class)));, +		assertFalse(this.processor.supportsParameter(, +				this.resolvable.annotPresent(RequestBody.class).arg(Map.class, String.class, Object.class)));, +		assertTrue(this.processor.supportsReturnType(this.resolvable.returnType()));, +		MethodParameter param = this.resolvable.annotNotPresent().arg(Map.class, String.class, Object.class);, +		assertSame(this.mavContainer.getModel(),, +				this.processor.resolveArgument(param, this.mavContainer, this.webRequest, null));, +		this.mavContainer.addAttribute("attr1", "value1");, +		this.processor.handleReturnValue(, +				returnValue , this.resolvable.returnType(), this.mavContainer, this.webRequest);, +, +	@RequestMapping, +	private Map<String, Object> handle(, +			Map<String, Object> map,, +			@RequestBody Map<String, Object> annotMap) {, +, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/MapMethodProcessor.java, + * Copyright 2002-2019 the original author or authors., + * {@code @ResponseBody}. As of 5.2 this resolver returns false if the, + * parameter is annotated., +		return Map.class.isAssignableFrom(parameter.getParameterType()) &&, +				parameter.getParameterAnnotations().length == 0;, +++ b/spring-web/src/test/java/org/springframework/web/method/annotation/MapMethodProcessorTests.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.web.bind.annotation.RequestBody;, +import org.springframework.web.bind.annotation.RequestMapping;, +import org.springframework.web.method.ResolvableMethod;, + * Test fixture with, + * {@link org.springframework.web.method.annotation.MapMethodProcessor}., +	private final ResolvableMethod resolvable =, +			ResolvableMethod.on(getClass()).annotPresent(RequestMapping.class).build();, +, +, +		this.processor = new MapMethodProcessor();, +		this.mavContainer = new ModelAndViewContainer();, +		this.webRequest = new ServletWebRequest(new MockHttpServletRequest());, +, +		assertTrue(this.processor.supportsParameter(, +				this.resolvable.annotNotPresent().arg(Map.class, String.class, Object.class)));, +		assertFalse(this.processor.supportsParameter(, +				this.resolvable.annotPresent(RequestBody.class).arg(Map.class, String.class, Object.class)));, +		assertTrue(this.processor.supportsReturnType(this.resolvable.returnType()));, +		MethodParameter param = this.resolvable.annotNotPresent().arg(Map.class, String.class, Object.class);, +		assertSame(this.mavContainer.getModel(),, +				this.processor.resolveArgument(param, this.mavContainer, this.webRequest, null));, +		this.mavContainer.addAttribute("attr1", "value1");, +		this.processor.handleReturnValue(, +				returnValue , this.resolvable.returnType(), this.mavContainer, this.webRequest);, +, +	@RequestMapping, +	private Map<String, Object> handle(, +			Map<String, Object> map,, +			@RequestBody Map<String, Object> annotMap) {, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ModelArgumentResolver.java, + * Copyright 2002-2019 the original author or authors., + * <p>A Map return value can be interpreted in more than one ways depending, + * on the presence of annotations like {@code @ModelAttribute} or, + * {@code @ResponseBody}. As of 5.2 this resolver returns false if a, + * parameter of type {@code Map} is also annotated., + *, +	public boolean supportsParameter(MethodParameter param) {, +		return checkParameterTypeNoReactiveWrapper(param, type ->, +				Model.class.isAssignableFrom(type) ||, +						(Map.class.isAssignableFrom(type) && param.getParameterAnnotations().length == 0));, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/MapMethodProcessor.java, + * Copyright 2002-2019 the original author or authors., + * {@code @ResponseBody}. As of 5.2 this resolver returns false if the, + * parameter is annotated., +		return Map.class.isAssignableFrom(parameter.getParameterType()) &&, +				parameter.getParameterAnnotations().length == 0;, +++ b/spring-web/src/test/java/org/springframework/web/method/annotation/MapMethodProcessorTests.java]