[+++ b/spring-webflux/src/main/kotlin/org/springframework/web/reactive/function/server/RouterFunctionDsl.kt, +import org.springframework.http.HttpStatus, +import java.net.URI, +	 * Create a builder with the status code and headers of the given response., +	 * @param other the response to copy the status and headers from, +	 * @return the created builder, +	 * @since 5.1, +	 */, +	fun from(other: ServerResponse): ServerResponse.BodyBuilder =, +			ServerResponse.from(other), +, +	/**, +	 * Create a builder with the given HTTP status., +	 * @param status the response status, +	 * @return the created builder, +	 * @since 5.1, +	 */, +	fun status(status: HttpStatus): ServerResponse.BodyBuilder =, +			ServerResponse.status(status), +, +	/**, +	 * Create a builder with the given HTTP status., +	 * @param status the response status, +	 * @return the created builder, +	 * @since 5.1, +	 */, +	fun status(status: Int): ServerResponse.BodyBuilder =, +			ServerResponse.status(status), +, +	/**, +	 * Create a builder with the status set to [200 OK][HttpStatus.OK]., +	 * @return the created builder, +	 * @since 5.1, +	 */, +	fun ok(): ServerResponse.BodyBuilder =, +			ServerResponse.ok(), +, +	/**, +	 * Create a new builder with a [201 Created][HttpStatus.CREATED] status, +	 * and a location header set to the given URI., +	 * @param location the location URI, +	 * @return the created builder, +	 * @since 5.1, +	 */, +	fun created(location: URI): ServerResponse.BodyBuilder =, +			ServerResponse.created(location), +, +	/**, +	 * Create a builder with an [202 Accepted][HttpStatus.ACCEPTED] status., +	 * @return the created builder, +	 * @since 5.1, +	 */, +	fun accepted(): ServerResponse.BodyBuilder =, +			ServerResponse.accepted(), +, +	/**, +	 * Create a builder with a [204 No Content][HttpStatus.NO_CONTENT] status., +	 * @return the created builder, +	 * @since 5.1, +	 */, +	fun noContent(): ServerResponse.HeadersBuilder<*> =, +			ServerResponse.noContent(), +, +	/**, +	 * Create a builder with a [303 See Other][HttpStatus.SEE_OTHER], +	 * status and a location header set to the given URI., +	 * @param location the location URI, +	 * @return the created builder, +	 * @since 5.1, +	 */, +	fun seeOther(location: URI): ServerResponse.BodyBuilder =, +			ServerResponse.seeOther(location), +, +	/**, +	 * Create a builder with a [307 Temporary Redirect][HttpStatus.TEMPORARY_REDIRECT], +	 * status and a location header set to the given URI., +	 * @param location the location URI, +	 * @return the created builder, +	 * @since 5.1, +	 */, +	fun temporaryRedirect(location: URI): ServerResponse.BodyBuilder =, +			ServerResponse.temporaryRedirect(location), +, +	/**, +	 * Create a builder with a [308 Permanent Redirect][HttpStatus.PERMANENT_REDIRECT], +	 * status and a location header set to the given URI., +	 * @param location the location URI, +	 * @return the created builder, +	 * @since 5.1, +	 */, +	fun permanentRedirect(location: URI): ServerResponse.BodyBuilder =, +			ServerResponse.permanentRedirect(location), +, +	/**, +	 * Create a builder with a [400 Bad Request][HttpStatus.BAD_REQUEST] status., +	 * @return the created builder, +	 * @since 5.1, +	 */, +	fun badRequest(): ServerResponse.BodyBuilder =, +			ServerResponse.badRequest()]