[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +			Object beanInstance = descriptor.resolveCandidate(candidateName, requiredType, this);, +			candidates.put(candidateName, (beanInstance instanceof NullBean ? null : beanInstance));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +			Object beanInstance = descriptor.resolveCandidate(candidateName, requiredType, this);, +			candidates.put(candidateName, (beanInstance instanceof NullBean ? null : beanInstance));, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java, +	public void testConstructorResourceInjectionWithCollectionAndNullFromFactoryBean() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		bf.registerBeanDefinition("annotatedBean", new RootBeanDefinition(, +				ConstructorsCollectionResourceInjectionBean.class));, +		TestBean tb = new TestBean();, +		bf.registerSingleton("testBean", tb);, +		bf.registerBeanDefinition("nestedTestBean1", new RootBeanDefinition(NullNestedTestBeanFactoryBean.class));, +		NestedTestBean ntb2 = new NestedTestBean();, +		bf.registerSingleton("nestedTestBean2", ntb2);, +, +		ConstructorsCollectionResourceInjectionBean bean = (ConstructorsCollectionResourceInjectionBean) bf.getBean("annotatedBean");, +		assertNull(bean.getTestBean3());, +		assertSame(tb, bean.getTestBean4());, +		assertEquals(2, bean.getNestedTestBeans().size());, +		assertNull(bean.getNestedTestBeans().get(0));, +		assertSame(ntb2, bean.getNestedTestBeans().get(1));, +		bf.destroySingletons();, +	}, +, +	@Test, +		RootBeanDefinition tb2 = new RootBeanDefinition(NullFactoryMethods.class);, +		tb2.setFactoryMethodName("createTestBean");, +		bf.registerBeanDefinition("testBean2", tb2);, +		assertSame(tb1, bean.getTestBeanMap().get("testBean1"));, +		assertNull(bean.getTestBeanMap().get("testBean2"));, +		assertSame(tb1, bean.getTestBeanMap().get("testBean1"));, +		assertNull(bean.getTestBeanMap().get("testBean2"));]