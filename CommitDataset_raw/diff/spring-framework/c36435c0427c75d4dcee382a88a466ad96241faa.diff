[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java, +	private final List<HandlerInterceptor> handlerInterceptors = new ArrayList<HandlerInterceptor>();, +	private final List<MappedInterceptor> detectedMappedInterceptors = new ArrayList<MappedInterceptor>();, +		detectMappedInterceptors(this.detectedMappedInterceptors);, +				this.handlerInterceptors.add(adaptInterceptor(interceptor));, +		this.handlerInterceptors.addAll(this.detectedMappedInterceptors);, +		this.interceptors.clear();, +		List<HandlerInterceptor> adaptedInterceptors = new ArrayList<HandlerInterceptor>();, +		for (HandlerInterceptor interceptor : this.handlerInterceptors) {, +			if (!(interceptor instanceof MappedInterceptor)) {, +				adaptedInterceptors.add(interceptor);, +			}, +		}, +		int count = adaptedInterceptors.size();, +		return (count > 0 ? adaptedInterceptors.toArray(new HandlerInterceptor[count]) : null);, +		List<MappedInterceptor> mappedInterceptors = new ArrayList<MappedInterceptor>();, +		for (HandlerInterceptor interceptor : this.handlerInterceptors) {, +			if (interceptor instanceof MappedInterceptor) {, +				mappedInterceptors.add((MappedInterceptor) interceptor);, +			}, +		}, +		int count = mappedInterceptors.size();, +		return (count > 0 ? mappedInterceptors.toArray(new MappedInterceptor[count]) : null);, +	 * {@link MappedInterceptor}s matching to the current request URL. Interceptors, +	 * are added in the order they were registered. Subclasses may override this, +	 * in order to extend/rearrange the list of interceptors., +		for (HandlerInterceptor interceptor : this.handlerInterceptors) {, +			if (interceptor instanceof MappedInterceptor) {, +				MappedInterceptor mappedInterceptor = (MappedInterceptor) interceptor;, +			else {, +				chain.addInterceptor(interceptor);, +			}, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java, +	private final List<HandlerInterceptor> handlerInterceptors = new ArrayList<HandlerInterceptor>();, +	private final List<MappedInterceptor> detectedMappedInterceptors = new ArrayList<MappedInterceptor>();, +		detectMappedInterceptors(this.detectedMappedInterceptors);, +				this.handlerInterceptors.add(adaptInterceptor(interceptor));, +		this.handlerInterceptors.addAll(this.detectedMappedInterceptors);, +		this.interceptors.clear();, +		List<HandlerInterceptor> adaptedInterceptors = new ArrayList<HandlerInterceptor>();, +		for (HandlerInterceptor interceptor : this.handlerInterceptors) {, +			if (!(interceptor instanceof MappedInterceptor)) {, +				adaptedInterceptors.add(interceptor);, +			}, +		}, +		int count = adaptedInterceptors.size();, +		return (count > 0 ? adaptedInterceptors.toArray(new HandlerInterceptor[count]) : null);, +		List<MappedInterceptor> mappedInterceptors = new ArrayList<MappedInterceptor>();, +		for (HandlerInterceptor interceptor : this.handlerInterceptors) {, +			if (interceptor instanceof MappedInterceptor) {, +				mappedInterceptors.add((MappedInterceptor) interceptor);, +			}, +		}, +		int count = mappedInterceptors.size();, +		return (count > 0 ? mappedInterceptors.toArray(new MappedInterceptor[count]) : null);, +	 * {@link MappedInterceptor}s matching to the current request URL. Interceptors, +	 * are added in the order they were registered. Subclasses may override this, +	 * in order to extend/rearrange the list of interceptors., +		for (HandlerInterceptor interceptor : this.handlerInterceptors) {, +			if (interceptor instanceof MappedInterceptor) {, +				MappedInterceptor mappedInterceptor = (MappedInterceptor) interceptor;, +			else {, +				chain.addInterceptor(interceptor);, +			}, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/MappedInterceptor.java, + * Copyright 2002-2015 the original author or authors., +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +, +import org.springframework.web.servlet.ModelAndView;, + * Contains and delegates calls to a {@link HandlerInterceptor} along with, + * include (and optionally exclude) path patterns to which the interceptor should apply., + * Also provides matching logic to test if the interceptor applies to a given request path., + * @author Brian Clozel, +public final class MappedInterceptor implements HandlerInterceptor {, +	@Override, +	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {, +		return this.interceptor.preHandle(request, response, handler);, +	}, +, +	@Override, +	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {, +		this.interceptor.postHandle(request, response, handler, modelAndView);, +	}, +, +	@Override, +	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {, +		this.interceptor.afterCompletion(request, response, handler, ex);, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java, +	private final List<HandlerInterceptor> handlerInterceptors = new ArrayList<HandlerInterceptor>();, +	private final List<MappedInterceptor> detectedMappedInterceptors = new ArrayList<MappedInterceptor>();, +		detectMappedInterceptors(this.detectedMappedInterceptors);, +				this.handlerInterceptors.add(adaptInterceptor(interceptor));, +		this.handlerInterceptors.addAll(this.detectedMappedInterceptors);, +		this.interceptors.clear();, +		List<HandlerInterceptor> adaptedInterceptors = new ArrayList<HandlerInterceptor>();]