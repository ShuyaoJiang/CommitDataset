[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.util.CollectionUtils;, + * A subclass of {@code WebMvcConfigurationSupport} that detects and delegates, +		if (!CollectionUtils.isEmpty(configurers)) {, +	}, +	protected void extendHandlerExceptionResolvers(List<HandlerExceptionResolver> exceptionResolvers) {, +		this.configurers.extendHandlerExceptionResolvers(exceptionResolvers);, +	}, +, +	@Override, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.util.CollectionUtils;, + * A subclass of {@code WebMvcConfigurationSupport} that detects and delegates, +		if (!CollectionUtils.isEmpty(configurers)) {, +	}, +	protected void extendHandlerExceptionResolvers(List<HandlerExceptionResolver> exceptionResolvers) {, +		this.configurers.extendHandlerExceptionResolvers(exceptionResolvers);, +	}, +, +	@Override, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.java, +	 * A hook for extending or modifying the list of {@link HandlerExceptionResolver}s, +	 * after it has been configured. This may be useful for example to allow default, +	 * resolvers to be registered and then insert a custom one through this method., +	 * @param exceptionResolvers the list of configured resolvers to extend, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.util.CollectionUtils;, + * A subclass of {@code WebMvcConfigurationSupport} that detects and delegates, +		if (!CollectionUtils.isEmpty(configurers)) {, +	}, +	protected void extendHandlerExceptionResolvers(List<HandlerExceptionResolver> exceptionResolvers) {, +		this.configurers.extendHandlerExceptionResolvers(exceptionResolvers);, +	}, +, +	@Override, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.java, +	 * A hook for extending or modifying the list of {@link HandlerExceptionResolver}s, +	 * after it has been configured. This may be useful for example to allow default, +	 * resolvers to be registered and then insert a custom one through this method., +	 * @param exceptionResolvers the list of configured resolvers to extend, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerComposite.java, +			delegate.extendHandlerExceptionResolvers(exceptionResolvers);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfiguration.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.util.CollectionUtils;, + * A subclass of {@code WebMvcConfigurationSupport} that detects and delegates, +		if (!CollectionUtils.isEmpty(configurers)) {, +	}, +	protected void extendHandlerExceptionResolvers(List<HandlerExceptionResolver> exceptionResolvers) {, +		this.configurers.extendHandlerExceptionResolvers(exceptionResolvers);, +	}, +, +	@Override, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.java, +	 * A hook for extending or modifying the list of {@link HandlerExceptionResolver}s, +	 * after it has been configured. This may be useful for example to allow default, +	 * resolvers to be registered and then insert a custom one through this method., +	 * @param exceptionResolvers the list of configured resolvers to extend, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurerComposite.java, +			delegate.extendHandlerExceptionResolvers(exceptionResolvers);, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/DelegatingWebMvcConfigurationTests.java, +import java.util.Collections;, +, +		delegatingConfig.setConfigurers(Collections.singletonList(webMvcConfigurer));, +		delegatingConfig.setConfigurers(Collections.singletonList(webMvcConfigurer));, +		delegatingConfig.setConfigurers(Collections.singletonList(webMvcConfigurer));, +		delegatingConfig.setConfigurers(Collections.singletonList(webMvcConfigurer));]