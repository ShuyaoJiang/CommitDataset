[+++ b/spring-framework-reference/src/jdbc.xml, +          JdbcTemplate and NamedParameterJdbcTemplate. It also adds some, +          additional convenience around support for Java 5 varargs where this, +          was not possible in the JdbcTemplate due to backwards compatibility, +          reasons.</para>, +      used for testing and running unmodified JDBC code outside of a Java EE, +      container. A sub-package named, +      <literal>org.springfamework.jdbc.datasource.embedded</literal> provides, +      support for creating in-memory database instances using Java database, +      engines such as HSQL and H2.</para>, +          <programlisting language="java"><![CDATA[String lastName = this.jdbcTemplate.queryForObject(, +        "select last_name from t_actor where id = ?", , +        "select first_name, last_name from t_actor where id = ?",, +                actor.setLastName(rs.getString("last_name"));, +        "select first_name, last_name from t_actor",, +                actor.setLastName(rs.getString("last_name"));, +    return this.jdbcTemplate.query( "select first_name, last_name from t_actor", new ActorMapper());, +        actor.setLastName(rs.getString("last_name"));, +        "insert into t_actor (first_name, last_name) values (?, ?)", , +        "Leonor", "Watling");]]></programlisting>, +        "update t_actor set = ? where id = ?", , +        "Banjo", 5276L);]]></programlisting>, +        Long.valueOf(actorId));]]></programlisting>, +        Long.valueOf(unionId));]]></programlisting>, +        <para>The corresponding configuration might look like this.</para>, +        <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>, +<beans xmlns="http://www.springframework.org/schema/beans", +    xmlns:context="http://www.springframework.org/schema/context", +    xsi:schemaLocation=", +        http://www.springframework.org/schema/beans, +        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd, +        http://www.springframework.org/schema/context, +        http://www.springframework.org/schema/context/spring-context-2.5.xsd">, +    <bean id="corporateEventDao" class="com.example.JdbcCorporateEventDao">, +        <property name="dataSource" ref="dataSource"/>, +    </bean>, +    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">, +        <property name="driverClassName" value="${jdbc.driverClassName}"/>, +        <property name="url" value="${jdbc.url}"/>, +        <property name="username" value="${jdbc.username}"/>, +        <property name="password" value="${jdbc.password}"/>, +    </bean>, +    <context:property-placeholder location="jdbc.properties"/>, +</beans>]]></programlisting>, +, +        <para>An alternative to explicit configuration is to use the component, +        scanning and annotation support for dependency injection. In this case, +        we woul annotate the setter method for the, +        <classname>DataSource</classname> with the, +        <interfacename>@Autowired</interfacename> annotation.</para>, +, +        <para><programlisting language="java">public class JdbcCorporateEventDao implements CorporateEventDao {, +, +    private JdbcTemplate jdbcTemplate;, +, +    @Autowired, +    public void setDataSource(DataSource dataSource) {, +        <emphasis role="bold">this.jdbcTemplate = new JdbcTemplate(dataSource);</emphasis>, +    }, +, +    <lineannotation>// JDBC-backed implementations of the methods on the <interfacename>CorporateEventDao</interfacename> follow...</lineannotation>, +}</programlisting></para>, +, +        <para>The corresponding XML configuration file would look like the, +        following:</para>, +, +        <para><programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>, +<beans xmlns="http://www.springframework.org/schema/beans", +    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance", +    xmlns:context="http://www.springframework.org/schema/context", +    xsi:schemaLocation=", +        http://www.springframework.org/schema/beans, +        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd, +        http://www.springframework.org/schema/context, +        http://www.springframework.org/schema/context/spring-context-2.5.xsd">, +    , +    <!-- Scans within the base package of the application for @Components to configure as beans -->, +    <context:component-scan base-package="org.springframework.docs.test" />, +    , +    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">, +        <property name="driverClassName" value="${jdbc.driverClassName}"/>, +        <property name="url" value="${jdbc.url}"/>, +        <property name="username" value="${jdbc.username}"/>, +        <property name="password" value="${jdbc.password}"/>, +    </bean>, +, +    <context:property-placeholder location="jdbc.properties"/>, +, +</beans>]]></programlisting>If you are using Spring's, +        <classname>JdbcDaoSupport</classname> class, and your various, +        JDBC-backed DAO classes extend from it, then you inherit a, +        <methodname>setDataSource(..)</methodname> method for free from said, +        superclass. It is totally up to you as to whether or not you inherit, +        from said class, you certainly are not forced to. If you look at the, +        source for the <classname>JdbcDaoSupport</classname> class you will, +        see that there is not a whole lot to it... it is provided as a, +        convenience only.</para>, +    String sql = "select count(*) from T_ACTOR where first_name = :first_name";, +    String sql = "select count(*) from T_ACTOR where first_name = :first_name";, +    String sql = ]