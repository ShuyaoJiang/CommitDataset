[+++ b/org.springframework.web.servlet/src/test/java/org/springframework/mock/web/MockHttpServletResponse.java, + * Copyright 2002-2010 the original author or authors., +	private final List<String> includedUrls = new ArrayList<String>();, +		this.includedUrls.clear();, +		if (includedUrl != null) {, +			this.includedUrls.add(includedUrl);, +		}, +		int count = this.includedUrls.size();, +		if (count > 1) {, +			throw new IllegalStateException(, +					"More than 1 URL included - check getIncludedUrls instead: " + this.includedUrls);, +		}, +		return (count == 1 ? this.includedUrls.get(0) : null);, +	}, +, +	public void addIncludedUrl(String includedUrl) {, +		Assert.notNull(includedUrl, "Included URL must not be null");, +		this.includedUrls.add(includedUrl);, +	}, +, +	public List<String> getIncludedUrls() {, +		return this.includedUrls;, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/mock/web/MockHttpServletResponse.java, + * Copyright 2002-2010 the original author or authors., +	private final List<String> includedUrls = new ArrayList<String>();, +		this.includedUrls.clear();, +		if (includedUrl != null) {, +			this.includedUrls.add(includedUrl);, +		}, +		int count = this.includedUrls.size();, +		if (count > 1) {, +			throw new IllegalStateException(, +					"More than 1 URL included - check getIncludedUrls instead: " + this.includedUrls);, +		}, +		return (count == 1 ? this.includedUrls.get(0) : null);, +	}, +, +	public void addIncludedUrl(String includedUrl) {, +		Assert.notNull(includedUrl, "Included URL must not be null");, +		this.includedUrls.add(includedUrl);, +	}, +, +	public List<String> getIncludedUrls() {, +		return this.includedUrls;, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/mock/web/MockRequestDispatcher.java, + * Copyright 2002-2010 the original author or authors., +		getMockHttpServletResponse(response).addIncludedUrl(this.url);, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/mock/web/MockHttpServletResponse.java, + * Copyright 2002-2010 the original author or authors., +	private final List<String> includedUrls = new ArrayList<String>();, +		this.includedUrls.clear();, +		if (includedUrl != null) {, +			this.includedUrls.add(includedUrl);, +		}, +		int count = this.includedUrls.size();, +		if (count > 1) {, +			throw new IllegalStateException(, +					"More than 1 URL included - check getIncludedUrls instead: " + this.includedUrls);, +		}, +		return (count == 1 ? this.includedUrls.get(0) : null);, +	}, +, +	public void addIncludedUrl(String includedUrl) {, +		Assert.notNull(includedUrl, "Included URL must not be null");, +		this.includedUrls.add(includedUrl);, +	}, +, +	public List<String> getIncludedUrls() {, +		return this.includedUrls;, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/mock/web/MockRequestDispatcher.java, + * Copyright 2002-2010 the original author or authors., +		getMockHttpServletResponse(response).addIncludedUrl(this.url);, +++ b/org.springframework.web/src/test/java/org/springframework/mock/web/MockHttpServletResponse.java, + * Copyright 2002-2010 the original author or authors., +	private final List<String> includedUrls = new ArrayList<String>();, +		this.includedUrls.clear();, +		if (includedUrl != null) {, +			this.includedUrls.add(includedUrl);, +		}, +		int count = this.includedUrls.size();, +		if (count > 1) {, +			throw new IllegalStateException(, +					"More than 1 URL included - check getIncludedUrls instead: " + this.includedUrls);, +		}, +		return (count == 1 ? this.includedUrls.get(0) : null);, +	}, +, +	public void addIncludedUrl(String includedUrl) {, +		Assert.notNull(includedUrl, "Included URL must not be null");, +		this.includedUrls.add(includedUrl);, +	}, +, +	public List<String> getIncludedUrls() {, +		return this.includedUrls;, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/mock/web/MockHttpServletResponse.java, + * Copyright 2002-2010 the original author or authors., +	private final List<String> includedUrls = new ArrayList<String>();, +		this.includedUrls.clear();, +		if (includedUrl != null) {, +			this.includedUrls.add(includedUrl);]