[+++ b/spring-core/src/main/java/org/springframework/core/convert/support/CollectionToCollectionConverter.java, + * Copyright 2002-2014 the original author or authors., + * @author Juergen Hoeller, +, +, +, +		// Shortcut if possible..., +		boolean copyRequired = !targetType.getType().isInstance(source);, +			return source;, +		TypeDescriptor elementDesc = targetType.getElementTypeDescriptor();, +		if (elementDesc == null && !copyRequired) {, +			return source;, +		}, +, +		// At this point, we need a collection copy in any case, even if just for finding out about element copies..., +		if (elementDesc == null) {, +			target.addAll(sourceCollection);, +						sourceType.elementTypeDescriptor(sourceElement), elementDesc);, +, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/CollectionToCollectionConverter.java, + * Copyright 2002-2014 the original author or authors., + * @author Juergen Hoeller, +, +, +, +		// Shortcut if possible..., +		boolean copyRequired = !targetType.getType().isInstance(source);, +			return source;, +		TypeDescriptor elementDesc = targetType.getElementTypeDescriptor();, +		if (elementDesc == null && !copyRequired) {, +			return source;, +		}, +, +		// At this point, we need a collection copy in any case, even if just for finding out about element copies..., +		if (elementDesc == null) {, +			target.addAll(sourceCollection);, +						sourceType.elementTypeDescriptor(sourceElement), elementDesc);, +, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/CollectionToCollectionConverterTests.java, + * Copyright 2002-2014 the original author or authors., + * @author Stephane Nicoll, +, +, +	public void convertEmptyVector_shouldReturnEmptyArrayList() {, +		Vector<String> vector = new Vector<String>();, +		vector.add("Element");, +		testCollectionConversionToArrayList(vector);, +	}, +, +	@Test, +	public void convertNonEmptyVector_shouldReturnNonEmptyArrayList() {, +		Vector<String> vector = new Vector<String>();, +		vector.add("Element");, +		testCollectionConversionToArrayList(vector);, +	}, +, +	@Test, +	public void testCollectionsEmptyList() throws Exception {, +		CollectionToCollectionConverter converter = new CollectionToCollectionConverter(new GenericConversionService());, +		TypeDescriptor type = new TypeDescriptor(getClass().getField("list"));, +		converter.convert(list, type, TypeDescriptor.valueOf(Class.forName("java.util.Collections$EmptyList")));, +	}, +, +	@SuppressWarnings("rawtypes"), +	private void testCollectionConversionToArrayList(Collection<String> aSource) {, +		Object myConverted = (new CollectionToCollectionConverter(new GenericConversionService())).convert(, +				aSource, TypeDescriptor.forObject(aSource), TypeDescriptor.forObject(new ArrayList()));, +		assertTrue(myConverted instanceof ArrayList<?>);, +		assertEquals(aSource.size(), ((ArrayList<?>) myConverted).size());, +	}, +, +	@Test, +	public void listToCollectionNoCopyRequired() throws NoSuchFieldException {, +		List<?> input = new ArrayList<String>(Arrays.asList("foo", "bar"));, +		assertSame(input, conversionService.convert(input, TypeDescriptor.forObject(input),, +				new TypeDescriptor(getClass().getField("wildCardCollection"))));, +	}, +, +	@Test, +, +	public ArrayList<Integer> scalarListTarget;, +, +	public List<Integer> emptyListTarget;, +, +	public LinkedList<Integer> emptyListDifferentTarget;, +, +	public List<List<List<Integer>>> objectToCollection;, +, +	public List<String> strings;, +, +	public List list = Collections.emptyList();, +, +	public Collection<?> wildCardCollection = Collections.emptyList();, +, +, +]