[+++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean.java, + * Copyright 2002-2012 the original author or authors., +	 * Uses the specified persistence unit name as the name of the default, +	 * persistence unit, if applicable., +	 * <p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>, +	 */, +	@Override, +	public void setPersistenceUnitName(String persistenceUnitName) {, +		super.setPersistenceUnitName(persistenceUnitName);, +		this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName);, +	}, +, +	/**, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean.java, + * Copyright 2002-2012 the original author or authors., +	 * Uses the specified persistence unit name as the name of the default, +	 * persistence unit, if applicable., +	 * <p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>, +	 */, +	@Override, +	public void setPersistenceUnitName(String persistenceUnitName) {, +		super.setPersistenceUnitName(persistenceUnitName);, +		this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName);, +	}, +, +	/**, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.util.ResourceUtils;, +	 * parsing all matching files, configuring and post-processing them., +								if (scannedUnit.getPersistenceUnitRootUrl() == null) {, +									URL url = resource.getURL();, +									if (ResourceUtils.isJarURL(url)) {, +										scannedUnit.setPersistenceUnitRootUrl(ResourceUtils.extractJarFileURL(url));, +									}, +								}, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean.java, + * Copyright 2002-2012 the original author or authors., +	 * Uses the specified persistence unit name as the name of the default, +	 * persistence unit, if applicable., +	 * <p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>, +	 */, +	@Override, +	public void setPersistenceUnitName(String persistenceUnitName) {, +		super.setPersistenceUnitName(persistenceUnitName);, +		this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName);, +	}, +, +	/**, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.util.ResourceUtils;, +	 * parsing all matching files, configuring and post-processing them., +								if (scannedUnit.getPersistenceUnitRootUrl() == null) {, +									URL url = resource.getURL();, +									if (ResourceUtils.isJarURL(url)) {, +										scannedUnit.setPersistenceUnitRootUrl(ResourceUtils.extractJarFileURL(url));, +									}, +								}, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/persistenceunit/PersistenceUnitReader.java, + * Copyright 2002-2012 the original author or authors., + * Internal helper class for reading JPA-compliant <code>persistence.xml</code> files., +	protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version) throws IOException {, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/LocalContainerEntityManagerFactoryBean.java, + * Copyright 2002-2012 the original author or authors., +	 * Uses the specified persistence unit name as the name of the default, +	 * persistence unit, if applicable., +	 * <p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>, +	 */, +	@Override, +	public void setPersistenceUnitName(String persistenceUnitName) {, +		super.setPersistenceUnitName(persistenceUnitName);, +		this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName);, +	}, +, +	/**, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.util.ResourceUtils;, +	 * parsing all matching files, configuring and post-processing them., +								if (scannedUnit.getPersistenceUnitRootUrl() == null) {, +									URL url = resource.getURL();, +									if (ResourceUtils.isJarURL(url)) {, +										scannedUnit.setPersistenceUnitRootUrl(ResourceUtils.extractJarFileURL(url));, +									}, +								}, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/jpa/persistenceunit/PersistenceUnitReader.java, + * Copyright 2002-2012 the original author or authors., + * Internal helper class for reading JPA-compliant <code>persistence.xml</code> files., +	protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version) throws IOException {, +++ b/org.springframework.orm/src/test/java/org/springframework/orm/jpa/eclipselink/eclipselink-manager.xml, +		<!--, +		<property name="persistenceUnitName" value="Person"/>, +		<property name="packagesToScan" value="org.springframework.orm.jpa.domain"/>, +		-->]