[+++ b/org.springframework.orm/src/test/java/org/springframework/orm/hibernate3/support/OpenSessionInViewTests.java, +/*, + * Copyright 2002-2011 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.orm.hibernate3.support;, +, +import java.io.IOException;, +import java.sql.Connection;, +import javax.servlet.FilterChain;, +import javax.servlet.ServletException;, +import javax.servlet.ServletRequest;, +import javax.servlet.ServletResponse;, +import javax.transaction.TransactionManager;, +, +import junit.framework.TestCase;, +import org.easymock.MockControl;, +import org.hibernate.FlushMode;, +import org.hibernate.HibernateException;, +import org.hibernate.SessionFactory;, +import org.hibernate.Transaction;, +import org.hibernate.classic.Session;, +import org.hibernate.engine.SessionFactoryImplementor;, +, +import org.springframework.mock.web.MockFilterConfig;, +import org.springframework.mock.web.MockHttpServletRequest;, +import org.springframework.mock.web.MockHttpServletResponse;, +import org.springframework.mock.web.MockServletContext;, +import org.springframework.mock.web.PassThroughFilterChain;, +import org.springframework.orm.hibernate3.HibernateAccessor;, +import org.springframework.orm.hibernate3.HibernateTransactionManager;, +import org.springframework.orm.hibernate3.SessionFactoryUtils;, +import org.springframework.transaction.TransactionDefinition;, +import org.springframework.transaction.TransactionStatus;, +import org.springframework.transaction.support.DefaultTransactionDefinition;, +import org.springframework.transaction.support.TransactionSynchronizationManager;, +import org.springframework.web.context.WebApplicationContext;, +import org.springframework.web.context.request.ServletWebRequest;, +import org.springframework.web.context.support.StaticWebApplicationContext;, +, +/**, + * @author Juergen Hoeller, + * @since 05.03.2005, + */, +public class OpenSessionInViewTests extends TestCase {, +, +	public void testOpenSessionInViewInterceptorWithSingleSession() throws Exception {, +		, +		//SessionFactory sf = createMock(SessionFactory.class);, +		//Session session = createMock(Session.class);, +		, +		MockControl sfControl = MockControl.createControl(SessionFactory.class);, +		final SessionFactory sf = (SessionFactory) sfControl.getMock();, +		MockControl sessionControl = MockControl.createControl(Session.class);, +		Session session = (Session) sessionControl.getMock();, +		, +		OpenSessionInViewInterceptor interceptor = new OpenSessionInViewInterceptor();, +		interceptor.setSessionFactory(sf);, +, +		MockServletContext sc = new MockServletContext();, +		MockHttpServletRequest request = new MockHttpServletRequest(sc);, +, +		//expect(mockStorage.size()).andReturn(expectedValue);, +, +		//expect(sf.openSession()).andReturn(session);, +		sf.openSession();, +		sfControl.setReturnValue(session, 1);, +		session.getSessionFactory();, +		sessionControl.setReturnValue(sf, 2);, +		session.isOpen();, +		sessionControl.setReturnValue(true, 1);, +		session.setFlushMode(FlushMode.MANUAL);, +		sessionControl.setVoidCallable(1);, +		sfControl.replay();, +		sessionControl.replay();, +		interceptor.preHandle(new ServletWebRequest(request));, +		assertTrue(TransactionSynchronizationManager.hasResource(sf));, +, +		// check that further invocations simply participate, +		interceptor.preHandle(new ServletWebRequest(request));, +, +		assertEquals(session, SessionFactoryUtils.getSession(sf, false));, +, +		interceptor.preHandle(new ServletWebRequest(request));, +		interceptor.postHandle(new ServletWebRequest(request), null);, +		interceptor.afterCompletion(new ServletWebRequest(request), null);, +, +		interceptor.postHandle(new ServletWebRequest(request), null);]