[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +import org.springframework.web.servlet.handler.ConversionServiceHandlerInterceptor;, +import org.springframework.web.servlet.handler.MappedInterceptor;, +		RuntimeBeanReference conversionService = getConversionService(element, source, parserContext);, +		RuntimeBeanReference validator = getValidator(element, source, parserContext);, +		, +		bindingDef.getPropertyValues().add("conversionService", conversionService);, +		bindingDef.getPropertyValues().add("validator", validator);, +		String annAdapterName = parserContext.getReaderContext().registerWithGeneratedName(annAdapterDef);, +, +		RootBeanDefinition csInterceptorDef = new RootBeanDefinition(ConversionServiceHandlerInterceptor.class);, +		csInterceptorDef.setSource(source);, +		csInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0, conversionService);		, +		RootBeanDefinition mappedCsInterceptorDef = new RootBeanDefinition(MappedInterceptor.class);, +		mappedCsInterceptorDef.setSource(source);, +		mappedCsInterceptorDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +		mappedCsInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0, (Object) null);, +		mappedCsInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(1, csInterceptorDef);, +		String mappedInterceptorName = parserContext.getReaderContext().registerWithGeneratedName(mappedCsInterceptorDef);, +		parserContext.registerComponent(new BeanComponentDefinition(annAdapterDef, annAdapterName));, +		parserContext.registerComponent(new BeanComponentDefinition(mappedCsInterceptorDef, mappedInterceptorName));, +	private RuntimeBeanReference getConversionService(Element element, Object source, ParserContext parserContext) {, +	private RuntimeBeanReference getValidator(Element element, Object source, ParserContext parserContext) {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java, +import org.springframework.web.servlet.handler.ConversionServiceHandlerInterceptor;, +import org.springframework.web.servlet.handler.MappedInterceptor;, +		RuntimeBeanReference conversionService = getConversionService(element, source, parserContext);, +		RuntimeBeanReference validator = getValidator(element, source, parserContext);, +		, +		bindingDef.getPropertyValues().add("conversionService", conversionService);, +		bindingDef.getPropertyValues().add("validator", validator);, +		String annAdapterName = parserContext.getReaderContext().registerWithGeneratedName(annAdapterDef);, +, +		RootBeanDefinition csInterceptorDef = new RootBeanDefinition(ConversionServiceHandlerInterceptor.class);, +		csInterceptorDef.setSource(source);, +		csInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0, conversionService);		, +		RootBeanDefinition mappedCsInterceptorDef = new RootBeanDefinition(MappedInterceptor.class);, +		mappedCsInterceptorDef.setSource(source);, +		mappedCsInterceptorDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);, +		mappedCsInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0, (Object) null);, +		mappedCsInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(1, csInterceptorDef);, +		String mappedInterceptorName = parserContext.getReaderContext().registerWithGeneratedName(mappedCsInterceptorDef);, +		parserContext.registerComponent(new BeanComponentDefinition(annAdapterDef, annAdapterName));, +		parserContext.registerComponent(new BeanComponentDefinition(mappedCsInterceptorDef, mappedInterceptorName));, +	private RuntimeBeanReference getConversionService(Element element, Object source, ParserContext parserContext) {, +	private RuntimeBeanReference getValidator(Element element, Object source, ParserContext parserContext) {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/handler/ConversionServiceHandlerInterceptor.java, +/*, + * Copyright 2002-2008 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.servlet.handler;, +, +import java.io.IOException;, +, +import javax.servlet.ServletException;, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +, +import org.springframework.core.convert.ConversionService;, +import org.springframework.util.Assert;, +, +/**, + * Interceptor that places the configured {@link ConversionService} in request scope so it's available during request processing., + * Mainly for use within JSP tags such as the spring:eval tag., + * The request attribute name is "org.springframework.core.convert.ConversionService", the value of ConversionService.class.getName();, + * @author Keith Donald, + * @since 3.0.1, + */, +public class ConversionServiceHandlerInterceptor extends HandlerInterceptorAdapter {, +	, +	private final ConversionService conversionService;, +, +	/**, +	 * Creates a new {@link ConversionServiceHandlerInterceptor}., +	 * @param conversionService the conversion service to export to request scope when this interceptor is invoked., +	 */, +	public ConversionServiceHandlerInterceptor(ConversionService conversionService) {, +		Assert.notNull(conversionService, "The ConversionService may not be null");, +		this.conversionService = conversionService;, +	}, +, +	@Override, +	public final boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler), +			throws ServletException, IOException {, +		request.setAttribute(ConversionService.class.getName(), this.conversionService);, +		return true;, +	}]