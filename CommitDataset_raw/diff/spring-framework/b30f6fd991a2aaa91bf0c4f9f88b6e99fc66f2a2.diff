[+++ b/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverter.java, +				OutputStreamWriter writer = new OutputStreamWriter(output, charset);, +				this.printer.appendTo(message, writer);, +				writer.flush();, +++ b/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverter.java, +				OutputStreamWriter writer = new OutputStreamWriter(output, charset);, +				this.printer.appendTo(message, writer);, +				writer.flush();, +++ b/spring-web/src/test/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverterTests.java, +import java.nio.charset.Charset;, +import com.google.protobuf.util.JsonFormat;, + * @author Andreas Ahlenstorf, +	public void writeProtobuf() throws IOException {, +	public void writeJsonWithGoogleProtobuf() throws IOException {, +		this.converter = new ProtobufHttpMessageConverter(, +				new ProtobufHttpMessageConverter.ProtobufJavaUtilSupport(null, null),, +				this.registryInitializer);, +		MockHttpOutputMessage outputMessage = new MockHttpOutputMessage();, +		MediaType contentType = MediaType.APPLICATION_JSON_UTF8;, +		this.converter.write(this.testMsg, contentType, outputMessage);, +, +		assertEquals(contentType, outputMessage.getHeaders().getContentType());, +, +		final String body = outputMessage.getBodyAsString(Charset.forName("UTF-8"));, +		assertFalse("body is empty", body.isEmpty());, +, +		Msg.Builder builder = Msg.newBuilder();, +		JsonFormat.parser().merge(body, builder);, +		assertEquals(this.testMsg, builder.build());, +, +		assertNull(outputMessage.getHeaders().getFirst(, +				ProtobufHttpMessageConverter.X_PROTOBUF_MESSAGE_HEADER));, +		assertNull(outputMessage.getHeaders().getFirst(, +				ProtobufHttpMessageConverter.X_PROTOBUF_SCHEMA_HEADER));, +	}, +, +	@Test, +	public void writeJsonWithJavaFormat() throws IOException {, +		this.converter = new ProtobufHttpMessageConverter(, +				new ProtobufHttpMessageConverter.ProtobufJavaFormatSupport(),, +				this.registryInitializer);, +		MockHttpOutputMessage outputMessage = new MockHttpOutputMessage();, +		MediaType contentType = MediaType.APPLICATION_JSON_UTF8;, +		this.converter.write(this.testMsg, contentType, outputMessage);, +, +		assertEquals(contentType, outputMessage.getHeaders().getContentType());, +, +		final String body = outputMessage.getBodyAsString(Charset.forName("UTF-8"));, +		assertFalse("body is empty", body.isEmpty());, +, +		Msg.Builder builder = Msg.newBuilder();, +		JsonFormat.parser().merge(body, builder);, +		assertEquals(this.testMsg, builder.build());, +, +		assertNull(outputMessage.getHeaders().getFirst(, +				ProtobufHttpMessageConverter.X_PROTOBUF_MESSAGE_HEADER));, +		assertNull(outputMessage.getHeaders().getFirst(, +				ProtobufHttpMessageConverter.X_PROTOBUF_SCHEMA_HEADER));, +	}, +, +	@Test]