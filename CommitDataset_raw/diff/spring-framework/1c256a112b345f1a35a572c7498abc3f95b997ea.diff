[+++ b/spring-web/src/main/java/org/springframework/http/ContentDisposition.java, +import java.util.ArrayList;, +import java.util.List;, +		List<String> parts = tokenize(contentDisposition);, +		String type = parts.get(0);, +		for (int i = 1; i < parts.size(); i++) {, +			String part = parts.get(i);, +	private static List<String> tokenize(String headerValue) {, +		int index = headerValue.indexOf(';');, +		String type = (index >= 0 ? headerValue.substring(0, index) : headerValue).trim();, +		if (type.isEmpty()) {, +			throw new IllegalArgumentException("Content-Disposition header must not be empty");, +		}, +		List<String> parts = new ArrayList<>();, +		parts.add(type);, +		if (index >= 0) {, +			do {, +				int nextIndex = index + 1;, +				boolean quoted = false;, +				while (nextIndex < headerValue.length()) {, +					char ch = headerValue.charAt(nextIndex);, +					if (ch == ';') {, +						if (!quoted) {, +							break;, +						}, +					}, +					else if (ch == '"') {, +						quoted = !quoted;, +					}, +					nextIndex++;, +				}, +				String part = headerValue.substring(index + 1, nextIndex).trim();, +				if (!part.isEmpty()) {, +					parts.add(part);, +				}, +				index = nextIndex;, +			}, +			while (index < headerValue.length());, +		}, +		return parts;, +	}, +, +++ b/spring-web/src/main/java/org/springframework/http/ContentDisposition.java, +import java.util.ArrayList;, +import java.util.List;, +		List<String> parts = tokenize(contentDisposition);, +		String type = parts.get(0);, +		for (int i = 1; i < parts.size(); i++) {, +			String part = parts.get(i);, +	private static List<String> tokenize(String headerValue) {, +		int index = headerValue.indexOf(';');, +		String type = (index >= 0 ? headerValue.substring(0, index) : headerValue).trim();, +		if (type.isEmpty()) {, +			throw new IllegalArgumentException("Content-Disposition header must not be empty");, +		}, +		List<String> parts = new ArrayList<>();, +		parts.add(type);, +		if (index >= 0) {, +			do {, +				int nextIndex = index + 1;, +				boolean quoted = false;, +				while (nextIndex < headerValue.length()) {, +					char ch = headerValue.charAt(nextIndex);, +					if (ch == ';') {, +						if (!quoted) {, +							break;, +						}, +					}, +					else if (ch == '"') {, +						quoted = !quoted;, +					}, +					nextIndex++;, +				}, +				String part = headerValue.substring(index + 1, nextIndex).trim();, +				if (!part.isEmpty()) {, +					parts.add(part);, +				}, +				index = nextIndex;, +			}, +			while (index < headerValue.length());, +		}, +		return parts;, +	}, +, +++ b/spring-web/src/test/java/org/springframework/http/ContentDispositionTests.java, +	@Test  // SPR-16091, +	public void parseFilenameWithSemicolon() {, +		ContentDisposition disposition = ContentDisposition, +				.parse("attachment; filename=\"filename with ; semicolon.txt\"");, +		assertEquals(ContentDisposition.builder("attachment"), +				.filename("filename with ; semicolon.txt").build(), disposition);, +	}, +, +	@Test, +	public void parseAndIgnoreEmptyParts() {, +		ContentDisposition disposition = ContentDisposition, +				.parse("form-data; name=\"foo\";; ; filename=\"foo.txt\"; size=123");, +		assertEquals(ContentDisposition.builder("form-data"), +				.name("foo").filename("foo.txt").size(123L).build(), disposition);, +	}]