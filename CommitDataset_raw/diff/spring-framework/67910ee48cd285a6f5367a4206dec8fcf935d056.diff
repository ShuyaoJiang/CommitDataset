[+++ b/src/docs/asciidoc/integration.adoc, +=== Accessing REST endpoints, +The Spring Framework offers two choices for client-side access to REST endpoints:, +* <<rest-resttemplate>> -- the original Spring REST client with an API similar to other, +template classes in Spring, such as `JdbcTemplate`, `JmsTemplate` and others. The, +`RestTemplate` is built for synchronous use with the blocking I/O., +* <<webflux-client,WebClient>> -- reactive client with a functional,, +fluent API. It is built on a non-blocking foundation for async and sync scenarios and, +supports Reactive Streams back pressure., +The `RestTemplate` provides a higher level API over HTTP client libraries with methods, +that correspond to each of the six main HTTP methods that make invoking many RESTful, +services a one-liner and enforce REST best practices., +include::web/webflux-client.adoc[leveloffset=+3], +, +++ b/src/docs/asciidoc/integration.adoc, +=== Accessing REST endpoints, +The Spring Framework offers two choices for client-side access to REST endpoints:, +* <<rest-resttemplate>> -- the original Spring REST client with an API similar to other, +template classes in Spring, such as `JdbcTemplate`, `JmsTemplate` and others. The, +`RestTemplate` is built for synchronous use with the blocking I/O., +* <<webflux-client,WebClient>> -- reactive client with a functional,, +fluent API. It is built on a non-blocking foundation for async and sync scenarios and, +supports Reactive Streams back pressure., +The `RestTemplate` provides a higher level API over HTTP client libraries with methods, +that correspond to each of the six main HTTP methods that make invoking many RESTful, +services a one-liner and enforce REST best practices., +include::web/webflux-client.adoc[leveloffset=+3], +, +++ b/src/docs/asciidoc/web/webflux-client.adoc, +[[webflux-client]], += WebClient, +, +The `spring-webflux` module includes a non-blocking, reactive client for HTTP requests, +with Reactive Streams back pressure. It shares, +<<web-reactive.adoc#webflux-codecs,HTTP codecs>> and other infrastructure with the, +server <<web-reactive.adoc#webflux-fn,functional web framework>>., +, +`WebClient` provides a higher level API over HTTP client libraries. By default, +it uses https://github.com/reactor/reactor-netty[Reactor Netty] but that is pluggable, +with a different `ClientHttpConnector`. The `WebClient` API returns Reactor `Flux` or, +`Mono` for output and accepts Reactive Streams `Publisher` as input (see, +<<web-reactive.adoc#webflux-reactive-libraries>>)., +, +[TIP], +====, +By comparison to the, +<<integration.adoc#rest-resttemplate,RestTemplate>>, the `WebClient` offers a more, +functional and fluent API that taking full advantage of Java 8 lambdas. It supports both, +sync and async scenarios, including streaming, and brings the efficiency of, +non-blocking I/O., +====, +, +, +[[webflux-client-retrieve]], +== Retrieve, +, +The `retrieve()` method is the easiest way to get a response body and decode it:, +, +[source,java,intent=0], +[subs="verbatim,quotes"], +----, +    WebClient client = WebClient.create("http://example.org");, +, +    Mono<Person> result = client.get(), +            .uri("/persons/{id}", id).accept(MediaType.APPLICATION_JSON), +            .retrieve(), +            .bodyToMono(Person.class);, +----, +, +You can also get a stream of objects decoded from the response:, +, +[source,java,intent=0], +[subs="verbatim,quotes"], +----, +    Flux<Quote> result = client.get(), +            .uri("/quotes").accept(TEXT_EVENT_STREAM), +            .retrieve(), +            .bodyToFlux(Quote.class);, +----, +, +By default, responses with 4xx or 5xx status codes result in an error of type, +`WebClientResponseException` but you can customize that:, +, +[source,java,intent=0], +[subs="verbatim,quotes"], +----, +    Mono<Person> result = client.get(), +            .uri("/persons/{id}", id).accept(MediaType.APPLICATION_JSON), +            .retrieve(), +            .onStatus(HttpStatus::is4xxServerError, response -> ...), +            .onStatus(HttpStatus::is5xxServerError, response -> ...), +            .bodyToFlux(Person.class);, +----, +, +, +, +[[webflux-client-exchange]], +== Exchange, +, +The `exchange()` method provides more control. The below example is equivalent]