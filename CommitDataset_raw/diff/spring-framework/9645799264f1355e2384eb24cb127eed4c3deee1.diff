[+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +, +	private final ExpressionEvaluator evaluator = new ExpressionEvaluator();, +	/**, +	 * Set the CacheManager that this cache aspect should delegate to., +	 */, +	public void setCacheManager(CacheManager cacheManager) {, +		this.cacheManager = cacheManager;, +	}, +, +	/**, +	 * Return the CacheManager that this cache aspect delegates to., +	 */, +	public CacheManager getCacheManager() {, +		return this.cacheManager;, +	}, +, +	/**, +	 * Set one or more cache operation sources which are used to find the cache, +	 * attributes. If more than one source is provided, they will be aggregated using a, +	 * {@link CompositeCacheOperationSource}., +	 * @param cacheOperationSources must not be {@code null}, +	 */, +	public void setCacheOperationSources(CacheOperationSource... cacheOperationSources) {, +		Assert.notEmpty(cacheOperationSources);, +		this.cacheOperationSource = (cacheOperationSources.length > 1 ?, +				new CompositeCacheOperationSource(cacheOperationSources) : cacheOperationSources[0]);, +	}, +, +	/**, +	 * Return the CacheOperationSource for this cache aspect., +	 */, +	public CacheOperationSource getCacheOperationSource() {, +		return this.cacheOperationSource;, +	}, +, +	/**, +	 * Set the KeyGenerator for this cache aspect., +	 * Default is {@link DefaultKeyGenerator}., +	 */, +	public void setKeyGenerator(KeyGenerator keyGenerator) {, +		this.keyGenerator = keyGenerator;, +	}, +, +	/**, +	 * Return the KeyGenerator for this cache aspect,, +	 */, +	public KeyGenerator getKeyGenerator() {, +		return this.keyGenerator;, +	}, +, +, +	protected CacheOperationContext getOperationContext(CacheOperation operation, Method method, Object[] args,, +			Object target, Class<?> targetClass) {, +, +			Collection<CacheOperation> operations = getCacheOperationSource().getCacheOperations(method, targetClass);, +				return execute(invoker, new CacheOperationContexts(operations, method, args, target, targetClass));, +		collectPutRequests(contexts.get(CacheableOperation.class), ExpressionEvaluator.NO_RESULT, cachePutRequests, true);, +		collectPutRequests(contexts.get(CachePutOperation.class), result.get(), cachePutRequests, false);, +	private void processCacheEvicts(Collection<CacheOperationContext> contexts, boolean beforeInvocation, Object result) {, +			if (beforeInvocation == operation.isBeforeInvocation() && isConditionPassing(context, result)) {, +	private void performCacheEvict(CacheOperationContext context, CacheEvictOperation operation, Object result) {, +			}, +			else {, +			this.logger.trace("Invalidating " + (key == null ? "entire cache" : "cache key " + key) +, +, +					result = findInCaches(context, generateKey(context, ExpressionEvaluator.NO_RESULT));, +		Assert.notNull(key, "Null key returned for cache operation (maybe you are using named params " +, +				"on classes without debug info?) " + context.operation);, +, +, +			Collection<CacheOperationContext> result = this.contexts.get(operationClass);, +			return (result != null ? result : Collections.<CacheOperationContext> emptyList());, +				return evaluator.condition(this.operation.getCondition(), this.method, evaluationContext);, +				return !evaluator.unless(unless, this.method, evaluationContext);, +				return evaluator.key(this.operation.getKey(), this.method, evaluationContext);, +			return keyGenerator.generate(this.target, this.method, this.args);, +			return evaluator.createEvaluationContext(this.caches, this.method, this.args, this.target, this.targetClass, result);, +]