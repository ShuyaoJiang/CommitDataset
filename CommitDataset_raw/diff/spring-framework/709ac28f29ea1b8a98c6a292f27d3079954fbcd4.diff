[+++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, + * Copyright 2002-2014 the original author or authors., +		assertSame(beanFactory.getBean("rawRepo"), beanFactory.getBean("repoConsumer"));, +	}, +, +	@Test, +	public void testGenericsBasedInjectionWithWildcardMatch() {, +		beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(WildcardMatchingConfiguration.class));, +		ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor();, +		pp.postProcessBeanFactory(beanFactory);, +, +		assertSame(beanFactory.getBean("genericRepo"), beanFactory.getBean("repoConsumer"));, +	}, +, +	@Test, +	public void testGenericsBasedInjectionWithWildcardWithExtendsMatch() {, +		beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(WildcardWithExtendsConfiguration.class));, +		ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor();, +		pp.postProcessBeanFactory(beanFactory);, +, +		assertSame(beanFactory.getBean("stringRepo"), beanFactory.getBean("repoConsumer"));, +	}, +, +	@Test, +	public void testGenericsBasedInjectionWithWildcardWithGenericExtendsMatch() {, +		beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(WildcardWithGenericExtendsConfiguration.class));, +		ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor();, +		pp.postProcessBeanFactory(beanFactory);, +, +		assertSame(beanFactory.getBean("genericRepo"), beanFactory.getBean("repoConsumer"));, +, +		@Bean, +		public Repository<?> genericRepo() {, +			return new Repository<Object>() {, +				@Override, +				public String toString() {, +					return "Repository<Object>";, +				}, +			};, +		}, +, +		@Bean @Scope("prototype"), +		public Repository genericRepo() {, +			return new Repository<Object>() {, +				@Override, +				public String toString() {, +					return "Repository<Object>";, +				}, +			};, +		}, +		public Repository rawRepo() {, +, +	@Configuration, +	public static class WildcardMatchingConfiguration {, +, +		@Bean, +		public Repository<?> genericRepo() {, +			return new Repository();, +		}, +, +		@Bean, +		public Object repoConsumer(Repository<String> repo) {, +			return repo;, +		}, +	}, +, +, +	@Configuration, +	public static class WildcardWithExtendsConfiguration {, +, +		@Bean, +		public Repository<? extends String> stringRepo() {, +			return new Repository<String>();, +		}, +, +		@Bean, +		public Repository<? extends Number> numberRepo() {, +			return new Repository<Number>();, +		}, +, +		@Bean, +		public Object repoConsumer(Repository<? extends String> repo) {, +			return repo;, +		}, +	}, +, +, +	@Configuration, +	public static class WildcardWithGenericExtendsConfiguration {, +, +		@Bean, +		public Repository<? extends Object> genericRepo() {, +			return new Repository<String>();, +		}, +, +		@Bean, +		public Repository<? extends Number> numberRepo() {, +			return new Repository<Number>();, +		}, +]