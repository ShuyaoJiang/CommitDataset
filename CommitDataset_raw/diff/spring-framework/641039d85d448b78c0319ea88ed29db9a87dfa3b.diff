[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +					throw new IllegalStateException("Cannot get from " + stackTop + " to " + targetDescriptor);, +					throw new IllegalStateException("Cannot get from " + stackTop + " to " + targetDescriptor);, +					throw new IllegalStateException("Cannot get from " + stackTop + " to " + targetDescriptor);, +					throw new IllegalStateException("Cannot get from " + stackDescriptor + " to " + targetDescriptor);, +	 * Determine whether the descriptor is for a boolean primitive or boolean reference type., +	 * Determine whether the descriptor is for a primitive type., +	 * Determine whether the descriptor is for a primitive array (e.g. "[[I")., +	 * Determine whether boxing/unboxing can get from one type to the other., +	 * Assumes at least one of the types is in boxed form (i.e. single char descriptor)., +	 * Deduce the descriptor for a type. Descriptors are like JVM type names but missing the, +	 * trailing ';' so for Object the descriptor is "Ljava/lang/Object" for int it is "I"., +			return (ch == 'L');, +				// Handling the nested array case here., +				// If vararg is [[I then we want [I and not [I;, +	public static String toBoxedDescriptor(String primitiveDescriptor) {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/CodeFlow.java, +					throw new IllegalStateException("Cannot get from " + stackTop + " to " + targetDescriptor);, +					throw new IllegalStateException("Cannot get from " + stackTop + " to " + targetDescriptor);, +					throw new IllegalStateException("Cannot get from " + stackTop + " to " + targetDescriptor);, +					throw new IllegalStateException("Cannot get from " + stackDescriptor + " to " + targetDescriptor);, +	 * Determine whether the descriptor is for a boolean primitive or boolean reference type., +	 * Determine whether the descriptor is for a primitive type., +	 * Determine whether the descriptor is for a primitive array (e.g. "[[I")., +	 * Determine whether boxing/unboxing can get from one type to the other., +	 * Assumes at least one of the types is in boxed form (i.e. single char descriptor)., +	 * Deduce the descriptor for a type. Descriptors are like JVM type names but missing the, +	 * trailing ';' so for Object the descriptor is "Ljava/lang/Object" for int it is "I"., +			return (ch == 'L');, +				// Handling the nested array case here., +				// If vararg is [[I then we want [I and not [I;, +	public static String toBoxedDescriptor(String primitiveDescriptor) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java, +		DeferredResultSubscriber(DeferredResult<Object> result, ReactiveAdapter adapter, ResolvableType elementType) {, +]