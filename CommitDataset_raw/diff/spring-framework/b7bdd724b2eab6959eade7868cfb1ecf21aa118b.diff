[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/AbstractXhrTransport.java, +	 * @deprecated as of 4.2 in favor of {@link SockJsClient#setHttpHeaderNames}., +	@Deprecated, +	@Deprecated, +	@SuppressWarnings("deprecation"), +		handshakeHeaders.putAll(request.getHandshakeHeaders());, +	@SuppressWarnings("deprecation"), +	public String executeInfoRequest(URI infoUrl, HttpHeaders headers) {, +		HttpHeaders infoRequestHeaders = new HttpHeaders();, +		infoRequestHeaders.putAll(getRequestHeaders());, +		if (headers != null) {, +			infoRequestHeaders.putAll(headers);, +		}, +		ResponseEntity<String> response = executeInfoRequestInternal(infoUrl, infoRequestHeaders);, +	protected abstract ResponseEntity<String> executeInfoRequestInternal(URI infoUrl, HttpHeaders headers);, +	public void executeSendRequest(URI url, HttpHeaders headers, TextMessage message) {, +		ResponseEntity<String> response = executeSendRequestInternal(url, headers, message);, +	protected abstract ResponseEntity<String> executeSendRequestInternal(URI url,, +			HttpHeaders headers, TextMessage message);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/AbstractXhrTransport.java, +	 * @deprecated as of 4.2 in favor of {@link SockJsClient#setHttpHeaderNames}., +	@Deprecated, +	@Deprecated, +	@SuppressWarnings("deprecation"), +		handshakeHeaders.putAll(request.getHandshakeHeaders());, +	@SuppressWarnings("deprecation"), +	public String executeInfoRequest(URI infoUrl, HttpHeaders headers) {, +		HttpHeaders infoRequestHeaders = new HttpHeaders();, +		infoRequestHeaders.putAll(getRequestHeaders());, +		if (headers != null) {, +			infoRequestHeaders.putAll(headers);, +		}, +		ResponseEntity<String> response = executeInfoRequestInternal(infoUrl, infoRequestHeaders);, +	protected abstract ResponseEntity<String> executeInfoRequestInternal(URI infoUrl, HttpHeaders headers);, +	public void executeSendRequest(URI url, HttpHeaders headers, TextMessage message) {, +		ResponseEntity<String> response = executeSendRequestInternal(url, headers, message);, +	protected abstract ResponseEntity<String> executeSendRequestInternal(URI url,, +			HttpHeaders headers, TextMessage message);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/DefaultTransportRequest.java, +	private final HttpHeaders httpRequestHeaders;, +, +	public DefaultTransportRequest(SockJsUrlInfo sockJsUrlInfo,, +			HttpHeaders handshakeHeaders, HttpHeaders httpRequestHeaders,, +		this.httpRequestHeaders = (httpRequestHeaders != null ? httpRequestHeaders : new HttpHeaders());, +	public HttpHeaders getHttpRequestHeaders() {, +		return this.httpRequestHeaders;, +	}, +, +	@Override, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/AbstractXhrTransport.java, +	 * @deprecated as of 4.2 in favor of {@link SockJsClient#setHttpHeaderNames}., +	@Deprecated, +	@Deprecated, +	@SuppressWarnings("deprecation"), +		handshakeHeaders.putAll(request.getHandshakeHeaders());, +	@SuppressWarnings("deprecation"), +	public String executeInfoRequest(URI infoUrl, HttpHeaders headers) {, +		HttpHeaders infoRequestHeaders = new HttpHeaders();, +		infoRequestHeaders.putAll(getRequestHeaders());, +		if (headers != null) {, +			infoRequestHeaders.putAll(headers);, +		}, +		ResponseEntity<String> response = executeInfoRequestInternal(infoUrl, infoRequestHeaders);, +	protected abstract ResponseEntity<String> executeInfoRequestInternal(URI infoUrl, HttpHeaders headers);, +	public void executeSendRequest(URI url, HttpHeaders headers, TextMessage message) {, +		ResponseEntity<String> response = executeSendRequestInternal(url, headers, message);, +	protected abstract ResponseEntity<String> executeSendRequestInternal(URI url,, +			HttpHeaders headers, TextMessage message);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/DefaultTransportRequest.java, +	private final HttpHeaders httpRequestHeaders;, +, +	public DefaultTransportRequest(SockJsUrlInfo sockJsUrlInfo,, +			HttpHeaders handshakeHeaders, HttpHeaders httpRequestHeaders,, +		this.httpRequestHeaders = (httpRequestHeaders != null ? httpRequestHeaders : new HttpHeaders());, +	public HttpHeaders getHttpRequestHeaders() {, +		return this.httpRequestHeaders;, +	}, +, +	@Override, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/InfoReceiver.java, +import org.springframework.http.HttpHeaders;, +, +	 * <p>Note that as of 4.2 this method accepts a {@code headers} parameter., +	 * @param headers the headers to use for the request, +	String executeInfoRequest(URI infoUrl, HttpHeaders headers);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/AbstractXhrTransport.java, +	 * @deprecated as of 4.2 in favor of {@link SockJsClient#setHttpHeaderNames}., +	@Deprecated, +	@Deprecated, +	@SuppressWarnings("deprecation"), +		handshakeHeaders.putAll(request.getHandshakeHeaders());, +	@SuppressWarnings("deprecation"), +	public String executeInfoRequest(URI infoUrl, HttpHeaders headers) {, +		HttpHeaders infoRequestHeaders = new HttpHeaders();, +		infoRequestHeaders.putAll(getRequestHeaders());, +		if (headers != null) {, +			infoRequestHeaders.putAll(headers);, +		}, +		ResponseEntity<String> response = executeInfoRequestInternal(infoUrl, infoRequestHeaders);, +	protected abstract ResponseEntity<String> executeInfoRequestInternal(URI infoUrl, HttpHeaders headers);]