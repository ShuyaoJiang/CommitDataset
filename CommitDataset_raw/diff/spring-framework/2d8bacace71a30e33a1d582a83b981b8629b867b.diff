[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +		exceptionHandlerExceptionResolver.setApplicationContext(this.applicationContext);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +		exceptionHandlerExceptionResolver.setApplicationContext(this.applicationContext);, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java, +import org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver;, +import org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver;, +import org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver;, +	private StaticWebApplicationContext wac;, +, +, +		this.wac = new StaticWebApplicationContext();, +		this.mvcConfiguration = new WebMvcConfigurationSupport();, +		this.mvcConfiguration.setApplicationContext(wac);, +		this.wac.registerSingleton("controller", TestController.class);, +		handlerMapping.setApplicationContext(this.wac);, +		List<HandlerExceptionResolver> expectedResolvers = compositeResolver.getExceptionResolvers();, +, +		assertEquals(ExceptionHandlerExceptionResolver.class, expectedResolvers.get(0).getClass());, +		assertEquals(ResponseStatusExceptionResolver.class, expectedResolvers.get(1).getClass());, +		assertEquals(DefaultHandlerExceptionResolver.class, expectedResolvers.get(2).getClass());, +, +		ExceptionHandlerExceptionResolver eher = (ExceptionHandlerExceptionResolver) expectedResolvers.get(0);, +		assertNotNull(eher.getApplicationContext());]