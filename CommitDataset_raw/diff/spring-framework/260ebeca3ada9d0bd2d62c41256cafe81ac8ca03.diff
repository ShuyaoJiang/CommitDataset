[+++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +			// Same lenient fallback checking as in Property..., +			pd = this.propertyDescriptorCache.get(StringUtils.uncapitalize(name));, +				pd = this.propertyDescriptorCache.get(StringUtils.capitalize(name));, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +			// Same lenient fallback checking as in Property..., +			pd = this.propertyDescriptorCache.get(StringUtils.uncapitalize(name));, +				pd = this.propertyDescriptorCache.get(StringUtils.capitalize(name));, +++ b/spring-core/src/main/java/org/springframework/core/convert/Property.java, +				field = ReflectionUtils.findField(declaringClass, StringUtils.uncapitalize(name));, +					field = ReflectionUtils.findField(declaringClass, StringUtils.capitalize(name));, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +			// Same lenient fallback checking as in Property..., +			pd = this.propertyDescriptorCache.get(StringUtils.uncapitalize(name));, +				pd = this.propertyDescriptorCache.get(StringUtils.capitalize(name));, +++ b/spring-core/src/main/java/org/springframework/core/convert/Property.java, +				field = ReflectionUtils.findField(declaringClass, StringUtils.uncapitalize(name));, +					field = ReflectionUtils.findField(declaringClass, StringUtils.capitalize(name));, +++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java, +						filePath = StringUtils.capitalize(filePath);, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +			// Same lenient fallback checking as in Property..., +			pd = this.propertyDescriptorCache.get(StringUtils.uncapitalize(name));, +				pd = this.propertyDescriptorCache.get(StringUtils.capitalize(name));, +++ b/spring-core/src/main/java/org/springframework/core/convert/Property.java, +				field = ReflectionUtils.findField(declaringClass, StringUtils.uncapitalize(name));, +					field = ReflectionUtils.findField(declaringClass, StringUtils.capitalize(name));, +++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java, +						filePath = StringUtils.capitalize(filePath);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java, +			if (name.length() > 1 && name.charAt(1) == '_') {, +				result.append(Character.toUpperCase(name.charAt(0)));, +				result.append(Character.toLowerCase(name.charAt(0)));, +				char c = name.charAt(i);, +				if (c == '_') {, +						result.append(Character.toUpperCase(c));, +						result.append(Character.toLowerCase(c));, +++ b/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java, +			// Same lenient fallback checking as in Property..., +			pd = this.propertyDescriptorCache.get(StringUtils.uncapitalize(name));, +				pd = this.propertyDescriptorCache.get(StringUtils.capitalize(name));, +++ b/spring-core/src/main/java/org/springframework/core/convert/Property.java, +				field = ReflectionUtils.findField(declaringClass, StringUtils.uncapitalize(name));, +					field = ReflectionUtils.findField(declaringClass, StringUtils.capitalize(name));, +++ b/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java, +						filePath = StringUtils.capitalize(filePath);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java, +			if (name.length() > 1 && name.charAt(1) == '_') {, +				result.append(Character.toUpperCase(name.charAt(0)));, +				result.append(Character.toLowerCase(name.charAt(0)));, +				char c = name.charAt(i);, +				if (c == '_') {, +						result.append(Character.toUpperCase(c));, +						result.append(Character.toLowerCase(c));, +++ b/spring-web/src/main/java/org/springframework/web/multipart/support/StandardServletMultipartResolver.java, +import org.springframework.util.StringUtils;, +		if (!"post".equalsIgnoreCase(request.getMethod())) {, +		return StringUtils.startsWithIgnoreCase(contentType, "multipart/");]