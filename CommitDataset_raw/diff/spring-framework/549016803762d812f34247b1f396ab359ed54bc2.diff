[+++ b/src/asciidoc/index.adoc, +The next parts will list, for each feature, the available modules with their artifact name and their goal., +Artifacts names are the reference names to use in <<dependency-management,Dependency Management tools>>., +The <<beans-introduction,__Core Container__>> consists of the `spring-core`, `spring-beans`, `spring-context`, and, +`spring-expression` (Spring Expression Language) modules., +The `spring-core` and `spring-beans` modules <<beans-introduction,provide the fundamental parts of the framework>>,, +including the IoC and Dependency Injection features. The `BeanFactory` is, +The <<context-introduction,__Context__>> (`spring-context`) module builds on the solid base provided by the, +The `spring-expression` module provides a powerful <<expressions,__Expression Language__>>, +for querying and manipulating an object graph at runtime. It is an extension of, +The `spring-aop` module provides an <<aop-introduction,__AOP__>> Alliance-compliant, +The separate `spring-aspets` module provides integration with AspectJ., +The `spring-instrument` module provides class instrumentation support and classloader, +The `spring-jdbc` module provides a <<jdbc-introduction,JDBC>>-abstraction layer that removes the, +The `spring-orm` module provides integration layers for popular, +<<orm-introduction,object-relational mapping>> APIs, including <<orm-jpa,JPA>>, <<orm-jdo,JDO>>, and, +<<orm-hibernate,Hibernate>> (see also `spring-orm-hibernate4` for Hibernate 4 support)., +Using the ORM package you can use all of these O/R-mapping frameworks in combination with all of the, +other features Spring offers, such as the simple declarative transaction management feature mentioned previously., +The `spring-oxm` module provides an abstraction layer that supports <<oxm,Object/XML mapping>>, +The `spring-jms` module (<<jms,Java Messaging Service>>) contains features for producing and, +The `spring-tx` module supports <<transaction,programmatic and declarative transaction>>, +The __Web__ layer consists of the `spring-web`, `spring-webmvc`, `spring-websocket` and `spring-webmvc-portlet` modules., +The `spring-web` module provides basic web-oriented integration features such as, +The `spring-webmvc` module (also known as `__Web-Servlet__) contains Spring's model-view-controller, +The `spring-webmvc-portlet` module (also __Web-Portlet__ module) provides the MVC implementation to be used in a portlet, +The `spring-test` module supports the testing of Spring components with JUnit or TestNG. It]