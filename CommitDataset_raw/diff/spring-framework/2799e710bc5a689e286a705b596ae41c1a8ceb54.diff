[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java, +import org.springframework.ui.Model;, +import org.springframework.web.servlet.mvc.support.RedirectAttributesModelMap;, +	private boolean alwaysUseRedirectAttributes;, +	, +	/**, +	 * By default a controller uses {@link Model} to select attributes for , +	 * rendering and for redirecting. However, a controller can also use , +	 * {@link RedirectAttributes} to select attributes before a redirect., +	 * <p>When this flag is set to {@code true}, {@link RedirectAttributes} , +	 * becomes the only way to select attributes for a redirect. , +	 * In other words, for a redirect a controller must use , +	 * {@link RedirectAttributes} or no attributes will be used., +	 * <p>The default value is {@code false}, meaning the {@link Model} is, +	 * used unless {@link RedirectAttributes} is used., +	 * @see RedirectAttributes, +	 */, +	public void setAlwaysUseRedirectAttributes(boolean alwaysUseRedirectAttributes) {, +		this.alwaysUseRedirectAttributes = alwaysUseRedirectAttributes;, +	}, +, +		WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);, +		ServletInvocableHandlerMethod requestMappingMethod = createRequestMappingMethod(handlerMethod, binderFactory);, +		ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);, +		if (this.alwaysUseRedirectAttributes) {, +			DataBinder dataBinder = binderFactory.createBinder(webRequest, null, null);, +			mavContainer.setRedirectModel(new RedirectAttributesModelMap(dataBinder));, +		}, +		, +	private ServletInvocableHandlerMethod createRequestMappingMethod(HandlerMethod handlerMethod, , +																	 WebDataBinderFactory binderFactory) {, +		ServletInvocableHandlerMethod requestMethod;, +		requestMethod = new ServletInvocableHandlerMethod(handlerMethod.getBean(), handlerMethod.getMethod());, +		requestMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers);, +		requestMethod.setHandlerMethodReturnValueHandlers(this.returnValueHandlers);, +		requestMethod.setDataBinderFactory(binderFactory);, +		requestMethod.setParameterNameDiscoverer(this.parameterNameDiscoverer);, +		return requestMethod;, +	private ModelFactory getModelFactory(HandlerMethod handlerMethod, WebDataBinderFactory binderFactory) {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java, +import org.springframework.ui.Model;, +import org.springframework.web.servlet.mvc.support.RedirectAttributesModelMap;, +	private boolean alwaysUseRedirectAttributes;, +	, +	/**, +	 * By default a controller uses {@link Model} to select attributes for , +	 * rendering and for redirecting. However, a controller can also use , +	 * {@link RedirectAttributes} to select attributes before a redirect., +	 * <p>When this flag is set to {@code true}, {@link RedirectAttributes} , +	 * becomes the only way to select attributes for a redirect. , +	 * In other words, for a redirect a controller must use , +	 * {@link RedirectAttributes} or no attributes will be used., +	 * <p>The default value is {@code false}, meaning the {@link Model} is, +	 * used unless {@link RedirectAttributes} is used., +	 * @see RedirectAttributes, +	 */, +	public void setAlwaysUseRedirectAttributes(boolean alwaysUseRedirectAttributes) {, +		this.alwaysUseRedirectAttributes = alwaysUseRedirectAttributes;, +	}, +, +		WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);, +		ServletInvocableHandlerMethod requestMappingMethod = createRequestMappingMethod(handlerMethod, binderFactory);, +		ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);, +		if (this.alwaysUseRedirectAttributes) {, +			DataBinder dataBinder = binderFactory.createBinder(webRequest, null, null);, +			mavContainer.setRedirectModel(new RedirectAttributesModelMap(dataBinder));, +		}, +		, +	private ServletInvocableHandlerMethod createRequestMappingMethod(HandlerMethod handlerMethod, , +																	 WebDataBinderFactory binderFactory) {, +		ServletInvocableHandlerMethod requestMethod;, +		requestMethod = new ServletInvocableHandlerMethod(handlerMethod.getBean(), handlerMethod.getMethod());, +		requestMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers);, +		requestMethod.setHandlerMethodReturnValueHandlers(this.returnValueHandlers);, +		requestMethod.setDataBinderFactory(binderFactory);, +		requestMethod.setParameterNameDiscoverer(this.parameterNameDiscoverer);, +		return requestMethod;, +	private ModelFactory getModelFactory(HandlerMethod handlerMethod, WebDataBinderFactory binderFactory) {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/RedirectAttributesMethodArgumentResolver.java, +		, +		if (mavContainer.getRedirectModel() != null) {, +			return mavContainer.getRedirectModel();, +		}, +		else {, +			ModelMap redirectAttributes  = new RedirectAttributesModelMap(dataBinder);, +			mavContainer.setRedirectModel(redirectAttributes);, +			return redirectAttributes;, +		}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java, +import org.springframework.ui.Model;, +import org.springframework.web.servlet.mvc.support.RedirectAttributesModelMap;, +	private boolean alwaysUseRedirectAttributes;, +	, +	/**, +	 * By default a controller uses {@link Model} to select attributes for , +	 * rendering and for redirecting. However, a controller can also use , +	 * {@link RedirectAttributes} to select attributes before a redirect., +	 * <p>When this flag is set to {@code true}, {@link RedirectAttributes} , +	 * becomes the only way to select attributes for a redirect. , +	 * In other words, for a redirect a controller must use ]