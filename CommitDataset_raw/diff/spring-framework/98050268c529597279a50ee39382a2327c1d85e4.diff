[+++ b/spring-context/src/main/java/org/springframework/context/annotation/Bean.java, + * Indicates that a method produces a bean to be managed by the Spring container., + *, + * <p>The names and semantics of the attributes to this annotation are intentionally, + * similar to those of the {@code <bean/>} element in the Spring XML schema. For, + * example:, + *, + * <h3>Bean Names</h3>, + *, + * <p>While a {@link #name() name} attribute is available, the default strategy for, + * determining the name of a bean is to use the name of the {@code @Bean} method., + * This is convenient and intuitive, but if explicit naming is desired, the, + * {@code name} attribute may be used. Also note that {@code name} accepts an array, + * of Strings. This is in order to allow for specifying multiple names (i.e., aliases), + * for a single bean., + *, + * <h3>Scope, Primary, and Lazy</h3>, + *, + * primary, or lazy. Rather, it should be used in conjunction with {@link Scope @Scope},, + * {@link Primary @Primary}, and {@link Lazy @Lazy} annotations to achieve those, + * semantics. For example:, + *, + * <h3>{@code @Bean} Methods in {@code @Configuration} Classes</h3>, + *, + * classes. In this case, bean methods may reference other {@code @Bean} methods, + * in the same class by calling them <i>directly</i>. This ensures that references between, + * guaranteed to respect scoping and AOP semantics, just like <code>getBean()</code> lookups, + *, + * <h3>Configuration Class <i>Lite</i> Mode</h3>, + *, + * {@code factory-method} declarations in XML) but with <b><i>prototype</i></b> semantics., + * The containing component classes remain unmodified in this case, and there are no, + * unusual constraints for factory methods; however, scoping semantics are <b>not</b>, + * respected as described above for inter-bean method invocations in this mode. For example:, + *, + * <h3>Bootstrapping</h3>, + *, + * <h3>{@code BeanFactoryPostProcessor}-returning {@code @Bean} methods</h3>, + *, + *, + *, +	 *, +	 * method against an object returned from the {@code @Bean} method. For example, given a, +	 * 'close'. The method may be declared at any level of the inheritance hierarchy and, +	 * will be detected regardless of the return type of the {@code @Bean} method (i.e.,, +	 * detection occurs reflectively against the bean instance itself at creation time)., +	 *, +	 *, +	 * factory, which is always the case for singletons but not guaranteed for any, +	 * other scope., +	 *]