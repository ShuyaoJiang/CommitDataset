[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/H2EmbeddedDatabaseConfigurer.java, + * @author Sam Brannen, +	 * Get the singleton {@code H2EmbeddedDatabaseConfigurer} instance., +		properties.setUrl(String.format("jdbc:h2:mem:%s;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false", databaseName));, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/H2EmbeddedDatabaseConfigurer.java, + * @author Sam Brannen, +	 * Get the singleton {@code H2EmbeddedDatabaseConfigurer} instance., +		properties.setUrl(String.format("jdbc:h2:mem:%s;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false", databaseName));, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/config/JdbcNamespaceIntegrationTests.java, + * Copyright 2002-2014 the original author or authors., + * @author Sam Brannen, +	@Test, +	public void createEmbeddedDatabase() throws Exception {, +		Assume.group(TestGroup.LONG_RUNNING);, +		assertCorrectSetup("jdbc-config.xml", "dataSource", "h2DataSource", "derbyDataSource");, +	public void createEmbeddedDatabaseAgain() throws Exception {, +		assertCorrectSetup("jdbc-config.xml", "derbyDataSource");, +	public void createWithResourcePattern() throws Exception {, +		assertCorrectSetup("jdbc-config-pattern.xml", "dataSource");, +	public void createWithEndings() throws Exception {, +		assertCorrectSetupAndCloseContext("jdbc-initialize-endings-config.xml", 2, "dataSource");, +	public void createWithEndingsNested() throws Exception {, +		assertCorrectSetupAndCloseContext("jdbc-initialize-endings-nested-config.xml", 2, "dataSource");, +	public void createAndDestroy() throws Exception {, +		ClassPathXmlApplicationContext context = context("jdbc-destroy-config.xml");, +			assertNumRowsInTestTable(template, 1);, +			assertNumRowsInTestTable(template, 1);, +	public void createAndDestroyNestedWithHsql() throws Exception {, +		ClassPathXmlApplicationContext context = context("jdbc-destroy-nested-config.xml");, +			assertNumRowsInTestTable(template, 1);, +			assertNumRowsInTestTable(template, 1);, +	public void createAndDestroyNestedWithH2() throws Exception {, +		ClassPathXmlApplicationContext context = context("jdbc-destroy-nested-config-h2.xml");, +		try {, +			DataSource dataSource = context.getBean(DataSource.class);, +			JdbcTemplate template = new JdbcTemplate(dataSource);, +			assertNumRowsInTestTable(template, 1);, +			context.getBean(EmbeddedDatabaseFactoryBean.class).destroy();, +			expected.expect(BadSqlGrammarException.class); // Table has been dropped, +			assertNumRowsInTestTable(template, 1);, +		}, +		finally {, +			context.close();, +		}, +	}, +, +	@Test, +	public void multipleDataSourcesHaveDifferentDatabaseNames() throws Exception {, +			"jdbc-config-multiple-datasources.xml", getClass()));, +	private ClassPathXmlApplicationContext context(String file) {, +		return new ClassPathXmlApplicationContext(file, getClass());, +	}, +, +	private void assertNumRowsInTestTable(JdbcTemplate template, int count) {, +		assertEquals(count, template.queryForObject("select count(*) from T_TEST", Integer.class).intValue());, +	private void assertCorrectSetup(String file, String... dataSources) {, +		assertCorrectSetupAndCloseContext(file, 1, dataSources);, +	}, +, +	private void assertCorrectSetupAndCloseContext(String file, int count, String... dataSources) {, +		ConfigurableApplicationContext context = context(file);, +				assertNumRowsInTestTable(template, count);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/embedded/H2EmbeddedDatabaseConfigurer.java, + * @author Sam Brannen, +	 * Get the singleton {@code H2EmbeddedDatabaseConfigurer} instance., +		properties.setUrl(String.format("jdbc:h2:mem:%s;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false", databaseName));, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/config/JdbcNamespaceIntegrationTests.java, + * Copyright 2002-2014 the original author or authors., + * @author Sam Brannen, +	@Test, +	public void createEmbeddedDatabase() throws Exception {, +		Assume.group(TestGroup.LONG_RUNNING);, +		assertCorrectSetup("jdbc-config.xml", "dataSource", "h2DataSource", "derbyDataSource");, +	public void createEmbeddedDatabaseAgain() throws Exception {, +		assertCorrectSetup("jdbc-config.xml", "derbyDataSource");, +	public void createWithResourcePattern() throws Exception {, +		assertCorrectSetup("jdbc-config-pattern.xml", "dataSource");, +	public void createWithEndings() throws Exception {, +		assertCorrectSetupAndCloseContext("jdbc-initialize-endings-config.xml", 2, "dataSource");, +	public void createWithEndingsNested() throws Exception {, +		assertCorrectSetupAndCloseContext("jdbc-initialize-endings-nested-config.xml", 2, "dataSource");, +	public void createAndDestroy() throws Exception {, +		ClassPathXmlApplicationContext context = context("jdbc-destroy-config.xml");, +			assertNumRowsInTestTable(template, 1);, +			assertNumRowsInTestTable(template, 1);, +	public void createAndDestroyNestedWithHsql() throws Exception {, +		ClassPathXmlApplicationContext context = context("jdbc-destroy-nested-config.xml");, +			assertNumRowsInTestTable(template, 1);, +			assertNumRowsInTestTable(template, 1);, +	public void createAndDestroyNestedWithH2() throws Exception {, +		ClassPathXmlApplicationContext context = context("jdbc-destroy-nested-config-h2.xml");, +		try {, +			DataSource dataSource = context.getBean(DataSource.class);, +			JdbcTemplate template = new JdbcTemplate(dataSource);, +			assertNumRowsInTestTable(template, 1);, +			context.getBean(EmbeddedDatabaseFactoryBean.class).destroy();, +			expected.expect(BadSqlGrammarException.class); // Table has been dropped, +			assertNumRowsInTestTable(template, 1);, +		}, +		finally {]