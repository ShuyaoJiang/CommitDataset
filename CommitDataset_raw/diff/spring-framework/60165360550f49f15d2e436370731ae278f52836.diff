[+++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/CompositeMessageConverter.java, + * A {@link MessageConverter} that delegates to a list of other converters, + * to be invoked until one of them returns a non-null result., +	 * Create an instance with the given converters., +		Assert.notEmpty(converters, "Converters must not be empty");, +	public List<MessageConverter> getConverters() {, +		return "CompositeMessageConverter[converters=" + this.converters + "]";, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/CompositeMessageConverter.java, + * A {@link MessageConverter} that delegates to a list of other converters, + * to be invoked until one of them returns a non-null result., +	 * Create an instance with the given converters., +		Assert.notEmpty(converters, "Converters must not be empty");, +	public List<MessageConverter> getConverters() {, +		return "CompositeMessageConverter[converters=" + this.converters + "]";, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, +				DefaultContentTypeResolver resolver = new DefaultContentTypeResolver();, +				resolver.setDefaultMimeType(MimeTypeUtils.APPLICATION_JSON);, +				MappingJackson2MessageConverter converter = new MappingJackson2MessageConverter();, +				converter.setContentTypeResolver(resolver);, +				converters.add(converter);, +		return new CompositeMessageConverter(converters);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/CompositeMessageConverter.java, + * A {@link MessageConverter} that delegates to a list of other converters, + * to be invoked until one of them returns a non-null result., +	 * Create an instance with the given converters., +		Assert.notEmpty(converters, "Converters must not be empty");, +	public List<MessageConverter> getConverters() {, +		return "CompositeMessageConverter[converters=" + this.converters + "]";, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, +				DefaultContentTypeResolver resolver = new DefaultContentTypeResolver();, +				resolver.setDefaultMimeType(MimeTypeUtils.APPLICATION_JSON);, +				MappingJackson2MessageConverter converter = new MappingJackson2MessageConverter();, +				converter.setContentTypeResolver(resolver);, +				converters.add(converter);, +		return new CompositeMessageConverter(converters);, +++ b/spring-messaging/src/test/java/org/springframework/messaging/core/MessageSendingTemplateTests.java, +				Arrays.<MessageConverter>asList(new MappingJackson2MessageConverter()));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/CompositeMessageConverter.java, + * A {@link MessageConverter} that delegates to a list of other converters, + * to be invoked until one of them returns a non-null result., +	 * Create an instance with the given converters., +		Assert.notEmpty(converters, "Converters must not be empty");, +	public List<MessageConverter> getConverters() {, +		return "CompositeMessageConverter[converters=" + this.converters + "]";, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, +				DefaultContentTypeResolver resolver = new DefaultContentTypeResolver();, +				resolver.setDefaultMimeType(MimeTypeUtils.APPLICATION_JSON);, +				MappingJackson2MessageConverter converter = new MappingJackson2MessageConverter();, +				converter.setContentTypeResolver(resolver);, +				converters.add(converter);, +		return new CompositeMessageConverter(converters);, +++ b/spring-messaging/src/test/java/org/springframework/messaging/core/MessageSendingTemplateTests.java, +				Arrays.<MessageConverter>asList(new MappingJackson2MessageConverter()));, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/config/MessageBrokerConfigurationTests.java, +		List<MessageConverter> converters = compositeConverter.getConverters();, +		assertThat(converters.size(), Matchers.is(3));, +		assertThat(converters.get(0), Matchers.instanceOf(MappingJackson2MessageConverter.class));, +		assertThat(converters.get(1), Matchers.instanceOf(StringMessageConverter.class));, +		assertThat(converters.get(2), Matchers.instanceOf(ByteArrayMessageConverter.class));, +		ContentTypeResolver resolver = ((MappingJackson2MessageConverter) converters.get(0)).getContentTypeResolver();, +		assertEquals(MimeTypeUtils.APPLICATION_JSON, ((DefaultContentTypeResolver) resolver).getDefaultMimeType());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/CompositeMessageConverter.java, + * A {@link MessageConverter} that delegates to a list of other converters, + * to be invoked until one of them returns a non-null result., +	 * Create an instance with the given converters., +		Assert.notEmpty(converters, "Converters must not be empty");, +	public List<MessageConverter> getConverters() {, +		return "CompositeMessageConverter[converters=" + this.converters + "]";, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/AbstractMessageBrokerConfiguration.java, +				DefaultContentTypeResolver resolver = new DefaultContentTypeResolver();, +				resolver.setDefaultMimeType(MimeTypeUtils.APPLICATION_JSON);, +				MappingJackson2MessageConverter converter = new MappingJackson2MessageConverter();, +				converter.setContentTypeResolver(resolver);, +				converters.add(converter);, +		return new CompositeMessageConverter(converters);, +++ b/spring-messaging/src/test/java/org/springframework/messaging/core/MessageSendingTemplateTests.java, +				Arrays.<MessageConverter>asList(new MappingJackson2MessageConverter()));, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/config/MessageBrokerConfigurationTests.java, +		List<MessageConverter> converters = compositeConverter.getConverters();, +		assertThat(converters.size(), Matchers.is(3));, +		assertThat(converters.get(0), Matchers.instanceOf(MappingJackson2MessageConverter.class));, +		assertThat(converters.get(1), Matchers.instanceOf(StringMessageConverter.class));, +		assertThat(converters.get(2), Matchers.instanceOf(ByteArrayMessageConverter.class));, +		ContentTypeResolver resolver = ((MappingJackson2MessageConverter) converters.get(0)).getContentTypeResolver();, +		assertEquals(MimeTypeUtils.APPLICATION_JSON, ((DefaultContentTypeResolver) resolver).getDefaultMimeType());, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java, +				RootBeanDefinition jacksonConverterDef = new RootBeanDefinition(MappingJackson2MessageConverter.class);, +				RootBeanDefinition resolverDef = new RootBeanDefinition(DefaultContentTypeResolver.class);, +				resolverDef.getPropertyValues().add("defaultMimeType", MimeTypeUtils.APPLICATION_JSON);, +				jacksonConverterDef.getPropertyValues().add("contentTypeResolver", resolverDef);, +				convertersDef.add(jacksonConverterDef);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/converter/CompositeMessageConverter.java, + * A {@link MessageConverter} that delegates to a list of other converters, + * to be invoked until one of them returns a non-null result., +	 * Create an instance with the given converters.]