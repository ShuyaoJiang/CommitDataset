[+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +	private static final Pattern FORWARDED_HOST_PATTERN = Pattern.compile("host=\"?([^;,\"]+)\"?");, +, +	private static final Pattern FORWARDED_PROTO_PATTERN = Pattern.compile("proto=\"?([^;,\"]+)\"?");, +, +	 * "Forwarded" (<a href="http://tools.ietf.org/html/rfc7239">RFC 7239</a>, or, +	 * "X-Forwarded-Host", "X-Forwarded-Port", and "X-Forwarded-Proto" if "Forwarded" is, +	 * not found., +		String forwardedHeader = request.getHeaders().getFirst("Forwarded");, +		if (StringUtils.hasText(forwardedHeader)) {, +			String forwardedToUse = StringUtils.commaDelimitedListToStringArray(forwardedHeader)[0];, +			Matcher m = FORWARDED_HOST_PATTERN.matcher(forwardedToUse);, +			if (m.find()) {, +				host = m.group(1).trim();, +			}, +			m = FORWARDED_PROTO_PATTERN.matcher(forwardedToUse);, +			if (m.find()) {, +				scheme = m.group(1).trim();, +			}, +		}, +		else {, +		}, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +	private static final Pattern FORWARDED_HOST_PATTERN = Pattern.compile("host=\"?([^;,\"]+)\"?");, +, +	private static final Pattern FORWARDED_PROTO_PATTERN = Pattern.compile("proto=\"?([^;,\"]+)\"?");, +, +	 * "Forwarded" (<a href="http://tools.ietf.org/html/rfc7239">RFC 7239</a>, or, +	 * "X-Forwarded-Host", "X-Forwarded-Port", and "X-Forwarded-Proto" if "Forwarded" is, +	 * not found., +		String forwardedHeader = request.getHeaders().getFirst("Forwarded");, +		if (StringUtils.hasText(forwardedHeader)) {, +			String forwardedToUse = StringUtils.commaDelimitedListToStringArray(forwardedHeader)[0];, +			Matcher m = FORWARDED_HOST_PATTERN.matcher(forwardedToUse);, +			if (m.find()) {, +				host = m.group(1).trim();, +			}, +			m = FORWARDED_PROTO_PATTERN.matcher(forwardedToUse);, +			if (m.find()) {, +				scheme = m.group(1).trim();, +			}, +		}, +		else {, +		}, +++ b/spring-web/src/test/java/org/springframework/web/util/UriComponentsBuilderTests.java, +	// SPR-11856, +, +	@Test, +	public void fromHttpRequestForwardedHeader() throws Exception {, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		request.addHeader("Forwarded", "proto=https; host=84.198.58.199");, +		request.setScheme("http");, +		request.setServerName("example.com");, +		request.setRequestURI("/rest/mobile/users/1");, +, +		HttpRequest httpRequest = new ServletServerHttpRequest(request);, +		UriComponents result = UriComponentsBuilder.fromHttpRequest(httpRequest).build();, +, +		assertEquals("https", result.getScheme());, +		assertEquals("84.198.58.199", result.getHost());, +		assertEquals("/rest/mobile/users/1", result.getPath());, +	}, +, +	@Test, +	public void fromHttpRequestForwardedHeaderQuoted() throws Exception {, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		request.addHeader("Forwarded", "proto=\"https\"; host=\"84.198.58.199\"");, +		request.setScheme("http");, +		request.setServerName("example.com");, +		request.setRequestURI("/rest/mobile/users/1");, +, +		HttpRequest httpRequest = new ServletServerHttpRequest(request);, +		UriComponents result = UriComponentsBuilder.fromHttpRequest(httpRequest).build();, +, +		assertEquals("https", result.getScheme());, +		assertEquals("84.198.58.199", result.getHost());, +		assertEquals("/rest/mobile/users/1", result.getPath());, +	}, +, +	@Test, +	public void fromHttpRequestMultipleForwardedHeader() throws Exception {, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		request.addHeader("Forwarded", "host=84.198.58.199;proto=https");, +		request.addHeader("Forwarded", "proto=ftp; host=1.2.3.4");, +		request.setScheme("http");, +		request.setServerName("example.com");, +		request.setRequestURI("/rest/mobile/users/1");, +, +		HttpRequest httpRequest = new ServletServerHttpRequest(request);, +		UriComponents result = UriComponentsBuilder.fromHttpRequest(httpRequest).build();, +, +		assertEquals("https", result.getScheme());, +		assertEquals("84.198.58.199", result.getHost());, +		assertEquals("/rest/mobile/users/1", result.getPath());, +	}, +, +	@Test, +	public void fromHttpRequestMultipleForwardedHeaderComma() throws Exception {, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		request.addHeader("Forwarded", "host=84.198.58.199 ;proto=https, proto=ftp; host=1.2.3.4");]