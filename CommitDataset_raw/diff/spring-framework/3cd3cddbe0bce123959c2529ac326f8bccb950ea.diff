[+++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/BindingRule.java, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/BindingRule.java, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/BindingStatusResult.java, +	public String toString() {, +		return getAlert().toString();, +	}, +	, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/BindingRule.java, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/BindingStatusResult.java, +	public String toString() {, +		return getAlert().toString();, +	}, +	, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/FormatterRegistry.java, +import java.beans.PropertyDescriptor;, +, +	Formatter<?> getFormatter(PropertyDescriptor property);, +, +	 * Get the Formatter for the type., +	Formatter<?> getFormatter(Class<?> type);, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/BindingRule.java, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/BindingStatusResult.java, +	public String toString() {, +		return getAlert().toString();, +	}, +	, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/FormatterRegistry.java, +import java.beans.PropertyDescriptor;, +, +	Formatter<?> getFormatter(PropertyDescriptor property);, +, +	 * Get the Formatter for the type., +	Formatter<?> getFormatter(Class<?> type);, +++ b/org.springframework.context/src/main/java/org/springframework/ui/binding/support/GenericBinder.java, +import java.beans.BeanInfo;, +import java.beans.IntrospectionException;, +import java.beans.Introspector;, +import java.beans.PropertyDescriptor;, +import org.springframework.core.GenericCollectionTypeResolver;, +import org.springframework.core.convert.TypeDescriptor;, +	private FormatterRegistry formatterRegistry;, +	, +		formatterRegistry = new GenericFormatterRegistry();, +	 * Configures the registry of Formatters to query when no explicit Formatter has been registered for a Binding., +	 * Allows Formatters to be applied by property type and by property annotation., +	 * @param registry the formatter registry, +	 */, +	public void setFormatterRegistry(FormatterRegistry formatterRegistry) {, +		Assert.notNull(formatterRegistry, "The FormatterRegistry is required");, +		this.formatterRegistry = formatterRegistry;, +	}, +	, +	/**, +			rule = new GenericBindingRule(property, model.getClass());, +	class GenericBindingRule implements BindingRuleConfiguration, BindingContext {, +		private Class<?> modelClass;, +		private PropertyDescriptor property;, +		private Formatter formatter;, +		private Formatter elementFormatter;, +		, +		private Formatter keyFormatter;, +		public GenericBindingRule(String property, Class modelClass) {, +			this.modelClass = modelClass;, +			this.property = findPropertyDescriptor(property);, +		// implementing BindingContext, +		public TypeConverter getTypeConverter() {, +			return typeConverter;, +			if (formatter != null) {, +			} else {, +				return formatterRegistry.getFormatter(property);, +			}, +			if (elementFormatter != null) {, +				return formatter;, +			} else {, +				return formatterRegistry.getFormatter(getElementType());, +			}, +			if (keyFormatter != null) {, +			} else {, +				return formatterRegistry.getFormatter(getKeyType());, +			}, +		public Binding getBinding(String property, Object model) {, +			return getBindingRule(property).getBinding(model);, +		}, +, +		// internal helpers, +, +		private Class<?> getElementType() {, +			return GenericCollectionTypeResolver.getCollectionReturnType(property.getReadMethod());, +		}, +, +		private Class<?> getKeyType() {, +			return GenericCollectionTypeResolver.getMapKeyReturnType(property.getReadMethod());, +		}, +, +				rule = new GenericBindingRule(property, this.property.getPropertyType());, +				binding = new PropertyBinding(property, model, this);, +		private PropertyDescriptor findPropertyDescriptor(String property) {, +			PropertyDescriptor[] propDescs = getBeanInfo(modelClass).getPropertyDescriptors();, +			for (PropertyDescriptor propDesc : propDescs) {, +				if (propDesc.getName().equals(property)) {]