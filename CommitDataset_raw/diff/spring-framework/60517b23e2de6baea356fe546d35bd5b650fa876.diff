[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/DefaultStompSession.java, +		Assert.hasText(stompHeaders.getDestination(), "Destination header is required");, +		checkOrAddReceipt(stompHeaders);, +		Subscription subscription = new DefaultSubscription(stompHeaders, handler);, +	private void unsubscribe(String id, StompHeaders stompHeaders) {, +		if (stompHeaders != null) {, +			accessor.addNativeHeaders(stompHeaders);, +		}, +		private final StompHeaders headers;, +		public DefaultSubscription(StompHeaders headers, StompFrameHandler handler) {, +			super(headers.getReceipt());, +			Assert.notNull(headers.getDestination(), "Destination must not be null");, +			this.headers = headers;, +			DefaultStompSession.this.subscriptions.put(headers.getId(), this);, +			return this.headers.getId();, +		@Override, +		public StompHeaders getSubscriptionHeaders() {, +			return this.headers;, +			unsubscribe(null);, +		}, +, +		@Override, +		public void unsubscribe(StompHeaders stompHeaders) {, +			String id = this.headers.getId();, +			DefaultStompSession.this.subscriptions.remove(id);, +			DefaultStompSession.this.unsubscribe(id, stompHeaders);, +			return "Subscription [id=" + getSubscriptionId() +, +					", destination='" + this.headers.getDestination() +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/DefaultStompSession.java, +		Assert.hasText(stompHeaders.getDestination(), "Destination header is required");, +		checkOrAddReceipt(stompHeaders);, +		Subscription subscription = new DefaultSubscription(stompHeaders, handler);, +	private void unsubscribe(String id, StompHeaders stompHeaders) {, +		if (stompHeaders != null) {, +			accessor.addNativeHeaders(stompHeaders);, +		}, +		private final StompHeaders headers;, +		public DefaultSubscription(StompHeaders headers, StompFrameHandler handler) {, +			super(headers.getReceipt());, +			Assert.notNull(headers.getDestination(), "Destination must not be null");, +			this.headers = headers;, +			DefaultStompSession.this.subscriptions.put(headers.getId(), this);, +			return this.headers.getId();, +		@Override, +		public StompHeaders getSubscriptionHeaders() {, +			return this.headers;, +			unsubscribe(null);, +		}, +, +		@Override, +		public void unsubscribe(StompHeaders stompHeaders) {, +			String id = this.headers.getId();, +			DefaultStompSession.this.subscriptions.remove(id);, +			DefaultStompSession.this.unsubscribe(id, stompHeaders);, +			return "Subscription [id=" + getSubscriptionId() +, +					", destination='" + this.headers.getDestination() +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompSession.java, + * Copyright 2002-2017 the original author or authors., +		 * Return the headers used on the SUBSCRIBE frame., +		 */, +		StompHeaders getSubscriptionHeaders();, +, +		/**, +, +		/**, +		 * Alternative to {@link #unsubscribe()} with additional custom headers, +		 * to send to the server., +		 * <p><strong>Note:</strong> There is no need to set the subscription id., +		 */, +		void unsubscribe(StompHeaders stompHeaders);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/DefaultStompSession.java, +		Assert.hasText(stompHeaders.getDestination(), "Destination header is required");, +		checkOrAddReceipt(stompHeaders);, +		Subscription subscription = new DefaultSubscription(stompHeaders, handler);, +	private void unsubscribe(String id, StompHeaders stompHeaders) {, +		if (stompHeaders != null) {, +			accessor.addNativeHeaders(stompHeaders);, +		}, +		private final StompHeaders headers;, +		public DefaultSubscription(StompHeaders headers, StompFrameHandler handler) {, +			super(headers.getReceipt());, +			Assert.notNull(headers.getDestination(), "Destination must not be null");, +			this.headers = headers;, +			DefaultStompSession.this.subscriptions.put(headers.getId(), this);, +			return this.headers.getId();, +		@Override, +		public StompHeaders getSubscriptionHeaders() {, +			return this.headers;, +			unsubscribe(null);, +		}, +, +		@Override, +		public void unsubscribe(StompHeaders stompHeaders) {, +			String id = this.headers.getId();, +			DefaultStompSession.this.subscriptions.remove(id);, +			DefaultStompSession.this.unsubscribe(id, stompHeaders);, +			return "Subscription [id=" + getSubscriptionId() +, +					", destination='" + this.headers.getDestination() +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompSession.java, + * Copyright 2002-2017 the original author or authors.]