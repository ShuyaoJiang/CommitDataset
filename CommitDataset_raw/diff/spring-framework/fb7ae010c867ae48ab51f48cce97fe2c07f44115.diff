[+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +			return (result != null ? result : Collections.emptyList());, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +			return (result != null ? result : Collections.emptyList());, +++ b/spring-context/src/main/java/org/springframework/scheduling/config/ScheduledTaskRegistrar.java, +				Collections.emptyList());, +				Collections.emptyList());, +				Collections.emptyList());, +				Collections.emptyList());, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +			return (result != null ? result : Collections.emptyList());, +++ b/spring-context/src/main/java/org/springframework/scheduling/config/ScheduledTaskRegistrar.java, +				Collections.emptyList());, +				Collections.emptyList());, +				Collections.emptyList());, +				Collections.emptyList());, +++ b/spring-core/src/main/java/org/springframework/core/Conventions.java, +, +		IGNORED_INTERFACES = Collections.unmodifiableSet(new HashSet<>(, +				Arrays.asList(Serializable.class, Externalizable.class, Cloneable.class, Comparable.class)));, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +			return (result != null ? result : Collections.emptyList());, +++ b/spring-context/src/main/java/org/springframework/scheduling/config/ScheduledTaskRegistrar.java, +				Collections.emptyList());, +				Collections.emptyList());, +				Collections.emptyList());, +				Collections.emptyList());, +++ b/spring-core/src/main/java/org/springframework/core/Conventions.java, +, +		IGNORED_INTERFACES = Collections.unmodifiableSet(new HashSet<>(, +				Arrays.asList(Serializable.class, Externalizable.class, Cloneable.class, Comparable.class)));, +++ b/spring-core/src/main/java/org/springframework/core/env/JOptCommandLinePropertySource.java, +			return (this.source.has(name) ? Collections.emptyList() : null);, +		return (stringArgValues.isEmpty() ? Collections.emptyList() :, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +			return (result != null ? result : Collections.emptyList());, +++ b/spring-context/src/main/java/org/springframework/scheduling/config/ScheduledTaskRegistrar.java, +				Collections.emptyList());, +				Collections.emptyList());, +				Collections.emptyList());, +				Collections.emptyList());, +++ b/spring-core/src/main/java/org/springframework/core/Conventions.java, +, +		IGNORED_INTERFACES = Collections.unmodifiableSet(new HashSet<>(, +				Arrays.asList(Serializable.class, Externalizable.class, Cloneable.class, Comparable.class)));, +++ b/spring-core/src/main/java/org/springframework/core/env/JOptCommandLinePropertySource.java, +			return (this.source.has(name) ? Collections.emptyList() : null);, +		return (stringArgValues.isEmpty() ? Collections.emptyList() :, +++ b/spring-core/src/main/java/org/springframework/util/InstanceFilter.java, + * Copyright 2002-2016 the original author or authors., +		this.includes = (includes != null ? includes : Collections.emptyList());, +		this.excludes = (excludes != null ? excludes : Collections.emptyList());, +		Assert.notNull(instance, "Instance to match must not be null");, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +			return (result != null ? result : Collections.emptyList());, +++ b/spring-context/src/main/java/org/springframework/scheduling/config/ScheduledTaskRegistrar.java, +				Collections.emptyList());, +				Collections.emptyList());, +				Collections.emptyList());, +				Collections.emptyList());, +++ b/spring-core/src/main/java/org/springframework/core/Conventions.java, +, +		IGNORED_INTERFACES = Collections.unmodifiableSet(new HashSet<>(, +				Arrays.asList(Serializable.class, Externalizable.class, Cloneable.class, Comparable.class)));, +++ b/spring-core/src/main/java/org/springframework/core/env/JOptCommandLinePropertySource.java, +			return (this.source.has(name) ? Collections.emptyList() : null);, +		return (stringArgValues.isEmpty() ? Collections.emptyList() :, +++ b/spring-core/src/main/java/org/springframework/util/InstanceFilter.java, + * Copyright 2002-2016 the original author or authors., +		this.includes = (includes != null ? includes : Collections.emptyList());, +		this.excludes = (excludes != null ? excludes : Collections.emptyList());, +		Assert.notNull(instance, "Instance to match must not be null");, +++ b/spring-core/src/main/java/org/springframework/util/MimeType.java, +		this(type, subtype, Collections.emptyMap());, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +			return (result != null ? result : Collections.emptyList());, +++ b/spring-context/src/main/java/org/springframework/scheduling/config/ScheduledTaskRegistrar.java, +				Collections.emptyList());, +				Collections.emptyList());, +				Collections.emptyList());, +				Collections.emptyList());, +++ b/spring-core/src/main/java/org/springframework/core/Conventions.java, +, +		IGNORED_INTERFACES = Collections.unmodifiableSet(new HashSet<>(, +				Arrays.asList(Serializable.class, Externalizable.class, Cloneable.class, Comparable.class)));, +++ b/spring-core/src/main/java/org/springframework/core/env/JOptCommandLinePropertySource.java, +			return (this.source.has(name) ? Collections.emptyList() : null);, +		return (stringArgValues.isEmpty() ? Collections.emptyList() :, +++ b/spring-core/src/main/java/org/springframework/util/InstanceFilter.java, + * Copyright 2002-2016 the original author or authors., +		this.includes = (includes != null ? includes : Collections.emptyList());, +		this.excludes = (excludes != null ? excludes : Collections.emptyList());, +		Assert.notNull(instance, "Instance to match must not be null");, +++ b/spring-core/src/main/java/org/springframework/util/MimeType.java, +		this(type, subtype, Collections.emptyMap());, +++ b/spring-core/src/main/java/org/springframework/util/xml/SimpleNamespaceContext.java, +			return (prefixes != null ?  Collections.unmodifiableSet(prefixes) : Collections.emptySet());, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +			return (result != null ? result : Collections.emptyList());, +++ b/spring-context/src/main/java/org/springframework/scheduling/config/ScheduledTaskRegistrar.java]