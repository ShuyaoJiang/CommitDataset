[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +			Annotation[] annotations =, +					(traverseClassHierarchy ? element.getDeclaredAnnotations() : element.getAnnotations());, +					T result = doProcess(superclass, annotationType, true, processor, visited,, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +			Annotation[] annotations =, +					(traverseClassHierarchy ? element.getDeclaredAnnotations() : element.getAnnotations());, +					T result = doProcess(superclass, annotationType, true, processor, visited,, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +	 * @see org.springframework.core.BridgeMethodResolver#findBridgedMethod(Method), +, +		return getRepeatableAnnotation((AnnotatedElement) resolvedMethod, containerAnnotationType, annotationType);, +	 * @see org.springframework.core.BridgeMethodResolver#findBridgedMethod(Method), +, +							getAnnotationAttributes((Annotation) value, classValuesAsString, true));, +									realAnnotations[i], classValuesAsString, true);, +			Method method = annotation.annotationType().getDeclaredMethod(attributeName);, +			return annotationType.getDeclaredMethod(attributeName).getDefaultValue();, +		public AnnotationCollector(Class<? extends Annotation> containerAnnotationType, Class<A> annotationType) {, +, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +			Annotation[] annotations =, +					(traverseClassHierarchy ? element.getDeclaredAnnotations() : element.getAnnotations());, +					T result = doProcess(superclass, annotationType, true, processor, visited,, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +	 * @see org.springframework.core.BridgeMethodResolver#findBridgedMethod(Method), +, +		return getRepeatableAnnotation((AnnotatedElement) resolvedMethod, containerAnnotationType, annotationType);, +	 * @see org.springframework.core.BridgeMethodResolver#findBridgedMethod(Method), +, +							getAnnotationAttributes((Annotation) value, classValuesAsString, true));, +									realAnnotations[i], classValuesAsString, true);, +			Method method = annotation.annotationType().getDeclaredMethod(attributeName);, +			return annotationType.getDeclaredMethod(attributeName).getDefaultValue();, +		public AnnotationCollector(Class<? extends Annotation> containerAnnotationType, Class<A> annotationType) {, +, +++ b/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationMetadataReadingVisitor.java, +		AnnotationAttributes raw = AnnotationReadingVisitorUtils.getMergedAnnotationAttributes(, +				this.attributesMap, annotationType);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +			Annotation[] annotations =, +					(traverseClassHierarchy ? element.getDeclaredAnnotations() : element.getAnnotations());, +					T result = doProcess(superclass, annotationType, true, processor, visited,, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +	 * @see org.springframework.core.BridgeMethodResolver#findBridgedMethod(Method), +, +		return getRepeatableAnnotation((AnnotatedElement) resolvedMethod, containerAnnotationType, annotationType);, +	 * @see org.springframework.core.BridgeMethodResolver#findBridgedMethod(Method), +, +							getAnnotationAttributes((Annotation) value, classValuesAsString, true));, +									realAnnotations[i], classValuesAsString, true);, +			Method method = annotation.annotationType().getDeclaredMethod(attributeName);, +			return annotationType.getDeclaredMethod(attributeName).getDefaultValue();, +		public AnnotationCollector(Class<? extends Annotation> containerAnnotationType, Class<A> annotationType) {, +, +++ b/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationMetadataReadingVisitor.java, +		AnnotationAttributes raw = AnnotationReadingVisitorUtils.getMergedAnnotationAttributes(, +				this.attributesMap, annotationType);, +++ b/spring-core/src/main/java/org/springframework/core/type/filter/AssignableTypeFilter.java, + * Copyright 2002-2014 the original author or authors., +			return false;, +				return this.targetType.isAssignableFrom(clazz);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +			Annotation[] annotations =, +					(traverseClassHierarchy ? element.getDeclaredAnnotations() : element.getAnnotations());, +					T result = doProcess(superclass, annotationType, true, processor, visited,, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +	 * @see org.springframework.core.BridgeMethodResolver#findBridgedMethod(Method), +, +		return getRepeatableAnnotation((AnnotatedElement) resolvedMethod, containerAnnotationType, annotationType);, +	 * @see org.springframework.core.BridgeMethodResolver#findBridgedMethod(Method), +, +							getAnnotationAttributes((Annotation) value, classValuesAsString, true));, +									realAnnotations[i], classValuesAsString, true);, +			Method method = annotation.annotationType().getDeclaredMethod(attributeName);, +			return annotationType.getDeclaredMethod(attributeName).getDefaultValue();, +		public AnnotationCollector(Class<? extends Annotation> containerAnnotationType, Class<A> annotationType) {, +, +++ b/spring-core/src/main/java/org/springframework/core/type/classreading/AnnotationMetadataReadingVisitor.java, +		AnnotationAttributes raw = AnnotationReadingVisitorUtils.getMergedAnnotationAttributes(, +				this.attributesMap, annotationType);, +++ b/spring-core/src/main/java/org/springframework/core/type/filter/AssignableTypeFilter.java, + * Copyright 2002-2014 the original author or authors., +			return false;, +				return this.targetType.isAssignableFrom(clazz);, +++ b/spring-core/src/main/java/org/springframework/util/MimeType.java, + * Copyright 2002-2014 the original author or authors., +		return (this.type.equalsIgnoreCase(otherType.type) &&, +				this.subtype.equalsIgnoreCase(otherType.subtype) &&]