[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/StandardTypeConverter.java, +import org.springframework.core.convert.support.DefaultConversionService;, +	private org.springframework.core.convert.TypeConverter typeConverter;, +		this.typeConverter = new DefaultConversionService();, +	public StandardTypeConverter(org.springframework.core.convert.TypeConverter typeConverter) {, +		Assert.notNull(typeConverter, "TypeConverter must not be null");, +		this.typeConverter = typeConverter;, +	@SuppressWarnings("unchecked"), +			return this.typeConverter.convert(value, typeDescriptor);, +		}, +		catch (ConverterNotFoundException cenfe) {, +		}, +		catch (ConvertException ce) {, +		return this.typeConverter.canConvert(sourceType, targetType);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/StandardTypeConverter.java, +import org.springframework.core.convert.support.DefaultConversionService;, +	private org.springframework.core.convert.TypeConverter typeConverter;, +		this.typeConverter = new DefaultConversionService();, +	public StandardTypeConverter(org.springframework.core.convert.TypeConverter typeConverter) {, +		Assert.notNull(typeConverter, "TypeConverter must not be null");, +		this.typeConverter = typeConverter;, +	@SuppressWarnings("unchecked"), +			return this.typeConverter.convert(value, typeDescriptor);, +		}, +		catch (ConverterNotFoundException cenfe) {, +		}, +		catch (ConvertException ce) {, +		return this.typeConverter.canConvert(sourceType, targetType);, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/ExpressionTestsUsingCoreConversionService.java, +import org.springframework.core.convert.support.DefaultConversionService;, +import org.springframework.core.convert.support.GenericConversionService;, +		List l = (List) tcs.convertValue(listOfInteger, typeDescriptorForListOfString);, +		l = (List) tcs.convertValue(listOfString, typeDescriptorForListOfString);, +	 * Type converter that uses the core conversion service., +	private static class TypeConvertorUsingConversionService implements TypeConverter {, +, +		private final DefaultConversionService service = new DefaultConversionService();, +			return this.service.canConvert(sourceType, TypeDescriptor.valueOf(targetType));, +			return this.service.canConvert(sourceType, typeDescriptor);, +			return (T) this.service.convert(value,TypeDescriptor.valueOf(targetType));, +		public Object convertValue(Object value, TypeDescriptor typeDescriptor) throws EvaluationException {, +			return this.service.convert(value, typeDescriptor);]