[+++ b/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedAnnotationInvocationHandler.java, +import static org.springframework.core.annotation.AnnotationUtils.*;, +, +	SynthesizedAnnotationInvocationHandler(AnnotatedElement annotatedElement, Annotation annotation,, +		if ("equals".equals(methodName) && (parameterCount == 1) && (parameterTypes[0] == Object.class)) {, +			return equals(proxy, args[0]);, +		}, +		else if ("toString".equals(methodName) && (parameterCount == 0)) {, +		// No custom processing necessary?, +			Object defaultValue = getDefaultValue(this.annotation, methodName);, +				String elementName = (this.annotatedElement == null ? "unknown element", +						: this.annotatedElement.toString());, +			value = synthesizeAnnotation((Annotation) value, this.annotatedElement);, +				annotations[i] = synthesizeAnnotation(annotations[i], this.annotatedElement);, +	private boolean equals(Object proxy, Object other) {, +		if (this == other) {, +			return true;, +		}, +		if (!this.annotationType.isInstance(other)) {, +			return false;, +		}, +, +		for (Method attributeMethod : getAttributeMethods(this.annotationType)) {, +			Object thisValue = ReflectionUtils.invokeMethod(attributeMethod, proxy);, +			Object otherValue = ReflectionUtils.invokeMethod(attributeMethod, other);, +			if (!ObjectUtils.nullSafeEquals(thisValue, otherValue)) {, +				return false;, +			}, +		}, +, +		return true;, +	}, +, +		Iterator<Method> iterator = getAttributeMethods(this.annotationType).iterator();, +++ b/spring-core/src/main/java/org/springframework/core/annotation/SynthesizedAnnotationInvocationHandler.java, +import static org.springframework.core.annotation.AnnotationUtils.*;, +, +	SynthesizedAnnotationInvocationHandler(AnnotatedElement annotatedElement, Annotation annotation,, +		if ("equals".equals(methodName) && (parameterCount == 1) && (parameterTypes[0] == Object.class)) {, +			return equals(proxy, args[0]);, +		}, +		else if ("toString".equals(methodName) && (parameterCount == 0)) {, +		// No custom processing necessary?, +			Object defaultValue = getDefaultValue(this.annotation, methodName);, +				String elementName = (this.annotatedElement == null ? "unknown element", +						: this.annotatedElement.toString());, +			value = synthesizeAnnotation((Annotation) value, this.annotatedElement);, +				annotations[i] = synthesizeAnnotation(annotations[i], this.annotatedElement);, +	private boolean equals(Object proxy, Object other) {, +		if (this == other) {, +			return true;, +		}, +		if (!this.annotationType.isInstance(other)) {, +			return false;, +		}, +, +		for (Method attributeMethod : getAttributeMethods(this.annotationType)) {, +			Object thisValue = ReflectionUtils.invokeMethod(attributeMethod, proxy);, +			Object otherValue = ReflectionUtils.invokeMethod(attributeMethod, other);, +			if (!ObjectUtils.nullSafeEquals(thisValue, otherValue)) {, +				return false;, +			}, +		}, +, +		return true;, +	}, +, +		Iterator<Method> iterator = getAttributeMethods(this.annotationType).iterator();, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java, +	@Test, +	public void equalsForSynthesizedAnnotations() throws Exception {, +		Method methodWithPath = WebController.class.getMethod("handleMappedWithPathAttribute");, +		WebMapping webMappingWithAliases = methodWithPath.getAnnotation(WebMapping.class);, +		assertNotNull(webMappingWithAliases);, +, +		Method methodWithPathAndValue = WebController.class.getMethod("handleMappedWithSamePathAndValueAttributes");, +		WebMapping webMappingWithPathAndValue = methodWithPathAndValue.getAnnotation(WebMapping.class);, +		assertNotNull(webMappingWithPathAndValue);, +, +		WebMapping synthesizedWebMapping1 = synthesizeAnnotation(webMappingWithAliases);, +		assertNotNull(synthesizedWebMapping1);, +		WebMapping synthesizedWebMapping2 = synthesizeAnnotation(webMappingWithAliases);, +		assertNotNull(synthesizedWebMapping2);, +, +		// Equality amongst standard annotations, +		assertThat(webMappingWithAliases, is(webMappingWithAliases));, +		assertThat(webMappingWithPathAndValue, is(webMappingWithPathAndValue));, +, +		// Inequality amongst standard annotations, +		assertThat(webMappingWithAliases, is(not(webMappingWithPathAndValue)));, +		assertThat(webMappingWithPathAndValue, is(not(webMappingWithAliases)));, +, +		// Equality amongst synthesized annotations, +		assertThat(synthesizedWebMapping1, is(synthesizedWebMapping1));, +		assertThat(synthesizedWebMapping2, is(synthesizedWebMapping2));, +		assertThat(synthesizedWebMapping1, is(synthesizedWebMapping2));, +		assertThat(synthesizedWebMapping2, is(synthesizedWebMapping1));, +, +		// Equality between standard and synthesized annotations, +		assertThat(synthesizedWebMapping1, is(webMappingWithPathAndValue));]