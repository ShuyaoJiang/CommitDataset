[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanBeanDefinitionParser.java, +		String basePackage = element.getAttribute(BASE_PACKAGE_ATTRIBUTE);, +		basePackage = parserContext.getReaderContext().getEnvironment().resolvePlaceholders(basePackage);, +		String[] basePackages = StringUtils.tokenizeToStringArray(basePackage,, +		ClassPathBeanDefinitionScanner scanner = createScanner(parserContext.getReaderContext(), useDefaultFilters);, +		scanner.setResourceLoader(parserContext.getReaderContext().getResourceLoader());, +		scanner.setEnvironment(parserContext.getReaderContext().getEnvironment());, +			parserContext.getReaderContext().error(ex.getMessage(), parserContext.extractSource(element), ex.getCause());, +			parserContext.getReaderContext().error(ex.getMessage(), parserContext.extractSource(element), ex.getCause());, +		parseTypeFilters(element, scanner, parserContext);, +	protected void parseTypeFilters(Element element, ClassPathBeanDefinitionScanner scanner, ParserContext parserContext) {, +						TypeFilter typeFilter = createTypeFilter((Element) node, classLoader, parserContext);, +						TypeFilter typeFilter = createTypeFilter((Element) node, classLoader, parserContext);, +					parserContext.getReaderContext().error(, +							ex.getMessage(), parserContext.extractSource(element), ex.getCause());, +	protected TypeFilter createTypeFilter(Element element, ClassLoader classLoader, ParserContext parserContext) {, +		expression = parserContext.getReaderContext().getEnvironment().resolvePlaceholders(expression);, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanBeanDefinitionParser.java, +		String basePackage = element.getAttribute(BASE_PACKAGE_ATTRIBUTE);, +		basePackage = parserContext.getReaderContext().getEnvironment().resolvePlaceholders(basePackage);, +		String[] basePackages = StringUtils.tokenizeToStringArray(basePackage,, +		ClassPathBeanDefinitionScanner scanner = createScanner(parserContext.getReaderContext(), useDefaultFilters);, +		scanner.setResourceLoader(parserContext.getReaderContext().getResourceLoader());, +		scanner.setEnvironment(parserContext.getReaderContext().getEnvironment());, +			parserContext.getReaderContext().error(ex.getMessage(), parserContext.extractSource(element), ex.getCause());, +			parserContext.getReaderContext().error(ex.getMessage(), parserContext.extractSource(element), ex.getCause());, +		parseTypeFilters(element, scanner, parserContext);, +	protected void parseTypeFilters(Element element, ClassPathBeanDefinitionScanner scanner, ParserContext parserContext) {, +						TypeFilter typeFilter = createTypeFilter((Element) node, classLoader, parserContext);, +						TypeFilter typeFilter = createTypeFilter((Element) node, classLoader, parserContext);, +					parserContext.getReaderContext().error(, +							ex.getMessage(), parserContext.extractSource(element), ex.getCause());, +	protected TypeFilter createTypeFilter(Element element, ClassLoader classLoader, ParserContext parserContext) {, +		expression = parserContext.getReaderContext().getEnvironment().resolvePlaceholders(expression);, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanParserTests.java, +, +	public void aspectjTypeFilter() {, +	public void aspectjTypeFilterWithPlaceholders() {, +		System.setProperty("basePackage", "example.scannable, test");, +		System.setProperty("scanInclude", "example.scannable.FooService+");, +		System.setProperty("scanExclude", "example..Scoped*Test*");, +		try {, +			ClassPathXmlApplicationContext context = loadContext("aspectjTypeFilterTestsWithPlaceholders.xml");, +			assertTrue(context.containsBean("fooServiceImpl"));, +			assertTrue(context.containsBean("stubFooDao"));, +			assertFalse(context.containsBean("scopedProxyTestBean"));, +			context.close();, +		}, +		finally {, +			System.clearProperty("basePackage");, +			System.clearProperty("scanInclude");, +			System.clearProperty("scanExclude");, +		}, +	}, +, +	@Test, +, +, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanBeanDefinitionParser.java, +		String basePackage = element.getAttribute(BASE_PACKAGE_ATTRIBUTE);, +		basePackage = parserContext.getReaderContext().getEnvironment().resolvePlaceholders(basePackage);, +		String[] basePackages = StringUtils.tokenizeToStringArray(basePackage,, +		ClassPathBeanDefinitionScanner scanner = createScanner(parserContext.getReaderContext(), useDefaultFilters);, +		scanner.setResourceLoader(parserContext.getReaderContext().getResourceLoader());, +		scanner.setEnvironment(parserContext.getReaderContext().getEnvironment());, +			parserContext.getReaderContext().error(ex.getMessage(), parserContext.extractSource(element), ex.getCause());, +			parserContext.getReaderContext().error(ex.getMessage(), parserContext.extractSource(element), ex.getCause());, +		parseTypeFilters(element, scanner, parserContext);, +	protected void parseTypeFilters(Element element, ClassPathBeanDefinitionScanner scanner, ParserContext parserContext) {, +						TypeFilter typeFilter = createTypeFilter((Element) node, classLoader, parserContext);, +						TypeFilter typeFilter = createTypeFilter((Element) node, classLoader, parserContext);, +					parserContext.getReaderContext().error(, +							ex.getMessage(), parserContext.extractSource(element), ex.getCause());, +	protected TypeFilter createTypeFilter(Element element, ClassLoader classLoader, ParserContext parserContext) {, +		expression = parserContext.getReaderContext().getEnvironment().resolvePlaceholders(expression);, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanParserTests.java, +, +	public void aspectjTypeFilter() {, +	public void aspectjTypeFilterWithPlaceholders() {, +		System.setProperty("basePackage", "example.scannable, test");, +		System.setProperty("scanInclude", "example.scannable.FooService+");, +		System.setProperty("scanExclude", "example..Scoped*Test*");, +		try {, +			ClassPathXmlApplicationContext context = loadContext("aspectjTypeFilterTestsWithPlaceholders.xml");, +			assertTrue(context.containsBean("fooServiceImpl"));, +			assertTrue(context.containsBean("stubFooDao"));, +			assertFalse(context.containsBean("scopedProxyTestBean"));, +			context.close();, +		}, +		finally {, +			System.clearProperty("basePackage");, +			System.clearProperty("scanInclude");, +			System.clearProperty("scanExclude");, +		}, +	}, +, +	@Test, +, +]