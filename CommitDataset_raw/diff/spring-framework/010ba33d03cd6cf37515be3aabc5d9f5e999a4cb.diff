[+++ b/spring-orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java, +import org.springframework.transaction.support.ResourceTransactionDefinition;, +					new JpaTransactionDefinition(definition, timeoutToUse, txObject.isNewEntityManagerHolder()));, +	 * JPA-specific transaction definition to be passed to {@link JpaDialect#beginTransaction}., +	 * @since 5.1, +	 */, +	private static class JpaTransactionDefinition extends DelegatingTransactionDefinition, +			implements ResourceTransactionDefinition {, +, +		private final int timeout;, +, +		private final boolean localResource;, +, +		public JpaTransactionDefinition(TransactionDefinition targetDefinition, int timeout, boolean localResource) {, +			super(targetDefinition);, +			this.timeout = timeout;, +			this.localResource = localResource;, +		}, +, +		@Override, +		public int getTimeout() {, +			return this.timeout;, +		}, +, +		@Override, +		public boolean isLocalResource() {, +			return this.localResource;, +		}, +	}, +, +, +	/**, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java, +import org.springframework.transaction.support.ResourceTransactionDefinition;, +					new JpaTransactionDefinition(definition, timeoutToUse, txObject.isNewEntityManagerHolder()));, +	 * JPA-specific transaction definition to be passed to {@link JpaDialect#beginTransaction}., +	 * @since 5.1, +	 */, +	private static class JpaTransactionDefinition extends DelegatingTransactionDefinition, +			implements ResourceTransactionDefinition {, +, +		private final int timeout;, +, +		private final boolean localResource;, +, +		public JpaTransactionDefinition(TransactionDefinition targetDefinition, int timeout, boolean localResource) {, +			super(targetDefinition);, +			this.timeout = timeout;, +			this.localResource = localResource;, +		}, +, +		@Override, +		public int getTimeout() {, +			return this.timeout;, +		}, +, +		@Override, +		public boolean isLocalResource() {, +			return this.localResource;, +		}, +	}, +, +, +	/**, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaDialect.java, +import org.springframework.transaction.support.ResourceTransactionDefinition;, +		if (definition instanceof ResourceTransactionDefinition &&, +				((ResourceTransactionDefinition) definition).isLocalResource()) {, +			// As of 5.1, we explicitly optimize for a transaction-local EntityManager,, +			// aligned with native HibernateTransactionManager behavior., +			previousFlushMode = null;, +			if (definition.isReadOnly()) {, +				session.setDefaultReadOnly(true);, +			}, +		}, +++ b/spring-orm/src/main/java/org/springframework/orm/jpa/JpaTransactionManager.java, +import org.springframework.transaction.support.ResourceTransactionDefinition;, +					new JpaTransactionDefinition(definition, timeoutToUse, txObject.isNewEntityManagerHolder()));, +	 * JPA-specific transaction definition to be passed to {@link JpaDialect#beginTransaction}., +	 * @since 5.1, +	 */, +	private static class JpaTransactionDefinition extends DelegatingTransactionDefinition, +			implements ResourceTransactionDefinition {, +, +		private final int timeout;, +, +		private final boolean localResource;, +, +		public JpaTransactionDefinition(TransactionDefinition targetDefinition, int timeout, boolean localResource) {, +			super(targetDefinition);, +			this.timeout = timeout;, +			this.localResource = localResource;, +		}, +, +		@Override, +		public int getTimeout() {, +			return this.timeout;, +		}, +, +		@Override]