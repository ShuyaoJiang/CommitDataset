[+++ b/spring-web/src/main/java/org/springframework/web/cors/DefaultCorsProcessor.java, +		HttpHeaders responseHeaders = response.getHeaders();, +, +		responseHeaders.add(HttpHeaders.VARY, HttpHeaders.ORIGIN);, +, +++ b/spring-web/src/main/java/org/springframework/web/cors/DefaultCorsProcessor.java, +		HttpHeaders responseHeaders = response.getHeaders();, +, +		responseHeaders.add(HttpHeaders.VARY, HttpHeaders.ORIGIN);, +, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/DefaultCorsProcessor.java, +		HttpHeaders responseHeaders = response.getHeaders();, +, +		response.getHeaders().add(HttpHeaders.VARY, HttpHeaders.ORIGIN);, +++ b/spring-web/src/main/java/org/springframework/web/cors/DefaultCorsProcessor.java, +		HttpHeaders responseHeaders = response.getHeaders();, +, +		responseHeaders.add(HttpHeaders.VARY, HttpHeaders.ORIGIN);, +, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/DefaultCorsProcessor.java, +		HttpHeaders responseHeaders = response.getHeaders();, +, +		response.getHeaders().add(HttpHeaders.VARY, HttpHeaders.ORIGIN);, +++ b/spring-web/src/test/java/org/springframework/web/cors/DefaultCorsProcessorTests.java, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +++ b/spring-web/src/main/java/org/springframework/web/cors/DefaultCorsProcessor.java, +		HttpHeaders responseHeaders = response.getHeaders();, +, +		responseHeaders.add(HttpHeaders.VARY, HttpHeaders.ORIGIN);, +, +++ b/spring-web/src/main/java/org/springframework/web/cors/reactive/DefaultCorsProcessor.java, +		HttpHeaders responseHeaders = response.getHeaders();, +, +		response.getHeaders().add(HttpHeaders.VARY, HttpHeaders.ORIGIN);, +++ b/spring-web/src/test/java/org/springframework/web/cors/DefaultCorsProcessorTests.java, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, this.response.getHeader(HttpHeaders.VARY));, +++ b/spring-web/src/test/java/org/springframework/web/cors/reactive/DefaultCorsProcessorTests.java, +		assertEquals(HttpHeaders.ORIGIN, response.getHeaders().getFirst(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, response.getHeaders().getFirst(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, response.getHeaders().getFirst(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, response.getHeaders().getFirst(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, response.getHeaders().getFirst(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, response.getHeaders().getFirst(HttpHeaders.VARY));, +		ServerHttpResponse response = exchange.getResponse();, +		assertEquals(HttpHeaders.ORIGIN, response.getHeaders().getFirst(HttpHeaders.VARY));, +		assertNull(response.getStatusCode());, +		ServerHttpResponse response = exchange.getResponse();, +		assertEquals(HttpHeaders.ORIGIN, response.getHeaders().getFirst(HttpHeaders.VARY));, +		assertEquals(HttpStatus.FORBIDDEN, response.getStatusCode());, +		assertEquals(HttpHeaders.ORIGIN, response.getHeaders().getFirst(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, response.getHeaders().getFirst(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, response.getHeaders().getFirst(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, response.getHeaders().getFirst(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, response.getHeaders().getFirst(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, response.getHeaders().getFirst(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, response.getHeaders().getFirst(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, response.getHeaders().getFirst(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, response.getHeaders().getFirst(HttpHeaders.VARY));, +		assertEquals(HttpHeaders.ORIGIN, response.getHeaders().getFirst(HttpHeaders.VARY));]