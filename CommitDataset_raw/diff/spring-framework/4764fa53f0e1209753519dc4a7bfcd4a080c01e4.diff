[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerExceptionResolver.java, +import org.springframework.http.HttpStatus;, +import org.springframework.util.StringUtils;, +		ResponseStatus responseStatusAnn = AnnotationUtils.findAnnotation(handlerMethod, ResponseStatus.class);, +		if (responseStatusAnn != null) {, +			HttpStatus responseStatus = responseStatusAnn.value();, +			String reason = responseStatusAnn.reason();, +			if (!StringUtils.hasText(reason)) {, +				webRequest.getResponse().setStatus(responseStatus.value());, +			}, +			else {, +				webRequest.getResponse().sendError(responseStatus.value(), reason);, +			}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerExceptionResolver.java, +import org.springframework.http.HttpStatus;, +import org.springframework.util.StringUtils;, +		ResponseStatus responseStatusAnn = AnnotationUtils.findAnnotation(handlerMethod, ResponseStatus.class);, +		if (responseStatusAnn != null) {, +			HttpStatus responseStatus = responseStatusAnn.value();, +			String reason = responseStatusAnn.reason();, +			if (!StringUtils.hasText(reason)) {, +				webRequest.getResponse().setStatus(responseStatus.value());, +			}, +			else {, +				webRequest.getResponse().sendError(responseStatus.value(), reason);, +			}, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerExceptionResolverTests.java, +		assertEquals("Invalid status reason returned", "This is simply unacceptable!", response.getErrorMessage());, +		@ResponseStatus(value = HttpStatus.NOT_ACCEPTABLE, reason = "This is simply unacceptable!")]