[+++ b/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java, +import java.io.PrintWriter;, +, +import javax.servlet.ServletOutputStream;, +import javax.servlet.ServletRequest;, +	private static final String STREAMING_ATTRIBUTE = ShallowEtagHeaderFilter.class.getName() + ".STREAMING";, +, +			responseToUse = new HttpStreamingAwareContentCachingResponseWrapper(response, request);, +		if (!isAsyncStarted(request) && !isContentCachingDisabled(request)) {, +	/**, +	 * This method can be used to disable the content caching response wrapper, +	 * of the ShallowEtagHeaderFilter. This can be done before the start of HTTP, +	 * streaming for example where the response will be written to asynchronously, +	 * and not in the context of a Servlet container thread., +	 * @since 4.2, +	 */, +	public static void disableContentCaching(ServletRequest request) {, +		Assert.notNull(request);, +		request.setAttribute(STREAMING_ATTRIBUTE, true);, +	}, +, +	private static boolean isContentCachingDisabled(HttpServletRequest request) {, +		return (request.getAttribute(STREAMING_ATTRIBUTE) != null);, +	}, +, +, +	private static class HttpStreamingAwareContentCachingResponseWrapper extends ContentCachingResponseWrapper {, +, +		private final HttpServletRequest request;, +, +, +		public HttpStreamingAwareContentCachingResponseWrapper(HttpServletResponse response,, +				HttpServletRequest request) {, +, +			super(response);, +			this.request = request;, +		}, +, +		@Override, +		public ServletOutputStream getOutputStream() throws IOException {, +			return (useRawResponse() ? getResponse().getOutputStream() : super.getOutputStream());, +		}, +, +		@Override, +		public PrintWriter getWriter() throws IOException {, +			return (useRawResponse() ? getResponse().getWriter() : super.getWriter());, +		}, +, +		private boolean useRawResponse() {, +			return isContentCachingDisabled(this.request);, +		}, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java, +import java.io.PrintWriter;, +, +import javax.servlet.ServletOutputStream;, +import javax.servlet.ServletRequest;, +	private static final String STREAMING_ATTRIBUTE = ShallowEtagHeaderFilter.class.getName() + ".STREAMING";, +, +			responseToUse = new HttpStreamingAwareContentCachingResponseWrapper(response, request);, +		if (!isAsyncStarted(request) && !isContentCachingDisabled(request)) {, +	/**, +	 * This method can be used to disable the content caching response wrapper, +	 * of the ShallowEtagHeaderFilter. This can be done before the start of HTTP, +	 * streaming for example where the response will be written to asynchronously, +	 * and not in the context of a Servlet container thread., +	 * @since 4.2, +	 */, +	public static void disableContentCaching(ServletRequest request) {, +		Assert.notNull(request);, +		request.setAttribute(STREAMING_ATTRIBUTE, true);, +	}, +, +	private static boolean isContentCachingDisabled(HttpServletRequest request) {, +		return (request.getAttribute(STREAMING_ATTRIBUTE) != null);, +	}, +, +, +	private static class HttpStreamingAwareContentCachingResponseWrapper extends ContentCachingResponseWrapper {, +, +		private final HttpServletRequest request;, +, +, +		public HttpStreamingAwareContentCachingResponseWrapper(HttpServletResponse response,, +				HttpServletRequest request) {, +, +			super(response);, +			this.request = request;, +		}, +, +		@Override, +		public ServletOutputStream getOutputStream() throws IOException {, +			return (useRawResponse() ? getResponse().getOutputStream() : super.getOutputStream());, +		}, +, +		@Override, +		public PrintWriter getWriter() throws IOException {, +			return (useRawResponse() ? getResponse().getWriter() : super.getWriter());, +		}]