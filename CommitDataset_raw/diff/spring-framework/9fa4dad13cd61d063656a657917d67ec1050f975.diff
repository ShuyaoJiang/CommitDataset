[+++ b/spring-messaging/src/main/java/org/springframework/messaging/core/GenericMessagingTemplate.java, +		catch (RuntimeException ex) {, +			throw ex;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/GenericMessagingTemplate.java, +		catch (RuntimeException ex) {, +			throw ex;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AbstractNamedValueMethodArgumentResolver.java, + * Copyright 2002-2014 the original author or authors., +	private final ConversionService conversionService;, +, +	private final Map<MethodParameter, NamedValueInfo> namedValueInfoCache =, +		this.conversionService = (cs != null ? cs : new DefaultConversionService());, +		this.expressionContext = (beanFactory != null ? new BeanExpressionContext(beanFactory, null) : null);, +		else if ("".equals(value) && namedValueInfo.defaultValue != null) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/GenericMessagingTemplate.java, +		catch (RuntimeException ex) {, +			throw ex;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AbstractNamedValueMethodArgumentResolver.java, + * Copyright 2002-2014 the original author or authors., +	private final ConversionService conversionService;, +, +	private final Map<MethodParameter, NamedValueInfo> namedValueInfoCache =, +		this.conversionService = (cs != null ? cs : new DefaultConversionService());, +		this.expressionContext = (beanFactory != null ? new BeanExpressionContext(beanFactory, null) : null);, +		else if ("".equals(value) && namedValueInfo.defaultValue != null) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/HeaderMethodArgumentResolver.java, +, +, +	protected Object resolveArgumentInternal(MethodParameter parameter, Message<?> message, String name), +			throws Exception {, +		return (headerValue != null ? headerValue : nativeHeaderValue);, +		if (nativeHeaders == null || !nativeHeaders.containsKey(name)) {, +		return (nativeHeaderValues.size() == 1 ? nativeHeaderValues.get(0) : nativeHeaderValues);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/core/GenericMessagingTemplate.java, +		catch (RuntimeException ex) {, +			throw ex;, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AbstractNamedValueMethodArgumentResolver.java, + * Copyright 2002-2014 the original author or authors., +	private final ConversionService conversionService;, +, +	private final Map<MethodParameter, NamedValueInfo> namedValueInfoCache =, +		this.conversionService = (cs != null ? cs : new DefaultConversionService());, +		this.expressionContext = (beanFactory != null ? new BeanExpressionContext(beanFactory, null) : null);, +		else if ("".equals(value) && namedValueInfo.defaultValue != null) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/HeaderMethodArgumentResolver.java, +, +, +	protected Object resolveArgumentInternal(MethodParameter parameter, Message<?> message, String name), +			throws Exception {, +		return (headerValue != null ? headerValue : nativeHeaderValue);, +		if (nativeHeaders == null || !nativeHeaders.containsKey(name)) {, +		return (nativeHeaderValues.size() == 1 ? nativeHeaderValues.get(0) : nativeHeaderValues);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadArgumentResolver.java, +, +			throw new IllegalStateException("@Payload SpEL expressions not supported by this resolver");, +			return !StringUtils.hasText((String) payload);]