[+++ b/spring-framework-reference/src/testing.xml, +      testing in the <filename class="libraryfile">org.springframework.test-VERSION.jar</filename>, +      library (where <literal>VERSION</literal> is the release version). In this library,, +      <para>, +	      Since Spring 2.5 unit and integration testing support is provided , +	      in the form of the annotation-driven <link, +	      linkend="testcontext-framework">Spring TestContext Framework</link>., +	      The TestContext Framework is agnostic of the actual testing framework, +	      in use, thus allowing, +	      JUnit 4.5, TestNG, etc., +      </para>, +      , +      <note>, +      	<title>Legacy JUnit 3.8 class hierarchy is deprecated</title>, +      	<para>, +			As of Spring 3.0, the legacy JUnit 3.8 base class hierarchy (e.g.,, +			<classname>AbstractDependencyInjectionSpringContextTests</classname>,, +			<classname>AbstractTransactionalDataSourceSpringContextTests</classname>,, +			etc.) is officially deprecated and will be removed in a later release., +			Thus any code which depends on the legacy JUnit 3.8 support should be, +			migrated to the <link, +			linkend="testcontext-framework">Spring TestContext Framework</link>., +       	</para>, +      </note>, +    <section id="integration-testing-goals">, +      <title>Goals</title>, +      <para>The following bullet points highlight the fundamental goals of Spring's, +      integration testing support:</para>, +      <para>In the next few sections each of the above goals is discussed, +      in greater detail, and at the end of each section you will find a direct, +      link to implementation and configuration details pertaining to that, +      particular goal.</para>, +        <para>The Spring TestContext Framework provides consistent, +        <para>Test classes provide an array containing the, +        a mechanism to cause the test fixture to reload the configurations and, +        <para>, +        	Context management and caching with the , +        	<link linkend="testcontext-ctx-management">TestContext Framework</link>., +        </para>, +        <para>When the TestContext framework loads your, +        application context, it can optionally configure instances of your, +        <para>, +        	Dependency Injection of test fixtures with the , +        	<link linkend="testcontext-fixture-di">TestContext Framework</link>., +        </para>, +        <para>The TestContext framework meets this need. By default, the, +        framework will create and roll back a transaction for each, +        database - the TestContext framework can be, +        via the <interfacename>@TransactionConfiguration</interfacename>, +        and <interfacename>@Rollback</interfacename> annotations.</para>, +        <para>, +	        Transaction management with the , +        	<link linkend="testcontext-tx">TestContext Framework</link>., +		</para>, +        <para>The Spring TestContext Framework provides, +            <para>A <classname>SimpleJdbcTemplate</classname>: useful for querying to, +        <para>You may find it desirable to provide a custom, application-wide superclass for, +        integration tests that provides further useful instance variables and, +        methods specific to your project.</para>, +        <para>, +        	Support classes for the , +        	<link linkend="testcontext-support-classes">TestContext Framework</link>., +		</para>, +    <section id="integration-testing-annotations">, +      <title>Annotations</title>, +      <!-- =============================================================== -->, +, +      <para>The Spring Framework provides the following set of, +      <emphasis>Spring-specific</emphasis> annotations that you, +      can use in your unit and integration tests in conjunction with the , +      TestContext framework. Refer to the respective JavaDoc for, +      further information, including default attribute values, etc.</para>, +, +      <itemizedlist>, +, +          <listitem>, +            <para><emphasis, +            role="bold"><interfacename>@ContextConfiguration</interfacename></emphasis></para>, +, +            <para>Defines class-level metadata which is used to determine how, +            to load and configure an, +            <interfacename>ApplicationContext</interfacename>. Specifically,, +            @ContextConfiguration defines the application context resource, +            <literal>locations</literal> to load as well as the, +            <interfacename>ContextLoader</interfacename> strategy to use for, +            loading the context.</para>, +, +            <programlisting language="java">@ContextConfiguration(locations={"example/test-context.xml"}, loader=CustomContextLoader.class), +public class CustomConfiguredApplicationContextTests {, +    <lineannotation>// class body...</lineannotation>, +}</programlisting>, +, +            <para>Note: <interfacename>@ContextConfiguration</interfacename>, +            provides support for <emphasis>inherited</emphasis> resource, +            locations by default. See the <link, +            linkend="testcontext-ctx-management">Context management and, +            caching</link> section and JavaDoc for an example and further, +            details.</para>, +          </listitem>, +]