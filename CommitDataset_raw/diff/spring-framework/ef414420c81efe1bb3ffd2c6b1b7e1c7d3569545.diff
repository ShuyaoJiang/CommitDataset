[+++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java, +/*, + * Copyright 2002-2008 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.beans.factory.annotation;, +, +import static org.junit.Assert.*;, +, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +import java.util.List;, +import java.util.Map;, +, +import org.junit.Test;, +import org.springframework.beans.ITestBean;, +import org.springframework.beans.IndexedTestBean;, +import org.springframework.beans.NestedTestBean;, +import org.springframework.beans.TestBean;, +import org.springframework.beans.factory.BeanCreationException;, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.FactoryBean;, +import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +import org.springframework.beans.factory.support.GenericBeanDefinition;, +import org.springframework.beans.factory.support.RootBeanDefinition;, +, +/**, + * @author Juergen Hoeller, + * @author Mark Fisher, + * @author Sam Brannen, + * @author Chris Beams, + */, +public class AutowiredAnnotationBeanPostProcessorTests {, +, +	@Test, +	public void testIncompleteBeanDefinition() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		bf.registerBeanDefinition("testBean", new GenericBeanDefinition());, +		try {, +			bf.getBean("testBean");, +		}, +		catch (BeanCreationException ex) {, +			assertTrue(ex.getRootCause() instanceof IllegalStateException);, +		}, +	}, +, +	@Test, +	public void testResourceInjection() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		RootBeanDefinition bd = new RootBeanDefinition(ResourceInjectionBean.class);, +		bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE);, +		bf.registerBeanDefinition("annotatedBean", bd);, +		TestBean tb = new TestBean();, +		bf.registerSingleton("testBean", tb);, +, +		ResourceInjectionBean bean = (ResourceInjectionBean) bf.getBean("annotatedBean");, +		assertSame(tb, bean.getTestBean());, +		assertSame(tb, bean.getTestBean2());, +, +		bean = (ResourceInjectionBean) bf.getBean("annotatedBean");, +		assertSame(tb, bean.getTestBean());, +		assertSame(tb, bean.getTestBean2());, +	}, +, +	@Test, +	public void testExtendedResourceInjection() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.registerResolvableDependency(BeanFactory.class, bf);, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(bf);, +		bf.addBeanPostProcessor(bpp);, +		RootBeanDefinition bd = new RootBeanDefinition(TypedExtendedResourceInjectionBean.class);, +		bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE);, +		bf.registerBeanDefinition("annotatedBean", bd);, +		TestBean tb = new TestBean();, +		bf.registerSingleton("testBean", tb);, +		NestedTestBean ntb = new NestedTestBean();, +		bf.registerSingleton("nestedTestBean", ntb);, +]