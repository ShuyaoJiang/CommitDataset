[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java, +import java.util.Arrays;, +import java.util.Comparator;, +		Method[] ms = getSortedClassMethods(clazz);, +			if (method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&, +			if (method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&, +		Method[] methods = getSortedClassMethods(clazz);, +			if (method.getName().equals(setterName) && method.getParameterTypes().length == 1 &&, +	/**, +	 * Returns class methods ordered with non bridge methods appearing higher., +	 */, +	private Method[] getSortedClassMethods(Class<?> clazz) {, +		Method[] methods = clazz.getMethods();, +		Arrays.sort(methods, new Comparator<Method>() {, +			@Override, +			public int compare(Method o1, Method o2) {, +				return (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1);, +			}, +		});, +		return methods;, +	}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java, +import java.util.Arrays;, +import java.util.Comparator;, +		Method[] ms = getSortedClassMethods(clazz);, +			if (method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&, +			if (method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&, +		Method[] methods = getSortedClassMethods(clazz);, +			if (method.getName().equals(setterName) && method.getParameterTypes().length == 1 &&, +	/**, +	 * Returns class methods ordered with non bridge methods appearing higher., +	 */, +	private Method[] getSortedClassMethods(Class<?> clazz) {, +		Method[] methods = clazz.getMethods();, +		Arrays.sort(methods, new Comparator<Method>() {, +			@Override, +			public int compare(Method o1, Method o2) {, +				return (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1);, +			}, +		});, +		return methods;, +	}, +, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java, + * Copyright 2002-2013 the original author or authors., + * @author Phillip Webb, +	public void SPR_10162_onlyBridgeMethodTest() throws Exception {, +		ReflectivePropertyAccessor accessor = new ReflectivePropertyAccessor();, +		StandardEvaluationContext context = new StandardEvaluationContext();, +		Object target = new OnlyBridgeMethod();, +		TypedValue value = accessor.read(context, target , "property");, +		assertEquals(Integer.class, value.getTypeDescriptor().getType());, +	}, +, +	@Test, +	static class PackagePrivateClassWithGetter {, +, +		public Integer getProperty() {, +			return null;, +		}, +	}, +, +	public static class OnlyBridgeMethod extends PackagePrivateClassWithGetter {, +, +	}, +]