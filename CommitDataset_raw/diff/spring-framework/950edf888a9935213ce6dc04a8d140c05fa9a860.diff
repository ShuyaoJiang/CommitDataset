[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ModelArgumentResolver.java, +import java.util.Map;, +, + * Resolver for a controller method argument of type {@link Model} that can, + * also be resolved as a {@link java.util.Map}., +		return checkParameterTypeNoReactiveWrapper(parameter,, +				type -> Model.class.isAssignableFrom(type) || Map.class.isAssignableFrom(type));, +	public Object resolveArgumentValue(MethodParameter parameter, BindingContext context,, +		Class<?> type = parameter.getParameterType();, +		if (Model.class.isAssignableFrom(type)) {, +		else if (Map.class.isAssignableFrom(type)) {, +			return context.getModel().asMap();, +		}, +		else {, +			// Should never happen.., +			throw new IllegalStateException("Unexpected method parameter type: " + type);, +		}, +	}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ModelArgumentResolver.java, +import java.util.Map;, +, + * Resolver for a controller method argument of type {@link Model} that can, + * also be resolved as a {@link java.util.Map}., +		return checkParameterTypeNoReactiveWrapper(parameter,, +				type -> Model.class.isAssignableFrom(type) || Map.class.isAssignableFrom(type));, +	public Object resolveArgumentValue(MethodParameter parameter, BindingContext context,, +		Class<?> type = parameter.getParameterType();, +		if (Model.class.isAssignableFrom(type)) {, +		else if (Map.class.isAssignableFrom(type)) {, +			return context.getModel().asMap();, +		}, +		else {, +			// Should never happen.., +			throw new IllegalStateException("Unexpected method parameter type: " + type);, +		}, +	}, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/ModelArgumentResolverTests.java, +/*, + * Copyright 2002-2017 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.web.reactive.result.method.annotation;, +, +import java.time.Duration;, +import java.util.Map;, +, +import org.junit.Test;, +, +import org.springframework.core.MethodParameter;, +import org.springframework.core.ReactiveAdapterRegistry;, +import org.springframework.mock.web.test.server.MockServerWebExchange;, +import org.springframework.ui.Model;, +import org.springframework.ui.ModelMap;, +import org.springframework.web.method.ResolvableMethod;, +import org.springframework.web.reactive.BindingContext;, +import org.springframework.web.server.ServerWebExchange;, +, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +import static org.springframework.mock.http.server.reactive.test.MockServerHttpRequest.get;, +, +/**, + * Unit tests for {@link ModelArgumentResolver}., + * @author Rossen Stoyanchev, + */, +public class ModelArgumentResolverTests {, +, +	private final ModelArgumentResolver resolver = new ModelArgumentResolver(new ReactiveAdapterRegistry());, +, +	private final ServerWebExchange exchange = MockServerWebExchange.from(get("/"));, +, +	private final ResolvableMethod testMethod = ResolvableMethod.on(getClass()).named("handle").build();, +, +, +	@Test, +	public void supportsParameter() throws Exception {, +		assertTrue(this.resolver.supportsParameter(this.testMethod.arg(Model.class)));, +		assertTrue(this.resolver.supportsParameter(this.testMethod.arg(Map.class, String.class, Object.class)));, +		assertTrue(this.resolver.supportsParameter(this.testMethod.arg(ModelMap.class)));, +		assertFalse(this.resolver.supportsParameter(this.testMethod.arg(Object.class)));, +	}, +, +	@Test, +	public void resolveArgument() throws Exception {, +		testResolveArgument(this.testMethod.arg(Model.class));, +		testResolveArgument(this.testMethod.arg(Map.class, String.class, Object.class));, +		testResolveArgument(this.testMethod.arg(ModelMap.class));, +	}]