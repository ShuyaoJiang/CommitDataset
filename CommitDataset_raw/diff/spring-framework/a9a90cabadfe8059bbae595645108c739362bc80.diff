[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/adapter/GlobalAdvisorAdapterRegistry.java, + * Copyright 2002-2012 the original author or authors., + * @author Phillip Webb, +	private static AdvisorAdapterRegistry instance = new DefaultAdvisorAdapterRegistry();, +	 * Return the singleton {@link DefaultAdvisorAdapterRegistry} instance., +	/**, +	 * Reset the singleton {@link DefaultAdvisorAdapterRegistry}, removing any, +	 * {@link AdvisorAdapterRegistry#registerAdvisorAdapter(AdvisorAdapter) registered}, +	 * adapters., +	 */, +	static void reset() {, +		instance = new DefaultAdvisorAdapterRegistry();, +	}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/adapter/GlobalAdvisorAdapterRegistry.java, + * Copyright 2002-2012 the original author or authors., + * @author Phillip Webb, +	private static AdvisorAdapterRegistry instance = new DefaultAdvisorAdapterRegistry();, +	 * Return the singleton {@link DefaultAdvisorAdapterRegistry} instance., +	/**, +	 * Reset the singleton {@link DefaultAdvisorAdapterRegistry}, removing any, +	 * {@link AdvisorAdapterRegistry#registerAdvisorAdapter(AdvisorAdapter) registered}, +	 * adapters., +	 */, +	static void reset() {, +		instance = new DefaultAdvisorAdapterRegistry();, +	}, +, +++ b/spring-context/src/test/java/org/springframework/aop/framework/adapter/AdvisorAdapterRegistrationTests.java, + * Copyright 2002-2012 the original author or authors., +import org.junit.After;, +import org.junit.Before;, +	@Before, +	@After, +	public void resetGlobalAdvisorAdapterRegistry() {, +		GlobalAdvisorAdapterRegistry.reset();, +	}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/adapter/GlobalAdvisorAdapterRegistry.java, + * Copyright 2002-2012 the original author or authors., + * @author Phillip Webb, +	private static AdvisorAdapterRegistry instance = new DefaultAdvisorAdapterRegistry();, +	 * Return the singleton {@link DefaultAdvisorAdapterRegistry} instance., +	/**, +	 * Reset the singleton {@link DefaultAdvisorAdapterRegistry}, removing any, +	 * {@link AdvisorAdapterRegistry#registerAdvisorAdapter(AdvisorAdapter) registered}, +	 * adapters., +	 */, +	static void reset() {, +		instance = new DefaultAdvisorAdapterRegistry();, +	}, +, +++ b/spring-context/src/test/java/org/springframework/aop/framework/adapter/AdvisorAdapterRegistrationTests.java, + * Copyright 2002-2012 the original author or authors., +import org.junit.After;, +import org.junit.Before;, +	@Before, +	@After, +	public void resetGlobalAdvisorAdapterRegistry() {, +		GlobalAdvisorAdapterRegistry.reset();, +	}, +, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/spr9051/AnnotatedConfigClassesWithoutAtConfigurationTests.java, +import static org.hamcrest.Matchers.*;, +import static org.hamcrest.Matchers.is;, +import static org.junit.Assert.*;, +import java.util.Arrays;, +import java.util.HashSet;, +import java.util.Set;, +, + * @author Phillip Webb, +	public void testSPR_9051() throws Exception {, +		Set<String> names = new HashSet<String>();, +		names.add(enigma.toString());, +		names.add(lifecycleBean.getName());, +		assertEquals(names, new HashSet<String>(Arrays.asList("enigma #1", "enigma #2")));]