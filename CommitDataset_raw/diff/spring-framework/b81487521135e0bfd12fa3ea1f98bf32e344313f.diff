[+++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java, +	private volatile boolean publisherCompleted;, +, +	@Nullable, +	private volatile Throwable publisherError;, +, +				if (publisher.changeState(this, SUBSCRIBING)) {, +					publisher.changeState(SUBSCRIBING, NO_DEMAND);, +					if (publisher.publisherCompleted) {, +						publisher.onAllDataRead();, +					}, +					Throwable publisherError = publisher.publisherError;, +					if (publisherError != null) {, +						publisher.onError(publisherError);, +					}, +, +			@Override, +			<T> void onAllDataRead(AbstractListenerReadPublisher<T> publisher) {, +				publisher.publisherCompleted = true;, +			}, +, +			@Override, +			<T> void onError(AbstractListenerReadPublisher<T> publisher, Throwable t) {, +				publisher.publisherError = t;, +			}, +		},, +, +		SUBSCRIBING {, +			<T> void request(AbstractListenerReadPublisher<T> publisher, long n) {, +				if (Operators.validate(n)) {, +					Operators.addCap(DEMAND_FIELD_UPDATER, publisher, n);, +					if (publisher.changeState(this, DEMAND)) {, +						publisher.checkOnDataAvailable();, +					}, +				}, +			}, +, +			@Override, +			<T> void onAllDataRead(AbstractListenerReadPublisher<T> publisher) {, +				publisher.publisherCompleted = true;, +			}, +, +			@Override, +			<T> void onError(AbstractListenerReadPublisher<T> publisher, Throwable t) {, +				publisher.publisherError = t;, +			}, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java, +	private volatile boolean publisherCompleted;, +, +	@Nullable, +	private volatile Throwable publisherError;, +, +				if (publisher.changeState(this, SUBSCRIBING)) {, +					publisher.changeState(SUBSCRIBING, NO_DEMAND);, +					if (publisher.publisherCompleted) {, +						publisher.onAllDataRead();, +					}, +					Throwable publisherError = publisher.publisherError;, +					if (publisherError != null) {, +						publisher.onError(publisherError);, +					}, +, +			@Override, +			<T> void onAllDataRead(AbstractListenerReadPublisher<T> publisher) {, +				publisher.publisherCompleted = true;, +			}, +, +			@Override, +			<T> void onError(AbstractListenerReadPublisher<T> publisher, Throwable t) {, +				publisher.publisherError = t;, +			}, +		},, +, +		SUBSCRIBING {, +			<T> void request(AbstractListenerReadPublisher<T> publisher, long n) {, +				if (Operators.validate(n)) {, +					Operators.addCap(DEMAND_FIELD_UPDATER, publisher, n);, +					if (publisher.changeState(this, DEMAND)) {, +						publisher.checkOnDataAvailable();, +					}, +				}, +			}, +, +			@Override, +			<T> void onAllDataRead(AbstractListenerReadPublisher<T> publisher) {, +				publisher.publisherCompleted = true;, +			}, +, +			@Override, +			<T> void onError(AbstractListenerReadPublisher<T> publisher, Throwable t) {, +				publisher.publisherError = t;, +			}, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/WriteResultPublisher.java, +				if (publisher.changeState(this, SUBSCRIBING)) {, +					publisher.subscriber = subscriber;, +					publisher.changeState(SUBSCRIBING, SUBSCRIBED);, +		SUBSCRIBING {, +			@Override, +			void request(WriteResultPublisher publisher, long n) {, +				Operators.validate(n);]