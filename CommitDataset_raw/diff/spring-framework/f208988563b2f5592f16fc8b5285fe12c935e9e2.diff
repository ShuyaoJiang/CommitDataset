[+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/EmbeddedDatabaseBeanDefinitionParser.java, +import org.w3c.dom.Element;, +, + * @since 3.0, +			locations.add(scriptElement.getAttribute("location"));, +	private AbstractBeanDefinition getSourcedBeanDefinition(, +			BeanDefinitionBuilder builder, Element source, ParserContext context) {, +, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/EmbeddedDatabaseBeanDefinitionParser.java, +import org.w3c.dom.Element;, +, + * @since 3.0, +			locations.add(scriptElement.getAttribute("location"));, +	private AbstractBeanDefinition getSourcedBeanDefinition(, +			BeanDefinitionBuilder builder, Element source, ParserContext context) {, +, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/SortedResourcesFactoryBean.java, +/*, + * Copyright 2002-2009 the original author or authors., + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., +, +/**, + * @author Dave Syer, + * @author Juergen Hoeller, + * @since 3.0, + */, +	private final Resource[] resources;, +	public SortedResourcesFactoryBean(ResourceLoader resourceLoader, List<String> locations) throws IOException {, +				List<Resource> resources = new ArrayList<Resource>(, +						Arrays.asList(((ResourcePatternResolver) resourceLoader).getResources(location)));, +				Collections.sort(resources, new Comparator<Resource>() {, +						}, +						catch (IOException ex) {, +			}, +			else {, +		this.resources = scripts.toArray(new Resource[scripts.size()]);, +	}, +, +	public Resource[] getObject() {, +		return this.resources;, +		return Resource[].class;, +		return true;, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/EmbeddedDatabaseBeanDefinitionParser.java, +import org.w3c.dom.Element;, +, + * @since 3.0, +			locations.add(scriptElement.getAttribute("location"));, +	private AbstractBeanDefinition getSourcedBeanDefinition(, +			BeanDefinitionBuilder builder, Element source, ParserContext context) {, +, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/SortedResourcesFactoryBean.java, +/*, + * Copyright 2002-2009 the original author or authors., + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., +, +/**, + * @author Dave Syer, + * @author Juergen Hoeller, + * @since 3.0, + */, +	private final Resource[] resources;, +	public SortedResourcesFactoryBean(ResourceLoader resourceLoader, List<String> locations) throws IOException {, +				List<Resource> resources = new ArrayList<Resource>(, +						Arrays.asList(((ResourcePatternResolver) resourceLoader).getResources(location)));, +				Collections.sort(resources, new Comparator<Resource>() {, +						}, +						catch (IOException ex) {, +			}, +			else {, +		this.resources = scripts.toArray(new Resource[scripts.size()]);, +	}, +, +	public Resource[] getObject() {, +		return this.resources;, +		return Resource[].class;, +		return true;, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/datasource/init/ResourceDatabasePopulator.java, +, +	private static String COMMENT_PREFIX = "--";, +]