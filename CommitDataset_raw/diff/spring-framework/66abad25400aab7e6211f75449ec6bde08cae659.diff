[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +						Object convertedMapKey = convertIfNecessary(null, null, key, mapKeyType,, +								new PropertyTypeDescriptor(pd, new MethodParameter(pd.getReadMethod(), -1), mapKeyType));, +				PropertyDescriptor pd = getCachedIntrospectionResults().getPropertyDescriptor(actualName);, +					Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType,, +							new PropertyTypeDescriptor(pd, new MethodParameter(pd.getReadMethod(), -1), requiredType));, +				Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType,, +						new PropertyTypeDescriptor(pd, new MethodParameter(pd.getReadMethod(), -1), requiredType));, +				Object convertedMapKey = convertIfNecessary(null, null, key, mapKeyType,, +						new PropertyTypeDescriptor(pd, new MethodParameter(pd.getReadMethod(), -1), mapKeyType));, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +						Object convertedMapKey = convertIfNecessary(null, null, key, mapKeyType,, +								new PropertyTypeDescriptor(pd, new MethodParameter(pd.getReadMethod(), -1), mapKeyType));, +				PropertyDescriptor pd = getCachedIntrospectionResults().getPropertyDescriptor(actualName);, +					Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType,, +							new PropertyTypeDescriptor(pd, new MethodParameter(pd.getReadMethod(), -1), requiredType));, +				Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType,, +						new PropertyTypeDescriptor(pd, new MethodParameter(pd.getReadMethod(), -1), requiredType));, +				Object convertedMapKey = convertIfNecessary(null, null, key, mapKeyType,, +						new PropertyTypeDescriptor(pd, new MethodParameter(pd.getReadMethod(), -1), mapKeyType));, +++ b/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +import org.springframework.beans.BeanUtils;, +import org.springframework.beans.BeanWrapper;, +import org.springframework.beans.PropertyAccessorFactory;, +		props.setProperty("datePattern", "M-d-yy");, +		props.setProperty("datePattern", "M-d-yy");, +		assertEquals("10-31-09,11-1-09,11-2-09", formatted);, +		dates = (List<Date>) formattingService.convert("10-31-09,11-1-09,11-2-09",, +, +		Object model = BeanUtils.instantiate(modelClass);, +		BeanWrapper accessor = PropertyAccessorFactory.forBeanPropertyAccess(model);, +		accessor.setConversionService(formattingService);, +		accessor.setPropertyValue("dates", "10-31-09,11-1-09,11-2-09");, +		dates = (List<Date>) accessor.getPropertyValue("dates");, +		assertEquals(new LocalDate(2009, 10, 31), new LocalDate(dates.get(0)));, +		assertEquals(new LocalDate(2009, 11, 1), new LocalDate(dates.get(1)));, +		assertEquals(new LocalDate(2009, 11, 2), new LocalDate(dates.get(2)));, +		accessor.setPropertyValue("dates[0]", "10-30-09");, +		accessor.setPropertyValue("dates[1]", "10-1-09");, +		accessor.setPropertyValue("dates[2]", "10-2-09");, +		dates = (List<Date>) accessor.getPropertyValue("dates");, +		assertEquals(new LocalDate(2009, 10, 30), new LocalDate(dates.get(0)));, +		assertEquals(new LocalDate(2009, 10, 1), new LocalDate(dates.get(1)));, +		assertEquals(new LocalDate(2009, 10, 2), new LocalDate(dates.get(2)));, +	public static class Model {, +		@org.springframework.format.annotation.DateTimeFormat(pattern="M-d-yy"), +		public List<Date> getDates() {, +			return dates;, +		}, +, +		public void setDates(List<Date> dates) {, +			this.dates = dates;, +		}, +	public static class ModelWithPlaceholders {, +		public List<Date> getDates() {, +			return dates;, +		}, +, +		public void setDates(List<Date> dates) {, +			this.dates = dates;, +		}]