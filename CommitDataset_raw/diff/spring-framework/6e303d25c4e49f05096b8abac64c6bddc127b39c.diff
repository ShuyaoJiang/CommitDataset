[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/RedirectView.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.util.ObjectUtils;, +import org.springframework.web.servlet.View;, +import org.springframework.web.util.UriUtils;, +import org.springframework.web.util.WebUtils;, +		String encoding = getEncoding(request);, +, +			targetUrl.append(UriUtils.encodePath(request.getContextPath(), encoding));, +			targetUrl.append(UriUtils.encodePath(getUrl(), encoding));, +		else {, +			targetUrl.append(UriUtils.encodeUri(getUrl(), encoding));, +		}, +			appendQueryProperties(targetUrl, model, encoding);, +		}, +, +		sendRedirect(request, response, targetUrl.toString(), this.http10Compatible);, +	}, +, +	private String getEncoding(HttpServletRequest request) {, +		return enc;, +				String encodedKey = UriUtils.encodeQueryParam(entry.getKey(), encodingScheme);, +				String encodedValue = (value != null ? UriUtils.encodeQueryParam(value.toString(), encodingScheme) : "");, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/RedirectView.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.util.ObjectUtils;, +import org.springframework.web.servlet.View;, +import org.springframework.web.util.UriUtils;, +import org.springframework.web.util.WebUtils;, +		String encoding = getEncoding(request);, +, +			targetUrl.append(UriUtils.encodePath(request.getContextPath(), encoding));, +			targetUrl.append(UriUtils.encodePath(getUrl(), encoding));, +		else {, +			targetUrl.append(UriUtils.encodeUri(getUrl(), encoding));, +		}, +			appendQueryProperties(targetUrl, model, encoding);, +		}, +, +		sendRedirect(request, response, targetUrl.toString(), this.http10Compatible);, +	}, +, +	private String getEncoding(HttpServletRequest request) {, +		return enc;, +				String encodedKey = UriUtils.encodeQueryParam(entry.getKey(), encodingScheme);, +				String encodedValue = (value != null ? UriUtils.encodeQueryParam(value.toString(), encodingScheme) : "");, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/view/RedirectViewTests.java, + * Copyright 2002-2010 the original author or authors., +import static org.easymock.EasyMock.*;, +import org.springframework.web.util.WebUtils;, +		rv.render(new HashMap<String, Object>(), request, response);, +		rv.render(new HashMap<String, Object>(), request, response);, +		rv.render(new HashMap<String, Object>(), request, response);, +		doTest(new HashMap<String, Object>(), url, false, url);, +		doTest(new HashMap<String, Object>(), url, true, url);, +		Map<String, String> model = new HashMap<String, String>();, +		Map<String, String> model = new HashMap<String, String>();, +		Map<String, String> model = new HashMap<String, String>();, +		Map<String, String> model = new HashMap<String, String>();, +		Map<String, String[]> model = new HashMap<String, String[]>();, +		List<String> val = new ArrayList<String>();, +		Map<String, List<String>> model = new HashMap<String, List<String>>();, +		String key3 = "tb";, +		Map<String, Object> model = new HashMap<String, Object>();, +	private void doTest(Map<String, ?> map, String url, boolean contextRelative, String expectedUrlForEncoding), +			@Override, +			protected Map<String, Object> queryProperties(Map<String, Object> model) {, +		HttpServletRequest request = createNiceMock("request", HttpServletRequest.class);, +		if (exposeModelAttributes) {, +			expect(request.getCharacterEncoding()).andReturn(WebUtils.DEFAULT_CHARACTER_ENCODING);, +		}, +			expect(request.getContextPath()).andReturn("/context");, +		HttpServletResponse response = createMock("response", HttpServletResponse.class);, +		expect(response.encodeRedirectURL(expectedUrlForEncoding)).andReturn(expectedUrlForEncoding);, +		response.sendRedirect(expectedUrlForEncoding);, +		replay(request, response);, +, +		rv.render(map, request, response);, +, +		verify(request, response);]