[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/DefaultHandshakeHandler.java, +			logger.trace("Upgrading to WebSocket, subProtocol=" + subProtocol + ", extensions=" + extensions);, +	 * <p>As of 4.1 the default implementation of this method filters the list to, +	 * leave only extensions that are both requested and supported., +	 * @param requestedExtensions the list of extensions requested by the client, +	 * @param supportedExtensions the list of extensions supported by the server, +			List<WebSocketExtension> requestedExtensions, List<WebSocketExtension> supportedExtensions) {, +		List<WebSocketExtension> result = new ArrayList<WebSocketExtension>(requestedExtensions.size());, +		for (WebSocketExtension extension : requestedExtensions) {, +			if (supportedExtensions.contains(extension)) {, +				result.add(extension);, +			}, +		}, +		return result;, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/DefaultHandshakeHandler.java, +			logger.trace("Upgrading to WebSocket, subProtocol=" + subProtocol + ", extensions=" + extensions);, +	 * <p>As of 4.1 the default implementation of this method filters the list to, +	 * leave only extensions that are both requested and supported., +	 * @param requestedExtensions the list of extensions requested by the client, +	 * @param supportedExtensions the list of extensions supported by the server, +			List<WebSocketExtension> requestedExtensions, List<WebSocketExtension> supportedExtensions) {, +		List<WebSocketExtension> result = new ArrayList<WebSocketExtension>(requestedExtensions.size());, +		for (WebSocketExtension extension : requestedExtensions) {, +			if (supportedExtensions.contains(extension)) {, +				result.add(extension);, +			}, +		}, +		return result;, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/server/DefaultHandshakeHandlerTests.java, +	}, +, +, +	@Test, +	public void supportedExtensions() throws Exception {, +, +		WebSocketExtension extension1 = new WebSocketExtension("ext1");, +		WebSocketExtension extension2 = new WebSocketExtension("ext2");, +, +		when(this.upgradeStrategy.getSupportedVersions()).thenReturn(new String[] {"13"});, +		when(this.upgradeStrategy.getSupportedExtensions(this.request)).thenReturn(Arrays.asList(extension1));, +, +		this.servletRequest.setMethod("GET");, +, +		WebSocketHttpHeaders headers = new WebSocketHttpHeaders(this.request.getHeaders());, +		headers.setUpgrade("WebSocket");, +		headers.setConnection("Upgrade");, +		headers.setSecWebSocketVersion("13");, +		headers.setSecWebSocketKey("82/ZS2YHjEnUN97HLL8tbw==");, +		headers.setSecWebSocketExtensions(Arrays.asList(extension1, extension2));, +, +		WebSocketHandler handler = new TextWebSocketHandler();, +		Map<String, Object> attributes = Collections.<String, Object>emptyMap();, +		this.handshakeHandler.doHandshake(this.request, this.response, handler, attributes);, +, +		verify(this.upgradeStrategy).upgrade(this.request, this.response, null, Arrays.asList(extension1),, +				null, handler, attributes);]