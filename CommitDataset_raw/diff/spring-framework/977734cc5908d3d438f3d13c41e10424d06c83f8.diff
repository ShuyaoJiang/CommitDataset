[+++ b/build.gradle, +		optional("com.google.protobuf:protobuf-java:2.6.1"), +		optional("com.googlecode.protobuf-java-format:protobuf-java-format:1.4"), +++ b/build.gradle, +		optional("com.google.protobuf:protobuf-java:2.6.1"), +		optional("com.googlecode.protobuf-java-format:protobuf-java-format:1.4"), +++ b/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverter.java, + * Copyright 2002-2016 the original author or authors., +import com.googlecode.protobuf.format.ProtobufFormatter;, + * An {@code HttpMessageConverter} that reads and writes {@link com.google.protobuf.Message}s, + * using <a href="https://developers.google.com/protocol-buffers/">Google Protocol Buffers</a>., + * <p>By default, it supports {@code "application/x-protobuf"}, {@code "text/plain"},, + * {@code "application/json"}, {@code "application/xml"}, while also writing {@code "text/html"}., + * <p>To generate {@code Message} Java classes, you need to install the {@code protoc} binary., + * <p>Requires Protobuf 2.6 and Protobuf Java Format 1.4, as of Spring 4.3., + * @author Juergen Hoeller, +, +	private static final ProtobufFormatter JSON_FORMAT = new JsonFormat();, +, +	private static final ProtobufFormatter XML_FORMAT = new XmlFormat();, +, +	private static final ProtobufFormatter HTML_FORMAT = new HtmlFormat();, +, +, +	private final ExtensionRegistry extensionRegistry = ExtensionRegistry.newInstance();, +		super(PROTOBUF, MediaType.TEXT_PLAIN, MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML);, +	protected MediaType getDefaultContentType(Message message) {, +		return PROTOBUF;, +	}, +, +	@Override, +		if (contentType == null) {, +			contentType = PROTOBUF;, +		}, +		Charset charset = contentType.getCharSet();, +		if (charset == null) {, +			charset = DEFAULT_CHARSET;, +		}, +			if (MediaType.TEXT_PLAIN.isCompatibleWith(contentType)) {, +				InputStreamReader reader = new InputStreamReader(inputMessage.getBody(), charset);, +			else if (MediaType.APPLICATION_JSON.isCompatibleWith(contentType)) {, +				JSON_FORMAT.merge(inputMessage.getBody(), charset, this.extensionRegistry, builder);, +			}, +				XML_FORMAT.merge(inputMessage.getBody(), charset, this.extensionRegistry, builder);, +		catch (Exception ex) {, +			throw new HttpMessageNotReadableException("Could not read Protobuf message: " + ex.getMessage(), ex);, +		return (super.canWrite(mediaType) || MediaType.TEXT_HTML.isCompatibleWith(mediaType));, +		if (contentType == null) {, +			contentType = getDefaultContentType(message);, +		}, +		Charset charset = contentType.getCharSet();, +		if (charset == null) {, +			charset = DEFAULT_CHARSET;, +		}, +		if (MediaType.TEXT_PLAIN.isCompatibleWith(contentType)) {, +			OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputMessage.getBody(), charset);, +		else if (MediaType.APPLICATION_JSON.isCompatibleWith(contentType)) {, +			JSON_FORMAT.print(message, outputMessage.getBody(), charset);, +		}, +			XML_FORMAT.print(message, outputMessage.getBody(), charset);, +		}, +		else if (MediaType.TEXT_HTML.isCompatibleWith(contentType)) {, +			HTML_FORMAT.print(message, outputMessage.getBody(), charset);, +, +	/**, +	 * Create a new {@code Message.Builder} instance for the given class., +	 * <p>This method uses a ConcurrentHashMap for caching method lookups., +	 */, +	private static Message.Builder getMessageBuilder(Class<? extends Message> clazz) throws Exception {, +		Method method = methodCache.get(clazz);, +		if (method == null) {, +			method = clazz.getMethod("newBuilder");, +			methodCache.put(clazz, method);, +		}, +		return (Message.Builder) method.invoke(clazz);, +++ b/build.gradle, +		optional("com.google.protobuf:protobuf-java:2.6.1"), +		optional("com.googlecode.protobuf-java-format:protobuf-java-format:1.4"), +++ b/spring-web/src/main/java/org/springframework/http/converter/protobuf/ProtobufHttpMessageConverter.java, + * Copyright 2002-2016 the original author or authors., +import com.googlecode.protobuf.format.ProtobufFormatter;, + * An {@code HttpMessageConverter} that reads and writes {@link com.google.protobuf.Message}s, + * using <a href="https://developers.google.com/protocol-buffers/">Google Protocol Buffers</a>., + * <p>By default, it supports {@code "application/x-protobuf"}, {@code "text/plain"},, + * {@code "application/json"}, {@code "application/xml"}, while also writing {@code "text/html"}., + * <p>To generate {@code Message} Java classes, you need to install the {@code protoc} binary., + * <p>Requires Protobuf 2.6 and Protobuf Java Format 1.4, as of Spring 4.3., + * @author Juergen Hoeller, +, +	private static final ProtobufFormatter JSON_FORMAT = new JsonFormat();, +, +	private static final ProtobufFormatter XML_FORMAT = new XmlFormat();, +, +	private static final ProtobufFormatter HTML_FORMAT = new HtmlFormat();, +, +, +	private final ExtensionRegistry extensionRegistry = ExtensionRegistry.newInstance();, +		super(PROTOBUF, MediaType.TEXT_PLAIN, MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML);, +	protected MediaType getDefaultContentType(Message message) {, +		return PROTOBUF;]