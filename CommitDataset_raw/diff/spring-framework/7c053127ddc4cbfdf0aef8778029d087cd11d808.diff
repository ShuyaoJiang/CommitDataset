[+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/object/StoredProcedure.java, +import java.util.HashMap;, +import java.util.ArrayList;, +import java.util.List;, +	/**, +	 * Execute the stored procedure with the provided parameter values. This is, +	 * a convenience method where the order of the passed in parameter values, +	 * must match the order that the parameters where declared in., +	 * @param inParams variable number of input parameters. Output parameters should, +	 * not be included in this map., +	 * It is legal for values to be <code>null</code>, and this will produce the, +	 * correct behavior using a NULL argument to the stored procedure., +	 * @return map of output params, keyed by name as in parameter declarations., +	 * Output parameters will appear here, with their values after the, +	 * stored procedure has been called., +	 */, +	public Map<String, Object> execute(Object... inParams) {, +		Map<String, Object> paramsToUse = new HashMap<String, Object>();, +		validateParameters(inParams);, +		int i = 0;, +		for (SqlParameter sqlParameter : getDeclaredParameters()) {, +			if (sqlParameter.isInputValueProvided()) {, +				if (i < inParams.length) {, +					paramsToUse.put(sqlParameter.getName(), inParams[i++]);, +				}, +			}, +		}, +		return getJdbcTemplate().call(newCallableStatementCreator(paramsToUse), getDeclaredParameters());, +	}, +	 * declarations. Output parameters need not (but can) be included in this map., +	 * declarations. Output parameters need not (but can) be included in this map., +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/object/StoredProcedure.java, +import java.util.HashMap;, +import java.util.ArrayList;, +import java.util.List;, +	/**, +	 * Execute the stored procedure with the provided parameter values. This is, +	 * a convenience method where the order of the passed in parameter values, +	 * must match the order that the parameters where declared in., +	 * @param inParams variable number of input parameters. Output parameters should, +	 * not be included in this map., +	 * It is legal for values to be <code>null</code>, and this will produce the, +	 * correct behavior using a NULL argument to the stored procedure., +	 * @return map of output params, keyed by name as in parameter declarations., +	 * Output parameters will appear here, with their values after the, +	 * stored procedure has been called., +	 */, +	public Map<String, Object> execute(Object... inParams) {, +		Map<String, Object> paramsToUse = new HashMap<String, Object>();, +		validateParameters(inParams);, +		int i = 0;, +		for (SqlParameter sqlParameter : getDeclaredParameters()) {, +			if (sqlParameter.isInputValueProvided()) {, +				if (i < inParams.length) {, +					paramsToUse.put(sqlParameter.getName(), inParams[i++]);, +				}, +			}, +		}, +		return getJdbcTemplate().call(newCallableStatementCreator(paramsToUse), getDeclaredParameters());, +	}, +	 * declarations. Output parameters need not (but can) be included in this map., +	 * declarations. Output parameters need not (but can) be included in this map., +++ b/org.springframework.jdbc/src/test/java/org/springframework/jdbc/object/StoredProcedureTests.java, +	private void testAddInvoiceUsingObjectArray(final int amount, final int custid), +		throws Exception {, +		AddInvoiceUsingObjectArray adder = new AddInvoiceUsingObjectArray(mockDataSource);, +		int id = adder.execute(amount, custid);, +		assertEquals(5, id);, +	}, +, +, +	}, +, +	public void testAddInvoicesUsingObjectArray() throws Exception {, +		mockCallable.setObject(1, new Integer(1106), Types.INTEGER);, +		ctrlCallable.setVoidCallable();, +		mockCallable.setObject(2, new Integer(4), Types.INTEGER);, +		ctrlCallable.setVoidCallable();, +		mockCallable.registerOutParameter(3, Types.INTEGER);, +		ctrlCallable.setVoidCallable();, +		mockCallable.execute();, +		ctrlCallable.setReturnValue(false);, +		mockCallable.getUpdateCount();, +		ctrlCallable.setReturnValue(-1);, +		mockCallable.getObject(3);, +		ctrlCallable.setReturnValue(new Integer(5));, +		if (debugEnabled) {, +			mockCallable.getWarnings();, +			ctrlCallable.setReturnValue(null);, +		}, +		mockCallable.close();, +		ctrlCallable.setVoidCallable();, +, +		mockConnection.prepareCall("{call " + AddInvoice.SQL + "(?, ?, ?)}");, +		ctrlConnection.setReturnValue(mockCallable);, +, +		replay();, +		testAddInvoiceUsingObjectArray(1106, 4);, +, +	private static class AddInvoiceUsingObjectArray extends StoredProcedure {]