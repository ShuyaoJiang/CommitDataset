[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +						afterDisconnectSent(accessor);, +		 * After a DISCONNECT there should be no more client frames so we can, +		 * close the connection pro-actively. However, if the DISCONNECT has a, +		 * receipt header we leave the connection open and expect the server will, +		 * respond with a RECEIPT and then close the connection., +		 *, +		 * @see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">, +		 *     STOMP Specification 1.2 DISCONNECT</a>, +		 */, +		private void afterDisconnectSent(StompHeaderAccessor accessor) {, +			if (accessor.getReceipt() == null) {, +				clearConnection();, +			}, +		}, +, +		/**, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, +						afterDisconnectSent(accessor);, +		 * After a DISCONNECT there should be no more client frames so we can, +		 * close the connection pro-actively. However, if the DISCONNECT has a, +		 * receipt header we leave the connection open and expect the server will, +		 * respond with a RECEIPT and then close the connection., +		 *, +		 * @see <a href="http://stomp.github.io/stomp-specification-1.2.html#DISCONNECT">, +		 *     STOMP Specification 1.2 DISCONNECT</a>, +		 */, +		private void afterDisconnectSent(StompHeaderAccessor accessor) {, +			if (accessor.getReceipt() == null) {, +				clearConnection();, +			}, +		}, +, +		/**, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerIntegrationTests.java, +	@Test, +	public void disconnectWithReceipt() throws Exception {, +, +		logger.debug("Starting test disconnectWithReceipt()");, +, +		MessageExchange connect = MessageExchangeBuilder.connect("sess1").build();, +		this.relay.handleMessage(connect.message);, +		this.responseHandler.expectMessages(connect);, +, +		MessageExchange disconnect = MessageExchangeBuilder.disconnectWithReceipt("sess1", "r123").build();, +		this.relay.handleMessage(disconnect.message);, +, +		this.responseHandler.expectMessages(disconnect);, +	}, +, +		public static MessageExchangeBuilder disconnectWithReceipt(String sessionId, String receiptId) {, +, +			StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.DISCONNECT);, +			headers.setSessionId(sessionId);, +			headers.setReceipt(receiptId);, +			Message<?> message = MessageBuilder.createMessage(new byte[0], headers.getMessageHeaders());, +, +			MessageExchangeBuilder builder = new MessageExchangeBuilder(message);, +			builder.expected.add(new StompReceiptFrameMessageMatcher(sessionId, receiptId));, +			return builder;, +		}, +]