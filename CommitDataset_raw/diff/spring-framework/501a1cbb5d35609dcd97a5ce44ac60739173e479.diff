[+++ b/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java, + * @author Phillip Webb, +	 * Searches for the bridged method in the given candidates., +	 * @param candidateMethods the List of candidate Methods, +	 * @param bridgeMethod the bridge method, +	 * @return the bridged method, or {@code null} if none found, +	 */, +	private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod) {, +		if (candidateMethods.isEmpty()) {, +			return null;, +		}, +		Method previousMethod = null;, +		boolean sameSig = true;, +		for (Method candidateMethod : candidateMethods) {, +			if (isBridgeMethodFor(bridgeMethod, candidateMethod, bridgeMethod.getDeclaringClass())) {, +				return candidateMethod;, +			}, +			else if (previousMethod != null) {, +				sameSig = sameSig &&, +						Arrays.equals(candidateMethod.getGenericParameterTypes(), previousMethod.getGenericParameterTypes());, +			}, +			previousMethod = candidateMethod;, +		}, +		return (sameSig ? candidateMethods.get(0) : null);, +	}, +, +	/**, +	static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass) {, +		if (isResolvedTypeMatch(candidateMethod, bridgeMethod, declaringClass)) {, +		return (method != null && isResolvedTypeMatch(method, candidateMethod, declaringClass));, +	 * are equal after resolving all types against the declaringType, otherwise, +	 * returns {@code false}., +			Method genericMethod, Method candidateMethod, Class<?> declaringClass) {, +		for (int i = 0; i < candidateParameters.length; i++) {, +			ResolvableType genericParameter = ResolvableType.forMethodParameter(genericMethod, i, declaringClass);, +				if (!candidateParameter.getComponentType().equals(genericParameter.getComponentType().resolve(Object.class))) {, +			if (!candidateParameter.equals(genericParameter.resolve(Object.class))) {, +++ b/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java, + * @author Phillip Webb, +	 * Searches for the bridged method in the given candidates., +	 * @param candidateMethods the List of candidate Methods, +	 * @param bridgeMethod the bridge method, +	 * @return the bridged method, or {@code null} if none found, +	 */, +	private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod) {, +		if (candidateMethods.isEmpty()) {, +			return null;, +		}, +		Method previousMethod = null;, +		boolean sameSig = true;, +		for (Method candidateMethod : candidateMethods) {, +			if (isBridgeMethodFor(bridgeMethod, candidateMethod, bridgeMethod.getDeclaringClass())) {, +				return candidateMethod;, +			}, +			else if (previousMethod != null) {, +				sameSig = sameSig &&, +						Arrays.equals(candidateMethod.getGenericParameterTypes(), previousMethod.getGenericParameterTypes());, +			}, +			previousMethod = candidateMethod;, +		}, +		return (sameSig ? candidateMethods.get(0) : null);, +	}, +, +	/**, +	static boolean isBridgeMethodFor(Method bridgeMethod, Method candidateMethod, Class<?> declaringClass) {, +		if (isResolvedTypeMatch(candidateMethod, bridgeMethod, declaringClass)) {, +		return (method != null && isResolvedTypeMatch(method, candidateMethod, declaringClass));, +	 * are equal after resolving all types against the declaringType, otherwise, +	 * returns {@code false}., +			Method genericMethod, Method candidateMethod, Class<?> declaringClass) {, +		for (int i = 0; i < candidateParameters.length; i++) {, +			ResolvableType genericParameter = ResolvableType.forMethodParameter(genericMethod, i, declaringClass);, +				if (!candidateParameter.getComponentType().equals(genericParameter.getComponentType().resolve(Object.class))) {, +			if (!candidateParameter.equals(genericParameter.resolve(Object.class))) {, +++ b/spring-core/src/test/java/org/springframework/core/BridgeMethodResolverTests.java, +import static org.junit.Assert.*;, +, +		assertTrue("Should be bridge method", BridgeMethodResolver.isBridgeMethodFor(bridge, bridged, MyBar.class));, +		assertFalse("Should not be bridge method", BridgeMethodResolver.isBridgeMethodFor(bridge, other, MyBar.class));, +	@Deprecated, +		assertFalse("Match identified incorrectly", BridgeMethodResolver.isBridgeMethodFor(bridgeMethod, otherMethod, MessageBroadcasterImpl.class));, +		assertTrue("Match not found correctly", BridgeMethodResolver.isBridgeMethodFor(bridgeMethod, bridgedMethod, MessageBroadcasterImpl.class));, +	@Deprecated, +	@SuppressWarnings({ "unused", "unchecked" }), +	@SuppressWarnings("unchecked"), +	@SuppressWarnings("unchecked"), +++ b/spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java, + * @author Phillip Webb, +	 * Searches for the bridged method in the given candidates., +	 * @param candidateMethods the List of candidate Methods, +	 * @param bridgeMethod the bridge method, +	 * @return the bridged method, or {@code null} if none found, +	 */, +	private static Method searchCandidates(List<Method> candidateMethods, Method bridgeMethod) {, +		if (candidateMethods.isEmpty()) {, +			return null;, +		}, +		Method previousMethod = null;, +		boolean sameSig = true;, +		for (Method candidateMethod : candidateMethods) {]