[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java, +import java.io.InputStream;, +import javax.activation.FileTypeMap;, +import javax.activation.MimetypesFileTypeMap;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.util.ClassUtils;, +	private static final boolean jafPresent =, +			ClassUtils.isPresent("javax.activation.FileTypeMap", ResourceHttpRequestHandler.class.getClassLoader());, +, +				logger.debug("Determined media type '" + mediaType + "' for " + resource);, +				logger.debug("No media type found for " + resource + " - not sending a content-type header");, +		if (StringUtils.hasText(mimeType)) {, +			return new MediaType(mimeType);, +		}, +		else if (jafPresent) {, +			return ActivationMediaTypeFactory.getMediaType(resource.getFilename());, +		}, +		else {, +			return null;, +		}, +, +		if (mediaType != null) {, +	}, +, +	/**, +	 * Inner class to avoid hard-coded JAF dependency., +	 */, +	private static class ActivationMediaTypeFactory {, +, +		private static final FileTypeMap fileTypeMap;, +, +		static {, +			fileTypeMap = loadFileTypeMapFromContextSupportModule();, +		}, +, +		private static FileTypeMap loadFileTypeMapFromContextSupportModule() {, +			// see if we can find the extended mime.types from the context-support module, +			Resource mappingLocation = new ClassPathResource("org/springframework/mail/javamail/mime.types");, +			if (mappingLocation.exists()) {, +				InputStream inputStream = null;, +				try {, +					inputStream = mappingLocation.getInputStream();, +					return new MimetypesFileTypeMap(inputStream);, +				}, +				catch (IOException ex) {, +					// ignore, +				}, +				finally {, +					if (inputStream != null) {, +						try {, +							inputStream.close();, +						}, +						catch (IOException ex) {, +							// ignore, +						}, +					}, +				}, +			}, +			return FileTypeMap.getDefaultFileTypeMap();, +		}, +, +		public static MediaType getMediaType(String filename) {, +			String mediaType = fileTypeMap.getContentType(filename);, +			return (StringUtils.hasText(mediaType) ? MediaType.parseMediaType(mediaType) : null);, +		}, +	}, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java, +import java.io.InputStream;, +import javax.activation.FileTypeMap;, +import javax.activation.MimetypesFileTypeMap;, +import org.springframework.core.io.ClassPathResource;, +import org.springframework.util.ClassUtils;, +	private static final boolean jafPresent =, +			ClassUtils.isPresent("javax.activation.FileTypeMap", ResourceHttpRequestHandler.class.getClassLoader());, +, +				logger.debug("Determined media type '" + mediaType + "' for " + resource);, +				logger.debug("No media type found for " + resource + " - not sending a content-type header");, +		if (StringUtils.hasText(mimeType)) {, +			return new MediaType(mimeType);, +		}, +		else if (jafPresent) {, +			return ActivationMediaTypeFactory.getMediaType(resource.getFilename());, +		}, +		else {, +			return null;, +		}, +, +		if (mediaType != null) {, +	}, +, +	/**, +	 * Inner class to avoid hard-coded JAF dependency., +	 */, +	private static class ActivationMediaTypeFactory {, +, +		private static final FileTypeMap fileTypeMap;, +, +		static {, +			fileTypeMap = loadFileTypeMapFromContextSupportModule();]