[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, +	 * @param parameter the parameter whose dependency should be autowired (must not be, +	 * {@code null}), +		Assert.notNull(parameter, "Parameter must not be null");, +	 * @param parameter the parameter whose dependency should be resolved (must not be, +	 * {@code null}), +	 * the dependency (must not be {@code null}), +		Assert.notNull(parameter, "Parameter must not be null");, +		Assert.notNull(beanFactory, "AutowireCapableBeanFactory must not be null");, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java, +	 * @param parameter the parameter whose dependency should be autowired (must not be, +	 * {@code null}), +		Assert.notNull(parameter, "Parameter must not be null");, +	 * @param parameter the parameter whose dependency should be resolved (must not be, +	 * {@code null}), +	 * the dependency (must not be {@code null}), +		Assert.notNull(parameter, "Parameter must not be null");, +		Assert.notNull(beanFactory, "AutowireCapableBeanFactory must not be null");, +, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/AutowireUtilsTests.java, + * Copyright 2002-2019 the original author or authors., +import java.lang.reflect.Executable;, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +, +import org.springframework.util.ClassUtils;, +import static org.junit.Assert.*;, +import static org.mockito.ArgumentMatchers.*;, +import static org.mockito.Mockito.*;, +, + * Unit tests for {@link AutowireUtils}., + *, + * @author Lo√Øc Ledoyen, +	@Rule, +	public final ExpectedException exception = ExpectedException.none();, +, +	public void isAutowirablePreconditions() {, +		exception.expect(IllegalArgumentException.class);, +		exception.expectMessage("Parameter must not be null");, +		AutowireUtils.isAutowirable(null, 0);, +	}, +	@Test, +	public void annotatedParametersInMethodAreCandidatesForAutowiring() throws Exception {, +		Method method = getClass().getDeclaredMethod("autowirableMethod", String.class, String.class, String.class, String.class);, +		assertAutowirableParameters(method);, +	}, +, +	@Test, +	public void annotatedParametersInTopLevelClassConstructorAreCandidatesForAutowiring() throws Exception {, +		Constructor<?> constructor = AutowirableClass.class.getConstructor(String.class, String.class, String.class, String.class);, +		assertAutowirableParameters(constructor);, +	}, +, +	@Test, +	public void annotatedParametersInInnerClassConstructorAreCandidatesForAutowiring() throws Exception {, +		Class<?> innerClass = AutowirableClass.InnerAutowirableClass.class;, +		assertTrue(ClassUtils.isInnerClass(innerClass));, +		Constructor<?> constructor = innerClass.getConstructor(AutowirableClass.class, String.class, String.class);, +		assertAutowirableParameters(constructor);, +	}, +, +	private void assertAutowirableParameters(Executable executable) {, +		int startIndex = (executable instanceof Constructor), +				&& ClassUtils.isInnerClass(executable.getDeclaringClass()) ? 1 : 0;, +		Parameter[] parameters = executable.getParameters();, +		for (int parameterIndex = startIndex; parameterIndex < parameters.length; parameterIndex++) {, +			Parameter parameter = parameters[parameterIndex];, +	public void nonAnnotatedParametersInTopLevelClassConstructorAreNotCandidatesForAutowiring() throws Exception {, +		Constructor<?> notAutowirableConstructor = AutowirableClass.class.getConstructor(String.class);, +		Parameter[] parameters = notAutowirableConstructor.getParameters();, +		for (int parameterIndex = 0; parameterIndex < parameters.length; parameterIndex++) {, +			Parameter parameter = parameters[parameterIndex];, +			assertFalse("Parameter " + parameter + " must not be autowirable", AutowireUtils.isAutowirable(parameter, parameterIndex));, +	public void resolveDependencyPreconditionsForParameter() {, +		exception.expect(IllegalArgumentException.class);, +		exception.expectMessage("Parameter must not be null");, +		AutowireUtils.resolveDependency(null, 0, null, mock(AutowireCapableBeanFactory.class));, +	}, +	@Test, +	public void resolveDependencyPreconditionsForBeanFactory() throws Exception {, +		Method method = getClass().getDeclaredMethod("autowirableMethod", String.class, String.class, String.class, String.class);, +		Parameter parameter = method.getParameters()[0];, +, +		exception.expect(IllegalArgumentException.class);, +		exception.expectMessage("AutowireCapableBeanFactory must not be null");, +		AutowireUtils.resolveDependency(parameter, 0, null, null);, +	}, +, +	@Test, +	public void resolveDependencyForAnnotatedParametersInTopLevelClassConstructor() throws Exception {, +		Constructor<?> constructor = AutowirableClass.class.getConstructor(String.class, String.class, String.class, String.class);, +, +		AutowireCapableBeanFactory beanFactory = mock(AutowireCapableBeanFactory.class);, +		// Configure the mocked BeanFactory to return the DependencyDescriptor for convenience and, +		// to avoid using an ArgumentCaptor., +		when(beanFactory.resolveDependency(any(), isNull())).thenAnswer(invocation -> invocation.getArgument(0));, +, +		Parameter[] parameters = constructor.getParameters();, +		for (int parameterIndex = 0; parameterIndex < parameters.length; parameterIndex++) {]