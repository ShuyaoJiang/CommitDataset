[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/PathExtensionContentTypeResolver.java, +, +import java.util.Optional;, +import org.springframework.http.support.MediaTypeUtils;, +import org.springframework.util.MimeType;, +import org.springframework.util.MimeTypeUtils2;, +		if (this.useJaf) {, +			Optional<MimeType> mimeType = MimeTypeUtils2.getMimeType("file." + key);, +			MediaType mediaType = mimeType.map(MediaTypeUtils::toMediaType).orElse(null);, +		if (mediaType == null) {, +			mediaType =, +					MimeTypeUtils2.getMimeType(filename).map(MediaTypeUtils::toMediaType), +							.orElse(null);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/PathExtensionContentTypeResolver.java, +, +import java.util.Optional;, +import org.springframework.http.support.MediaTypeUtils;, +import org.springframework.util.MimeType;, +import org.springframework.util.MimeTypeUtils2;, +		if (this.useJaf) {, +			Optional<MimeType> mimeType = MimeTypeUtils2.getMimeType("file." + key);, +			MediaType mediaType = mimeType.map(MediaTypeUtils::toMediaType).orElse(null);, +		if (mediaType == null) {, +			mediaType =, +					MimeTypeUtils2.getMimeType(filename).map(MediaTypeUtils::toMediaType), +							.orElse(null);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestBodyArgumentResolver.java, +import org.springframework.http.converter.reactive.HttpMessageConverter;, +	private final List<HttpMessageConverter<?>> messageConverters;, +	public RequestBodyArgumentResolver(List<HttpMessageConverter<?>> messageConverters,, +			ConversionService service) {, +		Assert.notEmpty(messageConverters, "At least one message converter is required.");, +		this.messageConverters = messageConverters;, +		ResolvableType type = ResolvableType.forMethodParameter(parameter);, +		ResolvableType elementType = type.hasGenerics() ? type.getGeneric(0) : type;, +, +		Flux<DataBuffer> body = exchange.getRequest().getBody();, +		Flux<?> elementFlux;, +, +		HttpMessageConverter<?> messageConverter =, +				resolveMessageConverter(elementType, mediaType);, +		if (messageConverter != null) {, +			elementFlux = messageConverter.read(elementType, exchange.getRequest());, +		}, +		else {, +			elementFlux = body;, +			return Mono.just(this.conversionService, +					.convert(elementFlux, type.getRawClass()));, +	private HttpMessageConverter<?> resolveMessageConverter(ResolvableType type,, +			MediaType mediaType) {, +		for (HttpMessageConverter<?> messageConverter : this.messageConverters) {, +			if (messageConverter.canRead(type, mediaType)) {, +				return messageConverter;, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/accept/PathExtensionContentTypeResolver.java, +, +import java.util.Optional;, +import org.springframework.http.support.MediaTypeUtils;, +import org.springframework.util.MimeType;, +import org.springframework.util.MimeTypeUtils2;, +		if (this.useJaf) {, +			Optional<MimeType> mimeType = MimeTypeUtils2.getMimeType("file." + key);, +			MediaType mediaType = mimeType.map(MediaTypeUtils::toMediaType).orElse(null);, +		if (mediaType == null) {, +			mediaType =, +					MimeTypeUtils2.getMimeType(filename).map(MediaTypeUtils::toMediaType), +							.orElse(null);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestBodyArgumentResolver.java, +import org.springframework.http.converter.reactive.HttpMessageConverter;, +	private final List<HttpMessageConverter<?>> messageConverters;, +	public RequestBodyArgumentResolver(List<HttpMessageConverter<?>> messageConverters,, +			ConversionService service) {, +		Assert.notEmpty(messageConverters, "At least one message converter is required.");, +		this.messageConverters = messageConverters;, +		ResolvableType type = ResolvableType.forMethodParameter(parameter);, +		ResolvableType elementType = type.hasGenerics() ? type.getGeneric(0) : type;, +, +		Flux<DataBuffer> body = exchange.getRequest().getBody();, +		Flux<?> elementFlux;, +, +		HttpMessageConverter<?> messageConverter =, +				resolveMessageConverter(elementType, mediaType);, +		if (messageConverter != null) {, +			elementFlux = messageConverter.read(elementType, exchange.getRequest());, +		}, +		else {, +			elementFlux = body;, +			return Mono.just(this.conversionService, +					.convert(elementFlux, type.getRawClass()));, +	private HttpMessageConverter<?> resolveMessageConverter(ResolvableType type,, +			MediaType mediaType) {, +		for (HttpMessageConverter<?> messageConverter : this.messageConverters) {, +			if (messageConverter.canRead(type, mediaType)) {, +				return messageConverter;, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/method/annotation/RequestMappingHandlerAdapter.java, +import java.nio.ByteBuffer;, +import org.springframework.core.codec.support.ByteBufferEncoder;, +import org.springframework.core.codec.support.JacksonJsonEncoder;, +import org.springframework.core.codec.support.Jaxb2Encoder;, +import org.springframework.core.codec.support.StringEncoder;, +import org.springframework.http.converter.reactive.CodecHttpMessageConverter;]