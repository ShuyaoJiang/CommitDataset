[+++ b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java, +, +		try {, +			lbf.registerAlias("test3", "test2");, +			fail("Should have thrown IllegalStateException");, +		}, +		catch (IllegalStateException ex) {, +			// expected, +		}, +, +, +		lbf.registerAlias("test", "test3");, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java, +, +		try {, +			lbf.registerAlias("test3", "test2");, +			fail("Should have thrown IllegalStateException");, +		}, +		catch (IllegalStateException ex) {, +			// expected, +		}, +, +, +		lbf.registerAlias("test", "test3");, +++ b/spring-core/src/main/java/org/springframework/core/AliasRegistry.java, + * Copyright 2002-2015 the original author or authors., +	 * @param name the name to check, +	boolean isAlias(String name);, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java, +, +		try {, +			lbf.registerAlias("test3", "test2");, +			fail("Should have thrown IllegalStateException");, +		}, +		catch (IllegalStateException ex) {, +			// expected, +		}, +, +, +		lbf.registerAlias("test", "test3");, +++ b/spring-core/src/main/java/org/springframework/core/AliasRegistry.java, + * Copyright 2002-2015 the original author or authors., +	 * @param name the name to check, +	boolean isAlias(String name);, +++ b/spring-core/src/main/java/org/springframework/core/SimpleAliasRegistry.java, +			if (registeredName != null) {, +				if (registeredName.equals(name)) {, +					// An existing alias - no need to re-register, +					return;, +				}, +				if (!allowAliasOverriding()) {, +	/**, +	 * Determine whether the given name has the given alias registered., +	 * @param name the name to check, +	 * @param alias the alias to look for, +	 * @since 4.2.1, +	 */, +	public boolean hasAlias(String name, String alias) {, +		for (Map.Entry<String, String> entry : this.aliasMap.entrySet()) {, +			String registeredName = entry.getValue();, +			if (registeredName.equals(name)) {, +				String registeredAlias = entry.getKey();, +				return (registeredAlias.equals(alias) || hasAlias(registeredAlias, alias));, +			}, +		}, +		return false;, +	}, +, +					if (existingName != null) {, +						if (existingName.equals(resolvedName)) {, +							// Pointing to existing alias - just remove placeholder, +							this.aliasMap.remove(alias);, +							break;, +						}, +	 * Check whether the given name points back to the given alias as an alias, +	 * in the other direction already, catching a circular reference upfront, +	 * and throwing a corresponding IllegalStateException., +	 * @param name the candidate name, +	 * @param alias the candidate alias, +	 * @see #registerAlias, +	 * @see #hasAlias, +	 */, +	protected void checkForAliasCircle(String name, String alias) {, +		if (hasAlias(alias, name)) {, +			throw new IllegalStateException("Cannot register alias '" + alias +, +					"' for name '" + name + "': Circular reference - '" +, +					name + "' is a direct or indirect alias for '" + alias + "' already");, +		}, +	}, +, +	/**]