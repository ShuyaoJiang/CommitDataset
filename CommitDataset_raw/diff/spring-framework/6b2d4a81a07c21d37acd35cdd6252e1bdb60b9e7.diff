[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodInvoker.java, +			paramValue = checkValue(paramName, paramValue, paramType);, +			headerValue = checkValue(headerName, headerValue, paramType);, +			cookieValue = checkValue(cookieName, cookieValue, paramType);, +	private Object checkValue(String name, Object value, Class paramType) {, +		if (value == null) {, +			if (boolean.class.equals(paramType)) {, +				return Boolean.FALSE;, +			}, +			else if (paramType.isPrimitive()) {, +		return value;, +	}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodInvoker.java, +			paramValue = checkValue(paramName, paramValue, paramType);, +			headerValue = checkValue(headerName, headerValue, paramType);, +			cookieValue = checkValue(cookieName, cookieValue, paramType);, +	private Object checkValue(String name, Object value, Class paramType) {, +		if (value == null) {, +			if (boolean.class.equals(paramType)) {, +				return Boolean.FALSE;, +			}, +			else if (paramType.isPrimitive()) {, +		return value;, +	}, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/annotation/ServletAnnotationControllerTests.java, +	public void optionalParamPresent() throws Exception {, +		@SuppressWarnings("serial") DispatcherServlet servlet = new DispatcherServlet() {, +			@Override, +			protected WebApplicationContext createWebApplicationContext(WebApplicationContext parent) {, +				GenericWebApplicationContext wac = new GenericWebApplicationContext();, +				wac.registerBeanDefinition("controller", new RootBeanDefinition(OptionalParamController.class));, +				wac.refresh();, +				return wac;, +			}, +		};, +		servlet.init(new MockServletConfig());, +, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/myPath.do");, +		request.addParameter("id", "val");, +		request.addParameter("flag", "true");, +		request.addHeader("header", "otherVal");, +		MockHttpServletResponse response = new MockHttpServletResponse();, +		servlet.service(request, response);, +		assertEquals("val-true-otherVal", response.getContentAsString());, +	}, +, +	@Test, +		assertEquals("null-false-null", response.getContentAsString());, +		public void myHandle(@RequestParam(required = false) String id, @RequestParam(required = false) boolean flag,, +			response.getWriter().write(String.valueOf(id) + "-" + flag + "-" + String.valueOf(header));]