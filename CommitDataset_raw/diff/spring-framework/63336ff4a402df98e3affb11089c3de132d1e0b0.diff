[+++ b/org.springframework.context/src/main/java/org/springframework/model/binder/BindingResults.java, +	 * If there is at least one failed BindingResult., +	 * @see BindingResult#isFailure(), +	 */, +	boolean hasFailures();, +	, +	/**, +	 * The total number of results., +++ b/org.springframework.context/src/main/java/org/springframework/model/binder/BindingResults.java, +	 * If there is at least one failed BindingResult., +	 * @see BindingResult#isFailure(), +	 */, +	boolean hasFailures();, +	, +	/**, +	 * The total number of results., +++ b/org.springframework.context/src/main/java/org/springframework/model/binder/MissingFieldException.java, +	 * Creates a new missing field exceptions., +	 * @param fieldValues, +	public MissingFieldException(List<String> missing, Map<String, ? extends Object> fieldValues) {, +		super(getMessage(missing, fieldValues));, +	 * The names of the fields that are missing., +++ b/org.springframework.context/src/main/java/org/springframework/model/binder/BindingResults.java, +	 * If there is at least one failed BindingResult., +	 * @see BindingResult#isFailure(), +	 */, +	boolean hasFailures();, +	, +	/**, +	 * The total number of results., +++ b/org.springframework.context/src/main/java/org/springframework/model/binder/MissingFieldException.java, +	 * Creates a new missing field exceptions., +	 * @param fieldValues, +	public MissingFieldException(List<String> missing, Map<String, ? extends Object> fieldValues) {, +		super(getMessage(missing, fieldValues));, +	 * The names of the fields that are missing., +++ b/org.springframework.context/src/main/java/org/springframework/model/ui/binder/ArrayListBindingResults.java, +	public boolean hasFailures() {, +		return failures().size() > 0;, +	}, +	, +++ b/org.springframework.context/src/main/java/org/springframework/model/binder/BindingResults.java, +	 * If there is at least one failed BindingResult., +	 * @see BindingResult#isFailure(), +	 */, +	boolean hasFailures();, +	, +	/**, +	 * The total number of results., +++ b/org.springframework.context/src/main/java/org/springframework/model/binder/MissingFieldException.java, +	 * Creates a new missing field exceptions., +	 * @param fieldValues, +	public MissingFieldException(List<String> missing, Map<String, ? extends Object> fieldValues) {, +		super(getMessage(missing, fieldValues));, +	 * The names of the fields that are missing., +++ b/org.springframework.context/src/main/java/org/springframework/model/ui/binder/ArrayListBindingResults.java, +	public boolean hasFailures() {, +		return failures().size() > 0;, +	}, +	, +++ b/org.springframework.context/src/main/java/org/springframework/model/ui/binder/FieldNotEditableResult.java, +				return "fieldNotEditable";, +++ b/org.springframework.context/src/main/java/org/springframework/model/binder/BindingResults.java, +	 * If there is at least one failed BindingResult., +	 * @see BindingResult#isFailure(), +	 */, +	boolean hasFailures();, +	, +	/**, +	 * The total number of results., +++ b/org.springframework.context/src/main/java/org/springframework/model/binder/MissingFieldException.java, +	 * Creates a new missing field exceptions., +	 * @param fieldValues, +	public MissingFieldException(List<String> missing, Map<String, ? extends Object> fieldValues) {, +		super(getMessage(missing, fieldValues));, +	 * The names of the fields that are missing., +++ b/org.springframework.context/src/main/java/org/springframework/model/ui/binder/ArrayListBindingResults.java, +	public boolean hasFailures() {, +		return failures().size() > 0;, +	}, +	, +++ b/org.springframework.context/src/main/java/org/springframework/model/ui/binder/FieldNotEditableResult.java, +				return "fieldNotEditable";, +++ b/org.springframework.context/src/main/java/org/springframework/model/ui/binder/FieldNotFoundResult.java, +				return "fieldNotFound";]