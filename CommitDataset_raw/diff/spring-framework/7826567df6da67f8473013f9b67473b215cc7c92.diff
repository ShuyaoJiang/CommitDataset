[+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +					return wrapCacheValue(method, cache.get(key, () -> unwrapReturnValue(invokeOperation(invoker))));, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +					return wrapCacheValue(method, cache.get(key, () -> unwrapReturnValue(invokeOperation(invoker))));, +++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsTemplate.java, +		send(destination, session -> getRequiredMessageConverter().toMessage(message, session));, +		send(destinationName, session -> getRequiredMessageConverter().toMessage(message, session));, +		return execute(session -> doReceive(session, destination, messageSelector), true);, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +					return wrapCacheValue(method, cache.get(key, () -> unwrapReturnValue(invokeOperation(invoker))));, +++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsTemplate.java, +		send(destination, session -> getRequiredMessageConverter().toMessage(message, session));, +		send(destinationName, session -> getRequiredMessageConverter().toMessage(message, session));, +		return execute(session -> doReceive(session, destination, messageSelector), true);, +++ b/spring-web/src/main/java/org/springframework/http/codec/xml/XmlEventDecoder.java, +									.doFinally(t -> DataBufferUtils.release(dataBuffer));, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +					return wrapCacheValue(method, cache.get(key, () -> unwrapReturnValue(invokeOperation(invoker))));, +++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsTemplate.java, +		send(destination, session -> getRequiredMessageConverter().toMessage(message, session));, +		send(destinationName, session -> getRequiredMessageConverter().toMessage(message, session));, +		return execute(session -> doReceive(session, destination, messageSelector), true);, +++ b/spring-web/src/main/java/org/springframework/http/codec/xml/XmlEventDecoder.java, +									.doFinally(t -> DataBufferUtils.release(dataBuffer));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ExchangeFilterFunctions.java, +									.headers(headers -> headers.set(HttpHeaders.AUTHORIZATION,, +                                            authorization(credentials))), +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java, +					return wrapCacheValue(method, cache.get(key, () -> unwrapReturnValue(invokeOperation(invoker))));, +++ b/spring-jms/src/main/java/org/springframework/jms/core/JmsTemplate.java, +		send(destination, session -> getRequiredMessageConverter().toMessage(message, session));, +		send(destinationName, session -> getRequiredMessageConverter().toMessage(message, session));, +		return execute(session -> doReceive(session, destination, messageSelector), true);, +++ b/spring-web/src/main/java/org/springframework/http/codec/xml/XmlEventDecoder.java, +									.doFinally(t -> DataBufferUtils.release(dataBuffer));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ExchangeFilterFunctions.java, +									.headers(headers -> headers.set(HttpHeaders.AUTHORIZATION,, +                                            authorization(credentials))), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/support/RouterFunctionMapping.java, +			routerFunctions.forEach(routerFunction -> logger.info("Mapped " + routerFunction));]