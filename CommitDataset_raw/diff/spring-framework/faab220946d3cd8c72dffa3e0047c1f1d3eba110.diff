[+++ b/spring-jms/src/test/java/org/springframework/jms/listener/adapter/MessagingMessageListenerAdapterTests.java, +import org.springframework.jms.support.converter.MappingJackson2MessageConverter;, +import org.springframework.jms.support.converter.MessageType;, +		Message<String> result = MessageBuilder.withPayload("Response").build();, +	@Test, +	public void replyJackson() throws JMSException {, +		TextMessage reply = testReplyWithJackson("replyJackson",, +				"{\"counter\":42,\"name\":\"Response\",\"description\":\"lengthy description\"}");, +		verify(reply).setObjectProperty("foo", "bar");, +	}, +, +	private TextMessage testReplyWithJackson(String methodName, String replyContent) throws JMSException {, +		Queue replyDestination = mock(Queue.class);, +		Message<String> request = MessageBuilder.withPayload("Response").build();, +, +		Session session = mock(Session.class);, +		MessageProducer messageProducer = mock(MessageProducer.class);, +		TextMessage responseMessage = mock(TextMessage.class);, +		given(session.createTextMessage(replyContent)).willReturn(responseMessage);, +		given(session.createProducer(replyDestination)).willReturn(messageProducer);, +, +		MessagingMessageListenerAdapter listener = getPayloadInstance(request, methodName, Message.class);, +		MappingJackson2MessageConverter messageConverter = new MappingJackson2MessageConverter();, +		messageConverter.setTargetType(MessageType.TEXT);, +		listener.setMessageConverter(messageConverter);, +		listener.setDefaultResponseDestination(replyDestination);, +		listener.onMessage(mock(javax.jms.Message.class), session);, +, +		verify(session, times(0)).createQueue(anyString());, +		verify(session).createTextMessage(replyContent);, +		verify(messageProducer).send(responseMessage);, +		verify(messageProducer).close();, +		return responseMessage;, +	}, +, +, +, +		Method method = ReflectionUtils.findMethod(SampleBean.class, methodName, parameterTypes);, +		adapter.setHandlerMethod(factory.createInvocableHandlerMethod(sample, method));, +		public Message<SampleResponse> replyJackson(Message<String> input) {, +			return MessageBuilder.withPayload(createSampleResponse(input.getPayload())), +					.setHeader("foo", "bar").build();, +		}, +, +		private SampleResponse createSampleResponse(String name) {, +			return new SampleResponse(name, "lengthy description");, +		}, +, +, +	private static class SampleResponse {, +, +		private int counter = 42;, +, +		private String name;, +, +		private String description;, +, +		public SampleResponse(String name, String description) {, +			this.name = name;, +			this.description = description;, +		}, +, +		public int getCounter() {, +			return counter;, +		}, +, +		public void setCounter(int counter) {, +			this.counter = counter;, +		}, +, +		public String getName() {, +			return name;, +		}, +, +		public void setName(String name) {, +			this.name = name;, +		}, +, +		public String getDescription() {, +			return description;, +		}, +, +		public void setDescription(String description) {, +			this.description = description;, +		}, +	}, +]