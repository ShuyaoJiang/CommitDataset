[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * Create a copy of this nested type descriptor and apply the specific type information from the indexed value, if necessary., +	 * This is necessary to support type conversion during collection and map binding operations where generic information may not be available., +		if (isCollection() && Object.class.equals(getElementType())) {, +			Collection<?> collection = (Collection<?>) object;, +			if (collection.size() > 0) {, +				return new TypeDescriptor(object.getClass(), CollectionUtils.findCommonElementType((Collection<?>) object), methodParameter, field, fieldNestingLevel, annotations);, +			} else {, +				return this;, +		}, +		else if (isMap() && Object.class.equals(getMapKeyType()) && Object.class.equals(getMapValueType())) {, +			Map<?, ?> map = (Map<?, ?>) object;, +			if (map.size() > 0) {, +				return new TypeDescriptor(object.getClass(), CollectionUtils.findCommonElementType(((Map<?, ?>) object).keySet()),, +						CollectionUtils.findCommonElementType(((Map<?, ?>) object).values()), methodParameter, field, fieldNestingLevel, annotations);, +			} else {, +				return this;, +			}, +			return this;, +	@SuppressWarnings("unchecked"), +			return GenericCollectionTypeResolver.getCollectionType((Class<? extends Collection<?>>) this.type);, +	@SuppressWarnings("unchecked"), +			return GenericCollectionTypeResolver.getMapKeyType((Class<? extends Map<?, ?>>) this.type);, +	@SuppressWarnings("unchecked"), +			return GenericCollectionTypeResolver.getMapValueType((Class<? extends Map<?, ?>>) this.type);, +	private TypeDescriptor(Class<?> collectionType, Class<?> elementType, MethodParameter methodParameter, Field field, int fieldNestingLevel, Annotation[] annotations) {, +		this(collectionType, elementType);, +		this.methodParameter = methodParameter;, +		this.field = field;, +		this.fieldNestingLevel = fieldNestingLevel;, +		this.annotations = annotations;, +	}, +, +	private TypeDescriptor(Class<?> mapType, Class<?> keyType, Class<?> valueType, MethodParameter methodParameter, Field field, int fieldNestingLevel, Annotation[] annotations) {, +		this(mapType, keyType, valueType);, +		this.methodParameter = methodParameter;, +		this.field = field;, +		this.fieldNestingLevel = fieldNestingLevel;, +		this.annotations = annotations;, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * Create a copy of this nested type descriptor and apply the specific type information from the indexed value, if necessary., +	 * This is necessary to support type conversion during collection and map binding operations where generic information may not be available., +		if (isCollection() && Object.class.equals(getElementType())) {, +			Collection<?> collection = (Collection<?>) object;, +			if (collection.size() > 0) {, +				return new TypeDescriptor(object.getClass(), CollectionUtils.findCommonElementType((Collection<?>) object), methodParameter, field, fieldNestingLevel, annotations);, +			} else {, +				return this;, +		}, +		else if (isMap() && Object.class.equals(getMapKeyType()) && Object.class.equals(getMapValueType())) {, +			Map<?, ?> map = (Map<?, ?>) object;, +			if (map.size() > 0) {, +				return new TypeDescriptor(object.getClass(), CollectionUtils.findCommonElementType(((Map<?, ?>) object).keySet()),, +						CollectionUtils.findCommonElementType(((Map<?, ?>) object).values()), methodParameter, field, fieldNestingLevel, annotations);, +			} else {, +				return this;, +			}, +			return this;, +	@SuppressWarnings("unchecked"), +			return GenericCollectionTypeResolver.getCollectionType((Class<? extends Collection<?>>) this.type);, +	@SuppressWarnings("unchecked"), +			return GenericCollectionTypeResolver.getMapKeyType((Class<? extends Map<?, ?>>) this.type);, +	@SuppressWarnings("unchecked"), +			return GenericCollectionTypeResolver.getMapValueType((Class<? extends Map<?, ?>>) this.type);, +	private TypeDescriptor(Class<?> collectionType, Class<?> elementType, MethodParameter methodParameter, Field field, int fieldNestingLevel, Annotation[] annotations) {, +		this(collectionType, elementType);, +		this.methodParameter = methodParameter;, +		this.field = field;, +		this.fieldNestingLevel = fieldNestingLevel;, +		this.annotations = annotations;, +	}, +, +	private TypeDescriptor(Class<?> mapType, Class<?> keyType, Class<?> valueType, MethodParameter methodParameter, Field field, int fieldNestingLevel, Annotation[] annotations) {, +		this(mapType, keyType, valueType);, +		this.methodParameter = methodParameter;, +		this.field = field;, +		this.fieldNestingLevel = fieldNestingLevel;, +		this.annotations = annotations;, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/MapToMapConverter.java, +		Map<Object, Object> sourceMap = (Map<Object, Object>) source;, +		Map<Object, Object> targetMap = CollectionFactory.createMap(targetType.getType(), sourceMap.size());, +		TypeDescriptor targetKeyType = targetType.getMapKeyTypeDescriptor();, +		TypeDescriptor targetValueType = targetType.getMapValueTypeDescriptor();, +		if (Object.class.equals(targetKeyType.getType()) && Object.class.equals(targetValueType.getType())) {, +			for (Map.Entry<Object, Object> entry : sourceMap.entrySet()) {, +				targetMap.put(entry.getKey(), entry.getValue());, +			}, +		} else {, +			for (Map.Entry<Object, Object> entry : sourceMap.entrySet()) {, +				Object sourceKey = entry.getKey();, +				Object sourceValue = entry.getValue();, +		}, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * Create a copy of this nested type descriptor and apply the specific type information from the indexed value, if necessary., +	 * This is necessary to support type conversion during collection and map binding operations where generic information may not be available., +		if (isCollection() && Object.class.equals(getElementType())) {]