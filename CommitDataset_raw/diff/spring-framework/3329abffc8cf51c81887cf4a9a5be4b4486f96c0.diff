[+++ b/spring-web/src/main/java/org/springframework/http/RequestEntity.java, + * Copyright 2002-2016 the original author or authors., +import java.lang.reflect.Type;, + * @author Sebastien Deleuze, +	private final Type type;, +, +		this(body, null, method, url, null);, +	}, +, +	/**, +	 * Constructor with method, URL, body and type but without headers., +	 * @param body the body, +	 * @param method the method, +	 * @param url the URL, +	 * @param type the type used for generic type resolution, +	 * @since 4.3, +	 */, +	public RequestEntity(T body, HttpMethod method, URI url, Type type) {, +		this(body, null, method, url, type);, +		this(null, headers, method, url, null);, +		this(body, headers, method, url, null);, +	}, +, +	/**, +	 * Constructor with method, URL, headers, body and type., +	 * @param body the body, +	 * @param headers the headers, +	 * @param method the method, +	 * @param url the URL, +	 * @param type the type used for generic type resolution, +	 * @since 4.3, +	 */, +	public RequestEntity(T body, MultiValueMap<String, String> headers, HttpMethod method, URI url, Type type) {, +		this.type = type;, +	/**, +	 * Return the type of the request's body., +	 * @return the request's body type, +	 * @since 4.3, +	 */, +	public Type getType() {, +		return (this.type == null && this.getBody() != null ? this.getBody().getClass() : this.type );, +	}, +, +		/**, +		 * Set the body and type of the request entity and build the RequestEntity., +		 * @param <T> the type of the body, +		 * @param body the body of the request entity, +		 * @param type the type of the body, useful for generic type resolution, +		 * @return the built request entity, +		 * @since 4.3, +		 */, +		<T> RequestEntity<T> body(T body, Type type);, +, +		@Override, +		public <T> RequestEntity<T> body(T body, Type type) {, +			return new RequestEntity<T>(body, this.headers, this.method, this.url, type);, +		}, +++ b/spring-web/src/main/java/org/springframework/http/RequestEntity.java, + * Copyright 2002-2016 the original author or authors., +import java.lang.reflect.Type;, + * @author Sebastien Deleuze, +	private final Type type;, +, +		this(body, null, method, url, null);, +	}, +, +	/**, +	 * Constructor with method, URL, body and type but without headers., +	 * @param body the body, +	 * @param method the method, +	 * @param url the URL, +	 * @param type the type used for generic type resolution, +	 * @since 4.3, +	 */, +	public RequestEntity(T body, HttpMethod method, URI url, Type type) {, +		this(body, null, method, url, type);, +		this(null, headers, method, url, null);, +		this(body, headers, method, url, null);, +	}, +, +	/**, +	 * Constructor with method, URL, headers, body and type., +	 * @param body the body, +	 * @param headers the headers, +	 * @param method the method, +	 * @param url the URL, +	 * @param type the type used for generic type resolution, +	 * @since 4.3, +	 */, +	public RequestEntity(T body, MultiValueMap<String, String> headers, HttpMethod method, URI url, Type type) {, +		this.type = type;, +	/**, +	 * Return the type of the request's body., +	 * @return the request's body type, +	 * @since 4.3, +	 */, +	public Type getType() {, +		return (this.type == null && this.getBody() != null ? this.getBody().getClass() : this.type );, +	}, +]