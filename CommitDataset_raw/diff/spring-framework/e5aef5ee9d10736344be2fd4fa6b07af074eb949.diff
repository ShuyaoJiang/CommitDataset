[+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +			Class<?> resolvedComponent = getComponentType().resolve();, +			return (resolvedComponent == null ? null : Array.newInstance(resolvedComponent, 0).getClass());, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +			Class<?> resolvedComponent = getComponentType().resolve();, +			return (resolvedComponent == null ? null : Array.newInstance(resolvedComponent, 0).getClass());, +++ b/spring-core/src/test/java/org/springframework/core/GenericTypeResolverTests.java, +	@Test, +	public void getGenericsOnArrayFromParamCannotBeResolved() throws Exception {, +		// SPR-11044, +		MethodParameter methodParameter = MethodParameter.forMethodOrConstructor(, +				WithArrayBase.class.getDeclaredMethod("array", Object[].class), 0);, +		Class<?> resolved = GenericTypeResolver.resolveParameterType(methodParameter, WithArray.class);, +		assertThat(resolved, equalTo((Class) Object[].class));, +	}, +, +	@Test, +	public void getGenericsOnArrayFromReturnCannotBeResolved() throws Exception {, +		// SPR-11044, +		Class<?> resolved = GenericTypeResolver.resolveReturnType(, +				WithArrayBase.class.getDeclaredMethod("array", Object[].class),, +				WithArray.class);, +		assertThat(resolved, equalTo((Class) Object[].class));, +	}, +, +	static abstract class WithArrayBase<T> {, +, +		public abstract T[] array(T... args);, +, +	}, +, +	static abstract class WithArray<T> extends WithArrayBase<T> {, +, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +			Class<?> resolvedComponent = getComponentType().resolve();, +			return (resolvedComponent == null ? null : Array.newInstance(resolvedComponent, 0).getClass());, +++ b/spring-core/src/test/java/org/springframework/core/GenericTypeResolverTests.java, +	@Test, +	public void getGenericsOnArrayFromParamCannotBeResolved() throws Exception {, +		// SPR-11044, +		MethodParameter methodParameter = MethodParameter.forMethodOrConstructor(, +				WithArrayBase.class.getDeclaredMethod("array", Object[].class), 0);, +		Class<?> resolved = GenericTypeResolver.resolveParameterType(methodParameter, WithArray.class);, +		assertThat(resolved, equalTo((Class) Object[].class));, +	}, +, +	@Test, +	public void getGenericsOnArrayFromReturnCannotBeResolved() throws Exception {, +		// SPR-11044, +		Class<?> resolved = GenericTypeResolver.resolveReturnType(, +				WithArrayBase.class.getDeclaredMethod("array", Object[].class),, +				WithArray.class);, +		assertThat(resolved, equalTo((Class) Object[].class));, +	}, +, +	static abstract class WithArrayBase<T> {, +, +		public abstract T[] array(T... args);, +, +	}, +, +	static abstract class WithArray<T> extends WithArrayBase<T> {, +, +	}, +, +++ b/spring-core/src/test/java/org/springframework/core/ResolvableTypeTests.java, +	public void resolveVariableGenericArray() throws Exception {, +		ResolvableType type = ResolvableType.forField(Fields.class.getField("variableTypeGenericArray"), TypedFields.class);, +		assertThat(type.getType().toString(), equalTo("T[]"));, +		assertThat(type.isArray(), equalTo(true));, +		assertThat(type.resolve(), equalTo((Class) String[].class));, +	}, +, +	@Test, +	public void resolveVariableGenericArrayUnknown() throws Exception {, +		ResolvableType type = ResolvableType.forField(Fields.class.getField("variableTypeGenericArray"));, +		assertThat(type.getType().toString(), equalTo("T[]"));, +		assertThat(type.isArray(), equalTo(true));, +		assertThat(type.resolve(), nullValue());, +	}, +, +	@Test, +	public void resolveVariableGenericArrayUnknownWithFallback() throws Exception {, +		ResolvableType type = ResolvableType.forField(Fields.class.getField("variableTypeGenericArray"));, +		assertThat(type.getType().toString(), equalTo("T[]"));, +		assertThat(type.isArray(), equalTo(true));, +		assertThat(type.resolve(Object.class), equalTo((Class) Object.class));, +	}, +, +	@Test, +		public T[] variableTypeGenericArray;, +]