[+++ b/spring-web/src/main/java/org/springframework/http/MediaTypeFactory.java, +		return Optional.ofNullable(resource), +				.map(Resource::getFilename), +				.flatMap(MediaTypeFactory::getMediaType);, +		return getMediaTypes(filename).stream().findFirst();, +++ b/spring-web/src/main/java/org/springframework/http/MediaTypeFactory.java, +		return Optional.ofNullable(resource), +				.map(Resource::getFilename), +				.flatMap(MediaTypeFactory::getMediaType);, +		return getMediaTypes(filename).stream().findFirst();, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, +	 * "path extension" strategy and its, +	 * {@link PathExtensionContentNegotiationStrategy#setUseRegisteredExtensionsOnly(boolean), +	 * useRegisteredExtensionsOnly} property is set to "false", the list of extensions may, +++ b/spring-web/src/main/java/org/springframework/http/MediaTypeFactory.java, +		return Optional.ofNullable(resource), +				.map(Resource::getFilename), +				.flatMap(MediaTypeFactory::getMediaType);, +		return getMediaTypes(filename).stream().findFirst();, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, +	 * "path extension" strategy and its, +	 * {@link PathExtensionContentNegotiationStrategy#setUseRegisteredExtensionsOnly(boolean), +	 * useRegisteredExtensionsOnly} property is set to "false", the list of extensions may, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, +	private Boolean useRegisteredExtensionsOnly;, +, +	 * @deprecated as of 5.0, in favor of {@link #setUseRegisteredExtensionsOnly(boolean)}, which, +	 * has reverse behavior., +		setUseRegisteredExtensionsOnly(!useJaf);, +	}, +, +	/**, +	 * When {@link #setFavorPathExtension favorPathExtension} is set, this, +	 * property determines whether to use only registered {@code MediaType} mappings, +	 * to resolve a path extension to a specific MediaType., +	 * <p>By default this is not set in which case, +	 * {@code PathExtensionContentNegotiationStrategy} will use defaults if available., +	 */, +	public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {, +		this.useRegisteredExtensionsOnly = useRegisteredExtensionsOnly;, +	}, +, +	private boolean useRegisteredExtensionsOnly() {, +		return (this.useRegisteredExtensionsOnly != null && this.useRegisteredExtensionsOnly);, +			if (this.servletContext != null && !useRegisteredExtensionsOnly()) {, +			if (this.useRegisteredExtensionsOnly != null) {, +				strategy.setUseRegisteredExtensionsOnly(this.useRegisteredExtensionsOnly);, +			}, +++ b/spring-web/src/main/java/org/springframework/http/MediaTypeFactory.java, +		return Optional.ofNullable(resource), +				.map(Resource::getFilename), +				.flatMap(MediaTypeFactory::getMediaType);, +		return getMediaTypes(filename).stream().findFirst();, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, +	 * "path extension" strategy and its, +	 * {@link PathExtensionContentNegotiationStrategy#setUseRegisteredExtensionsOnly(boolean), +	 * useRegisteredExtensionsOnly} property is set to "false", the list of extensions may, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, +	private Boolean useRegisteredExtensionsOnly;, +, +	 * @deprecated as of 5.0, in favor of {@link #setUseRegisteredExtensionsOnly(boolean)}, which, +	 * has reverse behavior., +		setUseRegisteredExtensionsOnly(!useJaf);, +	}, +, +	/**, +	 * When {@link #setFavorPathExtension favorPathExtension} is set, this, +	 * property determines whether to use only registered {@code MediaType} mappings, +	 * to resolve a path extension to a specific MediaType., +	 * <p>By default this is not set in which case, +	 * {@code PathExtensionContentNegotiationStrategy} will use defaults if available., +	 */, +	public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {, +		this.useRegisteredExtensionsOnly = useRegisteredExtensionsOnly;, +	}, +, +	private boolean useRegisteredExtensionsOnly() {, +		return (this.useRegisteredExtensionsOnly != null && this.useRegisteredExtensionsOnly);, +			if (this.servletContext != null && !useRegisteredExtensionsOnly()) {, +			if (this.useRegisteredExtensionsOnly != null) {, +				strategy.setUseRegisteredExtensionsOnly(this.useRegisteredExtensionsOnly);, +			}, +++ b/spring-web/src/main/java/org/springframework/web/accept/PathExtensionContentNegotiationStrategy.java, +	private boolean useRegisteredExtensionsOnly = false;, +, +	 * @deprecated as of 5.0, in favor of {@link #setUseRegisteredExtensionsOnly(boolean)}., +		setUseRegisteredExtensionsOnly(!useJaf);, +	}, +, +	/**, +	 * Whether to only use the registered mappings to look up file extensions, or also refer to, +	 * defaults., +	 * <p>By default this is set to {@code false}, meaning that defaults are used., +	 */, +	public void setUseRegisteredExtensionsOnly(boolean useRegisteredExtensionsOnly) {, +		this.useRegisteredExtensionsOnly = useRegisteredExtensionsOnly;, +		if (!this.useRegisteredExtensionsOnly) {, +		}, +++ b/spring-web/src/main/java/org/springframework/http/MediaTypeFactory.java, +		return Optional.ofNullable(resource)]