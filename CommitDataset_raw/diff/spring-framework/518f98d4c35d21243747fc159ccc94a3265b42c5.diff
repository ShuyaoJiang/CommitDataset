[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, + * Type metadata about a bindable value., +	/**, +	 * Creates a new descriptor for the given type., +	 * Use this constructor when a bound value comes from a source such as a Map or collection, where no additional binding metadata is available., +	 * @param type the actual type, +	 */, +	 * Use this constructor when a bound value originates from a method parameter, such as a setter method argument., +	 * Create a new descriptor for a field., +	 * Use this constructor when a bound value originates from a field., +	/**, +	 * If the actual type is a primitive, returns its wrapper type, else just returns {@link #getType()}., +	 * @return the wrapper type if the underlying type is a primitive, else the actual type as-is, +	 */, +	/**, +	 * Returns the name of this type; the fully qualified classname., +	 */, +	/**, +	 * Is this type an array type?, +	 */, +	/**, +	 * Is this type a {@link Collection} type?, +	 */, +	public boolean isCollection() {, +		return Collection.class.isAssignableFrom(getType());, +	 * If this type is an array type or {@link Collection} type, returns the underlying element type., +	 * Returns null if the type is neither an array or collection., +	public Class<?> getElementType() {, +		if (isArray()) {, +			return getArrayComponentType();, +		} else if (isCollection()) {, +			return getCollectionElementType();, +			return null;, +	/**, +	 * Returns true if this type is an abstract class., +	 */, +	/**, +	 * Is the obj an instance of this type?, +	 */, +	public boolean isInstance(Object obj) {, +		return getType().isInstance(obj);, +	}, +, +	/**, +	 * Returns true if an object this type can be assigned to a rereference of given targetType., +	 * @param targetType the target type, +	 * @return true if this type is assignable to the target, +	 */, +	public boolean isAssignableTo(TypeDescriptor targetType) {, +		return targetType.getType().isAssignableFrom(getType());, +	}, +	, +, +	/**, +	 * Creates a new type descriptor for the given class., +	 * @param type the class, +	 * @return the type descriptor, +	 */, +	public static TypeDescriptor valueOf(Class<? extends Object> type) {, +		return new TypeDescriptor(type);, +	}, +, +	// internal helpers, +	, +	private Class<?> getArrayComponentType() {, +		return getType().getComponentType();, +	}, +	, +	private Class<?> getCollectionElementType() {, +		if (type != null) {, +			return GenericCollectionTypeResolver.getCollectionType((Class<? extends Collection>) type);, +		} else if (field != null) {, +			return GenericCollectionTypeResolver.getCollectionFieldType(field);, +		} else {, +			return  GenericCollectionTypeResolver.getCollectionParameterType(methodParameter);, +		}, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, + * Type metadata about a bindable value., +	/**, +	 * Creates a new descriptor for the given type., +	 * Use this constructor when a bound value comes from a source such as a Map or collection, where no additional binding metadata is available., +	 * @param type the actual type, +	 */, +	 * Use this constructor when a bound value originates from a method parameter, such as a setter method argument., +	 * Create a new descriptor for a field., +	 * Use this constructor when a bound value originates from a field., +	/**, +	 * If the actual type is a primitive, returns its wrapper type, else just returns {@link #getType()}., +	 * @return the wrapper type if the underlying type is a primitive, else the actual type as-is, +	 */, +	/**, +	 * Returns the name of this type; the fully qualified classname., +	 */, +	/**, +	 * Is this type an array type?, +	 */, +	/**, +	 * Is this type a {@link Collection} type?]