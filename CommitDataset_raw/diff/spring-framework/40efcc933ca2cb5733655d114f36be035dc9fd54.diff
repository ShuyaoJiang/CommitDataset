[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +			targetInterceptor = (isStatic ?, +					new DynamicUnadvisedExposedInterceptor(this.advised.getTargetSource()));, +			targetInterceptor = (isStatic ?, +					new DynamicUnadvisedInterceptor(this.advised.getTargetSource()));, +		Callback targetDispatcher = (isStatic ?, +				new StaticDispatcher(this.advised.getTargetSource().getTarget()) : new SerializableNoOp());, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +			targetInterceptor = (isStatic ?, +					new DynamicUnadvisedExposedInterceptor(this.advised.getTargetSource()));, +			targetInterceptor = (isStatic ?, +					new DynamicUnadvisedInterceptor(this.advised.getTargetSource()));, +		Callback targetDispatcher = (isStatic ?, +				new StaticDispatcher(this.advised.getTargetSource().getTarget()) : new SerializableNoOp());, +++ b/spring-aop/src/main/java/org/springframework/aop/support/ControlFlowPointcut.java, + * Copyright 2002-2018 the original author or authors., +		return (this.clazz.equals(that.clazz)) && ObjectUtils.nullSafeEquals(this.methodName, that.methodName);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +			targetInterceptor = (isStatic ?, +					new DynamicUnadvisedExposedInterceptor(this.advised.getTargetSource()));, +			targetInterceptor = (isStatic ?, +					new DynamicUnadvisedInterceptor(this.advised.getTargetSource()));, +		Callback targetDispatcher = (isStatic ?, +				new StaticDispatcher(this.advised.getTargetSource().getTarget()) : new SerializableNoOp());, +++ b/spring-aop/src/main/java/org/springframework/aop/support/ControlFlowPointcut.java, + * Copyright 2002-2018 the original author or authors., +		return (this.clazz.equals(that.clazz)) && ObjectUtils.nullSafeEquals(this.methodName, that.methodName);, +++ b/spring-aop/src/main/java/org/springframework/aop/support/MethodMatchers.java, +		public boolean equals(Object other) {, +			if (this == other) {, +			if (!(other instanceof UnionMethodMatcher)) {, +			UnionMethodMatcher that = (UnionMethodMatcher) other;, +			return (MethodMatchers.matches(this.mm1, method, targetClass, hasIntroductions) &&, +					MethodMatchers.matches(this.mm2, method, targetClass, hasIntroductions));, +			return (this.mm1.matches(method, targetClass) && this.mm2.matches(method, targetClass));, +			return (this.mm1.isRuntime() || this.mm2.isRuntime());, +			boolean aMatches = (this.mm1.isRuntime() ?, +					this.mm1.matches(method, targetClass, args) : this.mm1.matches(method, targetClass));, +			boolean bMatches = (this.mm2.isRuntime() ?, +					this.mm2.matches(method, targetClass, args) : this.mm2.matches(method, targetClass));, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +			targetInterceptor = (isStatic ?, +					new DynamicUnadvisedExposedInterceptor(this.advised.getTargetSource()));, +			targetInterceptor = (isStatic ?, +					new DynamicUnadvisedInterceptor(this.advised.getTargetSource()));, +		Callback targetDispatcher = (isStatic ?, +				new StaticDispatcher(this.advised.getTargetSource().getTarget()) : new SerializableNoOp());, +++ b/spring-aop/src/main/java/org/springframework/aop/support/ControlFlowPointcut.java, + * Copyright 2002-2018 the original author or authors., +		return (this.clazz.equals(that.clazz)) && ObjectUtils.nullSafeEquals(this.methodName, that.methodName);, +++ b/spring-aop/src/main/java/org/springframework/aop/support/MethodMatchers.java, +		public boolean equals(Object other) {, +			if (this == other) {, +			if (!(other instanceof UnionMethodMatcher)) {, +			UnionMethodMatcher that = (UnionMethodMatcher) other;, +			return (MethodMatchers.matches(this.mm1, method, targetClass, hasIntroductions) &&, +					MethodMatchers.matches(this.mm2, method, targetClass, hasIntroductions));, +			return (this.mm1.matches(method, targetClass) && this.mm2.matches(method, targetClass));, +			return (this.mm1.isRuntime() || this.mm2.isRuntime());, +			boolean aMatches = (this.mm1.isRuntime() ?, +					this.mm1.matches(method, targetClass, args) : this.mm1.matches(method, targetClass));, +			boolean bMatches = (this.mm2.isRuntime() ?, +					this.mm2.matches(method, targetClass, args) : this.mm2.matches(method, targetClass));, +++ b/spring-beans/src/main/java/org/springframework/beans/MutablePropertyValues.java, +		return (this == other || (other instanceof MutablePropertyValues &&, +				this.propertyValueList.equals(((MutablePropertyValues) other).propertyValueList)));, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +			targetInterceptor = (isStatic ?, +					new DynamicUnadvisedExposedInterceptor(this.advised.getTargetSource()));, +			targetInterceptor = (isStatic ?, +					new DynamicUnadvisedInterceptor(this.advised.getTargetSource()));, +		Callback targetDispatcher = (isStatic ?, +				new StaticDispatcher(this.advised.getTargetSource().getTarget()) : new SerializableNoOp());, +++ b/spring-aop/src/main/java/org/springframework/aop/support/ControlFlowPointcut.java, + * Copyright 2002-2018 the original author or authors., +		return (this.clazz.equals(that.clazz)) && ObjectUtils.nullSafeEquals(this.methodName, that.methodName);, +++ b/spring-aop/src/main/java/org/springframework/aop/support/MethodMatchers.java, +		public boolean equals(Object other) {, +			if (this == other) {, +			if (!(other instanceof UnionMethodMatcher)) {, +			UnionMethodMatcher that = (UnionMethodMatcher) other;, +			return (MethodMatchers.matches(this.mm1, method, targetClass, hasIntroductions) &&, +					MethodMatchers.matches(this.mm2, method, targetClass, hasIntroductions));, +			return (this.mm1.matches(method, targetClass) && this.mm2.matches(method, targetClass));, +			return (this.mm1.isRuntime() || this.mm2.isRuntime());, +			boolean aMatches = (this.mm1.isRuntime() ?, +					this.mm1.matches(method, targetClass, args) : this.mm1.matches(method, targetClass));, +			boolean bMatches = (this.mm2.isRuntime() ?, +					this.mm2.matches(method, targetClass, args) : this.mm2.matches(method, targetClass));, +++ b/spring-beans/src/main/java/org/springframework/beans/MutablePropertyValues.java, +		return (this == other || (other instanceof MutablePropertyValues &&, +				this.propertyValueList.equals(((MutablePropertyValues) other).propertyValueList)));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/CannotLoadBeanClassException.java, +	public CannotLoadBeanClassException(@Nullable String resourceDescription, String beanName,, +			@Nullable String beanClassName, ClassNotFoundException cause) {, +	public CannotLoadBeanClassException(@Nullable String resourceDescription, String beanName,, +			@Nullable String beanClassName, LinkageError cause) {, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +			targetInterceptor = (isStatic ?, +					new DynamicUnadvisedExposedInterceptor(this.advised.getTargetSource()));]