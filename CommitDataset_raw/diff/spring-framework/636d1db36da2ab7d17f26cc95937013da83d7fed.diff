[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +		AnnotationMetadata metadata = null;, +			if (className != null) {, +		}, +		if (metadata != null) {, +		return false;, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +		AnnotationMetadata metadata = null;, +			if (className != null) {, +		}, +		if (metadata != null) {, +		return false;, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, +import test.beans.TestBean;, +import org.springframework.beans.factory.support.ChildBeanDefinition;, +		Foo foo = beanFactory.getBean("foo", Foo.class);, +		Bar bar = beanFactory.getBean("bar", Bar.class);, +	/**, +	 * Tests whether a bean definition without a specified bean class is handled, +	 * correctly., +	 */, +	@Test, +	public void testPostProcessorIntrospectsInheritedDefinitionsCorrectly() {, +		DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();, +		beanFactory.registerBeanDefinition("config", new RootBeanDefinition(SingletonBeanConfig.class));, +		beanFactory.registerBeanDefinition("parent", new RootBeanDefinition(TestBean.class));, +		beanFactory.registerBeanDefinition("child", new ChildBeanDefinition("parent"));, +		ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor();, +		pp.postProcessBeanFactory(beanFactory);, +		Foo foo = beanFactory.getBean("foo", Foo.class);, +		Bar bar = beanFactory.getBean("bar", Bar.class);, +		assertSame(foo, bar.foo);, +	}, +]