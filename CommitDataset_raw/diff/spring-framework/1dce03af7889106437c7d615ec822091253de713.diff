[+++ b/org.springframework.context/src/main/java/org/springframework/context/support/MessageSourceSupport.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.util.ObjectUtils;, +, +	private static final MessageFormat INVALID_MESSAGE_FORMAT = new MessageFormat("");, +, +	 * Render the given default message String. The default message is, +	 * passed in as specified by the caller and can be rendered into, +	 * a fully formatted default message shown to the user., +	 * <p>The default implementation passes the String to <code>formatMessage</code>,, +	 * resolving any argument placeholders found in them. Subclasses may override, +	 * this method to plug in custom processing of default messages., +	 * @param defaultMessage the passed-in default message String, +	 * @param args array of arguments that will be filled in for params within, +	 * the message, or <code>null</code> if none., +	 * @param locale the Locale used for formatting, +	 * @return the rendered default message (with resolved arguments), +	 * @see #formatMessage(String, Object[], java.util.Locale), +	 */, +	protected String renderDefaultMessage(String defaultMessage, Object[] args, Locale locale) {, +		return formatMessage(defaultMessage, args, locale);, +	}, +, +	/**, +	 * the message, or <code>null</code> if none, +		if (msg == null || (!this.alwaysUseMessageFormat && ObjectUtils.isEmpty(args))) {, +				try {, +				}, +				catch (IllegalArgumentException ex) {, +					// invalid message format - probably not intended for formatting,, +					// rather using a message structure with no arguments involved, +					if (this.alwaysUseMessageFormat) {, +						throw ex;, +					}, +					// silently proceed with raw message if format not enforced, +					messageFormat = INVALID_MESSAGE_FORMAT;, +				}, +		if (messageFormat == INVALID_MESSAGE_FORMAT) {, +			return msg;, +		}]