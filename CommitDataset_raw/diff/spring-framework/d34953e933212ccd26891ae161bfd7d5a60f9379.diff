[+++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/Isolation.java, + * Copyright 2002-2009 the original author or authors., + * Enumeration that represents transaction isolation levels for use, + * with the {@link Transactional} annotation, corresponding to the, + * {@link TransactionDefinition} interface., +	public int value() { return this.value; }, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/Isolation.java, + * Copyright 2002-2009 the original author or authors., + * Enumeration that represents transaction isolation levels for use, + * with the {@link Transactional} annotation, corresponding to the, + * {@link TransactionDefinition} interface., +	public int value() { return this.value; }, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/Propagation.java, + * Copyright 2002-2009 the original author or authors., + * Enumeration that represents transaction propagation behaviors for use, + * with the {@link Transactional} annotation, corresponding to the, + * {@link TransactionDefinition} interface., +	 * as it defines a transaction scope that synchronization will apply for., +	public int value() { return this.value; }, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/Isolation.java, + * Copyright 2002-2009 the original author or authors., + * Enumeration that represents transaction isolation levels for use, + * with the {@link Transactional} annotation, corresponding to the, + * {@link TransactionDefinition} interface., +	public int value() { return this.value; }, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/annotation/Propagation.java, + * Copyright 2002-2009 the original author or authors., + * Enumeration that represents transaction propagation behaviors for use, + * with the {@link Transactional} annotation, corresponding to the, + * {@link TransactionDefinition} interface., +	 * as it defines a transaction scope that synchronization will apply for., +	public int value() { return this.value; }, +++ b/org.springframework.transaction/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java, + * Copyright 2002-2009 the original author or authors., + * {@link org.springframework.transaction.jta.JtaTransactionManager}., +			List<TransactionSynchronization> suspendedSynchronizations = doSuspendSynchronization();, +			List<TransactionSynchronization> suspendedSynchronizations = resourcesHolder.suspendedSynchronizations;, +			List<TransactionSynchronization> synchronizations = TransactionSynchronizationManager.getSynchronizations();, +	protected final void invokeAfterCompletion(List<TransactionSynchronization> synchronizations, int completionStatus) {, +	protected void registerAfterCompletionWithExistingTransaction(, +			Object transaction, List<TransactionSynchronization> synchronizations) throws TransactionException {, +		private List<TransactionSynchronization> suspendedSynchronizations;, +				Object suspendedResources, List<TransactionSynchronization> suspendedSynchronizations,]