[+++ b/org.springframework.core/src/main/java/org/springframework/util/xml/StaxEventContentHandler.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.util.xml;, +, +import java.util.ArrayList;, +import java.util.Iterator;, +import java.util.List;, +import javax.xml.XMLConstants;, +import javax.xml.namespace.QName;, +import javax.xml.stream.Location;, +import javax.xml.stream.XMLEventFactory;, +import javax.xml.stream.XMLStreamException;, +import javax.xml.stream.events.Attribute;, +import javax.xml.stream.events.Namespace;, +import javax.xml.stream.events.XMLEvent;, +import javax.xml.stream.util.XMLEventConsumer;, +, +import org.xml.sax.Attributes;, +import org.xml.sax.Locator;, +, +import org.springframework.util.StringUtils;, +, +/**, + * SAX <code>ContentHandler</code> that transforms callback calls to <code>XMLEvent</code>s and writes them to a, + * <code>XMLEventConsumer</code>., + *, + * @author Arjen Poutsma, + * @see XMLEvent, + * @see XMLEventConsumer, + * @since 3.0, + */, +class StaxEventContentHandler extends AbstractStaxContentHandler {, +, +	private final XMLEventFactory eventFactory;, +, +	private final XMLEventConsumer eventConsumer;, +, +	private Locator locator;, +, +	/**, +	 * Constructs a new instance of the <code>StaxEventContentHandler</code> that writes to the given, +	 * <code>XMLEventConsumer</code>. A default <code>XMLEventFactory</code> will be created., +	 *, +	 * @param consumer the consumer to write events to, +	 */, +	StaxEventContentHandler(XMLEventConsumer consumer) {, +		eventFactory = XMLEventFactory.newInstance();, +		eventConsumer = consumer;, +	}, +, +	/**, +	 * Constructs a new instance of the <code>StaxEventContentHandler</code> that uses the given event factory to create, +	 * events and writes to the given <code>XMLEventConsumer</code>., +	 *, +	 * @param consumer the consumer to write events to, +	 * @param factory  the factory used to create events, +	 */, +	StaxEventContentHandler(XMLEventConsumer consumer, XMLEventFactory factory) {, +		eventFactory = factory;, +		eventConsumer = consumer;, +	}, +, +	public void setDocumentLocator(Locator locator) {, +		this.locator = locator;, +	}, +, +	@Override, +	protected void startDocumentInternal() throws XMLStreamException {, +		consumeEvent(eventFactory.createStartDocument());, +	}, +, +	@Override, +	protected void endDocumentInternal() throws XMLStreamException {, +		consumeEvent(eventFactory.createEndDocument());, +	}, +, +	@Override, +	protected void startElementInternal(QName name, Attributes atts, SimpleNamespaceContext namespaceContext), +			throws XMLStreamException {, +		List attributes = getAttributes(atts);, +		List namespaces = createNamespaces(namespaceContext);, +		consumeEvent(eventFactory.createStartElement(name, attributes.iterator(), namespaces.iterator()));, +	}, +, +	@Override]