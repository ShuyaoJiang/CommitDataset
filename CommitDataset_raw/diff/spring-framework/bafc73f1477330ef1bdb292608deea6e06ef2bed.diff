[+++ b/build.gradle, +		testCompile("joda-time:joda-time:2.2"), +++ b/build.gradle, +		testCompile("joda-time:joda-time:2.2"), +++ /dev/null, +++ b/build.gradle, +		testCompile("joda-time:joda-time:2.2"), +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +		testCompile("joda-time:joda-time:2.2"), +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +		testCompile("joda-time:joda-time:2.2"), +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/build.gradle, +		testCompile("joda-time:joda-time:2.2"), +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolver.java, +import org.springframework.core.convert.ConversionService;, +import org.springframework.core.convert.TypeDescriptor;, +import org.springframework.web.method.support.UriComponentsContributor;, +import org.springframework.web.util.UriComponentsBuilder;, +public class RequestParamMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver, +		implements UriComponentsContributor {, +, +	private static final TypeDescriptor STRING_TYPE_DESCRIPTOR = TypeDescriptor.valueOf(String.class);, +, +	@Override, +	public void contributeMethodArgument(MethodParameter parameter, Object value,, +			UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) {, +, +		Class<?> paramType = parameter.getParameterType();, +		if (Map.class.isAssignableFrom(paramType) || MultipartFile.class.equals(paramType) ||, +				"javax.servlet.http.Part".equals(paramType.getName())) {, +			return;, +		}, +, +		RequestParam annot = parameter.getParameterAnnotation(RequestParam.class);, +		String name = StringUtils.isEmpty(annot.value()) ? parameter.getParameterName() : annot.value();, +, +		if (value == null) {, +			builder.queryParam(name);, +		}, +		else if (value instanceof Collection) {, +			for (Object v : (Collection) value) {, +				v = formatUriValue(conversionService, TypeDescriptor.nested(parameter, 1), v);, +				builder.queryParam(name, v);, +			}, +		}, +		else {, +			builder.queryParam(name, formatUriValue(conversionService, new TypeDescriptor(parameter), value));, +		}, +	}, +, +	protected String formatUriValue(ConversionService cs, TypeDescriptor sourceType, Object value) {, +		return (cs != null) ?, +			(String) cs.convert(value, sourceType, STRING_TYPE_DESCRIPTOR) : null;, +	}, +, +, +, +++ b/build.gradle, +		testCompile("joda-time:joda-time:2.2"), +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ /dev/null, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/RequestParamMethodArgumentResolver.java, +import org.springframework.core.convert.ConversionService;, +import org.springframework.core.convert.TypeDescriptor;, +import org.springframework.web.method.support.UriComponentsContributor;, +import org.springframework.web.util.UriComponentsBuilder;, +public class RequestParamMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver, +		implements UriComponentsContributor {, +, +	private static final TypeDescriptor STRING_TYPE_DESCRIPTOR = TypeDescriptor.valueOf(String.class);, +, +	@Override, +	public void contributeMethodArgument(MethodParameter parameter, Object value,, +			UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) {, +, +		Class<?> paramType = parameter.getParameterType();, +		if (Map.class.isAssignableFrom(paramType) || MultipartFile.class.equals(paramType) ||, +				"javax.servlet.http.Part".equals(paramType.getName())) {, +			return;, +		}, +, +		RequestParam annot = parameter.getParameterAnnotation(RequestParam.class);, +		String name = StringUtils.isEmpty(annot.value()) ? parameter.getParameterName() : annot.value();, +, +		if (value == null) {]