[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, + * Copyright 2002-2014 the original author or authors., +	 * Return the defaults to use for detected beans (never {@code null})., +	 * @since 4.1, +	 */, +	public BeanDefinitionDefaults getBeanDefinitionDefaults() {, +		return this.beanDefinitionDefaults;, +	}, +, +	/**, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, + * Copyright 2002-2014 the original author or authors., +	 * Return the defaults to use for detected beans (never {@code null})., +	 * @since 4.1, +	 */, +	public BeanDefinitionDefaults getBeanDefinitionDefaults() {, +		return this.beanDefinitionDefaults;, +	}, +, +	/**, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScan.java, + * Copyright 2002-2014 the original author or authors., +	/**, +	 * Specify whether scanned beans should be registered for lazy initialization., +	 * <p>Default is {@code false}; switch this to {@code true} when desired., +	 * @since 4.1, +	 */, +	boolean lazyInit() default false;, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, + * Copyright 2002-2014 the original author or authors., +	 * Return the defaults to use for detected beans (never {@code null})., +	 * @since 4.1, +	 */, +	public BeanDefinitionDefaults getBeanDefinitionDefaults() {, +		return this.beanDefinitionDefaults;, +	}, +, +	/**, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScan.java, + * Copyright 2002-2014 the original author or authors., +	/**, +	 * Specify whether scanned beans should be registered for lazy initialization., +	 * <p>Default is {@code false}; switch this to {@code true} when desired., +	 * @since 4.1, +	 */, +	boolean lazyInit() default false;, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, + * Copyright 2002-2014 the original author or authors., +		boolean lazyInit = componentScan.getBoolean("lazyInit");, +		if (lazyInit) {, +			scanner.getBeanDefinitionDefaults().setLazyInit(true);, +		}, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, + * Copyright 2002-2014 the original author or authors., +	 * Return the defaults to use for detected beans (never {@code null})., +	 * @since 4.1, +	 */, +	public BeanDefinitionDefaults getBeanDefinitionDefaults() {, +		return this.beanDefinitionDefaults;, +	}, +, +	/**, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScan.java, + * Copyright 2002-2014 the original author or authors., +	/**, +	 * Specify whether scanned beans should be registered for lazy initialization., +	 * <p>Default is {@code false}; switch this to {@code true} when desired., +	 * @since 4.1, +	 */, +	boolean lazyInit() default false;, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, + * Copyright 2002-2014 the original author or authors., +		boolean lazyInit = componentScan.getBoolean("lazyInit");, +		if (lazyInit) {, +			scanner.getBeanDefinitionDefaults().setLazyInit(true);, +		}, +, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ComponentScanAnnotationIntegrationTests.java, +import example.scannable.CustomComponent;, +import example.scannable.CustomStereotype;, +import example.scannable.DefaultNamedComponent;, +import example.scannable.FooService;, +import example.scannable.MessageBean;, +import example.scannable.ScopedProxyTestBean;, +import example.scannable_implicitbasepackage.ComponentScanAnnotatedConfigWithImplicitBasePackage;, +import example.scannable_scoped.CustomScopeAnnotationBean;, +import example.scannable_scoped.MyScope;, +, +		assertThat("@ComponentScan annotated @Configuration class registered directly against " +, +						"AnnotationConfigApplicationContext did not trigger component scanning as expected",, +		assertFalse(ctx.getDefaultListableBeanFactory().containsSingleton("kustomBean"));, +		KustomAnnotationAutowiredBean testBean = ctx.getBean("kustomBean", KustomAnnotationAutowiredBean.class);, +		excludeFilters=@Filter(type=FilterType.ASSIGNABLE_TYPE, value=ComponentScanWithCustomTypeFilter.class),, +		lazyInit = true), +++ b/spring-context/src/main/java/org/springframework/context/annotation/ClassPathBeanDefinitionScanner.java, + * Copyright 2002-2014 the original author or authors.]