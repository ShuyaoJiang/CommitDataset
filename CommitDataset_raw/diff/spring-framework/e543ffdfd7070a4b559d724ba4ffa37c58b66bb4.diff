[+++ b/spring-context/src/main/java/org/springframework/format/support/FormattingConversionService.java, + * Copyright 2002-2012 the original author or authors., +			return sourceType.hasAnnotation(annotationType);, +			return targetType.hasAnnotation(annotationType);, +++ b/spring-context/src/main/java/org/springframework/format/support/FormattingConversionService.java, + * Copyright 2002-2012 the original author or authors., +			return sourceType.hasAnnotation(annotationType);, +			return targetType.hasAnnotation(annotationType);, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * Determine if this type descriptor has the specified annotation., +	 * @param annotationType the annotation type, +	 * @return <tt>true</tt> if the annotation is present, +	 */, +	public boolean hasAnnotation(Class<? extends Annotation> annotationType) {, +		return getAnnotation(annotationType) != null;, +	}, +, +	/**, +	@SuppressWarnings("unchecked"), +	public <T extends Annotation> T getAnnotation(Class<T> annotationType) {, +				return (T) annotation;, +++ b/spring-context/src/main/java/org/springframework/format/support/FormattingConversionService.java, + * Copyright 2002-2012 the original author or authors., +			return sourceType.hasAnnotation(annotationType);, +			return targetType.hasAnnotation(annotationType);, +++ b/spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	 * Determine if this type descriptor has the specified annotation., +	 * @param annotationType the annotation type, +	 * @return <tt>true</tt> if the annotation is present, +	 */, +	public boolean hasAnnotation(Class<? extends Annotation> annotationType) {, +		return getAnnotation(annotationType) != null;, +	}, +, +	/**, +	@SuppressWarnings("unchecked"), +	public <T extends Annotation> T getAnnotation(Class<T> annotationType) {, +				return (T) annotation;, +++ b/spring-core/src/test/java/org/springframework/core/convert/TypeDescriptorTests.java, + * Copyright 2002-2012 the original author or authors., +		assertTrue(t1.hasAnnotation(ParameterAnnotation.class));, +		assertEquals(123, t1.getAnnotation(ParameterAnnotation.class).value());, +		int value();, +	public void testAnnotatedMethod(@ParameterAnnotation(123) String parameter) {, +		assertTrue(desc.hasAnnotation(MethodAnnotation1.class));]