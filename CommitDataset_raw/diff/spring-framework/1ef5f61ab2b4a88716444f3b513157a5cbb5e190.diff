[+++ b/spring-context-indexer/src/main/java/org/springframework/context/index/PropertiesMarshaller.java, +		props.forEach((type, value) -> {, +			Set<String> candidates = new HashSet<>(Arrays.asList(((String) value).split(",")));, +			result.add(new ItemMetadata((String) type, candidates));, +		});, +++ b/spring-context-indexer/src/main/java/org/springframework/context/index/PropertiesMarshaller.java, +		props.forEach((type, value) -> {, +			Set<String> candidates = new HashSet<>(Arrays.asList(((String) value).split(",")));, +			result.add(new ItemMetadata((String) type, candidates));, +		});, +++ b/spring-context-support/src/main/java/org/springframework/cache/caffeine/CaffeineCacheManager.java, +		this.cacheMap.forEach((key, value) -> createCaffeineCache(key));, +++ b/spring-context-indexer/src/main/java/org/springframework/context/index/PropertiesMarshaller.java, +		props.forEach((type, value) -> {, +			Set<String> candidates = new HashSet<>(Arrays.asList(((String) value).split(",")));, +			result.add(new ItemMetadata((String) type, candidates));, +		});, +++ b/spring-context-support/src/main/java/org/springframework/cache/caffeine/CaffeineCacheManager.java, +		this.cacheMap.forEach((key, value) -> createCaffeineCache(key));, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/MapSqlParameterSource.java, +			values.forEach((key, value) -> {, +				this.values.put(key, value);, +				if (value instanceof SqlParameterValue) {, +					registerSqlType(key, ((SqlParameterValue) value).getSqlType());, +			});, +++ b/spring-context-indexer/src/main/java/org/springframework/context/index/PropertiesMarshaller.java, +		props.forEach((type, value) -> {, +			Set<String> candidates = new HashSet<>(Arrays.asList(((String) value).split(",")));, +			result.add(new ItemMetadata((String) type, candidates));, +		});, +++ b/spring-context-support/src/main/java/org/springframework/cache/caffeine/CaffeineCacheManager.java, +		this.cacheMap.forEach((key, value) -> createCaffeineCache(key));, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/MapSqlParameterSource.java, +			values.forEach((key, value) -> {, +				this.values.put(key, value);, +				if (value instanceof SqlParameterValue) {, +					registerSqlType(key, ((SqlParameterValue) value).getSqlType());, +			});, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/lookup/AbstractRoutingDataSource.java, +		this.targetDataSources.forEach((key, value) -> {, +			Object lookupKey = resolveSpecifiedLookupKey(key);, +			DataSource dataSource = resolveSpecifiedDataSource(value);, +		});, +++ b/spring-context-indexer/src/main/java/org/springframework/context/index/PropertiesMarshaller.java, +		props.forEach((type, value) -> {, +			Set<String> candidates = new HashSet<>(Arrays.asList(((String) value).split(",")));, +			result.add(new ItemMetadata((String) type, candidates));, +		});, +++ b/spring-context-support/src/main/java/org/springframework/cache/caffeine/CaffeineCacheManager.java, +		this.cacheMap.forEach((key, value) -> createCaffeineCache(key));, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/MapSqlParameterSource.java, +			values.forEach((key, value) -> {, +				this.values.put(key, value);, +				if (value instanceof SqlParameterValue) {, +					registerSqlType(key, ((SqlParameterValue) value).getSqlType());, +			});, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/lookup/AbstractRoutingDataSource.java, +		this.targetDataSources.forEach((key, value) -> {, +			Object lookupKey = resolveSpecifiedLookupKey(key);, +			DataSource dataSource = resolveSpecifiedDataSource(value);, +		});, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java, +				annotatedMethods.forEach((method, listeners) ->, +						listeners.forEach(listener -> processJmsListener(listener, method, bean)));, +++ b/spring-context-indexer/src/main/java/org/springframework/context/index/PropertiesMarshaller.java, +		props.forEach((type, value) -> {, +			Set<String> candidates = new HashSet<>(Arrays.asList(((String) value).split(",")));, +			result.add(new ItemMetadata((String) type, candidates));, +		});, +++ b/spring-context-support/src/main/java/org/springframework/cache/caffeine/CaffeineCacheManager.java, +		this.cacheMap.forEach((key, value) -> createCaffeineCache(key));, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/MapSqlParameterSource.java, +			values.forEach((key, value) -> {, +				this.values.put(key, value);, +				if (value instanceof SqlParameterValue) {, +					registerSqlType(key, ((SqlParameterValue) value).getSqlType());, +			});, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/lookup/AbstractRoutingDataSource.java, +		this.targetDataSources.forEach((key, value) -> {, +			Object lookupKey = resolveSpecifiedLookupKey(key);, +			DataSource dataSource = resolveSpecifiedDataSource(value);, +		});, +++ b/spring-jms/src/main/java/org/springframework/jms/annotation/JmsListenerAnnotationBeanPostProcessor.java, +				annotatedMethods.forEach((method, listeners) ->, +						listeners.forEach(listener -> processJmsListener(listener, method, bean)));, +++ b/spring-jms/src/main/java/org/springframework/jms/support/converter/MappingJackson2MessageConverter.java, +		typeIdMappings.forEach((id, clazz) -> {, +		});, +++ b/spring-context-indexer/src/main/java/org/springframework/context/index/PropertiesMarshaller.java, +		props.forEach((type, value) -> {, +			Set<String> candidates = new HashSet<>(Arrays.asList(((String) value).split(",")));, +			result.add(new ItemMetadata((String) type, candidates));, +		});, +++ b/spring-context-support/src/main/java/org/springframework/cache/caffeine/CaffeineCacheManager.java, +		this.cacheMap.forEach((key, value) -> createCaffeineCache(key));, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/MapSqlParameterSource.java, +			values.forEach((key, value) -> {, +				this.values.put(key, value);, +				if (value instanceof SqlParameterValue) {, +					registerSqlType(key, ((SqlParameterValue) value).getSqlType());]