[+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/WebClientIntegrationTests.java, +import java.util.function.Consumer;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertThat;, +import static org.junit.Assert.assertTrue;, +		this.webClient = WebClient.create(this.server.url("/").toString());, +	public void shouldReceiveResponseHeaders() throws Exception {, +		prepareResponse(response -> response, +				.setHeader("Content-Type", "text/plain"), +				.setBody("Hello Spring!"));, +				.expectComplete().verify(Duration.ofSeconds(3));, +		expectRequestCount(1);, +		expectRequest(request -> {, +			assertEquals("*/*", request.getHeader(HttpHeaders.ACCEPT));, +			assertEquals("/greeting?name=Spring", request.getPath());, +		});, +	public void shouldReceivePlainText() throws Exception {, +		prepareResponse(response -> response.setBody("Hello Spring!"));, +				.expectComplete().verify(Duration.ofSeconds(3));, +		expectRequestCount(1);, +		expectRequest(request -> {, +			assertEquals("testvalue", request.getHeader("X-Test-Header"));, +			assertEquals("*/*", request.getHeader(HttpHeaders.ACCEPT));, +			assertEquals("/greeting?name=Spring", request.getPath());, +		});, +	public void shouldReceiveJsonAsString() throws Exception {, +		prepareResponse(response -> response, +				.setHeader("Content-Type", "application/json").setBody(content));, +				.uri("/json").accept(MediaType.APPLICATION_JSON), +				.expectComplete().verify(Duration.ofSeconds(3));, +		expectRequestCount(1);, +		expectRequest(request -> {, +			assertEquals("/json", request.getPath());, +			assertEquals("application/json", request.getHeader(HttpHeaders.ACCEPT));, +		});, +	public void shouldReceiveJsonAsTypeReferenceString() throws Exception {, +		prepareResponse(response -> response, +				.setHeader("Content-Type", "application/json").setBody(content));, +				.uri("/json").accept(MediaType.APPLICATION_JSON), +				.bodyToMono(new ParameterizedTypeReference<String>() {, +				});, +				.expectComplete().verify(Duration.ofSeconds(3));, +		expectRequestCount(1);, +		expectRequest(request -> {, +			assertEquals("/json", request.getPath());, +			assertEquals("application/json", request.getHeader(HttpHeaders.ACCEPT));, +		});, +	public void shouldReceiveJsonAsResponseEntityString() throws Exception {, +		prepareResponse(response -> response, +				.setHeader("Content-Type", "application/json").setBody(content));, +				.uri("/json").accept(MediaType.APPLICATION_JSON), +				.expectComplete().verify(Duration.ofSeconds(3));, +		expectRequestCount(1);, +		expectRequest(request -> {, +			assertEquals("/json", request.getPath());, +			assertEquals("application/json", request.getHeader(HttpHeaders.ACCEPT));, +		});, +	public void shouldReceiveJsonAsResponseEntityList() throws Exception {, +		prepareResponse(response -> response, +				.setHeader("Content-Type", "application/json").setBody(content));, +				.uri("/json").accept(MediaType.APPLICATION_JSON), +				.expectComplete().verify(Duration.ofSeconds(3));, +		expectRequestCount(1);, +		expectRequest(request -> {, +			assertEquals("/json", request.getPath());, +			assertEquals("application/json", request.getHeader(HttpHeaders.ACCEPT));, +		});, +	public void shouldReceiveJsonAsFluxString() throws Exception {, +		prepareResponse(response -> response, +				.setHeader("Content-Type", "application/json").setBody(content));, +				.uri("/json").accept(MediaType.APPLICATION_JSON), +				.expectComplete().verify(Duration.ofSeconds(3));, +		expectRequestCount(1);, +		expectRequest(request -> {, +			assertEquals("/json", request.getPath());, +			assertEquals("application/json", request.getHeader(HttpHeaders.ACCEPT));, +		});, +	public void shouldReceiveJsonAsPojo() throws Exception {, +		prepareResponse(response -> response, +				.setHeader("Content-Type", "application/json"), +		expectRequestCount(1);, +		expectRequest(request -> {, +			assertEquals("/pojo", request.getPath());, +			assertEquals("application/json", request.getHeader(HttpHeaders.ACCEPT));, +		});, +	public void shouldReceiveJsonAsFluxPojo() throws Exception {, +		prepareResponse(response -> response, +				.setHeader("Content-Type", "application/json"), +		expectRequestCount(1);, +		expectRequest(request -> {, +			assertEquals("/pojos", request.getPath());, +			assertEquals("application/json", request.getHeader(HttpHeaders.ACCEPT));, +		});, +	public void shouldSendPojoAsJson() throws Exception {, +		prepareResponse(response -> response.setHeader("Content-Type", "application/json"), +		expectRequestCount(1);, +		expectRequest(request -> {, +			assertEquals("/pojo/capitalize", request.getPath());, +			assertEquals("{\"foo\":\"foofoo\",\"bar\":\"barbar\"}", request.getBody().readUtf8());, +			assertEquals("chunked", request.getHeader(HttpHeaders.TRANSFER_ENCODING));]