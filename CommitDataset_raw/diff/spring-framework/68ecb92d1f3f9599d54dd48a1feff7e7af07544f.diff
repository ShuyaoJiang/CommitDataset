[+++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +	/**, +	 * Create an instance by parsing the "origin" header of an HTTP request., +	 */, +	public static UriComponentsBuilder fromOriginHeader(String origin) {, +		UriComponentsBuilder builder = UriComponentsBuilder.newInstance();, +		if (StringUtils.hasText(origin)) {, +			int schemaIdx = origin.indexOf("://");, +			String schema = (schemaIdx != -1 ? origin.substring(0, schemaIdx) : "http");, +			builder.scheme(schema);, +			String hostString = (schemaIdx != -1 ? origin.substring(schemaIdx + 3) : origin);, +			if (hostString.contains(":")) {, +				String[] hostAndPort = StringUtils.split(hostString, ":");, +				builder.host(hostAndPort[0]);, +				builder.port(Integer.parseInt(hostAndPort[1]));, +			}, +			else {, +				builder.host(hostString);, +			}, +		}, +		return builder;, +	}, +, +, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +	/**, +	 * Create an instance by parsing the "origin" header of an HTTP request., +	 */, +	public static UriComponentsBuilder fromOriginHeader(String origin) {, +		UriComponentsBuilder builder = UriComponentsBuilder.newInstance();, +		if (StringUtils.hasText(origin)) {, +			int schemaIdx = origin.indexOf("://");, +			String schema = (schemaIdx != -1 ? origin.substring(0, schemaIdx) : "http");, +			builder.scheme(schema);, +			String hostString = (schemaIdx != -1 ? origin.substring(schemaIdx + 3) : origin);, +			if (hostString.contains(":")) {, +				String[] hostAndPort = StringUtils.split(hostString, ":");, +				builder.host(hostAndPort[0]);, +				builder.port(Integer.parseInt(hostAndPort[1]));, +			}, +			else {, +				builder.host(hostString);, +			}, +		}, +		return builder;, +	}, +, +, +++ b/spring-web/src/main/java/org/springframework/web/util/WebUtils.java, +, +import org.springframework.util.CollectionUtils;, +		else if (CollectionUtils.isEmpty(allowedOrigins)) {, +			UriComponents actualUrl = UriComponentsBuilder.fromHttpRequest(request).build();, +			UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build();, +			return (actualUrl.getHost().equals(originUrl.getHost()) && getPort(actualUrl) == getPort(originUrl));, +			if ("http".equals(component.getScheme()) || "ws".equals(component.getScheme())) {, +			else if ("https".equals(component.getScheme()) || "wss".equals(component.getScheme())) {, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +	/**, +	 * Create an instance by parsing the "origin" header of an HTTP request., +	 */, +	public static UriComponentsBuilder fromOriginHeader(String origin) {, +		UriComponentsBuilder builder = UriComponentsBuilder.newInstance();, +		if (StringUtils.hasText(origin)) {, +			int schemaIdx = origin.indexOf("://");, +			String schema = (schemaIdx != -1 ? origin.substring(0, schemaIdx) : "http");, +			builder.scheme(schema);, +			String hostString = (schemaIdx != -1 ? origin.substring(schemaIdx + 3) : origin);, +			if (hostString.contains(":")) {, +				String[] hostAndPort = StringUtils.split(hostString, ":");, +				builder.host(hostAndPort[0]);, +				builder.port(Integer.parseInt(hostAndPort[1]));, +			}, +			else {, +				builder.host(hostString);, +			}, +		}, +		return builder;, +	}, +, +, +++ b/spring-web/src/main/java/org/springframework/web/util/WebUtils.java, +, +import org.springframework.util.CollectionUtils;, +		else if (CollectionUtils.isEmpty(allowedOrigins)) {, +			UriComponents actualUrl = UriComponentsBuilder.fromHttpRequest(request).build();, +			UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build();, +			return (actualUrl.getHost().equals(originUrl.getHost()) && getPort(actualUrl) == getPort(originUrl));, +			if ("http".equals(component.getScheme()) || "ws".equals(component.getScheme())) {, +			else if ("https".equals(component.getScheme()) || "wss".equals(component.getScheme())) {, +++ b/spring-web/src/test/java/org/springframework/web/util/WebUtilsTests.java, +import java.util.Collections;, +	public void isValidOriginSuccess() {, +, +		List<String> allowed = Collections.emptyList();, +		assertTrue(checkOrigin("mydomain1.com", -1, "http://mydomain1.com", allowed));, +		assertTrue(checkOrigin("mydomain1.com", -1, "http://mydomain1.com:80", allowed));, +		assertTrue(checkOrigin("mydomain1.com", 443, "https://mydomain1.com", allowed));, +		assertTrue(checkOrigin("mydomain1.com", 443, "https://mydomain1.com:443", allowed));, +		assertTrue(checkOrigin("mydomain1.com", 123, "http://mydomain1.com:123", allowed));]