[+++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriTemplate.java, +import java.io.Serializable;, + * Represents a URI template. A URI template is a URI-like String that contains variables enclosed, + * by braces (<code>{</code>, <code>}</code>), which can be expanded to produce an actual URI., + *, + * <p>See {@link #expand(Map)}, {@link #expand(Object[])}, and {@link #match(String)} for example usages., +public class UriTemplate implements Serializable {, +	 * Given the Map of variables, expands this template into a URI. The Map keys represent variable names,, +	 * the Map values variable values. The order of variables is not significant., +	 * <p>Example:, +	 * <pre class="code">, +	 * @throws IllegalArgumentException if <code>uriVariables</code> is <code>null</code>;, +	 * or if it does not contain values for all the variable names, +	 * The order of variables is significant., +	 * <p>Example:, +	 * <pre class="code">, +	 * UriTemplate template = new UriTemplate("http://example.com/hotels/{hotel}/bookings/{booking}");, +	 * System.out.println(template.expand("1", "42));, +	 * </pre>, +	 * will print: <blockquote><code>http://example.com/hotels/1/bookings/42</code></blockquote>, +	 * @throws IllegalArgumentException if <code>uriVariables</code> is <code>null</code>, +	 * or if it does not contain sufficient variables, +	 * Match the given URI to a map of variable values. Keys in the returned map are variable names,, +	 * values are variable values, as occurred in the given URI., +	 * <p>Example:, +	 * <pre class="code">, +	 * UriTemplate template = new UriTemplate("http://example.com/hotels/{hotel}/bookings/{booking}");, +	 * System.out.println(template.match("http://example.com/hotels/1/bookings/42"));, +	 * </pre>, +	 * will print: <blockquote><code>{hotel=1, booking=42}</code></blockquote>, +	@Override, +	public String toString() {, +		return this.uriTemplate;, +	}, +, +, +	 * Static inner class to parse URI template strings into a matching regular expression.]