[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/AbstractMediaTypeExpression.java, + * Copyright 2002-2012 the original author or authors., +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	protected final Log logger = LogFactory.getLog(getClass());, +, +		try {, +		catch (IllegalArgumentException ex) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("Could not parse media type header: " + ex.getMessage());, +			}, +			return false;, +		}, +	}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/AbstractMediaTypeExpression.java, + * Copyright 2002-2012 the original author or authors., +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	protected final Log logger = LogFactory.getLog(getClass());, +, +		try {, +		catch (IllegalArgumentException ex) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("Could not parse media type header: " + ex.getMessage());, +			}, +			return false;, +		}, +	}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, + * Copyright 2002-2012 the original author or authors., +		try {, +		catch (IllegalArgumentException ex) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("Could not parse Accept header: " + ex.getMessage());, +			}, +			return Collections.emptyList();, +		}, +	}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/AbstractMediaTypeExpression.java, + * Copyright 2002-2012 the original author or authors., +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	protected final Log logger = LogFactory.getLog(getClass());, +, +		try {, +		catch (IllegalArgumentException ex) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("Could not parse media type header: " + ex.getMessage());, +			}, +			return false;, +		}, +	}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, + * Copyright 2002-2012 the original author or authors., +		try {, +		catch (IllegalArgumentException ex) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("Could not parse Accept header: " + ex.getMessage());, +			}, +			return Collections.emptyList();, +		}, +	}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/condition/ConsumesRequestConditionTests.java, + * Copyright 2002-2012 the original author or authors., +	public void consumesParseError() {, +		ConsumesRequestCondition condition = new ConsumesRequestCondition("text/plain");, +, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		request.setContentType("01");, +, +		assertNull(condition.getMatchingCondition(request));, +	}, +, +	@Test, +	public void consumesParseErrorWithNegation() {, +		ConsumesRequestCondition condition = new ConsumesRequestCondition("!text/plain");, +, +		MockHttpServletRequest request = new MockHttpServletRequest();, +		request.setContentType("01");, +, +		assertNull(condition.getMatchingCondition(request));, +	}, +, +	@Test, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/AbstractMediaTypeExpression.java, + * Copyright 2002-2012 the original author or authors., +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +	protected final Log logger = LogFactory.getLog(getClass());, +, +		try {, +		catch (IllegalArgumentException ex) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("Could not parse media type header: " + ex.getMessage());, +			}, +			return false;, +		}, +	}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, + * Copyright 2002-2012 the original author or authors.]