[+++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, + * Copyright 2002-2016 the original author or authors., +		if (clazz.isArray()) {, +			return getQualifiedNameForArray(clazz);, +		}, +		else {, +			return clazz.getName();, +		}, +	}, +, +	/**, +	 * Build a nice qualified name for an array:, +	 * component type class name + "[]"., +	 * @param clazz the array class, +	 * @return a qualified name for the array class, +	 */, +	private static String getQualifiedNameForArray(Class<?> clazz) {, +		StringBuilder result = new StringBuilder();, +		while (clazz.isArray()) {, +			clazz = clazz.getComponentType();, +			result.append(ARRAY_SUFFIX);, +		}, +		result.insert(0, clazz.getName());, +		return result.toString();, +		else if (clazz.isArray()) {, +			return getQualifiedNameForArray(clazz);, +		}, +			return clazz.getName();, +				(typeName.equals(clazz.getName()) || typeName.equals(clazz.getSimpleName()) ||, +				(clazz.isArray() && typeName.equals(getQualifiedNameForArray(clazz)))));, +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, + * Copyright 2002-2016 the original author or authors., +		if (clazz.isArray()) {, +			return getQualifiedNameForArray(clazz);, +		}, +		else {, +			return clazz.getName();, +		}, +	}, +, +	/**, +	 * Build a nice qualified name for an array:, +	 * component type class name + "[]"., +	 * @param clazz the array class, +	 * @return a qualified name for the array class, +	 */, +	private static String getQualifiedNameForArray(Class<?> clazz) {, +		StringBuilder result = new StringBuilder();, +		while (clazz.isArray()) {, +			clazz = clazz.getComponentType();, +			result.append(ARRAY_SUFFIX);, +		}, +		result.insert(0, clazz.getName());, +		return result.toString();, +		else if (clazz.isArray()) {, +			return getQualifiedNameForArray(clazz);, +		}, +			return clazz.getName();, +				(typeName.equals(clazz.getName()) || typeName.equals(clazz.getSimpleName()) ||, +				(clazz.isArray() && typeName.equals(getQualifiedNameForArray(clazz)))));, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/FormatHelper.java, + * Copyright 2002-2014 the original author or authors., +		if (clazz.isArray()) {, +			StringBuilder sb = new StringBuilder();, +			int dims = 1;, +			Class<?> baseClass = clazz.getComponentType();, +			while (baseClass.isArray()) {, +				baseClass = baseClass.getComponentType();, +				dims++;, +			}, +			sb.append(baseClass.getName());, +			for (int i = 0; i < dims; i++) {, +				sb.append("[]");, +			}, +			return sb.toString();, +		}, +		else {, +			return clazz.getName();, +		}, +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, + * Copyright 2002-2016 the original author or authors., +		if (clazz.isArray()) {, +			return getQualifiedNameForArray(clazz);, +		}, +		else {, +			return clazz.getName();, +		}, +	}, +, +	/**, +	 * Build a nice qualified name for an array:, +	 * component type class name + "[]"., +	 * @param clazz the array class, +	 * @return a qualified name for the array class, +	 */, +	private static String getQualifiedNameForArray(Class<?> clazz) {, +		StringBuilder result = new StringBuilder();, +		while (clazz.isArray()) {, +			clazz = clazz.getComponentType();, +			result.append(ARRAY_SUFFIX);]