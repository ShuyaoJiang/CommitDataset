[+++ b/spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java, +import org.springframework.web.util.ContentCachingRequestWrapper;, + * Base class for {@code Filter}s that perform logging operations before and after a request, + * is processed., + * {@code afterRequest(HttpServletRequest, String)} methods to perform the actual logging, + * around the request., + * {@code afterRequest} methods. By default, only the URI of the request is logged. However,, + * setting the {@code includeQueryString} property to {@code true} will cause the query string, + * of the request to be included also. The payload (body) of the request can be logged via the, + * {@code includePayload} flag. Note that this will only log that which is read, which might, + * not be the entire payload., +	 * Set whether the query string should be included in the log message., +	 * <p>Should be configured using an {@code &lt;init-param&gt;} for parameter name, +	 * "includeQueryString" in the filter definition in {@code web.xml}., +	 * Return whether the query string should be included in the log message., +	 * Set whether the client address and session id should be included in the, +	 * log message., +	 * <p>Should be configured using an {@code &lt;init-param&gt;} for parameter name, +	 * "includeClientInfo" in the filter definition in {@code web.xml}., +	 * Return whether the client address and session id should be included in the, +	 * log message., +	 * Set whether the request payload (body) should be included in the log message., +	 * <p>Should be configured using an {@code &lt;init-param&gt;} for parameter name, +	 * "includePayload" in the filter definition in {@code web.xml}., +	 * Return whether the request payload (body) should be included in the log message., +		return this.includePayload;, +	 * Sets the maximum length of the payload body to be included in the log message., +	 * Default is 50 characters., +		return this.maxPayloadLength;, +	 * Set the value that should be prepended to the log message written, +	 * <i>before</i> a request is processed., +	 * Set the value that should be appended to the log message written, +	 * <i>before</i> a request is processed., +	 * Set the value that should be prepended to the log message written, +	 * <i>after</i> a request is processed., +	 * Set the value that should be appended to the log message written, +	 * <i>after</i> a request is processed., +		HttpServletRequest requestToUse = request;, +		if (isIncludePayload() && isFirstRequest && !(request instanceof ContentCachingRequestWrapper)) {, +			requestToUse = new ContentCachingRequestWrapper(request);, +			beforeRequest(requestToUse, getBeforeMessage(requestToUse));, +			filterChain.doFilter(requestToUse, response);, +			if (!isAsyncStarted(requestToUse)) {, +				afterRequest(requestToUse, getAfterMessage(requestToUse));, +		if (isIncludePayload() && request instanceof ContentCachingRequestWrapper) {, +			ContentCachingRequestWrapper wrapper = (ContentCachingRequestWrapper) request;, +++ b/spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java, +import org.springframework.web.util.ContentCachingRequestWrapper;, + * Base class for {@code Filter}s that perform logging operations before and after a request, + * is processed., + * {@code afterRequest(HttpServletRequest, String)} methods to perform the actual logging, + * around the request., + * {@code afterRequest} methods. By default, only the URI of the request is logged. However,, + * setting the {@code includeQueryString} property to {@code true} will cause the query string, + * of the request to be included also. The payload (body) of the request can be logged via the, + * {@code includePayload} flag. Note that this will only log that which is read, which might, + * not be the entire payload., +	 * Set whether the query string should be included in the log message., +	 * <p>Should be configured using an {@code &lt;init-param&gt;} for parameter name, +	 * "includeQueryString" in the filter definition in {@code web.xml}., +	 * Return whether the query string should be included in the log message., +	 * Set whether the client address and session id should be included in the, +	 * log message., +	 * <p>Should be configured using an {@code &lt;init-param&gt;} for parameter name, +	 * "includeClientInfo" in the filter definition in {@code web.xml}., +	 * Return whether the client address and session id should be included in the, +	 * log message., +	 * Set whether the request payload (body) should be included in the log message., +	 * <p>Should be configured using an {@code &lt;init-param&gt;} for parameter name, +	 * "includePayload" in the filter definition in {@code web.xml}., +	 * Return whether the request payload (body) should be included in the log message., +		return this.includePayload;, +	 * Sets the maximum length of the payload body to be included in the log message., +	 * Default is 50 characters., +		return this.maxPayloadLength;, +	 * Set the value that should be prepended to the log message written, +	 * <i>before</i> a request is processed., +	 * Set the value that should be appended to the log message written, +	 * <i>before</i> a request is processed., +	 * Set the value that should be prepended to the log message written, +	 * <i>after</i> a request is processed., +	 * Set the value that should be appended to the log message written, +	 * <i>after</i> a request is processed., +		HttpServletRequest requestToUse = request;, +		if (isIncludePayload() && isFirstRequest && !(request instanceof ContentCachingRequestWrapper)) {, +			requestToUse = new ContentCachingRequestWrapper(request);, +			beforeRequest(requestToUse, getBeforeMessage(requestToUse));, +			filterChain.doFilter(requestToUse, response);, +			if (!isAsyncStarted(requestToUse)) {, +				afterRequest(requestToUse, getAfterMessage(requestToUse));, +		if (isIncludePayload() && request instanceof ContentCachingRequestWrapper) {, +			ContentCachingRequestWrapper wrapper = (ContentCachingRequestWrapper) request;, +++ b/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java, +import org.springframework.web.util.ContentCachingResponseWrapper;, +		if (!isAsyncDispatch(request) && !(response instanceof ContentCachingResponseWrapper)) {, +			responseToUse = new ContentCachingResponseWrapper(response);, +		ContentCachingResponseWrapper responseWrapper =, +				WebUtils.getNativeResponse(response, ContentCachingResponseWrapper.class);, +		byte[] body = responseWrapper.getContentAsByteArray();, +++ b/spring-web/src/main/java/org/springframework/web/filter/AbstractRequestLoggingFilter.java]