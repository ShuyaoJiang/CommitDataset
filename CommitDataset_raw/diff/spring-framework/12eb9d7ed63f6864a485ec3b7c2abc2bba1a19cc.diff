[+++ b/org.springframework.test/src/main/java/org/springframework/test/context/MergedContextConfiguration.java, +	private static final String[] EMPTY_STRING_ARRAY = new String[0];, +	private static final Class<?>[] EMPTY_CLASS_ARRAY = new Class<?>[0];, +	 * Generate a null-safe {@link String} representation of the supplied {@link ContextLoader}., +	 */, +	private static String nullSafeToString(ContextLoader contextLoader) {, +		return contextLoader == null ? "null" : contextLoader.getClass().getName();, +	}, +, +	/**, +		String contextLoaderKey = nullSafeToString(contextLoader);, +		.append("contextLoader", nullSafeToString(contextLoader))//, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/MergedContextConfiguration.java, +	private static final String[] EMPTY_STRING_ARRAY = new String[0];, +	private static final Class<?>[] EMPTY_CLASS_ARRAY = new Class<?>[0];, +	 * Generate a null-safe {@link String} representation of the supplied {@link ContextLoader}., +	 */, +	private static String nullSafeToString(ContextLoader contextLoader) {, +		return contextLoader == null ? "null" : contextLoader.getClass().getName();, +	}, +, +	/**, +		String contextLoaderKey = nullSafeToString(contextLoader);, +		.append("contextLoader", nullSafeToString(contextLoader))//, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/AbstractContextLoader.java, +		return !ObjectUtils.isEmpty(mergedConfig.getLocations()) && ObjectUtils.isEmpty(mergedConfig.getClasses());, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/MergedContextConfiguration.java, +	private static final String[] EMPTY_STRING_ARRAY = new String[0];, +	private static final Class<?>[] EMPTY_CLASS_ARRAY = new Class<?>[0];, +	 * Generate a null-safe {@link String} representation of the supplied {@link ContextLoader}., +	 */, +	private static String nullSafeToString(ContextLoader contextLoader) {, +		return contextLoader == null ? "null" : contextLoader.getClass().getName();, +	}, +, +	/**, +		String contextLoaderKey = nullSafeToString(contextLoader);, +		.append("contextLoader", nullSafeToString(contextLoader))//, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/AbstractContextLoader.java, +		return !ObjectUtils.isEmpty(mergedConfig.getLocations()) && ObjectUtils.isEmpty(mergedConfig.getClasses());, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/DelegatingSmartContextLoader.java, +				if (logger.isDebugEnabled()) {, +					logger.debug(String.format("Delegating to %s to load context from [%s].",, +						loader.getClass().getName(), mergedConfig));, +				}, +		throw new IllegalStateException(String.format("None of the SmartContextLoader candidates %s ", +++ b/org.springframework.test/src/main/java/org/springframework/test/context/MergedContextConfiguration.java, +	private static final String[] EMPTY_STRING_ARRAY = new String[0];, +	private static final Class<?>[] EMPTY_CLASS_ARRAY = new Class<?>[0];, +	 * Generate a null-safe {@link String} representation of the supplied {@link ContextLoader}., +	 */, +	private static String nullSafeToString(ContextLoader contextLoader) {, +		return contextLoader == null ? "null" : contextLoader.getClass().getName();, +	}, +, +	/**, +		String contextLoaderKey = nullSafeToString(contextLoader);, +		.append("contextLoader", nullSafeToString(contextLoader))//, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/AbstractContextLoader.java, +		return !ObjectUtils.isEmpty(mergedConfig.getLocations()) && ObjectUtils.isEmpty(mergedConfig.getClasses());, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/DelegatingSmartContextLoader.java, +				if (logger.isDebugEnabled()) {, +					logger.debug(String.format("Delegating to %s to load context from [%s].",, +						loader.getClass().getName(), mergedConfig));, +				}, +		throw new IllegalStateException(String.format("None of the SmartContextLoader candidates %s ", +++ b/org.springframework.test/src/test/java/org/springframework/test/context/support/DelegatingSmartContextLoaderTests.java, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertTrue;, +, +import org.springframework.test.context.MergedContextConfiguration;, +	private static final Class<?>[] EMPTY_CLASS_ARRAY = new Class<?>[0];, +	private static final String[] EMPTY_STRING_ARRAY = new String[0];, +, +	private final DelegatingSmartContextLoader loader = new DelegatingSmartContextLoader();, +		assertTrue(loader.generatesDefaults());, +	public void doesNotSupportEmptyConfig() {, +		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(getClass(), EMPTY_STRING_ARRAY,, +			EMPTY_CLASS_ARRAY, EMPTY_STRING_ARRAY, loader);, +		assertFalse(loader.supports(mergedConfig));, +	}, +, +	@Test, +	public void doesNotSupportLocationsAndConfigurationClasses() {, +		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(getClass(),, +			new String[] { "foo.xml" }, new Class<?>[] { getClass() }, EMPTY_STRING_ARRAY, loader);, +		assertFalse(loader.supports(mergedConfig));, +	}, +, +	@Test, +	public void supportsLocations() {, +		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(getClass(),, +			new String[] { "foo.xml" }, EMPTY_CLASS_ARRAY, EMPTY_STRING_ARRAY, loader);, +		assertTrue(loader.supports(mergedConfig));, +	}, +, +	@Test, +	public void supportsConfigurationClasses() {, +		MergedContextConfiguration mergedConfig = new MergedContextConfiguration(getClass(), EMPTY_STRING_ARRAY,, +			new Class<?>[] { getClass() }, EMPTY_STRING_ARRAY, loader);]