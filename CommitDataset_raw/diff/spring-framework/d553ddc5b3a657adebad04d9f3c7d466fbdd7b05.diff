[+++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +		int startParen = signature.indexOf('(');, +		int endParen = signature.indexOf(')');, +		if (startParen > -1 && endParen == -1) {, +		else if (startParen == -1 && endParen > -1) {, +		else if (startParen == -1) {, +			String methodName = signature.substring(0, startParen);, +					StringUtils.commaDelimitedListToStringArray(signature.substring(startParen + 1, endParen));, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +		int startParen = signature.indexOf('(');, +		int endParen = signature.indexOf(')');, +		if (startParen > -1 && endParen == -1) {, +		else if (startParen == -1 && endParen > -1) {, +		else if (startParen == -1) {, +			String methodName = signature.substring(0, startParen);, +					StringUtils.commaDelimitedListToStringArray(signature.substring(startParen + 1, endParen));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/wiring/BeanConfigurerSupport.java, + * Copyright 2002-2018 the original author or authors., +			String beanName = bwi.getBeanName();, +			if (bwi.indicatesAutowiring() || (bwi.isDefaultBeanName() && beanName != null &&, +					!beanFactory.containsBean(beanName))) {, +				beanFactory.initializeBean(beanInstance, (beanName != null ? beanName : ""));, +				beanFactory.configureBean(beanInstance, (beanName != null ? beanName : ""));, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +		int startParen = signature.indexOf('(');, +		int endParen = signature.indexOf(')');, +		if (startParen > -1 && endParen == -1) {, +		else if (startParen == -1 && endParen > -1) {, +		else if (startParen == -1) {, +			String methodName = signature.substring(0, startParen);, +					StringUtils.commaDelimitedListToStringArray(signature.substring(startParen + 1, endParen));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/wiring/BeanConfigurerSupport.java, + * Copyright 2002-2018 the original author or authors., +			String beanName = bwi.getBeanName();, +			if (bwi.indicatesAutowiring() || (bwi.isDefaultBeanName() && beanName != null &&, +					!beanFactory.containsBean(beanName))) {, +				beanFactory.initializeBean(beanInstance, (beanName != null ? beanName : ""));, +				beanFactory.configureBean(beanInstance, (beanName != null ? beanName : ""));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +			Collection<SourceClass> importCandidates, boolean checkForCircularImports) {, +					"already present in the current import stack %s", importStack.element().getSimpleName(),, +					new Location(importStack.element().getResource(), attemptedImport.getMetadata()));, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +		int startParen = signature.indexOf('(');, +		int endParen = signature.indexOf(')');, +		if (startParen > -1 && endParen == -1) {, +		else if (startParen == -1 && endParen > -1) {, +		else if (startParen == -1) {, +			String methodName = signature.substring(0, startParen);, +					StringUtils.commaDelimitedListToStringArray(signature.substring(startParen + 1, endParen));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/wiring/BeanConfigurerSupport.java, + * Copyright 2002-2018 the original author or authors., +			String beanName = bwi.getBeanName();, +			if (bwi.indicatesAutowiring() || (bwi.isDefaultBeanName() && beanName != null &&, +					!beanFactory.containsBean(beanName))) {, +				beanFactory.initializeBean(beanInstance, (beanName != null ? beanName : ""));, +				beanFactory.configureBean(beanInstance, (beanName != null ? beanName : ""));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +			Collection<SourceClass> importCandidates, boolean checkForCircularImports) {, +					"already present in the current import stack %s", importStack.element().getSimpleName(),, +					new Location(importStack.element().getResource(), attemptedImport.getMetadata()));, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +			if (eventClass != null && eventClass.isInstance(event)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +		int startParen = signature.indexOf('(');, +		int endParen = signature.indexOf(')');, +		if (startParen > -1 && endParen == -1) {, +		else if (startParen == -1 && endParen > -1) {, +		else if (startParen == -1) {, +			String methodName = signature.substring(0, startParen);, +					StringUtils.commaDelimitedListToStringArray(signature.substring(startParen + 1, endParen));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/wiring/BeanConfigurerSupport.java, + * Copyright 2002-2018 the original author or authors., +			String beanName = bwi.getBeanName();, +			if (bwi.indicatesAutowiring() || (bwi.isDefaultBeanName() && beanName != null &&, +					!beanFactory.containsBean(beanName))) {, +				beanFactory.initializeBean(beanInstance, (beanName != null ? beanName : ""));, +				beanFactory.configureBean(beanInstance, (beanName != null ? beanName : ""));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +			Collection<SourceClass> importCandidates, boolean checkForCircularImports) {, +					"already present in the current import stack %s", importStack.element().getSimpleName(),, +					new Location(importStack.element().getResource(), attemptedImport.getMetadata()));, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +			if (eventClass != null && eventClass.isInstance(event)) {, +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, +	 * Determine if the supplied class is an <em>inner class</em>,, +	 * i.e. a non-static member of an enclosing class., +	 * @return {@code true} if the supplied class is an inner class, +	 * @since 5.0.5, +	 * @see Class#isMemberClass(), +	 */, +	public static boolean isInnerClass(Class<?> clazz) {, +		return (clazz.isMemberClass() && !Modifier.isStatic(clazz.getModifiers()));, +	}, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +		int startParen = signature.indexOf('(');, +		int endParen = signature.indexOf(')');, +		if (startParen > -1 && endParen == -1) {]