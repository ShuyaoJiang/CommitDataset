[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScan.java, + * {@link #value()} may be specified to define specific packages to scan.  If specific, + * packages are not defined scanning will occur from the package of the, + * class with this annotation., +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScan.java, + * {@link #value()} may be specified to define specific packages to scan.  If specific, + * packages are not defined scanning will occur from the package of the, + * class with this annotation., +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, +	public Set<BeanDefinitionHolder> parse(AnnotationAttributes componentScan, String declaringClass) {, +			basePackages.add(ClassUtils.getPackageName(declaringClass));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScan.java, + * {@link #value()} may be specified to define specific packages to scan.  If specific, + * packages are not defined scanning will occur from the package of the, + * class with this annotation., +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, +	public Set<BeanDefinitionHolder> parse(AnnotationAttributes componentScan, String declaringClass) {, +			basePackages.add(ClassUtils.getPackageName(declaringClass));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +			Set<BeanDefinitionHolder> scannedBeanDefinitions =, +					this.componentScanParser.parse(componentScan, metadata.getClassName());, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScan.java, + * {@link #value()} may be specified to define specific packages to scan.  If specific, + * packages are not defined scanning will occur from the package of the, + * class with this annotation., +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, +	public Set<BeanDefinitionHolder> parse(AnnotationAttributes componentScan, String declaringClass) {, +			basePackages.add(ClassUtils.getPackageName(declaringClass));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +			Set<BeanDefinitionHolder> scannedBeanDefinitions =, +					this.componentScanParser.parse(componentScan, metadata.getClassName());, +++ b/spring-context/src/test/java/example/scannable_implicitbasepackage/ComponentScanAnnotatedConfigWithImplicitBasePackage.java, +/*, + * Copyright 2002-2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package example.scannable_implicitbasepackage;, +, +import org.springframework.context.annotation.ComponentScan;, +import org.springframework.context.annotation.Configuration;, +, +/**, + * @author Phillip Webb, + */, +@Configuration, +@ComponentScan, +public class ComponentScanAnnotatedConfigWithImplicitBasePackage {, +}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScan.java, + * {@link #value()} may be specified to define specific packages to scan.  If specific, + * packages are not defined scanning will occur from the package of the, + * class with this annotation., +++ b/spring-context/src/main/java/org/springframework/context/annotation/ComponentScanAnnotationParser.java, +	public Set<BeanDefinitionHolder> parse(AnnotationAttributes componentScan, String declaringClass) {, +			basePackages.add(ClassUtils.getPackageName(declaringClass));, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +			Set<BeanDefinitionHolder> scannedBeanDefinitions =, +					this.componentScanParser.parse(componentScan, metadata.getClassName());, +++ b/spring-context/src/test/java/example/scannable_implicitbasepackage/ComponentScanAnnotatedConfigWithImplicitBasePackage.java, +/*, + * Copyright 2002-2012 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package example.scannable_implicitbasepackage;, +, +import org.springframework.context.annotation.ComponentScan;, +import org.springframework.context.annotation.Configuration;, +, +/**, + * @author Phillip Webb, + */, +@Configuration, +@ComponentScan, +public class ComponentScanAnnotatedConfigWithImplicitBasePackage {, +}, +++ b/spring-context/src/test/java/example/scannable_implicitbasepackage/ScannedComponent.java, +/*, + * Copyright 2002-2012 the original author or authors.]