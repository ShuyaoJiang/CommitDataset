[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +	/**, +	 * Return the internal mapping registry. Provided for testing purposes., +	 */, +	MappingRegistry getMappingRegistry() {, +		return this.mappingRegistry;, +	}, +, +		List<T> directPathMatches = this.mappingRegistry.getMappingsByUrl(lookupPath);, +				matches.add(new Match(match, this.mappingRegistry.getMappings().get(mapping)));, +	/**, +	 * A registry that maintains all mappings to handler methods, exposing methods, +	 * to perform lookups and providing concurrent access., +	 *, +	 * <p>Package-private for testing purposes., +	 */, +	class MappingRegistry {, +, +		private final Map<T, MappingRegistration<T>> registry = new HashMap<T, MappingRegistration<T>>();, +		private final Map<String, List<HandlerMethod>> nameLookup =, +		public List<T> getMappingsByUrl(String urlPath) {, +			return this.nameLookup.get(mappingName);, +		 * Acquire the read lock when using getMappings and getMappingsByUrl., +		 * Release the read lock after using getMappings and getMappingsByUrl., +				this.registry.put(mapping,, +						new MappingRegistration<T>(mapping, handlerMethod, directUrls, name, corsConfig));, +			List<HandlerMethod> oldList = this.nameLookup.containsKey(name) ?, +					this.nameLookup.get(name) : Collections.<HandlerMethod>emptyList();, +			this.nameLookup.put(name, newList);, +				MappingRegistration<T> definition = this.registry.remove(mapping);, +		private void removeMappingName(MappingRegistration<T> definition) {, +			String name = definition.getMappingName();, +			List<HandlerMethod> oldList = this.nameLookup.get(name);, +				this.nameLookup.remove(name);, +			this.nameLookup.put(name, newList);, +	private static class MappingRegistration<T> {, +		private final String mappingName;, +		public MappingRegistration(T mapping, HandlerMethod handlerMethod, List<String> directUrls,, +				String mappingName, CorsConfiguration corsConfiguration) {, +			this.mappingName = mappingName;, +		public String getMappingName() {, +			return this.mappingName;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java, +	/**, +	 * Return the internal mapping registry. Provided for testing purposes., +	 */, +	MappingRegistry getMappingRegistry() {, +		return this.mappingRegistry;, +	}, +, +		List<T> directPathMatches = this.mappingRegistry.getMappingsByUrl(lookupPath);, +				matches.add(new Match(match, this.mappingRegistry.getMappings().get(mapping)));, +	/**, +	 * A registry that maintains all mappings to handler methods, exposing methods, +	 * to perform lookups and providing concurrent access., +	 *, +	 * <p>Package-private for testing purposes., +	 */, +	class MappingRegistry {, +, +		private final Map<T, MappingRegistration<T>> registry = new HashMap<T, MappingRegistration<T>>();, +		private final Map<String, List<HandlerMethod>> nameLookup =, +		public List<T> getMappingsByUrl(String urlPath) {, +			return this.nameLookup.get(mappingName);, +		 * Acquire the read lock when using getMappings and getMappingsByUrl., +		 * Release the read lock after using getMappings and getMappingsByUrl., +				this.registry.put(mapping,, +						new MappingRegistration<T>(mapping, handlerMethod, directUrls, name, corsConfig));, +			List<HandlerMethod> oldList = this.nameLookup.containsKey(name) ?, +					this.nameLookup.get(name) : Collections.<HandlerMethod>emptyList();, +			this.nameLookup.put(name, newList);, +				MappingRegistration<T> definition = this.registry.remove(mapping);, +		private void removeMappingName(MappingRegistration<T> definition) {, +			String name = definition.getMappingName();, +			List<HandlerMethod> oldList = this.nameLookup.get(name);, +				this.nameLookup.remove(name);, +			this.nameLookup.put(name, newList);, +	private static class MappingRegistration<T> {, +		private final String mappingName;, +		public MappingRegistration(T mapping, HandlerMethod handlerMethod, List<String> directUrls,, +				String mappingName, CorsConfiguration corsConfiguration) {, +			this.mappingName = mappingName;, +		public String getMappingName() {, +			return this.mappingName;, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/handler/HandlerMethodMappingTests.java, +import java.util.Collections;, +import java.util.List;, +import org.springframework.web.cors.CorsConfiguration;, +, +@SuppressWarnings("unused"), +, +		this.mapping = new MyHandlerMethodMapping();, +		this.handler = new MyHandler();, +		this.method1 = handler.getClass().getMethod("handlerMethod1");, +		this.method2 = handler.getClass().getMethod("handlerMethod2");, +, +		this.mapping.registerMapping("foo", this.handler, this.method1);, +		this.mapping.registerMapping("foo", this.handler, this.method2);, +		this.mapping.registerMapping(key, this.handler, this.method1);, +		HandlerMethod result = this.mapping.getHandlerInternal(new MockHttpServletRequest("GET", key));]