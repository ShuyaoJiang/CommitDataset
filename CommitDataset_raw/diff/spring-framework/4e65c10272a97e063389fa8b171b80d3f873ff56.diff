[+++ b/spring-test/src/test/java/org/springframework/test/context/junit4/concurrency/SpringJUnit4ConcurrencyTests.java, + * Copyright 2002-2017 the original author or authors., +import java.lang.annotation.Annotation;, +import java.lang.reflect.Method;, +import java.util.Arrays;, +import java.util.List;, +import java.util.stream.IntStream;, +, +import org.junit.BeforeClass;, +import org.junit.Ignore;, +import org.springframework.util.ReflectionUtils;, +import static java.util.stream.Collectors.*;, +import static org.springframework.core.annotation.AnnotatedElementUtils.*;, +import static org.springframework.test.context.junit4.JUnitTestingUtils.*;, +	private final Class<?>[] testClasses = new Class[] {, +			SpringJUnit4ClassRunnerAppCtxTests.class,, +			InheritedConfigSpringJUnit4ClassRunnerAppCtxTests.class,, +			SpringJUnit47ClassRunnerRuleTests.class,, +			ParameterizedSpringRuleTests.class,, +			MethodLevelTransactionalSpringRunnerTests.class,, +			TimedTransactionalSpringRunnerTests.class,, +			DispatcherWacRootWacEarTests.class,, +			BasicAnnotationConfigWacSpringRuleTests.class,, +			RequestAndSessionScopedBeansWacTests.class,, +			WebSocketServletServerContainerFactoryBeanTests.class,, +			JavaConfigTests.class,, +			WebAppResourceTests.class,, +			SampleTests.class, +	@BeforeClass, +	public static void abortIfLongRunningTestGroupIsNotEnabled() {, +		Assume.group(TestGroup.LONG_RUNNING);, +	}, +		final int FAILED = 0;, +		final int ABORTED = 0;, +		final int IGNORED = countAnnotatedMethods(Ignore.class);, +		// +1 since ParameterizedSpringRuleTests is parameterized, +		final int TESTS = countAnnotatedMethods(Test.class) + 1 - IGNORED;, +			this.testClasses);, +	}, +, +	private int countAnnotatedMethods(Class<? extends Annotation> annotationType) {, +		return Arrays.stream(this.testClasses), +				.map(testClass -> getAnnotatedMethods(testClass, annotationType)), +				.flatMapToInt(list -> IntStream.of(list.size())), +				.sum();, +	}, +, +	private List<Method> getAnnotatedMethods(Class<?> clazz, Class<? extends Annotation> annotationType) {, +		return Arrays.stream(ReflectionUtils.getUniqueDeclaredMethods(clazz)), +				.filter(method -> hasAnnotation(method, annotationType)), +				.collect(toList());]