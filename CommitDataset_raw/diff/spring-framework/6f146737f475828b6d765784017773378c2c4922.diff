[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +					if (pd.getReadMethod() != null || pd.getWriteMethod() != null) {, +						return TypeDescriptor.nested(nestedBw.getWrappedClass(), pd, tokens.keys.length);, +					if (pd.getReadMethod() != null || pd.getWriteMethod() != null) {, +						return new TypeDescriptor(nestedBw.getWrappedClass(), pd);, +		GenericTypeAwarePropertyDescriptor gpd = (GenericTypeAwarePropertyDescriptor) pd;, +		Class<?> beanClass = gpd.getBeanClass();, +		return convertIfNecessary(propertyName, oldValue, newValue, pd.getPropertyType(), new TypeDescriptor(beanClass, pd));, +					Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, TypeDescriptor.nested(getWrappedClass(), pd, tokens.keys.length));, +				Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, TypeDescriptor.nested(getWrappedClass(), pd, tokens.keys.length));, +						propertyName, oldValue, pv.getValue(), mapValueType, TypeDescriptor.nested(getWrappedClass(), pd, tokens.keys.length));, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +					if (pd.getReadMethod() != null || pd.getWriteMethod() != null) {, +						return TypeDescriptor.nested(nestedBw.getWrappedClass(), pd, tokens.keys.length);, +					if (pd.getReadMethod() != null || pd.getWriteMethod() != null) {, +						return new TypeDescriptor(nestedBw.getWrappedClass(), pd);, +		GenericTypeAwarePropertyDescriptor gpd = (GenericTypeAwarePropertyDescriptor) pd;, +		Class<?> beanClass = gpd.getBeanClass();, +		return convertIfNecessary(propertyName, oldValue, newValue, pd.getPropertyType(), new TypeDescriptor(beanClass, pd));, +					Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, TypeDescriptor.nested(getWrappedClass(), pd, tokens.keys.length));, +				Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, TypeDescriptor.nested(getWrappedClass(), pd, tokens.keys.length));, +						propertyName, oldValue, pv.getValue(), mapValueType, TypeDescriptor.nested(getWrappedClass(), pd, tokens.keys.length));, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/GenericTypeAwarePropertyDescriptor.java, +	public Class<?> getBeanClass() {, +		return beanClass;, +	}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +					if (pd.getReadMethod() != null || pd.getWriteMethod() != null) {, +						return TypeDescriptor.nested(nestedBw.getWrappedClass(), pd, tokens.keys.length);, +					if (pd.getReadMethod() != null || pd.getWriteMethod() != null) {, +						return new TypeDescriptor(nestedBw.getWrappedClass(), pd);, +		GenericTypeAwarePropertyDescriptor gpd = (GenericTypeAwarePropertyDescriptor) pd;, +		Class<?> beanClass = gpd.getBeanClass();, +		return convertIfNecessary(propertyName, oldValue, newValue, pd.getPropertyType(), new TypeDescriptor(beanClass, pd));, +					Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, TypeDescriptor.nested(getWrappedClass(), pd, tokens.keys.length));, +				Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, TypeDescriptor.nested(getWrappedClass(), pd, tokens.keys.length));, +						propertyName, oldValue, pv.getValue(), mapValueType, TypeDescriptor.nested(getWrappedClass(), pd, tokens.keys.length));, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/GenericTypeAwarePropertyDescriptor.java, +	public Class<?> getBeanClass() {, +		return beanClass;, +	}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +			if (requiredType != null && Collection.class.isAssignableFrom(requiredType) && convertedValue instanceof String) {, +				Class elemType = typeDescriptor.getElementType();, +		//if (typeDescriptor instanceof PropertyTypeDescriptor) {, +			//PropertyDescriptor pd = ((PropertyTypeDescriptor) typeDescriptor).getPropertyDescriptor();, +			//editor = pd.createPropertyEditor(this.targetObject);, +		//}, +		Class elementType = typeDescriptor.getElementType();, +		if (elementType == Object.class && originalAllowed &&, +					indexedPropertyName, null, element, elementType, typeDescriptor.getElementTypeDescriptor());, +		Class keyType = typeDescriptor.getMapKeyType();, +		Class valueType = typeDescriptor.getMapValueType();, +		if (keyType == Object.class && valueType == Object.class && originalAllowed &&, +			Object convertedKey = convertIfNecessary(keyedPropertyName, null, key, keyType, typeDescriptor.getMapKeyTypeDescriptor());, +			Object convertedValue = convertIfNecessary(keyedPropertyName, null, value, valueType, typeDescriptor.getMapValueTypeDescriptor());, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +					if (pd.getReadMethod() != null || pd.getWriteMethod() != null) {, +						return TypeDescriptor.nested(nestedBw.getWrappedClass(), pd, tokens.keys.length);, +					if (pd.getReadMethod() != null || pd.getWriteMethod() != null) {, +						return new TypeDescriptor(nestedBw.getWrappedClass(), pd);, +		GenericTypeAwarePropertyDescriptor gpd = (GenericTypeAwarePropertyDescriptor) pd;, +		Class<?> beanClass = gpd.getBeanClass();, +		return convertIfNecessary(propertyName, oldValue, newValue, pd.getPropertyType(), new TypeDescriptor(beanClass, pd));, +					Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, TypeDescriptor.nested(getWrappedClass(), pd, tokens.keys.length));, +				Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, TypeDescriptor.nested(getWrappedClass(), pd, tokens.keys.length));, +						propertyName, oldValue, pv.getValue(), mapValueType, TypeDescriptor.nested(getWrappedClass(), pd, tokens.keys.length));, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/GenericTypeAwarePropertyDescriptor.java, +	public Class<?> getBeanClass() {, +		return beanClass;, +	}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java, +			if (requiredType != null && Collection.class.isAssignableFrom(requiredType) && convertedValue instanceof String) {, +				Class elemType = typeDescriptor.getElementType();, +		//if (typeDescriptor instanceof PropertyTypeDescriptor) {, +			//PropertyDescriptor pd = ((PropertyTypeDescriptor) typeDescriptor).getPropertyDescriptor();, +			//editor = pd.createPropertyEditor(this.targetObject);, +		//}, +		Class elementType = typeDescriptor.getElementType();, +		if (elementType == Object.class && originalAllowed &&, +					indexedPropertyName, null, element, elementType, typeDescriptor.getElementTypeDescriptor());, +		Class keyType = typeDescriptor.getMapKeyType();, +		Class valueType = typeDescriptor.getMapValueType();, +		if (keyType == Object.class && valueType == Object.class && originalAllowed &&, +			Object convertedKey = convertIfNecessary(keyedPropertyName, null, key, keyType, typeDescriptor.getMapKeyTypeDescriptor());, +			Object convertedValue = convertIfNecessary(keyedPropertyName, null, value, valueType, typeDescriptor.getMapValueTypeDescriptor());, +++ b/org.springframework.core/src/main/java/org/springframework/core/MethodParameter.java, +		this.genericParameterType = original.genericParameterType;, +		this.parameterNameDiscoverer = original.parameterNameDiscoverer;, +		this.parameterName = original.parameterName;, +		this.nestingLevel = original.nestingLevel;, +		this.typeIndexesPerLevel = original.typeIndexesPerLevel;, +		this.hash = original.hash;, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/BeanWrapperImpl.java, +					if (pd.getReadMethod() != null || pd.getWriteMethod() != null) {, +						return TypeDescriptor.nested(nestedBw.getWrappedClass(), pd, tokens.keys.length);, +					if (pd.getReadMethod() != null || pd.getWriteMethod() != null) {, +						return new TypeDescriptor(nestedBw.getWrappedClass(), pd);, +		GenericTypeAwarePropertyDescriptor gpd = (GenericTypeAwarePropertyDescriptor) pd;, +		Class<?> beanClass = gpd.getBeanClass();]