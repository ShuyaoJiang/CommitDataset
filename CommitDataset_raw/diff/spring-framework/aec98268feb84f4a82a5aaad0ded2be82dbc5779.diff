[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ExchangeFilterFunctions.java, +import reactor.core.publisher.Flux;, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.core.io.buffer.DataBufferUtils;, +import org.springframework.web.reactive.function.BodyExtractors;, +	/**, +	 * Consume up to the specified number of bytes from the response body and, +	 * cancel if any more data arrives. Internally delegates to, +	 * {@link DataBufferUtils#takeUntilByteCount}., +	 * @return the filter to limit the response size with, +	 * @since 5.1, +	 */, +	public static ExchangeFilterFunction limitResponseSize(long maxByteCount) {, +		return (request, next) ->, +				next.exchange(request).map(response -> {, +					Flux<DataBuffer> body = response.body(BodyExtractors.toDataBuffers());, +					body = DataBufferUtils.takeUntilByteCount(body, maxByteCount);, +					return ClientResponse.from(response).body(body).build();, +				});, +	}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/ExchangeFilterFunctions.java, +import reactor.core.publisher.Flux;, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.core.io.buffer.DataBufferUtils;, +import org.springframework.web.reactive.function.BodyExtractors;, +	/**, +	 * Consume up to the specified number of bytes from the response body and, +	 * cancel if any more data arrives. Internally delegates to, +	 * {@link DataBufferUtils#takeUntilByteCount}., +	 * @return the filter to limit the response size with, +	 * @since 5.1, +	 */, +	public static ExchangeFilterFunction limitResponseSize(long maxByteCount) {, +		return (request, next) ->, +				next.exchange(request).map(response -> {, +					Flux<DataBuffer> body = response.body(BodyExtractors.toDataBuffers());, +					body = DataBufferUtils.takeUntilByteCount(body, maxByteCount);, +					return ClientResponse.from(response).body(body).build();, +				});, +	}, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/function/client/ExchangeFilterFunctionsTests.java, +import java.nio.charset.StandardCharsets;, +import reactor.core.publisher.Flux;, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.core.io.buffer.DataBufferUtils;, +import org.springframework.core.io.buffer.DefaultDataBufferFactory;, +import org.springframework.core.io.buffer.support.DataBufferTestUtils;, +import org.springframework.http.HttpMethod;, +import org.springframework.web.reactive.function.BodyExtractors;, +	private static final URI DEFAULT_URL = URI.create("http://example.com");, +, +, +		ClientRequest request = ClientRequest.create(HttpMethod.GET, DEFAULT_URL).build();, +		ClientRequest request = ClientRequest.create(HttpMethod.GET, DEFAULT_URL).build();, +	@SuppressWarnings("deprecation"), +		ClientRequest request = ClientRequest.create(HttpMethod.GET, DEFAULT_URL).build();, +	@SuppressWarnings("deprecation"), +		ClientRequest request = ClientRequest.create(HttpMethod.GET, DEFAULT_URL), +				.attributes(org.springframework.web.reactive.function.client.ExchangeFilterFunctions, +						.Credentials.basicAuthenticationCredentials("foo", "bar")), +	@SuppressWarnings("deprecation"), +		ClientRequest request = ClientRequest.create(HttpMethod.GET, DEFAULT_URL).build();, +		ClientRequest request = ClientRequest.create(HttpMethod.GET, DEFAULT_URL).build();, +		ClientRequest request = ClientRequest.create(HttpMethod.GET, DEFAULT_URL).build();, +		Mono<ClientResponse> result = ExchangeFilterFunctions, +				.statusError(HttpStatus::is5xxServerError, req -> new MyException()), +				.filter(request, req -> Mono.just(response));, +	@Test, +	public void limitResponseSize() {, +		DefaultDataBufferFactory bufferFactory = new DefaultDataBufferFactory();, +		DataBuffer b1 = dataBuffer("foo", bufferFactory);, +		DataBuffer b2 = dataBuffer("bar", bufferFactory);, +		DataBuffer b3 = dataBuffer("baz", bufferFactory);, +, +		ClientRequest request = ClientRequest.create(HttpMethod.GET, DEFAULT_URL).build();, +		ClientResponse response = ClientResponse.create(HttpStatus.OK).body(Flux.just(b1, b2, b3)).build();, +, +		Mono<ClientResponse> result = ExchangeFilterFunctions.limitResponseSize(5), +				.filter(request, req -> Mono.just(response));, +, +		StepVerifier.create(result.flatMapMany(res -> res.body(BodyExtractors.toDataBuffers()))), +				.consumeNextWith(buffer -> assertEquals("foo", string(buffer))), +				.consumeNextWith(buffer -> assertEquals("ba", string(buffer))), +				.expectComplete(), +				.verify();, +, +	}, +, +	private String string(DataBuffer buffer) {, +		String value = DataBufferTestUtils.dumpString(buffer, StandardCharsets.UTF_8);, +		DataBufferUtils.release(buffer);, +		return value;, +	}, +, +	private DataBuffer dataBuffer(String foo, DefaultDataBufferFactory bufferFactory) {, +		return bufferFactory.wrap(foo.getBytes(StandardCharsets.UTF_8));, +	}, +, +]