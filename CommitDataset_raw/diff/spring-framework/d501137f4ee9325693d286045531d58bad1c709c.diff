[+++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, + * <p>The default, preferred {@link Locale} for the <em>server</em> mocked by this request, + * is {@link Locale#ENGLISH}. This value can be changed via {@link #addPreferredLocale}, + * or {@link #setPreferredLocales}., + * <p>As of Spring Framework 4.0, this set of mocks is designed on a Servlet 3.0 baseline., +		if (StringUtils.hasLength(this.contentType)) {, +			if (!this.contentType.toLowerCase().contains(CHARSET_PREFIX) &&, +					StringUtils.hasLength(this.characterEncoding)) {, +				this.characterEncoding = contentType.substring(charsetIndex + CHARSET_PREFIX.length());, +		return (this.secure || HTTPS.equalsIgnoreCase(this.scheme));, +		if (this.serverPort > 0 && ((HTTP.equalsIgnoreCase(this.scheme) && this.serverPort != 80) ||, +				(HTTPS.equalsIgnoreCase(this.scheme) && this.serverPort != 443))) {, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, + * <p>The default, preferred {@link Locale} for the <em>server</em> mocked by this request, + * is {@link Locale#ENGLISH}. This value can be changed via {@link #addPreferredLocale}, + * or {@link #setPreferredLocales}., + * <p>As of Spring Framework 4.0, this set of mocks is designed on a Servlet 3.0 baseline., +		if (StringUtils.hasLength(this.contentType)) {, +			if (!this.contentType.toLowerCase().contains(CHARSET_PREFIX) &&, +					StringUtils.hasLength(this.characterEncoding)) {, +				this.characterEncoding = contentType.substring(charsetIndex + CHARSET_PREFIX.length());, +		return (this.secure || HTTPS.equalsIgnoreCase(this.scheme));, +		if (this.serverPort > 0 && ((HTTP.equalsIgnoreCase(this.scheme) && this.serverPort != 80) ||, +				(HTTPS.equalsIgnoreCase(this.scheme) && this.serverPort != 443))) {, +++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java, +import org.springframework.util.LinkedCaseInsensitiveMap;, +import org.springframework.util.StringUtils;, +			MediaType contentType = this.headers.getContentType();, +			if (contentType == null) {, +				String requestContentType = this.servletRequest.getContentType();, +				if (StringUtils.hasLength(requestContentType)) {, +					contentType = MediaType.parseMediaType(requestContentType);, +			}, +			if (contentType != null && contentType.getCharSet() == null) {, +				String requestEncoding = this.servletRequest.getCharacterEncoding();, +				if (StringUtils.hasLength(requestEncoding)) {, +					Charset charSet = Charset.forName(requestEncoding);, +					Map<String, String> params = new LinkedCaseInsensitiveMap<String>();, +					params.putAll(contentType.getParameters());, +					MediaType newContentType = new MediaType(contentType.getType(), contentType.getSubtype(), params);, +			}, +			if (this.headers.getContentLength() == -1) {, +				int requestContentLength = this.servletRequest.getContentLength();, +				if (requestContentLength != -1) {, +					this.headers.setContentLength(requestContentLength);, +				}, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, + * <p>The default, preferred {@link Locale} for the <em>server</em> mocked by this request, + * is {@link Locale#ENGLISH}. This value can be changed via {@link #addPreferredLocale}, + * or {@link #setPreferredLocales}., + * <p>As of Spring Framework 4.0, this set of mocks is designed on a Servlet 3.0 baseline., +		if (StringUtils.hasLength(this.contentType)) {, +			if (!this.contentType.toLowerCase().contains(CHARSET_PREFIX) &&, +					StringUtils.hasLength(this.characterEncoding)) {, +				this.characterEncoding = contentType.substring(charsetIndex + CHARSET_PREFIX.length());, +		return (this.secure || HTTPS.equalsIgnoreCase(this.scheme));, +		if (this.serverPort > 0 && ((HTTP.equalsIgnoreCase(this.scheme) && this.serverPort != 80) ||, +				(HTTPS.equalsIgnoreCase(this.scheme) && this.serverPort != 443))) {, +++ b/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java, +import org.springframework.util.LinkedCaseInsensitiveMap;, +import org.springframework.util.StringUtils;, +			MediaType contentType = this.headers.getContentType();, +			if (contentType == null) {, +				String requestContentType = this.servletRequest.getContentType();, +				if (StringUtils.hasLength(requestContentType)) {, +					contentType = MediaType.parseMediaType(requestContentType);, +			}, +			if (contentType != null && contentType.getCharSet() == null) {, +				String requestEncoding = this.servletRequest.getCharacterEncoding();, +				if (StringUtils.hasLength(requestEncoding)) {, +					Charset charSet = Charset.forName(requestEncoding);, +					Map<String, String> params = new LinkedCaseInsensitiveMap<String>();, +					params.putAll(contentType.getParameters());, +					MediaType newContentType = new MediaType(contentType.getType(), contentType.getSubtype(), params);, +			}, +			if (this.headers.getContentLength() == -1) {, +				int requestContentLength = this.servletRequest.getContentLength();, +				if (requestContentLength != -1) {, +					this.headers.setContentLength(requestContentLength);, +				}, +++ b/spring-web/src/test/java/org/springframework/http/server/ServletServerHttpRequestTests.java, + * Copyright 2002-2014 the original author or authors., +, +, +, +		mockRequest.addHeader(headerName, headerValue1);, +	public void getHeadersWithEmptyContentTypeAndEncoding() throws Exception {, +		String headerName = "MyHeader";, +		String headerValue1 = "value1";, +		String headerValue2 = "value2";, +		mockRequest.addHeader(headerName, headerValue1);, +		mockRequest.addHeader(headerName, headerValue2);, +		mockRequest.setContentType("");, +		mockRequest.setCharacterEncoding("");, +, +		HttpHeaders headers = request.getHeaders();, +		assertNotNull("No HttpHeaders returned", headers);, +		assertTrue("Invalid headers returned", headers.containsKey(headerName));, +		List<String> headerValues = headers.get(headerName);, +		assertEquals("Invalid header values returned", 2, headerValues.size());]