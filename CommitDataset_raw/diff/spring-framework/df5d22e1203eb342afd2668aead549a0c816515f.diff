[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/method/AbstractMethodMessageHandler.java, +		if (destination == null) {, +			logger.trace("Ignoring message, no destination");, +			return;, +		}, +		String lookupDestination = getLookupDestination(destination);, +				logger.trace("Ignoring message to destination=" + destination);, +		if (logger.isDebugEnabled()) {, +			logger.debug("Handling message, lookupDestination=" + lookupDestination);, +		if (logger.isDebugEnabled()) {, +			logger.debug("Message matched to " + handlerMethod);, +		}, +, +	protected void handleNoMatch(Set<T> ts, String lookupDestination, Message<?> message) {, +		if (logger.isDebugEnabled()) {, +			logger.debug("No matching method found");, +		}, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/method/AbstractMethodMessageHandler.java, +		if (destination == null) {, +			logger.trace("Ignoring message, no destination");, +			return;, +		}, +		String lookupDestination = getLookupDestination(destination);, +				logger.trace("Ignoring message to destination=" + destination);, +		if (logger.isDebugEnabled()) {, +			logger.debug("Handling message, lookupDestination=" + lookupDestination);, +		if (logger.isDebugEnabled()) {, +			logger.debug("Message matched to " + handlerMethod);, +		}, +, +	protected void handleNoMatch(Set<T> ts, String lookupDestination, Message<?> message) {, +		if (logger.isDebugEnabled()) {, +			logger.debug("No matching method found");, +		}, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessagingTemplate.java, +		doSend(destination, message);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/method/AbstractMethodMessageHandler.java, +		if (destination == null) {, +			logger.trace("Ignoring message, no destination");, +			return;, +		}, +		String lookupDestination = getLookupDestination(destination);, +				logger.trace("Ignoring message to destination=" + destination);, +		if (logger.isDebugEnabled()) {, +			logger.debug("Handling message, lookupDestination=" + lookupDestination);, +		if (logger.isDebugEnabled()) {, +			logger.debug("Message matched to " + handlerMethod);, +		}, +, +	protected void handleNoMatch(Set<T> ts, String lookupDestination, Message<?> message) {, +		if (logger.isDebugEnabled()) {, +			logger.debug("No matching method found");, +		}, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessagingTemplate.java, +		doSend(destination, message);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/WebSocketMessageBrokerConfigurationSupport.java, +		return new ExecutorSubscribableChannel(webSocketRequestChannelExecutor());, +	}, +, +	@Bean, +	public ThreadPoolTaskExecutor webSocketRequestChannelExecutor() {, +		ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();, +		executor.setThreadNamePrefix("WebSocketRequestChannel-");, +		return executor;, +		return new ExecutorSubscribableChannel(webSocketResponseChannelExecutor());, +	public ThreadPoolTaskExecutor webSocketResponseChannelExecutor() {, +		executor.setThreadNamePrefix("WebSocketResponseChannel-");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/method/AbstractMethodMessageHandler.java, +		if (destination == null) {, +			logger.trace("Ignoring message, no destination");, +			return;, +		}, +		String lookupDestination = getLookupDestination(destination);, +				logger.trace("Ignoring message to destination=" + destination);, +		if (logger.isDebugEnabled()) {, +			logger.debug("Handling message, lookupDestination=" + lookupDestination);, +		if (logger.isDebugEnabled()) {, +			logger.debug("Message matched to " + handlerMethod);, +		}, +, +	protected void handleNoMatch(Set<T> ts, String lookupDestination, Message<?> message) {, +		if (logger.isDebugEnabled()) {, +			logger.debug("No matching method found");, +		}, +	}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/SimpMessagingTemplate.java, +		doSend(destination, message);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/config/WebSocketMessageBrokerConfigurationSupport.java, +		return new ExecutorSubscribableChannel(webSocketRequestChannelExecutor());, +	}, +, +	@Bean, +	public ThreadPoolTaskExecutor webSocketRequestChannelExecutor() {, +		ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();, +		executor.setThreadNamePrefix("WebSocketRequestChannel-");, +		return executor;, +		return new ExecutorSubscribableChannel(webSocketResponseChannelExecutor());]