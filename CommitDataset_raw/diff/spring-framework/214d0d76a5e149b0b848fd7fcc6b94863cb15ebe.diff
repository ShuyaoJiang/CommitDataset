[+++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/CacheResultInterceptor.java, + * Copyright 2002-2017 the original author or authors., +, +, +	 * the current call stack up to (included) the specified method invocation., +	 * @return a clone exception with a rewritten call stack composed of the current call, +	 * stack up to (included) the common ancestor specified by the {@code className} and, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/CacheResultInterceptor.java, + * Copyright 2002-2017 the original author or authors., +, +, +	 * the current call stack up to (included) the specified method invocation., +	 * @return a clone exception with a rewritten call stack composed of the current call, +	 * stack up to (included) the common ancestor specified by the {@code className} and, +++ b/spring-context-support/src/test/java/org/springframework/cache/jcache/interceptor/JCacheErrorHandlerTests.java, + * Copyright 2002-2017 the original author or authors., +	@Rule, +	public final ExpectedException thrown = ExpectedException.none();, +, +, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Config.class);, +, +		UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on get");, +		UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on put");, +		UnsupportedOperationException exceptionOnPut = new UnsupportedOperationException("Test exception on put");, +		willThrow(exceptionOnPut).given(this.errorCache).put(key, SimpleService.TEST_EXCEPTION);, +		verify(this.errorHandler).handleCachePutError(, +				exceptionOnPut, this.errorCache, key, SimpleService.TEST_EXCEPTION);, +		UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on put");, +		UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on evict");, +		UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on evict");, +, +		private static final IllegalStateException TEST_EXCEPTION = new IllegalStateException("Test exception");, +, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/CacheResultInterceptor.java, + * Copyright 2002-2017 the original author or authors., +, +, +	 * the current call stack up to (included) the specified method invocation., +	 * @return a clone exception with a rewritten call stack composed of the current call, +	 * stack up to (included) the common ancestor specified by the {@code className} and, +++ b/spring-context-support/src/test/java/org/springframework/cache/jcache/interceptor/JCacheErrorHandlerTests.java, + * Copyright 2002-2017 the original author or authors., +	@Rule, +	public final ExpectedException thrown = ExpectedException.none();, +, +, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Config.class);, +, +		UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on get");, +		UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on put");, +		UnsupportedOperationException exceptionOnPut = new UnsupportedOperationException("Test exception on put");, +		willThrow(exceptionOnPut).given(this.errorCache).put(key, SimpleService.TEST_EXCEPTION);, +		verify(this.errorHandler).handleCachePutError(, +				exceptionOnPut, this.errorCache, key, SimpleService.TEST_EXCEPTION);, +		UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on put");, +		UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on evict");, +		UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on evict");, +, +		private static final IllegalStateException TEST_EXCEPTION = new IllegalStateException("Test exception");, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Elvis.java, + * Copyright 2002-2017 the original author or authors., +		mv.visitJumpInsn(IFEQ, endOfIf);  // if not empty, drop through to elseTarget, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/CacheResultInterceptor.java, + * Copyright 2002-2017 the original author or authors., +, +, +	 * the current call stack up to (included) the specified method invocation., +	 * @return a clone exception with a rewritten call stack composed of the current call, +	 * stack up to (included) the common ancestor specified by the {@code className} and, +++ b/spring-context-support/src/test/java/org/springframework/cache/jcache/interceptor/JCacheErrorHandlerTests.java, + * Copyright 2002-2017 the original author or authors., +	@Rule, +	public final ExpectedException thrown = ExpectedException.none();, +, +, +		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Config.class);, +, +		UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on get");, +		UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on put");, +		UnsupportedOperationException exceptionOnPut = new UnsupportedOperationException("Test exception on put");, +		willThrow(exceptionOnPut).given(this.errorCache).put(key, SimpleService.TEST_EXCEPTION);, +		verify(this.errorHandler).handleCachePutError(, +				exceptionOnPut, this.errorCache, key, SimpleService.TEST_EXCEPTION);, +		UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on put");, +		UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on evict");, +		UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on evict");, +, +		private static final IllegalStateException TEST_EXCEPTION = new IllegalStateException("Test exception");, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Elvis.java, + * Copyright 2002-2017 the original author or authors., +		mv.visitJumpInsn(IFEQ, endOfIf);  // if not empty, drop through to elseTarget, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/Ternary.java, + * Copyright 2002-2017 the original author or authors., +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/CacheResultInterceptor.java, + * Copyright 2002-2017 the original author or authors., +, +]