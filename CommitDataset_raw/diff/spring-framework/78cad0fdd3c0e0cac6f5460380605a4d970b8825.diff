[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/ConnectionHandle.java, + * Copyright 2002-2018 the original author or authors., +@FunctionalInterface, +	 * <p>The default implementation is empty, assuming that the lifecycle, +	 * of the connection is managed externally., +	default void releaseConnection(Connection con) {, +	}, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/ConnectionHandle.java, + * Copyright 2002-2018 the original author or authors., +@FunctionalInterface, +	 * <p>The default implementation is empty, assuming that the lifecycle, +	 * of the connection is managed externally., +	default void releaseConnection(Connection con) {, +	}, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/LazyConnectionDataSourceProxy.java, +import java.sql.ResultSet;, +		private boolean readOnly = false;, +, +		private int holdability = ResultSet.CLOSE_CURSORS_AT_COMMIT;, +, +				else if (method.getName().equals("getAutoCommit")) {, +					if (this.autoCommit != null) {, +						return this.autoCommit;, +					// Else fetch actual Connection and check there,, +					// because we didn't have a default specified., +				}, +				else if (method.getName().equals("setAutoCommit")) {, +					this.autoCommit = (Boolean) args[0];, +				else if (method.getName().equals("isReadOnly")) {, +					return this.readOnly;, +				else if (method.getName().equals("setReadOnly")) {, +					this.readOnly = (Boolean) args[0];, +					return null;, +				else if (method.getName().equals("getHoldability")) {, +					return this.holdability;, +				}, +				else if (method.getName().equals("setHoldability")) {, +					this.holdability = (Integer) args[0];, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/ConnectionHandle.java, + * Copyright 2002-2018 the original author or authors., +@FunctionalInterface, +	 * <p>The default implementation is empty, assuming that the lifecycle, +	 * of the connection is managed externally., +	default void releaseConnection(Connection con) {, +	}, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/LazyConnectionDataSourceProxy.java, +import java.sql.ResultSet;, +		private boolean readOnly = false;, +, +		private int holdability = ResultSet.CLOSE_CURSORS_AT_COMMIT;, +, +				else if (method.getName().equals("getAutoCommit")) {, +					if (this.autoCommit != null) {, +						return this.autoCommit;, +					// Else fetch actual Connection and check there,, +					// because we didn't have a default specified., +				}, +				else if (method.getName().equals("setAutoCommit")) {, +					this.autoCommit = (Boolean) args[0];, +				else if (method.getName().equals("isReadOnly")) {, +					return this.readOnly;, +				else if (method.getName().equals("setReadOnly")) {, +					this.readOnly = (Boolean) args[0];, +					return null;, +				else if (method.getName().equals("getHoldability")) {, +					return this.holdability;, +				}, +				else if (method.getName().equals("setHoldability")) {, +					this.holdability = (Integer) args[0];, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/SimpleConnectionHandle.java, + * Copyright 2002-2018 the original author or authors., +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/ConnectionHandle.java, + * Copyright 2002-2018 the original author or authors., +@FunctionalInterface, +	 * <p>The default implementation is empty, assuming that the lifecycle, +	 * of the connection is managed externally., +	default void releaseConnection(Connection con) {, +	}, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/LazyConnectionDataSourceProxy.java, +import java.sql.ResultSet;, +		private boolean readOnly = false;, +, +		private int holdability = ResultSet.CLOSE_CURSORS_AT_COMMIT;, +, +				else if (method.getName().equals("getAutoCommit")) {, +					if (this.autoCommit != null) {, +						return this.autoCommit;, +					// Else fetch actual Connection and check there,, +					// because we didn't have a default specified., +				}, +				else if (method.getName().equals("setAutoCommit")) {, +					this.autoCommit = (Boolean) args[0];, +				else if (method.getName().equals("isReadOnly")) {, +					return this.readOnly;, +				else if (method.getName().equals("setReadOnly")) {, +					this.readOnly = (Boolean) args[0];, +					return null;, +				else if (method.getName().equals("getHoldability")) {, +					return this.holdability;, +				}]