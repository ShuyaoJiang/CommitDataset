[+++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/request/MockAsyncContext.java, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +	private final HttpServletRequest request;, +	private final HttpServletResponse response;, +		this.request = (HttpServletRequest) request;, +		this.response = (HttpServletResponse) response;, +		dispatch(this.request.getRequestURI());, +				throw new IllegalStateException("AsyncListener failure", e);, +++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/request/MockAsyncContext.java, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +	private final HttpServletRequest request;, +	private final HttpServletResponse response;, +		this.request = (HttpServletRequest) request;, +		this.response = (HttpServletResponse) response;, +		dispatch(this.request.getRequestURI());, +				throw new IllegalStateException("AsyncListener failure", e);, +++ b/spring-web/src/test/java/org/springframework/mock/web/MockAsyncContext.java, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +	private final HttpServletRequest request;, +	private final HttpServletResponse response;, +	private String dispatchedPath;, +	private long timeout = 10 * 1000L;	// 10 seconds is Tomcat's default, +, +		this.request = (HttpServletRequest) request;, +		this.response = (HttpServletResponse) response;, +		return (this.request instanceof MockHttpServletRequest) && (this.response instanceof MockHttpServletResponse);, +	public String getDispatchedPath() {, +		return this.dispatchedPath;, +		dispatch(this.request.getRequestURI());, +		this.dispatchedPath = path;, +		MockHttpServletRequest mockRequest = WebUtils.getNativeRequest(request, MockHttpServletRequest.class);, +		if (mockRequest != null) {, +			mockRequest.setAsyncStarted(false);, +	public void start(Runnable runnable) {, +		runnable.run();, +++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/request/MockAsyncContext.java, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +	private final HttpServletRequest request;, +	private final HttpServletResponse response;, +		this.request = (HttpServletRequest) request;, +		this.response = (HttpServletResponse) response;, +		dispatch(this.request.getRequestURI());, +				throw new IllegalStateException("AsyncListener failure", e);, +++ b/spring-web/src/test/java/org/springframework/mock/web/MockAsyncContext.java, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +	private final HttpServletRequest request;, +	private final HttpServletResponse response;, +	private String dispatchedPath;, +	private long timeout = 10 * 1000L;	// 10 seconds is Tomcat's default, +, +		this.request = (HttpServletRequest) request;, +		this.response = (HttpServletResponse) response;, +		return (this.request instanceof MockHttpServletRequest) && (this.response instanceof MockHttpServletResponse);, +	public String getDispatchedPath() {, +		return this.dispatchedPath;, +		dispatch(this.request.getRequestURI());, +		this.dispatchedPath = path;, +		MockHttpServletRequest mockRequest = WebUtils.getNativeRequest(request, MockHttpServletRequest.class);, +		if (mockRequest != null) {, +			mockRequest.setAsyncStarted(false);, +	public void start(Runnable runnable) {, +		runnable.run();, +++ b/spring-web/src/test/java/org/springframework/web/context/request/async/WebAsyncManagerTimeoutTests.java, +import org.springframework.mock.web.MockAsyncContext;, +		this.servletRequest = new MockHttpServletRequest("GET", "/test");, +		assertEquals("/test", ((MockAsyncContext) this.servletRequest.getAsyncContext()).getDispatchedPath());, +		assertEquals("/test", ((MockAsyncContext) this.servletRequest.getAsyncContext()).getDispatchedPath());, +		assertEquals("/test", ((MockAsyncContext) this.servletRequest.getAsyncContext()).getDispatchedPath());, +		assertEquals("/test", ((MockAsyncContext) this.servletRequest.getAsyncContext()).getDispatchedPath());, +		assertEquals("/test", ((MockAsyncContext) this.servletRequest.getAsyncContext()).getDispatchedPath());, +++ b/spring-test-mvc/src/main/java/org/springframework/test/web/servlet/request/MockAsyncContext.java, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +	private final HttpServletRequest request;, +	private final HttpServletResponse response;, +		this.request = (HttpServletRequest) request;, +		this.response = (HttpServletResponse) response;, +		dispatch(this.request.getRequestURI());, +				throw new IllegalStateException("AsyncListener failure", e);, +++ b/spring-web/src/test/java/org/springframework/mock/web/MockAsyncContext.java, +import javax.servlet.http.HttpServletRequest;, +import javax.servlet.http.HttpServletResponse;, +	private final HttpServletRequest request;, +	private final HttpServletResponse response;, +	private String dispatchedPath;, +	private long timeout = 10 * 1000L;	// 10 seconds is Tomcat's default, +, +		this.request = (HttpServletRequest) request;, +		this.response = (HttpServletResponse) response;, +		return (this.request instanceof MockHttpServletRequest) && (this.response instanceof MockHttpServletResponse);, +	public String getDispatchedPath() {, +		return this.dispatchedPath;, +		dispatch(this.request.getRequestURI());, +		this.dispatchedPath = path;, +		MockHttpServletRequest mockRequest = WebUtils.getNativeRequest(request, MockHttpServletRequest.class);]