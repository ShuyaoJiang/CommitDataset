[+++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ModelFactory.java, + * Copyright 2002-2014 the original author or authors., + * invocation and to update it afterwards., + *, + * <p>On initialization, the model is populated with attributes from the session, + * and by invoking methods annotated with {@code @ModelAttribute}., + *, + * <p>On update, model attributes are synchronized with the session and also, + * {@link BindingResult} attributes are added where missing., +	private final List<InvocableHandlerMethod> handlerMethods;, +	private final WebDataBinderFactory dataBinderFactory;, +, +	 * @param handlerMethods the {@code @ModelAttribute} methods to invoke, +	 * @param dataBinderFactory for preparation of {@link BindingResult} attributes, +	public ModelFactory(List<InvocableHandlerMethod> handlerMethods, WebDataBinderFactory dataBinderFactory,, +, +		this.handlerMethods = (handlerMethods != null) ? handlerMethods : new ArrayList<InvocableHandlerMethod>();, +		this.dataBinderFactory = dataBinderFactory;, +	 * 	<li>Retrieve "known" session attributes listed as {@code @SessionAttributes}., +	 * 	<li>Invoke {@code @ModelAttribute} methods, +	 * 	<li>Find {@code @ModelAttribute} method arguments also listed as, +	 * 	{@code @SessionAttributes} and ensure they're present in the model raising, +	 * 	an exception if necessary., +	 * @param mavContainer a container with the model to be initialized, +		Map<String, ?> sessionAttributes = this.sessionAttributesHandler.retrieveAttributes(request);, +		mavContainer.mergeAttributes(sessionAttributes);, +	 * Invoke model attribute methods to populate the model., +	 * Attributes are added only if not already present in the model., +		for (InvocableHandlerMethod attrMethod : this.handlerMethods) {, +	 * Find {@code @ModelAttribute} arguments also listed as {@code @SessionAttributes}., +		for (MethodParameter parameter : handlerMethod.getMethodParameters()) {, +			if (parameter.hasParameterAnnotation(ModelAttribute.class)) {, +				String name = getNameForParameter(parameter);, +				if (this.sessionAttributesHandler.isHandlerSessionAttribute(name, parameter.getParameterType())) {, +	 * Derive the model attribute name for the given return value using one of:, +	 * <ol>, +	 * 	<li>The method {@code ModelAttribute} annotation value, +	 * 	<li>The declared return type if it is more specific than {@code Object}, +	 * 	<li>The actual return value type, +	 * </ol>, +	 * @param returnValue the value returned from a method invocation, +	 * @param returnType the return type of the method, +	 * @return the model name, never {@code null} nor empty, +	 */, +	public static String getNameForReturnValue(Object returnValue, MethodParameter returnType) {, +		ModelAttribute annotation = returnType.getMethodAnnotation(ModelAttribute.class);, +		if (annotation != null && StringUtils.hasText(annotation.value())) {, +			return annotation.value();, +		}, +		else {, +			Method method = returnType.getMethod();, +			Class<?> resolvedType = GenericTypeResolver.resolveReturnType(method, returnType.getContainingClass());, +			return Conventions.getVariableNameForReturnType(method, resolvedType, returnValue);, +		}, +	}, +, +	/**, +	 * Promote model attributes listed as {@code @SessionAttributes} to the session., +	 * Add {@link BindingResult} attributes where necessary., +					WebDataBinder dataBinder = dataBinderFactory.createBinder(request, value, name);]