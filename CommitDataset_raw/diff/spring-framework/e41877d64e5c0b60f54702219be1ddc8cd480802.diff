[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java, +		return fromMethod(builder, info.getControllerType(), info.getControllerMethod(), info.getArgumentValues());, +		return fromMethod(baseUrl, method.getDeclaringClass(), method, args);, +	}, +	, +	private static UriComponentsBuilder fromMethod(UriComponentsBuilder baseUrl, Class<?> controllerType, Method method, Object... args) {, +		String typePath = getTypeRequestMapping(controllerType);, +		return initProxy(controllerType, new ControllerMethodInvocationInterceptor(controllerType));, +		private static final Method getControllerType =, +				ReflectionUtils.findMethod(MethodInvocationInfo.class, "getControllerType");, +, +		private Class<?> controllerType;, +, +		ControllerMethodInvocationInterceptor(Class<?> controllerType) {, +			this.controllerType = controllerType;, +		}, +			else if (getControllerType.equals(method)) {, +				return this.controllerType;, +			}, +, +		Class<?> getControllerType();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java, +		return fromMethod(builder, info.getControllerType(), info.getControllerMethod(), info.getArgumentValues());, +		return fromMethod(baseUrl, method.getDeclaringClass(), method, args);, +	}, +	, +	private static UriComponentsBuilder fromMethod(UriComponentsBuilder baseUrl, Class<?> controllerType, Method method, Object... args) {, +		String typePath = getTypeRequestMapping(controllerType);, +		return initProxy(controllerType, new ControllerMethodInvocationInterceptor(controllerType));, +		private static final Method getControllerType =, +				ReflectionUtils.findMethod(MethodInvocationInfo.class, "getControllerType");, +, +		private Class<?> controllerType;, +, +		ControllerMethodInvocationInterceptor(Class<?> controllerType) {, +			this.controllerType = controllerType;, +		}, +			else if (getControllerType.equals(method)) {, +				return this.controllerType;, +			}, +, +		Class<?> getControllerType();, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilderTests.java, +	public void testFromMethodCallOnSubclass() {, +		UriComponents uriComponents = fromMethodCall(on(ExtendedController.class).myMethod(null)).build();, +, +		assertThat(uriComponents.toUriString(), startsWith("http://localhost"));, +		assertThat(uriComponents.toUriString(), endsWith("/extended/else"));, +	}, + , +	@Test, +	@RequestMapping("/extended"), +	static class ExtendedController extends ControllerWithMethods {, +, +	}, +	]