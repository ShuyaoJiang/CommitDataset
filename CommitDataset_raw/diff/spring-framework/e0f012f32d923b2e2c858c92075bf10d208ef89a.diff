[+++ b/spring-beans/src/test/java/org/springframework/beans/ExtendedBeanInfoTests.java, + * Copyright 2002-2015 the original author or authors., +		assertThat(hasIndexedWriteMethodForProperty(bi, "foo"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(bi, "foos"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(bi, "foos"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(bi, "foos"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(ebi, "dateFormat"), is(false));, +++ b/spring-beans/src/test/java/org/springframework/beans/ExtendedBeanInfoTests.java, + * Copyright 2002-2015 the original author or authors., +		assertThat(hasIndexedWriteMethodForProperty(bi, "foo"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(bi, "foos"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(bi, "foos"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(bi, "foos"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(ebi, "dateFormat"), is(false));, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/serviceloader/ServiceLoaderTests.java, + * Copyright 2002-2015 the original author or authors., +		if (!ServiceLoader.load(DocumentBuilderFactory.class).iterator().hasNext()){, +		if (!ServiceLoader.load(DocumentBuilderFactory.class).iterator().hasNext()){, +		if (!ServiceLoader.load(DocumentBuilderFactory.class).iterator().hasNext()){, +++ b/spring-beans/src/test/java/org/springframework/beans/ExtendedBeanInfoTests.java, + * Copyright 2002-2015 the original author or authors., +		assertThat(hasIndexedWriteMethodForProperty(bi, "foo"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(bi, "foos"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(bi, "foos"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(bi, "foos"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(ebi, "dateFormat"), is(false));, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/serviceloader/ServiceLoaderTests.java, + * Copyright 2002-2015 the original author or authors., +		if (!ServiceLoader.load(DocumentBuilderFactory.class).iterator().hasNext()){, +		if (!ServiceLoader.load(DocumentBuilderFactory.class).iterator().hasNext()){, +		if (!ServiceLoader.load(DocumentBuilderFactory.class).iterator().hasNext()){, +++ b/spring-beans/src/test/java/org/springframework/beans/propertyeditors/BeanInfoTests.java, + * Copyright 2002-2015 the original author or authors., +import org.junit.Test;, +import static org.junit.Assert.*;, +, +public class BeanInfoTests {, +	@Test, +			Assert.isTrue(this.target instanceof ValueBean, "Target must be available");, +++ b/spring-beans/src/test/java/org/springframework/beans/ExtendedBeanInfoTests.java, + * Copyright 2002-2015 the original author or authors., +		assertThat(hasIndexedWriteMethodForProperty(bi, "foo"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(bi, "foos"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(bi, "foos"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(bi, "foos"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(ebi, "dateFormat"), is(false));, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/serviceloader/ServiceLoaderTests.java, + * Copyright 2002-2015 the original author or authors., +		if (!ServiceLoader.load(DocumentBuilderFactory.class).iterator().hasNext()){, +		if (!ServiceLoader.load(DocumentBuilderFactory.class).iterator().hasNext()){, +		if (!ServiceLoader.load(DocumentBuilderFactory.class).iterator().hasNext()){, +++ b/spring-beans/src/test/java/org/springframework/beans/propertyeditors/BeanInfoTests.java, + * Copyright 2002-2015 the original author or authors., +import org.junit.Test;, +import static org.junit.Assert.*;, +, +public class BeanInfoTests {, +	@Test, +			Assert.isTrue(this.target instanceof ValueBean, "Target must be available");, +++ b/spring-context/src/test/java/org/springframework/jmx/export/annotation/JmxUtilsAnnotationTests.java, + * Copyright 2002-2015 the original author or authors., +import org.junit.Test;, +import static org.junit.Assert.*;, +, +public class JmxUtilsAnnotationTests {, +	@Test, +		@Test, +	public interface FooNotMXBean {, +	public interface FooIfc {, +++ b/spring-beans/src/test/java/org/springframework/beans/ExtendedBeanInfoTests.java, + * Copyright 2002-2015 the original author or authors., +		assertThat(hasIndexedWriteMethodForProperty(bi, "foo"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(bi, "foos"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(bi, "foos"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(bi, "foos"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(bi, "dateFormat"), is(false));, +		assertThat(hasIndexedWriteMethodForProperty(ebi, "dateFormat"), is(false));, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/serviceloader/ServiceLoaderTests.java, + * Copyright 2002-2015 the original author or authors., +		if (!ServiceLoader.load(DocumentBuilderFactory.class).iterator().hasNext()){, +		if (!ServiceLoader.load(DocumentBuilderFactory.class).iterator().hasNext()){, +		if (!ServiceLoader.load(DocumentBuilderFactory.class).iterator().hasNext()){, +++ b/spring-beans/src/test/java/org/springframework/beans/propertyeditors/BeanInfoTests.java, + * Copyright 2002-2015 the original author or authors., +import org.junit.Test;, +import static org.junit.Assert.*;, +, +public class BeanInfoTests {, +	@Test, +			Assert.isTrue(this.target instanceof ValueBean, "Target must be available");, +++ b/spring-context/src/test/java/org/springframework/jmx/export/annotation/JmxUtilsAnnotationTests.java]