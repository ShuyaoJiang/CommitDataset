[+++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +	private static final String CONTENT_TYPE_HEADER = "Content-Type";, +, +	private static final String HOST_HEADER = "Host";, +, +	private static final String CHARSET_PREFIX = "charset=";, +, +	private static final TimeZone GMT = TimeZone.getTimeZone("GMT");, +, +	private static final ServletInputStream EMPTY_SERVLET_INPUT_STREAM =, +			new DelegatingServletInputStream(StreamUtils.emptyInput());, +, +	private static final BufferedReader EMPTY_BUFFERED_READER =, +			new BufferedReader(new StringReader(""));, +, +	 * Date formats as specified in the HTTP RFC, +	 * @see <a href="https://tools.ietf.org/html/rfc7231#section-7.1.1.1">Section 7.1.1.1 of RFC 7231</a>, +	private static final String[] DATE_FORMATS = new String[] {, +			"EEE, dd MMM yyyy HH:mm:ss zzz",, +			"EEE, dd-MMM-yy HH:mm:ss zzz",, +			"EEE MMM dd HH:mm:ss yyyy", +	};, +, +, +	// ---------------------------------------------------------------------, +	// Public constants, +	// ---------------------------------------------------------------------, +, +	/**, +	 * The default protocol: 'HTTP/1.1'., +	 * @since 4.3.7, +	 */, +	public static final String DEFAULT_PROTOCOL = "HTTP/1.1";, +, +	/**, +	 * The default scheme: 'http'., +	 * @since 4.3.7, +	 */, +	public static final String DEFAULT_SCHEME = HTTP;, +	// ---------------------------------------------------------------------, +	// Lifecycle properties, +	// ---------------------------------------------------------------------, +	private final ServletContext servletContext;, +	private String scheme = DEFAULT_SCHEME;, +		if (this.serverPort > 0 && ((HTTP.equalsIgnoreCase(this.scheme) && this.serverPort != 80) ||, +				(HTTPS.equalsIgnoreCase(this.scheme) && this.serverPort != 443))) {, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +	private static final String CONTENT_TYPE_HEADER = "Content-Type";, +, +	private static final String HOST_HEADER = "Host";, +, +	private static final String CHARSET_PREFIX = "charset=";, +, +	private static final TimeZone GMT = TimeZone.getTimeZone("GMT");, +, +	private static final ServletInputStream EMPTY_SERVLET_INPUT_STREAM =, +			new DelegatingServletInputStream(StreamUtils.emptyInput());, +, +	private static final BufferedReader EMPTY_BUFFERED_READER =, +			new BufferedReader(new StringReader(""));, +, +	 * Date formats as specified in the HTTP RFC, +	 * @see <a href="https://tools.ietf.org/html/rfc7231#section-7.1.1.1">Section 7.1.1.1 of RFC 7231</a>, +	private static final String[] DATE_FORMATS = new String[] {, +			"EEE, dd MMM yyyy HH:mm:ss zzz",, +			"EEE, dd-MMM-yy HH:mm:ss zzz",, +			"EEE MMM dd HH:mm:ss yyyy", +	};, +, +, +	// ---------------------------------------------------------------------, +	// Public constants, +	// ---------------------------------------------------------------------, +, +	/**, +	 * The default protocol: 'HTTP/1.1'., +	 * @since 4.3.7, +	 */, +	public static final String DEFAULT_PROTOCOL = "HTTP/1.1";, +, +	/**, +	 * The default scheme: 'http'., +	 * @since 4.3.7, +	 */, +	public static final String DEFAULT_SCHEME = HTTP;, +	// ---------------------------------------------------------------------, +	// Lifecycle properties, +	// ---------------------------------------------------------------------, +	private final ServletContext servletContext;, +	private String scheme = DEFAULT_SCHEME;, +		if (this.serverPort > 0 && ((HTTP.equalsIgnoreCase(this.scheme) && this.serverPort != 80) ||, +				(HTTPS.equalsIgnoreCase(this.scheme) && this.serverPort != 443))) {, +++ b/spring-test/src/test/java/org/springframework/mock/web/MockHttpServletRequestTests.java, + * Copyright 2002-2017 the original author or authors., +	public void protocolAndScheme() {, +		assertEquals(MockHttpServletRequest.DEFAULT_PROTOCOL, request.getProtocol());, +		assertEquals(MockHttpServletRequest.DEFAULT_SCHEME, request.getScheme());, +		request.setProtocol("HTTP/2.0");, +		request.setScheme("https");, +		assertEquals("HTTP/2.0", request.getProtocol());]