[+++ b/spring-framework-reference/src/orm.xml, +    JDO, iBATIS SQL Maps</emphasis> and <emphasis>JPA</emphasis>: in terms of, +    resource management, DAO implementation support, and transaction, +    strategies. For example for Hibernate, there is first-class support with, +    lots of IoC convenience features, addressing many typical Hibernate, +    integration issues. All of these support packages for O/R (Object, +    Relational) mappers comply with Spring's generic transaction and DAO, +    exception hierarchies. There are usually two integration styles: either, +    using Spring's DAO 'templates' or coding DAOs against plain, +    Hibernate/JDO/JPA/etc APIs. In both cases, DAOs can be configured through, +    Dependency Injection and participate in Spring's resource and transaction, +    management.</para>, +    Hibernate, and JPA. PetClinic can therefore serve as working sample app, +    that illustrates the use of Hibernate and JPA in a Spring web application., +    It also leverages declarative transaction demarcation with different, +    transaction strategies.</para>, +      underlying JDBC <interfacename>Connection</interfacename>. This is the, +      case for JDBC-based JDO 2.0 implementations by default.</para>, +      on its operations and how they are used within Spring's JDO, +      support.</para>, +        <para>A typical <literal>persistence.xml</literal> file looks as, +        follows:</para>, +  &lt;persistence-unit name="myUnit" transaction-type="RESOURCE_LOCAL"&gt;, +    &lt;mapping-file&gt;META-INF/orm.xml&lt;/mapping-file&gt;, +&lt;/persistence&gt;</programlisting>, +        indicates that NO scanning for annotated entity classes is supposed to, +        happen, in order to support the, +        <literal>&lt;exclude-unlisted-classes/&gt;</literal> shortcut. This is, +        in line with the JPA specification (which suggests that shortcut) but, +        unfortunately in conflict with the JPA XSD (which implies "false" for, +        that shortcut). As a consequence,, +        "<literal>&lt;exclude-unlisted-classes&gt; false, +        &lt;/exclude-unlisted-classes/&gt;</literal>" is not supported! Simply, +        omit the "exclude-unlisted-classes" element if you would like entity, +        class scanning to actually happen.</emphasis></para>, +        applied only <emphasis>per ClassLoader</emphasis> and not per, +        VM.</para>, +        entitled <xref linkend="aop-aj-ltw-spring" /> for details on how to, +        set up general load-time weaving, covering Tomcat and the VM agent as, +        well as WebLogic, OC4J, GlassFish and Resin.</para>, +          <para><ulink url="http://tomcat.apache.org/">Apache Tomcat's</ulink>, +          default ClassLoader does not support class transformation but allows, +          custom ClassLoaders to be used. Spring offers the, +          <classname>TomcatInstrumentableClassLoader</classname> (inside the, +                <literal>false</literal> to fix the problem: <programlisting, +                language="xml">&lt;Context path="/myWebApp" docBase="/my/webApp/location"&gt;, +            <para>If TopLink Essentials is being used a JPA provider under, +            Tomcat, please place the toplink-essentials jar under, +          <para>Since Spring 2.5, a context-wide, +          <interfacename>LoadTimeWeaver</interfacename> can be configured, +          using the <literal>context:load-time-weaver</literal> configuration, +          <classname>LocalContainerEntityManagerFactoryBeans</classname>, +          automatically.</para>, +          <para>This is the preferred way of setting up a load-time weaver,, +          delivering autodetection of the platform (WebLogic, OC4J, GlassFish,, +          Tomcat, Resin, VM agent) as well as automatic propagation of the, +          weaver to all weaver-aware beans.</para>, +          for details on how to set up general load-time weaving, covering, +          Tomcat and the VM agent as well as WebLogic, OC4J, GlassFish and, +          Resin.</para>, +        declaratively through its properties (which affect, +        <emphasis>all</emphasis> hosted units) or programmatically, through, +        the <interfacename>PersistenceUnitPostProcessor</interfacename> (which, +        allows persistence unit selection). If no, +        <interfacename>PersistenceUnitManager</interfacename> is specified,, +        one will be created and used internally by, +        <para>On the Java EE 5 platform, they are used for dependency, +        declaration and not for resource injection.</para>]