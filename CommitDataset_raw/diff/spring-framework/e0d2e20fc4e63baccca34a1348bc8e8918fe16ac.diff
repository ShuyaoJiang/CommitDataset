[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/RequestPartMethodArgumentResolver.java, +import org.springframework.web.multipart.MultipartFile;, +		if (MultipartFile.class.isAssignableFrom(parameter.getParameterType())) {, +			return multipartRequest.getFile(partName);, +		}, +		HttpInputMessage inputMessage = new RequestPartServletServerHttpRequest(multipartRequest, partName);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/support/RequestPartMethodArgumentResolver.java, +import org.springframework.web.multipart.MultipartFile;, +		if (MultipartFile.class.isAssignableFrom(parameter.getParameterType())) {, +			return multipartRequest.getFile(partName);, +		}, +		HttpInputMessage inputMessage = new RequestPartServletServerHttpRequest(multipartRequest, partName);, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/support/RequestPartMethodArgumentResolverTests.java, +import static org.junit.Assert.*;, +	private MethodParameter paramMultipartFile;, +		Method handle = getClass().getMethod("handle", , +				SimpleBean.class, SimpleBean.class, SimpleBean.class, MultipartFile.class, Integer.TYPE);, +		paramMultipartFile = new MethodParameter(handle, 3);, +		paramInt = new MethodParameter(handle, 4);, +	public void resolveMultipartFile() throws Exception {, +		Object actual = resolver.resolveArgument(paramMultipartFile, null, webRequest, null);, +		assertNotNull(actual);, +		assertSame(multipartFile, actual);, +	}, +	, +	@Test, +					   @RequestPart("requestPart") MultipartFile multipartFile,]