[+++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java, +				ContextConfiguration contextConfiguration = clazz.getAnnotation(annotationType);, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java, +				ContextConfiguration contextConfiguration = clazz.getAnnotation(annotationType);, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ResourceTypeAwareContextLoader.java, + * <p>TODO Document how classes are converted into String[] locations, + * and passed into the corresponding methods in the ContextLoader API., + * , +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java, +				ContextConfiguration contextConfiguration = clazz.getAnnotation(annotationType);, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ResourceTypeAwareContextLoader.java, + * <p>TODO Document how classes are converted into String[] locations, + * and passed into the corresponding methods in the ContextLoader API., + * , +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/AbstractGenericContextLoader.java, + * {@link #loadContext loadContext()}., + * <p>Concrete subclasses must provide an appropriate implementation of, + * {@link #createBeanDefinitionReader createBeanDefinitionReader()},, + * potentially overriding {@link #loadBeanDefinitions loadBeanDefinitions()}, + * in addition., + * @see #loadContext, +	 * <li>Creates a {@link GenericApplicationContext} instance.</li>, +		GenericApplicationContext context = new GenericApplicationContext();, +	 * {@link #createBeanDefinitionReader}. Alternatively subclasses may, +	 * provide a <em>no-op</em> implementation of {@link #createBeanDefinitionReader}, +	 * and override this method to provide a custom strategy for loading or, +	 * registering bean definitions., +	 * loading bean definitions into the supplied {@link GenericApplicationContext context}., +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ContextLoaderUtils.java, +				ContextConfiguration contextConfiguration = clazz.getAnnotation(annotationType);, +++ b/org.springframework.test/src/main/java/org/springframework/test/context/ResourceTypeAwareContextLoader.java, + * <p>TODO Document how classes are converted into String[] locations, + * and passed into the corresponding methods in the ContextLoader API., + * , +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/AbstractGenericContextLoader.java, + * {@link #loadContext loadContext()}., + * <p>Concrete subclasses must provide an appropriate implementation of, + * {@link #createBeanDefinitionReader createBeanDefinitionReader()},, + * potentially overriding {@link #loadBeanDefinitions loadBeanDefinitions()}, + * in addition., + * @see #loadContext, +	 * <li>Creates a {@link GenericApplicationContext} instance.</li>, +		GenericApplicationContext context = new GenericApplicationContext();, +	 * {@link #createBeanDefinitionReader}. Alternatively subclasses may, +	 * provide a <em>no-op</em> implementation of {@link #createBeanDefinitionReader}, +	 * and override this method to provide a custom strategy for loading or, +	 * registering bean definitions., +	 * loading bean definitions into the supplied {@link GenericApplicationContext context}., +++ b/org.springframework.test/src/main/java/org/springframework/test/context/support/AnnotationConfigContextLoader.java, +import org.springframework.context.annotation.AnnotatedBeanDefinitionReader;, + * registers bean definitions from, +	 * in the supplied {@link GenericApplicationContext context} from the specified, +	 * annotated configuration class, component, or feature specification. An, +	 * {@link AnnotatedBeanDefinitionReader} is used to register the appropriate, +	 * bean definitions., +	 * <p>Note that this method does not call {@link #createBeanDefinitionReader}, +	 * since <code>AnnotatedBeanDefinitionReader</code> is not an instance of, +	 * {@link BeanDefinitionReader}., +	 * , +	 * @throws IllegalArgumentException if a supplied class name does not represent a class, +				configClasses[i] = (Class<?>) context.getClassLoader().loadClass(className);, +		new AnnotatedBeanDefinitionReader(context).register(configClasses);]