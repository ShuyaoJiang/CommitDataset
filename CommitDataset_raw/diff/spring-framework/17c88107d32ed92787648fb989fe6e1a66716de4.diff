[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/PropertyAccessor.java, + * If the cost of locating the property is expensive, in relation to actually retrieving its value, consider extending, + * CacheablePropertyAccessor rather than directly implementing PropertyAccessor. A CacheablePropertyAccessor enables the, + * discovery (resolution) of the property to be done once and then an object (an executor) returned and cached by the, + * infrastructure that can be used repeatedly to retrieve the property value., +++ b/org.springframework.expression/src/main/java/org/springframework/expression/PropertyAccessor.java, + * If the cost of locating the property is expensive, in relation to actually retrieving its value, consider extending, + * CacheablePropertyAccessor rather than directly implementing PropertyAccessor. A CacheablePropertyAccessor enables the, + * discovery (resolution) of the property to be done once and then an object (an executor) returned and cached by the, + * infrastructure that can be used repeatedly to retrieve the property value., +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/generated/SpringExpressions.g, +    parenExpr, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/PropertyAccessor.java, + * If the cost of locating the property is expensive, in relation to actually retrieving its value, consider extending, + * CacheablePropertyAccessor rather than directly implementing PropertyAccessor. A CacheablePropertyAccessor enables the, + * discovery (resolution) of the property to be done once and then an object (an executor) returned and cached by the, + * infrastructure that can be used repeatedly to retrieve the property value., +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/generated/SpringExpressions.g, +    parenExpr, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/generated/SpringExpressions.tokens, +GREATER_THAN_OR_EQUAL=78, +SELECT_FIRST=57, +COMMA=50, +GREATER_THAN=77, +TYPE=59, +MINUS=40, +SELECT_LAST=58, +LESS_THAN=75, +BANG=45, +FALSE=69, +LBRACKET=52, +MOD=43, +NULL_LITERAL=65, +OR=37, +PIPE=61, +DOT=46, +RCURLY=55, +AND=38, +LCURLY=62, +STRING_LITERAL=63, +SELECT=56, +RBRACKET=53, +ASSIGN=31, +BETWEEN=81, +RPAREN=36, +LPAREN=35, +HEX_DIGIT=72, +PLUS=39, +AT=51, +ID=48, +NOT_EQUAL=74, +POWER=44, +DECIMAL_DIGIT=70, +IS=80, +DOLLAR=49, +LESS_THAN_OR_EQUAL=76, +SEMIRPAREN=30, +DQ_STRING_LITERAL=64, +HEXADECIMAL_INTEGER_LITERAL=66, +LAMBDA=60, +IN=79, +SEMI=83, +INTEGER_TYPE_SUFFIX=71, +EQUAL=73, +MATCHES=82, +QMARK=33, +PROJECT=54, +DEFAULT=32, +COLON=34, +DIV=42, +STAR=41, +REAL_LITERAL=67, +TRUE=68, +POUND=47, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/PropertyAccessor.java, + * If the cost of locating the property is expensive, in relation to actually retrieving its value, consider extending, + * CacheablePropertyAccessor rather than directly implementing PropertyAccessor. A CacheablePropertyAccessor enables the, + * discovery (resolution) of the property to be done once and then an object (an executor) returned and cached by the, + * infrastructure that can be used repeatedly to retrieve the property value., +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/generated/SpringExpressions.g, +    parenExpr, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/generated/SpringExpressions.tokens, +GREATER_THAN_OR_EQUAL=78, +SELECT_FIRST=57, +COMMA=50, +GREATER_THAN=77, +TYPE=59, +MINUS=40, +SELECT_LAST=58, +LESS_THAN=75, +BANG=45, +FALSE=69, +LBRACKET=52, +MOD=43, +NULL_LITERAL=65, +OR=37, +PIPE=61, +DOT=46, +RCURLY=55, +AND=38]