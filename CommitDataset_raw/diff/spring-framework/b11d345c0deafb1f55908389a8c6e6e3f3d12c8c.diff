[+++ b/spring-web/src/main/java/org/springframework/web/client/HttpStatusCodeException.java, + * Copyright 2002-2016 the original author or authors., + * @author Rossen Stoyanchev, +public abstract class HttpStatusCodeException extends RestClientResponseException {, +	private static final long serialVersionUID = 5696801857651587810L;, +	 * Construct a new instance with an {@link HttpStatus}., +	 * Construct a new instance with an {@link HttpStatus} and status text., +	 * Construct instance with an {@link HttpStatus}, status text, and content., +	protected HttpStatusCodeException(HttpStatus statusCode, String statusText,, +			byte[] responseBody, Charset responseCharset) {, +	 * Construct instance with an {@link HttpStatus}, status text, content, and, +	 * a response charset., +		super(statusCode.value() + " " + statusText, statusCode.value(), statusText,, +				responseHeaders, responseBody, responseCharset);, +++ b/spring-web/src/main/java/org/springframework/web/client/HttpStatusCodeException.java, + * Copyright 2002-2016 the original author or authors., + * @author Rossen Stoyanchev, +public abstract class HttpStatusCodeException extends RestClientResponseException {, +	private static final long serialVersionUID = 5696801857651587810L;, +	 * Construct a new instance with an {@link HttpStatus}., +	 * Construct a new instance with an {@link HttpStatus} and status text., +	 * Construct instance with an {@link HttpStatus}, status text, and content., +	protected HttpStatusCodeException(HttpStatus statusCode, String statusText,, +			byte[] responseBody, Charset responseCharset) {, +	 * Construct instance with an {@link HttpStatus}, status text, content, and, +	 * a response charset., +		super(statusCode.value() + " " + statusText, statusCode.value(), statusText,, +				responseHeaders, responseBody, responseCharset);, +++ b/spring-web/src/main/java/org/springframework/web/client/RestClientResponseException.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.web.client;, +, +import java.io.UnsupportedEncodingException;, +import java.nio.charset.Charset;, +, +import org.springframework.http.HttpHeaders;, +, +/**, + * Abstract base class for exceptions that contain actual HTTP response data., + *, + * @author Rossen Stoyanchev, + * @since 4.3, + */, +public abstract class RestClientResponseException extends RestClientException {, +, +	private static final long serialVersionUID = -8803556342728481792L;, +, +	private static final String DEFAULT_CHARSET = "ISO-8859-1";, +, +, +	private final int rawStatusCode;, +, +	private final String statusText;, +, +	private final byte[] responseBody;, +, +	private final HttpHeaders responseHeaders;, +, +	private final String responseCharset;, +, +, +	/**, +	 * Construct a new instance of with the given response data., +	 * @param statusCode the raw status code value, +	 * @param statusText the status text, +	 * @param responseHeaders the response headers, may be {@code null}, +	 * @param responseBody the response body content, may be {@code null}, +	 * @param responseCharset the response body charset, may be {@code null}, +	 */, +	public RestClientResponseException(String message, int statusCode, String statusText,, +			HttpHeaders responseHeaders, byte[] responseBody, Charset responseCharset) {, +, +		super(message);, +		this.rawStatusCode = statusCode;, +		this.statusText = statusText;, +		this.responseHeaders = responseHeaders;, +		this.responseBody = responseBody != null ? responseBody : new byte[0];, +		this.responseCharset = responseCharset != null ? responseCharset.name() : DEFAULT_CHARSET;, +	}, +, +, +	/**, +	 * Return the raw HTTP status code value., +	 */, +	public int getRawStatusCode() {, +		return this.rawStatusCode;]