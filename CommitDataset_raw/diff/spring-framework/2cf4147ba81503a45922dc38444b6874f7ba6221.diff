[+++ b/spring-test/src/main/java/org/springframework/test/context/ContextConfiguration.java, + * <li>A class annotated with {@link org.springframework.context.annotation.Configuration @Configuration}</li>, + * <li>Any other class that contains {@link org.springframework.context.annotation.Bean @Bean}-methods</li>, + * Consult the Javadoc for {@link org.springframework.context.annotation.Configuration @Configuration}, + * and {@link org.springframework.context.annotation.Bean @Bean} for further, + * information regarding the configuration and semantics of <em>annotated classes</em>., + * @see TestPropertySource, +++ b/spring-test/src/main/java/org/springframework/test/context/ContextConfiguration.java, + * <li>A class annotated with {@link org.springframework.context.annotation.Configuration @Configuration}</li>, + * <li>Any other class that contains {@link org.springframework.context.annotation.Bean @Bean}-methods</li>, + * Consult the Javadoc for {@link org.springframework.context.annotation.Configuration @Configuration}, + * and {@link org.springframework.context.annotation.Bean @Bean} for further, + * information regarding the configuration and semantics of <em>annotated classes</em>., + * @see TestPropertySource, +++ b/spring-test/src/main/java/org/springframework/test/context/MergedContextConfiguration.java, + * Copyright 2002-2014 the original author or authors., + * via {@link ContextConfiguration @ContextConfiguration},, + * {@link ActiveProfiles @ActiveProfiles}, and, + * {@link TestPropertySource @TestPropertySource}., + * <p>Merged context resource locations, annotated classes, active profiles,, + * property resource locations, and in-lined properties represent all declared, + * values in the test class hierarchy taking into consideration the semantics, + * of the {@link ContextConfiguration#inheritLocations},, + * {@link ActiveProfiles#inheritProfiles},, + * {@link TestPropertySource#inheritLocations}, and , + * {@link TestPropertySource#inheritProperties} flags., +	private final String[] propertySourceLocations;, +	private final String[] propertySourceProperties;, +	private static String[] processStrings(String[] array) {, +		return array == null ? EMPTY_STRING_ARRAY : array;, +	 * supplied parameters., +	 * <p>Delegates to, +	 * {@link #MergedContextConfiguration(Class, String[], Class[], Set, String[], String[], String[], ContextLoader, CacheAwareContextLoaderDelegate, MergedContextConfiguration)}., +	 * @param locations the merged context resource locations, +	 * supplied parameters., +	 * <p>Delegates to, +	 * {@link #MergedContextConfiguration(Class, String[], Class[], Set, String[], String[], String[], ContextLoader, CacheAwareContextLoaderDelegate, MergedContextConfiguration)}., +	 * @param locations the merged context resource locations, +	 * supplied parameters., +	 * <p>Delegates to, +	 * {@link #MergedContextConfiguration(Class, String[], Class[], Set, String[], String[], String[], ContextLoader, CacheAwareContextLoaderDelegate, MergedContextConfiguration)}., +	 * @param locations the merged context resource locations, +		this(testClass, locations, classes, contextInitializerClasses, activeProfiles, null, null, contextLoader,, +			cacheAwareContextLoaderDelegate, parent);, +	}, +, +	/**, +	 * Create a new {@code MergedContextConfiguration} instance for the, +	 * supplied parameters., +	 *, +	 * <p>If a {@code null} value is supplied for {@code locations},, +	 * {@code classes}, {@code activeProfiles}, {@code propertySourceLocations},, +	 * or {@code propertySourceProperties} an empty array will be stored instead., +	 * If a {@code null} value is supplied for the, +	 * {@code contextInitializerClasses} an empty set will be stored instead., +	 * Furthermore, active profiles will be sorted, and duplicate profiles, +	 * will be removed., +	 *, +	 * @param testClass the test class for which the configuration was merged, +	 * @param locations the merged context resource locations, +	 * @param classes the merged annotated classes, +	 * @param contextInitializerClasses the merged context initializer classes, +	 * @param activeProfiles the merged active bean definition profiles, +	 * @param propertySourceLocations the merged {@code PropertySource} locations, +	 * @param propertySourceProperties the merged {@code PropertySource} properties, +	 * @param contextLoader the resolved {@code ContextLoader}, +	 * @param cacheAwareContextLoaderDelegate a cache-aware context loader, +	 * delegate with which to retrieve the parent context, +	 * @param parent the parent configuration or {@code null} if there is no parent, +	 * @since 4.1, +	 */, +	public MergedContextConfiguration(, +			Class<?> testClass,, +			String[] locations,, +			Class<?>[] classes,, +			Set<Class<? extends ApplicationContextInitializer<? extends ConfigurableApplicationContext>>> contextInitializerClasses,, +			String[] activeProfiles, String[] propertySourceLocations, String[] propertySourceProperties,, +			ContextLoader contextLoader, CacheAwareContextLoaderDelegate cacheAwareContextLoaderDelegate,, +			MergedContextConfiguration parent) {, +		this.locations = processStrings(locations);, +		this.propertySourceLocations = processStrings(propertySourceLocations);, +		this.propertySourceProperties = processStrings(propertySourceProperties);, +	 * Get the merged resource locations for {@code ApplicationContext}, +	 * configuration files for the {@linkplain #getTestClass() test class}., +	 * <p>Context resource locations typically represent XML configuration, +	 * files or Groovy scripts., +	 * path-based context resource locations., +	 * either path-based context resource locations or class-based resources., +	 * Get the merged active bean definition profiles for the, +	 * {@linkplain #getTestClass() test class}., +	 * @see ActiveProfiles, +	 * Get the merged resource locations for test {@code PropertySources} for the, +	 * {@linkplain #getTestClass() test class}., +	 * @see TestPropertySource#locations, +	 * @see java.util.Properties, +	 */, +	public String[] getPropertySourceLocations() {, +		return propertySourceLocations;, +	}, +]