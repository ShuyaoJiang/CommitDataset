[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +						uniqueCandidate = (commonType == null && returnType == factoryMethod.getReturnType() ?, +								factoryMethod : null);, +		if (commonType == null) {, +			return null;, +		// Common return type found: all factory methods return same type. For a non-parameterized, +		// unique candidate, cache the full type declaration context of the target factory method., +		cachedReturnType = (uniqueCandidate != null ?, +				ResolvableType.forMethodReturnType(uniqueCandidate) : ResolvableType.forClass(commonType));, +		mbd.factoryMethodReturnType = cachedReturnType;, +		return cachedReturnType.resolve();, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +						uniqueCandidate = (commonType == null && returnType == factoryMethod.getReturnType() ?, +								factoryMethod : null);, +		if (commonType == null) {, +			return null;, +		// Common return type found: all factory methods return same type. For a non-parameterized, +		// unique candidate, cache the full type declaration context of the target factory method., +		cachedReturnType = (uniqueCandidate != null ?, +				ResolvableType.forMethodReturnType(uniqueCandidate) : ResolvableType.forClass(commonType));, +		mbd.factoryMethodReturnType = cachedReturnType;, +		return cachedReturnType.resolve();, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/support/BeanFactoryGenericsTests.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.OverridingClassLoader;, +		assertEquals(Runnable.class, bf.getType("mock"));, +		assertEquals(Runnable.class, bf.getType("mock"));, +		assertTrue(bf.isTypeMatch("mock", Runnable.class));, +		assertTrue(bf.isTypeMatch("mock", Runnable.class));, +		assertEquals(Runnable.class, bf.getType("mock"));, +		assertEquals(Runnable.class, bf.getType("mock"));, +		assertTrue(bf.isTypeMatch("mock", Runnable.class));, +		assertTrue(bf.isTypeMatch("mock", Runnable.class));, +		assertEquals(Runnable.class, bf.getType("mock"));, +		assertEquals(Runnable.class, bf.getType("mock"));, +		assertTrue(bf.isTypeMatch("mock", Runnable.class));, +		assertTrue(bf.isTypeMatch("mock", Runnable.class));, +		assertEquals(Runnable.class, bf.getType("mock"));, +		assertEquals(Runnable.class, bf.getType("mock"));, +		assertFalse(bf.isTypeMatch("mock", Runnable.class));, +		assertFalse(bf.isTypeMatch("mock", Runnable.class));, +		assertNull(bf.getType("mock"));, +		assertNull(bf.getType("mock"));, +		assertTrue(bf.isTypeMatch("mock", Runnable.class));, +		assertTrue(bf.isTypeMatch("mock", Runnable.class));, +		assertEquals(Runnable.class, bf.getType("mock"));, +		assertEquals(Runnable.class, bf.getType("mock"));, +		Map<String, Runnable> beans = bf.getBeansOfType(Runnable.class);, +		assertEquals(1, beans.size());, +	}, +, +	@Test  // SPR-16720, +	public void parameterizedInstanceFactoryMethodWithTempClassLoader() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.setTempClassLoader(new OverridingClassLoader(getClass().getClassLoader()));, +, +		RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class);, +		bf.registerBeanDefinition("mocksControl", rbd);, +, +		rbd = new RootBeanDefinition();, +		rbd.setFactoryBeanName("mocksControl");, +		rbd.setFactoryMethodName("createMock");, +		rbd.getConstructorArgumentValues().addGenericArgumentValue(Runnable.class);, +		bf.registerBeanDefinition("mock", rbd);, +, +		assertTrue(bf.isTypeMatch("mock", Runnable.class));, +		assertTrue(bf.isTypeMatch("mock", Runnable.class));, +		assertEquals(Runnable.class, bf.getType("mock"));, +		assertEquals(Runnable.class, bf.getType("mock"));]