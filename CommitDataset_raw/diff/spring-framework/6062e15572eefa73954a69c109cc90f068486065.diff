[+++ b/spring-web/src/main/java/org/springframework/web/util/WebUtils.java, + * Copyright 2002-2015 the original author or authors., +import java.util.List;, +import org.springframework.http.server.ServerHttpRequest;, + * @author Sebastien Deleuze, +, +	/**, +	 * Check the given request origin against a list of allowed origins., +	 * A list containing "*" means that all origins are allowed., +	 * An empty list means only same origin is allowed., +	 *, +	 * @return true if the request origin is valid, false otherwise, +	 * @since 4.1.5, +	 * @see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>, +	 */, +	public static boolean isValidOrigin(ServerHttpRequest request, List<String> allowedOrigins) {, +		Assert.notNull(request, "Request must not be null");, +		Assert.notNull(allowedOrigins, "Allowed origins must not be null");, +, +		String origin = request.getHeaders().getOrigin();, +		if (origin == null || allowedOrigins.contains("*")) {, +			return true;, +		}, +		else if (allowedOrigins.isEmpty()) {, +			UriComponents originComponents = UriComponentsBuilder.fromHttpUrl(origin).build();, +			UriComponents requestComponents = UriComponentsBuilder.fromHttpRequest(request).build();, +			int originPort = getPort(originComponents);, +			int requestPort = getPort(requestComponents);, +			return originComponents.getHost().equals(requestComponents.getHost()) && (originPort == requestPort);, +		}, +		else {, +			return allowedOrigins.contains(origin);, +		}, +	}, +, +	private static int getPort(UriComponents component) {, +		int port = component.getPort();, +		if (port == -1) {, +			if ("http".equals(component.getScheme())) {, +				port = 80;, +			}, +			else if ("https".equals(component.getScheme())) {, +				port = 443;, +			}, +		}, +		return port;, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/util/WebUtils.java, + * Copyright 2002-2015 the original author or authors., +import java.util.List;, +import org.springframework.http.server.ServerHttpRequest;, + * @author Sebastien Deleuze, +, +	/**, +	 * Check the given request origin against a list of allowed origins., +	 * A list containing "*" means that all origins are allowed., +	 * An empty list means only same origin is allowed., +	 *, +	 * @return true if the request origin is valid, false otherwise, +	 * @since 4.1.5, +	 * @see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>, +	 */, +	public static boolean isValidOrigin(ServerHttpRequest request, List<String> allowedOrigins) {, +		Assert.notNull(request, "Request must not be null");, +		Assert.notNull(allowedOrigins, "Allowed origins must not be null");, +, +		String origin = request.getHeaders().getOrigin();, +		if (origin == null || allowedOrigins.contains("*")) {, +			return true;, +		}, +		else if (allowedOrigins.isEmpty()) {, +			UriComponents originComponents = UriComponentsBuilder.fromHttpUrl(origin).build();, +			UriComponents requestComponents = UriComponentsBuilder.fromHttpRequest(request).build();, +			int originPort = getPort(originComponents);, +			int requestPort = getPort(requestComponents);, +			return originComponents.getHost().equals(requestComponents.getHost()) && (originPort == requestPort);, +		}, +		else {, +			return allowedOrigins.contains(origin);, +		}, +	}, +, +	private static int getPort(UriComponents component) {, +		int port = component.getPort();, +		if (port == -1) {, +			if ("http".equals(component.getScheme())) {, +				port = 80;, +			}, +			else if ("https".equals(component.getScheme())) {, +				port = 443;, +			}, +		}, +		return port;, +	}, +, +++ b/spring-web/src/test/java/org/springframework/web/util/WebUtilsTests.java, + * Copyright 2002-2015 the original author or authors., +import java.util.ArrayList;, +import java.util.List;]