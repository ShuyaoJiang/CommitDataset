[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ServerWebExchangeArgumentResolver.java, +import java.time.ZoneId;, +import java.util.Locale;, +import java.util.TimeZone;, +, +import org.springframework.context.i18n.LocaleContext;, +import org.springframework.context.i18n.TimeZoneAwareLocaleContext;, +import org.springframework.lang.Nullable;, + * <li>{@link Locale}, + * <li>{@link TimeZone}, + * <li>{@link ZoneId}, +						Locale.class == type ||, +						TimeZone.class == type ||, +						ZoneId.class == type ||, +		else if (Locale.class == paramType) {, +			return exchange.getLocaleContext().getLocale();, +		}, +		else if (TimeZone.class == paramType) {, +			LocaleContext localeContext = exchange.getLocaleContext();, +			TimeZone timeZone = getTimeZone(localeContext);, +			return timeZone != null ? timeZone : TimeZone.getDefault();, +		}, +		else if (ZoneId.class == paramType) {, +			LocaleContext localeContext = exchange.getLocaleContext();, +			TimeZone timeZone = getTimeZone(localeContext);, +			return timeZone != null ? timeZone.toZoneId() : ZoneId.systemDefault();, +		}, +	@Nullable, +	private TimeZone getTimeZone(LocaleContext localeContext) {, +		TimeZone timeZone = null;, +		if (localeContext instanceof TimeZoneAwareLocaleContext) {, +			timeZone = ((TimeZoneAwareLocaleContext) localeContext).getTimeZone();, +		}, +		return timeZone;, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ServerWebExchangeArgumentResolver.java, +import java.time.ZoneId;, +import java.util.Locale;, +import java.util.TimeZone;, +, +import org.springframework.context.i18n.LocaleContext;, +import org.springframework.context.i18n.TimeZoneAwareLocaleContext;, +import org.springframework.lang.Nullable;, + * <li>{@link Locale}, + * <li>{@link TimeZone}, + * <li>{@link ZoneId}, +						Locale.class == type ||, +						TimeZone.class == type ||, +						ZoneId.class == type ||, +		else if (Locale.class == paramType) {, +			return exchange.getLocaleContext().getLocale();, +		}, +		else if (TimeZone.class == paramType) {, +			LocaleContext localeContext = exchange.getLocaleContext();, +			TimeZone timeZone = getTimeZone(localeContext);, +			return timeZone != null ? timeZone : TimeZone.getDefault();, +		}, +		else if (ZoneId.class == paramType) {, +			LocaleContext localeContext = exchange.getLocaleContext();, +			TimeZone timeZone = getTimeZone(localeContext);, +			return timeZone != null ? timeZone.toZoneId() : ZoneId.systemDefault();, +		}, +	@Nullable, +	private TimeZone getTimeZone(LocaleContext localeContext) {, +		TimeZone timeZone = null;, +		if (localeContext instanceof TimeZoneAwareLocaleContext) {, +			timeZone = ((TimeZoneAwareLocaleContext) localeContext).getTimeZone();, +		}, +		return timeZone;, +	}, +, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/ServerWebExchangeArgumentResolverTests.java, +import java.time.ZoneId;, +import java.util.Locale;, +import java.util.TimeZone;, +, +		assertTrue(this.resolver.supportsParameter(this.testMethod.arg(Locale.class)));, +		assertTrue(this.resolver.supportsParameter(this.testMethod.arg(TimeZone.class)));, +		assertTrue(this.resolver.supportsParameter(this.testMethod.arg(ZoneId.class)));, +		testResolveArgument(this.testMethod.arg(TimeZone.class), TimeZone.getDefault());, +		testResolveArgument(this.testMethod.arg(ZoneId.class), ZoneId.systemDefault());, +	}, +, +	private void testResolveArgument(MethodParameter parameter, Object expected) {, +		Mono<Object> mono = this.resolver.resolveArgument(parameter, new BindingContext(), this.exchange);, +		assertEquals(expected, mono.block());, +			Locale locale,, +			TimeZone timeZone,, +			ZoneId zoneId,, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ServerWebExchangeArgumentResolver.java, +import java.time.ZoneId;, +import java.util.Locale;, +import java.util.TimeZone;, +, +import org.springframework.context.i18n.LocaleContext;, +import org.springframework.context.i18n.TimeZoneAwareLocaleContext;, +import org.springframework.lang.Nullable;, + * <li>{@link Locale}, + * <li>{@link TimeZone}]