[+++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, + * {@link PayloadApplicationEvent} if necessary to allow a method declaration, +	 * matches and handling a non-null result, if any., +			Object payload = ((PayloadApplicationEvent<?>) event).getPayload();, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, + * {@link PayloadApplicationEvent} if necessary to allow a method declaration, +	 * matches and handling a non-null result, if any., +			Object payload = ((PayloadApplicationEvent<?>) event).getPayload();, +++ b/spring-context/src/main/java/org/springframework/context/event/EventExpressionEvaluator.java, + * Copyright 2002-2019 the original author or authors., + * Utility class for handling SpEL expression parsing for application events., + * <p>Meant to be used as a reusable, thread-safe component., +	 * Determine if the condition defined by the specified expression evaluates, +	 * to {@code true}., +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, + * {@link PayloadApplicationEvent} if necessary to allow a method declaration, +	 * matches and handling a non-null result, if any., +			Object payload = ((PayloadApplicationEvent<?>) event).getPayload();, +++ b/spring-context/src/main/java/org/springframework/context/event/EventExpressionEvaluator.java, + * Copyright 2002-2019 the original author or authors., + * Utility class for handling SpEL expression parsing for application events., + * <p>Meant to be used as a reusable, thread-safe component., +	 * Determine if the condition defined by the specified expression evaluates, +	 * to {@code true}., +++ b/spring-context/src/main/java/org/springframework/context/event/EventListener.java, +	 * Spring Expression Language (SpEL) expression used for making the event, +	 * handling conditional., +	 * <p>The event will be handled if the expression evaluates to boolean, +	 * {@code true} or one of the following strings: {@code "true"}, {@code "on"},, +	 * {@code "yes"}, or {@code "1"}., +	 * <p>The default expression is {@code ""}, meaning the event is always handled., +	 * <p>The SpEL expression will be evaluated against a dedicated context that, +	 * provides the following metadata:, +	 * <li>Method arguments can be accessed by index. For example, the first, +	 * argument can be accessed via {@code #root.args[0]}, {@code args[0]},, +	 * {@code #a0}, or {@code #p0}.</li>, +	 * <li>Method arguments can be accessed by name (with a preceding hash tag), +	 * if parameter names are available in the compiled byte code.</li>, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, + * {@link PayloadApplicationEvent} if necessary to allow a method declaration, +	 * matches and handling a non-null result, if any., +			Object payload = ((PayloadApplicationEvent<?>) event).getPayload();, +++ b/spring-context/src/main/java/org/springframework/context/event/EventExpressionEvaluator.java, + * Copyright 2002-2019 the original author or authors., + * Utility class for handling SpEL expression parsing for application events., + * <p>Meant to be used as a reusable, thread-safe component., +	 * Determine if the condition defined by the specified expression evaluates, +	 * to {@code true}., +++ b/spring-context/src/main/java/org/springframework/context/event/EventListener.java, +	 * Spring Expression Language (SpEL) expression used for making the event, +	 * handling conditional., +	 * <p>The event will be handled if the expression evaluates to boolean, +	 * {@code true} or one of the following strings: {@code "true"}, {@code "on"},, +	 * {@code "yes"}, or {@code "1"}., +	 * <p>The default expression is {@code ""}, meaning the event is always handled., +	 * <p>The SpEL expression will be evaluated against a dedicated context that, +	 * provides the following metadata:, +	 * <li>Method arguments can be accessed by index. For example, the first, +	 * argument can be accessed via {@code #root.args[0]}, {@code args[0]},, +	 * {@code #a0}, or {@code #p0}.</li>, +	 * <li>Method arguments can be accessed by name (with a preceding hash tag), +	 * if parameter names are available in the compiled byte code.</li>, +++ b/spring-test/src/main/java/org/springframework/test/context/event/TestContextEvent.java, +	 * <p>This method may be favored over {@code getSource()} &mdash; for example,, +	 * to improve readability in SpEL expressions for event processing, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, + * {@link PayloadApplicationEvent} if necessary to allow a method declaration, +	 * matches and handling a non-null result, if any., +			Object payload = ((PayloadApplicationEvent<?>) event).getPayload();, +++ b/spring-context/src/main/java/org/springframework/context/event/EventExpressionEvaluator.java, + * Copyright 2002-2019 the original author or authors., + * Utility class for handling SpEL expression parsing for application events., + * <p>Meant to be used as a reusable, thread-safe component., +	 * Determine if the condition defined by the specified expression evaluates, +	 * to {@code true}., +++ b/spring-context/src/main/java/org/springframework/context/event/EventListener.java, +	 * Spring Expression Language (SpEL) expression used for making the event, +	 * handling conditional., +	 * <p>The event will be handled if the expression evaluates to boolean, +	 * {@code true} or one of the following strings: {@code "true"}, {@code "on"},, +	 * {@code "yes"}, or {@code "1"}., +	 * <p>The default expression is {@code ""}, meaning the event is always handled., +	 * <p>The SpEL expression will be evaluated against a dedicated context that, +	 * provides the following metadata:, +	 * <li>Method arguments can be accessed by index. For example, the first, +	 * argument can be accessed via {@code #root.args[0]}, {@code args[0]},, +	 * {@code #a0}, or {@code #p0}.</li>, +	 * <li>Method arguments can be accessed by name (with a preceding hash tag), +	 * if parameter names are available in the compiled byte code.</li>, +++ b/spring-test/src/main/java/org/springframework/test/context/event/TestContextEvent.java, +	 * <p>This method may be favored over {@code getSource()} &mdash; for example,, +	 * to improve readability in SpEL expressions for event processing, +++ b/spring-test/src/test/java/org/springframework/test/context/event/EventPublishingTestExecutionListenerIntegrationTests.java, +		@BeforeTestExecution("'yes'"), +		@AfterTestExecution("'1'")]