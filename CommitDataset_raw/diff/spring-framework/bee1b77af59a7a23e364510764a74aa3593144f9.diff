[+++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.scheduling.annotation.Async;, +		validateMethod(method);, +	private static void validateMethod(Method method) {, +		if (method.getReturnType() != void.class &&, +				AnnotationUtils.findAnnotation(method, Async.class) != null) {, +			throw new IllegalStateException(, +					"Asynchronous @EventListener method is not allowed to return reply events: " + method);, +		}, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.scheduling.annotation.Async;, +		validateMethod(method);, +	private static void validateMethod(Method method) {, +		if (method.getReturnType() != void.class &&, +				AnnotationUtils.findAnnotation(method, Async.class) != null) {, +			throw new IllegalStateException(, +					"Asynchronous @EventListener method is not allowed to return reply events: " + method);, +		}, +	}, +, +++ b/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java, +	public void asyncWithReplyEventListener() {, +		AnnotationConfigApplicationContext failingContext =, +				new AnnotationConfigApplicationContext();, +		failingContext.register(BasicConfiguration.class,, +				InvalidAsyncEventListener.class);, +, +		this.thrown.expect(BeanInitializationException.class);, +		this.thrown.expectMessage(InvalidAsyncEventListener.class.getName());, +		this.thrown.expectMessage("asyncCannotUseReply");, +		failingContext.refresh();, +	}, +, +	@Test, +	@Component, +	static class InvalidAsyncEventListener {, +, +		@EventListener, +		@Async, +		public Integer asyncCannotUseReply(String payload) {, +			return 42;, +		}, +, +	}, +, +, +++ b/spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java, +import org.springframework.core.annotation.AnnotationUtils;, +import org.springframework.scheduling.annotation.Async;, +		validateMethod(method);, +	private static void validateMethod(Method method) {, +		if (method.getReturnType() != void.class &&, +				AnnotationUtils.findAnnotation(method, Async.class) != null) {, +			throw new IllegalStateException(, +					"Asynchronous @EventListener method is not allowed to return reply events: " + method);, +		}, +	}, +, +++ b/spring-context/src/test/java/org/springframework/context/event/AnnotationDrivenEventListenerTests.java, +	public void asyncWithReplyEventListener() {, +		AnnotationConfigApplicationContext failingContext =, +				new AnnotationConfigApplicationContext();, +		failingContext.register(BasicConfiguration.class,, +				InvalidAsyncEventListener.class);, +, +		this.thrown.expect(BeanInitializationException.class);, +		this.thrown.expectMessage(InvalidAsyncEventListener.class.getName());, +		this.thrown.expectMessage("asyncCannotUseReply");, +		failingContext.refresh();, +	}, +, +	@Test, +	@Component, +	static class InvalidAsyncEventListener {, +, +		@EventListener, +		@Async, +		public Integer asyncCannotUseReply(String payload) {, +			return 42;, +		}, +, +	}, +, +, +++ b/src/asciidoc/core-beans.adoc, +NOTE: This feature is not supported for <<context-functionality-events-async,asynchronous, +listeners>>., +, +[[context-functionality-events-async]], +==== Asynchronous Listeners, +, +If you want a particular listener to process events asynchronously, simply reuse the, +<<scheduling-annotation-support-async,regular `@Async` support>>:, +, +[source,java,indent=0], +[subs="verbatim,quotes"]]