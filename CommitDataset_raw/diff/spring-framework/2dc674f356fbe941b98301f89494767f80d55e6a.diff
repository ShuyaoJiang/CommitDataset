[+++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, +/*, + * Copyright 2002-2015 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.beans;, +, +import java.beans.PropertyChangeEvent;, +import java.lang.reflect.Array;, +import java.lang.reflect.InvocationTargetException;, +import java.lang.reflect.UndeclaredThrowableException;, +import java.security.PrivilegedActionException;, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.HashMap;, +import java.util.Iterator;, +import java.util.List;, +import java.util.Map;, +import java.util.Optional;, +import java.util.Set;, +, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +import org.springframework.core.CollectionFactory;, +import org.springframework.core.ResolvableType;, +import org.springframework.core.convert.ConversionException;, +import org.springframework.core.convert.ConverterNotFoundException;, +import org.springframework.core.convert.TypeDescriptor;, +import org.springframework.lang.UsesJava8;, +import org.springframework.util.Assert;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.ObjectUtils;, +import org.springframework.util.StringUtils;, +, +/**, + * A basic {@link ConfigurablePropertyAccessor} that provides the necessary, + * infrastructure for all typical use cases., + *, + * <p>This accessor will convert collection and array values to the corresponding, + * target collections or arrays, if necessary. Custom property editors that deal, + * with collections or arrays can either be written via PropertyEditor's, + * {@code setValue}, or against a comma-delimited String via {@code setAsText},, + * as String arrays are converted in such a format if the array itself is not, + * assignable., + *, + * @author Rod Johnson, + * @author Juergen Hoeller, + * @author Rob Harrop, + * @author Stephane Nicoll, + * @since 4.2, + * @see #registerCustomEditor, + * @see #setPropertyValues, + * @see #setPropertyValue, + * @see #getPropertyValue, + * @see #getPropertyType, + * @see BeanWrapper, + * @see PropertyEditorRegistrySupport, + */, +public abstract class AbstractNestablePropertyAccessor extends AbstractPropertyAccessor {, +, +	/**, +	 * We'll create a lot of these objects, so we don't want a new logger every time., +	 */, +	private static final Log logger = LogFactory.getLog(AbstractNestablePropertyAccessor.class);, +, +	private static Class<?> javaUtilOptionalClass = null;, +, +	static {, +		try {, +			javaUtilOptionalClass =, +					ClassUtils.forName("java.util.Optional", AbstractNestablePropertyAccessor.class.getClassLoader());, +		}, +		catch (ClassNotFoundException ex) {, +			// Java 8 not available - Optional references simply not supported then., +		}, +	}, +, +	private int autoGrowCollectionLimit = Integer.MAX_VALUE;, +, +	/** The wrapped object */, +	private Object object;, +, +	private String nestedPath = "";, +, +	private Object rootObject;, +, +	/**]