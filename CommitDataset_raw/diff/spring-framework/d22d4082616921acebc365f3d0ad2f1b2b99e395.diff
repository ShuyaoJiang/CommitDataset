[+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateTransactionManager.java, +				// As of 5.1, we're also setting Hibernate's read-only entity mode by default., +				session.setDefaultReadOnly(true);, +++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateTransactionManager.java, +				// As of 5.1, we're also setting Hibernate's read-only entity mode by default., +				session.setDefaultReadOnly(true);, +++ b/spring-test/src/test/java/org/springframework/test/context/junit4/orm/HibernateSessionFlushingTests.java, +import org.hibernate.Session;, +import org.springframework.transaction.annotation.Transactional;, + * @author Juergen Hoeller, + * @author Vlad Mihalcea, +	public void setup() {, +, +	@Test  // SPR-16956, +	@Transactional(readOnly = true), +	public void findSamWithReadOnlySession() {, +		Person sam = personService.findByName(SAM);, +		sam.setName("Vlad");, +		// By setting setDefaultReadOnly(true), the user can no longer modify any entity..., +		Session session = sessionFactory.getCurrentSession();, +		session.flush();, +		session.refresh(sam);, +		assertEquals("Sam", sam.getName());, +	}, +, +		int numRows = countRowsInTable("person");, +		assertEquals("Verifying number of rows in the 'person' table.", numRows + 1, countRowsInTable("person"));, +	private void updateSamWithNullDriversLicense() {, +		Person sam = personService.findByName(SAM);, +		assertNotNull("Should be able to find Sam", sam);, +		sam.setDriversLicense(null);, +		personService.save(sam);, +	}, +]