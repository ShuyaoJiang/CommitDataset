[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/HandlerResultHandlerSupport.java, +		MediaType contentType = exchange.getResponse().getHeaders().getContentType();, +		if (contentType != null && contentType.isConcrete()) {, +			return Collections.singletonList(contentType);, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/HandlerResultHandlerSupport.java, +		MediaType contentType = exchange.getResponse().getHeaders().getContentType();, +		if (contentType != null && contentType.isConcrete()) {, +			return Collections.singletonList(contentType);, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +		MediaType bestMediaType = selectMediaType(exchange, () -> getMediaTypesFor(elementType));, +			if (getMediaTypesFor(elementType).isEmpty()) {, +				return Mono.error(new IllegalStateException("No writer for : " + elementType));, +		return Mono.error(new NotAcceptableStatusException(getMediaTypesFor(elementType)));, +	private List<MediaType> getMediaTypesFor(ResolvableType elementType) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/HandlerResultHandlerSupport.java, +		MediaType contentType = exchange.getResponse().getHeaders().getContentType();, +		if (contentType != null && contentType.isConcrete()) {, +			return Collections.singletonList(contentType);, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +		MediaType bestMediaType = selectMediaType(exchange, () -> getMediaTypesFor(elementType));, +			if (getMediaTypesFor(elementType).isEmpty()) {, +				return Mono.error(new IllegalStateException("No writer for : " + elementType));, +		return Mono.error(new NotAcceptableStatusException(getMediaTypesFor(elementType)));, +	private List<MediaType> getMediaTypesFor(ResolvableType elementType) {, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingMessageConversionIntegrationTests.java, +	@Test // SPR-16172, +	public void personResponseBodyWithMonoResponseEntityXml() throws Exception {, +, +		String actual = performGet("/person-response/mono-response-entity-xml",, +				new HttpHeaders(), String.class).getBody();, +, +		assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>" +, +				"<person><name>Robert</name></person>", actual);, +	}, +, +		@GetMapping("/mono-response-entity-xml"), +		public ResponseEntity<Mono<Person>> getMonoResponseEntityXml() {, +			Mono<Person> body = Mono.just(new Person("Robert"));, +			return ResponseEntity.ok().contentType(MediaType.APPLICATION_XML).body(body);, +		}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/HandlerResultHandlerSupport.java, +		MediaType contentType = exchange.getResponse().getHeaders().getContentType();, +		if (contentType != null && contentType.isConcrete()) {, +			return Collections.singletonList(contentType);, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +		MediaType bestMediaType = selectMediaType(exchange, () -> getMediaTypesFor(elementType));, +			if (getMediaTypesFor(elementType).isEmpty()) {, +				return Mono.error(new IllegalStateException("No writer for : " + elementType));, +		return Mono.error(new NotAcceptableStatusException(getMediaTypesFor(elementType)));, +	private List<MediaType> getMediaTypesFor(ResolvableType elementType) {, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingMessageConversionIntegrationTests.java, +	@Test // SPR-16172, +	public void personResponseBodyWithMonoResponseEntityXml() throws Exception {, +, +		String actual = performGet("/person-response/mono-response-entity-xml",, +				new HttpHeaders(), String.class).getBody();, +, +		assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>" +, +				"<person><name>Robert</name></person>", actual);, +	}, +, +		@GetMapping("/mono-response-entity-xml"), +		public ResponseEntity<Mono<Person>> getMonoResponseEntityXml() {, +			Mono<Person> body = Mono.just(new Person("Robert"));, +			return ResponseEntity.ok().contentType(MediaType.APPLICATION_XML).body(body);, +		}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +, +		MediaType contentType = outputMessage.getHeaders().getContentType();, +		List<MediaType> producibleMediaTypes = (contentType != null && contentType.isConcrete() ?, +				Collections.singletonList(contentType) : getProducibleMediaTypes(request, valueType, declaredType));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/HandlerResultHandlerSupport.java, +		MediaType contentType = exchange.getResponse().getHeaders().getContentType();, +		if (contentType != null && contentType.isConcrete()) {, +			return Collections.singletonList(contentType);, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +		MediaType bestMediaType = selectMediaType(exchange, () -> getMediaTypesFor(elementType));, +			if (getMediaTypesFor(elementType).isEmpty()) {, +				return Mono.error(new IllegalStateException("No writer for : " + elementType));, +		return Mono.error(new NotAcceptableStatusException(getMediaTypesFor(elementType)));, +	private List<MediaType> getMediaTypesFor(ResolvableType elementType) {, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/annotation/RequestMappingMessageConversionIntegrationTests.java, +	@Test // SPR-16172, +	public void personResponseBodyWithMonoResponseEntityXml() throws Exception {, +, +		String actual = performGet("/person-response/mono-response-entity-xml",, +				new HttpHeaders(), String.class).getBody();, +, +		assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>" +, +				"<person><name>Robert</name></person>", actual);, +	}, +, +		@GetMapping("/mono-response-entity-xml")]