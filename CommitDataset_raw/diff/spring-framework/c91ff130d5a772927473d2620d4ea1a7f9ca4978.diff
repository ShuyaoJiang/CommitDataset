[+++ b/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java, +import java.io.UnsupportedEncodingException;, +import java.net.URISyntaxException;, +import org.springframework.http.converter.xml.SourceHttpMessageConverter;, +import org.springframework.web.util.UriUtils;, +		UriTemplate uriTemplate = new HttpUrlTemplate(url);, +		UriTemplate uriTemplate = new HttpUrlTemplate(url);, +	/**, +	 * HTTP-specific subclass of UriTemplate, overriding the encode method., +	 */, +	private static class HttpUrlTemplate extends UriTemplate {, +, +		public HttpUrlTemplate(String uriTemplate) {, +			super(uriTemplate);, +		}, +, +		@Override, +		protected URI encodeUri(String uri) {, +			try {, +				String encoded = UriUtils.encodeHttpUrl(uri, "UTF-8");, +				return new URI(encoded);, +			}, +			catch (UnsupportedEncodingException ex) {, +				// should not happen, UTF-8 is always supported, +				throw new IllegalStateException(ex);, +			}, +			catch (URISyntaxException ex) {, +				throw new IllegalArgumentException("Could not create HTTP URL from [" + uri + "]: " + ex, ex);, +			}, +		}, +	}, +, +++ b/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java, +import java.io.UnsupportedEncodingException;, +import java.net.URISyntaxException;, +import org.springframework.http.converter.xml.SourceHttpMessageConverter;, +import org.springframework.web.util.UriUtils;, +		UriTemplate uriTemplate = new HttpUrlTemplate(url);, +		UriTemplate uriTemplate = new HttpUrlTemplate(url);, +	/**, +	 * HTTP-specific subclass of UriTemplate, overriding the encode method., +	 */, +	private static class HttpUrlTemplate extends UriTemplate {, +, +		public HttpUrlTemplate(String uriTemplate) {, +			super(uriTemplate);, +		}, +, +		@Override, +		protected URI encodeUri(String uri) {, +			try {, +				String encoded = UriUtils.encodeHttpUrl(uri, "UTF-8");, +				return new URI(encoded);, +			}, +			catch (UnsupportedEncodingException ex) {, +				// should not happen, UTF-8 is always supported, +				throw new IllegalStateException(ex);, +			}, +			catch (URISyntaxException ex) {, +				throw new IllegalArgumentException("Could not create HTTP URL from [" + uri + "]: " + ex, ex);, +			}, +		}, +	}, +, +++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriTemplate.java, +	public List<String> getVariableNames() {, +	/**, +	 * Encodes the given String as URL., +	 *, +	 * <p>Defaults to {@link UriUtils#encodeUri(String, String)}., +	 *, +	 * @param uri the URI to encode, +	 * @return the encoded URI, +	 */, +	protected URI encodeUri(String uri) {, +++ b/org.springframework.web/src/main/java/org/springframework/web/client/RestTemplate.java, +import java.io.UnsupportedEncodingException;, +import java.net.URISyntaxException;, +import org.springframework.http.converter.xml.SourceHttpMessageConverter;, +import org.springframework.web.util.UriUtils;, +		UriTemplate uriTemplate = new HttpUrlTemplate(url);, +		UriTemplate uriTemplate = new HttpUrlTemplate(url);, +	/**, +	 * HTTP-specific subclass of UriTemplate, overriding the encode method., +	 */, +	private static class HttpUrlTemplate extends UriTemplate {, +, +		public HttpUrlTemplate(String uriTemplate) {, +			super(uriTemplate);, +		}, +, +		@Override, +		protected URI encodeUri(String uri) {, +			try {, +				String encoded = UriUtils.encodeHttpUrl(uri, "UTF-8");, +				return new URI(encoded);, +			}, +			catch (UnsupportedEncodingException ex) {, +				// should not happen, UTF-8 is always supported, +				throw new IllegalStateException(ex);]