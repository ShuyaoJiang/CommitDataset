[+++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/JCacheAspectSupport.java, +, +		CacheOperationInvoker adapter = new CacheOperationInvokerAdapter(invoker);, +, +					(CacheOperationInvocationContext<CacheResultOperation>) context, adapter);, +					(CacheOperationInvocationContext<CachePutOperation>) context, adapter);, +					(CacheOperationInvocationContext<CacheRemoveOperation>) context, adapter);, +					(CacheOperationInvocationContext<CacheRemoveAllOperation>) context, adapter);, +	/**, +	 * Execute the underlying operation (typically in case of cache miss) and return, +	 * the result of the invocation. If an exception occurs it will be wrapped in, +	 * a {@link CacheOperationInvoker.ThrowableWrapper}: the exception can be handled, +	 * or modified but it <em>must</em> be wrapped in a, +	 * {@link CacheOperationInvoker.ThrowableWrapper} as well., +	 * @param invoker the invoker handling the operation being cached, +	 * @return the result of the invocation, +	 * @see CacheOperationInvoker#invoke(), +	 */, +	protected Object invokeOperation(CacheOperationInvoker invoker) {, +		return invoker.invoke();, +	}, +, +	private class CacheOperationInvokerAdapter implements CacheOperationInvoker {, +, +		private final CacheOperationInvoker delegate;, +, +		private CacheOperationInvokerAdapter(CacheOperationInvoker delegate) {this.delegate = delegate;}, +, +		@Override, +		public Object invoke() throws ThrowableWrapper {, +			return invokeOperation(delegate);, +		}, +	}, +, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/interceptor/JCacheAspectSupport.java, +, +		CacheOperationInvoker adapter = new CacheOperationInvokerAdapter(invoker);, +, +					(CacheOperationInvocationContext<CacheResultOperation>) context, adapter);, +					(CacheOperationInvocationContext<CachePutOperation>) context, adapter);, +					(CacheOperationInvocationContext<CacheRemoveOperation>) context, adapter);, +					(CacheOperationInvocationContext<CacheRemoveAllOperation>) context, adapter);, +	/**, +	 * Execute the underlying operation (typically in case of cache miss) and return, +	 * the result of the invocation. If an exception occurs it will be wrapped in, +	 * a {@link CacheOperationInvoker.ThrowableWrapper}: the exception can be handled, +	 * or modified but it <em>must</em> be wrapped in a, +	 * {@link CacheOperationInvoker.ThrowableWrapper} as well., +	 * @param invoker the invoker handling the operation being cached, +	 * @return the result of the invocation, +	 * @see CacheOperationInvoker#invoke(), +	 */, +	protected Object invokeOperation(CacheOperationInvoker invoker) {, +		return invoker.invoke();, +	}, +, +	private class CacheOperationInvokerAdapter implements CacheOperationInvoker {, +, +		private final CacheOperationInvoker delegate;, +, +		private CacheOperationInvokerAdapter(CacheOperationInvoker delegate) {this.delegate = delegate;}, +, +		@Override, +		public Object invoke() throws ThrowableWrapper {, +			return invokeOperation(delegate);, +		}, +	}, +, +++ b/spring-context-support/src/test/java/org/springframework/cache/jcache/config/JCacheCustomInterceptorTests.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.cache.jcache.config;, +, +import static org.junit.Assert.*;, +, +import java.io.IOException;, +import java.util.Arrays;, +import java.util.Map;, +, +import org.junit.After;, +import org.junit.Before;, +import org.junit.Test;, +, +import org.springframework.cache.Cache;, +import org.springframework.cache.CacheManager;, +import org.springframework.cache.annotation.EnableCaching;]