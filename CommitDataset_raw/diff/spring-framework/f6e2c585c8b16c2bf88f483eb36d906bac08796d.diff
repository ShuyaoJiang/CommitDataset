[+++ b/spring-web/src/test/java/org/springframework/web/bind/support/WebExchangeDataBinderTests.java, +		this.binder.bind(request.toExchange()).block(Duration.ofSeconds(5));, +		return MockServerHttpRequest, +				.body(generateForm(formData)), +				.toExchange();, +++ b/spring-web/src/test/java/org/springframework/web/bind/support/WebExchangeDataBinderTests.java, +		this.binder.bind(request.toExchange()).block(Duration.ofSeconds(5));, +		return MockServerHttpRequest, +				.body(generateForm(formData)), +				.toExchange();, +++ b/spring-web/src/test/java/org/springframework/web/cors/reactive/DefaultCorsProcessorTests.java, +import org.springframework.http.server.reactive.ServerHttpResponse;, +import org.springframework.web.server.ServerWebExchange;, +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertFalse;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertTrue;, +import static org.springframework.http.HttpHeaders.ACCESS_CONTROL_ALLOW_HEADERS;, +import static org.springframework.http.HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN;, +import static org.springframework.http.HttpHeaders.ACCESS_CONTROL_REQUEST_HEADERS;, +import static org.springframework.http.HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD;, +		ServerWebExchange exchange = actualRequest();, +		this.processor.processRequest(this.conf, exchange);, +, +		ServerHttpResponse response = exchange.getResponse();, +		assertFalse(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN));, +		assertEquals(HttpStatus.FORBIDDEN, response.getStatusCode());, +		ServerWebExchange exchange = actualRequest();, +		this.processor.processRequest(null, exchange);, +, +		ServerHttpResponse response = exchange.getResponse();, +		assertFalse(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN));, +		assertNull(response.getStatusCode());, +		ServerWebExchange exchange = actualRequest();, +		this.processor.processRequest(this.conf, exchange);, +		ServerHttpResponse response = exchange.getResponse();, +		assertTrue(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN));, +		assertEquals("*", response.getHeaders().getFirst(ACCESS_CONTROL_ALLOW_ORIGIN));, +		assertFalse(response.getHeaders().containsKey(HttpHeaders.ACCESS_CONTROL_MAX_AGE));, +		assertFalse(response.getHeaders().containsKey(HttpHeaders.ACCESS_CONTROL_EXPOSE_HEADERS));, +		assertNull(response.getStatusCode());, +		ServerWebExchange exchange = actualRequest();, +		this.processor.processRequest(this.conf, exchange);, +		ServerHttpResponse response = exchange.getResponse();, +		assertTrue(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN));, +		assertEquals("http://domain2.com", response.getHeaders().getFirst(ACCESS_CONTROL_ALLOW_ORIGIN));, +		assertTrue(response.getHeaders().containsKey(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS));, +		assertEquals("true", response.getHeaders().getFirst(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS));, +		assertNull(response.getStatusCode());, +		ServerWebExchange exchange = actualRequest();, +		this.processor.processRequest(this.conf, exchange);, +		ServerHttpResponse response = exchange.getResponse();, +		assertTrue(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN));, +		assertEquals("http://domain2.com", response.getHeaders().getFirst(ACCESS_CONTROL_ALLOW_ORIGIN));, +		assertTrue(response.getHeaders().containsKey(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS));, +		assertEquals("true", response.getHeaders().getFirst(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS));, +		assertNull(response.getStatusCode());, +		ServerWebExchange exchange = actualRequest();, +		this.processor.processRequest(this.conf, exchange);, +		ServerHttpResponse response = exchange.getResponse();, +		assertTrue(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN));, +		assertNull(response.getStatusCode());, +		ServerWebExchange exchange = actualRequest();, +		this.processor.processRequest(this.conf, exchange);, +		ServerHttpResponse response = exchange.getResponse();, +		assertTrue(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN));, +		assertEquals("http://domain2.com", response.getHeaders().getFirst(ACCESS_CONTROL_ALLOW_ORIGIN));, +		assertTrue(response.getHeaders().containsKey(HttpHeaders.ACCESS_CONTROL_EXPOSE_HEADERS));, +		assertTrue(response.getHeaders().getFirst(HttpHeaders.ACCESS_CONTROL_EXPOSE_HEADERS).contains("header1"));, +		assertTrue(response.getHeaders().getFirst(HttpHeaders.ACCESS_CONTROL_EXPOSE_HEADERS).contains("header2"));, +		assertNull(response.getStatusCode());, +		ServerWebExchange exchange = preFlightRequest().header(ACCESS_CONTROL_REQUEST_METHOD, "GET").toExchange();, +		this.processor.processRequest(this.conf, exchange);, +		assertNull(exchange.getResponse().getStatusCode());, +		ServerWebExchange exchange = preFlightRequest().header(ACCESS_CONTROL_REQUEST_METHOD, "DELETE").toExchange();, +		this.processor.processRequest(this.conf, exchange);, +		assertEquals(HttpStatus.FORBIDDEN, exchange.getResponse().getStatusCode());, +		ServerWebExchange exchange = preFlightRequest().header(ACCESS_CONTROL_REQUEST_METHOD, "GET").toExchange();, +		this.processor.processRequest(this.conf, exchange);, +		ServerHttpResponse response = exchange.getResponse();, +		assertNull(response.getStatusCode());, +		assertEquals("GET,HEAD", response.getHeaders().getFirst(HttpHeaders.ACCESS_CONTROL_ALLOW_METHODS));, +		ServerWebExchange exchange = preFlightRequest().toExchange();, +		this.processor.processRequest(this.conf, exchange);, +		ServerHttpResponse response = exchange.getResponse();, +		assertFalse(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN));, +		assertEquals(HttpStatus.FORBIDDEN, response.getStatusCode());, +		ServerWebExchange exchange = preFlightRequest().header(ACCESS_CONTROL_REQUEST_HEADERS, "Header1").toExchange();, +		this.processor.processRequest(this.conf, exchange);, +		ServerHttpResponse response = exchange.getResponse();, +		assertFalse(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN));, +		assertEquals(HttpStatus.FORBIDDEN, response.getStatusCode());, +		ServerWebExchange exchange = preFlightRequest(), +				.toExchange();, +		this.processor.processRequest(this.conf, exchange);, +, +		ServerHttpResponse response = exchange.getResponse();, +		assertFalse(response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN));, +		assertEquals(HttpStatus.FORBIDDEN, response.getStatusCode());, +		ServerWebExchange exchange = preFlightRequest()]