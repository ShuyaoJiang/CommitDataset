[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/resource/ResourceUrlProvider.java, +		int suffixIndex = getEndPathIndex(requestUrl);, +	private int getEndPathIndex(String lookupPath) {, +		int suffixIndex = lookupPath.length();, +		int queryIndex = lookupPath.indexOf("?");, +		if(queryIndex > 0) {, +			suffixIndex = queryIndex;, +		}, +		int hashIndex = lookupPath.indexOf("#");, +		if(hashIndex > 0) {, +			suffixIndex = Math.min(suffixIndex, hashIndex);, +		}, +		return suffixIndex;, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/resource/ResourceUrlProvider.java, +		int suffixIndex = getEndPathIndex(requestUrl);, +	private int getEndPathIndex(String lookupPath) {, +		int suffixIndex = lookupPath.length();, +		int queryIndex = lookupPath.indexOf("?");, +		if(queryIndex > 0) {, +			suffixIndex = queryIndex;, +		}, +		int hashIndex = lookupPath.indexOf("#");, +		if(hashIndex > 0) {, +			suffixIndex = Math.min(suffixIndex, hashIndex);, +		}, +		return suffixIndex;, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/resource/ResourceUrlProviderTests.java, +	public void getStaticResourceUrlRequestWithQueryOrHash() {, +, +		url = "/resources/foo.css#hash";, +		resolvedUrl = this.urlProvider.getForRequestUrl(exchange, url).blockMillis(5000);, +		assertEquals(url, resolvedUrl);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/resource/ResourceUrlProvider.java, +		int suffixIndex = getEndPathIndex(requestUrl);, +	private int getEndPathIndex(String lookupPath) {, +		int suffixIndex = lookupPath.length();, +		int queryIndex = lookupPath.indexOf("?");, +		if(queryIndex > 0) {, +			suffixIndex = queryIndex;, +		}, +		int hashIndex = lookupPath.indexOf("#");, +		if(hashIndex > 0) {, +			suffixIndex = Math.min(suffixIndex, hashIndex);, +		}, +		return suffixIndex;, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/resource/ResourceUrlProviderTests.java, +	public void getStaticResourceUrlRequestWithQueryOrHash() {, +, +		url = "/resources/foo.css#hash";, +		resolvedUrl = this.urlProvider.getForRequestUrl(exchange, url).blockMillis(5000);, +		assertEquals(url, resolvedUrl);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java, +		int suffixIndex = getEndPathIndex(requestUrl);, +	private int getEndPathIndex(String lookupPath) {, +		int suffixIndex = lookupPath.length();, +		int queryIndex = lookupPath.indexOf("?");, +		if(queryIndex > 0) {, +			suffixIndex = queryIndex;, +		}, +		int hashIndex = lookupPath.indexOf("#");, +		if(hashIndex > 0) {, +			suffixIndex = Math.min(suffixIndex, hashIndex);, +		}, +		return suffixIndex;, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/resource/ResourceUrlProvider.java, +		int suffixIndex = getEndPathIndex(requestUrl);, +	private int getEndPathIndex(String lookupPath) {, +		int suffixIndex = lookupPath.length();, +		int queryIndex = lookupPath.indexOf("?");, +		if(queryIndex > 0) {, +			suffixIndex = queryIndex;, +		}, +		int hashIndex = lookupPath.indexOf("#");, +		if(hashIndex > 0) {, +			suffixIndex = Math.min(suffixIndex, hashIndex);, +		}, +		return suffixIndex;, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/resource/ResourceUrlProviderTests.java, +	public void getStaticResourceUrlRequestWithQueryOrHash() {, +, +		url = "/resources/foo.css#hash";, +		resolvedUrl = this.urlProvider.getForRequestUrl(exchange, url).blockMillis(5000);, +		assertEquals(url, resolvedUrl);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java, +		int suffixIndex = getEndPathIndex(requestUrl);, +	private int getEndPathIndex(String lookupPath) {, +		int suffixIndex = lookupPath.length();, +		int queryIndex = lookupPath.indexOf("?");, +		if(queryIndex > 0) {, +			suffixIndex = queryIndex;, +		}, +		int hashIndex = lookupPath.indexOf("#");, +		if(hashIndex > 0) {, +			suffixIndex = Math.min(suffixIndex, hashIndex);, +		}, +		return suffixIndex;, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/resource/ResourceUrlProviderTests.java, +	public void getStaticResourceUrlRequestWithQueryOrHash() {, +, +		url = "/resources/foo.css#hash";]