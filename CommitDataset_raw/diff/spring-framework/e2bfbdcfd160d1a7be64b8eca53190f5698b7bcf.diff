[+++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/StatusAssertionTests.java, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +, +import org.springframework.core.annotation.AliasFor;, +import static org.springframework.http.HttpStatus.*;, + * @author Sam Brannen, +		this.mockMvc.perform(get("/createdWithComposedAnnotation")).andExpect(status().is(201));, +		this.mockMvc.perform(get("/createdWithComposedAnnotation")).andExpect(status().isCreated());, +		this.mockMvc.perform(get("/badRequest")).andExpect(status().reason(endsWith("token")));, +	@RequestMapping, +	@ResponseStatus, +	@Retention(RetentionPolicy.RUNTIME), +	@interface Get {, +, +		@AliasFor(annotation = RequestMapping.class, attribute = "path"), +		String[] path() default {};, +, +		@AliasFor(annotation = ResponseStatus.class, attribute = "code"), +		HttpStatus status() default INTERNAL_SERVER_ERROR;, +	}, +, +		@ResponseStatus(CREATED), +		@Get(path = "/createdWithComposedAnnotation", status = CREATED), +		public @ResponseBody void createdWithComposedAnnotation() {, +		}, +, +		@ResponseStatus(code = BAD_REQUEST, reason = "Expired token"), +		@ResponseStatus(NOT_IMPLEMENTED), +, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/StatusAssertionTests.java, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +, +import org.springframework.core.annotation.AliasFor;, +import static org.springframework.http.HttpStatus.*;, + * @author Sam Brannen, +		this.mockMvc.perform(get("/createdWithComposedAnnotation")).andExpect(status().is(201));, +		this.mockMvc.perform(get("/createdWithComposedAnnotation")).andExpect(status().isCreated());, +		this.mockMvc.perform(get("/badRequest")).andExpect(status().reason(endsWith("token")));, +	@RequestMapping, +	@ResponseStatus, +	@Retention(RetentionPolicy.RUNTIME), +	@interface Get {, +, +		@AliasFor(annotation = RequestMapping.class, attribute = "path"), +		String[] path() default {};, +, +		@AliasFor(annotation = ResponseStatus.class, attribute = "code"), +		HttpStatus status() default INTERNAL_SERVER_ERROR;, +	}, +, +		@ResponseStatus(CREATED), +		@Get(path = "/createdWithComposedAnnotation", status = CREATED), +		public @ResponseBody void createdWithComposedAnnotation() {, +		}, +, +		@ResponseStatus(code = BAD_REQUEST, reason = "Expired token"), +		@ResponseStatus(NOT_IMPLEMENTED), +, +++ b/spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java, +import org.springframework.core.annotation.AnnotatedElementUtils;, + * Provides convenient access to method parameters, the method return value,, + * method annotations, etc., + * prototype bean). Use {@link #createWithResolvedBean()} to obtain a {@code HandlerMethod}, + * @author Sam Brannen, +	 * re-create the {@code HandlerMethod} with an initialized bean., +	 * <p>Also supports <em>merged</em> composed annotations with attribute, +	 * overrides as of Spring Framework 4.2.2., +	 * @see AnnotatedElementUtils#findMergedAnnotation, +		return AnnotatedElementUtils.findMergedAnnotation(this.method, annotationType);, +++ b/spring-test/src/test/java/org/springframework/test/web/servlet/samples/standalone/resultmatchers/StatusAssertionTests.java, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +, +import org.springframework.core.annotation.AliasFor;, +import static org.springframework.http.HttpStatus.*;, + * @author Sam Brannen, +		this.mockMvc.perform(get("/createdWithComposedAnnotation")).andExpect(status().is(201));, +		this.mockMvc.perform(get("/createdWithComposedAnnotation")).andExpect(status().isCreated());, +		this.mockMvc.perform(get("/badRequest")).andExpect(status().reason(endsWith("token")));, +	@RequestMapping, +	@ResponseStatus, +	@Retention(RetentionPolicy.RUNTIME), +	@interface Get {, +, +		@AliasFor(annotation = RequestMapping.class, attribute = "path"), +		String[] path() default {};, +, +		@AliasFor(annotation = ResponseStatus.class, attribute = "code"), +		HttpStatus status() default INTERNAL_SERVER_ERROR;, +	}, +, +		@ResponseStatus(CREATED), +		@Get(path = "/createdWithComposedAnnotation", status = CREATED), +		public @ResponseBody void createdWithComposedAnnotation() {, +		}, +, +		@ResponseStatus(code = BAD_REQUEST, reason = "Expired token"), +		@ResponseStatus(NOT_IMPLEMENTED)]