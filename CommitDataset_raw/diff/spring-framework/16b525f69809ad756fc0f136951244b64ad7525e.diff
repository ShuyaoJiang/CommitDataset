[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +import org.springframework.http.codec.ServerSentEventHttpMessageWriter;, +		writers.add(new ServerSentEventHttpMessageWriter(sseDataEncoders));, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +import org.springframework.http.codec.ServerSentEventHttpMessageWriter;, +		writers.add(new ServerSentEventHttpMessageWriter(sseDataEncoders));, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/SseIntegrationTests.java, +import org.springframework.http.codec.ServerSentEvent;, +		Flux<ServerSentEvent<String>> sse() {, +			return Flux.interval(Duration.ofMillis(100)).map(l -> ServerSentEvent.builder("foo"), +					.id(Long.toString(l)), +					.comment("bar"), +					.build()).take(2);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfiguration.java, +import org.springframework.http.codec.ServerSentEventHttpMessageWriter;, +		writers.add(new ServerSentEventHttpMessageWriter(sseDataEncoders));, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/result/method/annotation/SseIntegrationTests.java, +import org.springframework.http.codec.ServerSentEvent;, +		Flux<ServerSentEvent<String>> sse() {, +			return Flux.interval(Duration.ofMillis(100)).map(l -> ServerSentEvent.builder("foo"), +					.id(Long.toString(l)), +					.comment("bar"), +					.build()).take(2);, +++ b/spring-web/src/main/java/org/springframework/http/codec/ServerSentEvent.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.http.codec;, +, +import java.time.Duration;, +import java.util.Optional;, +, +import org.springframework.http.codec.json.Jackson2JsonEncoder;, +, +/**, + * Representation for a Server-Sent Event for use with Spring's reactive Web, + * support. {@code Flux<SseEvent>} or {@code Observable<SseEvent>} is the, + * reactive equivalent to Spring MVC's {@code SseEmitter}., + *, + * @param <T> the type of data that this event contains, + * @author Sebastien Deleuze, + * @author Arjen Poutsma, + * @see ServerSentEventHttpMessageWriter, + * @see <a href="https://www.w3.org/TR/eventsource/">Server-Sent Events W3C recommendation</a>, + * @since 5.0, + */, +public class ServerSentEvent<T> {, +, +    private final String id;, +, +    private final String event;, +, +    private final T data;, +, +    private final Duration retry;, +, +    private final String comment;, +, +    private ServerSentEvent(String id, String event, T data, Duration retry, String comment) {, +        this.id = id;, +        this.event = event;, +        this.data = data;, +        this.retry = retry;, +        this.comment = comment;, +    }, +, +    /**, +     * Return a builder for a {@code SseEvent}., +     *, +     * @param <T> the type of data that this event contains, +     * @return the builder, +     */, +    public static <T> Builder<T> builder() {, +        return new BuilderImpl<>();, +    }, +, +    /**, +     * Return a builder for a {@code SseEvent}, populated with the give {@linkplain #data() data}., +     *, +     * @param <T> the type of data that this event contains, +     * @return the builder, +     */, +    public static <T> Builder<T> builder(T data) {, +        return new BuilderImpl<>(data);, +    }, +, +    /**]