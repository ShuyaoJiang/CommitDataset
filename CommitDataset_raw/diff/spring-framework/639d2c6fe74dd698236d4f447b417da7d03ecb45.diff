[+++ b/spring-expression/src/test/java/org/springframework/expression/spel/AbstractExpressionTests.java, +	protected final StandardEvaluationContext context = TestScenarioCreator.getTestEvaluationContext();, +		Object value = expr.getValue(context);, +		Object value = expr.getValue(context, expectedResultType);, +		Object value = expr.getValue(context);, +		boolean isWritable = expr.isWritable(context);, +				expr.getValue(context, expectedReturnType);, +				expr.getValue(context);, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/AbstractExpressionTests.java, +	protected final StandardEvaluationContext context = TestScenarioCreator.getTestEvaluationContext();, +		Object value = expr.getValue(context);, +		Object value = expr.getValue(context, expectedResultType);, +		Object value = expr.getValue(context);, +		boolean isWritable = expr.isWritable(context);, +				expr.getValue(context, expectedReturnType);, +				expr.getValue(context);, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/BooleanExpressionTests.java, +		context.setTypeConverter(new StandardTypeConverter(conversionService));, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/AbstractExpressionTests.java, +	protected final StandardEvaluationContext context = TestScenarioCreator.getTestEvaluationContext();, +		Object value = expr.getValue(context);, +		Object value = expr.getValue(context, expectedResultType);, +		Object value = expr.getValue(context);, +		boolean isWritable = expr.isWritable(context);, +				expr.getValue(context, expectedReturnType);, +				expr.getValue(context);, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/BooleanExpressionTests.java, +		context.setTypeConverter(new StandardTypeConverter(conversionService));, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java, +		assertFalse(e.isWritable(context));, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/AbstractExpressionTests.java, +	protected final StandardEvaluationContext context = TestScenarioCreator.getTestEvaluationContext();, +		Object value = expr.getValue(context);, +		Object value = expr.getValue(context, expectedResultType);, +		Object value = expr.getValue(context);, +		boolean isWritable = expr.isWritable(context);, +				expr.getValue(context, expectedReturnType);, +				expr.getValue(context);, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/BooleanExpressionTests.java, +		context.setTypeConverter(new StandardTypeConverter(conversionService));, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java, +		assertFalse(e.isWritable(context));, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/MethodInvocationTests.java, + * Copyright 2002-2018 the original author or authors., +		context.setVariable("bar", 2);, +			expr.getValue(context);, +		context.setVariable("bar", 4);, +			expr.getValue(context);, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/AbstractExpressionTests.java, +	protected final StandardEvaluationContext context = TestScenarioCreator.getTestEvaluationContext();, +		Object value = expr.getValue(context);, +		Object value = expr.getValue(context, expectedResultType);, +		Object value = expr.getValue(context);, +		boolean isWritable = expr.isWritable(context);, +				expr.getValue(context, expectedReturnType);, +				expr.getValue(context);, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/BooleanExpressionTests.java, +		context.setTypeConverter(new StandardTypeConverter(conversionService));, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java, +		assertFalse(e.isWritable(context));, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/MethodInvocationTests.java, + * Copyright 2002-2018 the original author or authors., +		context.setVariable("bar", 2);, +			expr.getValue(context);, +		context.setVariable("bar", 4);, +			expr.getValue(context);, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java, + * Copyright 2002-2018 the original author or authors., +		StandardEvaluationContext context = new StandardEvaluationContext(new Spr5899Class());, +		assertEquals(12, expr.getValue(context));, +		assertEquals(null, expr.getValue(context));, +		context.setTypeLocator(new MyTypeLocator());, +		assertEquals("ab", expr.getValue(context));, +		assertEquals("anullc", expr.getValue(context));, +		assertEquals("instance", expr.getValue(context));, +		assertEquals("instance", expr.getValue(context));, +		assertEquals("instance", expr.getValue(context));, +		assertEquals("instance", expr.getValue(context));, +		StandardEvaluationContext context = new StandardEvaluationContext(new Spr5899Class());, +		assertEquals(Map.Entry.class, expr.getValue(context));, +		assertEquals(12, expr.getValue(context));, +		assertEquals(13, expr.getValue(context));, +		StandardEvaluationContext context = new StandardEvaluationContext(m);  // root is a map instance, +		context.addPropertyAccessor(new MapAccessor());, +		assertEquals("bar", expr.getValue(context));, +		StandardEvaluationContext context = new StandardEvaluationContext(new TestProperties());, +		name = expr.getValue(context, String.class);, +		name = expr.getValue(context, String.class);, +		context.addPropertyAccessor(new MapAccessor());, +		name = expr.getValue(context, String.class);, +		context.addPropertyAccessor(new MapAccessor());, +		name = expr.getValue(context, String.class);, +		context.addPropertyAccessor(new MapAccessor());, +		name = expr.getValue(context, String.class);, +		PropertyAccessor accessor = new ReflectivePropertyAccessor();, +		assertFalse(accessor.canRead(context, null, "abc"));, +		assertFalse(accessor.canWrite(context, null, "abc"));, +			accessor.read(context, null, "abc");, +			accessor.write(context, null, "abc", "foo");, +		StandardEvaluationContext context = new StandardEvaluationContext(new Foo());]