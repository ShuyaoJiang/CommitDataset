[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/DataSourceTransactionManager.java, +import org.springframework.transaction.support.TransactionSynchronizationUtils;, + * <p>As of 4.3.4, this transaction manager triggers flush callbacks on registered, + * transaction synchronizations (if synchronization is generally active), assuming, + * resources operating on the underlying JDBC {@code Connection}. This allows for, + * setup analogous to {@code JtaTransactionManager}, in particular with respect to, + * lazily registered ORM resources (e.g. a Hibernate {@code Session})., + *, +, +		@Override, +		public void flush() {, +			if (TransactionSynchronizationManager.isSynchronizationActive()) {, +				TransactionSynchronizationUtils.triggerFlush();, +			}, +		}, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/DataSourceTransactionManager.java, +import org.springframework.transaction.support.TransactionSynchronizationUtils;, + * <p>As of 4.3.4, this transaction manager triggers flush callbacks on registered, + * transaction synchronizations (if synchronization is generally active), assuming, + * resources operating on the underlying JDBC {@code Connection}. This allows for, + * setup analogous to {@code JtaTransactionManager}, in particular with respect to, + * lazily registered ORM resources (e.g. a Hibernate {@code Session})., + *, +, +		@Override, +		public void flush() {, +			if (TransactionSynchronizationManager.isSynchronizationActive()) {, +				TransactionSynchronizationUtils.triggerFlush();, +			}, +		}, +++ b/spring-tx/src/main/java/org/springframework/transaction/TransactionStatus.java, + * Copyright 2002-2016 the original author or authors., +	 * <p>This is effectively just a hint and may be a no-op if the underlying, +	 * transaction manager does not have a flush concept. A flush signal may, +	 * get applied to the primary resource or to transaction synchronizations,, +	 * depending on the underlying resource.]