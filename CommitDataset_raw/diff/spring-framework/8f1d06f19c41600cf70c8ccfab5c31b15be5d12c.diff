[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java, +		ModelAndView mav = null;, +		// Execute invokeHandlerMethod in synchronized block if required., +		if (this.synchronizeOnSession) {, +			HttpSession session = request.getSession(false);, +			if (session != null) {, +				Object mutex = WebUtils.getSessionMutex(session);, +				synchronized (mutex) {, +					mav = invokeHandlerMethod(request, response, handlerMethod);, +				}, +			}, +		}, +, +		mav = invokeHandlerMethod(request, response, handlerMethod);, +, +		return mav;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java, +		ModelAndView mav = null;, +		// Execute invokeHandlerMethod in synchronized block if required., +		if (this.synchronizeOnSession) {, +			HttpSession session = request.getSession(false);, +			if (session != null) {, +				Object mutex = WebUtils.getSessionMutex(session);, +				synchronized (mutex) {, +					mav = invokeHandlerMethod(request, response, handlerMethod);, +				}, +			}, +		}, +, +		mav = invokeHandlerMethod(request, response, handlerMethod);, +, +		return mav;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/WebContentGenerator.java, + * Copyright 2002-2016 the original author or authors., +, +		if (!response.containsHeader(HEADER_CACHE_CONTROL)) {, +	}, +		if (!response.containsHeader(HEADER_CACHE_CONTROL)) {, +	}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java, +		ModelAndView mav = null;, +		// Execute invokeHandlerMethod in synchronized block if required., +		if (this.synchronizeOnSession) {, +			HttpSession session = request.getSession(false);, +			if (session != null) {, +				Object mutex = WebUtils.getSessionMutex(session);, +				synchronized (mutex) {, +					mav = invokeHandlerMethod(request, response, handlerMethod);, +				}, +			}, +		}, +, +		mav = invokeHandlerMethod(request, response, handlerMethod);, +, +		return mav;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/WebContentGenerator.java, + * Copyright 2002-2016 the original author or authors., +, +		if (!response.containsHeader(HEADER_CACHE_CONTROL)) {, +	}, +		if (!response.containsHeader(HEADER_CACHE_CONTROL)) {, +	}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/ControllerTests.java, + * Copyright 2002-2016 the original author or authors., +		ModelAndView mv = pvc.handleRequest(new MockHttpServletRequest("GET", "foo.html"), new MockHttpServletResponse());, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java, +		ModelAndView mav = null;, +		// Execute invokeHandlerMethod in synchronized block if required., +		if (this.synchronizeOnSession) {, +			HttpSession session = request.getSession(false);, +			if (session != null) {, +				Object mutex = WebUtils.getSessionMutex(session);, +				synchronized (mutex) {, +					mav = invokeHandlerMethod(request, response, handlerMethod);, +				}, +			}, +		}, +, +		mav = invokeHandlerMethod(request, response, handlerMethod);, +, +		return mav;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/WebContentGenerator.java, + * Copyright 2002-2016 the original author or authors., +, +		if (!response.containsHeader(HEADER_CACHE_CONTROL)) {, +	}, +		if (!response.containsHeader(HEADER_CACHE_CONTROL)) {, +	}, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/ControllerTests.java, + * Copyright 2002-2016 the original author or authors., +		ModelAndView mv = pvc.handleRequest(new MockHttpServletRequest("GET", "foo.html"), new MockHttpServletResponse());, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapterIntegrationTests.java, + * Copyright 2002-2016 the original author or authors., +import java.util.concurrent.TimeUnit;, +, +import org.hamcrest.Matchers;, +import org.springframework.http.CacheControl;, +import static org.junit.Assert.assertThat;, +		// set because of @SesstionAttributes, +		assertEquals("no-store", response.getHeader("Cache-Control"));]