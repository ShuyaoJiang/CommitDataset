[+++ b/org.springframework.context/src/main/java/org/springframework/format/FormatterRegistry.java, +	 * <p>On print, if the Formatter's type T is declared and <code>fieldType</code> is not assignable to T,, +	 * Adds a Printer/Parser pair to format fields of a specific type., +	 * The formatter will delegate to the specified <code>printer</code> for printing, +	 * and the specified <code>parser</code> for parsing., +	 * <p>On print, if the Printer's type T is declared and <code>fieldType</code> is not assignable to T,, +	 * a coersion to T will be attempted before delegating to <code>printer</code> to print a field value., +	 * On parse, if the object returned by the Parser is not assignable to the runtime field type,, +	 * a coersion to the field type will be attempted before returning the parsed field value., +	 * @param fieldType the field type to format, +	 * @param printer the printing part of the formatter, +	 * @param parser the parsing part of the formatter, +	 */, +	void addFormatterForFieldType(Class<?> fieldType, Printer<?> printer, Parser<?> parser);, +, +	/**, +++ b/org.springframework.context/src/main/java/org/springframework/format/FormatterRegistry.java, +	 * <p>On print, if the Formatter's type T is declared and <code>fieldType</code> is not assignable to T,, +	 * Adds a Printer/Parser pair to format fields of a specific type., +	 * The formatter will delegate to the specified <code>printer</code> for printing, +	 * and the specified <code>parser</code> for parsing., +	 * <p>On print, if the Printer's type T is declared and <code>fieldType</code> is not assignable to T,, +	 * a coersion to T will be attempted before delegating to <code>printer</code> to print a field value., +	 * On parse, if the object returned by the Parser is not assignable to the runtime field type,, +	 * a coersion to the field type will be attempted before returning the parsed field value., +	 * @param fieldType the field type to format, +	 * @param printer the printing part of the formatter, +	 * @param parser the parsing part of the formatter, +	 */, +	void addFormatterForFieldType(Class<?> fieldType, Printer<?> printer, Parser<?> parser);, +, +	/**, +++ b/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionService.java, +import java.util.Collections;, +public class FormattingConversionService extends GenericConversionService implements FormatterRegistry {, +	public void addFormatterForFieldType(Class<?> fieldType, Printer<?> printer, Parser<?> parser) {, +		addGenericConverter(new PrinterConverter(fieldType, printer, this));, +		addGenericConverter(new ParserConverter(fieldType, parser, this));, +	}, +, +				public Set<ConvertiblePair> getConvertibleTypes() {, +					return Collections.singleton(new ConvertiblePair(fieldType, String.class));, +				public Set<ConvertiblePair> getConvertibleTypes() {, +					return Collections.singleton(new ConvertiblePair(String.class, fieldType));, +		public Set<ConvertiblePair> getConvertibleTypes() {, +			return Collections.singleton(new ConvertiblePair(this.fieldType, String.class));, +			return (source != null ? this.printer.print(source, LocaleContextHolder.getLocale()) : "");, +		public Set<ConvertiblePair> getConvertibleTypes() {, +			return Collections.singleton(new ConvertiblePair(String.class, this.fieldType));, +++ b/org.springframework.context/src/main/java/org/springframework/format/FormatterRegistry.java, +	 * <p>On print, if the Formatter's type T is declared and <code>fieldType</code> is not assignable to T,, +	 * Adds a Printer/Parser pair to format fields of a specific type., +	 * The formatter will delegate to the specified <code>printer</code> for printing, +	 * and the specified <code>parser</code> for parsing., +	 * <p>On print, if the Printer's type T is declared and <code>fieldType</code> is not assignable to T,, +	 * a coersion to T will be attempted before delegating to <code>printer</code> to print a field value., +	 * On parse, if the object returned by the Parser is not assignable to the runtime field type,, +	 * a coersion to the field type will be attempted before returning the parsed field value., +	 * @param fieldType the field type to format, +	 * @param printer the printing part of the formatter, +	 * @param parser the parsing part of the formatter, +	 */, +	void addFormatterForFieldType(Class<?> fieldType, Printer<?> printer, Parser<?> parser);, +, +	/**, +++ b/org.springframework.context/src/main/java/org/springframework/format/support/FormattingConversionService.java, +import java.util.Collections;, +public class FormattingConversionService extends GenericConversionService implements FormatterRegistry {, +	public void addFormatterForFieldType(Class<?> fieldType, Printer<?> printer, Parser<?> parser) {, +		addGenericConverter(new PrinterConverter(fieldType, printer, this));, +		addGenericConverter(new ParserConverter(fieldType, parser, this));, +	}, +, +				public Set<ConvertiblePair> getConvertibleTypes() {, +					return Collections.singleton(new ConvertiblePair(fieldType, String.class));, +				public Set<ConvertiblePair> getConvertibleTypes() {, +					return Collections.singleton(new ConvertiblePair(String.class, fieldType));, +		public Set<ConvertiblePair> getConvertibleTypes() {, +			return Collections.singleton(new ConvertiblePair(this.fieldType, String.class));, +			return (source != null ? this.printer.print(source, LocaleContextHolder.getLocale()) : "");, +		public Set<ConvertiblePair> getConvertibleTypes() {, +			return Collections.singleton(new ConvertiblePair(String.class, this.fieldType));, +++ b/org.springframework.context/src/test/java/org/springframework/context/support/ConversionServiceFactoryBeanTests.java, +import java.util.Collections;, +			public Set<ConvertiblePair> getConvertibleTypes() {, +				return Collections.singleton(new ConvertiblePair(String.class, Baz.class));, +++ b/org.springframework.context/src/main/java/org/springframework/format/FormatterRegistry.java, +	 * <p>On print, if the Formatter's type T is declared and <code>fieldType</code> is not assignable to T,, +	 * Adds a Printer/Parser pair to format fields of a specific type., +	 * The formatter will delegate to the specified <code>printer</code> for printing, +	 * and the specified <code>parser</code> for parsing., +	 * <p>On print, if the Printer's type T is declared and <code>fieldType</code> is not assignable to T,, +	 * a coersion to T will be attempted before delegating to <code>printer</code> to print a field value., +	 * On parse, if the object returned by the Parser is not assignable to the runtime field type,, +	 * a coersion to the field type will be attempted before returning the parsed field value., +	 * @param fieldType the field type to format, +	 * @param printer the printing part of the formatter, +	 * @param parser the parsing part of the formatter, +	 */, +	void addFormatterForFieldType(Class<?> fieldType, Printer<?> printer, Parser<?> parser);]