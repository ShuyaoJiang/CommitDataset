[+++ b/spring-test/src/main/java/org/springframework/test/context/junit4/rules/SpringMethodRule.java, +		return new SpringFailOnTimeout(next, frameworkMethod.getMethod());, +++ b/spring-test/src/main/java/org/springframework/test/context/junit4/rules/SpringMethodRule.java, +		return new SpringFailOnTimeout(next, frameworkMethod.getMethod());, +++ b/spring-test/src/main/java/org/springframework/test/context/junit4/statements/SpringFailOnTimeout.java, +import java.lang.reflect.Method;, +, +import org.springframework.test.annotation.TestAnnotationUtils;, + * support for Spring's {@link org.springframework.test.annotation.Timed @Timed}, + * annotation by throwing an exception if the next statement in the execution, + * chain takes more than the specified number of milliseconds., +	 * Construct a new {@code SpringFailOnTimeout} statement for the supplied, +	 * {@code testMethod}, retrieving the configured timeout from the, +	 * {@code @Timed} annotation on the supplied method., +	 * @param testMethod the current test method, +	 * @see TestAnnotationUtils#getTimeout(Method), +	 */, +	public SpringFailOnTimeout(Statement next, Method testMethod) {, +		this(next, TestAnnotationUtils.getTimeout(testMethod));, +	}, +, +	/**, +	 * Construct a new {@code SpringFailOnTimeout} statement for the supplied, +	 * {@code timeout}., +	 * <p>If the supplied {@code timeout} is {@code 0}, the execution of the, +	 * {@code next} statement will not be timed., +	 *, +	 * @param next the next {@code Statement} in the execution chain; never {@code null}, +	 * @param timeout the configured {@code timeout} for the current test, in milliseconds;, +	 * never negative]