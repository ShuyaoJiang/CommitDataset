[+++ b/spring-core/src/main/java/org/springframework/core/convert/support/ObjectToObjectConverter.java, +				ReflectionUtils.makeAccessible(ctor);, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/ObjectToObjectConverter.java, +				ReflectionUtils.makeAccessible(ctor);, +++ b/spring-core/src/test/java/org/springframework/core/convert/converter/DefaultConversionServiceTests.java, +/*, + * Copyright 2002-2016 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.core.convert.converter;, +, +import java.awt.Color;, +import java.lang.reflect.Method;, +import java.math.BigDecimal;, +import java.math.BigInteger;, +import java.nio.charset.Charset;, +import java.nio.charset.StandardCharsets;, +import java.time.ZoneId;, +import java.util.AbstractList;, +import java.util.ArrayList;, +import java.util.Arrays;, +import java.util.Collection;, +import java.util.Collections;, +import java.util.Currency;, +import java.util.EnumSet;, +import java.util.HashMap;, +import java.util.LinkedHashMap;, +import java.util.LinkedHashSet;, +import java.util.LinkedList;, +import java.util.List;, +import java.util.Locale;, +import java.util.Map;, +import java.util.Optional;, +import java.util.Properties;, +import java.util.Set;, +import java.util.TimeZone;, +import java.util.UUID;, +import java.util.stream.Stream;, +, +import org.junit.Test;, +, +import org.springframework.core.MethodParameter;, +import org.springframework.core.convert.ConversionFailedException;, +import org.springframework.core.convert.ConverterNotFoundException;, +import org.springframework.core.convert.TypeDescriptor;, +import org.springframework.core.convert.support.DefaultConversionService;, +import org.springframework.tests.Assume;, +import org.springframework.tests.TestGroup;, +import org.springframework.util.ClassUtils;, +import org.springframework.util.StopWatch;, +, +import static org.hamcrest.Matchers.*;, +import static org.junit.Assert.*;, +, +/**, + * Unit tests for {@link DefaultConversionService}., + *, + * <p>In this package for enforcing accessibility checks to non-public classes outside, + * of the {@code org.springframework.core.convert.support} implementation package., + * Only in such a scenario, {@code setAccessible(true)} is actually necessary., + *, + * @author Keith Donald, + * @author Juergen Hoeller, + * @author Stephane Nicoll, + * @author Sam Brannen, + */, +public class DefaultConversionServiceTests {, +, +	private final DefaultConversionService conversionService = new DefaultConversionService();, +, +, +	@Test, +	public void testStringToCharacter() {, +		assertEquals(Character.valueOf('1'), conversionService.convert("1", Character.class));, +	}, +, +	@Test, +	public void testStringToCharacterEmptyString() {, +		assertEquals(null, conversionService.convert("", Character.class));, +	}, +, +	@Test(expected = ConversionFailedException.class), +	public void testStringToCharacterInvalidString() {, +		conversionService.convert("invalid", Character.class);, +	}, +, +	@Test, +	public void testCharacterToString() {]