[+++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +	private static final Class<?>[] CALLBACK_TYPES = { BeanMethodInterceptor.class,, +		DisposableBeanMethodInterceptor.class, NoOp.class };, +	private static final CallbackFilter CALLBACK_FILTER = new CallbackFilter() {, +		public int accept(Method candidateMethod) {, +, +	private static final Callback DISPOSABLE_BEAN_METHOD_INTERCEPTOR = new DisposableBeanMethodInterceptor();, +, +, +	private final Callback[] callbackInstances;, +, +, +	/**, +	 * Creates a new {@link ConfigurationClassEnhancer} instance., +	 */, +	public ConfigurationClassEnhancer(ConfigurableBeanFactory beanFactory) {, +		Assert.notNull(beanFactory, "BeanFactory must not be null");, +		// Callback instances must be ordered in the same way as CALLBACK_TYPES and CALLBACK_FILTER, +		this.callbackInstances = new Callback[] {, +				new BeanMethodInterceptor(beanFactory),, +				DISPOSABLE_BEAN_METHOD_INTERCEPTOR,, +				NoOp.INSTANCE };, +		enhancer.setCallbackFilter(CALLBACK_FILTER);, +		enhancer.setCallbackTypes(CALLBACK_TYPES);, +		Enhancer.registerStaticCallbacks(subclass, this.callbackInstances);, +		private static final Class<?>[] CALLBACK_TYPES = {, +			GetObjectMethodInterceptor.class, NoOp.class };, +, +		private static final CallbackFilter CALLBACK_FITLER = new CallbackFilter() {, +			public int accept(Method method) {, +				return method.getName().equals("getObject") ? 0 : 1;, +			}, +		};, +, +, +, +			enhancer.setCallbackFilter(CALLBACK_FITLER);, +			// Callback instances must be ordered in the same way as CALLBACK_TYPES and CALLBACK_FILTER, +			Callback[] callbackInstances = new Callback[] {, +					new GetObjectMethodInterceptor(this.beanFactory, beanName),, +					NoOp.INSTANCE, +			};, +			enhancer.setCallbackTypes(CALLBACK_TYPES);, +			Enhancer.registerCallbacks(fbSubclass, callbackInstances);]