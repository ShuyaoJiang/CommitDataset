[+++ b/build.gradle, +		optional("org.apache.tomcat:tomcat-catalina:${tomcatVersion}"), +++ b/build.gradle, +		optional("org.apache.tomcat:tomcat-catalina:${tomcatVersion}"), +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/JettyHttpHandlerAdapter.java, + * {@link ServletHttpHandlerAdapter} extension that uses Jetty APIs for writing, + * to the response with {@link ByteBuffer}., +, +	protected ServerHttpResponse createResponse(HttpServletResponse response,, +			AsyncContext context) throws IOException {, +, +		return new JettyServerHttpResponse(response, context, getDataBufferFactory(), getBufferSize());, +		public JettyServerHttpResponse(HttpServletResponse response, AsyncContext context,, +				DataBufferFactory factory, int bufferSize) throws IOException {, +, +			super(response, context, factory, bufferSize);, +		protected int writeToOutputStream(DataBuffer dataBuffer) throws IOException {, +++ b/build.gradle, +		optional("org.apache.tomcat:tomcat-catalina:${tomcatVersion}"), +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/JettyHttpHandlerAdapter.java, + * {@link ServletHttpHandlerAdapter} extension that uses Jetty APIs for writing, + * to the response with {@link ByteBuffer}., +, +	protected ServerHttpResponse createResponse(HttpServletResponse response,, +			AsyncContext context) throws IOException {, +, +		return new JettyServerHttpResponse(response, context, getDataBufferFactory(), getBufferSize());, +		public JettyServerHttpResponse(HttpServletResponse response, AsyncContext context,, +				DataBufferFactory factory, int bufferSize) throws IOException {, +, +			super(response, context, factory, bufferSize);, +		protected int writeToOutputStream(DataBuffer dataBuffer) throws IOException {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java, +		ServerHttpRequest httpRequest = createRequest(((HttpServletRequest) request), asyncContext);, +		ServerHttpResponse httpResponse = createResponse(((HttpServletResponse) response), asyncContext);, +	protected ServerHttpRequest createRequest(HttpServletRequest request, AsyncContext context), +			throws IOException {, +, +		return new ServletServerHttpRequest(request, context, getDataBufferFactory(), getBufferSize());, +	protected ServerHttpResponse createResponse(HttpServletResponse response, AsyncContext context), +			throws IOException {, +, +		return new ServletServerHttpResponse(response, context, getDataBufferFactory(), getBufferSize());, +++ b/build.gradle, +		optional("org.apache.tomcat:tomcat-catalina:${tomcatVersion}"), +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/JettyHttpHandlerAdapter.java, + * {@link ServletHttpHandlerAdapter} extension that uses Jetty APIs for writing, + * to the response with {@link ByteBuffer}., +, +	protected ServerHttpResponse createResponse(HttpServletResponse response,, +			AsyncContext context) throws IOException {, +, +		return new JettyServerHttpResponse(response, context, getDataBufferFactory(), getBufferSize());, +		public JettyServerHttpResponse(HttpServletResponse response, AsyncContext context,, +				DataBufferFactory factory, int bufferSize) throws IOException {, +, +			super(response, context, factory, bufferSize);, +		protected int writeToOutputStream(DataBuffer dataBuffer) throws IOException {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java, +		ServerHttpRequest httpRequest = createRequest(((HttpServletRequest) request), asyncContext);, +		ServerHttpResponse httpResponse = createResponse(((HttpServletResponse) response), asyncContext);, +	protected ServerHttpRequest createRequest(HttpServletRequest request, AsyncContext context), +			throws IOException {, +, +		return new ServletServerHttpRequest(request, context, getDataBufferFactory(), getBufferSize());, +	protected ServerHttpResponse createResponse(HttpServletResponse response, AsyncContext context), +			throws IOException {, +, +		return new ServletServerHttpResponse(response, context, getDataBufferFactory(), getBufferSize());, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java, +	protected final Log logger = LogFactory.getLog(getClass());, +, +, +	protected DataBuffer readFromInputStream() throws IOException {, +				return readFromInputStream();, +++ b/build.gradle, +		optional("org.apache.tomcat:tomcat-catalina:${tomcatVersion}"), +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/JettyHttpHandlerAdapter.java, + * {@link ServletHttpHandlerAdapter} extension that uses Jetty APIs for writing, + * to the response with {@link ByteBuffer}., +, +	protected ServerHttpResponse createResponse(HttpServletResponse response,, +			AsyncContext context) throws IOException {, +, +		return new JettyServerHttpResponse(response, context, getDataBufferFactory(), getBufferSize());, +		public JettyServerHttpResponse(HttpServletResponse response, AsyncContext context,, +				DataBufferFactory factory, int bufferSize) throws IOException {, +, +			super(response, context, factory, bufferSize);, +		protected int writeToOutputStream(DataBuffer dataBuffer) throws IOException {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/ServletHttpHandlerAdapter.java, +		ServerHttpRequest httpRequest = createRequest(((HttpServletRequest) request), asyncContext);, +		ServerHttpResponse httpResponse = createResponse(((HttpServletResponse) response), asyncContext);, +	protected ServerHttpRequest createRequest(HttpServletRequest request, AsyncContext context), +			throws IOException {, +, +		return new ServletServerHttpRequest(request, context, getDataBufferFactory(), getBufferSize());, +	protected ServerHttpResponse createResponse(HttpServletResponse response, AsyncContext context), +			throws IOException {, +]