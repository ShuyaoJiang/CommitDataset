[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/SimpleUrlHandlerMapping.java, + * Copyright 2002-2015 the original author or authors., + * pattern matches (given "/test" -> registered "/t*"). Note that the default, + * is to map within the current servlet mapping if applicable; see the, + * {@link #setAlwaysUseFullPath "alwaysUseFullPath"} property. For details on the, + * pattern options, see the {@link org.springframework.util.AntPathMatcher} javadoc., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/SimpleUrlHandlerMapping.java, + * Copyright 2002-2015 the original author or authors., + * pattern matches (given "/test" -> registered "/t*"). Note that the default, + * is to map within the current servlet mapping if applicable; see the, + * {@link #setAlwaysUseFullPath "alwaysUseFullPath"} property. For details on the, + * pattern options, see the {@link org.springframework.util.AntPathMatcher} javadoc., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AbstractResourceResolver.java, + * Copyright 2002-2015 the original author or authors., +			logger.trace("Resolving resource for request path \"" + requestPath + "\"");, +			logger.trace("Resolving public URL for resource path \"" + resourceUrlPath + "\"");, +, +	protected abstract Resource resolveResourceInternal(HttpServletRequest request, String requestPath,, +			List<? extends Resource> locations, ResourceResolverChain chain);, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/SimpleUrlHandlerMapping.java, + * Copyright 2002-2015 the original author or authors., + * pattern matches (given "/test" -> registered "/t*"). Note that the default, + * is to map within the current servlet mapping if applicable; see the, + * {@link #setAlwaysUseFullPath "alwaysUseFullPath"} property. For details on the, + * pattern options, see the {@link org.springframework.util.AntPathMatcher} javadoc., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AbstractResourceResolver.java, + * Copyright 2002-2015 the original author or authors., +			logger.trace("Resolving resource for request path \"" + requestPath + "\"");, +			logger.trace("Resolving public URL for resource path \"" + resourceUrlPath + "\"");, +, +	protected abstract Resource resolveResourceInternal(HttpServletRequest request, String requestPath,, +			List<? extends Resource> locations, ResourceResolverChain chain);, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AppCacheManifestTransformer.java, + * Copyright 2002-2015 the original author or authors., +import java.util.Collections;, +		if (!this.fileExtension.equals(StringUtils.getFilenameExtension(resource.getFilename()))) {, +			logger.trace("AppCache file: [" + resource.getFilename()+ "] hash: [" + hash + "]");, +				Resource appCacheResource =, +						resolverChain.resolveResource(null, line, Collections.singletonList(resource));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/SimpleUrlHandlerMapping.java, + * Copyright 2002-2015 the original author or authors., + * pattern matches (given "/test" -> registered "/t*"). Note that the default, + * is to map within the current servlet mapping if applicable; see the, + * {@link #setAlwaysUseFullPath "alwaysUseFullPath"} property. For details on the, + * pattern options, see the {@link org.springframework.util.AntPathMatcher} javadoc., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AbstractResourceResolver.java, + * Copyright 2002-2015 the original author or authors., +			logger.trace("Resolving resource for request path \"" + requestPath + "\"");, +			logger.trace("Resolving public URL for resource path \"" + resourceUrlPath + "\"");, +, +	protected abstract Resource resolveResourceInternal(HttpServletRequest request, String requestPath,, +			List<? extends Resource> locations, ResourceResolverChain chain);, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AppCacheManifestTransformer.java, + * Copyright 2002-2015 the original author or authors., +import java.util.Collections;, +		if (!this.fileExtension.equals(StringUtils.getFilenameExtension(resource.getFilename()))) {, +			logger.trace("AppCache file: [" + resource.getFilename()+ "] hash: [" + hash + "]");, +				Resource appCacheResource =, +						resolverChain.resolveResource(null, line, Collections.singletonList(resource));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/CachingResourceResolver.java, +, +		Assert.notNull(cache, "Cache is required");, +, +, +				logger.trace("Found match: " + resource);, +				logger.trace("Putting resolved resource in cache: " + resource);, +				logger.trace("Found match: \"" + resolvedUrlPath + "\"");, +				logger.trace("Putting resolved resource URL path in cache: \"" + resolvedUrlPath + "\"");, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/SimpleUrlHandlerMapping.java, + * Copyright 2002-2015 the original author or authors., + * pattern matches (given "/test" -> registered "/t*"). Note that the default, + * is to map within the current servlet mapping if applicable; see the, + * {@link #setAlwaysUseFullPath "alwaysUseFullPath"} property. For details on the, + * pattern options, see the {@link org.springframework.util.AntPathMatcher} javadoc., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AbstractResourceResolver.java, + * Copyright 2002-2015 the original author or authors., +			logger.trace("Resolving resource for request path \"" + requestPath + "\"");, +			logger.trace("Resolving public URL for resource path \"" + resourceUrlPath + "\"");, +, +	protected abstract Resource resolveResourceInternal(HttpServletRequest request, String requestPath,, +			List<? extends Resource> locations, ResourceResolverChain chain);, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/AppCacheManifestTransformer.java, + * Copyright 2002-2015 the original author or authors., +import java.util.Collections;, +		if (!this.fileExtension.equals(StringUtils.getFilenameExtension(resource.getFilename()))) {, +			logger.trace("AppCache file: [" + resource.getFilename()+ "] hash: [" + hash + "]");, +				Resource appCacheResource =, +						resolverChain.resolveResource(null, line, Collections.singletonList(resource));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/CachingResourceResolver.java, +, +		Assert.notNull(cache, "Cache is required");, +, +, +				logger.trace("Found match: " + resource);, +				logger.trace("Putting resolved resource in cache: " + resource);, +				logger.trace("Found match: \"" + resolvedUrlPath + "\"");]