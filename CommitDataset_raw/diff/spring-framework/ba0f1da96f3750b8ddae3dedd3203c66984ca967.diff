[+++ b/org.springframework.context/src/main/java/org/springframework/ui/format/jodatime/AbstractDateTimeAnnotationFormatterFactory.java, +	private final Set<Class<?>> fieldTypes;, +		this.fieldTypes = Collections.unmodifiableSet(createFieldTypes());, +		return this.fieldTypes;, +	public Printer<?> getPrinter(A annotation, Class<?> fieldType) {, +		if (ReadableInstant.class.isAssignableFrom(fieldType)) {, +		} else if (ReadablePartial.class.isAssignableFrom(fieldType)) {, +		} else if (Calendar.class.isAssignableFrom(fieldType)) {, +		Set<Class<?>> fieldTypes = new HashSet<Class<?>>(7);, +		fieldTypes.add(LocalDate.class);, +		fieldTypes.add(LocalTime.class);, +		fieldTypes.add(LocalDateTime.class);, +		fieldTypes.add(DateTime.class);, +		fieldTypes.add(Date.class);, +		fieldTypes.add(Calendar.class);, +		fieldTypes.add(Long.class);, +		return fieldTypes;, +++ b/org.springframework.context/src/main/java/org/springframework/ui/format/jodatime/AbstractDateTimeAnnotationFormatterFactory.java, +	private final Set<Class<?>> fieldTypes;, +		this.fieldTypes = Collections.unmodifiableSet(createFieldTypes());, +		return this.fieldTypes;, +	public Printer<?> getPrinter(A annotation, Class<?> fieldType) {, +		if (ReadableInstant.class.isAssignableFrom(fieldType)) {, +		} else if (ReadablePartial.class.isAssignableFrom(fieldType)) {, +		} else if (Calendar.class.isAssignableFrom(fieldType)) {, +		Set<Class<?>> fieldTypes = new HashSet<Class<?>>(7);, +		fieldTypes.add(LocalDate.class);, +		fieldTypes.add(LocalTime.class);, +		fieldTypes.add(LocalDateTime.class);, +		fieldTypes.add(DateTime.class);, +		fieldTypes.add(Date.class);, +		fieldTypes.add(Calendar.class);, +		fieldTypes.add(Long.class);, +		return fieldTypes;, +++ b/org.springframework.context/src/main/java/org/springframework/ui/format/jodatime/JodaTimeConverters.java, +		registry.addConverter(new DateTimeToLongConverter());, +	 * Used when binding a parsed DateTime to a java.lang.Long field. , +	 * @see DateTimeParser , +	 */, +	private static class DateTimeToLongConverter implements Converter<DateTime, Long> {, +		public Long convert(DateTime source) {, +			return source.getMillis();, +		}, +	}, +, +	/** , +++ b/org.springframework.context/src/main/java/org/springframework/ui/format/jodatime/AbstractDateTimeAnnotationFormatterFactory.java, +	private final Set<Class<?>> fieldTypes;, +		this.fieldTypes = Collections.unmodifiableSet(createFieldTypes());, +		return this.fieldTypes;, +	public Printer<?> getPrinter(A annotation, Class<?> fieldType) {, +		if (ReadableInstant.class.isAssignableFrom(fieldType)) {, +		} else if (ReadablePartial.class.isAssignableFrom(fieldType)) {, +		} else if (Calendar.class.isAssignableFrom(fieldType)) {, +		Set<Class<?>> fieldTypes = new HashSet<Class<?>>(7);, +		fieldTypes.add(LocalDate.class);, +		fieldTypes.add(LocalTime.class);, +		fieldTypes.add(LocalDateTime.class);, +		fieldTypes.add(DateTime.class);, +		fieldTypes.add(Date.class);, +		fieldTypes.add(Calendar.class);, +		fieldTypes.add(Long.class);, +		return fieldTypes;, +++ b/org.springframework.context/src/main/java/org/springframework/ui/format/jodatime/JodaTimeConverters.java, +		registry.addConverter(new DateTimeToLongConverter());, +	 * Used when binding a parsed DateTime to a java.lang.Long field. , +	 * @see DateTimeParser , +	 */, +	private static class DateTimeToLongConverter implements Converter<DateTime, Long> {, +		public Long convert(DateTime source) {, +			return source.getMillis();, +		}, +	}, +, +	/** , +++ b/org.springframework.context/src/test/java/org/springframework/ui/format/jodatime/JodaTimeFormattingTests.java, +import org.junit.Ignore;, +	@Test, +	public void testBindLocalTime() {, +		MutablePropertyValues propertyValues = new MutablePropertyValues();, +		propertyValues.addPropertyValue("localTime", "12:00 PM");, +		binder.bind(propertyValues);, +		assertEquals(0, binder.getBindingResult().getErrorCount());, +		assertEquals("12:00 PM", binder.getBindingResult().getFieldValue("localTime"));, +	}, +, +	@Test, +	public void testBindLocalTimeAnnotated() {, +		MutablePropertyValues propertyValues = new MutablePropertyValues();, +		propertyValues.addPropertyValue("localTimeAnnotated", "12:00:00 PM");, +		binder.bind(propertyValues);, +		assertEquals(0, binder.getBindingResult().getErrorCount());, +		assertEquals("12:00:00 PM", binder.getBindingResult().getFieldValue("localTimeAnnotated"));, +	}, +, +	@Test, +	public void testBindLocalDateTime() {, +		MutablePropertyValues propertyValues = new MutablePropertyValues();, +		propertyValues.addPropertyValue("localDateTime", "10/31/09 12:00 PM");, +		binder.bind(propertyValues);]