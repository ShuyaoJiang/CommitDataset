[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +import org.springframework.util.ConcurrentReferenceHashMap;, +	private static final Map<AnnotationCacheKey, Annotation> findAnnotationCache =, +			new ConcurrentReferenceHashMap<AnnotationCacheKey, Annotation>(256);, +, +	private static final Map<Class<?>, Boolean> annotatedInterfaceCache =, +			new ConcurrentReferenceHashMap<Class<?>, Boolean>(256);, +	@SuppressWarnings("unchecked"), +		AnnotationCacheKey cacheKey = new AnnotationCacheKey(method, annotationType);, +		A result = (A) findAnnotationCache.get(cacheKey);, +		if (result == null) {, +			result = getAnnotation(method, annotationType);, +			if (result == null) {, +				result = searchOnInterfaces(method, annotationType, clazz.getInterfaces());, +			while (result == null) {, +					result = getAnnotation(equivalentMethod, annotationType);, +				if (result == null) {, +					result = searchOnInterfaces(method, annotationType, clazz.getInterfaces());, +			if (result != null) {, +				findAnnotationCache.put(cacheKey, result);, +			}, +		}, +		return result;, +	private static <A extends Annotation> A searchOnInterfaces(Method method, Class<A> annotationType, Class<?>... ifcs) {, +	@SuppressWarnings("unchecked"), +		AnnotationCacheKey cacheKey = new AnnotationCacheKey(clazz, annotationType);, +		A result = (A) findAnnotationCache.get(cacheKey);, +		if (result == null) {, +			result = findAnnotation(clazz, annotationType, new HashSet<Annotation>());, +			if (result != null) {, +				findAnnotationCache.put(cacheKey, result);, +			}, +		}, +		return result;, +	/**, +	 * Default cache key for the TransactionAttribute cache., +	 */, +	private static class AnnotationCacheKey {, +, +		private final AnnotatedElement element;, +, +		private final Class<? extends Annotation> annotationType;, +, +		public AnnotationCacheKey(AnnotatedElement element, Class<? extends Annotation> annotationType) {, +			this.element = element;, +			this.annotationType = annotationType;, +		}, +, +		@Override, +		public boolean equals(Object other) {, +			if (this == other) {, +				return true;, +			}, +			if (!(other instanceof AnnotationCacheKey)) {, +				return false;, +			}, +			AnnotationCacheKey otherKey = (AnnotationCacheKey) other;, +			return (this.element.equals(otherKey.element) &&, +					ObjectUtils.nullSafeEquals(this.annotationType, otherKey.annotationType));, +		}, +, +		@Override, +		public int hashCode() {, +			return (this.element.hashCode() * 29 + this.annotationType.hashCode());, +		}, +	}, +, +, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +import org.springframework.util.ConcurrentReferenceHashMap;, +	private static final Map<AnnotationCacheKey, Annotation> findAnnotationCache =, +			new ConcurrentReferenceHashMap<AnnotationCacheKey, Annotation>(256);, +, +	private static final Map<Class<?>, Boolean> annotatedInterfaceCache =, +			new ConcurrentReferenceHashMap<Class<?>, Boolean>(256);, +	@SuppressWarnings("unchecked"), +		AnnotationCacheKey cacheKey = new AnnotationCacheKey(method, annotationType);, +		A result = (A) findAnnotationCache.get(cacheKey);, +		if (result == null) {, +			result = getAnnotation(method, annotationType);, +			if (result == null) {, +				result = searchOnInterfaces(method, annotationType, clazz.getInterfaces());, +			while (result == null) {, +					result = getAnnotation(equivalentMethod, annotationType);, +				if (result == null) {, +					result = searchOnInterfaces(method, annotationType, clazz.getInterfaces());, +			if (result != null) {, +				findAnnotationCache.put(cacheKey, result);, +			}, +		}, +		return result;, +	private static <A extends Annotation> A searchOnInterfaces(Method method, Class<A> annotationType, Class<?>... ifcs) {, +	@SuppressWarnings("unchecked"), +		AnnotationCacheKey cacheKey = new AnnotationCacheKey(clazz, annotationType);, +		A result = (A) findAnnotationCache.get(cacheKey);, +		if (result == null) {, +			result = findAnnotation(clazz, annotationType, new HashSet<Annotation>());, +			if (result != null) {, +				findAnnotationCache.put(cacheKey, result);, +			}]