[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +	 * @see #synthesizeAnnotation(Class), +	 * @see #synthesizeAnnotation(Class), +	 * <em>Synthesize</em> an annotation from its default attributes values., +	 * <p>This method simply delegates to, +	 * {@link #synthesizeAnnotation(Map, Class, AnnotatedElement)},, +	 * supplying an empty map for the source attribute values and {@code null}, +	 * for the {@link AnnotatedElement}., +	 *, +	 * @param annotationType the type of annotation to synthesize; never {@code null}, +	 * @return the synthesized annotation, +	 * @throws IllegalArgumentException if a required attribute is missing, +	 * @throws AnnotationConfigurationException if invalid configuration of, +	 * {@code @AliasFor} is detected, +	 * @since 4.2, +	 * @see #synthesizeAnnotation(Map, Class, AnnotatedElement), +	 * @see #synthesizeAnnotation(Annotation, AnnotatedElement), +	 */, +	public static <A extends Annotation> A synthesizeAnnotation(Class<A> annotationType) {, +		return synthesizeAnnotation(Collections.<String, Object> emptyMap(), annotationType, null);, +	}, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +	 * @see #synthesizeAnnotation(Class), +	 * @see #synthesizeAnnotation(Class), +	 * <em>Synthesize</em> an annotation from its default attributes values., +	 * <p>This method simply delegates to, +	 * {@link #synthesizeAnnotation(Map, Class, AnnotatedElement)},, +	 * supplying an empty map for the source attribute values and {@code null}, +	 * for the {@link AnnotatedElement}., +	 *, +	 * @param annotationType the type of annotation to synthesize; never {@code null}, +	 * @return the synthesized annotation, +	 * @throws IllegalArgumentException if a required attribute is missing, +	 * @throws AnnotationConfigurationException if invalid configuration of, +	 * {@code @AliasFor} is detected, +	 * @since 4.2, +	 * @see #synthesizeAnnotation(Map, Class, AnnotatedElement), +	 * @see #synthesizeAnnotation(Annotation, AnnotatedElement), +	 */, +	public static <A extends Annotation> A synthesizeAnnotation(Class<A> annotationType) {, +		return synthesizeAnnotation(Collections.<String, Object> emptyMap(), annotationType, null);, +	}, +, +	/**, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java, +	public void synthesizeAnnotationFromDefaultsWithoutAttributeAliases() throws Exception {, +		AnnotationWithDefaults annotationWithDefaults = synthesizeAnnotation(AnnotationWithDefaults.class);, +	public void synthesizeAnnotationFromDefaultsWithAttributeAliases() throws Exception {, +		ContextConfig contextConfig = synthesizeAnnotation(ContextConfig.class);, +		assertMissingTextAttribute(Collections.emptyMap());, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +	 * @see #synthesizeAnnotation(Class), +	 * @see #synthesizeAnnotation(Class), +	 * <em>Synthesize</em> an annotation from its default attributes values., +	 * <p>This method simply delegates to, +	 * {@link #synthesizeAnnotation(Map, Class, AnnotatedElement)},, +	 * supplying an empty map for the source attribute values and {@code null}, +	 * for the {@link AnnotatedElement}., +	 *, +	 * @param annotationType the type of annotation to synthesize; never {@code null}, +	 * @return the synthesized annotation, +	 * @throws IllegalArgumentException if a required attribute is missing, +	 * @throws AnnotationConfigurationException if invalid configuration of, +	 * {@code @AliasFor} is detected, +	 * @since 4.2, +	 * @see #synthesizeAnnotation(Map, Class, AnnotatedElement), +	 * @see #synthesizeAnnotation(Annotation, AnnotatedElement), +	 */, +	public static <A extends Annotation> A synthesizeAnnotation(Class<A> annotationType) {, +		return synthesizeAnnotation(Collections.<String, Object> emptyMap(), annotationType, null);, +	}, +, +	/**, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java, +	public void synthesizeAnnotationFromDefaultsWithoutAttributeAliases() throws Exception {, +		AnnotationWithDefaults annotationWithDefaults = synthesizeAnnotation(AnnotationWithDefaults.class);, +	public void synthesizeAnnotationFromDefaultsWithAttributeAliases() throws Exception {, +		ContextConfig contextConfig = synthesizeAnnotation(ContextConfig.class);, +		assertMissingTextAttribute(Collections.emptyMap());, +++ b/spring-test/src/main/java/org/springframework/test/context/transaction/TransactionalTestExecutionListener.java, +			AnnotationUtils.synthesizeAnnotation(TransactionConfiguration.class);]