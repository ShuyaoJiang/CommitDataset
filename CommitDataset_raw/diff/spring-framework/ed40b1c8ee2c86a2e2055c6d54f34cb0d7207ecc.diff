[+++ b/spring-aop/src/main/java/org/springframework/aop/support/ControlFlowPointcut.java, + * Copyright 2002-2017 the original author or authors., + * @author Juergen Hoeller, +	private volatile int evaluations;, +	 * Construct a new pointcut that matches all calls below the given method, +	 * in the given class. If no method name is given, matches all control flows, +	 * below the given class., +	 * @param methodName the name of the method (may be {@code null}), +, +		for (StackTraceElement element : new Throwable().getStackTrace()) {, +			if (element.getClassName().equals(this.clazz.getName()) &&, +					(this.methodName == null || element.getMethodName().equals(this.methodName))) {, +				return true;, +			}, +		}, +		return false;, +		int code = this.clazz.hashCode();, +++ b/spring-aop/src/main/java/org/springframework/aop/support/ControlFlowPointcut.java, + * Copyright 2002-2017 the original author or authors., + * @author Juergen Hoeller, +	private volatile int evaluations;, +	 * Construct a new pointcut that matches all calls below the given method, +	 * in the given class. If no method name is given, matches all control flows, +	 * below the given class., +	 * @param methodName the name of the method (may be {@code null}), +, +		for (StackTraceElement element : new Throwable().getStackTrace()) {, +			if (element.getClassName().equals(this.clazz.getName()) &&, +					(this.methodName == null || element.getMethodName().equals(this.methodName))) {, +				return true;, +			}, +		}, +		return false;, +		int code = this.clazz.hashCode();, +++ b/spring-beans/src/main/java/org/springframework/beans/PropertyAccessException.java, + * Copyright 2002-2017 the original author or authors., +public abstract class PropertyAccessException extends BeansException {, +	/**, +	 * Return a corresponding error code for this type of exception., +	 */, +	public abstract String getErrorCode();, +, +++ b/spring-aop/src/main/java/org/springframework/aop/support/ControlFlowPointcut.java, + * Copyright 2002-2017 the original author or authors., + * @author Juergen Hoeller, +	private volatile int evaluations;, +	 * Construct a new pointcut that matches all calls below the given method, +	 * in the given class. If no method name is given, matches all control flows, +	 * below the given class., +	 * @param methodName the name of the method (may be {@code null}), +, +		for (StackTraceElement element : new Throwable().getStackTrace()) {, +			if (element.getClassName().equals(this.clazz.getName()) &&, +					(this.methodName == null || element.getMethodName().equals(this.methodName))) {, +				return true;, +			}, +		}, +		return false;, +		int code = this.clazz.hashCode();, +++ b/spring-beans/src/main/java/org/springframework/beans/PropertyAccessException.java, + * Copyright 2002-2017 the original author or authors., +public abstract class PropertyAccessException extends BeansException {, +	/**, +	 * Return a corresponding error code for this type of exception., +	 */, +	public abstract String getErrorCode();, +, +++ /dev/null, +++ b/spring-aop/src/main/java/org/springframework/aop/support/ControlFlowPointcut.java, + * Copyright 2002-2017 the original author or authors., + * @author Juergen Hoeller, +	private volatile int evaluations;, +	 * Construct a new pointcut that matches all calls below the given method, +	 * in the given class. If no method name is given, matches all control flows, +	 * below the given class., +	 * @param methodName the name of the method (may be {@code null}), +, +		for (StackTraceElement element : new Throwable().getStackTrace()) {, +			if (element.getClassName().equals(this.clazz.getName()) &&, +					(this.methodName == null || element.getMethodName().equals(this.methodName))) {, +				return true;, +			}, +		}, +		return false;, +		int code = this.clazz.hashCode();, +++ b/spring-beans/src/main/java/org/springframework/beans/PropertyAccessException.java, + * Copyright 2002-2017 the original author or authors., +public abstract class PropertyAccessException extends BeansException {, +	/**, +	 * Return a corresponding error code for this type of exception., +	 */, +	public abstract String getErrorCode();, +, +++ /dev/null, +++ b/spring-core/src/main/java/org/springframework/core/Constants.java, + * Copyright 2002-2017 the original author or authors., +, +	/**, +	 * Exception thrown when the {@link Constants} class is asked for, +	 * an invalid constant name.]