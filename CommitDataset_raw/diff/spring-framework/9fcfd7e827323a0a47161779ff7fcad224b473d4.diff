[+++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +	 * <p>The parent {@linkplain ApplicationContext#getEnvironment() environment} is, +	 * {@linkplain ConfigurableEnvironment#merge(ConfigurableEnvironment) merged} with, +	 * this (child) application context environment if the parent is non-{@code null} and, +	 * its environment is an instance of {@link ConfigurableEnvironment}., +	 * @see ConfigurableEnvironment#merge(ConfigurableEnvironment), +		if (parent != null) {, +			Object parentEnvironment =  parent.getEnvironment();, +			if (parentEnvironment instanceof ConfigurableEnvironment) {, +				this.environment.merge((ConfigurableEnvironment)parentEnvironment);, +			}, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +	 * <p>The parent {@linkplain ApplicationContext#getEnvironment() environment} is, +	 * {@linkplain ConfigurableEnvironment#merge(ConfigurableEnvironment) merged} with, +	 * this (child) application context environment if the parent is non-{@code null} and, +	 * its environment is an instance of {@link ConfigurableEnvironment}., +	 * @see ConfigurableEnvironment#merge(ConfigurableEnvironment), +		if (parent != null) {, +			Object parentEnvironment =  parent.getEnvironment();, +			if (parentEnvironment instanceof ConfigurableEnvironment) {, +				this.environment.merge((ConfigurableEnvironment)parentEnvironment);, +			}, +++ b/spring-core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, +	public void merge(ConfigurableEnvironment parent) {, +		for (PropertySource<?> ps : parent.getPropertySources()) {, +			if (!this.propertySources.contains(ps.getName())) {, +				this.propertySources.addLast(ps);, +			}, +		}, +		for (String profile : parent.getActiveProfiles()) {, +			this.activeProfiles.add(profile);, +		}, +		for (String profile : parent.getDefaultProfiles()) {, +			this.defaultProfiles.add(profile);, +		}, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +	 * <p>The parent {@linkplain ApplicationContext#getEnvironment() environment} is, +	 * {@linkplain ConfigurableEnvironment#merge(ConfigurableEnvironment) merged} with, +	 * this (child) application context environment if the parent is non-{@code null} and, +	 * its environment is an instance of {@link ConfigurableEnvironment}., +	 * @see ConfigurableEnvironment#merge(ConfigurableEnvironment), +		if (parent != null) {, +			Object parentEnvironment =  parent.getEnvironment();, +			if (parentEnvironment instanceof ConfigurableEnvironment) {, +				this.environment.merge((ConfigurableEnvironment)parentEnvironment);, +			}, +++ b/spring-core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, +	public void merge(ConfigurableEnvironment parent) {, +		for (PropertySource<?> ps : parent.getPropertySources()) {, +			if (!this.propertySources.contains(ps.getName())) {, +				this.propertySources.addLast(ps);, +			}, +		}, +		for (String profile : parent.getActiveProfiles()) {, +			this.activeProfiles.add(profile);, +		}, +		for (String profile : parent.getDefaultProfiles()) {, +			this.defaultProfiles.add(profile);, +		}, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/env/ConfigurableEnvironment.java, +	/**, +	 * Append the given parent environment's active profiles, default profiles and, +	 * property sources to this (child) environment's respective collections of each., +	 * <p>For any identically-named {@code PropertySource} instance existing in both, +	 * parent and child, the child instance is to be preserved and the parent instance, +	 * discarded. This has the effect of allowing overriding of property sources by the, +	 * child as well as avoiding redundant searches through common property source types,, +	 * e.g. system environment and system properties., +	 * <p>Active and default profile names are also filtered for duplicates, to avoid, +	 * confusion and redundant storage., +	 * <p>The parent environment remains unmodified in any case. Note that any changes to, +	 * the parent environment occurring after the call to {@code merge} will not be, +	 * reflected in the child. Therefore, care should be taken to configure parent, +	 * property sources and profile information prior to calling {@code merge}., +	 * @param parent the environment to merge with, +	 * @since 3.2, +	 * @see org.springframework.context.support.AbstractApplicationContext#setParent, +	 */, +	void merge(ConfigurableEnvironment parent);, +, +++ b/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java, +	 * <p>The parent {@linkplain ApplicationContext#getEnvironment() environment} is, +	 * {@linkplain ConfigurableEnvironment#merge(ConfigurableEnvironment) merged} with, +	 * this (child) application context environment if the parent is non-{@code null} and, +	 * its environment is an instance of {@link ConfigurableEnvironment}., +	 * @see ConfigurableEnvironment#merge(ConfigurableEnvironment), +		if (parent != null) {, +			Object parentEnvironment =  parent.getEnvironment();, +			if (parentEnvironment instanceof ConfigurableEnvironment) {, +				this.environment.merge((ConfigurableEnvironment)parentEnvironment);, +			}, +++ b/spring-core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, +	public void merge(ConfigurableEnvironment parent) {, +		for (PropertySource<?> ps : parent.getPropertySources()) {, +			if (!this.propertySources.contains(ps.getName())) {, +				this.propertySources.addLast(ps);]