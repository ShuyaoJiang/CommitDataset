[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java, + * Copyright 2002-2018 the original author or authors., +import java.lang.reflect.Proxy;, +import org.springframework.aop.support.AopUtils;, +	 * @return a method to handle the exception, or {@code null} if none, +	protected ServletInvocableHandlerMethod getExceptionHandlerMethod(, +			@Nullable HandlerMethod handlerMethod, Exception exception) {, +, +		Class<?> handlerType = null;, +			// Local exception handler methods on the controller class itself., +			// To be invoked through the proxy, even in case of an interface-based proxy., +			handlerType = handlerMethod.getBeanType();, +			// For advice applicability check below (involving base packages, assignable types, +			// and annotation presence), use target class instead of interface-based proxy., +			if (Proxy.isProxyClass(handlerType)) {, +				handlerType = AopUtils.getTargetClass(handlerMethod.getBean());, +			}, +			ControllerAdviceBean advice = entry.getKey();, +			if (advice.isApplicableToBeanType(handlerType)) {, +					return new ServletInvocableHandlerMethod(advice.resolveBean(), method);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java, + * Copyright 2002-2018 the original author or authors., +import java.lang.reflect.Proxy;, +import org.springframework.aop.support.AopUtils;, +	 * @return a method to handle the exception, or {@code null} if none, +	protected ServletInvocableHandlerMethod getExceptionHandlerMethod(, +			@Nullable HandlerMethod handlerMethod, Exception exception) {, +, +		Class<?> handlerType = null;, +			// Local exception handler methods on the controller class itself., +			// To be invoked through the proxy, even in case of an interface-based proxy., +			handlerType = handlerMethod.getBeanType();, +			// For advice applicability check below (involving base packages, assignable types, +			// and annotation presence), use target class instead of interface-based proxy., +			if (Proxy.isProxyClass(handlerType)) {, +				handlerType = AopUtils.getTargetClass(handlerMethod.getBean());, +			}, +			ControllerAdviceBean advice = entry.getKey();, +			if (advice.isApplicableToBeanType(handlerType)) {, +					return new ServletInvocableHandlerMethod(advice.resolveBean(), method);, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolverTests.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.aop.framework.ProxyFactory;, +import org.springframework.web.context.support.WebApplicationObjectSupport;, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(MyConfig.class);, +		this.resolver.setApplicationContext(ctx);, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(MyConfig.class);, +		this.resolver.setApplicationContext(ctx);, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(MyConfig.class);, +		this.resolver.setApplicationContext(ctx);, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(MyConfig.class);, +		this.resolver.setApplicationContext(ctx);, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(MyConfig.class);, +		this.resolver.setApplicationContext(ctx);, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(MyControllerAdviceConfig.class);, +		this.resolver.setApplicationContext(ctx);, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(MyControllerAdviceConfig.class);, +		this.resolver.setApplicationContext(ctx);, +	@Test  // SPR-16496, +	public void resolveExceptionControllerAdviceAgainstProxy() throws Exception {, +		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(MyControllerAdviceConfig.class);, +		this.resolver.setApplicationContext(ctx);, +		this.resolver.afterPropertiesSet();, +, +		IllegalStateException ex = new IllegalStateException();, +		HandlerMethod handlerMethod = new HandlerMethod(new ProxyFactory(new ResponseBodyController()).getProxy(), "handle");, +		ModelAndView mav = this.resolver.resolveException(this.request, this.response, handlerMethod, ex);, +, +		assertNotNull("Exception was not handled", mav);, +		assertTrue(mav.isEmpty());, +		assertEquals("BasePackageTestExceptionResolver: IllegalStateException", this.response.getContentAsString());, +	}, +, +	interface ResponseBodyInterface {, +, +		void handle();, +, +		@ExceptionHandler, +		@ResponseBody, +		String handleException(IllegalArgumentException ex);, +	}, +, +, +	static class ResponseBodyController extends WebApplicationObjectSupport implements ResponseBodyInterface {, +	@RestControllerAdvice(assignableTypes = WebApplicationObjectSupport.class)]