[+++ b/.gitignore, +.classpath, +.project, +++ b/.gitignore, +.classpath, +.project, +++ b/build.gradle, +		if (project.name in ["spring", "spring-jms", "spring-orm",, +		testCompile("org.codehaus.woodstox:wstx-asl:3.2.7"), +		useTestNG(), +++ b/.gitignore, +.classpath, +.project, +++ b/build.gradle, +		if (project.name in ["spring", "spring-jms", "spring-orm",, +		testCompile("org.codehaus.woodstox:wstx-asl:3.2.7"), +		useTestNG(), +++ /dev/null, +++ b/.gitignore, +.classpath, +.project, +++ b/build.gradle, +		if (project.name in ["spring", "spring-jms", "spring-orm",, +		testCompile("org.codehaus.woodstox:wstx-asl:3.2.7"), +		useTestNG(), +++ /dev/null, +++ /dev/null, +++ b/.gitignore, +.classpath, +.project, +++ b/build.gradle, +		if (project.name in ["spring", "spring-jms", "spring-orm",, +		testCompile("org.codehaus.woodstox:wstx-asl:3.2.7"), +		useTestNG(), +++ /dev/null, +++ /dev/null, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/AbstractAdvisingBeanPostProcessor.java, + * Copyright 2002-2012 the original author or authors., +	private final Map<String, Boolean> eligibleBeans = new ConcurrentHashMap<String, Boolean>(64);, +	 * <p>Implements caching of {@code canApply} results per bean name., +		Boolean eligible = this.eligibleBeans.get(beanName);, +		Class<?> targetClass = AopUtils.getTargetClass(bean);, +		this.eligibleBeans.put(beanName, eligible);, +++ b/.gitignore, +.classpath, +.project, +++ b/build.gradle, +		if (project.name in ["spring", "spring-jms", "spring-orm",, +		testCompile("org.codehaus.woodstox:wstx-asl:3.2.7"), +		useTestNG(), +++ /dev/null, +++ /dev/null, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/AbstractAdvisingBeanPostProcessor.java, + * Copyright 2002-2012 the original author or authors., +	private final Map<String, Boolean> eligibleBeans = new ConcurrentHashMap<String, Boolean>(64);, +	 * <p>Implements caching of {@code canApply} results per bean name., +		Boolean eligible = this.eligibleBeans.get(beanName);, +		Class<?> targetClass = AopUtils.getTargetClass(bean);, +		this.eligibleBeans.put(beanName, eligible);, +++ b/spring-aspects/aspects.gradle, +++ b/.gitignore, +.classpath, +.project, +++ b/build.gradle, +		if (project.name in ["spring", "spring-jms", "spring-orm",, +		testCompile("org.codehaus.woodstox:wstx-asl:3.2.7"), +		useTestNG(), +++ /dev/null, +++ /dev/null, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/AbstractAdvisingBeanPostProcessor.java, + * Copyright 2002-2012 the original author or authors., +	private final Map<String, Boolean> eligibleBeans = new ConcurrentHashMap<String, Boolean>(64);, +	 * <p>Implements caching of {@code canApply} results per bean name., +		Boolean eligible = this.eligibleBeans.get(beanName);, +		Class<?> targetClass = AopUtils.getTargetClass(bean);, +		this.eligibleBeans.put(beanName, eligible);, +++ b/spring-aspects/aspects.gradle, +++ b/spring-context-support/src/main/java/org/springframework/mail/javamail/MimeMessageHelper.java, + * Copyright 2002-2012 the original author or authors., +		mimeBodyPart.setFileName(attachmentFilename);, +++ b/.gitignore, +.classpath, +.project, +++ b/build.gradle, +		if (project.name in ["spring", "spring-jms", "spring-orm",, +		testCompile("org.codehaus.woodstox:wstx-asl:3.2.7"), +		useTestNG(), +++ /dev/null, +++ /dev/null, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/AbstractAdvisingBeanPostProcessor.java, + * Copyright 2002-2012 the original author or authors., +	private final Map<String, Boolean> eligibleBeans = new ConcurrentHashMap<String, Boolean>(64);, +	 * <p>Implements caching of {@code canApply} results per bean name., +		Boolean eligible = this.eligibleBeans.get(beanName);, +		Class<?> targetClass = AopUtils.getTargetClass(bean);, +		this.eligibleBeans.put(beanName, eligible);, +++ b/spring-aspects/aspects.gradle, +++ b/spring-context-support/src/main/java/org/springframework/mail/javamail/MimeMessageHelper.java, + * Copyright 2002-2012 the original author or authors., +		mimeBodyPart.setFileName(attachmentFilename);]