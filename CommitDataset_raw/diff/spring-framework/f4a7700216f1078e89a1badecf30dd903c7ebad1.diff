[+++ b/org.springframework.aop/src/test/java/org/springframework/aop/config/AopNamespaceHandlerEventTests.java, +/*, + * Copyright 2002-2007 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.aop.config;, +, +import static org.junit.Assert.*;, +, +import java.util.HashSet;, +import java.util.Set;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.springframework.beans.factory.config.BeanDefinition;, +import org.springframework.beans.factory.config.BeanReference;, +import org.springframework.beans.factory.parsing.BeanComponentDefinition;, +import org.springframework.beans.factory.parsing.CollectingReaderEventListener;, +import org.springframework.beans.factory.parsing.ComponentDefinition;, +import org.springframework.beans.factory.parsing.CompositeComponentDefinition;, +import org.springframework.beans.factory.support.DefaultListableBeanFactory;, +import org.springframework.beans.factory.xml.XmlBeanDefinitionReader;, +import org.springframework.core.io.ClassPathResource;, +, +/**, + * @author Rob Harrop, + * @author Juergen Hoeller, + */, +public class AopNamespaceHandlerEventTests {, +, +	private CollectingReaderEventListener eventListener = new CollectingReaderEventListener();, +, +	private XmlBeanDefinitionReader reader;, +, +	private DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();, +, +, +	@Before, +	public void setUp() throws Exception {, +		this.reader = new XmlBeanDefinitionReader(this.beanFactory);, +		this.reader.setEventListener(this.eventListener);, +	}, +, +	@Test, +	public void testPointcutEvents() throws Exception {, +		loadBeansFrom("aopNamespaceHandlerPointcutEventTests.xml");, +		ComponentDefinition[] componentDefinitions = this.eventListener.getComponentDefinitions();, +		assertEquals("Incorrect number of events fired", 1, componentDefinitions.length);, +		assertTrue("No holder with nested components", componentDefinitions[0] instanceof CompositeComponentDefinition);, +, +		CompositeComponentDefinition compositeDef = (CompositeComponentDefinition) componentDefinitions[0];, +		assertEquals("aop:config", compositeDef.getName());, +, +		ComponentDefinition[] nestedComponentDefs = compositeDef.getNestedComponents();, +		assertEquals("Incorrect number of inner components", 2, nestedComponentDefs.length);, +		PointcutComponentDefinition pcd = null;, +		for (int i = 0; i < nestedComponentDefs.length; i++) {, +			ComponentDefinition componentDefinition = nestedComponentDefs[i];, +			if (componentDefinition instanceof PointcutComponentDefinition) {, +				pcd = (PointcutComponentDefinition) componentDefinition;, +				break;, +			}, +		}, +		assertNotNull("PointcutComponentDefinition not found", pcd);, +		assertEquals("Incorrect number of BeanDefinitions", 1, pcd.getBeanDefinitions().length);, +	}, +, +	@Test, +	public void testAdvisorEventsWithPointcutRef() throws Exception {, +		loadBeansFrom("aopNamespaceHandlerAdvisorWithPointcutRefEventTests.xml");, +		ComponentDefinition[] componentDefinitions = this.eventListener.getComponentDefinitions();, +		assertEquals("Incorrect number of events fired", 2, componentDefinitions.length);, +, +		assertTrue("No holder with nested components", componentDefinitions[0] instanceof CompositeComponentDefinition);, +		CompositeComponentDefinition compositeDef = (CompositeComponentDefinition) componentDefinitions[0];, +		assertEquals("aop:config", compositeDef.getName());, +, +		ComponentDefinition[] nestedComponentDefs = compositeDef.getNestedComponents();, +		assertEquals("Incorrect number of inner components", 3, nestedComponentDefs.length);, +		AdvisorComponentDefinition acd = null;, +		for (int i = 0; i < nestedComponentDefs.length; i++) {, +			ComponentDefinition componentDefinition = nestedComponentDefs[i];, +			if (componentDefinition instanceof AdvisorComponentDefinition) {, +				acd = (AdvisorComponentDefinition) componentDefinition;, +				break;, +			}, +		}, +		assertNotNull("AdvisorComponentDefinition not found", acd);]