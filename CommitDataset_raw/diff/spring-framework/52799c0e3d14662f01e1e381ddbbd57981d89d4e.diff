[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/AbstractWebSocketSession.java, +	private final Map<String, Object> attributes = new ConcurrentHashMap<>();, +		Assert.notNull(session, "WebSocket session must not be null");, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/AbstractWebSocketSession.java, +	private final Map<String, Object> attributes = new ConcurrentHashMap<>();, +		Assert.notNull(session, "WebSocket session must not be null");, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java, + * A {@link WebSocketSession} for use with the Jetty 9.3/9.4 WebSocket API., + * @author Juergen Hoeller, +	private static final boolean directInterfaceCalls;, +	private static Method getUserPrincipal;, +, +	static {, +		directInterfaceCalls = UpgradeRequest.class.isInterface();, +		if (!directInterfaceCalls) {, +			try {, +				getUpgradeRequest = Session.class.getMethod("getUpgradeRequest");, +				getUpgradeResponse = Session.class.getMethod("getUpgradeResponse");, +				getRequestURI = UpgradeRequest.class.getMethod("getRequestURI");, +				getHeaders = UpgradeRequest.class.getMethod("getHeaders");, +				getUserPrincipal = UpgradeRequest.class.getMethod("getUserPrincipal");, +				getAcceptedSubProtocol = UpgradeResponse.class.getMethod("getAcceptedSubProtocol");, +				getExtensions = UpgradeResponse.class.getMethod("getExtensions");, +			}, +			catch (NoSuchMethodException ex) {, +				throw new IllegalStateException("Incompatible Jetty API", ex);, +			}, +		}, +	}, +, +	 * @param user the user associated with the session; if {@code null} we'll fallback on the, +	 * user available via {@link org.eclipse.jetty.websocket.api.Session#getUpgradeRequest()}, +		return (getNativeSession() != null && getNativeSession().isOpen());, +, +		if (directInterfaceCalls) {, +			initializeJettySessionDirectly(session);, +			initializeJettySessionReflectively(session);, +		}, +	}, +, +	private void initializeJettySessionDirectly(Session session) {, +		this.id = ObjectUtils.getIdentityHexString(getNativeSession());, +		this.uri = session.getUpgradeRequest().getRequestURI();, +, +		this.headers = new HttpHeaders();, +		this.headers.putAll(session.getUpgradeRequest().getHeaders());, +		this.headers = HttpHeaders.readOnlyHttpHeaders(headers);, +, +		this.acceptedProtocol = session.getUpgradeResponse().getAcceptedSubProtocol();, +, +		List<ExtensionConfig> source = session.getUpgradeResponse().getExtensions();, +		if (source != null) {, +			this.extensions = new ArrayList<>(source.size());, +			for (ExtensionConfig ec : source) {, +				this.extensions.add(new WebSocketExtension(ec.getName(), ec.getParameters()));, +			}, +		}, +		else {, +			this.extensions = new ArrayList<>(0);, +		}, +, +		if (this.user == null) {, +			this.user = session.getUpgradeRequest().getUserPrincipal();, +	private void initializeJettySessionReflectively(Session session) {, +			throw new IOException("Unable to obtain RemoteEndpoint in session " + getId(), ex);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/AbstractWebSocketSession.java, +	private final Map<String, Object> attributes = new ConcurrentHashMap<>();, +		Assert.notNull(session, "WebSocket session must not be null");, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketSession.java, + * A {@link WebSocketSession} for use with the Jetty 9.3/9.4 WebSocket API., + * @author Juergen Hoeller, +	private static final boolean directInterfaceCalls;, +	private static Method getUserPrincipal;, +, +	static {, +		directInterfaceCalls = UpgradeRequest.class.isInterface();, +		if (!directInterfaceCalls) {, +			try {, +				getUpgradeRequest = Session.class.getMethod("getUpgradeRequest");, +				getUpgradeResponse = Session.class.getMethod("getUpgradeResponse");, +				getRequestURI = UpgradeRequest.class.getMethod("getRequestURI");, +				getHeaders = UpgradeRequest.class.getMethod("getHeaders");, +				getUserPrincipal = UpgradeRequest.class.getMethod("getUserPrincipal");, +				getAcceptedSubProtocol = UpgradeResponse.class.getMethod("getAcceptedSubProtocol");, +				getExtensions = UpgradeResponse.class.getMethod("getExtensions");, +			}, +			catch (NoSuchMethodException ex) {, +				throw new IllegalStateException("Incompatible Jetty API", ex);, +			}, +		}, +	}, +, +	 * @param user the user associated with the session; if {@code null} we'll fallback on the, +	 * user available via {@link org.eclipse.jetty.websocket.api.Session#getUpgradeRequest()}, +		return (getNativeSession() != null && getNativeSession().isOpen());, +, +		if (directInterfaceCalls) {]