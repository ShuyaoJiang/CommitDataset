[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ComponentScanBeanDefinitionParser.java, +import org.springframework.context.config.SpecificationContext;, +			.execute(createSpecificationContext(parserContext));, +	// Adapt the given ParserContext instance into an SpecificationContext., +	// TODO SPR-7420: create a common ParserContext-to-SpecificationContext adapter utility, +	private SpecificationContext createSpecificationContext(ParserContext parserContext) {, +		SpecificationContext specificationContext = new SpecificationContext();, +		specificationContext.setRegistry(parserContext.getRegistry());, +		specificationContext.setRegistrar(parserContext);, +		specificationContext.setResourceLoader(parserContext.getReaderContext().getResourceLoader());, +		specificationContext.setEnvironment(parserContext.getDelegate().getEnvironment());, +		specificationContext.setProblemReporter(parserContext.getReaderContext().getProblemReporter());, +		return specificationContext;, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ComponentScanBeanDefinitionParser.java, +import org.springframework.context.config.SpecificationContext;, +			.execute(createSpecificationContext(parserContext));, +	// Adapt the given ParserContext instance into an SpecificationContext., +	// TODO SPR-7420: create a common ParserContext-to-SpecificationContext adapter utility, +	private SpecificationContext createSpecificationContext(ParserContext parserContext) {, +		SpecificationContext specificationContext = new SpecificationContext();, +		specificationContext.setRegistry(parserContext.getRegistry());, +		specificationContext.setRegistrar(parserContext);, +		specificationContext.setResourceLoader(parserContext.getReaderContext().getResourceLoader());, +		specificationContext.setEnvironment(parserContext.getDelegate().getEnvironment());, +		specificationContext.setProblemReporter(parserContext.getReaderContext().getProblemReporter());, +		return specificationContext;, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ComponentScanExecutor.java, +import org.springframework.context.config.SpecificationContext;, +	protected void doExecute(ComponentScanSpec spec, SpecificationContext specificationContext) {, +		BeanDefinitionRegistry registry = specificationContext.getRegistry();, +		ResourceLoader resourceLoader = specificationContext.getResourceLoader();, +		Environment environment = specificationContext.getEnvironment();, +		specificationContext.getRegistrar().registerComponent(compositeDef);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ComponentScanBeanDefinitionParser.java, +import org.springframework.context.config.SpecificationContext;, +			.execute(createSpecificationContext(parserContext));, +	// Adapt the given ParserContext instance into an SpecificationContext., +	// TODO SPR-7420: create a common ParserContext-to-SpecificationContext adapter utility, +	private SpecificationContext createSpecificationContext(ParserContext parserContext) {, +		SpecificationContext specificationContext = new SpecificationContext();, +		specificationContext.setRegistry(parserContext.getRegistry());, +		specificationContext.setRegistrar(parserContext);, +		specificationContext.setResourceLoader(parserContext.getReaderContext().getResourceLoader());, +		specificationContext.setEnvironment(parserContext.getDelegate().getEnvironment());, +		specificationContext.setProblemReporter(parserContext.getReaderContext().getProblemReporter());, +		return specificationContext;, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ComponentScanExecutor.java, +import org.springframework.context.config.SpecificationContext;, +	protected void doExecute(ComponentScanSpec spec, SpecificationContext specificationContext) {, +		BeanDefinitionRegistry registry = specificationContext.getRegistry();, +		ResourceLoader resourceLoader = specificationContext.getResourceLoader();, +		Environment environment = specificationContext.getEnvironment();, +		specificationContext.getRegistrar().registerComponent(compositeDef);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +import org.springframework.context.config.SpecificationContext;, +	private SpecificationContext specificationContext;, +		this.specificationContext = new SpecificationContext();, +		this.specificationContext.setRegistry(this.registry);, +		this.specificationContext.setRegistrar(new SimpleComponentRegistrar(this.registry));, +		this.specificationContext.setResourceLoader(resourceLoader);, +		this.specificationContext.setEnvironment(environment);, +		this.specificationContext.setProblemReporter(problemReporter);, +					spec.execute(this.specificationContext);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ComponentScanBeanDefinitionParser.java, +import org.springframework.context.config.SpecificationContext;, +			.execute(createSpecificationContext(parserContext));, +	// Adapt the given ParserContext instance into an SpecificationContext., +	// TODO SPR-7420: create a common ParserContext-to-SpecificationContext adapter utility, +	private SpecificationContext createSpecificationContext(ParserContext parserContext) {, +		SpecificationContext specificationContext = new SpecificationContext();, +		specificationContext.setRegistry(parserContext.getRegistry());, +		specificationContext.setRegistrar(parserContext);, +		specificationContext.setResourceLoader(parserContext.getReaderContext().getResourceLoader());, +		specificationContext.setEnvironment(parserContext.getDelegate().getEnvironment());, +		specificationContext.setProblemReporter(parserContext.getReaderContext().getProblemReporter());, +		return specificationContext;, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ComponentScanExecutor.java, +import org.springframework.context.config.SpecificationContext;, +	protected void doExecute(ComponentScanSpec spec, SpecificationContext specificationContext) {, +		BeanDefinitionRegistry registry = specificationContext.getRegistry();, +		ResourceLoader resourceLoader = specificationContext.getResourceLoader();, +		Environment environment = specificationContext.getEnvironment();, +		specificationContext.getRegistrar().registerComponent(compositeDef);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java, +import org.springframework.context.config.SpecificationContext;, +	private SpecificationContext specificationContext;, +		this.specificationContext = new SpecificationContext();, +		this.specificationContext.setRegistry(this.registry);, +		this.specificationContext.setRegistrar(new SimpleComponentRegistrar(this.registry));, +		this.specificationContext.setResourceLoader(resourceLoader);, +		this.specificationContext.setEnvironment(environment);, +		this.specificationContext.setProblemReporter(problemReporter);, +					spec.execute(this.specificationContext);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java, +import org.springframework.context.config.SpecificationContext;, +		final SpecificationContext specificationContext = createSpecificationContext(beanFactory);, +							processFeatureMethod(featureMethod, featureConfigBean, specificationContext, proxyCreator);, +			SpecificationContext specificationContext, EarlyBeanReferenceProxyCreator proxyCreator) {, +			spec.execute(specificationContext);, +	// TODO SPR-7420: consider unifying the two through a superinterface.]