[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AnnotationExceptionHandlerMethodResolver.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.annotation.AnnotatedElementUtils;, + * @author Juergen Hoeller, +						AnnotatedElementUtils.findMergedAnnotation(method, MessageExceptionHandler.class));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AnnotationExceptionHandlerMethodResolver.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.annotation.AnnotatedElementUtils;, + * @author Juergen Hoeller, +						AnnotatedElementUtils.findMergedAnnotation(method, MessageExceptionHandler.class));, +++ b/spring-tx/src/main/java/org/springframework/transaction/event/TransactionalEventListenerFactory.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.annotation.AnnotatedElementUtils;, + * annotated methods., +		return AnnotatedElementUtils.hasAnnotation(method, TransactionalEventListener.class);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AnnotationExceptionHandlerMethodResolver.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.annotation.AnnotatedElementUtils;, + * @author Juergen Hoeller, +						AnnotatedElementUtils.findMergedAnnotation(method, MessageExceptionHandler.class));, +++ b/spring-tx/src/main/java/org/springframework/transaction/event/TransactionalEventListenerFactory.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.annotation.AnnotatedElementUtils;, + * annotated methods., +		return AnnotatedElementUtils.hasAnnotation(method, TransactionalEventListener.class);, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ExceptionHandlerMethodResolver.java, +import org.springframework.core.annotation.AnnotatedElementUtils;, +			AnnotatedElementUtils.hasAnnotation(method, ExceptionHandler.class);, +	private void detectAnnotationExceptionMappings(Method method, List<Class<? extends Throwable>> result) {, +		ExceptionHandler ann = AnnotatedElementUtils.findMergedAnnotation(method, ExceptionHandler.class);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AnnotationExceptionHandlerMethodResolver.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.annotation.AnnotatedElementUtils;, + * @author Juergen Hoeller, +						AnnotatedElementUtils.findMergedAnnotation(method, MessageExceptionHandler.class));, +++ b/spring-tx/src/main/java/org/springframework/transaction/event/TransactionalEventListenerFactory.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.annotation.AnnotatedElementUtils;, + * annotated methods., +		return AnnotatedElementUtils.hasAnnotation(method, TransactionalEventListener.class);, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ExceptionHandlerMethodResolver.java, +import org.springframework.core.annotation.AnnotatedElementUtils;, +			AnnotatedElementUtils.hasAnnotation(method, ExceptionHandler.class);, +	private void detectAnnotationExceptionMappings(Method method, List<Class<? extends Throwable>> result) {, +		ExceptionHandler ann = AnnotatedElementUtils.findMergedAnnotation(method, ExceptionHandler.class);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolver.java, +import org.springframework.core.MethodIntrospector;, +import org.springframework.core.annotation.AnnotatedElementUtils;, +import org.springframework.util.ReflectionUtils.MethodFilter;, +	/**, +	 * MethodFilter that matches {@link InitBinder @InitBinder} methods., +	 */, +	public static final MethodFilter INIT_BINDER_METHODS = method ->, +			AnnotatedElementUtils.hasAnnotation(method, InitBinder.class);, +	/**, +	 * MethodFilter that matches {@link ModelAttribute @ModelAttribute} methods., +	 */, +	public static final MethodFilter MODEL_ATTRIBUTE_METHODS = method ->, +			(!AnnotatedElementUtils.hasAnnotation(method, RequestMapping.class) &&, +					AnnotatedElementUtils.hasAnnotation(method, ModelAttribute.class));, +, +, +	private static Log logger = LogFactory.getLog(ControllerMethodResolver.class);, +				Set<Method> attrMethods = MethodIntrospector.selectMethods(beanType, MODEL_ATTRIBUTE_METHODS);, +				Set<Method> binderMethods = MethodIntrospector.selectMethods(beanType, INIT_BINDER_METHODS);, +				.computeIfAbsent(handlerType,, +						clazz -> MethodIntrospector.selectMethods(handlerType, INIT_BINDER_METHODS)), +				.computeIfAbsent(handlerType,, +						clazz -> MethodIntrospector.selectMethods(handlerType, MODEL_ATTRIBUTE_METHODS)), +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AnnotationExceptionHandlerMethodResolver.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.annotation.AnnotatedElementUtils;, + * @author Juergen Hoeller, +						AnnotatedElementUtils.findMergedAnnotation(method, MessageExceptionHandler.class));, +++ b/spring-tx/src/main/java/org/springframework/transaction/event/TransactionalEventListenerFactory.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.core.annotation.AnnotatedElementUtils;, + * annotated methods., +		return AnnotatedElementUtils.hasAnnotation(method, TransactionalEventListener.class);, +++ b/spring-web/src/main/java/org/springframework/web/method/annotation/ExceptionHandlerMethodResolver.java, +import org.springframework.core.annotation.AnnotatedElementUtils;, +			AnnotatedElementUtils.hasAnnotation(method, ExceptionHandler.class);, +	private void detectAnnotationExceptionMappings(Method method, List<Class<? extends Throwable>> result) {, +		ExceptionHandler ann = AnnotatedElementUtils.findMergedAnnotation(method, ExceptionHandler.class);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/ControllerMethodResolver.java, +import org.springframework.core.MethodIntrospector;, +import org.springframework.core.annotation.AnnotatedElementUtils;, +import org.springframework.util.ReflectionUtils.MethodFilter;, +	/**, +	 * MethodFilter that matches {@link InitBinder @InitBinder} methods., +	 */, +	public static final MethodFilter INIT_BINDER_METHODS = method ->, +			AnnotatedElementUtils.hasAnnotation(method, InitBinder.class);, +	/**, +	 * MethodFilter that matches {@link ModelAttribute @ModelAttribute} methods., +	 */, +	public static final MethodFilter MODEL_ATTRIBUTE_METHODS = method ->, +			(!AnnotatedElementUtils.hasAnnotation(method, RequestMapping.class) &&, +					AnnotatedElementUtils.hasAnnotation(method, ModelAttribute.class));, +]