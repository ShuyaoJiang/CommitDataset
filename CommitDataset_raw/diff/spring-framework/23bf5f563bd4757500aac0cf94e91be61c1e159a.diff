[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/AutowireCapableBeanFactory.java, + * Copyright 2002-2013 the original author or authors., +	 * Destroy the given bean instance (typically coming from {@link #createBean}),, +	 * applying the {@link org.springframework.beans.factory.DisposableBean} contract as well as, +	 * registered {@link DestructionAwareBeanPostProcessor DestructionAwareBeanPostProcessors}., +	 * <p>Any exception that arises during destruction should be caught, +	 * and logged instead of propagated to the caller of this method., +	 * @param existingBean the bean instance to destroy, +	 */, +	void destroyBean(Object existingBean);, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/AutowireCapableBeanFactory.java, + * Copyright 2002-2013 the original author or authors., +	 * Destroy the given bean instance (typically coming from {@link #createBean}),, +	 * applying the {@link org.springframework.beans.factory.DisposableBean} contract as well as, +	 * registered {@link DestructionAwareBeanPostProcessor DestructionAwareBeanPostProcessors}., +	 * <p>Any exception that arises during destruction should be caught, +	 * and logged instead of propagated to the caller of this method., +	 * @param existingBean the bean instance to destroy, +	 */, +	void destroyBean(Object existingBean);, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +	public void destroyBean(Object existingBean) {, +		new DisposableBeanAdapter(existingBean, getBeanPostProcessors(), getAccessControlContext()).destroy();, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/AutowireCapableBeanFactory.java, + * Copyright 2002-2013 the original author or authors., +	 * Destroy the given bean instance (typically coming from {@link #createBean}),, +	 * applying the {@link org.springframework.beans.factory.DisposableBean} contract as well as, +	 * registered {@link DestructionAwareBeanPostProcessor DestructionAwareBeanPostProcessors}., +	 * <p>Any exception that arises during destruction should be caught, +	 * and logged instead of propagated to the caller of this method., +	 * @param existingBean the bean instance to destroy, +	 */, +	void destroyBean(Object existingBean);, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +	public void destroyBean(Object existingBean) {, +		new DisposableBeanAdapter(existingBean, getBeanPostProcessors(), getAccessControlContext()).destroy();, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java, +	private final AccessControlContext acc;, +, +	 * @param bean the bean instance (never {@code null}), +	 * @param postProcessors the List of BeanPostProcessors, +	 * (potentially DestructionAwareBeanPostProcessor), if any, +	 */, +	public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc) {, +		Assert.notNull(bean, "Disposable bean must not be null");, +		this.bean = bean;, +		this.beanName = null;, +		this.invokeDisposableBean = (this.bean instanceof DisposableBean);, +		this.nonPublicAccessAllowed = true;, +		this.acc = acc;, +		this.beanPostProcessors = filterPostProcessors(postProcessors);, +	}, +, +	/**, +	 * Create a new DisposableBeanAdapter for the given bean., +		this.acc = null;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/AutowireCapableBeanFactory.java, + * Copyright 2002-2013 the original author or authors., +	 * Destroy the given bean instance (typically coming from {@link #createBean}),, +	 * applying the {@link org.springframework.beans.factory.DisposableBean} contract as well as, +	 * registered {@link DestructionAwareBeanPostProcessor DestructionAwareBeanPostProcessors}., +	 * <p>Any exception that arises during destruction should be caught, +	 * and logged instead of propagated to the caller of this method., +	 * @param existingBean the bean instance to destroy, +	 */, +	void destroyBean(Object existingBean);, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +	public void destroyBean(Object existingBean) {, +		new DisposableBeanAdapter(existingBean, getBeanPostProcessors(), getAccessControlContext()).destroy();, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java, +	private final AccessControlContext acc;, +, +	 * @param bean the bean instance (never {@code null}), +	 * @param postProcessors the List of BeanPostProcessors, +	 * (potentially DestructionAwareBeanPostProcessor), if any, +	 */, +	public DisposableBeanAdapter(Object bean, List<BeanPostProcessor> postProcessors, AccessControlContext acc) {, +		Assert.notNull(bean, "Disposable bean must not be null");, +		this.bean = bean;, +		this.beanName = null;, +		this.invokeDisposableBean = (this.bean instanceof DisposableBean);, +		this.nonPublicAccessAllowed = true;, +		this.acc = acc;, +		this.beanPostProcessors = filterPostProcessors(postProcessors);, +	}, +]