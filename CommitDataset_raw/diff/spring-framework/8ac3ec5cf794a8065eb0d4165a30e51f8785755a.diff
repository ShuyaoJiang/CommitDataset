[+++ b/spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java, + * {@code DeferredResult} provides an alternative to using a {@link Callable} for, + * asynchronous request processing. While a {@code Callable} is executed concurrently, + * on behalf of the application, with a {@code DeferredResult} the application can, + * produce the result from a thread of its choice., + * <p>Subclasses can extend this class to easily associate additional data or behavior, + * with the {@link DeferredResult}. For example, one might want to associate the user, + * used to create the {@link DeferredResult} by extending the class and adding an, + * additional property for the user. In this way, the user could easily be accessed, + * later without the need to use a data structure to do the mapping., + * <p>An example of associating additional behavior to this class might be realized, + * by extending the class to implement an additional interface. For example, one, + * might want to implement {@link Comparable} so that when the {@link DeferredResult}, + * is added to a {@link PriorityQueue} it is handled in the correct order., +	private static final Log logger = LogFactory.getLog(DeferredResult.class);, +, +	 * @param timeout timeout value in milliseconds (ignored if {@code null}), +	 * @since 4.0, +	 * @since 4.0, +	 * Register code to invoke when the async request times out., +	 * <p>This method is called from a container thread when an async request, +	 * times out before the {@code DeferredResult} has been populated., +	 * It may invoke {@link DeferredResult#setResult setResult} or, +	 * {@link DeferredResult#setErrorResult setErrorResult} to resume processing., +	 * Register code to invoke when the async request completes., +	 * <p>This method is called from a container thread when an async request, +	 * completed for any reason including timeout and network error. This is useful, +	 * for detecting that a {@code DeferredResult} instance is no longer usable., +	 * @return "true" if the result was set and passed on for handling;, +	 * "false" if the result was already set or the async request expired, +	 * Set an error value for the {@link DeferredResult} and handle it., +	 * The value may be an {@link Exception} or {@link Throwable} in which case, +	 * it will be processed as if a handler raised the exception., +	 * handling; "false" if the result was already set or the async request expired]