[+++ b/org.springframework.core/src/main/java/org/springframework/core/env/AbstractEnvironment.java, + * Copyright 2002-2012 the original author or authors., +, +, +import static java.lang.String.*;, +import static org.springframework.util.StringUtils.*;, +, +	private Set<String> defaultProfiles =, +			new LinkedHashSet<String>(this.getReservedDefaultProfiles());, +, +	private final MutablePropertySources propertySources =, +			new MutablePropertySources(this.logger);, +, +	private final ConfigurablePropertyResolver propertyResolver =, +			new PropertySourcesPropertyResolver(this.propertySources);, +	/**, +	 * Create a new {@code Environment} instance, calling back to, +	 * {@link #customizePropertySources(MutablePropertySources)} during construction to, +	 * allow subclasses to contribute or manipulate {@link PropertySource} instances as, +	 * appropriate., +	 * @see #customizePropertySources(MutablePropertySources), +	 */, +		if (this.logger.isDebugEnabled()) {, +			this.logger.debug(format("Initializing new %s", name));, +		this.customizePropertySources(this.propertySources);, +, +		if (this.logger.isDebugEnabled()) {, +			this.logger.debug(format(, +					"Initialized %s with PropertySources %s", name, this.propertySources));, +		}, +	}, +, +, +	 * <h2>A warning about instance variable access</h2>, +	 * Instance variables declared in subclasses and having default initial values should, +	 * <em>not</em> be accessed from within this method. Due to Java object creation, +	 * lifecycle constraints, any initial value will not yet be assigned when this, +	 * callback is invoked by the {@link #AbstractEnvironment()} constructor, which may, +	 * lead to a {@code NullPointerException} or other problems. If you need to access, +	 * default values of instance variables, leave this method as a no-op and perform, +	 * property source manipulation and instance variable access directly within the, +	 * subclass constructor. Note that <em>assigning</em> values to instance variables is, +	 * not problematic; it is only attempting to read default values that must be avoided., +	 *, +		if (this.logger.isDebugEnabled()) {, +			this.logger.debug(format("Activating profile '%s'", profile));, +		}, +							logger.info(format("Caught AccessControlException when " +, +									"accessing system environment variable [%s]; its " +, +									"value will be returned [null]. Reason: %s",, +									variableName, ex.getMessage()));, +							logger.info(format("Caught AccessControlException when " +, +									"accessing system property [%s]; its value will be " +, +									"returned [null]. Reason: %s",, +									propertyName, ex.getMessage()));, +				getClass().getSimpleName(), this.activeProfiles, this.defaultProfiles,, +				this.propertySources);]