[+++ b/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +		List<Integer> resets = new ArrayList<Integer>();, +, +		int updateSecond = findNext(this.seconds, second, 60, calendar, Calendar.SECOND, Collections.<Integer> emptyList());, +		if (second == updateSecond) {, +			resets.add(Calendar.SECOND);, +		}, +		int updateMinute = findNext(this.minutes, minute, 60, calendar, Calendar.MINUTE, resets);, +		if (minute == updateMinute) {, +			resets.add(Calendar.MINUTE);, +		}, +		int updateHour = findNext(this.hours, hour, 24, calendar, Calendar.HOUR_OF_DAY, resets);, +		if (hour == updateHour) {, +			resets.add(Calendar.HOUR_OF_DAY);, +		}, +		int updateDayOfMonth = findNextDay(calendar, this.daysOfMonth, dayOfMonth, daysOfWeek, dayOfWeek, 366, resets);, +		if (dayOfMonth == updateDayOfMonth) {, +			resets.add(Calendar.DAY_OF_MONTH);, +		}, +		month = findNext(this.months, month, 12, calendar, Calendar.MONTH, resets);, +	private int findNextDay(Calendar calendar, BitSet daysOfMonth, int dayOfMonth, BitSet daysOfWeek,, +			int dayOfWeek, int max, List<Integer> resets) {, +			reset(calendar, resets);, +		return dayOfMonth;, +	private int findNext(BitSet bits, int value, int max, Calendar calendar, int field, List<Integer> lowerOrders) {, +		return nextValue;, +	private void reset(Calendar calendar, List<Integer> fields) {, +++ b/org.springframework.context/src/main/java/org/springframework/scheduling/support/CronSequenceGenerator.java, +import java.util.ArrayList;, +import java.util.Collections;, +import java.util.List;, +		List<Integer> resets = new ArrayList<Integer>();, +, +		int updateSecond = findNext(this.seconds, second, 60, calendar, Calendar.SECOND, Collections.<Integer> emptyList());, +		if (second == updateSecond) {, +			resets.add(Calendar.SECOND);, +		}, +		int updateMinute = findNext(this.minutes, minute, 60, calendar, Calendar.MINUTE, resets);, +		if (minute == updateMinute) {, +			resets.add(Calendar.MINUTE);, +		}, +		int updateHour = findNext(this.hours, hour, 24, calendar, Calendar.HOUR_OF_DAY, resets);, +		if (hour == updateHour) {, +			resets.add(Calendar.HOUR_OF_DAY);, +		}, +		int updateDayOfMonth = findNextDay(calendar, this.daysOfMonth, dayOfMonth, daysOfWeek, dayOfWeek, 366, resets);, +		if (dayOfMonth == updateDayOfMonth) {, +			resets.add(Calendar.DAY_OF_MONTH);, +		}, +		month = findNext(this.months, month, 12, calendar, Calendar.MONTH, resets);, +	private int findNextDay(Calendar calendar, BitSet daysOfMonth, int dayOfMonth, BitSet daysOfWeek,, +			int dayOfWeek, int max, List<Integer> resets) {, +			reset(calendar, resets);, +		return dayOfMonth;, +	private int findNext(BitSet bits, int value, int max, Calendar calendar, int field, List<Integer> lowerOrders) {, +		return nextValue;, +	private void reset(Calendar calendar, List<Integer> fields) {, +++ b/org.springframework.context/src/test/java/org/springframework/scheduling/support/CronTriggerTests.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.scheduling.support;, +, +import static org.junit.Assert.assertEquals;, +, +import java.util.Calendar;, +import java.util.Date;, +import java.util.GregorianCalendar;, +, +import org.junit.Before;, +import org.junit.Test;, +, +import org.springframework.scheduling.TriggerContext;, +, +/**, + * @author Dave Syer, + * @author Mark Fisher, + */, +public class CronTriggerTests {, +, +	private Calendar calendar = new GregorianCalendar();, +, +	private Date date = new Date();, +]