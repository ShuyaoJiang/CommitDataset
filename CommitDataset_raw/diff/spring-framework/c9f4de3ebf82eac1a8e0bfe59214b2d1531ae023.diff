[+++ b/org.springframework.web/src/main/java/org/springframework/http/HttpHeaders.java, +import java.text.ParseException;, +import java.text.SimpleDateFormat;, +import java.util.Date;, +import java.util.TimeZone;, +	private static final String ACCEPT = "Accept";, +	private static final String ACCEPT_CHARSET = "Accept-Charset";, +	private static final String ALLOW = "Allow";, +	private static final String CONTENT_LENGTH = "Content-Length";, +	private static final String CONTENT_TYPE = "Content-Type";, +	private static final String DATE = "Date";, +, +	private static final String ETAG = "ETag";, +, +	private static final String EXPIRES = "Expires";, +, +	private static final String IF_NONE_MATCH = "If-None-Match";, +, +	private static final String LAST_MODIFIED = "Last-Modified";, +, +	private static final String LOCATION = "Location";, +, +, +	private static final String[] DATE_FORMATS = new String[] {, +		"EEE, dd MMM yyyy HH:mm:ss zzz",, +        "EEE, dd-MMM-yy HH:mm:ss zzz",, +        "EEE MMM dd HH:mm:ss yyyy", +	};, +, +	private static TimeZone GMT = TimeZone.getTimeZone("GMT");, +	 * Set the list of acceptable {@linkplain MediaType media types}, as specified by the {@code Accept} header., +	 * Return the list of acceptable {@linkplain MediaType media types}, as specified by the {@code Accept} header., +	 * Set the list of acceptable {@linkplain Charset charsets}, as specified by the {@code Accept-Charset} header., +	 * Return the list of acceptable {@linkplain Charset charsets}, as specified by the {@code Accept-Charset}, +	 * Set the set of allowed {@link HttpMethod HTTP methods}, as specified by the {@code Allow} header., +	 * Return the set of allowed {@link HttpMethod HTTP methods}, as specified by the {@code Allow} header., +	 * Set the length of the body in bytes, as specified by the {@code Content-Length} header., +	 * Return the length of the body in bytes, as specified by the {@code Content-Length} header., +	 * Set the {@linkplain MediaType media type} of the body, as specified by the {@code Content-Type} header., +	 * Return the {@linkplain MediaType media type} of the body, as specified by the {@code Content-Type} header., +	 * <p>Returns {@code null} when the content-type is unknown., +	 * Sets the date and time at which the message was created, as specified by the {@code Date} header., +	 * <p>The date should be specified as the number of milliseconds since January 1, 1970 GMT., +	 * @param date the date, +	 */, +	public void setDate(long date) {, +		setDate(DATE, date);, +	}, +, +	/**, +	 * Returns the date and time at which the message was created, as specified by the {@code Date} header., +	 * <p>The date is returned as the number of milliseconds since January 1, 1970 GMT. Returns -1 when the date is unknown., +	 * @return the creation date/time, +	 * @throws IllegalArgumentException if the value can't be converted to a date, +	 */, +	public long getDate() {, +		return getFirstDate(DATE);, +	}, +, +	/**, +	 * Sets the (new) entity tag of the body, as specified by the {@code ETag} header., +	 * @param eTag the new entity tag, +	 */, +	public void setETag(String eTag) {, +		set(ETAG, quote(eTag));, +	}, +, +	/**, +	 * Returns the entity tag of the body, as specified by the {@code ETag} header., +	 * @return the entity tag, +	 */, +	public String getETag() {, +		return unquote(getFirst(ETAG));, +	}, +, +	/**, +	 * Sets the date and time at which the message is no longer valid, as specified by the {@code Expires} header., +	 * <p>The date should be specified as the number of milliseconds since January 1, 1970 GMT., +	 * @param expires the new expires header value, +	 */, +	public void setExpires(long expires) {, +		setDate(EXPIRES, expires);, +	}, +, +	/**, +	 * Returns the date and time at which the message is no longer valid, as specified by the {@code Expires} header., +	 * <p>The date is returned as the number of milliseconds since January 1, 1970 GMT. Returns -1 when the date is unknown., +	 * @return the expires value, +	 */, +	public long getExpires() {, +		return getFirstDate(EXPIRES);, +	}, +, +	/**, +	 * Sets the (new) value of the {@code If-None-Match} header., +	 * @param ifNoneMatch the new value of the header, +	 */, +	public void setIfNoneMatch(String ifNoneMatch) {, +		set(IF_NONE_MATCH, quote(ifNoneMatch));, +	}]