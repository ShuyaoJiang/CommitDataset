[+++ b/spring-orm-hibernate5/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBean.java, +import org.hibernate.boot.MetadataSources;, +import org.hibernate.boot.registry.BootstrapServiceRegistryBuilder;, +import org.springframework.util.Assert;, +	private MetadataSources metadataSources;, +, +	private ResourcePatternResolver resourcePatternResolver;, +	/**, +	 * Specify a Hibernate {@link MetadataSources} service to use (e.g. reusing an, +	 * existing one), potentially populated with a custom Hibernate bootstrap, +	 * {@link org.hibernate.service.ServiceRegistry} as well., +	 * @since 4.3, +	 */, +	public void setMetadataSources(MetadataSources metadataSources) {, +		Assert.notNull(metadataSources, "MetadataSources must not be null");, +		this.metadataSources = metadataSources;, +	}, +, +	/**, +	 * Determine the Hibernate {@link MetadataSources} to use., +	 * <p>Can also be externally called to initialize and pre-populate a {@link MetadataSources}, +	 * instance which is then going to be used for {@link SessionFactory} building., +	 * @return the MetadataSources to use (never {@code null}), +	 * @since 4.3, +	 * @see LocalSessionFactoryBuilder#LocalSessionFactoryBuilder(DataSource, ResourceLoader, MetadataSources), +	 */, +	public MetadataSources getMetadataSources() {, +		if (this.metadataSources == null) {, +			this.metadataSources = new MetadataSources(new BootstrapServiceRegistryBuilder().build());, +		}, +		return this.metadataSources;, +	}, +, +	/**, +	 * Specify a Spring {@link ResourceLoader} to use for Hibernate metadata., +	 * @param resourceLoader the ResourceLoader to use (never {@code null}), +	 */, +	/**, +	 * Determine the Spring {@link ResourceLoader} to use for Hibernate metadata., +	 * @return the ResourceLoader to use (never {@code null}), +	 * @since 4.3, +	 */, +	public ResourceLoader getResourceLoader() {, +		if (this.resourcePatternResolver == null) {, +			this.resourcePatternResolver = new PathMatchingResourcePatternResolver();, +		}, +		return this.resourcePatternResolver;, +	}, +, +		LocalSessionFactoryBuilder sfb = new LocalSessionFactoryBuilder(, +				this.dataSource, getResourceLoader(), getMetadataSources());, +++ b/spring-orm-hibernate5/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBean.java, +import org.hibernate.boot.MetadataSources;, +import org.hibernate.boot.registry.BootstrapServiceRegistryBuilder;, +import org.springframework.util.Assert;, +	private MetadataSources metadataSources;, +, +	private ResourcePatternResolver resourcePatternResolver;, +	/**, +	 * Specify a Hibernate {@link MetadataSources} service to use (e.g. reusing an, +	 * existing one), potentially populated with a custom Hibernate bootstrap, +	 * {@link org.hibernate.service.ServiceRegistry} as well., +	 * @since 4.3, +	 */, +	public void setMetadataSources(MetadataSources metadataSources) {, +		Assert.notNull(metadataSources, "MetadataSources must not be null");, +		this.metadataSources = metadataSources;, +	}, +, +	/**, +	 * Determine the Hibernate {@link MetadataSources} to use., +	 * <p>Can also be externally called to initialize and pre-populate a {@link MetadataSources}, +	 * instance which is then going to be used for {@link SessionFactory} building., +	 * @return the MetadataSources to use (never {@code null}), +	 * @since 4.3, +	 * @see LocalSessionFactoryBuilder#LocalSessionFactoryBuilder(DataSource, ResourceLoader, MetadataSources), +	 */, +	public MetadataSources getMetadataSources() {, +		if (this.metadataSources == null) {, +			this.metadataSources = new MetadataSources(new BootstrapServiceRegistryBuilder().build());, +		}, +		return this.metadataSources;, +	}, +, +	/**, +	 * Specify a Spring {@link ResourceLoader} to use for Hibernate metadata., +	 * @param resourceLoader the ResourceLoader to use (never {@code null}), +	 */, +	/**, +	 * Determine the Spring {@link ResourceLoader} to use for Hibernate metadata., +	 * @return the ResourceLoader to use (never {@code null}), +	 * @since 4.3, +	 */, +	public ResourceLoader getResourceLoader() {, +		if (this.resourcePatternResolver == null) {, +			this.resourcePatternResolver = new PathMatchingResourcePatternResolver();, +		}, +		return this.resourcePatternResolver;, +	}, +]