[+++ b/spring-framework-reference/src/beans.xml, +            linkend="beans-factory-scopes-session">session</link>, +            <entry><para>Scopes a single bean definition to the lifecycle of an, +        <para>Being able to define a bean scoped to an HTTP request or, +        dependencies). If you want to inject (for example) an HTTP request, +        that exposes the same public interface as the scoped object but that, +        the relevant scope (for example an HTTP request) and delegate method, +    <lineannotation>&lt;!-- an HTTP <interfacename>Session</interfacename>-scoped bean exposed as a proxy --&gt;</lineannotation>, +        you want when you inject an HTTP, +        an HTTP <interfacename>Session</interfacename>, we want to see and use, +        scope. The session scope implementation, for example, will return the, +      and <code>name</code>.</para>, +      <para>You can use the <interfacename>@Bean</interfacename> annotation in, +      a Configuration-class or in a Component-class.</para>, +          <title>Using the <interfacename>@Scope</interfacename> annotation</title>, +          <para>The default scope is <literal>"singleton"</literal>, but, +          this can be overridden by using the, +          <interfacename>@Scope</interfacename> annotation:, +<programlisting, +    <emphasis role="bold">@Scope("prototype")</emphasis>, +          the following: <programlisting language="java">// an HTTP Session-scoped bean exposed as a proxy, +<emphasis role="bold">@Scope(value = "session", proxyMode = ScopedProxyMode.TARGET_CLASS)</emphasis>, +          <code>createCommand()</code> method is overridden in such a way that it, +@Scope("prototype"), + @Bean @Scope("prototype"), + @Bean @Scope(value = "session", proxyMode = ScopedProxyMode.TARGET_CLASS), +      other scopes are needed. Therefore Spring 2.5 introduced a new, +      <programlisting language="java"><emphasis role="bold">@Scope("prototype")</emphasis>]