[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericTypeConverter.java, + * TODO - allow registration of converters to apply on presence of annotation values on setter or field, +		if (sourceType.isAssignableTo(targetType)) {, +			return NoOpConversionExecutor.INSTANCE;, +		}, +		Converter converter = findRegisteredConverter(sourceType.getType(), targetType.getType());, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericTypeConverter.java, + * TODO - allow registration of converters to apply on presence of annotation values on setter or field, +		if (sourceType.isAssignableTo(targetType)) {, +			return NoOpConversionExecutor.INSTANCE;, +		}, +		Converter converter = findRegisteredConverter(sourceType.getType(), targetType.getType());, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/HelperTests.java, +		checkMatch(new Class[]{String.class,Integer.TYPE},new Class[]{String.class,Integer.class},typeConverter,ArgsMatchKind.REQUIRES_CONVERSION,1);, +		checkMatch(new Class[]{Integer.TYPE,String.class},new Class[]{Integer.class, String.class},typeConverter,ArgsMatchKind.REQUIRES_CONVERSION,0);, +		checkMatch(new Class[]{Integer.TYPE,Sub.class},new Class[]{Integer.class, Super.class},typeConverter,ArgsMatchKind.REQUIRES_CONVERSION,0);, +		checkMatch(new Class[]{Integer.TYPE,Sub.class,Boolean.TYPE},new Class[]{Integer.class, Super.class,Boolean.class},typeConverter,ArgsMatchKind.REQUIRES_CONVERSION,0,2);]