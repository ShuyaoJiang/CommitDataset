[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import java.lang.annotation.Annotation;, +import java.util.ArrayList;, +import org.springframework.core.io.support.ResourcePropertySource;, +			if (ConfigurationClassUtils.isConfigurationCandidate(memberClassMetadata)) {, +			findAllAnnotationAttributes(Import.class, metadata.getClassName(), true);, +, +	/**, +	 * Return a list of attribute maps for all declarations of the given annotation, +	 * on the given annotated class using the given MetadataReaderFactory to introspect, +	 * annotation metadata. Meta-annotations are ordered first in the list, and if the, +	 * target annotation is declared directly on the class, its map of attributes will be, +	 * ordered last in the list., +	 * @param targetAnnotation the annotation to search for, both locally and as a meta-annotation, +	 * @param annotatedClassName the class to inspect, +	 * @param classValuesAsString whether class attributes should be returned as strings, +	 */, +	private List<Map<String, Object>> findAllAnnotationAttributes(, +			Class<? extends Annotation> targetAnnotation, String annotatedClassName,, +			boolean classValuesAsString) throws IOException {, +, +		List<Map<String, Object>> allAttribs = new ArrayList<Map<String, Object>>();, +, +		MetadataReader reader = this.metadataReaderFactory.getMetadataReader(annotatedClassName);, +		AnnotationMetadata metadata = reader.getAnnotationMetadata();, +		String targetAnnotationType = targetAnnotation.getName();, +, +		for (String annotationType : metadata.getAnnotationTypes()) {, +			if (annotationType.equals(targetAnnotationType)) {, +				continue;, +			}, +			MetadataReader metaReader = this.metadataReaderFactory.getMetadataReader(annotationType);, +			Map<String, Object> targetAttribs =, +				metaReader.getAnnotationMetadata().getAnnotationAttributes(targetAnnotationType, classValuesAsString);, +			if (targetAttribs != null) {, +				allAttribs.add(targetAttribs);, +			}, +		}, +, +		Map<String, Object> localAttribs =, +			metadata.getAnnotationAttributes(targetAnnotationType, classValuesAsString);, +		if (localAttribs != null) {, +			allAttribs.add(localAttribs);, +		}, +, +		return allAttribs;, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import java.lang.annotation.Annotation;, +import java.util.ArrayList;, +import org.springframework.core.io.support.ResourcePropertySource;, +			if (ConfigurationClassUtils.isConfigurationCandidate(memberClassMetadata)) {, +			findAllAnnotationAttributes(Import.class, metadata.getClassName(), true);, +, +	/**, +	 * Return a list of attribute maps for all declarations of the given annotation, +	 * on the given annotated class using the given MetadataReaderFactory to introspect, +	 * annotation metadata. Meta-annotations are ordered first in the list, and if the, +	 * target annotation is declared directly on the class, its map of attributes will be, +	 * ordered last in the list., +	 * @param targetAnnotation the annotation to search for, both locally and as a meta-annotation, +	 * @param annotatedClassName the class to inspect, +	 * @param classValuesAsString whether class attributes should be returned as strings, +	 */, +	private List<Map<String, Object>> findAllAnnotationAttributes(, +			Class<? extends Annotation> targetAnnotation, String annotatedClassName,, +			boolean classValuesAsString) throws IOException {, +, +		List<Map<String, Object>> allAttribs = new ArrayList<Map<String, Object>>();, +, +		MetadataReader reader = this.metadataReaderFactory.getMetadataReader(annotatedClassName);, +		AnnotationMetadata metadata = reader.getAnnotationMetadata();, +		String targetAnnotationType = targetAnnotation.getName();, +, +		for (String annotationType : metadata.getAnnotationTypes()) {, +			if (annotationType.equals(targetAnnotationType)) {, +				continue;, +			}, +			MetadataReader metaReader = this.metadataReaderFactory.getMetadataReader(annotationType);, +			Map<String, Object> targetAttribs =, +				metaReader.getAnnotationMetadata().getAnnotationAttributes(targetAnnotationType, classValuesAsString);, +			if (targetAttribs != null) {, +				allAttribs.add(targetAttribs);, +			}, +		}, +, +		Map<String, Object> localAttribs =, +			metadata.getAnnotationAttributes(targetAnnotationType, classValuesAsString);, +		if (localAttribs != null) {, +			allAttribs.add(localAttribs);, +		}, +, +		return allAttribs;, +	}, +, +++ b/org.springframework.core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java, +import java.lang.annotation.Annotation;, +import java.util.ArrayList;]