[+++ b/spring-web/src/main/java/org/springframework/web/method/support/ModelAndViewContainer.java, +	private boolean ignoreDefaultModelOnRedirect = false;, +	private Object view;, +	private boolean requestHandled = false;, +, +, +	/**, +	 * By default the content of the "default" model is used both during, +	 * rendering and redirect scenarios. Alternatively controller methods, +	 * can declare an argument of type {@code RedirectAttributes} and use, +	 * it to provide attributes to prepare the redirect URL., +	 * <p>Setting this flag to {@code true} guarantees the "default" model is, +	 * never used in a redirect scenario even if a RedirectAttributes argument, +	 * is not declared. Setting it to {@code false} means the "default" model, +	 * may be used in a redirect if the controller method doesn't declare a, +	 * RedirectAttributes argument., +	 * <p>The default setting is {@code false}., +	 */, +	public void setIgnoreDefaultModelOnRedirect(boolean ignoreDefaultModelOnRedirect) {, +		this.ignoreDefaultModelOnRedirect = ignoreDefaultModelOnRedirect;, +	}, +	 * Return the model to use -- either the "default" or the "redirect" model., +	 * The default model is used if {@code redirectModelScenario=false} or, +	 * there is no redirect model (i.e. RedirectAttributes was not declared as, +	 * a method argument) and {@code ignoreDefaultModelOnRedirect=false}., +	 * Whether the controller has returned a redirect instruction, e.g. a, +	 * "redirect:" prefixed view name, a RedirectView instance, etc., +	 * Whether the request has been handled fully within the handler, e.g., +	 * {@code @ResponseBody} method, and therefore view resolution is not, +	 * necessary. This flag can also be set when controller methods declare an, +	 * argument of type {@code ServletResponse} or {@code OutputStream})., +	 * <p>The default value is {@code false}., +	 */, +	public void setRequestHandled(boolean requestHandled) {, +		this.requestHandled = requestHandled;, +	}, +, +	/**, +	 * Whether the request has been handled fully within the handler., +	 */, +	public boolean isRequestHandled() {, +		return this.requestHandled;, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/web/method/support/ModelAndViewContainer.java, +	private boolean ignoreDefaultModelOnRedirect = false;, +	private Object view;, +	private boolean requestHandled = false;, +, +, +	/**, +	 * By default the content of the "default" model is used both during, +	 * rendering and redirect scenarios. Alternatively controller methods, +	 * can declare an argument of type {@code RedirectAttributes} and use, +	 * it to provide attributes to prepare the redirect URL., +	 * <p>Setting this flag to {@code true} guarantees the "default" model is, +	 * never used in a redirect scenario even if a RedirectAttributes argument, +	 * is not declared. Setting it to {@code false} means the "default" model, +	 * may be used in a redirect if the controller method doesn't declare a, +	 * RedirectAttributes argument., +	 * <p>The default setting is {@code false}., +	 */, +	public void setIgnoreDefaultModelOnRedirect(boolean ignoreDefaultModelOnRedirect) {, +		this.ignoreDefaultModelOnRedirect = ignoreDefaultModelOnRedirect;, +	}, +	 * Return the model to use -- either the "default" or the "redirect" model., +	 * The default model is used if {@code redirectModelScenario=false} or, +	 * there is no redirect model (i.e. RedirectAttributes was not declared as, +	 * a method argument) and {@code ignoreDefaultModelOnRedirect=false}., +	 * Whether the controller has returned a redirect instruction, e.g. a, +	 * "redirect:" prefixed view name, a RedirectView instance, etc., +	 * Whether the request has been handled fully within the handler, e.g., +	 * {@code @ResponseBody} method, and therefore view resolution is not, +	 * necessary. This flag can also be set when controller methods declare an, +	 * argument of type {@code ServletResponse} or {@code OutputStream})., +	 * <p>The default value is {@code false}., +	 */, +	public void setRequestHandled(boolean requestHandled) {, +		this.requestHandled = requestHandled;, +	}, +, +	/**, +	 * Whether the request has been handled fully within the handler., +	 */, +	public boolean isRequestHandled() {, +		return this.requestHandled;, +	}, +, +	/**, +++ b/spring-web/src/test/java/org/springframework/web/method/annotation/ModelFactoryTests.java, + * Copyright 2002-2014 the original author or authors., +import static org.junit.Assert.assertEquals;, +import static org.junit.Assert.assertNull;, +import static org.junit.Assert.assertSame;, +import static org.junit.Assert.assertTrue;, +import static org.junit.Assert.fail;, +import static org.mockito.BDDMockito.given;, +import static org.mockito.BDDMockito.mock;, +]