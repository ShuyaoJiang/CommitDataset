[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java, +import org.springframework.web.HttpRequestHandler;, +import org.springframework.web.cors.CorsConfiguration;, +import org.springframework.web.cors.CorsConfigurationSource;, +import org.springframework.web.cors.CorsProcessor;, +import org.springframework.web.cors.CorsUtils;, +import org.springframework.web.cors.DefaultCorsProcessor;, +import org.springframework.web.cors.UrlBasedCorsConfigurationSource;, +	private class PreFlightHandler implements HttpRequestHandler, CorsConfigurationSource {, +, +		@Override, +		public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {, +			return this.config;, +		}, +	private class CorsInterceptor extends HandlerInterceptorAdapter implements CorsConfigurationSource {, +, +		@Override, +		public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {, +			return this.config;, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java, +import org.springframework.web.HttpRequestHandler;, +import org.springframework.web.cors.CorsConfiguration;, +import org.springframework.web.cors.CorsConfigurationSource;, +import org.springframework.web.cors.CorsProcessor;, +import org.springframework.web.cors.CorsUtils;, +import org.springframework.web.cors.DefaultCorsProcessor;, +import org.springframework.web.cors.UrlBasedCorsConfigurationSource;, +	private class PreFlightHandler implements HttpRequestHandler, CorsConfigurationSource {, +, +		@Override, +		public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {, +			return this.config;, +		}, +	private class CorsInterceptor extends HandlerInterceptorAdapter implements CorsConfigurationSource {, +, +		@Override, +		public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {, +			return this.config;, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractUrlHandlerMapping.java, +import org.springframework.web.servlet.support.MatchableHandlerMapping;, +import org.springframework.web.servlet.support.RequestMatchResult;, +public abstract class AbstractUrlHandlerMapping extends AbstractHandlerMapping, +		implements MatchableHandlerMapping {, +	@Override, +	public RequestMatchResult match(HttpServletRequest request, String pattern) {, +		String lookupPath = getUrlPathHelper().getLookupPathForRequest(request);, +		if (getPathMatcher().match(pattern, lookupPath)) {, +			return new RequestMatchResult(pattern, lookupPath, getPathMatcher());, +		}, +		else if (useTrailingSlashMatch()) {, +			if (!pattern.endsWith("/") && getPathMatcher().match(pattern + "/", lookupPath)) {, +				return new RequestMatchResult(pattern + "/", lookupPath, getPathMatcher());, +			}, +		}, +		return null;, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java, +import org.springframework.web.HttpRequestHandler;, +import org.springframework.web.cors.CorsConfiguration;, +import org.springframework.web.cors.CorsConfigurationSource;, +import org.springframework.web.cors.CorsProcessor;, +import org.springframework.web.cors.CorsUtils;, +import org.springframework.web.cors.DefaultCorsProcessor;, +import org.springframework.web.cors.UrlBasedCorsConfigurationSource;, +	private class PreFlightHandler implements HttpRequestHandler, CorsConfigurationSource {, +, +		@Override, +		public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {, +			return this.config;, +		}, +	private class CorsInterceptor extends HandlerInterceptorAdapter implements CorsConfigurationSource {, +, +		@Override, +		public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {, +			return this.config;, +		}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractUrlHandlerMapping.java, +import org.springframework.web.servlet.support.MatchableHandlerMapping;, +import org.springframework.web.servlet.support.RequestMatchResult;, +public abstract class AbstractUrlHandlerMapping extends AbstractHandlerMapping, +		implements MatchableHandlerMapping {, +	@Override, +	public RequestMatchResult match(HttpServletRequest request, String pattern) {, +		String lookupPath = getUrlPathHelper().getLookupPathForRequest(request);, +		if (getPathMatcher().match(pattern, lookupPath)) {, +			return new RequestMatchResult(pattern, lookupPath, getPathMatcher());, +		}, +		else if (useTrailingSlashMatch()) {, +			if (!pattern.endsWith("/") && getPathMatcher().match(pattern + "/", lookupPath)) {, +				return new RequestMatchResult(pattern + "/", lookupPath, getPathMatcher());, +			}, +		}, +		return null;, +	}, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +import java.util.Set;]