[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, + * Copyright 2002-2015 the original author or authors., +	protected Object[] constructorArgs;, +	protected Class<?>[] constructorArgTypes;, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, + * Copyright 2002-2015 the original author or authors., +	protected Object[] constructorArgs;, +	protected Class<?>[] constructorArgTypes;, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ObjenesisCglibAopProxy.java, +	private static final SpringObjenesis objenesis = new SpringObjenesis();, +		Class<?> proxyClass = enhancer.createClass();, +		Object proxyInstance = null;, +, +		if (objenesis.isWorthTrying()) {, +				proxyInstance = objenesis.newInstance(proxyClass, enhancer.getUseCache());, +				logger.debug("Unable to instantiate proxy using Objenesis, " +, +						"falling back to regular proxy construction", ex);, +		if (proxyInstance == null) {, +			// Regular instantiation via default constructor..., +			try {, +				proxyInstance = (this.constructorArgs != null ?, +						proxyClass.getConstructor(this.constructorArgTypes).newInstance(this.constructorArgs) :, +						proxyClass.newInstance());, +			}, +			catch (Exception ex) {, +				throw new AopConfigException("Unable to instantiate proxy using Objenesis, " +, +						"and regular proxy instantiation via default constructor fails as well", ex);, +			}, +		}, +, +		((Factory) proxyInstance).setCallbacks(callbacks);, +		return proxyInstance;, +	}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, + * Copyright 2002-2015 the original author or authors., +	protected Object[] constructorArgs;, +	protected Class<?>[] constructorArgTypes;, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ObjenesisCglibAopProxy.java, +	private static final SpringObjenesis objenesis = new SpringObjenesis();, +		Class<?> proxyClass = enhancer.createClass();, +		Object proxyInstance = null;, +, +		if (objenesis.isWorthTrying()) {, +				proxyInstance = objenesis.newInstance(proxyClass, enhancer.getUseCache());, +				logger.debug("Unable to instantiate proxy using Objenesis, " +, +						"falling back to regular proxy construction", ex);, +		if (proxyInstance == null) {, +			// Regular instantiation via default constructor..., +			try {, +				proxyInstance = (this.constructorArgs != null ?, +						proxyClass.getConstructor(this.constructorArgTypes).newInstance(this.constructorArgs) :, +						proxyClass.newInstance());, +			}, +			catch (Exception ex) {, +				throw new AopConfigException("Unable to instantiate proxy using Objenesis, " +, +						"and regular proxy instantiation via default constructor fails as well", ex);, +			}, +		}, +, +		((Factory) proxyInstance).setCallbacks(callbacks);, +		return proxyInstance;, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +, +	private static final SpringObjenesis objenesis = new SpringObjenesis();, +				final String beanName) {, +			Object fbProxy = null;, +, +			if (objenesis.isWorthTrying()) {, +					fbProxy = objenesis.newInstance(fbClass, enhancer.getUseCache());, +				}, +			if (fbProxy == null) {, +				try {, +					fbProxy = fbClass.newInstance();, +				}, +				catch (Exception ex) {, +					throw new IllegalStateException("Unable to instantiate enhanced FactoryBean using Objenesis, " +, +							"and regular FactoryBean instantiation via default constructor fails as well", ex);, +				}, +			}, +, +			((Factory) fbProxy).setCallback(0, new MethodInterceptor() {, +			return fbProxy;, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, + * Copyright 2002-2015 the original author or authors., +	protected Object[] constructorArgs;, +	protected Class<?>[] constructorArgTypes;, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/ObjenesisCglibAopProxy.java, +	private static final SpringObjenesis objenesis = new SpringObjenesis();, +		Class<?> proxyClass = enhancer.createClass();, +		Object proxyInstance = null;, +, +		if (objenesis.isWorthTrying()) {, +				proxyInstance = objenesis.newInstance(proxyClass, enhancer.getUseCache());, +				logger.debug("Unable to instantiate proxy using Objenesis, " +, +						"falling back to regular proxy construction", ex);, +		if (proxyInstance == null) {, +			// Regular instantiation via default constructor...]