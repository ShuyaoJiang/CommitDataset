[+++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java, +, +	private boolean isCompatibleWithConditionalRequests(HttpServletResponse response) {, +		if (response == null || !responseGetStatusAvailable) {, +			// Can't check response.getStatus() - let's assume we're good, +			return true;, +		}, +		return HttpStatus.valueOf(response.getStatus()).is2xxSuccessful();, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java, +, +	private boolean isCompatibleWithConditionalRequests(HttpServletResponse response) {, +		if (response == null || !responseGetStatusAvailable) {, +			// Can't check response.getStatus() - let's assume we're good, +			return true;, +		}, +		return HttpStatus.valueOf(response.getStatus()).is2xxSuccessful();, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/WebSphereRequestUpgradeStrategy.java, + * Copyright 2002-2015 the original author or authors., +					"Servlet request failed to upgrade to WebSocket for " + requestUrl, ex);, +++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java, +, +	private boolean isCompatibleWithConditionalRequests(HttpServletResponse response) {, +		if (response == null || !responseGetStatusAvailable) {, +			// Can't check response.getStatus() - let's assume we're good, +			return true;, +		}, +		return HttpStatus.valueOf(response.getStatus()).is2xxSuccessful();, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/WebSphereRequestUpgradeStrategy.java, + * Copyright 2002-2015 the original author or authors., +					"Servlet request failed to upgrade to WebSocket for " + requestUrl, ex);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/AbstractHandshakeHandler.java, +	private static final boolean glassfishWsPresent = ClassUtils.isPresent(, +	private static final boolean weblogicWsPresent = ClassUtils.isPresent(, +	private static final boolean websphereWsPresent = ClassUtils.isPresent(, +		else if (glassfishWsPresent) {, +		else if (weblogicWsPresent) {, +		else if (websphereWsPresent) {, +	 * <p>As of 4.1, the default implementation of this method filters the list to, +++ b/spring-web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java, +, +	private boolean isCompatibleWithConditionalRequests(HttpServletResponse response) {, +		if (response == null || !responseGetStatusAvailable) {, +			// Can't check response.getStatus() - let's assume we're good, +			return true;, +		}, +		return HttpStatus.valueOf(response.getStatus()).is2xxSuccessful();, +	}, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/WebSphereRequestUpgradeStrategy.java, + * Copyright 2002-2015 the original author or authors., +					"Servlet request failed to upgrade to WebSocket for " + requestUrl, ex);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/AbstractHandshakeHandler.java, +	private static final boolean glassfishWsPresent = ClassUtils.isPresent(, +	private static final boolean weblogicWsPresent = ClassUtils.isPresent(, +	private static final boolean websphereWsPresent = ClassUtils.isPresent(, +		else if (glassfishWsPresent) {, +		else if (weblogicWsPresent) {, +		else if (websphereWsPresent) {, +	 * <p>As of 4.1, the default implementation of this method filters the list to, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/support/DefaultHandshakeHandler.java]