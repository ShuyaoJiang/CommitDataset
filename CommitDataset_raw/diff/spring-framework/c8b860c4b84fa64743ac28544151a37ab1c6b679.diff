[+++ b/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java, +	 * <p>The default value is 30 seconds., +	 * Start all registered beans that implement {@link Lifecycle} and are <i>not</i>, +	 * already running. Any bean that implements {@link SmartLifecycle} will be, +	 * started within its 'phase', and all phases will be ordered from lowest to, +	 * highest value. All beans that do not implement {@link SmartLifecycle} will be, +	 * started in the default phase 0. A bean declared as a dependency of another bean, +	 * will be started before the dependent bean regardless of the declared phase., +	 * Stop all registered beans that implement {@link Lifecycle} and <i>are</i>, +	 * currently running. Any bean that implements {@link SmartLifecycle} will be, +	 * stopped within its 'phase', and all phases will be ordered from highest to, +	 * lowest value. All beans that do not implement {@link SmartLifecycle} will be, +	 * stopped in the default phase 0. A bean declared as dependent on another bean, +	 * will be stopped before the dependency bean regardless of the declared phase., +	// Internal helpers, +			keys.sort(Collections.reverseOrder());, +		String[] beanNames = beanFactory.getBeanNamesForType(Lifecycle.class, false, false);, +			boolean isFactoryBean = beanFactory.isFactoryBean(beanNameToRegister);, +			if ((beanFactory.containsSingleton(beanNameToRegister) &&, +					(!isFactoryBean || matchesBeanType(Lifecycle.class, beanNameToCheck, beanFactory))) ||, +					matchesBeanType(SmartLifecycle.class, beanNameToCheck, beanFactory)) {, +				Object bean = beanFactory.getBean(beanNameToCheck);, +	private boolean matchesBeanType(Class<?> targetType, String beanName, BeanFactory beanFactory) {, +		Class<?> beanType = beanFactory.getType(beanName);, +			return Integer.compare(thisOrder, otherOrder);]