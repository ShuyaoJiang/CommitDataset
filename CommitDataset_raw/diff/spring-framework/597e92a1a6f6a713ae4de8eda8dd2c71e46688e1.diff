[+++ b/org.springframework.core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java, +		Set<Resource> result = new LinkedHashSet<Resource>(16);, +		return result.toArray(new Resource[result.size()]);, +		Set<Resource> result = new LinkedHashSet<Resource>(16);, +		for (Resource rootDirResource : rootDirResources) {, +			rootDirResource = resolveRootDirResource(rootDirResource);, +		return result.toArray(new Resource[result.size()]);, +	protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern), +			throws IOException {, +, +			Set<Resource> result = new LinkedHashSet<Resource>(8);, +	protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern), +			throws IOException {, +, +			return Collections.emptySet();, +	protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {, +		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern);, +		Set<Resource> result = new LinkedHashSet<Resource>(matchingFiles.size());, +		for (File file : matchingFiles) {, +	protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {, +		Set<File> result = new LinkedHashSet<File>(8);, +	protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {, +		for (File content : dirContents) {, +++ b/org.springframework.core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java, +		Set<Resource> result = new LinkedHashSet<Resource>(16);, +		return result.toArray(new Resource[result.size()]);, +		Set<Resource> result = new LinkedHashSet<Resource>(16);, +		for (Resource rootDirResource : rootDirResources) {, +			rootDirResource = resolveRootDirResource(rootDirResource);, +		return result.toArray(new Resource[result.size()]);, +	protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern), +			throws IOException {, +, +			Set<Resource> result = new LinkedHashSet<Resource>(8);, +	protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern), +			throws IOException {, +, +			return Collections.emptySet();, +	protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {, +		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern);, +		Set<Resource> result = new LinkedHashSet<Resource>(matchingFiles.size());, +		for (File file : matchingFiles) {, +	protected Set<File> retrieveMatchingFiles(File rootDir, String pattern) throws IOException {, +		Set<File> result = new LinkedHashSet<File>(8);, +	protected void doRetrieveMatchingFiles(String fullPattern, File dir, Set<File> result) throws IOException {, +		for (File content : dirContents) {, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate3/LocalSessionFactoryBean.java, +	private static final ThreadLocal<DataSource> configTimeDataSourceHolder =, +			new ThreadLocal<DataSource>();, +	private static final ThreadLocal<TransactionManager> configTimeTransactionManagerHolder =, +			new ThreadLocal<TransactionManager>();, +	private static final ThreadLocal<CacheProvider> configTimeCacheProviderHolder =, +			new ThreadLocal<CacheProvider>();, +	private static final ThreadLocal<LobHandler> configTimeLobHandlerHolder =, +			new ThreadLocal<LobHandler>();, +		return configTimeDataSourceHolder.get();, +		return configTimeTransactionManagerHolder.get();, +		return configTimeCacheProviderHolder.get();, +		return configTimeLobHandlerHolder.get();, +	private Map<String, Object> eventListeners;, +	public void setEventListeners(Map<String, Object> eventListeners) {, +	@SuppressWarnings("unchecked"), +				for (TypeDefinitionBean typeDef : this.typeDefinitions) {, +				for (FilterDefinition filterDef : this.filterDefinitions) {, +					config.addFilterDefinition(filterDef);, +				for (Resource resource : this.configLocations) {, +					config.configure(resource.getURL());, +				for (String mapping : this.mappingResources) {, +					Resource resource = new ClassPathResource(mapping.trim(), this.beanClassLoader);, +				for (Resource resource : this.mappingLocations) {, +					config.addInputStream(resource.getInputStream());, +				for (Resource resource : this.cacheableMappingLocations) {, +					config.addCacheableFile(resource.getFile());, +				for (Resource resource : this.mappingJarLocations) {, +				for (Resource resource : this.mappingDirectoryLocations) {, +					File file = resource.getFile();, +								"Mapping directory location [" + resource + "] does not denote a directory");, +				for (Map.Entry<String, Object> entry : this.eventListeners.entrySet()) {, +					String listenerType = entry.getKey();, +						Collection<Object> listeners = (Collection<Object>) listenerObject;, +					for (String sqlStmt : sql) {, +						executeSchemaStatement(stmt, sqlStmt);, +++ b/org.springframework.core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java, +		Set<Resource> result = new LinkedHashSet<Resource>(16);, +		return result.toArray(new Resource[result.size()]);, +		Set<Resource> result = new LinkedHashSet<Resource>(16);, +		for (Resource rootDirResource : rootDirResources) {, +			rootDirResource = resolveRootDirResource(rootDirResource);, +		return result.toArray(new Resource[result.size()]);, +	protected Set<Resource> doFindPathMatchingJarResources(Resource rootDirResource, String subPattern), +			throws IOException {, +, +			Set<Resource> result = new LinkedHashSet<Resource>(8);, +	protected Set<Resource> doFindPathMatchingFileResources(Resource rootDirResource, String subPattern), +			throws IOException {, +, +			return Collections.emptySet();, +	protected Set<Resource> doFindMatchingFileSystemResources(File rootDir, String subPattern) throws IOException {, +		Set<File> matchingFiles = retrieveMatchingFiles(rootDir, subPattern);, +		Set<Resource> result = new LinkedHashSet<Resource>(matchingFiles.size());]