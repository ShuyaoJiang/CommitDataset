[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPoint.java, + * Copyright 2002-2018 the original author or authors., + * An implementation of the AspectJ {@link ProceedingJoinPoint} interface, + * wrapping an AOP Alliance {@link org.aopalliance.intercept.MethodInvocation}., + * <p><b>Note</b>: The {@code getThis()} method returns the current Spring AOP proxy., + * {@code null} if there is no target instance) as a plain POJO without any advice., + * <b>If you want to call the object and have the advice take effect, use {@code getThis()}.</b>, + * A common example is casting the object to an introduced interface in the implementation of, + * an introduction. There is no such distinction between target and proxy in AspectJ itself., +	private Object[] args;, +, +		if (this.args == null) {, +			this.args = this.methodInvocation.getArguments().clone();, +		return this.args;, +		return this.signature;]