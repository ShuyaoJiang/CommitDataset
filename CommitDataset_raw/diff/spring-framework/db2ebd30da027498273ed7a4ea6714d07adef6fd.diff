[+++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, +, +import javax.servlet.http.HttpServletResponseWrapper;, + * Filter that wraps the request and response in order to override its, + * {@link HttpServletRequest#getScheme() getScheme()},, + * {@link HttpServletRequest#isSecure() isSecure()},, + * {@link HttpServletResponse#sendRedirect(String) sendRedirect(String)},, + * methods with values derived from "Forwarded" or "X-Forwarded-*", + * headers. In effect the wrapped request and response reflects the, + * client-originated protocol and address., + * @author Rob Winch, +		ForwardedHeaderRequestWrapper wrappedRequest = new ForwardedHeaderRequestWrapper(request, this.pathHelper);, +		ForwardedHeaderResponseWrapper wrappedResponse = new ForwardedHeaderResponseWrapper(response, wrappedRequest);, +		filterChain.doFilter(wrappedRequest, wrappedResponse);, +	private static class ForwardedHeaderResponseWrapper extends HttpServletResponseWrapper {, +		private static final String FOLDER_SEPARATOR = "/";, +, +		private final HttpServletRequest request;, +, +		public ForwardedHeaderResponseWrapper(HttpServletResponse response, HttpServletRequest request) {, +			super(response);, +			this.request = request;, +		}, +, +		@Override, +		public void sendRedirect(String location) throws IOException {, +			String forwardedLocation = forwardedLocation(location);, +, +			super.sendRedirect(forwardedLocation);, +		}, +, +		private String forwardedLocation(String location) {, +			if(hasScheme(location)) {, +				return location;, +			}, +, +			return createForwardedLocation(location);, +		}, +, +		private String createForwardedLocation(String location) {, +			boolean isNetworkPathReference = location.startsWith("//");, +			if(isNetworkPathReference) {, +				UriComponentsBuilder schemeForwardedLocation = UriComponentsBuilder.fromUriString(location).scheme(request.getScheme());, +				return schemeForwardedLocation.toUriString();, +			}, +, +			HttpRequest httpRequest = new ServletServerHttpRequest(request);, +			UriComponentsBuilder forwardedLocation = UriComponentsBuilder.fromHttpRequest(httpRequest);, +			boolean isRelativeToContextPath = location.startsWith(FOLDER_SEPARATOR);, +			if(isRelativeToContextPath) {, +				forwardedLocation.replacePath(request.getContextPath());, +			} else if(endsWithFileSpecificPart(forwardedLocation)) {, +				// remove a file specific part from existing request, +				forwardedLocation.path("/../");, +			}, +			forwardedLocation.path(location);, +			return forwardedLocation.build().normalize().toUriString();, +		}, +, +		private boolean endsWithFileSpecificPart(UriComponentsBuilder forwardedLocation) {, +			return !forwardedLocation.build().getPath().endsWith(FOLDER_SEPARATOR);, +		}, +, +		private boolean hasScheme(String location) {, +			String locationScheme = UriComponentsBuilder.fromUriString(location).build().getScheme();, +			return locationScheme != null;, +		}, +	}, +, +++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java, +, +import javax.servlet.http.HttpServletResponseWrapper;, + * Filter that wraps the request and response in order to override its, + * {@link HttpServletRequest#getScheme() getScheme()},, + * {@link HttpServletRequest#isSecure() isSecure()},, + * {@link HttpServletResponse#sendRedirect(String) sendRedirect(String)},, + * methods with values derived from "Forwarded" or "X-Forwarded-*", + * headers. In effect the wrapped request and response reflects the, + * client-originated protocol and address., + * @author Rob Winch, +		ForwardedHeaderRequestWrapper wrappedRequest = new ForwardedHeaderRequestWrapper(request, this.pathHelper);, +		ForwardedHeaderResponseWrapper wrappedResponse = new ForwardedHeaderResponseWrapper(response, wrappedRequest);, +		filterChain.doFilter(wrappedRequest, wrappedResponse);, +	private static class ForwardedHeaderResponseWrapper extends HttpServletResponseWrapper {, +		private static final String FOLDER_SEPARATOR = "/";, +, +		private final HttpServletRequest request;, +, +		public ForwardedHeaderResponseWrapper(HttpServletResponse response, HttpServletRequest request) {, +			super(response);, +			this.request = request;, +		}, +, +		@Override, +		public void sendRedirect(String location) throws IOException {, +			String forwardedLocation = forwardedLocation(location);, +, +			super.sendRedirect(forwardedLocation);, +		}, +]