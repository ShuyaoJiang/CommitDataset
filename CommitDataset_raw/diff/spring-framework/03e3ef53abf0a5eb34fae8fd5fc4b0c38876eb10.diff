[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/SendToUser.java, + * Copyright 2002-2016 the original author or authors., + * <p>The annotation may also be placed at class-level in which case all methods, + * in the class where the annotation applies will inherit it., +, +@Target({ElementType.METHOD, ElementType.TYPE}), +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/SendToUser.java, + * Copyright 2002-2016 the original author or authors., + * <p>The annotation may also be placed at class-level in which case all methods, + * in the class where the annotation applies will inherit it., +, +@Target({ElementType.METHOD, ElementType.TYPE}), +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +				returnType.getMethodAnnotation(SendToUser.class) != null ||, +				AnnotationUtils.getAnnotation(returnType.getDeclaringClass(), SendToUser.class) != null) {, +		SendToUser sendToUser = getSendToUser(returnType);, +	private SendToUser getSendToUser(MethodParameter returnType) {, +		SendToUser annot = returnType.getMethodAnnotation(SendToUser.class);, +		if (annot != null && !ObjectUtils.isEmpty((annot.value()))) {, +			return annot;, +		}, +		SendToUser typeAnnot = AnnotationUtils.getAnnotation(returnType.getDeclaringClass(), SendToUser.class);, +		if (typeAnnot != null && !ObjectUtils.isEmpty((typeAnnot.value()))) {, +			return typeAnnot;, +		}, +		return (annot != null ? annot : typeAnnot);, +	}, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/SendToUser.java, + * Copyright 2002-2016 the original author or authors., + * <p>The annotation may also be placed at class-level in which case all methods, + * in the class where the annotation applies will inherit it., +, +@Target({ElementType.METHOD, ElementType.TYPE}), +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +				returnType.getMethodAnnotation(SendToUser.class) != null ||, +				AnnotationUtils.getAnnotation(returnType.getDeclaringClass(), SendToUser.class) != null) {, +		SendToUser sendToUser = getSendToUser(returnType);, +	private SendToUser getSendToUser(MethodParameter returnType) {, +		SendToUser annot = returnType.getMethodAnnotation(SendToUser.class);, +		if (annot != null && !ObjectUtils.isEmpty((annot.value()))) {, +			return annot;, +		}, +		SendToUser typeAnnot = AnnotationUtils.getAnnotation(returnType.getDeclaringClass(), SendToUser.class);, +		if (typeAnnot != null && !ObjectUtils.isEmpty((typeAnnot.value()))) {, +			return typeAnnot;, +		}, +		return (annot != null ? annot : typeAnnot);, +	}, +, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandlerTests.java, +	private MethodParameter userDefaultNoAnnotation;, +	private MethodParameter userDefaultEmptyAnnotation;, +	private MethodParameter userDefaultOverrideAnnotation;, +		method = SendToTestBean.class.getDeclaredMethod("handleNoAnnotation");, +		method = SendToTestBean.class.getDeclaredMethod("handleAndSendToDefaultDestination");, +		method = SendToTestBean.class.getDeclaredMethod("handleAndSendToOverride");, +, +		method = SendToUserTestBean.class.getDeclaredMethod("handleNoAnnotation");, +		this.userDefaultNoAnnotation = new SynthesizingMethodParameter(method, -1);, +, +		method = SendToUserTestBean.class.getDeclaredMethod("handleAndSendToDefaultDestination");, +		this.userDefaultEmptyAnnotation = new SynthesizingMethodParameter(method, -1);, +, +		method = SendToUserTestBean.class.getDeclaredMethod("handleAndSendToOverride");, +		this.userDefaultOverrideAnnotation = new SynthesizingMethodParameter(method, -1);, +, +		assertTrue(this.handler.supportsReturnType(this.userDefaultNoAnnotation));, +		assertTrue(this.handler.supportsReturnType(this.userDefaultEmptyAnnotation));, +		assertTrue(this.handler.supportsReturnType(this.userDefaultOverrideAnnotation));, +	@Test, +	public void sendToUserClassDefaultNoAnnotation() throws Exception {, +		given(this.messageChannel.send(any(Message.class))).willReturn(true);, +, +		String sessionId = "sess1";, +		Message<?> inputMessage = createInputMessage(sessionId, "sub1", null, null, null);, +		this.handler.handleReturnValue(PAYLOAD, this.userDefaultNoAnnotation, inputMessage);, +, +		verify(this.messageChannel, times(1)).send(this.messageCaptor.capture());, +		assertResponse(this.userDefaultNoAnnotation, sessionId, 0, "/user/sess1/dest-default");, +	}, +, +	@Test, +	public void sendToUserClassDefaultEmptyAnnotation() throws Exception {, +		given(this.messageChannel.send(any(Message.class))).willReturn(true);, +, +		String sessionId = "sess1";, +		Message<?> inputMessage = createInputMessage(sessionId, "sub1", null, null, null);, +		this.handler.handleReturnValue(PAYLOAD, this.userDefaultEmptyAnnotation, inputMessage);, +, +		verify(this.messageChannel, times(1)).send(this.messageCaptor.capture());, +		assertResponse(this.userDefaultEmptyAnnotation, sessionId, 0, "/user/sess1/dest-default");, +	}, +, +	@Test, +	public void sendToUserClassDefaultOverride() throws Exception {, +		given(this.messageChannel.send(any(Message.class))).willReturn(true);, +, +		String sessionId = "sess1";, +		Message<?> inputMessage = createInputMessage(sessionId, "sub1", null, null, null);]