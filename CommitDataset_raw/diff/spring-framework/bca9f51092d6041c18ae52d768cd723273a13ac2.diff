[+++ b/spring-core/src/main/java/org/springframework/core/codec/ByteArrayEncoder.java, +			if (logger.isDebugEnabled() && !Hints.suppressLogging(hints)) {, +				String logPrefix = Hints.getLogPrefix(hints);, +				logger.debug(logPrefix + "Writing " + dataBuffer.readableByteCount() + " bytes");, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteArrayEncoder.java, +			if (logger.isDebugEnabled() && !Hints.suppressLogging(hints)) {, +				String logPrefix = Hints.getLogPrefix(hints);, +				logger.debug(logPrefix + "Writing " + dataBuffer.readableByteCount() + " bytes");, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteBufferEncoder.java, +			if (logger.isDebugEnabled() && !Hints.suppressLogging(hints)) {, +				String logPrefix = Hints.getLogPrefix(hints);, +				logger.debug(logPrefix + "Writing " + dataBuffer.readableByteCount() + " bytes");, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteArrayEncoder.java, +			if (logger.isDebugEnabled() && !Hints.suppressLogging(hints)) {, +				String logPrefix = Hints.getLogPrefix(hints);, +				logger.debug(logPrefix + "Writing " + dataBuffer.readableByteCount() + " bytes");, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteBufferEncoder.java, +			if (logger.isDebugEnabled() && !Hints.suppressLogging(hints)) {, +				String logPrefix = Hints.getLogPrefix(hints);, +				logger.debug(logPrefix + "Writing " + dataBuffer.readableByteCount() + " bytes");, +++ b/spring-core/src/main/java/org/springframework/core/codec/CharSequenceEncoder.java, +			if (logger.isDebugEnabled() && !Hints.suppressLogging(hints)) {, +				String logPrefix = Hints.getLogPrefix(hints);, +				logger.debug(logPrefix + "Writing '" + charSequence + "'");, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteArrayEncoder.java, +			if (logger.isDebugEnabled() && !Hints.suppressLogging(hints)) {, +				String logPrefix = Hints.getLogPrefix(hints);, +				logger.debug(logPrefix + "Writing " + dataBuffer.readableByteCount() + " bytes");, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteBufferEncoder.java, +			if (logger.isDebugEnabled() && !Hints.suppressLogging(hints)) {, +				String logPrefix = Hints.getLogPrefix(hints);, +				logger.debug(logPrefix + "Writing " + dataBuffer.readableByteCount() + " bytes");, +++ b/spring-core/src/main/java/org/springframework/core/codec/CharSequenceEncoder.java, +			if (logger.isDebugEnabled() && !Hints.suppressLogging(hints)) {, +				String logPrefix = Hints.getLogPrefix(hints);, +				logger.debug(logPrefix + "Writing '" + charSequence + "'");, +++ b/spring-core/src/main/java/org/springframework/core/codec/DataBufferEncoder.java, +		if (logger.isDebugEnabled() && !Hints.suppressLogging(hints)) {, +			flux = flux.doOnNext(buffer -> {, +				String logPrefix = Hints.getLogPrefix(hints);, +				logger.debug(logPrefix + "Writing " + buffer.readableByteCount() + " bytes");, +			});, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteArrayEncoder.java, +			if (logger.isDebugEnabled() && !Hints.suppressLogging(hints)) {, +				String logPrefix = Hints.getLogPrefix(hints);, +				logger.debug(logPrefix + "Writing " + dataBuffer.readableByteCount() + " bytes");, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteBufferEncoder.java, +			if (logger.isDebugEnabled() && !Hints.suppressLogging(hints)) {, +				String logPrefix = Hints.getLogPrefix(hints);, +				logger.debug(logPrefix + "Writing " + dataBuffer.readableByteCount() + " bytes");, +++ b/spring-core/src/main/java/org/springframework/core/codec/CharSequenceEncoder.java, +			if (logger.isDebugEnabled() && !Hints.suppressLogging(hints)) {, +				String logPrefix = Hints.getLogPrefix(hints);, +				logger.debug(logPrefix + "Writing '" + charSequence + "'");, +++ b/spring-core/src/main/java/org/springframework/core/codec/DataBufferEncoder.java, +		if (logger.isDebugEnabled() && !Hints.suppressLogging(hints)) {, +			flux = flux.doOnNext(buffer -> {, +				String logPrefix = Hints.getLogPrefix(hints);, +				logger.debug(logPrefix + "Writing " + buffer.readableByteCount() + " bytes");, +			});, +++ b/spring-core/src/main/java/org/springframework/core/codec/Hints.java, +	 * Name of boolean hint whether to avoid logging data either because it's, +	 * potentially sensitive, or because it has been logged by a composite, +	 * encoder, e.g. for multipart requests., +	public static final String SUPPRESS_LOGGING_HINT = Log.class.getName() + ".SUPPRESS_LOGGING";, +	 * Whether to suppress logging based on the hint {@link #SUPPRESS_LOGGING_HINT}., +	 * @param hints the hints map, +	 * @return whether logging of data is allowed, +	public static boolean suppressLogging(@Nullable Map<String, Object> hints) {, +		return hints != null && (boolean) hints.getOrDefault(SUPPRESS_LOGGING_HINT, false);, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteArrayEncoder.java, +			if (logger.isDebugEnabled() && !Hints.suppressLogging(hints)) {, +				String logPrefix = Hints.getLogPrefix(hints);, +				logger.debug(logPrefix + "Writing " + dataBuffer.readableByteCount() + " bytes");, +++ b/spring-core/src/main/java/org/springframework/core/codec/ByteBufferEncoder.java, +			if (logger.isDebugEnabled() && !Hints.suppressLogging(hints)) {, +				String logPrefix = Hints.getLogPrefix(hints);, +				logger.debug(logPrefix + "Writing " + dataBuffer.readableByteCount() + " bytes");, +++ b/spring-core/src/main/java/org/springframework/core/codec/CharSequenceEncoder.java, +			if (logger.isDebugEnabled() && !Hints.suppressLogging(hints)) {, +				String logPrefix = Hints.getLogPrefix(hints);, +				logger.debug(logPrefix + "Writing '" + charSequence + "'");, +++ b/spring-core/src/main/java/org/springframework/core/codec/DataBufferEncoder.java, +		if (logger.isDebugEnabled() && !Hints.suppressLogging(hints)) {, +			flux = flux.doOnNext(buffer -> {, +				String logPrefix = Hints.getLogPrefix(hints);, +				logger.debug(logPrefix + "Writing " + buffer.readableByteCount() + " bytes");, +			});, +++ b/spring-core/src/main/java/org/springframework/core/codec/Hints.java, +	 * Name of boolean hint whether to avoid logging data either because it's, +	 * potentially sensitive, or because it has been logged by a composite, +	 * encoder, e.g. for multipart requests., +	public static final String SUPPRESS_LOGGING_HINT = Log.class.getName() + ".SUPPRESS_LOGGING";, +	 * Whether to suppress logging based on the hint {@link #SUPPRESS_LOGGING_HINT}., +	 * @param hints the hints map, +	 * @return whether logging of data is allowed, +	public static boolean suppressLogging(@Nullable Map<String, Object> hints) {, +		return hints != null && (boolean) hints.getOrDefault(SUPPRESS_LOGGING_HINT, false);, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceEncoder.java, +		if (logger.isDebugEnabled() && !Hints.suppressLogging(hints)) {]