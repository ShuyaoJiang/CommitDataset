[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletRequestDataBinderFactory.java, +import org.springframework.web.bind.annotation.InitBinder;, + * Creates a {@link ServletRequestDataBinder} instance and extends it with the ability to include , + * URI template variables in the values used for data binding purposes., +	 * Create a new instance., +	 * @param binderMethods {@link InitBinder} methods to initialize new data binder instances with, +	 * @param iitializer a global initializer to initialize new data binder instances with, +	public ServletRequestDataBinderFactory(List<InvocableHandlerMethod> binderMethods, WebBindingInitializer iitializer) {, +		super(binderMethods, iitializer);, +	 * Creates a {@link ServletRequestDataBinder} instance extended with the ability to add , +	 * URI template variables the values used for data binding., +	protected WebDataBinder createBinderInstance(Object target, String objectName, final NativeWebRequest request) {, +				addUriTemplateVars(mpvs, request);, +	 * Adds URI template variables to the the property values used for data binding., +	 * @param mpvs the PropertyValues to use for data binding, +	protected final void addUriTemplateVars(MutablePropertyValues mpvs, NativeWebRequest request) {, +		Map<String, String> uriTemplateVars = , +			(Map<String, String>) request.getAttribute(, +					HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST);, +		if (uriTemplateVars != null){, +			for (String name : uriTemplateVars.keySet()) {, +				if (!mpvs.contains(name)) {, +					mpvs.addPropertyValue(name, uriTemplateVars.get(name));, +				}, +			}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletRequestDataBinderFactory.java, +import org.springframework.web.bind.annotation.InitBinder;, + * Creates a {@link ServletRequestDataBinder} instance and extends it with the ability to include , + * URI template variables in the values used for data binding purposes., +	 * Create a new instance., +	 * @param binderMethods {@link InitBinder} methods to initialize new data binder instances with, +	 * @param iitializer a global initializer to initialize new data binder instances with, +	public ServletRequestDataBinderFactory(List<InvocableHandlerMethod> binderMethods, WebBindingInitializer iitializer) {, +		super(binderMethods, iitializer);, +	 * Creates a {@link ServletRequestDataBinder} instance extended with the ability to add , +	 * URI template variables the values used for data binding., +	protected WebDataBinder createBinderInstance(Object target, String objectName, final NativeWebRequest request) {, +				addUriTemplateVars(mpvs, request);, +	 * Adds URI template variables to the the property values used for data binding., +	 * @param mpvs the PropertyValues to use for data binding, +	protected final void addUriTemplateVars(MutablePropertyValues mpvs, NativeWebRequest request) {, +		Map<String, String> uriTemplateVars = , +			(Map<String, String>) request.getAttribute(, +					HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST);, +		if (uriTemplateVars != null){, +			for (String name : uriTemplateVars.keySet()) {, +				if (!mpvs.contains(name)) {, +					mpvs.addPropertyValue(name, uriTemplateVars.get(name));, +				}, +			}, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletRequestDataBinderFactoryTests.java, +	@Test, +	public void requestParamsOverrideUriTemplateVars() throws Exception {, +		request.addParameter("age", "35");, +		, +		Map<String, String> uriTemplateVars = new HashMap<String, String>();, +		uriTemplateVars.put("name", "nameValue");, +		uriTemplateVars.put("age", "25");, +		request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVars);, +		, +		TestBean target = new TestBean();, +		WebDataBinder binder = binderFactory.createBinder(webRequest, target, "");, +		((ServletRequestDataBinder) binder).bind(request);, +, +		assertEquals("nameValue", target.getName());, +		assertEquals(35, target.getAge());, +	}, +, +	@Test, +	public void noUriTemplateVars() throws Exception {, +		TestBean target = new TestBean();, +		WebDataBinder binder = binderFactory.createBinder(webRequest, target, "");, +		((ServletRequestDataBinder) binder).bind(request);, +, +		assertEquals(null, target.getName());, +		assertEquals(0, target.getAge());, +	}, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletRequestDataBinderFactory.java, +import org.springframework.web.bind.annotation.InitBinder;, + * Creates a {@link ServletRequestDataBinder} instance and extends it with the ability to include , + * URI template variables in the values used for data binding purposes., +	 * Create a new instance., +	 * @param binderMethods {@link InitBinder} methods to initialize new data binder instances with, +	 * @param iitializer a global initializer to initialize new data binder instances with, +	public ServletRequestDataBinderFactory(List<InvocableHandlerMethod> binderMethods, WebBindingInitializer iitializer) {, +		super(binderMethods, iitializer);, +	 * Creates a {@link ServletRequestDataBinder} instance extended with the ability to add , +	 * URI template variables the values used for data binding., +	protected WebDataBinder createBinderInstance(Object target, String objectName, final NativeWebRequest request) {, +				addUriTemplateVars(mpvs, request);, +	 * Adds URI template variables to the the property values used for data binding., +	 * @param mpvs the PropertyValues to use for data binding, +	protected final void addUriTemplateVars(MutablePropertyValues mpvs, NativeWebRequest request) {, +		Map<String, String> uriTemplateVars = , +			(Map<String, String>) request.getAttribute(, +					HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST);, +		if (uriTemplateVars != null){, +			for (String name : uriTemplateVars.keySet()) {, +				if (!mpvs.contains(name)) {]