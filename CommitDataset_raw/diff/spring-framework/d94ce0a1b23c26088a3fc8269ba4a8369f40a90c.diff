[+++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceRegionEncoder.java, +import org.springframework.core.io.InputStreamResource;, +import org.springframework.core.io.Resource;, +		OptionalLong contentLength = contentLength(region.getResource());, +	/**, +	 * Determine, if possible, the contentLength of the given resource without reading it., +	 * @param resource the resource instance, +	 * @return the contentLength of the resource, +	 */, +	private OptionalLong contentLength(Resource resource) {, +		// Don't try to determine contentLength on InputStreamResource - cannot be read afterwards..., +		// Note: custom InputStreamResource subclasses could provide a pre-calculated content length!, +		if (InputStreamResource.class != resource.getClass()) {, +			try {, +				return OptionalLong.of(resource.contentLength());, +			}, +			catch (IOException ignored) {, +			}, +		}, +		return OptionalLong.empty();, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceRegionEncoder.java, +import org.springframework.core.io.InputStreamResource;, +import org.springframework.core.io.Resource;, +		OptionalLong contentLength = contentLength(region.getResource());, +	/**, +	 * Determine, if possible, the contentLength of the given resource without reading it., +	 * @param resource the resource instance, +	 * @return the contentLength of the resource, +	 */, +	private OptionalLong contentLength(Resource resource) {, +		// Don't try to determine contentLength on InputStreamResource - cannot be read afterwards..., +		// Note: custom InputStreamResource subclasses could provide a pre-calculated content length!, +		if (InputStreamResource.class != resource.getClass()) {, +			try {, +				return OptionalLong.of(resource.contentLength());, +			}, +			catch (IOException ignored) {, +			}, +		}, +		return OptionalLong.empty();, +	}, +, +++ b/spring-core/src/main/java/org/springframework/util/ResourceUtils.java, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceRegionEncoder.java, +import org.springframework.core.io.InputStreamResource;, +import org.springframework.core.io.Resource;, +		OptionalLong contentLength = contentLength(region.getResource());, +	/**, +	 * Determine, if possible, the contentLength of the given resource without reading it., +	 * @param resource the resource instance, +	 * @return the contentLength of the resource, +	 */, +	private OptionalLong contentLength(Resource resource) {, +		// Don't try to determine contentLength on InputStreamResource - cannot be read afterwards..., +		// Note: custom InputStreamResource subclasses could provide a pre-calculated content length!, +		if (InputStreamResource.class != resource.getClass()) {, +			try {, +				return OptionalLong.of(resource.contentLength());, +			}, +			catch (IOException ignored) {, +			}, +		}, +		return OptionalLong.empty();, +	}, +, +++ b/spring-core/src/main/java/org/springframework/util/ResourceUtils.java, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/resource/ResourceWebHandlerTests.java, +					assertThat(throwable, instanceOf(IllegalArgumentException.class));, +++ b/spring-core/src/main/java/org/springframework/core/codec/ResourceRegionEncoder.java, +import org.springframework.core.io.InputStreamResource;, +import org.springframework.core.io.Resource;, +		OptionalLong contentLength = contentLength(region.getResource());, +	/**, +	 * Determine, if possible, the contentLength of the given resource without reading it., +	 * @param resource the resource instance, +	 * @return the contentLength of the resource, +	 */, +	private OptionalLong contentLength(Resource resource) {, +		// Don't try to determine contentLength on InputStreamResource - cannot be read afterwards..., +		// Note: custom InputStreamResource subclasses could provide a pre-calculated content length!, +		if (InputStreamResource.class != resource.getClass()) {, +			try {, +				return OptionalLong.of(resource.contentLength());, +			}, +			catch (IOException ignored) {, +			}, +		}, +		return OptionalLong.empty();, +	}, +, +++ b/spring-core/src/main/java/org/springframework/util/ResourceUtils.java, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/resource/ResourceWebHandlerTests.java, +					assertThat(throwable, instanceOf(IllegalArgumentException.class));, +++ b/spring-web/src/main/java/org/springframework/http/codec/ResourceHttpMessageWriter.java, +import java.util.OptionalLong;, +import org.springframework.core.io.InputStreamResource;, +, +]