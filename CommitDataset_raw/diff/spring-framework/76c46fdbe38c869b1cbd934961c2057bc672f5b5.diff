[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java, +			String cacheManagerName = resourceCacheElement.getAttribute("cache-manager");, +			String cacheName = resourceCacheElement.getAttribute("cache-name");, +			if (StringUtils.hasText(cacheManagerName) && StringUtils.hasText(cacheName)) {, +				RuntimeBeanReference cacheManagerRef = new RuntimeBeanReference(cacheManagerName);, +				cavs.addIndexedArgumentValue(0, cacheManagerRef);, +				cavs.addIndexedArgumentValue(1, cacheName);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java, +			String cacheManagerName = resourceCacheElement.getAttribute("cache-manager");, +			String cacheName = resourceCacheElement.getAttribute("cache-name");, +			if (StringUtils.hasText(cacheManagerName) && StringUtils.hasText(cacheName)) {, +				RuntimeBeanReference cacheManagerRef = new RuntimeBeanReference(cacheManagerName);, +				cavs.addIndexedArgumentValue(0, cacheManagerRef);, +				cavs.addIndexedArgumentValue(1, cacheName);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/CachingResourceResolver.java, +import org.springframework.cache.CacheManager;, +	public CachingResourceResolver(CacheManager cacheManager, String cacheName) {, +		this(cacheManager.getCache(cacheName));, +	}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java, +			String cacheManagerName = resourceCacheElement.getAttribute("cache-manager");, +			String cacheName = resourceCacheElement.getAttribute("cache-name");, +			if (StringUtils.hasText(cacheManagerName) && StringUtils.hasText(cacheName)) {, +				RuntimeBeanReference cacheManagerRef = new RuntimeBeanReference(cacheManagerName);, +				cavs.addIndexedArgumentValue(0, cacheManagerRef);, +				cavs.addIndexedArgumentValue(1, cacheName);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/CachingResourceResolver.java, +import org.springframework.cache.CacheManager;, +	public CachingResourceResolver(CacheManager cacheManager, String cacheName) {, +		this(cacheManager.getCache(cacheName));, +	}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/CachingResourceTransformer.java, +import org.springframework.cache.CacheManager;, +	public CachingResourceTransformer(CacheManager cacheManager, String cacheName) {, +		this(cacheManager.getCache(cacheName));, +	}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java, +			String cacheManagerName = resourceCacheElement.getAttribute("cache-manager");, +			String cacheName = resourceCacheElement.getAttribute("cache-name");, +			if (StringUtils.hasText(cacheManagerName) && StringUtils.hasText(cacheName)) {, +				RuntimeBeanReference cacheManagerRef = new RuntimeBeanReference(cacheManagerName);, +				cavs.addIndexedArgumentValue(0, cacheManagerRef);, +				cavs.addIndexedArgumentValue(1, cacheName);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/CachingResourceResolver.java, +import org.springframework.cache.CacheManager;, +	public CachingResourceResolver(CacheManager cacheManager, String cacheName) {, +		this(cacheManager.getCache(cacheName));, +	}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/CachingResourceTransformer.java, +import org.springframework.cache.CacheManager;, +	public CachingResourceTransformer(CacheManager cacheManager, String cacheName) {, +		this(cacheManager.getCache(cacheName));, +	}, +++ b/spring-webmvc/src/main/resources/org/springframework/web/servlet/config/spring-mvc-4.1.xsd, +	and saves the result in the cache. Can use a custom Cache if a CacheManager is provided as a bean reference, +	in the "cache-manager" attribute, and the cache name provided in the "cache-name" attribute., +		<xsd:attribute name="cache-manager" type="xsd:string" use="optional"/>, +		<xsd:attribute name="cache-name" type="xsd:string" use="optional"/>, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java, +			String cacheManagerName = resourceCacheElement.getAttribute("cache-manager");, +			String cacheName = resourceCacheElement.getAttribute("cache-name");, +			if (StringUtils.hasText(cacheManagerName) && StringUtils.hasText(cacheName)) {, +				RuntimeBeanReference cacheManagerRef = new RuntimeBeanReference(cacheManagerName);, +				cavs.addIndexedArgumentValue(0, cacheManagerRef);, +				cavs.addIndexedArgumentValue(1, cacheName);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/CachingResourceResolver.java, +import org.springframework.cache.CacheManager;, +	public CachingResourceResolver(CacheManager cacheManager, String cacheName) {, +		this(cacheManager.getCache(cacheName));, +	}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/CachingResourceTransformer.java, +import org.springframework.cache.CacheManager;, +	public CachingResourceTransformer(CacheManager cacheManager, String cacheName) {, +		this(cacheManager.getCache(cacheName));, +	}, +++ b/spring-webmvc/src/main/resources/org/springframework/web/servlet/config/spring-mvc-4.1.xsd, +	and saves the result in the cache. Can use a custom Cache if a CacheManager is provided as a bean reference, +	in the "cache-manager" attribute, and the cache name provided in the "cache-name" attribute., +		<xsd:attribute name="cache-manager" type="xsd:string" use="optional"/>, +		<xsd:attribute name="cache-name" type="xsd:string" use="optional"/>, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/MvcNamespaceTests.java, +import org.springframework.cache.Cache;, +import org.springframework.cache.CacheManager;, +		assertThat(cachingResolver.getCache(), Matchers.instanceOf(ConcurrentMapCache.class));, +		assertEquals("test-resource-cache", cachingResolver.getCache().getName());, +, +		CachingResourceTransformer cachingTransformer = (CachingResourceTransformer) transformers.get(0);, +		assertThat(cachingTransformer.getCache(), Matchers.instanceOf(ConcurrentMapCache.class));, +		assertEquals("test-resource-cache", cachingTransformer.getCache().getName());, +	public static class TestCacheManager implements CacheManager {, +		@Override, +		public Cache getCache(String name) {, +			return new ConcurrentMapCache(name);, +		}, +, +		@Override, +		public Collection<String> getCacheNames() {, +			return null;, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java, +			String cacheManagerName = resourceCacheElement.getAttribute("cache-manager");]