[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/WebSocketMessage.java, +import java.nio.charset.StandardCharsets;, +, +import org.springframework.core.io.buffer.DataBufferUtils;, +	 * Constructor for a WebSocketMessage. To create, see factory methods:, +	 * <ul>, +	 * <li>{@link WebSocketSession#textMessage}, +	 * <li>{@link WebSocketSession#binaryMessage}, +	 * <li>{@link WebSocketSession#pingMessage}, +	 * <li>{@link WebSocketSession#pongMessage}, +	 * </ul>, +	 * <p>Alternatively use {@link WebSocketSession#bufferFactory()} to create, +	 * the payload and then invoke this constructor., +	public WebSocketMessage(Type type, DataBuffer payload) {, +	/**, +	 * Return the message payload as UTF-8 text. This is a useful for text, +	 * WebSocket messages., +	 */, +	public String getPayloadAsText() {, +		byte[] bytes = new byte[this.payload.readableByteCount()];, +		this.payload.read(bytes);, +		return new String(bytes, StandardCharsets.UTF_8);, +	}, +, +	/**, +	 * Retain the data buffer for the message payload, which is useful on, +	 * runtimes with pooled buffers, e.g. Netty. A shortcut for:, +	 * <pre>, +	 * DataBuffer payload = message.getPayload();, +	 * DataBufferUtils.retain(payload);, +	 * </pre>, +	 * @see DataBufferUtils#retain(DataBuffer), +	 */, +	public void retainPayload() {, +		DataBufferUtils.retain(this.payload);, +	}, +, +	/**, +	 * Release the data buffer for the message payload, which is useful on, +	 * runtimes with pooled buffers, e.g. Netty. This is a shortcut for:, +	 * <pre>, +	 * DataBuffer payload = message.getPayload();, +	 * DataBufferUtils.release(payload);, +	 * </pre>, +	 * @see DataBufferUtils#release(DataBuffer), +	 */, +	public void releasePayload() {, +		DataBufferUtils.release(this.payload);, +	}, +, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/WebSocketMessage.java, +import java.nio.charset.StandardCharsets;, +, +import org.springframework.core.io.buffer.DataBufferUtils;, +	 * Constructor for a WebSocketMessage. To create, see factory methods:, +	 * <ul>, +	 * <li>{@link WebSocketSession#textMessage}, +	 * <li>{@link WebSocketSession#binaryMessage}, +	 * <li>{@link WebSocketSession#pingMessage}, +	 * <li>{@link WebSocketSession#pongMessage}, +	 * </ul>, +	 * <p>Alternatively use {@link WebSocketSession#bufferFactory()} to create, +	 * the payload and then invoke this constructor., +	public WebSocketMessage(Type type, DataBuffer payload) {, +	/**, +	 * Return the message payload as UTF-8 text. This is a useful for text, +	 * WebSocket messages., +	 */, +	public String getPayloadAsText() {, +		byte[] bytes = new byte[this.payload.readableByteCount()];, +		this.payload.read(bytes);, +		return new String(bytes, StandardCharsets.UTF_8);, +	}, +, +	/**, +	 * Retain the data buffer for the message payload, which is useful on, +	 * runtimes with pooled buffers, e.g. Netty. A shortcut for:, +	 * <pre>, +	 * DataBuffer payload = message.getPayload();, +	 * DataBufferUtils.retain(payload);, +	 * </pre>, +	 * @see DataBufferUtils#retain(DataBuffer), +	 */, +	public void retainPayload() {, +		DataBufferUtils.retain(this.payload);, +	}, +, +	/**, +	 * Release the data buffer for the message payload, which is useful on, +	 * runtimes with pooled buffers, e.g. Netty. This is a shortcut for:, +	 * <pre>, +	 * DataBuffer payload = message.getPayload();, +	 * DataBufferUtils.release(payload);, +	 * </pre>, +	 * @see DataBufferUtils#release(DataBuffer), +	 */, +	public void releasePayload() {, +		DataBufferUtils.release(this.payload);, +	}, +]