[+++ b/spring-framework-reference/src/new-in-3.xml, +    features in more detail later in this section.</para>, +		<listitem><para>T getBean(Stringname, Class&lt;T&gt; requiredType)</para></listitem> , +		<listitem><para>Map&lt;String, T&gt; getBeansOfType(Class&lt;T&gt; type)</para></listitem> , +		<listitem><para>extended AsyncTaskExecutor supports standard Callables with Futures</para></listitem> , +		<listitem><para>stateless ConversionService and Converters</para></listitem> , +		<listitem><para>superseding standard JDK PropertyEditors</para></listitem> , +	<programlisting language="xml"><![CDATA[<bean class="mycompany.RewardsTestDatabase">, +        value="#{systemProperties.databaseName}"/>, +        value="#{strategyBean.databaseKeyGenerator}"/>, +	<para>This functionality is also available if you prefer to configure your components using, +	annotations:, +	<programlisting language="java"><![CDATA[@Repository , +public class RewardsTestDatabase {, +, +    @Value("#{systemProperties.databaseName}"), +    public void setDatabaseName(String dbName) { … }, +, +    @Value("#{strategyBean.databaseKeyGenerator}"), +    public voidsetKeyGenerator(KeyGenerator kg) { … }, +}, +]]></programlisting>, +	</para>, +    <para>Some core JavaConfig features have been added to the Spring Framework now. This means that the following, +	annotations are now directly supported:, +	, +	<itemizedlist>, +		<listitem><para>@Configuration</para></listitem> , +		<listitem><para>@Bean</para></listitem> , +		<listitem><para>@Primary</para></listitem> , +		<listitem><para>@Lazy</para></listitem> , +		<listitem><para>@Import</para></listitem> , +		<listitem><para>@Value</para></listitem> , +	</itemizedlist>, +	</para>, +, +	<para>, +	Here is an example of a Java class providing basic configuration using the new JavaConfig features:, +	<programlisting language="java"><![CDATA[@Configuration , +public class AppConfig{ , +    @Value("#{jdbcProperties.url}") String jdbcUrl; , +    @Value("#{jdbcProperties.username}") String username; , +    @Value("#{jdbcProperties.password}") String password; , +, +    @Bean , +    public FooServicefooService() { , +        return new FooServiceImpl(fooRepository()); , +    }, +, +    @Bean , +    public FooRepositoryfooRepository() { , +        return new HibernateFooRepository(sessionFactory()); , +    }, +, +    @Bean , +    public SessionFactorysessionFactory() { , +        // wire up a session factory using , +        // AnnotationSessionFactoryBean , +        asFactoryBean.setDataSource(dataSource()); , +        return (SessionFactory) asFactoryBean.getObject(); , +    } , +, +    @Bean , +    public DataSourcedataSource() { , +        return new DriverManagerDataSource(jdbcUrl, , +        username, password); , +    } , +}, +]]></programlisting>, +, +	To get this to work you need to add the following component scanning entry in your minimal, +	application context XML file., +	, +	<programlisting language="java"><![CDATA[<context:component-scan , +    base-package="com.myco.config"/>]]></programlisting>, +	, +	</para>, +, +    <para>Work in progress ...</para>, +      <para>Work in progress ...</para>, +      <para>Work in progress ...</para>, +  </section>, +]