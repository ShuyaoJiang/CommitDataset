[+++ b/spring-framework-reference/src/testing.xml, +            <interfacename>@Autowired</interfacename>,, +            <interfacename>@Inject</interfacename>, and, +            configuration methods.</para>, +      <para>The Spring Framework provides first-class support for, +      primary goals:</para>, +          <para>To manage <link linkend="testing-ctx-management">Spring IoC container, +          <para>To provide <link linkend="testing-fixture-di">Dependency Injection of, +          <para>To provide <link linkend="testing-tx">transaction management</link>, +          <para>To supply <link linkend="testing-support-classes">Spring-specific, +          base classes</link> that assist developers in writing integration, +          tests.</para>, +        because startup time can become an issue &mdash; not because of the overhead, +        of XML configuration metadata &mdash; typically in the classpath &mdash; that is, +        that a test corrupts the application context and requires reloading &mdash;, +        for example, by modifying a bean definition or the state of an, +        application object &mdash; a Spring testing support mechanism causes the, +        duplicate complex test fixture set up for individual test cases.</para>, +            mapped correctly, and are the correct lazy-loading settings in, +        <para>See dependency injection of test fixtures with the <link, +        Also, many operations &mdash; such as inserting or modifying persistent data, +        &mdash; cannot be performed (or verified) outside a transaction.</para>, +        <para>If you want a transaction to commit &mdash; unusual, but occasionally, +        database &mdash; the TestContext framework can be instructed to cause the, +            <para>A <classname>SimpleJdbcTemplate</classname>, for executing, +            SQL statements to query the database., +            Such queries can be used to confirm database state both, +            <emphasis>prior to</emphasis> and <emphasis>after</emphasis>, +            execution of database-related application code, and Spring, +            ensures that such queries run in the scope of the same, +            transaction as the application code. When used in conjunction, +            with an ORM tool, be sure to avoid, +            <link linkend="testcontext-tx-false-positives">false positives</link>.</para>, +      <title>Annotations</title>, +          <programlisting language="java">@ContextConfiguration(locations="example/test-context.xml", loader=CustomContextLoader.class), +          <emphasis>dirtied</emphasis> (i.e., modified or corrupted in some manner), +          during the execution of a test and should be closed,, +          regardless of whether the test passed., +          <interfacename>@DirtiesContext</interfacename> is supported in, +          the following scenarios:</para>, +          <warning>, +              <interfacename>@DirtiesContext</interfacename> at the class level</title>, +              <para>JUnit 4+ and TestNG both support class-level lifecycle, +              callbacks &mdash; for example, via <interfacename>@BeforeClass</interfacename>, +              and <interfacename>@AfterClass</interfacename> annotations. Consequently, , +              <interfacename>@DirtiesContext</interfacename> can be used at the class level, +              with these frameworks. JUnit 3.x, however, does not support, +              <emphasis>before class</emphasis> or <emphasis>after class</emphasis>, +              lifecycle callbacks. Thus, in a JUnit 3.x environment, +              on methods and not at the class level.</para>, +          </warning>, +          <para>If class-level usage of <interfacename>@DirtiesContext</interfacename>, +          is supported (e.g., with JUnit 4.5+ or TestNG), you can use, +          <interfacename>@DirtiesContext</interfacename> as both a class-level, +          and method-level annotation within the same test class. In such scenarios,, +          the <interfacename>ApplicationContext</interfacename> is marked as, +          registered with the <classname>TestContextManager</classname>., +          bean name of the desired <interfacename>PlatformTransactionManager</interfacename>, +          is not "transactionManager". In addition, you can change the, +, +          <note>, +              <para>If the default conventions are sufficient for your, +              test configuration, you can avoid using , +              <interfacename>@TransactionConfiguration</interfacename>, +              altogether. In other words, if your transaction, +              manager bean is named "transactionManager" and if you want, +              transactions to roll back automatically, there is no need, +              to annotate your test class with, +              <interfacename>@TransactionConfiguration</interfacename>.</para>, +          </note>, +            <interfacename>@NotTransactional</interfacename>.</para>, +      when used in conjunction with JUnit (that is, with the <link, +          <emphasis>tear down</emphasis> of the test fixture.</para>, +            well-defined test execution points:</para>, +            , +            <itemizedlist>, +              <listitem>, +                <para>prior to any <emphasis>before class methods</emphasis>, +                of a particular testing framework</para>, +              </listitem>, +              <listitem>, +                <para>test instance preparation</para>, +              </listitem>, +              <listitem>, +                <para>prior to any <emphasis>before methods</emphasis>, +                of a particular testing framework</para>, +              </listitem>, +              <listitem>, +                <para>after any <emphasis>after methods</emphasis>, +                of a particular testing framework</para>, +              </listitem>, +              <listitem>, +                <para>after any <emphasis>after class methods</emphasis>, +                of a particular testing framework</para>, +              </listitem>, +            </itemizedlist>, +            <classname>DependencyInjectionTestExecutionListener</classname>,, +            <classname>DirtiesContextTestExecutionListener</classname>, and, +            transactional test execution with default rollback semantics.</para>, +        has been configured) &mdash; typically in the classpath<!--*what* is in the classpath? This sentence is confusing. Please revise.-->]