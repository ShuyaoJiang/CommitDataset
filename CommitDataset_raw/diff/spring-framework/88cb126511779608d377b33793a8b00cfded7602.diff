[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicate.java, +	/**, +	 * Accept the given visitor. Default implementation calls, +	 * {@link RequestPredicates.Visitor#unknown(RequestPredicate)}; composed {@code RequestPredicate}, +	 * implementations are expected to call {@code accept} for all components that make up this, +	 * request predicate., +	 * @param visitor the visitor to accept, +	 */, +	default void accept(RequestPredicates.Visitor visitor) {, +		visitor.unknown(this);, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicate.java, +	/**, +	 * Accept the given visitor. Default implementation calls, +	 * {@link RequestPredicates.Visitor#unknown(RequestPredicate)}; composed {@code RequestPredicate}, +	 * implementations are expected to call {@code accept} for all components that make up this, +	 * request predicate., +	 * @param visitor the visitor to accept, +	 */, +	default void accept(RequestPredicates.Visitor visitor) {, +		visitor.unknown(this);, +	}, +, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java, +import org.springframework.http.HttpHeaders;, +import org.springframework.lang.NonNull;, +		return new ContentTypePredicate(mediaTypes);, +		return new AcceptPredicate(mediaTypes);, +		return new PathExtensionPredicate(extension);, +		return new QueryParamPredicate(name, value);, +, +	/**, +	 * Receives notifications from the logical structure of request predicates., +	 */, +	public interface Visitor {, +, +		/**, +		 * Receive notification of an HTTP method predicate., +		 * @param methods the HTTP methods that make up the predicate, +		 * @see RequestPredicates#method(HttpMethod), +		 */, +		void method(Set<HttpMethod> methods);, +, +		/**, +		 * Receive notification of an path predicate., +		 * @param pattern the path pattern that makes up the predicate, +		 * @see RequestPredicates#path(String), +		 */, +		void path(String pattern);, +, +		/**, +		 * Receive notification of an path extension predicate., +		 * @param extension the path extension that makes up the predicate, +		 * @see RequestPredicates#pathExtension(String), +		 */, +		void pathExtension(String extension);, +, +		/**, +		 * Receive notification of a HTTP header predicate., +		 * @param name the name of the HTTP header to check, +		 * @param value the desired value of the HTTP header, +		 * @see RequestPredicates#headers(Predicate), +		 * @see RequestPredicates#contentType(MediaType...), +		 * @see RequestPredicates#accept(MediaType...), +		 */, +		void header(String name, String value);, +, +		/**, +		 * Receive notification of a query parameter predicate., +		 * @param name the name of the query parameter, +		 * @param value the desired value of the parameter, +		 * @see RequestPredicates#queryParam(String, String), +		 */, +		void queryParam(String name, String value);, +, +		/**, +		 * Receive first notification of a logical AND predicate., +		 * The first subsequent notification will contain the left-hand side of the AND-predicate;, +		 * the second notification contains the right-hand side, followed by {@link #endAnd()}., +		 * @see RequestPredicate#and(RequestPredicate), +		 */, +		void startAnd();, +, +		/**, +		 * Receive last notification of a logical AND predicate., +		 * @see RequestPredicate#and(RequestPredicate), +		 */, +		void endAnd();, +, +		/**, +		 * Receive first notification of a logical OR predicate., +		 * The first subsequent notification will contain the left-hand side of the OR-predicate;, +		 * the second notification contains the right-hand side, followed by {@link #endOr()}., +		 * @see RequestPredicate#or(RequestPredicate), +		 */, +		void startOr();, +, +		/**, +		 * Receive last notification of a logical OR predicate.]