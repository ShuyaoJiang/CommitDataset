[+++ b/org.springframework.context/src/main/java/org/springframework/context/expression/MapAccessor.java, +		return new TypedValue(((Map) target).get(name), TypeDescriptor.OBJECT);, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/MapAccessor.java, +		return new TypedValue(((Map) target).get(name), TypeDescriptor.OBJECT);, +++ b/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +import org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory;, +				.toDate(), new TypeDescriptor(Model.class.getField("date")), TypeDescriptor.STRING);, +		LocalDate date = new LocalDate(formattingService.convert("10/31/09", TypeDescriptor.STRING,, +		assertEquals("", formattingService.convert(null, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.STRING));, +		assertNull(formattingService.convert(null, TypeDescriptor.STRING, TypeDescriptor.valueOf(Integer.class)));, +		assertNull(formattingService.convert("", TypeDescriptor.STRING, TypeDescriptor.valueOf(Integer.class)));, +		assertEquals(null, formattingService.convert(null, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.STRING));, +		assertNull(formattingService.convert(null, TypeDescriptor.STRING, TypeDescriptor.valueOf(Integer.class)));, +		assertNull(formattingService.convert("", TypeDescriptor.STRING, TypeDescriptor.valueOf(Integer.class)));, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/MapAccessor.java, +		return new TypedValue(((Map) target).get(name), TypeDescriptor.OBJECT);, +++ b/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +import org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory;, +				.toDate(), new TypeDescriptor(Model.class.getField("date")), TypeDescriptor.STRING);, +		LocalDate date = new LocalDate(formattingService.convert("10/31/09", TypeDescriptor.STRING,, +		assertEquals("", formattingService.convert(null, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.STRING));, +		assertNull(formattingService.convert(null, TypeDescriptor.STRING, TypeDescriptor.valueOf(Integer.class)));, +		assertNull(formattingService.convert("", TypeDescriptor.STRING, TypeDescriptor.valueOf(Integer.class)));, +		assertEquals(null, formattingService.convert(null, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.STRING));, +		assertNull(formattingService.convert(null, TypeDescriptor.STRING, TypeDescriptor.valueOf(Integer.class)));, +		assertNull(formattingService.convert("", TypeDescriptor.STRING, TypeDescriptor.valueOf(Integer.class)));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	/** Constant defining an 'unknown' TypeDescriptor */, +	/** Constant defining a TypeDescriptor for <code>java.lang.Object</code> */, +	public static final TypeDescriptor OBJECT = TypeDescriptor.valueOf(Object.class);, +, +	/** Constant defining a TypeDescriptor for <code>java.lang.String</code> */, +	public static final TypeDescriptor STRING = TypeDescriptor.valueOf(String.class);, +, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/MapAccessor.java, +		return new TypedValue(((Map) target).get(name), TypeDescriptor.OBJECT);, +++ b/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +import org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory;, +				.toDate(), new TypeDescriptor(Model.class.getField("date")), TypeDescriptor.STRING);, +		LocalDate date = new LocalDate(formattingService.convert("10/31/09", TypeDescriptor.STRING,, +		assertEquals("", formattingService.convert(null, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.STRING));, +		assertNull(formattingService.convert(null, TypeDescriptor.STRING, TypeDescriptor.valueOf(Integer.class)));, +		assertNull(formattingService.convert("", TypeDescriptor.STRING, TypeDescriptor.valueOf(Integer.class)));, +		assertEquals(null, formattingService.convert(null, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.STRING));, +		assertNull(formattingService.convert(null, TypeDescriptor.STRING, TypeDescriptor.valueOf(Integer.class)));, +		assertNull(formattingService.convert("", TypeDescriptor.STRING, TypeDescriptor.valueOf(Integer.class)));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	/** Constant defining an 'unknown' TypeDescriptor */, +	/** Constant defining a TypeDescriptor for <code>java.lang.Object</code> */, +	public static final TypeDescriptor OBJECT = TypeDescriptor.valueOf(Object.class);, +, +	/** Constant defining a TypeDescriptor for <code>java.lang.String</code> */, +	public static final TypeDescriptor STRING = TypeDescriptor.valueOf(String.class);, +, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java, +		TestEntity e = (TestEntity) conversionService.convert(null, TypeDescriptor.STRING, TypeDescriptor.valueOf(TestEntity.class));, +				new TypeDescriptor(getClass().getField("genericList")), TypeDescriptor.STRING);, +		List result = (List) conversionService.convert("1,2,3", TypeDescriptor.STRING,, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/MapAccessor.java, +		return new TypedValue(((Map) target).get(name), TypeDescriptor.OBJECT);, +++ b/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +import org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory;, +				.toDate(), new TypeDescriptor(Model.class.getField("date")), TypeDescriptor.STRING);, +		LocalDate date = new LocalDate(formattingService.convert("10/31/09", TypeDescriptor.STRING,, +		assertEquals("", formattingService.convert(null, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.STRING));, +		assertNull(formattingService.convert(null, TypeDescriptor.STRING, TypeDescriptor.valueOf(Integer.class)));, +		assertNull(formattingService.convert("", TypeDescriptor.STRING, TypeDescriptor.valueOf(Integer.class)));, +		assertEquals(null, formattingService.convert(null, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.STRING));, +		assertNull(formattingService.convert(null, TypeDescriptor.STRING, TypeDescriptor.valueOf(Integer.class)));, +		assertNull(formattingService.convert("", TypeDescriptor.STRING, TypeDescriptor.valueOf(Integer.class)));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	/** Constant defining an 'unknown' TypeDescriptor */, +	/** Constant defining a TypeDescriptor for <code>java.lang.Object</code> */, +	public static final TypeDescriptor OBJECT = TypeDescriptor.valueOf(Object.class);, +, +	/** Constant defining a TypeDescriptor for <code>java.lang.String</code> */, +	public static final TypeDescriptor STRING = TypeDescriptor.valueOf(String.class);, +, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java, +		TestEntity e = (TestEntity) conversionService.convert(null, TypeDescriptor.STRING, TypeDescriptor.valueOf(TestEntity.class));, +				new TypeDescriptor(getClass().getField("genericList")), TypeDescriptor.STRING);, +		List result = (List) conversionService.convert("1,2,3", TypeDescriptor.STRING,, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/GenericConversionServiceTests.java, +		assertNull(conversionService.convert("3", TypeDescriptor.STRING, TypeDescriptor.NULL));, +		assertTrue(conversionService.canConvert(TypeDescriptor.STRING, TypeDescriptor, +		b = (Boolean) conversionService.convert("true", TypeDescriptor.STRING, TypeDescriptor, +++ b/org.springframework.context/src/main/java/org/springframework/context/expression/MapAccessor.java, +		return new TypedValue(((Map) target).get(name), TypeDescriptor.OBJECT);, +++ b/org.springframework.context/src/test/java/org/springframework/format/support/FormattingConversionServiceTests.java, +import org.springframework.format.datetime.joda.JodaDateTimeFormatAnnotationFormatterFactory;, +				.toDate(), new TypeDescriptor(Model.class.getField("date")), TypeDescriptor.STRING);, +		LocalDate date = new LocalDate(formattingService.convert("10/31/09", TypeDescriptor.STRING,, +		assertEquals("", formattingService.convert(null, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.STRING));, +		assertNull(formattingService.convert(null, TypeDescriptor.STRING, TypeDescriptor.valueOf(Integer.class)));, +		assertNull(formattingService.convert("", TypeDescriptor.STRING, TypeDescriptor.valueOf(Integer.class)));, +		assertEquals(null, formattingService.convert(null, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.STRING));, +		assertNull(formattingService.convert(null, TypeDescriptor.STRING, TypeDescriptor.valueOf(Integer.class)));, +		assertNull(formattingService.convert("", TypeDescriptor.STRING, TypeDescriptor.valueOf(Integer.class)));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	/** Constant defining an 'unknown' TypeDescriptor */]