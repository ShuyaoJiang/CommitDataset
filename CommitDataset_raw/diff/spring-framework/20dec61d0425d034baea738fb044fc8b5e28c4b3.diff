[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultHandlerStrategiesBuilder.java, +import org.springframework.http.codec.ResourceHttpMessageWriter;, +import org.springframework.http.codec.ServerSentEventHttpMessageWriter;, +, +		messageWriter(new ResourceHttpMessageWriter());, +, +			Jackson2JsonEncoder jsonEncoder = new Jackson2JsonEncoder();, +			messageWriter(new EncoderHttpMessageWriter<>(jsonEncoder));, +			messageWriter(, +					new ServerSentEventHttpMessageWriter(Collections.singletonList(jsonEncoder)));, +		}, +		else {, +			messageWriter(new ServerSentEventHttpMessageWriter());, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultHandlerStrategiesBuilder.java, +import org.springframework.http.codec.ResourceHttpMessageWriter;, +import org.springframework.http.codec.ServerSentEventHttpMessageWriter;, +, +		messageWriter(new ResourceHttpMessageWriter());, +, +			Jackson2JsonEncoder jsonEncoder = new Jackson2JsonEncoder();, +			messageWriter(new EncoderHttpMessageWriter<>(jsonEncoder));, +			messageWriter(, +					new ServerSentEventHttpMessageWriter(Collections.singletonList(jsonEncoder)));, +		}, +		else {, +			messageWriter(new ServerSentEventHttpMessageWriter());, +++ b/spring-web/src/main/java/org/springframework/http/codec/BodyInserters.java, +				writeFunctionFor(Mono.just(body), ResolvableType.forInstance(body)),, +		return BodyInserter.of(, +				writeFunctionFor(publisher, ResolvableType.forClass(elementClass)),, +				() -> publisher, +		);, +				writeFunctionFor(publisher, elementType),, +					HttpMessageWriter<Resource> messageWriter = resourceHttpMessageWriter(context);, +					return messageWriter.write(Mono.just(resource), RESOURCE_TYPE, null,, +	private static HttpMessageWriter<Resource> resourceHttpMessageWriter(BodyInserter.Context context) {, +		return context.messageWriters().get(), +				.filter(messageWriter -> messageWriter.canWrite(RESOURCE_TYPE, null)), +				.findFirst(), +				.map(BodyInserters::<Resource>cast), +				.orElseThrow(() -> new IllegalStateException(, +						"Could not find HttpMessageWriter that supports Resources."));, +	}, +, +					HttpMessageWriter<ServerSentEvent<T>> messageWriter = sseMessageWriter(context);, +							MediaType.TEXT_EVENT_STREAM, response, Collections.emptyMap());, +					HttpMessageWriter<T> messageWriter = sseMessageWriter(context);, +					return messageWriter.write(eventsPublisher, eventType,, +							MediaType.TEXT_EVENT_STREAM, response, Collections.emptyMap());, +	private static <T> HttpMessageWriter<T> sseMessageWriter(BodyInserter.Context context) {, +		return context.messageWriters().get(), +				.filter(messageWriter -> messageWriter, +						.canWrite(SERVER_SIDE_EVENT_TYPE, MediaType.TEXT_EVENT_STREAM)), +				.findFirst(), +				.map(BodyInserters::<T>cast), +				.orElseThrow(() -> new IllegalStateException(, +						"Could not find HttpMessageWriter that supports " +, +								MediaType.TEXT_EVENT_STREAM_VALUE));, +	private static <T, M extends ReactiveHttpOutputMessage> BiFunction<M, BodyInserter.Context, Mono<Void>>, +		writeFunctionFor(Publisher<T> body, ResolvableType bodyType) {, +		return (m, context) -> {, +, +			MediaType contentType = m.getHeaders().getContentType();, +							.write(body, bodyType, contentType, m, Collections, +		};, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/DefaultHandlerStrategiesBuilder.java, +import org.springframework.http.codec.ResourceHttpMessageWriter;, +import org.springframework.http.codec.ServerSentEventHttpMessageWriter;, +, +		messageWriter(new ResourceHttpMessageWriter());, +, +			Jackson2JsonEncoder jsonEncoder = new Jackson2JsonEncoder();, +			messageWriter(new EncoderHttpMessageWriter<>(jsonEncoder));, +			messageWriter(, +					new ServerSentEventHttpMessageWriter(Collections.singletonList(jsonEncoder)));, +		}, +		else {, +			messageWriter(new ServerSentEventHttpMessageWriter());, +++ b/spring-web/src/main/java/org/springframework/http/codec/BodyInserters.java, +				writeFunctionFor(Mono.just(body), ResolvableType.forInstance(body)),, +		return BodyInserter.of(, +				writeFunctionFor(publisher, ResolvableType.forClass(elementClass)),, +				() -> publisher, +		);, +				writeFunctionFor(publisher, elementType),, +					HttpMessageWriter<Resource> messageWriter = resourceHttpMessageWriter(context);, +					return messageWriter.write(Mono.just(resource), RESOURCE_TYPE, null,, +	private static HttpMessageWriter<Resource> resourceHttpMessageWriter(BodyInserter.Context context) {, +		return context.messageWriters().get(), +				.filter(messageWriter -> messageWriter.canWrite(RESOURCE_TYPE, null)), +				.findFirst(), +				.map(BodyInserters::<Resource>cast), +				.orElseThrow(() -> new IllegalStateException(, +						"Could not find HttpMessageWriter that supports Resources."));, +	}, +, +					HttpMessageWriter<ServerSentEvent<T>> messageWriter = sseMessageWriter(context);, +							MediaType.TEXT_EVENT_STREAM, response, Collections.emptyMap());, +					HttpMessageWriter<T> messageWriter = sseMessageWriter(context);, +					return messageWriter.write(eventsPublisher, eventType,]