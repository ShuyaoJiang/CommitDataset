[+++ b/spring-orm/src/main/java/org/springframework/orm/hibernate5/SpringBeanContainer.java, +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +import org.springframework.beans.factory.BeanCreationException;, +	private static final Log logger = LogFactory.getLog(SpringBeanContainer.class);, +, +				bean = createBean(beanType, lifecycleOptions, fallbackProducer);, +			bean = createBean(beanType, lifecycleOptions, fallbackProducer);, +				bean = createBean(name, beanType, lifecycleOptions, fallbackProducer);, +			bean = createBean(name, beanType, lifecycleOptions, fallbackProducer);, +	private SpringContainedBean<?> createBean(, +			Class<?> beanType, LifecycleOptions lifecycleOptions, BeanInstanceProducer fallbackProducer) {, +, +		try {, +		catch (BeanCreationException ex) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("Falling back to Hibernate's default producer after bean creation failure for " +, +						beanType + ": " + ex);, +			}, +			return new SpringContainedBean<>(fallbackProducer.produceBeanInstance(beanType));, +		}, +	}, +	private SpringContainedBean<?> createBean(, +			String name, Class<?> beanType, LifecycleOptions lifecycleOptions, BeanInstanceProducer fallbackProducer) {, +, +		try {, +		catch (BeanCreationException ex) {, +			if (logger.isDebugEnabled()) {, +				logger.debug("Falling back to Hibernate's default producer after bean creation failure for " +, +						beanType + ": " + ex);, +			}, +			return new SpringContainedBean<>(fallbackProducer.produceBeanInstance(name, beanType));, +		}, +	}]