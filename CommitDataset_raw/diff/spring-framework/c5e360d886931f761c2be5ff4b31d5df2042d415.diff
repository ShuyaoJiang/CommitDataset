[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +			if (returnValue != null) {, +			return;, +		}, +, +		if (returnValue != null) {, +	}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +			if (returnValue != null) {, +			return;, +		}, +, +		if (returnValue != null) {, +	}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java, +			if (type.getActualTypeArguments().length != 1) {, +				throw new IllegalArgumentException("Expected single generic parameter on '" +, +						parameter.getParameterName() + "' in method " + parameter.getMethod());, +			}, +		else if (parameterType instanceof Class) {, +			return Object.class;, +				"' in method " + parameter.getMethod() + " is not parameterized");, +, +		// Try even with null body. ResponseBodyAdvice could get involved., +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +			if (returnValue != null) {, +			return;, +		}, +, +		if (returnValue != null) {, +	}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java, +			if (type.getActualTypeArguments().length != 1) {, +				throw new IllegalArgumentException("Expected single generic parameter on '" +, +						parameter.getParameterName() + "' in method " + parameter.getMethod());, +			}, +		else if (parameterType instanceof Class) {, +			return Object.class;, +				"' in method " + parameter.getMethod() + " is not parameterized");, +, +		// Try even with null body. ResponseBodyAdvice could get involved., +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java, +, +		// Try even with null return value. ResponseBodyAdvice could get involved., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +			if (returnValue != null) {, +			return;, +		}, +, +		if (returnValue != null) {, +	}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java, +			if (type.getActualTypeArguments().length != 1) {, +				throw new IllegalArgumentException("Expected single generic parameter on '" +, +						parameter.getParameterName() + "' in method " + parameter.getMethod());, +			}, +		else if (parameterType instanceof Class) {, +			return Object.class;, +				"' in method " + parameter.getMethod() + " is not parameterized");, +, +		// Try even with null body. ResponseBodyAdvice could get involved., +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java, +, +		// Try even with null return value. ResponseBodyAdvice could get involved., +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/ServletInvocableHandlerMethodTests.java, +		ServletInvocableHandlerMethod handlerMethod = getHandlerMethod(new ResponseEntityHandler(), "handleDeferred");, +		ServletInvocableHandlerMethod handlerMethod = getHandlerMethod(new ResponseEntityHandler(), "handleDeferred");, +		ServletInvocableHandlerMethod handlerMethod = getHandlerMethod(new ResponseEntityHandler(), "handleDeferred");, +	// SPR-12287 (16/Oct/14 comments), +, +	@Test, +	public void responseEntityRawTypeWithNullBody() throws Exception {, +		List<HttpMessageConverter<?>> converters = Arrays.asList(new StringHttpMessageConverter());, +		List<Object> advice = Arrays.asList(mock(ResponseBodyAdvice.class));, +		HttpEntityMethodProcessor processor = new HttpEntityMethodProcessor(converters, null, advice);, +		this.returnValueHandlers.addHandler(processor);, +		ServletInvocableHandlerMethod handlerMethod = getHandlerMethod(new ResponseEntityHandler(), "handleRawType");, +		handlerMethod.invokeAndHandle(this.webRequest, this.mavContainer);, +, +		assertEquals(200, this.response.getStatus());, +		assertEquals("", this.response.getContentAsString());, +	}, +, +		handlerMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers);, +		handlerMethod.setHandlerMethodReturnValueHandlers(this.returnValueHandlers);, +		public DeferredResult<ResponseEntity<String>> handleDeferred() {, +, +		@SuppressWarnings("unused"), +		public ResponseEntity handleRawType() {, +			return ResponseEntity.ok().build();, +		}]