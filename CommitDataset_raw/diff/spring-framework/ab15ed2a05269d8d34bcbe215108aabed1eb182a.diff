[+++ b/spring-core/src/main/java/org/springframework/util/ObjectUtils.java, +	 * Check whether the given exception is compatible with the specified, +	 * exception types, as declared in a throws clause., +	 * @param ex the exception to check, +	 * @param declaredExceptions the exception types declared in the throws clause, +	public static boolean isCompatibleWithThrowsClause(Throwable ex, Class<?>... declaredExceptions) {, +			for (Class<?> declaredException : declaredExceptions) {, +				if (declaredException.isInstance(ex)) {, +++ b/spring-core/src/main/java/org/springframework/util/ObjectUtils.java, +	 * Check whether the given exception is compatible with the specified, +	 * exception types, as declared in a throws clause., +	 * @param ex the exception to check, +	 * @param declaredExceptions the exception types declared in the throws clause, +	public static boolean isCompatibleWithThrowsClause(Throwable ex, Class<?>... declaredExceptions) {, +			for (Class<?> declaredException : declaredExceptions) {, +				if (declaredException.isInstance(ex)) {, +++ b/spring-core/src/test/java/org/springframework/util/ObjectUtilsTests.java, + * Copyright 2002-2013 the original author or authors., +import static org.hamcrest.CoreMatchers.*;, +import static org.junit.Assert.*;, +, +		assertTrue(ObjectUtils.isCompatibleWithThrowsClause(new RuntimeException()));, +		assertFalse(ObjectUtils.isCompatibleWithThrowsClause(new Exception()));, +		assertFalse(ObjectUtils.isCompatibleWithThrowsClause(new SQLException()));, +		assertFalse(ObjectUtils.isCompatibleWithThrowsClause(new Throwable()));, +		assertEquals(expected, actual);, +	enum Tropes { FOO, BAR, baz }]