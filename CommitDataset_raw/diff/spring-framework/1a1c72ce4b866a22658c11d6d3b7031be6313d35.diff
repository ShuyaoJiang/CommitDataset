[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/InvocableHandlerMethod.java, +	 * Set {@link HandlerMethodArgumentResolver}s to use to use for resolving method argument values., +			sb.append(getBeanType().getSimpleName()).append(".");, +			parameter.initParameterNameDiscovery(this.parameterNameDiscoverer);, +		ReflectionUtils.makeAccessible(getBridgedMethod());, +		catch (IllegalArgumentException ex) {, +			assertTargetBean(getBridgedMethod(), getBean(), args);, +			throw new IllegalStateException(getInvocationErrorMessage(ex.getMessage(), args), ex);, +		catch (InvocationTargetException ex) {, +			Throwable targetException = ex.getTargetException();, +			String msg = "The mapped controller method class '" + methodDeclaringClass.getName() +, +			throw new IllegalStateException(getInvocationErrorMessage(msg, args));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/InvocableHandlerMethod.java, +	 * Set {@link HandlerMethodArgumentResolver}s to use to use for resolving method argument values., +			sb.append(getBeanType().getSimpleName()).append(".");, +			parameter.initParameterNameDiscovery(this.parameterNameDiscoverer);, +		ReflectionUtils.makeAccessible(getBridgedMethod());, +		catch (IllegalArgumentException ex) {, +			assertTargetBean(getBridgedMethod(), getBean(), args);, +			throw new IllegalStateException(getInvocationErrorMessage(ex.getMessage(), args), ex);, +		catch (InvocationTargetException ex) {, +			Throwable targetException = ex.getTargetException();, +			String msg = "The mapped controller method class '" + methodDeclaringClass.getName() +, +			throw new IllegalStateException(getInvocationErrorMessage(msg, args));, +++ b/spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java, +	private HandlerMethodArgumentResolverComposite argumentResolvers = new HandlerMethodArgumentResolverComposite();, +, +	 * Create an instance from the given handler and method., +			sb.append(getBeanType().getSimpleName()).append(".");, +					args[i] = this.argumentResolvers.resolveArgument(, +							parameter, mavContainer, request, this.dataBinderFactory);, +		ReflectionUtils.makeAccessible(getBridgedMethod());, +		catch (IllegalArgumentException ex) {, +			assertTargetBean(getBridgedMethod(), getBean(), args);, +			throw new IllegalStateException(getInvocationErrorMessage(ex.getMessage(), args), ex);, +		catch (InvocationTargetException ex) {, +			Throwable targetException = ex.getTargetException();, +			String msg = "The mapped controller method class '" + methodDeclaringClass.getName() +, +			throw new IllegalStateException(getInvocationErrorMessage(msg, args));]