[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactoryUtils.java, +import java.lang.annotation.Annotation;, +	 * Get all bean names whose {@code Class} has the supplied {@link Annotation}, +	 * type, including those defined in ancestor factories, without creating any bean, +	 * instances yet. Will return unique names in case of overridden bean definitions., +	 * @param lbf the bean factory, +	 * @param annotationType the type of annotation to look for, +	 * @return the array of matching bean names, or an empty array if none, +	 * @since 5.0, +	 */, +	public static String[] beanNamesForAnnotationIncludingAncestors(, +			ListableBeanFactory lbf, Class<? extends Annotation> annotationType) {, +		Assert.notNull(lbf, "ListableBeanFactory must not be null");, +		String[] result = lbf.getBeanNamesForAnnotation(annotationType);, +		if (lbf instanceof HierarchicalBeanFactory) {, +			HierarchicalBeanFactory hbf = (HierarchicalBeanFactory) lbf;, +			if (hbf.getParentBeanFactory() instanceof ListableBeanFactory) {, +				String[] parentResult = beanNamesForAnnotationIncludingAncestors(, +						(ListableBeanFactory) hbf.getParentBeanFactory(), annotationType);, +				List<String> resultList = new ArrayList<>();, +				resultList.addAll(Arrays.asList(result));, +				for (String beanName : parentResult) {, +					if (!resultList.contains(beanName) && !hbf.containsLocalBean(beanName)) {, +						resultList.add(beanName);, +					}, +				}, +				result = StringUtils.toStringArray(resultList);, +			}, +		}, +		return result;, +	}, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactoryUtils.java, +import java.lang.annotation.Annotation;, +	 * Get all bean names whose {@code Class} has the supplied {@link Annotation}, +	 * type, including those defined in ancestor factories, without creating any bean, +	 * instances yet. Will return unique names in case of overridden bean definitions., +	 * @param lbf the bean factory, +	 * @param annotationType the type of annotation to look for, +	 * @return the array of matching bean names, or an empty array if none, +	 * @since 5.0, +	 */, +	public static String[] beanNamesForAnnotationIncludingAncestors(, +			ListableBeanFactory lbf, Class<? extends Annotation> annotationType) {, +		Assert.notNull(lbf, "ListableBeanFactory must not be null");, +		String[] result = lbf.getBeanNamesForAnnotation(annotationType);, +		if (lbf instanceof HierarchicalBeanFactory) {, +			HierarchicalBeanFactory hbf = (HierarchicalBeanFactory) lbf;, +			if (hbf.getParentBeanFactory() instanceof ListableBeanFactory) {, +				String[] parentResult = beanNamesForAnnotationIncludingAncestors(, +						(ListableBeanFactory) hbf.getParentBeanFactory(), annotationType);, +				List<String> resultList = new ArrayList<>();, +				resultList.addAll(Arrays.asList(result));, +				for (String beanName : parentResult) {, +					if (!resultList.contains(beanName) && !hbf.containsLocalBean(beanName)) {, +						resultList.add(beanName);, +					}, +				}, +				result = StringUtils.toStringArray(resultList);, +			}, +		}, +		return result;, +	}, +, +	/**, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/BeanFactoryUtilsTests.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.tests.sample.beans.AnnotatedBean;, +import org.springframework.tests.sample.beans.TestAnnotation;, +		assertTrue("Should count 8 beans, not " + BeanFactoryUtils.countBeansIncludingAncestors(this.listableBeanFactory),, +				BeanFactoryUtils.countBeansIncludingAncestors(this.listableBeanFactory) == 8);, +	public void testHierarchicalNamesForAnnotationWithNoMatch() throws Exception {, +		List<String> names = Arrays.asList(, +				BeanFactoryUtils.beanNamesForAnnotationIncludingAncestors(this.listableBeanFactory, Override.class));, +		assertEquals(0, names.size());, +	}, +, +	@Test, +	public void testHierarchicalNamesForAnnotationWithMatchOnlyInRoot() throws Exception {, +		List<String> names = Arrays.asList(, +				BeanFactoryUtils.beanNamesForAnnotationIncludingAncestors(this.listableBeanFactory, TestAnnotation.class));, +		assertEquals(1, names.size());, +		assertTrue(names.contains("annotatedBean"));, +		// Distinguish from default ListableBeanFactory behavior, +		assertTrue(listableBeanFactory.getBeanNamesForAnnotation(TestAnnotation.class).length == 0);, +	}, +, +	@Test, +	public void testGetBeanNamesForAnnotationWithOverride() throws Exception {, +		AnnotatedBean annotatedBean = new AnnotatedBean();, +		this.listableBeanFactory.registerSingleton("anotherAnnotatedBean", annotatedBean);, +		List<String> names = Arrays.asList(, +				BeanFactoryUtils.beanNamesForAnnotationIncludingAncestors(this.listableBeanFactory, TestAnnotation.class));, +		assertEquals(2, names.size());, +		assertTrue(names.contains("annotatedBean"));, +		assertTrue(names.contains("anotherAnnotatedBean"));, +	}, +, +	@Test]