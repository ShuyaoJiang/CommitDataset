[+++ b/spring-core/src/main/java/org/springframework/core/env/ProfilesParser.java, + * Copyright 2002-2019 the original author or authors., +		return parseTokens(expression, tokens, Context.NONE);, +	}, +	private static Profiles parseTokens(String expression, StringTokenizer tokens, Context context) {, +					Profiles contents = parseTokens(expression, tokens, Context.BRACKET);, +					if (context == Context.INVERT) {, +						return contents;, +					}, +					elements.add(contents);, +					elements.add(not(parseTokens(expression, tokens, Context.INVERT)));, +					if (context == Context.BRACKET) {, +						return merged;, +					}, +					Profiles value = equals(token);, +					if (context == Context.INVERT) {, +						return value;, +					}, +					elements.add(value);, +	private enum Context {NONE, INVERT, BRACKET}, +, +, +++ b/spring-core/src/main/java/org/springframework/core/env/ProfilesParser.java, + * Copyright 2002-2019 the original author or authors., +		return parseTokens(expression, tokens, Context.NONE);, +	}, +	private static Profiles parseTokens(String expression, StringTokenizer tokens, Context context) {, +					Profiles contents = parseTokens(expression, tokens, Context.BRACKET);, +					if (context == Context.INVERT) {, +						return contents;, +					}, +					elements.add(contents);, +					elements.add(not(parseTokens(expression, tokens, Context.INVERT)));, +					if (context == Context.BRACKET) {, +						return merged;, +					}, +					Profiles value = equals(token);, +					if (context == Context.INVERT) {, +						return value;, +					}, +					elements.add(value);, +	private enum Context {NONE, INVERT, BRACKET}, +, +, +++ b/spring-core/src/test/java/org/springframework/core/env/ProfilesTests.java, + * Copyright 2002-2019 the original author or authors., +	public void ofAndExpressionWithInvertedSingleElement() {, +		Profiles profiles = Profiles.of("!spring & framework");, +		assertOfAndExpressionWithInvertedSingleElement(profiles);, +	}, +, +	@Test, +	public void ofAndExpressionWithInBracketsInvertedSingleElement() {, +		Profiles profiles = Profiles.of("(!spring) & framework");, +		assertOfAndExpressionWithInvertedSingleElement(profiles);, +	}, +, +	@Test, +	public void ofAndExpressionWithInvertedSingleElementInBrackets() {, +		Profiles profiles = Profiles.of("! (spring) & framework");, +		assertOfAndExpressionWithInvertedSingleElement(profiles);, +	}, +, +	@Test, +	public void ofAndExpressionWithInvertedSingleElementInBracketsWithoutSpaces() {, +		Profiles profiles = Profiles.of("!(spring)&framework");, +		assertOfAndExpressionWithInvertedSingleElement(profiles);, +	}, +, +	@Test, +	public void ofAndExpressionWithInvertedSingleElementWithoutSpaces() {, +		Profiles profiles = Profiles.of("!spring&framework");, +		assertOfAndExpressionWithInvertedSingleElement(profiles);, +	}, +, +	private void assertOfAndExpressionWithInvertedSingleElement(Profiles profiles) {, +		assertTrue(profiles.matches(activeProfiles("framework")));, +		assertFalse(profiles.matches(activeProfiles("java")));, +		assertFalse(profiles.matches(activeProfiles("spring", "framework")));, +		assertFalse(profiles.matches(activeProfiles("spring")));, +	}, +, +	@Test, +	public void ofOrExpressionWithInvertedSingleElementWithoutSpaces() {, +		Profiles profiles = Profiles.of("!spring|framework");, +		assertOfOrExpressionWithInvertedSingleElement(profiles);, +	}, +, +	private void assertOfOrExpressionWithInvertedSingleElement(Profiles profiles) {, +		assertTrue(profiles.matches(activeProfiles("framework")));, +		assertTrue(profiles.matches(activeProfiles("java")));, +		assertTrue(profiles.matches(activeProfiles("spring", "framework")));, +		assertFalse(profiles.matches(activeProfiles("spring")));, +	}, +, +	@Test]