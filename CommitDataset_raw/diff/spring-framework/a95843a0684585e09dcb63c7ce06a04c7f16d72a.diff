[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +import org.springframework.core.NamedThreadLocal;, +	/**, +	 * The name of the currently created bean, for implicit dependency registration, +	 * on getBean etc invocations triggered from a user-specified Supplier callback., +	 */, +	private final NamedThreadLocal<String> currentlyCreatedBean = new NamedThreadLocal<>("Currently created bean");, +, +	 * @return a BeanWrapper for the new instance, +	 * @see #obtainFromSupplier, +			return obtainFromSupplier(instanceSupplier, beanName);, +	 * Obtain a bean instance from the given supplier., +	 * @param instanceSupplier the configured supplier, +	 * @param beanName the corresponding bean name, +	 * @return a BeanWrapper for the new instance, +	 * @since 5.0, +	 * @see #getObjectForBeanInstance, +	 */, +	protected BeanWrapper obtainFromSupplier(Supplier<?> instanceSupplier, String beanName) {, +		String outerBean = this.currentlyCreatedBean.get();, +		this.currentlyCreatedBean.set(beanName);, +		Object instance;, +		try {, +			instance = instanceSupplier.get();, +		}, +		finally {, +			if (outerBean != null) {, +				this.currentlyCreatedBean.set(outerBean);, +			}, +			else {, +				this.currentlyCreatedBean.remove();, +			}, +		}, +		BeanWrapper bw = new BeanWrapperImpl(instance);, +		initBeanWrapper(bw);, +		return bw;, +	}, +, +	/**, +	 * Overridden in order to implicitly register the currently created bean as, +	 * dependent on further beans getting programmatically retrieved during a, +	 * {@link Supplier} callback., +	 * @since 5.0, +	 * @see #obtainFromSupplier, +	 */, +	@Override, +	protected Object getObjectForBeanInstance(, +			Object beanInstance, String name, String beanName, RootBeanDefinition mbd) {, +, +		String currentlyCreatedBean = this.currentlyCreatedBean.get();, +		if (currentlyCreatedBean != null) {, +			registerDependentBean(beanName, currentlyCreatedBean);, +		}, +, +		return super.getObjectForBeanInstance(beanInstance, name, beanName, mbd);, +	}, +, +	/**, +	 * @return a BeanWrapper for the new instance, +	 * @return a BeanWrapper for the new instance, +	 * @return a BeanWrapper for the new instance, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +import org.springframework.core.NamedThreadLocal;, +	/**, +	 * The name of the currently created bean, for implicit dependency registration, +	 * on getBean etc invocations triggered from a user-specified Supplier callback., +	 */, +	private final NamedThreadLocal<String> currentlyCreatedBean = new NamedThreadLocal<>("Currently created bean");, +, +	 * @return a BeanWrapper for the new instance, +	 * @see #obtainFromSupplier, +			return obtainFromSupplier(instanceSupplier, beanName);, +	 * Obtain a bean instance from the given supplier., +	 * @param instanceSupplier the configured supplier, +	 * @param beanName the corresponding bean name, +	 * @return a BeanWrapper for the new instance, +	 * @since 5.0, +	 * @see #getObjectForBeanInstance, +	 */, +	protected BeanWrapper obtainFromSupplier(Supplier<?> instanceSupplier, String beanName) {, +		String outerBean = this.currentlyCreatedBean.get();, +		this.currentlyCreatedBean.set(beanName);, +		Object instance;, +		try {, +			instance = instanceSupplier.get();, +		}, +		finally {, +			if (outerBean != null) {, +				this.currentlyCreatedBean.set(outerBean);, +			}, +			else {, +				this.currentlyCreatedBean.remove();, +			}, +		}, +		BeanWrapper bw = new BeanWrapperImpl(instance);, +		initBeanWrapper(bw);, +		return bw;, +	}, +, +	/**]