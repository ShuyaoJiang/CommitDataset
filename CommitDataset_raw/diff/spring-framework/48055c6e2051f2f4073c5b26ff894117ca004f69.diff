[+++ b/org.springframework.expression/readme.txt, +  say we cannot as it won't fit into an int? (see OperatorTests.testMathOperatorDivide04), +- All reals are represented as Doubles (so 1.25f is held internally as a double, can be converted to float when required though) - is that ok?, +++ b/org.springframework.expression/readme.txt, +  say we cannot as it won't fit into an int? (see OperatorTests.testMathOperatorDivide04), +- All reals are represented as Doubles (so 1.25f is held internally as a double, can be converted to float when required though) - is that ok?, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorPlus.java, +++ b/org.springframework.expression/readme.txt, +  say we cannot as it won't fit into an int? (see OperatorTests.testMathOperatorDivide04), +- All reals are represented as Doubles (so 1.25f is held internally as a double, can be converted to float when required though) - is that ok?, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorPlus.java, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/standard/StandardTypeConverter.java, +			if (value instanceof Integer) {, +				return ((Integer)value).floatValue();, +			} else {, +		}, +			return new Class<?>[] { Double.class, Integer.class };, +++ b/org.springframework.expression/readme.txt, +  say we cannot as it won't fit into an int? (see OperatorTests.testMathOperatorDivide04), +- All reals are represented as Doubles (so 1.25f is held internally as a double, can be converted to float when required though) - is that ok?, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorPlus.java, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/standard/StandardTypeConverter.java, +			if (value instanceof Integer) {, +				return ((Integer)value).floatValue();, +			} else {, +		}, +			return new Class<?>[] { Double.class, Integer.class };, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java, +++ b/org.springframework.expression/readme.txt, +  say we cannot as it won't fit into an int? (see OperatorTests.testMathOperatorDivide04), +- All reals are represented as Doubles (so 1.25f is held internally as a double, can be converted to float when required though) - is that ok?, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorPlus.java, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/standard/StandardTypeConverter.java, +			if (value instanceof Integer) {, +				return ((Integer)value).floatValue();, +			} else {, +		}, +			return new Class<?>[] { Double.class, Integer.class };, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/LiteralTests.java, +	, +	public void testConversions() {, +		// getting the expression type to be what we want - either:, +		evaluate("(#foo=37;#foo.byteValue())",(byte)37,Byte.class); // calling byteValue() on Integer.class, +		evaluateAndAskForReturnType("(#foo=37;#foo)",(byte)37,Byte.class); // relying on registered type converters, +	}, +++ b/org.springframework.expression/readme.txt, +  say we cannot as it won't fit into an int? (see OperatorTests.testMathOperatorDivide04), +- All reals are represented as Doubles (so 1.25f is held internally as a double, can be converted to float when required though) - is that ok?, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorPlus.java, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/standard/StandardTypeConverter.java, +			if (value instanceof Integer) {, +				return ((Integer)value).floatValue();, +			} else {, +		}, +			return new Class<?>[] { Double.class, Integer.class };, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/LiteralTests.java, +	, +	public void testConversions() {, +		// getting the expression type to be what we want - either:, +		evaluate("(#foo=37;#foo.byteValue())",(byte)37,Byte.class); // calling byteValue() on Integer.class, +		evaluateAndAskForReturnType("(#foo=37;#foo)",(byte)37,Byte.class); // relying on registered type converters, +	}, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/OperatorTests.java, +	public void testMathOperatorAdd02() {, +		evaluate("'hello' + ' ' + 'world'", "hello world", String.class);, +	}, +, +	public void testIntegerArithmetic() {, +		evaluate("2 + 4", "6", Integer.class);, +		evaluate("5 - 4", "1", Integer.class);, +		evaluate("3 * 5", 15, Integer.class);, +		evaluate("3 / 1", 3, Integer.class);, +		evaluate("3 % 2", 1, Integer.class);, +	}, +, +	public void testMathOperatorDivide_ConvertToDouble() {, +		evaluateAndAskForReturnType("8/4", new Double(2.0), Double.class);, +	}, +, +	public void testMathOperatorDivide04_ConvertToFloat() {, +		evaluateAndAskForReturnType("8/4", new Float(2.0), Float.class);, +	}, +, +	// public void testMathOperatorDivide04() {, +	// evaluateAndAskForReturnType("8.4 / 4", "2", Integer.class);, +	// }, +, +	public void testDoubles() {, +		evaluate("3.0d + 5.0d", 8.0d, Double.class);, +		evaluate("3.0d - 5.0d", -2.0d, Double.class);, +		evaluate("3.0d * 5.0d", 15.0d, Double.class);, +		evaluate("3.0d / 5.0d", 0.6d, Double.class);, +		evaluate("6.0d % 3.5d", 2.5d, Double.class);, +	}, +, +	public void testFloats() {, +		evaluate("3.0f + 5.0f", 8.0d, Double.class);, +		evaluate("3.0f - 5.0f", -2.0d, Double.class);]