[+++ b/org.springframework.context/src/main/java/org/springframework/format/Parser.java, + * Parses text strings to produce instances of T., + * @param <T> the type of object this Parser produces, +	 * Parse a text String to produce a T., +	 * @param text the text string, +	 * @return an instance of T, +	 * @throws IllegalArgumentException when a parse exception occurs, +	T parse(String text, Locale locale) throws ParseException;, +++ b/org.springframework.context/src/main/java/org/springframework/format/Parser.java, + * Parses text strings to produce instances of T., + * @param <T> the type of object this Parser produces, +	 * Parse a text String to produce a T., +	 * @param text the text string, +	 * @return an instance of T, +	 * @throws IllegalArgumentException when a parse exception occurs, +	T parse(String text, Locale locale) throws ParseException;, +++ b/org.springframework.context/src/main/java/org/springframework/format/Printer.java, +	 * @param object the instance to print, +	 * @return the printed text string, +++ b/org.springframework.context/src/main/java/org/springframework/format/Parser.java, + * Parses text strings to produce instances of T., + * @param <T> the type of object this Parser produces, +	 * Parse a text String to produce a T., +	 * @param text the text string, +	 * @return an instance of T, +	 * @throws IllegalArgumentException when a parse exception occurs, +	T parse(String text, Locale locale) throws ParseException;, +++ b/org.springframework.context/src/main/java/org/springframework/format/Printer.java, +	 * @param object the instance to print, +	 * @return the printed text string, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/DateFormatter.java, +	public Date parse(String text, Locale locale) throws ParseException {, +		return getDateFormat(locale).parse(text);, +++ b/org.springframework.context/src/main/java/org/springframework/format/Parser.java, + * Parses text strings to produce instances of T., + * @param <T> the type of object this Parser produces, +	 * Parse a text String to produce a T., +	 * @param text the text string, +	 * @return an instance of T, +	 * @throws IllegalArgumentException when a parse exception occurs, +	T parse(String text, Locale locale) throws ParseException;, +++ b/org.springframework.context/src/main/java/org/springframework/format/Printer.java, +	 * @param object the instance to print, +	 * @return the printed text string, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/DateFormatter.java, +	public Date parse(String text, Locale locale) throws ParseException {, +		return getDateFormat(locale).parse(text);, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/DateTimeParser.java, +	public DateTime parse(String text, Locale locale) throws ParseException {, +		return JodaTimeContextHolder.getFormatter(this.formatter, locale).parseDateTime(text);, +++ b/org.springframework.context/src/main/java/org/springframework/format/Parser.java, + * Parses text strings to produce instances of T., + * @param <T> the type of object this Parser produces, +	 * Parse a text String to produce a T., +	 * @param text the text string, +	 * @return an instance of T, +	 * @throws IllegalArgumentException when a parse exception occurs, +	T parse(String text, Locale locale) throws ParseException;, +++ b/org.springframework.context/src/main/java/org/springframework/format/Printer.java, +	 * @param object the instance to print, +	 * @return the printed text string, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/DateFormatter.java, +	public Date parse(String text, Locale locale) throws ParseException {, +		return getDateFormat(locale).parse(text);, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/DateTimeParser.java, +	public DateTime parse(String text, Locale locale) throws ParseException {, +		return JodaTimeContextHolder.getFormatter(this.formatter, locale).parseDateTime(text);, +++ b/org.springframework.context/src/main/java/org/springframework/format/number/AbstractNumberFormatter.java, +	public String print(Number number, Locale locale) {, +		return getNumberFormat(locale).format(number);, +	public Number parse(String text, Locale locale) throws ParseException {, +		Number number = format.parse(text, position);, +			throw new ParseException(text, position.getIndex());, +			if (text.length() != position.getIndex()) {, +				throw new ParseException(text, position.getIndex());, +++ b/org.springframework.context/src/main/java/org/springframework/format/Parser.java, + * Parses text strings to produce instances of T., + * @param <T> the type of object this Parser produces, +	 * Parse a text String to produce a T., +	 * @param text the text string, +	 * @return an instance of T, +	 * @throws IllegalArgumentException when a parse exception occurs, +	T parse(String text, Locale locale) throws ParseException;, +++ b/org.springframework.context/src/main/java/org/springframework/format/Printer.java, +	 * @param object the instance to print, +	 * @return the printed text string, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/DateFormatter.java, +	public Date parse(String text, Locale locale) throws ParseException {, +		return getDateFormat(locale).parse(text);, +++ b/org.springframework.context/src/main/java/org/springframework/format/datetime/joda/DateTimeParser.java, +	public DateTime parse(String text, Locale locale) throws ParseException {, +		return JodaTimeContextHolder.getFormatter(this.formatter, locale).parseDateTime(text);, +++ b/org.springframework.context/src/main/java/org/springframework/format/number/AbstractNumberFormatter.java, +	public String print(Number number, Locale locale) {, +		return getNumberFormat(locale).format(number);, +	public Number parse(String text, Locale locale) throws ParseException {, +		Number number = format.parse(text, position);, +			throw new ParseException(text, position.getIndex());, +			if (text.length() != position.getIndex()) {, +				throw new ParseException(text, position.getIndex());]