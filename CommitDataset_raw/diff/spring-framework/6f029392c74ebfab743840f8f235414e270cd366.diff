[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/AbstractHandlerResultHandler.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/AbstractHandlerResultHandler.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java, +import org.springframework.core.annotation.AnnotatedElementUtils;, +import org.springframework.http.HttpStatus;, +import org.springframework.web.bind.annotation.ResponseStatus;, +	private HttpStatus responseStatus;, +, +		initResponseStatus();, +		initResponseStatus();, +	private void initResponseStatus() {, +		ResponseStatus annotation = getMethodAnnotation(ResponseStatus.class);, +		if (annotation == null) {, +			annotation = AnnotatedElementUtils.findMergedAnnotation(getBeanType(), ResponseStatus.class);, +		}, +		if (annotation != null) {, +			this.responseStatus = annotation.code();, +		}, +	}, +				if (this.responseStatus != null) {, +					exchange.getResponse().setStatusCode(this.responseStatus);, +				}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/AbstractHandlerResultHandler.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java, +import org.springframework.core.annotation.AnnotatedElementUtils;, +import org.springframework.http.HttpStatus;, +import org.springframework.web.bind.annotation.ResponseStatus;, +	private HttpStatus responseStatus;, +, +		initResponseStatus();, +		initResponseStatus();, +	private void initResponseStatus() {, +		ResponseStatus annotation = getMethodAnnotation(ResponseStatus.class);, +		if (annotation == null) {, +			annotation = AnnotatedElementUtils.findMergedAnnotation(getBeanType(), ResponseStatus.class);, +		}, +		if (annotation != null) {, +			this.responseStatus = annotation.code();, +		}, +	}, +				if (this.responseStatus != null) {, +					exchange.getResponse().setStatusCode(this.responseStatus);, +				}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +			return Mono.from((Publisher<Void>) publisher);, +					return (messageWriter instanceof ServerHttpMessageWriter ?, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/AbstractHandlerResultHandler.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java, +import org.springframework.core.annotation.AnnotatedElementUtils;, +import org.springframework.http.HttpStatus;, +import org.springframework.web.bind.annotation.ResponseStatus;, +	private HttpStatus responseStatus;, +, +		initResponseStatus();, +		initResponseStatus();, +	private void initResponseStatus() {, +		ResponseStatus annotation = getMethodAnnotation(ResponseStatus.class);, +		if (annotation == null) {, +			annotation = AnnotatedElementUtils.findMergedAnnotation(getBeanType(), ResponseStatus.class);, +		}, +		if (annotation != null) {, +			this.responseStatus = annotation.code();, +		}, +	}, +				if (this.responseStatus != null) {, +					exchange.getResponse().setStatusCode(this.responseStatus);, +				}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +			return Mono.from((Publisher<Void>) publisher);, +					return (messageWriter instanceof ServerHttpMessageWriter ?, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/AbstractHandlerResultHandler.java, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java, +import org.springframework.core.annotation.AnnotatedElementUtils;, +import org.springframework.http.HttpStatus;, +import org.springframework.web.bind.annotation.ResponseStatus;, +	private HttpStatus responseStatus;, +, +		initResponseStatus();, +		initResponseStatus();, +	private void initResponseStatus() {, +		ResponseStatus annotation = getMethodAnnotation(ResponseStatus.class);, +		if (annotation == null) {, +			annotation = AnnotatedElementUtils.findMergedAnnotation(getBeanType(), ResponseStatus.class);, +		}, +		if (annotation != null) {, +			this.responseStatus = annotation.code();, +		}, +	}, +				if (this.responseStatus != null) {, +					exchange.getResponse().setStatusCode(this.responseStatus);, +				}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java, +			return Mono.from((Publisher<Void>) publisher);, +					return (messageWriter instanceof ServerHttpMessageWriter ?, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/ViewResolutionResultHandler.java, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/method/InvocableHandlerMethodTests.java, +import org.springframework.http.HttpStatus;, +import org.springframework.web.bind.annotation.ResponseStatus;, +	@Test]