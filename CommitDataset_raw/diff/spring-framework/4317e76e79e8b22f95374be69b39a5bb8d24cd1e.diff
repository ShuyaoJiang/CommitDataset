[+++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationUtilsTests.java, +		exception.expectMessage(containsString("must be declared as an @AliasFor [location]"));, +		List<String> locations = annotations.stream().map(ContextConfig::location).collect(toList());, +		assertEquals("location", getAliasedAttributeName(attribute, ContextConfig.class));, +		assertSame(synthesizedWebMapping, synthesizedAgainWebMapping);, +		exception.expectMessage(containsString("declares an alias for attribute [location] in meta-annotation"));, +		assertNotSame(webMapping, synthesizedWebMapping1);, +		assertNotSame(webMapping, synthesizedWebMapping2);, +		assertEquals("location: ", "", contextConfig.location());, +		map.put("location", "test.xml");, +		assertEquals("location: ", "test.xml", contextConfig.location());, +		List<String> locations = Arrays.stream(configs).map(ContextConfig::location).collect(toList());, +		List<String> locations = Arrays.stream(configs).map(ContextConfig::location).collect(toList());, +		@AliasFor("location"), +		String location() default "";, +		// @AliasFor("location"), +		String location() default "";, +	@Hierarchy({ @ContextConfig("A"), @ContextConfig(location = "B") }), +		@AliasFor(annotation = ContextConfig.class, attribute = "location"), +		@AliasFor(annotation = ContextConfig.class, attribute = "location"), +	 * Mock of {@code org.springframework.context.annotation.ComponentScan}., +	 * Mock of {@code org.springframework.context.annotation.ComponentScan}.]