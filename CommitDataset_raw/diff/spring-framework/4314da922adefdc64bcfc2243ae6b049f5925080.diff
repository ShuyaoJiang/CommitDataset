[+++ b/spring-web/src/main/java/org/springframework/web/context/support/WebApplicationObjectSupport.java, + * Copyright 2002-2015 the original author or authors., +		WebApplicationContext wac = getWebApplicationContext();, +		if (wac == null) {, +			return null;, +		}, +		ServletContext servletContext = wac.getServletContext();, +++ b/spring-web/src/main/java/org/springframework/web/context/support/WebApplicationObjectSupport.java, + * Copyright 2002-2015 the original author or authors., +		WebApplicationContext wac = getWebApplicationContext();, +		if (wac == null) {, +			return null;, +		}, +		ServletContext servletContext = wac.getServletContext();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +	 * @see org.springframework.web.servlet.support.RequestContextUtils#findWebApplicationContext, +++ b/spring-web/src/main/java/org/springframework/web/context/support/WebApplicationObjectSupport.java, + * Copyright 2002-2015 the original author or authors., +		WebApplicationContext wac = getWebApplicationContext();, +		if (wac == null) {, +			return null;, +		}, +		ServletContext servletContext = wac.getServletContext();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +	 * @see org.springframework.web.servlet.support.RequestContextUtils#findWebApplicationContext, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/ViewRendererServlet.java, + * Copyright 2002-2015 the original author or authors., +	 * @see org.springframework.web.servlet.support.RequestContextUtils#findWebApplicationContext, +++ b/spring-web/src/main/java/org/springframework/web/context/support/WebApplicationObjectSupport.java, + * Copyright 2002-2015 the original author or authors., +		WebApplicationContext wac = getWebApplicationContext();, +		if (wac == null) {, +			return null;, +		}, +		ServletContext servletContext = wac.getServletContext();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +	 * @see org.springframework.web.servlet.support.RequestContextUtils#findWebApplicationContext, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/ViewRendererServlet.java, + * Copyright 2002-2015 the original author or authors., +	 * @see org.springframework.web.servlet.support.RequestContextUtils#findWebApplicationContext, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/RequestContext.java, + * Copyright 2002-2015 the original author or authors., +			this.webApplicationContext = RequestContextUtils.findWebApplicationContext(request, servletContext);, +			if (this.webApplicationContext == null) {, +				throw new IllegalStateException("No WebApplicationContext found: not in a DispatcherServlet " +, +						"request and no ContextLoaderListener registered?");, +			}, +		if (this.webApplicationContext.containsBean(RequestContextUtils.REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME)) {, +					RequestContextUtils.REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME, RequestDataValueProcessor.class);, +++ b/spring-web/src/main/java/org/springframework/web/context/support/WebApplicationObjectSupport.java, + * Copyright 2002-2015 the original author or authors., +		WebApplicationContext wac = getWebApplicationContext();, +		if (wac == null) {, +			return null;, +		}, +		ServletContext servletContext = wac.getServletContext();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java, +	 * @see org.springframework.web.servlet.support.RequestContextUtils#findWebApplicationContext, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/ViewRendererServlet.java, + * Copyright 2002-2015 the original author or authors., +	 * @see org.springframework.web.servlet.support.RequestContextUtils#findWebApplicationContext, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/RequestContext.java, + * Copyright 2002-2015 the original author or authors., +			this.webApplicationContext = RequestContextUtils.findWebApplicationContext(request, servletContext);, +			if (this.webApplicationContext == null) {, +				throw new IllegalStateException("No WebApplicationContext found: not in a DispatcherServlet " +, +						"request and no ContextLoaderListener registered?");, +			}, +		if (this.webApplicationContext.containsBean(RequestContextUtils.REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME)) {, +					RequestContextUtils.REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME, RequestDataValueProcessor.class);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/support/RequestContextUtils.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.web.context.ContextLoader;, +	 * The name of the bean to use to look up in an implementation of, +	 * {@link RequestDataValueProcessor} has been configured., +	 * @since 4.2.1, +	 */, +	public static final String REQUEST_DATA_VALUE_PROCESSOR_BEAN_NAME = "requestDataValueProcessor";, +, +, +	/**, +	 * @see #getWebApplicationContext(ServletRequest, ServletContext), +	 * @deprecated as of Spring 4.2.1, in favor of, +	 * {@link #findWebApplicationContext(HttpServletRequest)}, +	@Deprecated, +	public static WebApplicationContext getWebApplicationContext(ServletRequest request) throws IllegalStateException {, +	 * @see DispatcherServlet#WEB_APPLICATION_CONTEXT_ATTRIBUTE, +	 * @see WebApplicationContextUtils#getRequiredWebApplicationContext(ServletContext), +	 * @deprecated as of Spring 4.2.1, in favor of, +	 * {@link #findWebApplicationContext(HttpServletRequest, ServletContext)}, +	@Deprecated, +	 * Look for the WebApplicationContext associated with the DispatcherServlet, +	 * that has initiated request processing, and for the global context if none, +	 * was found associated with the current request. The global context will, +	 * be found via the ServletContext or via ContextLoader's current context., +	 * <p>NOTE: This variant remains compatible with Servlet 2.5, explicitly, +	 * checking a given ServletContext instead of deriving it from the request., +	 * @param request current HTTP request, +	 * @param servletContext current servlet context, +	 * @return the request-specific WebApplicationContext, or the global one]