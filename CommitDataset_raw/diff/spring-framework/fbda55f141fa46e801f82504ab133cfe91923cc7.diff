[+++ b/org.springframework.core/src/main/java/org/springframework/util/TypeUtils.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.util.ClassUtils;, +, + * @author Chris Beams, +		if (rhsType == null) {, +			return true;, +		}, +, +		if (lhsType == null) {, +			return false;, +		}, +, +		// all types are assignable to themselves and to class Object, +, +		if (lhsType instanceof Class<?>) {, +			Class<?> lhsClass = (Class<?>) lhsType;, +, +			// just comparing two classes, +			if (rhsType instanceof Class<?>) {, +				return ClassUtils.isAssignable(lhsClass, (Class<?>) rhsType);, +, +			if (rhsType instanceof ParameterizedType) {, +, +				// a parameterized type is always assignable to its raw class type, +				if (rhsRaw instanceof Class<?>) {, +					return ClassUtils.isAssignable(lhsClass, (Class<?>) rhsRaw);, +, +, +		// parameterized types are only assignable to other parameterized types and class types, +			if (rhsType instanceof Class<?>) {, +, +				if (lhsRaw instanceof Class<?>) {, +					return ClassUtils.isAssignable((Class<?>) lhsRaw, (Class<?>) rhsType);, +, +, +			if (rhsType instanceof Class<?>) {, +				Class<?> rhsClass = (Class<?>) rhsType;, +, +, +, +, +, +, +, +, +, +		Type[] lUpperBounds = lhsType.getUpperBounds();, +, +		// supply the implicit upper bound if none are specified, +		if (lUpperBounds.length == 0) {, +			lUpperBounds = new Type[] { Object.class };, +		Type[] lLowerBounds = lhsType.getLowerBounds();, +, +		// supply the implicit lower bound if none are specified, +		if (lLowerBounds.length == 0) {, +			lLowerBounds = new Type[] { null };, +		}, +, +		if (rhsType instanceof WildcardType) {, +			// both the upper and lower bounds of the right-hand side must be, +			// completely enclosed in the upper and lower bounds of the left-, +			// hand side., +			WildcardType rhsWcType = (WildcardType) rhsType;, +			Type[] rUpperBounds = rhsWcType.getUpperBounds();, +, +			if (rUpperBounds.length == 0) {, +				rUpperBounds = new Type[] { Object.class };, +			}, +, +			Type[] rLowerBounds = rhsWcType.getLowerBounds();, +, +			if (rLowerBounds.length == 0) {, +				rLowerBounds = new Type[] { null };, +			}, +, +			for (Type lBound : lUpperBounds) {, +				for (Type rBound : rUpperBounds) {, +					if (!isAssignable(lBound, rBound)) {, +						return false;, +					}, +				}, +, +				for (Type rBound : rLowerBounds) {, +					if (!isAssignable(lBound, rBound)) {, +						return false;, +					}, +				}, +			}, +, +			for (Type lBound : lLowerBounds) {, +				for (Type rBound : rUpperBounds) {, +					if (!isAssignable(rBound, lBound)) {, +						return false;, +					}, +				}, +, +				for (Type rBound : rLowerBounds) {, +					if (!isAssignable(rBound, lBound)) {, +						return false;]