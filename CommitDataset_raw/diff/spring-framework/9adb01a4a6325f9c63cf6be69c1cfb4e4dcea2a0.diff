[+++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/configuration/ConfigurationClassProcessingTests.java, +import org.springframework.beans.factory.annotation.Value;, +import org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;, +import org.springframework.core.PriorityOrdered;, +		AnnotationConfigApplicationContext factory = new AnnotationConfigApplicationContext();, +		factory.register(ConfigWithPostProcessor.class);, +		RootBeanDefinition placeholderConfigurer = new RootBeanDefinition(PropertyPlaceholderConfigurer.class);, +		placeholderConfigurer.getPropertyValues().add("properties", "myProp=myValue");, +		factory.registerBeanDefinition("placeholderConfigurer", placeholderConfigurer);, +		factory.refresh();, +		assertEquals("foo-processed-myValue", foo.getName());, +		assertEquals("bar-processed-myValue", bar.getName());, +		assertEquals("baz-processed-myValue", baz.getName());, +		@Value("${myProp}"), +		private String myProp;, +, +		public POBPP beanPostProcessor() {, +			return new POBPP() {, +				String nameSuffix = "-processed-" + myProp;, +				public int getOrder() {, +					return 0;, +				}, +		//@Bean, +					bd.getPropertyValues().addPropertyValue("nameSuffix", "-processed-" + myProp);, +	public interface POBPP extends BeanPostProcessor {, +	}, +, +]