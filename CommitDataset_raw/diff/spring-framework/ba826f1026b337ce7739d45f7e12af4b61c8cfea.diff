[+++ b/spring-test/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java, +import java.nio.charset.Charset;, +import org.springframework.util.MultiValueMap;, +import org.springframework.web.util.UriComponentsBuilder;, +import org.springframework.web.util.UriUtils;, +import static java.nio.charset.StandardCharsets.UTF_8;, +		assertMultiValueMapCount("header", name, headers, expectedCount);, +	}, +, +, +	/**, +	 * Assert request query parameter values with the given Hamcrest matcher., +	 */, +	@SafeVarargs, +	public static RequestMatcher queryParameter(final String name, final Matcher<? super String>... matchers) {, +		return queryParameter(name, UTF_8, matchers);, +	}, +, +	/**, +	 * Assert request query parameter values with the given Hamcrest matcher., +	 */, +	@SafeVarargs, +	public static RequestMatcher queryParameter(final String name, final Charset charset,, +												final Matcher<? super String>... matchers) {, +		return new RequestMatcher() {, +			@Override, +			public void match(ClientHttpRequest request) {, +				MultiValueMap<String, String> queryParameters = getQueryParameters(request.getURI().toString(), charset);, +				assertQueryParameterValueCount(name, queryParameters, matchers.length);, +				for (int i = 0 ; i < matchers.length; i++) {, +					assertThat("Request query parameter", queryParameters.get(name).get(i), matchers[i]);, +				}, +			}, +		};, +	}, +, +	/**, +	 * Assert request query parameter values., +	 */, +	public static RequestMatcher queryParameter(final String name, final String... expectedValues) {, +		return queryParameter(name, UTF_8, expectedValues);, +	}, +, +	/**, +	 * Assert request query parameter values., +	 */, +	public static RequestMatcher queryParameter(final String name, final Charset charset, final String... expectedValues) {, +		return new RequestMatcher() {, +			@Override, +			public void match(ClientHttpRequest request) {, +				MultiValueMap<String, String> queryParameters = getQueryParameters(request.getURI().toString(), charset);, +				assertQueryParameterValueCount(name, queryParameters, expectedValues.length);, +				for (int i = 0 ; i < expectedValues.length; i++) {, +					assertEquals("Request query parameter + [" + name + "]",, +							expectedValues[i], queryParameters.get(name).get(i));, +				}, +			}, +		};, +	}, +, +	private static MultiValueMap<String, String> getQueryParameters(String uri, Charset charset) {, +		String decodeUri = UriUtils.decode(uri, charset);, +		MultiValueMap<String, String> queryParameters = UriComponentsBuilder.fromUriString(decodeUri), +				.build().getQueryParams();, +		return queryParameters;, +	}, +, +	private static void assertQueryParameterValueCount(final String name, MultiValueMap<String, String> queryParameters, int expectedCount) {, +		assertMultiValueMapCount("query parameter", name, queryParameters, expectedCount);, +	}, +, +	private static void assertMultiValueMapCount(String type, final String name, MultiValueMap<String, String> multiValueMap, int expectedCount) {, +		List<String> actualValues = multiValueMap.get(name);, +		assertTrue("Expected " + type + " <" + name + ">", actualValues != null);, +		assertTrue("Expected " + type + " <" + name + "> to have at least <" + expectedCount +, +++ b/spring-test/src/main/java/org/springframework/test/web/client/match/MockRestRequestMatchers.java, +import java.nio.charset.Charset;, +import org.springframework.util.MultiValueMap;, +import org.springframework.web.util.UriComponentsBuilder;, +import org.springframework.web.util.UriUtils;, +import static java.nio.charset.StandardCharsets.UTF_8;, +		assertMultiValueMapCount("header", name, headers, expectedCount);, +	}, +, +, +	/**, +	 * Assert request query parameter values with the given Hamcrest matcher., +	 */, +	@SafeVarargs, +	public static RequestMatcher queryParameter(final String name, final Matcher<? super String>... matchers) {, +		return queryParameter(name, UTF_8, matchers);, +	}, +, +	/**, +	 * Assert request query parameter values with the given Hamcrest matcher., +	 */, +	@SafeVarargs, +	public static RequestMatcher queryParameter(final String name, final Charset charset,, +												final Matcher<? super String>... matchers) {, +		return new RequestMatcher() {]