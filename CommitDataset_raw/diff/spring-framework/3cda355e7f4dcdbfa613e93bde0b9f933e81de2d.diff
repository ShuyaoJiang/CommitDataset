[+++ b/spring-aspects/src/main/java/org/springframework/cache/aspectj/JCacheCacheAspect.aj, +			AnyThrow.throwUnchecked(th.getOriginal());, +			return null; // never reached, +, +	private static class AnyThrow {, +, +		private static void throwUnchecked(Throwable e) {, +			AnyThrow.<RuntimeException>throwAny(e);, +		}, +, +		@SuppressWarnings("unchecked"), +		private static <E extends Throwable> void throwAny(Throwable e) throws E {, +			throw (E)e;, +		}, +	}, +, +++ b/spring-aspects/src/main/java/org/springframework/cache/aspectj/JCacheCacheAspect.aj, +			AnyThrow.throwUnchecked(th.getOriginal());, +			return null; // never reached, +, +	private static class AnyThrow {, +, +		private static void throwUnchecked(Throwable e) {, +			AnyThrow.<RuntimeException>throwAny(e);, +		}, +, +		@SuppressWarnings("unchecked"), +		private static <E extends Throwable> void throwAny(Throwable e) throws E {, +			throw (E)e;, +		}, +	}, +, +++ b/spring-aspects/src/test/java/org/springframework/cache/aspectj/AspectJJcacheNamespaceConfigTests.java, +package org.springframework.cache.aspectj;, +++ b/spring-aspects/src/main/java/org/springframework/cache/aspectj/JCacheCacheAspect.aj, +			AnyThrow.throwUnchecked(th.getOriginal());, +			return null; // never reached, +, +	private static class AnyThrow {, +, +		private static void throwUnchecked(Throwable e) {, +			AnyThrow.<RuntimeException>throwAny(e);, +		}, +, +		@SuppressWarnings("unchecked"), +		private static <E extends Throwable> void throwAny(Throwable e) throws E {, +			throw (E)e;, +		}, +	}, +, +++ b/spring-aspects/src/test/java/org/springframework/cache/aspectj/AspectJJcacheNamespaceConfigTests.java, +package org.springframework.cache.aspectj;, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/AnnotatedJCacheableService.java, +import java.io.IOException;, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.concurrent.atomic.AtomicLong;, +, +	@CacheResult(exceptionCacheName = "exception", nonCachedExceptions = NullPointerException.class), +	public Long cacheWithCheckedException(@CacheKey String id, boolean matchFilter) throws IOException {, +		throwCheckedException(matchFilter);, +		return 0L; // Never reached, +	}, +, +	@Override, +	private void throwCheckedException(boolean matchFilter) throws IOException {, +		long count = exceptionCounter.getAndIncrement();, +		if (matchFilter) {, +			throw new IOException("Expected exception (" + count + ")");, +		}, +		else {, +			throw new NullPointerException("Expected exception (" + count + ")");, +		}, +	}, +, +++ b/spring-aspects/src/main/java/org/springframework/cache/aspectj/JCacheCacheAspect.aj, +			AnyThrow.throwUnchecked(th.getOriginal());, +			return null; // never reached, +, +	private static class AnyThrow {, +, +		private static void throwUnchecked(Throwable e) {, +			AnyThrow.<RuntimeException>throwAny(e);, +		}, +, +		@SuppressWarnings("unchecked"), +		private static <E extends Throwable> void throwAny(Throwable e) throws E {, +			throw (E)e;, +		}, +	}, +, +++ b/spring-aspects/src/test/java/org/springframework/cache/aspectj/AspectJJcacheNamespaceConfigTests.java, +package org.springframework.cache.aspectj;, +++ b/spring-aspects/src/test/java/org/springframework/cache/config/AnnotatedJCacheableService.java, +import java.io.IOException;, +import java.util.concurrent.ConcurrentHashMap;, +import java.util.concurrent.atomic.AtomicLong;, +, +	@CacheResult(exceptionCacheName = "exception", nonCachedExceptions = NullPointerException.class), +	public Long cacheWithCheckedException(@CacheKey String id, boolean matchFilter) throws IOException {, +		throwCheckedException(matchFilter);]