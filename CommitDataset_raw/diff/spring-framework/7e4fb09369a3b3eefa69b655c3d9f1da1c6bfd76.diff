[+++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/commonj/TimerManagerFactoryBean.java, + * Copyright 2002-2009 the original author or authors., +			this.timerManager = lookup(this.timerManagerName, TimerManager.class);, +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/commonj/TimerManagerFactoryBean.java, + * Copyright 2002-2009 the original author or authors., +			this.timerManager = lookup(this.timerManagerName, TimerManager.class);, +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/commonj/WorkManagerTaskExecutor.java, + * Copyright 2002-2009 the original author or authors., +import java.util.concurrent.Future;, +import java.util.concurrent.FutureTask;, +import java.util.concurrent.Callable;, +			this.workManager = lookup(this.workManagerName, WorkManager.class);, +	public void execute(Runnable task, long startTimeout) {, +		execute(task);, +	}, +, +	public Future<?> submit(Runnable task) {, +		FutureTask<Object> future = new FutureTask<Object>(task, null);, +		execute(future);, +		return future;, +	}, +, +	public <T> Future<T> submit(Callable<T> task) {, +		FutureTask<T> future = new FutureTask<T>(task);, +		execute(future);, +		return future;, +	}, +, +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/commonj/TimerManagerFactoryBean.java, + * Copyright 2002-2009 the original author or authors., +			this.timerManager = lookup(this.timerManagerName, TimerManager.class);, +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/commonj/WorkManagerTaskExecutor.java, + * Copyright 2002-2009 the original author or authors., +import java.util.concurrent.Future;, +import java.util.concurrent.FutureTask;, +import java.util.concurrent.Callable;, +			this.workManager = lookup(this.workManagerName, WorkManager.class);, +	public void execute(Runnable task, long startTimeout) {, +		execute(task);, +	}, +, +	public Future<?> submit(Runnable task) {, +		FutureTask<Object> future = new FutureTask<Object>(task, null);, +		execute(future);, +		return future;, +	}, +, +	public <T> Future<T> submit(Callable<T> task) {, +		FutureTask<T> future = new FutureTask<T>(task);, +		execute(future);, +		return future;, +	}, +, +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/quartz/SimpleThreadPoolTaskExecutor.java, + * Copyright 2002-2009 the original author or authors., +import java.util.concurrent.Callable;, +import java.util.concurrent.Future;, +import java.util.concurrent.FutureTask;, +, + * {@link org.springframework.core.task.TaskExecutor} interface, + * and listens to Spring lifecycle callbacks., + * <p>Can be shared between a Quartz Scheduler (specified as "taskExecutor"), +	public void execute(Runnable task, long startTimeout) {, +		execute(task);, +	}, +, +	public Future<?> submit(Runnable task) {, +		FutureTask<Object> future = new FutureTask<Object>(task, null);, +		execute(future);, +		return future;, +	}, +, +	public <T> Future<T> submit(Callable<T> task) {, +		FutureTask<T> future = new FutureTask<T>(task);, +		execute(future);, +		return future;, +	}, +, +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/commonj/TimerManagerFactoryBean.java, + * Copyright 2002-2009 the original author or authors., +			this.timerManager = lookup(this.timerManagerName, TimerManager.class);, +++ b/org.springframework.context.support/src/main/java/org/springframework/scheduling/commonj/WorkManagerTaskExecutor.java, + * Copyright 2002-2009 the original author or authors., +import java.util.concurrent.Future;, +import java.util.concurrent.FutureTask;, +import java.util.concurrent.Callable;, +			this.workManager = lookup(this.workManagerName, WorkManager.class);, +	public void execute(Runnable task, long startTimeout) {, +		execute(task);, +	}, +, +	public Future<?> submit(Runnable task) {, +		FutureTask<Object> future = new FutureTask<Object>(task, null);, +		execute(future);, +		return future;, +	}, +, +	public <T> Future<T> submit(Callable<T> task) {, +		FutureTask<T> future = new FutureTask<T>(task);, +		execute(future);]