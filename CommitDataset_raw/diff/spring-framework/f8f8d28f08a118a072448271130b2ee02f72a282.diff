[+++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +			return instantiateClass(clazz.getDeclaredConstructor());, +			if (KotlinDetector.isKotlinReflectPresent() && KotlinDetector.isKotlinType(clazz)) {, +				Constructor<T> ctor = findPrimaryConstructor(clazz);, +				if (ctor != null) {, +					return instantiateClass(ctor);, +				}, +			}, +			return (KotlinDetector.isKotlinReflectPresent() && KotlinDetector.isKotlinType(ctor.getDeclaringClass()) ?, +		if (KotlinDetector.isKotlinReflectPresent() && KotlinDetector.isKotlinType(clazz)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +			return instantiateClass(clazz.getDeclaredConstructor());, +			if (KotlinDetector.isKotlinReflectPresent() && KotlinDetector.isKotlinType(clazz)) {, +				Constructor<T> ctor = findPrimaryConstructor(clazz);, +				if (ctor != null) {, +					return instantiateClass(ctor);, +				}, +			}, +			return (KotlinDetector.isKotlinReflectPresent() && KotlinDetector.isKotlinType(ctor.getDeclaringClass()) ?, +		if (KotlinDetector.isKotlinReflectPresent() && KotlinDetector.isKotlinType(clazz)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, +					(KotlinDetector.isKotlinReflectPresent() &&, +							KotlinDetector.isKotlinType(this.field.getDeclaringClass()) &&, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +			return instantiateClass(clazz.getDeclaredConstructor());, +			if (KotlinDetector.isKotlinReflectPresent() && KotlinDetector.isKotlinType(clazz)) {, +				Constructor<T> ctor = findPrimaryConstructor(clazz);, +				if (ctor != null) {, +					return instantiateClass(ctor);, +				}, +			}, +			return (KotlinDetector.isKotlinReflectPresent() && KotlinDetector.isKotlinType(ctor.getDeclaringClass()) ?, +		if (KotlinDetector.isKotlinReflectPresent() && KotlinDetector.isKotlinType(clazz)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, +					(KotlinDetector.isKotlinReflectPresent() &&, +							KotlinDetector.isKotlinType(this.field.getDeclaringClass()) &&, +++ b/spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java, + * <p>If a Kotlin reflection implementation is present,, + * {@link KotlinReflectionParameterNameDiscoverer} is added first in the list and used, + * for Kotlin classes and interfaces. When compiling or running as a Graal native image,, + * no {@link ParameterNameDiscoverer} is used., +			if (KotlinDetector.isKotlinReflectPresent()) {, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +			return instantiateClass(clazz.getDeclaredConstructor());, +			if (KotlinDetector.isKotlinReflectPresent() && KotlinDetector.isKotlinType(clazz)) {, +				Constructor<T> ctor = findPrimaryConstructor(clazz);, +				if (ctor != null) {, +					return instantiateClass(ctor);, +				}, +			}, +			return (KotlinDetector.isKotlinReflectPresent() && KotlinDetector.isKotlinType(ctor.getDeclaringClass()) ?, +		if (KotlinDetector.isKotlinReflectPresent() && KotlinDetector.isKotlinType(clazz)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, +					(KotlinDetector.isKotlinReflectPresent() &&, +							KotlinDetector.isKotlinType(this.field.getDeclaringClass()) &&, +++ b/spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java, + * <p>If a Kotlin reflection implementation is present,, + * {@link KotlinReflectionParameterNameDiscoverer} is added first in the list and used, + * for Kotlin classes and interfaces. When compiling or running as a Graal native image,, + * no {@link ParameterNameDiscoverer} is used., +			if (KotlinDetector.isKotlinReflectPresent()) {, +++ b/spring-core/src/main/java/org/springframework/core/KotlinDetector.java, + * Copyright 2002-2018 the original author or authors., +import org.apache.commons.logging.Log;, +import org.apache.commons.logging.LogFactory;, +, +	private static final Log logger = LogFactory.getLog(KotlinDetector.class);, +, +	private static final boolean kotlinReflectPresent;, +, +		ClassLoader classLoader = KotlinDetector.class.getClassLoader();, +			metadata = ClassUtils.forName("kotlin.Metadata", classLoader);, +		kotlinReflectPresent = ClassUtils.isPresent("kotlin.reflect.full.KClasses", classLoader);, +		if (kotlinMetadata != null && !kotlinReflectPresent) {, +			logger.info("Kotlin reflection implementation not found at runtime, related features won't be available.");, +		}, +	 * Determine whether Kotlin reflection is present., +	 * @since 5.1, +	 */, +	public static boolean isKotlinReflectPresent() {, +		return kotlinReflectPresent;, +	}, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java, +			return instantiateClass(clazz.getDeclaredConstructor());, +			if (KotlinDetector.isKotlinReflectPresent() && KotlinDetector.isKotlinType(clazz)) {, +				Constructor<T> ctor = findPrimaryConstructor(clazz);, +				if (ctor != null) {, +					return instantiateClass(ctor);, +				}, +			}, +			return (KotlinDetector.isKotlinReflectPresent() && KotlinDetector.isKotlinType(ctor.getDeclaringClass()) ?, +		if (KotlinDetector.isKotlinReflectPresent() && KotlinDetector.isKotlinType(clazz)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/DependencyDescriptor.java, +					(KotlinDetector.isKotlinReflectPresent() &&, +							KotlinDetector.isKotlinType(this.field.getDeclaringClass()) &&, +++ b/spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java, + * <p>If a Kotlin reflection implementation is present,, + * {@link KotlinReflectionParameterNameDiscoverer} is added first in the list and used]