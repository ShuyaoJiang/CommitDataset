[+++ b/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java, +		HttpServletResponse responseToUse = response;, +			responseToUse = new ShallowEtagResponseWrapper(response);, +		filterChain.doFilter(request, responseToUse);, +			updateResponse(request, responseToUse);, +		HttpServletResponse rawResponse = (HttpServletResponse) responseWrapper.getResponse();, +		byte[] body = responseWrapper.toByteArray();, +		if (rawResponse.isCommitted()) {, +			if (body.length > 0) {, +				StreamUtils.copy(body, rawResponse.getOutputStream());, +			}, +		}, +		else if (isEligibleForEtag(request, responseWrapper, statusCode, body)) {, +			rawResponse.setHeader(HEADER_ETAG, responseETag);, +				rawResponse.setStatus(HttpServletResponse.SC_NOT_MODIFIED);, +				if (body.length > 0) {, +					rawResponse.setContentLength(body.length);, +					StreamUtils.copy(body, rawResponse.getOutputStream());, +				}, +				rawResponse.setContentLength(body.length);, +				StreamUtils.copy(body, rawResponse.getOutputStream());, +			}, +			copyBodyToResponse();, +			copyBodyToResponse();, +		public void sendRedirect(String location) throws IOException {, +			copyBodyToResponse();, +			super.sendRedirect(location);, +		public void setContentLength(int len) {, +			if (len > this.content.capacity()) {, +				this.content.resize(len);, +			}, +		}, +, +		@Override, +		public void setBufferSize(int size) {, +			if (size > this.content.capacity()) {, +				this.content.resize(size);, +			}, +		@Override, +		public void reset() {, +			super.reset();, +			this.content.reset();, +		}, +, +		private void copyBodyToResponse() throws IOException {, +			if (this.content.size() > 0) {, +				getResponse().setContentLength(this.content.size());, +				StreamUtils.copy(this.content.toByteArray(), getResponse().getOutputStream());, +				this.content.reset();, +			}, +		}, +, +++ b/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java, +		HttpServletResponse responseToUse = response;, +			responseToUse = new ShallowEtagResponseWrapper(response);, +		filterChain.doFilter(request, responseToUse);, +			updateResponse(request, responseToUse);, +		HttpServletResponse rawResponse = (HttpServletResponse) responseWrapper.getResponse();, +		byte[] body = responseWrapper.toByteArray();, +		if (rawResponse.isCommitted()) {, +			if (body.length > 0) {, +				StreamUtils.copy(body, rawResponse.getOutputStream());, +			}, +		}, +		else if (isEligibleForEtag(request, responseWrapper, statusCode, body)) {, +			rawResponse.setHeader(HEADER_ETAG, responseETag);, +				rawResponse.setStatus(HttpServletResponse.SC_NOT_MODIFIED);, +				if (body.length > 0) {, +					rawResponse.setContentLength(body.length);, +					StreamUtils.copy(body, rawResponse.getOutputStream());, +				}, +				rawResponse.setContentLength(body.length);, +				StreamUtils.copy(body, rawResponse.getOutputStream());, +			}, +			copyBodyToResponse();, +			copyBodyToResponse();, +		public void sendRedirect(String location) throws IOException {, +			copyBodyToResponse();, +			super.sendRedirect(location);, +		public void setContentLength(int len) {, +			if (len > this.content.capacity()) {, +				this.content.resize(len);, +			}, +		}, +, +		@Override, +		public void setBufferSize(int size) {, +			if (size > this.content.capacity()) {, +				this.content.resize(size);, +			}, +		@Override, +		public void reset() {, +			super.reset();, +			this.content.reset();, +		}, +, +		private void copyBodyToResponse() throws IOException {, +			if (this.content.size() > 0) {, +				getResponse().setContentLength(this.content.size());, +				StreamUtils.copy(this.content.toByteArray(), getResponse().getOutputStream());]