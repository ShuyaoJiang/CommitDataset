[+++ b/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/FlushingDataBuffer.java, + * Empty {@link DataBuffer} that indicates to the file or the socket writing it that, + * previously buffered data should be flushed., + * @see FlushingDataBuffer#INSTANCE, +	/** Singleton instance of this class */, +	public static final FlushingDataBuffer INSTANCE = new FlushingDataBuffer();, +, +, +	private FlushingDataBuffer() {, +++ b/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/FlushingDataBuffer.java, + * Empty {@link DataBuffer} that indicates to the file or the socket writing it that, + * previously buffered data should be flushed., + * @see FlushingDataBuffer#INSTANCE, +	/** Singleton instance of this class */, +	public static final FlushingDataBuffer INSTANCE = new FlushingDataBuffer();, +, +, +	private FlushingDataBuffer() {, +++ b/spring-web-reactive/src/main/java/org/springframework/http/codec/SseEventEncoder.java, +					encodeString("\n", bufferFactory),, +					Mono.just(FlushingDataBuffer.INSTANCE), +++ b/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/FlushingDataBuffer.java, + * Empty {@link DataBuffer} that indicates to the file or the socket writing it that, + * previously buffered data should be flushed., + * @see FlushingDataBuffer#INSTANCE, +	/** Singleton instance of this class */, +	public static final FlushingDataBuffer INSTANCE = new FlushingDataBuffer();, +, +, +	private FlushingDataBuffer() {, +++ b/spring-web-reactive/src/main/java/org/springframework/http/codec/SseEventEncoder.java, +					encodeString("\n", bufferFactory),, +					Mono.just(FlushingDataBuffer.INSTANCE), +++ b/spring-web-reactive/src/test/java/org/springframework/core/codec/support/SseEventEncoderTests.java, +import static org.junit.Assert.*;, +import org.springframework.core.io.buffer.FlushingDataBuffer;, +						stringConsumer("\n"),, +						b -> assertEquals(FlushingDataBuffer.class, b.getClass()), +						b -> assertEquals(FlushingDataBuffer.class, b.getClass()),, +						stringConsumer("\n"),, +						b -> assertEquals(FlushingDataBuffer.class, b.getClass()), +						b -> assertEquals(FlushingDataBuffer.class, b.getClass()),, +						stringConsumer("\n"),, +						b -> assertEquals(FlushingDataBuffer.class, b.getClass()), +						b -> assertEquals(FlushingDataBuffer.class, b.getClass()),, +						stringConsumer("\n"),, +						b -> assertEquals(FlushingDataBuffer.class, b.getClass()), +++ b/spring-web-reactive/src/main/java/org/springframework/core/io/buffer/FlushingDataBuffer.java, + * Empty {@link DataBuffer} that indicates to the file or the socket writing it that, + * previously buffered data should be flushed., + * @see FlushingDataBuffer#INSTANCE, +	/** Singleton instance of this class */, +	public static final FlushingDataBuffer INSTANCE = new FlushingDataBuffer();, +, +, +	private FlushingDataBuffer() {, +++ b/spring-web-reactive/src/main/java/org/springframework/http/codec/SseEventEncoder.java, +					encodeString("\n", bufferFactory),, +					Mono.just(FlushingDataBuffer.INSTANCE), +++ b/spring-web-reactive/src/test/java/org/springframework/core/codec/support/SseEventEncoderTests.java, +import static org.junit.Assert.*;, +import org.springframework.core.io.buffer.FlushingDataBuffer;, +						stringConsumer("\n"),, +						b -> assertEquals(FlushingDataBuffer.class, b.getClass()), +						b -> assertEquals(FlushingDataBuffer.class, b.getClass()),, +						stringConsumer("\n"),, +						b -> assertEquals(FlushingDataBuffer.class, b.getClass()), +						b -> assertEquals(FlushingDataBuffer.class, b.getClass()),, +						stringConsumer("\n"),, +						b -> assertEquals(FlushingDataBuffer.class, b.getClass()), +						b -> assertEquals(FlushingDataBuffer.class, b.getClass()),, +						stringConsumer("\n"),, +						b -> assertEquals(FlushingDataBuffer.class, b.getClass()), +++ b/spring-web-reactive/src/test/java/org/springframework/http/server/reactive/FlushingIntegrationTests.java, +						return buffer;, +					}), +					.take(2), +					.concatWith(Mono.just(FlushingDataBuffer.INSTANCE)), +					.concatWith(Flux.never());]