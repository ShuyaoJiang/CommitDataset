[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java, +		for (Class<?> clazz : classesToLookFor) {, +			AspectJAnnotation<?> foundAnnotation = findAnnotation(method, (Class<Annotation>) clazz);, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java, +		for (Class<?> clazz : classesToLookFor) {, +			AspectJAnnotation<?> foundAnnotation = findAnnotation(method, (Class<Annotation>) clazz);, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/AnnotationCacheOperationSource.java, +					ops = annOps;, +				else {, +					Collection<CacheOperation> combined = new ArrayList<>(ops.size() + annOps.size());, +					combined.addAll(ops);, +					combined.addAll(annOps);, +					ops = combined;, +				}, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java, +		for (Class<?> clazz : classesToLookFor) {, +			AspectJAnnotation<?> foundAnnotation = findAnnotation(method, (Class<Annotation>) clazz);, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/AnnotationCacheOperationSource.java, +					ops = annOps;, +				else {, +					Collection<CacheOperation> combined = new ArrayList<>(ops.size() + annOps.size());, +					combined.addAll(ops);, +					combined.addAll(annOps);, +					ops = combined;, +				}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, +		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<>(8);, +, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java, +		for (Class<?> clazz : classesToLookFor) {, +			AspectJAnnotation<?> foundAnnotation = findAnnotation(method, (Class<Annotation>) clazz);, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/AnnotationCacheOperationSource.java, +					ops = annOps;, +				else {, +					Collection<CacheOperation> combined = new ArrayList<>(ops.size() + annOps.size());, +					combined.addAll(ops);, +					combined.addAll(annOps);, +					ops = combined;, +				}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, +		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<>(8);, +, +++ b/spring-context/src/main/java/org/springframework/context/event/DefaultEventListenerFactory.java, + *, +, +	public void setOrder(int order) {, +		this.order = order;, +	}, +, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java, +		for (Class<?> clazz : classesToLookFor) {, +			AspectJAnnotation<?> foundAnnotation = findAnnotation(method, (Class<Annotation>) clazz);, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/AnnotationCacheOperationSource.java, +					ops = annOps;, +				else {, +					Collection<CacheOperation> combined = new ArrayList<>(ops.size() + annOps.size());, +					combined.addAll(ops);, +					combined.addAll(annOps);, +					ops = combined;, +				}, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotationConfigUtils.java, +		Set<BeanDefinitionHolder> beanDefs = new LinkedHashSet<>(8);, +, +++ b/spring-context/src/main/java/org/springframework/context/event/DefaultEventListenerFactory.java, + *, +, +	public void setOrder(int order) {, +		this.order = order;, +	}, +, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/HandlerMethodAnnotationDetectionTests.java, +			{ SimpleController.class, true }, // CGLIB proxy, +			{ AbstractClassController.class, true }, // CGLIB proxy, +			{ ParameterizedAbstractClassController.class, true }, // CGLIB proxy, +			{ ParameterizedSubclassOverridesDefaultMappings.class, true }, // CGLIB proxy, +			// { ParameterizedSubclassDoesNotOverrideConcreteImplementationsFromGenericAbstractSuperclass.class, true }, // CGLIB proxy, +			{ SupportClassController.class, true }, // CGLIB proxy, +, +	public HandlerMethodAnnotationDetectionTests(Class<?> controllerType, boolean useAutoProxy) {, +, +	// SPR-9374, +	interface MappingInterface {, +, +	 * <p>JDK Dynamic proxy: All annotations must be on the interface., +	 * <p>Without AOP: Annotations can be on interface methods except parameter annotations., +, +, +, +, +, +, +	interface MappingGenericInterface<A, B, C> {, +, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java, +		for (Class<?> clazz : classesToLookFor) {, +			AspectJAnnotation<?> foundAnnotation = findAnnotation(method, (Class<Annotation>) clazz);, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/AnnotationCacheOperationSource.java, +					ops = annOps;, +				else {, +					Collection<CacheOperation> combined = new ArrayList<>(ops.size() + annOps.size());]