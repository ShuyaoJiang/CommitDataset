[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/InstantiationAwareBeanPostProcessorAdapter.java, + * Copyright 2002-2009 the original author or authors., +	public Class<?> predictBeanType(Class<?> beanClass, String beanName) {, +	public Constructor<?>[] determineCandidateConstructors(Class beanClass, String beanName) throws BeansException {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/InstantiationAwareBeanPostProcessorAdapter.java, + * Copyright 2002-2009 the original author or authors., +	public Class<?> predictBeanType(Class<?> beanClass, String beanName) {, +	public Constructor<?>[] determineCandidateConstructors(Class beanClass, String beanName) throws BeansException {, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/jdo/JdoOperations.java, +	<T> Collection<T> find(Class<T> entityClass, String filter, String parameters, Object... values), +	<T> Collection<T> find(, +			Class<T> entityClass, String filter, String parameters, Object[] values, String ordering), +	<T> Collection<T> find(Class<T> entityClass, String filter, String parameters, Map<String, ?> values), +	<T> Collection<T> find(, +			Class<T> entityClass, String filter, String parameters, Map<String, ?> values, String ordering), +	Collection find(String queryString, Object... values) throws DataAccessException;, +	Collection find(String queryString, Map<String, ?> values) throws DataAccessException;, +	<T> Collection<T> findByNamedQuery(Class<T> entityClass, String queryName, Object... values), +	<T> Collection<T> findByNamedQuery(Class<T> entityClass, String queryName, Map<String, ?> values), +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/config/InstantiationAwareBeanPostProcessorAdapter.java, + * Copyright 2002-2009 the original author or authors., +	public Class<?> predictBeanType(Class<?> beanClass, String beanName) {, +	public Constructor<?>[] determineCandidateConstructors(Class beanClass, String beanName) throws BeansException {, +++ b/org.springframework.orm/src/main/java/org/springframework/orm/jdo/JdoOperations.java, +	<T> Collection<T> find(Class<T> entityClass, String filter, String parameters, Object... values), +	<T> Collection<T> find(, +			Class<T> entityClass, String filter, String parameters, Object[] values, String ordering), +	<T> Collection<T> find(Class<T> entityClass, String filter, String parameters, Map<String, ?> values), +	<T> Collection<T> find(, +			Class<T> entityClass, String filter, String parameters, Map<String, ?> values, String ordering), +	Collection find(String queryString, Object... values) throws DataAccessException;, +	Collection find(String queryString, Map<String, ?> values) throws DataAccessException;, +	<T> Collection<T> findByNamedQuery(Class<T> entityClass, String queryName, Object... values), +	<T> Collection<T> findByNamedQuery(Class<T> entityClass, String queryName, Map<String, ?> values), +++ b/org.springframework.orm/src/main/java/org/springframework/orm/jdo/JdoTemplate.java, +	public <T> Collection<T> find(, +			Class<T> entityClass, String filter, String parameters, Map<String, ?> values), +			final Class<T> entityClass, final String filter, final String parameters,, +			final Map<String, ?> values, final String ordering) throws DataAccessException {, +	public Collection find(final String queryString, final Object... values) throws DataAccessException {, +	public Collection find(final String queryString, final Map<String, ?> values) throws DataAccessException {, +	public <T> Collection<T> findByNamedQuery(final Class<T> entityClass, final String queryName, final Object... values), +	public <T> Collection<T> findByNamedQuery(, +			final Class<T> entityClass, final String queryName, final Map<String, ?> values)]