[+++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AbstractMethodArgumentResolutionException.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.messaging.handler.invocation.MethodArgumentResolutionException;, + * @deprecated as of 4.3.6, in favor of the invocation-associated, + * {@link MethodArgumentResolutionException}, +@Deprecated, +public abstract class AbstractMethodArgumentResolutionException extends MethodArgumentResolutionException {, +		super(message, parameter);, +	protected AbstractMethodArgumentResolutionException(Message<?> message, MethodParameter parameter, String description) {, +		super(message, parameter, description);, +		return "";, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AbstractMethodArgumentResolutionException.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.messaging.handler.invocation.MethodArgumentResolutionException;, + * @deprecated as of 4.3.6, in favor of the invocation-associated, + * {@link MethodArgumentResolutionException}, +@Deprecated, +public abstract class AbstractMethodArgumentResolutionException extends MethodArgumentResolutionException {, +		super(message, parameter);, +	protected AbstractMethodArgumentResolutionException(Message<?> message, MethodParameter parameter, String description) {, +		super(message, parameter, description);, +		return "";, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/MethodArgumentNotValidException.java, + * Copyright 2002-2017 the original author or authors., +@SuppressWarnings({"serial", "deprecation"}), +	private BindingResult bindingResult;, +		super(message, parameter);, +	public MethodArgumentNotValidException(Message<?> message, MethodParameter parameter, BindingResult bindingResult) {, +		super(message, parameter, getValidationErrorMessage(bindingResult));, +		sb.append(bindingResult.getErrorCount()).append(" error(s): ");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AbstractMethodArgumentResolutionException.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.messaging.handler.invocation.MethodArgumentResolutionException;, + * @deprecated as of 4.3.6, in favor of the invocation-associated, + * {@link MethodArgumentResolutionException}, +@Deprecated, +public abstract class AbstractMethodArgumentResolutionException extends MethodArgumentResolutionException {, +		super(message, parameter);, +	protected AbstractMethodArgumentResolutionException(Message<?> message, MethodParameter parameter, String description) {, +		super(message, parameter, description);, +		return "";, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/MethodArgumentNotValidException.java, + * Copyright 2002-2017 the original author or authors., +@SuppressWarnings({"serial", "deprecation"}), +	private BindingResult bindingResult;, +		super(message, parameter);, +	public MethodArgumentNotValidException(Message<?> message, MethodParameter parameter, BindingResult bindingResult) {, +		super(message, parameter, getValidationErrorMessage(bindingResult));, +		sb.append(bindingResult.getErrorCount()).append(" error(s): ");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/MethodArgumentTypeMismatchException.java, + * Copyright 2002-2017 the original author or authors., + * Exception that indicates that a method argument has not the expected type., +@SuppressWarnings({"serial", "deprecation"}), +	public MethodArgumentTypeMismatchException(Message<?> message, MethodParameter parameter, String description) {, +		super(message, parameter, description);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/AbstractMethodArgumentResolutionException.java, + * Copyright 2002-2017 the original author or authors., +import org.springframework.messaging.handler.invocation.MethodArgumentResolutionException;, + * @deprecated as of 4.3.6, in favor of the invocation-associated, + * {@link MethodArgumentResolutionException}, +@Deprecated, +public abstract class AbstractMethodArgumentResolutionException extends MethodArgumentResolutionException {, +		super(message, parameter);, +	protected AbstractMethodArgumentResolutionException(Message<?> message, MethodParameter parameter, String description) {, +		super(message, parameter, description);, +		return "";, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/MethodArgumentNotValidException.java, + * Copyright 2002-2017 the original author or authors., +@SuppressWarnings({"serial", "deprecation"}), +	private BindingResult bindingResult;, +		super(message, parameter);, +	public MethodArgumentNotValidException(Message<?> message, MethodParameter parameter, BindingResult bindingResult) {, +		super(message, parameter, getValidationErrorMessage(bindingResult));, +		sb.append(bindingResult.getErrorCount()).append(" error(s): ");, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/MethodArgumentTypeMismatchException.java, + * Copyright 2002-2017 the original author or authors., + * Exception that indicates that a method argument has not the expected type., +@SuppressWarnings({"serial", "deprecation"}), +	public MethodArgumentTypeMismatchException(Message<?> message, MethodParameter parameter, String description) {, +		super(message, parameter, description);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/InvocableHandlerMethod.java, + * Copyright 2002-2017 the original author or authors., +						logger.debug(getArgumentResolutionErrorMessage("Failed to resolve", i), ex);, +				throw new MethodArgumentResolutionException(message, parameter,, +						getArgumentResolutionErrorMessage("No suitable resolver for", i));, +	private String getArgumentResolutionErrorMessage(String text, int index) {, +		Class<?> paramType = getMethodParameters()[index].getParameterType();, +		return text + " argument " + index + " of type '" + paramType.getName() + "'";, +			String text = (ex.getMessage() != null ? ex.getMessage() : "Illegal argument");, +			throw new IllegalStateException(getInvocationErrorMessage(text, args), ex);, +				String text = getInvocationErrorMessage("Failed to invoke handler method", args);, +				throw new IllegalStateException(text, targetException);, +	 * method is declared. In some cases the actual endpoint instance at request-, +	 * beans, and others). Endpoint classes that require proxying should prefer, +			String text = "The mapped handler method class '" + methodDeclaringClass.getName() +, +					"' is not an instance of the actual endpoint bean class '" +, +					targetBeanClass.getName() + "'. If the endpoint requires proxying " +, +			throw new IllegalStateException(getInvocationErrorMessage(text, args));, +	private String getInvocationErrorMessage(String text, Object[] resolvedArgs) {, +		StringBuilder sb = new StringBuilder(getDetailedErrorMessage(text));]