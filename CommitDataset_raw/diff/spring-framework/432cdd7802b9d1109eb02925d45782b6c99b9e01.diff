[+++ b/spring-web/src/main/java/org/springframework/http/ResponseEntity.java, +import java.util.Optional;, +	 * A shortcut for creating a {@code ResponseEntity} with the given body, +	 * and the {@linkplain HttpStatus#OK OK} status, or an empty body and a, +	 * {@linkplain HttpStatus#NOT_FOUND NOT FOUND} status in case of a, +	 * {@linkplain Optional#empty()} parameter., +	 * @return the created {@code ResponseEntity}, +	 * @since 5.1, +	 */, +	public static <T> ResponseEntity<T> of(Optional<T> body) {, +		return body.map(ResponseEntity::ok).orElse(notFound().build());, +	}, +, +	/**, +++ b/spring-web/src/main/java/org/springframework/http/ResponseEntity.java, +import java.util.Optional;, +	 * A shortcut for creating a {@code ResponseEntity} with the given body, +	 * and the {@linkplain HttpStatus#OK OK} status, or an empty body and a, +	 * {@linkplain HttpStatus#NOT_FOUND NOT FOUND} status in case of a, +	 * {@linkplain Optional#empty()} parameter., +	 * @return the created {@code ResponseEntity}, +	 * @since 5.1, +	 */, +	public static <T> ResponseEntity<T> of(Optional<T> body) {, +		return body.map(ResponseEntity::ok).orElse(notFound().build());, +	}, +, +	/**, +++ b/spring-web/src/test/java/org/springframework/http/ResponseEntityTests.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Optional;, +	public void ofOptional() {, +		Integer entity = 42;, +		ResponseEntity<Integer> responseEntity = ResponseEntity.of(Optional.of(entity));, +, +		assertNotNull(responseEntity);, +		assertEquals(HttpStatus.OK, responseEntity.getStatusCode());, +		assertEquals(entity, responseEntity.getBody());, +	}, +, +	@Test, +	public void ofEmptyOptional() {, +		ResponseEntity<Integer> responseEntity = ResponseEntity.of(Optional.empty());, +, +		assertNotNull(responseEntity);, +		assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());, +		assertNull(responseEntity.getBody());, +	}, +, +	@Test]