[+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/EmbeddedDatabaseBeanDefinitionParser.java, + * Copyright 2002-2010 the original author or authors., +import org.w3c.dom.Element;, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/EmbeddedDatabaseBeanDefinitionParser.java, + * Copyright 2002-2010 the original author or authors., +import org.w3c.dom.Element;, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/InitializeDatabaseBeanDefinitionParser.java, + * Copyright 2002-2010 the original author or authors., +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/EmbeddedDatabaseBeanDefinitionParser.java, + * Copyright 2002-2010 the original author or authors., +import org.w3c.dom.Element;, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/InitializeDatabaseBeanDefinitionParser.java, + * Copyright 2002-2010 the original author or authors., +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/SortedResourcesFactoryBean.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.beans.factory.config.AbstractFactoryBean;, +import org.springframework.context.ResourceLoaderAware;, + * {@link FactoryBean} implementation that takes a list of location strings and creates a sorted array , + * of {@link Resource} instances., + * @author Christian Dupuis, +public class SortedResourcesFactoryBean extends AbstractFactoryBean<Resource[]> implements ResourceLoaderAware {, +	private final List<String> locations;, +	private ResourceLoader resourceLoader;, +, +	public SortedResourcesFactoryBean(List<String> locations) {, +		this.locations = locations;, +		setSingleton(true);, +	}, +, +	@Override, +	public Class<? extends Resource[]> getObjectType() {, +		return Resource[].class;, +	}, +, +	public void setResourceLoader(ResourceLoader resourceLoader) {, +		this.resourceLoader = resourceLoader;, +	}, +, +	@Override, +	protected Resource[] createInstance() throws Exception {, +				List<Resource> resources = new ArrayList<Resource>(Arrays, +						.asList(((ResourcePatternResolver) resourceLoader).getResources(location)));, +					public int compare(Resource r1, Resource r2) {, +							return r1.getURL().toString().compareTo(r2.getURL().toString());, +		return scripts.toArray(new Resource[scripts.size()]);, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/EmbeddedDatabaseBeanDefinitionParser.java, + * Copyright 2002-2010 the original author or authors., +import org.w3c.dom.Element;, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/InitializeDatabaseBeanDefinitionParser.java, + * Copyright 2002-2010 the original author or authors., +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/config/SortedResourcesFactoryBean.java, + * Copyright 2002-2010 the original author or authors., +import org.springframework.beans.factory.config.AbstractFactoryBean;, +import org.springframework.context.ResourceLoaderAware;, + * {@link FactoryBean} implementation that takes a list of location strings and creates a sorted array , + * of {@link Resource} instances., + * @author Christian Dupuis, +public class SortedResourcesFactoryBean extends AbstractFactoryBean<Resource[]> implements ResourceLoaderAware {, +	private final List<String> locations;, +	private ResourceLoader resourceLoader;, +, +	public SortedResourcesFactoryBean(List<String> locations) {, +		this.locations = locations;, +		setSingleton(true);, +	}, +, +	@Override, +	public Class<? extends Resource[]> getObjectType() {, +		return Resource[].class;, +	}, +, +	public void setResourceLoader(ResourceLoader resourceLoader) {, +		this.resourceLoader = resourceLoader;, +	}, +, +	@Override, +	protected Resource[] createInstance() throws Exception {, +				List<Resource> resources = new ArrayList<Resource>(Arrays, +						.asList(((ResourcePatternResolver) resourceLoader).getResources(location)));, +					public int compare(Resource r1, Resource r2) {, +							return r1.getURL().toString().compareTo(r2.getURL().toString());, +		return scripts.toArray(new Resource[scripts.size()]);, +++ b/org.springframework.jdbc/template.mf, + org.springframework.context.*;version=${spring.osgi.range},]