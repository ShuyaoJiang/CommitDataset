[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +import kotlin.jvm.JvmClassMappingKt;, +import kotlin.reflect.KFunction;, +import kotlin.reflect.full.KClasses;, +import kotlin.reflect.jvm.ReflectJvmMapping;, + * @author Sebastien Deleuze, +	@Nullable, +	private static final Class<?> kotlinMetadata;, +, +	static {, +		Class<?> metadata;, +		try {, +			metadata = ClassUtils.forName("kotlin.Metadata", AutowiredAnnotationBeanPostProcessor.class.getClassLoader());, +		}, +		catch (ClassNotFoundException ex) {, +			// Kotlin API not available - no Kotlin support, +			metadata = null;, +		}, +		kotlinMetadata = metadata;, +	}, +	, +, +					Constructor<?> kotlinPrimaryConstructor = null;, +					if (useKotlinSupport(beanClass)) {, +						kotlinPrimaryConstructor = KotlinDelegate.findPrimaryConstructor(beanClass);, +					}, +						if (kotlinPrimaryConstructor != null && candidate.isSynthetic()) {, +							continue;, +						}, +					else if (kotlinPrimaryConstructor != null) {, +						candidateConstructors = new Constructor<?>[] {kotlinPrimaryConstructor};, +					}, +	/**, +	 * Return true if Kotlin is present and if the specified class is a Kotlin one., +	 */, +	@SuppressWarnings("unchecked"), +	private static boolean useKotlinSupport(Class<?> clazz) {, +		return (kotlinMetadata != null &&, +				clazz.getDeclaredAnnotation((Class<? extends Annotation>) kotlinMetadata) != null);, +	}, +, +	/**, +	 * Inner class to avoid a hard dependency on Kotlin at runtime., +	 */, +	private static class KotlinDelegate {, +, +		/**, +		 * Return the Java constructor corresponding to the Kotlin primary constructor if any., +		 * @param clazz the {@link Class} of the Kotlin class, +		 * @see <a href="http://kotlinlang.org/docs/reference/classes.html#constructors">http://kotlinlang.org/docs/reference/classes.html#constructors</a>, +		 */, +		@Nullable, +		public static <T> Constructor<T> findPrimaryConstructor(Class<T> clazz) {, +			KFunction<T> primaryConstructor = KClasses.getPrimaryConstructor(JvmClassMappingKt.getKotlinClass(clazz));, +			if (primaryConstructor == null) {, +				return null;, +			}, +			Constructor<T> constructor = ReflectJvmMapping.getJavaConstructor(primaryConstructor);, +			Assert.notNull(constructor, "Can't get the Java constructor corresponding to the Kotlin primary constructor of " + clazz.getName());, +			return constructor;, +		}, +, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +import kotlin.jvm.JvmClassMappingKt;, +import kotlin.reflect.KFunction;, +import kotlin.reflect.full.KClasses;, +import kotlin.reflect.jvm.ReflectJvmMapping;, + * @author Sebastien Deleuze, +	@Nullable, +	private static final Class<?> kotlinMetadata;, +, +	static {, +		Class<?> metadata;, +		try {, +			metadata = ClassUtils.forName("kotlin.Metadata", AutowiredAnnotationBeanPostProcessor.class.getClassLoader());, +		}, +		catch (ClassNotFoundException ex) {, +			// Kotlin API not available - no Kotlin support, +			metadata = null;, +		}, +		kotlinMetadata = metadata;, +	}, +	, +, +					Constructor<?> kotlinPrimaryConstructor = null;, +					if (useKotlinSupport(beanClass)) {, +						kotlinPrimaryConstructor = KotlinDelegate.findPrimaryConstructor(beanClass);, +					}, +						if (kotlinPrimaryConstructor != null && candidate.isSynthetic()) {, +							continue;, +						}, +					else if (kotlinPrimaryConstructor != null) {, +						candidateConstructors = new Constructor<?>[] {kotlinPrimaryConstructor};, +					}, +	/**, +	 * Return true if Kotlin is present and if the specified class is a Kotlin one., +	 */, +	@SuppressWarnings("unchecked")]