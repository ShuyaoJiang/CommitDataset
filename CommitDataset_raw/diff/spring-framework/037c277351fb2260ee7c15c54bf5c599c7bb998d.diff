[+++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import org.springframework.web.multipart.MultipartRequest;, +		protected Object resolveStandardArgument(Class<?> parameterType, NativeWebRequest webRequest), +			if (PortletRequest.class.isAssignableFrom(parameterType) ||, +					MultipartRequest.class.isAssignableFrom(parameterType)) {, +				Object nativeRequest = webRequest.getNativeRequest(parameterType);, +				if (nativeRequest == null) {, +					throw new IllegalStateException(, +							"Current request is not of type [" + parameterType.getName() + "]: " + request);, +				}, +				return nativeRequest;, +				Object nativeResponse = webRequest.getNativeResponse(parameterType);, +				if (nativeResponse == null) {, +					throw new IllegalStateException(, +							"Current response is not of type [" + parameterType.getName() + "]: " + response);, +				}, +				return nativeResponse;, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import org.springframework.web.multipart.MultipartRequest;, +		protected Object resolveStandardArgument(Class<?> parameterType, NativeWebRequest webRequest), +			if (PortletRequest.class.isAssignableFrom(parameterType) ||, +					MultipartRequest.class.isAssignableFrom(parameterType)) {, +				Object nativeRequest = webRequest.getNativeRequest(parameterType);, +				if (nativeRequest == null) {, +					throw new IllegalStateException(, +							"Current request is not of type [" + parameterType.getName() + "]: " + request);, +				}, +				return nativeRequest;, +				Object nativeResponse = webRequest.getNativeResponse(parameterType);, +				if (nativeResponse == null) {, +					throw new IllegalStateException(, +							"Current response is not of type [" + parameterType.getName() + "]: " + response);, +				}, +				return nativeResponse;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import org.springframework.web.multipart.MultipartRequest;, +		protected Object resolveStandardArgument(Class<?> parameterType, NativeWebRequest webRequest) throws Exception {, +			if (ServletRequest.class.isAssignableFrom(parameterType) ||, +					MultipartRequest.class.isAssignableFrom(parameterType)) {, +				Object nativeRequest = webRequest.getNativeRequest(parameterType);, +				if (nativeRequest == null) {, +					throw new IllegalStateException(, +							"Current request is not of type [" + parameterType.getName() + "]: " + request);, +				}, +				return nativeRequest;, +				Object nativeResponse = webRequest.getNativeResponse(parameterType);, +				if (nativeResponse == null) {, +					throw new IllegalStateException(, +							"Current response is not of type [" + parameterType.getName() + "]: " + response);, +				}, +				return nativeResponse;, +++ b/org.springframework.web.portlet/src/main/java/org/springframework/web/portlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import org.springframework.web.multipart.MultipartRequest;, +		protected Object resolveStandardArgument(Class<?> parameterType, NativeWebRequest webRequest), +			if (PortletRequest.class.isAssignableFrom(parameterType) ||, +					MultipartRequest.class.isAssignableFrom(parameterType)) {, +				Object nativeRequest = webRequest.getNativeRequest(parameterType);, +				if (nativeRequest == null) {, +					throw new IllegalStateException(, +							"Current request is not of type [" + parameterType.getName() + "]: " + request);, +				}, +				return nativeRequest;, +				Object nativeResponse = webRequest.getNativeResponse(parameterType);, +				if (nativeResponse == null) {, +					throw new IllegalStateException(, +							"Current response is not of type [" + parameterType.getName() + "]: " + response);, +				}, +				return nativeResponse;, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/annotation/AnnotationMethodHandlerAdapter.java, +import org.springframework.web.multipart.MultipartRequest;, +		protected Object resolveStandardArgument(Class<?> parameterType, NativeWebRequest webRequest) throws Exception {, +			if (ServletRequest.class.isAssignableFrom(parameterType) ||, +					MultipartRequest.class.isAssignableFrom(parameterType)) {, +				Object nativeRequest = webRequest.getNativeRequest(parameterType);, +				if (nativeRequest == null) {, +					throw new IllegalStateException(, +							"Current request is not of type [" + parameterType.getName() + "]: " + request);, +				}, +				return nativeRequest;, +				Object nativeResponse = webRequest.getNativeResponse(parameterType);, +				if (nativeResponse == null) {, +					throw new IllegalStateException(, +							"Current response is not of type [" + parameterType.getName() + "]: " + response);, +				}, +				return nativeResponse;, +++ b/org.springframework.web/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodInvoker.java, +	protected Object resolveStandardArgument(Class<?> parameterType, NativeWebRequest webRequest) throws Exception {]