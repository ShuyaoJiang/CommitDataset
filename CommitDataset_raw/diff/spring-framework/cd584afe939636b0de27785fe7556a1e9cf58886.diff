[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, + * Copyright 2002-2011 the original author or authors., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, + * Copyright 2002-2011 the original author or authors., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ConvertingPropertyEditorAdapter.java, + * Copyright 2002-2011 the original author or authors., +		setValue(this.conversionService.convert(text, TypeDescriptor.valueOf(String.class), this.targetDescriptor));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, + * Copyright 2002-2011 the original author or authors., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ConvertingPropertyEditorAdapter.java, + * Copyright 2002-2011 the original author or authors., +		setValue(this.conversionService.convert(text, TypeDescriptor.valueOf(String.class), this.targetDescriptor));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, + * Copyright 2002-2011 the original author or authors., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, + * Copyright 2002-2011 the original author or authors., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ConvertingPropertyEditorAdapter.java, + * Copyright 2002-2011 the original author or authors., +		setValue(this.conversionService.convert(text, TypeDescriptor.valueOf(String.class), this.targetDescriptor));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, + * Copyright 2002-2011 the original author or authors., +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java, +import java.awt.*;, +import static org.junit.Assert.*;, +, +		List<Integer> result = (List<Integer>) conversionService.convert(new String[] { "1", "2", "3" }, TypeDescriptor, +				.valueOf(String[].class), new TypeDescriptor(getClass().getDeclaredField("genericList")));, +		List<Color> colors = (List<Color>) conversionService.convert(new String[] { "ffffff", "#000000" }, TypeDescriptor.valueOf(String[].class), new TypeDescriptor(new MethodParameter(getClass().getMethod("handlerMethod", List.class), 0)));, +		List result = (List) conversionService.convert("1,2,3", TypeDescriptor.valueOf(String.class),, +				new TypeDescriptor(getClass().getField("genericList")));, +		List<Integer> result = (List<Integer>) conversionService.convert(3L, TypeDescriptor.valueOf(Long.class),, +				new TypeDescriptor(getClass().getField("genericList")));, +		List<Integer> bar = (List<Integer>) conversionService.convert(foo, TypeDescriptor.forObject(foo),, +				new TypeDescriptor(getClass().getField("genericList")));, +		List<Integer> bar = (List<Integer>) conversionService.convert(null,, +				TypeDescriptor.valueOf(LinkedHashSet.class), new TypeDescriptor(getClass().getField("genericList")));, +		List bar = (List) conversionService.convert(foo, TypeDescriptor.valueOf(LinkedHashSet.class), TypeDescriptor, +				.valueOf(List.class));, +		List<Integer> bar = (List<Integer>) conversionService.convert(values,, +				TypeDescriptor.forObject(values), new TypeDescriptor(getClass().getField("genericList")));, +		Map<String, FooEnum> map = (Map<String, FooEnum>) conversionService.convert(foo,, +				TypeDescriptor.forObject(foo), new TypeDescriptor(getClass().getField("genericMap")));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, + * Copyright 2002-2011 the original author or authors., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ConvertingPropertyEditorAdapter.java, + * Copyright 2002-2011 the original author or authors., +		setValue(this.conversionService.convert(text, TypeDescriptor.valueOf(String.class), this.targetDescriptor));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, + * Copyright 2002-2011 the original author or authors., +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java, +import java.awt.*;, +import static org.junit.Assert.*;, +, +		List<Integer> result = (List<Integer>) conversionService.convert(new String[] { "1", "2", "3" }, TypeDescriptor, +				.valueOf(String[].class), new TypeDescriptor(getClass().getDeclaredField("genericList")));, +		List<Color> colors = (List<Color>) conversionService.convert(new String[] { "ffffff", "#000000" }, TypeDescriptor.valueOf(String[].class), new TypeDescriptor(new MethodParameter(getClass().getMethod("handlerMethod", List.class), 0)));, +		List result = (List) conversionService.convert("1,2,3", TypeDescriptor.valueOf(String.class),, +				new TypeDescriptor(getClass().getField("genericList")));, +		List<Integer> result = (List<Integer>) conversionService.convert(3L, TypeDescriptor.valueOf(Long.class),, +				new TypeDescriptor(getClass().getField("genericList")));, +		List<Integer> bar = (List<Integer>) conversionService.convert(foo, TypeDescriptor.forObject(foo),, +				new TypeDescriptor(getClass().getField("genericList")));, +		List<Integer> bar = (List<Integer>) conversionService.convert(null,, +				TypeDescriptor.valueOf(LinkedHashSet.class), new TypeDescriptor(getClass().getField("genericList")));, +		List bar = (List) conversionService.convert(foo, TypeDescriptor.valueOf(LinkedHashSet.class), TypeDescriptor, +				.valueOf(List.class));, +		List<Integer> bar = (List<Integer>) conversionService.convert(values,, +				TypeDescriptor.forObject(values), new TypeDescriptor(getClass().getField("genericList")));, +		Map<String, FooEnum> map = (Map<String, FooEnum>) conversionService.convert(foo,, +				TypeDescriptor.forObject(foo), new TypeDescriptor(getClass().getField("genericMap")));, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/GenericConversionServiceTests.java, +import static org.junit.Assert.*;, +, +		assertNull(conversionService.convert("3", TypeDescriptor.valueOf(String.class), TypeDescriptor.NULL));, +		assertNull(conversionService.convert("3", TypeDescriptor.valueOf(String.class), TypeDescriptor.NULL));, +		b = (Boolean) conversionService.convert("true", TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(boolean.class));, +		Object converted = conversionService.convert(input, TypeDescriptor.forObject(input), new TypeDescriptor(getClass().getField("wildcardMap")));, +			conversionService.convert(source, TypeDescriptor.forObject(source), td);, +			conversionService.convert(source, TypeDescriptor.forObject(source), td);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionService.java, + * Copyright 2002-2011 the original author or authors., +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/ConvertingPropertyEditorAdapter.java, + * Copyright 2002-2011 the original author or authors., +		setValue(this.conversionService.convert(text, TypeDescriptor.valueOf(String.class), this.targetDescriptor));, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, + * Copyright 2002-2011 the original author or authors., +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/DefaultConversionTests.java, +import java.awt.*;, +import static org.junit.Assert.*;, +, +		List<Integer> result = (List<Integer>) conversionService.convert(new String[] { "1", "2", "3" }, TypeDescriptor, +				.valueOf(String[].class), new TypeDescriptor(getClass().getDeclaredField("genericList")));, +		List<Color> colors = (List<Color>) conversionService.convert(new String[] { "ffffff", "#000000" }, TypeDescriptor.valueOf(String[].class), new TypeDescriptor(new MethodParameter(getClass().getMethod("handlerMethod", List.class), 0)));, +		List result = (List) conversionService.convert("1,2,3", TypeDescriptor.valueOf(String.class),, +				new TypeDescriptor(getClass().getField("genericList")));, +		List<Integer> result = (List<Integer>) conversionService.convert(3L, TypeDescriptor.valueOf(Long.class),, +				new TypeDescriptor(getClass().getField("genericList")));, +		List<Integer> bar = (List<Integer>) conversionService.convert(foo, TypeDescriptor.forObject(foo),, +				new TypeDescriptor(getClass().getField("genericList")));, +		List<Integer> bar = (List<Integer>) conversionService.convert(null,]