[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/ObjectProvider.java, + * Copyright 2002-2017 the original author or authors., +import java.util.function.Consumer;, +	 * Consume an instance (possibly shared or independent) of the object, +	 * managed by this factory, if available., +	 * @param dependencyConsumer a callback for processing the target object, +	 * if available (not called otherwise), +	 * @throws BeansException in case of creation errors, +	 * @since 5.0, +	 * @see #getIfAvailable(), +	 */, +	default void ifAvailable(Consumer<T> dependencyConsumer) throws BeansException {, +		T dependency = getIfAvailable();, +		if (dependency != null) {, +			dependencyConsumer.accept(dependency);, +		}, +	}, +, +	/**, +	/**, +	 * Consume an instance (possibly shared or independent) of the object, +	 * managed by this factory, if unique., +	 * @param dependencyConsumer a callback for processing the target object, +	 * if unique (not called otherwise), +	 * @throws BeansException in case of creation errors, +	 * @since 5.0, +	 * @see #getIfAvailable(), +	 */, +	default void ifUnique(Consumer<T> dependencyConsumer) throws BeansException {, +		T dependency = getIfUnique();, +		if (dependency != null) {, +			dependencyConsumer.accept(dependency);, +		}, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/ObjectProvider.java, + * Copyright 2002-2017 the original author or authors., +import java.util.function.Consumer;, +	 * Consume an instance (possibly shared or independent) of the object, +	 * managed by this factory, if available., +	 * @param dependencyConsumer a callback for processing the target object, +	 * if available (not called otherwise), +	 * @throws BeansException in case of creation errors, +	 * @since 5.0, +	 * @see #getIfAvailable(), +	 */, +	default void ifAvailable(Consumer<T> dependencyConsumer) throws BeansException {, +		T dependency = getIfAvailable();, +		if (dependency != null) {, +			dependencyConsumer.accept(dependency);, +		}, +	}, +, +	/**, +	/**, +	 * Consume an instance (possibly shared or independent) of the object, +	 * managed by this factory, if unique., +	 * @param dependencyConsumer a callback for processing the target object, +	 * if unique (not called otherwise), +	 * @throws BeansException in case of creation errors, +	 * @since 5.0, +	 * @see #getIfAvailable(), +	 */, +	default void ifUnique(Consumer<T> dependencyConsumer) throws BeansException {, +		T dependency = getIfUnique();, +		if (dependency != null) {, +			dependencyConsumer.accept(dependency);, +		}, +	}, +, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessorTests.java, +		assertEquals(bf.getBean("testBean"), bean.consumeOptionalTestBean());, +		assertEquals(bf.getBean("testBean"), bean.consumeUniqueTestBean());, +		assertEquals(bf.getBean("testBean"), bean.consumeOptionalTestBean());, +		assertEquals(bf.getBean("testBean"), bean.consumeUniqueTestBean());, +		assertNull(bean.consumeOptionalTestBean());, +		assertNull(bean.consumeUniqueTestBean());, +		try {, +			bean.consumeOptionalTestBean();, +			fail("Should have thrown NoUniqueBeanDefinitionException");, +		}, +		catch (NoUniqueBeanDefinitionException ex) {, +			// expected, +		}, +		assertNull(bean.consumeUniqueTestBean());, +		assertSame(bf.getBean("testBean1"), bean.consumeOptionalTestBean());, +		assertSame(bf.getBean("testBean1"), bean.consumeUniqueTestBean());, +		private TestBean consumedTestBean;, +, +		public TestBean consumeOptionalTestBean() {, +			this.testBeanFactory.ifAvailable(tb -> consumedTestBean = tb);, +			return consumedTestBean;, +		}, +, +, +		public TestBean consumeUniqueTestBean() {, +			this.testBeanFactory.ifUnique(tb -> consumedTestBean = tb);, +			return consumedTestBean;, +		}]