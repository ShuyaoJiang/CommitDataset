[+++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/Reactor2TcpClient.java, +import reactor.io.net.ChannelStream;, +import reactor.io.net.NetStreams;, +import reactor.io.net.NetStreams.TcpClientFactory;, +import reactor.io.net.ReactorChannelHandler;, +import reactor.io.net.Reconnect;, +	private final TcpClientFactory<Message<P>, Message<P>> tcpClientSpecFactory;, +		this.tcpClientSpecFactory = new TcpClientFactory<Message<P>, Message<P>>() {, +		}, +		catch (Exception i) {, +	public Reactor2TcpClient(TcpClientFactory<Message<P>, Message<P>> tcpClientSpecFactory) {, +	public ListenableFuture<Void> connect(final TcpConnectionHandler<P> connectionHandler) {, +		Assert.notNull(connectionHandler, "'connectionHandler' must not be null");, +		Promise<Void> promise = createTcpClient().start(new MessageChannelStreamHandler<P>(connectionHandler));, +	public ListenableFuture<Void> connect(TcpConnectionHandler<P> connectionHandler, ReconnectStrategy strategy) {, +		Assert.notNull(connectionHandler, "'connectionHandler' must not be null");, +		Assert.notNull(strategy, "'reconnectStrategy' must not be null");, +		Stream<Tuple2<InetSocketAddress, Integer>> stream = createTcpClient().start(, +				new MessageChannelStreamHandler<P>(connectionHandler),, +				new ReactorReconnectAdapter(strategy));, +	private TcpClient<Message<P>, Message<P>> createTcpClient() {, +		Class<NettyTcpClient> type = REACTOR_TCP_CLIENT_TYPE;, +		TcpClient<Message<P>, Message<P>> tcpClient = NetStreams.tcpClient(type, this.tcpClientSpecFactory);, +		return tcpClient;, +		final List<TcpClient<Message<P>, Message<P>>> readOnlyClients;, +			readOnlyClients = new ArrayList<TcpClient<Message<P>, Message<P>>>(this.tcpClients);, +		Promise<Void> promise = Streams.from(readOnlyClients), +, +	private static class MessageChannelStreamHandler<P>, +			implements ReactorChannelHandler<Message<P>, Message<P>, ChannelStream<Message<P>, Message<P>>> {, +, +		private final TcpConnectionHandler<P> connectionHandler;, +, +		public MessageChannelStreamHandler(TcpConnectionHandler<P> connectionHandler) {, +			this.connectionHandler = connectionHandler;, +		}, +, +		@Override, +		public Publisher<Void> apply(ChannelStream<Message<P>, Message<P>> channelStream) {, +, +			Promise<Void> closePromise = Promises.prepare();, +, +			this.connectionHandler.afterConnected(new Reactor2TcpConnection<P>(channelStream, closePromise));, +, +			channelStream, +					.finallyDo(new Consumer<Signal<Message<P>>>() {, +, +						@Override, +						public void accept(Signal<Message<P>> signal) {, +							if (signal.isOnError()) {, +								connectionHandler.handleFailure(signal.getThrowable());, +							}, +							else if (signal.isOnComplete()) {, +								connectionHandler.afterConnectionClosed();, +							}, +						}, +					}), +					.consume(new Consumer<Message<P>>() {, +, +						@Override, +						public void accept(Message<P> message) {, +							connectionHandler.handleMessage(message);, +						}, +					});, +, +			return closePromise;, +		}, +	}, +, +	private static class ReactorReconnectAdapter implements Reconnect {, +		public ReactorReconnectAdapter(ReconnectStrategy strategy) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/Reactor2TcpClient.java, +import reactor.io.net.ChannelStream;, +import reactor.io.net.NetStreams;, +import reactor.io.net.NetStreams.TcpClientFactory;, +import reactor.io.net.ReactorChannelHandler;, +import reactor.io.net.Reconnect;, +	private final TcpClientFactory<Message<P>, Message<P>> tcpClientSpecFactory;, +		this.tcpClientSpecFactory = new TcpClientFactory<Message<P>, Message<P>>() {, +		}, +		catch (Exception i) {, +	public Reactor2TcpClient(TcpClientFactory<Message<P>, Message<P>> tcpClientSpecFactory) {, +	public ListenableFuture<Void> connect(final TcpConnectionHandler<P> connectionHandler) {, +		Assert.notNull(connectionHandler, "'connectionHandler' must not be null");, +		Promise<Void> promise = createTcpClient().start(new MessageChannelStreamHandler<P>(connectionHandler));, +	public ListenableFuture<Void> connect(TcpConnectionHandler<P> connectionHandler, ReconnectStrategy strategy) {, +		Assert.notNull(connectionHandler, "'connectionHandler' must not be null");, +		Assert.notNull(strategy, "'reconnectStrategy' must not be null");, +		Stream<Tuple2<InetSocketAddress, Integer>> stream = createTcpClient().start(, +				new MessageChannelStreamHandler<P>(connectionHandler),, +				new ReactorReconnectAdapter(strategy));, +	private TcpClient<Message<P>, Message<P>> createTcpClient() {, +		Class<NettyTcpClient> type = REACTOR_TCP_CLIENT_TYPE;, +		TcpClient<Message<P>, Message<P>> tcpClient = NetStreams.tcpClient(type, this.tcpClientSpecFactory);, +		return tcpClient;, +		final List<TcpClient<Message<P>, Message<P>>> readOnlyClients;, +			readOnlyClients = new ArrayList<TcpClient<Message<P>, Message<P>>>(this.tcpClients);, +		Promise<Void> promise = Streams.from(readOnlyClients), +, +	private static class MessageChannelStreamHandler<P>]