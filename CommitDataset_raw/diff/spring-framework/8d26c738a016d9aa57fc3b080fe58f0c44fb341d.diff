[+++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpResponse.java, +	private Publisher<? extends DataBuffer> body;, +	private Publisher<? extends Publisher<? extends DataBuffer>> bodyWithFlushes;, +	public Publisher<? extends DataBuffer> getBody() {, +	public Publisher<? extends Publisher<? extends DataBuffer>> getBodyWithFlush() {, +	public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {, +	public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body) {, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpResponse.java, +	private Publisher<? extends DataBuffer> body;, +	private Publisher<? extends Publisher<? extends DataBuffer>> bodyWithFlushes;, +	public Publisher<? extends DataBuffer> getBody() {, +	public Publisher<? extends Publisher<? extends DataBuffer>> getBodyWithFlush() {, +	public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {, +	public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body) {, +++ b/spring-web/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, +	Mono<Void> writeWith(Publisher<? extends DataBuffer> body);, +	Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body);, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpResponse.java, +	private Publisher<? extends DataBuffer> body;, +	private Publisher<? extends Publisher<? extends DataBuffer>> bodyWithFlushes;, +	public Publisher<? extends DataBuffer> getBody() {, +	public Publisher<? extends Publisher<? extends DataBuffer>> getBodyWithFlush() {, +	public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {, +	public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body) {, +++ b/spring-web/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, +	Mono<Void> writeWith(Publisher<? extends DataBuffer> body);, +	Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body);, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java, +	public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {, +	public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body) {, +	private static Publisher<ByteBuf> toByteBufs(Publisher<? extends DataBuffer> dataBuffers) {, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpResponse.java, +	private Publisher<? extends DataBuffer> body;, +	private Publisher<? extends Publisher<? extends DataBuffer>> bodyWithFlushes;, +	public Publisher<? extends DataBuffer> getBody() {, +	public Publisher<? extends Publisher<? extends DataBuffer>> getBodyWithFlush() {, +	public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {, +	public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body) {, +++ b/spring-web/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, +	Mono<Void> writeWith(Publisher<? extends DataBuffer> body);, +	Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body);, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java, +	public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {, +	public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body) {, +	private static Publisher<ByteBuf> toByteBufs(Publisher<? extends DataBuffer> dataBuffers) {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerServerHttpResponse.java, +	protected final Mono<Void> writeWithInternal(Publisher<? extends DataBuffer> body) {, +	protected final Mono<Void> writeAndFlushWithInternal(Publisher<? extends Publisher<? extends DataBuffer>> body) {, +			Processor<? super Publisher<? extends DataBuffer>, Void> bodyProcessor = createBodyFlushProcessor();, +	protected abstract Processor<? super Publisher<? extends DataBuffer>, Void> createBodyFlushProcessor();, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpResponse.java, +	private Publisher<? extends DataBuffer> body;, +	private Publisher<? extends Publisher<? extends DataBuffer>> bodyWithFlushes;, +	public Publisher<? extends DataBuffer> getBody() {, +	public Publisher<? extends Publisher<? extends DataBuffer>> getBodyWithFlush() {, +	public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {, +	public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body) {, +++ b/spring-web/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, +	Mono<Void> writeWith(Publisher<? extends DataBuffer> body);, +	Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body);, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java, +	public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {, +	public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body) {, +	private static Publisher<ByteBuf> toByteBufs(Publisher<? extends DataBuffer> dataBuffers) {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerServerHttpResponse.java, +	protected final Mono<Void> writeWithInternal(Publisher<? extends DataBuffer> body) {, +	protected final Mono<Void> writeAndFlushWithInternal(Publisher<? extends Publisher<? extends DataBuffer>> body) {, +			Processor<? super Publisher<? extends DataBuffer>, Void> bodyProcessor = createBodyFlushProcessor();, +	protected abstract Processor<? super Publisher<? extends DataBuffer>, Void> createBodyFlushProcessor();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractResponseBodyFlushProcessor.java, +abstract class AbstractResponseBodyFlushProcessor implements Processor<Publisher<? extends DataBuffer>, Void> {, +	public final void onNext(Publisher<? extends DataBuffer> publisher) {, +	protected abstract Processor<? super DataBuffer, Void> createBodyProcessor();, +			public void onNext(AbstractResponseBodyFlushProcessor processor, Publisher<? extends DataBuffer> chunk) {, +					Processor<? super DataBuffer, Void> chunkProcessor = processor.createBodyProcessor();, +					Publisher<? extends DataBuffer> publisher) {, +		public void onNext(AbstractResponseBodyFlushProcessor processor, Publisher<? extends DataBuffer> publisher) {, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpResponse.java, +	private Publisher<? extends DataBuffer> body;, +	private Publisher<? extends Publisher<? extends DataBuffer>> bodyWithFlushes;, +	public Publisher<? extends DataBuffer> getBody() {, +	public Publisher<? extends Publisher<? extends DataBuffer>> getBodyWithFlush() {, +	public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {, +	public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body) {, +++ b/spring-web/src/main/java/org/springframework/http/ReactiveHttpOutputMessage.java, +	Mono<Void> writeWith(Publisher<? extends DataBuffer> body);, +	Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body);, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpRequest.java, +	public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {, +	public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body) {, +	private static Publisher<ByteBuf> toByteBufs(Publisher<? extends DataBuffer> dataBuffers) {, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerServerHttpResponse.java, +	protected final Mono<Void> writeWithInternal(Publisher<? extends DataBuffer> body) {, +	protected final Mono<Void> writeAndFlushWithInternal(Publisher<? extends Publisher<? extends DataBuffer>> body) {, +			Processor<? super Publisher<? extends DataBuffer>, Void> bodyProcessor = createBodyFlushProcessor();, +	protected abstract Processor<? super Publisher<? extends DataBuffer>, Void> createBodyFlushProcessor();, +++ b/spring-web/src/main/java/org/springframework/http/server/reactive/AbstractResponseBodyFlushProcessor.java, +abstract class AbstractResponseBodyFlushProcessor implements Processor<Publisher<? extends DataBuffer>, Void> {, +	public final void onNext(Publisher<? extends DataBuffer> publisher) {, +	protected abstract Processor<? super DataBuffer, Void> createBodyProcessor();]