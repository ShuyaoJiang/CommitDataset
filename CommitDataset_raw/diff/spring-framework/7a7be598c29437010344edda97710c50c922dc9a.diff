[+++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/JdbcTemplateQueryTests.java, +, +		List<Map<String, Object>> li = this.template.queryForList(sql);, +		assertEquals("First row is Integer", 11, ((Integer) li.get(0).get("age")).intValue());, +		assertEquals("Second row is Integer", 12, ((Integer) li.get(1).get("age")).intValue());, +		List<Map<String, Object>> li = this.template.queryForList(sql);, +		List<Map<String, Object>> li = this.template.queryForList(sql);, +		assertEquals("First row is Integer", 11, ((Integer) li.get(0).get("age")).intValue());, +		List<Integer> li = this.template.queryForList(sql, Integer.class);, +		assertEquals("Element is Integer", 11, li.get(0).intValue());, +		Map<String, Object> map = this.template.queryForMap(sql);, +		assertEquals(Integer.valueOf(22), this.template.queryForObject(sql, Integer.class));, +		List<Map<String, Object>> li = this.template.queryForList(sql, new Object[] {3});, +		assertEquals("First row is Integer", 11, ((Integer) li.get(0).get("age")).intValue());, +		assertEquals("Second row is Integer", 12, ((Integer) li.get(1).get("age")).intValue());, +		List<Map<String, Object>> li = this.template.queryForList(sql, new Object[] {3});, +		List<Map<String, Object>> li = this.template.queryForList(sql, new Object[] {3});, +		assertEquals("First row is Integer", 11, ((Integer) li.get(0).get("age")).intValue());, +		List<Integer> li = this.template.queryForList(sql, new Object[] {3}, Integer.class);, +		assertEquals("First row is Integer", 11, li.get(0).intValue());, +		Map<String, Object> map = this.template.queryForMap(sql, new Object[] {3});, +		Object o = this.template.queryForObject(sql, new Object[] {3}, new RowMapper<Integer>() {, +		Object o = this.template.queryForObject(sql, new Object[] {3}, Integer.class);, +		int i = this.template.queryForInt(sql, new Object[] {3});, +		long l = this.template.queryForLong(sql, new Object[] {3});, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/JdbcTemplateQueryTests.java, +, +		List<Map<String, Object>> li = this.template.queryForList(sql);, +		assertEquals("First row is Integer", 11, ((Integer) li.get(0).get("age")).intValue());, +		assertEquals("Second row is Integer", 12, ((Integer) li.get(1).get("age")).intValue());, +		List<Map<String, Object>> li = this.template.queryForList(sql);, +		List<Map<String, Object>> li = this.template.queryForList(sql);, +		assertEquals("First row is Integer", 11, ((Integer) li.get(0).get("age")).intValue());, +		List<Integer> li = this.template.queryForList(sql, Integer.class);, +		assertEquals("Element is Integer", 11, li.get(0).intValue());, +		Map<String, Object> map = this.template.queryForMap(sql);, +		assertEquals(Integer.valueOf(22), this.template.queryForObject(sql, Integer.class));, +		List<Map<String, Object>> li = this.template.queryForList(sql, new Object[] {3});, +		assertEquals("First row is Integer", 11, ((Integer) li.get(0).get("age")).intValue());, +		assertEquals("Second row is Integer", 12, ((Integer) li.get(1).get("age")).intValue());, +		List<Map<String, Object>> li = this.template.queryForList(sql, new Object[] {3});, +		List<Map<String, Object>> li = this.template.queryForList(sql, new Object[] {3});, +		assertEquals("First row is Integer", 11, ((Integer) li.get(0).get("age")).intValue());, +		List<Integer> li = this.template.queryForList(sql, new Object[] {3}, Integer.class);, +		assertEquals("First row is Integer", 11, li.get(0).intValue());, +		Map<String, Object> map = this.template.queryForMap(sql, new Object[] {3});, +		Object o = this.template.queryForObject(sql, new Object[] {3}, new RowMapper<Integer>() {, +		Object o = this.template.queryForObject(sql, new Object[] {3}, Integer.class);, +		int i = this.template.queryForInt(sql, new Object[] {3});, +		long l = this.template.queryForLong(sql, new Object[] {3});, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/JdbcTemplateTests.java, + * Copyright 2002-2014 the original author or authors., +		Map<String, Object> out = this.template.call(new CallableStatementCreator() {, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/JdbcTemplateQueryTests.java, +, +		List<Map<String, Object>> li = this.template.queryForList(sql);, +		assertEquals("First row is Integer", 11, ((Integer) li.get(0).get("age")).intValue());, +		assertEquals("Second row is Integer", 12, ((Integer) li.get(1).get("age")).intValue());, +		List<Map<String, Object>> li = this.template.queryForList(sql);, +		List<Map<String, Object>> li = this.template.queryForList(sql);, +		assertEquals("First row is Integer", 11, ((Integer) li.get(0).get("age")).intValue());, +		List<Integer> li = this.template.queryForList(sql, Integer.class);, +		assertEquals("Element is Integer", 11, li.get(0).intValue());, +		Map<String, Object> map = this.template.queryForMap(sql);, +		assertEquals(Integer.valueOf(22), this.template.queryForObject(sql, Integer.class));, +		List<Map<String, Object>> li = this.template.queryForList(sql, new Object[] {3});, +		assertEquals("First row is Integer", 11, ((Integer) li.get(0).get("age")).intValue());, +		assertEquals("Second row is Integer", 12, ((Integer) li.get(1).get("age")).intValue());, +		List<Map<String, Object>> li = this.template.queryForList(sql, new Object[] {3});, +		List<Map<String, Object>> li = this.template.queryForList(sql, new Object[] {3});, +		assertEquals("First row is Integer", 11, ((Integer) li.get(0).get("age")).intValue());, +		List<Integer> li = this.template.queryForList(sql, new Object[] {3}, Integer.class);, +		assertEquals("First row is Integer", 11, li.get(0).intValue());, +		Map<String, Object> map = this.template.queryForMap(sql, new Object[] {3});, +		Object o = this.template.queryForObject(sql, new Object[] {3}, new RowMapper<Integer>() {, +		Object o = this.template.queryForObject(sql, new Object[] {3}, Integer.class);, +		int i = this.template.queryForInt(sql, new Object[] {3});, +		long l = this.template.queryForLong(sql, new Object[] {3});, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/JdbcTemplateTests.java, + * Copyright 2002-2014 the original author or authors., +		Map<String, Object> out = this.template.call(new CallableStatementCreator() {, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/namedparam/NamedParameterQueryTests.java, + * Copyright 2002-2014 the original author or authors., +				((Integer) li.get(0).get("age")).intValue());, +				((Integer) li.get(1).get("age")).intValue());, +				((Integer) li.get(0).get("age")).intValue());, +		Map<String, Object> map = template.queryForMap("SELECT AGE FROM CUSTMR WHERE ID < :id", parms);, +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/core/JdbcTemplateQueryTests.java, +, +		List<Map<String, Object>> li = this.template.queryForList(sql);, +		assertEquals("First row is Integer", 11, ((Integer) li.get(0).get("age")).intValue());, +		assertEquals("Second row is Integer", 12, ((Integer) li.get(1).get("age")).intValue());, +		List<Map<String, Object>> li = this.template.queryForList(sql);, +		List<Map<String, Object>> li = this.template.queryForList(sql);, +		assertEquals("First row is Integer", 11, ((Integer) li.get(0).get("age")).intValue());, +		List<Integer> li = this.template.queryForList(sql, Integer.class);, +		assertEquals("Element is Integer", 11, li.get(0).intValue());, +		Map<String, Object> map = this.template.queryForMap(sql);, +		assertEquals(Integer.valueOf(22), this.template.queryForObject(sql, Integer.class));, +		List<Map<String, Object>> li = this.template.queryForList(sql, new Object[] {3});]