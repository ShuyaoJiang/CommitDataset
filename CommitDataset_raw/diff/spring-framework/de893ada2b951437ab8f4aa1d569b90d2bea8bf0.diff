[+++ b/build.gradle, +	ext.hibernate4Version    = "4.3.10.Final", +		optional("javax.money:money-api:1.0"), +		testCompile("org.javamoney:moneta:1.0"), +++ b/build.gradle, +	ext.hibernate4Version    = "4.3.10.Final", +		optional("javax.money:money-api:1.0"), +		testCompile("org.javamoney:moneta:1.0"), +++ b/spring-context/src/main/java/org/springframework/format/number/money/CurrencyUnitFormatter.java, +import javax.money.Monetary;, +		return Monetary.getCurrency(text);, +++ b/build.gradle, +	ext.hibernate4Version    = "4.3.10.Final", +		optional("javax.money:money-api:1.0"), +		testCompile("org.javamoney:moneta:1.0"), +++ b/spring-context/src/main/java/org/springframework/format/number/money/CurrencyUnitFormatter.java, +import javax.money.Monetary;, +		return Monetary.getCurrency(text);, +++ b/spring-context/src/main/java/org/springframework/format/number/money/Jsr354NumberFormatAnnotationFormatterFactory.java, +import javax.money.Monetary;, +	private static final String CURRENCY_CODE_PATTERN = "\u00A4\u00A4";, +, +, +			return new PatternDecoratingFormatter(resolveEmbeddedValue(annotation.pattern()));, +			if (style == Style.NUMBER) {, +				return new NumberDecoratingFormatter(new NumberStyleFormatter());, +			else if (style == Style.PERCENT) {, +				return new NumberDecoratingFormatter(new PercentStyleFormatter());, +				return new NumberDecoratingFormatter(new CurrencyStyleFormatter());, +		public NumberDecoratingFormatter(Formatter<Number> numberFormatter) {, +			this.numberFormatter = numberFormatter;, +		}, +, +		@Override, +		public String print(MonetaryAmount object, Locale locale) {, +			return this.numberFormatter.print(object.getNumber(), locale);, +		}, +, +		@Override, +		public MonetaryAmount parse(String text, Locale locale) throws ParseException {, +			CurrencyUnit currencyUnit = Monetary.getCurrency(locale);, +			Number numberValue = this.numberFormatter.parse(text, locale);, +			return Monetary.getDefaultAmountFactory().setNumber(numberValue).setCurrency(currencyUnit).create();, +		}, +	}, +, +, +	private static class PatternDecoratingFormatter implements Formatter<MonetaryAmount> {, +, +		public PatternDecoratingFormatter(String pattern) {, +			return formatter.print(object.getNumber(), locale);, +			Currency currency = determineCurrency(text, locale);, +			CurrencyUnit currencyUnit = Monetary.getCurrency(currency.getCurrencyCode());, +			Number numberValue = formatter.parse(text, locale);, +			return Monetary.getDefaultAmountFactory().setNumber(numberValue).setCurrency(currencyUnit).create();, +, +		private Currency determineCurrency(String text, Locale locale) {, +			try {, +				if (text.length() < 3) {, +					// Could not possibly contain a currency code ->, +					// try with locale and likely let it fail on parse., +					return Currency.getInstance(locale);, +				}, +				else if (this.pattern.startsWith(CURRENCY_CODE_PATTERN)) {, +					return Currency.getInstance(text.substring(0, 3));, +				}, +				else if (this.pattern.endsWith(CURRENCY_CODE_PATTERN)) {, +					return Currency.getInstance(text.substring(text.length() - 3));, +				}, +				else {, +					// A pattern without a currency code..., +					return Currency.getInstance(locale);, +				}, +			}, +			catch (IllegalArgumentException ex) {, +				throw new IllegalArgumentException("Cannot determine currency for number value [" + text + "]", ex);, +			}, +++ b/build.gradle, +	ext.hibernate4Version    = "4.3.10.Final", +		optional("javax.money:money-api:1.0"), +		testCompile("org.javamoney:moneta:1.0"), +++ b/spring-context/src/main/java/org/springframework/format/number/money/CurrencyUnitFormatter.java, +import javax.money.Monetary;, +		return Monetary.getCurrency(text);, +++ b/spring-context/src/main/java/org/springframework/format/number/money/Jsr354NumberFormatAnnotationFormatterFactory.java, +import javax.money.Monetary;, +	private static final String CURRENCY_CODE_PATTERN = "\u00A4\u00A4";, +, +, +			return new PatternDecoratingFormatter(resolveEmbeddedValue(annotation.pattern()));, +			if (style == Style.NUMBER) {, +				return new NumberDecoratingFormatter(new NumberStyleFormatter());, +			else if (style == Style.PERCENT) {, +				return new NumberDecoratingFormatter(new PercentStyleFormatter());, +				return new NumberDecoratingFormatter(new CurrencyStyleFormatter());, +		public NumberDecoratingFormatter(Formatter<Number> numberFormatter) {, +			this.numberFormatter = numberFormatter;, +		}, +, +		@Override]