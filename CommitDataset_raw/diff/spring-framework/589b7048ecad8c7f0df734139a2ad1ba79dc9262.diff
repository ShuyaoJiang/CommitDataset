[+++ b/spring-context/src/main/java/org/springframework/context/annotation/BeanAnnotationHelper.java, +import java.util.Map;, +import org.springframework.core.annotation.AnnotationAttributes;, +import org.springframework.util.ConcurrentReferenceHashMap;, +abstract class BeanAnnotationHelper {, +	private static final Map<Method, String> beanNameCache = new ConcurrentReferenceHashMap<>();, +, +	private static final Map<Method, Boolean> scopedProxyCache = new ConcurrentReferenceHashMap<>();, +		String beanName = beanNameCache.get(beanMethod);, +		if (beanName == null) {, +			beanName = beanMethod.getName();, +			AnnotationAttributes bean =, +					AnnotatedElementUtils.findMergedAnnotationAttributes(beanMethod, Bean.class, false, false);, +			if (bean != null) {, +				String[] names = bean.getStringArray("name");, +				if (names.length > 0) {, +					beanName = names[0];, +				}, +			}, +			beanNameCache.put(beanMethod, beanName);, +		}, +		return beanName;, +	public static boolean isScopedProxy(Method beanMethod) {, +		Boolean scopedProxy = scopedProxyCache.get(beanMethod);, +		if (scopedProxy == null) {, +			AnnotationAttributes scope =, +					AnnotatedElementUtils.findMergedAnnotationAttributes(beanMethod, Scope.class, false, false);, +			scopedProxy = (scope != null && scope.getEnum("proxyMode") != ScopedProxyMode.NO);, +			scopedProxyCache.put(beanMethod, scopedProxy);, +		}, +		return scopedProxy;, +++ b/spring-context/src/main/java/org/springframework/context/annotation/BeanAnnotationHelper.java, +import java.util.Map;, +import org.springframework.core.annotation.AnnotationAttributes;, +import org.springframework.util.ConcurrentReferenceHashMap;, +abstract class BeanAnnotationHelper {, +	private static final Map<Method, String> beanNameCache = new ConcurrentReferenceHashMap<>();, +, +	private static final Map<Method, Boolean> scopedProxyCache = new ConcurrentReferenceHashMap<>();, +		String beanName = beanNameCache.get(beanMethod);, +		if (beanName == null) {, +			beanName = beanMethod.getName();, +			AnnotationAttributes bean =, +					AnnotatedElementUtils.findMergedAnnotationAttributes(beanMethod, Bean.class, false, false);, +			if (bean != null) {, +				String[] names = bean.getStringArray("name");, +				if (names.length > 0) {, +					beanName = names[0];, +				}, +			}, +			beanNameCache.put(beanMethod, beanName);, +		}, +		return beanName;, +	public static boolean isScopedProxy(Method beanMethod) {, +		Boolean scopedProxy = scopedProxyCache.get(beanMethod);, +		if (scopedProxy == null) {, +			AnnotationAttributes scope =, +					AnnotatedElementUtils.findMergedAnnotationAttributes(beanMethod, Scope.class, false, false);, +			scopedProxy = (scope != null && scope.getEnum("proxyMode") != ScopedProxyMode.NO);, +			scopedProxyCache.put(beanMethod, scopedProxy);, +		}, +		return scopedProxy;, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +			if (BeanAnnotationHelper.isScopedProxy(beanMethod)) {, +++ b/spring-context/src/main/java/org/springframework/context/annotation/BeanAnnotationHelper.java, +import java.util.Map;, +import org.springframework.core.annotation.AnnotationAttributes;, +import org.springframework.util.ConcurrentReferenceHashMap;, +abstract class BeanAnnotationHelper {, +	private static final Map<Method, String> beanNameCache = new ConcurrentReferenceHashMap<>();, +, +	private static final Map<Method, Boolean> scopedProxyCache = new ConcurrentReferenceHashMap<>();, +		String beanName = beanNameCache.get(beanMethod);, +		if (beanName == null) {, +			beanName = beanMethod.getName();, +			AnnotationAttributes bean =, +					AnnotatedElementUtils.findMergedAnnotationAttributes(beanMethod, Bean.class, false, false);, +			if (bean != null) {, +				String[] names = bean.getStringArray("name");, +				if (names.length > 0) {, +					beanName = names[0];, +				}, +			}, +			beanNameCache.put(beanMethod, beanName);, +		}, +		return beanName;, +	public static boolean isScopedProxy(Method beanMethod) {, +		Boolean scopedProxy = scopedProxyCache.get(beanMethod);, +		if (scopedProxy == null) {, +			AnnotationAttributes scope =, +					AnnotatedElementUtils.findMergedAnnotationAttributes(beanMethod, Scope.class, false, false);, +			scopedProxy = (scope != null && scope.getEnum("proxyMode") != ScopedProxyMode.NO);, +			scopedProxyCache.put(beanMethod, scopedProxy);, +		}, +		return scopedProxy;, +++ b/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java, +			if (BeanAnnotationHelper.isScopedProxy(beanMethod)) {, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +	 * <p>In contrast to {@link #getAllAnnotationAttributes}, the search algorithm, +	 * used by this method will stop searching the annotation hierarchy once the]