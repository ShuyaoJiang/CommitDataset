[+++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/AbstractCachingConfiguration.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.core.annotation.AnnotationAttributes;, +	protected AnnotationAttributes enableCaching;, +		this.enableCaching = AnnotationAttributes.fromMap(, +				importMetadata.getAnnotationAttributes(EnableCaching.class.getName(), false));, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/AbstractCachingConfiguration.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.core.annotation.AnnotationAttributes;, +	protected AnnotationAttributes enableCaching;, +		this.enableCaching = AnnotationAttributes.fromMap(, +				importMetadata.getAnnotationAttributes(EnableCaching.class.getName(), false));, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/ProxyCachingConfiguration.java, + * Copyright 2002-2012 the original author or authors., +		advisor.setOrder(this.enableCaching.getInt("order"));, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/AbstractCachingConfiguration.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.core.annotation.AnnotationAttributes;, +	protected AnnotationAttributes enableCaching;, +		this.enableCaching = AnnotationAttributes.fromMap(, +				importMetadata.getAnnotationAttributes(EnableCaching.class.getName(), false));, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/ProxyCachingConfiguration.java, + * Copyright 2002-2012 the original author or authors., +		advisor.setOrder(this.enableCaching.getInt("order"));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, + * Copyright 2002-2012 the original author or authors., +import static org.springframework.context.annotation.MetadataUtils.attributesFor;, +, +import org.springframework.core.annotation.AnnotationAttributes;, +		Class<?> annoType = GenericTypeResolver.resolveTypeArgument(this.getClass(), AdviceModeImportSelector.class);, +		AnnotationAttributes attributes = attributesFor(importingClassMetadata, annoType);, +		AdviceMode adviceMode =, +				attributes.getEnum(this.getAdviceModeAttributeName(), AdviceMode.class);, +		String[] imports = selectImports(adviceMode);, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/AbstractCachingConfiguration.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.core.annotation.AnnotationAttributes;, +	protected AnnotationAttributes enableCaching;, +		this.enableCaching = AnnotationAttributes.fromMap(, +				importMetadata.getAnnotationAttributes(EnableCaching.class.getName(), false));, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/ProxyCachingConfiguration.java, + * Copyright 2002-2012 the original author or authors., +		advisor.setOrder(this.enableCaching.getInt("order"));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, + * Copyright 2002-2012 the original author or authors., +import static org.springframework.context.annotation.MetadataUtils.attributesFor;, +, +import org.springframework.core.annotation.AnnotationAttributes;, +		Class<?> annoType = GenericTypeResolver.resolveTypeArgument(this.getClass(), AdviceModeImportSelector.class);, +		AnnotationAttributes attributes = attributesFor(importingClassMetadata, annoType);, +		AdviceMode adviceMode =, +				attributes.getEnum(this.getAdviceModeAttributeName(), AdviceMode.class);, +		String[] imports = selectImports(adviceMode);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.core.annotation.AnnotationAttributes;, +		if (metadata.isAnnotated(Profile.class.getName())) {, +			AnnotationAttributes profile = MetadataUtils.attributesFor(metadata, Profile.class);, +			if (!this.environment.acceptsProfiles(profile.getStringArray("value"))) {, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/AbstractCachingConfiguration.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.core.annotation.AnnotationAttributes;, +	protected AnnotationAttributes enableCaching;, +		this.enableCaching = AnnotationAttributes.fromMap(, +				importMetadata.getAnnotationAttributes(EnableCaching.class.getName(), false));, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/ProxyCachingConfiguration.java, + * Copyright 2002-2012 the original author or authors., +		advisor.setOrder(this.enableCaching.getInt("order"));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, + * Copyright 2002-2012 the original author or authors., +import static org.springframework.context.annotation.MetadataUtils.attributesFor;, +, +import org.springframework.core.annotation.AnnotationAttributes;, +		Class<?> annoType = GenericTypeResolver.resolveTypeArgument(this.getClass(), AdviceModeImportSelector.class);, +		AnnotationAttributes attributes = attributesFor(importingClassMetadata, annoType);, +		AdviceMode adviceMode =, +				attributes.getEnum(this.getAdviceModeAttributeName(), AdviceMode.class);, +		String[] imports = selectImports(adviceMode);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.core.annotation.AnnotationAttributes;, +		if (metadata.isAnnotated(Profile.class.getName())) {, +			AnnotationAttributes profile = MetadataUtils.attributesFor(metadata, Profile.class);, +			if (!this.environment.acceptsProfiles(profile.getStringArray("value"))) {, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationBeanNameGenerator.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.core.annotation.AnnotationAttributes;, +			AnnotationAttributes attributes = MetadataUtils.attributesFor(amd, type);, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/AbstractCachingConfiguration.java, + * Copyright 2002-2012 the original author or authors., +import org.springframework.core.annotation.AnnotationAttributes;, +	protected AnnotationAttributes enableCaching;, +		this.enableCaching = AnnotationAttributes.fromMap(, +				importMetadata.getAnnotationAttributes(EnableCaching.class.getName(), false));, +++ b/org.springframework.context/src/main/java/org/springframework/cache/annotation/ProxyCachingConfiguration.java, + * Copyright 2002-2012 the original author or authors., +		advisor.setOrder(this.enableCaching.getInt("order"));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AdviceModeImportSelector.java, + * Copyright 2002-2012 the original author or authors., +import static org.springframework.context.annotation.MetadataUtils.attributesFor;]