[+++ b/spring-framework-reference/src/rest.xml, +++ b/spring-framework-reference/src/rest.xml, +++ b/spring-framework-reference/src/view.xml, +    of course you need to write some JSPs that will actually render the, +    view.</para>, +      <classname>ResourceBundleViewResolver</classname>. Both are declared in, +      the <interfacename>WebApplicationContext</interfacename>:</para>, +      <programlisting language="xml"><lineannotation>&lt;!-- the <classname>ResourceBundleViewResolver</classname> --&gt;</lineannotation>, +&lt;bean id="viewResolver" class="org.springframework.web.servlet.view.ResourceBundleViewResolver"&gt;, +  &lt;property name="basename" value="views"/&gt;, +&lt;/bean&gt;, +<lineannotation># And a sample properties file is uses (views.properties in WEB-INF/classes):</lineannotation>, +productList.url=/WEB-INF/jsp/productlist.jsp</programlisting>, +      <para>As you can see, the, +      <classname>ResourceBundleViewResolver</classname> needs a properties, +      file defining the view names mapped to 1) a class and 2) a URL. With a, +      <classname>ResourceBundleViewResolver</classname> you can mix different, +      types of views using only one resolver.</para>, +      <programlisting language="xml">&lt;bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;, +  &lt;property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/&gt;, +  &lt;property name="prefix" value="/WEB-INF/jsp/"/&gt;, +  &lt;property name="suffix" value=".jsp"/&gt;, +&lt;/bean&gt;</programlisting>, +      <para>The <classname>InternalResourceBundleViewResolver</classname> can, +      be configured for using JSPs as described above. As a best practice, we, +      strongly encourage placing your JSP files in a directory under the, +      <filename class="directory">'WEB-INF'</filename> directory, so there can, +      be no direct access by clients.</para>, +      <para>When using the Java Standard Tag Library you must use a special, +      view class, the <classname>JstlView</classname>, as JSTL needs some, +      preparation before things such as the i18N features will work.</para>, +      <para>The tag library descriptor (TLD) is included in the <filename, +      class="libraryfile">spring.jar</filename> as well in the distribution, +      itself. Further information about the individual tags can be found in, +      the appendix entitled <xref linkend="spring.tld" />.</para>, +      corresponding HTML tag counterpart, making the tags familiar and, +      intuitive to use. The tag-generated HTML is HTML 4.01/XHTML 1.0, +      compliant.</para>, +      <para>Unlike other form/input tag libraries, Spring's form tag library, +      is integrated with Spring Web MVC, giving the tags access to the command, +        <para>To use the tags from this library, add the following directive, +        to the top of your JSP page:</para>, +        <para>... where <literal>form</literal> is the tag name prefix you, +        want to use for the tags from this library.</para>, +        <para>This tag renders an HTML 'form' tag and exposes a binding path, +        to inner tags for binding. It puts the command object in the, +        accessed by inner tags. <emphasis>All the other tags in this library, +        are nested tags of the <literal>form</literal> tag</emphasis>.</para>, +        <interfacename>PageContext</interfacename> by the page controller., +        Keep reading to see more complex examples of how inner tags are used, +        with the <literal>form</literal> tag.</para>, +        backing object is <literal>'command'</literal>. If you have put the, +        form backing object into the model under another name (definitely a, +        best practice), then you can bind the form to the named variable like, +        <programlisting language="xml">&lt;form:form <lineannotation><emphasis, +              role="bold">commandName="user"</emphasis></lineannotation>&gt;, +        <para>This tag renders an HTML 'input' tag with type, +        'checkbox'.</para>, +        <para>Let's assume our <classname>User</classname> has preferences, +        such as newsletter subscription and a list of hobbies. Below is an, +        example of the <classname>Preferences</classname> class:</para>, +      <para>There are 3 approaches to the <literal>checkbox</literal> tag, +      which should meet all your checkbox needs. <itemizedlist>, +            bound value is <literal>true</literal>. The, +            <literal>value</literal> attribute corresponds to the resolved, +            value of the <literal>setValue(Object)</literal> value, +            property.</para>, +            configured <literal>setValue(Object)</literal> is equal to the, +            bound value.</para>, +      <emphasis>not</emphasis> checked, its value will not be sent to the, +      server as part of the HTTP request parameters once the form is, +      submitted, so we need a workaround for this quirk in HTML in order for, +      Spring form data binding to work. The <literal>checkbox</literal> tag, +      follows the existing Spring convention of including a hidden parameter, +      prefixed by an underscore ("_") for each checkbox. By doing this, you, +      are effectively telling Spring that <quote>, +          <emphasis>the checkbox was visible in the form and I want my object, +          to which the form data will be bound to reflect the state of the, +          checkbox no matter what</emphasis>, +        <classname>checkbox</classname> tag section. Sometimes you prefer not, +        to have to list all the possible hobbies in your JSP page. You would, +        rather provide a list at runtime of the available options and pass, +        that in to the tag. That is the purpose of the, +        <classname>checkboxes</classname> tag. You pass in an, +        <classname>Array</classname>, a <classname>List</classname> or a, +        <classname>Map</classname> containing the available options in the, +        "items" property. Typically the bound property is a collection so it, +        can hold multiple values selected by the user. Below is an example of, +        the JSP using this tag:</para>, +      Map, the map entry key will be used as the value and the map entry's, +      value will be used as the label to be displayed. You can also use a, +      custom object where you can provide the property names for the value, +      using "itemValue" and the label using "itemLabel".</para>, +        <para>A typical usage pattern will involve multiple tag instances, +        bound to the same property but with different values.</para>, +        the available options in the "items" property. In the case where you, +        use a Map, the map entry key will be used as the value and the map, +        entry's value will be used as the label to be displayed. You can also, +        use a custom object where you can provide the property names for the, +        value using "itemValue" and the label using "itemLabel".</para>]