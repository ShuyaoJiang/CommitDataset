[+++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java, +	/**, +	 * Key to use to store the default transaction manager., +	 */, +	private final Object DEFAULT_TRANSACTION_MANAGER_KEY = new Object();, +, +	private final ConcurrentHashMap<Object, PlatformTransactionManager> transactionManagerCache =, +			new ConcurrentHashMap<Object, PlatformTransactionManager>();, +		if (transactionManager != null) {, +			this.transactionManagerCache.put(DEFAULT_TRANSACTION_MANAGER_KEY, transactionManager);, +		}, +		return this.transactionManagerCache.get(DEFAULT_TRANSACTION_MANAGER_KEY);, +		if (getTransactionManager() == null && this.beanFactory == null) {, +		if (this.beanFactory != null) {, +			String qualifier = txAttr != null ? txAttr.getQualifier() : null;, +			} else {, +				PlatformTransactionManager defaultTransactionManager = getTransactionManager();, +				if (defaultTransactionManager == null) {, +					defaultTransactionManager = this.beanFactory.getBean(PlatformTransactionManager.class);, +					this.transactionManagerCache.putIfAbsent(, +							DEFAULT_TRANSACTION_MANAGER_KEY, defaultTransactionManager);, +				return defaultTransactionManager;, +		return getTransactionManager();, +	}, +++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java, +	/**, +	 * Key to use to store the default transaction manager., +	 */, +	private final Object DEFAULT_TRANSACTION_MANAGER_KEY = new Object();, +, +	private final ConcurrentHashMap<Object, PlatformTransactionManager> transactionManagerCache =, +			new ConcurrentHashMap<Object, PlatformTransactionManager>();, +		if (transactionManager != null) {, +			this.transactionManagerCache.put(DEFAULT_TRANSACTION_MANAGER_KEY, transactionManager);, +		}, +		return this.transactionManagerCache.get(DEFAULT_TRANSACTION_MANAGER_KEY);, +		if (getTransactionManager() == null && this.beanFactory == null) {, +		if (this.beanFactory != null) {, +			String qualifier = txAttr != null ? txAttr.getQualifier() : null;, +			} else {, +				PlatformTransactionManager defaultTransactionManager = getTransactionManager();, +				if (defaultTransactionManager == null) {, +					defaultTransactionManager = this.beanFactory.getBean(PlatformTransactionManager.class);, +					this.transactionManagerCache.putIfAbsent(, +							DEFAULT_TRANSACTION_MANAGER_KEY, defaultTransactionManager);, +				return defaultTransactionManager;, +		return getTransactionManager();, +	}, +++ b/spring-tx/src/test/java/org/springframework/transaction/interceptor/TransactionInterceptorTests.java, +	public void determineTransactionManagerWithNoBeanFactory() {, +		PlatformTransactionManager transactionManager = mock(PlatformTransactionManager.class);, +		TransactionInterceptor ti = createTestTransactionInterceptor(null, transactionManager);, +, +		assertSame(transactionManager, ti.determineTransactionManager(new DefaultTransactionAttribute()));, +	}, +, +	@Test, +	public void determineTransactionManagerWithNoBeanFactoryAndNoTransactionAttribute() {, +		PlatformTransactionManager transactionManager = mock(PlatformTransactionManager.class);, +		TransactionInterceptor ti = createTestTransactionInterceptor(null, transactionManager);, +, +		assertSame(transactionManager, ti.determineTransactionManager(null));, +	}, +, +	@Test, +	public void determineTransactionManagerWithQualifierAndDefault() {, +		BeanFactory beanFactory = mock(BeanFactory.class);, +		PlatformTransactionManager transactionManager = mock(PlatformTransactionManager.class);, +		TransactionInterceptor ti = createTestTransactionInterceptor(beanFactory, transactionManager);, +		PlatformTransactionManager fooTransactionManager =, +				associateTransactionManager(beanFactory, "fooTransactionManager");, +, +		DefaultTransactionAttribute attribute = new DefaultTransactionAttribute();, +		attribute.setQualifier("fooTransactionManager");, +, +		assertSame(fooTransactionManager, ti.determineTransactionManager(attribute));, +	}, +, +	@Test, +	public void determineTransactionManagerWithQualifierAndDefaultName() {, +		BeanFactory beanFactory = mock(BeanFactory.class);, +		associateTransactionManager(beanFactory, "defaultTransactionManager");, +		TransactionInterceptor ti = createTestTransactionInterceptor(beanFactory);, +		ti.setTransactionManagerBeanName("defaultTransactionManager");, +, +		PlatformTransactionManager fooTransactionManager =, +				associateTransactionManager(beanFactory, "fooTransactionManager");, +		DefaultTransactionAttribute attribute = new DefaultTransactionAttribute();, +		attribute.setQualifier("fooTransactionManager");, +, +		assertSame(fooTransactionManager, ti.determineTransactionManager(attribute));, +	}, +, +	@Test, +		PlatformTransactionManager txManager = associateTransactionManager(beanFactory, "fooTransactionManager");, +		PlatformTransactionManager txManager = 	associateTransactionManager(beanFactory, "fooTransactionManager");, +	private TransactionInterceptor createTestTransactionInterceptor(BeanFactory beanFactory,, +			PlatformTransactionManager transactionManager) {, +		if (beanFactory != null) {, +		}]