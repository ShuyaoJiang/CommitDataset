[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +	protected Class predictBeanType(String beanName, RootBeanDefinition mbd, Class... typesToMatch) {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +	protected Class predictBeanType(String beanName, RootBeanDefinition mbd, Class... typesToMatch) {, +++ b/org.springframework.web/src/main/java/org/springframework/http/HttpHeaders.java, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +	protected Class predictBeanType(String beanName, RootBeanDefinition mbd, Class... typesToMatch) {, +++ b/org.springframework.web/src/main/java/org/springframework/http/HttpHeaders.java, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java, +, +	 * Add a message body converter. Such a converters is used to convert objects to MIME parts., +	 */, +	public final void addPartConverter(HttpMessageConverter<?> partConverter) {, +		Assert.notNull(partConverter, "'partConverter' must not be NULL");, +		this.partConverters.add(partConverter);, +	}, +, +	/**, +		return Collections.unmodifiableList(this.supportedMediaTypes);, +	 * Generate a multipart boundary., +	 * <p>The default implementation returns a random boundary., +	 * Can be overridden in subclasses., +	 * Return the filename of the given multipart part. This value will be used for the, +	 * {@code Content-Disposition} header., +	 * <p>The default implementation returns {@link Resource#getFilename()} if the part is a, +	 * {@code Resource}, and {@code null} in other cases. Can be overridden in subclasses., +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +	protected Class predictBeanType(String beanName, RootBeanDefinition mbd, Class... typesToMatch) {, +++ b/org.springframework.web/src/main/java/org/springframework/http/HttpHeaders.java, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java, +, +	 * Add a message body converter. Such a converters is used to convert objects to MIME parts., +	 */, +	public final void addPartConverter(HttpMessageConverter<?> partConverter) {, +		Assert.notNull(partConverter, "'partConverter' must not be NULL");, +		this.partConverters.add(partConverter);, +	}, +, +	/**, +		return Collections.unmodifiableList(this.supportedMediaTypes);, +	 * Generate a multipart boundary., +	 * <p>The default implementation returns a random boundary., +	 * Can be overridden in subclasses., +	 * Return the filename of the given multipart part. This value will be used for the, +	 * {@code Content-Disposition} header., +	 * <p>The default implementation returns {@link Resource#getFilename()} if the part is a, +	 * {@code Resource}, and {@code null} in other cases. Can be overridden in subclasses., +, +++ b/org.springframework.web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java, +, +	 * Construct a new instance of the ServletServerHttpRequest based on the given {@link HttpServletRequest}., +	 * @param servletRequest the servlet request, +, +		return this.servletRequest;, +			return new URI(this.servletRequest.getScheme(), null, this.servletRequest.getServerName(),, +					this.servletRequest.getServerPort(), this.servletRequest.getRequestURI(),, +					this.servletRequest.getQueryString(), null);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +	protected Class predictBeanType(String beanName, RootBeanDefinition mbd, Class... typesToMatch) {, +++ b/org.springframework.web/src/main/java/org/springframework/http/HttpHeaders.java, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java, +, +	 * Add a message body converter. Such a converters is used to convert objects to MIME parts., +	 */, +	public final void addPartConverter(HttpMessageConverter<?> partConverter) {, +		Assert.notNull(partConverter, "'partConverter' must not be NULL");, +		this.partConverters.add(partConverter);, +	}, +, +	/**, +		return Collections.unmodifiableList(this.supportedMediaTypes);, +	 * Generate a multipart boundary., +	 * <p>The default implementation returns a random boundary., +	 * Can be overridden in subclasses., +	 * Return the filename of the given multipart part. This value will be used for the, +	 * {@code Content-Disposition} header., +	 * <p>The default implementation returns {@link Resource#getFilename()} if the part is a, +	 * {@code Resource}, and {@code null} in other cases. Can be overridden in subclasses., +, +++ b/org.springframework.web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java, +, +	 * Construct a new instance of the ServletServerHttpRequest based on the given {@link HttpServletRequest}., +	 * @param servletRequest the servlet request, +, +		return this.servletRequest;, +			return new URI(this.servletRequest.getScheme(), null, this.servletRequest.getServerName(),, +					this.servletRequest.getServerPort(), this.servletRequest.getRequestURI(),, +					this.servletRequest.getQueryString(), null);, +++ b/org.springframework.web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java, +	 * @param servletResponse the servlet response, +	 * Return the {@code HttpServletResponse} this object is based on., +		return this.servletResponse;, +		return (this.headersWritten ? HttpHeaders.readOnlyHttpHeaders(this.headers) : this.headers);, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +	protected Class predictBeanType(String beanName, RootBeanDefinition mbd, Class... typesToMatch) {, +++ b/org.springframework.web/src/main/java/org/springframework/http/HttpHeaders.java, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java, +, +	 * Add a message body converter. Such a converters is used to convert objects to MIME parts.]