[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java, +import org.springframework.core.io.buffer.DataBufferUtils;, +			Flux<DataBuffer> body = request.getBody().doOnNext(buffer -> {, +				DataBufferUtils.release(buffer);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java, +import org.springframework.core.io.buffer.DataBufferUtils;, +			Flux<DataBuffer> body = request.getBody().doOnNext(buffer -> {, +				DataBufferUtils.release(buffer);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/freemarker/FreeMarkerView.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.core.io.buffer.PooledDataBuffer;, +		return exchange.getResponse().writeWith(Mono, +				.fromCallable(() -> {, +						return dataBuffer;, +						throw new IllegalStateException(message, ex);, +						throw ex;, +				}), +				.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java, +import org.springframework.core.io.buffer.DataBufferUtils;, +			Flux<DataBuffer> body = request.getBody().doOnNext(buffer -> {, +				DataBufferUtils.release(buffer);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/freemarker/FreeMarkerView.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.core.io.buffer.PooledDataBuffer;, +		return exchange.getResponse().writeWith(Mono, +				.fromCallable(() -> {, +						return dataBuffer;, +						throw new IllegalStateException(message, ex);, +						throw ex;, +				}), +				.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/script/ScriptTemplateView.java, + * Copyright 2002-2019 the original author or authors., +		return exchange.getResponse().writeWith(Mono.fromCallable(() -> {, +				return exchange.getResponse().bufferFactory().wrap(bytes); // just wrapping, no allocation, +		}));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java, +import org.springframework.core.io.buffer.DataBufferUtils;, +			Flux<DataBuffer> body = request.getBody().doOnNext(buffer -> {, +				DataBufferUtils.release(buffer);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/freemarker/FreeMarkerView.java, + * Copyright 2002-2019 the original author or authors., +import org.springframework.core.io.buffer.PooledDataBuffer;, +		return exchange.getResponse().writeWith(Mono, +				.fromCallable(() -> {, +						return dataBuffer;, +						throw new IllegalStateException(message, ex);, +						throw ex;, +				}), +				.doOnDiscard(PooledDataBuffer.class, DataBufferUtils::release));, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/view/script/ScriptTemplateView.java, + * Copyright 2002-2019 the original author or authors., +		return exchange.getResponse().writeWith(Mono.fromCallable(() -> {, +				return exchange.getResponse().bufferFactory().wrap(bytes); // just wrapping, no allocation, +		}));, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/view/ZeroDemandResponse.java, +/*, + * Copyright 2002-2019 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      https://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +package org.springframework.web.reactive.result.view;, +, +import java.util.function.Supplier;, +, +import io.netty.buffer.PooledByteBufAllocator;, +import org.reactivestreams.Publisher;, +import org.reactivestreams.Subscription;, +import reactor.core.publisher.BaseSubscriber;, +import reactor.core.publisher.Mono;, +, +import org.springframework.core.io.buffer.DataBuffer;, +import org.springframework.core.io.buffer.DataBufferFactory;, +import org.springframework.core.io.buffer.LeakAwareDataBufferFactory;, +import org.springframework.core.io.buffer.NettyDataBufferFactory;, +import org.springframework.http.HttpHeaders;, +import org.springframework.http.HttpStatus;, +import org.springframework.http.ResponseCookie;, +import org.springframework.http.server.reactive.ServerHttpResponse;, +import org.springframework.util.MultiValueMap;, +, +/**, + * Response that subscribes to the writes source but never posts demand and also, + * offers method to then cancel the subscription, and check of leaks in the end., + *, + * @author Rossen Stoyanchev, + */, +public class ZeroDemandResponse implements ServerHttpResponse {, +]