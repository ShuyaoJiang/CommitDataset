[+++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, + * Copyright 2002-2015 the original author or authors., +		return toValueWrapper(element);, +		return toValueWrapper(existingElement);, +	private ValueWrapper toValueWrapper(Element element) {, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, + * Copyright 2002-2015 the original author or authors., +		return toValueWrapper(element);, +		return toValueWrapper(existingElement);, +	private ValueWrapper toValueWrapper(Element element) {, +++ b/spring-context-support/src/main/java/org/springframework/cache/guava/GuavaCache.java, +import org.springframework.cache.support.AbstractValueAdaptingCache;, + * Spring {@link org.springframework.cache.Cache} adapter implementation, + * on top of a Guava {@link com.google.common.cache.Cache} instance., +public class GuavaCache extends AbstractValueAdaptingCache {, +		super(allowNullValues);, +				return toValueWrapper(value);, +		return super.get(key);, +	protected Object lookup(Object key) {, +		return this.cache.getIfPresent(key);, +			return (callable.called ? null : toValueWrapper(result));, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, + * Copyright 2002-2015 the original author or authors., +		return toValueWrapper(element);, +		return toValueWrapper(existingElement);, +	private ValueWrapper toValueWrapper(Element element) {, +++ b/spring-context-support/src/main/java/org/springframework/cache/guava/GuavaCache.java, +import org.springframework.cache.support.AbstractValueAdaptingCache;, + * Spring {@link org.springframework.cache.Cache} adapter implementation, + * on top of a Guava {@link com.google.common.cache.Cache} instance., +public class GuavaCache extends AbstractValueAdaptingCache {, +		super(allowNullValues);, +				return toValueWrapper(value);, +		return super.get(key);, +	protected Object lookup(Object key) {, +		return this.cache.getIfPresent(key);, +			return (callable.called ? null : toValueWrapper(result));, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheCache.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.cache.support.AbstractValueAdaptingCache;, +public class JCacheCache extends AbstractValueAdaptingCache {, +		super(allowNullValues);, +	protected Object lookup(Object key) {, +		return this.cache.get(key);, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, + * Copyright 2002-2015 the original author or authors., +		return toValueWrapper(element);, +		return toValueWrapper(existingElement);, +	private ValueWrapper toValueWrapper(Element element) {, +++ b/spring-context-support/src/main/java/org/springframework/cache/guava/GuavaCache.java, +import org.springframework.cache.support.AbstractValueAdaptingCache;, + * Spring {@link org.springframework.cache.Cache} adapter implementation, + * on top of a Guava {@link com.google.common.cache.Cache} instance., +public class GuavaCache extends AbstractValueAdaptingCache {, +		super(allowNullValues);, +				return toValueWrapper(value);, +		return super.get(key);, +	protected Object lookup(Object key) {, +		return this.cache.getIfPresent(key);, +			return (callable.called ? null : toValueWrapper(result));, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheCache.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.cache.support.AbstractValueAdaptingCache;, +public class JCacheCache extends AbstractValueAdaptingCache {, +		super(allowNullValues);, +	protected Object lookup(Object key) {, +		return this.cache.get(key);, +++ b/spring-context/src/main/java/org/springframework/cache/concurrent/ConcurrentMapCache.java, +import org.springframework.cache.support.AbstractValueAdaptingCache;, + * Simple {@link org.springframework.cache.Cache} implementation based on the, + * core JDK {@code java.util.concurrent} package., +public class ConcurrentMapCache extends AbstractValueAdaptingCache {, +		super(allowNullValues);, +	protected Object lookup(Object key) {, +		return this.store.get(key);, +		return toValueWrapper(existing);, +++ b/spring-context-support/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, + * Copyright 2002-2015 the original author or authors., +		return toValueWrapper(element);, +		return toValueWrapper(existingElement);, +	private ValueWrapper toValueWrapper(Element element) {, +++ b/spring-context-support/src/main/java/org/springframework/cache/guava/GuavaCache.java, +import org.springframework.cache.support.AbstractValueAdaptingCache;, + * Spring {@link org.springframework.cache.Cache} adapter implementation, + * on top of a Guava {@link com.google.common.cache.Cache} instance., +public class GuavaCache extends AbstractValueAdaptingCache {, +		super(allowNullValues);, +				return toValueWrapper(value);, +		return super.get(key);, +	protected Object lookup(Object key) {, +		return this.cache.getIfPresent(key);, +			return (callable.called ? null : toValueWrapper(result));, +++ b/spring-context-support/src/main/java/org/springframework/cache/jcache/JCacheCache.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.cache.support.AbstractValueAdaptingCache;, +public class JCacheCache extends AbstractValueAdaptingCache {, +		super(allowNullValues);, +	protected Object lookup(Object key) {, +		return this.cache.get(key);, +++ b/spring-context/src/main/java/org/springframework/cache/concurrent/ConcurrentMapCache.java]