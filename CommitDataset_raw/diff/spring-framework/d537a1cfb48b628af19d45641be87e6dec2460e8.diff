[+++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorResourceFactory.java, +import java.util.function.Consumer;, +import java.util.function.Supplier;, +, +	private boolean useGlobalResources = true;, +, +	@Nullable, +	private Consumer<HttpResources> globalResourcesConsumer;, +, +, +	private Supplier<ConnectionProvider> connectionProviderSupplier = () -> ConnectionProvider.elastic("http");, +, +	private Supplier<LoopResources> loopResourcesSupplier = () -> LoopResources.create("reactor-http");, +, +, +	private boolean manageConnectionProvider = false;, +, +	private boolean manageLoopResources = false;, +	 * Whether to use global Reactor Netty resources via {@link HttpResources}., +	 * <p>Default is "true" in which case this factory initializes and stops the, +	 * global Reactor Netty resources within Spring's {@code ApplicationContext}, +	 * lifecycle. If set to "false" the factory manages its resources independent, +	 * of the global ones., +	 * @param useGlobalResources whether to expose and manage the global resources, +	 * @see #addGlobalResourcesConsumer(Consumer), +	public void setUseGlobalResources(boolean useGlobalResources) {, +		this.useGlobalResources = useGlobalResources;, +	 * Add a Consumer for configuring the global Reactor Netty resources on, +	 * startup. When this option is used, {@link #setUseGlobalResources} is also, +	 * enabled., +	 * @param consumer the consumer to apply, +	 * @see #setUseGlobalResources(boolean), +	 */, +	public void addGlobalResourcesConsumer(Consumer<HttpResources> consumer) {, +		this.useGlobalResources = true;, +		this.globalResourcesConsumer = this.globalResourcesConsumer != null ?, +				this.globalResourcesConsumer.andThen(consumer) : consumer;, +	}, +, +	/**, +	 * Use this option when you don't want to participate in global resources and, +	 * you want to customize the creation of the managed {@code ConnectionProvider}., +	 * <p>By default, {@code ConnectionProvider.elastic("http")} is used., +	 * <p>Note that this option is ignored if {@code userGlobalResources=false} or, +	 * {@link #setConnectionProvider(ConnectionProvider)} is set., +	 * @param supplier the supplier to use, +	 */, +	public void setConnectionProviderSupplier(@Nullable Supplier<ConnectionProvider> supplier) {, +		this.connectionProviderSupplier = supplier;, +	}, +, +	/**, +	 * Use this option when you don't want to participate in global resources and, +	 * you want to customize the creation of the managed {@code LoopResources}., +	 * <p>By default, {@code LoopResources.create("reactor-http")} is used., +	 * <p>Note that this option is ignored if {@code userGlobalResources=false} or, +	 * {@link #setLoopResources(LoopResources)} is set., +	 * @param supplier the supplier to use, +	 */, +	public void setLoopResourcesSupplier(@Nullable Supplier<LoopResources> supplier) {, +		this.loopResourcesSupplier = supplier;, +	}, +, +	/**, +	 * Use this option when you want to provide an externally managed, +	 * {@link ConnectionProvider} instance., +	 * @param connectionProvider the connection provider to use as is, +	 * Use this option when you want to provide an externally managed, +	 * {@link LoopResources} instance., +	 * @param loopResources the loop resources to use as is, +	public boolean isUseGlobalResources() {, +		return this.useGlobalResources;, +		Assert.notNull(this.connectionProvider, "ConnectionProvider not initialized yet via InitializingBean.");, +		Assert.notNull(this.loopResources, "LoopResources not initialized yet via InitializingBean.");, +		if (this.useGlobalResources) {, +			Assert.isTrue(this.loopResources == null && this.connectionProvider == null,, +					"'useGlobalResources' is mutually exclusive with explicitly configured resources.");, +			HttpResources httpResources = HttpResources.get();, +			if (this.globalResourcesConsumer != null) {, +				this.globalResourcesConsumer.accept(httpResources);, +			}, +		}, +		else {, +				this.manageLoopResources = true;, +				this.loopResources = this.loopResourcesSupplier.get();, +				this.manageConnectionProvider = true;, +				this.connectionProvider = this.connectionProviderSupplier.get();, +		if (this.useGlobalResources) {, +				if (provider != null && this.manageConnectionProvider) {, +				if (resources != null && this.manageLoopResources) {, +++ b/spring-web/src/main/java/org/springframework/http/client/reactive/ReactorResourceFactory.java, +import java.util.function.Consumer;, +import java.util.function.Supplier;, +, +	private boolean useGlobalResources = true;, +, +	@Nullable, +	private Consumer<HttpResources> globalResourcesConsumer;, +, +]