[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/PlaceholderConfigurerSupport.java, + * Copyright 2002-2016 the original author or authors., +	protected boolean trimValues = false;, +, +	 * Specify whether to trim resolved values before applying them,, +	 * removing superfluous whitespace from the beginning and end., +	 * <p>Default is {@code false}., +	 * @since 4.3, +	 */, +	public void setTrimValues(boolean trimValues) {, +		this.trimValues = trimValues;, +	}, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/PlaceholderConfigurerSupport.java, + * Copyright 2002-2016 the original author or authors., +	protected boolean trimValues = false;, +, +	 * Specify whether to trim resolved values before applying them,, +	 * removing superfluous whitespace from the beginning and end., +	 * <p>Default is {@code false}., +	 * @since 4.3, +	 */, +	public void setTrimValues(boolean trimValues) {, +		this.trimValues = trimValues;, +	}, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.java, + * Copyright 2002-2016 the original author or authors., +			String resolved = this.helper.replacePlaceholders(strVal, this.resolver);, +			if (trimValues) {, +				resolved = resolved.trim();, +			}, +			return (resolved.equals(nullValue) ? null : resolved);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/PlaceholderConfigurerSupport.java, + * Copyright 2002-2016 the original author or authors., +	protected boolean trimValues = false;, +, +	 * Specify whether to trim resolved values before applying them,, +	 * removing superfluous whitespace from the beginning and end., +	 * <p>Default is {@code false}., +	 * @since 4.3, +	 */, +	public void setTrimValues(boolean trimValues) {, +		this.trimValues = trimValues;, +	}, +, +	/**, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurer.java, + * Copyright 2002-2016 the original author or authors., +			String resolved = this.helper.replacePlaceholders(strVal, this.resolver);, +			if (trimValues) {, +				resolved = resolved.trim();, +			}, +			return (resolved.equals(nullValue) ? null : resolved);, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/config/PropertyPlaceholderConfigurerTests.java, + * Copyright 2002-2016 the original author or authors., +, +, +	@Test, +	public void trimValuesIsOffByDefault() {, +		PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer();, +		getModifiableSystemEnvironment().put("my.name", " myValue  ");, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.registerBeanDefinition("testBean", rootBeanDefinition(TestBean.class), +				.addPropertyValue("name", "${my.name}"), +				.getBeanDefinition());, +		ppc.postProcessBeanFactory(bf);, +		assertThat(bf.getBean(TestBean.class).getName(), equalTo(" myValue  "));, +		getModifiableSystemEnvironment().remove("my.name");, +	}, +, +	@Test, +	public void trimValuesIsApplied() {, +		PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer();, +		ppc.setTrimValues(true);, +		getModifiableSystemEnvironment().put("my.name", " myValue  ");, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		bf.registerBeanDefinition("testBean", rootBeanDefinition(TestBean.class), +				.addPropertyValue("name", "${my.name}"), +				.getBeanDefinition());, +		ppc.postProcessBeanFactory(bf);, +		assertThat(bf.getBean(TestBean.class).getName(), equalTo("myValue"));, +		getModifiableSystemEnvironment().remove("my.name");, +	}, +, +				}, +				catch (Exception ex) {, +		}, +		catch (Exception ex) {, +			throw new RuntimeException(ex);, +		}, +		catch (NoSuchFieldException ex) {, +		}, +		catch (Exception ex) {, +			throw new RuntimeException(ex);, +		}, +		catch (NoSuchFieldException ex) {, +		}]