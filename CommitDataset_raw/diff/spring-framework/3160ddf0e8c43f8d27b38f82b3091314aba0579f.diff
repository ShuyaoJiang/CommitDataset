[+++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriTemplate.java, +			Object uriVariable = uriVariableValues[i++];, +			String replacement = Matcher.quoteReplacement(uriVariable != null ? uriVariable.toString() : "");, +			matcher.appendReplacement(buffer, replacement);, +++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriTemplate.java, +			Object uriVariable = uriVariableValues[i++];, +			String replacement = Matcher.quoteReplacement(uriVariable != null ? uriVariable.toString() : "");, +			matcher.appendReplacement(buffer, replacement);, +++ b/org.springframework.web/src/test/java/org/springframework/web/client/RestTemplateTests.java, +import java.util.HashMap;, +	public void varArgsNullTemplateVariable() throws Exception {, +		expect(requestFactory.createRequest(new URI("http://example.com/-foo"), HttpMethod.GET)), +				.andReturn(request);, +		expect(request.execute()).andReturn(response);, +		expect(errorHandler.hasError(response)).andReturn(false);, +		response.close();, +, +		replayMocks();, +, +		template.execute("http://example.com/{first}-{last}", HttpMethod.GET, null, null, null, "foo");, +, +		verifyMocks();, +	}, +, +	@Test, +	public void mapNullTemplateVariable() throws Exception {, +		expect(requestFactory.createRequest(new URI("http://example.com/-foo"), HttpMethod.GET)), +				.andReturn(request);, +		expect(request.execute()).andReturn(response);, +		expect(errorHandler.hasError(response)).andReturn(false);, +		response.close();, +, +		replayMocks();, +, +		Map<String, String> vars = new HashMap<String, String>(2);, +		vars.put("first", null);, +		vars.put("last", "foo");, +		template.execute("http://example.com/{first}-{last}", HttpMethod.GET, null, null, vars);, +, +		verifyMocks();, +	}, +, +	@Test]