[+++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.java, +		if (this.beanFactory != null) {, +			if (this.beanFactory.isSingleton(name)) {, +				// Rely on singleton semantics provided by the factory -> no local lock., +				return null;, +			}, +			else if (this.beanFactory instanceof ConfigurableBeanFactory) {, +				// No singleton guarantees from the factory -> let's lock locally but, +				// reuse the factory's singleton lock, just in case a lazy dependency, +				// of our advice bean happens to trigger the singleton lock implicitly..., +				return ((ConfigurableBeanFactory) this.beanFactory).getSingletonMutex();, +			}, +		}, +		return this;, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.java, +		if (this.beanFactory != null) {, +			if (this.beanFactory.isSingleton(name)) {, +				// Rely on singleton semantics provided by the factory -> no local lock., +				return null;, +			}, +			else if (this.beanFactory instanceof ConfigurableBeanFactory) {, +				// No singleton guarantees from the factory -> let's lock locally but, +				// reuse the factory's singleton lock, just in case a lazy dependency, +				// of our advice bean happens to trigger the singleton lock implicitly..., +				return ((ConfigurableBeanFactory) this.beanFactory).getSingletonMutex();, +			}, +		}, +		return this;, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/LazySingletonAspectInstanceFactoryDecorator.java, +			Object mutex = this.maaif.getAspectCreationMutex();, +			if (mutex == null) {, +				this.materialized = this.maaif.getAspectInstance();, +			}, +			else {, +				synchronized (mutex) {, +		}, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.java, +		if (this.beanFactory != null) {, +			if (this.beanFactory.isSingleton(name)) {, +				// Rely on singleton semantics provided by the factory -> no local lock., +				return null;, +			}, +			else if (this.beanFactory instanceof ConfigurableBeanFactory) {, +				// No singleton guarantees from the factory -> let's lock locally but, +				// reuse the factory's singleton lock, just in case a lazy dependency, +				// of our advice bean happens to trigger the singleton lock implicitly..., +				return ((ConfigurableBeanFactory) this.beanFactory).getSingletonMutex();, +			}, +		}, +		return this;, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/LazySingletonAspectInstanceFactoryDecorator.java, +			Object mutex = this.maaif.getAspectCreationMutex();, +			if (mutex == null) {, +				this.materialized = this.maaif.getAspectInstance();, +			}, +			else {, +				synchronized (mutex) {, +		}, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/MetadataAwareAspectInstanceFactory.java, +	 * @return the mutex object (may be {@code null} for no mutex to use), +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/BeanFactoryAspectInstanceFactory.java, +		if (this.beanFactory != null) {, +			if (this.beanFactory.isSingleton(name)) {, +				// Rely on singleton semantics provided by the factory -> no local lock., +				return null;, +			}, +			else if (this.beanFactory instanceof ConfigurableBeanFactory) {, +				// No singleton guarantees from the factory -> let's lock locally but, +				// reuse the factory's singleton lock, just in case a lazy dependency, +				// of our advice bean happens to trigger the singleton lock implicitly..., +				return ((ConfigurableBeanFactory) this.beanFactory).getSingletonMutex();, +			}, +		}, +		return this;, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/LazySingletonAspectInstanceFactoryDecorator.java, +			Object mutex = this.maaif.getAspectCreationMutex();, +			if (mutex == null) {, +				this.materialized = this.maaif.getAspectInstance();, +			}, +			else {, +				synchronized (mutex) {, +		}, +++ b/spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/MetadataAwareAspectInstanceFactory.java, +	 * @return the mutex object (may be {@code null} for no mutex to use), +++ b/spring-aop/src/main/java/org/springframework/aop/support/AbstractBeanFactoryPointcutAdvisor.java, +	private transient volatile Advice advice;, +		Advice advice = this.advice;, +		if (advice != null || this.adviceBeanName == null) {, +			return advice;, +		}, +, +		if (this.beanFactory.isSingleton(this.adviceBeanName)) {, +			// Rely on singleton semantics provided by the factory., +			advice = this.beanFactory.getBean(this.adviceBeanName, Advice.class);, +			this.advice = advice;, +			return advice;, +		}, +		else {, +			// No singleton guarantees from the factory -> let's lock locally but, +			// reuse the factory's singleton lock, just in case a lazy dependency]