[+++ b/spring-web-reactive/src/main/java/org/springframework/core/convert/support/ReactorToRxJava1Converter.java, +import reactor.core.converter.RxJava1CompletableConverter;, +import rx.Completable;, +		pairs.add(new GenericConverter.ConvertiblePair(Mono.class, Completable.class));, +		pairs.add(new GenericConverter.ConvertiblePair(Completable.class, Mono.class));, +		else if (Completable.class.isAssignableFrom(sourceType.getType())) {, +			return RxJava1CompletableConverter.from((Completable) source);, +		}, +		else if (Completable.class.isAssignableFrom(targetType.getType())) {, +			return RxJava1CompletableConverter.from((Publisher) source);, +		}, +++ b/spring-web-reactive/src/main/java/org/springframework/core/convert/support/ReactorToRxJava1Converter.java, +import reactor.core.converter.RxJava1CompletableConverter;, +import rx.Completable;, +		pairs.add(new GenericConverter.ConvertiblePair(Mono.class, Completable.class));, +		pairs.add(new GenericConverter.ConvertiblePair(Completable.class, Mono.class));, +		else if (Completable.class.isAssignableFrom(sourceType.getType())) {, +			return RxJava1CompletableConverter.from((Completable) source);, +		}, +		else if (Completable.class.isAssignableFrom(targetType.getType())) {, +			return RxJava1CompletableConverter.from((Publisher) source);, +		}, +++ b/spring-web-reactive/src/test/java/org/springframework/core/convert/support/ReactorToRxJava1ConverterTests.java, +import rx.Completable;, +		assertTrue(this.conversionService.canConvert(Mono.class, Completable.class));, +		assertTrue(this.conversionService.canConvert(Completable.class, Mono.class));, +, +		assertFalse(this.conversionService.canConvert(Flux.class, Completable.class));, +		assertFalse(this.conversionService.canConvert(Completable.class, Flux.class));, +]