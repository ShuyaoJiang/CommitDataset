[+++ b/org.springframework.test/src/main/java/org/springframework/test/util/ReflectionTestUtils.java, + * Copyright 2002-2011 the original author or authors., +import org.springframework.util.MethodInvoker;, +import org.springframework.util.ObjectUtils;, + * {@code ReflectionTestUtils} is a collection of reflection-based utility, + * methods for use in unit and integration testing scenarios., + * , + * <p>There are often times when it would be beneficial to be able to set a, + * non-{@code public} field, invoke a non-{@code public} setter method, or, + * invoke a non-{@code public} <em>configuration</em> or <em>lifecycle</em>, + * callback method when testing code involving, for example:, + * , + * {@code private} or {@code protected} field access as opposed to, + * {@code public} setter methods for properties in a domain entity.</li>, + * injection for {@code private} or {@code protected} fields, setter methods,, + * and configuration methods.</li>, + * <li>Use of annotations such as {@link javax.annotation.PostConstruct @PostConstruct}, + * and {@link javax.annotation.PreDestroy @PreDestroy} for lifecycle callback, + * methods.</li>, +	 * Set the {@link Field field} with the given {@code name} on the provided, +	 * {@link Object target object} to the supplied {@code value}., +	 * , +	 * <p>This method traverses the class hierarchy in search of the desired field., +	 * In addition, an attempt will be made to make non-{@code public} fields, +	 * <em>accessible</em>, thus allowing one to set {@code protected},, +	 * {@code private}, and <em>package-private</em> fields., +	 * Set the {@link Field field} with the given {@code name} on the provided, +	 * {@link Object target object} to the supplied {@code value}., +	 * , +	 * <p>This method traverses the class hierarchy in search of the desired, +	 * field. In addition, an attempt will be made to make non-{@code public}, +	 * fields <em>accessible</em>, thus allowing one to set {@code protected},, +	 * {@code private}, and <em>package-private</em> fields., +	 * @param type the type of the field (may be {@code null}), +		Assert.notNull(field, "Could not find field [" + name + "] on target [" + target + "]");, +	 * Get the field with the given {@code name} from the provided target object., +	 * , +	 * <p>This method traverses the class hierarchy in search of the desired, +	 * field. In addition, an attempt will be made to make non-{@code public}, +	 * fields <em>accessible</em>, thus allowing one to get {@code protected},, +	 * {@code private}, and <em>package-private</em> fields., +		Assert.notNull(field, "Could not find field [" + name + "] on target [" + target + "]");, +	 * Invoke the setter method with the given {@code name} on the supplied, +	 * target object with the supplied {@code value}., +	 * , +	 * <p>This method traverses the class hierarchy in search of the desired, +	 * method. In addition, an attempt will be made to make non-{@code public}, +	 * methods <em>accessible</em>, thus allowing one to invoke {@code protected},, +	 * {@code private}, and <em>package-private</em> setter methods., +	 * , +	 * <p>In addition, this method supports JavaBean-style <em>property</em>, +	 * names. For example, if you wish to set the {@code name} property on the, +	 * Invoke the setter method with the given {@code name} on the supplied, +	 * target object with the supplied {@code value}., +	 * , +	 * <p>This method traverses the class hierarchy in search of the desired, +	 * method. In addition, an attempt will be made to make non-{@code public}, +	 * methods <em>accessible</em>, thus allowing one to invoke {@code protected},, +	 * {@code private}, and <em>package-private</em> setter methods., +	 * , +	 * <p>In addition, this method supports JavaBean-style <em>property</em>, +	 * names. For example, if you wish to set the {@code name} property on the, +		Assert.hasText(name, "Method name must not be empty");, +		Assert.notNull(method, "Could not find setter method [" + setterMethodName + "] on target [" + target, +				+ "] with parameter type [" + type + "]");, +	 * Invoke the getter method with the given {@code name} on the supplied, +	 * target object with the supplied {@code value}., +	 * , +	 * <p>This method traverses the class hierarchy in search of the desired, +	 * method. In addition, an attempt will be made to make non-{@code public}, +	 * methods <em>accessible</em>, thus allowing one to invoke {@code protected},, +	 * {@code private}, and <em>package-private</em> getter methods., +	 * , +	 * <p>In addition, this method supports JavaBean-style <em>property</em>, +	 * names. For example, if you wish to get the {@code name} property on the, +		Assert.hasText(name, "Method name must not be empty");, +		Assert.notNull(method, "Could not find getter method [" + getterMethodName + "] on target [" + target + "]");, +	/**, +	 * Invoke the method with the given {@code name} on the supplied target, +	 * object with the supplied arguments., +	 * , +	 * <p>This method traverses the class hierarchy in search of the desired, +	 * method. In addition, an attempt will be made to make non-{@code public}, +	 * methods <em>accessible</em>, thus allowing one to invoke {@code protected},, +	 * {@code private}, and <em>package-private</em> methods., +	 * , +	 * @param target the target object on which to invoke the specified method, +	 * @param name the name of the method to invoke, +	 * @param args the arguments to provide to the method, +	 * @return the invocation result, if any, +	 * @see MethodInvoker, +	 * @see ReflectionUtils#makeAccessible(Method), +	 * @see ReflectionUtils#invokeMethod(Method, Object, Object[]), +	 * @see ReflectionUtils#handleReflectionException(Exception), +	 */, +	@SuppressWarnings("unchecked"), +	public static <T> T invokeMethod(Object target, String name, Object... args) {, +		Assert.notNull(target, "Target object must not be null");, +		Assert.hasText(name, "Method name must not be empty");, +]