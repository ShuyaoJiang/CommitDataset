[+++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +	 * Private constructor used to create a new {@link ResolvableType} for resolution purposes., +	/**, +	 * Private constructor used to create a new {@link ResolvableType} for cache key purposes., +	 */, +	private ResolvableType(Type type, TypeProvider typeProvider, VariableResolver variableResolver) {, +		this.type = type;, +		this.typeProvider = typeProvider;, +		this.variableResolver = variableResolver;, +		this.componentType = null;, +		this.resolved = null;, +	}, +, +		return forMethodParameter(methodParameter, null);, +	}, +, +	/**, +	 * Return a {@link ResolvableType} for the specified {@link MethodParameter},, +	 * overriding the target type to resolve with a specific given type., +	 * @param methodParameter the source method parameter (must not be {@code null}), +	 * @param targetType the type to resolve (a part of the method parameter's type), +	 * @return a {@link ResolvableType} for the specified method parameter, +	 * @see #forMethodParameter(Method, int), +	 */, +	public static ResolvableType forMethodParameter(MethodParameter methodParameter, Type targetType) {, +		return forType(targetType, new MethodParameterTypeProvider(methodParameter),, +	 * Return a {@link ResolvableType} for the specified {@link Type}., +	 * Note: The resulting {@link ResolvableType} may not be {@link Serializable}., +	 * owner type. Note: The resulting {@link ResolvableType} may not be {@link Serializable}., +		ResolvableType key = new ResolvableType(type, typeProvider, variableResolver);, +			resolvableType = new ResolvableType(type, typeProvider, variableResolver, null);, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +	 * Private constructor used to create a new {@link ResolvableType} for resolution purposes., +	/**, +	 * Private constructor used to create a new {@link ResolvableType} for cache key purposes., +	 */, +	private ResolvableType(Type type, TypeProvider typeProvider, VariableResolver variableResolver) {, +		this.type = type;, +		this.typeProvider = typeProvider;, +		this.variableResolver = variableResolver;, +		this.componentType = null;, +		this.resolved = null;, +	}, +, +		return forMethodParameter(methodParameter, null);, +	}, +, +	/**, +	 * Return a {@link ResolvableType} for the specified {@link MethodParameter},, +	 * overriding the target type to resolve with a specific given type., +	 * @param methodParameter the source method parameter (must not be {@code null}), +	 * @param targetType the type to resolve (a part of the method parameter's type), +	 * @return a {@link ResolvableType} for the specified method parameter, +	 * @see #forMethodParameter(Method, int), +	 */, +	public static ResolvableType forMethodParameter(MethodParameter methodParameter, Type targetType) {, +		return forType(targetType, new MethodParameterTypeProvider(methodParameter),, +	 * Return a {@link ResolvableType} for the specified {@link Type}., +	 * Note: The resulting {@link ResolvableType} may not be {@link Serializable}., +	 * owner type. Note: The resulting {@link ResolvableType} may not be {@link Serializable}., +		ResolvableType key = new ResolvableType(type, typeProvider, variableResolver);, +			resolvableType = new ResolvableType(type, typeProvider, variableResolver, null);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.java, +			Class<T> targetClass = (Class<T>), +					ResolvableType.forMethodParameter(methodParam, targetType).resolve(Object.class);, +		throw new HttpMediaTypeNotSupportedException(contentType, this.allSupportedMediaTypes);, +++ b/spring-core/src/main/java/org/springframework/core/ResolvableType.java, +	 * Private constructor used to create a new {@link ResolvableType} for resolution purposes., +	/**, +	 * Private constructor used to create a new {@link ResolvableType} for cache key purposes., +	 */, +	private ResolvableType(Type type, TypeProvider typeProvider, VariableResolver variableResolver) {, +		this.type = type;, +		this.typeProvider = typeProvider;, +		this.variableResolver = variableResolver;, +		this.componentType = null;, +		this.resolved = null;, +	}, +, +		return forMethodParameter(methodParameter, null);, +	}, +, +	/**, +	 * Return a {@link ResolvableType} for the specified {@link MethodParameter},, +	 * overriding the target type to resolve with a specific given type., +	 * @param methodParameter the source method parameter (must not be {@code null}), +	 * @param targetType the type to resolve (a part of the method parameter's type), +	 * @return a {@link ResolvableType} for the specified method parameter, +	 * @see #forMethodParameter(Method, int), +	 */, +	public static ResolvableType forMethodParameter(MethodParameter methodParameter, Type targetType) {, +		return forType(targetType, new MethodParameterTypeProvider(methodParameter),, +	 * Return a {@link ResolvableType} for the specified {@link Type}., +	 * Note: The resulting {@link ResolvableType} may not be {@link Serializable}., +	 * owner type. Note: The resulting {@link ResolvableType} may not be {@link Serializable}., +		ResolvableType key = new ResolvableType(type, typeProvider, variableResolver);, +			resolvableType = new ResolvableType(type, typeProvider, variableResolver, null);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.java, +			Class<T> targetClass = (Class<T>), +					ResolvableType.forMethodParameter(methodParam, targetType).resolve(Object.class);]