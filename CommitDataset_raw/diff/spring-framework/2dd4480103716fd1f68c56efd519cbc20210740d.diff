[+++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +		String encodedHost;, +		if(StringUtils.hasLength(this.host) && this.host.startsWith("[")) {, +			encodedHost = encodeUriComponent(this.host, encoding, Type.HOST_IPV6);, +		} else {, +			encodedHost = encodeUriComponent(this.host, encoding, Type.HOST);, +		}, +, +		HOST_IPV6 {, +			@Override, +			public boolean isAllowed(int c) {, +				return isUnreserved(c) || isSubDelimiter(c) || '[' == c || ']' == c || ':' == c;, +			}, +		},, +++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +		String encodedHost;, +		if(StringUtils.hasLength(this.host) && this.host.startsWith("[")) {, +			encodedHost = encodeUriComponent(this.host, encoding, Type.HOST_IPV6);, +		} else {, +			encodedHost = encodeUriComponent(this.host, encoding, Type.HOST);, +		}, +, +		HOST_IPV6 {, +			@Override, +			public boolean isAllowed(int c) {, +				return isUnreserved(c) || isSubDelimiter(c) || '[' == c || ']' == c || ':' == c;, +			}, +		},, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +	private static final String HOST_IPv4_PATTERN = "[^\\[/?#:]*";, +, +	private static final String HOST_IPV6_PATTERN = "\\[[\\p{XDigit}\\:\\.]*[%\\p{Alnum}]*\\]";, +, +	private static final String HOST_PATTERN = "("+HOST_IPV6_PATTERN + "|" + HOST_IPv4_PATTERN + ")";, +			String host = m.group(5);, +			if(StringUtils.hasLength(scheme) && !StringUtils.hasLength(host)) {, +				throw new IllegalArgumentException("[" + httpUrl + "] is not a valid HTTP URL");, +			}, +			builder.host(host);, +++ b/spring-web/src/main/java/org/springframework/web/util/HierarchicalUriComponents.java, +		String encodedHost;, +		if(StringUtils.hasLength(this.host) && this.host.startsWith("[")) {, +			encodedHost = encodeUriComponent(this.host, encoding, Type.HOST_IPV6);, +		} else {, +			encodedHost = encodeUriComponent(this.host, encoding, Type.HOST);, +		}, +, +		HOST_IPV6 {, +			@Override, +			public boolean isAllowed(int c) {, +				return isUnreserved(c) || isSubDelimiter(c) || '[' == c || ']' == c || ':' == c;, +			}, +		},, +++ b/spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java, +	private static final String HOST_IPv4_PATTERN = "[^\\[/?#:]*";, +, +	private static final String HOST_IPV6_PATTERN = "\\[[\\p{XDigit}\\:\\.]*[%\\p{Alnum}]*\\]";, +, +	private static final String HOST_PATTERN = "("+HOST_IPV6_PATTERN + "|" + HOST_IPv4_PATTERN + ")";, +			String host = m.group(5);, +			if(StringUtils.hasLength(scheme) && !StringUtils.hasLength(host)) {, +				throw new IllegalArgumentException("[" + httpUrl + "] is not a valid HTTP URL");, +			}, +			builder.host(host);, +++ b/spring-web/src/test/java/org/springframework/web/util/UriComponentsBuilderTests.java, +	// SPR-10539, +, +	@Test(expected = IllegalArgumentException.class), +	public void fromHttpUrlStringInvalidIPv6Host() throws URISyntaxException {, +		UriComponents result = UriComponentsBuilder, +				.fromHttpUrl("http://[1abc:2abc:3abc::5ABC:6abc:8080/resource").build().encode();, +	}, +, +	// SPR-10539, +, +	@Test, +	public void fromUriStringIPv6Host() throws URISyntaxException {, +	    UriComponents result = UriComponentsBuilder, +	            .fromUriString("http://[1abc:2abc:3abc::5ABC:6abc]:8080/resource").build().encode();, +	    assertEquals("[1abc:2abc:3abc::5ABC:6abc]",result.getHost());, +, +	    UriComponents resultWithScopeId = UriComponentsBuilder, +	            .fromUriString("http://[1abc:2abc:3abc::5ABC:6abc%eth0]:8080/resource").build().encode();, +	    assertEquals("[1abc:2abc:3abc::5ABC:6abc%25eth0]",resultWithScopeId.getHost());, +, +	    UriComponents resultIPv4compatible = UriComponentsBuilder, +			    .fromUriString("http://[::192.168.1.1]:8080/resource").build().encode();, +	    assertEquals("[::192.168.1.1]",resultIPv4compatible.getHost());, +	}, +]