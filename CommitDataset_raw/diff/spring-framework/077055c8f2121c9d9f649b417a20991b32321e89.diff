[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/UrlTag.java, +import org.springframework.web.util.UriUtils;, +			return UriUtils.encode(value, encoding);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/UrlTag.java, +import org.springframework.web.util.UriUtils;, +			return UriUtils.encode(value, encoding);, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/handler/PathMatchingUrlHandlerMappingTests.java, +import org.junit.Before;, +import org.junit.Test;, +import static org.junit.Assert.*;, +, +public class PathMatchingUrlHandlerMappingTests {, +	@Before, +	@Test, +	public void requestsWithHandlers() throws Exception {, +	@Test, +	public void actualPathMatching() throws Exception {, +	@Test, +	public void defaultMapping() throws Exception {, +	@Test, +	public void mappingExposedInRequest() throws Exception {, +			for (HandlerInterceptor interceptor : interceptors) {, +				interceptor.preHandle(req, null, hec.getHandler());, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/UrlTag.java, +import org.springframework.web.util.UriUtils;, +			return UriUtils.encode(value, encoding);, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/handler/PathMatchingUrlHandlerMappingTests.java, +import org.junit.Before;, +import org.junit.Test;, +import static org.junit.Assert.*;, +, +public class PathMatchingUrlHandlerMappingTests {, +	@Before, +	@Test, +	public void requestsWithHandlers() throws Exception {, +	@Test, +	public void actualPathMatching() throws Exception {, +	@Test, +	public void defaultMapping() throws Exception {, +	@Test, +	public void mappingExposedInRequest() throws Exception {, +			for (HandlerInterceptor interceptor : interceptors) {, +				interceptor.preHandle(req, null, hec.getHandler());, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/tags/UrlTagTests.java, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/UrlTag.java, +import org.springframework.web.util.UriUtils;, +			return UriUtils.encode(value, encoding);, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/handler/PathMatchingUrlHandlerMappingTests.java, +import org.junit.Before;, +import org.junit.Test;, +import static org.junit.Assert.*;, +, +public class PathMatchingUrlHandlerMappingTests {, +	@Before, +	@Test, +	public void requestsWithHandlers() throws Exception {, +	@Test, +	public void actualPathMatching() throws Exception {, +	@Test, +	public void defaultMapping() throws Exception {, +	@Test, +	public void mappingExposedInRequest() throws Exception {, +			for (HandlerInterceptor interceptor : interceptors) {, +				interceptor.preHandle(req, null, hec.getHandler());, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/tags/UrlTagTests.java, +++ b/org.springframework.web/src/main/java/org/springframework/web/util/UriUtils.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.util;, +, +import java.io.ByteArrayOutputStream;, +import java.io.UnsupportedEncodingException;, +import java.util.BitSet;, +, +import org.springframework.util.Assert;, +, +/**, + * Utility class for URI encoding. Based on RFC 2396., + *, + * <p>Effectively, the encoding and decoding methods in this class, + * are similar to those found in {@link java.net.URLEncoder} and, + * {@link java.net.URLDecoder}, except that the space character, + * is encoded as {@code %20}, not {@code +}., + *, + * @author Arjen Poutsma, + * @since 3.0]