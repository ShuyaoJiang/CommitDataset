[+++ b/spring-context/src/main/java/org/springframework/cache/interceptor/SimpleKeyGenerator.java, + * Copyright 2002-2016 the original author or authors., + * Simple key generator. Returns the parameter itself if a single non-null, + * value is given, otherwise returns a {@link SimpleKey} of the parameters., + * <p>No collisions will occur with the keys generated by this class., + * The returned {@link SimpleKey} object can be safely used with a, + * {@link org.springframework.cache.concurrent.ConcurrentMapCache}, however,, + * might not be suitable for all {@link org.springframework.cache.Cache}, +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/SimpleKeyGenerator.java, + * Copyright 2002-2016 the original author or authors., + * Simple key generator. Returns the parameter itself if a single non-null, + * value is given, otherwise returns a {@link SimpleKey} of the parameters., + * <p>No collisions will occur with the keys generated by this class., + * The returned {@link SimpleKey} object can be safely used with a, + * {@link org.springframework.cache.concurrent.ConcurrentMapCache}, however,, + * might not be suitable for all {@link org.springframework.cache.Cache}, +++ b/spring-context/src/main/java/org/springframework/remoting/RemoteAccessException.java, + * Copyright 2002-2016 the original author or authors., + * e.g. from Hessian does not affect client code. Clients work with a plain, + * natural Java business interface that the service exposes. A client object, + * simply receives an implementation for the interface that it needs via a, + * bean reference, like it does for a local bean as well., +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/SimpleKeyGenerator.java, + * Copyright 2002-2016 the original author or authors., + * Simple key generator. Returns the parameter itself if a single non-null, + * value is given, otherwise returns a {@link SimpleKey} of the parameters., + * <p>No collisions will occur with the keys generated by this class., + * The returned {@link SimpleKey} object can be safely used with a, + * {@link org.springframework.cache.concurrent.ConcurrentMapCache}, however,, + * might not be suitable for all {@link org.springframework.cache.Cache}, +++ b/spring-context/src/main/java/org/springframework/remoting/RemoteAccessException.java, + * Copyright 2002-2016 the original author or authors., + * e.g. from Hessian does not affect client code. Clients work with a plain, + * natural Java business interface that the service exposes. A client object, + * simply receives an implementation for the interface that it needs via a, + * bean reference, like it does for a local bean as well., +++ b/spring-context/src/main/java/org/springframework/remoting/rmi/RmiProxyFactoryBean.java, + * Copyright 2002-2016 the original author or authors., + * <p>The major advantage of RMI, compared to Hessian, is serialization., + * Hessian has its own (de-)serialization mechanisms, but is HTTP-based and thus, + * much easier to setup than RMI. Alternatively, consider Spring's HTTP invoker, + * to combine Java serialization with HTTP-based transport., +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/SimpleKeyGenerator.java, + * Copyright 2002-2016 the original author or authors., + * Simple key generator. Returns the parameter itself if a single non-null, + * value is given, otherwise returns a {@link SimpleKey} of the parameters., + * <p>No collisions will occur with the keys generated by this class., + * The returned {@link SimpleKey} object can be safely used with a, + * {@link org.springframework.cache.concurrent.ConcurrentMapCache}, however,, + * might not be suitable for all {@link org.springframework.cache.Cache}, +++ b/spring-context/src/main/java/org/springframework/remoting/RemoteAccessException.java, + * Copyright 2002-2016 the original author or authors., + * e.g. from Hessian does not affect client code. Clients work with a plain, + * natural Java business interface that the service exposes. A client object, + * simply receives an implementation for the interface that it needs via a, + * bean reference, like it does for a local bean as well., +++ b/spring-context/src/main/java/org/springframework/remoting/rmi/RmiProxyFactoryBean.java, + * Copyright 2002-2016 the original author or authors., + * <p>The major advantage of RMI, compared to Hessian, is serialization., + * Hessian has its own (de-)serialization mechanisms, but is HTTP-based and thus, + * much easier to setup than RMI. Alternatively, consider Spring's HTTP invoker, + * to combine Java serialization with HTTP-based transport., +++ b/spring-context/src/main/java/org/springframework/remoting/rmi/RmiServiceExporter.java, + * Copyright 2002-2016 the original author or authors., + * <p>The major advantage of RMI, compared to Hessian, is serialization., + * Hessian has its own (de-)serialization mechanisms, but is HTTP-based and thus, + * much easier to setup than RMI. Alternatively, consider Spring's HTTP invoker, + * to combine Java serialization with HTTP-based transport., +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/SimpleKeyGenerator.java, + * Copyright 2002-2016 the original author or authors., + * Simple key generator. Returns the parameter itself if a single non-null, + * value is given, otherwise returns a {@link SimpleKey} of the parameters., + * <p>No collisions will occur with the keys generated by this class., + * The returned {@link SimpleKey} object can be safely used with a, + * {@link org.springframework.cache.concurrent.ConcurrentMapCache}, however,, + * might not be suitable for all {@link org.springframework.cache.Cache}, +++ b/spring-context/src/main/java/org/springframework/remoting/RemoteAccessException.java, + * Copyright 2002-2016 the original author or authors., + * e.g. from Hessian does not affect client code. Clients work with a plain, + * natural Java business interface that the service exposes. A client object, + * simply receives an implementation for the interface that it needs via a, + * bean reference, like it does for a local bean as well., +++ b/spring-context/src/main/java/org/springframework/remoting/rmi/RmiProxyFactoryBean.java, + * Copyright 2002-2016 the original author or authors., + * <p>The major advantage of RMI, compared to Hessian, is serialization., + * Hessian has its own (de-)serialization mechanisms, but is HTTP-based and thus, + * much easier to setup than RMI. Alternatively, consider Spring's HTTP invoker, + * to combine Java serialization with HTTP-based transport., +++ b/spring-context/src/main/java/org/springframework/remoting/rmi/RmiServiceExporter.java, + * Copyright 2002-2016 the original author or authors., + * <p>The major advantage of RMI, compared to Hessian, is serialization., + * Hessian has its own (de-)serialization mechanisms, but is HTTP-based and thus, + * much easier to setup than RMI. Alternatively, consider Spring's HTTP invoker, + * to combine Java serialization with HTTP-based transport., +++ b/spring-context/src/main/java/org/springframework/remoting/support/SimpleHttpServerFactoryBean.java, + * Copyright 2002-2016 the original author or authors., +++ b/spring-context/src/main/java/org/springframework/cache/interceptor/SimpleKeyGenerator.java, + * Copyright 2002-2016 the original author or authors., + * Simple key generator. Returns the parameter itself if a single non-null, + * value is given, otherwise returns a {@link SimpleKey} of the parameters.]