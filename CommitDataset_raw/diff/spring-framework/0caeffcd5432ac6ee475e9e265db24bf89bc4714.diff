[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/CloseStatus.java, + * Copyright 2002-2014 the original author or authors., + *, + * <p>See <a href="https://tools.ietf.org/html/rfc6455#section-7.4.1">RFC 6455, Section 7.4.1, +	 * @since 4.0.3, +		Assert.isTrue((code >= 1000 && code < 5000), "Invalid status code");, +	 * Return the status code., +	 * Return the reason, or {@code null} if none., +	 * Create a new {@link CloseStatus} from this one with the specified reason., +	 * @return a new {@link CloseStatus} instance, +, +	public boolean equalsCode(CloseStatus other) {, +		return (this.code == other.code);, +	@Override, +	public int hashCode() {, +		return this.code * 29 + ObjectUtils.nullSafeHashCode(this.reason);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/CloseStatus.java, + * Copyright 2002-2014 the original author or authors., + *, + * <p>See <a href="https://tools.ietf.org/html/rfc6455#section-7.4.1">RFC 6455, Section 7.4.1, +	 * @since 4.0.3, +		Assert.isTrue((code >= 1000 && code < 5000), "Invalid status code");, +	 * Return the status code., +	 * Return the reason, or {@code null} if none., +	 * Create a new {@link CloseStatus} from this one with the specified reason., +	 * @return a new {@link CloseStatus} instance, +, +	public boolean equalsCode(CloseStatus other) {, +		return (this.code == other.code);, +	@Override, +	public int hashCode() {, +		return this.code * 29 + ObjectUtils.nullSafeHashCode(this.reason);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SessionConnectEvent.java, +	/**, +	 * Create a new SessionConnectEvent., +	 * @param source the component that published the event (never {@code null}), +	 * @param message the connect message, +	 */, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/CloseStatus.java, + * Copyright 2002-2014 the original author or authors., + *, + * <p>See <a href="https://tools.ietf.org/html/rfc6455#section-7.4.1">RFC 6455, Section 7.4.1, +	 * @since 4.0.3, +		Assert.isTrue((code >= 1000 && code < 5000), "Invalid status code");, +	 * Return the status code., +	 * Return the reason, or {@code null} if none., +	 * Create a new {@link CloseStatus} from this one with the specified reason., +	 * @return a new {@link CloseStatus} instance, +, +	public boolean equalsCode(CloseStatus other) {, +		return (this.code == other.code);, +	@Override, +	public int hashCode() {, +		return this.code * 29 + ObjectUtils.nullSafeHashCode(this.reason);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SessionConnectEvent.java, +	/**, +	 * Create a new SessionConnectEvent., +	 * @param source the component that published the event (never {@code null}), +	 * @param message the connect message, +	 */, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SessionConnectedEvent.java, + * See {@link org.springframework.web.socket.messaging.SessionConnectEvent}., +	/**, +	 * Create a new SessionConnectedEvent., +	 * @param source the component that published the event (never {@code null}), +	 * @param message the connected message, +	 */, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/CloseStatus.java, + * Copyright 2002-2014 the original author or authors., + *, + * <p>See <a href="https://tools.ietf.org/html/rfc6455#section-7.4.1">RFC 6455, Section 7.4.1, +	 * @since 4.0.3, +		Assert.isTrue((code >= 1000 && code < 5000), "Invalid status code");, +	 * Return the status code., +	 * Return the reason, or {@code null} if none., +	 * Create a new {@link CloseStatus} from this one with the specified reason., +	 * @return a new {@link CloseStatus} instance, +, +	public boolean equalsCode(CloseStatus other) {, +		return (this.code == other.code);, +	@Override, +	public int hashCode() {, +		return this.code * 29 + ObjectUtils.nullSafeHashCode(this.reason);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SessionConnectEvent.java, +	/**, +	 * Create a new SessionConnectEvent., +	 * @param source the component that published the event (never {@code null}), +	 * @param message the connect message, +	 */, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SessionConnectedEvent.java, + * See {@link org.springframework.web.socket.messaging.SessionConnectEvent}., +	/**, +	 * Create a new SessionConnectedEvent., +	 * @param source the component that published the event (never {@code null}), +	 * @param message the connected message, +	 */, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SessionDisconnectEvent.java, + * therefore event consumers should be idempotent and ignore a duplicate event., +	 * Create a new SessionDisconnectEvent., +	 * @param source the component that published the event (never {@code null})]