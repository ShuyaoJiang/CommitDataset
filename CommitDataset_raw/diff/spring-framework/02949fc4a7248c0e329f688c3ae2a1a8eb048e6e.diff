[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/AnnotationMethodMessageHandler.java, +import org.springframework.util.CollectionUtils;, +		if ((destination == null) || CollectionUtils.isEmpty(this.destinationPrefixes)) {, +			return true;, +		}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/AnnotationMethodMessageHandler.java, +import org.springframework.util.CollectionUtils;, +		if ((destination == null) || CollectionUtils.isEmpty(this.destinationPrefixes)) {, +			return true;, +		}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/SimpleBrokerMessageHandler.java, +import org.springframework.util.CollectionUtils;, +		if ((destination == null) || CollectionUtils.isEmpty(this.destinationPrefixes)) {, +			return true;, +		}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/AnnotationMethodMessageHandler.java, +import org.springframework.util.CollectionUtils;, +		if ((destination == null) || CollectionUtils.isEmpty(this.destinationPrefixes)) {, +			return true;, +		}, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/handler/SimpleBrokerMessageHandler.java, +import org.springframework.util.CollectionUtils;, +		if ((destination == null) || CollectionUtils.isEmpty(this.destinationPrefixes)) {, +			return true;, +		}, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/handler/SimpleBrokerMessageHandlerTests.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.messaging.simp.handler;, +, +import org.junit.Before;, +import org.junit.Test;, +import org.mockito.ArgumentCaptor;, +import org.mockito.Captor;, +import org.mockito.Mock;, +import org.mockito.MockitoAnnotations;, +import org.springframework.messaging.Message;, +import org.springframework.messaging.MessageChannel;, +import org.springframework.messaging.simp.SimpMessageHeaderAccessor;, +import org.springframework.messaging.simp.SimpMessageType;, +import org.springframework.messaging.support.MessageBuilder;, +, +import static org.mockito.Mockito.*;, +, +, +/**, + *, + * @author Rossen Stoyanchev, + * @since 4.0, + */, +public class SimpleBrokerMessageHandlerTests {, +, +	private SimpleBrokerMessageHandler messageHandler;, +, +	@Mock, +	private MessageChannel clientChannel;, +, +	@Captor, +	ArgumentCaptor<Message<?>> messageCaptor;, +, +, +	@Before, +	public void setup() {, +		MockitoAnnotations.initMocks(this);, +		this.messageHandler = new SimpleBrokerMessageHandler(this.clientChannel);, +	}, +, +, +	@Test, +	public void subcribePublish() {, +, +		this.messageHandler.handleMessage(createSubscriptionMessage("sess1", "sub1", "/foo"));, +		this.messageHandler.handleMessage(createSubscriptionMessage("sess1", "sub2", "/foo"));, +		this.messageHandler.handleMessage(createSubscriptionMessage("sess1", "sub3", "/bar"));, +, +		this.messageHandler.handleMessage(createSubscriptionMessage("sess2", "sub1", "/foo"));, +		this.messageHandler.handleMessage(createSubscriptionMessage("sess2", "sub2", "/foo"));, +		this.messageHandler.handleMessage(createSubscriptionMessage("sess2", "sub3", "/bar"));, +, +		this.messageHandler.handleMessage(createMessage("/foo", "message1"));, +		this.messageHandler.handleMessage(createMessage("/bar", "message2"));, +, +		verify(this.clientChannel, times(6)).send(this.messageCaptor.capture());, +		assertCapturedMessage("sess1", "sub1", "/foo");, +		assertCapturedMessage("sess1", "sub2", "/foo");, +		assertCapturedMessage("sess2", "sub1", "/foo");]