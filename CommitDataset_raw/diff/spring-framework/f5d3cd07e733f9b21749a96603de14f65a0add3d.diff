[+++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/StandardEvaluationContext.java, + * Copyright 2002-2012 the original author or authors., + * @author Sam Brannen, +	 * Register a {@code MethodFilter} which will be called during method resolution, +	 * for the specified type., +	 *, +	 * <p>The {@code MethodFilter} may remove methods and/or sort the methods which, +	 * will then be used by SpEL as the candidates to look through for a match., +	 * @param filter a {@code MethodFilter}, or {@code null} to unregister a filter for the type, +	 * @throws IllegalStateException if the {@link ReflectiveMethodResolver} is not in use, +	public void registerMethodFilter(Class<?> type, MethodFilter filter) throws IllegalStateException {, +		if (reflectiveMethodResolver != null) {, +		} else {, +			throw new IllegalStateException("Method filter cannot be set as the reflective method resolver is not in use");, +		}, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/StandardEvaluationContext.java, + * Copyright 2002-2012 the original author or authors., + * @author Sam Brannen, +	 * Register a {@code MethodFilter} which will be called during method resolution, +	 * for the specified type., +	 *, +	 * <p>The {@code MethodFilter} may remove methods and/or sort the methods which, +	 * will then be used by SpEL as the candidates to look through for a match., +	 * @param filter a {@code MethodFilter}, or {@code null} to unregister a filter for the type, +	 * @throws IllegalStateException if the {@link ReflectiveMethodResolver} is not in use, +	public void registerMethodFilter(Class<?> type, MethodFilter filter) throws IllegalStateException {, +		if (reflectiveMethodResolver != null) {, +		} else {, +			throw new IllegalStateException("Method filter cannot be set as the reflective method resolver is not in use");, +		}, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java, +import java.lang.reflect.Method;, +import java.util.ArrayList;, +import org.springframework.core.convert.TypeDescriptor;, +import org.springframework.expression.AccessException;, +import org.springframework.expression.MethodExecutor;, +import org.springframework.expression.MethodFilter;, +import org.springframework.expression.MethodResolver;, +	@SuppressWarnings("rawtypes"), +	/**, +	 * Verifies behavior requested in SPR-9621., +	 */, +	@Test, +	public void customMethodFilter() throws Exception {, +		StandardEvaluationContext context = new StandardEvaluationContext();, +, +		// Register a custom MethodResolver..., +		List<MethodResolver> customResolvers = new ArrayList<MethodResolver>();, +		customResolvers.add(new CustomMethodResolver());, +		context.setMethodResolvers(customResolvers);, +, +		// or simply..., +		// context.setMethodResolvers(new ArrayList<MethodResolver>());, +, +		// Register a custom MethodFilter..., +		MethodFilter filter = new CustomMethodFilter();, +		try {, +			context.registerMethodFilter(String.class, filter);, +			fail("should have failed");, +		} catch (IllegalStateException ise) {, +			assertEquals(, +					"Method filter cannot be set as the reflective method resolver is not in use",, +					ise.getMessage());, +		}, +	}, +, +	static class CustomMethodResolver implements MethodResolver {, +, +		public MethodExecutor resolve(EvaluationContext context,, +				Object targetObject, String name,, +				List<TypeDescriptor> argumentTypes) throws AccessException {, +			return null;, +		}, +	}, +, +	static class CustomMethodFilter implements MethodFilter {, +, +		public List<Method> filter(List<Method> methods) {, +			return null;, +		}, +, +	}, +, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/support/StandardEvaluationContext.java, + * Copyright 2002-2012 the original author or authors., + * @author Sam Brannen, +	 * Register a {@code MethodFilter} which will be called during method resolution, +	 * for the specified type., +	 *, +	 * <p>The {@code MethodFilter} may remove methods and/or sort the methods which, +	 * will then be used by SpEL as the candidates to look through for a match., +	 * @param filter a {@code MethodFilter}, or {@code null} to unregister a filter for the type, +	 * @throws IllegalStateException if the {@link ReflectiveMethodResolver} is not in use, +	public void registerMethodFilter(Class<?> type, MethodFilter filter) throws IllegalStateException {, +		if (reflectiveMethodResolver != null) {, +		} else {, +			throw new IllegalStateException("Method filter cannot be set as the reflective method resolver is not in use");, +		}, +++ b/spring-expression/src/test/java/org/springframework/expression/spel/EvaluationTests.java, +import java.lang.reflect.Method;]