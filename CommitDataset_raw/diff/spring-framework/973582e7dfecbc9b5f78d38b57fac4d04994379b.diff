[+++ b/spring-test/src/main/java/org/springframework/test/context/junit4/rules/SpringClassRule.java, +import java.util.Map;, +import java.util.concurrent.ConcurrentHashMap;, +import org.springframework.util.Assert;, + * {@code SpringClassRule} is a custom JUnit {@link TestRule} that supports, + * <em>class-level</em> features of the <em>Spring TestContext Framework</em>, + * in standard JUnit tests by means of the {@link TestContextManager} and, + * associated support classes and annotations., + * since {@code SpringClassRule} only supports the class-level features of the, + *    public final SpringMethodRule springMethodRule = new SpringMethodRule();, +	 * Cache of {@code TestContextManagers} keyed by test class., +	private static final Map<Class<?>, TestContextManager> testContextManagerCache =, +			new ConcurrentHashMap<Class<?>, TestContextManager>(64);, +	 * Apply <em>class-level</em> features of the <em>Spring TestContext, +	 * <p>Specifically, this method retrieves the {@link TestContextManager}, +	 * used by this rule and its associated {@link SpringMethodRule} and, +	 * invokes the {@link TestContextManager#beforeTestClass() beforeTestClass()}, +	 * and {@link TestContextManager#afterTestClass() afterTestClass()} methods, +	 * features of the Spring TestContext Framework, +	 * @see #getTestContextManager, +	 * @see #withTestContextManagerCacheEviction, +	public Statement apply(Statement base, Description description) {, +		TestContextManager testContextManager = getTestContextManager(testClass);, +		statement = withBeforeTestClassCallbacks(statement, testContextManager);, +		statement = withAfterTestClassCallbacks(statement, testContextManager);, +		statement = withProfileValueCheck(statement, testClass);, +		statement = withTestContextManagerCacheEviction(statement, testClass);, +	private Statement withBeforeTestClassCallbacks(Statement statement, TestContextManager testContextManager) {, +		return new RunBeforeTestClassCallbacks(statement, testContextManager);, +	private Statement withAfterTestClassCallbacks(Statement statement, TestContextManager testContextManager) {, +		return new RunAfterTestClassCallbacks(statement, testContextManager);, +	private Statement withProfileValueCheck(Statement statement, Class<?> testClass) {, +	/**, +	 * Wrap the supplied {@code statement} with a {@code TestContextManagerCacheEvictor} statement., +	 * @see TestContextManagerCacheEvictor, +	 */, +	private Statement withTestContextManagerCacheEviction(Statement statement, Class<?> testClass) {, +		return new TestContextManagerCacheEvictor(statement, testClass);, +	}, +, +	/**, +	 * Throw an {@link IllegalStateException} if the supplied {@code testClass}, +	 * does not declare a {@code public SpringMethodRule} field that is, +	 * annotated with {@code @Rule}., +	 */, +	private static final void validateSpringMethodRuleConfiguration(Class<?> testClass) {, +					&& SpringMethodRule.class.isAssignableFrom(field.getType())) {, +	/**, +	 * Get the {@link TestContextManager} associated with the supplied test class., +	 * @param testClass the test class to be managed; never {@code null}, +	 */, +	static final TestContextManager getTestContextManager(Class<?> testClass) {, +		Assert.notNull(testClass, "testClass must not be null");, +		synchronized (testContextManagerCache) {, +			TestContextManager testContextManager = testContextManagerCache.get(testClass);, +			if (testContextManager == null) {, +				testContextManager = new TestContextManager(testClass);, +				testContextManagerCache.put(testClass, testContextManager);, +			}, +			return testContextManager;, +		}, +	}, +, +, +	private static class TestContextManagerCacheEvictor extends Statement {, +, +		private final Statement next;, +, +		private final Class<?> testClass;, +, +, +		TestContextManagerCacheEvictor(Statement next, Class<?> testClass) {, +			this.next = next;, +			this.testClass = testClass;, +		}, +, +		@Override, +		public void evaluate() throws Throwable {, +			try {, +				next.evaluate();, +			}, +			finally {, +				testContextManagerCache.remove(testClass);, +			}, +		}, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/context/junit4/rules/SpringClassRule.java, +import java.util.Map;, +import java.util.concurrent.ConcurrentHashMap;, +import org.springframework.util.Assert;, + * {@code SpringClassRule} is a custom JUnit {@link TestRule} that supports, + * <em>class-level</em> features of the <em>Spring TestContext Framework</em>, + * in standard JUnit tests by means of the {@link TestContextManager} and, + * associated support classes and annotations., + * since {@code SpringClassRule} only supports the class-level features of the, + *    public final SpringMethodRule springMethodRule = new SpringMethodRule();, +	 * Cache of {@code TestContextManagers} keyed by test class., +	private static final Map<Class<?>, TestContextManager> testContextManagerCache =, +			new ConcurrentHashMap<Class<?>, TestContextManager>(64);]