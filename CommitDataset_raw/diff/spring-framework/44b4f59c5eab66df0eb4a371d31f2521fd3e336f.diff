[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestKey.java, +		RequestCondition consumes = RequestConditionFactory.mostSpecific(methodKey.consumesCondition, this.consumesCondition);, +		return new RequestKey(patterns, methods, params, headers, consumes);, +		if (!checkMethod(request) || !paramsCondition.match(request) || !headersCondition.match(request) ||, +				!consumesCondition.match(request)) {, +				return new RequestKey(matchingPatterns, matchingMethods, this.paramsCondition, this.headersCondition,, +						this.consumesCondition);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestKey.java, +		RequestCondition consumes = RequestConditionFactory.mostSpecific(methodKey.consumesCondition, this.consumesCondition);, +		return new RequestKey(patterns, methods, params, headers, consumes);, +		if (!checkMethod(request) || !paramsCondition.match(request) || !headersCondition.match(request) ||, +				!consumesCondition.match(request)) {, +				return new RequestKey(matchingPatterns, matchingMethods, this.paramsCondition, this.headersCondition,, +						this.consumesCondition);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/condition/ConsumesRequestCondition.java, +		MediaType contentType;, +		if (StringUtils.hasLength(request.getContentType())) {, +			contentType = MediaType.parseMediaType(request.getContentType());, +		else {, +			contentType = MediaType.APPLICATION_OCTET_STREAM;, +		}, +		return this.mediaType.includes(contentType);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestKey.java, +		RequestCondition consumes = RequestConditionFactory.mostSpecific(methodKey.consumesCondition, this.consumesCondition);, +		return new RequestKey(patterns, methods, params, headers, consumes);, +		if (!checkMethod(request) || !paramsCondition.match(request) || !headersCondition.match(request) ||, +				!consumesCondition.match(request)) {, +				return new RequestKey(matchingPatterns, matchingMethods, this.paramsCondition, this.headersCondition,, +						this.consumesCondition);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/condition/ConsumesRequestCondition.java, +		MediaType contentType;, +		if (StringUtils.hasLength(request.getContentType())) {, +			contentType = MediaType.parseMediaType(request.getContentType());, +		else {, +			contentType = MediaType.APPLICATION_OCTET_STREAM;, +		}, +		return this.mediaType.includes(contentType);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/condition/RequestConditionFactory.java, +	public static RequestCondition mostSpecific(RequestCondition... conditions) {, +		if (ObjectUtils.isEmpty(conditions)) {, +			return trueCondition();, +		}, +		RequestCondition[] copy = new RequestCondition[conditions.length];, +		System.arraycopy(conditions, 0, copy, 0, conditions.length);, +		Arrays.sort(copy);, +		return copy[0];, +	}, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestKey.java, +		RequestCondition consumes = RequestConditionFactory.mostSpecific(methodKey.consumesCondition, this.consumesCondition);, +		return new RequestKey(patterns, methods, params, headers, consumes);, +		if (!checkMethod(request) || !paramsCondition.match(request) || !headersCondition.match(request) ||, +				!consumesCondition.match(request)) {, +				return new RequestKey(matchingPatterns, matchingMethods, this.paramsCondition, this.headersCondition,, +						this.consumesCondition);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/condition/ConsumesRequestCondition.java, +		MediaType contentType;, +		if (StringUtils.hasLength(request.getContentType())) {, +			contentType = MediaType.parseMediaType(request.getContentType());, +		else {, +			contentType = MediaType.APPLICATION_OCTET_STREAM;, +		}, +		return this.mediaType.includes(contentType);, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/condition/RequestConditionFactory.java, +	public static RequestCondition mostSpecific(RequestCondition... conditions) {, +		if (ObjectUtils.isEmpty(conditions)) {, +			return trueCondition();, +		}, +		RequestCondition[] copy = new RequestCondition[conditions.length];, +		System.arraycopy(conditions, 0, copy, 0, conditions.length);, +		Arrays.sort(copy);, +		return copy[0];, +	}, +, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestKeyTests.java, +	public void matchingKeyContent() {, +	public void paramsCondition() {, +	public void headersCondition() {, +	public void consumesCondition() {, +		UrlPathHelper urlPathHelper = new UrlPathHelper();, +		PathMatcher pathMatcher = new AntPathMatcher();, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/foo");, +		request.setContentType("text/plain");, +, +		RequestKey key = new RequestKey(singleton("/foo"), null, null, null, RequestConditionFactory.parseConsumes(, +				"text/plain"));, +		RequestKey match = key.getMatchingKey(request, pathMatcher, urlPathHelper);, +, +		assertNotNull(match);, +, +		key = new RequestKey(singleton("/foo"), null, null, null, RequestConditionFactory.parseConsumes(, +				"application/xml"));, +		match = key.getMatchingKey(request, pathMatcher, urlPathHelper);, +, +		assertNull(match);, +	}, +, +	@Test, +	public void createFromServletRequest() {]