[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.messaging.MessageHeaders;, +			StompConnectionHandler handler = this.connectionHandlers.get(sessionId);, +			if (handler != null) {, +				handler.sendStompErrorFrameToClient("Broker not available.");, +				handler.clearConnection();, +			else {, +				StompHeaderAccessor accessor = StompHeaderAccessor.create(StompCommand.ERROR);, +				if (getHeaderInitializer() != null) {, +					getHeaderInitializer().initHeaders(accessor);, +				}, +				accessor.setSessionId(sessionId);, +				accessor.setUser(SimpMessageHeaderAccessor.getUser(message.getHeaders()));, +				accessor.setMessage("Broker not available.");, +				MessageHeaders headers = accessor.getMessageHeaders();, +				getClientOutboundChannel().send(MessageBuilder.createMessage(EMPTY_PAYLOAD, headers));, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java, + * Copyright 2002-2015 the original author or authors., +import org.springframework.messaging.MessageHeaders;, +			StompConnectionHandler handler = this.connectionHandlers.get(sessionId);, +			if (handler != null) {, +				handler.sendStompErrorFrameToClient("Broker not available.");, +				handler.clearConnection();, +			else {, +				StompHeaderAccessor accessor = StompHeaderAccessor.create(StompCommand.ERROR);, +				if (getHeaderInitializer() != null) {, +					getHeaderInitializer().initHeaders(accessor);, +				}, +				accessor.setSessionId(sessionId);, +				accessor.setUser(SimpMessageHeaderAccessor.getUser(message.getHeaders()));, +				accessor.setMessage("Broker not available.");, +				MessageHeaders headers = accessor.getMessageHeaders();, +				getClientOutboundChannel().send(MessageBuilder.createMessage(EMPTY_PAYLOAD, headers));, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandlerTests.java, + * Copyright 2002-2015 the original author or authors., +	public void testOutboundMessageIsEnriched() throws Exception {, +	// SPR-12820, +, +	@Test, +	public void testConnectWhenBrokerNotAvailable() throws Exception {, +, +		this.brokerRelay.start();, +		this.brokerRelay.stopInternal();, +, +		String sessionId = "sess1";, +		StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.CONNECT);, +		headers.setSessionId(sessionId);, +		headers.setUser(new TestPrincipal("joe"));, +		this.brokerRelay.handleMessage(MessageBuilder.createMessage(new byte[0], headers.getMessageHeaders()));, +, +		Message<byte[]> actual = this.outboundChannel.getMessages().get(0);, +		StompHeaderAccessor actualHeaders = StompHeaderAccessor.getAccessor(actual, StompHeaderAccessor.class);, +		assertEquals(StompCommand.ERROR, actualHeaders.getCommand());, +		assertEquals(sessionId, actualHeaders.getSessionId());, +		assertEquals("joe", actualHeaders.getUser().getName());, +		assertEquals("Broker not available.", actualHeaders.getMessage());, +	}, +, +	@Test, +	public void testSendAfterBrokerUnavailable() throws Exception {, +, +		this.brokerRelay.start();, +, +		String sessionId = "sess1";, +		StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.CONNECT);, +		headers.setSessionId(sessionId);, +		headers.setUser(new TestPrincipal("joe"));, +		this.brokerRelay.handleMessage(MessageBuilder.createMessage(new byte[0], headers.getMessageHeaders()));, +, +		assertEquals(2, this.brokerRelay.getConnectionCount());, +, +		this.brokerRelay.stopInternal();, +, +		headers = StompHeaderAccessor.create(StompCommand.SEND);, +		headers.setSessionId(sessionId);, +		headers.setUser(new TestPrincipal("joe"));, +		headers.setDestination("/foo");, +		this.brokerRelay.handleMessage(MessageBuilder.createMessage(new byte[0], headers.getMessageHeaders()));, +, +		assertEquals(1, this.brokerRelay.getConnectionCount());, +, +		Message<byte[]> actual = this.outboundChannel.getMessages().get(0);, +		StompHeaderAccessor actualHeaders = StompHeaderAccessor.getAccessor(actual, StompHeaderAccessor.class);, +		assertEquals(StompCommand.ERROR, actualHeaders.getCommand());, +		assertEquals(sessionId, actualHeaders.getSessionId());, +		assertEquals("joe", actualHeaders.getUser().getName());, +		assertEquals("Broker not available.", actualHeaders.getMessage());, +	}, +]