[+++ b/src/docs/asciidoc/web/webflux.adoc, +`ResponseEntity` is like <<webflux-ann-responsebody>> but with status and headers. For example:, +	@GetMapping("/something"), +		String body = ... ;, +		String etag = ... ;, +		return ResponseEntity.ok().eTag(etag).build(body);, +WebFlux supports using a single value <<webflux-reactive-libraries,reactive type>> to, +produce the `ResponseEntity` asynchronously, and/or single and multi-value reactive types, +for the body., +, +, +++ b/src/docs/asciidoc/web/webflux.adoc, +`ResponseEntity` is like <<webflux-ann-responsebody>> but with status and headers. For example:, +	@GetMapping("/something"), +		String body = ... ;, +		String etag = ... ;, +		return ResponseEntity.ok().eTag(etag).build(body);, +WebFlux supports using a single value <<webflux-reactive-libraries,reactive type>> to, +produce the `ResponseEntity` asynchronously, and/or single and multi-value reactive types, +for the body., +, +, +++ b/src/docs/asciidoc/web/webmvc.adoc, +`ResponseEntity` is like <<mvc-ann-responsebody>> but with status and headers. For example:, +	@GetMapping("/something"), +		String body = ... ;, +		String etag = ... ;, +		return ResponseEntity.ok().eTag(etag).build(body);, +Spring MVC supports using a single value <<mvc-ann-async-reactive-types,reactive type>>, +to produce the `ResponseEntity` asynchronously, and/or single and multi-value reactive, +types for the body., +, +, +Spring MVC supports use of reactive client libraries in a controller (also read, +<<web-reactive.adoc#webflux-reactive-libraries,Reactive Libraries>> in the WebFlux section)., +This includes the `WebClient` from `spring-webflux` and others, such as Spring Data, +reactive data repositories. In such scenarios, it is convenient to be able to return, +reactive types from the controller method.]