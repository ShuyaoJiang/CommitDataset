[+++ b/spring-web/src/main/java/org/springframework/http/converter/json/MappingJackson2HttpMessageConverter.java, +			generator.writeRaw("/**/");, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/MappingJackson2HttpMessageConverter.java, +			generator.writeRaw("/**/");, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, +	/**, +	 * {@inheritDoc}, +	 * <p>At startup this method returns extensions explicitly registered with, +	 * either {@link PathExtensionContentNegotiationStrategy} or, +	 * {@link ParameterContentNegotiationStrategy}. At runtime if there is a, +	 * "path extension" strategy and its, +	 * {@link PathExtensionContentNegotiationStrategy#setUseJaf(boolean), +	 * useJaf} property is set to "true", the list of extensions may, +	 * increase as file extensions are resolved via JAF and cached., +	 */, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/MappingJackson2HttpMessageConverter.java, +			generator.writeRaw("/**/");, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, +	/**, +	 * {@inheritDoc}, +	 * <p>At startup this method returns extensions explicitly registered with, +	 * either {@link PathExtensionContentNegotiationStrategy} or, +	 * {@link ParameterContentNegotiationStrategy}. At runtime if there is a, +	 * "path extension" strategy and its, +	 * {@link PathExtensionContentNegotiationStrategy#setUseJaf(boolean), +	 * useJaf} property is set to "true", the list of extensions may, +	 * increase as file extensions are resolved via JAF and cached., +	 */, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, +	private boolean isUseJafTurnedOff() {, +		return (this.useJaf != null && !this.useJaf);, +	}, +, +			if (this.servletContext != null && !isUseJafTurnedOff()) {, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/MappingJackson2HttpMessageConverter.java, +			generator.writeRaw("/**/");, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, +	/**, +	 * {@inheritDoc}, +	 * <p>At startup this method returns extensions explicitly registered with, +	 * either {@link PathExtensionContentNegotiationStrategy} or, +	 * {@link ParameterContentNegotiationStrategy}. At runtime if there is a, +	 * "path extension" strategy and its, +	 * {@link PathExtensionContentNegotiationStrategy#setUseJaf(boolean), +	 * useJaf} property is set to "true", the list of extensions may, +	 * increase as file extensions are resolved via JAF and cached., +	 */, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, +	private boolean isUseJafTurnedOff() {, +		return (this.useJaf != null && !this.useJaf);, +	}, +, +			if (this.servletContext != null && !isUseJafTurnedOff()) {, +++ b/spring-web/src/main/java/org/springframework/web/accept/PathExtensionContentNegotiationStrategy.java, +, +	private boolean useJaf = true;, +	 * <p>By default this is set to "true" but depends on JAF being present., +		if (this.useJaf && JAF_PRESENT) {, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/MappingJackson2HttpMessageConverter.java, +			generator.writeRaw("/**/");, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, +	/**, +	 * {@inheritDoc}, +	 * <p>At startup this method returns extensions explicitly registered with, +	 * either {@link PathExtensionContentNegotiationStrategy} or, +	 * {@link ParameterContentNegotiationStrategy}. At runtime if there is a, +	 * "path extension" strategy and its, +	 * {@link PathExtensionContentNegotiationStrategy#setUseJaf(boolean), +	 * useJaf} property is set to "true", the list of extensions may, +	 * increase as file extensions are resolved via JAF and cached., +	 */, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, +	private boolean isUseJafTurnedOff() {, +		return (this.useJaf != null && !this.useJaf);, +	}, +, +			if (this.servletContext != null && !isUseJafTurnedOff()) {, +++ b/spring-web/src/main/java/org/springframework/web/accept/PathExtensionContentNegotiationStrategy.java, +, +	private boolean useJaf = true;, +	 * <p>By default this is set to "true" but depends on JAF being present., +		if (this.useJaf && JAF_PRESENT) {, +++ b/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java, +		if (this.urlDecode && source != null) {, +++ b/spring-web/src/main/java/org/springframework/http/converter/json/MappingJackson2HttpMessageConverter.java, +			generator.writeRaw("/**/");, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManager.java, +	/**, +	 * {@inheritDoc}, +	 * <p>At startup this method returns extensions explicitly registered with, +	 * either {@link PathExtensionContentNegotiationStrategy} or, +	 * {@link ParameterContentNegotiationStrategy}. At runtime if there is a, +	 * "path extension" strategy and its, +	 * {@link PathExtensionContentNegotiationStrategy#setUseJaf(boolean), +	 * useJaf} property is set to "true", the list of extensions may, +	 * increase as file extensions are resolved via JAF and cached., +	 */, +++ b/spring-web/src/main/java/org/springframework/web/accept/ContentNegotiationManagerFactoryBean.java, +	private boolean isUseJafTurnedOff() {, +		return (this.useJaf != null && !this.useJaf);]