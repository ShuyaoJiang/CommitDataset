[+++ b/spring-framework-reference/src/validation.xml, +					You may inject a reference to one of these two interfaces into beans that need to invoke validation logic., +					Inject a reference to <code>org.springframework.validation.Validator</code> if your bean requires the Spring Validation API:, +					To associate a declaration with an implementation, each @Constraint annotation references a corresponding ValidationConstraint implementation class., +					At runtime, a <code>ConstraintValidatorFactory</code> instantiates the referenced implementation when the constraint annotation is encountered in your domain model., +					By default, the <code>LocalValidatorFactoryBean</code> configures a <code>SpringConstraintValidatorFactory</code> that uses Spring to create ConstraintValidator instances., +					Shown below is an example of a custom Constraint declaration, followed by an associated <code>ConstraintValidator</code> implementation that uses Spring for dependency injection:, +					As you can see, a ConstraintValidator implementation may have its dependencies @Autowired like any other Spring bean., +					There are a number of other configuration options for various JSR-303 constructs, from message interpolation to traversal resolution., +				Once configured, the Validator may be invoked by calling <code>binder.validate()</code>., +				When working with the DataBinder programatically, this can be used to invoke validation logic after binding to a target object:, +Foo target = new Foo();, +DataBinder binder = new DataBinder(target);, +// bind to the target object, +// validate the target object, +					With JSR-303, the default <code>javax.validation.Validator</code> implementation is generic., +					To configure such a general purpose Validator for use by Spring MVC, simply inject a <code>LocalValidatorFactoryBean</code> reference into the <code>WebBindingInitializer</code>., +					<code>LocalValidatorFactoryBean</code> already implements <code>org.springframework.validation.Validator</code>, and delegates to the JSR-303 provider underneath., +					With this configuration, anytime a @Valid @Controller method argument is encountered, it will be validated by the JSR-303 provider., +					JSR-303, in turn, will enforce any constraints declared against the argument., +					Any ConstaintViolations will automatically be exposed as BindingResults renderable by standard Spring MVC form tags.]