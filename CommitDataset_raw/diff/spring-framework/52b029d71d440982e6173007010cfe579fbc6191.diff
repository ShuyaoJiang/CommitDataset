[+++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, +		return getQualifiedMethodName(method, null);, +	}, +, +	/**, +	 * Return the qualified name of the given method, consisting of, +	 * fully qualified interface/class name + "." + method name., +	 * @param method the method, +	 * @param clazz the clazz that the method is being invoked on, +	 * (may be {@code null} to indicate the method's declaring class), +	 * @return the qualified name of the method, +	 * @since 4.3.4, +	 */, +	public static String getQualifiedMethodName(Method method, Class<?> clazz) {, +		return (clazz != null ? clazz : method.getDeclaringClass()).getName() + '.' + method.getName();, +				throw new IllegalStateException("Expected method not found: " + clazz.getName() + '.' + methodName);, +				throw new IllegalStateException("No unique method found: " + clazz.getName() + '.' + methodName);, +			return classPackageAsResourcePath(clazz) + '/' + resourceName;, +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, +		return getQualifiedMethodName(method, null);, +	}, +, +	/**, +	 * Return the qualified name of the given method, consisting of, +	 * fully qualified interface/class name + "." + method name., +	 * @param method the method, +	 * @param clazz the clazz that the method is being invoked on, +	 * (may be {@code null} to indicate the method's declaring class), +	 * @return the qualified name of the method, +	 * @since 4.3.4, +	 */, +	public static String getQualifiedMethodName(Method method, Class<?> clazz) {, +		return (clazz != null ? clazz : method.getDeclaringClass()).getName() + '.' + method.getName();, +				throw new IllegalStateException("Expected method not found: " + clazz.getName() + '.' + methodName);, +				throw new IllegalStateException("No unique method found: " + clazz.getName() + '.' + methodName);, +			return classPackageAsResourcePath(clazz) + '/' + resourceName;, +++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/AbstractFallbackTransactionAttributeSource.java, +			TransactionAttribute txAttr = computeTransactionAttribute(method, targetClass);, +			if (txAttr == null) {, +				String methodIdentification = ClassUtils.getQualifiedMethodName(method, targetClass);, +				if (txAttr instanceof DefaultTransactionAttribute) {, +					((DefaultTransactionAttribute) txAttr).setDescriptor(methodIdentification);, +				}, +					logger.debug("Adding transactional method '" + methodIdentification + "' with attribute: " + txAttr);, +				this.attributeCache.put(cacheKey, txAttr);, +			return txAttr;, +		TransactionAttribute txAttr = findTransactionAttribute(specificMethod);, +		if (txAttr != null) {, +			return txAttr;, +		txAttr = findTransactionAttribute(specificMethod.getDeclaringClass());, +		if (txAttr != null && ClassUtils.isUserLevelMethod(method)) {, +			return txAttr;, +			txAttr = findTransactionAttribute(method);, +			if (txAttr != null) {, +				return txAttr;, +			txAttr = findTransactionAttribute(method.getDeclaringClass());, +			if (txAttr != null && ClassUtils.isUserLevelMethod(method)) {, +				return txAttr;, +++ b/spring-core/src/main/java/org/springframework/util/ClassUtils.java, +		return getQualifiedMethodName(method, null);, +	}, +, +	/**, +	 * Return the qualified name of the given method, consisting of, +	 * fully qualified interface/class name + "." + method name., +	 * @param method the method, +	 * @param clazz the clazz that the method is being invoked on, +	 * (may be {@code null} to indicate the method's declaring class), +	 * @return the qualified name of the method, +	 * @since 4.3.4, +	 */, +	public static String getQualifiedMethodName(Method method, Class<?> clazz) {, +		return (clazz != null ? clazz : method.getDeclaringClass()).getName() + '.' + method.getName();, +				throw new IllegalStateException("Expected method not found: " + clazz.getName() + '.' + methodName);, +				throw new IllegalStateException("No unique method found: " + clazz.getName() + '.' + methodName);, +			return classPackageAsResourcePath(clazz) + '/' + resourceName;, +++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/AbstractFallbackTransactionAttributeSource.java, +			TransactionAttribute txAttr = computeTransactionAttribute(method, targetClass);, +			if (txAttr == null) {, +				String methodIdentification = ClassUtils.getQualifiedMethodName(method, targetClass);, +				if (txAttr instanceof DefaultTransactionAttribute) {, +					((DefaultTransactionAttribute) txAttr).setDescriptor(methodIdentification);, +				}, +					logger.debug("Adding transactional method '" + methodIdentification + "' with attribute: " + txAttr);, +				this.attributeCache.put(cacheKey, txAttr);, +			return txAttr;, +		TransactionAttribute txAttr = findTransactionAttribute(specificMethod);, +		if (txAttr != null) {, +			return txAttr;, +		txAttr = findTransactionAttribute(specificMethod.getDeclaringClass());, +		if (txAttr != null && ClassUtils.isUserLevelMethod(method)) {, +			return txAttr;, +			txAttr = findTransactionAttribute(method);, +			if (txAttr != null) {, +				return txAttr;, +			txAttr = findTransactionAttribute(method.getDeclaringClass());, +			if (txAttr != null && ClassUtils.isUserLevelMethod(method)) {, +				return txAttr;, +++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/DefaultTransactionAttribute.java, + * Copyright 2002-2016 the original author or authors.]