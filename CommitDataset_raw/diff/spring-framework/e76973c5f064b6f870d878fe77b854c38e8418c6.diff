[+++ b/src/docs/asciidoc/web/webflux.adoc, +supported through a dedicated <<webflux-resulthandling,HandlerResultHandler>> that uses, +``ViewResolver``'s to map a String, representing a logical view name, to a `View`, +instance. The `View` is then used to render the response., +, +, +[[webflux-viewresolution-handling]], +==== Handling, +[.small]#<<web.adoc#mvc-handling,Same in Spring MVC>>#, +from the handler, and also the model that contains attributes added during request, +handling. The  return value is processed as one of the following:, +* `void` -- select a default view name based on the request path minus the leading and, +trailing slash, and resolve it to a `View`. The same also happens when a view name, +was not provided, e.g. model attribute was returned, or an async return value, e.g., +`Mono` completed empty., +view resolution scenarios; explore the options in your IDE with code completion., +* `Model`, `Map` -- extra model attributes to be added to the model for the request., +* Any other -- any other return value (except for simple types, as determined by, +{api-spring-framework}/beans/BeanUtils.html#isSimpleProperty-java.lang.Class-[BeanUtils#isSimpleProperty]), +is treated as a model attribute to be added to the model. The attribute name is derived, +from the Class name, using {api-spring-framework}/core/Conventions.html[Conventions],, +unless a handler method `@ModelAttribute` annotation is present., +to rendering, `AbstractView` resolves such model attributes into concrete values, +To configure view resolution is as simple as adding a `ViewResolutionResultHandler` bean, +to your Spring configuration. <<webflux-config-view-resolvers,WebFlux Config>> provides a, +dedicated configuration API for view resolution., +, +==== Redirecting, +The `ViewResolverRegistry` has shortcuts for view technologies that the Spring Framework, +integrates with. Here is an example with FreeMarker which also requires configuring the, +underlying FreeMarker view technology:, +, +		@Override, +		public void configureViewResolvers(ViewResolverRegistry registry) {, +			registry.freeMarker();, +		}, +, +		// Configure Freemarker..., +You can also plug in any `ViewResolver` implementation:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Configuration, +	@EnableWebFlux, +	public class WebConfig implements WebFluxConfigurer {, +, +, +		@Override, +		public void configureViewResolvers(ViewResolverRegistry registry) {, +			ViewResolver resolver = ... ;, +			registry.viewResolver(resolver);, +		}, +	}, +----, +, +To support <<webflux-multiple-representations>> and rendering other formats, +through view resolution, besides HTML, you can configure one or more default views based, +on the `HttpMessageWriterView` implementation which accepts any of the available, +<<webflux-codecs>> from `spring-web`:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +	@Configuration, +	@EnableWebFlux, +	public class WebConfig implements WebFluxConfigurer {, +, +, +		@Override, +		public void configureViewResolvers(ViewResolverRegistry registry) {, +			registry.freeMarker();, +, +			Jackson2JsonEncoder encoder = new Jackson2JsonEncoder();, +			registry.defaultViews(new HttpMessageWriterView(encoder));, +		}, +, +		// ..., +	}, +----, +, +, +++ b/src/docs/asciidoc/web/webflux.adoc, +supported through a dedicated <<webflux-resulthandling,HandlerResultHandler>> that uses, +``ViewResolver``'s to map a String, representing a logical view name, to a `View`, +instance. The `View` is then used to render the response., +, +, +[[webflux-viewresolution-handling]], +==== Handling, +[.small]#<<web.adoc#mvc-handling,Same in Spring MVC>>#, +from the handler, and also the model that contains attributes added during request, +handling. The  return value is processed as one of the following:, +* `void` -- select a default view name based on the request path minus the leading and, +trailing slash, and resolve it to a `View`. The same also happens when a view name, +was not provided, e.g. model attribute was returned, or an async return value, e.g., +`Mono` completed empty., +view resolution scenarios; explore the options in your IDE with code completion., +* `Model`, `Map` -- extra model attributes to be added to the model for the request., +* Any other -- any other return value (except for simple types, as determined by]