[+++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.aop.framework.AopProxyUtils;, +		Class<?> targetClass = AopProxyUtils.ultimateTargetClass(bean);, +++ b/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.aop.framework.AopProxyUtils;, +		Class<?> targetClass = AopProxyUtils.ultimateTargetClass(bean);, +++ b/spring-context/src/test/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessorTests.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.aop.framework.ProxyFactory;, +	@Test, +	public void severalFixedRatesAgainstNestedCglibProxy() {, +		BeanDefinition processorDefinition = new RootBeanDefinition(ScheduledAnnotationBeanPostProcessor.class);, +		BeanDefinition targetDefinition = new RootBeanDefinition(SeveralFixedRatesWithRepeatedScheduledAnnotationTestBean.class);, +		targetDefinition.setFactoryMethodName("nestedProxy");, +		severalFixedRates(context, processorDefinition, targetDefinition);, +	}, +, +, +		static SeveralFixedRatesWithRepeatedScheduledAnnotationTestBean nestedProxy() {, +			ProxyFactory pf1 = new ProxyFactory(new SeveralFixedRatesWithRepeatedScheduledAnnotationTestBean());, +			pf1.setProxyTargetClass(true);, +			ProxyFactory pf2 = new ProxyFactory(pf1.getProxy());, +			pf2.setProxyTargetClass(true);, +			return (SeveralFixedRatesWithRepeatedScheduledAnnotationTestBean) pf2.getProxy();, +		}]