[+++ b/spring-web-reactive/src/test/java/org/springframework/core/codec/support/JacksonJsonDecoderTests.java, +import java.lang.reflect.Method;, +import java.util.Arrays;, +import java.util.List;, +, +import org.junit.Ignore;, + * Unit tests for {@link JacksonJsonDecoder}., + * @author Rossen Stoyanchev, +		JacksonJsonDecoder decoder = new JacksonJsonDecoder();, +, +		assertTrue(decoder.canDecode(null, MediaType.APPLICATION_JSON));, +		assertFalse(decoder.canDecode(null, MediaType.APPLICATION_XML));, +	public void decodePojo() {, +		Flux<DataBuffer> source = Flux.just(stringBuffer("{\"foo\": \"foofoo\", \"bar\": \"barbar\"}"));, +		ResolvableType elementType = ResolvableType.forClass(Pojo.class);, +		Flux<Object> flux = new JacksonJsonDecoder().decode(source, elementType, null);, +, +		TestSubscriber.subscribe(flux).assertNoError().assertComplete()., +				assertValues(new Pojo("foofoo", "barbar"));, +	@Test, +	@Ignore // Issues 112 (no generic type), otherwise works, +	public void decodeToListWithoutObjectDecoder() throws Exception {, +		Flux<DataBuffer> source = Flux.just(stringBuffer(, +				"[{\"bar\":\"b1\",\"foo\":\"f1\"},{\"bar\":\"b2\",\"foo\":\"f2\"}]"));, +, +		Method method = getClass().getDeclaredMethod("handle", List.class);, +		ResolvableType elementType = ResolvableType.forMethodParameter(method, 0);, +		Flux<Object> flux = new JacksonJsonDecoder().decode(source, elementType, null);, +, +		TestSubscriber.subscribe(flux).assertNoError().assertComplete()., +				assertValues(Arrays.asList(new Pojo("f1", "b1"), new Pojo("f2", "b2")));, +	}, +, +	@Test, +	@Ignore // Issue 109, +	public void decodeToFluxWithoutObjectDecoder() throws Exception {, +		Flux<DataBuffer> source = Flux.just(stringBuffer(, +				"[{\"bar\":\"b1\",\"foo\":\"f1\"},{\"bar\":\"b2\",\"foo\":\"f2\"}]"));, +, +		ResolvableType elementType = ResolvableType.forClass(Pojo.class);, +		Flux<Object> flux = new JacksonJsonDecoder().decode(source, elementType, null);, +, +		TestSubscriber.subscribe(flux).assertNoError().assertComplete()., +				assertValues(new Pojo("f1", "b1"), new Pojo("f2", "b2"));, +	}, +, +	@Test, +	@Ignore // Issue 109, +	public void decodeToListWithObjectDecoder() throws Exception {, +		Flux<DataBuffer> source = Flux.just(stringBuffer(, +				"[{\"bar\":\"b1\",\"foo\":\"f1\"},{\"bar\":\"b2\",\"foo\":\"f2\"}]"));, +, +		Method method = getClass().getDeclaredMethod("handle", List.class);, +		ResolvableType elementType = ResolvableType.forMethodParameter(method, 0);, +		Flux<Object> flux = new JacksonJsonDecoder(new JsonObjectDecoder()).decode(source, elementType, null);, +, +		TestSubscriber.subscribe(flux).assertNoError().assertComplete()., +				assertValues(Arrays.asList(new Pojo("f1", "b1"), new Pojo("f2", "b2")));, +	}, +, +	@Test, +	public void decodeToFluxWithObjectDecoder() throws Exception {, +		Flux<DataBuffer> source = Flux.just(stringBuffer(, +				"[{\"bar\":\"b1\",\"foo\":\"f1\"},{\"bar\":\"b2\",\"foo\":\"f2\"}]"));, +, +		ResolvableType elementType = ResolvableType.forClass(Pojo.class);, +		Flux<Object> flux = new JacksonJsonDecoder(new JsonObjectDecoder()).decode(source, elementType, null);, +, +		TestSubscriber.subscribe(flux).assertNoError().assertComplete()., +				assertValues(new Pojo("f1", "b1"), new Pojo("f2", "b2"));, +	}, +, +	@SuppressWarnings("unused"), +	void handle(List<Pojo> list) {, +	}, +, +]