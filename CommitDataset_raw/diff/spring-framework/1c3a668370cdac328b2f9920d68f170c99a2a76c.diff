[+++ b/spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java, + * Copyright 2002-2015 the original author or authors., +			URL actualUrl = ResourceUtils.extractArchiveURL(url);, +++ b/spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java, + * Copyright 2002-2015 the original author or authors., +			URL actualUrl = ResourceUtils.extractArchiveURL(url);, +++ b/spring-core/src/main/java/org/springframework/util/ResourceUtils.java, +	/** URL prefix for loading from a jar file: "jar:" */, +	/** URL prefix for loading from a war file on Tomcat: "war:" */, +	public static final String WAR_URL_PREFIX = "war:";, +, +	/** Special separator between WAR URL and jar part on Tomcat */, +	public static final String WAR_URL_SEPARATOR = "*/";, +, +				URL_PROTOCOL_VFSZIP.equals(protocol) || URL_PROTOCOL_WSJAR.equals(protocol));, +		int separatorIndex = urlFile.indexOf(JAR_URL_SEPARATOR);, +		if (separatorIndex != -1) {, +			String jarFile = urlFile.substring(0, separatorIndex);, +	 * Extract the URL for the outermost archive from the given jar/war URL, +	 * (which may point to a resource in a jar file or to a jar file itself)., +	 * <p>In the case of a jar file nested within a war file, this will return, +	 * a URL to the war file since that is the one resolvable in the file system., +	 * @param jarUrl the original URL, +	 * @return the URL for the actual jar file, +	 * @throws MalformedURLException if no valid jar file URL could be extracted, +	 * @since 4.1.8, +	 * @see #extractJarFileURL(URL), +	 */, +	public static URL extractArchiveURL(URL jarUrl) throws MalformedURLException {, +		String urlFile = jarUrl.getFile();, +, +		int endIndex = urlFile.indexOf(WAR_URL_SEPARATOR);, +		if (endIndex != -1) {, +			// Tomcat's "jar:war:file:...mywar.war*/WEB-INF/lib/myjar.jar!/myentry.txt", +			String warFile = urlFile.substring(0, endIndex);, +			int startIndex = warFile.indexOf(WAR_URL_PREFIX);, +			if (startIndex != -1) {, +				return new URL(warFile.substring(startIndex + WAR_URL_PREFIX.length()));, +			}, +		}, +, +		// Regular "jar:file:...myjar.jar!/myentry.txt", +		return extractJarFileURL(jarUrl);, +	}, +, +	/**, +++ b/spring-core/src/main/java/org/springframework/core/io/AbstractFileResolvingResource.java, + * Copyright 2002-2015 the original author or authors., +			URL actualUrl = ResourceUtils.extractArchiveURL(url);, +++ b/spring-core/src/main/java/org/springframework/util/ResourceUtils.java, +	/** URL prefix for loading from a jar file: "jar:" */, +	/** URL prefix for loading from a war file on Tomcat: "war:" */, +	public static final String WAR_URL_PREFIX = "war:";, +, +	/** Special separator between WAR URL and jar part on Tomcat */, +	public static final String WAR_URL_SEPARATOR = "*/";, +, +				URL_PROTOCOL_VFSZIP.equals(protocol) || URL_PROTOCOL_WSJAR.equals(protocol));, +		int separatorIndex = urlFile.indexOf(JAR_URL_SEPARATOR);, +		if (separatorIndex != -1) {, +			String jarFile = urlFile.substring(0, separatorIndex);, +	 * Extract the URL for the outermost archive from the given jar/war URL, +	 * (which may point to a resource in a jar file or to a jar file itself)., +	 * <p>In the case of a jar file nested within a war file, this will return, +	 * a URL to the war file since that is the one resolvable in the file system., +	 * @param jarUrl the original URL, +	 * @return the URL for the actual jar file, +	 * @throws MalformedURLException if no valid jar file URL could be extracted, +	 * @since 4.1.8, +	 * @see #extractJarFileURL(URL), +	 */, +	public static URL extractArchiveURL(URL jarUrl) throws MalformedURLException {, +		String urlFile = jarUrl.getFile();, +, +		int endIndex = urlFile.indexOf(WAR_URL_SEPARATOR);, +		if (endIndex != -1) {, +			// Tomcat's "jar:war:file:...mywar.war*/WEB-INF/lib/myjar.jar!/myentry.txt", +			String warFile = urlFile.substring(0, endIndex);, +			int startIndex = warFile.indexOf(WAR_URL_PREFIX);, +			if (startIndex != -1) {, +				return new URL(warFile.substring(startIndex + WAR_URL_PREFIX.length()));, +			}, +		}, +, +		// Regular "jar:file:...myjar.jar!/myentry.txt", +		return extractJarFileURL(jarUrl);, +	}, +, +	/**, +++ b/spring-core/src/test/java/org/springframework/util/ResourceUtilsTests.java, +		assertTrue(ResourceUtils.isJarURL(new URL(null, "jar:war:file:mywar.war*/myjar.jar!/mypath", new DummyURLStreamHandler())));, +				ResourceUtils.extractJarFileURL(new URL("file:myjar.jar")));, +		assertEquals(new URL("file:myjar.jar"),, +	}, +, +	@Test, +	public void extractArchiveURL() throws Exception {, +				ResourceUtils.extractArchiveURL(new URL("jar:file:myjar.jar!/mypath")));, +		assertEquals(new URL("file:/myjar.jar"),, +				ResourceUtils.extractArchiveURL(new URL(null, "jar:myjar.jar!/mypath", new DummyURLStreamHandler())));]