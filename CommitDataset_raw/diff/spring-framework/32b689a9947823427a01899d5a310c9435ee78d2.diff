[+++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, +				StringBuilder indexedPropertyName = new StringBuilder(tokens.actualName);, +						value = growArrayIfNecessary(value, index, indexedPropertyName.toString());, +						growCollectionIfNecessary(list, index, indexedPropertyName.toString(), ph, i + 1);, +					indexedPropertyName.append(PROPERTY_KEY_PREFIX).append(key).append(PROPERTY_KEY_SUFFIX);, +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, +				StringBuilder indexedPropertyName = new StringBuilder(tokens.actualName);, +						value = growArrayIfNecessary(value, index, indexedPropertyName.toString());, +						growCollectionIfNecessary(list, index, indexedPropertyName.toString(), ph, i + 1);, +					indexedPropertyName.append(PROPERTY_KEY_PREFIX).append(key).append(PROPERTY_KEY_SUFFIX);, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataContext.java, +		StringBuilder callString;, +			callString = new StringBuilder().append("{? = call ")., +					append(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "")., +					append(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "")., +					append(procedureNameToUse).append("(");, +			callString = new StringBuilder().append("{call ")., +					append(StringUtils.hasLength(catalogNameToUse) ? catalogNameToUse + "." : "")., +					append(StringUtils.hasLength(schemaNameToUse) ? schemaNameToUse + "." : "")., +					append(procedureNameToUse).append("(");, +					callString.append(", ");, +					callString.append(createParameterBinding(parameter));, +		callString.append(")}");, +		return callString.toString();]