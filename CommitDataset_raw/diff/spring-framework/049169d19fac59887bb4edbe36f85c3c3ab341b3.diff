[+++ b/spring-core/src/main/java/org/springframework/core/io/support/EncodedResource.java, + * Copyright 2002-2013 the original author or authors., +import java.io.InputStream;, +import java.nio.charset.Charset;, +	private String encoding;, +, +	private Charset charset;, +		Assert.notNull(resource, "Resource must not be null");, +		this.resource = resource;, +	/**, +	 * Create a new EncodedResource for the given Resource,, +	 * using the specified encoding., +	 * @param resource the Resource to hold, +	 * @param charset the charset to use for reading from the resource, +	 */, +	public EncodedResource(Resource resource, Charset charset) {, +		Assert.notNull(resource, "Resource must not be null");, +		this.resource = resource;, +		this.charset = charset;, +	}, +, +	 * Return the charset to use for reading from the resource,, +	 * or {@code null} if none specified., +	 */, +	public final Charset getCharset() {, +		return this.charset;, +	}, +, +, +	/**, +	 * Determine whether a {@link Reader} is required as opposed to an {@link InputStream},, +	 * i.e. whether an encoding or a charset has been specified., +	 * @see #getReader(), +	 * @see #getInputStream(), +	 */, +	public boolean requiresReader() {, +		return (this.encoding != null || this.charset != null);, +	}, +, +	/**, +	 * @see #requiresReader(), +		if (this.charset != null) {, +			return new InputStreamReader(this.resource.getInputStream(), this.charset);, +		}, +		else if (this.encoding != null) {, +	/**, +	 * Open an {@code java.io.InputStream} for the specified resource,, +	 * typically assuming that there is no specific encoding to use., +	 * @throws IOException if opening the InputStream failed, +	 * @see #requiresReader(), +	 */, +	public InputStream getInputStream() throws IOException {, +		return this.resource.getInputStream();, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/io/support/EncodedResource.java, + * Copyright 2002-2013 the original author or authors., +import java.io.InputStream;, +import java.nio.charset.Charset;, +	private String encoding;, +, +	private Charset charset;, +		Assert.notNull(resource, "Resource must not be null");, +		this.resource = resource;, +	/**, +	 * Create a new EncodedResource for the given Resource,, +	 * using the specified encoding., +	 * @param resource the Resource to hold, +	 * @param charset the charset to use for reading from the resource, +	 */, +	public EncodedResource(Resource resource, Charset charset) {, +		Assert.notNull(resource, "Resource must not be null");, +		this.resource = resource;, +		this.charset = charset;, +	}, +, +	 * Return the charset to use for reading from the resource,, +	 * or {@code null} if none specified., +	 */, +	public final Charset getCharset() {, +		return this.charset;, +	}, +, +, +	/**, +	 * Determine whether a {@link Reader} is required as opposed to an {@link InputStream},, +	 * i.e. whether an encoding or a charset has been specified., +	 * @see #getReader(), +	 * @see #getInputStream(), +	 */, +	public boolean requiresReader() {, +		return (this.encoding != null || this.charset != null);, +	}, +, +	/**, +	 * @see #requiresReader(), +		if (this.charset != null) {, +			return new InputStreamReader(this.resource.getInputStream(), this.charset);, +		}, +		else if (this.encoding != null) {]