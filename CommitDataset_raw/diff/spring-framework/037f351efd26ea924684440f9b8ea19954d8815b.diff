[+++ b/spring-web/src/main/java/org/springframework/web/client/AsyncRestTemplate.java, +	public ListenableFuture<URI> postForLocation(String url, HttpEntity<?> request, Object... uriVars), +		AsyncRequestCallback callback = httpEntityCallback(request);, +		ResponseExtractor<HttpHeaders> extractor = headersExtractor();, +		ListenableFuture<HttpHeaders> future = execute(url, HttpMethod.POST, callback, extractor, uriVars);, +		return adaptToLocationHeader(future);, +	public ListenableFuture<URI> postForLocation(String url, HttpEntity<?> request, Map<String, ?> uriVars), +		AsyncRequestCallback callback = httpEntityCallback(request);, +		ResponseExtractor<HttpHeaders> extractor = headersExtractor();, +		ListenableFuture<HttpHeaders> future = execute(url, HttpMethod.POST, callback, extractor, uriVars);, +		return adaptToLocationHeader(future);, +		AsyncRequestCallback callback = httpEntityCallback(request);, +		ResponseExtractor<HttpHeaders> extractor = headersExtractor();, +		ListenableFuture<HttpHeaders> future = execute(url, HttpMethod.POST, callback, extractor);, +		return adaptToLocationHeader(future);, +	private static ListenableFuture<URI> adaptToLocationHeader(ListenableFuture<HttpHeaders> future) {, +		return new ListenableFutureAdapter<URI, HttpHeaders>(future) {, +			protected URI adapt(HttpHeaders headers) throws ExecutionException {, +	public ListenableFuture<Set<HttpMethod>> optionsForAllow(String url, Object... uriVars) throws RestClientException {, +		ResponseExtractor<HttpHeaders> extractor = headersExtractor();, +		ListenableFuture<HttpHeaders> future = execute(url, HttpMethod.OPTIONS, null, extractor, uriVars);, +		return adaptToAllowHeader(future);, +	public ListenableFuture<Set<HttpMethod>> optionsForAllow(String url, Map<String, ?> uriVars) throws RestClientException {, +		ResponseExtractor<HttpHeaders> extractor = headersExtractor();, +		ListenableFuture<HttpHeaders> future = execute(url, HttpMethod.OPTIONS, null, extractor, uriVars);, +		return adaptToAllowHeader(future);, +		ResponseExtractor<HttpHeaders> extractor = headersExtractor();, +		ListenableFuture<HttpHeaders> future = execute(url, HttpMethod.OPTIONS, null, extractor);, +		return adaptToAllowHeader(future);, +	private static ListenableFuture<Set<HttpMethod>> adaptToAllowHeader(ListenableFuture<HttpHeaders> future) {, +		return new ListenableFutureAdapter<Set<HttpMethod>, HttpHeaders>(future) {, +			protected Set<HttpMethod> adapt(HttpHeaders headers) throws ExecutionException {]