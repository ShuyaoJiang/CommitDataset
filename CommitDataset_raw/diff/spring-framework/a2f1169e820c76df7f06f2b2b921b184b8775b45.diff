[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +		process(element, annotationType, false, new Processor<Object>() {, +, +, +		return Boolean.TRUE.equals(process(element, annotationType, false, new Processor<Boolean>() {, +, +, +		return Boolean.TRUE.equals(process(element, annotationType, false, new Processor<Boolean>() {, +, +, +		return process(element, annotationType, false, new Processor<AnnotationAttributes>() {, +, +, +					if (!AnnotationUtils.VALUE.equals(key)) {, +						Object value = AnnotationUtils.getValue(annotation, key);, +	public static MultiValueMap<String, Object> getAllAnnotationAttributes(AnnotatedElement element,, +			String annotationType) {, +, +, +					if (!AnnotationUtils.VALUE.equals(key)) {, +						Object value = AnnotationUtils.getValue(annotation, key);, +			return doProcess(element, annotationType, traverseClassHierarchy, processor,, +				new HashSet<AnnotatedElement>(), 0);, +			Annotation[] annotations = (traverseClassHierarchy ? element.getDeclaredAnnotations(), +					: element.getAnnotations());, +				if (!AnnotationUtils.isInJavaLangAnnotationPackage(annotation)) {, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +		process(element, annotationType, false, new Processor<Object>() {, +, +, +		return Boolean.TRUE.equals(process(element, annotationType, false, new Processor<Boolean>() {, +, +, +		return Boolean.TRUE.equals(process(element, annotationType, false, new Processor<Boolean>() {, +, +, +		return process(element, annotationType, false, new Processor<AnnotationAttributes>() {, +, +, +					if (!AnnotationUtils.VALUE.equals(key)) {, +						Object value = AnnotationUtils.getValue(annotation, key);, +	public static MultiValueMap<String, Object> getAllAnnotationAttributes(AnnotatedElement element,, +			String annotationType) {, +, +, +					if (!AnnotationUtils.VALUE.equals(key)) {, +						Object value = AnnotationUtils.getValue(annotation, key);, +			return doProcess(element, annotationType, traverseClassHierarchy, processor,, +				new HashSet<AnnotatedElement>(), 0);, +			Annotation[] annotations = (traverseClassHierarchy ? element.getDeclaredAnnotations(), +					: element.getAnnotations());, +				if (!AnnotationUtils.isInJavaLangAnnotationPackage(annotation)) {, +++ b/spring-core/src/main/java/org/springframework/core/type/AnnotatedTypeMetadata.java, + * Copyright 2002-2014 the original author or authors., + * @author Sam Brannen, +	 * defined on the underlying type ({@link AnnotationMetadata class} or, +	 * {@link MethodMetadata method}), as direct annotation or as meta-annotation)., +	 * @see #getAllAnnotationAttributes(String, boolean), +	 * defined on the underlying type ({@link AnnotationMetadata class} or, +	 * {@link MethodMetadata method}), as direct annotation or as meta-annotation)., +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +		process(element, annotationType, false, new Processor<Object>() {, +, +, +		return Boolean.TRUE.equals(process(element, annotationType, false, new Processor<Boolean>() {, +, +, +		return Boolean.TRUE.equals(process(element, annotationType, false, new Processor<Boolean>() {, +, +, +		return process(element, annotationType, false, new Processor<AnnotationAttributes>() {, +, +, +					if (!AnnotationUtils.VALUE.equals(key)) {, +						Object value = AnnotationUtils.getValue(annotation, key);, +	public static MultiValueMap<String, Object> getAllAnnotationAttributes(AnnotatedElement element,, +			String annotationType) {, +, +, +					if (!AnnotationUtils.VALUE.equals(key)) {, +						Object value = AnnotationUtils.getValue(annotation, key);, +			return doProcess(element, annotationType, traverseClassHierarchy, processor,, +				new HashSet<AnnotatedElement>(), 0);, +			Annotation[] annotations = (traverseClassHierarchy ? element.getDeclaredAnnotations(), +					: element.getAnnotations());, +				if (!AnnotationUtils.isInJavaLangAnnotationPackage(annotation)) {, +++ b/spring-core/src/main/java/org/springframework/core/type/AnnotatedTypeMetadata.java, + * Copyright 2002-2014 the original author or authors., + * @author Sam Brannen, +	 * defined on the underlying type ({@link AnnotationMetadata class} or, +	 * {@link MethodMetadata method}), as direct annotation or as meta-annotation)., +	 * @see #getAllAnnotationAttributes(String, boolean), +	 * defined on the underlying type ({@link AnnotationMetadata class} or, +	 * {@link MethodMetadata method}), as direct annotation or as meta-annotation)., +++ b/spring-core/src/main/java/org/springframework/core/type/AnnotationMetadata.java, + * Copyright 2002-2014 the original author or authors., + * @author Sam Brannen, +	 * Return the names of all annotation types that are <em>present</em> on the, +	 * underlying class., +	 * Return the names of all meta-annotation types <em>present</em> on the]