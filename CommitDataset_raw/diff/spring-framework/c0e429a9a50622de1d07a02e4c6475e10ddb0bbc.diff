[+++ b/org.springframework.context/src/main/java/org/springframework/instrument/classloading/websphere/WebSphereClassLoaderAdapter.java, + * Copyright 2002-2011 the original author or authors., + * @since 3.1, +		}, +		catch (Exception ex) {, +		Assert.isInstanceOf(wsCompoundClassLoaderClass, classLoader,, +				"ClassLoader must be instance of [" + COMPOUND_CLASS_LOADER_NAME + "]");, +		}, +		catch (InvocationTargetException ex) {, +		}, +		catch (Exception ex) {, +		}, +		catch (InvocationTargetException ex) {, +		}, +		catch (Exception ex) {, +, +++ b/org.springframework.context/src/main/java/org/springframework/instrument/classloading/websphere/WebSphereClassLoaderAdapter.java, + * Copyright 2002-2011 the original author or authors., + * @since 3.1, +		}, +		catch (Exception ex) {, +		Assert.isInstanceOf(wsCompoundClassLoaderClass, classLoader,, +				"ClassLoader must be instance of [" + COMPOUND_CLASS_LOADER_NAME + "]");, +		}, +		catch (InvocationTargetException ex) {, +		}, +		catch (Exception ex) {, +		}, +		catch (InvocationTargetException ex) {, +		}, +		catch (Exception ex) {, +, +++ b/org.springframework.context/src/main/java/org/springframework/instrument/classloading/websphere/WebSphereClassPreDefinePlugin.java, + * Copyright 2002-2011 the original author or authors., + * Adapter that implements WebSphere 7.0 ClassPreProcessPlugin interface,, + * delegating to a standard JDK {@link ClassFileTransformer} underneath., + * @since 3.1, +	 * Create a new {@link WebSphereClassPreDefinePlugin}., +	 * @param transformer the {@link ClassFileTransformer} to be adapted, +	 * (must not be <code>null</code>), +		}, +		catch (Throwable ex) {, +, +			return (proxy == args[0]);, +		}, +		else if ("hashCode".equals(name)) {, +		}, +		else if ("toString".equals(name)) {, +		}, +		else if ("transformClass".equals(name)) {, +		}, +		else {, +	protected byte[] transform(String className, byte[] classfileBuffer, CodeSource codeSource, ClassLoader classLoader), +		// NB: WebSphere passes className as "." without class while the transformer expects a VM, "/" format, +		byte[] result = transformer.transform(classLoader, className.replace('.', '/'), null, null, classfileBuffer);, +, +, +	private static class Dummy {, +	}, +, +++ b/org.springframework.context/src/main/java/org/springframework/instrument/classloading/websphere/WebSphereClassLoaderAdapter.java, + * Copyright 2002-2011 the original author or authors., + * @since 3.1, +		}, +		catch (Exception ex) {, +		Assert.isInstanceOf(wsCompoundClassLoaderClass, classLoader,, +				"ClassLoader must be instance of [" + COMPOUND_CLASS_LOADER_NAME + "]");, +		}, +		catch (InvocationTargetException ex) {, +		}, +		catch (Exception ex) {, +		}, +		catch (InvocationTargetException ex) {, +		}, +		catch (Exception ex) {, +, +++ b/org.springframework.context/src/main/java/org/springframework/instrument/classloading/websphere/WebSphereClassPreDefinePlugin.java, + * Copyright 2002-2011 the original author or authors., + * Adapter that implements WebSphere 7.0 ClassPreProcessPlugin interface,, + * delegating to a standard JDK {@link ClassFileTransformer} underneath., + * @since 3.1, +	 * Create a new {@link WebSphereClassPreDefinePlugin}., +	 * @param transformer the {@link ClassFileTransformer} to be adapted, +	 * (must not be <code>null</code>), +		}, +		catch (Throwable ex) {, +, +			return (proxy == args[0]);, +		}, +		else if ("hashCode".equals(name)) {, +		}, +		else if ("toString".equals(name)) {, +		}, +		else if ("transformClass".equals(name)) {, +		}, +		else {, +	protected byte[] transform(String className, byte[] classfileBuffer, CodeSource codeSource, ClassLoader classLoader), +		// NB: WebSphere passes className as "." without class while the transformer expects a VM, "/" format, +		byte[] result = transformer.transform(classLoader, className.replace('.', '/'), null, null, classfileBuffer);, +]