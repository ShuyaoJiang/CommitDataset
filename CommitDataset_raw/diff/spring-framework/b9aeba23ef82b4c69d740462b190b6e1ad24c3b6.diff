[+++ b/org.springframework.context/src/test/java/org/springframework/context/support/ConversionServiceFactoryBeanTests.java, +		//assertTrue(tb.getResource() instanceof ClassPathResource);, +		//assertTrue(tb.getResourceArray().length > 0);, +		//assertTrue(tb.getResourceArray()[0] instanceof ClassPathResource);, +		//assertTrue(tb.getResourceMap().size() == 1);, +		//assertTrue(tb.getResourceArrayMap().size() == 1);, +		//assertTrue(tb.getResourceArrayMap().get("key1").length > 0);, +		//assertTrue(tb.getResourceArrayMap().get("key1")[0] instanceof ClassPathResource);, +++ b/org.springframework.context/src/test/java/org/springframework/context/support/ConversionServiceFactoryBeanTests.java, +		//assertTrue(tb.getResource() instanceof ClassPathResource);, +		//assertTrue(tb.getResourceArray().length > 0);, +		//assertTrue(tb.getResourceArray()[0] instanceof ClassPathResource);, +		//assertTrue(tb.getResourceMap().size() == 1);, +		//assertTrue(tb.getResourceArrayMap().size() == 1);, +		//assertTrue(tb.getResourceArrayMap().get("key1").length > 0);, +		//assertTrue(tb.getResourceArrayMap().get("key1")[0] instanceof ClassPathResource);, +++ b/org.springframework.context/src/test/java/org/springframework/context/support/conversionService.xml, +++ b/org.springframework.context/src/test/java/org/springframework/context/support/ConversionServiceFactoryBeanTests.java, +		//assertTrue(tb.getResource() instanceof ClassPathResource);, +		//assertTrue(tb.getResourceArray().length > 0);, +		//assertTrue(tb.getResourceArray()[0] instanceof ClassPathResource);, +		//assertTrue(tb.getResourceMap().size() == 1);, +		//assertTrue(tb.getResourceArrayMap().size() == 1);, +		//assertTrue(tb.getResourceArrayMap().get("key1").length > 0);, +		//assertTrue(tb.getResourceArrayMap().get("key1")[0] instanceof ClassPathResource);, +++ b/org.springframework.context/src/test/java/org/springframework/context/support/conversionService.xml, +++ b/org.springframework.context/src/test/resources/log4j.xml, +	<logger name="org.springframework.core">, +		<level value="info" />, +	</logger>, +++ b/org.springframework.context/src/test/java/org/springframework/context/support/ConversionServiceFactoryBeanTests.java, +		//assertTrue(tb.getResource() instanceof ClassPathResource);, +		//assertTrue(tb.getResourceArray().length > 0);, +		//assertTrue(tb.getResourceArray()[0] instanceof ClassPathResource);, +		//assertTrue(tb.getResourceMap().size() == 1);, +		//assertTrue(tb.getResourceArrayMap().size() == 1);, +		//assertTrue(tb.getResourceArrayMap().get("key1").length > 0);, +		//assertTrue(tb.getResourceArrayMap().get("key1")[0] instanceof ClassPathResource);, +++ b/org.springframework.context/src/test/java/org/springframework/context/support/conversionService.xml, +++ b/org.springframework.context/src/test/resources/log4j.xml, +	<logger name="org.springframework.core">, +		<level value="info" />, +	</logger>, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +		if (isCollection()) {, +			return targetType.isCollection() && getElementTypeDescriptor().isAssignableTo(targetType.getElementTypeDescriptor());			, +		} else if (isMap()) {, +			return targetType.isMap() && getMapKeyTypeDescriptor().isAssignableTo(targetType.getMapKeyTypeDescriptor()) && getMapValueTypeDescriptor().isAssignableTo(targetType.getMapValueTypeDescriptor());, +		} else if (isArray()) {, +			return targetType.isArray() && getElementTypeDescriptor().isAssignableTo(targetType.getElementTypeDescriptor());				, +		} else {, +	}, +++ b/org.springframework.context/src/test/java/org/springframework/context/support/ConversionServiceFactoryBeanTests.java, +		//assertTrue(tb.getResource() instanceof ClassPathResource);, +		//assertTrue(tb.getResourceArray().length > 0);, +		//assertTrue(tb.getResourceArray()[0] instanceof ClassPathResource);, +		//assertTrue(tb.getResourceMap().size() == 1);, +		//assertTrue(tb.getResourceArrayMap().size() == 1);, +		//assertTrue(tb.getResourceArrayMap().get("key1").length > 0);, +		//assertTrue(tb.getResourceArrayMap().get("key1")[0] instanceof ClassPathResource);, +++ b/org.springframework.context/src/test/java/org/springframework/context/support/conversionService.xml, +++ b/org.springframework.context/src/test/resources/log4j.xml, +	<logger name="org.springframework.core">, +		<level value="info" />, +	</logger>, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +		if (isCollection()) {, +			return targetType.isCollection() && getElementTypeDescriptor().isAssignableTo(targetType.getElementTypeDescriptor());			, +		} else if (isMap()) {, +			return targetType.isMap() && getMapKeyTypeDescriptor().isAssignableTo(targetType.getMapKeyTypeDescriptor()) && getMapValueTypeDescriptor().isAssignableTo(targetType.getMapValueTypeDescriptor());, +		} else if (isArray()) {, +			return targetType.isArray() && getElementTypeDescriptor().isAssignableTo(targetType.getElementTypeDescriptor());				, +		} else {, +	}, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, +			if (logger.isDebugEnabled()) {, +				logger.debug("Matched default NO_OP_CONVERTER");, +			}, +				if (logger.isTraceEnabled()) {, +					logger.trace("Looking for converters indexed by sourceType [" + currentClass.getName() + "]");, +				}, +				if (logger.isTraceEnabled()) {, +					logger.trace("Looking for converters indexed by sourceType [" + currentClass.getName() + "]");, +				}, +				if (logger.isTraceEnabled()) {, +					logger.trace("and indexed by targetType [" + currentClass.getName() + "]");, +				}, +			if (logger.isTraceEnabled()) {, +				logger.trace("and indexed by [java.lang.Object]");, +			}							, +				if (logger.isTraceEnabled()) {, +					logger.trace("and indexed by targetType [" + currentClass.getName() + "]");, +				}				, +	private GenericConverter matchConverter(MatchableConverters matchable, TypeDescriptor sourceFieldType, TypeDescriptor targetFieldType) {, +		if (matchable == null) {, +			return null;, +		}, +		if (logger.isTraceEnabled()) {, +			logger.trace("Found matchable converters " + matchable);, +		}]