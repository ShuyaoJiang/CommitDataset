[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionValueResolver.java, + * Copyright 2002-2014 the original author or authors., +, +			String innerBeanName = "(inner bean)" + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR +, +					ObjectUtils.getIdentityHexString(bd);, +			return resolveInnerBean(argName, innerBeanName, bd);, +			String actualInnerBeanName = innerBeanName;, +			if (mbd.isSingleton()) {, +				actualInnerBeanName = adaptInnerBeanName(innerBeanName);, +			}, +					this.beanFactory.getBean(dependsOnBean);, +			// Actually create the inner bean instance now..., +				return this.beanFactory.getObjectFromFactoryBean(, +						(FactoryBean<?>) innerBean, actualInnerBeanName, !synthetic);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionValueResolver.java, + * Copyright 2002-2014 the original author or authors., +, +			String innerBeanName = "(inner bean)" + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR +, +					ObjectUtils.getIdentityHexString(bd);, +			return resolveInnerBean(argName, innerBeanName, bd);, +			String actualInnerBeanName = innerBeanName;, +			if (mbd.isSingleton()) {, +				actualInnerBeanName = adaptInnerBeanName(innerBeanName);, +			}, +					this.beanFactory.getBean(dependsOnBean);, +			// Actually create the inner bean instance now..., +				return this.beanFactory.getObjectFromFactoryBean(, +						(FactoryBean<?>) innerBean, actualInnerBeanName, !synthetic);, +++ b/spring-context/src/test/java/org/springframework/beans/factory/xml/XmlBeanFactoryTests-reftypes.xml, +	<bean id="hasInnerBeansAsPrototype" class="org.springframework.tests.sample.beans.TestBean" scope="prototype">, +		<constructor-arg>, +			<bean id="innerBean" class="org.springframework.tests.sample.beans.TestBean" destroy-method="destroy">, +				<constructor-arg><value>inner1</value></constructor-arg>, +				<constructor-arg type="int"><value>6</value></constructor-arg>, +			</bean>, +		</constructor-arg>, +	</bean>, +, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionValueResolver.java, + * Copyright 2002-2014 the original author or authors., +, +			String innerBeanName = "(inner bean)" + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR +, +					ObjectUtils.getIdentityHexString(bd);, +			return resolveInnerBean(argName, innerBeanName, bd);, +			String actualInnerBeanName = innerBeanName;, +			if (mbd.isSingleton()) {, +				actualInnerBeanName = adaptInnerBeanName(innerBeanName);, +			}, +					this.beanFactory.getBean(dependsOnBean);, +			// Actually create the inner bean instance now..., +				return this.beanFactory.getObjectFromFactoryBean(, +						(FactoryBean<?>) innerBean, actualInnerBeanName, !synthetic);, +++ b/spring-context/src/test/java/org/springframework/beans/factory/xml/XmlBeanFactoryTests-reftypes.xml, +	<bean id="hasInnerBeansAsPrototype" class="org.springframework.tests.sample.beans.TestBean" scope="prototype">, +		<constructor-arg>, +			<bean id="innerBean" class="org.springframework.tests.sample.beans.TestBean" destroy-method="destroy">, +				<constructor-arg><value>inner1</value></constructor-arg>, +				<constructor-arg type="int"><value>6</value></constructor-arg>, +			</bean>, +		</constructor-arg>, +	</bean>, +, +++ b/spring-context/src/test/java/org/springframework/beans/factory/xml/XmlBeanFactoryTests.java, +import org.xml.sax.InputSource;, +		hasInnerBeansForConstructor = (TestBean) xbf.getBean("hasInnerBeansAsPrototype");, +		innerForConstructor = (TestBean) hasInnerBeansForConstructor.getSpouse();, +		assertNotNull(innerForConstructor);, +		assertEquals("innerBean", innerForConstructor.getBeanName());, +		assertEquals("inner1", innerForConstructor.getName());, +		assertEquals(6, innerForConstructor.getAge());, +, +		hasInnerBeansForConstructor = (TestBean) xbf.getBean("hasInnerBeansAsPrototype");, +		innerForConstructor = (TestBean) hasInnerBeansForConstructor.getSpouse();, +		assertNotNull(innerForConstructor);, +		assertEquals("innerBean", innerForConstructor.getBeanName());, +		assertEquals("inner1", innerForConstructor.getName());, +		assertEquals(6, innerForConstructor.getAge());, +]