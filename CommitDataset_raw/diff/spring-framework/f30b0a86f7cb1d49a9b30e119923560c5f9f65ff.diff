[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +					DependencyDescriptor desc = new AutowireByTypeDependencyDescriptor(methodParam, eager);, +, +	/**, +	 * Special DependencyDescriptor variant for autowire="byType"., +	 * Always optional; never considering the parameter name for choosing a primary candidate., +	 */, +	private static class AutowireByTypeDependencyDescriptor extends DependencyDescriptor {, +, +		public AutowireByTypeDependencyDescriptor(MethodParameter methodParameter, boolean eager) {, +			super(methodParameter, false, eager);, +		}, +, +		@Override, +		public String getDependencyName() {, +			return null;, +		}, +	}, +, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java, +					DependencyDescriptor desc = new AutowireByTypeDependencyDescriptor(methodParam, eager);, +, +	/**, +	 * Special DependencyDescriptor variant for autowire="byType"., +	 * Always optional; never considering the parameter name for choosing a primary candidate., +	 */, +	private static class AutowireByTypeDependencyDescriptor extends DependencyDescriptor {, +, +		public AutowireByTypeDependencyDescriptor(MethodParameter methodParameter, boolean eager) {, +			super(methodParameter, false, eager);, +		}, +, +		@Override, +		public String getDependencyName() {, +			return null;, +		}, +	}, +, +++ b/org.springframework.beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java, +import static org.junit.Assert.*;, +import test.beans.DerivedTestBean;, +import test.beans.DummyFactory;, +import test.beans.ITestBean;, +import test.beans.LifecycleBean;, +import test.beans.NestedTestBean;, +import test.beans.TestBean;, +, +import org.springframework.core.LocalVariableTableParameterNameDiscoverer;, +		RootBeanDefinition bd = new RootBeanDefinition(TestBean.class);, +		RootBeanDefinition bd = new RootBeanDefinition(TestBean.class);, +		RootBeanDefinition bd = new RootBeanDefinition(TestBean.class);, +		RootBeanDefinition bd = new RootBeanDefinition(TestBean.class);, +		RootBeanDefinition bd = new RootBeanDefinition(TestBean.class);, +		RootBeanDefinition bd = new RootBeanDefinition(TestBean.class);, +		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class);, +		RootBeanDefinition bd = new RootBeanDefinition(LazyInitFactory.class);, +		RootBeanDefinition bd = new RootBeanDefinition(TestBean.class);, +		RootBeanDefinition bd2 = new RootBeanDefinition(TestBean.class);, +		lbf.registerBeanDefinition("spouse", bd2);, +			assertTrue(ex.getMessage().indexOf("spouse") != -1);, +		}, +	}, +, +	@Test, +	public void testAutowireBeanByTypeWithTwoMatchesAndParameterNameDiscovery() {, +		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory();, +		lbf.setParameterNameDiscoverer(new LocalVariableTableParameterNameDiscoverer());, +		RootBeanDefinition bd = new RootBeanDefinition(TestBean.class);, +		RootBeanDefinition bd2 = new RootBeanDefinition(TestBean.class);, +		lbf.registerBeanDefinition("test", bd);, +		lbf.registerBeanDefinition("spouse", bd2);, +		try {, +			lbf.autowire(DependenciesBean.class, AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE, true);, +			fail("Should have thrown UnsatisfiedDependencyException");, +		}, +		catch (UnsatisfiedDependencyException ex) {, +			// expected, +			assertTrue(ex.getMessage().indexOf("test") != -1);, +			assertTrue(ex.getMessage().indexOf("spouse") != -1);, +		RootBeanDefinition bd = new RootBeanDefinition(TestBean.class);, +		RootBeanDefinition bd = new RootBeanDefinition(TestBean.class);, +		RootBeanDefinition bd = new RootBeanDefinition(TestBean.class);, +		RootBeanDefinition bd = new RootBeanDefinition(TestBean.class);, +		RootBeanDefinition bd = new RootBeanDefinition(TestBean.class);]