[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java, +, +		String requestInfo = (logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : null);, +				if (requestInfo != null) {, +					logger.debug("Processing transport request: " + requestInfo);, +				}, +				if (requestInfo != null) {, +					logger.debug("Processing transport request: " + requestInfo);, +				}, +					if (requestInfo != null) {, +						logger.debug("Iframe support is disabled when an origin check is required. " +, +								"Ignoring transport request: " + requestInfo);, +				if (requestInfo != null) {, +					logger.debug("Processing transport request: " + requestInfo);, +				}, +					if (requestInfo != null) {, +						logger.debug("Processing transport request: " + requestInfo);, +					}, +				else if (requestInfo != null) {, +					logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo);, +						logger.warn("Invalid SockJS path '" + sockJsPath + "' - required to have 3 path segments");, +					}, +					if (requestInfo != null) {, +						logger.debug("Ignoring transport request: " + requestInfo);, +, +					if (requestInfo != null) {, +						logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo);, +					if (requestInfo != null) {, +						logger.debug("Ignoring transport request: " + requestInfo);, +, +				if (requestInfo != null) {, +					logger.debug("Processing transport request: " + requestInfo);, +				}, +			logger.warn("No server, session, or transport path segment in SockJS request.");, +, +, +, +			if (logger.isWarnEnabled()) {, +				logger.warn("Origin header value '" + origin + "' not allowed.");, +			}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java, +, +		String requestInfo = (logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : null);, +				if (requestInfo != null) {, +					logger.debug("Processing transport request: " + requestInfo);, +				}, +				if (requestInfo != null) {, +					logger.debug("Processing transport request: " + requestInfo);, +				}, +					if (requestInfo != null) {, +						logger.debug("Iframe support is disabled when an origin check is required. " +, +								"Ignoring transport request: " + requestInfo);, +				if (requestInfo != null) {, +					logger.debug("Processing transport request: " + requestInfo);, +				}, +					if (requestInfo != null) {, +						logger.debug("Processing transport request: " + requestInfo);, +					}, +				else if (requestInfo != null) {, +					logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo);, +						logger.warn("Invalid SockJS path '" + sockJsPath + "' - required to have 3 path segments");, +					}, +					if (requestInfo != null) {, +						logger.debug("Ignoring transport request: " + requestInfo);, +, +					if (requestInfo != null) {, +						logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo);, +					if (requestInfo != null) {, +						logger.debug("Ignoring transport request: " + requestInfo);, +, +				if (requestInfo != null) {, +					logger.debug("Processing transport request: " + requestInfo);, +				}, +			logger.warn("No server, session, or transport path segment in SockJS request.");, +, +, +, +			if (logger.isWarnEnabled()) {, +				logger.warn("Origin header value '" + origin + "' not allowed.");, +			}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/SockJsHttpRequestHandler.java, +		Assert.notNull(sockJsService, "SockJsService must not be null");, +		Assert.notNull(webSocketHandler, "WebSocketHandler must not be null");, +	@Override, +	public boolean isRunning() {, +		return this.running;, +	}, +, +		return (path.length() > 0 && path.charAt(0) != '/' ? "/" + path : path);, +		if (this.sockJsService instanceof CorsConfigurationSource) {, +			return ((CorsConfigurationSource) this.sockJsService).getCorsConfiguration(request);, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java, +, +		String requestInfo = (logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : null);, +				if (requestInfo != null) {, +					logger.debug("Processing transport request: " + requestInfo);, +				}, +				if (requestInfo != null) {, +					logger.debug("Processing transport request: " + requestInfo);, +				}]