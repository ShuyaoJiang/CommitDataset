[+++ b/build-spring-framework/resources/changelog.txt, +* added AnnotatedBeanDefinitionReader helper for programmatic registration of annotated classes, +* added AnnotationConfig(Web)ApplicationContext for convenient registration/scanning of classes, +* deprecated remoting support for JAX-RPC (in favor of JAX-WS), +++ b/build-spring-framework/resources/changelog.txt, +* added AnnotatedBeanDefinitionReader helper for programmatic registration of annotated classes, +* added AnnotationConfig(Web)ApplicationContext for convenient registration/scanning of classes, +* deprecated remoting support for JAX-RPC (in favor of JAX-WS), +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +		Assert.notNull(requiredType, "Required type must not be null");, +			throw new NoSuchBeanDefinitionException(requiredType, "expected single bean but found " +, +					beanNames.length + ": " + StringUtils.arrayToCommaDelimitedString(beanNames));, +++ b/build-spring-framework/resources/changelog.txt, +* added AnnotatedBeanDefinitionReader helper for programmatic registration of annotated classes, +* added AnnotationConfig(Web)ApplicationContext for convenient registration/scanning of classes, +* deprecated remoting support for JAX-RPC (in favor of JAX-WS), +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +		Assert.notNull(requiredType, "Required type must not be null");, +			throw new NoSuchBeanDefinitionException(requiredType, "expected single bean but found " +, +					beanNames.length + ": " + StringUtils.arrayToCommaDelimitedString(beanNames));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, + * This is an alternative to {@link ClassPathBeanDefinitionScanner}, applying, + * the same resolution of annotations but for explicitly registered classes only., + * @see AnnotationConfigApplicationContext#register, +	/**, +	 * Create a new AnnotatedBeanDefinitionReader for the given bean factory., +	 * @param registry the BeanFactory to load bean definitions into,, +	 * in the form of a BeanDefinitionRegistry, +	 */, +		AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry);, +		this.scopeMetadataResolver = (scopeMetadataResolver != null ? scopeMetadataResolver : new AnnotationScopeMetadataResolver());, +	public void register(Class<?>... annotatedClasses) {, +		AnnotationConfigUtils.processCommonDefinitionAnnotations(abd);, +		definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry);, +++ b/build-spring-framework/resources/changelog.txt, +* added AnnotatedBeanDefinitionReader helper for programmatic registration of annotated classes, +* added AnnotationConfig(Web)ApplicationContext for convenient registration/scanning of classes, +* deprecated remoting support for JAX-RPC (in favor of JAX-WS), +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +		Assert.notNull(requiredType, "Required type must not be null");, +			throw new NoSuchBeanDefinitionException(requiredType, "expected single bean but found " +, +					beanNames.length + ": " + StringUtils.arrayToCommaDelimitedString(beanNames));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, + * This is an alternative to {@link ClassPathBeanDefinitionScanner}, applying, + * the same resolution of annotations but for explicitly registered classes only., + * @see AnnotationConfigApplicationContext#register, +	/**, +	 * Create a new AnnotatedBeanDefinitionReader for the given bean factory., +	 * @param registry the BeanFactory to load bean definitions into,, +	 * in the form of a BeanDefinitionRegistry, +	 */, +		AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry);, +		this.scopeMetadataResolver = (scopeMetadataResolver != null ? scopeMetadataResolver : new AnnotationScopeMetadataResolver());, +	public void register(Class<?>... annotatedClasses) {, +		AnnotationConfigUtils.processCommonDefinitionAnnotations(abd);, +		definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry);, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/AnnotationConfigApplicationContext.java, +/*, + * Copyright 2002-2009 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.context.annotation;, +, +import org.springframework.beans.factory.support.BeanNameGenerator;, +import org.springframework.context.support.GenericApplicationContext;, +, +/**, + * Standalone application context, accepting annotated classes as input - in particular, + * {@link org.springframework.context.annotation.Configuration @Configuration}-annotated, + * classes, but also plain {@link org.springframework.stereotype.Component @Components}, + * and JSR-330 compliant classes using {@literal javax.inject} annotations. Allows for, + * registering classes one by one ({@link #register}) as well as for classpath scanning, + * ({@link #scan})., + *, + * <p>Useful for test harnesses or any other scenario where XML-based configuration, + * is unnecessary or undesired., + *, + * <p>In case of multiple Configuration classes, {@link Bean} methods defined in later, + * classes will override those defined in earlier classes. This can be leveraged to, + * deliberately override certain bean definitions via an extra Configuration class., + *, + * @author Chris Beams, + * @author Juergen Hoeller, + * @since 3.0, + * @see AnnotatedBeanDefinitionReader, + * @see ClassPathBeanDefinitionScanner, + */, +public class AnnotationConfigApplicationContext extends GenericApplicationContext {]