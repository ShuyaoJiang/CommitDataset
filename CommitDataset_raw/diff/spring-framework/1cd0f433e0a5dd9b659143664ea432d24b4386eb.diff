[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java, + * Creates instances of {@link org.springframework.web.util.UriComponentsBuilder}, + * by pointing to Spring MVC controllers and {@code @RequestMapping} methods., + *, + * <p>The static {@code fromXxx(...)} methods prepare links relative to the, + * current request as determined by a call to, + * {@link org.springframework.web.servlet.support.ServletUriComponentsBuilder#fromCurrentServletMapping()}., + *, + * <p>The static {@code fromXxx(UriComponentsBuilder,...)} methods can be given, + * the baseUrl when operating outside the context of a request., + *, + * <p>You can also create an MvcUriComponentsBuilder instance with a baseUrl, + * via {@link #relativeTo(org.springframework.web.util.UriComponentsBuilder)}, + * and then use the non-static {@code withXxx(...)} method variants., +	private final UriComponentsBuilder baseUrl;, +, +	protected MvcUriComponentsBuilder(UriComponentsBuilder baseUrl) {, +		Assert.notNull(baseUrl, "'baseUrl' is required");, +		this.baseUrl = baseUrl;, +		this.baseUrl = other.baseUrl;, +	 * Create an instance of this class with a base URL. After that calls to one, +	 * of the instance based {@code withXxx(...}} methods will create URLs relative, +	 * to the given base URL., +	 */, +	public static MvcUriComponentsBuilder relativeTo(UriComponentsBuilder baseUrl) {, +		return new MvcUriComponentsBuilder(baseUrl);, +	}, +, +, +	/**, +		return fromMappingName(null, mappingName);, +	}, +, +	/**, +	 * An alternative to {@link #fromMappingName(String)} that accepts a, +	 * {@code UriComponentsBuilder} representing the base URL. This is useful, +	 * when using MvcUriComponentsBuilder outside the context of processing a, +	 * request or to apply a custom baseUrl not matching the current request., +	 * @param builder the builder for the base URL; the builder will be cloned, +	 * and therefore not modified and may be re-used for further calls., +	 * @param mappingName the mapping name, +	 * @return a builder to to prepare the URI String, +	 * @throws IllegalArgumentException if the mapping name is not found or, +	 * if there is no unique match, +	 * @since 4.2, +	 */, +	public static MethodArgumentBuilder fromMappingName(UriComponentsBuilder builder, String mappingName) {, +		return new MethodArgumentBuilder(builder, handlerMethods.get(0).getMethod());, +	/**, +	 * An alternative to {@link #fromController(Class)} for use with an instance, +	 * of this class created via a call to {@link #relativeTo}., +	 */, +	public UriComponentsBuilder withController(Class<?> controllerType) {, +		return fromController(this.baseUrl, controllerType);, +	}, +, +	/**, +	 * An alternative to {@link #fromMethodName(Class, String, Object...)}} for, +	 * use with an instance of this class created via {@link #relativeTo}., +	 */, +	public UriComponentsBuilder withMethodName(Class<?> controllerType, String methodName, Object... args) {, +		return fromMethodName(this.baseUrl, controllerType, methodName, args);, +	}, +, +	/**, +	 * An alternative to {@link #fromMethodCall(Object)} for use with an instance, +	 * of this class created via {@link #relativeTo}., +	 */, +	public UriComponentsBuilder withMethodCall(Object invocationInfo) {, +		return fromMethodCall(this.baseUrl, invocationInfo);, +	}, +, +	/**, +	 * An alternative to {@link #fromMappingName(String)} for use with an instance, +	 * of this class created via {@link #relativeTo}., +	 */, +	public MethodArgumentBuilder withMappingName(String mappingName) {, +		return fromMappingName(this.baseUrl, mappingName);, +	}, +, +	/**, +	 * An alternative to {@link #fromMethod(java.lang.reflect.Method, Object...)}, +	 * for use with an instance of this class created via {@link #relativeTo}., +	 */, +	public UriComponentsBuilder withMethod(Method method, Object... args) {, +		return fromMethod(this.baseUrl, method, args);, +	}, +, +		private final UriComponentsBuilder baseUrl;, +, +			this(null, method);, +		}, +, +		public MethodArgumentBuilder(UriComponentsBuilder baseUrl, Method method) {, +			this.baseUrl = baseUrl;, +			return MvcUriComponentsBuilder.fromMethod(this.baseUrl, this.method, this.argumentValues), +			return MvcUriComponentsBuilder.fromMethod(this.baseUrl, this.method, this.argumentValues), +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java, + * Creates instances of {@link org.springframework.web.util.UriComponentsBuilder}, + * by pointing to Spring MVC controllers and {@code @RequestMapping} methods.]