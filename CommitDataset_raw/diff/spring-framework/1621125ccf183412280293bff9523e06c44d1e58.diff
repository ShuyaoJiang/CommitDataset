[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerExceptionResolver.java, +				// Print warn or debug message when warn logger is not enabled..., +				if (this.warnLogger == null || !this.warnLogger.isWarnEnabled()) {, +					if (!useWarnLevelWhenWarnLoggerNotEnabled()) {, +						if (logger.isDebugEnabled()) {, +							logger.debug("Resolved [" + ex + "]" + (result.isEmpty() ? "" : " to " + result));, +						}, +					}, +					else if (logger.isWarnEnabled()) {, +				}, +				// Log with warnLogger (requires explicit config), +	 * Whether to log warn level messages (return value "true") or debug level, +	 * messages (return value "false") through the regular class logger when, +	 * {@link #setWarnLogCategory warn logging} is not activated., +	 * <p>By default returns "true"., +	 */, +	protected boolean useWarnLevelWhenWarnLoggerNotEnabled() {, +		return true;, +	}, +, +	/**, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerExceptionResolver.java, +				// Print warn or debug message when warn logger is not enabled..., +				if (this.warnLogger == null || !this.warnLogger.isWarnEnabled()) {, +					if (!useWarnLevelWhenWarnLoggerNotEnabled()) {, +						if (logger.isDebugEnabled()) {, +							logger.debug("Resolved [" + ex + "]" + (result.isEmpty() ? "" : " to " + result));, +						}, +					}, +					else if (logger.isWarnEnabled()) {, +				}, +				// Log with warnLogger (requires explicit config), +	 * Whether to log warn level messages (return value "true") or debug level, +	 * messages (return value "false") through the regular class logger when, +	 * {@link #setWarnLogCategory warn logging} is not activated., +	 * <p>By default returns "true"., +	 */, +	protected boolean useWarnLevelWhenWarnLoggerNotEnabled() {, +		return true;, +	}, +, +	/**, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java, +	@Override, +	protected boolean useWarnLevelWhenWarnLoggerNotEnabled() {, +		// Use DEBUG level, +		return false;, +	}, +]