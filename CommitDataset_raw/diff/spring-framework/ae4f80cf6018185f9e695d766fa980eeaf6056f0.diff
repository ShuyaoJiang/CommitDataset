[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutionException.java, +	private TypeDescriptor sourceType;, +	private TypeDescriptor targetType;, +	 * @param sourceType the value's original type, +	 * @param targetType the value's target type, +	public ConversionExecutionException(Object value, TypeDescriptor sourceType, TypeDescriptor targetType, Throwable cause) {, +		super(defaultMessage(value, sourceType, targetType, cause), cause);, +		this.sourceType = sourceType;, +		this.targetType = targetType;, +	 * @param sourceType the value's original type, +	 * @param targetType the value's target type, +	public ConversionExecutionException(Object value, TypeDescriptor sourceType, TypeDescriptor targetType, String message) {, +		this.sourceType = sourceType;, +		this.targetType = targetType;, +	public TypeDescriptor getSourceClass() {, +		return sourceType;, +	public TypeDescriptor getTargetClass() {, +		return targetType;, +	private static String defaultMessage(Object value, TypeDescriptor sourceType, TypeDescriptor targetType, Throwable cause) {, +		return "Unable to convert value " + StylerUtils.style(value) + " from type [" + sourceType.getName(), +				+ "] to type [" + targetType.getName() + "]; reason = '" + cause.getMessage() + "'";, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutionException.java, +	private TypeDescriptor sourceType;, +	private TypeDescriptor targetType;, +	 * @param sourceType the value's original type, +	 * @param targetType the value's target type, +	public ConversionExecutionException(Object value, TypeDescriptor sourceType, TypeDescriptor targetType, Throwable cause) {, +		super(defaultMessage(value, sourceType, targetType, cause), cause);, +		this.sourceType = sourceType;, +		this.targetType = targetType;, +	 * @param sourceType the value's original type, +	 * @param targetType the value's target type, +	public ConversionExecutionException(Object value, TypeDescriptor sourceType, TypeDescriptor targetType, String message) {, +		this.sourceType = sourceType;, +		this.targetType = targetType;, +	public TypeDescriptor getSourceClass() {, +		return sourceType;, +	public TypeDescriptor getTargetClass() {, +		return targetType;, +	private static String defaultMessage(Object value, TypeDescriptor sourceType, TypeDescriptor targetType, Throwable cause) {, +		return "Unable to convert value " + StylerUtils.style(value) + " from type [" + sourceType.getName(), +				+ "] to type [" + targetType.getName() + "]; reason = '" + cause.getMessage() + "'";, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutor.java, +public interface ConversionExecutor {, +	public Object execute(Object source) throws ConversionExecutionException;, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutionException.java, +	private TypeDescriptor sourceType;, +	private TypeDescriptor targetType;, +	 * @param sourceType the value's original type, +	 * @param targetType the value's target type, +	public ConversionExecutionException(Object value, TypeDescriptor sourceType, TypeDescriptor targetType, Throwable cause) {, +		super(defaultMessage(value, sourceType, targetType, cause), cause);, +		this.sourceType = sourceType;, +		this.targetType = targetType;, +	 * @param sourceType the value's original type, +	 * @param targetType the value's target type, +	public ConversionExecutionException(Object value, TypeDescriptor sourceType, TypeDescriptor targetType, String message) {, +		this.sourceType = sourceType;, +		this.targetType = targetType;, +	public TypeDescriptor getSourceClass() {, +		return sourceType;, +	public TypeDescriptor getTargetClass() {, +		return targetType;, +	private static String defaultMessage(Object value, TypeDescriptor sourceType, TypeDescriptor targetType, Throwable cause) {, +		return "Unable to convert value " + StylerUtils.style(value) + " from type [" + sourceType.getName(), +				+ "] to type [" + targetType.getName() + "]; reason = '" + cause.getMessage() + "'";, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutor.java, +public interface ConversionExecutor {, +	public Object execute(Object source) throws ConversionExecutionException;, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutorNotFoundException.java, +	private TypeDescriptor sourceType;, +	private TypeDescriptor targetType;, +	 * @param sourceType the source type requested to convert from, +	 * @param targetType the target type requested to convert to, +	public ConversionExecutorNotFoundException(TypeDescriptor sourceType, TypeDescriptor targetType, String message) {, +		this.sourceType = sourceType;, +		this.targetType = targetType;, +	public TypeDescriptor getSourceType() {, +		return sourceType;, +	public TypeDescriptor getTargetType() {, +		return targetType;, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/ConversionExecutionException.java, +	private TypeDescriptor sourceType;, +	private TypeDescriptor targetType;, +	 * @param sourceType the value's original type, +	 * @param targetType the value's target type, +	public ConversionExecutionException(Object value, TypeDescriptor sourceType, TypeDescriptor targetType, Throwable cause) {, +		super(defaultMessage(value, sourceType, targetType, cause), cause);, +		this.sourceType = sourceType;, +		this.targetType = targetType;, +	 * @param sourceType the value's original type, +	 * @param targetType the value's target type, +	public ConversionExecutionException(Object value, TypeDescriptor sourceType, TypeDescriptor targetType, String message) {, +		this.sourceType = sourceType;, +		this.targetType = targetType;, +	public TypeDescriptor getSourceClass() {, +		return sourceType;, +	public TypeDescriptor getTargetClass() {, +		return targetType;, +	private static String defaultMessage(Object value, TypeDescriptor sourceType, TypeDescriptor targetType, Throwable cause) {]