[+++ b/build-spring-framework/resources/changelog.txt, +* update @RequestMapping and reference docs wrt differences between @MVC 3.1 and @MVC 2.5-3.0, +++ b/build-spring-framework/resources/changelog.txt, +* update @RequestMapping and reference docs wrt differences between @MVC 3.1 and @MVC 2.5-3.0, +++ b/org.springframework.web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java, + * Copyright 2002-2012 the original author or authors., + * handler methods. Provides a consistent style between Servlet and Portlet, + * <p><b>NOTE:</b> The set of features supported for Servlets is a superset, + * of the set of features supported for Portlets. The places where this applies, + * are marked with the label "Servlet-only" in this source file. For Servlet, + * environments there are some further distinctions depending on whether an, + * application is configured with {@literal "@MVC 3.0"} or, + * {@literal "@MVC 3.1"} support classes. The places where this applies are, + * marked with {@literal "@MVC 3.1-only"} in this source file. For more, + * details see the note on the new support classes added in Spring MVC 3.1, + * further below., + * <li>{@link PathVariable @PathVariable} annotated parameters (Servlet-only), + * for access to URI template values (i.e. /hotels/{hotel}). Variable values will be, + * <li>{@link RequestBody @RequestBody} annotated parameters (Servlet-only), + * for access to the Servlet request HTTP contents. The request stream will be, + * converters}. Such parameters may optionally be annotated with {@code @Valid}, + * but do not support access to validation results through a, + * {@link org.springframework.validation.Errors} /, + * {@link org.springframework.validation.BindingResult} argument., + * Instead a {@link org.springframework.web.servlet.mvc.method.annotation.MethodArgumentNotValidException}, + * exception is raised., + * <li>{@link RequestPart @RequestPart} annotated parameters, + * (Servlet-only, {@literal @MVC 3.1-only}), + * for access to the content, + * converters}. Such parameters may optionally be annotated with {@code @Valid}, + * but do not support access to validation results through a, + * {@link org.springframework.validation.Errors} /, + * {@link org.springframework.validation.BindingResult} argument., + * Instead a {@link org.springframework.web.servlet.mvc.method.annotation.MethodArgumentNotValidException}, + * exception is raised., + * (Servlet-only) for access to the Servlet request HTTP headers and contents., + * The request stream will be converted to the entity body using, + * (Servlet-only, {@literal @MVC 3.1-only}) to specify the exact set of attributes, + * to use in case of a redirect and also to add flash attributes (attributes, + * stored temporarily on the server-side to make them available to the request, + * after the redirect). {@code RedirectAttributes} is used instead of the, + * implicit model if the method returns a "redirect:" prefixed view name or, + * {@code RedirectView}., + * <li>{@link org.springframework.web.util.UriComponentsBuilder}, + * (Servlet-only, {@literal @MVC 3.1-only}), + * for preparing a URL relative to the current request's host, port, scheme,, + * context path, and the literal part of the servlet mapping., + * <li>{@link ResponseBody @ResponseBody} annotated methods (Servlet-only), + * for access to the Servlet response HTTP contents. The return value will, + * be converted to the response stream using, + * (Servlet-only) to access to the Servlet response HTTP headers and contents., + * The entity body will be converted to the response stream using, + * <p><b>NOTE:</b> <code>@RequestMapping</code> will only be processed if an, + * an appropriate <code>HandlerMapping</code>-<code>HandlerAdapter</code> pair, + * is configured. This is the case by default in both the, + * <code>DispatcherServlet</code> and the <code>DispatcherPortlet</code>., + * <code>HandlerAdapters</code>, then you need to add, + * <code>DefaultAnnotationHandlerMapping</code> and, + * <code>AnnotationMethodHandlerAdapter</code> to your configuration.</code>., + *, + * <p><b>NOTE:</b> Spring 3.1 introduced a new set of support classes for, + * <code>@RequestMapping</code> methods in Servlet environments called, + * <code>RequestMappingHandlerMapping</code> and, + * <code>RequestMappingHandlerAdapter</code>. They are recommended for use and, + * even required to take advantage of new features in Spring MVC 3.1 (search, + * {@literal "@MVC 3.1-only"} in this source file) and going forward., + * The new support classes are enabled by default from the MVC namespace and, + * with use of the MVC Java config (<code>@EnableWebMvc</code>) but must be, + * configured explicitly if using neither., +++ b/build-spring-framework/resources/changelog.txt, +* update @RequestMapping and reference docs wrt differences between @MVC 3.1 and @MVC 2.5-3.0, +++ b/org.springframework.web/src/main/java/org/springframework/web/bind/annotation/RequestMapping.java, + * Copyright 2002-2012 the original author or authors., + * handler methods. Provides a consistent style between Servlet and Portlet, + * <p><b>NOTE:</b> The set of features supported for Servlets is a superset, + * of the set of features supported for Portlets. The places where this applies, + * are marked with the label "Servlet-only" in this source file. For Servlet, + * environments there are some further distinctions depending on whether an, + * application is configured with {@literal "@MVC 3.0"} or, + * {@literal "@MVC 3.1"} support classes. The places where this applies are, + * marked with {@literal "@MVC 3.1-only"} in this source file. For more, + * details see the note on the new support classes added in Spring MVC 3.1, + * further below., + * <li>{@link PathVariable @PathVariable} annotated parameters (Servlet-only), + * for access to URI template values (i.e. /hotels/{hotel}). Variable values will be, + * <li>{@link RequestBody @RequestBody} annotated parameters (Servlet-only), + * for access to the Servlet request HTTP contents. The request stream will be, + * converters}. Such parameters may optionally be annotated with {@code @Valid}, + * but do not support access to validation results through a, + * {@link org.springframework.validation.Errors} /, + * {@link org.springframework.validation.BindingResult} argument., + * Instead a {@link org.springframework.web.servlet.mvc.method.annotation.MethodArgumentNotValidException}, + * exception is raised., + * <li>{@link RequestPart @RequestPart} annotated parameters, + * (Servlet-only, {@literal @MVC 3.1-only}), + * for access to the content, + * converters}. Such parameters may optionally be annotated with {@code @Valid}, + * but do not support access to validation results through a, + * {@link org.springframework.validation.Errors} /, + * {@link org.springframework.validation.BindingResult} argument.]