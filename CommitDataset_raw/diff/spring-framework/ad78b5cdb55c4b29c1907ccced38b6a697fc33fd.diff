[+++ b/org.springframework.web/src/main/java/org/springframework/http/HttpEntity.java, + * @since 3.0.2, +, +, +, +	/**, +	 * Returns the headers of this entity., +	 */, +	public HttpHeaders getHeaders() {, +		return this.headers;, +	}, +, +	/**, +	 * Returns the body of this entity., +	 */, +	public T getBody() {, +		return this.body;, +	}, +, +	/**, +	 * Indicates whether this entity has a body., +	 */, +	public boolean hasBody() {, +		return (this.body != null);, +	}, +, +, +++ b/org.springframework.web/src/main/java/org/springframework/http/HttpEntity.java, + * @since 3.0.2, +, +, +, +	/**, +	 * Returns the headers of this entity., +	 */, +	public HttpHeaders getHeaders() {, +		return this.headers;, +	}, +, +	/**, +	 * Returns the body of this entity., +	 */, +	public T getBody() {, +		return this.body;, +	}, +, +	/**, +	 * Indicates whether this entity has a body., +	 */, +	public boolean hasBody() {, +		return (this.body != null);, +	}, +, +, +++ b/org.springframework.web/src/main/java/org/springframework/web/bind/annotation/support/HandlerMethodInvoker.java, +	public final void updateModelAttributes(Object handler, Map<String, Object> mavModel,, +			ExtendedModelMap implicitModel, NativeWebRequest webRequest) throws Exception {, +, +		if (this.methodResolver.hasSessionAttributes() && this.sessionStatus.isComplete()) {, +			for (String attrName : this.methodResolver.getActualSessionAttributeNames()) {, +				this.sessionAttributeStore.cleanupAttribute(webRequest, attrName);, +			}, +		}, +, +		// Expose model attributes as session attributes, if required., +		// Expose BindingResults for all attributes, making custom editors available., +		Map<String, Object> model = (mavModel != null ? mavModel : implicitModel);, +		try {, +			for (String attrName : new HashSet<String>(model.keySet())) {, +				Object attrValue = model.get(attrName);, +				boolean isSessionAttr =, +						this.methodResolver.isSessionAttribute(attrName, (attrValue != null ? attrValue.getClass() : null));, +				if (isSessionAttr && !this.sessionStatus.isComplete()) {, +					this.sessionAttributeStore.storeAttribute(webRequest, attrName, attrValue);, +				}, +				if (!attrName.startsWith(BindingResult.MODEL_KEY_PREFIX) &&, +						(isSessionAttr || isBindingCandidate(attrValue))) {, +					String bindingResultKey = BindingResult.MODEL_KEY_PREFIX + attrName;, +					if (mavModel != null && !model.containsKey(bindingResultKey)) {, +						WebDataBinder binder = createBinder(webRequest, attrValue, attrName);, +						initBinder(handler, attrName, binder, webRequest);, +						mavModel.put(bindingResultKey, binder.getBindingResult());, +					}, +				}, +			}, +		}, +		catch (InvocationTargetException ex) {, +			// User-defined @InitBinder method threw an exception..., +			ReflectionUtils.rethrowException(ex.getTargetException());, +		}, +	}, +, +, +						args[i] = resolveHttpEntityRequest(methodParam, webRequest);, +, +	private HttpEntity resolveHttpEntityRequest(MethodParameter methodParam, NativeWebRequest webRequest), +, +		return new HttpEntity<Object>(body, inputMessage.getHeaders());, +]