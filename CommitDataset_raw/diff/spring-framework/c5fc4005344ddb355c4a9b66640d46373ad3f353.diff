[+++ b/spring-core/src/main/java/org/springframework/core/OrderComparator.java, + * Copyright 2002-2017 the original author or authors., +	public int compare(@Nullable Object o1, @Nullable Object o2) {, +	private int doCompare(@Nullable Object o1, @Nullable Object o2, @Nullable OrderSourceProvider sourceProvider) {, +	private int getOrder(@Nullable Object obj, @Nullable OrderSourceProvider sourceProvider) {, +		if (obj != null && sourceProvider != null) {, +	protected int getOrder(@Nullable Object obj) {, +		if (obj != null) {, +			if (order != null) {, +				return order;, +			}, +		}, +		return Ordered.LOWEST_PRECEDENCE;, +++ b/spring-core/src/main/java/org/springframework/core/OrderComparator.java, + * Copyright 2002-2017 the original author or authors., +	public int compare(@Nullable Object o1, @Nullable Object o2) {, +	private int doCompare(@Nullable Object o1, @Nullable Object o2, @Nullable OrderSourceProvider sourceProvider) {, +	private int getOrder(@Nullable Object obj, @Nullable OrderSourceProvider sourceProvider) {, +		if (obj != null && sourceProvider != null) {, +	protected int getOrder(@Nullable Object obj) {, +		if (obj != null) {, +			if (order != null) {, +				return order;, +			}, +		}, +		return Ordered.LOWEST_PRECEDENCE;, +++ b/spring-core/src/test/java/org/springframework/core/OrderComparatorTests.java, + * Copyright 2002-2017 the original author or authors., +import static org.junit.Assert.*;, + * @author Juergen Hoeller, +, +		assertEquals(-1, this.comparator.compare(new StubOrdered(100), new StubOrdered(2000)));, +		assertEquals(0, this.comparator.compare(new StubOrdered(100), new StubOrdered(100)));, +		assertEquals(1, this.comparator.compare(new StubOrdered(982300), new StubOrdered(100)));, +	}, +, +	@Test, +	public void compareOrderedInstancesNullFirst() {, +		assertEquals(1, this.comparator.compare(null, new StubOrdered(100)));, +	}, +, +	@Test, +	public void compareOrderedInstancesNullLast() {, +		assertEquals(-1, this.comparator.compare(new StubOrdered(100), null));, +	}, +, +	@Test, +	public void compareOrderedInstancesDoubleNull() {, +		assertEquals(0, this.comparator.compare(null, null));, +, +, +++ b/spring-core/src/main/java/org/springframework/core/OrderComparator.java, + * Copyright 2002-2017 the original author or authors., +	public int compare(@Nullable Object o1, @Nullable Object o2) {, +	private int doCompare(@Nullable Object o1, @Nullable Object o2, @Nullable OrderSourceProvider sourceProvider) {, +	private int getOrder(@Nullable Object obj, @Nullable OrderSourceProvider sourceProvider) {, +		if (obj != null && sourceProvider != null) {, +	protected int getOrder(@Nullable Object obj) {, +		if (obj != null) {, +			if (order != null) {, +				return order;, +			}, +		}, +		return Ordered.LOWEST_PRECEDENCE;, +++ b/spring-core/src/test/java/org/springframework/core/OrderComparatorTests.java, + * Copyright 2002-2017 the original author or authors., +import static org.junit.Assert.*;, + * @author Juergen Hoeller, +, +		assertEquals(-1, this.comparator.compare(new StubOrdered(100), new StubOrdered(2000)));, +		assertEquals(0, this.comparator.compare(new StubOrdered(100), new StubOrdered(100)));, +		assertEquals(1, this.comparator.compare(new StubOrdered(982300), new StubOrdered(100)));, +	}, +, +	@Test, +	public void compareOrderedInstancesNullFirst() {, +		assertEquals(1, this.comparator.compare(null, new StubOrdered(100)));, +	}, +, +	@Test, +	public void compareOrderedInstancesNullLast() {, +		assertEquals(-1, this.comparator.compare(new StubOrdered(100), null));, +	}, +, +	@Test, +	public void compareOrderedInstancesDoubleNull() {, +		assertEquals(0, this.comparator.compare(null, null));, +, +, +++ b/spring-core/src/test/java/org/springframework/core/annotation/AnnotationAwareOrderComparatorTests.java, + * Copyright 2002-2017 the original author or authors., +	@Test, +	public void sortWithNulls() {, +		List<Object> list = new ArrayList<>();, +		list.add(null);, +		list.add(B.class);, +		list.add(null);, +		list.add(A.class);, +		AnnotationAwareOrderComparator.sort(list);, +		assertEquals(A.class, list.get(0));]