[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/NettyWebSocketSessionSupport.java, +	 * The default max size for inbound WebSocket frames., +	public static final int DEFAULT_FRAME_MAX_SIZE = 64 * 1024;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/NettyWebSocketSessionSupport.java, +	 * The default max size for inbound WebSocket frames., +	public static final int DEFAULT_FRAME_MAX_SIZE = 64 * 1024;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java, +	private final int maxFramePayloadLength;, +, +	/**, +	 * Constructor for the session, using the {@link #DEFAULT_FRAME_MAX_SIZE} value., +	 */, +		this(inbound, outbound, info, bufferFactory, DEFAULT_FRAME_MAX_SIZE);, +	}, +, +	/**, +	 * Constructor with an additional maxFramePayloadLength argument., +	 * @since 5.1, +	 */, +	public ReactorNettyWebSocketSession(WebsocketInbound inbound, WebsocketOutbound outbound,, +			HandshakeInfo info, NettyDataBufferFactory bufferFactory,, +			int maxFramePayloadLength) {, +, +		this.maxFramePayloadLength = maxFramePayloadLength;, +				.aggregateFrames(this.maxFramePayloadLength), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/NettyWebSocketSessionSupport.java, +	 * The default max size for inbound WebSocket frames., +	public static final int DEFAULT_FRAME_MAX_SIZE = 64 * 1024;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/ReactorNettyWebSocketSession.java, +	private final int maxFramePayloadLength;, +, +	/**, +	 * Constructor for the session, using the {@link #DEFAULT_FRAME_MAX_SIZE} value., +	 */, +		this(inbound, outbound, info, bufferFactory, DEFAULT_FRAME_MAX_SIZE);, +	}, +, +	/**, +	 * Constructor with an additional maxFramePayloadLength argument., +	 * @since 5.1, +	 */, +	public ReactorNettyWebSocketSession(WebsocketInbound inbound, WebsocketOutbound outbound,, +			HandshakeInfo info, NettyDataBufferFactory bufferFactory,, +			int maxFramePayloadLength) {, +, +		this.maxFramePayloadLength = maxFramePayloadLength;, +				.aggregateFrames(this.maxFramePayloadLength), +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/socket/server/upgrade/ReactorNettyRequestUpgradeStrategy.java, +import org.springframework.web.reactive.socket.adapter.NettyWebSocketSessionSupport;, +	private int maxFramePayloadLength = NettyWebSocketSessionSupport.DEFAULT_FRAME_MAX_SIZE;, +, +, +	/**, +	 * Configure the maximum allowable frame payload length. Setting this value, +	 * to your application's requirement may reduce denial of service attacks, +	 * using long data frames., +	 * <p>Corresponds to the argument with the same name in the constructor of, +	 * {@link io.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory, +	 * WebSocketServerHandshakerFactory} in Netty., +	 * <p>By default set to 65536 (64K)., +	 * @param maxFramePayloadLength the max length for frames., +	 * @since 5.1, +	 */, +	public void setMaxFramePayloadLength(Integer maxFramePayloadLength) {, +		this.maxFramePayloadLength = maxFramePayloadLength;, +	}, +, +	/**, +	 * Return the configured max length for frames., +	 * @since 5.1, +	 */, +	public int getMaxFramePayloadLength() {, +		return this.maxFramePayloadLength;, +	}, +, +		HttpServerResponse reactorResponse = ((AbstractServerHttpResponse) response).getNativeResponse();, +		return reactorResponse.sendWebsocket(subProtocol, this.maxFramePayloadLength,, +				(in, out) -> {, +					ReactorNettyWebSocketSession session =, +							new ReactorNettyWebSocketSession(, +									in, out, handshakeInfo, bufferFactory, this.maxFramePayloadLength);, +					return handler.handle(session);, +				});]