[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	/**, +	 * Constructs a new TypeDescriptor for a nested type declared within a method parameter, such as a collection type or map key or value type., +	 */, +	public TypeDescriptor(Class<?> nestedType, MethodParameter methodParameter) {, +		if (nestedType == null) {, +			nestedType = Object.class;, +		this.type = nestedType;, +	/**, +	 * Exposes the underlying MethodParameter providing context for this TypeDescriptor., +	 * Used to support legacy code scenarios where callers are already using the MethodParameter API (BeanWrapper)., +	 * In general, favor use of the TypeDescriptor API over the MethodParameter API as it is independent of type context location., +	 * May be null if no MethodParameter was provided when this TypeDescriptor was constructed., +	 */, +	/**, +	 * Create a copy of this nested type descriptor and apply the specific type information from the indexed object., +	 * Used to support collection and map indexing scenarios, where the indexer has a reference to the indexed type descriptor but needs to ensure its type actually represents the indexed object type., +	 * This is necessary to support type conversion during index object binding operations., +	 */, +	public TypeDescriptor applyIndexedObject(Object object) {, +	protected TypeDescriptor newNestedTypeDescriptor(Class<?> nestedType, MethodParameter nested) {, +		return new TypeDescriptor(nestedType, nested);, +			return createNestedTypeDescriptor(resolveCollectionElementType());, +			return createNestedTypeDescriptor(getType().getComponentType());, +		return createNestedTypeDescriptor(resolveMapKeyType());, +		return createNestedTypeDescriptor(resolveMapValueType());, +	private TypeDescriptor createNestedTypeDescriptor(Class<?> nestedType) {, +		if (nestedType == null) {, +			nestedType = Object.class;, +			return newNestedTypeDescriptor(nestedType, nested);				, +			return new TypeDescriptor(nestedType, this.field, this.fieldNestingLevel + 1);, +			return TypeDescriptor.valueOf(nestedType);, +	private TypeDescriptor(Class<?> nestedType, Field field, int nestingLevel) {, +		this.type = nestedType;, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	/**, +	 * Constructs a new TypeDescriptor for a nested type declared within a method parameter, such as a collection type or map key or value type., +	 */, +	public TypeDescriptor(Class<?> nestedType, MethodParameter methodParameter) {, +		if (nestedType == null) {, +			nestedType = Object.class;, +		this.type = nestedType;, +	/**, +	 * Exposes the underlying MethodParameter providing context for this TypeDescriptor., +	 * Used to support legacy code scenarios where callers are already using the MethodParameter API (BeanWrapper)., +	 * In general, favor use of the TypeDescriptor API over the MethodParameter API as it is independent of type context location., +	 * May be null if no MethodParameter was provided when this TypeDescriptor was constructed., +	 */, +	/**, +	 * Create a copy of this nested type descriptor and apply the specific type information from the indexed object., +	 * Used to support collection and map indexing scenarios, where the indexer has a reference to the indexed type descriptor but needs to ensure its type actually represents the indexed object type., +	 * This is necessary to support type conversion during index object binding operations., +	 */, +	public TypeDescriptor applyIndexedObject(Object object) {, +	protected TypeDescriptor newNestedTypeDescriptor(Class<?> nestedType, MethodParameter nested) {, +		return new TypeDescriptor(nestedType, nested);, +			return createNestedTypeDescriptor(resolveCollectionElementType());, +			return createNestedTypeDescriptor(getType().getComponentType());, +		return createNestedTypeDescriptor(resolveMapKeyType());, +		return createNestedTypeDescriptor(resolveMapValueType());, +	private TypeDescriptor createNestedTypeDescriptor(Class<?> nestedType) {, +		if (nestedType == null) {, +			nestedType = Object.class;, +			return newNestedTypeDescriptor(nestedType, nested);				, +			return new TypeDescriptor(nestedType, this.field, this.fieldNestingLevel + 1);, +			return TypeDescriptor.valueOf(nestedType);, +	private TypeDescriptor(Class<?> nestedType, Field field, int nestingLevel) {, +		this.type = nestedType;, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/PropertyTypeDescriptor.java, +	public PropertyTypeDescriptor(Class<?> type, MethodParameter methodParameter, PropertyDescriptor propertyDescriptor) {, +		super(type, methodParameter);, +	public TypeDescriptor newNestedTypeDescriptor(Class<?> nestedType, MethodParameter nested) {, +		return new PropertyTypeDescriptor(nestedType, nested, this.propertyDescriptor);, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/TypeDescriptor.java, +	/**, +	 * Constructs a new TypeDescriptor for a nested type declared within a method parameter, such as a collection type or map key or value type., +	 */, +	public TypeDescriptor(Class<?> nestedType, MethodParameter methodParameter) {, +		if (nestedType == null) {, +			nestedType = Object.class;, +		this.type = nestedType;, +	/**, +	 * Exposes the underlying MethodParameter providing context for this TypeDescriptor., +	 * Used to support legacy code scenarios where callers are already using the MethodParameter API (BeanWrapper)., +	 * In general, favor use of the TypeDescriptor API over the MethodParameter API as it is independent of type context location., +	 * May be null if no MethodParameter was provided when this TypeDescriptor was constructed., +	 */, +	/**, +	 * Create a copy of this nested type descriptor and apply the specific type information from the indexed object., +	 * Used to support collection and map indexing scenarios, where the indexer has a reference to the indexed type descriptor but needs to ensure its type actually represents the indexed object type., +	 * This is necessary to support type conversion during index object binding operations., +	 */, +	public TypeDescriptor applyIndexedObject(Object object) {, +	protected TypeDescriptor newNestedTypeDescriptor(Class<?> nestedType, MethodParameter nested) {, +		return new TypeDescriptor(nestedType, nested);, +			return createNestedTypeDescriptor(resolveCollectionElementType());, +			return createNestedTypeDescriptor(getType().getComponentType());, +		return createNestedTypeDescriptor(resolveMapKeyType());, +		return createNestedTypeDescriptor(resolveMapValueType());, +	private TypeDescriptor createNestedTypeDescriptor(Class<?> nestedType) {]