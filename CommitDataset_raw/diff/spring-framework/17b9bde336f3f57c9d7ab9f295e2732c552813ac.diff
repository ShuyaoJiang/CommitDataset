[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +		ResponseStatusExceptionResolver responseStatusExceptionResolver = new ResponseStatusExceptionResolver();, +		responseStatusExceptionResolver.setMessageSource(this.applicationContext);, +		exceptionResolvers.add(responseStatusExceptionResolver);, +, +		exceptionHandlerExceptionResolver.afterPropertiesSet();, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java, +		ResponseStatusExceptionResolver responseStatusExceptionResolver = new ResponseStatusExceptionResolver();, +		responseStatusExceptionResolver.setMessageSource(this.applicationContext);, +		exceptionResolvers.add(responseStatusExceptionResolver);, +, +		exceptionHandlerExceptionResolver.afterPropertiesSet();, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupportTests.java, +import org.springframework.context.MessageSource;, +import org.springframework.context.i18n.LocaleContextHolder;, +import org.springframework.context.support.StaticMessageSource;, +import org.springframework.http.HttpStatus;, +import org.springframework.mock.web.test.MockHttpServletResponse;, +import org.springframework.web.bind.annotation.ResponseStatus;, +, +		LocaleContextHolder.setLocale(Locale.ENGLISH);, +		try {, +			ResponseStatusExceptionResolver rser = (ResponseStatusExceptionResolver) expectedResolvers.get(1);, +			MockHttpServletRequest request = new MockHttpServletRequest("GET", "/");, +			MockHttpServletResponse response = new MockHttpServletResponse();, +			rser.resolveException(request, response, context.getBean(TestController.class), new UserAlreadyExistsException());, +			assertEquals("User already exists!", response.getErrorMessage());, +		}, +		finally {, +			LocaleContextHolder.resetLocaleContext();, +		}, +, +, +		@Bean, +		public MessageSource messageSource() {, +			StaticMessageSource messageSource = new StaticMessageSource();, +			messageSource.addMessage("exception.user.exists", Locale.ENGLISH, "User already exists!");, +			return messageSource;, +		}, +	@ResponseStatus(value = HttpStatus.BAD_REQUEST,  reason = "exception.user.exists"), +	public static class UserAlreadyExistsException extends RuntimeException {, +	}, +]