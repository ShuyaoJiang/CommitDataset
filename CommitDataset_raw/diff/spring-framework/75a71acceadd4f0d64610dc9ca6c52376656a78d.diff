[+++ b/build.gradle, +	ext.junitVintageVersion    = "4.12.0-M5", +	ext.junitJupiterVersion    = '5.0.0-M5', +	ext.junitPlatformVersion   = '1.0.0-M5', +++ b/build.gradle, +	ext.junitVintageVersion    = "4.12.0-M5", +	ext.junitJupiterVersion    = '5.0.0-M5', +	ext.junitPlatformVersion   = '1.0.0-M5', +++ b/spring-test/src/main/java/org/springframework/test/context/junit/jupiter/AbstractExpressionEvaluatingCondition.java, +, +import org.junit.jupiter.api.extension.ExecutionCondition;, + * Abstract base class for implementations of {@link ExecutionCondition} that, + * evaluate expressions configured via annotations to determine if a container, + * or test is enabled., +abstract class AbstractExpressionEvaluatingCondition implements ExecutionCondition {, +++ b/build.gradle, +	ext.junitVintageVersion    = "4.12.0-M5", +	ext.junitJupiterVersion    = '5.0.0-M5', +	ext.junitPlatformVersion   = '1.0.0-M5', +++ b/spring-test/src/main/java/org/springframework/test/context/junit/jupiter/AbstractExpressionEvaluatingCondition.java, +, +import org.junit.jupiter.api.extension.ExecutionCondition;, + * Abstract base class for implementations of {@link ExecutionCondition} that, + * evaluate expressions configured via annotations to determine if a container, + * or test is enabled., +abstract class AbstractExpressionEvaluatingCondition implements ExecutionCondition {, +++ b/spring-test/src/main/java/org/springframework/test/context/junit/jupiter/DisabledIfCondition.java, + * Copyright 2002-2017 the original author or authors., + * {@code DisabledIfCondition} is an {@link ExecutionCondition} that supports the, + * {@link DisabledIf @DisabledIf} annotation when using the <em>Spring TestContext, + * Framework</em> in conjunction with JUnit 5's <em>Jupiter</em> programming model., +	 * Containers and tests are disabled if {@code @DisabledIf} is present on the, +	 * corresponding test class or test method and the configured expression evaluates, +	 * to {@code true}., +	public ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {, +		return evaluateAnnotation(DisabledIf.class, DisabledIf::expression, DisabledIf::reason, DisabledIf::loadContext,, +			false, context);, +++ b/build.gradle, +	ext.junitVintageVersion    = "4.12.0-M5", +	ext.junitJupiterVersion    = '5.0.0-M5', +	ext.junitPlatformVersion   = '1.0.0-M5', +++ b/spring-test/src/main/java/org/springframework/test/context/junit/jupiter/AbstractExpressionEvaluatingCondition.java, +, +import org.junit.jupiter.api.extension.ExecutionCondition;, + * Abstract base class for implementations of {@link ExecutionCondition} that, + * evaluate expressions configured via annotations to determine if a container, + * or test is enabled., +abstract class AbstractExpressionEvaluatingCondition implements ExecutionCondition {, +++ b/spring-test/src/main/java/org/springframework/test/context/junit/jupiter/DisabledIfCondition.java, + * Copyright 2002-2017 the original author or authors., + * {@code DisabledIfCondition} is an {@link ExecutionCondition} that supports the, + * {@link DisabledIf @DisabledIf} annotation when using the <em>Spring TestContext, + * Framework</em> in conjunction with JUnit 5's <em>Jupiter</em> programming model., +	 * Containers and tests are disabled if {@code @DisabledIf} is present on the, +	 * corresponding test class or test method and the configured expression evaluates, +	 * to {@code true}., +	public ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {, +		return evaluateAnnotation(DisabledIf.class, DisabledIf::expression, DisabledIf::reason, DisabledIf::loadContext,, +			false, context);, +++ b/spring-test/src/main/java/org/springframework/test/context/junit/jupiter/EnabledIfCondition.java, + * Copyright 2002-2017 the original author or authors., + * {@code EnabledIfCondition} is an {@link ExecutionCondition} that supports the, + * {@link EnabledIf @EnabledIf} annotation when using the <em>Spring TestContext, + * Framework</em> in conjunction with JUnit 5's <em>Jupiter</em> programming model., +	 * Containers and tests are enabled if {@code @EnabledIf} is present on the, +	 * corresponding test class or test method and the configured expression, +	 * evaluates to {@code true}., +	public ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {, +		return evaluateAnnotation(EnabledIf.class, EnabledIf::expression, EnabledIf::reason, EnabledIf::loadContext,, +			true, context);, +++ b/build.gradle, +	ext.junitVintageVersion    = "4.12.0-M5", +	ext.junitJupiterVersion    = '5.0.0-M5', +	ext.junitPlatformVersion   = '1.0.0-M5', +++ b/spring-test/src/main/java/org/springframework/test/context/junit/jupiter/AbstractExpressionEvaluatingCondition.java, +, +import org.junit.jupiter.api.extension.ExecutionCondition;, + * Abstract base class for implementations of {@link ExecutionCondition} that, + * evaluate expressions configured via annotations to determine if a container, + * or test is enabled., +abstract class AbstractExpressionEvaluatingCondition implements ExecutionCondition {, +++ b/spring-test/src/main/java/org/springframework/test/context/junit/jupiter/DisabledIfCondition.java, + * Copyright 2002-2017 the original author or authors., + * {@code DisabledIfCondition} is an {@link ExecutionCondition} that supports the, + * {@link DisabledIf @DisabledIf} annotation when using the <em>Spring TestContext, + * Framework</em> in conjunction with JUnit 5's <em>Jupiter</em> programming model., +	 * Containers and tests are disabled if {@code @DisabledIf} is present on the, +	 * corresponding test class or test method and the configured expression evaluates, +	 * to {@code true}., +	public ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {, +		return evaluateAnnotation(DisabledIf.class, DisabledIf::expression, DisabledIf::reason, DisabledIf::loadContext,, +			false, context);, +++ b/spring-test/src/main/java/org/springframework/test/context/junit/jupiter/EnabledIfCondition.java, + * Copyright 2002-2017 the original author or authors., + * {@code EnabledIfCondition} is an {@link ExecutionCondition} that supports the, + * {@link EnabledIf @EnabledIf} annotation when using the <em>Spring TestContext, + * Framework</em> in conjunction with JUnit 5's <em>Jupiter</em> programming model., +	 * Containers and tests are enabled if {@code @EnabledIf} is present on the, +	 * corresponding test class or test method and the configured expression, +	 * evaluates to {@code true}.]