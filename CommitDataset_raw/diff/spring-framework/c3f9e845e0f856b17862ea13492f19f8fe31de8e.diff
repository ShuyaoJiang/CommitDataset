[+++ b/spring-framework-reference/src/beans-standard-annotations.xml, +  <title>Using JSR 330 Standard Annotations</title>, +  <para>Starting with Spring 3.0, Spring offers support for JSR-330 standard annotations (Dependency Injection)., +, +  	<para>, +      If you are using Maven, the <interfacename>javax.inject</interfacename> artifact is available, +      in the standard Maven repository, +      (<ulink url="http://repo1.maven.org/maven2/javax/inject/javax.inject/1/">http://repo1.maven.org/maven2/javax/inject/javax.inject/1/</ulink>)., +      You can add the following dependency to your file pom.xml:, +  	</para>, +&lt;/dependency&gt;</programlisting>, +    <para>Instead of <interfacename>@Autowired</interfacename>,, +      <interfacename>@javax.inject.Inject</interfacename> may be used as follows:, +, +    <programlisting language="java">import javax.inject.Inject;, +, +    </para>, +    <para>As with <interfacename>@Autowired</interfacename>, it is possible to use <interfacename>@Inject</interfacename>, +	at the class-level, field-level, method-level and constructor-argument level., +	If you would like to use a qualified name for the dependency that should be injected,, +	you should use the <interfacename>@Named</interfacename> annotation as follows:, +, +    <programlisting language="java">import javax.inject.Inject;, +    Instead of <interfacename>@Component</interfacename>, <interfacename>@javax.inject.Named</interfacename> may be used as follows:, +        <programlisting language="java">import javax.inject.Inject;, +, +It is very common to use <interfacename>@Component</interfacename> without, +specifying a name for the component. <interfacename>@Named</interfacename>, +can be used in a similar fashion:, +, +    <programlisting language="java">import javax.inject.Inject;, +}</programlisting>, +, +When using <interfacename>@Named</interfacename>, it is possible to use, +component-scanning in the exact same way as when using Spring annotations:, +, +    <programlisting language="xml">&lt;beans&gt;, +&lt;/beans&gt;</programlisting>	, +, +, +	<para>When working with standard annotations, it is important to know that, +	some significant features are not available as shown in the table below:</para>, +          <title>Spring annotations vs. standard annotations</title>, +                <entry>&mdash;</entry>, +                		The JSR-330 default scope is like Spring's <interfacename>prototype</interfacename>., +                		However, in order to keep it consistent with Spring's general defaults,, +                		a JSR-330 bean declared in the Spring container is a, +                		<interfacename>singleton</interfacename> by default. In order to use a, +                		scope other than <interfacename>singleton</interfacename>, you should use Spring's, +                		<interfacename>@Scope</interfacename> annotation., +                		<interfacename>javax.inject</interfacename> also provides a, +                		<ulink url="http://download.oracle.com/javaee/6/api/javax/inject/Scope.html">@Scope</ulink> annotation., +                		Nevertheless, this one is only intended to be used for creating your own annotations., +                <entry>&mdash;</entry>, +                <entry>&mdash;</entry>, +                <entry>&mdash;</entry>, +                <entry>&mdash;</entry>, +]