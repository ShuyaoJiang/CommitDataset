[+++ b/spring-core/src/main/java/org/springframework/util/FileCopyUtils.java, + * Copyright 2002-2013 the original author or authors., + * Simple utility methods for file and stream copying. All copy methods use a block size, + * of 4096 bytes, and close all affected streams when done. A variation of the copy, + * methods from this class that leave streams open can be found in {@link StreamUtils}., + * <p>Mainly for use within the framework, but also useful for application code., + * @see StreamUtils, +	public static final int BUFFER_SIZE = StreamUtils.BUFFER_SIZE;, +			return StreamUtils.copy(in, out);, +	 * Closes the writer when done., +++ b/spring-core/src/main/java/org/springframework/util/FileCopyUtils.java, + * Copyright 2002-2013 the original author or authors., + * Simple utility methods for file and stream copying. All copy methods use a block size, + * of 4096 bytes, and close all affected streams when done. A variation of the copy, + * methods from this class that leave streams open can be found in {@link StreamUtils}., + * <p>Mainly for use within the framework, but also useful for application code., + * @see StreamUtils, +	public static final int BUFFER_SIZE = StreamUtils.BUFFER_SIZE;, +			return StreamUtils.copy(in, out);, +	 * Closes the writer when done., +++ b/spring-core/src/main/java/org/springframework/util/StreamUtils.java, +/*, + * Copyright 2002-2013 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + * http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.util;, +, +import java.io.ByteArrayOutputStream;, +import java.io.FilterInputStream;, +import java.io.FilterOutputStream;, +import java.io.IOException;, +import java.io.InputStream;, +import java.io.InputStreamReader;, +import java.io.OutputStream;, +import java.io.OutputStreamWriter;, +import java.io.Writer;, +import java.nio.charset.Charset;, +, +, +/**, + * Simple utility methods for dealing with streams. The copy methods of this class are, + * similar to those defined in {@link FileCopyUtils} except that all affected streams are, + * left open when done. All copy methods use a block size of 4096 bytes., + *, + * <p>Mainly for use within the framework, but also useful for application code., + *, + * @author Juergen Hoeller, + * @author Phillip Webb, + * @since 3.2, + * @see FileCopyUtils, + */, +public abstract class StreamUtils {, +, +	public static final int BUFFER_SIZE = 4096;, +, +, +	/**, +	 * Copy the contents of the given InputStream into a new byte array., +	 * Leaves the stream open when done., +	 * @param in the stream to copy from, +	 * @return the new byte array that has been copied to, +	 * @throws IOException in case of I/O errors, +	 */, +	public static byte[] copyToByteArray(InputStream in) throws IOException {, +		ByteArrayOutputStream out = new ByteArrayOutputStream(BUFFER_SIZE);, +		copy(in, out);, +		return out.toByteArray();, +	}, +, +	/**, +	 * Copy the contents of the given InputStream into a String., +	 * Leaves the stream open when done., +	 * @param in the InputStream to copy from, +	 * @return the String that has been copied to, +	 * @throws IOException in case of I/O errors, +	 */, +	public static String copyToString(InputStream in, Charset charset) throws IOException {, +		Assert.notNull(in, "No InputStream specified");, +		StringBuilder out = new StringBuilder();, +		InputStreamReader reader = new InputStreamReader(in, charset);, +		char[] buffer = new char[BUFFER_SIZE];, +		int bytesRead = -1;, +		while ((bytesRead = reader.read(buffer)) != -1) {, +			out.append(buffer, 0, bytesRead);, +		}, +		return out.toString();, +	}, +]