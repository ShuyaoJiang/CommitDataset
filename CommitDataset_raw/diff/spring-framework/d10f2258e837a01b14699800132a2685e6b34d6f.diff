[+++ b/org.springframework.aspects/src/main/java/org/springframework/cache/aspectj/AnnotationCacheAspect.aj, +import org.springframework.cache.annotation.CachePut;, +import org.springframework.cache.annotation.Caching;, +	 * Matches the execution of any public method in a type with the @{@link CachePut}, +	 * annotation, or any subtype of a type with the {@code CachePut} annotation., +	 */, +	private pointcut executionOfAnyPublicMethodInAtCachePutType() :, +		execution(public * ((@CachePut *)+).*(..)) && @this(CachePut);, +, +	/**, +	 * Matches the execution of any public method in a type with the @{@link Caching}, +	 * annotation, or any subtype of a type with the {@code Caching} annotation., +	 */, +	private pointcut executionOfAnyPublicMethodInAtCachingType() :, +		execution(public * ((@Caching *)+).*(..)) && @this(Caching);, +, +	/**, +	 * Matches the execution of any method with the @{@link CachePut} annotation., +	 */, +	private pointcut executionOfCachePutMethod() :, +		execution(* *(..)) && @annotation(CachePut);, +, +	/**, +	 * Matches the execution of any method with the @{@link Caching} annotation., +	 */, +	private pointcut executionOfCachingMethod() :, +		execution(* *(..)) && @annotation(Caching);, +, +	/**, +				|| executionOfAnyPublicMethodInAtCachePutType(), +				|| executionOfAnyPublicMethodInAtCachingType(), +				|| executionOfCacheEvictMethod(), +				|| executionOfCachePutMethod(), +				|| executionOfCachingMethod()), +++ b/org.springframework.aspects/src/main/java/org/springframework/cache/aspectj/AnnotationCacheAspect.aj, +import org.springframework.cache.annotation.CachePut;, +import org.springframework.cache.annotation.Caching;, +	 * Matches the execution of any public method in a type with the @{@link CachePut}, +	 * annotation, or any subtype of a type with the {@code CachePut} annotation., +	 */, +	private pointcut executionOfAnyPublicMethodInAtCachePutType() :, +		execution(public * ((@CachePut *)+).*(..)) && @this(CachePut);, +, +	/**, +	 * Matches the execution of any public method in a type with the @{@link Caching}, +	 * annotation, or any subtype of a type with the {@code Caching} annotation., +	 */, +	private pointcut executionOfAnyPublicMethodInAtCachingType() :, +		execution(public * ((@Caching *)+).*(..)) && @this(Caching);, +, +	/**, +	 * Matches the execution of any method with the @{@link CachePut} annotation., +	 */, +	private pointcut executionOfCachePutMethod() :, +		execution(* *(..)) && @annotation(CachePut);, +, +	/**, +	 * Matches the execution of any method with the @{@link Caching} annotation., +	 */, +	private pointcut executionOfCachingMethod() :, +		execution(* *(..)) && @annotation(Caching);, +, +	/**, +				|| executionOfAnyPublicMethodInAtCachePutType(), +				|| executionOfAnyPublicMethodInAtCachingType(), +				|| executionOfCacheEvictMethod(), +				|| executionOfCachePutMethod(), +				|| executionOfCachingMethod()), +++ b/org.springframework.aspects/src/test/java/org/springframework/cache/aspectj/AbstractAnnotationTest.java, + * Copyright 2010-2011 the original author or authors., +import java.util.Collection;, +import org.springframework.cache.Cache;, +import org.springframework.cache.CacheManager;, +import org.springframework.cache.config.AnnotatedClassCacheableService;, + *, + * @author Chris Beams, +	protected CacheableService<?> cs;, +	protected CacheableService<?> ccs;, +	protected CacheManager cm;, +, +	/** @return a refreshed application context */, +	protected abstract ApplicationContext getApplicationContext();, +		ctx = getApplicationContext();, +		cm = ctx.getBean(CacheManager.class);, +		Collection<String> cn = cm.getCacheNames();, +		assertTrue(cn.contains("default"));, +	public void testCacheable(CacheableService<?> service) throws Exception {, +	public void testEvict(CacheableService<?> service) throws Exception {, +	public void testEvictEarly(CacheableService<?> service) throws Exception {, +		Object o1 = new Object();, +, +		Object r1 = service.cache(o1);, +		Object r2 = service.cache(o1);, +, +		assertSame(r1, r2);, +		try {, +			service.evictEarly(o1);, +		} catch (RuntimeException ex) {, +			// expected, +		}]