[+++ b/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java, +import org.springframework.util.ObjectUtils;, +import org.springframework.util.StringUtils;, +		assertThat(failureReason("a string", value), value, instanceOf(String.class));, +		assertThat(failureReason("a boolean", value), value, instanceOf(Boolean.class));, +		assertThat(failureReason("a number", value), value, instanceOf(Number.class));, +		assertThat(failureReason("an array", value), value, instanceOf(List.class));, +		assertThat(failureReason("a map", value), value, instanceOf(Map.class));, +		String reason = failureReason("no value", value);, +	/**, +	 * Evaluate the JSON path expression against the supplied {@code content}, +	 * and assert that an empty value exists at the given path., +	 * <p>For the semantics of <em>empty</em>, consult the Javadoc for, +	 * {@link ObjectUtils#isEmpty(Object)}., +	 * @param content the JSON content, +	 */, +	public void assertValueIsEmpty(String content) throws ParseException {, +		Object value = evaluateJsonPath(content);, +		assertTrue(failureReason("an empty value", value), ObjectUtils.isEmpty(value));, +	}, +, +	/**, +	 * Evaluate the JSON path expression against the supplied {@code content}, +	 * and assert that a non-empty value exists at the given path., +	 * <p>For the semantics of <em>empty</em>, consult the Javadoc for, +	 * {@link ObjectUtils#isEmpty(Object)}., +	 * @param content the JSON content, +	 */, +	public void assertValueIsNotEmpty(String content) throws ParseException {, +		Object value = evaluateJsonPath(content);, +		assertTrue(failureReason("a non-empty value", value), !ObjectUtils.isEmpty(value));, +	}, +, +	private String failureReason(String expectedDescription, Object value) {, +		return String.format("Expected %s at JSON path \"%s\" but found: %s", expectedDescription, this.expression,, +			ObjectUtils.nullSafeToString(StringUtils.quoteIfString(value)));, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/util/JsonPathExpectationsHelper.java, +import org.springframework.util.ObjectUtils;, +import org.springframework.util.StringUtils;, +		assertThat(failureReason("a string", value), value, instanceOf(String.class));, +		assertThat(failureReason("a boolean", value), value, instanceOf(Boolean.class));, +		assertThat(failureReason("a number", value), value, instanceOf(Number.class));, +		assertThat(failureReason("an array", value), value, instanceOf(List.class));, +		assertThat(failureReason("a map", value), value, instanceOf(Map.class));, +		String reason = failureReason("no value", value);, +	/**, +	 * Evaluate the JSON path expression against the supplied {@code content}, +	 * and assert that an empty value exists at the given path., +	 * <p>For the semantics of <em>empty</em>, consult the Javadoc for, +	 * {@link ObjectUtils#isEmpty(Object)}., +	 * @param content the JSON content, +	 */, +	public void assertValueIsEmpty(String content) throws ParseException {, +		Object value = evaluateJsonPath(content);, +		assertTrue(failureReason("an empty value", value), ObjectUtils.isEmpty(value));, +	}, +, +	/**, +	 * Evaluate the JSON path expression against the supplied {@code content}, +	 * and assert that a non-empty value exists at the given path., +	 * <p>For the semantics of <em>empty</em>, consult the Javadoc for, +	 * {@link ObjectUtils#isEmpty(Object)}., +	 * @param content the JSON content, +	 */, +	public void assertValueIsNotEmpty(String content) throws ParseException {, +		Object value = evaluateJsonPath(content);, +		assertTrue(failureReason("a non-empty value", value), !ObjectUtils.isEmpty(value));, +	}, +, +	private String failureReason(String expectedDescription, Object value) {, +		return String.format("Expected %s at JSON path \"%s\" but found: %s", expectedDescription, this.expression,, +			ObjectUtils.nullSafeToString(StringUtils.quoteIfString(value)));, +	}, +, +++ b/spring-test/src/main/java/org/springframework/test/web/client/match/JsonPathRequestMatchers.java, +	 * assert that an empty value exists at the given path., +	 * <p>For the semantics of <em>empty</em>, consult the Javadoc for, +	 * {@link org.springframework.util.ObjectUtils#isEmpty(Object)}., +	 * @since 4.2.1, +	 * @see #isNotEmpty(), +	 * @see #exists(), +	 * @see #doesNotExist(), +	 */, +	public RequestMatcher isEmpty() {, +		return new AbstractJsonPathRequestMatcher() {, +			@Override, +			public void matchInternal(MockClientHttpRequest request) throws IOException, ParseException {, +				JsonPathRequestMatchers.this.jsonPathHelper.assertValueIsEmpty(request.getBodyAsString());, +			}, +		};, +	}, +, +	/**, +	 * Evaluate the JSON path expression against the request content and, +	 * assert that a non-empty value exists at the given path., +	 * <p>For the semantics of <em>empty</em>, consult the Javadoc for, +	 * {@link org.springframework.util.ObjectUtils#isEmpty(Object)}., +	 * @since 4.2.1]