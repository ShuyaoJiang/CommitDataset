[+++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java, +			if (hasNewSessionId(exchange, session)) {, +				this.sessionIdResolver.expireSession(exchange);, +			}, +			this.sessionIdResolver.setSessionId(exchange, session.getId());, +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java, +			if (hasNewSessionId(exchange, session)) {, +				this.sessionIdResolver.expireSession(exchange);, +			}, +			this.sessionIdResolver.setSessionId(exchange, session.getId());, +++ b/spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java, +		WebSession session = this.sessions.get(id);, +		if (session == null) {, +			return Mono.empty();, +		}, +		else if (session.isExpired()) {, +			this.sessions.remove(id);, +			return Mono.empty();, +		}, +		else {, +			return Mono.just(session);, +		}, +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java, +			if (hasNewSessionId(exchange, session)) {, +				this.sessionIdResolver.expireSession(exchange);, +			}, +			this.sessionIdResolver.setSessionId(exchange, session.getId());, +++ b/spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java, +		WebSession session = this.sessions.get(id);, +		if (session == null) {, +			return Mono.empty();, +		}, +		else if (session.isExpired()) {, +			this.sessions.remove(id);, +			return Mono.empty();, +		}, +		else {, +			return Mono.just(session);, +		}, +++ b/spring-web/src/main/java/org/springframework/web/server/session/WebSessionStore.java, +	 * <p><strong>Note:</strong> This method should perform an expiration check,, +	 * remove the session if it has expired and return empty., +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java, +			if (hasNewSessionId(exchange, session)) {, +				this.sessionIdResolver.expireSession(exchange);, +			}, +			this.sessionIdResolver.setSessionId(exchange, session.getId());, +++ b/spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java, +		WebSession session = this.sessions.get(id);, +		if (session == null) {, +			return Mono.empty();, +		}, +		else if (session.isExpired()) {, +			this.sessions.remove(id);, +			return Mono.empty();, +		}, +		else {, +			return Mono.just(session);, +		}, +++ b/spring-web/src/main/java/org/springframework/web/server/session/WebSessionStore.java, +	 * <p><strong>Note:</strong> This method should perform an expiration check,, +	 * remove the session if it has expired and return empty., +++ b/spring-web/src/test/java/org/springframework/web/server/session/DefaultWebSessionManagerTests.java, +	, +++ b/spring-web/src/main/java/org/springframework/web/server/session/DefaultWebSessionManager.java, +			if (hasNewSessionId(exchange, session)) {, +				this.sessionIdResolver.expireSession(exchange);, +			}, +			this.sessionIdResolver.setSessionId(exchange, session.getId());, +++ b/spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java, +		WebSession session = this.sessions.get(id);, +		if (session == null) {, +			return Mono.empty();, +		}, +		else if (session.isExpired()) {, +			this.sessions.remove(id);, +			return Mono.empty();, +		}, +		else {, +			return Mono.just(session);, +		}, +++ b/spring-web/src/main/java/org/springframework/web/server/session/WebSessionStore.java, +	 * <p><strong>Note:</strong> This method should perform an expiration check,, +	 * remove the session if it has expired and return empty., +++ b/spring-web/src/test/java/org/springframework/web/server/session/DefaultWebSessionManagerTests.java, +	, +++ b/spring-web/src/test/java/org/springframework/web/server/session/InMemoryWebSessionStoreTests.java, +import java.time.Clock;, +import java.time.Duration;, +, +import static junit.framework.TestCase.assertSame;, +import static org.junit.Assert.assertNull;, +	private InMemoryWebSessionStore store = new InMemoryWebSessionStore();, +		WebSession original = this.store.createWebSession().block();, +		WebSession copy = this.store.updateLastAccessTime(original).block();, +		WebSession original = this.store.createWebSession().block();, +		WebSession copy = this.store.updateLastAccessTime(original).block();, +		WebSession session = this.store.createWebSession().block();, +		WebSession session = this.store.createWebSession().block();, +	@Test]