[+++ b/spring-test/src/main/java/org/springframework/mock/web/MockCookie.java, +		Assert.isTrue(cookieParts.length == 2, () -> "Invalid Set-Cookie header '" + setCookieHeader + "'");, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockCookie.java, +		Assert.isTrue(cookieParts.length == 2, () -> "Invalid Set-Cookie header '" + setCookieHeader + "'");, +++ b/spring-test/src/test/java/org/springframework/mock/web/MockCookieTests.java, +	public final ExpectedException exception = ExpectedException.none();, +		assertCookie(cookie, "SESSION", "123");, +		assertNull(cookie.getDomain());, +		assertEquals(-1, cookie.getMaxAge());, +		assertNull(cookie.getPath());, +		assertFalse(cookie.isHttpOnly());, +		assertFalse(cookie.getSecure());, +		assertNull(cookie.getSameSite());, +	public void parseHeaderWithoutAttributes() {, +		MockCookie cookie;, +, +		cookie = MockCookie.parse("SESSION=123");, +		assertCookie(cookie, "SESSION", "123");, +, +		cookie = MockCookie.parse("SESSION=123;");, +		assertCookie(cookie, "SESSION", "123");, +	}, +, +	@Test, +	public void parseHeaderWithAttributes() {, +		assertCookie(cookie, "SESSION", "123");, +		exception.expectMessage("Invalid Set-Cookie header 'BOOM'");, +		String header = "SESSION=123; Path=";, +	private void assertCookie(MockCookie cookie, String name, String value) {, +		assertEquals(name, cookie.getName());, +		assertEquals(value, cookie.getValue());]