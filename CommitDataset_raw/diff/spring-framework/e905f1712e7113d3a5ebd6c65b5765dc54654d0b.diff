[+++ b/spring-core/src/main/java/org/springframework/core/annotation/AbstractMergedAnnotation.java, +	public AnnotationAttributes asAnnotationAttributes(Adapt... adaptations) {, +		return asMap(mergedAnnotation -> new AnnotationAttributes(getType()), adaptations);, +	}, +, +	@Override, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AbstractMergedAnnotation.java, +	public AnnotationAttributes asAnnotationAttributes(Adapt... adaptations) {, +		return asMap(mergedAnnotation -> new AnnotationAttributes(getType()), adaptations);, +	}, +, +	@Override, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +import org.springframework.core.annotation.MergedAnnotation.Adapt;, +		Adapt[] adaptations = Adapt.values(classValuesAsString, nestedAnnotationsAsMap);, +				.collect(MergedAnnotationCollectors.toMultiValueMap(AnnotatedElementUtils::nullIfEmpty, adaptations));, +		return annotation.asAnnotationAttributes(, +				Adapt.values(classValuesAsString, nestedAnnotationsAsMap));, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AbstractMergedAnnotation.java, +	public AnnotationAttributes asAnnotationAttributes(Adapt... adaptations) {, +		return asMap(mergedAnnotation -> new AnnotationAttributes(getType()), adaptations);, +	}, +, +	@Override, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +import org.springframework.core.annotation.MergedAnnotation.Adapt;, +		Adapt[] adaptations = Adapt.values(classValuesAsString, nestedAnnotationsAsMap);, +				.collect(MergedAnnotationCollectors.toMultiValueMap(AnnotatedElementUtils::nullIfEmpty, adaptations));, +		return annotation.asAnnotationAttributes(, +				Adapt.values(classValuesAsString, nestedAnnotationsAsMap));, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +import org.springframework.core.annotation.MergedAnnotation.Adapt;, +		Adapt[] adaptations = Adapt.values(classValuesAsString, nestedAnnotationsAsMap);, +				.asMap(mergedAnnotation ->, +						new AnnotationAttributes(mergedAnnotation.getType(), true), adaptations);, +					.asMap(annotation ->, +							new AnnotationAttributes(annotation.getType(), true), Adapt.ANNOTATION_TO_MAP);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AbstractMergedAnnotation.java, +	public AnnotationAttributes asAnnotationAttributes(Adapt... adaptations) {, +		return asMap(mergedAnnotation -> new AnnotationAttributes(getType()), adaptations);, +	}, +, +	@Override, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +import org.springframework.core.annotation.MergedAnnotation.Adapt;, +		Adapt[] adaptations = Adapt.values(classValuesAsString, nestedAnnotationsAsMap);, +				.collect(MergedAnnotationCollectors.toMultiValueMap(AnnotatedElementUtils::nullIfEmpty, adaptations));, +		return annotation.asAnnotationAttributes(, +				Adapt.values(classValuesAsString, nestedAnnotationsAsMap));, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +import org.springframework.core.annotation.MergedAnnotation.Adapt;, +		Adapt[] adaptations = Adapt.values(classValuesAsString, nestedAnnotationsAsMap);, +				.asMap(mergedAnnotation ->, +						new AnnotationAttributes(mergedAnnotation.getType(), true), adaptations);, +					.asMap(annotation ->, +							new AnnotationAttributes(annotation.getType(), true), Adapt.ANNOTATION_TO_MAP);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/MergedAnnotation.java, +	 * Create a new mutable {@link AnnotationAttributes} instance from this, +	 * merged annotation., +	 * <p>The {@link Adapt adaptations} may be used to change the way that values, +	 * are added., +	 * @param adaptations adaptations that should be applied to the annotation values, +	AnnotationAttributes asAnnotationAttributes(Adapt... adaptations);, +	 * Return an immutable {@link Map} that contains all the annotation attributes., +	 * <p>The {@link Adapt adaptations} may be used to change the way that values are added., +	 * @param adaptations adaptations that should be applied to the annotation values, +	 * @return an immutable map containing the attributes and values, +	 */, +	Map<String, Object> asMap(Adapt... adaptations);, +, +	/**, +	 * Create a new {@link Map} instance of the given type that contains all the annotation, +	 * attributes., +	 * <p>The {@link Adapt adaptations} may be used to change the way that values are added., +	 * @param adaptations adaptations that should be applied to the annotation values, +	<T extends Map<String, Object>> T asMap(Function<MergedAnnotation<?>, T> factory, Adapt... adaptations);, +	 * Adaptations that can be applied to attributes values when creating, +	 * {@linkplain MergedAnnotation#asMap(Adapt...) Maps} or, +	 * {@link MergedAnnotation#asAnnotationAttributes(Adapt...) AnnotationAttributes}., +	enum Adapt {, +		 * Adapt class or class array attributes to strings., +		 * Adapt nested annotation or annotation arrays to maps rather, +		protected final boolean isIn(Adapt... adaptations) {, +			for (Adapt candidate : adaptations) {, +		 * Factory method to create a {@link Adapt} array from a set of boolean flags., +		 * @param classToString if {@link Adapt#CLASS_TO_STRING} is included, +		 * @param annotationsToMap if {@link Adapt#ANNOTATION_TO_MAP} is included, +		 * @return a new {@link Adapt} array, +		public static Adapt[] values(boolean classToString, boolean annotationsToMap) {, +			EnumSet<Adapt> result = EnumSet.noneOf(Adapt.class);, +			addIfTrue(result, Adapt.CLASS_TO_STRING, classToString);, +			addIfTrue(result, Adapt.ANNOTATION_TO_MAP, annotationsToMap);, +			return result.toArray(new Adapt[0]);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AbstractMergedAnnotation.java, +	public AnnotationAttributes asAnnotationAttributes(Adapt... adaptations) {, +		return asMap(mergedAnnotation -> new AnnotationAttributes(getType()), adaptations);, +	}, +, +	@Override, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java]