[+++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +	/**, +	 * Set the content of the request body as a byte array., +	 * @see #getContentAsByteArray(), +	 * @see #getContentAsString(), +	 */, +	/**, +	 * Get the content of the request body as a byte array., +	 * @since 5.0, +	 * @see #setContent(byte[]), +	 * @see #getContentAsString(), +	 */, +	public byte[] getContentAsByteArray() {, +		return this.content;, +	}, +, +	/**, +	 * Get the content of the request body as a {@code String}, using the configured, +	 * {@linkplain #getCharacterEncoding character encoding} if present., +	 * @since 5.0, +	 * @see #setContent(byte[]), +	 * @see #getContentAsByteArray(), +	 * @see #setCharacterEncoding(String), +	 */, +	public String getContentAsString() throws UnsupportedEncodingException {, +		if (this.content == null) {, +			return null;, +		}, +, +		return (this.characterEncoding != null ?, +				new String(this.content, this.characterEncoding) : new String(this.content));, +	}, +, +++ b/spring-test/src/main/java/org/springframework/mock/web/MockHttpServletRequest.java, +	/**, +	 * Set the content of the request body as a byte array., +	 * @see #getContentAsByteArray(), +	 * @see #getContentAsString(), +	 */, +	/**, +	 * Get the content of the request body as a byte array., +	 * @since 5.0, +	 * @see #setContent(byte[]), +	 * @see #getContentAsString(), +	 */, +	public byte[] getContentAsByteArray() {, +		return this.content;, +	}, +, +	/**, +	 * Get the content of the request body as a {@code String}, using the configured, +	 * {@linkplain #getCharacterEncoding character encoding} if present., +	 * @since 5.0, +	 * @see #setContent(byte[]), +	 * @see #getContentAsByteArray(), +	 * @see #setCharacterEncoding(String), +	 */, +	public String getContentAsString() throws UnsupportedEncodingException {, +		if (this.content == null) {, +			return null;, +		}, +, +		return (this.characterEncoding != null ?, +				new String(this.content, this.characterEncoding) : new String(this.content));, +	}, +, +++ b/spring-test/src/test/java/org/springframework/mock/web/MockHttpServletRequestTests.java, +	public void setContentAndGetInputStream() throws IOException {, +	public void setContentAndGetContentAsByteArray() throws IOException {, +		byte[] bytes = "request body".getBytes();, +		request.setContent(bytes);, +		assertEquals(bytes.length, request.getContentLength());, +		assertNotNull(request.getContentAsByteArray());, +		assertEquals(bytes, request.getContentAsByteArray());, +	}, +, +	@Test, +	public void setContentAndGetContentAsStringWithDefaultCharacterEncoding() throws IOException {, +		String palindrome = "ablE was I ere I saw Elba";, +		byte[] bytes = palindrome.getBytes();, +		request.setContent(bytes);, +		assertEquals(bytes.length, request.getContentLength());, +		assertNotNull(request.getContentAsString());, +		assertEquals(palindrome, request.getContentAsString());, +	}, +, +	@Test, +	public void setContentAndGetContentAsStringWithExplicitCharacterEncoding() throws IOException {, +		String palindrome = "ablE was I ere I saw Elba";, +		byte[] bytes = palindrome.getBytes("UTF-16");, +		request.setCharacterEncoding("UTF-16");, +		request.setContent(bytes);, +		assertEquals(bytes.length, request.getContentLength());, +		assertNotNull(request.getContentAsString());, +		assertEquals(palindrome, request.getContentAsString());, +	}, +, +	@Test, +		assertNull(request.getContentAsByteArray());, +		assertNull(request.getContentAsString());]