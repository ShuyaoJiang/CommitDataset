[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy.java, +import java.util.Collections;, +import static org.glassfish.tyrus.spi.WebSocketEngine.UpgradeStatus.SUCCESS;, +, +		boolean success;, +			success = SUCCESS.equals(upgradeInfo.getStatus());, +			if (success) {, +			unregisterTyrusEndpoint(engine, tyrusEndpoint);, +, +		unregisterTyrusEndpoint(engine, tyrusEndpoint);, +		if (!success) {, +			throw new HandshakeFailureException("Unexpected handshake failure: " + request.getURI());, +		endpointConfig.setSubprotocols(Collections.singletonList(protocol));, +	private void unregisterTyrusEndpoint(TyrusWebSocketEngine engine, Object tyrusEndpoint) {, +		if (tyrusEndpoint != null) {, +			try {, +				getEndpointHelper().unregister(engine, tyrusEndpoint);, +			}, +			catch (Throwable ex) {, +				// ignore, +			}, +		}, +	}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy.java, +import java.util.Collections;, +import static org.glassfish.tyrus.spi.WebSocketEngine.UpgradeStatus.SUCCESS;, +, +		boolean success;, +			success = SUCCESS.equals(upgradeInfo.getStatus());, +			if (success) {, +			unregisterTyrusEndpoint(engine, tyrusEndpoint);, +, +		unregisterTyrusEndpoint(engine, tyrusEndpoint);, +		if (!success) {, +			throw new HandshakeFailureException("Unexpected handshake failure: " + request.getURI());, +		endpointConfig.setSubprotocols(Collections.singletonList(protocol));, +	private void unregisterTyrusEndpoint(TyrusWebSocketEngine engine, Object tyrusEndpoint) {, +		if (tyrusEndpoint != null) {, +			try {, +				getEndpointHelper().unregister(engine, tyrusEndpoint);, +			}, +			catch (Throwable ex) {, +				// ignore, +			}, +		}, +	}, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/server/standard/WebLogicRequestUpgradeStrategy.java, +import org.glassfish.tyrus.core.TyrusEndpointWrapper;, +import org.glassfish.tyrus.core.TyrusWebSocketEngine;, +import org.springframework.util.ClassUtils;, + * A WebSocket {@code RequestUpgradeStrategy} for Oracle's WebLogic., + * Supports 12.1.3 and 12.2.1.0., +	private static ClassLoader classLoader = WebLogicRequestUpgradeStrategy.class.getClassLoader();, +, +	private static final boolean WLS_12_1_3 = isWebLogic1213();, +, +	private static final TyrusEndpointHelper endpointHelper = WLS_12_1_3 ?, +			new Tyrus135EndpointHelper() : new Tyrus17EndpointHelper();, +, +	private static boolean isWebLogic1213() {, +		try {, +			type("weblogic.websocket.tyrus.TyrusMuxableWebSocket").getDeclaredConstructor(, +					type("weblogic.servlet.internal.MuxableSocketHTTP"));, +			return true;, +		}, +		catch (NoSuchMethodException e) {, +			return false;, +		}, +		catch (ClassNotFoundException ex) {, +			throw new IllegalStateException("No compatible WebSocket version found", ex);, +		}, +	}, +, +, +		Object webSocket = webSocketHelper.newInstance(request, httpSocket);, +	private static Class<?> type(String className) throws ClassNotFoundException {, +		return classLoader.loadClass(className);, +	}, +, +	private static Method method(String className, String method, Class<?>... paramTypes), +			throws ClassNotFoundException, NoSuchMethodException {, +, +		return type(className).getDeclaredMethod(method, paramTypes);, +	}, +, +		private static final Class<?> type;, +		private static final Constructor<?> constructor;, +		private static final SubjectHelper subjectHelper;, +		private static final Method upgradeMethod;, +, +		private static final Method readEventMethod;, +				type = type("weblogic.websocket.tyrus.TyrusMuxableWebSocket");, +				if (WLS_12_1_3) {, +					constructor = type.getDeclaredConstructor(type("weblogic.servlet.internal.MuxableSocketHTTP"));, +					subjectHelper = null;, +				}, +				else {, +					constructor = type.getDeclaredConstructor(, +							type("weblogic.servlet.internal.MuxableSocketHTTP"),, +							type("weblogic.websocket.tyrus.CoherenceServletFilterService"),]