[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/server/DefaultServerRequest.java, +import java.util.function.Function;, +import org.springframework.web.reactive.function.UnsupportedMediaTypeException;, +import org.springframework.web.server.UnsupportedMediaTypeStatusException;, +	private static final Function<UnsupportedMediaTypeException, UnsupportedMediaTypeStatusException> ERROR_MAPPER =, +			ex -> ex.getContentType(), +					.map(contentType -> new UnsupportedMediaTypeStatusException(contentType,, +							ex.getSupportedMediaTypes())), +					.orElseGet(() -> new UnsupportedMediaTypeStatusException(ex.getMessage()));, +, +		Mono<T> mono = body(BodyExtractors.toMono(elementClass));, +		return mono.mapError(UnsupportedMediaTypeException.class, ERROR_MAPPER);, +		Flux<T> flux = body(BodyExtractors.toFlux(elementClass));, +		return flux.mapError(UnsupportedMediaTypeException.class, ERROR_MAPPER);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/function/server/DefaultServerRequest.java, +import java.util.function.Function;, +import org.springframework.web.reactive.function.UnsupportedMediaTypeException;, +import org.springframework.web.server.UnsupportedMediaTypeStatusException;, +	private static final Function<UnsupportedMediaTypeException, UnsupportedMediaTypeStatusException> ERROR_MAPPER =, +			ex -> ex.getContentType(), +					.map(contentType -> new UnsupportedMediaTypeStatusException(contentType,, +							ex.getSupportedMediaTypes())), +					.orElseGet(() -> new UnsupportedMediaTypeStatusException(ex.getMessage()));, +, +		Mono<T> mono = body(BodyExtractors.toMono(elementClass));, +		return mono.mapError(UnsupportedMediaTypeException.class, ERROR_MAPPER);, +		Flux<T> flux = body(BodyExtractors.toFlux(elementClass));, +		return flux.mapError(UnsupportedMediaTypeException.class, ERROR_MAPPER);, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/function/server/DefaultServerRequestTests.java, +import reactor.test.StepVerifier;, +import org.springframework.web.server.UnsupportedMediaTypeStatusException;, +	@Test, +	public void bodyUnacceptable() throws Exception {, +		DefaultDataBufferFactory factory = new DefaultDataBufferFactory();, +		DefaultDataBuffer dataBuffer =, +				factory.wrap(ByteBuffer.wrap("foo".getBytes(StandardCharsets.UTF_8)));, +		Flux<DataBuffer> body = Flux.just(dataBuffer);, +, +		HttpHeaders httpHeaders = new HttpHeaders();, +		httpHeaders.setContentType(MediaType.TEXT_PLAIN);, +		when(mockRequest.getHeaders()).thenReturn(httpHeaders);, +		when(mockRequest.getBody()).thenReturn(body);, +, +		Set<HttpMessageReader<?>> messageReaders = Collections.emptySet();, +		when(mockHandlerStrategies.messageReaders()).thenReturn(messageReaders::stream);, +, +		Flux<String> resultFlux = defaultRequest.bodyToFlux(String.class);, +		StepVerifier.create(resultFlux), +				.expectError(UnsupportedMediaTypeStatusException.class), +				.verify();, +	}, +]