[+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.java, + * Copyright 2002-2010 the original author or authors., + * A generic implementation of the {@link TableMetaDataProvider} that should provide, + * enough features for all supported databases., +			Arrays.asList("Apache Derby", "HSQL Database Engine");, +	private NativeJdbcExtractor nativeJdbcExtractor;, +		this.userName = databaseMetaData.getUserName();, +	 * Get whether identifiers use upper case, +	public boolean isStoresUpperCaseIdentifiers() {, +		return this.storesUpperCaseIdentifiers;, +	 * Specify whether identifiers use lower case., +	/**, +	 * Get whether identifiers use lower case, +	 */, +	public boolean isStoresLowerCaseIdentifiers() {, +		return this.storesLowerCaseIdentifiers;, +	}, +, +		return this.tableColumnMetaDataUsed;, +		return this.insertParameterMetaData;, +		return this.getGeneratedKeysSupported;, +	public boolean isGeneratedKeysColumnNameArraySupported() {, +		return this.generatedKeysColumnNameArraySupported;, +	}, +, +	protected NativeJdbcExtractor getNativeJdbcExtractor() {, +		return this.nativeJdbcExtractor;, +	}, +, +	public void initializeWithMetaData(DatabaseMetaData databaseMetaData) throws SQLException {, +			if (this.productsNotSupportingGeneratedKeysColumnNameArray.contains(databaseProductName)) {, +			this.databaseVersion = databaseMetaData.getDatabaseProductVersion();, +	public void initializeWithTableColumnMetaData(DatabaseMetaData databaseMetaData, String catalogName,, +			String schemaName, String tableName) throws SQLException {, +		this.tableColumnMetaDataUsed = true;, +		if (tableName == null) {, +		}, +		else if (isStoresUpperCaseIdentifiers()) {, +		}, +		else if(isStoresLowerCaseIdentifiers()) {, +		}, +		else {, +	}, +		if (catalogName == null) {, +		}, +		else if (isStoresUpperCaseIdentifiers()) {, +		}, +		else if(isStoresLowerCaseIdentifiers()) {, +		}, +		else {, +	}, +		if (schemaName == null) {, +		}, +		else if (isStoresUpperCaseIdentifiers()) {, +		}, +		else if(isStoresLowerCaseIdentifiers()) {, +		}, +		else {, +	}, +	 * Provide access to version info for subclasses., +		return this.databaseVersion;, +	 * Method supporting the metedata processing for a table., +	private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, String catalogName,, +			String schemaName, String tableName) {, +, +			TableMetaData tmd;, +						throw new DataAccessResourceFailureException("Unable to locate table meta data for '" +, +								tableName + "' in the default schema");, +					throw new DataAccessResourceFailureException("Unable to locate table meta data for '" +, +							tableName + "' in the '" + schemaName + "' schema");, +				this.insertParameterMetaData.add(meta);, +			logger.warn("Error while retrieving metadata for table columns: " + se.getMessage());, +				logger.warn("Problem closing ResultSet for table column metadata " + se.getMessage());, +	 * Inner class representing table meta data., +	private static class TableMetaData {, +, +, +, +, +		public String getCatalogName() {, +			return this.catalogName;, +		public String getSchemaName() {, +			return this.schemaName;, +		public String getTableName() {, +			return this.tableName;, +, +		public String getType() {, +			return this.type;, +, +}, +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.java, + * Copyright 2002-2010 the original author or authors., + * A generic implementation of the {@link TableMetaDataProvider} that should provide, + * enough features for all supported databases., +			Arrays.asList("Apache Derby", "HSQL Database Engine");, +	private NativeJdbcExtractor nativeJdbcExtractor;, +		this.userName = databaseMetaData.getUserName();, +	 * Get whether identifiers use upper case, +	public boolean isStoresUpperCaseIdentifiers() {, +		return this.storesUpperCaseIdentifiers;]