[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +import org.springframework.core.GenericTypeResolver;, + * Extends {@link AbstractMessageConverterMethodArgumentResolver} with the ability to handle method, + * return values by writing to the response with {@link HttpMessageConverter HttpMessageConverters}., + * @author Juergen Hoeller, +		Type targetType;, +			targetType = String.class;, +			targetType = GenericTypeResolver.resolveType(getGenericType(returnType), returnType.getContainingClass());, +			if (value != null && inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != null &&, +					outputMessage.getServletResponse().getStatus() == 200) {, +					targetType = RESOURCE_REGION_LIST_TYPE;, +			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request, valueType, targetType);, +				GenericHttpMessageConverter genericConverter = (converter instanceof GenericHttpMessageConverter ?, +						(GenericHttpMessageConverter<?>) converter : null);, +						((GenericHttpMessageConverter) converter).canWrite(targetType, valueType, selectedMediaType) :, +							Object formatted = (body instanceof CharSequence ? "\"" + body + "\"" : body);, +							genericConverter.write(body, targetType, selectedMediaType, outputMessage);, +	protected List<MediaType> getProducibleMediaTypes(, +			HttpServletRequest request, Class<?> valueClass, @Nullable Type targetType) {, +		Set<MediaType> mediaTypes =, +				(Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);, +				if (converter instanceof GenericHttpMessageConverter && targetType != null) {, +					if (((GenericHttpMessageConverter<?>) converter).canWrite(targetType, valueClass, null)) {, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +import org.springframework.core.GenericTypeResolver;, + * Extends {@link AbstractMessageConverterMethodArgumentResolver} with the ability to handle method, + * return values by writing to the response with {@link HttpMessageConverter HttpMessageConverters}., + * @author Juergen Hoeller, +		Type targetType;, +			targetType = String.class;, +			targetType = GenericTypeResolver.resolveType(getGenericType(returnType), returnType.getContainingClass());, +			if (value != null && inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != null &&, +					outputMessage.getServletResponse().getStatus() == 200) {, +					targetType = RESOURCE_REGION_LIST_TYPE;, +			List<MediaType> producibleMediaTypes = getProducibleMediaTypes(request, valueType, targetType);, +				GenericHttpMessageConverter genericConverter = (converter instanceof GenericHttpMessageConverter ?, +						(GenericHttpMessageConverter<?>) converter : null);, +						((GenericHttpMessageConverter) converter).canWrite(targetType, valueType, selectedMediaType) :, +							Object formatted = (body instanceof CharSequence ? "\"" + body + "\"" : body);, +							genericConverter.write(body, targetType, selectedMediaType, outputMessage);, +	protected List<MediaType> getProducibleMediaTypes(, +			HttpServletRequest request, Class<?> valueClass, @Nullable Type targetType) {, +		Set<MediaType> mediaTypes =, +				(Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);, +				if (converter instanceof GenericHttpMessageConverter && targetType != null) {, +					if (((GenericHttpMessageConverter<?>) converter).canWrite(targetType, valueClass, null)) {, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessorTests.java, + * Copyright 2002-2018 the original author or authors., +	private static class BaseController<T> {, +, +		@RequestMapping, +		@ResponseBody, +		public List<T> handleTypeInfoList() {, +			List<T> list = new ArrayList<>();, +			list.add((T) new Foo("foo"));, +			list.add((T) new Bar("bar"));, +			return list;, +		}, +	}, +, +, +	private static class JacksonController extends BaseController<ParentClass> {]