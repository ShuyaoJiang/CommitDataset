[+++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +			return (aa.getClass() == ba.getClass());, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +			return (aa.getClass() == ba.getClass());, +++ b/spring-aop/src/main/java/org/springframework/aop/target/AbstractBeanFactoryBasedTargetSource.java, +		if (other == null || getClass() != other.getClass()) {, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +			return (aa.getClass() == ba.getClass());, +++ b/spring-aop/src/main/java/org/springframework/aop/target/AbstractBeanFactoryBasedTargetSource.java, +		if (other == null || getClass() != other.getClass()) {, +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, +		if (object.getClass() == javaUtilOptionalClass) {, +		if (value == null || (value.getClass() == javaUtilOptionalClass && OptionalUnwrapper.isEmpty(value))) {, +				(value.getClass() == javaUtilOptionalClass ? OptionalUnwrapper.unwrap(value) : value)) {, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +			return (aa.getClass() == ba.getClass());, +++ b/spring-aop/src/main/java/org/springframework/aop/target/AbstractBeanFactoryBasedTargetSource.java, +		if (other == null || getClass() != other.getClass()) {, +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, +		if (object.getClass() == javaUtilOptionalClass) {, +		if (value == null || (value.getClass() == javaUtilOptionalClass && OptionalUnwrapper.isEmpty(value))) {, +				(value.getClass() == javaUtilOptionalClass ? OptionalUnwrapper.unwrap(value) : value)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InjectionMetadata.java, + * Copyright 2002-2015 the original author or authors., +		return (metadata == null || metadata.targetClass != clazz);, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +			return (aa.getClass() == ba.getClass());, +++ b/spring-aop/src/main/java/org/springframework/aop/target/AbstractBeanFactoryBasedTargetSource.java, +		if (other == null || getClass() != other.getClass()) {, +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, +		if (object.getClass() == javaUtilOptionalClass) {, +		if (value == null || (value.getClass() == javaUtilOptionalClass && OptionalUnwrapper.isEmpty(value))) {, +				(value.getClass() == javaUtilOptionalClass ? OptionalUnwrapper.unwrap(value) : value)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InjectionMetadata.java, + * Copyright 2002-2015 the original author or authors., +		return (metadata == null || metadata.targetClass != clazz);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/CglibSubclassingInstantiationStrategy.java, +			return (getClass() == other.getClass() &&, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +			return (aa.getClass() == ba.getClass());, +++ b/spring-aop/src/main/java/org/springframework/aop/target/AbstractBeanFactoryBasedTargetSource.java, +		if (other == null || getClass() != other.getClass()) {, +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, +		if (object.getClass() == javaUtilOptionalClass) {, +		if (value == null || (value.getClass() == javaUtilOptionalClass && OptionalUnwrapper.isEmpty(value))) {, +				(value.getClass() == javaUtilOptionalClass ? OptionalUnwrapper.unwrap(value) : value)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InjectionMetadata.java, + * Copyright 2002-2015 the original author or authors., +		return (metadata == null || metadata.targetClass != clazz);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/CglibSubclassingInstantiationStrategy.java, +			return (getClass() == other.getClass() &&, +++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java, +		if (target != null && target.getClass() == javaUtilOptionalClass) {, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +			return (aa.getClass() == ba.getClass());, +++ b/spring-aop/src/main/java/org/springframework/aop/target/AbstractBeanFactoryBasedTargetSource.java, +		if (other == null || getClass() != other.getClass()) {, +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, +		if (object.getClass() == javaUtilOptionalClass) {, +		if (value == null || (value.getClass() == javaUtilOptionalClass && OptionalUnwrapper.isEmpty(value))) {, +				(value.getClass() == javaUtilOptionalClass ? OptionalUnwrapper.unwrap(value) : value)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InjectionMetadata.java, + * Copyright 2002-2015 the original author or authors., +		return (metadata == null || metadata.targetClass != clazz);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/CglibSubclassingInstantiationStrategy.java, +			return (getClass() == other.getClass() &&, +++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java, +		if (target != null && target.getClass() == javaUtilOptionalClass) {, +++ b/spring-context/src/main/java/org/springframework/validation/ObjectError.java, + * Copyright 2002-2015 the original author or authors., +		if (getClass() != other.getClass() || !super.equals(other)) {, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +			return (aa.getClass() == ba.getClass());, +++ b/spring-aop/src/main/java/org/springframework/aop/target/AbstractBeanFactoryBasedTargetSource.java, +		if (other == null || getClass() != other.getClass()) {, +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, +		if (object.getClass() == javaUtilOptionalClass) {, +		if (value == null || (value.getClass() == javaUtilOptionalClass && OptionalUnwrapper.isEmpty(value))) {, +				(value.getClass() == javaUtilOptionalClass ? OptionalUnwrapper.unwrap(value) : value)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InjectionMetadata.java, + * Copyright 2002-2015 the original author or authors., +		return (metadata == null || metadata.targetClass != clazz);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/CglibSubclassingInstantiationStrategy.java, +			return (getClass() == other.getClass() &&, +++ b/spring-context/src/main/java/org/springframework/validation/DataBinder.java, +		if (target != null && target.getClass() == javaUtilOptionalClass) {, +++ b/spring-context/src/main/java/org/springframework/validation/ObjectError.java, + * Copyright 2002-2015 the original author or authors., +		if (getClass() != other.getClass() || !super.equals(other)) {, +++ b/spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java, +			return ((this.staticClass == null || this.staticClass == value) &&, +++ b/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java, +			return (aa.getClass() == ba.getClass());, +++ b/spring-aop/src/main/java/org/springframework/aop/target/AbstractBeanFactoryBasedTargetSource.java, +		if (other == null || getClass() != other.getClass()) {, +++ b/spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java, +		if (object.getClass() == javaUtilOptionalClass) {, +		if (value == null || (value.getClass() == javaUtilOptionalClass && OptionalUnwrapper.isEmpty(value))) {, +				(value.getClass() == javaUtilOptionalClass ? OptionalUnwrapper.unwrap(value) : value)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InjectionMetadata.java]