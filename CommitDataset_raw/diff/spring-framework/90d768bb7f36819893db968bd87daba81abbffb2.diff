[+++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * @since 5.0, +	 * @since 5.0, +	 * Set a configured {@link CacheControl} instance as the, +	 * new value of the {@code Cache-Control} header., +	 * @since 5.0.5, +	 */, +	public void setCacheControl(CacheControl cacheControl) {, +		set(CACHE_CONTROL, cacheControl.getHeaderValue());, +	}, +, +	/**, +	 * Set the duration after which the message is no longer valid,, +	 * as specified by the {@code Expires} header., +	 * @since 5.0.5, +	 */, +	public void setExpires(ZonedDateTime expires) {, +		setZonedDateTime(EXPIRES, expires);, +	}, +, +	/**, +			String value = host.getHostString();, +			int port = host.getPort();, +			if (port != 0) {, +				value = value + ":" + port;, +			}, +, +		String host = null;, +		int separator = (value.startsWith("[") ? value.indexOf(':', value.indexOf(']')) : value.lastIndexOf(':'));, +		if (separator != -1) {, +			host = value.substring(0, separator);, +			String portString = value.substring(separator + 1);, +				// ignore, +, +		if (host == null) {, +			host = value;, +		return InetSocketAddress.createUnresolved(host, port);, +	 * @since 5.0, +	 */, +	public void setZonedDateTime(String headerName, ZonedDateTime date) {, +		set(headerName, DATE_FORMATTERS[0].format(date));, +	}, +, +	/**, +	 * Set the given date under the given header name after formatting it as a string, +	 * using the RFC-1123 date-time formatter. The equivalent of, +	 * {@link #set(String, String)} but for date headers., +		return (headers.readOnly ? headers : new HttpHeaders(headers, true));, +++ b/spring-web/src/main/java/org/springframework/http/HttpHeaders.java, +	 * @since 5.0, +	 * @since 5.0, +	 * Set a configured {@link CacheControl} instance as the, +	 * new value of the {@code Cache-Control} header., +	 * @since 5.0.5, +	 */, +	public void setCacheControl(CacheControl cacheControl) {, +		set(CACHE_CONTROL, cacheControl.getHeaderValue());, +	}, +, +	/**, +	 * Set the duration after which the message is no longer valid,, +	 * as specified by the {@code Expires} header., +	 * @since 5.0.5, +	 */, +	public void setExpires(ZonedDateTime expires) {, +		setZonedDateTime(EXPIRES, expires);, +	}, +, +	/**, +			String value = host.getHostString();, +			int port = host.getPort();, +			if (port != 0) {, +				value = value + ":" + port;, +			}, +, +		String host = null;, +		int separator = (value.startsWith("[") ? value.indexOf(':', value.indexOf(']')) : value.lastIndexOf(':'));, +		if (separator != -1) {, +			host = value.substring(0, separator);, +			String portString = value.substring(separator + 1);, +				// ignore, +, +		if (host == null) {, +			host = value;, +		return InetSocketAddress.createUnresolved(host, port);, +	 * @since 5.0, +	 */, +	public void setZonedDateTime(String headerName, ZonedDateTime date) {, +		set(headerName, DATE_FORMATTERS[0].format(date));, +	}, +, +	/**, +	 * Set the given date under the given header name after formatting it as a string, +	 * using the RFC-1123 date-time formatter. The equivalent of, +	 * {@link #set(String, String)} but for date headers., +		return (headers.readOnly ? headers : new HttpHeaders(headers, true));, +++ b/spring-web/src/test/java/org/springframework/http/HttpHeadersTests.java, + * Copyright 2002-2018 the original author or authors., +import java.time.DateTimeException;, +import static org.hamcrest.Matchers.*;]