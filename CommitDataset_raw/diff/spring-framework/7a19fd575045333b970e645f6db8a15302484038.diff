[+++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, + * {@link Introspector#getBeanInfo(Class)}, designed to discover and register static, + * and/or non-void returning setter methods. For example:, +		for (Method method : findCandidateWriteMethods(delegate.getMethodDescriptors())) {, +			handleCandidateWriteMethod(method);, +	private List<Method> findCandidateWriteMethods(MethodDescriptor[] methodDescriptors) {, +			if (isCandidateWriteMethod(method)) {, +	public static boolean isCandidateWriteMethod(Method method) {, +				(, +						!void.class.isAssignableFrom(method.getReturnType()) ||, +						Modifier.isStatic(method.getModifiers()), +				) &&, +	private void handleCandidateWriteMethod(Method method) throws IntrospectionException {, +++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, + * {@link Introspector#getBeanInfo(Class)}, designed to discover and register static, + * and/or non-void returning setter methods. For example:, +		for (Method method : findCandidateWriteMethods(delegate.getMethodDescriptors())) {, +			handleCandidateWriteMethod(method);, +	private List<Method> findCandidateWriteMethods(MethodDescriptor[] methodDescriptors) {, +			if (isCandidateWriteMethod(method)) {, +	public static boolean isCandidateWriteMethod(Method method) {, +				(, +						!void.class.isAssignableFrom(method.getReturnType()) ||, +						Modifier.isStatic(method.getModifiers()), +				) &&, +	private void handleCandidateWriteMethod(Method method) throws IntrospectionException {, +++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfoFactory.java, +			if (ExtendedBeanInfo.isCandidateWriteMethod(method)) {, +++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, + * {@link Introspector#getBeanInfo(Class)}, designed to discover and register static, + * and/or non-void returning setter methods. For example:, +		for (Method method : findCandidateWriteMethods(delegate.getMethodDescriptors())) {, +			handleCandidateWriteMethod(method);, +	private List<Method> findCandidateWriteMethods(MethodDescriptor[] methodDescriptors) {, +			if (isCandidateWriteMethod(method)) {, +	public static boolean isCandidateWriteMethod(Method method) {, +				(, +						!void.class.isAssignableFrom(method.getReturnType()) ||, +						Modifier.isStatic(method.getModifiers()), +				) &&, +	private void handleCandidateWriteMethod(Method method) throws IntrospectionException {, +++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfoFactory.java, +			if (ExtendedBeanInfo.isCandidateWriteMethod(method)) {, +++ b/spring-beans/src/test/java/org/springframework/beans/BeanWrapperTests.java, +	@Test, +	public void cornerSpr10115() {, +		Spr10115Bean foo = new Spr10115Bean();, +		BeanWrapperImpl bwi = new BeanWrapperImpl();, +		bwi.setWrappedInstance(foo);, +		bwi.setPropertyValue("prop1", "val1");, +		assertEquals("val1", Spr10115Bean.prop1);, +	}, +, +, +	static class Spr10115Bean {, +		private static String prop1;, +, +		public static void setProp1(String prop1) {, +			Spr10115Bean.prop1 = prop1;, +		}, +	}, +, +++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfo.java, + * {@link Introspector#getBeanInfo(Class)}, designed to discover and register static, + * and/or non-void returning setter methods. For example:, +		for (Method method : findCandidateWriteMethods(delegate.getMethodDescriptors())) {, +			handleCandidateWriteMethod(method);, +	private List<Method> findCandidateWriteMethods(MethodDescriptor[] methodDescriptors) {, +			if (isCandidateWriteMethod(method)) {, +	public static boolean isCandidateWriteMethod(Method method) {, +				(, +						!void.class.isAssignableFrom(method.getReturnType()) ||, +						Modifier.isStatic(method.getModifiers()), +				) &&, +	private void handleCandidateWriteMethod(Method method) throws IntrospectionException {, +++ b/spring-beans/src/main/java/org/springframework/beans/ExtendedBeanInfoFactory.java, +			if (ExtendedBeanInfo.isCandidateWriteMethod(method)) {, +++ b/spring-beans/src/test/java/org/springframework/beans/BeanWrapperTests.java, +	@Test, +	public void cornerSpr10115() {, +		Spr10115Bean foo = new Spr10115Bean();, +		BeanWrapperImpl bwi = new BeanWrapperImpl();, +		bwi.setWrappedInstance(foo);, +		bwi.setPropertyValue("prop1", "val1");, +		assertEquals("val1", Spr10115Bean.prop1);, +	}, +, +, +	static class Spr10115Bean {, +		private static String prop1;, +, +		public static void setProp1(String prop1) {, +			Spr10115Bean.prop1 = prop1;, +		}, +	}, +, +++ b/spring-beans/src/test/java/org/springframework/beans/ExtendedBeanInfoTests.java, +, +	@Test, +	public void shouldSupportStaticWriteMethod() throws IntrospectionException {]