[+++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionToCollectionConverter.java, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionToCollectionConverter.java, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/MapToMapConverter.java, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionToCollectionConverter.java, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/MapToMapConverter.java, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/GenericConversionServiceTests.java, +	public void emptyListToListDifferentTargetType() throws Exception {, +		conversionService.addConverter(new CollectionToCollectionConverter(conversionService));, +		conversionService.addConverterFactory(new StringToNumberConverterFactory());, +		List<String> list = new ArrayList<String>();, +		TypeDescriptor sourceType = TypeDescriptor.forObject(list);, +		TypeDescriptor targetType = new TypeDescriptor(getClass().getField("emptyListDifferentTarget"));, +		assertTrue(conversionService.canConvert(sourceType, targetType));, +		assertEquals(LinkedList.class, conversionService.convert(list, sourceType, targetType).getClass());, +	}, +, +	public LinkedList<Integer> emptyListDifferentTarget;, +, +	@Test, +	@Test, +	public void emptyMapToMapDifferentTargetType() throws Exception {, +		conversionService.addConverter(new MapToMapConverter(conversionService));, +		conversionService.addConverterFactory(new StringToNumberConverterFactory());, +		Map<String, String> map = new HashMap<String, String>();, +		TypeDescriptor sourceType = TypeDescriptor.forObject(map);, +		TypeDescriptor targetType = new TypeDescriptor(getClass().getField("emptyMapDifferentTarget"));, +		assertTrue(conversionService.canConvert(sourceType, targetType));, +		assertEquals(map, conversionService.convert(map, sourceType, targetType));, +	}, +, +	public Map<String, String> emptyMapDifferentTarget;, +	, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/CollectionToCollectionConverter.java, +++ b/org.springframework.core/src/main/java/org/springframework/core/convert/support/MapToMapConverter.java, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/GenericConversionServiceTests.java, +	public void emptyListToListDifferentTargetType() throws Exception {, +		conversionService.addConverter(new CollectionToCollectionConverter(conversionService));, +		conversionService.addConverterFactory(new StringToNumberConverterFactory());, +		List<String> list = new ArrayList<String>();, +		TypeDescriptor sourceType = TypeDescriptor.forObject(list);, +		TypeDescriptor targetType = new TypeDescriptor(getClass().getField("emptyListDifferentTarget"));, +		assertTrue(conversionService.canConvert(sourceType, targetType));, +		assertEquals(LinkedList.class, conversionService.convert(list, sourceType, targetType).getClass());, +	}, +, +	public LinkedList<Integer> emptyListDifferentTarget;, +, +	@Test, +	@Test, +	public void emptyMapToMapDifferentTargetType() throws Exception {, +		conversionService.addConverter(new MapToMapConverter(conversionService));, +		conversionService.addConverterFactory(new StringToNumberConverterFactory());, +		Map<String, String> map = new HashMap<String, String>();, +		TypeDescriptor sourceType = TypeDescriptor.forObject(map);, +		TypeDescriptor targetType = new TypeDescriptor(getClass().getField("emptyMapDifferentTarget"));, +		assertTrue(conversionService.canConvert(sourceType, targetType));, +		assertEquals(map, conversionService.convert(map, sourceType, targetType));, +	}, +, +	public Map<String, String> emptyMapDifferentTarget;, +	, +++ b/org.springframework.core/src/test/java/org/springframework/core/convert/support/Spr7728Tests.java, +package org.springframework.core.convert.support;, +, +import java.util.ArrayList;, +import java.util.Collection;, +import java.util.Vector;, +, +import org.junit.Assert;, +import org.junit.Before;, +import org.junit.Test;, +import org.springframework.core.convert.TypeDescriptor;, +, +public class Spr7728Tests, +{, +    private CollectionToCollectionConverter theConverter;, +    private Vector<String> theSrcVector;, +    private TypeDescriptor theSrcType;, +    private TypeDescriptor theTargetType;, +, +    @Before, +    public void setup(), +    {, +        theSrcVector = new Vector<String>();, +        theSrcType = TypeDescriptor.forObject(theSrcVector);, +        theTargetType = TypeDescriptor.forObject(new ArrayList());, +        theConverter = new CollectionToCollectionConverter(new GenericConversionService());, +    }, +, +    @Test, +    public void convertEmptyVector_shouldReturnEmptyArrayList(), +        throws Exception, +    {, +        theSrcVector.add("Element");, +, +        testCollectionConversionToArrayList(theSrcVector);, +    }, +, +    @Test, +    public void convertNonEmptyVector_shouldReturnNonEmptyArrayList()]