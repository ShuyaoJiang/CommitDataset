[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfigurerComposite.java, +			return result.get(0);, +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/config/WebReactiveConfigurerComposite.java, +			return result.get(0);, +++ b/spring-web-reactive/src/test/java/org/springframework/web/reactive/config/DelegatingWebReactiveConfigurationTests.java, +import java.util.Arrays;, +import org.junit.Rule;, +import org.junit.rules.ExpectedException;, +import org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping;, +import static org.mockito.Mockito.mock;, +import static org.mockito.Mockito.when;, +	@Rule, +	public ExpectedException thrown = ExpectedException.none();, +, +, +	@Test, +	public void requestMappingHandlerMapping() throws Exception {, +		delegatingConfig.setConfigurers(Collections.singletonList(webReactiveConfigurer));, +		delegatingConfig.requestMappingHandlerMapping();, +, +		verify(webReactiveConfigurer).createRequestMappingHandlerMapping();, +		verify(webReactiveConfigurer).configureRequestedContentTypeResolver(any(RequestedContentTypeResolverBuilder.class));, +		verify(webReactiveConfigurer).addCorsMappings(any(CorsRegistry.class));, +		verify(webReactiveConfigurer).configurePathMatching(any(PathMatchConfigurer.class));, +	}, +, +	@Test, +	public void requestMappingHandlerMappingFactoryMethod() throws Exception {, +		RequestMappingHandlerMapping mapping = new RequestMappingHandlerMapping();, +, +		WebReactiveConfigurer configurer1 = mock(WebReactiveConfigurer.class);, +		WebReactiveConfigurer configurer2 = mock(WebReactiveConfigurer.class);, +, +		when(configurer1.createRequestMappingHandlerMapping()).thenReturn(Optional.of(mapping));, +		when(configurer2.createRequestMappingHandlerMapping()).thenReturn(Optional.empty());, +, +		delegatingConfig.setConfigurers(Arrays.asList(configurer1, configurer2));, +		Object actual = delegatingConfig.createRequestMappingHandlerMapping();, +, +		assertSame(mapping, actual);, +	}, +, +	@Test, +	public void multipleRequestMappingHandlerMappingFactoryMethods() throws Exception {, +		RequestMappingHandlerMapping mapping1 = new RequestMappingHandlerMapping();, +		RequestMappingHandlerMapping mapping2 = new RequestMappingHandlerMapping();, +, +		WebReactiveConfigurer configurer1 = mock(WebReactiveConfigurer.class);, +		WebReactiveConfigurer configurer2 = mock(WebReactiveConfigurer.class);, +, +		when(configurer1.createRequestMappingHandlerMapping()).thenReturn(Optional.of(mapping1));, +		when(configurer2.createRequestMappingHandlerMapping()).thenReturn(Optional.of(mapping2));, +, +		this.thrown.expectMessage("More than one WebReactiveConfigurer implements " +, +				"RequestMappingHandlerMapping factory method.");, +, +		delegatingConfig.setConfigurers(Arrays.asList(configurer1, configurer2));, +		delegatingConfig.createRequestMappingHandlerMapping();, +	}, +, +]