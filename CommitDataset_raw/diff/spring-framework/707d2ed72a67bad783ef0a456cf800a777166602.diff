[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, +	Object convertValue(Object value, TypeDescriptor typeDescriptor) throws EvaluationException;, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, +	Object convertValue(Object value, TypeDescriptor typeDescriptor) throws EvaluationException;, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, +	public Object convertValue(Object value, TypeDescriptor targetTypeDescriptor) throws EvaluationException {, +	public Object convertValue(TypedValue value, TypeDescriptor targetTypeDescriptor) throws EvaluationException {, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, +	Object convertValue(Object value, TypeDescriptor typeDescriptor) throws EvaluationException;, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, +	public Object convertValue(Object value, TypeDescriptor targetTypeDescriptor) throws EvaluationException {, +	public Object convertValue(TypedValue value, TypeDescriptor targetTypeDescriptor) throws EvaluationException {, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/ConstructorReference.java, +			argumentTypes[i] = (value==null?Object.class:value.getClass());, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, +	Object convertValue(Object value, TypeDescriptor typeDescriptor) throws EvaluationException;, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, +	public Object convertValue(Object value, TypeDescriptor targetTypeDescriptor) throws EvaluationException {, +	public Object convertValue(TypedValue value, TypeDescriptor targetTypeDescriptor) throws EvaluationException {, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/ConstructorReference.java, +			argumentTypes[i] = (value==null?Object.class:value.getClass());, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java, +		int idx = (Integer)state.convertValue(index, INTEGER_TYPE_DESCRIPTOR);, +			int idx = (Integer)state.convertValue(index, INTEGER_TYPE_DESCRIPTOR);, +			int idx = (Integer)state.convertValue(index, INTEGER_TYPE_DESCRIPTOR);, +			array[idx] = (Integer)state.convertValue(newValue, INTEGER_TYPE_DESCRIPTOR);, +			array[idx] = (Boolean)state.convertValue(newValue, BOOLEAN_TYPE_DESCRIPTOR);, +			array[idx] = (Character)state.convertValue(newValue, CHARACTER_TYPE_DESCRIPTOR);, +			array[idx] = (Long)state.convertValue(newValue, LONG_TYPE_DESCRIPTOR);, +			array[idx] = (Short)state.convertValue(newValue, SHORT_TYPE_DESCRIPTOR);, +			array[idx] = (Double)state.convertValue(newValue, DOUBLE_TYPE_DESCRIPTOR);, +			array[idx] = (Float)state.convertValue(newValue, FLOAT_TYPE_DESCRIPTOR);, +			array[idx] = (Byte)state.convertValue(newValue, BYTE_TYPE_DESCRIPTOR);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, +	Object convertValue(Object value, TypeDescriptor typeDescriptor) throws EvaluationException;, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, +	public Object convertValue(Object value, TypeDescriptor targetTypeDescriptor) throws EvaluationException {, +	public Object convertValue(TypedValue value, TypeDescriptor targetTypeDescriptor) throws EvaluationException {, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/ConstructorReference.java, +			argumentTypes[i] = (value==null?Object.class:value.getClass());, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java, +		int idx = (Integer)state.convertValue(index, INTEGER_TYPE_DESCRIPTOR);, +			int idx = (Integer)state.convertValue(index, INTEGER_TYPE_DESCRIPTOR);, +			int idx = (Integer)state.convertValue(index, INTEGER_TYPE_DESCRIPTOR);, +			array[idx] = (Integer)state.convertValue(newValue, INTEGER_TYPE_DESCRIPTOR);, +			array[idx] = (Boolean)state.convertValue(newValue, BOOLEAN_TYPE_DESCRIPTOR);, +			array[idx] = (Character)state.convertValue(newValue, CHARACTER_TYPE_DESCRIPTOR);, +			array[idx] = (Long)state.convertValue(newValue, LONG_TYPE_DESCRIPTOR);, +			array[idx] = (Short)state.convertValue(newValue, SHORT_TYPE_DESCRIPTOR);, +			array[idx] = (Double)state.convertValue(newValue, DOUBLE_TYPE_DESCRIPTOR);, +			array[idx] = (Float)state.convertValue(newValue, FLOAT_TYPE_DESCRIPTOR);, +			array[idx] = (Byte)state.convertValue(newValue, BYTE_TYPE_DESCRIPTOR);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorAnd.java, +			leftValue = (Boolean)state.convertValue(getLeftOperand().getValueInternal(state), BOOLEAN_TYPE_DESCRIPTOR);, +			rightValue = (Boolean)state.convertValue(getRightOperand().getValueInternal(state), BOOLEAN_TYPE_DESCRIPTOR);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, +	Object convertValue(Object value, TypeDescriptor typeDescriptor) throws EvaluationException;, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, +	public Object convertValue(Object value, TypeDescriptor targetTypeDescriptor) throws EvaluationException {, +	public Object convertValue(TypedValue value, TypeDescriptor targetTypeDescriptor) throws EvaluationException {, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/ConstructorReference.java, +			argumentTypes[i] = (value==null?Object.class:value.getClass());, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java, +		int idx = (Integer)state.convertValue(index, INTEGER_TYPE_DESCRIPTOR);, +			int idx = (Integer)state.convertValue(index, INTEGER_TYPE_DESCRIPTOR);, +			int idx = (Integer)state.convertValue(index, INTEGER_TYPE_DESCRIPTOR);, +			array[idx] = (Integer)state.convertValue(newValue, INTEGER_TYPE_DESCRIPTOR);, +			array[idx] = (Boolean)state.convertValue(newValue, BOOLEAN_TYPE_DESCRIPTOR);, +			array[idx] = (Character)state.convertValue(newValue, CHARACTER_TYPE_DESCRIPTOR);, +			array[idx] = (Long)state.convertValue(newValue, LONG_TYPE_DESCRIPTOR);, +			array[idx] = (Short)state.convertValue(newValue, SHORT_TYPE_DESCRIPTOR);, +			array[idx] = (Double)state.convertValue(newValue, DOUBLE_TYPE_DESCRIPTOR);, +			array[idx] = (Float)state.convertValue(newValue, FLOAT_TYPE_DESCRIPTOR);, +			array[idx] = (Byte)state.convertValue(newValue, BYTE_TYPE_DESCRIPTOR);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorAnd.java, +			leftValue = (Boolean)state.convertValue(getLeftOperand().getValueInternal(state), BOOLEAN_TYPE_DESCRIPTOR);, +			rightValue = (Boolean)state.convertValue(getRightOperand().getValueInternal(state), BOOLEAN_TYPE_DESCRIPTOR);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorNot.java, +			boolean value = (Boolean)state.convertValue(getChild(0).getValueInternal(state), BOOLEAN_TYPE_DESCRIPTOR);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/TypeConverter.java, +	Object convertValue(Object value, TypeDescriptor typeDescriptor) throws EvaluationException;, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ExpressionState.java, +	public Object convertValue(Object value, TypeDescriptor targetTypeDescriptor) throws EvaluationException {, +	public Object convertValue(TypedValue value, TypeDescriptor targetTypeDescriptor) throws EvaluationException {, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/ConstructorReference.java, +			argumentTypes[i] = (value==null?Object.class:value.getClass());, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java, +		int idx = (Integer)state.convertValue(index, INTEGER_TYPE_DESCRIPTOR);, +			int idx = (Integer)state.convertValue(index, INTEGER_TYPE_DESCRIPTOR);, +			int idx = (Integer)state.convertValue(index, INTEGER_TYPE_DESCRIPTOR);, +			array[idx] = (Integer)state.convertValue(newValue, INTEGER_TYPE_DESCRIPTOR);, +			array[idx] = (Boolean)state.convertValue(newValue, BOOLEAN_TYPE_DESCRIPTOR);, +			array[idx] = (Character)state.convertValue(newValue, CHARACTER_TYPE_DESCRIPTOR);, +			array[idx] = (Long)state.convertValue(newValue, LONG_TYPE_DESCRIPTOR);, +			array[idx] = (Short)state.convertValue(newValue, SHORT_TYPE_DESCRIPTOR);, +			array[idx] = (Double)state.convertValue(newValue, DOUBLE_TYPE_DESCRIPTOR);, +			array[idx] = (Float)state.convertValue(newValue, FLOAT_TYPE_DESCRIPTOR);, +			array[idx] = (Byte)state.convertValue(newValue, BYTE_TYPE_DESCRIPTOR);, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/ast/OperatorAnd.java, +			leftValue = (Boolean)state.convertValue(getLeftOperand().getValueInternal(state), BOOLEAN_TYPE_DESCRIPTOR);]