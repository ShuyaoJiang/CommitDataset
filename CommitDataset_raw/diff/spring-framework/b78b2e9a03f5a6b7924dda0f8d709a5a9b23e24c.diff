[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +	 * Determine the candidate with the highest priority in the given set of beans. As, +	 * defined by the {@link org.springframework.core.Ordered} interface, the lowest, +	 * value has the highest priority., +					else if (candidatePriority < highestPriority) {, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java, +	 * Determine the candidate with the highest priority in the given set of beans. As, +	 * defined by the {@link org.springframework.core.Ordered} interface, the lowest, +	 * value has the highest priority., +					else if (candidatePriority < highestPriority) {, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java, +		thrown.expectMessage(containsString("5")); // conflicting priority, +			assertTrue(ex.getMessage().contains("5")); // conflicting priority, +	@Priority(5), +	@Priority(500)]