[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/InitDestroyAnnotationBeanPostProcessor.java, +import java.lang.reflect.Modifier;, +				String methodName = calculateMethodIdentifierInHierarchy(it.next().getMethod());, +				String methodName = calculateMethodIdentifierInHierarchy(it.next().getMethod());, +	private String calculateMethodIdentifierInHierarchy(Method method) {, +		if (Modifier.isPrivate(method.getModifiers())) {, +			return method.getDeclaringClass() + "." + method.getName();, +		}, +		else {, +			return method.getName();, +		}, +	}, +, +			if (this == other) {, +				return true;, +			}, +			if (!(other instanceof LifecycleElement)) {, +				return false;, +			}, +			LifecycleElement otherElement = (LifecycleElement) other;, +			return (this.method.getName().equals(otherElement.method.getName()) &&, +					this.method.getDeclaringClass().equals(otherElement.method.getDeclaringClass()));, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/InitDestroyAnnotationBeanPostProcessor.java, +import java.lang.reflect.Modifier;, +				String methodName = calculateMethodIdentifierInHierarchy(it.next().getMethod());, +				String methodName = calculateMethodIdentifierInHierarchy(it.next().getMethod());, +	private String calculateMethodIdentifierInHierarchy(Method method) {, +		if (Modifier.isPrivate(method.getModifiers())) {, +			return method.getDeclaringClass() + "." + method.getName();, +		}, +		else {, +			return method.getName();, +		}, +	}, +, +			if (this == other) {, +				return true;, +			}, +			if (!(other instanceof LifecycleElement)) {, +				return false;, +			}, +			LifecycleElement otherElement = (LifecycleElement) other;, +			return (this.method.getName().equals(otherElement.method.getName()) &&, +					this.method.getDeclaringClass().equals(otherElement.method.getDeclaringClass()));, +++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/CommonAnnotationBeanPostProcessorTests.java, +		assertTrue(bean.init3Called);, +		assertTrue(bean.destroy3Called);, +		public boolean init3Called = false;, +, +		public boolean destroy3Called = false;, +, +		@PostConstruct, +		private void init() {, +			if (this.init3Called) {, +				throw new IllegalStateException("Already called");, +			}, +			this.init3Called = true;, +		}, +, +		@PreDestroy, +		private void destroy() {, +			if (this.destroy3Called) {, +				throw new IllegalStateException("Already called");, +			}, +			this.destroy3Called = true;, +		}, +]