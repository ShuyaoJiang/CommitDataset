[+++ b/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFutureTask.java, + * Copyright 2002-2017 the original author or authors., +, +	protected void done() {, +++ b/spring-core/src/main/java/org/springframework/util/concurrent/ListenableFutureTask.java, + * Copyright 2002-2017 the original author or authors., +, +	protected void done() {, +++ b/spring-core/src/main/java/org/springframework/util/concurrent/SettableListenableFuture.java, + * Copyright 2002-2017 the original author or authors., +	private static final Callable<Object> DUMMY_CALLABLE = new Callable<Object>() {, +		@Override, +		public Object call() throws Exception {, +			throw new IllegalStateException("Should never be called");, +	};, +, +, +	private final SettableTask<T> settableTask = new SettableTask<>();, +		return this.settableTask.setResultValue(value);, +		return this.settableTask.setExceptionResult(exception);, +		this.settableTask.addCallback(callback);, +		this.settableTask.addCallback(successCallback, failureCallback);, +		boolean cancelled = this.settableTask.cancel(mayInterruptIfRunning);, +	 * <p>This method returns the value if it has been set via {@link #set(Object)},, +	 * throws an {@link java.util.concurrent.ExecutionException} if an exception has, +	 * been set via {@link #setException(Throwable)}, or throws a, +	 * {@link java.util.concurrent.CancellationException} if the future has been cancelled., +	 * @return the value associated with this future, +		return this.settableTask.get();, +	 * <p>This method returns the value if it has been set via {@link #set(Object)},, +	 * throws an {@link java.util.concurrent.ExecutionException} if an exception has, +	 * been set via {@link #setException(Throwable)}, or throws a, +	 * {@link java.util.concurrent.CancellationException} if the future has been cancelled., +	 * @param timeout the maximum time to wait, +	 * @param unit the unit of the timeout argument, +	 * @return the value associated with this future, +		return this.settableTask.get(timeout, unit);, +	 * <p>The default implementation is empty., +	private static class SettableTask<T> extends ListenableFutureTask<T> {, +		private volatile Thread completingThread;, +		public SettableTask() {, +			super((Callable<T>) DUMMY_CALLABLE);, +, +		public boolean setResultValue(T value) {, +			set(value);, +			return checkCompletingThread();, +		}, +, +		public boolean setExceptionResult(Throwable exception) {, +			setException(exception);, +			return checkCompletingThread();, +		}, +, +		@Override, +		protected void done() {, +			if (!isCancelled()) {, +				// Implicitly invoked by set/setException: store current thread for, +				// determining whether the given result has actually triggered completion, +				// (since FutureTask.set/setException unfortunately don't expose that), +				this.completingThread = Thread.currentThread();, +			}, +			super.done();, +		}, +, +		private boolean checkCompletingThread() {, +			boolean check = (this.completingThread == Thread.currentThread());, +			this.completingThread = null;  // only first check actually counts, +			return check;]