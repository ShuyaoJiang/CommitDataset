[+++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/HeaderAssertions.java, +import static org.springframework.test.util.AssertionErrors.assertEquals;, +import static org.springframework.test.util.AssertionErrors.assertTrue;, +import static org.springframework.test.util.AssertionErrors.fail;, + * @author Brian Clozel, +	 * Expect that the header with the given name is not present., +	 */, +	public WebTestClient.ResponseSpec doesNotExist(String name) {, +		if (getHeaders().containsKey(name)) {, +			String message = getMessage(name) + " exists with value=[" + getHeaders().getFirst(name) + "]";, +			this.exchangeResult.assertWithDiagnostics(() -> fail(message));, +		}, +		return this.responseSpec;, +	}, +, +	/**, +	 * Expect a "Content-Type" header with the given value., +	 */, +	public WebTestClient.ResponseSpec contentType(String mediaType) {, +		return contentType(MediaType.parseMediaType(mediaType));, +	}, +, +	/**, +	 * Expect a "Content-Type" header compatible with the given value., +	 */, +	public WebTestClient.ResponseSpec contentTypeCompatibleWith(MediaType mediaType) {, +		MediaType actual = getHeaders().getContentType();, +		String message = getMessage("Content-Type") + "=[" + actual.toString() + "]", +				+ " is not compatible with [" + mediaType.toString() + "]";, +		this.exchangeResult.assertWithDiagnostics(() ->, +				assertTrue(message, actual.isCompatibleWith(mediaType)));, +		return this.responseSpec;, +	}, +, +	/**, +	 * Expect a "Content-Type" header compatible with the given value., +	 */, +	public WebTestClient.ResponseSpec contentTypeCompatibleWith(String mediaType) {, +		return contentTypeCompatibleWith(MediaType.parseMediaType(mediaType));, +	}, +, +	/**, +++ b/spring-test/src/main/java/org/springframework/test/web/reactive/server/HeaderAssertions.java, +import static org.springframework.test.util.AssertionErrors.assertEquals;, +import static org.springframework.test.util.AssertionErrors.assertTrue;, +import static org.springframework.test.util.AssertionErrors.fail;, + * @author Brian Clozel, +	 * Expect that the header with the given name is not present., +	 */, +	public WebTestClient.ResponseSpec doesNotExist(String name) {, +		if (getHeaders().containsKey(name)) {, +			String message = getMessage(name) + " exists with value=[" + getHeaders().getFirst(name) + "]";, +			this.exchangeResult.assertWithDiagnostics(() -> fail(message));, +		}, +		return this.responseSpec;, +	}, +, +	/**, +	 * Expect a "Content-Type" header with the given value., +	 */, +	public WebTestClient.ResponseSpec contentType(String mediaType) {, +		return contentType(MediaType.parseMediaType(mediaType));, +	}, +, +	/**, +	 * Expect a "Content-Type" header compatible with the given value., +	 */, +	public WebTestClient.ResponseSpec contentTypeCompatibleWith(MediaType mediaType) {, +		MediaType actual = getHeaders().getContentType();, +		String message = getMessage("Content-Type") + "=[" + actual.toString() + "]", +				+ " is not compatible with [" + mediaType.toString() + "]";, +		this.exchangeResult.assertWithDiagnostics(() ->, +				assertTrue(message, actual.isCompatibleWith(mediaType)));, +		return this.responseSpec;, +	}, +, +	/**, +	 * Expect a "Content-Type" header compatible with the given value., +	 */, +	public WebTestClient.ResponseSpec contentTypeCompatibleWith(String mediaType) {, +		return contentTypeCompatibleWith(MediaType.parseMediaType(mediaType));, +	}, +, +	/**, +++ b/spring-test/src/test/java/org/springframework/test/web/reactive/server/HeaderAssertionTests.java, +	public void doesNotExist() {, +		HttpHeaders headers = new HttpHeaders();, +		headers.setContentType(MediaType.APPLICATION_JSON_UTF8);, +		HeaderAssertions assertions = headerAssertions(headers);, +, +		// Success, +		assertions.doesNotExist("Framework");, +, +		try {, +			assertions.doesNotExist("Content-Type");, +			fail("Existing header expected");, +		}, +		catch (AssertionError error) {, +			Throwable cause = error.getCause();, +			assertNotNull(cause);]