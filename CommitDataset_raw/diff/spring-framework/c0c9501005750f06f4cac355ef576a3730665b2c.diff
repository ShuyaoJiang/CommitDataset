[+++ b/org.springframework.test/src/main/java/org/springframework/test/web/AbstractModelAndViewTests.java, + * or {@link ModelAndViewAssert} with JUnit 4 and TestNG., +++ b/org.springframework.test/src/main/java/org/springframework/test/web/AbstractModelAndViewTests.java, + * or {@link ModelAndViewAssert} with JUnit 4 and TestNG., +++ b/spring-framework-reference/src/testing.xml, +        contains <classname>ModelAndViewAssert</classname>, which can be, +        used in combination with any testing framework (e.g., JUnit 4+,, +        TestNG, etc.) for unit tests dealing with Spring MVC, +        <classname>ModelAndView</classname> objects.</para>, +        <tip>, +	        <title>Unit testing Spring MVC Controllers</title>, +	        <para>, +		        To test your Spring MVC <literal>Controller</literal>s,, +		        use <classname>ModelAndViewAssert</classname> combined with, +		        package., +	        </para>, +        </tip>, +	      Since Spring 2.5, unit and integration testing support is provided , +        	See: context management and caching with the , +        	See: dependency injection of test fixtures with the , +        Also, many operations - such as inserting or modifying persistent, +        <para>The TestContext framework addresses this issue. By default,, +        the framework will create and roll back a transaction for each, +        via the, +        <link linkend="integration-testing-annotations"><interfacename>@TransactionConfiguration</interfacename></link>, +        and , +        <link linkend="integration-testing-annotations"><interfacename>@Rollback</interfacename></link>, +        annotations.</para>, +	        See: transaction management with the , +        <para>, +        In addition, you may find it desirable to provide your own custom,, +        application-wide superclass for integration tests that provides, +        further useful instance variables and, +        	See: support classes for the , +@Test, +@Test, +@Test, +@Test, +@Test, +@Test, +        <para>In contrast to the now deprecated JUnit 3.8 legacy class hierarchy,, +        test classes which use the TestContext framework do not need to override, +        any <literal>protected</literal> instance methods to configure their, +<emphasis role="bold">@ContextConfiguration("daos.xml")</emphasis>, +<emphasis role="bold">@ContextConfiguration("daos.xml")</emphasis>, +<emphasis role="bold">@ContextConfiguration("daos.xml")</emphasis>, +<emphasis role="bold">@ContextConfiguration("daos.xml")</emphasis>]