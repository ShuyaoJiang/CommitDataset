[+++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpRequest.java, +import java.util.function.Function;, +import org.springframework.util.Assert;, +	private Flux<DataBuffer> body = Flux.error(, +			new IllegalStateException("The body is not set. " +, +					"Did handling complete with success? Is a custom \"writeHandler\" configured?"));, +, +	private Function<Flux<DataBuffer>, Mono<Void>> writeHandler = initDefaultWriteHandler();, +	private Function<Flux<DataBuffer>, Mono<Void>> initDefaultWriteHandler() {, +		return body -> {, +			this.body = body.cache();, +			return this.body.then();, +		};, +	}, +, +	/**, +	 * Return the request body, or an error stream if the body was never set, +	 * or when {@link #setWriteHandler} is configured., +	 */, +	/**, +	 * Configure a custom handler for writing the request body., +	 *, +	 * <p>The default write handler consumes and caches the request body so it, +	 * may be accessed subsequently, e.g. in test assertions. Use this property, +	 * when the request body is an infinite stream., +	 *, +	 * @param writeHandler the write handler to use returning {@code Mono<Void>}, +	 * when the body has been "written" (i.e. consumed)., +	 */, +	public void setWriteHandler(Function<Flux<DataBuffer>, Mono<Void>> writeHandler) {, +		Assert.notNull(writeHandler, "'writeHandler' is required");, +		this.writeHandler = writeHandler;, +	public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {, +		return doCommit(() -> Mono.defer(() -> this.writeHandler.apply(Flux.from(body))));, +	}, +, +	@Override, +	public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body) {, +		return writeWith(Flux.from(body).flatMap(p -> p));, +	}, +, +	@Override, +		return writeWith(Flux.empty());, +++ b/spring-test/src/main/java/org/springframework/mock/http/client/reactive/MockClientHttpRequest.java, +import java.util.function.Function;, +import org.springframework.util.Assert;, +	private Flux<DataBuffer> body = Flux.error(, +			new IllegalStateException("The body is not set. " +, +					"Did handling complete with success? Is a custom \"writeHandler\" configured?"));, +, +	private Function<Flux<DataBuffer>, Mono<Void>> writeHandler = initDefaultWriteHandler();, +	private Function<Flux<DataBuffer>, Mono<Void>> initDefaultWriteHandler() {, +		return body -> {, +			this.body = body.cache();, +			return this.body.then();, +		};, +	}, +, +	/**, +	 * Return the request body, or an error stream if the body was never set, +	 * or when {@link #setWriteHandler} is configured., +	 */, +	/**, +	 * Configure a custom handler for writing the request body., +	 *, +	 * <p>The default write handler consumes and caches the request body so it, +	 * may be accessed subsequently, e.g. in test assertions. Use this property, +	 * when the request body is an infinite stream., +	 *, +	 * @param writeHandler the write handler to use returning {@code Mono<Void>}, +	 * when the body has been "written" (i.e. consumed)., +	 */, +	public void setWriteHandler(Function<Flux<DataBuffer>, Mono<Void>> writeHandler) {, +		Assert.notNull(writeHandler, "'writeHandler' is required");, +		this.writeHandler = writeHandler;, +	public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {, +		return doCommit(() -> Mono.defer(() -> this.writeHandler.apply(Flux.from(body))));, +	}, +, +	@Override, +	public Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends DataBuffer>> body) {, +		return writeWith(Flux.from(body).flatMap(p -> p));, +	}, +, +	@Override, +		return writeWith(Flux.empty());, +++ b/spring-test/src/main/java/org/springframework/mock/http/server/reactive/MockServerHttpRequest.java, +		 * Add the given cookies., +		 * @param cookies the cookies., +		 */, +		B cookies(MultiValueMap<String, HttpCookie> cookies);, +, +		/**, +		 * Add the given header values., +		 * @param headers the header values, +		 */, +		B headers(MultiValueMap<String, String> headers);, +, +		/**, +		public BodyBuilder cookies(MultiValueMap<String, HttpCookie> cookies) {]