[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/GenericTypeAwareAutowireCandidateResolver.java, +					if (descriptor.getDependencyType().isAssignableFrom(resolvedFactoryMethod.getReturnType())) {, +						// Only use factory method metadata if the return type is actually expressive enough, +						// for our dependency. Otherwise, the returned instance type may have matched instead, +						// in case of a singleton instance having been registered with the container already., +		}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/GenericTypeAwareAutowireCandidateResolver.java, +					if (descriptor.getDependencyType().isAssignableFrom(resolvedFactoryMethod.getReturnType())) {, +						// Only use factory method metadata if the return type is actually expressive enough, +						// for our dependency. Otherwise, the returned instance type may have matched instead, +						// in case of a singleton instance having been registered with the container already., +		}, +++ b/spring-context/src/test/java/org/springframework/context/annotation/ConfigurationClassPostProcessorTests.java, +import org.junit.Before;, +import org.springframework.beans.factory.FactoryBean;, + * @author Juergen Hoeller, +	private DefaultListableBeanFactory beanFactory;, +, +	@Before, +	public void setUp() {, +		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();, +		QualifierAnnotationAutowireCandidateResolver acr = new QualifierAnnotationAutowireCandidateResolver();, +		acr.setBeanFactory(bf);, +		bf.setAutowireCandidateResolver(acr);, +		this.beanFactory = bf;, +	}, +, +		bpp.setBeanFactory(beanFactory);, +		beanFactory.addBeanPostProcessor(bpp);, +		beanFactory.registerBeanDefinition("annotatedBean", bd);, +		beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(RepositoryConfiguration.class));, +		pp.postProcessBeanFactory(beanFactory);, +		RepositoryInjectionBean bean = (RepositoryInjectionBean) beanFactory.getBean("annotatedBean");, +		assertSame(beanFactory.getBean("stringRepo"), bean.stringRepository);, +		assertSame(beanFactory.getBean("integerRepo"), bean.integerRepository);, +	}, +, +	@Test, +	public void testGenericsBasedInjectionWithImplTypeAtInjectionPoint() {, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(beanFactory);, +		beanFactory.addBeanPostProcessor(bpp);, +		RootBeanDefinition bd = new RootBeanDefinition(SpecificRepositoryInjectionBean.class);, +		bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE);, +		beanFactory.registerBeanDefinition("annotatedBean", bd);, +		beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(SpecificRepositoryConfiguration.class));, +		ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor();, +		pp.postProcessBeanFactory(beanFactory);, +		beanFactory.preInstantiateSingletons();, +, +		SpecificRepositoryInjectionBean bean = (SpecificRepositoryInjectionBean) beanFactory.getBean("annotatedBean");, +		assertSame(beanFactory.getBean("genericRepo"), bean.genericRepository);, +	}, +, +	@Test, +	public void testGenericsBasedInjectionWithFactoryBean() {, +		AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor();, +		bpp.setBeanFactory(beanFactory);, +		beanFactory.addBeanPostProcessor(bpp);, +		RootBeanDefinition bd = new RootBeanDefinition(RepositoryFactoryBeanInjectionBean.class);, +		bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE);, +		beanFactory.registerBeanDefinition("annotatedBean", bd);, +		beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(RepositoryFactoryBeanConfiguration.class));, +		ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor();, +		pp.postProcessBeanFactory(beanFactory);, +		beanFactory.preInstantiateSingletons();, +, +		RepositoryFactoryBeanInjectionBean bean = (RepositoryFactoryBeanInjectionBean) beanFactory.getBean("annotatedBean");, +		assertSame(beanFactory.getBean("&repoFactoryBean"), bean.repositoryFactoryBean);, +		beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(RawMatchingConfiguration.class));, +		pp.postProcessBeanFactory(beanFactory);, +		assertSame(beanFactory.getBean("repo"), beanFactory.getBean("repoConsumer"));, +	public static class GenericRepository<T> extends Repository<T> {, +	}, +, +, +	public static class RepositoryFactoryBean<T> implements FactoryBean<T> {, +, +		@Override, +		public T getObject() {, +			throw new IllegalStateException();, +		}, +, +		@Override, +		public Class<?> getObjectType() {, +			return Object.class;, +		}, +, +		@Override, +		public boolean isSingleton() {, +			return false;, +		}, +	}, +, +, +	public static class SpecificRepositoryInjectionBean {, +, +		@Autowired, +		public GenericRepository<?> genericRepository;, +	}]