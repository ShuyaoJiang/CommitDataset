[+++ b/spring-web/src/main/java/org/springframework/web/server/handler/ResponseStatusExceptionHandler.java, + * Handle {@link ResponseStatusException} by setting the response status., +		HttpStatus status = resolveStatus(ex);, +	private String buildMessage(ServerHttpRequest request, Throwable ex) {, +		return "Failed to handle request [" + request.getMethod() + " " + request.getURI() + "]: " + ex.getMessage();, +	}, +, +	private HttpStatus resolveStatus(Throwable ex) {, +		HttpStatus status = determineStatus(ex);, +		if (status == null) {, +			Throwable cause = ex.getCause();, +			if (cause != null) {, +				status = resolveStatus(cause);, +			}, +		}, +		return status;, +	}, +, +	/**, +	 * Determine the HTTP status implied by the given exception., +	 * @param ex the exception to introspect, +	 * @return the associated HTTP status, if any, +	 * @since 5.0.5, +	 */, +	@Nullable, +	protected HttpStatus determineStatus(Throwable ex) {, +++ b/spring-web/src/main/java/org/springframework/web/server/handler/ResponseStatusExceptionHandler.java, + * Handle {@link ResponseStatusException} by setting the response status., +		HttpStatus status = resolveStatus(ex);, +	private String buildMessage(ServerHttpRequest request, Throwable ex) {, +		return "Failed to handle request [" + request.getMethod() + " " + request.getURI() + "]: " + ex.getMessage();, +	}, +, +	private HttpStatus resolveStatus(Throwable ex) {, +		HttpStatus status = determineStatus(ex);, +		if (status == null) {, +			Throwable cause = ex.getCause();, +			if (cause != null) {, +				status = resolveStatus(cause);, +			}, +		}, +		return status;, +	}, +, +	/**, +	 * Determine the HTTP status implied by the given exception., +	 * @param ex the exception to introspect, +	 * @return the associated HTTP status, if any, +	 * @since 5.0.5, +	 */, +	@Nullable, +	protected HttpStatus determineStatus(Throwable ex) {, +++ b/spring-web/src/test/java/org/springframework/web/server/handler/ResponseStatusExceptionHandlerTests.java, +import org.junit.Before;, +import static org.junit.Assert.*;, + *, + * @author Juergen Hoeller, +	protected final MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/"));, +	protected ResponseStatusExceptionHandler handler;, +, +, +	@Before, +	public void setup() {, +		this.handler = createResponseStatusExceptionHandler();, +	}, +, +	protected ResponseStatusExceptionHandler createResponseStatusExceptionHandler() {, +		return new ResponseStatusExceptionHandler();, +	}, +++ b/spring-web/src/main/java/org/springframework/web/server/handler/ResponseStatusExceptionHandler.java, + * Handle {@link ResponseStatusException} by setting the response status., +		HttpStatus status = resolveStatus(ex);, +	private String buildMessage(ServerHttpRequest request, Throwable ex) {, +		return "Failed to handle request [" + request.getMethod() + " " + request.getURI() + "]: " + ex.getMessage();, +	}, +, +	private HttpStatus resolveStatus(Throwable ex) {, +		HttpStatus status = determineStatus(ex);, +		if (status == null) {, +			Throwable cause = ex.getCause();, +			if (cause != null) {, +				status = resolveStatus(cause);, +			}, +		}, +		return status;, +	}, +, +	/**, +	 * Determine the HTTP status implied by the given exception., +	 * @param ex the exception to introspect, +	 * @return the associated HTTP status, if any, +	 * @since 5.0.5, +	 */, +	@Nullable, +	protected HttpStatus determineStatus(Throwable ex) {, +++ b/spring-web/src/test/java/org/springframework/web/server/handler/ResponseStatusExceptionHandlerTests.java, +import org.junit.Before;, +import static org.junit.Assert.*;, + *, + * @author Juergen Hoeller]