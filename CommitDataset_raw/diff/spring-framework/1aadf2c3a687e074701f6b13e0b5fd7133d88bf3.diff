[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/HeadersRequestCondition.java, + * Copyright 2002-2018 the original author or authors., +	 * Compare to another condition based on header expressions. A condition, +	 * is considered to be a more specific match, if it has:, +	 * <ol>, +	 * <li>A greater number of expressions., +	 * <li>A greater number of non-negated expressions with a concrete value., +	 * </ol>, +		int result = other.expressions.size() - this.expressions.size();, +		if (result != 0) {, +			return result;, +		}, +		return (int) (getValueMatchCount(other.expressions) - getValueMatchCount(this.expressions));, +	}, +, +	private long getValueMatchCount(Set<HeaderExpression> expressions) {, +		return expressions.stream().filter(e -> e.getValue() != null && !e.isNegated()).count();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/HeadersRequestCondition.java, + * Copyright 2002-2018 the original author or authors., +	 * Compare to another condition based on header expressions. A condition, +	 * is considered to be a more specific match, if it has:, +	 * <ol>, +	 * <li>A greater number of expressions., +	 * <li>A greater number of non-negated expressions with a concrete value., +	 * </ol>, +		int result = other.expressions.size() - this.expressions.size();, +		if (result != 0) {, +			return result;, +		}, +		return (int) (getValueMatchCount(other.expressions) - getValueMatchCount(this.expressions));, +	}, +, +	private long getValueMatchCount(Set<HeaderExpression> expressions) {, +		return expressions.stream().filter(e -> e.getValue() != null && !e.isNegated()).count();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/ParamsRequestCondition.java, + * Copyright 2002-2018 the original author or authors., +	 * Compare to another condition based on parameter expressions. A condition, +	 * is considered to be a more specific match, if it has:, +	 * <ol>, +	 * <li>A greater number of expressions., +	 * <li>A greater number of non-negated expressions with a concrete value., +	 * </ol>, +		int result = other.expressions.size() - this.expressions.size();, +		if (result != 0) {, +			return result;, +		}, +		return (int) (getValueMatchCount(other.expressions) - getValueMatchCount(this.expressions));, +	}, +, +	private long getValueMatchCount(Set<ParamExpression> expressions) {, +		return expressions.stream().filter(e -> e.getValue() != null && !e.isNegated()).count();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/HeadersRequestCondition.java, + * Copyright 2002-2018 the original author or authors., +	 * Compare to another condition based on header expressions. A condition, +	 * is considered to be a more specific match, if it has:, +	 * <ol>, +	 * <li>A greater number of expressions., +	 * <li>A greater number of non-negated expressions with a concrete value., +	 * </ol>, +		int result = other.expressions.size() - this.expressions.size();, +		if (result != 0) {, +			return result;, +		}, +		return (int) (getValueMatchCount(other.expressions) - getValueMatchCount(this.expressions));, +	}, +, +	private long getValueMatchCount(Set<HeaderExpression> expressions) {, +		return expressions.stream().filter(e -> e.getValue() != null && !e.isNegated()).count();, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/condition/ParamsRequestCondition.java, + * Copyright 2002-2018 the original author or authors., +	 * Compare to another condition based on parameter expressions. A condition, +	 * is considered to be a more specific match, if it has:, +	 * <ol>, +	 * <li>A greater number of expressions., +	 * <li>A greater number of non-negated expressions with a concrete value., +	 * </ol>, +		int result = other.expressions.size() - this.expressions.size();, +		if (result != 0) {, +			return result;, +		}, +		return (int) (getValueMatchCount(other.expressions) - getValueMatchCount(this.expressions));, +	}, +, +	private long getValueMatchCount(Set<ParamExpression> expressions) {, +		return expressions.stream().filter(e -> e.getValue() != null && !e.isNegated()).count();, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/result/condition/HeadersRequestConditionTests.java, + * Copyright 2002-2018 the original author or authors., +import org.springframework.web.server.ServerWebExchange;, +import static org.junit.Assert.*;, +import static org.springframework.mock.http.server.reactive.test.MockServerHttpRequest.*;, +	public void headerPresent() {, +		MockServerWebExchange exchange = MockServerWebExchange.from(get("/").header("Accept", ""));, +	public void headerPresentNoMatch() {, +		MockServerWebExchange exchange = MockServerWebExchange.from(get("/").header("bar", ""));, +	public void headerNotPresent() {, +		MockServerWebExchange exchange = MockServerWebExchange.from(get("/"));, +	public void headerValueMatch() {, +		MockServerWebExchange exchange = MockServerWebExchange.from(get("/").header("foo", "bar"));, +	public void headerValueNoMatch() {, +		MockServerWebExchange exchange = MockServerWebExchange.from(get("/").header("foo", "bazz"));]