[+++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java, +	 * @param method the method about to execute, +	 * @param targetClass the class that the method is being invoked on, +	 * The <code>hasTransaction()</code> method on TransactionInfo can be used to, +	 * tell if there was a transaction created., +	 * @param targetClass the class that the method is being invoked on, +	 * @return a String representation identifying this method, +		return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + "." + method.getName();, +	 * @return a String representation identifying this method, +++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java, +	 * @param method the method about to execute, +	 * @param targetClass the class that the method is being invoked on, +	 * The <code>hasTransaction()</code> method on TransactionInfo can be used to, +	 * tell if there was a transaction created., +	 * @param targetClass the class that the method is being invoked on, +	 * @return a String representation identifying this method, +		return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + "." + method.getName();, +	 * @return a String representation identifying this method, +++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAttributeSource.java, + * Copyright 2002-2012 the original author or authors., + * Strategy interface used by {@link TransactionInterceptor} for metadata retrieval., + *, + * <p>Implementations know how to source transaction attributes, whether from configuration,, + * metadata attributes at source level (such as Java 5 annotations), or anywhere else., + * @see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource, +	 * Return the transaction attribute for the given method,, +	 * or <code>null</code> if the method is non-transactional., +	 * @param method the method to introspect, +	 * @param targetClass the target class. May be <code>null</code>,, +	 * in which case the declaring class of the method must be used., +++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java, +	 * @param method the method about to execute, +	 * @param targetClass the class that the method is being invoked on, +	 * The <code>hasTransaction()</code> method on TransactionInfo can be used to, +	 * tell if there was a transaction created., +	 * @param targetClass the class that the method is being invoked on, +	 * @return a String representation identifying this method, +		return (targetClass != null ? targetClass : method.getDeclaringClass()).getName() + "." + method.getName();, +	 * @return a String representation identifying this method, +++ b/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAttributeSource.java, + * Copyright 2002-2012 the original author or authors., + * Strategy interface used by {@link TransactionInterceptor} for metadata retrieval., + *, + * <p>Implementations know how to source transaction attributes, whether from configuration,, + * metadata attributes at source level (such as Java 5 annotations), or anywhere else., + * @see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource, +	 * Return the transaction attribute for the given method,, +	 * or <code>null</code> if the method is non-transactional., +	 * @param method the method to introspect, +	 * @param targetClass the target class. May be <code>null</code>,, +	 * in which case the declaring class of the method must be used., +++ b/spring-tx/src/test/java/org/springframework/transaction/interceptor/BeanFactoryTransactionTests.java, + * Copyright 2002-2012 the original author or authors., +			public TransactionStatus getTransaction(TransactionDefinition def) throws TransactionException {, +				if (!(def.getName().contains(DerivedTestBean.class.getName()) && def.getName().contains("setAge"))) {, +							"transaction name should contain class and method name: " + def.getName());]