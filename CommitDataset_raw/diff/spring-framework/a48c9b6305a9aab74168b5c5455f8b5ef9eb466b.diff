[+++ /dev/null, +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/method/annotation/RequestBodyArgumentResolver.java, +import java.util.Arrays;, +import org.springframework.reactive.codec.decoder.JsonObjectDecoder;, +import org.springframework.util.Assert;, +	private final List<ByteToMessageDecoder<?>> decoders;, +	// TODO: remove field, +	private final List<ByteToMessageDecoder<ByteBuffer>> preProcessors = Arrays.asList(new JsonObjectDecoder());, +	public RequestBodyArgumentResolver(List<ByteToMessageDecoder<?>> decoders, ConversionService service) {, +		Assert.notEmpty(decoders, "At least one decoder is required.");, +		Assert.notNull(service, "'conversionService' is required.");, +		this.decoders = decoders;, +		ByteToMessageDecoder<?> decoder = resolveDecoder(elementType, mediaType, hints.toArray());, +					elementType, mediaType,hints.toArray());, +	private ByteToMessageDecoder<?> resolveDecoder(ResolvableType type, MediaType mediaType, Object[] hints) {, +		for (ByteToMessageDecoder<?> deserializer : this.decoders) {, +	private List<ByteToMessageDecoder<ByteBuffer>> resolvePreProcessors(ResolvableType type,, +			MediaType mediaType, Object[] hints) {, +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/method/annotation/RequestBodyArgumentResolver.java, +import java.util.Arrays;, +import org.springframework.reactive.codec.decoder.JsonObjectDecoder;, +import org.springframework.util.Assert;, +	private final List<ByteToMessageDecoder<?>> decoders;, +	// TODO: remove field, +	private final List<ByteToMessageDecoder<ByteBuffer>> preProcessors = Arrays.asList(new JsonObjectDecoder());, +	public RequestBodyArgumentResolver(List<ByteToMessageDecoder<?>> decoders, ConversionService service) {, +		Assert.notEmpty(decoders, "At least one decoder is required.");, +		Assert.notNull(service, "'conversionService' is required.");, +		this.decoders = decoders;, +		ByteToMessageDecoder<?> decoder = resolveDecoder(elementType, mediaType, hints.toArray());, +					elementType, mediaType,hints.toArray());, +	private ByteToMessageDecoder<?> resolveDecoder(ResolvableType type, MediaType mediaType, Object[] hints) {, +		for (ByteToMessageDecoder<?> deserializer : this.decoders) {, +	private List<ByteToMessageDecoder<ByteBuffer>> resolvePreProcessors(ResolvableType type,, +			MediaType mediaType, Object[] hints) {, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/method/annotation/RequestMappingHandlerAdapter.java, +import org.springframework.core.convert.ConversionService;, +	private ConversionService conversionService;, +, +	public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {, +	public List<HandlerMethodArgumentResolver> getArgumentResolvers() {, +		return this.argumentResolvers;, +	}, +, +	public void setConversionService(ConversionService conversionService) {, +		this.conversionService = conversionService;, +	}, +, +	public ConversionService getConversionService() {, +		return this.conversionService;, +	}, +, +			this.argumentResolvers.add(new RequestBodyArgumentResolver(decoders, this.conversionService));, +++ /dev/null, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/method/annotation/RequestBodyArgumentResolver.java, +import java.util.Arrays;, +import org.springframework.reactive.codec.decoder.JsonObjectDecoder;, +import org.springframework.util.Assert;, +	private final List<ByteToMessageDecoder<?>> decoders;, +	// TODO: remove field, +	private final List<ByteToMessageDecoder<ByteBuffer>> preProcessors = Arrays.asList(new JsonObjectDecoder());, +	public RequestBodyArgumentResolver(List<ByteToMessageDecoder<?>> decoders, ConversionService service) {, +		Assert.notEmpty(decoders, "At least one decoder is required.");, +		Assert.notNull(service, "'conversionService' is required.");, +		this.decoders = decoders;, +		ByteToMessageDecoder<?> decoder = resolveDecoder(elementType, mediaType, hints.toArray());, +					elementType, mediaType,hints.toArray());, +	private ByteToMessageDecoder<?> resolveDecoder(ResolvableType type, MediaType mediaType, Object[] hints) {, +		for (ByteToMessageDecoder<?> deserializer : this.decoders) {, +	private List<ByteToMessageDecoder<ByteBuffer>> resolvePreProcessors(ResolvableType type,, +			MediaType mediaType, Object[] hints) {, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/method/annotation/RequestMappingHandlerAdapter.java, +import org.springframework.core.convert.ConversionService;, +	private ConversionService conversionService;, +, +	public void setArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {, +	public List<HandlerMethodArgumentResolver> getArgumentResolvers() {, +		return this.argumentResolvers;, +	}, +, +	public void setConversionService(ConversionService conversionService) {, +		this.conversionService = conversionService;, +	}, +, +	public ConversionService getConversionService() {, +		return this.conversionService;, +	}, +, +			this.argumentResolvers.add(new RequestBodyArgumentResolver(decoders, this.conversionService));, +++ b/spring-web-reactive/src/main/java/org/springframework/reactive/web/dispatch/method/annotation/ResponseBodyResultHandler.java, +import java.util.Arrays;, +import org.springframework.reactive.codec.encoder.JsonObjectEncoder;, +import org.springframework.util.Assert;, +, +	// TODO: remove field, +	private final List<MessageToByteEncoder<ByteBuffer>> postProcessors = Arrays.asList(new JsonObjectEncoder());, +	public ResponseBodyResultHandler(List<MessageToByteEncoder<?>> encoders, ConversionService service) {, +		Assert.notEmpty(encoders, "At least one encoder is required.");]