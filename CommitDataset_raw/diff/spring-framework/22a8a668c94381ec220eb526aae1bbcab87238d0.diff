[+++ b/spring-core/src/main/java/org/springframework/core/type/filter/AnnotationTypeFilter.java, + * Copyright 2002-2018 the original author or authors., +	public AnnotationTypeFilter(, +			Class<? extends Annotation> annotationType, boolean considerMetaAnnotations, boolean considerInterfaces) {, +, +			if (!this.annotationType.getName().startsWith("java")) {, +				// Standard Java classes don't have non-standard annotations on them., +				return false;, +			}, +++ b/spring-core/src/main/java/org/springframework/core/type/filter/AnnotationTypeFilter.java, + * Copyright 2002-2018 the original author or authors., +	public AnnotationTypeFilter(, +			Class<? extends Annotation> annotationType, boolean considerMetaAnnotations, boolean considerInterfaces) {, +, +			if (!this.annotationType.getName().startsWith("java")) {, +				// Standard Java classes don't have non-standard annotations on them., +				return false;, +			}, +++ b/spring-core/src/test/java/org/springframework/core/type/AnnotationTypeFilterTests.java, + * Copyright 2002-2018 the original author or authors., +		String classUnderTest = "org.springframework.core.type.AnnotationTypeFilterTests$SomeClassWithSomeComponentInterface";, +		String classUnderTest = "org.springframework.core.type.AnnotationTypeFilterTests$SomeSubclassOfSomeComponent";, +		String classUnderTest = "org.springframework.core.type.AnnotationTypeFilterTests$SomeClassWithSomeComponentInterface";, +, +	private @interface InheritedAnnotation {, +	private interface SomeComponentInterface {, +	private static class SomeClassWithSomeComponentInterface implements Cloneable, SomeComponentInterface {, +	private static class SomeSubclassOfSomeComponent extends SomeComponent {, +	private @interface NonInheritedAnnotation {]