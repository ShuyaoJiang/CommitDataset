[+++ b/spring-context-support/src/main/java/org/springframework/scheduling/commonj/WorkManagerTaskExecutor.java, +import org.springframework.core.task.AsyncListenableTaskExecutor;, +import org.springframework.util.concurrent.ListenableFuture;, +import org.springframework.util.concurrent.ListenableFutureTask;, +		implements AsyncListenableTaskExecutor, SchedulingTaskExecutor, WorkManager, InitializingBean {, +	@Override, +	public ListenableFuture<?> submitListenable(Runnable task) {, +		ListenableFutureTask<Object> future = new ListenableFutureTask<Object>(task, null);, +		execute(future);, +		return future;, +	}, +, +	@Override, +	public <T> ListenableFuture<T> submitListenable(Callable<T> task) {, +		ListenableFutureTask<T> future = new ListenableFutureTask<T>(task);, +		execute(future);, +		return future;, +	}, +, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/commonj/WorkManagerTaskExecutor.java, +import org.springframework.core.task.AsyncListenableTaskExecutor;, +import org.springframework.util.concurrent.ListenableFuture;, +import org.springframework.util.concurrent.ListenableFutureTask;, +		implements AsyncListenableTaskExecutor, SchedulingTaskExecutor, WorkManager, InitializingBean {, +	@Override, +	public ListenableFuture<?> submitListenable(Runnable task) {, +		ListenableFutureTask<Object> future = new ListenableFutureTask<Object>(task, null);, +		execute(future);, +		return future;, +	}, +, +	@Override, +	public <T> ListenableFuture<T> submitListenable(Callable<T> task) {, +		ListenableFutureTask<T> future = new ListenableFutureTask<T>(task);, +		execute(future);, +		return future;, +	}, +, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SimpleThreadPoolTaskExecutor.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.task.AsyncListenableTaskExecutor;, +import org.springframework.util.concurrent.ListenableFuture;, +import org.springframework.util.concurrent.ListenableFutureTask;, +		implements AsyncListenableTaskExecutor, SchedulingTaskExecutor, InitializingBean, DisposableBean {, +	@Override, +	public ListenableFuture<?> submitListenable(Runnable task) {, +		ListenableFutureTask<Object> future = new ListenableFutureTask<Object>(task, null);, +		execute(future);, +		return future;, +	}, +, +	@Override, +	public <T> ListenableFuture<T> submitListenable(Callable<T> task) {, +		ListenableFutureTask<T> future = new ListenableFutureTask<T>(task);, +		execute(future);, +		return future;, +	}, +, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/commonj/WorkManagerTaskExecutor.java, +import org.springframework.core.task.AsyncListenableTaskExecutor;, +import org.springframework.util.concurrent.ListenableFuture;, +import org.springframework.util.concurrent.ListenableFutureTask;, +		implements AsyncListenableTaskExecutor, SchedulingTaskExecutor, WorkManager, InitializingBean {, +	@Override, +	public ListenableFuture<?> submitListenable(Runnable task) {, +		ListenableFutureTask<Object> future = new ListenableFutureTask<Object>(task, null);, +		execute(future);, +		return future;, +	}, +, +	@Override, +	public <T> ListenableFuture<T> submitListenable(Callable<T> task) {, +		ListenableFutureTask<T> future = new ListenableFutureTask<T>(task);, +		execute(future);, +		return future;, +	}, +, +++ b/spring-context-support/src/main/java/org/springframework/scheduling/quartz/SimpleThreadPoolTaskExecutor.java, + * Copyright 2002-2013 the original author or authors., +import org.springframework.core.task.AsyncListenableTaskExecutor;, +import org.springframework.util.concurrent.ListenableFuture;, +import org.springframework.util.concurrent.ListenableFutureTask;, +		implements AsyncListenableTaskExecutor, SchedulingTaskExecutor, InitializingBean, DisposableBean {, +	@Override, +	public ListenableFuture<?> submitListenable(Runnable task) {, +		ListenableFutureTask<Object> future = new ListenableFutureTask<Object>(task, null);, +		execute(future);, +		return future;, +	}, +, +	@Override, +	public <T> ListenableFuture<T> submitListenable(Callable<T> task) {, +		ListenableFutureTask<T> future = new ListenableFutureTask<T>(task);, +		execute(future);, +		return future;, +	}, +, +++ b/spring-context/src/main/java/org/springframework/scheduling/SchedulingTaskExecutor.java, + * Copyright 2002-2013 the original author or authors., + * <p>Note: {@link SchedulingTaskExecutor} implementations are encouraged to also]