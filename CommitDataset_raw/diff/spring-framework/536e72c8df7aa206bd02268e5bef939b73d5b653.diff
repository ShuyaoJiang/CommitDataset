[+++ b/spring-webflux/src/test/java/org/springframework/web/reactive/socket/AbstractWebSocketIntegrationTests.java, +			TomcatRequestUpgradeStrategy strategy = new TomcatRequestUpgradeStrategy();, +			strategy.setMaxSessionIdleTimeout(0L);, +			return new HandshakeWebSocketService(strategy);, +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/socket/AbstractWebSocketIntegrationTests.java, +			TomcatRequestUpgradeStrategy strategy = new TomcatRequestUpgradeStrategy();, +			strategy.setMaxSessionIdleTimeout(0L);, +			return new HandshakeWebSocketService(strategy);, +++ b/src/docs/asciidoc/web-reactive.adoc, +include::web/webflux-websocket.adoc[leveloffset=+1], +++ b/spring-webflux/src/test/java/org/springframework/web/reactive/socket/AbstractWebSocketIntegrationTests.java, +			TomcatRequestUpgradeStrategy strategy = new TomcatRequestUpgradeStrategy();, +			strategy.setMaxSessionIdleTimeout(0L);, +			return new HandshakeWebSocketService(strategy);, +++ b/src/docs/asciidoc/web-reactive.adoc, +include::web/webflux-websocket.adoc[leveloffset=+1], +++ b/src/docs/asciidoc/web/webflux-websocket.adoc, +[[webflux-websocket]], += WebSockets, +[.small]#<<web.adoc#websocket,Same in Servlet stack>>#, +, +This part of the reference documentation covers support for Reactive stack, WebSocket, +messaging., +, +, +include::websocket-intro.adoc[leveloffset=+1], +, +, +, +[[webflux-websocket-server]], +== WebSocket API, +[.small]#<<web.adoc#websocket-server,Same in Servlet stack>>#, +, +The Spring Framework provides a WebSocket API that can be used to write client and, +server side applications that handle WebSocket messages., +, +, +, +[[webflux-websocket-server-handler]], +=== WebSocketHandler, +[.small]#<<web.adoc#websocket-server-handler,Same in Servlet stack>>#, +, +Creating a WebSocket server is as simple as implementing `WebSocketHandler`:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +import org.springframework.web.reactive.socket.WebSocketHandler;, +import org.springframework.web.reactive.socket.WebSocketSession;, +, +public class MyWebSocketHandler implements WebSocketHandler {, +, +	@Override, +	public Mono<Void> handle(WebSocketSession session) {, +		// ..., +	}, +, +}, +----, +, +Spring WebFlux provides a `WebSocketHandlerAdapter` that can adapt WebSocket, +requests and use the above handler to handle the resulting WebSocket session. After the, +adapter is registered as a bean, you can map requests to your handler, for example using, +`SimpleUrlHandlerMapping`. This is shown below:, +, +[source,java,indent=0], +[subs="verbatim,quotes"], +----, +@Configuration, +static class WebConfig {, +, +	@Bean, +	public HandlerMapping handlerMapping() {, +		Map<String, WebSocketHandler> map = new HashMap<>();, +		map.put("/path", new MyWebSocketHandler());, +, +		SimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();, +		mapping.setUrlMap(map);, +		mapping.setOrder(-1); // before annotated controllers, +		return mapping;, +	}, +, +	@Bean, +	public WebSocketHandlerAdapter handlerAdapter() {, +		return new WebSocketHandlerAdapter();, +	}, +, +}, +----, +, +, +, +[[webflux-websocket-server-handshake]], +=== WebSocket Handshake, +[.small]#<<web.adoc#websocket-server-handshake,Same in Servlet stack>>#, +, +`WebSocketHandlerAdapter` does not perform WebSocket handshakes itself. Instead it, +delegates to an instance of `WebSocketService`. The default `WebSocketService`, +implementation is `HandshakeWebSocketService`., +]