[+++ b/spring-expression/src/test/java/org/springframework/expression/spel/SpelReproTests.java, +, +		evaluate("printDouble(T(java.math.BigDecimal).valueOf(14.35))", "14.35", String.class);, +		}, +		catch (EvaluationException see) {, +		 public Spr5899Class() {, +		 }, +, +		 public Spr5899Class(Integer i) {, +		 }, +, +		 public Spr5899Class(Integer i, String... s) {, +		 }, +, +		 public Integer tryToInvokeWithNull(Integer value) {, +			 return value;, +		 }, +, +		 public Integer tryToInvokeWithNull2(int i) {, +			 return new Integer(i);, +		 }, +, +			 for (String string : strings) {, +				 if (string == null) {, +				 }, +				 else {, +					 sb.append(string);, +, +, +, +, +		}, +		catch (AccessException ae) {, +		}, +		catch (AccessException ae) {, +, +, +		private final Resource resource;, +, +, +, +, +, +, +	private void checkTemplateParsingError(String expression, String expectedMessage) throws Exception {, +	private void checkTemplateParsingError(String expression, ParserContext context, String expectedMessage) throws Exception {, +			fail("Should have failed with message: " + expectedMessage);, +		}, +		catch (Exception ex) {, +, +, +		}, +		catch (SpelEvaluationException see) {, +		}, +		catch (SpelEvaluationException see) {, +		}, +		catch (SpelParseException spe) {, +, +		public Object resolve(EvaluationContext context, String beanName) throws AccessException {, +			if (beanName.equals("foo")) {, +			}, +			else if (beanName.equals("foo.bar")) {, +			}, +			else if (beanName.equals("goo")) {, +		}, +		catch (SpelEvaluationException see ) {, +		}, +		catch (SpelEvaluationException see ) {, +, +, +		SpelExpression exp = parser.parseRaw(ex);, +		SpelExpression expression = parser.parseRaw(, +				"T(org.springframework.expression.spel.testresources.le.div.mod.reserved.Reserver).CONST");, +, +, +, +			}, +			catch (Exception ex) {, +, +		public boolean canRead(EvaluationContext context, Object target, String name) throws AccessException {, +, +		public boolean canWrite(EvaluationContext context, Object target, String name) throws AccessException {, +, +, +		public TypedValue read(EvaluationContext context, Object target, String name) throws AccessException {, +, +, +, +					return new Method[] {Integer.class.getDeclaredMethod("parseInt",, +							new Class[] {String.class, Integer.TYPE })};, +				}, +				catch (NoSuchMethodException ex) {, +	public void SPR_9486_floatFunctionResolverTest() throws Exception {, +, +	public void SPR_11142() throws Exception {, +		SpelExpressionParser parser = new SpelExpressionParser();, +		StandardEvaluationContext context = new StandardEvaluationContext();, +		SPR11142 rootObject = new SPR11142();, +		Expression expression = parser.parseExpression("something");, +		thrown.expect(SpelEvaluationException.class);]