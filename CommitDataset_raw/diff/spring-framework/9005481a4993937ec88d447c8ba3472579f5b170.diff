[+++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +import java.util.function.Supplier;, +import org.springframework.beans.factory.annotation.AnnotatedBeanDefinition;, +, +, +	/**, +	 * Register one or more annotated classes to be processed., +	 * <p>Calls to {@code register} are idempotent; adding the same, +	 * annotated class more than once has no additional effect., +	 * @param annotatedClasses one or more annotated classes,, +	 * e.g. {@link Configuration @Configuration} classes, +	 */, +	/**, +	 * Register a bean from the given bean class, deriving its metadata from, +	 * class-declared annotations., +	 * @param annotatedClass the class of the bean, +	 */, +	@SuppressWarnings("unchecked"), +		registerBean(annotatedClass, null, null, (Class<? extends Annotation>[]) null);, +	/**, +	 * Register a bean from the given bean class, deriving its metadata from, +	 * class-declared annotations., +	 * @param annotatedClass the class of the bean, +	 * @param qualifiers specific qualifier annotations to consider,, +	 * in addition to qualifiers at the bean class level, +	 */, +		registerBean(annotatedClass, null, null, qualifiers);, +	/**, +	 * Register a bean from the given bean class, deriving its metadata from, +	 * class-declared annotations., +	 * @param annotatedClass the class of the bean, +	 * @param name an explicit name for the bean, +	 * @param qualifiers specific qualifier annotations to consider,, +	 * in addition to qualifiers at the bean class level, +	 */, +		registerBean(annotatedClass, null, name, qualifiers);, +	/**, +	 * Register a bean from the given bean class, deriving its metadata from, +	 * class-declared annotations, using the given supplier for obtaining a new, +	 * instance (possibly declared as a lambda expression or method reference)., +	 * @param annotatedClass the class of the bean, +	 * @param instanceSupplier a callback for creating an instance of the bean, +	 * (may be {@code null}), +	 * @return the registered bean definition, or {@code null} if skipped due to, +	 * a declared condition, +	 * @since 5.0, +	 */, +	@SuppressWarnings("unchecked"), +	public <T> AnnotatedBeanDefinition registerBean(Class<T> annotatedClass, Supplier<T> instanceSupplier) {, +		return registerBean(annotatedClass, instanceSupplier, null, (Class<? extends Annotation>[]) null);, +	}, +, +	/**, +	 * Register a bean from the given bean class, deriving its metadata from, +	 * class-declared annotations., +	 * @param annotatedClass the class of the bean, +	 * @param instanceSupplier a callback for creating an instance of the bean, +	 * (may be {@code null}), +	 * @param name an explicit name for the bean, +	 * @param qualifiers specific qualifier annotations to consider, if any,, +	 * in addition to qualifiers at the bean class level, +	 * @return the registered bean definition, or {@code null} if skipped due to, +	 * a declared condition, +	 * @since 5.0, +	 */, +	@SuppressWarnings("unchecked"), +	public <T> AnnotatedBeanDefinition registerBean(Class<T> annotatedClass, Supplier<T> instanceSupplier,, +			String name, Class<? extends Annotation>... qualifiers) {, +, +		AnnotatedGenericBeanDefinition abd = new AnnotatedGenericBeanDefinition(annotatedClass);, +		if (this.conditionEvaluator.shouldSkip(abd.getMetadata())) {, +			return null;, +		}, +, +		abd.setInstanceSupplier(instanceSupplier);, +		return abd;, +++ b/spring-context/src/main/java/org/springframework/context/annotation/AnnotatedBeanDefinitionReader.java, +import java.util.function.Supplier;, +import org.springframework.beans.factory.annotation.AnnotatedBeanDefinition;, +, +, +	/**, +	 * Register one or more annotated classes to be processed., +	 * <p>Calls to {@code register} are idempotent; adding the same, +	 * annotated class more than once has no additional effect., +	 * @param annotatedClasses one or more annotated classes,, +	 * e.g. {@link Configuration @Configuration} classes, +	 */, +	/**, +	 * Register a bean from the given bean class, deriving its metadata from, +	 * class-declared annotations., +	 * @param annotatedClass the class of the bean, +	 */, +	@SuppressWarnings("unchecked"), +		registerBean(annotatedClass, null, null, (Class<? extends Annotation>[]) null);, +	/**, +	 * Register a bean from the given bean class, deriving its metadata from, +	 * class-declared annotations., +	 * @param annotatedClass the class of the bean, +	 * @param qualifiers specific qualifier annotations to consider,]