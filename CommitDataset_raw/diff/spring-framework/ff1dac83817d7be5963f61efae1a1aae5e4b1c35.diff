[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, + * though they can also be set explicitly by using the {@link #setViewResolvers(List) viewResolvers} property., + * request. This media type is determined by using the following criteria:, + * <ol>, + * <li>If the requested path has a file extension and if the {@link #setFavorPathExtension(boolean)} property is, + * <code>true</code>, the {@link #setMediaTypes(Map)  mediaTypes} property is inspected for a matching media type.</li>, + * <li>If the request contains a parameter defining the extension and if the {@link #setFavorParameter(boolean)}, + * property is <code>true</code>, the {@link #setMediaTypes(Map) mediaTypes} property is inspected for a matching media, + * type. The default name of the parameter is <code>format</code> and it can be configured using the, + * {@link #setParameterName(String) parameterName} property.</li>, + * <li>If there is no match and if the Java Activation Framework (JAF) is present on the class path, {@link, + * FileTypeMap#getContentType(String)} is used.</li>, + * <li>If the previous steps did not result in a media type, the request {@code Accept} header is used.</li>, + * </ol>, + * Once the requested media type has been determined, this resolver queries each delegate view resolver for a, + * {@link View} and determines if the requested media type is {@linkplain MediaType#includes(MediaType) compatible}, + * with the view's {@linkplain View#getContentType() content type}). The most compatible view is returned., + * @author Rostislav Hristov, +	private boolean favorParameter = false;, +	, +	private String parameterName = "format";, +, +	 * of looking at the {@code Accept} header. The default value is {@code true}., +	 * Indicates whether a request parameter should be used to determine the requested media type, in favor, +	 * of looking at the {@code Accept} header. The default value is {@code false}., +	 *, +	 * <p>For instance, when this flag is <code>true</code>, a request for {@code /hotels?format=pdf} will result in, +	 * an {@code AbstractPdfView} being resolved, while the {@code Accept} header can be the browser-defined {@code, +	 * text/html,application/xhtml+xml}., +	 */, +	public void setFavorParameter(boolean favorParameter) {, +		this.favorParameter = favorParameter;, +	}, +	, +	/**, +	 * Sets the parameter name that can be used to determine the requested media type if the, +	 * {@link #setFavorParameter(boolean)} property is {@code true}. The default parameter name is {@code format}., +	 */, +	public void setParameterName(String parameterName) {, +		this.parameterName = parameterName;, +	}, +	, +	/**, +		if (favorParameter) {		, +			if (request.getParameter(parameterName) != null) {, +				String parameterValue = request.getParameter(parameterName);, +				MediaType mediaType = getMediaTypeFromParameter(parameterValue);, +				if (mediaType != null) {, +					if (logger.isDebugEnabled()) {, +						logger.debug("Requested media type is '" + mediaType + "' (based on parameter '" +, +								parameterValue + "')");, +					}, +					List<MediaType> mediaTypes = new ArrayList<MediaType>();, +					mediaTypes.add(mediaType);, +					return mediaTypes;, +				}, +			}, +		}, +	/**, +	 * Determines the {@link MediaType} for the given parameter value., +	 *, +	 * <p>The default implementation will check the {@linkplain #setMediaTypes(Map) media types} property for a, +	 * defined mapping., +	 *, +	 * <p>This method can be overriden to provide a different algorithm., +	 *, +	 * @param parameterValue the parameter value (i.e. {@code pdf})., +	 * @return the media type, if any, +	 */, +	protected MediaType getMediaTypeFromParameter(String parameterValue) {, +		parameterValue = parameterValue.toLowerCase(Locale.ENGLISH);, +		return mediaTypes.get(parameterValue);, +	}, +, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, + * though they can also be set explicitly by using the {@link #setViewResolvers(List) viewResolvers} property., + * request. This media type is determined by using the following criteria:, + * <ol>, + * <li>If the requested path has a file extension and if the {@link #setFavorPathExtension(boolean)} property is, + * <code>true</code>, the {@link #setMediaTypes(Map)  mediaTypes} property is inspected for a matching media type.</li>, + * <li>If the request contains a parameter defining the extension and if the {@link #setFavorParameter(boolean)}, + * property is <code>true</code>, the {@link #setMediaTypes(Map) mediaTypes} property is inspected for a matching media, + * type. The default name of the parameter is <code>format</code> and it can be configured using the, + * {@link #setParameterName(String) parameterName} property.</li>, + * <li>If there is no match and if the Java Activation Framework (JAF) is present on the class path, {@link, + * FileTypeMap#getContentType(String)} is used.</li>, + * <li>If the previous steps did not result in a media type, the request {@code Accept} header is used.</li>, + * </ol>, + * Once the requested media type has been determined, this resolver queries each delegate view resolver for a, + * {@link View} and determines if the requested media type is {@linkplain MediaType#includes(MediaType) compatible}, + * with the view's {@linkplain View#getContentType() content type}). The most compatible view is returned., + * @author Rostislav Hristov, +	private boolean favorParameter = false;, +	, +	private String parameterName = "format";, +, +	 * of looking at the {@code Accept} header. The default value is {@code true}., +	 * Indicates whether a request parameter should be used to determine the requested media type, in favor, +	 * of looking at the {@code Accept} header. The default value is {@code false}., +	 *]