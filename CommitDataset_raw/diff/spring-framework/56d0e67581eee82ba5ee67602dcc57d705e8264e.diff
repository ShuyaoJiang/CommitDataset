[+++ b/org.springframework.orm/src/main/java/org/springframework/orm/hibernate4/LocalSessionFactoryBean.java, + * Copyright 2002-2012 the original author or authors., +import org.hibernate.cfg.Configuration;, + * {@link org.springframework.beans.factory.FactoryBean} that creates a Hibernate, + * {@link org.hibernate.SessionFactory}. This is the usual way to set up a shared, + * Hibernate SessionFactory in a Spring application context; the SessionFactory can, + * then be passed to Hibernate-based data access objects via dependency injection., + * <p><b>NOTE:</b> This variant of LocalSessionFactoryBean requires Hibernate 4.0 or higher., + * It is similar in role to the same-named class in the <code>orm.hibernate3</code> package., + * However, in practice, it is closer to <code>AnnotationSessionFactoryBean</code> since, + * its core purpose is to bootstrap a <code>SessionFactory</code> from annotation scanning., +	private Configuration configuration;, +, +		// Build SessionFactory instance., +		this.configuration = sfb;, +		this.sessionFactory = buildSessionFactory(sfb);, +	}, +, +	/**, +	 * Subclasses can override this method to perform custom initialization, +	 * of the SessionFactory instance, creating it via the given Configuration, +	 * object that got prepared by this LocalSessionFactoryBean., +	 * <p>The default implementation invokes LocalSessionFactoryBuilder's buildSessionFactory., +	 * A custom implementation could prepare the instance in a specific way (e.g. applying, +	 * a custom ServiceRegistry) or use a custom SessionFactoryImpl subclass., +	 * @param sfb LocalSessionFactoryBuilder prepared by this LocalSessionFactoryBean, +	 * @return the SessionFactory instance, +	 * @see LocalSessionFactoryBuilder#buildSessionFactory, +	 */, +	protected SessionFactory buildSessionFactory(LocalSessionFactoryBuilder sfb) {, +		return sfb.buildSessionFactory();, +	}, +, +	/**, +	 * Return the Hibernate Configuration object used to build the SessionFactory., +	 * Allows for access to configuration metadata stored there (rarely needed)., +	 * @throws IllegalStateException if the Configuration object has not been initialized yet, +	 */, +	public final Configuration getConfiguration() {, +		if (this.configuration == null) {, +			throw new IllegalStateException("Configuration not initialized yet");, +		}, +		return this.configuration;]