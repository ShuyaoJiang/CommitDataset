[+++ b/spring-jms/src/main/java/org/springframework/jms/listener/endpoint/JmsMessageEndpointFactory.java, + * Copyright 2002-2018 the original author or authors., +			Throwable endpointEx = null;, +				endpointEx = ex;, +						if (endpointEx == null) {, +		}, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/endpoint/JmsMessageEndpointFactory.java, + * Copyright 2002-2018 the original author or authors., +			Throwable endpointEx = null;, +				endpointEx = ex;, +						if (endpointEx == null) {, +		}, +++ b/spring-tx/src/main/java/org/springframework/jca/endpoint/AbstractMessageEndpointFactory.java, +		protected void onEndpointException(Throwable ex) {, +			logger.debug("Transaction marked as rollback-only after endpoint exception", ex);, +				logger.warn("Failed to complete transaction after endpoint delivery", ex);, +					logger.warn("Could not complete unfinished transaction on endpoint release", ex);, +++ b/spring-jms/src/main/java/org/springframework/jms/listener/endpoint/JmsMessageEndpointFactory.java, + * Copyright 2002-2018 the original author or authors., +			Throwable endpointEx = null;, +				endpointEx = ex;, +						if (endpointEx == null) {, +		}, +++ b/spring-tx/src/main/java/org/springframework/jca/endpoint/AbstractMessageEndpointFactory.java, +		protected void onEndpointException(Throwable ex) {, +			logger.debug("Transaction marked as rollback-only after endpoint exception", ex);, +				logger.warn("Failed to complete transaction after endpoint delivery", ex);, +					logger.warn("Could not complete unfinished transaction on endpoint release", ex);, +++ b/spring-tx/src/main/java/org/springframework/jca/endpoint/GenericMessageEndpointFactory.java, + * Copyright 2002-2018 the original author or authors., +			Throwable endpointEx = null;, +					throw adaptExceptionIfNecessary(methodInvocation, ex);, +				endpointEx = ex;, +						if (endpointEx == null) {, +							throw adaptExceptionIfNecessary(methodInvocation, ex);, +						}, +					}, +				}, +			}, +		}, +, +		private Exception adaptExceptionIfNecessary(MethodInvocation methodInvocation, ResourceException ex) {, +				return ex;, +				return new InternalResourceException(ex);, +		public InternalResourceException(ResourceException cause) {]