[+++ b/build.gradle, +	ext.hsqldbVersion   = "2.3.1", +		optional("org.hsqldb:hsqldb:${hsqldbVersion}"), +		testCompile("org.hsqldb:hsqldb:${hsqldbVersion}"), +		testCompile("org.hsqldb:hsqldb:${hsqldbVersion}"), +		testCompile("org.hsqldb:hsqldb:${hsqldbVersion}"), +		testCompile("org.hsqldb:hsqldb:${hsqldbVersion}"), +++ b/build.gradle, +	ext.hsqldbVersion   = "2.3.1", +		optional("org.hsqldb:hsqldb:${hsqldbVersion}"), +		testCompile("org.hsqldb:hsqldb:${hsqldbVersion}"), +		testCompile("org.hsqldb:hsqldb:${hsqldbVersion}"), +		testCompile("org.hsqldb:hsqldb:${hsqldbVersion}"), +		testCompile("org.hsqldb:hsqldb:${hsqldbVersion}"), +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/datasource/init/DatabasePopulatorTests.java, +import static org.hamcrest.Matchers.*;, +, +			assertThat("Did not find user with last name [" + lastName + "].",, +				jdbcTemplate.queryForObject("select count(0) from users where last_name = ?", Integer.class, lastName),, +				equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Keith'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Dave'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Keith'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Dave'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Keith'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Dave'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Keith'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Dave'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Keith'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Dave'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Keith'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Dave'", Integer.class), equalTo(1));, +++ b/build.gradle, +	ext.hsqldbVersion   = "2.3.1", +		optional("org.hsqldb:hsqldb:${hsqldbVersion}"), +		testCompile("org.hsqldb:hsqldb:${hsqldbVersion}"), +		testCompile("org.hsqldb:hsqldb:${hsqldbVersion}"), +		testCompile("org.hsqldb:hsqldb:${hsqldbVersion}"), +		testCompile("org.hsqldb:hsqldb:${hsqldbVersion}"), +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/datasource/init/DatabasePopulatorTests.java, +import static org.hamcrest.Matchers.*;, +, +			assertThat("Did not find user with last name [" + lastName + "].",, +				jdbcTemplate.queryForObject("select count(0) from users where last_name = ?", Integer.class, lastName),, +				equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Keith'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Dave'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Keith'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Dave'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Keith'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Dave'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Keith'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Dave'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Keith'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Dave'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Keith'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Dave'", Integer.class), equalTo(1));, +++ b/spring-jdbc/src/test/resources/org/springframework/jdbc/datasource/init/users-schema.sql, +	id INTEGER NOT NULL IDENTITY,, +++ b/build.gradle, +	ext.hsqldbVersion   = "2.3.1", +		optional("org.hsqldb:hsqldb:${hsqldbVersion}"), +		testCompile("org.hsqldb:hsqldb:${hsqldbVersion}"), +		testCompile("org.hsqldb:hsqldb:${hsqldbVersion}"), +		testCompile("org.hsqldb:hsqldb:${hsqldbVersion}"), +		testCompile("org.hsqldb:hsqldb:${hsqldbVersion}"), +++ b/spring-jdbc/src/test/java/org/springframework/jdbc/datasource/init/DatabasePopulatorTests.java, +import static org.hamcrest.Matchers.*;, +, +			assertThat("Did not find user with last name [" + lastName + "].",, +				jdbcTemplate.queryForObject("select count(0) from users where last_name = ?", Integer.class, lastName),, +				equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Keith'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Dave'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Keith'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Dave'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Keith'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Dave'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Keith'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Dave'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Keith'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Dave'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Keith'", Integer.class), equalTo(1));, +		assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Dave'", Integer.class), equalTo(1));, +++ b/spring-jdbc/src/test/resources/org/springframework/jdbc/datasource/init/users-schema.sql, +	id INTEGER NOT NULL IDENTITY,, +++ b/spring-orm/src/test/java/org/springframework/orm/jpa/AbstractEntityManagerFactoryIntegrationTests.java, +import javax.persistence.EntityManager;, +import javax.persistence.Query;, +, +	protected int countRowsInTable(EntityManager em, String tableName) {, +		Query query = em.createNativeQuery("SELECT COUNT(0) FROM " + tableName);, +		return ((Number) query.getSingleResult()).intValue();, +	};, +++ b/build.gradle, +	ext.hsqldbVersion   = "2.3.1", +		optional("org.hsqldb:hsqldb:${hsqldbVersion}"), +		testCompile("org.hsqldb:hsqldb:${hsqldbVersion}"), +		testCompile("org.hsqldb:hsqldb:${hsqldbVersion}"), +		testCompile("org.hsqldb:hsqldb:${hsqldbVersion}")]