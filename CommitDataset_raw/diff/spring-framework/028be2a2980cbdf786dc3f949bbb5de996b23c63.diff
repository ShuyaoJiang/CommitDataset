[+++ b/build.gradle, +	ext.nettyVersion         = "4.1.3.Final", +	ext.reactorCoreVersion   = '3.0.0.BUILD-SNAPSHOT', +	ext.reactorNettyVersion  = '0.5.0.BUILD-SNAPSHOT', +++ b/build.gradle, +	ext.nettyVersion         = "4.1.3.Final", +	ext.reactorCoreVersion   = '3.0.0.BUILD-SNAPSHOT', +	ext.reactorNettyVersion  = '0.5.0.BUILD-SNAPSHOT', +++ b/spring-core/src/main/java/org/springframework/core/convert/support/ReactorToRxJava1Converter.java, +import reactor.adapter.RxJava1Adapter;, +			return RxJava1Adapter.observableToFlux((Observable<?>) source);, +			return RxJava1Adapter.publisherToObservable((Publisher<?>) source);, +			return RxJava1Adapter.singleToMono((Single<?>) source);, +			return RxJava1Adapter.publisherToSingle((Publisher<?>) source);, +			return RxJava1Adapter.completableToMono((Completable) source);, +			return RxJava1Adapter.publisherToCompletable((Publisher<?>) source);, +++ b/build.gradle, +	ext.nettyVersion         = "4.1.3.Final", +	ext.reactorCoreVersion   = '3.0.0.BUILD-SNAPSHOT', +	ext.reactorNettyVersion  = '0.5.0.BUILD-SNAPSHOT', +++ b/spring-core/src/main/java/org/springframework/core/convert/support/ReactorToRxJava1Converter.java, +import reactor.adapter.RxJava1Adapter;, +			return RxJava1Adapter.observableToFlux((Observable<?>) source);, +			return RxJava1Adapter.publisherToObservable((Publisher<?>) source);, +			return RxJava1Adapter.singleToMono((Single<?>) source);, +			return RxJava1Adapter.publisherToSingle((Publisher<?>) source);, +			return RxJava1Adapter.completableToMono((Completable) source);, +			return RxJava1Adapter.publisherToCompletable((Publisher<?>) source);, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/support/DataBufferUtils.java, +import reactor.core.publisher.SynchronousSink;, +			implements BiFunction<ReadableByteChannel, SynchronousSink<DataBuffer>,, +				channel, SynchronousSink<DataBuffer>	sub) {, +++ b/build.gradle, +	ext.nettyVersion         = "4.1.3.Final", +	ext.reactorCoreVersion   = '3.0.0.BUILD-SNAPSHOT', +	ext.reactorNettyVersion  = '0.5.0.BUILD-SNAPSHOT', +++ b/spring-core/src/main/java/org/springframework/core/convert/support/ReactorToRxJava1Converter.java, +import reactor.adapter.RxJava1Adapter;, +			return RxJava1Adapter.observableToFlux((Observable<?>) source);, +			return RxJava1Adapter.publisherToObservable((Publisher<?>) source);, +			return RxJava1Adapter.singleToMono((Single<?>) source);, +			return RxJava1Adapter.publisherToSingle((Publisher<?>) source);, +			return RxJava1Adapter.completableToMono((Completable) source);, +			return RxJava1Adapter.publisherToCompletable((Publisher<?>) source);, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/support/DataBufferUtils.java, +import reactor.core.publisher.SynchronousSink;, +			implements BiFunction<ReadableByteChannel, SynchronousSink<DataBuffer>,, +				channel, SynchronousSink<DataBuffer>	sub) {, +++ b/spring-core/src/test/java/org/springframework/core/codec/ByteBufferDecoderTests.java, +import reactor.test.TestSubscriber;, +++ b/build.gradle, +	ext.nettyVersion         = "4.1.3.Final", +	ext.reactorCoreVersion   = '3.0.0.BUILD-SNAPSHOT', +	ext.reactorNettyVersion  = '0.5.0.BUILD-SNAPSHOT', +++ b/spring-core/src/main/java/org/springframework/core/convert/support/ReactorToRxJava1Converter.java, +import reactor.adapter.RxJava1Adapter;, +			return RxJava1Adapter.observableToFlux((Observable<?>) source);, +			return RxJava1Adapter.publisherToObservable((Publisher<?>) source);, +			return RxJava1Adapter.singleToMono((Single<?>) source);, +			return RxJava1Adapter.publisherToSingle((Publisher<?>) source);, +			return RxJava1Adapter.completableToMono((Completable) source);, +			return RxJava1Adapter.publisherToCompletable((Publisher<?>) source);, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/support/DataBufferUtils.java, +import reactor.core.publisher.SynchronousSink;, +			implements BiFunction<ReadableByteChannel, SynchronousSink<DataBuffer>,, +				channel, SynchronousSink<DataBuffer>	sub) {, +++ b/spring-core/src/test/java/org/springframework/core/codec/ByteBufferDecoderTests.java, +import reactor.test.TestSubscriber;, +++ b/spring-core/src/test/java/org/springframework/core/codec/ByteBufferEncoderTests.java, +import reactor.test.TestSubscriber;, +++ b/build.gradle, +	ext.nettyVersion         = "4.1.3.Final", +	ext.reactorCoreVersion   = '3.0.0.BUILD-SNAPSHOT', +	ext.reactorNettyVersion  = '0.5.0.BUILD-SNAPSHOT', +++ b/spring-core/src/main/java/org/springframework/core/convert/support/ReactorToRxJava1Converter.java, +import reactor.adapter.RxJava1Adapter;, +			return RxJava1Adapter.observableToFlux((Observable<?>) source);, +			return RxJava1Adapter.publisherToObservable((Publisher<?>) source);, +			return RxJava1Adapter.singleToMono((Single<?>) source);, +			return RxJava1Adapter.publisherToSingle((Publisher<?>) source);, +			return RxJava1Adapter.completableToMono((Completable) source);, +			return RxJava1Adapter.publisherToCompletable((Publisher<?>) source);, +++ b/spring-core/src/main/java/org/springframework/core/io/buffer/support/DataBufferUtils.java, +import reactor.core.publisher.SynchronousSink;, +			implements BiFunction<ReadableByteChannel, SynchronousSink<DataBuffer>,, +				channel, SynchronousSink<DataBuffer>	sub) {, +++ b/spring-core/src/test/java/org/springframework/core/codec/ByteBufferDecoderTests.java, +import reactor.test.TestSubscriber;, +++ b/spring-core/src/test/java/org/springframework/core/codec/ByteBufferEncoderTests.java, +import reactor.test.TestSubscriber;, +++ b/spring-core/src/test/java/org/springframework/core/codec/ResourceDecoderTests.java, +import reactor.test.TestSubscriber;, +++ b/build.gradle, +	ext.nettyVersion         = "4.1.3.Final", +	ext.reactorCoreVersion   = '3.0.0.BUILD-SNAPSHOT', +	ext.reactorNettyVersion  = '0.5.0.BUILD-SNAPSHOT', +++ b/spring-core/src/main/java/org/springframework/core/convert/support/ReactorToRxJava1Converter.java, +import reactor.adapter.RxJava1Adapter;, +			return RxJava1Adapter.observableToFlux((Observable<?>) source);, +			return RxJava1Adapter.publisherToObservable((Publisher<?>) source);]