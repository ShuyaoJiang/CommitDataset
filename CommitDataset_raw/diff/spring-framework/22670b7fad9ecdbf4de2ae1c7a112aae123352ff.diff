[+++ b/spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, + * Copyright 2002-2015 the original author or authors., +	// ConverterRegistry implementation, +		addConverter(new ConverterAdapter(, +				converter, ResolvableType.forClass(sourceType), ResolvableType.forClass(targetType)));, +		Assert.notNull(typeInfo, "Unable to the determine source type <S> and target range type R which your " +, +, +	// ConversionService implementation, +	 * Return whether conversion between the sourceType and targetType can be bypassed., +	 * <p>More precisely, this method will return true if objects of sourceType can be, +	 * @param sourceType context about the source type to convert from, +	 * (may be {@code null} if source is {@code null}), +	 * @return {@code true} if conversion can be bypassed; {@code false} otherwise, +	 * @throws IllegalArgumentException if targetType is {@code null}, +		Assert.notNull(targetType, "targetType to convert to cannot be null");, +		Assert.notNull(targetType, "targetType to convert to cannot be null");, +		Assert.notNull(targetType, "targetType to convert to cannot be null");, +			Assert.isTrue(source == null, "source must be [null] if sourceType == [null]");, +			return handleResult(null, targetType, convertNullSource(null, targetType));, +			throw new IllegalArgumentException("source to convert from must be an instance of " +, +	 * @throws IllegalArgumentException if targetType is {@code null},, +	 * or sourceType is {@code null} but source is not {@code null}, +	 * Template method to convert a {@code null} source., +	 * <p>The default implementation returns {@code null} or the Java 8, +	 * {@code java.util.Optional}. Subclasses may override this to return, +	 * custom {@code null} objects for specific target types., +	 * @return the generic converter that will perform the conversion,, +	 * or {@code null} if no suitable converter was found, +	 * <p>Returns a NO_OP Converter if the sourceType is assignable to the targetType., +, +	// Internal helpers, +			return null;, +			return (this.typeInfo + " : " + this.converter);, +			return (this.typeInfo + " : " + this.converterFactory);, +			return (ObjectUtils.nullSafeEquals(this.sourceType, otherKey.sourceType) &&, +					ObjectUtils.nullSafeEquals(this.targetType, otherKey.targetType));, +			return (ObjectUtils.nullSafeHashCode(this.sourceType) * 29 +, +					ObjectUtils.nullSafeHashCode(this.targetType));, +			return ("ConverterCacheKey [sourceType = " + this.sourceType +, +					", targetType = " + this.targetType + "]");, +			// Check ConditionalConverters for a dynamic match, +, +++ b/spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java, + * Copyright 2002-2015 the original author or authors., +	// ConverterRegistry implementation, +		addConverter(new ConverterAdapter(, +				converter, ResolvableType.forClass(sourceType), ResolvableType.forClass(targetType)));, +		Assert.notNull(typeInfo, "Unable to the determine source type <S> and target range type R which your " +, +, +	// ConversionService implementation, +	 * Return whether conversion between the sourceType and targetType can be bypassed., +	 * <p>More precisely, this method will return true if objects of sourceType can be, +	 * @param sourceType context about the source type to convert from, +	 * (may be {@code null} if source is {@code null}), +	 * @return {@code true} if conversion can be bypassed; {@code false} otherwise, +	 * @throws IllegalArgumentException if targetType is {@code null}, +		Assert.notNull(targetType, "targetType to convert to cannot be null");, +		Assert.notNull(targetType, "targetType to convert to cannot be null");, +		Assert.notNull(targetType, "targetType to convert to cannot be null");, +			Assert.isTrue(source == null, "source must be [null] if sourceType == [null]");, +			return handleResult(null, targetType, convertNullSource(null, targetType));, +			throw new IllegalArgumentException("source to convert from must be an instance of " +, +	 * @throws IllegalArgumentException if targetType is {@code null},, +	 * or sourceType is {@code null} but source is not {@code null}, +	 * Template method to convert a {@code null} source., +	 * <p>The default implementation returns {@code null} or the Java 8, +	 * {@code java.util.Optional}. Subclasses may override this to return, +	 * custom {@code null} objects for specific target types., +	 * @return the generic converter that will perform the conversion,, +	 * or {@code null} if no suitable converter was found, +	 * <p>Returns a NO_OP Converter if the sourceType is assignable to the targetType., +, +	// Internal helpers, +			return null;, +			return (this.typeInfo + " : " + this.converter);, +			return (this.typeInfo + " : " + this.converterFactory);, +			return (ObjectUtils.nullSafeEquals(this.sourceType, otherKey.sourceType) &&, +					ObjectUtils.nullSafeEquals(this.targetType, otherKey.targetType));, +			return (ObjectUtils.nullSafeHashCode(this.sourceType) * 29 +, +					ObjectUtils.nullSafeHashCode(this.targetType));, +			return ("ConverterCacheKey [sourceType = " + this.sourceType +, +					", targetType = " + this.targetType + "]");, +			// Check ConditionalConverters for a dynamic match, +, +++ b/spring-core/src/test/java/org/springframework/core/convert/support/GenericConversionServiceTests.java, + * Copyright 2002-2015 the original author or authors., +		conversionService.addConverter(new MyBaseInterfaceToStringConverter());, +		conversionService.addConverter(new MyBaseInterfaceToStringConverter());, +		conversionService.addConverter(new MyBaseInterfaceToStringConverter());, +	private static class MyBaseInterfaceToStringConverter implements Converter<MyBaseInterface, String> {]