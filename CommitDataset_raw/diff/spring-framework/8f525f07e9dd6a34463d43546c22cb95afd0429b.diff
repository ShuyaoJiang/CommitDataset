[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/Lookup.java, + * to resort to {@code @Inject Provider<TargetBean>} or the like instead., +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/Lookup.java, + * to resort to {@code @Inject Provider<TargetBean>} or the like instead., +++ b/src/docs/asciidoc/core/core-beans.adoc, +The example autowires the `String` method parameter `country` to the value of the `age`, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/Lookup.java, + * to resort to {@code @Inject Provider<TargetBean>} or the like instead., +++ b/src/docs/asciidoc/core/core-beans.adoc, +The example autowires the `String` method parameter `country` to the value of the `age`, +++ b/src/docs/asciidoc/core/core-expressions.adoc, +			"'5.00' matches '^-?\\d+(\\.\\d{2})?$'").getValue(Boolean.class);, +			"'5.0067' matches '^-?\\d+(\\.\\d{2})?$'").getValue(Boolean.class);, +shown here: `lt` (`<`), `gt` (`>`), `le` (`\<=`), `ge` (`>=`), `eq` (`==`),, +`.^[selectionExpression]` whilst to obtain the last matching selection the syntax is, +`.$[selectionExpression]`., +result is a new collection. The syntax for projection is `.![projectionExpression]`. Most, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/Lookup.java, + * to resort to {@code @Inject Provider<TargetBean>} or the like instead., +++ b/src/docs/asciidoc/core/core-beans.adoc, +The example autowires the `String` method parameter `country` to the value of the `age`, +++ b/src/docs/asciidoc/core/core-expressions.adoc, +			"'5.00' matches '^-?\\d+(\\.\\d{2})?$'").getValue(Boolean.class);, +			"'5.0067' matches '^-?\\d+(\\.\\d{2})?$'").getValue(Boolean.class);, +shown here: `lt` (`<`), `gt` (`>`), `le` (`\<=`), `ge` (`>=`), `eq` (`==`),, +`.^[selectionExpression]` whilst to obtain the last matching selection the syntax is, +`.$[selectionExpression]`., +result is a new collection. The syntax for projection is `.![projectionExpression]`. Most, +++ b/src/docs/asciidoc/core/core-resources.adoc, +the base `ResourceLoader` is a filesystem one), then wildcarding is guaranteed to work in, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/Lookup.java, + * to resort to {@code @Inject Provider<TargetBean>} or the like instead., +++ b/src/docs/asciidoc/core/core-beans.adoc, +The example autowires the `String` method parameter `country` to the value of the `age`, +++ b/src/docs/asciidoc/core/core-expressions.adoc, +			"'5.00' matches '^-?\\d+(\\.\\d{2})?$'").getValue(Boolean.class);, +			"'5.0067' matches '^-?\\d+(\\.\\d{2})?$'").getValue(Boolean.class);, +shown here: `lt` (`<`), `gt` (`>`), `le` (`\<=`), `ge` (`>=`), `eq` (`==`),, +`.^[selectionExpression]` whilst to obtain the last matching selection the syntax is, +`.$[selectionExpression]`., +result is a new collection. The syntax for projection is `.![projectionExpression]`. Most, +++ b/src/docs/asciidoc/core/core-resources.adoc, +the base `ResourceLoader` is a filesystem one), then wildcarding is guaranteed to work in, +++ b/src/docs/asciidoc/web/webmvc-view.adoc, +The following table of available macros show the FTL definitions and the, +* In FTL (FreeMarker), `formHiddenInput` and `formPasswordInput` are not actually required, +  as you can use the normal `formInput` macro, specifying `hidden` or `password` as the, +  value for the `fieldType` parameter., +To switch to XHTML compliance for your tags, specify a value of `true` for a, +	<#assign xhtmlCompliant = true>, +[source,jsp,indent=0], +	<#assign htmlEscape = true>, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/Lookup.java, + * to resort to {@code @Inject Provider<TargetBean>} or the like instead., +++ b/src/docs/asciidoc/core/core-beans.adoc, +The example autowires the `String` method parameter `country` to the value of the `age`, +++ b/src/docs/asciidoc/core/core-expressions.adoc, +			"'5.00' matches '^-?\\d+(\\.\\d{2})?$'").getValue(Boolean.class);, +			"'5.0067' matches '^-?\\d+(\\.\\d{2})?$'").getValue(Boolean.class);, +shown here: `lt` (`<`), `gt` (`>`), `le` (`\<=`), `ge` (`>=`), `eq` (`==`),, +`.^[selectionExpression]` whilst to obtain the last matching selection the syntax is, +`.$[selectionExpression]`., +result is a new collection. The syntax for projection is `.![projectionExpression]`. Most, +++ b/src/docs/asciidoc/core/core-resources.adoc, +the base `ResourceLoader` is a filesystem one), then wildcarding is guaranteed to work in, +++ b/src/docs/asciidoc/web/webmvc-view.adoc, +The following table of available macros show the FTL definitions and the, +* In FTL (FreeMarker), `formHiddenInput` and `formPasswordInput` are not actually required, +  as you can use the normal `formInput` macro, specifying `hidden` or `password` as the, +  value for the `fieldType` parameter., +To switch to XHTML compliance for your tags, specify a value of `true` for a, +	<#assign xhtmlCompliant = true>, +[source,jsp,indent=0], +	<#assign htmlEscape = true>, +++ b/src/docs/asciidoc/web/webmvc.adoc, +which the response is written and committed within the `HandlerAdapter` and before, +		URI location = ... ;, +		return ResponseEntity.created(location).build();, +resolution using JSP and Jackson as a default `View` for JSON rendering:, +{api-spring-framework}/web/servlet/resource/ResourceResolver.html[ResourceResolver]s and, +{api-spring-framework}/web/servlet/resource/ResourceTransformer.html[ResourceTransformer]s.]