[+++ b/org.springframework.web/src/main/java/org/springframework/web/multipart/commons/CommonsFileUploadSupport.java, +import java.nio.charset.Charset;, +import org.springframework.http.MediaType;, +				String partEncoding = determineEncoding(fileItem.getContentType(), encoding);, +				if (partEncoding != null) {, +						value = fileItem.getString(partEncoding);, +									"' with encoding '" + partEncoding + "': using platform default");, +	private String determineEncoding(String contentTypeHeader, String defaultEncoding) {, +		if (!StringUtils.hasText(contentTypeHeader)) {, +			return defaultEncoding;, +		}, +		MediaType contentType = MediaType.parseMediaType(contentTypeHeader);, +		Charset charset = contentType.getCharSet();, +		return charset != null ? charset.name() : defaultEncoding;, +	}, +, +++ b/org.springframework.web/src/main/java/org/springframework/web/multipart/commons/CommonsFileUploadSupport.java, +import java.nio.charset.Charset;, +import org.springframework.http.MediaType;, +				String partEncoding = determineEncoding(fileItem.getContentType(), encoding);, +				if (partEncoding != null) {, +						value = fileItem.getString(partEncoding);, +									"' with encoding '" + partEncoding + "': using platform default");, +	private String determineEncoding(String contentTypeHeader, String defaultEncoding) {, +		if (!StringUtils.hasText(contentTypeHeader)) {, +			return defaultEncoding;, +		}, +		MediaType contentType = MediaType.parseMediaType(contentTypeHeader);, +		Charset charset = contentType.getCharSet();, +		return charset != null ? charset.name() : defaultEncoding;, +	}, +, +++ b/org.springframework.web/src/test/java/org/springframework/http/MediaTypeTests.java, +import java.nio.charset.Charset;, +	public void parseCharset() throws Exception {, +		String s = "text/html; charset=iso-8859-1";, +		MediaType mediaType = MediaType.parseMediaType(s);, +		assertEquals("Invalid type", "text", mediaType.getType());, +		assertEquals("Invalid subtype", "html", mediaType.getSubtype());, +		assertEquals("Invalid charset", Charset.forName("ISO-8859-1"), mediaType.getCharSet());, +	}, +, +	@Test, +++ b/org.springframework.web/src/main/java/org/springframework/web/multipart/commons/CommonsFileUploadSupport.java, +import java.nio.charset.Charset;, +import org.springframework.http.MediaType;, +				String partEncoding = determineEncoding(fileItem.getContentType(), encoding);, +				if (partEncoding != null) {, +						value = fileItem.getString(partEncoding);, +									"' with encoding '" + partEncoding + "': using platform default");, +	private String determineEncoding(String contentTypeHeader, String defaultEncoding) {, +		if (!StringUtils.hasText(contentTypeHeader)) {, +			return defaultEncoding;, +		}, +		MediaType contentType = MediaType.parseMediaType(contentTypeHeader);, +		Charset charset = contentType.getCharSet();, +		return charset != null ? charset.name() : defaultEncoding;, +	}, +, +++ b/org.springframework.web/src/test/java/org/springframework/http/MediaTypeTests.java, +import java.nio.charset.Charset;, +	public void parseCharset() throws Exception {, +		String s = "text/html; charset=iso-8859-1";, +		MediaType mediaType = MediaType.parseMediaType(s);, +		assertEquals("Invalid type", "text", mediaType.getType());, +		assertEquals("Invalid subtype", "html", mediaType.getSubtype());, +		assertEquals("Invalid charset", Charset.forName("ISO-8859-1"), mediaType.getCharSet());, +	}, +, +	@Test, +++ b/org.springframework.web/src/test/java/org/springframework/web/multipart/commons/CommonsMultipartResolverTests.java, +					MockFileItem fileItem4 = new MockFileItem("field4", "text/html; charset=iso-8859-1", null, "value4");]