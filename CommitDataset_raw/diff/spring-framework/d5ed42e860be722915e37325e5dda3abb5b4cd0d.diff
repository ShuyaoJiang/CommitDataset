[+++ b/spring-framework-reference/src/validation.xml, +		<section id="validation.beanvalidation">, +			<title>Spring 3 Validation</title>, +			<para>, +				Spring 3 introduces several enhancements to its validation support., +				First, the JSR-303 Bean Validation API is now fully supported., +				Second, when used programatically, Spring's DataBinder can now validate objects as well as bind to them., +				Third, Spring MVC now has support for declaratively validating @Controller inputs., +			</para>, +			<secton id="validation.beanvalidation.overview">, +				<title>Overview of the Bean Validation API (JSR-303)</title>, +				<para>, +					The Bean Validation API (JSR-303) standardizes validation constraint declaration and metadata for the Java platform., +					Using this API, you annotate domain model properties with declarative validation constraints and the runtime enforces them., +					There are a number of built-in constraints you can can take advantage of., +					You may also define your own custom constraints., +				</para>, +				<para>, +					To illustrate, consider a simple Person model with two properties:, +				</para>, +				<programlisting language="java"><![CDATA[, +public class Person {, +    private String name;, +    private int age;, +}]]>, +				</programlisting>, +				<para>, +					JSR-303 allows you to define declarative validation constraints against such properties:, +				</para>, +				<programlisting language="java"><![CDATA[, +public class Person {, +, +    @NotNull, +    @Max(64), +    private String name;, +, +    @Min(0), +    private int age;, +}]]>, +				</programlisting>, +				<para>, +					When this object is processed by a JSR-303 Validator, these constraints will be validated., +				</para>, +				<para>, +					For general information on JSR-303, see the <ulink url="http://jcp.org/en/jsr/detail?id=303">Bean Validation Specification</ulink>., +					For information on the specific capabilities of the default reference implementation, see the <ulink url="https://www.hibernate.org/412.html">Hibernate Validator</ulink> documentation., +					For how to setup a JSR-303 implementation as a Spring bean, keep reading., +				</para>, +			</section>, +			<secton id="validation.beanvalidation.spring">, +				<title>Configuring a Bean Validation Implementation</title>, +				<para>, +					Spring provides full support for the JSR-303 Bean Validation API., +					This includes convenient support for bootstrapping a JSR-303 implementation as a Spring bean., +					This allows a <code>javax.validation.Validator</code> to be injected wherever validation is needed., +				</para>, +				<para>, +					Use the LocalValidatorFactoryBean to configure a default JSR-303 Validator as a Spring bean:					, +				</para>, +				<programlisting language="xml"><![CDATA[, +<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />, +}]]>, +				</programlisting>, +				<para>, +					The basic configuration above will trigger JSR-303 to initialize using its default bootstrap mechanism., +					The JSR-303 provider, such as Hibernate Validator, will be detected in your classpath automatically., +				</para>, +				<section id="validation.beanvalidation.spring.inject">, +					<title>Injecting a Validator</title>, +					<para>, +						LocalValidatorFactoryBean implements <code>javax.validation.Validator</code> as well as <code>org.springframework.validation.Validator</code>., +						Once created, you may inject a reference to either of these interfaces to other beans that need to invoke JSR-303 validation logic., +					</para>, +					<para>, +						Inject a reference to <code>javax.validation.Validator</code> if you want to work with the JSR-303 API directly:, +					</para>, +					<programlisting language="java"><![CDATA[, +import javax.validation.Validator;, +, +@Service, +public class MyService {, +, +    @Autowired, +    private Validator validator;, +}]]>, +					</programlisting>, +					<para>, +						Inject a reference to <code>org.springframework.validation.Validator</code> if you prefer to work with the familiar Spring Validation API:, +					</para>, +					<programlisting language="java"><![CDATA[, +import org.springframework.validation.Validator;, +, +    @Service, +    public class MyService {, +, +    @Autowired, +    private Validator validator;, +}]]>, +					</programlisting>, +				</section>]