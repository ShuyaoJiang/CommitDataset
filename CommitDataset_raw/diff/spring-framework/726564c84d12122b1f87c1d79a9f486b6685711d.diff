[+++ b/org.springframework.orm/src/test/java/org/springframework/test/ConditionalTestCase.java, +			this.logger.info("**** " + getClass().getName() + "." + getName() + " is disabled in this environment: ", +++ b/org.springframework.orm/src/test/java/org/springframework/test/ConditionalTestCase.java, +			this.logger.info("**** " + getClass().getName() + "." + getName() + " is disabled in this environment: ", +++ b/org.springframework.orm/src/test/java/org/springframework/test/annotation/AbstractAnnotationAwareTransactionalTests.java, + * @deprecated as of Spring 3.0, in favor of using the listener-based test context framework, + * ({@link org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests}), +			this.logger.info("**** " + getClass().getName() + "." + getName() + " is disabled in this environment: ", +++ b/org.springframework.orm/src/test/java/org/springframework/test/ConditionalTestCase.java, +			this.logger.info("**** " + getClass().getName() + "." + getName() + " is disabled in this environment: ", +++ b/org.springframework.orm/src/test/java/org/springframework/test/annotation/AbstractAnnotationAwareTransactionalTests.java, + * @deprecated as of Spring 3.0, in favor of using the listener-based test context framework, + * ({@link org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests}), +			this.logger.info("**** " + getClass().getName() + "." + getName() + " is disabled in this environment: ", +++ b/org.springframework.orm/src/test/java/org/springframework/test/jpa/AbstractJpaTests.java, + * @deprecated as of Spring 3.0, in favor of using the listener-based test context framework, + * ({@link org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests}), +	@SuppressWarnings({ "rawtypes", "unchecked" }), +		, +		// getName will return the name of the method being run., +		if (isDisabledInThisEnvironment(getName())) {, +			// Let superclass log that we didn't run the test., +			super.runBare();, +			return;, +		}, +, +		final Method testMethod = getTestMethod();, +, +		if (isDisabledInThisEnvironment(testMethod)) {, +			recordDisabled();, +			this.logger.info("**** " + getClass().getName() + "." + getName() + " is disabled in this environment: ", +					+ "Total disabled tests=" + getDisabledTestCount());, +			return;, +		}, +		, +		@SuppressWarnings("unused"), +		@SuppressWarnings("unused"), +++ b/org.springframework.orm/src/test/java/org/springframework/test/ConditionalTestCase.java, +			this.logger.info("**** " + getClass().getName() + "." + getName() + " is disabled in this environment: ", +++ b/org.springframework.orm/src/test/java/org/springframework/test/annotation/AbstractAnnotationAwareTransactionalTests.java, + * @deprecated as of Spring 3.0, in favor of using the listener-based test context framework, + * ({@link org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests}), +			this.logger.info("**** " + getClass().getName() + "." + getName() + " is disabled in this environment: ", +++ b/org.springframework.orm/src/test/java/org/springframework/test/jpa/AbstractJpaTests.java, + * @deprecated as of Spring 3.0, in favor of using the listener-based test context framework, + * ({@link org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests}), +	@SuppressWarnings({ "rawtypes", "unchecked" }), +		, +		// getName will return the name of the method being run., +		if (isDisabledInThisEnvironment(getName())) {, +			// Let superclass log that we didn't run the test., +			super.runBare();, +			return;, +		}, +, +		final Method testMethod = getTestMethod();, +, +		if (isDisabledInThisEnvironment(testMethod)) {, +			recordDisabled();, +			this.logger.info("**** " + getClass().getName() + "." + getName() + " is disabled in this environment: ", +					+ "Total disabled tests=" + getDisabledTestCount());, +			return;, +		}, +		, +		@SuppressWarnings("unused"), +		@SuppressWarnings("unused"), +++ b/org.springframework.test/src/main/java/org/springframework/test/ConditionalTestCase.java, +			this.logger.info("**** " + getClass().getName() + "." + getName() + " is disabled in this environment: ", +++ b/org.springframework.orm/src/test/java/org/springframework/test/ConditionalTestCase.java, +			this.logger.info("**** " + getClass().getName() + "." + getName() + " is disabled in this environment: ", +++ b/org.springframework.orm/src/test/java/org/springframework/test/annotation/AbstractAnnotationAwareTransactionalTests.java, + * @deprecated as of Spring 3.0, in favor of using the listener-based test context framework, + * ({@link org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests}), +			this.logger.info("**** " + getClass().getName() + "." + getName() + " is disabled in this environment: ", +++ b/org.springframework.orm/src/test/java/org/springframework/test/jpa/AbstractJpaTests.java, + * @deprecated as of Spring 3.0, in favor of using the listener-based test context framework, + * ({@link org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests}), +	@SuppressWarnings({ "rawtypes", "unchecked" }), +		, +		// getName will return the name of the method being run., +		if (isDisabledInThisEnvironment(getName())) {, +			// Let superclass log that we didn't run the test., +			super.runBare();, +			return;, +		}, +, +		final Method testMethod = getTestMethod();, +, +		if (isDisabledInThisEnvironment(testMethod)) {, +			recordDisabled();, +			this.logger.info("**** " + getClass().getName() + "." + getName() + " is disabled in this environment: ", +					+ "Total disabled tests=" + getDisabledTestCount());, +			return;, +		}, +		, +		@SuppressWarnings("unused"), +		@SuppressWarnings("unused"), +++ b/org.springframework.test/src/main/java/org/springframework/test/ConditionalTestCase.java, +			this.logger.info("**** " + getClass().getName() + "." + getName() + " is disabled in this environment: ", +++ b/org.springframework.test/src/main/java/org/springframework/test/annotation/AbstractAnnotationAwareTransactionalTests.java]