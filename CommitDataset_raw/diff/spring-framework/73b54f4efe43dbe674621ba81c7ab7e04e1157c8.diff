[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, +			String contentType = candidateView.getContentType();, +			if (StringUtils.hasText(contentType)) {, +				MediaType viewMediaType = MediaType.parseMediaType(contentType);, +		}, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.java, +			String contentType = candidateView.getContentType();, +			if (StringUtils.hasText(contentType)) {, +				MediaType viewMediaType = MediaType.parseMediaType(contentType);, +		}, +++ b/org.springframework.web.servlet/src/test/java/org/springframework/web/servlet/view/ContentNegotiatingViewResolverTests.java, +	@Test, +	public void resolveViewContentTypeNull() throws Exception {, +		MockHttpServletRequest request = new MockHttpServletRequest("GET", "/test");, +		request.addHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");, +		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request));, +, +		ViewResolver viewResolverMock = createMock(ViewResolver.class);, +		viewResolver.setViewResolvers(Collections.singletonList(viewResolverMock));, +, +		View viewMock = createMock("application_xml", View.class);, +, +		String viewName = "view";, +		Locale locale = Locale.ENGLISH;, +, +		expect(viewResolverMock.resolveViewName(viewName, locale)).andReturn(viewMock);, +		expect(viewMock.getContentType()).andReturn(null);, +, +		replay(viewResolverMock, viewMock);, +, +		View result = viewResolver.resolveViewName(viewName, locale);, +		assertNull("Invalid view", result);, +, +		verify(viewResolverMock, viewMock);, +	}, +]