[+++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/AbstractXhrTransport.java, + * Copyright 2002-2015 the original author or authors., +import java.util.Collections;, +				Collections.singletonList(TransportType.XHR) :, +	// Transport methods, +	// InfoReceiver methods, +, +	@Override, +	public String executeInfoRequest(URI infoUrl) {, +		if (logger.isDebugEnabled()) {, +			logger.debug("Executing SockJS Info request, url=" + infoUrl);, +		}, +		ResponseEntity<String> response = executeInfoRequestInternal(infoUrl);, +		if (response.getStatusCode() != HttpStatus.OK) {, +			if (logger.isErrorEnabled()) {, +				logger.error("SockJS Info request (url=" + infoUrl + ") failed: " + response);, +			}, +			throw new HttpServerErrorException(response.getStatusCode());, +		}, +		if (logger.isTraceEnabled()) {, +			logger.trace("SockJS Info request (url=" + infoUrl + ") response: " + response);, +		}, +		return response.getBody();, +	}, +, +	protected abstract ResponseEntity<String> executeInfoRequestInternal(URI infoUrl);, +, +	// XhrTransport methods, +, +	@Override, +	public void executeSendRequest(URI url, TextMessage message) {, +		if (logger.isTraceEnabled()) {, +			logger.trace("Starting XHR send, url=" + url);, +		}, +		ResponseEntity<String> response = executeSendRequestInternal(url, this.xhrSendRequestHeaders, message);, +		if (response.getStatusCode() != HttpStatus.NO_CONTENT) {, +			if (logger.isErrorEnabled()) {, +				logger.error("XHR send request (url=" + url + ") failed: " + response);, +			}, +			throw new HttpServerErrorException(response.getStatusCode());, +		}, +		if (logger.isTraceEnabled()) {, +			logger.trace("XHR send request (url=" + url + ") response: " + response);, +		}, +	}, +, +	protected abstract ResponseEntity<String> executeSendRequestInternal(URI url, HttpHeaders headers, TextMessage message);, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/AbstractXhrTransport.java, + * Copyright 2002-2015 the original author or authors., +import java.util.Collections;, +				Collections.singletonList(TransportType.XHR) :, +	// Transport methods, +	// InfoReceiver methods, +, +	@Override, +	public String executeInfoRequest(URI infoUrl) {, +		if (logger.isDebugEnabled()) {, +			logger.debug("Executing SockJS Info request, url=" + infoUrl);, +		}, +		ResponseEntity<String> response = executeInfoRequestInternal(infoUrl);, +		if (response.getStatusCode() != HttpStatus.OK) {, +			if (logger.isErrorEnabled()) {, +				logger.error("SockJS Info request (url=" + infoUrl + ") failed: " + response);, +			}, +			throw new HttpServerErrorException(response.getStatusCode());, +		}, +		if (logger.isTraceEnabled()) {, +			logger.trace("SockJS Info request (url=" + infoUrl + ") response: " + response);, +		}, +		return response.getBody();, +	}, +, +	protected abstract ResponseEntity<String> executeInfoRequestInternal(URI infoUrl);, +, +	// XhrTransport methods, +, +	@Override, +	public void executeSendRequest(URI url, TextMessage message) {, +		if (logger.isTraceEnabled()) {, +			logger.trace("Starting XHR send, url=" + url);, +		}, +		ResponseEntity<String> response = executeSendRequestInternal(url, this.xhrSendRequestHeaders, message);, +		if (response.getStatusCode() != HttpStatus.NO_CONTENT) {, +			if (logger.isErrorEnabled()) {, +				logger.error("XHR send request (url=" + url + ") failed: " + response);, +			}, +			throw new HttpServerErrorException(response.getStatusCode());, +		}, +		if (logger.isTraceEnabled()) {, +			logger.trace("XHR send request (url=" + url + ") response: " + response);, +		}, +	}, +, +	protected abstract ResponseEntity<String> executeSendRequestInternal(URI url, HttpHeaders headers, TextMessage message);, +, +++ b/spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/InfoReceiver.java, +/*, + * Copyright 2002-2015 the original author or authors., + *]