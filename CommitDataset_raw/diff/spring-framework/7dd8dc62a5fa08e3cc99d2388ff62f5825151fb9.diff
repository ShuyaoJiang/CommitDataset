[+++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +		else {, +			SendTo sendTo = (SendTo) annotation;  // possibly null, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +		else {, +			SendTo sendTo = (SendTo) annotation;  // possibly null, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandlerTests.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +		else {, +			SendTo sendTo = (SendTo) annotation;  // possibly null, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandlerTests.java, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandlerTests.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +		else {, +			SendTo sendTo = (SendTo) annotation;  // possibly null, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandlerTests.java, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandlerTests.java, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/user/UserDestinationMessageHandlerTests.java, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +		else {, +			SendTo sendTo = (SendTo) annotation;  // possibly null, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandlerTests.java, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandlerTests.java, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/user/UserDestinationMessageHandlerTests.java, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.java, +						HttpInputMessage msgToUse =, +						body = (genericConverter != null ? genericConverter.read(targetType, contextClass, msgToUse) :, +								((HttpMessageConverter<T>) converter).read(targetClass, msgToUse));, +						body = getAdvice().afterBodyRead(body, msgToUse, parameter, targetType, converterType);, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +		else {, +			SendTo sendTo = (SendTo) annotation;  // possibly null, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandlerTests.java, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandlerTests.java, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/user/UserDestinationMessageHandlerTests.java, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.java, +						HttpInputMessage msgToUse =, +						body = (genericConverter != null ? genericConverter.read(targetType, contextClass, msgToUse) :, +								((HttpMessageConverter<T>) converter).read(targetClass, msgToUse));, +						body = getAdvice().afterBodyRead(body, msgToUse, parameter, targetType, converterType);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +, +	@SuppressWarnings({"rawtypes", "unchecked"}), +			for (HttpMessageConverter<?> converter : this.messageConverters) {, +				GenericHttpMessageConverter genericConverter =, +						(converter instanceof GenericHttpMessageConverter ? (GenericHttpMessageConverter<?>) converter : null);, +				if (genericConverter != null ?, +						((GenericHttpMessageConverter) converter).canWrite(declaredType, valueType, selectedMediaType) :, +						converter.canWrite(valueType, selectedMediaType)) {, +							(Class<? extends HttpMessageConverter<?>>) converter.getClass(),, +						if (genericConverter != null) {, +							genericConverter.write(outputValue, declaredType, selectedMediaType, outputMessage);, +						}, +						else {, +							((HttpMessageConverter) converter).write(outputValue, selectedMediaType, outputMessage);, +						}, +									"\" using [" + converter + "]");, +	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass,, +			@Nullable Type declaredType) {, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +		else {, +			SendTo sendTo = (SendTo) annotation;  // possibly null, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandlerTests.java, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandlerTests.java, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/user/UserDestinationMessageHandlerTests.java, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.java, +						HttpInputMessage msgToUse =, +						body = (genericConverter != null ? genericConverter.read(targetType, contextClass, msgToUse) :, +								((HttpMessageConverter<T>) converter).read(targetClass, msgToUse));, +						body = getAdvice().afterBodyRead(body, msgToUse, parameter, targetType, converterType);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java, +, +	@SuppressWarnings({"rawtypes", "unchecked"}), +			for (HttpMessageConverter<?> converter : this.messageConverters) {, +				GenericHttpMessageConverter genericConverter =, +						(converter instanceof GenericHttpMessageConverter ? (GenericHttpMessageConverter<?>) converter : null);, +				if (genericConverter != null ?, +						((GenericHttpMessageConverter) converter).canWrite(declaredType, valueType, selectedMediaType) :, +						converter.canWrite(valueType, selectedMediaType)) {, +							(Class<? extends HttpMessageConverter<?>>) converter.getClass(),, +						if (genericConverter != null) {, +							genericConverter.write(outputValue, declaredType, selectedMediaType, outputMessage);, +						}, +						else {, +							((HttpMessageConverter) converter).write(outputValue, selectedMediaType, outputMessage);, +						}, +									"\" using [" + converter + "]");, +	protected List<MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass,, +			@Nullable Type declaredType) {, +, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java, +			@Nullable List<Object> requestResponseBodyAdvice) {, +			@Nullable ContentNegotiationManager manager, @Nullable List<Object> requestResponseBodyAdvice) {, +++ b/spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandler.java, +		else {, +			SendTo sendTo = (SendTo) annotation;  // possibly null, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/annotation/support/SendToMethodReturnValueHandlerTests.java, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/annotation/support/SimpAnnotationMethodMessageHandlerTests.java, +++ b/spring-messaging/src/test/java/org/springframework/messaging/simp/user/UserDestinationMessageHandlerTests.java]