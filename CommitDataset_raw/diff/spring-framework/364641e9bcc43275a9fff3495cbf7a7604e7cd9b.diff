[+++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, + * Copyright 2002-2009 the original author or authors., +	Class<?> getType(String name) throws NoSuchBeanDefinitionException;, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, + * Copyright 2002-2009 the original author or authors., +	Class<?> getType(String name) throws NoSuchBeanDefinitionException;, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +public class QualifierAnnotationAutowireCandidateResolver implements AutowireCandidateResolver, BeanFactoryAware {, +	private BeanFactory beanFactory;, +, +	public void setBeanFactory(BeanFactory beanFactory) {, +		this.beanFactory = beanFactory;, +	}, +, +	 * attribute must not have been set to 'false'. Also, if an annotation on, +			if (targetAnnotation == null) {, +				Class<?> beanType = null;, +				if (this.beanFactory != null) {, +					beanType = this.beanFactory.getType(bdHolder.getBeanName());, +				}, +				else if (bd.hasBeanClass()) {, +					beanType = bd.getBeanClass();, +				}, +				if (beanType != null) {, +					targetAnnotation = ClassUtils.getUserClass(beanType).getAnnotation(type);, +				}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, + * Copyright 2002-2009 the original author or authors., +	Class<?> getType(String name) throws NoSuchBeanDefinitionException;, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +public class QualifierAnnotationAutowireCandidateResolver implements AutowireCandidateResolver, BeanFactoryAware {, +	private BeanFactory beanFactory;, +, +	public void setBeanFactory(BeanFactory beanFactory) {, +		this.beanFactory = beanFactory;, +	}, +, +	 * attribute must not have been set to 'false'. Also, if an annotation on, +			if (targetAnnotation == null) {, +				Class<?> beanType = null;, +				if (this.beanFactory != null) {, +					beanType = this.beanFactory.getType(bdHolder.getBeanName());, +				}, +				else if (bd.hasBeanClass()) {, +					beanType = bd.getBeanClass();, +				}, +				if (beanType != null) {, +					targetAnnotation = ClassUtils.getUserClass(beanType).getAnnotation(type);, +				}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +	public Class<?> getType(String name) throws NoSuchBeanDefinitionException {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, + * Copyright 2002-2009 the original author or authors., +	Class<?> getType(String name) throws NoSuchBeanDefinitionException;, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +public class QualifierAnnotationAutowireCandidateResolver implements AutowireCandidateResolver, BeanFactoryAware {, +	private BeanFactory beanFactory;, +, +	public void setBeanFactory(BeanFactory beanFactory) {, +		this.beanFactory = beanFactory;, +	}, +, +	 * attribute must not have been set to 'false'. Also, if an annotation on, +			if (targetAnnotation == null) {, +				Class<?> beanType = null;, +				if (this.beanFactory != null) {, +					beanType = this.beanFactory.getType(bdHolder.getBeanName());, +				}, +				else if (bd.hasBeanClass()) {, +					beanType = bd.getBeanClass();, +				}, +				if (beanType != null) {, +					targetAnnotation = ClassUtils.getUserClass(beanType).getAnnotation(type);, +				}, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +	public Class<?> getType(String name) throws NoSuchBeanDefinitionException {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionValueResolver.java, +				Class<?> resolvedTargetType = resolveTargetType(typedStringValue);, +	protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException {, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, + * Copyright 2002-2009 the original author or authors., +	Class<?> getType(String name) throws NoSuchBeanDefinitionException;, +++ b/org.springframework.beans/src/main/java/org/springframework/beans/factory/annotation/QualifierAnnotationAutowireCandidateResolver.java, +import org.springframework.beans.factory.BeanFactory;, +import org.springframework.beans.factory.BeanFactoryAware;, +public class QualifierAnnotationAutowireCandidateResolver implements AutowireCandidateResolver, BeanFactoryAware {, +	private BeanFactory beanFactory;, +, +	public void setBeanFactory(BeanFactory beanFactory) {, +		this.beanFactory = beanFactory;, +	}, +, +	 * attribute must not have been set to 'false'. Also, if an annotation on, +			if (targetAnnotation == null) {]