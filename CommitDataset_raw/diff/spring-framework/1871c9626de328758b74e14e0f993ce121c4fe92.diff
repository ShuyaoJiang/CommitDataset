[+++ b/src/docs/asciidoc/kotlin.adoc, +which allows writing concise and elegant code while providing a very good, +https://kotlinlang.org/docs/reference/java-interop.html[interoperability] with, +existing libraries written in Java., +Spring + Kotlin applications almost as if the Spring Framework was a native Kotlin framework., +to be present on the classpath. They are provided by default if one bootstraps a Kotlin project on, +Framework Kotlin APIs leverage regular Java APIs and are additionally enhanced by a few Kotlin specific APIs, +available out of the box within Spring Framework 5 artifacts., +and documents all the Kotlin extensions and DSLs available., +Keep in mind that Kotlin extensions need to be imported to be used. This means, +for example that the `GenericApplicationContext.registerBean` Kotlin extension, +will only be available if `import org.springframework.context.support.registerBean` is imported., +That said, similar to static imports, an IDE should automatically suggest the import in most cases., +This allows for a better Kotlin API `RestTemplate`, the new `WebClient` from Spring, +WebFlux and for various other APIs., +Other libraries like Reactor and Spring Data also provide Kotlin extensions, +for their APIs, thus giving a better Kotlin development experience overall., +To retrieve a list of `Foo` objects in Java, one would normally write:, +Whilst with Kotlin and Spring Framework extensions, one is able to write:, +As in Java, `users` in Kotlin is strongly typed, but Kotlin's clever type inference allows, +for a shorter syntax., +which cleanly deals with `null` values at compile time rather than bumping into the famous, +`NullPointerException` at runtime. This makes applications safer through nullability, +declarations and expressing "value or no value" semantics without paying the cost of wrappers like `Optional`., +Although Java does not allow one to express null-safety in its type-system, Spring Framework now, +annotations (a dormant JSR but supported by tools like IDEA, Findbugs, etc.), +On the Kotlin side - as of https://blog.jetbrains.com/kotlin/2017/08/kotlin-1-1-4-is-out/[Kotlin 1.1.4 release] -, +in order to provide null-safety for the whole Spring Framework API. That means, +one should never experience a `NullPointerException` when using Spring Framework and Kotlin because, +For now, one needs to use a `-Xjsr305-annotations=enable` flag (specified via the, +Other libraries like Reactor and Spring Data leverage these annotations to provide, +which allows finding interface method parameter names without requiring the Java 8 `-parameters`, +compiler flag enabled during compliation., +for serializing / deserializing JSON data is automatically registered when, +found in the classpath and a warning message will be logged if Jackson and Kotlin are, +detected without the Jackson Kotlin module present., +to determine if a HTTP parameter is required without having to explicitly, +define the `required` attribute.  That means `@RequestParam name: String?` will be treated, +as not required and conversely `@RequestParam name: String` as being required., +This feature is also supported on the Spring Messaging `@Header` annotation., +to determine if a bean is required or not. `@Autowired lateinit var foo: Foo` implies that a bean, +This mechanism is very efficient as it does not require any reflection or CGLIB proxies., +In Java, one may for example write:, +Whilst in Kotlin with reified type parameters and `GenericApplicationContext`, +Kotlin extensions one can instead simply write:, +It declares an `ApplicationContextInitializer` via a clean declarative API, +which enables one to deal with profiles and `Environment` for customizing, +how beans are registered., +This `beans()` function can then be used to register beans on the application context., +This DSL is programmatic, thus it allows custom registration logic of beans, +via an `if` expression, a `for` loop or any other Kotlin constructs., +but one can experimentally use functional bean definitions via Spring Boot's `ApplicationContextInitializer` support,, +for more details and up-to-date information., +that allows one to leverage the <<reactive-web#webflux-fn,WebFlux functional, +API>> for writing clean and idiomatic Kotlin code:, +This DSL is programmatic, thus it allows custom registration logic of beans, +via an `if` expression, a `for` loop or any other Kotlin constructs. That can be useful when routes need to be registered, +depending on dynamic data (for example, from a database)., +to render templates using script engines that supports, +https://www.jcp.org/en/jsr/detail?id=223[JSR-223]., +Spring Framework 5 goes even further by extending this feature to WebFlux and supporting, +Kotlin provides similar support and allows the rendering of Kotlin based templates, see, +https://github.com/Kotlin/kotlinx.html[kotlinx.html] DSL or simply using Kotlin multiline `String` with interpolation., +This can allow one to write Kotlin templates with full autocompletion and, +refactoring support in a supported IDE:, +This section provides a focus on some specific hints and recommendations worth, +knowing when developing Spring projects in Kotlin., +inherit from this class. This also applies to member functions, in that they need to be marked as `open` to, +be overridden., +Whilst Kotlin's JVM-friendly design is generally frictionless with Spring,, +this specific Kotlin feature can prevent the application from starting, if this fact is not taken in, +consideration. This is because Spring beans are normally proxified with CGLIB, +- such as `@Configuration` classes - which need to be inherited at runtime for technical reasons., +Before Kotlin 1.0.6, one needed to add an `open` keyword on each class and member, +functions of Spring beans proxified with CGLIB such as `@Configuration` classes., +plugin that automatically opens classes and their member functions for types, +annotated or meta-annotated with one of the following annotations:, +Meta-annotations support means that types annotated with `@Configuration`, `@Controller`,, +Our recommendation is to try and favor constructor injection with `val` read-only (and non-nullable when possible), +As of Spring Framework 4.3, classes with a single constructor have its parameters, +in the example shown above., +If one really needs to use field injection, use the `lateinit var` construct,, +i.e.,, +In Java, one can inject configuration properties using annotations like `@Value("${property}")`,, +Therefore, if one wishes to use the `@Value` annotation in Kotlin, the `$`, +character will need to be escaped by writing `@Value("\${property}")`., +As an alternative, it is possible to customize the properties placeholder prefix by declaring, +the following configuration beans:, +Existing code (like Spring Boot actuators or `@LocalServerPort`) that, +uses the `${...}` syntax, can be customised with configuration beans, like, +this:, +If Spring Boot is being used, then, +instead of `@Value` annotations can be used, but currently this only works with nullable `var`, +properties (which is far from ideal) since immutable classes initialized by, +constructors are not yet supported., +extensively used in Spring - behave differently. As explained in https://kotlinlang.org/docs/reference/annotations.html[Kotlin documentation], +unlike other attributes, the `value` attribute name can be omitted and when it is an array, +To understand what that means, let's take `@RequestMapping`, which is one, +of the most widely used Spring annotations as an example. This Java annotation is declared as:, +The typical use case for `@RequestMapping` is to map a handler method to a specific path]