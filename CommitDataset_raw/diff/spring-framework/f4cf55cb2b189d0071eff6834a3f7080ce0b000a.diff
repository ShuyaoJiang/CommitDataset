[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultHandlerStrategiesBuilder.java, +import org.springframework.web.server.WebExceptionHandler;, +import org.springframework.web.server.WebFilter;, +import org.springframework.web.server.handler.ResponseStatusExceptionHandler;, +	private final List<WebFilter> webFilters = new ArrayList<>();, +, +	private final List<WebExceptionHandler> exceptionHandlers = new ArrayList<>();, +		exceptionHandler(new ResponseStatusExceptionHandler());, +	public HandlerStrategies.Builder webFilter(WebFilter filter) {, +		Assert.notNull(filter, "'filter' must not be null");, +		this.webFilters.add(filter);, +		return this;, +	}, +, +	@Override, +	public HandlerStrategies.Builder exceptionHandler(WebExceptionHandler exceptionHandler) {, +		Assert.notNull(exceptionHandler, "'exceptionHandler' must not be null");, +		this.exceptionHandlers.add(exceptionHandler);, +		return this;, +	}, +, +	@Override, +				this.codecConfigurer.getWriters(), this.viewResolvers, this.localeResolver,, +				this.webFilters, this.exceptionHandlers);, +		private final List<WebFilter> webFilters;, +, +		private final List<WebExceptionHandler> exceptionHandlers;, +, +				Function<ServerRequest, Optional<Locale>> localeResolver,, +				List<WebFilter> webFilters,, +				List<WebExceptionHandler> exceptionHandlers) {, +			this.webFilters = unmodifiableCopy(webFilters);, +			this.exceptionHandlers = unmodifiableCopy(exceptionHandlers);, +, +		@Override, +		public Supplier<Stream<WebFilter>> webFilters() {, +			return this.webFilters::stream;, +		}, +, +		@Override, +		public Supplier<Stream<WebExceptionHandler>> exceptionHandlers() {, +			return this.exceptionHandlers::stream;, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultHandlerStrategiesBuilder.java, +import org.springframework.web.server.WebExceptionHandler;, +import org.springframework.web.server.WebFilter;, +import org.springframework.web.server.handler.ResponseStatusExceptionHandler;, +	private final List<WebFilter> webFilters = new ArrayList<>();, +, +	private final List<WebExceptionHandler> exceptionHandlers = new ArrayList<>();, +		exceptionHandler(new ResponseStatusExceptionHandler());, +	public HandlerStrategies.Builder webFilter(WebFilter filter) {, +		Assert.notNull(filter, "'filter' must not be null");, +		this.webFilters.add(filter);, +		return this;, +	}, +, +	@Override, +	public HandlerStrategies.Builder exceptionHandler(WebExceptionHandler exceptionHandler) {, +		Assert.notNull(exceptionHandler, "'exceptionHandler' must not be null");, +		this.exceptionHandlers.add(exceptionHandler);, +		return this;, +	}, +, +	@Override, +				this.codecConfigurer.getWriters(), this.viewResolvers, this.localeResolver,, +				this.webFilters, this.exceptionHandlers);, +		private final List<WebFilter> webFilters;, +, +		private final List<WebExceptionHandler> exceptionHandlers;, +, +				Function<ServerRequest, Optional<Locale>> localeResolver,, +				List<WebFilter> webFilters,, +				List<WebExceptionHandler> exceptionHandlers) {, +			this.webFilters = unmodifiableCopy(webFilters);, +			this.exceptionHandlers = unmodifiableCopy(exceptionHandlers);, +, +		@Override, +		public Supplier<Stream<WebFilter>> webFilters() {, +			return this.webFilters::stream;, +		}, +, +		@Override, +		public Supplier<Stream<WebExceptionHandler>> exceptionHandlers() {, +			return this.exceptionHandlers::stream;, +		}, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultServerRequest.java, +	private final Supplier<Stream<HttpMessageReader<?>>> messageReaders;, +	DefaultServerRequest(ServerWebExchange exchange,, +			Supplier<Stream<HttpMessageReader<?>>> messageReaders) {, +		this.messageReaders = messageReaders;, +						return DefaultServerRequest.this.messageReaders;, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultHandlerStrategiesBuilder.java, +import org.springframework.web.server.WebExceptionHandler;, +import org.springframework.web.server.WebFilter;, +import org.springframework.web.server.handler.ResponseStatusExceptionHandler;, +	private final List<WebFilter> webFilters = new ArrayList<>();, +, +	private final List<WebExceptionHandler> exceptionHandlers = new ArrayList<>();, +		exceptionHandler(new ResponseStatusExceptionHandler());]