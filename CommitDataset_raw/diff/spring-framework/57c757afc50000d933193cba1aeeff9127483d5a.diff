[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfiguration.java, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfiguration.java, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java, +	public void afterPropertiesSet() {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfiguration.java, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java, +	public void afterPropertiesSet() {, +++ b/spring-framework-reference/src/mvc.xml, +        returns to the client browser as an HTTP redirect., +        All model attributes are considered to be exposed as either URI template variables first, , +        assuming the URL is a URI template such as <code>/account/{number}</code>, , +        or as HTTP query parameters second. By default String and primitive model attributes , +        are eligible to be exposed this way. However, this behavior can be extended by , +        sub-classing RedirectView. Also consider that <code>@PathVariable</code>-annotated , +        method arguments are automatically added to the model, which is convenient when , +        redirecting to the same URL using a different HTTP method. For example:</para>, +        , +      <programlisting language="java">@RequestMapping(value = "/files/{path}", method = RequestMethod.POST), +public String upload(@PathVariable String path, ...) {, +    // ..., +    return "redirect:files/{path};, +}, +, +@RequestMapping(value = "/files/{path}", method = RequestMethod.GET), +public void get(@PathVariable String path, ...) {, +    // ..., +}</programlisting>        , +        view names. The next section discusses this process.</para>, +        such as <literal>redirect:/myapp/some/resource</literal> will, +        <literal>redirect:http://myhost.com/some/arbitrary/path</literal>, +        will redirect to an absolute URL.</para>]