[+++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.java, + * Copyright 2002-2011 the original author or authors., +	private List<String> productsNotSupportingGeneratedKeysColumnNameArray =, +			return schemaNameToUse(getDefaultSchema());, +	/**, +	 * Provide access to default schema for subclasses., +	 */, +	protected String getDefaultSchema() {, +		return userName;, +	}, +				tmd = tableMeta.get(getDefaultSchema());, +				if (tmd == null) {, +				}, +				}, +		@SuppressWarnings("unused"), +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.java, + * Copyright 2002-2011 the original author or authors., +	private List<String> productsNotSupportingGeneratedKeysColumnNameArray =, +			return schemaNameToUse(getDefaultSchema());, +	/**, +	 * Provide access to default schema for subclasses., +	 */, +	protected String getDefaultSchema() {, +		return userName;, +	}, +				tmd = tableMeta.get(getDefaultSchema());, +				if (tmd == null) {, +				}, +				}, +		@SuppressWarnings("unused"), +++ b/org.springframework.jdbc/src/main/java/org/springframework/jdbc/core/metadata/OracleTableMetaDataProvider.java, + * Copyright 2002-2011 the original author or authors., +import java.sql.CallableStatement;, +import java.sql.Types;, + * Supports a feature for including synonyms in the metadata lookup. Also supports lookup of current schema using, + * the sys_context., + *, + * <p>Thanks to Mike Youngstrom and Bruce Campbell for submitting the original suggestion for the Oracle, + * current schema lookup implementation., +	private String defaultSchema;, +, +		lookupDefaultSchema(databaseMetaData);, +	@Override, +	protected String getDefaultSchema() {, +		if (defaultSchema != null) {, +			return defaultSchema;, +		}, +		return super.getDefaultSchema();, +	}, +			Class<?> oracleConClass = getClass().getClassLoader().loadClass("oracle.jdbc.OracleConnection");, +	/*, +	 * Oracle implementation for detecting current schema, +	 * , +	 * @param databaseMetaData, +	 */, +	private void lookupDefaultSchema(DatabaseMetaData databaseMetaData) {, +		try {, +			CallableStatement cstmt = null;, +			try {, +				cstmt = databaseMetaData.getConnection().prepareCall("{? = call sys_context('USERENV', 'CURRENT_SCHEMA')}");, +				cstmt.registerOutParameter(1, Types.VARCHAR);, +				cstmt.execute();, +				this.defaultSchema = cstmt.getString(1);, +			}, +			finally {, +				if (cstmt != null) {, +					cstmt.close();, +				}, +			}, +		} catch (Exception ignore) {}, +	}, +]