[+++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyResolver.java, +			throw new AccessException("Cannot read property of null target");, +++ b/org.springframework.expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyResolver.java, +			throw new AccessException("Cannot read property of null target");, +++ b/org.springframework.expression/src/test/java/org/springframework/expression/spel/SpringEL300Tests.java, +import org.springframework.expression.AccessException;, +import org.springframework.expression.EvaluationContext;, +import org.springframework.expression.PropertyAccessor;, +import org.springframework.expression.spel.support.ReflectivePropertyResolver;, +	public void testNPE_SPR5661() {, +	public void testNPE_SPR5673() throws Exception {, +	public void testAccessingNullPropertyViaReflection_SPR5663() throws AccessException {, +		PropertyAccessor propertyAccessor = new ReflectivePropertyResolver();, +		EvaluationContext context = TestScenarioCreator.getTestEvaluationContext();, +		assertFalse(propertyAccessor.canRead(context, null, "abc"));, +		assertFalse(propertyAccessor.canWrite(context, null, "abc"));, +		try {, +			propertyAccessor.read(context, null, "abc");, +			fail("Should have failed with an AccessException");, +		} catch (AccessException ae) {, +			// success, +		}, +		try {, +			propertyAccessor.write(context, null, "abc","foo");, +			fail("Should have failed with an AccessException");, +		} catch (AccessException ae) {, +			// success, +		}, +	}, +	, +	, +	// ---, +, +			parser.parseExpression(expression,context);, +	private static final ParserContext DOLLARSQUARE_TEMPLATE_PARSER_CONTEXT = new ParserContext() {, +		public String getExpressionPrefix() {, +			return "$[";, +		}, +		public String getExpressionSuffix() {, +			return "]";, +		}, +		public boolean isTemplate() {, +			return true;, +		}, +	};, +	, +]