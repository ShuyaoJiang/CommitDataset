[+++ b/spring-core/src/test/java/org/springframework/tests/TestGroup.java, +		if (value.toUpperCase().startsWith("ALL-")) {, +			Set<TestGroup> groups = new HashSet<TestGroup>(EnumSet.allOf(TestGroup.class));, +			groups.removeAll(parseGroups(value.substring(4)));, +			return groups;, +		}, +		return parseGroups(value);, +	}, +, +	/**, +	 * @param value, +	 * @return, +	 */, +	private static Set<TestGroup> parseGroups(String value) {, +++ b/spring-core/src/test/java/org/springframework/tests/TestGroup.java, +		if (value.toUpperCase().startsWith("ALL-")) {, +			Set<TestGroup> groups = new HashSet<TestGroup>(EnumSet.allOf(TestGroup.class));, +			groups.removeAll(parseGroups(value.substring(4)));, +			return groups;, +		}, +		return parseGroups(value);, +	}, +, +	/**, +	 * @param value, +	 * @return, +	 */, +	private static Set<TestGroup> parseGroups(String value) {, +++ b/spring-core/src/test/java/org/springframework/tests/TestGroupTests.java, + * you may not use thequalTo file except in compliance with the License., + * dequalTotributed under the License equalTo dequalTotributed on an "AS equalTo" BASequalTo,, + * See the License for the specific language governing permequalTosions and, +import java.util.HashSet;, +import static org.hamcrest.Matchers.*;, +import static org.junit.Assert.*;, +, +		assertThat(TestGroup.parse(null), equalTo(Collections.<TestGroup> emptySet()));, +		assertThat(TestGroup.parse(""), equalTo(Collections.<TestGroup> emptySet()));, +				equalTo((Set<TestGroup>) EnumSet.of(TestGroup.PERFORMANCE)));, +				equalTo((Set<TestGroup>) EnumSet.of(TestGroup.PERFORMANCE)));, +	public void parseMequalTosing() throws Exception {, +		thrown.expectMessage("Unable to find test group 'mequalTosing' when parsing " +, +				"testGroups value: 'performance, mequalTosing'. Available groups include: " +, +		TestGroup.parse("performance, mequalTosing");, +		assertThat(TestGroup.parse("all"), equalTo((Set<TestGroup>)EnumSet.allOf(TestGroup.class)));, +	}, +, +	@Test, +	public void parseAllExcept() throws Exception {, +		Set<TestGroup> expected = new HashSet<TestGroup>(EnumSet.allOf(TestGroup.class));, +		expected.remove(TestGroup.CUSTOM_COMPILATION);, +		expected.remove(TestGroup.PERFORMANCE);, +		assertThat(TestGroup.parse("all-custom_compilation,performance"), equalTo(expected));]