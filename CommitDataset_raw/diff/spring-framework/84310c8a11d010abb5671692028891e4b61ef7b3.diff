[+++ b/spring-context/src/main/java/org/springframework/remoting/support/RemoteInvocation.java, + * Copyright 2002-2014 the original author or authors., + * <p>Both {@link RemoteInvocation} and {@link RemoteInvocationResult} are designed, + * for use with standard Java serialization as well as JavaBean-style serialization., + *, +	 * Create a new RemoteInvocation for the given AOP method invocation., +	 * @param methodInvocation the AOP invocation to convert, +	public RemoteInvocation(MethodInvocation methodInvocation) {, +		this.methodName = methodInvocation.getMethod().getName();, +		this.parameterTypes = methodInvocation.getMethod().getParameterTypes();, +		this.arguments = methodInvocation.getArguments();, +	 * Create a new RemoteInvocation for JavaBean-style deserialization, +	 * (e.g. with Jackson)., +	public RemoteInvocation() {, +	 * <p>This setter is intended for JavaBean-style deserialization., +	 * <p>This setter is intended for JavaBean-style deserialization., +	 * <p>This setter is intended for JavaBean-style deserialization., +++ b/spring-context/src/main/java/org/springframework/remoting/support/RemoteInvocation.java, + * Copyright 2002-2014 the original author or authors., + * <p>Both {@link RemoteInvocation} and {@link RemoteInvocationResult} are designed, + * for use with standard Java serialization as well as JavaBean-style serialization., + *, +	 * Create a new RemoteInvocation for the given AOP method invocation., +	 * @param methodInvocation the AOP invocation to convert, +	public RemoteInvocation(MethodInvocation methodInvocation) {, +		this.methodName = methodInvocation.getMethod().getName();, +		this.parameterTypes = methodInvocation.getMethod().getParameterTypes();, +		this.arguments = methodInvocation.getArguments();, +	 * Create a new RemoteInvocation for JavaBean-style deserialization, +	 * (e.g. with Jackson)., +	public RemoteInvocation() {, +	 * <p>This setter is intended for JavaBean-style deserialization., +	 * <p>This setter is intended for JavaBean-style deserialization., +	 * <p>This setter is intended for JavaBean-style deserialization., +++ b/spring-context/src/main/java/org/springframework/remoting/support/RemoteInvocationResult.java, + * Copyright 2002-2014 the original author or authors., + * <p>Both {@link RemoteInvocation} and {@link RemoteInvocationResult} are designed, + * for use with standard Java serialization as well as JavaBean-style serialization., + *, +	/**, +	 * Create a new RemoteInvocationResult for JavaBean-style deserialization, +	 * (e.g. with Jackson)., +	 * @see #setValue, +	 * @see #setException, +	 */, +	public RemoteInvocationResult() {, +	}, +, +, +	/**, +	 * Set the result value returned by a successful invocation of the, +	 * target method, if any., +	 * <p>This setter is intended for JavaBean-style deserialization., +	 * Use {@link #RemoteInvocationResult(Object)} otherwise., +	 * @see #RemoteInvocationResult(), +	 */, +	public void setValue(Object value) {, +		this.value = value;, +	}, +	 * Set the exception thrown by an unsuccessful invocation of the, +	 * target method, if any., +	 * <p>This setter is intended for JavaBean-style deserialization., +	 * Use {@link #RemoteInvocationResult(Throwable)} otherwise., +	 * @see #RemoteInvocationResult(), +	 */, +	public void setException(Throwable exception) {, +		this.exception = exception;, +	}, +, +	/**, +	 * (even if it is {@code null})., +++ b/spring-context/src/main/java/org/springframework/remoting/support/RemoteInvocation.java, + * Copyright 2002-2014 the original author or authors., + * <p>Both {@link RemoteInvocation} and {@link RemoteInvocationResult} are designed, + * for use with standard Java serialization as well as JavaBean-style serialization., + *, +	 * Create a new RemoteInvocation for the given AOP method invocation., +	 * @param methodInvocation the AOP invocation to convert, +	public RemoteInvocation(MethodInvocation methodInvocation) {, +		this.methodName = methodInvocation.getMethod().getName();, +		this.parameterTypes = methodInvocation.getMethod().getParameterTypes();, +		this.arguments = methodInvocation.getArguments();, +	 * Create a new RemoteInvocation for JavaBean-style deserialization, +	 * (e.g. with Jackson)., +	public RemoteInvocation() {, +	 * <p>This setter is intended for JavaBean-style deserialization., +	 * <p>This setter is intended for JavaBean-style deserialization., +	 * <p>This setter is intended for JavaBean-style deserialization., +++ b/spring-context/src/main/java/org/springframework/remoting/support/RemoteInvocationResult.java, + * Copyright 2002-2014 the original author or authors., + * <p>Both {@link RemoteInvocation} and {@link RemoteInvocationResult} are designed, + * for use with standard Java serialization as well as JavaBean-style serialization., + *, +	/**, +	 * Create a new RemoteInvocationResult for JavaBean-style deserialization, +	 * (e.g. with Jackson)., +	 * @see #setValue, +	 * @see #setException, +	 */, +	public RemoteInvocationResult() {]