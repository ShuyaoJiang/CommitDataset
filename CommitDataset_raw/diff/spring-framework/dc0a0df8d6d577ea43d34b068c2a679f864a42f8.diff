[+++ b/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java, + * {@linkplain ReferenceType#WEAK weak} references for both {@code keys} and {@code values}., + * references at any time, so it may appear that an unknown thread is silently removing, + * {@linkplain SoftReference soft entry references}., +	 * Array of segments indexed using the high order bits from the hash., +	 * Create a new {@code ConcurrentReferenceHashMap} instance., +	 * Create a new {@code ConcurrentReferenceHashMap} instance., +	 * Create a new {@code ConcurrentReferenceHashMap} instance., +	 * Create a new {@code ConcurrentReferenceHashMap} instance., +	 * Create a new {@code ConcurrentReferenceHashMap} instance., +	 * Create a new {@code ConcurrentReferenceHashMap} instance., +		Assert.isTrue(initialCapacity >= 0, "InitialCapacity must not be negative");, +	 * Calculate a shift value that can be used to create a power-of-two value between, +	 * @param minimumValue the minimum value, +	protected static int calculateShift(int minimumValue, int maximumValue) {, +		while (value < minimumValue && value < minimumValue) {, +	@SuppressWarnings("serial"), +	 * wrappers around specific Java reference implementations (e.g., {@link SoftReference})., +	 * The types of restructuring that can be performed., +++ b/spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java, + * {@linkplain ReferenceType#WEAK weak} references for both {@code keys} and {@code values}., + * references at any time, so it may appear that an unknown thread is silently removing, + * {@linkplain SoftReference soft entry references}., +	 * Array of segments indexed using the high order bits from the hash., +	 * Create a new {@code ConcurrentReferenceHashMap} instance., +	 * Create a new {@code ConcurrentReferenceHashMap} instance., +	 * Create a new {@code ConcurrentReferenceHashMap} instance., +	 * Create a new {@code ConcurrentReferenceHashMap} instance., +	 * Create a new {@code ConcurrentReferenceHashMap} instance., +	 * Create a new {@code ConcurrentReferenceHashMap} instance., +		Assert.isTrue(initialCapacity >= 0, "InitialCapacity must not be negative");, +	 * Calculate a shift value that can be used to create a power-of-two value between, +	 * @param minimumValue the minimum value, +	protected static int calculateShift(int minimumValue, int maximumValue) {, +		while (value < minimumValue && value < minimumValue) {, +	@SuppressWarnings("serial"), +	 * wrappers around specific Java reference implementations (e.g., {@link SoftReference})., +	 * The types of restructuring that can be performed., +++ b/spring-core/src/test/java/org/springframework/util/ConcurrentReferenceHashMapTests.java, +		this.thrown.expectMessage("InitialCapacity must not be negative");]