[+++ b/src/asciidoc/images/web-reactive-overview.png, +++ b/src/asciidoc/images/web-reactive-overview.png, +++ b/src/asciidoc/web-reactive.adoc, +[[web-reactive]], += Web Reactive Framework, +This section provides basic information on the Spring Web Reactive support in Spring Framework 5., +, +, +[[web-reactive-intro]], +== Introduction, +, +, +[[web-reactive-programming]], +=== Reactive Programming, +, +In plain terms reactive programming is about non-blocking applications that are asynchronous, +and event-driven and require a small number of threads to scale. A key aspect of that, +definition is the concept of backpressure which is a mechanism to ensures producers, +don't overwhelm consumers. For example in a pipeline of reactive components that extends, +from the database to the HTTP server when an HTTP connection slows down the data, +repository slows down as well or stops until capacity frees up., +, +Reactive programming involves a shift from imperative to declarative, async composition, +of logic. This is comparable to how `CompletableFuture` in Java 8 allows declaring, +follow-up actions in lambda expressions to be executed when the future completes., +, +A proper introduction to Reactive programming is beyond scope of this documentation., +For a more extended introduction check the excellent multi-part series, +https://spring.io/blog/2016/06/07/notes-on-reactive-programming-part-i-the-reactive-landscape["Notes on Reactive Programming"], +by Dave Syer., +, +, +[[web-reactive-api]], +=== Spring Web Reactive Types, +, +Spring Framework 5 embraces, +https://github.com/reactive-streams/reactive-streams-jvm#reactive-streams[Reactive Streams], +as the contract for communicating backpressure across async components and, +libraries. Reactive Streams is the result of an industry collaboration and is also, +adopted in Java 9 as `java.util.concurrent.Flow`., +, +For its own reactive support the Spring Framework relies on, +https://projectreactor.io/[Reactor] which implements Reactive Streams and extends, +the Reactive Streams `Publisher` contract with the `Flux` and `Mono` composable API, +types that provide declarative operations on data sequence of `0..N` and `0..1`., +, +The Spring Framework exposes `Flux` and `Mono` in many of its reactive APIs., +At the application level however as always Spring provides choice and fully supports, +the use of RxJava. For more on reactive types check the blog post, +https://spring.io/blog/2016/04/19/understanding-reactive-types["Understanding Reactive Types"], +by Sebastien Deleuze., +, +, +[[web-reactive-feature-overview]], +== Spring Reactive Web Overview, +, +, +[[web-reactive-module]], +=== Spring Web Reactive Module, +, +, +Spring Framework 5 adds a new `spring-web-reactive` module that supports the same, +`@Controller` and `@RestController` programming model as Spring MVC but executed, +on a reactive and non-blocking foundation. The diagram below shows how Spring MVC, +and Spring Web Reactive side by side:, +, +image::images/web-reactive-overview.png[width=720], +, +Spring Web Reactive makes use of the Servlet 3.1 non-blocking I/O API and runs on, +Servlet 3.1 containers and also on other non-blocking runtimes such as Netty and Undertow., +Each runtime is adapted to a set of shared, reactive `ServerHttpRequest` and, +`ServerHttpResponse` abstractions that expose the request and response body, +as `Flux<DataBuffer>` with full backpressure support on the read and the, +write side., +, +The `spring-core` module provides reactive `Encoder` and `Decoder` contracts, +that enable the serialization of a `Flux` of bytes to and from typed objects, +along with some basic implementations., +, +The `spring-web` modules adds JSON and XML implementations for use in reactive, +web applications and also provides support for SSE streaming and zero-copy, +file transfer., +, +The `spring-web-reactive` module defines many of the same contracts as, +Spring MVC such as `HandlerMapping` and `HandlerAdapter` among others., +These reactive counterparts have asynchronous and non-blocking semantics and, +operate on the reactive HTTP request and response abstractions., +, +The end result is a programming model identical to today's Spring MVC but, +supporting reactive types and executing on a reactive, non-blocking foundation., +For example a controller method can declare any of the following as a method argument:, +, +* `@RequestBody Account account` -- the account is deserialized without, +blocking before the controller method is invoked., +* `@RequestBody Mono<Account> account` -- the controller can use the `Mono`, +type to declare the logic execute when the account is deserialized., +* `@RequestBody Single<Account> account` -- same but with RxJava, +* `@RequestBody Flux<Account>` accounts` -- streaming scenario., +* `@RequestBody Observable<Account> accounts` -- streaming with RxJava., +]