[+++ b/spring-websocket/src/main/java/org/springframework/sockjs/AbstractSockJsSession.java, +	 * @param webSocketHandler the recipient of SockJS messages, +	public AbstractSockJsSession(String sessionId, WebSocketHandler<?> webSocketHandler) {, +		Assert.notNull(webSocketHandler, "webSocketHandler is required");, +		this.handler = new WebSocketHandlerInvoker(webSocketHandler).setLogger(logger);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/AbstractSockJsSession.java, +	 * @param webSocketHandler the recipient of SockJS messages, +	public AbstractSockJsSession(String sessionId, WebSocketHandler<?> webSocketHandler) {, +		Assert.notNull(webSocketHandler, "webSocketHandler is required");, +		this.handler = new WebSocketHandlerInvoker(webSocketHandler).setLogger(logger);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionFactory.java, +	 * @param webSocketHandler the underlying {@link WebSocketHandler}, +	S createSession(String sessionId, WebSocketHandler<?> webSocketHandler);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/AbstractSockJsSession.java, +	 * @param webSocketHandler the recipient of SockJS messages, +	public AbstractSockJsSession(String sessionId, WebSocketHandler<?> webSocketHandler) {, +		Assert.notNull(webSocketHandler, "webSocketHandler is required");, +		this.handler = new WebSocketHandlerInvoker(webSocketHandler).setLogger(logger);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionFactory.java, +	 * @param webSocketHandler the underlying {@link WebSocketHandler}, +	S createSession(String sessionId, WebSocketHandler<?> webSocketHandler);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractServerSockJsSession.java, +	public AbstractServerSockJsSession(String sessionId, SockJsConfiguration config, WebSocketHandler<?> handler) {, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/AbstractSockJsSession.java, +	 * @param webSocketHandler the recipient of SockJS messages, +	public AbstractSockJsSession(String sessionId, WebSocketHandler<?> webSocketHandler) {, +		Assert.notNull(webSocketHandler, "webSocketHandler is required");, +		this.handler = new WebSocketHandlerInvoker(webSocketHandler).setLogger(logger);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionFactory.java, +	 * @param webSocketHandler the underlying {@link WebSocketHandler}, +	S createSession(String sessionId, WebSocketHandler<?> webSocketHandler);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractServerSockJsSession.java, +	public AbstractServerSockJsSession(String sessionId, SockJsConfiguration config, WebSocketHandler<?> handler) {, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractSockJsService.java, +			String sockJsPath, WebSocketHandler<?> webSocketHandler) throws IOException, TransportErrorException {, +				handleRawWebSocketRequest(request, response, webSocketHandler);, +			handleTransportRequest(request, response, sessionId, TransportType.fromValue(transport), webSocketHandler);, +	protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,, +			ServerHttpResponse response, WebSocketHandler<?> webSocketHandler) throws IOException;, +			String sessionId, TransportType transportType, WebSocketHandler<?> webSocketHandler), +++ b/spring-websocket/src/main/java/org/springframework/sockjs/AbstractSockJsSession.java, +	 * @param webSocketHandler the recipient of SockJS messages, +	public AbstractSockJsSession(String sessionId, WebSocketHandler<?> webSocketHandler) {, +		Assert.notNull(webSocketHandler, "webSocketHandler is required");, +		this.handler = new WebSocketHandlerInvoker(webSocketHandler).setLogger(logger);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionFactory.java, +	 * @param webSocketHandler the underlying {@link WebSocketHandler}, +	S createSession(String sessionId, WebSocketHandler<?> webSocketHandler);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractServerSockJsSession.java, +	public AbstractServerSockJsSession(String sessionId, SockJsConfiguration config, WebSocketHandler<?> handler) {, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractSockJsService.java, +			String sockJsPath, WebSocketHandler<?> webSocketHandler) throws IOException, TransportErrorException {, +				handleRawWebSocketRequest(request, response, webSocketHandler);, +			handleTransportRequest(request, response, sessionId, TransportType.fromValue(transport), webSocketHandler);, +	protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,, +			ServerHttpResponse response, WebSocketHandler<?> webSocketHandler) throws IOException;, +			String sessionId, TransportType transportType, WebSocketHandler<?> webSocketHandler), +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/SockJsConfiguration.java, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/AbstractSockJsSession.java, +	 * @param webSocketHandler the recipient of SockJS messages, +	public AbstractSockJsSession(String sessionId, WebSocketHandler<?> webSocketHandler) {, +		Assert.notNull(webSocketHandler, "webSocketHandler is required");, +		this.handler = new WebSocketHandlerInvoker(webSocketHandler).setLogger(logger);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionFactory.java, +	 * @param webSocketHandler the underlying {@link WebSocketHandler}, +	S createSession(String sessionId, WebSocketHandler<?> webSocketHandler);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractServerSockJsSession.java, +	public AbstractServerSockJsSession(String sessionId, SockJsConfiguration config, WebSocketHandler<?> handler) {, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractSockJsService.java, +			String sockJsPath, WebSocketHandler<?> webSocketHandler) throws IOException, TransportErrorException {, +				handleRawWebSocketRequest(request, response, webSocketHandler);, +			handleTransportRequest(request, response, sessionId, TransportType.fromValue(transport), webSocketHandler);, +	protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,, +			ServerHttpResponse response, WebSocketHandler<?> webSocketHandler) throws IOException;, +			String sessionId, TransportType transportType, WebSocketHandler<?> webSocketHandler), +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/SockJsConfiguration.java, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/SockJsService.java, +, +	void handleRequest(ServerHttpRequest request, ServerHttpResponse response,, +			String sockJsPath, WebSocketHandler<?> webSocketHandler) throws IOException, TransportErrorException;, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/AbstractSockJsSession.java, +	 * @param webSocketHandler the recipient of SockJS messages, +	public AbstractSockJsSession(String sessionId, WebSocketHandler<?> webSocketHandler) {, +		Assert.notNull(webSocketHandler, "webSocketHandler is required");, +		this.handler = new WebSocketHandlerInvoker(webSocketHandler).setLogger(logger);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/SockJsSessionFactory.java, +	 * @param webSocketHandler the underlying {@link WebSocketHandler}, +	S createSession(String sessionId, WebSocketHandler<?> webSocketHandler);, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractServerSockJsSession.java, +	public AbstractServerSockJsSession(String sessionId, SockJsConfiguration config, WebSocketHandler<?> handler) {, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/AbstractSockJsService.java, +			String sockJsPath, WebSocketHandler<?> webSocketHandler) throws IOException, TransportErrorException {, +				handleRawWebSocketRequest(request, response, webSocketHandler);, +			handleTransportRequest(request, response, sessionId, TransportType.fromValue(transport), webSocketHandler);, +	protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,, +			ServerHttpResponse response, WebSocketHandler<?> webSocketHandler) throws IOException;, +			String sessionId, TransportType transportType, WebSocketHandler<?> webSocketHandler), +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/SockJsConfiguration.java, +++ b/spring-websocket/src/main/java/org/springframework/sockjs/server/SockJsService.java, +]