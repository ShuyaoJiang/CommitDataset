[+++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/AbstractFormTag.java, + * Copyright 2002-2010 the original author or authors., +	 * Evaluate the supplied value for the supplied attribute name. If the supplied value, +	 * is <code>null</code> then <code>false</code> is returned, otherwise evaluation is, +	 * handled using {@link ExpressionEvaluationUtils#evaluate(String, String, javax.servlet.jsp.PageContext)},, +	 * with subsequent matching against <code>Boolean.TRUE</code> and <code>Boolean.valueOf</code>., +	 */, +	protected boolean evaluateBoolean(String attributeName, String value) throws JspException {, +		Object evaluated = ExpressionEvaluationUtils.evaluate(attributeName, value, this.pageContext);, +		return (Boolean.TRUE.equals(evaluated) ||, +				(evaluated instanceof String && Boolean.valueOf((String) evaluated)));, +	}, +, +	/**, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/AbstractFormTag.java, + * Copyright 2002-2010 the original author or authors., +	 * Evaluate the supplied value for the supplied attribute name. If the supplied value, +	 * is <code>null</code> then <code>false</code> is returned, otherwise evaluation is, +	 * handled using {@link ExpressionEvaluationUtils#evaluate(String, String, javax.servlet.jsp.PageContext)},, +	 * with subsequent matching against <code>Boolean.TRUE</code> and <code>Boolean.valueOf</code>., +	 */, +	protected boolean evaluateBoolean(String attributeName, String value) throws JspException {, +		Object evaluated = ExpressionEvaluationUtils.evaluate(attributeName, value, this.pageContext);, +		return (Boolean.TRUE.equals(evaluated) ||, +				(evaluated instanceof String && Boolean.valueOf((String) evaluated)));, +	}, +, +	/**, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/AbstractHtmlInputElementTag.java, + * Copyright 2002-2010 the original author or authors., +		return evaluateBoolean(DISABLED_ATTRIBUTE, getDisabled());, +		return evaluateBoolean(READONLY_ATTRIBUTE, getReadonly());, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/AbstractFormTag.java, + * Copyright 2002-2010 the original author or authors., +	 * Evaluate the supplied value for the supplied attribute name. If the supplied value, +	 * is <code>null</code> then <code>false</code> is returned, otherwise evaluation is, +	 * handled using {@link ExpressionEvaluationUtils#evaluate(String, String, javax.servlet.jsp.PageContext)},, +	 * with subsequent matching against <code>Boolean.TRUE</code> and <code>Boolean.valueOf</code>., +	 */, +	protected boolean evaluateBoolean(String attributeName, String value) throws JspException {, +		Object evaluated = ExpressionEvaluationUtils.evaluate(attributeName, value, this.pageContext);, +		return (Boolean.TRUE.equals(evaluated) ||, +				(evaluated instanceof String && Boolean.valueOf((String) evaluated)));, +	}, +, +	/**, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/AbstractHtmlInputElementTag.java, + * Copyright 2002-2010 the original author or authors., +		return evaluateBoolean(DISABLED_ATTRIBUTE, getDisabled());, +		return evaluateBoolean(READONLY_ATTRIBUTE, getReadonly());, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/OptionTag.java, + * Copyright 2002-2010 the original author or authors., +	protected boolean isDisabled() throws JspException {, +		return evaluateBoolean(DISABLED_ATTRIBUTE, getDisabled());, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/AbstractFormTag.java, + * Copyright 2002-2010 the original author or authors., +	 * Evaluate the supplied value for the supplied attribute name. If the supplied value, +	 * is <code>null</code> then <code>false</code> is returned, otherwise evaluation is, +	 * handled using {@link ExpressionEvaluationUtils#evaluate(String, String, javax.servlet.jsp.PageContext)},, +	 * with subsequent matching against <code>Boolean.TRUE</code> and <code>Boolean.valueOf</code>., +	 */, +	protected boolean evaluateBoolean(String attributeName, String value) throws JspException {, +		Object evaluated = ExpressionEvaluationUtils.evaluate(attributeName, value, this.pageContext);, +		return (Boolean.TRUE.equals(evaluated) ||, +				(evaluated instanceof String && Boolean.valueOf((String) evaluated)));, +	}, +, +	/**, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/AbstractHtmlInputElementTag.java, + * Copyright 2002-2010 the original author or authors., +		return evaluateBoolean(DISABLED_ATTRIBUTE, getDisabled());, +		return evaluateBoolean(READONLY_ATTRIBUTE, getReadonly());, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/OptionTag.java, + * Copyright 2002-2010 the original author or authors., +	protected boolean isDisabled() throws JspException {, +		return evaluateBoolean(DISABLED_ATTRIBUTE, getDisabled());, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/OptionWriter.java, + * Copyright 2002-2010 the original author or authors., +	protected boolean isOptionDisabled() throws JspException {, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/AbstractFormTag.java, + * Copyright 2002-2010 the original author or authors., +	 * Evaluate the supplied value for the supplied attribute name. If the supplied value, +	 * is <code>null</code> then <code>false</code> is returned, otherwise evaluation is, +	 * handled using {@link ExpressionEvaluationUtils#evaluate(String, String, javax.servlet.jsp.PageContext)},, +	 * with subsequent matching against <code>Boolean.TRUE</code> and <code>Boolean.valueOf</code>., +	 */, +	protected boolean evaluateBoolean(String attributeName, String value) throws JspException {, +		Object evaluated = ExpressionEvaluationUtils.evaluate(attributeName, value, this.pageContext);, +		return (Boolean.TRUE.equals(evaluated) ||, +				(evaluated instanceof String && Boolean.valueOf((String) evaluated)));, +	}, +, +	/**, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/AbstractHtmlInputElementTag.java, + * Copyright 2002-2010 the original author or authors., +		return evaluateBoolean(DISABLED_ATTRIBUTE, getDisabled());, +		return evaluateBoolean(READONLY_ATTRIBUTE, getReadonly());, +++ b/org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/tags/form/OptionTag.java, + * Copyright 2002-2010 the original author or authors., +	protected boolean isDisabled() throws JspException {]