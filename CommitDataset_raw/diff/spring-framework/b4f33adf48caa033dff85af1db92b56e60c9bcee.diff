[+++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.util.ClassUtils;, + * Helper class that encapsulates the specification of a method parameter, i.e. a {@link Method}, + * or {@link Constructor} plus a parameter index and a nested type index for a declared generic, + * type. Useful as a specification object to pass along., + * <p>As of 4.2, there is a {@link org.springframework.core.annotation.SynthesizingMethodParameter}, + * subclass available which synthesizes annotations with attribute aliases. That subclass is used, + * for web and message endpoint processing, in particular., +	private static Class<?> javaUtilOptionalClass = null;, +, +	static {, +		try {, +			javaUtilOptionalClass = ClassUtils.forName("java.util.Optional", MethodParameter.class.getClassLoader());, +		}, +		catch (ClassNotFoundException ex) {, +			// Java 8 not available - Optional references simply not supported then., +		}, +	}, +, +, +	private volatile MethodParameter nestedMethodParameter;, +, +	/**, +	 * Return a variant of this {@code MethodParameter} which points to the, +	 * same parameter but one nesting level deeper. This is effectively the, +	 * same as {@link #increaseNestingLevel()}, just with an independent, +	 * {@code MethodParameter} object (e.g. in case of the original being cached)., +	 * @since 4.3, +	 */, +	public MethodParameter nested() {, +		if (this.nestedMethodParameter != null) {, +			return this.nestedMethodParameter;, +		}, +		MethodParameter nestedParam = clone();, +		nestedParam.nestingLevel = this.nestingLevel + 1;, +		this.nestedMethodParameter = nestedParam;, +		return nestedParam;, +	}, +, +	/**, +	 * Return whether this method parameter is declared as optiona, +	 * in the form of Java 8's {@link java.util.Optional}., +	 * @since 4.3, +	 */, +	public boolean isOptional() {, +		return (getParameterType() == javaUtilOptionalClass);, +	}, +, +	/**, +	 * Return a variant of this {@code MethodParameter} which points to, +	 * the same parameter but one nesting level deeper in case of a, +	 * {@link java.util.Optional} declaration., +	 * @since 4.3, +	 * @see #isOptional(), +	 * @see #nested(), +	 */, +	public MethodParameter nestedIfOptional() {, +		return (isOptional() ? nested() : this);, +	}, +, +	 * @see #getNestingLevel(), +	@Override, +	public MethodParameter clone() {, +		return new MethodParameter(this);, +	}, +, +++ b/spring-core/src/main/java/org/springframework/core/MethodParameter.java, + * Copyright 2002-2016 the original author or authors., +import org.springframework.util.ClassUtils;, + * Helper class that encapsulates the specification of a method parameter, i.e. a {@link Method}, + * or {@link Constructor} plus a parameter index and a nested type index for a declared generic, + * type. Useful as a specification object to pass along., + * <p>As of 4.2, there is a {@link org.springframework.core.annotation.SynthesizingMethodParameter}, + * subclass available which synthesizes annotations with attribute aliases. That subclass is used, + * for web and message endpoint processing, in particular., +	private static Class<?> javaUtilOptionalClass = null;, +, +	static {, +		try {, +			javaUtilOptionalClass = ClassUtils.forName("java.util.Optional", MethodParameter.class.getClassLoader());, +		}, +		catch (ClassNotFoundException ex) {, +			// Java 8 not available - Optional references simply not supported then., +		}, +	}, +, +, +	private volatile MethodParameter nestedMethodParameter;, +, +	/**, +	 * Return a variant of this {@code MethodParameter} which points to the, +	 * same parameter but one nesting level deeper. This is effectively the, +	 * same as {@link #increaseNestingLevel()}, just with an independent, +	 * {@code MethodParameter} object (e.g. in case of the original being cached)., +	 * @since 4.3, +	 */, +	public MethodParameter nested() {, +		if (this.nestedMethodParameter != null) {, +			return this.nestedMethodParameter;]