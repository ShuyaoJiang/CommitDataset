[+++ b/spring-messaging/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java, +			for (String key : headers.keySet()) {, +				if (PatternMatchUtils.simpleMatch(pattern, key)) {, +					matchingHeaderNames.add(key);, +			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {, +				if (!isReadOnly(entry.getKey())) {, +					setHeader(entry.getKey(), entry.getValue());, +			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {, +				if (!isReadOnly(entry.getKey())) {, +					setHeaderIfAbsent(entry.getKey(), entry.getValue());, +++ b/spring-messaging/src/main/java/org/springframework/messaging/support/MessageHeaderAccessor.java, +			for (String key : headers.keySet()) {, +				if (PatternMatchUtils.simpleMatch(pattern, key)) {, +					matchingHeaderNames.add(key);, +			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {, +				if (!isReadOnly(entry.getKey())) {, +					setHeader(entry.getKey(), entry.getValue());, +			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {, +				if (!isReadOnly(entry.getKey())) {, +					setHeaderIfAbsent(entry.getKey(), entry.getValue());, +++ b/spring-messaging/src/test/java/org/springframework/messaging/support/MessageHeaderAccessorTests.java, + * @author Sebastien Deleuze, +	public void removeHeaders() {, +		Map<String, Object> map = new HashMap<>();, +		map.put("foo", "bar");, +		map.put("bar", "baz");, +		GenericMessage<String> message = new GenericMessage<>("payload", map);, +		MessageHeaderAccessor accessor = new MessageHeaderAccessor(message);, +, +		accessor.removeHeaders("fo*");, +, +		MessageHeaders actual = accessor.getMessageHeaders();, +		assertEquals(2, actual.size());, +		assertNull(actual.get("foo"));, +		assertEquals("baz", actual.get("bar"));, +	}, +, +	@Test, +	public void copyHeaders() {, +		Map<String, Object> map1 = new HashMap<>();, +		map1.put("foo", "bar");, +		GenericMessage<String> message = new GenericMessage<>("payload", map1);, +		MessageHeaderAccessor accessor = new MessageHeaderAccessor(message);, +, +		Map<String, Object> map2 = new HashMap<>();, +		map2.put("foo", "BAR");, +		map2.put("bar", "baz");, +		accessor.copyHeaders(map2);, +, +		MessageHeaders actual = accessor.getMessageHeaders();, +		assertEquals(3, actual.size());, +		assertEquals("BAR", actual.get("foo"));, +		assertEquals("baz", actual.get("bar"));, +	}, +, +	@Test, +	public void copyHeadersIfAbsent() {, +		Map<String, Object> map1 = new HashMap<>();, +		map1.put("foo", "bar");, +		GenericMessage<String> message = new GenericMessage<>("payload", map1);, +		MessageHeaderAccessor accessor = new MessageHeaderAccessor(message);, +, +		Map<String, Object> map2 = new HashMap<>();, +		map2.put("foo", "BAR");, +		map2.put("bar", "baz");, +		accessor.copyHeadersIfAbsent(map2);, +, +		MessageHeaders actual = accessor.getMessageHeaders();, +		assertEquals(3, actual.size());, +		assertEquals("bar", actual.get("foo"));, +		assertEquals("baz", actual.get("bar"));, +	}, +, +	@Test]