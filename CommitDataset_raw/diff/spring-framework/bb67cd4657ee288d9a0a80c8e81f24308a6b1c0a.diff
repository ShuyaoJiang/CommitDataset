[+++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java, +import org.springframework.core.io.Resource;, +	 * Fallback statement separator within SQL scripts., +	 * <p>Used if neither a custom defined separator nor the, +	 * {@link #DEFAULT_STATEMENT_SEPARATOR} is present in a given script., +	 */, +	public static final String FALLBACK_STATEMENT_SEPARATOR = "\n";, +, +	/**, +	 * separator character. Each individual statement will be added to the, +	 * @param separator character separating each statement &mdash; typically a ';', +	 * @see #splitSqlScript(String, String, List), +	public static void splitSqlScript(String script, char separator, List<String> statements) throws ScriptException {, +		splitSqlScript(script, String.valueOf(separator), statements);, +	 * separator string. Each individual statement will be added to the, +	 * provided {@code List}., +	 * <p>Within the script, {@value #DEFAULT_COMMENT_PREFIX} will be used as the, +	 * comment prefix; any text beginning with the comment prefix and extending to, +	 * the end of the line will be omitted from the output. Similarly,, +	 * {@value #DEFAULT_BLOCK_COMMENT_START_DELIMITER} and, +	 * {@value #DEFAULT_BLOCK_COMMENT_END_DELIMITER} will be used as the, +	 * <em>start</em> and <em>end</em> block comment delimiters: any text enclosed, +	 * in a block comment will be omitted from the output. In addition, multiple, +	 * adjacent whitespace characters will be collapsed into a single space., +	 * @param script the SQL script, +	 * @param separator text separating each statement &mdash; typically a ';' or newline character, +	 * @param statements the list that will contain the individual statements, +	 * @see #splitSqlScript(String, char, List), +	 * @see #splitSqlScript(EncodedResource, String, String, String, String, String, List), +	 */, +	public static void splitSqlScript(String script, String separator, List<String> statements) throws ScriptException {, +		splitSqlScript(null, script, separator, DEFAULT_COMMENT_PREFIX, DEFAULT_BLOCK_COMMENT_START_DELIMITER,, +			DEFAULT_BLOCK_COMMENT_END_DELIMITER, statements);, +	}, +, +	/**, +	 * Split an SQL script into separate statements delimited by the provided, +	 * separator string. Each individual statement will be added to the provided, +	 * @param separator text separating each statement &mdash; typically a ';' or, +	 * newline character; never {@code null}, +	public static void splitSqlScript(EncodedResource resource, String script, String separator, String commentPrefix,, +		Assert.notNull(separator, "separator must not be null");, +				if (script.startsWith(separator, i)) {, +					i += separator.length() - 1;, +	 * Read a script from the provided resource, using the supplied comment prefix, +	 * and statement separator, and build a {@code String} containing the lines., +			if (commentPrefix != null && !currentStatement.startsWith(commentPrefix)) {, +		appendSeparatorToScriptIfNecessary(scriptBuilder, separator);, +	private static void appendSeparatorToScriptIfNecessary(StringBuilder scriptBuilder, String separator) {, +	 * Execute the given SQL script using default settings for separator separators,, +	 * comment delimiters, and exception handling flags., +	 * <p>Statement separators and comments will be removed before executing, +	 * individual statements within the supplied script., +	 * <p><b>Do not use this method to execute DDL if you expect rollback.</b>, +	 * @param connection the JDBC connection to use to execute the script; already, +	 * configured and ready to use, +	 * @param resource the resource to load the SQL script from; encoded with the, +	 * current platform's default encoding, +	 * @see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String), +	 * @see #DEFAULT_COMMENT_PREFIX, +	 * @see #DEFAULT_STATEMENT_SEPARATOR, +	 * @see #DEFAULT_BLOCK_COMMENT_START_DELIMITER, +	 * @see #DEFAULT_BLOCK_COMMENT_END_DELIMITER, +	 */, +	public static void executeSqlScript(Connection connection, Resource resource) throws SQLException, ScriptException {, +		executeSqlScript(connection, new EncodedResource(resource));, +	}, +, +	/**, +	 * Execute the given SQL script using default settings for separator separators,, +	 * comment delimiters, and exception handling flags., +	 * <p>Statement separators and comments will be removed before executing, +	 * individual statements within the supplied script., +	 * <p><b>Do not use this method to execute DDL if you expect rollback.</b>, +	 * @param connection the JDBC connection to use to execute the script; already, +	 * configured and ready to use, +	 * @param resource the resource (potentially associated with a specific encoding), +	 * to load the SQL script from, +	 * @see #executeSqlScript(Connection, EncodedResource, boolean, boolean, String, String, String, String), +	 * @see #DEFAULT_COMMENT_PREFIX, +	 * @see #DEFAULT_STATEMENT_SEPARATOR, +	 * @see #DEFAULT_BLOCK_COMMENT_START_DELIMITER, +	 * @see #DEFAULT_BLOCK_COMMENT_END_DELIMITER, +	 */, +	public static void executeSqlScript(Connection connection, EncodedResource resource) throws SQLException,, +			ScriptException {, +		executeSqlScript(connection, resource, false, false, DEFAULT_COMMENT_PREFIX, DEFAULT_STATEMENT_SEPARATOR,, +			DEFAULT_BLOCK_COMMENT_START_DELIMITER, DEFAULT_BLOCK_COMMENT_END_DELIMITER);, +	}, +, +	/**, +	 * {@value #DEFAULT_STATEMENT_SEPARATOR} if not specified and falls back to, +	 * {@value #FALLBACK_STATEMENT_SEPARATOR} as a last resort, +		if (!containsSqlScriptDelimiters(script, separator)) {, +			separator = FALLBACK_STATEMENT_SEPARATOR;, +++ b/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java, +import org.springframework.core.io.Resource;, +	 * Fallback statement separator within SQL scripts., +	 * <p>Used if neither a custom defined separator nor the, +	 * {@link #DEFAULT_STATEMENT_SEPARATOR} is present in a given script.]