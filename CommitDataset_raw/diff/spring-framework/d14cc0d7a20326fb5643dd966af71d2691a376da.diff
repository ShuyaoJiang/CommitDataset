[+++ b/org.springframework.web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java, +import org.springframework.util.Assert;, +	 *, +	/** Construct an {@code AbstractHttpMessageConverter} with one supported media type. */, +	/** Construct an {@code AbstractHttpMessageConverter} with multiple supported media type. */, +	/** Set the list of {@link MediaType} objects supported by this converter. */, +	 * {@link #writeInternal(Object, HttpOutputMessage)}., +	 *, +		writeInternal(t, outputMessage);, +	 *, +	 *, +	 *, +	protected abstract void writeInternal(T t, HttpOutputMessage outputMessage) throws IOException;, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java, +import org.springframework.util.Assert;, +	 *, +	/** Construct an {@code AbstractHttpMessageConverter} with one supported media type. */, +	/** Construct an {@code AbstractHttpMessageConverter} with multiple supported media type. */, +	/** Set the list of {@link MediaType} objects supported by this converter. */, +	 * {@link #writeInternal(Object, HttpOutputMessage)}., +	 *, +		writeInternal(t, outputMessage);, +	 *, +	 *, +	 *, +	protected abstract void writeInternal(T t, HttpOutputMessage outputMessage) throws IOException;, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/ByteArrayHttpMessageConverter.java, +import org.springframework.http.MediaType;, +import org.springframework.util.FileCopyUtils;, +	/** Creates a new instance of the {@code ByteArrayHttpMessageConverter}. */, +	protected void writeInternal(byte[] bytes, HttpOutputMessage outputMessage) throws IOException {, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java, +import org.springframework.util.Assert;, +	 *, +	/** Construct an {@code AbstractHttpMessageConverter} with one supported media type. */, +	/** Construct an {@code AbstractHttpMessageConverter} with multiple supported media type. */, +	/** Set the list of {@link MediaType} objects supported by this converter. */, +	 * {@link #writeInternal(Object, HttpOutputMessage)}., +	 *, +		writeInternal(t, outputMessage);, +	 *, +	 *, +	 *, +	protected abstract void writeInternal(T t, HttpOutputMessage outputMessage) throws IOException;, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/ByteArrayHttpMessageConverter.java, +import org.springframework.http.MediaType;, +import org.springframework.util.FileCopyUtils;, +	/** Creates a new instance of the {@code ByteArrayHttpMessageConverter}. */, +	protected void writeInternal(byte[] bytes, HttpOutputMessage outputMessage) throws IOException {, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java, + *, +	/** Creates a new instance of the {@code FormHttpMessageConverter}. */, +	protected void writeInternal(MultiValueMap<String, String> form, HttpOutputMessage outputMessage), +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java, +import org.springframework.util.Assert;, +	 *, +	/** Construct an {@code AbstractHttpMessageConverter} with one supported media type. */, +	/** Construct an {@code AbstractHttpMessageConverter} with multiple supported media type. */, +	/** Set the list of {@link MediaType} objects supported by this converter. */, +	 * {@link #writeInternal(Object, HttpOutputMessage)}., +	 *, +		writeInternal(t, outputMessage);, +	 *, +	 *, +	 *, +	protected abstract void writeInternal(T t, HttpOutputMessage outputMessage) throws IOException;, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/ByteArrayHttpMessageConverter.java, +import org.springframework.http.MediaType;, +import org.springframework.util.FileCopyUtils;, +	/** Creates a new instance of the {@code ByteArrayHttpMessageConverter}. */, +	protected void writeInternal(byte[] bytes, HttpOutputMessage outputMessage) throws IOException {, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java, + *, +	/** Creates a new instance of the {@code FormHttpMessageConverter}. */, +	protected void writeInternal(MultiValueMap<String, String> form, HttpOutputMessage outputMessage), +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/HttpMessageConversionException.java, +	 * Create a new HttpMessageConversionException., +	 *, +	 * Create a new HttpMessageConversionException., +	 *, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java, +import org.springframework.util.Assert;, +	 *, +	/** Construct an {@code AbstractHttpMessageConverter} with one supported media type. */, +	/** Construct an {@code AbstractHttpMessageConverter} with multiple supported media type. */, +	/** Set the list of {@link MediaType} objects supported by this converter. */, +	 * {@link #writeInternal(Object, HttpOutputMessage)}., +	 *, +		writeInternal(t, outputMessage);, +	 *, +	 *, +	 *, +	protected abstract void writeInternal(T t, HttpOutputMessage outputMessage) throws IOException;, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/ByteArrayHttpMessageConverter.java, +import org.springframework.http.MediaType;, +import org.springframework.util.FileCopyUtils;, +	/** Creates a new instance of the {@code ByteArrayHttpMessageConverter}. */, +	protected void writeInternal(byte[] bytes, HttpOutputMessage outputMessage) throws IOException {, +++ b/org.springframework.web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java, + *]