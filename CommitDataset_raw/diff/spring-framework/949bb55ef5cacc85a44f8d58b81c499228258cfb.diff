[+++ b/spring-websocket/src/test/java/org/springframework/web/socket/JettyWebSocketTestServer.java, +	private int port;, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/JettyWebSocketTestServer.java, +	private int port;, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/TomcatWebSocketTestServer.java, +	private int port;, +		connector.setPort(0);, +		this.tomcatServer.setPort(0);, +		this.port = this.tomcatServer.getConnector().getLocalPort();, +		this.context.addLifecycleListener(event -> {, +		this.port = 0;, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/JettyWebSocketTestServer.java, +	private int port;, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/TomcatWebSocketTestServer.java, +	private int port;, +		connector.setPort(0);, +		this.tomcatServer.setPort(0);, +		this.port = this.tomcatServer.getConnector().getLocalPort();, +		this.context.addLifecycleListener(event -> {, +		this.port = 0;, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/UndertowTestServer.java, + * Copyright 2002-2017 the original author or authors., +import java.net.InetSocketAddress;, +import static io.undertow.servlet.Servlets.defaultContainer;, +import static io.undertow.servlet.Servlets.deployment;, +import static io.undertow.servlet.Servlets.servlet;, +	private int port;, +			FilterInstanceFactory filterFactory = new FilterInstanceFactory(filter);, +			FilterInfo filterInfo = new FilterInfo(filterName, filter.getClass(), filterFactory);, +			servletBuilder.addFilter(filterInfo.setAsyncSupported(true));, +			this.server = Undertow.builder().addHttpListener(0, "localhost").setHandler(httpHandler).build();, +		Undertow.ListenerInfo info = this.server.getListenerInfo().get(0);, +		this.port = ((InetSocketAddress) info.getAddress()).getPort();, +		this.port = 0;, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/JettyWebSocketTestServer.java, +	private int port;, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/TomcatWebSocketTestServer.java, +	private int port;, +		connector.setPort(0);, +		this.tomcatServer.setPort(0);, +		this.port = this.tomcatServer.getConnector().getLocalPort();, +		this.context.addLifecycleListener(event -> {, +		this.port = 0;, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/UndertowTestServer.java, + * Copyright 2002-2017 the original author or authors., +import java.net.InetSocketAddress;, +import static io.undertow.servlet.Servlets.defaultContainer;, +import static io.undertow.servlet.Servlets.deployment;, +import static io.undertow.servlet.Servlets.servlet;, +	private int port;, +			FilterInstanceFactory filterFactory = new FilterInstanceFactory(filter);, +			FilterInfo filterInfo = new FilterInfo(filterName, filter.getClass(), filterFactory);, +			servletBuilder.addFilter(filterInfo.setAsyncSupported(true));, +			this.server = Undertow.builder().addHttpListener(0, "localhost").setHandler(httpHandler).build();, +		Undertow.ListenerInfo info = this.server.getListenerInfo().get(0);, +		this.port = ((InetSocketAddress) info.getAddress()).getPort();, +		this.port = 0;, +++ b/spring-websocket/src/test/java/org/springframework/web/socket/client/jetty/JettyWebSocketClientTests.java, +		this.server = new TestJettyWebSocketServer(new TextWebSocketHandler());, +		this.wsUrl = "ws://localhost:" + this.server.getPort() + "/test";, +		public TestJettyWebSocketServer(final WebSocketHandler webSocketHandler) {, +			connector.setPort(0);, +, +		public int getPort() {, +			return ((ServerConnector) this.server.getConnectors()[0]).getLocalPort();, +		}]