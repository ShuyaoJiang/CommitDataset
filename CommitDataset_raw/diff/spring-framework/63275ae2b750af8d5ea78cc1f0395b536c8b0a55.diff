[+++ b/spring-core/src/test/java/org/springframework/core/io/buffer/LeakAwareDataBuffer.java, +		this.leakError = createLeakError(delegate);, +	private static AssertionError createLeakError(DataBuffer delegate) {, +		String message = String.format("DataBuffer leak detected: {%s} has not been released.%n" +, +				"Stack trace of buffer allocation statement follows:",, +				delegate);, +		AssertionError result = new AssertionError(message);, +++ b/spring-core/src/test/java/org/springframework/core/io/buffer/LeakAwareDataBuffer.java, +		this.leakError = createLeakError(delegate);, +	private static AssertionError createLeakError(DataBuffer delegate) {, +		String message = String.format("DataBuffer leak detected: {%s} has not been released.%n" +, +				"Stack trace of buffer allocation statement follows:",, +				delegate);, +		AssertionError result = new AssertionError(message);, +++ b/spring-core/src/test/java/org/springframework/core/io/buffer/LeakAwareDataBufferFactory.java, +import org.jetbrains.annotations.NotNull;, +	public DataBuffer allocateBuffer() {, +		return allocateBufferInternal(this.delegate.allocateBuffer());, +	public DataBuffer allocateBuffer(int initialCapacity) {, +		return allocateBufferInternal(this.delegate.allocateBuffer(initialCapacity));, +	}, +, +	@NotNull, +	private DataBuffer allocateBufferInternal(DataBuffer delegateBuffer) {, +		LeakAwareDataBuffer dataBuffer = new LeakAwareDataBuffer(delegateBuffer, this);, +++ b/spring-core/src/test/java/org/springframework/core/io/buffer/LeakAwareDataBuffer.java, +		this.leakError = createLeakError(delegate);, +	private static AssertionError createLeakError(DataBuffer delegate) {, +		String message = String.format("DataBuffer leak detected: {%s} has not been released.%n" +, +				"Stack trace of buffer allocation statement follows:",, +				delegate);, +		AssertionError result = new AssertionError(message);, +++ b/spring-core/src/test/java/org/springframework/core/io/buffer/LeakAwareDataBufferFactory.java, +import org.jetbrains.annotations.NotNull;, +	public DataBuffer allocateBuffer() {, +		return allocateBufferInternal(this.delegate.allocateBuffer());, +	public DataBuffer allocateBuffer(int initialCapacity) {, +		return allocateBufferInternal(this.delegate.allocateBuffer(initialCapacity));, +	}, +, +	@NotNull, +	private DataBuffer allocateBufferInternal(DataBuffer delegateBuffer) {, +		LeakAwareDataBuffer dataBuffer = new LeakAwareDataBuffer(delegateBuffer, this);, +++ b/spring-core/src/test/java/org/springframework/core/io/buffer/LeakAwareDataBufferFactoryTests.java, +/*, + * Copyright 2002-2018 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.core.io.buffer;, +, +import org.junit.Test;, +, +import static org.junit.Assert.*;, +import static org.springframework.core.io.buffer.DataBufferUtils.release;, +, +/**, + * @author Arjen Poutsma, + */, +public class LeakAwareDataBufferFactoryTests {, +, +	private final LeakAwareDataBufferFactory bufferFactory = new LeakAwareDataBufferFactory();, +, +, +	@Test, +	public void leak() {, +		DataBuffer dataBuffer = this.bufferFactory.allocateBuffer();, +		try {, +			this.bufferFactory.checkForLeaks();, +			fail("AssertionError expected");, +		}, +		catch (AssertionError expected) {, +			// ignore, +		}, +		finally {, +			release(dataBuffer);, +		}, +	}, +, +	@Test, +	public void noLeak() {, +		DataBuffer dataBuffer = this.bufferFactory.allocateBuffer();, +		release(dataBuffer);, +		this.bufferFactory.checkForLeaks();, +	}, +, +}]