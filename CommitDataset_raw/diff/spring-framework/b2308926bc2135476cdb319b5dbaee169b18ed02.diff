[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, +	 * @param typeToMatch the type to match against (as a {@code ResolvableType}), +	boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException;, +	 * @param typeToMatch the type to match against (as a {@code Class}), +	boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, +	 * @param typeToMatch the type to match against (as a {@code ResolvableType}), +	boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException;, +	 * @param typeToMatch the type to match against (as a {@code Class}), +	boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +	public boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException {, +		return isTypeMatch(name, ResolvableType.forClass(typeToMatch != null ? typeToMatch : Object.class));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, +	 * @param typeToMatch the type to match against (as a {@code ResolvableType}), +	boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException;, +	 * @param typeToMatch the type to match against (as a {@code Class}), +	boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +	public boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException {, +		return isTypeMatch(name, ResolvableType.forClass(typeToMatch != null ? typeToMatch : Object.class));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/StaticListableBeanFactory.java, +	public boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException {, +		return (type != null && typeToMatch.isAssignableFrom(type));, +	public boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException {, +		return (typeToMatch == null || (type != null && typeToMatch.isAssignableFrom(type)));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, +	 * @param typeToMatch the type to match against (as a {@code ResolvableType}), +	boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException;, +	 * @param typeToMatch the type to match against (as a {@code Class}), +	boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +	public boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException {, +		return isTypeMatch(name, ResolvableType.forClass(typeToMatch != null ? typeToMatch : Object.class));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/StaticListableBeanFactory.java, +	public boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException {, +		return (type != null && typeToMatch.isAssignableFrom(type));, +	public boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException {, +		return (typeToMatch == null || (type != null && typeToMatch.isAssignableFrom(type)));, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java, +	@Test, +	public void testGetBeanNamesForTypeBeforeFactoryBeanCreation() {, +		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory();, +		lbf.registerBeanDefinition("factoryBean", new RootBeanDefinition(FactoryBeanThatShouldntBeCalled.class.getName()));, +		assertFalse(lbf.containsSingleton("factoryBean"));, +, +		String[] beanNames = lbf.getBeanNamesForType(Runnable.class, false, false);, +		assertEquals(1, beanNames.length);, +		assertEquals("&factoryBean", beanNames[0]);, +, +		beanNames = lbf.getBeanNamesForType(FactoryBean.class, false, false);, +		assertEquals(1, beanNames.length);, +		assertEquals("&factoryBean", beanNames[0]);, +	}, +, +	@Test, +	public void testGetBeanNamesForTypeAfterFactoryBeanCreation() {, +		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory();, +		lbf.registerBeanDefinition("factoryBean", new RootBeanDefinition(FactoryBeanThatShouldntBeCalled.class.getName()));, +		lbf.getBean("&factoryBean");, +, +		String[] beanNames = lbf.getBeanNamesForType(Runnable.class, false, false);, +		assertEquals(1, beanNames.length);, +		assertEquals("&factoryBean", beanNames[0]);, +, +		beanNames = lbf.getBeanNamesForType(FactoryBean.class, false, false);, +		assertEquals(1, beanNames.length);, +		assertEquals("&factoryBean", beanNames[0]);, +	}, +, +	public static class FactoryBeanThatShouldntBeCalled implements FactoryBean<Object>, Runnable {, +, +		@Override, +		public void run() {, +			throw new IllegalStateException();, +		}, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/BeanFactory.java, +	 * @param typeToMatch the type to match against (as a {@code ResolvableType}), +	boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException;, +	 * @param typeToMatch the type to match against (as a {@code Class}), +	boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException;, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java, +	public boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException {, +		return isTypeMatch(name, ResolvableType.forClass(typeToMatch != null ? typeToMatch : Object.class));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/support/StaticListableBeanFactory.java, +	public boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException {, +		return (type != null && typeToMatch.isAssignableFrom(type));, +	public boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException {, +		return (typeToMatch == null || (type != null && typeToMatch.isAssignableFrom(type)));, +++ b/spring-beans/src/test/java/org/springframework/beans/factory/DefaultListableBeanFactoryTests.java, +	@Test, +	public void testGetBeanNamesForTypeBeforeFactoryBeanCreation() {, +		DefaultListableBeanFactory lbf = new DefaultListableBeanFactory();, +		lbf.registerBeanDefinition("factoryBean", new RootBeanDefinition(FactoryBeanThatShouldntBeCalled.class.getName()));, +		assertFalse(lbf.containsSingleton("factoryBean"));, +, +		String[] beanNames = lbf.getBeanNamesForType(Runnable.class, false, false);, +		assertEquals(1, beanNames.length);, +		assertEquals("&factoryBean", beanNames[0]);, +]