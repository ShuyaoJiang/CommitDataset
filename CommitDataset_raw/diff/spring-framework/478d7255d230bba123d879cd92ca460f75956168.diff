[+++ b/spring-context/src/main/java/org/springframework/context/event/GenericApplicationListenerAdapter.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Map;, +, +import org.springframework.util.ConcurrentReferenceHashMap;, +	private static final Map<Class<?>, ResolvableType> eventTypeCache = new ConcurrentReferenceHashMap<>();, +, +, +		if (declaredEventType == null || declaredEventType.isAssignableFrom(ApplicationEvent.class)) {, +	@Nullable, +	static ResolvableType resolveDeclaredEventType(Class<?> listenerType) {, +		ResolvableType eventType = eventTypeCache.get(listenerType);, +		if (eventType == null) {, +			eventType = ResolvableType.forClass(listenerType).as(ApplicationListener.class).getGeneric();, +			eventTypeCache.put(listenerType, eventType);, +		}, +		return (eventType != ResolvableType.NONE ? eventType : null);, +	}, +, +++ b/spring-context/src/main/java/org/springframework/context/event/GenericApplicationListenerAdapter.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Map;, +, +import org.springframework.util.ConcurrentReferenceHashMap;, +	private static final Map<Class<?>, ResolvableType> eventTypeCache = new ConcurrentReferenceHashMap<>();, +, +, +		if (declaredEventType == null || declaredEventType.isAssignableFrom(ApplicationEvent.class)) {, +	@Nullable, +	static ResolvableType resolveDeclaredEventType(Class<?> listenerType) {, +		ResolvableType eventType = eventTypeCache.get(listenerType);, +		if (eventType == null) {, +			eventType = ResolvableType.forClass(listenerType).as(ApplicationListener.class).getGeneric();, +			eventTypeCache.put(listenerType, eventType);, +		}, +		return (eventType != ResolvableType.NONE ? eventType : null);, +	}, +, +++ b/spring-context/src/test/java/org/springframework/context/event/AbstractApplicationEventListenerTests.java, + * Copyright 2002-2018 the original author or authors., +		catch (NoSuchFieldException ex) {, +, +	protected static class GenericTestEvent<T> extends ApplicationEvent {, +	protected static class SmartGenericTestEvent<T> extends GenericTestEvent<T> implements ResolvableTypeProvider {, +, +++ b/spring-context/src/main/java/org/springframework/context/event/GenericApplicationListenerAdapter.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Map;, +, +import org.springframework.util.ConcurrentReferenceHashMap;, +	private static final Map<Class<?>, ResolvableType> eventTypeCache = new ConcurrentReferenceHashMap<>();, +, +, +		if (declaredEventType == null || declaredEventType.isAssignableFrom(ApplicationEvent.class)) {, +	@Nullable, +	static ResolvableType resolveDeclaredEventType(Class<?> listenerType) {, +		ResolvableType eventType = eventTypeCache.get(listenerType);, +		if (eventType == null) {, +			eventType = ResolvableType.forClass(listenerType).as(ApplicationListener.class).getGeneric();, +			eventTypeCache.put(listenerType, eventType);, +		}, +		return (eventType != ResolvableType.NONE ? eventType : null);, +	}, +, +++ b/spring-context/src/test/java/org/springframework/context/event/AbstractApplicationEventListenerTests.java, + * Copyright 2002-2018 the original author or authors., +		catch (NoSuchFieldException ex) {, +, +	protected static class GenericTestEvent<T> extends ApplicationEvent {, +	protected static class SmartGenericTestEvent<T> extends GenericTestEvent<T> implements ResolvableTypeProvider {, +, +++ b/spring-context/src/test/java/org/springframework/context/event/ApplicationContextEventTests.java, +				new ContextRefreshedEvent(new StaticApplicationContext()), null);, +		multicastEvent(true, ApplicationListener.class,, +++ b/spring-context/src/main/java/org/springframework/context/event/GenericApplicationListenerAdapter.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Map;, +, +import org.springframework.util.ConcurrentReferenceHashMap;, +	private static final Map<Class<?>, ResolvableType> eventTypeCache = new ConcurrentReferenceHashMap<>();, +, +, +		if (declaredEventType == null || declaredEventType.isAssignableFrom(ApplicationEvent.class)) {, +	@Nullable, +	static ResolvableType resolveDeclaredEventType(Class<?> listenerType) {, +		ResolvableType eventType = eventTypeCache.get(listenerType);, +		if (eventType == null) {, +			eventType = ResolvableType.forClass(listenerType).as(ApplicationListener.class).getGeneric();, +			eventTypeCache.put(listenerType, eventType);, +		}, +		return (eventType != ResolvableType.NONE ? eventType : null);, +	}, +, +++ b/spring-context/src/test/java/org/springframework/context/event/AbstractApplicationEventListenerTests.java, + * Copyright 2002-2018 the original author or authors., +		catch (NoSuchFieldException ex) {, +, +	protected static class GenericTestEvent<T> extends ApplicationEvent {, +	protected static class SmartGenericTestEvent<T> extends GenericTestEvent<T> implements ResolvableTypeProvider {, +]