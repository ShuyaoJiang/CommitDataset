[+++ b/spring-webflux/src/main/java/org/springframework/web/reactive/HandlerMapping.java, +	 * Name of the {@link ServerWebExchange#getAttributes() attribute} that, +	 * contains the mapped handler for the best matching pattern., +	 */, +	String BEST_MATCHING_HANDLER_ATTRIBUTE = HandlerMapping.class.getName() + ".bestMatchingHandler";, +, +	/**, +	 * Name of the {@link ServerWebExchange#getAttributes() attribute} that, +	 * contains the best matching pattern within the handler mapping., +	 * Name of the {@link ServerWebExchange#getAttributes() attribute} that, +	 * contains the path within the handler mapping, in case of a pattern match, +	 * such as {@code "/static/**"} or the full relevant URI otherwise., +	 * typically support it but handlers should not necessarily expect, +	 * Name of the {@link ServerWebExchange#getAttributes() attribute} that, +	 * contains the URI templates map mapping variable names to values., +	 * Name of the {@link ServerWebExchange#getAttributes() attribute} that, +	 * contains a map with URI variable names and a corresponding MultiValueMap, +	 * of URI matrix variables for each., +	 * Name of the {@link ServerWebExchange#getAttributes() attribute} containing, +	 * the set of producible MediaType's applicable to the mapped handler., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/HandlerMapping.java, +	 * Name of the {@link ServerWebExchange#getAttributes() attribute} that, +	 * contains the mapped handler for the best matching pattern., +	 */, +	String BEST_MATCHING_HANDLER_ATTRIBUTE = HandlerMapping.class.getName() + ".bestMatchingHandler";, +, +	/**, +	 * Name of the {@link ServerWebExchange#getAttributes() attribute} that, +	 * contains the best matching pattern within the handler mapping., +	 * Name of the {@link ServerWebExchange#getAttributes() attribute} that, +	 * contains the path within the handler mapping, in case of a pattern match, +	 * such as {@code "/static/**"} or the full relevant URI otherwise., +	 * typically support it but handlers should not necessarily expect, +	 * Name of the {@link ServerWebExchange#getAttributes() attribute} that, +	 * contains the URI templates map mapping variable names to values., +	 * Name of the {@link ServerWebExchange#getAttributes() attribute} that, +	 * contains a map with URI variable names and a corresponding MultiValueMap, +	 * of URI matrix variables for each., +	 * Name of the {@link ServerWebExchange#getAttributes() attribute} containing, +	 * the set of producible MediaType's applicable to the mapped handler., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/handler/AbstractUrlHandlerMapping.java, +		exchange.getAttributes().put(BEST_MATCHING_HANDLER_ATTRIBUTE, handler);, +		exchange.getAttributes().put(PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, pathWithinMapping);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/HandlerMapping.java, +	 * Name of the {@link ServerWebExchange#getAttributes() attribute} that, +	 * contains the mapped handler for the best matching pattern., +	 */, +	String BEST_MATCHING_HANDLER_ATTRIBUTE = HandlerMapping.class.getName() + ".bestMatchingHandler";, +, +	/**, +	 * Name of the {@link ServerWebExchange#getAttributes() attribute} that, +	 * contains the best matching pattern within the handler mapping., +	 * Name of the {@link ServerWebExchange#getAttributes() attribute} that, +	 * contains the path within the handler mapping, in case of a pattern match, +	 * such as {@code "/static/**"} or the full relevant URI otherwise., +	 * typically support it but handlers should not necessarily expect, +	 * Name of the {@link ServerWebExchange#getAttributes() attribute} that, +	 * contains the URI templates map mapping variable names to values., +	 * Name of the {@link ServerWebExchange#getAttributes() attribute} that, +	 * contains a map with URI variable names and a corresponding MultiValueMap, +	 * of URI matrix variables for each., +	 * Name of the {@link ServerWebExchange#getAttributes() attribute} containing, +	 * the set of producible MediaType's applicable to the mapped handler., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/handler/AbstractUrlHandlerMapping.java, +		exchange.getAttributes().put(BEST_MATCHING_HANDLER_ATTRIBUTE, handler);, +		exchange.getAttributes().put(PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, pathWithinMapping);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java, +			handleMatch(bestMatch.mapping, bestMatch.handlerMethod, lookupPath, exchange);, +	 * @param handlerMethod the matching method, +	protected void handleMatch(T mapping, HandlerMethod handlerMethod, String lookupPath,, +			ServerWebExchange exchange) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/HandlerMapping.java, +	 * Name of the {@link ServerWebExchange#getAttributes() attribute} that, +	 * contains the mapped handler for the best matching pattern., +	 */, +	String BEST_MATCHING_HANDLER_ATTRIBUTE = HandlerMapping.class.getName() + ".bestMatchingHandler";, +, +	/**, +	 * Name of the {@link ServerWebExchange#getAttributes() attribute} that, +	 * contains the best matching pattern within the handler mapping., +	 * Name of the {@link ServerWebExchange#getAttributes() attribute} that, +	 * contains the path within the handler mapping, in case of a pattern match, +	 * such as {@code "/static/**"} or the full relevant URI otherwise., +	 * typically support it but handlers should not necessarily expect, +	 * Name of the {@link ServerWebExchange#getAttributes() attribute} that, +	 * contains the URI templates map mapping variable names to values., +	 * Name of the {@link ServerWebExchange#getAttributes() attribute} that, +	 * contains a map with URI variable names and a corresponding MultiValueMap, +	 * of URI matrix variables for each., +	 * Name of the {@link ServerWebExchange#getAttributes() attribute} containing, +	 * the set of producible MediaType's applicable to the mapped handler., +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/handler/AbstractUrlHandlerMapping.java, +		exchange.getAttributes().put(BEST_MATCHING_HANDLER_ATTRIBUTE, handler);, +		exchange.getAttributes().put(PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE, pathWithinMapping);, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/AbstractHandlerMethodMapping.java, +			handleMatch(bestMatch.mapping, bestMatch.handlerMethod, lookupPath, exchange);, +	 * @param handlerMethod the matching method, +	protected void handleMatch(T mapping, HandlerMethod handlerMethod, String lookupPath,, +			ServerWebExchange exchange) {, +++ b/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/RequestMappingInfoHandlerMapping.java]