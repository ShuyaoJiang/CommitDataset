[+++ b/spring-web/src/main/java/org/springframework/web/filter/HiddenHttpMethodFilter.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +import org.springframework.http.HttpMethod;, + * Only {@code "PUT"}, {@code "DELETE"} and {@code "PATCH"} HTTP methods are allowed., +	private static final List<String> ALLOWED_METHODS =, +			Collections.unmodifiableList(Arrays.asList(HttpMethod.PUT.name(),, +					HttpMethod.DELETE.name(), HttpMethod.PATCH.name()));, +, +				String method = paramValue.toUpperCase(Locale.ENGLISH);, +				if (ALLOWED_METHODS.contains(method)) {, +					requestToUse = new HttpMethodRequestWrapper(request, method);, +				}, +			this.method = method;, +++ b/spring-web/src/main/java/org/springframework/web/filter/HiddenHttpMethodFilter.java, + * Copyright 2002-2018 the original author or authors., +import java.util.Arrays;, +import java.util.Collections;, +import java.util.List;, +import org.springframework.http.HttpMethod;, + * Only {@code "PUT"}, {@code "DELETE"} and {@code "PATCH"} HTTP methods are allowed., +	private static final List<String> ALLOWED_METHODS =, +			Collections.unmodifiableList(Arrays.asList(HttpMethod.PUT.name(),, +					HttpMethod.DELETE.name(), HttpMethod.PATCH.name()));, +, +				String method = paramValue.toUpperCase(Locale.ENGLISH);, +				if (ALLOWED_METHODS.contains(method)) {, +					requestToUse = new HttpMethodRequestWrapper(request, method);, +				}, +			this.method = method;, +++ b/spring-web/src/test/java/org/springframework/web/filter/HiddenHttpMethodFilterTests.java, + * Copyright 2002-2018 the original author or authors., + * Tests for {@link HiddenHttpMethodFilter}., + * , + * @author Brian Clozel, +		filterWithParameterForMethod("delete", "DELETE");, +		filterWithParameterForMethod("put", "PUT");, +		filterWithParameterForMethod("patch", "PATCH");, +, +	@Test, +	public void filterWithParameterDisallowedMethods() throws IOException, ServletException {, +		filterWithParameterForMethod("trace", "POST");, +		filterWithParameterForMethod("head", "POST");, +		filterWithParameterForMethod("options", "POST");, +		filterWithParameterForMethod(null, "POST");, +	}, +, +	private void filterWithParameterForMethod(String methodParam, String expectedMethod), +			throws IOException, ServletException {, +		if(methodParam != null) {, +			request.addParameter("_method", methodParam);, +		}, +				assertEquals("Invalid method", expectedMethod,, +		this.filter.doFilter(request, response, filterChain);]