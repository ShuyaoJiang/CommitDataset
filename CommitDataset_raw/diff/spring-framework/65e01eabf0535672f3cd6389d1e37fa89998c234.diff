[+++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/DispatcherHandler.java, +import org.springframework.http.server.reactive.HttpHandler;, +import org.springframework.web.server.adapter.HttpWebHandlerAdapter;, +	private static final Log logger = LogFactory.getLog(DispatcherHandler.class);, +, +	/**, +	 * Create a new {@code DispatcherHandler} which needs to be configured with, +	 * an {@link ApplicationContext} through {@link #setApplicationContext}., +	 */, +	/**, +	 * Create a new {@code DispatcherHandler} for the given {@link ApplicationContext}., +	 * @param applicationContext the application context to find the handler beans in, +	 */, +	public void setApplicationContext(ApplicationContext applicationContext) {, +		for (HandlerResultHandler resultHandler : this.resultHandlers) {, +, +	/**, +	 * Expose a dispatcher-based {@link WebHandler} for the given application context,, +	 * typically for further configuration with filters and exception handlers through, +	 * a {@link org.springframework.web.server.adapter.WebHttpHandlerBuilder}., +	 * @param applicationContext the application context to find the handler beans in, +	 * @see #DispatcherHandler(ApplicationContext), +	 */, +	public static WebHandler toWebHandler(ApplicationContext applicationContext) {, +		return new DispatcherHandler(applicationContext);, +	}, +, +	/**, +	 * Expose a dispatcher-based {@link HttpHandler} for the given application context,, +	 * typically for direct registration with an engine adapter such as, +	 * {@link org.springframework.http.server.reactive.ReactorHttpHandlerAdapter}., +	 * @param applicationContext the application context to find the handler beans in, +	 * @see #DispatcherHandler(ApplicationContext), +	 * @see HttpWebHandlerAdapter, +	 */, +	public static HttpHandler toHttpHandler(ApplicationContext applicationContext) {, +		return new HttpWebHandlerAdapter(new DispatcherHandler(applicationContext));, +	}, +]