[+++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +			return InjectionMetadata.EMPTY;, +		return InjectionMetadata.forElements(elements, clazz);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +			return InjectionMetadata.EMPTY;, +		return InjectionMetadata.forElements(elements, clazz);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InitDestroyAnnotationBeanPostProcessor.java, +	private final transient LifecycleMetadata emptyLifecycleMetadata =, +			new LifecycleMetadata(Object.class, Collections.emptyList(), Collections.emptyList()) {, +				@Override, +				public void checkConfigMembers(RootBeanDefinition beanDefinition) {, +				}, +				@Override, +				public void invokeInitMethods(Object target, String beanName) {, +				}, +				@Override, +				public void invokeDestroyMethods(Object target, String beanName) {, +				}, +				@Override, +				public boolean hasDestroyMethods() {, +					return false;, +				}, +			};, +, +, +			return this.emptyLifecycleMetadata;, +		return (initMethods.isEmpty() && destroyMethods.isEmpty() ? this.emptyLifecycleMetadata :, +				new LifecycleMetadata(clazz, initMethods, destroyMethods));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java, +			return InjectionMetadata.EMPTY;, +		return InjectionMetadata.forElements(elements, clazz);, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InitDestroyAnnotationBeanPostProcessor.java, +	private final transient LifecycleMetadata emptyLifecycleMetadata =, +			new LifecycleMetadata(Object.class, Collections.emptyList(), Collections.emptyList()) {, +				@Override, +				public void checkConfigMembers(RootBeanDefinition beanDefinition) {, +				}, +				@Override, +				public void invokeInitMethods(Object target, String beanName) {, +				}, +				@Override, +				public void invokeDestroyMethods(Object target, String beanName) {, +				}, +				@Override, +				public boolean hasDestroyMethods() {, +					return false;, +				}, +			};, +, +, +			return this.emptyLifecycleMetadata;, +		return (initMethods.isEmpty() && destroyMethods.isEmpty() ? this.emptyLifecycleMetadata :, +				new LifecycleMetadata(clazz, initMethods, destroyMethods));, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InjectionMetadata.java, + * Copyright 2002-2019 the original author or authors., +import java.util.Collections;, +	/**, +	 * An empty {@code InjectionMetadata} instance with no-op callbacks., +	 * @since 5.2, +	 */, +	public static final InjectionMetadata EMPTY = new InjectionMetadata(Object.class, Collections.emptyList()) {, +		@Override, +		public void checkConfigMembers(RootBeanDefinition beanDefinition) {, +		}, +		@Override, +		public void inject(Object target, @Nullable String beanName, @Nullable PropertyValues pvs) {, +		}, +		@Override, +		public void clear(@Nullable PropertyValues pvs) {, +		}, +	};, +, +, +	/**, +	 * Create a new {@code InjectionMetadata instance}., +	 * <p>Preferably use {@link #forElements} for reusing the {@link #EMPTY}, +	 * instance in case of no elements., +	 * @param targetClass the target class, +	 * @param elements the associated elements to inject, +	 * @see #forElements, +	 */, +	/**, +	 * Return an {@code InjectionMetadata} instance, possibly for empty elements., +	 * @param elements the elements to inject (possibly empty), +	 * @param clazz the target class, +	 * @return a new {@code InjectionMetadata} instance,, +	 * or {@link #EMPTY} in case of no elements, +	 * @since 5.2, +	 */, +	public static InjectionMetadata forElements(Collection<InjectedElement> elements, Class<?> clazz) {, +		return (elements.isEmpty() ? InjectionMetadata.EMPTY : new InjectionMetadata(clazz, elements));, +	}, +, +	/**, +	 * Check whether the given injection metadata needs to be refreshed., +	 * @param metadata the existing metadata instance, +	 * @param clazz the current target class, +	 * @return {@code true} indicating a refresh, {@code false} otherwise, +	 */, +++ b/spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java]