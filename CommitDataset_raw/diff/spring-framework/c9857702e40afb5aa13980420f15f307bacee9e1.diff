[+++ b/spring-core/spring-core.gradle, +	testCompile("com.google.code.findbugs:jsr305:3.0.2"), +++ b/spring-core/spring-core.gradle, +	testCompile("com.google.code.findbugs:jsr305:3.0.2"), +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +		// Shortcut: directly present on the element, with no merging needed?, +		if (AnnotationFilter.PLAIN.matches(annotationType) ||, +				AnnotationsScanner.hasPlainJavaAnnotationsOnly(element)) {, +		if (AnnotationFilter.PLAIN.matches(annotationType) ||, +				AnnotationsScanner.hasPlainJavaAnnotationsOnly(element)) {, +		// Shortcut: directly present on the element, with no merging needed?, +		if (AnnotationFilter.PLAIN.matches(annotationType) ||, +				AnnotationsScanner.hasPlainJavaAnnotationsOnly(element)) {, +		if (AnnotationFilter.PLAIN.matches(annotationType) ||, +				AnnotationsScanner.hasPlainJavaAnnotationsOnly(element)) {, +++ b/spring-core/spring-core.gradle, +	testCompile("com.google.code.findbugs:jsr305:3.0.2"), +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +		// Shortcut: directly present on the element, with no merging needed?, +		if (AnnotationFilter.PLAIN.matches(annotationType) ||, +				AnnotationsScanner.hasPlainJavaAnnotationsOnly(element)) {, +		if (AnnotationFilter.PLAIN.matches(annotationType) ||, +				AnnotationsScanner.hasPlainJavaAnnotationsOnly(element)) {, +		// Shortcut: directly present on the element, with no merging needed?, +		if (AnnotationFilter.PLAIN.matches(annotationType) ||, +				AnnotationsScanner.hasPlainJavaAnnotationsOnly(element)) {, +		if (AnnotationFilter.PLAIN.matches(annotationType) ||, +				AnnotationsScanner.hasPlainJavaAnnotationsOnly(element)) {, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationFilter.java, +	 * {@link AnnotationFilter} that matches annotations in the, +	 * {@code java.lang.*} and {@code org.springframework.lang.*} packages., +	 * {@code java.*}/{@code javax.*} namespaces., +	AnnotationFilter JAVA = packages("java", "javax");, +++ b/spring-core/spring-core.gradle, +	testCompile("com.google.code.findbugs:jsr305:3.0.2"), +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +		// Shortcut: directly present on the element, with no merging needed?, +		if (AnnotationFilter.PLAIN.matches(annotationType) ||, +				AnnotationsScanner.hasPlainJavaAnnotationsOnly(element)) {, +		if (AnnotationFilter.PLAIN.matches(annotationType) ||, +				AnnotationsScanner.hasPlainJavaAnnotationsOnly(element)) {, +		// Shortcut: directly present on the element, with no merging needed?, +		if (AnnotationFilter.PLAIN.matches(annotationType) ||, +				AnnotationsScanner.hasPlainJavaAnnotationsOnly(element)) {, +		if (AnnotationFilter.PLAIN.matches(annotationType) ||, +				AnnotationsScanner.hasPlainJavaAnnotationsOnly(element)) {, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationFilter.java, +	 * {@link AnnotationFilter} that matches annotations in the, +	 * {@code java.lang.*} and {@code org.springframework.lang.*} packages., +	 * {@code java.*}/{@code javax.*} namespaces., +	AnnotationFilter JAVA = packages("java", "javax");, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +		if (AnnotationFilter.PLAIN.matches(annotationType) ||, +				AnnotationsScanner.hasPlainJavaAnnotationsOnly(annotatedElement)) {, +		if (AnnotationFilter.PLAIN.matches(annotationType) ||, +				AnnotationsScanner.hasPlainJavaAnnotationsOnly(annotatedElement)) {, +		if (AnnotationFilter.PLAIN.matches(annotationType) ||, +				AnnotationsScanner.hasPlainJavaAnnotationsOnly(method)) {, +		if (AnnotationFilter.PLAIN.matches(annotationType) ||, +				AnnotationsScanner.hasPlainJavaAnnotationsOnly(clazz)) {, +		if (AnnotationFilter.PLAIN.matches(metaAnnotationType) ||, +				AnnotationsScanner.hasPlainJavaAnnotationsOnly(annotationType)) {, +		return MergedAnnotations.from(annotationType, SearchStrategy.INHERITED_ANNOTATIONS,, +				RepeatableContainers.none(), AnnotationFilter.PLAIN).isPresent(metaAnnotationType);, +++ b/spring-core/spring-core.gradle, +	testCompile("com.google.code.findbugs:jsr305:3.0.2"), +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java, +		// Shortcut: directly present on the element, with no merging needed?, +		if (AnnotationFilter.PLAIN.matches(annotationType) ||, +				AnnotationsScanner.hasPlainJavaAnnotationsOnly(element)) {, +		if (AnnotationFilter.PLAIN.matches(annotationType) ||, +				AnnotationsScanner.hasPlainJavaAnnotationsOnly(element)) {, +		// Shortcut: directly present on the element, with no merging needed?, +		if (AnnotationFilter.PLAIN.matches(annotationType) ||, +				AnnotationsScanner.hasPlainJavaAnnotationsOnly(element)) {, +		if (AnnotationFilter.PLAIN.matches(annotationType) ||, +				AnnotationsScanner.hasPlainJavaAnnotationsOnly(element)) {, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationFilter.java, +	 * {@link AnnotationFilter} that matches annotations in the, +	 * {@code java.lang.*} and {@code org.springframework.lang.*} packages., +	 * {@code java.*}/{@code javax.*} namespaces., +	AnnotationFilter JAVA = packages("java", "javax");, +++ b/spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java, +		if (AnnotationFilter.PLAIN.matches(annotationType) ||, +				AnnotationsScanner.hasPlainJavaAnnotationsOnly(annotatedElement)) {, +		if (AnnotationFilter.PLAIN.matches(annotationType) ||, +				AnnotationsScanner.hasPlainJavaAnnotationsOnly(annotatedElement)) {, +		if (AnnotationFilter.PLAIN.matches(annotationType) ||, +				AnnotationsScanner.hasPlainJavaAnnotationsOnly(method)) {, +		if (AnnotationFilter.PLAIN.matches(annotationType) ||, +				AnnotationsScanner.hasPlainJavaAnnotationsOnly(clazz)) {, +		if (AnnotationFilter.PLAIN.matches(metaAnnotationType) ||, +				AnnotationsScanner.hasPlainJavaAnnotationsOnly(annotationType)) {, +		return MergedAnnotations.from(annotationType, SearchStrategy.INHERITED_ANNOTATIONS,, +				RepeatableContainers.none(), AnnotationFilter.PLAIN).isPresent(metaAnnotationType);, +++ b/spring-core/src/main/java/org/springframework/core/annotation/TypeMappedAnnotations.java, +	private static final AnnotationFilter FILTER_ALL = (annotationType -> true);, +	public <A extends Annotation> boolean isDirectlyPresent(Class<A> annotationType) {, +		if (this.annotationFilter.matches(annotationType)) {, +	public <A extends Annotation> Stream<MergedAnnotation<A>> stream(Class<A> annotationType) {]