[+++ b/spring-context/src/main/java/org/springframework/cache/annotation/package-info.java, + * Hooked into Spring's cache interception infrastructure via, + * {@link org.springframework.cache.interceptor.CacheOperationSource}., +++ b/spring-context/src/main/java/org/springframework/cache/annotation/package-info.java, + * Hooked into Spring's cache interception infrastructure via, + * {@link org.springframework.cache.interceptor.CacheOperationSource}., +++ b/spring-context/src/main/java/org/springframework/cache/concurrent/ConcurrentMapCache.java, +import org.springframework.cache.Cache;, +import org.springframework.cache.support.SimpleValueWrapper;, +, +	 * @param allowNullValues whether to accept and convert null values for this cache, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/package-info.java, + * Hooked into Spring's cache interception infrastructure via, + * {@link org.springframework.cache.interceptor.CacheOperationSource}., +++ b/spring-context/src/main/java/org/springframework/cache/concurrent/ConcurrentMapCache.java, +import org.springframework.cache.Cache;, +import org.springframework.cache.support.SimpleValueWrapper;, +, +	 * @param allowNullValues whether to accept and convert null values for this cache, +++ b/spring-context/src/main/java/org/springframework/cache/concurrent/package-info.java, + * use in a Spring context, using a JDK based thread pool at runtime., +++ b/spring-context/src/main/java/org/springframework/cache/annotation/package-info.java, + * Hooked into Spring's cache interception infrastructure via, + * {@link org.springframework.cache.interceptor.CacheOperationSource}., +++ b/spring-context/src/main/java/org/springframework/cache/concurrent/ConcurrentMapCache.java, +import org.springframework.cache.Cache;, +import org.springframework.cache.support.SimpleValueWrapper;, +, +	 * @param allowNullValues whether to accept and convert null values for this cache, +++ b/spring-context/src/main/java/org/springframework/cache/concurrent/package-info.java, + * use in a Spring context, using a JDK based thread pool at runtime., +++ b/spring-context/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, + * Copyright 2002-2012 the original author or authors., +	public void clear() {, +		this.cache.removeAll();, +	}, +, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/package-info.java, + * Hooked into Spring's cache interception infrastructure via, + * {@link org.springframework.cache.interceptor.CacheOperationSource}., +++ b/spring-context/src/main/java/org/springframework/cache/concurrent/ConcurrentMapCache.java, +import org.springframework.cache.Cache;, +import org.springframework.cache.support.SimpleValueWrapper;, +, +	 * @param allowNullValues whether to accept and convert null values for this cache, +++ b/spring-context/src/main/java/org/springframework/cache/concurrent/package-info.java, + * use in a Spring context, using a JDK based thread pool at runtime., +++ b/spring-context/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, + * Copyright 2002-2012 the original author or authors., +	public void clear() {, +		this.cache.removeAll();, +	}, +, +++ b/spring-context/src/main/java/org/springframework/cache/ehcache/EhCacheCacheManager.java, +	 * Set the backing EhCache {@link net.sf.ehcache.CacheManager}., +	/**, +	 * Return the backing EhCache {@link net.sf.ehcache.CacheManager}., +	 */, +	public net.sf.ehcache.CacheManager getCacheManager() {, +		return this.cacheManager;, +	}, +, +, +++ b/spring-context/src/main/java/org/springframework/cache/annotation/package-info.java, + * Hooked into Spring's cache interception infrastructure via, + * {@link org.springframework.cache.interceptor.CacheOperationSource}., +++ b/spring-context/src/main/java/org/springframework/cache/concurrent/ConcurrentMapCache.java, +import org.springframework.cache.Cache;, +import org.springframework.cache.support.SimpleValueWrapper;, +, +	 * @param allowNullValues whether to accept and convert null values for this cache, +++ b/spring-context/src/main/java/org/springframework/cache/concurrent/package-info.java, + * use in a Spring context, using a JDK based thread pool at runtime., +++ b/spring-context/src/main/java/org/springframework/cache/ehcache/EhCacheCache.java, + * Copyright 2002-2012 the original author or authors., +	public void clear() {, +		this.cache.removeAll();, +	}, +, +++ b/spring-context/src/main/java/org/springframework/cache/ehcache/EhCacheCacheManager.java, +	 * Set the backing EhCache {@link net.sf.ehcache.CacheManager}., +	/**, +	 * Return the backing EhCache {@link net.sf.ehcache.CacheManager}., +	 */, +	public net.sf.ehcache.CacheManager getCacheManager() {, +		return this.cacheManager;, +	}, +, +, +++ b/spring-context/src/main/java/org/springframework/cache/ehcache/package-info.java, + * <a href="http://ehcache.sourceforge.net">EhCache</a>,, + * allowing to set up an EhCache CacheManager and Caches]