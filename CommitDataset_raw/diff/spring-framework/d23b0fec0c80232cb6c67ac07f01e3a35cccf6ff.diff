[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/GroovyMarkupBeanDefinitionParser.java, +, +	protected boolean isEligibleAttribute(String name) {, +		return (name.equals("auto-indent") || name.equals("cache-templates") || name.equals("resource-loader-path"));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/GroovyMarkupBeanDefinitionParser.java, +, +	protected boolean isEligibleAttribute(String name) {, +		return (name.equals("auto-indent") || name.equals("cache-templates") || name.equals("resource-loader-path"));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ViewResolversBeanDefinitionParser.java, +		String[] names = new String[] {"jsp", "tiles", "bean-name", "freemarker", "velocity", "groovy", "bean", "ref"};, +			else if ("groovy".equals(name)) {, +			else if ("bean-name".equals(name)) {, +				resolverBeanDef = new RootBeanDefinition(BeanNameViewResolver.class);, +			}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/GroovyMarkupBeanDefinitionParser.java, +, +	protected boolean isEligibleAttribute(String name) {, +		return (name.equals("auto-indent") || name.equals("cache-templates") || name.equals("resource-loader-path"));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ViewResolversBeanDefinitionParser.java, +		String[] names = new String[] {"jsp", "tiles", "bean-name", "freemarker", "velocity", "groovy", "bean", "ref"};, +			else if ("groovy".equals(name)) {, +			else if ("bean-name".equals(name)) {, +				resolverBeanDef = new RootBeanDefinition(BeanNameViewResolver.class);, +			}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ViewResolverRegistry.java, +	 * Register a Groovy markup view resolver with an empty default view name, +	public UrlBasedViewResolverRegistration groovy() {, +			throw new BeanInitializationException("In addition to a Groovy markup view resolver " +, +	 * Register a bean name view resolver that interprets view names as the names, +	 * of {@link org.springframework.web.servlet.View} beans., +	 */, +	public void beanName() {, +		BeanNameViewResolver resolver = new BeanNameViewResolver();, +		this.viewResolvers.add(resolver);, +	}, +, +	/**, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/GroovyMarkupBeanDefinitionParser.java, +, +	protected boolean isEligibleAttribute(String name) {, +		return (name.equals("auto-indent") || name.equals("cache-templates") || name.equals("resource-loader-path"));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ViewResolversBeanDefinitionParser.java, +		String[] names = new String[] {"jsp", "tiles", "bean-name", "freemarker", "velocity", "groovy", "bean", "ref"};, +			else if ("groovy".equals(name)) {, +			else if ("bean-name".equals(name)) {, +				resolverBeanDef = new RootBeanDefinition(BeanNameViewResolver.class);, +			}, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/ViewResolverRegistry.java, +	 * Register a Groovy markup view resolver with an empty default view name, +	public UrlBasedViewResolverRegistration groovy() {, +			throw new BeanInitializationException("In addition to a Groovy markup view resolver " +, +	 * Register a bean name view resolver that interprets view names as the names, +	 * of {@link org.springframework.web.servlet.View} beans., +	 */, +	public void beanName() {, +		BeanNameViewResolver resolver = new BeanNameViewResolver();, +		this.viewResolvers.add(resolver);, +	}, +, +	/**, +++ b/spring-webmvc/src/main/resources/org/springframework/web/servlet/config/spring-mvc-4.1.xsd, +	To configure Velocity you must also add a top-level <mvc:velocity> element, +					<xsd:element name="groovy" type="urlViewResolverType">, +						<xsd:annotation>, +							<xsd:documentation><![CDATA[, +	Register a GroovyMarkupViewResolver., +	By default ".tpl" is configured as a view name suffix., +	To configure the Groovy markup template engine you must also add a top-level <mvc:groovy-markup> element, +	or declare a GroovyMarkupConfigurer bean., +							]]></xsd:documentation>, +						</xsd:annotation>, +					</xsd:element>, +	Configure the Groovy markup template engine for view resolution by registering a GroovyMarkupConfigurer bean., +			<xsd:attribute name="auto-indent" type="xsd:boolean">, +				<xsd:annotation>, +					<xsd:documentation><![CDATA[, +	Whether you want the template engine to render indents automatically., +					]]></xsd:documentation>, +				</xsd:annotation>, +			</xsd:attribute>, +			<xsd:attribute name="cache-templates" type="xsd:boolean">, +				<xsd:annotation>, +					<xsd:documentation><![CDATA[, +	If enabled templates are compiled once for each source (URL or File)., +	It is recommended to keep this flag to true unless you are in development mode, +	and want automatic reloading of templates., +					]]></xsd:documentation>, +				</xsd:annotation>, +			</xsd:attribute>, +	The Groovy markup template engine resource loader path via a Spring resource location., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/GroovyMarkupBeanDefinitionParser.java, +, +	protected boolean isEligibleAttribute(String name) {, +		return (name.equals("auto-indent") || name.equals("cache-templates") || name.equals("resource-loader-path"));, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/config/ViewResolversBeanDefinitionParser.java, +		String[] names = new String[] {"jsp", "tiles", "bean-name", "freemarker", "velocity", "groovy", "bean", "ref"};, +			else if ("groovy".equals(name)) {, +			else if ("bean-name".equals(name)) {, +				resolverBeanDef = new RootBeanDefinition(BeanNameViewResolver.class);, +			}]