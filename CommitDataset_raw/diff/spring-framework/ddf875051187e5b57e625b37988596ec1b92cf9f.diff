[+++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHeaders.java, +import org.springframework.util.Assert;, +	 * @param headers a map with headers to add, +		this(headers, ((idGenerator != null) ? idGenerator : defaultIdGenerator).generateId(),, +				System.currentTimeMillis());, +	/**, +	 * Constructor allowing a sub-class to access the (mutable) header map as well, +	 * to provide the ID and TIMESTAMP header values., +	 *, +	 * @param headers a map with headers to add, +	 * @param id the value for the {@link #ID} header, never {@code null}, +	 * @param timestamp the value for the {@link #TIMESTAMP} header,, +	 *    or {@code null} meaning no timestamp header, +	 */, +	protected MessageHeaders(Map<String, Object> headers, UUID id, Long timestamp) {, +		Assert.notNull(id, "'id' is required");, +		this.headers = (headers != null) ? new HashMap<String, Object>(headers) : new HashMap<String, Object>();, +		this.headers.put(ID, id);, +		if (timestamp != null) {, +			this.headers.put(TIMESTAMP, timestamp);, +		}, +	}, +, +, +++ b/spring-messaging/src/main/java/org/springframework/messaging/MessageHeaders.java, +import org.springframework.util.Assert;, +	 * @param headers a map with headers to add, +		this(headers, ((idGenerator != null) ? idGenerator : defaultIdGenerator).generateId(),, +				System.currentTimeMillis());, +	/**, +	 * Constructor allowing a sub-class to access the (mutable) header map as well, +	 * to provide the ID and TIMESTAMP header values., +	 *, +	 * @param headers a map with headers to add, +	 * @param id the value for the {@link #ID} header, never {@code null}, +	 * @param timestamp the value for the {@link #TIMESTAMP} header,, +	 *    or {@code null} meaning no timestamp header, +	 */, +	protected MessageHeaders(Map<String, Object> headers, UUID id, Long timestamp) {, +		Assert.notNull(id, "'id' is required");, +		this.headers = (headers != null) ? new HashMap<String, Object>(headers) : new HashMap<String, Object>();, +		this.headers.put(ID, id);, +		if (timestamp != null) {, +			this.headers.put(TIMESTAMP, timestamp);, +		}, +	}, +, +, +++ b/spring-messaging/src/test/java/org/springframework/messaging/MessageHeadersTests.java, +	public void subClassWithCustomIdAndNoTimestamp() {, +				super(null, new UUID(0, id.incrementAndGet()), null);]