[+++ b/spring-aop/src/main/java/org/springframework/aop/support/MethodMatchers.java, + * Copyright 2002-2013 the original author or authors., +		private final MethodMatcher mm1;, +, +		private final MethodMatcher mm2;, +, +			if (!super.equals(other)) {, +			ClassFilter otherCf1 = ClassFilter.TRUE;, +			ClassFilter otherCf2 = ClassFilter.TRUE;, +			if (other instanceof ClassFilterAwareUnionMethodMatcher) {, +				ClassFilterAwareUnionMethodMatcher cfa = (ClassFilterAwareUnionMethodMatcher) other;, +				otherCf1 = cfa.cf1;, +				otherCf2 = cfa.cf2;, +			}, +			return (this.cf1.equals(otherCf1) && this.cf2.equals(otherCf2));, +		private final MethodMatcher mm1;, +, +		private final MethodMatcher mm2;, +++ b/spring-aop/src/main/java/org/springframework/aop/support/MethodMatchers.java, + * Copyright 2002-2013 the original author or authors., +		private final MethodMatcher mm1;, +, +		private final MethodMatcher mm2;, +, +			if (!super.equals(other)) {, +			ClassFilter otherCf1 = ClassFilter.TRUE;, +			ClassFilter otherCf2 = ClassFilter.TRUE;, +			if (other instanceof ClassFilterAwareUnionMethodMatcher) {, +				ClassFilterAwareUnionMethodMatcher cfa = (ClassFilterAwareUnionMethodMatcher) other;, +				otherCf1 = cfa.cf1;, +				otherCf2 = cfa.cf2;, +			}, +			return (this.cf1.equals(otherCf1) && this.cf2.equals(otherCf2));, +		private final MethodMatcher mm1;, +, +		private final MethodMatcher mm2;, +++ b/spring-aop/src/test/java/org/springframework/aop/support/MethodMatchersTests.java, +, +, +	}, +	@Test, +	public void testUnionEquals() {, +		MethodMatcher first = MethodMatchers.union(MethodMatcher.TRUE, MethodMatcher.TRUE);, +		MethodMatcher second = new ComposablePointcut(MethodMatcher.TRUE).union(new ComposablePointcut(MethodMatcher.TRUE)).getMethodMatcher();, +		assertTrue(first.equals(second));, +		assertTrue(second.equals(first));, +, +		private final String prefix;, +, +, +, +]