[+++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Bean.java, +	 * within the body of a Bean-annotated method., +	 * method on a {@literal DataSource}. The method must have no arguments, but may, +	 * throw any exception., +	 * <p>Note: Only invoked on beans whose lifecycle is under the full control of the, +	 * factory which is always the case for singletons, but not guaranteed , +     * for any other scope., +	 * see {@link org.springframework.context.ConfigurableApplicationContext#close()}, +	 * <p>Note: This  attribute will not be inherited by child bean definitions, , +	 * hence it needs to be specified per concrete bean definition., +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Bean.java, +	 * within the body of a Bean-annotated method., +	 * method on a {@literal DataSource}. The method must have no arguments, but may, +	 * throw any exception., +	 * <p>Note: Only invoked on beans whose lifecycle is under the full control of the, +	 * factory which is always the case for singletons, but not guaranteed , +     * for any other scope., +	 * see {@link org.springframework.context.ConfigurableApplicationContext#close()}, +	 * <p>Note: This  attribute will not be inherited by child bean definitions, , +	 * hence it needs to be specified per concrete bean definition., +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/BeanMethod.java, +	public <A extends Annotation> A getAnnotation(Class<A> annoType) {, +				return (A) anno;, +		if(anno == null), +			throw new IllegalStateException(, +					format("required annotation %s is not present on %s", annoType.getSimpleName(), this));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Bean.java, +	 * within the body of a Bean-annotated method., +	 * method on a {@literal DataSource}. The method must have no arguments, but may, +	 * throw any exception., +	 * <p>Note: Only invoked on beans whose lifecycle is under the full control of the, +	 * factory which is always the case for singletons, but not guaranteed , +     * for any other scope., +	 * see {@link org.springframework.context.ConfigurableApplicationContext#close()}, +	 * <p>Note: This  attribute will not be inherited by child bean definitions, , +	 * hence it needs to be specified per concrete bean definition., +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/BeanMethod.java, +	public <A extends Annotation> A getAnnotation(Class<A> annoType) {, +				return (A) anno;, +		if(anno == null), +			throw new IllegalStateException(, +					format("required annotation %s is not present on %s", annoType.getSimpleName(), this));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Configuration.java, + * @see ConfigurationClassPostProcessor;, +@Component, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Bean.java, +	 * within the body of a Bean-annotated method., +	 * method on a {@literal DataSource}. The method must have no arguments, but may, +	 * throw any exception., +	 * <p>Note: Only invoked on beans whose lifecycle is under the full control of the, +	 * factory which is always the case for singletons, but not guaranteed , +     * for any other scope., +	 * see {@link org.springframework.context.ConfigurableApplicationContext#close()}, +	 * <p>Note: This  attribute will not be inherited by child bean definitions, , +	 * hence it needs to be specified per concrete bean definition., +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/BeanMethod.java, +	public <A extends Annotation> A getAnnotation(Class<A> annoType) {, +				return (A) anno;, +		if(anno == null), +			throw new IllegalStateException(, +					format("required annotation %s is not present on %s", annoType.getSimpleName(), this));, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/Configuration.java, + * @see ConfigurationClassPostProcessor;, +@Component, +++ b/org.springframework.context/src/main/java/org/springframework/context/annotation/ConfigurationClass.java, +import java.lang.annotation.Annotation;, +	private HashSet<Annotation> annotations = new HashSet<Annotation>();, +	public void addAnnotation(Annotation annotation) {, +		this.annotations.add(annotation);, +	/**, +	 * @return the annotation on this class matching <var>annoType</var> or, +	 * {@literal null} if not present., +	 * @see #getRequiredAnnotation(Class), +	 */, +	@SuppressWarnings("unchecked"), +	public <A extends Annotation> A getAnnotation(Class<A> annoType) {, +		for (Annotation annotation : annotations), +			if(annotation.annotationType().equals(annoType)), +				return (A) annotation;, +, +		return null;, +	}, +, +	/**, +	 * @return the annotation on this class matching <var>annoType</var>, +	 * @throws {@link IllegalStateException} if not present, +	 * @see #getAnnotation(Class), +	 */, +	public <A extends Annotation> A getRequiredAnnotation(Class<A> annoType) {, +		A anno = getAnnotation(annoType);, +, +		if(anno == null), +			throw new IllegalStateException(, +					format("required annotation %s is not present on %s", annoType.getSimpleName(), this));, +, +		return anno;, +		if (getAnnotation(Configuration.class) == null), +		result = prime * result, +				+ ((annotations == null) ? 0 : annotations.hashCode());, +		result = prime * result]