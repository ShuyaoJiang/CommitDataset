[+++ b/build.gradle, +		optional("io.reactivex:rxnetty-http:${rxnettyVersion}") {, +			exclude group: 'io.reactivex', module: 'rxjava', +		}, +		optional("io.reactivex:rxjava:${rxjavaVersion}"), +		optional("io.reactivex:rxjava-reactive-streams:${rxjavaAdapterVersion}"), +++ b/build.gradle, +		optional("io.reactivex:rxnetty-http:${rxnettyVersion}") {, +			exclude group: 'io.reactivex', module: 'rxjava', +		}, +		optional("io.reactivex:rxjava:${rxjavaVersion}"), +		optional("io.reactivex:rxjava-reactive-streams:${rxjavaAdapterVersion}"), +++ b/spring-web-reactive/src/main/java/org/springframework/web/reactive/socket/CloseStatus.java, +/*, + * Copyright 2002-2014 the original author or authors., + *, + * Licensed under the Apache License, Version 2.0 (the "License");, + * you may not use this file except in compliance with the License., + * You may obtain a copy of the License at, + *, + *      http://www.apache.org/licenses/LICENSE-2.0, + *, + * Unless required by applicable law or agreed to in writing, software, + * distributed under the License is distributed on an "AS IS" BASIS,, + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied., + * See the License for the specific language governing permissions and, + * limitations under the License., + */, +, +package org.springframework.web.reactive.socket;, +, +import org.springframework.util.Assert;, +import org.springframework.util.ObjectUtils;, +, +/**, + * Representation of WebSocket "close" status codes and reasons. Status codes, + * in the 1xxx range are pre-defined by the protocol., + *, + * <p>See <a href="https://tools.ietf.org/html/rfc6455#section-7.4.1">, + *     RFC 6455, Section 7.4.1 "Defined Status Codes"</a>., + *, + * @author Rossen Stoyanchev, + * @since 5.0, + */, +public final class CloseStatus {, +, +	/**, +	 * "1000 indicates a normal closure, meaning that the purpose for which the connection, +	 * was established has been fulfilled.", +	 */, +	public static final CloseStatus NORMAL = new CloseStatus(1000);, +, +	/**, +	 * "1001 indicates that an endpoint is "going away", such as a server going down or a, +	 * browser having navigated away from a page.", +	 */, +	public static final CloseStatus GOING_AWAY = new CloseStatus(1001);, +, +	/**, +	 * "1002 indicates that an endpoint is terminating the connection due to a protocol, +	 * error.", +	 */, +	public static final CloseStatus PROTOCOL_ERROR  = new CloseStatus(1002);, +, +	/**, +	 * "1003 indicates that an endpoint is terminating the connection because it has, +	 * received a type of data it cannot accept (e.g., an endpoint that understands only, +	 * text data MAY send this if it receives a binary message).", +	 */, +	public static final CloseStatus NOT_ACCEPTABLE = new CloseStatus(1003);, +, +	// 10004: Reserved., +	// The specific meaning might be defined in the future., +, +	/**, +	 * "1005 is a reserved value and MUST NOT be set as a status code in a Close control, +	 * frame by an endpoint. It is designated for use in applications expecting a status, +	 * code to indicate that no status code was actually present.", +	 */, +	public static final CloseStatus NO_STATUS_CODE = new CloseStatus(1005);, +, +	/**, +	 * "1006 is a reserved value and MUST NOT be set as a status code in a Close control, +	 * frame by an endpoint. It is designated for use in applications expecting a status, +	 * code to indicate that the connection was closed abnormally, e.g., without sending, +	 * or receiving a Close control frame.", +	 */, +	public static final CloseStatus NO_CLOSE_FRAME = new CloseStatus(1006);, +, +	/**, +	 * "1007 indicates that an endpoint is terminating the connection because it has, +	 * received data within a message that was not consistent with the type of the message, +	 * (e.g., non-UTF-8 [RFC3629] data within a text message).", +	 */, +	public static final CloseStatus BAD_DATA = new CloseStatus(1007);, +, +	/**, +	 * "1008 indicates that an endpoint is terminating the connection because it has, +	 * received a message that violates its policy. This is a generic status code that can, +	 * be returned when there is no other more suitable status code (e.g., 1003 or 1009)]