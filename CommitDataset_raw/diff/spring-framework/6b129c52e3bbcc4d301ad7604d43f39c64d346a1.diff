[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/HandlerMethodMappingNamingStrategy.java, + * A strategy for assigning a name to a handler method's mapping., + *, + * <p>The strategy can be configured on, + * {@link org.springframework.web.servlet.handler.AbstractHandlerMethodMapping, + * AbstractHandlerMethodMapping}. It is used to assign a name to the mapping of, + * every registered handler method. The names can then be queried via, + * {@link org.springframework.web.servlet.handler.AbstractHandlerMethodMapping#getHandlerMethodsForMappingName(String), + * AbstractHandlerMethodMapping#getHandlerMethodsForMappingName}., + *, + * <p>Applications can build a URL to a controller method by name with the help, + * of the static method, + * {@link org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder#fromMappingName(String), + * MvcUriComponentsBuilder#fromMappingName} or in JSPs through the "mvcUrl", + * function registered by the Spring tag library., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/handler/HandlerMethodMappingNamingStrategy.java, + * A strategy for assigning a name to a handler method's mapping., + *, + * <p>The strategy can be configured on, + * {@link org.springframework.web.servlet.handler.AbstractHandlerMethodMapping, + * AbstractHandlerMethodMapping}. It is used to assign a name to the mapping of, + * every registered handler method. The names can then be queried via, + * {@link org.springframework.web.servlet.handler.AbstractHandlerMethodMapping#getHandlerMethodsForMappingName(String), + * AbstractHandlerMethodMapping#getHandlerMethodsForMappingName}., + *, + * <p>Applications can build a URL to a controller method by name with the help, + * of the static method, + * {@link org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder#fromMappingName(String), + * MvcUriComponentsBuilder#fromMappingName} or in JSPs through the "mvcUrl", + * function registered by the Spring tag library., +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java, +	 * Create a URL from the name of a Spring MVC controller method's request mapping., +	 *, +	 * <p>The configured, +	 * HandlerMethodMappingNamingStrategy} determines the names of controller, +	 * method request mappings at startup. By default all mappings are assigned, +	 * a name based on the capital letters of the class name, followed by "#" as, +	 * separator, and then the method name. For example "PC#getPerson", +	 * for a class named PersonController with method getPerson. In case the, +	 * naming convention does not produce unique results, an explicit name may, +	 * be assigned through the name attribute of the {@code @RequestMapping}, +	 * annotation., +	 *, +	 * <p>This is aimed primarily for use in view rendering technologies and EL, +	 * expressions. The Spring URL tag library registers this method as a function, +	 * called "mvcUrl"., +	 *, +	 * <p>For example, given this controller:, +	 * <pre class="code">, +	 * &#064;RequestMapping("/people"), +	 * class PersonController {, +	 *, +	 *   &#064;RequestMapping("/{id}"), +	 *   public HttpEntity<Void> getPerson(&#064;PathVariable String id) { ... }, +	 *, +	 * }, +	 * </pre>, +	 *, +	 * A JSP can prepare a URL to the controller method as follows:, +	 *, +	 * <pre class="code">, +	 * <%@ taglib uri="http://www.springframework.org/tags" prefix="s" %>, +	 *, +	 * &lt;a href="${s:mvcUrl('PC#getPerson').arg(0,"123").build()}"&gt;Get Person&lt;/a&gt;, +	 * </pre>, +	 *, +	 * <p>Note that it's not necessary to specify all arguments. Only the ones, +	 * required to prepare the URL, mainly {@code @RequestParam} and {@code @PathVariable})., +	 *, +	 * @param mappingName the mapping name, +	 * @return a builder to to prepare the URI String, +	public static MethodArgumentBuilder fromMappingName(String mappingName) {, +		RequestMappingInfoHandlerMapping handlerMapping = getRequestMappingInfoHandlerMapping();, +		List<HandlerMethod> handlerMethods = handlerMapping.getHandlerMethodsForMappingName(mappingName);, +			throw new IllegalArgumentException("Mapping mappingName not found: " + mappingName);, +			throw new IllegalArgumentException(, +					"No unique match for mapping mappingName " + mappingName + ": " + handlerMethods);, +		return new MethodArgumentBuilder(handlerMethods.get(0).getMethod());, +, +	public static class MethodArgumentBuilder {, +, +		private final Method method;, +, +		private final Object[] argumentValues;, +, +, +		public MethodArgumentBuilder(Method method) {, +			Assert.notNull(method, "'method' is required");, +			this.method = method;, +			this.argumentValues = new Object[method.getParameterTypes().length];, +			for (int i = 0; i < this.argumentValues.length; i++) {, +				this.argumentValues[i] = null;, +			}, +		}, +, +		public MethodArgumentBuilder arg(int index, Object value) {, +			this.argumentValues[index] = value;, +			return this;, +		}, +]