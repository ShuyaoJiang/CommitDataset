[+++ b/spring-web/src/main/java/org/springframework/http/client/MultipartBodyBuilder.java, +		if (part instanceof PublisherEntity<?,?>) {, +			PublisherPartBuilder<?, ?> builder = new PublisherPartBuilder<>((PublisherEntity<?, ?>) part);, +			this.parts.add(name, builder);, +			return builder;, +		}, +, +		PublisherPartBuilder<T, P> builder = new PublisherPartBuilder<>(headers, publisher, typeReference);, +		public PublisherPartBuilder(HttpHeaders headers, P body, ParameterizedTypeReference<S> typeReference) {, +		public PublisherPartBuilder(PublisherEntity<S, P> other) {, +			super(other.getHeaders(), other.getBody());, +			this.resolvableType = other.getResolvableType();, +		}, +, +, +++ b/spring-web/src/main/java/org/springframework/http/client/MultipartBodyBuilder.java, +		if (part instanceof PublisherEntity<?,?>) {, +			PublisherPartBuilder<?, ?> builder = new PublisherPartBuilder<>((PublisherEntity<?, ?>) part);, +			this.parts.add(name, builder);, +			return builder;, +		}, +, +		PublisherPartBuilder<T, P> builder = new PublisherPartBuilder<>(headers, publisher, typeReference);, +		public PublisherPartBuilder(HttpHeaders headers, P body, ParameterizedTypeReference<S> typeReference) {, +		public PublisherPartBuilder(PublisherEntity<S, P> other) {, +			super(other.getHeaders(), other.getBody());, +			this.resolvableType = other.getResolvableType();, +		}, +, +, +++ b/spring-web/src/test/java/org/springframework/http/client/MultipartBodyBuilderTests.java, +import org.springframework.http.client.MultipartBodyBuilder.PublisherEntity;, +				((PublisherEntity<?,?>) resultEntity).getResolvableType());, +				((PublisherEntity<?,?>) resultEntity).getResolvableType());, +	@Test // SPR-16601, +	public void publisherEntityAcceptedAsInput() {, +, +		Publisher<String> publisher = Flux.just("foo", "bar", "baz");, +		MultipartBodyBuilder builder = new MultipartBodyBuilder();, +		builder.asyncPart("publisherClass", publisher, String.class).header("baz", "qux");, +		HttpEntity<?> entity = builder.build().getFirst("publisherClass");, +, +		assertNotNull(entity);, +		assertEquals(PublisherEntity.class, entity.getClass());, +, +		// Now build a new MultipartBodyBuilder, as BodyInserters.fromMultipartData would do..., +, +		builder = new MultipartBodyBuilder();, +		builder.part("publisherClass", entity);, +		entity = builder.build().getFirst("publisherClass");, +, +		assertNotNull(entity);, +		assertEquals(PublisherEntity.class, entity.getClass());, +	}, +]