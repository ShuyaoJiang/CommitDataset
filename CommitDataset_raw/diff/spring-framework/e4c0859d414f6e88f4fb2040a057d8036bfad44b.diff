[+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +		CrossOrigin typeAnnotation = AnnotatedElementUtils.findMergedAnnotation(handlerMethod.getBeanType(), CrossOrigin.class);, +		CrossOrigin methodAnnotation = AnnotatedElementUtils.findMergedAnnotation(method, CrossOrigin.class);, +++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerMapping.java, +		CrossOrigin typeAnnotation = AnnotatedElementUtils.findMergedAnnotation(handlerMethod.getBeanType(), CrossOrigin.class);, +		CrossOrigin methodAnnotation = AnnotatedElementUtils.findMergedAnnotation(method, CrossOrigin.class);, +++ b/spring-webmvc/src/test/java/org/springframework/web/servlet/mvc/method/annotation/CrossOriginTests.java, +import java.lang.annotation.ElementType;, +import java.lang.annotation.Retention;, +import java.lang.annotation.RetentionPolicy;, +import java.lang.annotation.Target;, +import org.springframework.core.annotation.AnnotatedElementUtils;, + * @author Nicolas Labrot, +		assertNull(getCorsConfiguration(chain, false));, +		assertNull(getCorsConfiguration(chain, false));, +		assertNull(getCorsConfiguration(chain, false));, +	@Test // SPR-13468, +	public void classLevelComposedAnnotation() throws Exception {, +		this.handlerMapping.registerHandler(new ClassLevelMappingWithComposedAnnotation());, +, +		this.request.setRequestURI("/foo");, +		HandlerExecutionChain chain = this.handlerMapping.getHandler(request);, +		CorsConfiguration config = getCorsConfiguration(chain, false);, +		assertNotNull(config);, +		assertArrayEquals(new String[]{"GET"}, config.getAllowedMethods().toArray());, +		assertArrayEquals(new String[]{"http://foo.com"}, config.getAllowedOrigins().toArray());, +		assertTrue(config.getAllowCredentials());, +	}, +, +	@Test // SPR-13468, +	public void methodLevelComposedAnnotation() throws Exception {, +		this.handlerMapping.registerHandler(new MethodLevelMappingWithComposedAnnotation());, +, +		this.request.setRequestURI("/foo");, +		HandlerExecutionChain chain = this.handlerMapping.getHandler(request);, +		CorsConfiguration config = getCorsConfiguration(chain, false);, +		assertNotNull(config);, +		assertArrayEquals(new String[]{"GET"}, config.getAllowedMethods().toArray());, +		assertArrayEquals(new String[]{"http://foo.com"}, config.getAllowedOrigins().toArray());, +		assertTrue(config.getAllowCredentials());, +	}, +, +	@Target({ElementType.METHOD, ElementType.TYPE}), +	@Retention(RetentionPolicy.RUNTIME), +	@CrossOrigin, +	private @interface ComposedCrossOrigin {, +		String[] origins() default {};, +		String allowCredentials() default "";, +	}, +, +	@Controller, +	@ComposedCrossOrigin(origins = "http://foo.com", allowCredentials = "true"), +	private static class ClassLevelMappingWithComposedAnnotation {, +, +		@RequestMapping(path = "/foo", method = RequestMethod.GET), +		public void foo() {, +		}, +	}, +, +, +	@Controller, +	private static class MethodLevelMappingWithComposedAnnotation {, +, +		@RequestMapping(path = "/foo", method = RequestMethod.GET), +		@ComposedCrossOrigin(origins = "http://foo.com", allowCredentials = "true"), +		public void foo() {, +		}, +	}, +, +			RequestMapping annotation = AnnotatedElementUtils.findMergedAnnotation(method, RequestMapping.class);]